uint64_t std::__bracket_expression<wchar_t,std::regex_traits<wchar_t>>::__bracket_expression[abi:ne180100](uint64_t a1, uint64_t a2, uint64_t a3, char a4, char a5, char a6)
{
  const std::locale *v11;
  __int128 v12;
  BOOL v13;
  std::locale v15;
  std::string v16;

  *(_QWORD *)(a1 + 8) = a3;
  v11 = (const std::locale *)(a1 + 16);
  std::locale::locale((std::locale *)(a1 + 16), (const std::locale *)a2);
  v12 = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 24) = v12;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_BYTE *)(a1 + 168) = a4;
  *(_BYTE *)(a1 + 169) = a5;
  *(_BYTE *)(a1 + 170) = a6;
  std::locale::locale(&v15, v11);
  std::locale::name(&v16, &v15);
  if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
  {
    v13 = v16.__r_.__value_.__l.__size_ != 1 || *v16.__r_.__value_.__l.__data_ != 67;
    operator delete(v16.__r_.__value_.__l.__data_);
  }
  else
  {
    v13 = SHIBYTE(v16.__r_.__value_.__r.__words[2]) != 1 || v16.__r_.__value_.__s.__data_[0] != 67;
  }
  std::locale::~locale(&v15);
  *(_BYTE *)(a1 + 171) = v13;
  return a1;
}

void sub_1AD8B126C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _QWORD *a10)
{
  void (__cdecl ***v10)(std::__owns_one_state<wchar_t> *__hidden);
  std::locale *v11;
  void **v12;
  void (__cdecl **v14)(std::__owns_one_state<wchar_t> *__hidden);
  void (__cdecl **v15)(std::__owns_one_state<wchar_t> *__hidden);
  void (__cdecl **v16)(std::__owns_one_state<wchar_t> *__hidden);
  void (__cdecl **v17)(std::__owns_one_state<wchar_t> *__hidden);

  std::locale::~locale((std::locale *)&a9);
  a10 = v10 + 17;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a10);
  v14 = v10[14];
  if (v14)
  {
    v10[15] = v14;
    operator delete(v14);
  }
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a10);
  v15 = v10[8];
  if (v15)
  {
    v10[9] = v15;
    operator delete(v15);
  }
  v16 = (void (__cdecl **)(std::__owns_one_state<wchar_t> *__hidden))*v12;
  if (*v12)
  {
    v10[6] = v16;
    operator delete(v16);
  }
  std::locale::~locale(v11);
  v17 = v10[1];
  if (v17)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<wchar_t> *__hidden)))*v17 + 1))(v17);
  _Unwind_Resume(a1);
}

std::locale *std::__bracket_expression<wchar_t,std::regex_traits<wchar_t>>::~__bracket_expression(std::locale *a1)
{
  std::locale::__imp *locale;
  std::locale::__imp *v3;
  std::locale::__imp *v4;
  std::locale::__imp *v5;
  std::locale *v7;

  v7 = a1 + 17;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v7);
  locale = a1[14].__locale_;
  if (locale)
  {
    a1[15].__locale_ = locale;
    operator delete(locale);
  }
  v7 = a1 + 11;
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v7);
  v3 = a1[8].__locale_;
  if (v3)
  {
    a1[9].__locale_ = v3;
    operator delete(v3);
  }
  v4 = a1[5].__locale_;
  if (v4)
  {
    a1[6].__locale_ = v4;
    operator delete(v4);
  }
  std::locale::~locale(a1 + 2);
  v5 = a1[1].__locale_;
  if (v5)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)v5 + 8))(v5);
  return a1;
}

uint64_t std::__bracket_expression<wchar_t,std::regex_traits<wchar_t>>::~__bracket_expression(std::locale *a1)
{
  std::locale::__imp *locale;
  std::locale::__imp *v3;
  std::locale::__imp *v4;
  std::locale::__imp *v5;
  std::locale *v7;

  v7 = a1 + 17;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v7);
  locale = a1[14].__locale_;
  if (locale)
  {
    a1[15].__locale_ = locale;
    operator delete(locale);
  }
  v7 = a1 + 11;
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v7);
  v3 = a1[8].__locale_;
  if (v3)
  {
    a1[9].__locale_ = v3;
    operator delete(v3);
  }
  v4 = a1[5].__locale_;
  if (v4)
  {
    a1[6].__locale_ = v4;
    operator delete(v4);
  }
  std::locale::~locale(a1 + 2);
  v5 = a1[1].__locale_;
  if (v5)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)v5 + 8))(v5);
  return MEMORY[0x1AF44D190](a1, 0x10F1C4061CF1F02);
}

void std::__bracket_expression<wchar_t,std::regex_traits<wchar_t>>::__exec(const std::__bracket_expression<wchar_t, std::regex_traits<wchar_t>> *this, std::__bracket_expression<wchar_t, std::regex_traits<wchar_t>>::__state *a2)
{
  __int32 *current;
  __int32 *last;
  uint64_t v6;
  int32x2_t *begin;
  uint64_t v8;
  unint64_t v9;
  int32x2_t v10;
  std::pair<std::wstring, std::wstring> *v11;
  uint64_t v12;
  unint64_t v13;
  std::pair<std::wstring, std::wstring> *v14;
  int v15;
  size_t size;
  size_t v17;
  size_t v18;
  const __int32 *p_p;
  const __int32 *v20;
  int v21;
  std::pair<std::wstring, std::wstring> *v22;
  size_t v23;
  int v24;
  std::wstring::size_type v25;
  size_t v26;
  std::wstring *p_second;
  const __int32 *v28;
  std::wstring::pointer data;
  const __int32 *v30;
  const __int32 *v31;
  int v32;
  _BOOL4 negate;
  int v34;
  uint64_t v35;
  size_t v36;
  uint64_t v37;
  std::vector<wchar_t>::pointer v38;
  uint64_t v39;
  unint64_t v40;
  int v41;
  std::regex_traits<wchar_t>::char_class_type v42;
  BOOL v43;
  std::vector<wchar_t>::pointer v44;
  __int32 *v45;
  __int32 *v46;
  std::vector<std::pair<std::wstring, std::wstring>>::pointer v47;
  std::vector<std::pair<std::wstring, std::wstring>>::pointer v48;
  uint64_t v49;
  unint64_t v50;
  std::pair<std::wstring, std::wstring> *v51;
  int v52;
  size_t v53;
  size_t v54;
  size_t v55;
  const __int32 *v56;
  const __int32 *v57;
  int v58;
  std::pair<std::wstring, std::wstring> *v59;
  size_t v60;
  int v61;
  std::wstring::size_type v62;
  size_t v63;
  std::wstring *v64;
  const __int32 *v65;
  std::wstring::pointer v66;
  const __int32 *v67;
  const __int32 *v68;
  int v69;
  char v70;
  std::vector<std::wstring>::pointer v71;
  std::vector<std::wstring>::pointer v72;
  uint64_t v73;
  unint64_t v74;
  std::wstring *v75;
  size_t v76;
  std::wstring::size_type v77;
  int v78;
  const __int32 *v79;
  const __int32 *v80;
  char v81;
  __int32 v82;
  std::regex_traits<wchar_t>::char_class_type v83;
  std::vector<std::wstring>::pointer end;
  std::vector<std::wstring>::pointer v85;
  uint64_t v86;
  unint64_t v87;
  std::wstring *v88;
  size_t v89;
  std::wstring::size_type v90;
  int v91;
  const __int32 *v92;
  const __int32 *v93;
  char v94;
  __int32 v95;
  std::regex_traits<wchar_t>::char_class_type mask;
  __int32 v97;
  std::regex_traits<wchar_t>::char_class_type v98;
  int v99;
  __int32 v100;
  std::regex_traits<wchar_t>::char_class_type neg_mask;
  __int32 v102;
  std::regex_traits<wchar_t>::char_class_type v103;
  std::__node<wchar_t> *first;
  int v105;
  void *__p;
  size_t v107;
  char v108;
  __int32 __c[2];
  uint64_t v110;

  current = a2->__current_;
  last = a2->__last_;
  if (current == last)
  {
    v35 = 0;
    negate = this->__negate_;
    goto LABEL_206;
  }
  if (!this->__might_have_digraph_ || current + 1 == last)
    goto LABEL_61;
  v6 = current[1];
  __c[0] = *current;
  __c[1] = v6;
  if (this->__icase_)
  {
    __c[0] = ((uint64_t (*)(const std::ctype<wchar_t> *))this->__traits_.__ct_->do_tolower)(this->__traits_.__ct_);
    __c[1] = ((uint64_t (*)(const std::ctype<wchar_t> *, uint64_t))this->__traits_.__ct_->do_tolower)(this->__traits_.__ct_, v6);
  }
  std::regex_traits<wchar_t>::__lookup_collatename<wchar_t *>((uint64_t)&this->__traits_, __c, (int *)&v110, (uint64_t)&__p);
  if ((v108 & 0x80000000) == 0)
  {
    if (v108)
      goto LABEL_8;
LABEL_61:
    negate = 0;
    v35 = 1;
    goto LABEL_62;
  }
  v36 = v107;
  operator delete(__p);
  if (!v36)
    goto LABEL_61;
LABEL_8:
  begin = (int32x2_t *)this->__digraphs_.__begin_;
  v8 = (char *)this->__digraphs_.__end_ - (char *)begin;
  if (v8)
  {
    v9 = v8 >> 3;
    if (v9 <= 1)
      v9 = 1;
    do
    {
      v10 = vceq_s32(*(int32x2_t *)__c, *begin);
      if ((v10.i32[0] & v10.i32[1] & 1) != 0)
        goto LABEL_196;
      ++begin;
    }
    while (--v9);
  }
  if (!this->__collate_ || this->__ranges_.__begin_ == this->__ranges_.__end_)
  {
    negate = 0;
  }
  else
  {
    std::regex_traits<wchar_t>::transform<wchar_t *>((uint64_t)&this->__traits_, __c, (int *)&v110);
    v11 = this->__ranges_.__begin_;
    if (this->__ranges_.__end_ != v11)
    {
      v12 = 0;
      v13 = 0;
      do
      {
        v14 = &v11[v12];
        v15 = SHIBYTE(v14->first.__r_.__value_.__r.__words[2]);
        if (v15 >= 0)
          size = HIBYTE(v14->first.__r_.__value_.__r.__words[2]);
        else
          size = v14->first.__r_.__value_.__l.__size_;
        if (v108 >= 0)
          v17 = v108;
        else
          v17 = v107;
        if (size >= v17)
          v18 = v17;
        else
          v18 = size;
        if (v18
          && (v108 >= 0 ? (p_p = (const __int32 *)&__p) : (p_p = (const __int32 *)__p),
              v15 >= 0 ? (v20 = (const __int32 *)v14) : (v20 = (const __int32 *)v14->first.__r_.__value_.__r.__words[0]),
              (v21 = wmemcmp(p_p, v20, v18)) != 0))
        {
          if (v21 < 0)
            goto LABEL_57;
        }
        else if (v17 < size)
        {
          goto LABEL_57;
        }
        v22 = &this->__ranges_.__begin_[v12];
        if (v108 >= 0)
          v23 = v108;
        else
          v23 = v107;
        v24 = SHIBYTE(v22->second.__r_.__value_.__r.__words[2]);
        if (v24 >= 0)
          v25 = HIBYTE(v22->second.__r_.__value_.__r.__words[2]);
        else
          v25 = v22->second.__r_.__value_.__l.__size_;
        if (v23 >= v25)
          v26 = v25;
        else
          v26 = v23;
        if (v26
          && ((data = v22->second.__r_.__value_.__l.__data_, p_second = &v22->second, v28 = data, v24 >= 0)
            ? (v30 = (const __int32 *)p_second)
            : (v30 = v28),
              v108 >= 0 ? (v31 = (const __int32 *)&__p) : (v31 = (const __int32 *)__p),
              (v32 = wmemcmp(v30, v31, v26)) != 0))
        {
          if ((v32 & 0x80000000) == 0)
            goto LABEL_160;
        }
        else if (v25 >= v23)
        {
LABEL_160:
          negate = 1;
          v34 = 5;
          goto LABEL_161;
        }
LABEL_57:
        ++v13;
        v11 = this->__ranges_.__begin_;
        ++v12;
      }
      while (v13 < 0xAAAAAAAAAAAAAAABLL * (((char *)this->__ranges_.__end_ - (char *)v11) >> 4));
    }
    negate = 0;
    v34 = 0;
LABEL_161:
    if (v108 < 0)
      operator delete(__p);
    if (negate)
      goto LABEL_188;
  }
  if (this->__equivalences_.__begin_ == this->__equivalences_.__end_)
    goto LABEL_190;
  std::regex_traits<wchar_t>::__transform_primary<wchar_t *>((uint64_t)&this->__traits_, __c, (int *)&v110, (uint64_t)&__p);
  v85 = this->__equivalences_.__begin_;
  end = this->__equivalences_.__end_;
  if (end == v85)
  {
LABEL_183:
    v94 = 0;
    v34 = 0;
    goto LABEL_185;
  }
  v86 = 0;
  v87 = 0;
  while (1)
  {
    v88 = &v85[v86];
    if (v108 >= 0)
      v89 = v108;
    else
      v89 = v107;
    v90 = HIBYTE(v88->__r_.__value_.__r.__words[2]);
    v91 = (char)v90;
    if ((v90 & 0x80u) != 0)
      v90 = v88->__r_.__value_.__l.__size_;
    if (v89 != v90)
      goto LABEL_182;
    if (!v89)
      break;
    v92 = v91 >= 0 ? (const __int32 *)&v85[v86] : (const __int32 *)v88->__r_.__value_.__r.__words[0];
    v93 = v108 >= 0 ? (const __int32 *)&__p : (const __int32 *)__p;
    if (!wmemcmp(v93, v92, v89))
      break;
    v85 = this->__equivalences_.__begin_;
    end = this->__equivalences_.__end_;
LABEL_182:
    ++v87;
    ++v86;
    if (v87 >= 0xAAAAAAAAAAAAAAABLL * (((char *)end - (char *)v85) >> 3))
      goto LABEL_183;
  }
  v94 = 1;
  v34 = 5;
  negate = 1;
LABEL_185:
  if (v108 < 0)
    operator delete(__p);
  if ((v94 & 1) == 0)
  {
LABEL_190:
    v95 = __c[0];
    mask = this->__mask_;
    if ((((uint64_t (*)(const std::ctype<wchar_t> *, _QWORD, _QWORD))this->__traits_.__ct_->do_is)(this->__traits_.__ct_, mask, __c[0]) & 1) == 0&& (v95 != 95 || (mask & 0x80) == 0)|| (v97 = __c[1], v98 = this->__mask_, (((uint64_t (*)(const std::ctype<wchar_t> *, _QWORD, _QWORD))this->__traits_.__ct_->do_is)(this->__traits_.__ct_, v98, __c[1]) & 1) == 0)&& (v97 != 95 || (v98 & 0x80) == 0))
    {
      v100 = __c[0];
      neg_mask = this->__neg_mask_;
      if ((((uint64_t (*)(const std::ctype<wchar_t> *, _QWORD, _QWORD))this->__traits_.__ct_->do_is)(this->__traits_.__ct_, neg_mask, __c[0]) & 1) != 0|| v100 == 95 && (neg_mask & 0x80) != 0|| (v102 = __c[1], v103 = this->__neg_mask_, (((uint64_t (*)(const std::ctype<wchar_t> *, _QWORD, _QWORD))this->__traits_.__ct_->do_is)(this->__traits_.__ct_, v103, __c[1]) & 1) != 0)|| (v99 = 1, v102 == 95) && (v103 & 0x80) != 0)
      {
        v99 = negate;
      }
      goto LABEL_204;
    }
LABEL_196:
    v99 = 1;
LABEL_204:
    negate = v99;
    goto LABEL_205;
  }
LABEL_188:
  if (v34)
  {
LABEL_205:
    v35 = 2;
    goto LABEL_206;
  }
  v35 = 2;
LABEL_62:
  v37 = *(unsigned int *)a2->__current_;
  __c[0] = *a2->__current_;
  if (this->__icase_)
  {
    v37 = ((uint64_t (*)(const std::ctype<wchar_t> *, uint64_t))this->__traits_.__ct_->do_tolower)(this->__traits_.__ct_, v37);
    __c[0] = v37;
  }
  v38 = this->__chars_.__begin_;
  v39 = (char *)this->__chars_.__end_ - (char *)v38;
  if (v39)
  {
    v40 = v39 >> 2;
    if (v40 <= 1)
      v40 = 1;
    do
    {
      v41 = *v38++;
      if ((_DWORD)v37 == v41)
        goto LABEL_159;
      --v40;
    }
    while (v40);
  }
  v42 = this->__neg_mask_;
  if (v42 || this->__neg_chars_.__begin_ != this->__neg_chars_.__end_)
  {
    v43 = (((uint64_t (*)(const std::ctype<wchar_t> *, _QWORD, uint64_t))this->__traits_.__ct_->do_is)(this->__traits_.__ct_, this->__neg_mask_, v37) & 1) != 0|| ((_DWORD)v37 == 95) & (v42 >> 7);
    v44 = this->__neg_chars_.__end_;
    v45 = wmemchr(this->__neg_chars_.__begin_, __c[0], v44 - this->__neg_chars_.__begin_);
    v46 = v45 ? v45 : v44;
    if (!v43 && v46 == this->__neg_chars_.__end_)
    {
LABEL_159:
      negate = 1;
      goto LABEL_206;
    }
  }
  v47 = this->__ranges_.__begin_;
  v48 = this->__ranges_.__end_;
  if (v47 != v48)
  {
    if (this->__collate_)
    {
      std::regex_traits<wchar_t>::transform<wchar_t *>((uint64_t)&this->__traits_, __c, &__c[1]);
      v47 = this->__ranges_.__begin_;
      v48 = this->__ranges_.__end_;
    }
    else
    {
      v108 = 1;
      __p = (void *)__c[0];
    }
    if (v48 != v47)
    {
      v49 = 0;
      v50 = 0;
      do
      {
        v51 = &v47[v49];
        v52 = SHIBYTE(v51->first.__r_.__value_.__r.__words[2]);
        if (v52 >= 0)
          v53 = HIBYTE(v51->first.__r_.__value_.__r.__words[2]);
        else
          v53 = v51->first.__r_.__value_.__l.__size_;
        if (v108 >= 0)
          v54 = v108;
        else
          v54 = v107;
        if (v53 >= v54)
          v55 = v54;
        else
          v55 = v53;
        if (v55
          && (v108 >= 0 ? (v56 = (const __int32 *)&__p) : (v56 = (const __int32 *)__p),
              v52 >= 0 ? (v57 = (const __int32 *)v51) : (v57 = (const __int32 *)v51->first.__r_.__value_.__r.__words[0]),
              (v58 = wmemcmp(v56, v57, v55)) != 0))
        {
          if (v58 < 0)
            goto LABEL_126;
        }
        else if (v54 < v53)
        {
          goto LABEL_126;
        }
        v59 = &this->__ranges_.__begin_[v49];
        if (v108 >= 0)
          v60 = v108;
        else
          v60 = v107;
        v61 = SHIBYTE(v59->second.__r_.__value_.__r.__words[2]);
        if (v61 >= 0)
          v62 = HIBYTE(v59->second.__r_.__value_.__r.__words[2]);
        else
          v62 = v59->second.__r_.__value_.__l.__size_;
        if (v60 >= v62)
          v63 = v62;
        else
          v63 = v60;
        if (v63
          && ((v66 = v59->second.__r_.__value_.__l.__data_, v64 = &v59->second, v65 = v66, v61 >= 0)
            ? (v67 = (const __int32 *)v64)
            : (v67 = v65),
              v108 >= 0 ? (v68 = (const __int32 *)&__p) : (v68 = (const __int32 *)__p),
              (v69 = wmemcmp(v67, v68, v63)) != 0))
        {
          if ((v69 & 0x80000000) == 0)
            goto LABEL_128;
        }
        else if (v62 >= v60)
        {
LABEL_128:
          v70 = 1;
          negate = 1;
          goto LABEL_129;
        }
LABEL_126:
        ++v50;
        v47 = this->__ranges_.__begin_;
        ++v49;
      }
      while (v50 < 0xAAAAAAAAAAAAAAABLL * (((char *)this->__ranges_.__end_ - (char *)v47) >> 4));
    }
    v70 = 0;
LABEL_129:
    if (v108 < 0)
      operator delete(__p);
    if ((v70 & 1) != 0)
      goto LABEL_206;
  }
  if (this->__equivalences_.__begin_ == this->__equivalences_.__end_)
    goto LABEL_156;
  std::regex_traits<wchar_t>::__transform_primary<wchar_t *>((uint64_t)&this->__traits_, __c, &__c[1], (uint64_t)&__p);
  v72 = this->__equivalences_.__begin_;
  v71 = this->__equivalences_.__end_;
  if (v71 == v72)
  {
LABEL_151:
    v81 = 0;
    goto LABEL_153;
  }
  v73 = 0;
  v74 = 0;
  while (1)
  {
    v75 = &v72[v73];
    if (v108 >= 0)
      v76 = v108;
    else
      v76 = v107;
    v77 = HIBYTE(v75->__r_.__value_.__r.__words[2]);
    v78 = (char)v77;
    if ((v77 & 0x80u) != 0)
      v77 = v75->__r_.__value_.__l.__size_;
    if (v76 != v77)
      goto LABEL_150;
    if (!v76)
      break;
    v79 = v78 >= 0 ? (const __int32 *)&v72[v73] : (const __int32 *)v75->__r_.__value_.__r.__words[0];
    v80 = v108 >= 0 ? (const __int32 *)&__p : (const __int32 *)__p;
    if (!wmemcmp(v80, v79, v76))
      break;
    v72 = this->__equivalences_.__begin_;
    v71 = this->__equivalences_.__end_;
LABEL_150:
    ++v74;
    ++v73;
    if (v74 >= 0xAAAAAAAAAAAAAAABLL * (((char *)v71 - (char *)v72) >> 3))
      goto LABEL_151;
  }
  v81 = 1;
  negate = 1;
LABEL_153:
  if (v108 < 0)
    operator delete(__p);
  if ((v81 & 1) == 0)
  {
LABEL_156:
    v82 = __c[0];
    v83 = this->__mask_;
    if ((((uint64_t (*)(const std::ctype<wchar_t> *, _QWORD, _QWORD))this->__traits_.__ct_->do_is)(this->__traits_.__ct_, v83, __c[0]) & 1) != 0|| v82 == 95 && (v83 & 0x80) != 0)
    {
      goto LABEL_159;
    }
  }
LABEL_206:
  if (negate == this->__negate_)
  {
    first = 0;
    v105 = -993;
  }
  else
  {
    a2->__current_ += v35;
    first = this->__first_;
    v105 = -995;
  }
  a2->__do_ = v105;
  a2->__node_ = first;
}

void std::regex_traits<wchar_t>::transform<wchar_t *>(uint64_t a1, int *a2, int *a3)
{
  unint64_t v4;
  void **v5;
  void *__p[2];
  unsigned __int8 v7;

  std::basic_string<char32_t>::__init_with_size[abi:ne180100]<char32_t const*,char32_t const*>(__p, a2, a3, a3 - a2);
  v4 = v7;
  if ((v7 & 0x80u) == 0)
    v5 = __p;
  else
    v5 = (void **)__p[0];
  if ((v7 & 0x80u) != 0)
    v4 = (unint64_t)__p[1];
  (*(void (**)(_QWORD, void **, unint64_t))(**(_QWORD **)(a1 + 16) + 32))(*(_QWORD *)(a1 + 16), v5, (unint64_t)v5 + 4 * v4);
  if ((char)v7 < 0)
    operator delete(__p[0]);
}

void sub_1AD8B1CF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::regex_traits<wchar_t>::__lookup_collatename<wchar_t *>(uint64_t a1@<X0>, int *a2@<X1>, int *a3@<X2>, uint64_t a4@<X8>)
{
  std::wstring *p_p;
  std::string::size_type size;
  std::wstring::size_type v8;
  char v9;
  std::wstring::size_type v10;
  std::wstring::size_type v11;
  uint64_t v12;
  std::string *v13;
  std::string::size_type v14;
  std::string *v15;
  std::wstring::size_type v16;
  std::wstring *v17;
  int v18;
  std::string v19;
  std::string v20;
  std::wstring __p;

  p_p = &__p;
  std::basic_string<char32_t>::__init_with_size[abi:ne180100]<char32_t const*,char32_t const*>(&__p, a2, a3, a3 - a2);
  memset(&v20, 0, sizeof(v20));
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    size = __p.__r_.__value_.__l.__size_;
  std::string::reserve(&v20, size);
  v8 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  v9 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  v10 = __p.__r_.__value_.__l.__size_;
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
  {
    v11 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else
  {
    v11 = __p.__r_.__value_.__l.__size_;
    p_p = (std::wstring *)__p.__r_.__value_.__r.__words[0];
  }
  if (!v11)
  {
LABEL_12:
    *(_QWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_QWORD *)(a4 + 16) = 0;
    if (v9 < 0)
      v8 = v10;
    if (!v8)
      goto LABEL_27;
    if ((v20.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v13 = &v20;
    else
      v13 = (std::string *)v20.__r_.__value_.__r.__words[0];
    std::__get_collation_name(&v19, (const char *)v13);
    if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v20.__r_.__value_.__l.__data_);
    v20 = v19;
    if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0)
    {
      v14 = v20.__r_.__value_.__l.__size_;
      if (v20.__r_.__value_.__l.__size_)
      {
        v15 = (std::string *)v20.__r_.__value_.__r.__words[0];
        goto LABEL_26;
      }
    }
    else
    {
      v14 = HIBYTE(v19.__r_.__value_.__r.__words[2]);
      if (*((_BYTE *)&v19.__r_.__value_.__s + 23))
      {
        v15 = &v20;
LABEL_26:
        std::wstring::__assign_trivial[abi:ne180100]<std::__wrap_iter<char *>,std::__wrap_iter<char *>>((std::wstring *)a4, (char *)v15, (char *)v15 + v14, v14);
        goto LABEL_27;
      }
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
      v16 = __p.__r_.__value_.__l.__size_;
      if (__p.__r_.__value_.__l.__size_ >= 3)
        goto LABEL_27;
      v17 = (std::wstring *)__p.__r_.__value_.__r.__words[0];
    }
    else
    {
      v16 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      if (HIBYTE(__p.__r_.__value_.__r.__words[2]) >= 3u)
        goto LABEL_27;
      v17 = &__p;
    }
    (*(void (**)(std::string *__return_ptr, _QWORD, std::wstring *, std::wstring::size_type))(**(_QWORD **)(a1 + 16) + 32))(&v19, *(_QWORD *)(a1 + 16), v17, (std::wstring::size_type)v17 + 4 * v16);
    if (*(char *)(a4 + 23) < 0)
      operator delete(*(void **)a4);
    *(std::string *)a4 = v19;
    v18 = *(char *)(a4 + 23);
    if (v18 < 0)
    {
      if ((*(_QWORD *)(a4 + 8) & 0xFFFFFFFFFFFFFFFDLL) != 1)
      {
        **(_DWORD **)a4 = 0;
        *(_QWORD *)(a4 + 8) = 0;
        goto LABEL_27;
      }
    }
    else if ((v18 & 0xFD) != 1)
    {
      *(_DWORD *)a4 = 0;
      *(_BYTE *)(a4 + 23) = 0;
      goto LABEL_27;
    }
    std::wstring::operator=((std::wstring *)a4, &__p);
    goto LABEL_27;
  }
  v12 = 4 * v11;
  while (p_p->__r_.__value_.__s.__data_[0] < 0x7Fu)
  {
    std::string::push_back(&v20, p_p->__r_.__value_.__s.__data_[0]);
    p_p = (std::wstring *)((char *)p_p + 4);
    v12 -= 4;
    if (!v12)
    {
      v8 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      v10 = __p.__r_.__value_.__l.__size_;
      v9 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      goto LABEL_12;
    }
  }
  *(_QWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_QWORD *)(a4 + 16) = 0;
LABEL_27:
  if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v20.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_1AD8B1F34(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  uint64_t v24;

  if (*(char *)(v24 + 23) < 0)
    operator delete(*(void **)v24);
  if (a18 < 0)
    operator delete(__p);
  if (a24 < 0)
    operator delete(a19);
  _Unwind_Resume(exception_object);
}

void std::wstring::__assign_trivial[abi:ne180100]<std::__wrap_iter<char *>,std::__wrap_iter<char *>>(std::wstring *this, char *a2, char *a3, std::wstring::size_type a4)
{
  std::wstring *v8;
  std::wstring::size_type size;
  std::wstring::size_type v10;
  unint64_t v11;
  unint64_t v12;
  std::wstring::value_type v13;

  if ((SHIBYTE(this->__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    v8 = this;
    if (a4 <= 4)
      goto LABEL_11;
    size = HIBYTE(this->__r_.__value_.__r.__words[2]);
    v10 = 4;
    goto LABEL_6;
  }
  v11 = this->__r_.__value_.__r.__words[2];
  v10 = (v11 & 0x7FFFFFFFFFFFFFFFLL) - 1;
  if (v10 < a4)
  {
    size = this->__r_.__value_.__l.__size_;
LABEL_6:
    std::wstring::__grow_by(this, v10, a4 - v10, size, 0, size, 0);
    this->__r_.__value_.__l.__size_ = 0;
    LOBYTE(v12) = *((_BYTE *)&this->__r_.__value_.__s + 23);
    goto LABEL_8;
  }
  v12 = HIBYTE(v11);
LABEL_8:
  v8 = this;
  if ((v12 & 0x80) != 0)
    v8 = (std::wstring *)this->__r_.__value_.__r.__words[0];
LABEL_11:
  while (a2 != a3)
  {
    v13 = *a2++;
    v8->__r_.__value_.__s.__data_[0] = v13;
    v8 = (std::wstring *)((char *)v8 + 4);
  }
  v8->__r_.__value_.__s.__data_[0] = 0;
  if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
    this->__r_.__value_.__l.__size_ = a4;
  else
    *((_BYTE *)&this->__r_.__value_.__s + 23) = a4 & 0x7F;
}

void std::regex_traits<wchar_t>::__transform_primary<wchar_t *>(uint64_t a1@<X0>, int *a2@<X1>, int *a3@<X2>, uint64_t a4@<X8>)
{
  unint64_t v6;
  void **v7;
  uint64_t v8;
  int v9;
  _DWORD *v10;
  void *__p[2];
  unsigned __int8 v12;

  std::basic_string<char32_t>::__init_with_size[abi:ne180100]<char32_t const*,char32_t const*>(__p, a2, a3, a3 - a2);
  v6 = v12;
  if ((v12 & 0x80u) == 0)
    v7 = __p;
  else
    v7 = (void **)__p[0];
  if ((v12 & 0x80u) != 0)
    v6 = (unint64_t)__p[1];
  (*(void (**)(_QWORD, void **, unint64_t))(**(_QWORD **)(a1 + 16) + 32))(*(_QWORD *)(a1 + 16), v7, (unint64_t)v7 + 4 * v6);
  v8 = *(unsigned __int8 *)(a4 + 23);
  v9 = (char)v8;
  if ((v8 & 0x80u) != 0)
    v8 = *(_QWORD *)(a4 + 8);
  if (v8 != 1)
  {
    if (v8 == 3)
    {
      if (v9 >= 0)
        v10 = (_DWORD *)a4;
      else
        v10 = *(_DWORD **)a4;
      v10[2] = *v10;
    }
    else if (v9 < 0)
    {
      **(_DWORD **)a4 = 0;
      *(_QWORD *)(a4 + 8) = 0;
    }
    else
    {
      *(_DWORD *)a4 = 0;
      *(_BYTE *)(a4 + 23) = 0;
    }
  }
  if ((char)v12 < 0)
    operator delete(__p[0]);
}

void sub_1AD8B212C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

std::wstring::value_type *std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__parse_expression_term<wchar_t const*>(uint64_t a1, int *a2, int *a3, uint64_t *a4)
{
  std::wstring::value_type *v4;
  std::wstring::value_type v5;
  uint64_t v6;
  int v9;
  uint64_t v10;
  int v11;
  std::wstring::value_type v12;
  std::wstring::value_type *v13;
  int *v14;
  std::wstring::value_type *v15;
  std::wstring *v16;
  uint64_t v17;
  std::wstring::size_type size;
  char v19;
  uint64_t v21;
  std::wstring::value_type v22;
  std::wstring __p;
  std::wstring v24;
  std::wstring v25;
  std::wstring v26;

  v4 = a2;
  if (a2 == a3)
    return v4;
  v5 = *a2;
  if (*a2 == 93)
    return v4;
  v6 = (uint64_t)a4;
  memset(&v26, 0, sizeof(v26));
  if (a2 + 1 == a3 || v5 != 91)
  {
LABEL_9:
    v11 = *(_DWORD *)(a1 + 24) & 0x1F0;
    goto LABEL_10;
  }
  v9 = a2[1];
  if (v9 != 46)
  {
    if (v9 == 58)
    {
      v10 = std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__parse_character_class<wchar_t const*>(a1, a2 + 2, a3, (uint64_t)a4);
      goto LABEL_34;
    }
    if (v9 == 61)
    {
      v10 = std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__parse_equivalence_class<wchar_t const*>(a1, a2 + 2, a3, a4);
LABEL_34:
      v6 = v10;
      v19 = 0;
      goto LABEL_38;
    }
    goto LABEL_9;
  }
  v17 = std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__parse_collating_symbol<wchar_t const*>(a1, a2 + 2, a3, (uint64_t)&v26);
  v4 = (std::wstring::value_type *)v17;
  v11 = *(_DWORD *)(a1 + 24) & 0x1F0;
  size = HIBYTE(v26.__r_.__value_.__r.__words[2]);
  if ((v26.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = v26.__r_.__value_.__l.__size_;
  v14 = (int *)v17;
  if (!size)
  {
LABEL_10:
    if ((v11 | 0x40) == 0x40)
    {
      v12 = *v4;
      if (*v4 == 92)
      {
        v13 = v4 + 1;
        if (v11)
        {
          v14 = std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__parse_awk_escape<wchar_t const*>((std::basic_regex<wchar_t> *)a1, v13, a3, &v26);
        }
        else
        {
          v14 = (int *)std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__parse_class_escape<wchar_t const*>((std::basic_regex<wchar_t> *)a1, v13, a3, &v26, v6);
          v11 = 0;
        }
        goto LABEL_16;
      }
    }
    else
    {
      v12 = *v4;
    }
    std::wstring::operator=(&v26, v12);
    v14 = v4 + 1;
  }
LABEL_16:
  if (v14 == a3 || *v14 == 93 || (v15 = v14 + 1, v14 + 1 == a3) || *v14 != 45 || *v15 == 93)
  {
    if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
    {
      if (v26.__r_.__value_.__l.__size_)
      {
        if (v26.__r_.__value_.__l.__size_ != 1)
        {
          v16 = (std::wstring *)v26.__r_.__value_.__r.__words[0];
LABEL_36:
          std::__bracket_expression<wchar_t,std::regex_traits<wchar_t>>::__add_digraph[abi:ne180100](v6, v16->__r_.__value_.__s.__data_[0], v16->__r_.__value_.__s.__data_[1]);
          goto LABEL_37;
        }
        v16 = (std::wstring *)v26.__r_.__value_.__r.__words[0];
        goto LABEL_28;
      }
    }
    else if (*((_BYTE *)&v26.__r_.__value_.__s + 23))
    {
      v16 = &v26;
      if (HIBYTE(v26.__r_.__value_.__r.__words[2]) != 1)
        goto LABEL_36;
LABEL_28:
      std::__bracket_expression<wchar_t,std::regex_traits<wchar_t>>::__add_char[abi:ne180100](v6, v16->__r_.__value_.__s.__data_[0]);
    }
LABEL_37:
    v19 = 1;
    v4 = v14;
    goto LABEL_38;
  }
  memset(&v25, 0, sizeof(v25));
  v4 = v14 + 2;
  if (v14 + 2 != a3 && *v15 == 91 && *v4 == 46)
  {
    v21 = std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__parse_collating_symbol<wchar_t const*>(a1, v14 + 3, a3, (uint64_t)&v25);
LABEL_55:
    v4 = (std::wstring::value_type *)v21;
    goto LABEL_56;
  }
  if ((v11 | 0x40) == 0x40)
  {
    v22 = *v15;
    if (*v15 == 92)
    {
      if (v11)
        v21 = (uint64_t)std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__parse_awk_escape<wchar_t const*>((std::basic_regex<wchar_t> *)a1, v14 + 2, a3, &v25);
      else
        v21 = (uint64_t)std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__parse_class_escape<wchar_t const*>((std::basic_regex<wchar_t> *)a1, v14 + 2, a3, &v25, v6);
      goto LABEL_55;
    }
  }
  else
  {
    v22 = *v15;
  }
  std::wstring::operator=(&v25, v22);
LABEL_56:
  v24 = v26;
  memset(&v26, 0, sizeof(v26));
  __p = v25;
  memset(&v25, 0, sizeof(v25));
  std::__bracket_expression<wchar_t,std::regex_traits<wchar_t>>::__add_range[abi:ne180100](v6, (unsigned int *)&v24, (unsigned int *)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v24.__r_.__value_.__l.__data_);
  if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v25.__r_.__value_.__l.__data_);
  v19 = 1;
LABEL_38:
  if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v26.__r_.__value_.__l.__data_);
  if ((v19 & 1) != 0)
    return v4;
  return (std::wstring::value_type *)v6;
}

void sub_1AD8B2488(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  uint64_t v28;

  if (a14 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (a28 < 0)
    operator delete(a23);
  if (*(char *)(v28 - 49) < 0)
    operator delete(*(void **)(v28 - 72));
  _Unwind_Resume(exception_object);
}

uint64_t std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__parse_equivalence_class<wchar_t const*>(uint64_t a1, int *a2, int *a3, uint64_t *a4)
{
  unint64_t i;
  uint64_t v8;
  int *v9;
  unint64_t v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int *v13;
  void *__p[2];
  unsigned __int8 v16;
  void *v17;
  uint64_t v18;
  unsigned __int8 v19;

  if ((char *)a3 - (char *)a2 < 8 || a3 - 1 == a2)
    goto LABEL_33;
  for (i = 0; a2[i / 4] != 61 || a2[i / 4 + 1] != 93; i += 4)
  {
    if (4 * ((unint64_t)((char *)a3 - (char *)a2) >> 2) - 8 == i)
      goto LABEL_33;
  }
  if (&a2[i / 4] == a3)
LABEL_33:
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)5>();
  std::regex_traits<wchar_t>::__lookup_collatename<wchar_t *>(a1, a2, &a2[i / 4], (uint64_t)&v17);
  if (((char)v19 & 0x80000000) == 0)
  {
    v8 = v19;
    if (v19)
    {
      v9 = (int *)&v17;
      goto LABEL_14;
    }
LABEL_34:
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)1>();
  }
  v8 = v18;
  if (!v18)
    goto LABEL_34;
  v9 = (int *)v17;
LABEL_14:
  std::regex_traits<wchar_t>::__transform_primary<wchar_t *>(a1, v9, &v9[v8], (uint64_t)__p);
  v10 = v16;
  if ((v16 & 0x80u) != 0)
    v10 = (unint64_t)__p[1];
  if (v10)
  {
    std::__bracket_expression<wchar_t,std::regex_traits<wchar_t>>::__add_equivalence[abi:ne180100](a4, (__int128 *)__p);
  }
  else
  {
    v11 = v19;
    if ((v19 & 0x80u) != 0)
      v11 = v18;
    if (v11 == 2)
    {
      v13 = (unsigned int *)&v17;
      if ((v19 & 0x80u) != 0)
        v13 = (unsigned int *)v17;
      std::__bracket_expression<wchar_t,std::regex_traits<wchar_t>>::__add_digraph[abi:ne180100]((uint64_t)a4, *v13, v13[1]);
    }
    else
    {
      if (v11 != 1)
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)1>();
      v12 = (unsigned int *)&v17;
      if ((v19 & 0x80u) != 0)
        v12 = (unsigned int *)v17;
      std::__bracket_expression<wchar_t,std::regex_traits<wchar_t>>::__add_char[abi:ne180100]((uint64_t)a4, *v12);
    }
  }
  if ((char)v16 < 0)
    operator delete(__p[0]);
  if ((char)v19 < 0)
    operator delete(v17);
  return (uint64_t)&a2[i / 4 + 2];
}

void sub_1AD8B2694(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__parse_character_class<wchar_t const*>(uint64_t a1, int *a2, int *a3, uint64_t a4)
{
  unint64_t i;
  int v7;

  if ((char *)a3 - (char *)a2 < 8 || a3 - 1 == a2)
    goto LABEL_11;
  for (i = 0; a2[i / 4] != 58 || a2[i / 4 + 1] != 93; i += 4)
  {
    if (4 * ((unint64_t)((char *)a3 - (char *)a2) >> 2) - 8 == i)
      goto LABEL_11;
  }
  if (&a2[i / 4] == a3)
LABEL_11:
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)5>();
  v7 = std::regex_traits<wchar_t>::__lookup_classname<wchar_t const*>(a1, a2, &a2[i / 4], *(_BYTE *)(a1 + 24) & 1);
  if (!v7)
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)2>();
  *(_DWORD *)(a4 + 160) |= v7;
  return (uint64_t)&a2[i / 4 + 2];
}

uint64_t std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__parse_collating_symbol<wchar_t const*>(uint64_t a1, int *a2, int *a3, uint64_t a4)
{
  unint64_t i;
  unint64_t v7;
  unint64_t v8;
  __int128 v10;
  unint64_t v11;

  if ((char *)a3 - (char *)a2 < 8 || a3 - 1 == a2)
    goto LABEL_15;
  for (i = 0; a2[i / 4] != 46 || a2[i / 4 + 1] != 93; i += 4)
  {
    if (4 * ((unint64_t)((char *)a3 - (char *)a2) >> 2) - 8 == i)
      goto LABEL_15;
  }
  if (&a2[i / 4] == a3)
LABEL_15:
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)5>();
  std::regex_traits<wchar_t>::__lookup_collatename<wchar_t *>(a1, a2, &a2[i / 4], (uint64_t)&v10);
  if (*(char *)(a4 + 23) < 0)
    operator delete(*(void **)a4);
  *(_OWORD *)a4 = v10;
  v7 = v11;
  *(_QWORD *)(a4 + 16) = v11;
  v8 = HIBYTE(v7);
  if ((v8 & 0x80u) != 0)
    v8 = *(_QWORD *)(a4 + 8);
  if (v8 - 1 >= 2)
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)1>();
  return (uint64_t)&a2[i / 4 + 2];
}

unsigned int *std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__parse_class_escape<wchar_t const*>(std::basic_regex<wchar_t> *a1, int *a2, int *a3, std::wstring *this, uint64_t a5)
{
  int v6;
  int v7;
  int v8;
  std::wstring *v9;
  std::wstring::value_type v10;

  if (a2 == a3)
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)3>();
  v6 = *a2;
  if (*a2 > 97)
  {
    if (v6 > 114)
    {
      if (v6 != 115)
      {
        if (v6 != 119)
          return std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__parse_character_escape<wchar_t const*>(a1, a2, a3, this);
        *(_DWORD *)(a5 + 160) |= 0x500u;
        std::__bracket_expression<wchar_t,std::regex_traits<wchar_t>>::__add_char[abi:ne180100](a5, 95);
        return (unsigned int *)(a2 + 1);
      }
      v8 = *(_DWORD *)(a5 + 160) | 0x4000;
    }
    else
    {
      if (v6 == 98)
      {
        v9 = this;
        v10 = 8;
LABEL_19:
        std::wstring::operator=(v9, v10);
        return (unsigned int *)(a2 + 1);
      }
      if (v6 != 100)
        return std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__parse_character_escape<wchar_t const*>(a1, a2, a3, this);
      v8 = *(_DWORD *)(a5 + 160) | 0x400;
    }
    *(_DWORD *)(a5 + 160) = v8;
    return (unsigned int *)(a2 + 1);
  }
  if (v6 <= 82)
  {
    if (v6)
    {
      if (v6 == 68)
      {
        v7 = *(_DWORD *)(a5 + 164) | 0x400;
LABEL_21:
        *(_DWORD *)(a5 + 164) = v7;
        return (unsigned int *)(a2 + 1);
      }
      return std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__parse_character_escape<wchar_t const*>(a1, a2, a3, this);
    }
    v9 = this;
    v10 = 0;
    goto LABEL_19;
  }
  if (v6 == 83)
  {
    v7 = *(_DWORD *)(a5 + 164) | 0x4000;
    goto LABEL_21;
  }
  if (v6 == 87)
  {
    *(_DWORD *)(a5 + 164) |= 0x500u;
    std::__bracket_expression<wchar_t,std::regex_traits<wchar_t>>::__add_neg_char[abi:ne180100](a5, 95);
    return (unsigned int *)(a2 + 1);
  }
  return std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__parse_character_escape<wchar_t const*>(a1, a2, a3, this);
}

std::wstring::value_type *std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__parse_awk_escape<wchar_t const*>(std::basic_regex<wchar_t> *a1, std::wstring::value_type *a2, std::wstring::value_type *a3, std::wstring *this)
{
  std::wstring::value_type v5;
  std::wstring *v6;
  std::wstring::value_type v7;
  std::wstring::value_type *v8;
  _DWORD *v9;
  unsigned int v10;

  if (a2 == a3)
LABEL_52:
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)3>();
  v5 = *a2;
  if (v5 > 97)
  {
    switch(v5)
    {
      case 'n':
        if (this)
        {
          v6 = this;
          v5 = 10;
          goto LABEL_16;
        }
        v5 = 10;
        goto LABEL_49;
      case 'o':
      case 'p':
      case 'q':
      case 's':
      case 'u':
        goto LABEL_21;
      case 'r':
        if (this)
        {
          v6 = this;
          v5 = 13;
          goto LABEL_16;
        }
        v5 = 13;
        goto LABEL_49;
      case 't':
        if (this)
        {
          v6 = this;
          v5 = 9;
          goto LABEL_16;
        }
        v5 = 9;
        goto LABEL_49;
      case 'v':
        if (this)
        {
          v6 = this;
          v5 = 11;
          goto LABEL_16;
        }
        v5 = 11;
        goto LABEL_49;
      default:
        if (v5 == 98)
        {
          if (this)
          {
            v6 = this;
            v5 = 8;
            goto LABEL_16;
          }
          v5 = 8;
        }
        else
        {
          if (v5 != 102)
            goto LABEL_21;
          if (this)
          {
            v6 = this;
            v5 = 12;
            goto LABEL_16;
          }
          v5 = 12;
        }
        break;
    }
    goto LABEL_49;
  }
  if (v5 > 91)
  {
    if (v5 != 92)
    {
      if (v5 != 97)
        goto LABEL_21;
      if (this)
      {
        v6 = this;
        v5 = 7;
LABEL_16:
        std::wstring::operator=(v6, v5);
        return a2 + 1;
      }
      v5 = 7;
LABEL_49:
      std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__push_char(a1, v5);
      return a2 + 1;
    }
LABEL_14:
    if (this)
    {
      v6 = this;
      goto LABEL_16;
    }
    goto LABEL_49;
  }
  if (v5 == 34 || v5 == 47)
    goto LABEL_14;
LABEL_21:
  if ((v5 & 0xFFFFFFF8) != 0x30)
    goto LABEL_52;
  v7 = v5 - 48;
  v8 = a2 + 1;
  if (a2 + 1 != a3)
  {
    if ((*v8 & 0xFFFFFFF8) != 0x30)
      goto LABEL_39;
    v7 = *v8 + 8 * v7 - 48;
    v9 = a2 + 2;
    if (a2 + 2 != a3)
    {
      v10 = *v9 & 0xFFFFFFF8;
      if (v10 == 48)
        v8 = a2 + 3;
      else
        v8 = a2 + 2;
      if (v10 == 48)
        v7 = *v9 + 8 * v7 - 48;
      goto LABEL_39;
    }
  }
  v8 = a3;
LABEL_39:
  if (this)
    std::wstring::operator=(this, v7);
  else
    std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__push_char(a1, v7);
  return v8;
}

void std::__bracket_expression<wchar_t,std::regex_traits<wchar_t>>::__add_range[abi:ne180100](uint64_t a1, unsigned int *a2, unsigned int *a3)
{
  unsigned int *v3;
  unsigned int *v4;
  unint64_t i;
  unint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int *v10;
  unint64_t j;
  unint64_t v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int *v15;
  uint64_t v16;
  unint64_t k;
  unint64_t v18;
  unsigned int *v19;
  unsigned int *v20;
  unint64_t m;
  unint64_t v22;
  unsigned int *v23;
  unsigned int *v24;
  uint64_t v25;
  unsigned int *v26;
  uint64_t v27;
  unsigned int *v28;
  uint64_t v29;
  unsigned int *v30;
  int v31;
  _DWORD *v32;
  unsigned int *v33;
  int v34;
  _DWORD *v35;
  void *v36[2];
  uint64_t v37;
  __int128 v38;
  uint64_t v39;
  void *v40[2];
  uint64_t v41;
  void *__p[2];
  uint64_t v43;

  v3 = a3;
  v4 = a2;
  if (*(_BYTE *)(a1 + 170))
  {
    if (*(_BYTE *)(a1 + 169))
    {
      for (i = 0; ; ++i)
      {
        v7 = *((char *)v4 + 23) < 0 ? *((_QWORD *)v4 + 1) : *((unsigned __int8 *)v4 + 23);
        if (i >= v7)
          break;
        v8 = v4;
        if ((*((_BYTE *)v4 + 23) & 0x80) != 0)
          v8 = *(unsigned int **)v4;
        v9 = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 24) + 72))(*(_QWORD *)(a1 + 24), v8[i]);
        v10 = v4;
        if (*((char *)v4 + 23) < 0)
          v10 = *(unsigned int **)v4;
        v10[i] = v9;
      }
      for (j = 0; ; ++j)
      {
        v12 = *((char *)v3 + 23) < 0 ? *((_QWORD *)v3 + 1) : *((unsigned __int8 *)v3 + 23);
        if (j >= v12)
          break;
        v13 = v3;
        if ((*((_BYTE *)v3 + 23) & 0x80) != 0)
          v13 = *(unsigned int **)v3;
        v14 = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 24) + 72))(*(_QWORD *)(a1 + 24), v13[j]);
        v15 = v3;
        if (*((char *)v3 + 23) < 0)
          v15 = *(unsigned int **)v3;
        v15[j] = v14;
      }
    }
    else
    {
      for (k = 0; ; ++k)
      {
        v18 = *((char *)a2 + 23) < 0 ? *((_QWORD *)a2 + 1) : *((unsigned __int8 *)a2 + 23);
        if (k >= v18)
          break;
        v19 = a2;
        if ((*((_BYTE *)a2 + 23) & 0x80) != 0)
          v19 = *(unsigned int **)a2;
        v20 = a2;
        if ((*((_BYTE *)a2 + 23) & 0x80) != 0)
          v20 = *(unsigned int **)a2;
        v20[k] = v19[k];
      }
      for (m = 0; ; ++m)
      {
        v22 = *((char *)a3 + 23) < 0 ? *((_QWORD *)a3 + 1) : *((unsigned __int8 *)a3 + 23);
        if (m >= v22)
          break;
        v23 = a3;
        if ((*((_BYTE *)a3 + 23) & 0x80) != 0)
          v23 = *(unsigned int **)a3;
        v24 = a3;
        if ((*((_BYTE *)a3 + 23) & 0x80) != 0)
          v24 = *(unsigned int **)a3;
        v24[m] = v23[m];
      }
    }
    if (*((char *)v4 + 23) < 0)
    {
      v26 = v4;
      v4 = *(unsigned int **)v4;
      v25 = *((_QWORD *)v26 + 1);
    }
    else
    {
      v25 = *((unsigned __int8 *)v4 + 23);
    }
    std::regex_traits<wchar_t>::transform<wchar_t *>(a1 + 16, (int *)v4, (int *)&v4[v25]);
    if (*((char *)v3 + 23) < 0)
    {
      v28 = v3;
      v3 = *(unsigned int **)v3;
      v27 = *((_QWORD *)v28 + 1);
    }
    else
    {
      v27 = *((unsigned __int8 *)v3 + 23);
    }
    std::regex_traits<wchar_t>::transform<wchar_t *>(a1 + 16, (int *)v3, (int *)&v3[v27]);
    *(_OWORD *)v40 = v38;
    v41 = v39;
    *(_OWORD *)__p = *(_OWORD *)v36;
    v43 = v37;
    std::vector<std::pair<std::wstring,std::wstring>>::push_back[abi:ne180100]((std::vector<std::pair<std::wstring, std::wstring>> *)(a1 + 88), (__int128 *)v40);
    if (SHIBYTE(v43) < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v41) < 0)
      operator delete(v40[0]);
  }
  else
  {
    if (*((char *)a2 + 23) < 0)
      v16 = *((_QWORD *)a2 + 1);
    else
      v16 = *((unsigned __int8 *)a2 + 23);
    if (v16 != 1
      || (*((char *)a3 + 23) < 0 ? (v29 = *((_QWORD *)a3 + 1)) : (v29 = *((unsigned __int8 *)a3 + 23)), v29 != 1))
    {
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)9>();
    }
    if (*(_BYTE *)(a1 + 169))
    {
      v30 = a2;
      if ((*((_BYTE *)a2 + 23) & 0x80) != 0)
        v30 = *(unsigned int **)a2;
      v31 = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 24) + 72))(*(_QWORD *)(a1 + 24), *v30);
      v32 = v4;
      if (*((char *)v4 + 23) < 0)
        v32 = *(_DWORD **)v4;
      *v32 = v31;
      v33 = v3;
      if (*((char *)v3 + 23) < 0)
        v33 = *(unsigned int **)v3;
      v34 = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 24) + 72))(*(_QWORD *)(a1 + 24), *v33);
      v35 = v3;
      if (*((char *)v3 + 23) < 0)
        v35 = *(_DWORD **)v3;
      *v35 = v34;
    }
    *(_OWORD *)v40 = *(_OWORD *)v4;
    v41 = *((_QWORD *)v4 + 2);
    *((_QWORD *)v4 + 1) = 0;
    *((_QWORD *)v4 + 2) = 0;
    *(_QWORD *)v4 = 0;
    *(_OWORD *)__p = *(_OWORD *)v3;
    v43 = *((_QWORD *)v3 + 2);
    *(_QWORD *)v3 = 0;
    *((_QWORD *)v3 + 1) = 0;
    *((_QWORD *)v3 + 2) = 0;
    std::vector<std::pair<std::wstring,std::wstring>>::push_back[abi:ne180100]((std::vector<std::pair<std::wstring, std::wstring>> *)(a1 + 88), (__int128 *)v40);
    if (SHIBYTE(v43) < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v41) < 0)
      operator delete(v40[0]);
  }
}

void sub_1AD8B2EF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21)
{
  std::pair<std::string,std::string>::~pair((uint64_t)&a21);
  _Unwind_Resume(a1);
}

void std::__bracket_expression<wchar_t,std::regex_traits<wchar_t>>::__add_digraph[abi:ne180100](uint64_t a1, unsigned int a2, uint64_t a3)
{
  unsigned int v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t *v9;
  char **v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char *v23;
  _QWORD *v24;
  char *v25;
  char *v26;
  char *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;

  if (!*(_BYTE *)(a1 + 169))
  {
    v17 = a1 + 128;
    v18 = *(_QWORD *)(a1 + 128);
    v10 = (char **)(a1 + 112);
    v8 = a2 | (unint64_t)(a3 << 32);
    v9 = *(unint64_t **)(a1 + 120);
    if (*(_BYTE *)(a1 + 170))
    {
      if ((unint64_t)v9 < v18)
        goto LABEL_22;
      v19 = ((char *)v9 - *v10) >> 3;
      if (!((unint64_t)(v19 + 1) >> 61))
      {
        v20 = v18 - (_QWORD)*v10;
        v21 = v20 >> 2;
        if (v20 >> 2 <= (unint64_t)(v19 + 1))
          v21 = v19 + 1;
        if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFF8)
          v22 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v22 = v21;
        if (v22)
          v23 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>(v17, v22);
        else
          v23 = 0;
        v25 = &v23[8 * v19];
        v26 = &v23[8 * v22];
        *(_QWORD *)v25 = v8;
        v24 = v25 + 8;
        v35 = *(char **)(a1 + 112);
        v27 = *(char **)(a1 + 120);
        if (v27 == v35)
          goto LABEL_43;
        do
        {
          v36 = *((_QWORD *)v27 - 1);
          v27 -= 8;
          *((_QWORD *)v25 - 1) = v36;
          v25 -= 8;
        }
        while (v27 != v35);
        goto LABEL_42;
      }
    }
    else
    {
      if ((unint64_t)v9 < v18)
        goto LABEL_22;
      v30 = ((char *)v9 - *v10) >> 3;
      if (!((unint64_t)(v30 + 1) >> 61))
      {
        v31 = v18 - (_QWORD)*v10;
        v32 = v31 >> 2;
        if (v31 >> 2 <= (unint64_t)(v30 + 1))
          v32 = v30 + 1;
        if ((unint64_t)v31 >= 0x7FFFFFFFFFFFFFF8)
          v33 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v33 = v32;
        if (v33)
          v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>(v17, v33);
        else
          v34 = 0;
        v25 = &v34[8 * v30];
        v26 = &v34[8 * v33];
        *(_QWORD *)v25 = v8;
        v24 = v25 + 8;
        v37 = *(char **)(a1 + 112);
        v27 = *(char **)(a1 + 120);
        if (v27 == v37)
          goto LABEL_43;
        do
        {
          v38 = *((_QWORD *)v27 - 1);
          v27 -= 8;
          *((_QWORD *)v25 - 1) = v38;
          v25 -= 8;
        }
        while (v27 != v37);
        goto LABEL_42;
      }
    }
LABEL_46:
    std::vector<int>::__throw_length_error[abi:ne180100]();
  }
  v5 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 72))(*(_QWORD *)(a1 + 24));
  v6 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 24) + 72))(*(_QWORD *)(a1 + 24), a3);
  v7 = *(_QWORD *)(a1 + 128);
  v8 = v5 | (unint64_t)(v6 << 32);
  v9 = *(unint64_t **)(a1 + 120);
  if ((unint64_t)v9 < v7)
  {
LABEL_22:
    *v9 = v8;
    v24 = v9 + 1;
    goto LABEL_45;
  }
  v10 = (char **)(a1 + 112);
  v11 = *(_QWORD *)(a1 + 112);
  v12 = ((uint64_t)v9 - v11) >> 3;
  if ((unint64_t)(v12 + 1) >> 61)
    goto LABEL_46;
  v13 = v7 - v11;
  v14 = v13 >> 2;
  if (v13 >> 2 <= (unint64_t)(v12 + 1))
    v14 = v12 + 1;
  if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
    v15 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v15 = v14;
  if (v15)
    v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>(a1 + 128, v15);
  else
    v16 = 0;
  v25 = &v16[8 * v12];
  v26 = &v16[8 * v15];
  *(_QWORD *)v25 = v8;
  v24 = v25 + 8;
  v28 = *(char **)(a1 + 112);
  v27 = *(char **)(a1 + 120);
  if (v27 == v28)
    goto LABEL_43;
  do
  {
    v29 = *((_QWORD *)v27 - 1);
    v27 -= 8;
    *((_QWORD *)v25 - 1) = v29;
    v25 -= 8;
  }
  while (v27 != v28);
LABEL_42:
  v27 = *v10;
LABEL_43:
  *(_QWORD *)(a1 + 112) = v25;
  *(_QWORD *)(a1 + 120) = v24;
  *(_QWORD *)(a1 + 128) = v26;
  if (v27)
    operator delete(v27);
LABEL_45:
  *(_QWORD *)(a1 + 120) = v24;
}

uint64_t std::__bracket_expression<wchar_t,std::regex_traits<wchar_t>>::__add_equivalence[abi:ne180100](uint64_t *a1, __int128 *a2)
{
  uint64_t *v3;
  unint64_t v4;
  uint64_t result;

  v3 = a1 + 17;
  v4 = a1[18];
  if (v4 >= a1[19])
  {
    result = std::vector<std::wstring>::__push_back_slow_path<std::wstring const&>(v3, a2);
  }
  else
  {
    std::vector<std::wstring>::__construct_one_at_end[abi:ne180100]<std::wstring const&>((uint64_t)v3, a2);
    result = v4 + 24;
  }
  a1[18] = result;
  return result;
}

void std::vector<std::wstring>::__construct_one_at_end[abi:ne180100]<std::wstring const&>(uint64_t a1, __int128 *a2)
{
  uint64_t v3;
  __int128 v4;

  v3 = *(_QWORD *)(a1 + 8);
  if (*((char *)a2 + 23) < 0)
  {
    std::basic_string<char32_t>::__init_copy_ctor_external(*(std::wstring **)(a1 + 8), *(const std::wstring::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    *(_QWORD *)(v3 + 16) = *((_QWORD *)a2 + 2);
    *(_OWORD *)v3 = v4;
  }
  *(_QWORD *)(a1 + 8) = v3 + 24;
}

void sub_1AD8B320C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::wstring>::__push_back_slow_path<std::wstring const&>(uint64_t *a1, __int128 *a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  std::wstring *v10;
  std::__split_buffer<std::wstring>::pointer end;
  __int128 v12;
  uint64_t v13;
  std::__split_buffer<std::wstring> __v;

  v3 = *a1;
  v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL)
    std::vector<int>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x555555555555555)
    v9 = 0xAAAAAAAAAAAAAAALL;
  else
    v9 = v5;
  __v.__end_cap_.__value_ = (std::allocator<std::wstring> *)(a1 + 2);
  if (v9)
    v10 = (std::wstring *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>(v7, v9);
  else
    v10 = 0;
  end = v10 + v4;
  __v.__first_ = v10;
  __v.__begin_ = end;
  __v.__end_ = end;
  __v.__end_cap_.__value_ = &v10[v9];
  if (*((char *)a2 + 23) < 0)
  {
    std::basic_string<char32_t>::__init_copy_ctor_external(end, *(const std::wstring::value_type **)a2, *((_QWORD *)a2 + 1));
    end = __v.__end_;
  }
  else
  {
    v12 = *a2;
    end->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&end->__r_.__value_.__l.__data_ = v12;
  }
  __v.__end_ = end + 1;
  std::vector<std::wstring>::__swap_out_circular_buffer((std::vector<std::wstring> *)a1, &__v);
  v13 = a1[1];
  std::__split_buffer<std::string>::~__split_buffer(&__v);
  return v13;
}

void sub_1AD8B3320(_Unwind_Exception *a1, std::__split_buffer<std::wstring> *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::wstring> *)&a10);
  _Unwind_Resume(a1);
}

void std::vector<std::wstring>::__swap_out_circular_buffer(std::vector<std::wstring> *this, std::__split_buffer<std::wstring> *__v)
{
  std::wstring *v4;
  std::wstring *begin;
  std::wstring *end;
  std::wstring *value;

  std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::wstring>,std::reverse_iterator<std::wstring*>,std::reverse_iterator<std::wstring*>,std::reverse_iterator<std::wstring*>>((uint64_t)&this->__end_cap_, (uint64_t)this->__end_, (uint64_t)this->__end_, (uint64_t)this->__begin_, (uint64_t)this->__begin_, (uint64_t)__v->__begin_, (uint64_t)__v->__begin_);
  __v->__begin_ = v4;
  begin = this->__begin_;
  this->__begin_ = v4;
  __v->__begin_ = begin;
  end = this->__end_;
  this->__end_ = __v->__end_;
  __v->__end_ = end;
  value = this->__end_cap_.__value_;
  this->__end_cap_.__value_ = __v->__end_cap_.__value_;
  __v->__end_cap_.__value_ = value;
  __v->__first_ = __v->__begin_;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::wstring>,std::reverse_iterator<std::wstring*>,std::reverse_iterator<std::wstring*>,std::reverse_iterator<std::wstring*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v9;
  __int128 v10;
  _QWORD v12[3];
  char v13;
  __int128 v14;
  __int128 v15;

  v7 = a7;
  *(_QWORD *)&v15 = a6;
  *((_QWORD *)&v15 + 1) = a7;
  v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  if (a3 != a5)
  {
    v9 = a7;
    do
    {
      v10 = *(_OWORD *)(a3 - 24);
      *(_QWORD *)(v9 - 8) = *(_QWORD *)(a3 - 8);
      *(_OWORD *)(v9 - 24) = v10;
      v9 -= 24;
      *(_QWORD *)(a3 - 16) = 0;
      *(_QWORD *)(a3 - 8) = 0;
      *(_QWORD *)(a3 - 24) = 0;
      v7 -= 24;
      a3 -= 24;
    }
    while (a3 != a5);
    *((_QWORD *)&v15 + 1) = v9;
  }
  v13 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::wstring>,std::reverse_iterator<std::wstring*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return a6;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::wstring>,std::reverse_iterator<std::wstring*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::reverse_iterator<std::string*>>::operator()[abi:ne180100](a1);
  return a1;
}

uint64_t std::regex_traits<wchar_t>::__lookup_classname<wchar_t const*>(uint64_t a1, int *a2, int *a3, BOOL a4)
{
  std::string::size_type v6;
  void *v7;
  std::string::size_type v8;
  std::string::size_type v9;
  _DWORD *v10;
  uint64_t v11;
  std::string *p_p;
  uint64_t classname;
  std::string __p;
  void *v16;
  std::string::size_type v17;
  unsigned __int8 v18;

  std::basic_string<char32_t>::__init_with_size[abi:ne180100]<char32_t const*,char32_t const*>(&v16, a2, a3, a3 - a2);
  v6 = v18;
  if ((v18 & 0x80u) == 0)
    v7 = &v16;
  else
    v7 = v16;
  if ((v18 & 0x80u) != 0)
    v6 = v17;
  (*(void (**)(_QWORD, void *, std::string::size_type))(**(_QWORD **)(a1 + 8) + 80))(*(_QWORD *)(a1 + 8), v7, (std::string::size_type)v7 + 4 * v6);
  memset(&__p, 0, sizeof(__p));
  if ((v18 & 0x80u) == 0)
    v8 = v18;
  else
    v8 = v17;
  std::string::reserve(&__p, v8);
  v9 = v18;
  if ((v18 & 0x80u) == 0)
    v10 = &v16;
  else
    v10 = v16;
  if ((v18 & 0x80u) != 0)
    v9 = v17;
  if (v9)
  {
    v11 = 4 * v9;
    while (*v10 <= 0x7Eu)
    {
      std::string::push_back(&__p, *v10++);
      v11 -= 4;
      if (!v11)
        goto LABEL_18;
    }
    classname = 0;
  }
  else
  {
LABEL_18:
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_p = &__p;
    else
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    classname = std::__get_classname((const char *)p_p, a4);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if ((char)v18 < 0)
    operator delete(v16);
  return classname;
}

void sub_1AD8B35A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::__bracket_expression<wchar_t,std::regex_traits<wchar_t>>::__add_neg_char[abi:ne180100](uint64_t a1, uint64_t a2)
{
  int v2;
  unint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  unint64_t v12;
  void **v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  char *v18;
  _DWORD *v19;
  char *v20;
  char *v21;
  int v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  char *v27;
  int v28;
  int v29;

  v2 = a2;
  if (!*(_BYTE *)(a1 + 169))
  {
    v12 = *(_QWORD *)(a1 + 80);
    v13 = (void **)(a1 + 64);
    v5 = *(char **)(a1 + 72);
    if (*(_BYTE *)(a1 + 170))
    {
      if ((unint64_t)v5 < v12)
        goto LABEL_22;
      v6 = (char *)*v13;
      v14 = (v5 - (_BYTE *)*v13) >> 2;
      if (!((unint64_t)(v14 + 1) >> 62))
      {
        v15 = v12 - (_QWORD)v6;
        v16 = (uint64_t)(v12 - (_QWORD)v6) >> 1;
        if (v16 <= v14 + 1)
          v16 = v14 + 1;
        if (v15 >= 0x7FFFFFFFFFFFFFFCLL)
          v17 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v17 = v16;
        if (v17)
        {
          v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(a1 + 80, v17);
          v6 = *(char **)(a1 + 64);
          v5 = *(char **)(a1 + 72);
        }
        else
        {
          v18 = 0;
        }
        v20 = &v18[4 * v14];
        v21 = &v18[4 * v17];
        *(_DWORD *)v20 = v2;
        v19 = v20 + 4;
        while (v5 != v6)
        {
          v28 = *((_DWORD *)v5 - 1);
          v5 -= 4;
          *((_DWORD *)v20 - 1) = v28;
          v20 -= 4;
        }
        goto LABEL_43;
      }
    }
    else
    {
      if ((unint64_t)v5 < v12)
        goto LABEL_22;
      v6 = (char *)*v13;
      v23 = (v5 - (_BYTE *)*v13) >> 2;
      if (!((unint64_t)(v23 + 1) >> 62))
      {
        v24 = v12 - (_QWORD)v6;
        v25 = (uint64_t)(v12 - (_QWORD)v6) >> 1;
        if (v25 <= v23 + 1)
          v25 = v23 + 1;
        if (v24 >= 0x7FFFFFFFFFFFFFFCLL)
          v26 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v26 = v25;
        if (v26)
        {
          v27 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(a1 + 80, v26);
          v6 = *(char **)(a1 + 64);
          v5 = *(char **)(a1 + 72);
        }
        else
        {
          v27 = 0;
        }
        v20 = &v27[4 * v23];
        v21 = &v27[4 * v26];
        *(_DWORD *)v20 = v2;
        v19 = v20 + 4;
        while (v5 != v6)
        {
          v29 = *((_DWORD *)v5 - 1);
          v5 -= 4;
          *((_DWORD *)v20 - 1) = v29;
          v20 -= 4;
        }
        goto LABEL_43;
      }
    }
LABEL_46:
    std::vector<int>::__throw_length_error[abi:ne180100]();
  }
  v2 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 24) + 72))(*(_QWORD *)(a1 + 24), a2);
  v4 = *(_QWORD *)(a1 + 80);
  v5 = *(char **)(a1 + 72);
  if ((unint64_t)v5 < v4)
  {
LABEL_22:
    *(_DWORD *)v5 = v2;
    v19 = v5 + 4;
    goto LABEL_45;
  }
  v6 = *(char **)(a1 + 64);
  v7 = (v5 - v6) >> 2;
  if ((unint64_t)(v7 + 1) >> 62)
    goto LABEL_46;
  v8 = v4 - (_QWORD)v6;
  v9 = (uint64_t)(v4 - (_QWORD)v6) >> 1;
  if (v9 <= v7 + 1)
    v9 = v7 + 1;
  if (v8 >= 0x7FFFFFFFFFFFFFFCLL)
    v10 = 0x3FFFFFFFFFFFFFFFLL;
  else
    v10 = v9;
  if (v10)
  {
    v11 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(a1 + 80, v10);
    v6 = *(char **)(a1 + 64);
    v5 = *(char **)(a1 + 72);
  }
  else
  {
    v11 = 0;
  }
  v20 = &v11[4 * v7];
  v21 = &v11[4 * v10];
  *(_DWORD *)v20 = v2;
  v19 = v20 + 4;
  while (v5 != v6)
  {
    v22 = *((_DWORD *)v5 - 1);
    v5 -= 4;
    *((_DWORD *)v20 - 1) = v22;
    v20 -= 4;
  }
LABEL_43:
  *(_QWORD *)(a1 + 64) = v20;
  *(_QWORD *)(a1 + 72) = v19;
  *(_QWORD *)(a1 + 80) = v21;
  if (v6)
    operator delete(v6);
LABEL_45:
  *(_QWORD *)(a1 + 72) = v19;
}

void std::vector<std::pair<std::wstring,std::wstring>>::push_back[abi:ne180100](std::vector<std::pair<std::wstring, std::wstring>> *a1, __int128 *a2)
{
  std::allocator<std::pair<std::wstring, std::wstring>> *p_end_cap;
  std::pair<std::wstring, std::wstring> *v5;
  std::pair<std::wstring, std::wstring> *value;
  unint64_t v7;
  __int128 v8;
  __int128 v9;
  std::pair<std::wstring, std::wstring> *end;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  std::pair<std::wstring, std::wstring> *v15;
  std::pair<std::wstring, std::wstring> *v16;
  __int128 v17;
  __int128 v18;
  std::__split_buffer<std::pair<std::wstring, std::wstring>> __v;

  value = a1->__end_cap_.__value_;
  p_end_cap = (std::allocator<std::pair<std::wstring, std::wstring>> *)&a1->__end_cap_;
  v5 = value;
  v7 = *((_QWORD *)p_end_cap - 1);
  if (v7 >= (unint64_t)value)
  {
    v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v7 - (unint64_t)a1->__begin_) >> 4);
    v12 = v11 + 1;
    if (v11 + 1 > 0x555555555555555)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v13 = 0xAAAAAAAAAAAAAAABLL * (((char *)v5 - (char *)a1->__begin_) >> 4);
    if (2 * v13 > v12)
      v12 = 2 * v13;
    if (v13 >= 0x2AAAAAAAAAAAAAALL)
      v14 = 0x555555555555555;
    else
      v14 = v12;
    __v.__end_cap_.__value_ = p_end_cap;
    if (v14)
      v15 = (std::pair<std::wstring, std::wstring> *)std::__allocate_at_least[abi:ne180100]<std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>((uint64_t)p_end_cap, v14);
    else
      v15 = 0;
    v16 = v15 + v11;
    __v.__first_ = v15;
    __v.__begin_ = v16;
    __v.__end_cap_.__value_ = &v15[v14];
    v17 = *a2;
    v16->first.__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&v16->first.__r_.__value_.__l.__data_ = v17;
    *((_QWORD *)a2 + 1) = 0;
    *((_QWORD *)a2 + 2) = 0;
    *(_QWORD *)a2 = 0;
    v18 = *(__int128 *)((char *)a2 + 24);
    v16->second.__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 5);
    *(_OWORD *)&v16->second.__r_.__value_.__l.__data_ = v18;
    *((_QWORD *)a2 + 4) = 0;
    *((_QWORD *)a2 + 5) = 0;
    *((_QWORD *)a2 + 3) = 0;
    __v.__end_ = v16 + 1;
    std::vector<std::pair<std::wstring,std::wstring>>::__swap_out_circular_buffer(a1, &__v);
    end = a1->__end_;
    std::__split_buffer<std::pair<std::string,std::string>>::~__split_buffer(&__v);
  }
  else
  {
    v8 = *a2;
    *(_QWORD *)(v7 + 16) = *((_QWORD *)a2 + 2);
    *(_OWORD *)v7 = v8;
    *((_QWORD *)a2 + 1) = 0;
    *((_QWORD *)a2 + 2) = 0;
    *(_QWORD *)a2 = 0;
    v9 = *(__int128 *)((char *)a2 + 24);
    *(_QWORD *)(v7 + 40) = *((_QWORD *)a2 + 5);
    *(_OWORD *)(v7 + 24) = v9;
    *((_QWORD *)a2 + 4) = 0;
    *((_QWORD *)a2 + 5) = 0;
    *((_QWORD *)a2 + 3) = 0;
    end = (std::pair<std::wstring, std::wstring> *)(v7 + 48);
    a1->__end_ = (std::vector<std::pair<std::wstring, std::wstring>>::pointer)(v7 + 48);
  }
  a1->__end_ = end;
}

void sub_1AD8B3940(_Unwind_Exception *a1, std::__split_buffer<std::pair<std::wstring, std::wstring>> *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  std::__split_buffer<std::pair<std::string,std::string>>::~__split_buffer((std::__split_buffer<std::pair<std::wstring, std::wstring>> *)&a10);
  _Unwind_Resume(a1);
}

void std::vector<std::pair<std::wstring,std::wstring>>::__swap_out_circular_buffer(std::vector<std::pair<std::wstring, std::wstring>> *this, std::__split_buffer<std::pair<std::wstring, std::wstring>> *__v)
{
  std::pair<std::wstring, std::wstring> *v4;
  std::pair<std::wstring, std::wstring> *begin;
  std::pair<std::wstring, std::wstring> *end;
  std::pair<std::wstring, std::wstring> *value;

  std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::pair<std::wstring,std::wstring>>,std::reverse_iterator<std::pair<std::wstring,std::wstring>*>,std::reverse_iterator<std::pair<std::wstring,std::wstring>*>,std::reverse_iterator<std::pair<std::wstring,std::wstring>*>>((uint64_t)&this->__end_cap_, (uint64_t)this->__end_, (uint64_t)this->__end_, (uint64_t)this->__begin_, (uint64_t)this->__begin_, (uint64_t)__v->__begin_, (uint64_t)__v->__begin_);
  __v->__begin_ = v4;
  begin = this->__begin_;
  this->__begin_ = v4;
  __v->__begin_ = begin;
  end = this->__end_;
  this->__end_ = __v->__end_;
  __v->__end_ = end;
  value = this->__end_cap_.__value_;
  this->__end_cap_.__value_ = __v->__end_cap_.__value_;
  __v->__end_cap_.__value_ = value;
  __v->__first_ = __v->__begin_;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::pair<std::wstring,std::wstring>>,std::reverse_iterator<std::pair<std::wstring,std::wstring>*>,std::reverse_iterator<std::pair<std::wstring,std::wstring>*>,std::reverse_iterator<std::pair<std::wstring,std::wstring>*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  _QWORD v13[3];
  char v14;
  __int128 v15;
  __int128 v16;

  v7 = a7;
  *(_QWORD *)&v16 = a6;
  *((_QWORD *)&v16 + 1) = a7;
  v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  v13[2] = &v16;
  if (a3 != a5)
  {
    v9 = a7;
    do
    {
      v10 = *(_OWORD *)(a3 - 48);
      *(_QWORD *)(v9 - 32) = *(_QWORD *)(a3 - 32);
      *(_OWORD *)(v9 - 48) = v10;
      *(_QWORD *)(a3 - 40) = 0;
      *(_QWORD *)(a3 - 32) = 0;
      *(_QWORD *)(a3 - 48) = 0;
      v11 = *(_OWORD *)(a3 - 24);
      *(_QWORD *)(v9 - 8) = *(_QWORD *)(a3 - 8);
      *(_OWORD *)(v9 - 24) = v11;
      v9 -= 48;
      *(_QWORD *)(a3 - 16) = 0;
      *(_QWORD *)(a3 - 8) = 0;
      *(_QWORD *)(a3 - 24) = 0;
      v7 -= 48;
      a3 -= 48;
    }
    while (a3 != a5);
    *((_QWORD *)&v16 + 1) = v9;
  }
  v14 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::wstring,std::wstring>>,std::reverse_iterator<std::pair<std::wstring,std::wstring>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v13);
  return a6;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::wstring,std::wstring>>,std::reverse_iterator<std::pair<std::wstring,std::wstring>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::string,std::string>>,std::reverse_iterator<std::pair<std::string,std::string>*>>::operator()[abi:ne180100]((uint64_t *)a1);
  return a1;
}

void (__cdecl ***std::__begin_marked_subexpression<wchar_t>::~__begin_marked_subexpression(void (__cdecl ***a1)(std::__owns_one_state<wchar_t> *__hidden this)))(std::__owns_one_state<wchar_t> *__hidden this)
{
  void (__cdecl **v2)(std::__owns_one_state<wchar_t> *__hidden);

  v2 = a1[1];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<wchar_t> *__hidden)))*v2 + 1))(v2);
  return a1;
}

void std::__begin_marked_subexpression<wchar_t>::~__begin_marked_subexpression(void (__cdecl ***a1)(std::__owns_one_state<wchar_t> *__hidden this))
{
  void (__cdecl **v1)(std::__owns_one_state<wchar_t> *__hidden);

  v1 = a1[1];
  if (v1)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<wchar_t> *__hidden)))*v1 + 1))(v1);
  JUMPOUT(0x1AF44D190);
}

uint64_t std::__begin_marked_subexpression<wchar_t>::__exec(uint64_t result, uint64_t a2)
{
  *(_DWORD *)a2 = -994;
  *(_QWORD *)(*(_QWORD *)(a2 + 32) + 24 * (*(_DWORD *)(result + 16) - 1)) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 80) = *(_QWORD *)(result + 8);
  return result;
}

void (__cdecl ***std::__end_marked_subexpression<wchar_t>::~__end_marked_subexpression(void (__cdecl ***a1)(std::__owns_one_state<wchar_t> *__hidden this)))(std::__owns_one_state<wchar_t> *__hidden this)
{
  void (__cdecl **v2)(std::__owns_one_state<wchar_t> *__hidden);

  v2 = a1[1];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<wchar_t> *__hidden)))*v2 + 1))(v2);
  return a1;
}

void std::__end_marked_subexpression<wchar_t>::~__end_marked_subexpression(void (__cdecl ***a1)(std::__owns_one_state<wchar_t> *__hidden this))
{
  void (__cdecl **v1)(std::__owns_one_state<wchar_t> *__hidden);

  v1 = a1[1];
  if (v1)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<wchar_t> *__hidden)))*v1 + 1))(v1);
  JUMPOUT(0x1AF44D190);
}

uint64_t std::__end_marked_subexpression<wchar_t>::__exec(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  *(_DWORD *)a2 = -994;
  v2 = *(_QWORD *)(a2 + 32) + 24 * (*(_DWORD *)(result + 16) - 1);
  *(_QWORD *)(v2 + 8) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(v2 + 16) = 1;
  *(_QWORD *)(a2 + 80) = *(_QWORD *)(result + 8);
  return result;
}

void std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__push_loop(std::basic_regex<wchar_t> *this, size_t __min, size_t __max, std::__owns_one_state<wchar_t> *__s, size_t __mexp_begin, size_t __mexp_end, BOOL __greedy)
{
  int v8;
  int v9;
  _QWORD *v14;
  std::__owns_one_state<wchar_t> *end;
  std::__node<wchar_t> *first;
  uint64_t v17;
  unsigned int loop_count;
  std::__node<wchar_t> *v19;
  std::__node<wchar_t> *v20;

  v8 = __mexp_end;
  v9 = __mexp_begin;
  v14 = (_QWORD *)operator new();
  end = this->__end_;
  first = end->__first_;
  v14[1] = first;
  end->__first_ = 0;
  v17 = operator new();
  loop_count = this->__loop_count_;
  v19 = __s->__first_;
  *(_QWORD *)v17 = &unk_1E5D46878;
  *(_QWORD *)(v17 + 8) = v19;
  *(_QWORD *)(v17 + 16) = v14;
  *(_QWORD *)(v17 + 24) = __min;
  *(_QWORD *)(v17 + 32) = __max;
  *(_DWORD *)(v17 + 40) = loop_count;
  *(_DWORD *)(v17 + 44) = v9;
  *(_DWORD *)(v17 + 48) = v8;
  *(_BYTE *)(v17 + 52) = __greedy;
  __s->__first_ = 0;
  v20 = (std::__node<wchar_t> *)operator new();
  v20->__vftable = (std::__node<wchar_t>_vtbl *)&unk_1E5D40638;
  v20[1].__vftable = (std::__node<wchar_t>_vtbl *)v17;
  this->__end_->__first_ = v20;
  this->__end_ = *(std::__owns_one_state<wchar_t> **)(v17 + 16);
  __s->__first_ = (std::__node<wchar_t> *)v17;
  ++this->__loop_count_;
}

void sub_1AD8B3D68(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

unsigned int *std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__parse_DUP_COUNT<wchar_t const*>(uint64_t a1, unsigned int *a2, unsigned int *a3, int *a4)
{
  unsigned int *v4;
  int v8;
  int v9;

  v4 = a2;
  if (a2 != a3)
  {
    v8 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(**(_QWORD **)(a1 + 8) + 104))(*(_QWORD *)(a1 + 8), *a2, 0);
    if ((v8 & 0xFFFFFFF8) == 0x30 || (v8 & 0xFFFFFFFE) == 0x38)
    {
      *a4 = v8 - 48;
      if (++v4 == a3)
      {
        return a3;
      }
      else
      {
        while (1)
        {
          v9 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(**(_QWORD **)(a1 + 8) + 104))(*(_QWORD *)(a1 + 8), *v4, 0);
          if ((v9 & 0xFFFFFFF8) != 0x30 && (v9 & 0xFFFFFFFE) != 0x38)
            break;
          if (*a4 >= 214748364)
            std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)8>();
          *a4 = 10 * *a4 + v9 - 48;
          if (++v4 == a3)
            return a3;
        }
      }
    }
  }
  return v4;
}

void (__cdecl ***std::__loop<wchar_t>::~__loop(void (__cdecl ***a1)(std::__owns_one_state<wchar_t> *__hidden this)))(std::__owns_one_state<wchar_t> *__hidden this)
{
  void (__cdecl **v2)(std::__owns_one_state<wchar_t> *__hidden);
  void (__cdecl **v3)(std::__owns_one_state<wchar_t> *__hidden);

  *a1 = (void (__cdecl **)(std::__owns_one_state<wchar_t> *__hidden))&unk_1E5D405D8;
  v2 = a1[2];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<wchar_t> *__hidden)))*v2 + 1))(v2);
  v3 = a1[1];
  if (v3)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<wchar_t> *__hidden)))*v3 + 1))(v3);
  return a1;
}

void std::__loop<wchar_t>::~__loop(void (__cdecl ***a1)(std::__owns_one_state<wchar_t> *__hidden this))
{
  void (__cdecl **v2)(std::__owns_one_state<wchar_t> *__hidden);
  void (__cdecl **v3)(std::__owns_one_state<wchar_t> *__hidden);

  *a1 = (void (__cdecl **)(std::__owns_one_state<wchar_t> *__hidden))&unk_1E5D405D8;
  v2 = a1[2];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<wchar_t> *__hidden)))*v2 + 1))(v2);
  v3 = a1[1];
  if (v3)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<wchar_t> *__hidden)))*v3 + 1))(v3);
  JUMPOUT(0x1AF44D190);
}

unsigned int *std::__loop<wchar_t>::__exec(unsigned int *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  _BOOL4 v8;
  uint64_t v10;

  v2 = result[10];
  v3 = a2[7];
  v4 = (unint64_t *)(v3 + 16 * v2);
  if (*(_DWORD *)a2 == -991)
  {
    v5 = *v4 + 1;
    *v4 = v5;
    v6 = *((_QWORD *)result + 3);
    v7 = *((_QWORD *)result + 4);
    v8 = v5 < v7;
    if (v5 < v7 && v5 >= v6)
    {
      v10 = *(_QWORD *)(v3 + 16 * v2 + 8);
      v8 = v5 < v7 && v10 != a2[2];
    }
    if (!v8 || v5 < v6)
    {
      *(_DWORD *)a2 = -994;
      if (!v8)
        goto LABEL_25;
LABEL_22:
      a2[10] = *((_QWORD *)result + 1);
      return std::__loop<char>::__init_repeat[abi:ne180100](result, a2);
    }
    goto LABEL_23;
  }
  *v4 = 0;
  if (*((_QWORD *)result + 4))
  {
    if (*((_QWORD *)result + 3))
    {
      *(_DWORD *)a2 = -994;
      goto LABEL_22;
    }
LABEL_23:
    *(_DWORD *)a2 = -992;
    return result;
  }
  *(_DWORD *)a2 = -994;
LABEL_25:
  a2[10] = *((_QWORD *)result + 2);
  return result;
}

unsigned int *std::__loop<wchar_t>::__exec_split(unsigned int *result, int a2, _QWORD *a3)
{
  *(_DWORD *)a3 = -994;
  if (*((unsigned __int8 *)result + 52) == a2)
  {
    a3[10] = *((_QWORD *)result + 2);
  }
  else
  {
    a3[10] = *((_QWORD *)result + 1);
    return std::__loop<char>::__init_repeat[abi:ne180100](result, a3);
  }
  return result;
}

void (__cdecl ***std::__owns_two_states<wchar_t>::~__owns_two_states(void (__cdecl ***a1)(std::__owns_one_state<wchar_t> *__hidden this)))(std::__owns_one_state<wchar_t> *__hidden this)
{
  void (__cdecl **v2)(std::__owns_one_state<wchar_t> *__hidden);
  void (__cdecl **v3)(std::__owns_one_state<wchar_t> *__hidden);

  *a1 = (void (__cdecl **)(std::__owns_one_state<wchar_t> *__hidden))&unk_1E5D405D8;
  v2 = a1[2];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<wchar_t> *__hidden)))*v2 + 1))(v2);
  v3 = a1[1];
  if (v3)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<wchar_t> *__hidden)))*v3 + 1))(v3);
  return a1;
}

void std::__owns_two_states<wchar_t>::~__owns_two_states(void (__cdecl ***a1)(std::__owns_one_state<wchar_t> *__hidden this))
{
  void (__cdecl **v2)(std::__owns_one_state<wchar_t> *__hidden);
  void (__cdecl **v3)(std::__owns_one_state<wchar_t> *__hidden);

  *a1 = (void (__cdecl **)(std::__owns_one_state<wchar_t> *__hidden))&unk_1E5D405D8;
  v2 = a1[2];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<wchar_t> *__hidden)))*v2 + 1))(v2);
  v3 = a1[1];
  if (v3)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<wchar_t> *__hidden)))*v3 + 1))(v3);
  JUMPOUT(0x1AF44D190);
}

void std::__repeat_one_loop<wchar_t>::~__repeat_one_loop()
{
  JUMPOUT(0x1AF44D190);
}

uint64_t std::__repeat_one_loop<wchar_t>::__exec(uint64_t result, uint64_t a2)
{
  *(_DWORD *)a2 = -991;
  *(_QWORD *)(a2 + 80) = *(_QWORD *)(result + 8);
  return result;
}

void (__cdecl ***std::__alternate<wchar_t>::~__alternate(void (__cdecl ***a1)(std::__owns_one_state<wchar_t> *__hidden this)))(std::__owns_one_state<wchar_t> *__hidden this)
{
  void (__cdecl **v2)(std::__owns_one_state<wchar_t> *__hidden);
  void (__cdecl **v3)(std::__owns_one_state<wchar_t> *__hidden);

  *a1 = (void (__cdecl **)(std::__owns_one_state<wchar_t> *__hidden))&unk_1E5D405D8;
  v2 = a1[2];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<wchar_t> *__hidden)))*v2 + 1))(v2);
  v3 = a1[1];
  if (v3)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<wchar_t> *__hidden)))*v3 + 1))(v3);
  return a1;
}

void std::__alternate<wchar_t>::~__alternate(void (__cdecl ***a1)(std::__owns_one_state<wchar_t> *__hidden this))
{
  void (__cdecl **v2)(std::__owns_one_state<wchar_t> *__hidden);
  void (__cdecl **v3)(std::__owns_one_state<wchar_t> *__hidden);

  *a1 = (void (__cdecl **)(std::__owns_one_state<wchar_t> *__hidden))&unk_1E5D405D8;
  v2 = a1[2];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<wchar_t> *__hidden)))*v2 + 1))(v2);
  v3 = a1[1];
  if (v3)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<wchar_t> *__hidden)))*v3 + 1))(v3);
  JUMPOUT(0x1AF44D190);
}

void std::__alternate<wchar_t>::__exec(uint64_t a1, _DWORD *a2)
{
  *a2 = -992;
}

uint64_t std::__alternate<wchar_t>::__exec_split(uint64_t result, int a2, uint64_t a3)
{
  uint64_t v3;

  *(_DWORD *)a3 = -994;
  v3 = 8;
  if (a2)
    v3 = 16;
  *(_QWORD *)(a3 + 80) = *(_QWORD *)(result + v3);
  return result;
}

void std::__empty_non_own_state<wchar_t>::~__empty_non_own_state()
{
  JUMPOUT(0x1AF44D190);
}

uint64_t std::__empty_non_own_state<wchar_t>::__exec(uint64_t result, uint64_t a2)
{
  *(_DWORD *)a2 = -994;
  *(_QWORD *)(a2 + 80) = *(_QWORD *)(result + 8);
  return result;
}

unsigned int *std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__parse_simple_RE<wchar_t const*>(std::basic_regex<wchar_t> *a1, int *a2, int *a3)
{
  std::__owns_one_state<wchar_t> *end;
  unsigned int marked_count;
  int *v8;

  if (a2 == a3)
    return (unsigned int *)a2;
  end = a1->__end_;
  marked_count = a1->__marked_count_;
  v8 = std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__parse_nondupl_RE<wchar_t const*>(a1, a2, a3);
  if (v8 == a2)
    return (unsigned int *)a2;
  else
    return std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__parse_RE_dupl_symbol<wchar_t const*>(a1, (unsigned int *)v8, (unsigned int *)a3, end, marked_count + 1, a1->__marked_count_ + 1);
}

int *std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__parse_nondupl_RE<wchar_t const*>(std::basic_regex<wchar_t> *a1, int *a2, int *a3)
{
  int *v6;
  int *v7;
  __int32 *v8;
  uint64_t v9;
  unsigned int marked_count;
  int *v11;
  _BOOL4 v13;
  uint64_t v14;

  v6 = std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__parse_one_char_or_coll_elem_RE<wchar_t const*>(a1, a2, a3);
  v7 = v6;
  if (v6 == a2 && v6 != a3)
  {
    v8 = a2 + 1;
    if (a2 + 1 == a3 || *a2 != 92)
    {
      return a2;
    }
    else if (*v8 == 40)
    {
      v9 = (uint64_t)(a2 + 2);
      std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__push_begin_marked_subexpression(a1);
      marked_count = a1->__marked_count_;
      do
      {
        v11 = (int *)v9;
        v9 = std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__parse_simple_RE<wchar_t const*>(a1, v9, a3);
      }
      while ((int *)v9 != v11);
      if (v11 == a3 || v11 + 1 == a3 || *v11 != 92 || v11[1] != 41)
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>();
      v7 = v11 + 2;
      std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__push_end_marked_subexpression(a1, marked_count);
    }
    else
    {
      v13 = std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__test_back_ref(a1, *v8);
      v14 = 2;
      if (!v13)
        v14 = 0;
      return &a2[v14];
    }
  }
  return v7;
}

unsigned int *std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__parse_RE_dupl_symbol<wchar_t const*>(std::basic_regex<wchar_t> *this, unsigned int *a2, unsigned int *a3, std::__owns_one_state<wchar_t> *__s, size_t __mexp_begin, size_t __mexp_end)
{
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int *v12;
  unsigned int *v13;
  unsigned int *v14;
  unsigned int *v15;
  size_t v16;
  size_t v17;
  size_t v18;
  size_t v19;
  std::basic_regex<wchar_t> *v20;
  int v22;
  int v23;

  v6 = a2;
  if (a2 != a3)
  {
    v7 = __mexp_end;
    v8 = __mexp_begin;
    if (*a2 == 42)
    {
      std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__push_loop(this, 0, 0xFFFFFFFFFFFFFFFFLL, __s, __mexp_begin, __mexp_end, 1);
      return ++v6;
    }
    if (a2 + 1 != a3 && *a2 == 92 && a2[1] == 123)
    {
      v12 = a2 + 2;
      v23 = 0;
      v13 = std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__parse_DUP_COUNT<wchar_t const*>((uint64_t)this, a2 + 2, a3, &v23);
      if (v13 == v12)
        goto LABEL_16;
      if (v13 != a3)
      {
        v14 = v13 + 1;
        if (*v13 == 44)
        {
          v22 = -1;
          v15 = std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__parse_DUP_COUNT<wchar_t const*>((uint64_t)this, v14, a3, &v22);
          if (v15 != a3 && v15 + 1 != a3 && *v15 == 92 && v15[1] == 125)
          {
            v17 = v22;
            v16 = v23;
            if (v22 == -1)
            {
              v17 = -1;
            }
            else if (v22 < v23)
            {
LABEL_16:
              std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)8>();
            }
            v6 = &v15[2 * (v15[1] == 125)];
            v18 = v8;
            v19 = v7;
            v20 = this;
LABEL_23:
            std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__push_loop(v20, v16, v17, __s, v18, v19, 1);
            return v6;
          }
        }
        else if (v14 != a3 && *v13 == 92 && *v14 == 125)
        {
          v6 = v13 + 2;
          v16 = v23;
          v18 = v8;
          v19 = v7;
          v20 = this;
          v17 = v23;
          goto LABEL_23;
        }
      }
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)7>();
    }
  }
  return v6;
}

int *std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__parse_one_char_or_coll_elem_RE<wchar_t const*>(std::basic_regex<wchar_t> *this, int *a2, int *a3)
{
  std::basic_regex<wchar_t>::value_type v6;
  int *result;
  std::__node<wchar_t> *v9;
  std::__owns_one_state<wchar_t> *end;
  std::__node<wchar_t> *first;

  if (a2 == a3)
  {
    result = std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__parse_QUOTED_CHAR<wchar_t const*>(this, a2, a3);
    if (result != a2)
      return result;
    return std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__parse_bracket_expression<wchar_t const*>((uint64_t)this, a2, a3);
  }
  v6 = *a2;
  if ((a2 + 1 != a3 || v6 != 36)
    && ((v6 - 46) > 0x2E || ((1 << (v6 - 46)) & 0x600000000001) == 0))
  {
    std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__push_char(this, v6);
    return a2 + 1;
  }
  result = std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__parse_QUOTED_CHAR<wchar_t const*>(this, a2, a3);
  if (result != a2)
    return result;
  if (*a2 != 46)
    return std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__parse_bracket_expression<wchar_t const*>((uint64_t)this, a2, a3);
  v9 = (std::__node<wchar_t> *)operator new();
  end = this->__end_;
  first = end->__first_;
  v9->__vftable = (std::__node<wchar_t>_vtbl *)&unk_1E5D401B0;
  v9[1].__vftable = (std::__node<wchar_t>_vtbl *)first;
  end->__first_ = v9;
  this->__end_ = (std::__owns_one_state<wchar_t> *)this->__end_->__first_;
  return a2 + 1;
}

_DWORD *std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__parse_QUOTED_CHAR<wchar_t const*>(std::basic_regex<wchar_t> *a1, _DWORD *a2, _DWORD *a3)
{
  _DWORD *v3;
  std::basic_regex<wchar_t>::value_type v4;

  v3 = a2;
  if (a2 != a3 && a2 + 1 != a3 && *a2 == 92)
  {
    v4 = a2[1];
    if ((v4 - 36) <= 0x3A && ((1 << (v4 - 36)) & 0x580000000000441) != 0)
    {
      std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__push_char(a1, v4);
      v3 += 2;
    }
  }
  return v3;
}

void (__cdecl ***std::__match_any<wchar_t>::~__match_any(void (__cdecl ***a1)(std::__owns_one_state<wchar_t> *__hidden this)))(std::__owns_one_state<wchar_t> *__hidden this)
{
  void (__cdecl **v2)(std::__owns_one_state<wchar_t> *__hidden);

  v2 = a1[1];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<wchar_t> *__hidden)))*v2 + 1))(v2);
  return a1;
}

void std::__match_any<wchar_t>::~__match_any(void (__cdecl ***a1)(std::__owns_one_state<wchar_t> *__hidden this))
{
  void (__cdecl **v1)(std::__owns_one_state<wchar_t> *__hidden);

  v1 = a1[1];
  if (v1)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<wchar_t> *__hidden)))*v1 + 1))(v1);
  JUMPOUT(0x1AF44D190);
}

uint64_t std::__match_any<wchar_t>::__exec(uint64_t result, uint64_t a2)
{
  _DWORD *v2;
  uint64_t v3;

  v2 = *(_DWORD **)(a2 + 16);
  if (v2 == *(_DWORD **)(a2 + 24) || !*v2)
  {
    v3 = 0;
    *(_DWORD *)a2 = -993;
  }
  else
  {
    *(_DWORD *)a2 = -995;
    *(_QWORD *)(a2 + 16) = v2 + 1;
    v3 = *(_QWORD *)(result + 8);
  }
  *(_QWORD *)(a2 + 80) = v3;
  return result;
}

BOOL std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__test_back_ref(std::basic_regex<wchar_t> *this, __int32 a2)
{
  int v3;
  BOOL result;

  v3 = ((uint64_t (*)(const std::ctype<wchar_t> *, _QWORD, _QWORD))this->__traits_.__ct_->do_narrow)(this->__traits_.__ct_, *(_QWORD *)&a2, 0);
  if ((v3 & 0xFFFFFFF8) == 0x30 || (result = 0, (v3 & 0xFFFFFFFE) == 0x38))
  {
    if (v3 - 49 > 8)
    {
      return 0;
    }
    else
    {
      if (v3 - 48 > this->__marked_count_)
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)4>();
      std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__push_back_ref(this, v3 - 48);
      return 1;
    }
  }
  return result;
}

unsigned int *std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__parse_ERE_branch<wchar_t const*>(uint64_t a1, std::basic_regex<wchar_t> *a2, std::basic_regex<wchar_t> *a3)
{
  unsigned int *v6;
  unsigned int *v7;

  v6 = std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__parse_ERE_expression<wchar_t const*>(a1, a2, a3);
  if (v6 == (unsigned int *)a2)
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)15>();
  do
  {
    v7 = v6;
    v6 = std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__parse_ERE_expression<wchar_t const*>(a1, (std::basic_regex<wchar_t> *)v6, a3);
  }
  while (v6 != v7);
  return v7;
}

unsigned int *std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__parse_ERE_expression<wchar_t const*>(uint64_t a1, std::basic_regex<wchar_t> *a2, std::basic_regex<wchar_t> *a3)
{
  std::__owns_one_state<wchar_t> *v6;
  int v7;
  int *v8;
  int *v9;
  int locale;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  unsigned int v16;
  std::basic_regex<wchar_t> *v17;
  std::basic_regex<wchar_t> *v18;

  v6 = *(std::__owns_one_state<wchar_t> **)(a1 + 56);
  v7 = *(_DWORD *)(a1 + 28);
  v8 = std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__parse_one_char_or_coll_elem_ERE<wchar_t const*>((std::basic_regex<wchar_t> *)a1, a2, a3);
  v9 = v8;
  if (v8 != (int *)a2 || v8 == (int *)a3)
    goto LABEL_12;
  locale = (int)a2->__traits_.__loc_.__locale_;
  if (LODWORD(a2->__traits_.__loc_.__locale_) == 36)
  {
    v11 = operator new();
    v12 = (*(_DWORD *)(a1 + 24) & 0x5F0) == 1024;
    v13 = *(_QWORD *)(a1 + 56);
    goto LABEL_8;
  }
  if (locale == 40)
  {
    std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__push_begin_marked_subexpression((std::basic_regex<wchar_t> *)a1);
    v16 = *(_DWORD *)(a1 + 28);
    ++*(_DWORD *)(a1 + 36);
    v17 = (std::basic_regex<wchar_t> *)std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__parse_extended_reg_exp<wchar_t const*>(a1, (char *)&a2->__traits_.__loc_.__locale_ + 4, a3);
    if (v17 == a3 || (v18 = v17, LODWORD(v17->__traits_.__loc_.__locale_) != 41))
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>();
    std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__push_end_marked_subexpression((std::basic_regex<wchar_t> *)a1, v16);
    --*(_DWORD *)(a1 + 36);
    v9 = (int *)&v18->__traits_.__loc_.__locale_ + 1;
LABEL_12:
    if (v9 != (int *)a2)
      return std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__parse_ERE_dupl_symbol<wchar_t const*>(a1, v9, (unsigned int *)a3, v6, (v7 + 1), (*(_DWORD *)(a1 + 28) + 1));
    return (unsigned int *)a2;
  }
  if (locale == 94)
  {
    v11 = operator new();
    v12 = (*(_DWORD *)(a1 + 24) & 0x5F0) == 1024;
    v13 = *(_QWORD *)(a1 + 56);
LABEL_8:
    v15 = *(_QWORD *)(v13 + 8);
    *(_QWORD *)v11 = v14 + 16;
    *(_QWORD *)(v11 + 8) = v15;
    *(_BYTE *)(v11 + 16) = v12;
    *(_QWORD *)(v13 + 8) = v11;
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
    v9 = (int *)&a2->__traits_.__loc_.__locale_ + 1;
    return std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__parse_ERE_dupl_symbol<wchar_t const*>(a1, v9, (unsigned int *)a3, v6, (v7 + 1), (*(_DWORD *)(a1 + 28) + 1));
  }
  return (unsigned int *)a2;
}

int *std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__parse_one_char_or_coll_elem_ERE<wchar_t const*>(std::basic_regex<wchar_t> *a1, std::basic_regex<wchar_t> *a2, std::basic_regex<wchar_t> *a3)
{
  int *result;
  std::__node<wchar_t> *v7;
  std::__owns_one_state<wchar_t> *end;
  std::__node<wchar_t> *first;

  result = (int *)std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__parse_ORD_CHAR_ERE<wchar_t const*>(a1, a2, a3);
  if (result == (int *)a2)
  {
    result = std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__parse_QUOTED_CHAR_ERE<wchar_t const*>((uint64_t)a1, (std::wstring::value_type *)a2, (std::wstring::value_type *)a3);
    if (result == (int *)a2)
    {
      if (a2 == a3 || LODWORD(a2->__traits_.__loc_.__locale_) != 46)
      {
        return std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__parse_bracket_expression<wchar_t const*>((uint64_t)a1, (int *)a2, (int *)a3);
      }
      else
      {
        v7 = (std::__node<wchar_t> *)operator new();
        end = a1->__end_;
        first = end->__first_;
        v7->__vftable = (std::__node<wchar_t>_vtbl *)&unk_1E5D401B0;
        v7[1].__vftable = (std::__node<wchar_t>_vtbl *)first;
        end->__first_ = v7;
        a1->__end_ = (std::__owns_one_state<wchar_t> *)a1->__end_->__first_;
        return (int *)&a2->__traits_.__loc_.__locale_ + 1;
      }
    }
  }
  return result;
}

std::basic_regex<wchar_t> *std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__parse_ORD_CHAR_ERE<wchar_t const*>(std::basic_regex<wchar_t> *a1, std::basic_regex<wchar_t> *this, std::basic_regex<wchar_t> *a3)
{
  std::basic_regex<wchar_t> *v3;
  std::basic_regex<wchar_t>::value_type locale;
  uint64_t v5;

  v3 = this;
  if (this != a3)
  {
    locale = (std::basic_regex<wchar_t>::value_type)this->__traits_.__loc_.__locale_;
    v5 = (locale - 36);
    if (v5 > 0x3A)
      goto LABEL_8;
    if (((1 << (locale - 36)) & 0x5800000080004D1) != 0)
      return v3;
    if (v5 == 5)
    {
      if (a1->__open_count_)
        return v3;
      locale = 41;
    }
    else
    {
LABEL_8:
      if ((locale - 123) < 2)
        return v3;
    }
    std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__push_char(a1, locale);
    return (std::basic_regex<wchar_t> *)((char *)v3 + 4);
  }
  return v3;
}

std::wstring::value_type *std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__parse_QUOTED_CHAR_ERE<wchar_t const*>(uint64_t a1, std::wstring::value_type *a2, std::wstring::value_type *a3)
{
  std::wstring::value_type *v3;
  std::basic_regex<wchar_t>::value_type *v4;
  BOOL v5;
  _BOOL4 v7;
  uint64_t v8;

  v3 = a2;
  if (a2 == a3)
    return v3;
  v4 = a2 + 1;
  if (v3 + 1 == a3 || *v3 != 92)
    return v3;
  v5 = (*v4 - 36) > 0x3A || ((1 << (*v4 - 36)) & 0x5800000080004F1) == 0;
  if (!v5 || (*v4 - 123) < 3)
  {
    std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__push_char((std::basic_regex<wchar_t> *)a1, *v4);
    v3 += 2;
    return v3;
  }
  if ((*(_DWORD *)(a1 + 24) & 0x1F0) != 0x40)
  {
    v7 = std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__test_back_ref((std::basic_regex<wchar_t> *)a1, *v4);
    v8 = 8;
    if (!v7)
      v8 = 0;
    return (std::wstring::value_type *)((char *)v3 + v8);
  }
  return std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__parse_awk_escape<wchar_t const*>((std::basic_regex<wchar_t> *)a1, v4, a3, 0);
}

std::regex_traits<wchar_t> *std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::basic_regex[abi:ne180100]<std::char_traits<wchar_t>,std::allocator<wchar_t>>(std::regex_traits<wchar_t> *a1, uint64_t a2, int a3)
{
  std::regex_traits<wchar_t> *v6;
  uint64_t v7;
  std::basic_regex<wchar_t> *v8;

  v6 = std::regex_traits<wchar_t>::regex_traits(a1);
  LODWORD(v6[1].__loc_.__locale_) = a3;
  *(_OWORD *)((char *)&v6[1].__loc_.__locale_ + 4) = 0u;
  *(_OWORD *)((char *)&v6[1].__col_ + 4) = 0u;
  HIDWORD(v6[2].__ct_) = 0;
  v7 = *(unsigned __int8 *)(a2 + 23);
  if ((v7 & 0x80u) == 0)
    v8 = (std::basic_regex<wchar_t> *)a2;
  else
    v8 = *(std::basic_regex<wchar_t> **)a2;
  if ((v7 & 0x80u) != 0)
    v7 = *(_QWORD *)(a2 + 8);
  if ((int *)((char *)v8 + 4 * v7) != std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__parse<std::__wrap_iter<wchar_t const*>>((uint64_t)v6, v8, (std::basic_regex<wchar_t> *)((char *)v8 + 4 * v7)))std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)17>();
  return a1;
}

void sub_1AD8B4D3C(_Unwind_Exception *a1)
{
  std::locale *v1;

  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&v1[5]);
  std::locale::~locale(v1);
  _Unwind_Resume(a1);
}

int *std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__parse<std::__wrap_iter<wchar_t const*>>(uint64_t a1, std::basic_regex<wchar_t> *a2, std::basic_regex<wchar_t> *a3)
{
  _QWORD *v6;
  _QWORD *v7;
  unsigned int v8;

  v6 = (_QWORD *)operator new();
  *v6 = &unk_1E5D400F0;
  v7 = (_QWORD *)operator new();
  v7[1] = v6;
  std::shared_ptr<std::__empty_state<wchar_t>>::reset[abi:ne180100]<std::__empty_state<wchar_t>,void>((_QWORD *)(a1 + 40), (uint64_t)v7);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a1 + 40);
  v8 = *(_DWORD *)(a1 + 24) & 0x1F0;
  if (v8 > 0x3F)
  {
    switch(v8)
    {
      case 0x40u:
        return (int *)std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__parse_extended_reg_exp<std::__wrap_iter<wchar_t const*>>((std::basic_regex<wchar_t> *)a1, a2, a3);
      case 0x80u:
        return std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__parse_grep<std::__wrap_iter<wchar_t const*>>((std::basic_regex<wchar_t> *)a1, (__int32 *)a2, (int *)a3);
      case 0x100u:
        return (int *)std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__parse_egrep<std::__wrap_iter<wchar_t const*>>((std::basic_regex<wchar_t> *)a1, (__int32 *)a2, a3);
      default:
        goto LABEL_14;
    }
  }
  else if (v8)
  {
    if (v8 != 16)
    {
      if (v8 != 32)
LABEL_14:
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)14>();
      return (int *)std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__parse_extended_reg_exp<std::__wrap_iter<wchar_t const*>>((std::basic_regex<wchar_t> *)a1, a2, a3);
    }
    return std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__parse_basic_reg_exp<std::__wrap_iter<wchar_t const*>>(a1, (int *)a2, (int *)a3);
  }
  else
  {
    return std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__parse_ecma_exp<std::__wrap_iter<wchar_t const*>>((std::basic_regex<wchar_t> *)a1, (int *)a2, (int *)a3);
  }
}

void sub_1AD8B4EAC(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

int *std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__parse_ecma_exp<std::__wrap_iter<wchar_t const*>>(std::basic_regex<wchar_t> *a1, int *a2, int *a3)
{
  std::__owns_one_state<wchar_t> *end;
  int *v7;
  std::__node<wchar_t> *v8;
  std::__owns_one_state<wchar_t> *v9;
  std::__node<wchar_t> *first;
  std::__owns_one_state<wchar_t> *v11;
  int *v12;
  std::__node<wchar_t> *v13;
  std::__owns_one_state<wchar_t> *v14;
  std::__node<wchar_t> *v15;

  end = a1->__end_;
  v7 = std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__parse_alternative<std::__wrap_iter<wchar_t const*>>(a1, a2, a3);
  if (v7 == a2)
  {
    v8 = (std::__node<wchar_t> *)operator new();
    v9 = a1->__end_;
    first = v9->__first_;
    v8[1].__vftable = (std::__node<wchar_t>_vtbl *)first;
    v9->__first_ = v8;
    a1->__end_ = (std::__owns_one_state<wchar_t> *)a1->__end_->__first_;
  }
  if (v7 == a3)
    return a3;
  while (*v7 == 124)
  {
    v11 = a1->__end_;
    v12 = v7 + 1;
    v7 = std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__parse_alternative<std::__wrap_iter<wchar_t const*>>(a1, v7 + 1, a3);
    if (v12 == v7)
    {
      v13 = (std::__node<wchar_t> *)operator new();
      v14 = a1->__end_;
      v15 = v14->__first_;
      v13[1].__vftable = (std::__node<wchar_t>_vtbl *)v15;
      v14->__first_ = v13;
      a1->__end_ = (std::__owns_one_state<wchar_t> *)a1->__end_->__first_;
    }
    std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__push_alternation(a1, end, v11);
    if (v7 == a3)
      return a3;
  }
  return v7;
}

int *std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__parse_basic_reg_exp<std::__wrap_iter<wchar_t const*>>(uint64_t a1, int *a2, int *a3)
{
  int *v3;
  int *v4;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;
  uint64_t v9;
  int *v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;

  v3 = a2;
  if (a2 == a3)
    return a2;
  v4 = a3;
  if (*a2 == 94)
  {
    v6 = operator new();
    v7 = (*(_DWORD *)(a1 + 24) & 0x5F0) == 1024;
    v8 = *(_QWORD *)(a1 + 56);
    v9 = *(_QWORD *)(v8 + 8);
    *(_QWORD *)v6 = &unk_1E5D408E0;
    *(_QWORD *)(v6 + 8) = v9;
    *(_BYTE *)(v6 + 16) = v7;
    *(_QWORD *)(v8 + 8) = v6;
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
    ++v3;
  }
  if (v3 != v4)
  {
    do
    {
      v10 = v3;
      v3 = (int *)std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__parse_simple_RE<std::__wrap_iter<wchar_t const*>>((std::basic_regex<wchar_t> *)a1, v3, v4);
    }
    while (v10 != v3);
    if (v10 != v4)
    {
      if (v10 + 1 != v4 || *v10 != 36)
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)15>();
      v11 = operator new();
      v12 = (*(_DWORD *)(a1 + 24) & 0x5F0) == 1024;
      v13 = *(_QWORD *)(a1 + 56);
      v14 = *(_QWORD *)(v13 + 8);
      *(_QWORD *)v11 = &unk_1E5D409A0;
      *(_QWORD *)(v11 + 8) = v14;
      *(_BYTE *)(v11 + 16) = v12;
      *(_QWORD *)(v13 + 8) = v11;
      *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
    }
  }
  return v4;
}

std::basic_regex<wchar_t> *std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__parse_extended_reg_exp<std::__wrap_iter<wchar_t const*>>(std::basic_regex<wchar_t> *a1, std::basic_regex<wchar_t> *a2, std::basic_regex<wchar_t> *a3)
{
  std::__owns_one_state<wchar_t> *end;
  unsigned int *v7;
  unsigned int *v8;
  std::__owns_one_state<wchar_t> *v9;
  unsigned int *v10;

  end = a1->__end_;
  v7 = std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__parse_ERE_branch<std::__wrap_iter<wchar_t const*>>((uint64_t)a1, a2, a3);
  if (v7 == (unsigned int *)a2)
LABEL_9:
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)15>();
  v8 = v7;
  while (v8 != (unsigned int *)a3)
  {
    if (*v8 != 124)
      return (std::basic_regex<wchar_t> *)v8;
    v9 = a1->__end_;
    v10 = std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__parse_ERE_branch<std::__wrap_iter<wchar_t const*>>((uint64_t)a1, (std::basic_regex<wchar_t> *)(v8 + 1), a3);
    if (v8 + 1 == v10)
      goto LABEL_9;
    v8 = v10;
    std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__push_alternation(a1, end, v9);
  }
  return a3;
}

int *std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__parse_grep<std::__wrap_iter<wchar_t const*>>(std::basic_regex<wchar_t> *a1, __int32 *__s, int *a3)
{
  std::__owns_one_state<wchar_t> *end;
  __int32 *v7;
  int *v8;
  std::__node<wchar_t> *v9;
  std::__owns_one_state<wchar_t> *v10;
  std::__node<wchar_t> *first;
  __int32 *i;
  __int32 *v13;
  int *v14;
  std::__owns_one_state<wchar_t> *v15;
  std::__node<wchar_t> *v16;
  std::__owns_one_state<wchar_t> *v17;
  std::__node<wchar_t> *v18;

  end = a1->__end_;
  v7 = wmemchr(__s, 10, a3 - __s);
  if (v7)
    v8 = v7;
  else
    v8 = a3;
  if (v8 == __s)
  {
    v9 = (std::__node<wchar_t> *)operator new();
    v10 = a1->__end_;
    first = v10->__first_;
    v9[1].__vftable = (std::__node<wchar_t>_vtbl *)first;
    v10->__first_ = v9;
    a1->__end_ = (std::__owns_one_state<wchar_t> *)a1->__end_->__first_;
  }
  else
  {
    std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__parse_basic_reg_exp<std::__wrap_iter<wchar_t const*>>((uint64_t)a1, __s, v8);
  }
  for (i = &v8[v8 != a3]; i != a3; i = &v14[v14 != a3])
  {
    v13 = wmemchr(i, 10, a3 - i);
    if (v13)
      v14 = v13;
    else
      v14 = a3;
    v15 = a1->__end_;
    if (v14 == i)
    {
      v16 = (std::__node<wchar_t> *)operator new();
      v17 = a1->__end_;
      v18 = v17->__first_;
      v16[1].__vftable = (std::__node<wchar_t>_vtbl *)v18;
      v17->__first_ = v16;
      a1->__end_ = (std::__owns_one_state<wchar_t> *)a1->__end_->__first_;
    }
    else
    {
      std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__parse_basic_reg_exp<std::__wrap_iter<wchar_t const*>>((uint64_t)a1, i, v14);
    }
    std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__push_alternation(a1, end, v15);
  }
  return a3;
}

std::basic_regex<wchar_t> *std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__parse_egrep<std::__wrap_iter<wchar_t const*>>(std::basic_regex<wchar_t> *a1, __int32 *__s, std::basic_regex<wchar_t> *a3)
{
  std::__owns_one_state<wchar_t> *end;
  __int32 *v7;
  std::basic_regex<wchar_t> *v8;
  std::__node<wchar_t> *v9;
  std::__owns_one_state<wchar_t> *v10;
  std::__node<wchar_t> *first;
  __int32 *i;
  __int32 *v13;
  std::basic_regex<wchar_t> *v14;
  std::__owns_one_state<wchar_t> *v15;
  std::__node<wchar_t> *v16;
  std::__owns_one_state<wchar_t> *v17;
  std::__node<wchar_t> *v18;

  end = a1->__end_;
  v7 = wmemchr(__s, 10, ((char *)a3 - (char *)__s) >> 2);
  if (v7)
    v8 = (std::basic_regex<wchar_t> *)v7;
  else
    v8 = a3;
  if (v8 == (std::basic_regex<wchar_t> *)__s)
  {
    v9 = (std::__node<wchar_t> *)operator new();
    v10 = a1->__end_;
    first = v10->__first_;
    v9[1].__vftable = (std::__node<wchar_t>_vtbl *)first;
    v10->__first_ = v9;
    a1->__end_ = (std::__owns_one_state<wchar_t> *)a1->__end_->__first_;
  }
  else
  {
    std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__parse_extended_reg_exp<std::__wrap_iter<wchar_t const*>>(a1, (std::basic_regex<wchar_t> *)__s, v8);
  }
  for (i = (__int32 *)v8 + (v8 != a3); i != (__int32 *)a3; i = (__int32 *)v14 + (v14 != a3))
  {
    v13 = wmemchr(i, 10, ((char *)a3 - (char *)i) >> 2);
    if (v13)
      v14 = (std::basic_regex<wchar_t> *)v13;
    else
      v14 = a3;
    v15 = a1->__end_;
    if (v14 == (std::basic_regex<wchar_t> *)i)
    {
      v16 = (std::__node<wchar_t> *)operator new();
      v17 = a1->__end_;
      v18 = v17->__first_;
      v16[1].__vftable = (std::__node<wchar_t>_vtbl *)v18;
      v17->__first_ = v16;
      a1->__end_ = (std::__owns_one_state<wchar_t> *)a1->__end_->__first_;
    }
    else
    {
      std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__parse_extended_reg_exp<std::__wrap_iter<wchar_t const*>>(a1, (std::basic_regex<wchar_t> *)i, v14);
    }
    std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__push_alternation(a1, end, v15);
  }
  return a3;
}

int *std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__parse_alternative<std::__wrap_iter<wchar_t const*>>(std::basic_regex<wchar_t> *a1, int *a2, int *a3)
{
  int *v5;

  do
  {
    v5 = a2;
    a2 = std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__parse_term<std::__wrap_iter<wchar_t const*>>(a1, a2, a3);
  }
  while (v5 != a2);
  return v5;
}

int *std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__parse_term<std::__wrap_iter<wchar_t const*>>(std::basic_regex<wchar_t> *a1, int *a2, int *a3)
{
  int *result;
  std::__owns_one_state<wchar_t> *end;
  unsigned int marked_count;
  int *v9;

  result = std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__parse_assertion<std::__wrap_iter<wchar_t const*>>(a1, a2, a3);
  if (result == a2)
  {
    end = a1->__end_;
    marked_count = a1->__marked_count_;
    v9 = std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__parse_atom<std::__wrap_iter<wchar_t const*>>(a1, a2, a3);
    result = a2;
    if (v9 != a2)
      return (int *)std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__parse_ERE_dupl_symbol<std::__wrap_iter<wchar_t const*>>((uint64_t)a1, v9, (unsigned int *)a3, end, marked_count + 1, a1->__marked_count_ + 1);
  }
  return result;
}

int *std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__parse_assertion<std::__wrap_iter<wchar_t const*>>(std::basic_regex<wchar_t> *this, int *a2, int *a3)
{
  int *v3;
  int v6;
  int v7;
  int *v8;
  unsigned int v9;
  uint64_t v10;
  BOOL v11;
  std::__owns_one_state<wchar_t> *end;
  std::__node<wchar_t> *first;
  char *v14;
  int v16;
  BOOL v17;
  unsigned int marked_count;
  std::basic_regex<wchar_t> v19;

  v3 = a2;
  if (a2 == a3)
    return v3;
  v6 = *a2;
  if (*a2 <= 91)
  {
    if (v6 != 36)
    {
      if (v6 == 40 && a2 + 1 != a3 && a2[1] == 63 && a2 + 2 != a3)
      {
        v7 = a2[2];
        if (v7 == 33)
        {
          std::regex_traits<wchar_t>::regex_traits(&v19.__traits_);
          memset(&v19.__flags_, 0, 40);
          v19.__flags_ = this->__flags_;
          v8 = (int *)std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__parse<std::__wrap_iter<wchar_t const*>>(&v19, v3 + 3, a3);
          marked_count = v19.__marked_count_;
          std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__push_lookahead(this, &v19, 1, this->__marked_count_);
          this->__marked_count_ += marked_count;
          if (v8 == a3 || *v8 != 41)
            std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>();
          goto LABEL_27;
        }
        if (v7 == 61)
        {
          std::regex_traits<wchar_t>::regex_traits(&v19.__traits_);
          memset(&v19.__flags_, 0, 40);
          v19.__flags_ = this->__flags_;
          v8 = (int *)std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__parse<std::__wrap_iter<wchar_t const*>>(&v19, v3 + 3, a3);
          v9 = v19.__marked_count_;
          std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__push_lookahead(this, &v19, 0, this->__marked_count_);
          this->__marked_count_ += v9;
          if (v8 == a3 || *v8 != 41)
            std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>();
LABEL_27:
          v3 = v8 + 1;
          std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&v19.__start_);
          std::locale::~locale(&v19.__traits_.__loc_);
          return v3;
        }
      }
      return v3;
    }
    v10 = operator new();
    v11 = (this->__flags_ & 0x5F0) == 1024;
    end = this->__end_;
    first = end->__first_;
LABEL_17:
    *(_QWORD *)v10 = v14 + 16;
    *(_QWORD *)(v10 + 8) = first;
    *(_BYTE *)(v10 + 16) = v11;
    end->__first_ = (std::__node<wchar_t> *)v10;
    this->__end_ = (std::__owns_one_state<wchar_t> *)this->__end_->__first_;
    return ++v3;
  }
  if (v6 != 92)
  {
    if (v6 != 94)
      return v3;
    v10 = operator new();
    v11 = (this->__flags_ & 0x5F0) == 1024;
    end = this->__end_;
    first = end->__first_;
    goto LABEL_17;
  }
  if (a2 + 1 != a3)
  {
    v16 = a2[1];
    if (v16 == 66)
    {
      v17 = 1;
    }
    else
    {
      if (v16 != 98)
        return v3;
      v17 = 0;
    }
    std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__push_word_boundary(this, v17);
    v3 += 2;
  }
  return v3;
}

void sub_1AD8B5804(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::locale a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&a14);
  std::locale::~locale(&a9);
  _Unwind_Resume(a1);
}

int *std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__parse_atom<std::__wrap_iter<wchar_t const*>>(std::basic_regex<wchar_t> *this, std::basic_regex<wchar_t>::value_type *a2, std::basic_regex<wchar_t>::value_type *a3)
{
  std::basic_regex<wchar_t>::value_type *v3;
  int v6;
  std::__node<wchar_t> *v7;
  std::__owns_one_state<wchar_t> *end;
  std::__node<wchar_t> *first;
  _DWORD *v11;
  std::basic_regex<wchar_t>::value_type *v12;
  unsigned int marked_count;
  std::basic_regex<wchar_t>::value_type *v14;
  std::basic_regex<wchar_t>::value_type *v15;

  v3 = a2;
  if (a2 != a3)
  {
    v6 = *a2;
    if (*a2 <= 62)
    {
      if (v6 == 40)
      {
        v11 = a2 + 1;
        if (a2 + 1 != a3)
        {
          if (a2 + 2 != a3 && *v11 == 63 && a2[2] == 58)
          {
            ++this->__open_count_;
            v12 = (std::basic_regex<wchar_t>::value_type *)std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__parse_ecma_exp<std::__wrap_iter<wchar_t const*>>(this, a2 + 3, a3);
            if (v12 != a3 && *v12 == 41)
            {
              --this->__open_count_;
              return v12 + 1;
            }
          }
          else
          {
            std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__push_begin_marked_subexpression(this);
            marked_count = this->__marked_count_;
            ++this->__open_count_;
            v14 = (std::basic_regex<wchar_t>::value_type *)std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__parse_ecma_exp<std::__wrap_iter<wchar_t const*>>(this, v11, a3);
            if (v14 != a3)
            {
              v15 = v14;
              if (*v14 == 41)
              {
                std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__push_end_marked_subexpression(this, marked_count);
                --this->__open_count_;
                return v15 + 1;
              }
            }
          }
        }
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>();
      }
      if (v6 == 46)
      {
        v7 = (std::__node<wchar_t> *)operator new();
        end = this->__end_;
        first = end->__first_;
        v7->__vftable = (std::__node<wchar_t>_vtbl *)&unk_1E5D46758;
        v7[1].__vftable = (std::__node<wchar_t>_vtbl *)first;
        end->__first_ = v7;
        this->__end_ = (std::__owns_one_state<wchar_t> *)this->__end_->__first_;
        return ++v3;
      }
      if ((v6 - 42) >= 2)
        return std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__parse_pattern_character<wchar_t const*>(this, a2, a3);
LABEL_28:
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)11>();
    }
    if (v6 > 91)
    {
      if (v6 == 92)
        return std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__parse_atom_escape<std::__wrap_iter<wchar_t const*>>(this, a2, a3);
      if (v6 == 123)
        goto LABEL_28;
    }
    else
    {
      if (v6 == 91)
        return std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__parse_bracket_expression<std::__wrap_iter<wchar_t const*>>((uint64_t)this, a2, a3);
      if (v6 == 63)
        goto LABEL_28;
    }
    return std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__parse_pattern_character<wchar_t const*>(this, a2, a3);
  }
  return v3;
}

unsigned int *std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__parse_ERE_dupl_symbol<std::__wrap_iter<wchar_t const*>>(uint64_t a1, int *a2, unsigned int *a3, std::__owns_one_state<wchar_t> *__s, size_t a5, size_t a6)
{
  unsigned int v6;
  unsigned int v7;
  uint64_t v10;
  int v11;
  int v12;
  unsigned int *v13;
  size_t v14;
  unsigned int *v15;
  unsigned int *v16;
  size_t v17;
  BOOL v18;
  BOOL v19;
  std::__owns_one_state<wchar_t> *v20;
  BOOL v21;
  unsigned int *v22;
  unsigned int *v24;
  unsigned int v25;
  int v26;
  size_t __max;

  if (a2 == (int *)a3)
    return (unsigned int *)a2;
  v6 = a6;
  v7 = a5;
  v10 = a1;
  v11 = *(_DWORD *)(a1 + 24) & 0x1F0;
  v12 = *a2;
  if (*a2 > 62)
  {
    if (v12 == 63)
    {
      v13 = (unsigned int *)(a2 + 1);
      if (v11)
        v19 = 1;
      else
        v19 = v13 == a3;
      if (!v19 && *v13 == 63)
      {
        v13 = (unsigned int *)(a2 + 2);
        a5 = a5;
        a6 = a6;
        v14 = 0;
        v17 = 1;
        goto LABEL_33;
      }
      a5 = a5;
      a6 = a6;
      v14 = 0;
      v17 = 1;
      goto LABEL_45;
    }
    v13 = (unsigned int *)a2;
    if (v12 != 123)
      return v13;
    v15 = (unsigned int *)(a2 + 1);
    v16 = std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__parse_DUP_COUNT<wchar_t const*>(a1, (unsigned int *)a2 + 1, a3, (int *)&__max);
    if (v15 != v16)
    {
      if (v16 != a3)
      {
        if (*v16 != 44)
        {
          if (*v16 == 125)
          {
            v13 = v16 + 1;
            if (!v11 && v13 != a3 && *v13 == 63)
            {
              v13 = v16 + 2;
              v14 = (int)__max;
              a5 = v7;
              a6 = v6;
              a1 = v10;
              v17 = (int)__max;
LABEL_33:
              v20 = __s;
              v21 = 0;
LABEL_46:
              std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__push_loop((std::basic_regex<wchar_t> *)a1, v14, v17, v20, a5, a6, v21);
              return v13;
            }
            v14 = (int)__max;
            a5 = v7;
            a6 = v6;
            a1 = v10;
            v17 = (int)__max;
LABEL_45:
            v20 = __s;
            v21 = 1;
            goto LABEL_46;
          }
          goto LABEL_58;
        }
        v22 = v16 + 1;
        if (v16 + 1 == a3)
          goto LABEL_58;
        if (*v22 == 125)
        {
          v13 = v16 + 2;
          if (!v11 && v13 != a3 && *v13 == 63)
          {
            v13 = v16 + 3;
            v14 = (int)__max;
            a5 = v7;
            a6 = v6;
            a1 = v10;
            goto LABEL_26;
          }
          v14 = (int)__max;
          a5 = v7;
          a6 = v6;
          a1 = v10;
LABEL_36:
          v17 = -1;
          goto LABEL_45;
        }
        v26 = -1;
        v24 = std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__parse_DUP_COUNT<wchar_t const*>(v10, v22, a3, &v26);
        if (v22 != v24 && v24 != a3 && *v24 == 125)
        {
          v17 = v26;
          v14 = (int)__max;
          if (v26 >= (int)__max)
          {
            v13 = v24 + 1;
            v21 = 1;
            if (!v11 && v13 != a3)
            {
              v25 = v24[1];
              v21 = v25 != 63;
              if (v25 == 63)
                v13 = v24 + 2;
            }
            a5 = v7;
            a6 = v6;
            a1 = v10;
            v20 = __s;
            goto LABEL_46;
          }
          goto LABEL_58;
        }
      }
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)7>();
    }
LABEL_58:
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)8>();
  }
  if (v12 == 42)
  {
    v13 = (unsigned int *)(a2 + 1);
    if (v11)
      v18 = 1;
    else
      v18 = v13 == a3;
    if (!v18 && *v13 == 63)
    {
      v13 = (unsigned int *)(a2 + 2);
      a5 = a5;
      a6 = a6;
      v14 = 0;
      goto LABEL_26;
    }
    a5 = a5;
    a6 = a6;
    v14 = 0;
    goto LABEL_36;
  }
  v13 = (unsigned int *)a2;
  if (v12 == 43)
  {
    v13 = (unsigned int *)(a2 + 1);
    if (!v11 && v13 != a3 && *v13 == 63)
    {
      v13 = (unsigned int *)(a2 + 2);
      a5 = a5;
      a6 = a6;
      v14 = 1;
LABEL_26:
      v17 = -1;
      goto LABEL_33;
    }
    a5 = a5;
    a6 = a6;
    v14 = 1;
    goto LABEL_36;
  }
  return v13;
}

int *std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__parse_atom_escape<std::__wrap_iter<wchar_t const*>>(std::basic_regex<wchar_t> *a1, int *a2, int *a3)
{
  int *v5;
  int *result;

  if (a2 == a3 || *a2 != 92)
    return a2;
  v5 = a2 + 1;
  if (a2 + 1 == a3)
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)3>();
  result = std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__parse_decimal_escape<std::__wrap_iter<wchar_t const*>>(a1, a2 + 1, a3);
  if (v5 == result)
  {
    result = std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__parse_character_class_escape<wchar_t const*>(a1, a2 + 1, a3);
    if (v5 == result)
    {
      result = (int *)std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__parse_character_escape<std::__wrap_iter<wchar_t const*>>(a1, a2 + 1, a3, 0);
      if (v5 == result)
        return a2;
    }
  }
  return result;
}

int *std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__parse_bracket_expression<std::__wrap_iter<wchar_t const*>>(uint64_t a1, int *a2, int *a3)
{
  std::wstring::value_type *v5;
  std::__bracket_expression<wchar_t, std::regex_traits<wchar_t>> *started;
  uint64_t *v7;
  std::wstring::value_type *v8;

  if (a2 != a3 && *a2 == 91)
  {
    if (a2 + 1 == a3)
      goto LABEL_20;
    v5 = a2[1] == 94 ? a2 + 2 : a2 + 1;
    started = std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__start_matching_list((std::basic_regex<wchar_t> *)a1, a2[1] == 94);
    if (v5 == a3)
      goto LABEL_20;
    v7 = (uint64_t *)started;
    if ((*(_WORD *)(a1 + 24) & 0x1F0) != 0 && *v5 == 93)
    {
      std::__bracket_expression<wchar_t,std::regex_traits<wchar_t>>::__add_char[abi:ne180100]((uint64_t)started, 93);
      ++v5;
    }
    if (v5 == a3)
      goto LABEL_20;
    do
    {
      v8 = v5;
      v5 = std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__parse_expression_term<std::__wrap_iter<wchar_t const*>>(a1, v5, a3, v7);
    }
    while (v8 != v5);
    if (v8 == a3)
      goto LABEL_20;
    if (*v8 == 45)
    {
      std::__bracket_expression<wchar_t,std::regex_traits<wchar_t>>::__add_char[abi:ne180100]((uint64_t)v7, 45);
      ++v8;
    }
    if (v8 == a3 || *v8 != 93)
LABEL_20:
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)5>();
    return v8 + 1;
  }
  return a2;
}

int *std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__parse_decimal_escape<std::__wrap_iter<wchar_t const*>>(std::basic_regex<wchar_t> *a1, int *a2, int *a3)
{
  int *v3;
  int v4;
  unsigned __int32 v5;
  int v6;

  v3 = a2;
  if (a2 != a3)
  {
    v4 = *a2;
    v5 = *a2 - 48;
    if (v4 == 48)
    {
      std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__push_char(a1, v5);
      return ++v3;
    }
    if ((v4 - 49) > 8)
      return v3;
    if (++v3 == a3)
    {
      v3 = a3;
    }
    else
    {
      while (1)
      {
        v6 = *v3;
        if ((*v3 - 48) > 9)
          break;
        if (v5 >= 0x19999999)
          goto LABEL_16;
        ++v3;
        v5 = v6 + 10 * v5 - 48;
        if (v3 == a3)
        {
          v3 = a3;
          break;
        }
      }
      if (!v5)
        goto LABEL_16;
    }
    if (v5 <= a1->__marked_count_)
    {
      std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__push_back_ref(a1, v5);
      return v3;
    }
LABEL_16:
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)4>();
  }
  return v3;
}

unsigned int *std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__parse_character_escape<std::__wrap_iter<wchar_t const*>>(std::basic_regex<wchar_t> *this, int *a2, int *a3, std::wstring *a4)
{
  std::wstring::value_type *v4;
  std::basic_regex<wchar_t> *v7;
  int v8;
  int v9;
  std::wstring *v10;
  std::wstring::value_type v11;
  int v12;
  std::wstring::value_type v13;
  int v14;
  unsigned __int8 v15;
  int v16;
  int v17;
  int v18;
  int v19;
  unsigned __int8 v20;
  int v21;
  int v22;
  int v23;
  std::wstring::value_type v24;

  v4 = a2;
  if (a2 == a3)
    return (unsigned int *)v4;
  v7 = this;
  v8 = *a2;
  if (*a2 > 101)
  {
    v9 = 0;
    switch(v8)
    {
      case 'n':
        if (a4)
        {
          v10 = a4;
          v11 = 10;
          goto LABEL_52;
        }
        v11 = 10;
        goto LABEL_64;
      case 'o':
      case 'p':
      case 'q':
      case 's':
      case 'w':
        goto LABEL_49;
      case 'r':
        if (a4)
        {
          v10 = a4;
          v11 = 13;
          goto LABEL_52;
        }
        v11 = 13;
        goto LABEL_64;
      case 't':
        if (a4)
        {
          v10 = a4;
          v11 = 9;
          goto LABEL_52;
        }
        v11 = 9;
        goto LABEL_64;
      case 'u':
        if (a2 + 1 == a3)
          goto LABEL_67;
        v14 = ((uint64_t (*)(const std::ctype<wchar_t> *, _QWORD, _QWORD))this->__traits_.__ct_->do_narrow)(this->__traits_.__ct_, a2[1], 0);
        v15 = v14;
        v16 = -48;
        if ((v14 & 0xFFFFFFF8) == 0x30 || (v14 & 0xFFFFFFFE) == 0x38)
          goto LABEL_28;
        v15 = v14 | 0x20;
        if (((v14 | 0x20) - 97) >= 6u)
          goto LABEL_67;
        v16 = -87;
LABEL_28:
        v4 += 2;
        if (v4 == a3)
          goto LABEL_67;
        v17 = ((uint64_t (*)(const std::ctype<wchar_t> *, _QWORD, _QWORD))v7->__traits_.__ct_->do_narrow)(v7->__traits_.__ct_, *v4, 0);
        v18 = -48;
        if ((v17 & 0xFFFFFFF8) == 0x30 || (v17 & 0xFFFFFFFE) == 0x38)
          goto LABEL_33;
        LOBYTE(v17) = v17 | 0x20;
        if ((v17 - 97) >= 6u)
          goto LABEL_67;
        v18 = -87;
LABEL_33:
        v9 = ((v16 + v15) << 8) + 16 * (v18 + v17);
LABEL_34:
        if (v4 + 1 == a3)
          goto LABEL_67;
        v19 = ((uint64_t (*)(const std::ctype<wchar_t> *, _QWORD, _QWORD))v7->__traits_.__ct_->do_narrow)(v7->__traits_.__ct_, v4[1], 0);
        v20 = v19;
        v21 = -48;
        if ((v19 & 0xFFFFFFF8) == 0x30 || (v19 & 0xFFFFFFFE) == 0x38)
          goto LABEL_39;
        v20 = v19 | 0x20;
        if (((v19 | 0x20) - 97) >= 6u)
          goto LABEL_67;
        v21 = -87;
LABEL_39:
        if (v4 + 2 == a3)
          goto LABEL_67;
        v22 = ((uint64_t (*)(const std::ctype<wchar_t> *, _QWORD, _QWORD))v7->__traits_.__ct_->do_narrow)(v7->__traits_.__ct_, v4[2], 0);
        v23 = -48;
        if ((v22 & 0xFFFFFFF8) == 0x30 || (v22 & 0xFFFFFFFE) == 0x38)
          goto LABEL_44;
        LOBYTE(v22) = v22 | 0x20;
        if ((v22 - 97) >= 6u)
          goto LABEL_67;
        v23 = -87;
LABEL_44:
        v24 = v23 + v22 + 16 * (v21 + v20 + v9);
        if (a4)
          std::wstring::operator=(a4, v24);
        else
          std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__push_char(v7, v24);
        v4 += 3;
        return (unsigned int *)v4;
      case 'v':
        if (a4)
        {
          v10 = a4;
          v11 = 11;
          goto LABEL_52;
        }
        v11 = 11;
        goto LABEL_64;
      case 'x':
        goto LABEL_34;
      default:
        if (v8 != 102)
          goto LABEL_49;
        if (a4)
        {
          v10 = a4;
          v11 = 12;
          goto LABEL_52;
        }
        v11 = 12;
        break;
    }
    goto LABEL_64;
  }
  if (v8 == 48)
  {
    if (a4)
    {
      v10 = a4;
      v11 = 0;
LABEL_52:
      std::wstring::operator=(v10, v11);
      return (unsigned int *)++v4;
    }
    v11 = 0;
LABEL_64:
    std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__push_char(this, v11);
    return (unsigned int *)++v4;
  }
  if (v8 != 99)
  {
    if (v8 == 95)
      goto LABEL_67;
LABEL_49:
    if ((((uint64_t (*)(const std::ctype<wchar_t> *, uint64_t))this->__traits_.__ct_->do_is)(this->__traits_.__ct_, 1280) & 1) != 0)LABEL_67:std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)3>();
    v11 = *v4;
    if (a4)
    {
      v10 = a4;
      goto LABEL_52;
    }
    this = v7;
    goto LABEL_64;
  }
  if (a2 + 1 == a3)
    goto LABEL_67;
  v12 = a2[1];
  if (v12 < 65 || v12 >= 0x5B && (v12 - 97) > 0x19)
    goto LABEL_67;
  v13 = a2[1] & 0x1F;
  if (a4)
    std::wstring::operator=(a4, v13);
  else
    std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__push_char(this, v13);
  v4 += 2;
  return (unsigned int *)v4;
}

std::wstring::value_type *std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__parse_expression_term<std::__wrap_iter<wchar_t const*>>(uint64_t a1, int *a2, int *a3, uint64_t *a4)
{
  std::wstring::value_type *v4;
  std::wstring::value_type v5;
  uint64_t v6;
  int v9;
  int *v10;
  int v11;
  std::wstring::value_type v12;
  std::wstring::value_type *v13;
  int *v14;
  std::wstring *v15;
  std::wstring::value_type *v16;
  std::wstring::value_type *v17;
  int *v18;
  std::wstring::size_type size;
  char v20;
  std::wstring::value_type v22;
  std::wstring __p;
  std::wstring v24;
  std::wstring v25;
  std::wstring v26;

  v4 = a2;
  if (a2 == a3)
    return v4;
  v5 = *a2;
  if (*a2 == 93)
    return v4;
  v6 = (uint64_t)a4;
  memset(&v26, 0, sizeof(v26));
  if (a2 + 1 == a3 || v5 != 91)
  {
LABEL_9:
    v11 = *(_DWORD *)(a1 + 24) & 0x1F0;
    goto LABEL_10;
  }
  v9 = a2[1];
  if (v9 != 46)
  {
    if (v9 == 58)
    {
      v10 = std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__parse_character_class<std::__wrap_iter<wchar_t const*>>(a1, a2 + 2, a3, (uint64_t)a4);
      goto LABEL_38;
    }
    if (v9 == 61)
    {
      v10 = std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__parse_equivalence_class<std::__wrap_iter<wchar_t const*>>(a1, a2 + 2, a3, a4);
LABEL_38:
      v6 = (uint64_t)v10;
      v20 = 0;
      goto LABEL_42;
    }
    goto LABEL_9;
  }
  v18 = std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__parse_collating_symbol<std::__wrap_iter<wchar_t const*>>(a1, a2 + 2, a3, (uint64_t)&v26);
  v4 = v18;
  v11 = *(_DWORD *)(a1 + 24) & 0x1F0;
  size = HIBYTE(v26.__r_.__value_.__r.__words[2]);
  if ((v26.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = v26.__r_.__value_.__l.__size_;
  v14 = v18;
  if (!size)
  {
LABEL_10:
    if ((v11 | 0x40) == 0x40)
    {
      v12 = *v4;
      if (*v4 == 92)
      {
        v13 = v4 + 1;
        if (v11)
        {
          v14 = std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__parse_awk_escape<std::__wrap_iter<wchar_t const*>>((std::basic_regex<wchar_t> *)a1, v13, a3, &v26);
        }
        else
        {
          v14 = (int *)std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__parse_class_escape<std::__wrap_iter<wchar_t const*>>((std::basic_regex<wchar_t> *)a1, v13, a3, &v26, v6);
          v11 = 0;
        }
        goto LABEL_16;
      }
    }
    else
    {
      v12 = *v4;
    }
    std::wstring::operator=(&v26, v12);
    v14 = v4 + 1;
  }
LABEL_16:
  if (v14 == a3 || *v14 == 93 || (v16 = v14 + 1, v14 + 1 == a3) || *v14 != 45 || *v16 == 93)
  {
    if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
    {
      if (v26.__r_.__value_.__l.__size_)
      {
        if (v26.__r_.__value_.__l.__size_ != 1)
        {
          v15 = (std::wstring *)v26.__r_.__value_.__r.__words[0];
LABEL_40:
          std::__bracket_expression<wchar_t,std::regex_traits<wchar_t>>::__add_digraph[abi:ne180100](v6, v15->__r_.__value_.__s.__data_[0], v15->__r_.__value_.__s.__data_[1]);
          goto LABEL_41;
        }
        v15 = (std::wstring *)v26.__r_.__value_.__r.__words[0];
        goto LABEL_25;
      }
    }
    else if (*((_BYTE *)&v26.__r_.__value_.__s + 23))
    {
      v15 = &v26;
      if (HIBYTE(v26.__r_.__value_.__r.__words[2]) != 1)
        goto LABEL_40;
LABEL_25:
      std::__bracket_expression<wchar_t,std::regex_traits<wchar_t>>::__add_char[abi:ne180100](v6, v15->__r_.__value_.__s.__data_[0]);
    }
LABEL_41:
    v20 = 1;
    v4 = v14;
    goto LABEL_42;
  }
  memset(&v25, 0, sizeof(v25));
  v4 = v14 + 2;
  if (v14 + 2 != a3 && *v16 == 91 && *v4 == 46)
  {
    v17 = std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__parse_collating_symbol<std::__wrap_iter<wchar_t const*>>(a1, v14 + 3, a3, (uint64_t)&v25);
LABEL_55:
    v4 = v17;
    goto LABEL_56;
  }
  if ((v11 | 0x40) == 0x40)
  {
    v22 = *v16;
    if (*v16 == 92)
    {
      if (v11)
        v17 = std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__parse_awk_escape<std::__wrap_iter<wchar_t const*>>((std::basic_regex<wchar_t> *)a1, v14 + 2, a3, &v25);
      else
        v17 = (std::wstring::value_type *)std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__parse_class_escape<std::__wrap_iter<wchar_t const*>>((std::basic_regex<wchar_t> *)a1, v14 + 2, a3, &v25, v6);
      goto LABEL_55;
    }
  }
  else
  {
    v22 = *v16;
  }
  std::wstring::operator=(&v25, v22);
LABEL_56:
  v24 = v26;
  memset(&v26, 0, sizeof(v26));
  __p = v25;
  memset(&v25, 0, sizeof(v25));
  std::__bracket_expression<wchar_t,std::regex_traits<wchar_t>>::__add_range[abi:ne180100](v6, (unsigned int *)&v24, (unsigned int *)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v24.__r_.__value_.__l.__data_);
  if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v25.__r_.__value_.__l.__data_);
  v20 = 1;
LABEL_42:
  if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v26.__r_.__value_.__l.__data_);
  if ((v20 & 1) != 0)
    return v4;
  return (std::wstring::value_type *)v6;
}

void sub_1AD8B6640(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  uint64_t v28;

  if (a28 < 0)
    operator delete(__p);
  if (*(char *)(v28 - 49) < 0)
    operator delete(*(void **)(v28 - 72));
  _Unwind_Resume(exception_object);
}

int *std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__parse_equivalence_class<std::__wrap_iter<wchar_t const*>>(uint64_t a1, int *a2, int *a3, uint64_t *a4)
{
  uint64_t v6;
  int *v7;
  int *v8;
  int *i;
  int v10;
  uint64_t v11;
  int *v12;
  unint64_t v13;
  uint64_t v14;
  unsigned int *v15;
  unsigned int *v16;
  void *__p[2];
  unsigned __int8 v19;
  void *v20;
  uint64_t v21;
  unsigned __int8 v22;

  if ((char *)a3 - (char *)a2 < 8 || a3 - 1 == a2)
    goto LABEL_33;
  v6 = 4 * ((unint64_t)((char *)a3 - (char *)a2) >> 2) - 8;
  v7 = a2;
  v8 = a2;
  for (i = a2; ; v8 = i)
  {
    v10 = *i++;
    if (v10 == 61 && v8[1] == 93)
      break;
    if (!v6)
      goto LABEL_33;
    ++v7;
    v6 -= 4;
  }
  if (v8 == a3)
LABEL_33:
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)5>();
  std::regex_traits<wchar_t>::__lookup_collatename<wchar_t *>(a1, a2, v7, (uint64_t)&v20);
  if (((char)v22 & 0x80000000) == 0)
  {
    v11 = v22;
    if (v22)
    {
      v12 = (int *)&v20;
      goto LABEL_14;
    }
LABEL_34:
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)1>();
  }
  v11 = v21;
  if (!v21)
    goto LABEL_34;
  v12 = (int *)v20;
LABEL_14:
  std::regex_traits<wchar_t>::__transform_primary<wchar_t *>(a1, v12, &v12[v11], (uint64_t)__p);
  v13 = v19;
  if ((v19 & 0x80u) != 0)
    v13 = (unint64_t)__p[1];
  if (v13)
  {
    std::__bracket_expression<wchar_t,std::regex_traits<wchar_t>>::__add_equivalence[abi:ne180100](a4, (__int128 *)__p);
  }
  else
  {
    v14 = v22;
    if ((v22 & 0x80u) != 0)
      v14 = v21;
    if (v14 == 2)
    {
      v16 = (unsigned int *)&v20;
      if ((v22 & 0x80u) != 0)
        v16 = (unsigned int *)v20;
      std::__bracket_expression<wchar_t,std::regex_traits<wchar_t>>::__add_digraph[abi:ne180100]((uint64_t)a4, *v16, v16[1]);
    }
    else
    {
      if (v14 != 1)
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)1>();
      v15 = (unsigned int *)&v20;
      if ((v22 & 0x80u) != 0)
        v15 = (unsigned int *)v20;
      std::__bracket_expression<wchar_t,std::regex_traits<wchar_t>>::__add_char[abi:ne180100]((uint64_t)a4, *v15);
    }
  }
  if ((char)v19 < 0)
    operator delete(__p[0]);
  if ((char)v22 < 0)
    operator delete(v20);
  return v7 + 2;
}

void sub_1AD8B685C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

int *std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__parse_character_class<std::__wrap_iter<wchar_t const*>>(uint64_t a1, int *a2, int *a3, uint64_t a4)
{
  uint64_t v5;
  int *v6;
  int *v7;
  int *i;
  int v9;
  int v10;

  if ((char *)a3 - (char *)a2 < 8 || a3 - 1 == a2)
    goto LABEL_11;
  v5 = 4 * ((unint64_t)((char *)a3 - (char *)a2) >> 2) - 8;
  v6 = a2;
  v7 = a2;
  for (i = a2; ; v7 = i)
  {
    v9 = *i++;
    if (v9 == 58 && v7[1] == 93)
      break;
    if (!v5)
      goto LABEL_11;
    ++v6;
    v5 -= 4;
  }
  if (v7 == a3)
LABEL_11:
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)5>();
  v10 = std::regex_traits<wchar_t>::__lookup_classname<wchar_t const*>(a1, a2, v6, *(_DWORD *)(a1 + 24) & 1);
  if (!v10)
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)2>();
  *(_DWORD *)(a4 + 160) |= v10;
  return v6 + 2;
}

int *std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__parse_collating_symbol<std::__wrap_iter<wchar_t const*>>(uint64_t a1, int *a2, int *a3, uint64_t a4)
{
  uint64_t v5;
  int *v6;
  int *v7;
  int *i;
  int v9;
  unint64_t v10;
  unint64_t v11;
  __int128 v13;
  unint64_t v14;

  if ((char *)a3 - (char *)a2 < 8 || a3 - 1 == a2)
    goto LABEL_15;
  v5 = 4 * ((unint64_t)((char *)a3 - (char *)a2) >> 2) - 8;
  v6 = a2;
  v7 = a2;
  for (i = a2; ; v7 = i)
  {
    v9 = *i++;
    if (v9 == 46 && v7[1] == 93)
      break;
    if (!v5)
      goto LABEL_15;
    ++v6;
    v5 -= 4;
  }
  if (v7 == a3)
LABEL_15:
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)5>();
  std::regex_traits<wchar_t>::__lookup_collatename<wchar_t *>(a1, a2, v6, (uint64_t)&v13);
  if (*(char *)(a4 + 23) < 0)
    operator delete(*(void **)a4);
  *(_OWORD *)a4 = v13;
  v10 = v14;
  *(_QWORD *)(a4 + 16) = v14;
  v11 = HIBYTE(v10);
  if ((v11 & 0x80u) != 0)
    v11 = *(_QWORD *)(a4 + 8);
  if (v11 - 1 >= 2)
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)1>();
  return v6 + 2;
}

unsigned int *std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__parse_class_escape<std::__wrap_iter<wchar_t const*>>(std::basic_regex<wchar_t> *a1, int *a2, int *a3, std::wstring *this, uint64_t a5)
{
  int v6;
  int v7;
  int v8;
  std::wstring *v9;
  std::wstring::value_type v10;

  if (a2 == a3)
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)3>();
  v6 = *a2;
  if (*a2 > 97)
  {
    if (v6 > 114)
    {
      if (v6 != 115)
      {
        if (v6 != 119)
          return std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__parse_character_escape<std::__wrap_iter<wchar_t const*>>(a1, a2, a3, this);
        *(_DWORD *)(a5 + 160) |= 0x500u;
        std::__bracket_expression<wchar_t,std::regex_traits<wchar_t>>::__add_char[abi:ne180100](a5, 95);
        return (unsigned int *)(a2 + 1);
      }
      v8 = *(_DWORD *)(a5 + 160) | 0x4000;
    }
    else
    {
      if (v6 == 98)
      {
        v9 = this;
        v10 = 8;
LABEL_19:
        std::wstring::operator=(v9, v10);
        return (unsigned int *)(a2 + 1);
      }
      if (v6 != 100)
        return std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__parse_character_escape<std::__wrap_iter<wchar_t const*>>(a1, a2, a3, this);
      v8 = *(_DWORD *)(a5 + 160) | 0x400;
    }
    *(_DWORD *)(a5 + 160) = v8;
    return (unsigned int *)(a2 + 1);
  }
  if (v6 <= 82)
  {
    if (v6)
    {
      if (v6 == 68)
      {
        v7 = *(_DWORD *)(a5 + 164) | 0x400;
LABEL_21:
        *(_DWORD *)(a5 + 164) = v7;
        return (unsigned int *)(a2 + 1);
      }
      return std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__parse_character_escape<std::__wrap_iter<wchar_t const*>>(a1, a2, a3, this);
    }
    v9 = this;
    v10 = 0;
    goto LABEL_19;
  }
  if (v6 == 83)
  {
    v7 = *(_DWORD *)(a5 + 164) | 0x4000;
    goto LABEL_21;
  }
  if (v6 == 87)
  {
    *(_DWORD *)(a5 + 164) |= 0x500u;
    std::__bracket_expression<wchar_t,std::regex_traits<wchar_t>>::__add_neg_char[abi:ne180100](a5, 95);
    return (unsigned int *)(a2 + 1);
  }
  return std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__parse_character_escape<std::__wrap_iter<wchar_t const*>>(a1, a2, a3, this);
}

std::wstring::value_type *std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__parse_awk_escape<std::__wrap_iter<wchar_t const*>>(std::basic_regex<wchar_t> *a1, std::wstring::value_type *a2, std::wstring::value_type *a3, std::wstring *this)
{
  std::wstring::value_type v5;
  std::wstring *v6;
  std::wstring::value_type v7;
  std::wstring::value_type *v8;
  _DWORD *v9;
  unsigned int v10;

  if (a2 == a3)
LABEL_52:
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)3>();
  v5 = *a2;
  if (v5 > 97)
  {
    switch(v5)
    {
      case 'n':
        if (this)
        {
          v6 = this;
          v5 = 10;
          goto LABEL_16;
        }
        v5 = 10;
        goto LABEL_49;
      case 'o':
      case 'p':
      case 'q':
      case 's':
      case 'u':
        goto LABEL_21;
      case 'r':
        if (this)
        {
          v6 = this;
          v5 = 13;
          goto LABEL_16;
        }
        v5 = 13;
        goto LABEL_49;
      case 't':
        if (this)
        {
          v6 = this;
          v5 = 9;
          goto LABEL_16;
        }
        v5 = 9;
        goto LABEL_49;
      case 'v':
        if (this)
        {
          v6 = this;
          v5 = 11;
          goto LABEL_16;
        }
        v5 = 11;
        goto LABEL_49;
      default:
        if (v5 == 98)
        {
          if (this)
          {
            v6 = this;
            v5 = 8;
            goto LABEL_16;
          }
          v5 = 8;
        }
        else
        {
          if (v5 != 102)
            goto LABEL_21;
          if (this)
          {
            v6 = this;
            v5 = 12;
            goto LABEL_16;
          }
          v5 = 12;
        }
        break;
    }
    goto LABEL_49;
  }
  if (v5 > 91)
  {
    if (v5 != 92)
    {
      if (v5 != 97)
        goto LABEL_21;
      if (this)
      {
        v6 = this;
        v5 = 7;
LABEL_16:
        std::wstring::operator=(v6, v5);
        return a2 + 1;
      }
      v5 = 7;
LABEL_49:
      std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__push_char(a1, v5);
      return a2 + 1;
    }
LABEL_14:
    if (this)
    {
      v6 = this;
      goto LABEL_16;
    }
    goto LABEL_49;
  }
  if (v5 == 34 || v5 == 47)
    goto LABEL_14;
LABEL_21:
  if ((v5 & 0xFFFFFFF8) != 0x30)
    goto LABEL_52;
  v7 = v5 - 48;
  v8 = a2 + 1;
  if (a2 + 1 != a3)
  {
    if ((*v8 & 0xFFFFFFF8) != 0x30)
      goto LABEL_39;
    v7 = *v8 + 8 * v7 - 48;
    v9 = a2 + 2;
    if (a2 + 2 != a3)
    {
      v10 = *v9 & 0xFFFFFFF8;
      if (v10 == 48)
        v8 = a2 + 3;
      else
        v8 = a2 + 2;
      if (v10 == 48)
        v7 = *v9 + 8 * v7 - 48;
      goto LABEL_39;
    }
  }
  v8 = a3;
LABEL_39:
  if (this)
    std::wstring::operator=(this, v7);
  else
    std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__push_char(a1, v7);
  return v8;
}

uint64_t std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__parse_RE_expression<std::__wrap_iter<wchar_t const*>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;

  do
  {
    v5 = a2;
    a2 = std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__parse_simple_RE<std::__wrap_iter<wchar_t const*>>(a1, a2, a3);
  }
  while (v5 != a2);
  return v5;
}

unsigned int *std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__parse_simple_RE<std::__wrap_iter<wchar_t const*>>(std::basic_regex<wchar_t> *a1, int *a2, int *a3)
{
  std::__owns_one_state<wchar_t> *end;
  unsigned int marked_count;
  int *v8;

  if (a2 == a3)
    return (unsigned int *)a2;
  end = a1->__end_;
  marked_count = a1->__marked_count_;
  v8 = std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__parse_nondupl_RE<std::__wrap_iter<wchar_t const*>>(a1, a2, a3);
  if (v8 == a2)
    return (unsigned int *)a2;
  else
    return std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__parse_RE_dupl_symbol<std::__wrap_iter<wchar_t const*>>(a1, (unsigned int *)v8, (unsigned int *)a3, end, marked_count + 1, a1->__marked_count_ + 1);
}

int *std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__parse_nondupl_RE<std::__wrap_iter<wchar_t const*>>(std::basic_regex<wchar_t> *a1, int *a2, int *a3)
{
  int *v6;
  int *v7;
  uint64_t v9;
  unsigned int marked_count;
  int *v11;
  _BOOL4 v12;
  uint64_t v13;

  v6 = std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__parse_one_char_or_coll_elem_RE<std::__wrap_iter<wchar_t const*>>(a1, a2, a3);
  v7 = v6;
  if (a2 == v6 && a2 != a3 && a2 + 1 != a3)
  {
    v9 = (uint64_t)v6;
    if (*a2 == 92)
      v9 = (uint64_t)&a2[2 * (a2[1] == 40)];
    if ((int *)v9 == a2)
    {
      if (*a2 == 92)
      {
        v12 = std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__test_back_ref(a1, a2[1]);
        v13 = 2;
        if (!v12)
          v13 = 0;
        return &a2[v13];
      }
    }
    else
    {
      std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__push_begin_marked_subexpression(a1);
      marked_count = a1->__marked_count_;
      v11 = (int *)std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__parse_RE_expression<std::__wrap_iter<wchar_t const*>>((uint64_t)a1, v9, (uint64_t)a3);
      if (v11 == a3 || v11 + 1 == a3 || *v11 != 92 || v11[1] != 41)
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>();
      v7 = v11 + 2;
      std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__push_end_marked_subexpression(a1, marked_count);
    }
  }
  return v7;
}

unsigned int *std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__parse_RE_dupl_symbol<std::__wrap_iter<wchar_t const*>>(std::basic_regex<wchar_t> *this, unsigned int *a2, unsigned int *a3, std::__owns_one_state<wchar_t> *__s, size_t __mexp_begin, size_t __mexp_end)
{
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int *v12;
  unsigned int *v13;
  unsigned int *v14;
  unsigned int *v15;
  size_t v16;
  size_t v17;
  size_t v18;
  size_t v19;
  std::basic_regex<wchar_t> *v20;
  int v22;
  int v23;

  v6 = a2;
  if (a2 != a3)
  {
    v7 = __mexp_end;
    v8 = __mexp_begin;
    if (*a2 == 42)
    {
      std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__push_loop(this, 0, 0xFFFFFFFFFFFFFFFFLL, __s, __mexp_begin, __mexp_end, 1);
      return ++v6;
    }
    if (a2 + 1 != a3 && *a2 == 92 && a2[1] == 123)
    {
      v12 = a2 + 2;
      v23 = 0;
      v13 = std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__parse_DUP_COUNT<wchar_t const*>((uint64_t)this, a2 + 2, a3, &v23);
      if (v12 == v13)
        goto LABEL_16;
      if (v13 != a3)
      {
        v14 = v13 + 1;
        if (*v13 == 44)
        {
          v22 = -1;
          v15 = std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__parse_DUP_COUNT<wchar_t const*>((uint64_t)this, v14, a3, &v22);
          if (v15 != a3 && v15 + 1 != a3 && *v15 == 92 && v15[1] == 125)
          {
            v17 = v22;
            v16 = v23;
            if (v22 == -1)
            {
              v17 = -1;
            }
            else if (v22 < v23)
            {
LABEL_16:
              std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)8>();
            }
            v6 = &v15[2 * (v15[1] == 125)];
            v18 = v8;
            v19 = v7;
            v20 = this;
LABEL_23:
            std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__push_loop(v20, v16, v17, __s, v18, v19, 1);
            return v6;
          }
        }
        else if (v14 != a3 && *v13 == 92 && *v14 == 125)
        {
          v6 = v13 + 2;
          v16 = v23;
          v18 = v8;
          v19 = v7;
          v20 = this;
          v17 = v23;
          goto LABEL_23;
        }
      }
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)7>();
    }
  }
  return v6;
}

int *std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__parse_one_char_or_coll_elem_RE<std::__wrap_iter<wchar_t const*>>(std::basic_regex<wchar_t> *this, int *a2, int *a3)
{
  std::basic_regex<wchar_t>::value_type v6;
  int *result;
  std::__node<wchar_t> *v9;
  std::__owns_one_state<wchar_t> *end;
  std::__node<wchar_t> *first;

  if (a2 == a3)
  {
    result = std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__parse_QUOTED_CHAR<wchar_t const*>(this, a2, a3);
    if (result != a2)
      return result;
    return std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__parse_bracket_expression<std::__wrap_iter<wchar_t const*>>((uint64_t)this, a2, a3);
  }
  v6 = *a2;
  if ((a2 + 1 != a3 || v6 != 36)
    && ((v6 - 46) > 0x2E || ((1 << (v6 - 46)) & 0x600000000001) == 0))
  {
    std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__push_char(this, v6);
    return a2 + 1;
  }
  result = std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__parse_QUOTED_CHAR<wchar_t const*>(this, a2, a3);
  if (result != a2)
    return result;
  if (*a2 != 46)
    return std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__parse_bracket_expression<std::__wrap_iter<wchar_t const*>>((uint64_t)this, a2, a3);
  v9 = (std::__node<wchar_t> *)operator new();
  end = this->__end_;
  first = end->__first_;
  v9->__vftable = (std::__node<wchar_t>_vtbl *)&unk_1E5D401B0;
  v9[1].__vftable = (std::__node<wchar_t>_vtbl *)first;
  end->__first_ = v9;
  this->__end_ = (std::__owns_one_state<wchar_t> *)this->__end_->__first_;
  return a2 + 1;
}

unsigned int *std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__parse_ERE_branch<std::__wrap_iter<wchar_t const*>>(uint64_t a1, std::basic_regex<wchar_t> *a2, std::basic_regex<wchar_t> *a3)
{
  unsigned int *v6;
  unsigned int *v7;

  v6 = std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__parse_ERE_expression<std::__wrap_iter<wchar_t const*>>(a1, a2, a3);
  if (v6 == (unsigned int *)a2)
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)15>();
  do
  {
    v7 = v6;
    v6 = std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__parse_ERE_expression<std::__wrap_iter<wchar_t const*>>(a1, (std::basic_regex<wchar_t> *)v6, a3);
  }
  while (v7 != v6);
  return v7;
}

unsigned int *std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__parse_ERE_expression<std::__wrap_iter<wchar_t const*>>(uint64_t a1, std::basic_regex<wchar_t> *a2, std::basic_regex<wchar_t> *a3)
{
  std::__owns_one_state<wchar_t> *v6;
  int v7;
  int *v8;
  int *v9;
  int locale;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  unsigned int v16;
  std::basic_regex<wchar_t> *v17;
  std::basic_regex<wchar_t> *v18;

  v6 = *(std::__owns_one_state<wchar_t> **)(a1 + 56);
  v7 = *(_DWORD *)(a1 + 28);
  v8 = std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__parse_one_char_or_coll_elem_ERE<std::__wrap_iter<wchar_t const*>>((std::basic_regex<wchar_t> *)a1, a2, a3);
  v9 = v8;
  if (v8 != (int *)a2 || v8 == (int *)a3)
    goto LABEL_12;
  locale = (int)a2->__traits_.__loc_.__locale_;
  if (LODWORD(a2->__traits_.__loc_.__locale_) == 36)
  {
    v11 = operator new();
    v12 = (*(_DWORD *)(a1 + 24) & 0x5F0) == 1024;
    v13 = *(_QWORD *)(a1 + 56);
    goto LABEL_8;
  }
  if (locale == 40)
  {
    std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__push_begin_marked_subexpression((std::basic_regex<wchar_t> *)a1);
    v16 = *(_DWORD *)(a1 + 28);
    ++*(_DWORD *)(a1 + 36);
    v17 = (std::basic_regex<wchar_t> *)std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__parse_extended_reg_exp<std::__wrap_iter<wchar_t const*>>(a1, (char *)&a2->__traits_.__loc_.__locale_ + 4, a3);
    if (v17 == a3 || (v18 = v17, LODWORD(v17->__traits_.__loc_.__locale_) != 41))
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>();
    std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__push_end_marked_subexpression((std::basic_regex<wchar_t> *)a1, v16);
    --*(_DWORD *)(a1 + 36);
    v9 = (int *)&v18->__traits_.__loc_.__locale_ + 1;
LABEL_12:
    if (v9 != (int *)a2)
      return std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__parse_ERE_dupl_symbol<std::__wrap_iter<wchar_t const*>>(a1, v9, (unsigned int *)a3, v6, (v7 + 1), (*(_DWORD *)(a1 + 28) + 1));
    return (unsigned int *)a2;
  }
  if (locale == 94)
  {
    v11 = operator new();
    v12 = (*(_DWORD *)(a1 + 24) & 0x5F0) == 1024;
    v13 = *(_QWORD *)(a1 + 56);
LABEL_8:
    v15 = *(_QWORD *)(v13 + 8);
    *(_QWORD *)v11 = v14 + 16;
    *(_QWORD *)(v11 + 8) = v15;
    *(_BYTE *)(v11 + 16) = v12;
    *(_QWORD *)(v13 + 8) = v11;
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
    v9 = (int *)&a2->__traits_.__loc_.__locale_ + 1;
    return std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__parse_ERE_dupl_symbol<std::__wrap_iter<wchar_t const*>>(a1, v9, (unsigned int *)a3, v6, (v7 + 1), (*(_DWORD *)(a1 + 28) + 1));
  }
  return (unsigned int *)a2;
}

int *std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__parse_one_char_or_coll_elem_ERE<std::__wrap_iter<wchar_t const*>>(std::basic_regex<wchar_t> *a1, std::basic_regex<wchar_t> *a2, std::basic_regex<wchar_t> *a3)
{
  int *result;
  std::__node<wchar_t> *v7;
  std::__owns_one_state<wchar_t> *end;
  std::__node<wchar_t> *first;

  result = (int *)std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__parse_ORD_CHAR_ERE<wchar_t const*>(a1, a2, a3);
  if (result == (int *)a2)
  {
    result = std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__parse_QUOTED_CHAR_ERE<std::__wrap_iter<wchar_t const*>>((uint64_t)a1, (std::wstring::value_type *)a2, (std::wstring::value_type *)a3);
    if (result == (int *)a2)
    {
      if (a2 == a3 || LODWORD(a2->__traits_.__loc_.__locale_) != 46)
      {
        return std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__parse_bracket_expression<std::__wrap_iter<wchar_t const*>>((uint64_t)a1, (int *)a2, (int *)a3);
      }
      else
      {
        v7 = (std::__node<wchar_t> *)operator new();
        end = a1->__end_;
        first = end->__first_;
        v7->__vftable = (std::__node<wchar_t>_vtbl *)&unk_1E5D401B0;
        v7[1].__vftable = (std::__node<wchar_t>_vtbl *)first;
        end->__first_ = v7;
        a1->__end_ = (std::__owns_one_state<wchar_t> *)a1->__end_->__first_;
        return (int *)&a2->__traits_.__loc_.__locale_ + 1;
      }
    }
  }
  return result;
}

std::wstring::value_type *std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__parse_QUOTED_CHAR_ERE<std::__wrap_iter<wchar_t const*>>(uint64_t a1, std::wstring::value_type *a2, std::wstring::value_type *a3)
{
  std::wstring::value_type *v3;
  std::wstring::value_type *v4;
  BOOL v5;
  _BOOL4 v7;
  uint64_t v8;

  v3 = a2;
  if (a2 != a3)
  {
    v4 = a2 + 1;
    if (v3 + 1 != a3 && *v3 == 92)
    {
      v5 = (*v4 - 36) > 0x3A || ((1 << (*v4 - 36)) & 0x5800000080004F1) == 0;
      if (v5 && (*v4 - 123) >= 3)
      {
        if ((*(_DWORD *)(a1 + 24) & 0x1F0) == 0x40)
        {
          return std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__parse_awk_escape<std::__wrap_iter<wchar_t const*>>((std::basic_regex<wchar_t> *)a1, v4, a3, 0);
        }
        else
        {
          v7 = std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__test_back_ref((std::basic_regex<wchar_t> *)a1, *v4);
          v8 = 8;
          if (!v7)
            v8 = 0;
          return (std::wstring::value_type *)((char *)v3 + v8);
        }
      }
      else
      {
        std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__push_char((std::basic_regex<wchar_t> *)a1, *v4);
        v3 += 2;
      }
    }
  }
  return v3;
}

uint64_t std::vector<std::pair<std::basic_regex<wchar_t,std::regex_traits<wchar_t>>,std::wstring>>::__push_back_slow_path<std::pair<std::basic_regex<wchar_t,std::regex_traits<wchar_t>>,std::wstring>>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  __int128 v12;
  uint64_t v13;
  void *v15[5];

  v3 = *a1;
  v4 = 0x2E8BA2E8BA2E8BA3 * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) > 0x2E8BA2E8BA2E8BALL)
    std::vector<int>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0x2E8BA2E8BA2E8BA3 * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x1745D1745D1745DLL)
    v9 = 0x2E8BA2E8BA2E8BALL;
  else
    v9 = v5;
  v15[4] = a1 + 2;
  if (v9)
    v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<std::string,quasar::PTree>>>(v7, v9);
  else
    v10 = 0;
  v11 = &v10[88 * v4];
  v15[0] = v10;
  v15[1] = v11;
  v15[3] = &v10[88 * v9];
  std::locale::locale((std::locale *)v11, (const std::locale *)a2);
  *(_OWORD *)(v11 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(v11 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(v11 + 40) = *(_OWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  *((_QWORD *)v11 + 7) = *(_QWORD *)(a2 + 56);
  v12 = *(_OWORD *)(a2 + 64);
  *((_QWORD *)v11 + 10) = *(_QWORD *)(a2 + 80);
  *((_OWORD *)v11 + 4) = v12;
  *(_QWORD *)(a2 + 72) = 0;
  *(_QWORD *)(a2 + 80) = 0;
  *(_QWORD *)(a2 + 64) = 0;
  v15[2] = v11 + 88;
  std::vector<std::pair<std::basic_regex<wchar_t,std::regex_traits<wchar_t>>,std::wstring>>::__swap_out_circular_buffer(a1, v15);
  v13 = a1[1];
  std::__split_buffer<quasar::RegexReplacementRule>::~__split_buffer(v15);
  return v13;
}

void sub_1AD8B768C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<quasar::RegexReplacementRule>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::pair<std::basic_regex<wchar_t,std::regex_traits<wchar_t>>,std::wstring>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::pair<std::basic_regex<wchar_t,std::regex_traits<wchar_t>>,std::wstring>>,std::reverse_iterator<std::pair<std::basic_regex<wchar_t,std::regex_traits<wchar_t>>,std::wstring>*>,std::reverse_iterator<std::pair<std::basic_regex<wchar_t,std::regex_traits<wchar_t>>,std::wstring>*>,std::reverse_iterator<std::pair<std::basic_regex<wchar_t,std::regex_traits<wchar_t>>,std::wstring>*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::pair<std::basic_regex<wchar_t,std::regex_traits<wchar_t>>,std::wstring>>,std::reverse_iterator<std::pair<std::basic_regex<wchar_t,std::regex_traits<wchar_t>>,std::wstring>*>,std::reverse_iterator<std::pair<std::basic_regex<wchar_t,std::regex_traits<wchar_t>>,std::wstring>*>,std::reverse_iterator<std::pair<std::basic_regex<wchar_t,std::regex_traits<wchar_t>>,std::wstring>*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  _QWORD v13[3];
  char v14;
  __int128 v15;
  __int128 v16;

  v7 = a7;
  *(_QWORD *)&v16 = a6;
  *((_QWORD *)&v16 + 1) = a7;
  v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  v13[2] = &v16;
  v14 = 0;
  if (a3 == a5)
  {
    v11 = a6;
  }
  else
  {
    v9 = a3;
    do
    {
      std::locale::locale((std::locale *)(v7 - 88), (const std::locale *)(v9 - 88));
      *(_OWORD *)(v7 - 80) = *(_OWORD *)(v9 - 80);
      *(_OWORD *)(v7 - 64) = *(_OWORD *)(v9 - 64);
      *(_OWORD *)(v7 - 48) = *(_OWORD *)(v9 - 48);
      *(_QWORD *)(v9 - 48) = 0;
      *(_QWORD *)(v9 - 40) = 0;
      *(_QWORD *)(v7 - 32) = *(_QWORD *)(v9 - 32);
      v10 = *(_OWORD *)(v9 - 24);
      *(_QWORD *)(v7 - 8) = *(_QWORD *)(v9 - 8);
      *(_OWORD *)(v7 - 24) = v10;
      *(_QWORD *)(v9 - 24) = 0;
      *(_QWORD *)(v9 - 16) = 0;
      *(_QWORD *)(v9 - 8) = 0;
      v7 = *((_QWORD *)&v16 + 1) - 88;
      *((_QWORD *)&v16 + 1) -= 88;
      v9 -= 88;
    }
    while (v9 != a5);
    v11 = v16;
  }
  v14 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::basic_regex<wchar_t,std::regex_traits<wchar_t>>,std::wstring>>,std::reverse_iterator<std::pair<std::basic_regex<wchar_t,std::regex_traits<wchar_t>>,std::wstring>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v13);
  return v11;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::basic_regex<wchar_t,std::regex_traits<wchar_t>>,std::wstring>>,std::reverse_iterator<std::pair<std::basic_regex<wchar_t,std::regex_traits<wchar_t>>,std::wstring>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<quasar::RegexReplacementRule>,std::reverse_iterator<quasar::RegexReplacementRule*>>::operator()[abi:ne180100]((uint64_t *)a1);
  return a1;
}

uint64_t kaldi::nnet1::Component::Backpropagate(_DWORD *lpsrc, uint64_t a2, uint64_t a3, uint64_t a4, int32x2_t *a5, uint64_t a6)
{
  uint64_t result;
  void *v13;
  _QWORD *v15;
  _QWORD v16[34];

  if (lpsrc[3] != *(_DWORD *)(a4 + 16))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v16);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Non-matching output dims, component:", 36);
    v15 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)" data:", 6);
    std::ostream::operator<<();
    goto LABEL_15;
  }
  if (*((_BYTE *)lpsrc + 17))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v16);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v16, "Backpropagate() attempted while disabled");
LABEL_15:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v16);
  }
  if (a5)
  {
    kaldi::CuMatrix<float>::Resize(a5, *(unsigned int *)(a2 + 20), lpsrc[2], 0, 0);
    (*(void (**)(_DWORD *, _QWORD))(*(_QWORD *)lpsrc + 56))(lpsrc, *(unsigned int *)(a2 + 20));
    return (*(uint64_t (**)(_DWORD *, uint64_t, uint64_t, uint64_t, int32x2_t *, uint64_t))(*(_QWORD *)lpsrc
                                                                                                + 128))(lpsrc, a2, a3, a4, a5, a6);
  }
  else
  {
    if ((*(unsigned int (**)(_DWORD *))(*(_QWORD *)lpsrc + 24))(lpsrc) == 2055)
      return (*(uint64_t (**)(_DWORD *, uint64_t, uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)lpsrc + 128))(lpsrc, a2, a3, a4, 0, a6);
    result = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)lpsrc + 24))(lpsrc);
    if ((_DWORD)result == 2049 || v13 != 0)
      return (*(uint64_t (**)(_DWORD *, uint64_t, uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)lpsrc + 128))(lpsrc, a2, a3, a4, 0, a6);
  }
  return result;
}

uint64_t kaldi::nnet1::Component::Propagate(_DWORD *a1, uint64_t a2, int32x2_t *a3, uint64_t a4)
{
  uint64_t v8;
  _QWORD *v10;
  kaldi::nnet1::Component *v11;
  std::string *v12;
  std::string::size_type size;
  _QWORD *v14;
  _QWORD *v15;
  std::string v16;
  _QWORD v17[34];

  if (a1[2] != *(_DWORD *)(a2 + 16))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v17);
    v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"Non-matching dims! ", 19);
    v11 = (kaldi::nnet1::Component *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)a1 + 24))(a1);
    kaldi::nnet1::Component::TypeToMarker(v11, &v16);
    if ((v16.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v12 = &v16;
    else
      v12 = (std::string *)v16.__r_.__value_.__r.__words[0];
    if ((v16.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v16.__r_.__value_.__r.__words[2]);
    else
      size = v16.__r_.__value_.__l.__size_;
    v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)v12, size);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)" input-dim : ", 13);
    v15 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)" data : ", 8);
    std::ostream::operator<<();
    std::string::~string(&v16);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v17);
  }
  v8 = (*(uint64_t (**)(_DWORD *, _QWORD))(*(_QWORD *)a1 + 56))(a1, *(unsigned int *)(a2 + 20));
  kaldi::CuMatrix<float>::Resize(a3, v8, a1[3], 0, 0);
  return (*(uint64_t (**)(_DWORD *, uint64_t, int32x2_t *, uint64_t))(*(_QWORD *)a1 + 112))(a1, a2, a3, a4);
}

uint64_t kaldi::nnet1::MomentStatistics<float>(uint64_t a1)
{
  int v3[10];

  kaldi::Matrix<float>::Matrix((uint64_t)v3, *(unsigned int *)(a1 + 20), *(unsigned int *)(a1 + 16), 0, 0);
  kaldi::CuMatrixBase<float>::CopyToMat<float>(a1, v3, 111);
  kaldi::nnet1::MomentStatistics<float>((uint64_t)v3);
  return kaldi::Matrix<float>::~Matrix((uint64_t)v3);
}

void sub_1AD8B7BA0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  kaldi::Matrix<float>::~Matrix((uint64_t)va);
  _Unwind_Resume(a1);
}

float kaldi::nnet1::UpdatableComponent::CheckParams(kaldi::nnet1::UpdatableComponent *this)
{
  float result;
  _QWORD v2[34];

  result = (*(float (**)(kaldi::nnet1::UpdatableComponent *))(*(_QWORD *)this + 208))(this);
  if (fabsf(result) == INFINITY)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v2);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v2, "'inf' in component parameters (weight explosion, try lower learning rate?)");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v2);
  }
  return result;
}

void sub_1AD8B7CC8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  kaldi::Vector<float>::Destroy((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::valarray<unsigned long>::~valarray[abi:ne180100](uint64_t a1)
{
  _BYTE *v2;
  _BYTE *v3;

  v2 = *(_BYTE **)a1;
  if (v2)
  {
    v3 = *(_BYTE **)(a1 + 8);
    if (v3 != v2)
      *(_QWORD *)(a1 + 8) = &v3[(v2 - v3 + 7) & 0xFFFFFFFFFFFFFFF8];
    operator delete(v2);
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
  }
  return a1;
}

uint64_t hmaxent::model::model(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  size_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  size_t v16;
  char *v17;
  _QWORD *v18;
  unint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  unint64_t v22;
  size_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  char *v30;
  unint64_t v31;
  uint64_t v32;
  _BYTE *v33;
  _BYTE *v34;
  _QWORD *v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v41;
  void *__p;
  _BYTE *v43;
  _QWORD v44[4];
  _BYTE *v45;
  _BYTE *v46;
  __int128 v47;
  uint64_t v48;
  __int128 v49;
  uint64_t v50;

  v4 = *(_QWORD *)a2[4];
  v5 = *(_QWORD *)(a2[4] + 8);
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 16) = a2;
  *(_QWORD *)(a1 + 32) = 0;
  v6 = v5 - v4;
  if (v5 != v4)
  {
    if ((v6 & 0x8000000000000000) != 0)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v7 = (char *)operator new(v6 >> 2);
    *(_QWORD *)(a1 + 24) = v7;
    bzero(v7, v6 >> 2);
    *(_QWORD *)(a1 + 32) = &v7[v6 >> 2];
  }
  v8 = *(_QWORD *)a2[3];
  v9 = *(_QWORD *)(a2[3] + 8);
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  v10 = v9 - v8;
  if (v9 != v8)
  {
    if ((v10 & 0x8000000000000000) != 0)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v11 = (char *)operator new(v9 - v8);
    *(_QWORD *)(a1 + 40) = v11;
    bzero(v11, v10);
    *(_QWORD *)(a1 + 48) = &v11[v10];
  }
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_WORD *)(a1 + 72) = 0;
  v12 = *(_QWORD *)a2[3];
  v13 = *(_QWORD *)(a2[3] + 8);
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  std::valarray<double>::resize(a1 + 80, (v13 - v12) >> 3, 0.0);
  v14 = *(_QWORD *)a2[3];
  v15 = *(_QWORD *)(a2[3] + 8);
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  v16 = v15 - v14;
  if (v15 != v14)
  {
    if ((v16 & 0x8000000000000000) != 0)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v17 = (char *)operator new(v15 - v14);
    *(_QWORD *)(a1 + 96) = v17;
    bzero(v17, v16);
    *(_QWORD *)(a1 + 104) = &v17[v16];
  }
  *(_QWORD *)(a1 + 128) = 0;
  *(_DWORD *)(a1 + 136) = 1000;
  v18 = (_QWORD *)operator new();
  v19 = (uint64_t)(*(_QWORD *)(a2[3] + 8) - *(_QWORD *)a2[3]) >> 3;
  *v18 = 0;
  v18[1] = 0;
  std::valarray<double>::resize((uint64_t)v18, v19, 0.0);
  *(_QWORD *)(a1 + 120) = v18;
  v20 = (_QWORD *)operator new();
  v21 = *a2;
  *v20 = 0;
  v20[1] = 0;
  v22 = v21 - 1;
  if (v22)
  {
    if (v22 >> 61)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v23 = 8 * v22;
    v24 = (char *)operator new(8 * v22);
    *v20 = v24;
    bzero(v24, v23);
    v20[1] = &v24[v23];
  }
  else
  {
    v24 = 0;
  }
  *(_QWORD *)(a1 + 112) = v20;
  v25 = *(_QWORD *)a2[4];
  v26 = *(_QWORD *)(a2[4] + 8) - v25;
  if ((unint64_t)v26 >= 0x21)
  {
    v27 = v26 >> 5;
    if (v27 <= 2)
      v27 = 2;
    v28 = v27 - 1;
    v29 = 32;
    do
    {
      v30 = &v24[8 * *(unsigned int *)(v25 + v29)];
      ++*((_QWORD *)v30 - 1);
      v29 += 32;
      --v28;
    }
    while (v28);
    v31 = 1;
    while (1)
    {
      v32 = v25 + 32 * v31;
      v49 = *(_OWORD *)(v32 + 16);
      v50 = 1;
      v47 = *(_OWORD *)(v25 + 32 * *(_QWORD *)(v32 + 8) + 16);
      v48 = 1;
      search_sorted<unsigned long>((uint64_t *)a2[3], (uint64_t *)a2[3], (uint64_t *)&v47, (uint64_t *)&v49, &__p);
      v41 = v47;
      v44[1] = &__p;
      v44[2] = &v41;
      v44[3] = (v43 - (_BYTE *)__p) >> 3;
      std::__val_expr<std::_BinaryOp<std::plus<unsigned long>,std::valarray<unsigned long>,std::__scalar_expr<unsigned long>>>::operator std::valarray<unsigned long>(v44, &v45);
      if (__p)
      {
        if (v43 != __p)
          v43 += ((_BYTE *)__p - v43 + 7) & 0xFFFFFFFFFFFFFFF8;
        operator delete(__p);
      }
      v33 = v45;
      v34 = v46;
      if (v46 != v45)
        break;
      if (v46)
        goto LABEL_31;
LABEL_32:
      ++v31;
      v25 = *(_QWORD *)a2[4];
      if (v31 >= (*(_QWORD *)(a2[4] + 8) - v25) >> 5)
        return a1;
    }
    v35 = (_QWORD *)(*(_QWORD *)(a1 + 96) + 8 * v49);
    v36 = (v46 - v45) >> 3;
    if (v36 <= 1)
      v36 = 1;
    v37 = 8 * v50;
    v38 = (uint64_t *)v45;
    do
    {
      v39 = *v38++;
      *v35 = v39;
      v35 = (_QWORD *)((char *)v35 + v37);
      --v36;
    }
    while (v36);
    v46 = &v34[(v33 - v34 + 7) & 0xFFFFFFFFFFFFFFF8];
LABEL_31:
    operator delete(v33);
    goto LABEL_32;
  }
  return a1;
}

void sub_1AD8B8098(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  MEMORY[0x1AF44D190](v16, 0x80C40803F642BLL);
  std::valarray<unsigned long>::~valarray[abi:ne180100](v15);
  std::valarray<unsigned long>::~valarray[abi:ne180100](v14);
  std::valarray<unsigned long>::~valarray[abi:ne180100](v13);
  std::valarray<unsigned long>::~valarray[abi:ne180100](v12);
  _Unwind_Resume(a1);
}

void search_sorted<unsigned long>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, uint64_t *a4@<X3>, _QWORD *a5@<X8>)
{
  unint64_t v5;
  unint64_t v6;
  char *v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;

  v5 = a3[1];
  v6 = a4[1];
  *a5 = 0;
  a5[1] = 0;
  if (v6)
  {
    if (v6 >> 61)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v12 = (char *)operator new(8 * v6);
    *a5 = v12;
    bzero(v12, 8 * v6);
    v13 = 0;
    v14 = 0;
    a5[1] = &v12[8 * v6];
    v15 = *a3;
    v16 = *a4;
    v17 = *a2;
    v18 = *a1;
    do
    {
      if (v14 < v5)
      {
        v19 = v5;
        do
        {
          v20 = v14 + ((v19 - v14) >> 1);
          if (*(_QWORD *)(v18 + 8 * (v20 + v15)) >= *(_QWORD *)(v17 + 8 * (v13 + v16)))
            v19 = v14 + ((v19 - v14) >> 1);
          else
            v14 = v20 + 1;
        }
        while (v14 < v19);
      }
      *(_QWORD *)&v12[8 * v13++] = v14++;
    }
    while (v13 < v6);
  }
}

_QWORD *std::__val_expr<std::_BinaryOp<std::plus<unsigned long>,std::valarray<unsigned long>,std::__scalar_expr<unsigned long>>>::operator std::valarray<unsigned long>@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;

  *a2 = 0;
  a2[1] = 0;
  v3 = result[1];
  v5 = *(uint64_t **)v3;
  v4 = *(_QWORD *)(v3 + 8);
  v6 = v4 - *(_QWORD *)v3;
  if (v4 != *(_QWORD *)v3)
  {
    if (v6 < 0)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v7 = result;
    result = operator new(v4 - *(_QWORD *)v3);
    v8 = v6 >> 3;
    *a2 = result;
    a2[1] = result;
    v9 = (_QWORD *)v7[2];
    do
    {
      v10 = *v5++;
      *result++ = *v9 + v10;
      --v8;
    }
    while (v8);
    a2[1] = result;
  }
  return result;
}

void sub_1AD8B82B8(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::valarray<unsigned long>::~valarray[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void hmaxent::model::~model(hmaxent::model *this)
{
  uint64_t v2;
  _BYTE *v3;
  _BYTE *v4;
  uint64_t v5;
  _BYTE *v6;
  _BYTE *v7;
  uint64_t v8;
  _BYTE *v9;
  _BYTE *v10;
  _BYTE *v11;
  _BYTE *v12;
  _BYTE *v13;
  _BYTE *v14;
  _BYTE *v15;
  _BYTE *v16;
  _BYTE *v17;
  _BYTE *v18;

  v2 = *((_QWORD *)this + 14);
  if (v2)
  {
    v3 = *(_BYTE **)v2;
    if (*(_QWORD *)v2)
    {
      v4 = *(_BYTE **)(v2 + 8);
      if (v4 != v3)
        *(_QWORD *)(v2 + 8) = &v4[(v3 - v4 + 7) & 0xFFFFFFFFFFFFFFF8];
      operator delete(v3);
      *(_QWORD *)v2 = 0;
      *(_QWORD *)(v2 + 8) = 0;
    }
    MEMORY[0x1AF44D190](v2, 0x10C40B8F86A93);
  }
  v5 = *((_QWORD *)this + 15);
  if (v5)
  {
    v6 = *(_BYTE **)v5;
    if (*(_QWORD *)v5)
    {
      v7 = *(_BYTE **)(v5 + 8);
      if (v7 != v6)
        *(_QWORD *)(v5 + 8) = &v7[(v6 - v7 + 7) & 0xFFFFFFFFFFFFFFF8];
      operator delete(v6);
      *(_QWORD *)v5 = 0;
      *(_QWORD *)(v5 + 8) = 0;
    }
    MEMORY[0x1AF44D190](v5, 0x80C40803F642BLL);
  }
  v8 = *((_QWORD *)this + 16);
  if (v8)
  {
    v9 = *(_BYTE **)v8;
    if (*(_QWORD *)v8)
    {
      v10 = *(_BYTE **)(v8 + 8);
      if (v10 != v9)
        *(_QWORD *)(v8 + 8) = &v10[(v9 - v10 + 7) & 0xFFFFFFFFFFFFFFF8];
      operator delete(v9);
      *(_QWORD *)v8 = 0;
      *(_QWORD *)(v8 + 8) = 0;
    }
    MEMORY[0x1AF44D190](v8, 0x80C40803F642BLL);
  }
  v11 = (_BYTE *)*((_QWORD *)this + 12);
  if (v11)
  {
    v12 = (_BYTE *)*((_QWORD *)this + 13);
    if (v12 != v11)
      *((_QWORD *)this + 13) = &v12[(v11 - v12 + 7) & 0xFFFFFFFFFFFFFFF8];
    operator delete(v11);
    *((_QWORD *)this + 12) = 0;
    *((_QWORD *)this + 13) = 0;
  }
  v13 = (_BYTE *)*((_QWORD *)this + 10);
  if (v13)
  {
    v14 = (_BYTE *)*((_QWORD *)this + 11);
    if (v14 != v13)
      *((_QWORD *)this + 11) = &v14[(v13 - v14 + 7) & 0xFFFFFFFFFFFFFFF8];
    operator delete(v13);
    *((_QWORD *)this + 10) = 0;
    *((_QWORD *)this + 11) = 0;
  }
  v15 = (_BYTE *)*((_QWORD *)this + 5);
  if (v15)
  {
    v16 = (_BYTE *)*((_QWORD *)this + 6);
    if (v16 != v15)
      *((_QWORD *)this + 6) = &v16[(v15 - v16 + 7) & 0xFFFFFFFFFFFFFFF8];
    operator delete(v15);
    *((_QWORD *)this + 5) = 0;
    *((_QWORD *)this + 6) = 0;
  }
  v17 = (_BYTE *)*((_QWORD *)this + 3);
  if (v17)
  {
    v18 = (_BYTE *)*((_QWORD *)this + 4);
    if (v18 != v17)
      *((_QWORD *)this + 4) = &v18[(v17 - v18 + 7) & 0xFFFFFFFFFFFFFFF8];
    operator delete(v17);
    *((_QWORD *)this + 3) = 0;
    *((_QWORD *)this + 4) = 0;
  }
}

unint64_t **hmaxent::model::lognormconst(unint64_t **this)
{
  _QWORD *v2;
  void *v3;
  double **v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t i;
  _QWORD *v11;
  uint64_t v12;
  long double v13;
  unint64_t v14;
  char *v15;
  uint64_t v16;
  unint64_t *v17;
  _QWORD *v18;
  unint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  double *v27;
  double *v28;
  _BYTE *v29;
  double *v30;
  double v31;
  double v32;
  long double v33;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t *v38;
  void *v39;
  uint64_t v40;
  void **p_p;
  uint64_t v42;
  void **v43;
  void *__p;
  _BYTE *v45;
  void *v46;
  char *v47;
  void *v48;
  double *v49;
  _BYTE *v50;
  _BYTE *v51;

  if (!*((_BYTE *)this + 73))
  {
    hmaxent::model::ensure_exp_params((hmaxent::model *)this);
    v3 = *(void **)(*(_QWORD *)this[2][4] + 24);
    v38 = (unint64_t *)*this[15];
    v39 = v3;
    v40 = 1;
    v4 = (double **)std::valarray<double>::valarray(&v50, (uint64_t)&v38);
    v2 = this + 3;
    *(long double *)this[3] = logsumexp<double>(v4);
    if (v50)
    {
      if (v51 != v50)
        v51 += (v50 - v51 + 7) & 0xFFFFFFFFFFFFFFF8;
      operator delete(v50);
    }
    v5 = *this[2];
    if (v5 < 2)
      goto LABEL_57;
    v6 = *this[14];
    v7 = 2;
    v8 = 1;
    v37 = 1;
    while (1)
    {
      v36 = v8 - 1;
      v9 = *(_QWORD *)(v6 + 8 * (v8 - 1));
      if (v9 < 1)
        goto LABEL_56;
      v35 = v8;
      for (i = 0; i < v9; ++i)
      {
        v11 = (_QWORD *)(*(_QWORD *)this[2][4] + 32 * (i + v37));
        v12 = v11[2];
        v13 = *(double *)&this[3][v11[1]];
        v14 = v11[3];
        v38 = &this[5][v12];
        v39 = (void *)v14;
        v40 = 1;
        std::valarray<double>::valarray(&v50, (uint64_t)&v38);
        v48 = 0;
        v49 = 0;
        std::valarray<double>::resize((uint64_t)&v48, (v51 - v50) >> 3, 0.0);
        v46 = 0;
        v47 = 0;
        if (v14)
        {
          if (v14 >> 61)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v15 = (char *)operator new(8 * v14);
          v46 = v15;
          bzero(v15, 8 * v14);
          v47 = &v15[8 * v14];
        }
        v16 = 1;
        do
        {
          if (v16 == 1)
          {
            if (v14)
            {
              v17 = &this[12][v12];
              v18 = v46;
              v19 = v14;
              do
              {
                v20 = *v17++;
                *v18++ = v20;
                --v19;
              }
              while (v19);
            }
          }
          else
          {
            v38 = this[12];
            std::valarray<unsigned long>::valarray(&v39, (uint64_t **)&v46);
            v21 = (char *)v39;
            v22 = (char *)v40;
            v23 = (char *)v39 - v40;
            if (v39 == (void *)v40)
            {
              if (!v39)
                goto LABEL_27;
              goto LABEL_26;
            }
            v24 = 0;
            v25 = (uint64_t)v38;
            v26 = (char *)v46;
            do
            {
              *(_QWORD *)&v26[v24] = *(_QWORD *)(v25 + 8 * *(_QWORD *)&v21[v24]);
              v24 += 8;
            }
            while (&v21[v24] != v22);
            if (v21)
            {
              v40 = (uint64_t)&v22[(unint64_t)(v23 + 7) & 0xFFFFFFFFFFFFFFF8];
LABEL_26:
              operator delete(v21);
            }
          }
LABEL_27:
          v38 = (unint64_t *)*this[15];
          std::valarray<unsigned long>::valarray(&v39, (uint64_t **)&v46);
          std::valarray<double>::valarray(&__p, (uint64_t *)&v38);
          v27 = (double *)v48;
          v28 = v49;
          v29 = __p;
          if (v48 == v49)
          {
            if (!__p)
              goto LABEL_35;
          }
          else
          {
            v30 = (double *)__p;
            do
            {
              v31 = *v30++;
              *v27 = v31 + *v27;
              ++v27;
            }
            while (v27 != v28);
          }
          if (v45 != v29)
            v45 += (v29 - v45 + 7) & 0xFFFFFFFFFFFFFFF8;
          operator delete(v29);
          __p = 0;
          v45 = 0;
LABEL_35:
          if (v39)
          {
            if ((void *)v40 != v39)
              v40 += ((unint64_t)v39 - v40 + 7) & 0xFFFFFFFFFFFFFFF8;
            operator delete(v39);
          }
          ++v16;
        }
        while (v16 != v7);
        v40 = (uint64_t)&v50;
        p_p = &__p;
        v42 = (v51 - v50) >> 3;
        v43 = &v48;
        __p = (void *)0x3FF0000000000000;
        v32 = std::__val_expr<std::_BinaryOp<std::multiplies<double>,std::__val_expr<std::_BinaryOp<std::minus<double>,std::valarray<double>,std::__scalar_expr<double>>>,std::__val_expr<std::_UnaryOp<std::__exp_expr<double>,std::valarray<double>>>>>::sum[abi:ne180100]((uint64_t)&v38);
        if (v32 != 0.0)
        {
          v33 = exp(v13);
          v13 = log(v33 + v32);
        }
        *(long double *)(*v2 + 8 * (i + v37)) = v13;
        if (v46)
        {
          if (v47 != v46)
            v47 += ((_BYTE *)v46 - v47 + 7) & 0xFFFFFFFFFFFFFFF8;
          operator delete(v46);
        }
        if (v48)
        {
          if (v49 != v48)
            v49 = (double *)((char *)v49 + (((_BYTE *)v48 - (_BYTE *)v49 + 7) & 0xFFFFFFFFFFFFFFF8));
          operator delete(v48);
        }
        if (v50)
        {
          if (v51 != v50)
            v51 += (v50 - v51 + 7) & 0xFFFFFFFFFFFFFFF8;
          operator delete(v50);
        }
        v6 = *this[14];
        v9 = *(_QWORD *)(v6 + 8 * v36);
      }
      v5 = *this[2];
      v8 = v35;
LABEL_56:
      v37 += v9;
      ++v8;
      ++v7;
      if (v8 >= v5)
      {
LABEL_57:
        *((_BYTE *)this + 73) = 1;
        return (unint64_t **)v2;
      }
    }
  }
  return this + 3;
}

void sub_1AD8B88EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,void *__p,uint64_t a25)
{
  uint64_t v25;
  _BYTE *v27;
  _BYTE *v28;

  v27 = *(_BYTE **)(v25 - 120);
  if (v27)
  {
    v28 = *(_BYTE **)(v25 - 112);
    if (v28 != v27)
      *(_QWORD *)(v25 - 112) = &v28[(v27 - v28 + 7) & 0xFFFFFFFFFFFFFFF8];
    operator delete(v27);
  }
  _Unwind_Resume(exception_object);
}

void hmaxent::model::ensure_exp_params(hmaxent::model *this)
{
  long double **v2;
  double **v3;
  double *v4;
  double *v5;
  uint64_t v6;
  long double *v7;
  double *v8;
  long double v9;

  if (!*((_BYTE *)this + 72))
  {
    v2 = (long double **)((char *)this + 40);
    v3 = (double **)*((_QWORD *)this + 15);
    v5 = *v3;
    v4 = v3[1];
    v6 = v4 - *v3;
    if (v6 != (uint64_t)(*((_QWORD *)this + 6) - *((_QWORD *)this + 5)) >> 3)
      std::valarray<double>::resize((uint64_t)this + 40, v4 - *v3, 0.0);
    if (v4 != v5)
    {
      v7 = *v2;
      v8 = *v3;
      do
      {
        v9 = *v8++;
        *v7++ = exp(v9);
        --v6;
      }
      while (v6);
    }
  }
  *((_BYTE *)this + 72) = 1;
}

long double logsumexp<double>(double **a1)
{
  double *v1;
  double *v2;
  double *v3;
  double v4;
  double *v5;
  double *v6;
  double v7;
  double v8;
  double v9;
  double v10;
  _QWORD v12[5];
  double v13;

  v1 = *a1;
  v2 = a1[1];
  if (*a1 == v2)
  {
    v9 = 0.0;
  }
  else
  {
    v3 = v1 + 1;
    if (v1 + 1 == v2)
    {
      v5 = *a1;
    }
    else
    {
      v4 = *v1;
      v5 = *a1;
      v6 = v1 + 1;
      do
      {
        v7 = *v6++;
        v8 = v7;
        if (v4 < v7)
        {
          v4 = v8;
          v5 = v3;
        }
        v3 = v6;
      }
      while (v6 != v2);
    }
    v9 = *v5;
  }
  v13 = v9;
  v12[2] = a1;
  v12[3] = &v13;
  v12[4] = v2 - v1;
  v10 = std::__val_expr<std::_UnaryOp<std::__exp_expr<double>,std::__val_expr<std::_BinaryOp<std::minus<double>,std::valarray<double>,std::__scalar_expr<double>>>>>::sum[abi:ne180100]((uint64_t)v12);
  return v9 + log(v10);
}

double std::__val_expr<std::_BinaryOp<std::multiplies<double>,std::__val_expr<std::_BinaryOp<std::minus<double>,std::valarray<double>,std::__scalar_expr<double>>>,std::__val_expr<std::_UnaryOp<std::__exp_expr<double>,std::valarray<double>>>>>::sum[abi:ne180100](uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  double *v4;
  uint64_t v5;
  double v6;
  double v7;
  uint64_t v8;
  double v9;
  uint64_t v10;
  uint64_t v11;
  double *v12;
  double *v13;
  double v14;
  double v15;
  long double v16;

  v2 = *(_QWORD *)(a1 + 16);
  v4 = *(double **)v2;
  v3 = *(_QWORD *)(v2 + 8);
  v5 = v3 - *(_QWORD *)v2;
  if (v3 == *(_QWORD *)v2)
  {
    v7 = 0.0;
  }
  else
  {
    v6 = *v4 - **(double **)(a1 + 24);
    v7 = v6 * exp(***(long double ***)(a1 + 48));
  }
  if ((unint64_t)v5 >= 9)
  {
    v8 = v5 >> 3;
    v9 = **(double **)(a1 + 24);
    v10 = **(_QWORD **)(a1 + 48);
    if ((unint64_t)(v5 >> 3) <= 2)
      v8 = 2;
    v11 = v8 - 1;
    v12 = v4 + 1;
    v13 = (double *)(v10 + 8);
    do
    {
      v14 = *v12++;
      v15 = v14 - v9;
      v16 = *v13++;
      v7 = v7 + v15 * exp(v16);
      --v11;
    }
    while (v11);
  }
  return v7;
}

void hmaxent::model::param_sums(uint64_t ***this@<X0>, uint64_t ***a2@<X8>)
{
  unint64_t v4;
  uint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  _BYTE *v13;
  double *v14;
  double *v15;
  double v16;
  uint64_t **v17;
  void *__p;
  _BYTE *v19;
  uint64_t **v20;
  void *v21;
  uint64_t v22;
  void *v23;
  _BYTE *v24;

  std::valarray<double>::valarray(a2, this[15]);
  v4 = (unint64_t)*this[2];
  if (v4 < 2)
    return;
  v5 = *this[14];
  v6 = 1;
  v7 = 1;
  do
  {
    v8 = v5[v6 - 1];
    if (v8 < 1)
      goto LABEL_23;
    v9 = 0;
    do
    {
      v10 = *this[2][4] + 32 * (v9 + v7);
      v12 = *(_QWORD *)(v10 + 16);
      v11 = *(char **)(v10 + 24);
      v20 = &this[12][v12];
      v21 = v11;
      v22 = 1;
      std::valarray<unsigned long>::valarray(&v23, (uint64_t)&v20);
      v20 = *a2;
      std::valarray<unsigned long>::valarray(&v21, (uint64_t **)&v23);
      std::valarray<double>::valarray(&__p, (uint64_t *)&v20);
      v13 = __p;
      if (v11)
      {
        v14 = (double *)&(*a2)[v12];
        v15 = (double *)__p;
        do
        {
          v16 = *v15++;
          *v14 = v16 + *v14;
          ++v14;
          --v11;
        }
        while (v11);
      }
      else if (!__p)
      {
        goto LABEL_13;
      }
      if (v19 != v13)
        v19 += (v13 - v19 + 7) & 0xFFFFFFFFFFFFFFF8;
      operator delete(v13);
      __p = 0;
      v19 = 0;
LABEL_13:
      if (v21)
      {
        if ((void *)v22 != v21)
          v22 += ((unint64_t)v21 - v22 + 7) & 0xFFFFFFFFFFFFFFF8;
        operator delete(v21);
      }
      if (v23)
      {
        if (v24 != v23)
          v24 += ((_BYTE *)v23 - v24 + 7) & 0xFFFFFFFFFFFFFFF8;
        operator delete(v23);
      }
      ++v9;
      v17 = this[14];
      v5 = *v17;
      v8 = (*v17)[v6 - 1];
    }
    while (v9 < v8);
    v4 = (unint64_t)*this[2];
LABEL_23:
    v7 += v8;
    ++v6;
  }
  while (v6 < v4);
}

void sub_1AD8B8D98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, void *a15, uint64_t a16)
{
  uint64_t v16;

  if (__p)
    operator delete(__p);
  if (a15)
    operator delete(a15);
  std::valarray<unsigned long>::~valarray[abi:ne180100](v16);
  _Unwind_Resume(a1);
}

void hmaxent::model::fit()
{
  std::operator<<[abi:ne180100]<std::char_traits<char>>(MEMORY[0x1E0DE4A50], "maxent model estimation not supported (requires liblbfgs)\n");
  exit(2);
}

double hmaxent::model::log_prob_context(unint64_t **this, uint64_t a2, unint64_t a3)
{
  uint64_t v4;
  double result;
  unint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;

  v4 = a2;
  result = -*(double *)&(*hmaxent::model::lognormconst(this))[a2];
  v7 = this[2];
  v8 = *(_QWORD *)v7[4];
  if (v8)
  {
    v9 = *(_QWORD *)v7[3];
    while (1)
    {
      v10 = v8 + 32 * v4;
      v11 = *(_QWORD *)(v10 + 16);
      v12 = v11 + *(_QWORD *)(v10 + 24) - 1;
      if (v11 <= v12)
      {
        v14 = *(_QWORD *)(v10 + 16);
        do
        {
          v11 = (v14 + v12) >> 1;
          v13 = *(_QWORD *)(v9 + 8 * v11);
          if (v13 >= a3)
          {
            if (v13 <= a3)
              break;
            v12 = v11 - 1;
          }
          else
          {
            v14 = v11 + 1;
          }
        }
        while (v14 <= v12);
      }
      else
      {
        v13 = *(_QWORD *)(v9 + 8 * v11);
      }
      if (v13 == a3)
        result = result + *(double *)(*this[15] + 8 * v11);
      if (!*(_DWORD *)v10)
        break;
      v4 = *(_QWORD *)(v8 + 32 * v4 + 8);
    }
  }
  return result;
}

_QWORD *std::valarray<unsigned long>::valarray(_QWORD *a1, uint64_t **a2)
{
  uint64_t *v3;
  size_t v4;
  char *v6;
  uint64_t *v7;
  char *v8;
  uint64_t v9;

  *a1 = 0;
  a1[1] = 0;
  v3 = a2[1];
  v4 = (char *)v3 - (char *)*a2;
  if (v3 != *a2)
  {
    if ((v4 & 0x8000000000000000) != 0)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v6 = (char *)operator new(v4);
    *a1 = v6;
    a1[1] = v6;
    v7 = *a2;
    if (*a2 != a2[1])
    {
      v8 = v6 + 8;
      do
      {
        v9 = *v7++;
        *((_QWORD *)v8 - 1) = v9;
        a1[1] = v8;
        v8 += 8;
      }
      while (v7 != a2[1]);
    }
  }
  return a1;
}

_QWORD *std::valarray<double>::valarray(_QWORD *a1, uint64_t **a2)
{
  uint64_t *v3;
  size_t v4;
  char *v6;
  uint64_t *v7;
  char *v8;
  uint64_t v9;

  *a1 = 0;
  a1[1] = 0;
  v3 = a2[1];
  v4 = (char *)v3 - (char *)*a2;
  if (v3 != *a2)
  {
    if ((v4 & 0x8000000000000000) != 0)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v6 = (char *)operator new(v4);
    *a1 = v6;
    a1[1] = v6;
    v7 = *a2;
    if (*a2 != a2[1])
    {
      v8 = v6 + 8;
      do
      {
        v9 = *v7++;
        *((_QWORD *)v8 - 1) = v9;
        a1[1] = v8;
        v8 += 8;
      }
      while (v7 != a2[1]);
    }
  }
  return a1;
}

void std::valarray<double>::resize(uint64_t a1, unint64_t a2, double a3)
{
  _BYTE *v6;
  _BYTE *v7;
  double *v8;

  v6 = *(_BYTE **)a1;
  if (v6)
  {
    v7 = *(_BYTE **)(a1 + 8);
    if (v7 != v6)
      *(_QWORD *)(a1 + 8) = &v7[(v6 - v7 + 7) & 0xFFFFFFFFFFFFFFF8];
    operator delete(v6);
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
  }
  if (a2)
  {
    if (a2 >> 61)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v8 = (double *)operator new(8 * a2);
    *(_QWORD *)a1 = v8;
    do
    {
      *v8++ = a3;
      --a2;
    }
    while (a2);
    *(_QWORD *)(a1 + 8) = v8;
  }
}

_QWORD *std::valarray<double>::valarray(_QWORD *a1, uint64_t a2)
{
  unint64_t v3;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;

  *a1 = 0;
  a1[1] = 0;
  v3 = *(_QWORD *)(a2 + 8);
  if (v3)
  {
    if (v3 >> 61)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v5 = operator new(8 * v3);
    *a1 = v5;
    v6 = *(_QWORD **)a2;
    v7 = 8 * *(_QWORD *)(a2 + 16);
    do
    {
      *v5++ = *v6;
      v6 = (_QWORD *)((char *)v6 + v7);
      --v3;
    }
    while (v3);
    a1[1] = v5;
  }
  return a1;
}

double std::__val_expr<std::_UnaryOp<std::__exp_expr<double>,std::__val_expr<std::_BinaryOp<std::minus<double>,std::valarray<double>,std::__scalar_expr<double>>>>>::sum[abi:ne180100](uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  double *v4;
  uint64_t v5;
  double v6;
  uint64_t v7;
  double v8;
  uint64_t v9;
  double *v10;
  double v11;

  v2 = *(_QWORD *)(a1 + 16);
  v4 = *(double **)v2;
  v3 = *(_QWORD *)(v2 + 8);
  v5 = v3 - *(_QWORD *)v2;
  if (v3 == *(_QWORD *)v2)
    v6 = 0.0;
  else
    v6 = exp(*v4 - **(double **)(a1 + 24));
  if ((unint64_t)v5 >= 9)
  {
    v7 = v5 >> 3;
    v8 = **(double **)(a1 + 24);
    if ((unint64_t)(v5 >> 3) <= 2)
      v7 = 2;
    v9 = v7 - 1;
    v10 = v4 + 1;
    do
    {
      v11 = *v10++;
      v6 = v6 + exp(v11 - v8);
      --v9;
    }
    while (v9);
  }
  return v6;
}

_QWORD *std::valarray<double>::valarray(_QWORD *a1, uint64_t *a2)
{
  char *v3;
  char *v4;
  size_t v5;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;

  *a1 = 0;
  a1[1] = 0;
  v4 = (char *)a2[1];
  v3 = (char *)a2[2];
  v5 = v3 - v4;
  if (v3 != v4)
  {
    if ((v5 & 0x8000000000000000) != 0)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v7 = operator new(v5);
    *a1 = v7;
    v8 = *a2;
    do
    {
      v9 = *(_QWORD *)v4;
      v4 += 8;
      *v7++ = *(_QWORD *)(v8 + 8 * v9);
    }
    while (v4 != v3);
    a1[1] = v7;
  }
  return a1;
}

_QWORD *std::valarray<unsigned long>::valarray(_QWORD *a1, uint64_t a2)
{
  unint64_t v3;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;

  *a1 = 0;
  a1[1] = 0;
  v3 = *(_QWORD *)(a2 + 8);
  if (v3)
  {
    if (v3 >> 61)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v5 = operator new(8 * v3);
    *a1 = v5;
    v6 = *(_QWORD **)a2;
    v7 = 8 * *(_QWORD *)(a2 + 16);
    do
    {
      *v5++ = *v6;
      v6 = (_QWORD *)((char *)v6 + v7);
      --v3;
    }
    while (v3);
    a1[1] = v5;
  }
  return a1;
}

uint64_t quasar::InverseTextNormalizer::char32Converter(quasar::InverseTextNormalizer *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  uint64_t v4;

  if ((v1 & 1) == 0
  {
    v3 = operator new();
    v4 = operator new();
    *(_OWORD *)(v4 + 8) = xmmword_1AE1402C0;
    *(_DWORD *)(v4 + 24) = 0;
    *(_QWORD *)v4 = &unk_1E5D40240;
    *(_OWORD *)v3 = 0u;
    *(_OWORD *)(v3 + 16) = 0u;
    *(_OWORD *)(v3 + 32) = 0u;
    *(_QWORD *)(v3 + 48) = v4;
    *(_OWORD *)(v3 + 56) = 0u;
    *(_OWORD *)(v3 + 72) = 0u;
    *(_OWORD *)(v3 + 88) = 0u;
    *(_OWORD *)(v3 + 104) = 0u;
    *(_OWORD *)(v3 + 120) = 0u;
    *(_OWORD *)(v3 + 136) = 0u;
    *(_OWORD *)(v3 + 152) = 0u;
    *(_OWORD *)(v3 + 168) = 0u;
    *(_QWORD *)(v3 + 184) = 0;
    quasar::InverseTextNormalizer::char32Converter(void)::converter = v3;
  }
  return quasar::InverseTextNormalizer::char32Converter(void)::converter;
}

void sub_1AD8B933C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x1032C4095874D8CLL);
  _Unwind_Resume(a1);
}

uint64_t quasar::VocabId::VocabId(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  marisa::grimoire::trie::LoudsTrie ***v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  std::ios_base *v17;
  unint64_t v18;
  fst::MappedFile *v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  void *v28;
  size_t v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  _QWORD *v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  std::string v46;
  void *v47;
  int64_t v48;
  char v49;
  _BYTE v50[15];
  char v51;
  void *v52[2];
  char v53;
  int v54;
  int64_t v55;
  void *v56;
  void *__p[2];
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  _OWORD v75[25];
  _QWORD v76[21];

  v76[19] = *MEMORY[0x1E0C80C00];
  *(_OWORD *)(a1 + 16) = 0u;
  v10 = (marisa::grimoire::trie::LoudsTrie ***)(a1 + 16);
  *(_OWORD *)(a1 + 32) = 0u;
  v45 = a1 + 32;
  *(_QWORD *)(a1 + 64) = 0;
  *(_BYTE *)(a1 + 72) = 0;
  *(_DWORD *)(a1 + 80) = 0;
  v44 = a1 + 56;
  *(_OWORD *)a1 = 0u;
  *(_QWORD *)(a1 + 48) = 0;
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 88), "<PAD>");
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 112), "<unk>");
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 136), "<s>");
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 160), "</s>");
  v11 = *(unsigned __int8 *)(a3 + 23);
  if ((v11 & 0x80u) != 0)
    v11 = *(_QWORD *)(a3 + 8);
  if (v11)
  {
    v43 = a5;
    v12 = MEMORY[0x1E0DE4FA8];
    v13 = MEMORY[0x1E0DE4FA8] + 64;
    v14 = (_QWORD *)MEMORY[0x1E0DE4F40];
    v15 = *(_QWORD *)(MEMORY[0x1E0DE4F40] + 8);
    v16 = *(_QWORD *)(MEMORY[0x1E0DE4F40] + 16);
    v76[0] = MEMORY[0x1E0DE4FA8] + 64;
    *(_QWORD *)&v74 = v15;
    *(_QWORD *)((char *)&v75[-1] + *(_QWORD *)(v15 - 24)) = v16;
    *((_QWORD *)&v74 + 1) = 0;
    v17 = (std::ios_base *)((char *)&v75[-1] + *(_QWORD *)(v74 - 24));
    std::ios_base::init(v17, v75);
    v17[1].__vftable = 0;
    v17[1].__fmtflags_ = -1;
    *(_QWORD *)&v74 = v12 + 24;
    v76[0] = v13;
    MEMORY[0x1AF44CA64](v75);
    std::ifstream::open();
    fst::FstReadOptions::FstReadOptions(v52, a3, 0, 0, 0);
    v54 = 2;
    std::istream::seekg();
    std::istream::tellg();
    v18 = v65;
    std::istream::seekg();
    v19 = fst::MappedFile::Map((uint64_t)&v74, (uint64_t)v52, v18);
    std::shared_ptr<fst::MappedFile>::shared_ptr[abi:ne180100]<fst::MappedFile,void>(__p, (uint64_t)v19);
    std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100](v45, (__int128 *)__p);
    v20 = (std::__shared_weak_count *)__p[1];
    if (__p[1])
    {
      v21 = (unint64_t *)((char *)__p[1] + 8);
      do
        v22 = __ldaxr(v21);
      while (__stlxr(v22 - 1, v21));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
      }
    }
    *(_QWORD *)(a1 + 48) = v18;
    if (!*(_QWORD *)(a1 + 32))
    {
      v72 = 0u;
      v73 = 0u;
      v70 = 0u;
      v71 = 0u;
      v68 = 0u;
      v69 = 0u;
      v66 = 0u;
      v67 = 0u;
      v64 = 0u;
      v65 = 0u;
      v62 = 0u;
      v63 = 0u;
      v60 = 0u;
      v61 = 0u;
      v58 = 0u;
      v59 = 0u;
      *(_OWORD *)__p = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
      v39 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Could not read mapped vocab-marisa-trie-file ", 45);
      v40 = *(char *)(a3 + 23);
      if (v40 >= 0)
        v41 = a3;
      else
        v41 = *(_QWORD *)a3;
      if (v40 >= 0)
        v42 = *(unsigned __int8 *)(a3 + 23);
      else
        v42 = *(_QWORD *)(a3 + 8);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v39, v41, v42);
      quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)__p);
    }
    _ZNSt3__115allocate_sharedB8ne180100IN6marisa4TrieENS_9allocatorIS2_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(__p);
    std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100]((uint64_t)v10, (__int128 *)__p);
    v23 = (std::__shared_weak_count *)__p[1];
    if (__p[1])
    {
      v24 = (unint64_t *)((char *)__p[1] + 8);
      do
        v25 = __ldaxr(v24);
      while (__stlxr(v25 - 1, v24));
      if (!v25)
      {
        ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
        std::__shared_weak_count::__release_weak(v23);
      }
    }
    marisa::Trie::map(*v10, *(const void **)(*(_QWORD *)v45 + 8), v18);
    v26 = *(unsigned __int8 *)(a4 + 23);
    if ((v26 & 0x80u) != 0)
      v26 = *(_QWORD *)(a4 + 8);
    if (v26)
    {
      v51 = 0;
      kaldi::Input::Input(v50, a4, &v51);
      v27 = (_QWORD *)kaldi::Input::Stream((kaldi::Input *)v50);
      __p[0] = 0;
      __p[1] = 0;
      *(_QWORD *)&v58 = 0;
      v55 = 0;
      v56 = 0;
      kaldi::ReadIntegerVector<int>(v27, 1, (std::vector<int> *)__p, 0, 0, &v56, &v55);
      v28 = __p[0];
      if (__p[0] == __p[1])
      {
        v30 = v56;
        v48 = v55;
        v49 = 0;
      }
      else
      {
        v29 = (char *)__p[1] - (char *)__p[0];
        v48 = ((char *)__p[1] - (char *)__p[0]) >> 2;
        v49 = 1;
        v30 = (void *)operator new[]();
        memcpy(v30, v28, v29);
        v28 = __p[0];
      }
      v47 = v30;
      if (v28)
      {
        __p[1] = v28;
        operator delete(v28);
      }
      kaldi::MappableVector<int>::operator=(v44, (uint64_t)&v47);
      if (v49 && v47)
        MEMORY[0x1AF44D160](v47, 0x1000C8077774924);
      v31 = *(_QWORD *)(a1 + 64);
      if (v31 != marisa::Trie::num_keys(*(marisa::Trie **)(a1 + 16)))
      {
        v72 = 0u;
        v73 = 0u;
        v70 = 0u;
        v71 = 0u;
        v68 = 0u;
        v69 = 0u;
        v66 = 0u;
        v67 = 0u;
        v64 = 0u;
        v65 = 0u;
        v62 = 0u;
        v63 = 0u;
        v60 = 0u;
        v61 = 0u;
        v58 = 0u;
        v59 = 0u;
        *(_OWORD *)__p = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"marisa-relabel-file vector size is different than number of keys in marisa-trie-file", 84);
        quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)__p);
      }
      kaldi::Input::~Input((kaldi::Input *)v50);
    }
    quasar::VocabId::initMarisaToken(a1, v43);
    if (v53 < 0)
      operator delete(v52[0]);
    *(_QWORD *)&v74 = *v14;
    *(_QWORD *)((char *)&v75[-1] + *(_QWORD *)(v74 - 24)) = v14[3];
    MEMORY[0x1AF44CA70](v75);
    std::istream::~istream();
    MEMORY[0x1AF44D094](v76);
  }
  v32 = *(unsigned __int8 *)(a2 + 23);
  v33 = (char)v32;
  if ((v32 & 0x80u) != 0)
    v32 = *(_QWORD *)(a2 + 8);
  if (v32 && !*v10)
  {
    if (v33 < 0)
      std::string::__init_copy_ctor_external(&v46, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
    else
      v46 = *(std::string *)a2;
    __p[0] = 0;
    LOBYTE(v47) = 0;
    kaldi::Input::OpenInternal(__p, (uint64_t)&v46, 1, &v47);
    v34 = kaldi::Input::Stream((kaldi::Input *)__p);
    std::allocate_shared[abi:ne180100]<kaldi::quasar::Vocab,std::allocator<kaldi::quasar::Vocab>,std::istream &,BOOL &,void>(v34, (unsigned __int8 *)&v47, &v74);
    std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100](a1, &v74);
    v35 = (std::__shared_weak_count *)*((_QWORD *)&v74 + 1);
    if (*((_QWORD *)&v74 + 1))
    {
      v36 = (unint64_t *)(*((_QWORD *)&v74 + 1) + 8);
      do
        v37 = __ldaxr(v36);
      while (__stlxr(v37 - 1, v36));
      if (!v37)
      {
        ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
        std::__shared_weak_count::__release_weak(v35);
      }
    }
    kaldi::Input::Close((kaldi::Input *)__p);
    kaldi::Input::~Input((kaldi::Input *)__p);
    if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v46.__r_.__value_.__l.__data_);
  }
  if (!*(_QWORD *)a1 && !*v10)
  {
    memset(v75, 0, 256);
    v74 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v74);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v74, (uint64_t)"Not able to create vocab table from neither source-vocab-file nor vocab-marisa-trie-file", 88);
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&v74);
  }
  return a1;
}

void sub_1AD8B99D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,void *a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  uint64_t a72;
  _BYTE *v72;
  uint64_t v73;
  void **v75;
  void **v76;
  void **v77;
  void **v78;
  _QWORD *v79;
  uint64_t v80;

  kaldi::Input::~Input((kaldi::Input *)&a23);
  if (a30 < 0)
    operator delete(__p);
  std::ifstream::~ifstream(&a72);
  if ((char)v72[183] < 0)
    operator delete(*v75);
  if ((char)v72[159] < 0)
    operator delete(*v76);
  if ((char)v72[135] < 0)
    operator delete(*v77);
  if ((char)v72[111] < 0)
    operator delete(*v78);
  if (v72[72])
  {
    if (*v79)
      MEMORY[0x1AF44D160](*v79, 0x1000C8077774924);
  }
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](v80);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](v73);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)v72);
  _Unwind_Resume(a1);
}

uint64_t kaldi::MappableVector<int>::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  if (*(_BYTE *)(a1 + 16) && *(_QWORD *)a1)
    MEMORY[0x1AF44D160]();
  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_BYTE *)(a2 + 16) = 0;
  return a1;
}

void quasar::VocabId::initMarisaToken(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;
  _QWORD *v12;
  const char *v13;
  _QWORD *v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  _OWORD v19[17];
  char v20[36];
  int v21;

  v3 = *(unsigned __int8 *)(a2 + 23);
  if ((v3 & 0x80u) != 0)
    v3 = *(_QWORD *)(a2 + 8);
  if (v3)
  {
    *(_QWORD *)&v19[0] = 0;
    v20[0] = 0;
    kaldi::Input::OpenInternal(v19, a2, 1, v20);
    v4 = (uint64_t *)kaldi::Input::Stream((kaldi::Input *)v19);
    kaldi::ExpectToken(v4, v20[0], "<UnknownWord>");
    v5 = (uint64_t *)kaldi::Input::Stream((kaldi::Input *)v19);
    kaldi::ReadToken(v5, v20[0], a1 + 112);
    v6 = (uint64_t *)kaldi::Input::Stream((kaldi::Input *)v19);
    kaldi::ExpectToken(v6, v20[0], "<BeginOfSentenceWord>");
    v7 = (uint64_t *)kaldi::Input::Stream((kaldi::Input *)v19);
    kaldi::ReadToken(v7, v20[0], a1 + 136);
    v8 = (uint64_t *)kaldi::Input::Stream((kaldi::Input *)v19);
    kaldi::ExpectToken(v8, v20[0], "<EndOfSentenceWord>");
    v9 = (uint64_t *)kaldi::Input::Stream((kaldi::Input *)v19);
    kaldi::ReadToken(v9, v20[0], a1 + 160);
    v10 = (uint64_t *)kaldi::Input::Stream((kaldi::Input *)v19);
    kaldi::ExpectToken(v10, v20[0], "<PaddingWord>");
    v11 = (uint64_t *)kaldi::Input::Stream((kaldi::Input *)v19);
    kaldi::ReadToken(v11, v20[0], a1 + 88);
    kaldi::Input::~Input((kaldi::Input *)v19);
  }
  if (*(_QWORD *)(a1 + 16))
  {
    marisa::Agent::Agent((marisa::Agent *)v20);
    if (*(char *)(a1 + 135) < 0)
      v13 = *(const char **)(a1 + 112);
    else
      v13 = (const char *)(a1 + 112);
    marisa::Agent::set_query(v12, v13);
    if (!marisa::Trie::lookup(*(marisa::grimoire::trie::LoudsTrie ***)(a1 + 16), (marisa::Agent *)v20))
    {
      memset(v19, 0, sizeof(v19));
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v19);
      v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"Cannot find special token \"", 27);
      v15 = *(char *)(a1 + 135);
      if (v15 >= 0)
        v16 = a1 + 112;
      else
        v16 = *(_QWORD *)(a1 + 112);
      if (v15 >= 0)
        v17 = *(unsigned __int8 *)(a1 + 135);
      else
        v17 = *(_QWORD *)(a1 + 120);
      v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, v16, v17);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)"\" as OOV word. Need to specify special tokens in marisa-token-file", 66);
      quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v19);
    }
    *(_DWORD *)(a1 + 80) = v21;
    marisa::Agent::~Agent((marisa::Agent *)v20);
  }
}

void sub_1AD8B9D9C(_Unwind_Exception *a1)
{
  uint64_t v1;

  marisa::Agent::~Agent((marisa::Agent *)(v1 - 80));
  _Unwind_Resume(a1);
}

uint64_t quasar::VocabId::getWordId(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD *v6;
  const char *v7;
  unsigned int v8;
  unsigned int *v9;
  unint64_t v10;
  unint64_t v11;
  _OWORD v12[17];
  _BYTE v13[36];
  int v14;

  v4 = *(_QWORD *)a1;
  if (v4)
    return kaldi::quasar::Vocab::GetWordId(v4, (unsigned __int8 *)a2);
  if (!*(_QWORD *)(a1 + 16))
    return 0;
  marisa::Agent::Agent((marisa::Agent *)v13);
  if (*(char *)(a2 + 23) >= 0)
    v7 = (const char *)a2;
  else
    v7 = *(const char **)a2;
  marisa::Agent::set_query(v6, v7);
  v8 = marisa::Trie::lookup(*(marisa::grimoire::trie::LoudsTrie ***)(a1 + 16), (marisa::Agent *)v13);
  v9 = (unsigned int *)&v14;
  if (!v8)
    v9 = (unsigned int *)(a1 + 80);
  v10 = *v9;
  v11 = *(_QWORD *)(a1 + 64);
  if (v11)
  {
    if ((v10 & 0x80000000) != 0 || v11 <= v10)
    {
      memset(v12, 0, sizeof(v12));
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v12);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"wordId out of bound in marisaLabelMapping", 41);
      quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v12);
    }
    v10 = *(unsigned int *)(*(_QWORD *)(a1 + 56) + 4 * v10);
  }
  marisa::Agent::~Agent((marisa::Agent *)v13);
  return v10;
}

void sub_1AD8B9EEC(_Unwind_Exception *a1)
{
  uint64_t v1;

  marisa::Agent::~Agent((marisa::Agent *)(v1 - 80));
  _Unwind_Resume(a1);
}

void quasar::LabelTransformer::init(quasar::LabelTransformer *this, const quasar::PTree *a2, const quasar::SystemConfig *a3, char a4, char a5)
{
  uint64_t String;
  __int128 v11;
  uint64_t ModelLoaderPtr;
  _QWORD *v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  const void **v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  void *v26;
  unint64_t *v27;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  void *v33;
  unint64_t *v34;
  unint64_t *v35;
  unint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  uint64_t v43;
  __int128 v44;
  uint64_t v45;
  __int128 v46;
  unsigned int BoolOptional;
  unsigned int v48;
  const std::string **v49;
  unsigned __int8 *v50;
  unsigned __int8 *v51;
  unsigned __int8 *v52;
  uint64_t *v53;
  unsigned __int8 *v54;
  int v55;
  uint64_t *v56;
  BOOL v60;
  BOOL v61;
  uint64_t v63;
  BOOL v64;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v77;
  uint64_t v78;
  char v79;
  uint64_t v82;
  std::string::size_type size;
  std::string *v84;
  std::string *v85;
  int v86;
  const std::string::value_type *v87;
  std::string::size_type v88;
  std::string *v89;
  __int128 v90;
  unint64_t *v91;
  unint64_t v92;
  std::__shared_weak_count *v93;
  unint64_t *v94;
  unint64_t v95;
  uint64_t v96;
  uint64_t v97;
  char **v98;
  std::__shared_weak_count *v99;
  unint64_t *v100;
  unint64_t v101;
  uint64_t Int;
  int v103;
  char **v104;
  unsigned __int8 *v105;
  char **v106;
  unsigned __int8 *v107;
  uint64_t v108;
  int v109;
  uint64_t v110;
  char v111;
  const std::string **v112;
  const std::string **i;
  float v114;
  std::__shared_weak_count *v115;
  unint64_t *v116;
  unint64_t v117;
  quasar::SystemConfig *v118;
  const quasar::PTree *v119;
  uint64_t v120;
  uint64_t v121;
  void *v122;
  void *v123;
  const std::string **v124;
  _QWORD *v125;
  std::__shared_weak_count *v126;
  std::string v127;
  void *v128[2];
  std::string::size_type v129;
  __int128 v130;
  void *v131;
  unsigned __int8 *v132;
  uint64_t v133;
  int v134;
  void *__p[2];
  __int128 v136;
  __int128 v137;
  __int128 v138;
  __int128 v139;
  __int128 v140;
  __int128 v141;
  __int128 v142;
  _BYTE v143[160];
  __int128 v144;
  uint64_t v145;
  _OWORD v146[2];
  int v147;
  std::string v148;
  std::string v149;
  unsigned __int8 *v150;
  std::__shared_weak_count *v151;
  _QWORD *v152;
  std::__shared_weak_count *v153;
  std::string v154;

  *((_QWORD *)this + 6) = quasar::SystemConfig::getConfigFileVersion(a3);
  std::string::basic_string[abi:ne180100]<0>(__p, "nnet-file");
  String = quasar::PTree::getString((uint64_t)a2, (__int128 *)__p);
  if (*(char *)(String + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v154, *(const std::string::value_type **)String, *(_QWORD *)(String + 8));
  }
  else
  {
    v11 = *(_OWORD *)String;
    v154.__r_.__value_.__r.__words[2] = *(_QWORD *)(String + 16);
    *(_OWORD *)&v154.__r_.__value_.__l.__data_ = v11;
  }
  if (SBYTE7(v136) < 0)
    operator delete(__p[0]);
  quasar::SystemConfig::makePathAbsolute(a3, (uint64_t)&v154, 1);
  ModelLoaderPtr = quasar::SystemConfig::getModelLoaderPtr(a3);
  v13 = *(_QWORD **)ModelLoaderPtr;
  v14 = *(std::__shared_weak_count **)(ModelLoaderPtr + 8);
  v152 = v13;
  v153 = v14;
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldxr(p_shared_owners);
    while (__stxr(v16 + 1, p_shared_owners));
  }
  if ((a5 & 1) == 0)
  {
    v150 = 0;
    v151 = 0;
    quasar::ModelLoader::readNeuralNetwork(v13, (uint64_t)&v154, 1u, 0, 0, &v150, (uint64_t *)v146);
    v17 = v151;
    if (v151)
    {
      v18 = (unint64_t *)&v151->__shared_owners_;
      do
        v19 = __ldaxr(v18);
      while (__stlxr(v19 - 1, v18));
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
      }
    }
    if (*(_QWORD *)&v146[0])
    {
      *(_OWORD *)__p = v146[0];
      if (*((_QWORD *)&v146[0] + 1))
      {
        v20 = (unint64_t *)(*((_QWORD *)&v146[0] + 1) + 8);
        do
          v21 = __ldxr(v20);
        while (__stxr(v21 + 1, v20));
      }
    }
    else
    {
      __p[0] = 0;
      __p[1] = 0;
    }
    v22 = (const void **)((char *)this + 56);
    std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100]((uint64_t)this + 56, (__int128 *)__p);
    v23 = (std::__shared_weak_count *)__p[1];
    if (__p[1])
    {
      v24 = (unint64_t *)((char *)__p[1] + 8);
      do
        v25 = __ldaxr(v24);
      while (__stlxr(v25 - 1, v24));
      if (!v25)
      {
        ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
        std::__shared_weak_count::__release_weak(v23);
      }
    }
    if (!*v22)
    {
      v142 = 0u;
      memset(v143, 0, 144);
      v140 = 0u;
      v141 = 0u;
      v138 = 0u;
      v139 = 0u;
      v136 = 0u;
      v137 = 0u;
      *(_OWORD *)__p = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"The model is not of type kaldi::InferenceNetItf.", 48);
      quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)__p);
    }
    if (v26)
    {
      v27 = (unint64_t *)*((_QWORD *)this + 8);
      __p[0] = v26;
      __p[1] = v27;
      if (v27)
      {
        v28 = v27 + 1;
        do
          v29 = __ldxr(v28);
        while (__stxr(v29 + 1, v28));
      }
    }
    else
    {
      __p[0] = 0;
      __p[1] = 0;
    }
    std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100]((uint64_t)this + 72, (__int128 *)__p);
    v30 = (std::__shared_weak_count *)__p[1];
    if (__p[1])
    {
      v31 = (unint64_t *)((char *)__p[1] + 8);
      do
        v32 = __ldaxr(v31);
      while (__stlxr(v32 - 1, v31));
      if (!v32)
      {
        ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
        std::__shared_weak_count::__release_weak(v30);
      }
    }
    if (*v22
    {
      v34 = (unint64_t *)*((_QWORD *)this + 8);
      __p[0] = v33;
      __p[1] = v34;
      if (v34)
      {
        v35 = v34 + 1;
        do
          v36 = __ldxr(v35);
        while (__stxr(v36 + 1, v35));
      }
    }
    else
    {
      __p[0] = 0;
      __p[1] = 0;
    }
    std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100]((uint64_t)this + 88, (__int128 *)__p);
    v37 = (std::__shared_weak_count *)__p[1];
    if (__p[1])
    {
      v38 = (unint64_t *)((char *)__p[1] + 8);
      do
        v39 = __ldaxr(v38);
      while (__stlxr(v39 - 1, v38));
      if (!v39)
      {
        ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
        std::__shared_weak_count::__release_weak(v37);
      }
    }
    v40 = (std::__shared_weak_count *)*((_QWORD *)&v146[0] + 1);
    if (*((_QWORD *)&v146[0] + 1))
    {
      v41 = (unint64_t *)(*((_QWORD *)&v146[0] + 1) + 8);
      do
        v42 = __ldaxr(v41);
      while (__stlxr(v42 - 1, v41));
      if (!v42)
      {
        ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
        std::__shared_weak_count::__release_weak(v40);
      }
    }
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "action-fst-directory");
  v43 = quasar::PTree::getString((uint64_t)a2, (__int128 *)__p);
  if (*(char *)(v43 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v149, *(const std::string::value_type **)v43, *(_QWORD *)(v43 + 8));
  }
  else
  {
    v44 = *(_OWORD *)v43;
    v149.__r_.__value_.__r.__words[2] = *(_QWORD *)(v43 + 16);
    *(_OWORD *)&v149.__r_.__value_.__l.__data_ = v44;
  }
  if (SBYTE7(v136) < 0)
    operator delete(__p[0]);
  quasar::SystemConfig::makePathAbsolute(a3, (uint64_t)&v149, 1);
  std::string::basic_string[abi:ne180100]<0>(__p, "label-tsv-file");
  v45 = quasar::PTree::getString((uint64_t)a2, (__int128 *)__p);
  if (*(char *)(v45 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v148, *(const std::string::value_type **)v45, *(_QWORD *)(v45 + 8));
  }
  else
  {
    v46 = *(_OWORD *)v45;
    v148.__r_.__value_.__r.__words[2] = *(_QWORD *)(v45 + 16);
    *(_OWORD *)&v148.__r_.__value_.__l.__data_ = v46;
  }
  if (SBYTE7(v136) < 0)
    operator delete(__p[0]);
  quasar::SystemConfig::makePathAbsolute(a3, (uint64_t)&v148, 1);
  std::string::basic_string[abi:ne180100]<0>(__p, "convert-to-plain-text-after-label");
  BoolOptional = (unsigned __int16)quasar::PTree::getBoolOptional((uint64_t)a2, (uint64_t)__p);
  if (BoolOptional <= 0x100)
    LOBYTE(BoolOptional) = 0;
  *((_BYTE *)this + 4) = BoolOptional != 0;
  if (SBYTE7(v136) < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "default-fst-do-nothing");
  v48 = (unsigned __int16)quasar::PTree::getBoolOptional((uint64_t)a2, (uint64_t)__p);
  if (v48 <= 0x100)
    LOBYTE(v48) = 0;
  *((_BYTE *)this + 176) = v48 != 0;
  if (SBYTE7(v136) < 0)
    operator delete(__p[0]);
  v119 = a2;
  v118 = a3;
  memset(v146, 0, sizeof(v146));
  v147 = 1065353216;
  quasar::readTsvFile(0, (uint64_t *)&v144);
  v124 = (const std::string **)*((_QWORD *)&v144 + 1);
  v49 = (const std::string **)v144;
  if ((_QWORD)v144 != *((_QWORD *)&v144 + 1))
  {
    v122 = *(void **)(MEMORY[0x1E0DE4F50] + 64);
    v123 = (void *)*MEMORY[0x1E0DE4F50];
    v121 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
    v120 = MEMORY[0x1E0DE4FB8] + 16;
    do
    {
      std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100](__p, *v49, 24);
      v134 = 0;
      MEMORY[0x1AF44CB18](__p, &v134);
      v131 = 0;
      v132 = 0;
      v133 = 0;
      kaldi::SplitStringToVector(*v49 + 2, ",", 1, (uint64_t)&v131);
      v51 = (unsigned __int8 *)v131;
      v50 = v132;
      while (v51 != v50)
      {
        v130 = 0uLL;
        if (std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>(v146, v51))
        {
          v52 = std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>(v146, v51);
          if (!v52)
            std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
          v53 = (uint64_t *)(v52 + 40);
          v54 = (unsigned __int8 *)&v130;
          goto LABEL_192;
        }
        v55 = v51[23];
        if ((char)v51[23] < 0)
        {
          v63 = *((_QWORD *)v51 + 1);
          if (v63 == 21)
          {
            v64 = **(_QWORD **)v51 == 0x7070416563617073 && *(_QWORD *)(*(_QWORD *)v51 + 8) == 0x6C7561666544796CLL;
            if (v64 && *(_QWORD *)(*(_QWORD *)v51 + 13) == 0x7473662E746C7561)
              goto LABEL_187;
          }
          if (v63 != 26)
            goto LABEL_139;
          if (**(_QWORD **)v51 == 0x7070416563617073
            && *(_QWORD *)(*(_QWORD *)v51 + 8) == 0x65766F6D6552796CLL
            && *(_QWORD *)(*(_QWORD *)v51 + 16) == 0x662E65726F666542
            && *(_WORD *)(*(_QWORD *)v51 + 24) == 29811)
          {
            goto LABEL_193;
          }
          v63 = *((_QWORD *)v51 + 1);
          if (v63 != 26)
            goto LABEL_139;
          if (**(_QWORD **)v51 == 0x4165746972776572
            && *(_QWORD *)(*(_QWORD *)v51 + 8) == 0x69706143796C7070
            && *(_QWORD *)(*(_QWORD *)v51 + 16) == 0x662E657A696C6174
            && *(_WORD *)(*(_QWORD *)v51 + 24) == 29811)
          {
            goto LABEL_190;
          }
          if ((v55 & 0x80) == 0)
          {
            v56 = (uint64_t *)v51;
            if (v55 != 23)
              goto LABEL_158;
          }
          else
          {
LABEL_139:
            if (v63 != 23)
              goto LABEL_158;
            v56 = *(uint64_t **)v51;
          }
        }
        else
        {
          if (v55 == 21)
          {
            if (*(_QWORD *)v51 != 0x7070416563617073
              || *((_QWORD *)v51 + 1) != 0x6C7561666544796CLL
              || *(_QWORD *)(v51 + 13) != 0x7473662E746C7561)
            {
              goto LABEL_158;
            }
LABEL_187:
            v96 = operator new();
            quasar::SpaceApplyDefaultFstTokenTransform::SpaceApplyDefaultFstTokenTransform(v96, (__int128 *)v51);
            std::shared_ptr<quasar::FstTokenTransform>::reset[abi:ne180100]<quasar::SpaceApplyDefaultFstTokenTransform,void>(&v130, v96);
            goto LABEL_191;
          }
          v56 = (uint64_t *)v51;
          if (v55 != 23)
          {
            if (v55 != 26)
              goto LABEL_158;
            if (*(_QWORD *)v51 == 0x7070416563617073
              && *((_QWORD *)v51 + 1) == 0x65766F6D6552796CLL
              && *((_QWORD *)v51 + 2) == 0x662E65726F666542
              && *((_WORD *)v51 + 12) == 29811)
            {
              goto LABEL_193;
            }
            v60 = *(_QWORD *)v51 == 0x4165746972776572 && *((_QWORD *)v51 + 1) == 0x69706143796C7070;
            v61 = v60 && *((_QWORD *)v51 + 2) == 0x662E657A696C6174;
            if (!v61 || *((_WORD *)v51 + 12) != 29811)
            {
LABEL_158:
              v82 = operator new();
              if ((v149.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                size = HIBYTE(v149.__r_.__value_.__r.__words[2]);
              else
                size = v149.__r_.__value_.__l.__size_;
              std::string::basic_string[abi:ne180100]((uint64_t)&v127, size + 1);
              if ((v127.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v84 = &v127;
              else
                v84 = (std::string *)v127.__r_.__value_.__r.__words[0];
              if (size)
              {
                if ((v149.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  v85 = &v149;
                else
                  v85 = (std::string *)v149.__r_.__value_.__r.__words[0];
                memmove(v84, v85, size);
              }
              *(_WORD *)((char *)&v84->__r_.__value_.__l.__data_ + size) = 47;
              v86 = (char)v51[23];
              if (v86 >= 0)
                v87 = (const std::string::value_type *)v51;
              else
                v87 = *(const std::string::value_type **)v51;
              if (v86 >= 0)
                v88 = v51[23];
              else
                v88 = *((_QWORD *)v51 + 1);
              v89 = std::string::append(&v127, v87, v88);
              v90 = *(_OWORD *)&v89->__r_.__value_.__l.__data_;
              v129 = v89->__r_.__value_.__r.__words[2];
              *(_OWORD *)v128 = v90;
              v89->__r_.__value_.__l.__size_ = 0;
              v89->__r_.__value_.__r.__words[2] = 0;
              v89->__r_.__value_.__r.__words[0] = 0;
              v125 = v152;
              v126 = v153;
              if (v153)
              {
                v91 = (unint64_t *)&v153->__shared_owners_;
                do
                  v92 = __ldxr(v91);
                while (__stxr(v92 + 1, v91));
              }
              quasar::ComposeFstTokenTransform::ComposeFstTokenTransform(v82, v51, v128, &v125);
              std::shared_ptr<quasar::FstTokenTransform>::reset[abi:ne180100]<quasar::ComposeFstTokenTransform,void>(&v130, v82);
              v93 = v126;
              if (v126)
              {
                v94 = (unint64_t *)&v126->__shared_owners_;
                do
                  v95 = __ldaxr(v94);
                while (__stlxr(v95 - 1, v94));
                if (!v95)
                {
                  ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
                  std::__shared_weak_count::__release_weak(v93);
                }
              }
              if (SHIBYTE(v129) < 0)
                operator delete(v128[0]);
              if (SHIBYTE(v127.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v127.__r_.__value_.__l.__data_);
              goto LABEL_191;
            }
LABEL_190:
            v97 = operator new();
            quasar::RewriteApplyCapitalizeFstTokenTransform::RewriteApplyCapitalizeFstTokenTransform(v97, (__int128 *)v51);
            std::shared_ptr<quasar::FstTokenTransform>::reset[abi:ne180100]<quasar::RewriteApplyCapitalizeFstTokenTransform,void>(&v130, v97);
            goto LABEL_191;
          }
        }
        v72 = *v56;
        v73 = v56[1];
        v74 = *(uint64_t *)((char *)v56 + 15);
        if (v72 != 0x4165746972776572 || v73 != 0x61666544796C7070 || v74 != 0x7473662E746C7561)
          goto LABEL_158;
        v77 = operator new();
        v78 = v77;
        if (*((_BYTE *)this + 4))
          v79 = 1;
        else
          v79 = *((_BYTE *)this + 176) != 0;
        quasar::RewriteApplyDefaultFstTokenTransform::RewriteApplyDefaultFstTokenTransform(v77, (__int128 *)v51, v79);
        std::shared_ptr<quasar::FstTokenTransform>::reset[abi:ne180100]<quasar::RewriteApplyDefaultFstTokenTransform,void>(&v130, v78);
LABEL_191:
        (*(void (**)(_QWORD))(*(_QWORD *)v130 + 16))(v130);
        v127.__r_.__value_.__r.__words[0] = (std::string::size_type)v51;
        v54 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<quasar::FstTokenTransform>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<quasar::FstTokenTransform>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<quasar::FstTokenTransform>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<quasar::FstTokenTransform>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v146, v51, (uint64_t)&std::piecewise_construct, (__int128 **)&v127)+ 40;
        v53 = (uint64_t *)&v130;
LABEL_192:
        std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::operator=[abi:ne180100](v54, v53);
        v127.__r_.__value_.__r.__words[0] = (std::string::size_type)&v134;
        v98 = (char **)std::__hash_table<std::__hash_value_type<int,std::vector<std::shared_ptr<quasar::FstTokenTransform>>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::vector<std::shared_ptr<quasar::FstTokenTransform>>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::vector<std::shared_ptr<quasar::FstTokenTransform>>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::vector<std::shared_ptr<quasar::FstTokenTransform>>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t)this + 8, &v134, (uint64_t)&std::piecewise_construct, &v127);
        std::vector<std::shared_ptr<quasar::FeatureExtractor>>::push_back[abi:ne180100](v98 + 3, &v130);
LABEL_193:
        v99 = (std::__shared_weak_count *)*((_QWORD *)&v130 + 1);
        if (*((_QWORD *)&v130 + 1))
        {
          v100 = (unint64_t *)(*((_QWORD *)&v130 + 1) + 8);
          do
            v101 = __ldaxr(v100);
          while (__stlxr(v101 - 1, v100));
          if (!v101)
          {
            ((void (*)(std::__shared_weak_count *))v99->__on_zero_shared)(v99);
            std::__shared_weak_count::__release_weak(v99);
          }
        }
        v51 += 24;
      }
      v128[0] = &v131;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v128);
      __p[0] = v123;
      *(void **)((char *)__p + *((_QWORD *)v123 - 3)) = v122;
      *(_QWORD *)&v136 = v121;
      *((_QWORD *)&v136 + 1) = v120;
      if (SHIBYTE(v141) < 0)
        operator delete(*((void **)&v140 + 1));
      std::streambuf::~streambuf();
      std::iostream::~basic_iostream();
      MEMORY[0x1AF44D094](v143);
      v49 += 3;
    }
    while (v49 != v124);
  }
  __p[0] = &v144;
  std::vector<std::vector<std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  if ((a4 & 1) != 0)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "default-backoff-label");
    Int = quasar::PTree::getIntOptional<int>((uint64_t)v119, (uint64_t)__p);
    if ((Int & 0xFF00000000) != 0)
      v103 = Int;
    else
      v103 = 1000000;
    *(_DWORD *)this = v103;
    if (SBYTE7(v136) < 0)
    {
      operator delete(__p[0]);
      v103 = *(_DWORD *)this;
    }
    if (v103 == 1000000)
    {
      __p[0] = this;
      v104 = (char **)std::__hash_table<std::__hash_value_type<int,std::vector<std::shared_ptr<quasar::FstTokenTransform>>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::vector<std::shared_ptr<quasar::FstTokenTransform>>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::vector<std::shared_ptr<quasar::FstTokenTransform>>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::vector<std::shared_ptr<quasar::FstTokenTransform>>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t)this + 8, (int *)this, (uint64_t)&std::piecewise_construct, (_DWORD **)__p);
      std::string::basic_string[abi:ne180100]<0>(__p, "spaceApplyDefault.fst");
      v105 = std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>(v146, (unsigned __int8 *)__p);
      if (!v105)
        std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
      std::vector<std::shared_ptr<quasar::FeatureExtractor>>::push_back[abi:ne180100](v104 + 3, (__int128 *)(v105 + 40));
      if (SBYTE7(v136) < 0)
        operator delete(__p[0]);
      __p[0] = this;
      v106 = (char **)std::__hash_table<std::__hash_value_type<int,std::vector<std::shared_ptr<quasar::FstTokenTransform>>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::vector<std::shared_ptr<quasar::FstTokenTransform>>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::vector<std::shared_ptr<quasar::FstTokenTransform>>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::vector<std::shared_ptr<quasar::FstTokenTransform>>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t)this + 8, (int *)this, (uint64_t)&std::piecewise_construct, (_DWORD **)__p);
      std::string::basic_string[abi:ne180100]<0>(__p, "rewriteApplyDefault.fst");
      v107 = std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>(v146, (unsigned __int8 *)__p);
      if (!v107)
        std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
      std::vector<std::shared_ptr<quasar::FeatureExtractor>>::push_back[abi:ne180100](v106 + 3, (__int128 *)(v107 + 40));
      if (SBYTE7(v136) < 0)
        operator delete(__p[0]);
    }
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "apply-label-threshold-length");
  v108 = quasar::PTree::getIntOptional<int>((uint64_t)v119, (uint64_t)__p);
  if ((v108 & 0xFF00000000) != 0)
    v109 = v108;
  else
    v109 = 0;
  *((_DWORD *)this + 62) = v109;
  if (SBYTE7(v136) < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(&v131, "label-threshold-tsv-file");
  quasar::PTree::getStringOptional((uint64_t)v119, (uint64_t)&v131, (std::string *)__p);
  if (BYTE8(v136))
  {
    v144 = *(_OWORD *)__p;
    v145 = v136;
    __p[1] = 0;
    *(_QWORD *)&v136 = 0;
    __p[0] = 0;
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&v144, "");
    if (BYTE8(v136) && SBYTE7(v136) < 0)
      operator delete(__p[0]);
  }
  if (SHIBYTE(v133) < 0)
    operator delete(v131);
  v110 = HIBYTE(v145);
  v111 = HIBYTE(v145);
  if (v145 < 0)
    v110 = *((_QWORD *)&v144 + 1);
  if (v110)
  {
    quasar::SystemConfig::makePathAbsolute(v118, (uint64_t)&v144, 1);
    quasar::readTsvFile(0, (uint64_t *)__p);
    v112 = (const std::string **)__p[0];
    for (i = (const std::string **)__p[1]; v112 != i; v112 += 3)
    {
      LODWORD(v131) = 0;
      LODWORD(v131) = std::stoi(*v112, 0, 10);
      v114 = std::stof(*v112 + 1, 0);
      v128[0] = &v131;
      *((float *)std::__hash_table<std::__hash_value_type<int,float>,std::__unordered_map_hasher<int,std::__hash_value_type<int,float>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,float>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,float>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int &&>,std::tuple<>>((uint64_t)this + 184, (int *)&v131, (uint64_t)&std::piecewise_construct, (_DWORD **)v128)+ 5) = v114;
    }
    v131 = __p;
    std::vector<std::vector<std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v131);
    v111 = HIBYTE(v145);
  }
  if (v111 < 0)
    operator delete((void *)v144);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>>>::~__hash_table((uint64_t)v146);
  if (SHIBYTE(v148.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v148.__r_.__value_.__l.__data_);
  if (SHIBYTE(v149.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v149.__r_.__value_.__l.__data_);
  v115 = v153;
  if (v153)
  {
    v116 = (unint64_t *)&v153->__shared_owners_;
    do
      v117 = __ldaxr(v116);
    while (__stlxr(v117 - 1, v116));
    if (!v117)
    {
      ((void (*)(std::__shared_weak_count *))v115->__on_zero_shared)(v115);
      std::__shared_weak_count::__release_weak(v115);
    }
  }
  if (SHIBYTE(v154.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v154.__r_.__value_.__l.__data_);
}

void sub_1AD8BAE28(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>>>::~__hash_table((uint64_t)&STACK[0x210]);
  if (*(char *)(v1 - 217) < 0)
    operator delete(*(void **)(v1 - 240));
  if (*(char *)(v1 - 185) < 0)
    operator delete(*(void **)(v1 - 208));
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](v1 - 160);
  if (*(char *)(v1 - 121) < 0)
    operator delete(*(void **)(v1 - 144));
  _Unwind_Resume(a1);
}

void std::shared_ptr<quasar::FstTokenTransform>::reset[abi:ne180100]<quasar::SpaceApplyDefaultFstTokenTransform,void>(_QWORD *a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  __int128 v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  __int128 v7;

  std::shared_ptr<quasar::FstTokenTransform>::shared_ptr[abi:ne180100]<quasar::SpaceApplyDefaultFstTokenTransform,void>(&v7, a2);
  v3 = (std::__shared_weak_count *)a1[1];
  v4 = v7;
  *(_QWORD *)&v7 = *a1;
  *((_QWORD *)&v7 + 1) = v3;
  *(_OWORD *)a1 = v4;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void std::shared_ptr<quasar::FstTokenTransform>::reset[abi:ne180100]<quasar::RewriteApplyCapitalizeFstTokenTransform,void>(_QWORD *a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  __int128 v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  __int128 v7;

  std::shared_ptr<quasar::FstTokenTransform>::shared_ptr[abi:ne180100]<quasar::RewriteApplyCapitalizeFstTokenTransform,void>(&v7, a2);
  v3 = (std::__shared_weak_count *)a1[1];
  v4 = v7;
  *(_QWORD *)&v7 = *a1;
  *((_QWORD *)&v7 + 1) = v3;
  *(_OWORD *)a1 = v4;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void std::shared_ptr<quasar::FstTokenTransform>::reset[abi:ne180100]<quasar::RewriteApplyDefaultFstTokenTransform,void>(_QWORD *a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  __int128 v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  __int128 v7;

  std::shared_ptr<quasar::FstTokenTransform>::shared_ptr[abi:ne180100]<quasar::RewriteApplyDefaultFstTokenTransform,void>(&v7, a2);
  v3 = (std::__shared_weak_count *)a1[1];
  v4 = v7;
  *(_QWORD *)&v7 = *a1;
  *((_QWORD *)&v7 + 1) = v3;
  *(_OWORD *)a1 = v4;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void std::shared_ptr<quasar::FstTokenTransform>::reset[abi:ne180100]<quasar::ComposeFstTokenTransform,void>(_QWORD *a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  __int128 v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  __int128 v7;

  std::shared_ptr<quasar::FstTokenTransform>::shared_ptr[abi:ne180100]<quasar::ComposeFstTokenTransform,void>(&v7, a2);
  v3 = (std::__shared_weak_count *)a1[1];
  v4 = v7;
  *(_QWORD *)&v7 = *a1;
  *((_QWORD *)&v7 + 1) = v3;
  *(_OWORD *)a1 = v4;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void quasar::PunctuationTransformer::init(quasar::PunctuationTransformer *this, const quasar::PTree *a2, const quasar::SystemConfig *a3)
{
  unsigned int BoolOptional;
  int v7;
  uint64_t ChildOptional;
  quasar::PTree *Child;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  const void **String;
  uint64_t Int;
  int v15;
  void *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::string::size_type size;
  _QWORD *v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  quasar::PTree *v28;
  uint64_t v29;
  uint64_t v30;
  unsigned __int8 *v31;
  uint64_t v32;
  uint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  std::string *v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  quasar::PTree *v42;
  uint64_t v43;
  uint64_t v44;
  unsigned __int8 *v45;
  uint64_t v46;
  uint64_t v47;
  quasar::PTree *v48;
  uint64_t v49;
  uint64_t v50;
  unsigned __int8 *v51;
  void **v52;
  void *v53[2];
  char v54;
  std::string v55;
  std::string v56;
  std::string v57;
  void *v58[2];
  uint64_t v59;
  __int128 v60;
  uint64_t v61;
  __int128 v62;
  uint64_t v63;
  __int128 v64;
  uint64_t v65;
  __int128 __p;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;

  std::string::basic_string[abi:ne180100]<0>(&__p, "joint-model");
  BoolOptional = (unsigned __int16)quasar::PTree::getBoolOptional((uint64_t)a2, (uint64_t)&__p);
  if (BoolOptional <= 0x100)
    LOBYTE(BoolOptional) = 0;
  v7 = BoolOptional != 0;
  *((_BYTE *)this + 456) = v7;
  if (SBYTE7(v67) < 0)
  {
    operator delete((void *)__p);
    v7 = *((unsigned __int8 *)this + 456);
  }
  quasar::LabelTransformer::init(this, a2, a3, 0, v7 != 0);
  std::string::basic_string[abi:ne180100]<0>(&__p, "tasks");
  ChildOptional = quasar::PTree::getChildOptional((uint64_t)a2, (uint64_t)&__p);
  if (SBYTE7(v67) < 0)
    operator delete((void *)__p);
  if (!ChildOptional)
  {
    v81 = 0u;
    v82 = 0u;
    v79 = 0u;
    v80 = 0u;
    v77 = 0u;
    v78 = 0u;
    v75 = 0u;
    v76 = 0u;
    v73 = 0u;
    v74 = 0u;
    v71 = 0u;
    v72 = 0u;
    v69 = 0u;
    v70 = 0u;
    v67 = 0u;
    v68 = 0u;
    __p = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(&__p, "Missing supported tasks.");
    goto LABEL_148;
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "tasks");
  Child = (quasar::PTree *)quasar::PTree::getChild((uint64_t)a2, &__p);
  if (SBYTE7(v67) < 0)
    operator delete((void *)__p);
  v10 = quasar::PTree::begin(Child);
  v11 = quasar::PTree::end(Child);
  if (v10 != v11)
  {
    v12 = v11;
    do
    {
      String = (const void **)quasar::PTree::getString((quasar::PTree *)(v10 + 24));
      std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t **)this + 32, String, (uint64_t)String);
      v10 += 88;
    }
    while (v10 != v12);
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "shared-num-nn-components");
  Int = quasar::PTree::getIntOptional<int>((uint64_t)a2, (uint64_t)&__p);
  if ((Int & 0xFF00000000) != 0)
    v15 = Int;
  else
    v15 = -1;
  *((_DWORD *)this + 63) = v15;
  if (SBYTE7(v67) < 0)
    operator delete((void *)__p);
  if (*((_QWORD *)this + 11) && *((int *)this + 63) >= 1)
  {
    v81 = 0u;
    v82 = 0u;
    v79 = 0u;
    v80 = 0u;
    v77 = 0u;
    v78 = 0u;
    v75 = 0u;
    v76 = 0u;
    v73 = 0u;
    v74 = 0u;
    v71 = 0u;
    v72 = 0u;
    v69 = 0u;
    v70 = 0u;
    v67 = 0u;
    v68 = 0u;
    __p = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(&__p, "For non-Kaldi models, shared neural network components is not supported. 'shared-num-nn-components' in config json should not be set.");
LABEL_148:
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&__p);
  }
  std::string::basic_string[abi:ne180100]<0>(&v62, "vocab-marisa-trie-file");
  quasar::PTree::getStringOptional((uint64_t)a2, (uint64_t)&v62, (std::string *)&__p);
  if (BYTE8(v67))
  {
    v64 = __p;
    v65 = v67;
    *(_QWORD *)&v67 = 0;
    __p = 0uLL;
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&v64, "");
    if (BYTE8(v67) && SBYTE7(v67) < 0)
      operator delete((void *)__p);
  }
  if (SHIBYTE(v63) < 0)
    operator delete((void *)v62);
  std::string::basic_string[abi:ne180100]<0>(&v60, "marisa-relabel-file");
  quasar::PTree::getStringOptional((uint64_t)a2, (uint64_t)&v60, (std::string *)&__p);
  if (BYTE8(v67))
  {
    v62 = __p;
    v63 = v67;
    *(_QWORD *)&v67 = 0;
    __p = 0uLL;
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&v62, "");
    if (BYTE8(v67) && SBYTE7(v67) < 0)
      operator delete((void *)__p);
  }
  if (SHIBYTE(v61) < 0)
    operator delete((void *)v60);
  std::string::basic_string[abi:ne180100]<0>(v58, "marisa-token-file");
  quasar::PTree::getStringOptional((uint64_t)a2, (uint64_t)v58, (std::string *)&__p);
  if (BYTE8(v67))
  {
    v60 = __p;
    v61 = v67;
    *(_QWORD *)&v67 = 0;
    __p = 0uLL;
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&v60, "");
    if (BYTE8(v67) && SBYTE7(v67) < 0)
      operator delete((void *)__p);
  }
  if (SHIBYTE(v59) < 0)
    operator delete(v58[0]);
  std::string::basic_string[abi:ne180100]<0>(&v57, "source-vocab-file");
  quasar::PTree::getStringOptional((uint64_t)a2, (uint64_t)&v57, (std::string *)&__p);
  if (BYTE8(v67))
  {
    *(_OWORD *)v58 = __p;
    v59 = v67;
    *(_QWORD *)&v67 = 0;
    __p = 0uLL;
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(v58, "");
    if (BYTE8(v67) && SBYTE7(v67) < 0)
      operator delete((void *)__p);
  }
  if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v57.__r_.__value_.__l.__data_);
  v16 = (void *)HIBYTE(v59);
  if (v59 < 0)
    v16 = v58[1];
  if (v16)
    goto LABEL_54;
  v17 = HIBYTE(v65);
  if (v65 < 0)
    v17 = *((_QWORD *)&v64 + 1);
  if (v17)
  {
LABEL_54:
    std::allocate_shared[abi:ne180100]<quasar::VocabId,std::allocator<quasar::VocabId>,std::string &,std::string &,std::string &,std::string &,void>((uint64_t)v58, (uint64_t)&v64, (uint64_t)&v62, (uint64_t)&v60, &__p);
    std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100]((uint64_t)this + 280, &__p);
    v18 = (std::__shared_weak_count *)*((_QWORD *)&__p + 1);
    if (*((_QWORD *)&__p + 1))
    {
      v19 = (unint64_t *)(*((_QWORD *)&__p + 1) + 8);
      do
        v20 = __ldaxr(v19);
      while (__stlxr(v20 - 1, v19));
      if (!v20)
      {
        ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
        std::__shared_weak_count::__release_weak(v18);
      }
    }
  }
  std::string::basic_string[abi:ne180100]<0>(&v56, "cluster-id-file");
  quasar::PTree::getStringOptional((uint64_t)a2, (uint64_t)&v56, (std::string *)&__p);
  if (BYTE8(v67))
  {
    *(_OWORD *)&v57.__r_.__value_.__l.__data_ = __p;
    v57.__r_.__value_.__r.__words[2] = v67;
    *(_QWORD *)&v67 = 0;
    __p = 0uLL;
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&v57, "");
    if (BYTE8(v67) && SBYTE7(v67) < 0)
      operator delete((void *)__p);
  }
  if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v56.__r_.__value_.__l.__data_);
  size = HIBYTE(v57.__r_.__value_.__r.__words[2]);
  if ((v57.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = v57.__r_.__value_.__l.__size_;
  if (size)
  {
    v22 = operator new(0x30uLL);
    v22[2] = 0;
    *v22 = &unk_1E5D455B8;
    v22[1] = 0;
    v22[5] = 0;
    v22[4] = 0;
    v22[3] = v22 + 4;
    *(_QWORD *)&__p = v22 + 3;
    *((_QWORD *)&__p + 1) = v22;
    std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100]((uint64_t)this + 296, &__p);
    v23 = (std::__shared_weak_count *)*((_QWORD *)&__p + 1);
    if (*((_QWORD *)&__p + 1))
    {
      v24 = (unint64_t *)(*((_QWORD *)&__p + 1) + 8);
      do
        v25 = __ldaxr(v24);
      while (__stlxr(v25 - 1, v24));
      if (!v25)
      {
        ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
        std::__shared_weak_count::__release_weak(v23);
      }
    }
    if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v55, v57.__r_.__value_.__l.__data_, v57.__r_.__value_.__l.__size_);
    else
      v55 = v57;
    quasar::loadClusterIdFile((uint64_t)&v55, *((uint64_t ***)this + 37));
    if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v55.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "excluded-postitn-tokens");
  v26 = quasar::PTree::getChildOptional((uint64_t)a2, (uint64_t)&__p);
  v27 = v26;
  if (SBYTE7(v67) < 0)
  {
    operator delete((void *)__p);
    if (!v27)
      goto LABEL_88;
  }
  else if (!v26)
  {
    goto LABEL_88;
  }
  std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::clear((uint64_t)this + 312);
  std::string::basic_string[abi:ne180100]<0>(&__p, "excluded-postitn-tokens");
  v28 = (quasar::PTree *)quasar::PTree::getChild((uint64_t)a2, &__p);
  if (SBYTE7(v67) < 0)
    operator delete((void *)__p);
  v29 = quasar::PTree::begin(v28);
  v30 = quasar::PTree::end(v28);
  while (v29 != v30)
  {
    v31 = (unsigned __int8 *)quasar::PTree::getString((quasar::PTree *)(v29 + 24));
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)this + 312, v31, (uint64_t)v31);
    v29 += 88;
  }
LABEL_88:
  std::string::basic_string[abi:ne180100]<0>(&__p, "emoji-keyword-remove-fst-1");
  v32 = quasar::PTree::getChildOptional((uint64_t)a2, (uint64_t)&__p);
  v33 = v32;
  if (SBYTE7(v67) < 0)
  {
    operator delete((void *)__p);
    if (!v33)
      goto LABEL_102;
  }
  else if (!v32)
  {
    goto LABEL_102;
  }
  __p = 0uLL;
  *(_QWORD *)&v67 = 0;
  std::string::basic_string[abi:ne180100]<0>(&v56, "emoji-keyword-remove-fst-1");
  quasar::QuasarTextProc::readModelFiles((uint64_t)a3, (uint64_t)a2, (__int128 *)&v56, (uint64_t)&__p);
  if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v56.__r_.__value_.__l.__data_);
  std::allocate_shared[abi:ne180100]<quasar::QuasarTextProcImpl,std::allocator<quasar::QuasarTextProcImpl>,std::vector<std::string> &,void>(&v56);
  std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100]((uint64_t)this + 352, (__int128 *)&v56);
  v34 = (std::__shared_weak_count *)v56.__r_.__value_.__l.__size_;
  if (v56.__r_.__value_.__l.__size_)
  {
    v35 = (unint64_t *)(v56.__r_.__value_.__l.__size_ + 8);
    do
      v36 = __ldaxr(v35);
    while (__stlxr(v36 - 1, v35));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
      std::__shared_weak_count::__release_weak(v34);
    }
  }
  v37 = (std::string *)*((_QWORD *)this + 44);
  std::string::basic_string[abi:ne180100]<0>(&v56, "post-itn-hammer");
  quasar::QuasarTextProcImpl::setTextProcType(v37, &v56);
  if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v56.__r_.__value_.__l.__data_);
  v56.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v56);
LABEL_102:
  std::string::basic_string[abi:ne180100]<0>(&__p, "informal-text-length");
  v38 = quasar::PTree::getIntOptional<int>((uint64_t)a2, (uint64_t)&__p);
  if ((v38 & 0xFF00000000) != 0)
    v39 = v38;
  else
    v39 = -1;
  *((_DWORD *)this + 92) = v39;
  if (SBYTE7(v67) < 0)
    operator delete((void *)__p);
  std::string::basic_string[abi:ne180100]<0>(&__p, "special-formal-puncs");
  v40 = quasar::PTree::getChildOptional((uint64_t)a2, (uint64_t)&__p);
  v41 = v40;
  if (SBYTE7(v67) < 0)
  {
    operator delete((void *)__p);
    if (!v41)
      goto LABEL_116;
  }
  else if (!v40)
  {
    goto LABEL_116;
  }
  std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::clear((uint64_t)this + 376);
  std::string::basic_string[abi:ne180100]<0>(&__p, "special-formal-puncs");
  v42 = (quasar::PTree *)quasar::PTree::getChild((uint64_t)a2, &__p);
  if (SBYTE7(v67) < 0)
    operator delete((void *)__p);
  v43 = quasar::PTree::begin(v42);
  v44 = quasar::PTree::end(v42);
  while (v43 != v44)
  {
    v45 = (unsigned __int8 *)quasar::PTree::getString((quasar::PTree *)(v43 + 24));
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)this + 376, v45, (uint64_t)v45);
    v43 += 88;
  }
LABEL_116:
  std::string::basic_string[abi:ne180100]<0>(&__p, "end-of-sentence-puncs");
  v46 = quasar::PTree::getChildOptional((uint64_t)a2, (uint64_t)&__p);
  v47 = v46;
  if (SBYTE7(v67) < 0)
  {
    operator delete((void *)__p);
    if (!v47)
      goto LABEL_125;
  }
  else if (!v46)
  {
    goto LABEL_125;
  }
  std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::clear((uint64_t)this + 416);
  std::string::basic_string[abi:ne180100]<0>(&__p, "end-of-sentence-puncs");
  v48 = (quasar::PTree *)quasar::PTree::getChild((uint64_t)a2, &__p);
  if (SBYTE7(v67) < 0)
    operator delete((void *)__p);
  v49 = quasar::PTree::begin(v48);
  v50 = quasar::PTree::end(v48);
  while (v49 != v50)
  {
    v51 = (unsigned __int8 *)quasar::PTree::getString((quasar::PTree *)(v49 + 24));
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)this + 416, v51, (uint64_t)v51);
    v49 += 88;
  }
LABEL_125:
  std::string::basic_string[abi:ne180100]<0>(v53, "do-not-cap-feature-name");
  quasar::PTree::getStringOptional((uint64_t)a2, (uint64_t)v53, (std::string *)&__p);
  if (BYTE8(v67))
  {
    *(_OWORD *)&v56.__r_.__value_.__l.__data_ = __p;
    v56.__r_.__value_.__r.__words[2] = v67;
    *(_QWORD *)&v67 = 0;
    __p = 0uLL;
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&v56, "");
  }
  v52 = (void **)((char *)this + 464);
  if (*((char *)this + 487) < 0)
    operator delete(*v52);
  *(_OWORD *)v52 = *(_OWORD *)&v56.__r_.__value_.__l.__data_;
  *((_QWORD *)this + 60) = *((_QWORD *)&v56.__r_.__value_.__l + 2);
  *((_BYTE *)&v56.__r_.__value_.__s + 23) = 0;
  v56.__r_.__value_.__s.__data_[0] = 0;
  if (BYTE8(v67) && SBYTE7(v67) < 0)
    operator delete((void *)__p);
  if (v54 < 0)
    operator delete(v53[0]);
  if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v57.__r_.__value_.__l.__data_);
  if (SHIBYTE(v59) < 0)
    operator delete(v58[0]);
  if (SHIBYTE(v61) < 0)
    operator delete((void *)v60);
  if (SHIBYTE(v63) < 0)
    operator delete((void *)v62);
  if (SHIBYTE(v65) < 0)
    operator delete((void *)v64);
}

uint64_t quasar::loadClusterIdFile(uint64_t a1, uint64_t **a2)
{
  std::locale::id *v3;
  const std::locale::facet *v4;
  unsigned __int8 v5;
  _QWORD *v6;
  __int128 v7;
  std::string::size_type size;
  char *v9;
  std::string v11;
  std::string v12;
  std::vector<unsigned int> __p;
  _QWORD v14[3];
  std::string __str;
  char v16;
  _QWORD v17[2];
  uint64_t v18;
  _QWORD v19[21];

  v19[19] = *MEMORY[0x1E0C80C00];
  std::ifstream::basic_ifstream(v17);
  memset(&__str, 0, sizeof(__str));
  memset(v14, 0, sizeof(v14));
  memset(&__p, 0, sizeof(__p));
  v3 = (std::locale::id *)MEMORY[0x1E0DE4A90];
  while (1)
  {
    std::ios_base::getloc((const std::ios_base *)((char *)v17 + *(_QWORD *)(v17[0] - 24)));
    v4 = std::locale::use_facet((const std::locale *)&v12, v3);
    v5 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v4->__vftable[2].~facet_0)(v4, 10);
    std::locale::~locale((std::locale *)&v12);
    v6 = std::getline[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v17, (uint64_t)&__str, v5);
    if ((*((_BYTE *)v6 + *(_QWORD *)(*v6 - 24) + 32) & 5) != 0)
      break;
    kaldi::SplitStringToVector(&__str, " ", 1, (uint64_t)v14);
    if (*(char *)(v14[0] + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v12, *(const std::string::value_type **)v14[0], *(_QWORD *)(v14[0] + 8));
    }
    else
    {
      v7 = *(_OWORD *)v14[0];
      v12.__r_.__value_.__r.__words[2] = *(_QWORD *)(v14[0] + 16);
      *(_OWORD *)&v12.__r_.__value_.__l.__data_ = v7;
    }
    size = HIBYTE(v12.__r_.__value_.__r.__words[2]);
    if ((v12.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      size = v12.__r_.__value_.__l.__size_;
    std::string::basic_string(&v11, &__str, size + 1, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v16);
    kaldi::SplitStringToIntegers<int>((uint64_t)&v11, "^", 1, &__p);
    if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v11.__r_.__value_.__l.__data_);
    v11.__r_.__value_.__r.__words[0] = (std::string::size_type)&v12;
    v9 = (char *)(std::__tree<std::__value_type<std::string,std::vector<int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<int>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a2, (const void **)&v12.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (__int128 **)&v11)+ 7);
    if (v9 != (char *)&__p)
      std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>(v9, (char *)__p.__begin_, (uint64_t)__p.__end_, __p.__end_ - __p.__begin_);
    if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v12.__r_.__value_.__l.__data_);
  }
  if (__p.__begin_)
  {
    __p.__end_ = __p.__begin_;
    operator delete(__p.__begin_);
  }
  __p.__begin_ = (std::vector<unsigned int>::pointer)v14;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  v17[0] = *MEMORY[0x1E0DE4F40];
  *(_QWORD *)((char *)v17 + *(_QWORD *)(v17[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F40] + 24);
  MEMORY[0x1AF44CA70](&v18);
  std::istream::~istream();
  return MEMORY[0x1AF44D094](v19);
}

void sub_1AD8BC218(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, std::locale a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,char a36)
{
  _Unwind_Resume(exception_object);
}

uint64_t quasar::LabelTransformer::doInference(uint64_t a1, uint64_t a2, int a3, int *a4, _QWORD *a5, uint64_t *a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  int v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *ComputeEngine;
  uint64_t *v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  __int128 v30;
  _QWORD v31[2];
  uint64_t v32;
  uint64_t v33;
  int32x2_t v34;
  __int128 v35;
  __int128 v36;
  char v37;
  void *__p;
  __int128 v39;
  uint64_t v40;
  _QWORD *v41;
  void **p_p;

  v36 = 0u;
  v35 = 0u;
  v34 = (int32x2_t)&unk_1E5D34170;
  v37 = 0;
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 56) + 152))(*(_QWORD *)(a1 + 56));
  v12 = *(_QWORD *)(a1 + 72);
  if (a3 < 1)
  {
    if (v12)
    {
      (*(void (**)(_QWORD, uint64_t, int32x2_t *, _QWORD))(**(_QWORD **)(a1 + 56) + 96))(*(_QWORD *)(a1 + 56), a2, &v34, 0);
      goto LABEL_21;
    }
  }
  else if (v12)
  {
    kaldi::nnet1::Nnet::Feedforward((uint64_t *)(v12 + 8), a2, (int32x2_t *)(a1 + 128), a3, 0);
    kaldi::nnet1::Nnet::Feedforward((uint64_t *)(*(_QWORD *)(a1 + 72) + 8), a1 + 128, &v34, ((*(_QWORD *)(*(_QWORD *)(a1 + 72) + 16) - *(_QWORD *)(*(_QWORD *)(a1 + 72) + 8)) >> 3) - a3, a3);
    goto LABEL_21;
  }
  v13 = *(_QWORD *)kaldi::quasar::CEInferenceNet::GetComputeEngine(*(kaldi::quasar::CEInferenceNet **)(a1 + 88));
  v15 = *(int *)(a2 + 16);
  v14 = *(int *)(a2 + 20);
  v16 = operator new(0x18uLL);
  *(_QWORD *)&v39 = v16 + 3;
  *((_QWORD *)&v39 + 1) = v16 + 3;
  *v16 = 1;
  v16[1] = v14;
  v16[2] = v15;
  __p = v16;
  (*(void (**)(uint64_t *__return_ptr, uint64_t, void **))(*(_QWORD *)v13 + 56))(&v33, v13, &__p);
  if (__p)
  {
    *(_QWORD *)&v39 = __p;
    operator delete(__p);
  }
  if (*(int *)(a2 + 20) >= 1)
  {
    v17 = 0;
    do
    {
      (*(void (**)(uint64_t, uint64_t, _QWORD, _QWORD))(*(_QWORD *)v33 + 88))(v33, *(_QWORD *)(a2 + 8) + 4 * *(_DWORD *)(a2 + 24) * v17, *(unsigned int *)(a2 + 16), (*(_DWORD *)(a2 + 16) * v17));
      ++v17;
    }
    while (v17 < *(_DWORD *)(a2 + 20));
  }
  v32 = 0;
  if (a4)
  {
    v30 = 0uLL;
    v31[0] = 0;
    v41 = v31;
    v18 = std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)v31, 1uLL);
    *v18 = 0;
    v20 = v18 + 1;
    v21 = v30;
    *(_QWORD *)&v30 = v18;
    v39 = v21;
    v22 = v31[0];
    v31[0] = &v18[v19];
    v40 = v22;
    __p = (void *)v21;
    std::__split_buffer<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::~__split_buffer((uint64_t)&__p);
    *((_QWORD *)&v30 + 1) = v20;
    v23 = *(_QWORD *)(a1 + 88);
    __p = 0;
    v39 = 0uLL;
    kaldi::quasar::CEInferenceNet::MultiIOFeedforward(v23, &v33, &__p, &v32, (uint64_t *)&v30, 0);
    p_p = &__p;
    std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__destroy_vector::operator()[abi:ne180100](&p_p);
    ComputeEngine = (uint64_t *)kaldi::quasar::CEInferenceNet::GetComputeEngine(*(kaldi::quasar::CEInferenceNet **)(a1 + 88));
    quasar::squeezeCEBufferItfToCuMatrix(ComputeEngine, (_QWORD *)v30, *(_DWORD *)(a2 + 20), (uint64_t)&v34);
    kaldi::CuMatrixBase<float>::FindRowMaxId((uint64_t)&v34, a4);
    if (a6 && a5[3])
      quasar::buildApplyLabelMasks((uint64_t)&v34, a4, a5, a6);
    v25 = (uint64_t *)kaldi::quasar::CEInferenceNet::GetComputeEngine(*(kaldi::quasar::CEInferenceNet **)(a1 + 88));
    quasar::squeezeCEBufferItfToCuMatrix(v25, &v32, *(_DWORD *)(a2 + 20), (uint64_t)&v34);
    __p = &v30;
    std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  }
  else
  {
    kaldi::quasar::CEInferenceNet::Feedforward(*(_QWORD *)(a1 + 88), &v33, &v32, 0);
    v26 = (uint64_t *)kaldi::quasar::CEInferenceNet::GetComputeEngine(*(kaldi::quasar::CEInferenceNet **)(a1 + 88));
    quasar::squeezeCEBufferItfToCuMatrix(v26, &v32, *(_DWORD *)(a2 + 20), (uint64_t)&v34);
  }
  v27 = v32;
  v32 = 0;
  if (v27)
    (*(void (**)(uint64_t))(*(_QWORD *)v27 + 8))(v27);
  v28 = v33;
  v33 = 0;
  if (v28)
    (*(void (**)(uint64_t))(*(_QWORD *)v28 + 8))(v28);
LABEL_21:
  kaldi::CuMatrixBase<float>::FindRowMaxId((uint64_t)&v34, (int *)(a1 + 104));
  if (*(_QWORD *)(a1 + 208))
    quasar::buildApplyLabelMasks((uint64_t)&v34, (int *)(a1 + 104), (_QWORD *)(a1 + 184), (uint64_t *)(a1 + 224));
  return kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&v34);
}

void sub_1AD8BC5EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22)
{
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;

  *(_QWORD *)(v23 - 72) = v22;
  std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v23 - 72));
  *(_QWORD *)(v23 - 72) = &a9;
  std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v23 - 72));
  v25 = a13;
  a13 = 0;
  if (v25)
    (*(void (**)(uint64_t))(*(_QWORD *)v25 + 8))(v25);
  v26 = a14;
  a14 = 0;
  if (v26)
    (*(void (**)(uint64_t))(*(_QWORD *)v26 + 8))(v26);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t quasar::squeezeCEBufferItfToCuMatrix(uint64_t *a1, _QWORD *a2, int a3, uint64_t a4)
{
  uint64_t v7;
  int v8;
  int v9;
  _QWORD *v10;
  int v11;
  uint64_t v12;
  int v13;
  int v14;
  uint64_t result;
  void *__p;
  void *v17;
  _QWORD *v18;
  uint64_t v19;

  v7 = *a1;
  v8 = (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*a2 + 160))(*a2, 1);
  v9 = (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*a2 + 160))(*a2, 2);
  v10 = operator new(0x10uLL);
  v17 = v10 + 2;
  v18 = v10 + 2;
  *v10 = v8;
  v10[1] = v9;
  __p = v10;
  (*(void (**)(uint64_t *__return_ptr, uint64_t, void **))(*(_QWORD *)v7 + 56))(&v19, v7, &__p);
  if (__p)
  {
    v17 = __p;
    operator delete(__p);
  }
  if (a3 >= 1)
  {
    v11 = 0;
    v12 = 0;
    do
    {
      v13 = (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*a2 + 160))(*a2, 2);
      v14 = (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*a2 + 160))(*a2, 2);
      (*(void (**)(uint64_t, _QWORD, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v19 + 72))(v19, *a2, (v13 * v11), (v14 + v13 * v11), v12);
      v12 = (v14 + v12);
      ++v11;
    }
    while (a3 != v11);
  }
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v19 + 32))(v19, a4);
  result = v19;
  v19 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_1AD8BC7E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (a12)
    (*(void (**)(uint64_t))(*(_QWORD *)a12 + 8))(a12);
  _Unwind_Resume(exception_object);
}

void quasar::buildApplyLabelMasks(uint64_t a1, int *a2, _QWORD *a3, uint64_t *a4)
{
  unint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;

  std::vector<BOOL>::resize((uint64_t)a4, *a2, 0);
  if (*(int *)(a1 + 20) >= 1)
  {
    v8 = 0;
    do
    {
      v13 = *(_DWORD *)(*((_QWORD *)a2 + 1) + 4 * v8);
      v9 = std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>(a3, &v13);
      if (v9
        && *(float *)(*(_QWORD *)(a1 + 8)
                    + 4 * *(_DWORD *)(a1 + 24) * (int)v8
                    + 4 * *(int *)(*((_QWORD *)a2 + 1) + 4 * v8)) < *((float *)v9 + 5))
      {
        v10 = *a4;
        v11 = (v8 >> 3) & 0x1FFFFFFFFFFFFFF8;
        v12 = *(_QWORD *)(*a4 + v11) & ~(1 << v8);
      }
      else
      {
        v10 = *a4;
        v11 = (v8 >> 3) & 0x1FFFFFFFFFFFFFF8;
        v12 = *(_QWORD *)(*a4 + v11) | (1 << v8);
      }
      *(_QWORD *)(v10 + v11) = v12;
      ++v8;
    }
    while ((uint64_t)v8 < *(int *)(a1 + 20));
  }
}

double quasar::InverseTextNormalizer::InverseTextNormalizer(quasar::InverseTextNormalizer *this)
{
  double result;

  *(_QWORD *)this = &off_1E5D384C0;
  *((_QWORD *)this + 48) = 0;
  *((_QWORD *)this + 49) = 0;
  result = 0.0;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + 8) = 0u;
  *((_OWORD *)this + 9) = 0u;
  *((_OWORD *)this + 10) = 0u;
  *((_OWORD *)this + 11) = 0u;
  *((_OWORD *)this + 12) = 0u;
  *((_OWORD *)this + 13) = 0u;
  *((_OWORD *)this + 14) = 0u;
  *((_OWORD *)this + 15) = 0u;
  *((_OWORD *)this + 16) = 0u;
  *((_OWORD *)this + 17) = 0u;
  *((_OWORD *)this + 18) = 0u;
  *((_OWORD *)this + 19) = 0u;
  *((_OWORD *)this + 20) = 0u;
  *((_OWORD *)this + 21) = 0u;
  *((_OWORD *)this + 22) = 0u;
  *((_QWORD *)this + 46) = 0;
  *((_QWORD *)this + 47) = (char *)this + 384;
  *((_OWORD *)this + 25) = 0u;
  *((_OWORD *)this + 26) = 0u;
  *((_OWORD *)this + 27) = 0u;
  *((_QWORD *)this + 56) = 0;
  *((_DWORD *)this + 114) = 1065353216;
  *((_OWORD *)this + 29) = 0u;
  *((_OWORD *)this + 30) = 0u;
  *((_DWORD *)this + 124) = 1065353216;
  *(_OWORD *)((char *)this + 504) = 0u;
  *(_OWORD *)((char *)this + 520) = 0u;
  *((_DWORD *)this + 134) = 1065353216;
  *((_OWORD *)this + 34) = 0u;
  *((_OWORD *)this + 35) = 0u;
  *((_DWORD *)this + 144) = 1065353216;
  *(_OWORD *)((char *)this + 584) = 0u;
  *(_OWORD *)((char *)this + 600) = 0u;
  *(_OWORD *)((char *)this + 616) = 0u;
  *((_DWORD *)this + 158) = 1065353216;
  *((_DWORD *)this + 162) = 0;
  *((_OWORD *)this + 41) = 0u;
  *((_OWORD *)this + 42) = 0u;
  *((_QWORD *)this + 86) = 0;
  *((_DWORD *)this + 174) = 1065353216;
  *((_OWORD *)this + 44) = 0u;
  *((_OWORD *)this + 45) = 0u;
  *((_DWORD *)this + 184) = 1065353216;
  *((_QWORD *)this + 95) = 0;
  *((_QWORD *)this + 94) = 0;
  *((_QWORD *)this + 93) = (char *)this + 752;
  *((_QWORD *)this + 97) = 0;
  return result;
}

void quasar::InverseTextNormalizer::~InverseTextNormalizer(quasar::InverseTextNormalizer *this)
{
  void **v2;

  *(_QWORD *)this = &off_1E5D384C0;
  ucasemap_close();
  std::unique_ptr<quasar::PunctuationTransformer>::reset[abi:ne180100]((quasar::PunctuationTransformer **)this + 97, 0);
  std::__tree<std::__value_type<quasar::LmeDataFactoryBase::LmeType,std::vector<std::shared_ptr<quasar::LmeContainer>>>,std::__map_value_compare<quasar::LmeDataFactoryBase::LmeType,std::__value_type<quasar::LmeDataFactoryBase::LmeType,std::vector<std::shared_ptr<quasar::LmeContainer>>>,std::less<quasar::LmeDataFactoryBase::LmeType>,true>,std::allocator<std::__value_type<quasar::LmeDataFactoryBase::LmeType,std::vector<std::shared_ptr<quasar::LmeContainer>>>>>::destroy((uint64_t)this + 744, *((char **)this + 94));
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)this + 704);
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)this + 664);
  std::unique_ptr<quasar::LabelTransformer>::reset[abi:ne180100]((quasar::LabelTransformer **)this + 82, 0);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)this + 600);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this + 584);
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table((uint64_t)this + 544);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)this + 504);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)this + 464);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)this + 424);
  v2 = (void **)((char *)this + 400);
  std::vector<quasar::InverseTextNormalizer::RegexFeatInfo>::__destroy_vector::operator()[abi:ne180100](&v2);
  std::__tree<std::__value_type<std::string,std::vector<int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<int>>>>::destroy((uint64_t)this + 376, *((_QWORD **)this + 48));
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this + 360);
  if (*((char *)this + 359) < 0)
    operator delete(*((void **)this + 42));
  if (*((char *)this + 335) < 0)
    operator delete(*((void **)this + 39));
  if (*((char *)this + 311) < 0)
    operator delete(*((void **)this + 36));
  if (*((char *)this + 287) < 0)
    operator delete(*((void **)this + 33));
  if (*((char *)this + 263) < 0)
    operator delete(*((void **)this + 30));
  if (*((char *)this + 239) < 0)
    operator delete(*((void **)this + 27));
  if (*((char *)this + 215) < 0)
    operator delete(*((void **)this + 24));
  if (*((char *)this + 191) < 0)
    operator delete(*((void **)this + 21));
  if (*((char *)this + 167) < 0)
    operator delete(*((void **)this + 18));
  if (*((char *)this + 143) < 0)
    operator delete(*((void **)this + 15));
  if (*((char *)this + 119) < 0)
    operator delete(*((void **)this + 12));
  if (*((char *)this + 95) < 0)
    operator delete(*((void **)this + 9));
  if (*((char *)this + 71) < 0)
    operator delete(*((void **)this + 6));
  if (*((char *)this + 47) < 0)
    operator delete(*((void **)this + 3));
}

{
  quasar::InverseTextNormalizer::~InverseTextNormalizer(this);
  JUMPOUT(0x1AF44D190);
}

void quasar::InverseTextNormalizer::init(_DWORD *a1, uint64_t a2, uint64_t a3)
{
  size_t v6;
  void **v7;
  const void *v8;
  uint64_t v9;
  _DWORD *v10;
  quasar::LabelTransformer *v11;
  const quasar::PTree *Ptree;
  uint64_t Int;
  uint64_t v14;
  const quasar::PTree *ChildOptional;
  size_t v16;
  void **v17;
  const void *v18;
  const quasar::PTree *PtreeOptional;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  quasar::VocabId *v25;
  int WordId;
  quasar::VocabId *v27;
  int v28;
  _QWORD *v29;
  std::__shared_weak_count *v30;
  quasar::VocabId *v31;
  unint64_t *p_shared_owners;
  unint64_t v33;
  int v34;
  int v35;
  unint64_t *v36;
  unint64_t v37;
  quasar::VocabId *v38;
  int v39;
  quasar::VocabId *v40;
  int v41;
  uint64_t v42;
  std::string v43;
  void *__p[2];
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;

  if (a1[162])
  {
    v59 = 0u;
    v60 = 0u;
    v57 = 0u;
    v58 = 0u;
    v55 = 0u;
    v56 = 0u;
    v53 = 0u;
    v54 = 0u;
    v51 = 0u;
    v52 = 0u;
    v50 = 0u;
    v48 = 0u;
    v49 = 0u;
    v46 = 0u;
    v47 = 0u;
    *(_OWORD *)__p = 0u;
    v45 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(__p, "InverseTextNormalizer already initialized.");
    goto LABEL_90;
  }
  if (*(_DWORD *)(a2 + 1536) != 1)
  {
    memset(&v43, 0, sizeof(v43));
    *(_OWORD *)__p = 0u;
    v45 = 0u;
    LODWORD(v46) = 1065353216;
    quasar::SystemConfig::readJsonFile(a2, (uint64_t)(a1 + 30), (uint64_t *)&v43, (uint64_t)__p, 0, 0);
    std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table((uint64_t)__p);
    __p[0] = &v43;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  }
  if (*(char *)(a3 + 23) >= 0)
    v6 = *(unsigned __int8 *)(a3 + 23);
  else
    v6 = *(_QWORD *)(a3 + 8);
  v7 = __p;
  std::string::basic_string[abi:ne180100]((uint64_t)__p, v6 + 1);
  if (SBYTE7(v45) < 0)
    v7 = (void **)__p[0];
  if (v6)
  {
    if (*(char *)(a3 + 23) >= 0)
      v8 = (const void *)a3;
    else
      v8 = *(const void **)a3;
    memmove(v7, v8, v6);
  }
  *(_WORD *)((char *)v7 + v6) = 46;
  quasar::SystemConfig::setPrefix((std::string *)a2, (const std::string *)__p);
  if (SBYTE7(v45) < 0)
    operator delete(__p[0]);
  (*(void (**)(_DWORD *, uint64_t))(*(_QWORD *)a1 + 16))(a1, a2);
  quasar::SystemConfig::readPtree(a2, a3, 0, 0);
  quasar::InverseTextNormalizer::finishInit((quasar::InverseTextNormalizer *)a1);
  a1[162] = 1;
  v9 = operator new();
  *(_OWORD *)(v9 + 16) = 0u;
  *(_OWORD *)(v9 + 32) = 0u;
  *(_OWORD *)v9 = 0u;
  *(_OWORD *)(v9 + 64) = 0u;
  *(_OWORD *)(v9 + 80) = 0u;
  *(_OWORD *)(v9 + 96) = 0u;
  *(_OWORD *)(v9 + 112) = 0u;
  *(_OWORD *)(v9 + 128) = 0u;
  *(_OWORD *)(v9 + 144) = 0u;
  *(_OWORD *)(v9 + 160) = 0u;
  *(_OWORD *)(v9 + 176) = 0u;
  *(_OWORD *)(v9 + 192) = 0u;
  *(_OWORD *)(v9 + 208) = 0u;
  *(_OWORD *)(v9 + 224) = 0u;
  *(_OWORD *)(v9 + 240) = 0u;
  *(_OWORD *)(v9 + 48) = 0u;
  *(_DWORD *)(v9 + 40) = 1065353216;
  quasar::SystemConfig::Version::Version((quasar::SystemConfig::Version *)(v9 + 48));
  *(_OWORD *)(v9 + 152) = 0u;
  *(_OWORD *)(v9 + 136) = 0u;
  *(_OWORD *)(v9 + 56) = 0u;
  *(_OWORD *)(v9 + 72) = 0u;
  *(_OWORD *)(v9 + 88) = 0u;
  *(_OWORD *)(v9 + 104) = 0u;
  *(_QWORD *)(v9 + 120) = 0;
  *(_QWORD *)(v9 + 128) = &unk_1E5D34170;
  *(_BYTE *)(v9 + 168) = 0;
  *(_OWORD *)(v9 + 184) = 0u;
  *(_OWORD *)(v9 + 200) = 0u;
  *(_DWORD *)(v9 + 216) = 1065353216;
  *(_QWORD *)(v9 + 232) = 0;
  *(_QWORD *)(v9 + 240) = 0;
  v10 = a1 + 164;
  *(_QWORD *)(v9 + 224) = 0;
  std::unique_ptr<quasar::LabelTransformer>::reset[abi:ne180100]((quasar::LabelTransformer **)a1 + 82, (quasar::LabelTransformer *)v9);
  v11 = (quasar::LabelTransformer *)*((_QWORD *)a1 + 82);
  Ptree = (const quasar::PTree *)quasar::SystemConfig::getPtree(a2, a3);
  quasar::LabelTransformer::init(v11, Ptree, (const quasar::SystemConfig *)a2, 1, 0);
  if (*((char *)a1 + 359) < 0)
  {
    if (!*((_QWORD *)a1 + 43))
      goto LABEL_31;
  }
  else if (!*((_BYTE *)a1 + 359))
  {
    goto LABEL_31;
  }
  quasar::PTree::PTree((quasar::PTree *)__p);
  quasar::PTree::readJsonFromFile((uint64_t)__p, (__int128 *)a1 + 21);
  std::string::basic_string[abi:ne180100]<0>(&v43, "max-num-feats");
  Int = quasar::PTree::getIntOptional<int>((uint64_t)__p, (uint64_t)&v43);
  if ((Int & 0xFF00000000) == 0)
    LODWORD(Int) = a1[2];
  a1[2] = Int;
  if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v43.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v43, "chunk-length");
  v14 = quasar::PTree::getIntOptional<int>((uint64_t)__p, (uint64_t)&v43);
  if ((v14 & 0xFF00000000) == 0)
    LODWORD(v14) = a1[4];
  a1[4] = v14;
  if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v43.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v43, "punctuation");
  ChildOptional = (const quasar::PTree *)quasar::PTree::getChildOptional((uint64_t)__p, (uint64_t)&v43);
  quasar::InverseTextNormalizer::InitPunctuationTransformer((quasar::PunctuationTransformer **)a1, ChildOptional, (quasar::SystemConfig *)a2);
  if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v43.__r_.__value_.__l.__data_);
  quasar::PTree::~PTree((quasar::PTree *)__p);
LABEL_31:
  if (!*((_QWORD *)a1 + 97))
  {
    if (*(char *)(a3 + 23) >= 0)
      v16 = *(unsigned __int8 *)(a3 + 23);
    else
      v16 = *(_QWORD *)(a3 + 8);
    v17 = __p;
    std::string::basic_string[abi:ne180100]((uint64_t)__p, v16 + 12);
    if (SBYTE7(v45) < 0)
      v17 = (void **)__p[0];
    if (v16)
    {
      if (*(char *)(a3 + 23) >= 0)
        v18 = (const void *)a3;
      else
        v18 = *(const void **)a3;
      memmove(v17, v18, v16);
    }
    strcpy((char *)v17 + v16, ".punctuation");
    PtreeOptional = (const quasar::PTree *)quasar::SystemConfig::getPtreeOptional(a2, (uint64_t)__p);
    quasar::InverseTextNormalizer::InitPunctuationTransformer((quasar::PunctuationTransformer **)a1, PtreeOptional, (quasar::SystemConfig *)a2);
    if (SBYTE7(v45) < 0)
      operator delete(__p[0]);
  }
  quasar::EntityTransformer::init((uint64_t)(a1 + 166), (quasar::SystemConfig *)a2, a3);
  v20 = *(_QWORD *)(*((_QWORD *)a1 + 82) + 88);
  if (v20)
  {
    v21 = a1[4];
    if (v21 < 1 || v21 > (int)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v20 + 48))(v20) - 2))
    {
      v59 = 0u;
      v60 = 0u;
      v57 = 0u;
      v58 = 0u;
      v55 = 0u;
      v56 = 0u;
      v53 = 0u;
      v54 = 0u;
      v51 = 0u;
      v52 = 0u;
      v50 = 0u;
      v48 = 0u;
      v49 = 0u;
      v46 = 0u;
      v47 = 0u;
      *(_OWORD *)__p = 0u;
      v45 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"For non-Kaldi models, 'chunk-length' in config json needs to be set to [1, model input length - 2]. The itn model input length is ", 130);
      v42 = *(_QWORD *)(*(_QWORD *)v10 + 88);
      if (!v42)
        goto LABEL_89;
      goto LABEL_88;
    }
  }
  v22 = *((_QWORD *)a1 + 97);
  if (v22)
  {
    v23 = *(_QWORD *)(v22 + 88);
    if (v23)
    {
      v24 = a1[4];
      if (v24 < 1 || v24 > (int)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v23 + 48))(v23) - 2))
      {
        v59 = 0u;
        v60 = 0u;
        v57 = 0u;
        v58 = 0u;
        v55 = 0u;
        v56 = 0u;
        v53 = 0u;
        v54 = 0u;
        v51 = 0u;
        v52 = 0u;
        v50 = 0u;
        v48 = 0u;
        v49 = 0u;
        v46 = 0u;
        v47 = 0u;
        *(_OWORD *)__p = 0u;
        v45 = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"For non-Kaldi models, 'chunk-length' in config json needs to be set to [1, model input length - 2]. The punctuation model input length is ", 138);
        v42 = *(_QWORD *)(*((_QWORD *)a1 + 97) + 88);
        if (!v42)
          goto LABEL_89;
LABEL_88:
        (*(void (**)(uint64_t))(*(_QWORD *)v42 + 48))(v42);
LABEL_89:
        std::ostream::operator<<();
LABEL_90:
        quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)__p);
      }
    }
  }
  if (*(_QWORD *)(*(_QWORD *)v10 + 88))
  {
    v25 = (quasar::VocabId *)*((_QWORD *)a1 + 45);
    quasar::VocabId::getPaddingWord(v25, (std::string *)__p);
    WordId = quasar::VocabId::getWordId((uint64_t)v25, (uint64_t)__p);
    v27 = (quasar::VocabId *)*((_QWORD *)a1 + 45);
    quasar::VocabId::getOovWord(v27, &v43);
    v28 = quasar::VocabId::getWordId((uint64_t)v27, (uint64_t)&v43);
    if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v43.__r_.__value_.__l.__data_);
    if (SBYTE7(v45) < 0)
      operator delete(__p[0]);
    if (WordId == v28)
    {
      v59 = 0u;
      v60 = 0u;
      v57 = 0u;
      v58 = 0u;
      v55 = 0u;
      v56 = 0u;
      v53 = 0u;
      v54 = 0u;
      v51 = 0u;
      v52 = 0u;
      v50 = 0u;
      v48 = 0u;
      v49 = 0u;
      v46 = 0u;
      v47 = 0u;
      *(_OWORD *)__p = 0u;
      v45 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
      std::operator<<[abi:ne180100]<std::char_traits<char>>(__p, "For non-Kaldi models, <PAD> is required in source-vocab-file");
      goto LABEL_90;
    }
  }
  v29 = (_QWORD *)*((_QWORD *)a1 + 97);
  if (!v29 || !v29[11])
    goto LABEL_73;
  v31 = (quasar::VocabId *)v29[35];
  v30 = (std::__shared_weak_count *)v29[36];
  if (v30)
  {
    p_shared_owners = (unint64_t *)&v30->__shared_owners_;
    do
      v33 = __ldxr(p_shared_owners);
    while (__stxr(v33 + 1, p_shared_owners));
  }
  if (!v31)
  {
    v38 = (quasar::VocabId *)*((_QWORD *)a1 + 45);
    quasar::VocabId::getPaddingWord(v38, (std::string *)__p);
    v39 = quasar::VocabId::getWordId((uint64_t)v38, (uint64_t)__p);
    v40 = (quasar::VocabId *)*((_QWORD *)a1 + 45);
    quasar::VocabId::getOovWord(v40, &v43);
    v41 = quasar::VocabId::getWordId((uint64_t)v40, (uint64_t)&v43);
    if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v43.__r_.__value_.__l.__data_);
    if (SBYTE7(v45) < 0)
      operator delete(__p[0]);
    if (v39 != v41)
      goto LABEL_68;
LABEL_81:
    v59 = 0u;
    v60 = 0u;
    v57 = 0u;
    v58 = 0u;
    v55 = 0u;
    v56 = 0u;
    v53 = 0u;
    v54 = 0u;
    v51 = 0u;
    v52 = 0u;
    v50 = 0u;
    v48 = 0u;
    v49 = 0u;
    v46 = 0u;
    v47 = 0u;
    *(_OWORD *)__p = 0u;
    v45 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"For non-Kaldi models, <PAD> is required in source-vocab-file", 60);
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)__p);
  }
  quasar::VocabId::getPaddingWord(v31, (std::string *)__p);
  v34 = quasar::VocabId::getWordId((uint64_t)v31, (uint64_t)__p);
  quasar::VocabId::getOovWord(v31, &v43);
  v35 = quasar::VocabId::getWordId((uint64_t)v31, (uint64_t)&v43);
  if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v43.__r_.__value_.__l.__data_);
  if (SBYTE7(v45) < 0)
    operator delete(__p[0]);
  if (v34 == v35)
    goto LABEL_81;
LABEL_68:
  if (v30)
  {
    v36 = (unint64_t *)&v30->__shared_owners_;
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 - 1, v36));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
    }
  }
LABEL_73:
  if (quasar::gLogLevel >= 4)
  {
    v59 = 0u;
    v60 = 0u;
    v57 = 0u;
    v58 = 0u;
    v55 = 0u;
    v56 = 0u;
    v53 = 0u;
    v54 = 0u;
    v51 = 0u;
    v52 = 0u;
    v50 = 0u;
    v48 = 0u;
    v49 = 0u;
    v46 = 0u;
    v47 = 0u;
    *(_OWORD *)__p = 0u;
    v45 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Initialized ITN", 15);
    quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)__p);
  }
}

void quasar::InverseTextNormalizer::finishInit(quasar::InverseTextNormalizer *this)
{
  std::__shared_weak_count *v2;
  unint64_t *v3;
  unint64_t v4;
  std::locale::id *v5;
  const std::locale::facet *v6;
  unsigned __int8 v7;
  _QWORD *v8;
  const std::string *v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  std::locale::id *v15;
  const std::locale::facet *v16;
  unsigned __int8 v17;
  _QWORD *v18;
  std::locale::__imp *locale;
  std::locale::__imp *i;
  int v21;
  unint64_t v22;
  uint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *p_shared_owners;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  const std::string **v30;
  std::locale::__imp *j;
  int v32;
  unint64_t v33;
  uint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  std::locale::id *v41;
  const std::locale::facet *v42;
  unsigned __int8 v43;
  _QWORD *v44;
  quasar::InverseTextNormalizer *v45;
  std::locale::id *v46;
  const std::locale::facet *v47;
  unsigned __int8 v48;
  _QWORD *v49;
  std::string **k;
  std::string **v51;
  std::string *v52;
  unsigned __int8 *v53;
  quasar::InverseTextNormalizer *v54;
  std::string v55;
  void *__p[2];
  char v57;
  __int128 v58;
  uint64_t v59;
  std::locale v60[2];
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  uint64_t v77[3];
  std::locale v78;
  uint64_t v79;
  uint64_t v80;
  void **v81;
  __int128 v82[26];
  _QWORD v83[23];

  v83[20] = *MEMORY[0x1E0C80C00];
  std::allocate_shared[abi:ne180100]<kaldi::quasar::PrefixTree<std::string,std::string>,std::allocator<kaldi::quasar::PrefixTree<std::string,std::string>>,char const(&)[1],void>("", v82);
  std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100]((uint64_t)this + 584, v82);
  v2 = (std::__shared_weak_count *)*((_QWORD *)&v82[0] + 1);
  if (*((_QWORD *)&v82[0] + 1))
  {
    v3 = (unint64_t *)(*((_QWORD *)&v82[0] + 1) + 8);
    do
      v4 = __ldaxr(v3);
    while (__stlxr(v4 - 1, v3));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  std::ifstream::basic_ifstream(v82);
  v54 = this;
  v78.__locale_ = 0;
  v79 = 0;
  v80 = 0;
  v5 = (std::locale::id *)MEMORY[0x1E0DE4A90];
  while (1)
  {
    std::ios_base::getloc((const std::ios_base *)((char *)v82 + *(_QWORD *)(*(_QWORD *)&v82[0] - 24)));
    v6 = std::locale::use_facet(v60, v5);
    v7 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v6->__vftable[2].~facet_0)(v6, 10);
    std::locale::~locale(v60);
    v8 = std::getline[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v82, (uint64_t)&v78, v7);
    if ((*((_BYTE *)v8 + *(_QWORD *)(*v8 - 24) + 32) & 5) != 0)
      break;
    std::string::basic_string[abi:ne180100]<0>(v60, "\t");
    quasar::splitStringSimple((uint64_t)&v78, (uint64_t *)v60, v77);
    if (SBYTE7(v61) < 0)
      operator delete(v60[0].__locale_);
    v9 = (const std::string *)v77[0];
    if (v77[1] - v77[0] != 48)
    {
      v75 = 0u;
      v76 = 0u;
      v73 = 0u;
      v74 = 0u;
      v71 = 0u;
      v72 = 0u;
      v69 = 0u;
      v70 = 0u;
      v67 = 0u;
      v68 = 0u;
      v65 = 0u;
      v66 = 0u;
      v63 = 0u;
      v64 = 0u;
      v61 = 0u;
      v62 = 0u;
      *(_OWORD *)&v60[0].__locale_ = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v60);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v60, (uint64_t)"Invalid line in compound word list file", 39);
      quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v60);
    }
    v60[0].__locale_ = 0;
    v60[1].__locale_ = 0;
    *(_QWORD *)&v61 = 0;
    std::string::basic_string[abi:ne180100]<0>(__p, " ");
    quasar::splitAndTrimNoEmpty(v9, (char *)__p, &v58);
    std::vector<std::string>::__vdeallocate((std::vector<std::wstring> *)v60);
    *(_OWORD *)&v60[0].__locale_ = v58;
    *(_QWORD *)&v61 = v59;
    v59 = 0;
    v58 = 0uLL;
    v81 = (void **)&v58;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v81);
    if (v57 < 0)
      operator delete(__p[0]);
    *(_QWORD *)&v58 = 0;
    __p[0] = 0;
    kaldi::quasar::PrefixTree<std::string,std::string>::AddSequence(*((_QWORD ***)this + 73), (uint64_t *)v60, (uint64_t *)&v58, (uint64_t *)__p);
    std::string::operator=((std::string *)((char *)__p[0] + 40), (const std::string *)(v77[0] + 24));
    *(_QWORD *)&v58 = v60;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v58);
    v60[0].__locale_ = (std::locale::__imp *)v77;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v60);
  }
  if (SHIBYTE(v80) < 0)
    operator delete(v78.__locale_);
  v10 = *MEMORY[0x1E0DE4F40];
  *(_QWORD *)&v82[0] = v10;
  v11 = *(_QWORD *)(MEMORY[0x1E0DE4F40] + 24);
  *(_QWORD *)((char *)v82 + *(_QWORD *)(v10 - 24)) = v11;
  MEMORY[0x1AF44CA70](&v82[1]);
  std::istream::~istream();
  MEMORY[0x1AF44D094](v83);
  std::allocate_shared[abi:ne180100]<quasar::VocabId,std::allocator<quasar::VocabId>,std::string &,std::string &,std::string &,std::string &,void>((uint64_t)this + 168, (uint64_t)this + 192, (uint64_t)this + 216, (uint64_t)this + 240, v82);
  std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100]((uint64_t)this + 360, v82);
  v12 = (std::__shared_weak_count *)*((_QWORD *)&v82[0] + 1);
  if (*((_QWORD *)&v82[0] + 1))
  {
    v13 = (unint64_t *)(*((_QWORD *)&v82[0] + 1) + 8);
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  std::ifstream::basic_ifstream(v82);
  v60[0].__locale_ = 0;
  v60[1].__locale_ = 0;
  *(_QWORD *)&v61 = 0;
  v15 = (std::locale::id *)MEMORY[0x1E0DE4A90];
  while (1)
  {
    std::ios_base::getloc((const std::ios_base *)((char *)v82 + *(_QWORD *)(*(_QWORD *)&v82[0] - 24)));
    v16 = std::locale::use_facet(&v78, v15);
    v17 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v16->__vftable[2].~facet_0)(v16, 10);
    std::locale::~locale(&v78);
    v18 = std::getline[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v82, (uint64_t)v60, v17);
    if ((*((_BYTE *)v18 + *(_QWORD *)(*v18 - 24) + 32) & 5) != 0)
      break;
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)this + 504, (unsigned __int8 *)v60, (uint64_t)v60);
  }
  if (SBYTE7(v61) < 0)
    operator delete(v60[0].__locale_);
  *(_QWORD *)&v82[0] = v10;
  *(_QWORD *)((char *)v82 + *(_QWORD *)(v10 - 24)) = v11;
  MEMORY[0x1AF44CA70](&v82[1]);
  std::istream::~istream();
  MEMORY[0x1AF44D094](v83);
  if (*((char *)this + 47) < 0)
    std::string::__init_copy_ctor_external(&v55, *((const std::string::value_type **)this + 3), *((_QWORD *)this + 4));
  else
    v55 = *(std::string *)((_BYTE *)this + 1);
  quasar::loadClusterIdFile((uint64_t)&v55, (uint64_t **)this + 47);
  if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v55.__r_.__value_.__l.__data_);
  if (*((char *)this + 71) < 0)
  {
    if (*((_QWORD *)this + 7))
    {
LABEL_33:
      quasar::readTsvFile(1, (uint64_t *)v60);
      locale = v60[0].__locale_;
      for (i = v60[1].__locale_; locale != i; locale = (std::locale::__imp *)((char *)locale + 24))
      {
        v21 = std::stoi((const std::string *)(*(_QWORD *)locale + 24), 0, 10);
        std::string::basic_string[abi:ne180100]<0>(&v78, ".*");
        quasar::InverseTextNormalizer::RegexFeatInfo::RegexFeatInfo((uint64_t)v82, v21);
        v22 = *((_QWORD *)v54 + 51);
        if (v22 >= *((_QWORD *)v54 + 52))
        {
          v23 = std::vector<quasar::InverseTextNormalizer::RegexFeatInfo>::__push_back_slow_path<quasar::InverseTextNormalizer::RegexFeatInfo>((uint64_t *)v54 + 50, (uint64_t)v82);
          v24 = *(std::__shared_weak_count **)&v82[2];
          *((_QWORD *)v54 + 51) = v23;
          if (v24)
          {
            p_shared_owners = (unint64_t *)&v24->__shared_owners_;
            do
              v26 = __ldaxr(p_shared_owners);
            while (__stlxr(v26 - 1, p_shared_owners));
            if (!v26)
            {
              ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
              std::__shared_weak_count::__release_weak(v24);
            }
          }
        }
        else
        {
          *(_DWORD *)v22 = v82[0];
          *(_OWORD *)(v22 + 8) = *(__int128 *)((char *)v82 + 8);
          *((_QWORD *)&v82[0] + 1) = 0;
          *(_QWORD *)&v82[1] = 0;
          *(_OWORD *)(v22 + 24) = *(__int128 *)((char *)&v82[1] + 8);
          *((_QWORD *)&v82[1] + 1) = 0;
          *(_QWORD *)&v82[2] = 0;
          *((_QWORD *)v54 + 51) = v22 + 40;
        }
        v27 = *(std::__shared_weak_count **)&v82[1];
        if (*(_QWORD *)&v82[1])
        {
          v28 = (unint64_t *)(*(_QWORD *)&v82[1] + 8);
          do
            v29 = __ldaxr(v28);
          while (__stlxr(v29 - 1, v28));
          if (!v29)
          {
            ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
            std::__shared_weak_count::__release_weak(v27);
          }
        }
        if (SHIBYTE(v80) < 0)
          operator delete(v78.__locale_);
      }
      goto LABEL_65;
    }
  }
  else if (*((_BYTE *)this + 71))
  {
    goto LABEL_33;
  }
  quasar::readTsvFile(1, (uint64_t *)v60);
  v30 = (const std::string **)v60[0].__locale_;
  for (j = v60[1].__locale_; v30 != (const std::string **)j; v30 += 3)
  {
    v32 = std::stoi(*v30, 0, 10);
    quasar::InverseTextNormalizer::RegexFeatInfo::RegexFeatInfo((uint64_t)v82, v32);
    v33 = *((_QWORD *)v54 + 51);
    if (v33 >= *((_QWORD *)v54 + 52))
    {
      v34 = std::vector<quasar::InverseTextNormalizer::RegexFeatInfo>::__push_back_slow_path<quasar::InverseTextNormalizer::RegexFeatInfo>((uint64_t *)v54 + 50, (uint64_t)v82);
      v35 = *(std::__shared_weak_count **)&v82[2];
      *((_QWORD *)v54 + 51) = v34;
      if (v35)
      {
        v36 = (unint64_t *)&v35->__shared_owners_;
        do
          v37 = __ldaxr(v36);
        while (__stlxr(v37 - 1, v36));
        if (!v37)
        {
          ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
          std::__shared_weak_count::__release_weak(v35);
        }
      }
    }
    else
    {
      *(_DWORD *)v33 = v82[0];
      *(_OWORD *)(v33 + 8) = *(__int128 *)((char *)v82 + 8);
      *((_QWORD *)&v82[0] + 1) = 0;
      *(_QWORD *)&v82[1] = 0;
      *(_OWORD *)(v33 + 24) = *(__int128 *)((char *)&v82[1] + 8);
      *((_QWORD *)&v82[1] + 1) = 0;
      *(_QWORD *)&v82[2] = 0;
      *((_QWORD *)v54 + 51) = v33 + 40;
    }
    v38 = *(std::__shared_weak_count **)&v82[1];
    if (*(_QWORD *)&v82[1])
    {
      v39 = (unint64_t *)(*(_QWORD *)&v82[1] + 8);
      do
        v40 = __ldaxr(v39);
      while (__stlxr(v40 - 1, v39));
      if (!v40)
      {
        ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
        std::__shared_weak_count::__release_weak(v38);
      }
    }
  }
LABEL_65:
  *(_QWORD *)&v82[0] = v60;
  std::vector<std::vector<std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)v82);
  quasar::CommandTransform::initStringToCommandMap((uint64_t)v54 + 600);
  LODWORD(v77[0]) = 0;
  *((_QWORD *)v54 + 80) = ucasemap_open();
  std::ifstream::basic_ifstream(v82);
  v60[0].__locale_ = 0;
  v60[1].__locale_ = 0;
  *(_QWORD *)&v61 = 0;
  v41 = (std::locale::id *)MEMORY[0x1E0DE4A90];
  while (1)
  {
    std::ios_base::getloc((const std::ios_base *)((char *)v82 + *(_QWORD *)(*(_QWORD *)&v82[0] - 24)));
    v42 = std::locale::use_facet(&v78, v41);
    v43 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v42->__vftable[2].~facet_0)(v42, 10);
    std::locale::~locale(&v78);
    v44 = std::getline[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v82, (uint64_t)v60, v43);
    if ((*((_BYTE *)v44 + *(_QWORD *)(*v44 - 24) + 32) & 5) != 0)
      break;
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)v54 + 464, (unsigned __int8 *)v60, (uint64_t)v60);
  }
  if (SBYTE7(v61) < 0)
    operator delete(v60[0].__locale_);
  *(_QWORD *)&v82[0] = v10;
  *(_QWORD *)((char *)v82 + *(_QWORD *)(v10 - 24)) = v11;
  MEMORY[0x1AF44CA70](&v82[1]);
  std::istream::~istream();
  MEMORY[0x1AF44D094](v83);
  v45 = v54;
  if (*((char *)v54 + 311) < 0)
  {
    if (!*((_QWORD *)v54 + 37))
      goto LABEL_80;
  }
  else if (!*((_BYTE *)v54 + 311))
  {
    goto LABEL_80;
  }
  std::ifstream::basic_ifstream(v82);
  v60[0].__locale_ = 0;
  v60[1].__locale_ = 0;
  *(_QWORD *)&v61 = 0;
  v46 = (std::locale::id *)MEMORY[0x1E0DE4A90];
  while (1)
  {
    std::ios_base::getloc((const std::ios_base *)((char *)v82 + *(_QWORD *)(*(_QWORD *)&v82[0] - 24)));
    v47 = std::locale::use_facet(&v78, v46);
    v48 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v47->__vftable[2].~facet_0)(v47, 10);
    std::locale::~locale(&v78);
    v49 = std::getline[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v82, (uint64_t)v60, v48);
    if ((*((_BYTE *)v49 + *(_QWORD *)(*v49 - 24) + 32) & 5) != 0)
      break;
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)v54 + 424, (unsigned __int8 *)v60, (uint64_t)v60);
  }
  if (SBYTE7(v61) < 0)
    operator delete(v60[0].__locale_);
  *(_QWORD *)&v82[0] = v10;
  *(_QWORD *)((char *)v82 + *(_QWORD *)(v10 - 24)) = v11;
  MEMORY[0x1AF44CA70](&v82[1]);
  std::istream::~istream();
  MEMORY[0x1AF44D094](v83);
  v45 = v54;
LABEL_80:
  if (*((char *)v45 + 335) < 0)
  {
    if (!*((_QWORD *)v45 + 40))
      goto LABEL_87;
  }
  else if (!*((_BYTE *)v45 + 335))
  {
    goto LABEL_87;
  }
  quasar::readTsvFile(1, (uint64_t *)v82);
  v51 = (std::string **)*((_QWORD *)&v82[0] + 1);
  for (k = *(std::string ***)&v82[0]; k != v51; k += 3)
  {
    v52 = *k;
    v78.__locale_ = (std::locale::__imp *)v52;
    v53 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v54 + 544, (unsigned __int8 *)v52, (uint64_t)&std::piecewise_construct, (__int128 **)&v78);
    std::string::operator=((std::string *)(v53 + 40), v52 + 1);
  }
  v60[0].__locale_ = (std::locale::__imp *)v82;
  std::vector<std::vector<std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)v60);
  v45 = v54;
LABEL_87:
  if (*((_DWORD *)v45 + 4) < *((_DWORD *)v45 + 5))
  {
    memset(v82, 0, 272);
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v82);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v82, "chunk overlap is bigger than chunk length.");
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v82);
  }
}

void sub_1AD8BDFA8(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

void sub_1AD8BDFB8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1AD8BDFF4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,char a56,uint64_t a57,uint64_t a58,void *__p,uint64_t a60,int a61,__int16 a62,char a63)
{
  char a64;
  uint64_t a66;

  a21 = (uint64_t)&a56;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a21);
  if (a64 < 0)
    operator delete(__p);
  std::ifstream::~ifstream(&a66);
  JUMPOUT(0x1AD8BE0D4);
}

void sub_1AD8BDFFC()
{
  JUMPOUT(0x1AD8BE00CLL);
}

void sub_1AD8BE014(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24)
{
  if (a19 < 0)
    operator delete(__p);
  a20 = (uint64_t)&a24;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a20);
  JUMPOUT(0x1AD8BE068);
}

void sub_1AD8BE07C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,std::locale a59)
{
  std::locale::~locale(&a59);
  JUMPOUT(0x1AD8BE0BCLL);
}

void sub_1AD8BE090(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,std::locale a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,int a61,__int16 a62,char a63)
{
  char a64;

  std::locale::~locale(&a21);
  if (a64 < 0)
    JUMPOUT(0x1AD8BE0C8);
  JUMPOUT(0x1AD8BE0CCLL);
}

void sub_1AD8BE0B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a26 < 0)
    JUMPOUT(0x1AD8BE0C8);
  JUMPOUT(0x1AD8BE0CCLL);
}

void quasar::InverseTextNormalizer::InitPunctuationTransformer(quasar::PunctuationTransformer **this, const quasar::PTree *a2, quasar::SystemConfig *a3)
{
  _QWORD *v6;
  int v7;
  uint64_t v8;
  _OWORD v9[17];

  if (a2)
  {
    v6 = (_QWORD *)kaldi::quasar::ProcessName((kaldi::quasar *)this);
    v7 = *((char *)v6 + 23);
    if (v7 < 0)
    {
      if (v6[1] != 50)
      {
LABEL_8:
        v8 = operator new();
        *(_OWORD *)v8 = 0u;
        *(_OWORD *)(v8 + 16) = 0u;
        *(_OWORD *)(v8 + 32) = 0u;
        *(_OWORD *)(v8 + 48) = 0u;
        *(_OWORD *)(v8 + 64) = 0u;
        *(_OWORD *)(v8 + 80) = 0u;
        *(_OWORD *)(v8 + 96) = 0u;
        *(_OWORD *)(v8 + 112) = 0u;
        *(_OWORD *)(v8 + 128) = 0u;
        *(_OWORD *)(v8 + 144) = 0u;
        *(_OWORD *)(v8 + 160) = 0u;
        *(_OWORD *)(v8 + 176) = 0u;
        *(_OWORD *)(v8 + 192) = 0u;
        *(_OWORD *)(v8 + 208) = 0u;
        *(_OWORD *)(v8 + 224) = 0u;
        *(_OWORD *)(v8 + 240) = 0u;
        *(_OWORD *)(v8 + 256) = 0u;
        *(_OWORD *)(v8 + 272) = 0u;
        *(_OWORD *)(v8 + 288) = 0u;
        *(_OWORD *)(v8 + 304) = 0u;
        *(_OWORD *)(v8 + 320) = 0u;
        *(_OWORD *)(v8 + 336) = 0u;
        *(_OWORD *)(v8 + 352) = 0u;
        *(_OWORD *)(v8 + 368) = 0u;
        *(_OWORD *)(v8 + 384) = 0u;
        *(_OWORD *)(v8 + 400) = 0u;
        *(_OWORD *)(v8 + 416) = 0u;
        *(_OWORD *)(v8 + 432) = 0u;
        *(_OWORD *)(v8 + 448) = 0u;
        *(_OWORD *)(v8 + 464) = 0u;
        *(_QWORD *)(v8 + 480) = 0;
        quasar::PunctuationTransformer::PunctuationTransformer((quasar::PunctuationTransformer *)v8);
        std::unique_ptr<quasar::PunctuationTransformer>::reset[abi:ne180100](this + 97, (quasar::PunctuationTransformer *)v8);
        quasar::PunctuationTransformer::init(this[97], a2, a3);
        return;
      }
      v6 = (_QWORD *)*v6;
    }
    else if (v7 != 50)
    {
      goto LABEL_8;
    }
    if (memcmp(v6, "com.apple.SpeechRecognitionCore.speechrecognitiond", 0x32uLL))
      goto LABEL_8;
    if (quasar::gLogLevel >= 4)
    {
      memset(v9, 0, sizeof(v9));
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v9);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"Disabling punctuation model loading for speechrecognitiond", 58);
      quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)v9);
    }
  }
}

void sub_1AD8BE24C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&a9);
  _Unwind_Resume(a1);
}

void quasar::EntityTransformer::init(uint64_t a1, quasar::SystemConfig *a2, uint64_t a3)
{
  uint64_t Ptree;
  __int128 v5;
  uint64_t String;
  __int128 v7;
  uint64_t v8;
  __int128 v9;
  __int128 **i;
  __int128 **v11;
  __int128 *v12;
  __int128 v13;
  int v14;
  uint64_t *ModelLoaderPtr;
  uint64_t v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  std::string::size_type size;
  std::string *v21;
  std::string *v22;
  int v23;
  const std::string::value_type *v24;
  std::string::size_type v25;
  std::string *v26;
  __int128 v27;
  uint64_t *v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *p_shared_owners;
  unint64_t v34;
  uint64_t v35;
  __int128 v36;
  uint64_t v37;
  std::__shared_weak_count *v38;
  void *v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  const std::string *v43;
  unint64_t v44;
  unsigned __int8 *v45;
  int v46;
  unsigned __int8 *v47;
  int v48;
  uint64_t **v49;
  __int128 *v50;
  _QWORD *v51;
  _BYTE *v52;
  uint64_t v53;
  _QWORD *v54;
  _QWORD *v55;
  _BYTE *v56;
  uint64_t v57;
  _QWORD *v58;
  _QWORD *v59;
  std::string *v60;
  std::string::size_type v61;
  _QWORD *v62;
  _QWORD *v63;
  std::string *v64;
  std::string::size_type v65;
  _QWORD *v66;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  std::string v85;
  void *__p[2];
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  std::__shared_weak_count *v103;
  std::__shared_weak_count *v104;
  _BYTE v105[32];
  int v106;
  std::string v107;
  uint64_t *v108;
  _QWORD *v109[2];
  __int128 v110;
  __int128 v111;
  int v112;
  std::string v113;
  std::string v114;
  int v115;
  std::string v116;
  std::string v117;
  char v118;
  __int128 *v119;

  Ptree = quasar::SystemConfig::getPtree((uint64_t)a2, a3);
  v115 = *(_DWORD *)Ptree;
  if (*(char *)(Ptree + 31) < 0)
  {
    std::string::__init_copy_ctor_external(&v116, *(const std::string::value_type **)(Ptree + 8), *(_QWORD *)(Ptree + 16));
  }
  else
  {
    v5 = *(_OWORD *)(Ptree + 8);
    v116.__r_.__value_.__r.__words[2] = *(_QWORD *)(Ptree + 24);
    *(_OWORD *)&v116.__r_.__value_.__l.__data_ = v5;
  }
  memset(&v117, 0, sizeof(v117));
  std::vector<std::pair<std::string,quasar::PTree>>::__init_with_size[abi:ne180100]<std::pair<std::string,quasar::PTree>*,std::pair<std::string,quasar::PTree>*>(&v117, *(_QWORD *)(Ptree + 32), *(_QWORD *)(Ptree + 40), 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*(_QWORD *)(Ptree + 40) - *(_QWORD *)(Ptree + 32)) >> 3));
  v118 = *(_BYTE *)(Ptree + 56);
  std::string::basic_string[abi:ne180100]<0>(__p, "entity-tsv-file");
  String = quasar::PTree::getString((uint64_t)&v115, (__int128 *)__p);
  if (*(char *)(String + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v114, *(const std::string::value_type **)String, *(_QWORD *)(String + 8));
  }
  else
  {
    v7 = *(_OWORD *)String;
    v114.__r_.__value_.__r.__words[2] = *(_QWORD *)(String + 16);
    *(_OWORD *)&v114.__r_.__value_.__l.__data_ = v7;
  }
  if (SBYTE7(v87) < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "action-fst-directory");
  v8 = quasar::PTree::getString((uint64_t)&v115, (__int128 *)__p);
  if (*(char *)(v8 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v113, *(const std::string::value_type **)v8, *(_QWORD *)(v8 + 8));
  }
  else
  {
    v9 = *(_OWORD *)v8;
    v113.__r_.__value_.__r.__words[2] = *(_QWORD *)(v8 + 16);
    *(_OWORD *)&v113.__r_.__value_.__l.__data_ = v9;
  }
  if (SBYTE7(v87) < 0)
    operator delete(__p[0]);
  v110 = 0u;
  v111 = 0u;
  v112 = 1065353216;
  v109[1] = 0;
  v109[0] = 0;
  v108 = (uint64_t *)v109;
  quasar::readTsvFile(1, (uint64_t *)&v68);
  v11 = (__int128 **)*((_QWORD *)&v68 + 1);
  for (i = (__int128 **)v68; i != v11; i += 3)
  {
    v12 = *i;
    if (*((char *)*i + 23) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)v105, *(const std::string::value_type **)v12, *((_QWORD *)v12 + 1));
    }
    else
    {
      v13 = *v12;
      *(_QWORD *)&v105[16] = *((_QWORD *)v12 + 2);
      *(_OWORD *)v105 = v13;
    }
    if (std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>(&v110, v105))
    {
      v101 = 0u;
      v102 = 0u;
      v99 = 0u;
      v100 = 0u;
      v97 = 0u;
      v98 = 0u;
      v95 = 0u;
      v96 = 0u;
      v93 = 0u;
      v94 = 0u;
      v91 = 0u;
      v92 = 0u;
      v89 = 0u;
      v90 = 0u;
      v87 = 0u;
      v88 = 0u;
      *(_OWORD *)__p = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
      v55 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Duplicate occurrence of entity \"", 32);
      if (v105[23] >= 0)
        v56 = v105;
      else
        v56 = *(_BYTE **)v105;
      if (v105[23] >= 0)
        v57 = v105[23];
      else
        v57 = *(_QWORD *)&v105[8];
      v58 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v55, (uint64_t)v56, v57);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v58, (uint64_t)"\"", 1);
      quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)__p);
    }
    v14 = DWORD2(v111);
    v107.__r_.__value_.__r.__words[0] = (std::string::size_type)v105;
    *((_DWORD *)std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)&v110, v105, (uint64_t)&std::piecewise_construct, (__int128 **)&v107)+ 10) = v14;
    if (v109 != (_QWORD **)std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::find<std::string>((uint64_t)&v108, (const void **)v105))
    {
      v101 = 0u;
      v102 = 0u;
      v99 = 0u;
      v100 = 0u;
      v97 = 0u;
      v98 = 0u;
      v95 = 0u;
      v96 = 0u;
      v93 = 0u;
      v94 = 0u;
      v91 = 0u;
      v92 = 0u;
      v89 = 0u;
      v90 = 0u;
      v87 = 0u;
      v88 = 0u;
      *(_OWORD *)__p = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
      v51 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Duplicate occurrence of entity \"", 32);
      if (v105[23] >= 0)
        v52 = v105;
      else
        v52 = *(_BYTE **)v105;
      if (v105[23] >= 0)
        v53 = v105[23];
      else
        v53 = *(_QWORD *)&v105[8];
      v54 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v51, (uint64_t)v52, v53);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v54, (uint64_t)"\"", 1);
      quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)__p);
    }
    ModelLoaderPtr = (uint64_t *)quasar::SystemConfig::getModelLoaderPtr(a2);
    v17 = *ModelLoaderPtr;
    v16 = ModelLoaderPtr[1];
    v103 = (std::__shared_weak_count *)*ModelLoaderPtr;
    v104 = (std::__shared_weak_count *)v16;
    if (v16)
    {
      v18 = (unint64_t *)(v16 + 8);
      do
        v19 = __ldxr(v18);
      while (__stxr(v19 + 1, v18));
    }
    if ((v113.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v113.__r_.__value_.__r.__words[2]);
    else
      size = v113.__r_.__value_.__l.__size_;
    std::string::basic_string[abi:ne180100]((uint64_t)&v107, size + 1);
    if ((v107.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v21 = &v107;
    else
      v21 = (std::string *)v107.__r_.__value_.__r.__words[0];
    if (size)
    {
      if ((v113.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v22 = &v113;
      else
        v22 = (std::string *)v113.__r_.__value_.__r.__words[0];
      memmove(v21, v22, size);
    }
    *(_WORD *)((char *)&v21->__r_.__value_.__l.__data_ + size) = 47;
    v23 = *((char *)*i + 47);
    if (v23 >= 0)
      v24 = (char *)*i + 24;
    else
      v24 = (const std::string::value_type *)*((_QWORD *)*i + 3);
    if (v23 >= 0)
      v25 = *((unsigned __int8 *)*i + 47);
    else
      v25 = *((_QWORD *)*i + 4);
    v26 = std::string::append(&v107, v24, v25);
    v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
    *(_QWORD *)&v87 = *((_QWORD *)&v26->__r_.__value_.__l + 2);
    *(_OWORD *)__p = v27;
    v26->__r_.__value_.__l.__size_ = 0;
    v26->__r_.__value_.__r.__words[2] = 0;
    v26->__r_.__value_.__r.__words[0] = 0;
    (*(void (**)(std::string *__return_ptr, uint64_t, void **))(*(_QWORD *)v17 + 16))(&v85, v17, __p);
    v119 = (__int128 *)v105;
    v28 = std::__tree<std::__value_type<std::string,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(&v108, (const void **)v105, (uint64_t)&std::piecewise_construct, &v119);
    std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100]((uint64_t)(v28 + 7), (__int128 *)&v85);
    v29 = (std::__shared_weak_count *)v85.__r_.__value_.__l.__size_;
    if (v85.__r_.__value_.__l.__size_)
    {
      v30 = (unint64_t *)(v85.__r_.__value_.__l.__size_ + 8);
      do
        v31 = __ldaxr(v30);
      while (__stlxr(v31 - 1, v30));
      if (!v31)
      {
        ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
        std::__shared_weak_count::__release_weak(v29);
      }
    }
    if (SBYTE7(v87) < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v107.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v107.__r_.__value_.__l.__data_);
    v32 = v104;
    if (v104)
    {
      p_shared_owners = (unint64_t *)&v104->__shared_owners_;
      do
        v34 = __ldaxr(p_shared_owners);
      while (__stlxr(v34 - 1, p_shared_owners));
      if (!v34)
      {
        ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
        std::__shared_weak_count::__release_weak(v32);
      }
    }
    if ((v105[23] & 0x80000000) != 0)
      operator delete(*(void **)v105);
  }
  __p[0] = &v68;
  std::vector<std::vector<std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "label-tsv-file");
  v35 = quasar::PTree::getString((uint64_t)&v115, (__int128 *)__p);
  if (*(char *)(v35 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v107, *(const std::string::value_type **)v35, *(_QWORD *)(v35 + 8));
  }
  else
  {
    v36 = *(_OWORD *)v35;
    v107.__r_.__value_.__r.__words[2] = *(_QWORD *)(v35 + 16);
    *(_OWORD *)&v107.__r_.__value_.__l.__data_ = v36;
  }
  if (SBYTE7(v87) < 0)
    operator delete(__p[0]);
  memset(v105, 0, sizeof(v105));
  v106 = 1065353216;
  quasar::readTsvFile(0, (uint64_t *)&v103);
  v37 = (uint64_t)v103;
  v38 = v104;
  if (v103 != v104)
  {
    v39 = (void *)*MEMORY[0x1E0DE4F50];
    v40 = *(void **)(MEMORY[0x1E0DE4F50] + 64);
    v41 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
    v42 = MEMORY[0x1E0DE4FB8] + 16;
    while (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v37 + 8) - *(_QWORD *)v37) >> 3) < 4)
    {
LABEL_89:
      v37 += 24;
      if ((std::__shared_weak_count *)v37 == v38)
        goto LABEL_90;
    }
    std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100](__p, *(const std::string **)v37, 24);
    LODWORD(v119) = 0;
    MEMORY[0x1AF44CB18](__p, &v119);
    v43 = *(const std::string **)v37;
    v44 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v37 + 8) - *(_QWORD *)v37) >> 3);
    if (v44 < 4)
      goto LABEL_86;
    if (SHIBYTE(v43[3].__r_.__value_.__r.__words[2]) < 0)
    {
      if (!v43[3].__r_.__value_.__l.__size_)
        goto LABEL_76;
      std::string::__init_copy_ctor_external(&v85, v43[3].__r_.__value_.__l.__data_, v43[3].__r_.__value_.__l.__size_);
    }
    else
    {
      if (!*((_BYTE *)&v43[3].__r_.__value_.__s + 23))
        goto LABEL_76;
      v85 = v43[3];
    }
    if (!std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>(&v110, (unsigned __int8 *)&v85))
    {
      v83 = 0u;
      v84 = 0u;
      v81 = 0u;
      v82 = 0u;
      v79 = 0u;
      v80 = 0u;
      v77 = 0u;
      v78 = 0u;
      v75 = 0u;
      v76 = 0u;
      v73 = 0u;
      v74 = 0u;
      v71 = 0u;
      v72 = 0u;
      v69 = 0u;
      v70 = 0u;
      v68 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v68);
      v59 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v68, (uint64_t)"Unknown start entity \"", 22);
      if ((v85.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v60 = &v85;
      else
        v60 = (std::string *)v85.__r_.__value_.__r.__words[0];
      if ((v85.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v61 = HIBYTE(v85.__r_.__value_.__r.__words[2]);
      else
        v61 = v85.__r_.__value_.__l.__size_;
      v62 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v59, (uint64_t)v60, v61);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v62, (uint64_t)"\"", 1);
      quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&v68);
    }
    v45 = std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>(&v110, (unsigned __int8 *)&v85);
    if (!v45)
      std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
    v46 = *((_DWORD *)v45 + 10);
    *(_QWORD *)&v68 = &v119;
    *((_DWORD *)std::__hash_table<std::__hash_value_type<int,float>,std::__unordered_map_hasher<int,std::__hash_value_type<int,float>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,float>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,float>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int &&>,std::tuple<>>(a1, (int *)&v119, (uint64_t)&std::piecewise_construct, (_DWORD **)&v68)+ 5) = v46;
    if (SHIBYTE(v85.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v85.__r_.__value_.__l.__data_);
    v43 = *(const std::string **)v37;
    v44 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v37 + 8) - *(_QWORD *)v37) >> 3);
LABEL_76:
    if (v44 >= 5)
    {
      if (SHIBYTE(v43[4].__r_.__value_.__r.__words[2]) < 0)
      {
        if (v43[4].__r_.__value_.__l.__size_)
        {
          std::string::__init_copy_ctor_external(&v85, v43[4].__r_.__value_.__l.__data_, v43[4].__r_.__value_.__l.__size_);
          goto LABEL_82;
        }
      }
      else if (*((_BYTE *)&v43[4].__r_.__value_.__s + 23))
      {
        v85 = v43[4];
LABEL_82:
        if (!std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>(&v110, (unsigned __int8 *)&v85))
        {
          v83 = 0u;
          v84 = 0u;
          v81 = 0u;
          v82 = 0u;
          v79 = 0u;
          v80 = 0u;
          v77 = 0u;
          v78 = 0u;
          v75 = 0u;
          v76 = 0u;
          v73 = 0u;
          v74 = 0u;
          v71 = 0u;
          v72 = 0u;
          v69 = 0u;
          v70 = 0u;
          v68 = 0u;
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v68);
          v63 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v68, (uint64_t)"Unknown end entity \"", 20);
          if ((v85.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v64 = &v85;
          else
            v64 = (std::string *)v85.__r_.__value_.__r.__words[0];
          if ((v85.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v65 = HIBYTE(v85.__r_.__value_.__r.__words[2]);
          else
            v65 = v85.__r_.__value_.__l.__size_;
          v66 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v63, (uint64_t)v64, v65);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v66, (uint64_t)"\"", 1);
          quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&v68);
        }
        v47 = std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>(&v110, (unsigned __int8 *)&v85);
        if (!v47)
          std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
        v48 = *((_DWORD *)v47 + 10);
        *(_QWORD *)&v68 = &v119;
        *((_DWORD *)std::__hash_table<std::__hash_value_type<int,float>,std::__unordered_map_hasher<int,std::__hash_value_type<int,float>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,float>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,float>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int &&>,std::tuple<>>(a1 + 40, (int *)&v119, (uint64_t)&std::piecewise_construct, (_DWORD **)&v68)+ 5) = v48;
        *(_QWORD *)&v68 = &v119;
        v49 = std::__tree<std::__value_type<int,std::vector<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,std::__map_value_compare<int,std::__value_type<int,std::vector<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)(a1 + 80), (int *)&v119, (uint64_t)&std::piecewise_construct, (_DWORD **)&v68);
        v50 = (__int128 *)std::map<std::string,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::at((uint64_t)&v108, (const void **)&v85.__r_.__value_.__l.__data_);
        std::vector<std::shared_ptr<quasar::FeatureExtractor>>::push_back[abi:ne180100]((char **)v49 + 5, v50);
        if (SHIBYTE(v85.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v85.__r_.__value_.__l.__data_);
      }
    }
LABEL_86:
    __p[0] = v39;
    *(void **)((char *)__p + *((_QWORD *)v39 - 3)) = v40;
    *(_QWORD *)&v87 = v41;
    *((_QWORD *)&v87 + 1) = v42;
    if (SHIBYTE(v92) < 0)
      operator delete(*((void **)&v91 + 1));
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x1AF44D094](&v94);
    goto LABEL_89;
  }
LABEL_90:
  __p[0] = &v103;
  std::vector<std::vector<std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>>>::~__hash_table((uint64_t)v105);
  if (SHIBYTE(v107.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v107.__r_.__value_.__l.__data_);
  if (quasar::gLogLevel > 3)
  {
    v101 = 0u;
    v102 = 0u;
    v99 = 0u;
    v100 = 0u;
    v97 = 0u;
    v98 = 0u;
    v95 = 0u;
    v96 = 0u;
    v93 = 0u;
    v94 = 0u;
    v91 = 0u;
    v92 = 0u;
    v89 = 0u;
    v90 = 0u;
    v87 = 0u;
    v88 = 0u;
    *(_OWORD *)__p = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Initialized EntityTransformer.", 30);
    quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)__p);
  }
  std::__tree<std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>>>::destroy((uint64_t)&v108, v109[0]);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v110);
  if (SHIBYTE(v113.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v113.__r_.__value_.__l.__data_);
  if (SHIBYTE(v114.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v114.__r_.__value_.__l.__data_);
  quasar::PTree::~PTree((quasar::PTree *)&v115);
}

void sub_1AD8BED74(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v3;
  void **v4;
  _QWORD *v5[3];
  uint64_t v6;

  if (SLOBYTE(STACK[0x297]) < 0)
    operator delete((void *)STACK[0x280]);
  v4 = (void **)&v3;
  std::vector<std::vector<std::string>>::__destroy_vector::operator()[abi:ne180100](&v4);
  std::__tree<std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>>>::destroy((uint64_t)v5, v5[1]);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v6);
  if (*(char *)(v1 - 201) < 0)
    operator delete(*(void **)(v1 - 224));
  if (*(char *)(v1 - 169) < 0)
    operator delete(*(void **)(v1 - 192));
  quasar::PTree::~PTree((quasar::PTree *)(v1 - 168));
  _Unwind_Resume(a1);
}

void quasar::VocabId::getPaddingWord(quasar::VocabId *this@<X0>, std::string *a2@<X8>)
{
  if (*(_QWORD *)this)
  {
    std::string::basic_string[abi:ne180100]<0>(a2, "<PAD>");
  }
  else if (*((char *)this + 111) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *((const std::string::value_type **)this + 11), *((_QWORD *)this + 12));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 88);
    a2->__r_.__value_.__r.__words[2] = *((_QWORD *)this + 13);
  }
}

void quasar::VocabId::getOovWord(quasar::VocabId *this@<X0>, std::string *a2@<X8>)
{
  if (*(_QWORD *)this)
  {
    kaldi::quasar::Vocab::OOvWord(*(kaldi::quasar::Vocab **)this, a2);
  }
  else if (*((char *)this + 135) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *((const std::string::value_type **)this + 14), *((_QWORD *)this + 15));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *((_OWORD *)this + 7);
    a2->__r_.__value_.__r.__words[2] = *((_QWORD *)this + 16);
  }
}

__int128 *quasar::InverseTextNormalizer::getCompoundWord(uint64_t a1, uint64_t a2, __int128 **a3, uint64_t a4)
{
  uint64_t v6;
  __int128 *v7;
  __int128 *v8;
  __int128 v9;
  unsigned __int8 *v10;
  std::string::size_type size;
  char v12;
  std::string __p;
  std::string v15;

  v6 = **(_QWORD **)(a1 + 584);
  if (*(char *)(a4 + 23) < 0)
  {
    **(_BYTE **)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
  }
  else
  {
    *(_BYTE *)a4 = 0;
    *(_BYTE *)(a4 + 23) = 0;
  }
  v7 = *a3;
  if (*a3 != *(__int128 **)(a2 + 8))
  {
    v8 = *a3;
    do
    {
      if (*((char *)v8 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v15, *(const std::string::value_type **)v8, *((_QWORD *)v8 + 1));
      }
      else
      {
        v9 = *v8;
        v15.__r_.__value_.__r.__words[2] = *((_QWORD *)v8 + 2);
        *(_OWORD *)&v15.__r_.__value_.__l.__data_ = v9;
      }
      v10 = std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>((_QWORD *)v6, (unsigned __int8 *)&v15);
      if (v10)
        v6 = *((_QWORD *)v10 + 5);
      else
        v6 = 0;
      if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v15.__r_.__value_.__l.__data_);
      if (!v6)
        break;
      if (*(char *)(v6 + 63) < 0)
        std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(v6 + 40), *(_QWORD *)(v6 + 48));
      else
        __p = *(std::string *)(v6 + 40);
      size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      v12 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        size = __p.__r_.__value_.__l.__size_;
      if (size)
      {
        std::string::operator=((std::string *)a4, &__p);
        v7 = v8 + 14;
        v12 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      }
      if (v12 < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      v8 += 14;
    }
    while (v8 != *(__int128 **)(a2 + 8));
  }
  return v7;
}

void sub_1AD8BF008(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t kaldi::quasar::PrefixTree<std::string,std::string>::AddSequence(_QWORD **a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t *v5;
  int LongestPrefix;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  std::string __p;
  unsigned __int8 *v17;

  v5 = a3;
  LongestPrefix = kaldi::quasar::PrefixTree<std::string,std::string>::GetLongestPrefix(a1, a2, a3);
  *a4 = *v5;
  v8 = LongestPrefix;
  if (0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 3) > LongestPrefix)
  {
    v9 = 24 * LongestPrefix;
    v10 = LongestPrefix;
    do
    {
      v11 = *v5;
      v12 = operator new();
      v13 = *a2 + v9;
      if (*(char *)(v13 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)v13, *(_QWORD *)(v13 + 8));
      }
      else
      {
        v14 = *(_OWORD *)v13;
        __p.__r_.__value_.__r.__words[2] = *(_QWORD *)(v13 + 16);
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v14;
      }
      kaldi::quasar::PrefixTree<std::string,std::string>::Node::Node(v12, v11, (__int128 *)&__p);
      *a4 = v12;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(__p.__r_.__value_.__l.__data_);
        v12 = *a4;
      }
      v17 = (unsigned __int8 *)(*a2 + v9);
      *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,std::__list_iterator<std::pair<std::string,std::vector<std::string>>,void *>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::__list_iterator<std::pair<std::string,std::vector<std::string>>,void *>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::__list_iterator<std::pair<std::string,std::vector<std::string>>,void *>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::__list_iterator<std::pair<std::string,std::vector<std::string>>,void *>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v11, v17, (uint64_t)&std::piecewise_construct, (__int128 **)&v17)+ 5) = v12;
      ++v10;
      v9 += 24;
      v5 = a4;
    }
    while (0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 3) > v10);
  }
  return v8;
}

void sub_1AD8BF18C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  uint64_t v14;

  MEMORY[0x1AF44D190](v14, 0x10B2C4049158C6CLL);
  _Unwind_Resume(a1);
}

void quasar::InverseTextNormalizer::registerParams(quasar::InverseTextNormalizer *this, quasar::SystemConfig *a2)
{
  void *__p[2];
  char v5;
  void *v6[2];
  char v7;

  std::string::basic_string[abi:ne180100]<0>(v6, "cluster-id-file");
  std::string::basic_string[abi:ne180100]<0>(__p, "File containing cluster Ids.");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)v6, (uint64_t)this + 24, (uint64_t)__p, 1, 33, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
  std::string::basic_string[abi:ne180100]<0>(v6, "compound-word-file");
  std::string::basic_string[abi:ne180100]<0>(__p, "File containing cluster Ids.");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)v6, (uint64_t)this + 96, (uint64_t)__p, 1, 33, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
  std::string::basic_string[abi:ne180100]<0>(v6, "max-num-feats");
  std::string::basic_string[abi:ne180100]<0>(__p, "Maximum number of feats");
  quasar::SystemConfig::Register<int>((uint64_t)a2, (const void **)v6, (uint64_t)this + 8, (uint64_t)__p, 1, 33, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
  std::string::basic_string[abi:ne180100]<0>(v6, "no-title-casing-file");
  std::string::basic_string[abi:ne180100]<0>(__p, "File with list of words that should not be title-cased");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)v6, (uint64_t)this + 144, (uint64_t)__p, 1, 34, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
  std::string::basic_string[abi:ne180100]<0>(v6, "source-vocab-file");
  std::string::basic_string[abi:ne180100]<0>(__p, "Source vocabulary file");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)v6, (uint64_t)this + 168, (uint64_t)__p, 0, 33, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
  std::string::basic_string[abi:ne180100]<0>(v6, "token-boundary-id");
  std::string::basic_string[abi:ne180100]<0>(__p, "Token boundary symbol ID");
  quasar::SystemConfig::Register<int>((uint64_t)a2, (const void **)v6, (uint64_t)this + 12, (uint64_t)__p, 1, 33, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
  std::string::basic_string[abi:ne180100]<0>(v6, "word-sense-file");
  std::string::basic_string[abi:ne180100]<0>(__p, "File containing list of word senses.");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)v6, (uint64_t)this + 264, (uint64_t)__p, 1, 33, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
  std::string::basic_string[abi:ne180100]<0>(v6, "align-right-preitn-tokens-file");
  std::string::basic_string[abi:ne180100]<0>(__p, "File storing list of pre-ITN tokens that should map to next post-ITN token.");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)v6, (uint64_t)this + 288, (uint64_t)__p, 0, 52, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
  std::string::basic_string[abi:ne180100]<0>(v6, "regex-feat-file");
  std::string::basic_string[abi:ne180100]<0>(__p, "TSV file storing regex-to-feature map.");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)v6, (uint64_t)this + 48, (uint64_t)__p, 0, 53, 0, 67, 0);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
  std::string::basic_string[abi:ne180100]<0>(v6, "double-regex-feat-file");
  std::string::basic_string[abi:ne180100]<0>(__p, "TSV file storing regex-to-feature map.");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)v6, (uint64_t)this + 72, (uint64_t)__p, 0, 68, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
  std::string::basic_string[abi:ne180100]<0>(v6, "guard-markers-file");
  std::string::basic_string[abi:ne180100]<0>(__p, "TSV file storing guard markers that prevent ITN.");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)v6, (uint64_t)this + 312, (uint64_t)__p, 0, 57, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
  std::string::basic_string[abi:ne180100]<0>(v6, "supplement-config-file");
  std::string::basic_string[abi:ne180100]<0>(__p, "supplemental json file which may contain punctuation and other frequently updated parameters such as max-num-feats");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)v6, (uint64_t)this + 336, (uint64_t)__p, 0, 87, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
  std::string::basic_string[abi:ne180100]<0>(v6, "chunk-length");
  std::string::basic_string[abi:ne180100]<0>(__p, "Number of tokens in each chunk");
  quasar::SystemConfig::Register<int>((uint64_t)a2, (const void **)v6, (uint64_t)this + 16, (uint64_t)__p, 0, 136, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
  std::string::basic_string[abi:ne180100]<0>(v6, "chunk-overlap");
  std::string::basic_string[abi:ne180100]<0>(__p, "the number of overlap tokens between two chunks");
  quasar::SystemConfig::Register<int>((uint64_t)a2, (const void **)v6, (uint64_t)this + 20, (uint64_t)__p, 0, 136, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
  std::string::basic_string[abi:ne180100]<0>(v6, "vocab-marisa-trie-file");
  std::string::basic_string[abi:ne180100]<0>(__p, "The vocaburary symbol table file");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)v6, (uint64_t)this + 192, (uint64_t)__p, 0, 136, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
  std::string::basic_string[abi:ne180100]<0>(v6, "marisa-relabel-file");
  std::string::basic_string[abi:ne180100]<0>(__p, "The relabel mapping of Marisa Trie. The relabel mapping is needed if the model doesn't adopt the new label created by Marisa Trie");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)v6, (uint64_t)this + 216, (uint64_t)__p, 0, 136, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
  std::string::basic_string[abi:ne180100]<0>(v6, "marisa-token-file");
  std::string::basic_string[abi:ne180100]<0>(__p, "The vocab file specifies the special tokens");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)v6, (uint64_t)this + 240, (uint64_t)__p, 0, 136, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
}

void sub_1AD8BF918(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a16 < 0)
    operator delete(__p);
  if (a22 < 0)
    operator delete(a17);
  _Unwind_Resume(exception_object);
}

uint64_t std::map<std::string,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::at(uint64_t a1, const void **a2)
{
  uint64_t v2;
  uint64_t v4;

  v2 = *std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__find_equal<std::string>(a1, &v4, a2);
  if (!v2)
    std::__throw_out_of_range[abi:ne180100]("map::at:  key not found");
  return v2 + 56;
}

uint64_t quasar::LabelTransformer::str2LinearFst(uint64_t *a1, uint64_t a2, int a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  int v10;
  uint64_t v11;
  _DWORD v13[4];

  v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 200))(a2);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 176))(a2, v6);
  if (a3 < 1)
  {
    v11 = v6;
  }
  else
  {
    v7 = 0;
    v8 = a3;
    do
    {
      if (*((char *)a1 + 23) >= 0)
        v9 = a1;
      else
        v9 = (uint64_t *)*a1;
      v10 = *((unsigned __int8 *)v9 + v7);
      v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 200))(a2);
      v13[0] = v10;
      v13[1] = v10;
      v13[2] = 1065353216;
      v13[3] = v11;
      (*(void (**)(uint64_t, uint64_t, _DWORD *))(*(_QWORD *)a2 + 208))(a2, v6, v13);
      ++v7;
      v6 = v11;
    }
    while (v8 != v7);
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, float))(*(_QWORD *)a2 + 184))(a2, v11, 0.0);
}

uint64_t quasar::LabelTransformer::addAcceptorArcs(unsigned __int8 *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  unsigned __int8 *v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  _DWORD v10[4];

  v4 = a2;
  v5 = a1;
  if ((char)a1[23] < 0)
  {
    v6 = *((_QWORD *)a1 + 1);
    if (!v6)
      return a2;
    v5 = *(unsigned __int8 **)a1;
  }
  else
  {
    v6 = a1[23];
    if (!a1[23])
      return a2;
  }
  do
  {
    v7 = *v5++;
    v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 200))(a3);
    v10[0] = v7;
    v10[1] = v7;
    v10[2] = 1065353216;
    v10[3] = v8;
    (*(void (**)(uint64_t, uint64_t, _DWORD *))(*(_QWORD *)a3 + 208))(a3, v4, v10);
    v4 = v8;
    --v6;
  }
  while (v6);
  return v8;
}

uint64_t quasar::InverseTextNormalizer::getNumTokens(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  _DWORD *v9;
  uint64_t v10;
  int v11;

  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2);
  LODWORD(v7) = (*(float (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, v4);
  v11 = 2139095040;
  v5 = 0;
  if (*(float *)&v7 == INFINITY)
  {
    while (1)
    {
      v10 = 0;
      (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(_QWORD *)a2 + 136))(a2, v4, &v7);
      if (!v7)
        break;
      if (*(_DWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 32))(v7) == *(_DWORD *)(a1 + 12))
        v5 = (v5 + 1);
      else
        v5 = v5;
      if (!v7)
        goto LABEL_12;
      v4 = *(unsigned int *)((*(uint64_t (**)(void))(*(_QWORD *)v7 + 32))() + 12);
      if (!v7)
        goto LABEL_13;
      (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
LABEL_15:
      LODWORD(v7) = (*(float (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, v4);
      v11 = 2139095040;
      if (*(float *)&v7 != INFINITY)
        return v5;
    }
    if (*(_DWORD *)(v8 + 16 * v10) == *(_DWORD *)(a1 + 12))
      v5 = (v5 + 1);
    else
      v5 = v5;
LABEL_12:
    v4 = *(unsigned int *)(v8 + 16 * v10 + 12);
LABEL_13:
    if (v9)
      --*v9;
    goto LABEL_15;
  }
  return v5;
}

void sub_1AD8BFD38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _DWORD **v9;

  if (a9)
    (*(void (**)(uint64_t))(*(_QWORD *)a9 + 8))(a9);
  else
    quasar::InverseTextNormalizer::getNumTokens(v9);
  _Unwind_Resume(a1);
}

uint64_t quasar::LabelTransformer::concatLinearFsts(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4)
{
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  _DWORD *v15;
  uint64_t v16;
  _DWORD v17[4];

  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 160))(a2);
  if ((_DWORD)result)
  {
    (*(void (**)(uint64_t, _QWORD, float))(*(_QWORD *)a3 + 184))(a3, *a4, INFINITY);
    v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2);
    LODWORD(v13) = (*(float (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, v8);
    v17[0] = 2139095040;
    if (*(float *)&v13 == INFINITY)
    {
      while (1)
      {
        v16 = 0;
        (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(_QWORD *)a2 + 136))(a2, v8, &v13);
        v9 = v13 ? (*(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 32))(v13) : v14 + 16 * v16;
        v10 = *(_DWORD *)(v9 + 4);
        if (v10)
        {
          v11 = *a4;
          v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 200))(a3);
          v17[0] = v10;
          v17[1] = v10;
          v17[2] = 1065353216;
          v17[3] = v12;
          (*(void (**)(uint64_t, uint64_t, _DWORD *))(*(_QWORD *)a3 + 208))(a3, v11, v17);
          *a4 = v12;
        }
        if (!v13)
          break;
        v8 = *(unsigned int *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 32))(v13) + 12);
        if (!v13)
          goto LABEL_12;
        (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
LABEL_14:
        LODWORD(v13) = (*(float (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, v8);
        v17[0] = 2139095040;
        if (*(float *)&v13 != INFINITY)
          return (*(uint64_t (**)(uint64_t, _QWORD, float))(*(_QWORD *)a3 + 184))(a3, *a4, 0.0);
      }
      v8 = *(unsigned int *)(v14 + 16 * v16 + 12);
LABEL_12:
      if (v15)
        --*v15;
      goto LABEL_14;
    }
    return (*(uint64_t (**)(uint64_t, _QWORD, float))(*(_QWORD *)a3 + 184))(a3, *a4, 0.0);
  }
  return result;
}

void sub_1AD8BFF5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  _DWORD **v10;

  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  else
    quasar::InverseTextNormalizer::getNumTokens(v10);
  _Unwind_Resume(a1);
}

uint64_t quasar::LabelTransformer::applyLabel(uint64_t result, uint64_t *a2, int a3, _QWORD *a4)
{
  unint64_t v6;
  uint64_t v7;
  _DWORD *v8;
  quasar::QsrText *v9;
  _QWORD *v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  int MetadataStartIndex;
  _DWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  _DWORD *v23;
  int v24;
  _QWORD *v25;
  int v26;
  int v27;
  std::string __p;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  void *v46;
  _DWORD *v47;
  int v48[3];

  v48[0] = a3;
  if (a2[1] != *a2)
  {
    v6 = 0;
    v7 = result + 8;
    v8 = (_DWORD *)(result + 48);
    do
    {
      v9 = (quasar::QsrText *)fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::VectorFst(&v46);
      if (quasar::gLogLevel >= 6)
      {
        v44 = 0u;
        v45 = 0u;
        v42 = 0u;
        v43 = 0u;
        v40 = 0u;
        v41 = 0u;
        v38 = 0u;
        v39 = 0u;
        v36 = 0u;
        v37 = 0u;
        v34 = 0u;
        v35 = 0u;
        v32 = 0u;
        v33 = 0u;
        v30 = 0u;
        v31 = 0u;
        v29 = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v29);
        v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v29, (uint64_t)"inputToken=", 11);
        v11 = *a2 + 24 * v6;
        v12 = *(char *)(v11 + 23);
        if (v12 >= 0)
          v13 = *a2 + 24 * v6;
        else
          v13 = *(_QWORD *)v11;
        if (v12 >= 0)
          v14 = *(unsigned __int8 *)(v11 + 23);
        else
          v14 = *(_QWORD *)(v11 + 8);
        v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, v13, v14);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)" label=", 7);
        std::ostream::operator<<();
        quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)&v29);
      }
      v16 = *a2;
      v17 = quasar::QsrText::SingletonInstance(v9);
      MetadataStartIndex = quasar::QsrText::getMetadataStartIndex(v17, (uint64_t *)(v16 + 24 * v6));
      quasar::LabelTransformer::str2LinearFst((uint64_t *)(v16 + 24 * v6), (uint64_t)&v46, MetadataStartIndex);
      v19 = v47;
      ++v47[14];
      *(_QWORD *)&v29 = v48;
      v20 = std::__hash_table<std::__hash_value_type<int,std::vector<std::shared_ptr<quasar::FstTokenTransform>>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::vector<std::shared_ptr<quasar::FstTokenTransform>>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::vector<std::shared_ptr<quasar::FstTokenTransform>>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::vector<std::shared_ptr<quasar::FstTokenTransform>>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(v7, v48, (uint64_t)&std::piecewise_construct, (_DWORD **)&v29);
      v21 = (_QWORD *)v20[3];
      v22 = (_QWORD *)v20[4];
      while (v21 != v22)
      {
        (*(void (**)(_QWORD, void **))(*(_QWORD *)*v21 + 32))(*v21, &v46);
        v21 += 2;
      }
      v23 = v47;
      if (((*((_QWORD *)v23 + 9) - *((_QWORD *)v23 + 8)) & 0x7FFFFFFF8) == 0)
      {
        ++v19[14];
        v24 = v23[14] - 1;
        v23[14] = v24;
        if (!v24)
          (*(void (**)(_DWORD *))(*(_QWORD *)v23 + 8))(v23);
        v47 = v19;
      }
      memset(&__p, 0, sizeof(__p));
      quasar::SystemConfig::Version::Version(&v29, 39, 0);
      if (quasar::SystemConfig::Version::operator<(v8, &v29))
        quasar::LabelTransformer::linearFst2Str((uint64_t)&v46, 1, &v29);
      else
        quasar::LabelTransformer::linearFst2Str((uint64_t)&v46, 0, &v29);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v29;
      __p.__r_.__value_.__r.__words[2] = v30;
      std::string::operator=((std::string *)(*a4 + 224 * v6), &__p);
      if (quasar::gLogLevel >= 6)
      {
        v44 = 0u;
        v45 = 0u;
        v42 = 0u;
        v43 = 0u;
        v40 = 0u;
        v41 = 0u;
        v38 = 0u;
        v39 = 0u;
        v36 = 0u;
        v37 = 0u;
        v34 = 0u;
        v35 = 0u;
        v32 = 0u;
        v33 = 0u;
        v30 = 0u;
        v31 = 0u;
        v29 = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v29);
        v25 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v29, (uint64_t)"outputToken=", 12);
        quasar::operator<<(v25, *a4 + 224 * v6);
        quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)&v29);
      }
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(__p.__r_.__value_.__l.__data_);
        if (v19)
        {
LABEL_29:
          v26 = v19[14] - 1;
          v19[14] = v26;
          if (!v26)
            (*(void (**)(_DWORD *))(*(_QWORD *)v19 + 8))(v19);
        }
      }
      else if (v19)
      {
        goto LABEL_29;
      }
      v46 = &unk_1E5D256C0;
      result = (uint64_t)v47;
      if (v47)
      {
        v27 = v47[14] - 1;
        v47[14] = v27;
        if (!v27)
          result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
      }
      ++v6;
    }
    while (0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 3) > v6);
  }
  return result;
}

void sub_1AD8C02D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16)
{
  _DWORD *v16;
  uint64_t v17;
  int v19;
  _DWORD *v20;
  int v21;

  if (a14 < 0)
    operator delete(__p);
  if (v16)
  {
    v19 = v16[14] - 1;
    v16[14] = v19;
    if (!v19)
      (*(void (**)(_DWORD *))(*(_QWORD *)v16 + 8))(v16);
  }
  *(_QWORD *)(v17 - 112) = &unk_1E5D256C0;
  v20 = *(_DWORD **)(v17 - 104);
  if (v20)
  {
    v21 = v20[14] - 1;
    v20[14] = v21;
    if (!v21)
      (*(void (**)(_DWORD *))(*(_QWORD *)v20 + 8))(v20);
  }
  _Unwind_Resume(exception_object);
}

uint64_t quasar::LabelTransformer::linearFst2Str@<X0>(uint64_t a1@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  uint64_t v14;
  _QWORD v15[11];
  char v16;
  uint64_t v17;
  int v18;

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 160))(a1))
  {
    v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
    while (1)
    {
      LODWORD(v11) = (*(float (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 32))(a1, v6);
      v18 = 2139095040;
      if (*(float *)&v11 != INFINITY)
      {
        std::stringbuf::str();
        goto LABEL_23;
      }
      v14 = 0;
      (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(_QWORD *)a1 + 136))(a1, v6, &v11);
      if (v11)
        v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 32))(v11);
      else
        v7 = v12 + 16 * v14;
      v8 = *(_DWORD *)(v7 + 4);
      if (v8)
      {
        if (v8 != 95 || a2 == 0)
          LOBYTE(v18) = *(_DWORD *)(v7 + 4);
        else
          LOBYTE(v18) = 32;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)&v18, 1);
      }
      if (!v11)
        break;
      v6 = *(unsigned int *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 32))(v11) + 12);
      if (v11)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
      }
      else
      {
LABEL_19:
        if (v13)
          --*v13;
      }
    }
    v6 = *(unsigned int *)(v12 + 16 * v14 + 12);
    goto LABEL_19;
  }
  std::string::basic_string[abi:ne180100]<0>(a3, "");
LABEL_23:
  v15[0] = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)v15 + *(_QWORD *)(v15[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  v15[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v16 < 0)
    operator delete((void *)v15[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1AF44D094](&v17);
}

void sub_1AD8C05A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  std::ostringstream::~ostringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

_DWORD *quasar::EntityTransformer::applyEntityLabel(uint64_t a1, _QWORD *a2, int a3)
{
  _DWORD *v4;
  uint64_t **v5;
  uint64_t *v6;
  uint64_t *i;
  uint64_t v8;
  _DWORD *result;
  int v10;
  int v11;
  int v12;
  int *v13;

  v12 = a3;
  v4 = (_DWORD *)a2[1];
  ++v4[14];
  v13 = &v12;
  v5 = std::__tree<std::__value_type<int,std::vector<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,std::__map_value_compare<int,std::__value_type<int,std::vector<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)(a1 + 80), &v12, (uint64_t)&std::piecewise_construct, &v13);
  v6 = v5[5];
  for (i = v5[6]; v6 != i; v6 += 2)
  {
    v8 = *v6;
    LOBYTE(v13) = 1;
    HIDWORD(v13) = 0;
    fst::Compose<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>((uint64_t)a2, v8, (uint64_t)a2, (uint64_t)&v13);
  }
  result = (_DWORD *)(*(uint64_t (**)(_QWORD *))(*a2 + 160))(a2);
  if ((_DWORD)result)
  {
    if (!v4)
      return result;
  }
  else
  {
    ++v4[14];
    result = (_DWORD *)a2[1];
    if (result)
    {
      v10 = result[14] - 1;
      result[14] = v10;
      if (!v10)
        result = (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 8))(result);
    }
    a2[1] = v4;
  }
  v11 = v4[14] - 1;
  v4[14] = v11;
  if (!v11)
    return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)v4 + 8))(v4);
  return result;
}

void sub_1AD8C070C(_Unwind_Exception *exception_object)
{
  _DWORD *v1;
  int v3;

  if (v1)
  {
    v3 = v1[14] - 1;
    v1[14] = v3;
    if (!v3)
      (*(void (**)(_DWORD *))(*(_QWORD *)v1 + 8))(v1);
  }
  _Unwind_Resume(exception_object);
}

void fst::Compose<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  int v7;
  void *v8;
  uint64_t Base;
  char v10[8];
  __int128 v11;
  __int128 v12;
  __int128 v13;
  char v14;

  switch(*(_DWORD *)(a4 + 4))
  {
    case 0:
      v10[0] = FLAGS_fst_default_cache_gc;
      *(_QWORD *)&v11 = 0;
      v8 = &unk_1E5D19270;
      Base = fst::ComposeFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::CreateBase(a1, a2, (uint64_t)v10);
      (*(void (**)(uint64_t, void **))(*(_QWORD *)a3 + 168))(a3, &v8);
      goto LABEL_7;
    case 1:
      v10[0] = FLAGS_fst_default_cache_gc;
      v11 = 0u;
      v12 = 0u;
      v13 = 0u;
      v14 = 0;
      v8 = &unk_1E5D19270;
      Base = fst::ComposeFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::CreateBase2<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::NullComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>(a1, a2, (uint64_t)v10);
      (*(void (**)(uint64_t, void **))(*(_QWORD *)a3 + 168))(a3, &v8);
      goto LABEL_7;
    case 2:
      v10[0] = FLAGS_fst_default_cache_gc;
      v11 = 0u;
      v12 = 0u;
      v13 = 0u;
      v14 = 0;
      v8 = &unk_1E5D19270;
      Base = fst::ComposeFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::CreateBase2<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>(a1, a2, (uint64_t)v10);
      (*(void (**)(uint64_t, void **))(*(_QWORD *)a3 + 168))(a3, &v8);
      goto LABEL_7;
    case 3:
      v10[0] = FLAGS_fst_default_cache_gc;
      v11 = 0u;
      v12 = 0u;
      v13 = 0u;
      v14 = 0;
      v8 = &unk_1E5D19270;
      Base = fst::ComposeFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::CreateBase2<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::AltSequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>(a1, a2, (uint64_t)v10);
      (*(void (**)(uint64_t, void **))(*(_QWORD *)a3 + 168))(a3, &v8);
      goto LABEL_7;
    case 4:
      v10[0] = FLAGS_fst_default_cache_gc;
      v11 = 0u;
      v12 = 0u;
      v13 = 0u;
      v14 = 0;
      v8 = &unk_1E5D19270;
      Base = fst::ComposeFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::CreateBase2<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::MatchComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>(a1, a2, (uint64_t)v10);
      (*(void (**)(uint64_t, void **))(*(_QWORD *)a3 + 168))(a3, &v8);
LABEL_7:
      v8 = &unk_1E5D268B8;
      v6 = Base;
      if (Base)
      {
        v7 = *(_DWORD *)(Base + 56) - 1;
        *(_DWORD *)(Base + 56) = v7;
        if (!v7)
          (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
      }
      break;
    default:
      break;
  }
  if (*(_BYTE *)a4)
    fst::Connect<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>(a3);
}

void sub_1AD8C0968(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    fst::Compose<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>();
  _Unwind_Resume(exception_object);
}

uint64_t quasar::LabelTransformer::applyLabel(uint64_t result, uint64_t a2, int a3, uint64_t a4, unsigned int *a5, char a6)
{
  uint64_t v6;
  uint64_t v11;
  quasar::QsrText *v12;
  uint64_t v13;
  int MetadataStartIndex;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  _DWORD *v18;
  _DWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  __int128 v22;
  std::string *p_p;
  std::string::size_type size;
  _QWORD *v25;
  _QWORD *v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  int v31;
  uint64_t v32;
  int v33;
  std::string __p;
  _OWORD v35[17];
  void *v36;
  _DWORD *v37;
  int v38[3];

  v38[0] = a3;
  v6 = *(unsigned __int8 *)(a2 + 23);
  if ((v6 & 0x80u) != 0)
    v6 = *(_QWORD *)(a2 + 8);
  if (v6)
  {
    v11 = result;
    v12 = (quasar::QsrText *)fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::VectorFst(&v36);
    v13 = quasar::QsrText::SingletonInstance(v12);
    MetadataStartIndex = quasar::QsrText::getMetadataStartIndex(v13, (uint64_t *)a2);
    quasar::LabelTransformer::str2LinearFst((uint64_t *)a2, (uint64_t)&v36, MetadataStartIndex);
    if ((a6 & 1) == 0)
    {
      *(_QWORD *)&v35[0] = v38;
      v15 = std::__hash_table<std::__hash_value_type<int,std::vector<std::shared_ptr<quasar::FstTokenTransform>>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::vector<std::shared_ptr<quasar::FstTokenTransform>>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::vector<std::shared_ptr<quasar::FstTokenTransform>>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::vector<std::shared_ptr<quasar::FstTokenTransform>>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(v11 + 8, v38, (uint64_t)&std::piecewise_construct, (_DWORD **)v35);
      v16 = (_QWORD *)v15[3];
      v17 = (_QWORD *)v15[4];
      if (v16 != v17)
      {
        while (1)
        {
          v18 = v37;
          ++v37[14];
          (*(void (**)(_QWORD, void **))(*(_QWORD *)*v16 + 32))(*v16, &v36);
          v19 = v37;
          if (((*((_QWORD *)v19 + 9) - *((_QWORD *)v19 + 8)) & 0x7FFFFFFF8) == 0)
            break;
LABEL_30:
          v31 = v18[14] - 1;
          v18[14] = v31;
          if (!v31)
            (*(void (**)(_DWORD *))(*(_QWORD *)v18 + 8))(v18);
          v16 += 2;
          if (v16 == v17)
            goto LABEL_33;
        }
        if (quasar::gLogLevel <= 3)
        {
          ++v18[14];
        }
        else
        {
          memset(v35, 0, sizeof(v35));
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v35);
          v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)"Sublabel application ", 21);
          v21 = *v16;
          if (*(char *)(*v16 + 31) < 0)
          {
            std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(v21 + 8), *(_QWORD *)(v21 + 16));
          }
          else
          {
            v22 = *(_OWORD *)(v21 + 8);
            __p.__r_.__value_.__r.__words[2] = *(_QWORD *)(v21 + 24);
            *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v22;
          }
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            p_p = &__p;
          else
            p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
          else
            size = __p.__r_.__value_.__l.__size_;
          v25 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)p_p, size);
          v26 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)" failed for token ", 18);
          v27 = *(char *)(a2 + 23);
          if (v27 >= 0)
            v28 = a2;
          else
            v28 = *(_QWORD *)a2;
          if (v27 >= 0)
            v29 = *(unsigned __int8 *)(a2 + 23);
          else
            v29 = *(_QWORD *)(a2 + 8);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, v28, v29);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
          quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)v35);
          v19 = v37;
          ++v18[14];
          if (!v19)
            goto LABEL_29;
        }
        v30 = v19[14] - 1;
        v19[14] = v30;
        if (!v30)
          (*(void (**)(_DWORD *))(*(_QWORD *)v19 + 8))(v19);
LABEL_29:
        v37 = v18;
        goto LABEL_30;
      }
    }
LABEL_33:
    v32 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a4 + 160))(a4);
    if (!(_DWORD)v32)
    {
      *a5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a4 + 200))(a4);
      (*(void (**)(uint64_t))(*(_QWORD *)a4 + 176))(a4);
      v32 = (*(uint64_t (**)(uint64_t, _QWORD, float))(*(_QWORD *)a4 + 184))(a4, *a5, 0.0);
    }
    quasar::LabelTransformer::concatLinearFsts(v32, (uint64_t)&v36, a4, a5);
    v36 = &unk_1E5D256C0;
    result = (uint64_t)v37;
    if (v37)
    {
      v33 = v37[14] - 1;
      v37[14] = v33;
      if (!v33)
        return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
    }
  }
  return result;
}

void sub_1AD8C0D1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16)
{
  uint64_t v16;
  _DWORD *v18;
  int v19;

  *(_QWORD *)(v16 - 112) = &unk_1E5D256C0;
  v18 = *(_DWORD **)(v16 - 104);
  if (v18)
  {
    v19 = v18[14] - 1;
    v18[14] = v19;
    if (!v19)
      (*(void (**)(_DWORD *))(*(_QWORD *)v18 + 8))(v18);
  }
  _Unwind_Resume(exception_object);
}

unsigned __int8 *quasar::InverseTextNormalizer::setGuardedTokenLabels(unsigned __int8 *result, uint64_t *a2, uint64_t a3)
{
  uint64_t v3;
  unsigned __int8 *v6;
  uint64_t v7;
  uint64_t i;
  _QWORD *v9;
  unsigned __int8 *v10;
  unsigned __int8 **v11;
  uint64_t v12;
  unsigned __int8 *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  unsigned __int8 *v18;

  v3 = *a2;
  if (a2[1] != *a2)
  {
    v6 = result;
    v7 = 0;
    LODWORD(i) = 0;
    v9 = result + 544;
    do
    {
      result = std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>(v9, (unsigned __int8 *)(v3 + 224 * v7));
      v3 = *a2;
      if (result)
      {
        v10 = result;
        v11 = (unsigned __int8 **)(result + 40);
        v12 = *(_QWORD *)(a3 + 8) + 4;
        for (i = (int)i; ; ++i)
        {
          v13 = (unsigned __int8 *)(v3 + 224 * i);
          v14 = v13[23];
          if ((v14 & 0x80u) == 0)
            v15 = v13[23];
          else
            v15 = *((_QWORD *)v13 + 1);
          v16 = v10[63];
          v17 = (char)v16;
          if ((v16 & 0x80u) != 0)
            v16 = *((_QWORD *)v10 + 6);
          if (v15 == v16)
          {
            if (v17 >= 0)
              v18 = (unsigned __int8 *)v11;
            else
              v18 = *v11;
            if ((v14 & 0x80) != 0)
            {
              result = (unsigned __int8 *)memcmp(*(const void **)v13, v18, *((_QWORD *)v13 + 1));
              if (!(_DWORD)result)
                goto LABEL_23;
            }
            else
            {
              if (!v13[23])
                goto LABEL_23;
              while (*v13 == *v18)
              {
                ++v13;
                ++v18;
                if (!--v14)
                  goto LABEL_23;
              }
            }
          }
          *(_DWORD *)(v12 + 4 * i) = **((_DWORD **)v6 + 82);
        }
      }
      LODWORD(i) = i + 1;
LABEL_23:
      v7 = (int)i;
    }
    while (0x6DB6DB6DB6DB6DB7 * ((a2[1] - v3) >> 5) > (unint64_t)(int)i);
  }
  return result;
}

void quasar::InverseTextNormalizer::applyOverrides(uint64_t a1, uint64_t *a2, uint64_t *a3, _QWORD *a4, uint64_t a5)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  unsigned __int8 *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned __int8 *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _OWORD v34[18];

  if (quasar::gLogLevel >= 5)
  {
    memset(v34, 0, 272);
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v34);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)"Applying ", 9);
    v6 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)" overrides", 10);
    quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)v34);
  }
  v7 = *a2;
  v29 = a2[1];
  if (*a2 == v29)
    return;
  do
  {
    v9 = *a3;
    v8 = a3[1];
    if (v8 == *a3)
      goto LABEL_54;
    v10 = 0;
    v11 = 0;
    v12 = 0;
    while (1)
    {
      v13 = v11;
      v14 = v9 + 224 * v10;
      v15 = *(unsigned __int8 *)(v7 + 23);
      if ((v15 & 0x80u) == 0)
        v16 = *(unsigned __int8 *)(v7 + 23);
      else
        v16 = *(_QWORD *)(v7 + 8);
      v17 = *(char *)(v14 + 23);
      if (v17 >= 0)
        v18 = *(unsigned __int8 *)(v14 + 23);
      else
        v18 = *(_QWORD *)(v14 + 8);
      if (v16 != v18)
        goto LABEL_22;
      v19 = v17 >= 0 ? (unsigned __int8 *)(v9 + 224 * v10) : *(unsigned __int8 **)v14;
      if ((v15 & 0x80) != 0)
      {
        ++v11;
        if (memcmp(*(const void **)v7, v19, *(_QWORD *)(v7 + 8)))
          goto LABEL_25;
      }
      else
      {
        if (*(_BYTE *)(v7 + 23))
        {
          v20 = 0;
          while (*(unsigned __int8 *)(v7 + v20) == v19[v20])
          {
            if (v15 == ++v20)
              goto LABEL_21;
          }
LABEL_22:
          ++v11;
          goto LABEL_25;
        }
LABEL_21:
        ++v11;
      }
      v12 = v11;
LABEL_25:
      v21 = *(unsigned __int8 *)(v7 + 47);
      if ((v21 & 0x80u) == 0)
        v22 = *(unsigned __int8 *)(v7 + 47);
      else
        v22 = *(_QWORD *)(v7 + 32);
      if (v22 != v18)
        goto LABEL_39;
      v23 = v17 >= 0 ? (unsigned __int8 *)(v9 + 224 * v10) : *(unsigned __int8 **)v14;
      if ((v21 & 0x80) != 0)
        break;
      if (!*(_BYTE *)(v7 + 47))
        goto LABEL_50;
      v24 = 0;
      while (*(unsigned __int8 *)(v7 + v24 + 24) == v23[v24])
      {
        if (v21 == ++v24)
          goto LABEL_50;
      }
LABEL_39:
      if (v12 && v13 >= v12)
      {
        if (v17 < 0)
        {
          **(_BYTE **)v14 = 0;
          *(_QWORD *)(v14 + 8) = 0;
        }
        else
        {
          *(_BYTE *)v14 = 0;
          *(_BYTE *)(v14 + 23) = 0;
        }
        v25 = *a4 + 24 * v10;
        if (*(char *)(v25 + 23) < 0)
        {
          **(_BYTE **)v25 = 0;
          *(_QWORD *)(v25 + 8) = 0;
        }
        else
        {
          *(_BYTE *)v25 = 0;
          *(_BYTE *)(v25 + 23) = 0;
        }
        *(_DWORD *)(*(_QWORD *)(a5 + 8) + 4 * v10 + 4) = **(_DWORD **)(a1 + 656);
        v9 = *a3;
        v8 = a3[1];
      }
      v10 = v11;
      if (0x6DB6DB6DB6DB6DB7 * ((v8 - v9) >> 5) <= (unint64_t)v11)
        goto LABEL_54;
    }
    if (memcmp(*(const void **)(v7 + 24), v23, *(_QWORD *)(v7 + 32)))
      goto LABEL_39;
LABEL_50:
    if (v13 > v12 && v12 && v13 != 1)
    {
      v26 = 224 * v12;
      std::string::operator=((std::string *)(v9 + v26), (const std::string *)(v7 + 48));
      v27 = *a3 + 224 * (v13 - 1);
      v28 = *a3 + v26;
      *(_DWORD *)(v28 + 32) = *(_DWORD *)(v27 + 32);
      *(_DWORD *)(v28 + 36) = *(_DWORD *)(v27 + 32);
      std::string::operator=((std::string *)(*a4 + 24 * v12), (const std::string *)(v7 + 48));
    }
LABEL_54:
    v7 += 72;
  }
  while (v7 != v29);
}

void sub_1AD8C1238(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)va);
  _Unwind_Resume(a1);
}

uint64_t quasar::EntityTransformer::transformEntity(uint64_t a1, _QWORD *a2, int a3, int a4, _DWORD *a5, _DWORD *a6)
{
  uint64_t *v11;
  uint64_t *v12;
  uint64_t *v13;
  int v14;
  int v15;
  int v16;
  _QWORD *v17;
  _QWORD *v18;
  int v19;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  int v38[3];

  v38[0] = a3;
  v11 = std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>((_QWORD *)a1, v38);
  v12 = std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>((_QWORD *)(a1 + 40), v38);
  v13 = v12;
  if (!v11)
  {
    v14 = -1;
    if (v12)
      goto LABEL_3;
LABEL_5:
    v15 = -1;
    goto LABEL_6;
  }
  v14 = *((_DWORD *)v11 + 5);
  if (!v12)
    goto LABEL_5;
LABEL_3:
  v15 = *((_DWORD *)v12 + 5);
LABEL_6:
  v16 = quasar::gLogLevel;
  if (v11 && quasar::gLogLevel >= 5)
  {
    v36 = 0u;
    v37 = 0u;
    v34 = 0u;
    v35 = 0u;
    v32 = 0u;
    v33 = 0u;
    v30 = 0u;
    v31 = 0u;
    v28 = 0u;
    v29 = 0u;
    v26 = 0u;
    v27 = 0u;
    v24 = 0u;
    v25 = 0u;
    v22 = 0u;
    v23 = 0u;
    v21 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v21);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v21, (uint64_t)"start entity <", 14);
    v17 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)">", 1);
    quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&v21);
    v16 = quasar::gLogLevel;
  }
  if (v13 && v16 >= 5)
  {
    v36 = 0u;
    v37 = 0u;
    v34 = 0u;
    v35 = 0u;
    v32 = 0u;
    v33 = 0u;
    v30 = 0u;
    v31 = 0u;
    v28 = 0u;
    v29 = 0u;
    v26 = 0u;
    v27 = 0u;
    v24 = 0u;
    v25 = 0u;
    v22 = 0u;
    v23 = 0u;
    v21 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v21);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v21, (uint64_t)"end entity <", 12);
    v18 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)">", 1);
    quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&v21);
  }
  v19 = *(_DWORD *)(a1 + 104);
  if (v19 == 1)
  {
    if (v11 || !v13)
    {
      if (v11)
      {
        *(_DWORD *)(a1 + 104) = 2;
        if (quasar::gLogLevel >= 4)
        {
          v36 = 0u;
          v37 = 0u;
          v34 = 0u;
          v35 = 0u;
          v32 = 0u;
          v33 = 0u;
          v30 = 0u;
          v31 = 0u;
          v28 = 0u;
          v29 = 0u;
          v26 = 0u;
          v27 = 0u;
          v24 = 0u;
          v25 = 0u;
          v22 = 0u;
          v23 = 0u;
          v21 = 0u;
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v21);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v21, (uint64_t)"Encountered orphan start entity ", 32);
          std::ostream::operator<<();
          quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&v21);
        }
      }
    }
    else if (v15 == *(_DWORD *)(a1 + 108))
    {
      quasar::EntityTransformer::applyEntityLabel(a1, a2, v38[0]);
      *(_DWORD *)(a1 + 104) = 0;
      *a6 = a4;
    }
  }
  else
  {
    if (v19)
    {
      v36 = 0u;
      v37 = 0u;
      v34 = 0u;
      v35 = 0u;
      v32 = 0u;
      v33 = 0u;
      v30 = 0u;
      v31 = 0u;
      v28 = 0u;
      v29 = 0u;
      v26 = 0u;
      v27 = 0u;
      v24 = 0u;
      v25 = 0u;
      v22 = 0u;
      v23 = 0u;
      v21 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v21);
      std::operator<<[abi:ne180100]<std::char_traits<char>>(&v21, "This cannot happen");
      quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&v21);
    }
    *a5 = a4;
    *a6 = a4;
    if (v11 && v13 && v14 == v15)
    {
      quasar::EntityTransformer::applyEntityLabel(a1, a2, v38[0]);
    }
    else if (v11)
    {
      *(_DWORD *)(a1 + 104) = 1;
      *(_DWORD *)(a1 + 108) = v14;
    }
  }
  return *(unsigned int *)(a1 + 104);
}

uint64_t quasar::LabelTransformer::applyLabels(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t *a4, uint64_t *a5, int a6)
{
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  quasar::QsrText *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  char v26;
  _QWORD *v27;
  _QWORD *v28;
  _QWORD *v29;
  std::string *p_str;
  std::string::size_type size;
  _QWORD *v32;
  int v33;
  _QWORD *v34;
  _DWORD *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  std::string *v41;
  std::string *v42;
  uint64_t v43;
  uint64_t result;
  int v45;
  _BYTE v48[32];
  __int128 v49;
  void *v50[2];
  __int128 v51;
  __int128 v52;
  void *v53[2];
  __int128 v54;
  __int128 v55;
  void *v56[2];
  __int128 v57;
  void *__p[2];
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  int v64;
  __int128 v65;
  char v66;
  __int128 *v67[3];
  __int128 v68;
  char v69;
  std::string __str;
  __int128 v71;
  char v72;
  void **v73[2];

  v11 = *a2;
  v10 = a2[1];
  std::string::basic_string[abi:ne180100]<0>(&v71, "");
  std::string::basic_string[abi:ne180100]<0>(&__str, "");
  std::string::basic_string[abi:ne180100]<0>(&v68, "");
  memset(v67, 0, sizeof(v67));
  std::string::basic_string[abi:ne180100]<0>(&v65, "");
  quasar::Token::Token((std::string *)v48, &v71, 0, 0, 0, 0, 0, (__int128 *)&__str, 0.0, &v68, v67, 0, &v65, 0, 0);
  std::vector<quasar::Token>::resize(a4, 0xAAAAAAAAAAAAAAABLL * ((v10 - v11) >> 3), (quasar::Token *)v48);
  if (SBYTE7(v59) < 0)
    operator delete(__p[0]);
  if (SBYTE7(v57) < 0)
    operator delete(v56[0]);
  v73[0] = (void **)&v54 + 1;
  std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100](v73);
  if (SBYTE7(v54) < 0)
    operator delete(v53[0]);
  v73[0] = (void **)&v51 + 1;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v73);
  if (SBYTE7(v51) < 0)
    operator delete(v50[0]);
  if ((v48[23] & 0x80000000) != 0)
    operator delete(*(void **)v48);
  if (v66 < 0)
    operator delete((void *)v65);
  *(_QWORD *)&v65 = v67;
  std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&v65);
  if (v69 < 0)
    operator delete((void *)v68);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if (v72 < 0)
    operator delete((void *)v71);
  fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::VectorFst(&v68);
  LODWORD(v67[0]) = 0;
  if (a3)
    *(_QWORD *)(a3 + 104) = 0xFFFFFFFF00000000;
  LODWORD(v65) = 0;
  LODWORD(v73[0]) = 0;
  v12 = 0x6DB6DB6DB6DB6DB7 * ((a4[1] - *a4) >> 5);
  *(_QWORD *)v48 = -1;
  std::vector<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> *,std::allocator<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> *>>::resize((uint64_t)a5, v12, v48);
  v14 = 0;
  v15 = 0;
  v16 = 0;
  v17 = 4;
  while (0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 3) > v16)
  {
    v18 = *a4 + v15;
    if (*(char *)(v18 + 23) < 0)
    {
      **(_BYTE **)v18 = 0;
      *(_QWORD *)(v18 + 8) = 0;
    }
    else
    {
      *(_BYTE *)v18 = 0;
      *(_BYTE *)(v18 + 23) = 0;
    }
    *(int32x2_t *)(*a5 + 8 * v16) = vdup_n_s32(v16);
    v64 = 0;
    v64 = *(_DWORD *)(*(_QWORD *)(a1 + 112) + 4 * v16 + 4);
    if (quasar::gLogLevel >= 6)
    {
      v62 = 0u;
      v63 = 0u;
      v60 = 0u;
      v61 = 0u;
      *(_OWORD *)__p = 0u;
      v59 = 0u;
      *(_OWORD *)v56 = 0u;
      v57 = 0u;
      v54 = 0u;
      v55 = 0u;
      v52 = 0u;
      *(_OWORD *)v53 = 0u;
      *(_OWORD *)v50 = 0u;
      v51 = 0u;
      v49 = 0u;
      memset(v48, 0, sizeof(v48));
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v48);
      v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v48, (uint64_t)"inputToken=\"", 12);
      v20 = *a2 + v14;
      v21 = *(char *)(v20 + 23);
      if (v21 >= 0)
        v22 = *a2 + v14;
      else
        v22 = *(_QWORD *)v20;
      if (v21 >= 0)
        v23 = *(unsigned __int8 *)(v20 + 23);
      else
        v23 = *(_QWORD *)(v20 + 8);
      v24 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, v22, v23);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)"\" label=", 8);
      std::ostream::operator<<();
      quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)v48);
    }
    if (*(_QWORD *)(a1 + 208) && *(_DWORD *)(a1 + 248) <= a6 && *(_QWORD *)(a1 + 232) > v16 + 1)
    {
      v25 = *(_QWORD *)(*(_QWORD *)(a1 + 224) + (((v16 + 1) >> 3) & 0x1FFFFFFFFFFFFFF8)) & (1 << (v16 + 1));
      v26 = v25 == 0;
      if (!v25 && quasar::gLogLevel >= 6)
      {
        v62 = 0u;
        v63 = 0u;
        v60 = 0u;
        v61 = 0u;
        *(_OWORD *)__p = 0u;
        v59 = 0u;
        *(_OWORD *)v56 = 0u;
        v57 = 0u;
        v54 = 0u;
        v55 = 0u;
        v52 = 0u;
        *(_OWORD *)v53 = 0u;
        *(_OWORD *)v50 = 0u;
        v51 = 0u;
        v49 = 0u;
        memset(v48, 0, sizeof(v48));
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v48);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v48, (uint64_t)"label (", 7);
        v27 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)") output score is under threshold (", 35);
        __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v64;
        std::__hash_table<std::__hash_value_type<int,float>,std::__unordered_map_hasher<int,std::__hash_value_type<int,float>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,float>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,float>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int &&>,std::tuple<>>(a1 + 184, &v64, (uint64_t)&std::piecewise_construct, &__str);
        v28 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)"). Skip applying the label", 26);
        quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)v48);
        v26 = 1;
      }
    }
    else
    {
      v26 = 0;
    }
    quasar::LabelTransformer::applyLabel(a1, *a2 + v14, v64, (uint64_t)&v68, (unsigned int *)v67, v26);
    if (quasar::gLogLevel >= 6)
    {
      v62 = 0u;
      v63 = 0u;
      v60 = 0u;
      v61 = 0u;
      *(_OWORD *)__p = 0u;
      v59 = 0u;
      *(_OWORD *)v56 = 0u;
      v57 = 0u;
      v54 = 0u;
      v55 = 0u;
      v52 = 0u;
      *(_OWORD *)v53 = 0u;
      *(_OWORD *)v50 = 0u;
      v51 = 0u;
      v49 = 0u;
      memset(v48, 0, sizeof(v48));
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v48);
      v29 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v48, (uint64_t)" concateFst=\"", 13);
      quasar::LabelTransformer::linearFst2Str((uint64_t)&v68, 0, &__str);
      if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        p_str = &__str;
      else
        p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
      if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
      else
        size = __str.__r_.__value_.__l.__size_;
      v32 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)p_str, size);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)"\"", 1);
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__str.__r_.__value_.__l.__data_);
      quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)v48);
    }
    if (!a3)
    {
      LODWORD(v65) = v16;
      LODWORD(v73[0]) = v16;
LABEL_55:
      memset(&__str, 0, sizeof(__str));
      quasar::SystemConfig::Version::Version(v48, 39, 0);
      if (quasar::SystemConfig::Version::operator<((_DWORD *)(a1 + 48), v48))
        quasar::LabelTransformer::linearFst2Str((uint64_t)&v68, 1, v48);
      else
        quasar::LabelTransformer::linearFst2Str((uint64_t)&v68, 0, v48);
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__str.__r_.__value_.__l.__data_);
      __str = *(std::string *)v48;
      fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::DeleteStates((uint64_t)&v68);
      v13 = (quasar::QsrText *)std::string::operator=((std::string *)(*a4 + v15), &__str);
      if (quasar::gLogLevel >= 6)
      {
        v62 = 0u;
        v63 = 0u;
        v60 = 0u;
        v61 = 0u;
        *(_OWORD *)__p = 0u;
        v59 = 0u;
        *(_OWORD *)v56 = 0u;
        v57 = 0u;
        v54 = 0u;
        v55 = 0u;
        v52 = 0u;
        *(_OWORD *)v53 = 0u;
        *(_OWORD *)v50 = 0u;
        v51 = 0u;
        v49 = 0u;
        memset(v48, 0, sizeof(v48));
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v48);
        v34 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v48, (uint64_t)"outputToken=", 12);
        quasar::operator<<(v34, *a4 + v15);
        quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)v48);
      }
      v35 = (_DWORD *)(*a5 + v17);
      *(v35 - 1) = v65;
      *v35 = v73[0];
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__str.__r_.__value_.__l.__data_);
      v33 = 0;
      goto LABEL_65;
    }
    v13 = (quasar::QsrText *)quasar::EntityTransformer::transformEntity(a3, &v68, v64, v16, &v65, v73);
    if (!(_DWORD)v13)
      goto LABEL_55;
    v33 = 2 * ((_DWORD)v13 == 2);
LABEL_65:
    v15 += 224;
    v14 += 24;
    v17 += 8;
    ++v16;
    if (v33)
      break;
  }
  if (a3 && *(_DWORD *)(a3 + 104))
  {
    if (quasar::gLogLevel >= 4)
    {
      v62 = 0u;
      v63 = 0u;
      v60 = 0u;
      v61 = 0u;
      *(_OWORD *)__p = 0u;
      v59 = 0u;
      *(_OWORD *)v56 = 0u;
      v57 = 0u;
      v54 = 0u;
      v55 = 0u;
      v52 = 0u;
      *(_OWORD *)v53 = 0u;
      *(_OWORD *)v50 = 0u;
      v51 = 0u;
      v49 = 0u;
      memset(v48, 0, sizeof(v48));
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v48);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v48, (uint64_t)"ITN failed.", 11);
      quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)v48);
    }
    v13 = (quasar::QsrText *)quasar::LabelTransformer::applyLabel(a1, a2, *(_DWORD *)a1, a4);
    v36 = *a5;
    v37 = a5[1];
    v38 = v37 - *a5;
    if (v37 != *a5)
    {
      v39 = 0;
      v40 = v38 >> 3;
      if (v40 <= 1)
        v40 = 1;
      do
      {
        *(int32x2_t *)(v36 + 8 * v39) = vdup_n_s32(v39);
        ++v39;
      }
      while (v40 != v39);
    }
  }
  if (*(_BYTE *)(a1 + 4))
  {
    v42 = (std::string *)*a4;
    v41 = (std::string *)a4[1];
    while (v42 != v41)
    {
      memset(v48, 0, 24);
      v43 = quasar::QsrText::SingletonInstance(v13);
      quasar::QsrText::decodeQsrText(v43, (uint64_t)v42, (uint64_t)v48);
      v13 = (quasar::QsrText *)std::string::operator=(v42, (const std::string *)v48);
      if ((v48[23] & 0x80000000) != 0)
        operator delete(*(void **)v48);
      v42 = (std::string *)((char *)v42 + 224);
    }
  }
  *(_QWORD *)&v68 = &unk_1E5D256C0;
  result = *((_QWORD *)&v68 + 1);
  if (*((_QWORD *)&v68 + 1))
  {
    v45 = *(_DWORD *)(*((_QWORD *)&v68 + 1) + 56) - 1;
    *(_DWORD *)(*((_QWORD *)&v68 + 1) + 56) = v45;
    if (!v45)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

void sub_1AD8C1CF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  uint64_t v11;
  _DWORD *v13;
  int v14;
  va_list va;

  va_start(va, a11);
  quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)va);
  *(_QWORD *)(v11 - 184) = &unk_1E5D256C0;
  v13 = *(_DWORD **)(v11 - 176);
  if (v13)
  {
    v14 = v13[14] - 1;
    v13[14] = v14;
    if (!v14)
      (*(void (**)(_DWORD *))(*(_QWORD *)v13 + 8))(v13);
  }
  _Unwind_Resume(a1);
}

void std::vector<quasar::Token>::resize(uint64_t *a1, unint64_t a2, quasar::Token *a3)
{
  uint64_t v4;
  unint64_t v5;
  BOOL v6;
  unint64_t v7;
  uint64_t v8;

  v4 = a1[1];
  v5 = 0x6DB6DB6DB6DB6DB7 * ((v4 - *a1) >> 5);
  v6 = a2 >= v5;
  v7 = a2 - v5;
  if (v7 != 0 && v6)
  {
    std::vector<quasar::Token>::__append(a1, v7, a3);
  }
  else if (!v6)
  {
    v8 = *a1 + 224 * a2;
    while (v4 != v8)
      quasar::Token::~Token((void **)(v4 - 224));
    a1[1] = v8;
  }
}

uint64_t quasar::InverseTextNormalizer::getNextToken(uint64_t a1, uint64_t a2, uint64_t a3, std::string *a4, uint64_t a5, _BYTE *a6, _DWORD *a7)
{
  int v14;
  int *v15;
  int v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  unsigned __int8 *v20;
  void *__p[2];
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  uint64_t v39;
  uint64_t v40;
  _DWORD *v41;
  uint64_t v42;

  MEMORY[0x1AF44C914](a4, "");
  MEMORY[0x1AF44C914](a5, "");
  v14 = 0;
  *a6 = 0;
  *a7 = -1;
  do
  {
    LODWORD(__p[0]) = (*(float (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, a3);
    LODWORD(v39) = 2139095040;
    if (*(float *)__p != INFINITY)
      break;
    v42 = 0;
    (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(_QWORD *)a2 + 136))(a2, a3, &v39);
    if (v39)
      v15 = (int *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v39 + 32))(v39);
    else
      v15 = (int *)(v40 + 16 * v42);
    v16 = *v15;
    if (!v14)
    {
      if (v16 != *(_DWORD *)(a1 + 12))
      {
        v37 = 0u;
        v38 = 0u;
        v35 = 0u;
        v36 = 0u;
        v33 = 0u;
        v34 = 0u;
        v31 = 0u;
        v32 = 0u;
        v29 = 0u;
        v30 = 0u;
        v27 = 0u;
        v28 = 0u;
        v25 = 0u;
        v26 = 0u;
        v23 = 0u;
        v24 = 0u;
        *(_OWORD *)__p = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Missing TokenBoundary label", 27);
        quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)__p);
      }
      v14 = 1;
      goto LABEL_20;
    }
    if ((v14 & 0xFFFFFFFE) != 2 || v16 != *(_DWORD *)(a1 + 12))
    {
      if (v14 == 3)
      {
        std::string::push_back((std::string *)a5, v16);
      }
      else
      {
        if (v14 != 2)
        {
          *a7 = v16;
          goto LABEL_17;
        }
        if (v16 != 92)
        {
          std::string::push_back(a4, v16);
LABEL_17:
          v14 = 2;
LABEL_20:
          if (v39)
            v18 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v39 + 32))(v39);
          else
            v18 = v40 + 16 * v42;
          a3 = *(unsigned int *)(v18 + 12);
          v17 = 1;
          goto LABEL_24;
        }
      }
      v14 = 3;
      goto LABEL_20;
    }
    v17 = 0;
LABEL_24:
    if (v39)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v39 + 8))(v39);
    }
    else if (v41)
    {
      --*v41;
    }
  }
  while ((v17 & 1) != 0);
  v19 = *(unsigned __int8 *)(a5 + 23);
  if ((v19 & 0x80u) != 0)
    v19 = *(_QWORD *)(a5 + 8);
  if (v19)
  {
    std::operator+<char>();
    v20 = std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>((_QWORD *)(a1 + 504), (unsigned __int8 *)__p);
    if (SBYTE7(v23) < 0)
      operator delete(__p[0]);
    if (v20)
      *a6 = 1;
  }
  return a3;
}

void sub_1AD8C21D8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v3;
  _DWORD *v4;

  v3 = *(_QWORD *)(v1 - 128);
  if (v3)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  }
  else
  {
    v4 = *(_DWORD **)(v1 - 104);
    if (v4)
      --*v4;
  }
  _Unwind_Resume(exception_object);
}

uint64_t quasar::InverseTextNormalizer::startsWithCapitalLetter(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  int *v4;
  std::basic_string<char32_t> *p_p;
  uint64_t v6;
  std::basic_string<char32_t> __p;

  v2 = quasar::InverseTextNormalizer::char32Converter((quasar::InverseTextNormalizer *)a1);
  v3 = *(unsigned __int8 *)(a1 + 23);
  if ((v3 & 0x80u) == 0)
    v4 = (int *)a1;
  else
    v4 = *(int **)a1;
  if ((v3 & 0x80u) != 0)
    v3 = *(_QWORD *)(a1 + 8);
  std::wstring_convert<std::codecvt_utf8<char32_t,1114111ul,(std::codecvt_mode)0>,char32_t,std::allocator<char32_t>,std::allocator<char>>::from_bytes(v2, v4, (int *)((char *)v4 + v3), &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    if (!__p.__r_.__value_.__l.__size_)
      goto LABEL_13;
    p_p = (std::basic_string<char32_t> *)__p.__r_.__value_.__r.__words[0];
  }
  else
  {
    if (!*((_BYTE *)&__p.__r_.__value_.__s + 23))
      goto LABEL_13;
    p_p = &__p;
  }
  if (u_isupper(p_p->__r_.__value_.__s.__data_[0]))
  {
    v6 = 1;
    goto LABEL_14;
  }
LABEL_13:
  v6 = 0;
LABEL_14:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return v6;
}

void sub_1AD8C22B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void quasar::InverseTextNormalizer::capitalizeFirstLetter(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  int *v4;
  quasar::InverseTextNormalizer *v5;
  std::basic_string<char32_t> *p_p;
  std::basic_string<char32_t> *v7;
  uint64_t v8;
  std::basic_string<char32_t>::size_type size;
  char *v10;
  std::string v11;
  std::basic_string<char32_t> __p;

  v2 = quasar::CommandTransform::char32Converter((quasar::CommandTransform *)a1);
  v3 = *(unsigned __int8 *)(a1 + 23);
  if ((v3 & 0x80u) == 0)
    v4 = (int *)a1;
  else
    v4 = *(int **)a1;
  if ((v3 & 0x80u) != 0)
    v3 = *(_QWORD *)(a1 + 8);
  std::wstring_convert<std::codecvt_utf8<char32_t,1114111ul,(std::codecvt_mode)0>,char32_t,std::allocator<char32_t>,std::allocator<char>>::from_bytes(v2, v4, (int *)((char *)v4 + v3), &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    if (!__p.__r_.__value_.__l.__size_)
      goto LABEL_14;
    p_p = (std::basic_string<char32_t> *)__p.__r_.__value_.__r.__words[0];
  }
  else
  {
    if (!*((_BYTE *)&__p.__r_.__value_.__s + 23))
      goto LABEL_14;
    p_p = &__p;
  }
  v5 = (quasar::InverseTextNormalizer *)MEMORY[0x1AF44E6B4](p_p->__r_.__value_.__s.__data_[0]);
  v7 = &__p;
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v7 = (std::basic_string<char32_t> *)__p.__r_.__value_.__r.__words[0];
  v7->__r_.__value_.__s.__data_[0] = (int)v5;
LABEL_14:
  v8 = quasar::InverseTextNormalizer::char32Converter(v5);
  size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v10 = (char *)&__p;
  else
    v10 = (char *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = __p.__r_.__value_.__l.__size_;
  std::wstring_convert<std::codecvt_utf8<char32_t,1114111ul,(std::codecvt_mode)0>,char32_t,std::allocator<char32_t>,std::allocator<char>>::to_bytes(v8, v10, &v10[4 * size], &v11);
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  *(std::string *)a1 = v11;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_1AD8C23B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void quasar::InverseTextNormalizer::getFeatures(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5, uint64_t a6, uint64_t a7)
{
  int v8;
  int *v11;
  int *v12;
  _QWORD *v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  int *v25;
  int *v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  _OWORD v36[18];

  v8 = a5;
  v11 = *(int **)(a1 + 400);
  v12 = *(int **)(a1 + 408);
  if (v11 == v12)
  {
    if (quasar::InverseTextNormalizer::startsWithCapitalLetter(a2))
    {
      v8 = a5 + 1;
      *(_DWORD *)(*(_QWORD *)(a6 + 8) + 4 * *(_DWORD *)(a6 + 24) * a4 + 4 * a5) = 1065353216;
    }
  }
  else
  {
    do
    {
      if (quasar::InverseTextNormalizer::RegexFeatInfo::isMatch((uint64_t)v11, a2, a3))
      {
        if (quasar::gLogLevel >= 5)
        {
          memset(v36, 0, 272);
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v36);
          v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)"Regex match for ", 16);
          v15 = *(char *)(a2 + 23);
          if (v15 >= 0)
            v16 = a2;
          else
            v16 = *(_QWORD *)a2;
          if (v15 >= 0)
            v17 = *(unsigned __int8 *)(a2 + 23);
          else
            v17 = *(_QWORD *)(a2 + 8);
          v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, v16, v17);
          v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)"(", 1);
          v20 = *(char *)(a3 + 23);
          if (v20 >= 0)
            v21 = a3;
          else
            v21 = *(_QWORD *)a3;
          if (v20 >= 0)
            v22 = *(unsigned __int8 *)(a3 + 23);
          else
            v22 = *(_QWORD *)(a3 + 8);
          v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, v21, v22);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)") with label ", 13);
          std::ostream::operator<<();
          quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)v36);
        }
        *(float *)(*(_QWORD *)(a6 + 8) + 4 * *(_DWORD *)(a6 + 24) * a4 + 4 * v8++) = (float)*v11;
      }
      v11 += 10;
    }
    while (v11 != v12);
  }
  v24 = std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::find<std::string>(a7, (const void **)a2);
  if (a7 + 8 == v24)
  {
    v27 = a5;
  }
  else
  {
    v25 = *(int **)(v24 + 56);
    v26 = *(int **)(v24 + 64);
    v27 = a5;
    if (v25 != v26)
    {
      v28 = *(_QWORD *)(a6 + 8) + 4 * *(_DWORD *)(a6 + 24) * a4;
      v29 = v8;
      do
      {
        v30 = *v25++;
        v8 = v29 + 1;
        *(float *)(v28 + 4 * v29++) = (float)v30;
      }
      while (v25 != v26);
    }
  }
  if (v8 == v27)
  {
    v8 = v27 + 1;
    v31 = *(_DWORD *)(a6 + 16);
    v32 = *(_QWORD *)(a6 + 8);
    v33 = *(int *)(a6 + 24) * (uint64_t)a4;
    *(_DWORD *)(v32 + 4 * v33 + 4 * v27) = 0;
  }
  else
  {
    v31 = *(_DWORD *)(a6 + 16);
    v32 = *(_QWORD *)(a6 + 8);
    v33 = *(int *)(a6 + 24) * (uint64_t)a4;
  }
  memset_pattern16((void *)(v32 + 4 * (v33 + v8)), &unk_1AE145880, 4 * (v31 + ~v8) + 4);
}

void sub_1AD8C2638(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)va);
  _Unwind_Resume(a1);
}

BOOL quasar::InverseTextNormalizer::RegexFeatInfo::isMatch(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _BOOL8 result;

  result = quasar::URegularExpressionWrapper::isMatch(*(URegularExpression ***)(a1 + 8), a2);
  if (result)
    return quasar::URegularExpressionWrapper::isMatch(*(URegularExpression ***)(a1 + 24), a3);
  return result;
}

uint64_t quasar::InverseTextNormalizer::doPreProcessing@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t **a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v10;
  __int128 *v11;
  std::string *v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  __int128 *CompoundWord;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t *v24;
  unint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t *v34;
  unint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  char *v40;
  unint64_t *v41;
  char *v42;
  unint64_t *v43;
  unint64_t v44;
  char *v45;
  char *v46;
  unint64_t *v47;
  uint64_t v48;
  _QWORD *v49;
  std::string *p_str;
  std::string::size_type size;
  uint64_t v53;
  _BYTE v54[32];
  __int128 v55;
  void *v56[2];
  _OWORD v57[2];
  void *v58[2];
  _OWORD v59[2];
  void *v60[2];
  __int128 v61;
  void *__p[2];
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  std::string __str;
  std::string *v69;
  void **v70[2];

  *a5 = 0;
  a5[1] = 0;
  a5[2] = 0;
  a4[1] = *a4;
  (*(void (**)(uint64_t))(*(_QWORD *)a3 + 224))(a3);
  v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 200))(a3);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a3 + 176))(a3, v10);
  v11 = *(__int128 **)(a2 + 8);
  v69 = *(std::string **)a2;
  v12 = v69;
  if (v69 != (std::string *)v11)
  {
    v13 = 0;
    v53 = (uint64_t)(a4 + 2);
    do
    {
      v14 = *(_DWORD *)(a1 + 12);
      if (v14)
      {
        v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 200))(a3);
        *(_DWORD *)v54 = v14;
        *(_QWORD *)&v54[4] = v14 | 0x3F80000000000000;
        *(_DWORD *)&v54[12] = v15;
        (*(void (**)(uint64_t, uint64_t, _BYTE *))(*(_QWORD *)a3 + 208))(a3, v10, v54);
      }
      else
      {
        v15 = v10;
      }
      v16 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 200))(a3);
      *(_DWORD *)v54 = ++v13;
      *(_QWORD *)&v54[4] = v13 | 0x3F80000000000000;
      *(_DWORD *)&v54[12] = v16;
      (*(void (**)(uint64_t, uint64_t, _BYTE *))(*(_QWORD *)a3 + 208))(a3, v15, v54);
      memset(&__str, 0, sizeof(__str));
      CompoundWord = quasar::InverseTextNormalizer::getCompoundWord(a1, a2, (__int128 **)&v69, (uint64_t)&__str);
      if (v12 == (std::string *)CompoundWord)
      {
        std::string::operator=(&__str, v12);
        v20 = a5[1];
        if (v20 >= a5[2])
        {
          v21 = std::vector<quasar::Token>::__push_back_slow_path<quasar::Token const&>(a5, (const quasar::Token *)v12);
        }
        else
        {
          quasar::Token::Token((std::string *)a5[1], (const quasar::Token *)v12);
          v21 = v20 + 224;
          a5[1] = v20 + 224;
        }
        a5[1] = v21;
        v31 = -1227133513 * (((unint64_t)v12 - *(_QWORD *)a2) >> 5);
        v32 = v31 | (v31 << 32);
        v34 = a4[1];
        v33 = (unint64_t)a4[2];
        if ((unint64_t)v34 >= v33)
        {
          v36 = v34 - *a4;
          if ((unint64_t)(v36 + 1) >> 61)
            std::vector<int>::__throw_length_error[abi:ne180100]();
          v37 = v33 - (_QWORD)*a4;
          v38 = v37 >> 2;
          if (v37 >> 2 <= (unint64_t)(v36 + 1))
            v38 = v36 + 1;
          if ((unint64_t)v37 >= 0x7FFFFFFFFFFFFFF8)
            v39 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v39 = v38;
          if (v39)
            v40 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>(v53, v39);
          else
            v40 = 0;
          v45 = &v40[8 * v36];
          *(_QWORD *)v45 = v32;
          v35 = (unint64_t *)(v45 + 8);
          v47 = *a4;
          v46 = (char *)a4[1];
          if (v46 != (char *)*a4)
          {
            do
            {
              v48 = *((_QWORD *)v46 - 1);
              v46 -= 8;
              *((_QWORD *)v45 - 1) = v48;
              v45 -= 8;
            }
            while (v46 != (char *)v47);
            v46 = (char *)*a4;
          }
          *a4 = (unint64_t *)v45;
          a4[1] = v35;
          a4[2] = (unint64_t *)&v40[8 * v39];
          if (v46)
            operator delete(v46);
        }
        else
        {
          *v34 = v32;
          v35 = v34 + 1;
        }
        v12 = (std::string *)((char *)v12 + 224);
        a4[1] = v35;
      }
      else
      {
        quasar::InverseTextNormalizer::getMergedToken((quasar::Token *)v12, (quasar::Token *)CompoundWord, (std::string *)v54);
        std::string::operator=((std::string *)v54, &__str);
        v18 = a5[1];
        if (v18 >= a5[2])
        {
          v19 = std::vector<quasar::Token>::__push_back_slow_path<quasar::Token const&>(a5, (const quasar::Token *)v54);
        }
        else
        {
          quasar::Token::Token((std::string *)a5[1], (const quasar::Token *)v54);
          v19 = v18 + 224;
          a5[1] = v18 + 224;
        }
        a5[1] = v19;
        v22 = ((-1227133513 * (((unint64_t)v12 - *(_QWORD *)a2) >> 5)) | ((unint64_t)(-1227133513 * (((unint64_t)CompoundWord - *(_QWORD *)a2) >> 5)) << 32))
            - 0x100000000;
        v24 = a4[1];
        v23 = (unint64_t)a4[2];
        if ((unint64_t)v24 >= v23)
        {
          v26 = v24 - *a4;
          if ((unint64_t)(v26 + 1) >> 61)
            std::vector<int>::__throw_length_error[abi:ne180100]();
          v27 = v23 - (_QWORD)*a4;
          v28 = v27 >> 2;
          if (v27 >> 2 <= (unint64_t)(v26 + 1))
            v28 = v26 + 1;
          if ((unint64_t)v27 >= 0x7FFFFFFFFFFFFFF8)
            v29 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v29 = v28;
          if (v29)
            v30 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>(v53, v29);
          else
            v30 = 0;
          v41 = (unint64_t *)&v30[8 * v26];
          *v41 = v22;
          v25 = v41 + 1;
          v43 = *a4;
          v42 = (char *)a4[1];
          if (v42 != (char *)*a4)
          {
            do
            {
              v44 = *((_QWORD *)v42 - 1);
              v42 -= 8;
              *--v41 = v44;
            }
            while (v42 != (char *)v43);
            v42 = (char *)*a4;
          }
          *a4 = v41;
          a4[1] = v25;
          a4[2] = (unint64_t *)&v30[8 * v29];
          if (v42)
            operator delete(v42);
        }
        else
        {
          *v24 = v22;
          v25 = v24 + 1;
        }
        a4[1] = v25;
        if (SBYTE7(v63) < 0)
          operator delete(__p[0]);
        if (SBYTE7(v61) < 0)
          operator delete(v60[0]);
        v70[0] = (void **)v59 + 1;
        std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100](v70);
        if (SBYTE7(v59[0]) < 0)
          operator delete(v58[0]);
        v70[0] = (void **)v57 + 1;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v70);
        if (SBYTE7(v57[0]) < 0)
          operator delete(v56[0]);
        if ((v54[23] & 0x80000000) != 0)
          operator delete(*(void **)v54);
        v12 = (std::string *)CompoundWord;
      }
      *(_WORD *)(a5[1] - 180) = 0;
      v69 = v12;
      if (quasar::gLogLevel >= 6)
      {
        v66 = 0u;
        v67 = 0u;
        v64 = 0u;
        v65 = 0u;
        *(_OWORD *)__p = 0u;
        v63 = 0u;
        *(_OWORD *)v60 = 0u;
        v61 = 0u;
        memset(v59, 0, sizeof(v59));
        *(_OWORD *)v58 = 0u;
        *(_OWORD *)v56 = 0u;
        memset(v57, 0, sizeof(v57));
        v55 = 0u;
        memset(v54, 0, sizeof(v54));
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v54);
        v49 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v54, (uint64_t)"Preprocessed token: ", 20);
        if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          p_str = &__str;
        else
          p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
        if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
        else
          size = __str.__r_.__value_.__l.__size_;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v49, (uint64_t)p_str, size);
        quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)v54);
      }
      v10 = quasar::LabelTransformer::addAcceptorArcs((unsigned __int8 *)&__str, v16, a3);
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__str.__r_.__value_.__l.__data_);
    }
    while (v12 != *(std::string **)(a2 + 8));
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, float))(*(_QWORD *)a3 + 184))(a3, v10, 0.0);
}

void sub_1AD8C2B94(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 - 128) = v1;
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)(v2 - 128));
  _Unwind_Resume(a1);
}

void quasar::InverseTextNormalizer::getMergedToken(quasar::Token *a1@<X0>, quasar::Token *a2@<X1>, std::string *a3@<X8>)
{
  float v6;
  uint64_t v7;
  quasar::Token *v8;
  uint64_t v9;
  uint64_t v10;
  float v11;
  const std::string::value_type *v12;
  void *v13;
  void **v14;
  std::string::size_type v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  quasar::Token *v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  std::string *v28;
  void *v29[2];
  char v30;
  void *v31[2];
  char v32;
  void *__p[2];
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  float32x4_t v50;
  std::string v51;
  std::string v52;

  if ((quasar::Token *)((char *)a1 + 224) == a2)
  {
    quasar::Token::Token(a3, a1);
    return;
  }
  v6 = *((float *)a1 + 10);
  if (*((char *)a1 + 71) < 0)
    std::string::__init_copy_ctor_external(&v52, *((const std::string::value_type **)a1 + 6), *((_QWORD *)a1 + 7));
  else
    v52 = *(std::string *)((_BYTE *)a1 + 2);
  v28 = a3;
  if (*((char *)a1 + 119) < 0)
    std::string::__init_copy_ctor_external(&v51, *((const std::string::value_type **)a1 + 12), *((_QWORD *)a1 + 13));
  else
    v51 = *(std::string *)((_BYTE *)a1 + 4);
  v7 = *((unsigned int *)a1 + 42);
  v50 = *(float32x4_t *)((char *)a1 + 204);
  v8 = a1;
  do
  {
    v9 = v7;
    if (*((char *)v8 + 295) < 0)
      v10 = *((_QWORD *)v8 + 35);
    else
      v10 = *((unsigned __int8 *)v8 + 295);
    v11 = *((float *)v8 + 66);
    if (v10)
    {
      std::operator+<char>();
      v12 = (SBYTE7(v34) & 0x80u) == 0 ? (const std::string::value_type *)__p : (const std::string::value_type *)__p[0];
      v13 = (SBYTE7(v34) & 0x80u) == 0 ? (void *)BYTE7(v34) : __p[1];
      std::string::append(&v52, v12, (std::string::size_type)v13);
      if (SBYTE7(v34) < 0)
        operator delete(__p[0]);
    }
    if (*((char *)v8 + 343) < 0)
    {
      if (!*((_QWORD *)v8 + 41))
        goto LABEL_34;
    }
    else if (!*((_BYTE *)v8 + 343))
    {
      goto LABEL_34;
    }
    std::operator+<char>();
    if ((SBYTE7(v34) & 0x80u) == 0)
      v14 = __p;
    else
      v14 = (void **)__p[0];
    if ((SBYTE7(v34) & 0x80u) == 0)
      v15 = BYTE7(v34);
    else
      v15 = (std::string::size_type)__p[1];
    std::string::append(&v51, (const std::string::value_type *)v14, v15);
    if (SBYTE7(v34) < 0)
      operator delete(__p[0]);
LABEL_34:
    quasar::Token::DecodingSignals::operator+=(&v50, (float32x4_t *)((char *)v8 + 428));
    v7 = *((unsigned int *)v8 + 98);
    if ((_DWORD)v9 == (_DWORD)v7)
    {
      v7 = v9;
    }
    else if ((_DWORD)v9 != 5 && quasar::gLogLevel >= 2)
    {
      v48 = 0u;
      v49 = 0u;
      v46 = 0u;
      v47 = 0u;
      v44 = 0u;
      v45 = 0u;
      v42 = 0u;
      v43 = 0u;
      v40 = 0u;
      v41 = 0u;
      v38 = 0u;
      v39 = 0u;
      v36 = 0u;
      v37 = 0u;
      v34 = 0u;
      v35 = 0u;
      *(_OWORD *)__p = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
      v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Merged token span covers multiple LME types (", 45);
      v17 = quasar::operator<<(v16, v9);
      v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)" and ", 5);
      v19 = quasar::operator<<(v18, *((_DWORD *)v8 + 98));
      v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"); using ", 9);
      v21 = quasar::operator<<(v20, *((_DWORD *)v8 + 98));
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)".", 1);
      quasar::QuasarWarnMessage::~QuasarWarnMessage((quasar::QuasarWarnMessage *)__p);
      v7 = *((unsigned int *)v8 + 98);
    }
    v6 = v6 + v11;
    v22 = (quasar::Token *)((char *)v8 + 448);
    v8 = (quasar::Token *)((char *)v8 + 224);
  }
  while (v22 != a2);
  std::string::basic_string[abi:ne180100]<0>(v31, "");
  v23 = *((_DWORD *)a1 + 7);
  v24 = *((_DWORD *)a2 - 48);
  v25 = *((_DWORD *)a2 - 47);
  v26 = *((unsigned __int8 *)a2 - 180);
  v27 = *((unsigned __int8 *)a1 + 45);
  __p[0] = 0;
  __p[1] = 0;
  *(_QWORD *)&v34 = 0;
  std::string::basic_string[abi:ne180100]<0>(v29, "");
  quasar::Token::Token(v28, (__int128 *)v31, v23, v24, v25, v26 != 0, v27 != 0, (__int128 *)&v52, v6 / (float)(0x6DB6DB6DB6DB6DB7 * ((a2 - a1) >> 5)), (__int128 *)&v51, (__int128 **)__p, 0, (__int128 *)v29, 0, 0);
  if (v30 < 0)
    operator delete(v29[0]);
  v29[0] = __p;
  std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)v29);
  if (v32 < 0)
    operator delete(v31[0]);
  LODWORD(v28[7].__r_.__value_.__l.__data_) = v7;
  *(float32x4_t *)((char *)&v28[8].__r_.__value_.__r.__words[1] + 4) = v50;
  if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v51.__r_.__value_.__l.__data_);
  if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v52.__r_.__value_.__l.__data_);
}

void sub_1AD8C2FD8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  uint64_t v32;

  if (*(char *)(v32 - 105) < 0)
    operator delete(*(void **)(v32 - 128));
  _Unwind_Resume(exception_object);
}

uint64_t quasar::InverseTextNormalizer::checkFunction(unsigned int **a1, int a2)
{
  unsigned int *v4;
  unsigned int *v5;
  _QWORD *v6;
  unint64_t v7;
  int v8;
  int v10;
  uint64_t v11;
  uint64_t v12;
  unsigned __int8 v14;
  void *__p;

  v14 = 0;
  std::vector<BOOL>::vector(&__p, a2, &v14);
  v4 = *a1;
  v5 = a1[1];
  if (*a1 == v5)
  {
LABEL_13:
    v12 = 1;
  }
  else
  {
    v6 = __p;
LABEL_3:
    v7 = *v4;
    if ((v7 & 0x80000000) == 0)
    {
      v8 = v4[1];
      if ((int)v7 <= v8 && v8 < a2)
      {
        v10 = v8 - v7 + 1;
        while (1)
        {
          v11 = v6[v7 >> 6];
          if ((v11 & (1 << v7)) != 0)
            break;
          v6[v7 >> 6] = v11 | (1 << v7);
          ++v7;
          if (!--v10)
          {
            v4 += 2;
            if (v4 != v5)
              goto LABEL_3;
            goto LABEL_13;
          }
        }
      }
    }
    v12 = 0;
  }
  if (__p)
    operator delete(__p);
  return v12;
}

void quasar::InverseTextNormalizer::doFeatureExtraction(uint64_t a1, uint64_t a2, uint64_t *a3, int32x2_t *a4, int a5, uint64_t a6, uint64_t *a7, uint64_t *a8)
{
  uint64_t *v15;
  quasar::VocabId *v16;
  int WordId;
  quasar::VocabId *v18;
  int v19;
  quasar::VocabId *v20;
  int v21;
  int NumTokens;
  __int32 v23;
  int32x2_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  float *v29;
  uint64_t v30;
  int v31;
  int v32;
  int v33;
  float *v34;
  uint64_t NextToken;
  int v36;
  uint64_t v37;
  quasar::VocabId *v38;
  int v39;
  _QWORD *v40;
  _QWORD *v41;
  _QWORD *v42;
  std::string *v43;
  std::string::size_type size;
  _QWORD *v45;
  _QWORD *v46;
  const void **v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  unint64_t v51;
  __int128 v52;
  uint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *p_shared_owners;
  unint64_t v56;
  void *__p[2];
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  const void *v74[2];
  unsigned __int8 v75;
  int v76;
  char v77;
  void *v78;
  uint64_t v79;
  uint64_t v80;
  std::string v81;
  quasar::VocabId *v82;
  std::__shared_weak_count *v83;

  v82 = 0;
  v83 = 0;
  if (*a7)
    v15 = a7;
  else
    v15 = (uint64_t *)(a1 + 360);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::operator=[abi:ne180100](&v82, v15);
  v16 = v82;
  quasar::VocabId::getBosWord(v82, (std::string *)__p);
  WordId = quasar::VocabId::getWordId((uint64_t)v16, (uint64_t)__p);
  if (SBYTE7(v58) < 0)
    operator delete(__p[0]);
  v18 = v82;
  quasar::VocabId::getEosWord(v82, (std::string *)__p);
  v19 = quasar::VocabId::getWordId((uint64_t)v18, (uint64_t)__p);
  if (SBYTE7(v58) < 0)
    operator delete(__p[0]);
  v20 = v82;
  quasar::VocabId::getPaddingWord(v82, (std::string *)__p);
  v21 = quasar::VocabId::getWordId((uint64_t)v20, (uint64_t)__p);
  if (SBYTE7(v58) < 0)
  {
    operator delete(__p[0]);
    if (a5)
    {
LABEL_10:
      kaldi::CuMatrix<float>::Resize(a4, a6, (*(_DWORD *)(a1 + 8) + 1), 0, 0);
      kaldi::CuMatrixBase<float>::Set((uint64_t)a4, -1.0);
      NumTokens = quasar::InverseTextNormalizer::getNumTokens(a1, a2);
      v23 = a4[2].i32[1];
      v24 = a4[1];
      *(float *)v24.i32[0] = (float)WordId;
      v25 = a4[3].i32[0];
      v26 = *(_QWORD *)&v24 + 4 * ((int)v25 + (int)v25 * NumTokens);
      *(float *)v26 = (float)v19;
      *(_DWORD *)(*(_QWORD *)&v24 + 4) = 0;
      *(_DWORD *)(v26 + 4) = 0;
      v27 = NumTokens + 2;
      if (NumTokens + 2 < v23)
      {
        v28 = v27;
        v29 = (float *)(*(_QWORD *)&v24 + 4 * (int)v25 * (uint64_t)v27);
        v30 = 4 * v25;
        v31 = v23 - NumTokens - 2;
        do
        {
          *v29 = (float)v21;
          ++v28;
          v29 = (float *)((char *)v29 + v30);
          --v31;
        }
        while (v31);
      }
      goto LABEL_17;
    }
  }
  else if (a5)
  {
    goto LABEL_10;
  }
  v32 = quasar::InverseTextNormalizer::getNumTokens(a1, a2);
  kaldi::CuMatrix<float>::Resize(a4, (v32 + 1), (*(_DWORD *)(a1 + 8) + 1), 1, 0);
  v33 = a4[2].i32[0];
  v34 = (float *)a4[1];
  *v34 = (float)WordId;
  if (v33 >= 2)
    memset_pattern16(v34 + 1, &unk_1AE145880, 4 * (v33 - 1));
LABEL_17:
  NextToken = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2);
  memset(&v81, 0, sizeof(v81));
  v36 = 1;
  v78 = 0;
  v79 = 0;
  v80 = 0;
  v77 = 0;
  v76 = -1;
  while (1)
  {
    LODWORD(__p[0]) = (*(float (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, NextToken);
    LODWORD(v74[0]) = 2139095040;
    if (*(float *)__p != INFINITY)
      break;
    NextToken = quasar::InverseTextNormalizer::getNextToken(a1, a2, NextToken, &v81, (uint64_t)&v78, &v77, &v76);
    v37 = HIBYTE(v80);
    if (v80 < 0)
      v37 = v79;
    if (v37)
      std::operator+<char>();
    else
      std::string::basic_string[abi:ne180100]<0>(v74, "");
    v38 = v82;
    if (v77)
    {
      v39 = quasar::VocabId::getWordId((uint64_t)v82, (uint64_t)v74);
    }
    else
    {
      std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)&v81.__r_.__value_.__l.__data_, v74, (uint64_t)__p);
      v39 = quasar::VocabId::getWordId((uint64_t)v38, (uint64_t)__p);
      if (SBYTE7(v58) < 0)
        operator delete(__p[0]);
    }
    if (quasar::gLogLevel >= 6)
    {
      v72 = 0u;
      v73 = 0u;
      v70 = 0u;
      v71 = 0u;
      v68 = 0u;
      v69 = 0u;
      v66 = 0u;
      v67 = 0u;
      v64 = 0u;
      v65 = 0u;
      v62 = 0u;
      v63 = 0u;
      v60 = 0u;
      v61 = 0u;
      v58 = 0u;
      v59 = 0u;
      *(_OWORD *)__p = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"tokenNum=", 9);
      v40 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)" tokenId=", 9);
      v41 = (_QWORD *)std::ostream::operator<<();
      v42 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v41, (uint64_t)" word=", 6);
      if ((v81.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v43 = &v81;
      else
        v43 = (std::string *)v81.__r_.__value_.__r.__words[0];
      if ((v81.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(v81.__r_.__value_.__r.__words[2]);
      else
        size = v81.__r_.__value_.__l.__size_;
      v45 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v42, (uint64_t)v43, size);
      v46 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v45, (uint64_t)" tag=", 5);
      if ((v75 & 0x80u) == 0)
        v47 = v74;
      else
        v47 = (const void **)v74[0];
      if ((v75 & 0x80u) == 0)
        v48 = v75;
      else
        v48 = (uint64_t)v74[1];
      v49 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v46, (uint64_t)v47, v48);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v49, (uint64_t)" tagIsSense=", 12);
      std::ostream::operator<<();
      quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)__p);
    }
    *(float *)(*(_QWORD *)&a4[1] + 4 * a4[3].i32[0] * v36) = (float)v39;
    if (*a8)
      v50 = *a8;
    else
      v50 = a1 + 376;
    quasar::InverseTextNormalizer::getFeatures(a1, (uint64_t)&v81, (uint64_t)&v78, v36, 1, (uint64_t)a4, v50);
    v51 = a3[1];
    if (v51 >= a3[2])
    {
      v53 = std::vector<std::string>::__push_back_slow_path<std::string const&>(a3, (__int128 *)&v81);
    }
    else
    {
      if (SHIBYTE(v81.__r_.__value_.__r.__words[2]) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)a3[1], v81.__r_.__value_.__l.__data_, v81.__r_.__value_.__l.__size_);
      }
      else
      {
        v52 = *(_OWORD *)&v81.__r_.__value_.__l.__data_;
        *(_QWORD *)(v51 + 16) = *((_QWORD *)&v81.__r_.__value_.__l + 2);
        *(_OWORD *)v51 = v52;
      }
      v53 = v51 + 24;
      a3[1] = v51 + 24;
    }
    a3[1] = v53;
    if ((char)v75 < 0)
      operator delete((void *)v74[0]);
    ++v36;
  }
  if (SHIBYTE(v80) < 0)
    operator delete(v78);
  if (SHIBYTE(v81.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v81.__r_.__value_.__l.__data_);
  v54 = v83;
  if (v83)
  {
    p_shared_owners = (unint64_t *)&v83->__shared_owners_;
    do
      v56 = __ldaxr(p_shared_owners);
    while (__stlxr(v56 - 1, p_shared_owners));
    if (!v56)
    {
      ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
      std::__shared_weak_count::__release_weak(v54);
    }
  }
}

void sub_1AD8C366C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  uint64_t v14;

  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](v14 - 104);
  _Unwind_Resume(a1);
}

void quasar::VocabId::getBosWord(quasar::VocabId *this@<X0>, std::string *a2@<X8>)
{
  if (*(_QWORD *)this)
  {
    kaldi::quasar::Vocab::BosWord(*(kaldi::quasar::Vocab **)this, a2);
  }
  else if (*((char *)this + 159) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *((const std::string::value_type **)this + 17), *((_QWORD *)this + 18));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 136);
    a2->__r_.__value_.__r.__words[2] = *((_QWORD *)this + 19);
  }
}

void quasar::VocabId::getEosWord(quasar::VocabId *this@<X0>, std::string *a2@<X8>)
{
  if (*(_QWORD *)this)
  {
    kaldi::quasar::Vocab::EosWord(*(kaldi::quasar::Vocab **)this, a2);
  }
  else if (*((char *)this + 183) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *((const std::string::value_type **)this + 20), *((_QWORD *)this + 21));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *((_OWORD *)this + 10);
    a2->__r_.__value_.__r.__words[2] = *((_QWORD *)this + 22);
  }
}

void quasar::InverseTextNormalizer::run(int *a1@<X0>, __int128 **a2@<X1>, uint64_t *a3@<X2>, const void **a4@<X3>, char a5@<W4>, uint64_t *a6@<X8>)
{
  int v12;
  unint64_t v13;
  _DWORD *v14;
  _DWORD *v15;
  unint64_t v16;
  unint64_t v17;
  unsigned int *v18;
  BOOL v19;
  unint64_t v20;
  unsigned int v21;
  unsigned int v22;
  int v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  _DWORD *v44;
  _DWORD *v45;
  uint64_t v46;

  v44 = 0;
  v45 = 0;
  v46 = 0;
  v12 = quasar::QsrText::SingletonInstance((quasar::QsrText *)a1);
  quasar::QsrText::removeW00(v12, a2, (uint64_t *)&v44);
  v13 = a1[4];
  v14 = v44;
  v15 = v45;
  v16 = ((char *)v45 - (char *)v44) / 224;
  if (!(_DWORD)v13 || v16 <= v13)
  {
    quasar::InverseTextNormalizer::runChunk((uint64_t)a1, (uint64_t *)&v44, a3, a4, a5, v16, a6);
    quasar::InverseTextNormalizer::removeTrailingFormalAutoPunctuation((uint64_t)a1, a6, a4, a5);
    goto LABEL_28;
  }
  v17 = 0;
  v18 = v44 + 8;
  v19 = 1;
  while (1)
  {
    if (!v17)
    {
      v22 = v44[7];
      goto LABEL_9;
    }
    v20 = (v17 - 1);
    if (v16 <= v20)
      std::vector<std::pair<int,int>>::__throw_out_of_range[abi:ne180100]();
    v21 = v44[56 * v20 + 8];
    v22 = *(v18 - 1);
    if (v21 > v22)
      break;
LABEL_9:
    if (v22 > *v18 || *v18 == 0)
      break;
    ++v17;
    v18 += 56;
    v19 = v16 > v17;
    if (v16 == v17)
    {
      v19 = 0;
      goto LABEL_21;
    }
  }
  if (quasar::gLogLevel >= 5)
  {
    v42 = 0u;
    v43 = 0u;
    v40 = 0u;
    v41 = 0u;
    v38 = 0u;
    v39 = 0u;
    v36 = 0u;
    v37 = 0u;
    v34 = 0u;
    v35 = 0u;
    v32 = 0u;
    v33 = 0u;
    v30 = 0u;
    v31 = 0u;
    v28 = 0u;
    v29 = 0u;
    v27 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v27);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v27, (uint64_t)"token sequence time is not monotonic increasing.", 48);
    quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&v27);
    v14 = v44;
    v15 = v45;
  }
  if (v14 != v15)
  {
    v24 = 0;
    do
    {
      v14[7] = v24;
      v24 += 10;
      v14[8] = v24;
      v14[9] = v24;
      v14 += 56;
    }
    while (v14 != v15);
  }
LABEL_21:
  quasar::InverseTextNormalizer::runInChunks((uint64_t)a1, &v44, a3, a4, a5, a6);
  if (v19)
  {
    if (quasar::gLogLevel >= 4)
    {
      v42 = 0u;
      v43 = 0u;
      v40 = 0u;
      v41 = 0u;
      v38 = 0u;
      v39 = 0u;
      v36 = 0u;
      v37 = 0u;
      v34 = 0u;
      v35 = 0u;
      v32 = 0u;
      v33 = 0u;
      v30 = 0u;
      v31 = 0u;
      v28 = 0u;
      v29 = 0u;
      v27 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v27);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v27, (uint64_t)"reset token timing.", 19);
      quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&v27);
    }
    v25 = *a6;
    v26 = a6[1];
    while (v25 != v26)
    {
      *(_QWORD *)(v25 + 32) = 0;
      *(_DWORD *)(v25 + 28) = 0;
      v25 += 224;
    }
  }
  quasar::InverseTextNormalizer::removeTrailingFormalAutoPunctuation((uint64_t)a1, a6, a4, a5);
LABEL_28:
  *(_QWORD *)&v27 = &v44;
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&v27);
}

void sub_1AD8C3A38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  uint64_t v9;

  quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&a9);
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&a9);
  a9 = v9 - 88;
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&a9);
  _Unwind_Resume(a1);
}

double quasar::StopWatch::pause(quasar::StopWatch *this, clockid_t a2)
{
  double *v2;
  double Seconds;
  double v4;
  clockid_t v5;
  double result;
  _OWORD v7[17];

  if (*((_DWORD *)this + 6) != 1)
  {
    memset(v7, 0, sizeof(v7));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v7);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v7, "StopWatch is not running.");
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v7);
  }
  v2 = (double *)this;
  *((_DWORD *)this + 6) = 0;
  Seconds = kaldi::Timer::GetSeconds((kaldi::Timer *)5, a2);
  v4 = v2[4];
  v2 += 4;
  v2[5] = v2[5] + Seconds - v4;
  result = kaldi::Timer::ElapsedCPU((kaldi::Timer *)v2, v5) + v2[6];
  v2[6] = result;
  return result;
}

uint64_t quasar::InverseTextNormalizer::getCommands(uint64_t a1, uint64_t *a2, _QWORD *a3, std::vector<unsigned int> *a4)
{
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  int v13;
  unsigned __int8 *v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  __int128 v23;

  v23 = 0uLL;
  std::vector<std::shared_ptr<quasar::CommandTransform>>::resize((uint64_t)a3, 0x6DB6DB6DB6DB6DB7 * ((a2[1] - *a2) >> 5), &v23);
  v7 = (std::__shared_weak_count *)*((_QWORD *)&v23 + 1);
  if (*((_QWORD *)&v23 + 1))
  {
    v8 = (unint64_t *)(*((_QWORD *)&v23 + 1) + 8);
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  std::vector<int>::resize(a4, 0x6DB6DB6DB6DB6DB7 * ((a2[1] - *a2) >> 5));
  v10 = *a2;
  if (a2[1] == *a2)
  {
    v12 = 0;
  }
  else
  {
    v11 = 0;
    v12 = 0;
    v13 = -1;
    do
    {
      a4->__begin_[v11] = v13;
      v14 = std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>((_QWORD *)(a1 + 600), (unsigned __int8 *)(v10 + 224 * v11));
      if (v14)
      {
        quasar::CommandTransform::getCommandTransform(*((_DWORD *)v14 + 10), *(_QWORD *)(a1 + 640), a1 + 464, &v23);
        std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100](*a3 + 16 * v11, &v23);
        v15 = (std::__shared_weak_count *)*((_QWORD *)&v23 + 1);
        if (*((_QWORD *)&v23 + 1))
        {
          v16 = (unint64_t *)(*((_QWORD *)&v23 + 1) + 8);
          do
            v17 = __ldaxr(v16);
          while (__stlxr(v17 - 1, v16));
          if (!v17)
          {
            ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
            std::__shared_weak_count::__release_weak(v15);
          }
        }
        v12 = 1;
      }
      else
      {
        v23 = 0uLL;
        std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100](*a3 + 16 * v11, &v23);
        v18 = (std::__shared_weak_count *)*((_QWORD *)&v23 + 1);
        if (*((_QWORD *)&v23 + 1))
        {
          v19 = (unint64_t *)(*((_QWORD *)&v23 + 1) + 8);
          do
            v20 = __ldaxr(v19);
          while (__stlxr(v20 - 1, v19));
          if (!v20)
          {
            ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
            std::__shared_weak_count::__release_weak(v18);
          }
        }
        v13 = v11;
      }
      ++v11;
      v10 = *a2;
    }
    while (0x6DB6DB6DB6DB6DB7 * ((a2[1] - *a2) >> 5) > v11);
  }
  return v12 & 1;
}

void sub_1AD8C3D68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::shared_ptr<quasar::CommandTransform>>::resize(uint64_t a1, unint64_t a2, _QWORD *a3)
{
  uint64_t result;
  unint64_t v5;
  uint64_t v6;

  result = *(_QWORD *)(a1 + 8);
  v5 = (result - *(_QWORD *)a1) >> 4;
  if (a2 > v5)
    return std::vector<std::shared_ptr<quasar::CommandTransform>>::__append((char **)a1, a2 - v5, a3);
  if (a2 < v5)
  {
    v6 = *(_QWORD *)a1 + 16 * a2;
    while (result != v6)
      result = std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](result - 16);
    *(_QWORD *)(a1 + 8) = v6;
  }
  return result;
}

void quasar::InverseTextNormalizer::applyCommands(uint64_t a1, uint64_t *a2, uint64_t *a3, _QWORD *a4)
{
  unint64_t v6;
  uint64_t v7;
  _DWORD *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  int v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t *v15;
  int v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t *v24;
  _QWORD *v25;
  uint64_t v26;
  _QWORD *v27;
  unint64_t *v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t *v31;
  unint64_t v32;
  _OWORD v34[17];
  _QWORD *v35;
  uint64_t *v36;
  uint64_t v37;
  _QWORD v38[4];

  memset(v38, 0, 24);
  std::vector<quasar::Token>::__init_with_size[abi:ne180100]<quasar::Token*,quasar::Token*>(v38, *a2, a2[1], 0x6DB6DB6DB6DB6DB7 * ((a2[1] - *a2) >> 5));
  v35 = &v35;
  v36 = (uint64_t *)&v35;
  v37 = 0;
  if (a2[1] != *a2)
  {
    v6 = 0;
    do
    {
      v7 = *a3;
      v8 = *(_DWORD **)(*a3 + 16 * v6);
      if (v8)
      {
        *(_QWORD *)&v34[0] = *(_QWORD *)(*a3 + 16 * v6);
        v9 = *(std::__shared_weak_count **)(v7 + 16 * v6 + 8);
        *((_QWORD *)&v34[0] + 1) = v9;
        if (v9)
        {
          p_shared_owners = (unint64_t *)&v9->__shared_owners_;
          do
            v11 = __ldxr(p_shared_owners);
          while (__stxr(v11 + 1, p_shared_owners));
        }
        if (v8[4] != 4
          || (*(unsigned int (**)(_DWORD *, uint64_t *, unint64_t, _QWORD, _QWORD *))(*(_QWORD *)v8 + 16))(v8, a2, v6, *(unsigned int *)(*a4 + 4 * v6), v38) != 1)
        {
          v12 = v8[3];
          v13 = v36;
          if (v12 && v36 != (uint64_t *)&v35)
          {
            while (1)
            {
              v14 = (uint64_t *)v13[1];
              if (*(_DWORD *)(v13[2] + 8) == v12)
                break;
              v13 = (uint64_t *)v13[1];
              if (v14 == (uint64_t *)&v35)
                goto LABEL_28;
            }
            v26 = *v13;
            *(_QWORD *)(v26 + 8) = v14;
            *(_QWORD *)v13[1] = v26;
            --v37;
            std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)(v13 + 2));
            operator delete(v13);
          }
LABEL_28:
          v27 = operator new(0x20uLL);
          v9 = (std::__shared_weak_count *)*((_QWORD *)&v34[0] + 1);
          v27[2] = *(_QWORD *)&v34[0];
          v27[3] = v9;
          if (v9)
          {
            v28 = (unint64_t *)&v9->__shared_owners_;
            do
              v29 = __ldxr(v28);
            while (__stxr(v29 + 1, v28));
          }
          v30 = (uint64_t)v35;
          *v27 = v35;
          v27[1] = &v35;
          *(_QWORD *)(v30 + 8) = v27;
          v35 = v27;
          ++v37;
        }
        if (v9)
        {
          v31 = (unint64_t *)&v9->__shared_owners_;
          do
            v32 = __ldaxr(v31);
          while (__stlxr(v32 - 1, v31));
          if (!v32)
          {
            ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
            std::__shared_weak_count::__release_weak(v9);
          }
        }
      }
      else
      {
        v15 = v36;
        if (v36 != (uint64_t *)&v35)
        {
          do
          {
            v16 = (*(uint64_t (**)(uint64_t, uint64_t *, unint64_t, _QWORD, _QWORD *))(*(_QWORD *)v15[2] + 16))(v15[2], a2, v6, *(unsigned int *)(*a4 + 4 * v6), v38);
            if (quasar::gLogLevel >= 5)
            {
              memset(v34, 0, sizeof(v34));
              kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v34);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)"index=", 6);
              v17 = (_QWORD *)std::ostream::operator<<();
              v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)" token=", 7);
              v19 = *a2 + 224 * v6;
              v20 = *(char *)(v19 + 23);
              if (v20 >= 0)
                v21 = *a2 + 224 * v6;
              else
                v21 = *(_QWORD *)v19;
              if (v20 >= 0)
                v22 = *(unsigned __int8 *)(v19 + 23);
              else
                v22 = *(_QWORD *)(v19 + 8);
              v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, v21, v22);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)" commandId=", 11);
              std::ostream::operator<<();
              quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)v34);
            }
            v24 = (uint64_t *)v15[1];
            if (v16 == 1)
            {
              v25 = (_QWORD *)*v15;
              v25[1] = v24;
              *(_QWORD *)v15[1] = v25;
              --v37;
              std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)(v15 + 2));
              operator delete(v15);
            }
            v15 = v24;
          }
          while (v24 != (uint64_t *)&v35);
        }
      }
      ++v6;
    }
    while (0x6DB6DB6DB6DB6DB7 * ((a2[1] - *a2) >> 5) > v6);
  }
  std::__list_imp<std::shared_ptr<quasar::CommandTransform>>::clear((uint64_t *)&v35);
  *(_QWORD *)&v34[0] = v38;
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)v34);
}

void sub_1AD8C4158(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void **a11)
{
  uint64_t v11;

  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  std::__list_imp<std::shared_ptr<quasar::CommandTransform>>::clear((uint64_t *)(v11 - 136));
  a11 = (void **)(v11 - 112);
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100](&a11);
  _Unwind_Resume(a1);
}

void quasar::InverseTextNormalizer::setSpacing(uint64_t a1, std::string **a2)
{
  std::string *v2;
  std::string *v3;
  std::string *v5;
  unint64_t v6;
  int v7;
  unint64_t v8;
  std::string *v9;
  std::string *v10;
  std::string *v11;
  std::string::size_type v12;

  v3 = *a2;
  v2 = a2[1];
  if (v2 == *a2)
    return;
  v5 = *a2;
  if (SHIBYTE(v3->__r_.__value_.__r.__words[2]) < 0)
    v5 = (std::string *)v3->__r_.__value_.__r.__words[0];
  if (v5->__r_.__value_.__s.__data_[0] == 32)
  {
    std::string::erase(*a2, 0, 1uLL);
    v3 = *a2;
    v2 = a2[1];
  }
  if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * (((char *)v2 - (char *)v3) >> 5)) < 2)
  {
    v11 = v3;
    goto LABEL_25;
  }
  v6 = 0;
  v7 = 0;
  v8 = 1;
  do
  {
    v9 = (std::string *)((char *)v3 + v6 + 224);
    v10 = v9;
    if (v3[10].__r_.__value_.__s.__data_[v6 + 7] < 0)
      v10 = (std::string *)v9->__r_.__value_.__r.__words[0];
    if (v10->__r_.__value_.__s.__data_[0] == 32)
    {
      std::string::erase(v9, 0, 1uLL);
      v11 = *a2;
      (*a2)[1].__r_.__value_.__s.__data_[224 * v7 + 20] = 1;
      v12 = v3[10].__r_.__value_.__s.__data_[v6 + 7];
      if ((v12 & 0x80) == 0)
        goto LABEL_15;
    }
    else
    {
      v12 = v3[10].__r_.__value_.__s.__data_[v6 + 7];
      v11 = v3;
      if ((v12 & 0x80) == 0)
        goto LABEL_15;
    }
    v12 = v3[9].__r_.__value_.__r.__words[v6 / 8 + 2];
LABEL_15:
    if (v12)
      v7 = v8;
    ++v8;
    v2 = a2[1];
    v6 += 224;
    v3 = v11;
  }
  while (0x6DB6DB6DB6DB6DB7 * (((char *)v2 - (char *)v11) >> 5) > v8);
LABEL_25:
  while (v11 != v2)
  {
    if (SHIBYTE(v11->__r_.__value_.__r.__words[2]) < 0)
    {
      if (v11->__r_.__value_.__l.__size_)
        return;
    }
    else if (*((_BYTE *)&v11->__r_.__value_.__s + 23))
    {
      return;
    }
    v11[1].__r_.__value_.__s.__data_[20] = 0;
    v11 = (std::string *)((char *)v11 + 224);
  }
}

BOOL quasar::InverseTextNormalizer::easterEgg(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3;
  int v5;
  _WORD *v6;
  _BOOL8 result;
  uint64_t v8;
  int v9;
  int v10;
  int v11;
  uint64_t v13;
  int v14;
  uint64_t v15;
  int v16;
  _QWORD *v18;
  int v19;
  _QWORD *v20;
  int v21;

  v3 = *a2;
  if (a2[1] - *a2 != 1344)
    return 0;
  v5 = *(char *)(v3 + 23);
  if (v5 < 0)
  {
    if (*(_QWORD *)(v3 + 8) != 2)
      return 0;
    v6 = *(_WORD **)v3;
  }
  else
  {
    v6 = (_WORD *)*a2;
    if (v5 != 2)
      return 0;
  }
  if (*v6 != 31085)
    return 0;
  v8 = v3 + 224;
  v9 = *(char *)(v3 + 247);
  if (v9 < 0)
  {
    if (*(_QWORD *)(v3 + 232) != 6)
      return 0;
    v8 = *(_QWORD *)v8;
  }
  else if (v9 != 6)
  {
    return 0;
  }
  v10 = *(_DWORD *)v8;
  v11 = *(unsigned __int16 *)(v8 + 4);
  if (v10 != 1852142150 || v11 != 26723)
    return 0;
  v13 = v3 + 448;
  v14 = *(char *)(v3 + 471);
  if (v14 < 0)
  {
    if (*(_QWORD *)(v3 + 456) != 10)
      return 0;
    v13 = *(_QWORD *)v13;
  }
  else if (v14 != 10)
  {
    return 0;
  }
  v15 = *(_QWORD *)v13;
  v16 = *(unsigned __int16 *)(v13 + 8);
  if (v15 != 0x616E6F6974636964 || v16 != 31090)
    return 0;
  v18 = (_QWORD *)(v3 + 672);
  v19 = *(char *)(v3 + 695);
  if (v19 < 0)
  {
    if (*(_QWORD *)(v3 + 680) != 4)
      return 0;
    v18 = (_QWORD *)*v18;
  }
  else if (v19 != 4)
  {
    return 0;
  }
  if (*(_DWORD *)v18 != 1937006949)
    return 0;
  v20 = (_QWORD *)(v3 + 896);
  v21 = *(char *)(v3 + 919);
  if (v21 < 0)
  {
    if (*(_QWORD *)(v3 + 904) != 4)
      return 0;
    v20 = (_QWORD *)*v20;
  }
  else if (v21 != 4)
  {
    return 0;
  }
  if (*(_DWORD *)v20 != 1702259046)
    return 0;
  result = std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((_QWORD *)(v3 + 1120), "hotdogs");
  if (result)
  {
    if (a3 != a2)
      std::vector<quasar::Token>::__assign_with_size[abi:ne180100]<quasar::Token*,quasar::Token*>((uint64_t)a3, *a2, a2[1], 0x6DB6DB6DB6DB6DB7 * ((a2[1] - *a2) >> 5));
    MEMORY[0x1AF44C914](*a3, "Tantor");
    MEMORY[0x1AF44C914](*a3 + 224, "is");
    MEMORY[0x1AF44C914](*a3 + 448, "a");
    MEMORY[0x1AF44C914](*a3 + 672, "mighty");
    MEMORY[0x1AF44C914](*a3 + 896, "fine");
    MEMORY[0x1AF44C914](*a3 + 1120, "elephant.");
    return 1;
  }
  return result;
}

uint64_t quasar::InverseTextNormalizer::emptyCommandTokens(uint64_t a1, uint64_t *a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t result;

  v4 = *a2;
  v3 = a2[1];
  if (v3 != *a2)
  {
    v7 = 0;
    v8 = 0;
    v9 = 44;
    do
    {
      if (*(_QWORD *)(v4 + v7))
      {
        result = MEMORY[0x1AF44C914](*a3 + v9 - 44, "");
        *(_BYTE *)(*a3 + v9) = 0;
        v4 = *a2;
        v3 = a2[1];
      }
      ++v8;
      v9 += 224;
      v7 += 16;
    }
    while (v8 < (v3 - v4) >> 4);
  }
  return result;
}

void quasar::InverseTextNormalizer::setTokenProperties(uint64_t *a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;
  _QWORD *v4;
  unint64_t v6;
  int *v7;
  int v8;
  unsigned int v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  float v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  float v20;
  size_t v21;
  void **v22;
  const void *v23;
  void **v24;
  std::string::size_type v25;
  std::string::size_type size;
  uint64_t v27;
  std::string::size_type v28;
  std::string::size_type v29;
  const std::string::value_type *v30;
  const std::string::value_type *v31;
  const std::string::value_type *v32;
  const std::string::value_type *v33;
  std::string::size_type v34;
  uint64_t v35;
  _QWORD *v36;
  _QWORD *v37;
  _QWORD *v38;
  _QWORD *v39;
  _QWORD *v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  _QWORD *v45;
  _QWORD *v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  _QWORD *v52;
  _QWORD *v53;
  _QWORD *v54;
  _QWORD *v55;
  uint64_t v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  _QWORD *v60;
  _QWORD *v61;
  _QWORD *v62;
  _QWORD *v63;
  _QWORD *v64;
  uint64_t v65;
  int v66;
  uint64_t v67;
  uint64_t v68;
  _QWORD *v69;
  int v72;
  void *__p[2];
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  float32x4_t v90;
  std::string v91;
  std::string __str;

  v3 = *a3;
  if (a3[1] != *a3)
  {
    v4 = a2;
    v6 = 0;
    do
    {
      v7 = (int *)(*v4 + 8 * v6);
      v8 = *v7;
      v72 = v7[1];
      if (*(_BYTE *)(v3 + 224 * v6 + 172))
      {
        v9 = *(_DWORD *)(*a1 + 224 * v7[1] + 32);
        *(int32x2_t *)(v3 + 224 * v6 + 28) = vdup_n_s32(v9);
      }
      else
      {
        v10 = v3 + 224 * v6;
        v11 = *(unsigned __int8 *)(v10 + 173);
        v12 = *a1;
        v9 = *(_DWORD *)(*a1 + 224 * v8 + 28);
        *(_DWORD *)(v10 + 28) = v9;
        if (v11)
        {
          *(_DWORD *)(v3 + 224 * v6 + 32) = v9;
        }
        else
        {
          v13 = v12 + 224 * v72;
          *(_DWORD *)(v3 + 224 * v6 + 32) = *(_DWORD *)(v13 + 32);
          v9 = *(_DWORD *)(v13 + 36);
        }
      }
      *(_DWORD *)(v3 + 224 * v6 + 36) = v9;
      memset(&__str, 0, sizeof(__str));
      memset(&v91, 0, sizeof(v91));
      quasar::Token::DecodingSignals::DecodingSignals(v90.f32, 0.0, 0.0, 0.0, 0.0);
      if (v8 <= v72)
      {
        v16 = 224 * v8 + 104;
        v17 = v72 - v8 + 1;
        v15 = 0.0;
        v18 = 5;
        do
        {
          v19 = *a1 + v16;
          v20 = *(float *)(v19 - 64);
          if (*(char *)(v19 - 33) >= 0)
            v21 = *(unsigned __int8 *)(v19 - 33);
          else
            v21 = *(_QWORD *)(v19 - 48);
          std::string::basic_string[abi:ne180100]((uint64_t)__p, v21 + 1);
          if ((SBYTE7(v74) & 0x80u) == 0)
            v22 = __p;
          else
            v22 = (void **)__p[0];
          if (v21)
          {
            if (*(char *)(v19 - 33) >= 0)
              v23 = (const void *)(v19 - 56);
            else
              v23 = *(const void **)(v19 - 56);
            memmove(v22, v23, v21);
          }
          *(_WORD *)((char *)v22 + v21) = 32;
          if ((SBYTE7(v74) & 0x80u) == 0)
            v24 = __p;
          else
            v24 = (void **)__p[0];
          if ((SBYTE7(v74) & 0x80u) == 0)
            v25 = BYTE7(v74);
          else
            v25 = (std::string::size_type)__p[1];
          std::string::append(&__str, (const std::string::value_type *)v24, v25);
          if (SBYTE7(v74) < 0)
            operator delete(__p[0]);
          size = HIBYTE(v91.__r_.__value_.__r.__words[2]);
          if ((v91.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            size = v91.__r_.__value_.__l.__size_;
          if (size)
            std::string::append(&v91, ".");
          v27 = *a1 + v16;
          v28 = *(unsigned __int8 *)(v27 + 15);
          v29 = *(_QWORD *)v27;
          v32 = *(const std::string::value_type **)(v27 - 8);
          v30 = (const std::string::value_type *)(v27 - 8);
          v31 = v32;
          if ((v28 & 0x80u) == 0)
            v33 = v30;
          else
            v33 = v31;
          if ((v28 & 0x80u) == 0)
            v34 = v28;
          else
            v34 = v29;
          std::string::append(&v91, v33, v34);
          v35 = *a1;
          v14 = *(unsigned int *)(*a1 + v16 + 64);
          if ((_DWORD)v18 == (_DWORD)v14)
          {
            v14 = v18;
          }
          else if ((_DWORD)v18 != 5 && quasar::gLogLevel >= 6)
          {
            v88 = 0u;
            v89 = 0u;
            v86 = 0u;
            v87 = 0u;
            v84 = 0u;
            v85 = 0u;
            v82 = 0u;
            v83 = 0u;
            v80 = 0u;
            v81 = 0u;
            v78 = 0u;
            v79 = 0u;
            v76 = 0u;
            v77 = 0u;
            v74 = 0u;
            v75 = 0u;
            *(_OWORD *)__p = 0u;
            kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
            v36 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Merged token span covers multiple LME types (", 45);
            v37 = quasar::operator<<(v36, v18);
            v38 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37, (uint64_t)" and ", 5);
            v39 = quasar::operator<<(v38, *(_DWORD *)(*a1 + v16 + 64));
            v40 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v39, (uint64_t)"); using ",
                    9);
            v41 = quasar::operator<<(v40, *(_DWORD *)(*a1 + v16 + 64));
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v41, (uint64_t)".", 1);
            quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)__p);
            v35 = *a1;
            v14 = *(unsigned int *)(*a1 + v16 + 64);
          }
          quasar::Token::DecodingSignals::operator+=(&v90, (float32x4_t *)(v35 + v16 + 100));
          v15 = v15 + v20;
          v16 += 224;
          v18 = v14;
          --v17;
        }
        while (v17);
      }
      else
      {
        LODWORD(v14) = 5;
        v15 = 0.0;
      }
      quasar::trim(&__str);
      v42 = *a3 + 224 * v6;
      *(float *)(v42 + 40) = v15 / (float)(v72 - v8 + 1);
      std::string::operator=((std::string *)(v42 + 48), &__str);
      std::string::operator=((std::string *)(*a3 + 224 * v6 + 96), &v91);
      v43 = *a3 + 224 * v6;
      *(_DWORD *)(v43 + 168) = v14;
      *(float32x4_t *)(v43 + 204) = v90;
      v4 = a2;
      if (quasar::gLogLevel >= 6)
      {
        v88 = 0u;
        v89 = 0u;
        v86 = 0u;
        v87 = 0u;
        v84 = 0u;
        v85 = 0u;
        v82 = 0u;
        v83 = 0u;
        v80 = 0u;
        v81 = 0u;
        v78 = 0u;
        v79 = 0u;
        v76 = 0u;
        v77 = 0u;
        v74 = 0u;
        v75 = 0u;
        *(_OWORD *)__p = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"[", 1);
        v44 = (_QWORD *)std::ostream::operator<<();
        v45 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v44, (uint64_t)"] ", 2);
        v46 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v45, (uint64_t)"\"", 1);
        v47 = *a1 + 224 * *(int *)(*a2 + 8 * v6);
        v48 = *(char *)(v47 + 23);
        if (v48 >= 0)
          v49 = *a1 + 224 * *(int *)(*a2 + 8 * v6);
        else
          v49 = *(_QWORD *)v47;
        if (v48 >= 0)
          v50 = *(unsigned __int8 *)(v47 + 23);
        else
          v50 = *(_QWORD *)(v47 + 8);
        v51 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v46, v49, v50);
        v52 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v51, (uint64_t)"\" ~ ", 4);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v52, (uint64_t)"[", 1);
        v53 = (_QWORD *)std::ostream::operator<<();
        v54 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v53, (uint64_t)"] ", 2);
        v55 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v54, (uint64_t)"\"", 1);
        v56 = *a1 + 224 * *(int *)(*a2 + 8 * v6 + 4);
        v57 = *(char *)(v56 + 23);
        if (v57 >= 0)
          v58 = *a1 + 224 * *(int *)(*a2 + 8 * v6 + 4);
        else
          v58 = *(_QWORD *)v56;
        if (v57 >= 0)
          v59 = *(unsigned __int8 *)(v56 + 23);
        else
          v59 = *(_QWORD *)(v56 + 8);
        v60 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v55, v58, v59);
        v61 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v60, (uint64_t)"\" -> ", 5);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v61, (uint64_t)"[", 1);
        v62 = (_QWORD *)std::ostream::operator<<();
        v63 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v62, (uint64_t)"] ", 2);
        v64 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v63, (uint64_t)"\"", 1);
        v65 = *a3 + 224 * v6;
        v66 = *(char *)(v65 + 23);
        if (v66 >= 0)
          v67 = *a3 + 224 * v6;
        else
          v67 = *(_QWORD *)v65;
        if (v66 >= 0)
          v68 = *(unsigned __int8 *)(v65 + 23);
        else
          v68 = *(_QWORD *)(v65 + 8);
        v69 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v64, v67, v68);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v69, (uint64_t)"\"", 1);
        quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)__p);
      }
      if (SHIBYTE(v91.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v91.__r_.__value_.__l.__data_);
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__str.__r_.__value_.__l.__data_);
      ++v6;
      v3 = *a3;
    }
    while (0x6DB6DB6DB6DB6DB7 * ((a3[1] - *a3) >> 5) > v6);
  }
}

void sub_1AD8C4B94(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  uint64_t v18;

  if (*(char *)(v18 - 137) < 0)
    operator delete(*(void **)(v18 - 160));
  if (*(char *)(v18 - 113) < 0)
    operator delete(*(void **)(v18 - 136));
  _Unwind_Resume(exception_object);
}

void quasar::InverseTextNormalizer::removeEmptyTokens(uint64_t a1, _QWORD *a2, uint64_t a3, void **a4, uint64_t a5, std::vector<unsigned int>::pointer *a6)
{
  unint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  int v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  int *v17;
  int v18;
  unint64_t v19;
  _QWORD *v20;
  int v21;
  _BYTE *v22;
  unint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  _BYTE *v26;
  int *v27;
  int *v28;
  int v29;
  int v30;
  int v31;
  _QWORD *v32;
  _QWORD *v33;
  _QWORD *v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  int v49;
  uint64_t v50;
  unint64_t v51;
  _DWORD *v52;
  _DWORD *v53;
  _DWORD *v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  unint64_t v58;
  char *v59;
  char *v60;
  int v61;
  unint64_t v62;
  unint64_t v63;
  int *v64;
  int v65;
  void *v66;
  std::vector<unsigned int>::pointer begin;
  std::vector<unsigned int>::pointer end;
  unsigned int *v69;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  std::vector<unsigned int> v89;
  __int128 v90;
  void *v91;
  __int128 v92;
  uint64_t v93;
  _QWORD *v94;

  v10 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(a2[1] - *a2) >> 5);
  LOBYTE(v72) = 0;
  std::vector<BOOL>::vector(&v94, v10, (unsigned __int8 *)&v72);
  v11 = *(_BYTE **)a3;
  if (*(_QWORD *)(a3 + 8) != *(_QWORD *)a3)
  {
    v12 = 0;
    v13 = 0;
    while (1)
    {
      v14 = &v11[224 * v12];
      v15 = v14[23];
      if (v14[23] < 0)
      {
        if (*((_QWORD *)v14 + 1))
          goto LABEL_9;
      }
      else if (v14[23])
      {
        goto LABEL_9;
      }
      if (v11[224 * v12 + 44])
      {
        MEMORY[0x1AF44C914]();
        v11 = *(_BYTE **)a3;
        v16 = *(_QWORD *)a3 + 224 * v12;
        *(_BYTE *)(v16 + 44) = 0;
        v15 = *(unsigned __int8 *)(v16 + 23);
      }
LABEL_9:
      if ((v15 & 0x80) != 0)
      {
        if (*(_QWORD *)&v11[224 * v12 + 8])
        {
LABEL_13:
          ++v13;
          v17 = (int *)((char *)*a4 + 8 * v12);
          v18 = v17[1];
          v19 = *v17;
          if ((int)v19 <= v18)
          {
            v20 = v94;
            v21 = v18 - v19 + 1;
            do
            {
              *(_QWORD *)((char *)v20 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
              ++v19;
              --v21;
            }
            while (v21);
          }
        }
      }
      else if (v15)
      {
        goto LABEL_13;
      }
      if (0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(a3 + 8) - (_QWORD)v11) >> 5) <= (unint64_t)++v12)
        goto LABEL_19;
    }
  }
  v13 = 0;
LABEL_19:
  std::vector<quasar::Token>::vector(&v92, v13);
  *(_QWORD *)&v72 = 0x800000007FFFFFFFLL;
  std::vector<std::pair<int,int>>::vector(&v90, v13, &v72);
  memset(&v89, 0, sizeof(v89));
  if (*a6 != a6[1])
    std::vector<int>::resize(&v89, v13);
  v22 = *(_BYTE **)a3;
  if (*(_QWORD *)(a3 + 8) != *(_QWORD *)a3)
  {
    v23 = 0;
    v24 = (_QWORD *)(a1 + 424);
    LODWORD(v25) = -1;
    do
    {
      v26 = &v22[224 * v23];
      if ((char)v26[23] < 0)
      {
        if (!*((_QWORD *)v26 + 1))
        {
LABEL_32:
          if (quasar::gLogLevel >= 5)
          {
            v87 = 0u;
            v88 = 0u;
            v85 = 0u;
            v86 = 0u;
            v83 = 0u;
            v84 = 0u;
            v81 = 0u;
            v82 = 0u;
            v79 = 0u;
            v80 = 0u;
            v77 = 0u;
            v78 = 0u;
            v75 = 0u;
            v76 = 0u;
            v73 = 0u;
            v74 = 0u;
            v72 = 0u;
            kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v72);
            v32 = (_QWORD *)std::ostream::operator<<();
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)" ", 1);
            v33 = (_QWORD *)std::ostream::operator<<();
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, (uint64_t)" ", 1);
            std::ostream::operator<<();
            quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&v72);
          }
          if ((v94[v23 >> 6] & (1 << v23)) == 0)
          {
            if (std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>(v24, (unsigned __int8 *)(*a2 + 224 * v23))|| (v25 & 0x80000000) != 0)
            {
              v42 = (int)v25 + 1;
              if ((int)v42 >= v13)
              {
                v50 = a5;
                v52 = *(_DWORD **)(a5 + 8);
                v51 = *(_QWORD *)(a5 + 16);
                if ((unint64_t)v52 >= v51)
                {
                  v54 = *(_DWORD **)a5;
                  v55 = ((uint64_t)v52 - *(_QWORD *)a5) >> 2;
                  v56 = v55 + 1;
                  if ((unint64_t)(v55 + 1) >> 62)
                    std::vector<int>::__throw_length_error[abi:ne180100]();
                  v57 = v51 - (_QWORD)v54;
                  if (v57 >> 1 > v56)
                    v56 = v57 >> 1;
                  if ((unint64_t)v57 >= 0x7FFFFFFFFFFFFFFCLL)
                    v58 = 0x3FFFFFFFFFFFFFFFLL;
                  else
                    v58 = v56;
                  if (v58)
                  {
                    v59 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(a5 + 16, v58);
                    v54 = *(_DWORD **)a5;
                    v52 = *(_DWORD **)(a5 + 8);
                  }
                  else
                  {
                    v59 = 0;
                  }
                  v60 = &v59[4 * v55];
                  *(_DWORD *)v60 = v23;
                  v53 = v60 + 4;
                  while (v52 != v54)
                  {
                    v61 = *--v52;
                    *((_DWORD *)v60 - 1) = v61;
                    v60 -= 4;
                  }
                  *(_QWORD *)a5 = v60;
                  *(_QWORD *)(a5 + 8) = v53;
                  *(_QWORD *)(a5 + 16) = &v59[4 * v58];
                  if (v54)
                    operator delete(v54);
                  v50 = a5;
                }
                else
                {
                  *v52 = v23;
                  v53 = v52 + 1;
                }
                *(_QWORD *)(v50 + 8) = v53;
              }
              else
              {
                if (quasar::gLogLevel >= 5)
                {
                  v87 = 0u;
                  v88 = 0u;
                  v85 = 0u;
                  v86 = 0u;
                  v83 = 0u;
                  v84 = 0u;
                  v81 = 0u;
                  v82 = 0u;
                  v79 = 0u;
                  v80 = 0u;
                  v77 = 0u;
                  v78 = 0u;
                  v75 = 0u;
                  v76 = 0u;
                  v73 = 0u;
                  v74 = 0u;
                  v72 = 0u;
                  kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v72);
                  v43 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v72, (uint64_t)"Merging pre-token ", 18);
                  v44 = *a2 + 224 * v23;
                  v45 = *(char *)(v44 + 23);
                  if (v45 >= 0)
                    v46 = *a2 + 224 * v23;
                  else
                    v46 = *(_QWORD *)v44;
                  if (v45 >= 0)
                    v47 = *(unsigned __int8 *)(v44 + 23);
                  else
                    v47 = *(_QWORD *)(v44 + 8);
                  v48 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, v46, v47);
                  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v48, (uint64_t)" to next post token", 19);
                  quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&v72);
                }
                v49 = *(_DWORD *)(v90 + 8 * v42);
                if (v49 >= (int)v23)
                  v49 = v23;
                *(_DWORD *)(v90 + 8 * v42) = v49;
              }
              v24 = (_QWORD *)(a1 + 424);
            }
            else
            {
              if (quasar::gLogLevel >= 5)
              {
                v87 = 0u;
                v88 = 0u;
                v85 = 0u;
                v86 = 0u;
                v83 = 0u;
                v84 = 0u;
                v81 = 0u;
                v82 = 0u;
                v79 = 0u;
                v80 = 0u;
                v77 = 0u;
                v78 = 0u;
                v75 = 0u;
                v76 = 0u;
                v73 = 0u;
                v74 = 0u;
                v72 = 0u;
                kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v72);
                v34 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v72, (uint64_t)"Merging pre-token ", 18);
                v35 = *a2 + 224 * v23;
                v36 = *(char *)(v35 + 23);
                if (v36 >= 0)
                  v37 = *a2 + 224 * v23;
                else
                  v37 = *(_QWORD *)v35;
                if (v36 >= 0)
                  v38 = *(unsigned __int8 *)(v35 + 23);
                else
                  v38 = *(_QWORD *)(v35 + 8);
                v39 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, v37, v38);
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v39, (uint64_t)" to previous post token", 23);
                quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&v72);
              }
              v40 = v90 + 8 * v25;
              v41 = *(_DWORD *)(v40 + 4);
              if ((int)v23 > v41)
                v41 = v23;
              *(_DWORD *)(v40 + 4) = v41;
            }
            v94[v23 >> 6] |= 1 << v23;
          }
          goto LABEL_81;
        }
      }
      else if (!v26[23])
      {
        goto LABEL_32;
      }
      v25 = (int)v25 + 1;
      quasar::Token::operator=(v92 + 224 * v25, (__int128 *)v26);
      v27 = (int *)((char *)*a4 + 8 * v23);
      v28 = (int *)(v90 + 8 * v25);
      v29 = *v27;
      v30 = v28[1];
      if (*v28 < *v27)
        v29 = *v28;
      *v28 = v29;
      v31 = v27[1];
      if (v31 <= v30)
        v31 = v30;
      v28[1] = v31;
      if (v89.__begin_ != v89.__end_)
        v89.__begin_[v25] = (*a6)[v23];
LABEL_81:
      ++v23;
      v22 = *(_BYTE **)a3;
    }
    while (0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 5) > v23);
  }
  if (*((_QWORD *)&v90 + 1) - (_QWORD)v90 >= 9uLL)
  {
    v62 = (uint64_t)(*((_QWORD *)&v90 + 1) - v90) >> 3;
    if (v62 <= 2)
      v62 = 2;
    v63 = v62 - 1;
    v64 = (int *)(v90 + 4);
    do
    {
      v65 = v64[1] - 1;
      if (v65 >= *v64)
        v65 = *v64;
      *v64 = v65;
      v64 += 2;
      --v63;
    }
    while (v63);
  }
  std::vector<quasar::Token>::__vdeallocate((void **)a3);
  *(_OWORD *)a3 = v92;
  *(_QWORD *)(a3 + 16) = v93;
  v93 = 0;
  v92 = 0uLL;
  v66 = *a4;
  if (*a4)
  {
    a4[1] = v66;
    operator delete(v66);
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
  }
  *(_OWORD *)a4 = v90;
  a4[2] = v91;
  v91 = 0;
  v90 = 0uLL;
  begin = v89.__begin_;
  end = v89.__end_;
  if (v89.__begin_ == v89.__end_)
  {
    if (v89.__begin_)
    {
      v89.__end_ = v89.__begin_;
      operator delete(v89.__begin_);
    }
  }
  else
  {
    v69 = *a6;
    if (*a6)
    {
      a6[1] = v69;
      operator delete(v69);
      *a6 = 0;
      a6[1] = 0;
      a6[2] = 0;
      begin = v89.__begin_;
      end = v89.__end_;
    }
    *a6 = begin;
    a6[1] = end;
    a6[2] = v89.__end_cap_.__value_;
  }
  if ((_QWORD)v90)
  {
    *((_QWORD *)&v90 + 1) = v90;
    operator delete((void *)v90);
  }
  *(_QWORD *)&v72 = &v92;
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&v72);
  if (v94)
    operator delete(v94);
}

void sub_1AD8C52C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void **a15)
{
  uint64_t v15;
  void *v17;
  void *v18;
  void *v19;

  v17 = *(void **)(v15 - 200);
  if (v17)
  {
    *(_QWORD *)(v15 - 192) = v17;
    operator delete(v17);
  }
  v18 = *(void **)(v15 - 176);
  if (v18)
  {
    *(_QWORD *)(v15 - 168) = v18;
    operator delete(v18);
  }
  a15 = (void **)(v15 - 144);
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100](&a15);
  v19 = *(void **)(v15 - 112);
  if (v19)
    operator delete(v19);
  _Unwind_Resume(a1);
}

uint64_t quasar::Token::operator=(uint64_t a1, __int128 *a2)
{
  __int128 v4;
  uint64_t v5;
  void **v6;
  __int128 v7;
  void **v8;
  __int128 v9;
  void **v10;
  __int128 v11;
  __int16 v12;
  void **v13;
  __int128 v14;
  __int128 v15;

  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  v4 = *a2;
  *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
  *(_OWORD *)a1 = v4;
  *((_BYTE *)a2 + 23) = 0;
  *(_BYTE *)a2 = 0;
  v5 = *(_QWORD *)((char *)a2 + 38);
  *(_OWORD *)(a1 + 24) = *(__int128 *)((char *)a2 + 24);
  *(_QWORD *)(a1 + 38) = v5;
  v6 = (void **)(a1 + 48);
  if (*(char *)(a1 + 71) < 0)
    operator delete(*v6);
  v7 = a2[3];
  *(_QWORD *)(a1 + 64) = *((_QWORD *)a2 + 8);
  *(_OWORD *)v6 = v7;
  *((_BYTE *)a2 + 71) = 0;
  *((_BYTE *)a2 + 48) = 0;
  std::vector<std::string>::__vdeallocate((std::vector<std::wstring> *)(a1 + 72));
  *(_OWORD *)(a1 + 72) = *(__int128 *)((char *)a2 + 72);
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 11);
  *((_QWORD *)a2 + 9) = 0;
  *((_QWORD *)a2 + 10) = 0;
  *((_QWORD *)a2 + 11) = 0;
  v8 = (void **)(a1 + 96);
  if (*(char *)(a1 + 119) < 0)
    operator delete(*v8);
  v9 = a2[6];
  *(_QWORD *)(a1 + 112) = *((_QWORD *)a2 + 14);
  *(_OWORD *)v8 = v9;
  *((_BYTE *)a2 + 119) = 0;
  *((_BYTE *)a2 + 96) = 0;
  std::vector<std::pair<std::string,float>>::__vdeallocate((uint64_t *)(a1 + 120));
  *(_OWORD *)(a1 + 120) = *(__int128 *)((char *)a2 + 120);
  *(_QWORD *)(a1 + 136) = *((_QWORD *)a2 + 17);
  *((_QWORD *)a2 + 15) = 0;
  *((_QWORD *)a2 + 16) = 0;
  *((_QWORD *)a2 + 17) = 0;
  v10 = (void **)(a1 + 144);
  if (*(char *)(a1 + 167) < 0)
    operator delete(*v10);
  v11 = a2[9];
  *(_QWORD *)(a1 + 160) = *((_QWORD *)a2 + 20);
  *(_OWORD *)v10 = v11;
  *((_BYTE *)a2 + 167) = 0;
  *((_BYTE *)a2 + 144) = 0;
  v12 = *((_WORD *)a2 + 86);
  *(_DWORD *)(a1 + 168) = *((_DWORD *)a2 + 42);
  *(_WORD *)(a1 + 172) = v12;
  v13 = (void **)(a1 + 176);
  if (*(char *)(a1 + 199) < 0)
    operator delete(*v13);
  v14 = a2[11];
  *(_QWORD *)(a1 + 192) = *((_QWORD *)a2 + 24);
  *(_OWORD *)v13 = v14;
  *((_BYTE *)a2 + 199) = 0;
  *((_BYTE *)a2 + 176) = 0;
  v15 = *(__int128 *)((char *)a2 + 200);
  *(_DWORD *)(a1 + 216) = *((_DWORD *)a2 + 54);
  *(_OWORD *)(a1 + 200) = v15;
  return a1;
}

void quasar::InverseTextNormalizer::createSeparateAutoPunctuationTokens(quasar::InverseTextNormalizer *a1, void **a2, void **a3, _QWORD *a4)
{
  void **v4;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int *v12;
  int *v13;
  int v14;
  int *v15;
  uint64_t v16;
  quasar::InverseTextNormalizer *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int *v21;
  int *v22;
  int v23;
  int *v24;
  uint64_t v25;
  quasar::InverseTextNormalizer *v26;
  std::basic_string<char32_t>::size_type v27;
  char *v28;
  uint64_t v29;
  std::basic_string<char32_t>::size_type size;
  char *v31;
  std::string *v32;
  std::string *v33;
  uint64_t v34;
  std::basic_string<char32_t>::size_type v35;
  const quasar::Token *v36;
  std::string *v37;
  std::string *v38;
  uint64_t v39;
  std::basic_string<char32_t>::size_type v40;
  char *v41;
  std::string::value_type *v42;
  __int128 v43;
  std::basic_string<char32_t>::size_type v44;
  std::basic_string<char32_t> *v45;
  uint64_t v46;
  std::basic_string<char32_t>::size_type v47;
  char *v48;
  quasar::InverseTextNormalizer *v49;
  std::string::value_type *v50;
  __int128 v51;
  std::string *v52;
  uint64_t v53;
  std::basic_string<char32_t>::size_type v54;
  std::basic_string<char32_t>::size_type v55;
  char *v56;
  unsigned __int8 *v57;
  std::string *v58;
  std::string *v59;
  unint64_t v60;
  unint64_t v61;
  quasar::InverseTextNormalizer *v62;
  unsigned int v63;
  quasar::InverseTextNormalizer *isAutoPunctuation;
  std::string *v65;
  std::string **v66;
  uint64_t v67;
  std::string::size_type v68;
  std::string *v69;
  int v70;
  std::string *v71;
  std::string *v72;
  std::string **v73;
  uint64_t v74;
  std::string::size_type v75;
  std::string *v76;
  int v77;
  std::string *v78;
  uint64_t v79;
  char *v80;
  int v81;
  int *v82;
  uint64_t v83;
  std::basic_string<char32_t> *v84;
  std::basic_string<char32_t> *v85;
  uint64_t v86;
  char *v87;
  int v88;
  int *v89;
  uint64_t v90;
  std::basic_string<char32_t> *p_str;
  char v92;
  const quasar::Token *v93;
  std::basic_string<char32_t>::size_type v94;
  std::basic_string<char32_t>::size_type v95;
  unint64_t v96;
  _BYTE *v97;
  _BYTE *v98;
  char *v99;
  std::basic_string<char32_t>::size_type v100;
  uint64_t v101;
  int v102;
  unint64_t v103;
  unint64_t v104;
  unint64_t v105;
  _BYTE *v106;
  _DWORD *v107;
  char *v108;
  BOOL v109;
  void *v110;
  unsigned __int8 v112;
  uint64_t v113;
  uint64_t v114;
  std::basic_string<char32_t> v115;
  std::basic_string<char32_t> __p;
  std::basic_string<char32_t> __str;
  std::basic_string<char32_t> v118;
  std::string *v119;
  std::string *v120;
  _QWORD v121[3];

  v4 = a3;
  v119 = 0;
  v120 = 0;
  v121[0] = 0;
  if (a2[1] == *a2)
  {
    v96 = 0;
    memset(&v118, 0, sizeof(v118));
  }
  else
  {
    v7 = 0;
    v8 = 172;
    do
    {
      v9 = quasar::InverseTextNormalizer::char32Converter(a1);
      v10 = (uint64_t)*a2 + v8;
      v13 = *(int **)(v10 - 172);
      v11 = v10 - 172;
      v12 = v13;
      v14 = *(char *)(v11 + 23);
      if (v14 >= 0)
        v15 = (int *)v11;
      else
        v15 = v12;
      if (v14 >= 0)
        v16 = *(unsigned __int8 *)(v11 + 23);
      else
        v16 = *(_QWORD *)(v11 + 8);
      std::wstring_convert<std::codecvt_utf8<char32_t,1114111ul,(std::codecvt_mode)0>,char32_t,std::allocator<char32_t>,std::allocator<char>>::from_bytes(v9, v15, (int *)((char *)v15 + v16), &v118);
      v18 = quasar::InverseTextNormalizer::char32Converter(v17);
      v19 = (uint64_t)*a2 + v8;
      v22 = *(int **)(v19 - 172);
      v20 = v19 - 172;
      v21 = v22;
      v23 = *(char *)(v20 + 23);
      if (v23 >= 0)
        v24 = (int *)v20;
      else
        v24 = v21;
      if (v23 >= 0)
        v25 = *(unsigned __int8 *)(v20 + 23);
      else
        v25 = *(_QWORD *)(v20 + 8);
      std::wstring_convert<std::codecvt_utf8<char32_t,1114111ul,(std::codecvt_mode)0>,char32_t,std::allocator<char32_t>,std::allocator<char>>::from_bytes(v18, v24, (int *)((char *)v24 + v25), &__str);
      v27 = *(int *)(*a4 + 4 * v7);
      v28 = (char *)*a2;
      if (*((_BYTE *)*a2 + v8 + 1))
      {
        v29 = quasar::InverseTextNormalizer::char32Converter(v26);
        std::basic_string<char32_t>::basic_string(&v115, &__str, 0, v27, (std::allocator<char32_t> *)((char *)&v114 + 4));
        size = HIBYTE(v115.__r_.__value_.__r.__words[2]);
        if ((v115.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v31 = (char *)&v115;
        else
          v31 = (char *)v115.__r_.__value_.__r.__words[0];
        if ((v115.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          size = v115.__r_.__value_.__l.__size_;
        std::wstring_convert<std::codecvt_utf8<char32_t,1114111ul,(std::codecvt_mode)0>,char32_t,std::allocator<char32_t>,std::allocator<char>>::to_bytes(v29, v31, &v31[4 * size], (std::string *)&__p);
        v113 = 0;
        v114 = 0;
        v112 = 0;
        v32 = v120;
        if ((unint64_t)v120 >= v121[0])
        {
          v33 = (std::string *)std::vector<quasar::Token>::__emplace_back_slow_path<std::string,int,int,int,int,BOOL,BOOL &>((uint64_t *)&v119, (uint64_t)&__p, (int *)&v114 + 1, (int *)&v114, (int *)&v113 + 1, (int *)&v113, &v112, (unsigned __int8 *)*a2 + v8 - 127);
        }
        else
        {
          std::allocator<quasar::Token>::construct[abi:ne180100]<quasar::Token,std::string,int,int,int,int,BOOL,BOOL &>((uint64_t)v121, v120, (uint64_t)&__p, (int *)&v114 + 1, (int *)&v114, (int *)&v113 + 1, (int *)&v113, &v112, (unsigned __int8 *)*a2 + v8 - 127);
          v33 = (std::string *)((char *)v32 + 224);
        }
        v120 = v33;
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        if (SHIBYTE(v115.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v115.__r_.__value_.__l.__data_);
        v120[-3].__r_.__value_.__s.__data_[21] = 1;
        v34 = (uint64_t)*a2 + v8;
        *(_BYTE *)(v34 - 127) = 0;
        *(_BYTE *)(v34 + 1) = 0;
        v35 = HIBYTE(v118.__r_.__value_.__r.__words[2]);
        if ((v118.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v35 = v118.__r_.__value_.__l.__size_;
        std::basic_string<char32_t>::basic_string(&__p, &v118, 1uLL, v35 - v27, (std::allocator<char32_t> *)&v115);
        if (SHIBYTE(v118.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v118.__r_.__value_.__l.__data_);
        v118 = __p;
        v28 = (char *)*a2;
      }
      v36 = (const quasar::Token *)&v28[v8 - 172];
      v37 = v120;
      if ((unint64_t)v120 >= v121[0])
      {
        v38 = (std::string *)std::vector<quasar::Token>::__emplace_back_slow_path<quasar::Token&>((uint64_t *)&v119, v36);
      }
      else
      {
        quasar::Token::Token(v120, v36);
        v38 = (std::string *)((char *)v37 + 224);
      }
      v120 = v38;
      v39 = quasar::InverseTextNormalizer::char32Converter((quasar::InverseTextNormalizer *)v38);
      v40 = HIBYTE(v118.__r_.__value_.__r.__words[2]);
      if ((v118.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v41 = (char *)&v118;
      else
        v41 = (char *)v118.__r_.__value_.__r.__words[0];
      if ((v118.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v40 = v118.__r_.__value_.__l.__size_;
      std::wstring_convert<std::codecvt_utf8<char32_t,1114111ul,(std::codecvt_mode)0>,char32_t,std::allocator<char32_t>,std::allocator<char>>::to_bytes(v39, v41, &v41[4 * v40], (std::string *)&__p);
      v42 = &v120[-10].__r_.__value_.__s.__data_[16];
      if (v120[-9].__r_.__value_.__s.__data_[15] < 0)
        operator delete(*(void **)v42);
      v43 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
      *((_QWORD *)v42 + 2) = *((_QWORD *)&__p.__r_.__value_.__l + 2);
      *(_OWORD *)v42 = v43;
      if (*((_BYTE *)*a2 + v8))
      {
        v44 = HIBYTE(v118.__r_.__value_.__r.__words[2]);
        if ((v118.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v44 = v118.__r_.__value_.__l.__size_;
        v45 = std::basic_string<char32_t>::basic_string(&__p, &v118, 0, v44 - v27, (std::allocator<char32_t> *)&v115);
        if (SHIBYTE(v118.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v118.__r_.__value_.__l.__data_);
        v118 = __p;
        v46 = quasar::InverseTextNormalizer::char32Converter((quasar::InverseTextNormalizer *)v45);
        v47 = HIBYTE(v118.__r_.__value_.__r.__words[2]);
        if ((v118.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v48 = (char *)&v118;
        else
          v48 = (char *)v118.__r_.__value_.__r.__words[0];
        if ((v118.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v47 = v118.__r_.__value_.__l.__size_;
        std::wstring_convert<std::codecvt_utf8<char32_t,1114111ul,(std::codecvt_mode)0>,char32_t,std::allocator<char32_t>,std::allocator<char>>::to_bytes(v46, v48, &v48[4 * v47], (std::string *)&__p);
        v50 = &v120[-10].__r_.__value_.__s.__data_[16];
        if (v120[-9].__r_.__value_.__s.__data_[15] < 0)
          operator delete(*(void **)v50);
        v51 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
        *((_QWORD *)v50 + 2) = *((_QWORD *)&__p.__r_.__value_.__l + 2);
        *(_OWORD *)v50 = v51;
        v52 = v120;
        v120[-8].__r_.__value_.__s.__data_[12] = 0;
        v52[-3].__r_.__value_.__s.__data_[20] = 0;
        v53 = quasar::InverseTextNormalizer::char32Converter(v49);
        v54 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
        if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v54 = __str.__r_.__value_.__l.__size_;
        std::basic_string<char32_t>::basic_string(&v115, &__str, v54 - v27, v27, (std::allocator<char32_t> *)((char *)&v114 + 4));
        v55 = HIBYTE(v115.__r_.__value_.__r.__words[2]);
        if ((v115.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v56 = (char *)&v115;
        else
          v56 = (char *)v115.__r_.__value_.__r.__words[0];
        if ((v115.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v55 = v115.__r_.__value_.__l.__size_;
        std::wstring_convert<std::codecvt_utf8<char32_t,1114111ul,(std::codecvt_mode)0>,char32_t,std::allocator<char32_t>,std::allocator<char>>::to_bytes(v53, v56, &v56[4 * v55], (std::string *)&__p);
        v113 = 0;
        v114 = 0;
        v57 = (unsigned __int8 *)*a2 + v8 - 128;
        v112 = 0;
        v58 = v120;
        if ((unint64_t)v120 >= v121[0])
        {
          a1 = (quasar::InverseTextNormalizer *)std::vector<quasar::Token>::__emplace_back_slow_path<std::string,int,int,int,int,BOOL &,BOOL>((uint64_t *)&v119, (uint64_t)&__p, (int *)&v114 + 1, (int *)&v114, (int *)&v113 + 1, (int *)&v113, v57, &v112);
        }
        else
        {
          std::allocator<quasar::Token>::construct[abi:ne180100]<quasar::Token,std::string,int,int,int,int,BOOL &,BOOL>((uint64_t)v121, v120, (uint64_t)&__p, (int *)&v114 + 1, (int *)&v114, (int *)&v113 + 1, (int *)&v113, v57, &v112);
          a1 = (quasar::InverseTextNormalizer *)&v58[9].__r_.__value_.__r.__words[1];
        }
        v120 = (std::string *)a1;
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        if (SHIBYTE(v115.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v115.__r_.__value_.__l.__data_);
        v120[-3].__r_.__value_.__s.__data_[20] = 1;
      }
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__str.__r_.__value_.__l.__data_);
      if (SHIBYTE(v118.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v118.__r_.__value_.__l.__data_);
      ++v7;
      v8 += 224;
    }
    while (0x6DB6DB6DB6DB6DB7 * (((_BYTE *)a2[1] - (_BYTE *)*a2) >> 5) > v7);
    v59 = v119;
    memset(&v118, 0, sizeof(v118));
    if (v120 != v119)
    {
      v60 = 0;
      while (1)
      {
        if (!quasar::Token::isAutoPunctuation((quasar::Token *)((char *)v59 + 224 * v60)))
        {
LABEL_149:
          v93 = (const quasar::Token *)((char *)v119 + 224 * v60);
          v94 = v118.__r_.__value_.__l.__size_;
          if (v118.__r_.__value_.__l.__size_ >= v118.__r_.__value_.__r.__words[2])
          {
            v95 = std::vector<quasar::Token>::__emplace_back_slow_path<quasar::Token&>((uint64_t *)&v118, v93);
          }
          else
          {
            quasar::Token::Token((std::string *)v118.__r_.__value_.__l.__size_, v93);
            v95 = v94 + 224;
          }
          v118.__r_.__value_.__l.__size_ = v95;
          goto LABEL_153;
        }
        if (0x6DB6DB6DB6DB6DB7 * (((char *)v120 - (char *)v119) >> 5) - 1 <= v60
          || (v61 = v60 + 1,
              v62 = (quasar::InverseTextNormalizer *)quasar::Token::isAutoPunctuation((quasar::Token *)&v119[9].__r_.__value_.__r.__words[28 * v60 + 1]),
              (v62 & 1) != 0))
        {
          if (!v60)
            goto LABEL_149;
          v63 = v60 - 1;
          isAutoPunctuation = (quasar::InverseTextNormalizer *)quasar::Token::isAutoPunctuation((quasar::Token *)((char *)v119 + 224 * (v60 - 1)));
          if ((isAutoPunctuation & 1) != 0)
            goto LABEL_149;
          v65 = (std::string *)((char *)v119 + 224 * v60);
          v66 = (std::string **)((char *)v119 + 224 * v63);
          v67 = HIBYTE(v65->__r_.__value_.__r.__words[2]);
          if ((v67 & 0x80u) == 0)
            v68 = HIBYTE(v65->__r_.__value_.__r.__words[2]);
          else
            v68 = v65->__r_.__value_.__l.__size_;
          v69 = (std::string *)*((unsigned __int8 *)v66 + 23);
          v70 = (char)v69;
          if ((char)v69 < 0)
            v69 = v66[1];
          if ((std::string *)v68 == v69)
          {
            if (v70 >= 0)
              v71 = (std::string *)((char *)v119 + 224 * v63);
            else
              v71 = *v66;
            if ((v67 & 0x80) != 0)
            {
              isAutoPunctuation = (quasar::InverseTextNormalizer *)memcmp(v65->__r_.__value_.__l.__data_, v71, v65->__r_.__value_.__l.__size_);
              if (!(_DWORD)isAutoPunctuation)
                goto LABEL_153;
            }
            else
            {
              if (!*((_BYTE *)&v65->__r_.__value_.__s + 23))
                goto LABEL_153;
              while (v65->__r_.__value_.__s.__data_[0] == v71->__r_.__value_.__s.__data_[0])
              {
                v65 = (std::string *)((char *)v65 + 1);
                v71 = (std::string *)((char *)v71 + 1);
                if (!--v67)
                  goto LABEL_153;
              }
            }
          }
          v86 = quasar::InverseTextNormalizer::char32Converter(isAutoPunctuation);
          v87 = (char *)v119 + 224 * v63;
          v88 = v87[23];
          if (v88 >= 0)
            v89 = (int *)((char *)v119 + 224 * v63);
          else
            v89 = *(int **)v87;
          if (v88 >= 0)
            v90 = v87[23];
          else
            v90 = *((_QWORD *)v87 + 1);
          std::wstring_convert<std::codecvt_utf8<char32_t,1114111ul,(std::codecvt_mode)0>,char32_t,std::allocator<char32_t>,std::allocator<char>>::from_bytes(v86, v89, (int *)((char *)v89 + v90), &__str);
          if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
          {
            if (__str.__r_.__value_.__l.__size_ != 1)
              goto LABEL_144;
            p_str = (std::basic_string<char32_t> *)__str.__r_.__value_.__r.__words[0];
          }
          else
          {
            if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) != 1)
              goto LABEL_144;
            p_str = &__str;
          }
          if (!u_ispunct(p_str->__r_.__value_.__s.__data_[0]))
            goto LABEL_144;
          if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v85 = &__str;
          else
            v85 = (std::basic_string<char32_t> *)__str.__r_.__value_.__r.__words[0];
        }
        else
        {
          v72 = (std::string *)((char *)v119 + 224 * v60);
          v73 = (std::string **)((char *)v119 + 224 * v61);
          v74 = HIBYTE(v72->__r_.__value_.__r.__words[2]);
          if ((v74 & 0x80u) == 0)
            v75 = HIBYTE(v72->__r_.__value_.__r.__words[2]);
          else
            v75 = v72->__r_.__value_.__l.__size_;
          v76 = (std::string *)*((unsigned __int8 *)v73 + 23);
          v77 = (char)v76;
          if ((char)v76 < 0)
            v76 = v73[1];
          if ((std::string *)v75 == v76)
          {
            if (v77 >= 0)
              v78 = (std::string *)((char *)v119 + 224 * v61);
            else
              v78 = *v73;
            if ((v74 & 0x80) != 0)
            {
              v62 = (quasar::InverseTextNormalizer *)memcmp(v72->__r_.__value_.__l.__data_, v78, v72->__r_.__value_.__l.__size_);
              if (!(_DWORD)v62)
                goto LABEL_153;
            }
            else
            {
              if (!*((_BYTE *)&v72->__r_.__value_.__s + 23))
                goto LABEL_153;
              while (v72->__r_.__value_.__s.__data_[0] == v78->__r_.__value_.__s.__data_[0])
              {
                v72 = (std::string *)((char *)v72 + 1);
                v78 = (std::string *)((char *)v78 + 1);
                if (!--v74)
                  goto LABEL_153;
              }
            }
          }
          v79 = quasar::InverseTextNormalizer::char32Converter(v62);
          v80 = (char *)v119 + 224 * v61;
          v81 = v80[23];
          if (v81 >= 0)
            v82 = (int *)((char *)v119 + 224 * v61);
          else
            v82 = *(int **)v80;
          if (v81 >= 0)
            v83 = v80[23];
          else
            v83 = *((_QWORD *)v80 + 1);
          std::wstring_convert<std::codecvt_utf8<char32_t,1114111ul,(std::codecvt_mode)0>,char32_t,std::allocator<char32_t>,std::allocator<char>>::from_bytes(v79, v82, (int *)((char *)v82 + v83), &__str);
          if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
          {
            if (__str.__r_.__value_.__l.__size_ != 1)
              goto LABEL_144;
            v84 = (std::basic_string<char32_t> *)__str.__r_.__value_.__r.__words[0];
          }
          else
          {
            if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) != 1)
              goto LABEL_144;
            v84 = &__str;
          }
          if (!u_ispunct(v84->__r_.__value_.__s.__data_[0]))
            goto LABEL_144;
          if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v85 = &__str;
          else
            v85 = (std::basic_string<char32_t> *)__str.__r_.__value_.__r.__words[0];
        }
        if ((quasar::isCJK(v85->__r_.__value_.__s.__data_[0]) & 1) != 0)
        {
          v92 = 0;
          goto LABEL_145;
        }
LABEL_144:
        v92 = 1;
LABEL_145:
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(__str.__r_.__value_.__l.__data_);
          if ((v92 & 1) != 0)
            goto LABEL_149;
        }
        else if ((v92 & 1) != 0)
        {
          goto LABEL_149;
        }
LABEL_153:
        ++v60;
        v59 = v119;
        if (0x6DB6DB6DB6DB6DB7 * (((char *)v120 - (char *)v119) >> 5) <= v60)
        {
          v96 = 0x6DB6DB6DB6DB6DB7
              * ((uint64_t)(v118.__r_.__value_.__l.__size_ - v118.__r_.__value_.__r.__words[0]) >> 5);
          goto LABEL_157;
        }
      }
    }
    v96 = 0;
LABEL_157:
    v4 = a3;
  }
  __p.__r_.__value_.__r.__words[0] = 0x800000007FFFFFFFLL;
  std::vector<std::pair<int,int>>::vector(&__str, v96, &__p);
  v98 = *a2;
  v97 = a2[1];
  v99 = (char *)*v4;
  v100 = __str.__r_.__value_.__r.__words[0];
  if (v118.__r_.__value_.__l.__size_ != v118.__r_.__value_.__r.__words[0] || v97 != v98)
  {
    v101 = 0;
    v102 = 0;
    v103 = 0;
    v104 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v118.__r_.__value_.__l.__size_ - v118.__r_.__value_.__r.__words[0]) >> 5);
    v105 = 0x6DB6DB6DB6DB6DB7 * ((v97 - v98) >> 5);
    v106 = (_BYTE *)(v118.__r_.__value_.__r.__words[0] + 173);
    v107 = (_DWORD *)__str.__r_.__value_.__r.__words[0];
    do
    {
      if (v103 && *(v106 - 1))
      {
        v108 = (char *)(v100 + 8 * (v103 - 1));
      }
      else
      {
        if (*v106)
          v109 = v104 - 1 > v103;
        else
          v109 = 0;
        if (!v109)
          ++v102;
        v108 = &v99[8 * v101];
      }
      *v107 = *(_DWORD *)v108;
      ++v103;
      v107[1] = *((_DWORD *)v108 + 1);
      v101 = v102;
      v106 += 224;
      v107 += 2;
    }
    while (v104 > v103 || v105 > v102);
  }
  std::vector<quasar::Token>::__vdeallocate(a2);
  *(std::basic_string<char32_t> *)a2 = v118;
  memset(&v118, 0, sizeof(v118));
  v110 = *v4;
  if (*v4)
  {
    v4[1] = v110;
    operator delete(v110);
    *v4 = 0;
    v4[1] = 0;
    v4[2] = 0;
  }
  *(std::basic_string<char32_t> *)v4 = __str;
  __str.__r_.__value_.__r.__words[0] = (std::basic_string<char32_t>::size_type)&v118;
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
  v118.__r_.__value_.__r.__words[0] = (std::basic_string<char32_t>::size_type)&v119;
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&v118);
}

void sub_1AD8C5E14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void **__p,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39)
{
  uint64_t v39;

  if (a32 < 0)
    operator delete(__p);
  __p = &a34;
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100](&__p);
  a34 = (void *)(v39 - 120);
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&a34);
  _Unwind_Resume(a1);
}

void quasar::InverseTextNormalizer::removeTrailingFormalAutoPunctuation(uint64_t a1, uint64_t *a2, const void **a3, char a4)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  unsigned __int8 *v16;
  unint64_t v17;
  uint64_t v18;

  v4 = *(_QWORD *)(a1 + 776);
  if (v4)
  {
    v8 = std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::find<std::string>(v4 + 256, a3);
    if ((a4 & 1) != 0 && v4 + 264 != v8)
    {
      v9 = a2[1];
      if (*a2 != v9
        && quasar::Token::isAutoPunctuation((quasar::Token *)(v9 - 224))
        && std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>((_QWORD *)(*(_QWORD *)(a1 + 776) + 376), (unsigned __int8 *)(a2[1] - 224)))
      {
        v10 = *(_QWORD *)(a1 + 776);
        v11 = *a2;
        v12 = a2[1];
        if (v12 - *a2 == 224)
        {
LABEL_14:
          v17 = *(unsigned int *)(v10 + 368);
          if ((v17 & 0x80000000) != 0 || 0x6DB6DB6DB6DB6DB7 * ((v12 - v11) >> 5) <= v17)
          {
            quasar::Token::~Token((void **)(v12 - 224));
            a2[1] = v18;
            if (*a2 != v18)
              *(_BYTE *)(v12 - 404) = 0;
          }
        }
        else
        {
          v13 = 0;
          v14 = 0;
          v15 = (_QWORD *)(v10 + 416);
          while (1)
          {
            v16 = std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>(v15, (unsigned __int8 *)(v11 + v13));
            v11 = *a2;
            if (v16)
            {
              if (std::string::compare((const std::string *)(v11 + v13), "."))
                break;
              v11 = *a2;
              if (*(_BYTE *)(*a2 + v13 + 44))
                break;
            }
            ++v14;
            v12 = a2[1];
            v13 += 224;
            if (0x6DB6DB6DB6DB6DB7 * ((v12 - v11) >> 5) - 1 <= v14)
            {
              v10 = *(_QWORD *)(a1 + 776);
              goto LABEL_14;
            }
          }
        }
      }
    }
  }
}

uint64_t quasar::InverseTextNormalizer::isEnableAutoPunctuation(uint64_t a1, const void **a2, char a3)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 776);
  if (!v3)
    return 0;
  if (v3 + 264 == std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::find<std::string>(v3 + 256, a2))return 0;
  return a3 & 1;
}

double quasar::InverseTextNormalizer::getEndsOfSentencePunctuations@<D0>(quasar::InverseTextNormalizer *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  double result;

  v2 = *((_QWORD *)this + 97);
  if (v2)
  {
    std::unordered_set<std::string>::unordered_set(a2, v2 + 416);
  }
  else
  {
    result = 0.0;
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
    *(_DWORD *)(a2 + 32) = 1065353216;
  }
  return result;
}

void quasar::InverseTextNormalizer::runChunk(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, const void **a4@<X3>, char a5@<W4>, int a6@<W5>, _QWORD *a7@<X8>)
{
  unint64_t v8;
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  std::string::size_type v37;
  std::string::size_type v38;
  unint64_t *v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t *v42;
  void *v43;
  unint64_t *v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t *v49;
  unint64_t v50;
  uint64_t v51;
  unint64_t *v52;
  unint64_t v53;
  uint64_t v54;
  _DWORD *v55;
  std::string::size_type size;
  _DWORD *v57;
  int *v58;
  int v59;
  uint64_t v60;
  uint64_t v62;
  uint64_t v63;
  std::string *v64;
  __int128 v65;
  _DWORD *v66;
  int *v67;
  _DWORD *v68;
  int *v69;
  int v70;
  uint64_t v71;
  uint64_t v73;
  std::string *v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  BOOL v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  int v82;
  int *v83;
  uint64_t v84;
  quasar::InverseTextNormalizer *v85;
  uint64_t v86;
  uint64_t v87;
  int v88;
  int *v89;
  uint64_t v90;
  std::basic_string<char32_t> *v91;
  std::basic_string<char32_t> *v92;
  std::basic_string<char32_t> *v93;
  std::basic_string<char32_t> *v94;
  std::basic_string<char32_t> *v95;
  std::basic_string<char32_t> *v96;
  std::basic_string<char32_t> *v97;
  uint64_t v98;
  std::basic_string<char32_t>::size_type v99;
  char *v100;
  unsigned __int8 *v101;
  unsigned __int8 *v102;
  uint64_t v103;
  uint64_t v104;
  std::__shared_weak_count *v105;
  unint64_t *v106;
  unint64_t v107;
  std::basic_string<char32_t>::size_type v108;
  unint64_t v109;
  unint64_t v110;
  std::basic_string<char32_t>::size_type v111;
  uint64_t v112;
  std::basic_string<char32_t>::size_type v113;
  char *v114;
  unint64_t v115;
  __int128 v116;
  uint64_t v117;
  uint64_t v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  _QWORD *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  std::string::size_type v127;
  unint64_t *v128;
  unint64_t v129;
  std::__shared_weak_count *v130;
  unint64_t *v131;
  unint64_t v132;
  uint64_t v133;
  uint64_t v134;
  std::__shared_weak_count *v135;
  unint64_t *v136;
  unint64_t v137;
  char *v138;
  uint64_t v139;
  uint64_t v140;
  std::basic_string<char32_t>::size_type v141;
  std::basic_string<char32_t>::size_type v142;
  std::basic_string<char32_t> *v143;
  std::basic_string<char32_t> *v144;
  std::basic_string<char32_t> *v145;
  std::basic_string<char32_t> *v146;
  int v147;
  int v148;
  std::basic_string<char32_t>::value_type v149;
  std::basic_string<char32_t>::size_type v150;
  std::basic_string<char32_t>::size_type v151;
  std::basic_string<char32_t> *v152;
  std::basic_string<char32_t> *v153;
  uint64_t v154;
  std::basic_string<char32_t>::size_type v155;
  std::basic_string<char32_t>::size_type v156;
  uint64_t isAutoPunctuation;
  uint64_t v158;
  char v159;
  std::string::size_type v160;
  void *v161;
  int v162;
  void **v163;
  uint64_t v164;
  std::string *v165;
  int v166;
  int v167;
  int v168;
  _BOOL4 v169;
  unsigned __int8 *v171;
  unsigned __int8 **v172;
  uint64_t v173;
  unsigned __int8 *v174;
  unsigned __int8 *v175;
  int v176;
  unsigned __int8 *v177;
  _BOOL8 v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  int *v183;
  quasar::CommandTransform *isUWhiteSpace;
  BOOL v185;
  void *v186;
  unint64_t v187;
  _DWORD *v188;
  void *v189;
  uint64_t v190;
  int v191;
  uint64_t v192;
  void **v193;
  void **v194;
  uint64_t v195;
  unint64_t v196;
  char *v197;
  __int128 v198;
  uint64_t v199;
  uint64_t v200;
  __int32 *v201;
  __int32 *v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  int *v208;
  quasar::CommandTransform *v209;
  BOOL v210;
  void *v211;
  unint64_t v212;
  _DWORD *v213;
  void *v214;
  void **v215;
  void **v216;
  uint64_t v217;
  unint64_t v218;
  char *v219;
  __int128 v220;
  uint64_t v221;
  std::basic_string<char32_t>::size_type v222;
  uint64_t v223;
  std::basic_string<char32_t>::size_type v224;
  std::basic_string<char32_t> *v225;
  _BOOL4 v226;
  std::basic_string<char32_t>::size_type v227;
  std::basic_string<char32_t>::size_type v228;
  uint64_t v229;
  uint64_t v230;
  char v231;
  _QWORD *v232;
  _QWORD *v233;
  _QWORD *v234;
  uint64_t v235;
  uint64_t v236;
  int v237;
  uint64_t v238;
  uint64_t v239;
  _QWORD *v240;
  _QWORD *v241;
  int v242;
  uint64_t v243;
  uint64_t v244;
  _QWORD *v245;
  _QWORD *v246;
  int v247;
  uint64_t v248;
  uint64_t v249;
  _QWORD *v250;
  uint64_t v251;
  unint64_t v252;
  _QWORD *v253;
  _QWORD *v254;
  _QWORD *v255;
  void *v256;
  uint64_t v257;
  uint64_t v258;
  int v259;
  uint64_t v260;
  uint64_t v261;
  int v262;
  int Commands;
  uint64_t *v264;
  void *v265[2];
  __int128 v266;
  int v267;
  void *v268;
  char v269;
  uint64_t v270;
  std::string __x[2];
  void *v272[2];
  _QWORD v273[4];
  void *v274[2];
  _QWORD v275[4];
  void *v276[2];
  __int128 v277;
  void *__p[2];
  _OWORD v279[2];
  __int128 v280;
  __int128 v281;
  __int128 v282;
  void *v283[2];
  char v284;
  __int128 *v285[3];
  void *v286[2];
  char v287;
  void *v288[2];
  char v289;
  std::string v290;
  uint64_t v291;
  unint64_t v292;
  unint64_t v293;
  uint64_t v294;
  _QWORD *v295;
  unint64_t v296;
  std::basic_string<char32_t> v297;
  std::basic_string<char32_t> v298;
  void *v299;
  int *v300;
  uint64_t v301;
  void *v302;
  void *v303;
  unint64_t v304;
  uint64_t v305[2];
  uint64_t v306[2];
  std::vector<int> v307;
  uint64_t v308[2];
  uint64_t v309;
  std::__shared_weak_count *v310;
  uint64_t v311[3];
  int32x2_t v312;
  __int128 v313;
  __int128 v314;
  char v315;
  std::vector<unsigned int> v316;
  uint64_t v317[3];
  uint64_t v318[3];
  _DWORD *v319;
  _BYTE *v320;
  std::string::size_type v321;
  void *v322;
  uint64_t v323;
  __int128 v324;
  uint64_t v325;
  void **v326[3];

  v324 = 0uLL;
  v325 = 0;
  v8 = a2[1] - *a2;
  if (!v8)
  {
    *a7 = 0;
    a7[1] = 0;
    a7[2] = 0;
LABEL_482:
    v324 = 0uLL;
    v325 = 0;
    goto LABEL_483;
  }
  v14 = -1227133513 * (v8 >> 5);
  if (a6)
    v15 = a6;
  else
    v15 = v14;
  if (quasar::InverseTextNormalizer::easterEgg(a1, a2, (uint64_t *)&v324))
  {
LABEL_481:
    *(_OWORD *)a7 = v324;
    a7[2] = v325;
    goto LABEL_482;
  }
  fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::VectorFst(&v322);
  v319 = 0;
  v320 = 0;
  v321 = 0;
  quasar::InverseTextNormalizer::doPreProcessing(a1, (uint64_t)a2, (uint64_t)&v322, (unint64_t **)&v319, v318);
  v264 = a3;
  memset(v317, 0, sizeof(v317));
  memset(&v316, 0, sizeof(v316));
  Commands = quasar::InverseTextNormalizer::getCommands(a1, v318, v317, &v316);
  v314 = 0u;
  v313 = 0u;
  v312 = (int32x2_t)&unk_1E5D34170;
  v315 = 0;
  memset(v311, 0, sizeof(v311));
  v16 = *(_QWORD *)(*(_QWORD *)(a1 + 656) + 88);
  if (v16)
    v17 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v16 + 48))(v16);
  else
    v17 = 0xFFFFFFFFLL;
  v310 = 0;
  v309 = 0;
  v308[1] = 0;
  v308[0] = 0;
  quasar::InverseTextNormalizer::doFeatureExtraction(a1, (uint64_t)&v322, v311, &v312, v16 != 0, v17, &v309, v308);
  v18 = v310;
  if (v310)
  {
    p_shared_owners = (unint64_t *)&v310->__shared_owners_;
    do
      v20 = __ldaxr(p_shared_owners);
    while (__stlxr(v20 - 1, p_shared_owners));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  v21 = *(_QWORD *)(a1 + 776);
  v22 = a3;
  if (!v21
    || (v23 = std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::find<std::string>(v21 + 256, a4), (a5 & 1) == 0)|| v21 + 264 == v23)
  {
    v29 = *(_QWORD *)(a1 + 656);
    memset(__x, 0, 32);
    LODWORD(__x[1].__r_.__value_.__r.__words[1]) = 1065353216;
    quasar::LabelTransformer::doInference(v29, (uint64_t)&v312, -1, 0, __x, 0);
    std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)__x);
    v30 = 0;
    goto LABEL_52;
  }
  v24 = *(_QWORD *)(a1 + 776);
  v25 = *(_DWORD *)(v24 + 252);
  if (v25 < 0)
  {
    v31 = *(_QWORD *)(*(_QWORD *)(a1 + 656) + 72);
    if (!v31
      || (v32 = (*(_QWORD *)(v31 + 16) - *(_QWORD *)(v31 + 8)) >> 3, (int)v32 < 1)
      || (v33 = *(_QWORD *)(v24 + 72)) == 0
      || (v34 = (*(_QWORD *)(v33 + 16) - *(_QWORD *)(v33 + 8)) >> 3, (int)v34 < 1))
    {
LABEL_28:
      v35 = *(_QWORD *)(a1 + 656);
      if (*(_BYTE *)(v24 + 456))
      {
        quasar::LabelTransformer::doInference(v35, (uint64_t)&v312, -1, (int *)(v24 + 104), (_QWORD *)(v24 + 184), (uint64_t *)(v24 + 224));
        goto LABEL_51;
      }
      memset(__x, 0, 32);
      LODWORD(__x[1].__r_.__value_.__r.__words[1]) = 1065353216;
      quasar::LabelTransformer::doInference(v35, (uint64_t)&v312, -1, 0, __x, 0);
      std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)__x);
      v36 = *(_QWORD **)(a1 + 776);
      if ((*(_QWORD *)(*(_QWORD *)(a1 + 656) + 88) != 0) == (v36[11] != 0))
      {
        v37 = v36[35];
        v38 = v36[36];
        __x[0].__r_.__value_.__r.__words[0] = v37;
        __x[0].__r_.__value_.__l.__size_ = v38;
        if (v38)
        {
          v39 = (unint64_t *)(v38 + 8);
          do
            v40 = __ldxr(v39);
          while (__stxr(v40 + 1, v39));
        }
        if (v37)
        {
          std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)__x);
          v36 = *(_QWORD **)(a1 + 776);
        }
        else
        {
          v41 = *(_QWORD *)(a1 + 776);
          v43 = *(void **)(v41 + 296);
          v42 = *(unint64_t **)(v41 + 304);
          v265[0] = v43;
          v265[1] = v42;
          if (v42)
          {
            v44 = v42 + 1;
            do
              v45 = __ldxr(v44);
            while (__stxr(v45 + 1, v44));
          }
          std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)v265);
          std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)__x);
          v36 = *(_QWORD **)(a1 + 776);
          if (!v43)
          {
            memset(__x, 0, 32);
            LODWORD(__x[1].__r_.__value_.__r.__words[1]) = 1065353216;
            quasar::LabelTransformer::doInference((uint64_t)v36, (uint64_t)&v312, -1, 0, __x, 0);
            goto LABEL_21;
          }
        }
      }
      memset(&__x[0].__r_.__value_.__r.__words[1], 0, 33);
      __x[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1E5D34170;
      memset(&v307, 0, sizeof(v307));
      v46 = v36[11];
      if (v46)
      {
        v47 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v46 + 48))(v36[11]);
        v36 = *(_QWORD **)(a1 + 776);
      }
      else
      {
        v47 = 0xFFFFFFFFLL;
      }
      v48 = v36[36];
      v306[0] = v36[35];
      v306[1] = v48;
      if (v48)
      {
        v49 = (unint64_t *)(v48 + 8);
        do
          v50 = __ldxr(v49);
        while (__stxr(v50 + 1, v49));
        v36 = *(_QWORD **)(a1 + 776);
      }
      v51 = v36[38];
      v305[0] = v36[37];
      v305[1] = v51;
      if (v51)
      {
        v52 = (unint64_t *)(v51 + 8);
        do
          v53 = __ldxr(v52);
        while (__stxr(v53 + 1, v52));
      }
      quasar::InverseTextNormalizer::doFeatureExtraction(a1, (uint64_t)&v322, (uint64_t *)&v307, (int32x2_t *)__x, v46 != 0, v47, v306, v305);
      std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)v305);
      std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)v306);
      v54 = *(_QWORD *)(a1 + 776);
      *(_OWORD *)v265 = 0u;
      v266 = 0u;
      v267 = 1065353216;
      quasar::LabelTransformer::doInference(v54, (uint64_t)__x, -1, 0, v265, 0);
      std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)v265);
      v265[0] = &v307;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v265);
      kaldi::CuMatrix<float>::~CuMatrix((uint64_t)__x);
      goto LABEL_51;
    }
    v25 = v32 - v34;
  }
  if (v25 < 1)
    goto LABEL_28;
  v26 = *(_QWORD *)(a1 + 656);
  memset(__x, 0, 32);
  LODWORD(__x[1].__r_.__value_.__r.__words[1]) = 1065353216;
  quasar::LabelTransformer::doInference(v26, (uint64_t)&v312, v25, 0, __x, 0);
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)__x);
  v27 = *(_QWORD *)(a1 + 776);
  v28 = *(_QWORD *)(a1 + 656) + 128;
  memset(__x, 0, 32);
  LODWORD(__x[1].__r_.__value_.__r.__words[1]) = 1065353216;
  quasar::LabelTransformer::doInference(v27, v28, -1, 0, __x, 0);
LABEL_21:
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)__x);
LABEL_51:
  v30 = 1;
LABEL_52:
  quasar::InverseTextNormalizer::setGuardedTokenLabels((unsigned __int8 *)a1, v318, *(_QWORD *)(a1 + 656) + 104);
  quasar::InverseTextNormalizer::applyOverrides(a1, a3, v318, v311, *(_QWORD *)(a1 + 656) + 104);
  memset(__x, 0, 24);
  quasar::LabelTransformer::applyLabels(*(_QWORD *)(a1 + 656), v311, a1 + 664, (uint64_t *)&v324, (uint64_t *)__x, v15);
  size = __x[0].__r_.__value_.__l.__size_;
  v55 = (_DWORD *)__x[0].__r_.__value_.__r.__words[0];
  v57 = v319;
  if (__x[0].__r_.__value_.__r.__words[0] != __x[0].__r_.__value_.__l.__size_)
  {
    v58 = (int *)__x[0].__r_.__value_.__r.__words[0];
    do
    {
      v59 = v58[1];
      v60 = *v58;
      if ((_DWORD)v60 != -1 || v59 != -1)
      {
        *v58 = v57[2 * v60];
        v58[1] = v57[2 * v59 + 1];
      }
      v58 += 2;
    }
    while (v58 != (int *)size);
    v57 = v319;
  }
  if (v57)
  {
    v320 = v57;
    operator delete(v57);
    size = __x[0].__r_.__value_.__l.__size_;
    v55 = (_DWORD *)__x[0].__r_.__value_.__r.__words[0];
  }
  v319 = v55;
  v320 = (_BYTE *)size;
  v321 = __x[0].__r_.__value_.__r.__words[2];
  memset(&v307, 0, sizeof(v307));
  if (v30)
  {
    v262 = v30;
    v303 = 0;
    v302 = 0;
    v304 = 0;
    v62 = *((_QWORD *)&v324 + 1);
    v63 = v324;
    if ((_QWORD)v324 != *((_QWORD *)&v324 + 1))
    {
      v64 = 0;
      do
      {
        if ((unint64_t)v64 >= v304)
        {
          v64 = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v302, (__int128 *)v63);
        }
        else
        {
          if (*(char *)(v63 + 23) < 0)
          {
            std::string::__init_copy_ctor_external(v64, *(const std::string::value_type **)v63, *(_QWORD *)(v63 + 8));
          }
          else
          {
            v65 = *(_OWORD *)v63;
            v64->__r_.__value_.__r.__words[2] = *(_QWORD *)(v63 + 16);
            *(_OWORD *)&v64->__r_.__value_.__l.__data_ = v65;
          }
          ++v64;
        }
        v303 = v64;
        v63 += 224;
      }
      while (v63 != v62);
    }
    v300 = 0;
    v299 = 0;
    v301 = 0;
    quasar::LabelTransformer::applyLabels(*(_QWORD *)(a1 + 776), (uint64_t *)&v302, 0, (uint64_t *)&v324, (uint64_t *)&v299, v15);
    v66 = v299;
    v67 = v300;
    v68 = v319;
    if (v299 != v300)
    {
      v69 = (int *)v299;
      do
      {
        v70 = v69[1];
        v71 = *v69;
        if ((_DWORD)v71 != -1 || v70 != -1)
        {
          *v69 = v68[2 * v71];
          v69[1] = v68[2 * v70 + 1];
        }
        v69 += 2;
      }
      while (v69 != v67);
      v68 = v319;
    }
    if (v68)
    {
      v320 = v68;
      operator delete(v68);
      v66 = v299;
      v67 = v300;
    }
    v319 = v66;
    v320 = v67;
    v321 = v301;
    v301 = 0;
    v300 = 0;
    v299 = 0;
    v73 = *(_QWORD *)(a1 + 776);
    LODWORD(__x[0].__r_.__value_.__l.__data_) = 0;
    std::vector<int>::resize(&v307, 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*((_QWORD *)&v324 + 1) - v324) >> 5), (std::vector<int>::const_reference)__x);
    v75 = *((_QWORD *)&v324 + 1);
    v76 = v324;
    if (*((_QWORD *)&v324 + 1) != (_QWORD)v324)
    {
      v77 = 0;
      v78 = 0;
      v260 = a1 + 384;
      v261 = a1 + 376;
      do
      {
        v79 = v76 + 224 * v77;
        if (*(char *)(v79 + 23) < 0)
        {
          if (*(_QWORD *)(v79 + 8))
          {
LABEL_90:
            v80 = quasar::InverseTextNormalizer::char32Converter((quasar::InverseTextNormalizer *)v74);
            v81 = (char *)v302 + 24 * v77;
            v82 = v81[23];
            if (v82 >= 0)
              v83 = (int *)((char *)v302 + 24 * v77);
            else
              v83 = *(int **)v81;
            if (v82 >= 0)
              v84 = v81[23];
            else
              v84 = *((_QWORD *)v81 + 1);
            std::wstring_convert<std::codecvt_utf8<char32_t,1114111ul,(std::codecvt_mode)0>,char32_t,std::allocator<char32_t>,std::allocator<char>>::from_bytes(v80, v83, (int *)((char *)v83 + v84), &v298);
            v86 = quasar::InverseTextNormalizer::char32Converter(v85);
            v87 = v324 + 224 * v77;
            v88 = *(char *)(v87 + 23);
            if (v88 >= 0)
              v89 = (int *)(v324 + 224 * v77);
            else
              v89 = *(int **)v87;
            if (v88 >= 0)
              v90 = *(unsigned __int8 *)(v87 + 23);
            else
              v90 = *(_QWORD *)(v87 + 8);
            std::wstring_convert<std::codecvt_utf8<char32_t,1114111ul,(std::codecvt_mode)0>,char32_t,std::allocator<char32_t>,std::allocator<char>>::from_bytes(v86, v89, (int *)((char *)v89 + v90), &v297);
            if ((v298.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v92 = (std::basic_string<char32_t> *)((char *)&v298 + 4 * HIBYTE(v298.__r_.__value_.__r.__words[2]));
            else
              v92 = (std::basic_string<char32_t> *)(v298.__r_.__value_.__r.__words[0]
                                                  + 4 * v298.__r_.__value_.__l.__size_);
            if ((v298.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v93 = &v298;
            else
              v93 = (std::basic_string<char32_t> *)v298.__r_.__value_.__r.__words[0];
            while (v93 != v92)
            {
              v91 = (std::basic_string<char32_t> *)MEMORY[0x1AF44E6A8](v93->__r_.__value_.__s.__data_[0]);
              v93->__r_.__value_.__s.__data_[0] = (int)v91;
              v93 = (std::basic_string<char32_t> *)((char *)v93 + 4);
            }
            if ((v297.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v94 = (std::basic_string<char32_t> *)((char *)&v297 + 4 * HIBYTE(v297.__r_.__value_.__r.__words[2]));
            else
              v94 = (std::basic_string<char32_t> *)(v297.__r_.__value_.__r.__words[0]
                                                  + 4 * v297.__r_.__value_.__l.__size_);
            if ((v297.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v95 = &v297;
            else
              v95 = (std::basic_string<char32_t> *)v297.__r_.__value_.__r.__words[0];
            while (v95 != v94)
            {
              v91 = (std::basic_string<char32_t> *)MEMORY[0x1AF44E6A8](v95->__r_.__value_.__s.__data_[0]);
              v95->__r_.__value_.__s.__data_[0] = (int)v91;
              v95 = (std::basic_string<char32_t> *)((char *)v95 + 4);
            }
            if (SHIBYTE(v298.__r_.__value_.__r.__words[2]) < 0)
            {
              if (v298.__r_.__value_.__l.__size_)
              {
                v96 = (std::basic_string<char32_t> *)v298.__r_.__value_.__r.__words[0];
                goto LABEL_123;
              }
            }
            else if (*((_BYTE *)&v298.__r_.__value_.__s + 23))
            {
              v96 = &v298;
LABEL_123:
              v91 = (std::basic_string<char32_t> *)u_isspace(v96->__r_.__value_.__s.__data_[0]);
              if ((_DWORD)v91)
                v91 = std::basic_string<char32_t>::erase(&v298, 0, 1uLL);
            }
            if (SHIBYTE(v297.__r_.__value_.__r.__words[2]) < 0)
            {
              if (v297.__r_.__value_.__l.__size_)
              {
                v97 = (std::basic_string<char32_t> *)v297.__r_.__value_.__r.__words[0];
                goto LABEL_130;
              }
            }
            else if (*((_BYTE *)&v297.__r_.__value_.__s + 23))
            {
              v97 = &v297;
LABEL_130:
              v91 = (std::basic_string<char32_t> *)u_isspace(v97->__r_.__value_.__s.__data_[0]);
              if ((_DWORD)v91)
                v91 = std::basic_string<char32_t>::erase(&v297, 0, 1uLL);
            }
            v98 = quasar::InverseTextNormalizer::char32Converter((quasar::InverseTextNormalizer *)v91);
            v99 = HIBYTE(v298.__r_.__value_.__r.__words[2]);
            if ((v298.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v100 = (char *)&v298;
            else
              v100 = (char *)v298.__r_.__value_.__r.__words[0];
            if ((v298.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
              v99 = v298.__r_.__value_.__l.__size_;
            std::wstring_convert<std::codecvt_utf8<char32_t,1114111ul,(std::codecvt_mode)0>,char32_t,std::allocator<char32_t>,std::allocator<char>>::to_bytes(v98, v100, &v100[4 * v99], __x);
            v101 = std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>((_QWORD *)(v73 + 312), (unsigned __int8 *)__x);
            v102 = v101;
            if (SHIBYTE(__x[0].__r_.__value_.__r.__words[2]) < 0)
            {
              operator delete(__x[0].__r_.__value_.__l.__data_);
              if (!v102)
                goto LABEL_141;
LABEL_139:
              v74 = std::string::operator=((std::string *)(v324 + 224 * v77), (const std::string *)v302 + v77);
              goto LABEL_413;
            }
            if (v101)
              goto LABEL_139;
LABEL_141:
            v103 = *(_QWORD *)(a1 + 776);
            v104 = *(_QWORD *)(v103 + 352);
            v105 = *(std::__shared_weak_count **)(v103 + 360);
            if (v105)
            {
              v106 = (unint64_t *)&v105->__shared_owners_;
              do
                v107 = __ldxr(v106);
              while (__stxr(v107 + 1, v106));
              if (v104)
              {
                if ((v298.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  v108 = HIBYTE(v298.__r_.__value_.__r.__words[2]);
                else
                  v108 = v298.__r_.__value_.__l.__size_;
                do
                  v109 = __ldaxr(v106);
                while (__stlxr(v109 - 1, v106));
                if (v109)
                {
                  if (!v108)
                    goto LABEL_206;
                }
                else
                {
                  ((void (*)(std::__shared_weak_count *))v105->__on_zero_shared)(v105);
                  std::__shared_weak_count::__release_weak(v105);
                  if (!v108)
                    goto LABEL_206;
                }
LABEL_161:
                v265[0] = 0;
                v265[1] = 0;
                *(_QWORD *)&v266 = 0;
                v295 = 0;
                v294 = 0;
                v296 = 0;
                v292 = 0;
                v291 = 0;
                v293 = 0;
                v112 = quasar::InverseTextNormalizer::char32Converter((quasar::InverseTextNormalizer *)v101);
                v113 = HIBYTE(v298.__r_.__value_.__r.__words[2]);
                if ((v298.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  v114 = (char *)&v298;
                else
                  v114 = (char *)v298.__r_.__value_.__r.__words[0];
                if ((v298.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                  v113 = v298.__r_.__value_.__l.__size_;
                std::wstring_convert<std::codecvt_utf8<char32_t,1114111ul,(std::codecvt_mode)0>,char32_t,std::allocator<char32_t>,std::allocator<char>>::to_bytes(v112, v114, &v114[4 * v113], &v290);
                std::string::basic_string[abi:ne180100]<0>(v288, "");
                std::string::basic_string[abi:ne180100]<0>(v286, "");
                memset(v285, 0, sizeof(v285));
                std::string::basic_string[abi:ne180100]<0>(v283, "");
                quasar::Token::Token(__x, (__int128 *)&v290, 0, 0, 0, 0, 0, (__int128 *)v288, 0.0, (__int128 *)v286, v285, 0, (__int128 *)v283, 0, 0);
                v115 = v292;
                if (v292 >= v293)
                {
                  v292 = std::vector<quasar::Token>::__push_back_slow_path<quasar::Token>(&v291, (__int128 *)__x);
                  if (SBYTE7(v279[0]) < 0)
                    operator delete(__p[0]);
                }
                else
                {
                  v116 = *(_OWORD *)&__x[0].__r_.__value_.__l.__data_;
                  *(_QWORD *)(v292 + 16) = *((_QWORD *)&__x[0].__r_.__value_.__l + 2);
                  *(_OWORD *)v115 = v116;
                  memset(__x, 0, 24);
                  v117 = *(std::string::size_type *)((char *)&__x[1].__r_.__value_.__r.__words[1] + 6);
                  *(_OWORD *)(v115 + 24) = *(_OWORD *)&__x[1].__r_.__value_.__l.__data_;
                  *(_QWORD *)(v115 + 38) = v117;
                  v118 = v273[0];
                  *(_OWORD *)(v115 + 48) = *(_OWORD *)v272;
                  *(_QWORD *)(v115 + 64) = v118;
                  *(_QWORD *)(v115 + 72) = 0;
                  v272[1] = 0;
                  v273[0] = 0;
                  v272[0] = 0;
                  *(_QWORD *)(v115 + 80) = 0;
                  *(_QWORD *)(v115 + 88) = 0;
                  *(_OWORD *)(v115 + 72) = *(_OWORD *)&v273[1];
                  *(_QWORD *)(v115 + 88) = v273[3];
                  memset(&v273[1], 0, 24);
                  v119 = *(_OWORD *)v274;
                  *(_QWORD *)(v115 + 112) = v275[0];
                  *(_QWORD *)(v115 + 120) = 0;
                  *(_OWORD *)(v115 + 96) = v119;
                  v274[1] = 0;
                  v275[0] = 0;
                  v274[0] = 0;
                  *(_QWORD *)(v115 + 128) = 0;
                  *(_QWORD *)(v115 + 136) = 0;
                  *(_OWORD *)(v115 + 120) = *(_OWORD *)&v275[1];
                  *(_QWORD *)(v115 + 136) = v275[3];
                  memset(&v275[1], 0, 24);
                  v120 = *(_OWORD *)v276;
                  *(_QWORD *)(v115 + 160) = v277;
                  *(_OWORD *)(v115 + 144) = v120;
                  v276[1] = 0;
                  *(_QWORD *)&v277 = 0;
                  v276[0] = 0;
                  LODWORD(v118) = DWORD2(v277);
                  *(_WORD *)(v115 + 172) = WORD6(v277);
                  *(_DWORD *)(v115 + 168) = v118;
                  v121 = *(_OWORD *)__p;
                  *(_QWORD *)(v115 + 192) = *(_QWORD *)&v279[0];
                  *(_OWORD *)(v115 + 176) = v121;
                  __p[1] = 0;
                  *(_QWORD *)&v279[0] = 0;
                  __p[0] = 0;
                  v122 = *(_OWORD *)((char *)v279 + 8);
                  *(_DWORD *)(v115 + 216) = DWORD2(v279[1]);
                  *(_OWORD *)(v115 + 200) = v122;
                  v292 = v115 + 224;
                }
                if (SBYTE7(v277) < 0)
                  operator delete(v276[0]);
                v326[0] = (void **)&v275[1];
                std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100](v326);
                if (SHIBYTE(v275[0]) < 0)
                  operator delete(v274[0]);
                v326[0] = (void **)&v273[1];
                std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v326);
                if (SHIBYTE(v273[0]) < 0)
                  operator delete(v272[0]);
                if (SHIBYTE(__x[0].__r_.__value_.__r.__words[2]) < 0)
                  operator delete(__x[0].__r_.__value_.__l.__data_);
                if (v284 < 0)
                  operator delete(v283[0]);
                v283[0] = v285;
                std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)v283);
                if (v287 < 0)
                  operator delete(v286[0]);
                if (v289 < 0)
                  operator delete(v288[0]);
                if (SHIBYTE(v290.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v290.__r_.__value_.__l.__data_);
                v123 = v295;
                if ((unint64_t)v295 >= v296)
                {
                  v124 = std::vector<std::vector<quasar::Token>>::__push_back_slow_path<std::vector<quasar::Token> const&>(&v294, &v291);
                }
                else
                {
                  *v295 = 0;
                  v123[1] = 0;
                  v123[2] = 0;
                  std::vector<quasar::Token>::__init_with_size[abi:ne180100]<quasar::Token*,quasar::Token*>(v123, v291, v292, 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v292 - v291) >> 5));
                  v124 = (uint64_t)(v123 + 3);
                }
                v295 = (_QWORD *)v124;
                v125 = *(_QWORD *)(a1 + 776);
                v126 = *(_QWORD *)(v125 + 352);
                v127 = *(_QWORD *)(v125 + 360);
                __x[0].__r_.__value_.__r.__words[0] = v126;
                __x[0].__r_.__value_.__l.__size_ = v127;
                if (v127)
                {
                  v128 = (unint64_t *)(v127 + 8);
                  do
                    v129 = __ldxr(v128);
                  while (__stxr(v129 + 1, v128));
                }
                if (quasar::QuasarTextProcImpl::run(v126, &v294, (uint64_t *)v265, 0)
                  || v265[0] == v265[1])
                {
                  v130 = (std::__shared_weak_count *)__x[0].__r_.__value_.__l.__size_;
                  if (__x[0].__r_.__value_.__l.__size_)
                  {
                    v131 = (unint64_t *)(__x[0].__r_.__value_.__l.__size_ + 8);
                    do
                      v132 = __ldaxr(v131);
                    while (__stlxr(v132 - 1, v131));
                    if (!v132)
                    {
                      ((void (*)(std::__shared_weak_count *))v130->__on_zero_shared)(v130);
                      std::__shared_weak_count::__release_weak(v130);
                    }
                  }
                  goto LABEL_205;
                }
                v133 = *(_QWORD *)v265[0];
                v134 = *((_QWORD *)v265[0] + 1);
                v135 = (std::__shared_weak_count *)__x[0].__r_.__value_.__l.__size_;
                if (__x[0].__r_.__value_.__l.__size_)
                {
                  v136 = (unint64_t *)(__x[0].__r_.__value_.__l.__size_ + 8);
                  do
                    v137 = __ldaxr(v136);
                  while (__stlxr(v137 - 1, v136));
                  if (!v137)
                  {
                    ((void (*)(std::__shared_weak_count *))v135->__on_zero_shared)(v135);
                    std::__shared_weak_count::__release_weak(v135);
                  }
                }
                if (v133 != v134)
                {
LABEL_205:
                  __x[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&v291;
                  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)__x);
                  __x[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&v294;
                  std::vector<std::vector<quasar::Token>>::__destroy_vector::operator()[abi:ne180100]((void ***)__x);
                  __x[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v265;
                  std::vector<std::vector<quasar::Token>>::__destroy_vector::operator()[abi:ne180100]((void ***)__x);
                  goto LABEL_206;
                }
                std::string::operator=((std::string *)(v324 + 224 * v77), (const std::string *)v302 + v77);
                __x[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&v291;
                std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)__x);
                __x[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&v294;
                std::vector<std::vector<quasar::Token>>::__destroy_vector::operator()[abi:ne180100]((void ***)__x);
                __x[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v265;
                std::vector<std::vector<quasar::Token>>::__destroy_vector::operator()[abi:ne180100]((void ***)__x);
LABEL_413:
                if (SHIBYTE(v297.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v297.__r_.__value_.__l.__data_);
                if (SHIBYTE(v298.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v298.__r_.__value_.__l.__data_);
                v75 = *((_QWORD *)&v324 + 1);
                v76 = v324;
                goto LABEL_418;
              }
              do
                v110 = __ldaxr(v106);
              while (__stlxr(v110 - 1, v106));
              if (!v110)
              {
                ((void (*)(std::__shared_weak_count *))v105->__on_zero_shared)(v105);
                std::__shared_weak_count::__release_weak(v105);
              }
            }
            else if (v104)
            {
              v111 = HIBYTE(v298.__r_.__value_.__r.__words[2]);
              if ((v298.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                v111 = v298.__r_.__value_.__l.__size_;
              if (v111)
                goto LABEL_161;
            }
LABEL_206:
            v138 = (char *)v302 + 24 * v77;
            v139 = v138[23];
            if (v138[23] < 0)
              v140 = *((_QWORD *)v138 + 1);
            else
              v140 = v138[23];
            if (v140)
            {
              if ((v297.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v141 = HIBYTE(v297.__r_.__value_.__r.__words[2]);
              else
                v141 = v297.__r_.__value_.__l.__size_;
              if ((v298.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v142 = HIBYTE(v298.__r_.__value_.__r.__words[2]);
              else
                v142 = v298.__r_.__value_.__l.__size_;
              if (v141 > v142)
              {
                v143 = (std::basic_string<char32_t> *)((char *)&v298 + 4 * HIBYTE(v298.__r_.__value_.__r.__words[2]));
                if ((v298.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                {
                  v144 = &v298;
                }
                else
                {
                  v143 = (std::basic_string<char32_t> *)(v298.__r_.__value_.__r.__words[0]
                                                       + 4 * v298.__r_.__value_.__l.__size_);
                  v144 = (std::basic_string<char32_t> *)v298.__r_.__value_.__r.__words[0];
                }
                v145 = &v297;
                if ((v297.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                  v145 = (std::basic_string<char32_t> *)v297.__r_.__value_.__r.__words[0];
                v146 = (std::basic_string<char32_t> *)((char *)v145 + 4 * v141 - 4);
                while (v143 != v144)
                {
                  v148 = HIDWORD(v143[-1].__r_.__value_.__r.__words[2]);
                  v143 = (std::basic_string<char32_t> *)((char *)v143 - 4);
                  v147 = v148;
                  v149 = v146->__r_.__value_.__s.__data_[0];
                  v146 = (std::basic_string<char32_t> *)((char *)v146 - 4);
                  if (v147 != v149)
                    goto LABEL_225;
                }
              }
            }
            else
            {
LABEL_225:
              *(_BYTE *)(v324 + 224 * v77 + 172) = 1;
              v139 = v138[23];
            }
            if ((v139 & 0x80) != 0)
              v139 = *((_QWORD *)v138 + 1);
            if (v139)
            {
              if ((v297.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v150 = HIBYTE(v297.__r_.__value_.__r.__words[2]);
              else
                v150 = v297.__r_.__value_.__l.__size_;
              v151 = HIBYTE(v298.__r_.__value_.__r.__words[2]);
              if ((v298.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                v151 = v298.__r_.__value_.__l.__size_;
              if (v150 > v151)
              {
                v152 = (v298.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
                     ? &v298
                     : (std::basic_string<char32_t> *)v298.__r_.__value_.__r.__words[0];
                v153 = (v297.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
                     ? &v297
                     : (std::basic_string<char32_t> *)v297.__r_.__value_.__r.__words[0];
                if (memcmp(v152, v153, 4 * v151))
                  *(_BYTE *)(v324 + 224 * v77 + 173) = 1;
              }
            }
            if (quasar::Token::isAutoPunctuation((quasar::Token *)(v324 + 224 * v77)))
            {
              v154 = v324;
            }
            else
            {
              if ((v297.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v155 = HIBYTE(v297.__r_.__value_.__r.__words[2]);
              else
                v155 = v297.__r_.__value_.__l.__size_;
              if ((v298.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v156 = HIBYTE(v298.__r_.__value_.__r.__words[2]);
              else
                v156 = v298.__r_.__value_.__l.__size_;
              v154 = v324;
              if (v155 > v156)
                *(_BYTE *)(v324 + 224 * v77 + 172) = 1;
            }
            isAutoPunctuation = quasar::Token::isAutoPunctuation((quasar::Token *)(v154 + 224 * v77));
            v158 = v324;
            if ((isAutoPunctuation & 1) != 0)
            {
LABEL_254:
              isAutoPunctuation = quasar::Token::isAutoPunctuation((quasar::Token *)(v158 + 224 * v77));
              if (!(_DWORD)isAutoPunctuation)
                goto LABEL_295;
              quasar::getFirstNonSpaceChar((uint64_t)v302 + 24 * v77, __x);
              quasar::getFirstNonSpaceChar(v324 + 224 * v77, (std::string *)v265);
              v159 = HIBYTE(__x[0].__r_.__value_.__r.__words[2]);
              if ((__x[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v160 = HIBYTE(__x[0].__r_.__value_.__r.__words[2]);
              else
                v160 = __x[0].__r_.__value_.__l.__size_;
              v161 = (void *)BYTE7(v266);
              v162 = SBYTE7(v266);
              if (SBYTE7(v266) < 0)
                v161 = v265[1];
              if ((void *)v160 == v161)
              {
                if ((SBYTE7(v266) & 0x80u) == 0)
                  v163 = v265;
                else
                  v163 = (void **)v265[0];
                if (SHIBYTE(__x[0].__r_.__value_.__r.__words[2]) < 0)
                {
                  isAutoPunctuation = memcmp(__x[0].__r_.__value_.__l.__data_, v163, __x[0].__r_.__value_.__l.__size_);
                  v169 = isAutoPunctuation != 0;
                  if ((v162 & 0x80000000) == 0)
                    goto LABEL_273;
                }
                else if (*((_BYTE *)&__x[0].__r_.__value_.__s + 23))
                {
                  v164 = HIBYTE(__x[0].__r_.__value_.__r.__words[2]) - 1;
                  v165 = __x;
                  do
                  {
                    v167 = v165->__r_.__value_.__s.__data_[0];
                    v165 = (std::string *)((char *)v165 + 1);
                    v166 = v167;
                    v168 = *(unsigned __int8 *)v163;
                    v163 = (void **)((char *)v163 + 1);
                    v169 = v166 != v168;
                  }
                  while (v166 == v168 && v164-- != 0);
                  if ((SBYTE7(v266) & 0x80000000) == 0)
                  {
LABEL_273:
                    if ((v159 & 0x80) == 0)
                      goto LABEL_274;
LABEL_292:
                    operator delete(__x[0].__r_.__value_.__l.__data_);
LABEL_274:
                    if (v169)
                    {
                      v158 = v324;
                      goto LABEL_294;
                    }
                    goto LABEL_295;
                  }
                }
                else
                {
                  v169 = 0;
                  if ((SBYTE7(v266) & 0x80000000) == 0)
                    goto LABEL_273;
                }
              }
              else
              {
                v169 = 1;
                if ((SBYTE7(v266) & 0x80000000) == 0)
                  goto LABEL_273;
              }
              operator delete(v265[0]);
              if ((*((_BYTE *)&__x[0].__r_.__value_.__s + 23) & 0x80) != 0)
                goto LABEL_292;
              goto LABEL_274;
            }
            v171 = (unsigned __int8 *)v302 + 24 * v77;
            v172 = (unsigned __int8 **)(v324 + 224 * v77);
            v173 = v171[23];
            if ((v173 & 0x80u) == 0)
              v174 = (unsigned __int8 *)v171[23];
            else
              v174 = (unsigned __int8 *)*((_QWORD *)v171 + 1);
            v175 = (unsigned __int8 *)*((unsigned __int8 *)v172 + 23);
            v176 = (char)v175;
            if ((char)v175 < 0)
              v175 = v172[1];
            if (v174 == v175)
            {
              if (v176 >= 0)
                v177 = (unsigned __int8 *)(v324 + 224 * v77);
              else
                v177 = *v172;
              if ((v173 & 0x80) != 0)
              {
                isAutoPunctuation = memcmp(*(const void **)v171, v177, *((_QWORD *)v171 + 1));
                if (!(_DWORD)isAutoPunctuation)
                  goto LABEL_254;
              }
              else
              {
                if (!v171[23])
                  goto LABEL_254;
                while (*v171 == *v177)
                {
                  ++v171;
                  ++v177;
                  if (!--v173)
                    goto LABEL_254;
                }
              }
            }
LABEL_294:
            *(_BYTE *)(v158 + 224 * v77 + 200) = 1;
LABEL_295:
            if (!v78 && *(_BYTE *)(v324 + 224 * v77 + 200))
            {
              v178 = quasar::Token::isAutoPunctuation((quasar::Token *)(v324 + 224 * v77));
              if (v178)
              {
                v179 = v324;
                v180 = quasar::CommandTransform::char32Converter((quasar::CommandTransform *)v178);
                v181 = v179 + 224 * v77;
                v182 = *(unsigned __int8 *)(v181 + 23);
                if ((v182 & 0x80u) == 0)
                  v183 = (int *)(v179 + 224 * v77);
                else
                  v183 = *(int **)v181;
                if ((v182 & 0x80u) != 0)
                  v182 = *(_QWORD *)(v181 + 8);
                std::wstring_convert<std::codecvt_utf8<char32_t,1114111ul,(std::codecvt_mode)0>,char32_t,std::allocator<char32_t>,std::allocator<char>>::from_bytes(v180, v183, (int *)((char *)v183 + v182), (std::basic_string<char32_t> *)v265);
                v185 = SBYTE7(v266) < 0;
                v186 = (void *)BYTE7(v266);
                if (SBYTE7(v266) < 0)
                  v186 = v265[1];
                if (v186)
                {
                  v187 = 0;
                  while (1)
                  {
                    v188 = v185 ? v265[0] : v265;
                    isUWhiteSpace = (quasar::CommandTransform *)u_isUWhiteSpace(v188[v187]);
                    if (!(_DWORD)isUWhiteSpace)
                      break;
                    ++v187;
                    v185 = SBYTE7(v266) < 0;
                    v189 = (void *)BYTE7(v266);
                    if (SBYTE7(v266) < 0)
                      v189 = v265[1];
                    if ((unint64_t)v189 <= v187)
                      goto LABEL_337;
                  }
                  if ((SBYTE7(v266) & 0x80u) == 0)
                    v193 = v265;
                  else
                    v193 = (void **)v265[0];
                  isUWhiteSpace = (quasar::CommandTransform *)MEMORY[0x1AF44E6A8](*((unsigned int *)v193 + v187));
                  if ((SBYTE7(v266) & 0x80u) == 0)
                    v194 = v265;
                  else
                    v194 = (void **)v265[0];
                  *((_DWORD *)v194 + v187) = (_DWORD)isUWhiteSpace;
                }
LABEL_337:
                v195 = quasar::CommandTransform::char32Converter(isUWhiteSpace);
                v196 = BYTE7(v266);
                if ((SBYTE7(v266) & 0x80u) == 0)
                  v197 = (char *)v265;
                else
                  v197 = (char *)v265[0];
                if (SBYTE7(v266) < 0)
                  v196 = (unint64_t)v265[1];
                std::wstring_convert<std::codecvt_utf8<char32_t,1114111ul,(std::codecvt_mode)0>,char32_t,std::allocator<char32_t>,std::allocator<char>>::to_bytes(v195, v197, &v197[4 * v196], __x);
                if (*(char *)(v181 + 23) < 0)
                  operator delete(*(void **)v181);
                v198 = *(_OWORD *)&__x[0].__r_.__value_.__l.__data_;
                *(_QWORD *)(v181 + 16) = *((_QWORD *)&__x[0].__r_.__value_.__l + 2);
                *(_OWORD *)v181 = v198;
                if (SBYTE7(v266) < 0)
                  operator delete(v265[0]);
              }
              else
              {
                isAutoPunctuation = (uint64_t)std::string::operator=((std::string *)(v324 + 224 * v77), (const std::string *)v302 + v77);
              }
              *(_BYTE *)(v324 + 224 * v77 + 200) = 0;
              goto LABEL_395;
            }
            v190 = *(_QWORD *)(a1 + 776);
            if (*(char *)(v190 + 487) < 0)
              std::string::__init_copy_ctor_external(__x, *(const std::string::value_type **)(v190 + 464), *(_QWORD *)(v190 + 472));
            else
              __x[0] = *(std::string *)(v190 + 464);
            if (SHIBYTE(__x[0].__r_.__value_.__r.__words[2]) < 0)
            {
              if (__x[0].__r_.__value_.__l.__size_ != 0 && v78)
              {
                v191 = *(unsigned __int8 *)(v324 + 224 * v77 + 200);
                operator delete(__x[0].__r_.__value_.__l.__data_);
                if (!v191)
                {
LABEL_324:
                  v192 = *(_QWORD *)(a1 + 776);
                  if (*(char *)(v192 + 487) < 0)
                    std::string::__init_copy_ctor_external(__x, *(const std::string::value_type **)(v192 + 464), *(_QWORD *)(v192 + 472));
                  else
                    __x[0] = *(std::string *)(v192 + 464);
                  v199 = std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::find<std::string>(v261, (const void **)&__x[0].__r_.__value_.__l.__data_);
                  if (SHIBYTE(__x[0].__r_.__value_.__r.__words[2]) < 0)
                    operator delete(__x[0].__r_.__value_.__l.__data_);
                  isAutoPunctuation = std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::find<std::string>(v261, (const void **)(v311[0] + 24 * v77));
                  if (v260 == v199
                    || (v200 = isAutoPunctuation, v260 == isAutoPunctuation)
                    || (v201 = *(__int32 **)(v199 + 56), v202 = *(__int32 **)(v199 + 64), v201 == v202))
                  {
LABEL_358:
                    v204 = v324;
                    v205 = quasar::CommandTransform::char32Converter((quasar::CommandTransform *)isAutoPunctuation);
                    v206 = v204 + 224 * v77;
                    v207 = *(unsigned __int8 *)(v206 + 23);
                    if ((v207 & 0x80u) == 0)
                      v208 = (int *)(v204 + 224 * v77);
                    else
                      v208 = *(int **)v206;
                    if ((v207 & 0x80u) != 0)
                      v207 = *(_QWORD *)(v206 + 8);
                    std::wstring_convert<std::codecvt_utf8<char32_t,1114111ul,(std::codecvt_mode)0>,char32_t,std::allocator<char32_t>,std::allocator<char>>::from_bytes(v205, v208, (int *)((char *)v208 + v207), (std::basic_string<char32_t> *)v265);
                    v210 = SBYTE7(v266) < 0;
                    v211 = (void *)BYTE7(v266);
                    if (SBYTE7(v266) < 0)
                      v211 = v265[1];
                    if (v211)
                    {
                      v212 = 0;
                      while (1)
                      {
                        v213 = v210 ? v265[0] : v265;
                        v209 = (quasar::CommandTransform *)u_isUWhiteSpace(v213[v212]);
                        if (!(_DWORD)v209)
                          break;
                        ++v212;
                        v210 = SBYTE7(v266) < 0;
                        v214 = (void *)BYTE7(v266);
                        if (SBYTE7(v266) < 0)
                          v214 = v265[1];
                        if ((unint64_t)v214 <= v212)
                          goto LABEL_385;
                      }
                      if ((SBYTE7(v266) & 0x80u) == 0)
                        v215 = v265;
                      else
                        v215 = (void **)v265[0];
                      v209 = (quasar::CommandTransform *)MEMORY[0x1AF44E6B4](*((unsigned int *)v215 + v212));
                      if ((SBYTE7(v266) & 0x80u) == 0)
                        v216 = v265;
                      else
                        v216 = (void **)v265[0];
                      *((_DWORD *)v216 + v212) = (_DWORD)v209;
                    }
LABEL_385:
                    v217 = quasar::CommandTransform::char32Converter(v209);
                    v218 = BYTE7(v266);
                    if ((SBYTE7(v266) & 0x80u) == 0)
                      v219 = (char *)v265;
                    else
                      v219 = (char *)v265[0];
                    if (SBYTE7(v266) < 0)
                      v218 = (unint64_t)v265[1];
                    std::wstring_convert<std::codecvt_utf8<char32_t,1114111ul,(std::codecvt_mode)0>,char32_t,std::allocator<char32_t>,std::allocator<char>>::to_bytes(v217, v219, &v219[4 * v218], __x);
                    if (*(char *)(v206 + 23) < 0)
                      operator delete(*(void **)v206);
                    v220 = *(_OWORD *)&__x[0].__r_.__value_.__l.__data_;
                    *(_QWORD *)(v206 + 16) = *((_QWORD *)&__x[0].__r_.__value_.__l + 2);
                    *(_OWORD *)v206 = v220;
                    if (SBYTE7(v266) < 0)
                      operator delete(v265[0]);
                    *(_BYTE *)(v324 + 224 * v77 + 200) = 1;
                  }
                  else
                  {
                    v203 = *(_QWORD *)(isAutoPunctuation + 64);
                    while (1)
                    {
                      isAutoPunctuation = (uint64_t)wmemchr(*(__int32 **)(v200 + 56), *v201, (v203 - *(_QWORD *)(v200 + 56)) >> 2);
                      if (isAutoPunctuation)
                        v203 = isAutoPunctuation;
                      if (v203 != *(_QWORD *)(v200 + 64))
                        break;
                      if (++v201 == v202)
                        goto LABEL_358;
                    }
                  }
                }
              }
              else
              {
                operator delete(__x[0].__r_.__value_.__l.__data_);
              }
            }
            else if (SHIBYTE(__x[0].__r_.__value_.__r.__words[2]) != 0 && v78 && !*(_BYTE *)(v324 + 224 * v77 + 200))
            {
              goto LABEL_324;
            }
LABEL_395:
            v221 = v324;
            if (!*(_BYTE *)(v324 + 224 * v77 + 172))
              goto LABEL_404;
            v222 = HIBYTE(v297.__r_.__value_.__r.__words[2]);
            if ((v297.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
              v222 = v297.__r_.__value_.__l.__size_;
            if (v222)
            {
              v223 = quasar::InverseTextNormalizer::char32Converter((quasar::InverseTextNormalizer *)isAutoPunctuation);
              v224 = HIBYTE(v297.__r_.__value_.__r.__words[2]);
              v225 = &v297;
              if ((v297.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
              {
                v224 = v297.__r_.__value_.__l.__size_;
                v225 = (std::basic_string<char32_t> *)v297.__r_.__value_.__r.__words[0];
              }
              LODWORD(v265[0]) = v225->__r_.__value_.__s.__data_[v224 - 1];
              std::wstring_convert<std::codecvt_utf8<char32_t,1114111ul,(std::codecvt_mode)0>,char32_t,std::allocator<char32_t>,std::allocator<char>>::to_bytes(v223, (char *)v265, (char *)v265 + 4, __x);
              v226 = std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>((_QWORD *)(*(_QWORD *)(a1 + 776) + 416), (unsigned __int8 *)__x) != 0;
              if (SHIBYTE(__x[0].__r_.__value_.__r.__words[2]) < 0)
                operator delete(__x[0].__r_.__value_.__l.__data_);
              v221 = v324;
            }
            else
            {
LABEL_404:
              v226 = 0;
            }
            v74 = (std::string *)quasar::Token::isAutoPunctuation((quasar::Token *)(v221 + 224 * v77));
            if ((_DWORD)v74)
            {
              v227 = HIBYTE(v297.__r_.__value_.__r.__words[2]);
              if ((v297.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                v227 = v297.__r_.__value_.__l.__size_;
              v228 = HIBYTE(v298.__r_.__value_.__r.__words[2]);
              if ((v298.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                v228 = v298.__r_.__value_.__l.__size_;
              if (v227 > v228)
                v307.__begin_[v77] = v227 - v228;
            }
            v78 = v226;
            goto LABEL_413;
          }
        }
        else if (*(_BYTE *)(v79 + 23))
        {
          goto LABEL_90;
        }
LABEL_418:
        ++v77;
      }
      while (0x6DB6DB6DB6DB6DB7 * ((v75 - v76) >> 5) > v77);
    }
    if (v299)
    {
      v300 = (int *)v299;
      operator delete(v299);
    }
    __x[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&v302;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__x);
    v22 = v264;
    v30 = v262;
  }
  if (Commands)
    v57 = (_DWORD *)quasar::InverseTextNormalizer::emptyCommandTokens((uint64_t)v57, v317, &v324);
  quasar::InverseTextNormalizer::setSpacing((uint64_t)v57, (std::string **)&v324);
  if (Commands)
    quasar::InverseTextNormalizer::applyCommands(v229, (uint64_t *)&v324, v317, &v316);
  v303 = 0;
  v302 = 0;
  v304 = 0;
  quasar::InverseTextNormalizer::removeEmptyTokens(a1, a2, (uint64_t)&v324, (void **)&v319, (uint64_t)&v302, (std::vector<unsigned int>::pointer *)&v307);
  v230 = quasar::InverseTextNormalizer::checkFunction(&v319, -1227133513 * ((unint64_t)(a2[1] - *a2) >> 5));
  v231 = v230;
  if ((v230 & 1) != 0)
  {
    if (v30)
      quasar::InverseTextNormalizer::createSeparateAutoPunctuationTokens((quasar::InverseTextNormalizer *)v230, (void **)&v324, (void **)&v319, &v307);
    quasar::InverseTextNormalizer::setTokenProperties(a2, &v319, (uint64_t *)&v324);
    if (quasar::gLogLevel >= 5)
    {
      std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v265);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v265, (uint64_t)"Tantor-ITN numInputTokens=", 26);
      v232 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v232, (uint64_t)" numOutputTokens=", 17);
      v233 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v233, (uint64_t)" numOverrides=", 14);
      v234 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v234, (uint64_t)"\"", 1);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v265, (uint64_t)" overrides=", 11);
      v235 = *v22;
      v236 = v22[1];
      if (*v22 != v236)
      {
        do
        {
          v237 = *(char *)(v235 + 23);
          if (v237 >= 0)
            v238 = v235;
          else
            v238 = *(_QWORD *)v235;
          if (v237 >= 0)
            v239 = *(unsigned __int8 *)(v235 + 23);
          else
            v239 = *(_QWORD *)(v235 + 8);
          v240 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v265, v238, v239);
          v241 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v240, (uint64_t)"~", 1);
          v242 = *(char *)(v235 + 47);
          if (v242 >= 0)
            v243 = v235 + 24;
          else
            v243 = *(_QWORD *)(v235 + 24);
          if (v242 >= 0)
            v244 = *(unsigned __int8 *)(v235 + 47);
          else
            v244 = *(_QWORD *)(v235 + 32);
          v245 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v241, v243, v244);
          v246 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v245, (uint64_t)"->\"", 3);
          v247 = *(char *)(v235 + 71);
          if (v247 >= 0)
            v248 = v235 + 48;
          else
            v248 = *(_QWORD *)(v235 + 48);
          if (v247 >= 0)
            v249 = *(unsigned __int8 *)(v235 + 71);
          else
            v249 = *(_QWORD *)(v235 + 56);
          v250 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v246, v248, v249);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v250, (uint64_t)"\";", 2);
          v235 += 72;
        }
        while (v235 != v236);
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v265, (uint64_t)" preToPostTokMap=", 17);
      if (v320 != (_BYTE *)v319)
      {
        v251 = 0;
        v252 = 0;
        do
        {
          v253 = (_QWORD *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v253, (uint64_t)"~", 1);
          v254 = (_QWORD *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v254, (uint64_t)"->", 2);
          v255 = (_QWORD *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v255, (uint64_t)";", 1);
          ++v252;
          v251 += 8;
        }
        while (v252 < (v320 - (_BYTE *)v319) >> 3);
      }
      if (quasar::gLogLevel > 4)
      {
        v281 = 0u;
        v282 = 0u;
        v280 = 0u;
        *(_OWORD *)__p = 0u;
        memset(v279, 0, sizeof(v279));
        *(_OWORD *)v276 = 0u;
        v277 = 0u;
        memset(v275, 0, sizeof(v275));
        *(_OWORD *)v274 = 0u;
        *(_OWORD *)v272 = 0u;
        memset(v273, 0, sizeof(v273));
        memset(__x, 0, sizeof(__x));
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__x);
        std::stringbuf::str();
        if (v301 >= 0)
          v256 = &v299;
        else
          v256 = v299;
        if (v301 >= 0)
          v257 = HIBYTE(v301);
        else
          v257 = (uint64_t)v300;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__x, (uint64_t)v256, v257);
        if (SHIBYTE(v301) < 0)
          operator delete(v299);
        quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)__x);
      }
      v265[0] = *(void **)MEMORY[0x1E0DE4F60];
      *(void **)((char *)v265 + *((_QWORD *)v265[0] - 3)) = *(void **)(MEMORY[0x1E0DE4F60] + 24);
      v265[1] = (void *)(MEMORY[0x1E0DE4FB8] + 16);
      if (v269 < 0)
        operator delete(v268);
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      MEMORY[0x1AF44D094](&v270);
    }
  }
  else
  {
    if (quasar::gLogLevel >= 4)
    {
      v281 = 0u;
      v282 = 0u;
      v280 = 0u;
      *(_OWORD *)__p = 0u;
      memset(v279, 0, sizeof(v279));
      *(_OWORD *)v276 = 0u;
      v277 = 0u;
      memset(v275, 0, sizeof(v275));
      *(_OWORD *)v274 = 0u;
      *(_OWORD *)v272 = 0u;
      memset(v273, 0, sizeof(v273));
      memset(__x, 0, sizeof(__x));
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__x);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__x, (uint64_t)"ITN failed", 10);
      quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)__x);
    }
    *a7 = 0;
    a7[1] = 0;
    a7[2] = 0;
  }
  if (v302)
  {
    v303 = v302;
    operator delete(v302);
  }
  if (v307.__begin_)
  {
    v307.__end_ = v307.__begin_;
    operator delete(v307.__begin_);
  }
  __x[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v311;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__x);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&v312);
  if (v316.__begin_)
  {
    v316.__end_ = v316.__begin_;
    operator delete(v316.__begin_);
  }
  __x[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v317;
  std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100]((void ***)__x);
  __x[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v318;
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)__x);
  if (v319)
  {
    v320 = v319;
    operator delete(v319);
  }
  v322 = &unk_1E5D256C0;
  v258 = v323;
  if (v323)
  {
    v259 = *(_DWORD *)(v323 + 56) - 1;
    *(_DWORD *)(v323 + 56) = v259;
    if (!v259)
      (*(void (**)(uint64_t))(*(_QWORD *)v258 + 8))(v258);
  }
  if ((v231 & 1) != 0)
    goto LABEL_481;
LABEL_483:
  __x[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&v324;
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)__x);
}

void sub_1AD8C7D68(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *__p,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  __int128 a65;
  __int128 a66;
  __int128 a67;
  __int128 a68;
  _QWORD *v68;
  uint64_t v69;
  void *v72;
  void *v73;
  _DWORD *v74;
  int v75;

  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)&a65);
  *(_QWORD *)&a65 = &STACK[0x438];
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a65);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&STACK[0x450]);
  v72 = *(void **)(v69 - 240);
  if (v72)
  {
    *(_QWORD *)(v69 - 232) = v72;
    operator delete(v72);
  }
  *(_QWORD *)&a65 = v69 - 216;
  std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a65);
  *(_QWORD *)&a65 = v69 - 192;
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&a65);
  v73 = *(void **)(v69 - 168);
  if (v73)
  {
    *(_QWORD *)(v69 - 160) = v73;
    operator delete(v73);
  }
  *(_QWORD *)(v69 - 144) = &unk_1E5D256C0;
  v74 = *(_DWORD **)(v69 - 136);
  if (v74)
  {
    v75 = v74[14] - 1;
    v74[14] = v75;
    if (!v75)
      (*(void (**)(_DWORD *))(*(_QWORD *)v74 + 8))(v74);
  }
  if (a2 == 1)
  {
    __cxa_begin_catch(a1);
    if (quasar::gLogLevel >= 4)
    {
      *(_OWORD *)&STACK[0x2B0] = 0u;
      *(_OWORD *)&STACK[0x2C0] = 0u;
      *(_OWORD *)&STACK[0x290] = 0u;
      *(_OWORD *)&STACK[0x2A0] = 0u;
      *(_OWORD *)&STACK[0x270] = 0u;
      *(_OWORD *)&STACK[0x280] = 0u;
      *(_OWORD *)&STACK[0x250] = 0u;
      *(_OWORD *)&STACK[0x260] = 0u;
      *(_OWORD *)&STACK[0x230] = 0u;
      *(_OWORD *)&STACK[0x240] = 0u;
      *(_OWORD *)&STACK[0x210] = 0u;
      *(_OWORD *)&STACK[0x220] = 0u;
      a68 = 0u;
      *(_OWORD *)&STACK[0x200] = 0u;
      a66 = 0u;
      a67 = 0u;
      a65 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&a65);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&a65, (uint64_t)"ITN failed", 10);
      quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&a65);
    }
    *v68 = 0;
    v68[1] = 0;
    v68[2] = 0;
    __cxa_end_catch();
    JUMPOUT(0x1AD8C7D0CLL);
  }
  *(_QWORD *)&a65 = v69 - 128;
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&a65);
  _Unwind_Resume(a1);
}

void sub_1AD8C8238(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a65;

  quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&a65);
  __cxa_end_catch();
  JUMPOUT(0x1AD8C801CLL);
}

std::basic_string<char32_t> *__cdecl std::basic_string<char32_t>::erase(std::basic_string<char32_t> *this, std::basic_string<char32_t>::size_type __pos, std::basic_string<char32_t>::size_type __n)
{
  std::basic_string<char32_t>::size_type size;
  std::basic_string<char32_t> *v5;

  if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
    size = this->__r_.__value_.__l.__size_;
  else
    size = HIBYTE(this->__r_.__value_.__r.__words[2]);
  if (size < __pos)
    std::string::__throw_out_of_range[abi:ne180100]();
  if (__n == -1)
  {
    if ((*((_BYTE *)&this->__r_.__value_.__s + 23) & 0x80) != 0)
    {
      v5 = (std::basic_string<char32_t> *)this->__r_.__value_.__r.__words[0];
      this->__r_.__value_.__l.__size_ = __pos;
    }
    else
    {
      *((_BYTE *)&this->__r_.__value_.__s + 23) = __pos & 0x7F;
      v5 = this;
    }
    v5->__r_.__value_.__s.__data_[__pos] = 0;
  }
  else
  {
    std::basic_string<char32_t>::__erase_external_with_move(this, __pos, __n);
  }
  return this;
}

void quasar::getFirstNonSpaceChar(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  int *v6;
  BOOL v7;
  std::basic_string<char32_t>::size_type size;
  std::basic_string<char32_t>::size_type v9;
  std::basic_string<char32_t> *v10;
  quasar::CommandTransform *isUWhiteSpace;
  std::basic_string<char32_t>::size_type v12;
  uint64_t v13;
  std::basic_string<char32_t> *p_p;
  std::basic_string<char32_t> __p;
  std::basic_string<char32_t>::value_type v16;
  uint64_t v17;

  v4 = quasar::CommandTransform::char32Converter((quasar::CommandTransform *)a1);
  v5 = *(unsigned __int8 *)(a1 + 23);
  if ((v5 & 0x80u) == 0)
    v6 = (int *)a1;
  else
    v6 = *(int **)a1;
  if ((v5 & 0x80u) != 0)
    v5 = *(_QWORD *)(a1 + 8);
  std::wstring_convert<std::codecvt_utf8<char32_t,1114111ul,(std::codecvt_mode)0>,char32_t,std::allocator<char32_t>,std::allocator<char>>::from_bytes(v4, v6, (int *)((char *)v6 + v5), &__p);
  v7 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0;
  size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = __p.__r_.__value_.__l.__size_;
  if (size)
  {
    v9 = 0;
    while (1)
    {
      v10 = v7 ? (std::basic_string<char32_t> *)__p.__r_.__value_.__r.__words[0] : &__p;
      isUWhiteSpace = (quasar::CommandTransform *)u_isUWhiteSpace(v10->__r_.__value_.__s.__data_[v9]);
      if (!(_DWORD)isUWhiteSpace)
        break;
      ++v9;
      v7 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0;
      v12 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v12 = __p.__r_.__value_.__l.__size_;
      if (v12 <= v9)
        goto LABEL_17;
    }
    v13 = quasar::CommandTransform::char32Converter(isUWhiteSpace);
    p_p = &__p;
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      p_p = (std::basic_string<char32_t> *)__p.__r_.__value_.__r.__words[0];
    v16 = p_p->__r_.__value_.__s.__data_[v9];
    std::wstring_convert<std::codecvt_utf8<char32_t,1114111ul,(std::codecvt_mode)0>,char32_t,std::allocator<char32_t>,std::allocator<char>>::to_bytes(v13, (char *)&v16, (char *)&v17, a2);
  }
  else
  {
LABEL_17:
    std::string::basic_string[abi:ne180100]<0>(a2, "");
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_1AD8C83E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void quasar::InverseTextNormalizer::runInChunks(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t *a3@<X2>, const void **a4@<X3>, char a5@<W4>, _QWORD *a6@<X8>)
{
  _QWORD *v8;
  signed int v9;
  char **v10;
  unint64_t v11;
  int v12;
  std::string::size_type size;
  std::string::size_type v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  char *v20;
  int32x2_t *v21;
  int32x2_t v22;
  int32x2_t *v23;
  unint64_t v24;
  uint64_t v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  double v32;
  unint64_t v33;
  int v34;
  int v35;
  int v36;
  int v37;
  int v38;
  double v39;
  BOOL v40;
  int v41;
  int v42;
  int32x2_t v43;
  char *v44;
  char *v45;
  int32x2_t *v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  char *v51;
  char *v52;
  char *v53;
  char *v54;
  char *v55;
  char *v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  const quasar::Token *v60;
  uint64_t v61;
  uint64_t v62;
  int *v63;
  int *v64;
  uint64_t v65;
  int v66;
  int *v67;
  int64_t v68;
  uint64_t v69;
  uint64_t v70;
  int v71;
  _QWORD *v73;
  int v74;
  _QWORD *v75;
  std::string *v76;
  std::string::size_type v77;
  _QWORD *v78;
  std::string *v79;
  std::string::size_type v80;
  _QWORD *v81;
  _QWORD *v82;
  int v83;
  std::string *v84;
  std::string::size_type v85;
  _QWORD *v86;
  std::__shared_weak_count *v87;
  unint64_t *v88;
  unint64_t v89;
  unsigned int v91;
  std::string::size_type v95;
  std::string v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  char **v114;
  std::__shared_weak_count *v115;
  void *__p[3];
  std::string v117;
  std::string v118;
  char **v119;
  std::__shared_weak_count *v120;
  char *v121;
  char *v122;
  char *v123;
  _QWORD v124[3];
  __int128 v125;
  unint64_t v126;

  v125 = 0uLL;
  v126 = 0;
  memset(v124, 0, sizeof(v124));
  v121 = 0;
  v122 = 0;
  v123 = 0;
  v8 = operator new(0x30uLL);
  v91 = 0;
  v9 = 0;
  v8[1] = 0;
  v8[2] = 0;
  v8[3] = 0;
  v10 = (char **)(v8 + 3);
  *v8 = &unk_1E5D45698;
  v8[4] = 0;
  v8[5] = 0;
  v119 = (char **)(v8 + 3);
  v120 = (std::__shared_weak_count *)v8;
  while (1)
  {
    v11 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(a2[1] - *a2) >> 5);
    if (v11 <= v9)
      break;
    if (v11 >= *(int *)(a1 + 16) + (uint64_t)v9)
      v12 = *(_DWORD *)(a1 + 16) + v9;
    else
      v12 = -1227133513 * ((uint64_t)(a2[1] - *a2) >> 5);
    std::vector<quasar::Token>::vector(&v118, v12 - v9);
    std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::__wrap_iter<quasar::Token const*>,std::__wrap_iter<quasar::Token const*>,std::__wrap_iter<quasar::Token*>,0>(*a2 + 224 * v9, *a2 + 224 * v12, (uint64_t)v118.__r_.__value_.__l.__data_);
    quasar::InverseTextNormalizer::runChunk(a1, (uint64_t *)&v118, a3, a4, a5, -1227133513 * ((a2[1] - *a2) >> 5), &v117);
    size = v117.__r_.__value_.__l.__size_;
    v14 = v117.__r_.__value_.__r.__words[0];
    if (v117.__r_.__value_.__r.__words[0] != v117.__r_.__value_.__l.__size_)
    {
      v114 = v10;
      v115 = v120;
      if (v120)
      {
        p_shared_owners = (unint64_t *)&v120->__shared_owners_;
        do
          v16 = __ldxr(p_shared_owners);
        while (__stxr(v16 + 1, p_shared_owners));
      }
      quasar::getPreItnTokenToPostItnCharAlignment(&v118, &v117, &v114, (uint64_t *)__p);
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
      v17 = v115;
      if (v115)
      {
        v18 = (unint64_t *)&v115->__shared_owners_;
        do
          v19 = __ldaxr(v18);
        while (__stlxr(v19 - 1, v18));
        if (!v19)
        {
          ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
          std::__shared_weak_count::__release_weak(v17);
        }
      }
      v10 = v119;
      v20 = *v119;
      v21 = (int32x2_t *)v119[1];
      v95 = v14;
      if (*v119 == (char *)v21)
      {
        v24 = ((char *)v21 - v20) >> 4;
      }
      else
      {
        v22 = vdup_n_s32(v9);
        v23 = (int32x2_t *)*v119;
        do
        {
          *v23 = vadd_s32(*v23, v22);
          v23 += 2;
        }
        while (v23 != v21);
        v24 = ((char *)v21 - v20) >> 4;
        if (v21 != (int32x2_t *)v20)
        {
          v25 = 0;
          v26 = 0;
          v27 = 0;
          v28 = *(_DWORD *)(a1 + 20);
          v29 = v28 >= 0 ? *(_DWORD *)(a1 + 20) : v28 + 1;
          v30 = -(v9 + (v29 >> 1));
          v31 = -1;
          v32 = 1000000000.0;
          LODWORD(v33) = -1;
          do
          {
            if ((v122 - v121) >> 4 <= (unint64_t)v27)
              break;
            v34 = *(_DWORD *)&v121[16 * v27 + 4] + 1;
            v35 = *(_DWORD *)&v20[16 * v25];
            if (v34 >= v35)
              v36 = v27;
            else
              v36 = v27 + 1;
            if (v34 < v35)
              v37 = v26;
            else
              v37 = v26 + 1;
            v38 = v30 + v34;
            if (v30 + v34 < 0)
              v38 = -v38;
            v39 = (double)v38;
            v40 = v32 <= (double)v38;
            if (v32 <= (double)v38)
              v41 = v33;
            else
              v41 = v26;
            if (v40)
              v42 = v31;
            else
              v42 = v27;
            if (v40)
              v39 = v32;
            if (v34 == v35)
            {
              LODWORD(v33) = v41;
              v31 = v42;
              ++v27;
            }
            else
            {
              v27 = v36;
            }
            if (v34 == v35)
              ++v26;
            else
              v26 = v37;
            if (v34 == v35)
              v32 = v39;
            v25 = v26;
          }
          while (v24 > v26);
          if ((_DWORD)v33 != -1)
          {
            std::vector<quasar::PreTokenToPostTokenItnMap>::resize((uint64_t)&v121, v31 + 1);
            std::vector<quasar::Token>::resize((uint64_t *)&v125, *(int *)&v121[16 * v31 + 12] + 1);
            v20 = *v10;
            v24 = (v10[1] - *v10) >> 4;
            if (v24 <= (int)v33)
              goto LABEL_146;
            v91 = *(_DWORD *)&v121[16 * v31 + 12] - *(_DWORD *)&v20[16 * (int)v33 + 8] + 1;
LABEL_63:
            if (v24 > (int)v33)
            {
              v33 = (int)v33;
              v43 = vdup_n_s32(v91);
              while (1)
              {
                v44 = &v20[16 * v33];
                v45 = v122;
                if (v122 >= v123)
                {
                  v47 = (v122 - v121) >> 4;
                  v48 = v47 + 1;
                  if ((unint64_t)(v47 + 1) >> 60)
                    std::vector<int>::__throw_length_error[abi:ne180100]();
                  v49 = v123 - v121;
                  if ((v123 - v121) >> 3 > v48)
                    v48 = v49 >> 3;
                  if ((unint64_t)v49 >= 0x7FFFFFFFFFFFFFF0)
                    v50 = 0xFFFFFFFFFFFFFFFLL;
                  else
                    v50 = v48;
                  if (v50)
                    v51 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<int,unsigned long>>>((uint64_t)&v123, v50);
                  else
                    v51 = 0;
                  v52 = &v51[16 * v47];
                  *(_OWORD *)v52 = *(_OWORD *)v44;
                  v54 = v121;
                  v53 = v122;
                  v55 = v52;
                  if (v122 != v121)
                  {
                    do
                    {
                      *((_OWORD *)v55 - 1) = *((_OWORD *)v53 - 1);
                      v55 -= 16;
                      v53 -= 16;
                    }
                    while (v53 != v54);
                    v53 = v121;
                  }
                  v46 = (int32x2_t *)(v52 + 16);
                  v121 = v55;
                  v122 = v52 + 16;
                  v123 = &v51[16 * v50];
                  if (v53)
                    operator delete(v53);
                }
                else
                {
                  *(_OWORD *)v122 = *(_OWORD *)v44;
                  v46 = (int32x2_t *)(v45 + 16);
                }
                v122 = (char *)v46;
                v46[-1] = vadd_s32(v46[-1], v43);
                v10 = v119;
                v20 = *v119;
                v56 = v119[1];
                if (v33 >= (v56 - *v119) >> 4)
                  goto LABEL_144;
                v57 = &v20[16 * v33];
                v58 = *((int *)v57 + 2);
                if ((int)v58 <= *((_DWORD *)v57 + 3))
                  break;
LABEL_89:
                if (++v33 >= (v56 - v20) >> 4)
                  goto LABEL_90;
              }
              v59 = 224 * (int)v58;
              while (1)
              {
                v60 = (const quasar::Token *)(v117.__r_.__value_.__r.__words[0] + v59);
                v61 = *((_QWORD *)&v125 + 1);
                if (*((_QWORD *)&v125 + 1) >= v126)
                {
                  v62 = std::vector<quasar::Token>::__push_back_slow_path<quasar::Token const&>((uint64_t *)&v125, v60);
                }
                else
                {
                  quasar::Token::Token(*((std::string **)&v125 + 1), v60);
                  v62 = v61 + 224;
                }
                *((_QWORD *)&v125 + 1) = v62;
                v20 = *v10;
                v56 = v10[1];
                if (v33 >= (v56 - *v10) >> 4)
                  break;
                ++v58;
                v59 += 224;
                if (v58 > *(int *)&v20[16 * v33 + 12])
                  goto LABEL_89;
              }
LABEL_144:
              std::vector<std::pair<int,int>>::__throw_out_of_range[abi:ne180100]();
            }
LABEL_90:
            v64 = (int *)v121;
            v63 = (int *)v122;
            v65 = *(int *)(a1 + 16);
            if (v65 + 1 < (unint64_t)((v122 - v121) >> 4))
            {
              v66 = ((unint64_t)(v122 - v121) >> 4) + ~(_DWORD)v65;
              if (v66)
              {
                v67 = (int *)&v121[16 * v66];
                v68 = v122 - (char *)v67;
                if (v122 != (char *)v67)
                  memmove(v121, v67, v122 - (char *)v67);
                v63 = (int *)((char *)v64 + v68);
                v122 = (char *)v64 + v68;
                v64 = (int *)v121;
              }
            }
            v70 = *((_QWORD *)&v125 + 1);
            v69 = v125;
            v71 = quasar::gLogLevel;
            if (v64 != v63
              && 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*((_QWORD *)&v125 + 1) - v125) >> 5) != *(v63 - 1) + 1
              && quasar::gLogLevel >= 4)
            {
              v112 = 0u;
              v113 = 0u;
              v110 = 0u;
              v111 = 0u;
              v108 = 0u;
              v109 = 0u;
              v106 = 0u;
              v107 = 0u;
              v104 = 0u;
              v105 = 0u;
              v102 = 0u;
              v103 = 0u;
              v100 = 0u;
              v101 = 0u;
              v98 = 0u;
              v99 = 0u;
              v97 = 0u;
              kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v97);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v97, (uint64_t)"Detected size mismatch between resultPostItn=", 45);
              v73 = (_QWORD *)std::ostream::operator<<();
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v73, (uint64_t)" and resultAlignment=", 21);
              std::ostream::operator<<();
              quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&v97);
              v70 = *((_QWORD *)&v125 + 1);
              v69 = v125;
              v71 = quasar::gLogLevel;
            }
            if (v71 >= 4)
            {
              v74 = *(_DWORD *)(a1 + 16);
              v112 = 0u;
              v113 = 0u;
              v110 = 0u;
              v111 = 0u;
              v108 = 0u;
              v109 = 0u;
              v106 = 0u;
              v107 = 0u;
              v104 = 0u;
              v105 = 0u;
              v102 = 0u;
              v103 = 0u;
              v100 = 0u;
              v101 = 0u;
              v98 = 0u;
              v99 = 0u;
              v97 = 0u;
              kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v97);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v97, (uint64_t)"#", 1);
              quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&v97);
              if (quasar::gLogLevel >= 4)
              {
                v112 = 0u;
                v113 = 0u;
                v110 = 0u;
                v111 = 0u;
                v108 = 0u;
                v109 = 0u;
                v106 = 0u;
                v107 = 0u;
                v104 = 0u;
                v105 = 0u;
                v102 = 0u;
                v103 = 0u;
                v100 = 0u;
                v101 = 0u;
                v98 = 0u;
                v99 = 0u;
                v97 = 0u;
                kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v97);
                v75 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v97, (uint64_t)"chunk_tokens_str: ", 18);
                quasar::tokens2Str((uint64_t *)&v118, &v96);
                if ((v96.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  v76 = &v96;
                else
                  v76 = (std::string *)v96.__r_.__value_.__r.__words[0];
                if ((v96.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  v77 = HIBYTE(v96.__r_.__value_.__r.__words[2]);
                else
                  v77 = v96.__r_.__value_.__l.__size_;
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v75, (uint64_t)v76, v77);
                if (SHIBYTE(v96.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v96.__r_.__value_.__l.__data_);
                quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&v97);
                if (quasar::gLogLevel >= 4)
                {
                  v112 = 0u;
                  v113 = 0u;
                  v110 = 0u;
                  v111 = 0u;
                  v108 = 0u;
                  v109 = 0u;
                  v106 = 0u;
                  v107 = 0u;
                  v104 = 0u;
                  v105 = 0u;
                  v102 = 0u;
                  v103 = 0u;
                  v100 = 0u;
                  v101 = 0u;
                  v98 = 0u;
                  v99 = 0u;
                  v97 = 0u;
                  kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v97);
                  v78 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v97, (uint64_t)"chunk_post_itn: ", 16);
                  quasar::tokens2Str((uint64_t *)&v117, &v96);
                  if ((v96.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                    v79 = &v96;
                  else
                    v79 = (std::string *)v96.__r_.__value_.__r.__words[0];
                  if ((v96.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                    v80 = HIBYTE(v96.__r_.__value_.__r.__words[2]);
                  else
                    v80 = v96.__r_.__value_.__l.__size_;
                  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v78, (uint64_t)v79, v80);
                  if (SHIBYTE(v96.__r_.__value_.__r.__words[2]) < 0)
                    operator delete(v96.__r_.__value_.__l.__data_);
                  quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&v97);
                  if (quasar::gLogLevel >= 4)
                  {
                    v112 = 0u;
                    v113 = 0u;
                    v110 = 0u;
                    v111 = 0u;
                    v108 = 0u;
                    v109 = 0u;
                    v106 = 0u;
                    v107 = 0u;
                    v104 = 0u;
                    v105 = 0u;
                    v102 = 0u;
                    v103 = 0u;
                    v100 = 0u;
                    v101 = 0u;
                    v98 = 0u;
                    v99 = 0u;
                    v97 = 0u;
                    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v97);
                    v81 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v97, (uint64_t)"chunk_alignment: ", 17);
                    quasar::operator<<(v81, (uint64_t *)v10);
                    quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&v97);
                    if (quasar::gLogLevel >= 4)
                    {
                      v112 = 0u;
                      v113 = 0u;
                      v110 = 0u;
                      v111 = 0u;
                      v108 = 0u;
                      v109 = 0u;
                      v106 = 0u;
                      v107 = 0u;
                      v104 = 0u;
                      v105 = 0u;
                      v102 = 0u;
                      v103 = 0u;
                      v100 = 0u;
                      v101 = 0u;
                      v98 = 0u;
                      v99 = 0u;
                      v97 = 0u;
                      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v97);
                      v82 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v97, (uint64_t)"result_post_itn: ", 17);
                      v83 = -1227133513 * ((unint64_t)(v70 - v69) >> 5) - 2 * v74;
                      quasar::tokens2Str(v125 + 224 * (v83 & ~(v83 >> 31)), *((uint64_t *)&v125 + 1), &v96);
                      if ((v96.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                        v84 = &v96;
                      else
                        v84 = (std::string *)v96.__r_.__value_.__r.__words[0];
                      if ((v96.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                        v85 = HIBYTE(v96.__r_.__value_.__r.__words[2]);
                      else
                        v85 = v96.__r_.__value_.__l.__size_;
                      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v82, (uint64_t)v84, v85);
                      if (SHIBYTE(v96.__r_.__value_.__r.__words[2]) < 0)
                        operator delete(v96.__r_.__value_.__l.__data_);
                      quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&v97);
                      if (quasar::gLogLevel >= 4)
                      {
                        v112 = 0u;
                        v113 = 0u;
                        v110 = 0u;
                        v111 = 0u;
                        v108 = 0u;
                        v109 = 0u;
                        v106 = 0u;
                        v107 = 0u;
                        v104 = 0u;
                        v105 = 0u;
                        v102 = 0u;
                        v103 = 0u;
                        v100 = 0u;
                        v101 = 0u;
                        v98 = 0u;
                        v99 = 0u;
                        v97 = 0u;
                        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v97);
                        v86 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v97, (uint64_t)"result_alignment: ", 18);
                        quasar::operator<<(v86, (uint64_t *)&v121);
                        quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&v97);
                      }
                    }
                  }
                }
              }
            }
            v9 = *(_DWORD *)(a1 + 16) + v9 - *(_DWORD *)(a1 + 20);
            v14 = v95;
            goto LABEL_133;
          }
        }
      }
      if (v121 == v122)
      {
        LODWORD(v33) = 0;
      }
      else
      {
        if (quasar::gLogLevel >= 4)
        {
          v112 = 0u;
          v113 = 0u;
          v110 = 0u;
          v111 = 0u;
          v108 = 0u;
          v109 = 0u;
          v106 = 0u;
          v107 = 0u;
          v104 = 0u;
          v105 = 0u;
          v102 = 0u;
          v103 = 0u;
          v100 = 0u;
          v101 = 0u;
          v98 = 0u;
          v99 = 0u;
          v97 = 0u;
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v97);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v97, (uint64_t)"WARNING: No concatenation point found", 37);
          quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&v97);
          v20 = *v10;
          v21 = (int32x2_t *)v10[1];
        }
        if (v21 == (int32x2_t *)v20)
LABEL_146:
          std::vector<std::pair<int,int>>::__throw_out_of_range[abi:ne180100]();
        LODWORD(v33) = 0;
        v91 = *((_DWORD *)v122 - 1) - *((_DWORD *)v20 + 2) + 1;
        v24 = ((char *)v21 - v20) >> 4;
      }
      goto LABEL_63;
    }
    *a6 = 0;
    a6[1] = 0;
    a6[2] = 0;
LABEL_133:
    *(_QWORD *)&v97 = &v117;
    std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&v97);
    *(_QWORD *)&v97 = &v118;
    std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&v97);
    if (v14 == size)
      goto LABEL_136;
  }
  *(_OWORD *)a6 = v125;
  a6[2] = v126;
  v126 = 0;
  v125 = 0uLL;
LABEL_136:
  v87 = v120;
  if (v120)
  {
    v88 = (unint64_t *)&v120->__shared_owners_;
    do
      v89 = __ldaxr(v88);
    while (__stlxr(v89 - 1, v88));
    if (!v89)
    {
      ((void (*)(std::__shared_weak_count *))v87->__on_zero_shared)(v87);
      std::__shared_weak_count::__release_weak(v87);
    }
  }
  if (v121)
  {
    v122 = v121;
    operator delete(v121);
  }
  *(_QWORD *)&v97 = v124;
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&v97);
  *(_QWORD *)&v97 = &v125;
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&v97);
}

void sub_1AD8C8ECC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,char a57)
{
  uint64_t v57;
  void *v59;

  a22 = v57 - 256;
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&a22);
  a22 = v57 - 232;
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&a22);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](v57 - 208);
  v59 = *(void **)(v57 - 192);
  if (v59)
  {
    *(_QWORD *)(v57 - 184) = v59;
    operator delete(v59);
  }
  a22 = v57 - 168;
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&a22);
  a22 = v57 - 144;
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&a22);
  _Unwind_Resume(a1);
}

void std::vector<quasar::PreTokenToPostTokenItnMap>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v2;

  v2 = (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 4;
  if (a2 <= v2)
  {
    if (a2 < v2)
      *(_QWORD *)(a1 + 8) = *(_QWORD *)a1 + 16 * a2;
  }
  else
  {
    std::vector<quasar::PreTokenToPostTokenItnMap>::__append((void **)a1, a2 - v2);
  }
}

_QWORD *std::allocate_shared[abi:ne180100]<kaldi::quasar::Vocab,std::allocator<kaldi::quasar::Vocab>,std::istream &,BOOL &,void>@<X0>(uint64_t a1@<X1>, unsigned __int8 *a2@<X2>, _QWORD *a3@<X8>)
{
  _QWORD *v6;
  _QWORD *result;

  v6 = operator new(0xC8uLL);
  result = std::__shared_ptr_emplace<kaldi::quasar::Vocab>::__shared_ptr_emplace[abi:ne180100]<std::istream &,BOOL &,std::allocator<kaldi::quasar::Vocab>,0>(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  return result;
}

void sub_1AD8C9070(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<kaldi::quasar::Vocab>::__shared_ptr_emplace[abi:ne180100]<std::istream &,BOOL &,std::allocator<kaldi::quasar::Vocab>,0>(_QWORD *a1, uint64_t a2, unsigned __int8 *a3)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1E5D42170;
  kaldi::quasar::Vocab::Vocab(a1 + 3, a2, *a3, 1);
  return a1;
}

void sub_1AD8C90C4(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<kaldi::quasar::Vocab>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D42170;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<kaldi::quasar::Vocab>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D42170;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF44D190);
}

void std::__shared_ptr_emplace<kaldi::quasar::Vocab>::__on_zero_shared(uint64_t a1)
{
  char v1;

  std::allocator<kaldi::quasar::Vocab>::destroy[abi:ne180100]((uint64_t)&v1, a1 + 24);
}

void std::allocator<kaldi::quasar::Vocab>::destroy[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void *v3;
  void **v4;

  v3 = *(void **)(a2 + 144);
  if (v3)
  {
    *(_QWORD *)(a2 + 152) = v3;
    operator delete(v3);
  }
  v4 = (void **)(a2 + 120);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v4);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(a2 + 80);
  if (*(char *)(a2 + 79) < 0)
    operator delete(*(void **)(a2 + 56));
  if (*(char *)(a2 + 55) < 0)
    operator delete(*(void **)(a2 + 32));
  if (*(char *)(a2 + 31) < 0)
    operator delete(*(void **)(a2 + 8));
}

uint64_t *std::__tree<std::__value_type<std::string,std::vector<int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<int>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t **a1, const void **a2, uint64_t a3, __int128 **a4)
{
  uint64_t **v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t *v10[3];
  uint64_t v11;

  v6 = (uint64_t **)std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__find_equal<std::string>((uint64_t)a1, &v11, a2);
  v7 = *v6;
  if (!*v6)
  {
    v8 = v6;
    std::__tree<std::__value_type<std::string,std::vector<int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<int>>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)a1, a4, (uint64_t)v10);
    std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at(a1, v11, v8, v10[0]);
    v7 = v10[0];
    v10[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::vector<int>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::vector<int>>,void *>>>>::reset[abi:ne180100]((uint64_t)v10, 0);
  }
  return v7;
}

void std::__tree<std::__value_type<std::string,std::vector<int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<int>>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1@<X0>, __int128 **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5;
  _QWORD *v6;
  std::string *v7;
  __int128 *v8;
  __int128 v9;

  v5 = a1 + 8;
  v6 = operator new(0x50uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  v7 = (std::string *)(v6 + 4);
  v8 = *a2;
  if (*((char *)*a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)v8, *((_QWORD *)v8 + 1));
  }
  else
  {
    v9 = *v8;
    v6[6] = *((_QWORD *)v8 + 2);
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v9;
  }
  v6[7] = 0;
  v6[8] = 0;
  v6[9] = 0;
  *(_BYTE *)(a3 + 16) = 1;
}

void sub_1AD8C92E8(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::vector<int>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::vector<int>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::vector<int>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::vector<int>>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::vector<float>>,0>((uint64_t)v2 + 32);
    operator delete(v2);
  }
}

uint64_t quasar::InverseTextNormalizer::RegexFeatInfo::RegexFeatInfo(uint64_t a1, int a2)
{
  _QWORD *v3;

  *(_DWORD *)a1 = a2;
  v3 = (_QWORD *)(a1 + 24);
  std::allocate_shared[abi:ne180100]<quasar::URegularExpressionWrapper,std::allocator<quasar::URegularExpressionWrapper>,std::string const&,void>((_QWORD *)(a1 + 8));
  std::allocate_shared[abi:ne180100]<quasar::URegularExpressionWrapper,std::allocator<quasar::URegularExpressionWrapper>,std::string const&,void>(v3);
  return a1;
}

void sub_1AD8C93A4(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

_QWORD *std::allocate_shared[abi:ne180100]<quasar::URegularExpressionWrapper,std::allocator<quasar::URegularExpressionWrapper>,std::string const&,void>@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v2;
  _QWORD *result;

  v2 = operator new(0x20uLL);
  result = std::__shared_ptr_emplace<quasar::URegularExpressionWrapper>::__shared_ptr_emplace[abi:ne180100]<std::string const&,std::allocator<quasar::URegularExpressionWrapper>,0>(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  return result;
}

void sub_1AD8C93FC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<quasar::URegularExpressionWrapper>::__shared_ptr_emplace[abi:ne180100]<std::string const&,std::allocator<quasar::URegularExpressionWrapper>,0>(_QWORD *a1)
{
  a1[2] = 0;
  *a1 = &unk_1E5D444E0;
  a1[1] = 0;
  quasar::URegularExpressionWrapper::URegularExpressionWrapper(a1 + 3);
  return a1;
}

void sub_1AD8C9448(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<quasar::URegularExpressionWrapper>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D444E0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<quasar::URegularExpressionWrapper>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D444E0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF44D190);
}

void std::__shared_ptr_emplace<quasar::URegularExpressionWrapper>::__on_zero_shared(uint64_t a1)
{
  quasar::URegularExpressionWrapper::~URegularExpressionWrapper((quasar::URegularExpressionWrapper *)(a1 + 24));
}

double kaldi::Timer::ElapsedCPU(kaldi::Timer *this, clockid_t a2)
{
  _QWORD v3[34];

  if (!*((_BYTE *)this + 24))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v3);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v3, "Process CPU time was not enabled");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v3);
  }
  return kaldi::Timer::GetSeconds((kaldi::Timer *)0xC, a2) - *((double *)this + 1);
}

void std::__list_imp<std::shared_ptr<quasar::CommandTransform>>::clear(uint64_t *a1)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t *v5;

  if (a1[2])
  {
    v2 = *a1;
    v3 = (uint64_t *)a1[1];
    v4 = *v3;
    *(_QWORD *)(v4 + 8) = *(_QWORD *)(*a1 + 8);
    **(_QWORD **)(v2 + 8) = v4;
    a1[2] = 0;
    if (v3 != a1)
    {
      do
      {
        v5 = (uint64_t *)v3[1];
        std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)(v3 + 2));
        operator delete(v3);
        v3 = v5;
      }
      while (v5 != a1);
    }
  }
}

void std::wstring_convert<std::codecvt_utf8<char32_t,1114111ul,(std::codecvt_mode)0>,char32_t,std::allocator<char32_t>,std::allocator<char>>::to_bytes(uint64_t a1@<X0>, char *a2@<X1>, char *a3@<X2>, std::string *a4@<X8>)
{
  char *v7;
  std::string::size_type v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __n128 v12;
  __int128 v13;
  std::string::size_type size;
  char *v15;
  char *v16;
  int v17;
  BOOL v18;
  std::string *v19;
  uint64_t v20;
  std::string::size_type v21;
  std::string *v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  char *v27;
  std::string *v28;
  std::string::size_type v29;
  std::string::size_type v30;
  std::string::size_type v31;
  std::string::size_type v32;
  int v33;
  BOOL v34;
  std::string *v35;
  char *v36;
  std::string::size_type v37;
  char *i;
  int v39;
  std::string::size_type v40;
  char *v41;
  std::string::size_type v42;
  std::string::size_type v43;
  std::string::size_type v44;
  std::string::size_type v45;
  uint64_t v46;
  char *v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  uint64_t v56;

  v56 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)(a1 + 184) = 0;
  if (!*(_QWORD *)(a1 + 48))
    goto LABEL_62;
  v7 = a2;
  std::string::basic_string[abi:ne180100](a4, (a3 - a2) >> 1, 0);
  if (a3 == v7)
  {
    v23 = *(_OWORD *)(a1 + 136);
    v52 = *(_OWORD *)(a1 + 120);
    v53 = v23;
    v24 = *(_OWORD *)(a1 + 168);
    v54 = *(_OWORD *)(a1 + 152);
    v55 = v24;
    v25 = *(_OWORD *)(a1 + 72);
    v48 = *(_OWORD *)(a1 + 56);
    v49 = v25;
    v26 = *(_OWORD *)(a1 + 104);
    v50 = *(_OWORD *)(a1 + 88);
    v51 = v26;
  }
  else
  {
    if ((a4->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v8 = 22;
    else
      v8 = (a4->__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
    std::string::resize(a4, v8, 0);
    v9 = *(_OWORD *)(a1 + 136);
    v52 = *(_OWORD *)(a1 + 120);
    v53 = v9;
    v10 = *(_OWORD *)(a1 + 168);
    v54 = *(_OWORD *)(a1 + 152);
    v55 = v10;
    v11 = *(_OWORD *)(a1 + 72);
    v48 = *(_OWORD *)(a1 + 56);
    v49 = v11;
    v12 = *(__n128 *)(a1 + 88);
    v13 = *(_OWORD *)(a1 + 104);
    size = HIBYTE(a4->__r_.__value_.__r.__words[2]);
    if ((size & 0x80u) == 0)
      v15 = (char *)a4;
    else
      v15 = (char *)a4->__r_.__value_.__r.__words[0];
    if ((size & 0x80u) != 0)
      size = a4->__r_.__value_.__l.__size_;
    v16 = &v15[size];
    v50 = *(_OWORD *)(a1 + 88);
    v51 = v13;
    while (1)
    {
      v17 = (*(uint64_t (**)(_QWORD, __int128 *, char *, char *, char **, char *, char *, uint64_t *, __n128))(**(_QWORD **)(a1 + 48) + 24))(*(_QWORD *)(a1 + 48), &v48, v7, a3, &v47, v15, v16, &v46, v12);
      v18 = v47 == v7;
      *(_QWORD *)(a1 + 184) += (v47 - v7) >> 2;
      if (v18)
        goto LABEL_60;
      if (v17 != 1)
        break;
      if ((a4->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v19 = a4;
      else
        v19 = (std::string *)a4->__r_.__value_.__r.__words[0];
      v20 = v46 - (_QWORD)v19;
      std::string::resize(a4, 2 * (v46 - (_QWORD)v19), 0);
      v21 = HIBYTE(a4->__r_.__value_.__r.__words[2]);
      if ((v21 & 0x80u) == 0)
        v22 = a4;
      else
        v22 = (std::string *)a4->__r_.__value_.__r.__words[0];
      v15 = (char *)v22 + v20;
      if ((v21 & 0x80u) != 0)
        v21 = a4->__r_.__value_.__l.__size_;
      v16 = (char *)v22 + v21;
      v7 = v47;
      if (v47 >= a3)
        goto LABEL_60;
    }
    if (v17)
    {
      if (v17 != 3)
        goto LABEL_60;
      if ((a4->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v27 = (char *)a4;
      else
        v27 = (char *)a4->__r_.__value_.__r.__words[0];
      std::string::resize(a4, v15 - v27, 0);
      std::string::append[abi:ne180100]<char const*,0>(a4, v7, a3);
    }
    else
    {
      if ((a4->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v28 = a4;
      else
        v28 = (std::string *)a4->__r_.__value_.__r.__words[0];
      std::string::resize(a4, v46 - (_QWORD)v28, 0);
    }
  }
  v29 = HIBYTE(a4->__r_.__value_.__r.__words[2]);
  v30 = a4->__r_.__value_.__l.__size_;
  if ((v29 & 0x80u) == 0)
    v31 = 22;
  else
    v31 = (a4->__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
  std::string::resize(a4, v31, 0);
  if ((v29 & 0x80u) == 0)
    v32 = v29;
  else
    v32 = v30;
  v33 = SHIBYTE(a4->__r_.__value_.__r.__words[2]);
  v34 = v33 < 0;
  if (v33 >= 0)
    v35 = a4;
  else
    v35 = (std::string *)a4->__r_.__value_.__r.__words[0];
  v36 = (char *)v35 + v32;
  if (v34)
    v37 = a4->__r_.__value_.__l.__size_;
  else
    v37 = HIBYTE(a4->__r_.__value_.__r.__words[2]);
  for (i = &v36[v37]; ; i = (char *)(v43 + v42))
  {
    v39 = (*(uint64_t (**)(_QWORD, __int128 *, char *, char *, char **))(**(_QWORD **)(a1 + 48) + 40))(*(_QWORD *)(a1 + 48), &v48, v36, i, &v47);
    if (v39 != 1)
      break;
    if ((a4->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v40 = (std::string::size_type)a4;
    else
      v40 = a4->__r_.__value_.__r.__words[0];
    v41 = &v47[-v40];
    std::string::resize(a4, 2 * (_QWORD)&v47[-v40], 0);
    v42 = HIBYTE(a4->__r_.__value_.__r.__words[2]);
    if ((v42 & 0x80u) == 0)
      v43 = (std::string::size_type)a4;
    else
      v43 = a4->__r_.__value_.__r.__words[0];
    v36 = &v41[v43];
    if ((v42 & 0x80u) != 0)
      v42 = a4->__r_.__value_.__l.__size_;
  }
  if (!v39)
  {
    v36 = v47;
    goto LABEL_68;
  }
  if (v39 == 3)
  {
LABEL_68:
    if ((a4->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v45 = (std::string::size_type)a4;
    else
      v45 = a4->__r_.__value_.__r.__words[0];
    std::string::resize(a4, (std::string::size_type)&v36[-v45], 0);
    return;
  }
LABEL_60:
  if (SHIBYTE(a4->__r_.__value_.__r.__words[2]) < 0)
    operator delete(a4->__r_.__value_.__l.__data_);
LABEL_62:
  if ((*(char *)(a1 + 23) & 0x80000000) == 0)
  {
    if (*(_BYTE *)(a1 + 23))
    {
      *(_OWORD *)&a4->__r_.__value_.__l.__data_ = *(_OWORD *)a1;
      a4->__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 16);
      return;
    }
LABEL_73:
    std::__throw_range_error[abi:ne180100]("wstring_convert: to_bytes error");
  }
  v44 = *(_QWORD *)(a1 + 8);
  if (!v44)
    goto LABEL_73;
  std::string::__init_copy_ctor_external(a4, *(const std::string::value_type **)a1, v44);
}

void sub_1AD8C991C(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::shared_ptr<fst::MappedFile>::shared_ptr[abi:ne180100]<fst::MappedFile,void>(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  *a1 = a2;
  v4 = (_QWORD *)operator new();
  *v4 = &unk_1E5D45AC0;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_1AD8C99B4(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_pointer<fst::MappedFile *,std::shared_ptr<fst::MappedFile>::__shared_ptr_default_delete<fst::MappedFile,fst::MappedFile>,std::allocator<fst::MappedFile>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t std::__shared_ptr_pointer<fst::MappedFile *,std::shared_ptr<fst::MappedFile>::__shared_ptr_default_delete<fst::MappedFile,fst::MappedFile>,std::allocator<fst::MappedFile>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<fst::MappedFile *,std::shared_ptr<fst::MappedFile>::__shared_ptr_default_delete<fst::MappedFile,fst::MappedFile>,std::allocator<fst::MappedFile>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

_QWORD *std::shared_ptr<quasar::FstTokenTransform>::shared_ptr[abi:ne180100]<quasar::SpaceApplyDefaultFstTokenTransform,void>(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  *a1 = a2;
  v4 = (_QWORD *)operator new();
  *v4 = &unk_1E5D46380;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_1AD8C9AAC(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_pointer<quasar::SpaceApplyDefaultFstTokenTransform *,std::shared_ptr<quasar::FstTokenTransform>::__shared_ptr_default_delete<quasar::FstTokenTransform,quasar::SpaceApplyDefaultFstTokenTransform>,std::allocator<quasar::SpaceApplyDefaultFstTokenTransform>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t std::__shared_ptr_pointer<quasar::SpaceApplyDefaultFstTokenTransform *,std::shared_ptr<quasar::FstTokenTransform>::__shared_ptr_default_delete<quasar::FstTokenTransform,quasar::SpaceApplyDefaultFstTokenTransform>,std::allocator<quasar::SpaceApplyDefaultFstTokenTransform>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<quasar::SpaceApplyDefaultFstTokenTransform *,std::shared_ptr<quasar::FstTokenTransform>::__shared_ptr_default_delete<quasar::FstTokenTransform,quasar::SpaceApplyDefaultFstTokenTransform>,std::allocator<quasar::SpaceApplyDefaultFstTokenTransform>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

_QWORD *std::shared_ptr<quasar::FstTokenTransform>::shared_ptr[abi:ne180100]<quasar::RewriteApplyCapitalizeFstTokenTransform,void>(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  *a1 = a2;
  v4 = (_QWORD *)operator new();
  *v4 = &unk_1E5D463F0;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_1AD8C9BA4(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_pointer<quasar::RewriteApplyCapitalizeFstTokenTransform *,std::shared_ptr<quasar::FstTokenTransform>::__shared_ptr_default_delete<quasar::FstTokenTransform,quasar::RewriteApplyCapitalizeFstTokenTransform>,std::allocator<quasar::RewriteApplyCapitalizeFstTokenTransform>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t std::__shared_ptr_pointer<quasar::RewriteApplyCapitalizeFstTokenTransform *,std::shared_ptr<quasar::FstTokenTransform>::__shared_ptr_default_delete<quasar::FstTokenTransform,quasar::RewriteApplyCapitalizeFstTokenTransform>,std::allocator<quasar::RewriteApplyCapitalizeFstTokenTransform>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<quasar::RewriteApplyCapitalizeFstTokenTransform *,std::shared_ptr<quasar::FstTokenTransform>::__shared_ptr_default_delete<quasar::FstTokenTransform,quasar::RewriteApplyCapitalizeFstTokenTransform>,std::allocator<quasar::RewriteApplyCapitalizeFstTokenTransform>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

_QWORD *std::shared_ptr<quasar::FstTokenTransform>::shared_ptr[abi:ne180100]<quasar::RewriteApplyDefaultFstTokenTransform,void>(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  *a1 = a2;
  v4 = (_QWORD *)operator new();
  *v4 = &unk_1E5D463B8;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_1AD8C9C9C(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_pointer<quasar::RewriteApplyDefaultFstTokenTransform *,std::shared_ptr<quasar::FstTokenTransform>::__shared_ptr_default_delete<quasar::FstTokenTransform,quasar::RewriteApplyDefaultFstTokenTransform>,std::allocator<quasar::RewriteApplyDefaultFstTokenTransform>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t std::__shared_ptr_pointer<quasar::RewriteApplyDefaultFstTokenTransform *,std::shared_ptr<quasar::FstTokenTransform>::__shared_ptr_default_delete<quasar::FstTokenTransform,quasar::RewriteApplyDefaultFstTokenTransform>,std::allocator<quasar::RewriteApplyDefaultFstTokenTransform>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<quasar::RewriteApplyDefaultFstTokenTransform *,std::shared_ptr<quasar::FstTokenTransform>::__shared_ptr_default_delete<quasar::FstTokenTransform,quasar::RewriteApplyDefaultFstTokenTransform>,std::allocator<quasar::RewriteApplyDefaultFstTokenTransform>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

_QWORD *std::shared_ptr<quasar::FstTokenTransform>::shared_ptr[abi:ne180100]<quasar::ComposeFstTokenTransform,void>(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  *a1 = a2;
  v4 = (_QWORD *)operator new();
  *v4 = &unk_1E5D462D8;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_1AD8C9D94(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_pointer<quasar::ComposeFstTokenTransform *,std::shared_ptr<quasar::FstTokenTransform>::__shared_ptr_default_delete<quasar::FstTokenTransform,quasar::ComposeFstTokenTransform>,std::allocator<quasar::ComposeFstTokenTransform>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t std::__shared_ptr_pointer<quasar::ComposeFstTokenTransform *,std::shared_ptr<quasar::FstTokenTransform>::__shared_ptr_default_delete<quasar::FstTokenTransform,quasar::ComposeFstTokenTransform>,std::allocator<quasar::ComposeFstTokenTransform>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<quasar::ComposeFstTokenTransform *,std::shared_ptr<quasar::FstTokenTransform>::__shared_ptr_default_delete<quasar::FstTokenTransform,quasar::ComposeFstTokenTransform>,std::allocator<quasar::ComposeFstTokenTransform>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<quasar::FstTokenTransform>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<quasar::FstTokenTransform>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<quasar::FstTokenTransform>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<quasar::FstTokenTransform>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1, unsigned __int8 *a2, uint64_t a3, __int128 **a4)
{
  unint64_t v4;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  unint64_t v13;
  unsigned __int8 **v14;
  unsigned __int8 *i;
  unint64_t v16;
  float v17;
  float v18;
  _BOOL8 v19;
  unint64_t v20;
  unint64_t v21;
  size_t v22;
  _QWORD *v23;
  unint64_t v24;
  _QWORD v26[3];

  v8 = (_QWORD *)(a1 + 24);
  v9 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  v10 = v9;
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      v4 = v9;
      if (v9 >= v11)
        v4 = v9 % v11;
    }
    else
    {
      v4 = (v11 - 1) & v9;
    }
    v14 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v4);
    if (v14)
    {
      for (i = *v14; i; i = *(unsigned __int8 **)i)
      {
        v16 = *((_QWORD *)i + 1);
        if (v16 == v10)
        {
          if ((std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2) & 1) != 0)
            return i;
        }
        else
        {
          if (v13 > 1)
          {
            if (v16 >= v11)
              v16 %= v11;
          }
          else
          {
            v16 &= v11 - 1;
          }
          if (v16 != v4)
            break;
        }
      }
    }
  }
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<quasar::FstTokenTransform>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<quasar::FstTokenTransform>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<quasar::FstTokenTransform>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<quasar::FstTokenTransform>>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1, v10, a4, (uint64_t)v26);
  v17 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v18 = *(float *)(a1 + 32);
  if (!v11 || (float)(v18 * (float)v11) < v17)
  {
    v19 = 1;
    if (v11 >= 3)
      v19 = (v11 & (v11 - 1)) != 0;
    v20 = v19 | (2 * v11);
    v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21)
      v22 = v21;
    else
      v22 = v20;
    std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::__rehash<true>(a1, v22);
    v11 = *(_QWORD *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
        v4 = v10 % v11;
      else
        v4 = v10;
    }
    else
    {
      v4 = (v11 - 1) & v10;
    }
  }
  v23 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v23)
  {
    *(_QWORD *)v26[0] = *v23;
    *v23 = v26[0];
  }
  else
  {
    *(_QWORD *)v26[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v26[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = a1 + 16;
    if (*(_QWORD *)v26[0])
    {
      v24 = *(_QWORD *)(*(_QWORD *)v26[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v24 >= v11)
          v24 %= v11;
      }
      else
      {
        v24 &= v11 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v24) = v26[0];
    }
  }
  i = (unsigned __int8 *)v26[0];
  v26[0] = 0;
  ++*v8;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>,void *>>>>::reset[abi:ne180100]((uint64_t)v26, 0);
  return i;
}

void sub_1AD8CA0B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

void std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<quasar::FstTokenTransform>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<quasar::FstTokenTransform>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<quasar::FstTokenTransform>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<quasar::FstTokenTransform>>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1@<X0>, uint64_t a2@<X1>, __int128 **a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v7;
  _QWORD *v8;
  std::string *v9;
  __int128 *v10;
  __int128 v11;

  v7 = a1 + 16;
  v8 = operator new(0x38uLL);
  *(_QWORD *)a4 = v8;
  *(_QWORD *)(a4 + 8) = v7;
  *(_BYTE *)(a4 + 16) = 0;
  *v8 = 0;
  v8[1] = a2;
  v9 = (std::string *)(v8 + 2);
  v10 = *a3;
  if (*((char *)*a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)v10, *((_QWORD *)v10 + 1));
  }
  else
  {
    v11 = *v10;
    v8[4] = *((_QWORD *)v10 + 2);
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = v11;
  }
  v8[5] = 0;
  v8[6] = 0;
  *(_BYTE *)(a4 + 16) = 1;
}

void sub_1AD8CA150(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

_QWORD *std::__hash_table<std::__hash_value_type<int,std::vector<std::shared_ptr<quasar::FstTokenTransform>>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::vector<std::shared_ptr<quasar::FstTokenTransform>>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::vector<std::shared_ptr<quasar::FstTokenTransform>>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::vector<std::shared_ptr<quasar::FstTokenTransform>>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(uint64_t a1, int *a2, uint64_t a3, _DWORD **a4)
{
  unint64_t v4;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  void **v10;
  _QWORD *v11;
  unint64_t v12;
  _QWORD *v13;
  float v14;
  float v15;
  _BOOL8 v16;
  unint64_t v17;
  unint64_t v18;
  size_t v19;
  uint64_t v20;
  _QWORD *v21;
  unint64_t v22;

  v7 = *a2;
  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v4 = *a2;
      if (v8 <= v7)
        v4 = v7 % v8;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
    v10 = *(void ***)(*(_QWORD *)a1 + 8 * v4);
    if (v10)
    {
      v11 = *v10;
      if (*v10)
      {
        do
        {
          v12 = v11[1];
          if (v12 == v7)
          {
            if (*((_DWORD *)v11 + 4) == (_DWORD)v7)
              return v11;
          }
          else
          {
            if (v9.u32[0] > 1uLL)
            {
              if (v12 >= v8)
                v12 %= v8;
            }
            else
            {
              v12 &= v8 - 1;
            }
            if (v12 != v4)
              break;
          }
          v11 = (_QWORD *)*v11;
        }
        while (v11);
      }
    }
  }
  v13 = (_QWORD *)(a1 + 16);
  v11 = operator new(0x30uLL);
  *v11 = 0;
  v11[1] = v7;
  *((_DWORD *)v11 + 4) = **a4;
  v11[4] = 0;
  v11[5] = 0;
  v11[3] = 0;
  v14 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v15 = *(float *)(a1 + 32);
  if (!v8 || (float)(v15 * (float)v8) < v14)
  {
    v16 = 1;
    if (v8 >= 3)
      v16 = (v8 & (v8 - 1)) != 0;
    v17 = v16 | (2 * v8);
    v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18)
      v19 = v18;
    else
      v19 = v17;
    std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::__rehash<true>(a1, v19);
    v8 = *(_QWORD *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v8 <= v7)
        v4 = v7 % v8;
      else
        v4 = v7;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
  }
  v20 = *(_QWORD *)a1;
  v21 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v21)
  {
    *v11 = *v21;
LABEL_38:
    *v21 = v11;
    goto LABEL_39;
  }
  *v11 = *v13;
  *v13 = v11;
  *(_QWORD *)(v20 + 8 * v4) = v13;
  if (*v11)
  {
    v22 = *(_QWORD *)(*v11 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v22 >= v8)
        v22 %= v8;
    }
    else
    {
      v22 &= v8 - 1;
    }
    v21 = (_QWORD *)(*(_QWORD *)a1 + 8 * v22);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return v11;
}

void sub_1AD8CA39C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  void **v10;
  uint64_t v11;

  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<int,std::vector<std::shared_ptr<quasar::FstTokenTransform>>>,void *>>>::operator()[abi:ne180100](v11, v10);
  _Unwind_Resume(a1);
}

void std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<int,std::vector<std::shared_ptr<quasar::FstTokenTransform>>>,void *>>>::operator()[abi:ne180100](uint64_t a1, void **__p)
{
  void **v3;

  if (*(_BYTE *)(a1 + 8))
  {
    v3 = __p + 3;
    std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100](&v3);
  }
  if (__p)
    operator delete(__p);
}

_QWORD *std::allocate_shared[abi:ne180100]<quasar::VocabId,std::allocator<quasar::VocabId>,std::string &,std::string &,std::string &,std::string &,void>@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, _QWORD *a5@<X8>)
{
  _QWORD *v10;
  _QWORD *result;

  v10 = operator new(0xD0uLL);
  result = std::__shared_ptr_emplace<quasar::VocabId>::__shared_ptr_emplace[abi:ne180100]<std::string &,std::string &,std::string &,std::string &,std::allocator<quasar::VocabId>,0>(v10, a1, a2, a3, a4);
  *a5 = v10 + 3;
  a5[1] = v10;
  return result;
}

void sub_1AD8CA464(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<quasar::VocabId>::__shared_ptr_emplace[abi:ne180100]<std::string &,std::string &,std::string &,std::string &,std::allocator<quasar::VocabId>,0>(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  a1[2] = 0;
  *a1 = &unk_1E5D45040;
  a1[1] = 0;
  quasar::VocabId::VocabId((uint64_t)(a1 + 3), a2, a3, a4, a5);
  return a1;
}

void sub_1AD8CA4B0(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<quasar::VocabId>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D45040;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<quasar::VocabId>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D45040;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF44D190);
}

void std::__shared_ptr_emplace<quasar::VocabId>::__on_zero_shared(uint64_t a1)
{
  quasar::VocabId::~VocabId((void **)(a1 + 24));
}

void quasar::VocabId::~VocabId(void **this)
{
  void *v2;

  if (*((char *)this + 183) < 0)
    operator delete(this[20]);
  if (*((char *)this + 159) < 0)
    operator delete(this[17]);
  if (*((char *)this + 135) < 0)
    operator delete(this[14]);
  if (*((char *)this + 111) < 0)
    operator delete(this[11]);
  if (*((_BYTE *)this + 72))
  {
    v2 = this[7];
    if (v2)
      MEMORY[0x1AF44D160](v2, 0x1000C8077774924);
  }
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)(this + 4));
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)(this + 2));
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this);
}

void std::__shared_ptr_emplace<std::map<std::string,std::vector<int>>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D455B8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<std::map<std::string,std::vector<int>>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D455B8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF44D190);
}

void std::__shared_ptr_emplace<std::map<std::string,std::vector<int>>>::__on_zero_shared(uint64_t a1)
{
  std::__tree<std::__value_type<std::string,std::vector<int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<int>>>>::destroy(a1 + 24, *(_QWORD **)(a1 + 32));
}

_QWORD *std::allocate_shared[abi:ne180100]<quasar::QuasarTextProcImpl,std::allocator<quasar::QuasarTextProcImpl>,std::vector<std::string> &,void>@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v2;
  _QWORD *result;

  v2 = operator new(0x48uLL);
  result = std::__shared_ptr_emplace<quasar::QuasarTextProcImpl>::__shared_ptr_emplace[abi:ne180100]<std::vector<std::string> &,std::allocator<quasar::QuasarTextProcImpl>,0>(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  return result;
}

void sub_1AD8CA64C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<quasar::QuasarTextProcImpl>::__shared_ptr_emplace[abi:ne180100]<std::vector<std::string> &,std::allocator<quasar::QuasarTextProcImpl>,0>(_QWORD *a1)
{
  a1[2] = 0;
  *a1 = &unk_1E5D43360;
  a1[1] = 0;
  quasar::QuasarTextProcImpl::QuasarTextProcImpl(a1 + 3);
  return a1;
}

void sub_1AD8CA698(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<quasar::QuasarTextProcImpl>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D43360;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<quasar::QuasarTextProcImpl>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D43360;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF44D190);
}

void std::__shared_ptr_emplace<quasar::QuasarTextProcImpl>::__on_zero_shared(uint64_t a1)
{
  quasar::QuasarTextProcImpl::~QuasarTextProcImpl((quasar::QuasarTextProcImpl *)(a1 + 24));
}

void std::__tree<std::__value_type<std::string,std::vector<int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<int>>>>::destroy(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<std::string,std::vector<int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<int>>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<std::string,std::vector<int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<int>>>>::destroy(a1, a2[1]);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::vector<float>>,0>((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

void std::vector<quasar::InverseTextNormalizer::RegexFeatInfo>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    std::vector<quasar::InverseTextNormalizer::RegexFeatInfo>::__base_destruct_at_end[abi:ne180100]((uint64_t)v2, (uint64_t)*v2);
    operator delete(**a1);
  }
}

uint64_t std::vector<quasar::InverseTextNormalizer::RegexFeatInfo>::__base_destruct_at_end[abi:ne180100](uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t i;

  v3 = result;
  for (i = *(_QWORD *)(result + 8); i != a2; i -= 40)
  {
    std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](i - 16);
    result = std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](i - 32);
  }
  *(_QWORD *)(v3 + 8) = a2;
  return result;
}

quasar::LabelTransformer *std::unique_ptr<quasar::LabelTransformer>::reset[abi:ne180100](quasar::LabelTransformer **a1, quasar::LabelTransformer *a2)
{
  quasar::LabelTransformer *result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    quasar::LabelTransformer::~LabelTransformer(result);
    JUMPOUT(0x1AF44D190);
  }
  return result;
}

void quasar::LabelTransformer::~LabelTransformer(quasar::LabelTransformer *this)
{
  void *v2;
  void *v3;

  v2 = (void *)*((_QWORD *)this + 28);
  if (v2)
    operator delete(v2);
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)this + 184);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)this + 128);
  v3 = (void *)*((_QWORD *)this + 14);
  if (v3)
    free(v3);
  *((_QWORD *)this + 13) = 0;
  *((_QWORD *)this + 14) = 0;
  *((_QWORD *)this + 15) = 0;
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this + 88);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this + 72);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this + 56);
  std::__hash_table<std::__hash_value_type<int,std::vector<std::shared_ptr<quasar::FstTokenTransform>>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::vector<std::shared_ptr<quasar::FstTokenTransform>>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::vector<std::shared_ptr<quasar::FstTokenTransform>>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::vector<std::shared_ptr<quasar::FstTokenTransform>>>>>::~__hash_table((uint64_t)this + 8);
}

uint64_t std::__hash_table<std::__hash_value_type<int,std::vector<std::shared_ptr<quasar::FstTokenTransform>>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::vector<std::shared_ptr<quasar::FstTokenTransform>>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::vector<std::shared_ptr<quasar::FstTokenTransform>>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::vector<std::shared_ptr<quasar::FstTokenTransform>>>>>::~__hash_table(uint64_t a1)
{
  void *v2;

  std::__hash_table<std::__hash_value_type<int,std::vector<std::shared_ptr<quasar::FstTokenTransform>>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::vector<std::shared_ptr<quasar::FstTokenTransform>>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::vector<std::shared_ptr<quasar::FstTokenTransform>>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::vector<std::shared_ptr<quasar::FstTokenTransform>>>>>::__deallocate_node(a1, *(char **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void std::__hash_table<std::__hash_value_type<int,std::vector<std::shared_ptr<quasar::FstTokenTransform>>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::vector<std::shared_ptr<quasar::FstTokenTransform>>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::vector<std::shared_ptr<quasar::FstTokenTransform>>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::vector<std::shared_ptr<quasar::FstTokenTransform>>>>>::__deallocate_node(uint64_t a1, char *a2)
{
  char *v2;
  char *v3;
  void **v4;

  if (a2)
  {
    v2 = a2;
    do
    {
      v3 = *(char **)v2;
      v4 = (void **)(v2 + 24);
      std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100](&v4);
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

quasar::PunctuationTransformer *std::unique_ptr<quasar::PunctuationTransformer>::reset[abi:ne180100](quasar::PunctuationTransformer **a1, quasar::PunctuationTransformer *a2)
{
  quasar::PunctuationTransformer *result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    quasar::PunctuationTransformer::~PunctuationTransformer(result);
    JUMPOUT(0x1AF44D190);
  }
  return result;
}

void quasar::PunctuationTransformer::~PunctuationTransformer(quasar::PunctuationTransformer *this)
{
  if (*((char *)this + 487) < 0)
    operator delete(*((void **)this + 58));
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)this + 416);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)this + 376);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this + 352);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)this + 312);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this + 296);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this + 280);
  std::__tree<std::string>::destroy((uint64_t)this + 256, *((char **)this + 33));
  quasar::LabelTransformer::~LabelTransformer(this);
}

quasar::PunctuationTransformer *quasar::PunctuationTransformer::PunctuationTransformer(quasar::PunctuationTransformer *this)
{
  uint64_t i;
  uint64_t j;
  void *__p[2];
  char v6;
  _QWORD v7[3];
  _QWORD v8[3];
  _QWORD v9[3];
  _QWORD v10[3];
  _QWORD v11[4];

  v11[3] = *MEMORY[0x1E0C80C00];
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *((_DWORD *)this + 10) = 1065353216;
  quasar::SystemConfig::Version::Version((quasar::PunctuationTransformer *)((char *)this + 48));
  *(_OWORD *)((char *)this + 152) = 0u;
  *(_OWORD *)((char *)this + 136) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *((_QWORD *)this + 15) = 0;
  *((_QWORD *)this + 16) = &unk_1E5D34170;
  *((_BYTE *)this + 168) = 0;
  *(_OWORD *)((char *)this + 184) = 0u;
  *(_OWORD *)((char *)this + 200) = 0u;
  *((_DWORD *)this + 54) = 1065353216;
  *((_QWORD *)this + 29) = 0;
  *((_QWORD *)this + 30) = 0;
  *((_QWORD *)this + 28) = 0;
  *((_QWORD *)this + 33) = 0;
  *((_QWORD *)this + 34) = 0;
  *((_QWORD *)this + 32) = (char *)this + 264;
  *(_OWORD *)((char *)this + 280) = 0u;
  *(_OWORD *)((char *)this + 296) = 0u;
  std::string::basic_string[abi:ne180100]<0>(__p, "Emoji");
  std::string::basic_string[abi:ne180100]<0>(v7, "emoji");
  std::string::basic_string[abi:ne180100]<0>(v8, "Emojis");
  std::string::basic_string[abi:ne180100]<0>(v9, "emojis");
  std::string::basic_string[abi:ne180100]<0>(v10, "Emoji's");
  std::string::basic_string[abi:ne180100]<0>(v11, "emoji's");
  std::unordered_set<std::string>::unordered_set((uint64_t)this + 312, (unsigned __int8 *)__p, 6);
  for (i = 0; i != -18; i -= 3)
  {
    if (SHIBYTE(v11[i + 2]) < 0)
      operator delete((void *)v11[i]);
  }
  *((_QWORD *)this + 44) = 0;
  *((_QWORD *)this + 45) = 0;
  std::string::basic_string[abi:ne180100]<0>(__p, ".");
  std::unordered_set<std::string>::unordered_set((uint64_t)this + 376, (unsigned __int8 *)__p, 1);
  if (v6 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, ".");
  std::string::basic_string[abi:ne180100]<0>(v7, "?");
  std::unordered_set<std::string>::unordered_set((uint64_t)this + 416, (unsigned __int8 *)__p, 2);
  for (j = 0; j != -6; j -= 3)
  {
    if (SHIBYTE(v7[j + 2]) < 0)
      operator delete((void *)v7[j]);
  }
  *((_QWORD *)this + 58) = 0;
  *((_QWORD *)this + 59) = 0;
  *((_QWORD *)this + 60) = 0;
  return this;
}

void sub_1AD8CABF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  char **v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;

  v21 = 0;
  while (1)
  {
    if (*(char *)(v19 + v21 + 47) < 0)
      operator delete(*(void **)(v19 + v21 + 24));
    v21 -= 24;
    if (v21 == -48)
    {
      std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(v18);
      std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)(v15 + 44));
      std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(v17);
      std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)(v15 + 37));
      std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](v16);
      std::__tree<std::string>::destroy((uint64_t)(v15 + 32), v15[33]);
      quasar::LabelTransformer::~LabelTransformer((quasar::LabelTransformer *)v15);
      _Unwind_Resume(a1);
    }
  }
}

_QWORD *std::allocate_shared[abi:ne180100]<kaldi::quasar::PrefixTree<std::string,std::string>,std::allocator<kaldi::quasar::PrefixTree<std::string,std::string>>,char const(&)[1],void>@<X0>(char *a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *result;

  v4 = operator new(0x20uLL);
  result = std::__shared_ptr_emplace<kaldi::quasar::PrefixTree<std::string,std::string>>::__shared_ptr_emplace[abi:ne180100]<char const(&)[1],std::allocator<kaldi::quasar::PrefixTree<std::string,std::string>>,0>(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_1AD8CAD54(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<kaldi::quasar::PrefixTree<std::string,std::string>>::__shared_ptr_emplace[abi:ne180100]<char const(&)[1],std::allocator<kaldi::quasar::PrefixTree<std::string,std::string>>,0>(_QWORD *a1, char *__s)
{
  char v4;

  a1[2] = 0;
  *a1 = &unk_1E5D41DB8;
  a1[1] = 0;
  std::allocator<kaldi::quasar::PrefixTree<std::string,std::string>>::construct[abi:ne180100]<kaldi::quasar::PrefixTree<std::string,std::string>,char const(&)[1]>((int)&v4, a1 + 3, __s);
  return a1;
}

void sub_1AD8CADB4(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<kaldi::quasar::PrefixTree<std::string,std::string>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D41DB8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<kaldi::quasar::PrefixTree<std::string,std::string>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D41DB8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t *std::__shared_ptr_emplace<kaldi::quasar::PrefixTree<std::string,std::string>>::__on_zero_shared(uint64_t a1)
{
  return kaldi::quasar::PrefixTree<std::string,std::string>::~PrefixTree((uint64_t *)(a1 + 24));
}

void std::allocator<kaldi::quasar::PrefixTree<std::string,std::string>>::construct[abi:ne180100]<kaldi::quasar::PrefixTree<std::string,std::string>,char const(&)[1]>(int a1, uint64_t *a2, char *__s)
{
  void *__p[2];
  char v5;

  std::string::basic_string[abi:ne180100]<0>(__p, __s);
  kaldi::quasar::PrefixTree<std::string,std::string>::PrefixTree(a2, (uint64_t)__p);
  if (v5 < 0)
    operator delete(__p[0]);
}

void sub_1AD8CAE68(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t *kaldi::quasar::PrefixTree<std::string,std::string>::PrefixTree(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  std::string __p;

  v4 = operator new();
  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    __p = *(std::string *)a2;
  kaldi::quasar::PrefixTree<std::string,std::string>::Node::Node(v4, 0, (__int128 *)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  *a1 = v4;
  return a1;
}

void sub_1AD8CAF20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  uint64_t v14;

  MEMORY[0x1AF44D190](v14, 0x10B2C4049158C6CLL);
  _Unwind_Resume(a1);
}

uint64_t kaldi::quasar::PrefixTree<std::string,std::string>::Node::Node(uint64_t a1, uint64_t a2, __int128 *a3)
{
  std::string *v4;
  __int128 v5;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_QWORD *)(a1 + 40) = 0;
  *(_DWORD *)(a1 + 32) = 1065353216;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = a2;
  v4 = (std::string *)(a1 + 72);
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)a3, *((_QWORD *)a3 + 1));
  }
  else
  {
    v5 = *a3;
    v4->__r_.__value_.__r.__words[2] = *((_QWORD *)a3 + 2);
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v5;
  }
  return a1;
}

void sub_1AD8CAFCC(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 63) < 0)
    operator delete(*v2);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

uint64_t *kaldi::quasar::PrefixTree<std::string,std::string>::~PrefixTree(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a1;
  if (v2)
  {
    v3 = kaldi::quasar::PrefixTree<std::string,std::string>::Node::~Node(v2);
    MEMORY[0x1AF44D190](v3, 0x10B2C4049158C6CLL);
  }
  return a1;
}

uint64_t kaldi::quasar::PrefixTree<std::string,std::string>::Node::~Node(uint64_t a1)
{
  _QWORD *i;
  uint64_t v3;
  uint64_t v4;

  for (i = (_QWORD *)a1; ; i = (_QWORD *)v3)
  {
    while (i[3])
      i = *(_QWORD **)(i[2] + 40);
    if (i == (_QWORD *)a1)
      break;
    v3 = i[8];
    std::__hash_table<std::__hash_value_type<std::string,std::__list_iterator<std::pair<std::string,std::vector<std::string>>,void *>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::__list_iterator<std::pair<std::string,std::vector<std::string>>,void *>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::__list_iterator<std::pair<std::string,std::vector<std::string>>,void *>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::__list_iterator<std::pair<std::string,std::vector<std::string>>,void *>>>>::erase((_QWORD *)v3, *(uint64_t **)(v3 + 16));
    v4 = kaldi::quasar::PrefixTree<std::string,std::string>::Node::~Node(i);
    MEMORY[0x1AF44D190](v4, 0x10B2C4049158C6CLL);
  }
  if (*(char *)(a1 + 95) < 0)
    operator delete(*(void **)(a1 + 72));
  if (*(char *)(a1 + 63) < 0)
    operator delete(*(void **)(a1 + 40));
  return std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(a1);
}

unint64_t kaldi::quasar::PrefixTree<std::string,std::string>::GetLongestPrefix(_QWORD **a1, uint64_t *a2, _QWORD *a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v7;
  unint64_t v8;
  unsigned __int8 *v9;

  v3 = *a1;
  *a3 = v3;
  v4 = *a2;
  if (a2[1] == *a2)
    return 0;
  v7 = 0;
  v8 = 0;
  do
  {
    v9 = std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>(v3, (unsigned __int8 *)(v4 + v7));
    if (!v9)
      break;
    v3 = (_QWORD *)*((_QWORD *)v9 + 5);
    *a3 = v3;
    ++v8;
    v4 = *a2;
    v7 += 24;
  }
  while (0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 3) > v8);
  return v8;
}

uint64_t std::vector<quasar::InverseTextNormalizer::RegexFeatInfo>::__push_back_slow_path<quasar::InverseTextNormalizer::RegexFeatInfo>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v15[5];

  v3 = *a1;
  v4 = 0xCCCCCCCCCCCCCCCDLL * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if (v4 + 1 > 0x666666666666666)
    std::vector<int>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0xCCCCCCCCCCCCCCCDLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x333333333333333)
    v9 = 0x666666666666666;
  else
    v9 = v5;
  v15[4] = a1 + 2;
  v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::PronChoice>>(v7, v9);
  v11 = &v10[40 * v4];
  v15[0] = v10;
  v15[1] = v11;
  v15[3] = &v10[40 * v12];
  *(_DWORD *)v11 = *(_DWORD *)a2;
  *(_OWORD *)(v11 + 8) = *(_OWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_OWORD *)(v11 + 24) = *(_OWORD *)(a2 + 24);
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 32) = 0;
  v15[2] = v11 + 40;
  std::vector<quasar::InverseTextNormalizer::RegexFeatInfo>::__swap_out_circular_buffer(a1, v15);
  v13 = a1[1];
  std::__split_buffer<quasar::InverseTextNormalizer::RegexFeatInfo>::~__split_buffer((uint64_t)v15);
  return v13;
}

void sub_1AD8CB258(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<quasar::InverseTextNormalizer::RegexFeatInfo>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<quasar::InverseTextNormalizer::RegexFeatInfo>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<quasar::InverseTextNormalizer::RegexFeatInfo>,std::reverse_iterator<quasar::InverseTextNormalizer::RegexFeatInfo*>,std::reverse_iterator<quasar::InverseTextNormalizer::RegexFeatInfo*>,std::reverse_iterator<quasar::InverseTextNormalizer::RegexFeatInfo*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<quasar::InverseTextNormalizer::RegexFeatInfo>,std::reverse_iterator<quasar::InverseTextNormalizer::RegexFeatInfo*>,std::reverse_iterator<quasar::InverseTextNormalizer::RegexFeatInfo*>,std::reverse_iterator<quasar::InverseTextNormalizer::RegexFeatInfo*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  _QWORD v12[3];
  char v13;
  __int128 v14;
  __int128 v15;

  v7 = a7;
  *(_QWORD *)&v15 = a6;
  *((_QWORD *)&v15 + 1) = a7;
  v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  if (a3 == a5)
  {
    v10 = a6;
  }
  else
  {
    v8 = a7 - 40;
    do
    {
      v9 = *(_DWORD *)(a3 - 40);
      a3 -= 40;
      *(_DWORD *)v8 = v9;
      *(_OWORD *)(v8 + 8) = *(_OWORD *)(a3 + 8);
      *(_QWORD *)(a3 + 8) = 0;
      *(_QWORD *)(a3 + 16) = 0;
      *(_OWORD *)(v8 + 24) = *(_OWORD *)(a3 + 24);
      *(_QWORD *)(a3 + 24) = 0;
      *(_QWORD *)(a3 + 32) = 0;
      *((_QWORD *)&v15 + 1) = v8;
      v8 -= 40;
      v7 -= 40;
    }
    while (a3 != a5);
    v10 = v15;
  }
  v13 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<quasar::InverseTextNormalizer::RegexFeatInfo>,std::reverse_iterator<quasar::InverseTextNormalizer::RegexFeatInfo*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return v10;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<quasar::InverseTextNormalizer::RegexFeatInfo>,std::reverse_iterator<quasar::InverseTextNormalizer::RegexFeatInfo*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<quasar::InverseTextNormalizer::RegexFeatInfo>,std::reverse_iterator<quasar::InverseTextNormalizer::RegexFeatInfo*>>::operator()[abi:ne180100](a1);
  return a1;
}

uint64_t std::_AllocatorDestroyRangeReverse<std::allocator<quasar::InverseTextNormalizer::RegexFeatInfo>,std::reverse_iterator<quasar::InverseTextNormalizer::RegexFeatInfo*>>::operator()[abi:ne180100](uint64_t result)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(*(_QWORD *)(result + 16) + 8);
  v2 = *(_QWORD *)(*(_QWORD *)(result + 8) + 8);
  while (v1 != v2)
  {
    std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](v1 + 24);
    result = std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](v1 + 8);
    v1 += 40;
  }
  return result;
}

uint64_t std::__split_buffer<quasar::InverseTextNormalizer::RegexFeatInfo>::~__split_buffer(uint64_t a1)
{
  std::__split_buffer<quasar::InverseTextNormalizer::RegexFeatInfo>::__destruct_at_end[abi:ne180100](a1, *(_QWORD *)(a1 + 8));
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t std::__split_buffer<quasar::InverseTextNormalizer::RegexFeatInfo>::__destruct_at_end[abi:ne180100](uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;

  v2 = *(_QWORD *)(result + 16);
  if (v2 != a2)
  {
    v4 = result;
    do
    {
      *(_QWORD *)(v4 + 16) = v2 - 40;
      std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](v2 - 16);
      result = std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](v2 - 32);
      v2 = *(_QWORD *)(v4 + 16);
    }
    while (v2 != a2);
  }
  return result;
}

uint64_t *std::__tree<std::__value_type<std::string,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t **a1, const void **a2, uint64_t a3, __int128 **a4)
{
  uint64_t **v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t *v10[3];
  uint64_t v11;

  v6 = (uint64_t **)std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__find_equal<std::string>((uint64_t)a1, &v11, a2);
  v7 = *v6;
  if (!*v6)
  {
    v8 = v6;
    std::__tree<std::__value_type<std::string,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)a1, a4, (uint64_t)v10);
    std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at(a1, v11, v8, v10[0]);
    v7 = v10[0];
    v10[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::shared_ptr<void>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::shared_ptr<void>>,void *>>>>::reset[abi:ne180100]((uint64_t)v10, 0);
  }
  return v7;
}

void std::__tree<std::__value_type<std::string,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1@<X0>, __int128 **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5;
  _QWORD *v6;
  std::string *v7;
  __int128 *v8;
  __int128 v9;

  v5 = a1 + 8;
  v6 = operator new(0x48uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  v7 = (std::string *)(v6 + 4);
  v8 = *a2;
  if (*((char *)*a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)v8, *((_QWORD *)v8 + 1));
  }
  else
  {
    v9 = *v8;
    v6[6] = *((_QWORD *)v8 + 2);
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v9;
  }
  v6[7] = 0;
  v6[8] = 0;
  *(_BYTE *)(a3 + 16) = 1;
}

void sub_1AD8CB5A8(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::shared_ptr<void>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::shared_ptr<void>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

uint64_t **std::__tree<std::__value_type<int,std::vector<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,std::__map_value_compare<int,std::__value_type<int,std::vector<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(uint64_t **a1, int *a2, uint64_t a3, _DWORD **a4)
{
  uint64_t *v6;
  uint64_t **v7;
  int v8;
  uint64_t **v9;
  int v10;
  _DWORD *v11;

  v7 = a1 + 1;
  v6 = a1[1];
  if (v6)
  {
    v8 = *a2;
    while (1)
    {
      while (1)
      {
        v9 = (uint64_t **)v6;
        v10 = *((_DWORD *)v6 + 8);
        if (v8 >= v10)
          break;
        v6 = *v9;
        v7 = v9;
        if (!*v9)
          goto LABEL_10;
      }
      if (v10 >= v8)
        break;
      v6 = v9[1];
      if (!v6)
      {
        v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v9 = a1 + 1;
LABEL_10:
    v11 = operator new(0x40uLL);
    v11[8] = **a4;
    *((_QWORD *)v11 + 6) = 0;
    *((_QWORD *)v11 + 7) = 0;
    *((_QWORD *)v11 + 5) = 0;
    std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at(a1, (uint64_t)v9, v7, (uint64_t *)v11);
    return (uint64_t **)v11;
  }
  return v9;
}

uint64_t fst::ComposeFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::CreateBase2<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::NullComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = operator new();
  fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::NullComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::ComposeFstImpl<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>(v6, a1, a2, a3);
  return v6;
}

void sub_1AD8CB6E0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10F3C405A371F01);
  _Unwind_Resume(a1);
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::NullComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::ComposeFstImpl<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v8;
  __int128 v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;

  *(_QWORD *)fst::ComposeFstImplBase<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::ComposeFstImplBase(a1, a2, a3, a4) = &unk_1E5D1D5E0;
  v8 = *(_QWORD **)(a4 + 40);
  if (!v8)
  {
    v8 = (_QWORD *)operator new();
    fst::NullComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::NullComposeFilter(v8, a2, a3, *(_QWORD **)(a4 + 24), *(_QWORD **)(a4 + 32));
  }
  *(_QWORD *)(a1 + 136) = v8;
  v9 = *(_OWORD *)v8;
  *(_OWORD *)(a1 + 144) = *(_OWORD *)v8;
  *(_QWORD *)(a1 + 160) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)v9 + 32))(*(_QWORD *)v9);
  *(_QWORD *)(a1 + 168) = (*(uint64_t (**)(_QWORD))(***(_QWORD ***)(a1 + 152) + 32))(**(_QWORD **)(a1 + 152));
  v10 = *(_QWORD **)(a4 + 48);
  if (!v10)
  {
    v10 = (_QWORD *)operator new();
    v10[1] = v10;
    v10[2] = v10;
    std::unordered_set<int,fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,(fst::HSType)1>::HashFunc,fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,(fst::HSType)1>::HashEqual,std::allocator<int>>::unordered_set((uint64_t)(v10 + 3), 0, v10 + 1, v10 + 2);
    v10[10] = 0;
    v10[11] = 0;
    v10[12] = 0;
  }
  *(_QWORD *)(a1 + 176) = v10;
  fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::SetMatchType(a1);
  if (*(_DWORD *)(a1 + 184) == 3)
    *(_QWORD *)(a1 + 8) |= 4uLL;
  v11 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, 0x3FFFFFFF0007, 0);
  v12 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a3 + 64))(a3, 0x3FFFFFFF0007, 0);
  v13 = (*(uint64_t (**)(_QWORD, uint64_t))(***(_QWORD ***)(a1 + 144) + 40))(**(_QWORD **)(a1 + 144), v11);
  v14 = (*(uint64_t (**)(_QWORD, uint64_t))(***(_QWORD ***)(a1 + 152) + 40))(**(_QWORD **)(a1 + 152), v12);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a1 + 8) & 0xFFFFC0000000FFFFLL | fst::ComposeProperties(v13, v14) & 0x3FFFFFFF0004;
  return a1;
}

void sub_1AD8CB8C4(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t v2;

  MEMORY[0x1AF44D190](v2, 0x10E0C406D28CB5CLL);
  fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::~CacheBaseImpl(v1);
  _Unwind_Resume(a1);
}

void fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::NullComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::~ComposeFstImpl(_QWORD *a1)
{
  fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::NullComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::~ComposeFstImpl(a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::NullComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Properties(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 32))(a1, 0x3FFFFFFF0007);
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::NullComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Properties(uint64_t a1, uint64_t a2)
{
  if ((a2 & 4) != 0
    && ((*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(**(_QWORD **)(a1 + 160) + 64))(*(_QWORD *)(a1 + 160), 4, 0)|| (*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(**(_QWORD **)(a1 + 168) + 64))(*(_QWORD *)(a1 + 168), 4, 0)|| ((*(uint64_t (**)(_QWORD, _QWORD))(***(_QWORD ***)(a1 + 144) + 40))(**(_QWORD **)(a1 + 144), 0) & 4) != 0|| ((*(uint64_t (**)(_QWORD, _QWORD))(***(_QWORD ***)(a1 + 152) + 40))(**(_QWORD **)(a1 + 152), 0) & 4) != 0))
  {
    *(_QWORD *)(a1 + 8) |= 4uLL;
  }
  return *(_QWORD *)(a1 + 8) & a2;
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::NullComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Copy(uint64_t a1)
{
  uint64_t v2;

  v2 = operator new();
  fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::NullComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::ComposeFstImpl(v2, a1);
  return v2;
}

void sub_1AD8CBA50(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10F3C405A371F01);
  _Unwind_Resume(a1);
}

void fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::NullComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Expand(_QWORD *a1, int a2)
{
  unsigned int *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  int v14;

  v4 = (unsigned int *)(*(_QWORD *)(a1[22] + 80) + 12 * a2);
  v5 = *v4;
  v6 = v4[1];
  if (fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::NullComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::MatchInput((uint64_t)a1, v5, v6))
  {
    v8 = a1[20];
    v7 = a1[21];
    v9 = (_QWORD *)a1[19];
    v10 = (uint64_t)a1;
    v11 = a2;
    v12 = v6;
    v13 = v5;
    v14 = 1;
  }
  else
  {
    v7 = a1[20];
    v8 = a1[21];
    v9 = (_QWORD *)a1[18];
    v10 = (uint64_t)a1;
    v11 = a2;
    v12 = v5;
    v13 = v6;
    v14 = 0;
  }
  fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::NullComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::OrderedExpand<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>(v10, v11, v7, v12, v8, v13, v9, v14);
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::NullComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::InitMatcher(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v6;

  if ((*(unsigned int (**)(_QWORD, _QWORD))(***(_QWORD ***)(a1 + 144) + 24))(**(_QWORD **)(a1 + 144), 0) != a3
    || (*(unsigned int (**)(_QWORD, _QWORD))(***(_QWORD ***)(a1 + 152) + 24))(**(_QWORD **)(a1 + 152), 0) != a3)
  {
    return 0;
  }
  v6 = operator new();
  fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::NullComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::ComposeFstMatcher(v6, a2, a1, a3);
  return v6;
}

void sub_1AD8CBBA0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10E1C40868C5753);
  _Unwind_Resume(a1);
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::NullComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::ComputeStart(_QWORD **a1)
{
  uint64_t result;
  unsigned int v3;
  unint64_t v4;
  char v5;

  result = (*(uint64_t (**)(_QWORD *))(*a1[20] + 24))(a1[20]);
  if ((_DWORD)result != -1)
  {
    v3 = result;
    result = (*(uint64_t (**)(_QWORD *))(*a1[21] + 24))(a1[21]);
    if ((_DWORD)result != -1)
    {
      v4 = __PAIR64__(result, v3);
      v5 = 0;
      return fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,(fst::HSType)1>::FindId(a1[22], (uint64_t *)&v4, 1);
    }
  }
  return result;
}

float fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::NullComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::ComputeFinal(uint64_t a1, int a2)
{
  unsigned int *v3;
  float v4;
  float v5;
  float v6;
  float v7;
  BOOL v8;
  float v9;

  v3 = (unsigned int *)(*(_QWORD *)(*(_QWORD *)(a1 + 176) + 80) + 12 * a2);
  v4 = (*(float (**)(_QWORD, _QWORD))(***(_QWORD ***)(a1 + 144) + 96))(**(_QWORD **)(a1 + 144), *v3);
  v5 = v4;
  v6 = v4;
  if (v4 != INFINITY)
  {
    v7 = (*(float (**)(_QWORD, _QWORD, float, float))(***(_QWORD ***)(a1 + 152) + 96))(**(_QWORD **)(a1 + 152), v3[1], v4, v4);
    v6 = v7;
    if (v7 != INFINITY)
    {
      v6 = NAN;
      if (v5 != -INFINITY && v7 != -INFINITY)
      {
        v6 = INFINITY;
        v8 = v7 == INFINITY || v5 == INFINITY;
        v9 = v5 + v7;
        if (!v8)
          return v9;
      }
    }
  }
  return v6;
}

_QWORD *fst::NullComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::NullComposeFilter(_QWORD *a1, uint64_t a2, uint64_t a3, _QWORD *a4, _QWORD *a5)
{
  _QWORD *v6;

  v6 = a4;
  if (!a4)
  {
    v6 = (_QWORD *)operator new();
    fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Matcher(v6, a2, 1);
  }
  *a1 = v6;
  if (!a5)
  {
    a5 = (_QWORD *)operator new();
    fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Matcher(a5, a3, 0);
    v6 = (_QWORD *)*a1;
  }
  a1[1] = a5;
  a1[2] = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v6 + 32))(*v6);
  a1[3] = (*(uint64_t (**)(_QWORD))(**(_QWORD **)a1[1] + 32))(*(_QWORD *)a1[1]);
  return a1;
}

void sub_1AD8CBE10(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x20C4093837F09);
  _Unwind_Resume(a1);
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::NullComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::~ComposeFstImpl(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;

  *a1 = &unk_1E5D1D5E0;
  v2 = a1[17];
  if (v2)
  {
    v3 = fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::~SequenceComposeFilter(v2);
    MEMORY[0x1AF44D190](v3, 0x60C40FFD3A10ELL);
  }
  v4 = a1[22];
  if (v4)
  {
    v5 = *(void **)(v4 + 80);
    if (v5)
    {
      *(_QWORD *)(v4 + 88) = v5;
      operator delete(v5);
    }
    std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(v4 + 24);
    MEMORY[0x1AF44D190](v4, 0x10E0C406D28CB5CLL);
  }
  return fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::~CacheBaseImpl(a1);
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::NullComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::ComposeFstImpl(uint64_t a1, uint64_t a2)
{
  _QWORD **v4;
  __int128 v5;
  uint64_t v6;

  *fst::ComposeFstImplBase<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::ComposeFstImplBase((_QWORD *)a1, a2) = &unk_1E5D1D5E0;
  v4 = (_QWORD **)operator new();
  fst::NullComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::NullComposeFilter(v4, *(_QWORD ***)(a2 + 136), 1);
  *(_QWORD *)(a1 + 136) = v4;
  v5 = *(_OWORD *)v4;
  *(_OWORD *)(a1 + 144) = *(_OWORD *)v4;
  *(_QWORD *)(a1 + 160) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)v5 + 32))(*(_QWORD *)v5);
  *(_QWORD *)(a1 + 168) = (*(uint64_t (**)(_QWORD))(***(_QWORD ***)(a1 + 152) + 32))(**(_QWORD **)(a1 + 152));
  v6 = operator new();
  fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,(fst::HSType)1>::CompactHashBiTable(v6, *(_QWORD *)(a2 + 176));
  *(_QWORD *)(a1 + 176) = v6;
  *(_DWORD *)(a1 + 184) = *(_DWORD *)(a2 + 184);
  return a1;
}

void sub_1AD8CBF9C(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t v2;

  MEMORY[0x1AF44D190](v2, 0x10E0C406D28CB5CLL);
  fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::~CacheBaseImpl(v1);
  _Unwind_Resume(a1);
}

_QWORD **fst::NullComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::NullComposeFilter(_QWORD **a1, _QWORD **a2, uint64_t a3)
{
  *a1 = fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Copy(*a2, a3);
  a1[1] = fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Copy(a2[1], a3);
  a1[2] = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)**a1 + 32))(**a1);
  a1[3] = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)*a1[1] + 32))(*a1[1]);
  return a1;
}

BOOL fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::NullComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::MatchInput(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v3;
  uint64_t v7;
  uint64_t v8;
  fst *v11;
  _QWORD *v12;
  void *__p[2];
  char v14;
  char v15;

  v3 = *(_DWORD *)(a1 + 184);
  if (!v3)
    return 1;
  if (v3 == 1)
    return 0;
  v7 = (*(uint64_t (**)(_QWORD))(***(_QWORD ***)(a1 + 144) + 104))(**(_QWORD **)(a1 + 144));
  v8 = (*(uint64_t (**)(_QWORD, uint64_t))(***(_QWORD ***)(a1 + 152) + 104))(**(_QWORD **)(a1 + 152), a3);
  if (v7 == -1 && v8 == -1)
  {
    if (FLAGS_fst_error_fatal)
      std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
    else
      std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
    v11 = fst::LogMessage::LogMessage((fst *)&v15, (uint64_t)__p);
    v12 = (_QWORD *)fst::cerr(v11);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"ComposeFst: both sides can't require match", 42);
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v15);
    if (v14 < 0)
      operator delete(__p[0]);
    *(_QWORD *)(a1 + 8) |= 4uLL;
    return 1;
  }
  if (v7 == -1)
    return 0;
  return v8 == -1 || v7 <= v8;
}

void sub_1AD8CC194(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  fst::LogMessage::~LogMessage((fst::LogMessage *)&a18);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::NullComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::OrderedExpand<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, _QWORD *a7, int a8)
{
  unsigned int *v14;
  _QWORD v15[3];
  _DWORD *v16;
  unint64_t v17;
  unsigned int v18[4];

  (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*a7 + 56))(*a7, a4);
  v18[0] = a8 - 1;
  v18[1] = a8 << 31 >> 31;
  v18[2] = 0;
  v18[3] = a6;
  fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::NullComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::MatchArc<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>(a1, a2, a7, v18, a8);
  v17 = 0;
  (*(void (**)(uint64_t, uint64_t, _QWORD *))(*(_QWORD *)a5 + 136))(a5, a6, v15);
  while (1)
  {
    if (!v15[0])
    {
      if (v17 >= v15[2])
        goto LABEL_13;
LABEL_7:
      v14 = (unsigned int *)(v15[1] + 16 * v17);
      goto LABEL_8;
    }
    if ((*(unsigned int (**)(_QWORD))(*(_QWORD *)v15[0] + 24))(v15[0]))
      break;
    if (!v15[0])
      goto LABEL_7;
    v14 = (unsigned int *)(*(uint64_t (**)(void))(*(_QWORD *)v15[0] + 32))();
LABEL_8:
    fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::NullComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::MatchArc<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>(a1, a2, a7, v14, a8);
    if (v15[0])
      (*(void (**)(_QWORD))(*(_QWORD *)v15[0] + 40))(v15[0]);
    else
      ++v17;
  }
  if (v15[0])
  {
    (*(void (**)(void))(*(_QWORD *)v15[0] + 8))();
    goto LABEL_15;
  }
LABEL_13:
  if (v16)
    --*v16;
LABEL_15:
  fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::SetArcs(a1, a2);
}

void sub_1AD8CC330(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  else
    fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::OrderedExpand<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>((uint64_t)&a10);
  _Unwind_Resume(a1);
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::NullComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::MatchArc<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>(uint64_t a1, int a2, _QWORD *a3, unsigned int *a4, int a5)
{
  unsigned int *v10;
  uint64_t result;
  __int128 v12;
  char v13;
  unsigned int *v14;
  __int128 *v15;
  char v16;
  char v17;
  __int128 v18;
  __int128 v19;

  v10 = a4 + 1;
  if (!a5)
    v10 = a4;
  result = (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)*a3 + 64))(*a3, *v10);
  if ((_DWORD)result)
  {
    result = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a3 + 72))(*a3);
    if ((result & 1) == 0)
    {
      do
      {
        v12 = *(_OWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)*a3 + 80))(*a3);
        v18 = *(_OWORD *)a4;
        v19 = v12;
        if (a5)
        {
          if (DWORD1(v18) == -1)
            goto LABEL_19;
          v13 = (_DWORD)v19 == -1 ? -1 : 0;
          v17 = v13;
          if ((_DWORD)v19 == -1)
            goto LABEL_19;
          v14 = (unsigned int *)&v18;
          v15 = &v19;
        }
        else
        {
          if (DWORD1(v19) == -1)
            goto LABEL_19;
          v16 = (_DWORD)v18 == -1 ? -1 : 0;
          v17 = v16;
          if ((_DWORD)v18 == -1)
            goto LABEL_19;
          v14 = (unsigned int *)&v19;
          v15 = &v18;
        }
        fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::AddArc(a1, a2, v14, (uint64_t)v15, &v17);
LABEL_19:
        (*(void (**)(_QWORD))(*(_QWORD *)*a3 + 88))(*a3);
        result = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a3 + 72))(*a3);
      }
      while (!(_DWORD)result);
    }
  }
  return result;
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::NullComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::ComposeFstMatcher(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  *(_QWORD *)a1 = &unk_1E5D1F500;
  *(_QWORD *)(a1 + 8) = a2;
  *(_QWORD *)(a1 + 16) = a3;
  *(_DWORD *)(a1 + 24) = -1;
  *(_DWORD *)(a1 + 28) = a4;
  *(_QWORD *)(a1 + 32) = fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Copy(*(_QWORD **)(a3 + 144), 0);
  *(_QWORD *)(a1 + 40) = fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Copy(*(_QWORD **)(a3 + 152), 0);
  *(_BYTE *)(a1 + 48) = 0;
  *(_OWORD *)(a1 + 52) = xmmword_1AE142840;
  *(_BYTE *)(a1 + 84) = 0;
  if (a4 == 1)
    *(_QWORD *)(a1 + 52) = 0xFFFFFFFF00000000;
  return a1;
}

void fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::NullComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::~ComposeFstMatcher(_QWORD *a1)
{
  fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::NullComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::~ComposeFstMatcher(a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::NullComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Copy(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = operator new();
  fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::NullComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::ComposeFstMatcher(v4, a1, a2);
  return v4;
}

void sub_1AD8CC58C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10E1C40868C5753);
  _Unwind_Resume(a1);
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::NullComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Type(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = (*(uint64_t (**)(_QWORD))(***(_QWORD ***)(a1 + 32) + 24))(**(_QWORD **)(a1 + 32));
  if ((_DWORD)result != 3)
  {
    result = (*(uint64_t (**)(_QWORD, uint64_t))(***(_QWORD ***)(a1 + 40) + 24))(**(_QWORD **)(a1 + 40), a2);
    if ((_DWORD)result != 3)
    {
      if ((*(unsigned int (**)(_QWORD, uint64_t))(***(_QWORD ***)(a1 + 32) + 24))(**(_QWORD **)(a1 + 32), a2) != 4|| (result = (*(uint64_t (**)(_QWORD, uint64_t))(***(_QWORD ***)(a1 + 40) + 24))(**(_QWORD **)(a1 + 40), a2), (_DWORD)result != 4))
      {
        if ((*(unsigned int (**)(_QWORD, uint64_t))(***(_QWORD ***)(a1 + 32) + 24))(**(_QWORD **)(a1 + 32), a2) == 4&& (*(unsigned int (**)(_QWORD, uint64_t))(***(_QWORD ***)(a1 + 40) + 24))(**(_QWORD **)(a1 + 40), a2) == *(_DWORD *)(a1 + 28))
        {
          return 4;
        }
        else if ((*(unsigned int (**)(_QWORD, uint64_t))(***(_QWORD ***)(a1 + 32) + 24))(**(_QWORD **)(a1 + 32), a2) != *(_DWORD *)(a1 + 28)|| (result = (*(uint64_t (**)(_QWORD, uint64_t))(***(_QWORD ***)(a1 + 40) + 24))(**(_QWORD **)(a1 + 40), a2), (_DWORD)result != 4))
        {
          if ((*(unsigned int (**)(_QWORD, uint64_t))(***(_QWORD ***)(a1 + 32) + 24))(**(_QWORD **)(a1 + 32), a2) != *(_DWORD *)(a1 + 28))return 3;
          result = (*(uint64_t (**)(_QWORD, uint64_t))(***(_QWORD ***)(a1 + 40) + 24))(**(_QWORD **)(a1 + 40), a2);
          if ((_DWORD)result != *(_DWORD *)(a1 + 28))
            return 3;
        }
      }
    }
  }
  return result;
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::NullComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::GetFst(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8);
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::NullComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Properties(uint64_t a1, uint64_t a2)
{
  if (*(_BYTE *)(a1 + 84))
    return a2 | 4;
  else
    return a2;
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::NullComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::SetState_(uint64_t result, int a2)
{
  uint64_t v2;
  unsigned int *v3;
  uint64_t v4;

  if (*(_DWORD *)(result + 24) != a2)
  {
    v2 = result;
    *(_DWORD *)(result + 24) = a2;
    v3 = (unsigned int *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(result + 16) + 176) + 80) + 12 * a2);
    v4 = v3[1];
    (*(void (**)(_QWORD, _QWORD))(***(_QWORD ***)(result + 32) + 56))(**(_QWORD **)(result + 32), *v3);
    result = (*(uint64_t (**)(_QWORD, uint64_t))(***(_QWORD ***)(v2 + 40) + 56))(**(_QWORD **)(v2 + 40), v4);
    *(_DWORD *)(v2 + 64) = *(_DWORD *)(v2 + 24);
  }
  return result;
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::NullComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Find_(uint64_t a1, uint64_t a2)
{
  _QWORD **v2;
  _QWORD **v3;

  *(_BYTE *)(a1 + 48) = (_DWORD)a2 == 0;
  if (*(_DWORD *)(a1 + 28))
  {
    if ((_DWORD)a2)
    {
      v2 = (_QWORD **)(a1 + 40);
      v3 = (_QWORD **)(a1 + 32);
      return fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::NullComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::FindLabel<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>(a1, a2, *v2, *v3);
    }
  }
  else if ((_DWORD)a2)
  {
    v2 = (_QWORD **)(a1 + 32);
    v3 = (_QWORD **)(a1 + 40);
    return fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::NullComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::FindLabel<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>(a1, a2, *v2, *v3);
  }
  return 1;
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::NullComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Done_(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 48)
    || !(*(unsigned int (**)(_QWORD))(***(_QWORD ***)(a1 + 32) + 72))(**(_QWORD **)(a1 + 32)))
  {
    return 0;
  }
  else
  {
    return (*(uint64_t (**)(_QWORD))(***(_QWORD ***)(a1 + 40) + 72))(**(_QWORD **)(a1 + 40));
  }
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::NullComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Value_(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 48))
    return a1 + 52;
  else
    return a1 + 68;
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::NullComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Next_(uint64_t result)
{
  _QWORD *v1;
  _QWORD *v2;

  if (*(_BYTE *)(result + 48))
  {
    *(_BYTE *)(result + 48) = 0;
  }
  else
  {
    if (*(_DWORD *)(result + 28))
    {
      v2 = *(_QWORD **)(result + 32);
      v1 = *(_QWORD **)(result + 40);
    }
    else
    {
      v1 = *(_QWORD **)(result + 32);
      v2 = *(_QWORD **)(result + 40);
    }
    return fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::NullComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::FindNext<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>(result, v1, v2);
  }
  return result;
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::NullComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Priority_(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8));
}

_QWORD *fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::NullComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::~ComposeFstMatcher(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  *a1 = &unk_1E5D1F500;
  v2 = (_QWORD *)a1[4];
  if (v2)
  {
    if (*v2)
      (*(void (**)(_QWORD))(*(_QWORD *)*v2 + 8))(*v2);
    MEMORY[0x1AF44D190](v2, 0x20C4093837F09);
  }
  v3 = (_QWORD *)a1[5];
  if (v3)
  {
    if (*v3)
      (*(void (**)(_QWORD))(*(_QWORD *)*v3 + 8))(*v3);
    MEMORY[0x1AF44D190](v3, 0x20C4093837F09);
  }
  return a1;
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::NullComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::ComposeFstMatcher(uint64_t a1, uint64_t a2, uint64_t a3)
{
  fst *v6;
  _QWORD *v7;
  void *__p[2];
  char v10;
  char v11;

  *(_QWORD *)a1 = &unk_1E5D1F500;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 24) = -1;
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_QWORD *)(a1 + 32) = fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Copy(*(_QWORD **)(a2 + 32), a3);
  *(_QWORD *)(a1 + 40) = fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Copy(*(_QWORD **)(a2 + 40), a3);
  *(_BYTE *)(a1 + 48) = 0;
  *(_OWORD *)(a1 + 52) = xmmword_1AE142840;
  *(_BYTE *)(a1 + 84) = *(_BYTE *)(a2 + 84);
  if ((_DWORD)a3)
  {
    if (FLAGS_fst_error_fatal)
      std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
    else
      std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
    v6 = fst::LogMessage::LogMessage((fst *)&v11, (uint64_t)__p);
    v7 = (_QWORD *)fst::cerr(v6);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"ComposeFstMatcher: safe copy not supported", 42);
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v11);
    if (v10 < 0)
      operator delete(__p[0]);
    *(_BYTE *)(a1 + 84) = 1;
  }
  if (*(_DWORD *)(a1 + 28) == 1)
    *(int32x2_t *)(a1 + 52) = vrev64_s32(*(int32x2_t *)(a1 + 52));
  return a1;
}

void sub_1AD8CCA84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  fst::LogMessage::~LogMessage((fst::LogMessage *)&a18);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::NullComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::FindLabel<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>(uint64_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4)
{
  uint64_t result;
  int v8;
  uint64_t v9;
  unsigned int *v10;

  result = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a3 + 64))(*a3);
  if ((_DWORD)result)
  {
    v8 = *(_DWORD *)(a1 + 28);
    v9 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a3 + 80))(*a3);
    v10 = (unsigned int *)(v9 + 4);
    if (v8)
      v10 = (unsigned int *)v9;
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)*a4 + 64))(*a4, *v10);
    return fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::NullComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::FindNext<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>(a1, a3, a4);
  }
  return result;
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::NullComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::FindNext<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  int v6;
  uint64_t v7;
  unsigned int *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  BOOL v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t *v16;

  while (!(*(unsigned int (**)(_QWORD))(*(_QWORD *)*a2 + 72))(*a2)
       || ((*(uint64_t (**)(_QWORD))(*(_QWORD *)*a3 + 72))(*a3) & 1) == 0)
  {
    if ((*(unsigned int (**)(_QWORD))(*(_QWORD *)*a3 + 72))(*a3))
    {
      (*(void (**)(_QWORD))(*(_QWORD *)*a2 + 88))(*a2);
      if (((*(uint64_t (**)(_QWORD))(*(_QWORD *)*a2 + 72))(*a2) & 1) == 0)
      {
        do
        {
          v6 = *(_DWORD *)(a1 + 28);
          v7 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a2 + 80))(*a2);
          v8 = (unsigned int *)(v7 + 4);
          if (v6)
            v8 = (unsigned int *)v7;
          if (((*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)*a3 + 64))(*a3, *v8) & 1) != 0)
            break;
          (*(void (**)(_QWORD))(*(_QWORD *)*a2 + 88))(*a2);
        }
        while (!(*(unsigned int (**)(_QWORD))(*(_QWORD *)*a2 + 72))(*a2));
      }
    }
    while (((*(uint64_t (**)(_QWORD))(*(_QWORD *)*a3 + 72))(*a3) & 1) == 0)
    {
      v9 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a2 + 80))(*a2);
      v10 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a3 + 80))(*a3);
      (*(void (**)(_QWORD))(*(_QWORD *)*a3 + 88))(*a3);
      v11 = *(_DWORD *)(a1 + 28);
      v12 = v11 == 0;
      if (v11)
        v13 = (unint64_t *)v10;
      else
        v13 = (unint64_t *)v9;
      v14 = *v13;
      v15 = v13[1];
      if (v12)
        v16 = (uint64_t *)v10;
      else
        v16 = (uint64_t *)v9;
      if (fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::NullComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::MatchArc(a1, *(unsigned int *)(a1 + 24), v14, v15, *v16, v16[1]))return 1;
    }
  }
  return 0;
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::NullComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::MatchArc(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  float v9;
  unint64_t v12;
  char v13;

  v6 = a3 >= 0xFFFFFFFF00000000 || (_DWORD)a5 == -1;
  v7 = !v6;
  if (!v6)
  {
    v8 = *(_QWORD *)(a1 + 16);
    v12 = __PAIR64__(HIDWORD(a6), HIDWORD(a4));
    v13 = 0;
    *(_DWORD *)(a1 + 68) = a3;
    *(_DWORD *)(a1 + 72) = HIDWORD(a5);
    v9 = NAN;
    if (*(float *)&a4 != -INFINITY && *(float *)&a6 != -INFINITY)
    {
      v9 = INFINITY;
      if (*(float *)&a6 != INFINITY && *(float *)&a4 != INFINITY)
        v9 = *(float *)&a4 + *(float *)&a6;
    }
    *(float *)(a1 + 76) = v9;
    *(_DWORD *)(a1 + 80) = fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,(fst::HSType)1>::FindId(*(_QWORD **)(v8 + 176), (uint64_t *)&v12, 1);
  }
  return v7;
}

uint64_t fst::ComposeFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::CreateBase2<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::AltSequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = operator new();
  fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::AltSequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::ComposeFstImpl<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>(v6, a1, a2, a3);
  return v6;
}

void sub_1AD8CCDD8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10F3C405A371F01);
  _Unwind_Resume(a1);
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::AltSequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::ComposeFstImpl<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __int128 *v8;
  __int128 v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;

  *(_QWORD *)fst::ComposeFstImplBase<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::ComposeFstImplBase(a1, a2, a3, a4) = &unk_1E5D1D940;
  v8 = *(__int128 **)(a4 + 40);
  if (!v8)
  {
    v8 = (__int128 *)operator new();
    fst::AltSequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::AltSequenceComposeFilter((uint64_t)v8, a2, a3, *(_QWORD **)(a4 + 24), *(_QWORD **)(a4 + 32));
  }
  *(_QWORD *)(a1 + 136) = v8;
  v9 = *v8;
  *(_OWORD *)(a1 + 144) = *v8;
  *(_QWORD *)(a1 + 160) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)v9 + 32))(*(_QWORD *)v9);
  *(_QWORD *)(a1 + 168) = (*(uint64_t (**)(_QWORD))(***(_QWORD ***)(a1 + 152) + 32))(**(_QWORD **)(a1 + 152));
  v10 = *(_QWORD **)(a4 + 48);
  if (!v10)
  {
    v10 = (_QWORD *)operator new();
    v10[1] = v10;
    v10[2] = v10;
    std::unordered_set<int,fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,(fst::HSType)1>::HashFunc,fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,(fst::HSType)1>::HashEqual,std::allocator<int>>::unordered_set((uint64_t)(v10 + 3), 0, v10 + 1, v10 + 2);
    v10[10] = 0;
    v10[11] = 0;
    v10[12] = 0;
  }
  *(_QWORD *)(a1 + 176) = v10;
  fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::SetMatchType(a1);
  if (*(_DWORD *)(a1 + 184) == 3)
    *(_QWORD *)(a1 + 8) |= 4uLL;
  v11 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, 0x3FFFFFFF0007, 0);
  v12 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a3 + 64))(a3, 0x3FFFFFFF0007, 0);
  v13 = (*(uint64_t (**)(_QWORD, uint64_t))(***(_QWORD ***)(a1 + 144) + 40))(**(_QWORD **)(a1 + 144), v11);
  v14 = (*(uint64_t (**)(_QWORD, uint64_t))(***(_QWORD ***)(a1 + 152) + 40))(**(_QWORD **)(a1 + 152), v12);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a1 + 8) & 0xFFFFC0000000FFFFLL | fst::ComposeProperties(v13, v14) & 0x3FFFFFFF0004;
  return a1;
}

void sub_1AD8CCFBC(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t v2;

  MEMORY[0x1AF44D190](v2, 0x10E0C406D28CB5CLL);
  fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::~CacheBaseImpl(v1);
  _Unwind_Resume(a1);
}

void fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::AltSequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::~ComposeFstImpl(_QWORD *a1)
{
  fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::AltSequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::~ComposeFstImpl(a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::AltSequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Properties(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 32))(a1, 0x3FFFFFFF0007);
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::AltSequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Properties(uint64_t a1, uint64_t a2)
{
  if ((a2 & 4) != 0
    && ((*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(**(_QWORD **)(a1 + 160) + 64))(*(_QWORD *)(a1 + 160), 4, 0)|| (*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(**(_QWORD **)(a1 + 168) + 64))(*(_QWORD *)(a1 + 168), 4, 0)|| ((*(uint64_t (**)(_QWORD, _QWORD))(***(_QWORD ***)(a1 + 144) + 40))(**(_QWORD **)(a1 + 144), 0) & 4) != 0|| ((*(uint64_t (**)(_QWORD, _QWORD))(***(_QWORD ***)(a1 + 152) + 40))(**(_QWORD **)(a1 + 152), 0) & 4) != 0))
  {
    *(_QWORD *)(a1 + 8) |= 4uLL;
  }
  return *(_QWORD *)(a1 + 8) & a2;
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::AltSequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Copy(uint64_t a1)
{
  uint64_t v2;

  v2 = operator new();
  fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::AltSequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::ComposeFstImpl(v2, a1);
  return v2;
}

void sub_1AD8CD148(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10F3C405A371F01);
  _Unwind_Resume(a1);
}

void fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::AltSequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Expand(_QWORD *a1, int a2)
{
  unsigned int *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  char v16;

  v4 = (unsigned int *)(*(_QWORD *)(a1[22] + 80) + 12 * a2);
  v5 = *v4;
  v6 = v4[1];
  v7 = a1[17];
  v16 = *((_BYTE *)v4 + 8);
  fst::AltSequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::SetState(v7, v5, v6, &v16);
  if (fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::AltSequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::MatchInput((uint64_t)a1, v5, v6))
  {
    v9 = a1[20];
    v8 = a1[21];
    v10 = (_QWORD *)a1[19];
    v11 = (uint64_t)a1;
    v12 = a2;
    v13 = v6;
    v14 = v5;
    v15 = 1;
  }
  else
  {
    v8 = a1[20];
    v9 = a1[21];
    v10 = (_QWORD *)a1[18];
    v11 = (uint64_t)a1;
    v12 = a2;
    v13 = v5;
    v14 = v6;
    v15 = 0;
  }
  fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::AltSequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::OrderedExpand<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>(v11, v12, v8, v13, v9, v14, v10, v15);
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::AltSequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::InitMatcher(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v6;

  if ((*(unsigned int (**)(_QWORD, _QWORD))(***(_QWORD ***)(a1 + 144) + 24))(**(_QWORD **)(a1 + 144), 0) != a3
    || (*(unsigned int (**)(_QWORD, _QWORD))(***(_QWORD ***)(a1 + 152) + 24))(**(_QWORD **)(a1 + 152), 0) != a3)
  {
    return 0;
  }
  v6 = operator new();
  fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::AltSequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::ComposeFstMatcher(v6, a2, a1, a3);
  return v6;
}

void sub_1AD8CD2C4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10E1C40868C5753);
  _Unwind_Resume(a1);
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::AltSequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::ComputeStart(_QWORD **a1)
{
  uint64_t result;
  unsigned int v3;
  unint64_t v4;
  char v5;

  result = (*(uint64_t (**)(_QWORD *))(*a1[20] + 24))(a1[20]);
  if ((_DWORD)result != -1)
  {
    v3 = result;
    result = (*(uint64_t (**)(_QWORD *))(*a1[21] + 24))(a1[21]);
    if ((_DWORD)result != -1)
    {
      v4 = __PAIR64__(result, v3);
      v5 = 0;
      return fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,(fst::HSType)1>::FindId(a1[22], (uint64_t *)&v4, 1);
    }
  }
  return result;
}

void fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::AltSequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::ComputeFinal(uint64_t a1, int a2)
{
  uint64_t v4;
  int *v5;
  int v6;
  float v7;
  uint64_t v8;
  float v9;
  uint64_t v10;
  float v11;

  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 176) + 80);
  v5 = (int *)(v4 + 12 * a2);
  v6 = *v5;
  v7 = (*(float (**)(_QWORD, _QWORD))(***(_QWORD ***)(a1 + 144) + 96))(**(_QWORD **)(a1 + 144), *v5);
  v11 = v7;
  if (v7 != INFINITY)
  {
    v8 = v5[1];
    v9 = (*(float (**)(_QWORD, uint64_t))(***(_QWORD ***)(a1 + 152) + 96))(**(_QWORD **)(a1 + 152), v8);
    v11 = v9;
    if (v9 != INFINITY)
    {
      v10 = *(_QWORD *)(a1 + 136);
      LOBYTE(v11) = *(_BYTE *)(v4 + 12 * a2 + 8);
      fst::AltSequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::SetState(v10, v6, v8, &v11);
    }
  }
}

uint64_t fst::AltSequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::AltSequenceComposeFilter(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4, _QWORD *a5)
{
  _QWORD *v6;
  _QWORD *v10;

  v6 = a4;
  if (!a4)
  {
    v6 = (_QWORD *)operator new();
    fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Matcher(v6, a2, 1);
  }
  *(_QWORD *)a1 = v6;
  if (!a5)
  {
    v10 = (_QWORD *)operator new();
    fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Matcher(v10, a3, 0);
    a5 = v10;
  }
  *(_QWORD *)(a1 + 8) = a5;
  *(_QWORD *)(a1 + 16) = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a5 + 32))(*a5);
  *(_QWORD *)(a1 + 24) = -1;
  *(_BYTE *)(a1 + 32) = -1;
  return a1;
}

void sub_1AD8CD560(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x20C4093837F09);
  _Unwind_Resume(a1);
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::AltSequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::~ComposeFstImpl(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;

  *a1 = &unk_1E5D1D940;
  v2 = a1[17];
  if (v2)
  {
    v3 = fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::~SequenceComposeFilter(v2);
    MEMORY[0x1AF44D190](v3, 0x1060C40AD892F49);
  }
  v4 = a1[22];
  if (v4)
  {
    v5 = *(void **)(v4 + 80);
    if (v5)
    {
      *(_QWORD *)(v4 + 88) = v5;
      operator delete(v5);
    }
    std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(v4 + 24);
    MEMORY[0x1AF44D190](v4, 0x10E0C406D28CB5CLL);
  }
  return fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::~CacheBaseImpl(a1);
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::AltSequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::ComposeFstImpl(uint64_t a1, uint64_t a2)
{
  __int128 *v4;
  __int128 v5;
  uint64_t v6;

  *fst::ComposeFstImplBase<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::ComposeFstImplBase((_QWORD *)a1, a2) = &unk_1E5D1D940;
  v4 = (__int128 *)operator new();
  fst::AltSequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::AltSequenceComposeFilter((uint64_t)v4, *(_QWORD ***)(a2 + 136), 1);
  *(_QWORD *)(a1 + 136) = v4;
  v5 = *v4;
  *(_OWORD *)(a1 + 144) = *v4;
  *(_QWORD *)(a1 + 160) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)v5 + 32))(*(_QWORD *)v5);
  *(_QWORD *)(a1 + 168) = (*(uint64_t (**)(_QWORD))(***(_QWORD ***)(a1 + 152) + 32))(**(_QWORD **)(a1 + 152));
  v6 = operator new();
  fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,(fst::HSType)1>::CompactHashBiTable(v6, *(_QWORD *)(a2 + 176));
  *(_QWORD *)(a1 + 176) = v6;
  *(_DWORD *)(a1 + 184) = *(_DWORD *)(a2 + 184);
  return a1;
}

void sub_1AD8CD6E4(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t v2;

  MEMORY[0x1AF44D190](v2, 0x10E0C406D28CB5CLL);
  fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::~CacheBaseImpl(v1);
  _Unwind_Resume(a1);
}

uint64_t fst::AltSequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::AltSequenceComposeFilter(uint64_t a1, _QWORD **a2, uint64_t a3)
{
  _QWORD *v6;

  *(_QWORD *)a1 = fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Copy(*a2, a3);
  v6 = fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Copy(a2[1], a3);
  *(_QWORD *)(a1 + 8) = v6;
  *(_QWORD *)(a1 + 16) = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v6 + 32))(*v6);
  *(_QWORD *)(a1 + 24) = -1;
  *(_BYTE *)(a1 + 32) = -1;
  return a1;
}

BOOL fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::AltSequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::MatchInput(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v3;
  uint64_t v7;
  uint64_t v8;
  fst *v11;
  _QWORD *v12;
  void *__p[2];
  char v14;
  char v15;

  v3 = *(_DWORD *)(a1 + 184);
  if (!v3)
    return 1;
  if (v3 == 1)
    return 0;
  v7 = (*(uint64_t (**)(_QWORD))(***(_QWORD ***)(a1 + 144) + 104))(**(_QWORD **)(a1 + 144));
  v8 = (*(uint64_t (**)(_QWORD, uint64_t))(***(_QWORD ***)(a1 + 152) + 104))(**(_QWORD **)(a1 + 152), a3);
  if (v7 == -1 && v8 == -1)
  {
    if (FLAGS_fst_error_fatal)
      std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
    else
      std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
    v11 = fst::LogMessage::LogMessage((fst *)&v15, (uint64_t)__p);
    v12 = (_QWORD *)fst::cerr(v11);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"ComposeFst: both sides can't require match", 42);
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v15);
    if (v14 < 0)
      operator delete(__p[0]);
    *(_QWORD *)(a1 + 8) |= 4uLL;
    return 1;
  }
  if (v7 == -1)
    return 0;
  return v8 == -1 || v7 <= v8;
}

void sub_1AD8CD8C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  fst::LogMessage::~LogMessage((fst::LogMessage *)&a18);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::AltSequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::OrderedExpand<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, _QWORD *a7, int a8)
{
  unsigned int *v14;
  _QWORD v15[3];
  _DWORD *v16;
  unint64_t v17;
  unsigned int v18[4];

  (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*a7 + 56))(*a7, a4);
  v18[0] = a8 - 1;
  v18[1] = a8 << 31 >> 31;
  v18[2] = 0;
  v18[3] = a6;
  fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::AltSequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::MatchArc<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>(a1, a2, a7, v18, a8);
  v17 = 0;
  (*(void (**)(uint64_t, uint64_t, _QWORD *))(*(_QWORD *)a5 + 136))(a5, a6, v15);
  while (1)
  {
    if (!v15[0])
    {
      if (v17 >= v15[2])
        goto LABEL_13;
LABEL_7:
      v14 = (unsigned int *)(v15[1] + 16 * v17);
      goto LABEL_8;
    }
    if ((*(unsigned int (**)(_QWORD))(*(_QWORD *)v15[0] + 24))(v15[0]))
      break;
    if (!v15[0])
      goto LABEL_7;
    v14 = (unsigned int *)(*(uint64_t (**)(void))(*(_QWORD *)v15[0] + 32))();
LABEL_8:
    fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::AltSequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::MatchArc<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>(a1, a2, a7, v14, a8);
    if (v15[0])
      (*(void (**)(_QWORD))(*(_QWORD *)v15[0] + 40))(v15[0]);
    else
      ++v17;
  }
  if (v15[0])
  {
    (*(void (**)(void))(*(_QWORD *)v15[0] + 8))();
    goto LABEL_15;
  }
LABEL_13:
  if (v16)
    --*v16;
LABEL_15:
  fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::SetArcs(a1, a2);
}

void sub_1AD8CDA64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  else
    fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::OrderedExpand<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>((uint64_t)&a10);
  _Unwind_Resume(a1);
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::AltSequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::MatchArc<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>(uint64_t a1, int a2, _QWORD *a3, unsigned int *a4, int a5)
{
  unsigned int *v10;
  uint64_t result;
  __int128 v12;
  unsigned __int8 *v13;
  char v14;
  unsigned __int8 *v15;
  char v16;
  int v17;
  BOOL v18;
  char v19;
  unsigned int *v20;
  __int128 *v21;
  int v22;
  BOOL v23;
  char v24;
  char v25;
  __int128 v26;
  __int128 v27;

  v10 = a4 + 1;
  if (!a5)
    v10 = a4;
  result = (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)*a3 + 64))(*a3, *v10);
  if ((_DWORD)result)
  {
    result = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a3 + 72))(*a3);
    if ((result & 1) == 0)
    {
      do
      {
        v12 = *(_OWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)*a3 + 80))(*a3);
        v26 = *(_OWORD *)a4;
        v27 = v12;
        if (a5)
        {
          v13 = *(unsigned __int8 **)(a1 + 136);
          if ((_DWORD)v27 == -1)
          {
            if (!v13[33])
            {
              v14 = v13[34] ^ 1;
LABEL_16:
              v25 = v14;
LABEL_24:
              v20 = (unsigned int *)&v26;
              v21 = &v27;
              goto LABEL_30;
            }
          }
          else
          {
            if (DWORD1(v26) == -1)
            {
              v17 = v13[32];
              v18 = v17 == 1;
              if (v17 == 1)
                v19 = -1;
              else
                v19 = 0;
              v25 = v19;
              if (v18)
                goto LABEL_31;
              goto LABEL_24;
            }
            if (DWORD1(v26))
            {
              v14 = 0;
              goto LABEL_16;
            }
          }
        }
        else
        {
          v15 = *(unsigned __int8 **)(a1 + 136);
          if ((_DWORD)v26 == -1)
          {
            if (!v15[33])
            {
              v16 = v15[34] ^ 1;
LABEL_19:
              v25 = v16;
LABEL_29:
              v20 = (unsigned int *)&v27;
              v21 = &v26;
LABEL_30:
              fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::AddArc(a1, a2, v20, (uint64_t)v21, &v25);
            }
          }
          else
          {
            if (DWORD1(v27) == -1)
            {
              v22 = v15[32];
              v23 = v22 == 1;
              if (v22 == 1)
                v24 = -1;
              else
                v24 = 0;
              v25 = v24;
              if (v23)
                goto LABEL_31;
              goto LABEL_29;
            }
            if (DWORD1(v27))
            {
              v16 = 0;
              goto LABEL_19;
            }
          }
        }
LABEL_31:
        (*(void (**)(_QWORD))(*(_QWORD *)*a3 + 88))(*a3);
        result = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a3 + 72))(*a3);
      }
      while (!(_DWORD)result);
    }
  }
  return result;
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::AltSequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::ComposeFstMatcher(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  *(_QWORD *)a1 = &unk_1E5D1F880;
  *(_QWORD *)(a1 + 8) = a2;
  *(_QWORD *)(a1 + 16) = a3;
  *(_DWORD *)(a1 + 24) = -1;
  *(_DWORD *)(a1 + 28) = a4;
  *(_QWORD *)(a1 + 32) = fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Copy(*(_QWORD **)(a3 + 144), 0);
  *(_QWORD *)(a1 + 40) = fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Copy(*(_QWORD **)(a3 + 152), 0);
  *(_BYTE *)(a1 + 48) = 0;
  *(_OWORD *)(a1 + 52) = xmmword_1AE142840;
  *(_BYTE *)(a1 + 84) = 0;
  if (a4 == 1)
    *(_QWORD *)(a1 + 52) = 0xFFFFFFFF00000000;
  return a1;
}

void fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::AltSequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::~ComposeFstMatcher(_QWORD *a1)
{
  fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::AltSequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::~ComposeFstMatcher(a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::AltSequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Copy(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = operator new();
  fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::AltSequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::ComposeFstMatcher(v4, a1, a2);
  return v4;
}

void sub_1AD8CDD28(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10E1C40868C5753);
  _Unwind_Resume(a1);
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::AltSequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Type(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = (*(uint64_t (**)(_QWORD))(***(_QWORD ***)(a1 + 32) + 24))(**(_QWORD **)(a1 + 32));
  if ((_DWORD)result != 3)
  {
    result = (*(uint64_t (**)(_QWORD, uint64_t))(***(_QWORD ***)(a1 + 40) + 24))(**(_QWORD **)(a1 + 40), a2);
    if ((_DWORD)result != 3)
    {
      if ((*(unsigned int (**)(_QWORD, uint64_t))(***(_QWORD ***)(a1 + 32) + 24))(**(_QWORD **)(a1 + 32), a2) != 4|| (result = (*(uint64_t (**)(_QWORD, uint64_t))(***(_QWORD ***)(a1 + 40) + 24))(**(_QWORD **)(a1 + 40), a2), (_DWORD)result != 4))
      {
        if ((*(unsigned int (**)(_QWORD, uint64_t))(***(_QWORD ***)(a1 + 32) + 24))(**(_QWORD **)(a1 + 32), a2) == 4&& (*(unsigned int (**)(_QWORD, uint64_t))(***(_QWORD ***)(a1 + 40) + 24))(**(_QWORD **)(a1 + 40), a2) == *(_DWORD *)(a1 + 28))
        {
          return 4;
        }
        else if ((*(unsigned int (**)(_QWORD, uint64_t))(***(_QWORD ***)(a1 + 32) + 24))(**(_QWORD **)(a1 + 32), a2) != *(_DWORD *)(a1 + 28)|| (result = (*(uint64_t (**)(_QWORD, uint64_t))(***(_QWORD ***)(a1 + 40) + 24))(**(_QWORD **)(a1 + 40), a2), (_DWORD)result != 4))
        {
          if ((*(unsigned int (**)(_QWORD, uint64_t))(***(_QWORD ***)(a1 + 32) + 24))(**(_QWORD **)(a1 + 32), a2) != *(_DWORD *)(a1 + 28))return 3;
          result = (*(uint64_t (**)(_QWORD, uint64_t))(***(_QWORD ***)(a1 + 40) + 24))(**(_QWORD **)(a1 + 40), a2);
          if ((_DWORD)result != *(_DWORD *)(a1 + 28))
            return 3;
        }
      }
    }
  }
  return result;
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::AltSequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::GetFst(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8);
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::AltSequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Properties(uint64_t a1, uint64_t a2)
{
  if (*(_BYTE *)(a1 + 84))
    return a2 | 4;
  else
    return a2;
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::AltSequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::SetState_(uint64_t result, int a2)
{
  uint64_t v2;
  unsigned int *v3;
  uint64_t v4;

  if (*(_DWORD *)(result + 24) != a2)
  {
    v2 = result;
    *(_DWORD *)(result + 24) = a2;
    v3 = (unsigned int *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(result + 16) + 176) + 80) + 12 * a2);
    v4 = v3[1];
    (*(void (**)(_QWORD, _QWORD))(***(_QWORD ***)(result + 32) + 56))(**(_QWORD **)(result + 32), *v3);
    result = (*(uint64_t (**)(_QWORD, uint64_t))(***(_QWORD ***)(v2 + 40) + 56))(**(_QWORD **)(v2 + 40), v4);
    *(_DWORD *)(v2 + 64) = *(_DWORD *)(v2 + 24);
  }
  return result;
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::AltSequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Find_(uint64_t a1, uint64_t a2)
{
  _QWORD **v2;
  _QWORD **v3;

  *(_BYTE *)(a1 + 48) = (_DWORD)a2 == 0;
  if (*(_DWORD *)(a1 + 28))
  {
    if ((_DWORD)a2)
    {
      v2 = (_QWORD **)(a1 + 40);
      v3 = (_QWORD **)(a1 + 32);
      return fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::AltSequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::FindLabel<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>(a1, a2, *v2, *v3);
    }
  }
  else if ((_DWORD)a2)
  {
    v2 = (_QWORD **)(a1 + 32);
    v3 = (_QWORD **)(a1 + 40);
    return fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::AltSequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::FindLabel<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>(a1, a2, *v2, *v3);
  }
  return 1;
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::AltSequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Done_(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 48)
    || !(*(unsigned int (**)(_QWORD))(***(_QWORD ***)(a1 + 32) + 72))(**(_QWORD **)(a1 + 32)))
  {
    return 0;
  }
  else
  {
    return (*(uint64_t (**)(_QWORD))(***(_QWORD ***)(a1 + 40) + 72))(**(_QWORD **)(a1 + 40));
  }
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::AltSequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Value_(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 48))
    return a1 + 52;
  else
    return a1 + 68;
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::AltSequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Next_(uint64_t result)
{
  _QWORD *v1;
  _QWORD *v2;

  if (*(_BYTE *)(result + 48))
  {
    *(_BYTE *)(result + 48) = 0;
  }
  else
  {
    if (*(_DWORD *)(result + 28))
    {
      v2 = *(_QWORD **)(result + 32);
      v1 = *(_QWORD **)(result + 40);
    }
    else
    {
      v1 = *(_QWORD **)(result + 32);
      v2 = *(_QWORD **)(result + 40);
    }
    return fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::AltSequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::FindNext<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>(result, v1, v2);
  }
  return result;
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::AltSequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Priority_(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8));
}

_QWORD *fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::AltSequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::~ComposeFstMatcher(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  *a1 = &unk_1E5D1F880;
  v2 = (_QWORD *)a1[4];
  if (v2)
  {
    if (*v2)
      (*(void (**)(_QWORD))(*(_QWORD *)*v2 + 8))(*v2);
    MEMORY[0x1AF44D190](v2, 0x20C4093837F09);
  }
  v3 = (_QWORD *)a1[5];
  if (v3)
  {
    if (*v3)
      (*(void (**)(_QWORD))(*(_QWORD *)*v3 + 8))(*v3);
    MEMORY[0x1AF44D190](v3, 0x20C4093837F09);
  }
  return a1;
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::AltSequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::ComposeFstMatcher(uint64_t a1, uint64_t a2, uint64_t a3)
{
  fst *v6;
  _QWORD *v7;
  void *__p[2];
  char v10;
  char v11;

  *(_QWORD *)a1 = &unk_1E5D1F880;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 24) = -1;
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_QWORD *)(a1 + 32) = fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Copy(*(_QWORD **)(a2 + 32), a3);
  *(_QWORD *)(a1 + 40) = fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Copy(*(_QWORD **)(a2 + 40), a3);
  *(_BYTE *)(a1 + 48) = 0;
  *(_OWORD *)(a1 + 52) = xmmword_1AE142840;
  *(_BYTE *)(a1 + 84) = *(_BYTE *)(a2 + 84);
  if ((_DWORD)a3)
  {
    if (FLAGS_fst_error_fatal)
      std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
    else
      std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
    v6 = fst::LogMessage::LogMessage((fst *)&v11, (uint64_t)__p);
    v7 = (_QWORD *)fst::cerr(v6);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"ComposeFstMatcher: safe copy not supported", 42);
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v11);
    if (v10 < 0)
      operator delete(__p[0]);
    *(_BYTE *)(a1 + 84) = 1;
  }
  if (*(_DWORD *)(a1 + 28) == 1)
    *(int32x2_t *)(a1 + 52) = vrev64_s32(*(int32x2_t *)(a1 + 52));
  return a1;
}

void sub_1AD8CE220(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  fst::LogMessage::~LogMessage((fst::LogMessage *)&a18);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::AltSequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::FindLabel<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>(uint64_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4)
{
  uint64_t result;
  int v8;
  uint64_t v9;
  unsigned int *v10;

  result = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a3 + 64))(*a3);
  if ((_DWORD)result)
  {
    v8 = *(_DWORD *)(a1 + 28);
    v9 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a3 + 80))(*a3);
    v10 = (unsigned int *)(v9 + 4);
    if (v8)
      v10 = (unsigned int *)v9;
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)*a4 + 64))(*a4, *v10);
    return fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::AltSequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::FindNext<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>(a1, a3, a4);
  }
  return result;
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::AltSequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::FindNext<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  int v6;
  uint64_t v7;
  unsigned int *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  BOOL v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;

  while (!(*(unsigned int (**)(_QWORD))(*(_QWORD *)*a2 + 72))(*a2)
       || ((*(uint64_t (**)(_QWORD))(*(_QWORD *)*a3 + 72))(*a3) & 1) == 0)
  {
    if ((*(unsigned int (**)(_QWORD))(*(_QWORD *)*a3 + 72))(*a3))
    {
      (*(void (**)(_QWORD))(*(_QWORD *)*a2 + 88))(*a2);
      if (((*(uint64_t (**)(_QWORD))(*(_QWORD *)*a2 + 72))(*a2) & 1) == 0)
      {
        do
        {
          v6 = *(_DWORD *)(a1 + 28);
          v7 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a2 + 80))(*a2);
          v8 = (unsigned int *)(v7 + 4);
          if (v6)
            v8 = (unsigned int *)v7;
          if (((*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)*a3 + 64))(*a3, *v8) & 1) != 0)
            break;
          (*(void (**)(_QWORD))(*(_QWORD *)*a2 + 88))(*a2);
        }
        while (!(*(unsigned int (**)(_QWORD))(*(_QWORD *)*a2 + 72))(*a2));
      }
    }
    while (((*(uint64_t (**)(_QWORD))(*(_QWORD *)*a3 + 72))(*a3) & 1) == 0)
    {
      v9 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a2 + 80))(*a2);
      v10 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a3 + 80))(*a3);
      (*(void (**)(_QWORD))(*(_QWORD *)*a3 + 88))(*a3);
      v11 = *(_DWORD *)(a1 + 28);
      v12 = v11 == 0;
      if (v11)
        v13 = (uint64_t *)v10;
      else
        v13 = (uint64_t *)v9;
      v14 = *v13;
      v15 = v13[1];
      if (v12)
        v16 = (uint64_t *)v10;
      else
        v16 = (uint64_t *)v9;
      if (fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::AltSequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::MatchArc(a1, *(unsigned int *)(a1 + 24), v14, v15, *v16, v16[1]))return 1;
    }
  }
  return 0;
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::AltSequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::MatchArc(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  _BYTE *v7;
  char v8;
  uint64_t v9;
  float v10;
  unint64_t v13;
  char v14;

  v6 = *(_QWORD *)(a1 + 16);
  v7 = *(_BYTE **)(v6 + 136);
  if ((_DWORD)a5 != -1)
  {
    if (HIDWORD(a3))
    {
      v8 = 0;
      if (HIDWORD(a3) == -1)
      {
        v8 = 0;
        v9 = 0;
        if (v7[32] == 1)
          return v9;
      }
      goto LABEL_7;
    }
    return 0;
  }
  if (v7[33])
    return 0;
  v8 = v7[34] ^ 1;
LABEL_7:
  v13 = __PAIR64__(HIDWORD(a6), HIDWORD(a4));
  v14 = v8;
  *(_DWORD *)(a1 + 68) = a3;
  *(_DWORD *)(a1 + 72) = HIDWORD(a5);
  v10 = NAN;
  if (*(float *)&a4 != -INFINITY && *(float *)&a6 != -INFINITY)
  {
    v10 = INFINITY;
    if (*(float *)&a6 != INFINITY && *(float *)&a4 != INFINITY)
      v10 = *(float *)&a4 + *(float *)&a6;
  }
  *(float *)(a1 + 76) = v10;
  v9 = 1;
  *(_DWORD *)(a1 + 80) = fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,(fst::HSType)1>::FindId(*(_QWORD **)(v6 + 176), (uint64_t *)&v13, 1);
  return v9;
}

uint64_t fst::ComposeFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::CreateBase2<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::MatchComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = operator new();
  fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::MatchComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::ComposeFstImpl<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>(v6, a1, a2, a3);
  return v6;
}

void sub_1AD8CE5B4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10F3C405A371F01);
  _Unwind_Resume(a1);
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::MatchComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::ComposeFstImpl<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __int128 *v8;
  __int128 v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;

  *(_QWORD *)fst::ComposeFstImplBase<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::ComposeFstImplBase(a1, a2, a3, a4) = &unk_1E5D1D640;
  v8 = *(__int128 **)(a4 + 40);
  if (!v8)
  {
    v8 = (__int128 *)operator new();
    fst::MatchComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::MatchComposeFilter((uint64_t)v8, a2, a3, *(_QWORD **)(a4 + 24), *(_QWORD **)(a4 + 32));
  }
  *(_QWORD *)(a1 + 136) = v8;
  v9 = *v8;
  *(_OWORD *)(a1 + 144) = *v8;
  *(_QWORD *)(a1 + 160) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)v9 + 32))(*(_QWORD *)v9);
  *(_QWORD *)(a1 + 168) = (*(uint64_t (**)(_QWORD))(***(_QWORD ***)(a1 + 152) + 32))(**(_QWORD **)(a1 + 152));
  v10 = *(_QWORD **)(a4 + 48);
  if (!v10)
  {
    v10 = (_QWORD *)operator new();
    v10[1] = v10;
    v10[2] = v10;
    std::unordered_set<int,fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,(fst::HSType)1>::HashFunc,fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,(fst::HSType)1>::HashEqual,std::allocator<int>>::unordered_set((uint64_t)(v10 + 3), 0, v10 + 1, v10 + 2);
    v10[10] = 0;
    v10[11] = 0;
    v10[12] = 0;
  }
  *(_QWORD *)(a1 + 176) = v10;
  fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::SetMatchType(a1);
  if (*(_DWORD *)(a1 + 184) == 3)
    *(_QWORD *)(a1 + 8) |= 4uLL;
  v11 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, 0x3FFFFFFF0007, 0);
  v12 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a3 + 64))(a3, 0x3FFFFFFF0007, 0);
  v13 = (*(uint64_t (**)(_QWORD, uint64_t))(***(_QWORD ***)(a1 + 144) + 40))(**(_QWORD **)(a1 + 144), v11);
  v14 = (*(uint64_t (**)(_QWORD, uint64_t))(***(_QWORD ***)(a1 + 152) + 40))(**(_QWORD **)(a1 + 152), v12);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a1 + 8) & 0xFFFFC0000000FFFFLL | fst::ComposeProperties(v13, v14) & 0x3FFFFFFF0004;
  return a1;
}

void sub_1AD8CE798(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t v2;

  MEMORY[0x1AF44D190](v2, 0x10E0C406D28CB5CLL);
  fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::~CacheBaseImpl(v1);
  _Unwind_Resume(a1);
}

void fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::MatchComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::~ComposeFstImpl(_QWORD *a1)
{
  fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::MatchComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::~ComposeFstImpl(a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::MatchComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Properties(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 32))(a1, 0x3FFFFFFF0007);
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::MatchComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Properties(uint64_t a1, uint64_t a2)
{
  if ((a2 & 4) != 0
    && ((*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(**(_QWORD **)(a1 + 160) + 64))(*(_QWORD *)(a1 + 160), 4, 0)|| (*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(**(_QWORD **)(a1 + 168) + 64))(*(_QWORD *)(a1 + 168), 4, 0)|| ((*(uint64_t (**)(_QWORD, _QWORD))(***(_QWORD ***)(a1 + 144) + 40))(**(_QWORD **)(a1 + 144), 0) & 4) != 0|| ((*(uint64_t (**)(_QWORD, _QWORD))(***(_QWORD ***)(a1 + 152) + 40))(**(_QWORD **)(a1 + 152), 0) & 4) != 0))
  {
    *(_QWORD *)(a1 + 8) |= 4uLL;
  }
  return *(_QWORD *)(a1 + 8) & a2;
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::MatchComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Copy(uint64_t a1)
{
  uint64_t v2;

  v2 = operator new();
  fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::MatchComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::ComposeFstImpl(v2, a1);
  return v2;
}

void sub_1AD8CE924(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10F3C405A371F01);
  _Unwind_Resume(a1);
}

void fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::MatchComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Expand(_QWORD *a1, int a2)
{
  unsigned int *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  char v16;

  v4 = (unsigned int *)(*(_QWORD *)(a1[22] + 80) + 12 * a2);
  v5 = *v4;
  v6 = v4[1];
  v7 = a1[17];
  v16 = *((_BYTE *)v4 + 8);
  fst::MatchComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::SetState(v7, v5, v6, &v16);
  if (fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::MatchComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::MatchInput((uint64_t)a1, v5, v6))
  {
    v9 = a1[20];
    v8 = a1[21];
    v10 = (_QWORD *)a1[19];
    v11 = (uint64_t)a1;
    v12 = a2;
    v13 = v6;
    v14 = v5;
    v15 = 1;
  }
  else
  {
    v8 = a1[20];
    v9 = a1[21];
    v10 = (_QWORD *)a1[18];
    v11 = (uint64_t)a1;
    v12 = a2;
    v13 = v5;
    v14 = v6;
    v15 = 0;
  }
  fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::MatchComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::OrderedExpand<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>(v11, v12, v8, v13, v9, v14, v10, v15);
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::MatchComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::InitMatcher(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v6;

  if ((*(unsigned int (**)(_QWORD, _QWORD))(***(_QWORD ***)(a1 + 144) + 24))(**(_QWORD **)(a1 + 144), 0) != a3
    || (*(unsigned int (**)(_QWORD, _QWORD))(***(_QWORD ***)(a1 + 152) + 24))(**(_QWORD **)(a1 + 152), 0) != a3)
  {
    return 0;
  }
  v6 = operator new();
  fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::MatchComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::ComposeFstMatcher(v6, a2, a1, a3);
  return v6;
}

void sub_1AD8CEAA0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10E1C40868C5753);
  _Unwind_Resume(a1);
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::MatchComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::ComputeStart(_QWORD **a1)
{
  uint64_t result;
  unsigned int v3;
  unint64_t v4;
  char v5;

  result = (*(uint64_t (**)(_QWORD *))(*a1[20] + 24))(a1[20]);
  if ((_DWORD)result != -1)
  {
    v3 = result;
    result = (*(uint64_t (**)(_QWORD *))(*a1[21] + 24))(a1[21]);
    if ((_DWORD)result != -1)
    {
      v4 = __PAIR64__(result, v3);
      v5 = 0;
      return fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,(fst::HSType)1>::FindId(a1[22], (uint64_t *)&v4, 1);
    }
  }
  return result;
}

void fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::MatchComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::ComputeFinal(uint64_t a1, int a2)
{
  uint64_t v4;
  unsigned int *v5;
  uint64_t v6;
  uint64_t v7;
  float v8;
  uint64_t v9;
  float v10;

  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 176) + 80);
  v5 = (unsigned int *)(v4 + 12 * a2);
  v6 = *v5;
  v10 = (*(float (**)(_QWORD, uint64_t))(***(_QWORD ***)(a1 + 144) + 96))(**(_QWORD **)(a1 + 144), v6);
  if (v10 != INFINITY)
  {
    v7 = v5[1];
    v8 = (*(float (**)(_QWORD, uint64_t))(***(_QWORD ***)(a1 + 152) + 96))(**(_QWORD **)(a1 + 152), v7);
    v10 = v8;
    if (v8 != INFINITY)
    {
      v9 = *(_QWORD *)(a1 + 136);
      LOBYTE(v10) = *(_BYTE *)(v4 + 12 * a2 + 8);
      fst::MatchComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::SetState(v9, v6, v7, &v10);
    }
  }
}

uint64_t fst::MatchComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::MatchComposeFilter(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4, _QWORD *a5)
{
  _QWORD *v6;

  v6 = a4;
  if (!a4)
  {
    v6 = (_QWORD *)operator new();
    fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Matcher(v6, a2, 1);
  }
  *(_QWORD *)a1 = v6;
  if (!a5)
  {
    a5 = (_QWORD *)operator new();
    fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Matcher(a5, a3, 0);
    v6 = *(_QWORD **)a1;
  }
  *(_QWORD *)(a1 + 8) = a5;
  *(_QWORD *)(a1 + 16) = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v6 + 32))(*v6);
  *(_QWORD *)(a1 + 24) = (*(uint64_t (**)(_QWORD))(***(_QWORD ***)(a1 + 8) + 32))(**(_QWORD **)(a1 + 8));
  *(_QWORD *)(a1 + 32) = -1;
  *(_BYTE *)(a1 + 40) = -1;
  return a1;
}

void sub_1AD8CED54(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x20C4093837F09);
  _Unwind_Resume(a1);
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::MatchComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::~ComposeFstImpl(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;

  *a1 = &unk_1E5D1D640;
  v2 = a1[17];
  if (v2)
  {
    v3 = fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::~SequenceComposeFilter(v2);
    MEMORY[0x1AF44D190](v3, 0x1060C4035244DBALL);
  }
  v4 = a1[22];
  if (v4)
  {
    v5 = *(void **)(v4 + 80);
    if (v5)
    {
      *(_QWORD *)(v4 + 88) = v5;
      operator delete(v5);
    }
    std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(v4 + 24);
    MEMORY[0x1AF44D190](v4, 0x10E0C406D28CB5CLL);
  }
  return fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::~CacheBaseImpl(a1);
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::MatchComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::ComposeFstImpl(uint64_t a1, uint64_t a2)
{
  _QWORD **v4;
  __int128 v5;
  uint64_t v6;

  *fst::ComposeFstImplBase<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::ComposeFstImplBase((_QWORD *)a1, a2) = &unk_1E5D1D640;
  v4 = (_QWORD **)operator new();
  fst::MatchComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::MatchComposeFilter(v4, *(_QWORD ***)(a2 + 136), 1);
  *(_QWORD *)(a1 + 136) = v4;
  v5 = *(_OWORD *)v4;
  *(_OWORD *)(a1 + 144) = *(_OWORD *)v4;
  *(_QWORD *)(a1 + 160) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)v5 + 32))(*(_QWORD *)v5);
  *(_QWORD *)(a1 + 168) = (*(uint64_t (**)(_QWORD))(***(_QWORD ***)(a1 + 152) + 32))(**(_QWORD **)(a1 + 152));
  v6 = operator new();
  fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,(fst::HSType)1>::CompactHashBiTable(v6, *(_QWORD *)(a2 + 176));
  *(_QWORD *)(a1 + 176) = v6;
  *(_DWORD *)(a1 + 184) = *(_DWORD *)(a2 + 184);
  return a1;
}

void sub_1AD8CEEE0(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t v2;

  MEMORY[0x1AF44D190](v2, 0x10E0C406D28CB5CLL);
  fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::~CacheBaseImpl(v1);
  _Unwind_Resume(a1);
}

_QWORD **fst::MatchComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::MatchComposeFilter(_QWORD **a1, _QWORD **a2, uint64_t a3)
{
  *a1 = fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Copy(*a2, a3);
  a1[1] = fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Copy(a2[1], a3);
  a1[2] = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)**a1 + 32))(**a1);
  a1[3] = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)*a1[1] + 32))(*a1[1]);
  a1[4] = (_QWORD *)-1;
  *((_BYTE *)a1 + 40) = -1;
  return a1;
}

void fst::MatchComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::SetState(uint64_t a1, uint64_t a2, uint64_t a3, _BYTE *a4)
{
  uint64_t v7;
  uint64_t v8;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v14;

  if (*(_DWORD *)(a1 + 32) != (_DWORD)a2 || *(_DWORD *)(a1 + 36) != (_DWORD)a3 || *a4 != *(_BYTE *)(a1 + 40))
  {
    *(_DWORD *)(a1 + 32) = a2;
    *(_DWORD *)(a1 + 36) = a3;
    *(_BYTE *)(a1 + 40) = *a4;
    v7 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 16) + 40))(*(_QWORD *)(a1 + 16), a2);
    v8 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 16) + 56))(*(_QWORD *)(a1 + 16), a2);
    v10 = (*(float (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 16) + 32))(*(_QWORD *)(a1 + 16), a2) == INFINITY
       && v7 == v8;
    *(_BYTE *)(a1 + 41) = v10;
    *(_BYTE *)(a1 + 43) = v8 == 0;
    v11 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 24) + 40))(*(_QWORD *)(a1 + 24), a3);
    v12 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 24) + 48))(*(_QWORD *)(a1 + 24), a3);
    v14 = (*(float (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 24) + 32))(*(_QWORD *)(a1 + 24), a3) == INFINITY
       && v11 == v12;
    *(_BYTE *)(a1 + 42) = v14;
    *(_BYTE *)(a1 + 44) = v12 == 0;
  }
}

BOOL fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::MatchComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::MatchInput(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v3;
  uint64_t v7;
  uint64_t v8;
  fst *v11;
  _QWORD *v12;
  void *__p[2];
  char v14;
  char v15;

  v3 = *(_DWORD *)(a1 + 184);
  if (!v3)
    return 1;
  if (v3 == 1)
    return 0;
  v7 = (*(uint64_t (**)(_QWORD))(***(_QWORD ***)(a1 + 144) + 104))(**(_QWORD **)(a1 + 144));
  v8 = (*(uint64_t (**)(_QWORD, uint64_t))(***(_QWORD ***)(a1 + 152) + 104))(**(_QWORD **)(a1 + 152), a3);
  if (v7 == -1 && v8 == -1)
  {
    if (FLAGS_fst_error_fatal)
      std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
    else
      std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
    v11 = fst::LogMessage::LogMessage((fst *)&v15, (uint64_t)__p);
    v12 = (_QWORD *)fst::cerr(v11);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"ComposeFst: both sides can't require match", 42);
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v15);
    if (v14 < 0)
      operator delete(__p[0]);
    *(_QWORD *)(a1 + 8) |= 4uLL;
    return 1;
  }
  if (v7 == -1)
    return 0;
  return v8 == -1 || v7 <= v8;
}

void sub_1AD8CF244(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  fst::LogMessage::~LogMessage((fst::LogMessage *)&a18);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::MatchComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::OrderedExpand<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, _QWORD *a7, int a8)
{
  unsigned int *v14;
  _QWORD v15[3];
  _DWORD *v16;
  unint64_t v17;
  unsigned int v18[4];

  (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*a7 + 56))(*a7, a4);
  v18[0] = a8 - 1;
  v18[1] = a8 << 31 >> 31;
  v18[2] = 0;
  v18[3] = a6;
  fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::MatchComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::MatchArc<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>(a1, a2, a7, v18, a8);
  v17 = 0;
  (*(void (**)(uint64_t, uint64_t, _QWORD *))(*(_QWORD *)a5 + 136))(a5, a6, v15);
  while (1)
  {
    if (!v15[0])
    {
      if (v17 >= v15[2])
        goto LABEL_13;
LABEL_7:
      v14 = (unsigned int *)(v15[1] + 16 * v17);
      goto LABEL_8;
    }
    if ((*(unsigned int (**)(_QWORD))(*(_QWORD *)v15[0] + 24))(v15[0]))
      break;
    if (!v15[0])
      goto LABEL_7;
    v14 = (unsigned int *)(*(uint64_t (**)(void))(*(_QWORD *)v15[0] + 32))();
LABEL_8:
    fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::MatchComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::MatchArc<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>(a1, a2, a7, v14, a8);
    if (v15[0])
      (*(void (**)(_QWORD))(*(_QWORD *)v15[0] + 40))(v15[0]);
    else
      ++v17;
  }
  if (v15[0])
  {
    (*(void (**)(void))(*(_QWORD *)v15[0] + 8))();
    goto LABEL_15;
  }
LABEL_13:
  if (v16)
    --*v16;
LABEL_15:
  fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::SetArcs(a1, a2);
}

void sub_1AD8CF3E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  else
    fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::OrderedExpand<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>((uint64_t)&a10);
  _Unwind_Resume(a1);
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::MatchComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::MatchArc<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>(uint64_t a1, int a2, _QWORD *a3, unsigned int *a4, int a5)
{
  unsigned int *v10;
  uint64_t result;
  __int128 v12;
  unsigned int *v13;
  __int128 *v14;
  char v15;
  __int128 v16;
  __int128 v17;

  v10 = a4 + 1;
  if (!a5)
    v10 = a4;
  result = (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)*a3 + 64))(*a3, *v10);
  if ((_DWORD)result)
  {
    result = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a3 + 72))(*a3);
    if ((result & 1) == 0)
    {
      do
      {
        v12 = *(_OWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)*a3 + 80))(*a3);
        v16 = *(_OWORD *)a4;
        v17 = v12;
        if (a5)
        {
          v15 = fst::MatchComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::FilterArc(*(unsigned __int8 **)(a1 + 136), (uint64_t)&v16, &v17);
          if (v15 != -1)
          {
            v13 = (unsigned int *)&v16;
            v14 = &v17;
LABEL_10:
            fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::AddArc(a1, a2, v13, (uint64_t)v14, &v15);
          }
        }
        else
        {
          v15 = fst::MatchComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::FilterArc(*(unsigned __int8 **)(a1 + 136), (uint64_t)&v17, &v16);
          if (v15 != -1)
          {
            v13 = (unsigned int *)&v17;
            v14 = &v16;
            goto LABEL_10;
          }
        }
        (*(void (**)(_QWORD))(*(_QWORD *)*a3 + 88))(*a3);
        result = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a3 + 72))(*a3);
      }
      while (!(_DWORD)result);
    }
  }
  return result;
}

uint64_t fst::MatchComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::FilterArc(unsigned __int8 *a1, uint64_t a2, _DWORD *a3)
{
  int v4;
  uint64_t result;

  if (*a3 == -1)
  {
    result = a1[40];
    if ((_DWORD)result == 1)
      return result;
    if ((_DWORD)result)
      return 255;
    if (a1[44])
      return 0;
    if (a1[42])
      return 0xFFFFFFFFLL;
    else
      return 1;
  }
  else
  {
    v4 = *(_DWORD *)(a2 + 4);
    if (v4)
    {
      if (v4 != -1)
        return 0;
      result = a1[40];
      if ((_DWORD)result == 2)
        return result;
      if (!(_DWORD)result)
      {
        if (!a1[43])
        {
          if (a1[41])
            return 0xFFFFFFFFLL;
          else
            return 2;
        }
        return 0;
      }
      return 255;
    }
    if (a1[40])
      return 0xFFFFFFFFLL;
    else
      return 0;
  }
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::MatchComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::ComposeFstMatcher(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  *(_QWORD *)a1 = &unk_1E5D1F580;
  *(_QWORD *)(a1 + 8) = a2;
  *(_QWORD *)(a1 + 16) = a3;
  *(_DWORD *)(a1 + 24) = -1;
  *(_DWORD *)(a1 + 28) = a4;
  *(_QWORD *)(a1 + 32) = fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Copy(*(_QWORD **)(a3 + 144), 0);
  *(_QWORD *)(a1 + 40) = fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Copy(*(_QWORD **)(a3 + 152), 0);
  *(_BYTE *)(a1 + 48) = 0;
  *(_OWORD *)(a1 + 52) = xmmword_1AE142840;
  *(_BYTE *)(a1 + 84) = 0;
  if (a4 == 1)
    *(_QWORD *)(a1 + 52) = 0xFFFFFFFF00000000;
  return a1;
}

void fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::MatchComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::~ComposeFstMatcher(_QWORD *a1)
{
  fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::MatchComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::~ComposeFstMatcher(a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::MatchComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Copy(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = operator new();
  fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::MatchComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::ComposeFstMatcher(v4, a1, a2);
  return v4;
}

void sub_1AD8CF6D0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10E1C40868C5753);
  _Unwind_Resume(a1);
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::MatchComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Type(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = (*(uint64_t (**)(_QWORD))(***(_QWORD ***)(a1 + 32) + 24))(**(_QWORD **)(a1 + 32));
  if ((_DWORD)result != 3)
  {
    result = (*(uint64_t (**)(_QWORD, uint64_t))(***(_QWORD ***)(a1 + 40) + 24))(**(_QWORD **)(a1 + 40), a2);
    if ((_DWORD)result != 3)
    {
      if ((*(unsigned int (**)(_QWORD, uint64_t))(***(_QWORD ***)(a1 + 32) + 24))(**(_QWORD **)(a1 + 32), a2) != 4|| (result = (*(uint64_t (**)(_QWORD, uint64_t))(***(_QWORD ***)(a1 + 40) + 24))(**(_QWORD **)(a1 + 40), a2), (_DWORD)result != 4))
      {
        if ((*(unsigned int (**)(_QWORD, uint64_t))(***(_QWORD ***)(a1 + 32) + 24))(**(_QWORD **)(a1 + 32), a2) == 4&& (*(unsigned int (**)(_QWORD, uint64_t))(***(_QWORD ***)(a1 + 40) + 24))(**(_QWORD **)(a1 + 40), a2) == *(_DWORD *)(a1 + 28))
        {
          return 4;
        }
        else if ((*(unsigned int (**)(_QWORD, uint64_t))(***(_QWORD ***)(a1 + 32) + 24))(**(_QWORD **)(a1 + 32), a2) != *(_DWORD *)(a1 + 28)|| (result = (*(uint64_t (**)(_QWORD, uint64_t))(***(_QWORD ***)(a1 + 40) + 24))(**(_QWORD **)(a1 + 40), a2), (_DWORD)result != 4))
        {
          if ((*(unsigned int (**)(_QWORD, uint64_t))(***(_QWORD ***)(a1 + 32) + 24))(**(_QWORD **)(a1 + 32), a2) != *(_DWORD *)(a1 + 28))return 3;
          result = (*(uint64_t (**)(_QWORD, uint64_t))(***(_QWORD ***)(a1 + 40) + 24))(**(_QWORD **)(a1 + 40), a2);
          if ((_DWORD)result != *(_DWORD *)(a1 + 28))
            return 3;
        }
      }
    }
  }
  return result;
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::MatchComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::GetFst(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8);
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::MatchComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Properties(uint64_t a1, uint64_t a2)
{
  if (*(_BYTE *)(a1 + 84))
    return a2 | 4;
  else
    return a2;
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::MatchComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::SetState_(uint64_t result, int a2)
{
  uint64_t v2;
  unsigned int *v3;
  uint64_t v4;

  if (*(_DWORD *)(result + 24) != a2)
  {
    v2 = result;
    *(_DWORD *)(result + 24) = a2;
    v3 = (unsigned int *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(result + 16) + 176) + 80) + 12 * a2);
    v4 = v3[1];
    (*(void (**)(_QWORD, _QWORD))(***(_QWORD ***)(result + 32) + 56))(**(_QWORD **)(result + 32), *v3);
    result = (*(uint64_t (**)(_QWORD, uint64_t))(***(_QWORD ***)(v2 + 40) + 56))(**(_QWORD **)(v2 + 40), v4);
    *(_DWORD *)(v2 + 64) = *(_DWORD *)(v2 + 24);
  }
  return result;
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::MatchComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Find_(uint64_t a1, uint64_t a2)
{
  _QWORD **v2;
  _QWORD **v3;

  *(_BYTE *)(a1 + 48) = (_DWORD)a2 == 0;
  if (*(_DWORD *)(a1 + 28))
  {
    if ((_DWORD)a2)
    {
      v2 = (_QWORD **)(a1 + 40);
      v3 = (_QWORD **)(a1 + 32);
      return fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::MatchComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::FindLabel<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>(a1, a2, *v2, *v3);
    }
  }
  else if ((_DWORD)a2)
  {
    v2 = (_QWORD **)(a1 + 32);
    v3 = (_QWORD **)(a1 + 40);
    return fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::MatchComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::FindLabel<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>(a1, a2, *v2, *v3);
  }
  return 1;
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::MatchComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Done_(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 48)
    || !(*(unsigned int (**)(_QWORD))(***(_QWORD ***)(a1 + 32) + 72))(**(_QWORD **)(a1 + 32)))
  {
    return 0;
  }
  else
  {
    return (*(uint64_t (**)(_QWORD))(***(_QWORD ***)(a1 + 40) + 72))(**(_QWORD **)(a1 + 40));
  }
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::MatchComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Value_(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 48))
    return a1 + 52;
  else
    return a1 + 68;
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::MatchComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Next_(uint64_t result)
{
  _QWORD *v1;
  _QWORD *v2;

  if (*(_BYTE *)(result + 48))
  {
    *(_BYTE *)(result + 48) = 0;
  }
  else
  {
    if (*(_DWORD *)(result + 28))
    {
      v2 = *(_QWORD **)(result + 32);
      v1 = *(_QWORD **)(result + 40);
    }
    else
    {
      v1 = *(_QWORD **)(result + 32);
      v2 = *(_QWORD **)(result + 40);
    }
    return fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::MatchComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::FindNext<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>(result, v1, v2);
  }
  return result;
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::MatchComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Priority_(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8));
}

_QWORD *fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::MatchComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::~ComposeFstMatcher(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  *a1 = &unk_1E5D1F580;
  v2 = (_QWORD *)a1[4];
  if (v2)
  {
    if (*v2)
      (*(void (**)(_QWORD))(*(_QWORD *)*v2 + 8))(*v2);
    MEMORY[0x1AF44D190](v2, 0x20C4093837F09);
  }
  v3 = (_QWORD *)a1[5];
  if (v3)
  {
    if (*v3)
      (*(void (**)(_QWORD))(*(_QWORD *)*v3 + 8))(*v3);
    MEMORY[0x1AF44D190](v3, 0x20C4093837F09);
  }
  return a1;
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::MatchComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::ComposeFstMatcher(uint64_t a1, uint64_t a2, uint64_t a3)
{
  fst *v6;
  _QWORD *v7;
  void *__p[2];
  char v10;
  char v11;

  *(_QWORD *)a1 = &unk_1E5D1F580;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 24) = -1;
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_QWORD *)(a1 + 32) = fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Copy(*(_QWORD **)(a2 + 32), a3);
  *(_QWORD *)(a1 + 40) = fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Copy(*(_QWORD **)(a2 + 40), a3);
  *(_BYTE *)(a1 + 48) = 0;
  *(_OWORD *)(a1 + 52) = xmmword_1AE142840;
  *(_BYTE *)(a1 + 84) = *(_BYTE *)(a2 + 84);
  if ((_DWORD)a3)
  {
    if (FLAGS_fst_error_fatal)
      std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
    else
      std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
    v6 = fst::LogMessage::LogMessage((fst *)&v11, (uint64_t)__p);
    v7 = (_QWORD *)fst::cerr(v6);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"ComposeFstMatcher: safe copy not supported", 42);
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v11);
    if (v10 < 0)
      operator delete(__p[0]);
    *(_BYTE *)(a1 + 84) = 1;
  }
  if (*(_DWORD *)(a1 + 28) == 1)
    *(int32x2_t *)(a1 + 52) = vrev64_s32(*(int32x2_t *)(a1 + 52));
  return a1;
}

void sub_1AD8CFBC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  fst::LogMessage::~LogMessage((fst::LogMessage *)&a18);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::MatchComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::FindLabel<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>(uint64_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4)
{
  uint64_t result;
  int v8;
  uint64_t v9;
  unsigned int *v10;

  result = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a3 + 64))(*a3);
  if ((_DWORD)result)
  {
    v8 = *(_DWORD *)(a1 + 28);
    v9 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a3 + 80))(*a3);
    v10 = (unsigned int *)(v9 + 4);
    if (v8)
      v10 = (unsigned int *)v9;
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)*a4 + 64))(*a4, *v10);
    return fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::MatchComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::FindNext<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>(a1, a3, a4);
  }
  return result;
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::MatchComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::FindNext<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  int v6;
  uint64_t v7;
  unsigned int *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  BOOL v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;

  while (!(*(unsigned int (**)(_QWORD))(*(_QWORD *)*a2 + 72))(*a2)
       || ((*(uint64_t (**)(_QWORD))(*(_QWORD *)*a3 + 72))(*a3) & 1) == 0)
  {
    if ((*(unsigned int (**)(_QWORD))(*(_QWORD *)*a3 + 72))(*a3))
    {
      (*(void (**)(_QWORD))(*(_QWORD *)*a2 + 88))(*a2);
      if (((*(uint64_t (**)(_QWORD))(*(_QWORD *)*a2 + 72))(*a2) & 1) == 0)
      {
        do
        {
          v6 = *(_DWORD *)(a1 + 28);
          v7 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a2 + 80))(*a2);
          v8 = (unsigned int *)(v7 + 4);
          if (v6)
            v8 = (unsigned int *)v7;
          if (((*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)*a3 + 64))(*a3, *v8) & 1) != 0)
            break;
          (*(void (**)(_QWORD))(*(_QWORD *)*a2 + 88))(*a2);
        }
        while (!(*(unsigned int (**)(_QWORD))(*(_QWORD *)*a2 + 72))(*a2));
      }
    }
    while (((*(uint64_t (**)(_QWORD))(*(_QWORD *)*a3 + 72))(*a3) & 1) == 0)
    {
      v9 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a2 + 80))(*a2);
      v10 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a3 + 80))(*a3);
      (*(void (**)(_QWORD))(*(_QWORD *)*a3 + 88))(*a3);
      v11 = *(_DWORD *)(a1 + 28);
      v12 = v11 == 0;
      if (v11)
        v13 = (uint64_t *)v10;
      else
        v13 = (uint64_t *)v9;
      v14 = *v13;
      v15 = v13[1];
      if (v12)
        v16 = (uint64_t *)v10;
      else
        v16 = (uint64_t *)v9;
      if (fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::MatchComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::MatchArc(a1, *(unsigned int *)(a1 + 24), v14, v15, *v16, v16[1]))
      {
        return 1;
      }
    }
  }
  return 0;
}

BOOL fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::MatchComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::MatchArc(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  char v7;
  char v8;
  int v9;
  float v10;
  unint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v17 = a3;
  v18 = a4;
  v15 = a5;
  v16 = a6;
  v7 = fst::MatchComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::FilterArc(*(unsigned __int8 **)(*(_QWORD *)(a1 + 16) + 136), (uint64_t)&v17, &v15);
  v8 = v7;
  if (v7 != -1)
  {
    v9 = HIDWORD(v15);
    v13 = __PAIR64__(HIDWORD(v16), HIDWORD(v18));
    v14 = v7;
    *(_DWORD *)(a1 + 68) = v17;
    *(_DWORD *)(a1 + 72) = v9;
    v10 = NAN;
    if (*(float *)&v18 != -INFINITY)
    {
      v10 = NAN;
      if (*(float *)&v16 != -INFINITY)
      {
        v10 = INFINITY;
        if (*(float *)&v16 != INFINITY && *(float *)&v18 != INFINITY)
          v10 = *(float *)&v18 + *(float *)&v16;
      }
    }
    *(float *)(a1 + 76) = v10;
    *(_DWORD *)(a1 + 80) = fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,(fst::HSType)1>::FindId(*(_QWORD **)(*(_QWORD *)(a1 + 16) + 176), (uint64_t *)&v13, 1);
  }
  return ~v8 != 0;
}

std::string *std::vector<quasar::Token>::__append(uint64_t *a1, unint64_t a2, quasar::Token *a3)
{
  std::string *result;
  uint64_t v7;
  uint64_t v8;
  std::string *v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  char *v14;
  std::string *v15;
  uint64_t v16;
  std::string *v17;
  uint64_t v18;
  std::string *v19;
  _QWORD v20[2];
  std::string *v21;
  char *v22;
  std::string *v23;

  v8 = a1[2];
  result = (std::string *)(a1 + 2);
  v7 = v8;
  v9 = (std::string *)result[-1].__r_.__value_.__r.__words[2];
  if (0x6DB6DB6DB6DB6DB7 * ((v8 - (uint64_t)v9) >> 5) >= a2)
  {
    if (a2)
    {
      v15 = (std::string *)((char *)v9 + 224 * a2);
      v16 = 224 * a2;
      do
      {
        result = quasar::Token::Token(v9, a3);
        v9 = (std::string *)((char *)v9 + 224);
        v16 -= 224;
      }
      while (v16);
      v9 = v15;
    }
    a1[1] = (uint64_t)v9;
  }
  else
  {
    v10 = 0x6DB6DB6DB6DB6DB7 * (((uint64_t)v9 - *a1) >> 5);
    v11 = v10 + a2;
    if (v10 + a2 > 0x124924924924924)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v12 = 0x6DB6DB6DB6DB6DB7 * ((v7 - *a1) >> 5);
    if (2 * v12 > v11)
      v11 = 2 * v12;
    if (v12 >= 0x92492492492492)
      v13 = 0x124924924924924;
    else
      v13 = v11;
    v23 = result;
    if (v13)
      v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::Token>>((uint64_t)result, v13);
    else
      v14 = 0;
    v17 = (std::string *)&v14[224 * v10];
    v20[0] = v14;
    v20[1] = v17;
    v21 = v17;
    v22 = &v14[224 * v13];
    v18 = 224 * a2;
    v19 = (std::string *)((char *)v17 + 224 * a2);
    do
    {
      quasar::Token::Token(v17, a3);
      v17 = (std::string *)((char *)v17 + 224);
      v18 -= 224;
    }
    while (v18);
    v21 = v19;
    std::vector<quasar::Token>::__swap_out_circular_buffer(a1, v20);
    return (std::string *)std::__split_buffer<quasar::Token>::~__split_buffer((uint64_t)v20);
  }
  return result;
}

void sub_1AD8D006C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<quasar::Token>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::shared_ptr<quasar::CommandTransform>>::__append(char **a1, unint64_t a2, _QWORD *a3)
{
  uint64_t result;
  char *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  char *v20;
  char *v21;
  char *v22;
  uint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  char *v26;
  char *v27;
  __int128 v28;
  int64x2_t v29;
  char *v30;
  uint64_t v31;
  int64x2_t v32;
  char *v33;
  uint64_t v34;

  v8 = a1[2];
  result = (uint64_t)(a1 + 2);
  v7 = v8;
  v9 = *(char **)(result - 8);
  if (a2 <= (v8 - v9) >> 4)
  {
    if (a2)
    {
      v16 = &v9[16 * a2];
      do
      {
        *(_QWORD *)v9 = *a3;
        v17 = a3[1];
        *((_QWORD *)v9 + 1) = v17;
        if (v17)
        {
          v18 = (unint64_t *)(v17 + 8);
          do
            v19 = __ldxr(v18);
          while (__stxr(v19 + 1, v18));
        }
        v9 += 16;
      }
      while (v9 != v16);
      v9 = v16;
    }
    a1[1] = v9;
  }
  else
  {
    v10 = v9 - *a1;
    v11 = a2 + (v10 >> 4);
    if (v11 >> 60)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v12 = v10 >> 4;
    v13 = v7 - *a1;
    if (v13 >> 3 > v11)
      v11 = v13 >> 3;
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF0)
      v14 = 0xFFFFFFFFFFFFFFFLL;
    else
      v14 = v11;
    v34 = result;
    if (v14)
      v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<int,unsigned long>>>(result, v14);
    else
      v15 = 0;
    v20 = &v15[16 * v12];
    v33 = &v15[16 * v14];
    v21 = &v20[16 * a2];
    v22 = v20;
    do
    {
      *(_QWORD *)v22 = *a3;
      v23 = a3[1];
      *((_QWORD *)v22 + 1) = v23;
      if (v23)
      {
        v24 = (unint64_t *)(v23 + 8);
        do
          v25 = __ldxr(v24);
        while (__stxr(v25 + 1, v24));
      }
      v22 += 16;
    }
    while (v22 != v21);
    v32.i64[1] = (uint64_t)&v20[16 * a2];
    v27 = *a1;
    v26 = a1[1];
    if (v26 == *a1)
    {
      v29 = vdupq_n_s64((unint64_t)v26);
    }
    else
    {
      do
      {
        v28 = *((_OWORD *)v26 - 1);
        v26 -= 16;
        *((_OWORD *)v20 - 1) = v28;
        v20 -= 16;
        *(_QWORD *)v26 = 0;
        *((_QWORD *)v26 + 1) = 0;
      }
      while (v26 != v27);
      v29 = *(int64x2_t *)a1;
      v21 = (char *)v32.i64[1];
    }
    *a1 = v20;
    a1[1] = v21;
    v32 = v29;
    v30 = a1[2];
    a1[2] = v33;
    v33 = v30;
    v31 = v29.i64[0];
    return std::__split_buffer<std::shared_ptr<quasar::FeatureExtractor>>::~__split_buffer((uint64_t)&v31);
  }
  return result;
}

_QWORD *std::vector<quasar::Token>::vector(_QWORD *a1, unint64_t a2)
{
  quasar::Token *v4;
  uint64_t v5;
  char *v6;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<quasar::Token>::__vallocate[abi:ne180100](a1, a2);
    v4 = (quasar::Token *)a1[1];
    v5 = 224 * a2;
    v6 = (char *)v4 + 224 * a2;
    do
    {
      quasar::Token::Token(v4);
      v4 = (quasar::Token *)((char *)v4 + 224);
      v5 -= 224;
    }
    while (v5);
    a1[1] = v6;
  }
  return a1;
}

void sub_1AD8D0294(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

std::basic_string<char32_t> *__cdecl std::basic_string<char32_t>::basic_string(std::basic_string<char32_t> *this, const std::basic_string<char32_t> *__str, std::basic_string<char32_t>::size_type __pos, std::basic_string<char32_t>::size_type __n, std::allocator<char32_t> *__a)
{
  const std::basic_string<char32_t> *v6;
  std::basic_string<char32_t>::size_type size;
  std::basic_string<char32_t>::size_type v9;
  std::basic_string<char32_t>::size_type v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;

  v6 = __str;
  if (SHIBYTE(__str->__r_.__value_.__r.__words[2]) < 0)
  {
    size = __str->__r_.__value_.__l.__size_;
    if (size < __pos)
      goto LABEL_18;
    v6 = (const std::basic_string<char32_t> *)__str->__r_.__value_.__r.__words[0];
  }
  else
  {
    size = HIBYTE(__str->__r_.__value_.__r.__words[2]);
    if (size < __pos)
LABEL_18:
      std::string::__throw_out_of_range[abi:ne180100]();
  }
  v9 = size - __pos;
  if (v9 >= __n)
    v10 = __n;
  else
    v10 = v9;
  if (v10 >= 0x3FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (v10 >= 5)
  {
    v12 = (v10 & 0xFFFFFFFFFFFFFFFELL) + 2;
    if ((v10 | 1) != 5)
      v12 = v10 | 1;
    v11 = std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)this, v12 + 1);
    this->__r_.__value_.__l.__size_ = v10;
    this->__r_.__value_.__r.__words[2] = v13 | 0x8000000000000000;
    this->__r_.__value_.__r.__words[0] = (std::basic_string<char32_t>::size_type)v11;
  }
  else
  {
    *((_BYTE *)&this->__r_.__value_.__s + 23) = v10;
    v11 = this;
    if (!v10)
      goto LABEL_17;
  }
  memmove(v11, (char *)v6 + 4 * __pos, 4 * v10);
LABEL_17:
  *((_DWORD *)v11 + v10) = 0;
  return this;
}

uint64_t std::vector<quasar::Token>::__emplace_back_slow_path<std::string,int,int,int,int,BOOL,BOOL &>(uint64_t *a1, uint64_t a2, int *a3, int *a4, int *a5, int *a6, unsigned __int8 *a7, unsigned __int8 *a8)
{
  uint64_t v9;
  unint64_t v10;
  unint64_t v18;
  char *v19;
  uint64_t v20;
  char *v22;
  std::string *v23;
  std::string::value_type *v24;
  char *v25;
  uint64_t *v26;

  v9 = 0x6DB6DB6DB6DB6DB7 * ((a1[1] - *a1) >> 5);
  v10 = v9 + 1;
  if ((unint64_t)(v9 + 1) > 0x124924924924924)
    std::vector<int>::__throw_length_error[abi:ne180100]();
  if (0xDB6DB6DB6DB6DB6ELL * ((a1[2] - *a1) >> 5) > v10)
    v10 = 0xDB6DB6DB6DB6DB6ELL * ((a1[2] - *a1) >> 5);
  if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * ((a1[2] - *a1) >> 5)) >= 0x92492492492492)
    v18 = 0x124924924924924;
  else
    v18 = v10;
  v26 = a1 + 2;
  if (v18)
    v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::Token>>((uint64_t)(a1 + 2), v18);
  else
    v19 = 0;
  v22 = v19;
  v23 = (std::string *)&v19[224 * v9];
  v25 = &v19[224 * v18];
  std::allocator<quasar::Token>::construct[abi:ne180100]<quasar::Token,std::string,int,int,int,int,BOOL,BOOL &>((uint64_t)(a1 + 2), v23, a2, a3, a4, a5, a6, a7, a8);
  v24 = &v23[9].__r_.__value_.__s.__data_[8];
  std::vector<quasar::Token>::__swap_out_circular_buffer(a1, &v22);
  v20 = a1[1];
  std::__split_buffer<quasar::Token>::~__split_buffer((uint64_t)&v22);
  return v20;
}

void sub_1AD8D04F0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<quasar::Token>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::allocator<quasar::Token>::construct[abi:ne180100]<quasar::Token,std::string,int,int,int,int,BOOL,BOOL &>(uint64_t a1, std::string *a2, uint64_t a3, int *a4, int *a5, int *a6, int *a7, unsigned __int8 *a8, unsigned __int8 *a9)
{
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  void *__p[2];
  char v17;
  __int128 *v18[3];
  void *v19[2];
  char v20;
  void *v21[2];
  char v22;
  __int128 v23;
  uint64_t v24;

  v23 = *(_OWORD *)a3;
  v24 = *(_QWORD *)(a3 + 16);
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)a3 = 0;
  v10 = *a4;
  v11 = *a5;
  v12 = *a6;
  v13 = *a7;
  v14 = *a8;
  v15 = *a9;
  std::string::basic_string[abi:ne180100]<0>(v21, "");
  std::string::basic_string[abi:ne180100]<0>(v19, "");
  memset(v18, 0, sizeof(v18));
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  quasar::Token::Token(a2, &v23, v10, v11, v12, v14 != 0, v15 != 0, (__int128 *)v21, (float)v13, (__int128 *)v19, v18, 0, (__int128 *)__p, 0, 0);
  if (v17 < 0)
    operator delete(__p[0]);
  __p[0] = v18;
  std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  if (v20 < 0)
    operator delete(v19[0]);
  if (v22 < 0)
    operator delete(v21[0]);
  if (SHIBYTE(v24) < 0)
    operator delete((void *)v23);
}

void sub_1AD8D0650(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  uint64_t v35;

  if (a20 < 0)
    operator delete(__p);
  __p = &a21;
  std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  if (a29 < 0)
    operator delete(a24);
  if (a35 < 0)
    operator delete(a30);
  if (*(char *)(v35 - 89) < 0)
    operator delete(*(void **)(v35 - 112));
  _Unwind_Resume(a1);
}

uint64_t std::vector<quasar::Token>::__emplace_back_slow_path<quasar::Token&>(uint64_t *a1, const quasar::Token *a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  char *v13;
  std::string *v14;
  std::string::value_type *v15;
  char *v16;
  uint64_t *v17;

  v3 = *a1;
  v4 = 0x6DB6DB6DB6DB6DB7 * ((a1[1] - *a1) >> 5);
  v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) > 0x124924924924924)
    std::vector<int>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0x6DB6DB6DB6DB6DB7 * ((a1[2] - v3) >> 5);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x92492492492492)
    v9 = 0x124924924924924;
  else
    v9 = v5;
  v17 = a1 + 2;
  if (v9)
    v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::Token>>(v7, v9);
  else
    v10 = 0;
  v13 = v10;
  v14 = (std::string *)&v10[224 * v4];
  v16 = &v10[224 * v9];
  quasar::Token::Token(v14, a2);
  v15 = &v14[9].__r_.__value_.__s.__data_[8];
  std::vector<quasar::Token>::__swap_out_circular_buffer(a1, &v13);
  v11 = a1[1];
  std::__split_buffer<quasar::Token>::~__split_buffer((uint64_t)&v13);
  return v11;
}

void sub_1AD8D07CC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<quasar::Token>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<quasar::Token>::__emplace_back_slow_path<std::string,int,int,int,int,BOOL &,BOOL>(uint64_t *a1, uint64_t a2, int *a3, int *a4, int *a5, int *a6, unsigned __int8 *a7, unsigned __int8 *a8)
{
  uint64_t v9;
  unint64_t v10;
  unint64_t v18;
  char *v19;
  uint64_t v20;
  char *v22;
  std::string *v23;
  std::string::value_type *v24;
  char *v25;
  uint64_t *v26;

  v9 = 0x6DB6DB6DB6DB6DB7 * ((a1[1] - *a1) >> 5);
  v10 = v9 + 1;
  if ((unint64_t)(v9 + 1) > 0x124924924924924)
    std::vector<int>::__throw_length_error[abi:ne180100]();
  if (0xDB6DB6DB6DB6DB6ELL * ((a1[2] - *a1) >> 5) > v10)
    v10 = 0xDB6DB6DB6DB6DB6ELL * ((a1[2] - *a1) >> 5);
  if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * ((a1[2] - *a1) >> 5)) >= 0x92492492492492)
    v18 = 0x124924924924924;
  else
    v18 = v10;
  v26 = a1 + 2;
  if (v18)
    v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::Token>>((uint64_t)(a1 + 2), v18);
  else
    v19 = 0;
  v22 = v19;
  v23 = (std::string *)&v19[224 * v9];
  v25 = &v19[224 * v18];
  std::allocator<quasar::Token>::construct[abi:ne180100]<quasar::Token,std::string,int,int,int,int,BOOL &,BOOL>((uint64_t)(a1 + 2), v23, a2, a3, a4, a5, a6, a7, a8);
  v24 = &v23[9].__r_.__value_.__s.__data_[8];
  std::vector<quasar::Token>::__swap_out_circular_buffer(a1, &v22);
  v20 = a1[1];
  std::__split_buffer<quasar::Token>::~__split_buffer((uint64_t)&v22);
  return v20;
}

void sub_1AD8D0938(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<quasar::Token>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::allocator<quasar::Token>::construct[abi:ne180100]<quasar::Token,std::string,int,int,int,int,BOOL &,BOOL>(uint64_t a1, std::string *a2, uint64_t a3, int *a4, int *a5, int *a6, int *a7, unsigned __int8 *a8, unsigned __int8 *a9)
{
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  void *__p[2];
  char v17;
  __int128 *v18[3];
  void *v19[2];
  char v20;
  void *v21[2];
  char v22;
  __int128 v23;
  uint64_t v24;

  v23 = *(_OWORD *)a3;
  v24 = *(_QWORD *)(a3 + 16);
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)a3 = 0;
  v10 = *a4;
  v11 = *a5;
  v12 = *a6;
  v13 = *a7;
  v14 = *a8;
  v15 = *a9;
  std::string::basic_string[abi:ne180100]<0>(v21, "");
  std::string::basic_string[abi:ne180100]<0>(v19, "");
  memset(v18, 0, sizeof(v18));
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  quasar::Token::Token(a2, &v23, v10, v11, v12, v14 != 0, v15 != 0, (__int128 *)v21, (float)v13, (__int128 *)v19, v18, 0, (__int128 *)__p, 0, 0);
  if (v17 < 0)
    operator delete(__p[0]);
  __p[0] = v18;
  std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  if (v20 < 0)
    operator delete(v19[0]);
  if (v22 < 0)
    operator delete(v21[0]);
  if (SHIBYTE(v24) < 0)
    operator delete((void *)v23);
}

void sub_1AD8D0A98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  uint64_t v35;

  if (a20 < 0)
    operator delete(__p);
  __p = &a21;
  std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  if (a29 < 0)
    operator delete(a24);
  if (a35 < 0)
    operator delete(a30);
  if (*(char *)(v35 - 89) < 0)
    operator delete(*(void **)(v35 - 112));
  _Unwind_Resume(a1);
}

void std::basic_string<char32_t>::__erase_external_with_move(std::basic_string<char32_t> *this, std::basic_string<char32_t>::size_type __pos, std::basic_string<char32_t>::size_type __n)
{
  int v4;
  std::basic_string<char32_t>::size_type size;
  std::basic_string<char32_t> *v6;
  std::basic_string<char32_t>::size_type v7;
  std::basic_string<char32_t>::size_type v8;

  if (__n)
  {
    v4 = SHIBYTE(this->__r_.__value_.__r.__words[2]);
    if (v4 < 0)
    {
      v6 = (std::basic_string<char32_t> *)this->__r_.__value_.__r.__words[0];
      size = this->__r_.__value_.__l.__size_;
    }
    else
    {
      size = HIBYTE(this->__r_.__value_.__r.__words[2]);
      v6 = this;
    }
    if (size - __pos >= __n)
      v7 = __n;
    else
      v7 = size - __pos;
    if (size - __pos > __n)
    {
      memmove((char *)v6 + 4 * __pos, (char *)v6 + 4 * __pos + 4 * v7, 4 * (size - __pos - v7));
      LOBYTE(v4) = *((_BYTE *)&this->__r_.__value_.__s + 23);
    }
    v8 = size - v7;
    if ((v4 & 0x80) != 0)
      this->__r_.__value_.__l.__size_ = v8;
    else
      *((_BYTE *)&this->__r_.__value_.__s + 23) = v8 & 0x7F;
    v6->__r_.__value_.__s.__data_[v8] = 0;
  }
}

void std::__shared_ptr_emplace<std::vector<quasar::PreTokenToPostTokenItnMap>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D45698;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<std::vector<quasar::PreTokenToPostTokenItnMap>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D45698;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF44D190);
}

void std::__shared_ptr_emplace<std::vector<quasar::PreTokenToPostTokenItnMap>>::__on_zero_shared(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 24);
  if (v2)
  {
    *(_QWORD *)(a1 + 32) = v2;
    operator delete(v2);
  }
}

uint64_t std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::__wrap_iter<quasar::Token const*>,std::__wrap_iter<quasar::Token const*>,std::__wrap_iter<quasar::Token*>,0>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  v3 = a3;
  v4 = a1;
  if (a1 != a2)
  {
    v6 = a3;
    do
    {
      quasar::Token::operator=(v6, v4);
      v4 += 224;
      v6 += 224;
      v3 += 224;
    }
    while (v4 != a2);
    return a2;
  }
  return v4;
}

void std::vector<quasar::PreTokenToPostTokenItnMap>::__append(void **a1, unint64_t a2)
{
  uint64_t v4;
  _BYTE *v5;
  _BYTE *v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(char **)(v4 - 8);
  if (a2 <= (v6 - v7) >> 4)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 16 * a2);
      v7 += 16 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = v7 - (_BYTE *)*a1;
    v9 = a2 + (v8 >> 4);
    if (v9 >> 60)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v10 = v8 >> 4;
    v11 = v5 - (_BYTE *)*a1;
    if (v11 >> 3 > v9)
      v9 = v11 >> 3;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF0)
      v12 = 0xFFFFFFFFFFFFFFFLL;
    else
      v12 = v9;
    if (v12)
      v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<int,unsigned long>>>(v4, v12);
    else
      v13 = 0;
    v14 = &v13[16 * v10];
    v15 = &v13[16 * v12];
    bzero(v14, 16 * a2);
    v16 = &v14[16 * a2];
    v18 = (char *)*a1;
    v17 = (char *)a1[1];
    if (v17 != *a1)
    {
      do
      {
        *((_OWORD *)v14 - 1) = *((_OWORD *)v17 - 1);
        v14 -= 16;
        v17 -= 16;
      }
      while (v17 != v18);
      v17 = (char *)*a1;
    }
    *a1 = v14;
    a1[1] = v16;
    a1[2] = v15;
    if (v17)
      operator delete(v17);
  }
}

void kaldi::CuSubMatrix<double>::~CuSubMatrix(uint64_t a1)
{
  *(_QWORD *)a1 = &unk_1E5D29D10;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)a1);
}

{
  *(_QWORD *)a1 = &unk_1E5D29D10;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)a1);
  JUMPOUT(0x1AF44D190);
}

void kaldi::CuSubMatrix<double>::Read()
{
  _QWORD v0[34];

  kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v0);
  std::operator<<[abi:ne180100]<std::char_traits<char>>(v0, "Function not implemented for this class");
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v0);
}

void quasar::WlatArcFeatureExtractor::runArcFeatureExtraction(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD v13[34];

  v6 = *(uint64_t **)(a1 + 40);
  v7 = *(uint64_t **)(a1 + 48);
  while (v6 != v7)
  {
    v8 = *v6++;
    kaldi::CuVector<float>::Resize(v8 + 296, a2, 1);
  }
  v9 = *(_QWORD **)a3;
  v10 = *(_QWORD **)(a3 + 8);
  if (*(_QWORD **)a3 == v10)
  {
    LODWORD(v11) = 0;
  }
  else
  {
    v11 = 0;
    do
    {
      (*(void (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*v9 + 24))(*v9, a1, v11);
      v12 = *v9;
      v9 += 2;
      v11 = (*(unsigned int (**)(uint64_t))(*(_QWORD *)v12 + 16))(v12) + v11;
    }
    while (v9 != v10);
  }
  if ((_DWORD)v11 != (_DWORD)a2)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v13);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v13, "column == arcFeatDims");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v13);
  }
}

float quasar::WlatArcFeAcousticCost::Run(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t *v3;
  uint64_t *i;
  uint64_t v5;
  float result;

  v3 = *(uint64_t **)(a2 + 40);
  for (i = *(uint64_t **)(a2 + 48); v3 != i; *(float *)(*(_QWORD *)(v5 + 304) + 4 * a3) = result)
  {
    v5 = *v3++;
    result = *(double *)(v5 + 16);
  }
  return result;
}

uint64_t quasar::WlatArcFeKeyword::Run(uint64_t result, uint64_t a2, int a3)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  float v8;

  v3 = *(uint64_t **)(a2 + 40);
  v4 = *(uint64_t **)(a2 + 48);
  if (v3 != v4)
  {
    v5 = *(int *)(result + 8);
    do
    {
      v7 = *v3++;
      v6 = v7;
      if (*(_QWORD *)(v7 + 256) == v5)
        v8 = 1.0;
      else
        v8 = 0.0;
      *(float *)(*(_QWORD *)(v6 + 304) + 4 * a3) = v8;
    }
    while (v3 != v4);
  }
  return result;
}

float quasar::WlatArcFeGraphCost::Run(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t *v3;
  uint64_t *i;
  uint64_t v5;
  float result;

  v3 = *(uint64_t **)(a2 + 40);
  for (i = *(uint64_t **)(a2 + 48); v3 != i; *(float *)(*(_QWORD *)(v5 + 304) + 4 * a3) = result)
  {
    v5 = *v3++;
    result = *(double *)(v5 + 40);
  }
  return result;
}

float quasar::WlatArcFeNumFrames::Run(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t *v3;
  uint64_t *i;
  uint64_t v5;
  float result;

  v3 = *(uint64_t **)(a2 + 40);
  for (i = *(uint64_t **)(a2 + 48); v3 != i; *(float *)(*(_QWORD *)(v5 + 304) + 4 * a3) = result)
  {
    v5 = *v3++;
    result = *(float *)(v5 + 72);
  }
  return result;
}

float quasar::WlatArcFeLogPosterior::Run(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t *v3;
  uint64_t *i;
  uint64_t v5;
  float result;

  v3 = *(uint64_t **)(a2 + 40);
  for (i = *(uint64_t **)(a2 + 48); v3 != i; *(float *)(*(_QWORD *)(v5 + 304) + 4 * a3) = result)
  {
    v5 = *v3++;
    result = *(double *)(v5 + 56);
  }
  return result;
}

float quasar::WlatArcFeLinPosterior::Run(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  float result;

  v3 = *(uint64_t **)(a2 + 40);
  v4 = *(uint64_t **)(a2 + 48);
  if (v3 != v4)
  {
    v5 = a3;
    do
    {
      v6 = *v3++;
      result = exp(*(long double *)(v6 + 56));
      *(float *)(*(_QWORD *)(v6 + 304) + 4 * v5) = result;
    }
    while (v3 != v4);
  }
  return result;
}

uint64_t quasar::WlatArcFeBagOfPhones::Run(quasar::WlatArcFeBagOfPhones *this, const kaldi::WordHypLattice *a2, int a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t **v9;
  uint64_t v10;
  _DWORD *v11;
  _DWORD *v12;
  uint64_t *v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  kaldi::nnet1::Nnet *v21;
  void *v22;
  __int128 v23;
  __int128 v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD v29[4];
  int32x2_t v30[3];
  int v31;
  int v32;
  uint64_t v33;
  int32x2_t v34[3];
  int v35;

  v5 = (*((_QWORD *)a2 + 6) - *((_QWORD *)a2 + 5)) >> 3;
  v21 = (quasar::WlatArcFeBagOfPhones *)((char *)this + 8);
  v6 = kaldi::nnet1::Nnet::InputDim((quasar::WlatArcFeBagOfPhones *)((char *)this + 8));
  kaldi::CuMatrix<float>::CuMatrix(v34, v5, v6, 0, 0, 0);
  v7 = v5;
  if ((int)v5 >= 1)
  {
    v8 = 0;
    v9 = (uint64_t **)((char *)this + 384);
    do
    {
      v10 = *(_QWORD *)(*((_QWORD *)a2 + 5) + 8 * v8);
      v11 = *(_DWORD **)(v10 + 104);
      v12 = *(_DWORD **)(v10 + 112);
      while (v11 != v12)
      {
        LODWORD(v22) = 0;
        LODWORD(v22) = *v11;
        v30[0] = (int32x2_t)&v22;
        v13 = std::__tree<std::__value_type<int,float>,std::__map_value_compare<int,std::__value_type<int,float>,std::less<int>,true>,std::allocator<std::__value_type<int,float>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(v9, (int *)&v22, (uint64_t)&std::piecewise_construct, (unsigned int **)v30);
        *(_DWORD *)(*(_QWORD *)&v34[1] + 4 * v35 * (int)v8 + 4 * *((int *)v13 + 8)) = 1065353216;
        ++v11;
      }
      ++v8;
    }
    while (v8 != v5);
  }
  v14 = kaldi::nnet1::Nnet::OutputDim(v21);
  v15 = v14;
  kaldi::CuMatrix<float>::CuMatrix(v30, v5, v14, 1, 0, 0);
  kaldi::nnet1::Nnet::Feedforward((uint64_t *)v21, (uint64_t)v34, v30, -1, 0);
  if ((int)v5 >= 1)
  {
    v16 = 0;
    do
    {
      v17 = *(_QWORD *)(*((_QWORD *)a2 + 5) + 8 * v16);
      v18 = *(_QWORD *)(v17 + 304) + 4 * a3;
      v29[0] = &unk_1E5D29D70;
      v29[1] = v18;
      v29[3] = *(_QWORD *)(v17 + 320);
      v29[2] = v15 + a3;
      *((_QWORD *)&v23 + 1) = v15 | 0x100000000;
      LODWORD(v24) = v31;
      DWORD1(v24) = v32 - v31 * v16;
      *((_QWORD *)&v24 + 1) = v33;
      v25 = &unk_1E5D29D70;
      v22 = &unk_1E5D29D40;
      *(_QWORD *)&v23 = *(_QWORD *)&v30[1] + 4 * v31 * (int)v16;
      v28 = 0;
      v26 = v23;
      v27 = v15;
      kaldi::CuVectorBase<float>::CopyFromVec(v29, (uint64_t)&v25);
      ++v16;
      v25 = &unk_1E5D29D70;
      v26 = 0;
      LODWORD(v27) = 0;
      v28 = 0;
      v22 = &unk_1E5D29D40;
      v23 = 0u;
      v24 = 0u;
      quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v22);
    }
    while (v7 != v16);
  }
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)v30);
  return kaldi::CuMatrix<float>::~CuMatrix((uint64_t)v34);
}

void sub_1AD8D1270(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  uint64_t v16;
  va_list va;

  va_start(va, a16);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)va);
  kaldi::CuMatrix<float>::~CuMatrix(v16 - 136);
  _Unwind_Resume(a1);
}

_QWORD *quasar::WlatArcFeBagOfPhones::WlatArcFeBagOfPhones(_QWORD *a1, uint64_t a2, uint64_t a3, int a4)
{
  kaldi::nnet1::Nnet *v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;

  *a1 = &off_1E5D37F28;
  v8 = kaldi::nnet1::Nnet::Nnet((kaldi::nnet1::Nnet *)(a1 + 1));
  a1[49] = 0;
  a1[50] = 0;
  v9 = a1 + 49;
  a1[48] = a1 + 49;
  kaldi::nnet1::Nnet::Read((uint64_t)v8, a2, a4);
  quasar::WlatArcFeBagOfPhones::ReadPd2PiFile(a3, (uint64_t)&v13);
  std::__tree<int>::destroy((uint64_t)(a1 + 48), (_QWORD *)a1[49]);
  v10 = v14;
  a1[48] = v13;
  a1[49] = v10;
  v11 = v15;
  a1[50] = v15;
  if (v11)
  {
    v10[2] = v9;
    v13 = &v14;
    v14 = 0;
    v15 = 0;
    v10 = 0;
  }
  else
  {
    a1[48] = v9;
  }
  std::__tree<int>::destroy((uint64_t)&v13, v10);
  return a1;
}

void sub_1AD8D13B0(_Unwind_Exception *a1)
{
  uint64_t v1;
  kaldi::nnet1::Nnet *v2;
  _QWORD **v3;

  std::__tree<int>::destroy(v1, *v3);
  kaldi::nnet1::Nnet::~Nnet(v2);
  _Unwind_Resume(a1);
}

void quasar::WlatArcFeBagOfPhones::ReadPd2PiFile(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v4;
  std::locale::id *v5;
  const std::locale::facet *v6;
  unsigned __int8 v7;
  _QWORD *v8;
  _QWORD *v9;
  std::string *p_p;
  std::string::size_type size;
  _QWORD *v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  const std::string *v16;
  const std::string *v17;
  uint64_t v18;
  std::string __p;
  std::locale v20;
  uint64_t v21;

  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)a2 = a2 + 8;
  v21 = 0;
  if ((kaldi::Input::OpenInternal(&v21, a1, 0, 0) & 1) == 0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v20);
    v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v20, (uint64_t)"Cannot phone pd2pi file ", 24);
    v13 = *(char *)(a1 + 23);
    if (v13 >= 0)
      v14 = a1;
    else
      v14 = *(_QWORD *)a1;
    if (v13 >= 0)
      v15 = *(unsigned __int8 *)(a1 + 23);
    else
      v15 = *(_QWORD *)(a1 + 8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, v14, v15);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v20);
  }
  v4 = (_QWORD *)kaldi::Input::Stream((kaldi::Input *)&v21);
  memset(&__p, 0, sizeof(__p));
  v5 = (std::locale::id *)MEMORY[0x1E0DE4A90];
  while (1)
  {
    std::ios_base::getloc((const std::ios_base *)((char *)v4 + *(_QWORD *)(*v4 - 24)));
    v6 = std::locale::use_facet(&v20, v5);
    v7 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v6->__vftable[2].~facet_0)(v6, 10);
    std::locale::~locale(&v20);
    v8 = std::getline[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v4, (uint64_t)&__p, v7);
    if ((*((_BYTE *)v8 + *(_QWORD *)(*v8 - 24) + 32) & 5) != 0)
      break;
    v16 = 0;
    v17 = 0;
    v18 = 0;
    kaldi::SplitStringToVector(&__p, " ", 1, (uint64_t)&v16);
    if (v16 != v17)
    {
      if ((char *)v17 - (char *)v16 != 48)
      {
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v20);
        v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v20, (uint64_t)"Malformed phone pd2pi file line=", 32);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          p_p = &__p;
        else
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        else
          size = __p.__r_.__value_.__l.__size_;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)p_p, size);
        kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v20);
      }
      LODWORD(v20.__locale_) = std::stoi(v16, 0, 10);
      HIDWORD(v20.__locale_) = std::stoi(v16 + 1, 0, 10);
      std::__tree<std::__value_type<int,int>,std::__map_value_compare<int,std::__value_type<int,int>,std::less<int>,true>,std::allocator<std::__value_type<int,int>>>::__emplace_unique_key_args<int,std::pair<int,int>>((uint64_t **)a2, (int *)&v20, (uint64_t *)&v20);
    }
    v20.__locale_ = (std::locale::__imp *)&v16;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v20);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  kaldi::Input::~Input((kaldi::Input *)&v21);
}

void sub_1AD8D1618(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, std::locale a19)
{
  uint64_t v19;
  uint64_t v20;

  a19.__locale_ = (std::locale::__imp *)&a10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a19);
  if (a18 < 0)
    operator delete(__p);
  kaldi::Input::~Input((kaldi::Input *)(v20 - 72));
  std::__tree<int>::destroy(v19, *(_QWORD **)(v19 + 8));
  _Unwind_Resume(a1);
}

_QWORD *quasar::WlatArcFeWordEmbedding::WlatArcFeWordEmbedding(_QWORD *result, uint64_t *a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;

  v4 = *a2;
  v3 = a2[1];
  *result = &off_1E5D38F90;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = a3[1];
  result[3] = *a3;
  result[4] = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  return result;
}

void quasar::WlatArcFeWordEmbedding::Run(quasar::WlatArcFeWordEmbedding *this, const kaldi::WordHypLattice *a2, int a3)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v6;
  uint64_t v7;
  const char *v8;
  int v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  int v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  int v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _OWORD v26[2];
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;

  v3 = (uint64_t *)*((_QWORD *)a2 + 5);
  v4 = (uint64_t *)*((_QWORD *)a2 + 6);
  if (v3 != v4)
  {
    v6 = a3;
    do
    {
      v7 = *v3;
      if (!*(_BYTE *)(*v3 + 488))
      {
        v40 = 0u;
        v41 = 0u;
        v38 = 0u;
        v39 = 0u;
        v36 = 0u;
        v37 = 0u;
        v34 = 0u;
        v35 = 0u;
        v32 = 0u;
        v33 = 0u;
        v30 = 0u;
        v31 = 0u;
        v28 = 0u;
        v29 = 0u;
        v27 = 0u;
        memset(v26, 0, sizeof(v26));
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v26);
        std::operator<<[abi:ne180100]<std::char_traits<char>>(v26, "Coding error. norm_word not found for arc");
        quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v26);
      }
      v8 = (const char *)(v7 + 464);
      marisa::Agent::Agent((marisa::Agent *)v26);
      if (*(char *)(v7 + 487) < 0)
        v8 = *(const char **)v8;
      marisa::Agent::set_query(v26, v8);
      if ((marisa::Trie::lookup(*((marisa::grimoire::trie::LoudsTrie ***)this + 1), (marisa::Agent *)v26) & 1) != 0)
      {
        v9 = DWORD1(v27);
        v10 = (*(uint64_t (**)(quasar::WlatArcFeWordEmbedding *))(*(_QWORD *)this + 16))(this);
        v11 = *(_QWORD *)(v7 + 304) + 4 * v6;
        v22 = &unk_1E5D29D70;
        v23 = v11;
        v25 = *(_QWORD *)(v7 + 320);
        v24 = v10;
        v12 = *((_QWORD *)this + 3);
        v13 = *(_QWORD *)v12;
        v14 = *(_DWORD *)(v12 + 16);
        v15 = kaldi::MatrixBase<float>::NumCols(v12);
        v20 = 0;
        v21 = 0;
        v18 = v13 + 4 * v14 * v9;
        v19 = v15;
        kaldi::CuVectorBase<float>::CopyFromVec<float>(&v22, (uint64_t)&v18);
      }
      else
      {
        v16 = (*(uint64_t (**)(quasar::WlatArcFeWordEmbedding *))(*(_QWORD *)this + 16))(this);
        v17 = *(_QWORD *)(v7 + 304) + 4 * v6;
        v22 = &unk_1E5D29D70;
        v23 = v17;
        v25 = *(_QWORD *)(v7 + 320);
        v24 = v16;
        kaldi::CuVectorBase<float>::SetZero((uint64_t)&v22);
      }
      marisa::Agent::~Agent((marisa::Agent *)v26);
      ++v3;
    }
    while (v3 != v4);
  }
}

uint64_t quasar::WlatArcFeWordEmbedding::Dim(quasar::WlatArcFeWordEmbedding *this)
{
  _OWORD v3[17];

  if (!kaldi::MatrixBase<float>::NumCols(*((_QWORD *)this + 3)))
  {
    memset(v3, 0, sizeof(v3));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v3);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v3, "Coding error. wordEmbMat not loaded.");
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v3);
  }
  return kaldi::MatrixBase<float>::NumCols(*((_QWORD *)this + 3));
}

void quasar::WlatArcFeIsLme::Run(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t *v3;
  uint64_t *i;
  uint64_t v5;
  uint64_t v6;
  float v7;

  v3 = *(uint64_t **)(a2 + 40);
  for (i = *(uint64_t **)(a2 + 48); v3 != i; *(float *)(*(_QWORD *)(v5 + 304) + 4 * a3) = v7)
  {
    v6 = *v3++;
    v5 = v6;
    if (*(uint64_t *)(v6 + 256) <= 499999999)
      v7 = 0.0;
    else
      v7 = 1.0;
  }
}

void quasar::WlatArcFeLmeId::Run(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t *v3;
  uint64_t *i;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  float v8;

  v3 = *(uint64_t **)(a2 + 40);
  for (i = *(uint64_t **)(a2 + 48); v3 != i; *(float *)(*(_QWORD *)(v5 + 304) + 4 * a3) = v8)
  {
    v6 = *v3++;
    v5 = v6;
    v7 = *(_QWORD *)(v6 + 256);
    v8 = (float)(v7 - 999999999);
    if (v7 <= 999999999)
      v8 = 0.0;
  }
}

BOOL quasar::WlatArcFeIsSil::Run(_BOOL8 this, const kaldi::WordHypLattice *a2, int a3)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int *v8;
  float v9;

  v3 = (uint64_t *)*((_QWORD *)a2 + 5);
  v4 = (uint64_t *)*((_QWORD *)a2 + 6);
  if (v3 != v4)
  {
    v5 = this;
    v6 = a3;
    do
    {
      v7 = *v3;
      v8 = *(int **)(*v3 + 104);
      v9 = 0.0;
      if (*(_QWORD *)(*v3 + 112) - (_QWORD)v8 == 4)
      {
        this = kaldi::SilencePhoneSet::isSilencePhone(*(kaldi::SilencePhoneSet **)(v5 + 8), *v8);
        if (this)
          v9 = 1.0;
        else
          v9 = 0.0;
      }
      *(float *)(*(_QWORD *)(v7 + 304) + 4 * v6) = v9;
      ++v3;
    }
    while (v3 != v4);
  }
  return this;
}

float quasar::WlatArcFeNumPhones::Run(uint64_t a1, uint64_t a2, int a3)
{
  _QWORD *v3;
  _QWORD *i;
  _QWORD *v5;
  float result;

  v3 = *(_QWORD **)(a2 + 40);
  for (i = *(_QWORD **)(a2 + 48); v3 != i; *(float *)(v5[38] + 4 * a3) = result)
  {
    v5 = (_QWORD *)*v3++;
    result = (float)(unint64_t)((uint64_t)(v5[14] - v5[13]) >> 2);
  }
  return result;
}

float quasar::WlatArcFeAcousticCostUnpushed::Run(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t *v3;
  uint64_t *i;
  uint64_t v5;
  float result;

  v3 = *(uint64_t **)(a2 + 40);
  for (i = *(uint64_t **)(a2 + 48); v3 != i; *(float *)(*(_QWORD *)(v5 + 304) + 4 * a3) = result)
  {
    v5 = *v3++;
    result = *(double *)(v5 + 24);
  }
  return result;
}

void quasar::WlatArcFeInBestPath::Run(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t *v3;
  uint64_t *i;
  uint64_t v5;
  uint64_t v6;
  float v7;

  v3 = *(uint64_t **)(a2 + 40);
  for (i = *(uint64_t **)(a2 + 48); v3 != i; *(float *)(*(_QWORD *)(v5 + 304) + 4 * a3) = v7)
  {
    v6 = *v3++;
    v5 = v6;
    if (*(_BYTE *)(v6 + 49))
      v7 = 1.0;
    else
      v7 = 0.0;
  }
}

void quasar::WlatArcFeScalar::Run(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v6;
  uint64_t v7;

  v3 = *(uint64_t **)(a2 + 40);
  v4 = *(uint64_t **)(a2 + 48);
  if (v3 != v4)
  {
    v6 = a3;
    do
    {
      v7 = *v3++;
      *(float *)(*(_QWORD *)(v7 + 304) + 4 * v6) = (*(float (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 32))(a1, v7);
    }
    while (v3 != v4);
  }
}

float quasar::WlatArcFeLinAcousticPosterior::getValue(uint64_t a1, uint64_t a2)
{
  return exp(*(long double *)(a2 + 64));
}

float quasar::WlatArcFeLogAcousticPosterior::getValue(uint64_t a1, uint64_t a2)
{
  return *(double *)(a2 + 64);
}

float quasar::WlatArcFeLinPosterior1::getValue(uint64_t a1, uint64_t a2)
{
  return *(double *)(a2 + 136);
}

float quasar::WlatArcFeLogPosterior1::getValue(uint64_t a1, uint64_t a2)
{
  return log(*(long double *)(a2 + 136));
}

float quasar::WlatArcFeAcousticCostCollapsed1::getValue(uint64_t a1, uint64_t a2)
{
  return *(double *)(a2 + 128);
}

float quasar::WlatArcFeAcousticCost2::getValue(uint64_t a1, uint64_t a2)
{
  return *(double *)(a2 + 192);
}

float quasar::WlatArcFeAcousticCostUnpushed2::getValue(uint64_t a1, uint64_t a2)
{
  return *(double *)(a2 + 200);
}

float quasar::WlatArcFeLinAcousticPosterior2::getValue(uint64_t a1, uint64_t a2)
{
  return exp(*(long double *)(a2 + 208));
}

float quasar::WlatArcFeLogAcousticPosterior2::getValue(uint64_t a1, uint64_t a2)
{
  return *(double *)(a2 + 208);
}

void quasar::WlatArcFeKeyword::~WlatArcFeKeyword(quasar::WlatArcFeKeyword *this)
{
  JUMPOUT(0x1AF44D190);
}

uint64_t quasar::WlatArcFeKeyword::Dim(quasar::WlatArcFeKeyword *this)
{
  return 1;
}

void quasar::WlatArcFeIsLme::~WlatArcFeIsLme(quasar::WlatArcFeIsLme *this)
{
  JUMPOUT(0x1AF44D190);
}

uint64_t quasar::WlatArcFeIsLme::Dim(quasar::WlatArcFeIsLme *this)
{
  return 1;
}

void quasar::WlatArcFeLmeId::~WlatArcFeLmeId(quasar::WlatArcFeLmeId *this)
{
  JUMPOUT(0x1AF44D190);
}

uint64_t quasar::WlatArcFeLmeId::Dim(quasar::WlatArcFeLmeId *this)
{
  return 1;
}

void quasar::WlatArcFeIsSil::~WlatArcFeIsSil(quasar::WlatArcFeIsSil *this)
{
  JUMPOUT(0x1AF44D190);
}

uint64_t quasar::WlatArcFeIsSil::Dim(quasar::WlatArcFeIsSil *this)
{
  return 1;
}

void quasar::WlatArcFeNumPhones::~WlatArcFeNumPhones(quasar::WlatArcFeNumPhones *this)
{
  JUMPOUT(0x1AF44D190);
}

uint64_t quasar::WlatArcFeNumPhones::Dim(quasar::WlatArcFeNumPhones *this)
{
  return 1;
}

void quasar::WlatArcFeAcousticCostUnpushed::~WlatArcFeAcousticCostUnpushed(quasar::WlatArcFeAcousticCostUnpushed *this)
{
  JUMPOUT(0x1AF44D190);
}

uint64_t quasar::WlatArcFeAcousticCostUnpushed::Dim(quasar::WlatArcFeAcousticCostUnpushed *this)
{
  return 1;
}

void quasar::WlatArcFeInBestPath::~WlatArcFeInBestPath(quasar::WlatArcFeInBestPath *this)
{
  JUMPOUT(0x1AF44D190);
}

uint64_t quasar::WlatArcFeInBestPath::Dim(quasar::WlatArcFeInBestPath *this)
{
  return 1;
}

uint64_t quasar::WlatArcFeScalar::Dim(quasar::WlatArcFeScalar *this)
{
  return 1;
}

void quasar::WlatArcFeAcousticCost::~WlatArcFeAcousticCost(quasar::WlatArcFeAcousticCost *this)
{
  JUMPOUT(0x1AF44D190);
}

uint64_t quasar::WlatArcFeAcousticCost::Dim(quasar::WlatArcFeAcousticCost *this)
{
  return 1;
}

void quasar::WlatArcFeGraphCost::~WlatArcFeGraphCost(quasar::WlatArcFeGraphCost *this)
{
  JUMPOUT(0x1AF44D190);
}

uint64_t quasar::WlatArcFeGraphCost::Dim(quasar::WlatArcFeGraphCost *this)
{
  return 1;
}

void quasar::WlatArcFeNumFrames::~WlatArcFeNumFrames(quasar::WlatArcFeNumFrames *this)
{
  JUMPOUT(0x1AF44D190);
}

uint64_t quasar::WlatArcFeNumFrames::Dim(quasar::WlatArcFeNumFrames *this)
{
  return 1;
}

void quasar::WlatArcFeLogPosterior::~WlatArcFeLogPosterior(quasar::WlatArcFeLogPosterior *this)
{
  JUMPOUT(0x1AF44D190);
}

uint64_t quasar::WlatArcFeLogPosterior::Dim(quasar::WlatArcFeLogPosterior *this)
{
  return 1;
}

void quasar::WlatArcFeLinPosterior::~WlatArcFeLinPosterior(quasar::WlatArcFeLinPosterior *this)
{
  JUMPOUT(0x1AF44D190);
}

uint64_t quasar::WlatArcFeLinPosterior::Dim(quasar::WlatArcFeLinPosterior *this)
{
  return 1;
}

void quasar::WlatArcFeBagOfPhones::~WlatArcFeBagOfPhones(quasar::WlatArcFeBagOfPhones *this)
{
  *(_QWORD *)this = &off_1E5D37F28;
  std::__tree<int>::destroy((uint64_t)this + 384, *((_QWORD **)this + 49));
  kaldi::nnet1::Nnet::~Nnet((quasar::WlatArcFeBagOfPhones *)((char *)this + 8));
}

{
  *(_QWORD *)this = &off_1E5D37F28;
  std::__tree<int>::destroy((uint64_t)this + 384, *((_QWORD **)this + 49));
  kaldi::nnet1::Nnet::~Nnet((quasar::WlatArcFeBagOfPhones *)((char *)this + 8));
  JUMPOUT(0x1AF44D190);
}

uint64_t quasar::WlatArcFeBagOfPhones::Dim(quasar::WlatArcFeBagOfPhones *this)
{
  return kaldi::nnet1::Nnet::OutputDim((quasar::WlatArcFeBagOfPhones *)((char *)this + 8));
}

void quasar::WlatArcFeWordEmbedding::~WlatArcFeWordEmbedding(quasar::WlatArcFeWordEmbedding *this)
{
  char *v1;

  *(_QWORD *)this = &off_1E5D38F90;
  v1 = (char *)this + 8;
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this + 24);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)v1);
}

{
  char *v1;

  *(_QWORD *)this = &off_1E5D38F90;
  v1 = (char *)this + 8;
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this + 24);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)v1);
  JUMPOUT(0x1AF44D190);
}

void quasar::WlatArcFeLinAcousticPosterior::~WlatArcFeLinAcousticPosterior(quasar::WlatArcFeLinAcousticPosterior *this)
{
  JUMPOUT(0x1AF44D190);
}

void quasar::WlatArcFeLogAcousticPosterior::~WlatArcFeLogAcousticPosterior(quasar::WlatArcFeLogAcousticPosterior *this)
{
  JUMPOUT(0x1AF44D190);
}

void quasar::WlatArcFeLinPosterior1::~WlatArcFeLinPosterior1(quasar::WlatArcFeLinPosterior1 *this)
{
  JUMPOUT(0x1AF44D190);
}

void quasar::WlatArcFeLogPosterior1::~WlatArcFeLogPosterior1(quasar::WlatArcFeLogPosterior1 *this)
{
  JUMPOUT(0x1AF44D190);
}

void quasar::WlatArcFeAcousticCostCollapsed1::~WlatArcFeAcousticCostCollapsed1(quasar::WlatArcFeAcousticCostCollapsed1 *this)
{
  JUMPOUT(0x1AF44D190);
}

void quasar::WlatArcFeAcousticCost2::~WlatArcFeAcousticCost2(quasar::WlatArcFeAcousticCost2 *this)
{
  JUMPOUT(0x1AF44D190);
}

void quasar::WlatArcFeAcousticCostUnpushed2::~WlatArcFeAcousticCostUnpushed2(quasar::WlatArcFeAcousticCostUnpushed2 *this)
{
  JUMPOUT(0x1AF44D190);
}

void quasar::WlatArcFeLinAcousticPosterior2::~WlatArcFeLinAcousticPosterior2(quasar::WlatArcFeLinAcousticPosterior2 *this)
{
  JUMPOUT(0x1AF44D190);
}

void quasar::WlatArcFeLogAcousticPosterior2::~WlatArcFeLogAcousticPosterior2(quasar::WlatArcFeLogAcousticPosterior2 *this)
{
  JUMPOUT(0x1AF44D190);
}

uint64_t *std::__tree<std::__value_type<int,int>,std::__map_value_compare<int,std::__value_type<int,int>,std::less<int>,true>,std::allocator<std::__value_type<int,int>>>::__emplace_unique_key_args<int,std::pair<int,int>>(uint64_t **a1, int *a2, uint64_t *a3)
{
  uint64_t *v5;
  uint64_t **v6;
  int v7;
  uint64_t **v8;
  int v9;
  uint64_t *v10;

  v6 = a1 + 1;
  v5 = a1[1];
  if (v5)
  {
    v7 = *a2;
    while (1)
    {
      while (1)
      {
        v8 = (uint64_t **)v5;
        v9 = *((_DWORD *)v5 + 7);
        if (v7 >= v9)
          break;
        v5 = *v8;
        v6 = v8;
        if (!*v8)
          goto LABEL_10;
      }
      if (v9 >= v7)
        break;
      v5 = v8[1];
      if (!v5)
      {
        v6 = v8 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v8 = a1 + 1;
LABEL_10:
    v10 = (uint64_t *)operator new(0x28uLL);
    *(uint64_t *)((char *)v10 + 28) = *a3;
    std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at(a1, (uint64_t)v8, v6, v10);
    return v10;
  }
  return (uint64_t *)v8;
}

fst::SymbolTableTextOptions *fst::SymbolTableTextOptions::SymbolTableTextOptions(fst::SymbolTableTextOptions *this)
{
  *(_BYTE *)this = 0;
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)this + 1, FLAGS_fst_field_separator[0]);
  return this;
}

uint64_t fst::SymbolTableImpl::ReadText()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  __int128 *v3;
  __int128 *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t i;
  const std::locale::facet *v8;
  _QWORD *v9;
  size_t v10;
  void **v11;
  const void *v12;
  char *v13;
  uint64_t v14;
  char *v15;
  const char *v16;
  uint64_t v17;
  BOOL v18;
  int v19;
  fst *v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  _QWORD *v30;
  size_t v31;
  _QWORD *v32;
  char **p_endptr;
  fst *v34;
  _QWORD *v35;
  _QWORD *v36;
  size_t v37;
  _QWORD *v38;
  _QWORD *v39;
  _QWORD *v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  void *v45;
  char v47;
  char *__endptr;
  void *__p[2];
  char v50;
  void *v51[2];
  char v52;
  std::locale v53;
  std::locale::__imp *locale;
  uint64_t v55;
  char __s[8096];
  uint64_t v57;

  v0 = MEMORY[0x1E0C80A78]();
  v2 = v1;
  v4 = v3;
  v5 = (_QWORD *)v0;
  v57 = *MEMORY[0x1E0C80C00];
  v6 = operator new();
  fst::SymbolTableImpl::SymbolTableImpl((std::string *)v6, v4);
  for (i = 1; ; ++i)
  {
    std::ios_base::getloc((const std::ios_base *)((char *)v5 + *(_QWORD *)(*v5 - 24)));
    v8 = std::locale::use_facet(&v53, MEMORY[0x1E0DE4A90]);
    ((void (*)(const std::locale::facet *, uint64_t))v8->__vftable[2].~facet_0)(v8, 10);
    std::locale::~locale(&v53);
    v9 = (_QWORD *)std::istream::getline();
    if ((*((_BYTE *)v9 + *(_QWORD *)(*v9 - 24) + 32) & 5) != 0)
      break;
    v53.__locale_ = 0;
    locale = 0;
    v55 = 0;
    if (*(char *)(v2 + 31) >= 0)
      v10 = *(unsigned __int8 *)(v2 + 31);
    else
      v10 = *(_QWORD *)(v2 + 16);
    std::string::basic_string[abi:ne180100]((uint64_t)v51, v10 + 1);
    if (v52 >= 0)
      v11 = v51;
    else
      v11 = (void **)v51[0];
    if (v10)
    {
      if (*(char *)(v2 + 31) >= 0)
        v12 = (const void *)(v2 + 8);
      else
        v12 = *(const void **)(v2 + 8);
      memmove(v11, v12, v10);
    }
    *(_WORD *)((char *)v11 + v10) = 10;
    if (v52 >= 0)
      v13 = (char *)v51;
    else
      v13 = (char *)v51[0];
    fst::SplitToVector(__s, v13, (void **)&v53.__locale_, 1);
    v14 = (locale - v53.__locale_) >> 3;
    if (!v14)
    {
      v19 = 2;
      goto LABEL_54;
    }
    if (v14 == 2)
    {
      v15 = *(char **)v53.__locale_;
      v16 = (const char *)*((_QWORD *)v53.__locale_ + 1);
      __endptr = 0;
      v17 = strtoll(v16, &__endptr, 10);
      if (__endptr >= &v16[strlen(v16)])
      {
        v18 = v17 < 0 && *(_BYTE *)v2 == 0;
        if (!v18 && v17 != -1)
        {
          std::string::basic_string[abi:ne180100]<0>(__p, v15);
          fst::SymbolTableImpl::AddSymbol(v6, (uint64_t)__p, v17);
          if (v50 < 0)
            operator delete(__p[0]);
          v19 = 0;
          goto LABEL_54;
        }
      }
      std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
      v34 = fst::LogMessage::LogMessage((fst *)&v47, (uint64_t)__p);
      v35 = (_QWORD *)fst::cerr(v34);
      v36 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)"SymbolTable::ReadText: Bad non-negative integer \"", 49);
      v37 = strlen(v16);
      v38 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)v16, v37);
      v39 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v38, (uint64_t)"\", ", 3);
      v40 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v39, (uint64_t)"file = ", 7);
      v41 = *((char *)v4 + 23);
      if (v41 >= 0)
        v42 = (uint64_t)v4;
      else
        v42 = *(_QWORD *)v4;
      if (v41 >= 0)
        v43 = *((unsigned __int8 *)v4 + 23);
      else
        v43 = *((_QWORD *)v4 + 1);
      v44 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, v42, v43);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v44, (uint64_t)", line = ", 9);
      std::ostream::operator<<();
      p_endptr = (char **)&v47;
    }
    else
    {
      std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
      v20 = fst::LogMessage::LogMessage((fst *)&__endptr, (uint64_t)__p);
      v21 = (_QWORD *)fst::cerr(v20);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)"SymbolTable::ReadText: Bad number of columns (", 46);
      v22 = (_QWORD *)std::ostream::operator<<();
      v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"), ", 3);
      v24 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)"file = ", 7);
      v25 = *((char *)v4 + 23);
      if (v25 >= 0)
        v26 = (uint64_t)v4;
      else
        v26 = *(_QWORD *)v4;
      if (v25 >= 0)
        v27 = *((unsigned __int8 *)v4 + 23);
      else
        v27 = *((_QWORD *)v4 + 1);
      v28 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, v26, v27);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)", line = ", 9);
      v29 = (_QWORD *)std::ostream::operator<<();
      v30 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)":<", 2);
      v31 = strlen(__s);
      v32 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)__s, v31);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)">", 1);
      p_endptr = &__endptr;
    }
    fst::LogMessage::~LogMessage((fst::LogMessage *)p_endptr);
    if (v50 < 0)
      operator delete(__p[0]);
    if (*(char *)(v6 + 223) < 0)
      operator delete(*(void **)(v6 + 200));
    if (*(char *)(v6 + 199) < 0)
      operator delete(*(void **)(v6 + 176));
    std::__tree<int>::destroy(v6 + 144, *(_QWORD **)(v6 + 152));
    v45 = *(void **)(v6 + 120);
    if (v45)
    {
      *(_QWORD *)(v6 + 128) = v45;
      operator delete(v45);
    }
    fst::internal::DenseSymbolMap::~DenseSymbolMap((fst::internal::DenseSymbolMap *)(v6 + 40));
    if (*(char *)(v6 + 23) < 0)
      operator delete(*(void **)v6);
    MEMORY[0x1AF44D190](v6, 0x10B2C404FCE5648);
    v19 = 1;
LABEL_54:
    if (v52 < 0)
      operator delete(v51[0]);
    if (v53.__locale_)
    {
      locale = v53.__locale_;
      operator delete(v53.__locale_);
    }
    if ((v19 | 2) != 2)
      return 0;
  }
  return v6;
}

void sub_1AD8D2508(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,std::locale a29,uint64_t a30)
{
  uint64_t v30;

  MEMORY[0x1AF44D190](v30, 0x10B2C404FCE5648);
  _Unwind_Resume(a1);
}

uint64_t fst::SymbolTableImpl::AddSymbol(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;
  char v7;
  unint64_t NthKey;
  uint64_t v9;
  unint64_t v10;
  uint64_t *v11;
  _QWORD *v12;
  fst *v13;
  _QWORD *v14;
  _QWORD *v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t *v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  char *v27;
  uint64_t *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  void *__p[2];
  char v34;
  uint64_t v35;
  char v36;

  v35 = a3;
  if (a3 == -1)
    return -1;
  v6 = fst::internal::DenseSymbolMap::InsertOrFind((fst::internal::DenseSymbolMap *)(a1 + 40), a2);
  if ((v7 & 1) != 0)
  {
    if (((uint64_t)(*(_QWORD *)(a1 + 56) - *(_QWORD *)(a1 + 48)) >> 3) - 1 == a3 && *(_QWORD *)(a1 + 32) == a3)
    {
      *(_QWORD *)(a1 + 32) = a3 + 1;
      v9 = a3;
    }
    else
    {
      v10 = *(_QWORD *)(a1 + 136);
      v11 = *(uint64_t **)(a1 + 128);
      if ((unint64_t)v11 >= v10)
      {
        v22 = *(uint64_t **)(a1 + 120);
        v23 = v11 - v22;
        if ((unint64_t)(v23 + 1) >> 61)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v24 = v10 - (_QWORD)v22;
        v25 = (uint64_t)(v10 - (_QWORD)v22) >> 2;
        if (v25 <= v23 + 1)
          v25 = v23 + 1;
        if (v24 >= 0x7FFFFFFFFFFFFFF8)
          v26 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v26 = v25;
        if (v26)
        {
          v27 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>(a1 + 136, v26);
          v22 = *(uint64_t **)(a1 + 120);
          v11 = *(uint64_t **)(a1 + 128);
        }
        else
        {
          v27 = 0;
        }
        v28 = (uint64_t *)&v27[8 * v23];
        v29 = &v27[8 * v26];
        *v28 = a3;
        v12 = v28 + 1;
        while (v11 != v22)
        {
          v30 = *--v11;
          *--v28 = v30;
        }
        *(_QWORD *)(a1 + 120) = v28;
        *(_QWORD *)(a1 + 128) = v12;
        *(_QWORD *)(a1 + 136) = v29;
        if (v22)
          operator delete(v22);
      }
      else
      {
        *v11 = a3;
        v12 = v11 + 1;
      }
      *(_QWORD *)(a1 + 128) = v12;
      v31 = ((uint64_t)(*(_QWORD *)(a1 + 56) - *(_QWORD *)(a1 + 48)) >> 3) - 1;
      __p[0] = &v35;
      std::__tree<std::__value_type<long long,long long>,std::__map_value_compare<long long,std::__value_type<long long,long long>,std::less<long long>,true>,std::allocator<std::__value_type<long long,long long>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>((uint64_t **)(a1 + 144), &v35, (uint64_t)&std::piecewise_construct, (uint64_t **)__p)[5] = v31;
      v9 = v35;
    }
    if (v9 >= *(_QWORD *)(a1 + 24))
      *(_QWORD *)(a1 + 24) = v9 + 1;
    *(_BYTE *)(a1 + 172) = 0;
  }
  else
  {
    NthKey = fst::SymbolTableImpl::GetNthKey((fst::SymbolTableImpl *)a1, v6);
    if (NthKey == a3)
    {
      return a3;
    }
    else
    {
      v9 = NthKey;
      if (FLAGS_v >= 1)
      {
        std::string::basic_string[abi:ne180100]<0>(__p, "INFO");
        v13 = fst::LogMessage::LogMessage((fst *)&v36, (uint64_t)__p);
        v14 = (_QWORD *)fst::cerr(v13);
        v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"SymbolTable::AddSymbol: symbol = ", 33);
        v16 = *(char *)(a2 + 23);
        if (v16 >= 0)
          v17 = a2;
        else
          v17 = *(_QWORD *)a2;
        if (v16 >= 0)
          v18 = *(unsigned __int8 *)(a2 + 23);
        else
          v18 = *(_QWORD *)(a2 + 8);
        v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, v17, v18);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)" already in symbol_map_ with key = ", 35);
        v20 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)" but supplied new key = ", 24);
        v21 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)" (ignoring new key)", 19);
        fst::LogMessage::~LogMessage((fst::LogMessage *)&v36);
        if (v34 < 0)
          operator delete(__p[0]);
      }
    }
  }
  return v9;
}

void sub_1AD8D2834(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void fst::SymbolTableImpl::MaybeRecomputeCheckSum(fst::SymbolTableImpl *this)
{
  uint64_t v2;
  unint64_t v3;
  char *v4;
  size_t v5;
  int v6;
  char v7;
  std::string *v8;
  uint64_t v9;
  std::string::value_type v10;
  std::string::value_type v11;
  int v12;
  BOOL v13;
  int v14;
  int v15;
  std::string *v16;
  void **v17;
  uint64_t v18;
  std::string::size_type v19;
  std::string::size_type v20;
  std::string::size_type v21;
  size_t v22;
  void *p_dst;
  uint64_t v24;
  _QWORD *v25;
  char *v26;
  int v27;
  unsigned __int8 v28;
  uint64_t v29;
  char v30;
  char v31;
  int v32;
  int v33;
  int v34;
  std::string *v35;
  fst::SymbolTableImpl *v36;
  std::string::size_type v37;
  std::string::size_type v38;
  std::string::size_type v39;
  size_t v40;
  void *v41;
  uint64_t v42;
  _QWORD *v43;
  char *v44;
  int v45;
  unsigned __int8 v46;
  uint64_t v47;
  char v48;
  char v49;
  int v50;
  int v51;
  int v52;
  std::string *v53;
  fst::SymbolTableImpl *v54;
  fst::SymbolTableImpl *v55;
  BOOL v56;
  void **v57;
  void *v58;
  uint64_t v59;
  unsigned __int8 v60;
  void *__dst;
  uint64_t v62;
  unsigned __int8 v63;
  std::string __p[3];
  void *v65;
  char v66;
  _BYTE v67[152];
  int v68;
  std::string v69;
  int v70;
  std::string v71;

  if (!*((_BYTE *)this + 172))
  {
    fst::CheckSummer::CheckSummer((fst::CheckSummer *)&v70);
    v2 = *((_QWORD *)this + 6);
    if (*((_QWORD *)this + 7) != v2)
    {
      v3 = 0;
      do
      {
        v4 = *(char **)(v2 + 8 * v3);
        v5 = strlen(v4);
        std::string::basic_string[abi:ne180100](__p, v4, v5);
        v6 = HIBYTE(__p[0].__r_.__value_.__r.__words[2]);
        v7 = HIBYTE(__p[0].__r_.__value_.__r.__words[2]);
        v8 = (std::string *)__p[0].__r_.__value_.__r.__words[0];
        if ((__p[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v6 = __p[0].__r_.__value_.__r.__words[1];
        else
          v8 = __p;
        if (v6 >= 1)
        {
          v9 = v6;
          do
          {
            v11 = v8->__r_.__value_.__s.__data_[0];
            v8 = (std::string *)((char *)v8 + 1);
            v10 = v11;
            v12 = v70++;
            v13 = -v12 < 0;
            v14 = -v12 & 0x1F;
            v15 = v12 & 0x1F;
            if (!v13)
              v15 = -v14;
            if ((v71.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v16 = &v71;
            else
              v16 = (std::string *)v71.__r_.__value_.__r.__words[0];
            v16->__r_.__value_.__s.__data_[v15] ^= v10;
            --v9;
          }
          while (v9);
          v7 = HIBYTE(__p[0].__r_.__value_.__r.__words[2]);
        }
        ++v70;
        if (v7 < 0)
          operator delete(__p[0].__r_.__value_.__l.__data_);
        ++v3;
        v2 = *((_QWORD *)this + 6);
      }
      while (v3 < (*((_QWORD *)this + 7) - v2) >> 3);
    }
    if (SHIBYTE(v71.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(__p, v71.__r_.__value_.__l.__data_, v71.__r_.__value_.__l.__size_);
    else
      __p[0] = v71;
    v17 = (void **)((char *)this + 176);
    if (*((char *)this + 199) < 0)
      operator delete(*v17);
    *(_OWORD *)v17 = *(_OWORD *)&__p[0].__r_.__value_.__l.__data_;
    *((_QWORD *)this + 24) = *((_QWORD *)&__p[0].__r_.__value_.__l + 2);
    fst::CheckSummer::CheckSummer((fst::CheckSummer *)&v68);
    if (*((uint64_t *)this + 4) >= 1)
    {
      v18 = 0;
      v19 = *MEMORY[0x1E0DE4F60];
      v20 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
      v21 = MEMORY[0x1E0DE4FB8] + 16;
      do
      {
        std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)__p);
        v22 = strlen(*(const char **)(*((_QWORD *)this + 6) + 8 * v18));
        std::string::basic_string[abi:ne180100](&__dst, *(void **)(*((_QWORD *)this + 6) + 8 * v18), v22);
        if ((v63 & 0x80u) == 0)
          p_dst = &__dst;
        else
          p_dst = __dst;
        if ((v63 & 0x80u) == 0)
          v24 = v63;
        else
          v24 = v62;
        v25 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)p_dst, v24);
        LOBYTE(v58) = 9;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)&v58, 1);
        std::ostream::operator<<();
        if ((char)v63 < 0)
          operator delete(__dst);
        std::stringbuf::str();
        if ((v63 & 0x80u) == 0)
          v26 = (char *)&__dst;
        else
          v26 = (char *)__dst;
        std::stringbuf::str();
        v27 = v60;
        v28 = v60;
        if ((v60 & 0x80u) != 0)
          v27 = v59;
        if (v27 >= 1)
        {
          v29 = v27;
          do
          {
            v31 = *v26++;
            v30 = v31;
            v32 = v68++;
            v13 = -v32 < 0;
            v33 = -v32 & 0x1F;
            v34 = v32 & 0x1F;
            if (!v13)
              v34 = -v33;
            if ((v69.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v35 = &v69;
            else
              v35 = (std::string *)v69.__r_.__value_.__r.__words[0];
            v35->__r_.__value_.__s.__data_[v34] ^= v30;
            --v29;
          }
          while (v29);
          v28 = v60;
        }
        if ((v28 & 0x80) != 0)
          operator delete(v58);
        if ((char)v63 < 0)
          operator delete(__dst);
        __p[0].__r_.__value_.__r.__words[0] = v19;
        *(std::string::size_type *)((char *)__p[0].__r_.__value_.__r.__words + *(_QWORD *)(v19 - 24)) = v20;
        __p[0].__r_.__value_.__l.__size_ = v21;
        if (v66 < 0)
          operator delete(v65);
        std::streambuf::~streambuf();
        std::ostream::~ostream();
        MEMORY[0x1AF44D094](v67);
        ++v18;
      }
      while (v18 < *((_QWORD *)this + 4));
    }
    v36 = (fst::SymbolTableImpl *)*((_QWORD *)this + 18);
    if (v36 != (fst::SymbolTableImpl *)((char *)this + 152))
    {
      v37 = *MEMORY[0x1E0DE4F60];
      v38 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
      v39 = MEMORY[0x1E0DE4FB8] + 16;
      do
      {
        if (*((_QWORD *)v36 + 4) >= *((_QWORD *)this + 4))
        {
          std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)__p);
          v40 = strlen(*(const char **)(*((_QWORD *)this + 6) + 8 * *((_QWORD *)v36 + 5)));
          std::string::basic_string[abi:ne180100](&__dst, *(void **)(*((_QWORD *)this + 6) + 8 * *((_QWORD *)v36 + 5)), v40);
          if ((v63 & 0x80u) == 0)
            v41 = &__dst;
          else
            v41 = __dst;
          if ((v63 & 0x80u) == 0)
            v42 = v63;
          else
            v42 = v62;
          v43 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)v41, v42);
          LOBYTE(v58) = 9;
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)&v58, 1);
          std::ostream::operator<<();
          if ((char)v63 < 0)
            operator delete(__dst);
          std::stringbuf::str();
          if ((v63 & 0x80u) == 0)
            v44 = (char *)&__dst;
          else
            v44 = (char *)__dst;
          std::stringbuf::str();
          v45 = v60;
          v46 = v60;
          if ((v60 & 0x80u) != 0)
            v45 = v59;
          if (v45 >= 1)
          {
            v47 = v45;
            do
            {
              v49 = *v44++;
              v48 = v49;
              v50 = v68++;
              v13 = -v50 < 0;
              v51 = -v50 & 0x1F;
              v52 = v50 & 0x1F;
              if (!v13)
                v52 = -v51;
              if ((v69.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v53 = &v69;
              else
                v53 = (std::string *)v69.__r_.__value_.__r.__words[0];
              v53->__r_.__value_.__s.__data_[v52] ^= v48;
              --v47;
            }
            while (v47);
            v46 = v60;
          }
          if ((v46 & 0x80) != 0)
            operator delete(v58);
          if ((char)v63 < 0)
            operator delete(__dst);
          __p[0].__r_.__value_.__r.__words[0] = v37;
          *(std::string::size_type *)((char *)__p[0].__r_.__value_.__r.__words + *(_QWORD *)(v37 - 24)) = v38;
          __p[0].__r_.__value_.__l.__size_ = v39;
          if (v66 < 0)
            operator delete(v65);
          std::streambuf::~streambuf();
          std::ostream::~ostream();
          MEMORY[0x1AF44D094](v67);
        }
        v54 = (fst::SymbolTableImpl *)*((_QWORD *)v36 + 1);
        if (v54)
        {
          do
          {
            v55 = v54;
            v54 = *(fst::SymbolTableImpl **)v54;
          }
          while (v54);
        }
        else
        {
          do
          {
            v55 = (fst::SymbolTableImpl *)*((_QWORD *)v36 + 2);
            v56 = *(_QWORD *)v55 == (_QWORD)v36;
            v36 = v55;
          }
          while (!v56);
        }
        v36 = v55;
      }
      while (v55 != (fst::SymbolTableImpl *)((char *)this + 152));
    }
    if (SHIBYTE(v69.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(__p, v69.__r_.__value_.__l.__data_, v69.__r_.__value_.__l.__size_);
    else
      __p[0] = v69;
    v57 = (void **)((char *)this + 200);
    if (*((char *)this + 223) < 0)
      operator delete(*v57);
    *(_OWORD *)v57 = *(_OWORD *)&__p[0].__r_.__value_.__l.__data_;
    *((_QWORD *)this + 27) = *((_QWORD *)&__p[0].__r_.__value_.__l + 2);
    *((_BYTE *)this + 172) = 1;
    if (SHIBYTE(v69.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v69.__r_.__value_.__l.__data_);
    if (SHIBYTE(v71.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v71.__r_.__value_.__l.__data_);
  }
}

void sub_1AD8D2E0C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  uint64_t v18;

  if (*(char *)(v18 - 121) < 0)
    operator delete(*(void **)(v18 - 144));
  if (*(char *)(v18 - 89) < 0)
    operator delete(*(void **)(v18 - 112));
  _Unwind_Resume(exception_object);
}

uint64_t fst::internal::DenseSymbolMap::InsertOrFind(fst::internal::DenseSymbolMap *this, uint64_t a2)
{
  char **v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  const char *v12;
  uint64_t v13;
  size_t v14;
  void *v15;
  void *v16;
  const char *v17;
  _QWORD *v18;
  unint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char *v25;
  char *v26;
  char *v27;
  char *v28;
  char *v29;
  uint64_t v30;

  v4 = (char **)((char *)this + 8);
  if ((float)((float)(unint64_t)((uint64_t)(*((_QWORD *)this + 6) - *((_QWORD *)this + 5)) >> 3) * 0.75) <= (float)(unint64_t)((uint64_t)(*((_QWORD *)this + 2) - *((_QWORD *)this + 1)) >> 3))
    fst::internal::DenseSymbolMap::Rehash(this);
  v5 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)this + 32, a2);
  v6 = *((_QWORD *)this + 8);
  v7 = *((_QWORD *)this + 5);
  v8 = v5 & v6;
  v9 = *(_QWORD *)(v7 + 8 * (v5 & v6));
  v11 = *(_QWORD *)this;
  v10 = *((_QWORD *)this + 1);
  if (v9 == *(_QWORD *)this)
  {
LABEL_9:
    v9 = (*((_QWORD *)this + 2) - v10) >> 3;
    *(_QWORD *)(v7 + 8 * v8) = v9;
    v13 = *(unsigned __int8 *)(a2 + 23);
    if ((v13 & 0x80u) != 0)
      v13 = *(_QWORD *)(a2 + 8);
    v14 = v13 + 1;
    v15 = (void *)operator new[]();
    v16 = v15;
    if (*(char *)(a2 + 23) >= 0)
      v17 = (const char *)a2;
    else
      v17 = *(const char **)a2;
    memcpy(v15, v17, v14);
    v18 = (_QWORD *)*((_QWORD *)this + 2);
    v19 = *((_QWORD *)this + 3);
    if ((unint64_t)v18 >= v19)
    {
      v21 = ((char *)v18 - *v4) >> 3;
      if ((unint64_t)(v21 + 1) >> 61)
        std::vector<int>::__throw_length_error[abi:ne180100]();
      v22 = v19 - (_QWORD)*v4;
      v23 = v22 >> 2;
      if (v22 >> 2 <= (unint64_t)(v21 + 1))
        v23 = v21 + 1;
      if ((unint64_t)v22 >= 0x7FFFFFFFFFFFFFF8)
        v24 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v24 = v23;
      if (v24)
        v25 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)this + 24, v24);
      else
        v25 = 0;
      v26 = &v25[8 * v21];
      v27 = &v25[8 * v24];
      *(_QWORD *)v26 = v16;
      v20 = v26 + 8;
      v29 = (char *)*((_QWORD *)this + 1);
      v28 = (char *)*((_QWORD *)this + 2);
      if (v28 != v29)
      {
        do
        {
          v30 = *((_QWORD *)v28 - 1);
          v28 -= 8;
          *((_QWORD *)v26 - 1) = v30;
          v26 -= 8;
        }
        while (v28 != v29);
        v28 = *v4;
      }
      *((_QWORD *)this + 1) = v26;
      *((_QWORD *)this + 2) = v20;
      *((_QWORD *)this + 3) = v27;
      if (v28)
        operator delete(v28);
    }
    else
    {
      *v18 = v16;
      v20 = v18 + 1;
    }
    *((_QWORD *)this + 2) = v20;
  }
  else
  {
    if (*(char *)(a2 + 23) >= 0)
      v12 = (const char *)a2;
    else
      v12 = *(const char **)a2;
    while (strcmp(*(const char **)(v10 + 8 * v9), v12))
    {
      v8 = (v8 + 1) & v6;
      v9 = *(_QWORD *)(v7 + 8 * v8);
      if (v9 == v11)
        goto LABEL_9;
    }
  }
  return v9;
}

unint64_t fst::SymbolTableImpl::GetNthKey(fst::SymbolTableImpl *this, unint64_t a2)
{
  unint64_t v2;
  uint64_t v4;
  char *v5;
  size_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  void *__p[2];
  char v13;

  if ((a2 & 0x8000000000000000) != 0)
    return -1;
  v2 = a2;
  v4 = *((_QWORD *)this + 6);
  if (a2 >= (*((_QWORD *)this + 7) - v4) >> 3)
    return -1;
  if (*((_QWORD *)this + 4) <= (int64_t)a2)
  {
    v5 = *(char **)(v4 + 8 * a2);
    v6 = strlen(v5);
    std::string::basic_string[abi:ne180100](__p, v5, v6);
    v7 = fst::internal::DenseSymbolMap::Find((uint64_t *)this + 5, (uint64_t)__p);
    v2 = v7;
    if (v7 != -1)
    {
      v8 = *((_QWORD *)this + 4);
      v9 = __OFSUB__(v7, v8);
      v10 = v7 - v8;
      if (v10 < 0 == v9)
        v2 = *(_QWORD *)(*((_QWORD *)this + 15) + 8 * v10);
    }
    if (v13 < 0)
      operator delete(__p[0]);
  }
  return v2;
}

uint64_t fst::SymbolTableImpl::Read(_QWORD *a1)
{
  fst *v2;
  _QWORD *v3;
  uint64_t v4;
  fst *v5;
  _QWORD *v6;
  void *v7;
  uint64_t v8;
  fst *v9;
  _QWORD *v10;
  void *v11;
  std::string::value_type __c[8];
  char v14;
  uint64_t v15;
  std::string v16;
  unint64_t v17;
  __int128 __p;
  uint64_t v19;
  int v20;
  char v21;

  v20 = 0;
  std::istream::read();
  if ((*((_BYTE *)a1 + *(_QWORD *)(*a1 - 24) + 32) & 5) != 0)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "ERROR");
    v2 = fst::LogMessage::LogMessage((fst *)&v16, (uint64_t)&__p);
    v3 = (_QWORD *)fst::cerr(v2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"SymbolTable::Read: read failed", 30);
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v16);
    if (SHIBYTE(v19) < 0)
      operator delete((void *)__p);
    return 0;
  }
  else
  {
    __p = 0uLL;
    v19 = 0;
    LODWORD(v16.__r_.__value_.__l.__data_) = 0;
    std::istream::read();
    v4 = operator new();
    fst::SymbolTableImpl::SymbolTableImpl((std::string *)v4, &__p);
    std::istream::read();
    v17 = 0;
    std::istream::read();
    if ((*((_BYTE *)a1 + *(_QWORD *)(*a1 - 24) + 32) & 5) != 0)
    {
      std::string::basic_string[abi:ne180100]<0>(&v16, "ERROR");
      v5 = fst::LogMessage::LogMessage((fst *)__c, (uint64_t)&v16);
      v6 = (_QWORD *)fst::cerr(v5);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"SymbolTable::Read: read failed", 30);
      fst::LogMessage::~LogMessage((fst::LogMessage *)__c);
      if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v16.__r_.__value_.__l.__data_);
      if (*(char *)(v4 + 223) < 0)
        operator delete(*(void **)(v4 + 200));
      if (*(char *)(v4 + 199) < 0)
        operator delete(*(void **)(v4 + 176));
      std::__tree<int>::destroy(v4 + 144, *(_QWORD **)(v4 + 152));
      v7 = *(void **)(v4 + 120);
      if (v7)
      {
        *(_QWORD *)(v4 + 128) = v7;
        operator delete(v7);
      }
      fst::internal::DenseSymbolMap::~DenseSymbolMap((fst::internal::DenseSymbolMap *)(v4 + 40));
      if (*(char *)(v4 + 23) < 0)
        operator delete(*(void **)v4);
      MEMORY[0x1AF44D190](v4, 0x10B2C404FCE5648);
      v4 = 0;
    }
    else
    {
      memset(&v16, 0, sizeof(v16));
      v15 = 0;
      *(_BYTE *)(v4 + 172) = 0;
      if (v17)
      {
        v8 = 0;
        while (1)
        {
          if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
          {
            *v16.__r_.__value_.__l.__data_ = 0;
            v16.__r_.__value_.__l.__size_ = 0;
          }
          else
          {
            v16.__r_.__value_.__s.__data_[0] = 0;
            *((_BYTE *)&v16.__r_.__value_.__s + 23) = 0;
          }
          *(_DWORD *)__c = 0;
          std::istream::read();
          std::istream::read();
          if ((*((_BYTE *)a1 + *(_QWORD *)(*a1 - 24) + 32) & 5) != 0)
            break;
          fst::SymbolTableImpl::AddSymbol(v4, (uint64_t)&v16, v15);
          if (++v8 >= v17)
            goto LABEL_36;
        }
        std::string::basic_string[abi:ne180100]<0>(__c, "ERROR");
        v9 = fst::LogMessage::LogMessage((fst *)&v21, (uint64_t)__c);
        v10 = (_QWORD *)fst::cerr(v9);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"SymbolTable::Read: read failed", 30);
        fst::LogMessage::~LogMessage((fst::LogMessage *)&v21);
        if (v14 < 0)
          operator delete(*(void **)__c);
        if (*(char *)(v4 + 223) < 0)
          operator delete(*(void **)(v4 + 200));
        if (*(char *)(v4 + 199) < 0)
          operator delete(*(void **)(v4 + 176));
        std::__tree<int>::destroy(v4 + 144, *(_QWORD **)(v4 + 152));
        v11 = *(void **)(v4 + 120);
        if (v11)
        {
          *(_QWORD *)(v4 + 128) = v11;
          operator delete(v11);
        }
        fst::internal::DenseSymbolMap::~DenseSymbolMap((fst::internal::DenseSymbolMap *)(v4 + 40));
        if (*(char *)(v4 + 23) < 0)
          operator delete(*(void **)v4);
        MEMORY[0x1AF44D190](v4, 0x10B2C404FCE5648);
        v4 = 0;
      }
LABEL_36:
      if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v16.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v19) < 0)
      operator delete((void *)__p);
  }
  return v4;
}

void sub_1AD8D3524(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a14 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (a28 < 0)
    operator delete(a23);
  _Unwind_Resume(exception_object);
}

BOOL fst::SymbolTableImpl::Write(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int64_t v7;
  void *v8;
  char *v9;
  size_t v10;
  int v11;
  int v12;
  fst *v13;
  _QWORD *v14;
  void *__p;
  uint64_t v17;
  unsigned __int8 v18;
  int v19;

  LODWORD(__p) = 2125658996;
  std::ostream::write();
  LODWORD(v4) = *(unsigned __int8 *)(a1 + 23);
  if ((v4 & 0x80u) != 0)
    v4 = *(_QWORD *)(a1 + 8);
  LODWORD(__p) = v4;
  std::ostream::write();
  std::ostream::write();
  __p = *(void **)(a1 + 24);
  std::ostream::write();
  __p = (void *)((uint64_t)(*(_QWORD *)(a1 + 56) - *(_QWORD *)(a1 + 48)) >> 3);
  std::ostream::write();
  v5 = *(_QWORD *)(a1 + 48);
  if (*(_QWORD *)(a1 + 56) != v5)
  {
    v6 = 0;
    do
    {
      v7 = *(_QWORD *)(a1 + 32);
      v8 = (void *)v6;
      if ((uint64_t)v6 >= v7)
        v8 = *(void **)(*(_QWORD *)(a1 + 120) - 8 * v7 + 8 * v6);
      v9 = *(char **)(v5 + 8 * v6);
      v10 = strlen(v9);
      std::string::basic_string[abi:ne180100](&__p, v9, v10);
      v11 = v18;
      if ((v18 & 0x80u) != 0)
        v11 = v17;
      v19 = v11;
      std::ostream::write();
      std::ostream::write();
      if ((char)v18 < 0)
        operator delete(__p);
      __p = v8;
      std::ostream::write();
      ++v6;
      v5 = *(_QWORD *)(a1 + 48);
    }
    while (v6 < (*(_QWORD *)(a1 + 56) - v5) >> 3);
  }
  std::ostream::flush();
  v12 = *(_DWORD *)((_BYTE *)a2 + *(_QWORD *)(*a2 - 24) + 32) & 5;
  if (v12)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "ERROR");
    v13 = fst::LogMessage::LogMessage((fst *)&v19, (uint64_t)&__p);
    v14 = (_QWORD *)fst::cerr(v13);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"SymbolTable::Write: write failed", 32);
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v19);
    if ((char)v18 < 0)
      operator delete(__p);
  }
  return v12 == 0;
}

void sub_1AD8D37EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, char a16)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void fst::SymbolTable::AddTable(std::string *this, const fst::SymbolTable *a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t size;
  void *__p[2];
  char v10;

  fst::SymbolTable::MutateCheck(this);
  v4 = (*(uint64_t (**)(const fst::SymbolTable *))(*(_QWORD *)a2 + 120))(a2);
  v5 = (*(uint64_t (**)(const fst::SymbolTable *, _QWORD))(*(_QWORD *)a2 + 128))(a2, 0);
  if (v4)
  {
    v6 = v5;
    v7 = 0;
    do
    {
      size = this->__r_.__value_.__l.__size_;
      (*(void (**)(void **__return_ptr, const fst::SymbolTable *, uint64_t))(*(_QWORD *)a2 + 88))(__p, a2, v6);
      fst::SymbolTableImpl::AddSymbol(size, (uint64_t)__p, *(_QWORD *)(size + 24));
      if (v10 < 0)
        operator delete(__p[0]);
      if (++v7 < v4)
        v6 = (*(uint64_t (**)(const fst::SymbolTable *, uint64_t))(*(_QWORD *)a2 + 128))(a2, v7);
    }
    while (v4 != v7);
  }
}

void sub_1AD8D38F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

std::string *fst::SymbolTable::MutateCheck(std::string *this)
{
  std::string::size_type size;
  int v2;
  uint64_t v3;
  std::string *v4;

  size = this->__r_.__value_.__l.__size_;
  v2 = *(_DWORD *)(size + 168);
  if (v2 >= 2)
  {
    v3 = (uint64_t)this;
    *(_DWORD *)(size + 168) = v2 - 1;
    v4 = (std::string *)operator new();
    this = fst::SymbolTableImpl::SymbolTableImpl(v4, *(const fst::SymbolTableImpl **)(v3 + 8));
    *(_QWORD *)(v3 + 8) = v4;
  }
  return this;
}

void sub_1AD8D396C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10B2C404FCE5648);
  _Unwind_Resume(a1);
}

BOOL fst::SymbolTable::WriteText(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  void *v11;
  _BOOL4 v13;
  fst *v14;
  _QWORD *v15;
  void **v16;
  uint64_t v17;
  _QWORD *v18;
  _BYTE *v19;
  _QWORD *v20;
  fst *v21;
  _QWORD *v22;
  uint64_t v24;
  void *v25;
  void *v26;
  void *v27;
  char v28;
  void *__p[2];
  unsigned __int8 v30;
  void *v31[2];
  char v32;
  void *v33;
  char v34;
  uint64_t v35;

  v3 = *(unsigned __int8 *)(a3 + 31);
  if ((v3 & 0x80u) != 0)
    v3 = *(_QWORD *)(a3 + 16);
  v24 = v3;
  if (v3)
  {
    v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1);
    v7 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a1 + 128))(a1, 0);
    if (v6)
    {
      v8 = v7;
      v9 = 0;
      v10 = 0;
      v11 = (void *)*MEMORY[0x1E0DE4F60];
      v26 = *(void **)(MEMORY[0x1E0DE4F60] + 24);
      v25 = (void *)(MEMORY[0x1E0DE4FB8] + 16);
      do
      {
        std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v31);
        v13 = v8 >= 0 || *(_BYTE *)a3 != 0;
        if (((v13 | v9) & 1) == 0)
        {
          std::string::basic_string[abi:ne180100]<0>(__p, "WARNING");
          v14 = fst::LogMessage::LogMessage((fst *)&v27, (uint64_t)__p);
          v15 = (_QWORD *)fst::cerr(v14);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Negative symbol table entry when not allowed", 44);
          fst::LogMessage::~LogMessage((fst::LogMessage *)&v27);
          if ((char)v30 < 0)
            operator delete(__p[0]);
          v9 = 1;
        }
        (*(void (**)(void **__return_ptr, uint64_t, uint64_t))(*(_QWORD *)a1 + 88))(__p, a1, v8);
        if ((v30 & 0x80u) == 0)
          v16 = __p;
        else
          v16 = (void **)__p[0];
        if ((v30 & 0x80u) == 0)
          v17 = v30;
        else
          v17 = (uint64_t)__p[1];
        v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)v16, v17);
        v19 = (_BYTE *)(a3 + 8);
        if (*(char *)(a3 + 31) < 0)
          v19 = *(_BYTE **)(a3 + 8);
        LOBYTE(v27) = *v19;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)&v27, 1);
        v20 = (_QWORD *)std::ostream::operator<<();
        LOBYTE(v27) = 10;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)&v27, 1);
        if ((char)v30 < 0)
          operator delete(__p[0]);
        std::stringbuf::str();
        std::stringbuf::str();
        std::ostream::write();
        if (v28 < 0)
          operator delete(v27);
        if ((char)v30 < 0)
          operator delete(__p[0]);
        v31[0] = v11;
        *(void **)((char *)v31 + *((_QWORD *)v11 - 3)) = v26;
        v31[1] = v25;
        if (v34 < 0)
          operator delete(v33);
        std::streambuf::~streambuf();
        std::ostream::~ostream();
        MEMORY[0x1AF44D094](&v35);
        if (++v10 < v6)
          v8 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 128))(a1, v10);
      }
      while (v6 != v10);
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(v31, "ERROR");
    v21 = fst::LogMessage::LogMessage((fst *)__p, (uint64_t)v31);
    v22 = (_QWORD *)fst::cerr(v21);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"Missing required field separator", 32);
    fst::LogMessage::~LogMessage((fst::LogMessage *)__p);
    if (v32 < 0)
      operator delete(v31[0]);
  }
  return v24 != 0;
}

void sub_1AD8D3CA0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (a32 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

fst::internal::DenseSymbolMap *fst::internal::DenseSymbolMap::DenseSymbolMap(fst::internal::DenseSymbolMap *this)
{
  _QWORD *v2;
  _QWORD *v3;

  *(_QWORD *)this = -1;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  std::vector<long long>::vector((_QWORD *)this + 5, 0x10uLL);
  v3 = (_QWORD *)*((_QWORD *)this + 5);
  v2 = (_QWORD *)*((_QWORD *)this + 6);
  for (*((_QWORD *)this + 8) = v2 - v3 - 1; v3 != v2; ++v3)
    *v3 = *(_QWORD *)this;
  return this;
}

void sub_1AD8D3DA0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void **v3;
  void *v5;

  v3 = v2;
  v5 = *v3;
  if (*v3)
  {
    *(_QWORD *)(v1 + 16) = v5;
    operator delete(v5);
  }
  _Unwind_Resume(exception_object);
}

fst::internal::DenseSymbolMap *fst::internal::DenseSymbolMap::DenseSymbolMap(fst::internal::DenseSymbolMap *this, const fst::internal::DenseSymbolMap *a2)
{
  unint64_t v4;
  size_t v5;
  void *v6;

  *(_QWORD *)this = -1;
  std::vector<char const*>::vector((_QWORD *)this + 1, (uint64_t)(*((_QWORD *)a2 + 2) - *((_QWORD *)a2 + 1)) >> 3);
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 6) = 0;
  *((_QWORD *)this + 7) = 0;
  std::vector<long long>::__init_with_size[abi:ne180100]<long long *,long long *>((_QWORD *)this + 5, *((const void **)a2 + 5), *((_QWORD *)a2 + 6), (uint64_t)(*((_QWORD *)a2 + 6) - *((_QWORD *)a2 + 5)) >> 3);
  *((_QWORD *)this + 8) = *((_QWORD *)a2 + 8);
  *((_DWORD *)this + 18) = *((_DWORD *)a2 + 18);
  if (*((_QWORD *)this + 2) != *((_QWORD *)this + 1))
  {
    v4 = 0;
    do
    {
      v5 = strlen(*(const char **)(*((_QWORD *)a2 + 1) + 8 * v4)) + 1;
      v6 = (void *)operator new[]();
      memcpy(v6, *(const void **)(*((_QWORD *)a2 + 1) + 8 * v4), v5);
      *(_QWORD *)(*((_QWORD *)this + 1) + 8 * v4++) = v6;
    }
    while (v4 < (uint64_t)(*((_QWORD *)this + 2) - *((_QWORD *)this + 1)) >> 3);
  }
  return this;
}

void sub_1AD8D3EB8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 16) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

void fst::internal::DenseSymbolMap::~DenseSymbolMap(fst::internal::DenseSymbolMap *this)
{
  _QWORD *v2;
  _QWORD *v3;
  char *v4;
  unint64_t v5;
  void *v6;

  v4 = (char *)this + 8;
  v2 = (_QWORD *)*((_QWORD *)this + 1);
  v3 = (_QWORD *)*((_QWORD *)v4 + 1);
  if (v3 == v2)
  {
    v2 = v3;
  }
  else
  {
    v5 = 0;
    do
    {
      if (v2[v5])
      {
        MEMORY[0x1AF44D160](v2[v5], 0x1000C8077774924);
        v2 = (_QWORD *)*((_QWORD *)this + 1);
        v3 = (_QWORD *)*((_QWORD *)this + 2);
      }
      ++v5;
    }
    while (v5 < v3 - v2);
  }
  v6 = (void *)*((_QWORD *)this + 5);
  if (v6)
  {
    *((_QWORD *)this + 6) = v6;
    operator delete(v6);
    v2 = (_QWORD *)*((_QWORD *)this + 1);
  }
  if (v2)
  {
    *((_QWORD *)this + 2) = v2;
    operator delete(v2);
  }
}

void fst::internal::DenseSymbolMap::Rehash(fst::internal::DenseSymbolMap *this)
{
  char *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *__p[2];
  char v12;

  v2 = (char *)this + 40;
  std::vector<unsigned long>::resize((uint64_t)this + 40, (uint64_t)(*((_QWORD *)this + 6) - *((_QWORD *)this + 5)) >> 2);
  v4 = *(_QWORD **)v2;
  v3 = (_QWORD *)*((_QWORD *)v2 + 1);
  for (*((_QWORD *)v2 + 3) = (((uint64_t)v3 - *(_QWORD *)v2) >> 3) - 1; v4 != v3; ++v4)
    *v4 = *(_QWORD *)this;
  v5 = *((_QWORD *)this + 1);
  if (*((_QWORD *)this + 2) != v5)
  {
    v6 = 0;
    do
    {
      std::string::basic_string[abi:ne180100]<0>(__p, *(char **)(v5 + 8 * v6));
      v7 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)this + 32, (uint64_t)__p);
      v8 = *((_QWORD *)this + 8);
      if (v12 < 0)
        operator delete(__p[0]);
      v9 = v8 & v7;
      v10 = *((_QWORD *)this + 5);
      if (*(_QWORD *)(v10 + 8 * (v8 & v7)) != *(_QWORD *)this)
      {
        do
          v9 = *((_QWORD *)this + 8) & (v9 + 1);
        while (*(_QWORD *)(v10 + 8 * v9) != *(_QWORD *)this);
      }
      *(_QWORD *)(v10 + 8 * v9) = v6++;
      v5 = *((_QWORD *)this + 1);
    }
    while (v6 < (*((_QWORD *)this + 2) - v5) >> 3);
  }
}

uint64_t fst::internal::DenseSymbolMap::Find(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v2 = a2;
  v4 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)(a1 + 4), a2);
  v5 = a1[8];
  v6 = a1[5];
  v7 = *a1;
  v8 = v4 & v5;
  v9 = *(_QWORD *)(v6 + 8 * (v4 & v5));
  if (v9 == *a1)
    return v7;
  v10 = a1[1];
  if (*(char *)(v2 + 23) < 0)
    v2 = *(_QWORD *)v2;
  while (strcmp(*(const char **)(v10 + 8 * v9), (const char *)v2))
  {
    v8 = (v8 + 1) & v5;
    v9 = *(_QWORD *)(v6 + 8 * v8);
    if (v9 == v7)
      return v7;
  }
  return v9;
}

_QWORD *fst::SymbolTable::Copy(fst::SymbolTable *this)
{
  _QWORD *result;
  uint64_t v3;

  result = (_QWORD *)operator new();
  v3 = *((_QWORD *)this + 1);
  *result = &off_1E5D1AD68;
  result[1] = v3;
  ++*(_DWORD *)(v3 + 168);
  return result;
}

uint64_t fst::SymbolTable::AddSymbol(std::string *a1, uint64_t a2, uint64_t a3)
{
  fst::SymbolTable::MutateCheck(a1);
  return fst::SymbolTableImpl::AddSymbol(a1->__r_.__value_.__l.__size_, a2, a3);
}

uint64_t fst::SymbolTable::AddSymbol(std::string *a1, uint64_t a2)
{
  fst::SymbolTable::MutateCheck(a1);
  return fst::SymbolTableImpl::AddSymbol(a1->__r_.__value_.__l.__size_, a2, *(_QWORD *)(a1->__r_.__value_.__l.__size_ + 24));
}

uint64_t fst::SymbolTable::Name(fst::SymbolTable *this)
{
  return *((_QWORD *)this + 1);
}

void fst::SymbolTable::CheckSum(fst::SymbolTableImpl **this@<X0>, std::string *a2@<X8>)
{
  fst::SymbolTableImpl::CheckSum(this[1], a2);
}

void fst::SymbolTable::LabeledCheckSum(fst::SymbolTableImpl **this@<X0>, std::string *a2@<X8>)
{
  fst::SymbolTableImpl::LabeledCheckSum(this[1], a2);
}

BOOL fst::SymbolTable::Write(uint64_t a1, _QWORD *a2)
{
  return fst::SymbolTableImpl::Write(*(_QWORD *)(a1 + 8), a2);
}

_QWORD *fst::SymbolTable::Find@<X0>(fst::SymbolTableImpl **this@<X0>, int64_t a2@<X1>, _QWORD *a3@<X8>)
{
  return fst::SymbolTableImpl::Find(this[1], a2, a3);
}

uint64_t fst::SymbolTable::Find(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t result;
  uint64_t v4;
  BOOL v5;
  uint64_t v6;

  v2 = *(_QWORD **)(a1 + 8);
  result = fst::internal::DenseSymbolMap::Find(v2 + 5, a2);
  if (result != -1)
  {
    v4 = v2[4];
    v5 = __OFSUB__(result, v4);
    v6 = result - v4;
    if (v6 < 0 == v5)
      return *(_QWORD *)(v2[15] + 8 * v6);
  }
  return result;
}

uint64_t fst::SymbolTable::Find(fst::SymbolTableImpl **this, char *a2)
{
  return fst::SymbolTableImpl::Find(this[1], a2);
}

uint64_t fst::SymbolTable::AvailableKey(fst::SymbolTable *this)
{
  return *(_QWORD *)(*((_QWORD *)this + 1) + 24);
}

uint64_t fst::SymbolTable::NumSymbols(fst::SymbolTable *this)
{
  return (uint64_t)(*(_QWORD *)(*((_QWORD *)this + 1) + 56) - *(_QWORD *)(*((_QWORD *)this + 1) + 48)) >> 3;
}

unint64_t fst::SymbolTable::GetNthKey(fst::SymbolTableImpl **this, unint64_t a2)
{
  return fst::SymbolTableImpl::GetNthKey(this[1], a2);
}

_QWORD *fst::SymbolTable::GetNthSymbol@<X0>(fst::SymbolTableImpl **this@<X0>, unint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  return fst::SymbolTableImpl::GetNthSymbol(this[1], a2, a3);
}

uint64_t fst::SymbolTable::SupportsEfficientReverseSymbolLookup(fst::SymbolTable *this)
{
  return 1;
}

fst::CheckSummer *fst::CheckSummer::CheckSummer(fst::CheckSummer *this)
{
  *(_DWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  std::string::resize((std::string *)((char *)this + 8), 0x20uLL, 0);
  return this;
}

void sub_1AD8D42F4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 31) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

_QWORD *std::string::basic_string[abi:ne180100](_QWORD *__dst, void *__src, size_t __len)
{
  void *v6;
  size_t v7;
  size_t v8;

  if (__len >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (__len >= 0x17)
  {
    v7 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17)
      v7 = __len | 7;
    v8 = v7 + 1;
    v6 = operator new(v7 + 1);
    __dst[1] = __len;
    __dst[2] = v8 | 0x8000000000000000;
    *__dst = v6;
  }
  else
  {
    *((_BYTE *)__dst + 23) = __len;
    v6 = __dst;
    if (!__len)
      goto LABEL_9;
  }
  memmove(v6, __src, __len);
LABEL_9:
  *((_BYTE *)v6 + __len) = 0;
  return __dst;
}

std::string *fst::SymbolTableImpl::SymbolTableImpl(std::string *this, const fst::SymbolTableImpl *a2)
{
  __int128 v4;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *(_OWORD *)a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  *(_OWORD *)&this[1].__r_.__value_.__l.__data_ = *(_OWORD *)((char *)a2 + 24);
  fst::internal::DenseSymbolMap::DenseSymbolMap((fst::internal::DenseSymbolMap *)&this[1].__r_.__value_.__r.__words[2], (const fst::SymbolTableImpl *)((char *)a2 + 40));
  this[5].__r_.__value_.__r.__words[0] = 0;
  this[5].__r_.__value_.__l.__size_ = 0;
  this[5].__r_.__value_.__r.__words[2] = 0;
  std::vector<long long>::__init_with_size[abi:ne180100]<long long *,long long *>(this[5].__r_.__value_.__r.__words, *((const void **)a2 + 15), *((_QWORD *)a2 + 16), (uint64_t)(*((_QWORD *)a2 + 16) - *((_QWORD *)a2 + 15)) >> 3);
  std::map<long long,long long>::map[abi:ne180100]((uint64_t *)&this[6], (uint64_t)a2 + 144);
  LODWORD(this[7].__r_.__value_.__l.__data_) = 1;
  this[7].__r_.__value_.__s.__data_[4] = 0;
  *(_OWORD *)&this[7].__r_.__value_.__r.__words[1] = 0u;
  *(_OWORD *)&this[8].__r_.__value_.__l.__data_ = 0u;
  *(_OWORD *)&this[8].__r_.__value_.__r.__words[2] = 0u;
  return this;
}

void sub_1AD8D4468(_Unwind_Exception *a1)
{
  uint64_t v1;
  fst::internal::DenseSymbolMap *v2;
  void **v3;
  void *v5;

  v5 = *v3;
  if (*v3)
  {
    *(_QWORD *)(v1 + 128) = v5;
    operator delete(v5);
  }
  fst::internal::DenseSymbolMap::~DenseSymbolMap(v2);
  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(a1);
}

uint64_t *std::map<long long,long long>::map[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  std::map<long long,long long>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<long long,long long>,std::__tree_node<std::__value_type<long long,long long>,void *> *,long>>>(a1, *(_QWORD **)a2, (_QWORD *)(a2 + 8));
  return a1;
}

void sub_1AD8D44E8(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<int>::destroy(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::map<long long,long long>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<long long,long long>,std::__tree_node<std::__value_type<long long,long long>,void *> *,long>>>(uint64_t *result, _QWORD *a2, _QWORD *a3)
{
  _QWORD *v4;
  uint64_t **v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  BOOL v9;

  if (a2 != a3)
  {
    v4 = a2;
    v5 = (uint64_t **)result;
    v6 = result + 1;
    do
    {
      result = std::__tree<std::__value_type<long long,long long>,std::__map_value_compare<long long,std::__value_type<long long,long long>,std::less<long long>,true>,std::allocator<std::__value_type<long long,long long>>>::__emplace_hint_unique_key_args<long long,std::pair<long long const,long long> const&>(v5, v6, v4 + 4, (_OWORD *)v4 + 2);
      v7 = (_QWORD *)v4[1];
      if (v7)
      {
        do
        {
          v8 = v7;
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          v8 = (_QWORD *)v4[2];
          v9 = *v8 == (_QWORD)v4;
          v4 = v8;
        }
        while (!v9);
      }
      v4 = v8;
    }
    while (v8 != a3);
  }
  return result;
}

uint64_t *std::__tree<std::__value_type<long long,long long>,std::__map_value_compare<long long,std::__value_type<long long,long long>,std::less<long long>,true>,std::allocator<std::__value_type<long long,long long>>>::__emplace_hint_unique_key_args<long long,std::pair<long long const,long long> const&>(uint64_t **a1, _QWORD *a2, uint64_t *a3, _OWORD *a4)
{
  void **v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t v10;
  uint64_t v11;

  v6 = (void **)std::__tree<std::__value_type<long long,long long>,std::__map_value_compare<long long,std::__value_type<long long,long long>,std::less<long long>,true>,std::allocator<std::__value_type<long long,long long>>>::__find_equal<long long>(a1, a2, &v11, &v10, a3);
  v7 = (uint64_t *)*v6;
  if (!*v6)
  {
    v8 = (uint64_t **)v6;
    v7 = (uint64_t *)operator new(0x30uLL);
    *((_OWORD *)v7 + 2) = *a4;
    std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at(a1, v11, v8, v7);
  }
  return v7;
}

_QWORD *std::__tree<std::__value_type<long long,long long>,std::__map_value_compare<long long,std::__value_type<long long,long long>,std::less<long long>,true>,std::allocator<std::__value_type<long long,long long>>>::__find_equal<long long>(_QWORD *a1, _QWORD *a2, _QWORD *a3, _QWORD *a4, uint64_t *a5)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  BOOL v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;

  v5 = a1 + 1;
  if (a1 + 1 == a2 || (v6 = *a5, v7 = a2[4], *a5 < v7))
  {
    v8 = *a2;
    if ((_QWORD *)*a1 == a2)
    {
      v10 = a2;
LABEL_17:
      if (v8)
      {
        *a3 = v10;
        return v10 + 1;
      }
      else
      {
        *a3 = a2;
        return a2;
      }
    }
    if (v8)
    {
      v9 = (_QWORD *)*a2;
      do
      {
        v10 = v9;
        v9 = (_QWORD *)v9[1];
      }
      while (v9);
    }
    else
    {
      v13 = a2;
      do
      {
        v10 = (_QWORD *)v13[2];
        v14 = *v10 == (_QWORD)v13;
        v13 = v10;
      }
      while (v14);
    }
    v15 = *a5;
    if (v10[4] < *a5)
      goto LABEL_17;
    v16 = (_QWORD *)*v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          v17 = v16;
          v18 = v16[4];
          if (v15 >= v18)
            break;
          v16 = (_QWORD *)*v17;
          v5 = v17;
          if (!*v17)
            goto LABEL_29;
        }
        if (v18 >= v15)
          break;
        v5 = v17 + 1;
        v16 = (_QWORD *)v17[1];
      }
      while (v16);
    }
    else
    {
      v17 = a1 + 1;
    }
LABEL_29:
    *a3 = v17;
    return v5;
  }
  if (v7 >= v6)
  {
    *a3 = a2;
    *a4 = a2;
    return a4;
  }
  v11 = a2[1];
  if (v11)
  {
    v12 = (_QWORD *)a2[1];
    do
    {
      a4 = v12;
      v12 = (_QWORD *)*v12;
    }
    while (v12);
  }
  else
  {
    v19 = a2;
    do
    {
      a4 = (_QWORD *)v19[2];
      v14 = *a4 == (_QWORD)v19;
      v19 = a4;
    }
    while (!v14);
  }
  if (a4 != v5 && v6 >= a4[4])
  {
    v20 = (_QWORD *)*v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          v21 = v20;
          v22 = v20[4];
          if (v6 >= v22)
            break;
          v20 = (_QWORD *)*v21;
          v5 = v21;
          if (!*v21)
            goto LABEL_48;
        }
        if (v22 >= v6)
          break;
        v5 = v21 + 1;
        v20 = (_QWORD *)v21[1];
      }
      while (v20);
    }
    else
    {
      v21 = a1 + 1;
    }
LABEL_48:
    *a3 = v21;
    return v5;
  }
  if (v11)
  {
    *a3 = a4;
  }
  else
  {
    *a3 = a2;
    return a2 + 1;
  }
  return a4;
}

void fst::SymbolTableImpl::CheckSum(fst::SymbolTableImpl *this@<X0>, std::string *a2@<X8>)
{
  fst::SymbolTableImpl::MaybeRecomputeCheckSum(this);
  if (*((char *)this + 199) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *((const std::string::value_type **)this + 22), *((_QWORD *)this + 23));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *((_OWORD *)this + 11);
    a2->__r_.__value_.__r.__words[2] = *((_QWORD *)this + 24);
  }
}

void fst::SymbolTableImpl::LabeledCheckSum(fst::SymbolTableImpl *this@<X0>, std::string *a2@<X8>)
{
  fst::SymbolTableImpl::MaybeRecomputeCheckSum(this);
  if (*((char *)this + 223) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *((const std::string::value_type **)this + 25), *((_QWORD *)this + 26));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 200);
    a2->__r_.__value_.__r.__words[2] = *((_QWORD *)this + 27);
  }
}

_QWORD *fst::SymbolTableImpl::Find@<X0>(fst::SymbolTableImpl *this@<X0>, int64_t a2@<X1>, _QWORD *a3@<X8>)
{
  _QWORD *v4;
  _QWORD *v5;
  int64_t v6;
  BOOL v7;
  _QWORD *v8;
  uint64_t v9;
  char *v10;
  size_t v11;

  if (a2 < 0 || *((_QWORD *)this + 4) <= a2)
  {
    v4 = (_QWORD *)*((_QWORD *)this + 19);
    if (!v4)
      return std::string::basic_string[abi:ne180100]<0>(a3, "");
    v5 = (_QWORD *)((char *)this + 152);
    do
    {
      v6 = v4[4];
      v7 = v6 < a2;
      if (v6 >= a2)
        v8 = v4;
      else
        v8 = v4 + 1;
      if (!v7)
        v5 = v4;
      v4 = (_QWORD *)*v8;
    }
    while (*v8);
    if (v5 == (_QWORD *)((char *)this + 152))
      return std::string::basic_string[abi:ne180100]<0>(a3, "");
    if (v5[4] > a2)
      return std::string::basic_string[abi:ne180100]<0>(a3, "");
    a2 = v5[5];
    if (a2 < 0)
      return std::string::basic_string[abi:ne180100]<0>(a3, "");
  }
  v9 = *((_QWORD *)this + 6);
  if (a2 >= (unint64_t)((*((_QWORD *)this + 7) - v9) >> 3))
    return std::string::basic_string[abi:ne180100]<0>(a3, "");
  v10 = *(char **)(v9 + 8 * a2);
  v11 = strlen(v10);
  return std::string::basic_string[abi:ne180100](a3, v10, v11);
}

uint64_t fst::SymbolTableImpl::Find(fst::SymbolTableImpl *this, char *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;
  void *__p[2];
  char v10;

  std::string::basic_string[abi:ne180100]<0>(__p, a2);
  v3 = fst::internal::DenseSymbolMap::Find((uint64_t *)this + 5, (uint64_t)__p);
  v4 = v3;
  if (v3 != -1)
  {
    v5 = *((_QWORD *)this + 4);
    v6 = __OFSUB__(v3, v5);
    v7 = v3 - v5;
    if (v7 < 0 == v6)
      v4 = *(_QWORD *)(*((_QWORD *)this + 15) + 8 * v7);
  }
  if (v10 < 0)
    operator delete(__p[0]);
  return v4;
}

_QWORD *fst::SymbolTableImpl::GetNthSymbol@<X0>(fst::SymbolTableImpl *this@<X0>, unint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v4;
  char *v6;
  size_t v7;

  if ((a2 & 0x8000000000000000) != 0)
    return std::string::basic_string[abi:ne180100]<0>(a3, "");
  v4 = *((_QWORD *)this + 6);
  if (a2 >= (*((_QWORD *)this + 7) - v4) >> 3 || *((_QWORD *)this + 4) > (int64_t)a2)
    return std::string::basic_string[abi:ne180100]<0>(a3, "");
  v6 = *(char **)(v4 + 8 * a2);
  v7 = strlen(v6);
  return std::string::basic_string[abi:ne180100](a3, v6, v7);
}

_QWORD *std::vector<long long>::__init_with_size[abi:ne180100]<long long *,long long *>(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<kaldi::CuWorkspace *>::__vallocate[abi:ne180100](result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1AD8D4A40(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *std::__tree<std::__value_type<long long,long long>,std::__map_value_compare<long long,std::__value_type<long long,long long>,std::less<long long>,true>,std::allocator<std::__value_type<long long,long long>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>(uint64_t **a1, uint64_t *a2, uint64_t a3, uint64_t **a4)
{
  uint64_t *v6;
  uint64_t **v7;
  uint64_t v8;
  uint64_t **v9;
  uint64_t v10;
  uint64_t *v11;

  v7 = a1 + 1;
  v6 = a1[1];
  if (v6)
  {
    v8 = *a2;
    while (1)
    {
      while (1)
      {
        v9 = (uint64_t **)v6;
        v10 = v6[4];
        if (v8 >= v10)
          break;
        v6 = *v9;
        v7 = v9;
        if (!*v9)
          goto LABEL_10;
      }
      if (v10 >= v8)
        break;
      v6 = v9[1];
      if (!v6)
      {
        v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v9 = a1 + 1;
LABEL_10:
    v11 = (uint64_t *)operator new(0x30uLL);
    v11[4] = **a4;
    v11[5] = 0;
    std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at(a1, (uint64_t)v9, v7, v11);
    return v11;
  }
  return (uint64_t *)v9;
}

_QWORD *std::vector<long long>::vector(_QWORD *a1, unint64_t a2)
{
  char *v4;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<kaldi::CuWorkspace *>::__vallocate[abi:ne180100](a1, a2);
    v4 = (char *)a1[1];
    bzero(v4, 8 * a2);
    a1[1] = &v4[8 * a2];
  }
  return a1;
}

void sub_1AD8D4B70(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *std::vector<char const*>::vector(_QWORD *a1, unint64_t a2)
{
  char *v4;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<kaldi::CuWorkspace *>::__vallocate[abi:ne180100](a1, a2);
    v4 = (char *)a1[1];
    bzero(v4, 8 * a2);
    a1[1] = &v4[8 * a2];
  }
  return a1;
}

void sub_1AD8D4BE4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void quasar::SimpleLmeEnumerationsProcessorBase::~SimpleLmeEnumerationsProcessorBase(quasar::SimpleLmeEnumerationsProcessorBase *this)
{
  *(_QWORD *)this = off_1E5D3B210;
  std::__tree<int>::destroy((uint64_t)this + 144, *((_QWORD **)this + 19));
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this + 56);
}

void quasar::SimpleLmeEnumerationsProcessorBase::add(uint64_t a1, char **a2, uint64_t **a3)
{
  char *v5;
  char *v6;
  uint64_t *v7;
  uint64_t *v8;
  const std::string *v9;
  BOOL v10;
  float v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  int v23;
  BOOL v24;
  int *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  _QWORD *v37;
  int v38;
  const std::string::value_type *v39;
  std::string::size_type v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  int v44;
  uint64_t *v45;
  BOOL v46;
  char v47;
  uint64_t *v48;
  char *v49;
  char **v50;
  uint64_t *v51;
  uint64_t *v52;
  void *v53[2];
  char v54;
  std::string v55;
  void *__p[2];
  char v57;
  void *v58;
  char v59;
  uint64_t *v60[3];
  char **v61;
  char *v62[2];
  uint64_t v63[3];
  std::string v64;
  _QWORD v65[3];
  char **v66;
  char *v67[2];
  __int128 *v68[2];

  v67[0] = 0;
  v67[1] = 0;
  v66 = v67;
  v5 = *a2;
  v6 = a2[1];
  if (*a2 != v6)
  {
    do
    {
      __p[0] = v5;
      std::__tree<std::__value_type<std::string,quasar::LmeDataFactoryBase::Word const*>,std::__map_value_compare<std::string,std::__value_type<std::string,quasar::LmeDataFactoryBase::Word const*>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,quasar::LmeDataFactoryBase::Word const*>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)&v66, (const void **)v5, (uint64_t)&std::piecewise_construct, (__int128 **)__p)[7] = (uint64_t)v5;
      v5 += 80;
    }
    while (v5 != v6);
  }
  v8 = *a3;
  v7 = a3[1];
  if (*a3 != v7)
  {
    v51 = a3[1];
    do
    {
      v9 = (const std::string *)*v8;
      if (0xAAAAAAAAAAAAAAABLL * ((v8[1] - *v8) >> 3) >= 2)
      {
        if (*(int *)(a1 + 116) < 1)
        {
          v10 = 1;
        }
        else
        {
          v10 = (int)quasar::SimpleLmeEnumerationsProcessorBase::getMinimumNumberOfPhones(a1, v8, (uint64_t)&v66) >= *(_DWORD *)(a1 + 116);
          v9 = (const std::string *)*v8;
        }
        v11 = std::stof(v9, 0);
        std::vector<std::vector<quasar::PronChoice>>::vector(v65, -1 - 0x5555555555555555 * ((v8[1] - *v8) >> 3));
        memset(&v64, 0, sizeof(v64));
        v12 = *v8;
        if (0xAAAAAAAAAAAAAAABLL * ((v8[1] - *v8) >> 3) < 2)
        {
LABEL_43:
          std::string::basic_string[abi:ne180100]<0>(__p, ".");
          quasar::PronCombinator::operator()((int *)(a1 + 136), v65, v63);
          if (v57 < 0)
            operator delete(__p[0]);
          v62[0] = 0;
          v62[1] = 0;
          v61 = v62;
          v41 = v63[0];
          v42 = v63[1];
          while (v41 != v42)
          {
            v68[0] = (__int128 *)(v41 + 8);
            v43 = *((unsigned __int8 *)std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)&v61, (const void **)(v41 + 8), (uint64_t)&std::piecewise_construct, v68)+ 56);
            v44 = *(_DWORD *)v41;
            v68[0] = (__int128 *)(v41 + 8);
            v45 = std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)&v61, (const void **)(v41 + 8), (uint64_t)&std::piecewise_construct, v68);
            if (v43)
              v46 = 0;
            else
              v46 = v44 == 2;
            v47 = !v46;
            *((_BYTE *)v45 + 56) = v47;
            v41 += 40;
          }
          if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0)
            std::string::__init_copy_ctor_external(&v55, v64.__r_.__value_.__l.__data_, v64.__r_.__value_.__l.__size_);
          else
            v55 = v64;
          std::string::basic_string[abi:ne180100]<0>(v53, "");
          quasar::LmeDataFactoryBase::Word::Word(__p, &v55, v53, 0);
          if (v54 < 0)
            operator delete(v53[0]);
          if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v55.__r_.__value_.__l.__data_);
          v48 = (uint64_t *)v61;
          if (v61 != v62)
          {
            do
            {
              quasar::LmeDataFactoryBase::PronSet::insert(v60, 2 * (*((_BYTE *)v48 + 56) == 0), (uint64_t)(v48 + 4), 0.0);
              v49 = (char *)v48[1];
              if (v49)
              {
                do
                {
                  v50 = (char **)v49;
                  v49 = *(char **)v49;
                }
                while (v49);
              }
              else
              {
                do
                {
                  v50 = (char **)v48[2];
                  v24 = *v50 == (char *)v48;
                  v48 = (uint64_t *)v50;
                }
                while (!v24);
              }
              v48 = (uint64_t *)v50;
            }
            while (v50 != v62);
          }
          *(float *)(a1 + 168) = v11 + *(float *)(a1 + 168);
          (*(void (**)(uint64_t, void **, float))(*(_QWORD *)a1 + 32))(a1, __p, v11);
          std::__tree<std::__value_type<std::pair<quasar::PronType,std::string>,float>,std::__map_value_compare<std::pair<quasar::PronType,std::string>,std::__value_type<std::pair<quasar::PronType,std::string>,float>,std::less<std::pair<quasar::PronType,std::string>>,true>,std::allocator<std::__value_type<std::pair<quasar::PronType,std::string>,float>>>::destroy((uint64_t)v60, (char *)v60[1]);
          if (v59 < 0)
            operator delete(v58);
          if (v57 < 0)
            operator delete(__p[0]);
          std::__tree<std::string>::destroy((uint64_t)&v61, v62[0]);
          __p[0] = v63;
          std::vector<quasar::PronChoice>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
        }
        else
        {
          v13 = 1;
          v52 = v8;
          while (1)
          {
            v14 = v12 + 24 * v13;
            v15 = std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::find<std::string>((uint64_t)&v66, (const void **)v14);
            v16 = v15;
            if (v67 == (char **)v15)
              break;
            v17 = v65[0];
            v18 = quasar::LmeDataFactoryBase::PronSet::size((quasar::LmeDataFactoryBase::PronSet *)(*(_QWORD *)(v15 + 56)
                                                                                                  + 56));
            v19 = v13 - 1;
            std::vector<quasar::PronChoice>::reserve((uint64_t *)(v17 + 24 * (v13 - 1)), v18);
            quasar::Bitmap::~Bitmap((quasar::Bitmap *)(*(_QWORD *)(v16 + 56) + 56));
            v22 = v20 + 1;
            v21 = (_QWORD *)*v20;
            if ((_QWORD *)*v20 != v20 + 1)
            {
              do
              {
                if (quasar::pronTypeMatchesPronRequest(*((_DWORD *)v21 + 8), *(_DWORD *)(a1 + 128)))
                {
                  v23 = *((_DWORD *)v21 + 8);
                  if (v10 || (v23 != 2 ? (v24 = v23 == 5) : (v24 = 1), !v24))
                  {
                    v25 = (int *)(v21 + 8);
                    if ((v23 & 0xFFFFFFFE) == 4)
                    {
                      LODWORD(__p[0]) = 3;
                      v26 = v65[0] + 24 * v19;
                      v29 = *(_QWORD *)(v26 + 8);
                      v28 = (uint64_t *)(v26 + 8);
                      v27 = v29;
                      if (v29 >= v28[1])
                      {
                        v30 = std::vector<quasar::PronChoice>::__emplace_back_slow_path<quasar::PronType,std::string const&,float const&>((uint64_t *)(v65[0] + 24 * v19), (int *)__p, (uint64_t)(v21 + 5), v25);
                      }
                      else
                      {
                        std::allocator<quasar::PronChoice>::construct[abi:ne180100]<quasar::PronChoice,quasar::PronType,std::string const&,float const&>((uint64_t)(v28 + 1), v27, (int *)__p, (uint64_t)(v21 + 5), v25);
                        v30 = v27 + 40;
                        *v28 = v27 + 40;
                      }
                      *v28 = v30;
                    }
                    else
                    {
                      v31 = v65[0] + 24 * v19;
                      v34 = *(_QWORD *)(v31 + 8);
                      v32 = (uint64_t *)(v31 + 8);
                      v33 = v34;
                      if (v34 >= v32[1])
                      {
                        v35 = std::vector<quasar::PronChoice>::__emplace_back_slow_path<quasar::PronType const&,std::string const&,float const&>((uint64_t *)(v65[0] + 24 * v19), (int *)v21 + 8, (uint64_t)(v21 + 5), (int *)v21 + 16);
                      }
                      else
                      {
                        std::allocator<quasar::PronChoice>::construct[abi:ne180100]<quasar::PronChoice,quasar::PronType const&,std::string const&,float const&>((uint64_t)(v32 + 1), v33, (int *)v21 + 8, (uint64_t)(v21 + 5), v25);
                        v35 = v33 + 40;
                        *v32 = v33 + 40;
                      }
                      *v32 = v35;
                    }
                  }
                }
                v36 = (_QWORD *)v21[1];
                if (v36)
                {
                  do
                  {
                    v37 = v36;
                    v36 = (_QWORD *)*v36;
                  }
                  while (v36);
                }
                else
                {
                  do
                  {
                    v37 = (_QWORD *)v21[2];
                    v24 = *v37 == (_QWORD)v21;
                    v21 = v37;
                  }
                  while (!v24);
                }
                v21 = v37;
              }
              while (v37 != v22);
            }
            if (v13 != 1)
              std::string::append(&v64, "~w00");
            v38 = *(char *)(v14 + 23);
            if (v38 >= 0)
              v39 = (const std::string::value_type *)v14;
            else
              v39 = *(const std::string::value_type **)v14;
            if (v38 >= 0)
              v40 = *(unsigned __int8 *)(v14 + 23);
            else
              v40 = *(_QWORD *)(v14 + 8);
            std::string::append(&v64, v39, v40);
            ++v13;
            v8 = v52;
            v12 = *v52;
            if (0xAAAAAAAAAAAAAAABLL * ((v52[1] - *v52) >> 3) <= v13)
              goto LABEL_43;
          }
        }
        if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v64.__r_.__value_.__l.__data_);
        __p[0] = v65;
        std::vector<std::vector<quasar::PronChoice>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
        v7 = v51;
      }
      v8 += 3;
    }
    while (v8 != v7);
  }
  std::__tree<std::string>::destroy((uint64_t)&v66, v67[0]);
}

void sub_1AD8D51D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,char *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,char a42,char *a43,uint64_t a44,char a45)
{
  uint64_t v45;

  std::__tree<std::string>::destroy((uint64_t)&a42, a43);
  a29 = &a45;
  std::vector<quasar::PronChoice>::__destroy_vector::operator()[abi:ne180100]((void ***)&a29);
  if (*(char *)(v45 - 169) < 0)
    operator delete(*(void **)(v45 - 192));
  a29 = (char *)(v45 - 168);
  std::vector<std::vector<quasar::PronChoice>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a29);
  std::__tree<std::string>::destroy(v45 - 144, *(char **)(v45 - 136));
  _Unwind_Resume(a1);
}

uint64_t quasar::SimpleLmeEnumerationsProcessorBase::getMinimumNumberOfPhones(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  char v14;
  int v15;
  uint64_t v16;
  unsigned __int8 *v17;
  uint64_t v18;
  int i;
  int v20;
  int v21;
  _QWORD *v22;
  _QWORD *v23;
  BOOL v24;

  v3 = *a2;
  if (0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 3) >= 2)
  {
    LODWORD(v6) = 0;
    v7 = a3 + 8;
    v8 = 1;
    while (1)
    {
      v9 = std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::find<std::string>(a3, (const void **)(v3 + 24 * v8));
      if (v7 == v9)
        break;
      quasar::Bitmap::~Bitmap((quasar::Bitmap *)(*(_QWORD *)(v9 + 56) + 56));
      v13 = (_QWORD *)*v10;
      v11 = v10 + 1;
      v12 = v13;
      if (v13 == v11)
      {
        v15 = 0;
      }
      else
      {
        v14 = 0;
        v15 = 0x7FFFFFFF;
        do
        {
          if (*((_DWORD *)v12 + 8) == 1)
          {
            v16 = *((unsigned __int8 *)v12 + 63);
            if (*((char *)v12 + 63) < 0)
            {
              v17 = (unsigned __int8 *)v12[5];
              v18 = v12[6];
            }
            else
            {
              v17 = (unsigned __int8 *)(v12 + 5);
              v18 = *((unsigned __int8 *)v12 + 63);
            }
            for (i = 0; v18; --v18)
            {
              v20 = *v17++;
              if (v20 == 46)
                ++i;
            }
            if ((v16 & 0x80) != 0)
              v16 = v12[6];
            if (v16)
              v21 = i + 1;
            else
              v21 = i;
            if (v15 >= v21)
              v15 = v21;
            v14 = 1;
          }
          v22 = (_QWORD *)v12[1];
          if (v22)
          {
            do
            {
              v23 = v22;
              v22 = (_QWORD *)*v22;
            }
            while (v22);
          }
          else
          {
            do
            {
              v23 = (_QWORD *)v12[2];
              v24 = *v23 == (_QWORD)v12;
              v12 = v23;
            }
            while (!v24);
          }
          v12 = v23;
        }
        while (v23 != v11);
        if ((v14 & 1) == 0)
          v15 = 0;
      }
      v6 = (v15 + v6);
      ++v8;
      v3 = *a2;
      if (0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 3) <= v8)
        return v6;
    }
  }
  return 0;
}

uint64_t std::vector<quasar::PronChoice>::reserve(uint64_t *a1, unint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[5];

  v4 = a1[2];
  result = (uint64_t)(a1 + 2);
  if (0xCCCCCCCCCCCCCCCDLL * ((v4 - *a1) >> 3) < a2)
  {
    if (a2 >= 0x666666666666667)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v5 = a1[1] - *a1;
    v7[4] = result;
    v7[0] = std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::PronChoice>>(result, a2);
    v7[1] = v7[0] + v5;
    v7[2] = v7[0] + v5;
    v7[3] = v7[0] + 40 * v6;
    std::vector<quasar::PronChoice>::__swap_out_circular_buffer(a1, v7);
    return std::__split_buffer<quasar::PronChoice>::~__split_buffer((uint64_t)v7);
  }
  return result;
}

void sub_1AD8D54DC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<quasar::PronChoice>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<std::__value_type<std::string,quasar::LmeDataFactoryBase::Word const*>,std::__map_value_compare<std::string,std::__value_type<std::string,quasar::LmeDataFactoryBase::Word const*>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,quasar::LmeDataFactoryBase::Word const*>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t **a1, const void **a2, uint64_t a3, __int128 **a4)
{
  uint64_t **v6;
  uint64_t *result;
  uint64_t *v8;
  uint64_t v9;

  v6 = (uint64_t **)std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__find_equal<std::string>((uint64_t)a1, &v9, a2);
  result = *v6;
  if (!*v6)
  {
    std::__tree<std::__value_type<std::string,quasar::LmeDataFactoryBase::Word const*>,std::__map_value_compare<std::string,std::__value_type<std::string,quasar::LmeDataFactoryBase::Word const*>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,quasar::LmeDataFactoryBase::Word const*>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)a1, a4, (uint64_t)&v8);
    std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at(a1, v9, v6, v8);
    return v8;
  }
  return result;
}

void std::__tree<std::__value_type<std::string,quasar::LmeDataFactoryBase::Word const*>,std::__map_value_compare<std::string,std::__value_type<std::string,quasar::LmeDataFactoryBase::Word const*>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,quasar::LmeDataFactoryBase::Word const*>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1@<X0>, __int128 **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5;
  char *v6;
  std::string *v7;
  __int128 *v8;
  __int128 v9;

  v5 = a1 + 8;
  v6 = (char *)operator new(0x40uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  v7 = (std::string *)(v6 + 32);
  v8 = *a2;
  if (*((char *)*a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)v8, *((_QWORD *)v8 + 1));
  }
  else
  {
    v9 = *v8;
    *((_QWORD *)v6 + 6) = *((_QWORD *)v8 + 2);
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v9;
  }
  *((_QWORD *)v6 + 7) = 0;
  *(_BYTE *)(a3 + 16) = 1;
}

void sub_1AD8D560C(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void **v2;
  uint64_t v3;

  *v1 = 0;
  std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,double>,void *>>>::operator()[abi:ne180100](v3, v2);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<std::vector<quasar::PronChoice>>::vector(_QWORD *a1, unint64_t a2)
{
  char *v4;
  size_t v5;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<std::string>::__vallocate[abi:ne180100](a1, a2);
    v4 = (char *)a1[1];
    v5 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v4, v5);
    a1[1] = &v4[v5];
  }
  return a1;
}

void sub_1AD8D56B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<std::vector<quasar::PronChoice>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void std::vector<std::vector<quasar::PronChoice>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void **v2;
  void **v4;
  void *v5;
  void **v6;

  v1 = *a1;
  v2 = (void **)**a1;
  if (v2)
  {
    v4 = (void **)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 3;
        v6 = v4;
        std::vector<quasar::PronChoice>::__destroy_vector::operator()[abi:ne180100](&v6);
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t std::vector<quasar::PronChoice>::__emplace_back_slow_path<quasar::PronType,std::string const&,float const&>(uint64_t *a1, int *a2, uint64_t a3, int *a4)
{
  unint64_t v5;
  unint64_t v6;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t *v18;

  v5 = 0xCCCCCCCCCCCCCCCDLL * ((a1[1] - *a1) >> 3);
  v6 = v5 + 1;
  if (v5 + 1 > 0x666666666666666)
    std::vector<int>::__throw_length_error[abi:ne180100]();
  if (0x999999999999999ALL * ((a1[2] - *a1) >> 3) > v6)
    v6 = 0x999999999999999ALL * ((a1[2] - *a1) >> 3);
  if (0xCCCCCCCCCCCCCCCDLL * ((a1[2] - *a1) >> 3) >= 0x333333333333333)
    v10 = 0x666666666666666;
  else
    v10 = v6;
  v18 = a1 + 2;
  if (v10)
    v11 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::PronChoice>>((uint64_t)(a1 + 2), v10);
  else
    v11 = 0;
  v14 = v11;
  v15 = &v11[40 * v5];
  v17 = &v11[40 * v10];
  std::allocator<quasar::PronChoice>::construct[abi:ne180100]<quasar::PronChoice,quasar::PronType,std::string const&,float const&>((uint64_t)(a1 + 2), (uint64_t)v15, a2, a3, a4);
  v16 = v15 + 40;
  std::vector<quasar::PronChoice>::__swap_out_circular_buffer(a1, &v14);
  v12 = a1[1];
  std::__split_buffer<quasar::PronChoice>::~__split_buffer((uint64_t)&v14);
  return v12;
}

void sub_1AD8D5848(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<quasar::PronChoice>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::allocator<quasar::PronChoice>::construct[abi:ne180100]<quasar::PronChoice,quasar::PronType,std::string const&,float const&>(uint64_t a1, uint64_t a2, int *a3, uint64_t a4, int *a5)
{
  int v7;
  int v8;
  std::string *v9;
  int v10;
  std::string __p;

  v7 = *a3;
  if (*(char *)(a4 + 23) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a4, *(_QWORD *)(a4 + 8));
  else
    __p = *(std::string *)a4;
  v8 = *a5;
  *(_DWORD *)a2 = v7;
  v9 = (std::string *)(a2 + 8);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v9, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    v10 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
    *(_DWORD *)(a2 + 32) = v8;
    if (v10 < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  else
  {
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
    *(_QWORD *)(a2 + 24) = *((_QWORD *)&__p.__r_.__value_.__l + 2);
    *(_DWORD *)(a2 + 32) = v8;
  }
}

void sub_1AD8D5908(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t std::vector<quasar::PronChoice>::__emplace_back_slow_path<quasar::PronType const&,std::string const&,float const&>(uint64_t *a1, int *a2, uint64_t a3, int *a4)
{
  unint64_t v5;
  unint64_t v6;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t *v18;

  v5 = 0xCCCCCCCCCCCCCCCDLL * ((a1[1] - *a1) >> 3);
  v6 = v5 + 1;
  if (v5 + 1 > 0x666666666666666)
    std::vector<int>::__throw_length_error[abi:ne180100]();
  if (0x999999999999999ALL * ((a1[2] - *a1) >> 3) > v6)
    v6 = 0x999999999999999ALL * ((a1[2] - *a1) >> 3);
  if (0xCCCCCCCCCCCCCCCDLL * ((a1[2] - *a1) >> 3) >= 0x333333333333333)
    v10 = 0x666666666666666;
  else
    v10 = v6;
  v18 = a1 + 2;
  if (v10)
    v11 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::PronChoice>>((uint64_t)(a1 + 2), v10);
  else
    v11 = 0;
  v14 = v11;
  v15 = &v11[40 * v5];
  v17 = &v11[40 * v10];
  std::allocator<quasar::PronChoice>::construct[abi:ne180100]<quasar::PronChoice,quasar::PronType const&,std::string const&,float const&>((uint64_t)(a1 + 2), (uint64_t)v15, a2, a3, a4);
  v16 = v15 + 40;
  std::vector<quasar::PronChoice>::__swap_out_circular_buffer(a1, &v14);
  v12 = a1[1];
  std::__split_buffer<quasar::PronChoice>::~__split_buffer((uint64_t)&v14);
  return v12;
}

void sub_1AD8D5A34(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<quasar::PronChoice>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::allocator<quasar::PronChoice>::construct[abi:ne180100]<quasar::PronChoice,quasar::PronType const&,std::string const&,float const&>(uint64_t a1, uint64_t a2, int *a3, uint64_t a4, int *a5)
{
  int v7;
  int v8;
  std::string *v9;
  int v10;
  std::string __p;

  v7 = *a3;
  if (*(char *)(a4 + 23) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a4, *(_QWORD *)(a4 + 8));
  else
    __p = *(std::string *)a4;
  v8 = *a5;
  *(_DWORD *)a2 = v7;
  v9 = (std::string *)(a2 + 8);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v9, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    v10 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
    *(_DWORD *)(a2 + 32) = v8;
    if (v10 < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  else
  {
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
    *(_QWORD *)(a2 + 24) = *((_QWORD *)&__p.__r_.__value_.__l + 2);
    *(_DWORD *)(a2 + 32) = v8;
  }
}

void sub_1AD8D5AF4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t *std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t **a1, const void **a2, uint64_t a3, __int128 **a4)
{
  uint64_t **v6;
  uint64_t *result;
  uint64_t *v8;
  uint64_t v9;

  v6 = (uint64_t **)std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__find_equal<std::string>((uint64_t)a1, &v9, a2);
  result = *v6;
  if (!*v6)
  {
    std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)a1, a4, (uint64_t)&v8);
    std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at(a1, v9, v6, v8);
    return v8;
  }
  return result;
}

void std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1@<X0>, __int128 **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5;
  char *v6;
  std::string *v7;
  __int128 *v8;
  __int128 v9;

  v5 = a1 + 8;
  v6 = (char *)operator new(0x40uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  v7 = (std::string *)(v6 + 32);
  v8 = *a2;
  if (*((char *)*a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)v8, *((_QWORD *)v8 + 1));
  }
  else
  {
    v9 = *v8;
    *((_QWORD *)v6 + 6) = *((_QWORD *)v8 + 2);
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v9;
  }
  v6[56] = 0;
  *(_BYTE *)(a3 + 16) = 1;
}

void sub_1AD8D5C2C(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void **v2;
  uint64_t v3;

  *v1 = 0;
  std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,double>,void *>>>::operator()[abi:ne180100](v3, v2);
  _Unwind_Resume(a1);
}

_QWORD *fst::ArcInfo::ArcInfo(_QWORD *this)
{
  *this = &off_1E5D22568;
  return this;
}

void fst::ArcInfo::~ArcInfo(fst::ArcInfo *this)
{
  JUMPOUT(0x1AF44D190);
}

uint64_t fst::BackoffArcInfo::BackoffArcInfo(uint64_t this)
{
  *(_QWORD *)this = &off_1E5D1D0A8;
  *(_DWORD *)(this + 8) = 0;
  return this;
}

void fst::BackoffArcInfo::~BackoffArcInfo(fst::BackoffArcInfo *this)
{
  JUMPOUT(0x1AF44D190);
}

double fst::InterpArcInfo::InterpArcInfo(fst::InterpArcInfo *this)
{
  double result;

  *(_QWORD *)this = &off_1E5D1B988;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *((_QWORD *)this + 7) = -1;
  *((_DWORD *)this + 16) = 2139095040;
  return result;
}

void fst::InterpArcInfo::~InterpArcInfo(fst::InterpArcInfo *this)
{
  void *v2;
  void **v3;

  *(_QWORD *)this = &off_1E5D1B988;
  v2 = (void *)*((_QWORD *)this + 4);
  if (v2)
  {
    *((_QWORD *)this + 5) = v2;
    operator delete(v2);
  }
  v3 = (void **)((char *)this + 8);
  std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100](&v3);
}

{
  fst::InterpArcInfo::~InterpArcInfo(this);
  JUMPOUT(0x1AF44D190);
}

_QWORD *quasar::lm::WeightOptimizationStrategy::operator()@<X0>(quasar::lm *a1@<X0>, _QWORD *a2@<X8>)
{
  quasar::lm *v4;
  unint64_t v5;
  long double v6;
  _QWORD v8[2];

  if (*((_DWORD *)a1 + 2))
  {
    quasar::lm::LogMessage::LogMessage(v8, 5, "operator()", "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/liblm/src/impl/weights.cpp", 10);
    quasar::rescoring::AdapterModel::getFeaturizer((quasar::rescoring::AdapterModel *)v8);
    quasar::lm::LogMessage::~LogMessage((quasar::lm::LogMessage *)v8);
  }
  else
  {
    v4 = (quasar::lm *)quasar::lm::nullstream(a1);
  }
  if (*((int *)a1 + 3) <= 0)
  {
    quasar::lm::LogMessage::LogMessage(v8, 5, "operator()", "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/liblm/src/impl/weights.cpp", 12);
    quasar::rescoring::AdapterModel::getFeaturizer((quasar::rescoring::AdapterModel *)v8);
    quasar::lm::LogMessage::~LogMessage((quasar::lm::LogMessage *)v8);
  }
  else
  {
    quasar::lm::nullstream(v4);
  }
  v5 = *((int *)a1 + 3);
  v6 = log((double)(int)v5);
  v8[0] = exp(-v6);
  return std::vector<double>::vector(a2, v5, v8);
}

void sub_1AD8D5E1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  quasar::lm::LogMessage::~LogMessage((quasar::lm::LogMessage *)&a9);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<double>::vector(_QWORD *a1, unint64_t a2, _QWORD *a3)
{
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<kaldi::CuWorkspace *>::__vallocate[abi:ne180100](a1, a2);
    v6 = (_QWORD *)a1[1];
    v7 = &v6[a2];
    v8 = 8 * a2;
    do
    {
      *v6++ = *a3;
      v8 -= 8;
    }
    while (v8);
    a1[1] = v7;
  }
  return a1;
}

void sub_1AD8D5EA8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

BOOL kaldi::ConstIntegerSet<int>::count(uint64_t a1, int a2)
{
  _DWORD *v3;
  _DWORD *v4;
  unint64_t v5;
  unint64_t v6;
  int *v7;
  _DWORD *v8;
  int v9;

  if (a2 < *(_DWORD *)a1 || *(_DWORD *)(a1 + 4) < a2)
    return 0;
  if (*(_BYTE *)(a1 + 8))
    return 1;
  if (*(_BYTE *)(a1 + 9))
    return (*(_QWORD *)(*(_QWORD *)(a1 + 16) + (((unint64_t)(a2 - *(_DWORD *)a1) >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (a2 - *(_BYTE *)a1)) & 1;
  v3 = *(_DWORD **)(a1 + 40);
  v4 = *(_DWORD **)(a1 + 48);
  if (v4 == v3)
    return 0;
  v5 = v4 - v3;
  do
  {
    v6 = v5 >> 1;
    v7 = &v3[v5 >> 1];
    v9 = *v7;
    v8 = v7 + 1;
    v5 += ~(v5 >> 1);
    if (v9 < a2)
      v3 = v8;
    else
      v5 = v6;
  }
  while (v5);
  if (v3 == v4)
    return 0;
  return *v3 <= a2;
}

_QWORD *kaldi::ConstIntegerSet<int>::~ConstIntegerSet(_QWORD *a1)
{
  void *v2;
  void *v3;

  v2 = (void *)a1[5];
  if (v2)
  {
    a1[6] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[2];
  if (v3)
    operator delete(v3);
  return a1;
}

uint64_t kaldi::ReadBasicType<unsigned int>(_QWORD *a1, int a2, uint64_t a3)
{
  int v4;
  uint64_t result;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD v10[52];

  v10[51] = *MEMORY[0x1E0C80C00];
  if (a2)
  {
    v4 = std::istream::get();
    if (v4 == -1)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v10);
      std::operator<<[abi:ne180100]<std::char_traits<char>>(v10, "ReadBasicType: encountered end of stream.");
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v10);
    }
    if (v4 << 24 != -67108864)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v10);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"ReadBasicType: did not get expected integer type, ", 50);
      v7 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)" vs. ", 5);
      v8 = (_QWORD *)std::ostream::operator<<();
      v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)".  You can change this code to successfully", 43);
      std::operator<<[abi:ne180100]<std::char_traits<char>>(v9, " read it later, if needed.");
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v10);
    }
    result = std::istream::read();
  }
  else
  {
    result = MEMORY[0x1AF44CB24](a1, a3);
  }
  if ((*((_BYTE *)a1 + *(_QWORD *)(*a1 - 24) + 32) & 5) != 0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v10);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"Read failure in ReadBasicType, file position is ", 48);
    std::istream::tellg();
    v6 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)", next char is ", 15);
    std::istream::peek();
    std::ostream::operator<<();
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v10);
  }
  return result;
}

void sub_1AD8D6168(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

_QWORD *std::operator<<[abi:ne180100]<std::char_traits<char>>(_QWORD *a1, char a2)
{
  char v3;

  v3 = a2;
  return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)&v3, 1);
}

void kaldi::ConstIntegerSet<int>::InitInternal(int *a1)
{
  char *v2;
  char *v3;
  uint64_t v4;
  int v5;
  int v6;
  unint64_t v7;
  char v8;
  int *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  *((_QWORD *)a1 + 3) = 0;
  v3 = (char *)*((_QWORD *)a1 + 5);
  v2 = (char *)*((_QWORD *)a1 + 6);
  v4 = v2 - v3;
  if (v2 == v3)
  {
    v8 = 0;
    *(_QWORD *)a1 = 1;
    *((_BYTE *)a1 + 8) = 0;
  }
  else
  {
    v5 = *(_DWORD *)v3;
    *a1 = v5;
    v6 = *((_DWORD *)v2 - 1);
    a1[1] = v6;
    v7 = v6 - v5 + 1;
    if (v7 == v4 >> 2)
    {
      v8 = 0;
      *((_BYTE *)a1 + 8) = 1;
    }
    else
    {
      v8 = 0;
      *((_BYTE *)a1 + 8) = 0;
      if (v7 < 8 * v4)
      {
        std::vector<BOOL>::resize((uint64_t)(a1 + 4), v7, 0);
        v9 = (int *)*((_QWORD *)a1 + 5);
        v10 = *((_QWORD *)a1 + 6) - (_QWORD)v9;
        if (v10)
        {
          v11 = v10 >> 2;
          v12 = *a1;
          v13 = *((_QWORD *)a1 + 2);
          if (v11 <= 1)
            v14 = 1;
          else
            v14 = v11;
          do
          {
            v15 = *v9++;
            v8 = 1;
            *(_QWORD *)(v13 + (((unint64_t)(v15 - v12) >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << (v15 - v12);
            --v14;
          }
          while (v14);
        }
        else
        {
          v8 = 1;
        }
      }
    }
  }
  *((_BYTE *)a1 + 9) = v8;
}

double kaldi::quasar::InputShapeTemplate::InputShapeTemplate(kaldi::quasar::InputShapeTemplate *this)
{
  double result;

  *(_QWORD *)&result = 0x100000000;
  *(_QWORD *)this = 0x100000000;
  *((_DWORD *)this + 2) = 2;
  return result;
}

_DWORD *kaldi::quasar::InputShapeTemplate::InputShapeTemplate(_DWORD *a1, uint64_t a2)
{
  unsigned __int8 **v4;
  unsigned __int8 **v5;
  uint64_t v6;
  unint64_t v7;
  _DWORD *v8;
  uint64_t v9;
  int v10;
  int v11;
  int v12;
  _DWORD *v13;
  _QWORD *v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  _QWORD *v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  _QWORD *v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  void **v45[34];
  unsigned __int8 **v46;
  unsigned __int8 **v47;
  uint64_t v48;

  *(_QWORD *)a1 = -1;
  a1[2] = -1;
  v46 = 0;
  v47 = 0;
  v48 = 0;
  kaldi::SplitStringToVector((const std::string *)a2, ",", 1, (uint64_t)&v46);
  v4 = v46;
  v5 = v47;
  v6 = v47 - v46;
  v7 = 0xAAAAAAAAAAAAAAABLL * v6;
  a1[2] = -1431655765 * v6;
  if (-1431655765 * (int)v6 < 2)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v45);
    v30 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v45, (uint64_t)"Input shape template [", 22);
    v31 = *(char *)(a2 + 23);
    if (v31 >= 0)
      v32 = a2;
    else
      v32 = *(_QWORD *)a2;
    if (v31 >= 0)
      v33 = *(unsigned __int8 *)(a2 + 23);
    else
      v33 = *(_QWORD *)(a2 + 8);
    v34 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, v32, v33);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)"] must include the R and C tokens.", 34);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v45);
  }
  v8 = a1 + 1;
  if (v5 != v4)
  {
    v9 = 0;
    if (v7 <= 1)
      v7 = 1;
    do
    {
      v10 = *((char *)v4 + 23);
      if (v10 < 0)
      {
        if (v4[1] != (unsigned __int8 *)1)
          goto LABEL_23;
        v12 = **v4;
        if (v12 == 67)
        {
LABEL_15:
          v13 = a1 + 1;
          if (*v8 != -1)
          {
            kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v45);
            v25 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v45, (uint64_t)"Input shape template [", 22);
            v26 = *(char *)(a2 + 23);
            if (v26 >= 0)
              v27 = a2;
            else
              v27 = *(_QWORD *)a2;
            if (v26 >= 0)
              v28 = *(unsigned __int8 *)(a2 + 23);
            else
              v28 = *(_QWORD *)(a2 + 8);
            v29 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, v27, v28);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)"] includes multiple C tokens.", 29);
            kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v45);
          }
          goto LABEL_16;
        }
        if (v12 != 82)
        {
          v11 = **v4;
LABEL_18:
          if (v11 != 49)
          {
LABEL_23:
            kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v45);
            v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v45, (uint64_t)"Input shape template [", 22);
            v16 = *(char *)(a2 + 23);
            if (v16 >= 0)
              v17 = a2;
            else
              v17 = *(_QWORD *)a2;
            if (v16 >= 0)
              v18 = *(unsigned __int8 *)(a2 + 23);
            else
              v18 = *(_QWORD *)(a2 + 8);
            v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, v17, v18);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"] includes tokens other than R, C and 1.", 40);
            kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v45);
          }
          goto LABEL_19;
        }
      }
      else
      {
        if (v10 != 1)
          goto LABEL_23;
        v11 = *(unsigned __int8 *)v4;
        if (v11 == 67)
          goto LABEL_15;
        if (v11 != 82)
          goto LABEL_18;
      }
      v13 = a1;
      if (*a1 != -1)
      {
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v45);
        v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v45, (uint64_t)"Input shape template [", 22);
        v21 = *(char *)(a2 + 23);
        if (v21 >= 0)
          v22 = a2;
        else
          v22 = *(_QWORD *)a2;
        if (v21 >= 0)
          v23 = *(unsigned __int8 *)(a2 + 23);
        else
          v23 = *(_QWORD *)(a2 + 8);
        v24 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, v22, v23);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)"] includes multiple R tokens.", 29);
        kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v45);
      }
LABEL_16:
      *v13 = v9;
LABEL_19:
      ++v9;
      v4 += 3;
    }
    while (v7 != v9);
  }
  if (*a1 == -1)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v45);
    v35 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v45, (uint64_t)"Input shape template [", 22);
    v36 = *(char *)(a2 + 23);
    if (v36 >= 0)
      v37 = a2;
    else
      v37 = *(_QWORD *)a2;
    if (v36 >= 0)
      v38 = *(unsigned __int8 *)(a2 + 23);
    else
      v38 = *(_QWORD *)(a2 + 8);
    v39 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, v37, v38);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v39, (uint64_t)"] must include the R token.", 27);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v45);
  }
  if (*v8 == -1)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v45);
    v40 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v45, (uint64_t)"Input shape template [", 22);
    v41 = *(char *)(a2 + 23);
    if (v41 >= 0)
      v42 = a2;
    else
      v42 = *(_QWORD *)a2;
    if (v41 >= 0)
      v43 = *(unsigned __int8 *)(a2 + 23);
    else
      v43 = *(_QWORD *)(a2 + 8);
    v44 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, v42, v43);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v44, (uint64_t)"] must include the C token.", 27);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v45);
  }
  v45[0] = (void **)&v46;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v45);
  return a1;
}

uint64_t *kaldi::quasar::InputShapeTemplate::Get@<X0>(kaldi::quasar::InputShapeTemplate *this@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  unint64_t v7;
  uint64_t *result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v7 = *((int *)this + 2);
  v11 = 1;
  result = std::vector<long long>::vector(a4, v7, &v11);
  v9 = *result;
  v10 = *((int *)this + 1);
  *(_QWORD *)(*result + 8 * *(int *)this) = a2;
  *(_QWORD *)(v9 + 8 * v10) = a3;
  return result;
}

void kaldi::quasar::CopyBufferToMatrix(uint64_t a1, uint64_t a2, uint64_t a3, int32x2_t *a4)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[2];
  uint64_t v8;
  uint64_t v9;
  _QWORD v10[34];

  if ((a3 & a2) == 0xFFFFFFFF)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v10);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v10, "Both num_rows and num_cols is 0. At least one dimension should be provided.");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v10);
  }
  v5 = a3;
  v6 = a2;
  v8 = 0;
  v9 = 0;
  v7[0] = &unk_1E5D341C8;
  v7[1] = 0;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)a1 + 40))(a1, v7);
  if ((_DWORD)v6 == -1)
  {
    if ((int)v5 <= 0)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v10);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"num_cols > 0", 12);
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v10);
    }
    v6 = ((int)v8 / (int)v5);
    if ((int)v8 % (int)v5)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v10);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"num_elements % num_cols == 0", 28);
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v10);
    }
  }
  else if ((_DWORD)v5 == -1)
  {
    if ((int)v6 <= 0)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v10);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"num_rows > 0", 12);
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v10);
    }
    v5 = ((int)v8 / (int)v6);
    if ((int)v8 % (int)v6)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v10);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"num_elements % num_rows == 0", 28);
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v10);
    }
  }
  else if ((_DWORD)v5 * (_DWORD)v6 != (_DWORD)v8)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v10);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"num_rows * num_cols == num_elements", 35);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v10);
  }
  kaldi::CuMatrix<float>::Resize(a4, v6, v5, 0, 0);
  kaldi::CuMatrixBase<float>::CopyRowsFromVec((uint64_t)a4, (uint64_t)v7);
  v7[0] = &unk_1E5D341C8;
  kaldi::CuVector<float>::Destroy((uint64_t)v7);
}

void sub_1AD8D68B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  kaldi::CuVector<float>::~CuVector(&a9);
  _Unwind_Resume(a1);
}

void kaldi::quasar::CreateBufferFromMatrix(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, kaldi::quasar::ComputeEngineBufferItf **a4@<X3>, kaldi::quasar::ComputeEngineBufferItf **a5@<X8>)
{
  char *v10;
  _BOOL4 v11;
  kaldi::quasar::ComputeEngineBufferItf *v12;
  char *v13;
  kaldi::quasar::ComputeEngineBufferItf *v14;
  char *v15;
  int v16;
  kaldi::quasar::ComputeEngineBufferItf *v17;
  char *v18;
  char *v19;

  if (!*a4)
  {
    *a4 = 0;
    goto LABEL_10;
  }
  kaldi::quasar::ComputeEngineBufferItf::GetShape(*a4, &v18);
  v10 = v18;
  if (v19 - v18 == *(_QWORD *)(a3 + 8) - *(_QWORD *)a3 && !memcmp(v18, *(const void **)a3, v19 - v18))
  {
    v11 = kaldi::quasar::ComputeEngineBufferItf::GetSize(*a4) != *(int *)(a2 + 16) * (uint64_t)*(int *)(a2 + 20);
    v10 = v18;
    if (!v18)
      goto LABEL_6;
    goto LABEL_5;
  }
  v11 = 1;
  if (v10)
  {
LABEL_5:
    v19 = v10;
    operator delete(v10);
  }
LABEL_6:
  if (!v11)
    goto LABEL_13;
  v12 = *a4;
  *a4 = 0;
  if (v12)
    (*(void (**)(kaldi::quasar::ComputeEngineBufferItf *))(*(_QWORD *)v12 + 8))(v12);
LABEL_10:
  (*(void (**)(char **__return_ptr, _QWORD, uint64_t))(*(_QWORD *)*a1 + 56))(&v18, *a1, a3);
  v13 = v18;
  v18 = 0;
  v14 = *a4;
  *a4 = (kaldi::quasar::ComputeEngineBufferItf *)v13;
  if (v14)
  {
    (*(void (**)(kaldi::quasar::ComputeEngineBufferItf *))(*(_QWORD *)v14 + 8))(v14);
    v15 = v18;
    v18 = 0;
    if (v15)
      (*(void (**)(char *))(*(_QWORD *)v15 + 8))(v15);
  }
LABEL_13:
  if (*(int *)(a2 + 20) >= 1)
  {
    v16 = 0;
    do
    {
      (*(void (**)(kaldi::quasar::ComputeEngineBufferItf *, uint64_t, _QWORD, _QWORD))(*(_QWORD *)*a4 + 88))(*a4, *(_QWORD *)(a2 + 8) + 4 * *(_DWORD *)(a2 + 24) * v16, *(unsigned int *)(a2 + 16), (*(_DWORD *)(a2 + 16) * v16));
      ++v16;
    }
    while (v16 < *(_DWORD *)(a2 + 20));
  }
  v17 = *a4;
  *a4 = 0;
  *a5 = v17;
}

void sub_1AD8D6A50(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL kaldi::quasar::isDeviceFp32Compute(kaldi::quasar *this)
{
  return (MEMORY[0xFFFFFC020] & 8) == 0;
}

_QWORD *std::vector<long long>::vector(_QWORD *a1, unint64_t a2, _QWORD *a3)
{
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<kaldi::CuWorkspace *>::__vallocate[abi:ne180100](a1, a2);
    v6 = (_QWORD *)a1[1];
    v7 = &v6[a2];
    v8 = 8 * a2;
    do
    {
      *v6++ = *a3;
      v8 -= 8;
    }
    while (v8);
    a1[1] = v7;
  }
  return a1;
}

void sub_1AD8D6AE8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void quasar::VoiceCommandRecognize(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  char v6;
  std::string *v7;
  std::string::size_type size;
  char *v9;
  uint64_t v10;
  std::string::size_type v11;
  std::string::size_type v12;
  int v13;
  unsigned int v14;
  char v15;
  int v16;
  unint64_t v17;
  unsigned int v18;
  int v19;
  unsigned int v20;
  __int128 *v21;
  unsigned int v22;
  unsigned int v23;
  int v24;
  __int128 v25;
  char *v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char *v31;
  char *v32;
  char *v33;
  __int128 v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t i;
  _QWORD *v41;
  uint64_t j;
  char *v43;
  char *v44;
  char *v45;
  char *v46;
  uint64_t v47;
  int v48;
  char *v49;
  uint64_t v50;
  _BYTE *v51;
  unint64_t k;
  uint64_t v53;
  int64_t v54;
  uint64_t v55;
  BOOL v56;
  _BYTE *v57;
  int v58;
  uint64_t *v59;
  uint64_t *v60;
  uint64_t m;
  uint64_t n;
  BOOL v63;
  int v64;
  unsigned int v65;
  _QWORD *v66;
  _QWORD **v67;
  _QWORD *v68;
  uint64_t v69;
  int v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t ii;
  char *v74;
  char *v75;
  char *v76;
  char *v77;
  char *v78;
  char *v79;
  uint64_t jj;
  _BYTE *v81;
  _BYTE *v82;
  uint64_t *v83;
  uint64_t v84;
  uint64_t v85;
  int v86;
  _BOOL4 v87;
  char *v88;
  char *v89;
  unsigned __int8 *v90;
  unsigned __int8 *v91;
  unsigned __int8 *v92;
  uint64_t kk;
  uint64_t mm;
  std::string *v95;
  uint64_t v96;
  uint64_t *v97;
  uint64_t *v98;
  uint64_t *v99;
  uint64_t *v100;
  uint64_t nn;
  uint64_t i1;
  uint64_t v103;
  int v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  _QWORD *v108;
  uint64_t *v109;
  uint64_t *v110;
  uint64_t *v111;
  uint64_t v112;
  void *v113;
  _BYTE *v114;
  uint64_t v115;
  __int128 v116;
  uint64_t v117;
  _BYTE v118[72];
  _BYTE v119[72];
  uint64_t v120;
  _QWORD *v121;
  std::string v122;
  int v123;
  std::string v124;
  _BYTE v125[40];
  __int128 v126;
  _OWORD v127[3];
  _QWORD *v128[3];
  _QWORD v129[3];
  std::string v130;
  int v131;
  std::string __s;
  _BYTE v133[40];
  uint64_t v134[3];
  void *v135;
  void *v136;
  uint64_t v137;
  int v138;
  __int128 v139;
  uint64_t v140;
  _BYTE v141[72];
  _BYTE v142[72];
  uint64_t *v143;
  _QWORD *v144[2];
  void *v145;
  char *v146;
  uint64_t v147;
  void *v148;
  _BYTE *v149;
  uint64_t v150;
  int v151;
  std::string v152;
  void *__p;
  char *v154;
  char *v155;
  _DWORD v156[3];
  _DWORD v157[3];
  _DWORD v158[6];
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  std::string v162;
  void *v163;
  uint64_t v164;
  char v165;
  void *v166;
  void *v167;
  uint64_t v168;
  __int128 v169;
  __int128 v170;
  int v171;
  void *v172;
  void *v173;
  uint64_t v174;
  uint64_t v175[3];
  void *v176;
  void *v177;
  uint64_t v178;
  uint64_t v179[3];
  char *v180;
  char *v181;
  unint64_t v182;
  std::string v183;
  uint64_t v184;
  _BYTE v185[8];
  _QWORD *v186;
  uint64_t v187;

  v187 = *MEMORY[0x1E0C80C00];
  if (*(char *)(a1 + 23) < 0)
    std::string::__init_copy_ctor_external(&v162, *(const std::string::value_type **)a1, *(_QWORD *)(a1 + 8));
  else
    v162 = *(std::string *)a1;
  quasar::prepareRecognizer((uint64_t)&v162, a2, (uint64_t)&v163);
  if (SHIBYTE(v162.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v162.__r_.__value_.__l.__data_);
  if (*(char *)(a1 + 23) < 0)
  {
    if (!*(_QWORD *)(a1 + 8))
    {
LABEL_13:
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      goto LABEL_228;
    }
  }
  else if (!*(_BYTE *)(a1 + 23))
  {
    goto LABEL_13;
  }
  if (!v165)
    goto LABEL_13;
  v110 = a3;
  v160 = 0;
  v159 = 0;
  v161 = 0;
  quasar::FstToSymLabels((uint64_t)&v163, &v159, -1, 1);
  v158[0] = *((_DWORD *)std::__tree<std::__value_type<std::string_view,int>,std::__map_value_compare<std::string_view,std::__value_type<std::string_view,int>,std::less<std::string_view>,true>,std::allocator<std::__value_type<std::string_view,int>>>::find<std::string_view>(a2 + 104, (uint64_t)&quasar::VoiceCommandSymbolArg0)+ 12);
  v158[1] = *((_DWORD *)std::__tree<std::__value_type<std::string_view,int>,std::__map_value_compare<std::string_view,std::__value_type<std::string_view,int>,std::less<std::string_view>,true>,std::allocator<std::__value_type<std::string_view,int>>>::find<std::string_view>(a2 + 104, (uint64_t)&quasar::VoiceCommandSymbolArg0Adpos)+ 12);
  v158[2] = *((_DWORD *)std::__tree<std::__value_type<std::string_view,int>,std::__map_value_compare<std::string_view,std::__value_type<std::string_view,int>,std::less<std::string_view>,true>,std::allocator<std::__value_type<std::string_view,int>>>::find<std::string_view>(a2 + 104, (uint64_t)&quasar::VoiceCommandSymbolArg1)+ 12);
  v158[3] = *((_DWORD *)std::__tree<std::__value_type<std::string_view,int>,std::__map_value_compare<std::string_view,std::__value_type<std::string_view,int>,std::less<std::string_view>,true>,std::allocator<std::__value_type<std::string_view,int>>>::find<std::string_view>(a2 + 104, (uint64_t)&quasar::VoiceCommandSymbolArg1Adpos)+ 12);
  v158[4] = *((_DWORD *)std::__tree<std::__value_type<std::string_view,int>,std::__map_value_compare<std::string_view,std::__value_type<std::string_view,int>,std::less<std::string_view>,true>,std::allocator<std::__value_type<std::string_view,int>>>::find<std::string_view>(a2 + 104, (uint64_t)&quasar::VoiceCommandSymbolArg2)+ 12);
  v158[5] = *((_DWORD *)std::__tree<std::__value_type<std::string_view,int>,std::__map_value_compare<std::string_view,std::__value_type<std::string_view,int>,std::less<std::string_view>,true>,std::allocator<std::__value_type<std::string_view,int>>>::find<std::string_view>(a2 + 104, (uint64_t)&quasar::VoiceCommandSymbolArg2Adpos)+ 12);
  v157[0] = *((_DWORD *)std::__tree<std::__value_type<std::string_view,int>,std::__map_value_compare<std::string_view,std::__value_type<std::string_view,int>,std::less<std::string_view>,true>,std::allocator<std::__value_type<std::string_view,int>>>::find<std::string_view>(a2 + 104, (uint64_t)&quasar::VoiceCommandSymbolArg0Lacuna)+ 12);
  v157[1] = *((_DWORD *)std::__tree<std::__value_type<std::string_view,int>,std::__map_value_compare<std::string_view,std::__value_type<std::string_view,int>,std::less<std::string_view>,true>,std::allocator<std::__value_type<std::string_view,int>>>::find<std::string_view>(a2 + 104, (uint64_t)&quasar::VoiceCommandSymbolArg1Lacuna)+ 12);
  v157[2] = *((_DWORD *)std::__tree<std::__value_type<std::string_view,int>,std::__map_value_compare<std::string_view,std::__value_type<std::string_view,int>,std::less<std::string_view>,true>,std::allocator<std::__value_type<std::string_view,int>>>::find<std::string_view>(a2 + 104, (uint64_t)&quasar::VoiceCommandSymbolArg2Lacuna)+ 12);
  v156[0] = *((_DWORD *)std::__tree<std::__value_type<std::string_view,int>,std::__map_value_compare<std::string_view,std::__value_type<std::string_view,int>,std::less<std::string_view>,true>,std::allocator<std::__value_type<std::string_view,int>>>::find<std::string_view>(a2 + 104, (uint64_t)&quasar::VoiceCommandSymbolSpace)+ 12);
  v156[1] = *((_DWORD *)std::__tree<std::__value_type<std::string_view,int>,std::__map_value_compare<std::string_view,std::__value_type<std::string_view,int>,std::less<std::string_view>,true>,std::allocator<std::__value_type<std::string_view,int>>>::find<std::string_view>(a2 + 104, (uint64_t)&quasar::VoiceCommandSymbolDontCare)+ 12);
  v156[2] = *((_DWORD *)std::__tree<std::__value_type<std::string_view,int>,std::__map_value_compare<std::string_view,std::__value_type<std::string_view,int>,std::less<std::string_view>,true>,std::allocator<std::__value_type<std::string_view,int>>>::find<std::string_view>(a2 + 104, (uint64_t)&quasar::VoiceCommandSymbolEpsilon)+ 12);
  if (*(char *)(a1 + 23) < 0)
    std::string::__init_copy_ctor_external(&v152, *(const std::string::value_type **)a1, *(_QWORD *)(a1 + 8));
  else
    v152 = *(std::string *)a1;
  v6 = HIBYTE(v152.__r_.__value_.__r.__words[2]);
  if ((v152.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v7 = &v152;
  else
    v7 = (std::string *)v152.__r_.__value_.__r.__words[0];
  if ((v152.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v152.__r_.__value_.__r.__words[2]);
  else
    size = v152.__r_.__value_.__l.__size_;
  v155 = 0;
  __p = 0;
  v154 = 0;
  if (size)
  {
    v112 = a2;
    v9 = 0;
    v10 = 0;
    v11 = 0;
    while (1)
    {
      v12 = v11 + 1;
      v13 = v7->__r_.__value_.__s.__data_[v11];
      v14 = v7->__r_.__value_.__s.__data_[v11];
      if (v13 < 0)
      {
        if (v12 == size)
          goto LABEL_27;
        if (v14 < 0xE0)
        {
          if (v14 < 0xC2)
            goto LABEL_50;
          v19 = v14 & 0x1F;
        }
        else
        {
          if (v14 > 0xEF)
          {
            if (v14 > 0xF4)
              goto LABEL_50;
            v22 = v14 - 240;
            v17 = v7->__r_.__value_.__s.__data_[v12];
            if (((byte_1AE146E08[v17 >> 4] >> (v14 + 16)) & 1) == 0)
              goto LABEL_50;
            v12 = v11 + 2;
            if (v11 + 2 == size)
            {
LABEL_27:
              v16 = 0;
              v15 = 1;
              v12 = size;
              goto LABEL_51;
            }
            v18 = v7->__r_.__value_.__s.__data_[v12] ^ 0x80;
            if (v18 > 0x3F)
              goto LABEL_50;
            LODWORD(v17) = v17 & 0x3F | (v22 << 6);
          }
          else
          {
            v17 = v13 & 0xF;
            if (((a00000000000000[v17] >> (v7->__r_.__value_.__s.__data_[v12] >> 5)) & 1) == 0)
              goto LABEL_50;
            v18 = v7->__r_.__value_.__s.__data_[v12] & 0x3F;
          }
          if (++v12 == size)
            goto LABEL_27;
          v19 = v18 | ((_DWORD)v17 << 6);
        }
        v20 = v7->__r_.__value_.__s.__data_[v12] ^ 0x80;
        if (v20 > 0x3F)
          goto LABEL_50;
        v14 = v20 | (v19 << 6);
        ++v12;
      }
      if (v14 < 0x80)
      {
        v15 = 0;
        v16 = 1;
LABEL_51:
        v23 = 5 - v16;
        v21 = &v126;
        do
        {
          *(_QWORD *)v21 = v10;
          v21 = (__int128 *)((char *)v21 + 8);
          --v23;
        }
        while (v23 > 1);
        if ((v15 & 1) != 0)
          goto LABEL_56;
        goto LABEL_54;
      }
      if (v14 < 0x800)
      {
        v15 = 0;
        v16 = 2;
        goto LABEL_51;
      }
      if (v14 >> 11 < 0x1B)
        goto LABEL_37;
      if (v14 - 1114112 < 0xFFEFE000)
      {
LABEL_50:
        v16 = 0;
        v15 = 1;
        goto LABEL_51;
      }
      if (v14 < 0x10000)
      {
LABEL_37:
        v15 = 0;
        v16 = 3;
        goto LABEL_51;
      }
      v16 = 4;
      v21 = &v126;
LABEL_54:
      v24 = v16 - (v16 != 0) + 1;
      do
      {
        *(_QWORD *)v21 = v10;
        v21 = (__int128 *)((char *)v21 + 8);
        ++v10;
        --v24;
      }
      while (v24);
LABEL_56:
      v11 = v12;
      if (v9 >= v155)
      {
        v26 = (char *)__p;
        v27 = (v9 - (_BYTE *)__p) >> 5;
        v28 = v27 + 1;
        if ((unint64_t)(v27 + 1) >> 59)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v29 = v155 - (_BYTE *)__p;
        if ((v155 - (_BYTE *)__p) >> 4 > v28)
          v28 = v29 >> 4;
        if ((unint64_t)v29 >= 0x7FFFFFFFFFFFFFE0)
          v30 = 0x7FFFFFFFFFFFFFFLL;
        else
          v30 = v28;
        if (v30)
        {
          v31 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::TextTokenizer::Token>>((uint64_t)&v155, v30);
          v9 = v154;
          v26 = (char *)__p;
        }
        else
        {
          v31 = 0;
        }
        v32 = &v31[32 * v27];
        *(_OWORD *)v32 = v126;
        *((_OWORD *)v32 + 1) = v127[0];
        if (v9 == v26)
        {
          v35 = &v31[32 * v27];
        }
        else
        {
          v33 = &v31[32 * v27];
          do
          {
            v34 = *((_OWORD *)v9 - 1);
            v35 = v33 - 32;
            *((_OWORD *)v33 - 2) = *((_OWORD *)v9 - 2);
            *((_OWORD *)v33 - 1) = v34;
            v9 -= 32;
            v33 -= 32;
          }
          while (v9 != v26);
        }
        v9 = v32 + 32;
        __p = v35;
        v154 = v32 + 32;
        v155 = &v31[32 * v30];
        if (v26)
          operator delete(v26);
      }
      else
      {
        v25 = v127[0];
        *(_OWORD *)v9 = v126;
        *((_OWORD *)v9 + 1) = v25;
        v9 += 32;
      }
      v154 = v9;
      if (v11 >= size)
      {
        v6 = HIBYTE(v152.__r_.__value_.__r.__words[2]);
        a2 = v112;
        break;
      }
    }
  }
  if (v6 < 0)
    operator delete(v152.__r_.__value_.__l.__data_);
  *v110 = 0;
  v110[1] = 0;
  v110[2] = 0;
  std::vector<quasar::VoiceCommandInterpretation>::reserve(v110, (v160 - v159) >> 5);
  v36 = v159;
  v106 = v160;
  if (v159 != v160)
  {
    v105 = a2 + 40;
    v108 = (_QWORD *)(a2 + 64);
    do
    {
      v149 = 0;
      v148 = 0;
      v150 = 0;
      v37 = v36;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v148, *(const void **)v36, *(_QWORD *)(v36 + 8), (uint64_t)(*(_QWORD *)(v36 + 8) - *(_QWORD *)v36) >> 2);
      v107 = v37;
      v151 = *(_DWORD *)(v37 + 24);
      v146 = 0;
      v145 = 0;
      v147 = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v145, v148, (uint64_t)v149, (v149 - (_BYTE *)v148) >> 2);
      v38 = 0;
      v144[0] = 0;
      v144[1] = 0;
      v143 = (uint64_t *)v144;
      do
      {
        v39 = &v142[v38];
        v39[2] = 0;
        *(_QWORD *)&v142[v38 + 8] = 0;
        *v39 = &v142[v38 + 8];
        v38 += 24;
      }
      while (v38 != 72);
      for (i = 0; i != 72; i += 24)
      {
        v41 = &v141[i];
        v41[2] = 0;
        *(_QWORD *)&v141[i + 8] = 0;
        *v41 = &v141[i + 8];
      }
      for (j = 0; j != 24; j += 8)
      {
        v43 = (char *)&v139 + j;
        *v43 = 0;
        v43[4] = 0;
      }
      v44 = (char *)v145;
      v45 = v146;
      if (v145 == v146)
      {
        v46 = (char *)v145;
      }
      else
      {
        v46 = v146;
        do
        {
          v47 = 0;
          v48 = *(_DWORD *)v44;
          v49 = (char *)v145;
          v50 = (v44 - (_BYTE *)v145) >> 2;
          LODWORD(v126) = v50;
          v51 = (char *)&v139 + 4;
          do
          {
            if (v48 == v157[v47])
            {
              *((_DWORD *)v51 - 1) = v50;
              *v51 = 1;
              v44 = &v49[4 * v50];
              v54 = v46 - (v44 + 4);
              if (v46 != v44 + 4)
                memmove(&v49[4 * v50], v44 + 4, v46 - (v44 + 4));
              v46 = &v44[v54];
              v146 = &v44[v54];
              goto LABEL_105;
            }
            ++v47;
            v51 += 8;
          }
          while (v47 != 3);
          for (k = 0; k != 6; ++k)
          {
            if (v48 == v158[k])
            {
              v55 = (k >> 1) & 3;
              v56 = (k & 1) == 0;
              v57 = v141;
              if (v56)
                v57 = v142;
              std::__tree<int>::__emplace_unique_key_args<int,int const&>((uint64_t **)&v57[24 * v55], (int *)&v126, &v126);
              goto LABEL_104;
            }
          }
          v53 = 0;
          while (v48 != v156[v53])
          {
            if (++v53 == 3)
            {
              std::__tree<int>::__emplace_unique_key_args<int,int const&>(&v143, (int *)&v126, &v126);
              break;
            }
          }
LABEL_104:
          v44 += 4;
          v46 = v146;
LABEL_105:
          ;
        }
        while (v44 != v46);
        v44 = (char *)v145;
        v45 = v46;
      }
      v138 = 0;
      v137 = 0;
      v135 = 0;
      v136 = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v135, v44, (uint64_t)v46, (v45 - v44) >> 2);
      std::set<int>::set[abi:ne180100](v134, (uint64_t)&v143);
      if (v134[2])
        v58 = *((_DWORD *)v135 + *(int *)(v134[0] + 28));
      else
        v58 = 0;
      std::__tree<int>::destroy((uint64_t)v134, (_QWORD *)v134[1]);
      if (v135)
      {
        v136 = v135;
        operator delete(v135);
      }
      v138 = v58;
      v59 = std::__tree<std::__value_type<int,quasar::VoiceCommandActiveSetCompilation::CommandSpec>,std::__map_value_compare<int,std::__value_type<int,quasar::VoiceCommandActiveSetCompilation::CommandSpec>,std::less<int>,true>,std::allocator<std::__value_type<int,quasar::VoiceCommandActiveSetCompilation::CommandSpec>>>::__equal_range_multi<int>(v105, &v138);
      if (v59 != v60)
      {
        v109 = v60;
        do
        {
          v111 = v59;
          if (*((char *)v59 + 63) < 0)
          {
            std::string::__init_copy_ctor_external(&v130, (const std::string::value_type *)v59[5], v59[6]);
            v59 = v111;
          }
          else
          {
            v130 = *(std::string *)(v59 + 5);
          }
          v131 = *((_DWORD *)v59 + 16);
          if (*((char *)v59 + 95) < 0)
          {
            std::string::__init_copy_ctor_external(&__s, (const std::string::value_type *)v59[9], v59[10]);
            v59 = v111;
          }
          else
          {
            __s = *(std::string *)((_BYTE *)v59 + 3);
          }
          std::unordered_set<std::string>::unordered_set((uint64_t)v133, (uint64_t)(v59 + 12));
          if (SHIBYTE(v130.__r_.__value_.__r.__words[2]) < 0)
            std::string::__init_copy_ctor_external(&v122, v130.__r_.__value_.__l.__data_, v130.__r_.__value_.__l.__size_);
          else
            v122 = v130;
          v123 = v131;
          if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
            std::string::__init_copy_ctor_external(&v124, __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
          else
            v124 = __s;
          std::unordered_set<std::string>::unordered_set((uint64_t)v125, (uint64_t)v133);
          std::set<int>::set[abi:ne180100](&v120, (uint64_t)&v143);
          for (m = 0; m != 72; m += 24)
            std::set<int>::set[abi:ne180100]((uint64_t *)&v119[m], (uint64_t)&v142[m]);
          for (n = 0; n != 72; n += 24)
            std::set<int>::set[abi:ne180100]((uint64_t *)&v118[n], (uint64_t)&v141[n]);
          v116 = v139;
          v117 = v140;
          v114 = 0;
          v115 = 0;
          v113 = 0;
          std::vector<std::array<unsigned long,4ul>>::__init_with_size[abi:ne180100]<std::array<unsigned long,4ul>*,std::array<unsigned long,4ul>*>(&v113, __p, (uint64_t)v154, (v154 - (_BYTE *)__p) >> 5);
          v63 = v123 == 1;
          v64 = v123 == 1;
          if (v123 == 2)
          {
            v63 = 1;
            v64 = 2;
          }
          if (v123 == 3)
          {
            v63 = 1;
            v65 = 3;
          }
          else
          {
            v65 = v64;
          }
          v66 = v121;
          v67 = &v121;
          if (v121)
          {
            do
            {
              v68 = v66;
              v66 = (_QWORD *)v66[1];
            }
            while (v66);
          }
          else
          {
            do
            {
              v68 = v67[2];
              v56 = *v68 == (_QWORD)v67;
              v67 = (_QWORD **)v68;
            }
            while (v56);
          }
          if (v63)
          {
            v69 = 0;
            v70 = *((_DWORD *)v68 + 7);
            if (v65 <= 1)
              v71 = 1;
            else
              v71 = v65;
            v72 = 0xFFFFFFFFLL;
            do
            {
              std::set<int>::set[abi:ne180100]((uint64_t *)&v183, (uint64_t)&v119[24 * v69]);
              std::set<int>::set[abi:ne180100](&v184, (uint64_t)&v118[24 * v69]);
              for (ii = 0; ii != 2; ++ii)
              {
                std::set<int>::set[abi:ne180100]((uint64_t *)&v169, (uint64_t)(&v183 + ii));
                if ((_QWORD)v170)
                {
                  v74 = (char *)*((_QWORD *)&v169 + 1);
                  v75 = (char *)&v169 + 8;
                  if (*((_QWORD *)&v169 + 1))
                  {
                    do
                    {
                      v76 = v74;
                      v74 = (char *)*((_QWORD *)v74 + 1);
                    }
                    while (v74);
                  }
                  else
                  {
                    do
                    {
                      v76 = (char *)*((_QWORD *)v75 + 2);
                      v56 = *(_QWORD *)v76 == (_QWORD)v75;
                      v75 = v76;
                    }
                    while (v56);
                  }
                  if (*((_DWORD *)v76 + 7) > v70)
                  {
                    v77 = (char *)*((_QWORD *)&v169 + 1);
                    v78 = (char *)&v169 + 8;
                    if (*((_QWORD *)&v169 + 1))
                    {
                      do
                      {
                        v79 = v77;
                        v77 = (char *)*((_QWORD *)v77 + 1);
                      }
                      while (v77);
                    }
                    else
                    {
                      do
                      {
                        v79 = (char *)*((_QWORD *)v78 + 2);
                        v56 = *(_QWORD *)v79 == (_QWORD)v78;
                        v78 = v79;
                      }
                      while (v56);
                    }
                    v70 = *((_DWORD *)v79 + 7);
                    v72 = v69;
                  }
                }
                std::__tree<int>::destroy((uint64_t)&v169, *((_QWORD **)&v169 + 1));
              }
              for (jj = 0; jj != -48; jj -= 24)
                std::__tree<int>::destroy((uint64_t)&v183 + jj + 24, *(_QWORD **)&v185[jj]);
              ++v69;
            }
            while (v69 != v71);
            v180 = 0;
            v181 = 0;
            v81 = v118;
            v82 = v119;
            v83 = (uint64_t *)&v116;
            v182 = 0;
            do
            {
              v85 = *v83++;
              v84 = v85;
              if (v70 <= (int)v85)
                v86 = 2;
              else
                v86 = 3;
              if ((v84 & 0xFF00000000) != 0)
                v87 = v86;
              else
                v87 = v72 == 0;
              LODWORD(v183.__r_.__value_.__l.__data_) = v87;
              std::set<int>::set[abi:ne180100](v179, (uint64_t)v82);
              v176 = 0;
              v177 = 0;
              v178 = 0;
              std::vector<std::array<unsigned long,4ul>>::__init_with_size[abi:ne180100]<std::array<unsigned long,4ul>*,std::array<unsigned long,4ul>*>(&v176, v113, (uint64_t)v114, (v114 - (_BYTE *)v113) >> 5);
              quasar::mappedIndexes(v179, &v176, (uint64_t)&v183.__r_.__value_.__l.__size_);
              std::set<int>::set[abi:ne180100](v175, (uint64_t)v81);
              v173 = 0;
              v172 = 0;
              v174 = 0;
              std::vector<std::array<unsigned long,4ul>>::__init_with_size[abi:ne180100]<std::array<unsigned long,4ul>*,std::array<unsigned long,4ul>*>(&v172, v113, (uint64_t)v114, (v114 - (_BYTE *)v113) >> 5);
              quasar::mappedIndexes(v175, &v172, (uint64_t)v185);
              if (v172)
              {
                v173 = v172;
                operator delete(v172);
              }
              std::__tree<int>::destroy((uint64_t)v175, (_QWORD *)v175[1]);
              if (v176)
              {
                v177 = v176;
                operator delete(v176);
              }
              std::__tree<int>::destroy((uint64_t)v179, (_QWORD *)v179[1]);
              v88 = v181;
              if ((unint64_t)v181 >= v182)
              {
                v89 = (char *)std::vector<quasar::VoiceCommandArgument>::__push_back_slow_path<quasar::VoiceCommandArgument const&>((uint64_t *)&v180, &v183);
              }
              else
              {
                std::allocator<quasar::VoiceCommandArgument>::construct[abi:ne180100]<quasar::VoiceCommandArgument,quasar::VoiceCommandArgument const&>((uint64_t)&v182, (uint64_t)v181, &v183);
                v89 = v88 + 56;
              }
              v181 = v89;
              std::__tree<int>::destroy((uint64_t)v185, v186);
              std::__tree<int>::destroy((uint64_t)&v183.__r_.__value_.__l.__size_, (_QWORD *)v183.__r_.__value_.__r.__words[2]);
              v81 += 24;
              v82 += 24;
              --v72;
              --v71;
            }
            while (v71);
          }
          else
          {
            v180 = 0;
            v181 = 0;
            v182 = 0;
          }
          v169 = 0u;
          v170 = 0u;
          v171 = 1065353216;
          v90 = std::__hash_table<std::__hash_value_type<quasar::VoiceCommandActiveSetCompilation::CommandSpec,quasar::VoiceCommandActiveSetCompilation::Suite>,std::__unordered_map_hasher<quasar::VoiceCommandActiveSetCompilation::CommandSpec,std::__hash_value_type<quasar::VoiceCommandActiveSetCompilation::CommandSpec,quasar::VoiceCommandActiveSetCompilation::Suite>,quasar::VoiceCommandActiveSetCompilation::CommandSpec::hash,std::equal_to<quasar::VoiceCommandActiveSetCompilation::CommandSpec>,true>,std::__unordered_map_equal<quasar::VoiceCommandActiveSetCompilation::CommandSpec,std::__hash_value_type<quasar::VoiceCommandActiveSetCompilation::CommandSpec,quasar::VoiceCommandActiveSetCompilation::Suite>,std::equal_to<quasar::VoiceCommandActiveSetCompilation::CommandSpec>,quasar::VoiceCommandActiveSetCompilation::CommandSpec::hash,true>,std::allocator<std::__hash_value_type<quasar::VoiceCommandActiveSetCompilation::CommandSpec,quasar::VoiceCommandActiveSetCompilation::Suite>>>::__equal_range_multi<quasar::VoiceCommandActiveSetCompilation::CommandSpec>(v108, (unsigned __int8 *)&v122);
          v92 = v91;
          while (v90 != v92)
          {
            if ((char)v90[135] < 0)
              std::string::__init_copy_ctor_external(&v183, *((const std::string::value_type **)v90 + 14), *((_QWORD *)v90 + 15));
            else
              v183 = *(std::string *)(v90 + 112);
            std::unordered_set<quasar::VoiceCommandActiveSetCompilation::CommandSpec,quasar::VoiceCommandActiveSetCompilation::CommandSpec::hash,std::equal_to<quasar::VoiceCommandActiveSetCompilation::CommandSpec>,std::allocator<quasar::VoiceCommandActiveSetCompilation::CommandSpec>>::unordered_set((uint64_t)&v184, (uint64_t)(v90 + 136));
            std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)&v169, (unsigned __int8 *)&v183, (uint64_t)&v183);
            std::__hash_table<quasar::VoiceCommandActiveSetCompilation::CommandSpec,quasar::VoiceCommandActiveSetCompilation::CommandSpec::hash,std::equal_to<quasar::VoiceCommandActiveSetCompilation::CommandSpec>,std::allocator<quasar::VoiceCommandActiveSetCompilation::CommandSpec>>::~__hash_table((uint64_t)&v184);
            if (SHIBYTE(v183.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v183.__r_.__value_.__l.__data_);
            v90 = *(unsigned __int8 **)v90;
          }
          if (SHIBYTE(v122.__r_.__value_.__r.__words[2]) < 0)
          {
            std::string::__init_copy_ctor_external((std::string *)&v126, v122.__r_.__value_.__l.__data_, v122.__r_.__value_.__l.__size_);
          }
          else
          {
            v126 = *(_OWORD *)&v122.__r_.__value_.__l.__data_;
            *(_QWORD *)&v127[0] = *((_QWORD *)&v122.__r_.__value_.__l + 2);
          }
          std::unordered_set<std::string>::unordered_set((uint64_t)v127 + 8, (uint64_t)&v169);
          std::set<int>::set[abi:ne180100]((uint64_t *)&v183, (uint64_t)&v120);
          v167 = 0;
          v166 = 0;
          v168 = 0;
          std::vector<std::array<unsigned long,4ul>>::__init_with_size[abi:ne180100]<std::array<unsigned long,4ul>*,std::array<unsigned long,4ul>*>(&v166, v113, (uint64_t)v114, (v114 - (_BYTE *)v113) >> 5);
          quasar::mappedIndexes((uint64_t *)&v183, &v166, (uint64_t)v128);
          memset(v129, 0, sizeof(v129));
          std::vector<quasar::VoiceCommandArgument>::__init_with_size[abi:ne180100]<quasar::VoiceCommandArgument*,quasar::VoiceCommandArgument*>(v129, v180, v181, 0x6DB6DB6DB6DB6DB7 * ((v181 - v180) >> 3));
          if (v166)
          {
            v167 = v166;
            operator delete(v166);
          }
          std::__tree<int>::destroy((uint64_t)&v183, (_QWORD *)v183.__r_.__value_.__l.__size_);
          std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v169);
          *(_QWORD *)&v169 = &v180;
          std::vector<quasar::VoiceCommandArgument>::__destroy_vector::operator()[abi:ne180100]((void ***)&v169);
          if (v113)
          {
            v114 = v113;
            operator delete(v113);
          }
          for (kk = 0; kk != -72; kk -= 24)
            std::__tree<int>::destroy((uint64_t)&v118[kk + 48], *(_QWORD **)&v118[kk + 56]);
          for (mm = 0; mm != -72; mm -= 24)
            std::__tree<int>::destroy((uint64_t)&v119[mm + 48], *(_QWORD **)&v119[mm + 56]);
          std::__tree<int>::destroy((uint64_t)&v120, v121);
          std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)v125);
          if (SHIBYTE(v124.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v124.__r_.__value_.__l.__data_);
          if (SHIBYTE(v122.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v122.__r_.__value_.__l.__data_);
          v95 = (std::string *)v110[1];
          if ((unint64_t)v95 >= v110[2])
          {
            v97 = v110;
            v96 = std::vector<quasar::VoiceCommandInterpretation>::__push_back_slow_path<quasar::VoiceCommandInterpretation const&>(v110, (const quasar::VoiceCommandInterpretation *)&v126);
          }
          else
          {
            quasar::VoiceCommandInterpretation::VoiceCommandInterpretation(v95, (const quasar::VoiceCommandInterpretation *)&v126);
            v96 = (uint64_t)&v95[4].__r_.__value_.__r.__words[2];
            v97 = v110;
            v110[1] = v96;
          }
          v97[1] = v96;
          v183.__r_.__value_.__r.__words[0] = (std::string::size_type)v129;
          std::vector<quasar::VoiceCommandArgument>::__destroy_vector::operator()[abi:ne180100]((void ***)&v183);
          std::__tree<int>::destroy((uint64_t)v128, v128[1]);
          std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)v127 + 8);
          if (SBYTE7(v127[0]) < 0)
            operator delete((void *)v126);
          std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)v133);
          if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__s.__r_.__value_.__l.__data_);
          if (SHIBYTE(v130.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v130.__r_.__value_.__l.__data_);
          v98 = v111;
          v99 = (uint64_t *)v111[1];
          if (v99)
          {
            do
            {
              v100 = v99;
              v99 = (uint64_t *)*v99;
            }
            while (v99);
          }
          else
          {
            do
            {
              v100 = (uint64_t *)v98[2];
              v56 = *v100 == (_QWORD)v98;
              v98 = v100;
            }
            while (!v56);
          }
          v59 = v100;
        }
        while (v100 != v109);
      }
      for (nn = 0; nn != -72; nn -= 24)
        std::__tree<int>::destroy((uint64_t)&v141[nn + 48], *(_QWORD **)&v141[nn + 56]);
      for (i1 = 0; i1 != -72; i1 -= 24)
        std::__tree<int>::destroy((uint64_t)&v142[i1 + 48], *(_QWORD **)&v142[i1 + 56]);
      std::__tree<int>::destroy((uint64_t)&v143, v144[0]);
      if (v145)
      {
        v146 = (char *)v145;
        operator delete(v145);
      }
      if (v148)
      {
        v149 = v148;
        operator delete(v148);
      }
      v36 = v107 + 32;
    }
    while (v107 + 32 != v106);
  }
  if (__p)
  {
    v154 = (char *)__p;
    operator delete(__p);
  }
  *(_QWORD *)&v126 = &v159;
  std::vector<std::pair<std::vector<int>,float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v126);
LABEL_228:
  if (v165)
  {
    v163 = &unk_1E5D268B8;
    v103 = v164;
    if (v164)
    {
      v104 = *(_DWORD *)(v164 + 56) - 1;
      *(_DWORD *)(v164 + 56) = v104;
      if (!v104)
        (*(void (**)(uint64_t))(*(_QWORD *)v103 + 8))(v103);
    }
  }
}

void sub_1AD8D7B94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,void *a57,uint64_t a58,uint64_t a59,uint64_t a60,void *a61,uint64_t a62,uint64_t a63)
{
  void *a69;
  _DWORD *v70;
  int v71;

  a69 = &STACK[0x448];
  std::vector<std::pair<std::vector<int>,float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a69);
  if (LOBYTE(STACK[0x490]))
  {
    STACK[0x480] = (unint64_t)&unk_1E5D268B8;
    v70 = (_DWORD *)STACK[0x488];
    if (STACK[0x488])
    {
      v71 = v70[14] - 1;
      v70[14] = v71;
      if (!v71)
        (*(void (**)(_DWORD *))(*(_QWORD *)v70 + 8))(v70);
    }
  }
  _Unwind_Resume(a1);
}

void quasar::prepareRecognizer(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  std::string *v5;
  std::string::size_type size;
  std::string::size_type v7;
  std::string::size_type v8;
  int v9;
  unsigned int v10;
  unint64_t v11;
  unsigned int v12;
  int v13;
  unsigned int v14;
  unsigned int v15;
  _QWORD *v16;
  signed int v17;
  _DWORD *Base;
  int v19;
  uint64_t v20;
  int v21;
  char v22[8];
  uint64_t v23;
  int v24;
  uint64_t v25;
  int v26;
  char v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  std::string v32;
  std::string v33;

  if (*(char *)(a1 + 23) < 0)
    std::string::__init_copy_ctor_external(&v32, *(const std::string::value_type **)a1, *(_QWORD *)(a1 + 8));
  else
    v32 = *(std::string *)a1;
  std::set<int>::set[abi:ne180100](&v30, a2 + 16);
  if ((v32.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v5 = &v32;
  else
    v5 = (std::string *)v32.__r_.__value_.__r.__words[0];
  if ((v32.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v32.__r_.__value_.__r.__words[2]);
  else
    size = v32.__r_.__value_.__l.__size_;
  memset(&v33, 0, sizeof(v33));
  std::string::reserve(&v33, size);
  if (!size)
    goto LABEL_40;
  v7 = 0;
  do
  {
    v8 = v7 + 1;
    v9 = v5->__r_.__value_.__s.__data_[v7];
    v10 = v5->__r_.__value_.__s.__data_[v7];
    if ((v9 & 0x80000000) == 0)
      goto LABEL_32;
    if (v8 == size)
    {
LABEL_14:
      v10 = -1;
      v8 = size;
      goto LABEL_32;
    }
    if (v10 < 0xE0)
    {
      if (v10 < 0xC2)
        goto LABEL_31;
      v13 = v10 & 0x1F;
    }
    else
    {
      if (v10 > 0xEF)
      {
        if (v10 > 0xF4)
          goto LABEL_31;
        v15 = v10 - 240;
        v11 = v5->__r_.__value_.__s.__data_[v8];
        if (((byte_1AE146E08[v11 >> 4] >> v15) & 1) == 0)
          goto LABEL_31;
        v8 = v7 + 2;
        if (v7 + 2 == size)
          goto LABEL_14;
        v12 = v5->__r_.__value_.__s.__data_[v8] ^ 0x80;
        if (v12 > 0x3F)
        {
LABEL_31:
          v10 = -1;
          goto LABEL_32;
        }
        LODWORD(v11) = v11 & 0x3F | (v15 << 6);
      }
      else
      {
        v11 = v9 & 0xF;
        if (((a00000000000000[v11] >> (v5->__r_.__value_.__s.__data_[v8] >> 5)) & 1) == 0)
          goto LABEL_31;
        v12 = v5->__r_.__value_.__s.__data_[v8] & 0x3F;
      }
      if (++v8 == size)
        goto LABEL_14;
      v13 = v12 | ((_DWORD)v11 << 6);
    }
    v14 = v5->__r_.__value_.__s.__data_[v8] ^ 0x80;
    v10 = v14 | (v13 << 6);
    if (v14 <= 0x3F)
      ++v8;
    else
      v10 = -1;
LABEL_32:
    v16 = v31;
    if (!v31)
    {
LABEL_37:
      std::string::push_back(&v33, 26);
      goto LABEL_39;
    }
    while (1)
    {
      v17 = *((_DWORD *)v16 + 7);
      if ((int)v10 >= v17)
        break;
LABEL_36:
      v16 = (_QWORD *)*v16;
      if (!v16)
        goto LABEL_37;
    }
    if (v17 < (int)v10)
    {
      ++v16;
      goto LABEL_36;
    }
    std::string::append(&v33, (const std::string::value_type *)v5 + v7, v8 - v7);
LABEL_39:
    v7 = v8;
  }
  while (v8 < size);
LABEL_40:
  std::__tree<int>::destroy((uint64_t)&v30, v31);
  if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v32.__r_.__value_.__l.__data_);
  fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::VectorFst(&v28);
  v24 = 3;
  v25 = 0;
  v26 = -1;
  v27 = 0;
  if ((fst::StringCompiler<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::operator()<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>(&v24, (uint64_t)&v33, (uint64_t)&v28) & 1) != 0)
  {
    v22[0] = FLAGS_fst_default_cache_gc;
    v23 = FLAGS_fst_default_cache_gc_limit;
    Base = (_DWORD *)fst::ComposeFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::CreateBase((uint64_t)&v28, a2, (uint64_t)v22);
    v19 = Base[14];
    *(_QWORD *)a3 = &unk_1E5D19270;
    *(_QWORD *)(a3 + 8) = Base;
    *(_BYTE *)(a3 + 16) = 1;
    if (!v19)
      (*(void (**)(_DWORD *))(*(_QWORD *)Base + 8))(Base);
  }
  else
  {
    *(_BYTE *)a3 = 0;
    *(_BYTE *)(a3 + 16) = 0;
  }
  v28 = &unk_1E5D256C0;
  v20 = v29;
  if (v29)
  {
    v21 = *(_DWORD *)(v29 + 56) - 1;
    *(_DWORD *)(v29 + 56) = v21;
    if (!v21)
      (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
  }
  if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v33.__r_.__value_.__l.__data_);
}

void sub_1AD8D8308(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, _DWORD *a15, char a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  uint64_t v24;
  int v26;

  if (a15)
  {
    v26 = a15[14] - 1;
    a15[14] = v26;
    if (!v26)
      (*(void (**)(_DWORD *))(*(_QWORD *)a15 + 8))(a15);
  }
  if (*(char *)(v24 - 65) < 0)
    operator delete(*(void **)(v24 - 88));
  _Unwind_Resume(exception_object);
}

void **std::vector<quasar::VoiceCommandInterpretation>::reserve(uint64_t *a1, unint64_t a2)
{
  void **result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7[5];

  v4 = a1[2];
  result = (void **)(a1 + 2);
  if (0x6DB6DB6DB6DB6DB7 * ((v4 - *a1) >> 4) < a2)
  {
    if (a2 >= 0x24924924924924ALL)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v5 = a1[1] - *a1;
    v7[4] = result;
    v7[0] = std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::VoiceCommandInterpretation>>((uint64_t)result, a2);
    v7[1] = (char *)v7[0] + v5;
    v7[2] = (char *)v7[0] + v5;
    v7[3] = (char *)v7[0] + 112 * v6;
    std::vector<quasar::VoiceCommandInterpretation>::__swap_out_circular_buffer(a1, v7);
    return std::__split_buffer<quasar::VoiceCommandInterpretation>::~__split_buffer(v7);
  }
  return result;
}

void sub_1AD8D844C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<quasar::VoiceCommandInterpretation>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

void quasar::VoiceCommandInterpretation::~VoiceCommandInterpretation(quasar::VoiceCommandInterpretation *this)
{
  void **v2;

  v2 = (void **)((char *)this + 88);
  std::vector<quasar::VoiceCommandArgument>::__destroy_vector::operator()[abi:ne180100](&v2);
  std::__tree<int>::destroy((uint64_t)this + 64, *((_QWORD **)this + 9));
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)this + 24);
  if (*((char *)this + 23) < 0)
    operator delete(*(void **)this);
}

uint64_t quasar::VoiceCommandRecognizeAny(uint64_t a1, uint64_t a2)
{
  uint64_t HasAnyOutput;
  uint64_t v5;
  int v6;
  std::string __p;
  void *v9;
  uint64_t v10;
  char v11;

  if (*(char *)(a1 + 23) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a1, *(_QWORD *)(a1 + 8));
  else
    __p = *(std::string *)a1;
  quasar::prepareRecognizer((uint64_t)&__p, a2, (uint64_t)&v9);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (*(char *)(a1 + 23) < 0)
  {
    if (!*(_QWORD *)(a1 + 8))
    {
LABEL_12:
      HasAnyOutput = 0;
      goto LABEL_13;
    }
  }
  else if (!*(_BYTE *)(a1 + 23))
  {
    goto LABEL_12;
  }
  if (!v11)
    goto LABEL_12;
  HasAnyOutput = quasar::FstHasAnyOutput((uint64_t)&v9);
LABEL_13:
  if (v11)
  {
    v9 = &unk_1E5D268B8;
    v5 = v10;
    if (v10)
    {
      v6 = *(_DWORD *)(v10 + 56) - 1;
      *(_DWORD *)(v10 + 56) = v6;
      if (!v6)
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
    }
  }
  return HasAnyOutput;
}

void sub_1AD8D85A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, char a17)
{
  uint64_t v17;
  _Unwind_Exception *v18;

  v18 = exception_object;
  if (a17)
  {
    quasar::VoiceCommandRecognizeAny(&a15, (uint64_t)exception_object, a2, v17 - 32);
    v18 = *(_Unwind_Exception **)(v17 - 32);
  }
  _Unwind_Resume(v18);
}

uint64_t quasar::isCompleteVoiceCommand(uint64_t a1)
{
  _DWORD *v1;
  _DWORD *v2;
  int v3;

  v1 = *(_DWORD **)(a1 + 88);
  v2 = *(_DWORD **)(a1 + 96);
  if (v1 == v2)
    return 1;
  v3 = 0;
  while (*v1 != 1)
  {
    if ((*v1 - 2) < 2)
      return 0;
LABEL_8:
    v1 += 14;
    if (v1 == v2)
      return 1;
  }
  if (v3 < 1)
  {
    ++v3;
    goto LABEL_8;
  }
  return 0;
}

void quasar::VoiceCommandArgument::~VoiceCommandArgument(quasar::VoiceCommandArgument *this)
{
  std::__tree<int>::destroy((uint64_t)this + 32, *((_QWORD **)this + 5));
  std::__tree<int>::destroy((uint64_t)this + 8, *((_QWORD **)this + 2));
}

uint64_t quasar::minValIntSet(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  BOOL v7;

  v3 = (_QWORD *)*a1;
  v1 = a1 + 1;
  v2 = v3;
  if (v3 != v1)
  {
    v4 = v2;
    while (1)
    {
      v5 = (_QWORD *)v4[1];
      v6 = v4;
      if (v5)
      {
        do
        {
          v4 = v5;
          v5 = (_QWORD *)*v5;
        }
        while (v5);
      }
      else
      {
        do
        {
          v4 = (_QWORD *)v6[2];
          v7 = *v4 == (_QWORD)v6;
          v6 = v4;
        }
        while (!v7);
      }
      if (v4 == v1)
        break;
      if (*((_DWORD *)v4 + 7) < *((_DWORD *)v2 + 7))
        v2 = v4;
    }
  }
  if (v2 == v1)
    return 0x7FFFFFFFLL;
  else
    return *((unsigned int *)v2 + 7);
}

uint64_t quasar::getInterpretationStartCharIndex(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  BOOL v4;
  char v5;
  _QWORD *v6;
  _QWORD *v7;
  int v8;
  _QWORD *v9;
  int v10;
  _QWORD *v11;
  int v12;
  _QWORD *v13;
  int v14;
  uint64_t result;
  int v16;

  v2 = (_QWORD *)a1[11];
  v3 = (_QWORD *)a1[12];
  v4 = v2 == v3 || v2 + 7 == v3;
  v5 = v4;
  v6 = (_QWORD *)a1[11];
  if (!v4)
  {
    v7 = v2 + 8;
    v6 = (_QWORD *)a1[11];
    do
    {
      v8 = quasar::minValIntSet(v7);
      if (v8 < (int)quasar::minValIntSet(v6 + 1))
        v6 = v7 - 1;
      v9 = v7 + 6;
      v7 += 7;
    }
    while (v9 != v3);
  }
  if (v6 == v3)
  {
    v10 = 0x7FFFFFFF;
    if ((v5 & 1) != 0)
      goto LABEL_20;
  }
  else
  {
    v10 = quasar::minValIntSet(v6 + 1);
    if ((v5 & 1) != 0)
      goto LABEL_20;
  }
  v11 = v2 + 11;
  do
  {
    v12 = quasar::minValIntSet(v11);
    if (v12 < (int)quasar::minValIntSet(v2 + 4))
      v2 = v11 - 4;
    v13 = v11 + 3;
    v11 += 7;
  }
  while (v13 != v3);
LABEL_20:
  if (v2 == v3)
    v14 = 0x7FFFFFFF;
  else
    v14 = quasar::minValIntSet(v2 + 4);
  LODWORD(result) = quasar::minValIntSet(a1 + 8);
  if (v10 >= v14)
    v16 = v14;
  else
    v16 = v10;
  if ((int)result >= v16)
    return v16;
  else
    return result;
}

uint64_t quasar::getCommandStartCharIndex(uint64_t *a1, uint64_t *a2, int a3)
{
  uint64_t v4;
  unint64_t v5;
  int v6;
  const std::string *v7;
  int64_t size;
  char *v9;
  char *v10;
  void *v11;
  char *v12;
  std::string::size_type v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  const std::string::value_type *v19;
  std::string::size_type v20;
  uint64_t v21;
  int v22;
  unsigned int *v23;
  const quasar::VoiceCommandInterpretation *v24;
  std::string *v25;
  std::string *v26;
  unsigned int *v27;
  unsigned int *v28;
  std::string *v29;
  int v30;
  int InterpretationStartCharIndex;
  uint64_t v32;
  unint64_t v34;
  uint64_t *v36;
  _BYTE v37[32];
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  std::string v53;
  unsigned int *v54;
  unsigned int *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t *v59;
  _QWORD *v60[2];
  unsigned int *v61;
  std::string *v62;
  unint64_t v63;
  std::string v64;
  unsigned int *v65;

  memset(&v64, 0, sizeof(v64));
  v61 = 0;
  v62 = 0;
  v63 = 0;
  v60[0] = 0;
  v60[1] = 0;
  v58 = 0;
  v59 = (uint64_t *)v60;
  v56 = 0;
  v57 = 0;
  std::vector<quasar::Token>::__init_with_size[abi:ne180100]<quasar::Token*,quasar::Token*>(&v56, *a2, a2[1], 0x6DB6DB6DB6DB6DB7 * ((a2[1] - *a2) >> 5));
  v36 = a1;
  *(_DWORD *)v37 = 0;
  v54 = (unsigned int *)v37;
  *((_DWORD *)std::__tree<std::__value_type<int,float>,std::__map_value_compare<int,std::__value_type<int,float>,std::less<int>,true>,std::allocator<std::__value_type<int,float>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(&v59, (int *)v37, (uint64_t)&std::piecewise_construct, &v54)+ 8) = 0;
  v4 = v56;
  if (v57 != v56)
  {
    v5 = 0;
    v6 = 0;
    do
    {
      v7 = (const std::string *)(v4 + 224 * v5);
      if (SHIBYTE(v7->__r_.__value_.__r.__words[2]) < 0)
      {
        v9 = (char *)v7->__r_.__value_.__r.__words[0];
        size = v7->__r_.__value_.__l.__size_;
      }
      else
      {
        size = HIBYTE(v7->__r_.__value_.__r.__words[2]);
        v9 = (char *)(v4 + 224 * v5);
      }
      v10 = &v9[size];
      if (size >= 1)
      {
        v11 = v9;
        do
        {
          v12 = (char *)memchr(v11, 92, size);
          if (!v12)
            break;
          if (*v12 == 92)
            goto LABEL_12;
          v11 = v12 + 1;
          size = v10 - (_BYTE *)v11;
        }
        while (v10 - (_BYTE *)v11 > 0);
      }
      v12 = v10;
LABEL_12:
      if (v12 == v10)
        v13 = -1;
      else
        v13 = v12 - v9;
      std::string::basic_string((std::string *)v37, v7, 0, v13, (std::allocator<char> *)&v54);
      v14 = v56 + 224 * v5;
      if (*(char *)(v14 + 23) < 0)
        operator delete(*(void **)v14);
      v15 = *(_OWORD *)v37;
      *(_QWORD *)(v14 + 16) = *(_QWORD *)&v37[16];
      *(_OWORD *)v14 = v15;
      v16 = v56;
      if (*(_BYTE *)(v56 + 224 * v5 + 45))
      {
        std::string::append(&v64, " ");
        ++v6;
        v16 = v56;
      }
      v17 = v16 + 224 * v5;
      v18 = *(char *)(v17 + 23);
      if (v18 >= 0)
        v19 = (const std::string::value_type *)v17;
      else
        v19 = *(const std::string::value_type **)v17;
      if (v18 >= 0)
        v20 = *(unsigned __int8 *)(v17 + 23);
      else
        v20 = *(_QWORD *)(v17 + 8);
      std::string::append(&v64, v19, v20);
      v21 = v56 + 224 * v5;
      if (*(char *)(v21 + 23) < 0)
        v21 = *(_QWORD *)(v21 + 8);
      else
        LODWORD(v21) = *(unsigned __int8 *)(v21 + 23);
      v6 += v21;
      v22 = *(unsigned __int8 *)(v56 + 224 * v5++ + 44);
      if (v22 && 0x6DB6DB6DB6DB6DB7 * ((v57 - v56) >> 5) > v5)
      {
        std::string::append(&v64, " ");
        ++v6;
      }
      *(_DWORD *)v37 = v5;
      v54 = (unsigned int *)v37;
      *((_DWORD *)std::__tree<std::__value_type<int,float>,std::__map_value_compare<int,std::__value_type<int,float>,std::less<int>,true>,std::allocator<std::__value_type<int,float>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(&v59, (int *)v37, (uint64_t)&std::piecewise_construct, &v54)+ 8) = v6;
      v4 = v56;
    }
    while (0x6DB6DB6DB6DB6DB7 * ((v57 - v56) >> 5) > v5);
  }
  if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v53, v64.__r_.__value_.__l.__data_, v64.__r_.__value_.__l.__size_);
  else
    v53 = v64;
  quasar::VoiceCommandRecognize((uint64_t)&v53, *v36, (uint64_t *)&v54);
  if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v53.__r_.__value_.__l.__data_);
  v24 = (const quasar::VoiceCommandInterpretation *)v54;
  v23 = v55;
  if (v54 == v55)
  {
    v27 = v54;
  }
  else
  {
    do
    {
      if (quasar::isCompleteVoiceCommand((uint64_t)v24))
      {
        v25 = v62;
        if ((unint64_t)v62 >= v63)
        {
          v26 = (std::string *)std::vector<quasar::VoiceCommandInterpretation>::__push_back_slow_path<quasar::VoiceCommandInterpretation const&>((uint64_t *)&v61, v24);
        }
        else
        {
          quasar::VoiceCommandInterpretation::VoiceCommandInterpretation(v62, v24);
          v26 = (std::string *)((char *)v25 + 112);
        }
        v62 = v26;
      }
      v24 = (const quasar::VoiceCommandInterpretation *)((char *)v24 + 112);
    }
    while (v24 != (const quasar::VoiceCommandInterpretation *)v23);
    v27 = v54;
    v24 = (const quasar::VoiceCommandInterpretation *)v55;
  }
  if (a3)
    v28 = v61;
  else
    v28 = v27;
  if (a3)
    v29 = v62;
  else
    v29 = (std::string *)v24;
  if (v28 == (unsigned int *)v29)
    goto LABEL_58;
  v30 = 0x7FFFFFFF;
  do
  {
    InterpretationStartCharIndex = quasar::getInterpretationStartCharIndex(v28);
    if (v30 >= InterpretationStartCharIndex)
      v30 = InterpretationStartCharIndex;
    v28 += 28;
  }
  while (v28 != (unsigned int *)v29);
  if (v30 == 0x7FFFFFFF)
  {
LABEL_58:
    v32 = 0xFFFFFFFFLL;
  }
  else
  {
    v34 = 0;
    while (0x6DB6DB6DB6DB6DB7 * ((v57 - v56) >> 5) > v34)
    {
      *(_DWORD *)v37 = ++v34;
      v65 = (unsigned int *)v37;
      if (v30 < *((_DWORD *)std::__tree<std::__value_type<int,float>,std::__map_value_compare<int,std::__value_type<int,float>,std::less<int>,true>,std::allocator<std::__value_type<int,float>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(&v59, (int *)v37, (uint64_t)&std::piecewise_construct, &v65)+ 8))
      {
        v32 = (v34 - 1);
        goto LABEL_67;
      }
    }
    v32 = 0xFFFFFFFFLL;
LABEL_67:
    if (quasar::gLogLevel >= 6)
    {
      v51 = 0u;
      v52 = 0u;
      v49 = 0u;
      v50 = 0u;
      v47 = 0u;
      v48 = 0u;
      v45 = 0u;
      v46 = 0u;
      v43 = 0u;
      v44 = 0u;
      v41 = 0u;
      v42 = 0u;
      v39 = 0u;
      v40 = 0u;
      v38 = 0u;
      memset(v37, 0, sizeof(v37));
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v37);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37, (uint64_t)"CommandStartIndex", 17);
      std::ostream::operator<<();
      quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)v37);
    }
  }
  *(_QWORD *)v37 = &v54;
  std::vector<quasar::VoiceCommandInterpretation>::__destroy_vector::operator()[abi:ne180100]((void ***)v37);
  *(_QWORD *)v37 = &v56;
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)v37);
  std::__tree<int>::destroy((uint64_t)&v59, v60[0]);
  *(_QWORD *)v37 = &v61;
  std::vector<quasar::VoiceCommandInterpretation>::__destroy_vector::operator()[abi:ne180100]((void ***)v37);
  if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v64.__r_.__value_.__l.__data_);
  return v32;
}

void sub_1AD8D8CA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void **a11)
{
  uint64_t v11;

  a11 = (void **)(v11 - 224);
  std::vector<quasar::VoiceCommandInterpretation>::__destroy_vector::operator()[abi:ne180100](&a11);
  a11 = (void **)(v11 - 200);
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100](&a11);
  std::__tree<int>::destroy(v11 - 176, *(_QWORD **)(v11 - 168));
  a11 = (void **)(v11 - 152);
  std::vector<quasar::VoiceCommandInterpretation>::__destroy_vector::operator()[abi:ne180100](&a11);
  if (*(char *)(v11 - 105) < 0)
    operator delete(*(void **)(v11 - 128));
  _Unwind_Resume(a1);
}

uint64_t fst::StringCompiler<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::operator()<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>(_DWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  int v7;
  void *__p;
  void *v9;
  uint64_t v10;

  __p = 0;
  v9 = 0;
  v10 = 0;
  v5 = fst::StringCompiler<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::ConvertStringToLabels(a1, a2, (char **)&__p);
  if ((v5 & 1) != 0)
  {
    v7 = 0;
    fst::StringCompiler<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::Compile((uint64_t)a1, &__p, a3, (float *)&v7);
  }
  if (__p)
  {
    v9 = __p;
    operator delete(__p);
  }
  return v5;
}

void sub_1AD8D8DD0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t fst::StringCompiler<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::ConvertStringToLabels(_DWORD *a1, uint64_t a2, char **a3)
{
  char *v5;
  BOOL v6;
  uint64_t v7;
  unint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  int v11;
  char *v12;
  char *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  char *v19;
  int v20;
  unint64_t v21;
  std::string::value_type *v24;
  std::string::size_type v25;
  uint64_t v26;
  std::string *v27;
  __int128 v28;
  char *v29;
  char **v30;
  unint64_t v31;
  unint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  char *v39;
  char *v40;
  char *v41;
  int v42;
  char v43;
  std::string v44;
  void *__p[2];
  int64_t v46;
  void *v47;
  _BYTE *v48;
  uint64_t v49;

  v5 = *a3;
  a3[1] = *a3;
  if (*a1 == 3)
    return fst::UTF8StringToLabels<int>((uint64_t *)a2, (uint64_t)a3);
  if (*a1 == 2)
  {
    v6 = *(char *)(a2 + 23) < 0;
    v7 = *(unsigned __int8 *)(a2 + 23);
    if ((v7 & 0x80u) != 0)
      v7 = *(_QWORD *)(a2 + 8);
    if (v7)
    {
      v8 = 0;
      v9 = a3 + 2;
      do
      {
        if (v6)
          v10 = *(_QWORD *)a2;
        else
          v10 = a2;
        v11 = *(unsigned __int8 *)(v10 + v8);
        if ((unint64_t)v5 >= *v9)
        {
          v13 = *a3;
          v14 = (v5 - *a3) >> 2;
          v15 = v14 + 1;
          if ((unint64_t)(v14 + 1) >> 62)
            std::vector<int>::__throw_length_error[abi:ne180100]();
          v16 = *v9 - (_QWORD)v13;
          if (v16 >> 1 > v15)
            v15 = v16 >> 1;
          if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFFCLL)
            v17 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v17 = v15;
          if (v17)
          {
            v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)(a3 + 2), v17);
            v13 = *a3;
            v5 = a3[1];
          }
          else
          {
            v18 = 0;
          }
          v19 = &v18[4 * v14];
          *(_DWORD *)v19 = v11;
          v12 = v19 + 4;
          while (v5 != v13)
          {
            v20 = *((_DWORD *)v5 - 1);
            v5 -= 4;
            *((_DWORD *)v19 - 1) = v20;
            v19 -= 4;
          }
          *a3 = v19;
          a3[1] = v12;
          a3[2] = &v18[4 * v17];
          if (v13)
            operator delete(v13);
        }
        else
        {
          *(_DWORD *)v5 = v11;
          v12 = v5 + 4;
        }
        a3[1] = v12;
        ++v8;
        v6 = *(char *)(a2 + 23) < 0;
        v21 = *(_QWORD *)(a2 + 8);
        if (*(char *)(a2 + 23) >= 0)
          v21 = *(unsigned __int8 *)(a2 + 23);
        v5 = v12;
      }
      while (v8 < v21);
    }
    return 1;
  }
  v24 = (std::string::value_type *)operator new[]();
  if (*(char *)(a2 + 23) >= 0)
    v25 = *(unsigned __int8 *)(a2 + 23);
  else
    v25 = *(_QWORD *)(a2 + 8);
  std::string::copy((const std::string *)a2, v24, v25, 0);
  v26 = *(unsigned __int8 *)(a2 + 23);
  if ((v26 & 0x80u) != 0)
    v26 = *(_QWORD *)(a2 + 8);
  v24[v26] = 0;
  v47 = 0;
  v48 = 0;
  v49 = 0;
  std::string::basic_string[abi:ne180100]<0>(&v44, FLAGS_fst_field_separator[0]);
  v27 = std::string::insert(&v44, 0, "\n");
  v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
  v46 = v27->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v28;
  v27->__r_.__value_.__l.__size_ = 0;
  v27->__r_.__value_.__r.__words[2] = 0;
  v27->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v44.__r_.__value_.__l.__data_);
  if (v46 >= 0)
    v29 = (char *)__p;
  else
    v29 = (char *)__p[0];
  fst::SplitToVector(v24, v29, &v47, 1);
  v30 = (char **)v47;
  if (v48 == v47)
  {
LABEL_62:
    MEMORY[0x1AF44D160](v24, 0x1000C8077774924);
    v43 = 1;
  }
  else
  {
    v31 = 0;
    while (1)
    {
      LODWORD(v44.__r_.__value_.__l.__data_) = 0;
      if ((fst::StringCompiler<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::ConvertSymbolToLabel((uint64_t)a1, v30[v31], &v44) & 1) == 0)break;
      v33 = a3[1];
      v32 = (unint64_t)a3[2];
      if ((unint64_t)v33 >= v32)
      {
        v34 = *a3;
        v35 = (v33 - *a3) >> 2;
        v36 = v35 + 1;
        if ((unint64_t)(v35 + 1) >> 62)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v37 = v32 - (_QWORD)v34;
        if (v37 >> 1 > v36)
          v36 = v37 >> 1;
        if ((unint64_t)v37 >= 0x7FFFFFFFFFFFFFFCLL)
          v38 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v38 = v36;
        if (v38)
        {
          v39 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)(a3 + 2), v38);
          v34 = *a3;
          v33 = a3[1];
        }
        else
        {
          v39 = 0;
        }
        v40 = &v39[4 * v35];
        *(_DWORD *)v40 = v44.__r_.__value_.__l.__data_;
        v41 = v40 + 4;
        while (v33 != v34)
        {
          v42 = *((_DWORD *)v33 - 1);
          v33 -= 4;
          *((_DWORD *)v40 - 1) = v42;
          v40 -= 4;
        }
        *a3 = v40;
        a3[1] = v41;
        a3[2] = &v39[4 * v38];
        if (v34)
          operator delete(v34);
        a3[1] = v41;
      }
      else
      {
        *(_DWORD *)v33 = v44.__r_.__value_.__l.__data_;
        a3[1] = v33 + 4;
      }
      ++v31;
      v30 = (char **)v47;
      if (v31 >= (v48 - (_BYTE *)v47) >> 3)
        goto LABEL_62;
    }
    MEMORY[0x1AF44D160](v24, 0x1000C8077774924);
    v43 = 0;
  }
  if (SHIBYTE(v46) < 0)
    operator delete(__p[0]);
  if (v47)
  {
    v48 = v47;
    operator delete(v47);
  }
  return (v43 & 1) != 0;
}

void sub_1AD8D91CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23)
{
  if (a21 < 0)
    operator delete(__p);
  if (a22)
    operator delete(a22);
  _Unwind_Resume(exception_object);
}

uint64_t fst::StringCompiler<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::Compile(uint64_t a1, _QWORD *a2, uint64_t a3, float *a4)
{
  int v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;

  (*(void (**)(uint64_t))(*(_QWORD *)a3 + 224))(a3);
  while (1)
  {
    v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 160))(a3);
    v8 = a2[1];
    if (v7 > (unint64_t)((v8 - *a2) >> 2))
      break;
    (*(void (**)(uint64_t))(*(_QWORD *)a3 + 200))(a3);
  }
  if (v8 != *a2)
  {
    v9 = 0;
    do
    {
      v10 = v9 + 1;
      (*(void (**)(uint64_t))(*(_QWORD *)a3 + 208))(a3);
      v9 = v10;
    }
    while (v10 < (uint64_t)(a2[1] - *a2) >> 2);
  }
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a3 + 176))(a3, 0);
  return (*(uint64_t (**)(uint64_t, _QWORD, float))(*(_QWORD *)a3 + 184))(a3, (a2[1] - *a2) >> 2, *a4);
}

uint64_t fst::UTF8StringToLabels<int>(uint64_t *a1, uint64_t a2)
{
  int v2;
  uint64_t *v3;
  unint64_t v4;
  uint64_t v6;
  int v7;
  uint64_t v8;
  int v9;
  unsigned int v10;
  unint64_t v11;
  unsigned int *v12;
  _DWORD *v13;
  int16x4_t v14;
  uint8x8_t v15;
  __int32 v16;
  int v17;
  int v18;
  unint64_t v19;
  _BYTE *v20;
  int v21;
  int *v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char *v27;
  unint64_t v28;
  int *v29;
  _DWORD *v30;
  char *v31;
  int v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  int v36;
  fst *v38;
  _QWORD *v39;
  fst *v40;
  _QWORD *v41;
  fst *v42;
  _QWORD *v43;
  fst *v44;
  _QWORD *v45;
  void *__p[2];
  char v47;
  char v48;

  v2 = *((char *)a1 + 23);
  if (v2 >= 0)
    v3 = a1;
  else
    v3 = (uint64_t *)*a1;
  if (v2 >= 0)
    v4 = *((unsigned __int8 *)a1 + 23);
  else
    v4 = a1[1];
  if (!v4)
    return 1;
  v6 = 0;
  v7 = 0;
  v8 = a2 + 16;
  while (1)
  {
    ++v7;
    v9 = *((char *)v3 + v6);
    v10 = v9;
    if ((v9 & 0x80000000) == 0)
    {
      v12 = *(unsigned int **)(a2 + 8);
      v11 = *(_QWORD *)(a2 + 16);
      if ((unint64_t)v12 < v11)
      {
        *v12 = v10;
        v13 = v12 + 1;
        goto LABEL_33;
      }
      v22 = *(int **)a2;
      v23 = ((uint64_t)v12 - *(_QWORD *)a2) >> 2;
      v24 = v23 + 1;
      if (!((unint64_t)(v23 + 1) >> 62))
      {
        v25 = v11 - (_QWORD)v22;
        if (v25 >> 1 > v24)
          v24 = v25 >> 1;
        if ((unint64_t)v25 >= 0x7FFFFFFFFFFFFFFCLL)
          v26 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v26 = v24;
        if (v26)
        {
          v27 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v8, v26);
          v22 = *(int **)a2;
          v12 = *(unsigned int **)(a2 + 8);
        }
        else
        {
          v27 = 0;
        }
        v31 = &v27[4 * v23];
        *(_DWORD *)v31 = v10;
        v30 = v31 + 4;
        while (v12 != (unsigned int *)v22)
        {
          v32 = *--v12;
          *((_DWORD *)v31 - 1) = v32;
          v31 -= 4;
        }
LABEL_50:
        *(_QWORD *)a2 = v31;
        *(_QWORD *)(a2 + 8) = v30;
        *(_QWORD *)(a2 + 16) = &v27[4 * v26];
        if (v22)
          operator delete(v22);
        goto LABEL_52;
      }
      goto LABEL_60;
    }
    if ((v9 & 0xC0) == 0x80)
      break;
    v14 = (int16x4_t)vand_s8((int8x8_t)vcgt_u16((uint16x4_t)vdup_n_s16(v9), (uint16x4_t)0xF700EF00BF00DFLL), (int8x8_t)0x8000400020001);
    v14.i32[0] = vaddv_s16(v14) & 0xF;
    v15 = (uint8x8_t)vcnt_s8((int8x8_t)v14);
    v15.i16[0] = vaddlv_u8(v15);
    v16 = v15.i32[0];
    if (v10 > 0xFB)
      v16 = v15.i32[0] + 1;
    v17 = -1 << (6 - v16);
    v18 = v10 & ~v17;
    if (!v16)
    {
      v21 = v10 & ~v17;
      goto LABEL_31;
    }
    v19 = v4 - v7;
    v20 = (char *)v3 + v7;
    do
    {
      if (!v19)
      {
        std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
        v38 = fst::LogMessage::LogMessage((fst *)&v48, (uint64_t)__p);
        v39 = (_QWORD *)fst::cerr(v38);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v39, (uint64_t)"UTF8StringToLabels: truncated utf-8 byte sequence", 49);
        goto LABEL_56;
      }
      if ((*v20 & 0xC0) != 0x80)
      {
        std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
        v40 = fst::LogMessage::LogMessage((fst *)&v48, (uint64_t)__p);
        v41 = (_QWORD *)fst::cerr(v40);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v41, (uint64_t)"UTF8StringToLabels: missing/invalid continuation byte", 53);
        goto LABEL_56;
      }
      v21 = *v20 & 0x3F | (v18 << 6);
      --v19;
      ++v20;
      ++v7;
      v18 = v21;
      --v16;
    }
    while (v16);
    if (v21 < 0)
    {
      std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
      v44 = fst::LogMessage::LogMessage((fst *)&v48, (uint64_t)__p);
      v45 = (_QWORD *)fst::cerr(v44);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v45, (uint64_t)"UTF8StringToLabels: Invalid character found: ", 45);
      std::ostream::operator<<();
      goto LABEL_56;
    }
LABEL_31:
    v29 = *(int **)(a2 + 8);
    v28 = *(_QWORD *)(a2 + 16);
    if ((unint64_t)v29 >= v28)
    {
      v22 = *(int **)a2;
      v33 = ((uint64_t)v29 - *(_QWORD *)a2) >> 2;
      v34 = v33 + 1;
      if (!((unint64_t)(v33 + 1) >> 62))
      {
        v35 = v28 - (_QWORD)v22;
        if (v35 >> 1 > v34)
          v34 = v35 >> 1;
        if ((unint64_t)v35 >= 0x7FFFFFFFFFFFFFFCLL)
          v26 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v26 = v34;
        if (v26)
        {
          v27 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v8, v26);
          v22 = *(int **)a2;
          v29 = *(int **)(a2 + 8);
        }
        else
        {
          v27 = 0;
        }
        v31 = &v27[4 * v33];
        *(_DWORD *)v31 = v21;
        v30 = v31 + 4;
        while (v29 != v22)
        {
          v36 = *--v29;
          *((_DWORD *)v31 - 1) = v36;
          v31 -= 4;
        }
        goto LABEL_50;
      }
LABEL_60:
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    *v29 = v21;
    v13 = v29 + 1;
LABEL_33:
    v30 = v13;
LABEL_52:
    *(_QWORD *)(a2 + 8) = v30;
    v6 = v7;
    if (v4 <= v7)
      return 1;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
  v42 = fst::LogMessage::LogMessage((fst *)&v48, (uint64_t)__p);
  v43 = (_QWORD *)fst::cerr(v42);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"UTF8StringToLabels: continuation byte as lead byte", 50);
LABEL_56:
  fst::LogMessage::~LogMessage((fst::LogMessage *)&v48);
  if (v47 < 0)
    operator delete(__p[0]);
  return 0;
}

void sub_1AD8D966C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t fst::StringCompiler<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::ConvertSymbolToLabel(uint64_t a1, char *__str, _DWORD *a3)
{
  uint64_t v6;
  uint64_t v7;
  fst *v8;
  _QWORD *v9;
  _QWORD *v10;
  size_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  char **p_endptr;
  fst *v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  size_t v23;
  _QWORD *v24;
  char v26;
  char *__endptr;
  void *__p[2];
  char v29;

  v6 = *(_QWORD *)(a1 + 8);
  if (v6)
  {
    v7 = (*(uint64_t (**)(uint64_t, char *))(*(_QWORD *)v6 + 104))(v6, __str);
    if (v7 == -1 && (v7 = *(int *)(a1 + 16), (_DWORD)v7 == -1) || v7 < 0 && !*(_BYTE *)(a1 + 20))
    {
      if (FLAGS_v >= 1)
      {
        std::string::basic_string[abi:ne180100]<0>(__p, "INFO");
        v8 = fst::LogMessage::LogMessage((fst *)&__endptr, (uint64_t)__p);
        v9 = (_QWORD *)fst::cerr(v8);
        v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"StringCompiler::ConvertSymbolToLabel: Symbol \"", 46);
        v11 = strlen(__str);
        v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)__str, v11);
        v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"\" is not mapped to any integer label, symbol table = ", 53);
        v14 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 48))(*(_QWORD *)(a1 + 8));
        v15 = *(char *)(v14 + 23);
        if (v15 >= 0)
          v16 = v14;
        else
          v16 = *(_QWORD *)v14;
        if (v15 >= 0)
          v17 = *(unsigned __int8 *)(v14 + 23);
        else
          v17 = *(_QWORD *)(v14 + 8);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, v16, v17);
        p_endptr = &__endptr;
        goto LABEL_19;
      }
      return 0;
    }
  }
  else
  {
    __endptr = 0;
    v7 = strtoll(__str, &__endptr, 10);
    if (__endptr < &__str[strlen(__str)] || !*(_BYTE *)(a1 + 20) && v7 < 0)
    {
      if (FLAGS_v >= 1)
      {
        std::string::basic_string[abi:ne180100]<0>(__p, "INFO");
        v19 = fst::LogMessage::LogMessage((fst *)&v26, (uint64_t)__p);
        v20 = (_QWORD *)fst::cerr(v19);
        v21 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"StringCompiler::ConvertSymbolToLabel: Bad label integer ", 56);
        v22 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)"= \"", 3);
        v23 = strlen(__str);
        v24 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)__str, v23);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)"\"", 1);
        p_endptr = (char **)&v26;
LABEL_19:
        fst::LogMessage::~LogMessage((fst::LogMessage *)p_endptr);
        if (v29 < 0)
          operator delete(__p[0]);
      }
      return 0;
    }
  }
  *a3 = v7;
  return 1;
}

void sub_1AD8D98B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::vector<std::pair<std::vector<int>,float>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    std::vector<std::pair<std::vector<int>,float>>::__clear[abi:ne180100]((uint64_t *)v2);
    operator delete(**a1);
  }
}

void std::vector<std::pair<std::vector<int>,float>>::__clear[abi:ne180100](uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  void *v6;

  v3 = *a1;
  v2 = a1[1];
  if (v2 != *a1)
  {
    v4 = a1[1];
    do
    {
      v6 = *(void **)(v4 - 32);
      v4 -= 32;
      v5 = v6;
      if (v6)
      {
        *(_QWORD *)(v2 - 24) = v5;
        operator delete(v5);
      }
      v2 = v4;
    }
    while (v4 != v3);
  }
  a1[1] = v3;
}

_QWORD *std::__tree<std::__value_type<std::string_view,int>,std::__map_value_compare<std::string_view,std::__value_type<std::string_view,int>,std::less<std::string_view>,true>,std::allocator<std::__value_type<std::string_view,int>>>::find<std::string_view>(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v5;
  _QWORD *v6;
  int v7;
  _QWORD *v8;

  v2 = (_QWORD *)(a1 + 8);
  v3 = *(_QWORD **)(a1 + 8);
  if (!v3)
    return v2;
  v5 = a1 + 16;
  v6 = (_QWORD *)(a1 + 8);
  do
  {
    v7 = std::less<std::string_view>::operator()[abi:ne180100](v5, (uint64_t)(v3 + 4), a2);
    v8 = v3 + 1;
    if (!v7)
    {
      v8 = v3;
      v6 = v3;
    }
    v3 = (_QWORD *)*v8;
  }
  while (*v8);
  if (v6 == v2 || std::less<std::string_view>::operator()[abi:ne180100](v5, a2, (uint64_t)(v6 + 4)))
    return v2;
  return v6;
}

uint64_t std::vector<quasar::VoiceCommandInterpretation>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<quasar::VoiceCommandInterpretation>,std::reverse_iterator<quasar::VoiceCommandInterpretation*>,std::reverse_iterator<quasar::VoiceCommandInterpretation*>,std::reverse_iterator<quasar::VoiceCommandInterpretation*>>((uint64_t)(a1 + 2), a1[1], (const quasar::VoiceCommandInterpretation *)a1[1], *a1, (const quasar::VoiceCommandInterpretation *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<quasar::VoiceCommandInterpretation>,std::reverse_iterator<quasar::VoiceCommandInterpretation*>,std::reverse_iterator<quasar::VoiceCommandInterpretation*>,std::reverse_iterator<quasar::VoiceCommandInterpretation*>>(uint64_t a1, uint64_t a2, const quasar::VoiceCommandInterpretation *a3, uint64_t a4, const quasar::VoiceCommandInterpretation *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  const quasar::VoiceCommandInterpretation *v9;
  uint64_t v10;
  _QWORD v12[3];
  char v13;
  __int128 v14;
  __int128 v15;

  v7 = a7;
  *(_QWORD *)&v15 = a6;
  *((_QWORD *)&v15 + 1) = a7;
  v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  v13 = 0;
  if (a3 == a5)
  {
    v10 = a6;
  }
  else
  {
    v9 = a3;
    do
    {
      v9 = (const quasar::VoiceCommandInterpretation *)((char *)v9 - 112);
      quasar::VoiceCommandInterpretation::VoiceCommandInterpretation((std::string *)(v7 - 112), v9);
      v7 = *((_QWORD *)&v15 + 1) - 112;
      *((_QWORD *)&v15 + 1) -= 112;
    }
    while (v9 != a5);
    v10 = v15;
  }
  v13 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<quasar::VoiceCommandInterpretation>,std::reverse_iterator<quasar::VoiceCommandInterpretation*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return v10;
}

void sub_1AD8D9B2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<quasar::VoiceCommandInterpretation>,std::reverse_iterator<quasar::VoiceCommandInterpretation*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<quasar::VoiceCommandInterpretation>,std::reverse_iterator<quasar::VoiceCommandInterpretation*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<quasar::VoiceCommandInterpretation>,std::reverse_iterator<quasar::VoiceCommandInterpretation*>>::operator()[abi:ne180100]((uint64_t *)a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<quasar::VoiceCommandInterpretation>,std::reverse_iterator<quasar::VoiceCommandInterpretation*>>::operator()[abi:ne180100](uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(a1[2] + 8);
  v2 = *(_QWORD *)(a1[1] + 8);
  if (v1 != v2)
  {
    v3 = *a1;
    do
    {
      std::allocator<quasar::VoiceCommandInterpretation>::destroy[abi:ne180100](v3, v1);
      v1 += 112;
    }
    while (v1 != v2);
  }
}

void **std::__split_buffer<quasar::VoiceCommandInterpretation>::~__split_buffer(void **a1)
{
  std::__split_buffer<quasar::VoiceCommandInterpretation>::clear[abi:ne180100](a1);
  if (*a1)
    operator delete(*a1);
  return a1;
}

void std::__split_buffer<quasar::VoiceCommandInterpretation>::clear[abi:ne180100](_QWORD *a1)
{
  uint64_t i;
  uint64_t v2;
  uint64_t v4;

  v2 = a1[1];
  for (i = a1[2]; i != v2; i = a1[2])
  {
    v4 = a1[4];
    a1[2] = i - 112;
    std::allocator<quasar::VoiceCommandInterpretation>::destroy[abi:ne180100](v4, i - 112);
  }
}

uint64_t *std::__tree<std::__value_type<int,quasar::VoiceCommandActiveSetCompilation::CommandSpec>,std::__map_value_compare<int,std::__value_type<int,quasar::VoiceCommandActiveSetCompilation::CommandSpec>,std::less<int>,true>,std::allocator<std::__value_type<int,quasar::VoiceCommandActiveSetCompilation::CommandSpec>>>::__equal_range_multi<int>(uint64_t a1, int *a2)
{
  uint64_t *v2;
  uint64_t *v3;
  int v4;
  int v5;
  uint64_t *result;
  uint64_t *v7;
  int v8;
  BOOL v9;
  uint64_t **v10;
  uint64_t v11;
  uint64_t *v12;

  v2 = (uint64_t *)(a1 + 8);
  v3 = *(uint64_t **)(a1 + 8);
  if (!v3)
    return v2;
  v4 = *a2;
  while (1)
  {
    v5 = *((_DWORD *)v3 + 8);
    if (v4 >= v5)
      break;
    v2 = v3;
LABEL_7:
    v3 = (uint64_t *)*v3;
    if (!v3)
      return v2;
  }
  if (v5 < v4)
  {
    ++v3;
    goto LABEL_7;
  }
  v7 = (uint64_t *)*v3;
  result = v3;
  if (*v3)
  {
    result = v3;
    do
    {
      v8 = *((_DWORD *)v7 + 8);
      v9 = v8 < v4;
      if (v8 >= v4)
        v10 = (uint64_t **)v7;
      else
        v10 = (uint64_t **)(v7 + 1);
      if (!v9)
        result = v7;
      v7 = *v10;
    }
    while (*v10);
  }
  v11 = v3[1];
  if (v11)
  {
    do
    {
      if (v4 >= *(_DWORD *)(v11 + 32))
        v12 = (uint64_t *)(v11 + 8);
      else
        v12 = (uint64_t *)v11;
      v11 = *v12;
    }
    while (*v12);
  }
  return result;
}

uint64_t *quasar::mappedIndexes@<X0>(uint64_t *result@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v3;
  uint64_t *v4;
  _QWORD *v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t *v11;
  BOOL v12;
  uint64_t v13;

  *(_QWORD *)(a3 + 8) = 0;
  v3 = (uint64_t *)(a3 + 8);
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)a3 = a3 + 8;
  v4 = result + 1;
  v5 = (_QWORD *)*result;
  if ((uint64_t *)*result != result + 1)
  {
    do
    {
      v8 = 0;
      v9 = *a2 + 32 * *((int *)v5 + 7);
      do
      {
        v13 = 0;
        v13 = *(_QWORD *)(v9 + v8);
        result = std::__tree<int>::__emplace_hint_unique_impl<unsigned long &>((uint64_t **)a3, v3, &v13);
        v8 += 8;
      }
      while (v8 != 32);
      v10 = (uint64_t *)v5[1];
      if (v10)
      {
        do
        {
          v11 = v10;
          v10 = (uint64_t *)*v10;
        }
        while (v10);
      }
      else
      {
        do
        {
          v11 = (uint64_t *)v5[2];
          v12 = *v11 == (_QWORD)v5;
          v5 = v11;
        }
        while (!v12);
      }
      v5 = v11;
    }
    while (v11 != v4);
  }
  return result;
}

void sub_1AD8D9DA0(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<int>::destroy(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

void quasar::VoiceCommandActiveSetCompilation::Suite::~Suite(void **this)
{
  std::__hash_table<quasar::VoiceCommandActiveSetCompilation::CommandSpec,quasar::VoiceCommandActiveSetCompilation::CommandSpec::hash,std::equal_to<quasar::VoiceCommandActiveSetCompilation::CommandSpec>,std::allocator<quasar::VoiceCommandActiveSetCompilation::CommandSpec>>::~__hash_table((uint64_t)(this + 3));
  if (*((char *)this + 23) < 0)
    operator delete(*this);
}

uint64_t *std::__tree<int>::__emplace_hint_unique_impl<unsigned long &>(uint64_t **a1, uint64_t *a2, _QWORD *a3)
{
  int *v6;
  uint64_t **v7;
  uint64_t *v8;
  uint64_t v10;
  uint64_t *v11;

  v6 = (int *)operator new(0x20uLL);
  v6[7] = *a3;
  v7 = (uint64_t **)std::__tree<std::__value_type<quasar::PronType,int>,std::__map_value_compare<quasar::PronType,std::__value_type<quasar::PronType,int>,std::less<quasar::PronType>,true>,std::allocator<std::__value_type<quasar::PronType,int>>>::__find_equal<quasar::PronType>(a1, a2, &v11, &v10, v6 + 7);
  v8 = *v7;
  if (*v7)
  {
    operator delete(v6);
    return v8;
  }
  else
  {
    std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at(a1, (uint64_t)v11, v7, (uint64_t *)v6);
  }
  return (uint64_t *)v6;
}

void sub_1AD8D9E80(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::vector<quasar::VoiceCommandArgument>::__push_back_slow_path<quasar::VoiceCommandArgument const&>(uint64_t *a1, _DWORD *a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  uint64_t *v14;

  v3 = 0x6DB6DB6DB6DB6DB7 * ((a1[1] - *a1) >> 3);
  v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) > 0x492492492492492)
    std::vector<int>::__throw_length_error[abi:ne180100]();
  if (0xDB6DB6DB6DB6DB6ELL * ((a1[2] - *a1) >> 3) > v4)
    v4 = 0xDB6DB6DB6DB6DB6ELL * ((a1[2] - *a1) >> 3);
  if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * ((a1[2] - *a1) >> 3)) >= 0x249249249249249)
    v6 = 0x492492492492492;
  else
    v6 = v4;
  v14 = a1 + 2;
  if (v6)
    v7 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::VoiceCommandArgument>>((uint64_t)(a1 + 2), v6);
  else
    v7 = 0;
  v10 = v7;
  v11 = &v7[56 * v3];
  v13 = &v7[56 * v6];
  std::allocator<quasar::VoiceCommandArgument>::construct[abi:ne180100]<quasar::VoiceCommandArgument,quasar::VoiceCommandArgument const&>((uint64_t)(a1 + 2), (uint64_t)v11, a2);
  v12 = v11 + 56;
  std::vector<quasar::VoiceCommandArgument>::__swap_out_circular_buffer(a1, &v10);
  v8 = a1[1];
  std::__split_buffer<quasar::VoiceCommandArgument>::~__split_buffer((uint64_t)&v10);
  return v8;
}

void sub_1AD8D9FA4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<quasar::VoiceCommandArgument>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *std::allocator<quasar::VoiceCommandArgument>::construct[abi:ne180100]<quasar::VoiceCommandArgument,quasar::VoiceCommandArgument const&>(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  uint64_t v4;

  v4 = (uint64_t)(a3 + 8);
  *(_DWORD *)a2 = *a3;
  std::set<int>::set[abi:ne180100]((uint64_t *)(a2 + 8), (uint64_t)(a3 + 2));
  return std::set<int>::set[abi:ne180100]((uint64_t *)(a2 + 32), v4);
}

void sub_1AD8DA008(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  std::__tree<int>::destroy(v2, *(_QWORD **)(v1 + 16));
  _Unwind_Resume(a1);
}

uint64_t std::vector<quasar::VoiceCommandArgument>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<quasar::VoiceCommandArgument>,std::reverse_iterator<quasar::VoiceCommandArgument*>,std::reverse_iterator<quasar::VoiceCommandArgument*>,std::reverse_iterator<quasar::VoiceCommandArgument*>>((uint64_t)(a1 + 2), a1[1], (_DWORD *)a1[1], *a1, (_DWORD *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<quasar::VoiceCommandArgument>,std::reverse_iterator<quasar::VoiceCommandArgument*>,std::reverse_iterator<quasar::VoiceCommandArgument*>,std::reverse_iterator<quasar::VoiceCommandArgument*>>(uint64_t a1, uint64_t a2, _DWORD *a3, uint64_t a4, _DWORD *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  _DWORD *v9;
  uint64_t v11;
  _QWORD v13[3];
  char v14;
  __int128 v15;
  __int128 v16;

  v7 = a7;
  *(_QWORD *)&v16 = a6;
  *((_QWORD *)&v16 + 1) = a7;
  v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  v13[2] = &v16;
  v14 = 0;
  if (a3 == a5)
  {
    v11 = a6;
  }
  else
  {
    v9 = a3;
    do
    {
      v9 -= 14;
      std::allocator<quasar::VoiceCommandArgument>::construct[abi:ne180100]<quasar::VoiceCommandArgument,quasar::VoiceCommandArgument const&>(a1, v7 - 56, v9);
      v7 = *((_QWORD *)&v16 + 1) - 56;
      *((_QWORD *)&v16 + 1) -= 56;
    }
    while (v9 != a5);
    v11 = v16;
  }
  v14 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<quasar::VoiceCommandArgument>,std::reverse_iterator<quasar::VoiceCommandArgument*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v13);
  return v11;
}

void sub_1AD8DA148(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<quasar::VoiceCommandArgument>,std::reverse_iterator<quasar::VoiceCommandArgument*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<quasar::VoiceCommandArgument>,std::reverse_iterator<quasar::VoiceCommandArgument*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<quasar::VoiceCommandArgument>,std::reverse_iterator<quasar::VoiceCommandArgument*>>::operator()[abi:ne180100]((uint64_t *)a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<quasar::VoiceCommandArgument>,std::reverse_iterator<quasar::VoiceCommandArgument*>>::operator()[abi:ne180100](uint64_t *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE v8[8];
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE v13[8];
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v1 = (uint64_t *)a1[2];
  v3 = *v1;
  v2 = v1[1];
  v14 = v3;
  v15 = v2;
  v16 = v3;
  v17 = v2;
  v4 = *a1;
  v5 = (uint64_t *)a1[1];
  v7 = *v5;
  v6 = v5[1];
  v9 = v7;
  v10 = v6;
  v11 = v7;
  v12 = v6;
  std::__allocator_destroy[abi:ne180100]<std::allocator<quasar::VoiceCommandArgument>,std::reverse_iterator<std::reverse_iterator<quasar::VoiceCommandArgument*>>,std::reverse_iterator<std::reverse_iterator<quasar::VoiceCommandArgument*>>>(v4, (uint64_t)v13, (uint64_t)v8);
}

void std::__allocator_destroy[abi:ne180100]<std::allocator<quasar::VoiceCommandArgument>,std::reverse_iterator<std::reverse_iterator<quasar::VoiceCommandArgument*>>,std::reverse_iterator<std::reverse_iterator<quasar::VoiceCommandArgument*>>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t i;

  for (i = *(_QWORD *)(a2 + 32); i != *(_QWORD *)(a3 + 32); *(_QWORD *)(a2 + 32) = i)
  {
    std::__tree<int>::destroy(i + 32, *(_QWORD **)(i + 40));
    std::__tree<int>::destroy(i + 8, *(_QWORD **)(i + 16));
    i = *(_QWORD *)(a2 + 32) + 56;
  }
}

uint64_t std::__split_buffer<quasar::VoiceCommandArgument>::~__split_buffer(uint64_t a1)
{
  std::__split_buffer<quasar::VoiceCommandArgument>::__destruct_at_end[abi:ne180100](a1, *(_QWORD *)(a1 + 8));
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void std::__split_buffer<quasar::VoiceCommandArgument>::__destruct_at_end[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t i;

  for (i = *(_QWORD *)(a1 + 16); i != a2; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 56;
    std::__tree<int>::destroy(i - 24, *(_QWORD **)(i - 16));
    std::__tree<int>::destroy(i - 48, *(_QWORD **)(i - 40));
  }
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<quasar::VoiceCommandActiveSetCompilation::CommandSpec,quasar::VoiceCommandActiveSetCompilation::Suite>,std::__unordered_map_hasher<quasar::VoiceCommandActiveSetCompilation::CommandSpec,std::__hash_value_type<quasar::VoiceCommandActiveSetCompilation::CommandSpec,quasar::VoiceCommandActiveSetCompilation::Suite>,quasar::VoiceCommandActiveSetCompilation::CommandSpec::hash,std::equal_to<quasar::VoiceCommandActiveSetCompilation::CommandSpec>,true>,std::__unordered_map_equal<quasar::VoiceCommandActiveSetCompilation::CommandSpec,std::__hash_value_type<quasar::VoiceCommandActiveSetCompilation::CommandSpec,quasar::VoiceCommandActiveSetCompilation::Suite>,std::equal_to<quasar::VoiceCommandActiveSetCompilation::CommandSpec>,quasar::VoiceCommandActiveSetCompilation::CommandSpec::hash,true>,std::allocator<std::__hash_value_type<quasar::VoiceCommandActiveSetCompilation::CommandSpec,quasar::VoiceCommandActiveSetCompilation::Suite>>>::__equal_range_multi<quasar::VoiceCommandActiveSetCompilation::CommandSpec>(_QWORD *a1, unsigned __int8 *a2)
{
  unsigned __int8 *v3;
  unsigned __int8 *v4;
  unsigned __int8 *v5;

  v3 = std::__hash_table<std::__hash_value_type<quasar::VoiceCommandActiveSetCompilation::CommandSpec,quasar::VoiceCommandActiveSetCompilation::Suite>,std::__unordered_map_hasher<quasar::VoiceCommandActiveSetCompilation::CommandSpec,std::__hash_value_type<quasar::VoiceCommandActiveSetCompilation::CommandSpec,quasar::VoiceCommandActiveSetCompilation::Suite>,quasar::VoiceCommandActiveSetCompilation::CommandSpec::hash,std::equal_to<quasar::VoiceCommandActiveSetCompilation::CommandSpec>,true>,std::__unordered_map_equal<quasar::VoiceCommandActiveSetCompilation::CommandSpec,std::__hash_value_type<quasar::VoiceCommandActiveSetCompilation::CommandSpec,quasar::VoiceCommandActiveSetCompilation::Suite>,std::equal_to<quasar::VoiceCommandActiveSetCompilation::CommandSpec>,quasar::VoiceCommandActiveSetCompilation::CommandSpec::hash,true>,std::allocator<std::__hash_value_type<quasar::VoiceCommandActiveSetCompilation::CommandSpec,quasar::VoiceCommandActiveSetCompilation::Suite>>>::find<quasar::VoiceCommandActiveSetCompilation::CommandSpec>(a1, (uint64_t)a2);
  v4 = v3;
  if (v3)
  {
    v5 = v3;
    do
      v5 = *(unsigned __int8 **)v5;
    while (v5 && quasar::VoiceCommandActiveSetCompilation::CommandSpec::operator==(v5 + 16, a2));
  }
  return v4;
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<quasar::VoiceCommandActiveSetCompilation::CommandSpec,quasar::VoiceCommandActiveSetCompilation::Suite>,std::__unordered_map_hasher<quasar::VoiceCommandActiveSetCompilation::CommandSpec,std::__hash_value_type<quasar::VoiceCommandActiveSetCompilation::CommandSpec,quasar::VoiceCommandActiveSetCompilation::Suite>,quasar::VoiceCommandActiveSetCompilation::CommandSpec::hash,std::equal_to<quasar::VoiceCommandActiveSetCompilation::CommandSpec>,true>,std::__unordered_map_equal<quasar::VoiceCommandActiveSetCompilation::CommandSpec,std::__hash_value_type<quasar::VoiceCommandActiveSetCompilation::CommandSpec,quasar::VoiceCommandActiveSetCompilation::Suite>,std::equal_to<quasar::VoiceCommandActiveSetCompilation::CommandSpec>,quasar::VoiceCommandActiveSetCompilation::CommandSpec::hash,true>,std::allocator<std::__hash_value_type<quasar::VoiceCommandActiveSetCompilation::CommandSpec,quasar::VoiceCommandActiveSetCompilation::Suite>>>::find<quasar::VoiceCommandActiveSetCompilation::CommandSpec>(_QWORD *a1, uint64_t a2)
{
  unint64_t v4;
  int8x8_t v5;
  uint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  unint64_t v9;
  uint64_t v10;
  unsigned __int8 **v11;
  unsigned __int8 *i;
  unint64_t v13;
  char v15;

  v4 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)&v15, a2);
  v5 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v5)
    return 0;
  v6 = *(int *)(a2 + 24);
  v7 = v6 + 571 * v4 + 326041;
  v8 = (uint8x8_t)vcnt_s8(v5);
  v8.i16[0] = vaddlv_u8(v8);
  v9 = v8.u32[0];
  if (v8.u32[0] > 1uLL)
  {
    v10 = v6 + 571 * v4 + 326041;
    if (v7 >= *(_QWORD *)&v5)
      v10 = v7 % *(_QWORD *)&v5;
  }
  else
  {
    v10 = (*(_QWORD *)&v5 - 1) & v7;
  }
  v11 = *(unsigned __int8 ***)(*a1 + 8 * v10);
  if (!v11)
    return 0;
  for (i = *v11; i; i = *(unsigned __int8 **)i)
  {
    v13 = *((_QWORD *)i + 1);
    if (v7 == v13)
    {
      if (quasar::VoiceCommandActiveSetCompilation::CommandSpec::operator==(i + 16, (unsigned __int8 *)a2))
        return i;
    }
    else
    {
      if (v9 > 1)
      {
        if (v13 >= *(_QWORD *)&v5)
          v13 %= *(_QWORD *)&v5;
      }
      else
      {
        v13 &= *(_QWORD *)&v5 - 1;
      }
      if (v13 != v10)
        return 0;
    }
  }
  return i;
}

_QWORD *std::vector<std::array<unsigned long,4ul>>::__init_with_size[abi:ne180100]<std::array<unsigned long,4ul>*,std::array<unsigned long,4ul>*>(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<quasar::TextTokenizer::Token>::__vallocate[abi:ne180100](result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1AD8DA4C8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::vector<quasar::VoiceCommandInterpretation>::__push_back_slow_path<quasar::VoiceCommandInterpretation const&>(uint64_t *a1, const quasar::VoiceCommandInterpretation *a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  void *v13;
  std::string *v14;
  std::string::value_type *v15;
  char *v16;
  uint64_t *v17;

  v3 = *a1;
  v4 = 0x6DB6DB6DB6DB6DB7 * ((a1[1] - *a1) >> 4);
  v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) > 0x249249249249249)
    std::vector<int>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0x6DB6DB6DB6DB6DB7 * ((a1[2] - v3) >> 4);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x124924924924924)
    v9 = 0x249249249249249;
  else
    v9 = v5;
  v17 = a1 + 2;
  if (v9)
    v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::VoiceCommandInterpretation>>(v7, v9);
  else
    v10 = 0;
  v13 = v10;
  v14 = (std::string *)&v10[112 * v4];
  v16 = &v10[112 * v9];
  quasar::VoiceCommandInterpretation::VoiceCommandInterpretation(v14, a2);
  v15 = &v14[4].__r_.__value_.__s.__data_[16];
  std::vector<quasar::VoiceCommandInterpretation>::__swap_out_circular_buffer(a1, &v13);
  v11 = a1[1];
  std::__split_buffer<quasar::VoiceCommandInterpretation>::~__split_buffer(&v13);
  return v11;
}

void sub_1AD8DA5EC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<quasar::VoiceCommandInterpretation>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

_QWORD *LHash<unsigned int,Trie<unsigned int,unsigned int>>::alloc(_QWORD *a1, unsigned int a2)
{
  char v3;
  uint64_t v4;
  _QWORD *result;
  uint64_t v6;
  uint64_t v7;

  v3 = -1;
  do
    v4 = (1 << ++v3);
  while (v4 < a2);
  result = BM_malloc(24 * (v4 - 1) + 32);
  v6 = 0;
  *a1 = result;
  *(_DWORD *)result = *(_DWORD *)result & 0xFFFFFFE0 | v3 & 0x1F;
  *(_DWORD *)*a1 &= 0x1Fu;
  do
  {
    v7 = *a1 + v6;
    *(_DWORD *)(v7 + 24) = -1;
    *(_QWORD *)(v7 + 8) = 0;
    *(_DWORD *)(v7 + 16) = 0;
    v6 += 24;
    --v4;
  }
  while (v4);
  return result;
}

void LHash<unsigned int,Trie<unsigned int,unsigned int>>::clear(_QWORD *a1, unsigned int a2)
{
  _QWORD *v4;

  v4 = (_QWORD *)*a1;
  if (v4)
  {
    BM_free(v4, 24 * ~(-1 << *(_DWORD *)v4) + 32);
    *a1 = 0;
  }
  if (a2)
  {
    if (a2 >= 8)
      a2 = (float)((float)(a2 + 1) / 0.8);
    LHash<unsigned int,Trie<unsigned int,unsigned int>>::alloc(a1, a2);
  }
}

_QWORD *LHash<unsigned int,Trie<unsigned int,unsigned int>>::~LHash(_QWORD *a1)
{
  LHash<unsigned int,Trie<unsigned int,unsigned int>>::clear(a1, 0);
  return a1;
}

_QWORD *LHash<unsigned int,Trie<unsigned int,unsigned int>>::operator=(_QWORD *a1, _DWORD **a2)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  _DWORD *v8;
  uint64_t v9;

  if (a2 != a1)
  {
    if (*a2)
    {
      v4 = 1 << (**a2 & 0x1F);
      LHash<unsigned int,Trie<unsigned int,unsigned int>>::clear(a1, 0);
      LHash<unsigned int,Trie<unsigned int,unsigned int>>::alloc(a1, v4);
      v5 = 0;
      do
      {
        v6 = (*a2)[v5 + 6];
        if (v6 != -1)
        {
          v7 = *a1 + v5 * 4;
          *(_DWORD *)(v7 + 24) = v6;
          *(_QWORD *)(v7 + 8) = 0;
          *(_DWORD *)(v7 + 16) = 0;
          v8 = &(*a2)[v5];
          v9 = *a1 + v5 * 4;
          LHash<unsigned int,Trie<unsigned int,unsigned int>>::operator=(v9 + 8, v8 + 2);
          *(_DWORD *)(v9 + 16) = v8[4];
        }
        v5 += 6;
        --v4;
      }
      while (v4);
      *(_DWORD *)*a1 = **a2 & 0xFFFFFFE0 | *(_DWORD *)*a1 & 0x1F;
    }
    else
    {
      LHash<unsigned int,Trie<unsigned int,unsigned int>>::clear(a1, 0);
    }
  }
  return a1;
}

uint64_t LHash<unsigned int,Trie<unsigned int,unsigned int>>::locate(_DWORD **a1, unsigned int a2, _DWORD *a3)
{
  _DWORD *v3;
  _DWORD *v4;
  unint64_t v5;
  char v6;
  unint64_t v7;
  uint64_t result;
  uint64_t v9;
  int v10;
  int v11;
  uint64_t v12;
  int *v13;
  int v14;

  v3 = *a1;
  if (!*a1)
    return 0;
  v4 = v3 + 2;
  v5 = *v3;
  v6 = v5 & 0x1F;
  if ((*v3 & 0x1Fu) > 2)
  {
    v9 = -1 << v6;
    v7 = ((1103515245 * (unint64_t)a2 + 12345) >> (30 - v6)) & ~(-1 << v6);
    v10 = v4[6 * v7 + 4];
    if (v10 == -1)
    {
LABEL_10:
      result = 0;
    }
    else
    {
      v11 = ~(_DWORD)v9;
      while (v10 != a2)
      {
        LODWORD(v7) = (v7 + 1) & v11;
        v10 = v4[6 * v7 + 4];
        if (v10 == -1)
          goto LABEL_10;
      }
      result = 1;
    }
  }
  else if (v5 >= 0x20)
  {
    v12 = 0;
    v7 = v5 >> 5;
    v13 = v3 + 6;
    while (1)
    {
      v14 = *v13;
      v13 += 6;
      if (v14 == a2)
        break;
      if (v7 == ++v12)
        goto LABEL_14;
    }
    result = 1;
    LODWORD(v7) = v12;
  }
  else
  {
    LODWORD(v7) = 0;
LABEL_14:
    result = 0;
  }
  *a3 = v7;
  return result;
}

uint64_t LHash<unsigned int,Trie<unsigned int,unsigned int>>::insert(_QWORD *a1, unsigned int a2, _BYTE *a3)
{
  int v6;
  _QWORD *v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unsigned int v11;
  unsigned int *v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  unsigned int v20;

  if (!*a1)
    LHash<unsigned int,Trie<unsigned int,unsigned int>>::alloc(a1, 1u);
  v20 = 0;
  v6 = LHash<unsigned int,Trie<unsigned int,unsigned int>>::locate((_DWORD **)a1, a2, &v20);
  *a3 = v6;
  v7 = (_QWORD *)*a1;
  if (!v6)
  {
    v8 = *(unsigned int *)v7;
    v9 = 1 << (v8 & 0x1F);
    v10 = v8 >> 5;
    if (v8 >= 0xE0)
      v11 = (float)((float)(v10 + 2) / 0.8);
    else
      v11 = v10 + 1;
    if (v11 > v9)
    {
      LHash<unsigned int,Trie<unsigned int,unsigned int>>::alloc(a1, v11);
      *(_DWORD *)*a1 = v8 & 0xFFFFFFE0 | *(_DWORD *)*a1 & 0x1F;
      if ((*(_DWORD *)*a1 & 0x1Fu) >= 3)
      {
        v12 = (unsigned int *)(v7 + 3);
        v13 = 1 << (v8 & 0x1F);
        do
        {
          if (*v12 != -1)
          {
            LHash<unsigned int,Trie<unsigned int,unsigned int>>::locate((_DWORD **)a1, *v12, &v20);
            v14 = *a1 + 24 * v20;
            v15 = *((_OWORD *)v12 - 1);
            *(_QWORD *)(v14 + 24) = *(_QWORD *)v12;
            *(_OWORD *)(v14 + 8) = v15;
          }
          v12 += 6;
          --v13;
        }
        while (v13);
      }
      else
      {
        memcpy((void *)(*a1 + 8), v7 + 1, 24 * v10);
      }
      BM_free(v7, 24 * (v9 - 1) + 32);
      LHash<unsigned int,Trie<unsigned int,unsigned int>>::locate((_DWORD **)a1, a2, &v20);
      v7 = (_QWORD *)*a1;
    }
    LODWORD(v7[3 * v20 + 3]) = a2;
    v16 = 3 * v20;
    v17 = &v7[3 * v20 + 1];
    *v17 = 0;
    v17[1] = 0;
    v18 = *a1 + 8 * v16;
    *(_QWORD *)(v18 + 8) = 0;
    *(_DWORD *)(v18 + 16) = 0;
    *(_DWORD *)*a1 += 32;
    v7 = (_QWORD *)*a1;
  }
  return (uint64_t)&v7[3 * v20 + 1];
}

uint64_t LHashIter<unsigned int,Trie<unsigned int,unsigned int>>::LHashIter(uint64_t a1, _DWORD **a2, uint64_t a3)
{
  _DWORD *v4;

  v4 = *a2;
  *(_QWORD *)a1 = *a2;
  *(_DWORD *)(a1 + 8) = 0;
  if (v4)
  {
    *(_DWORD *)(a1 + 12) = *v4 >> 5;
    *(_QWORD *)(a1 + 16) = a3;
    *(_QWORD *)(a1 + 24) = 0;
    LHashIter<unsigned int,Trie<unsigned int,unsigned int>>::sortKeys(a1);
  }
  else
  {
    *(_DWORD *)(a1 + 12) = 0;
    *(_QWORD *)(a1 + 16) = a3;
    *(_QWORD *)(a1 + 24) = 0;
  }
  return a1;
}

uint64_t LHashIter<unsigned int,Trie<unsigned int,unsigned int>>::sortKeys(uint64_t a1)
{
  char v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  int *v7;
  int v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  uint64_t v13;
  _DWORD *v14;
  int *v15;
  int v16;
  _BYTE v18[24];
  uint64_t v19;

  v2 = **(_DWORD **)a1 & 0x1F;
  v3 = operator new[]();
  v4 = v3;
  v5 = 0;
  v6 = 0;
  v7 = (int *)(*(_QWORD *)a1 + 24);
  do
  {
    v8 = *v7;
    v7 += 6;
    if (v8 != -1)
      *(_DWORD *)(v3 + 4 * v6++) = v5;
    ++v5;
  }
  while (!(v5 >> v2));
  if (*(_QWORD *)(a1 + 16))
  {
    v9 = *(unsigned int *)(a1 + 12);
    LHashIter<unsigned int,double>::LHashIter((uint64_t)v18, a1);
    v10 = 126 - 2 * __clz(v9);
    if ((_DWORD)v9)
      v11 = v10;
    else
      v11 = 0;
    std::__introsort<std::_ClassicAlgPolicy,LHashIter<unsigned int,Trie<unsigned int,unsigned int>> &,unsigned int *,false>(v4, (unsigned int *)(v4 + 4 * v9), (uint64_t)v18, v11, 1);
    if (v19)
      MEMORY[0x1AF44D160](v19, 0x1000C8052888210);
    v19 = 0;
  }
  v12 = (_DWORD *)operator new[]();
  *(_QWORD *)(a1 + 24) = v12;
  v13 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v13)
  {
    v14 = *(_DWORD **)a1;
    v15 = (int *)v4;
    do
    {
      v16 = *v15++;
      *v12++ = v14[6 * v16 + 6];
      --v13;
    }
    while (v13);
  }
  return MEMORY[0x1AF44D160](v4, 0x1000C8052888210);
}

void sub_1AD8DAC94(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (a12)
    MEMORY[0x1AF44D160](a12, 0x1000C8052888210);
  _Unwind_Resume(exception_object);
}

uint64_t LHashIter<unsigned int,Trie<unsigned int,unsigned int>>::next(uint64_t a1, _DWORD *a2)
{
  _DWORD *v2;
  uint64_t v4;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  _DWORD *v9;
  unsigned int v10;

  v2 = *(_DWORD **)a1;
  if (!*(_QWORD *)a1)
    return 0;
  v10 = 0;
  v4 = *(unsigned int *)(a1 + 8);
  if ((_DWORD)v4 == *(_DWORD *)(a1 + 12))
    return 0;
  v9 = v2;
  v7 = *(_QWORD *)(a1 + 24);
  *(_DWORD *)(a1 + 8) = v4 + 1;
  LHash<unsigned int,Trie<unsigned int,unsigned int>>::locate(&v9, *(_DWORD *)(v7 + 4 * v4), &v10);
  v8 = *(_QWORD *)a1 + 24 * v10;
  result = v8 + 8;
  *a2 = *(_DWORD *)(v8 + 24);
  return result;
}

void sub_1AD8DAD40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  LHash<unsigned int,Trie<unsigned int,unsigned int>>::~LHash(&a9);
  _Unwind_Resume(a1);
}

uint64_t Trie<unsigned int,unsigned int>::Trie(uint64_t a1, unsigned int a2)
{
  *(_QWORD *)a1 = 0;
  if (a2)
  {
    if (a2 >= 8)
      a2 = (float)((float)(a2 + 1) / 0.8);
    LHash<unsigned int,Trie<unsigned int,unsigned int>>::alloc((_QWORD *)a1, a2);
  }
  *(_DWORD *)(a1 + 8) = 0;
  return a1;
}

_DWORD **Trie<unsigned int,unsigned int>::~Trie(_DWORD **a1)
{
  int v3;
  _BYTE v4[24];
  uint64_t v5;

  LHashIter<unsigned int,Trie<unsigned int,unsigned int>>::LHashIter((uint64_t)v4, a1, 0);
  v3 = 0;
  while (LHashIter<unsigned int,Trie<unsigned int,unsigned int>>::next((uint64_t)v4, &v3))
    Trie<unsigned int,unsigned int>::~Trie();
  if (v5)
    MEMORY[0x1AF44D160](v5, 0x1000C8052888210);
  LHash<unsigned int,Trie<unsigned int,unsigned int>>::clear(a1, 0);
  return a1;
}

uint64_t Trie<unsigned int,unsigned int>::findTrie(_DWORD **a1, unsigned int *a2, _BYTE *a3)
{
  _QWORD *v4;
  unsigned int v6;
  unsigned int v8;

  v4 = a1;
  if (!a2 || (v6 = *a2, v6 == -1))
  {
    *a3 = 1;
  }
  else
  {
    v8 = 0;
    if (LHash<unsigned int,Trie<unsigned int,unsigned int>>::locate(a1, v6, &v8))
    {
      return Trie<unsigned int,unsigned int>::findTrie(*v4 + 24 * v8 + 8, a2 + 1, a3);
    }
    else
    {
      v4 = 0;
      *a3 = 0;
    }
  }
  return (uint64_t)v4;
}

uint64_t Trie<unsigned int,unsigned int>::find(_DWORD **a1, unsigned int a2)
{
  uint64_t v3;
  int v5;

  v5 = 0;
  if (LHash<unsigned int,Trie<unsigned int,unsigned int>>::locate(a1, a2, &v5))
    v3 = (uint64_t)&(*a1)[6 * v5 + 2];
  else
    v3 = 0;
  if (v3)
    return v3 + 8;
  else
    return 0;
}

_QWORD *Trie<unsigned int,unsigned int>::insertTrie(_QWORD *result, unsigned int *a2, _BYTE *a3)
{
  unsigned int v5;
  unsigned int *v6;
  unsigned int v7;
  char v8;

  if (!a2 || (v5 = *a2, v5 == -1))
  {
LABEL_6:
    *a3 = 1;
  }
  else
  {
    v6 = a2 + 1;
    while (1)
    {
      result = (_QWORD *)LHash<unsigned int,Trie<unsigned int,unsigned int>>::insert(result, v5, a3);
      if (!*a3)
        break;
      v7 = *v6++;
      v5 = v7;
      if (v7 == -1)
        goto LABEL_6;
    }
    v8 = 0;
    return (_QWORD *)Trie<unsigned int,unsigned int>::insertTrie(result, v6, &v8);
  }
  return result;
}

uint64_t Trie<unsigned int,unsigned int>::dump(_DWORD **a1, int a2)
{
  _QWORD *v3;
  std::locale::id *v4;
  uint64_t v5;
  int i;
  _QWORD *v7;
  const std::locale::facet *v8;
  uint64_t result;
  int v10;
  _BYTE v11[24];
  uint64_t v12;
  std::locale v13;

  LHashIter<unsigned int,Trie<unsigned int,unsigned int>>::LHashIter((uint64_t)v11, a1, 0);
  v10 = 0;
  v3 = (_QWORD *)MEMORY[0x1E0DE4A50];
  v4 = (std::locale::id *)MEMORY[0x1E0DE4A90];
  while (1)
  {
    v5 = LHashIter<unsigned int,Trie<unsigned int,unsigned int>>::next((uint64_t)v11, &v10);
    if (!v5)
      break;
    for (i = a2; i; --i)
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)" ", 1);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"Key = ", 6);
    v7 = (_QWORD *)std::ostream::operator<<();
    std::ios_base::getloc((const std::ios_base *)((char *)v7 + *(_QWORD *)(*v7 - 24)));
    v8 = std::locale::use_facet(&v13, v4);
    ((void (*)(const std::locale::facet *, uint64_t))v8->__vftable[2].~facet_0)(v8, 10);
    std::locale::~locale(&v13);
    std::ostream::put();
    std::ostream::flush();
    Trie<unsigned int,unsigned int>::dump(v5, (a2 + 5));
  }
  result = v12;
  if (v12)
    return MEMORY[0x1AF44D160](v12, 0x1000C8052888210);
  return result;
}

void sub_1AD8DB0E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::locale a14)
{
  std::locale::~locale(&a14);
  if (a13)
    MEMORY[0x1AF44D160](a13, 0x1000C8052888210);
  _Unwind_Resume(a1);
}

uint64_t TrieIter2<unsigned int,unsigned int>::TrieIter2(uint64_t a1, _DWORD **a2, _DWORD *a3, int a4, uint64_t a5)
{
  _DWORD *v6;

  v6 = a3;
  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = a3;
  *(_DWORD *)(a1 + 16) = a4;
  *(_QWORD *)(a1 + 24) = a5;
  LHashIter<unsigned int,Trie<unsigned int,unsigned int>>::LHashIter(a1 + 32, a2, a5);
  *(_QWORD *)(a1 + 64) = 0;
  *(_BYTE *)(a1 + 72) = 0;
  if (!a4)
    goto LABEL_4;
  if (a4 == 1)
  {
    ++v6;
LABEL_4:
    *v6 = -1;
  }
  return a1;
}

uint64_t TrieIter2<unsigned int,unsigned int>::~TrieIter2(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  if (*(_QWORD *)(a1 + 64))
  {
    v2 = TrieIter2<unsigned int,unsigned int>::~TrieIter2();
    MEMORY[0x1AF44D190](v2, 0x10F0C40A7879D68);
  }
  v3 = *(_QWORD *)(a1 + 56);
  if (v3)
    MEMORY[0x1AF44D160](v3, 0x1000C8052888210);
  *(_QWORD *)(a1 + 56) = 0;
  return a1;
}

uint64_t TrieIter2<unsigned int,unsigned int>::next(uint64_t a1)
{
  int v2;
  uint64_t result;
  uint64_t v4;
  _DWORD **v5;
  uint64_t v6;
  uint64_t v7;

  v2 = *(_DWORD *)(a1 + 16);
  if (v2)
  {
    if (v2 == 1)
    {
      return LHashIter<unsigned int,Trie<unsigned int,unsigned int>>::next(a1 + 32, *(_DWORD **)(a1 + 8));
    }
    else
    {
      v4 = *(_QWORD *)(a1 + 64);
      if (v4)
        goto LABEL_9;
      while (1)
      {
        result = LHashIter<unsigned int,Trie<unsigned int,unsigned int>>::next(a1 + 32, *(_DWORD **)(a1 + 8));
        if (!result)
          break;
        v5 = (_DWORD **)result;
        v4 = operator new();
        TrieIter2<unsigned int,unsigned int>::TrieIter2(v4, v5, (_DWORD *)(*(_QWORD *)(a1 + 8) + 4), *(_DWORD *)(a1 + 16) - 1, *(_QWORD *)(a1 + 24));
        *(_QWORD *)(a1 + 64) = v4;
LABEL_9:
        result = TrieIter2<unsigned int,unsigned int>::next(v4);
        if (result)
          break;
        v6 = *(_QWORD *)(a1 + 64);
        if (v6)
        {
          v7 = TrieIter2<unsigned int,unsigned int>::~TrieIter2(v6);
          MEMORY[0x1AF44D190](v7, 0x10F0C40A7879D68);
        }
        *(_QWORD *)(a1 + 64) = 0;
      }
    }
  }
  else if (*(_BYTE *)(a1 + 72))
  {
    return 0;
  }
  else
  {
    *(_BYTE *)(a1 + 72) = 1;
    return *(_QWORD *)a1;
  }
  return result;
}

void sub_1AD8DB2F0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10F0C40A7879D68);
  _Unwind_Resume(a1);
}

uint64_t SArray_compareKey<unsigned int>(int a1, int a2)
{
  return (a1 - a2);
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,LHashIter<unsigned int,Trie<unsigned int,unsigned int>> &,unsigned int *,false>(uint64_t result, unsigned int *a2, uint64_t a3, uint64_t a4, char a5)
{
  unsigned int *v8;
  unsigned int *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int *v17;
  char v18;
  BOOL v19;
  unsigned int v20;

  v8 = (unsigned int *)result;
LABEL_2:
  v9 = v8;
LABEL_3:
  v10 = 1 - a4;
  while (2)
  {
    v8 = v9;
    v11 = v10;
    v12 = (char *)a2 - (char *)v9;
    v13 = a2 - v9;
    switch(v13)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        result = (*(uint64_t (**)(_QWORD, _QWORD))(a3 + 16))(*(unsigned int *)(*(_QWORD *)a3 + 8 + 24 * *(a2 - 1) + 16), *(unsigned int *)(*(_QWORD *)a3 + 8 + 24 * *v9 + 16));
        if ((result & 0x80000000) != 0)
        {
          v20 = *v9;
          *v9 = *(a2 - 1);
          *(a2 - 1) = v20;
        }
        return result;
      case 3uLL:
        return std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,Trie<unsigned int,unsigned int>> &,unsigned int *>(v9, v9 + 1, a2 - 1, a3);
      case 4uLL:
        return std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,Trie<unsigned int,unsigned int>> &,unsigned int *>(v9, v9 + 1, v9 + 2, a2 - 1, a3);
      case 5uLL:
        return std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,Trie<unsigned int,unsigned int>> &,unsigned int *>(v9, v9 + 1, v9 + 2, v9 + 3, a2 - 1, a3);
      default:
        if (v12 <= 95)
        {
          if ((a5 & 1) != 0)
            return std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,Trie<unsigned int,unsigned int>> &,unsigned int *>((uint64_t)v9, a2, a3);
          else
            return std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,Trie<unsigned int,unsigned int>> &,unsigned int *>((uint64_t)v9, a2, a3);
        }
        if (v11 != 1)
        {
          v14 = v13 >> 1;
          v15 = &v9[v13 >> 1];
          if ((unint64_t)v12 < 0x201)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,Trie<unsigned int,unsigned int>> &,unsigned int *>(&v9[v13 >> 1], v9, a2 - 1, a3);
            if ((a5 & 1) != 0)
              goto LABEL_12;
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,Trie<unsigned int,unsigned int>> &,unsigned int *>(v9, &v9[v13 >> 1], a2 - 1, a3);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,Trie<unsigned int,unsigned int>> &,unsigned int *>(v9 + 1, v15 - 1, a2 - 2, a3);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,Trie<unsigned int,unsigned int>> &,unsigned int *>(v9 + 2, &v9[v14 + 1], a2 - 3, a3);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,Trie<unsigned int,unsigned int>> &,unsigned int *>(v15 - 1, v15, &v9[v14 + 1], a3);
            v16 = *v9;
            *v9 = *v15;
            *v15 = v16;
            if ((a5 & 1) != 0)
              goto LABEL_12;
          }
          if (((*(uint64_t (**)(_QWORD, _QWORD))(a3 + 16))(*(unsigned int *)(*(_QWORD *)a3 + 8 + 24 * *(v9 - 1) + 16), *(unsigned int *)(*(_QWORD *)a3 + 8 + 24 * *v9 + 16)) & 0x80000000) == 0)
          {
            result = (uint64_t)std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,unsigned int *,LHashIter<unsigned int,Trie<unsigned int,unsigned int>> &>(v9, a2, a3);
            v9 = (unsigned int *)result;
            goto LABEL_17;
          }
LABEL_12:
          v17 = std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,unsigned int *,LHashIter<unsigned int,Trie<unsigned int,unsigned int>> &>(v9, a2, a3);
          if ((v18 & 1) == 0)
            goto LABEL_15;
          v19 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,Trie<unsigned int,unsigned int>> &,unsigned int *>(v9, v17, a3);
          v9 = v17 + 1;
          result = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,Trie<unsigned int,unsigned int>> &,unsigned int *>(v17 + 1, a2, a3);
          if (!(_DWORD)result)
          {
            v10 = v11 + 1;
            if (v19)
              continue;
LABEL_15:
            result = std::__introsort<std::_ClassicAlgPolicy,LHashIter<unsigned int,Trie<unsigned int,unsigned int>> &,unsigned int *,false>(v8, v17, a3, -v11, a5 & 1);
            v9 = v17 + 1;
LABEL_17:
            a5 = 0;
            a4 = -v11;
            goto LABEL_3;
          }
          a4 = -v11;
          a2 = v17;
          if (v19)
            return result;
          goto LABEL_2;
        }
        if (v9 != a2)
          return (uint64_t)std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,Trie<unsigned int,unsigned int>> &,unsigned int *,unsigned int *>(v9, a2, a2, a3);
        return result;
    }
  }
}

uint64_t std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,Trie<unsigned int,unsigned int>> &,unsigned int *>(uint64_t result, unsigned int *a2, uint64_t a3)
{
  unsigned int *v4;
  unsigned int *v5;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  unsigned int *v13;

  if ((unsigned int *)result != a2)
  {
    v4 = (unsigned int *)result;
    v5 = (unsigned int *)(result + 4);
    if ((unsigned int *)(result + 4) != a2)
    {
      v7 = 0;
      v8 = (unsigned int *)result;
      do
      {
        v10 = *v8;
        v9 = v8[1];
        v8 = v5;
        result = (*(uint64_t (**)(_QWORD, _QWORD))(a3 + 16))(*(unsigned int *)(*(_QWORD *)a3 + 8 + 24 * v9 + 16), *(unsigned int *)(*(_QWORD *)a3 + 8 + 24 * v10 + 16));
        if ((result & 0x80000000) != 0)
        {
          v11 = *v8;
          v12 = v7;
          while (1)
          {
            *(unsigned int *)((char *)v4 + v12 + 4) = *(unsigned int *)((char *)v4 + v12);
            if (!v12)
              break;
            result = (*(uint64_t (**)(_QWORD, _QWORD))(a3 + 16))(*(unsigned int *)(*(_QWORD *)a3 + 8 + 24 * v11 + 16), *(unsigned int *)(*(_QWORD *)a3 + 8 + 24 * *(unsigned int *)((char *)v4 + v12 - 4) + 16));
            v12 -= 4;
            if ((result & 0x80000000) == 0)
            {
              v13 = (unsigned int *)((char *)v4 + v12 + 4);
              goto LABEL_10;
            }
          }
          v13 = v4;
LABEL_10:
          *v13 = v11;
        }
        v5 = v8 + 1;
        v7 += 4;
      }
      while (v8 + 1 != a2);
    }
  }
  return result;
}

uint64_t std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,Trie<unsigned int,unsigned int>> &,unsigned int *>(uint64_t result, unsigned int *a2, uint64_t a3)
{
  unsigned int *v4;
  unsigned int *i;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int *v10;
  unsigned int *v11;
  unsigned int v12;

  if ((unsigned int *)result != a2)
  {
    v4 = (unsigned int *)result;
    for (i = (unsigned int *)(result + 4); v4 + 1 != a2; i = v4 + 1)
    {
      v8 = *v4;
      v7 = v4[1];
      v4 = i;
      result = (*(uint64_t (**)(_QWORD, _QWORD))(a3 + 16))(*(unsigned int *)(*(_QWORD *)a3 + 8 + 24 * v7 + 16), *(unsigned int *)(*(_QWORD *)a3 + 8 + 24 * v8 + 16));
      if ((result & 0x80000000) != 0)
      {
        v9 = *v4;
        v10 = v4;
        do
        {
          v11 = v10;
          v12 = *--v10;
          *v11 = v12;
          result = (*(uint64_t (**)(_QWORD, _QWORD))(a3 + 16))(*(unsigned int *)(*(_QWORD *)a3 + 8 + 24 * v9 + 16), *(unsigned int *)(*(_QWORD *)a3 + 8 + 24 * *(v11 - 2) + 16));
        }
        while ((result & 0x80000000) != 0);
        *v10 = v9;
      }
    }
  }
  return result;
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,Trie<unsigned int,unsigned int>> &,unsigned int *>(unsigned int *a1, unsigned int *a2, unsigned int *a3, uint64_t a4)
{
  int v8;
  int v9;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;

  v8 = (*(uint64_t (**)(_QWORD, _QWORD))(a4 + 16))(*(unsigned int *)(*(_QWORD *)a4 + 8 + 24 * *a2 + 16), *(unsigned int *)(*(_QWORD *)a4 + 8 + 24 * *a1 + 16));
  v9 = (*(uint64_t (**)(_QWORD, _QWORD))(a4 + 16))(*(unsigned int *)(*(_QWORD *)a4 + 8 + 24 * *a3 + 16), *(unsigned int *)(*(_QWORD *)a4 + 8 + 24 * *a2 + 16));
  if (v8 < 0)
  {
    v11 = *a1;
    if (v9 < 0)
    {
      *a1 = *a3;
      *a3 = v11;
    }
    else
    {
      *a1 = *a2;
      *a2 = v11;
      if (((*(uint64_t (**)(_QWORD, _QWORD))(a4 + 16))(*(unsigned int *)(*(_QWORD *)a4 + 8 + 24 * *a3 + 16), *(unsigned int *)(*(_QWORD *)a4 + 8 + 24 * v11 + 16)) & 0x80000000) != 0)
      {
        v12 = *a2;
        *a2 = *a3;
        *a3 = v12;
        return 2;
      }
    }
  }
  else
  {
    if ((v9 & 0x80000000) == 0)
      return 0;
    v13 = *a2;
    *a2 = *a3;
    *a3 = v13;
    if (((*(uint64_t (**)(_QWORD, _QWORD))(a4 + 16))(*(unsigned int *)(*(_QWORD *)a4 + 8 + 24 * *a2 + 16), *(unsigned int *)(*(_QWORD *)a4 + 8 + 24 * *a1 + 16)) & 0x80000000) != 0)
    {
      v14 = *a1;
      *a1 = *a2;
      *a2 = v14;
      return 2;
    }
  }
  return 1;
}

unsigned int *std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,unsigned int *,LHashIter<unsigned int,Trie<unsigned int,unsigned int>> &>(unsigned int *a1, unsigned int *a2, uint64_t a3)
{
  unsigned int *v4;
  unsigned int v6;
  unsigned int *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;

  v4 = a2;
  v6 = *a1;
  if (((*(uint64_t (**)(_QWORD, _QWORD))(a3 + 16))(*(unsigned int *)(*(_QWORD *)a3 + 8 + 24 * *a1 + 16), *(unsigned int *)(*(_QWORD *)a3 + 8 + 24 * *(a2 - 1) + 16)) & 0x80000000) != 0)
  {
    v8 = a1;
    do
    {
      v9 = v8[1];
      ++v8;
    }
    while (((*(uint64_t (**)(_QWORD, _QWORD))(a3 + 16))(*(unsigned int *)(*(_QWORD *)a3 + 8 + 24 * v6 + 16), *(unsigned int *)(*(_QWORD *)a3 + 8 + 24 * v9 + 16)) & 0x80000000) == 0);
  }
  else
  {
    v7 = a1 + 1;
    do
    {
      v8 = v7;
      if (v7 >= v4)
        break;
      ++v7;
    }
    while (((*(uint64_t (**)(_QWORD, _QWORD))(a3 + 16))(*(unsigned int *)(*(_QWORD *)a3 + 8 + 24 * v6 + 16), *(unsigned int *)(*(_QWORD *)a3 + 8 + 24 * *v8 + 16)) & 0x80000000) == 0);
  }
  if (v8 < v4)
  {
    do
      v10 = *--v4;
    while (((*(uint64_t (**)(_QWORD, _QWORD))(a3 + 16))(*(unsigned int *)(*(_QWORD *)a3 + 8 + 24 * v6 + 16), *(unsigned int *)(*(_QWORD *)a3 + 8 + 24 * v10 + 16)) & 0x80000000) != 0);
  }
  while (v8 < v4)
  {
    v11 = *v8;
    *v8 = *v4;
    *v4 = v11;
    do
    {
      v12 = v8[1];
      ++v8;
    }
    while (((*(uint64_t (**)(_QWORD, _QWORD))(a3 + 16))(*(unsigned int *)(*(_QWORD *)a3 + 8 + 24 * v6 + 16), *(unsigned int *)(*(_QWORD *)a3 + 8 + 24 * v12 + 16)) & 0x80000000) == 0);
    do
      v13 = *--v4;
    while (((*(uint64_t (**)(_QWORD, _QWORD))(a3 + 16))(*(unsigned int *)(*(_QWORD *)a3 + 8 + 24 * v6 + 16), *(unsigned int *)(*(_QWORD *)a3 + 8 + 24 * v13 + 16)) & 0x80000000) != 0);
  }
  if (v8 - 1 != a1)
    *a1 = *(v8 - 1);
  *(v8 - 1) = v6;
  return v8;
}

unsigned int *std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,unsigned int *,LHashIter<unsigned int,Trie<unsigned int,unsigned int>> &>(unsigned int *a1, unsigned int *a2, uint64_t a3)
{
  uint64_t v6;
  unsigned int v7;
  int v8;
  unsigned int *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  int *v13;
  int *v14;
  int v15;
  unsigned int v16;
  unsigned int v17;

  v6 = 0;
  v7 = *a1;
  do
    v8 = (*(uint64_t (**)(_QWORD, _QWORD))(a3 + 16))(*(unsigned int *)(*(_QWORD *)a3 + 8 + 24 * a1[++v6] + 16), *(unsigned int *)(*(_QWORD *)a3 + 8 + 24 * v7 + 16));
  while (v8 < 0);
  v9 = &a1[v6];
  v10 = &a1[v6 - 1];
  if (v6 == 1)
  {
    do
    {
      if (v9 >= a2)
        break;
      v12 = *--a2;
    }
    while (((*(uint64_t (**)(_QWORD, _QWORD))(a3 + 16))(*(unsigned int *)(*(_QWORD *)a3 + 8 + 24 * v12 + 16), *(unsigned int *)(*(_QWORD *)a3 + 8 + 24 * v7 + 16)) & 0x80000000) == 0);
  }
  else
  {
    do
      v11 = *--a2;
    while (((*(uint64_t (**)(_QWORD, _QWORD))(a3 + 16))(*(unsigned int *)(*(_QWORD *)a3 + 8 + 24 * v11 + 16), *(unsigned int *)(*(_QWORD *)a3 + 8 + 24 * v7 + 16)) & 0x80000000) == 0);
  }
  if (v9 < a2)
  {
    v13 = (int *)&a1[v6];
    v14 = (int *)a2;
    do
    {
      v15 = *v13;
      *v13 = *v14;
      *v14 = v15;
      do
      {
        v16 = v13[1];
        ++v13;
      }
      while (((*(uint64_t (**)(_QWORD, _QWORD))(a3 + 16))(*(unsigned int *)(*(_QWORD *)a3 + 8 + 24 * v16 + 16), *(unsigned int *)(*(_QWORD *)a3 + 8 + 24 * v7 + 16)) & 0x80000000) != 0);
      do
        v17 = *--v14;
      while (((*(uint64_t (**)(_QWORD, _QWORD))(a3 + 16))(*(unsigned int *)(*(_QWORD *)a3 + 8 + 24 * v17 + 16), *(unsigned int *)(*(_QWORD *)a3 + 8 + 24 * v7 + 16)) & 0x80000000) == 0);
    }
    while (v13 < v14);
    v10 = (unsigned int *)(v13 - 1);
  }
  if (v10 != a1)
    *a1 = *v10;
  *v10 = v7;
  return v10;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,Trie<unsigned int,unsigned int>> &,unsigned int *>(unsigned int *a1, unsigned int *a2, uint64_t a3)
{
  uint64_t v6;
  _BOOL8 result;
  unsigned int v8;
  unsigned int *v9;
  unsigned int *v10;
  uint64_t v11;
  int v12;
  unsigned int v13;
  uint64_t v14;
  int v15;
  unsigned int *v16;

  v6 = a2 - a1;
  result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      if (((*(uint64_t (**)(_QWORD, _QWORD))(a3 + 16))(*(unsigned int *)(*(_QWORD *)a3 + 8 + 24 * *(a2 - 1) + 16), *(unsigned int *)(*(_QWORD *)a3 + 8 + 24 * *a1 + 16)) & 0x80000000) != 0)
      {
        v8 = *a1;
        *a1 = *(a2 - 1);
        *(a2 - 1) = v8;
      }
      return 1;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,Trie<unsigned int,unsigned int>> &,unsigned int *>(a1, a1 + 1, a2 - 1, a3);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,Trie<unsigned int,unsigned int>> &,unsigned int *>(a1, a1 + 1, a1 + 2, a2 - 1, a3);
      return 1;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,Trie<unsigned int,unsigned int>> &,unsigned int *>(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1, a3);
      return 1;
    default:
      v9 = a1 + 2;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,Trie<unsigned int,unsigned int>> &,unsigned int *>(a1, a1 + 1, a1 + 2, a3);
      v10 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v11 = 0;
      v12 = 0;
      break;
  }
  while (1)
  {
    if (((*(uint64_t (**)(_QWORD, _QWORD))(a3 + 16))(*(unsigned int *)(*(_QWORD *)a3 + 8 + 24 * *v10 + 16), *(unsigned int *)(*(_QWORD *)a3 + 8 + 24 * *v9 + 16)) & 0x80000000) != 0)
    {
      v13 = *v10;
      v14 = v11;
      while (1)
      {
        *(unsigned int *)((char *)a1 + v14 + 12) = *(unsigned int *)((char *)a1 + v14 + 8);
        if (v14 == -8)
          break;
        v15 = (*(uint64_t (**)(_QWORD, _QWORD))(a3 + 16))(*(unsigned int *)(*(_QWORD *)a3 + 8 + 24 * v13 + 16), *(unsigned int *)(*(_QWORD *)a3 + 8 + 24 * *(unsigned int *)((char *)a1 + v14 + 4) + 16));
        v14 -= 4;
        if ((v15 & 0x80000000) == 0)
        {
          v16 = (unsigned int *)((char *)a1 + v14 + 12);
          goto LABEL_12;
        }
      }
      v16 = a1;
LABEL_12:
      *v16 = v13;
      if (++v12 == 8)
        return v10 + 1 == a2;
    }
    v9 = v10;
    v11 += 4;
    if (++v10 == a2)
      return 1;
  }
}

uint64_t std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,Trie<unsigned int,unsigned int>> &,unsigned int *>(unsigned int *a1, unsigned int *a2, unsigned int *a3, unsigned int *a4, uint64_t a5)
{
  uint64_t result;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;

  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,Trie<unsigned int,unsigned int>> &,unsigned int *>(a1, a2, a3, a5);
  result = (*(uint64_t (**)(_QWORD, _QWORD))(a5 + 16))(*(unsigned int *)(*(_QWORD *)a5 + 8 + 24 * *a4 + 16), *(unsigned int *)(*(_QWORD *)a5 + 8 + 24 * *a3 + 16));
  if ((result & 0x80000000) != 0)
  {
    v11 = *a3;
    *a3 = *a4;
    *a4 = v11;
    result = (*(uint64_t (**)(_QWORD, _QWORD))(a5 + 16))(*(unsigned int *)(*(_QWORD *)a5 + 8 + 24 * *a3 + 16), *(unsigned int *)(*(_QWORD *)a5 + 8 + 24 * *a2 + 16));
    if ((result & 0x80000000) != 0)
    {
      v12 = *a2;
      *a2 = *a3;
      *a3 = v12;
      result = (*(uint64_t (**)(_QWORD, _QWORD))(a5 + 16))(*(unsigned int *)(*(_QWORD *)a5 + 8 + 24 * *a2 + 16), *(unsigned int *)(*(_QWORD *)a5 + 8 + 24 * *a1 + 16));
      if ((result & 0x80000000) != 0)
      {
        v13 = *a1;
        *a1 = *a2;
        *a2 = v13;
      }
    }
  }
  return result;
}

uint64_t std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,Trie<unsigned int,unsigned int>> &,unsigned int *>(unsigned int *a1, unsigned int *a2, unsigned int *a3, unsigned int *a4, unsigned int *a5, uint64_t a6)
{
  uint64_t result;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;

  std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,Trie<unsigned int,unsigned int>> &,unsigned int *>(a1, a2, a3, a4, a6);
  result = (*(uint64_t (**)(_QWORD, _QWORD))(a6 + 16))(*(unsigned int *)(*(_QWORD *)a6 + 8 + 24 * *a5 + 16), *(unsigned int *)(*(_QWORD *)a6 + 8 + 24 * *a4 + 16));
  if ((result & 0x80000000) != 0)
  {
    v13 = *a4;
    *a4 = *a5;
    *a5 = v13;
    result = (*(uint64_t (**)(_QWORD, _QWORD))(a6 + 16))(*(unsigned int *)(*(_QWORD *)a6 + 8 + 24 * *a4 + 16), *(unsigned int *)(*(_QWORD *)a6 + 8 + 24 * *a3 + 16));
    if ((result & 0x80000000) != 0)
    {
      v14 = *a3;
      *a3 = *a4;
      *a4 = v14;
      result = (*(uint64_t (**)(_QWORD, _QWORD))(a6 + 16))(*(unsigned int *)(*(_QWORD *)a6 + 8 + 24 * *a3 + 16), *(unsigned int *)(*(_QWORD *)a6 + 8 + 24 * *a2 + 16));
      if ((result & 0x80000000) != 0)
      {
        v15 = *a2;
        *a2 = *a3;
        *a3 = v15;
        result = (*(uint64_t (**)(_QWORD, _QWORD))(a6 + 16))(*(unsigned int *)(*(_QWORD *)a6 + 8 + 24 * *a2 + 16), *(unsigned int *)(*(_QWORD *)a6 + 8 + 24 * *a1 + 16));
        if ((result & 0x80000000) != 0)
        {
          v16 = *a1;
          *a1 = *a2;
          *a2 = v16;
        }
      }
    }
  }
  return result;
}

unsigned int *std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,Trie<unsigned int,unsigned int>> &,unsigned int *,unsigned int *>(unsigned int *a1, unsigned int *a2, unsigned int *a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unsigned int *v12;
  unsigned int *v13;
  unsigned int *v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int *v19;

  if (a1 != a2)
  {
    v8 = (char *)a2 - (char *)a1;
    v9 = a2 - a1;
    if ((char *)a2 - (char *)a1 >= 5)
    {
      v10 = (unint64_t)(v9 - 2) >> 1;
      v11 = v10 + 1;
      v12 = &a1[v10];
      do
      {
        std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,Trie<unsigned int,unsigned int>> &,unsigned int *>((uint64_t)a1, a4, v9, v12--);
        --v11;
      }
      while (v11);
    }
    v13 = a2;
    if (a2 != a3)
    {
      v14 = a2;
      do
      {
        if (((*(uint64_t (**)(_QWORD, _QWORD))(a4 + 16))(*(unsigned int *)(*(_QWORD *)a4 + 8 + 24 * *v14 + 16), *(unsigned int *)(*(_QWORD *)a4 + 8 + 24 * *a1 + 16)) & 0x80000000) != 0)
        {
          v15 = *v14;
          *v14 = *a1;
          *a1 = v15;
          std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,Trie<unsigned int,unsigned int>> &,unsigned int *>((uint64_t)a1, a4, v9, a1);
        }
        ++v14;
      }
      while (v14 != a3);
      v13 = a3;
    }
    if (v8 >= 5)
    {
      v16 = (unint64_t)v8 >> 2;
      v17 = a2 - 1;
      do
      {
        v18 = *a1;
        v19 = std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,Trie<unsigned int,unsigned int>> &,unsigned int *>(a1, a4, v16);
        if (v17 == v19)
        {
          *v19 = v18;
        }
        else
        {
          *v19 = *v17;
          *v17 = v18;
          std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,Trie<unsigned int,unsigned int>> &,unsigned int *>((uint64_t)a1, (uint64_t)(v19 + 1), a4, v19 + 1 - a1);
        }
        --v17;
      }
      while (v16-- > 2);
    }
    return v13;
  }
  return a3;
}

uint64_t std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,Trie<unsigned int,unsigned int>> &,unsigned int *>(uint64_t result, uint64_t a2, uint64_t a3, unsigned int *a4)
{
  unint64_t v4;
  unsigned int *v5;
  uint64_t v6;
  uint64_t v9;
  uint64_t v10;
  unsigned int *v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int *v14;
  uint64_t v15;
  int64_t v16;

  v4 = a3 - 2;
  if (a3 >= 2)
  {
    v5 = a4;
    v6 = result;
    v16 = v4 >> 1;
    if ((uint64_t)(v4 >> 1) >= ((uint64_t)a4 - result) >> 2)
    {
      v9 = ((uint64_t)a4 - result) >> 1;
      v10 = v9 + 1;
      v11 = (unsigned int *)(result + 4 * (v9 + 1));
      v12 = v9 + 2;
      if (v9 + 2 < a3
        && (*(int (**)(_QWORD, _QWORD))(a2 + 16))(*(unsigned int *)(*(_QWORD *)a2 + 8 + 24 * *v11 + 16), *(unsigned int *)(*(_QWORD *)a2 + 8 + 24 * v11[1] + 16)) < 0)
      {
        ++v11;
        v10 = v12;
      }
      result = (*(uint64_t (**)(_QWORD, _QWORD))(a2 + 16))(*(unsigned int *)(*(_QWORD *)a2 + 8 + 24 * *v11 + 16), *(unsigned int *)(*(_QWORD *)a2 + 8 + 24 * *v5 + 16));
      if ((result & 0x80000000) == 0)
      {
        v13 = *v5;
        do
        {
          v14 = v11;
          *v5 = *v11;
          if (v16 < v10)
            break;
          v15 = (2 * v10) | 1;
          v11 = (unsigned int *)(v6 + 4 * v15);
          if (2 * v10 + 2 < a3
            && (*(int (**)(_QWORD, _QWORD))(a2 + 16))(*(unsigned int *)(*(_QWORD *)a2 + 8 + 24 * *v11 + 16), *(unsigned int *)(*(_QWORD *)a2 + 8 + 24 * v11[1] + 16)) < 0)
          {
            ++v11;
            v15 = 2 * v10 + 2;
          }
          result = (*(uint64_t (**)(_QWORD, _QWORD))(a2 + 16))(*(unsigned int *)(*(_QWORD *)a2 + 8 + 24 * *v11 + 16), *(unsigned int *)(*(_QWORD *)a2 + 8 + 24 * v13 + 16));
          v5 = v14;
          v10 = v15;
        }
        while ((result & 0x80000000) == 0);
        *v14 = v13;
      }
    }
  }
  return result;
}

_DWORD *std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,Trie<unsigned int,unsigned int>> &,unsigned int *>(_DWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _DWORD *v9;
  uint64_t v10;
  uint64_t v11;

  v6 = 0;
  v7 = a3 - 2;
  if (a3 < 2)
    v7 = a3 - 1;
  v8 = v7 >> 1;
  do
  {
    v9 = &a1[v6 + 1];
    v10 = (2 * v6) | 1;
    v11 = 2 * v6 + 2;
    if (v11 < a3
      && (*(int (**)(_QWORD, _QWORD))(a2 + 16))(*(unsigned int *)(*(_QWORD *)a2 + 8 + 24 * *v9 + 16), *(unsigned int *)(*(_QWORD *)a2 + 8 + 24 * a1[v6 + 2] + 16)) < 0)
    {
      ++v9;
      v10 = v11;
    }
    *a1 = *v9;
    a1 = v9;
    v6 = v10;
  }
  while (v10 <= v8);
  return v9;
}

uint64_t std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,Trie<unsigned int,unsigned int>> &,unsigned int *>(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  uint64_t v6;
  unint64_t v7;
  unsigned int *v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int *v11;

  v4 = a4 - 2;
  if (a4 >= 2)
  {
    v6 = result;
    v7 = v4 >> 1;
    v8 = (unsigned int *)(result + 4 * (v4 >> 1));
    v9 = (unsigned int *)(a2 - 4);
    result = (*(uint64_t (**)(_QWORD, _QWORD))(a3 + 16))(*(unsigned int *)(*(_QWORD *)a3 + 8 + 24 * *v8 + 16), *(unsigned int *)(*(_QWORD *)a3 + 8 + 24 * *(unsigned int *)(a2 - 4) + 16));
    if ((result & 0x80000000) != 0)
    {
      v10 = *v9;
      do
      {
        v11 = v8;
        *v9 = *v8;
        if (!v7)
          break;
        v7 = (v7 - 1) >> 1;
        v8 = (unsigned int *)(v6 + 4 * v7);
        result = (*(uint64_t (**)(_QWORD, _QWORD))(a3 + 16))(*(unsigned int *)(*(_QWORD *)a3 + 8 + 24 * *v8 + 16), *(unsigned int *)(*(_QWORD *)a3 + 8 + 24 * v10 + 16));
        v9 = v11;
      }
      while ((result & 0x80000000) != 0);
      *v11 = v10;
    }
  }
  return result;
}

void std::default_delete<quasar::lm::TokenStringAndCount const>::operator()[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void *v3;
  void *v4;
  void **v5;

  if (a2)
  {
    v5 = (void **)(a2 + 104);
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v5);
    v3 = *(void **)(a2 + 80);
    if (v3)
    {
      *(_QWORD *)(a2 + 88) = v3;
      operator delete(v3);
    }
    v4 = *(void **)(a2 + 56);
    if (v4)
    {
      *(_QWORD *)(a2 + 64) = v4;
      operator delete(v4);
    }
    v5 = (void **)(a2 + 32);
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v5);
    if (*(char *)(a2 + 31) < 0)
      operator delete(*(void **)(a2 + 8));
    MEMORY[0x1AF44D190](a2, 0x1032C40D9E35CA9);
  }
}

uint64_t Array<char>::alloc(uint64_t a1, int a2, int a3)
{
  size_t v5;
  _BYTE *v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t result;
  _BYTE *v10;
  char *v11;
  char v12;

  v5 = (a2 + (*(_DWORD *)(a1 + 16) >> 1) + 1);
  v6 = (_BYTE *)operator new[]();
  v7 = v6;
  if (a3)
    bzero(v6, v5);
  v8 = *(unsigned int *)(a1 + 16);
  result = *(_QWORD *)(a1 + 8);
  if ((_DWORD)v8)
  {
    v10 = v7;
    v11 = *(char **)(a1 + 8);
    do
    {
      v12 = *v11++;
      *v10++ = v12;
      --v8;
    }
    while (v8);
    goto LABEL_8;
  }
  if (result)
LABEL_8:
    result = MEMORY[0x1AF44D160](result, 0x1000C8077774924);
  *(_QWORD *)(a1 + 8) = v7;
  *(_DWORD *)(a1 + 16) = v5;
  return result;
}

uint64_t Array<char const**>::alloc(uint64_t a1, int a2, int a3)
{
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t result;
  _QWORD *v10;
  uint64_t *v11;
  uint64_t v12;

  v5 = (a2 + (*(_DWORD *)(a1 + 16) >> 1) + 1);
  v6 = (_QWORD *)operator new[]();
  v7 = v6;
  if (a3)
    bzero(v6, 8 * v5);
  v8 = *(unsigned int *)(a1 + 16);
  result = *(_QWORD *)(a1 + 8);
  if ((_DWORD)v8)
  {
    v10 = v7;
    v11 = *(uint64_t **)(a1 + 8);
    do
    {
      v12 = *v11++;
      *v10++ = v12;
      --v8;
    }
    while (v8);
    goto LABEL_8;
  }
  if (result)
LABEL_8:
    result = MEMORY[0x1AF44D160](result, 0x80C80B8603338);
  *(_QWORD *)(a1 + 8) = v7;
  *(_DWORD *)(a1 + 16) = v5;
  return result;
}

uint64_t Array<char const**>::operator[](int *a1, uint64_t a2)
{
  unint64_t v3;

  v3 = a2 - *a1;
  if (v3 >= a1[1])
  {
    a1[1] = v3 + 1;
    if (v3 >= a1[4])
      Array<char const**>::alloc((uint64_t)a1, v3, 0);
  }
  return *((_QWORD *)a1 + 1) + 8 * v3;
}

uint64_t quasar::NFHatTransformer::estimateSilenceDuration(quasar::NFHatTransformer *a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  int v9;
  float v10;
  unint64_t v11;
  float *v12;
  float *v13;
  float *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  float *v20;
  int v21;

  result = kaldi::MatrixBase<float>::NumRows(a2);
  if ((int)result >= 1)
  {
    v9 = 0;
    do
    {
      quasar::NFHatTransformer::estimateSilenceDuration(a1, *(float *)(*(_QWORD *)a2 + 4 * *(_DWORD *)(a2 + 16) * v9), a3);
      v10 = *(double *)a1;
      v12 = *(float **)(a4 + 8);
      v11 = *(_QWORD *)(a4 + 16);
      if ((unint64_t)v12 >= v11)
      {
        v14 = *(float **)a4;
        v15 = ((uint64_t)v12 - *(_QWORD *)a4) >> 2;
        v16 = v15 + 1;
        if ((unint64_t)(v15 + 1) >> 62)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v17 = v11 - (_QWORD)v14;
        if (v17 >> 1 > v16)
          v16 = v17 >> 1;
        if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFFCLL)
          v18 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v18 = v16;
        if (v18)
        {
          v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(a4 + 16, v18);
          v14 = *(float **)a4;
          v12 = *(float **)(a4 + 8);
        }
        else
        {
          v19 = 0;
        }
        v20 = (float *)&v19[4 * v15];
        *v20 = v10;
        v13 = v20 + 1;
        while (v12 != v14)
        {
          v21 = *((_DWORD *)v12-- - 1);
          *((_DWORD *)v20-- - 1) = v21;
        }
        *(_QWORD *)a4 = v20;
        *(_QWORD *)(a4 + 8) = v13;
        *(_QWORD *)(a4 + 16) = &v19[4 * v18];
        if (v14)
          operator delete(v14);
      }
      else
      {
        *v12 = v10;
        v13 = v12 + 1;
      }
      *(_QWORD *)(a4 + 8) = v13;
      ++v9;
      result = kaldi::MatrixBase<float>::NumRows(a2);
    }
    while (v9 < (int)result);
  }
  return result;
}

void quasar::NFHatTransformer::estimateSilenceDuration(quasar::NFHatTransformer *this, float a2, int a3)
{
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  unsigned int v15;
  double v16;
  float v17;
  double v18;
  double v19;
  unint64_t v20;
  double *v21;
  double *v22;
  double *v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char *v28;
  double *v29;
  char *v30;
  uint64_t v31;
  unint64_t v32;
  char *v33;
  _DWORD *v34;
  _BYTE *v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  char *v40;
  char *v41;
  char *v42;
  int v43;

  v6 = *((double *)this + 9);
  v7 = *((double *)this + 7);
  v8 = v6 * v7;
  v9 = 1.0 - v6;
  v10 = (1.0 - v6) * (1.0 - v7);
  v11 = v6 * (1.0 - v7);
  v12 = v9 * v7;
  if (v12 <= v11)
    v13 = v11;
  else
    v13 = v12;
  if (v8 <= v10)
    v14 = v10;
  else
    v14 = v8;
  if (v8 <= v10)
  {
    *((_DWORD *)this + 20) = 0;
    v16 = 0.0;
  }
  else
  {
    v15 = *((_DWORD *)this + 20) + 1;
    *((_DWORD *)this + 20) = v15;
    v16 = (double)v15;
  }
  v17 = *((double *)this + 8);
  v18 = v14 * powf(a2, v17);
  v19 = v18 / (v18 + v13 * powf(1.0 - a2, v17));
  *((double *)this + 9) = v19;
  *(double *)this = v19 * v16 * (double)a3;
  if (*((_BYTE *)this + 84))
  {
    v20 = *((_QWORD *)this + 3);
    v21 = (double *)*((_QWORD *)this + 2);
    if ((unint64_t)v21 >= v20)
    {
      v23 = (double *)*((_QWORD *)this + 1);
      v24 = v21 - v23;
      if ((unint64_t)(v24 + 1) >> 61)
        std::vector<int>::__throw_length_error[abi:ne180100]();
      v25 = v20 - (_QWORD)v23;
      v26 = (uint64_t)(v20 - (_QWORD)v23) >> 2;
      if (v26 <= v24 + 1)
        v26 = v24 + 1;
      if (v25 >= 0x7FFFFFFFFFFFFFF8)
        v27 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v27 = v26;
      if (v27)
      {
        v28 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)this + 24, v27);
        v23 = (double *)*((_QWORD *)this + 1);
        v21 = (double *)*((_QWORD *)this + 2);
        v19 = *((double *)this + 9);
      }
      else
      {
        v28 = 0;
      }
      v29 = (double *)&v28[8 * v24];
      v30 = &v28[8 * v27];
      *v29 = v19;
      v22 = v29 + 1;
      while (v21 != v23)
      {
        v31 = *((_QWORD *)v21-- - 1);
        *((_QWORD *)v29-- - 1) = v31;
      }
      *((_QWORD *)this + 1) = v29;
      *((_QWORD *)this + 2) = v22;
      *((_QWORD *)this + 3) = v30;
      if (v23)
        operator delete(v23);
    }
    else
    {
      *v21 = v19;
      v22 = v21 + 1;
    }
    v32 = *((_QWORD *)this + 6);
    *((_QWORD *)this + 2) = v22;
    v33 = (char *)*((_QWORD *)this + 5);
    if ((unint64_t)v33 >= v32)
    {
      v35 = (_BYTE *)*((_QWORD *)this + 4);
      v36 = (v33 - v35) >> 2;
      if ((unint64_t)(v36 + 1) >> 62)
        std::vector<int>::__throw_length_error[abi:ne180100]();
      v37 = v32 - (_QWORD)v35;
      v38 = (uint64_t)(v32 - (_QWORD)v35) >> 1;
      if (v38 <= v36 + 1)
        v38 = v36 + 1;
      if (v37 >= 0x7FFFFFFFFFFFFFFCLL)
        v39 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v39 = v38;
      if (v39)
      {
        v40 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)this + 48, v39);
        v35 = (_BYTE *)*((_QWORD *)this + 4);
        v33 = (char *)*((_QWORD *)this + 5);
      }
      else
      {
        v40 = 0;
      }
      v41 = &v40[4 * v36];
      v42 = &v40[4 * v39];
      *(_DWORD *)v41 = *((_DWORD *)this + 20);
      v34 = v41 + 4;
      while (v33 != v35)
      {
        v43 = *((_DWORD *)v33 - 1);
        v33 -= 4;
        *((_DWORD *)v41 - 1) = v43;
        v41 -= 4;
      }
      *((_QWORD *)this + 4) = v41;
      *((_QWORD *)this + 5) = v34;
      *((_QWORD *)this + 6) = v42;
      if (v35)
        operator delete(v35);
    }
    else
    {
      *(_DWORD *)v33 = *((_DWORD *)this + 20);
      v34 = v33 + 4;
    }
    *((_QWORD *)this + 5) = v34;
  }
}

uint64_t quasar::getLmScoreType(uint64_t a1)
{
  int v1;
  uint64_t v2;
  uint64_t v5;
  uint64_t v8;
  int v9;
  _QWORD *v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _OWORD v18[17];

  if ((*(char *)(a1 + 23) & 0x80000000) == 0)
  {
    v1 = *(unsigned __int8 *)(a1 + 23);
    if (v1 != 7)
    {
      v2 = a1;
      if (v1 != 9)
      {
        if (v1 != 10)
          goto LABEL_37;
        if (*(_QWORD *)a1 != 0x7270676F6C67656ELL || *(_WORD *)(a1 + 8) != 25199)
          goto LABEL_37;
        return 0;
      }
      goto LABEL_25;
    }
    if (*(_DWORD *)a1 != 1885826924 || *(_DWORD *)(a1 + 3) != 1651470960)
    {
LABEL_37:
      memset(v18, 0, sizeof(v18));
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v18);
      v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)"Unknown LM score type \"", 23);
      v13 = *(char *)(a1 + 23);
      if (v13 >= 0)
        v14 = a1;
      else
        v14 = *(_QWORD *)a1;
      if (v13 >= 0)
        v15 = *(unsigned __int8 *)(a1 + 23);
      else
        v15 = *(_QWORD *)(a1 + 8);
      v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, v14, v15);
      std::operator<<[abi:ne180100]<std::char_traits<char>>(v16, "\"");
      quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v18);
    }
    return 1;
  }
  v5 = *(_QWORD *)(a1 + 8);
  if (v5 == 7)
  {
    if (**(_DWORD **)a1 == 1885826924 && *(_DWORD *)(*(_QWORD *)a1 + 3) == 1651470960)
      return 1;
    v5 = *(_QWORD *)(a1 + 8);
  }
  else if (v5 == 10 && **(_QWORD **)a1 == 0x7270676F6C67656ELL && *(_WORD *)(*(_QWORD *)a1 + 8) == 25199)
  {
    return 0;
  }
  if (v5 != 9)
    goto LABEL_37;
  v2 = *(_QWORD *)a1;
LABEL_25:
  v8 = *(_QWORD *)v2;
  v9 = *(unsigned __int8 *)(v2 + 8);
  if (v8 != 0x6F72703031676F6CLL || v9 != 98)
    goto LABEL_37;
  return 2;
}

_QWORD *quasar::getLmScoreType@<X0>(unsigned int a1@<W0>, _QWORD *a2@<X8>)
{
  _OWORD v3[17];

  if (a1 >= 3)
  {
    memset(v3, 0, sizeof(v3));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v3);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v3, "Coding error");
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v3);
  }
  return std::string::basic_string[abi:ne180100]<0>(a2, off_1E5D47408[a1]);
}

void quasar::LmInfo::getScoresFromTokenList(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v9;
  _DWORD *v10;
  int v11;
  _DWORD *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  char *v18;
  _DWORD *v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  _OWORD v24[18];

  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  if (v4 != v5)
  {
    v9 = (_QWORD *)(a2 + 16);
    v10 = *(_DWORD **)(a2 + 8);
    do
    {
      v11 = *(_DWORD *)(v4 + 24);
      if ((unint64_t)v10 >= *v9)
      {
        v12 = *(_DWORD **)a2;
        v13 = ((uint64_t)v10 - *(_QWORD *)a2) >> 2;
        v14 = v13 + 1;
        if ((unint64_t)(v13 + 1) >> 62)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v15 = *v9 - (_QWORD)v12;
        if (v15 >> 1 > v14)
          v14 = v15 >> 1;
        if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFFCLL)
          v16 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v16 = v14;
        if (v16)
        {
          v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)v9, v16);
          v12 = *(_DWORD **)a2;
          v10 = *(_DWORD **)(a2 + 8);
        }
        else
        {
          v17 = 0;
        }
        v18 = &v17[4 * v13];
        *(_DWORD *)v18 = v11;
        v19 = v18 + 4;
        while (v10 != v12)
        {
          v20 = *--v10;
          *((_DWORD *)v18 - 1) = v20;
          v18 -= 4;
        }
        *(_QWORD *)a2 = v18;
        *(_QWORD *)(a2 + 8) = v19;
        *(_QWORD *)(a2 + 16) = &v17[4 * v16];
        if (v12)
          operator delete(v12);
        v10 = v19;
      }
      else
      {
        *v10++ = v11;
      }
      *(_QWORD *)(a2 + 8) = v10;
      if (*(_BYTE *)(v4 + 37))
      {
        v21 = *a4;
        v22 = *a3;
        if (*a4 >= (unint64_t)((a3[1] - *a3) >> 2))
        {
          memset(v24, 0, 272);
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v24);
          std::operator<<[abi:ne180100]<std::char_traits<char>>(v24, "wrong dimensionality of logScores vector");
          quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v24);
        }
        v23 = *(_DWORD *)(v4 + 32);
        *a4 = v21 + 1;
        *(_DWORD *)(v22 + 4 * v21) = v23;
      }
      v4 += 88;
    }
    while (v4 != v5);
  }
}

void sub_1AD8DCFB4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&a9);
}

uint64_t quasar::CorpusStats::addUtterance(quasar::CorpusStats *this, quasar::LmInfo *a2)
{
  char *v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  BOOL v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  BOOL v22;
  uint64_t v23;
  char *v24;
  uint64_t result;
  uint64_t v26;
  _OWORD v27[17];

  v5 = *((_QWORD *)this + 11);
  v4 = (char *)this + 88;
  v6 = *((_QWORD *)v4 - 1);
  if (v6 >= v5)
  {
    v7 = std::vector<quasar::LmInfo>::__push_back_slow_path<quasar::LmInfo const&>((uint64_t *)this + 9, (uint64_t)a2);
  }
  else
  {
    std::allocator<quasar::LmInfo>::construct[abi:ne180100]<quasar::LmInfo,quasar::LmInfo const&>((uint64_t)v4, *((_QWORD *)v4 - 1), (uint64_t)a2);
    v7 = v6 + 104;
    *((_QWORD *)this + 10) = v6 + 104;
  }
  *((_QWORD *)this + 10) = v7;
  if (!*((_BYTE *)a2 + 72))
    goto LABEL_28;
  if (*(_QWORD *)(*((_QWORD *)a2 + 2) - 64))
    v8 = quasar::gLogLevel < 2;
  else
    v8 = 1;
  if (!v8)
  {
    memset(v27, 0, sizeof(v27));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v27);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)"utterance doesn't end with sentence-end symbol(", 47);
    v9 = (_QWORD *)std::ostream::operator<<();
    v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)":", 1);
    v11 = *((_QWORD *)a2 + 2);
    v14 = *(_QWORD *)(v11 - 88);
    v12 = v11 - 88;
    v13 = v14;
    v15 = *(char *)(v12 + 23);
    if (v15 >= 0)
      v16 = v12;
    else
      v16 = v13;
    if (v15 >= 0)
      v17 = *(unsigned __int8 *)(v12 + 23);
    else
      v17 = *(_QWORD *)(v12 + 8);
    v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, v16, v17);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)")", 1);
    quasar::QuasarWarnMessage::~QuasarWarnMessage((quasar::QuasarWarnMessage *)v27);
  }
  if (*((_BYTE *)a2 + 36))
  {
    ++*((_QWORD *)this + 2);
    *((double *)this + 1) = *((double *)this + 1) + *((float *)a2 + 8);
    v19 = *((_QWORD *)a2 + 1);
    v20 = *((_QWORD *)a2 + 2);
    if (v19 == v20)
      goto LABEL_26;
    v21 = 1;
    do
    {
      v22 = *(_BYTE *)(v19 + 37) != 0;
      if (*(_BYTE *)(v19 + 37))
        v23 = 24;
      else
        v23 = 40;
      ++*(_QWORD *)((char *)this + v23);
      if (*(_BYTE *)(v19 + 36))
        ++*((_QWORD *)this + 4);
      v21 &= v22;
      v19 += 88;
    }
    while (v19 != v20);
    if ((v21 & 1) != 0)
LABEL_26:
      quasar::CorpusStats::updateNgramHits(this, a2);
    v24 = (char *)this + 24;
    result = 1;
    v26 = -1;
  }
  else
  {
LABEL_28:
    result = 0;
    v24 = (char *)this + 48;
    v26 = 1;
  }
  *(_QWORD *)v24 += v26;
  return result;
}

void sub_1AD8DD1A8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 80) = v2;
  _Unwind_Resume(exception_object);
}

void quasar::CorpusStats::updateNgramHits(quasar::CorpusStats *this, const quasar::LmInfo *a2)
{
  char *v4;
  uint64_t v5;
  char *v6;
  char *v8;
  int *v9;
  int *v10;
  int *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  const void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  _QWORD *v22;
  unint64_t v23;
  uint64_t v24;
  int v25;
  _QWORD *v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;

  v4 = (char *)*((_QWORD *)a2 + 10);
  v5 = *((_QWORD *)a2 + 11);
  v6 = (char *)a2 + 80;
  if (v4 != (char *)v5)
  {
    v9 = (int *)*((_QWORD *)this + 12);
    v10 = (int *)*((_QWORD *)this + 13);
    v8 = (char *)this + 96;
    if (v9 == v10)
    {
      v11 = v9;
      if (v8 != v6)
      {
        std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>(v8, v4, v5, (v5 - (uint64_t)v4) >> 2);
        v9 = (int *)*((_QWORD *)this + 12);
        v11 = (int *)*((_QWORD *)this + 13);
      }
      std::vector<std::vector<unsigned long long>>::resize((uint64_t *)this + 15, v11 - v9);
      v9 = (int *)*((_QWORD *)this + 13);
      if (v9 == *((int **)this + 12))
      {
        v10 = (int *)*((_QWORD *)this + 13);
      }
      else
      {
        v12 = 0;
        v13 = 0;
        v9 = (int *)*((_QWORD *)this + 12);
        do
        {
          std::vector<unsigned long>::resize(*((_QWORD *)this + 15) + v12, v9[v13++] + 1);
          v9 = (int *)*((_QWORD *)this + 12);
          v10 = (int *)*((_QWORD *)this + 13);
          v12 += 24;
        }
        while (v13 < v10 - v9);
      }
    }
    v14 = (char *)v10 - (char *)v9;
    v15 = (const void *)*((_QWORD *)a2 + 10);
    if ((char *)v10 - (char *)v9 != *((_QWORD *)a2 + 11) - (_QWORD)v15 || memcmp(v9, v15, (char *)v10 - (char *)v9))
    {
      if (quasar::gLogLevel < 2)
        return;
      v42 = 0u;
      v43 = 0u;
      v40 = 0u;
      v41 = 0u;
      v38 = 0u;
      v39 = 0u;
      v36 = 0u;
      v37 = 0u;
      v34 = 0u;
      v35 = 0u;
      v32 = 0u;
      v33 = 0u;
      v30 = 0u;
      v31 = 0u;
      v28 = 0u;
      v29 = 0u;
      v27 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v27);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v27, (uint64_t)"Ngram orders from previous utterances inconsistent with ones from current utterance", 83);
      goto LABEL_14;
    }
    v16 = *((_QWORD *)a2 + 1);
    v17 = *((_QWORD *)a2 + 2);
    if (v16 == v17)
    {
LABEL_20:
      if (v10 != v9)
      {
        v19 = 0;
        v20 = v14 >> 2;
        if ((unint64_t)(v14 >> 2) <= 1)
          v20 = 1;
        do
        {
          v21 = v9[v19];
          if (v21 && v16 != v17)
          {
            v22 = (_QWORD *)(*((_QWORD *)this + 15) + 24 * v19);
            LODWORD(v23) = 1;
            v24 = v16;
            do
            {
              if (v21 >= (int)v23 + 1)
                v25 = v23 + 1;
              else
                v25 = v21;
              v23 = (v25 - *(_DWORD *)(*(_QWORD *)(v24 + 64) + 4 * v19));
              if ((v23 & 0x80000000) == 0 && v23 < (uint64_t)(v22[1] - *v22) >> 3)
                ++*(_QWORD *)(*v22 + 8 * v23);
              v24 += 88;
            }
            while (v24 != v17);
          }
          ++v19;
        }
        while (v19 != v20);
      }
    }
    else
    {
      v18 = *((_QWORD *)a2 + 1);
      while (*(_QWORD *)(v18 + 72) - *(_QWORD *)(v18 + 64) == v14)
      {
        v18 += 88;
        if (v18 == v17)
          goto LABEL_20;
      }
      if (quasar::gLogLevel >= 2)
      {
        v42 = 0u;
        v43 = 0u;
        v40 = 0u;
        v41 = 0u;
        v38 = 0u;
        v39 = 0u;
        v36 = 0u;
        v37 = 0u;
        v34 = 0u;
        v35 = 0u;
        v32 = 0u;
        v33 = 0u;
        v30 = 0u;
        v31 = 0u;
        v28 = 0u;
        v29 = 0u;
        v27 = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v27);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v27, (uint64_t)"Unexpected number of backoffs: ", 31);
        v26 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)" vs ", 4);
        std::ostream::operator<<();
LABEL_14:
        quasar::QuasarWarnMessage::~QuasarWarnMessage((quasar::QuasarWarnMessage *)&v27);
      }
    }
  }
}

void sub_1AD8DD478(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  quasar::QuasarWarnMessage::~QuasarWarnMessage((quasar::QuasarWarnMessage *)&a9);
  _Unwind_Resume(a1);
}

void std::vector<std::vector<unsigned long long>>::resize(uint64_t *a1, unint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  BOOL v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;

  v3 = a1[1];
  v4 = 0xAAAAAAAAAAAAAAABLL * ((v3 - *a1) >> 3);
  v5 = a2 >= v4;
  v6 = a2 - v4;
  if (v6 != 0 && v5)
  {
    std::vector<std::vector<unsigned long long>>::__append(a1, v6);
  }
  else if (!v5)
  {
    v7 = *a1 + 24 * a2;
    if (v3 != v7)
    {
      v8 = a1[1];
      do
      {
        v10 = *(void **)(v8 - 24);
        v8 -= 24;
        v9 = v10;
        if (v10)
        {
          *(_QWORD *)(v3 - 16) = v9;
          operator delete(v9);
        }
        v3 = v8;
      }
      while (v8 != v7);
    }
    a1[1] = v7;
  }
}

double quasar::CorpusStats::getPerplexity(quasar::CorpusStats *this, int a2)
{
  unint64_t v2;
  double result;
  double v4;
  int v5;
  _OWORD v6[17];

  v2 = *((_QWORD *)this + 3);
  if (a2)
    v2 += *((_QWORD *)this + 2);
  result = 1.0e21;
  if (v2 && (*((_QWORD *)this + 1) & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
  {
    v4 = *((double *)this + 1) / (double)v2;
    v5 = *(_DWORD *)this;
    if (*(_DWORD *)this == 2)
    {
      result = __exp10(-v4);
    }
    else
    {
      if (v5 == 1)
      {
        v4 = -v4;
      }
      else if (v5)
      {
        memset(v6, 0, sizeof(v6));
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v6);
        std::operator<<[abi:ne180100]<std::char_traits<char>>(v6, "Coding error");
        quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v6);
      }
      result = exp(v4);
    }
    if (result > 1.0e20)
      return 1.0e20;
  }
  return result;
}

void sub_1AD8DD614(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&a9);
}

BOOL quasar::CorpusStats::computePerplexity(quasar::CorpusStats *this)
{
  double Perplexity;
  double v4;

  Perplexity = quasar::CorpusStats::getPerplexity(this, 1);
  *((double *)this + 7) = Perplexity;
  if (Perplexity == 1.0e21)
    return 0;
  v4 = quasar::CorpusStats::getPerplexity(this, 0);
  *((double *)this + 8) = v4;
  return v4 != 1.0e21;
}

void quasar::CorpusStats::Ptree(quasar::CorpusStats *this@<X0>, int a2@<W1>, quasar::PTree *a3@<X8>)
{
  quasar *v6;
  quasar *v7;
  quasar *v8;
  quasar *v9;
  quasar *v10;
  quasar *v11;
  double v12;
  double v13;
  BOOL v14;
  char v15;
  _QWORD *v16;
  quasar *v17;
  double v18;
  quasar *v19;
  double v20;
  uint64_t v21;
  uint64_t v22;
  quasar ****v23;
  _OWORD v24[2];
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  void *v40[2];
  char v41;
  void *v42[2];
  char v43;

  quasar::PTree::PTree(a3);
  std::string::basic_string[abi:ne180100]<0>(v42, "utterances");
  v6 = (quasar *)*((_QWORD *)this + 2);
  LODWORD(v24[0]) = quasar::getType(v6);
  std::to_string((std::string *)((char *)v24 + 8), (unint64_t)v6);
  v25 = 0uLL;
  *(_QWORD *)&v26 = 0;
  BYTE8(v26) = 1;
  quasar::PTree::putChild((uint64_t)a3, (uint64_t)v42, (uint64_t)v24, 1);
  quasar::PTree::~PTree((quasar::PTree *)v24);
  if (v43 < 0)
    operator delete(v42[0]);
  std::string::basic_string[abi:ne180100]<0>(v42, "words");
  v7 = (quasar *)*((_QWORD *)this + 3);
  LODWORD(v24[0]) = quasar::getType(v7);
  std::to_string((std::string *)((char *)v24 + 8), (unint64_t)v7);
  v25 = 0uLL;
  *(_QWORD *)&v26 = 0;
  BYTE8(v26) = 1;
  quasar::PTree::putChild((uint64_t)a3, (uint64_t)v42, (uint64_t)v24, 1);
  quasar::PTree::~PTree((quasar::PTree *)v24);
  if (v43 < 0)
    operator delete(v42[0]);
  std::string::basic_string[abi:ne180100]<0>(v42, "OOVs");
  v8 = (quasar *)*((_QWORD *)this + 4);
  LODWORD(v24[0]) = quasar::getType(v8);
  std::to_string((std::string *)((char *)v24 + 8), (unint64_t)v8);
  v25 = 0uLL;
  *(_QWORD *)&v26 = 0;
  BYTE8(v26) = 1;
  quasar::PTree::putChild((uint64_t)a3, (uint64_t)v42, (uint64_t)v24, 1);
  quasar::PTree::~PTree((quasar::PTree *)v24);
  if (v43 < 0)
    operator delete(v42[0]);
  std::string::basic_string[abi:ne180100]<0>(v42, "invalidTokens");
  v9 = (quasar *)*((_QWORD *)this + 5);
  LODWORD(v24[0]) = quasar::getType(v9);
  std::to_string((std::string *)((char *)v24 + 8), (unint64_t)v9);
  v25 = 0uLL;
  *(_QWORD *)&v26 = 0;
  BYTE8(v26) = 1;
  quasar::PTree::putChild((uint64_t)a3, (uint64_t)v42, (uint64_t)v24, 1);
  quasar::PTree::~PTree((quasar::PTree *)v24);
  if (v43 < 0)
    operator delete(v42[0]);
  std::string::basic_string[abi:ne180100]<0>(v42, "invalidUtterances");
  v10 = (quasar *)*((_QWORD *)this + 6);
  LODWORD(v24[0]) = quasar::getType(v10);
  std::to_string((std::string *)((char *)v24 + 8), (unint64_t)v10);
  v25 = 0uLL;
  *(_QWORD *)&v26 = 0;
  BYTE8(v26) = 1;
  quasar::PTree::putChild((uint64_t)a3, (uint64_t)v42, (uint64_t)v24, 1);
  quasar::PTree::~PTree((quasar::PTree *)v24);
  if (v43 < 0)
    operator delete(v42[0]);
  std::string::basic_string[abi:ne180100]<0>(v42, "scoreType");
  quasar::getLmScoreType(*(_DWORD *)this, v40);
  quasar::PTree::PTree(v24, v40);
  quasar::PTree::putChild((uint64_t)a3, (uint64_t)v42, (uint64_t)v24, 1);
  quasar::PTree::~PTree((quasar::PTree *)v24);
  if (v41 < 0)
    operator delete(v40[0]);
  if (v43 < 0)
  {
    operator delete(v42[0]);
    if (!a2)
      goto LABEL_19;
  }
  else if (!a2)
  {
    goto LABEL_19;
  }
  v11 = (quasar *)std::string::basic_string[abi:ne180100]<0>(v42, "logProb");
  v12 = *((double *)this + 1);
  LODWORD(v24[0]) = quasar::getType(v11, *(float *)&v12);
  std::to_string((std::string *)((char *)v24 + 8), v12);
  v25 = 0uLL;
  *(_QWORD *)&v26 = 0;
  BYTE8(v26) = 1;
  quasar::PTree::putChild((uint64_t)a3, (uint64_t)v42, (uint64_t)v24, 1);
  quasar::PTree::~PTree((quasar::PTree *)v24);
  if (v43 < 0)
    operator delete(v42[0]);
LABEL_19:
  v13 = *((double *)this + 7);
  if (v13 == 1.0e21)
  {
    v14 = quasar::CorpusStats::computePerplexity(this);
    v15 = quasar::gLogLevel < 4 || v14;
    if ((v15 & 1) == 0)
    {
      v38 = 0u;
      v39 = 0u;
      v36 = 0u;
      v37 = 0u;
      v34 = 0u;
      v35 = 0u;
      v32 = 0u;
      v33 = 0u;
      v30 = 0u;
      v31 = 0u;
      v28 = 0u;
      v29 = 0u;
      v26 = 0u;
      v27 = 0u;
      v25 = 0u;
      memset(v24, 0, sizeof(v24));
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v24);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)"perplexity calculation failed, words ", 37);
      v16 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)" logprob = ", 11);
      std::ostream::operator<<();
      quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)v24);
    }
    v13 = *((double *)this + 7);
  }
  if (v13 != 1.0e21)
  {
    v17 = (quasar *)std::string::basic_string[abi:ne180100]<0>(v42, "PPL");
    v18 = *((double *)this + 7);
    LODWORD(v24[0]) = quasar::getType(v17, *(float *)&v18);
    std::to_string((std::string *)((char *)v24 + 8), v18);
    v25 = 0uLL;
    *(_QWORD *)&v26 = 0;
    BYTE8(v26) = 1;
    quasar::PTree::putChild((uint64_t)a3, (uint64_t)v42, (uint64_t)v24, 1);
    quasar::PTree::~PTree((quasar::PTree *)v24);
    if (v43 < 0)
      operator delete(v42[0]);
    v19 = (quasar *)std::string::basic_string[abi:ne180100]<0>(v42, "PPL1");
    v20 = *((double *)this + 8);
    LODWORD(v24[0]) = quasar::getType(v19, *(float *)&v20);
    std::to_string((std::string *)((char *)v24 + 8), v20);
    v25 = 0uLL;
    *(_QWORD *)&v26 = 0;
    BYTE8(v26) = 1;
    quasar::PTree::putChild((uint64_t)a3, (uint64_t)v42, (uint64_t)v24, 1);
    quasar::PTree::~PTree((quasar::PTree *)v24);
    if (v43 < 0)
      operator delete(v42[0]);
  }
  v21 = *((_QWORD *)this + 15);
  v22 = *((_QWORD *)this + 16);
  v23 = (quasar ****)((char *)this + 120);
  if (v21 != v22)
  {
    std::string::basic_string[abi:ne180100]<0>(v42, "ngramHits");
    quasar::vec2dToPtree<unsigned long long>(v23, (quasar::PTree *)v24);
    quasar::PTree::putChild((uint64_t)a3, (uint64_t)v42, (uint64_t)v24, 1);
    quasar::PTree::~PTree((quasar::PTree *)v24);
    if (v43 < 0)
      operator delete(v42[0]);
  }
}

void sub_1AD8DDBA0(_Unwind_Exception *a1)
{
  quasar::PTree *v1;

  quasar::PTree::~PTree(v1);
  _Unwind_Resume(a1);
}

void quasar::vec2dToPtree<unsigned long long>(quasar ****a1@<X0>, quasar::PTree *a2@<X8>)
{
  quasar ***v4;
  quasar ***v5;
  quasar **v6;
  quasar **v7;
  quasar *v8;
  int Type;
  std::string v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  _BYTE v15[64];

  quasar::PTree::PTree(a2);
  v4 = *a1;
  v5 = a1[1];
  if (*a1 != v5)
  {
    do
    {
      quasar::PTree::PTree((quasar::PTree *)v15);
      v6 = *v4;
      v7 = v4[1];
      while (v6 != v7)
      {
        v8 = *v6;
        Type = quasar::getType(*v6);
        std::to_string(&v10, (unint64_t)v8);
        v11 = 0;
        v12 = 0;
        v13 = 0;
        v14 = 1;
        quasar::PTree::addChild((quasar::PTree *)v15, (const quasar::PTree *)&Type);
        quasar::PTree::~PTree((quasar::PTree *)&Type);
        ++v6;
      }
      quasar::PTree::addChild(a2, (const quasar::PTree *)v15);
      quasar::PTree::~PTree((quasar::PTree *)v15);
      v4 += 3;
    }
    while (v4 != v5);
  }
}

void sub_1AD8DDD68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  quasar::PTree *v9;
  va_list va;

  va_start(va, a9);
  quasar::PTree::~PTree((quasar::PTree *)va);
  quasar::PTree::~PTree(v9);
  _Unwind_Resume(a1);
}

void quasar::CorpusStats::print(quasar::CorpusStats *this)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  BOOL v7;
  int v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;

  if (quasar::gLogLevel >= 4)
  {
    v27 = 0u;
    v28 = 0u;
    v25 = 0u;
    v26 = 0u;
    v23 = 0u;
    v24 = 0u;
    v21 = 0u;
    v22 = 0u;
    v19 = 0u;
    v20 = 0u;
    v17 = 0u;
    v18 = 0u;
    v15 = 0u;
    v16 = 0u;
    v13 = 0u;
    v14 = 0u;
    v12 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v12);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v12, (uint64_t)"Computed perplexity for ", 24);
    v2 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)" sentences, ", 12);
    v3 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)" words, ", 8);
    v4 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)" OOVs, ", 7);
    v5 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)" invalid tokens, ", 17);
    v6 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)" invalid utterances", 19);
    quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&v12);
  }
  if (*((double *)this + 7) == 1.0e21)
  {
    v7 = quasar::CorpusStats::computePerplexity(this);
    v8 = quasar::gLogLevel;
    if (v7 || quasar::gLogLevel < 4)
      goto LABEL_8;
    v27 = 0u;
    v28 = 0u;
    v25 = 0u;
    v26 = 0u;
    v23 = 0u;
    v24 = 0u;
    v21 = 0u;
    v22 = 0u;
    v19 = 0u;
    v20 = 0u;
    v17 = 0u;
    v18 = 0u;
    v15 = 0u;
    v16 = 0u;
    v13 = 0u;
    v14 = 0u;
    v12 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v12);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v12, (uint64_t)"logprob = ", 10);
    v9 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"perplexity calculation failed", 29);
    quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&v12);
  }
  v8 = quasar::gLogLevel;
LABEL_8:
  if (v8 >= 4)
  {
    v27 = 0u;
    v28 = 0u;
    v25 = 0u;
    v26 = 0u;
    v23 = 0u;
    v24 = 0u;
    v21 = 0u;
    v22 = 0u;
    v19 = 0u;
    v20 = 0u;
    v17 = 0u;
    v18 = 0u;
    v15 = 0u;
    v16 = 0u;
    v13 = 0u;
    v14 = 0u;
    v12 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v12);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v12, (uint64_t)"logprob = ", 10);
    v10 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)" ppl = ", 7);
    v11 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)" ppl1 = ", 8);
    std::ostream::operator<<();
    quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&v12);
  }
}

void sub_1AD8DDFC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&a9);
  _Unwind_Resume(a1);
}

uint64_t quasar::CorpusStats::collectLogScores(char **a1, uint64_t **a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t *v4;
  char **v5;
  uint64_t *v6;
  char *v7;
  int *v8;
  char v9;
  char *v10;
  _DWORD *v11;
  uint64_t v12;
  unint64_t v13;
  int v14;
  uint64_t v15;
  unsigned __int8 *v16;
  _QWORD *v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unsigned __int8 *v32;
  unsigned __int8 *v33;
  uint64_t v34;
  const void *v35;
  char **v36;
  unsigned __int8 *v37;
  unint64_t v38;
  char *v39;
  int v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  unint64_t v44;
  unsigned int v45;
  char v46;
  _QWORD *v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  char v52;
  _QWORD *v53;
  int v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD *v57;
  _BYTE *v58;
  uint64_t v59;
  int v60;
  unint64_t v61;
  _QWORD *v62;
  int v63;
  uint64_t v64;
  uint64_t v65;
  _QWORD *v66;
  _QWORD *v67;
  int v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  _QWORD *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  float *v76;
  float *v77;
  uint64_t v78;
  uint64_t v79;
  float *v80;
  float *v81;
  float v82;
  uint64_t result;
  _QWORD *v84;
  int v85;
  uint64_t v86;
  uint64_t v87;
  _QWORD *v88;
  int v91;
  unint64_t v92;
  size_t __n;
  uint64_t v94;
  int v95;
  void *__s2;
  void *v97;
  uint64_t v98;
  uint64_t v99;
  void *__p;
  _BYTE *v101;
  uint64_t v102;
  uint64_t v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;

  v3 = a3;
  v4 = (uint64_t *)a2;
  v5 = a1;
  v7 = *a1;
  v6 = (uint64_t *)a1[1];
  v8 = *(int **)*a1;
  if (*a1 == (char *)v6)
  {
LABEL_8:
    v91 = *v8;
    *(_OWORD *)(a3 + 40) = 0u;
    *(_OWORD *)(a3 + 24) = 0u;
    *(_OWORD *)(a3 + 8) = 0u;
    v103 = 0;
    v12 = *((_QWORD *)v8 + 9);
    if (*((_QWORD *)v8 + 10) != v12)
    {
      v13 = 0;
      v14 = 0;
      while (1)
      {
        v15 = v12 + 104 * v13;
        v16 = (unsigned __int8 *)(v15 + 40);
        if (quasar::gLogLevel >= 6)
        {
          v119 = 0u;
          v120 = 0u;
          v117 = 0u;
          v118 = 0u;
          v115 = 0u;
          v116 = 0u;
          v113 = 0u;
          v114 = 0u;
          v111 = 0u;
          v112 = 0u;
          v109 = 0u;
          v110 = 0u;
          v107 = 0u;
          v108 = 0u;
          v105 = 0u;
          v106 = 0u;
          v104 = 0u;
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v104);
          v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v104, (uint64_t)"aligning scores of utterance ", 29);
          v18 = *(char *)(v15 + 63);
          if (v18 >= 0)
            v19 = v15 + 40;
          else
            v19 = *(_QWORD *)v16;
          if (v18 >= 0)
            v20 = *(unsigned __int8 *)(v15 + 63);
          else
            v20 = *(_QWORD *)(v15 + 48);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, v19, v20);
          quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)&v104);
          v7 = *v5;
        }
        v94 = v12 + 104 * v13;
        v95 = v14;
        v21 = *(unsigned __int8 *)(v94 + 36);
        v22 = v5[1] - v7;
        if ((unint64_t)v22 >= 9)
        {
          v23 = v22 >> 3;
          v24 = *(unsigned __int8 *)(v15 + 63);
          v92 = v13;
          __n = *(_QWORD *)(v15 + 48);
          if ((v24 & 0x80u) == 0)
            v25 = *(unsigned __int8 *)(v15 + 63);
          else
            v25 = *(_QWORD *)(v15 + 48);
          v26 = 1;
          while (1)
          {
            v27 = *(_QWORD *)(*(_QWORD *)&v7[8 * v26] + 72);
            v28 = v27 + 104 * v13;
            v29 = v28 + 40;
            v30 = *(unsigned __int8 *)(v28 + 63);
            v31 = *(_QWORD *)(v28 + 48);
            if ((v30 & 0x80u) == 0)
              v31 = v30;
            if (v25 != v31)
              goto LABEL_76;
            v32 = (v30 & 0x80u) == 0 ? (unsigned __int8 *)v29 : *(unsigned __int8 **)v29;
            if ((v24 & 0x80) != 0)
            {
              v35 = *(const void **)v16;
              v36 = v5;
              v37 = v16;
              v38 = v23;
              v39 = v7;
              v40 = memcmp(v35, v32, __n);
              v7 = v39;
              v23 = v38;
              v16 = v37;
              v5 = v36;
              v13 = v92;
              if (v40)
                goto LABEL_76;
            }
            else if ((_DWORD)v24)
            {
              v33 = v16;
              v34 = v24;
              while (*v33 == *v32)
              {
                ++v33;
                ++v32;
                if (!--v34)
                  goto LABEL_36;
              }
LABEL_76:
              if (quasar::gLogLevel < 2)
                return 0;
              v119 = 0u;
              v120 = 0u;
              v117 = 0u;
              v118 = 0u;
              v115 = 0u;
              v116 = 0u;
              v113 = 0u;
              v114 = 0u;
              v111 = 0u;
              v112 = 0u;
              v109 = 0u;
              v110 = 0u;
              v107 = 0u;
              v108 = 0u;
              v105 = 0u;
              v106 = 0u;
              v104 = 0u;
              kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v104);
              v62 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v104, (uint64_t)"Utterance ", 10);
              v63 = *(char *)(v29 + 23);
              if (v63 >= 0)
                v64 = v29;
              else
                v64 = *(_QWORD *)v29;
              if (v63 >= 0)
                v65 = *(unsigned __int8 *)(v29 + 23);
              else
                v65 = *(_QWORD *)(v29 + 8);
              v66 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v62, v64, v65);
              v67 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v66, (uint64_t)" doesn't match ", 15);
              v68 = (char)v16[23];
              if (v68 >= 0)
                v69 = (uint64_t)v16;
              else
                v69 = *(_QWORD *)v16;
              if (v68 >= 0)
                v70 = v16[23];
              else
                v70 = *((_QWORD *)v16 + 1);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v67, v69, v70);
              goto LABEL_127;
            }
LABEL_36:
            if (*(unsigned __int8 *)(v27 + 104 * v13 + 36) != v21)
              break;
            v26 = (v26 + 1);
            if (v23 <= v26)
              goto LABEL_38;
          }
          if (quasar::gLogLevel < 2)
            return 0;
          v119 = 0u;
          v120 = 0u;
          v117 = 0u;
          v118 = 0u;
          v115 = 0u;
          v116 = 0u;
          v113 = 0u;
          v114 = 0u;
          v111 = 0u;
          v112 = 0u;
          v109 = 0u;
          v110 = 0u;
          v107 = 0u;
          v108 = 0u;
          v105 = 0u;
          v106 = 0u;
          v104 = 0u;
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v104);
          v84 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v104, (uint64_t)"Utterance ", 10);
          v85 = (char)v16[23];
          if (v85 >= 0)
            v86 = (uint64_t)v16;
          else
            v86 = *(_QWORD *)v16;
          if (v85 >= 0)
            v87 = v16[23];
          else
            v87 = *((_QWORD *)v16 + 1);
          v88 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v84, v86, v87);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v88, (uint64_t)" doesn't match isValidScore", 27);
LABEL_127:
          quasar::QuasarWarnMessage::~QuasarWarnMessage((quasar::QuasarWarnMessage *)&v104);
          return 0;
        }
LABEL_38:
        if (!v21)
        {
          v4 = (uint64_t *)a2;
          v3 = a3;
          ++*(_QWORD *)(a3 + 48);
          v60 = v95;
          goto LABEL_74;
        }
        v4 = (uint64_t *)a2;
        v3 = a3;
        ++*(_QWORD *)(a3 + 16);
        __p = 0;
        v101 = 0;
        v102 = 0;
        v41 = v103;
        quasar::LmInfo::getScoresFromTokenList(v94, (uint64_t)&__p, *a2, &v103);
        v42 = *v5;
        v43 = v103;
        if ((unint64_t)(v5[1] - *v5) < 9)
          goto LABEL_68;
        v44 = 1;
        v45 = 2;
        v46 = 1;
        do
        {
          v98 = 0;
          v99 = v41;
          __s2 = 0;
          v97 = 0;
          quasar::LmInfo::getScoresFromTokenList(*(_QWORD *)(*(_QWORD *)&v42[8 * v44] + 72) + 104 * v13, (uint64_t)&__s2, &(*a2)[3 * v44], &v99);
          if (!memcmp(__p, __s2, v101 - (_BYTE *)__p))
          {
            if (v99 == v43)
            {
              v52 = 1;
              goto LABEL_62;
            }
            if (quasar::gLogLevel >= 5)
            {
              v119 = 0u;
              v120 = 0u;
              v117 = 0u;
              v118 = 0u;
              v115 = 0u;
              v116 = 0u;
              v113 = 0u;
              v114 = 0u;
              v111 = 0u;
              v112 = 0u;
              v109 = 0u;
              v110 = 0u;
              v107 = 0u;
              v108 = 0u;
              v105 = 0u;
              v106 = 0u;
              v104 = 0u;
              kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v104);
              v53 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v104, (uint64_t)"Utterance ", 10);
              v54 = (char)v16[23];
              if (v54 >= 0)
                v55 = (uint64_t)v16;
              else
                v55 = *(_QWORD *)v16;
              if (v54 >= 0)
                v56 = v16[23];
              else
                v56 = *((_QWORD *)v16 + 1);
              v57 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v53, v55, v56);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v57, (uint64_t)" has non-matching number of token scores", 40);
              goto LABEL_60;
            }
          }
          else if (quasar::gLogLevel >= 5)
          {
            v119 = 0u;
            v120 = 0u;
            v117 = 0u;
            v118 = 0u;
            v115 = 0u;
            v116 = 0u;
            v113 = 0u;
            v114 = 0u;
            v111 = 0u;
            v112 = 0u;
            v109 = 0u;
            v110 = 0u;
            v107 = 0u;
            v108 = 0u;
            v105 = 0u;
            v106 = 0u;
            v104 = 0u;
            kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v104);
            v47 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v104, (uint64_t)"Utterance ", 10);
            v48 = (char)v16[23];
            if (v48 >= 0)
              v49 = (uint64_t)v16;
            else
              v49 = *(_QWORD *)v16;
            if (v48 >= 0)
              v50 = v16[23];
            else
              v50 = *((_QWORD *)v16 + 1);
            v51 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v47, v49, v50);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v51, (uint64_t)" has non-matching token ids", 27);
LABEL_60:
            quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&v104);
          }
          v46 = 0;
          v52 = 0;
LABEL_62:
          if (__s2)
          {
            v97 = __s2;
            operator delete(__s2);
          }
          if ((v52 & 1) == 0)
            break;
          v44 = v45;
          v42 = *v5;
          ++v45;
        }
        while (v44 < (v5[1] - *v5) >> 3);
        if ((v46 & 1) != 0)
        {
          v43 = v103;
LABEL_68:
          v58 = __p;
          v59 = *(_QWORD *)(a3 + 32) - (v43 - v41) + ((v101 - (_BYTE *)__p) >> 2);
          *(_QWORD *)(a3 + 24) = v43 - v41 + *(_QWORD *)(a3 + 24) - 1;
          *(_QWORD *)(a3 + 32) = v59;
        }
        else
        {
          v103 = v41;
          v58 = __p;
        }
        v60 = v95;
        if (v58)
        {
          v101 = v58;
          operator delete(v58);
        }
        v7 = *v5;
LABEL_74:
        v13 = (v60 + 1);
        v12 = *(_QWORD *)(*(_QWORD *)v7 + 72);
        v14 = v13;
        if (0x4EC4EC4EC4EC4EC5 * ((*(_QWORD *)(*(_QWORD *)v7 + 80) - v12) >> 3) <= v13)
        {
          v61 = v103;
          goto LABEL_91;
        }
      }
    }
    v61 = 0;
LABEL_91:
    v71 = *v4;
    if (v61 < (uint64_t)(*(_QWORD *)(*v4 + 8) - *(_QWORD *)*v4) >> 2)
    {
      if (quasar::gLogLevel >= 5)
      {
        v119 = 0u;
        v120 = 0u;
        v117 = 0u;
        v118 = 0u;
        v115 = 0u;
        v116 = 0u;
        v113 = 0u;
        v114 = 0u;
        v111 = 0u;
        v112 = 0u;
        v109 = 0u;
        v110 = 0u;
        v107 = 0u;
        v108 = 0u;
        v105 = 0u;
        v106 = 0u;
        v104 = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v104);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v104, (uint64_t)"dimensionality of logScores was chosen too big: ", 48);
        v72 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v72, (uint64_t)" vs. ", 5);
        std::ostream::operator<<();
        quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&v104);
        v71 = *v4;
      }
      v73 = v4[1];
      while (v71 != v73)
      {
        std::vector<float>::resize(v71, v61);
        v71 += 24;
      }
    }
    if (*(_QWORD *)(v3 + 16) + *(_QWORD *)(v3 + 24) == v61)
    {
      switch(v91)
      {
        case 2:
          v78 = *v4;
          v79 = v4[1];
          if (*v4 != v79)
          {
            do
            {
              v80 = *(float **)v78;
              v81 = *(float **)(v78 + 8);
              while (v80 != v81)
              {
                v82 = *v80 * 2.30258509;
                *v80++ = v82;
              }
              v78 += 24;
            }
            while (v78 != v79);
          }
          goto LABEL_118;
        case 1:
LABEL_118:
          result = 1;
          *(_DWORD *)v3 = 1;
          return result;
        case 0:
          v74 = *v4;
          v75 = v4[1];
          while (v74 != v75)
          {
            v76 = *(float **)v74;
            v77 = *(float **)(v74 + 8);
            while (v76 != v77)
            {
              *v76 = -*v76;
              ++v76;
            }
            v74 += 24;
          }
          goto LABEL_118;
      }
      v119 = 0u;
      v120 = 0u;
      v117 = 0u;
      v118 = 0u;
      v115 = 0u;
      v116 = 0u;
      v113 = 0u;
      v114 = 0u;
      v111 = 0u;
      v112 = 0u;
      v109 = 0u;
      v110 = 0u;
      v107 = 0u;
      v108 = 0u;
      v105 = 0u;
      v106 = 0u;
      v104 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v104);
      std::operator<<[abi:ne180100]<std::char_traits<char>>(&v104, "unsupported LmScoreType");
    }
    else
    {
      v119 = 0u;
      v120 = 0u;
      v117 = 0u;
      v118 = 0u;
      v115 = 0u;
      v116 = 0u;
      v113 = 0u;
      v114 = 0u;
      v111 = 0u;
      v112 = 0u;
      v109 = 0u;
      v110 = 0u;
      v107 = 0u;
      v108 = 0u;
      v105 = 0u;
      v106 = 0u;
      v104 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v104);
      std::operator<<[abi:ne180100]<std::char_traits<char>>(&v104, "number of collected tokens and utterances inconsistent");
    }
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&v104);
  }
  v9 = 1;
  v10 = *a1;
  while (1)
  {
    if ((v9 & 1) == 0)
    {
      v11 = *(_DWORD **)v10;
      if (**(_DWORD **)v10 != *v8)
      {
        if (quasar::gLogLevel >= 2)
        {
          v119 = 0u;
          v120 = 0u;
          v117 = 0u;
          v118 = 0u;
          v115 = 0u;
          v116 = 0u;
          v113 = 0u;
          v114 = 0u;
          v111 = 0u;
          v112 = 0u;
          v109 = 0u;
          v110 = 0u;
          v107 = 0u;
          v108 = 0u;
          v105 = 0u;
          v106 = 0u;
          v104 = 0u;
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v104);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v104, (uint64_t)"Score types do not match", 24);
          goto LABEL_127;
        }
        return 0;
      }
      if (*((_QWORD *)v11 + 2) != *((_QWORD *)v8 + 2))
      {
        if (quasar::gLogLevel >= 2)
        {
          v119 = 0u;
          v120 = 0u;
          v117 = 0u;
          v118 = 0u;
          v115 = 0u;
          v116 = 0u;
          v113 = 0u;
          v114 = 0u;
          v111 = 0u;
          v112 = 0u;
          v109 = 0u;
          v110 = 0u;
          v107 = 0u;
          v108 = 0u;
          v105 = 0u;
          v106 = 0u;
          v104 = 0u;
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v104);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v104, (uint64_t)"Number of utterances don't match", 32);
          goto LABEL_127;
        }
        return 0;
      }
      if (*((_QWORD *)v11 + 3) != *((_QWORD *)v8 + 3))
        break;
    }
    v9 = 0;
    v10 += 8;
    if (v10 == (char *)v6)
      goto LABEL_8;
  }
  if (quasar::gLogLevel >= 2)
  {
    v119 = 0u;
    v120 = 0u;
    v117 = 0u;
    v118 = 0u;
    v115 = 0u;
    v116 = 0u;
    v113 = 0u;
    v114 = 0u;
    v111 = 0u;
    v112 = 0u;
    v109 = 0u;
    v110 = 0u;
    v107 = 0u;
    v108 = 0u;
    v105 = 0u;
    v106 = 0u;
    v104 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v104);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v104, (uint64_t)"Number of tokens don't match", 28);
    goto LABEL_127;
  }
  return 0;
}

void sub_1AD8DE980(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25)
{
  if (__p)
    operator delete(__p);
  if (a21)
    operator delete(a21);
  _Unwind_Resume(a1);
}

BOOL quasar::CorpusStats::interpolateCorpusStatsWithBestWeights(char **a1, uint64_t a2, uint64_t a3)
{
  char *v3;
  char *v4;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  float *v11;
  double v12;
  float v13;
  int v14;
  BOOL v15;
  unint64_t v16;
  void *v19;
  float *v20;
  uint64_t *v21[3];
  void *__p[2];
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;

  v3 = *a1;
  v4 = a1[1];
  if (*a1 != v4)
  {
    v8 = *(_QWORD *)(a2 + 8);
    if (*(_QWORD *)a2 != v8 && (v4 - v3) >> 3 != (v8 - *(_QWORD *)a2) >> 2)
    {
      v37 = 0u;
      v38 = 0u;
      v35 = 0u;
      v36 = 0u;
      v33 = 0u;
      v34 = 0u;
      v31 = 0u;
      v32 = 0u;
      v29 = 0u;
      v30 = 0u;
      v27 = 0u;
      v28 = 0u;
      v25 = 0u;
      v26 = 0u;
      v23 = 0u;
      v24 = 0u;
      *(_OWORD *)__p = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
      std::operator<<[abi:ne180100]<std::char_traits<char>>(__p, "number of CorpusStats and interpolation weights don't match");
      quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)__p);
    }
    v9 = *(_QWORD *)(*(_QWORD *)v3 + 16) + *(_QWORD *)(*(_QWORD *)v3 + 24);
    std::vector<float>::vector(__p, v9);
    std::vector<std::vector<float>>::vector(v21, (v4 - v3) >> 3, (uint64_t)__p);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    if ((quasar::CorpusStats::collectLogScores(a1, v21, a3) & 1) == 0)
    {
      v37 = 0u;
      v38 = 0u;
      v35 = 0u;
      v36 = 0u;
      v33 = 0u;
      v34 = 0u;
      v31 = 0u;
      v32 = 0u;
      v29 = 0u;
      v30 = 0u;
      v27 = 0u;
      v28 = 0u;
      v25 = 0u;
      v26 = 0u;
      v23 = 0u;
      v24 = 0u;
      *(_OWORD *)__p = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"could not retrieve scores from CorpusStats", 42);
      quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)__p);
    }
    if (*(_QWORD *)a2 == *(_QWORD *)(a2 + 8)
      && (kaldi::quasar::EstimateLinearWeights((uint64_t)v21, (float **)a2, 20, 0.00097656) & 1) == 0)
    {
      v37 = 0u;
      v38 = 0u;
      v35 = 0u;
      v36 = 0u;
      v33 = 0u;
      v34 = 0u;
      v31 = 0u;
      v32 = 0u;
      v29 = 0u;
      v30 = 0u;
      v27 = 0u;
      v28 = 0u;
      v25 = 0u;
      v26 = 0u;
      v23 = 0u;
      v24 = 0u;
      *(_OWORD *)__p = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"iterative process to obtain optimal interpolation weights failed", 64);
      quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)__p);
    }
    v10 = (v21[0][1] - *v21[0]) >> 2;
    std::vector<float>::vector(&v19, v10);
    if ((kaldi::quasar::InterpolateLogScoresLinearly((uint64_t)v21, a2, (uint64_t *)&v19) & 1) == 0)
    {
      v37 = 0u;
      v38 = 0u;
      v35 = 0u;
      v36 = 0u;
      v33 = 0u;
      v34 = 0u;
      v31 = 0u;
      v32 = 0u;
      v29 = 0u;
      v30 = 0u;
      v27 = 0u;
      v28 = 0u;
      v25 = 0u;
      v26 = 0u;
      v23 = 0u;
      v24 = 0u;
      *(_OWORD *)__p = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"something went wrong with log-score interpolation", 49);
      quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)__p);
    }
    v11 = (float *)v19;
    v12 = 0.0;
    while (v11 != v20)
    {
      v13 = *v11++;
      v12 = v12 + v13;
    }
    *(double *)(a3 + 8) = v12;
    v14 = quasar::gLogLevel;
    v15 = v10 >= v9;
    v16 = v10 - v9;
    if (!v15)
    {
      if (quasar::gLogLevel >= 5)
      {
        v37 = 0u;
        v38 = 0u;
        v35 = 0u;
        v36 = 0u;
        v33 = 0u;
        v34 = 0u;
        v31 = 0u;
        v32 = 0u;
        v29 = 0u;
        v30 = 0u;
        v27 = 0u;
        v28 = 0u;
        v25 = 0u;
        v26 = 0u;
        v23 = 0u;
        v24 = 0u;
        *(_OWORD *)__p = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"number of collected log-scores doesn't match CorpusStats", 56);
        quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)__p);
        v14 = quasar::gLogLevel;
      }
      *(_QWORD *)(a3 + 24) += v16;
    }
    if (**(_DWORD **)*a1 != *(_DWORD *)a3 && v14 >= 5)
    {
      v37 = 0u;
      v38 = 0u;
      v35 = 0u;
      v36 = 0u;
      v33 = 0u;
      v34 = 0u;
      v31 = 0u;
      v32 = 0u;
      v29 = 0u;
      v30 = 0u;
      v27 = 0u;
      v28 = 0u;
      v25 = 0u;
      v26 = 0u;
      v23 = 0u;
      v24 = 0u;
      *(_OWORD *)__p = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Input scores are not logProb format, logScores are not comparable", 65);
      quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)__p);
    }
    quasar::CorpusStats::computePerplexity((quasar::CorpusStats *)a3);
    if (v19)
    {
      v20 = (float *)v19;
      operator delete(v19);
    }
    __p[0] = v21;
    std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  }
  return v3 != v4;
}

void sub_1AD8DEDCC(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  if (__p)
    operator delete(__p);
  JUMPOUT(0x1AD8DEE10);
}

void sub_1AD8DEDE4()
{
  JUMPOUT(0x1AD8DEE00);
}

void sub_1AD8DEDEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char *a15)
{
  if (__p)
    operator delete(__p);
  a15 = &a12;
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a15);
  _Unwind_Resume(a1);
}

std::string *quasar::FstLmScorerOptions::FstLmScorerOptions(std::string *this, __int128 *a2, std::string::value_type a3, _QWORD **a4, std::string::value_type a5, __int128 *a6, std::string::size_type a7, std::string::value_type a8, char a9, char a10, int a11, char a12)
{
  __int128 v19;
  std::string *v20;
  __int128 v21;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v19 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v19;
  }
  this[1].__r_.__value_.__r.__words[0] = 0;
  this[1].__r_.__value_.__l.__size_ = 0;
  this[1].__r_.__value_.__r.__words[2] = 0;
  this[2].__r_.__value_.__s.__data_[0] = a3;
  this[2].__r_.__value_.__l.__size_ = 0;
  this[2].__r_.__value_.__r.__words[2] = 0;
  this[3].__r_.__value_.__r.__words[0] = 0;
  std::vector<std::shared_ptr<kaldi::quasar::LmHandle>>::__init_with_size[abi:ne180100]<std::shared_ptr<kaldi::quasar::LmHandle>*,std::shared_ptr<kaldi::quasar::LmHandle>*>(&this[2].__r_.__value_.__s.__data_[8], *a4, a4[1], ((char *)a4[1] - (char *)*a4) >> 4);
  this[3].__r_.__value_.__s.__data_[8] = a5;
  v20 = (std::string *)((char *)this + 88);
  if (*((char *)a6 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v20, *(const std::string::value_type **)a6, *((_QWORD *)a6 + 1));
  }
  else
  {
    v21 = *a6;
    this[4].__r_.__value_.__l.__size_ = *((_QWORD *)a6 + 2);
    *(_OWORD *)&v20->__r_.__value_.__l.__data_ = v21;
  }
  this[4].__r_.__value_.__r.__words[2] = a7;
  this[5].__r_.__value_.__s.__data_[0] = a8;
  this[5].__r_.__value_.__s.__data_[1] = a9;
  this[5].__r_.__value_.__s.__data_[2] = a10;
  HIDWORD(this[5].__r_.__value_.__r.__words[0]) = a11;
  this[5].__r_.__value_.__s.__data_[8] = a12;
  return this;
}

void sub_1AD8DEF20(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  if (*(char *)(v2 + 23) < 0)
    operator delete(*(void **)v2);
  _Unwind_Resume(a1);
}

uint64_t quasar::FstLmScorer::FstLmScorer(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  _QWORD *v7;

  *(_QWORD *)a1 = &off_1E5D34570;
  v4 = a2[1];
  *(_QWORD *)(a1 + 8) = *a2;
  *(_QWORD *)(a1 + 16) = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = (_QWORD *)operator new();
  quasar::SpeechRecognizerModelLoader::SpeechRecognizerModelLoader(v7, a2);
  *(_QWORD *)(a1 + 24) = v7;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_BYTE *)(a1 + 56) = 0;
  return a1;
}

void sub_1AD8DEFEC(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  MEMORY[0x1AF44D190](v2, 0x1022C40109BEE27);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t quasar::FstLmScorer::FstLmScorer(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t v7;
  std::__shared_weak_count *v8;

  std::allocate_shared[abi:ne180100]<quasar::SpeechRecognizerConfig,std::allocator<quasar::SpeechRecognizerConfig>,std::string const&,void>(a2, &v7);
  quasar::FstLmScorer::FstLmScorer(a1, &v7);
  v3 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  return a1;
}

void sub_1AD8DF098(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t quasar::FstLmScorer::FstLmScorer(uint64_t a1, _QWORD **a2)
{
  *(_QWORD *)a1 = &off_1E5D34570;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  std::vector<std::shared_ptr<quasar::Decoder>>::__init_with_size[abi:ne180100]<std::shared_ptr<quasar::Decoder>*,std::shared_ptr<quasar::Decoder>*>((char *)(a1 + 32), *a2, a2[1], ((char *)a2[1] - (char *)*a2) >> 4);
  *(_BYTE *)(a1 + 56) = 0;
  return a1;
}

void sub_1AD8DF110(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  std::unique_ptr<quasar::SpeechRecognizerModelLoader>::reset[abi:ne180100]((quasar::SpeechRecognizerModelLoader **)(v2 + 24), 0);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void quasar::FstLmScorer::~FstLmScorer(quasar::SpeechRecognizerModelLoader **this)
{
  char *v2;
  void **v3;

  *this = (quasar::SpeechRecognizerModelLoader *)&off_1E5D34570;
  v2 = (char *)(this + 1);
  v3 = (void **)(this + 4);
  std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100](&v3);
  std::unique_ptr<quasar::SpeechRecognizerModelLoader>::reset[abi:ne180100](this + 3, 0);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)v2);
}

{
  quasar::FstLmScorer::~FstLmScorer(this);
  JUMPOUT(0x1AF44D190);
}

void quasar::FstLmScorer::getLinearCompactLattice(float **a1@<X0>, _QWORD *a2@<X8>)
{
  int v4;
  uint64_t v5;
  unint64_t v6;
  float *v7;
  float *v8;
  int v9;
  void *v10[2];
  __int128 v11;
  float v12[2];
  void *v13;
  void *__p;
  void *v15;
  uint64_t v16;
  int v17;
  void *v18[2];
  __int128 v19;

  fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::VectorFst(a2);
  v4 = fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::AddState((uint64_t)a2);
  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::MutateCheck((uint64_t)a2);
  v5 = a2[1];
  *(_DWORD *)(v5 + 88) = v4;
  v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 24))(v5);
  *(_QWORD *)(v5 + 8) = v6 & 0xCCFFFFF0007 | (((v6 >> 35) & 1) << 37) | *(_QWORD *)(v5 + 8) & 4;
  v7 = *a1;
  v8 = a1[1];
  if (*a1 == v8)
  {
    v9 = v4;
  }
  else
  {
    do
    {
      v9 = fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::AddState((uint64_t)a2);
      *(_OWORD *)v18 = 0u;
      v19 = 0u;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v18[1], 0, 0, 0);
      v12[0] = *v7;
      v12[1] = v12[0];
      v13 = v18[0];
      v15 = 0;
      v16 = 0;
      __p = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, v18[1], v19, (uint64_t)(v19 - (unint64_t)v18[1]) >> 2);
      v17 = v9;
      fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::MutateCheck((uint64_t)a2);
      fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::AddArc((_QWORD *)a2[1], v4, v12);
      if (__p)
      {
        v15 = __p;
        operator delete(__p);
      }
      if (v18[1])
      {
        *(void **)&v19 = v18[1];
        operator delete(v18[1]);
      }
      v7 += 2;
      v4 = v9;
    }
    while (v7 != v8);
  }
  *(_OWORD *)v10 = 0u;
  v11 = 0u;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v10[1], 0, 0, 0);
  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::SetFinal((uint64_t)a2, v9, (uint64_t *)v10);
  if (v10[1])
  {
    *(void **)&v11 = v10[1];
    operator delete(v10[1]);
  }
}

void sub_1AD8DF358(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  _QWORD *v21;
  _DWORD *v23;
  int v24;

  if (__p)
    operator delete(__p);
  *v21 = &unk_1E5D25800;
  v23 = (_DWORD *)v21[1];
  if (v23)
  {
    v24 = v23[14] - 1;
    v23[14] = v24;
    if (!v24)
      (*(void (**)(_DWORD *))(*(_QWORD *)v23 + 8))(v23);
  }
  _Unwind_Resume(exception_object);
}

float quasar::FstLmScorer::convertLmCost(int a1, float a2)
{
  double v3;
  float v4;
  _OWORD v5[17];

  if (a1 == 2)
  {
    v3 = a2 / 2.30258509;
    goto LABEL_7;
  }
  if (a1 == 1)
  {
    v3 = a2;
LABEL_7:
    v4 = fmin(v3, 1.0e10);
    return -v4;
  }
  if (a1)
  {
    memset(v5, 0, sizeof(v5));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v5);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v5, "Coding error");
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v5);
  }
  return fmax(a2, -1.0e10);
}

void quasar::FstLmScorer::convertLmCost(float **a1@<X0>, int a2@<W1>, float **a3@<X8>)
{
  float *v3;
  float *v4;
  uint64_t v7;
  float v8;
  float v9;
  unint64_t v10;
  float *v11;
  float *v12;
  float *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  float *v19;
  int v20;

  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v3 = *a1;
  v4 = a1[1];
  if (*a1 != v4)
  {
    v7 = (uint64_t)(a3 + 2);
    do
    {
      v8 = quasar::FstLmScorer::convertLmCost(a2, *v3);
      v9 = v8;
      v11 = a3[1];
      v10 = (unint64_t)a3[2];
      if ((unint64_t)v11 >= v10)
      {
        v13 = *a3;
        v14 = v11 - *a3;
        v15 = v14 + 1;
        if ((unint64_t)(v14 + 1) >> 62)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v16 = v10 - (_QWORD)v13;
        if (v16 >> 1 > v15)
          v15 = v16 >> 1;
        if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFFCLL)
          v17 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v17 = v15;
        if (v17)
        {
          v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v7, v17);
          v13 = *a3;
          v11 = a3[1];
        }
        else
        {
          v18 = 0;
        }
        v19 = (float *)&v18[4 * v14];
        *v19 = v9;
        v12 = v19 + 1;
        while (v11 != v13)
        {
          v20 = *((_DWORD *)v11-- - 1);
          *((_DWORD *)v19-- - 1) = v20;
        }
        *a3 = v19;
        a3[1] = v12;
        a3[2] = (float *)&v18[4 * v17];
        if (v13)
          operator delete(v13);
      }
      else
      {
        *v11 = v8;
        v12 = v11 + 1;
      }
      a3[1] = v12;
      ++v3;
    }
    while (v3 != v4);
  }
}

void sub_1AD8DF5DC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

BOOL quasar::FstLmScorer::computeLmScore(uint64_t a1, uint64_t a2, _OWORD *a3, __int128 *a4, __int128 **a5, std::string::value_type a6, uint64_t a7, _QWORD **a8, std::string::value_type a9, __int128 *a10, int **a11, int a12, int a13, __int128 **a14, char a15)
{
  int v20;
  std::string v22;
  uint64_t v23;
  uint64_t v24;
  void *__p;
  char v26;
  void **v27;

  quasar::FstLmScorerOptions::FstLmScorerOptions(&v22, a4, a6, a8, a9, a10, 0xFFFFFFFFFFFFFFFFLL, a12, SBYTE1(a12), SBYTE2(a12), a13, a15);
  v20 = quasar::FstLmScorer::computeLmScore(a1, (uint64_t)&v22, a2, a3, a5, a7, a11, a14);
  if (v26 < 0)
    operator delete(__p);
  v27 = (void **)&v24;
  std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100](&v27);
  v27 = (void **)&v23;
  std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100](&v27);
  if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v22.__r_.__value_.__l.__data_);
  return v20 == 0;
}

void sub_1AD8DF70C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  quasar::FstLmScorerOptions::~FstLmScorerOptions((void **)va);
  _Unwind_Resume(a1);
}

uint64_t quasar::FstLmScorer::computeLmScore(uint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4, __int128 **a5, uint64_t a6, int **a7, __int128 **a8)
{
  uint64_t *v16;
  uint64_t *v17;
  __int128 *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *p_shared_owners;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  _QWORD *v55;
  char *v56;
  void *v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  uint64_t v64;
  std::__shared_weak_count *v65;
  unint64_t *v66;
  unint64_t v67;
  int *v68;
  int *v69;
  uint64_t v70;
  char *v71;
  void *v72;
  char *v73;
  int64_t v74;
  unint64_t v75;
  uint64_t v76;
  unint64_t v77;
  char *v78;
  char *v79;
  uint64_t v80;
  std::string *v81;
  char *v82;
  char v83;
  std::vector<std::string>::pointer end;
  std::string *v85;
  unint64_t v86;
  unint64_t v87;
  unint64_t v88;
  char *v89;
  char *v90;
  uint64_t v91;
  uint64_t *v92;
  std::__shared_weak_count *v93;
  unint64_t *v94;
  unint64_t v95;
  std::__shared_weak_count *v96;
  unint64_t *v97;
  unint64_t v98;
  uint64_t v99;
  uint64_t v100;
  _QWORD *v101;
  uint64_t v102;
  std::__shared_weak_count *v103;
  unint64_t *v104;
  unint64_t v105;
  unint64_t *v106;
  unint64_t v107;
  uint64_t v108;
  void **v109;
  uint64_t v110;
  uint64_t *v111;
  uint64_t *v112;
  float v113;
  uint64_t *v114;
  uint64_t v115;
  float v116;
  float v117;
  uint64_t *v118;
  uint64_t v119;
  uint64_t **v120;
  uint64_t *v121;
  uint64_t *v122;
  uint64_t v123;
  _QWORD *v124;
  uint64_t v125;
  uint64_t **v126;
  uint64_t *v127;
  uint64_t *v128;
  uint64_t v129;
  _QWORD *v130;
  uint64_t v131;
  uint64_t v132;
  unint64_t v133;
  float v134;
  int v135;
  uint64_t v136;
  unint64_t *v137;
  unint64_t v138;
  BOOL v139;
  std::__shared_weak_count *v140;
  unint64_t *v141;
  unint64_t v142;
  std::__shared_weak_count *v143;
  unint64_t *v144;
  unint64_t v145;
  float *v146;
  float v147;
  unint64_t v148;
  unint64_t v149;
  int v150;
  uint64_t *v151;
  uint64_t *v152;
  uint64_t *v153;
  uint64_t v154;
  unint64_t v155;
  uint64_t v156;
  unint64_t v157;
  char *v158;
  char *v159;
  int v160;
  uint64_t *v161;
  const void *v162;
  quasar::FstLmHandle *v163;
  uint64_t v164;
  unint64_t *v165;
  unint64_t v166;
  int v167;
  int v168;
  std::string::size_type v169;
  std::string::size_type v170;
  void *v171;
  uint64_t v172;
  unint64_t v173;
  int64_t v174;
  unint64_t v175;
  char *v176;
  char *v177;
  int v178;
  std::__shared_weak_count *v179;
  unint64_t *v180;
  unint64_t v181;
  uint64_t v182;
  unint64_t *v183;
  unint64_t v184;
  BOOL v185;
  std::__shared_weak_count *v186;
  unint64_t *v187;
  unint64_t v188;
  void *v189;
  uint64_t v190;
  unint64_t *v191;
  unint64_t v192;
  std::__shared_weak_count *v193;
  unint64_t *v194;
  unint64_t v195;
  unint64_t v196;
  int v197;
  uint64_t *v198;
  uint64_t *v199;
  uint64_t *v200;
  uint64_t v201;
  unint64_t v202;
  uint64_t v203;
  unint64_t v204;
  char *v205;
  char *v206;
  int v207;
  _BYTE *v208;
  quasar::FstLmHandle *v209;
  uint64_t v210;
  unint64_t *v211;
  unint64_t v212;
  int Order;
  int v214;
  std::string::size_type size;
  std::string::size_type v216;
  void *v217;
  uint64_t v218;
  unint64_t v219;
  int64_t v220;
  unint64_t v221;
  char *v222;
  char *v223;
  int v224;
  std::__shared_weak_count *v225;
  unint64_t *v226;
  unint64_t v227;
  uint64_t v228;
  unint64_t *v229;
  unint64_t v230;
  std::__shared_weak_count *v231;
  unint64_t *v232;
  unint64_t v233;
  uint64_t v234;
  int v235;
  std::__shared_weak_count *v236;
  unint64_t *v237;
  unint64_t v238;
  std::__shared_weak_count *v239;
  unint64_t *v240;
  unint64_t v241;
  std::__shared_weak_count *v242;
  unint64_t *v243;
  unint64_t v244;
  std::__shared_weak_count *v245;
  unint64_t *v246;
  unint64_t v247;
  _QWORD *v249;
  _QWORD *v250;
  uint64_t v251;
  uint64_t **v252;
  uint64_t v254;
  uint64_t v255;
  std::__shared_weak_count *v256;
  void *v257;
  void *v258;
  uint64_t v259;
  uint64_t v260;
  std::__shared_weak_count *v261;
  void *v262;
  void *v263;
  uint64_t v264;
  uint64_t v265;
  std::__shared_weak_count *v266;
  void *v267;
  void *v268;
  uint64_t v269;
  void **v270;
  std::__shared_weak_count *v271;
  uint64_t v272;
  uint64_t v273;
  std::__shared_weak_count *v274;
  void *v275;
  void *v276;
  uint64_t v277;
  void *v278;
  void *v279;
  uint64_t v280;
  std::string v281;
  void *v282;
  uint64_t *v283;
  unint64_t v284;
  void *v285[3];
  void *v286;
  uint64_t v287;
  std::string v288;
  unint64_t v289;
  std::__shared_weak_count *v290;
  uint64_t v291;
  std::__shared_weak_count *v292;
  _BYTE __v[48];
  __int128 v294;
  __int128 v295;
  __int128 v296;
  __int128 v297;
  __int128 v298;
  __int128 v299;
  __int128 v300;
  __int128 v301;
  __int128 v302;
  __int128 v303;
  __int128 v304;
  __int128 v305;
  __int128 v306;
  __int128 v307;
  uint64_t v308;
  std::__shared_weak_count *v309;
  uint64_t v310;
  std::__shared_weak_count *v311;
  std::vector<std::string> v312;
  __int128 *v313[3];
  std::string v314;
  std::string v315;
  uint64_t v316;
  std::__shared_weak_count *v317;
  uint64_t v318;
  std::__shared_weak_count *v319;
  void *__p[2];
  char *v321;
  uint64_t v322;
  std::__shared_weak_count *v323;
  uint64_t v324;
  std::__shared_weak_count *v325;
  uint64_t v326;
  std::__shared_weak_count *v327;
  uint64_t v328;
  std::__shared_weak_count *v329;
  uint64_t v330;
  std::__shared_weak_count *v331;
  uint64_t v332;
  std::__shared_weak_count *v333;
  uint64_t v334;
  std::__shared_weak_count *v335;
  __int128 v336;
  uint64_t v337;
  uint64_t v338[3];
  const void *v339;
  uint64_t v340;
  uint64_t v341;
  std::__shared_weak_count *v342;
  _QWORD v343[5];
  unsigned int v344;
  uint64_t v345;
  uint64_t v346;
  uint64_t v347;
  std::__shared_weak_count *v348;
  uint64_t v349;
  __int128 v350;
  uint64_t v351;
  void ***v352;
  _QWORD v353[3];
  _QWORD *v354;
  _QWORD v355[3];
  _QWORD *v356;
  std::vector<unsigned int> v357;
  uint64_t v358;

  v358 = *MEMORY[0x1E0C80C00];
  v350 = 0uLL;
  v351 = 0;
  v16 = *(uint64_t **)(a2 + 24);
  v17 = *(uint64_t **)(a2 + 32);
  v18 = (__int128 *)(a2 + 24);
  if (v16 != v17)
  {
    if (&v350 == v18)
      goto LABEL_8;
    goto LABEL_3;
  }
  v19 = *(unsigned __int8 *)(a2 + 23);
  if ((v19 & 0x80u) != 0)
    v19 = *(_QWORD *)(a2 + 8);
  if (v19)
  {
    quasar::SpeechRecognizerModelLoader::getDecoderChain(*(_QWORD *)(a1 + 24), (const void **)a2, 1, (uint64_t)&v336);
    std::vector<std::shared_ptr<quasar::Decoder>>::__vdeallocate((void **)&v350);
    v350 = v336;
    v351 = v337;
    v337 = 0;
    v336 = 0uLL;
    *(_QWORD *)__v = &v336;
    std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100]((void ***)__v);
  }
  else if (&v350 != (__int128 *)(a1 + 32))
  {
    v16 = *(uint64_t **)(a1 + 32);
    v17 = *(uint64_t **)(a1 + 40);
LABEL_3:
    std::vector<std::shared_ptr<quasar::Decoder>>::__assign_with_size[abi:ne180100]<std::shared_ptr<quasar::Decoder>*,std::shared_ptr<quasar::Decoder>*>((uint64_t)&v350, v16, v17, ((char *)v17 - (char *)v16) >> 4);
  }
LABEL_8:
  v20 = operator new();
  *(_QWORD *)(v20 + 16) = 0;
  *(_QWORD *)(v20 + 24) = 850045863;
  *(_OWORD *)(v20 + 32) = 0u;
  *(_OWORD *)(v20 + 48) = 0u;
  *(_OWORD *)(v20 + 64) = 0u;
  *(_QWORD *)(v20 + 80) = 0;
  *(_QWORD *)(v20 + 88) = 1018212795;
  *(_OWORD *)(v20 + 96) = 0u;
  *(_OWORD *)(v20 + 112) = 0u;
  *(_OWORD *)(v20 + 124) = 0u;
  *(_QWORD *)v20 = &off_1E5D40300;
  *(_QWORD *)(v20 + 8) = 0;
  v349 = v20;
  std::__assoc_state<quasar::Location>::set_value<quasar::Location const&>(v20, a4);
  *(_QWORD *)&v336 = 0;
  std::allocate_shared[abi:ne180100]<quasar::RunAsyncParams,std::allocator<quasar::RunAsyncParams>,decltype(nullptr),void>(&v347);
  v21 = v349;
  if (!v349)
    std::__throw_future_error[abi:ne180100](3u);
  v22 = v347;
  std::__assoc_sub_state::__attach_future[abi:ne180100](v349);
  v346 = v21;
  v23 = quasar::RunAsyncParams::setLocation(v22, &v346);
  v24 = quasar::RunAsyncParams::setSamplingRate(v23, 0);
  quasar::RunAsyncParams::setExtraLmList(v24, (uint64_t **)(a2 + 56));
  v25 = v346;
  if (v346)
  {
    v26 = (unint64_t *)(v346 + 8);
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
      (*(void (**)(uint64_t))(*(_QWORD *)v25 + 16))(v25);
  }
  quasar::RunAsyncParams::setLeftContext(v347, (uint64_t)a8);
  v335 = 0;
  v334 = 0;
  v333 = 0;
  v332 = 0;
  v331 = 0;
  v330 = 0;
  v329 = 0;
  v328 = 0;
  v327 = 0;
  v326 = 0;
  v325 = 0;
  v324 = 0;
  memset(__v, 0, 24);
  v323 = 0;
  v322 = 0;
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  v254 = a2;
  v319 = 0;
  v318 = 0;
  v317 = 0;
  v316 = 0;
  memset(&v315, 0, sizeof(v315));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v315, *a8, a8[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a8[1] - (char *)*a8) >> 3));
  v252 = (uint64_t **)(a2 + 56);
  memset(&v314, 0, sizeof(v314));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v314, *a8, a8[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a8[1] - (char *)*a8) >> 3));
  memset(v313, 0, sizeof(v313));
  memset(&v312, 0, sizeof(v312));
  quasar::DecoderPassData::DecoderPassData((uint64_t)&v336, &v334, &v332, &v330, &v328, &v326, &v324, 0, 0, (_QWORD **)__v, &v322, (uint64_t)__p, &v318, &v316, 4, 0, (__int128 **)&v315, (__int128 **)&v314, v313,
    0,
    0,
    (uint64_t **)&v312);
  v288.__r_.__value_.__r.__words[0] = (std::string::size_type)&v312;
  std::vector<std::vector<quasar::Token>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v288);
  v312.__begin_ = (std::vector<std::string>::pointer)v313;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v312);
  v312.__begin_ = &v314;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v312);
  v312.__begin_ = &v315;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v312);
  v28 = v317;
  if (v317)
  {
    p_shared_owners = (unint64_t *)&v317->__shared_owners_;
    do
      v30 = __ldaxr(p_shared_owners);
    while (__stlxr(v30 - 1, p_shared_owners));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
  v31 = v319;
  if (v319)
  {
    v32 = (unint64_t *)&v319->__shared_owners_;
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
  }
  if (SHIBYTE(v321) < 0)
    operator delete(__p[0]);
  v34 = v323;
  if (v323)
  {
    v35 = (unint64_t *)&v323->__shared_owners_;
    do
      v36 = __ldaxr(v35);
    while (__stlxr(v36 - 1, v35));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
      std::__shared_weak_count::__release_weak(v34);
    }
  }
  __p[0] = __v;
  std::vector<std::weak_ptr<quasar::Decoder>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  v37 = v325;
  if (v325)
  {
    v38 = (unint64_t *)&v325->__shared_owners_;
    do
      v39 = __ldaxr(v38);
    while (__stlxr(v39 - 1, v38));
    if (!v39)
    {
      ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
      std::__shared_weak_count::__release_weak(v37);
    }
  }
  v40 = v327;
  if (v327)
  {
    v41 = (unint64_t *)&v327->__shared_owners_;
    do
      v42 = __ldaxr(v41);
    while (__stlxr(v42 - 1, v41));
    if (!v42)
    {
      ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
      std::__shared_weak_count::__release_weak(v40);
    }
  }
  v43 = v329;
  if (v329)
  {
    v44 = (unint64_t *)&v329->__shared_owners_;
    do
      v45 = __ldaxr(v44);
    while (__stlxr(v45 - 1, v44));
    if (!v45)
    {
      ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
      std::__shared_weak_count::__release_weak(v43);
    }
  }
  v46 = v331;
  if (v331)
  {
    v47 = (unint64_t *)&v331->__shared_owners_;
    do
      v48 = __ldaxr(v47);
    while (__stlxr(v48 - 1, v47));
    if (!v48)
    {
      ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
      std::__shared_weak_count::__release_weak(v46);
    }
  }
  v49 = v333;
  if (v333)
  {
    v50 = (unint64_t *)&v333->__shared_owners_;
    do
      v51 = __ldaxr(v50);
    while (__stlxr(v51 - 1, v50));
    if (!v51)
    {
      ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
      std::__shared_weak_count::__release_weak(v49);
    }
  }
  v52 = v335;
  if (v335)
  {
    v53 = (unint64_t *)&v335->__shared_owners_;
    do
      v54 = __ldaxr(v53);
    while (__stlxr(v54 - 1, v53));
    if (!v54)
    {
      ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
      std::__shared_weak_count::__release_weak(v52);
    }
  }
  v55 = operator new(0x30uLL);
  v55[2] = 0;
  *v55 = &unk_1E5D42D40;
  v55[1] = 0;
  v55[4] = 0;
  v55[5] = 0;
  v55[3] = 0;
  *(_QWORD *)__v = v55 + 3;
  *(_QWORD *)&__v[8] = v55;
  v56 = (char *)operator new(0x198uLL);
  *((_QWORD *)v56 + 2) = 0;
  *(_QWORD *)v56 = &unk_1E5D440B8;
  *((_QWORD *)v56 + 1) = 0;
  *(_OWORD *)(v56 + 40) = 0u;
  *(_OWORD *)(v56 + 56) = 0u;
  *(_OWORD *)(v56 + 72) = 0u;
  *(_OWORD *)(v56 + 88) = 0u;
  *(_OWORD *)(v56 + 104) = 0u;
  *(_OWORD *)(v56 + 120) = 0u;
  *(_OWORD *)(v56 + 136) = 0u;
  *(_OWORD *)(v56 + 152) = 0u;
  *(_OWORD *)(v56 + 168) = 0u;
  *(_OWORD *)(v56 + 184) = 0u;
  *(_OWORD *)(v56 + 200) = 0u;
  *(_OWORD *)(v56 + 216) = 0u;
  *(_OWORD *)(v56 + 232) = 0u;
  *(_OWORD *)(v56 + 248) = 0u;
  *(_OWORD *)(v56 + 24) = 0u;
  *(_OWORD *)(v56 + 264) = 0u;
  *(_OWORD *)(v56 + 280) = 0u;
  *(_OWORD *)(v56 + 296) = 0u;
  *(_OWORD *)(v56 + 312) = 0u;
  *(_OWORD *)(v56 + 328) = 0u;
  *(_OWORD *)(v56 + 344) = 0u;
  *(_OWORD *)(v56 + 360) = 0u;
  *(_OWORD *)(v56 + 376) = 0u;
  *(_OWORD *)(v56 + 392) = 0u;
  quasar::SpeechRequestResultData::SpeechRequestResultData((quasar::SpeechRequestResultData *)(v56 + 24));
  __p[0] = v57;
  __p[1] = v56;
  std::allocate_shared[abi:ne180100]<quasar::DecoderChainOutput,std::allocator<quasar::DecoderChainOutput>,std::shared_ptr<quasar::SymbolTableList>,std::shared_ptr<quasar::SpeechRequestResultData>,void>((__int128 *)__v, (__int128 *)__p, &v310);
  v58 = (std::__shared_weak_count *)__p[1];
  if (__p[1])
  {
    v59 = (unint64_t *)((char *)__p[1] + 8);
    do
      v60 = __ldaxr(v59);
    while (__stlxr(v60 - 1, v59));
    if (!v60)
    {
      ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
      std::__shared_weak_count::__release_weak(v58);
    }
  }
  v61 = *(std::__shared_weak_count **)&__v[8];
  if (*(_QWORD *)&__v[8])
  {
    v62 = (unint64_t *)(*(_QWORD *)&__v[8] + 8);
    do
      v63 = __ldaxr(v62);
    while (__stlxr(v63 - 1, v62));
    if (!v63)
    {
      ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
      std::__shared_weak_count::__release_weak(v61);
    }
  }
  v64 = *(unsigned __int8 *)(a2 + 23);
  if ((v64 & 0x80u) != 0)
    v64 = *(_QWORD *)(a2 + 8);
  quasar::FstLmScorer::getDecoder<quasar::OnlineLatticeBiglmLmeFasterDecoder>(a1, (quasar::Decoder ***)&v350, v64 != 0, (uint64_t)&v308);
  if (!v308)
  {
    v306 = 0u;
    v307 = 0u;
    v304 = 0u;
    v305 = 0u;
    v302 = 0u;
    v303 = 0u;
    v300 = 0u;
    v301 = 0u;
    v298 = 0u;
    v299 = 0u;
    v296 = 0u;
    v297 = 0u;
    v294 = 0u;
    v295 = 0u;
    memset(__v, 0, sizeof(__v));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__v);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__v, (uint64_t)"Failed to find lattice-biglm-lme-faster decoder", 47);
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)__v);
  }
  v312.__begin_ = 0;
  v288.__r_.__value_.__r.__words[0] = 0;
  *(int64x2_t *)__v = vdupq_n_s64(0x408F400000000000uLL);
  _ZNSt3__115allocate_sharedB8ne180100IN5kaldi5TimerENS_9allocatorIS2_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(__p);
  v357.__begin_ = (std::vector<unsigned int>::pointer)*(unsigned int *)(v308 + 2144);
  std::allocate_shared[abi:ne180100]<quasar::SpeechRequestData,std::allocator<quasar::SpeechRequestData>,std::shared_ptr<quasar::RunAsyncParams> &,decltype(nullptr),decltype(nullptr),std::vector<std::shared_ptr<quasar::LmeContainer>> const&,quasar::Location,std::shared_ptr<kaldi::Timer>,unsigned long,void>(&v347, (uint64_t)&v312, (uint64_t)&v288, (_QWORD **)a3, __v, (__int128 *)__p, &v357, &v291);
  v65 = (std::__shared_weak_count *)__p[1];
  if (__p[1])
  {
    v66 = (unint64_t *)((char *)__p[1] + 8);
    do
      v67 = __ldaxr(v66);
    while (__stlxr(v67 - 1, v66));
    if (!v67)
    {
      ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
      std::__shared_weak_count::__release_weak(v65);
    }
  }
  if (*(_BYTE *)(a2 + 120))
  {
    (*(void (**)(uint64_t, __int128 *, uint64_t *, uint64_t *))(*(_QWORD *)v308 + 240))(v308, &v336, &v310, &v291);
  }
  else
  {
    if (*(_QWORD *)a3 != *(_QWORD *)(a3 + 8))
    {
      v306 = 0u;
      v307 = 0u;
      v304 = 0u;
      v305 = 0u;
      v302 = 0u;
      v303 = 0u;
      v300 = 0u;
      v301 = 0u;
      v298 = 0u;
      v299 = 0u;
      v296 = 0u;
      v297 = 0u;
      v294 = 0u;
      v295 = 0u;
      memset(__v, 0, sizeof(__v));
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__v);
      v249 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__v, (uint64_t)"enableLme=false, but LME data was provided. ", 44);
      v250 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v249, (uint64_t)"Option 1: Set enableLme=true to use the LME data for scoring text with LME tokens. ", 83);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v250, (uint64_t)"Option 2: Set enableLme=false, remove the LME data, and provide text with non-terminals instead of LME tokens.", 110);
      quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)__v);
    }
    quasar::SymbolTableList::clear(*(quasar::SymbolTableList **)(v310 + 472));
    v92 = *(uint64_t **)(v310 + 472);
    v93 = *(std::__shared_weak_count **)(v308 + 2184);
    v289 = *(_QWORD *)(v308 + 2176);
    v290 = v93;
    if (v93)
    {
      v94 = (unint64_t *)&v93->__shared_owners_;
      do
        v95 = __ldxr(v94);
      while (__stxr(v95 + 1, v94));
    }
    quasar::SymbolTableList::addSymbolTable(v92, &v289, 0, -1);
    v96 = v290;
    if (v290)
    {
      v97 = (unint64_t *)&v290->__shared_owners_;
      do
        v98 = __ldaxr(v97);
      while (__stlxr(v98 - 1, v97));
      if (!v98)
      {
        ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
        std::__shared_weak_count::__release_weak(v96);
      }
    }
  }
  (*(void (**)(uint64_t, __int128 *, uint64_t *))(*(_QWORD *)v308 + 224))(v308, &v336, &v291);
  if (!quasar::initLmInfo<quasar::FstLmScorerOptions>(a2, *(_QWORD *)(v310 + 472), a6))
  {
    v91 = 1;
    goto LABEL_375;
  }
  v251 = a6;
  __p[1] = 0;
  __p[0] = 0;
  v321 = 0;
  memset(&v312, 0, sizeof(v312));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)&v312, *a5, a5[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a5[1] - (char *)*a5) >> 3));
  v69 = *a7;
  v68 = a7[1];
  if (*a7 == v68)
  {
    if (*a5 == a5[1] && quasar::gLogLevel >= 1)
    {
      v306 = 0u;
      v307 = 0u;
      v304 = 0u;
      v305 = 0u;
      v302 = 0u;
      v303 = 0u;
      v300 = 0u;
      v301 = 0u;
      v298 = 0u;
      v299 = 0u;
      v296 = 0u;
      v297 = 0u;
      v294 = 0u;
      v295 = 0u;
      memset(__v, 0, sizeof(__v));
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__v);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__v, (uint64_t)"Could not compute LM score due to empty tokenIds and empty tokens.", 66);
      quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)__v);
    }
    quasar::SymbolTableList::strsToSymbolIds(*(_QWORD *)(v310 + 472), (uint64_t *)&v312, __v);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    *(_OWORD *)__p = *(_OWORD *)__v;
    v321 = *(char **)&__v[16];
  }
  else
  {
    do
    {
      v70 = *v69;
      v71 = (char *)__p[1];
      if (__p[1] >= v321)
      {
        v73 = (char *)__p[0];
        v74 = ((char *)__p[1] - (char *)__p[0]) >> 3;
        v75 = v74 + 1;
        if ((unint64_t)(v74 + 1) >> 61)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v76 = v321 - (char *)__p[0];
        if ((v321 - (char *)__p[0]) >> 2 > v75)
          v75 = v76 >> 2;
        if ((unint64_t)v76 >= 0x7FFFFFFFFFFFFFF8)
          v77 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v77 = v75;
        if (v77)
        {
          v78 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)&v321, v77);
          v71 = (char *)__p[1];
          v73 = (char *)__p[0];
        }
        else
        {
          v78 = 0;
        }
        v79 = &v78[8 * v74];
        *(_QWORD *)v79 = v70;
        v72 = v79 + 8;
        while (v71 != v73)
        {
          v80 = *((_QWORD *)v71 - 1);
          v71 -= 8;
          *((_QWORD *)v79 - 1) = v80;
          v79 -= 8;
        }
        __p[0] = v79;
        __p[1] = v72;
        v321 = &v78[8 * v77];
        if (v73)
          operator delete(v73);
      }
      else
      {
        *(_QWORD *)__p[1] = v70;
        v72 = v71 + 8;
      }
      __p[1] = v72;
      if (*a5 == a5[1])
      {
        std::to_string(&v288, *v69);
        v81 = std::string::insert(&v288, 0, "#");
        v82 = (char *)v81->__r_.__value_.__r.__words[0];
        v357.__begin_ = (std::vector<unsigned int>::pointer)v81->__r_.__value_.__l.__size_;
        *(std::vector<unsigned int>::pointer *)((char *)&v357.__begin_ + 7) = *(std::vector<unsigned int>::pointer *)((char *)&v81->__r_.__value_.__r.__words[1] + 7);
        v83 = HIBYTE(v81->__r_.__value_.__r.__words[2]);
        v81->__r_.__value_.__l.__size_ = 0;
        v81->__r_.__value_.__r.__words[2] = 0;
        v81->__r_.__value_.__r.__words[0] = 0;
        end = v312.__end_;
        if (v312.__end_ >= v312.__end_cap_.__value_)
        {
          v86 = 0xAAAAAAAAAAAAAAABLL * (((char *)v312.__end_ - (char *)v312.__begin_) >> 3);
          v87 = v86 + 1;
          if (v86 + 1 > 0xAAAAAAAAAAAAAAALL)
            std::vector<int>::__throw_length_error[abi:ne180100]();
          if (0x5555555555555556 * (((char *)v312.__end_cap_.__value_ - (char *)v312.__begin_) >> 3) > v87)
            v87 = 0x5555555555555556 * (((char *)v312.__end_cap_.__value_ - (char *)v312.__begin_) >> 3);
          if (0xAAAAAAAAAAAAAAABLL * (((char *)v312.__end_cap_.__value_ - (char *)v312.__begin_) >> 3) >= 0x555555555555555)
            v88 = 0xAAAAAAAAAAAAAAALL;
          else
            v88 = v87;
          *(_QWORD *)&__v[32] = &v312.__end_cap_;
          if (v88)
            v89 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>((uint64_t)&v312.__end_cap_, v88);
          else
            v89 = 0;
          v90 = &v89[24 * v86];
          *(_QWORD *)__v = v89;
          *(_QWORD *)&__v[8] = v90;
          *(_QWORD *)&__v[24] = &v89[24 * v88];
          *(_QWORD *)v90 = v82;
          *((_QWORD *)v90 + 1) = v357.__begin_;
          *(_QWORD *)(v90 + 15) = *(std::vector<unsigned int>::pointer *)((char *)&v357.__begin_ + 7);
          v90[23] = v83;
          *(_QWORD *)&__v[16] = v90 + 24;
          std::vector<std::string>::__swap_out_circular_buffer(&v312, (std::__split_buffer<std::string> *)__v);
          v85 = v312.__end_;
          std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::wstring> *)__v);
        }
        else
        {
          v312.__end_->__r_.__value_.__l.__data_ = v82;
          end->__r_.__value_.__l.__size_ = (std::string::size_type)v357.__begin_;
          *(std::string::size_type *)((char *)&end->__r_.__value_.__r.__words[1] + 7) = *(std::string::size_type *)((char *)&v357.__begin_ + 7);
          *((_BYTE *)&end->__r_.__value_.__s + 23) = v83;
          v85 = end + 1;
        }
        v312.__end_ = v85;
        if (SHIBYTE(v288.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v288.__r_.__value_.__l.__data_);
      }
      ++v69;
    }
    while (v69 != v68);
  }
  memset(&v288, 0, sizeof(v288));
  memset(&v357, 0, sizeof(v357));
  v99 = v251;
  if ((quasar::filterTokenIds<quasar::FstLmScorerOptions>(v254, v251, &v312, (uint64_t *)__p, (uint64_t)&v288, &v357) & 1) != 0)
  {
    quasar::FstLmScorer::getLinearCompactLattice((float **)&v288, &v286);
    v100 = *(_QWORD *)(v310 + 472);
    v101 = (_QWORD *)(v308 + 2104);
    v102 = *(_QWORD *)(v308 + 1344);
    v103 = *(std::__shared_weak_count **)(v308 + 1352);
    *(_QWORD *)__v = v102;
    *(_QWORD *)&__v[8] = v103;
    if (v103)
    {
      v104 = (unint64_t *)&v103->__shared_owners_;
      do
        v105 = __ldxr(v104);
      while (__stxr(v105 + 1, v104));
    }
    quasar::DecoderPassData::getLeftContextLabels((uint64_t)&v336, v100, v101, v102 + 32, (char **)v285);
    if (v103)
    {
      v106 = (unint64_t *)&v103->__shared_owners_;
      do
        v107 = __ldaxr(v106);
      while (__stlxr(v107 - 1, v106));
      if (!v107)
      {
        ((void (*)(std::__shared_weak_count *))v103->__on_zero_shared)(v103);
        std::__shared_weak_count::__release_weak(v103);
      }
    }
    if (*(_BYTE *)(v254 + 48))
    {
      v108 = *(unsigned __int8 *)(v254 + 23);
      if ((v108 & 0x80u) != 0)
        v108 = *(_QWORD *)(v254 + 8);
      quasar::FstLmScorer::getDecoder<quasar::OnlineLmRescoringDecoder>(a1, (quasar::Decoder ***)&v350, v108 != 0, (uint64_t)&v270);
      v109 = v270;
      if (!v270)
      {
        v306 = 0u;
        v307 = 0u;
        v304 = 0u;
        v305 = 0u;
        v302 = 0u;
        v303 = 0u;
        v300 = 0u;
        v301 = 0u;
        v298 = 0u;
        v299 = 0u;
        v296 = 0u;
        v297 = 0u;
        v294 = 0u;
        v295 = 0u;
        memset(__v, 0, sizeof(__v));
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__v);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__v, (uint64_t)"You chose to use the LM rescoring decoder, but it was not found.", 64);
        quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)__v);
      }
      memset(__v, 0, 24);
      v282 = 0;
      v283 = 0;
      v284 = 0;
      if (*(_BYTE *)(v254 + 121))
      {
        std::vector<std::shared_ptr<quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>::__insert_with_size[abi:ne180100]<std::__wrap_iter<std::shared_ptr<quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>*>,std::__wrap_iter<std::shared_ptr<quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>*>>((uint64_t *)__v, 0, *(uint64_t **)(v308 + 2224), *(uint64_t **)(v308 + 2232), (uint64_t)(*(_QWORD *)(v308 + 2232) - *(_QWORD *)(v308 + 2224)) >> 4);
        std::vector<std::shared_ptr<quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>::__insert_with_size[abi:ne180100]<std::__wrap_iter<std::shared_ptr<quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>*>,std::__wrap_iter<std::shared_ptr<quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>*>>((uint64_t *)&v282, (uint64_t)v283, *(uint64_t **)(v308 + 2272), *(uint64_t **)(v308 + 2280), (uint64_t)(*(_QWORD *)(v308 + 2280) - *(_QWORD *)(v308 + 2272)) >> 4);
        v110 = *(_QWORD *)&__v[8];
        v109 = v270;
      }
      else
      {
        v110 = 0;
      }
      std::vector<std::shared_ptr<quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>::__insert_with_size[abi:ne180100]<std::__wrap_iter<std::shared_ptr<quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>*>,std::__wrap_iter<std::shared_ptr<quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>*>>((uint64_t *)__v, v110, (uint64_t *)v109[74], (uint64_t *)v109[75], ((_BYTE *)v109[75] - (_BYTE *)v109[74]) >> 4);
      std::vector<std::shared_ptr<quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>::__insert_with_size[abi:ne180100]<std::__wrap_iter<std::shared_ptr<quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>*>,std::__wrap_iter<std::shared_ptr<quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>*>>((uint64_t *)&v282, (uint64_t)v283, (uint64_t *)v270[77], (uint64_t *)v270[78], ((_BYTE *)v270[78] - (_BYTE *)v270[77]) >> 4);
      v120 = (uint64_t **)v345;
      if (v345)
      {
        if (*(char *)(v345 + 71) < 0)
          std::string::__init_copy_ctor_external(&v281, *(const std::string::value_type **)(v345 + 48), *(_QWORD *)(v345 + 56));
        else
          v281 = *(std::string *)(v345 + 48);
      }
      else
      {
        std::string::basic_string[abi:ne180100]<0>(&v281, "");
      }
      v122 = *(uint64_t **)&__v[8];
      v121 = *(uint64_t **)__v;
      if (*(_QWORD *)__v != *(_QWORD *)&__v[8])
      {
        while (1)
        {
          v123 = *v121;
          v355[0] = &off_1E5D3F560;
          v356 = v355;
          quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::resolvePlaceholder(v123, v120, (uint64_t *)(v310 + 424), (uint64_t)&v281, (uint64_t)v355, 0);
          v124 = v356;
          if (v356 == v355)
            break;
          if (v356)
          {
            v125 = 5;
LABEL_171:
            (*(void (**)(void))(*v124 + 8 * v125))();
          }
          v121 += 2;
          if (v121 == v122)
            goto LABEL_173;
        }
        v124 = v355;
        v125 = 4;
        goto LABEL_171;
      }
LABEL_173:
      if (v345)
        v126 = (uint64_t **)(v345 + 24);
      else
        v126 = 0;
      v127 = (uint64_t *)v282;
      v128 = v283;
      if (v282 != v283)
      {
        while (1)
        {
          v129 = *v127;
          v353[0] = &off_1E5D3F5B8;
          v354 = v353;
          quasar::RegionalLmPlug<std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase>>::resolvePlaceholder(v129, v126, (uint64_t *)(v310 + 424), (uint64_t)&v281, (uint64_t)v353, 0);
          v130 = v354;
          if (v354 == v353)
            break;
          if (v354)
          {
            v131 = 5;
LABEL_181:
            (*(void (**)(void))(*v130 + 8 * v131))();
          }
          v127 += 2;
          if (v127 == v128)
            goto LABEL_183;
        }
        v130 = v353;
        v131 = 4;
        goto LABEL_181;
      }
LABEL_183:
      v278 = 0;
      v279 = 0;
      v280 = 0;
      if (*(_BYTE *)(v254 + 122))
      {
        v132 = (((char *)v283 - (_BYTE *)v282) >> 4)
             + ((uint64_t)(*(_QWORD *)&__v[8] - *(_QWORD *)__v) >> 4)
             + ((uint64_t)(*(_QWORD *)(v254 + 64) - *(_QWORD *)(v254 + 56)) >> 4);
        if ((int)v132 < 1)
        {
          v139 = 0;
          goto LABEL_201;
        }
        v133 = (((char *)v283 - (_BYTE *)v282) >> 4)
             + ((uint64_t)(*(_QWORD *)&__v[8] - *(_QWORD *)__v) >> 4)
             + ((uint64_t)(*(_QWORD *)(v254 + 64) - *(_QWORD *)(v254 + 56)) >> 4);
        v134 = 1.0 / (double)(int)v132;
        *(float *)&v352 = v134;
        std::vector<float>::resize((uint64_t)&v278, v133, &v352);
      }
      v135 = *(_DWORD *)(v254 + 124);
      if (v135 <= 0)
        v135 = *((_DWORD *)v270 + 114);
      v136 = v344;
      v276 = 0;
      v277 = 0;
      v275 = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v275, v339, v340, (v340 - (uint64_t)v339) >> 2);
      v273 = v341;
      v274 = v342;
      if (v342)
      {
        v137 = (unint64_t *)&v342->__shared_owners_;
        do
          v138 = __ldxr(v137);
        while (__stxr(v138 + 1, v137));
      }
      v139 = quasar::compute(&v286, (uint64_t **)__v, (uint64_t **)&v282, v252, v338, v343, v136, (uint64_t)&v275, &v273, &v278, 0, v251, v135, (uint64_t *)v285, *(_BYTE *)(v254 + 128), 0x20000, 1);
      v140 = v274;
      if (v274)
      {
        v141 = (unint64_t *)&v274->__shared_owners_;
        do
          v142 = __ldaxr(v141);
        while (__stlxr(v142 - 1, v141));
        if (!v142)
        {
          ((void (*)(std::__shared_weak_count *))v140->__on_zero_shared)(v140);
          std::__shared_weak_count::__release_weak(v140);
        }
      }
      if (v275)
      {
        v276 = v275;
        operator delete(v275);
      }
      if (v278)
      {
        v279 = v278;
        operator delete(v278);
      }
LABEL_201:
      if (SHIBYTE(v281.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v281.__r_.__value_.__l.__data_);
      v281.__r_.__value_.__r.__words[0] = (std::string::size_type)&v282;
      std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v281);
      v282 = __v;
      std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v282);
      v143 = v271;
      if (!v271)
        goto LABEL_207;
      v144 = (unint64_t *)&v271->__shared_owners_;
      do
        v145 = __ldaxr(v144);
      while (__stlxr(v145 - 1, v144));
      if (!v145)
      {
        ((void (*)(std::__shared_weak_count *))v143->__on_zero_shared)(v143);
        std::__shared_weak_count::__release_weak(v143);
        if (!v139)
          goto LABEL_363;
      }
      else
      {
LABEL_207:
        if (!v139)
        {
LABEL_363:
          v91 = 1;
          goto LABEL_364;
        }
      }
LABEL_358:
      v91 = quasar::verifyLmInfo(&v312, (uint64_t *)&v288, &v357, v99);
LABEL_364:
      if (v285[0])
      {
        v285[1] = v285[0];
        operator delete(v285[0]);
      }
      v286 = &unk_1E5D25800;
      v234 = v287;
      if (v287)
      {
        v235 = *(_DWORD *)(v287 + 56) - 1;
        *(_DWORD *)(v287 + 56) = v235;
        if (!v235)
          (*(void (**)(uint64_t))(*(_QWORD *)v234 + 8))(v234);
      }
      goto LABEL_369;
    }
    v283 = 0;
    v284 = 0;
    v282 = 0;
    std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&v282, *(const void **)(v308 + 1072), *(_QWORD *)(v308 + 1080), (uint64_t)(*(_QWORD *)(v308 + 1080) - *(_QWORD *)(v308 + 1072)) >> 2);
    memset(&v281, 0, sizeof(v281));
    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v281, *(const void **)(v308 + 2248), *(_QWORD *)(v308 + 2256), (uint64_t)(*(_QWORD *)(v308 + 2256) - *(_QWORD *)(v308 + 2248)) >> 2);
    v112 = *(uint64_t **)(v254 + 56);
    v111 = *(uint64_t **)(v254 + 64);
    v113 = 0.0;
    if (v112 != v111)
    {
      v114 = *(uint64_t **)(v254 + 56);
      do
      {
        v115 = *v114;
        v114 += 2;
        v113 = v113 + *(float *)(v115 + 12);
      }
      while (v114 != v111);
    }
    v116 = *(float *)(v308 + 2296);
    if (v113 >= v116)
    {
      v117 = v116 / v113;
      if (quasar::gLogLevel >= 6)
      {
        v306 = 0u;
        v307 = 0u;
        v304 = 0u;
        v305 = 0u;
        v302 = 0u;
        v303 = 0u;
        v300 = 0u;
        v301 = 0u;
        v298 = 0u;
        v299 = 0u;
        v296 = 0u;
        v297 = 0u;
        v294 = 0u;
        v295 = 0u;
        memset(__v, 0, sizeof(__v));
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__v);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__v, (uint64_t)"Extra LM weight exceeds max-total-extra-weight, rescaling with ", 63);
        std::ostream::operator<<();
        quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)__v);
        v112 = *(uint64_t **)(v254 + 56);
        v111 = *(uint64_t **)(v254 + 64);
      }
      if (v112 == v111)
      {
        v112 = v111;
      }
      else
      {
        v118 = v112;
        do
        {
          v119 = *v118;
          v118 += 2;
          *(float *)(v119 + 12) = v117 * *(float *)(v119 + 12);
        }
        while (v118 != v111);
      }
      v113 = v116;
    }
    if (v113 <= 0.0)
    {
      if (v113 < 0.0)
      {
        v306 = 0u;
        v307 = 0u;
        v304 = 0u;
        v305 = 0u;
        v302 = 0u;
        v303 = 0u;
        v300 = 0u;
        v301 = 0u;
        v298 = 0u;
        v299 = 0u;
        v296 = 0u;
        v297 = 0u;
        v294 = 0u;
        v295 = 0u;
        memset(__v, 0, sizeof(__v));
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__v);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__v, (uint64_t)"Extra LM weight must be positive (i.e. not in log scale)", 56);
        quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)__v);
      }
      if (quasar::gLogLevel >= 6)
      {
        v306 = 0u;
        v307 = 0u;
        v304 = 0u;
        v305 = 0u;
        v302 = 0u;
        v303 = 0u;
        v300 = 0u;
        v301 = 0u;
        v298 = 0u;
        v299 = 0u;
        v296 = 0u;
        v297 = 0u;
        v294 = 0u;
        v295 = 0u;
        memset(__v, 0, sizeof(__v));
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__v);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__v, (uint64_t)"Extra LM weight too small, not using extra LM(s)", 48);
        quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)__v);
      }
      memset(__v, 0, 24);
      std::vector<std::shared_ptr<quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>::__init_with_size[abi:ne180100]<std::shared_ptr<quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>*,std::shared_ptr<quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>*>(__v, *(_QWORD **)(v308 + 2224), *(_QWORD **)(v308 + 2232), (uint64_t)(*(_QWORD *)(v308 + 2232) - *(_QWORD *)(v308 + 2224)) >> 4);
      v279 = 0;
      v280 = 0;
      v278 = 0;
      std::vector<std::shared_ptr<quasar::RegionalLmPlug<std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase>>>>::__init_with_size[abi:ne180100]<std::shared_ptr<quasar::RegionalLmPlug<std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase>>>*,std::shared_ptr<quasar::RegionalLmPlug<std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase>>>*>((char *)&v278, *(_QWORD **)(v308 + 2272), *(_QWORD **)(v308 + 2280), (uint64_t)(*(_QWORD *)(v308 + 2280) - *(_QWORD *)(v308 + 2272)) >> 4);
      v270 = 0;
      v271 = 0;
      v272 = 0;
      v190 = v344;
      v268 = 0;
      v269 = 0;
      v267 = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v267, v339, v340, (v340 - (uint64_t)v339) >> 2);
      v265 = v341;
      v266 = v342;
      if (v342)
      {
        v191 = (unint64_t *)&v342->__shared_owners_;
        do
          v192 = __ldxr(v191);
        while (__stxr(v192 + 1, v191));
      }
      v185 = quasar::compute(&v286, (uint64_t **)__v, (uint64_t **)&v278, (uint64_t **)&v270, v338, v343, v190, (uint64_t)&v267, &v265, &v282, 0, v251, 0, (uint64_t *)v285, *(_BYTE *)(v254 + 128), 0x20000, 1);
      v193 = v266;
      if (v266)
      {
        v194 = (unint64_t *)&v266->__shared_owners_;
        do
          v195 = __ldaxr(v194);
        while (__stlxr(v195 - 1, v194));
        if (!v195)
        {
          ((void (*)(std::__shared_weak_count *))v193->__on_zero_shared)(v193);
          std::__shared_weak_count::__release_weak(v193);
        }
      }
      if (v267)
      {
        v268 = v267;
        operator delete(v267);
      }
      v352 = &v270;
      std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v352);
      goto LABEL_351;
    }
    if (v113 >= 1.0)
    {
      if (quasar::gLogLevel >= 6)
      {
        v306 = 0u;
        v307 = 0u;
        v304 = 0u;
        v305 = 0u;
        v302 = 0u;
        v303 = 0u;
        v300 = 0u;
        v301 = 0u;
        v298 = 0u;
        v299 = 0u;
        v296 = 0u;
        v297 = 0u;
        v294 = 0u;
        v295 = 0u;
        memset(__v, 0, sizeof(__v));
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__v);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__v, (uint64_t)"Extra LM weight must sum to less than 1.0, using only Extra LM(s)", 65);
        quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)__v);
        v112 = *(uint64_t **)(v254 + 56);
        v111 = *(uint64_t **)(v254 + 64);
      }
      v283 = (uint64_t *)v282;
      v281.__r_.__value_.__l.__size_ = v281.__r_.__value_.__r.__words[0];
      if (v111 != v112)
      {
        v196 = 0;
        do
        {
          v197 = *(_DWORD *)(v112[2 * v196] + 12);
          v198 = v283;
          if ((unint64_t)v283 >= v284)
          {
            v200 = (uint64_t *)v282;
            v201 = ((char *)v283 - (_BYTE *)v282) >> 2;
            v202 = v201 + 1;
            if ((unint64_t)(v201 + 1) >> 62)
              std::vector<int>::__throw_length_error[abi:ne180100]();
            v203 = v284 - (_QWORD)v282;
            if ((uint64_t)(v284 - (_QWORD)v282) >> 1 > v202)
              v202 = v203 >> 1;
            if ((unint64_t)v203 >= 0x7FFFFFFFFFFFFFFCLL)
              v204 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v204 = v202;
            if (v204)
            {
              v205 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v284, v204);
              v200 = (uint64_t *)v282;
              v198 = v283;
            }
            else
            {
              v205 = 0;
            }
            v206 = &v205[4 * v201];
            *(_DWORD *)v206 = v197;
            v199 = (uint64_t *)(v206 + 4);
            while (v198 != v200)
            {
              v207 = *((_DWORD *)v198 - 1);
              v198 = (uint64_t *)((char *)v198 - 4);
              *((_DWORD *)v206 - 1) = v207;
              v206 -= 4;
            }
            v282 = v206;
            v283 = v199;
            v284 = (unint64_t)&v205[4 * v204];
            if (v200)
              operator delete(v200);
          }
          else
          {
            *(_DWORD *)v283 = v197;
            v199 = (uint64_t *)((char *)v198 + 4);
          }
          v283 = v199;
          v112 = *v252;
          v208 = (_BYTE *)(*v252)[2 * v196];
          if (!v208[8])
          {
            if (v209)
            {
              *(_QWORD *)__v = v209;
              v210 = v112[2 * v196 + 1];
              *(_QWORD *)&__v[8] = v210;
              if (v210)
              {
                v211 = (unint64_t *)(v210 + 8);
                do
                  v212 = __ldxr(v211);
                while (__stxr(v212 + 1, v211));
              }
              Order = quasar::FstLmHandle::GetOrder(v209);
              v214 = Order;
              size = v281.__r_.__value_.__l.__size_;
              if (v281.__r_.__value_.__l.__size_ >= v281.__r_.__value_.__r.__words[2])
              {
                v217 = (void *)v281.__r_.__value_.__r.__words[0];
                v218 = (uint64_t)(v281.__r_.__value_.__l.__size_ - v281.__r_.__value_.__r.__words[0]) >> 2;
                v219 = v218 + 1;
                if ((unint64_t)(v218 + 1) >> 62)
                  std::vector<int>::__throw_length_error[abi:ne180100]();
                v220 = v281.__r_.__value_.__r.__words[2] - v281.__r_.__value_.__r.__words[0];
                if ((uint64_t)(v281.__r_.__value_.__r.__words[2] - v281.__r_.__value_.__r.__words[0]) >> 1 > v219)
                  v219 = v220 >> 1;
                if ((unint64_t)v220 >= 0x7FFFFFFFFFFFFFFCLL)
                  v221 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v221 = v219;
                if (v221)
                {
                  v222 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v281.__r_.__value_.__r.__words[2], v221);
                  size = v281.__r_.__value_.__l.__size_;
                  v217 = (void *)v281.__r_.__value_.__r.__words[0];
                }
                else
                {
                  v222 = 0;
                }
                v223 = &v222[4 * v218];
                *(_DWORD *)v223 = v214;
                v216 = (std::string::size_type)(v223 + 4);
                while ((void *)size != v217)
                {
                  v224 = *(_DWORD *)(size - 4);
                  size -= 4;
                  *((_DWORD *)v223 - 1) = v224;
                  v223 -= 4;
                }
                v281.__r_.__value_.__r.__words[0] = (std::string::size_type)v223;
                v281.__r_.__value_.__l.__size_ = v216;
                v281.__r_.__value_.__r.__words[2] = (std::string::size_type)&v222[4 * v221];
                if (v217)
                  operator delete(v217);
              }
              else
              {
                *(_DWORD *)v281.__r_.__value_.__l.__size_ = Order;
                v216 = size + 4;
              }
              v281.__r_.__value_.__l.__size_ = v216;
            }
            else
            {
              *(_OWORD *)__v = 0uLL;
            }
            v225 = *(std::__shared_weak_count **)&__v[8];
            if (*(_QWORD *)&__v[8])
            {
              v226 = (unint64_t *)(*(_QWORD *)&__v[8] + 8);
              do
                v227 = __ldaxr(v226);
              while (__stlxr(v227 - 1, v226));
              if (!v227)
              {
                ((void (*)(std::__shared_weak_count *))v225->__on_zero_shared)(v225);
                std::__shared_weak_count::__release_weak(v225);
              }
            }
            v112 = *v252;
          }
          ++v196;
        }
        while (v196 < (uint64_t)(*(_QWORD *)(v254 + 64) - (_QWORD)v112) >> 4);
      }
      memset(__v, 0, 24);
      v278 = 0;
      v279 = 0;
      v280 = 0;
      v228 = v344;
      v263 = 0;
      v264 = 0;
      v262 = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v262, v339, v340, (v340 - (uint64_t)v339) >> 2);
      v260 = v341;
      v261 = v342;
      v99 = v251;
      if (v342)
      {
        v229 = (unint64_t *)&v342->__shared_owners_;
        do
          v230 = __ldxr(v229);
        while (__stxr(v230 + 1, v229));
      }
      v185 = quasar::compute(&v286, (uint64_t **)__v, (uint64_t **)&v278, v252, v338, v343, v228, (uint64_t)&v262, &v260, &v282, 0, v251, 0, (uint64_t *)v285, *(_BYTE *)(v254 + 128), 0x20000, 1);
      v231 = v261;
      if (v261)
      {
        v232 = (unint64_t *)&v261->__shared_owners_;
        do
          v233 = __ldaxr(v232);
        while (__stlxr(v233 - 1, v232));
        if (!v233)
        {
          ((void (*)(std::__shared_weak_count *))v231->__on_zero_shared)(v231);
          std::__shared_weak_count::__release_weak(v231);
        }
      }
      v189 = v262;
      if (!v262)
        goto LABEL_351;
      v263 = v262;
    }
    else
    {
      v146 = (float *)v282;
      if (v283 != v282)
      {
        v147 = 1.0 - v113;
        v148 = ((char *)v283 - (_BYTE *)v282) >> 2;
        if (v148 <= 1)
          v148 = 1;
        do
        {
          *v146 = v147 * *v146;
          ++v146;
          --v148;
        }
        while (v148);
      }
      if (v111 != v112)
      {
        v149 = 0;
        do
        {
          v150 = *(_DWORD *)(v112[2 * v149] + 12);
          v151 = v283;
          if ((unint64_t)v283 >= v284)
          {
            v153 = (uint64_t *)v282;
            v154 = ((char *)v283 - (_BYTE *)v282) >> 2;
            v155 = v154 + 1;
            if ((unint64_t)(v154 + 1) >> 62)
              std::vector<int>::__throw_length_error[abi:ne180100]();
            v156 = v284 - (_QWORD)v282;
            if ((uint64_t)(v284 - (_QWORD)v282) >> 1 > v155)
              v155 = v156 >> 1;
            if ((unint64_t)v156 >= 0x7FFFFFFFFFFFFFFCLL)
              v157 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v157 = v155;
            if (v157)
            {
              v158 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v284, v157);
              v153 = (uint64_t *)v282;
              v151 = v283;
            }
            else
            {
              v158 = 0;
            }
            v159 = &v158[4 * v154];
            *(_DWORD *)v159 = v150;
            v152 = (uint64_t *)(v159 + 4);
            while (v151 != v153)
            {
              v160 = *((_DWORD *)v151 - 1);
              v151 = (uint64_t *)((char *)v151 - 4);
              *((_DWORD *)v159 - 1) = v160;
              v159 -= 4;
            }
            v282 = v159;
            v283 = v152;
            v284 = (unint64_t)&v158[4 * v157];
            if (v153)
              operator delete(v153);
          }
          else
          {
            *(_DWORD *)v283 = v150;
            v152 = (uint64_t *)((char *)v151 + 4);
          }
          v283 = v152;
          v161 = *v252;
          v162 = (const void *)(*v252)[2 * v149];
          if (v162
          {
            *(_QWORD *)__v = v163;
            v164 = v161[2 * v149 + 1];
            *(_QWORD *)&__v[8] = v164;
            if (v164)
            {
              v165 = (unint64_t *)(v164 + 8);
              do
                v166 = __ldxr(v165);
              while (__stxr(v166 + 1, v165));
            }
            v167 = quasar::FstLmHandle::GetOrder(v163);
            v168 = v167;
            v169 = v281.__r_.__value_.__l.__size_;
            if (v281.__r_.__value_.__l.__size_ >= v281.__r_.__value_.__r.__words[2])
            {
              v171 = (void *)v281.__r_.__value_.__r.__words[0];
              v172 = (uint64_t)(v281.__r_.__value_.__l.__size_ - v281.__r_.__value_.__r.__words[0]) >> 2;
              v173 = v172 + 1;
              if ((unint64_t)(v172 + 1) >> 62)
                std::vector<int>::__throw_length_error[abi:ne180100]();
              v174 = v281.__r_.__value_.__r.__words[2] - v281.__r_.__value_.__r.__words[0];
              if ((uint64_t)(v281.__r_.__value_.__r.__words[2] - v281.__r_.__value_.__r.__words[0]) >> 1 > v173)
                v173 = v174 >> 1;
              if ((unint64_t)v174 >= 0x7FFFFFFFFFFFFFFCLL)
                v175 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v175 = v173;
              if (v175)
              {
                v176 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v281.__r_.__value_.__r.__words[2], v175);
                v169 = v281.__r_.__value_.__l.__size_;
                v171 = (void *)v281.__r_.__value_.__r.__words[0];
              }
              else
              {
                v176 = 0;
              }
              v177 = &v176[4 * v172];
              *(_DWORD *)v177 = v168;
              v170 = (std::string::size_type)(v177 + 4);
              while ((void *)v169 != v171)
              {
                v178 = *(_DWORD *)(v169 - 4);
                v169 -= 4;
                *((_DWORD *)v177 - 1) = v178;
                v177 -= 4;
              }
              v281.__r_.__value_.__r.__words[0] = (std::string::size_type)v177;
              v281.__r_.__value_.__l.__size_ = v170;
              v281.__r_.__value_.__r.__words[2] = (std::string::size_type)&v176[4 * v175];
              if (v171)
                operator delete(v171);
            }
            else
            {
              *(_DWORD *)v281.__r_.__value_.__l.__size_ = v167;
              v170 = v169 + 4;
            }
            v281.__r_.__value_.__l.__size_ = v170;
          }
          else
          {
            *(_OWORD *)__v = 0uLL;
          }
          v179 = *(std::__shared_weak_count **)&__v[8];
          if (*(_QWORD *)&__v[8])
          {
            v180 = (unint64_t *)(*(_QWORD *)&__v[8] + 8);
            do
              v181 = __ldaxr(v180);
            while (__stlxr(v181 - 1, v180));
            if (!v181)
            {
              ((void (*)(std::__shared_weak_count *))v179->__on_zero_shared)(v179);
              std::__shared_weak_count::__release_weak(v179);
            }
          }
          ++v149;
          v112 = *(uint64_t **)(v254 + 56);
        }
        while (v149 < (uint64_t)(*(_QWORD *)(v254 + 64) - (_QWORD)v112) >> 4);
      }
      memset(__v, 0, 24);
      std::vector<std::shared_ptr<quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>::__init_with_size[abi:ne180100]<std::shared_ptr<quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>*,std::shared_ptr<quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>*>(__v, *(_QWORD **)(v308 + 2224), *(_QWORD **)(v308 + 2232), (uint64_t)(*(_QWORD *)(v308 + 2232) - *(_QWORD *)(v308 + 2224)) >> 4);
      v279 = 0;
      v280 = 0;
      v278 = 0;
      std::vector<std::shared_ptr<quasar::RegionalLmPlug<std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase>>>>::__init_with_size[abi:ne180100]<std::shared_ptr<quasar::RegionalLmPlug<std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase>>>*,std::shared_ptr<quasar::RegionalLmPlug<std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase>>>*>((char *)&v278, *(_QWORD **)(v308 + 2272), *(_QWORD **)(v308 + 2280), (uint64_t)(*(_QWORD *)(v308 + 2280) - *(_QWORD *)(v308 + 2272)) >> 4);
      v99 = v251;
      v182 = v344;
      v258 = 0;
      v259 = 0;
      v257 = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v257, v339, v340, (v340 - (uint64_t)v339) >> 2);
      v255 = v341;
      v256 = v342;
      if (v342)
      {
        v183 = (unint64_t *)&v342->__shared_owners_;
        do
          v184 = __ldxr(v183);
        while (__stxr(v184 + 1, v183));
      }
      v185 = quasar::compute(&v286, (uint64_t **)__v, (uint64_t **)&v278, v252, v338, v343, v182, (uint64_t)&v257, &v255, &v282, 0, v251, 0, (uint64_t *)v285, *(_BYTE *)(v254 + 128), 0x20000, 1);
      v186 = v256;
      if (v256)
      {
        v187 = (unint64_t *)&v256->__shared_owners_;
        do
          v188 = __ldaxr(v187);
        while (__stlxr(v188 - 1, v187));
        if (!v188)
        {
          ((void (*)(std::__shared_weak_count *))v186->__on_zero_shared)(v186);
          std::__shared_weak_count::__release_weak(v186);
        }
      }
      v189 = v257;
      if (!v257)
        goto LABEL_351;
      v258 = v257;
    }
    operator delete(v189);
LABEL_351:
    v270 = &v278;
    std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100](&v270);
    v278 = __v;
    std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v278);
    if (!v185)
    {
      if (v281.__r_.__value_.__r.__words[0])
      {
        v281.__r_.__value_.__l.__size_ = v281.__r_.__value_.__r.__words[0];
        operator delete(v281.__r_.__value_.__l.__data_);
      }
      if (v282)
      {
        v283 = (uint64_t *)v282;
        operator delete(v282);
      }
      goto LABEL_363;
    }
    if ((std::string *)(v99 + 80) != &v281)
      std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)(v99 + 80), v281.__r_.__value_.__l.__data_, v281.__r_.__value_.__l.__size_, (uint64_t)(v281.__r_.__value_.__l.__size_ - v281.__r_.__value_.__r.__words[0]) >> 2);
    if (v281.__r_.__value_.__r.__words[0])
    {
      v281.__r_.__value_.__l.__size_ = v281.__r_.__value_.__r.__words[0];
      operator delete(v281.__r_.__value_.__l.__data_);
    }
    if (v282)
    {
      v283 = (uint64_t *)v282;
      operator delete(v282);
    }
    goto LABEL_358;
  }
  v91 = 2;
LABEL_369:
  if (v357.__begin_)
  {
    v357.__end_ = v357.__begin_;
    operator delete(v357.__begin_);
  }
  if (v288.__r_.__value_.__r.__words[0])
  {
    v288.__r_.__value_.__l.__size_ = v288.__r_.__value_.__r.__words[0];
    operator delete(v288.__r_.__value_.__l.__data_);
  }
  *(_QWORD *)__v = &v312;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__v);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
LABEL_375:
  v236 = v292;
  if (v292)
  {
    v237 = (unint64_t *)&v292->__shared_owners_;
    do
      v238 = __ldaxr(v237);
    while (__stlxr(v238 - 1, v237));
    if (!v238)
    {
      ((void (*)(std::__shared_weak_count *))v236->__on_zero_shared)(v236);
      std::__shared_weak_count::__release_weak(v236);
    }
  }
  v239 = v309;
  if (v309)
  {
    v240 = (unint64_t *)&v309->__shared_owners_;
    do
      v241 = __ldaxr(v240);
    while (__stlxr(v241 - 1, v240));
    if (!v241)
    {
      ((void (*)(std::__shared_weak_count *))v239->__on_zero_shared)(v239);
      std::__shared_weak_count::__release_weak(v239);
    }
  }
  v242 = v311;
  if (v311)
  {
    v243 = (unint64_t *)&v311->__shared_owners_;
    do
      v244 = __ldaxr(v243);
    while (__stlxr(v244 - 1, v243));
    if (!v244)
    {
      ((void (*)(std::__shared_weak_count *))v242->__on_zero_shared)(v242);
      std::__shared_weak_count::__release_weak(v242);
    }
  }
  quasar::DecoderPassData::~DecoderPassData((void **)&v336);
  v245 = v348;
  if (v348)
  {
    v246 = (unint64_t *)&v348->__shared_owners_;
    do
      v247 = __ldaxr(v246);
    while (__stlxr(v247 - 1, v246));
    if (!v247)
    {
      ((void (*)(std::__shared_weak_count *))v245->__on_zero_shared)(v245);
      std::__shared_weak_count::__release_weak(v245);
    }
  }
  std::promise<quasar::Location>::~promise(&v349);
  *(_QWORD *)&v336 = &v350;
  std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v336);
  return v91;
}

void sub_1AD8E17B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a67;

  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&a67);
  JUMPOUT(0x1AD8E1AACLL);
}

void sub_1AD8E17D0()
{
  JUMPOUT(0x1AD8E1A9CLL);
}

void sub_1AD8E17D8(void *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  JUMPOUT(0x1AD8E1AECLL);
}

void sub_1AD8E17E8()
{
  JUMPOUT(0x1AD8E1AB4);
}

void sub_1AD8E1804()
{
  JUMPOUT(0x1AD8E1ABCLL);
}

void sub_1AD8E180C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a71;

  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x3A0]);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&a71);
  JUMPOUT(0x1AD8E1AC4);
}

void sub_1AD8E182C()
{
  JUMPOUT(0x1AD8E1AC4);
}

void sub_1AD8E1834(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  uint64_t a64;
  char a71;
  unint64_t v71;

  std::vector<std::vector<quasar::Token>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a64);
  STACK[0x320] = v71;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x320]);
  STACK[0x320] = (unint64_t)&STACK[0x350];
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x320]);
  STACK[0x320] = (unint64_t)&STACK[0x368];
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x320]);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x380]);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x390]);
  if (SLOBYTE(STACK[0x3B7]) < 0)
    operator delete((void *)STACK[0x3A0]);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x3C0]);
  STACK[0x3A0] = (unint64_t)&a71;
  std::vector<std::weak_ptr<quasar::Decoder>>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x3A0]);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x3D0]);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x3E0]);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x3F0]);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x400]);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x410]);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x420]);
  JUMPOUT(0x1AD8E1ACCLL);
}

void sub_1AD8E18F8()
{
  JUMPOUT(0x1AD8E1AD4);
}

void sub_1AD8E1904(_Unwind_Exception *a1)
{
  uint64_t v1;

  STACK[0x430] = v1 - 240;
  std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x430]);
  _Unwind_Resume(a1);
}

void sub_1AD8E190C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a69;
  int v69;
  void *v70;

  if (v69 < 0)
    operator delete(v70);
  if (a69 < 0)
    JUMPOUT(0x1AD8E1A7CLL);
  JUMPOUT(0x1AD8E1A8CLL);
}

void sub_1AD8E1924(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,std::__split_buffer<std::wstring> *a63)
{
  char a69;
  uint64_t a73;

  std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::wstring> *)&a73);
  if (a69 < 0)
    JUMPOUT(0x1AD8E1A7CLL);
  JUMPOUT(0x1AD8E1A8CLL);
}

void sub_1AD8E1934()
{
  JUMPOUT(0x1AD8E1ACCLL);
}

void sub_1AD8E1944()
{
  unint64_t v0;
  unint64_t *v1;
  unint64_t v2;

  v0 = STACK[0x790];
  if (STACK[0x790])
  {
    v1 = (unint64_t *)(v0 + 8);
    do
      v2 = __ldaxr(v1);
    while (__stlxr(v2 - 1, v1));
    if (!v2)
      (*(void (**)(unint64_t))(*(_QWORD *)v0 + 16))(v0);
  }
  JUMPOUT(0x1AD8E1ACCLL);
}

void sub_1AD8E1978(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,void ***a53,uint64_t a54,int a55,__int16 a56,char a57,char a58,void **a59,uint64_t a60,uint64_t a61,void *a62,void *a63)
{
  void *a65;
  uint64_t a66;
  void *a67;
  void *a68;
  uint64_t a73;
  uint64_t v73;
  _QWORD *v74;
  uint64_t v75;
  uint64_t v76;
  int v77;
  void *v78;

  v74 = *(_QWORD **)(v73 - 184);
  if (v74 == (_QWORD *)(v73 - 208))
  {
    v75 = 4;
    v74 = (_QWORD *)(v73 - 208);
  }
  else
  {
    if (!v74)
      goto LABEL_6;
    v75 = 5;
  }
  (*(void (**)(void))(*v74 + 8 * v75))();
LABEL_6:
  if (a58 < 0)
    operator delete(a53);
  a53 = &a59;
  std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a53);
  a59 = (void **)&a73;
  std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100](&a59);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&a42);
  if (a62)
  {
    a63 = a62;
    operator delete(a62);
  }
  a65 = &unk_1E5D25800;
  v76 = a66;
  if (a66)
  {
    v77 = *(_DWORD *)(a66 + 56) - 1;
    *(_DWORD *)(a66 + 56) = v77;
    if (!v77)
      (*(void (**)(uint64_t))(*(_QWORD *)v76 + 8))(v76);
  }
  v78 = *(void **)(v73 - 144);
  if (v78)
  {
    *(_QWORD *)(v73 - 136) = v78;
    operator delete(v78);
  }
  if (a67)
  {
    a68 = a67;
    operator delete(a67);
  }
  JUMPOUT(0x1AD8E1A8CLL);
}

void sub_1AD8E1A88(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  uint64_t a64;
  char a69;
  uint64_t v69;
  void *v70;

  a64 = (uint64_t)&STACK[0x320];
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a64);
  v70 = (void *)STACK[0x3A0];
  if (STACK[0x3A0])
  {
    STACK[0x3A8] = (unint64_t)v70;
    operator delete(v70);
  }
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&a69);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x300]);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x310]);
  quasar::DecoderPassData::~DecoderPassData((void **)&STACK[0x430]);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x798]);
  std::promise<quasar::Location>::~promise((uint64_t *)(v69 - 248));
  JUMPOUT(0x1AD8E1ADCLL);
}

void quasar::FstLmScorerOptions::~FstLmScorerOptions(void **this)
{
  void **v2;

  if (*((char *)this + 111) < 0)
    operator delete(this[11]);
  v2 = this + 7;
  std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100](&v2);
  v2 = this + 3;
  std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (*((char *)this + 23) < 0)
    operator delete(*this);
}

void quasar::FstLmScorer::getDecoder<quasar::OnlineLatticeBiglmLmeFasterDecoder>(uint64_t a1@<X0>, quasar::Decoder ***a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  quasar::Decoder **v7;
  quasar::Decoder **v8;
  quasar::Decoder **v9;
  quasar::Decoder **v10;
  void *v11;
  quasar::Decoder *v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  __int128 v18[17];

  if (a3 && *(_QWORD *)(a1 + 32) == *(_QWORD *)(a1 + 40) && !*(_BYTE *)(a1 + 56))
  {
    v7 = *a2;
    v8 = a2[1];
    while (v7 != v8)
    {
      if (quasar::Decoder::isInitialized(*v7))
      {
        memset(v18, 0, sizeof(v18));
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v18);
        std::operator<<[abi:ne180100]<std::char_traits<char>>(v18, "Decoder chain was not lazily initialized");
        quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v18);
      }
      v7 += 2;
    }
    *(_BYTE *)(a1 + 56) = 1;
  }
  *(_QWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  v9 = *a2;
  v10 = a2[1];
  if (*a2 != v10)
  {
    while (1)
    {
      if (*v9
      {
        v12 = v9[1];
        *(_QWORD *)&v18[0] = v11;
        *((_QWORD *)&v18[0] + 1) = v12;
        if (v12)
        {
          v13 = (unint64_t *)((char *)v12 + 8);
          do
            v14 = __ldxr(v13);
          while (__stxr(v14 + 1, v13));
        }
      }
      else
      {
        v18[0] = 0uLL;
      }
      std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100](a4, v18);
      v15 = (std::__shared_weak_count *)*((_QWORD *)&v18[0] + 1);
      if (*((_QWORD *)&v18[0] + 1))
      {
        v16 = (unint64_t *)(*((_QWORD *)&v18[0] + 1) + 8);
        do
          v17 = __ldaxr(v16);
        while (__stlxr(v17 - 1, v16));
        if (!v17)
        {
          ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
          std::__shared_weak_count::__release_weak(v15);
        }
      }
      if (*(_QWORD *)a4)
        break;
      v9 += 2;
      if (v9 == v10)
        return;
    }
    quasar::SpeechRecognizerModelLoader::initDecoderIfNeeded(*(quasar::SystemConfig ***)(a1 + 24), *(quasar::Decoder **)a4);
  }
}

void sub_1AD8E1D04(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&a9);
}

uint64_t quasar::initLmInfo<quasar::FstLmScorerOptions>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _OWORD v14[17];

  v4 = *(_QWORD *)(a1 + 112);
  if (v4 != -1)
  {
    *(_QWORD *)(a3 + 64) = v4;
    return 1;
  }
  v7 = *(unsigned __int8 *)(a1 + 111);
  if ((v7 & 0x80u) != 0)
    v7 = *(_QWORD *)(a1 + 96);
  if (!v7)
    return 1;
  v8 = quasar::SymbolTableList::strToSymbolId(a2, a1 + 88);
  *(_QWORD *)(a3 + 64) = v8;
  if (v8 != -1)
    return 1;
  if (quasar::gLogLevel >= 1)
  {
    memset(v14, 0, sizeof(v14));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v14);
    v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"Could not find OOV word \"", 25);
    v10 = *(char *)(a1 + 111);
    if (v10 >= 0)
      v11 = a1 + 88;
    else
      v11 = *(_QWORD *)(a1 + 88);
    if (v10 >= 0)
      v12 = *(unsigned __int8 *)(a1 + 111);
    else
      v12 = *(_QWORD *)(a1 + 96);
    v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, v11, v12);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"\" in symbol table(s)", 20);
    quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)v14);
  }
  return 0;
}

void sub_1AD8E1E20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)&a9);
  _Unwind_Resume(a1);
}

uint64_t quasar::filterTokenIds<quasar::FstLmScorerOptions>(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, std::vector<unsigned int> *a6)
{
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  unsigned int *value;
  std::vector<unsigned int>::pointer end;
  unsigned int *v21;
  _QWORD *v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  std::vector<unsigned int>::pointer begin;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  char *v33;
  _QWORD *v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  _QWORD *v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  unsigned int *v44;
  unsigned int v45;
  uint64_t v46;
  unint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  _QWORD *v50;
  _QWORD *v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  unint64_t v55;
  char *v56;
  char *v57;
  uint64_t v58;
  _QWORD *v59;
  _QWORD *v60;
  char v61;
  _QWORD *v62;
  unsigned int *v63;
  std::vector<unsigned int>::pointer v64;
  unsigned int *v65;
  std::vector<unsigned int>::pointer v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  unint64_t v70;
  char *v71;
  unsigned int *v72;
  unsigned int v73;
  unint64_t v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  _QWORD *v80;
  uint64_t v81;
  int v82;
  uint64_t v83;
  uint64_t v84;
  _QWORD *v85;
  _QWORD *v86;
  uint64_t v87;
  uint64_t p_end_cap;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;

  std::vector<long long>::reserve((void **)a5, (a4[1] - *a4) >> 3);
  std::vector<int>::reserve(a6, (a4[1] - *a4) >> 3);
  v12 = *a4;
  if (a4[1] == *a4)
    return 1;
  v13 = 0;
  v87 = a5 + 16;
  p_end_cap = (uint64_t)&a6->__end_cap_;
  while (*(_QWORD *)(v12 + 8 * v13) != -1)
  {
    if (a3 && quasar::gLogLevel >= 6)
    {
      v104 = 0u;
      v105 = 0u;
      v102 = 0u;
      v103 = 0u;
      v100 = 0u;
      v101 = 0u;
      v98 = 0u;
      v99 = 0u;
      v96 = 0u;
      v97 = 0u;
      v94 = 0u;
      v95 = 0u;
      v92 = 0u;
      v93 = 0u;
      v90 = 0u;
      v91 = 0u;
      v89 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v89);
      v14 = *a3 + 24 * v13;
      v15 = *(char *)(v14 + 23);
      if (v15 >= 0)
        v16 = *a3 + 24 * v13;
      else
        v16 = *(_QWORD *)v14;
      if (v15 >= 0)
        v17 = *(unsigned __int8 *)(v14 + 23);
      else
        v17 = *(_QWORD *)(v14 + 8);
      v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v89, v16, v17);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)" ", 1);
      std::ostream::operator<<();
      quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)&v89);
    }
    end = a6->__end_;
    value = a6->__end_cap_.__value_;
    if (end >= value)
    {
      begin = a6->__begin_;
      v29 = end - a6->__begin_;
      v30 = v29 + 1;
      if ((unint64_t)(v29 + 1) >> 62)
        goto LABEL_126;
      v31 = (char *)value - (char *)begin;
      if (v31 >> 1 > v30)
        v30 = v31 >> 1;
      if ((unint64_t)v31 >= 0x7FFFFFFFFFFFFFFCLL)
        v32 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v32 = v30;
      if (v32)
      {
        v33 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(p_end_cap, v32);
        begin = a6->__begin_;
        end = a6->__end_;
      }
      else
      {
        v33 = 0;
      }
      v44 = (unsigned int *)&v33[4 * v29];
      *v44 = v13;
      v21 = v44 + 1;
      while (end != begin)
      {
        v45 = *--end;
        *--v44 = v45;
      }
      a6->__begin_ = v44;
      a6->__end_ = v21;
      a6->__end_cap_.__value_ = (unsigned int *)&v33[4 * v32];
      if (begin)
        operator delete(begin);
    }
    else
    {
      *end = v13;
      v21 = end + 1;
    }
    a6->__end_ = v21;
    v46 = *a4;
    v48 = *(_QWORD **)(a5 + 8);
    v47 = *(_QWORD *)(a5 + 16);
    if ((unint64_t)v48 >= v47)
    {
      v51 = *(_QWORD **)a5;
      v52 = ((uint64_t)v48 - *(_QWORD *)a5) >> 3;
      v53 = v52 + 1;
      if ((unint64_t)(v52 + 1) >> 61)
        goto LABEL_127;
      v54 = v47 - (_QWORD)v51;
      if (v54 >> 2 > v53)
        v53 = v54 >> 2;
      if ((unint64_t)v54 >= 0x7FFFFFFFFFFFFFF8)
        v55 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v55 = v53;
      if (v55)
      {
        v56 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>(v87, v55);
        v51 = *(_QWORD **)a5;
        v48 = *(_QWORD **)(a5 + 8);
      }
      else
      {
        v56 = 0;
      }
      v57 = &v56[8 * v52];
      *(_QWORD *)v57 = *(_QWORD *)(v46 + 8 * v13);
      v50 = v57 + 8;
      while (v48 != v51)
      {
        v58 = *--v48;
        *((_QWORD *)v57 - 1) = v58;
        v57 -= 8;
      }
      goto LABEL_108;
    }
    v49 = *(_QWORD *)(v46 + 8 * v13);
LABEL_56:
    *v48 = v49;
    v50 = v48 + 1;
LABEL_110:
    *(_QWORD *)(a5 + 8) = v50;
LABEL_111:
    ++v13;
    v12 = *a4;
    if (v13 >= (a4[1] - *a4) >> 3)
      return 1;
  }
  if (*(_BYTE *)(a1 + 80))
  {
    if (quasar::gLogLevel >= 6)
    {
      if (a3)
      {
        v104 = 0uLL;
        v105 = 0uLL;
        v102 = 0uLL;
        v103 = 0uLL;
        v100 = 0uLL;
        v101 = 0uLL;
        v98 = 0uLL;
        v99 = 0uLL;
        v96 = 0uLL;
        v97 = 0uLL;
        v94 = 0uLL;
        v95 = 0uLL;
        v92 = 0uLL;
        v93 = 0uLL;
        v90 = 0uLL;
        v91 = 0uLL;
        v89 = 0uLL;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v89);
        v22 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v89, (uint64_t)"Could not find \"", 16);
        v23 = *a3 + 24 * v13;
        v24 = *(char *)(v23 + 23);
        if (v24 >= 0)
          v25 = *a3 + 24 * v13;
        else
          v25 = *(_QWORD *)v23;
        if (v24 >= 0)
          v26 = *(unsigned __int8 *)(v23 + 23);
        else
          v26 = *(_QWORD *)(v23 + 8);
        v27 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, v25, v26);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)"\" in symbol table(s), ignoring token", 36);
      }
      else
      {
        v104 = 0uLL;
        v105 = 0uLL;
        v102 = 0uLL;
        v103 = 0uLL;
        v100 = 0uLL;
        v101 = 0uLL;
        v98 = 0uLL;
        v99 = 0uLL;
        v96 = 0uLL;
        v97 = 0uLL;
        v94 = 0uLL;
        v95 = 0uLL;
        v92 = 0uLL;
        v93 = 0uLL;
        v90 = 0uLL;
        v91 = 0uLL;
        v89 = 0uLL;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v89);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v89, (uint64_t)"Could not find token at position ", 33);
        v59 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v59, (uint64_t)" in symbol table(s), ignoring token", 35);
      }
      quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)&v89);
    }
    goto LABEL_111;
  }
  if (*(_QWORD *)(a2 + 64) != -1)
  {
    if (quasar::gLogLevel >= 6)
    {
      if (a3)
      {
        v104 = 0uLL;
        v105 = 0uLL;
        v102 = 0uLL;
        v103 = 0uLL;
        v100 = 0uLL;
        v101 = 0uLL;
        v98 = 0uLL;
        v99 = 0uLL;
        v96 = 0uLL;
        v97 = 0uLL;
        v94 = 0uLL;
        v95 = 0uLL;
        v92 = 0uLL;
        v93 = 0uLL;
        v90 = 0uLL;
        v91 = 0uLL;
        v89 = 0uLL;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v89);
        v34 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v89, (uint64_t)"Could not find \"", 16);
        v35 = *a3 + 24 * v13;
        v36 = *(char *)(v35 + 23);
        if (v36 >= 0)
          v37 = *a3 + 24 * v13;
        else
          v37 = *(_QWORD *)v35;
        if (v36 >= 0)
          v38 = *(unsigned __int8 *)(v35 + 23);
        else
          v38 = *(_QWORD *)(v35 + 8);
        v39 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, v37, v38);
        v40 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v39, (uint64_t)"\" in symbol table(s), replacing with \"", 38);
        v41 = *(_BYTE *)(a1 + 111);
        if (v41 >= 0)
          v42 = a1 + 88;
        else
          v42 = *(_QWORD *)(a1 + 88);
        if (v41 >= 0)
          v43 = *(unsigned __int8 *)(a1 + 111);
        else
          v43 = *(_QWORD *)(a1 + 96);
      }
      else
      {
        v104 = 0uLL;
        v105 = 0uLL;
        v102 = 0uLL;
        v103 = 0uLL;
        v100 = 0uLL;
        v101 = 0uLL;
        v98 = 0uLL;
        v99 = 0uLL;
        v96 = 0uLL;
        v97 = 0uLL;
        v94 = 0uLL;
        v95 = 0uLL;
        v92 = 0uLL;
        v93 = 0uLL;
        v90 = 0uLL;
        v91 = 0uLL;
        v89 = 0uLL;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v89);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v89, (uint64_t)"Could not find token at positiob ", 33);
        v60 = (_QWORD *)std::ostream::operator<<();
        v40 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v60, (uint64_t)" in symbol table(s), replacing with \"", 37);
        v61 = *(_BYTE *)(a1 + 111);
        if (v61 >= 0)
          v42 = a1 + 88;
        else
          v42 = *(_QWORD *)(a1 + 88);
        if (v61 >= 0)
          v43 = *(unsigned __int8 *)(a1 + 111);
        else
          v43 = *(_QWORD *)(a1 + 96);
      }
      v62 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, v42, v43);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v62, (uint64_t)"\" ", 2);
      std::ostream::operator<<();
      quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)&v89);
    }
    v64 = a6->__end_;
    v63 = a6->__end_cap_.__value_;
    if (v64 >= v63)
    {
      v66 = a6->__begin_;
      v67 = v64 - a6->__begin_;
      v68 = v67 + 1;
      if ((unint64_t)(v67 + 1) >> 62)
LABEL_126:
        std::vector<int>::__throw_length_error[abi:ne180100]();
      v69 = (char *)v63 - (char *)v66;
      if (v69 >> 1 > v68)
        v68 = v69 >> 1;
      if ((unint64_t)v69 >= 0x7FFFFFFFFFFFFFFCLL)
        v70 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v70 = v68;
      if (v70)
      {
        v71 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(p_end_cap, v70);
        v66 = a6->__begin_;
        v64 = a6->__end_;
      }
      else
      {
        v71 = 0;
      }
      v72 = (unsigned int *)&v71[4 * v67];
      *v72 = v13;
      v65 = v72 + 1;
      while (v64 != v66)
      {
        v73 = *--v64;
        *--v72 = v73;
      }
      a6->__begin_ = v72;
      a6->__end_ = v65;
      a6->__end_cap_.__value_ = (unsigned int *)&v71[4 * v70];
      if (v66)
        operator delete(v66);
    }
    else
    {
      *v64 = v13;
      v65 = v64 + 1;
    }
    a6->__end_ = v65;
    v48 = *(_QWORD **)(a5 + 8);
    v74 = *(_QWORD *)(a5 + 16);
    if ((unint64_t)v48 < v74)
    {
      v49 = *(_QWORD *)(a2 + 64);
      goto LABEL_56;
    }
    v51 = *(_QWORD **)a5;
    v75 = ((uint64_t)v48 - *(_QWORD *)a5) >> 3;
    v76 = v75 + 1;
    if ((unint64_t)(v75 + 1) >> 61)
LABEL_127:
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v77 = v74 - (_QWORD)v51;
    if (v77 >> 2 > v76)
      v76 = v77 >> 2;
    if ((unint64_t)v77 >= 0x7FFFFFFFFFFFFFF8)
      v55 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v55 = v76;
    if (v55)
    {
      v56 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>(v87, v55);
      v51 = *(_QWORD **)a5;
      v48 = *(_QWORD **)(a5 + 8);
    }
    else
    {
      v56 = 0;
    }
    v57 = &v56[8 * v75];
    *(_QWORD *)v57 = *(_QWORD *)(a2 + 64);
    v50 = v57 + 8;
    while (v48 != v51)
    {
      v78 = *--v48;
      *((_QWORD *)v57 - 1) = v78;
      v57 -= 8;
    }
LABEL_108:
    *(_QWORD *)a5 = v57;
    *(_QWORD *)(a5 + 8) = v50;
    *(_QWORD *)(a5 + 16) = &v56[8 * v55];
    if (v51)
      operator delete(v51);
    goto LABEL_110;
  }
  if (a3)
  {
    if (quasar::gLogLevel >= 1)
    {
      v104 = 0u;
      v105 = 0u;
      v102 = 0u;
      v103 = 0u;
      v100 = 0u;
      v101 = 0u;
      v98 = 0u;
      v99 = 0u;
      v96 = 0u;
      v97 = 0u;
      v94 = 0u;
      v95 = 0u;
      v92 = 0u;
      v93 = 0u;
      v90 = 0u;
      v91 = 0u;
      v89 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v89);
      v80 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v89, (uint64_t)"Could not find \"", 16);
      v81 = *a3 + 24 * v13;
      v82 = *(char *)(v81 + 23);
      if (v82 >= 0)
        v83 = *a3 + 24 * v13;
      else
        v83 = *(_QWORD *)v81;
      if (v82 >= 0)
        v84 = *(unsigned __int8 *)(v81 + 23);
      else
        v84 = *(_QWORD *)(v81 + 8);
      v85 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v80, v83, v84);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v85, (uint64_t)"\" in symbol table(s)", 20);
LABEL_124:
      quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)&v89);
    }
  }
  else if (quasar::gLogLevel >= 1)
  {
    v104 = 0u;
    v105 = 0u;
    v102 = 0u;
    v103 = 0u;
    v100 = 0u;
    v101 = 0u;
    v98 = 0u;
    v99 = 0u;
    v96 = 0u;
    v97 = 0u;
    v94 = 0u;
    v95 = 0u;
    v92 = 0u;
    v93 = 0u;
    v90 = 0u;
    v91 = 0u;
    v89 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v89);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v89, (uint64_t)"Could not find token at position ", 33);
    v86 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v86, (uint64_t)" in symbol table(s)", 19);
    goto LABEL_124;
  }
  return 0;
}

void sub_1AD8E2594(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)va);
  _Unwind_Resume(a1);
}

void quasar::FstLmScorer::getDecoder<quasar::OnlineLmRescoringDecoder>(uint64_t a1@<X0>, quasar::Decoder ***a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  quasar::Decoder **v7;
  quasar::Decoder **v8;
  quasar::Decoder **v9;
  quasar::Decoder **v10;
  void *v11;
  quasar::Decoder *v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  __int128 v18[17];

  if (a3 && *(_QWORD *)(a1 + 32) == *(_QWORD *)(a1 + 40) && !*(_BYTE *)(a1 + 56))
  {
    v7 = *a2;
    v8 = a2[1];
    while (v7 != v8)
    {
      if (quasar::Decoder::isInitialized(*v7))
      {
        memset(v18, 0, sizeof(v18));
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v18);
        std::operator<<[abi:ne180100]<std::char_traits<char>>(v18, "Decoder chain was not lazily initialized");
        quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v18);
      }
      v7 += 2;
    }
    *(_BYTE *)(a1 + 56) = 1;
  }
  *(_QWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  v9 = *a2;
  v10 = a2[1];
  if (*a2 != v10)
  {
    while (1)
    {
      if (*v9
      {
        v12 = v9[1];
        *(_QWORD *)&v18[0] = v11;
        *((_QWORD *)&v18[0] + 1) = v12;
        if (v12)
        {
          v13 = (unint64_t *)((char *)v12 + 8);
          do
            v14 = __ldxr(v13);
          while (__stxr(v14 + 1, v13));
        }
      }
      else
      {
        v18[0] = 0uLL;
      }
      std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100](a4, v18);
      v15 = (std::__shared_weak_count *)*((_QWORD *)&v18[0] + 1);
      if (*((_QWORD *)&v18[0] + 1))
      {
        v16 = (unint64_t *)(*((_QWORD *)&v18[0] + 1) + 8);
        do
          v17 = __ldaxr(v16);
        while (__stlxr(v17 - 1, v16));
        if (!v17)
        {
          ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
          std::__shared_weak_count::__release_weak(v15);
        }
      }
      if (*(_QWORD *)a4)
        break;
      v9 += 2;
      if (v9 == v10)
        return;
    }
    quasar::SpeechRecognizerModelLoader::initDecoderIfNeeded(*(quasar::SystemConfig ***)(a1 + 24), *(quasar::Decoder **)a4);
  }
}

void sub_1AD8E2784(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&a9);
}

void quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::resolvePlaceholder(uint64_t a1, uint64_t **a2, uint64_t *a3, uint64_t a4, uint64_t a5, int a6)
{
  std::string::size_type size;
  char v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *p_shared_owners;
  unint64_t v26;
  _QWORD *v27;
  std::string *v28;
  std::string::size_type v29;
  _QWORD *v30;
  _QWORD *v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  std::string *v36;
  __int128 v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  _QWORD *v41;
  std::string *v42;
  std::string::size_type v43;
  _QWORD *v44;
  _QWORD *v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  std::string v49;
  uint64_t v50;
  std::__shared_weak_count *v51;
  uint64_t v52;
  std::__shared_weak_count *v53;
  void *__p[2];
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  std::string v71;

  quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::getPlaceholder(a1, &v71);
  size = HIBYTE(v71.__r_.__value_.__r.__words[2]);
  v13 = HIBYTE(v71.__r_.__value_.__r.__words[2]);
  if ((v71.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = v71.__r_.__value_.__l.__size_;
  if (size)
  {
    if (!a2)
    {
      v69 = 0u;
      v70 = 0u;
      v67 = 0u;
      v68 = 0u;
      v65 = 0u;
      v66 = 0u;
      v63 = 0u;
      v64 = 0u;
      v61 = 0u;
      v62 = 0u;
      v59 = 0u;
      v60 = 0u;
      v57 = 0u;
      v58 = 0u;
      v55 = 0u;
      v56 = 0u;
      *(_OWORD *)__p = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"No regional model map from 1st pass GeoContext available", 56);
      quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)__p);
    }
    v14 = (uint64_t *)std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::find<std::string>((uint64_t)a2, (const void **)&v71.__r_.__value_.__l.__data_);
    v15 = v14;
    if (a2 + 1 == (uint64_t **)v14)
    {
      v69 = 0u;
      v70 = 0u;
      v67 = 0u;
      v68 = 0u;
      v65 = 0u;
      v66 = 0u;
      v63 = 0u;
      v64 = 0u;
      v61 = 0u;
      v62 = 0u;
      v59 = 0u;
      v60 = 0u;
      v57 = 0u;
      v58 = 0u;
      v55 = 0u;
      v56 = 0u;
      *(_OWORD *)__p = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
      v41 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"placeholder ", 12);
      if ((v71.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v42 = &v71;
      else
        v42 = (std::string *)v71.__r_.__value_.__r.__words[0];
      if ((v71.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v43 = HIBYTE(v71.__r_.__value_.__r.__words[2]);
      else
        v43 = v71.__r_.__value_.__l.__size_;
      v44 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v41, (uint64_t)v42, v43);
      v45 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v44, (uint64_t)" not found in model-map for region ", 35);
      v46 = *(char *)(a4 + 23);
      if (v46 >= 0)
        v47 = a4;
      else
        v47 = *(_QWORD *)a4;
      if (v46 >= 0)
        v48 = *(unsigned __int8 *)(a4 + 23);
      else
        v48 = *(_QWORD *)(a4 + 8);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v45, v47, v48);
      quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)__p);
    }
    v17 = v14[7];
    v16 = v14[8];
    v52 = v17;
    v53 = (std::__shared_weak_count *)v16;
    if (v16)
    {
      v18 = (unint64_t *)(v16 + 8);
      do
        v19 = __ldxr(v18);
      while (__stxr(v19 + 1, v18));
    }
    if (a6)
    {
      std::__tree<std::string>::__remove_node_pointer(a2, v14);
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::shared_ptr<void>>,0>((uint64_t)(v15 + 4));
      operator delete(v15);
    }
    quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::getOriginStr(v17, (std::string *)__p);
    std::optional<std::string>::operator=[abi:ne180100]<std::string,void>(a1 + 24, (__int128 *)__p);
    if (SBYTE7(v55) < 0)
      operator delete(__p[0]);
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::getCachedModel(v17, (uint64_t)__p, &v50);
    v20 = *(_QWORD *)(a5 + 24);
    if (!v20)
      std::__throw_bad_function_call[abi:ne180100]();
    (*(void (**)(std::string *__return_ptr, uint64_t, uint64_t *))(*(_QWORD *)v20 + 48))(&v49, v20, &v50);
    std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100](a1 + 56, (__int128 *)&v49);
    v21 = (std::__shared_weak_count *)v49.__r_.__value_.__l.__size_;
    if (v49.__r_.__value_.__l.__size_)
    {
      v22 = (unint64_t *)(v49.__r_.__value_.__l.__size_ + 8);
      do
        v23 = __ldaxr(v22);
      while (__stlxr(v23 - 1, v22));
      if (!v23)
      {
        ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
        std::__shared_weak_count::__release_weak(v21);
      }
    }
    v24 = v51;
    if (v51)
    {
      p_shared_owners = (unint64_t *)&v51->__shared_owners_;
      do
        v26 = __ldaxr(p_shared_owners);
      while (__stlxr(v26 - 1, p_shared_owners));
      if (!v26)
      {
        ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
        std::__shared_weak_count::__release_weak(v24);
      }
    }
    if (SBYTE7(v55) < 0)
      operator delete(__p[0]);
    if (quasar::gLogLevel >= 4)
    {
      v69 = 0u;
      v70 = 0u;
      v67 = 0u;
      v68 = 0u;
      v65 = 0u;
      v66 = 0u;
      v63 = 0u;
      v64 = 0u;
      v61 = 0u;
      v62 = 0u;
      v59 = 0u;
      v60 = 0u;
      v57 = 0u;
      v58 = 0u;
      v55 = 0u;
      v56 = 0u;
      *(_OWORD *)__p = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
      v27 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Using location-specific bigG for ", 33);
      if ((v71.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v28 = &v71;
      else
        v28 = (std::string *)v71.__r_.__value_.__r.__words[0];
      if ((v71.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v29 = HIBYTE(v71.__r_.__value_.__r.__words[2]);
      else
        v29 = v71.__r_.__value_.__l.__size_;
      v30 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)v28, v29);
      v31 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)" from region ", 13);
      v32 = *(char *)(a1 + 47);
      if (v32 >= 0)
        v33 = a1 + 24;
      else
        v33 = *(_QWORD *)(a1 + 24);
      if (v32 >= 0)
        v34 = *(unsigned __int8 *)(a1 + 47);
      else
        v34 = *(_QWORD *)(a1 + 32);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, v33, v34);
      quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)__p);
    }
    v35 = *a3;
    std::operator+<char>();
    v36 = std::string::append(&v49, "]");
    v37 = *(_OWORD *)&v36->__r_.__value_.__l.__data_;
    *(_QWORD *)&v55 = *((_QWORD *)&v36->__r_.__value_.__l + 2);
    *(_OWORD *)__p = v37;
    v36->__r_.__value_.__l.__size_ = 0;
    v36->__r_.__value_.__r.__words[2] = 0;
    v36->__r_.__value_.__r.__words[0] = 0;
    quasar::SpeechRequestResultData::addDumpAA(v35, (__int128 *)__p, (const std::string *)(a1 + 24));
    if (SBYTE7(v55) < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v49.__r_.__value_.__l.__data_);
    v38 = v53;
    if (v53)
    {
      v39 = (unint64_t *)&v53->__shared_owners_;
      do
        v40 = __ldaxr(v39);
      while (__stlxr(v40 - 1, v39));
      if (!v40)
      {
        ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
        std::__shared_weak_count::__release_weak(v38);
      }
    }
    v13 = HIBYTE(v71.__r_.__value_.__r.__words[2]);
  }
  if (v13 < 0)
    operator delete(v71.__r_.__value_.__l.__data_);
}

void sub_1AD8E2BD0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, char a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  uint64_t v25;

  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&a18);
  if (*(char *)(v25 - 81) < 0)
    operator delete(*(void **)(v25 - 104));
  _Unwind_Resume(a1);
}

void quasar::RegionalLmPlug<std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase>>::resolvePlaceholder(uint64_t a1, uint64_t **a2, uint64_t *a3, uint64_t a4, uint64_t a5, int a6)
{
  std::string::size_type size;
  char v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *p_shared_owners;
  unint64_t v26;
  _QWORD *v27;
  std::string *v28;
  std::string::size_type v29;
  _QWORD *v30;
  _QWORD *v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  std::string *v36;
  __int128 v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  _QWORD *v41;
  std::string *v42;
  std::string::size_type v43;
  _QWORD *v44;
  _QWORD *v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  std::string v49;
  uint64_t v50;
  std::__shared_weak_count *v51;
  uint64_t v52;
  std::__shared_weak_count *v53;
  void *__p[2];
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  std::string v71;

  quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::getPlaceholder(a1, &v71);
  size = HIBYTE(v71.__r_.__value_.__r.__words[2]);
  v13 = HIBYTE(v71.__r_.__value_.__r.__words[2]);
  if ((v71.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = v71.__r_.__value_.__l.__size_;
  if (size)
  {
    if (!a2)
    {
      v69 = 0u;
      v70 = 0u;
      v67 = 0u;
      v68 = 0u;
      v65 = 0u;
      v66 = 0u;
      v63 = 0u;
      v64 = 0u;
      v61 = 0u;
      v62 = 0u;
      v59 = 0u;
      v60 = 0u;
      v57 = 0u;
      v58 = 0u;
      v55 = 0u;
      v56 = 0u;
      *(_OWORD *)__p = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"No regional model map from 1st pass GeoContext available", 56);
      quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)__p);
    }
    v14 = (uint64_t *)std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::find<std::string>((uint64_t)a2, (const void **)&v71.__r_.__value_.__l.__data_);
    v15 = v14;
    if (a2 + 1 == (uint64_t **)v14)
    {
      v69 = 0u;
      v70 = 0u;
      v67 = 0u;
      v68 = 0u;
      v65 = 0u;
      v66 = 0u;
      v63 = 0u;
      v64 = 0u;
      v61 = 0u;
      v62 = 0u;
      v59 = 0u;
      v60 = 0u;
      v57 = 0u;
      v58 = 0u;
      v55 = 0u;
      v56 = 0u;
      *(_OWORD *)__p = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
      v41 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"placeholder ", 12);
      if ((v71.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v42 = &v71;
      else
        v42 = (std::string *)v71.__r_.__value_.__r.__words[0];
      if ((v71.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v43 = HIBYTE(v71.__r_.__value_.__r.__words[2]);
      else
        v43 = v71.__r_.__value_.__l.__size_;
      v44 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v41, (uint64_t)v42, v43);
      v45 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v44, (uint64_t)" not found in model-map for region ", 35);
      v46 = *(char *)(a4 + 23);
      if (v46 >= 0)
        v47 = a4;
      else
        v47 = *(_QWORD *)a4;
      if (v46 >= 0)
        v48 = *(unsigned __int8 *)(a4 + 23);
      else
        v48 = *(_QWORD *)(a4 + 8);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v45, v47, v48);
      quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)__p);
    }
    v17 = v14[7];
    v16 = v14[8];
    v52 = v17;
    v53 = (std::__shared_weak_count *)v16;
    if (v16)
    {
      v18 = (unint64_t *)(v16 + 8);
      do
        v19 = __ldxr(v18);
      while (__stxr(v19 + 1, v18));
    }
    if (a6)
    {
      std::__tree<std::string>::__remove_node_pointer(a2, v14);
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::shared_ptr<void>>,0>((uint64_t)(v15 + 4));
      operator delete(v15);
    }
    quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::getOriginStr(v17, (std::string *)__p);
    std::optional<std::string>::operator=[abi:ne180100]<std::string,void>(a1 + 24, (__int128 *)__p);
    if (SBYTE7(v55) < 0)
      operator delete(__p[0]);
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    quasar::RegionalLmPlug<std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase>>::getCachedModel(v17, (uint64_t)__p, &v50);
    v20 = *(_QWORD *)(a5 + 24);
    if (!v20)
      std::__throw_bad_function_call[abi:ne180100]();
    (*(void (**)(std::string *__return_ptr, uint64_t, uint64_t *))(*(_QWORD *)v20 + 48))(&v49, v20, &v50);
    std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100](a1 + 56, (__int128 *)&v49);
    v21 = (std::__shared_weak_count *)v49.__r_.__value_.__l.__size_;
    if (v49.__r_.__value_.__l.__size_)
    {
      v22 = (unint64_t *)(v49.__r_.__value_.__l.__size_ + 8);
      do
        v23 = __ldaxr(v22);
      while (__stlxr(v23 - 1, v22));
      if (!v23)
      {
        ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
        std::__shared_weak_count::__release_weak(v21);
      }
    }
    v24 = v51;
    if (v51)
    {
      p_shared_owners = (unint64_t *)&v51->__shared_owners_;
      do
        v26 = __ldaxr(p_shared_owners);
      while (__stlxr(v26 - 1, p_shared_owners));
      if (!v26)
      {
        ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
        std::__shared_weak_count::__release_weak(v24);
      }
    }
    if (SBYTE7(v55) < 0)
      operator delete(__p[0]);
    if (quasar::gLogLevel >= 4)
    {
      v69 = 0u;
      v70 = 0u;
      v67 = 0u;
      v68 = 0u;
      v65 = 0u;
      v66 = 0u;
      v63 = 0u;
      v64 = 0u;
      v61 = 0u;
      v62 = 0u;
      v59 = 0u;
      v60 = 0u;
      v57 = 0u;
      v58 = 0u;
      v55 = 0u;
      v56 = 0u;
      *(_OWORD *)__p = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
      v27 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Using location-specific bigG for ", 33);
      if ((v71.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v28 = &v71;
      else
        v28 = (std::string *)v71.__r_.__value_.__r.__words[0];
      if ((v71.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v29 = HIBYTE(v71.__r_.__value_.__r.__words[2]);
      else
        v29 = v71.__r_.__value_.__l.__size_;
      v30 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)v28, v29);
      v31 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)" from region ", 13);
      v32 = *(char *)(a1 + 47);
      if (v32 >= 0)
        v33 = a1 + 24;
      else
        v33 = *(_QWORD *)(a1 + 24);
      if (v32 >= 0)
        v34 = *(unsigned __int8 *)(a1 + 47);
      else
        v34 = *(_QWORD *)(a1 + 32);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, v33, v34);
      quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)__p);
    }
    v35 = *a3;
    std::operator+<char>();
    v36 = std::string::append(&v49, "]");
    v37 = *(_OWORD *)&v36->__r_.__value_.__l.__data_;
    *(_QWORD *)&v55 = *((_QWORD *)&v36->__r_.__value_.__l + 2);
    *(_OWORD *)__p = v37;
    v36->__r_.__value_.__l.__size_ = 0;
    v36->__r_.__value_.__r.__words[2] = 0;
    v36->__r_.__value_.__r.__words[0] = 0;
    quasar::SpeechRequestResultData::addDumpAA(v35, (__int128 *)__p, (const std::string *)(a1 + 24));
    if (SBYTE7(v55) < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v49.__r_.__value_.__l.__data_);
    v38 = v53;
    if (v53)
    {
      v39 = (unint64_t *)&v53->__shared_owners_;
      do
        v40 = __ldaxr(v39);
      while (__stlxr(v40 - 1, v39));
      if (!v40)
      {
        ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
        std::__shared_weak_count::__release_weak(v38);
      }
    }
    v13 = HIBYTE(v71.__r_.__value_.__r.__words[2]);
  }
  if (v13 < 0)
    operator delete(v71.__r_.__value_.__l.__data_);
}

void sub_1AD8E30B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, char a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  uint64_t v25;

  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&a18);
  if (*(char *)(v25 - 81) < 0)
    operator delete(*(void **)(v25 - 104));
  _Unwind_Resume(a1);
}

BOOL quasar::compute(_QWORD *a1, uint64_t **a2, uint64_t **a3, uint64_t **a4, uint64_t *a5, _QWORD *a6, uint64_t a7, uint64_t a8, uint64_t *a9, _QWORD *a10, unsigned int a11, uint64_t a12, int a13, uint64_t *a14, char a15, int a16, int a17)
{
  uint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *p_shared_owners;
  unint64_t v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  uint64_t *v32;
  unint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  _BOOL8 v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  uint64_t v44;
  std::__shared_weak_count *v45;
  uint64_t v46;
  std::__shared_weak_count *v47;
  void *__p;
  void *v49;
  uint64_t v50;
  uint64_t v51;
  std::__shared_weak_count *v52;
  uint64_t v53;
  std::__shared_weak_count *v54;
  _BYTE v55[24];
  void **v56;

  v49 = 0;
  v50 = 0;
  __p = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, *(const void **)a8, *(_QWORD *)(a8 + 8), (uint64_t)(*(_QWORD *)(a8 + 8) - *(_QWORD *)a8) >> 2);
  v24 = *a9;
  v25 = (std::__shared_weak_count *)a9[1];
  v46 = *a9;
  v47 = v25;
  if (v25)
  {
    p_shared_owners = (unint64_t *)&v25->__shared_owners_;
    do
      v27 = __ldxr(p_shared_owners);
    while (__stxr(v27 + 1, p_shared_owners));
    v53 = v24;
    v54 = v25;
    do
      v28 = __ldxr(p_shared_owners);
    while (__stxr(v28 + 1, p_shared_owners));
  }
  else
  {
    v53 = v24;
    v54 = 0;
  }
  quasar::loadConstituentDfsts(a2, a3, a4, a5, a6, a7, (__int32 **)&__p, &v53, (uint64_t)v55, 0, a16);
  v29 = v54;
  if (v54)
  {
    v30 = (unint64_t *)&v54->__shared_owners_;
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
  quasar::createDfst((uint64_t)v55, a10, a11, a14, a15, a17, (uint64_t)a1, &v51);
  v56 = (void **)v55;
  std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100](&v56);
  if (v47)
  {
    v32 = &v47->__shared_owners_;
    do
      v33 = __ldaxr((unint64_t *)v32);
    while (__stlxr(v33 - 1, (unint64_t *)v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
      std::__shared_weak_count::__release_weak(v47);
    }
  }
  if (__p)
  {
    v49 = __p;
    operator delete(__p);
  }
  v44 = v51;
  v45 = v52;
  if (v52)
  {
    v34 = (unint64_t *)&v52->__shared_owners_;
    do
      v35 = __ldxr(v34);
    while (__stxr(v35 + 1, v34));
  }
  v36 = quasar::compute(a1, &v44, (uint64_t)a10, a11, a12, a13);
  v37 = v45;
  if (v45)
  {
    v38 = (unint64_t *)&v45->__shared_owners_;
    do
      v39 = __ldaxr(v38);
    while (__stlxr(v39 - 1, v38));
    if (!v39)
    {
      ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
      std::__shared_weak_count::__release_weak(v37);
    }
  }
  v40 = v52;
  if (v52)
  {
    v41 = (unint64_t *)&v52->__shared_owners_;
    do
      v42 = __ldaxr(v41);
    while (__stlxr(v42 - 1, v41));
    if (!v42)
    {
      ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
      std::__shared_weak_count::__release_weak(v40);
    }
  }
  return v36;
}

void sub_1AD8E33E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, char a17, uint64_t a18, char a19)
{
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  _Unwind_Resume(a1);
}

uint64_t quasar::verifyLmInfo(_QWORD *a1, uint64_t *a2, _QWORD *a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t i;
  uint64_t *v14;
  std::string *v15;
  uint64_t v16;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;

  v8 = 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*(_QWORD *)(a4 + 16) - *(_QWORD *)(a4 + 8)) >> 3);
  v10 = *a2;
  v9 = a2[1];
  v11 = (v9 - *a2) >> 3;
  if (!*(_BYTE *)(a4 + 72))
  {
    if (v8 != v11)
    {
      if (quasar::gLogLevel >= 4)
        goto LABEL_4;
      return 1;
    }
LABEL_6:
    if (v9 == v10)
      return 0;
    v12 = 0;
    for (i = 24; ; i += 88)
    {
      v14 = (uint64_t *)(*(_QWORD *)(a4 + 8) + i);
      v16 = *v14;
      v15 = (std::string *)(v14 - 3);
      if (v16 != *(_QWORD *)(v10 + 8 * v12))
        break;
      if (a1)
      {
        std::string::operator=(v15, (const std::string *)(*a1 + 24 * *(unsigned int *)(*a3 + 4 * v12)));
        v10 = *a2;
        v9 = a2[1];
      }
      if (++v12 >= (unint64_t)((v9 - v10) >> 3))
        return 0;
    }
    if (quasar::gLogLevel >= 4)
    {
      v33 = 0u;
      v34 = 0u;
      v31 = 0u;
      v32 = 0u;
      v29 = 0u;
      v30 = 0u;
      v27 = 0u;
      v28 = 0u;
      v25 = 0u;
      v26 = 0u;
      v23 = 0u;
      v24 = 0u;
      v21 = 0u;
      v22 = 0u;
      v19 = 0u;
      v20 = 0u;
      v18 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v18);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v18, (uint64_t)"Mismatch in token IDs", 21);
      goto LABEL_17;
    }
    return 1;
  }
  if (v8 == v11 + 1)
    goto LABEL_6;
  if (quasar::gLogLevel >= 4)
  {
LABEL_4:
    v33 = 0u;
    v34 = 0u;
    v31 = 0u;
    v32 = 0u;
    v29 = 0u;
    v30 = 0u;
    v27 = 0u;
    v28 = 0u;
    v25 = 0u;
    v26 = 0u;
    v23 = 0u;
    v24 = 0u;
    v21 = 0u;
    v22 = 0u;
    v19 = 0u;
    v20 = 0u;
    v18 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v18);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v18, (uint64_t)"Mismatch in tokenLmInfos and filteredIds sizes", 46);
LABEL_17:
    quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&v18);
  }
  return 1;
}

void sub_1AD8E3648(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&a9);
  _Unwind_Resume(a1);
}

uint64_t quasar::SimpleFstLmRescorerOptions::SimpleFstLmRescorerOptions(uint64_t a1, char a2, __int128 *a3, uint64_t a4, int a5, char a6)
{
  std::string *v10;
  __int128 v11;

  *(_BYTE *)a1 = a2;
  v10 = (std::string *)(a1 + 8);
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v10, *(const std::string::value_type **)a3, *((_QWORD *)a3 + 1));
  }
  else
  {
    v11 = *a3;
    v10->__r_.__value_.__r.__words[2] = *((_QWORD *)a3 + 2);
    *(_OWORD *)&v10->__r_.__value_.__l.__data_ = v11;
  }
  *(_QWORD *)(a1 + 32) = a4;
  *(_DWORD *)(a1 + 40) = a5;
  *(_BYTE *)(a1 + 44) = a6;
  return a1;
}

uint64_t quasar::SimpleFstLmRescorer::SimpleFstLmRescorer(uint64_t a1, uint64_t a2, unint64_t *a3, _QWORD *a4)
{
  __int128 v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t *v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  unint64_t v22;
  std::__shared_weak_count *v23;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  if (*(char *)(a2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 8), *(const std::string::value_type **)(a2 + 8), *(_QWORD *)(a2 + 16));
  }
  else
  {
    v8 = *(_OWORD *)(a2 + 8);
    *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 8) = v8;
  }
  v9 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 37) = *(_QWORD *)(a2 + 37);
  *(_QWORD *)(a1 + 32) = v9;
  v10 = operator new(0x30uLL);
  v10[2] = 0;
  *v10 = &unk_1E5D42D40;
  v10[1] = 0;
  v10[3] = 0;
  v11 = v10 + 3;
  v10[4] = 0;
  v10[5] = 0;
  *(_QWORD *)(a1 + 64) = *a4;
  *(_QWORD *)(a1 + 48) = v10 + 3;
  *(_QWORD *)(a1 + 56) = v10;
  v12 = a4[1];
  *(_QWORD *)(a1 + 72) = v12;
  if (v12)
  {
    v13 = (unint64_t *)(v12 + 8);
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
    v11 = *(uint64_t **)(a1 + 48);
  }
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  v15 = a3[1];
  v22 = *a3;
  v23 = (std::__shared_weak_count *)v15;
  if (v15)
  {
    v16 = (unint64_t *)(v15 + 8);
    do
      v17 = __ldxr(v16);
    while (__stxr(v17 + 1, v16));
  }
  quasar::SymbolTableList::addSymbolTable(v11, &v22, 0, -1);
  v18 = v23;
  if (v23)
  {
    p_shared_owners = (unint64_t *)&v23->__shared_owners_;
    do
      v20 = __ldaxr(p_shared_owners);
    while (__stlxr(v20 - 1, p_shared_owners));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  return a1;
}

void sub_1AD8E382C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  void **v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  va_list va;
  uint64_t v9;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v7 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100]((void ***)va1);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](v5);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](v4);
  if (*(char *)(v2 + 31) < 0)
    operator delete(*v3);
  _Unwind_Resume(a1);
}

uint64_t quasar::SimpleFstLmRescorer::computeLmScore(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  void *__p[3];

  quasar::SymbolTableList::strsToSymbolIds(*(_QWORD *)(a1 + 48), a2, __p);
  v6 = quasar::SimpleFstLmRescorer::computeLmScore(a1, (uint64_t *)__p, a3, a2);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  return v6;
}

void sub_1AD8E38E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t quasar::SimpleFstLmRescorer::computeLmScore(uint64_t a1, uint64_t *a2, uint64_t a3, _QWORD *a4)
{
  void **v8;
  uint64_t v9;
  int v10;
  BOOL v11;
  uint64_t v12;
  int v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  void *__p;
  void *v22;
  uint64_t v23;
  void *v24;
  void *v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  std::vector<unsigned int> v29;
  void *v30;
  void *v31;
  uint64_t v32;
  __int128 v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  std::__shared_weak_count *v38;

  v8 = (void **)(a1 + 80);
  if (*(_QWORD *)(a1 + 80) == *(_QWORD *)(a1 + 88))
  {
    v14 = *(std::__shared_weak_count **)(a1 + 72);
    v37 = *(_QWORD *)(a1 + 64);
    v38 = v14;
    if (v14)
    {
      p_shared_owners = (unint64_t *)&v14->__shared_owners_;
      do
        v16 = __ldxr(p_shared_owners);
      while (__stxr(v16 + 1, p_shared_owners));
    }
    quasar::createConstituentDfstsFromSecondPassDecoder(&v37, (uint64_t)&v33);
    std::vector<std::shared_ptr<quasar::Decoder>>::__vdeallocate(v8);
    *(_OWORD *)(a1 + 80) = v33;
    *(_QWORD *)(a1 + 96) = v34;
    v34 = 0;
    v33 = 0uLL;
    v30 = &v33;
    std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v30);
    v17 = v38;
    if (v38)
    {
      v18 = (unint64_t *)&v38->__shared_owners_;
      do
        v19 = __ldaxr(v18);
      while (__stlxr(v19 - 1, v18));
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
      }
    }
  }
  v9 = 1;
  v35 = 1;
  kaldi::Timer::Reset((kaldi::Timer *)&v33, (clockid_t)a2);
  v36 = 0;
  if (quasar::initLmInfo<quasar::SimpleFstLmRescorerOptions>(a1, *(_QWORD *)(a1 + 48), a3))
  {
    v30 = 0;
    v31 = 0;
    v32 = 0;
    memset(&v29, 0, sizeof(v29));
    if ((quasar::filterTokenIds<quasar::SimpleFstLmRescorerOptions>(a1, a3, a4, a2, (uint64_t)&v30, &v29) & 1) != 0)
    {
      quasar::FstLmScorer::getLinearCompactLattice((float **)&v30, &v27);
      v10 = *(_DWORD *)(a1 + 40);
      if (v10 <= 0)
        v10 = *(_DWORD *)(*(_QWORD *)(a1 + 64) + 456);
      v24 = 0;
      v25 = 0;
      v26 = 0;
      __p = 0;
      v22 = 0;
      v23 = 0;
      v11 = quasar::compute(&v27, (uint64_t)v8, &v24, 0, a3, v10, (uint64_t *)&__p, *(_BYTE *)(a1 + 44), 1);
      if (__p)
      {
        v22 = __p;
        operator delete(__p);
      }
      if (v11)
        v9 = quasar::verifyLmInfo(a4, (uint64_t *)&v30, &v29, a3);
      if (v24)
      {
        v25 = v24;
        operator delete(v24);
      }
      v27 = &unk_1E5D25800;
      v12 = v28;
      if (v28)
      {
        v13 = *(_DWORD *)(v28 + 56) - 1;
        *(_DWORD *)(v28 + 56) = v13;
        if (!v13)
          (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
      }
    }
    else
    {
      v9 = 2;
    }
    if (v29.__begin_)
    {
      v29.__end_ = v29.__begin_;
      operator delete(v29.__begin_);
    }
    if (v30)
    {
      v31 = v30;
      operator delete(v30);
    }
  }
  return v9;
}

void sub_1AD8E3B40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, uint64_t a17, _DWORD *a18, void *a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23)
{
  int v24;

  if (__p)
    operator delete(__p);
  if (a18)
  {
    v24 = a18[14] - 1;
    a18[14] = v24;
    if (!v24)
      (*(void (**)(_DWORD *))(*(_QWORD *)a18 + 8))(a18);
  }
  if (a19)
    operator delete(a19);
  if (a22)
    operator delete(a22);
  _Unwind_Resume(exception_object);
}

void quasar::createConstituentDfstsFromSecondPassDecoder(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t **v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  void *__p;
  void *v10;
  uint64_t v11;
  _OWORD v12[2];
  int v13;
  uint64_t v14[3];
  uint64_t *v15[3];

  v2 = *a1;
  v3 = (uint64_t **)(*a1 + 592);
  memset(v15, 0, sizeof(v15));
  memset(v14, 0, sizeof(v14));
  memset(v12, 0, sizeof(v12));
  v13 = 1065353216;
  __p = 0;
  v10 = 0;
  v11 = 0;
  v7 = 0;
  v8 = 0;
  quasar::loadConstituentDfsts(v3, (uint64_t **)(v2 + 616), v15, v14, v12, 0xFFFFFFFFLL, (__int32 **)&__p, &v7, a2, 0, 0x20000);
  v4 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  if (__p)
  {
    v10 = __p;
    operator delete(__p);
  }
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)v12);
  *(_QWORD *)&v12[0] = v14;
  std::vector<fst::FstWithLabel<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::__destroy_vector::operator()[abi:ne180100]((void ***)v12);
  *(_QWORD *)&v12[0] = v15;
  std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100]((void ***)v12);
}

void sub_1AD8E3CD4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, uint64_t a15)
{
  uint64_t v15;

  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  if (__p)
  {
    a13 = (uint64_t)__p;
    operator delete(__p);
  }
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)&a15);
  a15 = v15 - 64;
  std::vector<fst::FstWithLabel<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a15);
  a15 = v15 - 40;
  std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a15);
  _Unwind_Resume(a1);
}

uint64_t quasar::initLmInfo<quasar::SimpleFstLmRescorerOptions>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _OWORD v14[17];

  v4 = *(_QWORD *)(a1 + 32);
  if (v4 != -1)
  {
    *(_QWORD *)(a3 + 64) = v4;
    return 1;
  }
  v7 = *(unsigned __int8 *)(a1 + 31);
  if ((v7 & 0x80u) != 0)
    v7 = *(_QWORD *)(a1 + 16);
  if (!v7)
    return 1;
  v8 = quasar::SymbolTableList::strToSymbolId(a2, a1 + 8);
  *(_QWORD *)(a3 + 64) = v8;
  if (v8 != -1)
    return 1;
  if (quasar::gLogLevel >= 1)
  {
    memset(v14, 0, sizeof(v14));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v14);
    v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"Could not find OOV word \"", 25);
    v10 = *(char *)(a1 + 31);
    if (v10 >= 0)
      v11 = a1 + 8;
    else
      v11 = *(_QWORD *)(a1 + 8);
    if (v10 >= 0)
      v12 = *(unsigned __int8 *)(a1 + 31);
    else
      v12 = *(_QWORD *)(a1 + 16);
    v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, v11, v12);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"\" in symbol table(s)", 20);
    quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)v14);
  }
  return 0;
}

void sub_1AD8E3E2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)&a9);
  _Unwind_Resume(a1);
}

uint64_t quasar::filterTokenIds<quasar::SimpleFstLmRescorerOptions>(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, std::vector<unsigned int> *a6)
{
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  unsigned int *value;
  std::vector<unsigned int>::pointer end;
  unsigned int *v21;
  _QWORD *v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  std::vector<unsigned int>::pointer begin;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  char *v33;
  _QWORD *v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  _QWORD *v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  unsigned int *v44;
  unsigned int v45;
  uint64_t v46;
  unint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  _QWORD *v50;
  _QWORD *v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  unint64_t v55;
  char *v56;
  char *v57;
  uint64_t v58;
  _QWORD *v59;
  _QWORD *v60;
  char v61;
  _QWORD *v62;
  unsigned int *v63;
  std::vector<unsigned int>::pointer v64;
  unsigned int *v65;
  std::vector<unsigned int>::pointer v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  unint64_t v70;
  char *v71;
  unsigned int *v72;
  unsigned int v73;
  unint64_t v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  _QWORD *v80;
  uint64_t v81;
  int v82;
  uint64_t v83;
  uint64_t v84;
  _QWORD *v85;
  _QWORD *v86;
  uint64_t v87;
  uint64_t p_end_cap;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;

  std::vector<long long>::reserve((void **)a5, (a4[1] - *a4) >> 3);
  std::vector<int>::reserve(a6, (a4[1] - *a4) >> 3);
  v12 = *a4;
  if (a4[1] == *a4)
    return 1;
  v13 = 0;
  v87 = a5 + 16;
  p_end_cap = (uint64_t)&a6->__end_cap_;
  while (*(_QWORD *)(v12 + 8 * v13) != -1)
  {
    if (a3 && quasar::gLogLevel >= 6)
    {
      v104 = 0u;
      v105 = 0u;
      v102 = 0u;
      v103 = 0u;
      v100 = 0u;
      v101 = 0u;
      v98 = 0u;
      v99 = 0u;
      v96 = 0u;
      v97 = 0u;
      v94 = 0u;
      v95 = 0u;
      v92 = 0u;
      v93 = 0u;
      v90 = 0u;
      v91 = 0u;
      v89 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v89);
      v14 = *a3 + 24 * v13;
      v15 = *(char *)(v14 + 23);
      if (v15 >= 0)
        v16 = *a3 + 24 * v13;
      else
        v16 = *(_QWORD *)v14;
      if (v15 >= 0)
        v17 = *(unsigned __int8 *)(v14 + 23);
      else
        v17 = *(_QWORD *)(v14 + 8);
      v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v89, v16, v17);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)" ", 1);
      std::ostream::operator<<();
      quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)&v89);
    }
    end = a6->__end_;
    value = a6->__end_cap_.__value_;
    if (end >= value)
    {
      begin = a6->__begin_;
      v29 = end - a6->__begin_;
      v30 = v29 + 1;
      if ((unint64_t)(v29 + 1) >> 62)
        goto LABEL_126;
      v31 = (char *)value - (char *)begin;
      if (v31 >> 1 > v30)
        v30 = v31 >> 1;
      if ((unint64_t)v31 >= 0x7FFFFFFFFFFFFFFCLL)
        v32 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v32 = v30;
      if (v32)
      {
        v33 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(p_end_cap, v32);
        begin = a6->__begin_;
        end = a6->__end_;
      }
      else
      {
        v33 = 0;
      }
      v44 = (unsigned int *)&v33[4 * v29];
      *v44 = v13;
      v21 = v44 + 1;
      while (end != begin)
      {
        v45 = *--end;
        *--v44 = v45;
      }
      a6->__begin_ = v44;
      a6->__end_ = v21;
      a6->__end_cap_.__value_ = (unsigned int *)&v33[4 * v32];
      if (begin)
        operator delete(begin);
    }
    else
    {
      *end = v13;
      v21 = end + 1;
    }
    a6->__end_ = v21;
    v46 = *a4;
    v48 = *(_QWORD **)(a5 + 8);
    v47 = *(_QWORD *)(a5 + 16);
    if ((unint64_t)v48 >= v47)
    {
      v51 = *(_QWORD **)a5;
      v52 = ((uint64_t)v48 - *(_QWORD *)a5) >> 3;
      v53 = v52 + 1;
      if ((unint64_t)(v52 + 1) >> 61)
        goto LABEL_127;
      v54 = v47 - (_QWORD)v51;
      if (v54 >> 2 > v53)
        v53 = v54 >> 2;
      if ((unint64_t)v54 >= 0x7FFFFFFFFFFFFFF8)
        v55 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v55 = v53;
      if (v55)
      {
        v56 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>(v87, v55);
        v51 = *(_QWORD **)a5;
        v48 = *(_QWORD **)(a5 + 8);
      }
      else
      {
        v56 = 0;
      }
      v57 = &v56[8 * v52];
      *(_QWORD *)v57 = *(_QWORD *)(v46 + 8 * v13);
      v50 = v57 + 8;
      while (v48 != v51)
      {
        v58 = *--v48;
        *((_QWORD *)v57 - 1) = v58;
        v57 -= 8;
      }
      goto LABEL_108;
    }
    v49 = *(_QWORD *)(v46 + 8 * v13);
LABEL_56:
    *v48 = v49;
    v50 = v48 + 1;
LABEL_110:
    *(_QWORD *)(a5 + 8) = v50;
LABEL_111:
    ++v13;
    v12 = *a4;
    if (v13 >= (a4[1] - *a4) >> 3)
      return 1;
  }
  if (*(_BYTE *)a1)
  {
    if (quasar::gLogLevel >= 6)
    {
      if (a3)
      {
        v104 = 0uLL;
        v105 = 0uLL;
        v102 = 0uLL;
        v103 = 0uLL;
        v100 = 0uLL;
        v101 = 0uLL;
        v98 = 0uLL;
        v99 = 0uLL;
        v96 = 0uLL;
        v97 = 0uLL;
        v94 = 0uLL;
        v95 = 0uLL;
        v92 = 0uLL;
        v93 = 0uLL;
        v90 = 0uLL;
        v91 = 0uLL;
        v89 = 0uLL;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v89);
        v22 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v89, (uint64_t)"Could not find \"", 16);
        v23 = *a3 + 24 * v13;
        v24 = *(char *)(v23 + 23);
        if (v24 >= 0)
          v25 = *a3 + 24 * v13;
        else
          v25 = *(_QWORD *)v23;
        if (v24 >= 0)
          v26 = *(unsigned __int8 *)(v23 + 23);
        else
          v26 = *(_QWORD *)(v23 + 8);
        v27 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, v25, v26);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)"\" in symbol table(s), ignoring token", 36);
      }
      else
      {
        v104 = 0uLL;
        v105 = 0uLL;
        v102 = 0uLL;
        v103 = 0uLL;
        v100 = 0uLL;
        v101 = 0uLL;
        v98 = 0uLL;
        v99 = 0uLL;
        v96 = 0uLL;
        v97 = 0uLL;
        v94 = 0uLL;
        v95 = 0uLL;
        v92 = 0uLL;
        v93 = 0uLL;
        v90 = 0uLL;
        v91 = 0uLL;
        v89 = 0uLL;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v89);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v89, (uint64_t)"Could not find token at position ", 33);
        v59 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v59, (uint64_t)" in symbol table(s), ignoring token", 35);
      }
      quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)&v89);
    }
    goto LABEL_111;
  }
  if (*(_QWORD *)(a2 + 64) != -1)
  {
    if (quasar::gLogLevel >= 6)
    {
      if (a3)
      {
        v104 = 0uLL;
        v105 = 0uLL;
        v102 = 0uLL;
        v103 = 0uLL;
        v100 = 0uLL;
        v101 = 0uLL;
        v98 = 0uLL;
        v99 = 0uLL;
        v96 = 0uLL;
        v97 = 0uLL;
        v94 = 0uLL;
        v95 = 0uLL;
        v92 = 0uLL;
        v93 = 0uLL;
        v90 = 0uLL;
        v91 = 0uLL;
        v89 = 0uLL;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v89);
        v34 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v89, (uint64_t)"Could not find \"", 16);
        v35 = *a3 + 24 * v13;
        v36 = *(char *)(v35 + 23);
        if (v36 >= 0)
          v37 = *a3 + 24 * v13;
        else
          v37 = *(_QWORD *)v35;
        if (v36 >= 0)
          v38 = *(unsigned __int8 *)(v35 + 23);
        else
          v38 = *(_QWORD *)(v35 + 8);
        v39 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, v37, v38);
        v40 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v39, (uint64_t)"\" in symbol table(s), replacing with \"", 38);
        v41 = *(_BYTE *)(a1 + 31);
        if (v41 >= 0)
          v42 = a1 + 8;
        else
          v42 = *(_QWORD *)(a1 + 8);
        if (v41 >= 0)
          v43 = *(unsigned __int8 *)(a1 + 31);
        else
          v43 = *(_QWORD *)(a1 + 16);
      }
      else
      {
        v104 = 0uLL;
        v105 = 0uLL;
        v102 = 0uLL;
        v103 = 0uLL;
        v100 = 0uLL;
        v101 = 0uLL;
        v98 = 0uLL;
        v99 = 0uLL;
        v96 = 0uLL;
        v97 = 0uLL;
        v94 = 0uLL;
        v95 = 0uLL;
        v92 = 0uLL;
        v93 = 0uLL;
        v90 = 0uLL;
        v91 = 0uLL;
        v89 = 0uLL;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v89);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v89, (uint64_t)"Could not find token at positiob ", 33);
        v60 = (_QWORD *)std::ostream::operator<<();
        v40 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v60, (uint64_t)" in symbol table(s), replacing with \"", 37);
        v61 = *(_BYTE *)(a1 + 31);
        if (v61 >= 0)
          v42 = a1 + 8;
        else
          v42 = *(_QWORD *)(a1 + 8);
        if (v61 >= 0)
          v43 = *(unsigned __int8 *)(a1 + 31);
        else
          v43 = *(_QWORD *)(a1 + 16);
      }
      v62 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, v42, v43);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v62, (uint64_t)"\" ", 2);
      std::ostream::operator<<();
      quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)&v89);
    }
    v64 = a6->__end_;
    v63 = a6->__end_cap_.__value_;
    if (v64 >= v63)
    {
      v66 = a6->__begin_;
      v67 = v64 - a6->__begin_;
      v68 = v67 + 1;
      if ((unint64_t)(v67 + 1) >> 62)
LABEL_126:
        std::vector<int>::__throw_length_error[abi:ne180100]();
      v69 = (char *)v63 - (char *)v66;
      if (v69 >> 1 > v68)
        v68 = v69 >> 1;
      if ((unint64_t)v69 >= 0x7FFFFFFFFFFFFFFCLL)
        v70 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v70 = v68;
      if (v70)
      {
        v71 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(p_end_cap, v70);
        v66 = a6->__begin_;
        v64 = a6->__end_;
      }
      else
      {
        v71 = 0;
      }
      v72 = (unsigned int *)&v71[4 * v67];
      *v72 = v13;
      v65 = v72 + 1;
      while (v64 != v66)
      {
        v73 = *--v64;
        *--v72 = v73;
      }
      a6->__begin_ = v72;
      a6->__end_ = v65;
      a6->__end_cap_.__value_ = (unsigned int *)&v71[4 * v70];
      if (v66)
        operator delete(v66);
    }
    else
    {
      *v64 = v13;
      v65 = v64 + 1;
    }
    a6->__end_ = v65;
    v48 = *(_QWORD **)(a5 + 8);
    v74 = *(_QWORD *)(a5 + 16);
    if ((unint64_t)v48 < v74)
    {
      v49 = *(_QWORD *)(a2 + 64);
      goto LABEL_56;
    }
    v51 = *(_QWORD **)a5;
    v75 = ((uint64_t)v48 - *(_QWORD *)a5) >> 3;
    v76 = v75 + 1;
    if ((unint64_t)(v75 + 1) >> 61)
LABEL_127:
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v77 = v74 - (_QWORD)v51;
    if (v77 >> 2 > v76)
      v76 = v77 >> 2;
    if ((unint64_t)v77 >= 0x7FFFFFFFFFFFFFF8)
      v55 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v55 = v76;
    if (v55)
    {
      v56 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>(v87, v55);
      v51 = *(_QWORD **)a5;
      v48 = *(_QWORD **)(a5 + 8);
    }
    else
    {
      v56 = 0;
    }
    v57 = &v56[8 * v75];
    *(_QWORD *)v57 = *(_QWORD *)(a2 + 64);
    v50 = v57 + 8;
    while (v48 != v51)
    {
      v78 = *--v48;
      *((_QWORD *)v57 - 1) = v78;
      v57 -= 8;
    }
LABEL_108:
    *(_QWORD *)a5 = v57;
    *(_QWORD *)(a5 + 8) = v50;
    *(_QWORD *)(a5 + 16) = &v56[8 * v55];
    if (v51)
      operator delete(v51);
    goto LABEL_110;
  }
  if (a3)
  {
    if (quasar::gLogLevel >= 1)
    {
      v104 = 0u;
      v105 = 0u;
      v102 = 0u;
      v103 = 0u;
      v100 = 0u;
      v101 = 0u;
      v98 = 0u;
      v99 = 0u;
      v96 = 0u;
      v97 = 0u;
      v94 = 0u;
      v95 = 0u;
      v92 = 0u;
      v93 = 0u;
      v90 = 0u;
      v91 = 0u;
      v89 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v89);
      v80 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v89, (uint64_t)"Could not find \"", 16);
      v81 = *a3 + 24 * v13;
      v82 = *(char *)(v81 + 23);
      if (v82 >= 0)
        v83 = *a3 + 24 * v13;
      else
        v83 = *(_QWORD *)v81;
      if (v82 >= 0)
        v84 = *(unsigned __int8 *)(v81 + 23);
      else
        v84 = *(_QWORD *)(v81 + 8);
      v85 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v80, v83, v84);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v85, (uint64_t)"\" in symbol table(s)", 20);
LABEL_124:
      quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)&v89);
    }
  }
  else if (quasar::gLogLevel >= 1)
  {
    v104 = 0u;
    v105 = 0u;
    v102 = 0u;
    v103 = 0u;
    v100 = 0u;
    v101 = 0u;
    v98 = 0u;
    v99 = 0u;
    v96 = 0u;
    v97 = 0u;
    v94 = 0u;
    v95 = 0u;
    v92 = 0u;
    v93 = 0u;
    v90 = 0u;
    v91 = 0u;
    v89 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v89);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v89, (uint64_t)"Could not find token at position ", 33);
    v86 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v86, (uint64_t)" in symbol table(s)", 19);
    goto LABEL_124;
  }
  return 0;
}

void sub_1AD8E45A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)va);
  _Unwind_Resume(a1);
}

BOOL quasar::compute(_QWORD *a1, uint64_t a2, _QWORD *a3, uint64_t a4, uint64_t a5, int a6, uint64_t *a7, char a8, int a9)
{
  unint64_t *p_shared_owners;
  unint64_t v18;
  _BOOL8 v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t v27;
  std::__shared_weak_count *v28;
  uint64_t v29;
  std::__shared_weak_count *v30;
  _BYTE v31[32];
  uint64_t v32;

  v31[24] = 1;
  kaldi::Timer::Reset((kaldi::Timer *)v31, (clockid_t)a2);
  v32 = 0;
  quasar::createDfst(a2, a3, a4, a7, a8, a9, (uint64_t)a1, &v29);
  v27 = v29;
  v28 = v30;
  if (v30)
  {
    p_shared_owners = (unint64_t *)&v30->__shared_owners_;
    do
      v18 = __ldxr(p_shared_owners);
    while (__stxr(v18 + 1, p_shared_owners));
  }
  v19 = quasar::compute(a1, &v27, (uint64_t)a3, a4, a5, a6);
  v20 = v28;
  if (v28)
  {
    v21 = (unint64_t *)&v28->__shared_owners_;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  v23 = v30;
  if (v30)
  {
    v24 = (unint64_t *)&v30->__shared_owners_;
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  return v19;
}

void sub_1AD8E4744(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  _Unwind_Resume(a1);
}

void quasar::loadConstituentDfsts(uint64_t **a1@<X0>, uint64_t **a2@<X1>, uint64_t **a3@<X2>, uint64_t *a4@<X3>, _QWORD *a5@<X4>, uint64_t a6@<X5>, __int32 **a7@<X6>, uint64_t *a8@<X7>, uint64_t a9@<X8>, char a10, int a11)
{
  uint64_t *v14;
  uint64_t *v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  _DWORD *v28;
  std::__shared_weak_count *v29;
  unint64_t *p_shared_owners;
  unint64_t v31;
  uint64_t *v32;
  uint64_t *v33;
  char v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t *v38;
  uint64_t v39;
  const void *v40;
  uint64_t v41;
  uint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  uint64_t v49;
  void *v55[2];
  __int128 v56;
  int v57;
  void *v58[2];
  char v59;
  uint64_t v60;
  std::__shared_weak_count *v61;
  const void *v62;
  std::__shared_weak_count *v63;
  std::__shared_weak_count **v64;
  std::__shared_weak_count *v65;
  uint64_t v66;
  void *__p;
  void *v68;
  _DWORD *v69;
  void *v70;
  std::__shared_weak_count *v71;
  _OWORD v72[3];
  unsigned int *v73[4];

  kaldi::quasar::ConvertLmeFsts(a4, (uint64_t *)v73);
  memset(v72, 0, sizeof(v72));
  v14 = *a1;
  v15 = a1[1];
  if (*a1 != v15)
  {
    do
    {
      if ((_DWORD)a6 == -1)
      {
        v26 = *v14;
        std::string::basic_string[abi:ne180100]<0>(v55, "");
        quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::getCachedModel(v26, (uint64_t)v55, &v64);
        v27 = (uint64_t)v64;
        v28 = operator new(4uLL);
        __p = v28;
        *v28 = 0;
        v68 = v28 + 1;
        v69 = v28 + 1;
        kaldi::quasar::DeterministicOnDemandFstCreator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::AddBackoffFst(v72, v27, a10, a11, (uint64_t)&__p);
        if (__p)
        {
          v68 = __p;
          operator delete(__p);
        }
        v29 = v65;
        if (v65)
        {
          p_shared_owners = (unint64_t *)&v65->__shared_owners_;
          do
            v31 = __ldaxr(p_shared_owners);
          while (__stlxr(v31 - 1, p_shared_owners));
          if (!v31)
          {
            ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
            std::__shared_weak_count::__release_weak(v29);
          }
        }
        if ((SBYTE7(v56) & 0x80000000) == 0)
          goto LABEL_28;
        v25 = v55[0];
      }
      else
      {
        v16 = *v14;
        std::string::basic_string[abi:ne180100]<0>(&__p, "");
        quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::getCachedModel(v16, (uint64_t)&__p, &v70);
        LODWORD(v55[0]) = a6;
        v55[1] = v70;
        *(_QWORD *)&v56 = v71;
        if (v71)
        {
          v17 = (unint64_t *)&v71->__shared_owners_;
          do
            v18 = __ldxr(v17);
          while (__stxr(v18 + 1, v17));
        }
        DWORD2(v56) = -1;
        v65 = 0;
        v66 = 0;
        v64 = &v65;
        kaldi::quasar::DeterministicOnDemandFstCreator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::AddBackoffFst(v72, (unsigned int *)v55, (uint64_t *)v73, 1, a10, a11, 0x20000uLL, (uint64_t)&v64);
        std::__tree<int>::destroy((uint64_t)&v64, v65);
        v19 = (std::__shared_weak_count *)v56;
        if ((_QWORD)v56)
        {
          v20 = (unint64_t *)(v56 + 8);
          do
            v21 = __ldaxr(v20);
          while (__stlxr(v21 - 1, v20));
          if (!v21)
          {
            ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
            std::__shared_weak_count::__release_weak(v19);
          }
        }
        v22 = v71;
        if (v71)
        {
          v23 = (unint64_t *)&v71->__shared_owners_;
          do
            v24 = __ldaxr(v23);
          while (__stlxr(v24 - 1, v23));
          if (!v24)
          {
            ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
            std::__shared_weak_count::__release_weak(v22);
          }
        }
        if ((SHIBYTE(v69) & 0x80000000) == 0)
          goto LABEL_28;
        v25 = __p;
      }
      operator delete(v25);
LABEL_28:
      v14 += 2;
    }
    while (v14 != v15);
  }
  v32 = *a3;
  v33 = a3[1];
  if (*a3 == v33)
    goto LABEL_59;
  v34 = 0;
  v35 = *a3;
  do
  {
    v36 = *v35;
    v35 += 2;
    v34 |= *(_BYTE *)(v36 + 8) != 0;
  }
  while (v35 != v33);
  if ((v34 & 1) == 0)
  {
LABEL_59:
    v37 = *a2;
    v38 = a2[1];
    if (*a2 != v38)
    {
      do
      {
        v39 = *v37;
        std::string::basic_string[abi:ne180100]<0>(&__p, "");
        quasar::RegionalLmPlug<std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase>>::getCachedModel(v39, (uint64_t)&__p, &v62);
        v40 = v62;
        v65 = 0;
        v66 = 0;
        v64 = &v65;
        v41 = *a8;
        if (*a8)
        {
          std::string::basic_string[abi:ne180100]<0>(v58, "");
          quasar::RegionalLmPlug<std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase>>::getCachedModel(v41, (uint64_t)v58, &v60);
          v42 = v60;
        }
        else
        {
          v42 = 0;
        }
        *(_OWORD *)v55 = 0u;
        v56 = 0u;
        v57 = 1065353216;
        kaldi::quasar::DeterministicOnDemandFstCreator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::AddNnlm(v72, v40, v73, a5, a7, (uint64_t)&v64, v42, 1u, -1.0, a10, a11, (uint64_t)v55);
        std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)v55);
        if (v41)
        {
          v43 = v61;
          if (v61)
          {
            v44 = (unint64_t *)&v61->__shared_owners_;
            do
              v45 = __ldaxr(v44);
            while (__stlxr(v45 - 1, v44));
            if (!v45)
            {
              ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
              std::__shared_weak_count::__release_weak(v43);
            }
          }
          if (v59 < 0)
            operator delete(v58[0]);
        }
        std::__tree<int>::destroy((uint64_t)&v64, v65);
        v46 = v63;
        if (v63)
        {
          v47 = (unint64_t *)&v63->__shared_owners_;
          do
            v48 = __ldaxr(v47);
          while (__stlxr(v48 - 1, v47));
          if (!v48)
          {
            ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
            std::__shared_weak_count::__release_weak(v46);
          }
        }
        if (SHIBYTE(v69) < 0)
          operator delete(__p);
        v37 += 2;
      }
      while (v37 != v38);
      v32 = *a3;
      v33 = a3[1];
    }
  }
  for (; v32 != v33; v32 += 2)
  {
    v49 = *v32;
    v55[1] = 0;
    *(_QWORD *)&v56 = 0;
    v55[0] = &v55[1];
    (*(void (**)(uint64_t, _OWORD *, unsigned int **, uint64_t, uint64_t, _QWORD, _QWORD, void **, _QWORD *, uint64_t))(*(_QWORD *)v49 + 16))(v49, v72, v73, a6, 1, 0, a11, v55, a5, 0x20000);
    std::__tree<int>::destroy((uint64_t)v55, (_QWORD *)v55[1]);
  }
  *(_QWORD *)a9 = 0;
  *(_QWORD *)(a9 + 8) = 0;
  *(_QWORD *)(a9 + 16) = 0;
  std::vector<std::shared_ptr<fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::__init_with_size[abi:ne180100]<std::shared_ptr<fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>*,std::shared_ptr<fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>*>((char *)a9, *(_QWORD **)&v72[0], *((_QWORD **)&v72[0] + 1), (uint64_t)(*((_QWORD *)&v72[0] + 1) - *(_QWORD *)&v72[0]) >> 4);
  v55[0] = (char *)&v72[1] + 8;
  std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100]((void ***)v55);
  v55[0] = v72;
  std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100]((void ***)v55);
  *(_QWORD *)&v72[0] = v73;
  std::vector<fst::FstWithLabel<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::__destroy_vector::operator()[abi:ne180100]((void ***)v72);
}

void sub_1AD8E4C2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,char a33,uint64_t a34,char a35,uint64_t a36,char a37,uint64_t a38,uint64_t a39,void *__p,uint64_t a41,int a42,__int16 a43,char a44,char a45)
{
  uint64_t v45;
  void **v47;

  v47 = kaldi::quasar::DeterministicOnDemandFstCreator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::~DeterministicOnDemandFstCreator((void **)(v45 - 160));
  *(_QWORD *)(v45 - 160) = v45 - 112;
  std::vector<fst::FstWithLabel<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::__destroy_vector::operator()[abi:ne180100]((void ***)v47);
  _Unwind_Resume(a1);
}

void quasar::createDfst(uint64_t a1@<X0>, _QWORD *a2@<X1>, int a3@<W2>, uint64_t *a4@<X3>, char a5@<W4>, int a6@<W5>, uint64_t a7@<X6>, _QWORD *a8@<X8>)
{
  _DWORD *v12;
  _DWORD *v13;
  _DWORD *v14;
  _DWORD *v15;
  _DWORD *v16;
  unint64_t v17;
  _QWORD *v18;
  __int128 v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  _QWORD *v28;
  __int128 v29;
  uint64_t v30[3];
  _OWORD v31[2];
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  char v47;
  int v48;

  v48 = a3;
  v47 = a5;
  v12 = (_DWORD *)*a2;
  v13 = (_DWORD *)a2[1];
  if (a7 && v12 == v13)
  {
    kaldi::quasar::GetBestInterpWeights((_QWORD **)a1, a7, a6, a3, (uint64_t)v31);
    v14 = (_DWORD *)*a2;
    if (*a2)
    {
      a2[1] = v14;
      operator delete(v14);
      *a2 = 0;
      a2[1] = 0;
      a2[2] = 0;
    }
    v12 = *(_DWORD **)&v31[0];
    *a2 = *(_QWORD *)&v31[0];
    v15 = (_DWORD *)*((_QWORD *)&v31[0] + 1);
    *(_OWORD *)(a2 + 1) = *(_OWORD *)((char *)v31 + 8);
    v13 = v15;
    if (v12 == v15)
    {
      if (quasar::gLogLevel >= 2)
      {
        v45 = 0u;
        v46 = 0u;
        v43 = 0u;
        v44 = 0u;
        v41 = 0u;
        v42 = 0u;
        v39 = 0u;
        v40 = 0u;
        v37 = 0u;
        v38 = 0u;
        v35 = 0u;
        v36 = 0u;
        v33 = 0u;
        v34 = 0u;
        v32 = 0u;
        memset(v31, 0, sizeof(v31));
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v31);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)"failed to estimate the interpolation weights", 44);
        quasar::QuasarWarnMessage::~QuasarWarnMessage((quasar::QuasarWarnMessage *)v31);
      }
      goto LABEL_31;
    }
  }
  if (v12 == v13)
  {
LABEL_31:
    *a8 = 0;
    a8[1] = 0;
    return;
  }
  if (v13 - v12 != (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 4)
  {
    v45 = 0u;
    v46 = 0u;
    v43 = 0u;
    v44 = 0u;
    v41 = 0u;
    v42 = 0u;
    v39 = 0u;
    v40 = 0u;
    v37 = 0u;
    v38 = 0u;
    v35 = 0u;
    v36 = 0u;
    v33 = 0u;
    v34 = 0u;
    v32 = 0u;
    memset(v31, 0, sizeof(v31));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v31);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)"Num new Lms = ", 14);
    v28 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)" but num interp weights = ", 26);
    std::ostream::operator<<();
LABEL_34:
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v31);
  }
  v16 = v12;
  do
  {
    if ((*v16 & 0x7FFFFFFFu) >= 0x7F800000)
    {
      v45 = 0u;
      v46 = 0u;
      v43 = 0u;
      v44 = 0u;
      v41 = 0u;
      v42 = 0u;
      v39 = 0u;
      v40 = 0u;
      v37 = 0u;
      v38 = 0u;
      v35 = 0u;
      v36 = 0u;
      v33 = 0u;
      v34 = 0u;
      v32 = 0u;
      memset(v31, 0, sizeof(v31));
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v31);
      std::operator<<[abi:ne180100]<std::char_traits<char>>(v31, "At least one interpolation weight is not finite.");
      goto LABEL_34;
    }
    ++v16;
  }
  while (v16 != v13);
  v17 = 0;
  memset(v30, 0, sizeof(v30));
  do
  {
    if (quasar::gLogLevel >= 6)
    {
      v45 = 0u;
      v46 = 0u;
      v43 = 0u;
      v44 = 0u;
      v41 = 0u;
      v42 = 0u;
      v39 = 0u;
      v40 = 0u;
      v37 = 0u;
      v38 = 0u;
      v35 = 0u;
      v36 = 0u;
      v33 = 0u;
      v34 = 0u;
      v32 = 0u;
      memset(v31, 0, sizeof(v31));
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v31);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)"LM component ", 13);
      v18 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)" weight: ", 9);
      std::ostream::operator<<();
      quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)v31);
      v12 = (_DWORD *)*a2;
    }
    v19 = *(_OWORD *)(*(_QWORD *)a1 + 16 * v17);
    v31[0] = v19;
    if (*((_QWORD *)&v19 + 1))
    {
      v20 = (unint64_t *)(*((_QWORD *)&v19 + 1) + 8);
      do
        v21 = __ldxr(v20);
      while (__stxr(v21 + 1, v20));
    }
    LODWORD(v31[1]) = v12[v17];
    std::vector<std::pair<std::shared_ptr<fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,float>>::push_back[abi:ne180100](v30, (uint64_t)v31);
    v22 = (std::__shared_weak_count *)*((_QWORD *)&v31[0] + 1);
    if (*((_QWORD *)&v31[0] + 1))
    {
      v23 = (unint64_t *)(*((_QWORD *)&v31[0] + 1) + 8);
      do
        v24 = __ldaxr(v23);
      while (__stlxr(v24 - 1, v23));
      if (!v24)
      {
        ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
        std::__shared_weak_count::__release_weak(v22);
      }
    }
    ++v17;
    v12 = (_DWORD *)*a2;
  }
  while (v17 < (uint64_t)(a2[1] - *a2) >> 2);
  std::allocate_shared[abi:ne180100]<fst::InterpolateDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,std::allocator<fst::InterpolateDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,std::vector<std::pair<std::shared_ptr<fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,float>> &,fst::InterpolateDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::WeightType &,BOOL const&,void>(v30, &v48, &v47, v31);
  std::allocate_shared[abi:ne180100]<fst::LeftContextDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::shared_ptr<fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,std::allocator<fst::LeftContextDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::shared_ptr<fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,std::shared_ptr<fst::InterpolateDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> &,std::vector<int> const&,void>((uint64_t *)v31, a4, &v29);
  *(_OWORD *)a8 = v29;
  v25 = (std::__shared_weak_count *)*((_QWORD *)&v31[0] + 1);
  if (*((_QWORD *)&v31[0] + 1))
  {
    v26 = (unint64_t *)(*((_QWORD *)&v31[0] + 1) + 8);
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  *(_QWORD *)&v31[0] = v30;
  std::vector<quasar::AlternativeSelectionSpan::Alternative>::__destroy_vector::operator()[abi:ne180100]((void ***)v31);
}

void sub_1AD8E50F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  quasar::QuasarWarnMessage::~QuasarWarnMessage((quasar::QuasarWarnMessage *)va);
  _Unwind_Resume(a1);
}

uint64_t kaldi::quasar::DeterministicOnDemandFstCreator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::AddBackoffFst(_QWORD *a1, unsigned int *a2, uint64_t *a3, int a4, char a5, int a6, unint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v17;
  int *end;
  uint64_t v19;
  _QWORD *v20;
  unint64_t v21;
  uint64_t *v22;
  _QWORD *v23;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t *v32;
  _QWORD *v33;
  _QWORD *v34;
  char *v35;
  __int128 v36;
  int64x2_t v37;
  uint64_t v38;
  std::vector<int> __p;
  uint64_t v40[3];
  _QWORD v41[5];
  __int128 v42;
  char v43;
  uint64_t v44;
  std::vector<int> v45;
  uint64_t v46;
  _QWORD *v47;

  v9 = *((_QWORD *)a2 + 1);
  if (!v9 || (*(unsigned int (**)(uint64_t))(*(_QWORD *)v9 + 24))(v9) == -1)
  {
    if (kaldi::g_kaldi_verbose_level >= 2)
    {
      kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)v41, 2);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v41, (uint64_t)"the base LM is NULL or empty", 28);
      kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)v41);
    }
    return 0;
  }
  else
  {
    v17 = *a2;
    LOBYTE(v41[0]) = 1;
    v41[1] = a6;
    v41[2] = 0;
    v41[3] = v17;
    v41[4] = 0x100000002;
    v42 = xmmword_1AE146E50;
    v43 = 0;
    v44 = 0;
    std::vector<fst::FstWithLabel<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::vector(v40, 1uLL, (uint64_t)a2);
    std::vector<fst::FstWithLabel<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::__insert_with_size[abi:ne180100]<std::__wrap_iter<fst::FstWithLabel<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> const*>,std::__wrap_iter<fst::FstWithLabel<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> const*>>(v40, v40[1], *a3, a3[1], (a3[1] - *a3) >> 5);
    end = 0;
    memset(&__p, 0, sizeof(__p));
    if (a4)
    {
      fst::FstWithLabel<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::GetLabels((unsigned int **)a3, (std::vector<unsigned int> *)&v45);
      __p = v45;
      end = v45.__end_;
    }
    std::vector<int>::insert<std::__tree_const_iterator<int,std::__tree_node<int,void *> *,long>,0>(&__p, end, *(int **)a8, (int *)(a8 + 8));
    v19 = operator new();
    fst::BackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::BackoffDeterministicOnDemandFst(v19, v40, (uint64_t)v41, (uint64_t)&__p);
    v20 = (_QWORD *)operator new();
    *v20 = &unk_1E5D45B68;
    v20[1] = 0;
    v20[2] = 0;
    v20[3] = v19;
    v21 = a1[5];
    v22 = (uint64_t *)a1[4];
    if ((unint64_t)v22 >= v21)
    {
      v25 = a1[3];
      v26 = ((uint64_t)v22 - v25) >> 4;
      v27 = v26 + 1;
      if ((unint64_t)(v26 + 1) >> 60)
        std::vector<int>::__throw_length_error[abi:ne180100]();
      v28 = v21 - v25;
      if (v28 >> 3 > v27)
        v27 = v28 >> 3;
      if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFF0)
        v29 = 0xFFFFFFFFFFFFFFFLL;
      else
        v29 = v27;
      v47 = a1 + 5;
      v30 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<int,unsigned long>>>((uint64_t)(a1 + 5), v29);
      v32 = (uint64_t *)&v30[16 * v26];
      *v32 = v19;
      v32[1] = (uint64_t)v20;
      v34 = (_QWORD *)a1[3];
      v33 = (_QWORD *)a1[4];
      if (v33 == v34)
      {
        v37 = vdupq_n_s64((unint64_t)v33);
        v35 = &v30[16 * v26];
      }
      else
      {
        v35 = &v30[16 * v26];
        do
        {
          v36 = *((_OWORD *)v33 - 1);
          v33 -= 2;
          *((_OWORD *)v35 - 1) = v36;
          v35 -= 16;
          *v33 = 0;
          v33[1] = 0;
        }
        while (v33 != v34);
        v37 = *(int64x2_t *)(a1 + 3);
      }
      v23 = v32 + 2;
      a1[3] = v35;
      a1[4] = v32 + 2;
      *(int64x2_t *)&v45.__end_ = v37;
      v38 = a1[5];
      a1[5] = &v30[16 * v31];
      v46 = v38;
      v45.__begin_ = (std::vector<int>::pointer)v37.i64[0];
      std::__split_buffer<std::shared_ptr<quasar::FeatureExtractor>>::~__split_buffer((uint64_t)&v45);
    }
    else
    {
      *v22 = v19;
      v22[1] = (uint64_t)v20;
      v23 = v22 + 2;
    }
    a1[4] = v23;
    kaldi::quasar::DeterministicOnDemandFstCreator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::CacheAddedDfst((uint64_t)a1, a5, a7);
    if (__p.__begin_)
    {
      __p.__end_ = __p.__begin_;
      operator delete(__p.__begin_);
    }
    v45.__begin_ = (std::vector<int>::pointer)v40;
    std::vector<fst::FstWithLabel<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v45);
    return 1;
  }
}

void sub_1AD8E5450(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char *__p, char *a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, char a17)
{
  if (__p)
  {
    a12 = __p;
    operator delete(__p);
  }
  __p = &a14;
  std::vector<fst::FstWithLabel<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

uint64_t quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::getCachedModel@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v8;
  void *v9;
  std::string *v10;
  std::string::size_type size;
  std::string *v12;
  __int128 v13;
  void **v14;
  std::string::size_type v15;
  uint64_t v16;
  void *__p[2];
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  std::string v34;
  std::string v35;

  v3 = *(_QWORD *)(result + 56);
  if (!v3)
  {
    v16 = result;
    LODWORD(v8) = *(char *)(a2 + 23);
    if ((v8 & 0x80000000) != 0)
    {
      std::string::__init_copy_ctor_external(&v35, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
      LODWORD(v8) = *(char *)(a2 + 23);
      if ((v8 & 0x80000000) != 0)
      {
        v8 = *(_QWORD *)(a2 + 8);
        goto LABEL_11;
      }
    }
    else
    {
      v35 = *(std::string *)a2;
    }
    v8 = v8;
LABEL_11:
    if (!v8)
      MEMORY[0x1AF44C914](&v35, "uninitialized model component");
    quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::getPlaceholder(v16, (std::string *)__p);
    if (SBYTE7(v18) < 0)
    {
      v9 = __p[1];
      operator delete(__p[0]);
      if (!v9)
        goto LABEL_17;
    }
    else if (!BYTE7(v18))
    {
      goto LABEL_17;
    }
    quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::getPlaceholder(v16, &v34);
    v12 = std::string::insert(&v34, 0, " for location-specific placeholder ");
    v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
    *(_QWORD *)&v18 = *((_QWORD *)&v12->__r_.__value_.__l + 2);
    *(_OWORD *)__p = v13;
    v12->__r_.__value_.__l.__size_ = 0;
    v12->__r_.__value_.__r.__words[2] = 0;
    v12->__r_.__value_.__r.__words[0] = 0;
    if ((SBYTE7(v18) & 0x80u) == 0)
      v14 = __p;
    else
      v14 = (void **)__p[0];
    if ((SBYTE7(v18) & 0x80u) == 0)
      v15 = BYTE7(v18);
    else
      v15 = (std::string::size_type)__p[1];
    std::string::append(&v35, (const std::string::value_type *)v14, v15);
    if (SBYTE7(v18) < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v34.__r_.__value_.__l.__data_);
LABEL_17:
    v32 = 0u;
    v33 = 0u;
    v30 = 0u;
    v31 = 0u;
    v28 = 0u;
    v29 = 0u;
    v26 = 0u;
    v27 = 0u;
    v24 = 0u;
    v25 = 0u;
    v22 = 0u;
    v23 = 0u;
    v20 = 0u;
    v21 = 0u;
    v18 = 0u;
    v19 = 0u;
    *(_OWORD *)__p = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    if ((v35.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v10 = &v35;
    else
      v10 = (std::string *)v35.__r_.__value_.__r.__words[0];
    if ((v35.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v35.__r_.__value_.__r.__words[2]);
    else
      size = v35.__r_.__value_.__l.__size_;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)v10, size);
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)__p);
  }
  v4 = *(_QWORD *)(result + 64);
  *a3 = v3;
  a3[1] = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  return result;
}

void sub_1AD8E56CC()
{
  JUMPOUT(0x1AD8E56DCLL);
}

uint64_t kaldi::quasar::DeterministicOnDemandFstCreator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::AddBackoffFst(_QWORD *a1, uint64_t a2, char a3, unint64_t a4, uint64_t a5)
{
  uint64_t v10;
  _QWORD *v11;
  unint64_t v12;
  uint64_t *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t *v22;
  _QWORD *v23;
  _QWORD *v24;
  char *v25;
  __int128 v26;
  int64x2_t v27;
  uint64_t v28;
  uint64_t v30;
  int64x2_t v31;
  uint64_t v32;
  _QWORD *v33;

  v10 = operator new();
  fst::BackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::BackoffDeterministicOnDemandFst(v10, a2, a5);
  v11 = (_QWORD *)operator new();
  *v11 = &unk_1E5D45B68;
  v11[1] = 0;
  v11[2] = 0;
  v11[3] = v10;
  v12 = a1[5];
  v13 = (uint64_t *)a1[4];
  if ((unint64_t)v13 >= v12)
  {
    v15 = a1[3];
    v16 = ((uint64_t)v13 - v15) >> 4;
    v17 = v16 + 1;
    if ((unint64_t)(v16 + 1) >> 60)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v18 = v12 - v15;
    if (v18 >> 3 > v17)
      v17 = v18 >> 3;
    if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF0)
      v19 = 0xFFFFFFFFFFFFFFFLL;
    else
      v19 = v17;
    v33 = a1 + 5;
    v20 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<int,unsigned long>>>((uint64_t)(a1 + 5), v19);
    v22 = (uint64_t *)&v20[16 * v16];
    *v22 = v10;
    v22[1] = (uint64_t)v11;
    v24 = (_QWORD *)a1[3];
    v23 = (_QWORD *)a1[4];
    if (v23 == v24)
    {
      v27 = vdupq_n_s64((unint64_t)v23);
      v25 = &v20[16 * v16];
    }
    else
    {
      v25 = &v20[16 * v16];
      do
      {
        v26 = *((_OWORD *)v23 - 1);
        v23 -= 2;
        *((_OWORD *)v25 - 1) = v26;
        v25 -= 16;
        *v23 = 0;
        v23[1] = 0;
      }
      while (v23 != v24);
      v27 = *(int64x2_t *)(a1 + 3);
    }
    v14 = v22 + 2;
    a1[3] = v25;
    a1[4] = v22 + 2;
    v31 = v27;
    v28 = a1[5];
    a1[5] = &v20[16 * v21];
    v32 = v28;
    v30 = v27.i64[0];
    std::__split_buffer<std::shared_ptr<quasar::FeatureExtractor>>::~__split_buffer((uint64_t)&v30);
  }
  else
  {
    *v13 = v10;
    v13[1] = (uint64_t)v11;
    v14 = v13 + 2;
  }
  a1[4] = v14;
  kaldi::quasar::DeterministicOnDemandFstCreator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::CacheAddedDfst((uint64_t)a1, a3, a4);
  return 1;
}

void sub_1AD8E588C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t kaldi::quasar::DeterministicOnDemandFstCreator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::AddNnlm(_QWORD *a1, const void *a2, unsigned int **a3, _QWORD *a4, __int32 **a5, uint64_t a6, uint64_t a7, unsigned int a8, float a9, char a10, unint64_t a11, uint64_t a12)
{
  unsigned int *v16;
  unsigned int *v17;
  __int32 *v18;
  __int32 *v19;
  __int32 *v20;
  char v21;
  char *v22;
  char *v23;
  char *v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char *v29;
  unsigned int *v30;
  unsigned int v31;
  __int32 *v32;
  __int32 *v33;
  char *v34;
  char *v35;
  char *v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  char *v41;
  __int32 *v42;
  __int32 v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  unint64_t v48;
  uint64_t *v49;
  _QWORD *v50;
  void *v51;
  uint64_t v52;
  int *v53;
  _QWORD *v54;
  unint64_t v55;
  int **v56;
  _QWORD *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  unint64_t v63;
  char *v64;
  uint64_t v65;
  uint64_t *v66;
  _QWORD *v67;
  _QWORD *v68;
  char *v69;
  __int128 v70;
  int64x2_t v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  unint64_t v76;
  char *v77;
  uint64_t v78;
  int **v79;
  _QWORD *v80;
  _QWORD *v81;
  char *v82;
  __int128 v83;
  int64x2_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v88;
  _OWORD v92[2];
  _QWORD *v93;
  _QWORD **v94;
  _QWORD *v95[2];
  int *v96;
  _QWORD *v97;
  uint64_t v98;
  char *v99;
  char *v100;
  char *v101;
  char *v102[4];

  v88 = a6;
  memset(v102, 0, 24);
  v99 = 0;
  v100 = 0;
  v101 = 0;
  v17 = *a3;
  v16 = a3[1];
  if (*a3 != v16)
  {
    do
    {
      if (!a7
        || ((v18 = a5[1], (v19 = wmemchr(*a5, *v17, v18 - *a5)) != 0) ? (v20 = v19) : (v20 = v18), v20 == a5[1]))
      {
        memset(v92, 0, 24);
        v97 = 0;
        v98 = 0;
        v96 = (int *)&v97;
        v21 = kaldi::quasar::DeterministicOnDemandFstCreator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::AddBackoffFst(a1, v17, (uint64_t *)v92, 0, a10, a11, 0x20000uLL, (uint64_t)&v96);
        std::__tree<int>::destroy((uint64_t)&v96, v97);
        v96 = (int *)v92;
        std::vector<fst::FstWithLabel<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v96);
        if ((v21 & 1) != 0)
        {
          std::vector<std::shared_ptr<quasar::FeatureExtractor>>::push_back[abi:ne180100](v102, (__int128 *)(a1[1] - 16));
          a1[1] = std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](a1[1] - 16);
          v22 = v100;
          if (v100 >= v101)
          {
            v24 = v99;
            v25 = (v100 - v99) >> 2;
            v26 = v25 + 1;
            if ((unint64_t)(v25 + 1) >> 62)
              std::vector<int>::__throw_length_error[abi:ne180100]();
            v27 = v101 - v99;
            if ((v101 - v99) >> 1 > v26)
              v26 = v27 >> 1;
            if ((unint64_t)v27 >= 0x7FFFFFFFFFFFFFFCLL)
              v28 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v28 = v26;
            if (v28)
            {
              v29 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v101, v28);
              v24 = v99;
              v22 = v100;
            }
            else
            {
              v29 = 0;
            }
            v30 = (unsigned int *)&v29[4 * v25];
            *v30 = *v17;
            v23 = (char *)(v30 + 1);
            while (v22 != v24)
            {
              v31 = *((_DWORD *)v22 - 1);
              v22 -= 4;
              *--v30 = v31;
            }
            v99 = (char *)v30;
            v100 = v23;
            v101 = &v29[4 * v28];
            if (v24)
              operator delete(v24);
          }
          else
          {
            *(_DWORD *)v100 = *v17;
            v23 = v22 + 4;
          }
          v100 = v23;
        }
      }
      v17 += 8;
    }
    while (v17 != v16);
  }
  if (a7 && *a5 != a5[1])
  {
    v96 = 0;
    v97 = 0;
    v98 = 0;
    v95[0] = 0;
    v95[1] = 0;
    v94 = v95;
    memset(v92, 0, sizeof(v92));
    LODWORD(v93) = 1065353216;
    kaldi::quasar::DeterministicOnDemandFstCreator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::AddNnlm(a1, a7, &v96, a4, a5, &v94, 0, a8, -1.0, a10, a11, v92, v88);
    std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)v92);
    std::__tree<int>::destroy((uint64_t)&v94, v95[0]);
    *(_QWORD *)&v92[0] = &v96;
    std::vector<fst::FstWithLabel<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::__destroy_vector::operator()[abi:ne180100]((void ***)v92);
    v32 = *a5;
    v33 = a5[1];
    if (*a5 != v33)
    {
      do
      {
        v34 = v100;
        if (v100 >= v101)
        {
          v36 = v99;
          v37 = (v100 - v99) >> 2;
          v38 = v37 + 1;
          if ((unint64_t)(v37 + 1) >> 62)
            std::vector<int>::__throw_length_error[abi:ne180100]();
          v39 = v101 - v99;
          if ((v101 - v99) >> 1 > v38)
            v38 = v39 >> 1;
          if ((unint64_t)v39 >= 0x7FFFFFFFFFFFFFFCLL)
            v40 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v40 = v38;
          if (v40)
          {
            v41 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v101, v40);
            v36 = v99;
            v34 = v100;
          }
          else
          {
            v41 = 0;
          }
          v42 = (__int32 *)&v41[4 * v37];
          *v42 = *v32;
          v35 = (char *)(v42 + 1);
          while (v34 != v36)
          {
            v43 = *((_DWORD *)v34 - 1);
            v34 -= 4;
            *--v42 = v43;
          }
          v99 = (char *)v42;
          v100 = v35;
          v101 = &v41[4 * v40];
          if (v36)
            operator delete(v36);
        }
        else
        {
          *(_DWORD *)v100 = *v32;
          v35 = v34 + 4;
        }
        v100 = v35;
        std::vector<std::shared_ptr<quasar::FeatureExtractor>>::push_back[abi:ne180100](v102, (__int128 *)(a1[1] - 16));
        ++v32;
      }
      while (v32 != v33);
    }
    a1[1] = std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](a1[1] - 16);
  }
  if (a2)
  {
    if (v44)
    {
      v45 = (uint64_t)v44;
      v96 = 0;
      v97 = 0;
      v98 = 0;
      if (!a7)
        std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v96, *a5, (uint64_t)a5[1], a5[1] - *a5);
      v46 = operator new();
      kaldi::quasar::RecurrentNeuralDeterministicFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::RecurrentNeuralDeterministicFst(v46, v45, &v99, v102, a4, a8, &v96, v88, a9, a12);
      v94 = (_QWORD **)v46;
      v47 = (_QWORD *)operator new();
      *v47 = &unk_1E5D45E08;
      v47[1] = 0;
      v47[2] = 0;
      v47[3] = v46;
      v95[0] = v47;
      v48 = a1[5];
      v49 = (uint64_t *)a1[4];
      if ((unint64_t)v49 >= v48)
      {
        v59 = a1[3];
        v60 = ((uint64_t)v49 - v59) >> 4;
        v61 = v60 + 1;
        if ((unint64_t)(v60 + 1) >> 60)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v62 = v48 - v59;
        if (v62 >> 3 > v61)
          v61 = v62 >> 3;
        if ((unint64_t)v62 >= 0x7FFFFFFFFFFFFFF0)
          v63 = 0xFFFFFFFFFFFFFFFLL;
        else
          v63 = v61;
        v93 = a1 + 5;
        v64 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<int,unsigned long>>>((uint64_t)(a1 + 5), v63);
        v66 = (uint64_t *)&v64[16 * v60];
        *v66 = v46;
        v66[1] = (uint64_t)v47;
        v94 = 0;
        v95[0] = 0;
        v68 = (_QWORD *)a1[3];
        v67 = (_QWORD *)a1[4];
        if (v67 == v68)
        {
          v71 = vdupq_n_s64((unint64_t)v67);
          v69 = &v64[16 * v60];
        }
        else
        {
          v69 = &v64[16 * v60];
          do
          {
            v70 = *((_OWORD *)v67 - 1);
            v67 -= 2;
            *((_OWORD *)v69 - 1) = v70;
            v69 -= 16;
            *v67 = 0;
            v67[1] = 0;
          }
          while (v67 != v68);
          v71 = *(int64x2_t *)(a1 + 3);
        }
        v50 = v66 + 2;
        a1[3] = v69;
        a1[4] = v66 + 2;
        *(int64x2_t *)((char *)v92 + 8) = v71;
        v85 = a1[5];
        a1[5] = &v64[16 * v65];
        *((_QWORD *)&v92[1] + 1) = v85;
        *(_QWORD *)&v92[0] = v71.i64[0];
        std::__split_buffer<std::shared_ptr<quasar::FeatureExtractor>>::~__split_buffer((uint64_t)v92);
      }
      else
      {
        *v49 = v46;
        v49[1] = (uint64_t)v47;
        v50 = v49 + 2;
      }
      a1[4] = v50;
      if (v96)
      {
        v97 = v96;
        operator delete(v96);
      }
LABEL_86:
      kaldi::quasar::DeterministicOnDemandFstCreator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::CacheAddedDfst((uint64_t)a1, a10, a11);
      v58 = 1;
      goto LABEL_87;
    }
    if (v51)
    {
      v52 = (uint64_t)v51;
      v53 = (int *)operator new();
      kaldi::quasar::NeuralNgramDeterministicFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::NeuralNgramDeterministicFst((uint64_t)v53, v52, &v99, v102, a4, a8);
      v96 = v53;
      v54 = (_QWORD *)operator new();
      *v54 = &unk_1E5D45DD0;
      v54[1] = 0;
      v54[2] = 0;
      v54[3] = v53;
      v97 = v54;
      v55 = a1[5];
      v56 = (int **)a1[4];
      if ((unint64_t)v56 >= v55)
      {
        v72 = a1[3];
        v73 = ((uint64_t)v56 - v72) >> 4;
        v74 = v73 + 1;
        if ((unint64_t)(v73 + 1) >> 60)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v75 = v55 - v72;
        if (v75 >> 3 > v74)
          v74 = v75 >> 3;
        if ((unint64_t)v75 >= 0x7FFFFFFFFFFFFFF0)
          v76 = 0xFFFFFFFFFFFFFFFLL;
        else
          v76 = v74;
        v93 = a1 + 5;
        v77 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<int,unsigned long>>>((uint64_t)(a1 + 5), v76);
        v79 = (int **)&v77[16 * v73];
        *v79 = v53;
        v79[1] = (int *)v54;
        v81 = (_QWORD *)a1[3];
        v80 = (_QWORD *)a1[4];
        if (v80 == v81)
        {
          v84 = vdupq_n_s64((unint64_t)v80);
          v82 = &v77[16 * v73];
        }
        else
        {
          v82 = &v77[16 * v73];
          do
          {
            v83 = *((_OWORD *)v80 - 1);
            v80 -= 2;
            *((_OWORD *)v82 - 1) = v83;
            v82 -= 16;
            *v80 = 0;
            v80[1] = 0;
          }
          while (v80 != v81);
          v84 = *(int64x2_t *)(a1 + 3);
        }
        v57 = v79 + 2;
        a1[3] = v82;
        a1[4] = v79 + 2;
        *(int64x2_t *)((char *)v92 + 8) = v84;
        v86 = a1[5];
        a1[5] = &v77[16 * v78];
        *((_QWORD *)&v92[1] + 1) = v86;
        *(_QWORD *)&v92[0] = v84.i64[0];
        std::__split_buffer<std::shared_ptr<quasar::FeatureExtractor>>::~__split_buffer((uint64_t)v92);
      }
      else
      {
        *v56 = v53;
        v56[1] = (int *)v54;
        v57 = v56 + 2;
      }
      a1[4] = v57;
      goto LABEL_86;
    }
  }
  if (kaldi::g_kaldi_verbose_level >= -1)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v92);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v92, (uint64_t)"the provided NnlmEvaluator is neither DNN nor RNN", 49);
    kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)v92);
  }
  v58 = 0;
LABEL_87:
  if (v99)
  {
    v100 = v99;
    operator delete(v99);
  }
  *(_QWORD *)&v92[0] = v102;
  std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100]((void ***)v92);
  return v58;
}

void sub_1AD8E5FFC(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v3;

  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](v1 - 176);
  v3 = *(void **)(v1 - 152);
  if (v3)
  {
    *(_QWORD *)(v1 - 144) = v3;
    operator delete(v3);
  }
  *(_QWORD *)(v1 - 152) = v1 - 128;
  std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v1 - 152));
  _Unwind_Resume(a1);
}

uint64_t quasar::RegionalLmPlug<std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase>>::getCachedModel@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v8;
  void *v9;
  std::string *v10;
  std::string::size_type size;
  std::string *v12;
  __int128 v13;
  void **v14;
  std::string::size_type v15;
  uint64_t v16;
  void *__p[2];
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  std::string v34;
  std::string v35;

  v3 = *(_QWORD *)(result + 56);
  if (!v3)
  {
    v16 = result;
    LODWORD(v8) = *(char *)(a2 + 23);
    if ((v8 & 0x80000000) != 0)
    {
      std::string::__init_copy_ctor_external(&v35, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
      LODWORD(v8) = *(char *)(a2 + 23);
      if ((v8 & 0x80000000) != 0)
      {
        v8 = *(_QWORD *)(a2 + 8);
        goto LABEL_11;
      }
    }
    else
    {
      v35 = *(std::string *)a2;
    }
    v8 = v8;
LABEL_11:
    if (!v8)
      MEMORY[0x1AF44C914](&v35, "uninitialized model component");
    quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::getPlaceholder(v16, (std::string *)__p);
    if (SBYTE7(v18) < 0)
    {
      v9 = __p[1];
      operator delete(__p[0]);
      if (!v9)
        goto LABEL_17;
    }
    else if (!BYTE7(v18))
    {
      goto LABEL_17;
    }
    quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::getPlaceholder(v16, &v34);
    v12 = std::string::insert(&v34, 0, " for location-specific placeholder ");
    v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
    *(_QWORD *)&v18 = *((_QWORD *)&v12->__r_.__value_.__l + 2);
    *(_OWORD *)__p = v13;
    v12->__r_.__value_.__l.__size_ = 0;
    v12->__r_.__value_.__r.__words[2] = 0;
    v12->__r_.__value_.__r.__words[0] = 0;
    if ((SBYTE7(v18) & 0x80u) == 0)
      v14 = __p;
    else
      v14 = (void **)__p[0];
    if ((SBYTE7(v18) & 0x80u) == 0)
      v15 = BYTE7(v18);
    else
      v15 = (std::string::size_type)__p[1];
    std::string::append(&v35, (const std::string::value_type *)v14, v15);
    if (SBYTE7(v18) < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v34.__r_.__value_.__l.__data_);
LABEL_17:
    v32 = 0u;
    v33 = 0u;
    v30 = 0u;
    v31 = 0u;
    v28 = 0u;
    v29 = 0u;
    v26 = 0u;
    v27 = 0u;
    v24 = 0u;
    v25 = 0u;
    v22 = 0u;
    v23 = 0u;
    v20 = 0u;
    v21 = 0u;
    v18 = 0u;
    v19 = 0u;
    *(_OWORD *)__p = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    if ((v35.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v10 = &v35;
    else
      v10 = (std::string *)v35.__r_.__value_.__r.__words[0];
    if ((v35.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v35.__r_.__value_.__r.__words[2]);
    else
      size = v35.__r_.__value_.__l.__size_;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)v10, size);
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)__p);
  }
  v4 = *(_QWORD *)(result + 64);
  *a3 = v3;
  a3[1] = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  return result;
}

void sub_1AD8E632C()
{
  JUMPOUT(0x1AD8E633CLL);
}

void **kaldi::quasar::DeterministicOnDemandFstCreator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::~DeterministicOnDemandFstCreator(void **a1)
{
  void **v3;

  v3 = a1 + 3;
  std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100](&v3);
  v3 = a1;
  std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100](&v3);
  return a1;
}

void fst::FstWithLabel<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::GetLabels(unsigned int **a1@<X0>, std::vector<unsigned int> *a2@<X8>)
{
  unsigned int *v4;
  unsigned int *v5;
  std::__compressed_pair<unsigned int *> *p_end_cap;
  std::vector<unsigned int>::pointer end;
  unsigned int *v8;
  std::vector<unsigned int>::pointer begin;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  unsigned int *v15;
  unsigned int v16;

  a2->__begin_ = 0;
  a2->__end_ = 0;
  a2->__end_cap_.__value_ = 0;
  std::vector<int>::reserve(a2, ((char *)a1[1] - (char *)*a1) >> 5);
  v4 = *a1;
  v5 = a1[1];
  if (*a1 != v5)
  {
    p_end_cap = &a2->__end_cap_;
    end = a2->__end_;
    do
    {
      if (end >= p_end_cap->__value_)
      {
        begin = a2->__begin_;
        v10 = end - a2->__begin_;
        v11 = v10 + 1;
        if ((unint64_t)(v10 + 1) >> 62)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v12 = (char *)p_end_cap->__value_ - (char *)begin;
        if (v12 >> 1 > v11)
          v11 = v12 >> 1;
        if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFFCLL)
          v13 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v13 = v11;
        if (v13)
        {
          v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&a2->__end_cap_, v13);
          begin = a2->__begin_;
          end = a2->__end_;
        }
        else
        {
          v14 = 0;
        }
        v15 = (unsigned int *)&v14[4 * v10];
        *v15 = *v4;
        v8 = v15 + 1;
        while (end != begin)
        {
          v16 = *--end;
          *--v15 = v16;
        }
        a2->__begin_ = v15;
        a2->__end_ = v8;
        a2->__end_cap_.__value_ = (unsigned int *)&v14[4 * v13];
        if (begin)
          operator delete(begin);
      }
      else
      {
        *end = *v4;
        v8 = end + 1;
      }
      a2->__end_ = v8;
      v4 += 8;
      end = v8;
    }
    while (v4 != v5);
  }
}

void sub_1AD8E64C8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

std::vector<int>::pointer std::vector<int>::insert<std::__tree_const_iterator<int,std::__tree_node<int,void *> *,long>,0>(std::vector<int> *a1, int *a2, int *a3, int *a4)
{
  uint64_t v4;
  int *v5;
  int *v6;
  int *v7;
  BOOL v8;

  if (a3 == a4)
  {
    v4 = 0;
  }
  else
  {
    v4 = 0;
    v5 = a3;
    do
    {
      v6 = (int *)*((_QWORD *)v5 + 1);
      if (v6)
      {
        do
        {
          v7 = v6;
          v6 = *(int **)v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          v7 = (int *)*((_QWORD *)v5 + 2);
          v8 = *(_QWORD *)v7 == (_QWORD)v5;
          v5 = v7;
        }
        while (!v8);
      }
      ++v4;
      v5 = v7;
    }
    while (v7 != a4);
  }
  return std::vector<int>::__insert_with_size[abi:ne180100]<std::__tree_const_iterator<int,std::__tree_node<int,void *> *,long>,std::__tree_const_iterator<int,std::__tree_node<int,void *> *,long>>(a1, a2, a3, a4, v4);
}

uint64_t kaldi::quasar::DeterministicOnDemandFstCreator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::CacheAddedDfst(uint64_t a1, char a2, unint64_t a3)
{
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  _QWORD *v14;
  unint64_t v15;
  _QWORD *v16;
  __int128 *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char *v23;
  uint64_t v24;
  char *v25;
  _QWORD *v26;
  _QWORD *v27;
  char *v28;
  __int128 v29;
  int64x2_t v30;
  uint64_t v31;
  uint64_t v33;
  int64x2_t v34;
  uint64_t v35;
  uint64_t v36;

  if ((a2 & 1) != 0)
  {
    v5 = *(_QWORD *)(a1 + 32);
    v6 = (_QWORD *)operator new();
    v7 = v6;
    v33 = *(_QWORD *)(v5 - 16);
    v8 = *(_QWORD *)(v5 - 8);
    v34.i64[0] = v8;
    if (v8)
    {
      v9 = (unint64_t *)(v8 + 8);
      do
        v10 = __ldxr(v9);
      while (__stxr(v10 + 1, v9));
    }
    fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::CacheDeterministicOnDemandFst(v6, &v33, a3);
    v11 = (std::__shared_weak_count *)v34.i64[0];
    if (v34.i64[0])
    {
      v12 = (unint64_t *)(v34.i64[0] + 8);
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 - 1, v12));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    v14 = (_QWORD *)operator new();
    *v14 = &unk_1E5D45B30;
    v14[1] = 0;
    v14[2] = 0;
    v14[3] = v7;
    v15 = *(_QWORD *)(a1 + 40);
    v16 = *(_QWORD **)(a1 + 32);
    if ((unint64_t)v16 >= v15)
    {
      v18 = *(_QWORD *)(a1 + 24);
      v19 = ((uint64_t)v16 - v18) >> 4;
      v20 = v19 + 1;
      if ((unint64_t)(v19 + 1) >> 60)
        std::vector<int>::__throw_length_error[abi:ne180100]();
      v21 = v15 - v18;
      if (v21 >> 3 > v20)
        v20 = v21 >> 3;
      if ((unint64_t)v21 >= 0x7FFFFFFFFFFFFFF0)
        v22 = 0xFFFFFFFFFFFFFFFLL;
      else
        v22 = v20;
      v36 = a1 + 40;
      v23 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<int,unsigned long>>>(a1 + 40, v22);
      v25 = &v23[16 * v19];
      *(_QWORD *)v25 = v7;
      *((_QWORD *)v25 + 1) = v14;
      v27 = *(_QWORD **)(a1 + 24);
      v26 = *(_QWORD **)(a1 + 32);
      if (v26 == v27)
      {
        v30 = vdupq_n_s64((unint64_t)v26);
        v28 = &v23[16 * v19];
      }
      else
      {
        v28 = &v23[16 * v19];
        do
        {
          v29 = *((_OWORD *)v26 - 1);
          v26 -= 2;
          *((_OWORD *)v28 - 1) = v29;
          v28 -= 16;
          *v26 = 0;
          v26[1] = 0;
        }
        while (v26 != v27);
        v30 = *(int64x2_t *)(a1 + 24);
      }
      v17 = (__int128 *)(v25 + 16);
      *(_QWORD *)(a1 + 24) = v28;
      *(_QWORD *)(a1 + 32) = v25 + 16;
      v34 = v30;
      v31 = *(_QWORD *)(a1 + 40);
      *(_QWORD *)(a1 + 40) = &v23[16 * v24];
      v35 = v31;
      v33 = v30.i64[0];
      std::__split_buffer<std::shared_ptr<quasar::FeatureExtractor>>::~__split_buffer((uint64_t)&v33);
    }
    else
    {
      *v16 = v7;
      v16[1] = v14;
      v17 = (__int128 *)(v16 + 2);
    }
    *(_QWORD *)(a1 + 32) = v17;
  }
  else
  {
    v17 = *(__int128 **)(a1 + 32);
  }
  return std::vector<std::shared_ptr<quasar::FeatureExtractor>>::push_back[abi:ne180100]((char **)a1, v17 - 1);
}

void sub_1AD8E6734(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<fst::FstWithLabel<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::vector(_QWORD *a1, unint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<quasar::TextTokenizer::Token>::__vallocate[abi:ne180100](a1, a2);
    v6 = a1[1];
    v7 = v6 + 32 * a2;
    do
    {
      *(_DWORD *)v6 = *(_DWORD *)a3;
      *(_QWORD *)(v6 + 8) = *(_QWORD *)(a3 + 8);
      v8 = *(_QWORD *)(a3 + 16);
      *(_QWORD *)(v6 + 16) = v8;
      if (v8)
      {
        v9 = (unint64_t *)(v8 + 8);
        do
          v10 = __ldxr(v9);
        while (__stxr(v10 + 1, v9));
      }
      *(_DWORD *)(v6 + 24) = *(_DWORD *)(a3 + 24);
      v6 += 32;
    }
    while (v6 != v7);
    a1[1] = v7;
  }
  return a1;
}

void sub_1AD8E682C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<fst::FstWithLabel<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void std::vector<fst::FstWithLabel<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;
  char *v6;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v6 = v4 - 32;
        std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)(v4 - 24));
        v4 = v6;
      }
      while (v6 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t std::vector<fst::FstWithLabel<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::__insert_with_size[abi:ne180100]<std::__wrap_iter<fst::FstWithLabel<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> const*>,std::__wrap_iter<fst::FstWithLabel<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> const*>>(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  _QWORD v27[5];

  v5 = a2;
  if (a5 >= 1)
  {
    v7 = a3;
    v11 = a1[2];
    v9 = (uint64_t)(a1 + 2);
    v10 = v11;
    v12 = *(_QWORD *)(v9 - 8);
    if (a5 <= (uint64_t)(v11 - v12) >> 5)
    {
      v19 = v12 - a2;
      if (a5 <= (uint64_t)(v12 - a2) >> 5)
      {
        v20 = a3 + 32 * a5;
      }
      else
      {
        v20 = a3 + 32 * (v19 >> 5);
        std::vector<fst::FstWithLabel<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::__construct_at_end<std::__wrap_iter<fst::FstWithLabel<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> const*>,std::__wrap_iter<fst::FstWithLabel<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> const*>>((uint64_t)a1, v20, a4);
        if (v19 < 1)
          return v5;
      }
      std::vector<fst::FstWithLabel<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::__move_range((uint64_t)a1, v5, v12, v5 + 32 * a5);
      std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::__wrap_iter<fst::FstWithLabel<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> const*>,std::__wrap_iter<fst::FstWithLabel<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> const*>,fst::FstWithLabel<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>*,0>(v7, v20, v5);
    }
    else
    {
      v13 = *a1;
      v14 = a5 + ((uint64_t)(v12 - *a1) >> 5);
      if (v14 >> 59)
        std::vector<int>::__throw_length_error[abi:ne180100]();
      v15 = (a2 - v13) >> 5;
      v16 = v10 - v13;
      if (v16 >> 4 > v14)
        v14 = v16 >> 4;
      if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFE0)
        v17 = 0x7FFFFFFFFFFFFFFLL;
      else
        v17 = v14;
      v27[4] = v9;
      if (v17)
        v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::TextTokenizer::Token>>(v9, v17);
      else
        v18 = 0;
      v21 = &v18[32 * v15];
      v27[0] = v18;
      v27[1] = v21;
      v27[3] = &v18[32 * v17];
      v22 = &v21[32 * a5];
      do
      {
        *(_DWORD *)v21 = *(_DWORD *)v7;
        *((_QWORD *)v21 + 1) = *(_QWORD *)(v7 + 8);
        v23 = *(_QWORD *)(v7 + 16);
        *((_QWORD *)v21 + 2) = v23;
        if (v23)
        {
          v24 = (unint64_t *)(v23 + 8);
          do
            v25 = __ldxr(v24);
          while (__stxr(v25 + 1, v24));
        }
        *((_DWORD *)v21 + 6) = *(_DWORD *)(v7 + 24);
        v21 += 32;
        v7 += 32;
      }
      while (v21 != v22);
      v27[2] = v22;
      v5 = std::vector<fst::FstWithLabel<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::__swap_out_circular_buffer(a1, v27, v5);
      std::__split_buffer<fst::FstWithLabel<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::~__split_buffer((uint64_t)v27);
    }
  }
  return v5;
}

void sub_1AD8E6A54(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<fst::FstWithLabel<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<fst::FstWithLabel<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::__construct_at_end<std::__wrap_iter<fst::FstWithLabel<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> const*>,std::__wrap_iter<fst::FstWithLabel<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> const*>>(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  v3 = *(_QWORD *)(result + 8);
  while (a2 != a3)
  {
    *(_DWORD *)v3 = *(_DWORD *)a2;
    v4 = *(_QWORD *)(a2 + 16);
    *(_QWORD *)(v3 + 8) = *(_QWORD *)(a2 + 8);
    *(_QWORD *)(v3 + 16) = v4;
    if (v4)
    {
      v5 = (unint64_t *)(v4 + 8);
      do
        v6 = __ldxr(v5);
      while (__stxr(v6 + 1, v5));
    }
    *(_DWORD *)(v3 + 24) = *(_DWORD *)(a2 + 24);
    a2 += 32;
    v3 += 32;
  }
  *(_QWORD *)(result + 8) = v3;
  return result;
}

uint64_t std::vector<fst::FstWithLabel<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::__move_range(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;

  v6 = *(_QWORD *)(a1 + 8);
  v7 = a2 + v6 - a4;
  v8 = v6;
  if (v7 < a3)
  {
    v9 = v7;
    v8 = *(_QWORD *)(a1 + 8);
    do
    {
      *(_DWORD *)v8 = *(_DWORD *)v9;
      *(_OWORD *)(v8 + 8) = *(_OWORD *)(v9 + 8);
      *(_QWORD *)(v9 + 8) = 0;
      *(_QWORD *)(v9 + 16) = 0;
      *(_DWORD *)(v8 + 24) = *(_DWORD *)(v9 + 24);
      v8 += 32;
      v9 += 32;
    }
    while (v9 < a3);
  }
  *(_QWORD *)(a1 + 8) = v8;
  return std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__move_backward_loop<std::_ClassicAlgPolicy>,std::__move_backward_trivial>,fst::FstWithLabel<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> *,fst::FstWithLabel<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> *,fst::FstWithLabel<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> *,0>(a2, v7, v6);
}

uint64_t std::vector<fst::FstWithLabel<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  result = a2[1];
  v5 = *a1;
  v6 = result;
  if (*a1 != a3)
  {
    v7 = a3;
    v6 = a2[1];
    do
    {
      v8 = *(_DWORD *)(v7 - 32);
      v7 -= 32;
      *(_DWORD *)(v6 - 32) = v8;
      v6 -= 32;
      *(_OWORD *)(v6 + 8) = *(_OWORD *)(v7 + 8);
      *(_QWORD *)(v7 + 8) = 0;
      *(_QWORD *)(v7 + 16) = 0;
      *(_DWORD *)(v6 + 24) = *(_DWORD *)(v7 + 24);
    }
    while (v7 != v5);
  }
  a2[1] = v6;
  v9 = a1[1];
  v10 = a2[2];
  if (v9 != a3)
  {
    do
    {
      *(_DWORD *)v10 = *(_DWORD *)a3;
      *(_OWORD *)(v10 + 8) = *(_OWORD *)(a3 + 8);
      *(_QWORD *)(a3 + 8) = 0;
      *(_QWORD *)(a3 + 16) = 0;
      *(_DWORD *)(v10 + 24) = *(_DWORD *)(a3 + 24);
      v10 += 32;
      a3 += 32;
    }
    while (a3 != v9);
    v6 = a2[1];
  }
  a2[2] = v10;
  v11 = *a1;
  *a1 = v6;
  a2[1] = v11;
  v12 = a1[1];
  a1[1] = a2[2];
  a2[2] = v12;
  v13 = a1[2];
  a1[2] = a2[3];
  a2[3] = v13;
  *a2 = a2[1];
  return result;
}

uint64_t std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__move_backward_loop<std::_ClassicAlgPolicy>,std::__move_backward_trivial>,fst::FstWithLabel<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> *,fst::FstWithLabel<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> *,fst::FstWithLabel<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> *,0>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  int v7;

  if (a2 != a1)
  {
    v6 = a2;
    do
    {
      v7 = *(_DWORD *)(v6 - 32);
      v6 -= 32;
      *(_DWORD *)(a3 - 32) = v7;
      a3 -= 32;
      std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100](a3 + 8, (__int128 *)(v6 + 8));
      *(_DWORD *)(a3 + 24) = *(_DWORD *)(v6 + 24);
    }
    while (v6 != a1);
  }
  return a2;
}

uint64_t std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::__wrap_iter<fst::FstWithLabel<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> const*>,std::__wrap_iter<fst::FstWithLabel<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> const*>,fst::FstWithLabel<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>*,0>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;

  v4 = a1;
  if (a1 == a2)
    return a1;
  v5 = a2;
  do
  {
    *(_DWORD *)a3 = *(_DWORD *)v4;
    std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::operator=[abi:ne180100]((_QWORD *)(a3 + 8), (uint64_t *)(v4 + 8));
    *(_DWORD *)(a3 + 24) = *(_DWORD *)(v4 + 24);
    a3 += 32;
    v4 += 32;
  }
  while (v4 != v5);
  return v5;
}

uint64_t std::__split_buffer<fst::FstWithLabel<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 32;
    std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](i - 24);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

std::vector<int>::pointer std::vector<int>::__insert_with_size[abi:ne180100]<std::__tree_const_iterator<int,std::__tree_node<int,void *> *,long>,std::__tree_const_iterator<int,std::__tree_node<int,void *> *,long>>(std::vector<int> *a1, int *a2, int *a3, _QWORD *a4, uint64_t a5)
{
  std::vector<int>::pointer v5;
  int *v7;
  std::allocator<int> *p_end_cap;
  int *v10;
  int *value;
  unint64_t v12;
  std::vector<int>::pointer begin;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  int *v18;
  std::vector<int>::pointer end;
  uint64_t v21;
  int *v22;
  int *v23;
  int *v24;
  int v25;
  int *v26;
  int *v27;
  int *v28;
  int *v29;
  BOOL v30;
  std::__split_buffer<int> __v;

  v5 = a2;
  if (a5 >= 1)
  {
    v7 = a3;
    value = a1->__end_cap_.__value_;
    p_end_cap = (std::allocator<int> *)&a1->__end_cap_;
    v10 = value;
    v12 = *((_QWORD *)p_end_cap - 1);
    if (a5 <= (uint64_t)((uint64_t)value - v12) >> 2)
    {
      __v.__first_ = a3;
      std::__advance[abi:ne180100]<std::__tree_const_iterator<int,std::__tree_node<int,void *> *,long>>(&__v, a5);
      end = a1->__end_;
      v21 = (char *)end - (char *)v5;
      if (a5 > end - v5)
      {
        __v.__first_ = v7;
        std::__advance[abi:ne180100]<std::__tree_const_iterator<int,std::__tree_node<int,void *> *,long>>(&__v, v21 >> 2);
        std::vector<int>::__construct_at_end<std::__tree_const_iterator<int,std::__tree_node<int,void *> *,long>,std::__tree_const_iterator<int,std::__tree_node<int,void *> *,long>>((uint64_t)a1, __v.__first_, a4);
        if (v21 < 1)
          return v5;
        end = a1->__end_;
      }
      v22 = &v5[a5];
      v23 = &end[-a5];
      v24 = end;
      if ((unint64_t)v23 < v12)
      {
        v24 = end;
        do
        {
          v25 = *v23++;
          *v24++ = v25;
        }
        while ((unint64_t)v23 < v12);
      }
      a1->__end_ = v24;
      if (end != v22)
        memmove(&end[-(end - v22)], v5, (char *)end - (char *)v22);
      std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::__tree_const_iterator<int,std::__tree_node<int,void *> *,long>,std::__tree_const_iterator<int,std::__tree_node<int,void *> *,long>,int *,0>(v7, __v.__first_, v5);
    }
    else
    {
      begin = a1->__begin_;
      v14 = a5 + ((uint64_t)(v12 - (unint64_t)a1->__begin_) >> 2);
      if (v14 >> 62)
        std::vector<int>::__throw_length_error[abi:ne180100]();
      v15 = a2 - begin;
      v16 = (char *)v10 - (char *)begin;
      if (v16 >> 1 > v14)
        v14 = v16 >> 1;
      if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFFCLL)
        v17 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v17 = v14;
      __v.__end_cap_.__value_ = p_end_cap;
      if (v17)
        v18 = (int *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)p_end_cap, v17);
      else
        v18 = 0;
      v26 = &v18[v15];
      __v.__first_ = v18;
      __v.__begin_ = v26;
      __v.__end_cap_.__value_ = &v18[v17];
      v27 = &v26[a5];
      do
      {
        *v26++ = v7[7];
        v28 = (int *)*((_QWORD *)v7 + 1);
        if (v28)
        {
          do
          {
            v29 = v28;
            v28 = *(int **)v28;
          }
          while (v28);
        }
        else
        {
          do
          {
            v29 = (int *)*((_QWORD *)v7 + 2);
            v30 = *(_QWORD *)v29 == (_QWORD)v7;
            v7 = v29;
          }
          while (!v30);
        }
        v7 = v29;
      }
      while (v26 != v27);
      __v.__end_ = v27;
      v5 = std::vector<int>::__swap_out_circular_buffer(a1, &__v, v5);
      if (__v.__end_ != __v.__begin_)
        __v.__end_ = (std::__split_buffer<int>::pointer)((char *)__v.__end_
                                                       + (((char *)__v.__begin_ - (char *)__v.__end_ + 3) & 0xFFFFFFFFFFFFFFFCLL));
      if (__v.__first_)
        operator delete(__v.__first_);
    }
  }
  return v5;
}

void sub_1AD8E6F14(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t std::vector<int>::__construct_at_end<std::__tree_const_iterator<int,std::__tree_node<int,void *> *,long>,std::__tree_const_iterator<int,std::__tree_node<int,void *> *,long>>(uint64_t result, _QWORD *a2, _QWORD *a3)
{
  _DWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  BOOL v6;

  v3 = *(_DWORD **)(result + 8);
  if (a2 != a3)
  {
    do
    {
      *v3 = *((_DWORD *)a2 + 7);
      v4 = (_QWORD *)a2[1];
      if (v4)
      {
        do
        {
          v5 = v4;
          v4 = (_QWORD *)*v4;
        }
        while (v4);
      }
      else
      {
        do
        {
          v5 = (_QWORD *)a2[2];
          v6 = *v5 == (_QWORD)a2;
          a2 = v5;
        }
        while (!v6);
      }
      ++v3;
      a2 = v5;
    }
    while (v5 != a3);
  }
  *(_QWORD *)(result + 8) = v3;
  return result;
}

_QWORD **std::__advance[abi:ne180100]<std::__tree_const_iterator<int,std::__tree_node<int,void *> *,long>>(_QWORD **result, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  BOOL v5;
  _QWORD *v7;
  _QWORD *v8;

  if (a2 < 0)
  {
    v7 = *result;
    do
    {
      v8 = (_QWORD *)*v7;
      if (*v7)
      {
        do
        {
          v4 = v8;
          v8 = (_QWORD *)v8[1];
        }
        while (v8);
      }
      else
      {
        do
        {
          v4 = (_QWORD *)v7[2];
          v5 = *v4 == (_QWORD)v7;
          v7 = v4;
        }
        while (v5);
      }
      v7 = v4;
    }
    while (!__CFADD__(a2++, 1));
  }
  else
  {
    if (!a2)
      return result;
    v2 = *result;
    do
    {
      v3 = (_QWORD *)v2[1];
      if (v3)
      {
        do
        {
          v4 = v3;
          v3 = (_QWORD *)*v3;
        }
        while (v3);
      }
      else
      {
        do
        {
          v4 = (_QWORD *)v2[2];
          v5 = *v4 == (_QWORD)v2;
          v2 = v4;
        }
        while (!v5);
      }
      v2 = v4;
    }
    while (a2-- > 1);
  }
  *result = v4;
  return result;
}

_QWORD *std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::__tree_const_iterator<int,std::__tree_node<int,void *> *,long>,std::__tree_const_iterator<int,std::__tree_node<int,void *> *,long>,int *,0>(_QWORD *result, _QWORD *a2, _DWORD *a3)
{
  _QWORD *v3;
  _QWORD *v4;
  BOOL v5;

  if (result != a2)
  {
    do
    {
      *a3 = *((_DWORD *)result + 7);
      v3 = (_QWORD *)result[1];
      if (v3)
      {
        do
        {
          v4 = v3;
          v3 = (_QWORD *)*v3;
        }
        while (v3);
      }
      else
      {
        do
        {
          v4 = (_QWORD *)result[2];
          v5 = *v4 == (_QWORD)result;
          result = v4;
        }
        while (!v5);
      }
      ++a3;
      result = v4;
    }
    while (v4 != a2);
    return a2;
  }
  return result;
}

uint64_t fst::BackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::BackoffDeterministicOnDemandFst(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  char *v15;
  char *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  int *v22;
  char *v23;
  char *v24;
  char *v25;
  char *v26;
  char *v27;
  _QWORD *v28;
  int32x2_t *v29;
  uint64_t v30;
  int32x2_t *v31;
  _QWORD *v32;
  _QWORD v35[34];
  char *v36;
  char *v37;
  char *v38;

  *(_QWORD *)a1 = &unk_1E5D22268;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  std::vector<fst::FstWithLabel<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::__init_with_size[abi:ne180100]<fst::FstWithLabel<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>*,fst::FstWithLabel<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>*>((_QWORD *)(a1 + 8), *a2, a2[1], (a2[1] - *a2) >> 5);
  *(_QWORD *)(a1 + 48) = 0;
  *(_WORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((_QWORD *)(a1 + 48), *(const void **)a4, *(_QWORD *)(a4 + 8), (uint64_t)(*(_QWORD *)(a4 + 8) - *(_QWORD *)a4) >> 2);
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_DWORD *)(a1 + 104) = 1065353216;
  *(_QWORD *)(a1 + 112) = 0;
  v7 = (_QWORD *)(a1 + 112);
  v36 = 0;
  v37 = 0;
  v38 = 0;
  v8 = *a2;
  v9 = a2[1];
  if (*a2 == v9)
  {
    v27 = 0;
    v26 = 0;
    do
    {
LABEL_29:
      (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)v27 + 1) + 64))(*((_QWORD *)v27 + 1), 268697600, 1);
      (*(void (**)(_QWORD, uint64_t, _QWORD))(**((_QWORD **)v27 + 1) + 64))(*((_QWORD *)v27 + 1), 268697600, 0);
      v27 += 16;
    }
    while (v27 != v26);
    if ((unint64_t)(v37 - v36) <= 0x10)
    {
      if (v37 == v36)
        std::vector<std::pair<int,int>>::__throw_out_of_range[abi:ne180100]();
      v30 = *((_QWORD *)v36 + 1);
      *(_QWORD *)(a1 + 32) = v30;
      v31 = (int32x2_t *)operator new();
      fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::SortedMatcher(v31, v30, 0, 1);
      *(_QWORD *)(a1 + 112) = v31;
      v7 = (_QWORD *)(a1 + 128);
    }
    else
    {
      v28 = (_QWORD *)operator new();
      fst::ReplaceFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::ReplaceFst(v28, &v36, a3);
      *(_QWORD *)(a1 + 32) = v28;
      *(_WORD *)(a1 + 40) = 257;
      v29 = (int32x2_t *)operator new();
      fst::SortedMatcher<fst::ReplaceFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::SortedMatcher(v29, (uint64_t)v28, 0, 1);
      *(_QWORD *)(a1 + 128) = v29;
    }
    *v7 = 0;
    *(_QWORD *)(a1 + 120) = 0;
    *(_QWORD *)(a1 + 136) = 0;
  }
  else
  {
    v10 = 1;
    while (1)
    {
      if ((v10 & 1) != 0)
      {
        v11 = *(_QWORD *)(v8 + 8);
        if (!v11 || (*(unsigned int (**)(uint64_t))(*(_QWORD *)v11 + 24))(v11) == -1)
          break;
      }
      v12 = *(_QWORD *)(v8 + 8);
      if (!v12 || (*(unsigned int (**)(uint64_t))(*(_QWORD *)v12 + 24))(v12) == -1)
      {
        std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::__emplace_unique_key_args<int,int const&>(a1 + 72, (int *)v8, (_DWORD *)v8);
      }
      else
      {
        v13 = *(_QWORD *)(v8 + 8);
        v14 = *(_DWORD *)v8;
        v15 = v37;
        if (v37 >= v38)
        {
          v17 = (v37 - v36) >> 4;
          v18 = v17 + 1;
          if ((unint64_t)(v17 + 1) >> 60)
            std::vector<int>::__throw_length_error[abi:ne180100]();
          v19 = v38 - v36;
          if ((v38 - v36) >> 3 > v18)
            v18 = v19 >> 3;
          if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFF0)
            v20 = 0xFFFFFFFFFFFFFFFLL;
          else
            v20 = v18;
          if (v20)
            v21 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<int,unsigned long>>>((uint64_t)&v38, v20);
          else
            v21 = 0;
          v22 = (int *)&v21[16 * v17];
          *v22 = v14;
          *((_QWORD *)v22 + 1) = v13;
          v24 = v36;
          v23 = v37;
          v25 = (char *)v22;
          if (v37 != v36)
          {
            do
            {
              *((_OWORD *)v25 - 1) = *((_OWORD *)v23 - 1);
              v25 -= 16;
              v23 -= 16;
            }
            while (v23 != v24);
            v23 = v36;
          }
          v16 = (char *)(v22 + 4);
          v36 = v25;
          v37 = (char *)(v22 + 4);
          v38 = &v21[16 * v20];
          if (v23)
            operator delete(v23);
        }
        else
        {
          *(_DWORD *)v37 = v14;
          *((_QWORD *)v15 + 1) = v13;
          v16 = v15 + 16;
        }
        v37 = v16;
      }
      v10 = 0;
      v8 += 32;
      if (v8 == v9)
      {
        v27 = v36;
        v26 = v37;
        goto LABEL_29;
      }
    }
    if (kaldi::g_kaldi_verbose_level >= -1)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v35);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)"the base LM is NULL or empty", 28);
      kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)v35);
    }
    v32 = (_QWORD *)operator new();
    fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::VectorFst(v32);
    *(_QWORD *)(a1 + 32) = v32;
    *(_BYTE *)(a1 + 41) = 1;
  }
  if (v36)
  {
    v37 = v36;
    operator delete(v36);
  }
  return a1;
}

void sub_1AD8E7440(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, void **a11)
{
  uint64_t v11;
  void **v12;
  uint64_t v13;
  uint64_t v14;
  void *v16;
  void *v17;

  kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)&a11);
  v16 = *(void **)(v14 - 112);
  if (v16)
  {
    *(_QWORD *)(v14 - 104) = v16;
    operator delete(v16);
  }
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(v13);
  v17 = *v12;
  if (*v12)
  {
    *(_QWORD *)(v11 + 56) = v17;
    operator delete(v17);
  }
  a11 = a9;
  std::vector<fst::FstWithLabel<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::__destroy_vector::operator()[abi:ne180100](&a11);
  _Unwind_Resume(a1);
}

uint64_t fst::BackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Start(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 24))(*(_QWORD *)(a1 + 32));
}

float fst::BackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Final(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  __int128 v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  float v18;
  __int128 v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  __int128 v35;
  __int128 v36;
  int v37;

  v36 = 0uLL;
  if (*a3)
  {
    _ZNSt3__115allocate_sharedB8ne180100IN3fst14BackoffArcInfoENS_9allocatorIS2_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(&v35);
    v6 = v35;
    v35 = 0uLL;
    v7 = (std::__shared_weak_count *)*((_QWORD *)&v36 + 1);
    v36 = v6;
    if (v7)
    {
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
    v10 = (std::__shared_weak_count *)*((_QWORD *)&v35 + 1);
    if (*((_QWORD *)&v35 + 1))
    {
      v11 = (unint64_t *)(*((_QWORD *)&v35 + 1) + 8);
      do
        v12 = __ldaxr(v11);
      while (__stlxr(v12 - 1, v11));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
    v35 = v36;
    if (*((_QWORD *)&v36 + 1))
    {
      v13 = (unint64_t *)(*((_QWORD *)&v36 + 1) + 8);
      do
        v14 = __ldxr(v13);
      while (__stxr(v14 + 1, v13));
    }
    std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100]((uint64_t)a3, &v35);
    v15 = (std::__shared_weak_count *)*((_QWORD *)&v35 + 1);
    if (*((_QWORD *)&v35 + 1))
    {
      v16 = (unint64_t *)(*((_QWORD *)&v35 + 1) + 8);
      do
        v17 = __ldaxr(v16);
      while (__stlxr(v17 - 1, v16));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
        std::__shared_weak_count::__release_weak(v15);
      }
    }
  }
  v18 = fst::BackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::FinalNoPhiState(a1, a2, (uint64_t)&v36);
  *(float *)&v35 = v18;
  v37 = 2139095040;
  if (v18 == INFINITY)
  {
    if (*a3)
    {
      _ZNSt3__115allocate_sharedB8ne180100IN3fst14BackoffArcInfoENS_9allocatorIS2_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(&v35);
      v19 = v35;
      v35 = 0uLL;
      v20 = (std::__shared_weak_count *)*((_QWORD *)&v36 + 1);
      v36 = v19;
      if (v20)
      {
        v21 = (unint64_t *)&v20->__shared_owners_;
        do
          v22 = __ldaxr(v21);
        while (__stlxr(v22 - 1, v21));
        if (!v22)
        {
          ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
          std::__shared_weak_count::__release_weak(v20);
        }
      }
      v23 = (std::__shared_weak_count *)*((_QWORD *)&v35 + 1);
      if (*((_QWORD *)&v35 + 1))
      {
        v24 = (unint64_t *)(*((_QWORD *)&v35 + 1) + 8);
        do
          v25 = __ldaxr(v24);
        while (__stlxr(v25 - 1, v24));
        if (!v25)
        {
          ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
          std::__shared_weak_count::__release_weak(v23);
        }
      }
      v35 = v36;
      if (*((_QWORD *)&v36 + 1))
      {
        v26 = (unint64_t *)(*((_QWORD *)&v36 + 1) + 8);
        do
          v27 = __ldxr(v26);
        while (__stxr(v27 + 1, v26));
      }
      std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100]((uint64_t)a3, &v35);
      v28 = (std::__shared_weak_count *)*((_QWORD *)&v35 + 1);
      if (*((_QWORD *)&v35 + 1))
      {
        v29 = (unint64_t *)(*((_QWORD *)&v35 + 1) + 8);
        do
          v30 = __ldaxr(v29);
        while (__stlxr(v30 - 1, v29));
        if (!v30)
        {
          ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
          std::__shared_weak_count::__release_weak(v28);
        }
      }
    }
    v18 = fst::BackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::FinalUsingPhiState(a1, a2, (uint64_t)&v36);
  }
  v31 = (std::__shared_weak_count *)*((_QWORD *)&v36 + 1);
  if (*((_QWORD *)&v36 + 1))
  {
    v32 = (unint64_t *)(*((_QWORD *)&v36 + 1) + 8);
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
  }
  return v18;
}

void sub_1AD8E77C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

float fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::Final(uint64_t a1, uint64_t a2)
{
  float v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t v7;
  std::__shared_weak_count *v8;

  v7 = 0;
  v8 = 0;
  v2 = (*(float (**)(uint64_t, uint64_t, uint64_t *))(*(_QWORD *)a1 + 8))(a1, a2, &v7);
  v3 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  return v2;
}

void sub_1AD8E7860(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t fst::BackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::GetArc(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4, _QWORD *a5)
{
  __int128 v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  _DWORD *v22;
  _DWORD *v23;
  float v24;
  uint64_t v25;
  uint64_t BackoffState;
  float v27;
  uint64_t v29;
  uint64_t v30;
  float v31;
  float v32;
  float v33;
  BOOL v34;
  float v35;
  BOOL v36;
  float v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  __int128 v42;
  __int128 v43;
  unsigned int v44;

  v44 = a3;
  v43 = 0uLL;
  if (*a5)
  {
    _ZNSt3__115allocate_sharedB8ne180100IN3fst14BackoffArcInfoENS_9allocatorIS2_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(&v42);
    v9 = v42;
    v42 = 0uLL;
    v10 = (std::__shared_weak_count *)*((_QWORD *)&v43 + 1);
    v43 = v9;
    if (v10)
    {
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v12 = __ldaxr(p_shared_owners);
      while (__stlxr(v12 - 1, p_shared_owners));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
    v13 = (std::__shared_weak_count *)*((_QWORD *)&v42 + 1);
    if (*((_QWORD *)&v42 + 1))
    {
      v14 = (unint64_t *)(*((_QWORD *)&v42 + 1) + 8);
      do
        v15 = __ldaxr(v14);
      while (__stlxr(v15 - 1, v14));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
    }
    v42 = v43;
    if (*((_QWORD *)&v43 + 1))
    {
      v16 = (unint64_t *)(*((_QWORD *)&v43 + 1) + 8);
      do
        v17 = __ldxr(v16);
      while (__stxr(v17 + 1, v16));
    }
    std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100]((uint64_t)a5, &v42);
    v18 = (std::__shared_weak_count *)*((_QWORD *)&v42 + 1);
    if (*((_QWORD *)&v42 + 1))
    {
      v19 = (unint64_t *)(*((_QWORD *)&v42 + 1) + 8);
      do
        v20 = __ldaxr(v19);
      while (__stlxr(v20 - 1, v19));
      if (!v20)
      {
        ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
        std::__shared_weak_count::__release_weak(v18);
      }
    }
  }
  if (std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>((_QWORD *)(a1 + 72), (int *)&v44))
  {
    goto LABEL_21;
  }
  if ((fst::BackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::GetNonPhiArc(a1, a2, v44, a4, (uint64_t)&v43) & 1) != 0)goto LABEL_61;
  v22 = *(_DWORD **)(a1 + 48);
  v23 = *(_DWORD **)(a1 + 56);
  if (v22 == v23)
  {
LABEL_21:
    v21 = 0;
    goto LABEL_62;
  }
  while ((_DWORD)a2 == -1)
  {
LABEL_44:
    if (++v22 == v23)
      goto LABEL_21;
  }
  v24 = 0.0;
  v25 = a2;
  while (1)
  {
    LODWORD(v42) = *v22;
    if (!std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>((_QWORD *)(a1 + 72), (int *)&v42))
    {
      if (*(_BYTE *)(a1 + 40))
      {
        fst::SortedMatcher<fst::ReplaceFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::SetState(*(_QWORD *)(a1 + 128), v25);
        if (!fst::SortedMatcher<fst::ReplaceFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::Find(*(_QWORD *)(a1 + 128), v42))goto LABEL_27;
        v29 = (uint64_t)fst::SortedMatcher<fst::ReplaceFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::Value(*(_QWORD *)(a1 + 128));
      }
      else
      {
        fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::SetState(*(_QWORD *)(a1 + 112), v25);
        if (!fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Find(*(_QWORD *)(a1 + 112), v42))goto LABEL_27;
        v29 = fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Value(*(_QWORD *)(a1 + 112));
      }
      v30 = *(unsigned int *)(v29 + 12);
      if ((_DWORD)v30 != -1)
      {
        v31 = *(float *)(v29 + 8);
        if (fst::BackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::GetNonPhiArc(a1, v30, v44, a4, (uint64_t)&v43))break;
      }
    }
LABEL_27:
    BackoffState = fst::BackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::GetBackoffState(a1, v25, &v42);
    v25 = BackoffState;
    v27 = NAN;
    if (v24 != -INFINITY)
    {
      v27 = NAN;
      if (*(float *)&v42 != -INFINITY)
      {
        v27 = INFINITY;
        if (*(float *)&v42 != INFINITY && v24 != INFINITY)
          v27 = v24 + *(float *)&v42;
      }
    }
    v24 = v27;
    if ((_DWORD)BackoffState == -1)
      goto LABEL_44;
  }
  v32 = *(float *)(a4 + 8);
  v33 = NAN;
  if (v32 != -INFINITY && v31 != -INFINITY)
  {
    v34 = v32 == INFINITY || v31 == INFINITY;
    v35 = v31 + v32;
    if (v34)
      v35 = INFINITY;
    v33 = NAN;
    if (v35 != -INFINITY && v24 != -INFINITY)
    {
      v33 = INFINITY;
      v36 = v35 == INFINITY || v24 == INFINITY;
      v37 = v24 + v35;
      if (!v36)
        v33 = v37;
    }
  }
  *(float *)(a4 + 8) = v33;
LABEL_61:
  v21 = 1;
LABEL_62:
  v38 = (std::__shared_weak_count *)*((_QWORD *)&v43 + 1);
  if (*((_QWORD *)&v43 + 1))
  {
    v39 = (unint64_t *)(*((_QWORD *)&v43 + 1) + 8);
    do
      v40 = __ldaxr(v39);
    while (__stlxr(v40 - 1, v39));
    if (!v40)
    {
      ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
      std::__shared_weak_count::__release_weak(v38);
    }
  }
  return v21;
}

void sub_1AD8E7C04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::GetArc(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v9;
  std::__shared_weak_count *v10;

  v9 = 0;
  v10 = 0;
  v4 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t *))(*(_QWORD *)a1 + 24))(a1, a2, a3, a4, &v9);
  v5 = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  return v4;
}

void sub_1AD8E7C98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void fst::BackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::~BackoffDeterministicOnDemandFst(uint64_t a1)
{
  fst::BackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::~BackoffDeterministicOnDemandFst(a1);
  JUMPOUT(0x1AF44D190);
}

_QWORD *std::vector<fst::FstWithLabel<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::__init_with_size[abi:ne180100]<fst::FstWithLabel<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>*,fst::FstWithLabel<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>*>(_QWORD *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v6;

  if (a4)
  {
    v6 = (uint64_t)result;
    std::vector<quasar::TextTokenizer::Token>::__vallocate[abi:ne180100](result, a4);
    return (_QWORD *)std::vector<fst::FstWithLabel<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::__construct_at_end<std::__wrap_iter<fst::FstWithLabel<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> const*>,std::__wrap_iter<fst::FstWithLabel<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> const*>>(v6, a2, a3);
  }
  return result;
}

void sub_1AD8E7D38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<fst::FstWithLabel<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

_QWORD *fst::ReplaceFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::ReplaceFst(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;

  v6 = operator new();
  fst::ReplaceFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::ReplaceFstImpl(v6, a2, a3);
  *a1 = &unk_1E5D19E60;
  a1[1] = v6;
  return a1;
}

void sub_1AD8E7DB4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10B3C4062370947);
  _Unwind_Resume(a1);
}

_QWORD *fst::ReplaceFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::~ReplaceFst(_QWORD *a1)
{
  _DWORD *v2;
  int v3;

  *a1 = &unk_1E5D263C8;
  v2 = (_DWORD *)a1[1];
  if (v2)
  {
    v3 = v2[14] - 1;
    v2[14] = v3;
    if (!v3)
      (*(void (**)(_DWORD *))(*(_QWORD *)v2 + 8))(v2);
  }
  return a1;
}

void fst::ReplaceFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::~ReplaceFst(_QWORD *a1)
{
  _DWORD *v1;
  int v2;

  *a1 = &unk_1E5D263C8;
  v1 = (_DWORD *)a1[1];
  if (v1)
  {
    v2 = v1[14] - 1;
    v1[14] = v2;
    if (!v2)
      (*(void (**)(_DWORD *))(*(_QWORD *)v1 + 8))(v1);
  }
  JUMPOUT(0x1AF44D190);
}

uint64_t fst::ImplToFst<fst::ReplaceFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::HasSequentialStates(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8));
}

uint64_t fst::ImplToFst<fst::ReplaceFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Start(uint64_t a1)
{
  return fst::ReplaceFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Start(*(_QWORD *)(a1 + 8));
}

float fst::ImplToFst<fst::ReplaceFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Final(uint64_t a1, int a2)
{
  return fst::ReplaceFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Final(*(_QWORD *)(a1 + 8), a2);
}

uint64_t fst::ImplToFst<fst::ReplaceFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::NumArcs(uint64_t a1, int a2)
{
  return fst::ReplaceFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::NumArcs(*(_QWORD *)(a1 + 8), a2);
}

uint64_t fst::ImplToFst<fst::ReplaceFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::NumInputEpsilons(uint64_t a1, int a2)
{
  return fst::ReplaceFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::NumInputEpsilons(*(_QWORD *)(a1 + 8), a2);
}

uint64_t fst::ImplToFst<fst::ReplaceFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::NumOutputEpsilons(uint64_t a1, int a2)
{
  return fst::ReplaceFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::NumOutputEpsilons(*(_QWORD *)(a1 + 8), a2);
}

uint64_t fst::ImplToFst<fst::ReplaceFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Properties(uint64_t a1, uint64_t a2, int a3)
{
  unint64_t v5;
  uint64_t v7;

  if (!a3)
    return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 8) + 32))(*(_QWORD *)(a1 + 8), a2);
  v7 = 0;
  v5 = fst::TestProperties<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>(a1, a2, &v7);
  *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) & (~v7 | 4) | v7 & v5;
  return v5 & a2;
}

uint64_t fst::ImplToFst<fst::ReplaceFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Type(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8) + 16;
}

_QWORD *fst::ReplaceFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Copy(uint64_t a1, int a2)
{
  _QWORD *v4;

  v4 = (_QWORD *)operator new();
  fst::ImplToFst<fst::ReplaceFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::ImplToFst(v4, a1, a2);
  *v4 = &unk_1E5D19E60;
  return v4;
}

void sub_1AD8E7FC0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0xA1C40BD48D6D6);
  _Unwind_Resume(a1);
}

uint64_t fst::ImplToFst<fst::ReplaceFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::InputSymbols(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 8) + 40);
}

uint64_t fst::ImplToFst<fst::ReplaceFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::OutputSymbols(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 8) + 48);
}

uint64_t fst::ReplaceFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::InitStateIterator(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;

  v4 = operator new();
  *(_QWORD *)v4 = &unk_1E5D20028;
  *(_QWORD *)(v4 + 8) = a1;
  v5 = *a1;
  *(_QWORD *)(v4 + 16) = a1[1];
  *(_DWORD *)(v4 + 24) = 0;
  result = (*(uint64_t (**)(uint64_t *))(v5 + 24))(a1);
  *(_QWORD *)v4 = &unk_1E5D1C1A8;
  *a2 = v4;
  return result;
}

void sub_1AD8E807C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10E1C408BA93049);
  _Unwind_Resume(a1);
}

uint64_t fst::ReplaceFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::InitArcIterator(uint64_t a1, int a2, _QWORD *a3)
{
  return fst::ReplaceFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::InitArcIterator(*(uint64_t **)(a1 + 8), a2, a3);
}

uint64_t fst::ReplaceFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::InitMatcher(_QWORD *a1, int a2)
{
  fst *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t (*v8)(void);
  void *__p[2];
  char v10;
  char v11;

  if (*(_BYTE *)(a1[1] + 160))
    goto LABEL_2;
  if (a2 == 1)
  {
    v8 = *(uint64_t (**)(void))(*a1 + 64);
  }
  else
  {
    if (a2)
      goto LABEL_2;
    v8 = *(uint64_t (**)(void))(*a1 + 64);
  }
  if (v8())
  {
    v4 = operator new();
    fst::ReplaceFstMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::ReplaceFstMatcher(v4, (uint64_t)a1, a2);
    return v4;
  }
LABEL_2:
  if (FLAGS_v >= 2)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "INFO");
    v2 = fst::LogMessage::LogMessage((fst *)&v11, (uint64_t)__p);
    v3 = (_QWORD *)fst::cerr(v2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"Not using replace matcher", 25);
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v11);
    if (v10 < 0)
      operator delete(__p[0]);
  }
  return 0;
}

void sub_1AD8E81B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  uint64_t v18;

  MEMORY[0x1AF44D190](v18, 0x10E1C40D49367F0);
  _Unwind_Resume(a1);
}

_QWORD *fst::ReplaceFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::ReplaceFstImpl(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  int v17;
  int v18;
  uint64_t v19;
  _BOOL4 v20;
  _BOOL4 v21;
  unint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char *v29;
  char *v30;
  char *v31;
  char *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  int v37;
  int v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t *v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  char *v52;
  uint64_t *v53;
  char *v54;
  char *v55;
  uint64_t v56;
  _BOOL4 v57;
  _BOOL4 v58;
  _BOOL4 v59;
  uint64_t v60;
  uint64_t v61;
  std::string::size_type size;
  std::string::size_type v63;
  void *v64;
  uint64_t v65;
  unint64_t v66;
  int64_t v67;
  unint64_t v68;
  char *v69;
  uint64_t *v70;
  uint64_t v71;
  fst *v72;
  const fst::SymbolTable *v73;
  int v74;
  fst *v75;
  _QWORD *v76;
  _QWORD *v77;
  void *v78;
  fst *v79;
  const fst::SymbolTable *v80;
  int v81;
  fst *v82;
  _QWORD *v83;
  _QWORD *v84;
  _QWORD *v85;
  void *v86;
  int v87;
  fst *v88;
  _QWORD *v89;
  _QWORD *v90;
  int v91;
  int v92;
  int v93;
  int v94;
  uint64_t v95;
  int v96;
  int v97;
  uint64_t v98;
  char v99;
  fst *v100;
  _QWORD *v101;
  _QWORD *v102;
  char *v103;
  uint64_t v104;
  int v106;
  int v107;
  uint64_t v108;
  char **v109;
  uint64_t **v110;
  uint64_t v111;
  uint64_t v112;
  _QWORD *v114;
  void *v115[2];
  char v116;
  char v117;
  void *v118[2];
  char v119;
  void *__p[2];
  char v121;
  char v122;
  _QWORD v123[2];
  char v124;
  char v125;
  _QWORD v126[2];
  char v127;
  char v128;
  _QWORD v129[2];
  char v130;
  char v131;
  std::string __str;
  _BYTE v133[9];

  v4 = (_QWORD *)a1;
  v5 = fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::CacheBaseImpl(a1, a3);
  *(_QWORD *)v5 = &unk_1E5D1E630;
  *(_QWORD *)(v5 + 132) = *(_QWORD *)(a3 + 32);
  *(_OWORD *)(v5 + 144) = *(_OWORD *)(a3 + 40);
  v112 = a3;
  v6 = *(_QWORD **)(a3 + 64);
  if (!v6)
  {
    v6 = (_QWORD *)operator new();
    fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,long>::DefaultReplaceStateTable(v6);
  }
  v4[23] = 0;
  v4[22] = v4 + 23;
  v4[21] = v6;
  v4[24] = 0;
  *(_OWORD *)(v4 + 25) = 0u;
  v110 = (uint64_t **)(v4 + 22);
  v111 = (uint64_t)(v4 + 25);
  *(_OWORD *)(v4 + 27) = 0u;
  *((_DWORD *)v4 + 58) = 1065353216;
  v4[30] = 0;
  v109 = (char **)(v4 + 30);
  v4[31] = 0;
  v4[32] = 0;
  v114 = v4;
  std::string::basic_string[abi:ne180100]<0>(&__str, "replace");
  std::string::operator=((std::string *)(v4 + 2), &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if (!v4[18])
    *((_DWORD *)v4 + 33) = 1;
  if (!v4[19])
    *((_DWORD *)v4 + 34) = 1;
  if (a2[1] != *a2)
  {
    v7 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*a2 + 8) + 112))(*(_QWORD *)(*a2 + 8));
    v8 = v4[5];
    if (v8 != v7)
    {
      if (v8)
        (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
      if (v7)
        v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 16))(v7);
      else
        v9 = 0;
      v4[5] = v9;
    }
    v10 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*a2 + 8) + 120))(*(_QWORD *)(*a2 + 8));
    v11 = v4[6];
    if (v11 != v10)
    {
      if (v11)
        (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
      if (v10)
        v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 16))(v10);
      else
        v12 = 0;
      v4[6] = v12;
    }
  }
  v13 = (int *)*a2;
  v14 = a2[1] - *a2;
  if (v14)
  {
    v15 = v14 >> 4;
    if (v15 <= 1)
      v16 = 1;
    else
      v16 = v15;
    v17 = 1;
    LOBYTE(v18) = 1;
    do
    {
      v19 = *v13;
      v13 += 4;
      v20 = v19 > 0;
      v18 = (v19 < 0) & v18;
      v21 = v15 >= v19 && v20;
      v17 &= v21;
      --v16;
    }
    while (v16);
  }
  else
  {
    v18 = 1;
    v17 = 1;
  }
  memset(&__str, 0, sizeof(__str));
  v108 = (uint64_t)(v4 + 32);
  v23 = (_QWORD *)v4[31];
  v22 = v4[32];
  if ((unint64_t)v23 >= v22)
  {
    v25 = ((char *)v23 - *v109) >> 3;
    if ((unint64_t)(v25 + 1) >> 61)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v26 = v22 - (_QWORD)*v109;
    v27 = v26 >> 2;
    if (v26 >> 2 <= (unint64_t)(v25 + 1))
      v27 = v25 + 1;
    if ((unint64_t)v26 >= 0x7FFFFFFFFFFFFFF8)
      v28 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v28 = v27;
    if (v28)
      v29 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>(v108, v28);
    else
      v29 = 0;
    v30 = &v29[8 * v25];
    v31 = &v29[8 * v28];
    *(_QWORD *)v30 = 0;
    v24 = v30 + 8;
    v33 = (char *)v4[30];
    v32 = (char *)v4[31];
    if (v32 != v33)
    {
      do
      {
        v34 = *((_QWORD *)v32 - 1);
        v32 -= 8;
        *((_QWORD *)v30 - 1) = v34;
        v30 -= 8;
      }
      while (v32 != v33);
      v32 = *v109;
    }
    v4[30] = v30;
    v4[31] = v24;
    v4[32] = v31;
    if (v32)
      operator delete(v32);
  }
  else
  {
    *v23 = 0;
    v24 = v23 + 1;
  }
  v106 = v18;
  v107 = v17;
  v4[31] = v24;
  v35 = *a2;
  if (a2[1] != *a2)
  {
    v36 = 0;
    v37 = 1;
    v38 = 1;
    v39 = 1;
    while (1)
    {
      LODWORD(v115[0]) = 0;
      v40 = v35 + 16 * v36;
      LODWORD(v115[0]) = *(_DWORD *)v40;
      v41 = *(_QWORD *)(v40 + 8);
      v43 = v4[30];
      v42 = v4[31];
      v118[0] = v115;
      *((_DWORD *)std::__hash_table<std::__hash_value_type<int,float>,std::__unordered_map_hasher<int,std::__hash_value_type<int,float>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,float>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,float>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int &&>,std::tuple<>>(v111, (int *)v115, (uint64_t)&std::piecewise_construct, (_DWORD **)v118)+ 5) = (unint64_t)(v42 - v43) >> 3;
      std::__tree<int>::__emplace_unique_key_args<int,int const&>(v110, (int *)v115, v115);
      v44 = v41;
      if (!*(_BYTE *)(v112 + 56))
        v44 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v41 + 88))(v41, 0);
      v46 = (uint64_t *)v114[31];
      v45 = v114[32];
      if ((unint64_t)v46 >= v45)
      {
        v48 = ((char *)v46 - *v109) >> 3;
        if ((unint64_t)(v48 + 1) >> 61)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v49 = v45 - (_QWORD)*v109;
        v50 = v49 >> 2;
        if (v49 >> 2 <= (unint64_t)(v48 + 1))
          v50 = v48 + 1;
        if ((unint64_t)v49 >= 0x7FFFFFFFFFFFFFF8)
          v51 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v51 = v50;
        if (v51)
          v52 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>(v108, v51);
        else
          v52 = 0;
        v53 = (uint64_t *)&v52[8 * v48];
        *v53 = v44;
        v47 = v53 + 1;
        v55 = (char *)v114[30];
        v54 = (char *)v114[31];
        if (v54 != v55)
        {
          do
          {
            v56 = *((_QWORD *)v54 - 1);
            v54 -= 8;
            *--v53 = v56;
          }
          while (v54 != v55);
          v54 = *v109;
        }
        v114[30] = v53;
        v114[31] = v47;
        v114[32] = &v52[8 * v51];
        if (v54)
          operator delete(v54);
      }
      else
      {
        *v46 = v44;
        v47 = v46 + 1;
      }
      v114[31] = v47;
      v57 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v41 + 24))(v41) != -1;
      v58 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v41 + 64))(v41, 0x10000000, 0) != 0;
      v59 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v41 + 64))(v41, 0x40000000, 0) != 0;
      v60 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v41 + 64))(v41, 0x3FFFFFFF0004, 0);
      v61 = v60;
      size = __str.__r_.__value_.__l.__size_;
      if (__str.__r_.__value_.__l.__size_ >= __str.__r_.__value_.__r.__words[2])
      {
        v64 = (void *)__str.__r_.__value_.__r.__words[0];
        v65 = (uint64_t)(__str.__r_.__value_.__l.__size_ - __str.__r_.__value_.__r.__words[0]) >> 3;
        v66 = v65 + 1;
        if ((unint64_t)(v65 + 1) >> 61)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v67 = __str.__r_.__value_.__r.__words[2] - __str.__r_.__value_.__r.__words[0];
        if ((uint64_t)(__str.__r_.__value_.__r.__words[2] - __str.__r_.__value_.__r.__words[0]) >> 2 > v66)
          v66 = v67 >> 2;
        if ((unint64_t)v67 >= 0x7FFFFFFFFFFFFFF8)
          v68 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v68 = v66;
        if (v68)
        {
          v69 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)&__str.__r_.__value_.__r.__words[2], v68);
          size = __str.__r_.__value_.__l.__size_;
          v64 = (void *)__str.__r_.__value_.__r.__words[0];
        }
        else
        {
          v69 = 0;
        }
        v70 = (uint64_t *)&v69[8 * v65];
        *v70 = v61;
        v63 = (std::string::size_type)(v70 + 1);
        while ((void *)size != v64)
        {
          v71 = *(_QWORD *)(size - 8);
          size -= 8;
          *--v70 = v71;
        }
        __str.__r_.__value_.__r.__words[0] = (std::string::size_type)v70;
        __str.__r_.__value_.__l.__size_ = v63;
        __str.__r_.__value_.__r.__words[2] = (std::string::size_type)&v69[8 * v68];
        if (v64)
          operator delete(v64);
      }
      else
      {
        *(_QWORD *)__str.__r_.__value_.__l.__size_ = v60;
        v63 = size + 8;
      }
      __str.__r_.__value_.__l.__size_ = v63;
      if (!v36)
        goto LABEL_110;
      v72 = (fst *)v114[5];
      v73 = (const fst::SymbolTable *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v41 + 112))(v41);
      if (!fst::CompatSymbols(v72, v73, (const fst::SymbolTable *)1))
        break;
LABEL_99:
      v79 = (fst *)v114[6];
      v80 = (const fst::SymbolTable *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v41 + 120))(v41);
      if (!fst::CompatSymbols(v79, v80, (const fst::SymbolTable *)1))
      {
        v81 = FLAGS_fst_error_fatal;
        if (FLAGS_fst_error_fatal)
        {
          std::string::basic_string[abi:ne180100]<0>(v123, "FATAL");
          v82 = fst::LogMessage::LogMessage((fst *)&v125, (uint64_t)v123);
        }
        else
        {
          std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
          v82 = fst::LogMessage::LogMessage((fst *)&v122, (uint64_t)__p);
        }
        v83 = (_QWORD *)fst::cerr(v82);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v83, (uint64_t)"ReplaceFstImpl: output symbols of Fst ", 38);
        v84 = (_QWORD *)std::ostream::operator<<();
        v85 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v84, (uint64_t)" does not match output symbols of base Fst ", 43);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v85, (uint64_t)"(0'th fst)", 10);
        if (v81)
        {
          fst::LogMessage::~LogMessage((fst::LogMessage *)&v125);
          if (v124 < 0)
          {
            v86 = (void *)v123[0];
            goto LABEL_108;
          }
        }
        else
        {
          fst::LogMessage::~LogMessage((fst::LogMessage *)&v122);
          if (v121 < 0)
          {
            v86 = __p[0];
LABEL_108:
            operator delete(v86);
          }
        }
        v114[1] |= 4uLL;
      }
LABEL_110:
      v37 &= v57;
      v39 &= v58;
      v38 &= v59;
      ++v36;
      v4 = v114;
      v35 = *a2;
      if (v36 >= (uint64_t)(a2[1] - *a2) >> 4)
        goto LABEL_113;
    }
    v74 = FLAGS_fst_error_fatal;
    if (FLAGS_fst_error_fatal)
    {
      std::string::basic_string[abi:ne180100]<0>(v129, "FATAL");
      v75 = fst::LogMessage::LogMessage((fst *)&v131, (uint64_t)v129);
    }
    else
    {
      std::string::basic_string[abi:ne180100]<0>(v126, "ERROR");
      v75 = fst::LogMessage::LogMessage((fst *)&v128, (uint64_t)v126);
    }
    v76 = (_QWORD *)fst::cerr(v75);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v76, (uint64_t)"ReplaceFstImpl: input symbols of Fst ", 37);
    v77 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v77, (uint64_t)" does not match input symbols of base Fst (0'th fst)", 52);
    if (v74)
    {
      fst::LogMessage::~LogMessage((fst::LogMessage *)&v131);
      if (v130 < 0)
      {
        v78 = (void *)v129[0];
LABEL_97:
        operator delete(v78);
      }
    }
    else
    {
      fst::LogMessage::~LogMessage((fst::LogMessage *)&v128);
      if (v127 < 0)
      {
        v78 = (void *)v126[0];
        goto LABEL_97;
      }
    }
    v114[1] |= 4uLL;
    goto LABEL_99;
  }
  v39 = 1;
  v38 = 1;
  v37 = 1;
LABEL_113:
  LODWORD(v115[0]) = *(_QWORD *)(v112 + 24);
  v118[0] = v115;
  v87 = *((_DWORD *)std::__hash_table<std::__hash_value_type<int,float>,std::__unordered_map_hasher<int,std::__hash_value_type<int,float>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,float>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,float>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int &&>,std::tuple<>>(v111, (int *)v115, (uint64_t)&std::piecewise_construct, (_DWORD **)v118)+ 5);
  if (!v87 && v4[31] - v4[30] >= 9uLL)
  {
    if (FLAGS_fst_error_fatal)
      std::string::basic_string[abi:ne180100]<0>(v118, "FATAL");
    else
      std::string::basic_string[abi:ne180100]<0>(v118, "ERROR");
    v88 = fst::LogMessage::LogMessage((fst *)v133, (uint64_t)v118);
    v89 = (_QWORD *)fst::cerr(v88);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v89, (uint64_t)"ReplaceFstImpl: no Fst corresponding to root label '", 52);
    v90 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v90, (uint64_t)"' in the input tuple vector", 27);
    fst::LogMessage::~LogMessage((fst::LogMessage *)v133);
    if (v119 < 0)
      operator delete(v118[0]);
    v4[1] |= 4uLL;
  }
  if (v87 <= 1)
    v91 = 1;
  else
    v91 = v87;
  *((_DWORD *)v4 + 66) = v91;
  v93 = *((_DWORD *)v4 + 33);
  v92 = *((_DWORD *)v4 + 34);
  v94 = (v93 - 2) < 2 || v93 == 4 && v4[18] != -1 || (v92 & 0xFFFFFFFE) == 2;
  v95 = v4[1] & 4 | fst::ReplaceProperties((uint64_t **)&__str, (v91 - 1), (v93 & 0xFFFFFFFD) == 1, (v92 & 0xFFFFFFFD) == 1, v94, v37);
  v4[1] = v95;
  if (v39 && (v4[17] & 0xFFFFFFFD) == 1)
  {
    v96 = v106;
    if ((*((_DWORD *)v4 + 33) & 0xFFFFFFFD) != 1)
      v96 = 1;
    if ((v96 | v107) == 1)
    {
      v95 |= 0x10000000uLL;
      v4[1] = v95;
    }
  }
  if (v38 && (*((_DWORD *)v4 + 34) - 1) <= 1)
  {
    v97 = v106;
    if ((*((_DWORD *)v4 + 33) - 3) < 0xFFFFFFFE)
      v97 = 1;
    if ((v97 | v107) == 1)
      v4[1] = v95 | 0x40000000;
  }
  v98 = (*(uint64_t (**)(_QWORD *, uint64_t))(*v4 + 32))(v4, 1342177280);
  v99 = v37 ^ 1;
  if (!v98)
    v99 = 1;
  *((_BYTE *)v4 + 160) = v99;
  if (FLAGS_v >= 2)
  {
    std::string::basic_string[abi:ne180100]<0>(v115, "INFO");
    v100 = fst::LogMessage::LogMessage((fst *)&v117, (uint64_t)v115);
    v101 = (_QWORD *)fst::cerr(v100);
    v102 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v101, (uint64_t)"ReplaceFstImpl::ReplaceFstImpl: always_cache = ", 47);
    v103 = *((_BYTE *)v4 + 160) ? "true" : "false";
    v104 = *((_BYTE *)v4 + 160) ? 4 : 5;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v102, (uint64_t)v103, v104);
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v117);
    if (v116 < 0)
      operator delete(v115[0]);
  }
  if (__str.__r_.__value_.__r.__words[0])
  {
    __str.__r_.__value_.__l.__size_ = __str.__r_.__value_.__r.__words[0];
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  return v4;
}

void sub_1AD8E8C64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, _QWORD **a9, uint64_t a10, uint64_t a11, uint64_t a12, void **a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, _QWORD *a18, uint64_t a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,int a25,__int16 a26,char a27,char a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,int a41,__int16 a42,char a43,char a44,uint64_t a45,uint64_t a46,int a47,__int16 a48,char a49,char a50)
{
  uint64_t v50;
  void *v52;
  void *v53;

  fst::LogMessage::~LogMessage((fst::LogMessage *)(v50 - 89));
  if (a34 < 0)
    operator delete(__p);
  v52 = *(void **)(v50 - 120);
  if (v52)
  {
    *(_QWORD *)(v50 - 112) = v52;
    operator delete(v52);
  }
  v53 = *a13;
  if (*a13)
  {
    a18[31] = v53;
    operator delete(v53);
  }
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(a15);
  std::__tree<int>::destroy(a14, *a9);
  fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::~CacheBaseImpl(a18);
  _Unwind_Resume(a1);
}

void fst::ReplaceFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::~ReplaceFstImpl(uint64_t a1)
{
  fst::ReplaceFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::~ReplaceFstImpl(a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t fst::ReplaceFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Properties(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 32))(a1, 0x3FFFFFFF0007);
}

uint64_t fst::ReplaceFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Properties(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;

  if ((a2 & 4) != 0)
  {
    v4 = a1[30];
    if ((unint64_t)(a1[31] - v4) >= 9)
    {
      v5 = 1;
      do
      {
        if ((*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(**(_QWORD **)(v4 + 8 * v5) + 64))(*(_QWORD *)(v4 + 8 * v5), 4, 0))
        {
          a1[1] |= 4uLL;
        }
        ++v5;
        v4 = a1[30];
      }
      while (v5 < (a1[31] - v4) >> 3);
    }
  }
  return a1[1] & a2;
}

_QWORD *fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,long>::DefaultReplaceStateTable(_QWORD *a1)
{
  a1[1] = a1;
  a1[2] = a1;
  std::unordered_set<int,fst::CompactHashBiTable<int,fst::ReplaceStateTuple<int,long>,fst::ReplaceHash<int,long>,std::equal_to<fst::ReplaceStateTuple<int,long>>,(fst::HSType)1>::HashFunc,fst::CompactHashBiTable<int,fst::ReplaceStateTuple<int,long>,fst::ReplaceHash<int,long>,std::equal_to<fst::ReplaceStateTuple<int,long>>,(fst::HSType)1>::HashEqual,std::allocator<int>>::unordered_set((uint64_t)(a1 + 3), 0, a1 + 1, a1 + 2);
  a1[15] = a1 + 14;
  a1[10] = 0;
  a1[11] = 0;
  a1[12] = 0;
  a1[16] = a1 + 14;
  std::unordered_set<long,fst::CompactHashBiTable<long,fst::ReplaceStackPrefix<int,int>,fst::ReplaceStackPrefixHash<int,int>,std::equal_to<fst::ReplaceStackPrefix<int,int>>,(fst::HSType)1>::HashFunc,fst::CompactHashBiTable<long,fst::ReplaceStackPrefix<int,int>,fst::ReplaceStackPrefixHash<int,int>,std::equal_to<fst::ReplaceStackPrefix<int,int>>,(fst::HSType)1>::HashEqual,std::allocator<long>>::unordered_set((uint64_t)(a1 + 17), 0, a1 + 15, a1 + 16);
  a1[24] = 0;
  a1[25] = 0;
  a1[26] = 0;
  return a1;
}

void sub_1AD8E8F78(_Unwind_Exception *a1)
{
  uint64_t v1;

  fst::CompactHashStateTable<fst::ReplaceStateTuple<int,long>,fst::ReplaceHash<int,long>>::~CompactHashStateTable(v1);
  _Unwind_Resume(a1);
}

uint64_t fst::CompactHashStateTable<fst::ReplaceStateTuple<int,long>,fst::ReplaceHash<int,long>>::~CompactHashStateTable(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 80);
  if (v2)
  {
    *(_QWORD *)(a1 + 88) = v2;
    operator delete(v2);
  }
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(a1 + 24);
  return a1;
}

uint64_t std::unordered_set<int,fst::CompactHashBiTable<int,fst::ReplaceStateTuple<int,long>,fst::ReplaceHash<int,long>,std::equal_to<fst::ReplaceStateTuple<int,long>>,(fst::HSType)1>::HashFunc,fst::CompactHashBiTable<int,fst::ReplaceStateTuple<int,long>,fst::ReplaceHash<int,long>,std::equal_to<fst::ReplaceStateTuple<int,long>>,(fst::HSType)1>::HashEqual,std::allocator<int>>::unordered_set(uint64_t a1, size_t a2, _QWORD *a3, _QWORD *a4)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_QWORD *)(a1 + 32) = *a3;
  *(_DWORD *)(a1 + 40) = 1065353216;
  *(_QWORD *)(a1 + 48) = *a4;
  std::__hash_table<int,fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashFunc,fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashEqual,std::allocator<int>>::__rehash<true>(a1, a2);
  return a1;
}

void sub_1AD8E9008(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

uint64_t std::unordered_set<long,fst::CompactHashBiTable<long,fst::ReplaceStackPrefix<int,int>,fst::ReplaceStackPrefixHash<int,int>,std::equal_to<fst::ReplaceStackPrefix<int,int>>,(fst::HSType)1>::HashFunc,fst::CompactHashBiTable<long,fst::ReplaceStackPrefix<int,int>,fst::ReplaceStackPrefixHash<int,int>,std::equal_to<fst::ReplaceStackPrefix<int,int>>,(fst::HSType)1>::HashEqual,std::allocator<long>>::unordered_set(uint64_t a1, size_t a2, _QWORD *a3, _QWORD *a4)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_QWORD *)(a1 + 32) = *a3;
  *(_DWORD *)(a1 + 40) = 1065353216;
  *(_QWORD *)(a1 + 48) = *a4;
  std::__hash_table<int,fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashFunc,fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashEqual,std::allocator<int>>::__rehash<true>(a1, a2);
  return a1;
}

void sub_1AD8E9060(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

uint64_t std::vector<fst::ReplaceStackPrefix<int,int>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<fst::ReplaceStackPrefix<int,int>>,std::reverse_iterator<fst::ReplaceStackPrefix<int,int>*>,std::reverse_iterator<fst::ReplaceStackPrefix<int,int>*>,std::reverse_iterator<fst::ReplaceStackPrefix<int,int>*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<fst::ReplaceStackPrefix<int,int>>,std::reverse_iterator<fst::ReplaceStackPrefix<int,int>*>,std::reverse_iterator<fst::ReplaceStackPrefix<int,int>*>,std::reverse_iterator<fst::ReplaceStackPrefix<int,int>*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v9;
  _QWORD *v10;
  const void *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v15[3];
  char v16;
  __int128 v17;
  __int128 v18;

  v7 = a7;
  *(_QWORD *)&v18 = a6;
  *((_QWORD *)&v18 + 1) = a7;
  v17 = v18;
  v15[0] = a1;
  v15[1] = &v17;
  v15[2] = &v18;
  v16 = 0;
  if (a3 == a5)
  {
    v13 = a6;
  }
  else
  {
    v9 = a3;
    do
    {
      *(_QWORD *)(v7 - 24) = 0;
      *(_QWORD *)(v7 - 16) = 0;
      v10 = (_QWORD *)(v7 - 24);
      v10[2] = 0;
      v11 = *(const void **)(v9 - 24);
      v12 = *(_QWORD *)(v9 - 16);
      v9 -= 24;
      std::vector<fst::ReplaceStackPrefix<int,int>::PrefixTuple,std::allocator<fst::ReplaceStackPrefix<int,int>::PrefixTuple>>::__init_with_size[abi:ne180100]<fst::ReplaceStackPrefix<int,int>::PrefixTuple*,fst::ReplaceStackPrefix<int,int>::PrefixTuple*>(v10, v11, v12, (v12 - (uint64_t)v11) >> 3);
      v7 = *((_QWORD *)&v18 + 1) - 24;
      *((_QWORD *)&v18 + 1) -= 24;
    }
    while (v9 != a5);
    v13 = v18;
  }
  v16 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<fst::ReplaceStackPrefix<int,int>>,std::reverse_iterator<fst::ReplaceStackPrefix<int,int>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v15);
  return v13;
}

void sub_1AD8E9198(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<fst::ReplaceStackPrefix<int,int>>,std::reverse_iterator<fst::ReplaceStackPrefix<int,int>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<fst::ReplaceStackPrefix<int,int>::PrefixTuple,std::allocator<fst::ReplaceStackPrefix<int,int>::PrefixTuple>>::__init_with_size[abi:ne180100]<fst::ReplaceStackPrefix<int,int>::PrefixTuple*,fst::ReplaceStackPrefix<int,int>::PrefixTuple*>(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<kaldi::CuWorkspace *>::__vallocate[abi:ne180100](result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1AD8E9208(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<fst::ReplaceStackPrefix<int,int>>,std::reverse_iterator<fst::ReplaceStackPrefix<int,int>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<int>>,std::reverse_iterator<std::vector<int>*>>::operator()[abi:ne180100](a1);
  return a1;
}

uint64_t fst::ReplaceFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::~ReplaceFstImpl(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  _QWORD *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  void **v9;

  *(_QWORD *)a1 = &unk_1E5D1E630;
  v2 = *(_QWORD *)(a1 + 168);
  if (v2)
  {
    v9 = (void **)(v2 + 192);
    std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100](&v9);
    std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(v2 + 136);
    v3 = *(void **)(v2 + 80);
    if (v3)
    {
      *(_QWORD *)(v2 + 88) = v3;
      operator delete(v3);
    }
    std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(v2 + 24);
    MEMORY[0x1AF44D190](v2, 0x10E0C400D6CF2F0);
  }
  v4 = *(_QWORD **)(a1 + 240);
  v5 = *(_QWORD *)(a1 + 248);
  if ((unint64_t)(v5 - (_QWORD)v4) >= 9)
  {
    v6 = 1;
    do
    {
      v7 = v4[v6];
      if (v7)
      {
        (*(void (**)(_QWORD))(*(_QWORD *)v7 + 8))(v4[v6]);
        v4 = *(_QWORD **)(a1 + 240);
        v5 = *(_QWORD *)(a1 + 248);
      }
      ++v6;
    }
    while (v6 < (v5 - (uint64_t)v4) >> 3);
  }
  if (v4)
  {
    *(_QWORD *)(a1 + 248) = v4;
    operator delete(v4);
  }
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(a1 + 200);
  std::__tree<int>::destroy(a1 + 176, *(_QWORD **)(a1 + 184));
  return fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::~CacheBaseImpl((_QWORD *)a1);
}

uint64_t fst::ReplaceFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Start(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  void *Id;
  _QWORD *v7;
  unsigned int v8;
  void *__p[3];

  if (*(_BYTE *)(a1 + 60))
    return *(unsigned int *)(a1 + 64);
  if ((*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 32))(a1, 4))
  {
    *(_BYTE *)(a1 + 60) = 1;
    return *(unsigned int *)(a1 + 64);
  }
  if (*(_BYTE *)(a1 + 60))
    return *(unsigned int *)(a1 + 64);
  v3 = *(_QWORD *)(a1 + 240);
  if (*(_QWORD *)(a1 + 248) - v3 == 8)
  {
    result = 0xFFFFFFFFLL;
    *(_DWORD *)(a1 + 64) = -1;
    *(_BYTE *)(a1 + 60) = 1;
    if ((*(_DWORD *)(a1 + 68) & 0x80000000) != 0)
      *(_DWORD *)(a1 + 68) = 0;
  }
  else
  {
    v4 = *(_QWORD *)(v3 + 8 * *(int *)(a1 + 264));
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
    if ((_DWORD)result != -1)
    {
      v5 = result;
      memset(__p, 0, sizeof(__p));
      Id = (void *)fst::CompactHashBiTable<long,fst::ReplaceStackPrefix<int,int>,fst::ReplaceStackPrefixHash<int,int>,std::equal_to<fst::ReplaceStackPrefix<int,int>>,(fst::HSType)1>::FindId((_QWORD *)(*(_QWORD *)(a1 + 168) + 112), (uint64_t)__p, 1);
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
      v7 = *(_QWORD **)(a1 + 168);
      v8 = *(_DWORD *)(a1 + 264);
      __p[0] = Id;
      __p[1] = (void *)__PAIR64__(v5, v8);
      result = fst::CompactHashBiTable<int,fst::ReplaceStateTuple<int,long>,fst::ReplaceHash<int,long>,std::equal_to<fst::ReplaceStateTuple<int,long>>,(fst::HSType)1>::FindId(v7, __p, 1);
      *(_DWORD *)(a1 + 64) = result;
      *(_BYTE *)(a1 + 60) = 1;
      if (*(_DWORD *)(a1 + 68) <= (int)result)
        *(_DWORD *)(a1 + 68) = result + 1;
    }
  }
  return result;
}

void sub_1AD8E9468(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t fst::CompactHashBiTable<long,fst::ReplaceStackPrefix<int,int>,fst::ReplaceStackPrefixHash<int,int>,std::equal_to<fst::ReplaceStackPrefix<int,int>>,(fst::HSType)1>::FindId(_QWORD *a1, uint64_t a2, int a3)
{
  uint64_t v6;
  _QWORD *v7;
  uint64_t *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;

  a1[13] = a2;
  v6 = (uint64_t)(a1 + 3);
  v7 = std::__hash_table<long,fst::CompactHashBiTable<long,fst::ReplaceStackPrefix<int,int>,fst::ReplaceStackPrefixHash<int,int>,std::equal_to<fst::ReplaceStackPrefix<int,int>>,(fst::HSType)1>::HashFunc,fst::CompactHashBiTable<long,fst::ReplaceStackPrefix<int,int>,fst::ReplaceStackPrefixHash<int,int>,std::equal_to<fst::ReplaceStackPrefix<int,int>>,(fst::HSType)1>::HashEqual,std::allocator<long>>::find<long>(a1 + 3, &fst::CompactHashBiTable<long,fst::ReplaceStackPrefix<int,int>,fst::ReplaceStackPrefixHash<int,int>,std::equal_to<fst::ReplaceStackPrefix<int,int>>,(fst::HSType)1>::kCurrentKey);
  if (v7)
    return v7[2];
  if (!a3)
    return -1;
  v10 = a1[11];
  v9 = a1 + 10;
  v11 = a1[12];
  v13 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v10 - a1[10]) >> 3);
  if (v10 >= v11)
  {
    v12 = std::vector<fst::ReplaceStackPrefix<int,int>>::__push_back_slow_path<fst::ReplaceStackPrefix<int,int> const&>(v9, a2);
  }
  else
  {
    std::vector<fst::ReplaceStackPrefix<int,int>>::__construct_one_at_end[abi:ne180100]<fst::ReplaceStackPrefix<int,int> const&>((uint64_t)v9, a2);
    v12 = v10 + 24;
  }
  a1[11] = v12;
  std::__hash_table<long,fst::CompactHashBiTable<long,fst::ReplaceStackPrefix<int,int>,fst::ReplaceStackPrefixHash<int,int>,std::equal_to<fst::ReplaceStackPrefix<int,int>>,(fst::HSType)1>::HashFunc,fst::CompactHashBiTable<long,fst::ReplaceStackPrefix<int,int>,fst::ReplaceStackPrefixHash<int,int>,std::equal_to<fst::ReplaceStackPrefix<int,int>>,(fst::HSType)1>::HashEqual,std::allocator<long>>::__emplace_unique_key_args<long,long const&>(v6, (uint64_t *)&v13, &v13);
  return v13;
}

_QWORD *std::__hash_table<long,fst::CompactHashBiTable<long,fst::ReplaceStackPrefix<int,int>,fst::ReplaceStackPrefixHash<int,int>,std::equal_to<fst::ReplaceStackPrefix<int,int>>,(fst::HSType)1>::HashFunc,fst::CompactHashBiTable<long,fst::ReplaceStackPrefix<int,int>,fst::ReplaceStackPrefixHash<int,int>,std::equal_to<fst::ReplaceStackPrefix<int,int>>,(fst::HSType)1>::HashEqual,std::allocator<long>>::find<long>(_QWORD *a1, uint64_t *a2)
{
  unint64_t v4;
  int8x8_t v5;
  unint64_t v6;
  uint8x8_t v7;
  unint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t *v12;
  unint64_t v13;

  v4 = fst::CompactHashBiTable<long,fst::ReplaceStackPrefix<int,int>,fst::ReplaceStackPrefixHash<int,int>,std::equal_to<fst::ReplaceStackPrefix<int,int>>,(fst::HSType)1>::HashFunc::operator()(a1 + 4, *a2);
  v5 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v5)
    return 0;
  v6 = v4;
  v7 = (uint8x8_t)vcnt_s8(v5);
  v7.i16[0] = vaddlv_u8(v7);
  v8 = v7.u32[0];
  if (v7.u32[0] > 1uLL)
  {
    v9 = v4;
    if (v4 >= *(_QWORD *)&v5)
      v9 = v4 % *(_QWORD *)&v5;
  }
  else
  {
    v9 = (*(_QWORD *)&v5 - 1) & v4;
  }
  v10 = *(_QWORD **)(*a1 + 8 * v9);
  if (!v10)
    return 0;
  v11 = (_QWORD *)*v10;
  if (*v10)
  {
    v12 = a1 + 6;
    do
    {
      v13 = v11[1];
      if (v13 == v6)
      {
        if (fst::CompactHashBiTable<long,fst::ReplaceStackPrefix<int,int>,fst::ReplaceStackPrefixHash<int,int>,std::equal_to<fst::ReplaceStackPrefix<int,int>>,(fst::HSType)1>::HashEqual::operator()(v12, v11[2], *a2))
        {
          return v11;
        }
      }
      else
      {
        if (v8 > 1)
        {
          if (v13 >= *(_QWORD *)&v5)
            v13 %= *(_QWORD *)&v5;
        }
        else
        {
          v13 &= *(_QWORD *)&v5 - 1;
        }
        if (v13 != v9)
          return 0;
      }
      v11 = (_QWORD *)*v11;
    }
    while (v11);
  }
  return v11;
}

uint64_t fst::CompactHashBiTable<long,fst::ReplaceStackPrefix<int,int>,fst::ReplaceStackPrefixHash<int,int>,std::equal_to<fst::ReplaceStackPrefix<int,int>>,(fst::HSType)1>::HashFunc::operator()(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int *v8;

  if (a2 < -1)
    return 0;
  v2 = *a1;
  if (a2 == -1)
    v3 = *(uint64_t **)(v2 + 104);
  else
    v3 = (uint64_t *)(*(_QWORD *)(v2 + 80) + 24 * a2);
  v5 = *v3;
  result = 0;
  v6 = v3[1] - *v3;
  if (v6)
  {
    v7 = v6 >> 3;
    if (v7 <= 1)
      v7 = 1;
    v8 = (int *)(v5 + 4);
    do
    {
      result += *(v8 - 1) + 7853 * *v8;
      v8 += 2;
      --v7;
    }
    while (v7);
  }
  return result;
}

BOOL fst::CompactHashBiTable<long,fst::ReplaceStackPrefix<int,int>,fst::ReplaceStackPrefixHash<int,int>,std::equal_to<fst::ReplaceStackPrefix<int,int>>,(fst::HSType)1>::HashEqual::operator()(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  if (a2 < -1 || a3 < -1)
    return a2 == a3;
  v3 = *a1;
  v4 = *a1 + 1;
  if (a2 == -1)
    v5 = *(_QWORD *)(v3 + 104);
  else
    v5 = *(_QWORD *)(v3 + 80) + 24 * a2;
  if (a3 == -1)
    v7 = *(_QWORD *)(v3 + 104);
  else
    v7 = *(_QWORD *)(v3 + 80) + 24 * a3;
  return std::equal_to<fst::ReplaceStackPrefix<int,int>>::operator()[abi:ne180100](v4, v5, v7);
}

BOOL std::equal_to<fst::ReplaceStackPrefix<int,int>>::operator()[abi:ne180100](uint64_t a1, uint64_t a2, uint64_t a3)
{
  _DWORD *v3;
  _DWORD *v4;
  unint64_t v5;
  _DWORD *v6;
  uint64_t v7;
  int *v8;
  int *v9;
  uint64_t v10;
  unint64_t v11;
  int v12;
  int v13;
  int v14;

  v4 = *(_DWORD **)a2;
  v3 = *(_DWORD **)(a2 + 8);
  v5 = ((uint64_t)v3 - *(_QWORD *)a2) >> 3;
  v6 = *(_DWORD **)a3;
  if (v5 != (uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 3)
    return 0;
  if (v3 == v4)
    return 1;
  v7 = v5 <= 1 ? 1 : ((uint64_t)v3 - *(_QWORD *)a2) >> 3;
  if (*v4 != *v6 || v4[1] != v6[1])
    return 0;
  v8 = v6 + 3;
  v9 = v4 + 3;
  v10 = 1;
  do
  {
    v11 = v10;
    if (v7 == v10)
      break;
    if (*(v9 - 1) != *(v8 - 1))
      break;
    v13 = *v9;
    v9 += 2;
    v12 = v13;
    v14 = *v8;
    v8 += 2;
    ++v10;
  }
  while (v12 == v14);
  return v11 >= v5;
}

_QWORD *std::vector<fst::ReplaceStackPrefix<int,int>>::__construct_one_at_end[abi:ne180100]<fst::ReplaceStackPrefix<int,int> const&>(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  _QWORD *result;

  v3 = *(_QWORD **)(a1 + 8);
  *v3 = 0;
  v3[1] = 0;
  v3[2] = 0;
  result = std::vector<fst::ReplaceStackPrefix<int,int>::PrefixTuple,std::allocator<fst::ReplaceStackPrefix<int,int>::PrefixTuple>>::__init_with_size[abi:ne180100]<fst::ReplaceStackPrefix<int,int>::PrefixTuple*,fst::ReplaceStackPrefix<int,int>::PrefixTuple*>(v3, *(const void **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 3);
  *(_QWORD *)(a1 + 8) = v3 + 3;
  return result;
}

void sub_1AD8E97FC(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<fst::ReplaceStackPrefix<int,int>>::__push_back_slow_path<fst::ReplaceStackPrefix<int,int> const&>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  _QWORD v14[2];
  char *v15;
  char *v16;
  uint64_t *v17;

  v3 = *a1;
  v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL)
    std::vector<int>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x555555555555555)
    v9 = 0xAAAAAAAAAAAAAAALL;
  else
    v9 = v5;
  v17 = a1 + 2;
  if (v9)
    v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>(v7, v9);
  else
    v10 = 0;
  v11 = &v10[24 * v4];
  v14[0] = v10;
  v14[1] = v11;
  v15 = v11;
  v16 = &v10[24 * v9];
  *(_QWORD *)v11 = 0;
  *((_QWORD *)v11 + 1) = 0;
  *((_QWORD *)v11 + 2) = 0;
  std::vector<fst::ReplaceStackPrefix<int,int>::PrefixTuple,std::allocator<fst::ReplaceStackPrefix<int,int>::PrefixTuple>>::__init_with_size[abi:ne180100]<fst::ReplaceStackPrefix<int,int>::PrefixTuple*,fst::ReplaceStackPrefix<int,int>::PrefixTuple*>(v11, *(const void **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 3);
  v15 += 24;
  std::vector<fst::ReplaceStackPrefix<int,int>>::__swap_out_circular_buffer(a1, v14);
  v12 = a1[1];
  std::__split_buffer<std::vector<int>>::~__split_buffer((uint64_t)v14);
  return v12;
}

void sub_1AD8E9904(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::vector<int>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *std::__hash_table<long,fst::CompactHashBiTable<long,fst::ReplaceStackPrefix<int,int>,fst::ReplaceStackPrefixHash<int,int>,std::equal_to<fst::ReplaceStackPrefix<int,int>>,(fst::HSType)1>::HashFunc,fst::CompactHashBiTable<long,fst::ReplaceStackPrefix<int,int>,fst::ReplaceStackPrefixHash<int,int>,std::equal_to<fst::ReplaceStackPrefix<int,int>>,(fst::HSType)1>::HashEqual,std::allocator<long>>::__emplace_unique_key_args<long,long const&>(uint64_t a1, uint64_t *a2, _QWORD *a3)
{
  unint64_t v3;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  unint64_t v11;
  _QWORD **v12;
  _QWORD *i;
  unint64_t v14;
  float v15;
  float v16;
  _BOOL8 v17;
  unint64_t v18;
  unint64_t v19;
  size_t v20;
  uint64_t v21;
  _QWORD *v22;
  unint64_t v23;

  v7 = fst::CompactHashBiTable<long,fst::ReplaceStackPrefix<int,int>,fst::ReplaceStackPrefixHash<int,int>,std::equal_to<fst::ReplaceStackPrefix<int,int>>,(fst::HSType)1>::HashFunc::operator()((uint64_t *)(a1 + 32), *a2);
  v8 = v7;
  v9 = *(_QWORD *)(a1 + 8);
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    v11 = v10.u32[0];
    if (v10.u32[0] > 1uLL)
    {
      v3 = v7;
      if (v7 >= v9)
        v3 = v7 % v9;
    }
    else
    {
      v3 = (v9 - 1) & v7;
    }
    v12 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v3);
    if (v12)
    {
      for (i = *v12; i; i = (_QWORD *)*i)
      {
        v14 = i[1];
        if (v14 == v8)
        {
          if (fst::CompactHashBiTable<long,fst::ReplaceStackPrefix<int,int>,fst::ReplaceStackPrefixHash<int,int>,std::equal_to<fst::ReplaceStackPrefix<int,int>>,(fst::HSType)1>::HashEqual::operator()((uint64_t *)(a1 + 48), i[2], *a2))
          {
            return i;
          }
        }
        else
        {
          if (v11 > 1)
          {
            if (v14 >= v9)
              v14 %= v9;
          }
          else
          {
            v14 &= v9 - 1;
          }
          if (v14 != v3)
            break;
        }
      }
    }
  }
  i = operator new(0x18uLL);
  *i = 0;
  i[1] = v8;
  i[2] = *a3;
  v15 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v16 = *(float *)(a1 + 40);
  if (!v9 || (float)(v16 * (float)v9) < v15)
  {
    v17 = 1;
    if (v9 >= 3)
      v17 = (v9 & (v9 - 1)) != 0;
    v18 = v17 | (2 * v9);
    v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19)
      v20 = v19;
    else
      v20 = v18;
    std::__hash_table<int,fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashFunc,fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashEqual,std::allocator<int>>::__rehash<true>(a1, v20);
    v9 = *(_QWORD *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9)
        v3 = v8 % v9;
      else
        v3 = v8;
    }
    else
    {
      v3 = (v9 - 1) & v8;
    }
  }
  v21 = *(_QWORD *)a1;
  v22 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v22)
  {
    *i = *v22;
LABEL_38:
    *v22 = i;
    goto LABEL_39;
  }
  *i = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = i;
  *(_QWORD *)(v21 + 8 * v3) = a1 + 16;
  if (*i)
  {
    v23 = *(_QWORD *)(*i + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v23 >= v9)
        v23 %= v9;
    }
    else
    {
      v23 &= v9 - 1;
    }
    v22 = (_QWORD *)(*(_QWORD *)a1 + 8 * v23);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return i;
}

void sub_1AD8E9B48(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t fst::CompactHashBiTable<int,fst::ReplaceStateTuple<int,long>,fst::ReplaceHash<int,long>,std::equal_to<fst::ReplaceStateTuple<int,long>>,(fst::HSType)1>::FindId(_QWORD *a1, _OWORD *a2, int a3)
{
  uint64_t v6;
  uint64_t *v7;
  uint64_t v9;
  _OWORD *v10;
  uint64_t v11;
  unint64_t v12;
  _OWORD *v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  char *v18;
  char *v19;
  char *v20;
  char *v21;
  unsigned int v22;

  a1[13] = a2;
  v6 = (uint64_t)(a1 + 3);
  v7 = std::__hash_table<int,fst::CompactHashBiTable<int,fst::ReplaceStateTuple<int,long>,fst::ReplaceHash<int,long>,std::equal_to<fst::ReplaceStateTuple<int,long>>,(fst::HSType)1>::HashFunc,fst::CompactHashBiTable<int,fst::ReplaceStateTuple<int,long>,fst::ReplaceHash<int,long>,std::equal_to<fst::ReplaceStateTuple<int,long>>,(fst::HSType)1>::HashEqual,std::allocator<int>>::find<int>(a1 + 3, &fst::CompactHashBiTable<int,fst::ReplaceStateTuple<int,long>,fst::ReplaceHash<int,long>,std::equal_to<fst::ReplaceStateTuple<int,long>>,(fst::HSType)1>::kCurrentKey);
  if (v7)
    return *((unsigned int *)v7 + 4);
  if (!a3)
    return 0xFFFFFFFFLL;
  v9 = a1[10];
  v10 = (_OWORD *)a1[11];
  v11 = ((uint64_t)v10 - v9) >> 4;
  v22 = v11;
  v12 = a1[12];
  if ((unint64_t)v10 >= v12)
  {
    v14 = v11 + 1;
    if ((unint64_t)(v11 + 1) >> 60)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v15 = v12 - v9;
    if (v15 >> 3 > v14)
      v14 = v15 >> 3;
    if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF0)
      v16 = 0xFFFFFFFFFFFFFFFLL;
    else
      v16 = v14;
    if (v16)
      v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<int,unsigned long>>>((uint64_t)(a1 + 12), v16);
    else
      v17 = 0;
    v18 = &v17[16 * v11];
    v19 = &v17[16 * v16];
    *(_OWORD *)v18 = *a2;
    v13 = v18 + 16;
    v21 = (char *)a1[10];
    v20 = (char *)a1[11];
    if (v20 != v21)
    {
      do
      {
        *((_OWORD *)v18 - 1) = *((_OWORD *)v20 - 1);
        v18 -= 16;
        v20 -= 16;
      }
      while (v20 != v21);
      v20 = (char *)a1[10];
    }
    a1[10] = v18;
    a1[11] = v13;
    a1[12] = v19;
    if (v20)
      operator delete(v20);
  }
  else
  {
    *v10 = *a2;
    v13 = v10 + 1;
  }
  a1[11] = v13;
  std::__hash_table<int,fst::CompactHashBiTable<int,fst::ReplaceStateTuple<int,long>,fst::ReplaceHash<int,long>,std::equal_to<fst::ReplaceStateTuple<int,long>>,(fst::HSType)1>::HashFunc,fst::CompactHashBiTable<int,fst::ReplaceStateTuple<int,long>,fst::ReplaceHash<int,long>,std::equal_to<fst::ReplaceStateTuple<int,long>>,(fst::HSType)1>::HashEqual,std::allocator<int>>::__emplace_unique_key_args<int,int const&>(v6, (int *)&v22, &v22);
  return v22;
}

uint64_t *std::__hash_table<int,fst::CompactHashBiTable<int,fst::ReplaceStateTuple<int,long>,fst::ReplaceHash<int,long>,std::equal_to<fst::ReplaceStateTuple<int,long>>,(fst::HSType)1>::HashFunc,fst::CompactHashBiTable<int,fst::ReplaceStateTuple<int,long>,fst::ReplaceHash<int,long>,std::equal_to<fst::ReplaceStateTuple<int,long>>,(fst::HSType)1>::HashEqual,std::allocator<int>>::find<int>(_QWORD *a1, int *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int8x8_t v7;
  uint8x8_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t **v11;
  uint64_t *v12;
  uint64_t *v13;
  unint64_t v14;

  v3 = *a2;
  if ((int)v3 < -1)
  {
    v6 = 0;
  }
  else
  {
    v4 = a1[4];
    if ((_DWORD)v3 == -1)
      v5 = *(_QWORD *)(v4 + 104);
    else
      v5 = *(_QWORD *)(v4 + 80) + 16 * v3;
    v6 = *(_QWORD *)v5 + 7853 * *(int *)(v5 + 8) + 7867 * *(int *)(v5 + 12);
  }
  v7 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v7)
    return 0;
  v8 = (uint8x8_t)vcnt_s8(v7);
  v8.i16[0] = vaddlv_u8(v8);
  v9 = v8.u32[0];
  if (v8.u32[0] > 1uLL)
  {
    v10 = v6;
    if (v6 >= *(_QWORD *)&v7)
      v10 = v6 % *(_QWORD *)&v7;
  }
  else
  {
    v10 = (*(_QWORD *)&v7 - 1) & v6;
  }
  v11 = *(uint64_t ***)(*a1 + 8 * v10);
  if (!v11)
    return 0;
  v12 = *v11;
  if (*v11)
  {
    v13 = a1 + 6;
    do
    {
      v14 = v12[1];
      if (v14 == v6)
      {
        if (fst::CompactHashBiTable<int,fst::ReplaceStateTuple<int,long>,fst::ReplaceHash<int,long>,std::equal_to<fst::ReplaceStateTuple<int,long>>,(fst::HSType)1>::HashEqual::operator()(v13, *((_DWORD *)v12 + 4), *a2))
        {
          return v12;
        }
      }
      else
      {
        if (v9 > 1)
        {
          if (v14 >= *(_QWORD *)&v7)
            v14 %= *(_QWORD *)&v7;
        }
        else
        {
          v14 &= *(_QWORD *)&v7 - 1;
        }
        if (v14 != v10)
          return 0;
      }
      v12 = (uint64_t *)*v12;
    }
    while (v12);
  }
  return v12;
}

BOOL fst::CompactHashBiTable<int,fst::ReplaceStateTuple<int,long>,fst::ReplaceHash<int,long>,std::equal_to<fst::ReplaceStateTuple<int,long>>,(fst::HSType)1>::HashEqual::operator()(uint64_t *a1, int a2, int a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;

  if (a2 < -1 || a3 < -1)
  {
    return a2 == a3;
  }
  else
  {
    v3 = *a1;
    if (a2 == -1)
      v4 = *(_QWORD *)(v3 + 104);
    else
      v4 = *(_QWORD *)(v3 + 80) + 16 * a2;
    if (a3 == -1)
      v7 = *(_QWORD *)(v3 + 104);
    else
      v7 = *(_QWORD *)(v3 + 80) + 16 * a3;
    if (*(_QWORD *)v4 != *(_QWORD *)v7 || *(_DWORD *)(v4 + 8) != *(_DWORD *)(v7 + 8))
      return 0;
    return *(_DWORD *)(v4 + 12) == *(_DWORD *)(v7 + 12);
  }
}

void *std::__hash_table<int,fst::CompactHashBiTable<int,fst::ReplaceStateTuple<int,long>,fst::ReplaceHash<int,long>,std::equal_to<fst::ReplaceStateTuple<int,long>>,(fst::HSType)1>::HashFunc,fst::CompactHashBiTable<int,fst::ReplaceStateTuple<int,long>,fst::ReplaceHash<int,long>,std::equal_to<fst::ReplaceStateTuple<int,long>>,(fst::HSType)1>::HashEqual,std::allocator<int>>::__emplace_unique_key_args<int,int const&>(uint64_t a1, int *a2, _DWORD *a3)
{
  unint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  unint64_t v13;
  void **v14;
  void *i;
  unint64_t v16;
  float v17;
  float v18;
  _BOOL8 v19;
  unint64_t v20;
  unint64_t v21;
  size_t v22;
  uint64_t v23;
  _QWORD *v24;
  unint64_t v25;

  v7 = *a2;
  if ((int)v7 < -1)
  {
    v10 = 0;
  }
  else
  {
    v8 = *(_QWORD *)(a1 + 32);
    if ((_DWORD)v7 == -1)
      v9 = *(_QWORD *)(v8 + 104);
    else
      v9 = *(_QWORD *)(v8 + 80) + 16 * v7;
    v10 = *(_QWORD *)v9 + 7853 * *(int *)(v9 + 8) + 7867 * *(int *)(v9 + 12);
  }
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      v3 = v10;
      if (v10 >= v11)
        v3 = v10 % v11;
    }
    else
    {
      v3 = (v11 - 1) & v10;
    }
    v14 = *(void ***)(*(_QWORD *)a1 + 8 * v3);
    if (v14)
    {
      for (i = *v14; i; i = *(void **)i)
      {
        v16 = *((_QWORD *)i + 1);
        if (v16 == v10)
        {
          if (fst::CompactHashBiTable<int,fst::ReplaceStateTuple<int,long>,fst::ReplaceHash<int,long>,std::equal_to<fst::ReplaceStateTuple<int,long>>,(fst::HSType)1>::HashEqual::operator()((uint64_t *)(a1 + 48), *((_DWORD *)i + 4), *a2))
          {
            return i;
          }
        }
        else
        {
          if (v13 > 1)
          {
            if (v16 >= v11)
              v16 %= v11;
          }
          else
          {
            v16 &= v11 - 1;
          }
          if (v16 != v3)
            break;
        }
      }
    }
  }
  i = operator new(0x18uLL);
  *(_QWORD *)i = 0;
  *((_QWORD *)i + 1) = v10;
  *((_DWORD *)i + 4) = *a3;
  v17 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v18 = *(float *)(a1 + 40);
  if (!v11 || (float)(v18 * (float)v11) < v17)
  {
    v19 = 1;
    if (v11 >= 3)
      v19 = (v11 & (v11 - 1)) != 0;
    v20 = v19 | (2 * v11);
    v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21)
      v22 = v21;
    else
      v22 = v20;
    std::__hash_table<int,fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashFunc,fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashEqual,std::allocator<int>>::__rehash<true>(a1, v22);
    v11 = *(_QWORD *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
        v3 = v10 % v11;
      else
        v3 = v10;
    }
    else
    {
      v3 = (v11 - 1) & v10;
    }
  }
  v23 = *(_QWORD *)a1;
  v24 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v24)
  {
    *(_QWORD *)i = *v24;
LABEL_44:
    *v24 = i;
    goto LABEL_45;
  }
  *(_QWORD *)i = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = i;
  *(_QWORD *)(v23 + 8 * v3) = a1 + 16;
  if (*(_QWORD *)i)
  {
    v25 = *(_QWORD *)(*(_QWORD *)i + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v25 >= v11)
        v25 %= v11;
    }
    else
    {
      v25 &= v11 - 1;
    }
    v24 = (_QWORD *)(*(_QWORD *)a1 + 8 * v25);
    goto LABEL_44;
  }
LABEL_45:
  ++*(_QWORD *)(a1 + 24);
  return i;
}

void sub_1AD8EA0D0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

float fst::ReplaceFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Final(uint64_t a1, int a2)
{
  uint64_t v4;
  _DWORD **v5;
  uint64_t v6;
  float v7;
  uint64_t v8;
  uint64_t v9;
  char *MutableState;

  if (fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::HasFinal(a1, a2))
  {
    v4 = *(_QWORD *)(a1 + 120);
    if (*(_DWORD *)(v4 + 76) == a2)
      v5 = (_DWORD **)(v4 + 80);
    else
      v5 = (_DWORD **)(*(_QWORD *)(v4 + 8) + 8 * a2 + 8);
    return *(float *)*v5;
  }
  else
  {
    v6 = *(_QWORD *)(*(_QWORD *)(a1 + 168) + 80);
    if (*(_QWORD *)(v6 + 16 * a2))
    {
      v7 = INFINITY;
    }
    else
    {
      v8 = v6 + 16 * a2;
      v9 = *(_QWORD *)(*(_QWORD *)(a1 + 240) + 8 * *(int *)(v8 + 8));
      v7 = (*(float (**)(uint64_t, _QWORD))(*(_QWORD *)v9 + 32))(v9, *(unsigned int *)(v8 + 12));
    }
    if (*(_BYTE *)(a1 + 160)
      || fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::HasArcs(a1, a2))
    {
      MutableState = fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>::GetMutableState(*(_QWORD *)(a1 + 120), a2);
      *(float *)MutableState = v7;
      *((_DWORD *)MutableState + 12) |= 9u;
    }
  }
  return v7;
}

uint64_t fst::ReplaceFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::NumArcs(uint64_t a1, int a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;

  if (!fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::HasArcs(a1, a2))
  {
    if (!*(_BYTE *)(a1 + 160))
    {
      v9 = *(_OWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 168) + 80) + 16 * a2);
      if (HIDWORD(v9) == -1)
        return 0;
      v7 = *(_QWORD *)(*(_QWORD *)(a1 + 240) + 8 * SDWORD2(v9));
      v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 40))(v7);
      return v8
           + fst::ReplaceFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::ComputeFinalArc(a1, (uint64_t *)&v9, 0, 15);
    }
    fst::ReplaceFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Expand((uint64_t *)a1, a2);
  }
  v4 = *(_QWORD *)(a1 + 120);
  if (*(_DWORD *)(v4 + 76) == a2)
    v5 = v4 + 80;
  else
    v5 = *(_QWORD *)(v4 + 8) + 8 * a2 + 8;
  return (uint64_t)(*(_QWORD *)(*(_QWORD *)v5 + 32) - *(_QWORD *)(*(_QWORD *)v5 + 24)) >> 4;
}

void fst::ReplaceFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Expand(uint64_t *a1, int a2)
{
  uint64_t v4;
  char *MutableState;
  int *v6;
  char *v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  _DWORD *v12;
  unint64_t v13;
  __int128 v14;

  v14 = *(_OWORD *)(*(_QWORD *)(a1[21] + 80) + 16 * a2);
  if (HIDWORD(v14) == -1)
  {
    fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::SetArcs((uint64_t)a1, a2);
    return;
  }
  v4 = *(_QWORD *)(a1[30] + 8 * SDWORD2(v14));
  v13 = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v4 + 136))(v4);
  if (fst::ReplaceFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::ComputeFinalArc((uint64_t)a1, (uint64_t *)&v14, (uint64_t)&v8, 15))
  {
    MutableState = fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>::GetMutableState(a1[15], a2);
    fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::PushArc(MutableState, &v8);
  }
  while (1)
  {
    if (!v9)
    {
      if (v13 >= v11)
        break;
      goto LABEL_7;
    }
    if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 24))(v9) & 1) != 0)
      break;
    if (v9)
    {
      v6 = (int *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 32))(v9);
      goto LABEL_8;
    }
LABEL_7:
    v6 = (int *)(v10 + 16 * v13);
LABEL_8:
    if (fst::ReplaceFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::ComputeArc((uint64_t)a1, (uint64_t)&v14, v6, (uint64_t)&v8, 15))
    {
      v7 = fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>::GetMutableState(a1[15], a2);
      fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::PushArc(v7, &v8);
    }
    if (v9)
      (*(void (**)(uint64_t))(*(_QWORD *)v9 + 40))(v9);
    else
      ++v13;
  }
  fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::SetArcs((uint64_t)a1, a2);
  if (v9)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  }
  else if (v12)
  {
    --*v12;
  }
}

void sub_1AD8EA420(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, _DWORD *a15)
{
  if (a12)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)a12 + 8))(a12);
  }
  else if (a15)
  {
    --*a15;
  }
  _Unwind_Resume(exception_object);
}

uint64_t fst::ReplaceFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::ComputeFinalArc(uint64_t a1, uint64_t *a2, uint64_t a3, char a4)
{
  uint64_t v4;
  uint64_t v9;
  uint64_t v10;
  int v11;
  int v12;
  int v14;
  uint64_t v15;
  uint64_t Id;
  uint64_t v17;
  _QWORD *v18;
  __int128 v19;
  void *__p;
  char *v21;
  uint64_t v22;
  int v23;

  v4 = *((unsigned int *)a2 + 3);
  if ((_DWORD)v4 == -1)
    return 0;
  v9 = *(_QWORD *)(*(_QWORD *)(a1 + 240) + 8 * *((int *)a2 + 2));
  LODWORD(v19) = (*(float (**)(uint64_t, _QWORD))(*(_QWORD *)v9 + 32))(v9, *((unsigned int *)a2 + 3));
  v23 = 2139095040;
  if (*(float *)&v19 == INFINITY)
    return 0;
  v10 = *a2;
  if (!*a2)
    return 0;
  if (a3)
  {
    v11 = *(_DWORD *)(a1 + 136);
    if ((v11 & 0xFFFFFFFD) == 1)
      v12 = 0;
    else
      v12 = *(_DWORD *)(a1 + 152);
    *(_DWORD *)a3 = v12;
    if ((v11 - 1) >= 2)
      v14 = *(_DWORD *)(a1 + 152);
    else
      v14 = 0;
    *(_DWORD *)(a3 + 4) = v14;
    if ((a4 & 8) != 0)
    {
      v15 = *(_QWORD *)(*(_QWORD *)(a1 + 168) + 192) + 24 * v10;
      v21 = 0;
      v22 = 0;
      __p = 0;
      std::vector<fst::ReplaceStackPrefix<int,int>::PrefixTuple,std::allocator<fst::ReplaceStackPrefix<int,int>::PrefixTuple>>::__init_with_size[abi:ne180100]<fst::ReplaceStackPrefix<int,int>::PrefixTuple*,fst::ReplaceStackPrefix<int,int>::PrefixTuple*>(&__p, *(const void **)v15, *(_QWORD *)(v15 + 8), (uint64_t)(*(_QWORD *)(v15 + 8) - *(_QWORD *)v15) >> 3);
      v21 -= 8;
      Id = fst::CompactHashBiTable<long,fst::ReplaceStackPrefix<int,int>,fst::ReplaceStackPrefixHash<int,int>,std::equal_to<fst::ReplaceStackPrefix<int,int>>,(fst::HSType)1>::FindId((_QWORD *)(*(_QWORD *)(a1 + 168) + 112), (uint64_t)&__p, 1);
      if (__p)
      {
        v21 = (char *)__p;
        operator delete(__p);
      }
      v17 = *(_QWORD *)(v15 + 8);
      v18 = *(_QWORD **)(a1 + 168);
      *(_QWORD *)&v19 = Id;
      *((_QWORD *)&v19 + 1) = *(_QWORD *)(v17 - 8);
      *(_DWORD *)(a3 + 12) = fst::CompactHashBiTable<int,fst::ReplaceStateTuple<int,long>,fst::ReplaceHash<int,long>,std::equal_to<fst::ReplaceStateTuple<int,long>>,(fst::HSType)1>::FindId(v18, &v19, 1);
    }
    if ((a4 & 4) != 0)
      *(float *)(a3 + 8) = (*(float (**)(uint64_t, uint64_t))(*(_QWORD *)v9 + 32))(v9, v4);
  }
  return 1;
}

void sub_1AD8EA5EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t fst::ReplaceFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::ComputeArc(uint64_t a1, uint64_t a2, int *a3, uint64_t a4, int a5)
{
  BOOL v7;
  char v8;
  uint64_t v11;
  _DWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int Id;
  _QWORD *v17;
  unsigned int v18;
  unsigned int v19;
  int v20;
  int v21;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  _QWORD *v29;
  int v30;
  _QWORD *v31;
  unsigned int v32;
  unsigned int v33;
  int v34;
  void *__p;
  void *v36;
  uint64_t v37;
  __int128 v38;

  v7 = (a5 & 0xFFFFFFFA) != 0 || (*(_DWORD *)(a1 + 132) & 0xFFFFFFFD) == 1;
  if (!v7)
  {
    *(_OWORD *)a4 = *(_OWORD *)a3;
    return 1;
  }
  v8 = a5;
  v12 = a3 + 1;
  LODWORD(v11) = a3[1];
  if (!(_DWORD)v11 || (int)v11 < *(_DWORD *)(*(_QWORD *)(a1 + 176) + 28))
    goto LABEL_13;
  v13 = a1 + 184;
  v14 = *(_QWORD *)(a1 + 184);
  if (v14)
  {
    do
    {
      v15 = v14;
      v14 = *(_QWORD *)(v14 + 8);
    }
    while (v14);
  }
  else
  {
    do
    {
      v15 = *(_QWORD *)(v13 + 16);
      v7 = *(_QWORD *)v15 == v13;
      v13 = v15;
    }
    while (v7);
  }
  if ((int)v11 > *(_DWORD *)(v15 + 28))
  {
LABEL_13:
    if ((a5 & 8) != 0)
    {
      v17 = *(_QWORD **)(a1 + 168);
      v18 = *(_DWORD *)(a2 + 8);
      v19 = a3[3];
      *(_QWORD *)&v38 = *(_QWORD *)a2;
      *((_QWORD *)&v38 + 1) = __PAIR64__(v19, v18);
      Id = fst::CompactHashBiTable<int,fst::ReplaceStateTuple<int,long>,fst::ReplaceHash<int,long>,std::equal_to<fst::ReplaceStateTuple<int,long>>,(fst::HSType)1>::FindId(v17, &v38, 1);
      LODWORD(v11) = a3[1];
    }
    else
    {
      Id = -1;
    }
    v20 = *a3;
LABEL_17:
    v21 = a3[2];
    *(_DWORD *)a4 = v20;
    *(_DWORD *)(a4 + 4) = v11;
    *(_DWORD *)(a4 + 8) = v21;
LABEL_18:
    *(_DWORD *)(a4 + 12) = Id;
    return 1;
  }
  v23 = std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>((_QWORD *)(a1 + 200), a3 + 1);
  if (!v23)
  {
    if ((v8 & 8) != 0)
    {
      v31 = *(_QWORD **)(a1 + 168);
      v32 = *(_DWORD *)(a2 + 8);
      v33 = a3[3];
      *(_QWORD *)&v38 = *(_QWORD *)a2;
      *((_QWORD *)&v38 + 1) = __PAIR64__(v33, v32);
      Id = fst::CompactHashBiTable<int,fst::ReplaceStateTuple<int,long>,fst::ReplaceHash<int,long>,std::equal_to<fst::ReplaceStateTuple<int,long>>,(fst::HSType)1>::FindId(v31, &v38, 1);
    }
    else
    {
      Id = -1;
    }
    v34 = a3[2];
    *(_QWORD *)a4 = *(_QWORD *)a3;
    *(_DWORD *)(a4 + 8) = v34;
    goto LABEL_18;
  }
  v24 = *((int *)v23 + 5);
  v25 = *(_QWORD *)(*(_QWORD *)(a1 + 240) + 8 * v24);
  v26 = *(_QWORD *)(*(_QWORD *)(a1 + 168) + 192) + 24 * *(_QWORD *)a2;
  __p = 0;
  v36 = 0;
  v37 = 0;
  std::vector<fst::ReplaceStackPrefix<int,int>::PrefixTuple,std::allocator<fst::ReplaceStackPrefix<int,int>::PrefixTuple>>::__init_with_size[abi:ne180100]<fst::ReplaceStackPrefix<int,int>::PrefixTuple*,fst::ReplaceStackPrefix<int,int>::PrefixTuple*>(&__p, *(const void **)v26, *(_QWORD *)(v26 + 8), (uint64_t)(*(_QWORD *)(v26 + 8) - *(_QWORD *)v26) >> 3);
  fst::ReplaceStackPrefix<int,int>::Push(&__p, *(_DWORD *)(a2 + 8), a3[3]);
  v27 = fst::CompactHashBiTable<long,fst::ReplaceStackPrefix<int,int>,fst::ReplaceStackPrefixHash<int,int>,std::equal_to<fst::ReplaceStackPrefix<int,int>>,(fst::HSType)1>::FindId((_QWORD *)(*(_QWORD *)(a1 + 168) + 112), (uint64_t)&__p, 1);
  if (__p)
  {
    v36 = __p;
    operator delete(__p);
  }
  v28 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v25 + 24))(v25);
  if (v28 != -1)
  {
    if ((v8 & 8) != 0)
    {
      v29 = *(_QWORD **)(a1 + 168);
      *(_QWORD *)&v38 = v27;
      *((_QWORD *)&v38 + 1) = __PAIR64__(v28, v24);
      Id = fst::CompactHashBiTable<int,fst::ReplaceStateTuple<int,long>,fst::ReplaceHash<int,long>,std::equal_to<fst::ReplaceStateTuple<int,long>>,(fst::HSType)1>::FindId(v29, &v38, 1);
    }
    else
    {
      Id = -1;
    }
    LODWORD(v11) = 0;
    v30 = *(_DWORD *)(a1 + 132);
    if ((v30 & 0xFFFFFFFD) == 1)
      v20 = 0;
    else
      v20 = *a3;
    if ((v30 - 1) >= 2)
    {
      v11 = *(_QWORD *)(a1 + 144);
      if (v11 == -1)
        LODWORD(v11) = *v12;
    }
    goto LABEL_17;
  }
  return 0;
}

void sub_1AD8EA868(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void fst::ReplaceStackPrefix<int,int>::Push(void **a1, unsigned int a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  uint64_t v20;

  v8 = (unint64_t)a1[2];
  v6 = (uint64_t)(a1 + 2);
  v7 = v8;
  v9 = *(unint64_t **)(v6 - 8);
  if ((unint64_t)v9 >= v8)
  {
    v11 = ((char *)v9 - (_BYTE *)*a1) >> 3;
    if ((unint64_t)(v11 + 1) >> 61)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v12 = v7 - (_QWORD)*a1;
    v13 = v12 >> 2;
    if (v12 >> 2 <= (unint64_t)(v11 + 1))
      v13 = v11 + 1;
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8)
      v14 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v14 = v13;
    if (v14)
      v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>(v6, v14);
    else
      v15 = 0;
    v16 = &v15[8 * v11];
    v17 = &v15[8 * v14];
    *(_QWORD *)v16 = a2 | (unint64_t)(a3 << 32);
    v10 = v16 + 8;
    v19 = (char *)*a1;
    v18 = (char *)a1[1];
    if (v18 != *a1)
    {
      do
      {
        v20 = *((_QWORD *)v18 - 1);
        v18 -= 8;
        *((_QWORD *)v16 - 1) = v20;
        v16 -= 8;
      }
      while (v18 != v19);
      v18 = (char *)*a1;
    }
    *a1 = v16;
    a1[1] = v10;
    a1[2] = v17;
    if (v18)
      operator delete(v18);
  }
  else
  {
    *v9 = a2 | (unint64_t)(a3 << 32);
    v10 = v9 + 1;
  }
  a1[1] = v10;
}

uint64_t fst::ReplaceFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::NumInputEpsilons(uint64_t a1, int a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  char v9;
  uint64_t v10;
  _DWORD *v11;
  uint64_t v12;
  _BOOL4 IsNonTerminal;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  _DWORD *v17;
  unint64_t v18;
  __int128 v19;

  if (fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::HasArcs(a1, a2))
  {
LABEL_4:
    v4 = *(_QWORD *)(a1 + 120);
    if (*(_DWORD *)(v4 + 76) == a2)
      v5 = v4 + 80;
    else
      v5 = *(_QWORD *)(v4 + 8) + 8 * a2 + 8;
    return *(_QWORD *)(*(_QWORD *)v5 + 8);
  }
  if (*(_BYTE *)(a1 + 160) || !(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 32))(a1, 0x10000000))
  {
    fst::ReplaceFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Expand((uint64_t *)a1, a2);
    goto LABEL_4;
  }
  v19 = *(_OWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 168) + 80) + 16 * a2);
  if (HIDWORD(v19) == -1)
    return 0;
  v8 = *(_QWORD *)(*(_QWORD *)(a1 + 240) + 8 * SDWORD2(v19));
  if ((*(_DWORD *)(a1 + 132) & 0xFFFFFFFD) != 1)
  {
    v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 48))(v8);
    goto LABEL_31;
  }
  v18 = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v8 + 136))(v8);
  v6 = 0;
  while (1)
  {
    while (v14)
    {
      v9 = (*(uint64_t (**)())(*(_QWORD *)v14 + 24))();
      v10 = v14;
      if ((v9 & 1) != 0)
        goto LABEL_27;
      v11 = (_DWORD *)(*(uint64_t (**)(void))(*(_QWORD *)v14 + 32))();
      v10 = v14;
      if (*v11)
      {
        v12 = (*(uint64_t (**)(void))(*(_QWORD *)v14 + 32))();
        goto LABEL_20;
      }
LABEL_21:
      ++v6;
      if (!v10)
        goto LABEL_24;
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 40))(v10);
    }
    if (v18 >= v16)
      goto LABEL_29;
    if (*(_DWORD *)(v15 + 16 * v18))
      break;
    ++v6;
LABEL_24:
    ++v18;
  }
  v12 = v15 + 16 * v18;
LABEL_20:
  IsNonTerminal = fst::ReplaceFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::IsNonTerminal((_QWORD *)a1, *(_DWORD *)(v12 + 4));
  v10 = v14;
  if (IsNonTerminal)
    goto LABEL_21;
LABEL_27:
  if (v10)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
    goto LABEL_31;
  }
LABEL_29:
  if (v17)
    --*v17;
LABEL_31:
  if ((*(_DWORD *)(a1 + 136) & 0xFFFFFFFD) == 1)
    v6 += fst::ReplaceFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::ComputeFinalArc(a1, (uint64_t *)&v19, 0, 15);
  return v6;
}

void sub_1AD8EAB80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  else
    fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::OrderedExpand<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>((uint64_t)&a10);
  _Unwind_Resume(a1);
}

BOOL fst::ReplaceFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::IsNonTerminal(_QWORD *a1, int a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  BOOL v5;
  int v7;

  v7 = a2;
  if (*(_DWORD *)(a1[22] + 28) > a2)
    return 0;
  v2 = a1 + 23;
  v3 = a1[23];
  if (v3)
  {
    do
    {
      v4 = v3;
      v3 = *(_QWORD *)(v3 + 8);
    }
    while (v3);
  }
  else
  {
    do
    {
      v4 = v2[2];
      v5 = *(_QWORD *)v4 == (_QWORD)v2;
      v2 = (_QWORD *)v4;
    }
    while (v5);
  }
  return *(_DWORD *)(v4 + 28) >= a2
      && std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>(a1 + 25, &v7) != 0;
}

uint64_t fst::ReplaceFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::NumOutputEpsilons(uint64_t a1, int a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BOOL4 IsNonTerminal;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  _DWORD *v17;
  unint64_t v18;
  __int128 v19;

  if (fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::HasArcs(a1, a2))
  {
LABEL_4:
    v4 = *(_QWORD *)(a1 + 120);
    if (*(_DWORD *)(v4 + 76) == a2)
      v5 = v4 + 80;
    else
      v5 = *(_QWORD *)(v4 + 8) + 8 * a2 + 8;
    return *(_QWORD *)(*(_QWORD *)v5 + 16);
  }
  if (*(_BYTE *)(a1 + 160) || !(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 32))(a1, 0x40000000))
  {
    fst::ReplaceFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Expand((uint64_t *)a1, a2);
    goto LABEL_4;
  }
  v19 = *(_OWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 168) + 80) + 16 * a2);
  if (HIDWORD(v19) == -1)
    return 0;
  v8 = *(_QWORD *)(*(_QWORD *)(a1 + 240) + 8 * SDWORD2(v19));
  if ((*(_DWORD *)(a1 + 132) - 1) >= 2)
  {
    v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 56))(v8);
    goto LABEL_31;
  }
  v18 = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v8 + 136))(v8);
  v6 = 0;
  while (1)
  {
    while (v14)
    {
      v9 = (*(uint64_t (**)())(*(_QWORD *)v14 + 24))();
      v10 = v14;
      if ((v9 & 1) != 0)
        goto LABEL_27;
      v11 = (*(uint64_t (**)(void))(*(_QWORD *)v14 + 32))();
      v10 = v14;
      if (*(_DWORD *)(v11 + 4))
      {
        v12 = (*(uint64_t (**)(void))(*(_QWORD *)v14 + 32))();
        goto LABEL_20;
      }
LABEL_21:
      ++v6;
      if (!v10)
        goto LABEL_24;
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 40))(v10);
    }
    if (v18 >= v16)
      goto LABEL_29;
    if (*(_DWORD *)(v15 + 16 * v18 + 4))
      break;
    ++v6;
LABEL_24:
    ++v18;
  }
  v12 = v15 + 16 * v18;
LABEL_20:
  IsNonTerminal = fst::ReplaceFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::IsNonTerminal((_QWORD *)a1, *(_DWORD *)(v12 + 4));
  v10 = v14;
  if (IsNonTerminal)
    goto LABEL_21;
LABEL_27:
  if (v10)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
    goto LABEL_31;
  }
LABEL_29:
  if (v17)
    --*v17;
LABEL_31:
  if ((*(_DWORD *)(a1 + 136) - 1) <= 1)
    v6 += fst::ReplaceFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::ComputeFinalArc(a1, (uint64_t *)&v19, 0, 15);
  return v6;
}

void sub_1AD8EAE44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  else
    fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::OrderedExpand<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>((uint64_t)&a10);
  _Unwind_Resume(a1);
}

_QWORD *fst::ImplToFst<fst::ReplaceFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::ImplToFst(_QWORD *a1, uint64_t a2, int a3)
{
  uint64_t v5;
  uint64_t v6;

  *a1 = &unk_1E5D263C8;
  if (a3)
  {
    v5 = operator new();
    fst::ReplaceFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::ReplaceFstImpl(v5, *(_QWORD *)(a2 + 8));
    a1[1] = v5;
  }
  else
  {
    v6 = *(_QWORD *)(a2 + 8);
    a1[1] = v6;
    ++*(_DWORD *)(v6 + 56);
  }
  return a1;
}

void sub_1AD8EAEF0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10B3C4062370947);
  _Unwind_Resume(a1);
}

uint64_t fst::ReplaceFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::ReplaceFstImpl(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  char **v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char *v20;
  char *v21;
  char *v22;
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t *v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  char *v37;
  uint64_t *v38;
  char *v39;
  char *v40;
  uint64_t v41;
  std::string __str;

  v4 = fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::CacheBaseImpl(a1, a2, 0);
  *(_QWORD *)v4 = &unk_1E5D1E630;
  *(_QWORD *)(v4 + 132) = *(_QWORD *)(a2 + 132);
  *(_OWORD *)(v4 + 144) = *(_OWORD *)(a2 + 144);
  *(_BYTE *)(v4 + 160) = *(_BYTE *)(a2 + 160);
  v5 = (_QWORD *)operator new();
  fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,long>::DefaultReplaceStateTable(v5, *(_QWORD *)(a2 + 168));
  *(_QWORD *)(a1 + 168) = v5;
  std::set<int>::set[abi:ne180100]((uint64_t *)(a1 + 176), a2 + 176);
  std::unordered_map<int,int>::unordered_map(a1 + 200, a2 + 200);
  *(_QWORD *)(a1 + 240) = 0;
  *(_QWORD *)(a1 + 248) = 0;
  v6 = (char **)(a1 + 240);
  *(_QWORD *)(a1 + 256) = 0;
  *(_DWORD *)(a1 + 264) = *(_DWORD *)(a2 + 264);
  std::string::basic_string[abi:ne180100]<0>(&__str, "replace");
  std::string::operator=((std::string *)(a1 + 16), &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a1 + 8) & 0xFFFFC0000000FFFFLL | (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2) & 0x3FFFFFFF0004;
  v7 = *(_QWORD *)(a2 + 40);
  v8 = *(_QWORD *)(a1 + 40);
  if (v8 != v7)
  {
    if (v8)
      (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
    if (v7)
      v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 16))(v7);
    else
      v9 = 0;
    *(_QWORD *)(a1 + 40) = v9;
  }
  v10 = *(_QWORD *)(a2 + 48);
  v11 = *(_QWORD *)(a1 + 48);
  if (v11 != v10)
  {
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
    if (v10)
      v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 16))(v10);
    else
      v12 = 0;
    *(_QWORD *)(a1 + 48) = v12;
  }
  std::vector<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> *,std::allocator<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> *>>::reserve((void **)(a1 + 240), (uint64_t)(*(_QWORD *)(a2 + 248) - *(_QWORD *)(a2 + 240)) >> 3);
  v14 = *(_QWORD **)(a1 + 248);
  v13 = *(_QWORD *)(a1 + 256);
  if ((unint64_t)v14 >= v13)
  {
    v16 = ((char *)v14 - *v6) >> 3;
    if ((unint64_t)(v16 + 1) >> 61)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v17 = v13 - (_QWORD)*v6;
    v18 = v17 >> 2;
    if (v17 >> 2 <= (unint64_t)(v16 + 1))
      v18 = v16 + 1;
    if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8)
      v19 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v19 = v18;
    if (v19)
      v20 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>(a1 + 256, v19);
    else
      v20 = 0;
    v21 = &v20[8 * v16];
    v22 = &v20[8 * v19];
    *(_QWORD *)v21 = 0;
    v15 = v21 + 8;
    v24 = *(char **)(a1 + 240);
    v23 = *(char **)(a1 + 248);
    if (v23 != v24)
    {
      do
      {
        v25 = *((_QWORD *)v23 - 1);
        v23 -= 8;
        *((_QWORD *)v21 - 1) = v25;
        v21 -= 8;
      }
      while (v23 != v24);
      v23 = *v6;
    }
    *(_QWORD *)(a1 + 240) = v21;
    *(_QWORD *)(a1 + 248) = v15;
    *(_QWORD *)(a1 + 256) = v22;
    if (v23)
      operator delete(v23);
  }
  else
  {
    *v14 = 0;
    v15 = v14 + 1;
  }
  *(_QWORD *)(a1 + 248) = v15;
  v26 = *(_QWORD *)(a2 + 240);
  if ((unint64_t)(*(_QWORD *)(a2 + 248) - v26) >= 9)
  {
    v27 = 1;
    do
    {
      v28 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v26 + 8 * v27) + 88))(*(_QWORD *)(v26 + 8 * v27), 1);
      v29 = v28;
      v31 = *(uint64_t **)(a1 + 248);
      v30 = *(_QWORD *)(a1 + 256);
      if ((unint64_t)v31 >= v30)
      {
        v33 = ((char *)v31 - *v6) >> 3;
        if ((unint64_t)(v33 + 1) >> 61)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v34 = v30 - (_QWORD)*v6;
        v35 = v34 >> 2;
        if (v34 >> 2 <= (unint64_t)(v33 + 1))
          v35 = v33 + 1;
        if ((unint64_t)v34 >= 0x7FFFFFFFFFFFFFF8)
          v36 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v36 = v35;
        if (v36)
          v37 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>(a1 + 256, v36);
        else
          v37 = 0;
        v38 = (uint64_t *)&v37[8 * v33];
        *v38 = v29;
        v32 = v38 + 1;
        v40 = *(char **)(a1 + 240);
        v39 = *(char **)(a1 + 248);
        if (v39 != v40)
        {
          do
          {
            v41 = *((_QWORD *)v39 - 1);
            v39 -= 8;
            *--v38 = v41;
          }
          while (v39 != v40);
          v39 = *v6;
        }
        *(_QWORD *)(a1 + 240) = v38;
        *(_QWORD *)(a1 + 248) = v32;
        *(_QWORD *)(a1 + 256) = &v37[8 * v36];
        if (v39)
          operator delete(v39);
      }
      else
      {
        *v31 = v28;
        v32 = v31 + 1;
      }
      *(_QWORD *)(a1 + 248) = v32;
      ++v27;
      v26 = *(_QWORD *)(a2 + 240);
    }
    while (v27 < (*(_QWORD *)(a2 + 248) - v26) >> 3);
  }
  return a1;
}

void sub_1AD8EB280(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;
  uint64_t v16;
  void **v17;
  void *v19;

  v19 = *v17;
  if (*v17)
  {
    *(_QWORD *)(v15 + 248) = v19;
    operator delete(v19);
  }
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(v16);
  std::__tree<int>::destroy(a9, *(_QWORD **)(v15 + 184));
  fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::~CacheBaseImpl((_QWORD *)v15);
  _Unwind_Resume(a1);
}

_QWORD *fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,long>::DefaultReplaceStateTable(_QWORD *a1, uint64_t a2)
{
  a1[1] = a1;
  a1[2] = a1;
  std::unordered_set<int,fst::CompactHashBiTable<int,fst::ReplaceStateTuple<int,long>,fst::ReplaceHash<int,long>,std::equal_to<fst::ReplaceStateTuple<int,long>>,(fst::HSType)1>::HashFunc,fst::CompactHashBiTable<int,fst::ReplaceStateTuple<int,long>,fst::ReplaceHash<int,long>,std::equal_to<fst::ReplaceStateTuple<int,long>>,(fst::HSType)1>::HashEqual,std::allocator<int>>::unordered_set((uint64_t)(a1 + 3), 0, a1 + 1, a1 + 2);
  a1[10] = 0;
  a1[11] = 0;
  a1[12] = 0;
  fst::CompactHashBiTable<long,fst::ReplaceStackPrefix<int,int>,fst::ReplaceStackPrefixHash<int,int>,std::equal_to<fst::ReplaceStackPrefix<int,int>>,(fst::HSType)1>::CompactHashBiTable(a1 + 14, (_QWORD *)(a2 + 112));
  return a1;
}

void sub_1AD8EB360(_Unwind_Exception *a1)
{
  uint64_t v1;

  fst::CompactHashStateTable<fst::ReplaceStateTuple<int,long>,fst::ReplaceHash<int,long>>::~CompactHashStateTable(v1);
  _Unwind_Resume(a1);
}

_QWORD *fst::CompactHashBiTable<long,fst::ReplaceStackPrefix<int,int>,fst::ReplaceStackPrefixHash<int,int>,std::equal_to<fst::ReplaceStackPrefix<int,int>>,(fst::HSType)1>::CompactHashBiTable(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  _QWORD *i;

  a1[1] = a1;
  a1[2] = a1;
  v4 = (uint64_t)(a1 + 3);
  std::unordered_set<long,fst::CompactHashBiTable<long,fst::ReplaceStackPrefix<int,int>,fst::ReplaceStackPrefixHash<int,int>,std::equal_to<fst::ReplaceStackPrefix<int,int>>,(fst::HSType)1>::HashFunc,fst::CompactHashBiTable<long,fst::ReplaceStackPrefix<int,int>,fst::ReplaceStackPrefixHash<int,int>,std::equal_to<fst::ReplaceStackPrefix<int,int>>,(fst::HSType)1>::HashEqual,std::allocator<long>>::unordered_set((uint64_t)(a1 + 3), a2[6], a1 + 1, a1 + 2);
  a1[10] = 0;
  a1[11] = 0;
  a1[12] = 0;
  std::vector<fst::ReplaceStackPrefix<int,int>>::__init_with_size[abi:ne180100]<fst::ReplaceStackPrefix<int,int>*,fst::ReplaceStackPrefix<int,int>*>(a1 + 10, a2[10], a2[11], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a2[11] - a2[10]) >> 3));
  for (i = (_QWORD *)a2[5]; i; i = (_QWORD *)*i)
    std::__hash_table<long,fst::CompactHashBiTable<long,fst::ReplaceStackPrefix<int,int>,fst::ReplaceStackPrefixHash<int,int>,std::equal_to<fst::ReplaceStackPrefix<int,int>>,(fst::HSType)1>::HashFunc,fst::CompactHashBiTable<long,fst::ReplaceStackPrefix<int,int>,fst::ReplaceStackPrefixHash<int,int>,std::equal_to<fst::ReplaceStackPrefix<int,int>>,(fst::HSType)1>::HashEqual,std::allocator<long>>::__emplace_unique_key_args<long,long const&>(v4, i + 2, i + 2);
  return a1;
}

void sub_1AD8EB410(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<fst::ReplaceStackPrefix<int,int>>::__init_with_size[abi:ne180100]<fst::ReplaceStackPrefix<int,int>*,fst::ReplaceStackPrefix<int,int>*>(_QWORD *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;

  if (a4)
  {
    v6 = result;
    std::vector<std::string>::__vallocate[abi:ne180100](result, a4);
    result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<fst::ReplaceStackPrefix<int,int>>,fst::ReplaceStackPrefix<int,int>*,fst::ReplaceStackPrefix<int,int>*,fst::ReplaceStackPrefix<int,int>*>((uint64_t)(v6 + 2), a2, a3, (_QWORD *)v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_1AD8EB49C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

_QWORD *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<fst::ReplaceStackPrefix<int,int>>,fst::ReplaceStackPrefix<int,int>*,fst::ReplaceStackPrefix<int,int>*,fst::ReplaceStackPrefix<int,int>*>(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  _QWORD *v4;
  uint64_t v6;
  _QWORD v8[3];
  char v9;
  _QWORD *v10;
  _QWORD *v11;

  v4 = a4;
  v10 = a4;
  v11 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  v8[2] = &v11;
  v9 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      *v4 = 0;
      v4[1] = 0;
      v4[2] = 0;
      std::vector<fst::ReplaceStackPrefix<int,int>::PrefixTuple,std::allocator<fst::ReplaceStackPrefix<int,int>::PrefixTuple>>::__init_with_size[abi:ne180100]<fst::ReplaceStackPrefix<int,int>::PrefixTuple*,fst::ReplaceStackPrefix<int,int>::PrefixTuple*>(v4, *(const void **)v6, *(_QWORD *)(v6 + 8), (uint64_t)(*(_QWORD *)(v6 + 8) - *(_QWORD *)v6) >> 3);
      v4 = v11 + 3;
      v11 += 3;
      v6 += 24;
    }
    while (v6 != a3);
  }
  v9 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<fst::ReplaceStackPrefix<int,int>>,fst::ReplaceStackPrefix<int,int>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v8);
  return v4;
}

void sub_1AD8EB558(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<fst::ReplaceStackPrefix<int,int>>,fst::ReplaceStackPrefix<int,int>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<fst::ReplaceStackPrefix<int,int>>,fst::ReplaceStackPrefix<int,int>*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<int>>,std::vector<int>*>::operator()[abi:ne180100](a1);
  return a1;
}

uint64_t std::unordered_map<int,int>::unordered_map(uint64_t a1, uint64_t a2)
{
  int *i;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::__rehash<true>(a1, *(_QWORD *)(a2 + 8));
  for (i = *(int **)(a2 + 16); i; i = *(int **)i)
    std::__hash_table<std::__hash_value_type<int,int>,std::__unordered_map_hasher<int,std::__hash_value_type<int,int>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,int>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,int>>>::__emplace_unique_key_args<int,std::pair<int const,int> const&>(a1, i + 4, (_QWORD *)i + 2);
  return a1;
}

void sub_1AD8EB5FC(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__hash_table<std::__hash_value_type<int,int>,std::__unordered_map_hasher<int,std::__hash_value_type<int,int>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,int>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,int>>>::__emplace_unique_key_args<int,std::pair<int const,int> const&>(uint64_t a1, int *a2, _QWORD *a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  void **v9;
  _QWORD *v10;
  unint64_t v11;
  float v12;
  float v13;
  _BOOL8 v14;
  unint64_t v15;
  unint64_t v16;
  size_t v17;
  uint64_t v18;
  _QWORD *v19;
  unint64_t v20;

  v6 = *a2;
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = *a2;
      if (v7 <= v6)
        v3 = v6 % v7;
    }
    else
    {
      v3 = (v7 - 1) & v6;
    }
    v9 = *(void ***)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      v10 = *v9;
      if (*v9)
      {
        do
        {
          v11 = v10[1];
          if (v11 == v6)
          {
            if (*((_DWORD *)v10 + 4) == (_DWORD)v6)
              return v10;
          }
          else
          {
            if (v8.u32[0] > 1uLL)
            {
              if (v11 >= v7)
                v11 %= v7;
            }
            else
            {
              v11 &= v7 - 1;
            }
            if (v11 != v3)
              break;
          }
          v10 = (_QWORD *)*v10;
        }
        while (v10);
      }
    }
  }
  v10 = operator new(0x18uLL);
  *v10 = 0;
  v10[1] = v6;
  v10[2] = *a3;
  v12 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v13 = *(float *)(a1 + 32);
  if (!v7 || (float)(v13 * (float)v7) < v12)
  {
    v14 = 1;
    if (v7 >= 3)
      v14 = (v7 & (v7 - 1)) != 0;
    v15 = v14 | (2 * v7);
    v16 = vcvtps_u32_f32(v12 / v13);
    if (v15 <= v16)
      v17 = v16;
    else
      v17 = v15;
    std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::__rehash<true>(a1, v17);
    v7 = *(_QWORD *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v6)
        v3 = v6 % v7;
      else
        v3 = v6;
    }
    else
    {
      v3 = (v7 - 1) & v6;
    }
  }
  v18 = *(_QWORD *)a1;
  v19 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v19)
  {
    *v10 = *v19;
LABEL_38:
    *v19 = v10;
    goto LABEL_39;
  }
  *v10 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v10;
  *(_QWORD *)(v18 + 8 * v3) = a1 + 16;
  if (*v10)
  {
    v20 = *(_QWORD *)(*v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v20 >= v7)
        v20 %= v7;
    }
    else
    {
      v20 &= v7 - 1;
    }
    v19 = (_QWORD *)(*(_QWORD *)a1 + 8 * v20);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return v10;
}

void sub_1AD8EB818(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void fst::StateIterator<fst::ReplaceFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::~StateIterator()
{
  JUMPOUT(0x1AF44D190);
}

uint64_t fst::CacheStateIterator<fst::ReplaceFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::Value_(uint64_t a1)
{
  return *(unsigned int *)(a1 + 24);
}

uint64_t fst::CacheStateIterator<fst::ReplaceFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::Next_(uint64_t result)
{
  ++*(_DWORD *)(result + 24);
  return result;
}

uint64_t fst::CacheStateIterator<fst::ReplaceFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::Reset_(uint64_t result)
{
  *(_DWORD *)(result + 24) = 0;
  return result;
}

void fst::CacheStateIterator<fst::ReplaceFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::~CacheStateIterator()
{
  JUMPOUT(0x1AF44D190);
}

uint64_t fst::CacheStateIterator<fst::ReplaceFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::Done(uint64_t a1)
{
  int v2;
  uint64_t v3;
  _BOOL8 v4;
  int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  int v11;
  int v12;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  _DWORD *v23;
  uint64_t v24;
  _DWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  int v30;

  v2 = *(_DWORD *)(a1 + 24);
  v3 = *(_QWORD *)(a1 + 16);
  if (v2 < *(_DWORD *)(v3 + 68))
    return 0;
  v5 = fst::CacheBaseImpl<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>,fst::DefaultCacheStore<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::MinUnexpandedState(v3);
  if (v5 >= *(_DWORD *)(*(_QWORD *)(a1 + 16) + 68))
    return 1;
  v6 = v5;
  do
  {
    v14 = *(_QWORD *)(a1 + 8);
    v16 = -1;
    v17 = -1;
    v18 = 0;
    v19 = 0;
    v15 = v6;
    v21 = 15;
    v30 = 0;
    v22 = 0;
    v25 = 0;
    v23 = 0;
    v24 = 0;
    v27 = 0;
    v28 = 0;
    v26 = 0;
    v29 = 0;
    fst::ArcIterator<fst::ReplaceFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::Reinit_((int *)&v14);
    fst::ArcIterator<fst::ReplaceFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::SetFlags((int *)&v14, 15, 31);
    v7 = v18;
    v8 = v20;
    while (v7 < v8)
    {
      v9 = *(_QWORD *)(a1 + 16);
      v10 = fst::ArcIterator<fst::ReplaceFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::Value(&v14)[3];
      if (*(_DWORD *)(v9 + 68) <= v10)
        *(_DWORD *)(v9 + 68) = v10 + 1;
      v8 = v20;
      v7 = ++v18;
    }
    fst::CacheBaseImpl<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>,fst::DefaultCacheStore<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::SetExpandedState(*(_QWORD *)(a1 + 16), v6);
    v11 = *(_DWORD *)(a1 + 24);
    v12 = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 68);
    v4 = v11 >= v12;
    if (v23)
      --*v23;
    if (v25)
      --*v25;
    if (v24)
      (*(void (**)(uint64_t))(*(_QWORD *)v24 + 8))(v24);
    if (v11 < v12)
      break;
    v6 = fst::CacheBaseImpl<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>,fst::DefaultCacheStore<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::MinUnexpandedState(*(_QWORD *)(a1 + 16));
  }
  while (v6 < *(_DWORD *)(*(_QWORD *)(a1 + 16) + 68));
  return v4;
}

void sub_1AD8EBA34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  fst::ArcIterator<fst::ReplaceFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::~ArcIterator(&a9);
  _Unwind_Resume(a1);
}

uint64_t fst::ArcIterator<fst::ReplaceFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::SetFlags(int *a1, int a2, int a3)
{
  char v3;
  int v5;
  uint64_t result;
  int v7;
  int v8;

  v3 = a2;
  v5 = a1[14] & ~a3;
  result = *(_QWORD *)(*(_QWORD *)a1 + 8);
  if (*(_BYTE *)(result + 160))
    v7 = 15;
  else
    v7 = 31;
  v8 = v7 & a2 | v5;
  a1[14] = v8;
  if ((v8 & 0x10) == 0 && a1[44] != 15)
  {
    result = fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::HasArcs(result, a1[2]);
    if ((result & 1) == 0)
      a1[44] = 0;
  }
  if ((v3 & 0x10) != 0 && !a1[44])
    return (uint64_t)fst::ArcIterator<fst::ReplaceFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::Init(a1);
  return result;
}

int *fst::ArcIterator<fst::ReplaceFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::Value(_QWORD *a1)
{
  int v2;
  uint64_t v3;
  fst *v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  int *v8;
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *__p[2];
  char v16;
  char v17;

  v2 = *((_DWORD *)a1 + 44);
  if (v2)
  {
    v3 = a1[5];
  }
  else
  {
    if ((a1[7] & 0x10) != 0)
    {
      if (FLAGS_fst_error_fatal)
        std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
      else
        std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
      v4 = fst::LogMessage::LogMessage((fst *)&v17, (uint64_t)__p);
      v5 = (_QWORD *)fst::cerr(v4);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"ReplaceFst: inconsistent arc iterator flags", 43);
      fst::LogMessage::~LogMessage((fst::LogMessage *)&v17);
      if (v16 < 0)
        operator delete(__p[0]);
    }
    (*(void (**)(_QWORD, _QWORD, _QWORD *))(*(_QWORD *)*a1 + 136))(*a1, *((unsigned int *)a1 + 2), a1 + 10);
    v3 = 0;
    a1[20] = a1 + 10;
    v2 = 15;
    *((_DWORD *)a1 + 44) = 15;
    a1[5] = 0;
  }
  v6 = a1[4] - v3;
  if (v6 < 0)
  {
    v9 = *((_DWORD *)a1 + 14);
    if (((*((_DWORD *)a1 + 49) ^ 0xF) & v9) != 0)
    {
      fst::ReplaceFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::ComputeFinalArc(*(_QWORD *)(*a1 + 8), a1 + 2, (uint64_t)a1 + 180, v9 & 0xF);
      *((_DWORD *)a1 + 49) = a1[7] & 0xF;
    }
    return (int *)a1 + 45;
  }
  else
  {
    v7 = (_QWORD *)a1[20];
    if (*v7)
    {
      (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*v7 + 64))(*v7, v6);
      v8 = (int *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)a1[20] + 32))(*(_QWORD *)a1[20]);
      v2 = *((_DWORD *)a1 + 44);
    }
    else
    {
      v8 = (int *)(v7[1] + 16 * v6);
    }
    v10 = *((_DWORD *)a1 + 14);
    if (((v2 ^ 0xF) & v10) != 0)
    {
      v11 = (uint64_t)(a1 + 2);
      v13 = *a1;
      v12 = (uint64_t)a1 + 60;
      fst::ReplaceFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::ComputeArc(*(_QWORD *)(v13 + 8), v11, v8, v12, v10 & 0xF);
      return (int *)v12;
    }
  }
  return v8;
}

void sub_1AD8EBC7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  uint64_t v14;

  fst::LogMessage::~LogMessage((fst::LogMessage *)(v14 - 17));
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t fst::ArcIterator<fst::ReplaceFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::Reinit_(int *a1)
{
  uint64_t v2;
  uint64_t v3;
  char HasArcs;
  int v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  unsigned int v12;

  v2 = *(_QWORD *)a1;
  v3 = *(_QWORD *)(*(_QWORD *)a1 + 8);
  if (*(_BYTE *)(v3 + 160))
  {
    HasArcs = fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::HasArcs(v3, a1[2]);
    v2 = *(_QWORD *)a1;
    if ((HasArcs & 1) == 0)
    {
      fst::ReplaceFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Expand(*(uint64_t **)(v2 + 8), a1[2]);
      v2 = *(_QWORD *)a1;
    }
  }
  v5 = fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::HasArcs(*(_QWORD *)(v2 + 8), a1[2]);
  v6 = *(_QWORD *)a1;
  result = *(_QWORD *)(*(_QWORD *)a1 + 8);
  if (v5)
  {
    result = fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::InitArcIterator(result, a1[2], (_QWORD *)a1 + 10);
    *((_QWORD *)a1 + 6) = *((_QWORD *)a1 + 12);
    *((_QWORD *)a1 + 20) = a1 + 20;
    a1[44] = 15;
    *((_QWORD *)a1 + 14) = 0;
    *((_QWORD *)a1 + 17) = 0;
    return result;
  }
  *((_OWORD *)a1 + 1) = *(_OWORD *)(*(_QWORD *)(*(_QWORD *)(result + 168) + 80) + 16 * a1[2]);
  v8 = a1[7];
  if ((_DWORD)v8 == -1)
  {
    *((_QWORD *)a1 + 6) = 0;
    return result;
  }
  v10 = (uint64_t *)(a1 + 28);
  v9 = *((_QWORD *)a1 + 14);
  v11 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v6 + 8) + 240) + 8 * a1[6]);
  if (v9)
  {
    if (v11 != *((_QWORD *)a1 + 18))
      goto LABEL_9;
    if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9) & 1) != 0)
      goto LABEL_12;
    v9 = *v10;
    if (*v10)
LABEL_9:
      (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
    *((_QWORD *)a1 + 14) = 0;
    v8 = a1[7];
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(_QWORD *)v11 + 136))(v11, v8, (uint64_t *)a1 + 14);
  *((_QWORD *)a1 + 18) = v11;
LABEL_12:
  *((_QWORD *)a1 + 20) = v10;
  v12 = fst::ReplaceFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::ComputeFinalArc(*(_QWORD *)(*(_QWORD *)a1 + 8), (uint64_t *)a1 + 2, (uint64_t)(a1 + 45), 7);
  a1[49] = 7;
  if (*((_QWORD *)a1 + 14))
    result = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v11 + 40))(v11, a1[7]);
  else
    result = *((_QWORD *)a1 + 16);
  *((_QWORD *)a1 + 19) = result;
  *((_QWORD *)a1 + 5) = v12;
  *((_QWORD *)a1 + 6) = result + v12;
  a1[44] = 0;
  *((_QWORD *)a1 + 10) = 0;
  *((_QWORD *)a1 + 13) = 0;
  return result;
}

_BYTE *fst::ArcIterator<fst::ReplaceFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::Init(_BYTE *result)
{
  _BYTE *v1;
  uint64_t v2;
  int v3;

  v1 = result;
  if ((result[56] & 0x10) != 0)
  {
    *((_QWORD *)result + 20) = result + 112;
    if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)result + 8) + 132) & 0xFFFFFFFD) == 1)
      v3 = 4;
    else
      v3 = 5;
    *((_DWORD *)result + 44) = v3;
    v2 = *((_QWORD *)result + 6) - *((_QWORD *)result + 19);
  }
  else
  {
    result = (_BYTE *)(*(uint64_t (**)(void))(**(_QWORD **)result + 136))();
    v2 = 0;
    *((_QWORD *)v1 + 20) = v1 + 80;
    *((_DWORD *)v1 + 44) = 15;
  }
  *((_QWORD *)v1 + 5) = v2;
  return result;
}

_QWORD *fst::ArcIterator<fst::ReplaceFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::~ArcIterator(_QWORD *a1)
{
  _DWORD *v2;
  _DWORD *v3;
  uint64_t v4;

  v2 = (_DWORD *)a1[13];
  if (v2)
    --*v2;
  v3 = (_DWORD *)a1[17];
  if (v3)
    --*v3;
  v4 = a1[14];
  if (v4)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    a1[14] = 0;
  }
  return a1;
}

uint64_t fst::ReplaceFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::InitArcIterator(uint64_t *a1, int a2, _QWORD *a3)
{
  if ((fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::HasArcs((uint64_t)a1, a2) & 1) == 0)fst::ReplaceFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Expand(a1, a2);
  return fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::InitArcIterator((uint64_t)a1, a2, a3);
}

uint64_t fst::ReplaceFstMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::ReplaceFstMatcher(uint64_t a1, uint64_t a2, int a3)
{
  *(_QWORD *)a1 = &unk_1E5D1FA38;
  *(_QWORD *)(a1 + 8) = a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 56) = -1;
  *(_DWORD *)(a1 + 64) = a3;
  *(_WORD *)(a1 + 69) = 0;
  *(_QWORD *)(a1 + 72) = -1;
  *(_QWORD *)(a1 + 80) = -1;
  *(_OWORD *)(a1 + 104) = xmmword_1AE142840;
  if (a3 == 1)
    *(_QWORD *)(a1 + 104) = 0xFFFFFFFF00000000;
  fst::ReplaceFstMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::InitMatchers(a1);
  return a1;
}

void sub_1AD8EC010(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void **v3;
  void *v5;

  v3 = v2;
  v5 = *v3;
  if (*v3)
  {
    *(_QWORD *)(v1 + 40) = v5;
    operator delete(v5);
  }
  _Unwind_Resume(exception_object);
}

void fst::ReplaceFstMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::InitMatchers(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  BOOL v12;
  uint64_t v13;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = (_QWORD *)(a1 + 32);
  v4 = (uint64_t)(*(_QWORD *)(v2 + 248) - *(_QWORD *)(v2 + 240)) >> 3;
  v13 = 0;
  std::vector<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> *,std::allocator<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> *>>::resize(a1 + 32, v4, &v13);
  v5 = *(_QWORD *)(v2 + 240);
  if (*(_QWORD *)(v2 + 248) != v5)
  {
    v6 = 0;
    do
    {
      if (*(_QWORD *)(v5 + 8 * v6))
      {
        v7 = operator new();
        fst::MultiEpsMatcher<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::MultiEpsMatcher(v7, *(_QWORD *)(*(_QWORD *)(v2 + 240) + 8 * v6), *(unsigned int *)(a1 + 64), 1, 0, 1);
        *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * v6) = v7;
        v8 = *(_QWORD *)(a1 + 16);
        v9 = *(_QWORD **)(v8 + 176);
        if (v9 != (_QWORD *)(v8 + 184))
        {
          do
          {
            fst::MultiEpsMatcher<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::AddMultiEpsLabel(*(_QWORD *)(*v3 + 8 * v6), *((_DWORD *)v9 + 7));
            v10 = (_QWORD *)v9[1];
            if (v10)
            {
              do
              {
                v11 = v10;
                v10 = (_QWORD *)*v10;
              }
              while (v10);
            }
            else
            {
              do
              {
                v11 = (_QWORD *)v9[2];
                v12 = *v11 == (_QWORD)v9;
                v9 = v11;
              }
              while (!v12);
            }
            v9 = v11;
          }
          while (v11 != (_QWORD *)(*(_QWORD *)(a1 + 16) + 184));
        }
      }
      ++v6;
      v5 = *(_QWORD *)(v2 + 240);
    }
    while (v6 < (*(_QWORD *)(v2 + 248) - v5) >> 3);
  }
}

void sub_1AD8EC158(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x1020C403A3A3D98);
  _Unwind_Resume(a1);
}

void fst::ReplaceFstMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::~ReplaceFstMatcher(_QWORD *a1)
{
  fst::ReplaceFstMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::~ReplaceFstMatcher(a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t fst::ReplaceFstMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Copy(uint64_t a1)
{
  uint64_t v2;

  v2 = operator new();
  fst::ReplaceFstMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::ReplaceFstMatcher(v2, a1);
  return v2;
}

void sub_1AD8EC1F8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10E1C40D49367F0);
  _Unwind_Resume(a1);
}

uint64_t fst::ReplaceFstMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Type(uint64_t a1, uint64_t a2)
{
  int v2;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v2 = *(_DWORD *)(a1 + 64);
  if (v2 == 3)
    return 3;
  if (v2)
    v6 = 0x40000000;
  else
    v6 = 0x10000000;
  v7 = *(_QWORD *)(a1 + 8);
  if (v2)
    v8 = 3221225472;
  else
    v8 = 805306368;
  v9 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v7 + 64))(v7, v8, a2);
  if ((v9 & v6) != 0)
    return *(unsigned int *)(a1 + 64);
  v10 = 0x80000000;
  if (!v2)
    v10 = 0x20000000;
  if ((v9 & v10) != 0)
    return 3;
  else
    return 4;
}

uint64_t fst::ReplaceFstMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::GetFst(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8);
}

uint64_t fst::ReplaceFstMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Properties(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t fst::ReplaceFstMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::SetState_(uint64_t result, int a2)
{
  uint64_t v2;
  uint64_t v3;
  _DWORD *v4;

  if (*(_DWORD *)(result + 56) != a2)
  {
    v2 = result;
    *(_DWORD *)(result + 56) = a2;
    *(_OWORD *)(result + 72) = *(_OWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(result + 16) + 168) + 80) + 16 * a2);
    v3 = *(unsigned int *)(result + 84);
    if ((_DWORD)v3 == -1)
    {
      *(_BYTE *)(result + 68) = 1;
    }
    else
    {
      v4 = *(_DWORD **)(*(_QWORD *)(result + 32) + 8 * *(int *)(result + 80));
      *(_QWORD *)(result + 24) = v4;
      result = (*(uint64_t (**)(_QWORD, uint64_t))(***(_QWORD ***)v4 + 56))(**(_QWORD **)v4, v3);
      v4[18] = v3;
      *(_DWORD *)(v2 + 116) = *(_DWORD *)(v2 + 56);
      *(_BYTE *)(v2 + 70) = 0;
    }
  }
  return result;
}

uint64_t fst::ReplaceFstMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Find_(uint64_t a1, int a2)
{
  _QWORD **v4;
  _QWORD **v5;
  char v6;
  _QWORD *v8;
  char v9;
  _QWORD *v10;
  _QWORD *v11;
  BOOL v12;

  *(_DWORD *)(a1 + 60) = a2;
  if ((a2 + 1) > 1)
    return fst::MultiEpsMatcher<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::Find(*(_BYTE **)(a1 + 24), a2);
  if (!a2)
    *(_BYTE *)(a1 + 69) = 1;
  *(_BYTE *)(a1 + 70) = fst::ReplaceFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::ComputeFinalArc(*(_QWORD *)(a1 + 16), (uint64_t *)(a1 + 72), 0, 15);
  v4 = *(_QWORD ***)(a1 + 24);
  v5 = v4 + 3;
  v4[6] = v4 + 3;
  *((_BYTE *)v4 + 56) = 0;
  if (((_BYTE)v4[1] & 1) != 0)
  {
    v8 = v4[2];
    while (1)
    {
      v4[6] = v8;
      if (v8 == v5)
        break;
      v9 = (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)**v4 + 64))(**v4, *((unsigned int *)v8 + 7));
      v10 = v4[6];
      if ((v9 & 1) != 0)
      {
        if (v10 == v5)
          break;
        *((_BYTE *)v4 + 76) = 0;
        return 1;
      }
      v11 = (_QWORD *)v10[1];
      if (v11)
      {
        do
        {
          v8 = v11;
          v11 = (_QWORD *)*v11;
        }
        while (v11);
      }
      else
      {
        do
        {
          v8 = (_QWORD *)v10[2];
          v12 = *v8 == (_QWORD)v10;
          v10 = v8;
        }
        while (!v12);
      }
    }
  }
  v6 = (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)**v4 + 64))(**v4, 0xFFFFFFFFLL);
  *((_BYTE *)v4 + 76) = v6 ^ 1;
  if ((v6 & 1) != 0)
    return 1;
  if (a2)
    v12 = *(_BYTE *)(a1 + 70) == 0;
  else
    v12 = 0;
  return !v12;
}

BOOL fst::ReplaceFstMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Done_(uint64_t a1)
{
  return !*(_BYTE *)(a1 + 69) && !*(_BYTE *)(a1 + 70) && *(_BYTE *)(*(_QWORD *)(a1 + 24) + 76) != 0;
}

uint64_t fst::ReplaceFstMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Value_(uint64_t a1)
{
  uint64_t v2;
  int *v3;
  int *v4;
  uint64_t v5;
  uint64_t v6;

  if (*(_BYTE *)(a1 + 69))
    return a1 + 104;
  if (*(_BYTE *)(a1 + 70))
  {
    v2 = a1 + 88;
    fst::ReplaceFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::ComputeFinalArc(*(_QWORD *)(a1 + 16), (uint64_t *)(a1 + 72), a1 + 88, 15);
  }
  else
  {
    v3 = *(int **)(a1 + 24);
    if (*((_BYTE *)v3 + 56))
      v4 = v3 + 15;
    else
      v4 = (int *)(*(uint64_t (**)(_QWORD))(***(_QWORD ***)v3 + 80))(**(_QWORD **)v3);
    v5 = *(_QWORD *)(a1 + 16);
    v6 = a1 + 72;
    v2 = a1 + 88;
    fst::ReplaceFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::ComputeArc(v5, v6, v4, v2, 15);
  }
  return v2;
}

uint64_t fst::ReplaceFstMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Next_(uint64_t result)
{
  if (*(_BYTE *)(result + 69))
  {
    *(_BYTE *)(result + 69) = 0;
  }
  else if (*(_BYTE *)(result + 70))
  {
    *(_BYTE *)(result + 70) = 0;
  }
  else
  {
    return fst::MultiEpsMatcher<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::Next(*(_QWORD *)(result + 24));
  }
  return result;
}

uint64_t fst::ReplaceFstMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Priority_(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8));
}

void fst::MultiEpsMatcher<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::AddMultiEpsLabel(uint64_t a1, int a2)
{
  fst *v2;
  _QWORD *v3;
  void *__p[2];
  char v5;
  char v6;

  if (a2)
  {
    fst::CompactSet<int,-1>::Insert(a1 + 16, a2);
  }
  else
  {
    if (FLAGS_fst_error_fatal)
      std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
    else
      std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
    v2 = fst::LogMessage::LogMessage((fst *)&v6, (uint64_t)__p);
    v3 = (_QWORD *)fst::cerr(v2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"MultiEpsMatcher: Bad multi-eps label: 0", 39);
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v6);
    if (v5 < 0)
      operator delete(__p[0]);
  }
}

void sub_1AD8EC640(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  uint64_t v14;

  fst::LogMessage::~LogMessage((fst::LogMessage *)(v14 - 17));
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t fst::MultiEpsMatcher<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::MultiEpsMatcher(uint64_t a1, uint64_t a2, uint64_t a3, int a4, _QWORD *a5, char a6)
{
  _QWORD *v11;
  char v13;
  int v14;
  int v15;

  v11 = a5;
  if (!a5)
  {
    v11 = (_QWORD *)operator new();
    fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Matcher(v11, a2, a3);
  }
  *(_QWORD *)a1 = v11;
  *(_DWORD *)(a1 + 8) = a4;
  if (a5)
    v13 = a6;
  else
    v13 = 1;
  *(_BYTE *)(a1 + 12) = v13;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 16) = a1 + 24;
  *(_QWORD *)(a1 + 40) = -1;
  *(_QWORD *)(a1 + 48) = 0;
  if ((_DWORD)a3)
    v14 = 0;
  else
    v14 = -1;
  if ((_DWORD)a3)
    v15 = -1;
  else
    v15 = 0;
  *(_DWORD *)(a1 + 60) = v14;
  *(_DWORD *)(a1 + 64) = v15;
  *(_QWORD *)(a1 + 68) = 0xFFFFFFFF00000000;
  return a1;
}

void sub_1AD8EC740(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x20C4093837F09);
  _Unwind_Resume(a1);
}

_QWORD *fst::ReplaceFstMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::~ReplaceFstMatcher(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  unint64_t v5;
  uint64_t v6;

  *a1 = &unk_1E5D1FA38;
  v4 = a1 + 4;
  v2 = (_QWORD *)a1[4];
  v3 = (_QWORD *)v4[1];
  if (v3 == v2)
  {
    v2 = v3;
    if (!v3)
      return a1;
    goto LABEL_7;
  }
  v5 = 0;
  do
  {
    if (v2[v5])
    {
      v6 = fst::MultiEpsMatcher<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::~MultiEpsMatcher(v2[v5]);
      MEMORY[0x1AF44D190](v6, 0x1020C403A3A3D98);
      v2 = (_QWORD *)a1[4];
      v3 = (_QWORD *)a1[5];
    }
    ++v5;
  }
  while (v5 < v3 - v2);
  if (v2)
  {
LABEL_7:
    a1[5] = v2;
    operator delete(v2);
  }
  return a1;
}

uint64_t fst::MultiEpsMatcher<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::~MultiEpsMatcher(uint64_t a1)
{
  _QWORD *v2;

  if (*(_BYTE *)(a1 + 12))
  {
    v2 = *(_QWORD **)a1;
    if (*(_QWORD *)a1)
    {
      if (*v2)
        (*(void (**)(_QWORD))(*(_QWORD *)*v2 + 8))(*v2);
      MEMORY[0x1AF44D190](v2, 0x20C4093837F09);
    }
  }
  std::__tree<int>::destroy(a1 + 16, *(_QWORD **)(a1 + 24));
  return a1;
}

uint64_t fst::ReplaceFstMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::ReplaceFstMatcher(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  int v4;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = &unk_1E5D1FA38;
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(v3 + 8);
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 56) = -1;
  v4 = *(_DWORD *)(a2 + 64);
  *(_DWORD *)(a1 + 64) = v4;
  *(_WORD *)(a1 + 69) = 0;
  *(_QWORD *)(a1 + 72) = -1;
  *(_QWORD *)(a1 + 80) = -1;
  *(_OWORD *)(a1 + 104) = xmmword_1AE142840;
  if (v4 == 1)
    *(_QWORD *)(a1 + 104) = 0xFFFFFFFF00000000;
  fst::ReplaceFstMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::InitMatchers(a1);
  return a1;
}

void sub_1AD8EC8EC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void **v3;
  void *v5;

  v3 = v2;
  v5 = *v3;
  if (*v3)
  {
    *(_QWORD *)(v1 + 40) = v5;
    operator delete(v5);
  }
  _Unwind_Resume(exception_object);
}

int32x2_t *fst::SortedMatcher<fst::ReplaceFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::SortedMatcher(int32x2_t *a1, uint64_t a2, __int32 a3, __int32 a4)
{
  __int32 v7;
  fst *v8;
  _QWORD *v9;
  void *__p[2];
  char v12;
  char v13;

  *a1 = (int32x2_t)&unk_1E5D1BA28;
  a1[1] = (int32x2_t)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 88))(a2, 0);
  a1[2].i32[0] = -1;
  a1[3] = 0;
  a1[4].i32[0] = a3;
  a1[4].i32[1] = a4;
  a1[5].i32[0] = -1;
  a1[6] = 0;
  *(_OWORD *)a1[7].i8 = xmmword_1AE142840;
  a1[9].i8[2] = 0;
  fst::MemoryPool<fst::ArcIterator<fst::ReplaceFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>::MemoryPool(&a1[10], 1);
  v7 = a1[4].i32[0];
  if (v7 && v7 != 3)
  {
    if (v7 == 1)
    {
      a1[7] = vrev64_s32(a1[7]);
    }
    else
    {
      if (FLAGS_fst_error_fatal)
        std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
      else
        std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
      v8 = fst::LogMessage::LogMessage((fst *)&v13, (uint64_t)__p);
      v9 = (_QWORD *)fst::cerr(v8);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"SortedMatcher: bad match type", 29);
      fst::LogMessage::~LogMessage((fst::LogMessage *)&v13);
      if (v12 < 0)
        operator delete(__p[0]);
      a1[4].i32[0] = 3;
      a1[9].i8[2] = 1;
    }
  }
  return a1;
}

void sub_1AD8ECA58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  uint64_t v18;
  quasar::Bitmap *v19;

  fst::LogMessage::~LogMessage((fst::LogMessage *)&a18);
  if (a14 < 0)
    operator delete(__p);
  *(_QWORD *)(v18 + 80) = &unk_1E5D19580;
  fst::MemoryArena<fst::MemoryPool<fst::ArcIterator<fst::ReplaceFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>::Link>::~MemoryArena((_QWORD *)(v18 + 88));
  quasar::Bitmap::~Bitmap(v19);
  _Unwind_Resume(a1);
}

void fst::MemoryPool<fst::ArcIterator<fst::ReplaceFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>::~MemoryPool(quasar::Bitmap *a1)
{
  *(_QWORD *)a1 = &unk_1E5D19580;
  fst::MemoryArena<fst::MemoryPool<fst::ArcIterator<fst::ReplaceFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>::Link>::~MemoryArena((_QWORD *)a1 + 1);
  quasar::Bitmap::~Bitmap(a1);
}

{
  *(_QWORD *)a1 = &unk_1E5D19580;
  fst::MemoryArena<fst::MemoryPool<fst::ArcIterator<fst::ReplaceFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>::Link>::~MemoryArena((_QWORD *)a1 + 1);
  quasar::Bitmap::~Bitmap(a1);
  JUMPOUT(0x1AF44D190);
}

void fst::SortedMatcher<fst::ReplaceFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::~SortedMatcher(_QWORD *a1)
{
  fst::SortedMatcher<fst::ReplaceFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::~SortedMatcher(a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t fst::SortedMatcher<fst::ReplaceFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::Copy(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = operator new();
  fst::SortedMatcher<fst::ReplaceFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::SortedMatcher(v4, a1, a2);
  return v4;
}

void sub_1AD8ECB70(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10E1C4003B7394BLL);
  _Unwind_Resume(a1);
}

uint64_t fst::SortedMatcher<fst::ReplaceFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::Type(uint64_t a1, uint64_t a2)
{
  int v2;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v2 = *(_DWORD *)(a1 + 32);
  if (v2 == 3)
    return 3;
  if (v2)
    v6 = 0x40000000;
  else
    v6 = 0x10000000;
  v7 = *(_QWORD *)(a1 + 8);
  if (v2)
    v8 = 3221225472;
  else
    v8 = 805306368;
  v9 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v7 + 64))(v7, v8, a2);
  if ((v9 & v6) != 0)
    return *(unsigned int *)(a1 + 32);
  v10 = 0x80000000;
  if (!v2)
    v10 = 0x20000000;
  if ((v9 & v10) != 0)
    return 3;
  else
    return 4;
}

uint64_t fst::SortedMatcher<fst::ReplaceFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::GetFst(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8);
}

uint64_t fst::SortedMatcher<fst::ReplaceFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::Properties(uint64_t a1, uint64_t a2)
{
  if (*(_BYTE *)(a1 + 74))
    return a2 | 4;
  else
    return a2;
}

uint64_t fst::SortedMatcher<fst::ReplaceFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::Next_(uint64_t result)
{
  if (*(_BYTE *)(result + 72))
    *(_BYTE *)(result + 72) = 0;
  else
    ++*(_QWORD *)(*(_QWORD *)(result + 24) + 32);
  return result;
}

float fst::SortedMatcher<fst::ReplaceFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::Final_(uint64_t a1, int a2)
{
  return fst::ReplaceFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Final(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8), a2);
}

uint64_t fst::SortedMatcher<fst::ReplaceFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::Priority_(uint64_t a1, int a2)
{
  return fst::ReplaceFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::NumArcs(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8), a2);
}

_QWORD *fst::MemoryPool<fst::ArcIterator<fst::ReplaceFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>::MemoryPool(_QWORD *a1, uint64_t a2)
{
  *a1 = &unk_1E5D19580;
  fst::MemoryArena<fst::MemoryPool<fst::ArcIterator<fst::ReplaceFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>::Link>::MemoryArena(a1 + 1, a2);
  a1[7] = 0;
  return a1;
}

void sub_1AD8ECCC8(_Unwind_Exception *a1)
{
  quasar::Bitmap *v1;

  quasar::Bitmap::~Bitmap(v1);
  _Unwind_Resume(a1);
}

uint64_t fst::MemoryPool<fst::ArcIterator<fst::ReplaceFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>::Size()
{
  return 200;
}

_QWORD *fst::MemoryArena<fst::MemoryPool<fst::ArcIterator<fst::ReplaceFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>::Link>::MemoryArena(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;

  *a1 = &unk_1E5D1A538;
  a1[1] = 208 * a2;
  a1[2] = 0;
  a1[3] = a1 + 3;
  a1[4] = a1 + 3;
  a1[5] = 0;
  v3 = operator new[]();
  v4 = operator new(0x18uLL);
  v5 = (_QWORD *)a1[4];
  v6 = a1[5];
  *v4 = a1 + 3;
  v4[1] = v5;
  v4[2] = v3;
  *v5 = v4;
  a1[4] = v4;
  a1[5] = v6 + 1;
  return a1;
}

void sub_1AD8ECDB0(_Unwind_Exception *a1)
{
  quasar::Bitmap *v1;
  _QWORD *v2;

  std::__list_imp<char *>::clear(v2);
  quasar::Bitmap::~Bitmap(v1);
  _Unwind_Resume(a1);
}

void fst::MemoryArena<fst::MemoryPool<fst::ArcIterator<fst::ReplaceFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>::Link>::~MemoryArena(_QWORD *a1)
{
  fst::MemoryArena<fst::MemoryPool<fst::ArcIterator<fst::ReplaceFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>::Link>::~MemoryArena(a1);
  JUMPOUT(0x1AF44D190);
}

{
  _QWORD *v2;
  _QWORD *i;
  uint64_t v4;

  *a1 = &unk_1E5D1A538;
  v2 = a1 + 3;
  for (i = (_QWORD *)a1[4]; i != v2; i = (_QWORD *)i[1])
  {
    v4 = i[2];
    if (v4)
      MEMORY[0x1AF44D160](v4, 0x1000C8077774924);
  }
  std::__list_imp<char *>::clear(v2);
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)a1);
}

uint64_t fst::MemoryArena<fst::MemoryPool<fst::ArcIterator<fst::ReplaceFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>::Link>::Size()
{
  return 208;
}

_QWORD *fst::SortedMatcher<fst::ReplaceFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::~SortedMatcher(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  *a1 = &unk_1E5D1BA28;
  v2 = (_QWORD *)a1[3];
  if (v2)
  {
    v3 = fst::ArcIterator<fst::ReplaceFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::~ArcIterator(v2);
    v3[25] = a1[17];
    a1[17] = v3;
  }
  v4 = a1[1];
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  a1[10] = &unk_1E5D19580;
  fst::MemoryArena<fst::MemoryPool<fst::ArcIterator<fst::ReplaceFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>::Link>::~MemoryArena(a1 + 11);
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)(a1 + 10));
  return a1;
}

uint64_t fst::SortedMatcher<fst::ReplaceFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::SortedMatcher(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_QWORD *)a1 = &unk_1E5D1BA28;
  *(_QWORD *)(a1 + 8) = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a2 + 8) + 88))(*(_QWORD *)(a2 + 8), a3);
  *(_DWORD *)(a1 + 16) = -1;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 40) = -1;
  *(_QWORD *)(a1 + 48) = 0;
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_BYTE *)(a1 + 74) = *(_BYTE *)(a2 + 74);
  fst::MemoryPool<fst::ArcIterator<fst::ReplaceFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>::MemoryPool((_QWORD *)(a1 + 80), 1);
  return a1;
}

uint64_t fst::SortedMatcher<fst::ReplaceFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::SetState(uint64_t result, int a2)
{
  uint64_t v3;
  fst *v4;
  _QWORD *v5;
  int *v6;
  uint64_t v7;
  void *__p[2];
  char v9;
  char v10;

  if (*(_DWORD *)(result + 16) != a2)
  {
    v3 = result;
    *(_DWORD *)(result + 16) = a2;
    if (*(_DWORD *)(result + 32) == 3)
    {
      if (FLAGS_fst_error_fatal)
        std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
      else
        std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
      v4 = fst::LogMessage::LogMessage((fst *)&v10, (uint64_t)__p);
      v5 = (_QWORD *)fst::cerr(v4);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"SortedMatcher: bad match type", 29);
      fst::LogMessage::~LogMessage((fst::LogMessage *)&v10);
      if (v9 < 0)
        operator delete(__p[0]);
      *(_BYTE *)(v3 + 74) = 1;
    }
    v6 = *(int **)(v3 + 24);
    if (v6)
    {
      fst::ArcIterator<fst::ReplaceFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::Reinit(v6, *(_QWORD *)(v3 + 8), a2);
      v7 = *(_QWORD *)(v3 + 24);
    }
    else
    {
      v7 = *(_QWORD *)(v3 + 136);
      if (v7)
      {
        *(_QWORD *)(v3 + 136) = *(_QWORD *)(v7 + 200);
      }
      else
      {
        v7 = fst::MemoryArena<fst::MemoryPool<fst::ArcIterator<fst::ReplaceFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>::Link>::Allocate((_QWORD *)(v3 + 88), 1);
        *(_QWORD *)(v7 + 200) = 0;
      }
      *(_QWORD *)v7 = *(_QWORD *)(v3 + 8);
      *(_DWORD *)(v7 + 8) = a2;
      *(_QWORD *)(v7 + 16) = -1;
      *(_QWORD *)(v7 + 24) = -1;
      *(_QWORD *)(v7 + 32) = 0;
      *(_QWORD *)(v7 + 40) = 0;
      *(_DWORD *)(v7 + 56) = 15;
      *(_DWORD *)(v7 + 196) = 0;
      *(_QWORD *)(v7 + 80) = 0;
      *(_QWORD *)(v7 + 136) = 0;
      *(_QWORD *)(v7 + 104) = 0;
      *(_QWORD *)(v7 + 112) = 0;
      *(_QWORD *)(v7 + 160) = 0;
      *(_QWORD *)(v7 + 168) = 0;
      *(_QWORD *)(v7 + 152) = 0;
      *(_DWORD *)(v7 + 176) = 0;
      fst::ArcIterator<fst::ReplaceFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::Reinit_((int *)v7);
      *(_QWORD *)(v3 + 24) = v7;
    }
    fst::ArcIterator<fst::ReplaceFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::SetFlags((int *)v7, 16, 16);
    result = fst::ReplaceFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::NumArcs(*(_QWORD *)(*(_QWORD *)(v3 + 8) + 8), a2);
    *(_QWORD *)(v3 + 48) = result;
    *(_DWORD *)(v3 + 68) = a2;
  }
  return result;
}

void sub_1AD8ED0F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  fst::LogMessage::~LogMessage((fst::LogMessage *)&a18);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

int *fst::ArcIterator<fst::ReplaceFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::Reinit(int *a1, uint64_t a2, int a3)
{
  _DWORD *v3;
  _DWORD *v4;

  if (a1[2] != a3)
  {
    v3 = (_DWORD *)*((_QWORD *)a1 + 13);
    if (v3)
      --*v3;
    v4 = (_DWORD *)*((_QWORD *)a1 + 17);
    if (v4)
      --*v4;
    a1[14] = 0;
    a1[44] = 0;
    a1[49] = 0;
    *((_QWORD *)a1 + 19) = 0;
    *((_QWORD *)a1 + 4) = 0;
    *((_QWORD *)a1 + 5) = 0;
    a1[2] = a3;
    return (int *)fst::ArcIterator<fst::ReplaceFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::Reinit_(a1);
  }
  return a1;
}

uint64_t fst::MemoryArena<fst::MemoryPool<fst::ArcIterator<fst::ReplaceFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>::Link>::Allocate(_QWORD *a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;

  v2 = a1;
  v3 = 208 * a2;
  v4 = a1[1];
  if (832 * a2 <= v4)
  {
    v9 = v2[2];
    if (v9 + v3 <= v4)
    {
      v10 = *(_QWORD *)(v2[4] + 16);
    }
    else
    {
      v10 = operator new[]();
      v2[2] = 0;
      v11 = operator new(0x18uLL);
      v9 = 0;
      v12 = (_QWORD *)v2[4];
      v13 = v2[5];
      *v11 = v2 + 3;
      v11[1] = v12;
      v11[2] = v10;
      *v12 = v11;
      v2[4] = v11;
      v2[5] = v13 + 1;
    }
    v5 = v10 + v9;
    v8 = v9 + v3;
  }
  else
  {
    v5 = operator new[]();
    v6 = operator new(0x18uLL);
    v7 = v2[3];
    v2 += 3;
    v6[1] = v2;
    v6[2] = v5;
    *v6 = v7;
    *(_QWORD *)(v7 + 8) = v6;
    *v2 = v6;
    v8 = v2[2] + 1;
  }
  v2[2] = v8;
  return v5;
}

BOOL fst::SortedMatcher<fst::ReplaceFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::Find(uint64_t a1, int a2)
{
  _BOOL8 result;
  int v4;

  *(_BYTE *)(a1 + 73) = 1;
  if (*(_BYTE *)(a1 + 74))
  {
    result = 0;
    *(_BYTE *)(a1 + 72) = 0;
    *(_DWORD *)(a1 + 40) = -1;
  }
  else
  {
    *(_BYTE *)(a1 + 72) = a2 == 0;
    if (a2 == -1)
      v4 = 0;
    else
      v4 = a2;
    *(_DWORD *)(a1 + 40) = v4;
    return (fst::SortedMatcher<fst::ReplaceFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::Search(a1) & 1) != 0
        || *(_BYTE *)(a1 + 72) != 0;
  }
  return result;
}

uint64_t fst::SortedMatcher<fst::ReplaceFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::Search(uint64_t a1)
{
  int *v2;
  int v3;
  _QWORD *v4;
  int v5;
  int *v6;
  int *v7;
  int v8;
  int v9;
  BOOL v10;
  int v11;
  uint64_t v12;
  uint64_t result;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  int v18;
  int *v19;
  int *v20;
  int v21;
  int v22;
  _QWORD *v23;
  int v24;
  int *v25;
  int *v26;

  v2 = *(int **)(a1 + 24);
  if (*(_DWORD *)(a1 + 32))
    v3 = 2;
  else
    v3 = 1;
  fst::ArcIterator<fst::ReplaceFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::SetFlags(v2, v3, 15);
  if (*(_DWORD *)(a1 + 40) < *(_DWORD *)(a1 + 36))
  {
    v4 = *(_QWORD **)(a1 + 24);
    v4[4] = 0;
    if ((uint64_t)v4[6] < 1)
      return 0;
    while (1)
    {
      v5 = *(_DWORD *)(a1 + 32);
      v6 = fst::ArcIterator<fst::ReplaceFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::Value(v4);
      v7 = v6 + 1;
      if (!v5)
        v7 = v6;
      v8 = *v7;
      v9 = *(_DWORD *)(a1 + 40);
      v10 = v8 == v9;
      v11 = v8 <= v9 ? 0 : 7;
      if (v10)
        v11 = 1;
      if (v11)
        break;
      v4 = *(_QWORD **)(a1 + 24);
      v12 = v4[4] + 1;
      v4[4] = v12;
      if (v12 >= v4[6])
        return 0;
    }
    result = 0;
    if (v11 == 1)
      return 1;
    return result;
  }
  v14 = *(_QWORD *)(a1 + 48);
  if (!v14)
  {
    v15 = 0;
LABEL_35:
    result = 0;
    *(_QWORD *)(*(_QWORD *)(a1 + 24) + 32) = v15;
    return result;
  }
  v15 = 0;
  while (1)
  {
    v16 = (v14 + v15) >> 1;
    v17 = *(_QWORD **)(a1 + 24);
    v17[4] = v16;
    v18 = *(_DWORD *)(a1 + 32);
    v19 = fst::ArcIterator<fst::ReplaceFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::Value(v17);
    v20 = v19 + 1;
    if (!v18)
      v20 = v19;
    v21 = *v20;
    v22 = *(_DWORD *)(a1 + 40);
    if (v21 <= v22)
      break;
    v14 = (v14 + v15) >> 1;
LABEL_25:
    if (v15 >= v14)
      goto LABEL_35;
  }
  if (v21 < v22)
  {
    v15 = v16 + 1;
    goto LABEL_25;
  }
  while (v16 > v15)
  {
    v23 = *(_QWORD **)(a1 + 24);
    v23[4] = --v16;
    v24 = *(_DWORD *)(a1 + 32);
    v25 = fst::ArcIterator<fst::ReplaceFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::Value(v23);
    v26 = v25 + 1;
    if (!v24)
      v26 = v25;
    if (*v26 != *(_DWORD *)(a1 + 40))
    {
      *(_QWORD *)(*(_QWORD *)(a1 + 24) + 32) = v16 + 1;
      return 1;
    }
  }
  return 1;
}

BOOL fst::SortedMatcher<fst::ReplaceFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::Done(uint64_t a1)
{
  uint64_t v3;
  int v4;
  int v5;
  int *v6;
  int *v7;

  if (*(_BYTE *)(a1 + 72))
    return 0;
  v3 = *(_QWORD *)(a1 + 24);
  if (*(_QWORD *)(v3 + 32) >= *(_QWORD *)(v3 + 48))
    return 1;
  if (!*(_BYTE *)(a1 + 73))
    return 0;
  if (*(_DWORD *)(a1 + 32))
    v4 = 2;
  else
    v4 = 1;
  fst::ArcIterator<fst::ReplaceFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::SetFlags((int *)v3, v4, 15);
  v5 = *(_DWORD *)(a1 + 32);
  v6 = fst::ArcIterator<fst::ReplaceFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::Value(*(_QWORD **)(a1 + 24));
  v7 = v6 + 1;
  if (!v5)
    v7 = v6;
  return *v7 != *(_DWORD *)(a1 + 40);
}

int *fst::SortedMatcher<fst::ReplaceFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::Value(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 72))
    return (int *)(a1 + 56);
  fst::ArcIterator<fst::ReplaceFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::SetFlags(*(int **)(a1 + 24), 15, 15);
  return fst::ArcIterator<fst::ReplaceFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::Value(*(_QWORD **)(a1 + 24));
}

float fst::BackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::FinalNoPhiState(uint64_t a1, uint64_t a2, uint64_t a3)
{
  float result;
  uint64_t BackoffState;
  float v8;
  BOOL v9;
  float v10;
  float v11[3];

  result = (*(float (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 32))(*(_QWORD *)(a1 + 32));
  v11[2] = result;
  v11[1] = INFINITY;
  if (result == INFINITY)
  {
    BackoffState = fst::BackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::GetBackoffState(a1, a2, v11);
    if ((_DWORD)BackoffState == -1)
    {
      return INFINITY;
    }
    else
    {
      if (*(_QWORD *)a3)
        ++*(_DWORD *)(*(_QWORD *)a3 + 8);
      v8 = fst::BackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::FinalNoPhiState(a1, BackoffState, a3);
      result = NAN;
      if (v11[0] != -INFINITY && v8 != -INFINITY)
      {
        result = INFINITY;
        v9 = v8 == INFINITY || v11[0] == INFINITY;
        v10 = v11[0] + v8;
        if (!v9)
          return v10;
      }
    }
  }
  return result;
}

float fst::BackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::FinalUsingPhiState(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int *i;
  uint64_t v7;
  uint64_t v8;
  float v9;
  float v10;
  float result;
  BOOL v12;
  float v13;
  uint64_t BackoffState;
  float v15;
  float v16[2];
  float v17;

  for (i = *(int **)(a1 + 48); i != *(int **)(a1 + 56); ++i)
  {
    v17 = *(float *)i;
    if (!std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>((_QWORD *)(a1 + 72), (int *)&v17))
    {
      if (*(_BYTE *)(a1 + 40))
      {
        fst::SortedMatcher<fst::ReplaceFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::SetState(*(_QWORD *)(a1 + 128), a2);
        if (!fst::SortedMatcher<fst::ReplaceFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::Find(*(_QWORD *)(a1 + 128), SLODWORD(v17)))continue;
        v7 = (uint64_t)fst::SortedMatcher<fst::ReplaceFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::Value(*(_QWORD *)(a1 + 128));
      }
      else
      {
        fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::SetState(*(_QWORD *)(a1 + 112), a2);
        if (!fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Find(*(_QWORD *)(a1 + 112), SLODWORD(v17)))continue;
        v7 = fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Value(*(_QWORD *)(a1 + 112));
      }
      v9 = *(float *)(v7 + 8);
      v8 = *(unsigned int *)(v7 + 12);
      v16[0] = v9;
      if ((_DWORD)v8 != -1)
      {
        v10 = fst::BackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::FinalNoPhiState(a1, v8, a3);
        v17 = v10;
        v16[1] = INFINITY;
        if (v10 != INFINITY)
        {
          result = NAN;
          if (v9 != -INFINITY && v10 != -INFINITY)
          {
            result = INFINITY;
            v12 = v9 == INFINITY || v10 == INFINITY;
            v13 = v10 + v9;
LABEL_27:
            if (!v12)
              return v13;
          }
          return result;
        }
      }
    }
  }
  BackoffState = fst::BackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::GetBackoffState(a1, a2, v16);
  if ((_DWORD)BackoffState == -1)
    return INFINITY;
  if (*(_QWORD *)a3)
    ++*(_DWORD *)(*(_QWORD *)a3 + 8);
  v15 = fst::BackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::FinalUsingPhiState(a1, BackoffState, a3);
  result = NAN;
  if (v16[0] != -INFINITY && v15 != -INFINITY)
  {
    result = INFINITY;
    v12 = v15 == INFINITY || v16[0] == INFINITY;
    v13 = v16[0] + v15;
    goto LABEL_27;
  }
  return result;
}

_QWORD *_ZNSt3__115allocate_sharedB8ne180100IN3fst14BackoffArcInfoENS_9allocatorIS2_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v2;
  _QWORD *result;

  v2 = operator new(0x28uLL);
  result = _ZNSt3__120__shared_ptr_emplaceIN3fst14BackoffArcInfoENS_9allocatorIS2_EEEC2B8ne180100IJES4_Li0EEES4_DpOT_(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  return result;
}

void sub_1AD8ED878(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *_ZNSt3__120__shared_ptr_emplaceIN3fst14BackoffArcInfoENS_9allocatorIS2_EEEC2B8ne180100IJES4_Li0EEES4_DpOT_(_QWORD *a1)
{
  a1[2] = 0;
  *a1 = &unk_1E5D40F48;
  a1[1] = 0;
  fst::BackoffArcInfo::BackoffArcInfo((uint64_t)(a1 + 3));
  return a1;
}

void sub_1AD8ED8C4(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<fst::BackoffArcInfo>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D40F48;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<fst::BackoffArcInfo>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D40F48;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t std::__shared_ptr_emplace<fst::BackoffArcInfo>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t fst::BackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::GetBackoffState(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  int *v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  int *v11;
  uint64_t v12;

  if (!*(_BYTE *)(a1 + 40))
  {
    v8 = *(_QWORD **)(a1 + 120);
    if (v8)
    {
      fst::ArcIterator<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Reinit(v8, *(_QWORD *)(a1 + 32), a2);
      v9 = *(_QWORD **)(a1 + 120);
    }
    else
    {
      v9 = (_QWORD *)operator new();
      v12 = *(_QWORD *)(a1 + 32);
      v9[4] = 0;
      (*(void (**)(uint64_t, uint64_t, _QWORD *))(*(_QWORD *)v12 + 136))(v12, a2, v9);
      *(_QWORD *)(a1 + 120) = v9;
    }
    if (*v9)
    {
      if (((*(uint64_t (**)(_QWORD))(*(_QWORD *)*v9 + 24))(*v9) & 1) == 0)
      {
        v9 = *(_QWORD **)(a1 + 120);
        if (*v9)
        {
          v11 = (int *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)*v9 + 32))(*v9);
          goto LABEL_16;
        }
        goto LABEL_15;
      }
    }
    else if (v9[4] < v9[2])
    {
LABEL_15:
      v11 = (int *)(v9[1] + 16 * v9[4]);
      goto LABEL_16;
    }
    return 0xFFFFFFFFLL;
  }
  v6 = *(int **)(a1 + 136);
  if (v6)
  {
    fst::ArcIterator<fst::ReplaceFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::Reinit(v6, *(_QWORD *)(a1 + 32), a2);
    v7 = *(_QWORD *)(a1 + 136);
  }
  else
  {
    v7 = operator new();
    *(_QWORD *)v7 = *(_QWORD *)(a1 + 32);
    *(_DWORD *)(v7 + 8) = a2;
    *(_QWORD *)(v7 + 16) = -1;
    *(_QWORD *)(v7 + 24) = -1;
    *(_QWORD *)(v7 + 32) = 0;
    *(_QWORD *)(v7 + 40) = 0;
    *(_DWORD *)(v7 + 56) = 15;
    *(_DWORD *)(v7 + 196) = 0;
    *(_QWORD *)(v7 + 80) = 0;
    *(_QWORD *)(v7 + 136) = 0;
    *(_QWORD *)(v7 + 104) = 0;
    *(_QWORD *)(v7 + 112) = 0;
    *(_QWORD *)(v7 + 160) = 0;
    *(_QWORD *)(v7 + 168) = 0;
    *(_QWORD *)(v7 + 152) = 0;
    *(_DWORD *)(v7 + 176) = 0;
    fst::ArcIterator<fst::ReplaceFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::Reinit_((int *)v7);
    *(_QWORD *)(a1 + 136) = v7;
  }
  fst::ArcIterator<fst::ReplaceFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::SetFlags((int *)v7, 16, 16);
  fst::ArcIterator<fst::ReplaceFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::SetFlags(*(int **)(a1 + 136), 1, 15);
  fst::ArcIterator<fst::ReplaceFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::SetFlags(*(int **)(a1 + 136), 8, 8);
  v10 = *(_QWORD **)(a1 + 136);
  if (v10[4] >= v10[6])
    return 0xFFFFFFFFLL;
  v11 = fst::ArcIterator<fst::ReplaceFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::Value(v10);
LABEL_16:
  if (*v11)
    return 0xFFFFFFFFLL;
  *a3 = v11[2];
  return v11[3];
}

void sub_1AD8EDAF0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x1070C401ACC3EEFLL);
  _Unwind_Resume(a1);
}

uint64_t fst::BackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::GetNonPhiArc(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _OWORD *v10;
  uint64_t result;
  uint64_t BackoffState;
  float v13;
  float v14;
  BOOL v15;
  float v16;
  float v17[3];

  if (*(_BYTE *)(a1 + 40))
  {
    fst::SortedMatcher<fst::ReplaceFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::SetState(*(_QWORD *)(a1 + 128), a2);
    if (fst::SortedMatcher<fst::ReplaceFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::Find(*(_QWORD *)(a1 + 128), a3))
    {
      v10 = fst::SortedMatcher<fst::ReplaceFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::Value(*(_QWORD *)(a1 + 128));
LABEL_6:
      *(_OWORD *)a4 = *v10;
      return 1;
    }
  }
  else
  {
    fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::SetState(*(_QWORD *)(a1 + 112), a2);
    if (fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Find(*(_QWORD *)(a1 + 112), a3))
    {
      v10 = (_OWORD *)fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Value(*(_QWORD *)(a1 + 112));
      goto LABEL_6;
    }
  }
  BackoffState = fst::BackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::GetBackoffState(a1, a2, v17);
  if ((_DWORD)BackoffState == -1)
    return 0;
  v17[2] = v17[0];
  v17[1] = INFINITY;
  if (v17[0] == INFINITY)
  {
    result = 0;
    *(_DWORD *)(a4 + 8) = 2139095040;
  }
  else
  {
    result = fst::BackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::GetNonPhiArc(a1, BackoffState, a3, a4, a5, v17[0]);
    if ((_DWORD)result)
    {
      v13 = *(float *)(a4 + 8);
      v14 = NAN;
      if (v13 != -INFINITY)
      {
        v14 = NAN;
        if (v17[0] != -INFINITY)
        {
          v14 = INFINITY;
          v15 = v17[0] == INFINITY || v13 == INFINITY;
          v16 = v13 + v17[0];
          if (!v15)
            v14 = v16;
        }
      }
      *(float *)(a4 + 8) = v14;
      if (*(_QWORD *)a5)
        ++*(_DWORD *)(*(_QWORD *)a5 + 8);
      return 1;
    }
  }
  return result;
}

uint64_t fst::BackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::~BackoffDeterministicOnDemandFst(uint64_t a1)
{
  _QWORD *v2;
  _DWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void **v11;

  *(_QWORD *)a1 = &unk_1E5D22268;
  v2 = *(_QWORD **)(a1 + 120);
  if (v2)
  {
    if (*v2)
    {
      (*(void (**)(_QWORD))(*(_QWORD *)*v2 + 8))(*v2);
    }
    else
    {
      v3 = (_DWORD *)v2[3];
      if (v3)
        --*v3;
    }
    MEMORY[0x1AF44D190](v2, 0x1070C401ACC3EEFLL);
  }
  v4 = *(_QWORD *)(a1 + 112);
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v5 = *(_QWORD **)(a1 + 136);
  if (v5)
  {
    v6 = fst::ArcIterator<fst::ReplaceFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::~ArcIterator(v5);
    MEMORY[0x1AF44D190](v6, 0x1070C40BAB1B673);
  }
  v7 = *(_QWORD *)(a1 + 128);
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  if (*(_BYTE *)(a1 + 41))
  {
    v8 = *(_QWORD *)(a1 + 32);
    if (v8)
      (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  }
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(a1 + 72);
  v9 = *(void **)(a1 + 48);
  if (v9)
  {
    *(_QWORD *)(a1 + 56) = v9;
    operator delete(v9);
  }
  v11 = (void **)(a1 + 8);
  std::vector<fst::FstWithLabel<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::__destroy_vector::operator()[abi:ne180100](&v11);
  return a1;
}

float fst::BackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::ComputeFinalEosRecursively(uint64_t a1, uint64_t a2)
{
  float result;
  int *i;
  uint64_t v6;
  int v7;
  float v8;
  BOOL v9;
  float v10;
  float v11;
  int v12;

  result = (*(float (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 32))(*(_QWORD *)(a1 + 32));
  v12 = LODWORD(result);
  v11 = INFINITY;
  if (result != INFINITY)
    return result;
  for (i = *(int **)(a1 + 48); i != *(int **)(a1 + 56); ++i)
  {
    v12 = *i;
    if (!std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>((_QWORD *)(a1 + 72), &v12))
    {
      if (*(_BYTE *)(a1 + 40))
      {
        fst::SortedMatcher<fst::ReplaceFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::SetState(*(_QWORD *)(a1 + 128), a2);
        if (fst::SortedMatcher<fst::ReplaceFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::Find(*(_QWORD *)(a1 + 128), v12))
        {
          v6 = (uint64_t)fst::SortedMatcher<fst::ReplaceFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::Value(*(_QWORD *)(a1 + 128));
          goto LABEL_10;
        }
      }
      else
      {
        fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::SetState(*(_QWORD *)(a1 + 112), a2);
        if (fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Find(*(_QWORD *)(a1 + 112), v12))
        {
          v6 = fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Value(*(_QWORD *)(a1 + 112));
LABEL_10:
          v7 = *(_DWORD *)(v6 + 12);
          v11 = *(float *)(v6 + 8);
          if (v7 != -1)
            goto LABEL_13;
        }
      }
    }
  }
  if (fst::BackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::GetBackoffState(a1, a2, &v11) == -1)return INFINITY;
LABEL_13:
  v8 = fst::BackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::ComputeFinalEosRecursively(a1);
  result = NAN;
  if (v11 != -INFINITY && v8 != -INFINITY)
  {
    result = INFINITY;
    v9 = v8 == INFINITY || v11 == INFINITY;
    v10 = v11 + v8;
    if (!v9)
      return v10;
  }
  return result;
}

void std::__shared_ptr_pointer<fst::BackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t std::__shared_ptr_pointer<fst::BackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> *>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 48))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<fst::BackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> *>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

_QWORD *fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::CacheDeterministicOnDemandFst(_QWORD *a1, _QWORD *a2, unint64_t a3)
{
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  *a1 = &unk_1E5D22218;
  v4 = a2[1];
  a1[1] = *a2;
  a1[2] = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  fst::MultiWayArcCache<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::MultiWayArcCache(a1 + 3, a3, 8uLL);
  a1[7] = 0;
  a1[8] = 0;
  return a1;
}

void sub_1AD8EE030(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Start(uint64_t a1)
{
  return (***(uint64_t (****)(_QWORD))(a1 + 8))(*(_QWORD *)(a1 + 8));
}

uint64_t fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Final(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 8))(*(_QWORD *)(a1 + 8));
}

uint64_t fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::GetArc(uint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4, uint64_t a5)
{
  uint64_t v10;
  char v11;
  uint64_t result;

  v10 = fst::MultiWayArcCache<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::Find((uint64_t *)(a1 + 24), a2, a3);
  if (v11)
  {
    result = 0;
    ++*(_QWORD *)(a1 + 56);
    if (*(float *)(v10 + 8) == -INFINITY)
      return result;
    *a4 = *(_OWORD *)v10;
  }
  else
  {
    ++*(_QWORD *)(a1 + 64);
    result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, _OWORD *, uint64_t))(**(_QWORD **)(a1 + 8) + 24))(*(_QWORD *)(a1 + 8), a2, a3, a4, a5);
    if (!(_DWORD)result)
      return result;
    *(_OWORD *)v10 = *a4;
  }
  return 1;
}

void fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::~CacheDeterministicOnDemandFst(_QWORD *a1)
{
  fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::~CacheDeterministicOnDemandFst(a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::FinalEos(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
}

_QWORD *fst::MultiWayArcCache<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::MultiWayArcCache(_QWORD *a1, unint64_t a2, unint64_t a3)
{
  char v4;
  BOOL v5;
  unint64_t v6;
  char v7;
  unint64_t v8;
  unint64_t v9;
  _DWORD *v10;
  _DWORD *v11;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v4 = -1;
  do
  {
    ++v4;
    v5 = a3 > 1;
    a3 >>= 1;
  }
  while (v5);
  v6 = 1 << v4;
  a1[3] = v6;
  v7 = -1;
  do
  {
    ++v7;
    v5 = a2 > 1;
    a2 >>= 1;
  }
  while (v5);
  v8 = 1 << v7;
  if (v8 <= v6)
    v9 = v6;
  else
    v9 = v8;
  std::vector<std::pair<int,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::resize((uint64_t)a1, v9);
  v10 = (_DWORD *)*a1;
  v11 = (_DWORD *)a1[1];
  if ((_DWORD *)*a1 != v11)
  {
    do
    {
      *v10 = -1;
      v10 += 5;
    }
    while (v10 != v11);
  }
  return a1;
}

void sub_1AD8EE1F4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<std::pair<int,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;

  v2 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 2);
  v3 = a2 >= v2;
  v4 = a2 - v2;
  if (v4 != 0 && v3)
  {
    std::vector<std::pair<int,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::__append((void **)a1, v4);
  }
  else if (!v3)
  {
    *(_QWORD *)(a1 + 8) = *(_QWORD *)a1 + 20 * a2;
  }
}

void std::vector<std::pair<int,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::__append(void **a1, unint64_t a2)
{
  uint64_t v4;
  _BYTE *v5;
  _BYTE *v6;
  _DWORD *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  _DWORD *v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  char *v18;
  char *v19;
  char *v20;
  char *v21;
  __int128 v22;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_DWORD **)(v4 - 8);
  if (0xCCCCCCCCCCCCCCCDLL * ((v6 - (_BYTE *)v7) >> 2) >= a2)
  {
    if (a2)
    {
      v13 = &v7[5 * a2];
      v14 = 20 * a2;
      do
      {
        *v7 = 0;
        v7 += 5;
        v14 -= 20;
      }
      while (v14);
      v7 = v13;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = 0xCCCCCCCCCCCCCCCDLL * (((char *)v7 - (_BYTE *)*a1) >> 2);
    v9 = v8 + a2;
    if (v8 + a2 > 0xCCCCCCCCCCCCCCCLL)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v10 = 0xCCCCCCCCCCCCCCCDLL * ((v5 - (_BYTE *)*a1) >> 2);
    if (2 * v10 > v9)
      v9 = 2 * v10;
    if (v10 >= 0x666666666666666)
      v11 = 0xCCCCCCCCCCCCCCCLL;
    else
      v11 = v9;
    if (v11)
      v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>(v4, v11);
    else
      v12 = 0;
    v15 = &v12[20 * v8];
    v16 = &v15[20 * a2];
    v17 = 20 * a2;
    v18 = v15;
    do
    {
      *(_DWORD *)v18 = 0;
      v18 += 20;
      v17 -= 20;
    }
    while (v17);
    v19 = &v12[20 * v11];
    v21 = (char *)*a1;
    v20 = (char *)a1[1];
    if (v20 != *a1)
    {
      do
      {
        v22 = *(_OWORD *)(v20 - 20);
        *((_DWORD *)v15 - 1) = *((_DWORD *)v20 - 1);
        *(_OWORD *)(v15 - 20) = v22;
        v15 -= 20;
        v20 -= 20;
      }
      while (v20 != v21);
      v20 = (char *)*a1;
    }
    *a1 = v15;
    a1[1] = v16;
    a1[2] = v19;
    if (v20)
      operator delete(v20);
  }
}

uint64_t fst::MultiWayArcCache<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::Find(uint64_t *a1, unsigned int a2, unsigned int a3)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _DWORD *v6;
  uint64_t v7;
  unint64_t v8;
  unsigned int *v10;
  uint64_t v11;
  int *v12;
  int v13;
  uint64_t v14;
  int *v15;
  int v16;
  uint64_t v17;
  __int128 v19;

  v3 = *a1;
  v4 = a1[3];
  v5 = (26597 * a2 + 50329 * (int)a3) & -v4 & (0xCCCCCCCCCCCCCCCDLL * ((a1[1] - *a1) >> 2) - 1);
  if (v4)
  {
    v6 = (_DWORD *)(v3 + 20 * v5 + 4);
    v7 = a1[3];
    v8 = (26597 * a2 + 50329 * (int)a3) & -v4 & (0xCCCCCCCCCCCCCCCDLL * ((a1[1] - *a1) >> 2) - 1);
    while (*(v6 - 1) != a2 || *v6 != a3)
    {
      v6 += 5;
      ++v8;
      if (!--v7)
        goto LABEL_8;
    }
  }
  else
  {
LABEL_8:
    v8 = v5 + v4 - 1;
    v10 = (unsigned int *)(v3 + 20 * v8);
    *v10 = a2;
    v10[1] = a3;
    v10[3] = 2143289344;
    v3 = *a1;
  }
  if (v8 != v5)
  {
    v11 = 5 * v8;
    v12 = (int *)(v3 + 4 * v11);
    v13 = *v12;
    v19 = *(_OWORD *)(v12 + 1);
    v14 = 20 * v5 - 4 * v11;
    v15 = v12;
    do
    {
      v16 = *(v15 - 5);
      v15 -= 5;
      *v12 = v16;
      *(_OWORD *)(v12 + 1) = *((_OWORD *)v12 - 1);
      v12 = v15;
      v14 += 20;
    }
    while (v14);
    v17 = *a1 + 20 * v5;
    *(_DWORD *)v17 = v13;
    *(_OWORD *)(v17 + 4) = v19;
    v3 = *a1;
  }
  return v3 + 20 * v5 + 4;
}

_QWORD *fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::~CacheDeterministicOnDemandFst(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;
  _QWORD v6[34];

  *a1 = &unk_1E5D22218;
  if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v6);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"CacheDeterministicOnDemandFst cache hit rate = ", 47);
    v2 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"/", 1);
    v3 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)", size = ", 9);
    std::ostream::operator<<();
    kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)v6);
  }
  v4 = (void *)a1[3];
  if (v4)
  {
    a1[4] = v4;
    operator delete(v4);
  }
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  return a1;
}

void std::__shared_ptr_pointer<fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t std::__shared_ptr_pointer<fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> *>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 48))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> *>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::getPlaceholder(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  if (quasar::isPlaceholder((unsigned __int8 *)a1))
  {
    if (*(char *)(a1 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(a2, *(const std::string::value_type **)a1, *(_QWORD *)(a1 + 8));
    }
    else
    {
      *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)a1;
      a2->__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 16);
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(a2, "");
  }
}

uint64_t fst::BackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::BackoffDeterministicOnDemandFst(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int32x2_t *v5;

  *(_QWORD *)a1 = &unk_1E5D22268;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_WORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((_QWORD *)(a1 + 48), *(const void **)a3, *(_QWORD *)(a3 + 8), (uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 2);
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_DWORD *)(a1 + 104) = 1065353216;
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 32) = a2;
  v5 = (int32x2_t *)operator new();
  fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::SortedMatcher(v5, *(_QWORD *)(a1 + 32), 0, 1);
  *(_QWORD *)(a1 + 112) = v5;
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 136) = 0;
  return a1;
}

void sub_1AD8EE75C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  void **v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v8;
  va_list va;

  va_start(va, a2);
  v6 = v5;
  MEMORY[0x1AF44D190](v6, 0x10E1C4003B7394BLL);
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(v4);
  v8 = *v3;
  if (*v3)
  {
    *(_QWORD *)(v2 + 56) = v8;
    operator delete(v8);
  }
  std::vector<fst::FstWithLabel<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t kaldi::quasar::RecurrentNeuralDeterministicFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::RecurrentNeuralDeterministicFst(uint64_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4, _QWORD *a5, char a6, int **a7, uint64_t a8, float a9, uint64_t a10)
{
  uint64_t v14;
  Ngram *v15;
  unsigned int v16;
  unint64_t v17;
  unsigned int v18;
  float *v19;
  _QWORD *v20;
  int *v21;
  _QWORD *v22;
  uint64_t *v23;
  uint64_t *v24;
  float *v25;
  int v26;
  _QWORD *v27;
  int v28;
  _QWORD *v29;
  _QWORD *v30;
  uint64_t v31;
  int v32;
  float *v33;
  int v34;
  BOOL v35;
  uint64_t *v36;
  double v37;
  int *v38;
  int *v39;
  uint64_t *v40;
  uint64_t *v41;
  int v42;
  _QWORD *v43;
  int v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  kaldi::quasar::NnlmDecoderWord *v48;
  unsigned int v49;
  unint64_t v50;
  uint64_t v51;
  int v52;
  int v53;
  float v54;
  uint64_t *v57;
  uint64_t v58;
  uint64_t v59;
  _QWORD *v60;
  uint64_t v61;
  _QWORD *v62;
  char **v63;
  _QWORD *v64;
  _QWORD *v65;
  _QWORD *v66;
  uint64_t v67;
  std::vector<int> v68;
  int WordId;
  std::vector<int>::value_type __x[2];

  v14 = a1;
  *(_QWORD *)a1 = &unk_1E5D33F90;
  *(_QWORD *)(a1 + 8) = a2;
  v15 = *(Ngram **)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v15;
  *(_OWORD *)(a1 + 40) = 0u;
  v58 = a1 + 40;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_DWORD *)(a1 + 72) = 1065353216;
  *(_QWORD *)(a1 + 80) = 0;
  v57 = (uint64_t *)(a1 + 80);
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = 0x100000000;
  *(_OWORD *)(a1 + 120) = 0u;
  v65 = (_QWORD *)(a1 + 120);
  *(_OWORD *)(a1 + 136) = 0u;
  *(_DWORD *)(a1 + 152) = 1065353216;
  *(_OWORD *)(a1 + 160) = 0u;
  v66 = (_QWORD *)(a1 + 160);
  *(_OWORD *)(a1 + 176) = 0u;
  *(_DWORD *)(a1 + 192) = 1065353216;
  *(_OWORD *)(a1 + 200) = 0u;
  v67 = a1 + 200;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_DWORD *)(a1 + 232) = 1065353216;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_DWORD *)(a1 + 272) = 1065353216;
  *(_OWORD *)(a1 + 280) = 0u;
  v62 = (_QWORD *)(a1 + 280);
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  v61 = a1 + 320;
  *(_DWORD *)(a1 + 312) = 1065353216;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_DWORD *)(a1 + 352) = 1065353216;
  *(_QWORD *)(a1 + 360) = 0;
  v63 = (char **)(a1 + 360);
  v64 = (_QWORD *)(a1 + 240);
  *(_QWORD *)(a1 + 368) = 0;
  *(_QWORD *)(a1 + 376) = 0;
  *(_BYTE *)(a1 + 384) = a6;
  *(float *)(a1 + 388) = a9;
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 464);
  v16 = Ngram::getorder(v15);
  *(_DWORD *)(v14 + 28) = kaldi::quasar::NnlmDecoderWord::GetWordId(v15, v16);
  if (v66 != (_QWORD *)a10)
  {
    *(_DWORD *)(v14 + 192) = *(_DWORD *)(a10 + 32);
    std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<long long,void *> *>>(v66, *(_QWORD **)(a10 + 16), 0);
  }
  if (a4[1] != *a4)
  {
    v17 = 0;
    v18 = 0;
    v19 = (float *)(a8 + 8);
    v59 = v14;
    v60 = a3;
    do
    {
      WordId = 0;
      WordId = kaldi::quasar::NnlmDecoderWord::GetWordId(*(kaldi::quasar::NnlmDecoderWord **)(v14 + 16), *(_DWORD *)(*a3 + 4 * v17));
      if (WordId == *(_DWORD *)(v14 + 28))
      {
        if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
        {
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v68);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v68, (uint64_t)"The LME class ", 14);
          v20 = (_QWORD *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)" is not modeled by the NNLM", 27);
          kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)&v68);
        }
      }
      else
      {
        std::vector<std::shared_ptr<quasar::FeatureExtractor>>::push_back[abi:ne180100](v63, (__int128 *)(*a4 + 16 * v17));
        std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::__emplace_unique_key_args<int,int const&>((uint64_t)v65, (int *)(*a3 + 4 * v17), (_DWORD *)(*a3 + 4 * v17));
        *(_QWORD *)__x = &WordId;
        *((_DWORD *)std::__hash_table<std::__hash_value_type<int,float>,std::__unordered_map_hasher<int,std::__hash_value_type<int,float>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,float>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,float>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int &&>,std::tuple<>>((uint64_t)v64, &WordId, (uint64_t)&std::piecewise_construct, (_DWORD **)__x)+ 5) = v18;
        if (std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>(a5, (int *)(*a3 + 4 * v17)))
        {
          v21 = (int *)(*a3 + 4 * v17);
          v22 = a5;
          v23 = std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>(a5, v21);
          v24 = v23;
          if (!v23)
            std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
          v25 = v19;
          v26 = *v21;
          *(_QWORD *)__x = (char *)v23 + 20;
          v27 = std::__hash_table<std::__hash_value_type<int,std::pair<int,kaldi::quasar::ClassLmSymbolType>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::pair<int,kaldi::quasar::ClassLmSymbolType>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::pair<int,kaldi::quasar::ClassLmSymbolType>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::pair<int,kaldi::quasar::ClassLmSymbolType>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t)v62, (int *)v23 + 5, (uint64_t)&std::piecewise_construct, (_DWORD **)__x);
          *((_DWORD *)v27 + 5) = v26;
          *((_DWORD *)v27 + 6) = 1;
          v28 = *v21;
          *(_QWORD *)__x = v24 + 3;
          v29 = std::__hash_table<std::__hash_value_type<int,std::pair<int,kaldi::quasar::ClassLmSymbolType>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::pair<int,kaldi::quasar::ClassLmSymbolType>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::pair<int,kaldi::quasar::ClassLmSymbolType>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::pair<int,kaldi::quasar::ClassLmSymbolType>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t)v62, (int *)v24 + 6, (uint64_t)&std::piecewise_construct, (_DWORD **)__x);
          *((_DWORD *)v29 + 5) = v28;
          *((_DWORD *)v29 + 6) = 2;
          *(_QWORD *)__x = v21;
          v30 = std::__hash_table<std::__hash_value_type<int,std::pair<int,kaldi::quasar::ClassLmSymbolType>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::pair<int,kaldi::quasar::ClassLmSymbolType>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::pair<int,kaldi::quasar::ClassLmSymbolType>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::pair<int,kaldi::quasar::ClassLmSymbolType>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t)v62, v21, (uint64_t)&std::piecewise_construct, (_DWORD **)__x);
          *((_DWORD *)v30 + 5) = v18;
          *((_DWORD *)v30 + 6) = 0;
          v19 = v25;
          v31 = *(_QWORD *)v25;
          a5 = v22;
          v14 = v59;
          a3 = v60;
          if (!v31)
            goto LABEL_20;
          v32 = *v21;
          v33 = v19;
          do
          {
            v34 = *(_DWORD *)(v31 + 28);
            v35 = v34 < v32;
            if (v34 >= v32)
              v36 = (uint64_t *)v31;
            else
              v36 = (uint64_t *)(v31 + 8);
            if (!v35)
              v33 = (float *)v31;
            v31 = *v36;
          }
          while (*v36);
          if (v33 != v19 && v32 >= *((_DWORD *)v33 + 7))
            v37 = v33[8];
          else
LABEL_20:
            v37 = 1.0;
          v68.__begin_ = (std::vector<int>::pointer)v18;
          *(double *)&v68.__end_ = v37;
          std::__hash_table<std::__hash_value_type<int,float>,std::__unordered_map_hasher<int,std::__hash_value_type<int,float>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,float>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,float>>>::__emplace_unique_key_args<int,std::pair<int,double>>(v61, (int *)&v68, (uint64_t)&v68);
        }
        v68.__begin_ = (std::vector<int>::pointer)*(int *)(*a3 + 4 * v17);
        std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::__erase_unique<long long>(v66, (unint64_t *)&v68);
        ++v18;
      }
      ++v17;
    }
    while (v17 < (uint64_t)(a4[1] - *a4) >> 4);
  }
  v38 = *a7;
  v39 = a7[1];
  if (*a7 != v39)
  {
    do
    {
      v40 = std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>(a5, v38);
      v41 = v40;
      if (!v40)
        std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
      v42 = *v38;
      *(_QWORD *)__x = (char *)v40 + 20;
      v43 = std::__hash_table<std::__hash_value_type<int,std::pair<int,kaldi::quasar::ClassLmSymbolType>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::pair<int,kaldi::quasar::ClassLmSymbolType>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::pair<int,kaldi::quasar::ClassLmSymbolType>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::pair<int,kaldi::quasar::ClassLmSymbolType>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(v67, (int *)v40 + 5, (uint64_t)&std::piecewise_construct, (_DWORD **)__x);
      *((_DWORD *)v43 + 5) = v42;
      *((_DWORD *)v43 + 6) = 1;
      v44 = *v38;
      *(_QWORD *)__x = v41 + 3;
      v45 = std::__hash_table<std::__hash_value_type<int,std::pair<int,kaldi::quasar::ClassLmSymbolType>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::pair<int,kaldi::quasar::ClassLmSymbolType>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::pair<int,kaldi::quasar::ClassLmSymbolType>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::pair<int,kaldi::quasar::ClassLmSymbolType>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(v67, (int *)v41 + 6, (uint64_t)&std::piecewise_construct, (_DWORD **)__x);
      *((_DWORD *)v45 + 5) = v44;
      *((_DWORD *)v45 + 6) = 2;
      ++v38;
    }
    while (v38 != v39);
  }
  v47 = *(_QWORD *)(v14 + 360);
  v46 = *(_QWORD *)(v14 + 368);
  if (*(_QWORD *)(v14 + 264) < (unint64_t)((v46 - v47) >> 4))
  {
    if (kaldi::g_kaldi_verbose_level >= -1)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v68);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v68, (uint64_t)"multiple LME FSTs are mapped into the same non-terminals classes, wrong config?", 79);
      kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v68);
      v47 = *(_QWORD *)(v14 + 360);
      v46 = *(_QWORD *)(v14 + 368);
    }
    while (v46 != v47)
      v46 = std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](v46 - 16);
    *(_QWORD *)(v14 + 368) = v47;
    std::__hash_table<std::__hash_value_type<int,float>,std::__unordered_map_hasher<int,std::__hash_value_type<int,float>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,float>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,float>>>::clear(v65);
    std::__hash_table<std::__hash_value_type<int,float>,std::__unordered_map_hasher<int,std::__hash_value_type<int,float>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,float>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,float>>>::clear(v64);
    std::__hash_table<std::__hash_value_type<int,float>,std::__unordered_map_hasher<int,std::__hash_value_type<int,float>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,float>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,float>>>::clear(v62);
  }
  *(_DWORD *)(v14 + 112) = kaldi::MatrixBase<float>::NumCols(*(_QWORD *)(v14 + 16)) + 1;
  v48 = *(kaldi::quasar::NnlmDecoderWord **)(v14 + 16);
  v49 = kaldi::quasar::NnlmDecoderWord::BosSymbol(v48);
  __x[0] = kaldi::quasar::NnlmDecoderWord::GetWordId(v48, v49);
  std::vector<int>::vector(&v68, 1uLL, __x);
  LODWORD(v48) = *(_DWORD *)(v14 + 104);
  *(_QWORD *)__x = &v68;
  *((_DWORD *)std::__hash_table<std::__hash_value_type<std::vector<int>,int>,std::__unordered_map_hasher<std::vector<int>,std::__hash_value_type<std::vector<int>,int>,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>,true>,std::__unordered_map_equal<std::vector<int>,std::__hash_value_type<std::vector<int>,int>,std::equal_to<std::vector<int>>,kaldi::VectorHasher<int>,true>,std::allocator<std::__hash_value_type<std::vector<int>,int>>>::__emplace_unique_key_args<std::vector<int>,std::piecewise_construct_t const&,std::tuple<std::vector<int> const&>,std::tuple<>>(v58, &v68.__begin_, (uint64_t)&std::piecewise_construct, (uint64_t *)__x)+ 10) = (_DWORD)v48;
  v50 = *(_QWORD *)(v14 + 88);
  if (v50 >= *(_QWORD *)(v14 + 96))
  {
    v51 = std::vector<std::vector<int>>::__push_back_slow_path<std::vector<int> const&>(v57, (uint64_t)&v68);
  }
  else
  {
    std::vector<std::vector<int>>::__construct_one_at_end[abi:ne180100]<std::vector<int> const&>((uint64_t)v57, (uint64_t)&v68);
    v51 = v50 + 24;
  }
  *(_QWORD *)(v14 + 88) = v51;
  v52 = quasar::artifact::AppLmArtifactLifeCycleStage::operator int(*(_QWORD *)(v14 + 16));
  v53 = kaldi::MatrixBase<float>::NumCols(*(_QWORD *)(v14 + 16));
  v54 = log((double)(v52 - v53 + 1));
  *(float *)(v14 + 32) = v54;
  if (v68.__begin_)
  {
    v68.__end_ = v68.__begin_;
    operator delete(v68.__begin_);
  }
  return v14;
}

void sub_1AD8EED7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23)
{
  kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
  __p = a17;
  std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(a15);
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(a16);
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(a18);
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(a21);
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(a20);
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(a19);
  __p = a11;
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  std::__hash_table<std::__hash_value_type<std::vector<int>,int>,std::__unordered_map_hasher<std::vector<int>,std::__hash_value_type<std::vector<int>,int>,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>,true>,std::__unordered_map_equal<std::vector<int>,std::__hash_value_type<std::vector<int>,int>,std::equal_to<std::vector<int>>,kaldi::VectorHasher<int>,true>,std::allocator<std::__hash_value_type<std::vector<int>,int>>>::~__hash_table(a12);
  _Unwind_Resume(a1);
}

uint64_t kaldi::quasar::RecurrentNeuralDeterministicFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::Start(uint64_t a1)
{
  return *(unsigned int *)(a1 + 104);
}

float kaldi::quasar::RecurrentNeuralDeterministicFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::Final(uint64_t a1, int a2)
{
  uint64_t v4;
  float v5;
  _BYTE *v6;
  int v7;
  char *v8;
  float v9;
  uint64_t v10;
  uint64_t v11;
  kaldi::quasar::CEAttnEncoderDecoder *v12;
  unsigned int v13;
  int WordId;
  int v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char *v23;
  char *v24;
  char *v25;
  int v26;
  float v27;
  BOOL v28;
  float v29;
  void *__p;
  char *v32;
  unint64_t v33;
  char *v34;
  int v35;

  v4 = *(_QWORD *)(a1 + 80) + 24 * a2;
  __p = 0;
  v32 = 0;
  v33 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, *(const void **)v4, *(_QWORD *)(v4 + 8), (uint64_t)(*(_QWORD *)(v4 + 8) - *(_QWORD *)v4) >> 2);
  v5 = *(float *)(a1 + 388);
  if (v5 < 0.0 || *(_DWORD *)(a1 + 104) != a2)
  {
    v6 = __p;
    v7 = *(_DWORD *)(a1 + 112);
    if (*(_DWORD *)__p / v7 >= 1)
      *(int *)__p %= v7;
    v8 = v32;
    v9 = 0.0;
    if ((unint64_t)(v32 - v6) >= 0xD
      && *((_DWORD *)v32 - 2) == *(_DWORD *)(a1 + 112)
      && (v10 = *((unsigned int *)v32 - 1),
          v32 -= 8,
          v34 = v8 - 12,
          v11 = *(_QWORD *)(*(_QWORD *)(a1 + 360)
                          + 16
                          * *((unsigned int *)std::__hash_table<std::__hash_value_type<int,float>,std::__unordered_map_hasher<int,std::__hash_value_type<int,float>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,float>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,float>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int &&>,std::tuple<>>(a1 + 240, (int *)v8 - 3, (uint64_t)&std::piecewise_construct, (_DWORD **)&v34)+ 5)), v9 = (*(float (**)(uint64_t, uint64_t))(*(_QWORD *)v11 + 16))(v11, v10), *(float *)&v34 = v9, v35 = 2139095040, v9 == INFINITY))
    {
      v5 = INFINITY;
    }
    else
    {
      v12 = *(kaldi::quasar::CEAttnEncoderDecoder **)(a1 + 16);
      v13 = kaldi::quasar::CEAttnEncoderDecoder::BlankIndex(v12);
      WordId = kaldi::quasar::NnlmDecoderWord::GetWordId(v12, v13);
      v15 = WordId;
      v16 = v32;
      if ((unint64_t)v32 >= v33)
      {
        v18 = (char *)__p;
        v19 = (v32 - (_BYTE *)__p) >> 2;
        v20 = v19 + 1;
        if ((unint64_t)(v19 + 1) >> 62)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v21 = v33 - (_QWORD)__p;
        if ((uint64_t)(v33 - (_QWORD)__p) >> 1 > v20)
          v20 = v21 >> 1;
        if ((unint64_t)v21 >= 0x7FFFFFFFFFFFFFFCLL)
          v22 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v22 = v20;
        if (v22)
        {
          v23 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v33, v22);
          v18 = (char *)__p;
          v16 = v32;
        }
        else
        {
          v23 = 0;
        }
        v24 = &v23[4 * v19];
        v25 = &v23[4 * v22];
        *(_DWORD *)v24 = v15;
        v17 = v24 + 4;
        while (v16 != v18)
        {
          v26 = *((_DWORD *)v16 - 1);
          v16 -= 4;
          *((_DWORD *)v24 - 1) = v26;
          v24 -= 4;
        }
        __p = v24;
        v32 = v17;
        v33 = (unint64_t)v25;
        if (v18)
          operator delete(v18);
      }
      else
      {
        *(_DWORD *)v32 = WordId;
        v17 = v16 + 4;
      }
      v32 = v17;
      (*(void (**)(_QWORD, void **))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8), &__p);
      v5 = NAN;
      if (v9 != -INFINITY && v27 != -INFINITY)
      {
        v28 = v27 == INFINITY || v9 == INFINITY;
        v29 = v9 + v27;
        if (v28)
          v5 = INFINITY;
        else
          v5 = v29;
      }
    }
  }
  if (__p)
  {
    v32 = (char *)__p;
    operator delete(__p);
  }
  return v5;
}

void sub_1AD8EF0F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t kaldi::quasar::RecurrentNeuralDeterministicFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::GetArc(uint64_t a1, unsigned int a2, uint64_t a3, _DWORD *a4)
{
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  int v11;
  int *v12;
  int v13;
  signed int v14;
  int v15;
  int *v16;
  uint64_t v17;
  int v18;
  int WordId;
  int v20;
  kaldi::quasar::NnlmDecoderWord *v21;
  _QWORD *v22;
  int *v23;
  int *v24;
  int *v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char *v30;
  int LmeArc;
  int v32;
  int *v33;
  int *v34;
  uint64_t v35;
  char *v36;
  int *v37;
  int v38;
  uint64_t *v39;
  int *v40;
  char *v41;
  int *v42;
  int v43;
  float v44;
  float v45;
  float v46;
  BOOL v47;
  float v48;
  uint64_t v49;
  float v50;
  float v51;
  float v52;
  BOOL v53;
  float v54;
  uint64_t v55;
  int *v56;
  int *v57;
  int *v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  unint64_t v62;
  char *v63;
  char *v64;
  int *v65;
  int v66;
  uint64_t (***v67)(_QWORD);
  int v68;
  int v69;
  int *v70;
  int *v71;
  int *v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  unint64_t v76;
  char *v77;
  char *v78;
  int *v79;
  int v80;
  unint64_t v81;
  uint64_t v82;
  unint64_t v83;
  char *v84;
  int v85;
  char *v86;
  int *v87;
  int v88;
  float v89;
  float v90;
  BOOL v91;
  float v92;
  float v93;
  float v94;
  BOOL v95;
  float v96;
  int *v97;
  int *v98;
  int *v99;
  int *v100;
  uint64_t v101;
  unint64_t v102;
  uint64_t v103;
  unint64_t v104;
  char *v105;
  char *v106;
  int v107;
  int *v108;
  int *v109;
  uint64_t v110;
  unint64_t v111;
  uint64_t v112;
  unint64_t v113;
  char *v114;
  char *v115;
  int *v116;
  int v117;
  int *v118;
  uint64_t *v119;
  float v120;
  float v121;
  BOOL v122;
  float v123;
  _DWORD *begin;
  uint64_t v125;
  int v126;
  int v127;
  int v128;
  int v129;
  BOOL v130;
  int v131;
  _QWORD *v132;
  char v133;
  unint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  float v138;
  float v139;
  float v140;
  BOOL v141;
  float v142;
  uint64_t v143;
  float v144;
  float v145;
  BOOL v146;
  float v147;
  BOOL v148;
  float v149;
  void *v150[3];
  int v151;
  std::vector<int> v152;
  int v153;
  char v154;
  int v155;
  void *__p;
  int *v157;
  int *v158;
  int v159[2];

  v159[0] = a3;
  v7 = (uint64_t *)(a1 + 80);
  v8 = *(_QWORD *)(a1 + 80) + 24 * a2;
  __p = 0;
  v157 = 0;
  v158 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, *(const void **)v8, *(_QWORD *)(v8 + 8), (uint64_t)(*(_QWORD *)(v8 + 8) - *(_QWORD *)v8) >> 2);
  v150[0] = (void *)a3;
  if (std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::find<long long>(v7 + 10, (unint64_t *)v150))
  {
    goto LABEL_2;
  }
  v155 = 0;
  v12 = (int *)(a1 + 112);
  v11 = *(_DWORD *)(a1 + 112);
  v13 = *(_DWORD *)__p / v11;
  v14 = a3;
  v155 = v13 - 1;
  if (v13 >= 1)
  {
    *(int *)__p %= v11;
    if ((v155 & 0x80000000) == 0)
      goto LABEL_15;
    v14 = v159[0];
  }
  if (*(_BYTE *)(a1 + 384))
  {
    if (v14 >= (int)quasar::artifact::AppLmArtifactLifeCycleStage::operator int(*(_QWORD *)(a1 + 16)))
      goto LABEL_14;
    if (*(_BYTE *)(a1 + 384))
    {
LABEL_20:
      v16 = v157;
      if ((unint64_t)((char *)v157 - (_BYTE *)__p) >= 0xD && *(v157 - 2) == *v12)
      {
        v17 = *(v157 - 1);
        v157 -= 2;
        v150[0] = v16 - 3;
        v18 = *((_DWORD *)std::__hash_table<std::__hash_value_type<int,float>,std::__unordered_map_hasher<int,std::__hash_value_type<int,float>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,float>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,float>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int &&>,std::tuple<>>(a1 + 240, v16 - 3, (uint64_t)&std::piecewise_construct, (_DWORD **)v150)+ 5);
      }
      else
      {
        v17 = 0xFFFFFFFFLL;
        v18 = -1;
      }
      if (*(_BYTE *)(a1 + 384))
      {
        a4[1] = v159[0];
        if (std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>((_QWORD *)(a1 + 280), v159))
        {
          v150[0] = v159;
          if (*((_DWORD *)std::__hash_table<std::__hash_value_type<int,std::pair<int,kaldi::quasar::ClassLmSymbolType>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::pair<int,kaldi::quasar::ClassLmSymbolType>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::pair<int,kaldi::quasar::ClassLmSymbolType>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::pair<int,kaldi::quasar::ClassLmSymbolType>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(a1 + 280, v159, (uint64_t)&std::piecewise_construct, (_DWORD **)v150)+ 6) == 1)
          {
            v150[0] = v159;
            v159[0] = *((_DWORD *)std::__hash_table<std::__hash_value_type<int,std::pair<int,kaldi::quasar::ClassLmSymbolType>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::pair<int,kaldi::quasar::ClassLmSymbolType>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::pair<int,kaldi::quasar::ClassLmSymbolType>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::pair<int,kaldi::quasar::ClassLmSymbolType>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(a1 + 280, v159, (uint64_t)&std::piecewise_construct, (_DWORD **)v150)+ 5);
            v150[0] = v159;
            v155 = *((_DWORD *)std::__hash_table<std::__hash_value_type<int,std::pair<int,kaldi::quasar::ClassLmSymbolType>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::pair<int,kaldi::quasar::ClassLmSymbolType>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::pair<int,kaldi::quasar::ClassLmSymbolType>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::pair<int,kaldi::quasar::ClassLmSymbolType>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(a1 + 280, v159, (uint64_t)&std::piecewise_construct, (_DWORD **)v150)+ 5);
          }
        }
      }
      LODWORD(v152.__begin_) = 0;
      WordId = kaldi::quasar::NnlmDecoderWord::GetWordId(*(kaldi::quasar::NnlmDecoderWord **)(a1 + 16), v159[0]);
      LODWORD(v152.__begin_) = WordId;
      v20 = *(_DWORD *)(a1 + 28);
      if (WordId == v20)
      {
        if (std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>((_QWORD *)(a1 + 200), v159))
        {
          v150[0] = v159;
          if (*((_DWORD *)std::__hash_table<std::__hash_value_type<int,std::pair<int,kaldi::quasar::ClassLmSymbolType>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::pair<int,kaldi::quasar::ClassLmSymbolType>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::pair<int,kaldi::quasar::ClassLmSymbolType>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::pair<int,kaldi::quasar::ClassLmSymbolType>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(a1 + 200, v159, (uint64_t)&std::piecewise_construct, (_DWORD **)v150)+ 6) == 1)
          {
            v21 = *(kaldi::quasar::NnlmDecoderWord **)(a1 + 16);
            v150[0] = v159;
            v22 = std::__hash_table<std::__hash_value_type<int,std::pair<int,kaldi::quasar::ClassLmSymbolType>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::pair<int,kaldi::quasar::ClassLmSymbolType>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::pair<int,kaldi::quasar::ClassLmSymbolType>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::pair<int,kaldi::quasar::ClassLmSymbolType>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(a1 + 200, v159, (uint64_t)&std::piecewise_construct, (_DWORD **)v150);
            LODWORD(v152.__begin_) = kaldi::quasar::NnlmDecoderWord::GetWordId(v21, *((_DWORD *)v22 + 5));
            std::vector<int>::push_back[abi:ne180100]((uint64_t)&__p, &v152);
LABEL_62:
            a4[2] = 0;
            goto LABEL_78;
          }
          v150[0] = v159;
          if (*((_DWORD *)std::__hash_table<std::__hash_value_type<int,std::pair<int,kaldi::quasar::ClassLmSymbolType>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::pair<int,kaldi::quasar::ClassLmSymbolType>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::pair<int,kaldi::quasar::ClassLmSymbolType>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::pair<int,kaldi::quasar::ClassLmSymbolType>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(a1 + 200, v159, (uint64_t)&std::piecewise_construct, (_DWORD **)v150)+ 6) == 2)goto LABEL_62;
LABEL_78:
          if ((_DWORD)v17 != -1)
          {
            v49 = *(_QWORD *)(*(_QWORD *)(a1 + 360) + 16 * v18);
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v49 + 16))(v49, v17);
            v51 = *((float *)a4 + 2);
            v52 = NAN;
            if (v51 != -INFINITY && v50 != -INFINITY)
            {
              v52 = INFINITY;
              v53 = v51 == INFINITY || v50 == INFINITY;
              v54 = v50 + v51;
              if (!v53)
                v52 = v54;
            }
            *((float *)a4 + 2) = v52;
          }
          if (!std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>((_QWORD *)(a1 + 120), v159))
          {
            a4[1] = a3;
            goto LABEL_187;
          }
          a4[1] = 0;
          v150[0] = v157 - 1;
          v55 = *((int *)std::__hash_table<std::__hash_value_type<int,float>,std::__unordered_map_hasher<int,std::__hash_value_type<int,float>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,float>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,float>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int &&>,std::tuple<>>(a1 + 240, v157 - 1, (uint64_t)&std::piecewise_construct, (_DWORD **)v150)+ 5);
          v56 = v157;
          if (v157 < v158)
          {
            *v157 = *v12;
            v57 = v56 + 1;
LABEL_105:
            v157 = v57;
            v67 = *(uint64_t (****)(_QWORD))(*(_QWORD *)(a1 + 360) + 16 * v55);
            v68 = (**v67)(v67);
            v69 = v68;
            v70 = v157;
            if (v157 >= v158)
            {
              v72 = (int *)__p;
              v73 = ((char *)v157 - (_BYTE *)__p) >> 2;
              v74 = v73 + 1;
              if ((unint64_t)(v73 + 1) >> 62)
                std::vector<int>::__throw_length_error[abi:ne180100]();
              v75 = (char *)v158 - (_BYTE *)__p;
              if (((char *)v158 - (_BYTE *)__p) >> 1 > v74)
                v74 = v75 >> 1;
              if ((unint64_t)v75 >= 0x7FFFFFFFFFFFFFFCLL)
                v76 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v76 = v74;
              if (v76)
              {
                v77 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v158, v76);
                v72 = (int *)__p;
                v70 = v157;
              }
              else
              {
                v77 = 0;
              }
              v78 = &v77[4 * v73];
              v79 = (int *)&v77[4 * v76];
              *(_DWORD *)v78 = v69;
              v71 = (int *)(v78 + 4);
              while (v70 != v72)
              {
                v80 = *--v70;
                *((_DWORD *)v78 - 1) = v80;
                v78 -= 4;
              }
              __p = v78;
              v157 = v71;
              v158 = v79;
              if (v72)
                operator delete(v72);
            }
            else
            {
              *v157 = v68;
              v71 = v70 + 1;
            }
            v157 = v71;
            if (std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>((_QWORD *)(a1 + 280), v159))
            {
              v150[0] = v159;
              if (!*((_DWORD *)std::__hash_table<std::__hash_value_type<int,std::pair<int,kaldi::quasar::ClassLmSymbolType>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::pair<int,kaldi::quasar::ClassLmSymbolType>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::pair<int,kaldi::quasar::ClassLmSymbolType>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::pair<int,kaldi::quasar::ClassLmSymbolType>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(a1 + 280, v159, (uint64_t)&std::piecewise_construct, (_DWORD **)v150)+ 6))
              {
                v150[0] = v159;
                v155 = *((_DWORD *)std::__hash_table<std::__hash_value_type<int,std::pair<int,kaldi::quasar::ClassLmSymbolType>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::pair<int,kaldi::quasar::ClassLmSymbolType>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::pair<int,kaldi::quasar::ClassLmSymbolType>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::pair<int,kaldi::quasar::ClassLmSymbolType>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(a1 + 280, v159, (uint64_t)&std::piecewise_construct, (_DWORD **)v150)+ 5);
              }
            }
            goto LABEL_187;
          }
          v58 = (int *)__p;
          v59 = ((char *)v157 - (_BYTE *)__p) >> 2;
          v60 = v59 + 1;
          if (!((unint64_t)(v59 + 1) >> 62))
          {
            v61 = (char *)v158 - (_BYTE *)__p;
            if (((char *)v158 - (_BYTE *)__p) >> 1 > v60)
              v60 = v61 >> 1;
            if ((unint64_t)v61 >= 0x7FFFFFFFFFFFFFFCLL)
              v62 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v62 = v60;
            if (v62)
            {
              v63 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v158, v62);
              v58 = (int *)__p;
              v56 = v157;
            }
            else
            {
              v63 = 0;
            }
            v64 = &v63[4 * v59];
            v65 = (int *)&v63[4 * v62];
            *(_DWORD *)v64 = *v12;
            v57 = (int *)(v64 + 4);
            while (v56 != v58)
            {
              v66 = *--v56;
              *((_DWORD *)v64 - 1) = v66;
              v64 -= 4;
            }
            __p = v64;
            v157 = v57;
            v158 = v65;
            if (v58)
              operator delete(v58);
            goto LABEL_105;
          }
LABEL_243:
          std::vector<int>::__throw_length_error[abi:ne180100]();
        }
        if (*(_QWORD *)(a1 + 224))
          goto LABEL_2;
      }
      v23 = v157;
      if (v157 >= v158)
      {
        v25 = (int *)__p;
        v26 = ((char *)v157 - (_BYTE *)__p) >> 2;
        v27 = v26 + 1;
        if ((unint64_t)(v26 + 1) >> 62)
          goto LABEL_243;
        v28 = (char *)v158 - (_BYTE *)__p;
        if (((char *)v158 - (_BYTE *)__p) >> 1 > v27)
          v27 = v28 >> 1;
        if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFFCLL)
          v29 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v29 = v27;
        if (v29)
        {
          v30 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v158, v29);
          v25 = (int *)__p;
          v23 = v157;
        }
        else
        {
          v30 = 0;
        }
        v41 = &v30[4 * v26];
        v42 = (int *)&v30[4 * v29];
        *(_DWORD *)v41 = v152.__begin_;
        v24 = (int *)(v41 + 4);
        while (v23 != v25)
        {
          v43 = *--v23;
          *((_DWORD *)v41 - 1) = v43;
          v41 -= 4;
        }
        __p = v41;
        v157 = v24;
        v158 = v42;
        if (v25)
          operator delete(v25);
      }
      else
      {
        *v157 = (int)v152.__begin_;
        v24 = v23 + 1;
      }
      v157 = v24;
      v44 = (*(float (**)(_QWORD, void **))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8), &__p);
      *((float *)a4 + 2) = v44;
      if (WordId == v20)
      {
        v45 = NAN;
        if (v44 != -INFINITY)
        {
          v46 = *(float *)(a1 + 32);
          v45 = NAN;
          if (v46 != -INFINITY)
          {
            v45 = INFINITY;
            v47 = v46 == INFINITY || v44 == INFINITY;
            v48 = v44 + v46;
            if (!v47)
              v45 = v48;
          }
        }
        *((float *)a4 + 2) = v45;
      }
      goto LABEL_78;
    }
    v14 = v159[0];
  }
  if (!kaldi::quasar::NnlmDecoderWord::IsPhoneWord(*(kaldi::quasar::NnlmDecoderWord **)(a1 + 16), v14))
    goto LABEL_20;
LABEL_14:
  if (v155 < 0)
    goto LABEL_45;
LABEL_15:
  if ((kaldi::quasar::NnlmDecoderWord::IsPhoneWord(*(kaldi::quasar::NnlmDecoderWord **)(a1 + 16), v159[0]) & 1) != 0
    || std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>((_QWORD *)(a1 + 120), v159))
  {
    goto LABEL_2;
  }
  if (!std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>((_QWORD *)(a1 + 280), v159))
  {
    v15 = v155;
    goto LABEL_44;
  }
  v152.__begin_ = v159;
  v152.__begin_ = (std::vector<int>::pointer)std::__hash_table<std::__hash_value_type<int,std::pair<int,kaldi::quasar::ClassLmSymbolType>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::pair<int,kaldi::quasar::ClassLmSymbolType>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::pair<int,kaldi::quasar::ClassLmSymbolType>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::pair<int,kaldi::quasar::ClassLmSymbolType>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(a1 + 280, v159, (uint64_t)&std::piecewise_construct, &v152.__begin_)+ 5;
  v15 = *((_DWORD *)std::__hash_table<std::__hash_value_type<int,std::pair<int,kaldi::quasar::ClassLmSymbolType>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::pair<int,kaldi::quasar::ClassLmSymbolType>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::pair<int,kaldi::quasar::ClassLmSymbolType>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::pair<int,kaldi::quasar::ClassLmSymbolType>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(a1 + 280, v152.__begin_, (uint64_t)&std::piecewise_construct, &v152.__begin_)+ 5);
  if (v15 != v155)
  {
LABEL_2:
    v9 = 0;
    goto LABEL_3;
  }
LABEL_44:
  if ((v15 & 0x80000000) == 0)
    goto LABEL_47;
LABEL_45:
  if (std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>((_QWORD *)(a1 + 280), v159))
  {
    goto LABEL_2;
  }
  v15 = v155;
LABEL_47:
  v154 = 0;
  v153 = 0;
  LmeArc = kaldi::quasar::RecurrentNeuralDeterministicFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::GetLmeArc(a1, &__p, v159[0], v15 >= 0, (uint64_t)v150, &v154);
  v153 = LmeArc;
  if (LmeArc < 0)
    goto LABEL_2;
  v32 = *(_DWORD *)(a1 + 28);
  v33 = (int *)__p;
  v34 = v157;
  v35 = ((char *)v157 - (_BYTE *)__p) >> 2;
  if ((unint64_t)((char *)v157 - (_BYTE *)__p) < 0xD
    || (v36 = (char *)__p + 4 * v35, *((_DWORD *)v36 - 2) != *v12))
  {
    if (v157 >= v158)
    {
      v81 = v35 + 1;
      if ((unint64_t)(v35 + 1) >> 62)
        goto LABEL_244;
      v82 = (char *)v158 - (_BYTE *)__p;
      if (((char *)v158 - (_BYTE *)__p) >> 1 > v81)
        v81 = v82 >> 1;
      if ((unint64_t)v82 >= 0x7FFFFFFFFFFFFFFCLL)
        v83 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v83 = v81;
      if (v83)
      {
        v84 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v158, v83);
        v33 = (int *)__p;
        v34 = v157;
        v85 = v153;
      }
      else
      {
        v84 = 0;
        v85 = LmeArc;
      }
      v86 = &v84[4 * v35];
      v87 = (int *)&v84[4 * v83];
      *(_DWORD *)v86 = v85;
      v40 = (int *)(v86 + 4);
      while (v34 != v33)
      {
        v88 = *--v34;
        *((_DWORD *)v86 - 1) = v88;
        v86 -= 4;
      }
      __p = v86;
      v157 = v40;
      v158 = v87;
      if (v33)
        operator delete(v33);
    }
    else
    {
      *v157 = LmeArc;
      v40 = v34 + 1;
    }
    v157 = v40;
    v89 = (*(float (**)(_QWORD, void **))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8), &__p);
    v90 = NAN;
    if (v89 != -INFINITY)
    {
      v90 = NAN;
      if (*(float *)&v150[1] != -INFINITY)
      {
        v90 = INFINITY;
        v91 = *(float *)&v150[1] == INFINITY || v89 == INFINITY;
        v92 = v89 + *(float *)&v150[1];
        if (!v91)
          v90 = v92;
      }
    }
    *((float *)a4 + 2) = v90;
    if (LmeArc == v32)
    {
      v93 = NAN;
      if (v90 != -INFINITY)
      {
        v94 = *(float *)(a1 + 32);
        v93 = NAN;
        if (v94 != -INFINITY)
        {
          v93 = INFINITY;
          v95 = v94 == INFINITY || v90 == INFINITY;
          v96 = v90 + v94;
          if (!v95)
            v93 = v96;
        }
      }
      *((float *)a4 + 2) = v93;
    }
    v98 = v157;
    v97 = v158;
    if (v157 >= v158)
    {
      v100 = (int *)__p;
      v101 = ((char *)v157 - (_BYTE *)__p) >> 2;
      v102 = v101 + 1;
      if ((unint64_t)(v101 + 1) >> 62)
        goto LABEL_244;
      v103 = (char *)v158 - (_BYTE *)__p;
      if (((char *)v158 - (_BYTE *)__p) >> 1 > v102)
        v102 = v103 >> 1;
      if ((unint64_t)v103 >= 0x7FFFFFFFFFFFFFFCLL)
        v104 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v104 = v102;
      if (v104)
      {
        v105 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v158, v104);
        v100 = (int *)__p;
        v98 = v157;
      }
      else
      {
        v105 = 0;
      }
      v106 = &v105[4 * v101];
      v97 = (int *)&v105[4 * v104];
      *(_DWORD *)v106 = *v12;
      v99 = (int *)(v106 + 4);
      while (v98 != v100)
      {
        v107 = *--v98;
        *((_DWORD *)v106 - 1) = v107;
        v106 -= 4;
      }
      __p = v106;
      v157 = v99;
      v158 = v97;
      if (v100)
      {
        operator delete(v100);
        v97 = v158;
      }
    }
    else
    {
      *v157 = *v12;
      v99 = v98 + 1;
    }
    v157 = v99;
    if (v99 < v97)
    {
      *v99 = HIDWORD(v150[1]);
      v108 = v99 + 1;
LABEL_186:
      v157 = v108;
      a4[1] = HIDWORD(v150[0]);
      goto LABEL_187;
    }
    v109 = (int *)__p;
    v110 = ((char *)v99 - (_BYTE *)__p) >> 2;
    v111 = v110 + 1;
    if (!((unint64_t)(v110 + 1) >> 62))
    {
      v112 = (char *)v97 - (_BYTE *)__p;
      if (v112 >> 1 > v111)
        v111 = v112 >> 1;
      if ((unint64_t)v112 >= 0x7FFFFFFFFFFFFFFCLL)
        v113 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v113 = v111;
      if (v113)
      {
        v114 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v158, v113);
        v109 = (int *)__p;
        v99 = v157;
      }
      else
      {
        v114 = 0;
      }
      v115 = &v114[4 * v110];
      v116 = (int *)&v114[4 * v113];
      *(_DWORD *)v115 = HIDWORD(v150[1]);
      v108 = (int *)(v115 + 4);
      while (v99 != v109)
      {
        v117 = *--v99;
        *((_DWORD *)v115 - 1) = v117;
        v115 -= 4;
      }
      __p = v115;
      v157 = v108;
      v158 = v116;
      if (v109)
        operator delete(v109);
      goto LABEL_186;
    }
LABEL_244:
    std::vector<int>::__throw_length_error[abi:ne180100]();
  }
  v38 = *((_DWORD *)v36 - 3);
  v37 = (int *)(v36 - 12);
  if (LmeArc != v38 || v154)
  {
    v136 = *(v157 - 1);
    v152.__begin_ = v37;
    v137 = *((int *)std::__hash_table<std::__hash_value_type<int,float>,std::__unordered_map_hasher<int,std::__hash_value_type<int,float>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,float>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,float>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int &&>,std::tuple<>>(a1 + 240, v37, (uint64_t)&std::piecewise_construct, &v152.__begin_)+ 5);
    v157 -= 2;
    std::vector<int>::push_back[abi:ne180100]((uint64_t)&__p, &v153);
    v138 = (*(float (**)(_QWORD, void **))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8), &__p);
    v139 = v138;
    if (LmeArc == v32)
    {
      v139 = NAN;
      if (v138 != -INFINITY)
      {
        v140 = *(float *)(a1 + 32);
        v139 = NAN;
        if (v140 != -INFINITY)
        {
          v141 = v140 == INFINITY || v138 == INFINITY;
          v142 = v138 + v140;
          if (v141)
            v139 = INFINITY;
          else
            v139 = v142;
        }
      }
    }
    std::vector<int>::push_back[abi:ne180100]((uint64_t)&__p, (_DWORD *)(a1 + 112));
    std::vector<int>::push_back[abi:ne180100]((uint64_t)&__p, (_DWORD *)&v150[1] + 1);
    a4[1] = HIDWORD(v150[0]);
    v143 = *(_QWORD *)(*(_QWORD *)(a1 + 360) + 16 * v137);
    v144 = (*(float (**)(uint64_t, uint64_t))(*(_QWORD *)v143 + 16))(v143, v136);
    *(float *)&v152.__begin_ = v144;
    v159[1] = 2139095040;
    if (v144 == INFINITY)
      goto LABEL_2;
    v145 = NAN;
    if (v144 != -INFINITY)
    {
      v145 = NAN;
      if (*(float *)&v150[1] != -INFINITY)
      {
        v146 = *(float *)&v150[1] == INFINITY || v144 == INFINITY;
        v147 = v144 + *(float *)&v150[1];
        if (v146)
          v147 = INFINITY;
        v145 = NAN;
        if (v147 != -INFINITY && v139 != -INFINITY)
        {
          v145 = INFINITY;
          v148 = v147 == INFINITY || v139 == INFINITY;
          v149 = v139 + v147;
          if (!v148)
            v145 = v149;
        }
      }
    }
    *((float *)a4 + 2) = v145;
  }
  else
  {
    *(v157 - 1) = HIDWORD(v150[1]);
    *(void **)(a4 + 1) = *(void **)((char *)v150 + 4);
    if ((v155 & 0x80000000) == 0)
    {
      v39 = std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>((_QWORD *)(a1 + 320), &v155);
      if (v39)
        *((float *)a4 + 2) = *((float *)a4 + 2) * *((float *)v39 + 5);
      if ((v155 & 0x80000000) == 0)
      {
        if (std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>((_QWORD *)(a1 + 280), v159))
        {
          v152.__begin_ = v159;
          if (*((_DWORD *)std::__hash_table<std::__hash_value_type<int,std::pair<int,kaldi::quasar::ClassLmSymbolType>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::pair<int,kaldi::quasar::ClassLmSymbolType>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::pair<int,kaldi::quasar::ClassLmSymbolType>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::pair<int,kaldi::quasar::ClassLmSymbolType>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(a1 + 280, v159, (uint64_t)&std::piecewise_construct, &v152.__begin_)+ 6) == 2)
          {
            v155 = -1;
            v157 -= 2;
          }
        }
      }
    }
  }
LABEL_187:
  if (v159[0] == (_DWORD)a3)
  {
    v118 = v157;
  }
  else
  {
    LOBYTE(v152.__begin_) = 0;
    kaldi::quasar::RecurrentNeuralDeterministicFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::GetLmeArc(a1, &__p, a3, v155 >= 0, (uint64_t)v150, &v152);
    if ((v155 & 0x80000000) == 0)
    {
      v119 = std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>((_QWORD *)(a1 + 320), &v155);
      if (v119)
        *(float *)&v150[1] = *(float *)&v150[1] * *((float *)v119 + 5);
    }
    v118 = v157;
    *(v157 - 1) = HIDWORD(v150[1]);
    a4[1] = HIDWORD(v150[0]);
    v120 = *((float *)a4 + 2);
    v121 = NAN;
    if (v120 != -INFINITY)
    {
      v121 = NAN;
      if (*(float *)&v150[1] != -INFINITY)
      {
        v121 = INFINITY;
        v122 = *(float *)&v150[1] == INFINITY || v120 == INFINITY;
        v123 = v120 + *(float *)&v150[1];
        if (!v122)
          v121 = v123;
      }
    }
    *((float *)a4 + 2) = v121;
  }
  memset(&v152, 0, sizeof(v152));
  begin = __p;
  v125 = ((char *)v118 - (_BYTE *)__p) >> 2;
  v126 = v125 - 1;
  if ((unint64_t)((char *)v118 - (_BYTE *)__p) >= 0xD)
  {
    v127 = *((_DWORD *)__p + v125 - 2);
    v128 = v125 - 3;
    if (v127 == *v12)
      v126 = v128;
  }
  v129 = *(_DWORD *)(a1 + 24);
  v130 = __OFSUB__(v126, v129);
  v131 = v126 - v129;
  if ((v131 < 0) ^ v130 | (v131 == 0))
  {
    v152.__begin_ = (std::vector<int>::pointer)__p;
    v152.__end_ = v118;
    __p = 0;
    v157 = 0;
    v152.__end_cap_.__value_ = v158;
    v158 = 0;
  }
  else
  {
    std::vector<int>::__insert_with_size[abi:ne180100]<std::__wrap_iter<int const*>,std::__wrap_iter<int const*>>(&v152, 0, (char *)__p + 4 * v131, (char *)v118, ((char *)v118 - ((_BYTE *)__p + 4 * v131)) >> 2);
    begin = v152.__begin_;
  }
  if ((v155 & 0x80000000) == 0)
    *begin += *v12 + *v12 * v155;
  memset(v150, 0, sizeof(v150));
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(v150, begin, (uint64_t)v152.__end_, v152.__end_ - begin);
  v151 = *(_DWORD *)(a1 + 108);
  v132 = std::__hash_table<std::__hash_value_type<std::vector<int>,int>,std::__unordered_map_hasher<std::vector<int>,std::__hash_value_type<std::vector<int>,int>,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>,true>,std::__unordered_map_equal<std::vector<int>,std::__hash_value_type<std::vector<int>,int>,std::equal_to<std::vector<int>>,kaldi::VectorHasher<int>,true>,std::allocator<std::__hash_value_type<std::vector<int>,int>>>::__emplace_unique_key_args<std::vector<int>,std::pair<std::vector<int>,int> &>(a1 + 40, (int **)v150, (uint64_t)v150);
  if (v133)
  {
    ++*(_DWORD *)(a1 + 108);
    v134 = *(_QWORD *)(a1 + 88);
    if (v134 >= *(_QWORD *)(a1 + 96))
    {
      v135 = std::vector<std::vector<int>>::__push_back_slow_path<std::vector<int> const&>(v7, (uint64_t)v150);
    }
    else
    {
      std::vector<std::vector<int>>::__construct_one_at_end[abi:ne180100]<std::vector<int> const&>((uint64_t)v7, (uint64_t)v150);
      v135 = v134 + 24;
    }
    *(_QWORD *)(a1 + 88) = v135;
  }
  *a4 = a3;
  a4[3] = *((_DWORD *)v132 + 10);
  if (v150[0])
  {
    v150[1] = v150[0];
    operator delete(v150[0]);
  }
  if (v152.__begin_)
  {
    v152.__end_ = v152.__begin_;
    operator delete(v152.__begin_);
  }
  v9 = 1;
LABEL_3:
  if (__p)
  {
    v157 = (int *)__p;
    operator delete(__p);
  }
  return v9;
}

void sub_1AD8F0084(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t kaldi::quasar::RecurrentNeuralDeterministicFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::~RecurrentNeuralDeterministicFst(uint64_t a1)
{
  uint64_t v2;
  void **v4;

  *(_QWORD *)a1 = &unk_1E5D33F90;
  v2 = a1 + 40;
  v4 = (void **)(a1 + 360);
  std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100](&v4);
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(a1 + 320);
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(a1 + 280);
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(a1 + 240);
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(a1 + 200);
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(a1 + 160);
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(a1 + 120);
  v4 = (void **)(a1 + 80);
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100](&v4);
  std::__hash_table<std::__hash_value_type<std::vector<int>,int>,std::__unordered_map_hasher<std::vector<int>,std::__hash_value_type<std::vector<int>,int>,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>,true>,std::__unordered_map_equal<std::vector<int>,std::__hash_value_type<std::vector<int>,int>,std::equal_to<std::vector<int>>,kaldi::VectorHasher<int>,true>,std::allocator<std::__hash_value_type<std::vector<int>,int>>>::~__hash_table(v2);
  return a1;
}

{
  uint64_t v2;
  void **v4;

  *(_QWORD *)a1 = &unk_1E5D33F90;
  v2 = a1 + 40;
  v4 = (void **)(a1 + 360);
  std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100](&v4);
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(a1 + 320);
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(a1 + 280);
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(a1 + 240);
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(a1 + 200);
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(a1 + 160);
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(a1 + 120);
  v4 = (void **)(a1 + 80);
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100](&v4);
  std::__hash_table<std::__hash_value_type<std::vector<int>,int>,std::__unordered_map_hasher<std::vector<int>,std::__hash_value_type<std::vector<int>,int>,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>,true>,std::__unordered_map_equal<std::vector<int>,std::__hash_value_type<std::vector<int>,int>,std::equal_to<std::vector<int>>,kaldi::VectorHasher<int>,true>,std::allocator<std::__hash_value_type<std::vector<int>,int>>>::~__hash_table(v2);
  return MEMORY[0x1AF44D190](a1, 0x10E1C406E7053A8);
}

uint64_t kaldi::quasar::RecurrentNeuralDeterministicFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::FinalEos(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
}

void std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<long long,void *> *>>(_QWORD *a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t v6;
  uint64_t i;
  _QWORD *v8;
  unint64_t v9;
  _QWORD *v10;
  _QWORD *inserted;
  _QWORD *v12;

  v6 = a1[1];
  if (!v6)
    goto LABEL_9;
  for (i = 0; i != v6; *(_QWORD *)(*a1 + 8 * i++) = 0)
    ;
  v8 = (_QWORD *)a1[2];
  a1[2] = 0;
  a1[3] = 0;
  if (v8)
  {
    while (a2 != a3)
    {
      v9 = a2[2];
      v8[2] = v9;
      v10 = (_QWORD *)*v8;
      v8[1] = v9;
      inserted = std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::__node_insert_multi_prepare((uint64_t)a1, v9, v8 + 2);
      std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__node_insert_multi_perform(a1, v8, inserted);
      a2 = (_QWORD *)*a2;
      v8 = v10;
      if (!v10)
        goto LABEL_9;
    }
    do
    {
      v12 = (_QWORD *)*v8;
      operator delete(v8);
      v8 = v12;
    }
    while (v12);
  }
  else
  {
LABEL_9:
    while (a2 != a3)
    {
      std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::__emplace_multi<long long const&>(a1, a2 + 2);
      a2 = (_QWORD *)*a2;
    }
  }
}

void sub_1AD8F0330(void *a1)
{
  _QWORD *v1;
  _QWORD *v2;

  __cxa_begin_catch(a1);
  do
  {
    v2 = (_QWORD *)*v1;
    operator delete(v1);
    v1 = v2;
  }
  while (v2);
  __cxa_rethrow();
}

void sub_1AD8F0350(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

_QWORD *std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::__node_insert_multi_prepare(uint64_t a1, unint64_t a2, _QWORD *a3)
{
  unint64_t v6;
  float v7;
  float v8;
  uint64_t v9;
  _BOOL8 v10;
  size_t v11;
  unint64_t v12;
  size_t v13;
  uint8x8_t v14;
  unint64_t v15;
  _QWORD *v16;
  int v17;
  _QWORD *result;
  unint64_t v19;
  unint64_t v20;
  _BOOL4 v21;
  int v22;

  v6 = *(_QWORD *)(a1 + 8);
  v7 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v8 = *(float *)(a1 + 32);
  if (!v6 || (float)(v8 * (float)v6) < v7)
  {
    v9 = 2 * v6;
    v10 = v6 < 3 || (v6 & (v6 - 1)) != 0;
    v11 = v10 | v9;
    v12 = vcvtps_u32_f32(v7 / v8);
    if (v11 <= v12)
      v13 = v12;
    else
      v13 = v11;
    std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::__rehash<false>(a1, v13);
    v6 = *(_QWORD *)(a1 + 8);
  }
  v14 = (uint8x8_t)vcnt_s8((int8x8_t)v6);
  v14.i16[0] = vaddlv_u8(v14);
  if (v14.u32[0] > 1uLL)
  {
    v15 = a2;
    if (v6 <= a2)
      v15 = a2 % v6;
  }
  else
  {
    v15 = (v6 - 1) & a2;
  }
  v16 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v15);
  if (!v16)
    return 0;
  v17 = 0;
  do
  {
    result = v16;
    v16 = (_QWORD *)*v16;
    if (!v16)
      break;
    v19 = v16[1];
    if (v14.u32[0] > 1uLL)
    {
      v20 = v16[1];
      if (v19 >= v6)
        v20 = v19 % v6;
    }
    else
    {
      v20 = v19 & (v6 - 1);
    }
    if (v20 != v15)
      break;
    v21 = v19 == a2 && v16[2] == *a3;
    v22 = v17 & !v21;
    v17 |= v21;
  }
  while (v22 != 1);
  return result;
}

void std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::__rehash<false>(uint64_t a1, size_t __n)
{
  size_t prime;
  int8x8_t v4;
  unint64_t v5;
  uint8x8_t v6;
  uint64_t v7;

  if (__n == 1)
  {
    prime = 2;
  }
  else
  {
    prime = __n;
    if ((__n & (__n - 1)) != 0)
      prime = std::__next_prime(__n);
  }
  v4 = *(int8x8_t *)(a1 + 8);
  if (prime > *(_QWORD *)&v4)
    goto LABEL_16;
  if (prime < *(_QWORD *)&v4)
  {
    v5 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(_QWORD *)&v4 < 3uLL || (v6 = (uint8x8_t)vcnt_s8(v4), v6.i16[0] = vaddlv_u8(v6), v6.u32[0] > 1uLL))
    {
      v5 = std::__next_prime(v5);
    }
    else
    {
      v7 = 1 << -(char)__clz(v5 - 1);
      if (v5 >= 2)
        v5 = v7;
    }
    if (prime <= v5)
      prime = v5;
    if (prime < *(_QWORD *)&v4)
LABEL_16:
      std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::__do_rehash<false>(a1, prime);
  }
}

void std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::__do_rehash<false>(uint64_t a1, unint64_t a2)
{
  void *v4;
  void *v5;
  uint64_t v6;
  _QWORD *v7;
  unint64_t v8;
  uint8x8_t v9;
  void *v10;
  _QWORD *i;
  unint64_t v12;
  _QWORD *v13;
  _QWORD *v14;

  if (a2)
  {
    if (a2 >> 61)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v4 = operator new(8 * a2);
    v5 = *(void **)a1;
    *(_QWORD *)a1 = v4;
    if (v5)
      operator delete(v5);
    v6 = 0;
    *(_QWORD *)(a1 + 8) = a2;
    do
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v6++) = 0;
    while (a2 != v6);
    v7 = *(_QWORD **)(a1 + 16);
    if (v7)
    {
      v8 = v7[1];
      v9 = (uint8x8_t)vcnt_s8((int8x8_t)a2);
      v9.i16[0] = vaddlv_u8(v9);
      if (v9.u32[0] > 1uLL)
      {
        if (v8 >= a2)
          v8 %= a2;
      }
      else
      {
        v8 &= a2 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v8) = a1 + 16;
      for (i = (_QWORD *)*v7; *v7; i = (_QWORD *)*v7)
      {
        v12 = i[1];
        if (v9.u32[0] > 1uLL)
        {
          if (v12 >= a2)
            v12 %= a2;
        }
        else
        {
          v12 &= a2 - 1;
        }
        if (v12 == v8)
        {
          v7 = i;
        }
        else
        {
          v13 = i;
          if (*(_QWORD *)(*(_QWORD *)a1 + 8 * v12))
          {
            do
            {
              v14 = v13;
              v13 = (_QWORD *)*v13;
            }
            while (v13 && i[2] == v13[2]);
            *v7 = v13;
            *v14 = **(_QWORD **)(*(_QWORD *)a1 + 8 * v12);
            **(_QWORD **)(*(_QWORD *)a1 + 8 * v12) = i;
          }
          else
          {
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v12) = v7;
            v7 = i;
            v8 = v12;
          }
        }
      }
    }
  }
  else
  {
    v10 = *(void **)a1;
    *(_QWORD *)a1 = 0;
    if (v10)
      operator delete(v10);
    *(_QWORD *)(a1 + 8) = 0;
  }
}

_QWORD *std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::__emplace_multi<long long const&>(_QWORD *a1, unint64_t *a2)
{
  _QWORD *v4;
  unint64_t v5;
  _QWORD *inserted;

  v4 = operator new(0x18uLL);
  v5 = *a2;
  v4[2] = *a2;
  *v4 = 0;
  v4[1] = v5;
  inserted = std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::__node_insert_multi_prepare((uint64_t)a1, v5, v4 + 2);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__node_insert_multi_perform(a1, v4, inserted);
  return v4;
}

void sub_1AD8F0764(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__hash_table<std::__hash_value_type<int,std::pair<int,kaldi::quasar::ClassLmSymbolType>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::pair<int,kaldi::quasar::ClassLmSymbolType>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::pair<int,kaldi::quasar::ClassLmSymbolType>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::pair<int,kaldi::quasar::ClassLmSymbolType>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(uint64_t a1, int *a2, uint64_t a3, _DWORD **a4)
{
  unint64_t v4;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  void **v10;
  _QWORD *v11;
  unint64_t v12;
  float v13;
  float v14;
  _BOOL8 v15;
  unint64_t v16;
  unint64_t v17;
  size_t v18;
  uint64_t v19;
  _QWORD *v20;
  unint64_t v21;

  v7 = *a2;
  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v4 = *a2;
      if (v8 <= v7)
        v4 = v7 % v8;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
    v10 = *(void ***)(*(_QWORD *)a1 + 8 * v4);
    if (v10)
    {
      v11 = *v10;
      if (*v10)
      {
        do
        {
          v12 = v11[1];
          if (v12 == v7)
          {
            if (*((_DWORD *)v11 + 4) == (_DWORD)v7)
              return v11;
          }
          else
          {
            if (v9.u32[0] > 1uLL)
            {
              if (v12 >= v8)
                v12 %= v8;
            }
            else
            {
              v12 &= v8 - 1;
            }
            if (v12 != v4)
              break;
          }
          v11 = (_QWORD *)*v11;
        }
        while (v11);
      }
    }
  }
  v11 = operator new(0x20uLL);
  *v11 = 0;
  v11[1] = v7;
  *((_DWORD *)v11 + 4) = **a4;
  *((_DWORD *)v11 + 5) = 0;
  *((_DWORD *)v11 + 6) = 0;
  v13 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v14 = *(float *)(a1 + 32);
  if (!v8 || (float)(v14 * (float)v8) < v13)
  {
    v15 = 1;
    if (v8 >= 3)
      v15 = (v8 & (v8 - 1)) != 0;
    v16 = v15 | (2 * v8);
    v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17)
      v18 = v17;
    else
      v18 = v16;
    std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::__rehash<true>(a1, v18);
    v8 = *(_QWORD *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v8 <= v7)
        v4 = v7 % v8;
      else
        v4 = v7;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
  }
  v19 = *(_QWORD *)a1;
  v20 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v20)
  {
    *v11 = *v20;
LABEL_38:
    *v20 = v11;
    goto LABEL_39;
  }
  *v11 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v11;
  *(_QWORD *)(v19 + 8 * v4) = a1 + 16;
  if (*v11)
  {
    v21 = *(_QWORD *)(*v11 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v21 >= v8)
        v21 %= v8;
    }
    else
    {
      v21 &= v8 - 1;
    }
    v20 = (_QWORD *)(*(_QWORD *)a1 + 8 * v21);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return v11;
}

void sub_1AD8F0984(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__hash_table<std::__hash_value_type<int,float>,std::__unordered_map_hasher<int,std::__hash_value_type<int,float>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,float>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,float>>>::__emplace_unique_key_args<int,std::pair<int,double>>(uint64_t a1, int *a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  void **v9;
  _QWORD *v10;
  unint64_t v11;
  float v12;
  float v13;
  float v14;
  _BOOL8 v15;
  unint64_t v16;
  unint64_t v17;
  size_t v18;
  uint64_t v19;
  _QWORD *v20;
  unint64_t v21;

  v6 = *a2;
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = *a2;
      if (v7 <= v6)
        v3 = v6 % v7;
    }
    else
    {
      v3 = (v7 - 1) & v6;
    }
    v9 = *(void ***)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      v10 = *v9;
      if (*v9)
      {
        do
        {
          v11 = v10[1];
          if (v11 == v6)
          {
            if (*((_DWORD *)v10 + 4) == (_DWORD)v6)
              return v10;
          }
          else
          {
            if (v8.u32[0] > 1uLL)
            {
              if (v11 >= v7)
                v11 %= v7;
            }
            else
            {
              v11 &= v7 - 1;
            }
            if (v11 != v3)
              break;
          }
          v10 = (_QWORD *)*v10;
        }
        while (v10);
      }
    }
  }
  v10 = operator new(0x18uLL);
  *v10 = 0;
  v10[1] = v6;
  *((_DWORD *)v10 + 4) = *(_DWORD *)a3;
  v12 = *(double *)(a3 + 8);
  *((float *)v10 + 5) = v12;
  v13 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v14 = *(float *)(a1 + 32);
  if (!v7 || (float)(v14 * (float)v7) < v13)
  {
    v15 = 1;
    if (v7 >= 3)
      v15 = (v7 & (v7 - 1)) != 0;
    v16 = v15 | (2 * v7);
    v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17)
      v18 = v17;
    else
      v18 = v16;
    std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::__rehash<true>(a1, v18);
    v7 = *(_QWORD *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v6)
        v3 = v6 % v7;
      else
        v3 = v6;
    }
    else
    {
      v3 = (v7 - 1) & v6;
    }
  }
  v19 = *(_QWORD *)a1;
  v20 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v20)
  {
    *v10 = *v20;
LABEL_38:
    *v20 = v10;
    goto LABEL_39;
  }
  *v10 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v10;
  *(_QWORD *)(v19 + 8 * v3) = a1 + 16;
  if (*v10)
  {
    v21 = *(_QWORD *)(*v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v21 >= v7)
        v21 %= v7;
    }
    else
    {
      v21 &= v7 - 1;
    }
    v20 = (_QWORD *)(*(_QWORD *)a1 + 8 * v21);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return v10;
}

void sub_1AD8F0BA8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t *std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::__erase_unique<long long>(_QWORD *a1, unint64_t *a2)
{
  uint64_t *result;

  result = std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::find<long long>(a1, a2);
  if (result)
  {
    std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::erase(a1, result);
    return (uint64_t *)1;
  }
  return result;
}

_QWORD *std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::find<long long>(_QWORD *a1, unint64_t *a2)
{
  int8x8_t v2;
  unint64_t v3;
  uint8x8_t v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *result;
  unint64_t v8;

  v2 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v2)
    return 0;
  v3 = *a2;
  v4 = (uint8x8_t)vcnt_s8(v2);
  v4.i16[0] = vaddlv_u8(v4);
  if (v4.u32[0] > 1uLL)
  {
    v5 = *a2;
    if (v3 >= *(_QWORD *)&v2)
      v5 = v3 % *(_QWORD *)&v2;
  }
  else
  {
    v5 = (*(_QWORD *)&v2 - 1) & v3;
  }
  v6 = *(_QWORD **)(*a1 + 8 * v5);
  if (!v6)
    return 0;
  result = (_QWORD *)*v6;
  if (*v6)
  {
    do
    {
      v8 = result[1];
      if (v8 == v3)
      {
        if (result[2] == v3)
          return result;
      }
      else
      {
        if (v4.u32[0] > 1uLL)
        {
          if (v8 >= *(_QWORD *)&v2)
            v8 %= *(_QWORD *)&v2;
        }
        else
        {
          v8 &= *(_QWORD *)&v2 - 1;
        }
        if (v8 != v5)
          return 0;
      }
      result = (_QWORD *)*result;
    }
    while (result);
  }
  return result;
}

{
  int8x8_t v2;
  unint64_t v3;
  uint8x8_t v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *result;
  unint64_t v8;

  v2 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v2)
    return 0;
  v3 = *a2;
  v4 = (uint8x8_t)vcnt_s8(v2);
  v4.i16[0] = vaddlv_u8(v4);
  if (v4.u32[0] > 1uLL)
  {
    v5 = *a2;
    if (v3 >= *(_QWORD *)&v2)
      v5 = v3 % *(_QWORD *)&v2;
  }
  else
  {
    v5 = (*(_QWORD *)&v2 - 1) & v3;
  }
  v6 = *(_QWORD **)(*a1 + 8 * v5);
  if (!v6)
    return 0;
  result = (_QWORD *)*v6;
  if (*v6)
  {
    do
    {
      v8 = result[1];
      if (v3 == v8)
      {
        if (result[2] == v3)
          return result;
      }
      else
      {
        if (v4.u32[0] > 1uLL)
        {
          if (v8 >= *(_QWORD *)&v2)
            v8 %= *(_QWORD *)&v2;
        }
        else
        {
          v8 &= *(_QWORD *)&v2 - 1;
        }
        if (v8 != v5)
          return 0;
      }
      result = (_QWORD *)*result;
    }
    while (result);
  }
  return result;
}

_QWORD *std::vector<std::vector<int>>::__construct_one_at_end[abi:ne180100]<std::vector<int> const&>(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  _QWORD *result;

  v3 = *(_QWORD **)(a1 + 8);
  *v3 = 0;
  v3[1] = 0;
  v3[2] = 0;
  result = std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(v3, *(const void **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 2);
  *(_QWORD *)(a1 + 8) = v3 + 3;
  return result;
}

void sub_1AD8F0CEC(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t kaldi::quasar::RecurrentNeuralDeterministicFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::GetLmeArc(uint64_t a1, _QWORD *a2, uint64_t a3, char a4, uint64_t a5, _BYTE *a6)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t result;
  uint64_t **v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  unsigned int *v21;

  *a6 = 0;
  v20 = -1;
  v11 = a2[1] - *a2;
  if ((unint64_t)v11 >= 0xD)
  {
    v12 = *a2 + 4 * (v11 >> 2);
    if (*(_DWORD *)(v12 - 8) == *(_DWORD *)(a1 + 112))
    {
      v20 = *(_DWORD *)(v12 - 12);
      v21 = &v20;
      v14 = *(_QWORD *)(*(_QWORD *)(a1 + 360)
                      + 16
                      * *((int *)std::__hash_table<std::__hash_value_type<int,float>,std::__unordered_map_hasher<int,std::__hash_value_type<int,float>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,float>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,float>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int &&>,std::tuple<>>(a1 + 240, (int *)&v20, (uint64_t)&std::piecewise_construct, &v21)+ 5));
      if (((*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)v14 + 32))(v14, *(unsigned int *)(a2[1] - 4), a3, a5) & 1) != 0)return v20;
    }
  }
  result = 0xFFFFFFFFLL;
  if (*(_BYTE *)(a1 + 384) && (a4 & 1) == 0)
  {
    v16 = (uint64_t **)(a1 + 256);
    do
    {
      v16 = (uint64_t **)*v16;
      if (!v16)
        return 0xFFFFFFFFLL;
      v17 = *(_QWORD *)(*(_QWORD *)(a1 + 360) + 16 * *((int *)v16 + 5));
      v18 = (**(uint64_t (***)(uint64_t))v17)(v17);
    }
    while (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v17 + 32))(v17, v18, a3, a5));
    v19 = v20;
    result = *((unsigned int *)v16 + 4);
    if (v20 == (_DWORD)result)
    {
      *a6 = 1;
      return v19;
    }
  }
  return result;
}

_QWORD *std::__hash_table<std::__hash_value_type<std::vector<int>,int>,std::__unordered_map_hasher<std::vector<int>,std::__hash_value_type<std::vector<int>,int>,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>,true>,std::__unordered_map_equal<std::vector<int>,std::__hash_value_type<std::vector<int>,int>,std::equal_to<std::vector<int>>,kaldi::VectorHasher<int>,true>,std::allocator<std::__hash_value_type<std::vector<int>,int>>>::__emplace_unique_key_args<std::vector<int>,std::pair<std::vector<int>,int> &>(uint64_t a1, int **a2, uint64_t a3)
{
  unint64_t v3;
  int *v6;
  int *v7;
  unint64_t v8;
  int *v9;
  uint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  unint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  size_t v16;
  unint64_t v17;
  const void *v18;
  float v19;
  float v20;
  _BOOL8 v21;
  unint64_t v22;
  unint64_t v23;
  size_t v24;
  _QWORD *v25;
  unint64_t v26;
  _QWORD *v28;

  v7 = *a2;
  v6 = a2[1];
  if (*a2 == v6)
  {
    v8 = 0;
  }
  else
  {
    v8 = 0;
    v9 = *a2;
    do
    {
      v10 = *v9++;
      v8 = v10 + 7853 * v8;
    }
    while (v9 != v6);
  }
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      v3 = v8;
      if (v8 >= v11)
        v3 = v8 % v11;
    }
    else
    {
      v3 = (v11 - 1) & v8;
    }
    v14 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
    if (v14)
    {
      v15 = (_QWORD *)*v14;
      if (*v14)
      {
        v16 = (char *)v6 - (char *)v7;
        do
        {
          v17 = v15[1];
          if (v17 == v8)
          {
            v18 = (const void *)v15[2];
            if (v15[3] - (_QWORD)v18 == v16 && !memcmp(v18, v7, v16))
              return v15;
          }
          else
          {
            if (v13 > 1)
            {
              if (v17 >= v11)
                v17 %= v11;
            }
            else
            {
              v17 &= v11 - 1;
            }
            if (v17 != v3)
              break;
          }
          v15 = (_QWORD *)*v15;
        }
        while (v15);
      }
    }
  }
  std::__hash_table<std::__hash_value_type<std::vector<int>,int>,std::__unordered_map_hasher<std::vector<int>,std::__hash_value_type<std::vector<int>,int>,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>,true>,std::__unordered_map_equal<std::vector<int>,std::__hash_value_type<std::vector<int>,int>,std::equal_to<std::vector<int>>,kaldi::VectorHasher<int>,true>,std::allocator<std::__hash_value_type<std::vector<int>,int>>>::__construct_node_hash<std::pair<std::vector<int>,int> &>(a1, v8, a3, (uint64_t)&v28);
  v19 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v20 = *(float *)(a1 + 32);
  if (!v11 || (float)(v20 * (float)v11) < v19)
  {
    v21 = 1;
    if (v11 >= 3)
      v21 = (v11 & (v11 - 1)) != 0;
    v22 = v21 | (2 * v11);
    v23 = vcvtps_u32_f32(v19 / v20);
    if (v22 <= v23)
      v24 = v23;
    else
      v24 = v22;
    std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::__rehash<true>(a1, v24);
    v11 = *(_QWORD *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v8 >= v11)
        v3 = v8 % v11;
      else
        v3 = v8;
    }
    else
    {
      v3 = (v11 - 1) & v8;
    }
  }
  v25 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v25)
  {
    *v28 = *v25;
    *v25 = v28;
  }
  else
  {
    *v28 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v28;
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v3) = a1 + 16;
    if (*v28)
    {
      v26 = *(_QWORD *)(*v28 + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v26 >= v11)
          v26 %= v11;
      }
      else
      {
        v26 &= v11 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v26) = v28;
    }
  }
  v15 = v28;
  ++*(_QWORD *)(a1 + 24);
  return v15;
}

void sub_1AD8F1180(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _QWORD *__p, uint64_t a11)
{
  if (__p)
    std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::vector<int>,int>,void *>>>::operator()[abi:ne180100]((uint64_t)&a11, __p);
  _Unwind_Resume(exception_object);
}

_QWORD *std::__hash_table<std::__hash_value_type<std::vector<int>,int>,std::__unordered_map_hasher<std::vector<int>,std::__hash_value_type<std::vector<int>,int>,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>,true>,std::__unordered_map_equal<std::vector<int>,std::__hash_value_type<std::vector<int>,int>,std::equal_to<std::vector<int>>,kaldi::VectorHasher<int>,true>,std::allocator<std::__hash_value_type<std::vector<int>,int>>>::__construct_node_hash<std::pair<std::vector<int>,int> &>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  _QWORD *v8;
  _QWORD *result;

  v7 = a1 + 16;
  v8 = operator new(0x30uLL);
  *(_QWORD *)a4 = v8;
  *(_QWORD *)(a4 + 8) = v7;
  *(_BYTE *)(a4 + 16) = 0;
  *v8 = 0;
  v8[1] = a2;
  v8[3] = 0;
  v8[4] = 0;
  v8[2] = 0;
  result = std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(v8 + 2, *(const void **)a3, *(_QWORD *)(a3 + 8), (uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 2);
  *((_DWORD *)v8 + 10) = *(_DWORD *)(a3 + 24);
  *(_BYTE *)(a4 + 16) = 1;
  return result;
}

void sub_1AD8F1224(_Unwind_Exception *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  *v1 = 0;
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::vector<int>,int>,void *>>>::operator()[abi:ne180100](v3, v2);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_pointer<kaldi::quasar::RecurrentNeuralDeterministicFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t std::__shared_ptr_pointer<kaldi::quasar::RecurrentNeuralDeterministicFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> *>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 48))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<kaldi::quasar::RecurrentNeuralDeterministicFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> *>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t kaldi::quasar::NeuralNgramDeterministicFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::NeuralNgramDeterministicFst(uint64_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4, _QWORD *a5, char a6)
{
  uint64_t v8;
  Ngram *v9;
  _QWORD *v10;
  unsigned int v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  int v16;
  _QWORD *v17;
  int *v18;
  uint64_t *v19;
  uint64_t *v20;
  _QWORD *v21;
  int v22;
  _QWORD *v23;
  int v24;
  _QWORD *v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  kaldi::quasar::NnlmDecoderWord *v30;
  unsigned int v31;
  unint64_t v32;
  uint64_t v33;
  int v34;
  int v35;
  float v36;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  char **v43;
  _QWORD *v44;
  _QWORD *v45;
  std::vector<int> v46;
  int WordId;
  std::vector<int>::value_type __x[2];

  v8 = a1;
  *(_QWORD *)a1 = &unk_1E5D33ED0;
  *(_QWORD *)(a1 + 8) = a2;
  v9 = *(Ngram **)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v9;
  *(_OWORD *)(a1 + 32) = 0u;
  v39 = a1 + 32;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_DWORD *)(a1 + 64) = 1065353216;
  *(_QWORD *)(a1 + 72) = 0;
  v38 = (uint64_t *)(a1 + 72);
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0x100000000;
  *(_QWORD *)(a1 + 80) = 0;
  *(_DWORD *)(a1 + 108) = *(_DWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 112) = 0u;
  v45 = (_QWORD *)(a1 + 112);
  *(_OWORD *)(a1 + 128) = 0u;
  *(_DWORD *)(a1 + 144) = 1065353216;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_DWORD *)(a1 + 184) = 1065353216;
  *(_OWORD *)(a1 + 192) = 0u;
  v10 = (_QWORD *)(a1 + 192);
  *(_OWORD *)(a1 + 208) = 0u;
  *(_DWORD *)(a1 + 224) = 1065353216;
  *(_QWORD *)(a1 + 232) = 0;
  v43 = (char **)(a1 + 232);
  v44 = (_QWORD *)(a1 + 152);
  *(_QWORD *)(a1 + 240) = 0;
  *(_QWORD *)(a1 + 248) = 0;
  *(_BYTE *)(a1 + 256) = a6;
  v11 = Ngram::getorder(v9);
  *(_DWORD *)(v8 + 24) = kaldi::quasar::NnlmDecoderWord::GetWordId(v9, v11);
  v12 = a3;
  if (a4[1] != *a4)
  {
    v13 = 0;
    v14 = 0;
    v15 = 0;
    v16 = 0;
    v40 = v8;
    v41 = a4;
    do
    {
      WordId = 0;
      WordId = kaldi::quasar::NnlmDecoderWord::GetWordId(*(kaldi::quasar::NnlmDecoderWord **)(v8 + 16), *(_DWORD *)(*v12 + v14));
      if (WordId == *(_DWORD *)(v8 + 24))
      {
        if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
        {
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v46);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v46, (uint64_t)"The LME class ", 14);
          v17 = (_QWORD *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)" is not modeled by the NNLM", 27);
          kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)&v46);
        }
      }
      else
      {
        std::vector<std::shared_ptr<quasar::FeatureExtractor>>::push_back[abi:ne180100](v43, (__int128 *)(*a4 + v13));
        std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::__emplace_unique_key_args<int,int const&>((uint64_t)v45, (int *)(*v12 + v14), (_DWORD *)(*v12 + v14));
        *(_QWORD *)__x = &WordId;
        *((_DWORD *)std::__hash_table<std::__hash_value_type<int,float>,std::__unordered_map_hasher<int,std::__hash_value_type<int,float>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,float>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,float>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int &&>,std::tuple<>>((uint64_t)v44, &WordId, (uint64_t)&std::piecewise_construct, (_DWORD **)__x)+ 5) = v16;
        if (std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>(a5, (int *)(*v12 + v14)))
        {
          v18 = (int *)(*v12 + v14);
          v19 = std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>(a5, v18);
          v20 = v19;
          if (!v19)
            std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
          v21 = a5;
          v22 = *v18;
          *(_QWORD *)__x = (char *)v19 + 20;
          v23 = std::__hash_table<std::__hash_value_type<int,std::pair<int,kaldi::quasar::ClassLmSymbolType>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::pair<int,kaldi::quasar::ClassLmSymbolType>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::pair<int,kaldi::quasar::ClassLmSymbolType>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::pair<int,kaldi::quasar::ClassLmSymbolType>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t)v10, (int *)v19 + 5, (uint64_t)&std::piecewise_construct, (_DWORD **)__x);
          *((_DWORD *)v23 + 5) = v22;
          *((_DWORD *)v23 + 6) = 1;
          v24 = *v18;
          *(_QWORD *)__x = v20 + 3;
          v25 = std::__hash_table<std::__hash_value_type<int,std::pair<int,kaldi::quasar::ClassLmSymbolType>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::pair<int,kaldi::quasar::ClassLmSymbolType>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::pair<int,kaldi::quasar::ClassLmSymbolType>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::pair<int,kaldi::quasar::ClassLmSymbolType>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t)v10, (int *)v20 + 6, (uint64_t)&std::piecewise_construct, (_DWORD **)__x);
          *((_DWORD *)v25 + 5) = v24;
          *((_DWORD *)v25 + 6) = 2;
          *(_QWORD *)__x = v18;
          v26 = std::__hash_table<std::__hash_value_type<int,std::pair<int,kaldi::quasar::ClassLmSymbolType>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::pair<int,kaldi::quasar::ClassLmSymbolType>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::pair<int,kaldi::quasar::ClassLmSymbolType>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::pair<int,kaldi::quasar::ClassLmSymbolType>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t)v10, v18, (uint64_t)&std::piecewise_construct, (_DWORD **)__x);
          *((_DWORD *)v26 + 5) = v16;
          *((_DWORD *)v26 + 6) = 0;
          a5 = v21;
          v8 = v40;
          a4 = v41;
          v12 = a3;
        }
        ++v16;
      }
      ++v15;
      v14 += 4;
      v13 += 16;
    }
    while (v15 < (uint64_t)(a4[1] - *a4) >> 4);
  }
  v28 = *(_QWORD *)(v8 + 232);
  v27 = *(_QWORD *)(v8 + 240);
  if (*(_QWORD *)(v8 + 176) < (unint64_t)((v27 - v28) >> 4))
  {
    if (kaldi::g_kaldi_verbose_level >= -1)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v46);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v46, (uint64_t)"multiple LME FSTs are mapped into the same non-terminals classes, wrong config?", 79);
      kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v46);
      v28 = *(_QWORD *)(v8 + 232);
      v27 = *(_QWORD *)(v8 + 240);
    }
    while (v27 != v28)
      v27 = std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](v27 - 16);
    *(_QWORD *)(v8 + 240) = v28;
    std::__hash_table<std::__hash_value_type<int,float>,std::__unordered_map_hasher<int,std::__hash_value_type<int,float>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,float>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,float>>>::clear(v45);
    std::__hash_table<std::__hash_value_type<int,float>,std::__unordered_map_hasher<int,std::__hash_value_type<int,float>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,float>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,float>>>::clear(v44);
    std::__hash_table<std::__hash_value_type<int,float>,std::__unordered_map_hasher<int,std::__hash_value_type<int,float>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,float>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,float>>>::clear(v10);
  }
  *(_DWORD *)(v8 + 104) = kaldi::MatrixBase<float>::NumCols(*(_QWORD *)(v8 + 16)) + 1;
  v29 = *(int *)(v8 + 108);
  v30 = *(kaldi::quasar::NnlmDecoderWord **)(v8 + 16);
  v31 = kaldi::quasar::NnlmDecoderWord::BosSymbol(v30);
  __x[0] = kaldi::quasar::NnlmDecoderWord::GetWordId(v30, v31);
  std::vector<int>::vector(&v46, v29 + 1, __x);
  LODWORD(v30) = *(_DWORD *)(v8 + 96);
  *(_QWORD *)__x = &v46;
  *((_DWORD *)std::__hash_table<std::__hash_value_type<std::vector<int>,int>,std::__unordered_map_hasher<std::vector<int>,std::__hash_value_type<std::vector<int>,int>,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>,true>,std::__unordered_map_equal<std::vector<int>,std::__hash_value_type<std::vector<int>,int>,std::equal_to<std::vector<int>>,kaldi::VectorHasher<int>,true>,std::allocator<std::__hash_value_type<std::vector<int>,int>>>::__emplace_unique_key_args<std::vector<int>,std::piecewise_construct_t const&,std::tuple<std::vector<int> const&>,std::tuple<>>(v39, &v46.__begin_, (uint64_t)&std::piecewise_construct, (uint64_t *)__x)+ 10) = (_DWORD)v30;
  v32 = *(_QWORD *)(v8 + 80);
  if (v32 >= *(_QWORD *)(v8 + 88))
  {
    v33 = std::vector<std::vector<int>>::__push_back_slow_path<std::vector<int> const&>(v38, (uint64_t)&v46);
  }
  else
  {
    std::vector<std::vector<int>>::__construct_one_at_end[abi:ne180100]<std::vector<int> const&>((uint64_t)v38, (uint64_t)&v46);
    v33 = v32 + 24;
  }
  *(_QWORD *)(v8 + 80) = v33;
  v34 = quasar::artifact::AppLmArtifactLifeCycleStage::operator int(*(_QWORD *)(v8 + 16));
  v35 = kaldi::MatrixBase<float>::NumCols(*(_QWORD *)(v8 + 16));
  v36 = log((double)(v34 - v35 + 1));
  *(float *)(v8 + 28) = v36;
  if (v46.__begin_)
  {
    v46.__end_ = v46.__begin_;
    operator delete(v46.__begin_);
  }
  return v8;
}

void sub_1AD8F16F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19)
{
  uint64_t v19;

  kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
  __p = a15;
  std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(v19);
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(a16);
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(a17);
  __p = a10;
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  std::__hash_table<std::__hash_value_type<std::vector<int>,int>,std::__unordered_map_hasher<std::vector<int>,std::__hash_value_type<std::vector<int>,int>,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>,true>,std::__unordered_map_equal<std::vector<int>,std::__hash_value_type<std::vector<int>,int>,std::equal_to<std::vector<int>>,kaldi::VectorHasher<int>,true>,std::allocator<std::__hash_value_type<std::vector<int>,int>>>::~__hash_table(a11);
  _Unwind_Resume(a1);
}

uint64_t kaldi::quasar::NeuralNgramDeterministicFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::Start(uint64_t a1)
{
  return *(unsigned int *)(a1 + 96);
}

float kaldi::quasar::NeuralNgramDeterministicFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::Final(uint64_t a1, int a2)
{
  uint64_t v3;
  _BYTE *v4;
  int64_t v5;
  int *v6;
  float v7;
  uint64_t v8;
  uint64_t v9;
  float v10;
  kaldi::quasar::CEAttnEncoderDecoder *v11;
  unsigned int v12;
  int WordId;
  int v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char *v22;
  char *v23;
  char *v24;
  int v25;
  float v26;
  BOOL v27;
  float v28;
  void *__p;
  char *v31;
  unint64_t v32;
  char *v33;
  int v34;

  v3 = *(_QWORD *)(a1 + 72) + 24 * a2;
  __p = 0;
  v31 = 0;
  v32 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, *(const void **)v3, *(_QWORD *)(v3 + 8), (uint64_t)(*(_QWORD *)(v3 + 8) - *(_QWORD *)v3) >> 2);
  v4 = __p;
  v5 = v31 - ((_BYTE *)__p + 4);
  if (v31 != (char *)__p + 4)
    memmove(__p, (char *)__p + 4, v31 - ((_BYTE *)__p + 4));
  v6 = (int *)&v4[v5];
  v31 = &v4[v5];
  v7 = 0.0;
  if (*(int *)(a1 + 108) < (unint64_t)((&v4[v5] - (_BYTE *)__p) >> 2)
    && (v8 = *(v6 - 1),
        v31 = (char *)(v6 - 1),
        v33 = (char *)(v6 - 2),
        v9 = *(_QWORD *)(*(_QWORD *)(a1 + 232)
                       + 16
                       * *((unsigned int *)std::__hash_table<std::__hash_value_type<int,float>,std::__unordered_map_hasher<int,std::__hash_value_type<int,float>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,float>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,float>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int &&>,std::tuple<>>(a1 + 152, v6 - 2, (uint64_t)&std::piecewise_construct, (_DWORD **)&v33)+ 5)), v7 = (*(float (**)(uint64_t, uint64_t))(*(_QWORD *)v9 + 16))(v9, v8), *(float *)&v33 = v7, v34 = 2139095040, v7 == INFINITY))
  {
    v10 = INFINITY;
  }
  else
  {
    v11 = *(kaldi::quasar::CEAttnEncoderDecoder **)(a1 + 16);
    v12 = kaldi::quasar::CEAttnEncoderDecoder::BlankIndex(v11);
    WordId = kaldi::quasar::NnlmDecoderWord::GetWordId(v11, v12);
    v14 = WordId;
    v15 = v31;
    if ((unint64_t)v31 >= v32)
    {
      v17 = (char *)__p;
      v18 = (v31 - (_BYTE *)__p) >> 2;
      v19 = v18 + 1;
      if ((unint64_t)(v18 + 1) >> 62)
        std::vector<int>::__throw_length_error[abi:ne180100]();
      v20 = v32 - (_QWORD)__p;
      if ((uint64_t)(v32 - (_QWORD)__p) >> 1 > v19)
        v19 = v20 >> 1;
      if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFFCLL)
        v21 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v21 = v19;
      if (v21)
      {
        v22 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v32, v21);
        v17 = (char *)__p;
        v15 = v31;
      }
      else
      {
        v22 = 0;
      }
      v23 = &v22[4 * v18];
      v24 = &v22[4 * v21];
      *(_DWORD *)v23 = v14;
      v16 = v23 + 4;
      while (v15 != v17)
      {
        v25 = *((_DWORD *)v15 - 1);
        v15 -= 4;
        *((_DWORD *)v23 - 1) = v25;
        v23 -= 4;
      }
      __p = v23;
      v31 = v16;
      v32 = (unint64_t)v24;
      if (v17)
        operator delete(v17);
    }
    else
    {
      *(_DWORD *)v31 = WordId;
      v16 = v15 + 4;
    }
    v31 = v16;
    (*(void (**)(_QWORD, void **))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8), &__p);
    v10 = NAN;
    if (v7 != -INFINITY && v26 != -INFINITY)
    {
      v27 = v26 == INFINITY || v7 == INFINITY;
      v28 = v7 + v26;
      if (v27)
        v10 = INFINITY;
      else
        v10 = v28;
    }
  }
  if (__p)
  {
    v31 = (char *)__p;
    operator delete(__p);
  }
  return v10;
}

void sub_1AD8F19FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t kaldi::quasar::NeuralNgramDeterministicFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::GetArc(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  int v9;
  int v10;
  int v11;
  int LmeArc;
  int v13;
  int v14;
  char *v15;
  uint64_t v16;
  int64_t v17;
  char *v18;
  char *v19;
  signed int v20;
  _BYTE *v21;
  int64_t v22;
  int *v23;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  int64_t v28;
  char *v29;
  char *v30;
  char *v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  char *v36;
  uint64_t v37;
  float v38;
  float v39;
  float v40;
  BOOL v41;
  float v42;
  char *v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  char *v48;
  int *v49;
  uint64_t v50;
  int v51;
  int WordId;
  int v53;
  int v54;
  char *v55;
  char *v56;
  char *v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  unint64_t v61;
  char *v62;
  char *v63;
  char *v64;
  int v65;
  float v66;
  float v67;
  BOOL v68;
  float v69;
  float v70;
  float v71;
  BOOL v72;
  float v73;
  char *v74;
  char *v75;
  char *v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  unint64_t v80;
  char *v81;
  char *v82;
  char *v83;
  int v84;
  char *v85;
  char *v86;
  int v87;
  float v88;
  float v89;
  float v90;
  BOOL v91;
  float v92;
  uint64_t v93;
  float v94;
  float v95;
  float v96;
  BOOL v97;
  float v98;
  uint64_t (***v99)(_QWORD);
  int v100;
  int v101;
  char *v102;
  char *v103;
  char *v104;
  uint64_t v105;
  unint64_t v106;
  uint64_t v107;
  unint64_t v108;
  char *v109;
  char *v110;
  char *v111;
  int v112;
  float v113;
  float v114;
  float v115;
  BOOL v116;
  float v117;
  char *v118;
  char *v119;
  char *v120;
  uint64_t v121;
  unint64_t v122;
  uint64_t v123;
  unint64_t v124;
  char *v125;
  char *v126;
  char *v127;
  int v128;
  uint64_t v129;
  float v130;
  float v131;
  BOOL v132;
  float v133;
  BOOL v134;
  float v135;
  uint64_t v136;
  char *v137;
  char *v138;
  int v139;
  float v140;
  float v141;
  BOOL v142;
  float v143;
  void *v144;
  _QWORD *v145;
  char v146;
  unint64_t v147;
  uint64_t v148;
  void *v150[3];
  int v151;
  char v152;
  void *__p;
  char *v154;
  unint64_t v155;
  int v156;
  int *v157;
  int v158;

  v156 = a3;
  v7 = a1 + 72;
  v8 = *(_QWORD *)(a1 + 72) + 24 * a2;
  __p = 0;
  v154 = 0;
  v155 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, *(const void **)v8, *(_QWORD *)(v8 + 8), (uint64_t)(*(_QWORD *)(v8 + 8) - *(_QWORD *)v8) >> 2);
  v9 = *(_DWORD *)(v7 + 32);
  v10 = *(_DWORD *)__p / v9;
  v11 = v10 - 1;
  if (v10 >= 1)
  {
    *(int *)__p %= v9;
    goto LABEL_3;
  }
  v20 = a3;
  if (*(_BYTE *)(a1 + 256))
  {
    if ((int)quasar::artifact::AppLmArtifactLifeCycleStage::operator int(*(_QWORD *)(a1 + 16)) <= (int)a3)
      goto LABEL_3;
    if (*(_BYTE *)(a1 + 256))
    {
LABEL_14:
      v21 = __p;
      v22 = v154 - ((_BYTE *)__p + 4);
      if (v154 != (char *)__p + 4)
        memmove(__p, (char *)__p + 4, v154 - ((_BYTE *)__p + 4));
      v49 = (int *)&v21[v22];
      v154 = &v21[v22];
      if (*(int *)(a1 + 108) >= (unint64_t)((&v21[v22] - (_BYTE *)__p) >> 2))
      {
        v50 = 0xFFFFFFFFLL;
        v51 = -1;
      }
      else
      {
        v50 = *(v49 - 1);
        v154 = (char *)(v49 - 1);
        v150[0] = v49 - 2;
        v51 = *((_DWORD *)std::__hash_table<std::__hash_value_type<int,float>,std::__unordered_map_hasher<int,std::__hash_value_type<int,float>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,float>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,float>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int &&>,std::tuple<>>(a1 + 152, v49 - 2, (uint64_t)&std::piecewise_construct, (_DWORD **)v150)+ 5);
      }
      if (*(_BYTE *)(a1 + 256))
      {
        *(_DWORD *)(a4 + 4) = v156;
        if (std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>((_QWORD *)(a1 + 192), &v156))
        {
          v150[0] = &v156;
          if (*((_DWORD *)std::__hash_table<std::__hash_value_type<int,std::pair<int,kaldi::quasar::ClassLmSymbolType>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::pair<int,kaldi::quasar::ClassLmSymbolType>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::pair<int,kaldi::quasar::ClassLmSymbolType>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::pair<int,kaldi::quasar::ClassLmSymbolType>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(a1 + 192, &v156, (uint64_t)&std::piecewise_construct, (_DWORD **)v150)+ 6) == 1)
          {
            v150[0] = &v156;
            v156 = *((_DWORD *)std::__hash_table<std::__hash_value_type<int,std::pair<int,kaldi::quasar::ClassLmSymbolType>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::pair<int,kaldi::quasar::ClassLmSymbolType>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::pair<int,kaldi::quasar::ClassLmSymbolType>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::pair<int,kaldi::quasar::ClassLmSymbolType>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(a1 + 192, &v156, (uint64_t)&std::piecewise_construct, (_DWORD **)v150)+ 5);
            v150[0] = &v156;
            v11 = *((_DWORD *)std::__hash_table<std::__hash_value_type<int,std::pair<int,kaldi::quasar::ClassLmSymbolType>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::pair<int,kaldi::quasar::ClassLmSymbolType>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::pair<int,kaldi::quasar::ClassLmSymbolType>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::pair<int,kaldi::quasar::ClassLmSymbolType>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(a1 + 192, &v156, (uint64_t)&std::piecewise_construct, (_DWORD **)v150)+ 5);
          }
        }
      }
      WordId = kaldi::quasar::NnlmDecoderWord::GetWordId(*(kaldi::quasar::NnlmDecoderWord **)(a1 + 16), v156);
      v53 = WordId;
      v54 = *(_DWORD *)(a1 + 24);
      v55 = v154;
      if ((unint64_t)v154 >= v155)
      {
        v57 = (char *)__p;
        v58 = (v154 - (_BYTE *)__p) >> 2;
        v59 = v58 + 1;
        if ((unint64_t)(v58 + 1) >> 62)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v60 = v155 - (_QWORD)__p;
        if ((uint64_t)(v155 - (_QWORD)__p) >> 1 > v59)
          v59 = v60 >> 1;
        if ((unint64_t)v60 >= 0x7FFFFFFFFFFFFFFCLL)
          v61 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v61 = v59;
        if (v61)
        {
          v62 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v155, v61);
          v57 = (char *)__p;
          v55 = v154;
        }
        else
        {
          v62 = 0;
        }
        v85 = &v62[4 * v58];
        v86 = &v62[4 * v61];
        *(_DWORD *)v85 = v53;
        v56 = v85 + 4;
        while (v55 != v57)
        {
          v87 = *((_DWORD *)v55 - 1);
          v55 -= 4;
          *((_DWORD *)v85 - 1) = v87;
          v85 -= 4;
        }
        __p = v85;
        v154 = v56;
        v155 = (unint64_t)v86;
        if (v57)
          operator delete(v57);
      }
      else
      {
        *(_DWORD *)v154 = WordId;
        v56 = v55 + 4;
      }
      v154 = v56;
      v88 = (*(float (**)(_QWORD, void **))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8), &__p);
      *(float *)(a4 + 8) = v88;
      if (v53 == v54)
      {
        v89 = NAN;
        if (v88 != -INFINITY)
        {
          v90 = *(float *)(a1 + 28);
          v89 = NAN;
          if (v90 != -INFINITY)
          {
            v89 = INFINITY;
            v91 = v90 == INFINITY || v88 == INFINITY;
            v92 = v88 + v90;
            if (!v91)
              v89 = v92;
          }
        }
        *(float *)(a4 + 8) = v89;
      }
      if ((_DWORD)v50 != -1)
      {
        v93 = *(_QWORD *)(*(_QWORD *)(a1 + 232) + 16 * v51);
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v93 + 16))(v93, v50);
        v95 = *(float *)(a4 + 8);
        v96 = NAN;
        if (v95 != -INFINITY && v94 != -INFINITY)
        {
          v96 = INFINITY;
          v97 = v95 == INFINITY || v94 == INFINITY;
          v98 = v94 + v95;
          if (!v97)
            v96 = v98;
        }
        *(float *)(a4 + 8) = v96;
      }
      if (std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>((_QWORD *)(a1 + 112), &v156))
      {
        *(_DWORD *)(a4 + 4) = 0;
        v150[0] = v154 - 4;
        v99 = *(uint64_t (****)(_QWORD))(*(_QWORD *)(a1 + 232)
                                                 + 16
                                                 * *((int *)std::__hash_table<std::__hash_value_type<int,float>,std::__unordered_map_hasher<int,std::__hash_value_type<int,float>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,float>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,float>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int &&>,std::tuple<>>(a1 + 152, (int *)v154 - 1, (uint64_t)&std::piecewise_construct, (_DWORD **)v150)+ 5));
        v100 = (**v99)(v99);
        v101 = v100;
        v102 = v154;
        if ((unint64_t)v154 >= v155)
        {
          v104 = (char *)__p;
          v105 = (v154 - (_BYTE *)__p) >> 2;
          v106 = v105 + 1;
          if ((unint64_t)(v105 + 1) >> 62)
            std::vector<int>::__throw_length_error[abi:ne180100]();
          v107 = v155 - (_QWORD)__p;
          if ((uint64_t)(v155 - (_QWORD)__p) >> 1 > v106)
            v106 = v107 >> 1;
          if ((unint64_t)v107 >= 0x7FFFFFFFFFFFFFFCLL)
            v108 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v108 = v106;
          if (v108)
          {
            v109 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v155, v108);
            v104 = (char *)__p;
            v102 = v154;
          }
          else
          {
            v109 = 0;
          }
          v137 = &v109[4 * v105];
          v138 = &v109[4 * v108];
          *(_DWORD *)v137 = v101;
          v103 = v137 + 4;
          while (v102 != v104)
          {
            v139 = *((_DWORD *)v102 - 1);
            v102 -= 4;
            *((_DWORD *)v137 - 1) = v139;
            v137 -= 4;
          }
          __p = v137;
          v154 = v103;
          v155 = (unint64_t)v138;
          if (v104)
            operator delete(v104);
        }
        else
        {
          *(_DWORD *)v154 = v100;
          v103 = v102 + 4;
        }
        v154 = v103;
        if (std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>((_QWORD *)(a1 + 192), &v156))
        {
          v150[0] = &v156;
          if (!*((_DWORD *)std::__hash_table<std::__hash_value_type<int,std::pair<int,kaldi::quasar::ClassLmSymbolType>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::pair<int,kaldi::quasar::ClassLmSymbolType>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::pair<int,kaldi::quasar::ClassLmSymbolType>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::pair<int,kaldi::quasar::ClassLmSymbolType>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(a1 + 192, &v156, (uint64_t)&std::piecewise_construct, (_DWORD **)v150)+ 6))
          {
            v150[0] = &v156;
            v11 = *((_DWORD *)std::__hash_table<std::__hash_value_type<int,std::pair<int,kaldi::quasar::ClassLmSymbolType>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::pair<int,kaldi::quasar::ClassLmSymbolType>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::pair<int,kaldi::quasar::ClassLmSymbolType>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::pair<int,kaldi::quasar::ClassLmSymbolType>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(a1 + 192, &v156, (uint64_t)&std::piecewise_construct, (_DWORD **)v150)+ 5);
          }
        }
      }
      else
      {
        *(_DWORD *)(a4 + 4) = a3;
      }
      goto LABEL_201;
    }
    v20 = v156;
  }
  if (!kaldi::quasar::NnlmDecoderWord::IsPhoneWord(*(kaldi::quasar::NnlmDecoderWord **)(a1 + 16), v20))
    goto LABEL_14;
LABEL_3:
  v152 = 0;
  LmeArc = kaldi::quasar::NeuralNgramDeterministicFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::GetLmeArc(a1, &__p, v156, v10 > 0, (uint64_t)v150, &v152);
  v13 = LmeArc;
  if (LmeArc < 0)
    goto LABEL_191;
  v14 = *(_DWORD *)(a1 + 24);
  v15 = (char *)__p;
  v16 = *(int *)(a1 + 108);
  if (v16 + 1 != (v154 - (_BYTE *)__p) >> 2)
  {
    v23 = (int *)((char *)__p + 4 * v16);
    if (LmeArc == *v23 && v152 == 0)
    {
      *((_DWORD *)v154 - 1) = HIDWORD(v150[1]);
      *(void **)(a4 + 4) = *(void **)((char *)v150 + 4);
      if (v10 < 1)
        goto LABEL_201;
      if (!std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>((_QWORD *)(a1 + 192), &v156))goto LABEL_201;
      v157 = &v156;
      if (*((_DWORD *)std::__hash_table<std::__hash_value_type<int,std::pair<int,kaldi::quasar::ClassLmSymbolType>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::pair<int,kaldi::quasar::ClassLmSymbolType>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::pair<int,kaldi::quasar::ClassLmSymbolType>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::pair<int,kaldi::quasar::ClassLmSymbolType>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(a1 + 192, &v156, (uint64_t)&std::piecewise_construct, &v157)+ 6) != 2)goto LABEL_201;
      v37 = *(_QWORD *)(*(_QWORD *)(a1 + 232) + 16 * (v10 - 1));
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v37 + 16))(v37, *((unsigned int *)v154 - 1));
      v39 = *(float *)(a4 + 8);
      v40 = NAN;
      if (v39 != -INFINITY && v38 != -INFINITY)
      {
        v40 = INFINITY;
        v41 = v39 == INFINITY || v38 == INFINITY;
        v42 = v38 + v39;
        if (!v41)
          v40 = v42;
      }
      *(float *)(a4 + 8) = v40;
      v154 -= 4;
      goto LABEL_190;
    }
    v25 = *((unsigned int *)v154 - 1);
    v157 = (int *)((char *)__p + 4 * v16);
    v26 = *((int *)std::__hash_table<std::__hash_value_type<int,float>,std::__unordered_map_hasher<int,std::__hash_value_type<int,float>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,float>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,float>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int &&>,std::tuple<>>(a1 + 152, v23, (uint64_t)&std::piecewise_construct, &v157)+ 5);
    v27 = (char *)__p;
    v28 = v154 - ((_BYTE *)__p + 4);
    if (v154 != (char *)__p + 4)
      memmove(__p, (char *)__p + 4, v154 - ((_BYTE *)__p + 4));
    v29 = &v27[v28];
    v30 = v29 - 4;
    v154 = v29 - 4;
    if ((unint64_t)(v29 - 4) >= v155)
    {
      v43 = (char *)__p;
      v44 = (v30 - (_BYTE *)__p) >> 2;
      v45 = v44 + 1;
      if ((unint64_t)(v44 + 1) >> 62)
        std::vector<int>::__throw_length_error[abi:ne180100]();
      v46 = v155 - (_QWORD)__p;
      if ((uint64_t)(v155 - (_QWORD)__p) >> 1 > v45)
        v45 = v46 >> 1;
      if ((unint64_t)v46 >= 0x7FFFFFFFFFFFFFFCLL)
        v47 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v47 = v45;
      if (v47)
      {
        v48 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v155, v47);
        v43 = (char *)__p;
        v30 = v154;
      }
      else
      {
        v48 = 0;
      }
      v110 = &v48[4 * v44];
      v111 = &v48[4 * v47];
      *(_DWORD *)v110 = v13;
      v29 = v110 + 4;
      while (v30 != v43)
      {
        v112 = *((_DWORD *)v30 - 1);
        v30 -= 4;
        *((_DWORD *)v110 - 1) = v112;
        v110 -= 4;
      }
      __p = v110;
      v154 = v29;
      v155 = (unint64_t)v111;
      if (v43)
        operator delete(v43);
    }
    else
    {
      *(_DWORD *)v30 = v13;
    }
    v154 = v29;
    v113 = (*(float (**)(_QWORD, void **))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8), &__p);
    v114 = v113;
    if (v13 == v14)
    {
      v114 = NAN;
      if (v113 != -INFINITY)
      {
        v115 = *(float *)(a1 + 28);
        v114 = NAN;
        if (v115 != -INFINITY)
        {
          v116 = v115 == INFINITY || v113 == INFINITY;
          v117 = v113 + v115;
          if (v116)
            v114 = INFINITY;
          else
            v114 = v117;
        }
      }
    }
    v118 = v154;
    if ((unint64_t)v154 >= v155)
    {
      v120 = (char *)__p;
      v121 = (v154 - (_BYTE *)__p) >> 2;
      v122 = v121 + 1;
      if ((unint64_t)(v121 + 1) >> 62)
        std::vector<int>::__throw_length_error[abi:ne180100]();
      v123 = v155 - (_QWORD)__p;
      if ((uint64_t)(v155 - (_QWORD)__p) >> 1 > v122)
        v122 = v123 >> 1;
      if ((unint64_t)v123 >= 0x7FFFFFFFFFFFFFFCLL)
        v124 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v124 = v122;
      if (v124)
      {
        v125 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v155, v124);
        v120 = (char *)__p;
        v118 = v154;
      }
      else
      {
        v125 = 0;
      }
      v126 = &v125[4 * v121];
      v127 = &v125[4 * v124];
      *(_DWORD *)v126 = HIDWORD(v150[1]);
      v119 = v126 + 4;
      while (v118 != v120)
      {
        v128 = *((_DWORD *)v118 - 1);
        v118 -= 4;
        *((_DWORD *)v126 - 1) = v128;
        v126 -= 4;
      }
      __p = v126;
      v154 = v119;
      v155 = (unint64_t)v127;
      if (v120)
        operator delete(v120);
    }
    else
    {
      *(_DWORD *)v154 = HIDWORD(v150[1]);
      v119 = v118 + 4;
    }
    v154 = v119;
    *(_DWORD *)(a4 + 4) = HIDWORD(v150[0]);
    v129 = *(_QWORD *)(*(_QWORD *)(a1 + 232) + 16 * v26);
    v130 = (*(float (**)(uint64_t, uint64_t))(*(_QWORD *)v129 + 16))(v129, v25);
    *(float *)&v157 = v130;
    v158 = 2139095040;
    if (v130 != INFINITY)
    {
      v131 = NAN;
      if (v130 != -INFINITY)
      {
        v131 = NAN;
        if (*(float *)&v150[1] != -INFINITY)
        {
          v132 = *(float *)&v150[1] == INFINITY || v130 == INFINITY;
          v133 = v130 + *(float *)&v150[1];
          if (v132)
            v133 = INFINITY;
          v131 = NAN;
          if (v133 != -INFINITY && v114 != -INFINITY)
          {
            v131 = INFINITY;
            v134 = v133 == INFINITY || v114 == INFINITY;
            v135 = v114 + v133;
            if (!v134)
              v131 = v135;
          }
        }
      }
      *(float *)(a4 + 8) = v131;
LABEL_190:
      v11 = -1;
      goto LABEL_201;
    }
LABEL_191:
    v136 = 0;
    goto LABEL_220;
  }
  v17 = v154 - ((_BYTE *)__p + 4);
  if (v154 != (char *)__p + 4)
    memmove(__p, (char *)__p + 4, v154 - ((_BYTE *)__p + 4));
  v18 = &v15[v17];
  v154 = &v15[v17];
  if ((unint64_t)&v15[v17] >= v155)
  {
    v31 = (char *)__p;
    v32 = (v18 - (_BYTE *)__p) >> 2;
    v33 = v32 + 1;
    if ((unint64_t)(v32 + 1) >> 62)
      goto LABEL_223;
    v34 = v155 - (_QWORD)__p;
    if ((uint64_t)(v155 - (_QWORD)__p) >> 1 > v33)
      v33 = v34 >> 1;
    if ((unint64_t)v34 >= 0x7FFFFFFFFFFFFFFCLL)
      v35 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v35 = v33;
    if (v35)
    {
      v36 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v155, v35);
      v31 = (char *)__p;
      v18 = v154;
    }
    else
    {
      v36 = 0;
    }
    v63 = &v36[4 * v32];
    v64 = &v36[4 * v35];
    *(_DWORD *)v63 = v13;
    v19 = v63 + 4;
    while (v18 != v31)
    {
      v65 = *((_DWORD *)v18 - 1);
      v18 -= 4;
      *((_DWORD *)v63 - 1) = v65;
      v63 -= 4;
    }
    __p = v63;
    v154 = v19;
    v155 = (unint64_t)v64;
    if (v31)
      operator delete(v31);
  }
  else
  {
    *(_DWORD *)v18 = v13;
    v19 = v18 + 4;
  }
  v154 = v19;
  v66 = (*(float (**)(_QWORD, void **))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8), &__p);
  v67 = NAN;
  if (v66 != -INFINITY)
  {
    v67 = NAN;
    if (*(float *)&v150[1] != -INFINITY)
    {
      v67 = INFINITY;
      v68 = *(float *)&v150[1] == INFINITY || v66 == INFINITY;
      v69 = v66 + *(float *)&v150[1];
      if (!v68)
        v67 = v69;
    }
  }
  *(float *)(a4 + 8) = v67;
  if (v13 == v14)
  {
    v70 = NAN;
    if (v67 != -INFINITY)
    {
      v71 = *(float *)(a1 + 28);
      v70 = NAN;
      if (v71 != -INFINITY)
      {
        v70 = INFINITY;
        v72 = v71 == INFINITY || v67 == INFINITY;
        v73 = v67 + v71;
        if (!v72)
          v70 = v73;
      }
    }
    *(float *)(a4 + 8) = v70;
  }
  v74 = v154;
  if ((unint64_t)v154 >= v155)
  {
    v76 = (char *)__p;
    v77 = (v154 - (_BYTE *)__p) >> 2;
    v78 = v77 + 1;
    if (!((unint64_t)(v77 + 1) >> 62))
    {
      v79 = v155 - (_QWORD)__p;
      if ((uint64_t)(v155 - (_QWORD)__p) >> 1 > v78)
        v78 = v79 >> 1;
      if ((unint64_t)v79 >= 0x7FFFFFFFFFFFFFFCLL)
        v80 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v80 = v78;
      if (v80)
      {
        v81 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v155, v80);
        v76 = (char *)__p;
        v74 = v154;
      }
      else
      {
        v81 = 0;
      }
      v82 = &v81[4 * v77];
      v83 = &v81[4 * v80];
      *(_DWORD *)v82 = HIDWORD(v150[1]);
      v75 = v82 + 4;
      while (v74 != v76)
      {
        v84 = *((_DWORD *)v74 - 1);
        v74 -= 4;
        *((_DWORD *)v82 - 1) = v84;
        v82 -= 4;
      }
      __p = v82;
      v154 = v75;
      v155 = (unint64_t)v83;
      if (v76)
        operator delete(v76);
      goto LABEL_106;
    }
LABEL_223:
    std::vector<int>::__throw_length_error[abi:ne180100]();
  }
  *(_DWORD *)v154 = HIDWORD(v150[1]);
  v75 = v74 + 4;
LABEL_106:
  v154 = v75;
  *(_DWORD *)(a4 + 4) = HIDWORD(v150[0]);
LABEL_201:
  if (v156 != (_DWORD)a3)
  {
    LOBYTE(v157) = 0;
    kaldi::quasar::NeuralNgramDeterministicFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::GetLmeArc(a1, &__p, a3, v11 >= 0, (uint64_t)v150, &v157);
    *((_DWORD *)v154 - 1) = HIDWORD(v150[1]);
    *(_DWORD *)(a4 + 4) = HIDWORD(v150[0]);
    v140 = *(float *)(a4 + 8);
    v141 = NAN;
    if (v140 != -INFINITY)
    {
      v141 = NAN;
      if (*(float *)&v150[1] != -INFINITY)
      {
        v141 = INFINITY;
        v142 = *(float *)&v150[1] == INFINITY || v140 == INFINITY;
        v143 = v140 + *(float *)&v150[1];
        if (!v142)
          v141 = v143;
      }
    }
    *(float *)(a4 + 8) = v141;
  }
  v144 = __p;
  if ((v11 & 0x80000000) == 0)
    *(_DWORD *)__p += *(_DWORD *)(a1 + 104) + *(_DWORD *)(a1 + 104) * v11;
  memset(v150, 0, sizeof(v150));
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(v150, v144, (uint64_t)v154, (v154 - (_BYTE *)v144) >> 2);
  v151 = *(_DWORD *)(a1 + 100);
  v145 = std::__hash_table<std::__hash_value_type<std::vector<int>,int>,std::__unordered_map_hasher<std::vector<int>,std::__hash_value_type<std::vector<int>,int>,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>,true>,std::__unordered_map_equal<std::vector<int>,std::__hash_value_type<std::vector<int>,int>,std::equal_to<std::vector<int>>,kaldi::VectorHasher<int>,true>,std::allocator<std::__hash_value_type<std::vector<int>,int>>>::__emplace_unique_key_args<std::vector<int>,std::pair<std::vector<int>,int> &>(a1 + 32, (int **)v150, (uint64_t)v150);
  if (v146)
  {
    ++*(_DWORD *)(a1 + 100);
    v147 = *(_QWORD *)(a1 + 80);
    if (v147 >= *(_QWORD *)(a1 + 88))
    {
      v148 = std::vector<std::vector<int>>::__push_back_slow_path<std::vector<int> const&>((uint64_t *)v7, (uint64_t)v150);
    }
    else
    {
      std::vector<std::vector<int>>::__construct_one_at_end[abi:ne180100]<std::vector<int> const&>(v7, (uint64_t)v150);
      v148 = v147 + 24;
    }
    *(_QWORD *)(a1 + 80) = v148;
  }
  *(_DWORD *)a4 = a3;
  *(_DWORD *)(a4 + 12) = *((_DWORD *)v145 + 10);
  if (v150[0])
  {
    v150[1] = v150[0];
    operator delete(v150[0]);
  }
  v136 = 1;
LABEL_220:
  if (__p)
  {
    v154 = (char *)__p;
    operator delete(__p);
  }
  return v136;
}

void sub_1AD8F2768(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1AD8F27C0(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  JUMPOUT(0x1AD8F27A8);
}

uint64_t kaldi::quasar::NeuralNgramDeterministicFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::~NeuralNgramDeterministicFst(uint64_t a1)
{
  uint64_t v2;
  void **v4;

  *(_QWORD *)a1 = &unk_1E5D33ED0;
  v2 = a1 + 32;
  v4 = (void **)(a1 + 232);
  std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100](&v4);
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(a1 + 192);
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(a1 + 152);
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(a1 + 112);
  v4 = (void **)(a1 + 72);
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100](&v4);
  std::__hash_table<std::__hash_value_type<std::vector<int>,int>,std::__unordered_map_hasher<std::vector<int>,std::__hash_value_type<std::vector<int>,int>,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>,true>,std::__unordered_map_equal<std::vector<int>,std::__hash_value_type<std::vector<int>,int>,std::equal_to<std::vector<int>>,kaldi::VectorHasher<int>,true>,std::allocator<std::__hash_value_type<std::vector<int>,int>>>::~__hash_table(v2);
  return a1;
}

{
  uint64_t v2;
  void **v4;

  *(_QWORD *)a1 = &unk_1E5D33ED0;
  v2 = a1 + 32;
  v4 = (void **)(a1 + 232);
  std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100](&v4);
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(a1 + 192);
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(a1 + 152);
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(a1 + 112);
  v4 = (void **)(a1 + 72);
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100](&v4);
  std::__hash_table<std::__hash_value_type<std::vector<int>,int>,std::__unordered_map_hasher<std::vector<int>,std::__hash_value_type<std::vector<int>,int>,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>,true>,std::__unordered_map_equal<std::vector<int>,std::__hash_value_type<std::vector<int>,int>,std::equal_to<std::vector<int>>,kaldi::VectorHasher<int>,true>,std::allocator<std::__hash_value_type<std::vector<int>,int>>>::~__hash_table(v2);
  return MEMORY[0x1AF44D190](a1, 0x10E1C408DCDB8B8);
}

uint64_t kaldi::quasar::NeuralNgramDeterministicFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::GetLmeArc(uint64_t a1, _QWORD *a2, uint64_t a3, char a4, uint64_t a5, _BYTE *a6)
{
  uint64_t v11;
  uint64_t v13;
  uint64_t result;
  uint64_t **v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  unsigned int *v20;

  *a6 = 0;
  v19 = -1;
  v11 = *(int *)(a1 + 108);
  if (v11 + 1 < (unint64_t)((uint64_t)(a2[1] - *a2) >> 2))
  {
    v19 = *(_DWORD *)(*a2 + 4 * v11);
    v20 = &v19;
    v13 = *(_QWORD *)(*(_QWORD *)(a1 + 232)
                    + 16
                    * *((int *)std::__hash_table<std::__hash_value_type<int,float>,std::__unordered_map_hasher<int,std::__hash_value_type<int,float>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,float>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,float>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int &&>,std::tuple<>>(a1 + 152, (int *)&v19, (uint64_t)&std::piecewise_construct, &v20)+ 5));
    if (((*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)v13 + 32))(v13, *(unsigned int *)(a2[1] - 4), a3, a5) & 1) != 0)return v19;
  }
  result = 0xFFFFFFFFLL;
  if (*(_BYTE *)(a1 + 256) && (a4 & 1) == 0)
  {
    v15 = (uint64_t **)(a1 + 168);
    do
    {
      v15 = (uint64_t **)*v15;
      if (!v15)
        return 0xFFFFFFFFLL;
      v16 = *(_QWORD *)(*(_QWORD *)(a1 + 232) + 16 * *((int *)v15 + 5));
      v17 = (**(uint64_t (***)(uint64_t))v16)(v16);
    }
    while (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v16 + 32))(v16, v17, a3, a5));
    v18 = v19;
    result = *((unsigned int *)v15 + 4);
    if (v19 == (_DWORD)result)
    {
      *a6 = 1;
      return v18;
    }
  }
  return result;
}

void std::__shared_ptr_pointer<kaldi::quasar::NeuralNgramDeterministicFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t std::__shared_ptr_pointer<kaldi::quasar::NeuralNgramDeterministicFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> *>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 48))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<kaldi::quasar::NeuralNgramDeterministicFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> *>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

char *std::vector<std::shared_ptr<fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::__init_with_size[abi:ne180100]<std::shared_ptr<fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>*,std::shared_ptr<fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>*>(char *result, _QWORD *a2, _QWORD *a3, unint64_t a4)
{
  char *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  if (a4)
  {
    v6 = result;
    result = std::vector<std::pair<unsigned long,char const*>>::__vallocate[abi:ne180100](result, a4);
    v7 = (_QWORD *)*((_QWORD *)v6 + 1);
    while (a2 != a3)
    {
      *v7 = *a2;
      v8 = a2[1];
      v7[1] = v8;
      if (v8)
      {
        v9 = (unint64_t *)(v8 + 8);
        do
          v10 = __ldxr(v9);
        while (__stxr(v10 + 1, v9));
      }
      a2 += 2;
      v7 += 2;
    }
    *((_QWORD *)v6 + 1) = v7;
  }
  return result;
}

void sub_1AD8F2B40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::pair<std::shared_ptr<fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,float>>::push_back[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  uint64_t result;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  _QWORD v16[5];

  v6 = a1[2];
  result = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD *)(result - 8);
  if (v7 >= v6)
  {
    v9 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v7 - *a1) >> 3);
    v10 = v9 + 1;
    if (v9 + 1 > 0xAAAAAAAAAAAAAAALL)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - *a1) >> 3);
    if (2 * v11 > v10)
      v10 = 2 * v11;
    if (v11 >= 0x555555555555555)
      v12 = 0xAAAAAAAAAAAAAAALL;
    else
      v12 = v10;
    v16[4] = result;
    v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>(result, v12);
    v14 = &v13[24 * v9];
    v16[0] = v13;
    v16[1] = v14;
    v16[3] = &v13[24 * v15];
    *(_OWORD *)v14 = *(_OWORD *)a2;
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *((_DWORD *)v14 + 4) = *(_DWORD *)(a2 + 16);
    v16[2] = v14 + 24;
    std::vector<std::pair<std::shared_ptr<fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,float>>::__swap_out_circular_buffer(a1, v16);
    v8 = a1[1];
    result = std::__split_buffer<std::pair<std::shared_ptr<fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,float>>::~__split_buffer((uint64_t)v16);
  }
  else
  {
    *(_OWORD *)v7 = *(_OWORD *)a2;
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_DWORD *)(v7 + 16) = *(_DWORD *)(a2 + 16);
    v8 = v7 + 24;
    a1[1] = v7 + 24;
  }
  a1[1] = v8;
  return result;
}

void sub_1AD8F2C64(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::pair<std::shared_ptr<fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,float>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *std::vector<std::pair<std::shared_ptr<fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,float>>::__swap_out_circular_buffer(uint64_t *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v3 = *result;
  v2 = result[1];
  v4 = a2[1];
  while (v2 != v3)
  {
    v5 = *(_OWORD *)(v2 - 24);
    v2 -= 24;
    *(_OWORD *)(v4 - 24) = v5;
    v4 -= 24;
    *(_QWORD *)v2 = 0;
    *(_QWORD *)(v2 + 8) = 0;
    *(_DWORD *)(v4 + 16) = *(_DWORD *)(v2 + 16);
  }
  a2[1] = v4;
  v6 = *result;
  *result = v4;
  a2[1] = v6;
  v7 = result[1];
  result[1] = a2[2];
  a2[2] = v7;
  v8 = result[2];
  result[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__split_buffer<std::pair<std::shared_ptr<fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,float>>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 24;
    std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](i - 24);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

_QWORD *std::allocate_shared[abi:ne180100]<fst::InterpolateDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,std::allocator<fst::InterpolateDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,std::vector<std::pair<std::shared_ptr<fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,float>> &,fst::InterpolateDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::WeightType &,BOOL const&,void>@<X0>(uint64_t *a1@<X1>, int *a2@<X2>, char *a3@<X3>, _QWORD *a4@<X8>)
{
  _QWORD *v8;
  _QWORD *result;

  v8 = operator new(0x88uLL);
  result = std::__shared_ptr_emplace<fst::InterpolateDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::__shared_ptr_emplace[abi:ne180100]<std::vector<std::pair<std::shared_ptr<fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,float>> &,fst::InterpolateDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::WeightType &,BOOL const&,std::allocator<fst::InterpolateDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,0>(v8, a1, a2, a3);
  *a4 = v8 + 3;
  a4[1] = v8;
  return result;
}

void sub_1AD8F2D84(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<fst::InterpolateDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::__shared_ptr_emplace[abi:ne180100]<std::vector<std::pair<std::shared_ptr<fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,float>> &,fst::InterpolateDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::WeightType &,BOOL const&,std::allocator<fst::InterpolateDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,0>(_QWORD *a1, uint64_t *a2, int *a3, char *a4)
{
  a1[2] = 0;
  *a1 = &unk_1E5D410D0;
  a1[1] = 0;
  fst::InterpolateDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::InterpolateDeterministicOnDemandFst((uint64_t)(a1 + 3), a2, *a3, *a4);
  return a1;
}

void sub_1AD8F2DD8(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<fst::InterpolateDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D410D0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<fst::InterpolateDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D410D0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t std::__shared_ptr_emplace<fst::InterpolateDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 40))(a1 + 24);
}

uint64_t fst::InterpolateDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::InterpolateDeterministicOnDemandFst(uint64_t a1, uint64_t *a2, int a3, char a4)
{
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v10;
  float v11;
  float v12;
  int v13;
  int v14;
  int *v15;
  int *v16;
  int *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char *v22;
  int *v23;
  int v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  uint64_t v29;
  BOOL v30;
  unint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  _QWORD v36[34];
  int *v37;
  int *v38;
  char *v39;
  int **v40;

  *(_QWORD *)a1 = &unk_1E5D223A8;
  *(_QWORD *)(a1 + 8) = 0;
  v5 = (uint64_t *)(a1 + 8);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_DWORD *)(a1 + 72) = 1065353216;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_DWORD *)(a1 + 32) = a3;
  v37 = 0;
  v38 = 0;
  v39 = 0;
  v7 = *a2;
  v6 = a2[1];
  if (*a2 == v6)
  {
LABEL_38:
    *(_DWORD *)(a1 + 108) = -1;
  }
  else
  {
    v34 = (uint64_t *)(a1 + 80);
    v35 = a1 + 40;
    v10 = 0;
    v11 = 0.0;
    do
    {
      v12 = *(float *)(v7 + 16);
      if (v12 >= 0.00097656 || (a4 & 1) == 0)
      {
        if (!*(_QWORD *)v7 || (***(unsigned int (****)(_QWORD))v7)(*(_QWORD *)v7) == -1)
        {
          if (kaldi::g_kaldi_verbose_level >= -1)
          {
            kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v36);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)"the individual DeterministicOnDemandFst is NULL or empty", 56);
            kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)v36);
          }
          goto LABEL_38;
        }
        v13 = (***(uint64_t (****)(_QWORD))v7)(*(_QWORD *)v7);
        v14 = v13;
        v15 = v38;
        if (v38 >= (int *)v39)
        {
          v17 = v37;
          v18 = v38 - v37;
          v19 = v18 + 1;
          if ((unint64_t)(v18 + 1) >> 62)
            std::vector<int>::__throw_length_error[abi:ne180100]();
          v20 = v39 - (char *)v37;
          if ((v39 - (char *)v37) >> 1 > v19)
            v19 = v20 >> 1;
          if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFFCLL)
            v21 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v21 = v19;
          if (v21)
          {
            v22 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v39, v21);
            v17 = v37;
            v15 = v38;
          }
          else
          {
            v22 = 0;
          }
          v23 = (int *)&v22[4 * v18];
          *v23 = v14;
          v16 = v23 + 1;
          while (v15 != v17)
          {
            v24 = *--v15;
            *--v23 = v24;
          }
          v37 = v23;
          v38 = v16;
          v39 = &v22[4 * v21];
          if (v17)
            operator delete(v17);
        }
        else
        {
          *v38 = v13;
          v16 = v15 + 1;
        }
        v38 = v16;
        v25 = *(_QWORD *)(a1 + 16);
        if (v25 >= *(_QWORD *)(a1 + 24))
        {
          v10 = std::vector<std::pair<std::shared_ptr<fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,float>>::__push_back_slow_path<std::pair<std::shared_ptr<fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,float> const&>(v5, v7);
        }
        else
        {
          *(_QWORD *)v25 = *(_QWORD *)v7;
          v26 = *(_QWORD *)(v7 + 8);
          *(_QWORD *)(v25 + 8) = v26;
          if (v26)
          {
            v27 = (unint64_t *)(v26 + 8);
            do
              v28 = __ldxr(v27);
            while (__stxr(v28 + 1, v27));
          }
          *(_DWORD *)(v25 + 16) = *(_DWORD *)(v7 + 16);
          v10 = v25 + 24;
        }
        v11 = v11 + v12;
        *(_QWORD *)(a1 + 16) = v10;
        v6 = a2[1];
      }
      v7 += 24;
    }
    while (v7 != v6);
    v29 = *v5;
    if (v10 == *v5)
      goto LABEL_38;
    if (!*(_DWORD *)(a1 + 32))
    {
      if (v11 != 1.0)
      {
        v30 = COERCE_INT(fabs(v11 + -1.0)) <= 2139095039
           && fabsf(v11 + -1.0) <= (float)((float)(fabsf(v11) + 1.0) * 0.01);
        if (!v30 && kaldi::g_kaldi_verbose_level >= -1)
        {
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v36);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)"you are requesting linear interpolation, but the total weight is not 1: ", 72);
          std::ostream::operator<<();
          kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)v36);
          v29 = *(_QWORD *)(a1 + 8);
          v10 = *(_QWORD *)(a1 + 16);
        }
      }
      while (v29 != v10)
      {
        *(float *)(v29 + 16) = -logf(*(float *)(v29 + 16));
        v29 += 24;
      }
    }
    *(_DWORD *)(a1 + 108) = 0;
    v40 = &v37;
    *((_DWORD *)std::__hash_table<std::__hash_value_type<std::vector<int>,int>,std::__unordered_map_hasher<std::vector<int>,std::__hash_value_type<std::vector<int>,int>,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>,true>,std::__unordered_map_equal<std::vector<int>,std::__hash_value_type<std::vector<int>,int>,std::equal_to<std::vector<int>>,kaldi::VectorHasher<int>,true>,std::allocator<std::__hash_value_type<std::vector<int>,int>>>::__emplace_unique_key_args<std::vector<int>,std::piecewise_construct_t const&,std::tuple<std::vector<int> const&>,std::tuple<>>(v35, &v37, (uint64_t)&std::piecewise_construct, (uint64_t *)&v40)+ 10) = 0;
    v32 = *(_QWORD *)(a1 + 88);
    if (v32 >= *(_QWORD *)(a1 + 96))
    {
      v33 = std::vector<std::vector<int>>::__push_back_slow_path<std::vector<int> const&>(v34, (uint64_t)&v37);
    }
    else
    {
      std::vector<std::vector<int>>::__construct_one_at_end[abi:ne180100]<std::vector<int> const&>((uint64_t)v34, (uint64_t)&v37);
      v33 = v32 + 24;
    }
    *(_QWORD *)(a1 + 88) = v33;
    *(_DWORD *)(a1 + 104) = 1;
  }
  if (v37)
  {
    v38 = v37;
    operator delete(v37);
  }
  return a1;
}

void sub_1AD8F31F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, void **a11)
{
  uint64_t v11;
  void *v13;

  v13 = *(void **)(v11 - 144);
  if (v13)
  {
    *(_QWORD *)(v11 - 136) = v13;
    operator delete(v13);
  }
  a11 = a9;
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100](&a11);
  std::__hash_table<std::__hash_value_type<std::vector<int>,int>,std::__unordered_map_hasher<std::vector<int>,std::__hash_value_type<std::vector<int>,int>,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>,true>,std::__unordered_map_equal<std::vector<int>,std::__hash_value_type<std::vector<int>,int>,std::equal_to<std::vector<int>>,kaldi::VectorHasher<int>,true>,std::allocator<std::__hash_value_type<std::vector<int>,int>>>::~__hash_table(a10);
  std::vector<quasar::AlternativeSelectionSpan::Alternative>::__destroy_vector::operator()[abi:ne180100](&a11);
  _Unwind_Resume(a1);
}

uint64_t fst::InterpolateDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::Start(uint64_t a1)
{
  return *(unsigned int *)(a1 + 108);
}

float fst::InterpolateDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::Final(uint64_t a1, int a2, _QWORD *a3)
{
  uint64_t v6;
  __int128 v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  unsigned int **v14;
  unsigned int **v15;
  unsigned int *v16;
  uint64_t v17;
  uint64_t v18;
  float v19;
  int v20;
  _QWORD *v21;
  char *v22;
  unint64_t v23;
  _DWORD *v24;
  char *v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  char *v30;
  char *v31;
  int v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  float InterpolatedWeight;
  float v37;
  uint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  __int128 v43;
  void *__p[2];
  __int128 v45;

  v6 = *(_QWORD *)(a1 + 80);
  v45 = 0uLL;
  if (*a3)
  {
    _ZNSt3__115allocate_sharedB8ne180100IN3fst13InterpArcInfoENS_9allocatorIS2_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(__p);
    v7 = *(_OWORD *)__p;
    __p[0] = 0;
    __p[1] = 0;
    v8 = (std::__shared_weak_count *)*((_QWORD *)&v45 + 1);
    v45 = v7;
    if (v8)
    {
      p_shared_owners = (unint64_t *)&v8->__shared_owners_;
      do
        v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
    v11 = (std::__shared_weak_count *)__p[1];
    if (__p[1])
    {
      v12 = (unint64_t *)((char *)__p[1] + 8);
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 - 1, v12));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::operator=[abi:ne180100](a3, (uint64_t *)&v45);
    v6 = *(_QWORD *)(a1 + 80);
  }
  v14 = (unsigned int **)(v6 + 24 * a2);
  v15 = v14 + 1;
  std::vector<fst::TropicalWeightTpl<float>>::vector(__p, v14[1] - *v14);
  v16 = *v14;
  if (*v14 != v14[1])
  {
    v17 = 0;
    do
    {
      if (*a3)
        _ZNSt3__115allocate_sharedB8ne180100IN3fst7ArcInfoENS_9allocatorIS2_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(&v43);
      else
        v43 = 0uLL;
      v18 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 24 * v17);
      v19 = (*(float (**)(uint64_t, _QWORD, __int128 *))(*(_QWORD *)v18 + 8))(v18, *v16, &v43);
      *((float *)__p[0] + v17) = v19;
      if (*a3)
      {
        std::vector<std::shared_ptr<quasar::FeatureExtractor>>::push_back[abi:ne180100]((char **)(v45 + 8), &v43);
        v20 = *((_DWORD *)__p[0] + v17);
        v21 = (_QWORD *)v45;
        v22 = *(char **)(v45 + 40);
        v23 = *(_QWORD *)(v45 + 48);
        if ((unint64_t)v22 >= v23)
        {
          v25 = *(char **)(v45 + 32);
          v26 = (v22 - v25) >> 2;
          if ((unint64_t)(v26 + 1) >> 62)
            std::vector<int>::__throw_length_error[abi:ne180100]();
          v27 = v23 - (_QWORD)v25;
          v28 = (uint64_t)(v23 - (_QWORD)v25) >> 1;
          if (v28 <= v26 + 1)
            v28 = v26 + 1;
          if (v27 >= 0x7FFFFFFFFFFFFFFCLL)
            v29 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v29 = v28;
          if (v29)
          {
            v30 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v45 + 48, v29);
            v25 = (char *)v21[4];
            v22 = (char *)v21[5];
          }
          else
          {
            v30 = 0;
          }
          v31 = &v30[4 * v26];
          *(_DWORD *)v31 = v20;
          v24 = v31 + 4;
          while (v22 != v25)
          {
            v32 = *((_DWORD *)v22 - 1);
            v22 -= 4;
            *((_DWORD *)v31 - 1) = v32;
            v31 -= 4;
          }
          v21[4] = v31;
          v21[5] = v24;
          v21[6] = &v30[4 * v29];
          if (v25)
            operator delete(v25);
        }
        else
        {
          *(_DWORD *)v22 = v20;
          v24 = v22 + 4;
        }
        v21[5] = v24;
      }
      v33 = (std::__shared_weak_count *)*((_QWORD *)&v43 + 1);
      if (*((_QWORD *)&v43 + 1))
      {
        v34 = (unint64_t *)(*((_QWORD *)&v43 + 1) + 8);
        do
          v35 = __ldaxr(v34);
        while (__stlxr(v35 - 1, v34));
        if (!v35)
        {
          ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
          std::__shared_weak_count::__release_weak(v33);
        }
      }
      ++v16;
      ++v17;
    }
    while (v16 != *v15);
  }
  InterpolatedWeight = fst::InterpolateDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::GetInterpolatedWeight(a1, (float **)__p);
  v37 = InterpolatedWeight;
  if (*a3)
  {
    v38 = v45;
    *(_QWORD *)(v45 + 56) = 0;
    *(float *)(v38 + 64) = InterpolatedWeight;
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  v39 = (std::__shared_weak_count *)*((_QWORD *)&v45 + 1);
  if (*((_QWORD *)&v45 + 1))
  {
    v40 = (unint64_t *)(*((_QWORD *)&v45 + 1) + 8);
    do
      v41 = __ldaxr(v40);
    while (__stlxr(v41 - 1, v40));
    if (!v41)
    {
      ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
      std::__shared_weak_count::__release_weak(v39);
    }
  }
  return v37;
}

void sub_1AD8F3590(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t fst::InterpolateDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::GetArc(uint64_t a1, int a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  uint64_t v10;
  uint64_t *v11;
  __int128 v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  _QWORD *v19;
  char v20;
  uint64_t v21;
  uint64_t *v22;
  int v23;
  char v24;
  char *v25;
  char *v26;
  char *v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  char *v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  char *v35;
  char *v36;
  char *v37;
  char *v38;
  int v39;
  _DWORD *v40;
  _DWORD *v41;
  _DWORD *v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  char *v47;
  char *v48;
  char *v49;
  char *v50;
  int v51;
  uint64_t v52;
  _DWORD *v53;
  _DWORD *v54;
  _DWORD *v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  unint64_t v59;
  char *v60;
  char *v61;
  int v62;
  _QWORD *v63;
  int v64;
  char *v65;
  unint64_t v66;
  _DWORD *v67;
  char *v68;
  uint64_t v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t v72;
  char *v73;
  char *v74;
  int v75;
  _QWORD *v76;
  char *v77;
  unint64_t v78;
  _DWORD *v79;
  char *v80;
  uint64_t v81;
  unint64_t v82;
  unint64_t v83;
  unint64_t v84;
  char *v85;
  char *v86;
  int v87;
  char *v88;
  int v89;
  std::__shared_weak_count *v90;
  unint64_t *v91;
  unint64_t v92;
  float InterpolatedWeight;
  uint64_t v94;
  char v95;
  unint64_t v96;
  uint64_t v97;
  uint64_t v98;
  std::__shared_weak_count *v99;
  unint64_t *v100;
  unint64_t v101;
  uint64_t *v103;
  uint64_t v104;
  void *v105[2];
  uint64_t v106;
  int v107;
  __int128 v108;
  void *v109;
  char *v110;
  char *v111;
  void *__p;
  _DWORD *v113;
  unint64_t v114;
  __int128 v115;

  v11 = (uint64_t *)(a1 + 80);
  v10 = *(_QWORD *)(a1 + 80);
  v115 = 0uLL;
  if (*a5)
  {
    _ZNSt3__115allocate_sharedB8ne180100IN3fst13InterpArcInfoENS_9allocatorIS2_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(v105);
    v12 = *(_OWORD *)v105;
    v105[0] = 0;
    v105[1] = 0;
    v13 = (std::__shared_weak_count *)*((_QWORD *)&v115 + 1);
    v115 = v12;
    if (v13)
    {
      p_shared_owners = (unint64_t *)&v13->__shared_owners_;
      do
        v15 = __ldaxr(p_shared_owners);
      while (__stlxr(v15 - 1, p_shared_owners));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
    }
    v16 = (std::__shared_weak_count *)v105[1];
    if (v105[1])
    {
      v17 = (unint64_t *)((char *)v105[1] + 8);
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
    std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::operator=[abi:ne180100](a5, (uint64_t *)&v115);
    v10 = *v11;
  }
  __p = 0;
  v113 = 0;
  v114 = 0;
  v109 = 0;
  v110 = 0;
  v111 = 0;
  v19 = *(_QWORD **)(a1 + 8);
  if (v19 == *(_QWORD **)(a1 + 16))
    goto LABEL_134;
  v103 = v11;
  v104 = a4;
  v20 = 0;
  v21 = 0;
  v22 = (uint64_t *)(v10 + 24 * a2);
  v23 = -1;
  do
  {
    if (*a5)
      _ZNSt3__115allocate_sharedB8ne180100IN3fst7ArcInfoENS_9allocatorIS2_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(&v108);
    else
      v108 = 0uLL;
    v24 = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t, void **, __int128 *))(*(_QWORD *)*v19 + 24))(*v19, *(unsigned int *)(*v22 + 4 * v21), a3, v105, &v108);
    v25 = v110;
    if ((v24 & 1) != 0)
    {
      if (v110 >= v111)
      {
        v28 = (v110 - (_BYTE *)v109) >> 2;
        if ((unint64_t)(v28 + 1) >> 62)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v29 = (v111 - (_BYTE *)v109) >> 1;
        if (v29 <= v28 + 1)
          v29 = v28 + 1;
        if ((unint64_t)(v111 - (_BYTE *)v109) >= 0x7FFFFFFFFFFFFFFCLL)
          v30 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v30 = v29;
        if (v30)
          v31 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v111, v30);
        else
          v31 = 0;
        v36 = &v31[4 * v28];
        *(_DWORD *)v36 = v105[1];
        v26 = v36 + 4;
        v38 = (char *)v109;
        v37 = v110;
        if (v110 != v109)
        {
          do
          {
            v39 = *((_DWORD *)v37 - 1);
            v37 -= 4;
            *((_DWORD *)v36 - 1) = v39;
            v36 -= 4;
          }
          while (v37 != v38);
          v37 = (char *)v109;
        }
        v109 = v36;
        v110 = v26;
        v111 = &v31[4 * v30];
        if (v37)
          operator delete(v37);
      }
      else
      {
        *(_DWORD *)v110 = v105[1];
        v26 = v25 + 4;
      }
      v110 = v26;
      if (v23 == -1)
        v23 = HIDWORD(v105[0]);
      v40 = v113;
      if ((unint64_t)v113 >= v114)
      {
        v42 = __p;
        v43 = ((char *)v113 - (_BYTE *)__p) >> 2;
        v44 = v43 + 1;
        if ((unint64_t)(v43 + 1) >> 62)
          goto LABEL_150;
        v45 = v114 - (_QWORD)__p;
        if ((uint64_t)(v114 - (_QWORD)__p) >> 1 > v44)
          v44 = v45 >> 1;
        if ((unint64_t)v45 >= 0x7FFFFFFFFFFFFFFCLL)
          v46 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v46 = v44;
        if (v46)
        {
          v47 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v114, v46);
          v42 = __p;
          v40 = v113;
        }
        else
        {
          v47 = 0;
        }
        v61 = &v47[4 * v43];
        *(_DWORD *)v61 = HIDWORD(v105[1]);
        v41 = v61 + 4;
        while (v40 != v42)
        {
          v62 = *--v40;
          *((_DWORD *)v61 - 1) = v62;
          v61 -= 4;
        }
        __p = v61;
        v113 = v41;
        v114 = (unint64_t)&v47[4 * v46];
        if (v42)
          operator delete(v42);
      }
      else
      {
        *v113 = HIDWORD(v105[1]);
        v41 = v40 + 1;
      }
      v113 = v41;
      if (*a5)
      {
        std::vector<std::shared_ptr<quasar::FeatureExtractor>>::push_back[abi:ne180100]((char **)(v115 + 8), &v108);
        v63 = (_QWORD *)v115;
        v64 = (int)v105[1];
        v65 = *(char **)(v115 + 40);
        v66 = *(_QWORD *)(v115 + 48);
        if ((unint64_t)v65 >= v66)
        {
          v68 = *(char **)(v115 + 32);
          v69 = (v65 - v68) >> 2;
          if ((unint64_t)(v69 + 1) >> 62)
            std::vector<int>::__throw_length_error[abi:ne180100]();
          v70 = v66 - (_QWORD)v68;
          v71 = (uint64_t)(v66 - (_QWORD)v68) >> 1;
          if (v71 <= v69 + 1)
            v71 = v69 + 1;
          if (v70 >= 0x7FFFFFFFFFFFFFFCLL)
            v72 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v72 = v71;
          if (v72)
          {
            v73 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v115 + 48, v72);
            v68 = (char *)v63[4];
            v65 = (char *)v63[5];
          }
          else
          {
            v73 = 0;
          }
          v86 = &v73[4 * v69];
          *(_DWORD *)v86 = v64;
          v67 = v86 + 4;
          while (v65 != v68)
          {
            v87 = *((_DWORD *)v65 - 1);
            v65 -= 4;
            *((_DWORD *)v86 - 1) = v87;
            v86 -= 4;
          }
          v63[4] = v86;
          v63[5] = v67;
          v63[6] = &v73[4 * v72];
          if (v68)
            operator delete(v68);
        }
        else
        {
          *(_DWORD *)v65 = v105[1];
          v67 = v65 + 4;
        }
        v63[5] = v67;
      }
      v20 = 1;
    }
    else
    {
      if (v110 >= v111)
      {
        v32 = (v110 - (_BYTE *)v109) >> 2;
        if ((unint64_t)(v32 + 1) >> 62)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v33 = (v111 - (_BYTE *)v109) >> 1;
        if (v33 <= v32 + 1)
          v33 = v32 + 1;
        if ((unint64_t)(v111 - (_BYTE *)v109) >= 0x7FFFFFFFFFFFFFFCLL)
          v34 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v34 = v33;
        if (v34)
          v35 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v111, v34);
        else
          v35 = 0;
        v48 = &v35[4 * v32];
        *(_DWORD *)v48 = 2139095040;
        v27 = v48 + 4;
        v50 = (char *)v109;
        v49 = v110;
        if (v110 != v109)
        {
          do
          {
            v51 = *((_DWORD *)v49 - 1);
            v49 -= 4;
            *((_DWORD *)v48 - 1) = v51;
            v48 -= 4;
          }
          while (v49 != v50);
          v49 = (char *)v109;
        }
        v109 = v48;
        v110 = v27;
        v111 = &v35[4 * v34];
        if (v49)
          operator delete(v49);
      }
      else
      {
        *(_DWORD *)v110 = 2139095040;
        v27 = v25 + 4;
      }
      v110 = v27;
      v52 = *v22;
      v53 = v113;
      if ((unint64_t)v113 >= v114)
      {
        v55 = __p;
        v56 = ((char *)v113 - (_BYTE *)__p) >> 2;
        v57 = v56 + 1;
        if ((unint64_t)(v56 + 1) >> 62)
LABEL_150:
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v58 = v114 - (_QWORD)__p;
        if ((uint64_t)(v114 - (_QWORD)__p) >> 1 > v57)
          v57 = v58 >> 1;
        if ((unint64_t)v58 >= 0x7FFFFFFFFFFFFFFCLL)
          v59 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v59 = v57;
        if (v59)
        {
          v60 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v114, v59);
          v55 = __p;
          v53 = v113;
        }
        else
        {
          v60 = 0;
        }
        v74 = &v60[4 * v56];
        *(_DWORD *)v74 = *(_DWORD *)(v52 + 4 * v21);
        v54 = v74 + 4;
        while (v53 != v55)
        {
          v75 = *--v53;
          *((_DWORD *)v74 - 1) = v75;
          v74 -= 4;
        }
        __p = v74;
        v113 = v54;
        v114 = (unint64_t)&v60[4 * v59];
        if (v55)
          operator delete(v55);
      }
      else
      {
        *v113 = *(_DWORD *)(v52 + 4 * v21);
        v54 = v53 + 1;
      }
      v113 = v54;
      if (*a5)
      {
        std::vector<std::shared_ptr<quasar::FeatureExtractor>>::push_back[abi:ne180100]((char **)(v115 + 8), &v108);
        v76 = (_QWORD *)v115;
        v77 = *(char **)(v115 + 40);
        v78 = *(_QWORD *)(v115 + 48);
        if ((unint64_t)v77 >= v78)
        {
          v80 = *(char **)(v115 + 32);
          v81 = (v77 - v80) >> 2;
          if ((unint64_t)(v81 + 1) >> 62)
            std::vector<int>::__throw_length_error[abi:ne180100]();
          v82 = v78 - (_QWORD)v80;
          v83 = (uint64_t)(v78 - (_QWORD)v80) >> 1;
          if (v83 <= v81 + 1)
            v83 = v81 + 1;
          if (v82 >= 0x7FFFFFFFFFFFFFFCLL)
            v84 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v84 = v83;
          if (v84)
          {
            v85 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v115 + 48, v84);
            v80 = (char *)v76[4];
            v77 = (char *)v76[5];
          }
          else
          {
            v85 = 0;
          }
          v88 = &v85[4 * v81];
          *(_DWORD *)v88 = 2139095040;
          v79 = v88 + 4;
          while (v77 != v80)
          {
            v89 = *((_DWORD *)v77 - 1);
            v77 -= 4;
            *((_DWORD *)v88 - 1) = v89;
            v88 -= 4;
          }
          v76[4] = v88;
          v76[5] = v79;
          v76[6] = &v85[4 * v84];
          if (v80)
            operator delete(v80);
        }
        else
        {
          *(_DWORD *)v77 = 2139095040;
          v79 = v77 + 4;
        }
        v76[5] = v79;
      }
    }
    v90 = (std::__shared_weak_count *)*((_QWORD *)&v108 + 1);
    if (*((_QWORD *)&v108 + 1))
    {
      v91 = (unint64_t *)(*((_QWORD *)&v108 + 1) + 8);
      do
        v92 = __ldaxr(v91);
      while (__stlxr(v92 - 1, v91));
      if (!v92)
      {
        ((void (*)(std::__shared_weak_count *))v90->__on_zero_shared)(v90);
        std::__shared_weak_count::__release_weak(v90);
      }
    }
    v19 += 3;
    ++v21;
  }
  while (v19 != *(_QWORD **)(a1 + 16));
  if ((v20 & 1) == 0)
  {
LABEL_134:
    v98 = 0;
  }
  else
  {
    *(_DWORD *)v104 = a3;
    *(_DWORD *)(v104 + 4) = v23;
    InterpolatedWeight = fst::InterpolateDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::GetInterpolatedWeight(a1, (float **)&v109);
    *(float *)(v104 + 8) = InterpolatedWeight;
    if (*a5)
    {
      v94 = v115;
      *(_QWORD *)(v115 + 56) = v23;
      *(float *)(v94 + 64) = InterpolatedWeight;
    }
    v105[0] = 0;
    v105[1] = 0;
    v106 = 0;
    std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(v105, __p, (uint64_t)v113, ((char *)v113 - (_BYTE *)__p) >> 2);
    v107 = *(_DWORD *)(a1 + 104);
    *(_DWORD *)(v104 + 12) = *((_DWORD *)std::__hash_table<std::__hash_value_type<std::vector<int>,int>,std::__unordered_map_hasher<std::vector<int>,std::__hash_value_type<std::vector<int>,int>,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>,true>,std::__unordered_map_equal<std::vector<int>,std::__hash_value_type<std::vector<int>,int>,std::equal_to<std::vector<int>>,kaldi::VectorHasher<int>,true>,std::allocator<std::__hash_value_type<std::vector<int>,int>>>::__emplace_unique_key_args<std::vector<int>,std::pair<std::vector<int>,int> &>(a1 + 40, (int **)v105, (uint64_t)v105)+ 10);
    if (v95)
    {
      ++*(_DWORD *)(a1 + 104);
      v96 = *(_QWORD *)(a1 + 88);
      if (v96 >= *(_QWORD *)(a1 + 96))
      {
        v97 = std::vector<std::vector<int>>::__push_back_slow_path<std::vector<int> const&>(v103, (uint64_t)&__p);
      }
      else
      {
        std::vector<std::vector<int>>::__construct_one_at_end[abi:ne180100]<std::vector<int> const&>((uint64_t)v103, (uint64_t)&__p);
        v97 = v96 + 24;
      }
      *(_QWORD *)(a1 + 88) = v97;
    }
    if (v105[0])
    {
      v105[1] = v105[0];
      operator delete(v105[0]);
    }
    v98 = 1;
  }
  if (v109)
  {
    v110 = (char *)v109;
    operator delete(v109);
  }
  if (__p)
  {
    v113 = __p;
    operator delete(__p);
  }
  v99 = (std::__shared_weak_count *)*((_QWORD *)&v115 + 1);
  if (*((_QWORD *)&v115 + 1))
  {
    v100 = (unint64_t *)(*((_QWORD *)&v115 + 1) + 8);
    do
      v101 = __ldaxr(v100);
    while (__stlxr(v101 - 1, v100));
    if (!v101)
    {
      ((void (*)(std::__shared_weak_count *))v99->__on_zero_shared)(v99);
      std::__shared_weak_count::__release_weak(v99);
    }
  }
  return v98;
}

void sub_1AD8F3D98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, void *__p, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,char a25)
{
  if (__p)
    operator delete(__p);
  if (a22)
    operator delete(a22);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&a25);
  _Unwind_Resume(a1);
}

void fst::InterpolateDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::~InterpolateDeterministicOnDemandFst(uint64_t a1)
{
  fst::InterpolateDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::~InterpolateDeterministicOnDemandFst(a1);
  JUMPOUT(0x1AF44D190);
}

float fst::InterpolateDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::FinalEos(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  float v11;
  float InterpolatedWeight;
  void *__p[3];

  v3 = *(_QWORD *)(a1 + 80);
  v4 = v3 + 24 * a2;
  v5 = 24 * a2;
  v7 = *(_QWORD *)(v4 + 8);
  v6 = (_QWORD *)(v4 + 8);
  std::vector<fst::TropicalWeightTpl<float>>::vector(__p, (v7 - *(_QWORD *)(v3 + v5)) >> 2);
  v8 = *(_QWORD *)(v3 + v5);
  if (v8 != *v6)
  {
    v9 = 0;
    v10 = 0;
    do
    {
      v11 = (*(float (**)(_QWORD, _QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 8) + v10) + 56))(*(_QWORD *)(*(_QWORD *)(a1 + 8) + v10), *(unsigned int *)(v8 + v9));
      *(float *)((char *)__p[0] + v9) = v11;
      v10 += 24;
      v9 += 4;
    }
    while (v8 + v9 != *v6);
  }
  InterpolatedWeight = fst::InterpolateDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::GetInterpolatedWeight(a1, (float **)__p);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  return InterpolatedWeight;
}

void sub_1AD8F3F20(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t std::vector<std::pair<std::shared_ptr<fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,float>>::__push_back_slow_path<std::pair<std::shared_ptr<fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,float> const&>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  _DWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  _QWORD v17[5];

  v3 = *a1;
  v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL)
    std::vector<int>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x555555555555555)
    v9 = 0xAAAAAAAAAAAAAAALL;
  else
    v9 = v5;
  v17[4] = a1 + 2;
  if (v9)
    v10 = std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>(v7, v9);
  else
    v10 = 0;
  v11 = &v10[6 * v4];
  v17[0] = v10;
  v17[1] = v11;
  v17[3] = &v10[6 * v9];
  *v11 = *(_QWORD *)a2;
  v12 = *(_QWORD *)(a2 + 8);
  v11[1] = v12;
  if (v12)
  {
    v13 = (unint64_t *)(v12 + 8);
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }
  v10[6 * v4 + 4] = *(_DWORD *)(a2 + 16);
  v17[2] = v11 + 3;
  std::vector<std::pair<std::shared_ptr<fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,float>>::__swap_out_circular_buffer(a1, v17);
  v15 = a1[1];
  std::__split_buffer<std::pair<std::shared_ptr<fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,float>>::~__split_buffer((uint64_t)v17);
  return v15;
}

void sub_1AD8F4058(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::pair<std::shared_ptr<fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,float>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

float fst::InterpolateDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::GetInterpolatedWeight(uint64_t a1, float **a2)
{
  int v4;
  float v5;
  float *v6;
  float *v7;
  char v8;
  uint64_t v9;
  float v10;
  float *v11;
  float *v12;
  float *v13;
  uint64_t v14;
  float v15;
  float *v16;
  float *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char *v22;
  float *v23;
  int v24;
  float *v25;
  uint64_t v26;
  float v27;
  float *v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float *v33;
  float v34;
  float __pa;
  float *__p;
  float *v38;
  float *v39;
  int v40;
  float v41;

  v4 = *(_DWORD *)(a1 + 32);
  if (!v4)
  {
    __p = 0;
    v38 = 0;
    v39 = 0;
    v12 = *a2;
    v11 = a2[1];
    if (*a2 == v11)
    {
      v25 = 0;
      v13 = 0;
    }
    else
    {
      v13 = 0;
      v14 = 0;
      do
      {
        v41 = 0.0;
        v41 = *v12;
        v40 = 2139095040;
        if (v41 != INFINITY)
        {
          v15 = -(float)(*(float *)(*(_QWORD *)(a1 + 8) + 24 * v14 + 16) + *v12);
          if (v13 >= v39)
          {
            v17 = __p;
            v18 = v13 - __p;
            v19 = v18 + 1;
            if ((unint64_t)(v18 + 1) >> 62)
              std::vector<int>::__throw_length_error[abi:ne180100]();
            v20 = (char *)v39 - (char *)__p;
            if (((char *)v39 - (char *)__p) >> 1 > v19)
              v19 = v20 >> 1;
            if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFFCLL)
              v21 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v21 = v19;
            if (v21)
            {
              v22 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v39, v21);
              v17 = __p;
              v13 = v38;
            }
            else
            {
              v22 = 0;
            }
            v23 = (float *)&v22[4 * v18];
            *v23 = v15;
            v16 = v23 + 1;
            while (v13 != v17)
            {
              v24 = *((_DWORD *)v13-- - 1);
              *((_DWORD *)v23-- - 1) = v24;
            }
            __p = v23;
            v39 = (float *)&v22[4 * v21];
            if (v17)
              operator delete(v17);
          }
          else
          {
            *v13 = v15;
            v16 = v13 + 1;
          }
          v38 = v16;
          v11 = a2[1];
          v13 = v16;
        }
        ++v12;
        ++v14;
      }
      while (v12 != v11);
      v25 = __p;
    }
    v26 = v13 - v25;
    if (v26)
    {
      if (v26 == 1)
      {
        v5 = -*v25;
        goto LABEL_49;
      }
      v28 = v25 + 1;
      v29 = *v25;
      while (v28 != v13)
      {
        v30 = *v28++;
        v31 = v30;
        if (v30 > v29)
          v29 = v31;
      }
      v32 = 0.0;
      if (v25 != v13)
      {
        v33 = v25;
        do
        {
          v34 = *v33 - v29;
          if (v34 >= -15.942)
            v32 = v32 + expf(v34);
          ++v33;
        }
        while (v33 != v13);
      }
      v27 = v29 + logf(v32);
    }
    else
    {
      v27 = -INFINITY;
    }
    v5 = -v27;
    if (!v25)
      return v5;
LABEL_49:
    operator delete(v25);
    return v5;
  }
  v5 = 0.0;
  if (v4 == 1)
  {
    v6 = *a2;
    v7 = a2[1];
    if (*a2 == v7)
      return INFINITY;
    v8 = 1;
    v9 = 16;
    do
    {
      v10 = *v6;
      __pa = *v6;
      v41 = INFINITY;
      if (__pa != INFINITY)
      {
        v8 = 0;
        v5 = v5 + (float)(*(float *)(*(_QWORD *)(a1 + 8) + v9) * v10);
      }
      ++v6;
      v9 += 24;
    }
    while (v6 != v7);
    if ((v8 & 1) != 0)
      return INFINITY;
  }
  return v5;
}

void sub_1AD8F4330(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *_ZNSt3__115allocate_sharedB8ne180100IN3fst13InterpArcInfoENS_9allocatorIS2_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v2;
  _QWORD *result;

  v2 = operator new(0x60uLL);
  result = _ZNSt3__120__shared_ptr_emplaceIN3fst13InterpArcInfoENS_9allocatorIS2_EEEC2B8ne180100IJES4_Li0EEES4_DpOT_(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  return result;
}

void sub_1AD8F4384(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *_ZNSt3__120__shared_ptr_emplaceIN3fst13InterpArcInfoENS_9allocatorIS2_EEEC2B8ne180100IJES4_Li0EEES4_DpOT_(_QWORD *a1)
{
  a1[2] = 0;
  *a1 = &unk_1E5D40ED8;
  a1[1] = 0;
  fst::InterpArcInfo::InterpArcInfo((fst::InterpArcInfo *)(a1 + 3));
  return a1;
}

void sub_1AD8F43D0(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<fst::InterpArcInfo>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D40ED8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<fst::InterpArcInfo>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D40ED8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t std::__shared_ptr_emplace<fst::InterpArcInfo>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

_QWORD *std::vector<fst::TropicalWeightTpl<float>>::vector(_QWORD *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<int>::__vallocate[abi:ne180100](a1, a2);
    a1[1] += 4 * a2;
  }
  return a1;
}

void sub_1AD8F4480(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *_ZNSt3__115allocate_sharedB8ne180100IN3fst7ArcInfoENS_9allocatorIS2_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v2;
  _QWORD *result;

  v2 = operator new(0x20uLL);
  result = _ZNSt3__120__shared_ptr_emplaceIN3fst7ArcInfoENS_9allocatorIS2_EEEC2B8ne180100IJES4_Li0EEES4_DpOT_(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  return result;
}

void sub_1AD8F44D0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *_ZNSt3__120__shared_ptr_emplaceIN3fst7ArcInfoENS_9allocatorIS2_EEEC2B8ne180100IJES4_Li0EEES4_DpOT_(_QWORD *a1)
{
  a1[2] = 0;
  *a1 = &unk_1E5D411E8;
  a1[1] = 0;
  fst::ArcInfo::ArcInfo(a1 + 3);
  return a1;
}

void sub_1AD8F451C(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<fst::ArcInfo>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D411E8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<fst::ArcInfo>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D411E8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t std::__shared_ptr_emplace<fst::ArcInfo>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t fst::InterpolateDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::~InterpolateDeterministicOnDemandFst(uint64_t a1)
{
  void **v2;
  void **v4;

  *(_QWORD *)a1 = &unk_1E5D223A8;
  v2 = (void **)(a1 + 8);
  v4 = (void **)(a1 + 80);
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100](&v4);
  std::__hash_table<std::__hash_value_type<std::vector<int>,int>,std::__unordered_map_hasher<std::vector<int>,std::__hash_value_type<std::vector<int>,int>,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>,true>,std::__unordered_map_equal<std::vector<int>,std::__hash_value_type<std::vector<int>,int>,std::equal_to<std::vector<int>>,kaldi::VectorHasher<int>,true>,std::allocator<std::__hash_value_type<std::vector<int>,int>>>::~__hash_table(a1 + 40);
  v4 = v2;
  std::vector<quasar::AlternativeSelectionSpan::Alternative>::__destroy_vector::operator()[abi:ne180100](&v4);
  return a1;
}

_QWORD *std::allocate_shared[abi:ne180100]<fst::LeftContextDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::shared_ptr<fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,std::allocator<fst::LeftContextDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::shared_ptr<fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,std::shared_ptr<fst::InterpolateDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> &,std::vector<int> const&,void>@<X0>(uint64_t *a1@<X1>, uint64_t *a2@<X2>, _QWORD *a3@<X8>)
{
  _QWORD *v6;
  _QWORD *result;

  v6 = operator new(0x38uLL);
  result = std::__shared_ptr_emplace<fst::LeftContextDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::shared_ptr<fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>::__shared_ptr_emplace[abi:ne180100]<std::shared_ptr<fst::InterpolateDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> &,std::vector<int> const&,std::allocator<fst::LeftContextDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::shared_ptr<fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,0>(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  return result;
}

void sub_1AD8F4634(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<fst::LeftContextDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::shared_ptr<fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>::__shared_ptr_emplace[abi:ne180100]<std::shared_ptr<fst::InterpolateDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> &,std::vector<int> const&,std::allocator<fst::LeftContextDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::shared_ptr<fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,0>(_QWORD *a1, uint64_t *a2, uint64_t *a3)
{
  char v5;

  a1[2] = 0;
  *a1 = &unk_1E5D41108;
  a1[1] = 0;
  std::allocator<fst::LeftContextDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::shared_ptr<fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>::construct[abi:ne180100]<fst::LeftContextDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::shared_ptr<fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,std::shared_ptr<fst::InterpolateDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> &,std::vector<int> const&>((uint64_t)&v5, (uint64_t)(a1 + 3), a2, a3);
  return a1;
}

void sub_1AD8F4698(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<fst::LeftContextDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::shared_ptr<fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D41108;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<fst::LeftContextDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::shared_ptr<fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D41108;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t std::__shared_ptr_emplace<fst::LeftContextDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::shared_ptr<fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 40))(a1 + 24);
}

void std::allocator<fst::LeftContextDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::shared_ptr<fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>::construct[abi:ne180100]<fst::LeftContextDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::shared_ptr<fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,std::shared_ptr<fst::InterpolateDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> &,std::vector<int> const&>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;

  v4 = (std::__shared_weak_count *)a3[1];
  v10 = *a3;
  v11 = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  fst::LeftContextDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::shared_ptr<fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::LeftContextDeterministicOnDemandFst(a2, (uint64_t)&v10, a4);
  v7 = v11;
  if (v11)
  {
    v8 = (unint64_t *)&v11->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
}

void sub_1AD8F478C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t fst::LeftContextDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::shared_ptr<fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::LeftContextDeterministicOnDemandFst(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  _QWORD v10[34];
  int v11;

  *(_QWORD *)a1 = &unk_1E5D223F8;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)a2;
  v5 = (_QWORD *)(a1 + 8);
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_DWORD *)(a1 + 24) = (***(uint64_t (****)(_QWORD))(a1 + 8))(*(_QWORD *)(a1 + 8));
  v6 = *a3;
  v7 = a3[1];
  if (*a3 != v7)
  {
    do
    {
      if (((*(uint64_t (**)(_QWORD))(*(_QWORD *)*v5 + 32))(*v5) & 1) != 0)
      {
        v8 = v11;
      }
      else
      {
        if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
        {
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v10);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"Invalid word symbol, clipping left context", 42);
          kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)v10);
        }
        v8 = (**(uint64_t (***)(_QWORD))*v5)(*v5);
      }
      *(_DWORD *)(a1 + 24) = v8;
      v6 += 4;
    }
    while (v6 != v7);
  }
  return a1;
}

void sub_1AD8F48A8(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t fst::LeftContextDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::shared_ptr<fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::Start(uint64_t a1)
{
  return *(unsigned int *)(a1 + 24);
}

uint64_t fst::LeftContextDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::shared_ptr<fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::Final(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 8))(*(_QWORD *)(a1 + 8));
}

uint64_t fst::LeftContextDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::shared_ptr<fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::GetArc(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 24))(*(_QWORD *)(a1 + 8));
}

_QWORD *fst::LeftContextDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::shared_ptr<fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::~LeftContextDeterministicOnDemandFst(_QWORD *a1)
{
  *a1 = &unk_1E5D223F8;
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  return a1;
}

void fst::LeftContextDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::shared_ptr<fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::~LeftContextDeterministicOnDemandFst(_QWORD *a1)
{
  *a1 = &unk_1E5D223F8;
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  JUMPOUT(0x1AF44D190);
}

char *std::vector<std::shared_ptr<quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>::__init_with_size[abi:ne180100]<std::shared_ptr<quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>*,std::shared_ptr<quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>*>(char *result, _QWORD *a2, _QWORD *a3, unint64_t a4)
{
  char *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  if (a4)
  {
    v6 = result;
    result = std::vector<std::pair<unsigned long,char const*>>::__vallocate[abi:ne180100](result, a4);
    v7 = (_QWORD *)*((_QWORD *)v6 + 1);
    while (a2 != a3)
    {
      *v7 = *a2;
      v8 = a2[1];
      v7[1] = v8;
      if (v8)
      {
        v9 = (unint64_t *)(v8 + 8);
        do
          v10 = __ldxr(v9);
        while (__stxr(v10 + 1, v9));
      }
      a2 += 2;
      v7 += 2;
    }
    *((_QWORD *)v6 + 1) = v7;
  }
  return result;
}

void sub_1AD8F4A00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

char *std::vector<std::shared_ptr<quasar::RegionalLmPlug<std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase>>>>::__init_with_size[abi:ne180100]<std::shared_ptr<quasar::RegionalLmPlug<std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase>>>*,std::shared_ptr<quasar::RegionalLmPlug<std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase>>>*>(char *result, _QWORD *a2, _QWORD *a3, unint64_t a4)
{
  char *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  if (a4)
  {
    v6 = result;
    result = std::vector<std::pair<unsigned long,char const*>>::__vallocate[abi:ne180100](result, a4);
    v7 = (_QWORD *)*((_QWORD *)v6 + 1);
    while (a2 != a3)
    {
      *v7 = *a2;
      v8 = a2[1];
      v7[1] = v8;
      if (v8)
      {
        v9 = (unint64_t *)(v8 + 8);
        do
          v10 = __ldxr(v9);
        while (__stxr(v10 + 1, v9));
      }
      a2 += 2;
      v7 += 2;
    }
    *((_QWORD *)v6 + 1) = v7;
  }
  return result;
}

void sub_1AD8F4AA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

BOOL quasar::compute(_QWORD *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  char v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  void *p_p;
  uint64_t v19;
  float TotalCostFromLinearCompactLattice;
  float v21;
  _QWORD *v22;
  void *v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  float **v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v36;
  _BOOL4 v37;
  float v38;
  unint64_t v39;
  __int128 v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  float *v44;
  float *v45;
  _DWORD *v46;
  _DWORD *v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  uint64_t v51;
  char *v52;
  unint64_t v53;
  _DWORD *v54;
  char *v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  char *v60;
  char *v61;
  int v62;
  unint64_t *v63;
  unint64_t v64;
  unint64_t *v65;
  unint64_t v66;
  float v67;
  float v68;
  _BOOL8 v69;
  _QWORD *v71;
  std::__shared_weak_count *v72;
  unint64_t *v73;
  unint64_t v74;
  uint64_t v76;
  void *__p;
  std::__shared_weak_count *v78;
  unsigned __int8 v79;
  void *v80;
  void *v81;
  unsigned __int8 v82;
  void *v83;
  char v84;
  uint64_t v85;
  void *v86[2];
  _OWORD v87[3];
  void *v88[2];
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  std::__shared_weak_count *v101;
  std::__shared_weak_count *v102;
  uint64_t *v103;
  std::__shared_weak_count *v104;
  _BYTE v105[32];
  uint64_t v106;

  v105[24] = 1;
  kaldi::Timer::Reset((kaldi::Timer *)v105, (clockid_t)a2);
  v106 = 0;
  v10 = *a2;
  if (!v10)
    return 0;
  v11 = (std::__shared_weak_count *)operator new(0x30uLL);
  v11[1].__vftable = 0;
  v11->__shared_weak_owners_ = 0;
  v11->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D45778;
  v11[1].__shared_owners_ = 0;
  v11[1].__shared_weak_owners_ = 0;
  v103 = (uint64_t *)&v11[1];
  v104 = v11;
  v101 = v11 + 1;
  v102 = v11;
  v11->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v11->__shared_owners_;
  do
    v13 = __ldxr(p_shared_owners);
  while (__stxr(v13 + 1, p_shared_owners));
  v14 = kaldi::RescoreCompactLatticeWithDeterministicOnDemandFst(v10, a6, a1, (char ***)&v101, 0);
  v15 = v102;
  if (v102)
  {
    v16 = (unint64_t *)&v102->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  if ((v14 & 1) != 0)
  {
    if (quasar::gLogLevel >= 6)
    {
      std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v80);
      kaldi::WriteCompactLattice(&v80, 0, (uint64_t)a1);
      if (quasar::gLogLevel >= 6)
      {
        v99 = 0u;
        v100 = 0u;
        v97 = 0u;
        v98 = 0u;
        v95 = 0u;
        v96 = 0u;
        v93 = 0u;
        v94 = 0u;
        v91 = 0u;
        v92 = 0u;
        v89 = 0u;
        v90 = 0u;
        *(_OWORD *)v88 = 0u;
        memset(v87, 0, sizeof(v87));
        *(_OWORD *)v86 = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v86);
        std::stringbuf::str();
        if ((v79 & 0x80u) == 0)
          p_p = &__p;
        else
          p_p = __p;
        if ((v79 & 0x80u) == 0)
          v19 = v79;
        else
          v19 = (uint64_t)v78;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v86, (uint64_t)p_p, v19);
        if ((char)v79 < 0)
          operator delete(__p);
        quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)v86);
      }
      v80 = (void *)*MEMORY[0x1E0DE4F60];
      *(void **)((char *)&v80 + *((_QWORD *)v80 - 3)) = *(void **)(MEMORY[0x1E0DE4F60] + 24);
      v81 = (void *)(MEMORY[0x1E0DE4FB8] + 16);
      if (v84 < 0)
        operator delete(v83);
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      MEMORY[0x1AF44D094](&v85);
    }
    TotalCostFromLinearCompactLattice = kaldi::quasar::GetTotalCostFromLinearCompactLattice(a1, (_BYTE *)(a5 + 72));
    v21 = quasar::FstLmScorer::convertLmCost(*(_DWORD *)a5, TotalCostFromLinearCompactLattice);
    if (quasar::gLogLevel >= 6)
    {
      v99 = 0u;
      v100 = 0u;
      v97 = 0u;
      v98 = 0u;
      v95 = 0u;
      v96 = 0u;
      v93 = 0u;
      v94 = 0u;
      v91 = 0u;
      v92 = 0u;
      v89 = 0u;
      v90 = 0u;
      *(_OWORD *)v88 = 0u;
      memset(v87, 0, sizeof(v87));
      *(_OWORD *)v86 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v86);
      v22 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v86, (uint64_t)"LM score (type=", 15);
      quasar::getLmScoreType(*(_DWORD *)a5, &v80);
      if ((v82 & 0x80u) == 0)
        v23 = &v80;
      else
        v23 = v80;
      if ((v82 & 0x80u) == 0)
        v24 = v82;
      else
        v24 = (uint64_t)v81;
      v25 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)v23, v24);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)") = ", 4);
      std::ostream::operator<<();
      if ((char)v82 < 0)
        operator delete(v80);
      quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)v86);
    }
    v26 = *v103;
    v27 = v103[1];
    if (*v103 != v27)
    {
      v76 = v103[1];
      do
      {
        if (*(_QWORD *)v26)
        {
          if (v28)
          {
            v29 = (float **)v28;
            v30 = *(std::__shared_weak_count **)(v26 + 8);
            __p = v28;
            v78 = v30;
            if (v30)
            {
              v31 = (unint64_t *)&v30->__shared_owners_;
              do
                v32 = __ldxr(v31);
              while (__stxr(v32 + 1, v31));
            }
            v33 = *(_QWORD *)(a5 + 64);
            v34 = *((_QWORD *)v28 + 7);
            v36 = v33 != -1 && v34 == v33;
            v37 = (*((_DWORD *)v28 + 16) & 0x7FFFFFFFu) < 0x7F800000;
            v38 = quasar::FstLmScorer::convertLmCost(*(_DWORD *)a5, *((float *)v28 + 16));
            quasar::FstLmScorer::convertLmCost(v29 + 4, *(_DWORD *)a5, (float **)&v80);
            quasar::TokenLmInfo::TokenLmInfo((uint64_t)v86, v34, v36, v37, (uint64_t)&v80, v38);
            v39 = *(_QWORD *)(a5 + 16);
            if (v39 >= *(_QWORD *)(a5 + 24))
            {
              v42 = std::vector<quasar::TokenLmInfo>::__push_back_slow_path<quasar::TokenLmInfo>((uint64_t *)(a5 + 8), (uint64_t)v86);
              v43 = v88[0];
              *(_QWORD *)(a5 + 16) = v42;
              if (v43)
              {
                v88[1] = v43;
                operator delete(v43);
              }
            }
            else
            {
              v40 = *(_OWORD *)v86;
              *(_QWORD *)(v39 + 16) = *(_QWORD *)&v87[0];
              *(_OWORD *)v39 = v40;
              v86[1] = 0;
              *(_QWORD *)&v87[0] = 0;
              v86[0] = 0;
              v41 = *(_QWORD *)((char *)v87 + 14);
              *(_QWORD *)(v39 + 24) = *((_QWORD *)&v87[0] + 1);
              *(_QWORD *)(v39 + 30) = v41;
              *(_QWORD *)(v39 + 48) = 0;
              *(_QWORD *)(v39 + 56) = 0;
              *(_QWORD *)(v39 + 40) = 0;
              *(_OWORD *)(v39 + 40) = *(_OWORD *)((char *)&v87[1] + 8);
              *(_QWORD *)(v39 + 56) = *((_QWORD *)&v87[2] + 1);
              *(_QWORD *)(v39 + 64) = 0;
              memset((char *)&v87[1] + 8, 0, 24);
              *(_QWORD *)(v39 + 72) = 0;
              *(_QWORD *)(v39 + 80) = 0;
              *(_OWORD *)(v39 + 64) = *(_OWORD *)v88;
              *(_QWORD *)(v39 + 80) = v89;
              v88[0] = 0;
              v88[1] = 0;
              *(_QWORD *)&v89 = 0;
              *(_QWORD *)(a5 + 16) = v39 + 88;
            }
            if (*((_QWORD *)&v87[1] + 1))
            {
              *(_QWORD *)&v87[2] = *((_QWORD *)&v87[1] + 1);
              operator delete(*((void **)&v87[1] + 1));
            }
            if (SBYTE7(v87[0]) < 0)
              operator delete(v86[0]);
            if (v80)
            {
              v81 = v80;
              operator delete(v80);
            }
            if (v37)
              *(float *)(a5 + 32) = *((float *)v29 + 16) + *(float *)(a5 + 32);
            v44 = v29[1];
            v45 = v29[2];
            if (v44 != v45)
            {
              do
              {
                if (*(_QWORD *)v44)
                {
                  if (v46)
                  {
                    v47 = v46;
                    v48 = (std::__shared_weak_count *)*((_QWORD *)v44 + 1);
                    v86[0] = v46;
                    v86[1] = v48;
                    if (v48)
                    {
                      v49 = (unint64_t *)&v48->__shared_owners_;
                      do
                        v50 = __ldxr(v49);
                      while (__stxr(v50 + 1, v49));
                    }
                    v51 = *(_QWORD *)(a5 + 16);
                    v52 = *(char **)(v51 - 16);
                    v53 = *(_QWORD *)(v51 - 8);
                    if ((unint64_t)v52 >= v53)
                    {
                      v55 = *(char **)(v51 - 24);
                      v56 = (v52 - v55) >> 2;
                      if ((unint64_t)(v56 + 1) >> 62)
                        std::vector<int>::__throw_length_error[abi:ne180100]();
                      v57 = v53 - (_QWORD)v55;
                      v58 = (uint64_t)(v53 - (_QWORD)v55) >> 1;
                      if (v58 <= v56 + 1)
                        v58 = v56 + 1;
                      if (v57 >= 0x7FFFFFFFFFFFFFFCLL)
                        v59 = 0x3FFFFFFFFFFFFFFFLL;
                      else
                        v59 = v58;
                      if (v59)
                      {
                        v60 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v51 - 8, v59);
                        v55 = *(char **)(v51 - 24);
                        v52 = *(char **)(v51 - 16);
                      }
                      else
                      {
                        v60 = 0;
                      }
                      v61 = &v60[4 * v56];
                      *(_DWORD *)v61 = v47[2];
                      v54 = v61 + 4;
                      while (v52 != v55)
                      {
                        v62 = *((_DWORD *)v52 - 1);
                        v52 -= 4;
                        *((_DWORD *)v61 - 1) = v62;
                        v61 -= 4;
                      }
                      *(_QWORD *)(v51 - 24) = v61;
                      *(_QWORD *)(v51 - 16) = v54;
                      *(_QWORD *)(v51 - 8) = &v60[4 * v59];
                      if (v55)
                        operator delete(v55);
                    }
                    else
                    {
                      *(_DWORD *)v52 = v46[2];
                      v54 = v52 + 4;
                    }
                    *(_QWORD *)(v51 - 16) = v54;
                    if (v48)
                    {
                      v63 = (unint64_t *)&v48->__shared_owners_;
                      do
                        v64 = __ldaxr(v63);
                      while (__stlxr(v64 - 1, v63));
                      if (!v64)
                      {
                        ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
                        std::__shared_weak_count::__release_weak(v48);
                      }
                    }
                  }
                }
                v44 += 4;
              }
              while (v44 != v45);
              v30 = v78;
            }
            v27 = v76;
            if (v30)
            {
              v65 = (unint64_t *)&v30->__shared_owners_;
              do
                v66 = __ldaxr(v65);
              while (__stlxr(v66 - 1, v65));
              if (!v66)
              {
                ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
                std::__shared_weak_count::__release_weak(v30);
              }
            }
          }
        }
        v26 += 16;
      }
      while (v26 != v27);
    }
    v67 = *(float *)(a5 + 32);
    *(_BYTE *)(a5 + 36) = (LODWORD(v67) & 0x7FFFFFFFu) < 0x7F800000;
    v68 = quasar::FstLmScorer::convertLmCost(*(_DWORD *)a5, v67);
    *(float *)(a5 + 32) = v68;
    v69 = v21 == v68;
    if (v21 == v68 || quasar::gLogLevel < 4)
      goto LABEL_103;
    v99 = 0u;
    v100 = 0u;
    v97 = 0u;
    v98 = 0u;
    v95 = 0u;
    v96 = 0u;
    v93 = 0u;
    v94 = 0u;
    v91 = 0u;
    v92 = 0u;
    v89 = 0u;
    v90 = 0u;
    *(_OWORD *)v88 = 0u;
    memset(v87, 0, sizeof(v87));
    *(_OWORD *)v86 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v86);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v86, (uint64_t)"lmScore=", 8);
    v71 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v71, (uint64_t)" doesn't match expected score=", 30);
    std::ostream::operator<<();
    quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)v86);
  }
  else if (quasar::gLogLevel >= 2)
  {
    v99 = 0u;
    v100 = 0u;
    v97 = 0u;
    v98 = 0u;
    v95 = 0u;
    v96 = 0u;
    v93 = 0u;
    v94 = 0u;
    v91 = 0u;
    v92 = 0u;
    v89 = 0u;
    v90 = 0u;
    *(_OWORD *)v88 = 0u;
    memset(v87, 0, sizeof(v87));
    *(_OWORD *)v86 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v86);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v86, (uint64_t)"Rescoring failed", 16);
    quasar::QuasarWarnMessage::~QuasarWarnMessage((quasar::QuasarWarnMessage *)v86);
  }
  v69 = 0;
LABEL_103:
  v72 = v104;
  if (v104)
  {
    v73 = (unint64_t *)&v104->__shared_owners_;
    do
      v74 = __ldaxr(v73);
    while (__stlxr(v74 - 1, v73));
    if (!v74)
    {
      ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
      std::__shared_weak_count::__release_weak(v72);
    }
  }
  return v69;
}

void sub_1AD8F5270(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,char a57)
{
  uint64_t v57;

  if (a20 < 0)
    operator delete(__p);
  quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)&a57);
  std::ostringstream::~ostringstream((uint64_t)&a21);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](v57 - 160);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<std::vector<std::shared_ptr<fst::ArcInfo>>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D45778;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<std::vector<std::shared_ptr<fst::ArcInfo>>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D45778;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF44D190);
}

void std::__shared_ptr_emplace<std::vector<std::shared_ptr<fst::ArcInfo>>>::__on_zero_shared(uint64_t a1)
{
  void **v1;

  v1 = (void **)(a1 + 24);
  std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100](&v1);
}

void quasar::TokenLmInfo::~TokenLmInfo(quasar::TokenLmInfo *this)
{
  void *v2;
  void *v3;

  v2 = (void *)*((_QWORD *)this + 8);
  if (v2)
  {
    *((_QWORD *)this + 9) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 5);
  if (v3)
  {
    *((_QWORD *)this + 6) = v3;
    operator delete(v3);
  }
  if (*((char *)this + 23) < 0)
    operator delete(*(void **)this);
}

uint64_t std::vector<quasar::TokenLmInfo>::__push_back_slow_path<quasar::TokenLmInfo>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v17[5];

  v3 = *a1;
  v4 = 0x2E8BA2E8BA2E8BA3 * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) > 0x2E8BA2E8BA2E8BALL)
    std::vector<int>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0x2E8BA2E8BA2E8BA3 * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x1745D1745D1745DLL)
    v9 = 0x2E8BA2E8BA2E8BALL;
  else
    v9 = v5;
  v17[4] = a1 + 2;
  v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<std::string,quasar::PTree>>>(v7, v9);
  v11 = &v10[88 * v4];
  v17[0] = v10;
  v17[1] = v11;
  v17[3] = &v10[88 * v12];
  v13 = *(_QWORD *)(a2 + 16);
  *(_OWORD *)v11 = *(_OWORD *)a2;
  *((_QWORD *)v11 + 2) = v13;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v14 = *(_QWORD *)(a2 + 30);
  *((_QWORD *)v11 + 3) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(v11 + 30) = v14;
  *((_QWORD *)v11 + 6) = 0;
  *((_QWORD *)v11 + 7) = 0;
  *((_QWORD *)v11 + 5) = 0;
  *(_OWORD *)(v11 + 40) = *(_OWORD *)(a2 + 40);
  *((_QWORD *)v11 + 7) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  *((_QWORD *)v11 + 9) = 0;
  *((_QWORD *)v11 + 10) = 0;
  *((_QWORD *)v11 + 8) = 0;
  *((_OWORD *)v11 + 4) = *(_OWORD *)(a2 + 64);
  *((_QWORD *)v11 + 10) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a2 + 64) = 0;
  *(_QWORD *)(a2 + 72) = 0;
  *(_QWORD *)(a2 + 80) = 0;
  v17[2] = v11 + 88;
  std::vector<quasar::TokenLmInfo>::__swap_out_circular_buffer(a1, v17);
  v15 = a1[1];
  std::__split_buffer<quasar::TokenLmInfo>::~__split_buffer(v17);
  return v15;
}

void sub_1AD8F5598(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<quasar::TokenLmInfo>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<quasar::TokenLmInfo>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<quasar::TokenLmInfo>,std::reverse_iterator<quasar::TokenLmInfo*>,std::reverse_iterator<quasar::TokenLmInfo*>,std::reverse_iterator<quasar::TokenLmInfo*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<quasar::TokenLmInfo>,std::reverse_iterator<quasar::TokenLmInfo*>,std::reverse_iterator<quasar::TokenLmInfo*>,std::reverse_iterator<quasar::TokenLmInfo*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v12[3];
  char v13;
  __int128 v14;
  __int128 v15;

  v7 = a7;
  *(_QWORD *)&v15 = a6;
  *((_QWORD *)&v15 + 1) = a7;
  v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  if (a3 == a5)
  {
    v10 = a6;
  }
  else
  {
    do
    {
      v8 = *(_OWORD *)(a3 - 88);
      *(_QWORD *)(v7 - 72) = *(_QWORD *)(a3 - 72);
      *(_OWORD *)(v7 - 88) = v8;
      *(_QWORD *)(a3 - 80) = 0;
      *(_QWORD *)(a3 - 72) = 0;
      *(_QWORD *)(a3 - 88) = 0;
      v9 = *(_QWORD *)(a3 - 64);
      *(_QWORD *)(v7 - 58) = *(_QWORD *)(a3 - 58);
      *(_QWORD *)(v7 - 64) = v9;
      *(_QWORD *)(v7 - 40) = 0;
      *(_QWORD *)(v7 - 32) = 0;
      *(_QWORD *)(v7 - 48) = 0;
      *(_OWORD *)(v7 - 48) = *(_OWORD *)(a3 - 48);
      *(_QWORD *)(v7 - 32) = *(_QWORD *)(a3 - 32);
      *(_QWORD *)(a3 - 48) = 0;
      *(_QWORD *)(a3 - 40) = 0;
      *(_QWORD *)(a3 - 32) = 0;
      *(_QWORD *)(v7 - 24) = 0;
      *(_QWORD *)(v7 - 16) = 0;
      *(_QWORD *)(v7 - 8) = 0;
      *(_OWORD *)(v7 - 24) = *(_OWORD *)(a3 - 24);
      *(_QWORD *)(v7 - 8) = *(_QWORD *)(a3 - 8);
      *(_QWORD *)(a3 - 24) = 0;
      *(_QWORD *)(a3 - 16) = 0;
      *(_QWORD *)(a3 - 8) = 0;
      v7 = *((_QWORD *)&v15 + 1) - 88;
      *((_QWORD *)&v15 + 1) -= 88;
      a3 -= 88;
    }
    while (a3 != a5);
    v10 = v15;
  }
  v13 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<quasar::TokenLmInfo>,std::reverse_iterator<quasar::TokenLmInfo*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return v10;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<quasar::TokenLmInfo>,std::reverse_iterator<quasar::TokenLmInfo*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<quasar::TokenLmInfo>,std::reverse_iterator<quasar::TokenLmInfo*>>::operator()[abi:ne180100]((uint64_t *)a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<quasar::TokenLmInfo>,std::reverse_iterator<quasar::TokenLmInfo*>>::operator()[abi:ne180100](uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(a1[2] + 8);
  v2 = *(_QWORD *)(a1[1] + 8);
  if (v1 != v2)
  {
    v3 = *a1;
    do
    {
      std::allocator<quasar::TokenLmInfo>::destroy[abi:ne180100](v3, v1);
      v1 += 88;
    }
    while (v1 != v2);
  }
}

void std::allocator<quasar::TokenLmInfo>::destroy[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void *v3;
  void *v4;

  v3 = *(void **)(a2 + 64);
  if (v3)
  {
    *(_QWORD *)(a2 + 72) = v3;
    operator delete(v3);
  }
  v4 = *(void **)(a2 + 40);
  if (v4)
  {
    *(_QWORD *)(a2 + 48) = v4;
    operator delete(v4);
  }
  if (*(char *)(a2 + 23) < 0)
    operator delete(*(void **)a2);
}

void **std::__split_buffer<quasar::TokenLmInfo>::~__split_buffer(void **a1)
{
  std::__split_buffer<quasar::TokenLmInfo>::clear[abi:ne180100](a1);
  if (*a1)
    operator delete(*a1);
  return a1;
}

void std::__split_buffer<quasar::TokenLmInfo>::clear[abi:ne180100](_QWORD *a1)
{
  uint64_t i;
  uint64_t v2;
  uint64_t v4;

  v2 = a1[1];
  for (i = a1[2]; i != v2; i = a1[2])
  {
    v4 = a1[4];
    a1[2] = i - 88;
    std::allocator<quasar::TokenLmInfo>::destroy[abi:ne180100](v4, i - 88);
  }
}

uint64_t quasar::TokenLmInfo::TokenLmInfo(uint64_t a1, uint64_t a2, char a3, char a4, uint64_t a5, float a6)
{
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = a2;
  *(float *)(a1 + 32) = a6;
  *(_BYTE *)(a1 + 36) = a3;
  *(_BYTE *)(a1 + 37) = a4;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>((_QWORD *)(a1 + 40), *(const void **)a5, *(_QWORD *)(a5 + 8), (uint64_t)(*(_QWORD *)(a5 + 8) - *(_QWORD *)a5) >> 2);
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  return a1;
}

void sub_1AD8F58B0(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void quasar::DecoderPassData::~DecoderPassData(void **this)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void **v6;

  v6 = this + 103;
  std::vector<std::vector<quasar::Token>>::__destroy_vector::operator()[abi:ne180100](&v6);
  v6 = this + 99;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v6);
  v6 = this + 96;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v6);
  v6 = this + 93;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v6);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)(this + 87));
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)(this + 84));
  if (*((char *)this + 655) < 0)
    operator delete(this[79]);
  if (*((char *)this + 631) < 0)
    operator delete(this[76]);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)(this + 74));
  v6 = this + 71;
  std::vector<std::weak_ptr<quasar::Decoder>>::__destroy_vector::operator()[abi:ne180100](&v6);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)(this + 67));
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)(this + 65));
  v6 = this + 62;
  std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100](&v6);
  v6 = this + 59;
  std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100](&v6);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)(this + 57));
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)(this + 51));
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)(this + 49));
  std::__tree<int>::destroy((uint64_t)(this + 46), this[47]);
  v2 = this[43];
  if (v2)
  {
    this[44] = v2;
    operator delete(v2);
  }
  v6 = this + 40;
  std::vector<fst::FstWithLabel<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::__destroy_vector::operator()[abi:ne180100](&v6);
  v3 = this[37];
  if (v3)
  {
    this[38] = v3;
    operator delete(v3);
  }
  v6 = this + 34;
  std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100](&v6);
  v6 = this + 31;
  std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100](&v6);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)(this + 27));
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)(this + 23));
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)(this + 21));
  v4 = this[18];
  if (v4)
  {
    this[19] = v4;
    operator delete(v4);
  }
  v5 = this[15];
  if (v5)
    operator delete(v5);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)(this + 10));
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)(this + 8));
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)(this + 6));
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)(this + 4));
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)(this + 2));
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this);
}

void std::__shared_ptr_emplace<quasar::SymbolTableList>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D42D40;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<quasar::SymbolTableList>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D42D40;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF44D190);
}

void std::__shared_ptr_emplace<quasar::SymbolTableList>::__on_zero_shared(uint64_t a1)
{
  void **v1;

  v1 = (void **)(a1 + 24);
  std::vector<quasar::SymbolTableList::Data>::__destroy_vector::operator()[abi:ne180100](&v1);
}

void std::vector<quasar::SymbolTableList::Data>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = v2;
    if ((void *)v4 != v2)
    {
      do
        v4 = std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](v4 - 32);
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t std::vector<quasar::LmInfo>::__push_back_slow_path<quasar::LmInfo const&>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  void *v10;
  char *v11;
  char *v12;
  char *v13;
  uint64_t *v14;

  v3 = 0x4EC4EC4EC4EC4EC5 * ((a1[1] - *a1) >> 3);
  v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) > 0x276276276276276)
    std::vector<int>::__throw_length_error[abi:ne180100]();
  if (0x9D89D89D89D89D8ALL * ((a1[2] - *a1) >> 3) > v4)
    v4 = 0x9D89D89D89D89D8ALL * ((a1[2] - *a1) >> 3);
  if ((unint64_t)(0x4EC4EC4EC4EC4EC5 * ((a1[2] - *a1) >> 3)) >= 0x13B13B13B13B13BLL)
    v6 = 0x276276276276276;
  else
    v6 = v4;
  v14 = a1 + 2;
  if (v6)
    v7 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::LmInfo>>((uint64_t)(a1 + 2), v6);
  else
    v7 = 0;
  v10 = v7;
  v11 = &v7[104 * v3];
  v13 = &v7[104 * v6];
  std::allocator<quasar::LmInfo>::construct[abi:ne180100]<quasar::LmInfo,quasar::LmInfo const&>((uint64_t)(a1 + 2), (uint64_t)v11, a2);
  v12 = v11 + 104;
  std::vector<quasar::LmInfo>::__swap_out_circular_buffer(a1, &v10);
  v8 = a1[1];
  std::__split_buffer<quasar::LmInfo>::~__split_buffer(&v10);
  return v8;
}

void sub_1AD8F5C74(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<quasar::LmInfo>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

_QWORD *std::allocator<quasar::LmInfo>::construct[abi:ne180100]<quasar::LmInfo,quasar::LmInfo const&>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v5;
  __int128 v6;
  uint64_t v7;
  char v8;

  *(_DWORD *)a2 = *(_DWORD *)a3;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  std::vector<quasar::TokenLmInfo>::__init_with_size[abi:ne180100]<quasar::TokenLmInfo*,quasar::TokenLmInfo*>((std::string *)(a2 + 8), *(__int128 **)(a3 + 8), *(__int128 **)(a3 + 16), 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*(_QWORD *)(a3 + 16) - *(_QWORD *)(a3 + 8)) >> 3));
  v5 = *(_DWORD *)(a3 + 32);
  *(_BYTE *)(a2 + 36) = *(_BYTE *)(a3 + 36);
  *(_DWORD *)(a2 + 32) = v5;
  if (*(char *)(a3 + 63) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a2 + 40), *(const std::string::value_type **)(a3 + 40), *(_QWORD *)(a3 + 48));
  }
  else
  {
    v6 = *(_OWORD *)(a3 + 40);
    *(_QWORD *)(a2 + 56) = *(_QWORD *)(a3 + 56);
    *(_OWORD *)(a2 + 40) = v6;
  }
  v7 = *(_QWORD *)(a3 + 64);
  v8 = *(_BYTE *)(a3 + 72);
  *(_QWORD *)(a2 + 80) = 0;
  *(_BYTE *)(a2 + 72) = v8;
  *(_QWORD *)(a2 + 64) = v7;
  *(_QWORD *)(a2 + 88) = 0;
  *(_QWORD *)(a2 + 96) = 0;
  return std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>((_QWORD *)(a2 + 80), *(const void **)(a3 + 80), *(_QWORD *)(a3 + 88), (uint64_t)(*(_QWORD *)(a3 + 88) - *(_QWORD *)(a3 + 80)) >> 2);
}

void sub_1AD8F5D60(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::vector<quasar::TokenLmInfo>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

std::string *std::vector<quasar::TokenLmInfo>::__init_with_size[abi:ne180100]<quasar::TokenLmInfo*,quasar::TokenLmInfo*>(std::string *result, __int128 *a2, __int128 *a3, unint64_t a4)
{
  std::string *v6;

  if (a4)
  {
    v6 = result;
    std::vector<std::pair<std::string,quasar::PTree>>::__vallocate[abi:ne180100](result, a4);
    result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<quasar::TokenLmInfo>,quasar::TokenLmInfo*,quasar::TokenLmInfo*,quasar::TokenLmInfo*>((uint64_t)&v6->__r_.__value_.__r.__words[2], a2, a3, (std::string *)v6->__r_.__value_.__l.__size_);
    v6->__r_.__value_.__l.__size_ = (std::string::size_type)result;
  }
  return result;
}

void sub_1AD8F5DF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  std::vector<quasar::TokenLmInfo>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

std::string *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<quasar::TokenLmInfo>,quasar::TokenLmInfo*,quasar::TokenLmInfo*,quasar::TokenLmInfo*>(uint64_t a1, __int128 *a2, __int128 *a3, std::string *this)
{
  std::string *v4;
  __int128 *v6;
  int v7;
  _QWORD v9[3];
  char v10;
  std::string *v11;
  std::string *v12;

  v4 = this;
  v11 = this;
  v12 = this;
  v9[0] = a1;
  v9[1] = &v11;
  v9[2] = &v12;
  v10 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    v7 = a1;
    do
    {
      std::allocator<quasar::TokenLmInfo>::construct[abi:ne180100]<quasar::TokenLmInfo,quasar::TokenLmInfo&>(v7, v4, v6);
      v6 = (__int128 *)((char *)v6 + 88);
      v4 = (std::string *)((char *)v12 + 88);
      v12 = (std::string *)((char *)v12 + 88);
    }
    while (v6 != a3);
  }
  v10 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<quasar::TokenLmInfo>,quasar::TokenLmInfo*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v9);
  return v4;
}

void sub_1AD8F5EA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<quasar::TokenLmInfo>,quasar::TokenLmInfo*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

_QWORD *std::allocator<quasar::TokenLmInfo>::construct[abi:ne180100]<quasar::TokenLmInfo,quasar::TokenLmInfo&>(int a1, std::string *this, __int128 *a3)
{
  __int128 v5;
  std::string::size_type v6;
  std::string::size_type v7;

  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a3, *((_QWORD *)a3 + 1));
  }
  else
  {
    v5 = *a3;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a3 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v5;
  }
  v6 = *((_QWORD *)a3 + 3);
  v7 = *(_QWORD *)((char *)a3 + 30);
  this[1].__r_.__value_.__r.__words[2] = 0;
  *(std::string::size_type *)((char *)this[1].__r_.__value_.__r.__words + 6) = v7;
  this[1].__r_.__value_.__r.__words[0] = v6;
  this[2].__r_.__value_.__r.__words[0] = 0;
  this[2].__r_.__value_.__l.__size_ = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&this[1].__r_.__value_.__r.__words[2], *((const void **)a3 + 5), *((_QWORD *)a3 + 6), (uint64_t)(*((_QWORD *)a3 + 6) - *((_QWORD *)a3 + 5)) >> 2);
  this[2].__r_.__value_.__r.__words[2] = 0;
  this[3].__r_.__value_.__r.__words[0] = 0;
  this[3].__r_.__value_.__l.__size_ = 0;
  return std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&this[2].__r_.__value_.__r.__words[2], *((const void **)a3 + 8), *((_QWORD *)a3 + 9), (uint64_t)(*((_QWORD *)a3 + 9) - *((_QWORD *)a3 + 8)) >> 2);
}

void sub_1AD8F5F58(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 48) = v4;
    operator delete(v4);
  }
  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<quasar::TokenLmInfo>,quasar::TokenLmInfo*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<quasar::TokenLmInfo>,quasar::TokenLmInfo*>::operator()[abi:ne180100]((uint64_t *)a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<quasar::TokenLmInfo>,quasar::TokenLmInfo*>::operator()[abi:ne180100](uint64_t *a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = (uint64_t *)a1[1];
  v1 = (uint64_t *)a1[2];
  v3 = *v1;
  v4 = *v2;
  if (*v1 != *v2)
  {
    v5 = *a1;
    do
    {
      v3 -= 88;
      std::allocator<quasar::TokenLmInfo>::destroy[abi:ne180100](v5, v3);
    }
    while (v3 != v4);
  }
}

void std::vector<quasar::TokenLmInfo>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 88;
        std::allocator<quasar::TokenLmInfo>::destroy[abi:ne180100]((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t std::vector<quasar::LmInfo>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<quasar::LmInfo>,std::reverse_iterator<quasar::LmInfo*>,std::reverse_iterator<quasar::LmInfo*>,std::reverse_iterator<quasar::LmInfo*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::LmInfo>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x276276276276277)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(104 * a2);
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<quasar::LmInfo>,std::reverse_iterator<quasar::LmInfo*>,std::reverse_iterator<quasar::LmInfo*>,std::reverse_iterator<quasar::LmInfo*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  int v8;
  int v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD v14[3];
  char v15;
  __int128 v16;
  __int128 v17;

  v7 = a7;
  *(_QWORD *)&v17 = a6;
  *((_QWORD *)&v17 + 1) = a7;
  v16 = v17;
  v14[0] = a1;
  v14[1] = &v16;
  v14[2] = &v17;
  if (a3 == a5)
  {
    v12 = a6;
  }
  else
  {
    do
    {
      v8 = *(_DWORD *)(a3 - 104);
      a3 -= 104;
      *(_DWORD *)(v7 - 104) = v8;
      *(_QWORD *)(v7 - 88) = 0;
      *(_QWORD *)(v7 - 80) = 0;
      *(_QWORD *)(v7 - 96) = 0;
      *(_OWORD *)(v7 - 96) = *(_OWORD *)(a3 + 8);
      *(_QWORD *)(v7 - 80) = *(_QWORD *)(a3 + 24);
      *(_QWORD *)(a3 + 8) = 0;
      *(_QWORD *)(a3 + 16) = 0;
      *(_QWORD *)(a3 + 24) = 0;
      v9 = *(_DWORD *)(a3 + 32);
      *(_BYTE *)(v7 - 68) = *(_BYTE *)(a3 + 36);
      *(_DWORD *)(v7 - 72) = v9;
      v10 = *(_OWORD *)(a3 + 40);
      *(_QWORD *)(v7 - 48) = *(_QWORD *)(a3 + 56);
      *(_OWORD *)(v7 - 64) = v10;
      *(_QWORD *)(a3 + 48) = 0;
      *(_QWORD *)(a3 + 56) = 0;
      *(_QWORD *)(a3 + 40) = 0;
      v11 = *(_QWORD *)(a3 + 64);
      *(_BYTE *)(v7 - 32) = *(_BYTE *)(a3 + 72);
      *(_QWORD *)(v7 - 40) = v11;
      *(_QWORD *)(v7 - 16) = 0;
      *(_QWORD *)(v7 - 8) = 0;
      *(_QWORD *)(v7 - 24) = 0;
      *(_OWORD *)(v7 - 24) = *(_OWORD *)(a3 + 80);
      *(_QWORD *)(v7 - 8) = *(_QWORD *)(a3 + 96);
      *(_QWORD *)(a3 + 80) = 0;
      *(_QWORD *)(a3 + 88) = 0;
      *(_QWORD *)(a3 + 96) = 0;
      v7 = *((_QWORD *)&v17 + 1) - 104;
      *((_QWORD *)&v17 + 1) -= 104;
    }
    while (a3 != a5);
    v12 = v17;
  }
  v15 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<quasar::LmInfo>,std::reverse_iterator<quasar::LmInfo*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v14);
  return v12;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<quasar::LmInfo>,std::reverse_iterator<quasar::LmInfo*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<quasar::LmInfo>,std::reverse_iterator<quasar::LmInfo*>>::operator()[abi:ne180100]((uint64_t *)a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<quasar::LmInfo>,std::reverse_iterator<quasar::LmInfo*>>::operator()[abi:ne180100](uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(a1[2] + 8);
  v2 = *(_QWORD *)(a1[1] + 8);
  if (v1 != v2)
  {
    v3 = *a1;
    do
    {
      std::allocator<quasar::LmInfo>::destroy[abi:ne180100](v3, v1);
      v1 += 104;
    }
    while (v1 != v2);
  }
}

void std::allocator<quasar::LmInfo>::destroy[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void *v3;
  void **v4;

  v3 = *(void **)(a2 + 80);
  if (v3)
  {
    *(_QWORD *)(a2 + 88) = v3;
    operator delete(v3);
  }
  if (*(char *)(a2 + 63) < 0)
    operator delete(*(void **)(a2 + 40));
  v4 = (void **)(a2 + 8);
  std::vector<quasar::TokenLmInfo>::__destroy_vector::operator()[abi:ne180100](&v4);
}

void **std::__split_buffer<quasar::LmInfo>::~__split_buffer(void **a1)
{
  std::__split_buffer<quasar::LmInfo>::clear[abi:ne180100](a1);
  if (*a1)
    operator delete(*a1);
  return a1;
}

void std::__split_buffer<quasar::LmInfo>::clear[abi:ne180100](_QWORD *a1)
{
  uint64_t i;
  uint64_t v2;
  uint64_t v4;

  v2 = a1[1];
  for (i = a1[2]; i != v2; i = a1[2])
  {
    v4 = a1[4];
    a1[2] = i - 104;
    std::allocator<quasar::LmInfo>::destroy[abi:ne180100](v4, i - 104);
  }
}

void std::vector<std::vector<unsigned long long>>::__append(uint64_t *a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  size_t v13;
  size_t v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD *)(v4 - 8);
  if (0xAAAAAAAAAAAAAAABLL * ((v6 - v7) >> 3) >= a2)
  {
    if (a2)
    {
      v13 = 24 * ((24 * a2 - 24) / 0x18) + 24;
      bzero(*(void **)(v4 - 8), v13);
      v7 += v13;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = 0xAAAAAAAAAAAAAAABLL * ((v7 - *a1) >> 3);
    v9 = v8 + a2;
    if (v8 + a2 > 0xAAAAAAAAAAAAAAALL)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v10 = 0xAAAAAAAAAAAAAAABLL * ((v5 - *a1) >> 3);
    if (2 * v10 > v9)
      v9 = 2 * v10;
    if (v10 >= 0x555555555555555)
      v11 = 0xAAAAAAAAAAAAAAALL;
    else
      v11 = v9;
    v19 = v4;
    if (v11)
      v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>(v4, v11);
    else
      v12 = 0;
    v15 = v12;
    v16 = &v12[24 * v8];
    v18 = &v12[24 * v11];
    v14 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v16, v14);
    v17 = &v16[v14];
    std::vector<std::vector<unsigned long long>>::__swap_out_circular_buffer(a1, &v15);
    std::__split_buffer<std::vector<int>>::~__split_buffer((uint64_t)&v15);
  }
}

void sub_1AD8F64EC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::vector<int>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::vector<unsigned long long>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<unsigned long long>>,std::reverse_iterator<std::vector<unsigned long long>*>,std::reverse_iterator<std::vector<unsigned long long>*>,std::reverse_iterator<std::vector<unsigned long long>*>>((uint64_t)(a1 + 2), a1[1], (_QWORD *)a1[1], *a1, (_QWORD *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<unsigned long long>>,std::reverse_iterator<std::vector<unsigned long long>*>,std::reverse_iterator<std::vector<unsigned long long>*>,std::reverse_iterator<std::vector<unsigned long long>*>>(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  _QWORD v11[3];
  char v12;
  __int128 v13;
  __int128 v14;

  v7 = a7;
  *(_QWORD *)&v14 = a6;
  *((_QWORD *)&v14 + 1) = a7;
  v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    v9 = a6;
  }
  else
  {
    do
    {
      *(_QWORD *)(v7 - 24) = 0;
      *(_QWORD *)(v7 - 16) = 0;
      *(_QWORD *)(v7 - 8) = 0;
      v8 = *(_OWORD *)(a3 - 3);
      a3 -= 3;
      *(_OWORD *)(v7 - 24) = v8;
      *(_QWORD *)(v7 - 8) = a3[2];
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      v7 = *((_QWORD *)&v14 + 1) - 24;
      *((_QWORD *)&v14 + 1) -= 24;
    }
    while (a3 != a5);
    v9 = v14;
  }
  v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<unsigned long long>>,std::reverse_iterator<std::vector<unsigned long long>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<unsigned long long>>,std::reverse_iterator<std::vector<unsigned long long>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<int>>,std::reverse_iterator<std::vector<int>*>>::operator()[abi:ne180100](a1);
  return a1;
}

_QWORD *std::vector<std::vector<float>>::vector(_QWORD *a1, unint64_t a2, uint64_t a3)
{
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<std::string>::__vallocate[abi:ne180100](a1, a2);
    v6 = (_QWORD *)a1[1];
    v7 = 3 * a2;
    v8 = &v6[3 * a2];
    v9 = 8 * v7;
    do
    {
      *v6 = 0;
      v6[1] = 0;
      v6[2] = 0;
      std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(v6, *(const void **)a3, *(_QWORD *)(a3 + 8), (uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 2);
      v6 += 3;
      v9 -= 24;
    }
    while (v9);
    a1[1] = v8;
  }
  return a1;
}

void sub_1AD8F66E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

char *std::vector<std::shared_ptr<kaldi::quasar::LmHandle>>::__init_with_size[abi:ne180100]<std::shared_ptr<kaldi::quasar::LmHandle>*,std::shared_ptr<kaldi::quasar::LmHandle>*>(char *result, _QWORD *a2, _QWORD *a3, unint64_t a4)
{
  char *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  if (a4)
  {
    v6 = result;
    result = std::vector<std::pair<unsigned long,char const*>>::__vallocate[abi:ne180100](result, a4);
    v7 = (_QWORD *)*((_QWORD *)v6 + 1);
    while (a2 != a3)
    {
      *v7 = *a2;
      v8 = a2[1];
      v7[1] = v8;
      if (v8)
      {
        v9 = (unint64_t *)(v8 + 8);
        do
          v10 = __ldxr(v9);
        while (__stxr(v10 + 1, v9));
      }
      a2 += 2;
      v7 += 2;
    }
    *((_QWORD *)v6 + 1) = v7;
  }
  return result;
}

void sub_1AD8F678C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

char *std::vector<std::shared_ptr<quasar::Decoder>>::__init_with_size[abi:ne180100]<std::shared_ptr<quasar::Decoder>*,std::shared_ptr<quasar::Decoder>*>(char *result, _QWORD *a2, _QWORD *a3, unint64_t a4)
{
  char *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  if (a4)
  {
    v6 = result;
    result = std::vector<std::pair<unsigned long,char const*>>::__vallocate[abi:ne180100](result, a4);
    v7 = (_QWORD *)*((_QWORD *)v6 + 1);
    while (a2 != a3)
    {
      *v7 = *a2;
      v8 = a2[1];
      v7[1] = v8;
      if (v8)
      {
        v9 = (unint64_t *)(v8 + 8);
        do
          v10 = __ldxr(v9);
        while (__stxr(v10 + 1, v9));
      }
      a2 += 2;
      v7 += 2;
    }
    *((_QWORD *)v6 + 1) = v7;
  }
  return result;
}

void sub_1AD8F682C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

_QWORD *std::allocate_shared[abi:ne180100]<quasar::SpeechRecognizerConfig,std::allocator<quasar::SpeechRecognizerConfig>,std::string const&,void>@<X0>(uint64_t a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *result;

  v4 = operator new(0x668uLL);
  result = std::__shared_ptr_emplace<quasar::SpeechRecognizerConfig>::__shared_ptr_emplace[abi:ne180100]<std::string const&,std::allocator<quasar::SpeechRecognizerConfig>,0>(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_1AD8F6884(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<quasar::SpeechRecognizerConfig>::__shared_ptr_emplace[abi:ne180100]<std::string const&,std::allocator<quasar::SpeechRecognizerConfig>,0>(_QWORD *a1, uint64_t a2)
{
  char v4;

  a1[2] = 0;
  *a1 = &unk_1E5D43DA8;
  a1[1] = 0;
  std::allocator<quasar::SpeechRecognizerConfig>::construct[abi:ne180100]<quasar::SpeechRecognizerConfig,std::string const&>((quasar::DecoderOptions *)&v4, (uint64_t)(a1 + 3), a2);
  return a1;
}

void sub_1AD8F68E4(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<quasar::SpeechRecognizerConfig>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D43DA8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<quasar::SpeechRecognizerConfig>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D43DA8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF44D190);
}

void std::__shared_ptr_emplace<quasar::SpeechRecognizerConfig>::__on_zero_shared(uint64_t a1)
{
  quasar::SpeechRecognizerConfig::~SpeechRecognizerConfig((quasar::SpeechRecognizerConfig *)(a1 + 24));
}

void std::allocator<quasar::SpeechRecognizerConfig>::construct[abi:ne180100]<quasar::SpeechRecognizerConfig,std::string const&>(quasar::DecoderOptions *a1, uint64_t a2, uint64_t a3)
{
  _OWORD v5[2];
  int v6;
  _QWORD v7[3];

  memset(v7, 0, sizeof(v7));
  memset(v5, 0, sizeof(v5));
  v6 = 1065353216;
  quasar::DecoderOptions::defaultDecoderOptions(a1);
  quasar::SpeechRecognizerConfig::SpeechRecognizerConfig(a2, a3, v7, v5, 0);
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table((uint64_t)v5);
  *(_QWORD *)&v5[0] = v7;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v5);
}

void sub_1AD8F69CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table((uint64_t)&a9);
  a9 = (void **)&a14;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

quasar::SpeechRecognizerModelLoader *std::unique_ptr<quasar::SpeechRecognizerModelLoader>::reset[abi:ne180100](quasar::SpeechRecognizerModelLoader **a1, quasar::SpeechRecognizerModelLoader *a2)
{
  quasar::SpeechRecognizerModelLoader *result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    quasar::SpeechRecognizerModelLoader::~SpeechRecognizerModelLoader(result);
    JUMPOUT(0x1AF44D190);
  }
  return result;
}

uint64_t std::vector<std::shared_ptr<quasar::Decoder>>::__assign_with_size[abi:ne180100]<std::shared_ptr<quasar::Decoder>*,std::shared_ptr<quasar::Decoder>*>(uint64_t a1, uint64_t *a2, uint64_t *a3, unint64_t a4)
{
  uint64_t *v6;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t result;
  uint64_t *v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t *v23;

  v6 = a2;
  v8 = *(uint64_t **)a1;
  if (a4 > (uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 4)
  {
    std::vector<std::shared_ptr<quasar::Decoder>>::__vdeallocate((void **)a1);
    if (a4 >> 60)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v9 = *(_QWORD *)(a1 + 16) - *(_QWORD *)a1;
    v10 = v9 >> 3;
    if (v9 >> 3 <= a4)
      v10 = a4;
    if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF0)
      v11 = 0xFFFFFFFFFFFFFFFLL;
    else
      v11 = v10;
    result = (uint64_t)std::vector<std::pair<unsigned long,char const*>>::__vallocate[abi:ne180100]((_QWORD *)a1, v11);
    v13 = *(uint64_t **)(a1 + 8);
    while (v6 != a3)
    {
      v14 = v6[1];
      *v13 = *v6;
      v13[1] = v14;
      if (v14)
      {
        v15 = (unint64_t *)(v14 + 8);
        do
          v16 = __ldxr(v15);
        while (__stxr(v16 + 1, v15));
      }
      v6 += 2;
      v13 += 2;
    }
LABEL_25:
    *(_QWORD *)(a1 + 8) = v13;
    return result;
  }
  result = *(_QWORD *)(a1 + 8);
  v17 = (result - (uint64_t)v8) >> 4;
  if (v17 < a4)
  {
    v18 = &a2[2 * v17];
    if ((uint64_t *)result != v8)
    {
      v19 = 16 * v17;
      do
      {
        result = (uint64_t)std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::operator=[abi:ne180100](v8, v6);
        v6 += 2;
        v8 += 2;
        v19 -= 16;
      }
      while (v19);
      v8 = *(uint64_t **)(a1 + 8);
    }
    v13 = v8;
    if (v18 != a3)
    {
      v13 = v8;
      do
      {
        v20 = v18[1];
        *v13 = *v18;
        v13[1] = v20;
        if (v20)
        {
          v21 = (unint64_t *)(v20 + 8);
          do
            v22 = __ldxr(v21);
          while (__stxr(v22 + 1, v21));
        }
        v18 += 2;
        v13 += 2;
      }
      while (v18 != a3);
    }
    goto LABEL_25;
  }
  if (a2 == a3)
  {
    v23 = v8;
  }
  else
  {
    v23 = v8;
    do
    {
      std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::operator=[abi:ne180100](v8, v6);
      v6 += 2;
      v8 += 2;
      v23 += 2;
    }
    while (v6 != a3);
    result = *(_QWORD *)(a1 + 8);
  }
  while ((uint64_t *)result != v23)
    result = std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](result - 16);
  *(_QWORD *)(a1 + 8) = v23;
  return result;
}

void std::vector<std::shared_ptr<quasar::Decoder>>::__vdeallocate(void **a1)
{
  void *v1;
  uint64_t v3;
  void *v4;

  v1 = *a1;
  if (*a1)
  {
    v3 = (uint64_t)a1[1];
    v4 = v1;
    if ((void *)v3 != v1)
    {
      do
        v3 = std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](v3 - 16);
      while ((void *)v3 != v1);
      v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

void std::__assoc_state<quasar::Location>::set_value<quasar::Location const&>(uint64_t a1, _OWORD *a2)
{
  std::mutex *v4;
  uint64_t v5;
  std::exception_ptr v6;

  v4 = (std::mutex *)(a1 + 24);
  std::mutex::lock((std::mutex *)(a1 + 24));
  if ((*(_BYTE *)(a1 + 136) & 1) != 0
    || (v6.__ptr_ = 0, v5 = *(_QWORD *)(a1 + 16), std::exception_ptr::~exception_ptr(&v6), v5))
  {
    std::__throw_future_error[abi:ne180100](2u);
  }
  *(_OWORD *)(a1 + 144) = *a2;
  *(_DWORD *)(a1 + 136) |= 5u;
  std::condition_variable::notify_all((std::condition_variable *)(a1 + 88));
  std::mutex::unlock(v4);
}

void sub_1AD8F6CC4(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void std::vector<std::weak_ptr<quasar::Decoder>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    std::vector<std::weak_ptr<quasar::Decoder>>::__clear[abi:ne180100]((uint64_t *)v2);
    operator delete(**a1);
  }
}

void std::vector<std::weak_ptr<quasar::Decoder>>::__clear[abi:ne180100](uint64_t *a1)
{
  uint64_t v2;
  uint64_t i;
  std::__shared_weak_count *v4;

  v2 = *a1;
  for (i = a1[1]; i != v2; i -= 16)
  {
    v4 = *(std::__shared_weak_count **)(i - 8);
    if (v4)
      std::__shared_weak_count::__release_weak(v4);
  }
  a1[1] = v2;
}

void std::__shared_ptr_emplace<quasar::SpeechRequestResultData>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D440B8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<quasar::SpeechRequestResultData>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D440B8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF44D190);
}

void std::__shared_ptr_emplace<quasar::SpeechRequestResultData>::__on_zero_shared(uint64_t a1)
{
  char v1;

  std::allocator<quasar::SpeechRequestResultData>::destroy[abi:ne180100]((uint64_t)&v1, a1 + 24);
}

double quasar::SpeechRequestResultData::SpeechRequestResultData(quasar::SpeechRequestResultData *this)
{
  double result;

  __asm { FMOV            V1.2D, #-1.0 }
  *(_OWORD *)this = _Q1;
  *((_OWORD *)this + 1) = xmmword_1AE146E60;
  *((_OWORD *)this + 2) = _Q1;
  *((_OWORD *)this + 3) = _Q1;
  *((_OWORD *)this + 4) = _Q1;
  *((_QWORD *)this + 10) = -1;
  *((_QWORD *)this + 11) = 0xBFF0000000000000;
  *((_DWORD *)this + 24) = -1;
  *((_QWORD *)this + 13) = 0xBFF0000000000000;
  *((_DWORD *)this + 28) = -1;
  *((_BYTE *)this + 116) = 0;
  *((_QWORD *)this + 15) = -1;
  *((_QWORD *)this + 16) = 0;
  *((_BYTE *)this + 136) = 0;
  result = 0.0;
  *((_OWORD *)this + 9) = 0u;
  *((_OWORD *)this + 10) = 0u;
  *((_OWORD *)this + 11) = 0u;
  *((_QWORD *)this + 24) = 850045863;
  *(_OWORD *)((char *)this + 232) = 0u;
  *(_OWORD *)((char *)this + 216) = 0u;
  *(_OWORD *)((char *)this + 200) = 0u;
  *((_QWORD *)this + 33) = 0;
  *((_QWORD *)this + 34) = 0;
  *((_QWORD *)this + 31) = 0;
  *((_QWORD *)this + 32) = (char *)this + 264;
  *((_QWORD *)this + 35) = (char *)this + 288;
  *((_QWORD *)this + 36) = 0;
  *((_QWORD *)this + 39) = 0;
  *((_QWORD *)this + 40) = 0;
  *((_QWORD *)this + 37) = 0;
  *((_QWORD *)this + 38) = (char *)this + 312;
  *(_OWORD *)((char *)this + 328) = 0u;
  *(_OWORD *)((char *)this + 344) = 0u;
  *(_OWORD *)((char *)this + 360) = 0u;
  *((_QWORD *)this + 47) = 0;
  return result;
}

void std::allocator<quasar::SpeechRequestResultData>::destroy[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void **v3;

  v3 = (void **)(a2 + 360);
  std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100](&v3);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](a2 + 344);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](a2 + 328);
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(a2 + 304, *(_QWORD **)(a2 + 312));
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(a2 + 280, *(_QWORD **)(a2 + 288));
  std::__tree<std::string>::destroy(a2 + 256, *(char **)(a2 + 264));
  std::mutex::~mutex((std::mutex *)(a2 + 192));
  v3 = (void **)(a2 + 168);
  std::vector<quasar::PhoneticMatchResult>::__destroy_vector::operator()[abi:ne180100](&v3);
  v3 = (void **)(a2 + 144);
  std::vector<quasar::PhoneticMatchDecoderStat>::__destroy_vector::operator()[abi:ne180100](&v3);
}

void std::vector<quasar::PhoneticMatchResult>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 72;
        std::allocator<quasar::PhoneticMatchResult>::destroy[abi:ne180100]((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::allocator<quasar::PhoneticMatchResult>::destroy[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void **v3;

  if (*(char *)(a2 + 63) < 0)
    operator delete(*(void **)(a2 + 40));
  v3 = (void **)(a2 + 16);
  std::vector<quasar::PhoneticMatchAlignmentSpan>::__destroy_vector::operator()[abi:ne180100](&v3);
}

void std::vector<quasar::PhoneticMatchAlignmentSpan>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void **v2;
  void **v4;
  void *v5;

  v1 = *a1;
  v2 = (void **)**a1;
  if (v2)
  {
    v4 = (void **)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 9;
        std::allocator<quasar::PhoneticMatchAlignmentSpan>::destroy[abi:ne180100]((uint64_t)(v1 + 2), v4);
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::allocator<quasar::PhoneticMatchAlignmentSpan>::destroy[abi:ne180100](uint64_t a1, void **a2)
{
  void **v3;

  v3 = a2 + 6;
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100](&v3);
  v3 = a2 + 3;
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100](&v3);
  v3 = a2;
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100](&v3);
}

void std::vector<quasar::PhoneticMatchDecoderStat>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    std::vector<quasar::PhoneticMatchDecoderStat>::__clear[abi:ne180100]((uint64_t *)v2);
    operator delete(**a1);
  }
}

void std::vector<quasar::PhoneticMatchDecoderStat>::__clear[abi:ne180100](uint64_t *a1)
{
  uint64_t v2;
  uint64_t i;

  v2 = *a1;
  for (i = a1[1]; i != v2; i -= 40)
  {
    if (*(char *)(i - 17) < 0)
      operator delete(*(void **)(i - 40));
  }
  a1[1] = v2;
}

_QWORD *std::allocate_shared[abi:ne180100]<quasar::DecoderChainOutput,std::allocator<quasar::DecoderChainOutput>,std::shared_ptr<quasar::SymbolTableList>,std::shared_ptr<quasar::SpeechRequestResultData>,void>@<X0>(__int128 *a1@<X1>, __int128 *a2@<X2>, _QWORD *a3@<X8>)
{
  _QWORD *v6;
  _QWORD *result;

  v6 = operator new(0x4A8uLL);
  result = std::__shared_ptr_emplace<quasar::DecoderChainOutput>::__shared_ptr_emplace[abi:ne180100]<std::shared_ptr<quasar::SymbolTableList>,std::shared_ptr<quasar::SpeechRequestResultData>,std::allocator<quasar::DecoderChainOutput>,0>(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  return result;
}

void sub_1AD8F7174(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<quasar::DecoderChainOutput>::__shared_ptr_emplace[abi:ne180100]<std::shared_ptr<quasar::SymbolTableList>,std::shared_ptr<quasar::SpeechRequestResultData>,std::allocator<quasar::DecoderChainOutput>,0>(_QWORD *a1, __int128 *a2, __int128 *a3)
{
  char v5;

  a1[2] = 0;
  *a1 = &unk_1E5D43248;
  a1[1] = 0;
  std::allocator<quasar::DecoderChainOutput>::construct[abi:ne180100]<quasar::DecoderChainOutput,std::shared_ptr<quasar::SymbolTableList>,std::shared_ptr<quasar::SpeechRequestResultData>>((uint64_t)&v5, (uint64_t)(a1 + 3), a2, a3);
  return a1;
}

void sub_1AD8F71D8(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<quasar::DecoderChainOutput>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D43248;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<quasar::DecoderChainOutput>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D43248;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF44D190);
}

void std::__shared_ptr_emplace<quasar::DecoderChainOutput>::__on_zero_shared(uint64_t a1)
{
  quasar::DecoderChainOutput::~DecoderChainOutput((void **)(a1 + 24));
}

void std::allocator<quasar::DecoderChainOutput>::construct[abi:ne180100]<quasar::DecoderChainOutput,std::shared_ptr<quasar::SymbolTableList>,std::shared_ptr<quasar::SpeechRequestResultData>>(uint64_t a1, uint64_t a2, __int128 *a3, __int128 *a4)
{
  __int128 v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  __int128 v11;
  __int128 v12;

  v4 = *a3;
  *(_QWORD *)a3 = 0;
  *((_QWORD *)a3 + 1) = 0;
  v11 = *a4;
  v12 = v4;
  *(_QWORD *)a4 = 0;
  *((_QWORD *)a4 + 1) = 0;
  quasar::DecoderChainOutput::DecoderChainOutput(a2, &v12, &v11);
  v5 = (std::__shared_weak_count *)*((_QWORD *)&v11 + 1);
  if (*((_QWORD *)&v11 + 1))
  {
    v6 = (unint64_t *)(*((_QWORD *)&v11 + 1) + 8);
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  v8 = (std::__shared_weak_count *)*((_QWORD *)&v12 + 1);
  if (*((_QWORD *)&v12 + 1))
  {
    v9 = (unint64_t *)(*((_QWORD *)&v12 + 1) + 8);
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

void sub_1AD8F72F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void quasar::DecoderChainOutput::~DecoderChainOutput(void **this)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void **v9;

  if (*((char *)this + 1167) < 0)
    operator delete(this[143]);
  v9 = this + 139;
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100](&v9);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)(this + 132));
  if (*((char *)this + 1055) < 0)
    operator delete(this[129]);
  v2 = this[126];
  if (v2)
  {
    this[127] = v2;
    operator delete(v2);
  }
  v3 = this[123];
  if (v3)
  {
    this[124] = v3;
    operator delete(v3);
  }
  if (*((char *)this + 959) < 0)
    operator delete(this[117]);
  if (*((char *)this + 903) < 0)
    operator delete(this[110]);
  v9 = this + 105;
  std::vector<std::vector<kaldi::quasar::WordConf>>::__destroy_vector::operator()[abi:ne180100](&v9);
  v4 = this[99];
  if (v4)
  {
    this[100] = v4;
    operator delete(v4);
  }
  v5 = this[95];
  if (v5)
  {
    this[96] = v5;
    operator delete(v5);
  }
  v6 = this[91];
  if (v6)
  {
    this[92] = v6;
    operator delete(v6);
  }
  v7 = this[87];
  if (v7)
  {
    this[88] = v7;
    operator delete(v7);
  }
  v9 = this + 82;
  std::vector<quasar::ItnOverride>::__destroy_vector::operator()[abi:ne180100](&v9);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)(this + 80));
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)(this + 76));
  v9 = this + 73;
  std::vector<quasar::LmeInfo>::__destroy_vector::operator()[abi:ne180100](&v9);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)(this + 70));
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)(this + 68));
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)(this + 61));
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)(this + 59));
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)(this + 53));
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)(this + 51));
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)(this + 49));
  v9 = this + 46;
  std::vector<std::set<std::string>>::__destroy_vector::operator()[abi:ne180100](&v9);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)(this + 44));
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)(this + 42));
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)(this + 40));
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)(this + 38));
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)(this + 36));
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)(this + 34));
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)(this + 32));
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)(this + 30));
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)(this + 28));
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)(this + 26));
  if (*((_BYTE *)this + 200))
    std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)(this + 23));
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)(this + 21));
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)(this + 19));
  std::__tree<std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>>>::destroy((uint64_t)(this + 15), this[16]);
  v9 = this + 12;
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100](&v9);
  v8 = this[9];
  if (v8)
  {
    this[10] = v8;
    operator delete(v8);
  }
  v9 = this + 6;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v9);
  v9 = this + 3;
  std::vector<std::vector<quasar::Token>>::__destroy_vector::operator()[abi:ne180100](&v9);
  v9 = this;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v9);
}

void std::vector<std::vector<kaldi::quasar::WordConf>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void **v2;
  void **v4;
  void *v5;
  void **v6;

  v1 = *a1;
  v2 = (void **)**a1;
  if (v2)
  {
    v4 = (void **)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 3;
        v6 = v4;
        std::vector<kaldi::quasar::WordConf>::__destroy_vector::operator()[abi:ne180100](&v6);
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::vector<kaldi::quasar::WordConf>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = v2;
    if (v4 != v2)
    {
      do
        kaldi::quasar::WordConf::~WordConf((kaldi::quasar::WordConf *)(v4 - 264));
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void kaldi::quasar::WordConf::~WordConf(kaldi::quasar::WordConf *this)
{
  void *v2;
  void *v3;
  void **v4;

  v4 = (void **)((char *)this + 240);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v4);
  v2 = (void *)*((_QWORD *)this + 27);
  if (v2)
  {
    *((_QWORD *)this + 28) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 21);
  if (v3)
  {
    *((_QWORD *)this + 22) = v3;
    operator delete(v3);
  }
  if (*((char *)this + 143) < 0)
    operator delete(*((void **)this + 15));
  if (*((char *)this + 119) < 0)
    operator delete(*((void **)this + 12));
  if (*((char *)this + 95) < 0)
    operator delete(*((void **)this + 9));
  if (*((char *)this + 71) < 0)
    operator delete(*((void **)this + 6));
  if (*((char *)this + 47) < 0)
    operator delete(*((void **)this + 3));
  if (*((char *)this + 23) < 0)
    operator delete(*(void **)this);
}

void std::vector<quasar::LmeInfo>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    std::vector<quasar::LmeInfo>::__clear[abi:ne180100]((uint64_t *)v2);
    operator delete(**a1);
  }
}

void std::vector<quasar::LmeInfo>::__clear[abi:ne180100](uint64_t *a1)
{
  uint64_t v2;
  uint64_t i;

  v2 = *a1;
  for (i = a1[1]; i != v2; i -= 40)
  {
    if (*(char *)(i - 1) < 0)
      operator delete(*(void **)(i - 24));
  }
  a1[1] = v2;
}

uint64_t _ZNSt3__115allocate_sharedB8ne180100IN5kaldi5TimerENS_9allocatorIS2_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_@<X0>(_QWORD *a1@<X8>)
{
  char *v2;
  clockid_t v3;
  uint64_t result;

  v2 = (char *)operator new(0x40uLL);
  result = _ZNSt3__120__shared_ptr_emplaceIN5kaldi5TimerENS_9allocatorIS2_EEEC2B8ne180100IJES4_Li0EEES4_DpOT_((uint64_t)v2, v3);
  *a1 = v2 + 24;
  a1[1] = v2;
  return result;
}

void sub_1AD8F7798(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t _ZNSt3__120__shared_ptr_emplaceIN5kaldi5TimerENS_9allocatorIS2_EEEC2B8ne180100IJES4_Li0EEES4_DpOT_(uint64_t a1, clockid_t a2)
{
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = &unk_1E5D41BF8;
  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 48) = 1;
  kaldi::Timer::Reset((kaldi::Timer *)(a1 + 24), a2);
  *(_QWORD *)(a1 + 56) = 0;
  return a1;
}

void sub_1AD8F77F0(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<kaldi::Timer>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D41BF8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<kaldi::Timer>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D41BF8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF44D190);
}

_QWORD *std::allocate_shared[abi:ne180100]<quasar::SpeechRequestData,std::allocator<quasar::SpeechRequestData>,std::shared_ptr<quasar::RunAsyncParams> &,decltype(nullptr),decltype(nullptr),std::vector<std::shared_ptr<quasar::LmeContainer>> const&,quasar::Location,std::shared_ptr<kaldi::Timer>,unsigned long,void>@<X0>(_QWORD *a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, _QWORD **a4@<X4>, _OWORD *a5@<X5>, __int128 *a6@<X6>, _QWORD *a7@<X7>, _QWORD *a8@<X8>)
{
  _QWORD *v16;
  _QWORD *result;

  v16 = operator new(0xF8uLL);
  result = std::__shared_ptr_emplace<quasar::SpeechRequestData>::__shared_ptr_emplace[abi:ne180100]<std::shared_ptr<quasar::RunAsyncParams> &,decltype(nullptr),decltype(nullptr),std::vector<std::shared_ptr<quasar::LmeContainer>> const&,quasar::Location,std::shared_ptr<kaldi::Timer>,unsigned long,std::allocator<quasar::SpeechRequestData>,0>(v16, a1, a2, a3, a4, a5, a6, a7);
  *a8 = v16 + 3;
  a8[1] = v16;
  return result;
}

void sub_1AD8F78E0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<quasar::SpeechRequestData>::__shared_ptr_emplace[abi:ne180100]<std::shared_ptr<quasar::RunAsyncParams> &,decltype(nullptr),decltype(nullptr),std::vector<std::shared_ptr<quasar::LmeContainer>> const&,quasar::Location,std::shared_ptr<kaldi::Timer>,unsigned long,std::allocator<quasar::SpeechRequestData>,0>(_QWORD *a1, _QWORD *a2, uint64_t a3, uint64_t a4, _QWORD **a5, _OWORD *a6, __int128 *a7, _QWORD *a8)
{
  char v10;

  a1[2] = 0;
  *a1 = &unk_1E5D431A0;
  a1[1] = 0;
  std::allocator<quasar::SpeechRequestData>::construct[abi:ne180100]<quasar::SpeechRequestData,std::shared_ptr<quasar::RunAsyncParams> &,decltype(nullptr),decltype(nullptr),std::vector<std::shared_ptr<quasar::LmeContainer>> const&,quasar::Location,std::shared_ptr<kaldi::Timer>,unsigned long>((uint64_t)&v10, (uint64_t)(a1 + 3), a2, a3, a4, a5, a6, a7, a8);
  return a1;
}

void sub_1AD8F795C(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<quasar::SpeechRequestData>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D431A0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<quasar::SpeechRequestData>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D431A0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF44D190);
}

void std::__shared_ptr_emplace<quasar::SpeechRequestData>::__on_zero_shared(uint64_t a1)
{
  quasar::SpeechRequestData::~SpeechRequestData((quasar::SpeechRequestData *)(a1 + 24));
}

void std::allocator<quasar::SpeechRequestData>::construct[abi:ne180100]<quasar::SpeechRequestData,std::shared_ptr<quasar::RunAsyncParams> &,decltype(nullptr),decltype(nullptr),std::vector<std::shared_ptr<quasar::LmeContainer>> const&,quasar::Location,std::shared_ptr<kaldi::Timer>,unsigned long>(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, uint64_t a5, _QWORD **a6, _OWORD *a7, __int128 *a8, _QWORD *a9)
{
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  __int128 v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  uint64_t v21;
  std::__shared_weak_count *v22;

  v21 = 0;
  v22 = 0;
  v19 = 0;
  v20 = 0;
  v18 = *a8;
  *(_QWORD *)a8 = 0;
  *((_QWORD *)a8 + 1) = 0;
  quasar::SpeechRequestData::SpeechRequestData(a2, a3, &v21, &v19, a6, a7, &v18, *a9 != 0, 1, 4uLL);
  v9 = (std::__shared_weak_count *)*((_QWORD *)&v18 + 1);
  if (*((_QWORD *)&v18 + 1))
  {
    v10 = (unint64_t *)(*((_QWORD *)&v18 + 1) + 8);
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  v12 = v20;
  if (v20)
  {
    p_shared_owners = (unint64_t *)&v20->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  v15 = v22;
  if (v22)
  {
    v16 = (unint64_t *)&v22->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
}

void sub_1AD8F7AE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v3;
  uint64_t v5;
  va_list va;
  uint64_t v7;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v5 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](v3 - 32);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<std::shared_ptr<quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>::__insert_with_size[abi:ne180100]<std::__wrap_iter<std::shared_ptr<quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>*>,std::__wrap_iter<std::shared_ptr<quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>*>>(uint64_t *a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t *v26;
  uint64_t *v27;
  uint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  _QWORD *v31;
  _QWORD v33[5];

  v5 = (_QWORD *)a2;
  if (a5 < 1)
    return v5;
  v11 = a1[2];
  v9 = (uint64_t)(a1 + 2);
  v10 = v11;
  v12 = *(_QWORD *)(v9 - 8);
  if (a5 > (uint64_t)(v11 - v12) >> 4)
  {
    v13 = *a1;
    v14 = a5 + ((uint64_t)(v12 - *a1) >> 4);
    if (v14 >> 60)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v15 = (a2 - v13) >> 4;
    v16 = v10 - v13;
    if (v16 >> 3 > v14)
      v14 = v16 >> 3;
    if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF0)
      v17 = 0xFFFFFFFFFFFFFFFLL;
    else
      v17 = v14;
    v33[4] = v9;
    if (v17)
      v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<int,unsigned long>>>(v9, v17);
    else
      v18 = 0;
    v26 = (uint64_t *)&v18[16 * v15];
    v33[0] = v18;
    v33[1] = v26;
    v33[3] = &v18[16 * v17];
    v27 = &v26[2 * a5];
    do
    {
      *v26 = *a3;
      v28 = a3[1];
      v26[1] = v28;
      if (v28)
      {
        v29 = (unint64_t *)(v28 + 8);
        do
          v30 = __ldxr(v29);
        while (__stxr(v30 + 1, v29));
      }
      v26 += 2;
      a3 += 2;
    }
    while (v26 != v27);
    v33[2] = v27;
    v5 = (_QWORD *)std::vector<std::shared_ptr<quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>::__swap_out_circular_buffer(a1, v33, v5);
    std::__split_buffer<std::shared_ptr<quasar::FeatureExtractor>>::~__split_buffer((uint64_t)v33);
    return v5;
  }
  v19 = (uint64_t)(v12 - a2) >> 4;
  if (v19 >= a5)
  {
    v20 = &a3[2 * a5];
LABEL_29:
    std::vector<std::shared_ptr<quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>::__move_range((uint64_t)a1, a2, v12, (char *)(a2 + 16 * a5));
    if (v20 != a3)
    {
      v31 = v5;
      do
      {
        std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::operator=[abi:ne180100](v31, a3);
        a3 += 2;
        v31 += 2;
      }
      while (a3 != v20);
    }
    return v5;
  }
  v20 = &a3[2 * v19];
  if (v20 == a4)
  {
    v22 = *(uint64_t **)(v9 - 8);
  }
  else
  {
    v21 = &a3[2 * v19];
    v22 = *(uint64_t **)(v9 - 8);
    do
    {
      *v22 = *v21;
      v23 = v21[1];
      v22[1] = v23;
      if (v23)
      {
        v24 = (unint64_t *)(v23 + 8);
        do
          v25 = __ldxr(v24);
        while (__stxr(v25 + 1, v24));
      }
      v21 += 2;
      v22 += 2;
    }
    while (v21 != a4);
  }
  a1[1] = (uint64_t)v22;
  if ((uint64_t)(v12 - a2) >= 1)
    goto LABEL_29;
  return v5;
}

void sub_1AD8F7CE4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::shared_ptr<quasar::FeatureExtractor>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::shared_ptr<quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>::__move_range(uint64_t result, uint64_t a2, unint64_t a3, char *a4)
{
  char *v4;
  char *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v4 = *(char **)(result + 8);
  v5 = (char *)(a2 + v4 - a4);
  v6 = v4;
  while ((unint64_t)v5 < a3)
  {
    *(_OWORD *)v6 = *(_OWORD *)v5;
    v6 += 16;
    *(_QWORD *)v5 = 0;
    *((_QWORD *)v5 + 1) = 0;
    v5 += 16;
  }
  *(_QWORD *)(result + 8) = v6;
  if (v4 != a4)
  {
    v7 = (uint64_t)(v4 - 16);
    v8 = 16 * ((v4 - a4) >> 4);
    v9 = a2 - 16;
    do
    {
      result = std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100](v7, (__int128 *)(v9 + v8));
      v7 -= 16;
      v8 -= 16;
    }
    while (v8);
  }
  return result;
}

uint64_t std::vector<std::shared_ptr<quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>::__swap_out_circular_buffer(_QWORD *a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t result;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  __int128 v8;
  _QWORD *v9;
  _OWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;

  result = a2[1];
  v5 = (_QWORD *)*a1;
  v6 = result;
  if ((_QWORD *)*a1 != a3)
  {
    v7 = a3;
    v6 = a2[1];
    do
    {
      v8 = *((_OWORD *)v7 - 1);
      v7 -= 2;
      *(_OWORD *)(v6 - 16) = v8;
      v6 -= 16;
      *v7 = 0;
      v7[1] = 0;
    }
    while (v7 != v5);
  }
  a2[1] = v6;
  v9 = (_QWORD *)a1[1];
  v10 = (_OWORD *)a2[2];
  if (v9 != a3)
  {
    do
    {
      *v10++ = *(_OWORD *)a3;
      *a3 = 0;
      a3[1] = 0;
      a3 += 2;
    }
    while (a3 != v9);
    v6 = a2[1];
  }
  a2[2] = v10;
  v11 = (_QWORD *)*a1;
  *a1 = v6;
  a2[1] = v11;
  v12 = a1[1];
  a1[1] = a2[2];
  a2[2] = v12;
  v13 = a1[2];
  a1[2] = a2[3];
  a2[3] = v13;
  *a2 = a2[1];
  return result;
}

void quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::getOriginStr(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  if (*(_BYTE *)(a1 + 48))
  {
    if (*(char *)(a1 + 47) < 0)
    {
      std::string::__init_copy_ctor_external(a2, *(const std::string::value_type **)(a1 + 24), *(_QWORD *)(a1 + 32));
    }
    else
    {
      *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)(a1 + 24);
      a2->__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 40);
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(a2, "masterlm");
  }
}

uint64_t std::optional<std::string>::operator=[abi:ne180100]<std::string,void>(uint64_t a1, __int128 *a2)
{
  __int128 v4;
  __int128 v5;

  if (*(_BYTE *)(a1 + 24))
  {
    if (*(char *)(a1 + 23) < 0)
      operator delete(*(void **)a1);
    v4 = *a2;
    *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
    *(_OWORD *)a1 = v4;
    *((_BYTE *)a2 + 23) = 0;
    *(_BYTE *)a2 = 0;
  }
  else
  {
    v5 = *a2;
    *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
    *(_OWORD *)a1 = v5;
    *((_QWORD *)a2 + 1) = 0;
    *((_QWORD *)a2 + 2) = 0;
    *(_QWORD *)a2 = 0;
    *(_BYTE *)(a1 + 24) = 1;
  }
  return a1;
}

void std::__function::__func<quasar::FstLmScorer::computeLmScore(quasar::FstLmScorerOptions const&,std::vector<std::shared_ptr<quasar::LmeContainer>> const&,quasar::Location const&,std::vector<std::string> const&,quasar::LmInfo &,std::vector<int> const&,std::vector<std::string> const&)::$_0,std::allocator<quasar::FstLmScorer::computeLmScore(quasar::FstLmScorerOptions const&,std::vector<std::shared_ptr<quasar::LmeContainer>> const&,quasar::Location const&,std::vector<std::string> const&,quasar::LmInfo &,std::vector<int> const&,std::vector<std::string> const&)::$_0>,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> ()(std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> const&)>::~__func()
{
  JUMPOUT(0x1AF44D190);
}

_QWORD *std::__function::__func<quasar::FstLmScorer::computeLmScore(quasar::FstLmScorerOptions const&,std::vector<std::shared_ptr<quasar::LmeContainer>> const&,quasar::Location const&,std::vector<std::string> const&,quasar::LmInfo &,std::vector<int> const&,std::vector<std::string> const&)::$_0,std::allocator<quasar::FstLmScorer::computeLmScore(quasar::FstLmScorerOptions const&,std::vector<std::shared_ptr<quasar::LmeContainer>> const&,quasar::Location const&,std::vector<std::string> const&,quasar::LmInfo &,std::vector<int> const&,std::vector<std::string> const&)::$_0>,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> ()(std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> const&)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E5D3F560;
  return result;
}

void std::__function::__func<quasar::FstLmScorer::computeLmScore(quasar::FstLmScorerOptions const&,std::vector<std::shared_ptr<quasar::LmeContainer>> const&,quasar::Location const&,std::vector<std::string> const&,quasar::LmInfo &,std::vector<int> const&,std::vector<std::string> const&)::$_0,std::allocator<quasar::FstLmScorer::computeLmScore(quasar::FstLmScorerOptions const&,std::vector<std::shared_ptr<quasar::LmeContainer>> const&,quasar::Location const&,std::vector<std::string> const&,quasar::LmInfo &,std::vector<int> const&,std::vector<std::string> const&)::$_0>,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> ()(std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E5D3F560;
}

void std::__function::__func<quasar::FstLmScorer::computeLmScore(quasar::FstLmScorerOptions const&,std::vector<std::shared_ptr<quasar::LmeContainer>> const&,quasar::Location const&,std::vector<std::string> const&,quasar::LmInfo &,std::vector<int> const&,std::vector<std::string> const&)::$_0,std::allocator<quasar::FstLmScorer::computeLmScore(quasar::FstLmScorerOptions const&,std::vector<std::shared_ptr<quasar::LmeContainer>> const&,quasar::Location const&,std::vector<std::string> const&,quasar::LmInfo &,std::vector<int> const&,std::vector<std::string> const&)::$_0>,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> ()(std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> const&)>::operator()(_QWORD *a1@<X1>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = a1[1];
  *a2 = *a1;
  a2[1] = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
}

uint64_t std::__function::__func<quasar::FstLmScorer::computeLmScore(quasar::FstLmScorerOptions const&,std::vector<std::shared_ptr<quasar::LmeContainer>> const&,quasar::Location const&,std::vector<std::string> const&,quasar::LmInfo &,std::vector<int> const&,std::vector<std::string> const&)::$_0,std::allocator<quasar::FstLmScorer::computeLmScore(quasar::FstLmScorerOptions const&,std::vector<std::shared_ptr<quasar::LmeContainer>> const&,quasar::Location const&,std::vector<std::string> const&,quasar::LmInfo &,std::vector<int> const&,std::vector<std::string> const&)::$_0>,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> ()(std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<quasar::FstLmScorer::computeLmScore(quasar::FstLmScorerOptions const&,std::vector<std::shared_ptr<quasar::LmeContainer>> const&,quasar::Location const&,std::vector<std::string> const&,quasar::LmInfo &,std::vector<int> const&,std::vector<std::string> const&)::$_0,std::allocator<quasar::FstLmScorer::computeLmScore(quasar::FstLmScorerOptions const&,std::vector<std::shared_ptr<quasar::LmeContainer>> const&,quasar::Location const&,std::vector<std::string> const&,quasar::LmInfo &,std::vector<int> const&,std::vector<std::string> const&)::$_0>,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> ()(std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> const&)>::target_type()
{
}

void std::__function::__func<quasar::FstLmScorer::computeLmScore(quasar::FstLmScorerOptions const&,std::vector<std::shared_ptr<quasar::LmeContainer>> const&,quasar::Location const&,std::vector<std::string> const&,quasar::LmInfo &,std::vector<int> const&,std::vector<std::string> const&)::$_1,std::allocator<quasar::FstLmScorer::computeLmScore(quasar::FstLmScorerOptions const&,std::vector<std::shared_ptr<quasar::LmeContainer>> const&,quasar::Location const&,std::vector<std::string> const&,quasar::LmInfo &,std::vector<int> const&,std::vector<std::string> const&)::$_1>,std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase> ()(std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase> const&)>::~__func()
{
  JUMPOUT(0x1AF44D190);
}

_QWORD *std::__function::__func<quasar::FstLmScorer::computeLmScore(quasar::FstLmScorerOptions const&,std::vector<std::shared_ptr<quasar::LmeContainer>> const&,quasar::Location const&,std::vector<std::string> const&,quasar::LmInfo &,std::vector<int> const&,std::vector<std::string> const&)::$_1,std::allocator<quasar::FstLmScorer::computeLmScore(quasar::FstLmScorerOptions const&,std::vector<std::shared_ptr<quasar::LmeContainer>> const&,quasar::Location const&,std::vector<std::string> const&,quasar::LmInfo &,std::vector<int> const&,std::vector<std::string> const&)::$_1>,std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase> ()(std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase> const&)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E5D3F5B8;
  return result;
}

void std::__function::__func<quasar::FstLmScorer::computeLmScore(quasar::FstLmScorerOptions const&,std::vector<std::shared_ptr<quasar::LmeContainer>> const&,quasar::Location const&,std::vector<std::string> const&,quasar::LmInfo &,std::vector<int> const&,std::vector<std::string> const&)::$_1,std::allocator<quasar::FstLmScorer::computeLmScore(quasar::FstLmScorerOptions const&,std::vector<std::shared_ptr<quasar::LmeContainer>> const&,quasar::Location const&,std::vector<std::string> const&,quasar::LmInfo &,std::vector<int> const&,std::vector<std::string> const&)::$_1>,std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase> ()(std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase> const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E5D3F5B8;
}

void std::__function::__func<quasar::FstLmScorer::computeLmScore(quasar::FstLmScorerOptions const&,std::vector<std::shared_ptr<quasar::LmeContainer>> const&,quasar::Location const&,std::vector<std::string> const&,quasar::LmInfo &,std::vector<int> const&,std::vector<std::string> const&)::$_1,std::allocator<quasar::FstLmScorer::computeLmScore(quasar::FstLmScorerOptions const&,std::vector<std::shared_ptr<quasar::LmeContainer>> const&,quasar::Location const&,std::vector<std::string> const&,quasar::LmInfo &,std::vector<int> const&,std::vector<std::string> const&)::$_1>,std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase> ()(std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase> const&)>::operator()(_QWORD *a1@<X1>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = a1[1];
  *a2 = *a1;
  a2[1] = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
}

uint64_t std::__function::__func<quasar::FstLmScorer::computeLmScore(quasar::FstLmScorerOptions const&,std::vector<std::shared_ptr<quasar::LmeContainer>> const&,quasar::Location const&,std::vector<std::string> const&,quasar::LmInfo &,std::vector<int> const&,std::vector<std::string> const&)::$_1,std::allocator<quasar::FstLmScorer::computeLmScore(quasar::FstLmScorerOptions const&,std::vector<std::shared_ptr<quasar::LmeContainer>> const&,quasar::Location const&,std::vector<std::string> const&,quasar::LmInfo &,std::vector<int> const&,std::vector<std::string> const&)::$_1>,std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase> ()(std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase> const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<quasar::FstLmScorer::computeLmScore(quasar::FstLmScorerOptions const&,std::vector<std::shared_ptr<quasar::LmeContainer>> const&,quasar::Location const&,std::vector<std::string> const&,quasar::LmInfo &,std::vector<int> const&,std::vector<std::string> const&)::$_1,std::allocator<quasar::FstLmScorer::computeLmScore(quasar::FstLmScorerOptions const&,std::vector<std::shared_ptr<quasar::LmeContainer>> const&,quasar::Location const&,std::vector<std::string> const&,quasar::LmInfo &,std::vector<int> const&,std::vector<std::string> const&)::$_1>,std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase> ()(std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase> const&)>::target_type()
{
}

uint64_t quasar::QuasarG2PBase::QuasarG2PBase(uint64_t a1, uint64_t *a2, uint64_t *a3, __int128 *a4, quasar::SystemConfig *a5, int a6, uint64_t a7, __int128 *a8)
{
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t Ptree;
  uint64_t Int;
  int v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  void **v29;
  __int128 v30;
  const std::string *SpeechModelInfo;
  uint64_t v32;
  void *v34[2];
  char v35;
  std::string __p;
  char v37;
  std::string v38;
  uint64_t v39;
  std::__shared_weak_count *v40;
  uint64_t v41;
  std::__shared_weak_count *v42;

  v14 = (std::__shared_weak_count *)a2[1];
  v41 = *a2;
  v42 = v14;
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldxr(p_shared_owners);
    while (__stxr(v16 + 1, p_shared_owners));
  }
  v17 = (std::__shared_weak_count *)a3[1];
  v39 = *a3;
  v40 = v17;
  if (v17)
  {
    v18 = (unint64_t *)&v17->__shared_owners_;
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 1, v18));
  }
  Ptree = quasar::SystemConfig::getPtree((uint64_t)a5, a7);
  std::string::basic_string[abi:ne180100]<0>(&__p, "max-prons");
  Int = quasar::PTree::getIntOptional<int>(Ptree, (uint64_t)&__p);
  if ((Int & 0xFF00000000) != 0)
    v22 = Int;
  else
    v22 = a6;
  quasar::G2P::G2P(a1, &v41, &v39, a4, v22);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v23 = v40;
  if (v40)
  {
    v24 = (unint64_t *)&v40->__shared_owners_;
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  v26 = v42;
  if (v42)
  {
    v27 = (unint64_t *)&v42->__shared_owners_;
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
  *(_QWORD *)a1 = off_1E5D35008;
  v29 = (void **)(a1 + 304);
  *(_QWORD *)(a1 + 312) = 0;
  *(_QWORD *)(a1 + 320) = 0;
  *(_QWORD *)(a1 + 304) = 0;
  if (*((char *)a8 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 328), *(const std::string::value_type **)a8, *((_QWORD *)a8 + 1));
  }
  else
  {
    v30 = *a8;
    *(_QWORD *)(a1 + 344) = *((_QWORD *)a8 + 2);
    *(_OWORD *)(a1 + 328) = v30;
  }
  SpeechModelInfo = (const std::string *)quasar::SystemConfig::getSpeechModelInfo(a5);
  std::string::operator=((std::string *)(a1 + 72), SpeechModelInfo + 6);
  *(_DWORD *)(a1 + 96) = *(_DWORD *)(quasar::SystemConfig::getSpeechModelInfo(a5) + 264);
  v32 = quasar::SystemConfig::getPtree((uint64_t)a5, a7);
  std::string::basic_string[abi:ne180100]<0>(v34, "model-file");
  quasar::PTree::getStringOptional(v32, (uint64_t)v34, &__p);
  if (v37)
  {
    v38 = __p;
    memset(&__p, 0, sizeof(__p));
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&v38, "");
  }
  if (*(char *)(a1 + 327) < 0)
    operator delete(*v29);
  *(_OWORD *)v29 = *(_OWORD *)&v38.__r_.__value_.__l.__data_;
  *(_QWORD *)(a1 + 320) = *((_QWORD *)&v38.__r_.__value_.__l + 2);
  *((_BYTE *)&v38.__r_.__value_.__s + 23) = 0;
  v38.__r_.__value_.__s.__data_[0] = 0;
  if (v37 && SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (v35 < 0)
    operator delete(v34[0]);
  return a1;
}

void sub_1AD8F82C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  char *v27;
  void **v28;
  void **v29;

  if (a22 && a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  if (v27[351] < 0)
    operator delete(*v28);
  if (v27[327] < 0)
    operator delete(*v29);
  quasar::G2P::~G2P((quasar::G2P *)v27);
  _Unwind_Resume(a1);
}

uint64_t quasar::G2P::G2P(uint64_t a1, _QWORD *a2, _QWORD *a3, __int128 *a4, int a5)
{
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  __int128 v15;
  std::locale v17;

  *(_QWORD *)a1 = off_1E5D3B690;
  *(_QWORD *)(a1 + 8) = *a2;
  v8 = a2[1];
  *(_QWORD *)(a1 + 16) = v8;
  if (v8)
  {
    v9 = (unint64_t *)(v8 + 8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  *(_QWORD *)(a1 + 24) = *a3;
  v11 = a3[1];
  *(_QWORD *)(a1 + 32) = v11;
  if (v11)
  {
    v12 = (unint64_t *)(v11 + 8);
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  v14 = operator new();
  *(_DWORD *)v14 = a5;
  *(_QWORD *)(v14 + 24) = 0;
  *(_QWORD *)(v14 + 16) = 0;
  *(_QWORD *)(v14 + 8) = v14 + 16;
  *(_QWORD *)(a1 + 40) = v14;
  if (*((char *)a4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 48), *(const std::string::value_type **)a4, *((_QWORD *)a4 + 1));
  }
  else
  {
    v15 = *a4;
    *(_QWORD *)(a1 + 64) = *((_QWORD *)a4 + 2);
    *(_OWORD *)(a1 + 48) = v15;
  }
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 72), "");
  *(_DWORD *)(a1 + 96) = 0;
  *(_DWORD *)(a1 + 100) = a5;
  MEMORY[0x1AF44CFA4](a1 + 104);
  std::wstring_convert<std::codecvt_utf8_utf16<wchar_t,1114111ul,(std::codecvt_mode)0>,wchar_t,std::allocator<wchar_t>,std::allocator<char>>::wstring_convert[abi:ne180100](a1 + 112);
  MEMORY[0x1AF44CF8C](&v17, "");
  std::locale::operator=((std::locale *)(a1 + 104), &v17);
  std::locale::~locale(&v17);
  return a1;
}

void sub_1AD8F84D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  std::unique_ptr<quasar::PronCombinator>::reset[abi:ne180100]((uint64_t *)(v11 + 40), 0);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](v12);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](v10);
  _Unwind_Resume(a1);
}

uint64_t quasar::QuasarG2PBase::tokenIsLegal(quasar::QuasarG2PBase *this, const Token *a2, BOOL *a3)
{
  unint64_t size;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;
  std::string::size_type v9;
  std::vector<std::wstring> v11;
  std::string __p;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  void **v30;

  *a3 = 0;
  size = *((unsigned __int8 *)&a2->tokenName.__r_.__value_.var0.var1 + 23);
  if ((size & 0x80u) != 0)
    size = a2->tokenName.__r_.__value_.var0.var1.__size_;
  if (size)
  {
    (*(void (**)(std::string *__return_ptr))(*(_QWORD *)this + 64))(&__p);
    memset(&v11, 0, sizeof(v11));
    v6 = (*(uint64_t (**)(quasar::QuasarG2PBase *))(*(_QWORD *)this + 72))(this);
    if (v6)
    {
      tokenize_entry(&__p, (uint64_t)this + 328, v6, a3, (uint64_t *)&v13);
      std::vector<std::string>::__vdeallocate(&v11);
      *(_OWORD *)&v11.__begin_ = v13;
      v11.__end_cap_.__value_ = (std::wstring *)v14;
      *(_QWORD *)&v14 = 0;
      v13 = 0uLL;
      v30 = (void **)&v13;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v30);
      v7 = v11.__begin_ == v11.__end_;
    }
    else
    {
      v9 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v9 = __p.__r_.__value_.__l.__size_;
      v7 = v9 == 0;
    }
    v8 = !v7;
    *(_QWORD *)&v13 = &v11;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v13);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  else
  {
    if (quasar::gLogLevel >= 4)
    {
      v28 = 0u;
      v29 = 0u;
      v26 = 0u;
      v27 = 0u;
      v24 = 0u;
      v25 = 0u;
      v22 = 0u;
      v23 = 0u;
      v20 = 0u;
      v21 = 0u;
      v18 = 0u;
      v19 = 0u;
      v16 = 0u;
      v17 = 0u;
      v14 = 0u;
      v15 = 0u;
      v13 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v13);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v13, (uint64_t)"Empty token received", 20);
      quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&v13);
    }
    return 0;
  }
  return v8;
}

void sub_1AD8F8710(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)va);
  _Unwind_Resume(a1);
}

void sub_1AD8F8724(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, __int128 a18, __int128 a19, __int128 a20,__int128 a21,__int128 a22,__int128 a23,__int128 a24,__int128 a25,__int128 a26,__int128 a27,__int128 a28,__int128 a29,__int128 a30,__int128 a31,__int128 a32,__int128 a33,__int128 a34)
{
  void *v34;
  void *v35;
  _QWORD *v36;
  const char *v37;
  size_t v38;
  void *v39;
  void *v40;
  _QWORD *v41;
  const char *v42;
  size_t v43;
  void *v44;
  void *v45;
  _QWORD *v46;
  const char *v47;
  size_t v48;
  void *v49;
  void *v50;
  const char *v51;
  size_t v52;

  switch(a2)
  {
    case 4:
      v34 = __cxa_begin_catch(a1);
      if (quasar::gLogLevel >= 2)
      {
        v35 = v34;
        a33 = 0u;
        a34 = 0u;
        a31 = 0u;
        a32 = 0u;
        a29 = 0u;
        a30 = 0u;
        a27 = 0u;
        a28 = 0u;
        a25 = 0u;
        a26 = 0u;
        a23 = 0u;
        a24 = 0u;
        a21 = 0u;
        a22 = 0u;
        a19 = 0u;
        a20 = 0u;
        a18 = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&a18);
        v36 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&a18, (uint64_t)"Not enough space, ", 18);
        v37 = (const char *)(*(uint64_t (**)(void *))(*(_QWORD *)v35 + 16))(v35);
        v38 = strlen(v37);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)v37, v38);
        quasar::QuasarWarnMessage::~QuasarWarnMessage((quasar::QuasarWarnMessage *)&a18);
      }
      break;
    case 3:
      v39 = __cxa_begin_catch(a1);
      if (quasar::gLogLevel >= 2)
      {
        v40 = v39;
        a33 = 0u;
        a34 = 0u;
        a31 = 0u;
        a32 = 0u;
        a29 = 0u;
        a30 = 0u;
        a27 = 0u;
        a28 = 0u;
        a25 = 0u;
        a26 = 0u;
        a23 = 0u;
        a24 = 0u;
        a21 = 0u;
        a22 = 0u;
        a19 = 0u;
        a20 = 0u;
        a18 = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&a18);
        v41 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&a18, (uint64_t)"Invalid UTF-8, ", 15);
        v42 = (const char *)(*(uint64_t (**)(void *))(*(_QWORD *)v40 + 16))(v40);
        v43 = strlen(v42);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v41, (uint64_t)v42, v43);
        quasar::QuasarWarnMessage::~QuasarWarnMessage((quasar::QuasarWarnMessage *)&a18);
      }
      break;
    case 2:
      v44 = __cxa_begin_catch(a1);
      if (quasar::gLogLevel >= 2)
      {
        v45 = v44;
        a33 = 0u;
        a34 = 0u;
        a31 = 0u;
        a32 = 0u;
        a29 = 0u;
        a30 = 0u;
        a27 = 0u;
        a28 = 0u;
        a25 = 0u;
        a26 = 0u;
        a23 = 0u;
        a24 = 0u;
        a21 = 0u;
        a22 = 0u;
        a19 = 0u;
        a20 = 0u;
        a18 = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&a18);
        v46 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&a18, (uint64_t)"Invalid code point, ", 20);
        v47 = (const char *)(*(uint64_t (**)(void *))(*(_QWORD *)v45 + 16))(v45);
        v48 = strlen(v47);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v46, (uint64_t)v47, v48);
        quasar::QuasarWarnMessage::~QuasarWarnMessage((quasar::QuasarWarnMessage *)&a18);
      }
      break;
    case 1:
      v49 = __cxa_begin_catch(a1);
      if (quasar::gLogLevel >= 2)
      {
        v50 = v49;
        a33 = 0u;
        a34 = 0u;
        a31 = 0u;
        a32 = 0u;
        a29 = 0u;
        a30 = 0u;
        a27 = 0u;
        a28 = 0u;
        a25 = 0u;
        a26 = 0u;
        a23 = 0u;
        a24 = 0u;
        a21 = 0u;
        a22 = 0u;
        a19 = 0u;
        a20 = 0u;
        a18 = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&a18);
        v51 = (const char *)(*(uint64_t (**)(void *))(*(_QWORD *)v50 + 16))(v50);
        v52 = strlen(v51);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&a18, (uint64_t)v51, v52);
        quasar::QuasarWarnMessage::~QuasarWarnMessage((quasar::QuasarWarnMessage *)&a18);
      }
      break;
    default:
      *(_QWORD *)&a18 = &a9;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a18);
      if (a17 < 0)
        operator delete(__p);
      JUMPOUT(0x1AD8F871CLL);
  }
  __cxa_end_catch();
  JUMPOUT(0x1AD8F86D8);
}

void quasar::QuasarG2PBase::normalizeToken(const std::locale *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  std::pair<const wchar_t *, const wchar_t *> v5;
  unsigned __int8 v6;
  std::string::size_type size;
  __int32 *v8;
  int v9;
  std::string::size_type v10;
  std::string *v11;
  unsigned __int8 v12;
  unsigned __int8 v13;
  std::string::size_type v14;
  __int32 *v15;
  int v16;
  std::string::size_type v17;
  std::string *v18;
  std::string::size_type v19;
  std::__wrap_iter<const char *> v20;
  std::__wrap_iter<const char *> v21;
  unsigned __int8 v22;
  unsigned __int8 v23;
  std::string::size_type v24;
  __int32 *p_matches;
  int v26;
  std::string::size_type v27;
  std::string *v28;
  std::string::size_type v29;
  std::__wrap_iter<const char *> v30;
  std::__wrap_iter<const char *> v31;
  unsigned __int8 v32;
  const std::locale *v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  std::string::size_type v37;
  std::string *v38;
  void **v39;
  std::string *v40;
  uint64_t v41;
  size_t v42;
  size_t *v43;
  std::string *v44;
  char v45;
  std::string::size_type v46;
  std::string *v47;
  unsigned __int8 v48;
  unsigned __int8 v49;
  std::string::size_type v50;
  __int32 *v51;
  int v52;
  std::string::size_type v53;
  std::string *v54;
  std::string::size_type v55;
  std::__wrap_iter<const char *> v56;
  std::__wrap_iter<const char *> v57;
  unsigned __int8 v58;
  std::string::size_type v59;
  std::__wrap_iter<const char *> v60;
  std::__wrap_iter<const char *> v61;
  unsigned __int8 v62;
  std::string::size_type v63;
  std::__wrap_iter<const char *> v64;
  std::__wrap_iter<const char *> v65;
  unsigned __int8 v66;
  std::string::size_type v67;
  std::__wrap_iter<const char *> v68;
  std::__wrap_iter<const char *> v69;
  int v70;
  std::regex_traits<char> *v71;
  std::regex_traits<char> *v72;
  std::regex_traits<char> *v73;
  std::regex_traits<char> *v74;
  std::regex_traits<char> *v75;
  std::regex_traits<char> *v76;
  std::regex_traits<char> *v77;
  std::regex_traits<char> *v78;
  std::regex_traits<char> *v79;
  std::regex_traits<char> *v80;
  std::regex_traits<char> *v81;
  uint64_t v82[2];
  std::string v83;
  uint64_t v84[3];
  size_t __n[2];
  std::sub_match<const wchar_t *> *v86;
  void *__s1[2];
  std::sub_match<const wchar_t *> *value;
  std::match_results<const wchar_t *> __p;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  std::vector<std::wssub_match> v100[2];
  uint64_t v101;
  uint64_t v102;
  char v103;
  uint64_t v104;
  uint64_t v105;
  char v106;
  char v107;
  uint64_t v108;
  std::string matches;

  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&matches, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    matches = *(std::string *)a2;
  quasar::trim(&matches);
  if (SHIBYTE(matches.__r_.__value_.__r.__words[2]) < 0)
  {
    if (matches.__r_.__value_.__l.__size_)
      goto LABEL_6;
LABEL_24:
    std::string::basic_string[abi:ne180100]<0>(a3, "");
    goto LABEL_170;
  }
  if (!*((_BYTE *)&matches.__r_.__value_.__s + 23))
    goto LABEL_24;
LABEL_6:
  v101 = 0;
  v102 = 0;
  v103 = 0;
  v104 = 0;
  v105 = 0;
  v106 = 0;
  v107 = 0;
  v108 = 0;
  v5 = (std::pair<const wchar_t *, const wchar_t *>)0;
  memset(v100, 0, 41);
  if ((v6 & 1) == 0)
  {
    v5 = (std::pair<const wchar_t *, const wchar_t *>)0;
    if (v70)
    {
      v71 = (std::regex_traits<char> *)operator new();
      std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100](v71, "\\|", 0);
      quasar::QuasarG2PBase::normalizeToken(std::string const&)::PATTERN_1 = (uint64_t)v71;
      v5 = (std::pair<const wchar_t *, const wchar_t *>)0;
    }
  }
  memset(&__p.__prefix_, 0, 17);
  memset(&__p.__suffix_, 0, 17);
  __p.__ready_ = 0;
  __p.__position_start_ = 0;
  *(std::pair<const wchar_t *, const wchar_t *> *)&__p.__matches_.__begin_ = v5;
  *(std::pair<const wchar_t *, const wchar_t *> *)&__p.__matches_.__end_cap_.__value_ = v5;
  *(std::pair<const wchar_t *, const wchar_t *> *)((char *)&__p.__unmatched_.std::pair<const wchar_t *, const wchar_t *>
                                                 + 1) = v5;
  size = HIBYTE(matches.__r_.__value_.__r.__words[2]);
  if ((matches.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v8 = (__int32 *)&matches;
  else
    v8 = (__int32 *)matches.__r_.__value_.__r.__words[0];
  if ((matches.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = matches.__r_.__value_.__l.__size_;
  v9 = std::basic_regex<char,std::regex_traits<char>>::__search<std::allocator<std::sub_match<char const*>>>(quasar::QuasarG2PBase::normalizeToken(std::string const&)::PATTERN_1, v8, (__int32 *)((char *)v8 + size), &__p, 0);
  v10 = HIBYTE(matches.__r_.__value_.__r.__words[2]);
  if ((matches.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v11 = &matches;
  else
    v11 = (std::string *)matches.__r_.__value_.__r.__words[0];
  if ((matches.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v10 = matches.__r_.__value_.__l.__size_;
  std::match_results<std::__wrap_iter<char const*>>::__assign[abi:ne180100]<char const*,std::allocator<std::sub_match<char const*>>>(v100, (uint64_t)v11, (std::sub_match<std::__wrap_iter<const wchar_t *>> *)((char *)v11 + v10), (uint64_t *)&__p, 0);
  if (__p.__matches_.__begin_)
  {
    __p.__matches_.__end_ = __p.__matches_.__begin_;
    operator delete(__p.__matches_.__begin_);
  }
  if (!v9)
  {
    if ((v12 & 1) == 0
    {
      v72 = (std::regex_traits<char> *)operator new();
      std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100](v72, "[a-zA-Z]\\.[a-zA-Z]", 0);
      quasar::QuasarG2PBase::normalizeToken(std::string const&)::PATTERN_2 = (uint64_t)v72;
    }
    if ((v13 & 1) == 0
    {
      v73 = (std::regex_traits<char> *)operator new();
      std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100](v73, "\\.", 0);
      quasar::QuasarG2PBase::normalizeToken(std::string const&)::PATTERN_3 = (uint64_t)v73;
    }
    memset(&__p.__prefix_, 0, 17);
    memset(&__p.__suffix_, 0, 17);
    __p.__ready_ = 0;
    __p.__position_start_ = 0;
    memset(&__p, 0, 41);
    v14 = HIBYTE(matches.__r_.__value_.__r.__words[2]);
    if ((matches.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v15 = (__int32 *)&matches;
    else
      v15 = (__int32 *)matches.__r_.__value_.__r.__words[0];
    if ((matches.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v14 = matches.__r_.__value_.__l.__size_;
    v16 = std::basic_regex<char,std::regex_traits<char>>::__search<std::allocator<std::sub_match<char const*>>>(quasar::QuasarG2PBase::normalizeToken(std::string const&)::PATTERN_2, v15, (__int32 *)((char *)v15 + v14), &__p, 0);
    v17 = HIBYTE(matches.__r_.__value_.__r.__words[2]);
    if ((matches.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v18 = &matches;
    else
      v18 = (std::string *)matches.__r_.__value_.__r.__words[0];
    if ((matches.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v17 = matches.__r_.__value_.__l.__size_;
    std::match_results<std::__wrap_iter<char const*>>::__assign[abi:ne180100]<char const*,std::allocator<std::sub_match<char const*>>>(v100, (uint64_t)v18, (std::sub_match<std::__wrap_iter<const wchar_t *>> *)((char *)v18 + v17), (uint64_t *)&__p, 0);
    if (__p.__matches_.__begin_)
    {
      __p.__matches_.__end_ = __p.__matches_.__begin_;
      operator delete(__p.__matches_.__begin_);
    }
    if (v16)
    {
      memset(&__p, 0, 24);
      v19 = HIBYTE(matches.__r_.__value_.__r.__words[2]);
      if ((matches.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v20.__i_ = (std::__wrap_iter<const char *>::iterator_type)&matches;
      else
        v20.__i_ = (std::__wrap_iter<const char *>::iterator_type)matches.__r_.__value_.__r.__words[0];
      if ((matches.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v19 = matches.__r_.__value_.__l.__size_;
      v21.__i_ = &v20.__i_[v19];
      std::regex_replace[abi:ne180100]<std::back_insert_iterator<std::string>,std::__wrap_iter<char const*>,std::regex_traits<char>,char>((std::string *)&__p, v20, v21, (const std::regex_iterator<std::__wrap_iter<const char *>, char>::regex_type *)quasar::QuasarG2PBase::normalizeToken(std::string const&)::PATTERN_3, "_", 0);
      if (SHIBYTE(matches.__r_.__value_.__r.__words[2]) < 0)
        operator delete(matches.__r_.__value_.__l.__data_);
      matches = (std::string)__p.__matches_;
    }
    if ((v22 & 1) == 0
    {
      v74 = (std::regex_traits<char> *)operator new();
      std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100](v74, "[a-zA-Z]-[a-zA-Z]", 0);
      quasar::QuasarG2PBase::normalizeToken(std::string const&)::PATTERN_4 = (uint64_t)v74;
    }
    if ((v23 & 1) == 0
    {
      v75 = (std::regex_traits<char> *)operator new();
      std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100](v75, "-", 0);
      quasar::QuasarG2PBase::normalizeToken(std::string const&)::PATTERN_5 = (uint64_t)v75;
    }
    memset(&__p.__prefix_, 0, 17);
    memset(&__p.__suffix_, 0, 17);
    __p.__ready_ = 0;
    __p.__position_start_ = 0;
    memset(&__p, 0, 41);
    v24 = HIBYTE(matches.__r_.__value_.__r.__words[2]);
    if ((matches.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_matches = (__int32 *)&matches;
    else
      p_matches = (__int32 *)matches.__r_.__value_.__r.__words[0];
    if ((matches.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v24 = matches.__r_.__value_.__l.__size_;
    v26 = std::basic_regex<char,std::regex_traits<char>>::__search<std::allocator<std::sub_match<char const*>>>(quasar::QuasarG2PBase::normalizeToken(std::string const&)::PATTERN_4, p_matches, (__int32 *)((char *)p_matches + v24), &__p, 0);
    v27 = HIBYTE(matches.__r_.__value_.__r.__words[2]);
    if ((matches.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v28 = &matches;
    else
      v28 = (std::string *)matches.__r_.__value_.__r.__words[0];
    if ((matches.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v27 = matches.__r_.__value_.__l.__size_;
    std::match_results<std::__wrap_iter<char const*>>::__assign[abi:ne180100]<char const*,std::allocator<std::sub_match<char const*>>>(v100, (uint64_t)v28, (std::sub_match<std::__wrap_iter<const wchar_t *>> *)((char *)v28 + v27), (uint64_t *)&__p, 0);
    if (__p.__matches_.__begin_)
    {
      __p.__matches_.__end_ = __p.__matches_.__begin_;
      operator delete(__p.__matches_.__begin_);
    }
    if (v26)
    {
      memset(&__p, 0, 24);
      v29 = HIBYTE(matches.__r_.__value_.__r.__words[2]);
      if ((matches.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v30.__i_ = (std::__wrap_iter<const char *>::iterator_type)&matches;
      else
        v30.__i_ = (std::__wrap_iter<const char *>::iterator_type)matches.__r_.__value_.__r.__words[0];
      if ((matches.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v29 = matches.__r_.__value_.__l.__size_;
      v31.__i_ = &v30.__i_[v29];
      std::regex_replace[abi:ne180100]<std::back_insert_iterator<std::string>,std::__wrap_iter<char const*>,std::regex_traits<char>,char>((std::string *)&__p, v30, v31, (const std::regex_iterator<std::__wrap_iter<const char *>, char>::regex_type *)quasar::QuasarG2PBase::normalizeToken(std::string const&)::PATTERN_5, "_", 0);
      if (SHIBYTE(matches.__r_.__value_.__r.__words[2]) < 0)
        operator delete(matches.__r_.__value_.__l.__data_);
      matches = (std::string)__p.__matches_;
    }
    if ((v32 & 1) == 0
    {
      v76 = (std::regex_traits<char> *)operator new();
      std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100](v76, "\\d", 0);
      quasar::QuasarG2PBase::normalizeToken(std::string const&)::PATTERN_6 = (uint64_t)v76;
    }
    std::string::basic_string[abi:ne180100]<0>(__s1, "");
    std::string::basic_string[abi:ne180100]<0>(__n, "");
    v33 = a1 + 13;
    v34 = (uint64_t)&a1[14];
    quasar::toUpper((uint64_t)&matches, v33, v34, (std::string *)&__p);
    if (SHIBYTE(value) < 0)
      operator delete(__s1[0]);
    *(_OWORD *)__s1 = *(_OWORD *)&__p.__matches_.__begin_;
    value = __p.__matches_.__end_cap_.__value_;
    quasar::toLower((uint64_t)&matches, v33, v34, (std::string *)&__p);
    if (SHIBYTE(v86) < 0)
      operator delete((void *)__n[0]);
    *(_OWORD *)__n = *(_OWORD *)&__p.__matches_.__begin_;
    v86 = __p.__matches_.__end_cap_.__value_;
    v35 = HIBYTE(value);
    if (SHIBYTE(value) >= 0)
      v36 = (char *)HIBYTE(value);
    else
      v36 = (char *)__s1[1];
    v37 = HIBYTE(matches.__r_.__value_.__r.__words[2]);
    if ((matches.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v37 = matches.__r_.__value_.__l.__size_;
    if (v36 != (char *)v37)
      goto LABEL_115;
    if ((matches.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v38 = &matches;
    else
      v38 = (std::string *)matches.__r_.__value_.__r.__words[0];
    if ((HIBYTE(value) & 0x80) != 0)
    {
      if (memcmp(__s1[0], v38, (size_t)__s1[1]))
        goto LABEL_115;
    }
    else if (HIBYTE(value))
    {
      v39 = __s1;
      v40 = v38;
      while (*(unsigned __int8 *)v39 == v40->__r_.__value_.__s.__data_[0])
      {
        v39 = (void **)((char *)v39 + 1);
        v40 = (std::string *)((char *)v40 + 1);
        if (!--v35)
          goto LABEL_92;
      }
      goto LABEL_115;
    }
LABEL_92:
    v41 = HIBYTE(v86);
    if (SHIBYTE(v86) >= 0)
      v42 = HIBYTE(v86);
    else
      v42 = __n[1];
    if ((char *)v42 == v36)
    {
      if ((HIBYTE(v86) & 0x80) == 0)
      {
        if (HIBYTE(v86))
        {
          v43 = __n;
          v44 = v38;
          while (*(unsigned __int8 *)v43 == v44->__r_.__value_.__s.__data_[0])
          {
            v43 = (size_t *)((char *)v43 + 1);
            v44 = (std::string *)((char *)v44 + 1);
            if (!--v41)
              goto LABEL_115;
          }
          goto LABEL_103;
        }
LABEL_115:
        if ((v48 & 1) == 0
        {
          v77 = (std::regex_traits<char> *)operator new();
          std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100](v77, "^[a-zA-Z]+[0-9]+$", 0);
          quasar::QuasarG2PBase::normalizeToken(std::string const&)::PATTERN_7 = (uint64_t)v77;
        }
        if ((v49 & 1) == 0
        {
          v78 = (std::regex_traits<char> *)operator new();
          std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100](v78, "([0-9])", 0);
          quasar::QuasarG2PBase::normalizeToken(std::string const&)::PATTERN_8 = (uint64_t)v78;
        }
        memset(&__p.__prefix_, 0, 17);
        memset(&__p.__suffix_, 0, 17);
        __p.__ready_ = 0;
        __p.__position_start_ = 0;
        memset(&__p, 0, 41);
        v50 = HIBYTE(matches.__r_.__value_.__r.__words[2]);
        if ((matches.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v51 = (__int32 *)&matches;
        else
          v51 = (__int32 *)matches.__r_.__value_.__r.__words[0];
        if ((matches.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v50 = matches.__r_.__value_.__l.__size_;
        v52 = std::basic_regex<char,std::regex_traits<char>>::__search<std::allocator<std::sub_match<char const*>>>(quasar::QuasarG2PBase::normalizeToken(std::string const&)::PATTERN_7, v51, (__int32 *)((char *)v51 + v50), &__p, 0);
        v53 = HIBYTE(matches.__r_.__value_.__r.__words[2]);
        if ((matches.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v54 = &matches;
        else
          v54 = (std::string *)matches.__r_.__value_.__r.__words[0];
        if ((matches.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v53 = matches.__r_.__value_.__l.__size_;
        std::match_results<std::__wrap_iter<char const*>>::__assign[abi:ne180100]<char const*,std::allocator<std::sub_match<char const*>>>(v100, (uint64_t)v54, (std::sub_match<std::__wrap_iter<const wchar_t *>> *)((char *)v54 + v53), (uint64_t *)&__p, 0);
        if (__p.__matches_.__begin_)
        {
          __p.__matches_.__end_ = __p.__matches_.__begin_;
          operator delete(__p.__matches_.__begin_);
        }
        if (v52)
        {
          memset(&__p, 0, 24);
          v55 = HIBYTE(matches.__r_.__value_.__r.__words[2]);
          if ((matches.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v56.__i_ = (std::__wrap_iter<const char *>::iterator_type)&matches;
          else
            v56.__i_ = (std::__wrap_iter<const char *>::iterator_type)matches.__r_.__value_.__r.__words[0];
          if ((matches.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            v55 = matches.__r_.__value_.__l.__size_;
          v57.__i_ = &v56.__i_[v55];
          std::regex_replace[abi:ne180100]<std::back_insert_iterator<std::string>,std::__wrap_iter<char const*>,std::regex_traits<char>,char>((std::string *)&__p, v56, v57, (const std::regex_iterator<std::__wrap_iter<const char *>, char>::regex_type *)quasar::QuasarG2PBase::normalizeToken(std::string const&)::PATTERN_8, "_$1", 0);
          if (SHIBYTE(matches.__r_.__value_.__r.__words[2]) < 0)
            operator delete(matches.__r_.__value_.__l.__data_);
          matches = (std::string)__p.__matches_;
        }
        if ((v58 & 1) == 0
        {
          v79 = (std::regex_traits<char> *)operator new();
          std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100](v79, "___", 0);
          quasar::QuasarG2PBase::normalizeToken(std::string const&)::PATTERN_9 = (uint64_t)v79;
        }
        memset(&__p, 0, 24);
        v59 = HIBYTE(matches.__r_.__value_.__r.__words[2]);
        if ((matches.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v60.__i_ = (std::__wrap_iter<const char *>::iterator_type)&matches;
        else
          v60.__i_ = (std::__wrap_iter<const char *>::iterator_type)matches.__r_.__value_.__r.__words[0];
        if ((matches.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v59 = matches.__r_.__value_.__l.__size_;
        v61.__i_ = &v60.__i_[v59];
        std::regex_replace[abi:ne180100]<std::back_insert_iterator<std::string>,std::__wrap_iter<char const*>,std::regex_traits<char>,char>((std::string *)&__p, v60, v61, (const std::regex_iterator<std::__wrap_iter<const char *>, char>::regex_type *)quasar::QuasarG2PBase::normalizeToken(std::string const&)::PATTERN_9, "_", 0);
        if (SHIBYTE(matches.__r_.__value_.__r.__words[2]) < 0)
          operator delete(matches.__r_.__value_.__l.__data_);
        matches = (std::string)__p.__matches_;
        if ((v62 & 1) == 0
        {
          v80 = (std::regex_traits<char> *)operator new();
          std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100](v80, "__", 0);
          quasar::QuasarG2PBase::normalizeToken(std::string const&)::PATTERN_10 = (uint64_t)v80;
        }
        memset(&__p, 0, 24);
        v63 = HIBYTE(matches.__r_.__value_.__r.__words[2]);
        if ((matches.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v64.__i_ = (std::__wrap_iter<const char *>::iterator_type)&matches;
        else
          v64.__i_ = (std::__wrap_iter<const char *>::iterator_type)matches.__r_.__value_.__r.__words[0];
        if ((matches.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v63 = matches.__r_.__value_.__l.__size_;
        v65.__i_ = &v64.__i_[v63];
        std::regex_replace[abi:ne180100]<std::back_insert_iterator<std::string>,std::__wrap_iter<char const*>,std::regex_traits<char>,char>((std::string *)&__p, v64, v65, (const std::regex_iterator<std::__wrap_iter<const char *>, char>::regex_type *)quasar::QuasarG2PBase::normalizeToken(std::string const&)::PATTERN_10, "_", 0);
        if (SHIBYTE(matches.__r_.__value_.__r.__words[2]) < 0)
          operator delete(matches.__r_.__value_.__l.__data_);
        matches = (std::string)__p.__matches_;
        if ((v66 & 1) == 0
        {
          v81 = (std::regex_traits<char> *)operator new();
          std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100](v81, "_", 0);
          quasar::QuasarG2PBase::normalizeToken(std::string const&)::PATTERN_11 = (uint64_t)v81;
        }
        memset(&__p, 0, 24);
        v67 = HIBYTE(matches.__r_.__value_.__r.__words[2]);
        if ((matches.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v68.__i_ = (std::__wrap_iter<const char *>::iterator_type)&matches;
        else
          v68.__i_ = (std::__wrap_iter<const char *>::iterator_type)matches.__r_.__value_.__r.__words[0];
        if ((matches.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v67 = matches.__r_.__value_.__l.__size_;
        v69.__i_ = &v68.__i_[v67];
        std::regex_replace[abi:ne180100]<std::back_insert_iterator<std::string>,std::__wrap_iter<char const*>,std::regex_traits<char>,char>((std::string *)&__p, v68, v69, (const std::regex_iterator<std::__wrap_iter<const char *>, char>::regex_type *)quasar::QuasarG2PBase::normalizeToken(std::string const&)::PATTERN_11, "|", 0);
        if (SHIBYTE(matches.__r_.__value_.__r.__words[2]) < 0)
          operator delete(matches.__r_.__value_.__l.__data_);
        matches = (std::string)__p.__matches_;
        quasar::toLower((uint64_t)&matches, v33, v34, (std::string *)&__p);
        if (SHIBYTE(matches.__r_.__value_.__r.__words[2]) < 0)
          operator delete(matches.__r_.__value_.__l.__data_);
        matches.__r_.__value_.__r.__words[2] = (std::string::size_type)__p.__matches_.__end_cap_.__value_;
        *(_OWORD *)a3 = *(_OWORD *)&__p.__matches_.__begin_;
        a3[2] = *((_QWORD *)&matches.__r_.__value_.__l + 2);
        memset(&matches, 0, sizeof(matches));
        if (SHIBYTE(v86) < 0)
          operator delete((void *)__n[0]);
        if (SHIBYTE(value) < 0)
          operator delete(__s1[0]);
        goto LABEL_168;
      }
      if (!memcmp((const void *)__n[0], v38, __n[1]))
        goto LABEL_115;
    }
LABEL_103:
    memset(&__p.__prefix_, 0, 17);
    memset(&__p.__suffix_, 0, 17);
    __p.__ready_ = 0;
    __p.__position_start_ = 0;
    memset(&__p, 0, 41);
    v45 = std::basic_regex<char,std::regex_traits<char>>::__search<std::allocator<std::sub_match<char const*>>>(quasar::QuasarG2PBase::normalizeToken(std::string const&)::PATTERN_6, (__int32 *)v38, (__int32 *)&v36[(_QWORD)v38], &__p, 0);
    v46 = HIBYTE(matches.__r_.__value_.__r.__words[2]);
    if ((matches.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v47 = &matches;
    else
      v47 = (std::string *)matches.__r_.__value_.__r.__words[0];
    if ((matches.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v46 = matches.__r_.__value_.__l.__size_;
    std::match_results<std::__wrap_iter<char const*>>::__assign[abi:ne180100]<char const*,std::allocator<std::sub_match<char const*>>>(v100, (uint64_t)v47, (std::sub_match<std::__wrap_iter<const wchar_t *>> *)((char *)v47 + v46), (uint64_t *)&__p, 0);
    if (__p.__matches_.__begin_)
    {
      __p.__matches_.__end_ = __p.__matches_.__begin_;
      operator delete(__p.__matches_.__begin_);
    }
    if ((v45 & 1) == 0)
    {
      std::string::basic_string[abi:ne180100]<0>(&__p, "");
      tokenize_utf8_string(&matches, (uint64_t)&__p, (uint64_t)v84);
      v82[0] = (uint64_t)"_";
      v82[1] = 1;
      quasar::join<std::vector<std::string>>(v84, v82);
      if (SHIBYTE(matches.__r_.__value_.__r.__words[2]) < 0)
        operator delete(matches.__r_.__value_.__l.__data_);
      matches = v83;
      v83.__r_.__value_.__r.__words[0] = (std::string::size_type)v84;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v83);
      if (SHIBYTE(__p.__matches_.__end_cap_.__value_) < 0)
        operator delete(__p.__matches_.__begin_);
    }
    goto LABEL_115;
  }
  if (quasar::gLogLevel >= 2)
  {
    v98 = 0u;
    v99 = 0u;
    v96 = 0u;
    v97 = 0u;
    v94 = 0u;
    v95 = 0u;
    v92 = 0u;
    v93 = 0u;
    v90 = 0u;
    v91 = 0u;
    memset(&__p, 0, sizeof(__p));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"input contains | which is the separator for g2p model.", 54);
    quasar::QuasarWarnMessage::~QuasarWarnMessage((quasar::QuasarWarnMessage *)&__p);
  }
  std::string::basic_string[abi:ne180100]<0>(a3, "");
LABEL_168:
  if (v100[0].__begin_)
  {
    v100[0].__end_ = v100[0].__begin_;
    operator delete(v100[0].__begin_);
  }
LABEL_170:
  if (SHIBYTE(matches.__r_.__value_.__r.__words[2]) < 0)
    operator delete(matches.__r_.__value_.__l.__data_);
}

void sub_1AD8F97A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, __int128 __p, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,__int128 a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,__int128 a36,__int128 a37,__int128 a38,__int128 a39,__int128 a40,__int128 a41,__int128 a42,__int128 a43,__int128 a44,__int128 a45,__int128 a46,__int128 a47,__int128 a48,__int128 a49,__int128 a50)
{
  uint64_t v50;
  uint64_t v51;
  void *v53;

  MEMORY[0x1AF44D190](v50, 0x1060C4040BE2400);
  if (a21 < 0)
    operator delete((void *)__p);
  if (a28 < 0)
    operator delete(a23);
  v53 = *(void **)(v51 - 208);
  if (v53)
  {
    *(_QWORD *)(v51 - 200) = v53;
    operator delete(v53);
  }
  if (*(char *)(v51 - 73) < 0)
    operator delete(*(void **)(v51 - 96));
  _Unwind_Resume(a1);
}

void quasar::QuasarG2PBase::chopTokenIntoUTF8Units(quasar::QuasarG2PBase *this@<X0>, std::string *a2@<X8>)
{
  uint64_t v5;
  std::string *v6;
  std::string v7;
  std::string __p;
  std::string *v9;
  char v10;
  std::string v11;
  __int128 v12[16];
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  (*(void (**)(std::string *__return_ptr))(*(_QWORD *)this + 64))(&__p);
  memset(&v7, 0, sizeof(v7));
  v5 = (*(uint64_t (**)(quasar::QuasarG2PBase *))(*(_QWORD *)this + 72))(this);
  if (v5)
  {
    tokenize_entry(&__p, (uint64_t)this + 328, v5, 0, (uint64_t *)&v11);
    std::vector<std::string>::__vdeallocate((std::vector<std::wstring> *)&v7);
    v7 = v11;
    memset(&v11, 0, sizeof(v11));
    v9 = &v11;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v9);
    *a2 = v7;
    memset(&v7, 0, sizeof(v7));
  }
  else
  {
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v11, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    else
      v11 = __p;
    a2->__r_.__value_.__r.__words[0] = 0;
    a2->__r_.__value_.__l.__size_ = 0;
    a2->__r_.__value_.__r.__words[2] = 0;
    v9 = a2;
    v10 = 0;
    v6 = (std::string *)operator new(0x18uLL);
    a2->__r_.__value_.__r.__words[0] = (std::string::size_type)v6;
    a2->__r_.__value_.__l.__size_ = (std::string::size_type)v6;
    a2->__r_.__value_.__r.__words[2] = (std::string::size_type)&v6[1];
    a2->__r_.__value_.__l.__size_ = (std::string::size_type)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&a2->__r_.__value_.__r.__words[2], (__int128 *)&v11, v12, v6);
    if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v11.__r_.__value_.__l.__data_);
  }
  v11.__r_.__value_.__r.__words[0] = (std::string::size_type)&v7;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v11);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_1AD8F9F1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18, uint64_t a19, __int128 a20,__int128 a21,__int128 a22,__int128 a23,__int128 a24,__int128 a25,__int128 a26,__int128 a27,__int128 a28,__int128 a29,__int128 a30,__int128 a31,__int128 a32,__int128 a33,__int128 a34,__int128 a35,__int128 a36)
{
  void *v37;
  void *v38;
  _QWORD *v39;
  const char *v40;
  size_t v41;
  void *v42;
  void *v43;
  _QWORD *v44;
  const char *v45;
  size_t v46;
  void *v47;
  void *v48;
  _QWORD *v49;
  const char *v50;
  size_t v51;
  void *v52;
  void *v53;
  const char *v54;
  size_t v55;

  switch(a2)
  {
    case 4:
      v37 = __cxa_begin_catch(a1);
      if (quasar::gLogLevel >= 2)
      {
        v38 = v37;
        a35 = 0u;
        a36 = 0u;
        a33 = 0u;
        a34 = 0u;
        a31 = 0u;
        a32 = 0u;
        a29 = 0u;
        a30 = 0u;
        a27 = 0u;
        a28 = 0u;
        a25 = 0u;
        a26 = 0u;
        a23 = 0u;
        a24 = 0u;
        a21 = 0u;
        a22 = 0u;
        a20 = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&a20);
        v39 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&a20, (uint64_t)"Not enough space, ", 18);
        v40 = (const char *)(*(uint64_t (**)(void *))(*(_QWORD *)v38 + 16))(v38);
        v41 = strlen(v40);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v39, (uint64_t)v40, v41);
        quasar::QuasarWarnMessage::~QuasarWarnMessage((quasar::QuasarWarnMessage *)&a20);
      }
      break;
    case 3:
      v42 = __cxa_begin_catch(a1);
      if (quasar::gLogLevel >= 2)
      {
        v43 = v42;
        a35 = 0u;
        a36 = 0u;
        a33 = 0u;
        a34 = 0u;
        a31 = 0u;
        a32 = 0u;
        a29 = 0u;
        a30 = 0u;
        a27 = 0u;
        a28 = 0u;
        a25 = 0u;
        a26 = 0u;
        a23 = 0u;
        a24 = 0u;
        a21 = 0u;
        a22 = 0u;
        a20 = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&a20);
        v44 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&a20, (uint64_t)"Invalid UTF-8, ", 15);
        v45 = (const char *)(*(uint64_t (**)(void *))(*(_QWORD *)v43 + 16))(v43);
        v46 = strlen(v45);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v44, (uint64_t)v45, v46);
        quasar::QuasarWarnMessage::~QuasarWarnMessage((quasar::QuasarWarnMessage *)&a20);
      }
      break;
    case 2:
      v47 = __cxa_begin_catch(a1);
      if (quasar::gLogLevel >= 2)
      {
        v48 = v47;
        a35 = 0u;
        a36 = 0u;
        a33 = 0u;
        a34 = 0u;
        a31 = 0u;
        a32 = 0u;
        a29 = 0u;
        a30 = 0u;
        a27 = 0u;
        a28 = 0u;
        a25 = 0u;
        a26 = 0u;
        a23 = 0u;
        a24 = 0u;
        a21 = 0u;
        a22 = 0u;
        a20 = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&a20);
        v49 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&a20, (uint64_t)"Invalid code point, ", 20);
        v50 = (const char *)(*(uint64_t (**)(void *))(*(_QWORD *)v48 + 16))(v48);
        v51 = strlen(v50);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v49, (uint64_t)v50, v51);
        quasar::QuasarWarnMessage::~QuasarWarnMessage((quasar::QuasarWarnMessage *)&a20);
      }
      break;
    default:
      if (a2 != 1)
      {
        *(_QWORD *)&a20 = &a9;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a20);
        if (a17 < 0)
          operator delete(__p);
        _Unwind_Resume(a1);
      }
      v52 = __cxa_begin_catch(a1);
      if (quasar::gLogLevel >= 2)
      {
        v53 = v52;
        a35 = 0u;
        a36 = 0u;
        a33 = 0u;
        a34 = 0u;
        a31 = 0u;
        a32 = 0u;
        a29 = 0u;
        a30 = 0u;
        a27 = 0u;
        a28 = 0u;
        a25 = 0u;
        a26 = 0u;
        a23 = 0u;
        a24 = 0u;
        a21 = 0u;
        a22 = 0u;
        a20 = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&a20);
        v54 = (const char *)(*(uint64_t (**)(void *))(*(_QWORD *)v53 + 16))(v53);
        v55 = strlen(v54);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&a20, (uint64_t)v54, v55);
        quasar::QuasarWarnMessage::~QuasarWarnMessage((quasar::QuasarWarnMessage *)&a20);
      }
      break;
  }
  __cxa_end_catch();
  JUMPOUT(0x1AD8F9E34);
}

uint64_t kaldi::LatticeWordAligner::ComputationState::OutputSilenceArc(uint64_t a1, uint64_t a2, kaldi::TransitionModel *this, uint64_t a4, _BYTE *a5)
{
  unsigned int v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  unint64_t v16;
  int *v18;
  int v19;
  int v20;
  char *v21;
  char *v22;
  char *v23;
  int64_t v24;
  _BYTE *v25;
  int *v26;
  _BYTE *v27;
  int64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  _BYTE *v32;
  uint64_t v33;
  void *v34;
  _BYTE *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void *__p;
  _BYTE *v40;
  uint64_t v41;
  int v42;

  if (*(_QWORD *)a1 == *(_QWORD *)(a1 + 8))
    return 0;
  v10 = kaldi::TransitionModel::TransitionIdToPhone(this, **(_DWORD **)a1);
  if (kaldi::WordBoundaryInfo::TypeOfPhone((kaldi::WordBoundaryInfo *)a2, v10) != 5)
    return 0;
  v29 = a4;
  v11 = *(_QWORD *)(a1 + 8) - *(_QWORD *)a1;
  v12 = v11 >> 2;
  v13 = 0;
  if (v11)
  {
    if (v12 <= 1)
      v14 = 1;
    else
      v14 = v11 >> 2;
    while (1)
    {
      v15 = *(_DWORD *)(*(_QWORD *)a1 + 4 * v13);
      if (kaldi::TransitionModel::TransitionIdToPhone(this, v15) != v10 && !*a5)
      {
        *a5 = 1;
        if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
        {
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v37);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v37, (uint64_t)"Phone changed before final transition-id found [broken lattice or mismatched model or wrong --reorder option?]", 110);
          kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)&v37);
        }
      }
      if (kaldi::TransitionModel::IsFinal(this, v15))
        break;
      if (v14 == ++v13)
      {
        v13 = v14;
        break;
      }
    }
  }
  if (v13 == v12)
    return 0;
  v16 = v13 + 1;
  if (*(_BYTE *)(a2 + 56) && v16 < v12)
  {
    while (kaldi::TransitionModel::IsSelfLoop(this, *(_DWORD *)(*(_QWORD *)a1 + 4 * v16)))
    {
      if (v12 == ++v16)
        return 0;
    }
  }
  if (v16 == v12)
    return 0;
  if (kaldi::TransitionModel::TransitionIdToPhone(this, *(_DWORD *)(*(_QWORD *)a1 + 4 * v16 - 4)) != v10
    && !*a5
    && (kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v37);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v37, (uint64_t)"Phone changed unexpectedly in lattice [broken lattice or mismatched model?]", 75);
    kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)&v37);
  }
  v18 = *(int **)a1;
  v35 = 0;
  v36 = 0;
  v34 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<std::__wrap_iter<int *>,std::__wrap_iter<int *>>(&v34, v18, (uint64_t)&v18[v16], v16);
  v19 = *(_DWORD *)(a2 + 24);
  v30 = *(_QWORD *)(a1 + 48);
  v32 = 0;
  v33 = 0;
  v31 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v31, v34, (uint64_t)v35, (v35 - (_BYTE *)v34) >> 2);
  LODWORD(v37) = v19;
  HIDWORD(v37) = v19;
  v38 = v30;
  v40 = 0;
  v41 = 0;
  __p = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, v31, (uint64_t)v32, (v32 - (_BYTE *)v31) >> 2);
  v20 = -1;
  v42 = -1;
  *(_QWORD *)v29 = v37;
  *(_QWORD *)(v29 + 8) = v38;
  if (&v37 != (uint64_t *)v29)
  {
    std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)(v29 + 16), (char *)__p, (uint64_t)v40, (v40 - (_BYTE *)__p) >> 2);
    v20 = v42;
  }
  *(_DWORD *)(v29 + 40) = v20;
  if (__p)
  {
    v40 = __p;
    operator delete(__p);
  }
  if (v31)
  {
    v32 = v31;
    operator delete(v31);
  }
  v22 = *(char **)(a1 + 24);
  v21 = *(char **)(a1 + 32);
  if (v22 != v21)
  {
    do
    {
      if (*(_DWORD *)v22 != *(_DWORD *)(a2 + 24))
        break;
      v23 = v22;
      v24 = v21 - (v22 + 4);
      if (v21 != v22 + 4)
      {
        memmove(v22, v22 + 4, v21 - (v22 + 4));
        v23 = *(char **)(a1 + 24);
      }
      v21 = &v22[v24];
      *(_QWORD *)(a1 + 32) = &v22[v24];
      v22 = v23;
    }
    while (v23 != v21);
  }
  if (v16)
  {
    v26 = *(int **)a1;
    v25 = *(_BYTE **)(a1 + 8);
    v27 = (_BYTE *)(*(_QWORD *)a1 + 4 * v16);
    v28 = v25 - v27;
    if (v25 != v27)
      memmove(*(void **)a1, v27, v25 - v27);
    *(_QWORD *)(a1 + 8) = (char *)v26 + v28;
  }
  *(_QWORD *)(a1 + 48) = 0;
  if (v34)
  {
    v35 = v34;
    operator delete(v34);
  }
  return 1;
}

void sub_1AD8FA5DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, void *__p,uint64_t a21)
{
  kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)&a18);
  _Unwind_Resume(a1);
}

uint64_t kaldi::WordBoundaryInfo::TypeOfPhone(kaldi::WordBoundaryInfo *this, unsigned int a2)
{
  _QWORD *v3;
  _QWORD v4[34];

  if ((a2 & 0x80000000) != 0 || a2 > (unint64_t)((uint64_t)(*((_QWORD *)this + 1) - *(_QWORD *)this) >> 2))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v4);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"Phone ", 6);
    v3 = (_QWORD *)std::ostream::operator<<();
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v3, " was not specified in word-boundary file (or options)");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4);
  }
  return *(unsigned int *)(*(_QWORD *)this + 4 * a2);
}

uint64_t kaldi::LatticeWordAligner::ComputationState::OutputUnpronouncedWordArc(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int *v4;
  uint64_t *v5;
  int v8;
  int v9;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15[2];
  __int128 v16;
  uint64_t v17;
  void *v18;
  void *__p;
  _BYTE *v20;
  uint64_t v21;
  int v22;

  v4 = *(int **)(a1 + 24);
  if (v4 == *(int **)(a1 + 32))
    return 0;
  v5 = *(uint64_t **)(a2 + 40);
  if (!v5)
    return 0;
  v8 = *v4;
  while (1)
  {
    v9 = *((_DWORD *)v5 + 7);
    if (v8 >= v9)
      break;
LABEL_7:
    v5 = (uint64_t *)*v5;
    if (!v5)
      return 0;
  }
  if (v9 < v8)
  {
    ++v5;
    goto LABEL_7;
  }
  *(_OWORD *)v15 = 0u;
  v16 = 0u;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v15[1], 0, 0, 0);
  LODWORD(v17) = v8;
  HIDWORD(v17) = v8;
  v18 = v15[0];
  v20 = 0;
  v21 = 0;
  __p = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, v15[1], v16, (uint64_t)(v16 - (unint64_t)v15[1]) >> 2);
  v11 = -1;
  v22 = -1;
  *(_QWORD *)a4 = v17;
  *(_QWORD *)(a4 + 8) = v18;
  if (&v17 != (uint64_t *)a4)
  {
    std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)(a4 + 16), (char *)__p, (uint64_t)v20, (v20 - (_BYTE *)__p) >> 2);
    v11 = v22;
  }
  *(_DWORD *)(a4 + 40) = v11;
  if (__p)
  {
    v20 = __p;
    operator delete(__p);
  }
  if (v15[1])
  {
    *(void **)&v16 = v15[1];
    operator delete(v15[1]);
  }
  v13 = *(_QWORD *)(a1 + 24);
  v12 = *(_QWORD *)(a1 + 32);
  v14 = v12 - (v13 + 4);
  if (v12 != v13 + 4)
    memmove(*(void **)(a1 + 24), (const void *)(v13 + 4), v12 - (v13 + 4));
  *(_QWORD *)(a1 + 32) = v13 + v14;
  return 1;
}

void sub_1AD8FA804(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  if (__p)
    operator delete(__p);
  if (a10)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

uint64_t kaldi::LatticeWordAligner::ComputationState::OutputOnePhoneWordArc(uint64_t a1, uint64_t a2, kaldi::TransitionModel *this, uint64_t a4, _BYTE *a5)
{
  int *v6;
  int v11;
  uint64_t *i;
  int v13;
  unsigned int v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  unint64_t v20;
  uint64_t result;
  int *v22;
  int v23;
  _BYTE *v24;
  int *v25;
  _BYTE *v26;
  int64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  _BYTE *v34;
  uint64_t v35;
  void *v36;
  _BYTE *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void *__p;
  _BYTE *v42;
  uint64_t v43;
  int v44;

  if (*(_QWORD *)a1 == *(_QWORD *)(a1 + 8))
    return 0;
  v6 = *(int **)(a1 + 24);
  if (v6 == *(int **)(a1 + 32))
    return 0;
  v11 = *v6;
  for (i = *(uint64_t **)(a2 + 40); i; i = (uint64_t *)*i)
  {
    v13 = *((_DWORD *)i + 7);
    if (v11 >= v13)
    {
      if (v13 >= v11)
        return 0;
      ++i;
    }
  }
  v14 = kaldi::TransitionModel::TransitionIdToPhone(this, **(_DWORD **)a1);
  if (kaldi::WordBoundaryInfo::TypeOfPhone((kaldi::WordBoundaryInfo *)a2, v14) != 3)
    return 0;
  v31 = a4;
  v15 = *(_QWORD *)(a1 + 8) - *(_QWORD *)a1;
  v16 = v15 >> 2;
  v17 = 0;
  if (v15)
  {
    if (v16 <= 1)
      v18 = 1;
    else
      v18 = v15 >> 2;
    while (1)
    {
      v19 = *(_DWORD *)(*(_QWORD *)a1 + 4 * v17);
      if (kaldi::TransitionModel::TransitionIdToPhone(this, v19) != v14
        && !*a5
        && (kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
      {
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v39);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v39, (uint64_t)"Phone changed before final transition-id found [broken lattice or mismatched model or wrong --reorder option?]", 110);
        kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)&v39);
      }
      if (kaldi::TransitionModel::IsFinal(this, v19))
        break;
      if (v18 == ++v17)
      {
        v17 = v18;
        break;
      }
    }
  }
  if (v17 == v16)
    return 0;
  v20 = v17 + 1;
  if (*(_BYTE *)(a2 + 56) && v20 < v16)
  {
    while (kaldi::TransitionModel::IsSelfLoop(this, *(_DWORD *)(*(_QWORD *)a1 + 4 * v20)))
    {
      result = 0;
      if (v16 == ++v20)
        return result;
    }
  }
  if (v20 == v16)
    return 0;
  if (kaldi::TransitionModel::TransitionIdToPhone(this, *(_DWORD *)(*(_QWORD *)a1 + 4 * v20 - 4)) != v14
    && !*a5)
  {
    if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v39);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v39, (uint64_t)"Phone changed unexpectedly in lattice [broken lattice or mismatched model?]", 75);
      kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)&v39);
    }
    *a5 = 1;
  }
  v22 = *(int **)a1;
  v37 = 0;
  v38 = 0;
  v36 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<std::__wrap_iter<int *>,std::__wrap_iter<int *>>(&v36, v22, (uint64_t)&v22[v20], v20);
  v32 = *(_QWORD *)(a1 + 48);
  v34 = 0;
  v35 = 0;
  v33 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v33, v36, (uint64_t)v37, (v37 - (_BYTE *)v36) >> 2);
  LODWORD(v39) = v11;
  HIDWORD(v39) = v11;
  v40 = v32;
  v42 = 0;
  v43 = 0;
  __p = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, v33, (uint64_t)v34, (v34 - (_BYTE *)v33) >> 2);
  v23 = -1;
  v44 = -1;
  *(_QWORD *)v31 = v39;
  *(_QWORD *)(v31 + 8) = v40;
  if (&v39 != (uint64_t *)v31)
  {
    std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)(v31 + 16), (char *)__p, (uint64_t)v42, (v42 - (_BYTE *)__p) >> 2);
    v23 = v44;
  }
  *(_DWORD *)(v31 + 40) = v23;
  if (__p)
  {
    v42 = __p;
    operator delete(__p);
  }
  if (v33)
  {
    v34 = v33;
    operator delete(v33);
  }
  if (v20)
  {
    v25 = *(int **)a1;
    v24 = *(_BYTE **)(a1 + 8);
    v26 = (_BYTE *)(*(_QWORD *)a1 + 4 * v20);
    v27 = v24 - v26;
    if (v24 != v26)
      memmove(*(void **)a1, v26, v24 - v26);
    *(_QWORD *)(a1 + 8) = (char *)v25 + v27;
  }
  v29 = *(_QWORD *)(a1 + 24);
  v28 = *(_QWORD *)(a1 + 32);
  v30 = v28 - (v29 + 4);
  if (v28 != v29 + 4)
    memmove(*(void **)(a1 + 24), (const void *)(v29 + 4), v28 - (v29 + 4));
  *(_QWORD *)(a1 + 32) = v29 + v30;
  *(_QWORD *)(a1 + 48) = 0;
  if (v36)
  {
    v37 = v36;
    operator delete(v36);
  }
  return 1;
}

void sub_1AD8FAB74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, void *__p,uint64_t a21)
{
  kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)&a18);
  _Unwind_Resume(a1);
}

uint64_t kaldi::LatticeWordAligner::ComputationState::OutputNormalWordArc(uint64_t a1, uint64_t a2, kaldi::TransitionModel *this, uint64_t a4, _BYTE *a5)
{
  int *v6;
  int v11;
  uint64_t *i;
  int v13;
  unsigned int v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t result;
  unsigned int v21;
  _QWORD *v22;
  int v23;
  unint64_t v24;
  int *v25;
  int v26;
  _BYTE *v27;
  int *v28;
  _BYTE *v29;
  int64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  _BYTE *v36;
  uint64_t v37;
  void *v38;
  _BYTE *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void *__p;
  _BYTE *v44;
  uint64_t v45;
  int v46;

  if (*(_QWORD *)a1 == *(_QWORD *)(a1 + 8))
    return 0;
  v6 = *(int **)(a1 + 24);
  if (v6 == *(int **)(a1 + 32))
    return 0;
  v11 = *v6;
  for (i = *(uint64_t **)(a2 + 40); i; i = (uint64_t *)*i)
  {
    v13 = *((_DWORD *)i + 7);
    if (v11 >= v13)
    {
      if (v13 >= v11)
        return 0;
      ++i;
    }
  }
  v14 = kaldi::TransitionModel::TransitionIdToPhone(this, **(_DWORD **)a1);
  if (kaldi::WordBoundaryInfo::TypeOfPhone((kaldi::WordBoundaryInfo *)a2, v14) != 1)
    return 0;
  v15 = *(_QWORD *)(a1 + 8) - *(_QWORD *)a1;
  v16 = v15 >> 2;
  v17 = 0;
  if (v15)
  {
    if (v16 <= 1)
      v18 = 1;
    else
      v18 = v15 >> 2;
    while (!kaldi::TransitionModel::IsFinal(this, *(_DWORD *)(*(_QWORD *)a1 + 4 * v17)))
    {
      if (v18 == ++v17)
      {
        v17 = v18;
        break;
      }
    }
  }
  if (v17 == v16)
    return 0;
  v19 = v17 + 1;
  if (*(_BYTE *)(a2 + 56) && v19 < v16)
  {
    while (kaldi::TransitionModel::IsSelfLoop(this, *(_DWORD *)(*(_QWORD *)a1 + 4 * v19)))
    {
      result = 0;
      if (v16 == ++v19)
        return result;
    }
  }
  if (v19 == v16)
    return 0;
  if (kaldi::TransitionModel::TransitionIdToPhone(this, *(_DWORD *)(*(_QWORD *)a1 + 4 * v19 - 4)) != v14
    && !*a5)
  {
    if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v41);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v41, (uint64_t)"Phone changed unexpectedly in lattice [broken lattice or mismatched model?]", 75);
      kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)&v41);
    }
    *a5 = 1;
  }
  if (v19 < v16)
  {
    do
    {
      v21 = kaldi::TransitionModel::TransitionIdToPhone(this, *(_DWORD *)(*(_QWORD *)a1 + 4 * v19));
      if (kaldi::WordBoundaryInfo::TypeOfPhone((kaldi::WordBoundaryInfo *)a2, v21) == 2)
        break;
      if (kaldi::WordBoundaryInfo::TypeOfPhone((kaldi::WordBoundaryInfo *)a2, v21) != 4 && !*a5)
      {
        if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
        {
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v41);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v41, (uint64_t)"Unexpected phone ", 17);
          v22 = (_QWORD *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)" found inside a word.", 21);
          kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)&v41);
        }
        *a5 = 1;
      }
      result = 0;
      ++v19;
    }
    while (v16 != v19);
  }
  if (v19 == v16)
    return 0;
  v23 = kaldi::TransitionModel::TransitionIdToPhone(this, *(_DWORD *)(*(_QWORD *)a1 + 4 * v19));
  if (v19 < v16)
  {
    do
    {
      if (kaldi::TransitionModel::TransitionIdToPhone(this, *(_DWORD *)(*(_QWORD *)a1 + 4 * v19)) != v23
        && !*a5)
      {
        *a5 = 1;
        if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
        {
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v41);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v41, (uint64_t)"Phone changed before final transition-id found [broken lattice or mismatched model or wrong --reorder option?]", 110);
          kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)&v41);
        }
      }
      if (kaldi::TransitionModel::IsFinal(this, *(_DWORD *)(*(_QWORD *)a1 + 4 * v19)))
        break;
      result = 0;
      ++v19;
    }
    while (v16 != v19);
  }
  if (v19 == v16)
    return 0;
  v24 = v19 + 1;
  if (*(_BYTE *)(a2 + 56) && v24 < v16)
  {
    while (kaldi::TransitionModel::IsSelfLoop(this, *(_DWORD *)(*(_QWORD *)a1 + 4 * v24)))
    {
      result = 0;
      if (v16 == ++v24)
        return result;
    }
  }
  if (v24 == v16)
    return 0;
  if (kaldi::TransitionModel::TransitionIdToPhone(this, *(_DWORD *)(*(_QWORD *)a1 + 4 * v24 - 4)) != v23
    && !*a5)
  {
    *a5 = 1;
    if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v41);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v41, (uint64_t)"Phone changed while following final self-loop [broken lattice or mismatched model or wrong --reorder option?]", 109);
      kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)&v41);
    }
  }
  v25 = *(int **)a1;
  v39 = 0;
  v40 = 0;
  v38 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<std::__wrap_iter<int *>,std::__wrap_iter<int *>>(&v38, v25, (uint64_t)&v25[v24], v24);
  v34 = *(_QWORD *)(a1 + 48);
  v36 = 0;
  v37 = 0;
  v35 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v35, v38, (uint64_t)v39, (v39 - (_BYTE *)v38) >> 2);
  LODWORD(v41) = v11;
  HIDWORD(v41) = v11;
  v42 = v34;
  v44 = 0;
  v45 = 0;
  __p = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, v35, (uint64_t)v36, (v36 - (_BYTE *)v35) >> 2);
  v26 = -1;
  v46 = -1;
  *(_QWORD *)a4 = v41;
  *(_QWORD *)(a4 + 8) = v42;
  if (&v41 != (uint64_t *)a4)
  {
    std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)(a4 + 16), (char *)__p, (uint64_t)v44, (v44 - (_BYTE *)__p) >> 2);
    v26 = v46;
  }
  *(_DWORD *)(a4 + 40) = v26;
  if (__p)
  {
    v44 = __p;
    operator delete(__p);
  }
  if (v35)
  {
    v36 = v35;
    operator delete(v35);
  }
  if (v24)
  {
    v28 = *(int **)a1;
    v27 = *(_BYTE **)(a1 + 8);
    v29 = (_BYTE *)(*(_QWORD *)a1 + 4 * v24);
    v30 = v27 - v29;
    if (v27 != v29)
      memmove(*(void **)a1, v29, v27 - v29);
    *(_QWORD *)(a1 + 8) = (char *)v28 + v30;
  }
  v32 = *(_QWORD *)(a1 + 24);
  v31 = *(_QWORD *)(a1 + 32);
  v33 = v31 - (v32 + 4);
  if (v31 != v32 + 4)
    memmove(*(void **)(a1 + 24), (const void *)(v32 + 4), v31 - (v32 + 4));
  *(_QWORD *)(a1 + 32) = v32 + v33;
  *(_QWORD *)(a1 + 48) = 0;
  if (v38)
  {
    v39 = v38;
    operator delete(v38);
  }
  return 1;
}

void sub_1AD8FB0BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, void *__p, uint64_t a19)
{
  kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)&a16);
  _Unwind_Resume(a1);
}

void kaldi::LatticeWordAligner::ComputationState::OutputArcForce(uint64_t a1, uint64_t a2, kaldi::TransitionModel *this, uint64_t a4, _BYTE *a5)
{
  int *v9;
  int *v11;
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int *v18;
  unsigned int v19;
  int *v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  BOOL v24;
  unsigned int v25;
  unsigned int v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int *v32;
  BOOL IsSelfLoop;
  int *v34;
  int v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  _BYTE *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void *__p;
  _BYTE *v47;
  uint64_t v48;
  int v49;

  v9 = *(int **)a1;
  if (*(_QWORD *)a1 == *(_QWORD *)(a1 + 8))
  {
    if (*a5)
    {
      v18 = *(int **)a1;
    }
    else
    {
      *a5 = 1;
      v18 = v9;
      if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
      {
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v44);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v44, (uint64_t)"Discarding word-ids at the end of a sentence, that don't have alignments.", 73);
        kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)&v44);
        v18 = *(int **)a1;
        v9 = *(int **)(a1 + 8);
      }
    }
    v38 = *(_QWORD *)(a1 + 48);
    v42 = 0;
    v43 = 0;
    v41 = 0;
    std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v41, v18, (uint64_t)v9, v9 - v18);
    v44 = 0;
    v45 = v38;
    v47 = 0;
    v48 = 0;
    __p = 0;
    std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, v41, (uint64_t)v42, (v42 - (_BYTE *)v41) >> 2);
    v35 = -1;
    v49 = -1;
    *(_QWORD *)a4 = v44;
    *(_QWORD *)(a4 + 8) = v45;
    if (&v44 != (uint64_t *)a4)
    {
      std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)(a4 + 16), (char *)__p, (uint64_t)v47, (v47 - (_BYTE *)__p) >> 2);
      v35 = v49;
    }
    *(_DWORD *)(a4 + 40) = v35;
    if (__p)
    {
      v47 = __p;
      operator delete(__p);
    }
    *(_QWORD *)(a1 + 48) = 0;
    v17 = *(_QWORD *)(a1 + 24);
LABEL_42:
    *(_QWORD *)(a1 + 32) = v17;
    if (v41)
    {
      v42 = v41;
      operator delete(v41);
    }
    return;
  }
  v11 = *(int **)(a1 + 24);
  if (v11 != *(int **)(a1 + 32))
  {
    v12 = *v11;
    if (!*a5)
    {
      v25 = kaldi::TransitionModel::TransitionIdToPhone(this, *v9);
      v26 = kaldi::TransitionModel::TransitionIdToPhone(this, *(_DWORD *)(*(_QWORD *)(a1 + 8) - 4));
      v27 = kaldi::WordBoundaryInfo::TypeOfPhone((kaldi::WordBoundaryInfo *)a2, v25) == 3 && v25 == v26;
      if (!v27
        && (kaldi::WordBoundaryInfo::TypeOfPhone((kaldi::WordBoundaryInfo *)a2, v25) != 1
         || kaldi::WordBoundaryInfo::TypeOfPhone((kaldi::WordBoundaryInfo *)a2, v26) != 2)
        && (kaldi::WordBoundaryInfo::TypeOfPhone((kaldi::WordBoundaryInfo *)a2, v25) != 5
         || kaldi::WordBoundaryInfo::TypeOfPhone((kaldi::WordBoundaryInfo *)a2, v26) != 5))
      {
        goto LABEL_60;
      }
      v28 = *(_QWORD *)(a1 + 8);
      if (*(_BYTE *)(a2 + 56))
      {
        v29 = ((unint64_t)(v28 - *(_QWORD *)a1) >> 2) - 1;
        v30 = 4 * (int)v29;
        while (1)
        {
          v31 = v30;
          v32 = *(int **)a1;
          if ((int)v29 < 1)
            break;
          IsSelfLoop = kaldi::TransitionModel::IsSelfLoop(this, v32[v29]);
          v30 = v31 - 4;
          --v29;
          if (!IsSelfLoop)
          {
            v32 = *(int **)a1;
            break;
          }
        }
        v34 = (int *)((char *)v32 + v31);
      }
      else
      {
        v34 = (int *)(v28 - 4);
      }
      if (!kaldi::TransitionModel::IsFinal(this, *v34))
      {
LABEL_60:
        *a5 = 1;
        if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
        {
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v44);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v44, (uint64_t)"Invalid word at end of lattice [partial lattice, forced out?]", 61);
          kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)&v44);
        }
      }
    }
    v37 = *(_QWORD *)(a1 + 48);
    v42 = 0;
    v43 = 0;
    v41 = 0;
    std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v41, *(const void **)a1, *(_QWORD *)(a1 + 8), (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 2);
    LODWORD(v44) = v12;
    HIDWORD(v44) = v12;
    v45 = v37;
    v47 = 0;
    v48 = 0;
    __p = 0;
    std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, v41, (uint64_t)v42, (v42 - (_BYTE *)v41) >> 2);
    v13 = -1;
    v49 = -1;
    *(_QWORD *)a4 = v44;
    *(_QWORD *)(a4 + 8) = v45;
    if (&v44 != (uint64_t *)a4)
    {
      std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)(a4 + 16), (char *)__p, (uint64_t)v47, (v47 - (_BYTE *)__p) >> 2);
      v13 = v49;
    }
    *(_DWORD *)(a4 + 40) = v13;
    if (__p)
    {
      v47 = __p;
      operator delete(__p);
    }
    *(_QWORD *)(a1 + 48) = 0;
    *(_QWORD *)(a1 + 8) = *(_QWORD *)a1;
    v15 = *(_QWORD *)(a1 + 24);
    v14 = *(_QWORD *)(a1 + 32);
    v16 = v14 - (v15 + 4);
    if (v14 != v15 + 4)
      memmove(*(void **)(a1 + 24), (const void *)(v15 + 4), v14 - (v15 + 4));
    v17 = v15 + v16;
    goto LABEL_42;
  }
  v19 = kaldi::TransitionModel::TransitionIdToPhone(this, *v9);
  if (kaldi::WordBoundaryInfo::TypeOfPhone((kaldi::WordBoundaryInfo *)a2, v19) == 5)
  {
    if (v19 == kaldi::TransitionModel::TransitionIdToPhone(this, *(_DWORD *)(*(_QWORD *)(a1 + 8) - 4)))
    {
      if (!*a5)
      {
        v20 = *(int **)a1;
        v21 = (*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 2;
        if (*(_BYTE *)(a2 + 56))
        {
          v22 = (int)v21 - 1;
          do
          {
            v23 = kaldi::TransitionModel::IsSelfLoop(this, *(_DWORD *)(*(_QWORD *)a1 + 4 * v22));
            LODWORD(v21) = v21 - 1;
            v24 = v22-- < 1;
          }
          while (!v24 && v23);
          v20 = *(int **)a1;
        }
        else
        {
          LODWORD(v21) = v21 - 1;
        }
        if (!kaldi::TransitionModel::IsFinal(this, v20[(int)v21]))
        {
          *a5 = 1;
          if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
          {
            kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v44);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v44, (uint64_t)"Broken silence arc at end of utterance (does not reach end of silence)", 70);
            kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)&v44);
          }
        }
      }
    }
    else if (!*a5)
    {
      *a5 = 1;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v44);
      std::operator<<[abi:ne180100]<std::char_traits<char>>(&v44, "Broken silence arc at end of utterance (the phone changed); code error");
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v44);
    }
    v40 = *(_QWORD *)(a1 + 48);
    v42 = 0;
    v43 = 0;
    v41 = 0;
    std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v41, *(const void **)a1, *(_QWORD *)(a1 + 8), (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 2);
    LODWORD(v44) = *(_DWORD *)(a2 + 24);
    HIDWORD(v44) = v44;
    v45 = v40;
    v47 = 0;
    v48 = 0;
    __p = 0;
    std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, v41, (uint64_t)v42, (v42 - (_BYTE *)v41) >> 2);
    v36 = -1;
    v49 = -1;
    *(_QWORD *)a4 = v44;
    *(_QWORD *)(a4 + 8) = v45;
    if (&v44 == (uint64_t *)a4)
      goto LABEL_52;
  }
  else
  {
    if (!*a5)
    {
      *a5 = 1;
      if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
      {
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v44);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v44, (uint64_t)"Partial word detected at end of utterance", 41);
        kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)&v44);
      }
    }
    v39 = *(_QWORD *)(a1 + 48);
    v42 = 0;
    v43 = 0;
    v41 = 0;
    std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v41, *(const void **)a1, *(_QWORD *)(a1 + 8), (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 2);
    LODWORD(v44) = *(_DWORD *)(a2 + 28);
    HIDWORD(v44) = v44;
    v45 = v39;
    v47 = 0;
    v48 = 0;
    __p = 0;
    std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, v41, (uint64_t)v42, (v42 - (_BYTE *)v41) >> 2);
    v36 = -1;
    v49 = -1;
    *(_QWORD *)a4 = v44;
    *(_QWORD *)(a4 + 8) = v45;
    if (&v44 == (uint64_t *)a4)
      goto LABEL_52;
  }
  std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)(a4 + 16), (char *)__p, (uint64_t)v47, (v47 - (_BYTE *)__p) >> 2);
  v36 = v49;
LABEL_52:
  *(_DWORD *)(a4 + 40) = v36;
  if (__p)
  {
    v47 = __p;
    operator delete(__p);
  }
  if (v41)
  {
    v42 = v41;
    operator delete(v41);
  }
  *(_QWORD *)(a1 + 8) = *(_QWORD *)a1;
  *(_QWORD *)(a1 + 48) = 0;
}

void kaldi::LoadUnpronouncedWords(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  kaldi::Input *v3;
  uint64_t v4;
  _QWORD *v5;
  std::locale::id *v6;
  const std::locale::facet *v7;
  unsigned __int8 v8;
  _QWORD *v9;
  _QWORD *v10;
  void *p_p;
  uint64_t v12;
  int v13;
  void *__p;
  uint64_t v15;
  uint64_t v16;
  std::locale v17;
  _BYTE v18[15];
  char v19;

  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)a2 = a2 + 8;
  v19 = 0;
  v3 = (kaldi::Input *)kaldi::Input::Input(v18, a1, &v19);
  v4 = kaldi::Input::Stream(v3);
  if (v19)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v17);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v17, (uint64_t)"Not expecting binary unpronounced words file.", 45);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v17);
  }
  v5 = (_QWORD *)v4;
  __p = 0;
  v15 = 0;
  v16 = 0;
  v6 = (std::locale::id *)MEMORY[0x1E0DE4A90];
  while (1)
  {
    std::ios_base::getloc((const std::ios_base *)((char *)v5 + *(_QWORD *)(*v5 - 24)));
    v7 = std::locale::use_facet(&v17, v6);
    v8 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v7->__vftable[2].~facet_0)(v7, 10);
    std::locale::~locale(&v17);
    v9 = std::getline[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v5, (uint64_t)&__p, v8);
    if ((*((_BYTE *)v9 + *(_QWORD *)(*v9 - 24) + 32) & 5) != 0)
      break;
    v13 = 0;
    if ((kaldi::ConvertStringToInteger<int>((uint64_t)&__p, &v13) & 1) == 0)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v17);
      v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v17, (uint64_t)"Invalid line in unpronounced words file: ", 41);
      if (v16 >= 0)
        p_p = &__p;
      else
        p_p = __p;
      if (v16 >= 0)
        v12 = HIBYTE(v16);
      else
        v12 = v15;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)p_p, v12);
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v17);
    }
    std::__tree<int>::__emplace_unique_key_args<int,int const&>((uint64_t **)a2, &v13, &v13);
  }
  if (SHIBYTE(v16) < 0)
    operator delete(__p);
  kaldi::Input::~Input((kaldi::Input *)v18);
}

void sub_1AD8FB978(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, std::locale a16)
{
  uint64_t v16;
  uint64_t v17;

  if (a15 < 0)
    operator delete(__p);
  kaldi::Input::~Input((kaldi::Input *)(v17 - 64));
  std::__tree<int>::destroy(v16, *(_QWORD **)(v16 + 8));
  _Unwind_Resume(a1);
}

uint64_t kaldi::ConvertStringToInteger<int>(uint64_t a1, _DWORD *a2)
{
  const char *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  unsigned int v8;
  int v9;
  uint64_t result;
  int *v11;
  char *__endptr;

  if (*(char *)(a1 + 23) >= 0)
    v3 = (const char *)a1;
  else
    v3 = *(const char **)a1;
  __endptr = 0;
  *__error() = 0;
  v4 = strtoll(v3, &__endptr, 10);
  if (__endptr == v3)
    return 0;
  v5 = v4;
  v6 = __endptr - 1;
  v7 = MEMORY[0x1E0C80978];
  do
  {
    v8 = v6[1];
    if ((v8 & 0x80000000) != 0)
      v9 = __maskrune(v8, 0x4000uLL);
    else
      v9 = *(_DWORD *)(v7 + 4 * v8 + 60) & 0x4000;
    ++v6;
  }
  while (v9);
  if (v6 == v3 || *v6)
    return 0;
  v11 = __error();
  result = 0;
  if (!*v11 && !((unint64_t)(v5 + 0x80000000) >> 32))
  {
    *a2 = v5;
    return 1;
  }
  return result;
}

uint64_t kaldi::WordBoundaryInfo::WordBoundaryInfo(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  _BYTE v15[15];
  char v16;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  v6 = a1 + 40;
  *(_QWORD *)(a1 + 32) = a1 + 40;
  v7 = (_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 48) = 0;
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 8);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)a2;
  v16 = 0;
  kaldi::Input::Input(v15, a3, &v16);
  v8 = (_QWORD *)kaldi::Input::Stream((kaldi::Input *)v15);
  kaldi::WordBoundaryInfo::Init((std::vector<int> *)a1, v8);
  if (*(char *)(a4 + 23) < 0)
  {
    if (!*(_QWORD *)(a4 + 8))
      goto LABEL_9;
  }
  else if (!*(_BYTE *)(a4 + 23))
  {
    goto LABEL_9;
  }
  kaldi::LoadUnpronouncedWords(a4, (uint64_t)&v12);
  std::__tree<int>::destroy((uint64_t)v7, *(_QWORD **)(a1 + 40));
  v9 = v13;
  *(_QWORD *)(a1 + 32) = v12;
  *(_QWORD *)(a1 + 40) = v9;
  v10 = v14;
  *(_QWORD *)(a1 + 48) = v14;
  if (v10)
  {
    v9[2] = v6;
    v12 = &v13;
    v13 = 0;
    v14 = 0;
    v9 = 0;
  }
  else
  {
    *v7 = v6;
  }
  std::__tree<int>::destroy((uint64_t)&v12, v9);
LABEL_9:
  kaldi::Input::~Input((kaldi::Input *)v15);
  return a1;
}

void sub_1AD8FBBB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v5;
  uint64_t v6;
  void *v8;
  va_list va;

  va_start(va, a5);
  kaldi::Input::~Input((kaldi::Input *)va);
  std::__tree<int>::destroy(v6, *(_QWORD **)(v5 + 40));
  v8 = *(void **)v5;
  if (*(_QWORD *)v5)
  {
    *(_QWORD *)(v5 + 8) = v8;
    operator delete(v8);
  }
  _Unwind_Resume(a1);
}

void kaldi::WordBoundaryInfo::Init(std::vector<int> *a1, _QWORD *a2)
{
  std::locale::id *v4;
  const std::locale::facet *v5;
  unsigned __int8 v6;
  _QWORD *v7;
  std::string *p_p;
  std::string::size_type v10;
  int v15;
  _QWORD *v19;
  std::string *v20;
  std::string::size_type size;
  _QWORD *v22;
  std::string *v23;
  std::string::size_type v24;
  std::string __p;
  std::locale v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  std::string v31;

  v4 = (std::locale::id *)MEMORY[0x1E0DE4A90];
  memset(&v31, 0, sizeof(v31));
  while (1)
  {
    std::ios_base::getloc((const std::ios_base *)((char *)a2 + *(_QWORD *)(*a2 - 24)));
    v5 = std::locale::use_facet(&v26, v4);
    v6 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v5->__vftable[2].~facet_0)(v5, 10);
    std::locale::~locale(&v26);
    v7 = std::getline[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a2, (uint64_t)&v31, v6);
    if ((*((_BYTE *)v7 + *(_QWORD *)(*v7 - 24) + 32) & 5) != 0)
      break;
    v28 = 0;
    v29 = 0;
    v30 = 0;
    kaldi::SplitStringToVector(&v31, " \t\r", 1, (uint64_t)&v28);
    v27 = 0;
    if (v29 - v28 != 48 || (kaldi::ConvertStringToInteger<int>(v28, &v27) & 1) == 0)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v26);
      v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v26, (uint64_t)"Invalid line in word-boundary file: ", 36);
      if ((v31.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v20 = &v31;
      else
        v20 = (std::string *)v31.__r_.__value_.__r.__words[0];
      if ((v31.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(v31.__r_.__value_.__r.__words[2]);
      else
        size = v31.__r_.__value_.__l.__size_;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)v20, size);
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v26);
    }
    if (v27 >= (unint64_t)(a1->__end_ - a1->__begin_))
    {
      LODWORD(v26.__locale_) = 0;
      std::vector<int>::resize(a1, v27 + 1, (std::vector<int>::const_reference)&v26);
    }
    if (*(char *)(v28 + 47) < 0)
      std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(v28 + 24), *(_QWORD *)(v28 + 32));
    else
      __p = *(std::string *)(v28 + 24);
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      p_p = &__p;
      switch(*((_BYTE *)&__p.__r_.__value_.__s + 23))
      {
        case 3:
          goto LABEL_52;
        case 5:
          if (LODWORD(__p.__r_.__value_.__l.__data_) != 1768383842 || __p.__r_.__value_.__s.__data_[4] != 110)
            goto LABEL_51;
          goto LABEL_64;
        case 7:
          if (LODWORD(__p.__r_.__value_.__l.__data_) != 2003726190
            || *(_DWORD *)((char *)__p.__r_.__value_.__r.__words + 3) != 1685221239)
          {
            goto LABEL_81;
          }
          goto LABEL_63;
        case 8:
          goto LABEL_44;
        case 9:
          if (__p.__r_.__value_.__r.__words[0] == 0x6F74656C676E6973 && __p.__r_.__value_.__s.__data_[8] == 110)
            goto LABEL_65;
          if (HIBYTE(__p.__r_.__value_.__r.__words[2]) == 8)
          {
            p_p = &__p;
            goto LABEL_44;
          }
LABEL_51:
          if (HIBYTE(__p.__r_.__value_.__r.__words[2]) != 3)
            goto LABEL_81;
LABEL_52:
          if (LOWORD(__p.__r_.__value_.__l.__data_) != 28261 || __p.__r_.__value_.__s.__data_[2] != 100)
          {
LABEL_81:
            kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v26);
            v22 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v26, (uint64_t)"Invalid line in word-boundary file: ", 36);
            if ((v31.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v23 = &v31;
            else
              v23 = (std::string *)v31.__r_.__value_.__r.__words[0];
            if ((v31.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v24 = HIBYTE(v31.__r_.__value_.__r.__words[2]);
            else
              v24 = v31.__r_.__value_.__l.__size_;
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)v23, v24);
            kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v26);
          }
          return;
        default:
          goto LABEL_81;
      }
LABEL_57:
      v15 = 2;
      goto LABEL_66;
    }
    v10 = __p.__r_.__value_.__l.__size_;
    if (__p.__r_.__value_.__l.__size_ == 5)
    {
      if (*(_DWORD *)__p.__r_.__value_.__l.__data_ == 1768383842
        && *(_BYTE *)(__p.__r_.__value_.__r.__words[0] + 4) == 110)
      {
LABEL_64:
        v15 = 1;
        goto LABEL_66;
      }
      v10 = __p.__r_.__value_.__l.__size_;
    }
    else if (__p.__r_.__value_.__l.__size_ == 7
           && *(_DWORD *)__p.__r_.__value_.__l.__data_ == 2003726190
           && *(_DWORD *)(__p.__r_.__value_.__r.__words[0] + 3) == 1685221239)
    {
LABEL_63:
      v15 = 5;
      goto LABEL_66;
    }
    if (v10 == 9)
    {
      if (*(_QWORD *)__p.__r_.__value_.__l.__data_ == 0x6F74656C676E6973
        && *(_BYTE *)(__p.__r_.__value_.__r.__words[0] + 8) == 110)
      {
LABEL_65:
        v15 = 3;
        goto LABEL_66;
      }
      v10 = __p.__r_.__value_.__l.__size_;
    }
    if (v10 == 3)
    {
      if (*(_WORD *)__p.__r_.__value_.__l.__data_ == 28261 && *(_BYTE *)(__p.__r_.__value_.__r.__words[0] + 2) == 100)
        goto LABEL_57;
      v10 = __p.__r_.__value_.__l.__size_;
    }
    if (v10 != 8)
      goto LABEL_81;
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
LABEL_44:
    if (p_p->__r_.__value_.__r.__words[0] != 0x6C616E7265746E69)
      goto LABEL_81;
    v15 = 4;
LABEL_66:
    a1->__begin_[v27] = v15;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    v26.__locale_ = (std::locale::__imp *)&v28;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v26);
  }
  if (a1->__begin_ == a1->__end_)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v26);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v26, (uint64_t)"Empty word-boundary file", 24);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v26);
  }
  if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v31.__r_.__value_.__l.__data_);
}

void sub_1AD8FC074(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void **a13)
{
  uint64_t v13;

  a13 = (void **)(v13 - 136);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a13);
  if (*(char *)(v13 - 89) < 0)
    operator delete(*(void **)(v13 - 112));
  _Unwind_Resume(a1);
}

void sub_1AD8FC08C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, std::locale a13)
{
  uint64_t v13;

  std::locale::~locale(&a13);
  if (*(char *)(v13 - 89) < 0)
    operator delete(*(void **)(v13 - 112));
  _Unwind_Resume(a1);
}

BOOL kaldi::WordAlignLattice(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5)
{
  _BOOL8 v5;
  uint64_t v6;
  int v7;
  void *v9;
  uint64_t v10;
  void *__p;
  void *v12;
  _QWORD *v13[6];
  _QWORD v14[6];
  uint64_t v15;

  kaldi::LatticeWordAligner::LatticeWordAligner((uint64_t)&v9, a1, a2, a3, a4, a5);
  v5 = kaldi::LatticeWordAligner::AlignLattice((kaldi::LatticeWordAligner *)&v9);
  std::__hash_table<std::__hash_value_type<kaldi::LatticeWordAligner::Tuple,int>,std::__unordered_map_hasher<kaldi::LatticeWordAligner::Tuple,std::__hash_value_type<kaldi::LatticeWordAligner::Tuple,int>,kaldi::LatticeWordAligner::TupleHash,kaldi::LatticeWordAligner::TupleEqual,true>,std::__unordered_map_equal<kaldi::LatticeWordAligner::Tuple,std::__hash_value_type<kaldi::LatticeWordAligner::Tuple,int>,kaldi::LatticeWordAligner::TupleEqual,kaldi::LatticeWordAligner::TupleHash,true>,std::allocator<std::__hash_value_type<kaldi::LatticeWordAligner::Tuple,int>>>::~__hash_table((uint64_t)&v15);
  std::deque<std::pair<kaldi::LatticeWordAligner::Tuple,int>>::~deque[abi:ne180100](v14);
  std::__tree<int>::destroy((uint64_t)v13, v13[1]);
  if (__p)
  {
    v12 = __p;
    operator delete(__p);
  }
  v9 = &unk_1E5D25800;
  v6 = v10;
  if (v10)
  {
    v7 = *(_DWORD *)(v10 + 56) - 1;
    *(_DWORD *)(v10 + 56) = v7;
    if (!v7)
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  }
  return v5;
}

void sub_1AD8FC16C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  kaldi::LatticeWordAligner::~LatticeWordAligner((kaldi::LatticeWordAligner *)&a9);
  _Unwind_Resume(a1);
}

BOOL kaldi::LatticeWordAligner::AlignLattice(kaldi::LatticeWordAligner *this)
{
  int v2;
  uint64_t StateForTuple;
  _BOOL8 v4;
  _QWORD *v5;
  _QWORD *v6;
  void *v8[3];
  void *__p;
  void *v10;
  int *v11;
  void *v12[3];
  void *v13;
  void *v14;
  void *v15[2];
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  _QWORD v19[34];

  (*(void (**)(_QWORD))(**((_QWORD **)this + 13) + 224))(*((_QWORD *)this + 13));
  v2 = *(_DWORD *)(*((_QWORD *)this + 1) + 88);
  if (v2 == -1)
  {
    if (kaldi::g_kaldi_verbose_level >= -1)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v19);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"Trying to word-align empty lattice.", 35);
      kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)v19);
    }
    return 0;
  }
  else
  {
    v18 = 0;
    v16 = 0u;
    v17 = 0u;
    *(_OWORD *)v15 = 0u;
    kaldi::LatticeWordAligner::ComputationState::ComputationState((kaldi::LatticeWordAligner::ComputationState *)v8, (const kaldi::LatticeWordAligner::ComputationState *)v15);
    LODWORD(v11) = v2;
    kaldi::LatticeWordAligner::ComputationState::ComputationState((kaldi::LatticeWordAligner::ComputationState *)v12, (const kaldi::LatticeWordAligner::ComputationState *)v8);
    if (__p)
    {
      v10 = __p;
      operator delete(__p);
    }
    if (v8[0])
    {
      v8[1] = v8[0];
      operator delete(v8[0]);
    }
    StateForTuple = kaldi::LatticeWordAligner::GetStateForTuple(this, &v11, 1);
    (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)this + 13) + 176))(*((_QWORD *)this + 13), StateForTuple);
    while (1)
    {
      if (!*((_QWORD *)this + 19))
      {
        kaldi::LatticeWordAligner::RemoveEpsilonsFromLattice(this);
        v4 = *((_BYTE *)this + 200) == 0;
        goto LABEL_20;
      }
      if (*((int *)this + 24) >= 1
        && (*(int (**)(_QWORD))(**((_QWORD **)this + 13) + 160))(*((_QWORD *)this + 13)) > *((_DWORD *)this + 24))
      {
        break;
      }
      kaldi::LatticeWordAligner::ProcessQueueElement(this);
      if (*((_BYTE *)this + 200))
      {
        (*(void (**)(_QWORD))(**((_QWORD **)this + 13) + 224))(*((_QWORD *)this + 13));
        goto LABEL_19;
      }
    }
    if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v19);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"Number of states in lattice exceeded max-states of ", 51);
      v5 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)", original lattice had ", 23);
      v6 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)" states.  Returning what we have.", 33);
      kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)v19);
    }
    kaldi::LatticeWordAligner::RemoveEpsilonsFromLattice(this);
LABEL_19:
    v4 = 0;
LABEL_20:
    if (v13)
    {
      v14 = v13;
      operator delete(v13);
    }
    if (v12[0])
    {
      v12[1] = v12[0];
      operator delete(v12[0]);
    }
    if (*((_QWORD *)&v16 + 1))
    {
      *(_QWORD *)&v17 = *((_QWORD *)&v16 + 1);
      operator delete(*((void **)&v16 + 1));
    }
    if (v15[0])
    {
      v15[1] = v15[0];
      operator delete(v15[0]);
    }
  }
  return v4;
}

void sub_1AD8FC3B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v10;
  va_list va;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  va_list va1;

  va_start(va1, a9);
  va_start(va, a9);
  v10 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  v17 = va_arg(va1, _QWORD);
  v18 = va_arg(va1, _QWORD);
  kaldi::LatticeWordAligner::Tuple::~Tuple((kaldi::LatticeWordAligner::Tuple *)va);
  kaldi::LatticeWordAligner::ComputationState::~ComputationState((kaldi::LatticeWordAligner::ComputationState *)va1);
  _Unwind_Resume(a1);
}

void kaldi::LatticeWordAligner::~LatticeWordAligner(kaldi::LatticeWordAligner *this)
{
  void *v2;
  _DWORD *v3;
  int v4;

  std::__hash_table<std::__hash_value_type<kaldi::LatticeWordAligner::Tuple,int>,std::__unordered_map_hasher<kaldi::LatticeWordAligner::Tuple,std::__hash_value_type<kaldi::LatticeWordAligner::Tuple,int>,kaldi::LatticeWordAligner::TupleHash,kaldi::LatticeWordAligner::TupleEqual,true>,std::__unordered_map_equal<kaldi::LatticeWordAligner::Tuple,std::__hash_value_type<kaldi::LatticeWordAligner::Tuple,int>,kaldi::LatticeWordAligner::TupleEqual,kaldi::LatticeWordAligner::TupleHash,true>,std::allocator<std::__hash_value_type<kaldi::LatticeWordAligner::Tuple,int>>>::~__hash_table((uint64_t)this + 160);
  std::deque<std::pair<kaldi::LatticeWordAligner::Tuple,int>>::~deque[abi:ne180100]((_QWORD *)this + 14);
  std::__tree<int>::destroy((uint64_t)this + 64, *((_QWORD **)this + 9));
  v2 = (void *)*((_QWORD *)this + 4);
  if (v2)
  {
    *((_QWORD *)this + 5) = v2;
    operator delete(v2);
  }
  *(_QWORD *)this = &unk_1E5D25800;
  v3 = (_DWORD *)*((_QWORD *)this + 1);
  if (v3)
  {
    v4 = v3[14] - 1;
    v3[14] = v4;
    if (!v4)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
  }
}

uint64_t kaldi::LatticeWordAligner::LatticeWordAligner(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6)
{
  uint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  int v17;
  uint64_t v19[34];
  _BYTE v20[24];
  _BYTE *v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v11 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 8) = v11;
  ++*(_DWORD *)(v11 + 56);
  *(_QWORD *)a1 = &unk_1E5D28AB0;
  *(_QWORD *)(a1 + 16) = a3;
  *(_QWORD *)(a1 + 24) = a4;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  std::vector<kaldi::WordBoundaryInfo::PhoneType>::__init_with_size[abi:ne180100]<kaldi::WordBoundaryInfo::PhoneType*,kaldi::WordBoundaryInfo::PhoneType*>((_QWORD *)(a1 + 32), *(const void **)a4, *(_QWORD *)(a4 + 8), (uint64_t)(*(_QWORD *)(a4 + 8) - *(_QWORD *)a4) >> 2);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a4 + 24);
  std::set<int>::set[abi:ne180100]((uint64_t *)(a1 + 64), a4 + 32);
  *(_BYTE *)(a1 + 88) = *(_BYTE *)(a4 + 56);
  *(_DWORD *)(a1 + 96) = a5;
  *(_QWORD *)(a1 + 104) = a6;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_DWORD *)(a1 + 192) = 1065353216;
  *(_BYTE *)(a1 + 200) = 0;
  v19[0] = 0;
  v12 = fst::TestProperties<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>(a1, 17039360, v19);
  *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) & (~v19[0] | 4) | v19[0] & v12;
  if ((v12 & 0x1040000) != 0x40000 && kaldi::g_kaldi_verbose_level >= -1)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v19);
    v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"[Lattice has input epsilons and/or is not input-deterministic ", 62);
    v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"(in Mohri sense)]-- i.e. lattice is not deterministic.  ", 56);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"Word-alignment may be slow and-or blow up in memory.", 52);
    kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)v19);
  }
  v21 = 0;
  fst::CreateSuperFinal<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>(a1, (uint64_t)v20);
  v15 = v21;
  if (v21 == v20)
  {
    v16 = 4;
    v15 = v20;
    goto LABEL_8;
  }
  if (v21)
  {
    v16 = 5;
LABEL_8:
    (*(void (**)(void))(*v15 + 8 * v16))();
  }
  if (!*(_DWORD *)(a1 + 60) || !*(_DWORD *)(a1 + 56))
  {
    v17 = fst::HighestNumberedOutputSymbol<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>(a2)
        + 1;
    if (!*(_DWORD *)(a1 + 60))
      *(_DWORD *)(a1 + 60) = v17;
    if (!*(_DWORD *)(a1 + 56))
      *(_DWORD *)(a1 + 56) = v17;
  }
  return a1;
}

void sub_1AD8FC6B4(_Unwind_Exception *a1)
{
  _QWORD *v1;
  kaldi::WordBoundaryInfo *v2;
  _QWORD *v3;
  uint64_t v4;
  _DWORD *v6;
  int v7;

  std::__hash_table<std::__hash_value_type<kaldi::LatticeWordAligner::Tuple,int>,std::__unordered_map_hasher<kaldi::LatticeWordAligner::Tuple,std::__hash_value_type<kaldi::LatticeWordAligner::Tuple,int>,kaldi::LatticeWordAligner::TupleHash,kaldi::LatticeWordAligner::TupleEqual,true>,std::__unordered_map_equal<kaldi::LatticeWordAligner::Tuple,std::__hash_value_type<kaldi::LatticeWordAligner::Tuple,int>,kaldi::LatticeWordAligner::TupleEqual,kaldi::LatticeWordAligner::TupleHash,true>,std::allocator<std::__hash_value_type<kaldi::LatticeWordAligner::Tuple,int>>>::~__hash_table(v4);
  std::deque<std::pair<kaldi::LatticeWordAligner::Tuple,int>>::~deque[abi:ne180100](v3);
  kaldi::WordBoundaryInfo::~WordBoundaryInfo(v2);
  *v1 = &unk_1E5D25800;
  v6 = (_DWORD *)v1[1];
  if (v6)
  {
    v7 = v6[14] - 1;
    v6[14] = v7;
    if (!v7)
      (*(void (**)(_DWORD *))(*(_QWORD *)v6 + 8))(v6);
  }
  _Unwind_Resume(a1);
}

void sub_1AD8FC778(void *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  JUMPOUT(0x1AD8FC770);
}

uint64_t fst::HighestNumberedOutputSymbol<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  int v5;
  _QWORD v7[3];
  _DWORD *v8;
  unint64_t v9;
  uint64_t v10;
  int v11;
  unsigned int v12;

  v12 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 128))(a1, &v10);
  v2 = 0;
  while (1)
  {
    if (!v10)
    {
      if ((int)v12 >= v11)
        return v2;
LABEL_7:
      v3 = v12;
      goto LABEL_8;
    }
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v10 + 16))(v10))
      break;
    if (!v10)
      goto LABEL_7;
    v3 = (*(uint64_t (**)(void))(*(_QWORD *)v10 + 24))();
LABEL_8:
    v9 = 0;
    (*(void (**)(uint64_t, uint64_t, _QWORD *))(*(_QWORD *)a1 + 136))(a1, v3, v7);
    while (1)
    {
      if (!v7[0])
      {
        if (v9 >= v7[2])
          goto LABEL_24;
LABEL_18:
        v5 = *(_DWORD *)(v7[1] + 48 * v9 + 4);
        if ((int)v2 <= v5)
          v2 = v5;
        else
          v2 = v2;
        goto LABEL_21;
      }
      if ((*(unsigned int (**)(_QWORD))(*(_QWORD *)v7[0] + 24))(v7[0]))
        break;
      if (!v7[0])
        goto LABEL_18;
      v4 = *(_DWORD *)((*(uint64_t (**)(void))(*(_QWORD *)v7[0] + 32))() + 4);
      if ((int)v2 <= v4)
        v2 = v4;
      else
        v2 = v2;
      if (v7[0])
        (*(void (**)(void))(*(_QWORD *)v7[0] + 40))();
      else
LABEL_21:
        ++v9;
    }
    if (v7[0])
    {
      (*(void (**)(void))(*(_QWORD *)v7[0] + 8))();
      goto LABEL_26;
    }
LABEL_24:
    if (v8)
      --*v8;
LABEL_26:
    if (v10)
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 32))(v10);
    else
      ++v12;
  }
  if (v10)
    (*(void (**)(void))(*(_QWORD *)v10 + 8))();
  return v2;
}

void sub_1AD8FC928(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  if (a14)
    (*(void (**)(uint64_t))(*(_QWORD *)a14 + 8))(a14);
  _Unwind_Resume(exception_object);
}

void kaldi::WordBoundaryInfo::~WordBoundaryInfo(kaldi::WordBoundaryInfo *this)
{
  _QWORD *v2;

  std::__tree<int>::destroy((uint64_t)this + 32, *((_QWORD **)this + 5));
  v2 = *(_QWORD **)this;
  if (*(_QWORD *)this)
  {
    *((_QWORD *)this + 1) = v2;
    operator delete(v2);
  }
}

_QWORD *std::vector<kaldi::WordBoundaryInfo::PhoneType>::__init_with_size[abi:ne180100]<kaldi::WordBoundaryInfo::PhoneType*,kaldi::WordBoundaryInfo::PhoneType*>(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<int>::__vallocate[abi:ne180100](result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1AD8FCA20(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__hash_table<std::__hash_value_type<kaldi::LatticeWordAligner::Tuple,int>,std::__unordered_map_hasher<kaldi::LatticeWordAligner::Tuple,std::__hash_value_type<kaldi::LatticeWordAligner::Tuple,int>,kaldi::LatticeWordAligner::TupleHash,kaldi::LatticeWordAligner::TupleEqual,true>,std::__unordered_map_equal<kaldi::LatticeWordAligner::Tuple,std::__hash_value_type<kaldi::LatticeWordAligner::Tuple,int>,kaldi::LatticeWordAligner::TupleEqual,kaldi::LatticeWordAligner::TupleHash,true>,std::allocator<std::__hash_value_type<kaldi::LatticeWordAligner::Tuple,int>>>::~__hash_table(uint64_t a1)
{
  void *v2;

  std::__hash_table<std::__hash_value_type<kaldi::LatticeWordAligner::Tuple,int>,std::__unordered_map_hasher<kaldi::LatticeWordAligner::Tuple,std::__hash_value_type<kaldi::LatticeWordAligner::Tuple,int>,kaldi::LatticeWordAligner::TupleHash,kaldi::LatticeWordAligner::TupleEqual,true>,std::__unordered_map_equal<kaldi::LatticeWordAligner::Tuple,std::__hash_value_type<kaldi::LatticeWordAligner::Tuple,int>,kaldi::LatticeWordAligner::TupleEqual,kaldi::LatticeWordAligner::TupleHash,true>,std::allocator<std::__hash_value_type<kaldi::LatticeWordAligner::Tuple,int>>>::__deallocate_node(a1, *(_QWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void std::__hash_table<std::__hash_value_type<kaldi::LatticeWordAligner::Tuple,int>,std::__unordered_map_hasher<kaldi::LatticeWordAligner::Tuple,std::__hash_value_type<kaldi::LatticeWordAligner::Tuple,int>,kaldi::LatticeWordAligner::TupleHash,kaldi::LatticeWordAligner::TupleEqual,true>,std::__unordered_map_equal<kaldi::LatticeWordAligner::Tuple,std::__hash_value_type<kaldi::LatticeWordAligner::Tuple,int>,kaldi::LatticeWordAligner::TupleEqual,kaldi::LatticeWordAligner::TupleHash,true>,std::allocator<std::__hash_value_type<kaldi::LatticeWordAligner::Tuple,int>>>::__deallocate_node(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;

  if (a2)
  {
    v2 = a2;
    do
    {
      v3 = (_QWORD *)*v2;
      std::__destroy_at[abi:ne180100]<std::pair<kaldi::LatticeWordAligner::Tuple const,int>,0>(v2 + 2);
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<kaldi::LatticeWordAligner::Tuple const,int>,0>(_QWORD *a1)
{
  void *v2;
  void *v3;

  v2 = (void *)a1[4];
  if (v2)
  {
    a1[5] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[1];
  if (v3)
  {
    a1[2] = v3;
    operator delete(v3);
  }
}

void kaldi::LatticeWordAligner::Tuple::~Tuple(kaldi::LatticeWordAligner::Tuple *this)
{
  void *v2;
  void *v3;

  v2 = (void *)*((_QWORD *)this + 4);
  if (v2)
  {
    *((_QWORD *)this + 5) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 1);
  if (v3)
  {
    *((_QWORD *)this + 2) = v3;
    operator delete(v3);
  }
}

void kaldi::LatticeWordAligner::ComputationState::~ComputationState(kaldi::LatticeWordAligner::ComputationState *this)
{
  void *v2;
  void *v3;

  v2 = (void *)*((_QWORD *)this + 3);
  if (v2)
  {
    *((_QWORD *)this + 4) = v2;
    operator delete(v2);
  }
  v3 = *(void **)this;
  if (*(_QWORD *)this)
  {
    *((_QWORD *)this + 1) = v3;
    operator delete(v3);
  }
}

uint64_t std::deque<std::pair<kaldi::LatticeWordAligner::Tuple,int>>::~deque[abi:ne180100](_QWORD *a1)
{
  _QWORD *v2;
  void **v3;
  void **v4;
  unint64_t v5;
  void **v6;
  char *v7;
  unint64_t v8;
  char *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  void *v13;

  v2 = a1 + 5;
  v3 = (void **)a1[1];
  v4 = (void **)a1[2];
  if (v4 == v3)
  {
    v4 = (void **)a1[1];
  }
  else
  {
    v5 = a1[4];
    v6 = &v3[v5 / 0x38];
    v7 = (char *)*v6 + 72 * (v5 % 0x38);
    v8 = (unint64_t)v3[(a1[5] + v5) / 0x38] + 72 * ((a1[5] + v5) % 0x38);
    if (v7 != (char *)v8)
    {
      do
      {
        std::allocator<std::pair<kaldi::LatticeWordAligner::Tuple,int>>::destroy[abi:ne180100]((uint64_t)v2, v7);
        v7 += 72;
        if (v7 - (_BYTE *)*v6 == 4032)
        {
          v9 = (char *)v6[1];
          ++v6;
          v7 = v9;
        }
      }
      while (v7 != (char *)v8);
      v3 = (void **)a1[1];
      v4 = (void **)a1[2];
    }
  }
  *v2 = 0;
  v10 = (char *)v4 - (char *)v3;
  if ((unint64_t)((char *)v4 - (char *)v3) >= 0x11)
  {
    do
    {
      operator delete(*v3);
      v4 = (void **)a1[2];
      v3 = (void **)(a1[1] + 8);
      a1[1] = v3;
      v10 = (char *)v4 - (char *)v3;
    }
    while ((unint64_t)((char *)v4 - (char *)v3) > 0x10);
  }
  v11 = v10 >> 3;
  if (v11 == 1)
  {
    v12 = 28;
  }
  else
  {
    if (v11 != 2)
      goto LABEL_16;
    v12 = 56;
  }
  a1[4] = v12;
LABEL_16:
  while (v3 != v4)
  {
    v13 = *v3++;
    operator delete(v13);
  }
  return std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **>>::~__split_buffer((uint64_t)a1);
}

void std::allocator<std::pair<kaldi::LatticeWordAligner::Tuple,int>>::destroy[abi:ne180100](uint64_t a1, _QWORD *a2)
{
  void *v3;
  void *v4;

  v3 = (void *)a2[4];
  if (v3)
  {
    a2[5] = v3;
    operator delete(v3);
  }
  v4 = (void *)a2[1];
  if (v4)
  {
    a2[2] = v4;
    operator delete(v4);
  }
}

uint64_t kaldi::LatticeWordAligner::GetStateForTuple(kaldi::LatticeWordAligner *this, int **a2, int a3)
{
  char *v6;
  uint64_t *v7;
  uint64_t v8;
  int **v10;
  void *v11[3];
  void *__p;
  void *v13;
  int v14;

  v6 = (char *)this + 160;
  v7 = std::__hash_table<std::__hash_value_type<kaldi::LatticeWordAligner::Tuple,int>,std::__unordered_map_hasher<kaldi::LatticeWordAligner::Tuple,std::__hash_value_type<kaldi::LatticeWordAligner::Tuple,int>,kaldi::LatticeWordAligner::TupleHash,kaldi::LatticeWordAligner::TupleEqual,true>,std::__unordered_map_equal<kaldi::LatticeWordAligner::Tuple,std::__hash_value_type<kaldi::LatticeWordAligner::Tuple,int>,kaldi::LatticeWordAligner::TupleEqual,kaldi::LatticeWordAligner::TupleHash,true>,std::allocator<std::__hash_value_type<kaldi::LatticeWordAligner::Tuple,int>>>::find<kaldi::LatticeWordAligner::Tuple>((_QWORD *)this + 20, a2);
  if (v7)
    return *((unsigned int *)v7 + 20);
  v8 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 13) + 200))(*((_QWORD *)this + 13));
  v10 = a2;
  *((_DWORD *)std::__hash_table<std::__hash_value_type<kaldi::LatticeWordAligner::Tuple,int>,std::__unordered_map_hasher<kaldi::LatticeWordAligner::Tuple,std::__hash_value_type<kaldi::LatticeWordAligner::Tuple,int>,kaldi::LatticeWordAligner::TupleHash,kaldi::LatticeWordAligner::TupleEqual,true>,std::__unordered_map_equal<kaldi::LatticeWordAligner::Tuple,std::__hash_value_type<kaldi::LatticeWordAligner::Tuple,int>,kaldi::LatticeWordAligner::TupleEqual,kaldi::LatticeWordAligner::TupleHash,true>,std::allocator<std::__hash_value_type<kaldi::LatticeWordAligner::Tuple,int>>>::__emplace_unique_key_args<kaldi::LatticeWordAligner::Tuple,std::piecewise_construct_t const&,std::tuple<kaldi::LatticeWordAligner::Tuple const&>,std::tuple<>>((uint64_t)v6, a2, (uint64_t)&std::piecewise_construct, (_DWORD **)&v10)+ 20) = v8;
  if (a3)
  {
    LODWORD(v10) = *(_DWORD *)a2;
    kaldi::LatticeWordAligner::ComputationState::ComputationState((kaldi::LatticeWordAligner::ComputationState *)v11, (const kaldi::LatticeWordAligner::ComputationState *)(a2 + 1));
    v14 = v8;
    std::deque<std::pair<kaldi::LatticeWordAligner::Tuple,int>>::push_front((uint64_t)this + 112, &v10);
    if (__p)
    {
      v13 = __p;
      operator delete(__p);
    }
    if (v11[0])
    {
      v11[1] = v11[0];
      operator delete(v11[0]);
    }
  }
  return v8;
}

void sub_1AD8FCDD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  kaldi::LatticeWordAligner::Tuple::~Tuple((kaldi::LatticeWordAligner::Tuple *)&a9);
  _Unwind_Resume(a1);
}

void kaldi::LatticeWordAligner::RemoveEpsilonsFromLattice(kaldi::LatticeWordAligner *this)
{
  void *v2;
  uint64_t v3;
  char *v4;
  char *v5;
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  char *v20;
  char *v21;
  int32x2_t v22;
  void *__p;
  void *v24;
  uint64_t v25;
  int v26;

  v2 = (void *)*((_QWORD *)this + 13);
  v22 = vdup_n_s32(0x7F800000u);
  v24 = 0;
  v25 = 0;
  __p = 0;
  fst::RmEpsilon<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>(v2, 1, (uint64_t *)&v22, -1, 0.00097656);
  if (__p)
  {
    v24 = __p;
    operator delete(__p);
  }
  v19 = 0;
  v20 = 0;
  v21 = 0;
  v3 = *((_QWORD *)this + 3);
  if (*(_DWORD *)(v3 + 28))
  {
    v4 = 0;
  }
  else
  {
    v5 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v21, 1uLL);
    *(_DWORD *)v5 = *((_DWORD *)this + 15);
    v4 = v5 + 4;
    v19 = v5;
    v21 = &v5[4 * v6];
    v20 = v5 + 4;
    v3 = *((_QWORD *)this + 3);
  }
  if (!*(_DWORD *)(v3 + 24))
  {
    if (v4 >= v21)
    {
      v8 = (char *)v19;
      v9 = (v4 - (_BYTE *)v19) >> 2;
      v10 = v9 + 1;
      if ((unint64_t)(v9 + 1) >> 62)
        std::vector<int>::__throw_length_error[abi:ne180100]();
      v11 = v21 - (_BYTE *)v19;
      if ((v21 - (_BYTE *)v19) >> 1 > v10)
        v10 = v11 >> 1;
      if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFFCLL)
        v12 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v12 = v10;
      if (v12)
      {
        v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v21, v12);
        v8 = (char *)v19;
        v4 = v20;
      }
      else
      {
        v13 = 0;
      }
      v14 = &v13[4 * v9];
      v15 = &v13[4 * v12];
      *(_DWORD *)v14 = *((_DWORD *)this + 14);
      v7 = v14 + 4;
      while (v4 != v8)
      {
        v16 = *((_DWORD *)v4 - 1);
        v4 -= 4;
        *((_DWORD *)v14 - 1) = v16;
        v14 -= 4;
      }
      v19 = v14;
      v20 = v7;
      v21 = v15;
      if (v8)
        operator delete(v8);
    }
    else
    {
      *(_DWORD *)v4 = *((_DWORD *)this + 14);
      v7 = v4 + 4;
    }
    v20 = v7;
    v4 = v7;
  }
  if (v19 != v4)
  {
    fst::RemoveSomeInputSymbols<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,int>((uint64_t)&v19, *((_QWORD *)this + 13));
    v17 = *((_QWORD *)this + 13);
    v26 = 1;
    fst::ArcMap<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::ProjectMapper<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>(v17, &v26);
    v18 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v17 + 112))(v17);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v17 + 288))(v17, v18);
    v4 = (char *)v19;
  }
  if (v4)
  {
    v20 = v4;
    operator delete(v4);
  }
}

void sub_1AD8FCFF4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void kaldi::LatticeWordAligner::ProcessQueueElement(kaldi::LatticeWordAligner *this)
{
  _QWORD *v2;
  unint64_t v3;
  _DWORD *v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  void *v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  float32x2_t *v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  float32x2_t v19;
  void *v20;
  _BYTE *v21;
  uint64_t v22;
  _QWORD v23[2];
  void *v24;
  void *v25;
  uint64_t v26;
  int v27;
  float32x2_t v28;
  int *v29;
  void *__p;
  void *v31;
  uint64_t v32;
  void *v33;
  void *v34;
  int v35;
  void *v36[3];
  void *v37;
  void *v38;
  int v39;
  void *v40[3];
  void *v41;
  void *v42;
  _BYTE v43[16];
  void *v44;
  void *v45;
  uint64_t v46;
  int StateForTuple;
  int *v48;
  void *v49[3];
  void *v50;
  void *v51;
  float v52;

  v2 = (_QWORD *)((char *)this + 112);
  v3 = *((_QWORD *)this + 19) + *((_QWORD *)this + 18) - 1;
  v4 = (_DWORD *)(*(_QWORD *)(*((_QWORD *)this + 15) + 8 * (v3 / 0x38)) + 72 * (v3 % 0x38));
  LODWORD(v48) = *v4;
  kaldi::LatticeWordAligner::ComputationState::ComputationState((kaldi::LatticeWordAligner::ComputationState *)v49, (const kaldi::LatticeWordAligner::ComputationState *)(v4 + 2));
  v5 = *((_QWORD *)this + 19) + *((_QWORD *)this + 18) - 1;
  v6 = *(unsigned int *)(*(_QWORD *)(*((_QWORD *)this + 15) + 8 * (v5 / 0x38)) + 72 * (v5 % 0x38) + 64);
  std::deque<std::pair<kaldi::LatticeWordAligner::Tuple,int>>::pop_back(v2);
  v44 = 0;
  v45 = 0;
  v46 = 0;
  v39 = (int)v48;
  kaldi::LatticeWordAligner::ComputationState::ComputationState((kaldi::LatticeWordAligner::ComputationState *)v40, (const kaldi::LatticeWordAligner::ComputationState *)v49);
  if (kaldi::LatticeWordAligner::ComputationState::OutputArc((uint64_t)v49, (uint64_t)this + 32, *((kaldi::TransitionModel **)this + 2), (uint64_t)v43, (_BYTE *)this + 200))
  {
    StateForTuple = kaldi::LatticeWordAligner::GetStateForTuple(this, &v48, 1);
    (*(void (**)(_QWORD, uint64_t, _BYTE *))(**((_QWORD **)this + 13) + 208))(*((_QWORD *)this + 13), v6, v43);
    goto LABEL_30;
  }
  v7 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 1) + 64) + 8 * (int)v48);
  v29 = *(int **)v7;
  v31 = 0;
  v32 = 0;
  __p = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, *(const void **)(v7 + 8), *(_QWORD *)(v7 + 16), (uint64_t)(*(_QWORD *)(v7 + 16) - *(_QWORD *)(v7 + 8)) >> 2);
  LODWORD(v23[0]) = (_DWORD)v29;
  v28.i32[0] = 2139095040;
  v52 = INFINITY;
  if (*(float *)&v29 != INFINITY)
  {
    v8 = 1;
    v9 = __p;
    if (!__p)
      goto LABEL_6;
    goto LABEL_5;
  }
  v9 = __p;
  if (*((float *)&v29 + 1) != v52 || v31 != __p)
  {
    v8 = 1;
    if (!__p)
      goto LABEL_6;
LABEL_5:
    v31 = v9;
    operator delete(v9);
    goto LABEL_6;
  }
  v8 = 0;
  if (__p)
    goto LABEL_5;
LABEL_6:
  if (v8)
  {
    v10 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 1) + 64) + 8 * (int)v48);
    v29 = *(int **)v10;
    v31 = 0;
    v32 = 0;
    __p = 0;
    std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, *(const void **)(v10 + 8), *(_QWORD *)(v10 + 16), (uint64_t)(*(_QWORD *)(v10 + 16) - *(_QWORD *)(v10 + 8)) >> 2);
    LODWORD(v23[0]) = (_DWORD)v29;
    v28.i32[0] = 0;
    v52 = 0.0;
    if (*(float *)&v29 == 0.0)
    {
      v11 = __p;
      if (!__p)
      {
LABEL_10:
        v35 = (int)v48;
        kaldi::LatticeWordAligner::ComputationState::ComputationState((kaldi::LatticeWordAligner::ComputationState *)v36, (const kaldi::LatticeWordAligner::ComputationState *)v49);
        kaldi::LatticeWordAligner::ProcessFinal((uint64_t)this, (uint64_t)&v35, v6);
        if (v37)
        {
          v38 = v37;
          operator delete(v37);
        }
        if (v36[0])
        {
          v36[1] = v36[0];
          operator delete(v36[0]);
        }
        goto LABEL_14;
      }
    }
    else
    {
      v11 = __p;
      if (!__p)
        goto LABEL_10;
    }
    v31 = v11;
    operator delete(v11);
    goto LABEL_10;
  }
LABEL_14:
  v12 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 1) + 64) + 8 * (int)v48);
  v14 = *(_QWORD *)(v12 + 48);
  v13 = *(_QWORD *)(v12 + 56);
  if (v13 == v14)
    v15 = 0;
  else
    v15 = *(float32x2_t **)(v12 + 48);
  if (v13 != v14)
  {
    if ((unint64_t)((v13 - v14) / 48) <= 1)
      v16 = 1;
    else
      v16 = (v13 - v14) / 48;
    do
    {
      LODWORD(v29) = (_DWORD)v48;
      kaldi::LatticeWordAligner::ComputationState::ComputationState((kaldi::LatticeWordAligner::ComputationState *)&__p, (const kaldi::LatticeWordAligner::ComputationState *)v49);
      kaldi::LatticeWordAligner::ComputationState::Advance((uint64_t)&__p, v15, &v28);
      LODWORD(v29) = v15[5].i32[0];
      v17 = kaldi::LatticeWordAligner::GetStateForTuple(this, &v29, 1);
      v18 = *((_QWORD *)this + 13);
      v19 = v28;
      v21 = 0;
      v22 = 0;
      v20 = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v20, 0, 0, 0);
      v23[0] = 0;
      v23[1] = v19;
      v25 = 0;
      v26 = 0;
      v24 = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v24, v20, (uint64_t)v21, (v21 - (_BYTE *)v20) >> 2);
      v27 = v17;
      (*(void (**)(uint64_t, uint64_t, _QWORD *))(*(_QWORD *)v18 + 208))(v18, v6, v23);
      if (v24)
      {
        v25 = v24;
        operator delete(v24);
      }
      if (v20)
      {
        v21 = v20;
        operator delete(v20);
      }
      if (v33)
      {
        v34 = v33;
        operator delete(v33);
      }
      if (__p)
      {
        v31 = __p;
        operator delete(__p);
      }
      v15 += 6;
      --v16;
    }
    while (v16);
  }
LABEL_30:
  if (v41)
  {
    v42 = v41;
    operator delete(v41);
  }
  if (v40[0])
  {
    v40[1] = v40[0];
    operator delete(v40[0]);
  }
  if (v44)
  {
    v45 = v44;
    operator delete(v44);
  }
  if (v50)
  {
    v51 = v50;
    operator delete(v50);
  }
  if (v49[0])
  {
    v49[1] = v49[0];
    operator delete(v49[0]);
  }
}

void sub_1AD8FD4A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37)
{
  uint64_t v37;
  void *v39;

  kaldi::LatticeWordAligner::Tuple::~Tuple((kaldi::LatticeWordAligner::Tuple *)&a29);
  kaldi::LatticeWordAligner::Tuple::~Tuple((kaldi::LatticeWordAligner::Tuple *)&a37);
  v39 = *(void **)(v37 - 192);
  if (v39)
  {
    *(_QWORD *)(v37 - 184) = v39;
    operator delete(v39);
  }
  kaldi::LatticeWordAligner::Tuple::~Tuple((kaldi::LatticeWordAligner::Tuple *)(v37 - 160));
  _Unwind_Resume(a1);
}

kaldi::LatticeWordAligner::ComputationState *kaldi::LatticeWordAligner::ComputationState::ComputationState(kaldi::LatticeWordAligner::ComputationState *this, const kaldi::LatticeWordAligner::ComputationState *a2)
{
  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(this, *(const void **)a2, *((_QWORD *)a2 + 1), (uint64_t)(*((_QWORD *)a2 + 1) - *(_QWORD *)a2) >> 2);
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 5) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((_QWORD *)this + 3, *((const void **)a2 + 3), *((_QWORD *)a2 + 4), (uint64_t)(*((_QWORD *)a2 + 4) - *((_QWORD *)a2 + 3)) >> 2);
  *((_QWORD *)this + 6) = *((_QWORD *)a2 + 6);
  return this;
}

void sub_1AD8FD5A0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

int64x2_t std::deque<std::pair<kaldi::LatticeWordAligner::Tuple,int>>::push_front(uint64_t a1, _DWORD *a2)
{
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  int64x2_t result;

  v4 = *(_QWORD *)(a1 + 32);
  if (!v4)
  {
    std::deque<std::pair<kaldi::LatticeWordAligner::Tuple,int>>::__add_front_capacity((void **)a1);
    v4 = *(_QWORD *)(a1 + 32);
  }
  v5 = *(_QWORD *)(a1 + 8);
  v6 = (_QWORD *)(v5 + 8 * (v4 / 0x38));
  v7 = *v6 + 72 * (v4 % 0x38);
  if (*(_QWORD *)(a1 + 16) == v5)
    v8 = 0;
  else
    v8 = v7;
  if (v8 == *v6)
    v8 = *(v6 - 1) + 4032;
  *(_DWORD *)(v8 - 72) = *a2;
  kaldi::LatticeWordAligner::ComputationState::ComputationState((kaldi::LatticeWordAligner::ComputationState *)(v8 - 64), (const kaldi::LatticeWordAligner::ComputationState *)(a2 + 2));
  *(_DWORD *)(v8 - 8) = a2[16];
  result = vaddq_s64(*(int64x2_t *)(a1 + 32), (int64x2_t)xmmword_1AE140E90);
  *(int64x2_t *)(a1 + 32) = result;
  return result;
}

uint64_t *std::__hash_table<std::__hash_value_type<kaldi::LatticeWordAligner::Tuple,int>,std::__unordered_map_hasher<kaldi::LatticeWordAligner::Tuple,std::__hash_value_type<kaldi::LatticeWordAligner::Tuple,int>,kaldi::LatticeWordAligner::TupleHash,kaldi::LatticeWordAligner::TupleEqual,true>,std::__unordered_map_equal<kaldi::LatticeWordAligner::Tuple,std::__hash_value_type<kaldi::LatticeWordAligner::Tuple,int>,kaldi::LatticeWordAligner::TupleEqual,kaldi::LatticeWordAligner::TupleHash,true>,std::allocator<std::__hash_value_type<kaldi::LatticeWordAligner::Tuple,int>>>::find<kaldi::LatticeWordAligner::Tuple>(_QWORD *a1, int **this)
{
  char *v4;
  uint64_t v5;
  uint64_t v6;
  int8x8_t v7;
  unint64_t v8;
  uint8x8_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t **v12;
  uint64_t *i;
  unint64_t v14;

  v4 = (char *)(this + 1);
  v5 = *(int *)this;
  v6 = kaldi::LatticeWordAligner::ComputationState::Hash(this + 1);
  v7 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v7)
    return 0;
  v8 = v5 + 102763 * v6;
  v9 = (uint8x8_t)vcnt_s8(v7);
  v9.i16[0] = vaddlv_u8(v9);
  v10 = v9.u32[0];
  if (v9.u32[0] > 1uLL)
  {
    v11 = v8;
    if (v8 >= *(_QWORD *)&v7)
      v11 = v8 % *(_QWORD *)&v7;
  }
  else
  {
    v11 = (*(_QWORD *)&v7 - 1) & v8;
  }
  v12 = *(uint64_t ***)(*a1 + 8 * v11);
  if (!v12)
    return 0;
  for (i = *v12; i; i = (uint64_t *)*i)
  {
    v14 = i[1];
    if (v14 == v8)
    {
      if (*((_DWORD *)i + 4) == *(_DWORD *)this
        && kaldi::LatticeWordAligner::ComputationState::operator==((uint64_t)(i + 3), (uint64_t)v4))
      {
        return i;
      }
    }
    else
    {
      if (v10 > 1)
      {
        if (v14 >= *(_QWORD *)&v7)
          v14 %= *(_QWORD *)&v7;
      }
      else
      {
        v14 &= *(_QWORD *)&v7 - 1;
      }
      if (v14 != v11)
        return 0;
    }
  }
  return i;
}

uint64_t kaldi::LatticeWordAligner::ComputationState::Hash(int **this)
{
  int *v1;
  int *v2;
  uint64_t v3;
  uint64_t v4;
  int *v5;
  int *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v1 = *this;
  v2 = this[1];
  if (*this == v2)
  {
    v3 = 0;
  }
  else
  {
    v3 = 0;
    do
    {
      v4 = *v1++;
      v3 = v4 + 7853 * v3;
    }
    while (v1 != v2);
  }
  v5 = this[3];
  v6 = this[4];
  if (v5 == v6)
  {
    v9 = 0;
  }
  else
  {
    v7 = 0;
    do
    {
      v8 = *v5++;
      v7 = v8 + 7853 * v7;
    }
    while (v5 != v6);
    v9 = 90647 * v7;
  }
  return v9 + v3;
}

BOOL kaldi::LatticeWordAligner::ComputationState::operator==(uint64_t a1, uint64_t a2)
{
  const void *v4;
  size_t v6;
  const void *v7;
  const void *v9;
  size_t v10;
  const void *v11;

  v4 = *(const void **)a1;
  v6 = *(_QWORD *)(a1 + 8) - (_QWORD)v4;
  v7 = *(const void **)a2;
  if (v6 == *(_QWORD *)(a2 + 8) - (_QWORD)v7
    && !memcmp(v4, v7, v6)
    && (v9 = *(const void **)(a1 + 24),
        v10 = *(_QWORD *)(a1 + 32) - (_QWORD)v9,
        v11 = *(const void **)(a2 + 24),
        v10 == *(_QWORD *)(a2 + 32) - (_QWORD)v11)
    && !memcmp(v9, v11, v10)
    && *(float *)(a1 + 48) == *(float *)(a2 + 48))
  {
    return *(float *)(a1 + 52) == *(float *)(a2 + 52);
  }
  else
  {
    return 0;
  }
}

uint64_t *std::__hash_table<std::__hash_value_type<kaldi::LatticeWordAligner::Tuple,int>,std::__unordered_map_hasher<kaldi::LatticeWordAligner::Tuple,std::__hash_value_type<kaldi::LatticeWordAligner::Tuple,int>,kaldi::LatticeWordAligner::TupleHash,kaldi::LatticeWordAligner::TupleEqual,true>,std::__unordered_map_equal<kaldi::LatticeWordAligner::Tuple,std::__hash_value_type<kaldi::LatticeWordAligner::Tuple,int>,kaldi::LatticeWordAligner::TupleEqual,kaldi::LatticeWordAligner::TupleHash,true>,std::allocator<std::__hash_value_type<kaldi::LatticeWordAligner::Tuple,int>>>::__emplace_unique_key_args<kaldi::LatticeWordAligner::Tuple,std::piecewise_construct_t const&,std::tuple<kaldi::LatticeWordAligner::Tuple const&>,std::tuple<>>(uint64_t a1, int **this, uint64_t a3, _DWORD **a4)
{
  unint64_t v4;
  uint64_t v8;
  char *v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  unint64_t v13;
  uint64_t **v14;
  uint64_t *i;
  unint64_t v16;
  float v17;
  float v18;
  _BOOL8 v19;
  unint64_t v20;
  unint64_t v21;
  size_t v22;
  _QWORD *v23;
  unint64_t v24;
  _DWORD **v26;
  _QWORD v27[3];

  v9 = (char *)(this + 1);
  v8 = *(int *)this;
  v10 = v8 + 102763 * kaldi::LatticeWordAligner::ComputationState::Hash(this + 1);
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      v4 = v10;
      if (v10 >= v11)
        v4 = v10 % v11;
    }
    else
    {
      v4 = (v11 - 1) & v10;
    }
    v14 = *(uint64_t ***)(*(_QWORD *)a1 + 8 * v4);
    if (v14)
    {
      v26 = a4;
      for (i = *v14; i; i = (uint64_t *)*i)
      {
        v16 = i[1];
        if (v16 == v10)
        {
          if (*((_DWORD *)i + 4) == *(_DWORD *)this
            && kaldi::LatticeWordAligner::ComputationState::operator==((uint64_t)(i + 3), (uint64_t)v9))
          {
            return i;
          }
        }
        else
        {
          if (v13 > 1)
          {
            if (v16 >= v11)
              v16 %= v11;
          }
          else
          {
            v16 &= v11 - 1;
          }
          if (v16 != v4)
            break;
        }
      }
      a4 = v26;
    }
  }
  std::__hash_table<std::__hash_value_type<kaldi::LatticeWordAligner::Tuple,int>,std::__unordered_map_hasher<kaldi::LatticeWordAligner::Tuple,std::__hash_value_type<kaldi::LatticeWordAligner::Tuple,int>,kaldi::LatticeWordAligner::TupleHash,kaldi::LatticeWordAligner::TupleEqual,true>,std::__unordered_map_equal<kaldi::LatticeWordAligner::Tuple,std::__hash_value_type<kaldi::LatticeWordAligner::Tuple,int>,kaldi::LatticeWordAligner::TupleEqual,kaldi::LatticeWordAligner::TupleHash,true>,std::allocator<std::__hash_value_type<kaldi::LatticeWordAligner::Tuple,int>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<kaldi::LatticeWordAligner::Tuple const&>,std::tuple<>>(a1, v10, a4, (uint64_t)v27);
  v17 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v18 = *(float *)(a1 + 32);
  if (!v11 || (float)(v18 * (float)v11) < v17)
  {
    v19 = 1;
    if (v11 >= 3)
      v19 = (v11 & (v11 - 1)) != 0;
    v20 = v19 | (2 * v11);
    v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21)
      v22 = v21;
    else
      v22 = v20;
    std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::__rehash<true>(a1, v22);
    v11 = *(_QWORD *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
        v4 = v10 % v11;
      else
        v4 = v10;
    }
    else
    {
      v4 = (v11 - 1) & v10;
    }
  }
  v23 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v23)
  {
    *(_QWORD *)v27[0] = *v23;
    *v23 = v27[0];
  }
  else
  {
    *(_QWORD *)v27[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v27[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = a1 + 16;
    if (*(_QWORD *)v27[0])
    {
      v24 = *(_QWORD *)(*(_QWORD *)v27[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v24 >= v11)
          v24 %= v11;
      }
      else
      {
        v24 &= v11 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v24) = v27[0];
    }
  }
  i = (uint64_t *)v27[0];
  v27[0] = 0;
  ++*(_QWORD *)(a1 + 24);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<kaldi::LatticeWordAligner::Tuple,int>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<kaldi::LatticeWordAligner::Tuple,int>,void *>>>>::reset[abi:ne180100]((uint64_t)v27, 0);
  return i;
}

void sub_1AD8FDB4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<kaldi::LatticeWordAligner::Tuple,int>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<kaldi::LatticeWordAligner::Tuple,int>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

kaldi::LatticeWordAligner::ComputationState *std::__hash_table<std::__hash_value_type<kaldi::LatticeWordAligner::Tuple,int>,std::__unordered_map_hasher<kaldi::LatticeWordAligner::Tuple,std::__hash_value_type<kaldi::LatticeWordAligner::Tuple,int>,kaldi::LatticeWordAligner::TupleHash,kaldi::LatticeWordAligner::TupleEqual,true>,std::__unordered_map_equal<kaldi::LatticeWordAligner::Tuple,std::__hash_value_type<kaldi::LatticeWordAligner::Tuple,int>,kaldi::LatticeWordAligner::TupleEqual,kaldi::LatticeWordAligner::TupleHash,true>,std::allocator<std::__hash_value_type<kaldi::LatticeWordAligner::Tuple,int>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<kaldi::LatticeWordAligner::Tuple const&>,std::tuple<>>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _DWORD **a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v7;
  _QWORD *v8;
  const kaldi::LatticeWordAligner::ComputationState *v9;
  kaldi::LatticeWordAligner::ComputationState *result;

  v7 = a1 + 16;
  v8 = operator new(0x58uLL);
  *(_QWORD *)a4 = v8;
  *(_QWORD *)(a4 + 8) = v7;
  *(_BYTE *)(a4 + 16) = 0;
  *v8 = 0;
  v8[1] = a2;
  v9 = (const kaldi::LatticeWordAligner::ComputationState *)(*a3 + 2);
  *((_DWORD *)v8 + 4) = **a3;
  result = kaldi::LatticeWordAligner::ComputationState::ComputationState((kaldi::LatticeWordAligner::ComputationState *)(v8 + 3), v9);
  *((_DWORD *)v8 + 20) = 0;
  *(_BYTE *)(a4 + 16) = 1;
  return result;
}

void sub_1AD8FDBD4(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__hash_node<std::__hash_value_type<kaldi::LatticeWordAligner::Tuple,int>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<kaldi::LatticeWordAligner::Tuple,int>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<kaldi::LatticeWordAligner::Tuple,int>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<kaldi::LatticeWordAligner::Tuple,int>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  _QWORD *v2;

  v2 = *(_QWORD **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<kaldi::LatticeWordAligner::Tuple const,int>,0>(v2 + 2);
    operator delete(v2);
  }
}

void std::deque<std::pair<kaldi::LatticeWordAligner::Tuple,int>>::__add_front_capacity(void **a1)
{
  _BYTE *v2;
  _BYTE *v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  _BYTE *v8;
  _BYTE *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  int64_t v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  int64_t v21;
  char *v22;
  unint64_t v23;
  char *v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  char *v33;
  _QWORD *v34;
  uint64_t v35;
  void *v36;
  char *v37;
  char *v38;
  char *v39;
  uint64_t v40;
  void *v41;
  void *__p;
  char *v43;
  char *v44;
  char *v45;
  _QWORD *v46;

  v2 = a1[1];
  v3 = a1[2];
  v4 = (v3 - v2) >> 3;
  if (v3 == v2)
    v5 = 0;
  else
    v5 = 56 * v4 - 1;
  v6 = (char *)a1[4];
  if (v5 - (unint64_t)&v6[(_QWORD)a1[5]] < 0x38)
  {
    v7 = (uint64_t)(a1 + 3);
    v8 = a1[3];
    v9 = *a1;
    v10 = v8 - (_BYTE *)*a1;
    if (v4 >= v10 >> 3)
    {
      if (v8 == v9)
        v11 = 1;
      else
        v11 = v10 >> 2;
      v46 = a1 + 3;
      __p = std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>(v7, v11);
      v43 = (char *)__p;
      v44 = (char *)__p;
      v45 = (char *)__p + 8 * v12;
      v41 = operator new(0xFC0uLL);
      std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **> &>::push_back(&__p, &v41);
      v13 = (char *)a1[1];
      v14 = v44;
      if (v13 == a1[2])
      {
        v33 = (char *)a1[1];
      }
      else
      {
        do
        {
          if (v14 == v45)
          {
            v15 = v43 - (_BYTE *)__p;
            if (v43 <= __p)
            {
              if (v14 == __p)
                v23 = 1;
              else
                v23 = (v14 - (_BYTE *)__p) >> 2;
              v24 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)v46, v23);
              v26 = v43;
              v14 = &v24[8 * (v23 >> 2)];
              v27 = v44 - v43;
              if (v44 != v43)
              {
                v14 = &v24[8 * (v23 >> 2) + (v27 & 0xFFFFFFFFFFFFFFF8)];
                v28 = 8 * (v27 >> 3);
                v29 = &v24[8 * (v23 >> 2)];
                do
                {
                  v30 = *(_QWORD *)v26;
                  v26 += 8;
                  *(_QWORD *)v29 = v30;
                  v29 += 8;
                  v28 -= 8;
                }
                while (v28);
              }
              v31 = __p;
              __p = v24;
              v43 = &v24[8 * (v23 >> 2)];
              v44 = v14;
              v45 = &v24[8 * v25];
              if (v31)
              {
                operator delete(v31);
                v14 = v44;
              }
            }
            else
            {
              v16 = v15 >> 3;
              v17 = v15 >> 3 < -1;
              v18 = (v15 >> 3) + 2;
              if (v17)
                v19 = v18;
              else
                v19 = v16 + 1;
              v20 = &v43[-8 * (v19 >> 1)];
              v21 = v14 - v43;
              if (v14 != v43)
              {
                memmove(&v43[-8 * (v19 >> 1)], v43, v14 - v43);
                v14 = v43;
              }
              v22 = &v14[-8 * (v19 >> 1)];
              v14 = &v20[v21];
              v43 = v22;
              v44 = &v20[v21];
            }
          }
          v32 = *(_QWORD *)v13;
          v13 += 8;
          *(_QWORD *)v14 = v32;
          v14 = v44 + 8;
          v44 += 8;
        }
        while (v13 != a1[2]);
        v33 = (char *)a1[1];
      }
      v36 = *a1;
      v37 = v43;
      *a1 = __p;
      a1[1] = v37;
      __p = v36;
      v43 = v33;
      v38 = (char *)a1[3];
      v39 = v45;
      a1[2] = v14;
      a1[3] = v39;
      v44 = v13;
      v45 = v38;
      if (v14 - v37 == 8)
        v40 = 28;
      else
        v40 = (uint64_t)a1[4] + 56;
      a1[4] = (void *)v40;
      if (v13 != v33)
        v44 = &v13[(v33 - v13 + 7) & 0xFFFFFFFFFFFFFFF8];
      if (v36)
        operator delete(v36);
    }
    else
    {
      if (v2 == v9)
      {
        __p = operator new(0xFC0uLL);
        std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **>>::push_back(a1, &__p);
        v34 = a1[2];
        __p = (void *)*(v34 - 1);
        a1[2] = v34 - 1;
      }
      else
      {
        __p = operator new(0xFC0uLL);
      }
      std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **>>::push_front((uint64_t)a1, &__p);
      if ((_BYTE *)a1[2] - (_BYTE *)a1[1] == 8)
        v35 = 28;
      else
        v35 = (uint64_t)a1[4] + 56;
      a1[4] = (void *)v35;
    }
  }
  else
  {
    a1[4] = v6 + 56;
    __p = (void *)*((_QWORD *)v3 - 1);
    a1[2] = v3 - 8;
    std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **>>::push_front((uint64_t)a1, &__p);
  }
}

void sub_1AD8FDEFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  void *v12;

  operator delete(v12);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void fst::RemoveSomeInputSymbols<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,int>(uint64_t a1, uint64_t a2)
{
  _BYTE v3[16];
  void *v4;
  void *__p;
  void *v6;
  _BYTE v7[16];
  void *v8;
  void *v9;
  void *v10;

  kaldi::ConstIntegerSet<int>::ConstIntegerSet((uint64_t)v7, a1);
  kaldi::ConstIntegerSet<int>::ConstIntegerSet((uint64_t)v3, (uint64_t)v7);
  fst::Map<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::RemoveSomeInputSymbolsMapper<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,int>>(a2, (uint64_t)v3);
  if (__p)
  {
    v6 = __p;
    operator delete(__p);
  }
  if (v4)
    operator delete(v4);
  if (v9)
  {
    v10 = v9;
    operator delete(v9);
  }
  if (v8)
    operator delete(v8);
}

void sub_1AD8FDFC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  kaldi::ConstIntegerSet<int>::~ConstIntegerSet(&a9);
  kaldi::ConstIntegerSet<int>::~ConstIntegerSet(&a17);
  _Unwind_Resume(a1);
}

void fst::Map<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::RemoveSomeInputSymbolsMapper<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,int>>(uint64_t a1, uint64_t a2)
{
  _BYTE v3[16];
  void *v4;
  void *__p;
  void *v6;

  kaldi::ConstIntegerSet<int>::ConstIntegerSet((uint64_t)v3, a2);
  fst::ArcMap<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::RemoveSomeInputSymbolsMapper<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,int>>(a1, (uint64_t)v3);
  if (__p)
  {
    v6 = __p;
    operator delete(__p);
  }
  if (v4)
    operator delete(v4);
}

void sub_1AD8FE040(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  kaldi::ConstIntegerSet<int>::~ConstIntegerSet(&a9);
  _Unwind_Resume(a1);
}

uint64_t kaldi::ConstIntegerSet<int>::ConstIntegerSet(uint64_t a1, uint64_t a2)
{
  int *v3;

  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((_QWORD *)(a1 + 40), *(const void **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 2);
  std::__sort<std::__less<int,int> &,int *>();
  v3 = std::__unique[abi:ne180100]<std::_ClassicAlgPolicy,std::__wrap_iter<int *>,std::__wrap_iter<int *>,std::__equal_to &>(*(int **)(a1 + 40), *(int **)(a1 + 48));
  if (*(int **)(a1 + 48) != v3)
    *(_QWORD *)(a1 + 48) = v3;
  kaldi::ConstIntegerSet<int>::InitInternal((int *)a1);
  return a1;
}

{
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((_QWORD *)(a1 + 40), *(const void **)(a2 + 40), *(_QWORD *)(a2 + 48), (uint64_t)(*(_QWORD *)(a2 + 48) - *(_QWORD *)(a2 + 40)) >> 2);
  kaldi::ConstIntegerSet<int>::InitInternal((int *)a1);
  return a1;
}

void sub_1AD8FE10C(_Unwind_Exception *exception_object)
{
  void **v1;

  if (*v1)
    operator delete(*v1);
  _Unwind_Resume(exception_object);
}

uint64_t fst::ArcMap<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::RemoveSomeInputSymbolsMapper<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,int>>(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  int v7;
  fst *v8;
  _QWORD *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  void *v14;
  uint64_t v15;
  void *v16[2];
  char v17;
  char v18;
  _QWORD v19[2];
  char v20;
  char v21;
  uint64_t v22;
  void *v23;
  _BYTE *v24;
  _QWORD v25[2];
  void *__p;
  void *v27;
  uint64_t v28;
  int v29;
  _QWORD v30[2];
  _BYTE *v31;
  _BYTE *v32;

  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a1 + 280))(a1, 0);
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  if ((_DWORD)result != -1)
  {
    v11 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 64))(a1, 0x3FFFFFFF0007, 0);
    if ((*(int (**)(uint64_t))(*(_QWORD *)a1 + 160))(a1) >= 1)
    {
      v5 = 0;
      do
      {
        (*(void (**)(uint64_t, uint64_t, _QWORD *))(*(_QWORD *)a1 + 296))(a1, v5, v25);
        while (!(*(unsigned int (**)(_QWORD))(*(_QWORD *)v25[0] + 24))(v25[0]))
        {
          v6 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v25[0] + 32))(v25[0]);
          fst::RemoveSomeInputSymbolsMapper<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,int>::operator()(a2, v6, (uint64_t)v30);
          (*(void (**)(_QWORD, _QWORD *))(*(_QWORD *)v25[0] + 88))(v25[0], v30);
          if (v31)
          {
            v32 = v31;
            operator delete(v31);
          }
          (*(void (**)(_QWORD))(*(_QWORD *)v25[0] + 40))(v25[0]);
        }
        if (v25[0])
          (*(void (**)(void))(*(_QWORD *)v25[0] + 8))();
        (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)a1 + 32))(&v22, a1, v5);
        v25[0] = 0;
        v25[1] = v22;
        v27 = 0;
        v28 = 0;
        __p = 0;
        std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, v23, (uint64_t)v24, (v24 - (_BYTE *)v23) >> 2);
        v29 = -1;
        fst::RemoveSomeInputSymbolsMapper<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,int>::operator()(a2, (uint64_t)v25, (uint64_t)v30);
        if (__p)
        {
          v27 = __p;
          operator delete(__p);
        }
        if (v23)
        {
          v24 = v23;
          operator delete(v23);
        }
        if (!v30[0])
          goto LABEL_26;
        v7 = FLAGS_fst_error_fatal;
        if (FLAGS_fst_error_fatal)
        {
          std::string::basic_string[abi:ne180100]<0>(v19, "FATAL");
          v8 = fst::LogMessage::LogMessage((fst *)&v21, (uint64_t)v19);
        }
        else
        {
          std::string::basic_string[abi:ne180100]<0>(v16, "ERROR");
          v8 = fst::LogMessage::LogMessage((fst *)&v18, (uint64_t)v16);
        }
        v9 = (_QWORD *)fst::cerr(v8);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"ArcMap: non-zero arc labels for superfinal arc", 46);
        if (v7)
        {
          fst::LogMessage::~LogMessage((fst::LogMessage *)&v21);
          if (v20 < 0)
          {
            v10 = (void *)v19[0];
LABEL_24:
            operator delete(v10);
          }
        }
        else
        {
          fst::LogMessage::~LogMessage((fst::LogMessage *)&v18);
          if (v17 < 0)
          {
            v10 = v16[0];
            goto LABEL_24;
          }
        }
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 192))(a1, 4, 4);
LABEL_26:
        v12 = v30[1];
        v14 = 0;
        v15 = 0;
        v13 = 0;
        std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v13, v31, (uint64_t)v32, (v32 - v31) >> 2);
        (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(_QWORD *)a1 + 184))(a1, v5, &v12);
        if (v13)
        {
          v14 = v13;
          operator delete(v13);
        }
        if (v31)
        {
          v32 = v31;
          operator delete(v31);
        }
        v5 = (v5 + 1);
      }
      while ((int)v5 < (*(int (**)(uint64_t))(*(_QWORD *)a1 + 160))(a1));
    }
    return (*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)a1 + 192))(a1, v11 & 0xFFFFFFFFCD70FFFFLL, 0x3FFFFFFF0007);
  }
  return result;
}

void sub_1AD8FE468(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,void *a40,uint64_t a41)
{
  uint64_t v41;
  void *v43;

  fst::LogMessage::~LogMessage((fst::LogMessage *)&a23);
  if (a19 < 0)
    operator delete(__p);
  v43 = *(void **)(v41 - 120);
  if (v43)
  {
    *(_QWORD *)(v41 - 112) = v43;
    operator delete(v43);
  }
  _Unwind_Resume(a1);
}

BOOL fst::RemoveSomeInputSymbolsMapper<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,int>::operator()@<W0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  _BOOL8 result;

  *(_QWORD *)a3 = *(_QWORD *)a2;
  *(_QWORD *)(a3 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)(a3 + 24) = 0;
  *(_QWORD *)(a3 + 32) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((_QWORD *)(a3 + 16), *(const void **)(a2 + 16), *(_QWORD *)(a2 + 24), (uint64_t)(*(_QWORD *)(a2 + 24) - *(_QWORD *)(a2 + 16)) >> 2);
  *(_DWORD *)(a3 + 40) = *(_DWORD *)(a2 + 40);
  result = kaldi::ConstIntegerSet<int>::count(a1, *(_DWORD *)a3);
  if (result)
    *(_DWORD *)a3 = 0;
  return result;
}

void sub_1AD8FE5E0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 24) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

void sub_1AD8FE658(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void **v3;
  void **v4;
  void *v6;

  v4 = v2;
  v6 = *v4;
  if (*v4)
  {
    *(_QWORD *)(v1 + 48) = v6;
    operator delete(v6);
  }
  if (*v3)
    operator delete(*v3);
  _Unwind_Resume(exception_object);
}

uint64_t fst::ArcMap<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::ProjectMapper<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>(uint64_t a1, _DWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  int v8;
  fst *v9;
  _QWORD *v10;
  void *v11;
  unint64_t v12;
  fst *v13;
  uint64_t v14;
  void *v15;
  void *v16;
  uint64_t v17;
  void *v18[2];
  char v19;
  char v20;
  _QWORD v21[2];
  char v22;
  char v23;
  uint64_t v24;
  void *v25;
  _BYTE *v26;
  uint64_t v27;
  uint64_t v28;
  void *__p;
  _BYTE *v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  _BYTE *v35;
  _BYTE *v36;
  uint64_t v37;
  int v38;

  if (*a2 == 1 || ((*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a1 + 280))(a1, 0), *a2 != 2))
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a1 + 288))(a1, 0);
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  if ((_DWORD)result != -1)
  {
    v13 = (fst *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 64))(a1, 0x3FFFFFFF0007, 0);
    if ((*(int (**)(uint64_t))(*(_QWORD *)a1 + 160))(a1) >= 1)
    {
      v5 = 0;
      do
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(_QWORD *)a1 + 296))(a1, v5, &v27);
        while (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v27 + 24))(v27))
        {
          v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v27 + 32))(v27);
          fst::ProjectMapper<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>::operator()(a2, v6, (uint64_t)&v33);
          (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v27 + 88))(v27, &v33);
          if (v35)
          {
            v36 = v35;
            operator delete(v35);
          }
          (*(void (**)(uint64_t))(*(_QWORD *)v27 + 40))(v27);
        }
        if (v27)
          (*(void (**)(void))(*(_QWORD *)v27 + 8))();
        (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)a1 + 32))(&v24, a1, v5);
        v27 = 0;
        v28 = v24;
        v30 = 0;
        v31 = 0;
        __p = 0;
        std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, v25, (uint64_t)v26, (v26 - (_BYTE *)v25) >> 2);
        v32 = -1;
        if (*a2 == 1)
          v7 = &v27;
        else
          v7 = (uint64_t *)((char *)&v27 + 4);
        LODWORD(v33) = *(_DWORD *)v7;
        HIDWORD(v33) = v33;
        v34 = v28;
        v36 = 0;
        v37 = 0;
        v35 = 0;
        std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v35, __p, (uint64_t)v30, (v30 - (_BYTE *)__p) >> 2);
        v38 = -1;
        if (__p)
        {
          v30 = __p;
          operator delete(__p);
        }
        if (v25)
        {
          v26 = v25;
          operator delete(v25);
        }
        if (!v33)
          goto LABEL_32;
        v8 = FLAGS_fst_error_fatal;
        if (FLAGS_fst_error_fatal)
        {
          std::string::basic_string[abi:ne180100]<0>(v21, "FATAL");
          v9 = fst::LogMessage::LogMessage((fst *)&v23, (uint64_t)v21);
        }
        else
        {
          std::string::basic_string[abi:ne180100]<0>(v18, "ERROR");
          v9 = fst::LogMessage::LogMessage((fst *)&v20, (uint64_t)v18);
        }
        v10 = (_QWORD *)fst::cerr(v9);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"ArcMap: non-zero arc labels for superfinal arc", 46);
        if (v8)
        {
          fst::LogMessage::~LogMessage((fst::LogMessage *)&v23);
          if (v22 < 0)
          {
            v11 = (void *)v21[0];
LABEL_30:
            operator delete(v11);
          }
        }
        else
        {
          fst::LogMessage::~LogMessage((fst::LogMessage *)&v20);
          if (v19 < 0)
          {
            v11 = v18[0];
            goto LABEL_30;
          }
        }
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 192))(a1, 4, 4);
LABEL_32:
        v14 = v34;
        v16 = 0;
        v17 = 0;
        v15 = 0;
        std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v15, v35, (uint64_t)v36, (v36 - v35) >> 2);
        (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(_QWORD *)a1 + 184))(a1, v5, &v14);
        if (v15)
        {
          v16 = v15;
          operator delete(v15);
        }
        if (v35)
        {
          v36 = v35;
          operator delete(v35);
        }
        v5 = (v5 + 1);
      }
      while ((int)v5 < (*(int (**)(uint64_t))(*(_QWORD *)a1 + 160))(a1));
    }
    v12 = fst::ProjectProperties((unint64_t)v13, *a2 == 1);
    return (*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)a1 + 192))(a1, v12, 0x3FFFFFFF0007);
  }
  return result;
}

void sub_1AD8FEA28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,void *a40,uint64_t a41)
{
  uint64_t v41;
  void *v43;

  fst::LogMessage::~LogMessage((fst::LogMessage *)&a23);
  if (a19 < 0)
    operator delete(__p);
  v43 = *(void **)(v41 - 120);
  if (v43)
  {
    *(_QWORD *)(v41 - 112) = v43;
    operator delete(v43);
  }
  _Unwind_Resume(a1);
}

_QWORD *fst::ProjectMapper<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>::operator()@<X0>(_DWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int *v4;
  int v5;
  int v6;
  _QWORD *result;

  if (*a1 == 1)
    v4 = (int *)a2;
  else
    v4 = (int *)(a2 + 4);
  v5 = *v4;
  v6 = *(_DWORD *)(a2 + 40);
  *(_DWORD *)a3 = v5;
  *(_DWORD *)(a3 + 4) = v5;
  *(_QWORD *)(a3 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a3 + 24) = 0;
  *(_QWORD *)(a3 + 32) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  result = std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((_QWORD *)(a3 + 16), *(const void **)(a2 + 16), *(_QWORD *)(a2 + 24), (uint64_t)(*(_QWORD *)(a2 + 24) - *(_QWORD *)(a2 + 16)) >> 2);
  *(_DWORD *)(a3 + 40) = v6;
  return result;
}

uint64_t std::deque<std::pair<kaldi::LatticeWordAligner::Tuple,int>>::pop_back(_QWORD *a1)
{
  _QWORD *v2;
  unint64_t v3;

  v2 = a1 + 5;
  v3 = a1[5] + a1[4] - 1;
  std::allocator<std::pair<kaldi::LatticeWordAligner::Tuple,int>>::destroy[abi:ne180100]((uint64_t)(a1 + 5), (_QWORD *)(*(_QWORD *)(a1[1] + 8 * (v3 / 0x38)) + 72 * (v3 % 0x38)));
  --*v2;
  return std::deque<std::pair<kaldi::LatticeWordAligner::Tuple,int>>::__maybe_remove_back_spare[abi:ne180100](a1, 1);
}

uint64_t kaldi::LatticeWordAligner::ComputationState::OutputArc(uint64_t a1, uint64_t a2, kaldi::TransitionModel *a3, uint64_t a4, _BYTE *a5)
{
  if ((kaldi::LatticeWordAligner::ComputationState::OutputUnpronouncedWordArc(a1, a2, (uint64_t)a3, a4) & 1) != 0
    || (kaldi::LatticeWordAligner::ComputationState::OutputNormalWordArc(a1, a2, a3, a4, a5) & 1) != 0
    || (kaldi::LatticeWordAligner::ComputationState::OutputSilenceArc(a1, a2, a3, a4, a5) & 1) != 0)
  {
    return 1;
  }
  else
  {
    return kaldi::LatticeWordAligner::ComputationState::OutputOnePhoneWordArc(a1, a2, a3, a4, a5);
  }
}

void kaldi::LatticeWordAligner::ProcessFinal(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v6;
  uint64_t v7;
  uint64_t *v8;
  int *v9;
  unint64_t v10;
  int *v11;
  unint64_t v12;
  int v13;
  uint64_t v14;
  int v15;
  int v16;
  int v17;
  int v18;
  BOOL v19;
  uint64_t v20;
  int *v21;
  void *__p;
  void *v23;
  uint64_t v24;
  int StateForTuple;
  uint64_t v26;
  void *v27;
  _BYTE *v28;
  _DWORD v29[2];
  void *v30;
  void *v31;
  uint64_t v32;

  if (*(_QWORD *)(a2 + 8) != *(_QWORD *)(a2 + 16) || *(_QWORD *)(a2 + 32) != *(_QWORD *)(a2 + 40))
  {
    __p = 0;
    v23 = 0;
    v24 = 0;
    kaldi::LatticeWordAligner::ComputationState::OutputArcForce(a2 + 8, a1 + 32, *(kaldi::TransitionModel **)(a1 + 16), (uint64_t)&v20, (_BYTE *)(a1 + 200));
    StateForTuple = kaldi::LatticeWordAligner::GetStateForTuple((kaldi::LatticeWordAligner *)a1, (int **)a2, 1);
    (*(void (**)(_QWORD, uint64_t, uint64_t *))(**(_QWORD **)(a1 + 104) + 208))(*(_QWORD *)(a1 + 104), a3, &v20);
    v6 = __p;
    if (!__p)
      return;
    v23 = __p;
    goto LABEL_5;
  }
  v20 = *(_QWORD *)(a2 + 56);
  __p = 0;
  v23 = 0;
  v21 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v21, 0, 0, 0);
  v7 = *(_QWORD *)(a1 + 104);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v7 + 32))(&v26, v7, a3);
  if ((float)(*(float *)&v26 + *((float *)&v26 + 1)) < (float)(*(float *)&v20 + *((float *)&v20 + 1)))
    goto LABEL_10;
  if ((float)(*(float *)&v26 + *((float *)&v26 + 1)) > (float)(*(float *)&v20 + *((float *)&v20 + 1)))
    goto LABEL_13;
  if (*(float *)&v26 < *(float *)&v20)
  {
LABEL_10:
    v8 = &v26;
    goto LABEL_14;
  }
  if (*(float *)&v26 > *(float *)&v20)
    goto LABEL_13;
  v9 = (int *)v27;
  v10 = (unint64_t)(v28 - (_BYTE *)v27) >> 2;
  v11 = v21;
  v12 = (unint64_t)((_BYTE *)__p - (_BYTE *)v21) >> 2;
  if ((int)v10 > (int)v12)
    goto LABEL_13;
  v8 = &v26;
  if ((int)v10 >= 1 && (int)v10 >= (int)v12)
  {
    v14 = ((unint64_t)(v28 - (_BYTE *)v27) >> 2) - 1;
    while (1)
    {
      v16 = *v9++;
      v15 = v16;
      v18 = *v11++;
      v17 = v18;
      if (v15 < v18)
        break;
      v19 = v15 > v17 || v14-- == 0;
      v8 = &v26;
      if (v19)
        goto LABEL_14;
    }
LABEL_13:
    v8 = &v20;
  }
LABEL_14:
  v13 = *((_DWORD *)v8 + 1);
  v29[0] = *(_DWORD *)v8;
  v29[1] = v13;
  v31 = 0;
  v32 = 0;
  v30 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v30, (const void *)v8[1], v8[2], (v8[2] - v8[1]) >> 2);
  (*(void (**)(uint64_t, uint64_t, _DWORD *))(*(_QWORD *)v7 + 184))(v7, a3, v29);
  if (v30)
  {
    v31 = v30;
    operator delete(v30);
  }
  if (v27)
  {
    v28 = v27;
    operator delete(v27);
  }
  v6 = v21;
  if (v21)
  {
    __p = v21;
LABEL_5:
    operator delete(v6);
  }
}

void sub_1AD8FEEA0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  uint64_t v17;
  void *v19;

  v19 = *(void **)(v17 - 56);
  if (v19)
  {
    *(_QWORD *)(v17 - 48) = v19;
    operator delete(v19);
  }
  if (__p)
    operator delete(__p);
  if (a10)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

float32x2_t kaldi::LatticeWordAligner::ComputationState::Advance(uint64_t a1, float32x2_t *a2, float32x2_t *a3)
{
  __int32 v6;
  unint64_t v7;
  char *v8;
  _DWORD *v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  char *v15;
  __int32 *v16;
  char *v17;
  __int32 v18;
  float32x2_t result;

  std::vector<int>::__insert_with_size[abi:ne180100]<std::__wrap_iter<int const*>,std::__wrap_iter<int const*>>((std::vector<int> *)a1, *(_QWORD *)(a1 + 8), *(char **)&a2[2], *(char **)&a2[3], (uint64_t)(*(_QWORD *)&a2[3] - *(_QWORD *)&a2[2]) >> 2);
  v6 = a2->i32[0];
  if (a2->i32[0])
  {
    v7 = *(_QWORD *)(a1 + 40);
    v8 = *(char **)(a1 + 32);
    if ((unint64_t)v8 >= v7)
    {
      v10 = *(char **)(a1 + 24);
      v11 = (v8 - v10) >> 2;
      if ((unint64_t)(v11 + 1) >> 62)
        std::vector<int>::__throw_length_error[abi:ne180100]();
      v12 = v7 - (_QWORD)v10;
      v13 = (uint64_t)(v7 - (_QWORD)v10) >> 1;
      if (v13 <= v11 + 1)
        v13 = v11 + 1;
      if (v12 >= 0x7FFFFFFFFFFFFFFCLL)
        v14 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v14 = v13;
      if (v14)
      {
        v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(a1 + 40, v14);
        v10 = *(char **)(a1 + 24);
        v8 = *(char **)(a1 + 32);
        v6 = a2->i32[0];
      }
      else
      {
        v15 = 0;
      }
      v16 = (__int32 *)&v15[4 * v11];
      v17 = &v15[4 * v14];
      *v16 = v6;
      v9 = v16 + 1;
      while (v8 != v10)
      {
        v18 = *((_DWORD *)v8 - 1);
        v8 -= 4;
        *--v16 = v18;
      }
      *(_QWORD *)(a1 + 24) = v16;
      *(_QWORD *)(a1 + 32) = v9;
      *(_QWORD *)(a1 + 40) = v17;
      if (v10)
        operator delete(v10);
    }
    else
    {
      *(_DWORD *)v8 = v6;
      v9 = v8 + 4;
    }
    *(_QWORD *)(a1 + 32) = v9;
  }
  result = vadd_f32(*(float32x2_t *)(a1 + 48), a2[1]);
  *a3 = result;
  *(_QWORD *)(a1 + 48) = 0;
  return result;
}

uint64_t std::deque<std::pair<kaldi::LatticeWordAligner::Tuple,int>>::__maybe_remove_back_spare[abi:ne180100](_QWORD *a1, int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  int v7;

  v3 = a1[1];
  v2 = a1[2];
  if (v2 == v3)
    v4 = 0;
  else
    v4 = 56 * ((v2 - v3) >> 3) - 1;
  v5 = v4 - (a1[5] + a1[4]);
  if (v5 < 0x38)
    a2 = 1;
  if (v5 < 0x70)
    v7 = a2;
  else
    v7 = 0;
  if ((v7 & 1) == 0)
  {
    operator delete(*(void **)(v2 - 8));
    a1[2] -= 8;
  }
  return v7 ^ 1u;
}

_QWORD *fst::operator<<<fst::LatticeWeightTpl<float>,int>(_QWORD *a1, uint64_t a2)
{
  char v4;
  unint64_t v5;
  uint64_t v6;
  char v8;
  char v9;

  fst::operator<<<float>(a1, (float *)a2);
  v4 = strlen(FLAGS_fst_weight_separator) == 1;
  FstCheck(v4, "strlen(FLAGS_fst_weight_separator) == 1", "../libquasar/libkaldi/src/fstext/lattice-weight.h");
  v8 = *FLAGS_fst_weight_separator;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)&v8, 1);
  if (*(_QWORD *)(a2 + 16) != *(_QWORD *)(a2 + 8))
  {
    v5 = 0;
    do
    {
      std::ostream::operator<<();
      ++v5;
      v6 = *(_QWORD *)(a2 + 16) - *(_QWORD *)(a2 + 8);
      if (v5 < v6 >> 2)
      {
        v9 = 95;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)&v9, 1);
        v6 = *(_QWORD *)(a2 + 16) - *(_QWORD *)(a2 + 8);
      }
    }
    while (v5 < v6 >> 2);
  }
  return a1;
}

_QWORD *fst::operator<<<float>(_QWORD *a1, float *a2)
{
  const char *v4;
  uint64_t v5;
  char v6;
  float v7;
  const char *v8;
  _QWORD *v9;
  uint64_t v10;
  char v12;

  if (*a2 == INFINITY)
  {
    v4 = "Infinity";
    v5 = 8;
LABEL_5:
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)v4, v5);
    goto LABEL_6;
  }
  if (*a2 == -INFINITY)
  {
    v4 = "-Infinity";
    v5 = 9;
    goto LABEL_5;
  }
  std::ostream::operator<<();
LABEL_6:
  v6 = strlen(FLAGS_fst_weight_separator) == 1;
  FstCheck(v6, "strlen(FLAGS_fst_weight_separator) == 1", "../libquasar/libkaldi/src/fstext/lattice-weight.h");
  v12 = *FLAGS_fst_weight_separator;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)&v12, 1);
  v7 = a2[1];
  if (v7 == INFINITY)
  {
    v8 = "Infinity";
    v9 = a1;
    v10 = 8;
  }
  else
  {
    if (v7 != -INFINITY)
    {
      std::ostream::operator<<();
      return a1;
    }
    v8 = "-Infinity";
    v9 = a1;
    v10 = 9;
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)v8, v10);
  return a1;
}

void fst::ArcSort<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::ILabelCompare<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>(uint64_t a1)
{
  uint64_t v1[2];
  _OWORD v2[2];
  uint64_t v3;
  char *v4;
  _OWORD v5[2];
  char v6;
  void **v7;

  v3 = a1;
  v4 = &v6;
  memset(v5, 0, sizeof(v5));
  v1[0] = a1;
  v1[1] = (uint64_t)&v6;
  memset(v2, 0, sizeof(v2));
  fst::StateMap<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::ArcSortMapper<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::ILabelCompare<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>(a1, v1);
  v7 = (void **)v2;
  std::vector<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::__destroy_vector::operator()[abi:ne180100](&v7);
  v7 = (void **)v5;
  std::vector<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::__destroy_vector::operator()[abi:ne180100](&v7);
}

void sub_1AD8FF33C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v4 = v1;
  *(_QWORD *)(v3 - 40) = v2;
  std::vector<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v3 - 40));
  *(_QWORD *)(v3 - 40) = v4;
  std::vector<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v3 - 40));
  _Unwind_Resume(a1);
}

uint64_t fst::StateMap<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::ArcSortMapper<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::ILabelCompare<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>(uint64_t a1, uint64_t *a2)
{
  uint64_t result;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t i;
  uint64_t v9;
  uint64_t v10;
  void *__p;
  void *v12;

  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  if ((_DWORD)result != -1)
  {
    v5 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 64))(a1, 0x3FFFFFFF0007, 0);
    v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)*a2 + 24))(*a2);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 176))(a1, v6);
    if ((*(int (**)(uint64_t))(*(_QWORD *)a1 + 160))(a1) >= 1)
    {
      v7 = 0;
      do
      {
        fst::ArcSortMapper<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::ILabelCompare<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::SetState(a2, v7);
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 240))(a1, v7);
        for (i = a2[5]; ; a2[5] = i)
        {
          v9 = a2[2];
          if (i >= 0xAAAAAAAAAAAAAAABLL * ((a2[3] - v9) >> 4))
            break;
          (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)a1 + 208))(a1, v7, v9 + 48 * i);
          i = a2[5] + 1;
        }
        (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)*a2 + 32))(&v10, *a2, v7);
        (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(_QWORD *)a1 + 184))(a1, v7, &v10);
        if (__p)
        {
          v12 = __p;
          operator delete(__p);
        }
        v7 = (v7 + 1);
      }
      while ((int)v7 < (*(int (**)(uint64_t))(*(_QWORD *)a1 + 160))(a1));
    }
    return (*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)a1 + 192))(a1, v5 & 0x3FFF0FFF0007 | (((v5 >> 16) & 1) << 30) | 0x10000000, 0x3FFFFFFF0007);
  }
  return result;
}

void sub_1AD8FF510(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void fst::ArcSortMapper<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::ILabelCompare<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::SetState(uint64_t *a1, uint64_t a2)
{
  uint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD v14[3];
  _DWORD *v15;
  unint64_t v16;

  a1[5] = 0;
  v4 = a1 + 2;
  std::vector<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::__clear[abi:ne180100](a1 + 2);
  v5 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)*a1 + 40))(*a1, a2);
  std::vector<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>::reserve(v4, v5);
  v6 = *a1;
  v16 = 0;
  (*(void (**)(uint64_t, uint64_t, _QWORD *))(*(_QWORD *)v6 + 136))(v6, a2, v14);
  while (1)
  {
    if (!v14[0])
    {
      if (v16 >= v14[2])
        goto LABEL_16;
      goto LABEL_7;
    }
    if ((*(unsigned int (**)(_QWORD))(*(_QWORD *)v14[0] + 24))(v14[0]))
      break;
    if (v14[0])
    {
      v7 = (*(uint64_t (**)(void))(*(_QWORD *)v14[0] + 32))();
      goto LABEL_8;
    }
LABEL_7:
    v7 = v14[1] + 48 * v16;
LABEL_8:
    v8 = a1[3];
    if (v8 >= a1[4])
    {
      v9 = std::vector<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>::__push_back_slow_path<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int> const&>(v4, v7);
    }
    else
    {
      std::vector<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>::__construct_one_at_end[abi:ne180100]<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int> const&>((uint64_t)v4, v7);
      v9 = v8 + 48;
    }
    a1[3] = v9;
    if (v14[0])
      (*(void (**)(_QWORD))(*(_QWORD *)v14[0] + 40))(v14[0]);
    else
      ++v16;
  }
  if (v14[0])
  {
    (*(void (**)(void))(*(_QWORD *)v14[0] + 8))();
    goto LABEL_18;
  }
LABEL_16:
  if (v15)
    --*v15;
LABEL_18:
  v10 = a1[2];
  v11 = (uint64_t *)a1[3];
  v12 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * ((uint64_t)((uint64_t)v11 - v10) >> 4));
  if (v11 == (uint64_t *)v10)
    v13 = 0;
  else
    v13 = v12;
  std::__introsort<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>> &,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>*,false>(v10, v11, (uint64_t)v14, v13, 1);
}

void sub_1AD8FF6B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  else
    fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::OrderedExpand<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>((uint64_t)&a10);
  _Unwind_Resume(a1);
}

void std::__introsort<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>> &,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>*,false>(unint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  unint64_t v21;
  char v22;
  BOOL v23;
  uint64_t *v24;
  uint64_t v25;
  int v26;
  int v27;
  uint64_t v29;
  void *__p;
  void *v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  void *v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  void *v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  void *v49;
  uint64_t v50;
  int v51;

void sub_1AD8FFAE8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23)
{
  uint64_t v23;
  void *v25;

  v25 = *(void **)(v23 - 120);
  if (v25)
  {
    *(_QWORD *)(v23 - 112) = v25;
    operator delete(v25);
  }
  _Unwind_Resume(exception_object);
}

void std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>> &,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>*>(_QWORD *a1, _QWORD *a2)
{
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  int v7;
  int v8;
  uint64_t i;
  int v10;
  uint64_t *v11;
  int v12;
  uint64_t v14;
  void *v15;
  void *v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  void *v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  _BYTE *v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  void *__p;
  void *v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  void *v40;
  uint64_t v41;
  int v42;

  if (a1 != a2)
  {
    v3 = a1 + 6;
    if (a1 + 6 != a2)
    {
      v4 = 0;
      v5 = a1;
      do
      {
        v6 = v3;
        v37 = v5[6];
        v38 = v5[7];
        v40 = 0;
        v41 = 0;
        v39 = 0;
        std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v39, (const void *)v5[8], v5[9], (uint64_t)(v5[9] - v5[8]) >> 2);
        v42 = *((_DWORD *)v5 + 22);
        v31 = *v5;
        v32 = v5[1];
        v34 = 0;
        v35 = 0;
        __p = 0;
        std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, (const void *)v5[2], v5[3], (uint64_t)(v5[3] - v5[2]) >> 2);
        v36 = *((_DWORD *)v5 + 10);
        v7 = v37;
        v8 = v31;
        if (__p)
        {
          v34 = __p;
          operator delete(__p);
        }
        if (v39)
        {
          v40 = v39;
          operator delete(v39);
        }
        if (v7 < v8)
        {
          v25 = *v6;
          v26 = v5[7];
          v28 = 0;
          v29 = 0;
          v27 = 0;
          std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v27, (const void *)v5[8], v5[9], (uint64_t)(v5[9] - v5[8]) >> 2);
          v30 = *((_DWORD *)v5 + 22);
          for (i = v4; ; i -= 48)
          {
            *(_QWORD *)((char *)a1 + i + 48) = *(_QWORD *)((char *)a1 + i);
            fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>::operator=((uint64_t)a1 + i + 56, (uint64_t)a1 + i + 8);
            *(_DWORD *)((char *)a1 + i + 88) = *(_DWORD *)((char *)a1 + i + 40);
            if (!i)
            {
              v11 = a1;
              goto LABEL_19;
            }
            v19 = v25;
            v20 = v26;
            v22 = 0;
            v23 = 0;
            v21 = 0;
            std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v21, v27, (uint64_t)v28, (v28 - (_BYTE *)v27) >> 2);
            v24 = v30;
            v14 = *(_QWORD *)((char *)a1 + i - 48);
            v16 = 0;
            v17 = 0;
            v15 = 0;
            std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v15, *(const void **)((char *)a1 + i - 32), *(_QWORD *)((char *)a1 + i - 24), (uint64_t)(*(_QWORD *)((char *)a1 + i - 24) - *(_QWORD *)((char *)a1 + i - 32)) >> 2);
            v18 = *(_DWORD *)((char *)a1 + i - 8);
            v10 = v19;
            if (v15)
            {
              v16 = v15;
              operator delete(v15);
            }
            if (v21)
            {
              v22 = v21;
              operator delete(v21);
            }
            if (v10 >= (int)v14)
              break;
          }
          v11 = (_QWORD *)((char *)a1 + i);
LABEL_19:
          *v11 = v25;
          v12 = HIDWORD(v26);
          *(_DWORD *)((char *)a1 + i + 8) = v26;
          *((_DWORD *)v11 + 3) = v12;
          if (v11 != &v25)
            std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)v11 + 16, (char *)v27, (uint64_t)v28, (v28 - (_BYTE *)v27) >> 2);
          *((_DWORD *)v11 + 10) = v30;
          if (v27)
          {
            v28 = v27;
            operator delete(v27);
          }
        }
        v3 = v6 + 6;
        v4 += 48;
        v5 = v6;
      }
      while (v6 + 6 != a2);
    }
  }
}

void sub_1AD8FFDBC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>> &,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>*>(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;
  _DWORD *v4;
  _QWORD *v5;
  int v6;
  int v7;
  _DWORD *v8;
  int v9;
  uint64_t v11;
  void *v12;
  void *v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  void *v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  _BYTE *v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  void *__p;
  void *v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  void *v37;
  uint64_t v38;
  int v39;

  if ((_QWORD *)a1 != a2)
  {
    v2 = (_QWORD *)a1;
    v3 = (_QWORD *)(a1 + 48);
    if ((_QWORD *)(a1 + 48) != a2)
    {
      v4 = (_DWORD *)(a1 + 88);
      do
      {
        v5 = v3;
        v34 = v2[6];
        v35 = v2[7];
        v37 = 0;
        v38 = 0;
        v36 = 0;
        std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v36, (const void *)v2[8], v2[9], (uint64_t)(v2[9] - v2[8]) >> 2);
        v39 = *((_DWORD *)v2 + 22);
        v28 = *v2;
        v29 = v2[1];
        v31 = 0;
        v32 = 0;
        __p = 0;
        std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, (const void *)v2[2], v2[3], (uint64_t)(v2[3] - v2[2]) >> 2);
        v33 = *((_DWORD *)v2 + 10);
        v6 = v34;
        v7 = v28;
        if (__p)
        {
          v31 = __p;
          operator delete(__p);
        }
        if (v36)
        {
          v37 = v36;
          operator delete(v36);
        }
        if (v6 < v7)
        {
          v22 = *v5;
          v23 = v2[7];
          v25 = 0;
          v26 = 0;
          v24 = 0;
          std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v24, (const void *)v2[8], v2[9], (uint64_t)(v2[9] - v2[8]) >> 2);
          v27 = *((_DWORD *)v2 + 22);
          v8 = v4;
          do
          {
            *((_QWORD *)v8 - 5) = *((_QWORD *)v8 - 11);
            fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>::operator=((uint64_t)(v8 - 8), (uint64_t)(v8 - 20));
            *v8 = *(v8 - 12);
            v16 = v22;
            v17 = v23;
            v19 = 0;
            v20 = 0;
            v18 = 0;
            std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v18, v24, (uint64_t)v25, (v25 - (_BYTE *)v24) >> 2);
            v21 = v27;
            v11 = *((_QWORD *)v8 - 17);
            v13 = 0;
            v14 = 0;
            v12 = 0;
            std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v12, *((const void **)v8 - 15), *((_QWORD *)v8 - 14), (uint64_t)(*((_QWORD *)v8 - 14) - *((_QWORD *)v8 - 15)) >> 2);
            v15 = *(v8 - 24);
            v9 = v16;
            if (v12)
            {
              v13 = v12;
              operator delete(v12);
            }
            if (v18)
            {
              v19 = v18;
              operator delete(v18);
            }
            v8 -= 12;
          }
          while (v9 < (int)v11);
          *((_QWORD *)v8 - 5) = v22;
          *((_QWORD *)v8 - 4) = v23;
          if (v8 - 10 != (_DWORD *)&v22)
            std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)v8 - 24, (char *)v24, (uint64_t)v25, (v25 - (_BYTE *)v24) >> 2);
          *v8 = v27;
          if (v24)
          {
            v25 = v24;
            operator delete(v24);
          }
        }
        v3 = v5 + 6;
        v4 += 12;
        v2 = v5;
      }
      while (v5 + 6 != a2);
    }
  }
}

void sub_1AD900084(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>> &,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>*>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v6;
  int v7;
  int v8;
  int v9;
  uint64_t *v10;
  uint64_t *v11;
  int v12;
  uint64_t v14;
  void *v15;
  void *v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  void *v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  void *__p;
  void *v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  void *v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  void *v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  void *v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  void *v51;
  void *v52;
  uint64_t v53;
  int v54;
  uint64_t v55;
  uint64_t v56;
  void *v57;
  void *v58;
  uint64_t v59;
  int v60;
  uint64_t v61;
  uint64_t v62;
  void *v63;
  void *v64;
  uint64_t v65;
  int v66;
  uint64_t v67;
  uint64_t v68;
  void *v69;
  void *v70;
  uint64_t v71;
  int v72;

  v67 = *(_QWORD *)a2;
  v68 = *(_QWORD *)(a2 + 8);
  v70 = 0;
  v71 = 0;
  v69 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v69, *(const void **)(a2 + 16), *(_QWORD *)(a2 + 24), (uint64_t)(*(_QWORD *)(a2 + 24) - *(_QWORD *)(a2 + 16)) >> 2);
  v72 = *(_DWORD *)(a2 + 40);
  v61 = *(_QWORD *)a1;
  v62 = *(_QWORD *)(a1 + 8);
  v64 = 0;
  v65 = 0;
  v63 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v63, *(const void **)(a1 + 16), *(_QWORD *)(a1 + 24), (uint64_t)(*(_QWORD *)(a1 + 24) - *(_QWORD *)(a1 + 16)) >> 2);
  v66 = *(_DWORD *)(a1 + 40);
  v6 = v67;
  if (v63)
  {
    v64 = v63;
    operator delete(v63);
  }
  if (v69)
  {
    v70 = v69;
    operator delete(v69);
  }
  if (v6 < (int)v61)
  {
    v31 = *(_QWORD *)a3;
    v32 = *(_QWORD *)(a3 + 8);
    v34 = 0;
    v35 = 0;
    v33 = 0;
    std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v33, *(const void **)(a3 + 16), *(_QWORD *)(a3 + 24), (uint64_t)(*(_QWORD *)(a3 + 24) - *(_QWORD *)(a3 + 16)) >> 2);
    v36 = *(_DWORD *)(a3 + 40);
    v25 = *(_QWORD *)a2;
    v26 = *(_QWORD *)(a2 + 8);
    v28 = 0;
    v29 = 0;
    __p = 0;
    std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, *(const void **)(a2 + 16), *(_QWORD *)(a2 + 24), (uint64_t)(*(_QWORD *)(a2 + 24) - *(_QWORD *)(a2 + 16)) >> 2);
    v30 = *(_DWORD *)(a2 + 40);
    v7 = v31;
    if (__p)
    {
      v28 = __p;
      operator delete(__p);
    }
    if (v33)
    {
      v34 = v33;
      operator delete(v33);
    }
    if (v7 < (int)v25)
    {
      std::swap[abi:ne180100]<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>((uint64_t *)a1, (uint64_t *)a3);
      return 1;
    }
    std::swap[abi:ne180100]<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>((uint64_t *)a1, (uint64_t *)a2);
    v19 = *(_QWORD *)a3;
    v20 = *(_QWORD *)(a3 + 8);
    v22 = 0;
    v23 = 0;
    v21 = 0;
    std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v21, *(const void **)(a3 + 16), *(_QWORD *)(a3 + 24), (uint64_t)(*(_QWORD *)(a3 + 24) - *(_QWORD *)(a3 + 16)) >> 2);
    v24 = *(_DWORD *)(a3 + 40);
    v14 = *(_QWORD *)a2;
    v16 = 0;
    v17 = 0;
    v15 = 0;
    std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v15, *(const void **)(a2 + 16), *(_QWORD *)(a2 + 24), (uint64_t)(*(_QWORD *)(a2 + 24) - *(_QWORD *)(a2 + 16)) >> 2);
    v18 = *(_DWORD *)(a2 + 40);
    v12 = v19;
    if (v15)
    {
      v16 = v15;
      operator delete(v15);
    }
    if (v21)
    {
      v22 = v21;
      operator delete(v21);
    }
    if (v12 >= (int)v14)
      return 1;
    v10 = (uint64_t *)a2;
    v11 = (uint64_t *)a3;
LABEL_29:
    std::swap[abi:ne180100]<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>(v10, v11);
    return 2;
  }
  v55 = *(_QWORD *)a3;
  v56 = *(_QWORD *)(a3 + 8);
  v58 = 0;
  v59 = 0;
  v57 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v57, *(const void **)(a3 + 16), *(_QWORD *)(a3 + 24), (uint64_t)(*(_QWORD *)(a3 + 24) - *(_QWORD *)(a3 + 16)) >> 2);
  v60 = *(_DWORD *)(a3 + 40);
  v49 = *(_QWORD *)a2;
  v50 = *(_QWORD *)(a2 + 8);
  v52 = 0;
  v53 = 0;
  v51 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v51, *(const void **)(a2 + 16), *(_QWORD *)(a2 + 24), (uint64_t)(*(_QWORD *)(a2 + 24) - *(_QWORD *)(a2 + 16)) >> 2);
  v54 = *(_DWORD *)(a2 + 40);
  v8 = v55;
  if (v51)
  {
    v52 = v51;
    operator delete(v51);
  }
  if (v57)
  {
    v58 = v57;
    operator delete(v57);
  }
  if (v8 < (int)v49)
  {
    std::swap[abi:ne180100]<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>((uint64_t *)a2, (uint64_t *)a3);
    v43 = *(_QWORD *)a2;
    v44 = *(_QWORD *)(a2 + 8);
    v46 = 0;
    v47 = 0;
    v45 = 0;
    std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v45, *(const void **)(a2 + 16), *(_QWORD *)(a2 + 24), (uint64_t)(*(_QWORD *)(a2 + 24) - *(_QWORD *)(a2 + 16)) >> 2);
    v48 = *(_DWORD *)(a2 + 40);
    v37 = *(_QWORD *)a1;
    v38 = *(_QWORD *)(a1 + 8);
    v40 = 0;
    v41 = 0;
    v39 = 0;
    std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v39, *(const void **)(a1 + 16), *(_QWORD *)(a1 + 24), (uint64_t)(*(_QWORD *)(a1 + 24) - *(_QWORD *)(a1 + 16)) >> 2);
    v42 = *(_DWORD *)(a1 + 40);
    v9 = v43;
    if (v39)
    {
      v40 = v39;
      operator delete(v39);
    }
    if (v45)
    {
      v46 = v45;
      operator delete(v45);
    }
    if (v9 >= (int)v37)
      return 1;
    v10 = (uint64_t *)a1;
    v11 = (uint64_t *)a2;
    goto LABEL_29;
  }
  return 0;
}

void sub_1AD90047C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39,uint64_t a40,uint64_t a41)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

unint64_t std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int> *,fst::ILabelCompare<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>> &>(unint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  int v5;
  unint64_t i;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  uint64_t v14;
  void *v15;
  void *v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  void *v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  void *v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  void *v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  void *v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  void *v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  void *v51;
  void *v52;
  uint64_t v53;
  int v54;
  uint64_t v55;
  uint64_t v56;
  void *v57;
  void *v58;
  uint64_t v59;
  int v60;
  uint64_t v61;
  uint64_t v62;
  void *__p;
  void *v64;
  uint64_t v65;
  int v66;
  uint64_t v67;
  uint64_t v68;
  void *v69;
  void *v70;
  uint64_t v71;
  int v72;
  uint64_t v73;
  uint64_t v74;
  void *v75;
  void *v76;
  uint64_t v77;
  int v78;
  uint64_t v79;
  uint64_t v80;
  void *v81;
  void *v82;
  uint64_t v83;
  int v84;
  uint64_t v85;
  uint64_t v86;
  void *v87;
  _BYTE *v88;
  uint64_t v89;
  int v90;

  v85 = *(_QWORD *)a1;
  v4 = a1 + 8;
  v86 = *(_QWORD *)(a1 + 8);
  v88 = 0;
  v89 = 0;
  v87 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v87, *(const void **)(a1 + 16), *(_QWORD *)(a1 + 24), (uint64_t)(*(_QWORD *)(a1 + 24) - *(_QWORD *)(a1 + 16)) >> 2);
  v90 = *(_DWORD *)(a1 + 40);
  v79 = v85;
  v80 = v86;
  v82 = 0;
  v83 = 0;
  v81 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v81, v87, (uint64_t)v88, (v88 - (_BYTE *)v87) >> 2);
  v84 = v90;
  v73 = *(a2 - 6);
  v74 = *(a2 - 5);
  v76 = 0;
  v77 = 0;
  v75 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v75, (const void *)*(a2 - 4), *(a2 - 3), (*(a2 - 3) - *(a2 - 4)) >> 2);
  v78 = *((_DWORD *)a2 - 2);
  v5 = v79;
  if (v75)
  {
    v76 = v75;
    operator delete(v75);
  }
  if (v81)
  {
    v82 = v81;
    operator delete(v81);
  }
  if (v5 >= (int)v73)
  {
    for (i = a1 + 48; i < (unint64_t)a2; i += 48)
    {
      v55 = v85;
      v56 = v86;
      v58 = 0;
      v59 = 0;
      v57 = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v57, v87, (uint64_t)v88, (v88 - (_BYTE *)v87) >> 2);
      v60 = v90;
      v49 = *(_QWORD *)i;
      v50 = *(_QWORD *)(i + 8);
      v52 = 0;
      v53 = 0;
      v51 = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v51, *(const void **)(i + 16), *(_QWORD *)(i + 24), (uint64_t)(*(_QWORD *)(i + 24) - *(_QWORD *)(i + 16)) >> 2);
      v54 = *(_DWORD *)(i + 40);
      v8 = v55;
      if (v51)
      {
        v52 = v51;
        operator delete(v51);
      }
      if (v57)
      {
        v58 = v57;
        operator delete(v57);
      }
      if (v8 < (int)v49)
        break;
    }
  }
  else
  {
    i = a1;
    do
    {
      v67 = v85;
      v68 = v86;
      v70 = 0;
      v71 = 0;
      v69 = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v69, v87, (uint64_t)v88, (v88 - (_BYTE *)v87) >> 2);
      v72 = v90;
      v61 = *(_QWORD *)(i + 48);
      v62 = *(_QWORD *)(i + 56);
      v64 = 0;
      v65 = 0;
      __p = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, *(const void **)(i + 64), *(_QWORD *)(i + 72), (uint64_t)(*(_QWORD *)(i + 72) - *(_QWORD *)(i + 64)) >> 2);
      v66 = *(_DWORD *)(i + 88);
      v7 = v67;
      if (__p)
      {
        v64 = __p;
        operator delete(__p);
      }
      if (v69)
      {
        v70 = v69;
        operator delete(v69);
      }
      i += 48;
    }
    while (v7 >= (int)v61);
  }
  if (i < (unint64_t)a2)
  {
    do
    {
      v43 = v85;
      v44 = v86;
      v46 = 0;
      v47 = 0;
      v45 = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v45, v87, (uint64_t)v88, (v88 - (_BYTE *)v87) >> 2);
      v48 = v90;
      v37 = *(a2 - 6);
      v38 = *(a2 - 5);
      v40 = 0;
      v41 = 0;
      v39 = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v39, (const void *)*(a2 - 4), *(a2 - 3), (*(a2 - 3) - *(a2 - 4)) >> 2);
      v42 = *((_DWORD *)a2 - 2);
      v9 = v43;
      if (v39)
      {
        v40 = v39;
        operator delete(v39);
      }
      if (v45)
      {
        v46 = v45;
        operator delete(v45);
      }
      a2 -= 6;
    }
    while (v9 < (int)v37);
  }
  while (i < (unint64_t)a2)
  {
    std::swap[abi:ne180100]<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>((uint64_t *)i, a2);
    do
    {
      v31 = v85;
      v32 = v86;
      v34 = 0;
      v35 = 0;
      v33 = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v33, v87, (uint64_t)v88, (v88 - (_BYTE *)v87) >> 2);
      v36 = v90;
      v25 = *(_QWORD *)(i + 48);
      v26 = *(_QWORD *)(i + 56);
      v28 = 0;
      v29 = 0;
      v27 = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v27, *(const void **)(i + 64), *(_QWORD *)(i + 72), (uint64_t)(*(_QWORD *)(i + 72) - *(_QWORD *)(i + 64)) >> 2);
      v30 = *(_DWORD *)(i + 88);
      v10 = v31;
      v11 = v25;
      if (v27)
      {
        v28 = v27;
        operator delete(v27);
      }
      if (v33)
      {
        v34 = v33;
        operator delete(v33);
      }
      i += 48;
    }
    while (v10 >= v11);
    do
    {
      v19 = v85;
      v20 = v86;
      v22 = 0;
      v23 = 0;
      v21 = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v21, v87, (uint64_t)v88, (v88 - (_BYTE *)v87) >> 2);
      v24 = v90;
      v14 = *(a2 - 6);
      v16 = 0;
      v17 = 0;
      v15 = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v15, (const void *)*(a2 - 4), *(a2 - 3), (*(a2 - 3) - *(a2 - 4)) >> 2);
      v18 = *((_DWORD *)a2 - 2);
      v12 = v19;
      if (v15)
      {
        v16 = v15;
        operator delete(v15);
      }
      if (v21)
      {
        v22 = v21;
        operator delete(v21);
      }
      a2 -= 6;
    }
    while (v12 < (int)v14);
  }
  if (i - 48 != a1)
  {
    *(_QWORD *)a1 = *(_QWORD *)(i - 48);
    fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>::operator=(v4, i - 40);
    *(_DWORD *)(a1 + 40) = *(_DWORD *)(i - 8);
  }
  *(_QWORD *)(i - 48) = v85;
  *(_QWORD *)(i - 40) = v86;
  if ((uint64_t *)(i - 40) != &v86)
    std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)(i - 32), (char *)v87, (uint64_t)v88, (v88 - (_BYTE *)v87) >> 2);
  *(_DWORD *)(i - 8) = v90;
  if (v87)
  {
    v88 = v87;
    operator delete(v87);
  }
  return i;
}

void sub_1AD900A28(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v3;
  void *v4;

  v3 = *(void **)(v1 - 168);
  if (v3)
  {
    *(_QWORD *)(v1 - 160) = v3;
    operator delete(v3);
  }
  v4 = *(void **)(v1 - 120);
  if (v4)
  {
    *(_QWORD *)(v1 - 112) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(a1);
}

unint64_t std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int> *,fst::ILabelCompare<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>> &>(uint64_t *a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  unint64_t i;
  uint64_t v8;
  int v9;
  int v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  int v15;
  int v16;
  unint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v21;
  uint64_t *v22;
  unint64_t v23;
  int v24;
  void *v25;
  void *v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  void *v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  void *v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  void *v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  void *__p;
  void *v50;
  uint64_t v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  void *v55;
  void *v56;
  uint64_t v57;
  int v58;
  uint64_t v59;
  uint64_t v60;
  void *v61;
  void *v62;
  uint64_t v63;
  int v64;
  uint64_t v65;
  uint64_t v66;
  void *v67;
  void *v68;
  uint64_t v69;
  int v70;
  uint64_t v71;
  uint64_t v72;
  void *v73;
  void *v74;
  uint64_t v75;
  int v76;
  uint64_t v77;
  uint64_t v78;
  void *v79;
  void *v80;
  uint64_t v81;
  int v82;
  uint64_t v83;
  uint64_t v84;
  void *v85;
  _BYTE *v86;
  uint64_t v87;
  int v88;

  v83 = *a1;
  v4 = (uint64_t)(a1 + 1);
  v84 = a1[1];
  v86 = 0;
  v87 = 0;
  v85 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v85, (const void *)a1[2], a1[3], (a1[3] - a1[2]) >> 2);
  v5 = 0;
  v88 = *((_DWORD *)a1 + 10);
  do
  {
    v77 = a1[v5 + 6];
    v78 = a1[v5 + 7];
    v80 = 0;
    v81 = 0;
    v79 = 0;
    std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v79, (const void *)a1[v5 + 8], a1[v5 + 9], (a1[v5 + 9] - a1[v5 + 8]) >> 2);
    v82 = a1[v5 + 11];
    v71 = v83;
    v72 = v84;
    v74 = 0;
    v75 = 0;
    v73 = 0;
    std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v73, v85, (uint64_t)v86, (v86 - (_BYTE *)v85) >> 2);
    v76 = v88;
    v6 = v77;
    if (v73)
    {
      v74 = v73;
      operator delete(v73);
    }
    if (v79)
    {
      v80 = v79;
      operator delete(v79);
    }
    v5 += 6;
  }
  while (v6 < (int)v71);
  v23 = (unint64_t)&a1[v5];
  if (v5 == 6)
  {
    if ((unint64_t)(a1 + 6) >= a2)
    {
      i = a2;
    }
    else
    {
      for (i = a2 - 48; ; i -= 48)
      {
        v65 = *(_QWORD *)i;
        v66 = *(_QWORD *)(i + 8);
        v68 = 0;
        v69 = 0;
        v67 = 0;
        std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v67, *(const void **)(i + 16), *(_QWORD *)(i + 24), (uint64_t)(*(_QWORD *)(i + 24) - *(_QWORD *)(i + 16)) >> 2);
        v70 = *(_DWORD *)(i + 40);
        v59 = v83;
        v60 = v84;
        v62 = 0;
        v63 = 0;
        v61 = 0;
        std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v61, v85, (uint64_t)v86, (v86 - (_BYTE *)v85) >> 2);
        v64 = v88;
        v10 = v65;
        if (v61)
        {
          v62 = v61;
          operator delete(v61);
        }
        if (v67)
        {
          v68 = v67;
          operator delete(v67);
        }
        if (v10 < (int)v59 || v23 >= i)
          break;
      }
    }
  }
  else
  {
    i = a2;
    do
    {
      v8 = *(_QWORD *)(i - 48);
      i -= 48;
      v53 = v8;
      v54 = *(_QWORD *)(i + 8);
      v56 = 0;
      v57 = 0;
      v55 = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v55, *(const void **)(i + 16), *(_QWORD *)(i + 24), (uint64_t)(*(_QWORD *)(i + 24) - *(_QWORD *)(i + 16)) >> 2);
      v58 = *(_DWORD *)(a2 - 8);
      v47 = v83;
      v48 = v84;
      v50 = 0;
      v51 = 0;
      __p = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, v85, (uint64_t)v86, (v86 - (_BYTE *)v85) >> 2);
      v52 = v88;
      v9 = v53;
      if (__p)
      {
        v50 = __p;
        operator delete(__p);
      }
      if (v55)
      {
        v56 = v55;
        operator delete(v55);
      }
      a2 = i;
    }
    while (v9 >= (int)v47);
  }
  v21 = v4;
  v22 = a1;
  v11 = v23;
  if (v23 < i)
  {
    v12 = i;
    do
    {
      std::swap[abi:ne180100]<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>((uint64_t *)v11, (uint64_t *)v12);
      v13 = v11;
      do
      {
        v14 = *(_QWORD *)(v11 + 48);
        v11 += 48;
        v41 = v14;
        v42 = *(_QWORD *)(v11 + 8);
        v44 = 0;
        v45 = 0;
        v43 = 0;
        std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v43, *(const void **)(v11 + 16), *(_QWORD *)(v11 + 24), (uint64_t)(*(_QWORD *)(v11 + 24) - *(_QWORD *)(v11 + 16)) >> 2);
        v46 = *(_DWORD *)(v13 + 88);
        v35 = v83;
        v36 = v84;
        v38 = 0;
        v39 = 0;
        v37 = 0;
        std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v37, v85, (uint64_t)v86, (v86 - (_BYTE *)v85) >> 2);
        v40 = v88;
        v15 = v41;
        v16 = v35;
        if (v37)
        {
          v38 = v37;
          operator delete(v37);
        }
        if (v43)
        {
          v44 = v43;
          operator delete(v43);
        }
        v13 = v11;
      }
      while (v15 < v16);
      v17 = v12;
      do
      {
        v18 = *(_QWORD *)(v12 - 48);
        v12 -= 48;
        v29 = v18;
        v30 = *(_QWORD *)(v12 + 8);
        v32 = 0;
        v33 = 0;
        v31 = 0;
        std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v31, *(const void **)(v12 + 16), *(_QWORD *)(v12 + 24), (uint64_t)(*(_QWORD *)(v12 + 24) - *(_QWORD *)(v12 + 16)) >> 2);
        v34 = *(_DWORD *)(v17 - 8);
        v24 = v83;
        v26 = 0;
        v27 = 0;
        v25 = 0;
        std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v25, v85, (uint64_t)v86, (v86 - (_BYTE *)v85) >> 2);
        v28 = v88;
        v19 = v29;
        if (v25)
        {
          v26 = v25;
          operator delete(v25);
        }
        if (v31)
        {
          v32 = v31;
          operator delete(v31);
        }
        v17 = v12;
      }
      while (v19 >= v24);
    }
    while (v11 < v12);
  }
  if ((uint64_t *)(v11 - 48) != v22)
  {
    *v22 = *(_QWORD *)(v11 - 48);
    fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>::operator=(v21, v11 - 40);
    *((_DWORD *)v22 + 10) = *(_DWORD *)(v11 - 8);
  }
  *(_QWORD *)(v11 - 48) = v83;
  *(_QWORD *)(v11 - 40) = v84;
  if ((uint64_t *)(v11 - 40) != &v84)
    std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)(v11 - 32), (char *)v85, (uint64_t)v86, (v86 - (_BYTE *)v85) >> 2);
  *(_DWORD *)(v11 - 8) = v88;
  if (v85)
  {
    v86 = v85;
    operator delete(v85);
  }
  return v11 - 48;
}

void sub_1AD900FB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,void *__p,uint64_t a59)
{
  uint64_t v59;
  void *v61;

  v61 = *(void **)(v59 - 120);
  if (v61)
  {
    *(_QWORD *)(v59 - 112) = v61;
    operator delete(v61);
  }
  _Unwind_Resume(exception_object);
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>> &,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>*>(uint64_t a1, uint64_t a2)
{
  unint64_t v3;
  _BOOL8 result;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  int v10;
  uint64_t i;
  int v12;
  uint64_t v13;
  int v14;
  int v15;
  uint64_t v17;
  void *v18;
  void *v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  void *v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  _BYTE *v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  void *__p;
  void *v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  void *v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  void *v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  void *v54;
  void *v55;
  uint64_t v56;
  int v57;

  v3 = 0xAAAAAAAAAAAAAAABLL * ((a2 - a1) >> 4);
  result = 1;
  switch(v3)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      v52 = *(_QWORD *)(a2 - 48);
      v53 = *(_QWORD *)(a2 - 40);
      v55 = 0;
      v56 = 0;
      v54 = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v54, *(const void **)(a2 - 32), *(_QWORD *)(a2 - 24), (uint64_t)(*(_QWORD *)(a2 - 24) - *(_QWORD *)(a2 - 32)) >> 2);
      v57 = *(_DWORD *)(a2 - 8);
      v46 = *(_QWORD *)a1;
      v47 = *(_QWORD *)(a1 + 8);
      v49 = 0;
      v50 = 0;
      v48 = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v48, *(const void **)(a1 + 16), *(_QWORD *)(a1 + 24), (uint64_t)(*(_QWORD *)(a1 + 24) - *(_QWORD *)(a1 + 16)) >> 2);
      v51 = *(_DWORD *)(a1 + 40);
      v5 = v52;
      if (v48)
      {
        v49 = v48;
        operator delete(v48);
      }
      if (v54)
      {
        v55 = v54;
        operator delete(v54);
      }
      if (v5 < (int)v46)
        std::swap[abi:ne180100]<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>((uint64_t *)a1, (uint64_t *)(a2 - 48));
      return 1;
    case 3uLL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>> &,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>*>(a1, a1 + 48, a2 - 48);
      return 1;
    case 4uLL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>> &,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>*>(a1, a1 + 48, a1 + 96, a2 - 48);
      return 1;
    case 5uLL:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>> &,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>*>(a1, a1 + 48, a1 + 96, a1 + 144, a2 - 48);
      return 1;
    default:
      v6 = a1 + 96;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>> &,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>*>(a1, a1 + 48, a1 + 96);
      v7 = a1 + 144;
      if (a1 + 144 == a2)
        return 1;
      v8 = 0;
      v15 = 0;
      break;
  }
  while (1)
  {
    v40 = *(_QWORD *)v7;
    v41 = *(_QWORD *)(v7 + 8);
    v43 = 0;
    v44 = 0;
    v42 = 0;
    std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v42, *(const void **)(v7 + 16), *(_QWORD *)(v7 + 24), (uint64_t)(*(_QWORD *)(v7 + 24) - *(_QWORD *)(v7 + 16)) >> 2);
    v45 = *(_DWORD *)(v7 + 40);
    v34 = *(_QWORD *)v6;
    v35 = *(_QWORD *)(v6 + 8);
    v37 = 0;
    v38 = 0;
    __p = 0;
    std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, *(const void **)(v6 + 16), *(_QWORD *)(v6 + 24), (uint64_t)(*(_QWORD *)(v6 + 24) - *(_QWORD *)(v6 + 16)) >> 2);
    v39 = *(_DWORD *)(v6 + 40);
    v9 = v40;
    v10 = v34;
    if (__p)
    {
      v37 = __p;
      operator delete(__p);
    }
    if (v42)
    {
      v43 = v42;
      operator delete(v42);
    }
    if (v9 < v10)
    {
      v28 = *(_QWORD *)v7;
      v29 = *(_QWORD *)(v7 + 8);
      v31 = 0;
      v32 = 0;
      v30 = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v30, *(const void **)(v7 + 16), *(_QWORD *)(v7 + 24), (uint64_t)(*(_QWORD *)(v7 + 24) - *(_QWORD *)(v7 + 16)) >> 2);
      v33 = *(_DWORD *)(v7 + 40);
      for (i = v8; ; i -= 48)
      {
        *(_QWORD *)(a1 + i + 144) = *(_QWORD *)(a1 + i + 96);
        fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>::operator=(a1 + i + 152, a1 + i + 104);
        *(_DWORD *)(a1 + i + 184) = *(_DWORD *)(a1 + i + 136);
        if (i == -96)
        {
          v13 = a1;
          goto LABEL_26;
        }
        v22 = v28;
        v23 = v29;
        v25 = 0;
        v26 = 0;
        v24 = 0;
        std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v24, v30, (uint64_t)v31, (v31 - (_BYTE *)v30) >> 2);
        v27 = v33;
        v17 = *(_QWORD *)(a1 + i + 48);
        v19 = 0;
        v20 = 0;
        v18 = 0;
        std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v18, *(const void **)(a1 + i + 64), *(_QWORD *)(a1 + i + 72), (uint64_t)(*(_QWORD *)(a1 + i + 72) - *(_QWORD *)(a1 + i + 64)) >> 2);
        v21 = *(_DWORD *)(a1 + i + 88);
        v12 = v22;
        if (v18)
        {
          v19 = v18;
          operator delete(v18);
        }
        if (v24)
        {
          v25 = v24;
          operator delete(v24);
        }
        if (v12 >= (int)v17)
          break;
      }
      v13 = a1 + i + 96;
LABEL_26:
      *(_QWORD *)v13 = v28;
      v14 = HIDWORD(v29);
      *(_DWORD *)(a1 + i + 104) = v29;
      *(_DWORD *)(v13 + 12) = v14;
      if ((uint64_t *)v13 != &v28)
        std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)(v13 + 16), (char *)v30, (uint64_t)v31, (v31 - (_BYTE *)v30) >> 2);
      *(_DWORD *)(v13 + 40) = v33;
      if (v30)
      {
        v31 = v30;
        operator delete(v30);
      }
      if (++v15 == 8)
        return v7 + 48 == a2;
    }
    v6 = v7;
    v8 += 48;
    v7 += 48;
    if (v7 == a2)
      return 1;
  }
}

void sub_1AD90148C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39)
{
  uint64_t v39;
  void *v41;

  v41 = *(void **)(v39 - 120);
  if (v41)
  {
    *(_QWORD *)(v39 - 112) = v41;
    operator delete(v41);
  }
  _Unwind_Resume(exception_object);
}

void std::swap[abi:ne180100]<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *__p;
  _BYTE *v8;
  uint64_t v9;
  int v10;

  v5 = *a1;
  v4 = (uint64_t)(a1 + 1);
  v6 = a1[1];
  v8 = 0;
  v9 = 0;
  __p = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, (const void *)a1[2], a1[3], (a1[3] - a1[2]) >> 2);
  v10 = *((_DWORD *)a1 + 10);
  *a1 = *a2;
  fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>::operator=(v4, (uint64_t)(a2 + 1));
  *((_DWORD *)a1 + 10) = *((_DWORD *)a2 + 10);
  *a2 = v5;
  a2[1] = v6;
  if (&v5 != a2)
    std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)a2 + 16, (char *)__p, (uint64_t)v8, (v8 - (_BYTE *)__p) >> 2);
  *((_DWORD *)a2 + 10) = v10;
  if (__p)
  {
    v8 = __p;
    operator delete(__p);
  }
}

void sub_1AD9015B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>> &,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v8;
  int v9;
  int v10;
  uint64_t v11;
  void *v12;
  void *v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  void *v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  void *__p;
  void *v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  void *v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  void *v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  void *v43;
  uint64_t v44;
  int v45;

  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>> &,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>*>(a1, a2, a3);
  v40 = *(_QWORD *)a4;
  v41 = *(_QWORD *)(a4 + 8);
  v43 = 0;
  v44 = 0;
  v42 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v42, *(const void **)(a4 + 16), *(_QWORD *)(a4 + 24), (uint64_t)(*(_QWORD *)(a4 + 24) - *(_QWORD *)(a4 + 16)) >> 2);
  v45 = *(_DWORD *)(a4 + 40);
  v34 = *(_QWORD *)a3;
  v35 = *(_QWORD *)(a3 + 8);
  v37 = 0;
  v38 = 0;
  v36 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v36, *(const void **)(a3 + 16), *(_QWORD *)(a3 + 24), (uint64_t)(*(_QWORD *)(a3 + 24) - *(_QWORD *)(a3 + 16)) >> 2);
  v39 = *(_DWORD *)(a3 + 40);
  v8 = v40;
  if (v36)
  {
    v37 = v36;
    operator delete(v36);
  }
  if (v42)
  {
    v43 = v42;
    operator delete(v42);
  }
  if (v8 < (int)v34)
  {
    std::swap[abi:ne180100]<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>((uint64_t *)a3, (uint64_t *)a4);
    v28 = *(_QWORD *)a3;
    v29 = *(_QWORD *)(a3 + 8);
    v31 = 0;
    v32 = 0;
    v30 = 0;
    std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v30, *(const void **)(a3 + 16), *(_QWORD *)(a3 + 24), (uint64_t)(*(_QWORD *)(a3 + 24) - *(_QWORD *)(a3 + 16)) >> 2);
    v33 = *(_DWORD *)(a3 + 40);
    v22 = *(_QWORD *)a2;
    v23 = *(_QWORD *)(a2 + 8);
    v25 = 0;
    v26 = 0;
    __p = 0;
    std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, *(const void **)(a2 + 16), *(_QWORD *)(a2 + 24), (uint64_t)(*(_QWORD *)(a2 + 24) - *(_QWORD *)(a2 + 16)) >> 2);
    v27 = *(_DWORD *)(a2 + 40);
    v9 = v28;
    if (__p)
    {
      v25 = __p;
      operator delete(__p);
    }
    if (v30)
    {
      v31 = v30;
      operator delete(v30);
    }
    if (v9 < (int)v22)
    {
      std::swap[abi:ne180100]<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>((uint64_t *)a2, (uint64_t *)a3);
      v16 = *(_QWORD *)a2;
      v17 = *(_QWORD *)(a2 + 8);
      v19 = 0;
      v20 = 0;
      v18 = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v18, *(const void **)(a2 + 16), *(_QWORD *)(a2 + 24), (uint64_t)(*(_QWORD *)(a2 + 24) - *(_QWORD *)(a2 + 16)) >> 2);
      v21 = *(_DWORD *)(a2 + 40);
      v11 = *(_QWORD *)a1;
      v13 = 0;
      v14 = 0;
      v12 = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v12, *(const void **)(a1 + 16), *(_QWORD *)(a1 + 24), (uint64_t)(*(_QWORD *)(a1 + 24) - *(_QWORD *)(a1 + 16)) >> 2);
      v15 = *(_DWORD *)(a1 + 40);
      v10 = v16;
      if (v12)
      {
        v13 = v12;
        operator delete(v12);
      }
      if (v18)
      {
        v19 = v18;
        operator delete(v18);
      }
      if (v10 < (int)v11)
        std::swap[abi:ne180100]<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>((uint64_t *)a1, (uint64_t *)a2);
    }
  }
}

void sub_1AD901828(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>> &,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v10;
  int v11;
  int v12;
  int v13;
  uint64_t v14;
  void *v15;
  void *v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  void *v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  void *v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  void *v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  void *__p;
  void *v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  void *v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  void *v51;
  void *v52;
  uint64_t v53;
  int v54;
  uint64_t v55;
  uint64_t v56;
  void *v57;
  void *v58;
  uint64_t v59;
  int v60;

  std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>> &,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>*>(a1, a2, a3, a4);
  v55 = *(_QWORD *)a5;
  v56 = *(_QWORD *)(a5 + 8);
  v58 = 0;
  v59 = 0;
  v57 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v57, *(const void **)(a5 + 16), *(_QWORD *)(a5 + 24), (uint64_t)(*(_QWORD *)(a5 + 24) - *(_QWORD *)(a5 + 16)) >> 2);
  v60 = *(_DWORD *)(a5 + 40);
  v49 = *(_QWORD *)a4;
  v50 = *(_QWORD *)(a4 + 8);
  v52 = 0;
  v53 = 0;
  v51 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v51, *(const void **)(a4 + 16), *(_QWORD *)(a4 + 24), (uint64_t)(*(_QWORD *)(a4 + 24) - *(_QWORD *)(a4 + 16)) >> 2);
  v54 = *(_DWORD *)(a4 + 40);
  v10 = v55;
  if (v51)
  {
    v52 = v51;
    operator delete(v51);
  }
  if (v57)
  {
    v58 = v57;
    operator delete(v57);
  }
  if (v10 < (int)v49)
  {
    std::swap[abi:ne180100]<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>((uint64_t *)a4, (uint64_t *)a5);
    v43 = *(_QWORD *)a4;
    v44 = *(_QWORD *)(a4 + 8);
    v46 = 0;
    v47 = 0;
    v45 = 0;
    std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v45, *(const void **)(a4 + 16), *(_QWORD *)(a4 + 24), (uint64_t)(*(_QWORD *)(a4 + 24) - *(_QWORD *)(a4 + 16)) >> 2);
    v48 = *(_DWORD *)(a4 + 40);
    v37 = *(_QWORD *)a3;
    v38 = *(_QWORD *)(a3 + 8);
    v40 = 0;
    v41 = 0;
    __p = 0;
    std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, *(const void **)(a3 + 16), *(_QWORD *)(a3 + 24), (uint64_t)(*(_QWORD *)(a3 + 24) - *(_QWORD *)(a3 + 16)) >> 2);
    v42 = *(_DWORD *)(a3 + 40);
    v11 = v43;
    if (__p)
    {
      v40 = __p;
      operator delete(__p);
    }
    if (v45)
    {
      v46 = v45;
      operator delete(v45);
    }
    if (v11 < (int)v37)
    {
      std::swap[abi:ne180100]<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>((uint64_t *)a3, (uint64_t *)a4);
      v31 = *(_QWORD *)a3;
      v32 = *(_QWORD *)(a3 + 8);
      v34 = 0;
      v35 = 0;
      v33 = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v33, *(const void **)(a3 + 16), *(_QWORD *)(a3 + 24), (uint64_t)(*(_QWORD *)(a3 + 24) - *(_QWORD *)(a3 + 16)) >> 2);
      v36 = *(_DWORD *)(a3 + 40);
      v25 = *(_QWORD *)a2;
      v26 = *(_QWORD *)(a2 + 8);
      v28 = 0;
      v29 = 0;
      v27 = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v27, *(const void **)(a2 + 16), *(_QWORD *)(a2 + 24), (uint64_t)(*(_QWORD *)(a2 + 24) - *(_QWORD *)(a2 + 16)) >> 2);
      v30 = *(_DWORD *)(a2 + 40);
      v12 = v31;
      if (v27)
      {
        v28 = v27;
        operator delete(v27);
      }
      if (v33)
      {
        v34 = v33;
        operator delete(v33);
      }
      if (v12 < (int)v25)
      {
        std::swap[abi:ne180100]<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>((uint64_t *)a2, (uint64_t *)a3);
        v19 = *(_QWORD *)a2;
        v20 = *(_QWORD *)(a2 + 8);
        v22 = 0;
        v23 = 0;
        v21 = 0;
        std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v21, *(const void **)(a2 + 16), *(_QWORD *)(a2 + 24), (uint64_t)(*(_QWORD *)(a2 + 24) - *(_QWORD *)(a2 + 16)) >> 2);
        v24 = *(_DWORD *)(a2 + 40);
        v14 = *(_QWORD *)a1;
        v16 = 0;
        v17 = 0;
        v15 = 0;
        std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v15, *(const void **)(a1 + 16), *(_QWORD *)(a1 + 24), (uint64_t)(*(_QWORD *)(a1 + 24) - *(_QWORD *)(a1 + 16)) >> 2);
        v18 = *(_DWORD *)(a1 + 40);
        v13 = v19;
        if (v15)
        {
          v16 = v15;
          operator delete(v15);
        }
        if (v21)
        {
          v22 = v21;
          operator delete(v21);
        }
        if (v13 < (int)v14)
          std::swap[abi:ne180100]<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>((uint64_t *)a1, (uint64_t *)a2);
      }
    }
  }
}

void sub_1AD901B74(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>> &,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>*,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  unint64_t v16;
  uint64_t v19;
  uint64_t v20;
  void *__p;
  void *v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  void *v28;
  uint64_t v29;
  int v30;

  if (a1 != a2)
  {
    v6 = a2;
    v8 = a2 - a1;
    v9 = (a2 - a1) / 48;
    if (a2 - a1 >= 49)
    {
      v10 = (unint64_t)(v9 - 2) >> 1;
      v11 = v10 + 1;
      v12 = (uint64_t *)(a1 + 48 * v10);
      do
      {
        std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>> &,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>*>(a1, a4, v9, v12);
        v12 -= 6;
        --v11;
      }
      while (v11);
    }
    v13 = v6;
    if (v6 != a3)
    {
      v19 = v8;
      v14 = v6;
      do
      {
        v25 = *(_QWORD *)v14;
        v26 = *(_QWORD *)(v14 + 8);
        v28 = 0;
        v29 = 0;
        v27 = 0;
        std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v27, *(const void **)(v14 + 16), *(_QWORD *)(v14 + 24), (uint64_t)(*(_QWORD *)(v14 + 24) - *(_QWORD *)(v14 + 16)) >> 2);
        v30 = *(_DWORD *)(v14 + 40);
        v20 = *(_QWORD *)a1;
        v22 = 0;
        v23 = 0;
        __p = 0;
        std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, *(const void **)(a1 + 16), *(_QWORD *)(a1 + 24), (uint64_t)(*(_QWORD *)(a1 + 24) - *(_QWORD *)(a1 + 16)) >> 2);
        v24 = *(_DWORD *)(a1 + 40);
        v15 = v25;
        if (__p)
        {
          v22 = __p;
          operator delete(__p);
        }
        if (v27)
        {
          v28 = v27;
          operator delete(v27);
        }
        if (v15 < (int)v20)
        {
          std::swap[abi:ne180100]<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>((uint64_t *)v14, (uint64_t *)a1);
          std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>> &,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>*>(a1, a4, v9, (uint64_t *)a1);
        }
        v14 += 48;
      }
      while (v14 != a3);
      v13 = a3;
      v8 = v19;
    }
    if (v8 >= 49)
    {
      v16 = v8 / 0x30uLL;
      do
      {
        std::__pop_heap[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>*>(a1, v6, a4, v16);
        v6 -= 48;
      }
      while (v16-- > 2);
    }
    return v13;
  }
  return a3;
}

void sub_1AD901DB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>> &,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  unint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  int v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  int v23;
  void *v24;
  void *v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  void *v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  void *v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  void *v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  _BYTE *v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  void *__p;
  void *v55;
  uint64_t v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  void *v60;
  void *v61;
  uint64_t v62;
  int v63;
  uint64_t v64;
  uint64_t v65;
  void *v66;
  void *v67;
  uint64_t v68;
  int v69;
  uint64_t v70;
  uint64_t v71;
  void *v72;
  void *v73;
  uint64_t v74;
  int v75;

  v4 = a3 - 2;
  if (a3 >= 2)
  {
    v5 = a4;
    v6 = a1;
    v21 = v4 >> 1;
    if ((uint64_t)(v4 >> 1) >= (uint64_t)(0xAAAAAAAAAAAAAAABLL * (((uint64_t)a4 - a1) >> 4)))
    {
      v7 = (0x5555555555555556 * (((uint64_t)a4 - a1) >> 4)) | 1;
      v8 = (uint64_t *)(a1 + 48 * v7);
      v9 = 0x5555555555555556 * (((uint64_t)a4 - a1) >> 4) + 2;
      if (v9 < a3)
      {
        v70 = *v8;
        v10 = a1 + 48 * v7;
        v71 = *(_QWORD *)(v10 + 8);
        v73 = 0;
        v74 = 0;
        v72 = 0;
        std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v72, *(const void **)(v10 + 16), *(_QWORD *)(v10 + 24), (uint64_t)(*(_QWORD *)(v10 + 24) - *(_QWORD *)(v10 + 16)) >> 2);
        v75 = *(_DWORD *)(v10 + 40);
        v64 = v8[6];
        v65 = v8[7];
        v67 = 0;
        v68 = 0;
        v66 = 0;
        std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v66, (const void *)v8[8], v8[9], (v8[9] - v8[8]) >> 2);
        v69 = *((_DWORD *)v8 + 22);
        v11 = v70;
        if (v66)
        {
          v67 = v66;
          operator delete(v66);
        }
        if (v72)
        {
          v73 = v72;
          operator delete(v72);
        }
        if (v11 < (int)v64)
        {
          v8 += 6;
          v7 = v9;
        }
      }
      v58 = *v8;
      v59 = v8[1];
      v61 = 0;
      v62 = 0;
      v60 = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v60, (const void *)v8[2], v8[3], (v8[3] - v8[2]) >> 2);
      v63 = *((_DWORD *)v8 + 10);
      v52 = *v5;
      v53 = v5[1];
      v55 = 0;
      v56 = 0;
      __p = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, (const void *)v5[2], v5[3], (v5[3] - v5[2]) >> 2);
      v57 = *((_DWORD *)v5 + 10);
      v12 = v58;
      if (__p)
      {
        v55 = __p;
        operator delete(__p);
      }
      if (v60)
      {
        v61 = v60;
        operator delete(v60);
      }
      if (v12 >= (int)v52)
      {
        v46 = *v5;
        v47 = v5[1];
        v49 = 0;
        v50 = 0;
        v48 = 0;
        std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v48, (const void *)v5[2], v5[3], (v5[3] - v5[2]) >> 2);
        v51 = *((_DWORD *)v5 + 10);
        v20 = v6;
        do
        {
          v13 = v8;
          *v5 = *v8;
          fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>::operator=((uint64_t)(v5 + 1), (uint64_t)(v8 + 1));
          *((_DWORD *)v5 + 10) = *((_DWORD *)v8 + 10);
          if (v21 < v7)
            break;
          v14 = (2 * v7) | 1;
          v8 = (uint64_t *)(v6 + 48 * v14);
          v15 = 2 * v7 + 2;
          if (v15 >= a3)
          {
            v7 = (2 * v7) | 1;
          }
          else
          {
            v40 = *v8;
            v16 = v6 + 48 * v14;
            v41 = *(_QWORD *)(v16 + 8);
            v43 = 0;
            v44 = 0;
            v42 = 0;
            std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v42, *(const void **)(v16 + 16), *(_QWORD *)(v16 + 24), (uint64_t)(*(_QWORD *)(v16 + 24) - *(_QWORD *)(v16 + 16)) >> 2);
            v45 = *(_DWORD *)(v6 + 48 * v14 + 40);
            v34 = v8[6];
            v35 = v8[7];
            v37 = 0;
            v38 = 0;
            v36 = 0;
            std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v36, (const void *)v8[8], v8[9], (v8[9] - v8[8]) >> 2);
            v39 = *((_DWORD *)v8 + 22);
            v17 = v40;
            v18 = v34;
            if (v36)
            {
              v37 = v36;
              operator delete(v36);
            }
            if (v42)
            {
              v43 = v42;
              operator delete(v42);
            }
            v7 = (2 * v7) | 1;
            if (v17 < v18)
            {
              v8 += 6;
              v7 = v15;
            }
          }
          v28 = *v8;
          v29 = v8[1];
          v31 = 0;
          v32 = 0;
          v30 = 0;
          std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v30, (const void *)v8[2], v8[3], (v8[3] - v8[2]) >> 2);
          v6 = v20;
          v33 = *((_DWORD *)v8 + 10);
          v23 = v46;
          v25 = 0;
          v26 = 0;
          v24 = 0;
          std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v24, v48, (uint64_t)v49, (v49 - (_BYTE *)v48) >> 2);
          v27 = v51;
          v19 = v28;
          if (v24)
          {
            v25 = v24;
            operator delete(v24);
          }
          if (v30)
          {
            v31 = v30;
            operator delete(v30);
          }
          v5 = v13;
        }
        while (v19 >= v23);
        *v13 = v46;
        v13[1] = v47;
        if (v13 != &v46)
          std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)v13 + 16, (char *)v48, (uint64_t)v49, (v49 - (_BYTE *)v48) >> 2);
        *((_DWORD *)v13 + 10) = v51;
        if (v48)
        {
          v49 = v48;
          operator delete(v48);
        }
      }
    }
  }
}

void sub_1AD902218(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,void *__p,uint64_t a41)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::__pop_heap[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  void *__p;
  _BYTE *v13;
  uint64_t v14;
  int v15;

  if (a4 >= 2)
  {
    v10 = *(_QWORD *)a1;
    v11 = *(_QWORD *)(a1 + 8);
    v13 = 0;
    v14 = 0;
    __p = 0;
    std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, *(const void **)(a1 + 16), *(_QWORD *)(a1 + 24), (uint64_t)(*(_QWORD *)(a1 + 24) - *(_QWORD *)(a1 + 16)) >> 2);
    v15 = *(_DWORD *)(a1 + 40);
    v8 = std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>> &,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>*>((uint64_t *)a1, a3, a4);
    v9 = v8;
    if (v8 == (uint64_t *)(a2 - 48))
    {
      *v8 = v10;
      v8[1] = v11;
      if (v8 != &v10)
        std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)v8 + 16, (char *)__p, (uint64_t)v13, (v13 - (_BYTE *)__p) >> 2);
      *((_DWORD *)v9 + 10) = v15;
    }
    else
    {
      *v8 = *(_QWORD *)(a2 - 48);
      fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>::operator=((uint64_t)(v8 + 1), a2 - 40);
      *((_DWORD *)v9 + 10) = *(_DWORD *)(a2 - 8);
      *(_QWORD *)(a2 - 48) = v10;
      *(_QWORD *)(a2 - 40) = v11;
      if ((uint64_t *)(a2 - 40) != &v11)
        std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)(a2 - 32), (char *)__p, (uint64_t)v13, (v13 - (_BYTE *)__p) >> 2);
      *(_DWORD *)(a2 - 8) = v15;
      std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>> &,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>*>(a1, (uint64_t)(v9 + 6), a3, 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v9 - a1 + 48) >> 4));
    }
    if (__p)
    {
      v13 = __p;
      operator delete(__p);
    }
  }
}

void sub_1AD9023F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t *std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>> &,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>*>(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  int v13;
  uint64_t v15;
  void *__p;
  void *v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  void *v23;
  uint64_t v24;
  int v25;

  v5 = 0;
  v6 = a3 - 2;
  if (a3 < 2)
    v6 = a3 - 1;
  v7 = v6 >> 1;
  do
  {
    v8 = a1;
    v9 = v5 + 1;
    a1 += 6 * v5 + 6;
    v10 = 2 * v5;
    v5 = (2 * v5) | 1;
    v11 = v10 + 2;
    if (v10 + 2 < a3)
    {
      v20 = *a1;
      v12 = &v8[6 * v9];
      v21 = v12[1];
      v23 = 0;
      v24 = 0;
      v22 = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v22, (const void *)v12[2], v12[3], (v12[3] - v12[2]) >> 2);
      v25 = *((_DWORD *)v12 + 10);
      v15 = a1[6];
      v17 = 0;
      v18 = 0;
      __p = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, (const void *)a1[8], a1[9], (a1[9] - a1[8]) >> 2);
      v19 = *((_DWORD *)a1 + 22);
      v13 = v20;
      if (__p)
      {
        v17 = __p;
        operator delete(__p);
      }
      if (v22)
      {
        v23 = v22;
        operator delete(v22);
      }
      if (v13 < (int)v15)
      {
        a1 += 6;
        v5 = v11;
      }
    }
    *v8 = *a1;
    fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>::operator=((uint64_t)(v8 + 1), (uint64_t)(a1 + 1));
    *((_DWORD *)v8 + 10) = *((_DWORD *)a1 + 10);
  }
  while (v5 <= v7);
  return a1;
}

void sub_1AD902580(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>> &,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  unint64_t v7;
  uint64_t *v8;
  char *v9;
  int v10;
  char *v11;
  int v12;
  int v13;
  void *v14;
  void *v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  void *v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  _BYTE *v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  void *__p;
  void *v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  void *v39;
  uint64_t v40;
  int v41;

  v4 = a4 - 2;
  if (a4 >= 2)
  {
    v7 = v4 >> 1;
    v8 = (uint64_t *)(a1 + 48 * (v4 >> 1));
    v36 = *v8;
    v37 = v8[1];
    v39 = 0;
    v40 = 0;
    v38 = 0;
    std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v38, (const void *)v8[2], v8[3], (v8[3] - v8[2]) >> 2);
    v41 = *((_DWORD *)v8 + 10);
    v9 = (char *)(a2 - 48);
    v30 = *(_QWORD *)(a2 - 48);
    v31 = *(_QWORD *)(a2 - 40);
    v33 = 0;
    v34 = 0;
    __p = 0;
    std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, *(const void **)(a2 - 32), *(_QWORD *)(a2 - 24), (uint64_t)(*(_QWORD *)(a2 - 24) - *(_QWORD *)(a2 - 32)) >> 2);
    v35 = *(_DWORD *)(a2 - 8);
    v10 = v36;
    if (__p)
    {
      v33 = __p;
      operator delete(__p);
    }
    if (v38)
    {
      v39 = v38;
      operator delete(v38);
    }
    if (v10 < (int)v30)
    {
      v24 = *(_QWORD *)(a2 - 48);
      v25 = *(_QWORD *)(a2 - 40);
      v27 = 0;
      v28 = 0;
      v26 = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v26, *(const void **)(a2 - 32), *(_QWORD *)(a2 - 24), (uint64_t)(*(_QWORD *)(a2 - 24) - *(_QWORD *)(a2 - 32)) >> 2);
      v29 = *(_DWORD *)(a2 - 8);
      do
      {
        v11 = (char *)v8;
        *(_QWORD *)v9 = *v8;
        fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>::operator=((uint64_t)(v9 + 8), (uint64_t)(v8 + 1));
        *((_DWORD *)v9 + 10) = *((_DWORD *)v8 + 10);
        if (!v7)
          break;
        v7 = (v7 - 1) >> 1;
        v8 = (uint64_t *)(a1 + 48 * v7);
        v18 = *v8;
        v19 = v8[1];
        v21 = 0;
        v22 = 0;
        v20 = 0;
        std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v20, (const void *)v8[2], v8[3], (v8[3] - v8[2]) >> 2);
        v23 = *((_DWORD *)v8 + 10);
        v13 = v24;
        v15 = 0;
        v16 = 0;
        v14 = 0;
        std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v14, v26, (uint64_t)v27, (v27 - (_BYTE *)v26) >> 2);
        v17 = v29;
        v12 = v18;
        if (v14)
        {
          v15 = v14;
          operator delete(v14);
        }
        if (v20)
        {
          v21 = v20;
          operator delete(v20);
        }
        v9 = v11;
      }
      while (v12 < v13);
      *(_QWORD *)v11 = v24;
      *((_QWORD *)v11 + 1) = v25;
      if (v11 != (char *)&v24)
        std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>(v11 + 16, (char *)v26, (uint64_t)v27, (v27 - (_BYTE *)v26) >> 2);
      *((_DWORD *)v11 + 10) = v29;
      if (v26)
      {
        v27 = v26;
        operator delete(v26);
      }
    }
  }
}

void sub_1AD902800(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t *std::__tree<std::__value_type<unsigned long,unsigned long>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,unsigned long>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,unsigned long>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(uint64_t **a1, unint64_t *a2, uint64_t a3, uint64_t **a4)
{
  uint64_t *v6;
  uint64_t **v7;
  unint64_t v8;
  uint64_t **v9;
  unint64_t v10;
  uint64_t *v11;

  v7 = a1 + 1;
  v6 = a1[1];
  if (v6)
  {
    v8 = *a2;
    while (1)
    {
      while (1)
      {
        v9 = (uint64_t **)v6;
        v10 = v6[4];
        if (v8 >= v10)
          break;
        v6 = *v9;
        v7 = v9;
        if (!*v9)
          goto LABEL_10;
      }
      if (v10 >= v8)
        break;
      v6 = v9[1];
      if (!v6)
      {
        v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v9 = a1 + 1;
LABEL_10:
    v11 = (uint64_t *)operator new(0x30uLL);
    v11[4] = **a4;
    v11[5] = 0;
    std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at(a1, (uint64_t)v9, v7, v11);
    return v11;
  }
  return (uint64_t *)v9;
}

uint64_t fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::SortedMatcher(uint64_t a1, uint64_t a2, int a3, int a4)
{
  int v7;
  fst *v8;
  _QWORD *v9;
  void *__p[2];
  char v12;
  char v13;

  *(_QWORD *)a1 = &unk_1E5D1BD28;
  *(_QWORD *)(a1 + 8) = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 88))(a2, 0);
  *(_DWORD *)(a1 + 16) = -1;
  *(_QWORD *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 32) = a3;
  *(_DWORD *)(a1 + 36) = a4;
  *(_DWORD *)(a1 + 40) = -1;
  *(_QWORD *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 56) = -1;
  *(_OWORD *)(a1 + 60) = 0u;
  *(_OWORD *)(a1 + 76) = 0u;
  *(_DWORD *)(a1 + 92) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((_QWORD *)(a1 + 72), 0, 0, 0);
  *(_DWORD *)(a1 + 96) = -1;
  *(_BYTE *)(a1 + 106) = 0;
  fst::MemoryPool<fst::ArcIterator<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::MemoryPool((_QWORD *)(a1 + 112), 1);
  v7 = *(_DWORD *)(a1 + 32);
  if (v7)
  {
    if (v7 == 1)
    {
      *(int32x2_t *)(a1 + 56) = vrev64_s32(*(int32x2_t *)(a1 + 56));
    }
    else if (v7 != 3)
    {
      if (FLAGS_fst_error_fatal)
        std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
      else
        std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
      v8 = fst::LogMessage::LogMessage((fst *)&v13, (uint64_t)__p);
      v9 = (_QWORD *)fst::cerr(v8);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"SortedMatcher: bad match type", 29);
      fst::LogMessage::~LogMessage((fst::LogMessage *)&v13);
      if (v12 < 0)
        operator delete(__p[0]);
      *(_DWORD *)(a1 + 32) = 3;
      *(_BYTE *)(a1 + 106) = 1;
    }
  }
  return a1;
}

void sub_1AD902A78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  _QWORD *v18;
  void **v19;
  quasar::Bitmap *v20;
  void *v22;

  fst::LogMessage::~LogMessage((fst::LogMessage *)&a18);
  if (a14 < 0)
    operator delete(__p);
  v18[14] = &unk_1E5D19670;
  fst::MemoryArena<fst::MemoryPool<fst::ArcIterator<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::Link>::~MemoryArena(v18 + 15);
  quasar::Bitmap::~Bitmap(v20);
  v22 = *v19;
  if (*v19)
  {
    v18[10] = v22;
    operator delete(v22);
  }
  _Unwind_Resume(a1);
}

void fst::MemoryPool<fst::ArcIterator<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::~MemoryPool(quasar::Bitmap *a1)
{
  *(_QWORD *)a1 = &unk_1E5D19670;
  fst::MemoryArena<fst::MemoryPool<fst::ArcIterator<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::Link>::~MemoryArena((_QWORD *)a1 + 1);
  quasar::Bitmap::~Bitmap(a1);
}

{
  *(_QWORD *)a1 = &unk_1E5D19670;
  fst::MemoryArena<fst::MemoryPool<fst::ArcIterator<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::Link>::~MemoryArena((_QWORD *)a1 + 1);
  quasar::Bitmap::~Bitmap(a1);
  JUMPOUT(0x1AF44D190);
}

void fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::~SortedMatcher(_QWORD *a1)
{
  fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::~SortedMatcher(a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::Copy(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = operator new();
  fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::SortedMatcher(v4, a1, a2);
  return v4;
}

void sub_1AD902BA8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10F1C403BFD1AB0);
  _Unwind_Resume(a1);
}

uint64_t fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::Type(uint64_t a1, uint64_t a2)
{
  int v2;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v2 = *(_DWORD *)(a1 + 32);
  if (v2 == 3)
    return 3;
  if (v2)
    v6 = 0x40000000;
  else
    v6 = 0x10000000;
  v7 = *(_QWORD *)(a1 + 8);
  if (v2)
    v8 = 3221225472;
  else
    v8 = 805306368;
  v9 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v7 + 64))(v7, v8, a2);
  if ((v9 & v6) != 0)
    return *(unsigned int *)(a1 + 32);
  v10 = 0x80000000;
  if (!v2)
    v10 = 0x20000000;
  if ((v9 & v10) != 0)
    return 3;
  else
    return 4;
}

uint64_t fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::GetFst(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8);
}

uint64_t fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::Properties(uint64_t a1, uint64_t a2)
{
  if (*(_BYTE *)(a1 + 106))
    return a2 | 4;
  else
    return a2;
}

uint64_t fst::MatcherBase<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>::Flags()
{
  return 0;
}

uint64_t fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::Next_(uint64_t result)
{
  uint64_t *v1;

  if (*(_BYTE *)(result + 104))
  {
    *(_BYTE *)(result + 104) = 0;
  }
  else
  {
    v1 = *(uint64_t **)(result + 24);
    result = *v1;
    if (*v1)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 40))(result);
    else
      ++v1[4];
  }
  return result;
}

uint64_t fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::Final_(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 32))(*(_QWORD *)(a1 + 8));
}

uint64_t fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::Priority_(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8));
}

_QWORD *fst::MemoryPool<fst::ArcIterator<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::MemoryPool(_QWORD *a1, uint64_t a2)
{
  *a1 = &unk_1E5D19670;
  fst::MemoryArena<fst::MemoryPool<fst::ArcIterator<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::Link>::MemoryArena(a1 + 1, a2);
  a1[7] = 0;
  return a1;
}

void sub_1AD902D24(_Unwind_Exception *a1)
{
  quasar::Bitmap *v1;

  quasar::Bitmap::~Bitmap(v1);
  _Unwind_Resume(a1);
}

uint64_t fst::MemoryPool<fst::ArcIterator<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::Size()
{
  return 40;
}

_QWORD *fst::MemoryArena<fst::MemoryPool<fst::ArcIterator<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::Link>::MemoryArena(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;

  *a1 = &unk_1E5D1A628;
  a1[1] = 48 * a2;
  a1[2] = 0;
  a1[3] = a1 + 3;
  a1[4] = a1 + 3;
  a1[5] = 0;
  v3 = operator new[]();
  v4 = operator new(0x18uLL);
  v5 = (_QWORD *)a1[4];
  v6 = a1[5];
  *v4 = a1 + 3;
  v4[1] = v5;
  v4[2] = v3;
  *v5 = v4;
  a1[4] = v4;
  a1[5] = v6 + 1;
  return a1;
}

void sub_1AD902E0C(_Unwind_Exception *a1)
{
  quasar::Bitmap *v1;
  _QWORD *v2;

  std::__list_imp<char *>::clear(v2);
  quasar::Bitmap::~Bitmap(v1);
  _Unwind_Resume(a1);
}

void fst::MemoryArena<fst::MemoryPool<fst::ArcIterator<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::Link>::~MemoryArena(_QWORD *a1)
{
  fst::MemoryArena<fst::MemoryPool<fst::ArcIterator<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::Link>::~MemoryArena(a1);
  JUMPOUT(0x1AF44D190);
}

{
  _QWORD *v2;
  _QWORD *i;
  uint64_t v4;

  *a1 = &unk_1E5D1A628;
  v2 = a1 + 3;
  for (i = (_QWORD *)a1[4]; i != v2; i = (_QWORD *)i[1])
  {
    v4 = i[2];
    if (v4)
      MEMORY[0x1AF44D160](v4, 0x1000C8077774924);
  }
  std::__list_imp<char *>::clear(v2);
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)a1);
}

uint64_t fst::MemoryArena<fst::MemoryPool<fst::ArcIterator<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::Link>::Size()
{
  return 48;
}

_QWORD *fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::~SortedMatcher(_QWORD *a1)
{
  _QWORD *v2;
  quasar::Bitmap *v3;
  _DWORD *v4;
  uint64_t v5;
  void *v6;

  *a1 = &unk_1E5D1BD28;
  v2 = (_QWORD *)a1[3];
  v3 = (quasar::Bitmap *)(a1 + 14);
  if (v2)
  {
    if (*v2)
    {
      (*(void (**)(_QWORD))(*(_QWORD *)*v2 + 8))(*v2);
    }
    else
    {
      v4 = (_DWORD *)v2[3];
      if (v4)
        --*v4;
    }
    v2[5] = a1[21];
    a1[21] = v2;
  }
  v5 = a1[1];
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  a1[14] = &unk_1E5D19670;
  fst::MemoryArena<fst::MemoryPool<fst::ArcIterator<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::Link>::~MemoryArena(a1 + 15);
  quasar::Bitmap::~Bitmap(v3);
  v6 = (void *)a1[9];
  if (v6)
  {
    a1[10] = v6;
    operator delete(v6);
  }
  return a1;
}

uint64_t fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::SortedMatcher(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;

  *(_QWORD *)a1 = &unk_1E5D1BD28;
  *(_QWORD *)(a1 + 8) = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a2 + 8) + 88))(*(_QWORD *)(a2 + 8), a3);
  *(_DWORD *)(a1 + 16) = -1;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 40) = -1;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  v5 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 64) = v5;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((_QWORD *)(a1 + 72), *(const void **)(a2 + 72), *(_QWORD *)(a2 + 80), (uint64_t)(*(_QWORD *)(a2 + 80) - *(_QWORD *)(a2 + 72)) >> 2);
  *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 96);
  *(_BYTE *)(a1 + 106) = *(_BYTE *)(a2 + 106);
  fst::MemoryPool<fst::ArcIterator<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::MemoryPool((_QWORD *)(a1 + 112), 1);
  return a1;
}

void sub_1AD903048(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 80) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

uint64_t fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::SetState(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  fst *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  void *__p[2];
  char v10;
  char v11;

  if (*(_DWORD *)(result + 16) != (_DWORD)a2)
  {
    v3 = result;
    *(_DWORD *)(result + 16) = a2;
    if (*(_DWORD *)(result + 32) == 3)
    {
      if (FLAGS_fst_error_fatal)
        std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
      else
        std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
      v4 = fst::LogMessage::LogMessage((fst *)&v11, (uint64_t)__p);
      v5 = (_QWORD *)fst::cerr(v4);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"SortedMatcher: bad match type", 29);
      fst::LogMessage::~LogMessage((fst::LogMessage *)&v11);
      if (v10 < 0)
        operator delete(__p[0]);
      *(_BYTE *)(v3 + 106) = 1;
    }
    v6 = *(_QWORD **)(v3 + 24);
    if (v6)
    {
      fst::ArcIterator<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Reinit(v6, *(_QWORD *)(v3 + 8), a2);
      v7 = *(_QWORD **)(v3 + 24);
    }
    else
    {
      v7 = *(_QWORD **)(v3 + 168);
      if (v7)
      {
        *(_QWORD *)(v3 + 168) = v7[5];
      }
      else
      {
        v7 = (_QWORD *)fst::MemoryArena<fst::MemoryPool<fst::ArcIterator<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::Link>::Allocate((_QWORD *)(v3 + 120), 1);
        v7[5] = 0;
      }
      v8 = *(_QWORD *)(v3 + 8);
      v7[4] = 0;
      (*(void (**)(uint64_t, uint64_t, _QWORD *))(*(_QWORD *)v8 + 136))(v8, a2, v7);
      *(_QWORD *)(v3 + 24) = v7;
    }
    if (*v7)
      (*(void (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*v7 + 80))(*v7, 16, 16);
    result = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v3 + 8) + 40))(*(_QWORD *)(v3 + 8), a2);
    *(_QWORD *)(v3 + 48) = result;
    *(_DWORD *)(v3 + 96) = a2;
  }
  return result;
}

void sub_1AD9031D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  fst::LogMessage::~LogMessage((fst::LogMessage *)&a18);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

BOOL fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::Find(uint64_t a1, int a2)
{
  _BOOL8 result;
  int v4;

  *(_BYTE *)(a1 + 105) = 1;
  if (*(_BYTE *)(a1 + 106))
  {
    result = 0;
    *(_BYTE *)(a1 + 104) = 0;
    *(_DWORD *)(a1 + 40) = -1;
  }
  else
  {
    *(_BYTE *)(a1 + 104) = a2 == 0;
    if (a2 == -1)
      v4 = 0;
    else
      v4 = a2;
    *(_DWORD *)(a1 + 40) = v4;
    return (fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::Search(a1) & 1) != 0
        || *(_BYTE *)(a1 + 104) != 0;
  }
  return result;
}

uint64_t fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::Search(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  int v13;
  _QWORD *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  _DWORD *v18;
  int v19;
  int v20;
  _QWORD *v21;
  uint64_t result;
  uint64_t *v23;
  _QWORD *v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  _DWORD *v28;
  _QWORD *v29;
  unint64_t v30;

  v2 = **(_QWORD **)(a1 + 24);
  if (v2)
  {
    if (*(_DWORD *)(a1 + 32))
      v3 = 2;
    else
      v3 = 1;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v2 + 80))(v2, v3, 15);
  }
  if (*(_DWORD *)(a1 + 40) < *(_DWORD *)(a1 + 36))
  {
    v4 = *(_QWORD **)(a1 + 24);
    if (*v4)
      (*(void (**)(_QWORD))(*(_QWORD *)*v4 + 56))(*v4);
    else
      v4[4] = 0;
    while (1)
    {
      v14 = *(_QWORD **)(a1 + 24);
      if (*v14)
      {
        if (((*(uint64_t (**)(_QWORD))(*(_QWORD *)*v14 + 24))(*v14) & 1) != 0)
          return 0;
      }
      else if (v14[4] >= v14[2])
      {
        return 0;
      }
      v15 = *(uint64_t **)(a1 + 24);
      v16 = *v15;
      if (*(_DWORD *)(a1 + 32))
      {
        v17 = v16 ? (*(uint64_t (**)(uint64_t))(*(_QWORD *)v16 + 32))(v16) : v15[1] + 48 * v15[4];
        v18 = (_DWORD *)(v17 + 4);
      }
      else
      {
        v18 = (_DWORD *)(v16 ? (*(uint64_t (**)(uint64_t))(*(_QWORD *)v16 + 32))(v16) : v15[1] + 48 * v15[4]);
      }
      v19 = *(_DWORD *)(a1 + 40);
      v20 = *v18 <= v19 ? 0 : 7;
      if (*v18 == v19)
        v20 = 1;
      if (v20)
        break;
      v21 = *(_QWORD **)(a1 + 24);
      if (*v21)
        (*(void (**)(_QWORD))(*(_QWORD *)*v21 + 40))(*v21);
      else
        ++v21[4];
    }
    result = 0;
    if (v20 == 1)
      return 1;
    return result;
  }
  v5 = *(_QWORD *)(a1 + 48);
  if (!v5)
  {
    v6 = 0;
LABEL_53:
    v23 = *(uint64_t **)(a1 + 24);
    result = *v23;
    if (*v23)
    {
      (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)result + 64))(result, v6);
      return 0;
    }
    else
    {
      v23[4] = v6;
    }
    return result;
  }
  v6 = 0;
  while (1)
  {
    v7 = (v5 + v6) >> 1;
    v8 = *(_QWORD **)(a1 + 24);
    if (*v8)
      (*(void (**)(_QWORD, unint64_t))(*(_QWORD *)*v8 + 64))(*v8, (v5 + v6) >> 1);
    else
      v8[4] = v7;
    v9 = *(uint64_t **)(a1 + 24);
    v10 = *v9;
    if (*(_DWORD *)(a1 + 32))
    {
      v11 = v10 ? (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 32))(v10) : v9[1] + 48 * v9[4];
      v12 = (_DWORD *)(v11 + 4);
    }
    else
    {
      v12 = (_DWORD *)(v10 ? (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 32))(v10) : v9[1] + 48 * v9[4]);
    }
    v13 = *(_DWORD *)(a1 + 40);
    if (*v12 <= v13)
      break;
    v5 = (v5 + v6) >> 1;
LABEL_25:
    if (v6 >= v5)
      goto LABEL_53;
  }
  if (*v12 < v13)
  {
    v6 = v7 + 1;
    goto LABEL_25;
  }
  while (v7 > v6)
  {
    v24 = *(_QWORD **)(a1 + 24);
    --v7;
    if (*v24)
      (*(void (**)(_QWORD, unint64_t))(*(_QWORD *)*v24 + 64))(*v24, v7);
    else
      v24[4] = v7;
    v25 = *(uint64_t **)(a1 + 24);
    v26 = *v25;
    if (*(_DWORD *)(a1 + 32))
    {
      if (v26)
        v27 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v26 + 32))(v26);
      else
        v27 = v25[1] + 48 * v25[4];
      v28 = (_DWORD *)(v27 + 4);
    }
    else if (v26)
    {
      v28 = (_DWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v26 + 32))(v26);
    }
    else
    {
      v28 = (_DWORD *)(v25[1] + 48 * v25[4]);
    }
    if (*v28 != *(_DWORD *)(a1 + 40))
    {
      v29 = *(_QWORD **)(a1 + 24);
      v30 = v7 + 1;
      if (*v29)
        (*(void (**)(_QWORD, unint64_t))(*(_QWORD *)*v29 + 64))(*v29, v30);
      else
        v29[4] = v30;
      return 1;
    }
  }
  return 1;
}

BOOL fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::Done(uint64_t a1)
{
  _QWORD *v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  _DWORD *v10;

  if (*(_BYTE *)(a1 + 104))
    return 0;
  v3 = *(_QWORD **)(a1 + 24);
  if (*v3)
  {
    if (((*(uint64_t (**)(_QWORD))(*(_QWORD *)*v3 + 24))(*v3) & 1) != 0)
      return 1;
  }
  else if (v3[4] >= v3[2])
  {
    return 1;
  }
  if (!*(_BYTE *)(a1 + 105))
    return 0;
  v4 = *(_DWORD *)(a1 + 32);
  v5 = **(_QWORD **)(a1 + 24);
  if (v5)
  {
    if (v4)
      v6 = 2;
    else
      v6 = 1;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v5 + 80))(v5, v6, 15);
    v4 = *(_DWORD *)(a1 + 32);
  }
  v7 = *(uint64_t **)(a1 + 24);
  v8 = *v7;
  if (v4)
  {
    if (v8)
      v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 32))(v8);
    else
      v9 = v7[1] + 48 * v7[4];
    v10 = (_DWORD *)(v9 + 4);
  }
  else if (v8)
  {
    v10 = (_DWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 32))(v8);
  }
  else
  {
    v10 = (_DWORD *)(v7[1] + 48 * v7[4]);
  }
  return *v10 != *(_DWORD *)(a1 + 40);
}

uint64_t fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::Value(uint64_t a1)
{
  _QWORD *v3;

  if (*(_BYTE *)(a1 + 104))
    return a1 + 56;
  v3 = *(_QWORD **)(a1 + 24);
  if (*v3
    && ((*(void (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*v3 + 80))(*v3, 15, 15),
        v3 = *(_QWORD **)(a1 + 24),
        *v3))
  {
    return (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v3 + 32))(*v3);
  }
  else
  {
    return v3[1] + 48 * v3[4];
  }
}

uint64_t std::string_view::rfind[abi:ne180100](unsigned __int8 **a1, unsigned __int8 *a2, unint64_t a3, unint64_t a4)
{
  unsigned __int8 *v4;
  unsigned __int8 *v5;
  unsigned __int8 *v6;
  unint64_t v7;
  unsigned __int8 *v8;
  unsigned __int8 *v9;
  unsigned __int8 *v10;
  unsigned __int8 *v11;
  uint64_t v12;
  int v13;
  int v14;
  unsigned __int8 *v15;

  v4 = *a1;
  v5 = a1[1];
  if ((unint64_t)v5 >= a4)
    v6 = (unsigned __int8 *)a4;
  else
    v6 = a1[1];
  v7 = v5 - v6;
  v8 = &v6[a3];
  if (v7 <= a3)
    v8 = a1[1];
  v9 = &v8[(_QWORD)v4];
  if (a3 && v8)
  {
    v10 = *a1;
    v11 = &v8[(_QWORD)v4];
    do
    {
      if (*v10 == *a2)
      {
        v12 = 1;
        while (a3 != v12)
        {
          if (&v10[v12] == v9)
            goto LABEL_19;
          v13 = v10[v12];
          v14 = a2[v12++];
          if (v13 != v14)
            goto LABEL_10;
        }
        v11 = v10;
      }
LABEL_10:
      ++v10;
    }
    while (v10 != v9);
  }
  else
  {
    v11 = &v8[(_QWORD)v4];
  }
LABEL_19:
  v15 = (unsigned __int8 *)(v11 - v4);
  if (v11 != v9 || a3 == 0)
    return (uint64_t)v15;
  else
    return -1;
}

_QWORD *quasar::SentencePieceOptions::options@<X0>(quasar::SentencePieceOptions *this@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *result;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  result = operator new(0x20uLL);
  a2[1] = result + 4;
  a2[2] = result + 4;
  *result = (char *)this + 16;
  result[1] = (char *)this + 176;
  result[2] = (char *)this + 320;
  result[3] = (char *)this + 480;
  *a2 = result;
  return result;
}

void quasar::SentencePieceBlock::init(quasar::SentencePieceBlock *this)
{
  _QWORD *v2;
  uint64_t v3;
  int v4;
  uint64_t v6;
  int v7;
  uint64_t v9;
  int v10;
  uint64_t v12;
  int v13;
  int v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  __int128 v22[17];

  v2 = (_QWORD *)((char *)this + 328);
  v3 = quasar::OptionValue<std::string>::value((_QWORD *)this + 41);
  v4 = *(char *)(v3 + 23);
  if (v4 < 0)
  {
    if (*(_QWORD *)(v3 + 8) != 6)
      goto LABEL_10;
    v3 = *(_QWORD *)v3;
  }
  else if (v4 != 6)
  {
    goto LABEL_10;
  }
  if (*(_DWORD *)v3 == 1868787301 && *(_WORD *)(v3 + 4) == 25956)
  {
    v15 = 0;
    goto LABEL_42;
  }
LABEL_10:
  v6 = quasar::OptionValue<std::string>::value(v2);
  v7 = *(char *)(v6 + 23);
  if (v7 < 0)
  {
    if (*(_QWORD *)(v6 + 8) != 6)
      goto LABEL_19;
    v6 = *(_QWORD *)v6;
  }
  else if (v7 != 6)
  {
    goto LABEL_19;
  }
  if (*(_DWORD *)v6 == 1868784996 && *(_WORD *)(v6 + 4) == 25956)
  {
    v15 = 1;
    goto LABEL_42;
  }
LABEL_19:
  v9 = quasar::OptionValue<std::string>::value(v2);
  v10 = *(char *)(v9 + 23);
  if (v10 < 0)
  {
    if (*(_QWORD *)(v9 + 8) != 10)
      goto LABEL_28;
    v9 = *(_QWORD *)v9;
  }
  else if (v10 != 10)
  {
    goto LABEL_28;
  }
  if (*(_QWORD *)v9 == 0x612D65646F636564 && *(_WORD *)(v9 + 8) == 26992)
  {
    v15 = 2;
    goto LABEL_42;
  }
LABEL_28:
  v12 = quasar::OptionValue<std::string>::value(v2);
  v13 = *(char *)(v12 + 23);
  if (v13 < 0)
  {
    if (*(_QWORD *)(v12 + 8) != 12)
      goto LABEL_48;
    v12 = *(_QWORD *)v12;
  }
  else if (v13 != 12)
  {
    goto LABEL_48;
  }
  if (*(_QWORD *)v12 != 0x732D65646F636564 || *(_DWORD *)(v12 + 8) != 1701011824)
  {
LABEL_48:
    memset(v22, 0, sizeof(v22));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v22);
    v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"Unknown sentence piece action: ", 31);
    v21 = quasar::OptionValue<std::string>::value(v2);
    std::operator<<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v20, v21);
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v22);
  }
  v15 = 3;
LABEL_42:
  *((_DWORD *)this + 162) = v15;
  v16 = quasar::OptionValue<std::string>::value((_QWORD *)this + 3);
  quasar::SentencePieceBlock::getModel(v16, (uint64_t *)v22);
  std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100]((uint64_t)this + 632, v22);
  v17 = (std::__shared_weak_count *)*((_QWORD *)&v22[0] + 1);
  if (*((_QWORD *)&v22[0] + 1))
  {
    v18 = (unint64_t *)(*((_QWORD *)&v22[0] + 1) + 8);
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
}

void quasar::SentencePieceBlock::getModel(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  unsigned __int8 v4;
  uint64_t *v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  sentencepiece::SentencePieceProcessor *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  _QWORD *v16;
  _QWORD *v17;
  int v18;
  const void *v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  std::string *p_p;
  std::string::size_type size;
  std::string __p;
  _OWORD v26[17];
  uint64_t v27;

  if ((v4 & 1) == 0
  {
    v16 = (_QWORD *)operator new();
    v16[2] = 0;
    v16[1] = 0;
    *v16 = v16 + 1;
    quasar::SentencePieceBlock::getModel(std::string const&)::modelFileMap = (uint64_t)v16;
  }
  *(_QWORD *)&v26[0] = a1;
  v5 = std::__tree<std::__value_type<std::string,std::weak_ptr<kaldi::quasar::TorchEncoderDecoder>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::weak_ptr<kaldi::quasar::TorchEncoderDecoder>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::weak_ptr<kaldi::quasar::TorchEncoderDecoder>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)quasar::SentencePieceBlock::getModel(std::string const&)::modelFileMap, (const void **)a1, (uint64_t)&std::piecewise_construct, (__int128 **)v26);
  *a2 = 0;
  a2[1] = 0;
  v6 = (std::__shared_weak_count *)v5[8];
  if (v6)
  {
    v7 = std::__shared_weak_count::lock(v6);
    a2[1] = (uint64_t)v7;
    if (v7)
    {
      v8 = v5[7];
      *a2 = v8;
      if (v8)
        return;
    }
    else if (*a2)
    {
      return;
    }
  }
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)a2);
  v9 = (sentencepiece::SentencePieceProcessor *)operator new();
  sentencepiece::SentencePieceProcessor::SentencePieceProcessor(v9);
  std::shared_ptr<sentencepiece::SentencePieceProcessor>::shared_ptr[abi:ne180100]<sentencepiece::SentencePieceProcessor,void>(a2, (uint64_t)v9);
  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)*a2 + 16))(&v27);
  if (v27)
  {
    memset(v26, 0, sizeof(v26));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v26);
    v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)"SentencePiece error while loading file '", 40);
    v18 = *(char *)(a1 + 23);
    if (v18 >= 0)
      v19 = (const void *)a1;
    else
      v19 = *(const void **)a1;
    if (v18 >= 0)
      v20 = *(unsigned __int8 *)(a1 + 23);
    else
      v20 = *(_QWORD *)(a1 + 8);
    v21 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)v19, v20);
    v22 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)"': ", 3);
    sentencepiece::util::Status::ToString((sentencepiece::util::Status *)&v27, &__p);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_p = &__p;
    else
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      size = __p.__r_.__value_.__l.__size_;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)p_p, size);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v26);
  }
  *(_QWORD *)&v26[0] = a1;
  v10 = std::__tree<std::__value_type<std::string,std::weak_ptr<kaldi::quasar::TorchEncoderDecoder>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::weak_ptr<kaldi::quasar::TorchEncoderDecoder>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::weak_ptr<kaldi::quasar::TorchEncoderDecoder>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)quasar::SentencePieceBlock::getModel(std::string const&)::modelFileMap, (const void **)a1, (uint64_t)&std::piecewise_construct, (__int128 **)v26);
  v12 = *a2;
  v11 = a2[1];
  if (v11)
  {
    v13 = (unint64_t *)(v11 + 16);
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }
  v15 = (std::__shared_weak_count *)v10[8];
  v10[7] = v12;
  v10[8] = v11;
  if (v15)
    std::__shared_weak_count::__release_weak(v15);
  sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&v27);
}

void sub_1AD903D24(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  sentencepiece::util::Status::~Status((sentencepiece::util::Status *)(v2 - 56));
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void sub_1AD903D48()
{
  uint64_t v0;

  MEMORY[0x1AF44D190](v0, 0xB1C40B9A2BF9DLL);
  JUMPOUT(0x1AD903D64);
}

void `virtual thunk to'quasar::SentencePieceBlock::init(quasar::SentencePieceBlock *this)
{
  quasar::SentencePieceBlock::init((quasar::SentencePieceBlock *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 88)));
}

void quasar::SentencePieceBlock::process(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  void *v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  std::string *v19;
  __int128 v20;
  uint64_t v21;
  uint64_t *v22;
  std::string *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  unint64_t v28;
  __int128 v29;
  std::string *v30;
  uint64_t v31;
  char *v32;
  unsigned int v33;
  uint64_t v34;
  float32x2_t *v35;
  float32x2_t *v36;
  std::string *v37;
  int v38;
  std::string *v39;
  uint64_t v40;
  std::string *v41;
  uint64_t v42;
  std::string *p_str;
  uint64_t v44;
  _QWORD *v46;
  int v47;
  const std::string::value_type *v48;
  std::string::size_type v49;
  uint64_t v50;
  float32x2_t *v51;
  float32x2_t v52;
  float v53;
  float v54;
  __int32 v55;
  __int32 v56;
  std::string::size_type v57;
  BOOL v58;
  uint64_t v59;
  std::string *v60;
  __int32 v61;
  std::string *v62;
  int v63;
  __int32 v64;
  std::string::size_type v65;
  std::string::size_type size;
  uint64_t v68;
  std::string *v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  __int128 v74;
  std::string *v75;
  __int128 v76;
  void **v77;
  std::string::size_type v78;
  int v79;
  std::string::value_type v80;
  float32x2_t v81;
  uint64_t v82;
  unint64_t i;
  int v84;
  char *v85;
  std::string::size_type v86;
  quasar::TranslationPhraseInternal *v87;
  quasar::TranslationPhraseInternal *v88;
  uint64_t v89;
  char **v90;
  char **v91;
  std::string *v92;
  std::string *v93;
  uint64_t *v94;
  char v95;
  uint64_t v96;
  uint64_t v97;
  std::string *v98;
  std::string *v99;
  char v100;
  uint64_t v101;
  uint64_t j;
  quasar::TranslationPhraseInternal *v103;
  quasar::TranslationPhraseInternal *v104;
  uint64_t v105;
  _QWORD *v106;
  _QWORD *v107;
  _QWORD *v108;
  _QWORD *v109;
  uint64_t v110;
  uint64_t v111;
  std::string v113;
  std::string v114;
  char v115;
  void *v116[2];
  char v117;
  std::string v118;
  std::string v119[2];
  int v120;
  uint64_t v121;
  char v122;
  float32x2_t *v123;
  std::string *v124;
  unint64_t v125;
  float32x2_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  std::string __str;
  void *v131;
  std::string *v132;
  unint64_t v133;
  void *__p[2];
  __int128 v135;
  void *v136[2];
  __int128 v137;
  void *v138[8];
  __int128 v139;
  __int128 v140;
  __int128 v141;
  __int128 v142;
  __int128 v143;
  __int128 v144;
  __int128 v145;
  __int128 v146;
  __int128 v147;
  std::string v148[5];
  char v149;
  quasar::TranslationTokenInternal *v150;
  std::string *v151;
  unint64_t v152[5];
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  quasar::TranslationPhraseInternal *v156;
  unint64_t v157;
  char v158;
  std::string v159[2];
  _QWORD v160[2];
  _QWORD v161[2];
  char v162;
  const void *v163[3];
  _QWORD v164[4];
  int v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;

  v3 = a1;
  v168 = *MEMORY[0x1E0C80C00];
  v4 = *a3;
  v111 = a3[1];
  if (*a3 == v111)
  {
    quasar::ProcessingBlock::send(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24), (uint64_t)a3, 0);
  }
  else
  {
    v156 = 0;
    v155 = 0;
    v157 = 0;
    if (*(_DWORD *)(a1 + 648))
    {
      v131 = 0;
      v132 = 0;
      v133 = 0;
      v107 = (_QWORD *)(a1 + 488);
      v108 = (_QWORD *)(a1 + 184);
      while (1)
      {
        sentencepiece::SentencePieceText::SentencePieceText((sentencepiece::SentencePieceText *)v163, 0);
        if (*(_BYTE *)(v4 + 129))
        {
          __p[0] = 0;
          __p[1] = 0;
          *(_QWORD *)&v135 = 0;
          v5 = *(_QWORD *)(v4 + 136);
          v6 = *(_QWORD *)(v4 + 144);
          if (v5 != v6)
          {
            v7 = 0;
            do
            {
              if ((unint64_t)v7 >= (unint64_t)v135)
              {
                v9 = (char *)__p[0];
                v10 = (v7 - (char *)__p[0]) >> 2;
                v11 = v10 + 1;
                if ((unint64_t)(v10 + 1) >> 62)
                  std::vector<int>::__throw_length_error[abi:ne180100]();
                v12 = v135 - (unint64_t)__p[0];
                if ((uint64_t)(v135 - (unint64_t)__p[0]) >> 1 > v11)
                  v11 = v12 >> 1;
                if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFFCLL)
                  v13 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v13 = v11;
                if (v13)
                {
                  v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v135, v13);
                  v9 = (char *)__p[0];
                  v7 = (char *)__p[1];
                }
                else
                {
                  v14 = 0;
                }
                v15 = &v14[4 * v10];
                *(_DWORD *)v15 = *(_DWORD *)(v5 + 64);
                v8 = v15 + 4;
                while (v7 != v9)
                {
                  v16 = *((_DWORD *)v7 - 1);
                  v7 -= 4;
                  *((_DWORD *)v15 - 1) = v16;
                  v15 -= 4;
                }
                __p[0] = v15;
                __p[1] = v8;
                *(_QWORD *)&v135 = &v14[4 * v13];
                if (v9)
                  operator delete(v9);
              }
              else
              {
                *(_DWORD *)v7 = *(_DWORD *)(v5 + 64);
                v8 = v7 + 4;
              }
              __p[1] = v8;
              v5 += 136;
              v7 = (char *)v8;
            }
            while (v5 != v6);
          }
          (*(void (**)(uint64_t *__return_ptr, _QWORD, void **, const void **))(**(_QWORD **)(v3 + 632) + 232))(&v129, *(_QWORD *)(v3 + 632), __p, v163);
          sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&v129);
          if (__p[0])
          {
            __p[1] = __p[0];
            operator delete(__p[0]);
          }
        }
        else
        {
          __p[0] = 0;
          __p[1] = 0;
          *(_QWORD *)&v135 = 0;
          v18 = *(_QWORD *)(v4 + 136);
          v17 = *(_QWORD *)(v4 + 144);
          if (v18 != v17)
          {
            v19 = 0;
            do
            {
              if ((unint64_t)v19 >= (unint64_t)v135)
              {
                v19 = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)__p, (__int128 *)v18);
              }
              else
              {
                if (*(char *)(v18 + 23) < 0)
                {
                  std::string::__init_copy_ctor_external(v19, *(const std::string::value_type **)v18, *(_QWORD *)(v18 + 8));
                }
                else
                {
                  v20 = *(_OWORD *)v18;
                  v19->__r_.__value_.__r.__words[2] = *(_QWORD *)(v18 + 16);
                  *(_OWORD *)&v19->__r_.__value_.__l.__data_ = v20;
                }
                ++v19;
              }
              __p[1] = v19;
              v18 += 136;
            }
            while (v18 != v17);
          }
          v3 = a1;
          (*(void (**)(uint64_t *__return_ptr, _QWORD, void **, const void **))(**(_QWORD **)(a1 + 632) + 224))(&v128, *(_QWORD *)(a1 + 632), __p, v163);
          sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&v128);
          v148[0].__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v148);
        }
        v21 = v4;
        if (0xF0F0F0F0F0F0F0F1 * ((uint64_t)(*(_QWORD *)(v4 + 144) - *(_QWORD *)(v4 + 136)) >> 3) != v165)
        {
          v146 = 0u;
          v147 = 0u;
          v144 = 0u;
          v145 = 0u;
          v142 = 0u;
          v143 = 0u;
          v140 = 0u;
          v141 = 0u;
          v139 = 0u;
          v137 = 0u;
          memset(v138, 0, sizeof(v138));
          v135 = 0u;
          *(_OWORD *)v136 = 0u;
          *(_OWORD *)__p = 0u;
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Inconsistent sentencepiece decoding length, expected ", 53);
          v106 = (_QWORD *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v106, (uint64_t)" got ", 5);
          std::ostream::operator<<();
          quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)__p);
        }
        quasar::TranslationPhraseInternal::TranslationPhraseInternal(v148, (const quasar::TranslationPhraseInternal *)v4);
        if (v166)
          v22 = (uint64_t *)(v166 + 8);
        else
          v22 = 0;
        v23 = (std::string *)v150;
        if (v165)
        {
          v24 = 0;
          v25 = 8 * v165;
          do
          {
            v26 = *v22;
            std::string::operator=((std::string *)((char *)v23 + v24), (const std::string *)(*(_QWORD *)(*v22 + 48) & 0xFFFFFFFFFFFFFFFELL));
            std::string::operator=((std::string *)((char *)v150 + v24 + 72), (const std::string *)(*(_QWORD *)(v26 + 56) & 0xFFFFFFFFFFFFFFFELL));
            v23 = (std::string *)v150;
            v27 = (char *)v150 + v24;
            *((_DWORD *)v27 + 16) = *(_DWORD *)(v26 + 64);
            *((_QWORD *)v27 + 16) = *(_QWORD *)(v26 + 68);
            v27[24] = 1;
            ++v22;
            v24 += 136;
            v25 -= 8;
          }
          while (v25);
        }
        if (v23 != v151)
          v151[-5].__r_.__value_.__s.__data_[8] = 0;
        v28 = v167 & 0xFFFFFFFFFFFFFFFELL;
        if (*(char *)((v167 & 0xFFFFFFFFFFFFFFFELL) + 23) < 0)
        {
          std::string::__init_copy_ctor_external(&__str, *(const std::string::value_type **)v28, *(_QWORD *)(v28 + 8));
        }
        else
        {
          v29 = *(_OWORD *)v28;
          __str.__r_.__value_.__r.__words[2] = *(_QWORD *)(v28 + 16);
          *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v29;
        }
        v30 = v132;
        v31 = v21;
        if ((unint64_t)v132 >= v133)
        {
          v32 = (char *)std::vector<quasar::TranslationPhraseInternal>::__push_back_slow_path<quasar::TranslationPhraseInternal const&>((uint64_t *)&v131, (const quasar::TranslationPhraseInternal *)v148);
        }
        else
        {
          quasar::TranslationPhraseInternal::TranslationPhraseInternal(v132, (const quasar::TranslationPhraseInternal *)v148);
          v32 = &v30[8].__r_.__value_.__s.__data_[8];
        }
        v132 = (std::string *)v32;
        quasar::TranslationPhraseInternal::TranslationPhraseInternal(v119, (const quasar::TranslationPhraseInternal *)v148);
        v33 = *(_DWORD *)(v3 + 648) - 1;
        v35 = v123;
        v34 = (uint64_t)v124;
        if (v33 <= 1)
        {
          while ((float32x2_t *)v34 != v35)
          {
            v34 -= 136;
            std::allocator<quasar::TranslationTokenInternal>::destroy[abi:ne180100]((uint64_t)&v125, v34);
          }
          v124 = (std::string *)v35;
          v122 = 0;
          v36 = (float32x2_t *)v150;
          v37 = v151;
          v38 = 1;
          if (v150 != (quasar::TranslationTokenInternal *)v151)
          {
            while (1)
            {
              v39 = v124;
              if (v123 != (float32x2_t *)v124)
              {
                v40 = SHIDWORD(v124[-1].__r_.__value_.__r.__words[2]);
                if (LODWORD(v124[-1].__r_.__value_.__r.__words[2]) == (_DWORD)v40
                  || ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
                    ? (v41 = &__str)
                    : (v41 = (std::string *)__str.__r_.__value_.__r.__words[0]),
                      v41->__r_.__value_.__s.__data_[v40 - 1] != 32))
                {
                  v42 = v36[16].i32[0];
                  if ((_DWORD)v42 == v36[16].i32[1]
                    || ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
                      ? (p_str = &__str)
                      : (p_str = (std::string *)__str.__r_.__value_.__r.__words[0]),
                        p_str->__r_.__value_.__s.__data_[v42] != 32))
                  {
                    if ((_DWORD)v40 != (_DWORD)v42 && quasar::gLogLevel >= 1)
                    {
                      v146 = 0u;
                      v147 = 0u;
                      v144 = 0u;
                      v145 = 0u;
                      v142 = 0u;
                      v143 = 0u;
                      v140 = 0u;
                      v141 = 0u;
                      v139 = 0u;
                      v137 = 0u;
                      memset(v138, 0, sizeof(v138));
                      v135 = 0u;
                      *(_OWORD *)v136 = 0u;
                      *(_OWORD *)__p = 0u;
                      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
                      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Inconsistent token sequence: previous end = ", 44);
                      v46 = (_QWORD *)std::ostream::operator<<();
                      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v46, (uint64_t)", current start = ", 18);
                      std::ostream::operator<<();
                      quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)__p);
                    }
                    v47 = v36[2].i8[7];
                    if (v47 >= 0)
                      v48 = (const std::string::value_type *)v36;
                    else
                      v48 = (const std::string::value_type *)*v36;
                    if (v47 >= 0)
                      v49 = v36[2].u8[7];
                    else
                      v49 = (std::string::size_type)v36[1];
                    std::string::append((std::string *)((char *)v39 - 136), v48, v49);
                    HIDWORD(v39[-1].__r_.__value_.__r.__words[2]) = v36[16].i32[1];
                    v39[-4].__r_.__value_.__r.__words[2] = (std::string::size_type)vadd_f32(v36[7], (float32x2_t)v39[-4].__r_.__value_.__r.__words[2]);
                    v39[-2].__r_.__value_.__r.__words[1] = (std::string::size_type)vadd_f32(v36[12], (float32x2_t)v39[-2].__r_.__value_.__r.__words[1]);
                    std::vector<int>::__insert_with_size[abi:ne180100]<std::__wrap_iter<int const*>,std::__wrap_iter<int const*>>((std::vector<int> *)&v39[-5].__r_.__value_.__r.__words[2], (uint64_t)v39[-4].__r_.__value_.__l.__data_, *(char **)&v36[4], *(char **)&v36[5], (uint64_t)(*(_QWORD *)&v36[5] - *(_QWORD *)&v36[4]) >> 2);
                    ++v38;
                    goto LABEL_84;
                  }
                }
                *(float *)&v124[-4].__r_.__value_.__r.__words[2] = *(float *)&v124[-4].__r_.__value_.__r.__words[2]
                                                                 / (float)v38;
              }
              if ((unint64_t)v39 >= v125)
              {
                v44 = std::vector<quasar::TranslationTokenInternal>::__push_back_slow_path<quasar::TranslationTokenInternal const&>((uint64_t *)&v123, (const quasar::TranslationTokenInternal *)v36);
              }
              else
              {
                quasar::TranslationTokenInternal::TranslationTokenInternal(v39, (const quasar::TranslationTokenInternal *)v36);
                v44 = (uint64_t)&v39[5].__r_.__value_.__r.__words[2];
              }
              v124 = (std::string *)v44;
              *(_DWORD *)(v44 - 72) = -1;
              v38 = 1;
LABEL_84:
              v36 += 17;
              if (v36 == (float32x2_t *)v37)
              {
                v35 = (float32x2_t *)v124;
                break;
              }
            }
          }
          v50 = (uint64_t)v123;
          if (v123 == v35)
          {
            memset(&v118, 0, sizeof(v118));
            v31 = v21;
            goto LABEL_139;
          }
          v35[-10].f32[0] = v35[-10].f32[0] / (float)v38;
          v34 = (uint64_t)v35;
          v35 = (float32x2_t *)v50;
          v31 = v21;
        }
        memset(&v118, 0, sizeof(v118));
        if (v35 != (float32x2_t *)v34)
        {
          v51 = 0;
          v52 = 0;
          v53 = 0.0;
          v54 = 0.0;
          do
          {
            v35[3].i8[0] = 0;
            v55 = v35[16].i32[0];
            v56 = v35[16].i32[1];
            v57 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
            if (v56)
              v58 = v56 == v55;
            else
              v58 = 1;
            if (!v58)
            {
              v59 = v56;
              if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v60 = &__str;
              else
                v60 = (std::string *)__str.__r_.__value_.__r.__words[0];
              v61 = v56 - 1;
              v62 = (std::string *)((char *)v60 + v59 - 1);
              while (1)
              {
                v63 = v62->__r_.__value_.__s.__data_[0];
                v62 = (std::string *)((char *)v62 - 1);
                if (v63 != 32)
                  break;
                v35[3].i8[0] = 1;
                v35[16].i32[1] = v61;
                v64 = v61 - 1;
                if (v61)
                {
                  v58 = v55 == v61--;
                  if (!v58)
                    continue;
                }
                v56 = v64 + 1;
                goto LABEL_104;
              }
              v56 = v61 + 1;
            }
LABEL_104:
            v65 = v55;
            if ((v57 & 0x80u) == 0)
              size = v57;
            else
              size = __str.__r_.__value_.__l.__size_;
            if (v55 != v56 && size != v55)
            {
              v68 = 0;
              if ((v57 & 0x80u) == 0)
                v69 = &__str;
              else
                v69 = (std::string *)__str.__r_.__value_.__r.__words[0];
              v70 = (char *)v69 + v55;
              v71 = v55 - size + 1;
              while (v70[v68] == 32)
              {
                if (v51)
                  v51[3].i8[0] = 1;
                v35[16].i32[0] = v55 + v68 + 1;
                v72 = v68 + 1;
                if (v55 + 1 - v56 + (_DWORD)v68)
                {
                  if (v71 + v68++)
                    continue;
                }
                v65 = v55 + v72;
                v55 += v72;
                goto LABEL_122;
              }
              v65 = v55 + v68;
              v55 += v68;
            }
LABEL_122:
            std::string::basic_string((std::string *)__p, &__str, v65, v56 - v55, (std::allocator<char> *)v159);
            if (v35[2].i8[7] < 0)
              operator delete(*(void **)v35);
            v74 = *(_OWORD *)__p;
            v35[2] = (float32x2_t)v135;
            *(_OWORD *)v35->f32 = v74;
            std::to_string(v159, (int)v35[7].f32[0]);
            v75 = std::string::insert(v159, 0, " ");
            v76 = *(_OWORD *)&v75->__r_.__value_.__l.__data_;
            *(_QWORD *)&v135 = *((_QWORD *)&v75->__r_.__value_.__l + 2);
            *(_OWORD *)__p = v76;
            v75->__r_.__value_.__l.__size_ = 0;
            v75->__r_.__value_.__r.__words[2] = 0;
            v75->__r_.__value_.__r.__words[0] = 0;
            if ((SBYTE7(v135) & 0x80u) == 0)
              v77 = __p;
            else
              v77 = (void **)__p[0];
            if ((SBYTE7(v135) & 0x80u) == 0)
              v78 = BYTE7(v135);
            else
              v78 = (std::string::size_type)__p[1];
            std::string::append(&v118, (const std::string::value_type *)v77, v78);
            if (SBYTE7(v135) < 0)
              operator delete(__p[0]);
            if (SHIBYTE(v159[0].__r_.__value_.__r.__words[2]) < 0)
              operator delete(v159[0].__r_.__value_.__l.__data_);
            v54 = v54 + v35[7].f32[0];
            v53 = v53 + v35[7].f32[1];
            v52 = vadd_f32(v52, v35[12]);
            v51 = v35;
            v35 += 17;
          }
          while (v35 != (float32x2_t *)v34);
          if (v123 != (float32x2_t *)v124)
          {
            v79 = (int)(float)(v54 / (float)(0xF0F0F0F0F0F0F0F1 * (((char *)v124 - (char *)v123) >> 3)));
            *(float *)&v119[0].__r_.__value_.__l.__data_ = v53;
            *((float *)v119[0].__r_.__value_.__r.__words + 1) = (float)v79;
            v126 = v52;
            v80 = v79 != -1 && *(double *)quasar::OptionValue<double>::value(v107) > (double)v79;
            goto LABEL_140;
          }
        }
LABEL_139:
        v81 = *(float32x2_t *)(v31 + 160);
        v119[0].__r_.__value_.__r.__words[0] = *(_QWORD *)v31;
        v126 = v81;
        v80 = *(_BYTE *)(v31 + 8);
LABEL_140:
        v3 = a1;
        v119[0].__r_.__value_.__s.__data_[8] = v80;
        quasar::PTree::PTree((quasar::PTree *)__p);
        if (!*(_BYTE *)quasar::OptionValue<BOOL>::value(v108))
        {
          v82 = quasar::MetaInfo::get((quasar::MetaInfo *)(v31 + 192));
          LODWORD(__p[0]) = *(_DWORD *)v82;
          std::string::operator=((std::string *)&__p[1], (const std::string *)(v82 + 8));
          if (__p != (void **)v82)
            std::vector<std::pair<std::string,quasar::PTree>>::__assign_with_size[abi:ne180100]<std::pair<std::string,quasar::PTree>*,std::pair<std::string,quasar::PTree>*>((uint64_t)v136, *(std::string **)(v82 + 32), *(std::string **)(v82 + 40), 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*(_QWORD *)(v82 + 40) - *(_QWORD *)(v82 + 32)) >> 3));
          BYTE8(v137) = *(_BYTE *)(v82 + 56);
        }
        std::string::basic_string[abi:ne180100]<0>(v159, (char *)quasar::SENTENCEPIECE_DECODER_INPUT_META);
        std::string::basic_string[abi:ne180100]<0>(v160, (char *)quasar::SENTENCEPIECE_DECODER_OUTPUT_META);
        std::set<std::string>::set[abi:ne180100]((uint64_t)&v114, (const void **)&v159[0].__r_.__value_.__l.__data_, 2);
        std::string::basic_string[abi:ne180100]<0>(v116, "firstleg ");
        quasar::backupMetaInfo((quasar::PTree *)__p, (uint64_t)&v114, (const void **)v116);
        if (v117 < 0)
          operator delete(v116[0]);
        std::__tree<std::string>::destroy((uint64_t)&v114, (char *)v114.__r_.__value_.__l.__size_);
        for (i = 0; i != 0x1FFFFFFFFFFFFFFALL; i -= 3)
        {
          if (SHIBYTE(v161[i]) < 0)
            operator delete(v159[i / 3 + 1].__r_.__value_.__l.__data_);
        }
        std::string::basic_string[abi:ne180100]<0>(&v114, (char *)quasar::SENTENCEPIECE_DECODER_INPUT_META);
        quasar::TranslationPhraseInternal::convertTokensToString((uint64_t *)v116, (quasar::TranslationPhraseInternal *)v148);
        quasar::PTree::PTree(v159, v116);
        quasar::PTree::putChild((uint64_t)__p, (uint64_t)&v114, (uint64_t)v159, 1);
        quasar::PTree::~PTree((quasar::PTree *)v159);
        if (v117 < 0)
          operator delete(v116[0]);
        if (SHIBYTE(v114.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v114.__r_.__value_.__l.__data_);
        std::string::basic_string[abi:ne180100]<0>(&v114, (char *)quasar::SENTENCEPIECE_DECODER_OUTPUT_META);
        quasar::PTree::PTree(v159, &__str);
        quasar::PTree::putChild((uint64_t)__p, (uint64_t)&v114, (uint64_t)v159, 1);
        quasar::PTree::~PTree((quasar::PTree *)v159);
        if (SHIBYTE(v114.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v114.__r_.__value_.__l.__data_);
        std::string::basic_string[abi:ne180100]<0>(&v114, (char *)quasar::SENTENCE_CONFIDENCE_META);
        v84 = (int)*((float *)v119[0].__r_.__value_.__r.__words + 1);
        LODWORD(v159[0].__r_.__value_.__l.__data_) = quasar::getType((quasar *)(int)*((float *)v119[0].__r_.__value_.__r.__words
                                                                                                  + 1));
        std::to_string((std::string *)&v159[0].__r_.__value_.__r.__words[1], v84);
        v160[1] = 0;
        v161[0] = 0;
        v161[1] = 0;
        v162 = 1;
        quasar::PTree::putChild((uint64_t)__p, (uint64_t)&v114, (uint64_t)v159, 1);
        quasar::PTree::~PTree((quasar::PTree *)v159);
        if (SHIBYTE(v114.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v114.__r_.__value_.__l.__data_);
        std::string::basic_string[abi:ne180100]<0>(&v114, (char *)quasar::LOW_CONFIDENCE_META);
        if (v119[0].__r_.__value_.__s.__data_[8])
          v85 = "true";
        else
          v85 = "false";
        std::string::basic_string[abi:ne180100]<0>(v116, v85);
        quasar::PTree::PTree(v159, v116);
        quasar::PTree::putChild((uint64_t)__p, (uint64_t)&v114, (uint64_t)v159, 1);
        quasar::PTree::~PTree((quasar::PTree *)v159);
        if (v117 < 0)
          operator delete(v116[0]);
        if (SHIBYTE(v114.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v114.__r_.__value_.__l.__data_);
        std::string::basic_string[abi:ne180100]<0>(v159, (char *)quasar::WORD_CONFIDENCES_META);
        quasar::PTree::getStringOptional((uint64_t)__p, (uint64_t)v159, &v114);
        if (SHIBYTE(v159[0].__r_.__value_.__r.__words[2]) < 0)
          operator delete(v159[0].__r_.__value_.__l.__data_);
        if (v115)
        {
          std::string::basic_string[abi:ne180100]<0>(v116, (char *)quasar::SUBWORD_CONFIDENCES_META);
          quasar::PTree::PTree(v159, &v114);
          quasar::PTree::putChild((uint64_t)__p, (uint64_t)v116, (uint64_t)v159, 1);
          quasar::PTree::~PTree((quasar::PTree *)v159);
          if (v117 < 0)
            operator delete(v116[0]);
        }
        v86 = HIBYTE(v118.__r_.__value_.__r.__words[2]);
        if ((v118.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v86 = v118.__r_.__value_.__l.__size_;
        if (v86)
        {
          std::string::basic_string[abi:ne180100]<0>(v116, (char *)quasar::WORD_CONFIDENCES_META);
          std::string::basic_string(&v113, &v118, 1uLL, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v158);
          quasar::PTree::PTree(v159, &v113);
          quasar::PTree::putChild((uint64_t)__p, (uint64_t)v116, (uint64_t)v159, 1);
          quasar::PTree::~PTree((quasar::PTree *)v159);
          if (SHIBYTE(v113.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v113.__r_.__value_.__l.__data_);
          if (v117 < 0)
            operator delete(v116[0]);
        }
        quasar::MetaInfo::replace(&v127, (uint64_t)__p);
        v87 = v156;
        if ((unint64_t)v156 >= v157)
        {
          v88 = (quasar::TranslationPhraseInternal *)std::vector<quasar::TranslationPhraseInternal>::__push_back_slow_path<quasar::TranslationPhraseInternal const&>(&v155, (const quasar::TranslationPhraseInternal *)v119);
        }
        else
        {
          quasar::TranslationPhraseInternal::TranslationPhraseInternal((std::string *)v156, (const quasar::TranslationPhraseInternal *)v119);
          v88 = (quasar::TranslationPhraseInternal *)((char *)v87 + 200);
        }
        v156 = v88;
        if (v115 && SHIBYTE(v114.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v114.__r_.__value_.__l.__data_);
        quasar::PTree::~PTree((quasar::PTree *)__p);
        if (SHIBYTE(v118.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v118.__r_.__value_.__l.__data_);
        quasar::TranslationPhraseInternal::~TranslationPhraseInternal((quasar::TranslationPhraseInternal *)v119);
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__str.__r_.__value_.__l.__data_);
        quasar::TranslationPhraseInternal::~TranslationPhraseInternal((quasar::TranslationPhraseInternal *)v148);
        sentencepiece::SentencePieceText::~SentencePieceText((sentencepiece::SentencePieceText *)v163);
        v4 = v31 + 200;
        if (v4 == v111)
        {
          v89 = *(_QWORD *)(*(_QWORD *)a1 - 24);
          std::string::basic_string[abi:ne180100]<0>(__p, "tokens");
          quasar::ProcessingBlock::send(a1 + v89, (const void **)__p, (uint64_t)&v131, 1);
          if (SBYTE7(v135) < 0)
            operator delete(__p[0]);
          __p[0] = &v131;
          std::vector<quasar::TranslationPhraseInternal>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
          quasar::ProcessingBlock::send(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24), (uint64_t)&v155, 0);
          goto LABEL_247;
        }
      }
    }
    v109 = (_QWORD *)(a1 + 184);
    v90 = (char **)&unk_1EED87000;
    v91 = (char **)&unk_1EED87000;
    do
    {
      quasar::TranslationPhraseInternal::convertTokensToString((uint64_t *)v159, (quasar::TranslationPhraseInternal *)v4);
      sentencepiece::SentencePieceText::SentencePieceText((sentencepiece::SentencePieceText *)v119, 0);
      (*(void (**)(uint64_t *__return_ptr))(**(_QWORD **)(a1 + 632) + 184))(&v154);
      sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&v154);
      v110 = v4;
      quasar::TranslationPhraseInternal::TranslationPhraseInternal(v148, (const quasar::TranslationPhraseInternal *)v4);
      v92 = v151;
      v93 = (std::string *)v150;
      while (v92 != v93)
      {
        v92 = (std::string *)((char *)v92 - 136);
        std::allocator<quasar::TranslationTokenInternal>::destroy[abi:ne180100]((uint64_t)v152, (uint64_t)v92);
      }
      v151 = v93;
      if (v121)
        v94 = (uint64_t *)(v121 + 8);
      else
        v94 = 0;
      if (v120)
      {
        v95 = 0;
        v96 = 8 * v120;
        do
        {
          v97 = *v94;
          v136[1] = 0;
          *(_QWORD *)&v137 = 0;
          v136[0] = 0;
          __p[1] = 0;
          *(_QWORD *)&v135 = 0;
          __p[0] = 0;
          WORD4(v135) = 0;
          *((_QWORD *)&v137 + 1) = 3212836864;
          LODWORD(v138[0]) = -1;
          memset(&v138[1], 0, 56);
          *(_QWORD *)&v139 = -1;
          std::string::operator=((std::string *)__p, (const std::string *)(*(_QWORD *)(v97 + 48) & 0xFFFFFFFFFFFFFFFELL));
          std::string::operator=((std::string *)&v138[1], (const std::string *)(*(_QWORD *)(v97 + 56) & 0xFFFFFFFFFFFFFFFELL));
          LODWORD(v138[0]) = *(_DWORD *)(v97 + 64);
          *(_QWORD *)&v139 = *(_QWORD *)(v97 + 68);
          BYTE8(v135) = 1;
          if (*((float *)v148[0].__r_.__value_.__r.__words + 1) == 1000.0)
          {
            DWORD2(v137) = 1148846080;
          }
          else
          {
            DWORD2(v137) = -1082130432;
            v95 |= *((float *)v148[0].__r_.__value_.__r.__words + 1) != -1.0;
          }
          v98 = v151;
          if ((unint64_t)v151 >= v152[0])
          {
            v99 = (std::string *)std::vector<quasar::TranslationTokenInternal>::__push_back_slow_path<quasar::TranslationTokenInternal const&>((uint64_t *)&v150, (const quasar::TranslationTokenInternal *)__p);
          }
          else
          {
            quasar::TranslationTokenInternal::TranslationTokenInternal(v151, (const quasar::TranslationTokenInternal *)__p);
            v99 = (std::string *)((char *)v98 + 136);
          }
          v151 = v99;
          if (v138[5])
          {
            v138[6] = v138[5];
            operator delete(v138[5]);
          }
          if (SHIBYTE(v138[3]) < 0)
            operator delete(v138[1]);
          if (v136[0])
          {
            v136[1] = v136[0];
            operator delete(v136[0]);
          }
          if (SBYTE7(v135) < 0)
            operator delete(__p[0]);
          ++v94;
          v96 -= 8;
        }
        while (v96);
        v100 = v95 & (quasar::gLogLevel > 3);
        v90 = (char **)&unk_1EED87000;
        v91 = (char **)&unk_1EED87000;
        if ((v100 & 1) != 0)
        {
          v146 = 0u;
          v147 = 0u;
          v144 = 0u;
          v145 = 0u;
          v142 = 0u;
          v143 = 0u;
          v140 = 0u;
          v141 = 0u;
          v139 = 0u;
          v137 = 0u;
          memset(v138, 0, sizeof(v138));
          v135 = 0u;
          *(_OWORD *)v136 = 0u;
          *(_OWORD *)__p = 0u;
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Dropping confidence scores in sentence piece encoding", 53);
          quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)__p);
        }
      }
      if (v150 != (quasar::TranslationTokenInternal *)v151)
        v151[-5].__r_.__value_.__s.__data_[8] = 0;
      quasar::TranslationPhraseInternal::convertTokensToString((uint64_t *)&v114, (quasar::TranslationPhraseInternal *)v148);
      v149 = 1;
      quasar::PTree::PTree((quasar::PTree *)__p);
      if (!*(_BYTE *)quasar::OptionValue<BOOL>::value(v109))
      {
        v101 = quasar::MetaInfo::get((quasar::MetaInfo *)(v110 + 192));
        LODWORD(__p[0]) = *(_DWORD *)v101;
        std::string::operator=((std::string *)&__p[1], (const std::string *)(v101 + 8));
        if (__p != (void **)v101)
          std::vector<std::pair<std::string,quasar::PTree>>::__assign_with_size[abi:ne180100]<std::pair<std::string,quasar::PTree>*,std::pair<std::string,quasar::PTree>*>((uint64_t)v136, *(std::string **)(v101 + 32), *(std::string **)(v101 + 40), 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*(_QWORD *)(v101 + 40) - *(_QWORD *)(v101 + 32)) >> 3));
        BYTE8(v137) = *(_BYTE *)(v101 + 56);
      }
      std::string::basic_string[abi:ne180100]<0>(v163, v90[167]);
      std::string::basic_string[abi:ne180100]<0>(v164, v91[168]);
      std::set<std::string>::set[abi:ne180100]((uint64_t)&v131, v163, 2);
      std::string::basic_string[abi:ne180100]<0>(&__str, "firstleg ");
      quasar::backupMetaInfo((quasar::PTree *)__p, (uint64_t)&v131, (const void **)&__str.__r_.__value_.__l.__data_);
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__str.__r_.__value_.__l.__data_);
      std::__tree<std::string>::destroy((uint64_t)&v131, (char *)v132);
      for (j = 0; j != -6; j -= 3)
      {
        if (SHIBYTE(v164[j + 2]) < 0)
          operator delete((void *)v163[j + 3]);
      }
      std::string::basic_string[abi:ne180100]<0>(&v131, v90[167]);
      quasar::PTree::PTree(v163, v159);
      quasar::PTree::putChild((uint64_t)__p, (uint64_t)&v131, (uint64_t)v163, 1);
      quasar::PTree::~PTree((quasar::PTree *)v163);
      if (SHIBYTE(v133) < 0)
        operator delete(v131);
      std::string::basic_string[abi:ne180100]<0>(&v131, v91[168]);
      quasar::PTree::PTree(v163, &v114);
      quasar::PTree::putChild((uint64_t)__p, (uint64_t)&v131, (uint64_t)v163, 1);
      quasar::PTree::~PTree((quasar::PTree *)v163);
      if (SHIBYTE(v133) < 0)
        operator delete(v131);
      quasar::MetaInfo::replace(&v153, (uint64_t)__p);
      v103 = v156;
      if ((unint64_t)v156 >= v157)
      {
        v104 = (quasar::TranslationPhraseInternal *)std::vector<quasar::TranslationPhraseInternal>::__push_back_slow_path<quasar::TranslationPhraseInternal const&>(&v155, (const quasar::TranslationPhraseInternal *)v148);
      }
      else
      {
        quasar::TranslationPhraseInternal::TranslationPhraseInternal((std::string *)v156, (const quasar::TranslationPhraseInternal *)v148);
        v104 = (quasar::TranslationPhraseInternal *)((char *)v103 + 200);
      }
      v156 = v104;
      quasar::PTree::~PTree((quasar::PTree *)__p);
      if (SHIBYTE(v114.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v114.__r_.__value_.__l.__data_);
      quasar::TranslationPhraseInternal::~TranslationPhraseInternal((quasar::TranslationPhraseInternal *)v148);
      sentencepiece::SentencePieceText::~SentencePieceText((sentencepiece::SentencePieceText *)v119);
      if (SHIBYTE(v159[0].__r_.__value_.__r.__words[2]) < 0)
        operator delete(v159[0].__r_.__value_.__l.__data_);
      v4 = v110 + 200;
    }
    while (v110 + 200 != v111);
    v105 = *(_QWORD *)(*(_QWORD *)a1 - 24);
    std::string::basic_string[abi:ne180100]<0>(__p, "tokens");
    quasar::ProcessingBlock::send(a1 + v105, (const void **)__p, (uint64_t)&v155, 1);
    if (SBYTE7(v135) < 0)
      operator delete(__p[0]);
    quasar::ProcessingBlock::send(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24), (uint64_t)&v155, 0);
LABEL_247:
    __p[0] = &v155;
    std::vector<quasar::TranslationPhraseInternal>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  }
}

void sub_1AD905194(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a70;
  unint64_t v70;

  STACK[0x3C0] = v70;
  if (a30 && a29 < 0)
    operator delete(__p);
  quasar::PTree::~PTree((quasar::PTree *)&a70);
  JUMPOUT(0x1AD905500);
}

void sub_1AD9051A0()
{
  JUMPOUT(0x1AD905518);
}

void sub_1AD9051BC()
{
  JUMPOUT(0x1AD905434);
}

void sub_1AD9051C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  uint64_t a70;
  uint64_t v70;

  if (*(char *)(v70 - 193) < 0)
    operator delete(*(void **)(v70 - 216));
  quasar::PTree::~PTree((quasar::PTree *)&a70);
  if (a29 < 0)
    operator delete(a24);
  quasar::TranslationPhraseInternal::~TranslationPhraseInternal((quasar::TranslationPhraseInternal *)&STACK[0x2E8]);
  sentencepiece::SentencePieceText::~SentencePieceText((sentencepiece::SentencePieceText *)&a37);
  if (SLOBYTE(STACK[0x3EF]) < 0)
    operator delete((void *)STACK[0x3D8]);
  JUMPOUT(0x1AD905580);
}

void sub_1AD905278()
{
  JUMPOUT(0x1AD905548);
}

void sub_1AD905280()
{
  JUMPOUT(0x1AD905540);
}

void sub_1AD90528C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  if (a26 < 0)
    operator delete(__p);
  if (a36 < 0)
    operator delete(a31);
  if (!a30)
    JUMPOUT(0x1AD90541CLL);
  JUMPOUT(0x1AD90540CLL);
}

void sub_1AD9052F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *__p,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  uint64_t a67;

  if (SLOBYTE(STACK[0x3EF]) < 0)
    operator delete((void *)STACK[0x3D8]);
  quasar::PTree::~PTree((quasar::PTree *)&a67);
  JUMPOUT(0x1AD905500);
}

void sub_1AD9053CC()
{
  JUMPOUT(0x1AD905518);
}

void sub_1AD9053D4()
{
  JUMPOUT(0x1AD905568);
}

void sub_1AD9053E4()
{
  JUMPOUT(0x1AD90546CLL);
}

void sub_1AD905400()
{
  JUMPOUT(0x1AD90541CLL);
}

void sub_1AD905448()
{
  JUMPOUT(0x1AD905510);
}

void sub_1AD905454()
{
  JUMPOUT(0x1AD905510);
}

void sub_1AD905484(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a67;
  unint64_t v67;

  STACK[0x378] = v67;
  quasar::TranslationTokenInternal::~TranslationTokenInternal((quasar::TranslationTokenInternal *)&a67);
  JUMPOUT(0x1AD905538);
}

void sub_1AD905490(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  void *__p;

  if (__p)
    operator delete(__p);
  JUMPOUT(0x1AD905568);
}

void sub_1AD9054A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a67;

  quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)&a67);
  JUMPOUT(0x1AD905510);
}

void sub_1AD9054B8(void *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  JUMPOUT(0x1AD905590);
}

void sub_1AD9054C8()
{
  if (SLOBYTE(STACK[0x3EF]) < 0)
    operator delete((void *)STACK[0x3D8]);
  JUMPOUT(0x1AD905500);
}

void sub_1AD9054FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  void *a64;
  char a69;
  char a70;
  uint64_t a72;
  uint64_t v72;

  if (a36 < 0)
    operator delete(__p);
  quasar::TranslationPhraseInternal::~TranslationPhraseInternal((quasar::TranslationPhraseInternal *)&a37);
  if (a69 < 0)
    operator delete(a64);
  quasar::TranslationPhraseInternal::~TranslationPhraseInternal((quasar::TranslationPhraseInternal *)&STACK[0x2E8]);
  sentencepiece::SentencePieceText::~SentencePieceText((sentencepiece::SentencePieceText *)(v72 - 216));
  a72 = (uint64_t)&a70;
  std::vector<quasar::TranslationPhraseInternal>::__destroy_vector::operator()[abi:ne180100]((void ***)&a72);
  a72 = (uint64_t)&STACK[0x3B8];
  std::vector<quasar::TranslationPhraseInternal>::__destroy_vector::operator()[abi:ne180100]((void ***)&a72);
  _Unwind_Resume(a1);
}

void `virtual thunk to'quasar::SentencePieceBlock::process(_QWORD *a1, uint64_t a2, uint64_t *a3)
{
  quasar::SentencePieceBlock::process((uint64_t)a1 + *(_QWORD *)(*a1 - 96), a2, a3);
}

uint64_t quasar::SentencePieceBlock::minConfigVersion(quasar::SentencePieceBlock *this)
{
  return 135;
}

uint64_t `virtual thunk to'quasar::SentencePieceBlock::minConfigVersion(quasar::SentencePieceBlock *this)
{
  return 135;
}

void quasar::ConfiguredProcessingBlock<quasar::SentencePieceOptions>::setContextProvider(uint64_t a1, uint64_t *a2)
{
  void (***v3)(uint64_t **__return_ptr);
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  uint64_t *v15;
  uint64_t *v16;

  v3 = (void (***)(uint64_t **__return_ptr))(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 8))(a1);
  (**v3)(&v15);
  v4 = v15;
  v5 = v16;
  if (v15 != v16)
  {
    do
    {
      v6 = *v4;
      v7 = a2[1];
      v13 = *a2;
      v14 = (std::__shared_weak_count *)v7;
      if (v7)
      {
        v8 = (unint64_t *)(v7 + 8);
        do
          v9 = __ldxr(v8);
        while (__stxr(v9 + 1, v8));
      }
      quasar::OptionValueBase::setContextProvider(v6, &v13);
      v10 = v14;
      if (v14)
      {
        p_shared_owners = (unint64_t *)&v14->__shared_owners_;
        do
          v12 = __ldaxr(p_shared_owners);
        while (__stlxr(v12 - 1, p_shared_owners));
        if (!v12)
        {
          ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
          std::__shared_weak_count::__release_weak(v10);
        }
      }
      ++v4;
    }
    while (v4 != v5);
    v4 = v15;
  }
  if (v4)
  {
    v16 = v4;
    operator delete(v4);
  }
}

void sub_1AD905690(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13)
{
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  if (__p)
  {
    a13 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t quasar::ConfiguredProcessingBlock<quasar::SentencePieceOptions>::getOptions(uint64_t a1)
{
  return a1 + 8;
}

void `virtual thunk to'quasar::ConfiguredProcessingBlock<quasar::SentencePieceOptions>::setContextProvider(_QWORD *a1, uint64_t *a2)
{
  quasar::ConfiguredProcessingBlock<quasar::SentencePieceOptions>::setContextProvider((uint64_t)a1 + *(_QWORD *)(*a1 - 72), a2);
}

uint64_t `virtual thunk to'quasar::ConfiguredProcessingBlock<quasar::SentencePieceOptions>::getOptions(_QWORD *a1)
{
  return (uint64_t)a1 + *(_QWORD *)(*a1 - 104) + 8;
}

void quasar::SentencePieceBlock::~SentencePieceBlock(quasar::SentencePieceBlock *this)
{
  char **v2;

  *(_QWORD *)this = off_1E5D36C10;
  v2 = (char **)((char *)this + 656);
  *((_QWORD *)this + 82) = &off_1E5D36CB8;
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this + 632);
  *(_QWORD *)this = off_1E5D04508;
  *((_QWORD *)this + 82) = &unk_1E5D04590;
  quasar::SentencePieceOptions::~SentencePieceOptions((quasar::SentencePieceBlock *)((char *)this + 8));
  quasar::ProcessingBlock::~ProcessingBlock(v2);
}

{
  char **v2;

  *(_QWORD *)this = off_1E5D36C10;
  v2 = (char **)((char *)this + 656);
  *((_QWORD *)this + 82) = &off_1E5D36CB8;
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this + 632);
  *(_QWORD *)this = off_1E5D04508;
  *((_QWORD *)this + 82) = &unk_1E5D04590;
  quasar::SentencePieceOptions::~SentencePieceOptions((quasar::SentencePieceBlock *)((char *)this + 8));
  quasar::ProcessingBlock::~ProcessingBlock(v2);
  JUMPOUT(0x1AF44D190);
}

const char *quasar::SentencePieceBlock::blockType(quasar::SentencePieceBlock *this)
{
  return "SentencePieceBlock";
}

void `virtual thunk to'quasar::SentencePieceBlock::~SentencePieceBlock(quasar::SentencePieceBlock *this)
{
  char *v1;

  v1 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
  *(_QWORD *)v1 = off_1E5D36C10;
  *((_QWORD *)v1 + 82) = &off_1E5D36CB8;
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)(v1 + 632));
  *(_QWORD *)v1 = off_1E5D04508;
  *((_QWORD *)v1 + 82) = &unk_1E5D04590;
  quasar::SentencePieceOptions::~SentencePieceOptions((quasar::SentencePieceOptions *)(v1 + 8));
  quasar::ProcessingBlock::~ProcessingBlock((char **)v1 + 82);
}

{
  char *v1;

  v1 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
  *(_QWORD *)v1 = off_1E5D36C10;
  *((_QWORD *)v1 + 82) = &off_1E5D36CB8;
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)(v1 + 632));
  *(_QWORD *)v1 = off_1E5D04508;
  *((_QWORD *)v1 + 82) = &unk_1E5D04590;
  quasar::SentencePieceOptions::~SentencePieceOptions((quasar::SentencePieceOptions *)(v1 + 8));
  quasar::ProcessingBlock::~ProcessingBlock((char **)v1 + 82);
  JUMPOUT(0x1AF44D190);
}

const char *`virtual thunk to'quasar::SentencePieceBlock::blockType(quasar::SentencePieceBlock *this)
{
  return "SentencePieceBlock";
}

void quasar::SentencePieceOptions::~SentencePieceOptions(quasar::SentencePieceOptions *this)
{
  *(_QWORD *)this = &off_1E5D37CC8;
  *((_QWORD *)this + 60) = &unk_1E5D34898;
  std::__tree<std::string>::destroy((uint64_t)this + 600, *((char **)this + 76));
  *((_QWORD *)this + 60) = &unk_1E5D359C0;
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this + 568);
  if (*((char *)this + 559) < 0)
    operator delete(*((void **)this + 67));
  if (*((char *)this + 535) < 0)
    operator delete(*((void **)this + 64));
  if (*((char *)this + 511) < 0)
    operator delete(*((void **)this + 61));
  *((_QWORD *)this + 40) = &unk_1E5D347F0;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)this + 456, *((_QWORD **)this + 58));
  if (*((char *)this + 447) < 0)
    operator delete(*((void **)this + 53));
  *((_QWORD *)this + 40) = &unk_1E5D359C0;
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this + 408);
  if (*((char *)this + 399) < 0)
    operator delete(*((void **)this + 47));
  if (*((char *)this + 375) < 0)
    operator delete(*((void **)this + 44));
  if (*((char *)this + 351) < 0)
    operator delete(*((void **)this + 41));
  *((_QWORD *)this + 22) = &unk_1E5D34860;
  std::__tree<std::string>::destroy((uint64_t)this + 296, *((char **)this + 38));
  *((_QWORD *)this + 22) = &unk_1E5D359C0;
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this + 264);
  if (*((char *)this + 255) < 0)
    operator delete(*((void **)this + 29));
  if (*((char *)this + 231) < 0)
    operator delete(*((void **)this + 26));
  if (*((char *)this + 207) < 0)
    operator delete(*((void **)this + 23));
  *((_QWORD *)this + 2) = &unk_1E5D347F0;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)this + 152, *((_QWORD **)this + 20));
  if (*((char *)this + 143) < 0)
    operator delete(*((void **)this + 15));
  *((_QWORD *)this + 2) = &unk_1E5D359C0;
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this + 104);
  if (*((char *)this + 95) < 0)
    operator delete(*((void **)this + 9));
  if (*((char *)this + 71) < 0)
    operator delete(*((void **)this + 6));
  if (*((char *)this + 47) < 0)
    operator delete(*((void **)this + 3));
}

void quasar::OptionValue<double>::updateOptionalFromPtree(uint64_t a1, uint64_t a2, const void **a3)
{
  const std::string::value_type *v5;
  uint64_t v6;
  char v7;
  char v8;
  size_t v9;
  std::string *v10;
  const void *v11;
  int v12;
  const std::string::value_type *v13;
  std::string::size_type v14;
  std::string *v15;
  __int128 v16;
  std::string v17;
  std::string __str;

  v5 = (const std::string::value_type *)(a1 + 8);
  v6 = quasar::getOptional<double>(a2, a1 + 8);
  v8 = v7;
  if (*((char *)a3 + 23) >= 0)
    v9 = *((unsigned __int8 *)a3 + 23);
  else
    v9 = (size_t)a3[1];
  v10 = &v17;
  std::string::basic_string[abi:ne180100]((uint64_t)&v17, v9 + 1);
  if ((v17.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v10 = (std::string *)v17.__r_.__value_.__r.__words[0];
  if (v9)
  {
    if (*((char *)a3 + 23) >= 0)
      v11 = a3;
    else
      v11 = *a3;
    memmove(v10, v11, v9);
  }
  *(_WORD *)((char *)&v10->__r_.__value_.__l.__data_ + v9) = 46;
  v12 = *(char *)(a1 + 31);
  if (v12 >= 0)
    v13 = v5;
  else
    v13 = *(const std::string::value_type **)(a1 + 8);
  if (v12 >= 0)
    v14 = *(unsigned __int8 *)(a1 + 31);
  else
    v14 = *(_QWORD *)(a1 + 16);
  v15 = std::string::append(&v17, v13, v14);
  v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
  __str.__r_.__value_.__r.__words[2] = v15->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v16;
  v15->__r_.__value_.__l.__size_ = 0;
  v15->__r_.__value_.__r.__words[2] = 0;
  v15->__r_.__value_.__r.__words[0] = 0;
  if (v8)
  {
    *(_QWORD *)(a1 + 104) = v6;
    std::string::operator=((std::string *)(a1 + 32), &__str);
  }
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v17.__r_.__value_.__l.__data_);
}

void sub_1AD905B9C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

uint64_t quasar::OptionValue<double>::debugInfo(uint64_t a1)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v25;
  BOOL v26;
  _QWORD *v27;
  _QWORD *v28;
  uint64_t v29;
  _QWORD v31[2];
  _QWORD v32[11];
  char v33;
  uint64_t v34;

  v2 = quasar::OptionValue<BOOL>::fallback(a1);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v31);
  v3 = *(char *)(a1 + 31);
  if (v3 >= 0)
    v4 = a1 + 8;
  else
    v4 = *(_QWORD *)(a1 + 8);
  if (v3 >= 0)
    v5 = *(unsigned __int8 *)(a1 + 31);
  else
    v5 = *(_QWORD *)(a1 + 16);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, v4, v5);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)": ", 2);
  v7 = (_QWORD *)std::ostream::operator<<();
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)" (", 2);
  v11 = *(_QWORD *)(v2 + 32);
  v10 = v2 + 32;
  v9 = v11;
  v12 = *(char *)(v10 + 23);
  if (v12 >= 0)
    v13 = v10;
  else
    v13 = v9;
  if (v12 >= 0)
    v14 = *(unsigned __int8 *)(v10 + 23);
  else
    v14 = *(_QWORD *)(v10 + 8);
  v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, v13, v14);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)")", 1);
  if (*(_QWORD *)(a1 + 136))
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)" overrides: [", 13);
    v16 = *(_QWORD **)(a1 + 120);
    v17 = (_QWORD *)(a1 + 128);
    if (v16 != (_QWORD *)(a1 + 128))
    {
      do
      {
        v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)"\"", 1);
        v19 = *((char *)v16 + 55);
        if (v19 >= 0)
          v20 = (uint64_t)(v16 + 4);
        else
          v20 = v16[4];
        if (v19 >= 0)
          v21 = *((unsigned __int8 *)v16 + 55);
        else
          v21 = v16[5];
        v22 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, v20, v21);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"\": ", 3);
        std::ostream::operator<<();
        v23 = (_QWORD *)*v17;
        v24 = (_QWORD *)(a1 + 128);
        if (*v17)
        {
          do
          {
            v25 = v23;
            v23 = (_QWORD *)v23[1];
          }
          while (v23);
        }
        else
        {
          do
          {
            v25 = (_QWORD *)v24[2];
            v26 = *v25 == (_QWORD)v24;
            v24 = v25;
          }
          while (v26);
        }
        if (v16 != v25)
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)", ", 2);
        v27 = (_QWORD *)v16[1];
        if (v27)
        {
          do
          {
            v28 = v27;
            v27 = (_QWORD *)*v27;
          }
          while (v27);
        }
        else
        {
          do
          {
            v28 = (_QWORD *)v16[2];
            v26 = *v28 == (_QWORD)v16;
            v16 = v28;
          }
          while (!v26);
        }
        v16 = v28;
      }
      while (v28 != v17);
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)"]", 1);
  }
  std::stringbuf::str();
  v31[0] = *MEMORY[0x1E0DE4F50];
  v29 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
  *(_QWORD *)((char *)v31 + *(_QWORD *)(v31[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
  v32[0] = v29;
  v32[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v33 < 0)
    operator delete((void *)v32[9]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x1AF44D094](&v34);
}

void sub_1AD905E38(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *quasar::OptionValue<double>::addOverride(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *result;
  uint64_t v6;
  uint64_t *v7;
  _QWORD v8[2];
  _QWORD v9[2];

  v9[0] = a2;
  v9[1] = a3;
  result = (uint64_t *)quasar::getOptional<double>(a4, a1 + 8);
  v8[0] = result;
  v8[1] = v6;
  if ((_BYTE)v6)
  {
    v7 = result;
    result = (uint64_t *)std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<void>,true>,std::allocator<std::__value_type<std::string,std::string>>>::find<std::string_view>(a1 + 120, (uint64_t)v9);
    if ((uint64_t *)(a1 + 128) == result)
      return std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<void>,true>,std::allocator<std::__value_type<std::string,double>>>::__emplace_hint_unique_impl<std::string_view &,double &>((uint64_t **)(a1 + 120), result, (uint64_t)v9, v8);
    else
      result[7] = (uint64_t)v7;
  }
  return result;
}

uint64_t quasar::OptionValue<double>::isOverridable()
{
  return 0;
}

uint64_t *std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<void>,true>,std::allocator<std::__value_type<std::string,double>>>::__emplace_hint_unique_impl<std::string_view &,double &>(uint64_t **a1, uint64_t *a2, uint64_t a3, _QWORD *a4)
{
  uint64_t **v6;
  uint64_t *v7;
  void **v8;
  uint64_t v10;
  const void **v11;
  void *__p;
  uint64_t v13;

  std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<void>,true>,std::allocator<std::__value_type<std::string,double>>>::__construct_node<std::string_view &,double &>((uint64_t)a1, a3, a4, (uint64_t)&__p);
  v6 = (uint64_t **)std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__find_equal<std::string>(a1, a2, &v11, &v10, (const void **)__p + 4);
  v7 = *v6;
  if (*v6)
  {
    v8 = (void **)__p;
    __p = 0;
    if (v8)
      std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,double>,void *>>>::operator()[abi:ne180100]((uint64_t)&v13, v8);
  }
  else
  {
    std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at(a1, (uint64_t)v11, v6, (uint64_t *)__p);
    return (uint64_t *)__p;
  }
  return v7;
}

void sub_1AD905F6C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void **__p, uint64_t a13)
{
  if (__p)
    std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,double>,void *>>>::operator()[abi:ne180100]((uint64_t)&a13, __p);
  _Unwind_Resume(exception_object);
}

_QWORD *std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<void>,true>,std::allocator<std::__value_type<std::string,double>>>::__construct_node<std::string_view &,double &>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  _QWORD *v8;
  _QWORD *result;

  v7 = a1 + 8;
  v8 = operator new(0x40uLL);
  *(_QWORD *)a4 = v8;
  *(_QWORD *)(a4 + 8) = v7;
  *(_BYTE *)(a4 + 16) = 0;
  result = std::pair<std::string const,double>::pair[abi:ne180100]<std::string_view &,double &,0>(v8 + 4, a2, a3);
  *(_BYTE *)(a4 + 16) = 1;
  return result;
}

void sub_1AD905FFC(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void **v2;
  uint64_t v3;

  *v1 = 0;
  std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,double>,void *>>>::operator()[abi:ne180100](v3, v2);
  _Unwind_Resume(a1);
}

_QWORD *std::pair<std::string const,double>::pair[abi:ne180100]<std::string_view &,double &,0>(_QWORD *__dst, uint64_t a2, _QWORD *a3)
{
  size_t v4;
  const void *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;

  v4 = *(_QWORD *)(a2 + 8);
  if (v4 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v6 = *(const void **)a2;
  if (v4 >= 0x17)
  {
    v8 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17)
      v8 = v4 | 7;
    v9 = v8 + 1;
    v7 = operator new(v8 + 1);
    __dst[1] = v4;
    __dst[2] = v9 | 0x8000000000000000;
    *__dst = v7;
  }
  else
  {
    *((_BYTE *)__dst + 23) = v4;
    v7 = __dst;
    if (!v4)
      goto LABEL_9;
  }
  memmove(v7, v6, v4);
LABEL_9:
  *((_BYTE *)v7 + v4) = 0;
  __dst[3] = *a3;
  return __dst;
}

_QWORD *std::shared_ptr<sentencepiece::SentencePieceProcessor>::shared_ptr[abi:ne180100]<sentencepiece::SentencePieceProcessor,void>(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  *a1 = a2;
  v4 = (_QWORD *)operator new();
  *v4 = &unk_1E5D45A88;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_1AD906124(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_pointer<sentencepiece::SentencePieceProcessor *,std::shared_ptr<sentencepiece::SentencePieceProcessor>::__shared_ptr_default_delete<sentencepiece::SentencePieceProcessor,sentencepiece::SentencePieceProcessor>,std::allocator<sentencepiece::SentencePieceProcessor>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t std::__shared_ptr_pointer<sentencepiece::SentencePieceProcessor *,std::shared_ptr<sentencepiece::SentencePieceProcessor>::__shared_ptr_default_delete<sentencepiece::SentencePieceProcessor,sentencepiece::SentencePieceProcessor>,std::allocator<sentencepiece::SentencePieceProcessor>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<sentencepiece::SentencePieceProcessor *,std::shared_ptr<sentencepiece::SentencePieceProcessor>::__shared_ptr_default_delete<sentencepiece::SentencePieceProcessor,sentencepiece::SentencePieceProcessor>,std::allocator<sentencepiece::SentencePieceProcessor>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t std::set<std::string>::set[abi:ne180100](uint64_t a1, const void **a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v6;

  *(_QWORD *)(a1 + 8) = 0;
  v4 = (uint64_t *)(a1 + 8);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = a1 + 8;
  if (a3)
  {
    v6 = 24 * a3;
    do
    {
      std::__tree<std::string>::__emplace_hint_unique_key_args<std::string,std::string const&>((uint64_t **)a1, v4, a2, (uint64_t)a2);
      a2 += 3;
      v6 -= 24;
    }
    while (v6);
  }
  return a1;
}

void sub_1AD90622C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<std::string>::destroy(v1, *(char **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t quasar::OptionValue<double>::value(_QWORD *a1)
{
  uint64_t v2;
  const void ****v3;
  std::__shared_weak_count *v4;
  const void ***v5;
  unint64_t *p_shared_weak_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  const void **v10;
  const void **v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  unint64_t *p_shared_owners;
  unint64_t v16;

  v2 = quasar::OptionValue<BOOL>::fallback((uint64_t)a1) + 104;
  if ((*(unsigned int (**)(_QWORD *))(*a1 + 32))(a1))
  {
    v3 = (const void ****)a1[11];
    v4 = (std::__shared_weak_count *)v3[1];
    if (v4)
    {
      v5 = *v3;
      p_shared_weak_owners = (unint64_t *)&v4->__shared_weak_owners_;
      do
        v7 = __ldxr(p_shared_weak_owners);
      while (__stxr(v7 + 1, p_shared_weak_owners));
      v8 = std::__shared_weak_count::lock(v4);
      if (!v8)
      {
        v9 = v4;
        goto LABEL_17;
      }
      v9 = v8;
      std::__shared_weak_count::__release_weak(v4);
      if (v5)
      {
        v10 = *v5;
        v11 = v5[1];
        if (*v5 != v11)
        {
          v12 = (uint64_t)(a1 + 15);
          v13 = a1 + 16;
          do
          {
            v14 = std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::find<std::string>(v12, v10);
            if (v13 != (_QWORD *)v14)
              v2 = v14 + 56;
            v10 += 3;
          }
          while (v10 != v11);
        }
      }
      p_shared_owners = (unint64_t *)&v9->__shared_owners_;
      do
        v16 = __ldaxr(p_shared_owners);
      while (__stlxr(v16 - 1, p_shared_owners));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
LABEL_17:
        std::__shared_weak_count::__release_weak(v9);
      }
    }
  }
  return v2;
}

void sub_1AD906350(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t kaldi::CuWorkspace::GetMatrix<float>@<X0>(_QWORD *a1@<X0>, int a2@<W1>, int a3@<W2>, int a4@<W3>, uint64_t a5@<X8>)
{
  int v7;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD v12[34];

  v7 = a3 * a2;
  if (a1[8] < (unint64_t)(4 * v7))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v12);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"Failed to create a ", 19);
    v9 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)" by ", 4);
    v10 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)" matrix with only ", 18);
    v11 = (_QWORD *)std::ostream::operator<<();
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v11, " bytes available in the workspace");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v12);
  }
  kaldi::CuWorkspace::GetVector<float>(a1, v7, a4, v12);
  return kaldi::CuSubMatrix<float>::CuSubMatrix(a5, (uint64_t)v12, a2);
}

void kaldi::CuWorkspace::GetVector<float>(_QWORD *a1@<X0>, int a2@<W1>, int a3@<W2>, _QWORD *a4@<X8>)
{
  unint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD v10[34];

  v6 = 4 * a2;
  if (v6 > a1[8])
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v10);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"Failed to create a vector of ", 29);
    v8 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)" elements with only ", 20);
    v9 = (_QWORD *)std::ostream::operator<<();
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v9, " bytes available in the workspace");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v10);
  }
  v7 = a1[1];
  a4[2] = 0;
  a4[3] = 0;
  *a4 = &unk_1E5D29D70;
  a4[1] = v7;
  *((_DWORD *)a4 + 4) = a2;
  if (a3 == 3 || !a3)
    kaldi::CuVectorBase<float>::SetZero((uint64_t)a4);
  std::deque<char *>::push_back(a1 + 2, a1 + 1);
  a1[1] += v6;
  a1[8] -= v6;
}

void sub_1AD906544(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)v1 = v2 + 16;
  *(_QWORD *)(v1 + 8) = 0;
  *(_DWORD *)(v1 + 16) = 0;
  *(_QWORD *)(v1 + 24) = 0;
  _Unwind_Resume(a1);
}

kaldi::CuWorkspace *kaldi::CuWorkspace::CuWorkspace(kaldi::CuWorkspace *this, size_t a2)
{
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *(_OWORD *)this = 0u;
  kaldi::CuWorkspace::Allocate(this, a2);
  return this;
}

void sub_1AD90658C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100]((_QWORD *)(v1 + 16));
  _Unwind_Resume(a1);
}

void *kaldi::CuWorkspace::Allocate(kaldi::CuWorkspace *this, size_t a2)
{
  void *result;
  _QWORD v5[34];

  if ((a2 & 0x8000000000000000) != 0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v5);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v5, "size >= 0");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v5);
  }
  kaldi::CuWorkspace::Destroy(this);
  *((_QWORD *)this + 8) = a2;
  result = malloc_type_malloc(a2, 0xF4BC7407uLL);
  *(_QWORD *)this = result;
  *((_QWORD *)this + 1) = result;
  return result;
}

void kaldi::CuWorkspace::Destroy(kaldi::CuWorkspace *this)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;

  v2 = (_QWORD *)*((_QWORD *)this + 9);
  if (v2)
  {
    v3 = v2[7] - 1;
    v4 = *(_QWORD *)(*(_QWORD *)(v2[3] + (((unint64_t)(v3 + v2[6]) >> 6) & 0x3FFFFFFFFFFFFF8))
                   + 8 * ((v3 + v2[6]) & 0x1FF));
    v5 = v2[1] - v4 + v2[8];
    v2[1] = v4;
    v2[7] = v3;
    v2[8] = v5;
    std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::__maybe_remove_back_spare[abi:ne180100](v2 + 2, 1);
  }
  else
  {
    v6 = *(void **)this;
    if (*(_QWORD *)this)
      free(v6);
  }
  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 8) = 0;
  *((_QWORD *)this + 9) = 0;
}

uint64_t kaldi::CuWorkspace::GetChildWorkspace(kaldi::CuWorkspace *this, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD v8[34];

  v2 = a2;
  if (a2 == -1)
    v2 = *((_QWORD *)this + 8);
  if (v2 < 0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v8);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v8, "mem_size_bytes >= 0");
    goto LABEL_7;
  }
  if (v2 > *((_QWORD *)this + 8))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Can't create a child workspace of ", 34);
    v6 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)". Only have ", 12);
    v7 = (_QWORD *)std::ostream::operator<<();
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v7, " bytes");
LABEL_7:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v8);
  }
  v4 = operator new();
  *(_OWORD *)(v4 + 32) = 0u;
  *(_OWORD *)(v4 + 48) = 0u;
  *(_OWORD *)v4 = *(_OWORD *)this;
  *(_OWORD *)(v4 + 16) = 0u;
  *(_QWORD *)(v4 + 64) = v2;
  *(_QWORD *)(v4 + 72) = this;
  *((_QWORD *)this + 8) -= v2;
  std::deque<char *>::push_back((_QWORD *)this + 2, (_QWORD *)this + 1);
  *((_QWORD *)this + 1) += v2;
  return v4;
}

void sub_1AD9067B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&a9);
}

void kaldi::CuWorkspace::~CuWorkspace(kaldi::CuWorkspace *this)
{
  kaldi::CuWorkspace::Destroy(this);
  std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100]((_QWORD *)this + 2);
}

void std::deque<char *>::push_back(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;

  v4 = a1[2];
  v5 = a1[1];
  if (v4 == v5)
    v6 = 0;
  else
    v6 = ((v4 - v5) << 6) - 1;
  v7 = a1[5];
  v8 = v7 + a1[4];
  if (v6 == v8)
  {
    std::deque<char *>::__add_back_capacity(a1);
    v5 = a1[1];
    v7 = a1[5];
    v8 = a1[4] + v7;
  }
  *(_QWORD *)(*(_QWORD *)(v5 + ((v8 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v8 & 0x1FF)) = *a2;
  a1[5] = v7 + 1;
}

void std::deque<char *>::__add_back_capacity(_QWORD *a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  char *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  unint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  void *v53;
  __int128 v54;
  __int128 v55;
  _QWORD *v56;

  v2 = a1[4];
  v3 = v2 >= 0x200;
  v4 = v2 - 512;
  if (v3)
  {
    v5 = (uint64_t)(a1 + 3);
    v6 = (char *)a1[3];
    a1[4] = v4;
    v7 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v11 = *v7;
    v9 = (char *)(v7 + 1);
    v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(_QWORD *)v8 = v10;
      a1[2] += 8;
      return;
    }
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v33 = 1;
      else
        v33 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>(v5, v33);
      v35 = &v34[8 * (v33 >> 2)];
      v37 = &v34[8 * v36];
      v38 = (uint64_t *)a1[1];
      v8 = v35;
      v39 = a1[2] - (_QWORD)v38;
      if (v39)
      {
        v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        v40 = 8 * (v39 >> 3);
        v41 = &v34[8 * (v33 >> 2)];
        do
        {
          v42 = *v38++;
          *(_QWORD *)v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    v13 = v12 >> 3;
    v14 = v12 >> 3 < -1;
    v15 = (v12 >> 3) + 2;
    if (v14)
      v16 = v15;
    else
      v16 = v13 + 1;
    v17 = -(v16 >> 1);
    v18 = v16 >> 1;
    v19 = &v9[-8 * v18];
    v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      v9 = (char *)a1[1];
    }
    v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  v21 = a1[2];
  v22 = (v21 - a1[1]) >> 3;
  v23 = a1[3];
  v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(_QWORD *)&v54 = operator new(0x1000uLL);
      std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **>>::push_back(a1, &v54);
      return;
    }
    *(_QWORD *)&v54 = operator new(0x1000uLL);
    std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **>>::push_front((uint64_t)a1, &v54);
    v44 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v45 = *v44;
    v9 = (char *)(v44 + 1);
    v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3])
      goto LABEL_33;
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v46 = 1;
      else
        v46 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(a1 + 3), v46);
      v35 = &v34[8 * (v46 >> 2)];
      v37 = &v34[8 * v47];
      v48 = (uint64_t *)a1[1];
      v8 = v35;
      v49 = a1[2] - (_QWORD)v48;
      if (v49)
      {
        v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        v50 = 8 * (v49 >> 3);
        v51 = &v34[8 * (v46 >> 2)];
        do
        {
          v52 = *v48++;
          *(_QWORD *)v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1)
    v25 = 1;
  else
    v25 = v24 >> 2;
  v56 = a1 + 3;
  *(_QWORD *)&v54 = std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(a1 + 3), v25);
  *((_QWORD *)&v54 + 1) = v54 + 8 * v22;
  *(_QWORD *)&v55 = *((_QWORD *)&v54 + 1);
  *((_QWORD *)&v55 + 1) = v54 + 8 * v26;
  v53 = operator new(0x1000uLL);
  std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **> &>::push_back(&v54, &v53);
  v27 = (_QWORD *)a1[2];
  v28 = -7 - (_QWORD)v27;
  while (v27 != (_QWORD *)a1[1])
  {
    --v27;
    v28 += 8;
    std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **> &>::push_front((uint64_t)&v54, v27);
  }
  v29 = (char *)*a1;
  v30 = v54;
  v31 = v55;
  *(_QWORD *)&v54 = *a1;
  *((_QWORD *)&v54 + 1) = v27;
  v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  v55 = v32;
  if (v27 != (_QWORD *)v32)
    *(_QWORD *)&v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  if (v29)
    operator delete(v29);
}

void sub_1AD906B4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  void *v13;

  operator delete(v13);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_1AD906C50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  void *v20;

  _Unwind_Resume(a1);
}

void sub_1AD906F2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, void *__p, uint64_t a5, int a6, __int16 a7, char a8, char a9, uint64_t a10, uint64_t a11, char *__pa, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, std::__split_buffer<std::wstring> *a19, uint64_t a20)
{
  void *v20;

  __pa = &a9;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__pa);

  _Unwind_Resume(a1);
}

void sub_1AD907124(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;

  v7 = v5;

  _Unwind_Resume(a1);
}

void sub_1AD9079D0(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

void sub_1AD9079E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, std::__split_buffer<std::wstring> *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::wstring> *)&a19);
  JUMPOUT(0x1AD907A04);
}

void sub_1AD907A00(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  JUMPOUT(0x1AD907A20);
}

void sub_1AD907A1C()
{
  void *v0;

  JUMPOUT(0x1AD907A24);
}

void sub_1AD908220(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,void *a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  uint64_t a70;
  void *v70;
  void *v71;
  uint64_t v72;

  a70 = v72 - 224;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a70);
  if (*(char *)(v72 - 177) < 0)
    operator delete(*(void **)(v72 - 200));

  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__3(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__3(uint64_t a1)
{

}

void sub_1AD9086E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  void *v15;
  uint64_t v16;

  if (*(char *)(v16 - 113) < 0)
    operator delete(*(void **)(v16 - 136));

  _Unwind_Resume(a1);
}

void std::__function::__func<BOOL (*)(std::string const&),std::allocator<BOOL (*)(std::string const&)>,BOOL ()(std::string const&)>::~__func()
{
  JUMPOUT(0x1AF44D190);
}

_QWORD *std::__function::__func<BOOL (*)(std::string const&),std::allocator<BOOL (*)(std::string const&)>,BOOL ()(std::string const&)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &unk_1E5D3D040;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<BOOL (*)(std::string const&),std::allocator<BOOL (*)(std::string const&)>,BOOL ()(std::string const&)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &unk_1E5D3D040;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<BOOL (*)(std::string const&),std::allocator<BOOL (*)(std::string const&)>,BOOL ()(std::string const&)>::operator()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(a1 + 8))(a2);
}

uint64_t std::__function::__func<BOOL (*)(std::string const&),std::allocator<BOOL (*)(std::string const&)>,BOOL ()(std::string const&)>::target(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

void *std::__function::__func<BOOL (*)(std::string const&),std::allocator<BOOL (*)(std::string const&)>,BOOL ()(std::string const&)>::target_type()
{
}

void quasar::EndpointConfigHelper::computeFeats(uint64_t a1@<X0>, int a2@<W1>, int a3@<W2>, unsigned int **a4@<X3>, int a5@<W4>, double **a6@<X8>, float a7@<S0>, float a8@<S1>, float a9@<S2>, float a10@<S3>, float a11@<S4>, float a12@<S5>)
{
  _DWORD *v12;
  _DWORD *v13;
  _QWORD *v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  unint64_t v25;
  double *v26;
  double *v27;
  unint64_t v28;
  double *v29;
  unint64_t v30;
  double *v31;
  double v32;
  unint64_t v33;
  double *v34;
  unsigned int *v35;
  unsigned int *v36;
  double *v37;
  double v38;
  double *v39;
  double *v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  char *v45;
  double *v46;
  uint64_t v47;
  unint64_t v48;
  double *v49;
  unint64_t v50;
  double *v51;
  unint64_t v52;
  double *v53;
  unint64_t v54;
  double *v55;
  unint64_t v56;
  double *v57;
  double *v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  unint64_t v62;
  char *v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  double *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  double v98;
  double v99;
  _OWORD v101[18];

  *a6 = 0;
  a6[1] = 0;
  a6[2] = 0;
  v12 = *(_DWORD **)a1;
  v13 = *(_DWORD **)(a1 + 8);
  if (*(_DWORD **)a1 != v13)
  {
    v17 = a6 + 2;
    v98 = a12;
    v99 = (double)a5;
    v18 = a11;
    v19 = a10;
    v20 = a9;
    v21 = a8;
    v22 = expf(-a7);
    v23 = (float)a3;
    v24 = (float)a2;
    while (2)
    {
      switch(*v12)
      {
        case 0:
          v26 = a6[1];
          v25 = (unint64_t)a6[2];
          if ((unint64_t)v26 < v25)
          {
            *v26 = v24;
            v27 = v26 + 1;
            goto LABEL_45;
          }
          v58 = *a6;
          v73 = v26 - *a6;
          v74 = v73 + 1;
          if ((unint64_t)(v73 + 1) >> 61)
            std::vector<int>::__throw_length_error[abi:ne180100]();
          v75 = v25 - (_QWORD)v58;
          if (v75 >> 2 > v74)
            v74 = v75 >> 2;
          if ((unint64_t)v75 >= 0x7FFFFFFFFFFFFFF8)
            v62 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v62 = v74;
          if (v62)
          {
            v63 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)v17, v62);
            v58 = *a6;
            v26 = a6[1];
          }
          else
          {
            v63 = 0;
          }
          v88 = (double *)&v63[8 * v73];
          *v88 = v24;
          v57 = v88 + 1;
          while (v26 != v58)
          {
            v93 = *((_QWORD *)v26-- - 1);
            *((_QWORD *)v88-- - 1) = v93;
          }
          goto LABEL_154;
        case 1:
          v51 = a6[1];
          v50 = (unint64_t)a6[2];
          if ((unint64_t)v51 < v50)
          {
            *v51 = v23;
            v27 = v51 + 1;
            goto LABEL_45;
          }
          v58 = *a6;
          v76 = v51 - *a6;
          v77 = v76 + 1;
          if ((unint64_t)(v76 + 1) >> 61)
            std::vector<int>::__throw_length_error[abi:ne180100]();
          v78 = v50 - (_QWORD)v58;
          if (v78 >> 2 > v77)
            v77 = v78 >> 2;
          if ((unint64_t)v78 >= 0x7FFFFFFFFFFFFFF8)
            v62 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v62 = v77;
          if (v62)
          {
            v63 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)v17, v62);
            v58 = *a6;
            v51 = a6[1];
          }
          else
          {
            v63 = 0;
          }
          v88 = (double *)&v63[8 * v76];
          *v88 = v23;
          v57 = v88 + 1;
          while (v51 != v58)
          {
            v94 = *((_QWORD *)v51-- - 1);
            *((_QWORD *)v88-- - 1) = v94;
          }
          goto LABEL_154;
        case 2:
          v34 = a6[1];
          v33 = (unint64_t)a6[2];
          if ((unint64_t)v34 < v33)
          {
            *v34 = v22;
            v27 = v34 + 1;
            goto LABEL_45;
          }
          v58 = *a6;
          v67 = v34 - *a6;
          v68 = v67 + 1;
          if ((unint64_t)(v67 + 1) >> 61)
            std::vector<int>::__throw_length_error[abi:ne180100]();
          v69 = v33 - (_QWORD)v58;
          if (v69 >> 2 > v68)
            v68 = v69 >> 2;
          if ((unint64_t)v69 >= 0x7FFFFFFFFFFFFFF8)
            v62 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v62 = v68;
          if (v62)
          {
            v63 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)v17, v62);
            v58 = *a6;
            v34 = a6[1];
          }
          else
          {
            v63 = 0;
          }
          v88 = (double *)&v63[8 * v67];
          *v88 = v22;
          v57 = v88 + 1;
          while (v34 != v58)
          {
            v91 = *((_QWORD *)v34-- - 1);
            *((_QWORD *)v88-- - 1) = v91;
          }
          goto LABEL_154;
        case 3:
          v35 = *a4;
          v36 = a4[1];
          if (*a4 != v36)
          {
            v37 = a6[1];
            do
            {
              v38 = (float)*v35;
              if ((unint64_t)v37 >= *v17)
              {
                v40 = *a6;
                v41 = v37 - *a6;
                v42 = v41 + 1;
                if ((unint64_t)(v41 + 1) >> 61)
                  std::vector<int>::__throw_length_error[abi:ne180100]();
                v43 = *v17 - (_QWORD)v40;
                if (v43 >> 2 > v42)
                  v42 = v43 >> 2;
                if ((unint64_t)v43 >= 0x7FFFFFFFFFFFFFF8)
                  v44 = 0x1FFFFFFFFFFFFFFFLL;
                else
                  v44 = v42;
                if (v44)
                {
                  v45 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)v17, v44);
                  v40 = *a6;
                  v37 = a6[1];
                }
                else
                {
                  v45 = 0;
                }
                v46 = (double *)&v45[8 * v41];
                *v46 = v38;
                v39 = v46 + 1;
                while (v37 != v40)
                {
                  v47 = *((_QWORD *)v37-- - 1);
                  *((_QWORD *)v46-- - 1) = v47;
                }
                *a6 = v46;
                a6[1] = v39;
                a6[2] = (double *)&v45[8 * v44];
                if (v40)
                  operator delete(v40);
              }
              else
              {
                *v37 = v38;
                v39 = v37 + 1;
              }
              a6[1] = v39;
              ++v35;
              v37 = v39;
            }
            while (v35 != v36);
          }
          goto LABEL_157;
        case 4:
          v29 = a6[1];
          v28 = (unint64_t)a6[2];
          if ((unint64_t)v29 < v28)
          {
            *v29 = v21;
            v27 = v29 + 1;
            goto LABEL_45;
          }
          v58 = *a6;
          v59 = v29 - *a6;
          v60 = v59 + 1;
          if ((unint64_t)(v59 + 1) >> 61)
            std::vector<int>::__throw_length_error[abi:ne180100]();
          v61 = v28 - (_QWORD)v58;
          if (v61 >> 2 > v60)
            v60 = v61 >> 2;
          if ((unint64_t)v61 >= 0x7FFFFFFFFFFFFFF8)
            v62 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v62 = v60;
          if (v62)
          {
            v63 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)v17, v62);
            v58 = *a6;
            v29 = a6[1];
          }
          else
          {
            v63 = 0;
          }
          v88 = (double *)&v63[8 * v59];
          *v88 = v21;
          v57 = v88 + 1;
          while (v29 != v58)
          {
            v89 = *((_QWORD *)v29-- - 1);
            *((_QWORD *)v88-- - 1) = v89;
          }
          goto LABEL_154;
        case 5:
          v53 = a6[1];
          v52 = (unint64_t)a6[2];
          if ((unint64_t)v53 < v52)
          {
            *v53 = v20;
            v27 = v53 + 1;
            goto LABEL_45;
          }
          v58 = *a6;
          v79 = v53 - *a6;
          v80 = v79 + 1;
          if ((unint64_t)(v79 + 1) >> 61)
            std::vector<int>::__throw_length_error[abi:ne180100]();
          v81 = v52 - (_QWORD)v58;
          if (v81 >> 2 > v80)
            v80 = v81 >> 2;
          if ((unint64_t)v81 >= 0x7FFFFFFFFFFFFFF8)
            v62 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v62 = v80;
          if (v62)
          {
            v63 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)v17, v62);
            v58 = *a6;
            v53 = a6[1];
          }
          else
          {
            v63 = 0;
          }
          v88 = (double *)&v63[8 * v79];
          *v88 = v20;
          v57 = v88 + 1;
          while (v53 != v58)
          {
            v95 = *((_QWORD *)v53-- - 1);
            *((_QWORD *)v88-- - 1) = v95;
          }
          goto LABEL_154;
        case 6:
          v55 = a6[1];
          v54 = (unint64_t)a6[2];
          if ((unint64_t)v55 < v54)
          {
            *v55 = v19;
            v27 = v55 + 1;
            goto LABEL_45;
          }
          v58 = *a6;
          v82 = v55 - *a6;
          v83 = v82 + 1;
          if ((unint64_t)(v82 + 1) >> 61)
            std::vector<int>::__throw_length_error[abi:ne180100]();
          v84 = v54 - (_QWORD)v58;
          if (v84 >> 2 > v83)
            v83 = v84 >> 2;
          if ((unint64_t)v84 >= 0x7FFFFFFFFFFFFFF8)
            v62 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v62 = v83;
          if (v62)
          {
            v63 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)v17, v62);
            v58 = *a6;
            v55 = a6[1];
          }
          else
          {
            v63 = 0;
          }
          v88 = (double *)&v63[8 * v82];
          *v88 = v19;
          v57 = v88 + 1;
          while (v55 != v58)
          {
            v96 = *((_QWORD *)v55-- - 1);
            *((_QWORD *)v88-- - 1) = v96;
          }
          goto LABEL_154;
        case 7:
          v49 = a6[1];
          v48 = (unint64_t)a6[2];
          if ((unint64_t)v49 < v48)
          {
            *v49 = v18;
            v27 = v49 + 1;
            goto LABEL_45;
          }
          v58 = *a6;
          v70 = v49 - *a6;
          v71 = v70 + 1;
          if ((unint64_t)(v70 + 1) >> 61)
            std::vector<int>::__throw_length_error[abi:ne180100]();
          v72 = v48 - (_QWORD)v58;
          if (v72 >> 2 > v71)
            v71 = v72 >> 2;
          if ((unint64_t)v72 >= 0x7FFFFFFFFFFFFFF8)
            v62 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v62 = v71;
          if (v62)
          {
            v63 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)v17, v62);
            v58 = *a6;
            v49 = a6[1];
          }
          else
          {
            v63 = 0;
          }
          v88 = (double *)&v63[8 * v70];
          *v88 = v18;
          v57 = v88 + 1;
          while (v49 != v58)
          {
            v92 = *((_QWORD *)v49-- - 1);
            *((_QWORD *)v88-- - 1) = v92;
          }
          goto LABEL_154;
        case 8:
          v31 = a6[1];
          v56 = (unint64_t)a6[2];
          if ((unint64_t)v31 < v56)
          {
            v32 = v98;
            goto LABEL_44;
          }
          v58 = *a6;
          v85 = v31 - *a6;
          v86 = v85 + 1;
          if ((unint64_t)(v85 + 1) >> 61)
            std::vector<int>::__throw_length_error[abi:ne180100]();
          v87 = v56 - (_QWORD)v58;
          if (v87 >> 2 > v86)
            v86 = v87 >> 2;
          if ((unint64_t)v87 >= 0x7FFFFFFFFFFFFFF8)
            v62 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v62 = v86;
          if (v62)
          {
            v63 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)v17, v62);
            v58 = *a6;
            v31 = a6[1];
          }
          else
          {
            v63 = 0;
          }
          v88 = (double *)&v63[8 * v85];
          *v88 = v98;
          v57 = v88 + 1;
          while (v31 != v58)
          {
            v97 = *((_QWORD *)v31-- - 1);
            *((_QWORD *)v88-- - 1) = v97;
          }
          goto LABEL_154;
        case 9:
          v31 = a6[1];
          v30 = (unint64_t)a6[2];
          if ((unint64_t)v31 >= v30)
          {
            v58 = *a6;
            v64 = v31 - *a6;
            v65 = v64 + 1;
            if ((unint64_t)(v64 + 1) >> 61)
              std::vector<int>::__throw_length_error[abi:ne180100]();
            v66 = v30 - (_QWORD)v58;
            if (v66 >> 2 > v65)
              v65 = v66 >> 2;
            if ((unint64_t)v66 >= 0x7FFFFFFFFFFFFFF8)
              v62 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v62 = v65;
            if (v62)
            {
              v63 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)v17, v62);
              v58 = *a6;
              v31 = a6[1];
            }
            else
            {
              v63 = 0;
            }
            v88 = (double *)&v63[8 * v64];
            *v88 = v99;
            v57 = v88 + 1;
            while (v31 != v58)
            {
              v90 = *((_QWORD *)v31-- - 1);
              *((_QWORD *)v88-- - 1) = v90;
            }
LABEL_154:
            *a6 = v88;
            a6[1] = v57;
            a6[2] = (double *)&v63[8 * v62];
            if (v58)
              operator delete(v58);
          }
          else
          {
            v32 = v99;
LABEL_44:
            *v31 = v32;
            v27 = v31 + 1;
LABEL_45:
            v57 = v27;
          }
          a6[1] = v57;
LABEL_157:
          if (++v12 == v13)
            return;
          continue;
        default:
          if (quasar::gLogLevel >= 5)
          {
            memset(v101, 0, 272);
            kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v101);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v101, (uint64_t)"Feature type unknown. Ignoring feature ..", 41);
            quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)v101);
          }
          goto LABEL_157;
      }
    }
  }
}

void sub_1AD90901C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  uint64_t v13;
  void *v15;

  v15 = *(void **)v13;
  if (*(_QWORD *)v13)
  {
    *(_QWORD *)(v13 + 8) = v15;
    operator delete(v15);
  }
  _Unwind_Resume(exception_object);
}

void quasar::EndpointConfigHelper::initModels(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v3;
  _QWORD *v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  void *__p[2];
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;

  v3 = *(unsigned __int8 *)(a1 + 23);
  if ((v3 & 0x80u) != 0)
    v3 = *(_QWORD *)(a1 + 8);
  if (!v3)
  {
    v25 = 0u;
    v26 = 0u;
    v23 = 0u;
    v24 = 0u;
    v21 = 0u;
    v22 = 0u;
    v19 = 0u;
    v20 = 0u;
    v17 = 0u;
    v18 = 0u;
    v15 = 0u;
    v16 = 0u;
    v13 = 0u;
    v14 = 0u;
    v11 = 0u;
    v12 = 0u;
    *(_OWORD *)__p = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(__p, "Endpoint model file cannot be empty");
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)__p);
  }
  if (a3)
  {
    fst::FstReadOptions::FstReadOptions(__p, a1, 0, 0, 0);
    LODWORD(v13) = 2;
    kaldi::nnet1::Nnet::ReadMapped(a2, (uint64_t)__p);
    if (SBYTE7(v11) < 0)
      operator delete(__p[0]);
  }
  else
  {
    kaldi::nnet1::Nnet::Read(a2, a1);
  }
  if (quasar::gLogLevel >= 4)
  {
    v25 = 0u;
    v26 = 0u;
    v23 = 0u;
    v24 = 0u;
    v21 = 0u;
    v22 = 0u;
    v19 = 0u;
    v20 = 0u;
    v17 = 0u;
    v18 = 0u;
    v15 = 0u;
    v16 = 0u;
    v13 = 0u;
    v14 = 0u;
    v11 = 0u;
    v12 = 0u;
    *(_OWORD *)__p = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Initialized nnet with Model file =", 34);
    v7 = *(char *)(a1 + 23);
    if (v7 >= 0)
      v8 = a1;
    else
      v8 = *(_QWORD *)a1;
    if (v7 >= 0)
      v9 = *(unsigned __int8 *)(a1 + 23);
    else
      v9 = *(_QWORD *)(a1 + 8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, v8, v9);
    quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)__p);
  }
}

void quasar::EndpointConfigHelper::initFeatures(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  size_t v6;
  size_t v7;
  size_t v8;
  const void *v9;
  size_t v10;
  char *v11;
  size_t v12;
  const void *v13;
  char *v14;
  size_t v15;
  const void *v16;
  char *v17;
  size_t v18;
  unint64_t v19;
  int *v20;
  _DWORD *v21;
  unint64_t v22;
  int *v23;
  int v24;
  const void *v25;
  char *v26;
  size_t v27;
  unint64_t v28;
  int *v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  char *v34;
  const void *v35;
  char *v36;
  size_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  const void *v42;
  char *v43;
  size_t v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  const void *v49;
  char *v50;
  size_t v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  const void *v56;
  char *v57;
  size_t v58;
  unint64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  char *v63;
  _DWORD *v64;
  int v65;
  const void *v66;
  char *v67;
  size_t v68;
  unint64_t v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  int v73;
  const void *v74;
  unint64_t v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  int v79;
  unint64_t v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  int v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  int v88;
  uint64_t v89;
  unint64_t v90;
  uint64_t v91;
  int v92;
  int v93;
  int v94;
  int v95;
  int v96;
  _QWORD *v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;

  v2 = *(unsigned __int8 *)(a1 + 23);
  if ((v2 & 0x80u) != 0)
    v2 = *(_QWORD *)(a1 + 8);
  if (!v2)
  {
    v113 = 0u;
    v114 = 0u;
    v111 = 0u;
    v112 = 0u;
    v109 = 0u;
    v110 = 0u;
    v107 = 0u;
    v108 = 0u;
    v105 = 0u;
    v106 = 0u;
    v103 = 0u;
    v104 = 0u;
    v101 = 0u;
    v102 = 0u;
    v99 = 0u;
    v100 = 0u;
    v98 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v98);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(&v98, "endpoint-feature-list cannot be empty");
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&v98);
  }
  v115 = 0;
  v116 = 0;
  v117 = 0;
  kaldi::SplitStringToVector((const std::string *)a1, ",", 0, (uint64_t)&v115);
  v4 = v115;
  v5 = v116;
  while (v4 != v5)
  {
    v6 = strlen(quasar::EP_NUM_OF_WORDS_STR[0]);
    v7 = v6;
    v8 = *(unsigned __int8 *)(v4 + 23);
    if (*(char *)(v4 + 23) < 0)
    {
      v10 = *(_QWORD *)(v4 + 8);
      if (v6 != v10)
      {
        v11 = quasar::EP_NUM_TRAILING_SIL_STR[0];
        v12 = strlen(quasar::EP_NUM_TRAILING_SIL_STR[0]);
LABEL_19:
        if (v12 == v10)
        {
          if (v10 == -1)
            std::string::__throw_out_of_range[abi:ne180100]();
          v13 = *(const void **)v4;
          goto LABEL_22;
        }
        v14 = quasar::EP_EOS_LIKELIHOOD_STR[0];
        v15 = strlen(quasar::EP_EOS_LIKELIHOOD_STR[0]);
        goto LABEL_32;
      }
      if (v6 == -1)
LABEL_241:
        std::string::__throw_out_of_range[abi:ne180100]();
      v9 = *(const void **)v4;
    }
    else
    {
      if (v6 != v8)
      {
        v11 = quasar::EP_NUM_TRAILING_SIL_STR[0];
        v12 = strlen(quasar::EP_NUM_TRAILING_SIL_STR[0]);
        goto LABEL_16;
      }
      v9 = (const void *)v4;
      if (v7 == -1)
        goto LABEL_241;
    }
    if (memcmp(v9, quasar::EP_NUM_OF_WORDS_STR[0], v7))
    {
      v11 = quasar::EP_NUM_TRAILING_SIL_STR[0];
      v12 = strlen(quasar::EP_NUM_TRAILING_SIL_STR[0]);
      if ((v8 & 0x80) != 0)
      {
        v10 = *(_QWORD *)(v4 + 8);
        goto LABEL_19;
      }
LABEL_16:
      v10 = v8;
      v13 = (const void *)v4;
      if (v12 != v8)
      {
        v14 = quasar::EP_EOS_LIKELIHOOD_STR[0];
        v15 = strlen(quasar::EP_EOS_LIKELIHOOD_STR[0]);
        goto LABEL_24;
      }
LABEL_22:
      if (!memcmp(v13, v11, v10))
      {
        v23 = *(int **)(a2 + 8);
        v22 = *(_QWORD *)(a2 + 16);
        if ((unint64_t)v23 >= v22)
        {
          v29 = *(int **)a2;
          v39 = ((uint64_t)v23 - *(_QWORD *)a2) >> 2;
          v40 = v39 + 1;
          if ((unint64_t)(v39 + 1) >> 62)
            std::vector<int>::__throw_length_error[abi:ne180100]();
          v41 = v22 - (_QWORD)v29;
          if (v41 >> 1 > v40)
            v40 = v41 >> 1;
          if ((unint64_t)v41 >= 0x7FFFFFFFFFFFFFFCLL)
            v33 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v33 = v40;
          if (v33)
          {
            v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(a2 + 16, v33);
            v29 = *(int **)a2;
            v23 = *(int **)(a2 + 8);
          }
          else
          {
            v34 = 0;
          }
          v63 = &v34[4 * v39];
          *(_DWORD *)v63 = 1;
          v64 = v63 + 4;
          while (v23 != v29)
          {
            v73 = *--v23;
            *((_DWORD *)v63 - 1) = v73;
            v63 -= 4;
          }
          goto LABEL_237;
        }
        v24 = 1;
        goto LABEL_183;
      }
      v14 = quasar::EP_EOS_LIKELIHOOD_STR[0];
      v15 = strlen(quasar::EP_EOS_LIKELIHOOD_STR[0]);
      if ((v8 & 0x80) == 0)
      {
LABEL_24:
        v10 = v8;
        v16 = (const void *)v4;
        if (v15 != v8)
        {
          v17 = quasar::EP_PAUSE_COUNTS_STR[0];
          v18 = strlen(quasar::EP_PAUSE_COUNTS_STR[0]);
          goto LABEL_37;
        }
LABEL_35:
        if (!memcmp(v16, v14, v10))
        {
          v23 = *(int **)(a2 + 8);
          v28 = *(_QWORD *)(a2 + 16);
          if ((unint64_t)v23 >= v28)
          {
            v29 = *(int **)a2;
            v46 = ((uint64_t)v23 - *(_QWORD *)a2) >> 2;
            v47 = v46 + 1;
            if ((unint64_t)(v46 + 1) >> 62)
              std::vector<int>::__throw_length_error[abi:ne180100]();
            v48 = v28 - (_QWORD)v29;
            if (v48 >> 1 > v47)
              v47 = v48 >> 1;
            if ((unint64_t)v48 >= 0x7FFFFFFFFFFFFFFCLL)
              v33 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v33 = v47;
            if (v33)
            {
              v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(a2 + 16, v33);
              v29 = *(int **)a2;
              v23 = *(int **)(a2 + 8);
            }
            else
            {
              v34 = 0;
            }
            v63 = &v34[4 * v46];
            *(_DWORD *)v63 = 2;
            v64 = v63 + 4;
            while (v23 != v29)
            {
              v79 = *--v23;
              *((_DWORD *)v63 - 1) = v79;
              v63 -= 4;
            }
            goto LABEL_237;
          }
          v24 = 2;
          goto LABEL_183;
        }
        v17 = quasar::EP_PAUSE_COUNTS_STR[0];
        v18 = strlen(quasar::EP_PAUSE_COUNTS_STR[0]);
        if ((v8 & 0x80) == 0)
        {
LABEL_37:
          v10 = v8;
          v25 = (const void *)v4;
          if (v18 != v8)
          {
            v26 = quasar::EP_SILENCE_POSTERIOR_STR[0];
            v27 = strlen(quasar::EP_SILENCE_POSTERIOR_STR[0]);
            goto LABEL_56;
          }
LABEL_54:
          if (!memcmp(v25, v17, v10))
          {
            v23 = *(int **)(a2 + 8);
            v38 = *(_QWORD *)(a2 + 16);
            if ((unint64_t)v23 >= v38)
            {
              v29 = *(int **)a2;
              v53 = ((uint64_t)v23 - *(_QWORD *)a2) >> 2;
              v54 = v53 + 1;
              if ((unint64_t)(v53 + 1) >> 62)
                std::vector<int>::__throw_length_error[abi:ne180100]();
              v55 = v38 - (_QWORD)v29;
              if (v55 >> 1 > v54)
                v54 = v55 >> 1;
              if ((unint64_t)v55 >= 0x7FFFFFFFFFFFFFFCLL)
                v33 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v33 = v54;
              if (v33)
              {
                v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(a2 + 16, v33);
                v29 = *(int **)a2;
                v23 = *(int **)(a2 + 8);
              }
              else
              {
                v34 = 0;
              }
              v63 = &v34[4 * v53];
              *(_DWORD *)v63 = 3;
              v64 = v63 + 4;
              while (v23 != v29)
              {
                v88 = *--v23;
                *((_DWORD *)v63 - 1) = v88;
                v63 -= 4;
              }
              goto LABEL_237;
            }
            v24 = 3;
            goto LABEL_183;
          }
          v26 = quasar::EP_SILENCE_POSTERIOR_STR[0];
          v27 = strlen(quasar::EP_SILENCE_POSTERIOR_STR[0]);
          if ((v8 & 0x80) == 0)
          {
LABEL_56:
            v10 = v8;
            v35 = (const void *)v4;
            if (v27 != v8)
            {
              v36 = quasar::EP_CLIENT_SILENCE_FRAMES_COUNT_MS_STR[0];
              v37 = strlen(quasar::EP_CLIENT_SILENCE_FRAMES_COUNT_MS_STR[0]);
              goto LABEL_75;
            }
LABEL_73:
            if (!memcmp(v35, v26, v10))
            {
              v23 = *(int **)(a2 + 8);
              v45 = *(_QWORD *)(a2 + 16);
              if ((unint64_t)v23 >= v45)
              {
                v29 = *(int **)a2;
                v60 = ((uint64_t)v23 - *(_QWORD *)a2) >> 2;
                v61 = v60 + 1;
                if ((unint64_t)(v60 + 1) >> 62)
                  std::vector<int>::__throw_length_error[abi:ne180100]();
                v62 = v45 - (_QWORD)v29;
                if (v62 >> 1 > v61)
                  v61 = v62 >> 1;
                if ((unint64_t)v62 >= 0x7FFFFFFFFFFFFFFCLL)
                  v33 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v33 = v61;
                if (v33)
                {
                  v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(a2 + 16, v33);
                  v29 = *(int **)a2;
                  v23 = *(int **)(a2 + 8);
                }
                else
                {
                  v34 = 0;
                }
                v63 = &v34[4 * v60];
                *(_DWORD *)v63 = 4;
                v64 = v63 + 4;
                while (v23 != v29)
                {
                  v92 = *--v23;
                  *((_DWORD *)v63 - 1) = v92;
                  v63 -= 4;
                }
                goto LABEL_237;
              }
              v24 = 4;
              goto LABEL_183;
            }
            v36 = quasar::EP_CLIENT_SILENCE_FRAMES_COUNT_MS_STR[0];
            v37 = strlen(quasar::EP_CLIENT_SILENCE_FRAMES_COUNT_MS_STR[0]);
            if ((v8 & 0x80) == 0)
            {
LABEL_75:
              v10 = v8;
              v42 = (const void *)v4;
              if (v37 != v8)
              {
                v43 = quasar::EP_CLIENT_SILENCE_PROBABILITY_STR[0];
                v44 = strlen(quasar::EP_CLIENT_SILENCE_PROBABILITY_STR[0]);
                goto LABEL_94;
              }
LABEL_92:
              if (!memcmp(v42, v36, v10))
              {
                v23 = *(int **)(a2 + 8);
                v52 = *(_QWORD *)(a2 + 16);
                if ((unint64_t)v23 >= v52)
                {
                  v29 = *(int **)a2;
                  v70 = ((uint64_t)v23 - *(_QWORD *)a2) >> 2;
                  v71 = v70 + 1;
                  if ((unint64_t)(v70 + 1) >> 62)
                    std::vector<int>::__throw_length_error[abi:ne180100]();
                  v72 = v52 - (_QWORD)v29;
                  if (v72 >> 1 > v71)
                    v71 = v72 >> 1;
                  if ((unint64_t)v72 >= 0x7FFFFFFFFFFFFFFCLL)
                    v33 = 0x3FFFFFFFFFFFFFFFLL;
                  else
                    v33 = v71;
                  if (v33)
                  {
                    v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(a2 + 16, v33);
                    v29 = *(int **)a2;
                    v23 = *(int **)(a2 + 8);
                  }
                  else
                  {
                    v34 = 0;
                  }
                  v63 = &v34[4 * v70];
                  *(_DWORD *)v63 = 5;
                  v64 = v63 + 4;
                  while (v23 != v29)
                  {
                    v93 = *--v23;
                    *((_DWORD *)v63 - 1) = v93;
                    v63 -= 4;
                  }
                  goto LABEL_237;
                }
                v24 = 5;
                goto LABEL_183;
              }
              v43 = quasar::EP_CLIENT_SILENCE_PROBABILITY_STR[0];
              v44 = strlen(quasar::EP_CLIENT_SILENCE_PROBABILITY_STR[0]);
              if ((v8 & 0x80) == 0)
              {
LABEL_94:
                v10 = v8;
                v49 = (const void *)v4;
                if (v44 != v8)
                {
                  v50 = quasar::EP_SILENCE_POSTERIOR_NF_STR[0];
                  v51 = strlen(quasar::EP_SILENCE_POSTERIOR_NF_STR[0]);
                  goto LABEL_113;
                }
LABEL_111:
                if (!memcmp(v49, v43, v10))
                {
                  v23 = *(int **)(a2 + 8);
                  v59 = *(_QWORD *)(a2 + 16);
                  if ((unint64_t)v23 >= v59)
                  {
                    v29 = *(int **)a2;
                    v76 = ((uint64_t)v23 - *(_QWORD *)a2) >> 2;
                    v77 = v76 + 1;
                    if ((unint64_t)(v76 + 1) >> 62)
                      std::vector<int>::__throw_length_error[abi:ne180100]();
                    v78 = v59 - (_QWORD)v29;
                    if (v78 >> 1 > v77)
                      v77 = v78 >> 1;
                    if ((unint64_t)v78 >= 0x7FFFFFFFFFFFFFFCLL)
                      v33 = 0x3FFFFFFFFFFFFFFFLL;
                    else
                      v33 = v77;
                    if (v33)
                    {
                      v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(a2 + 16, v33);
                      v29 = *(int **)a2;
                      v23 = *(int **)(a2 + 8);
                    }
                    else
                    {
                      v34 = 0;
                    }
                    v63 = &v34[4 * v76];
                    *(_DWORD *)v63 = 6;
                    v64 = v63 + 4;
                    while (v23 != v29)
                    {
                      v94 = *--v23;
                      *((_DWORD *)v63 - 1) = v94;
                      v63 -= 4;
                    }
                    goto LABEL_237;
                  }
                  v24 = 6;
                  goto LABEL_183;
                }
                v50 = quasar::EP_SILENCE_POSTERIOR_NF_STR[0];
                v51 = strlen(quasar::EP_SILENCE_POSTERIOR_NF_STR[0]);
                if ((v8 & 0x80) == 0)
                {
LABEL_113:
                  v10 = v8;
                  v56 = (const void *)v4;
                  if (v51 != v8)
                  {
                    v57 = quasar::EP_SERVER_FEATURES_LATENCY_STR[0];
                    v58 = strlen(quasar::EP_SERVER_FEATURES_LATENCY_STR[0]);
                    goto LABEL_136;
                  }
LABEL_134:
                  if (!memcmp(v56, v50, v10))
                  {
                    v23 = *(int **)(a2 + 8);
                    v69 = *(_QWORD *)(a2 + 16);
                    if ((unint64_t)v23 >= v69)
                    {
                      v29 = *(int **)a2;
                      v85 = ((uint64_t)v23 - *(_QWORD *)a2) >> 2;
                      v86 = v85 + 1;
                      if ((unint64_t)(v85 + 1) >> 62)
                        std::vector<int>::__throw_length_error[abi:ne180100]();
                      v87 = v69 - (_QWORD)v29;
                      if (v87 >> 1 > v86)
                        v86 = v87 >> 1;
                      if ((unint64_t)v87 >= 0x7FFFFFFFFFFFFFFCLL)
                        v33 = 0x3FFFFFFFFFFFFFFFLL;
                      else
                        v33 = v86;
                      if (v33)
                      {
                        v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(a2 + 16, v33);
                        v29 = *(int **)a2;
                        v23 = *(int **)(a2 + 8);
                      }
                      else
                      {
                        v34 = 0;
                      }
                      v63 = &v34[4 * v85];
                      *(_DWORD *)v63 = 7;
                      v64 = v63 + 4;
                      while (v23 != v29)
                      {
                        v95 = *--v23;
                        *((_DWORD *)v63 - 1) = v95;
                        v63 -= 4;
                      }
                      goto LABEL_237;
                    }
                    v24 = 7;
                    goto LABEL_183;
                  }
                  v57 = quasar::EP_SERVER_FEATURES_LATENCY_STR[0];
                  v58 = strlen(quasar::EP_SERVER_FEATURES_LATENCY_STR[0]);
                  if ((v8 & 0x80) == 0)
                  {
LABEL_136:
                    v10 = v8;
                    v66 = (const void *)v4;
                    if (v58 != v8)
                    {
                      v67 = quasar::EP_EAGER_RESULT_END_TIME_STR[0];
                      v68 = strlen(quasar::EP_EAGER_RESULT_END_TIME_STR[0]);
LABEL_159:
                      v74 = (const void *)v4;
                      if (v68 != v8)
                        goto LABEL_242;
LABEL_180:
                      if (memcmp(v74, v67, v8))
                      {
LABEL_242:
                        v113 = 0u;
                        v114 = 0u;
                        v111 = 0u;
                        v112 = 0u;
                        v109 = 0u;
                        v110 = 0u;
                        v107 = 0u;
                        v108 = 0u;
                        v105 = 0u;
                        v106 = 0u;
                        v103 = 0u;
                        v104 = 0u;
                        v101 = 0u;
                        v102 = 0u;
                        v99 = 0u;
                        v100 = 0u;
                        v98 = 0u;
                        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v98);
                        v97 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v98, (uint64_t)"Feature unknown, ", 17);
                        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v97, (uint64_t)"features allowed are (\"num-of-words\",\"num-trailing-sil\", \"num-frames\",\"end-of-sentence\",\"pause-counts\",\"num-input-label-words\",\"stream-conf\",\"silence-posterior\",\"client-silence-frames-count-ms\",\"client-silence-probability\",\"silence-posterior-nf\",\"server-features-latency\", \"eager-result-end-time\")", 297);
                        quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&v98);
                      }
                      v23 = *(int **)(a2 + 8);
                      v80 = *(_QWORD *)(a2 + 16);
                      if ((unint64_t)v23 >= v80)
                      {
                        v29 = *(int **)a2;
                        v81 = ((uint64_t)v23 - *(_QWORD *)a2) >> 2;
                        v82 = v81 + 1;
                        if ((unint64_t)(v81 + 1) >> 62)
                          std::vector<int>::__throw_length_error[abi:ne180100]();
                        v83 = v80 - (_QWORD)v29;
                        if (v83 >> 1 > v82)
                          v82 = v83 >> 1;
                        if ((unint64_t)v83 >= 0x7FFFFFFFFFFFFFFCLL)
                          v33 = 0x3FFFFFFFFFFFFFFFLL;
                        else
                          v33 = v82;
                        if (v33)
                        {
                          v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(a2 + 16, v33);
                          v29 = *(int **)a2;
                          v23 = *(int **)(a2 + 8);
                        }
                        else
                        {
                          v34 = 0;
                        }
                        v63 = &v34[4 * v81];
                        *(_DWORD *)v63 = 9;
                        v64 = v63 + 4;
                        while (v23 != v29)
                        {
                          v84 = *--v23;
                          *((_DWORD *)v63 - 1) = v84;
                          v63 -= 4;
                        }
LABEL_237:
                        *(_QWORD *)a2 = v63;
                        *(_QWORD *)(a2 + 8) = v64;
                        *(_QWORD *)(a2 + 16) = &v34[4 * v33];
                        if (v29)
                          operator delete(v29);
                        goto LABEL_239;
                      }
                      v24 = 9;
LABEL_183:
                      *v23 = v24;
                      v21 = v23 + 1;
                      goto LABEL_184;
                    }
LABEL_157:
                    if (!memcmp(v66, v57, v10))
                    {
                      v23 = *(int **)(a2 + 8);
                      v75 = *(_QWORD *)(a2 + 16);
                      if ((unint64_t)v23 >= v75)
                      {
                        v29 = *(int **)a2;
                        v89 = ((uint64_t)v23 - *(_QWORD *)a2) >> 2;
                        v90 = v89 + 1;
                        if ((unint64_t)(v89 + 1) >> 62)
                          std::vector<int>::__throw_length_error[abi:ne180100]();
                        v91 = v75 - (_QWORD)v29;
                        if (v91 >> 1 > v90)
                          v90 = v91 >> 1;
                        if ((unint64_t)v91 >= 0x7FFFFFFFFFFFFFFCLL)
                          v33 = 0x3FFFFFFFFFFFFFFFLL;
                        else
                          v33 = v90;
                        if (v33)
                        {
                          v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(a2 + 16, v33);
                          v29 = *(int **)a2;
                          v23 = *(int **)(a2 + 8);
                        }
                        else
                        {
                          v34 = 0;
                        }
                        v63 = &v34[4 * v89];
                        *(_DWORD *)v63 = 8;
                        v64 = v63 + 4;
                        while (v23 != v29)
                        {
                          v96 = *--v23;
                          *((_DWORD *)v63 - 1) = v96;
                          v63 -= 4;
                        }
                        goto LABEL_237;
                      }
                      v24 = 8;
                      goto LABEL_183;
                    }
                    v67 = quasar::EP_EAGER_RESULT_END_TIME_STR[0];
                    v68 = strlen(quasar::EP_EAGER_RESULT_END_TIME_STR[0]);
                    if ((v8 & 0x80) == 0)
                      goto LABEL_159;
                    v10 = *(_QWORD *)(v4 + 8);
                    goto LABEL_177;
                  }
                  v10 = *(_QWORD *)(v4 + 8);
LABEL_154:
                  if (v58 == v10)
                  {
                    if (v10 == -1)
                      std::string::__throw_out_of_range[abi:ne180100]();
                    v66 = *(const void **)v4;
                    goto LABEL_157;
                  }
                  v67 = quasar::EP_EAGER_RESULT_END_TIME_STR[0];
                  v68 = strlen(quasar::EP_EAGER_RESULT_END_TIME_STR[0]);
LABEL_177:
                  if (v68 != v10)
                    goto LABEL_242;
                  if (v10 == -1)
                    std::string::__throw_out_of_range[abi:ne180100]();
                  v74 = *(const void **)v4;
                  v8 = v10;
                  goto LABEL_180;
                }
                v10 = *(_QWORD *)(v4 + 8);
LABEL_131:
                if (v51 == v10)
                {
                  if (v10 == -1)
                    std::string::__throw_out_of_range[abi:ne180100]();
                  v56 = *(const void **)v4;
                  goto LABEL_134;
                }
                v57 = quasar::EP_SERVER_FEATURES_LATENCY_STR[0];
                v58 = strlen(quasar::EP_SERVER_FEATURES_LATENCY_STR[0]);
                goto LABEL_154;
              }
              v10 = *(_QWORD *)(v4 + 8);
LABEL_108:
              if (v44 == v10)
              {
                if (v10 == -1)
                  std::string::__throw_out_of_range[abi:ne180100]();
                v49 = *(const void **)v4;
                goto LABEL_111;
              }
              v50 = quasar::EP_SILENCE_POSTERIOR_NF_STR[0];
              v51 = strlen(quasar::EP_SILENCE_POSTERIOR_NF_STR[0]);
              goto LABEL_131;
            }
            v10 = *(_QWORD *)(v4 + 8);
LABEL_89:
            if (v37 == v10)
            {
              if (v10 == -1)
                std::string::__throw_out_of_range[abi:ne180100]();
              v42 = *(const void **)v4;
              goto LABEL_92;
            }
            v43 = quasar::EP_CLIENT_SILENCE_PROBABILITY_STR[0];
            v44 = strlen(quasar::EP_CLIENT_SILENCE_PROBABILITY_STR[0]);
            goto LABEL_108;
          }
          v10 = *(_QWORD *)(v4 + 8);
LABEL_70:
          if (v27 == v10)
          {
            if (v10 == -1)
              std::string::__throw_out_of_range[abi:ne180100]();
            v35 = *(const void **)v4;
            goto LABEL_73;
          }
          v36 = quasar::EP_CLIENT_SILENCE_FRAMES_COUNT_MS_STR[0];
          v37 = strlen(quasar::EP_CLIENT_SILENCE_FRAMES_COUNT_MS_STR[0]);
          goto LABEL_89;
        }
        v10 = *(_QWORD *)(v4 + 8);
LABEL_51:
        if (v18 == v10)
        {
          if (v10 == -1)
            std::string::__throw_out_of_range[abi:ne180100]();
          v25 = *(const void **)v4;
          goto LABEL_54;
        }
        v26 = quasar::EP_SILENCE_POSTERIOR_STR[0];
        v27 = strlen(quasar::EP_SILENCE_POSTERIOR_STR[0]);
        goto LABEL_70;
      }
      v10 = *(_QWORD *)(v4 + 8);
LABEL_32:
      if (v15 == v10)
      {
        if (v10 == -1)
          std::string::__throw_out_of_range[abi:ne180100]();
        v16 = *(const void **)v4;
        goto LABEL_35;
      }
      v17 = quasar::EP_PAUSE_COUNTS_STR[0];
      v18 = strlen(quasar::EP_PAUSE_COUNTS_STR[0]);
      goto LABEL_51;
    }
    v20 = *(int **)(a2 + 8);
    v19 = *(_QWORD *)(a2 + 16);
    if ((unint64_t)v20 >= v19)
    {
      v29 = *(int **)a2;
      v30 = ((uint64_t)v20 - *(_QWORD *)a2) >> 2;
      v31 = v30 + 1;
      if ((unint64_t)(v30 + 1) >> 62)
        std::vector<int>::__throw_length_error[abi:ne180100]();
      v32 = v19 - (_QWORD)v29;
      if (v32 >> 1 > v31)
        v31 = v32 >> 1;
      if ((unint64_t)v32 >= 0x7FFFFFFFFFFFFFFCLL)
        v33 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v33 = v31;
      if (v33)
      {
        v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(a2 + 16, v33);
        v29 = *(int **)a2;
        v20 = *(int **)(a2 + 8);
      }
      else
      {
        v34 = 0;
      }
      v63 = &v34[4 * v30];
      *(_DWORD *)v63 = 0;
      v64 = v63 + 4;
      while (v20 != v29)
      {
        v65 = *--v20;
        *((_DWORD *)v63 - 1) = v65;
        v63 -= 4;
      }
      goto LABEL_237;
    }
    *v20 = 0;
    v21 = v20 + 1;
LABEL_184:
    v64 = v21;
LABEL_239:
    *(_QWORD *)(a2 + 8) = v64;
    v4 += 24;
  }
  *(_QWORD *)&v98 = &v115;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v98);
}

void sub_1AD90A4E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, void *a12, void *a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,char a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,void *a45)
{
  void *v45;
  uint64_t v46;

  if (a19 < 0)
    operator delete(__p);

  _Block_object_dispose(&a30, 8);
  _Block_object_dispose(&a34, 8);

  _Block_object_dispose(&a40, 8);
  _Block_object_dispose((const void *)(v46 - 256), 8);

  _Block_object_dispose((const void *)(v46 - 208), 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__4(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__4(uint64_t a1)
{

}

void sub_1AD90A8D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  void *v16;
  void *v17;
  void *v18;
  void *v19;

  if (a16 < 0)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void sub_1AD90A9FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;

  if (a15 < 0)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void *std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(uint64_t a1, unsigned __int8 *a2, uint64_t a3, __int128 **a4)
{
  unint64_t v4;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  unint64_t v13;
  void **v14;
  void *i;
  unint64_t v16;
  _QWORD *v17;
  __int128 *v18;
  __int128 v19;
  float v20;
  float v21;
  _BOOL8 v22;
  unint64_t v23;
  unint64_t v24;
  size_t v25;
  uint64_t v26;
  _QWORD *v27;
  unint64_t v28;

  v8 = (_QWORD *)(a1 + 24);
  v9 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  v10 = v9;
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      v4 = v9;
      if (v9 >= v11)
        v4 = v9 % v11;
    }
    else
    {
      v4 = (v11 - 1) & v9;
    }
    v14 = *(void ***)(*(_QWORD *)a1 + 8 * v4);
    if (v14)
    {
      for (i = *v14; i; i = *(void **)i)
      {
        v16 = *((_QWORD *)i + 1);
        if (v16 == v10)
        {
          if ((std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, (unsigned __int8 *)i + 16, a2) & 1) != 0)
            return i;
        }
        else
        {
          if (v13 > 1)
          {
            if (v16 >= v11)
              v16 %= v11;
          }
          else
          {
            v16 &= v11 - 1;
          }
          if (v16 != v4)
            break;
        }
      }
    }
  }
  v17 = (_QWORD *)(a1 + 16);
  i = operator new(0x30uLL);
  *(_QWORD *)i = 0;
  *((_QWORD *)i + 1) = v10;
  v18 = *a4;
  v19 = **a4;
  *((_QWORD *)i + 4) = *((_QWORD *)*a4 + 2);
  *((_OWORD *)i + 1) = v19;
  *((_QWORD *)v18 + 1) = 0;
  *((_QWORD *)v18 + 2) = 0;
  *(_QWORD *)v18 = 0;
  *((_QWORD *)i + 5) = 0;
  v20 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v21 = *(float *)(a1 + 32);
  if (!v11 || (float)(v21 * (float)v11) < v20)
  {
    v22 = 1;
    if (v11 >= 3)
      v22 = (v11 & (v11 - 1)) != 0;
    v23 = v22 | (2 * v11);
    v24 = vcvtps_u32_f32(v20 / v21);
    if (v23 <= v24)
      v25 = v24;
    else
      v25 = v23;
    std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::__rehash<true>(a1, v25);
    v11 = *(_QWORD *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
        v4 = v10 % v11;
      else
        v4 = v10;
    }
    else
    {
      v4 = (v11 - 1) & v10;
    }
  }
  v26 = *(_QWORD *)a1;
  v27 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v27)
  {
    *(_QWORD *)i = *v27;
LABEL_38:
    *v27 = i;
    goto LABEL_39;
  }
  *(_QWORD *)i = *v17;
  *v17 = i;
  *(_QWORD *)(v26 + 8 * v4) = v17;
  if (*(_QWORD *)i)
  {
    v28 = *(_QWORD *)(*(_QWORD *)i + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v28 >= v11)
        v28 %= v11;
    }
    else
    {
      v28 &= v11 - 1;
    }
    v27 = (_QWORD *)(*(_QWORD *)a1 + 8 * v28);
    goto LABEL_38;
  }
LABEL_39:
  ++*v8;
  return i;
}

void sub_1AD90AD00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  void **v10;
  uint64_t v11;

  std::__hash_node_destructor<std::allocator<std::__hash_node<std::string,void *>>>::operator()[abi:ne180100](v11, v10);
  _Unwind_Resume(a1);
}

int *kaldi::quasar::ConfidenceFeatureExtractor<std::string>::ConfidenceFeatureExtractor(int *a1, int a2, uint64_t a3, int a4, uint64_t a5, float a6)
{
  std::string **v10;
  std::string *v11;
  uint64_t v12;
  std::string *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  std::string *v23;
  unint64_t v24;
  uint64_t **v25;
  int v26;
  uint64_t *v27;
  std::string::size_type v28;
  uint64_t v30;
  uint64_t v31;
  __int128 v34;
  unsigned __int8 *v35;
  unsigned __int8 *v36;
  unsigned __int8 *v37;
  unsigned __int8 *v38;
  uint64_t v39;
  std::string *v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  std::string *v46;
  std::string *v47;
  _QWORD v48[2];
  char v49;
  std::string *__str[2];
  unint64_t v51;
  _QWORD v52[3];
  _QWORD v53[3];
  _QWORD v54[3];
  __int128 v55;
  _QWORD v56[3];
  _QWORD v57[3];
  _QWORD v58[3];
  _QWORD v59[3];
  _QWORD v60[3];
  _QWORD v61[3];
  _QWORD v62[3];
  __int128 v63;

  *(_QWORD *)&v63 = *MEMORY[0x1E0C80C00];
  *a1 = a2;
  std::unordered_map<std::string,float>::unordered_map((uint64_t)(a1 + 2), a5);
  *((float *)a1 + 12) = a6;
  std::string::basic_string[abi:ne180100]<0>(__str, "token_post_in_cnet_slot");
  std::string::basic_string[abi:ne180100]<0>(v52, "max_post_in_cnet_slot");
  std::string::basic_string[abi:ne180100]<0>(v53, "secondmax_post_in_cnet_slot");
  std::string::basic_string[abi:ne180100]<0>(v54, "num_arcs_in_cnet_slot");
  std::string::basic_string[abi:ne180100]<0>(&v55, "logpost");
  std::string::basic_string[abi:ne180100]<0>(v56, "avg_loglike");
  std::string::basic_string[abi:ne180100]<0>(v57, "hyp_len");
  std::string::basic_string[abi:ne180100]<0>(v58, "token_pos_in_hyp");
  std::string::basic_string[abi:ne180100]<0>(v59, "token_freq");
  std::string::basic_string[abi:ne180100]<0>(v60, "token_logfreq");
  std::string::basic_string[abi:ne180100]<0>(v61, "num_frames");
  std::string::basic_string[abi:ne180100]<0>(v62, "spk_rate");
  v10 = (std::string **)(a1 + 14);
  *((_QWORD *)a1 + 7) = 0;
  *((_QWORD *)a1 + 8) = 0;
  *((_QWORD *)a1 + 9) = 0;
  v46 = (std::string *)(a1 + 14);
  LOBYTE(v47) = 0;
  v11 = (std::string *)operator new(0x120uLL);
  *((_QWORD *)a1 + 9) = v11 + 12;
  *((_QWORD *)a1 + 7) = v11;
  *((_QWORD *)a1 + 8) = v11;
  *((_QWORD *)a1 + 8) = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)(a1 + 18), (__int128 *)__str, &v63, v11);
  v12 = 36;
  do
  {
    if (SHIBYTE(__str[v12 - 1]) < 0)
      operator delete((void *)v48[v12]);
    v12 -= 3;
  }
  while (v12 * 8);
  *((_WORD *)a1 + 40) = 0;
  if (a4 < 0)
  {
    a4 = *a1;
  }
  else if (!a4 || *a1 < a4)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__str);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__str, (uint64_t)"(num_hyps_out > 0) && (num_hyps_out <= num_hyps_in_)", 52);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)__str);
  }
  a1[1] = a4;
  v13 = *(std::string **)a3;
  if (*(_QWORD *)(a3 + 8) != *(_QWORD *)a3)
  {
    v14 = 0;
    v15 = 0;
    v16 = *((_QWORD *)a1 + 8);
    do
    {
      v17 = std::__find_impl[abi:ne180100]<std::string *,std::string *,std::string,std::__identity>(*((_QWORD *)a1 + 7), v16, (unsigned __int8 **)&v13[v14]);
      v16 = *((_QWORD *)a1 + 8);
      if (v17 == v16)
      {
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__str);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__str, (uint64_t)"std::find(feature_list_.begin(), feature_list_.end(), feature_list[i]) != feature_list_.end() && \"Unknown feature provided in the feature list\"", 143);
        kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)__str);
      }
      ++v15;
      v13 = *(std::string **)a3;
      v18 = *(__int128 **)(a3 + 8);
      v19 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v18 - *(_QWORD *)a3) >> 3);
      ++v14;
    }
    while (v19 > v15);
    if (v10 != (std::string **)a3)
      std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((std::vector<std::wstring> *)(a1 + 14), v13, v18, v19);
    goto LABEL_54;
  }
  if (*((_QWORD *)a1 + 4))
    goto LABEL_54;
  __str[0] = 0;
  __str[1] = 0;
  v51 = 0;
  v20 = *((_QWORD *)a1 + 7);
  v21 = *((_QWORD *)a1 + 8);
  if (v21 != v20)
  {
    v22 = 0;
    v23 = 0;
    v24 = 0;
    while (1)
    {
      v25 = (uint64_t **)(v20 + v22);
      v26 = *(unsigned __int8 *)(v20 + v22 + 23);
      if (*(char *)(v20 + v22 + 23) < 0)
      {
        v28 = (std::string::size_type)v25[1];
        if (v28 == 10 && **v25 == 0x72665F6E656B6F74 && *((_WORD *)*v25 + 4) == 29029)
          goto LABEL_48;
        if (v28 != 13)
        {
          if ((unint64_t)v23 >= v51)
            goto LABEL_46;
          goto LABEL_44;
        }
        v27 = *v25;
      }
      else
      {
        if (v26 == 10)
        {
          if (*v25 == (uint64_t *)0x72665F6E656B6F74 && *((_WORD *)v25 + 4) == 29029)
            goto LABEL_48;
LABEL_41:
          if ((unint64_t)v23 >= v51)
            goto LABEL_46;
          goto LABEL_42;
        }
        v27 = (uint64_t *)(v20 + v22);
        if (v26 != 13)
          goto LABEL_41;
      }
      v30 = *v27;
      v31 = *(uint64_t *)((char *)v27 + 5);
      if (v30 == 0x6F6C5F6E656B6F74 && v31 == 0x71657266676F6C5FLL)
        goto LABEL_48;
      if ((unint64_t)v23 >= v51)
      {
LABEL_46:
        v23 = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)__str, (__int128 *)v25);
        goto LABEL_47;
      }
      if ((v26 & 0x80) != 0)
      {
        v28 = *(_QWORD *)(v20 + v22 + 8);
LABEL_44:
        std::string::__init_copy_ctor_external(v23, (const std::string::value_type *)*v25, v28);
        goto LABEL_45;
      }
LABEL_42:
      v34 = *(_OWORD *)v25;
      v23->__r_.__value_.__r.__words[2] = (std::string::size_type)v25[2];
      *(_OWORD *)&v23->__r_.__value_.__l.__data_ = v34;
LABEL_45:
      ++v23;
LABEL_47:
      __str[1] = v23;
      v20 = *((_QWORD *)a1 + 7);
      v21 = *((_QWORD *)a1 + 8);
LABEL_48:
      ++v24;
      v22 += 24;
      if (0xAAAAAAAAAAAAAAABLL * ((v21 - v20) >> 3) <= v24)
        goto LABEL_51;
    }
  }
  v23 = 0;
LABEL_51:
  if (v10 != __str)
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((std::vector<std::wstring> *)(a1 + 14), __str[0], (__int128 *)v23, 0xAAAAAAAAAAAAAAABLL * (((char *)v23 - (char *)__str[0]) >> 3));
  v46 = (std::string *)__str;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v46);
LABEL_54:
  v35 = std::__find_impl[abi:ne180100]<std::string *,std::string *,char [11],std::__identity>(*((unsigned __int8 **)a1 + 7), *((unsigned __int8 **)a1 + 8), "token_freq");
  v36 = (unsigned __int8 *)*((_QWORD *)a1 + 8);
  if (v35 == v36
    && (v37 = std::__find_impl[abi:ne180100]<std::string *,std::string *,char [14],std::__identity>(*((unsigned __int8 **)a1 + 7), v35, "token_logfreq"), v36 = (unsigned __int8 *)*((_QWORD *)a1 + 8), v37 == v36))
  {
    v36 = v37;
  }
  else if (!*((_QWORD *)a1 + 4))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__str);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__str, (uint64_t)"token_unigram_frequencies_.size() > 0", 37);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)__str);
  }
  v38 = std::__find_impl[abi:ne180100]<std::string *,std::string *,char [11],std::__identity>(*((unsigned __int8 **)a1 + 7), v36, "num_frames");
  if (v38 != *((unsigned __int8 **)a1 + 8)
    || std::__find_impl[abi:ne180100]<std::string *,std::string *,char [9],std::__identity>(*((unsigned __int8 **)a1 + 7), v38, "spk_rate") != *((unsigned __int8 **)a1 + 8))
  {
    *((_BYTE *)a1 + 80) = 1;
  }
  std::string::basic_string[abi:ne180100]<0>(__str, "token_post_in_cnet_slot");
  std::string::basic_string[abi:ne180100]<0>(v52, "max_post_in_cnet_slot");
  std::string::basic_string[abi:ne180100]<0>(v53, "secondmax_post_in_cnet_slot");
  std::string::basic_string[abi:ne180100]<0>(v54, "num_arcs_in_cnet_slot");
  v46 = 0;
  v47 = 0;
  v48[0] = 0;
  v48[1] = &v46;
  v49 = 0;
  v46 = (std::string *)operator new(0x60uLL);
  v47 = v46;
  v48[0] = v46 + 4;
  v39 = 0;
  v47 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)v48, (__int128 *)__str, &v55, v46);
  do
  {
    if (SHIBYTE(v54[v39 + 2]) < 0)
      operator delete((void *)v54[v39]);
    v39 -= 3;
  }
  while (v39 != -12);
  v40 = v46;
  if (v47 != v46)
  {
    v41 = 0;
    v42 = 0;
    v43 = *((_QWORD *)a1 + 8);
    while (1)
    {
      v44 = std::__find_impl[abi:ne180100]<std::string *,std::string *,std::string,std::__identity>(*((_QWORD *)a1 + 7), v43, (unsigned __int8 **)&v40[v41]);
      if (v44 != *((_QWORD *)a1 + 8))
        break;
      v43 = v44;
      ++v42;
      v40 = v46;
      ++v41;
      if (0xAAAAAAAAAAAAAAABLL * (((char *)v47 - (char *)v46) >> 3) <= v42)
        goto LABEL_70;
    }
    *((_BYTE *)a1 + 81) = 1;
  }
LABEL_70:
  __str[0] = (std::string *)&v46;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__str);
  return a1;
}

void sub_1AD90B4F8(void *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  JUMPOUT(0x1AD90B520);
}

void kaldi::quasar::ConfidenceFeatureExtractor<std::string>::GetConfidenceFeaturesFromNBest(uint64_t a1, uint64_t *a2, uint64_t a3, int a4, uint64_t *a5)
{
  unint64_t v5;
  uint64_t i;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  void ***v15;
  uint64_t v16;
  void ***v17;
  uint64_t v18;
  void ***v19;
  uint64_t v20;
  void ***v21;
  uint64_t v22;
  void ***v23;
  uint64_t v24;
  void ***v25;
  uint64_t v26;
  void ***v27;
  uint64_t v28;
  uint64_t *v29;
  void ***v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unsigned __int8 *v44;
  float TokenWeight;
  unsigned __int8 *v46;
  unsigned __int8 *v47;
  void **v48;
  void **v49;
  unsigned __int8 *v50;
  unsigned __int8 *v51;
  unsigned __int8 *v52;
  unsigned __int8 *v53;
  unsigned __int8 *v54;
  unsigned __int8 *v55;
  _QWORD *v56;
  uint64_t v57;
  _QWORD *v58;
  uint64_t v59;
  _QWORD *v60;
  uint64_t v61;
  int v62;
  uint64_t v63;
  uint64_t v64;
  _QWORD *v65;
  void *v68[3];
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  void *v72;
  void *v73;
  uint64_t v74;
  int v75;
  _QWORD v76[3];
  _QWORD *v77;
  _QWORD v78[3];
  _QWORD *v79;
  void *__p;
  _BYTE v81[15];
  char v82;
  _BYTE *v83;
  _BYTE v84[24];
  _BYTE *v85;
  void *v86;
  void *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  void **v91;
  void **v92;
  uint64_t *v93;
  void ***v94;
  uint64_t v95;

  v95 = *MEMORY[0x1E0C80C00];
  v75 = a4;
  v5 = 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 3);
  if (v5 != *(_DWORD *)a1)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v91);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(&v91, "nbest_hyps.size() == num_hyps_in_");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v91);
  }
  if (v5 != (uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 2)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v91);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(&v91, "nbest_loglikes.size() == num_hyps_in_");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v91);
  }
  if (a4 <= 0 && *(_BYTE *)(a1 + 80))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v91);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(&v91, "num_frames > 0");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v91);
  }
  v9 = *a5;
  for (i = a5[1]; i != v9; i = kaldi::Matrix<float>::~Matrix(i - 40))
    ;
  a5[1] = v9;
  if (*(int *)(a1 + 4) >= 1)
  {
    v10 = 0;
    v11 = 0;
    do
    {
      kaldi::Matrix<float>::Matrix((uint64_t)&v91, -1431655765 * ((*(_QWORD *)(*a2 + v10 + 8) - *(_QWORD *)(*a2 + v10)) >> 3), -1431655765 * ((*(_QWORD *)(a1 + 64) - *(_QWORD *)(a1 + 56)) >> 3), 0, 0);
      v12 = a5[1];
      if (v12 >= a5[2])
      {
        v13 = std::vector<kaldi::Matrix<float>>::__push_back_slow_path<kaldi::Matrix<float>>(a5, (uint64_t)&v91);
        v14 = a5;
      }
      else
      {
        kaldi::Matrix<float>::Matrix(a5[1], &v91);
        v13 = v12 + 40;
        v14 = a5;
        a5[1] = v12 + 40;
      }
      v14[1] = v13;
      kaldi::Matrix<float>::~Matrix((uint64_t)&v91);
      ++v11;
      v10 += 24;
    }
    while (v11 < *(int *)(a1 + 4));
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "hyp_len");
  v91 = (void **)&unk_1E5D3D988;
  v92 = (void **)a2;
  v94 = &v91;
  kaldi::quasar::ConfidenceFeatureExtractor<std::string>::ExtractFeature(a1, (unsigned __int8 **)&__p, (uint64_t)&v91, a2, a5);
  v15 = v94;
  if (v94 == &v91)
  {
    v16 = 4;
    v15 = &v91;
  }
  else
  {
    if (!v94)
      goto LABEL_19;
    v16 = 5;
  }
  ((void (*)(void))(*v15)[v16])();
LABEL_19:
  if (v82 < 0)
    operator delete(__p);
  std::string::basic_string[abi:ne180100]<0>(&__p, "token_pos_in_hyp");
  v91 = (void **)&unk_1E5D3D720;
  v94 = &v91;
  kaldi::quasar::ConfidenceFeatureExtractor<std::string>::ExtractFeature(a1, (unsigned __int8 **)&__p, (uint64_t)&v91, a2, a5);
  v17 = v94;
  if (v94 == &v91)
  {
    v18 = 4;
    v17 = &v91;
  }
  else
  {
    if (!v94)
      goto LABEL_26;
    v18 = 5;
  }
  ((void (*)(void))(*v17)[v18])();
LABEL_26:
  if (v82 < 0)
    operator delete(__p);
  std::string::basic_string[abi:ne180100]<0>(&__p, "token_freq");
  v91 = (void **)&unk_1E5D3D778;
  v92 = (void **)a1;
  v93 = a2;
  v94 = &v91;
  kaldi::quasar::ConfidenceFeatureExtractor<std::string>::ExtractFeature(a1, (unsigned __int8 **)&__p, (uint64_t)&v91, a2, a5);
  v19 = v94;
  if (v94 == &v91)
  {
    v20 = 4;
    v19 = &v91;
  }
  else
  {
    if (!v94)
      goto LABEL_33;
    v20 = 5;
  }
  ((void (*)(void))(*v19)[v20])();
LABEL_33:
  if (v82 < 0)
    operator delete(__p);
  std::string::basic_string[abi:ne180100]<0>(&__p, "token_logfreq");
  v91 = (void **)&unk_1E5D3D7D0;
  v92 = (void **)a1;
  v93 = a2;
  v94 = &v91;
  kaldi::quasar::ConfidenceFeatureExtractor<std::string>::ExtractFeature(a1, (unsigned __int8 **)&__p, (uint64_t)&v91, a2, a5);
  v21 = v94;
  if (v94 == &v91)
  {
    v22 = 4;
    v21 = &v91;
  }
  else
  {
    if (!v94)
      goto LABEL_40;
    v22 = 5;
  }
  ((void (*)(void))(*v21)[v22])();
LABEL_40:
  if (v82 < 0)
    operator delete(__p);
  std::string::basic_string[abi:ne180100]<0>(&__p, "num_frames");
  v91 = (void **)&unk_1E5D3D828;
  v92 = (void **)&v75;
  v94 = &v91;
  kaldi::quasar::ConfidenceFeatureExtractor<std::string>::ExtractFeature(a1, (unsigned __int8 **)&__p, (uint64_t)&v91, a2, a5);
  v23 = v94;
  if (v94 == &v91)
  {
    v24 = 4;
    v23 = &v91;
  }
  else
  {
    if (!v94)
      goto LABEL_47;
    v24 = 5;
  }
  ((void (*)(void))(*v23)[v24])();
LABEL_47:
  if (v82 < 0)
    operator delete(__p);
  std::string::basic_string[abi:ne180100]<0>(&__p, "spk_rate");
  v91 = (void **)&unk_1E5D3D880;
  v92 = (void **)a2;
  v93 = (uint64_t *)&v75;
  v94 = &v91;
  kaldi::quasar::ConfidenceFeatureExtractor<std::string>::ExtractFeature(a1, (unsigned __int8 **)&__p, (uint64_t)&v91, a2, a5);
  v25 = v94;
  if (v94 == &v91)
  {
    v26 = 4;
    v25 = &v91;
  }
  else
  {
    if (!v94)
      goto LABEL_54;
    v26 = 5;
  }
  ((void (*)(void))(*v25)[v26])();
LABEL_54:
  if (v82 < 0)
    operator delete(__p);
  std::string::basic_string[abi:ne180100]<0>(&__p, "avg_loglike");
  v91 = (void **)&unk_1E5D3D8D8;
  v92 = (void **)a3;
  v93 = a2;
  v94 = &v91;
  kaldi::quasar::ConfidenceFeatureExtractor<std::string>::ExtractFeature(a1, (unsigned __int8 **)&__p, (uint64_t)&v91, a2, a5);
  v27 = v94;
  if (v94 == &v91)
  {
    v28 = 4;
    v27 = &v91;
  }
  else
  {
    if (!v94)
      goto LABEL_61;
    v28 = 5;
  }
  ((void (*)(void))(*v27)[v28])();
LABEL_61:
  if (v82 < 0)
    operator delete(__p);
  v72 = 0;
  v73 = 0;
  v74 = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&v72, *(const void **)a3, *(_QWORD *)(a3 + 8), (uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 2);
  kaldi::quasar::ApplySoftMax((float **)&v72);
  std::string::basic_string[abi:ne180100]<0>(&__p, "logpost");
  v91 = (void **)&unk_1E5D3D930;
  v92 = &v72;
  v94 = &v91;
  v29 = a5;
  kaldi::quasar::ConfidenceFeatureExtractor<std::string>::ExtractFeature(a1, (unsigned __int8 **)&__p, (uint64_t)&v91, a2, a5);
  v30 = v94;
  if (v94 == &v91)
  {
    v31 = 4;
    v30 = &v91;
  }
  else
  {
    if (!v94)
      goto LABEL_68;
    v31 = 5;
  }
  ((void (*)(void))(*v30)[v31])();
LABEL_68:
  if (v82 < 0)
    operator delete(__p);
  if (!*(_BYTE *)(a1 + 81))
    goto LABEL_123;
  v78[0] = &unk_1E5D3D670;
  v79 = v78;
  v76[0] = &unk_1E5D3D6C8;
  v77 = v76;
  kaldi::quasar::ConfusionNetwork<std::string>::ConfusionNetwork(&__p, a2, &v72, v78, v76);
  v32 = v77;
  if (v77 == v76)
  {
    v33 = 4;
    v32 = v76;
  }
  else
  {
    if (!v77)
      goto LABEL_76;
    v33 = 5;
  }
  (*(void (**)(void))(*v32 + 8 * v33))();
LABEL_76:
  v34 = v79;
  if (v79 == v78)
  {
    v35 = 4;
    v34 = v78;
  }
  else
  {
    if (!v79)
      goto LABEL_81;
    v35 = 5;
  }
  (*(void (**)(void))(*v34 + 8 * v35))();
LABEL_81:
  v69 = 0;
  v70 = 0;
  v71 = 0;
  std::vector<kaldi::quasar::ConfusionNetworkSlot<std::string>>::__init_with_size[abi:ne180100]<kaldi::quasar::ConfusionNetworkSlot<std::string>*,kaldi::quasar::ConfusionNetworkSlot<std::string>*>(&v69, v89, v90, 0x2E8BA2E8BA2E8BA3 * ((v90 - v89) >> 4));
  v36 = *(int *)(a1 + 4);
  v91 = 0;
  std::vector<unsigned long>::vector(v68, v36, &v91);
  v38 = v69;
  v37 = v70;
  if (v70 != v69)
  {
    v39 = 0;
    LODWORD(v40) = *(_DWORD *)(a1 + 4);
    do
    {
      if ((int)v40 >= 1)
      {
        v41 = 0;
        v42 = 0;
        v43 = 16;
        do
        {
          if ((kaldi::quasar::ConfusionNetworkSlot<std::string>::HasTokenFromSequence(v69 + 176 * v39, v42) & 1) != 0)
          {
            if (!kaldi::quasar::ConfusionNetworkSlot<std::string>::HasToken(v69 + 176 * v39, *(_QWORD *)(*a2 + v41) + 24 * *((_QWORD *)v68[0] + v42)))
            {
              kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v91);
              v60 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v91, (uint64_t)"Hypothesis token (", 18);
              v61 = *(_QWORD *)(*a2 + v41) + 24 * *((_QWORD *)v68[0] + v42);
              v62 = *(char *)(v61 + 23);
              if (v62 >= 0)
                v63 = *(_QWORD *)(*a2 + v41) + 24 * *((_QWORD *)v68[0] + v42);
              else
                v63 = *(_QWORD *)v61;
              if (v62 >= 0)
                v64 = *(unsigned __int8 *)(v61 + 23);
              else
                v64 = *(_QWORD *)(v61 + 8);
              v65 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v60, v63, v64);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v65, (uint64_t)") does not match any arc in the confusion network slot", 54);
              kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v91);
            }
            v44 = std::__find_impl[abi:ne180100]<std::string *,std::string *,char [24],std::__identity>(*(unsigned __int8 **)(a1 + 56), *(unsigned __int8 **)(a1 + 64), "token_post_in_cnet_slot");
            if (v44 == *(unsigned __int8 **)(a1 + 64))
            {
              v46 = *(unsigned __int8 **)(a1 + 56);
            }
            else
            {
              TokenWeight = kaldi::quasar::ConfusionNetworkSlot<std::string>::GetTokenWeight(v69 + 176 * v39, *(_QWORD *)(*a2 + v41) + 24 * *((_QWORD *)v68[0] + v42));
              v46 = *(unsigned __int8 **)(a1 + 56);
              *(float *)(*(_QWORD *)(*v29 + v43 - 16)
                       + 4 * (int)(*(_DWORD *)(*v29 + v43) * *((_QWORD *)v68[0] + v42))
                       + 4 * (int)(-1431655765 * ((unint64_t)(v44 - v46) >> 3))) = TokenWeight;
              v44 = *(unsigned __int8 **)(a1 + 64);
            }
            v47 = std::__find_impl[abi:ne180100]<std::string *,std::string *,char [22],std::__identity>(v46, v44, "max_post_in_cnet_slot");
            if (v47 == *(unsigned __int8 **)(a1 + 64))
            {
              v48 = 0;
              v49 = 0;
              v50 = *(unsigned __int8 **)(a1 + 56);
            }
            else
            {
              kaldi::quasar::ConfusionNetworkSlot<std::string>::GetTopWeights(v69 + 176 * v39, 2uLL, &v91, 0.0);
              v49 = v91;
              v48 = v92;
              v50 = *(unsigned __int8 **)(a1 + 56);
              *(_DWORD *)(*(_QWORD *)(*a5 + v43 - 16)
                        + 4 * (int)(*(_DWORD *)(*a5 + v43) * *((_QWORD *)v68[0] + v42))
                        + 4 * (int)(-1431655765 * ((unint64_t)(v47 - v50) >> 3))) = *(_DWORD *)v91;
              v47 = *(unsigned __int8 **)(a1 + 64);
            }
            v51 = std::__find_impl[abi:ne180100]<std::string *,std::string *,char [28],std::__identity>(v50, v47, "secondmax_post_in_cnet_slot");
            v52 = v51;
            v53 = *(unsigned __int8 **)(a1 + 64);
            if (v51 == v53)
            {
              v54 = *(unsigned __int8 **)(a1 + 56);
              v53 = v51;
              v29 = a5;
            }
            else
            {
              if ((unint64_t)((char *)v48 - (char *)v49) > 7)
              {
                v29 = a5;
              }
              else
              {
                kaldi::quasar::ConfusionNetworkSlot<std::string>::GetTopWeights(v69 + 176 * v39, 2uLL, &v91, 0.0);
                v29 = a5;
                if (v49)
                  operator delete(v49);
                v49 = v91;
                v53 = *(unsigned __int8 **)(a1 + 64);
              }
              v54 = *(unsigned __int8 **)(a1 + 56);
              *(_DWORD *)(*(_QWORD *)(*v29 + v43 - 16)
                        + 4 * (int)(*(_DWORD *)(*v29 + v43) * *((_QWORD *)v68[0] + v42))
                        + 4 * (int)(-1431655765 * ((unint64_t)(v52 - v54) >> 3))) = *((_DWORD *)v49 + 1);
            }
            v55 = std::__find_impl[abi:ne180100]<std::string *,std::string *,char [22],std::__identity>(v54, v53, "num_arcs_in_cnet_slot");
            if (v55 != *(unsigned __int8 **)(a1 + 64))
              *(float *)(*(_QWORD *)(*v29 + v43 - 16)
                       + 4 * (int)(*(_DWORD *)(*v29 + v43) * *((_QWORD *)v68[0] + v42))
                       + 4 * (int)(-1431655765 * ((unint64_t)&v55[-*(_QWORD *)(a1 + 56)] >> 3))) = (float)*(int *)(v69 + 176 * v39 + 32);
            if (v49)
              operator delete(v49);
            ++*((_QWORD *)v68[0] + v42);
          }
          ++v42;
          v40 = *(int *)(a1 + 4);
          v41 += 24;
          v43 += 40;
        }
        while (v42 < v40);
        v38 = v69;
        v37 = v70;
      }
      ++v39;
    }
    while (0x2E8BA2E8BA2E8BA3 * ((v37 - v38) >> 4) > v39);
  }
  if (v68[0])
  {
    v68[1] = v68[0];
    operator delete(v68[0]);
  }
  v91 = (void **)&v69;
  std::vector<kaldi::quasar::ConfusionNetworkSlot<std::string>>::__destroy_vector::operator()[abi:ne180100](&v91);
  v91 = (void **)&v89;
  std::vector<kaldi::quasar::ConfusionNetworkSlot<std::string>>::__destroy_vector::operator()[abi:ne180100](&v91);
  v91 = (void **)&v88;
  std::vector<std::vector<std::string>>::__destroy_vector::operator()[abi:ne180100](&v91);
  if (v86)
  {
    v87 = v86;
    operator delete(v86);
  }
  v56 = v85;
  if (v85 == v84)
  {
    v57 = 4;
    v56 = v84;
    goto LABEL_117;
  }
  if (v85)
  {
    v57 = 5;
LABEL_117:
    (*(void (**)(void))(*v56 + 8 * v57))();
  }
  v58 = v83;
  if (v83 == v81)
  {
    v59 = 4;
    v58 = v81;
  }
  else
  {
    if (!v83)
      goto LABEL_123;
    v59 = 5;
  }
  (*(void (**)(void))(*v58 + 8 * v59))();
LABEL_123:
  if (v72)
  {
    v73 = v72;
    operator delete(v72);
  }
}

void sub_1AD90C23C(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

uint64_t kaldi::quasar::ConfidenceFeatureExtractor<std::string>::ExtractFeature(uint64_t a1, unsigned __int8 **a2, uint64_t a3, uint64_t *a4, _QWORD *a5)
{
  uint64_t result;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  int v15;

  result = std::__find_impl[abi:ne180100]<std::string *,std::string *,std::string,std::__identity>(*(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), a2);
  if (result != *(_QWORD *)(a1 + 64))
  {
    v10 = *(_DWORD *)(a1 + 4);
    if (v10 >= 1)
    {
      v11 = result;
      v12 = 0;
      v13 = *a4;
      do
      {
        if (*(_QWORD *)(v13 + 24 * v12 + 8) != *(_QWORD *)(v13 + 24 * v12))
        {
          v14 = 0;
          do
          {
            result = std::function<float ()(int,int)>::operator()(a3, v12, v14);
            *(_DWORD *)(*(_QWORD *)(*a5 + 40 * v12)
                      + 4 * *(_DWORD *)(*a5 + 40 * v12 + 16) * (int)v14++
                      + 4 * (int)(-1431655765 * ((unint64_t)(v11 - *(_QWORD *)(a1 + 56)) >> 3))) = v15;
            v13 = *a4;
          }
          while (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(*a4 + 24 * v12 + 8) - *(_QWORD *)(*a4 + 24 * v12)) >> 3) > v14);
          v10 = *(_DWORD *)(a1 + 4);
        }
        ++v12;
      }
      while (v12 < v10);
    }
  }
  return result;
}

void kaldi::quasar::ApplySoftMax(float **a1)
{
  float *v1;
  float *v2;
  uint64_t v3;
  BOOL v4;
  float *v5;
  float v6;
  float *v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float *v12;
  float v13;

  v1 = *a1;
  v2 = a1[1];
  v3 = (uint64_t)(*a1 + 1);
  v4 = *a1 == v2 || v3 == (_QWORD)v2;
  v5 = *a1;
  if (!v4)
  {
    v6 = *v1;
    v5 = *a1;
    v7 = *a1 + 1;
    do
    {
      v8 = *v7++;
      v9 = v8;
      if (v6 < v8)
      {
        v6 = v9;
        v5 = (float *)v3;
      }
      v3 = (uint64_t)v7;
    }
    while (v7 != v2);
  }
  if (v1 != v2)
  {
    v10 = *v5;
    v11 = 0.0;
    v12 = *a1;
    do
    {
      v13 = expf(*v12 - v10);
      v11 = v11 + v13;
      *v12++ = v13;
    }
    while (v12 != v2);
    do
    {
      *v1 = *v1 / v11;
      ++v1;
    }
    while (v1 != v2);
  }
}

uint64_t kaldi::quasar::ConfusionNetwork<std::string>::~ConfusionNetwork(uint64_t a1)
{
  void *v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  void **v8;

  v8 = (void **)(a1 + 120);
  std::vector<kaldi::quasar::ConfusionNetworkSlot<std::string>>::__destroy_vector::operator()[abi:ne180100](&v8);
  v8 = (void **)(a1 + 96);
  std::vector<std::vector<std::string>>::__destroy_vector::operator()[abi:ne180100](&v8);
  v2 = *(void **)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    operator delete(v2);
  }
  v3 = *(_QWORD **)(a1 + 64);
  if (v3 == (_QWORD *)(a1 + 40))
  {
    v4 = 4;
    v3 = (_QWORD *)(a1 + 40);
  }
  else
  {
    if (!v3)
      goto LABEL_8;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_8:
  v5 = *(_QWORD **)(a1 + 32);
  if (v5 == (_QWORD *)(a1 + 8))
  {
    v6 = 4;
    v5 = (_QWORD *)(a1 + 8);
    goto LABEL_12;
  }
  if (v5)
  {
    v6 = 5;
LABEL_12:
    (*(void (**)(void))(*v5 + 8 * v6))();
  }
  return a1;
}

uint64_t std::function<float ()(int,int)>::operator()(uint64_t a1, int a2, int a3)
{
  uint64_t v3;
  int v5;
  int v6;

  v6 = a2;
  v5 = a3;
  v3 = *(_QWORD *)(a1 + 24);
  if (!v3)
    std::__throw_bad_function_call[abi:ne180100]();
  return (*(uint64_t (**)(uint64_t, int *, int *))(*(_QWORD *)v3 + 48))(v3, &v6, &v5);
}

float kaldi::quasar::ConfidenceFeatureExtractor<std::string>::GetUnigramTokenFrequency(uint64_t a1, unsigned __int8 *a2)
{
  _QWORD *v4;
  unsigned __int8 *v5;
  unsigned __int8 *v6;

  v4 = (_QWORD *)(a1 + 8);
  if (std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>((_QWORD *)(a1 + 8), a2))
  {
    v5 = std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>(v4, a2);
    if (!v5)
      std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
    v6 = v5 + 40;
  }
  else
  {
    v6 = (unsigned __int8 *)(a1 + 48);
  }
  return *(float *)v6;
}

void kaldi::quasar::ReadUnigramFrequencies<std::string>(uint64_t a1, uint64_t a2)
{
  std::locale::__imp *v3;
  std::locale::__imp *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  const std::locale::facet *v8;
  unsigned __int8 v9;
  _QWORD *v10;
  void **v11;
  double v12;
  float *v13;
  float v14;
  std::string __p;
  void *v16[2];
  uint64_t v17;
  std::string v18;
  std::locale v19;
  uint64_t v20;
  uint64_t v21;
  _BYTE v22[56];
  void *v23;
  char v24;
  uint64_t v25;
  std::string v26;
  _BYTE v27[14];
  char v28;
  std::string *p_p;

  v28 = 0;
  kaldi::Input::Input(v27, a1, &v28);
  if (v28)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v19);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v19, (uint64_t)"!binary_in && \"Not expecting a binary file.\"", 44);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v19);
  }
  memset(&v26, 0, sizeof(v26));
  v3 = (std::locale::__imp *)*MEMORY[0x1E0DE4F50];
  v4 = *(std::locale::__imp **)(MEMORY[0x1E0DE4F50] + 64);
  v5 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
  v6 = MEMORY[0x1E0DE4FB8] + 16;
  while (1)
  {
    v7 = (_QWORD *)kaldi::Input::Stream((kaldi::Input *)v27);
    std::ios_base::getloc((const std::ios_base *)((char *)v7 + *(_QWORD *)(*v7 - 24)));
    v8 = std::locale::use_facet(&v19, MEMORY[0x1E0DE4A90]);
    v9 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v8->__vftable[2].~facet_0)(v8, 10);
    std::locale::~locale(&v19);
    v10 = std::getline[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v7, (uint64_t)&v26, v9);
    if ((*((_BYTE *)v10 + *(_QWORD *)(*v10 - 24) + 32) & 5) != 0)
      break;
    std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100](&v19, &v26, 24);
    memset(&v18, 0, sizeof(v18));
    v16[0] = 0;
    v16[1] = 0;
    v17 = 0;
    std::getline[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v19, (uint64_t)&v18, 0x20u);
    if (*(_DWORD *)&v22[*((_QWORD *)v19.__locale_ - 3)])
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"ss.good()", 9);
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&__p);
    }
    std::getline[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v19, (uint64_t)v16, 0x20u);
    if (v17 >= 0)
      v11 = v16;
    else
      v11 = (void **)v16[0];
    v12 = atof((const char *)v11);
    if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&__p, v18.__r_.__value_.__l.__data_, v18.__r_.__value_.__l.__size_);
    else
      __p = v18;
    p_p = &__p;
    v13 = (float *)std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a2, (unsigned __int8 *)&__p, (uint64_t)&std::piecewise_construct, (__int128 **)&p_p);
    v14 = v12;
    v13[10] = v14;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v17) < 0)
      operator delete(v16[0]);
    if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v18.__r_.__value_.__l.__data_);
    v19.__locale_ = v3;
    *(std::locale::__imp **)((char *)&v19.__locale_ + *((_QWORD *)v3 - 3)) = v4;
    v20 = v5;
    v21 = v6;
    if (v24 < 0)
      operator delete(v23);
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x1AF44D094](&v25);
  }
  if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v26.__r_.__value_.__l.__data_);
  kaldi::Input::~Input((kaldi::Input *)v27);
}

uint64_t kaldi::quasar::LogisticRegressionModel::LogisticRegressionModel(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)(a1 + 32) = 0u;
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_QWORD *)(a1 + 96) = 0;
  kaldi::quasar::LogisticRegressionModel::Read(a1, a2);
  return a1;
}

void sub_1AD90C940(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;
  void **v3;
  void *v5;

  v5 = *(void **)(v1 + 80);
  if (v5)
  {
    *(_QWORD *)(v1 + 88) = v5;
    operator delete(v5);
  }
  kaldi::quasar::LogisticRegressionModel::LogisticRegressionModel(v3, v2, v1);
  _Unwind_Resume(a1);
}

void kaldi::quasar::LogisticRegressionModel::Read(uint64_t a1, uint64_t a2)
{
  std::locale::__imp *v3;
  uint64_t v4;
  std::locale::__imp *v5;
  uint64_t v6;
  _QWORD *v7;
  const std::locale::facet *v8;
  unsigned __int8 v9;
  _QWORD *v10;
  std::string::value_type **v11;
  std::string::value_type *v12;
  std::string::value_type *v13;
  int v14;
  std::string *v16;
  __int128 v17;
  uint64_t v18;
  void **v19;
  float v20;
  unint64_t v21;
  float *v22;
  float *v23;
  float *v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char *v29;
  void **v30;
  float v31;
  float *v32;
  int v33;
  void **v34;
  float v35;
  unint64_t v36;
  float *v37;
  float *v38;
  float *v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  char *v44;
  float *v45;
  int v46;
  const char *v47;
  const char *v48;
  float v49;
  unint64_t v50;
  float *v51;
  float *v52;
  float *v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  unint64_t v57;
  char *v58;
  float *v59;
  int v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  void **v64;
  void **v65;
  _QWORD v66[34];
  char *v67[2];
  uint64_t v68;
  void *__p[2];
  uint64_t v70;
  void *v71[2];
  uint64_t v72;
  std::string::value_type *__s[2];
  std::string::size_type v74;
  std::locale v75;
  uint64_t v76;
  uint64_t v77;
  _BYTE v78[56];
  void *v79;
  char v80;
  uint64_t v81;
  std::string v82;
  _BYTE v83[15];
  _BYTE v84[9];

  v84[0] = 0;
  kaldi::Input::Input(v83, a2, v84);
  if (v84[0])
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v75);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v75, (uint64_t)"!binary_in && \"Not expecting binary confidence file.\"", 53);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v75);
  }
  memset(&v82, 0, sizeof(v82));
  v65 = (void **)(a1 + 56);
  v64 = (void **)(a1 + 80);
  v3 = (std::locale::__imp *)*MEMORY[0x1E0DE4F50];
  v5 = *(std::locale::__imp **)(MEMORY[0x1E0DE4F50] + 64);
  v4 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
  v6 = MEMORY[0x1E0DE4FB8] + 16;
  while (1)
  {
    v7 = (_QWORD *)kaldi::Input::Stream((kaldi::Input *)v83);
    std::ios_base::getloc((const std::ios_base *)((char *)v7 + *(_QWORD *)(*v7 - 24)));
    v8 = std::locale::use_facet(&v75, MEMORY[0x1E0DE4A90]);
    v9 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v8->__vftable[2].~facet_0)(v8, 10);
    std::locale::~locale(&v75);
    v10 = std::getline[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v7, (uint64_t)&v82, v9);
    if ((*((_BYTE *)v10 + *(_QWORD *)(*v10 - 24) + 32) & 5) != 0)
      break;
    std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100](&v75, &v82, 24);
    __s[0] = 0;
    __s[1] = 0;
    v74 = 0;
    std::getline[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v75, (uint64_t)__s, 0x20u);
    v71[0] = 0;
    v71[1] = 0;
    v72 = 0;
    std::getline[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v75, (uint64_t)v71, 0x20u);
    if (SHIBYTE(v74) < 0)
    {
      v12 = __s[1];
      if (__s[1] != (std::string::value_type *)9)
      {
        v16 = *(std::string **)(a1 + 40);
        if ((unint64_t)v16 >= *(_QWORD *)(a1 + 48))
          goto LABEL_21;
        goto LABEL_19;
      }
      v11 = (std::string::value_type **)__s[0];
    }
    else
    {
      if (SHIBYTE(v74) != 9)
      {
        v16 = *(std::string **)(a1 + 40);
        if ((unint64_t)v16 >= *(_QWORD *)(a1 + 48))
          goto LABEL_21;
        goto LABEL_17;
      }
      v11 = __s;
    }
    v13 = *v11;
    v14 = *((unsigned __int8 *)v11 + 8);
    if (v13 == (std::string::value_type *)0x7065637265746E69 && v14 == 116)
    {
      if (v72 >= 0)
        v30 = v71;
      else
        v30 = (void **)v71[0];
      v31 = atof((const char *)v30);
      *(float *)(a1 + 24) = v31;
      goto LABEL_46;
    }
    v16 = *(std::string **)(a1 + 40);
    if ((unint64_t)v16 >= *(_QWORD *)(a1 + 48))
    {
LABEL_21:
      v18 = std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)(a1 + 32), (__int128 *)__s);
      goto LABEL_22;
    }
    if (SHIBYTE(v74) < 0)
    {
      v12 = __s[1];
LABEL_19:
      std::string::__init_copy_ctor_external(v16, __s[0], (std::string::size_type)v12);
      goto LABEL_20;
    }
LABEL_17:
    v17 = *(_OWORD *)__s;
    v16->__r_.__value_.__r.__words[2] = v74;
    *(_OWORD *)&v16->__r_.__value_.__l.__data_ = v17;
LABEL_20:
    v18 = (uint64_t)&v16[1];
    *(_QWORD *)(a1 + 40) = v16 + 1;
LABEL_22:
    *(_QWORD *)(a1 + 40) = v18;
    if (v72 >= 0)
      v19 = v71;
    else
      v19 = (void **)v71[0];
    v20 = atof((const char *)v19);
    v22 = *(float **)(a1 + 8);
    v21 = *(_QWORD *)(a1 + 16);
    if ((unint64_t)v22 >= v21)
    {
      v24 = *(float **)a1;
      v25 = ((uint64_t)v22 - *(_QWORD *)a1) >> 2;
      v26 = v25 + 1;
      if ((unint64_t)(v25 + 1) >> 62)
        std::vector<int>::__throw_length_error[abi:ne180100]();
      v27 = v21 - (_QWORD)v24;
      if (v27 >> 1 > v26)
        v26 = v27 >> 1;
      if ((unint64_t)v27 >= 0x7FFFFFFFFFFFFFFCLL)
        v28 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v28 = v26;
      if (v28)
      {
        v29 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(a1 + 16, v28);
        v24 = *(float **)a1;
        v22 = *(float **)(a1 + 8);
      }
      else
      {
        v29 = 0;
      }
      v32 = (float *)&v29[4 * v25];
      *v32 = v20;
      v23 = v32 + 1;
      while (v22 != v24)
      {
        v33 = *((_DWORD *)v22-- - 1);
        *((_DWORD *)v32-- - 1) = v33;
      }
      *(_QWORD *)a1 = v32;
      *(_QWORD *)(a1 + 8) = v23;
      *(_QWORD *)(a1 + 16) = &v29[4 * v28];
      if (v24)
        operator delete(v24);
    }
    else
    {
      *v22 = v20;
      v23 = v22 + 1;
    }
    *(_QWORD *)(a1 + 8) = v23;
LABEL_46:
    if (!*(_DWORD *)&v78[*((_QWORD *)v75.__locale_ - 3)])
    {
      __p[0] = 0;
      __p[1] = 0;
      v70 = 0;
      v67[0] = 0;
      v67[1] = 0;
      v68 = 0;
      std::getline[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v75, (uint64_t)__p, 0x20u);
      if (v70 >= 0)
        v34 = __p;
      else
        v34 = (void **)__p[0];
      v35 = atof((const char *)v34);
      v37 = *(float **)(a1 + 64);
      v36 = *(_QWORD *)(a1 + 72);
      if ((unint64_t)v37 >= v36)
      {
        v39 = (float *)*v65;
        v40 = ((char *)v37 - (_BYTE *)*v65) >> 2;
        v41 = v40 + 1;
        if ((unint64_t)(v40 + 1) >> 62)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v42 = v36 - (_QWORD)v39;
        if (v42 >> 1 > v41)
          v41 = v42 >> 1;
        if ((unint64_t)v42 >= 0x7FFFFFFFFFFFFFFCLL)
          v43 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v43 = v41;
        if (v43)
        {
          v44 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(a1 + 72, v43);
          v39 = *(float **)(a1 + 56);
          v37 = *(float **)(a1 + 64);
        }
        else
        {
          v44 = 0;
        }
        v45 = (float *)&v44[4 * v40];
        *v45 = v35;
        v38 = v45 + 1;
        while (v37 != v39)
        {
          v46 = *((_DWORD *)v37-- - 1);
          *((_DWORD *)v45-- - 1) = v46;
        }
        *(_QWORD *)(a1 + 56) = v45;
        *(_QWORD *)(a1 + 64) = v38;
        *(_QWORD *)(a1 + 72) = &v44[4 * v43];
        if (v39)
          operator delete(v39);
      }
      else
      {
        *v37 = v35;
        v38 = v37 + 1;
      }
      *(_QWORD *)(a1 + 64) = v38;
      if (!*(_DWORD *)&v78[*((_QWORD *)v75.__locale_ - 3)])
      {
        std::getline[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v75, (uint64_t)v67, 0x20u);
        if (SHIBYTE(v68) < 0)
        {
          v47 = v67[0];
          v48 = v67[0];
        }
        else
        {
          v47 = (const char *)v67;
          v48 = (const char *)v67;
        }
        if (atof(v48) <= 0.0)
        {
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v66);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v66, (uint64_t)"(atof(feat_std_str.c_str()) > 0) && \"Obtained a zero/negative value for standard deviation\"", 91);
          kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v66);
        }
        v49 = atof(v47);
        v51 = *(float **)(a1 + 88);
        v50 = *(_QWORD *)(a1 + 96);
        if ((unint64_t)v51 >= v50)
        {
          v53 = (float *)*v64;
          v54 = ((char *)v51 - (_BYTE *)*v64) >> 2;
          v55 = v54 + 1;
          if ((unint64_t)(v54 + 1) >> 62)
            std::vector<int>::__throw_length_error[abi:ne180100]();
          v56 = v50 - (_QWORD)v53;
          if (v56 >> 1 > v55)
            v55 = v56 >> 1;
          if ((unint64_t)v56 >= 0x7FFFFFFFFFFFFFFCLL)
            v57 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v57 = v55;
          if (v57)
          {
            v58 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(a1 + 96, v57);
            v53 = *(float **)(a1 + 80);
            v51 = *(float **)(a1 + 88);
          }
          else
          {
            v58 = 0;
          }
          v59 = (float *)&v58[4 * v54];
          *v59 = v49;
          v52 = v59 + 1;
          while (v51 != v53)
          {
            v60 = *((_DWORD *)v51-- - 1);
            *((_DWORD *)v59-- - 1) = v60;
          }
          *(_QWORD *)(a1 + 80) = v59;
          *(_QWORD *)(a1 + 88) = v52;
          *(_QWORD *)(a1 + 96) = &v58[4 * v57];
          if (v53)
            operator delete(v53);
        }
        else
        {
          *v51 = v49;
          v52 = v51 + 1;
        }
        *(_QWORD *)(a1 + 88) = v52;
      }
      if (SHIBYTE(v68) < 0)
        operator delete(v67[0]);
      if (SHIBYTE(v70) < 0)
        operator delete(__p[0]);
    }
    if (SHIBYTE(v72) < 0)
      operator delete(v71[0]);
    if (SHIBYTE(v74) < 0)
      operator delete(__s[0]);
    v75.__locale_ = v3;
    *(std::locale::__imp **)((char *)&v75.__locale_ + *((_QWORD *)v3 - 3)) = v5;
    v76 = v4;
    v77 = v6;
    if (v80 < 0)
      operator delete(v79);
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x1AF44D094](&v81);
  }
  v61 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 40) - *(_QWORD *)(a1 + 32)) >> 3);
  if (v61 != (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 2)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v75);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v75, (uint64_t)"feature_list_.size() == weights_.size()", 39);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v75);
  }
  v62 = *(_QWORD *)(a1 + 64) - *(_QWORD *)(a1 + 56);
  if (v62 && v61 != v62 >> 2)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v75);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v75, (uint64_t)"feature_list_.size() == feature_mean_.size()", 44);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v75);
  }
  v63 = *(_QWORD *)(a1 + 88) - *(_QWORD *)(a1 + 80);
  if (v63 && v61 != v63 >> 2)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v75);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v75, (uint64_t)"feature_list_.size() == feature_std_.size()", 43);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v75);
  }
  if (SHIBYTE(v82.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v82.__r_.__value_.__l.__data_);
  kaldi::Input::~Input((kaldi::Input *)v83);
}

float kaldi::quasar::LogisticRegressionModel::GetOutput(float *a1, uint64_t a2, unsigned __int8 **a3)
{
  unsigned __int8 *v5;
  unsigned __int8 *v6;
  unsigned __int8 *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  float v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  float v15;
  float v16;
  float v17;
  _QWORD v19[34];

  v5 = *a3;
  v6 = a3[1];
  if (v6 != *a3)
  {
    v7 = (unsigned __int8 *)*((_QWORD *)a1 + 4);
    if (v6 - *a3 == *((_QWORD *)a1 + 5) - (_QWORD)v7)
    {
      while (std::equal_to<std::string>::operator()[abi:ne180100]((uint64_t)v19, v5, v7))
      {
        v5 += 24;
        v7 += 24;
        if (v5 == v6)
          goto LABEL_5;
      }
    }
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v19);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v19, "feature_list == feature_list_");
LABEL_19:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v19);
  }
LABEL_5:
  v8 = *(int *)(a2 + 8);
  v9 = *(_QWORD *)a1;
  v10 = *((_QWORD *)a1 + 1);
  if (v8 != (v10 - *(_QWORD *)a1) >> 2)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v19);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v19, "feats.Dim() == weights_.size()");
    goto LABEL_19;
  }
  v11 = a1[6];
  if (v10 != v9)
  {
    v12 = 0;
    v13 = *((_QWORD *)a1 + 7);
    v14 = *((_QWORD *)a1 + 10);
    if (v8 <= 1)
      v8 = 1;
    do
    {
      if (*((_QWORD *)a1 + 8) == v13)
        v15 = 0.0;
      else
        v15 = *(float *)(v13 + 4 * v12);
      if (*((_QWORD *)a1 + 11) == v14)
        v16 = 1.0;
      else
        v16 = *(float *)(v14 + 4 * v12);
      v11 = v11 + (float)((float)(*(float *)(v9 + 4 * v12) * (float)(*(float *)(*(_QWORD *)a2 + 4 * v12) - v15)) / v16);
      ++v12;
    }
    while (v8 != v12);
  }
  v17 = expf(v11);
  return v17 / (float)(v17 + 1.0);
}

uint64_t kaldi::quasar::LogisticRegressionModel::GetOutput(float *a1, uint64_t a2, _QWORD *a3)
{
  int v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  int v10;
  unsigned __int8 *v11[3];
  uint64_t v12;
  int v13;
  int v14;
  uint64_t v15;
  unsigned __int8 **v16;

  v6 = kaldi::MatrixBase<float>::NumRows(a2);
  std::vector<float>::resize((uint64_t)a3, v6);
  result = kaldi::MatrixBase<float>::NumRows(a2);
  if ((int)result >= 1)
  {
    v8 = 0;
    do
    {
      v9 = *(_QWORD *)a2 + 4 * *(_DWORD *)(a2 + 16) * (int)v8;
      v10 = kaldi::MatrixBase<float>::NumCols(a2);
      v14 = 0;
      v15 = 0;
      v12 = v9;
      v13 = v10;
      memset(v11, 0, sizeof(v11));
      *(float *)(*a3 + 4 * v8) = kaldi::quasar::LogisticRegressionModel::GetOutput(a1, (uint64_t)&v12, v11);
      v16 = v11;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v16);
      ++v8;
      result = kaldi::MatrixBase<float>::NumRows(a2);
    }
    while (v8 < (int)result);
  }
  return result;
}

void sub_1AD90D38C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void **a16)
{
  a16 = (void **)&a10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a16);
  _Unwind_Resume(a1);
}

uint64_t kaldi::quasar::LogisticRegressionModel::GetOutput(uint64_t a1, uint64_t a2, unsigned __int8 **a3, _QWORD *a4)
{
  unsigned __int8 *v4;
  unsigned __int8 *v5;
  unsigned __int8 *v6;
  _QWORD v11[34];

  v4 = *a3;
  v5 = a3[1];
  v6 = *(unsigned __int8 **)(a1 + 32);
  if (v5 - *a3 != *(_QWORD *)(a1 + 40) - (_QWORD)v6)
  {
LABEL_6:
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v11);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v11, "feature_list == feature_list_");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v11);
  }
  while (v4 != v5)
  {
    if (!std::equal_to<std::string>::operator()[abi:ne180100]((uint64_t)v11, v4, v6))
      goto LABEL_6;
    v4 += 24;
    v6 += 24;
  }
  return kaldi::quasar::LogisticRegressionModel::GetOutput((float *)a1, a2, a4);
}

uint64_t std::unordered_map<std::string,float>::unordered_map(uint64_t a1, uint64_t a2)
{
  unsigned __int8 *i;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::__rehash<true>(a1, *(_QWORD *)(a2 + 8));
  for (i = *(unsigned __int8 **)(a2 + 16); i; i = *(unsigned __int8 **)i)
    std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,float> const&>(a1, i + 16, (uint64_t)(i + 16));
  return a1;
}

void sub_1AD90D4C8(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,float> const&>(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  unint64_t v3;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  unint64_t v12;
  unsigned __int8 **v13;
  unsigned __int8 *i;
  unint64_t v15;
  float v16;
  float v17;
  _BOOL8 v18;
  unint64_t v19;
  unint64_t v20;
  size_t v21;
  _QWORD *v22;
  unint64_t v23;
  _QWORD v25[3];

  v7 = (_QWORD *)(a1 + 24);
  v8 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  v9 = v8;
  v10 = *(_QWORD *)(a1 + 8);
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      v3 = v8;
      if (v8 >= v10)
        v3 = v8 % v10;
    }
    else
    {
      v3 = (v10 - 1) & v8;
    }
    v13 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v3);
    if (v13)
    {
      for (i = *v13; i; i = *(unsigned __int8 **)i)
      {
        v15 = *((_QWORD *)i + 1);
        if (v15 == v9)
        {
          if ((std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2) & 1) != 0)
            return i;
        }
        else
        {
          if (v12 > 1)
          {
            if (v15 >= v10)
              v15 %= v10;
          }
          else
          {
            v15 &= v10 - 1;
          }
          if (v15 != v3)
            break;
        }
      }
    }
  }
  std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__construct_node_hash<std::pair<std::string const,float> const&>(a1, v9, a3, (uint64_t)v25);
  v16 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v17 = *(float *)(a1 + 32);
  if (!v10 || (float)(v17 * (float)v10) < v16)
  {
    v18 = 1;
    if (v10 >= 3)
      v18 = (v10 & (v10 - 1)) != 0;
    v19 = v18 | (2 * v10);
    v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20)
      v21 = v20;
    else
      v21 = v19;
    std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::__rehash<true>(a1, v21);
    v10 = *(_QWORD *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
        v3 = v9 % v10;
      else
        v3 = v9;
    }
    else
    {
      v3 = (v10 - 1) & v9;
    }
  }
  v22 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v22)
  {
    *(_QWORD *)v25[0] = *v22;
    *v22 = v25[0];
  }
  else
  {
    *(_QWORD *)v25[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v25[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v3) = a1 + 16;
    if (*(_QWORD *)v25[0])
    {
      v23 = *(_QWORD *)(*(_QWORD *)v25[0] + 8);
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v23 >= v10)
          v23 %= v10;
      }
      else
      {
        v23 &= v10 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v23) = v25[0];
    }
  }
  i = (unsigned __int8 *)v25[0];
  ++*v7;
  return i;
}

void sub_1AD90D738(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **__p, uint64_t a11)
{
  if (__p)
    std::__hash_node_destructor<std::allocator<std::__hash_node<std::string,void *>>>::operator()[abi:ne180100]((uint64_t)&a11, __p);
  _Unwind_Resume(exception_object);
}

float std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__construct_node_hash<std::pair<std::string const,float> const&>@<S0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  char *v8;
  std::string *v9;
  float result;

  v7 = a1 + 16;
  v8 = (char *)operator new(0x30uLL);
  *(_QWORD *)(a4 + 8) = v7;
  *(_QWORD *)a4 = v8;
  *(_BYTE *)(a4 + 16) = 0;
  *(_QWORD *)v8 = 0;
  *((_QWORD *)v8 + 1) = a2;
  v9 = (std::string *)(v8 + 16);
  if (*(char *)(a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = *(_OWORD *)a3;
    *((_QWORD *)v8 + 4) = *(_QWORD *)(a3 + 16);
  }
  result = *(float *)(a3 + 24);
  *((float *)v8 + 10) = result;
  *(_BYTE *)(a4 + 16) = 1;
  return result;
}

void sub_1AD90D7E8(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void **v2;
  uint64_t v3;

  *v1 = 0;
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::string,void *>>>::operator()[abi:ne180100](v3, v2);
  _Unwind_Resume(a1);
}

unsigned __int8 *std::__find_impl[abi:ne180100]<std::string *,std::string *,char [11],std::__identity>(unsigned __int8 *a1, unsigned __int8 *a2, char *__s)
{
  unsigned __int8 *v3;
  size_t v6;
  unsigned __int8 *v7;

  v3 = a1;
  if (a1 != a2)
  {
    v6 = strlen(__s);
    while (1)
    {
      if ((char)v3[23] < 0)
      {
        if (v6 == *((_QWORD *)v3 + 1))
        {
          if (v6 == -1)
LABEL_14:
            std::string::__throw_out_of_range[abi:ne180100]();
          v7 = *(unsigned __int8 **)v3;
LABEL_10:
          if (!memcmp(v7, __s, v6))
            return v3;
        }
      }
      else if (v6 == v3[23])
      {
        v7 = v3;
        if (v6 == -1)
          goto LABEL_14;
        goto LABEL_10;
      }
      v3 += 24;
      if (v3 == a2)
        return a2;
    }
  }
  return v3;
}

unsigned __int8 *std::__find_impl[abi:ne180100]<std::string *,std::string *,char [14],std::__identity>(unsigned __int8 *a1, unsigned __int8 *a2, char *__s)
{
  unsigned __int8 *v3;
  size_t v6;
  unsigned __int8 *v7;

  v3 = a1;
  if (a1 != a2)
  {
    v6 = strlen(__s);
    while (1)
    {
      if ((char)v3[23] < 0)
      {
        if (v6 == *((_QWORD *)v3 + 1))
        {
          if (v6 == -1)
LABEL_14:
            std::string::__throw_out_of_range[abi:ne180100]();
          v7 = *(unsigned __int8 **)v3;
LABEL_10:
          if (!memcmp(v7, __s, v6))
            return v3;
        }
      }
      else if (v6 == v3[23])
      {
        v7 = v3;
        if (v6 == -1)
          goto LABEL_14;
        goto LABEL_10;
      }
      v3 += 24;
      if (v3 == a2)
        return a2;
    }
  }
  return v3;
}

unsigned __int8 *std::__find_impl[abi:ne180100]<std::string *,std::string *,char [9],std::__identity>(unsigned __int8 *a1, unsigned __int8 *a2, char *__s)
{
  unsigned __int8 *v3;
  size_t v6;
  unsigned __int8 *v7;

  v3 = a1;
  if (a1 != a2)
  {
    v6 = strlen(__s);
    while (1)
    {
      if ((char)v3[23] < 0)
      {
        if (v6 == *((_QWORD *)v3 + 1))
        {
          if (v6 == -1)
LABEL_14:
            std::string::__throw_out_of_range[abi:ne180100]();
          v7 = *(unsigned __int8 **)v3;
LABEL_10:
          if (!memcmp(v7, __s, v6))
            return v3;
        }
      }
      else if (v6 == v3[23])
      {
        v7 = v3;
        if (v6 == -1)
          goto LABEL_14;
        goto LABEL_10;
      }
      v3 += 24;
      if (v3 == a2)
        return a2;
    }
  }
  return v3;
}

uint64_t std::vector<kaldi::Matrix<float>>::__push_back_slow_path<kaldi::Matrix<float>>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  uint64_t *v17;

  v3 = *a1;
  v4 = 0xCCCCCCCCCCCCCCCDLL * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if (v4 + 1 > 0x666666666666666)
    std::vector<int>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0xCCCCCCCCCCCCCCCDLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x333333333333333)
    v9 = 0x666666666666666;
  else
    v9 = v5;
  v17 = a1 + 2;
  if (v9)
    v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::PronChoice>>(v7, v9);
  else
    v10 = 0;
  v13 = v10;
  v14 = &v10[40 * v4];
  v16 = &v10[40 * v9];
  kaldi::Matrix<float>::Matrix(v14, a2);
  v15 = v14 + 40;
  std::vector<kaldi::Matrix<float>>::__swap_out_circular_buffer(a1, &v13);
  v11 = a1[1];
  std::__split_buffer<kaldi::Matrix<float>>::~__split_buffer((uint64_t)&v13);
  return v11;
}

void sub_1AD90DB04(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<kaldi::Matrix<float>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::__function::__func<kaldi::quasar::ConfidenceFeatureExtractor<std::string>::GetConfidenceFeaturesFromNBest(std::vector<std::vector<std::string>> const&,std::vector<float> const&,int,std::vector<kaldi::Matrix<float>> *)::{lambda(int,int)#1},std::allocator<kaldi::quasar::ConfidenceFeatureExtractor<std::string>::GetConfidenceFeaturesFromNBest(std::vector<std::vector<std::string>> const&,std::vector<float> const&,int,std::vector<kaldi::Matrix<float>> *)::{lambda(int,int)#1}>,float ()(int,int)>::~__func()
{
  JUMPOUT(0x1AF44D190);
}

_QWORD *std::__function::__func<kaldi::quasar::ConfidenceFeatureExtractor<std::string>::GetConfidenceFeaturesFromNBest(std::vector<std::vector<std::string>> const&,std::vector<float> const&,int,std::vector<kaldi::Matrix<float>> *)::{lambda(int,int)#1},std::allocator<kaldi::quasar::ConfidenceFeatureExtractor<std::string>::GetConfidenceFeaturesFromNBest(std::vector<std::vector<std::string>> const&,std::vector<float> const&,int,std::vector<kaldi::Matrix<float>> *)::{lambda(int,int)#1}>,float ()(int,int)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &unk_1E5D3D988;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<kaldi::quasar::ConfidenceFeatureExtractor<std::string>::GetConfidenceFeaturesFromNBest(std::vector<std::vector<std::string>> const&,std::vector<float> const&,int,std::vector<kaldi::Matrix<float>> *)::{lambda(int,int)#1},std::allocator<kaldi::quasar::ConfidenceFeatureExtractor<std::string>::GetConfidenceFeaturesFromNBest(std::vector<std::vector<std::string>> const&,std::vector<float> const&,int,std::vector<kaldi::Matrix<float>> *)::{lambda(int,int)#1}>,float ()(int,int)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &unk_1E5D3D988;
  a2[1] = v2;
  return result;
}

float std::__function::__func<kaldi::quasar::ConfidenceFeatureExtractor<std::string>::GetConfidenceFeaturesFromNBest(std::vector<std::vector<std::string>> const&,std::vector<float> const&,int,std::vector<kaldi::Matrix<float>> *)::{lambda(int,int)#1},std::allocator<kaldi::quasar::ConfidenceFeatureExtractor<std::string>::GetConfidenceFeaturesFromNBest(std::vector<std::vector<std::string>> const&,std::vector<float> const&,int,std::vector<kaldi::Matrix<float>> *)::{lambda(int,int)#1}>,float ()(int,int)>::operator()(uint64_t a1, int *a2)
{
  return (float)(0xAAAAAAAAAAAAAAABLL
               * ((uint64_t)(*(_QWORD *)(**(_QWORD **)(a1 + 8) + 24 * *a2 + 8)
                          - *(_QWORD *)(**(_QWORD **)(a1 + 8) + 24 * *a2)) >> 3));
}

uint64_t std::__function::__func<kaldi::quasar::ConfidenceFeatureExtractor<std::string>::GetConfidenceFeaturesFromNBest(std::vector<std::vector<std::string>> const&,std::vector<float> const&,int,std::vector<kaldi::Matrix<float>> *)::{lambda(int,int)#1},std::allocator<kaldi::quasar::ConfidenceFeatureExtractor<std::string>::GetConfidenceFeaturesFromNBest(std::vector<std::vector<std::string>> const&,std::vector<float> const&,int,std::vector<kaldi::Matrix<float>> *)::{lambda(int,int)#1}>,float ()(int,int)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<kaldi::quasar::ConfidenceFeatureExtractor<std::string>::GetConfidenceFeaturesFromNBest(std::vector<std::vector<std::string>> const&,std::vector<float> const&,int,std::vector<kaldi::Matrix<float>> *)::{lambda(int,int)#1},std::allocator<kaldi::quasar::ConfidenceFeatureExtractor<std::string>::GetConfidenceFeaturesFromNBest(std::vector<std::vector<std::string>> const&,std::vector<float> const&,int,std::vector<kaldi::Matrix<float>> *)::{lambda(int,int)#1}>,float ()(int,int)>::target_type()
{
}

void std::__function::__func<kaldi::quasar::ConfidenceFeatureExtractor<std::string>::GetConfidenceFeaturesFromNBest(std::vector<std::vector<std::string>> const&,std::vector<float> const&,int,std::vector<kaldi::Matrix<float>> *)::{lambda(int,int)#2},std::allocator<kaldi::quasar::ConfidenceFeatureExtractor<std::string>::GetConfidenceFeaturesFromNBest(std::vector<std::vector<std::string>> const&,std::vector<float> const&,int,std::vector<kaldi::Matrix<float>> *)::{lambda(int,int)#2}>,float ()(int,int)>::~__func()
{
  JUMPOUT(0x1AF44D190);
}

_QWORD *std::__function::__func<kaldi::quasar::ConfidenceFeatureExtractor<std::string>::GetConfidenceFeaturesFromNBest(std::vector<std::vector<std::string>> const&,std::vector<float> const&,int,std::vector<kaldi::Matrix<float>> *)::{lambda(int,int)#2},std::allocator<kaldi::quasar::ConfidenceFeatureExtractor<std::string>::GetConfidenceFeaturesFromNBest(std::vector<std::vector<std::string>> const&,std::vector<float> const&,int,std::vector<kaldi::Matrix<float>> *)::{lambda(int,int)#2}>,float ()(int,int)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &unk_1E5D3D720;
  return result;
}

void std::__function::__func<kaldi::quasar::ConfidenceFeatureExtractor<std::string>::GetConfidenceFeaturesFromNBest(std::vector<std::vector<std::string>> const&,std::vector<float> const&,int,std::vector<kaldi::Matrix<float>> *)::{lambda(int,int)#2},std::allocator<kaldi::quasar::ConfidenceFeatureExtractor<std::string>::GetConfidenceFeaturesFromNBest(std::vector<std::vector<std::string>> const&,std::vector<float> const&,int,std::vector<kaldi::Matrix<float>> *)::{lambda(int,int)#2}>,float ()(int,int)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &unk_1E5D3D720;
}

float std::__function::__func<kaldi::quasar::ConfidenceFeatureExtractor<std::string>::GetConfidenceFeaturesFromNBest(std::vector<std::vector<std::string>> const&,std::vector<float> const&,int,std::vector<kaldi::Matrix<float>> *)::{lambda(int,int)#2},std::allocator<kaldi::quasar::ConfidenceFeatureExtractor<std::string>::GetConfidenceFeaturesFromNBest(std::vector<std::vector<std::string>> const&,std::vector<float> const&,int,std::vector<kaldi::Matrix<float>> *)::{lambda(int,int)#2}>,float ()(int,int)>::operator()(uint64_t a1, uint64_t a2, int *a3)
{
  return (float)*a3;
}

uint64_t std::__function::__func<kaldi::quasar::ConfidenceFeatureExtractor<std::string>::GetConfidenceFeaturesFromNBest(std::vector<std::vector<std::string>> const&,std::vector<float> const&,int,std::vector<kaldi::Matrix<float>> *)::{lambda(int,int)#2},std::allocator<kaldi::quasar::ConfidenceFeatureExtractor<std::string>::GetConfidenceFeaturesFromNBest(std::vector<std::vector<std::string>> const&,std::vector<float> const&,int,std::vector<kaldi::Matrix<float>> *)::{lambda(int,int)#2}>,float ()(int,int)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<kaldi::quasar::ConfidenceFeatureExtractor<std::string>::GetConfidenceFeaturesFromNBest(std::vector<std::vector<std::string>> const&,std::vector<float> const&,int,std::vector<kaldi::Matrix<float>> *)::{lambda(int,int)#2},std::allocator<kaldi::quasar::ConfidenceFeatureExtractor<std::string>::GetConfidenceFeaturesFromNBest(std::vector<std::vector<std::string>> const&,std::vector<float> const&,int,std::vector<kaldi::Matrix<float>> *)::{lambda(int,int)#2}>,float ()(int,int)>::target_type()
{
}

void std::__function::__func<kaldi::quasar::ConfidenceFeatureExtractor<std::string>::GetConfidenceFeaturesFromNBest(std::vector<std::vector<std::string>> const&,std::vector<float> const&,int,std::vector<kaldi::Matrix<float>> *)::{lambda(int,int)#3},std::allocator<kaldi::quasar::ConfidenceFeatureExtractor<std::string>::GetConfidenceFeaturesFromNBest(std::vector<std::vector<std::string>> const&,std::vector<float> const&,int,std::vector<kaldi::Matrix<float>> *)::{lambda(int,int)#3}>,float ()(int,int)>::~__func()
{
  JUMPOUT(0x1AF44D190);
}

__n128 std::__function::__func<kaldi::quasar::ConfidenceFeatureExtractor<std::string>::GetConfidenceFeaturesFromNBest(std::vector<std::vector<std::string>> const&,std::vector<float> const&,int,std::vector<kaldi::Matrix<float>> *)::{lambda(int,int)#3},std::allocator<kaldi::quasar::ConfidenceFeatureExtractor<std::string>::GetConfidenceFeaturesFromNBest(std::vector<std::vector<std::string>> const&,std::vector<float> const&,int,std::vector<kaldi::Matrix<float>> *)::{lambda(int,int)#3}>,float ()(int,int)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &unk_1E5D3D778;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<kaldi::quasar::ConfidenceFeatureExtractor<std::string>::GetConfidenceFeaturesFromNBest(std::vector<std::vector<std::string>> const&,std::vector<float> const&,int,std::vector<kaldi::Matrix<float>> *)::{lambda(int,int)#3},std::allocator<kaldi::quasar::ConfidenceFeatureExtractor<std::string>::GetConfidenceFeaturesFromNBest(std::vector<std::vector<std::string>> const&,std::vector<float> const&,int,std::vector<kaldi::Matrix<float>> *)::{lambda(int,int)#3}>,float ()(int,int)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &unk_1E5D3D778;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

float std::__function::__func<kaldi::quasar::ConfidenceFeatureExtractor<std::string>::GetConfidenceFeaturesFromNBest(std::vector<std::vector<std::string>> const&,std::vector<float> const&,int,std::vector<kaldi::Matrix<float>> *)::{lambda(int,int)#3},std::allocator<kaldi::quasar::ConfidenceFeatureExtractor<std::string>::GetConfidenceFeaturesFromNBest(std::vector<std::vector<std::string>> const&,std::vector<float> const&,int,std::vector<kaldi::Matrix<float>> *)::{lambda(int,int)#3}>,float ()(int,int)>::operator()(uint64_t a1, int *a2, int *a3)
{
  return kaldi::quasar::ConfidenceFeatureExtractor<std::string>::GetUnigramTokenFrequency(*(_QWORD *)(a1 + 8), (unsigned __int8 *)(*(_QWORD *)(**(_QWORD **)(a1 + 16) + 24 * *a2) + 24 * *a3));
}

uint64_t std::__function::__func<kaldi::quasar::ConfidenceFeatureExtractor<std::string>::GetConfidenceFeaturesFromNBest(std::vector<std::vector<std::string>> const&,std::vector<float> const&,int,std::vector<kaldi::Matrix<float>> *)::{lambda(int,int)#3},std::allocator<kaldi::quasar::ConfidenceFeatureExtractor<std::string>::GetConfidenceFeaturesFromNBest(std::vector<std::vector<std::string>> const&,std::vector<float> const&,int,std::vector<kaldi::Matrix<float>> *)::{lambda(int,int)#3}>,float ()(int,int)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<kaldi::quasar::ConfidenceFeatureExtractor<std::string>::GetConfidenceFeaturesFromNBest(std::vector<std::vector<std::string>> const&,std::vector<float> const&,int,std::vector<kaldi::Matrix<float>> *)::{lambda(int,int)#3},std::allocator<kaldi::quasar::ConfidenceFeatureExtractor<std::string>::GetConfidenceFeaturesFromNBest(std::vector<std::vector<std::string>> const&,std::vector<float> const&,int,std::vector<kaldi::Matrix<float>> *)::{lambda(int,int)#3}>,float ()(int,int)>::target_type()
{
}

void std::__function::__func<kaldi::quasar::ConfidenceFeatureExtractor<std::string>::GetConfidenceFeaturesFromNBest(std::vector<std::vector<std::string>> const&,std::vector<float> const&,int,std::vector<kaldi::Matrix<float>> *)::{lambda(int,int)#4},std::allocator<kaldi::quasar::ConfidenceFeatureExtractor<std::string>::GetConfidenceFeaturesFromNBest(std::vector<std::vector<std::string>> const&,std::vector<float> const&,int,std::vector<kaldi::Matrix<float>> *)::{lambda(int,int)#4}>,float ()(int,int)>::~__func()
{
  JUMPOUT(0x1AF44D190);
}

__n128 std::__function::__func<kaldi::quasar::ConfidenceFeatureExtractor<std::string>::GetConfidenceFeaturesFromNBest(std::vector<std::vector<std::string>> const&,std::vector<float> const&,int,std::vector<kaldi::Matrix<float>> *)::{lambda(int,int)#4},std::allocator<kaldi::quasar::ConfidenceFeatureExtractor<std::string>::GetConfidenceFeaturesFromNBest(std::vector<std::vector<std::string>> const&,std::vector<float> const&,int,std::vector<kaldi::Matrix<float>> *)::{lambda(int,int)#4}>,float ()(int,int)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &unk_1E5D3D7D0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<kaldi::quasar::ConfidenceFeatureExtractor<std::string>::GetConfidenceFeaturesFromNBest(std::vector<std::vector<std::string>> const&,std::vector<float> const&,int,std::vector<kaldi::Matrix<float>> *)::{lambda(int,int)#4},std::allocator<kaldi::quasar::ConfidenceFeatureExtractor<std::string>::GetConfidenceFeaturesFromNBest(std::vector<std::vector<std::string>> const&,std::vector<float> const&,int,std::vector<kaldi::Matrix<float>> *)::{lambda(int,int)#4}>,float ()(int,int)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &unk_1E5D3D7D0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

float std::__function::__func<kaldi::quasar::ConfidenceFeatureExtractor<std::string>::GetConfidenceFeaturesFromNBest(std::vector<std::vector<std::string>> const&,std::vector<float> const&,int,std::vector<kaldi::Matrix<float>> *)::{lambda(int,int)#4},std::allocator<kaldi::quasar::ConfidenceFeatureExtractor<std::string>::GetConfidenceFeaturesFromNBest(std::vector<std::vector<std::string>> const&,std::vector<float> const&,int,std::vector<kaldi::Matrix<float>> *)::{lambda(int,int)#4}>,float ()(int,int)>::operator()(uint64_t a1, int *a2, int *a3)
{
  float UnigramTokenFrequency;

  UnigramTokenFrequency = kaldi::quasar::ConfidenceFeatureExtractor<std::string>::GetUnigramTokenFrequency(*(_QWORD *)(a1 + 8), (unsigned __int8 *)(*(_QWORD *)(**(_QWORD **)(a1 + 16) + 24 * *a2) + 24 * *a3));
  return logf(UnigramTokenFrequency);
}

uint64_t std::__function::__func<kaldi::quasar::ConfidenceFeatureExtractor<std::string>::GetConfidenceFeaturesFromNBest(std::vector<std::vector<std::string>> const&,std::vector<float> const&,int,std::vector<kaldi::Matrix<float>> *)::{lambda(int,int)#4},std::allocator<kaldi::quasar::ConfidenceFeatureExtractor<std::string>::GetConfidenceFeaturesFromNBest(std::vector<std::vector<std::string>> const&,std::vector<float> const&,int,std::vector<kaldi::Matrix<float>> *)::{lambda(int,int)#4}>,float ()(int,int)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<kaldi::quasar::ConfidenceFeatureExtractor<std::string>::GetConfidenceFeaturesFromNBest(std::vector<std::vector<std::string>> const&,std::vector<float> const&,int,std::vector<kaldi::Matrix<float>> *)::{lambda(int,int)#4},std::allocator<kaldi::quasar::ConfidenceFeatureExtractor<std::string>::GetConfidenceFeaturesFromNBest(std::vector<std::vector<std::string>> const&,std::vector<float> const&,int,std::vector<kaldi::Matrix<float>> *)::{lambda(int,int)#4}>,float ()(int,int)>::target_type()
{
}

void std::__function::__func<kaldi::quasar::ConfidenceFeatureExtractor<std::string>::GetConfidenceFeaturesFromNBest(std::vector<std::vector<std::string>> const&,std::vector<float> const&,int,std::vector<kaldi::Matrix<float>> *)::{lambda(int,int)#5},std::allocator<kaldi::quasar::ConfidenceFeatureExtractor<std::string>::GetConfidenceFeaturesFromNBest(std::vector<std::vector<std::string>> const&,std::vector<float> const&,int,std::vector<kaldi::Matrix<float>> *)::{lambda(int,int)#5}>,float ()(int,int)>::~__func()
{
  JUMPOUT(0x1AF44D190);
}

_QWORD *std::__function::__func<kaldi::quasar::ConfidenceFeatureExtractor<std::string>::GetConfidenceFeaturesFromNBest(std::vector<std::vector<std::string>> const&,std::vector<float> const&,int,std::vector<kaldi::Matrix<float>> *)::{lambda(int,int)#5},std::allocator<kaldi::quasar::ConfidenceFeatureExtractor<std::string>::GetConfidenceFeaturesFromNBest(std::vector<std::vector<std::string>> const&,std::vector<float> const&,int,std::vector<kaldi::Matrix<float>> *)::{lambda(int,int)#5}>,float ()(int,int)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &unk_1E5D3D828;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<kaldi::quasar::ConfidenceFeatureExtractor<std::string>::GetConfidenceFeaturesFromNBest(std::vector<std::vector<std::string>> const&,std::vector<float> const&,int,std::vector<kaldi::Matrix<float>> *)::{lambda(int,int)#5},std::allocator<kaldi::quasar::ConfidenceFeatureExtractor<std::string>::GetConfidenceFeaturesFromNBest(std::vector<std::vector<std::string>> const&,std::vector<float> const&,int,std::vector<kaldi::Matrix<float>> *)::{lambda(int,int)#5}>,float ()(int,int)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &unk_1E5D3D828;
  a2[1] = v2;
  return result;
}

float std::__function::__func<kaldi::quasar::ConfidenceFeatureExtractor<std::string>::GetConfidenceFeaturesFromNBest(std::vector<std::vector<std::string>> const&,std::vector<float> const&,int,std::vector<kaldi::Matrix<float>> *)::{lambda(int,int)#5},std::allocator<kaldi::quasar::ConfidenceFeatureExtractor<std::string>::GetConfidenceFeaturesFromNBest(std::vector<std::vector<std::string>> const&,std::vector<float> const&,int,std::vector<kaldi::Matrix<float>> *)::{lambda(int,int)#5}>,float ()(int,int)>::operator()(uint64_t a1)
{
  return (float)**(int **)(a1 + 8);
}

uint64_t std::__function::__func<kaldi::quasar::ConfidenceFeatureExtractor<std::string>::GetConfidenceFeaturesFromNBest(std::vector<std::vector<std::string>> const&,std::vector<float> const&,int,std::vector<kaldi::Matrix<float>> *)::{lambda(int,int)#5},std::allocator<kaldi::quasar::ConfidenceFeatureExtractor<std::string>::GetConfidenceFeaturesFromNBest(std::vector<std::vector<std::string>> const&,std::vector<float> const&,int,std::vector<kaldi::Matrix<float>> *)::{lambda(int,int)#5}>,float ()(int,int)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<kaldi::quasar::ConfidenceFeatureExtractor<std::string>::GetConfidenceFeaturesFromNBest(std::vector<std::vector<std::string>> const&,std::vector<float> const&,int,std::vector<kaldi::Matrix<float>> *)::{lambda(int,int)#5},std::allocator<kaldi::quasar::ConfidenceFeatureExtractor<std::string>::GetConfidenceFeaturesFromNBest(std::vector<std::vector<std::string>> const&,std::vector<float> const&,int,std::vector<kaldi::Matrix<float>> *)::{lambda(int,int)#5}>,float ()(int,int)>::target_type()
{
}

void std::__function::__func<kaldi::quasar::ConfidenceFeatureExtractor<std::string>::GetConfidenceFeaturesFromNBest(std::vector<std::vector<std::string>> const&,std::vector<float> const&,int,std::vector<kaldi::Matrix<float>> *)::{lambda(int,int)#6},std::allocator<kaldi::quasar::ConfidenceFeatureExtractor<std::string>::GetConfidenceFeaturesFromNBest(std::vector<std::vector<std::string>> const&,std::vector<float> const&,int,std::vector<kaldi::Matrix<float>> *)::{lambda(int,int)#6}>,float ()(int,int)>::~__func()
{
  JUMPOUT(0x1AF44D190);
}

__n128 std::__function::__func<kaldi::quasar::ConfidenceFeatureExtractor<std::string>::GetConfidenceFeaturesFromNBest(std::vector<std::vector<std::string>> const&,std::vector<float> const&,int,std::vector<kaldi::Matrix<float>> *)::{lambda(int,int)#6},std::allocator<kaldi::quasar::ConfidenceFeatureExtractor<std::string>::GetConfidenceFeaturesFromNBest(std::vector<std::vector<std::string>> const&,std::vector<float> const&,int,std::vector<kaldi::Matrix<float>> *)::{lambda(int,int)#6}>,float ()(int,int)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &unk_1E5D3D880;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<kaldi::quasar::ConfidenceFeatureExtractor<std::string>::GetConfidenceFeaturesFromNBest(std::vector<std::vector<std::string>> const&,std::vector<float> const&,int,std::vector<kaldi::Matrix<float>> *)::{lambda(int,int)#6},std::allocator<kaldi::quasar::ConfidenceFeatureExtractor<std::string>::GetConfidenceFeaturesFromNBest(std::vector<std::vector<std::string>> const&,std::vector<float> const&,int,std::vector<kaldi::Matrix<float>> *)::{lambda(int,int)#6}>,float ()(int,int)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &unk_1E5D3D880;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

float std::__function::__func<kaldi::quasar::ConfidenceFeatureExtractor<std::string>::GetConfidenceFeaturesFromNBest(std::vector<std::vector<std::string>> const&,std::vector<float> const&,int,std::vector<kaldi::Matrix<float>> *)::{lambda(int,int)#6},std::allocator<kaldi::quasar::ConfidenceFeatureExtractor<std::string>::GetConfidenceFeaturesFromNBest(std::vector<std::vector<std::string>> const&,std::vector<float> const&,int,std::vector<kaldi::Matrix<float>> *)::{lambda(int,int)#6}>,float ()(int,int)>::operator()(uint64_t a1, int *a2)
{
  return (float)(0xAAAAAAAAAAAAAAABLL
               * ((uint64_t)(*(_QWORD *)(**(_QWORD **)(a1 + 8) + 24 * *a2 + 8)
                          - *(_QWORD *)(**(_QWORD **)(a1 + 8) + 24 * *a2)) >> 3))
       / (float)**(int **)(a1 + 16);
}

uint64_t std::__function::__func<kaldi::quasar::ConfidenceFeatureExtractor<std::string>::GetConfidenceFeaturesFromNBest(std::vector<std::vector<std::string>> const&,std::vector<float> const&,int,std::vector<kaldi::Matrix<float>> *)::{lambda(int,int)#6},std::allocator<kaldi::quasar::ConfidenceFeatureExtractor<std::string>::GetConfidenceFeaturesFromNBest(std::vector<std::vector<std::string>> const&,std::vector<float> const&,int,std::vector<kaldi::Matrix<float>> *)::{lambda(int,int)#6}>,float ()(int,int)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<kaldi::quasar::ConfidenceFeatureExtractor<std::string>::GetConfidenceFeaturesFromNBest(std::vector<std::vector<std::string>> const&,std::vector<float> const&,int,std::vector<kaldi::Matrix<float>> *)::{lambda(int,int)#6},std::allocator<kaldi::quasar::ConfidenceFeatureExtractor<std::string>::GetConfidenceFeaturesFromNBest(std::vector<std::vector<std::string>> const&,std::vector<float> const&,int,std::vector<kaldi::Matrix<float>> *)::{lambda(int,int)#6}>,float ()(int,int)>::target_type()
{
}

void std::__function::__func<kaldi::quasar::ConfidenceFeatureExtractor<std::string>::GetConfidenceFeaturesFromNBest(std::vector<std::vector<std::string>> const&,std::vector<float> const&,int,std::vector<kaldi::Matrix<float>> *)::{lambda(int,int)#7},std::allocator<kaldi::quasar::ConfidenceFeatureExtractor<std::string>::GetConfidenceFeaturesFromNBest(std::vector<std::vector<std::string>> const&,std::vector<float> const&,int,std::vector<kaldi::Matrix<float>> *)::{lambda(int,int)#7}>,float ()(int,int)>::~__func()
{
  JUMPOUT(0x1AF44D190);
}

__n128 std::__function::__func<kaldi::quasar::ConfidenceFeatureExtractor<std::string>::GetConfidenceFeaturesFromNBest(std::vector<std::vector<std::string>> const&,std::vector<float> const&,int,std::vector<kaldi::Matrix<float>> *)::{lambda(int,int)#7},std::allocator<kaldi::quasar::ConfidenceFeatureExtractor<std::string>::GetConfidenceFeaturesFromNBest(std::vector<std::vector<std::string>> const&,std::vector<float> const&,int,std::vector<kaldi::Matrix<float>> *)::{lambda(int,int)#7}>,float ()(int,int)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &unk_1E5D3D8D8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<kaldi::quasar::ConfidenceFeatureExtractor<std::string>::GetConfidenceFeaturesFromNBest(std::vector<std::vector<std::string>> const&,std::vector<float> const&,int,std::vector<kaldi::Matrix<float>> *)::{lambda(int,int)#7},std::allocator<kaldi::quasar::ConfidenceFeatureExtractor<std::string>::GetConfidenceFeaturesFromNBest(std::vector<std::vector<std::string>> const&,std::vector<float> const&,int,std::vector<kaldi::Matrix<float>> *)::{lambda(int,int)#7}>,float ()(int,int)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &unk_1E5D3D8D8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

float std::__function::__func<kaldi::quasar::ConfidenceFeatureExtractor<std::string>::GetConfidenceFeaturesFromNBest(std::vector<std::vector<std::string>> const&,std::vector<float> const&,int,std::vector<kaldi::Matrix<float>> *)::{lambda(int,int)#7},std::allocator<kaldi::quasar::ConfidenceFeatureExtractor<std::string>::GetConfidenceFeaturesFromNBest(std::vector<std::vector<std::string>> const&,std::vector<float> const&,int,std::vector<kaldi::Matrix<float>> *)::{lambda(int,int)#7}>,float ()(int,int)>::operator()(uint64_t a1, int *a2)
{
  return *(float *)(**(_QWORD **)(a1 + 8) + 4 * *a2)
       / (float)(0xAAAAAAAAAAAAAAABLL
               * ((uint64_t)(*(_QWORD *)(**(_QWORD **)(a1 + 16) + 24 * *a2 + 8)
                          - *(_QWORD *)(**(_QWORD **)(a1 + 16) + 24 * *a2)) >> 3));
}

uint64_t std::__function::__func<kaldi::quasar::ConfidenceFeatureExtractor<std::string>::GetConfidenceFeaturesFromNBest(std::vector<std::vector<std::string>> const&,std::vector<float> const&,int,std::vector<kaldi::Matrix<float>> *)::{lambda(int,int)#7},std::allocator<kaldi::quasar::ConfidenceFeatureExtractor<std::string>::GetConfidenceFeaturesFromNBest(std::vector<std::vector<std::string>> const&,std::vector<float> const&,int,std::vector<kaldi::Matrix<float>> *)::{lambda(int,int)#7}>,float ()(int,int)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<kaldi::quasar::ConfidenceFeatureExtractor<std::string>::GetConfidenceFeaturesFromNBest(std::vector<std::vector<std::string>> const&,std::vector<float> const&,int,std::vector<kaldi::Matrix<float>> *)::{lambda(int,int)#7},std::allocator<kaldi::quasar::ConfidenceFeatureExtractor<std::string>::GetConfidenceFeaturesFromNBest(std::vector<std::vector<std::string>> const&,std::vector<float> const&,int,std::vector<kaldi::Matrix<float>> *)::{lambda(int,int)#7}>,float ()(int,int)>::target_type()
{
}

void std::__function::__func<kaldi::quasar::ConfidenceFeatureExtractor<std::string>::GetConfidenceFeaturesFromNBest(std::vector<std::vector<std::string>> const&,std::vector<float> const&,int,std::vector<kaldi::Matrix<float>> *)::{lambda(int,int)#8},std::allocator<kaldi::quasar::ConfidenceFeatureExtractor<std::string>::GetConfidenceFeaturesFromNBest(std::vector<std::vector<std::string>> const&,std::vector<float> const&,int,std::vector<kaldi::Matrix<float>> *)::{lambda(int,int)#8}>,float ()(int,int)>::~__func()
{
  JUMPOUT(0x1AF44D190);
}

_QWORD *std::__function::__func<kaldi::quasar::ConfidenceFeatureExtractor<std::string>::GetConfidenceFeaturesFromNBest(std::vector<std::vector<std::string>> const&,std::vector<float> const&,int,std::vector<kaldi::Matrix<float>> *)::{lambda(int,int)#8},std::allocator<kaldi::quasar::ConfidenceFeatureExtractor<std::string>::GetConfidenceFeaturesFromNBest(std::vector<std::vector<std::string>> const&,std::vector<float> const&,int,std::vector<kaldi::Matrix<float>> *)::{lambda(int,int)#8}>,float ()(int,int)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &unk_1E5D3D930;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<kaldi::quasar::ConfidenceFeatureExtractor<std::string>::GetConfidenceFeaturesFromNBest(std::vector<std::vector<std::string>> const&,std::vector<float> const&,int,std::vector<kaldi::Matrix<float>> *)::{lambda(int,int)#8},std::allocator<kaldi::quasar::ConfidenceFeatureExtractor<std::string>::GetConfidenceFeaturesFromNBest(std::vector<std::vector<std::string>> const&,std::vector<float> const&,int,std::vector<kaldi::Matrix<float>> *)::{lambda(int,int)#8}>,float ()(int,int)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &unk_1E5D3D930;
  a2[1] = v2;
  return result;
}

float std::__function::__func<kaldi::quasar::ConfidenceFeatureExtractor<std::string>::GetConfidenceFeaturesFromNBest(std::vector<std::vector<std::string>> const&,std::vector<float> const&,int,std::vector<kaldi::Matrix<float>> *)::{lambda(int,int)#8},std::allocator<kaldi::quasar::ConfidenceFeatureExtractor<std::string>::GetConfidenceFeaturesFromNBest(std::vector<std::vector<std::string>> const&,std::vector<float> const&,int,std::vector<kaldi::Matrix<float>> *)::{lambda(int,int)#8}>,float ()(int,int)>::operator()(uint64_t a1, int *a2)
{
  return logf(*(float *)(**(_QWORD **)(a1 + 8) + 4 * *a2));
}

uint64_t std::__function::__func<kaldi::quasar::ConfidenceFeatureExtractor<std::string>::GetConfidenceFeaturesFromNBest(std::vector<std::vector<std::string>> const&,std::vector<float> const&,int,std::vector<kaldi::Matrix<float>> *)::{lambda(int,int)#8},std::allocator<kaldi::quasar::ConfidenceFeatureExtractor<std::string>::GetConfidenceFeaturesFromNBest(std::vector<std::vector<std::string>> const&,std::vector<float> const&,int,std::vector<kaldi::Matrix<float>> *)::{lambda(int,int)#8}>,float ()(int,int)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<kaldi::quasar::ConfidenceFeatureExtractor<std::string>::GetConfidenceFeaturesFromNBest(std::vector<std::vector<std::string>> const&,std::vector<float> const&,int,std::vector<kaldi::Matrix<float>> *)::{lambda(int,int)#8},std::allocator<kaldi::quasar::ConfidenceFeatureExtractor<std::string>::GetConfidenceFeaturesFromNBest(std::vector<std::vector<std::string>> const&,std::vector<float> const&,int,std::vector<kaldi::Matrix<float>> *)::{lambda(int,int)#8}>,float ()(int,int)>::target_type()
{
}

void _ZNSt3__110__function6__funcIZN5kaldi6quasar16ConfusionNetworkINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEC1ERKNS_6vectorINSC_ISA_NS8_ISA_EEEENS8_ISE_EEEERKNSC_IfNS8_IfEEEENS_8functionIFSE_SE_EEENSN_IFSA_SA_EEEEd0_UlSE_E_NS8_ISS_EESO_ED0Ev()
{
  JUMPOUT(0x1AF44D190);
}

_QWORD *_ZNKSt3__110__function6__funcIZN5kaldi6quasar16ConfusionNetworkINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEC1ERKNS_6vectorINSC_ISA_NS8_ISA_EEEENS8_ISE_EEEERKNSC_IfNS8_IfEEEENS_8functionIFSE_SE_EEENSN_IFSA_SA_EEEEd0_UlSE_E_NS8_ISS_EESO_E7__cloneEv()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &unk_1E5D3D670;
  return result;
}

void _ZNKSt3__110__function6__funcIZN5kaldi6quasar16ConfusionNetworkINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEC1ERKNS_6vectorINSC_ISA_NS8_ISA_EEEENS8_ISE_EEEERKNSC_IfNS8_IfEEEENS_8functionIFSE_SE_EEENSN_IFSA_SA_EEEEd0_UlSE_E_NS8_ISS_EESO_E7__cloneEPNS0_6__baseISO_EE(uint64_t a1, _QWORD *a2)
{
  *a2 = &unk_1E5D3D670;
}

__n128 _ZNSt3__110__function6__funcIZN5kaldi6quasar16ConfusionNetworkINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEC1ERKNS_6vectorINSC_ISA_NS8_ISA_EEEENS8_ISE_EEEERKNSC_IfNS8_IfEEEENS_8functionIFSE_SE_EEENSN_IFSA_SA_EEEEd0_UlSE_E_NS8_ISS_EESO_EclEOSE_@<Q0>(__int128 *a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v2;
  __int128 v3;
  __n128 result;
  _QWORD v5[3];
  void **v6;

  v2 = *((_QWORD *)a1 + 2);
  v3 = *a1;
  *((_QWORD *)a1 + 1) = 0;
  *((_QWORD *)a1 + 2) = 0;
  *(_QWORD *)a1 = 0;
  *(_OWORD *)a2 = v3;
  *(_QWORD *)(a2 + 16) = v2;
  memset(v5, 0, sizeof(v5));
  v6 = (void **)v5;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v6);
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZN5kaldi6quasar16ConfusionNetworkINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEC1ERKNS_6vectorINSC_ISA_NS8_ISA_EEEENS8_ISE_EEEERKNSC_IfNS8_IfEEEENS_8functionIFSE_SE_EEENSN_IFSA_SA_EEEEd0_UlSE_E_NS8_ISS_EESO_E6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](a2, (uint64_t)&_ZTIZN5kaldi6quasar16ConfusionNetworkINSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEEC1ERKNS2_6vectorINSA_IS8_NS6_IS8_EEEENS6_ISC_EEEERKNSA_IfNS6_IfEEEENS2_8functionIFSC_SC_EEENSL_IFS8_S8_EEEEd0_UlSC_E_))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *_ZNKSt3__110__function6__funcIZN5kaldi6quasar16ConfusionNetworkINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEC1ERKNS_6vectorINSC_ISA_NS8_ISA_EEEENS8_ISE_EEEERKNSC_IfNS8_IfEEEENS_8functionIFSE_SE_EEENSN_IFSA_SA_EEEEd0_UlSE_E_NS8_ISS_EESO_E11target_typeEv()
{
  return &_ZTIZN5kaldi6quasar16ConfusionNetworkINSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEEC1ERKNS2_6vectorINSA_IS8_NS6_IS8_EEEENS6_ISC_EEEERKNSA_IfNS6_IfEEEENS2_8functionIFSC_SC_EEENSL_IFS8_S8_EEEEd0_UlSC_E_;
}

void _ZNSt3__110__function6__funcIZN5kaldi6quasar16ConfusionNetworkINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEC1ERKNS_6vectorINSC_ISA_NS8_ISA_EEEENS8_ISE_EEEERKNSC_IfNS8_IfEEEENS_8functionIFSE_SE_EEENSN_IFSA_SA_EEEEd_UlSA_E_NS8_ISS_EESQ_ED0Ev()
{
  JUMPOUT(0x1AF44D190);
}

_QWORD *_ZNKSt3__110__function6__funcIZN5kaldi6quasar16ConfusionNetworkINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEC1ERKNS_6vectorINSC_ISA_NS8_ISA_EEEENS8_ISE_EEEERKNSC_IfNS8_IfEEEENS_8functionIFSE_SE_EEENSN_IFSA_SA_EEEEd_UlSA_E_NS8_ISS_EESQ_E7__cloneEv()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &unk_1E5D3D6C8;
  return result;
}

void _ZNKSt3__110__function6__funcIZN5kaldi6quasar16ConfusionNetworkINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEC1ERKNS_6vectorINSC_ISA_NS8_ISA_EEEENS8_ISE_EEEERKNSC_IfNS8_IfEEEENS_8functionIFSE_SE_EEENSN_IFSA_SA_EEEEd_UlSA_E_NS8_ISS_EESQ_E7__cloneEPNS0_6__baseISQ_EE(uint64_t a1, _QWORD *a2)
{
  *a2 = &unk_1E5D3D6C8;
}

void _ZNSt3__110__function6__funcIZN5kaldi6quasar16ConfusionNetworkINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEC1ERKNS_6vectorINSC_ISA_NS8_ISA_EEEENS8_ISE_EEEERKNSC_IfNS8_IfEEEENS_8functionIFSE_SE_EEENSN_IFSA_SA_EEEEd_UlSA_E_NS8_ISS_EESQ_EclEOSA_(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a2 = *(_QWORD *)a1;
  *(_QWORD *)(a2 + 8) = v2;
  *(_QWORD *)(a2 + 15) = *(_QWORD *)(a1 + 15);
  LOBYTE(v2) = *(_BYTE *)(a1 + 23);
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = 0;
  *(_BYTE *)(a2 + 23) = v2;
}

uint64_t _ZNKSt3__110__function6__funcIZN5kaldi6quasar16ConfusionNetworkINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEC1ERKNS_6vectorINSC_ISA_NS8_ISA_EEEENS8_ISE_EEEERKNSC_IfNS8_IfEEEENS_8functionIFSE_SE_EEENSN_IFSA_SA_EEEEd_UlSA_E_NS8_ISS_EESQ_E6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](a2, (uint64_t)&_ZTIZN5kaldi6quasar16ConfusionNetworkINSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEEC1ERKNS2_6vectorINSA_IS8_NS6_IS8_EEEENS6_ISC_EEEERKNSA_IfNS6_IfEEEENS2_8functionIFSC_SC_EEENSL_IFS8_S8_EEEEd_UlS8_E_))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *_ZNKSt3__110__function6__funcIZN5kaldi6quasar16ConfusionNetworkINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEC1ERKNS_6vectorINSC_ISA_NS8_ISA_EEEENS8_ISE_EEEERKNSC_IfNS8_IfEEEENS_8functionIFSE_SE_EEENSN_IFSA_SA_EEEEd_UlSA_E_NS8_ISS_EESQ_E11target_typeEv()
{
  return &_ZTIZN5kaldi6quasar16ConfusionNetworkINSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEEC1ERKNS2_6vectorINSA_IS8_NS6_IS8_EEEENS6_ISC_EEEERKNSA_IfNS6_IfEEEENS2_8functionIFSC_SC_EEENSL_IFS8_S8_EEEEd_UlS8_E_;
}

void std::vector<kaldi::quasar::ConfusionNetworkSlot<std::string>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 176;
        std::allocator<kaldi::quasar::ConfusionNetworkSlot<std::string>>::destroy[abi:ne180100]((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t std::allocator<kaldi::quasar::ConfusionNetworkSlot<std::string>>::destroy[abi:ne180100](uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;
  void *v5;

  v3 = *(_QWORD **)(a2 + 168);
  if (v3 == (_QWORD *)(a2 + 144))
  {
    v4 = 4;
    v3 = (_QWORD *)(a2 + 144);
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  v5 = *(void **)(a2 + 112);
  if (v5)
  {
    *(_QWORD *)(a2 + 120) = v5;
    operator delete(v5);
  }
  if (*(char *)(a2 + 111) < 0)
    operator delete(*(void **)(a2 + 88));
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table(a2 + 48);
  return std::__hash_table<std::__hash_value_type<std::string,kaldi::quasar::ConfusionNetworkArc<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,kaldi::quasar::ConfusionNetworkArc<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,kaldi::quasar::ConfusionNetworkArc<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,kaldi::quasar::ConfusionNetworkArc<std::string>>>>::~__hash_table(a2 + 8);
}

uint64_t std::__hash_table<std::__hash_value_type<std::string,kaldi::quasar::ConfusionNetworkArc<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,kaldi::quasar::ConfusionNetworkArc<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,kaldi::quasar::ConfusionNetworkArc<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,kaldi::quasar::ConfusionNetworkArc<std::string>>>>::~__hash_table(uint64_t a1)
{
  void *v2;

  std::__hash_table<std::__hash_value_type<std::string,kaldi::quasar::ConfusionNetworkArc<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,kaldi::quasar::ConfusionNetworkArc<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,kaldi::quasar::ConfusionNetworkArc<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,kaldi::quasar::ConfusionNetworkArc<std::string>>>>::__deallocate_node(a1, *(_QWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void std::__hash_table<std::__hash_value_type<std::string,kaldi::quasar::ConfusionNetworkArc<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,kaldi::quasar::ConfusionNetworkArc<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,kaldi::quasar::ConfusionNetworkArc<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,kaldi::quasar::ConfusionNetworkArc<std::string>>>>::__deallocate_node(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;

  if (a2)
  {
    v2 = a2;
    do
    {
      v3 = (_QWORD *)*v2;
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,kaldi::quasar::ConfusionNetworkArc<std::string>>,0>((uint64_t)(v2 + 2));
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,kaldi::quasar::ConfusionNetworkArc<std::string>>,0>(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  void *v6;
  void **v7;

  v2 = (_QWORD *)(a1 + 104);
  v3 = *(_QWORD **)(a1 + 128);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  v5 = *(void **)(a1 + 80);
  if (v5)
  {
    *(_QWORD *)(a1 + 88) = v5;
    operator delete(v5);
  }
  v6 = *(void **)(a1 + 56);
  if (v6)
  {
    *(_QWORD *)(a1 + 64) = v6;
    operator delete(v6);
  }
  v7 = (void **)(a1 + 32);
  std::vector<quasar::PhoneticMatchDecoderStat>::__destroy_vector::operator()[abi:ne180100](&v7);
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

_QWORD *std::vector<kaldi::quasar::ConfusionNetworkSlot<std::string>>::__init_with_size[abi:ne180100]<kaldi::quasar::ConfusionNetworkSlot<std::string>*,kaldi::quasar::ConfusionNetworkSlot<std::string>*>(_QWORD *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;

  if (a4)
  {
    v6 = result;
    std::vector<kaldi::quasar::ConfusionNetworkSlot<std::string>>::__vallocate[abi:ne180100](result, a4);
    result = (_QWORD *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<kaldi::quasar::ConfusionNetworkSlot<std::string>>,kaldi::quasar::ConfusionNetworkSlot<std::string>*,kaldi::quasar::ConfusionNetworkSlot<std::string>*,kaldi::quasar::ConfusionNetworkSlot<std::string>*>((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_1AD90E644(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  std::vector<kaldi::quasar::ConfusionNetworkSlot<std::string>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

char *std::vector<kaldi::quasar::ConfusionNetworkSlot<std::string>>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >= 0x1745D1745D1745ELL)
    std::vector<int>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::quasar::ConfusionNetworkSlot<std::string>>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[176 * v4];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::quasar::ConfusionNetworkSlot<std::string>>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x1745D1745D1745ELL)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(176 * a2);
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<kaldi::quasar::ConfusionNetworkSlot<std::string>>,kaldi::quasar::ConfusionNetworkSlot<std::string>*,kaldi::quasar::ConfusionNetworkSlot<std::string>*,kaldi::quasar::ConfusionNetworkSlot<std::string>*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  _QWORD v8[3];
  char v9;
  uint64_t v10;
  uint64_t v11;

  v4 = a4;
  v10 = a4;
  v11 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  v8[2] = &v11;
  v9 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      kaldi::quasar::ConfusionNetworkSlot<std::string>::ConfusionNetworkSlot(v4, v6);
      v6 += 176;
      v4 = v11 + 176;
      v11 += 176;
    }
    while (v6 != a3);
  }
  v9 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<kaldi::quasar::ConfusionNetworkSlot<std::string>>,kaldi::quasar::ConfusionNetworkSlot<std::string>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v8);
  return v4;
}

void sub_1AD90E78C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<kaldi::quasar::ConfusionNetworkSlot<std::string>>,kaldi::quasar::ConfusionNetworkSlot<std::string>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t kaldi::quasar::ConfusionNetworkSlot<std::string>::ConfusionNetworkSlot(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  __int128 v6;

  v4 = a2 + 48;
  *(_WORD *)a1 = *(_WORD *)a2;
  v5 = a1 + 48;
  std::unordered_map<std::string,kaldi::quasar::ConfusionNetworkArc<std::string>>::unordered_map(a1 + 8, a2 + 8);
  std::unordered_map<std::string,std::string>::unordered_map(v5, v4);
  if (*(char *)(a2 + 111) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 88), *(const std::string::value_type **)(a2 + 88), *(_QWORD *)(a2 + 96));
  }
  else
  {
    v6 = *(_OWORD *)(a2 + 88);
    *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
    *(_OWORD *)(a1 + 88) = v6;
  }
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 128) = 0;
  std::vector<std::pair<std::string const,kaldi::quasar::ConfusionNetworkArc<std::string>> *,std::allocator<std::pair<std::string const,kaldi::quasar::ConfusionNetworkArc<std::string>> *>>::__init_with_size[abi:ne180100]<std::pair<std::string const,kaldi::quasar::ConfusionNetworkArc<std::string>> **,std::pair<std::string const,kaldi::quasar::ConfusionNetworkArc<std::string>> **>((_QWORD *)(a1 + 112), *(const void **)(a2 + 112), *(_QWORD *)(a2 + 120), (uint64_t)(*(_QWORD *)(a2 + 120) - *(_QWORD *)(a2 + 112)) >> 3);
  *(_BYTE *)(a1 + 136) = *(_BYTE *)(a2 + 136);
  std::__function::__value_func<float ()(float,float)>::__value_func[abi:ne180100](a1 + 144, a2 + 144);
  return a1;
}

void sub_1AD90E864(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table(v2);
  std::__hash_table<std::__hash_value_type<std::string,kaldi::quasar::ConfusionNetworkArc<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,kaldi::quasar::ConfusionNetworkArc<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,kaldi::quasar::ConfusionNetworkArc<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,kaldi::quasar::ConfusionNetworkArc<std::string>>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

uint64_t std::unordered_map<std::string,kaldi::quasar::ConfusionNetworkArc<std::string>>::unordered_map(uint64_t a1, uint64_t a2)
{
  unsigned __int8 *i;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::__rehash<true>(a1, *(_QWORD *)(a2 + 8));
  for (i = *(unsigned __int8 **)(a2 + 16); i; i = *(unsigned __int8 **)i)
    std::__hash_table<std::__hash_value_type<std::string,kaldi::quasar::ConfusionNetworkArc<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,kaldi::quasar::ConfusionNetworkArc<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,kaldi::quasar::ConfusionNetworkArc<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,kaldi::quasar::ConfusionNetworkArc<std::string>>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,kaldi::quasar::ConfusionNetworkArc<std::string>> const&>(a1, i + 16, (__int128 *)i + 1);
  return a1;
}

void sub_1AD90E914(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<std::__hash_value_type<std::string,kaldi::quasar::ConfusionNetworkArc<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,kaldi::quasar::ConfusionNetworkArc<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,kaldi::quasar::ConfusionNetworkArc<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,kaldi::quasar::ConfusionNetworkArc<std::string>>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,kaldi::quasar::ConfusionNetworkArc<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,kaldi::quasar::ConfusionNetworkArc<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,kaldi::quasar::ConfusionNetworkArc<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,kaldi::quasar::ConfusionNetworkArc<std::string>>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,kaldi::quasar::ConfusionNetworkArc<std::string>> const&>(uint64_t a1, unsigned __int8 *a2, __int128 *a3)
{
  unint64_t v3;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  unint64_t v12;
  unsigned __int8 **v13;
  unsigned __int8 *i;
  unint64_t v15;
  float v16;
  float v17;
  _BOOL8 v18;
  unint64_t v19;
  unint64_t v20;
  size_t v21;
  _QWORD *v22;
  unint64_t v23;
  _QWORD v25[3];

  v7 = (_QWORD *)(a1 + 24);
  v8 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  v9 = v8;
  v10 = *(_QWORD *)(a1 + 8);
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      v3 = v8;
      if (v8 >= v10)
        v3 = v8 % v10;
    }
    else
    {
      v3 = (v10 - 1) & v8;
    }
    v13 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v3);
    if (v13)
    {
      for (i = *v13; i; i = *(unsigned __int8 **)i)
      {
        v15 = *((_QWORD *)i + 1);
        if (v15 == v9)
        {
          if ((std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2) & 1) != 0)
            return i;
        }
        else
        {
          if (v12 > 1)
          {
            if (v15 >= v10)
              v15 %= v10;
          }
          else
          {
            v15 &= v10 - 1;
          }
          if (v15 != v3)
            break;
        }
      }
    }
  }
  std::__hash_table<std::__hash_value_type<std::string,kaldi::quasar::ConfusionNetworkArc<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,kaldi::quasar::ConfusionNetworkArc<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,kaldi::quasar::ConfusionNetworkArc<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,kaldi::quasar::ConfusionNetworkArc<std::string>>>>::__construct_node_hash<std::pair<std::string const,kaldi::quasar::ConfusionNetworkArc<std::string>> const&>(a1, v9, a3, (uint64_t)v25);
  v16 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v17 = *(float *)(a1 + 32);
  if (!v10 || (float)(v17 * (float)v10) < v16)
  {
    v18 = 1;
    if (v10 >= 3)
      v18 = (v10 & (v10 - 1)) != 0;
    v19 = v18 | (2 * v10);
    v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20)
      v21 = v20;
    else
      v21 = v19;
    std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::__rehash<true>(a1, v21);
    v10 = *(_QWORD *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
        v3 = v9 % v10;
      else
        v3 = v9;
    }
    else
    {
      v3 = (v10 - 1) & v9;
    }
  }
  v22 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v22)
  {
    *(_QWORD *)v25[0] = *v22;
    *v22 = v25[0];
  }
  else
  {
    *(_QWORD *)v25[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v25[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v3) = a1 + 16;
    if (*(_QWORD *)v25[0])
    {
      v23 = *(_QWORD *)(*(_QWORD *)v25[0] + 8);
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v23 >= v10)
          v23 %= v10;
      }
      else
      {
        v23 &= v10 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v23) = v25[0];
    }
  }
  i = (unsigned __int8 *)v25[0];
  v25[0] = 0;
  ++*v7;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,kaldi::quasar::ConfusionNetworkArc<std::string>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,kaldi::quasar::ConfusionNetworkArc<std::string>>,void *>>>>::reset[abi:ne180100]((uint64_t)v25, 0);
  return i;
}

void sub_1AD90EB94(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,kaldi::quasar::ConfusionNetworkArc<std::string>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,kaldi::quasar::ConfusionNetworkArc<std::string>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

std::string *std::__hash_table<std::__hash_value_type<std::string,kaldi::quasar::ConfusionNetworkArc<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,kaldi::quasar::ConfusionNetworkArc<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,kaldi::quasar::ConfusionNetworkArc<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,kaldi::quasar::ConfusionNetworkArc<std::string>>>>::__construct_node_hash<std::pair<std::string const,kaldi::quasar::ConfusionNetworkArc<std::string>> const&>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, __int128 *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  char *v8;
  std::string *result;

  v7 = a1 + 16;
  v8 = (char *)operator new(0x98uLL);
  *(_QWORD *)a4 = v8;
  *(_QWORD *)(a4 + 8) = v7;
  *(_BYTE *)(a4 + 16) = 0;
  *(_QWORD *)v8 = 0;
  *((_QWORD *)v8 + 1) = a2;
  result = std::pair<std::string const,kaldi::quasar::ConfusionNetworkArc<std::string>>::pair[abi:ne180100]((std::string *)(v8 + 16), a3);
  *(_BYTE *)(a4 + 16) = 1;
  return result;
}

void sub_1AD90EC08(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,kaldi::quasar::ConfusionNetworkArc<std::string>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,kaldi::quasar::ConfusionNetworkArc<std::string>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

std::string *std::pair<std::string const,kaldi::quasar::ConfusionNetworkArc<std::string>>::pair[abi:ne180100](std::string *this, __int128 *a2)
{
  __int128 v4;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  kaldi::quasar::ConfusionNetworkArc<std::string>::ConfusionNetworkArc((uint64_t)&this[1], (uint64_t)a2 + 24);
  return this;
}

void sub_1AD90EC78(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t kaldi::quasar::ConfusionNetworkArc<std::string>::ConfusionNetworkArc(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  std::vector<kaldi::quasar::ConfusionNetworkArcElement<std::string>>::__init_with_size[abi:ne180100]<kaldi::quasar::ConfusionNetworkArcElement<std::string>*,kaldi::quasar::ConfusionNetworkArcElement<std::string>*>((std::string *)(a1 + 8), *(__int128 **)(a2 + 8), *(__int128 **)(a2 + 16), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(a2 + 16) - *(_QWORD *)(a2 + 8)) >> 3));
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((_QWORD *)(a1 + 32), *(const void **)(a2 + 32), *(_QWORD *)(a2 + 40), (uint64_t)(*(_QWORD *)(a2 + 40) - *(_QWORD *)(a2 + 32)) >> 2);
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((_QWORD *)(a1 + 56), *(const void **)(a2 + 56), *(_QWORD *)(a2 + 64), (uint64_t)(*(_QWORD *)(a2 + 64) - *(_QWORD *)(a2 + 56)) >> 2);
  std::__function::__value_func<float ()(float,float)>::__value_func[abi:ne180100](a1 + 80, a2 + 80);
  return a1;
}

void sub_1AD90ED54(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  void **v3;
  void **v4;
  void *v6;
  void *v7;
  va_list va;

  va_start(va, a2);
  v6 = *v4;
  if (*v4)
  {
    *(_QWORD *)(v2 + 64) = v6;
    operator delete(v6);
  }
  v7 = *v3;
  if (*v3)
  {
    *(_QWORD *)(v2 + 40) = v7;
    operator delete(v7);
  }
  std::vector<quasar::PhoneticMatchDecoderStat>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

std::string *std::vector<kaldi::quasar::ConfusionNetworkArcElement<std::string>>::__init_with_size[abi:ne180100]<kaldi::quasar::ConfusionNetworkArcElement<std::string>*,kaldi::quasar::ConfusionNetworkArcElement<std::string>*>(std::string *result, __int128 *a2, __int128 *a3, unint64_t a4)
{
  std::string *v6;

  if (a4)
  {
    v6 = result;
    std::vector<quasar::AlternativeSelectionSpan>::__vallocate[abi:ne180100](result, a4);
    result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<kaldi::quasar::ConfusionNetworkArcElement<std::string>>,kaldi::quasar::ConfusionNetworkArcElement<std::string>*,kaldi::quasar::ConfusionNetworkArcElement<std::string>*,kaldi::quasar::ConfusionNetworkArcElement<std::string>*>((uint64_t)&v6->__r_.__value_.__r.__words[2], a2, a3, (std::string *)v6->__r_.__value_.__l.__size_);
    v6->__r_.__value_.__l.__size_ = (std::string::size_type)result;
  }
  return result;
}

void sub_1AD90EE00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  std::vector<quasar::PhoneticMatchDecoderStat>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

std::string *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<kaldi::quasar::ConfusionNetworkArcElement<std::string>>,kaldi::quasar::ConfusionNetworkArcElement<std::string>*,kaldi::quasar::ConfusionNetworkArcElement<std::string>*,kaldi::quasar::ConfusionNetworkArcElement<std::string>*>(uint64_t a1, __int128 *a2, __int128 *a3, std::string *this)
{
  std::string *v4;
  __int128 *v6;
  __int128 v7;
  std::string *v8;
  std::string::size_type v9;
  _QWORD v11[3];
  char v12;
  std::string *v13;
  std::string *v14;

  v4 = this;
  v13 = this;
  v14 = this;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  v12 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      if (*((char *)v6 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)v6, *((_QWORD *)v6 + 1));
        v8 = v14;
      }
      else
      {
        v7 = *v6;
        v4->__r_.__value_.__r.__words[2] = *((_QWORD *)v6 + 2);
        *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v7;
        v8 = v4;
      }
      v9 = *((_QWORD *)v6 + 3);
      *(std::string::size_type *)((char *)v4[1].__r_.__value_.__r.__words + 6) = *(_QWORD *)((char *)v6 + 30);
      v4[1].__r_.__value_.__r.__words[0] = v9;
      v6 = (__int128 *)((char *)v6 + 40);
      v4 = (std::string *)((char *)v8 + 40);
      v14 = (std::string *)((char *)v8 + 40);
    }
    while (v6 != a3);
  }
  v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<kaldi::quasar::ConfusionNetworkArcElement<std::string>>,kaldi::quasar::ConfusionNetworkArcElement<std::string>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v4;
}

void sub_1AD90EEDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<kaldi::quasar::ConfusionNetworkArcElement<std::string>>,kaldi::quasar::ConfusionNetworkArcElement<std::string>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<kaldi::quasar::ConfusionNetworkArcElement<std::string>>,kaldi::quasar::ConfusionNetworkArcElement<std::string>*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<kaldi::quasar::ConfusionNetworkArcElement<std::string>>,kaldi::quasar::ConfusionNetworkArcElement<std::string>*>::operator()[abi:ne180100](a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<kaldi::quasar::ConfusionNetworkArcElement<std::string>>,kaldi::quasar::ConfusionNetworkArcElement<std::string>*>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = **(_QWORD **)(a1 + 16);
  v2 = **(_QWORD **)(a1 + 8);
  while (v1 != v2)
  {
    if (*(char *)(v1 - 17) < 0)
      operator delete(*(void **)(v1 - 40));
    v1 -= 40;
  }
}

uint64_t std::__function::__value_func<float ()(float,float)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(_QWORD *)(a1 + 24) = a1;
      (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a2 + 24) + 24))(*(_QWORD *)(a2 + 24), a1);
    }
    else
    {
      *(_QWORD *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 16))(v3);
    }
  }
  else
  {
    *(_QWORD *)(a1 + 24) = 0;
  }
  return a1;
}

{
  _QWORD *v3;
  uint64_t v4;

  v3 = (_QWORD *)(a2 + 24);
  v4 = *(_QWORD *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(_QWORD *)(a1 + 24) = a1;
      (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(_QWORD *)(a1 + 24) = v4;
  }
  else
  {
    v3 = (_QWORD *)(a1 + 24);
  }
  *v3 = 0;
  return a1;
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,kaldi::quasar::ConfusionNetworkArc<std::string>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,kaldi::quasar::ConfusionNetworkArc<std::string>>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,kaldi::quasar::ConfusionNetworkArc<std::string>>,0>((uint64_t)v2 + 16);
    operator delete(v2);
  }
}

_QWORD *std::vector<std::pair<std::string const,kaldi::quasar::ConfusionNetworkArc<std::string>> *,std::allocator<std::pair<std::string const,kaldi::quasar::ConfusionNetworkArc<std::string>> *>>::__init_with_size[abi:ne180100]<std::pair<std::string const,kaldi::quasar::ConfusionNetworkArc<std::string>> **,std::pair<std::string const,kaldi::quasar::ConfusionNetworkArc<std::string>> **>(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<kaldi::CuWorkspace *>::__vallocate[abi:ne180100](result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1AD90F06C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<kaldi::quasar::ConfusionNetworkSlot<std::string>>,kaldi::quasar::ConfusionNetworkSlot<std::string>*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<kaldi::quasar::ConfusionNetworkSlot<std::string>>,kaldi::quasar::ConfusionNetworkSlot<std::string>*>::operator()[abi:ne180100]((uint64_t *)a1);
  return a1;
}

uint64_t *std::_AllocatorDestroyRangeReverse<std::allocator<kaldi::quasar::ConfusionNetworkSlot<std::string>>,kaldi::quasar::ConfusionNetworkSlot<std::string>*>::operator()[abi:ne180100](uint64_t *result)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = (uint64_t *)result[1];
  v1 = (uint64_t *)result[2];
  v3 = *v1;
  v4 = *v2;
  if (*v1 != *v2)
  {
    v5 = *result;
    do
    {
      v3 -= 176;
      result = (uint64_t *)std::allocator<kaldi::quasar::ConfusionNetworkSlot<std::string>>::destroy[abi:ne180100](v5, v3);
    }
    while (v3 != v4);
  }
  return result;
}

unsigned __int8 *std::__find_impl[abi:ne180100]<std::string *,std::string *,char [24],std::__identity>(unsigned __int8 *a1, unsigned __int8 *a2, char *__s)
{
  unsigned __int8 *v3;
  size_t v6;
  unsigned __int8 *v7;

  v3 = a1;
  if (a1 != a2)
  {
    v6 = strlen(__s);
    while (1)
    {
      if ((char)v3[23] < 0)
      {
        if (v6 == *((_QWORD *)v3 + 1))
        {
          if (v6 == -1)
LABEL_14:
            std::string::__throw_out_of_range[abi:ne180100]();
          v7 = *(unsigned __int8 **)v3;
LABEL_10:
          if (!memcmp(v7, __s, v6))
            return v3;
        }
      }
      else if (v6 == v3[23])
      {
        v7 = v3;
        if (v6 == -1)
          goto LABEL_14;
        goto LABEL_10;
      }
      v3 += 24;
      if (v3 == a2)
        return a2;
    }
  }
  return v3;
}

unsigned __int8 *std::__find_impl[abi:ne180100]<std::string *,std::string *,char [22],std::__identity>(unsigned __int8 *a1, unsigned __int8 *a2, char *__s)
{
  unsigned __int8 *v3;
  size_t v6;
  unsigned __int8 *v7;

  v3 = a1;
  if (a1 != a2)
  {
    v6 = strlen(__s);
    while (1)
    {
      if ((char)v3[23] < 0)
      {
        if (v6 == *((_QWORD *)v3 + 1))
        {
          if (v6 == -1)
LABEL_14:
            std::string::__throw_out_of_range[abi:ne180100]();
          v7 = *(unsigned __int8 **)v3;
LABEL_10:
          if (!memcmp(v7, __s, v6))
            return v3;
        }
      }
      else if (v6 == v3[23])
      {
        v7 = v3;
        if (v6 == -1)
          goto LABEL_14;
        goto LABEL_10;
      }
      v3 += 24;
      if (v3 == a2)
        return a2;
    }
  }
  return v3;
}

unsigned __int8 *std::__find_impl[abi:ne180100]<std::string *,std::string *,char [28],std::__identity>(unsigned __int8 *a1, unsigned __int8 *a2, char *__s)
{
  unsigned __int8 *v3;
  size_t v6;
  unsigned __int8 *v7;

  v3 = a1;
  if (a1 != a2)
  {
    v6 = strlen(__s);
    while (1)
    {
      if ((char)v3[23] < 0)
      {
        if (v6 == *((_QWORD *)v3 + 1))
        {
          if (v6 == -1)
LABEL_14:
            std::string::__throw_out_of_range[abi:ne180100]();
          v7 = *(unsigned __int8 **)v3;
LABEL_10:
          if (!memcmp(v7, __s, v6))
            return v3;
        }
      }
      else if (v6 == v3[23])
      {
        v7 = v3;
        if (v6 == -1)
          goto LABEL_14;
        goto LABEL_10;
      }
      v3 += 24;
      if (v3 == a2)
        return a2;
    }
  }
  return v3;
}

void *std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(uint64_t a1, unsigned __int8 *a2, uint64_t a3, __int128 **a4)
{
  unint64_t v4;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  unint64_t v13;
  void **v14;
  void *i;
  unint64_t v16;
  _QWORD *v17;
  __int128 *v18;
  __int128 v19;
  float v20;
  float v21;
  _BOOL8 v22;
  unint64_t v23;
  unint64_t v24;
  size_t v25;
  uint64_t v26;
  _QWORD *v27;
  unint64_t v28;

  v8 = (_QWORD *)(a1 + 24);
  v9 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  v10 = v9;
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      v4 = v9;
      if (v9 >= v11)
        v4 = v9 % v11;
    }
    else
    {
      v4 = (v11 - 1) & v9;
    }
    v14 = *(void ***)(*(_QWORD *)a1 + 8 * v4);
    if (v14)
    {
      for (i = *v14; i; i = *(void **)i)
      {
        v16 = *((_QWORD *)i + 1);
        if (v16 == v10)
        {
          if ((std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, (unsigned __int8 *)i + 16, a2) & 1) != 0)
            return i;
        }
        else
        {
          if (v13 > 1)
          {
            if (v16 >= v11)
              v16 %= v11;
          }
          else
          {
            v16 &= v11 - 1;
          }
          if (v16 != v4)
            break;
        }
      }
    }
  }
  v17 = (_QWORD *)(a1 + 16);
  i = operator new(0x30uLL);
  *(_QWORD *)i = 0;
  *((_QWORD *)i + 1) = v10;
  v18 = *a4;
  v19 = **a4;
  *((_QWORD *)i + 4) = *((_QWORD *)*a4 + 2);
  *((_OWORD *)i + 1) = v19;
  *((_QWORD *)v18 + 1) = 0;
  *((_QWORD *)v18 + 2) = 0;
  *(_QWORD *)v18 = 0;
  *((_DWORD *)i + 10) = 0;
  v20 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v21 = *(float *)(a1 + 32);
  if (!v11 || (float)(v21 * (float)v11) < v20)
  {
    v22 = 1;
    if (v11 >= 3)
      v22 = (v11 & (v11 - 1)) != 0;
    v23 = v22 | (2 * v11);
    v24 = vcvtps_u32_f32(v20 / v21);
    if (v23 <= v24)
      v25 = v24;
    else
      v25 = v23;
    std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::__rehash<true>(a1, v25);
    v11 = *(_QWORD *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
        v4 = v10 % v11;
      else
        v4 = v10;
    }
    else
    {
      v4 = (v11 - 1) & v10;
    }
  }
  v26 = *(_QWORD *)a1;
  v27 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v27)
  {
    *(_QWORD *)i = *v27;
LABEL_38:
    *v27 = i;
    goto LABEL_39;
  }
  *(_QWORD *)i = *v17;
  *v17 = i;
  *(_QWORD *)(v26 + 8 * v4) = v17;
  if (*(_QWORD *)i)
  {
    v28 = *(_QWORD *)(*(_QWORD *)i + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v28 >= v11)
        v28 %= v11;
    }
    else
    {
      v28 &= v11 - 1;
    }
    v27 = (_QWORD *)(*(_QWORD *)a1 + 8 * v28);
    goto LABEL_38;
  }
LABEL_39:
  ++*v8;
  return i;
}

void sub_1AD90F588(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  void **v10;
  uint64_t v11;

  std::__hash_node_destructor<std::allocator<std::__hash_node<std::string,void *>>>::operator()[abi:ne180100](v11, v10);
  _Unwind_Resume(a1);
}

void fst::RemoveEpsLocal<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  void *v3;
  void *__p;
  void *v5;

  fst::RemoveEpsLocalClass<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::ReweightPlusDefault<fst::LatticeWeightTpl<float>>>::RemoveEpsLocalClass(&v1, a1);
  if (__p)
  {
    v5 = __p;
    operator delete(__p);
  }
  if (v2)
  {
    v3 = v2;
    operator delete(v2);
  }
}

uint64_t *fst::RemoveEpsLocalClass<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::ReweightPlusDefault<fst::LatticeWeightTpl<float>>>::RemoveEpsLocalClass(uint64_t *a1, uint64_t a2)
{
  int v4;
  uint64_t v5;
  unint64_t i;

  *a1 = a2;
  *((_OWORD *)a1 + 1) = 0u;
  *((_OWORD *)a1 + 2) = 0u;
  *((_OWORD *)a1 + 3) = 0u;
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2) != -1)
  {
    *((_DWORD *)a1 + 2) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)*a1 + 200))(*a1);
    fst::RemoveEpsLocalClass<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::ReweightPlusDefault<fst::LatticeWeightTpl<float>>>::InitNumArcs(a1);
    v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)*a1 + 160))(*a1);
    if (v4 >= 1)
    {
      v5 = 0;
      do
      {
        for (i = 0; i < (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)*a1 + 40))(*a1, v5); ++i)
          fst::RemoveEpsLocalClass<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::ReweightPlusDefault<fst::LatticeWeightTpl<float>>>::RemoveEps(a1, v5, i);
        v5 = (v5 + 1);
      }
      while ((_DWORD)v5 != v4);
    }
    fst::Connect<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>(a2);
  }
  return a1;
}

void sub_1AD90F6D0(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  void **v2;
  void *v4;
  void *v5;

  v4 = (void *)v1[5];
  if (v4)
  {
    v1[6] = v4;
    operator delete(v4);
  }
  v5 = *v2;
  if (*v2)
  {
    v1[3] = v5;
    operator delete(v5);
  }
  _Unwind_Resume(exception_object);
}

uint64_t fst::RemoveEpsLocalClass<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::ReweightPlusDefault<fst::LatticeWeightTpl<float>>>::InitNumArcs(_QWORD *a1)
{
  int v2;
  _QWORD *v3;
  uint64_t result;
  uint64_t i;
  __n128 v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v11[3];
  _DWORD *v12;
  unint64_t v13;
  float v14;
  int v15;
  float v16;
  int v17;

  v2 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a1 + 160))(*a1);
  std::vector<int>::resize((std::vector<unsigned int> *)(a1 + 2), v2);
  v3 = a1 + 5;
  std::vector<int>::resize((std::vector<unsigned int> *)(a1 + 5), v2);
  result = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a1 + 24))(*a1);
  ++*(_DWORD *)(a1[2] + 4 * (int)result);
  if (v2 < 1)
    return result;
  for (i = 0; i != v2; ++i)
  {
    (*(void (**)(_QWORD *__return_ptr, _QWORD, uint64_t))(*(_QWORD *)*a1 + 32))(v11, *a1, i);
    v16 = *((float *)v11 + 1);
    v17 = v11[0];
    v15 = 2139095040;
    v14 = INFINITY;
    v6.n128_u32[0] = v11[0];
    if (*(float *)v11 != INFINITY || (v6.n128_f32[0] = v16, v16 != v14))
      ++*(_DWORD *)(*v3 + 4 * i);
    v7 = *a1;
    v13 = 0;
    (*(void (**)(uint64_t, uint64_t, _QWORD *, __n128))(*(_QWORD *)v7 + 136))(v7, i, v11, v6);
    while (1)
    {
      result = v11[0];
      if (!v11[0])
      {
        if (v13 >= v11[2])
          goto LABEL_18;
LABEL_12:
        v10 = 0;
        v9 = v11[1] + 20 * v13;
        goto LABEL_13;
      }
      v8 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v11[0] + 24))(v11[0]);
      result = v11[0];
      if (v8)
        break;
      if (!v11[0])
        goto LABEL_12;
      v9 = (*(uint64_t (**)(void))(*(_QWORD *)v11[0] + 32))();
      v10 = v11[0];
LABEL_13:
      ++*(_DWORD *)(a1[2] + 4 * *(int *)(v9 + 16));
      ++*(_DWORD *)(*v3 + 4 * i);
      if (v10)
        (*(void (**)(uint64_t))(*(_QWORD *)v10 + 40))(v10);
      else
        ++v13;
    }
    if (v11[0])
    {
      result = (*(uint64_t (**)(void))(*(_QWORD *)v11[0] + 8))();
      continue;
    }
LABEL_18:
    if (v12)
      --*v12;
  }
  return result;
}

void sub_1AD90F91C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  _DWORD **v10;

  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  else
    quasar::InverseTextNormalizer::getNumTokens(v10);
  _Unwind_Resume(a1);
}

void fst::RemoveEpsLocalClass<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::ReweightPlusDefault<fst::LatticeWeightTpl<float>>>::RemoveEps(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  float32x2_t v8;
  float32x2_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  int v14;
  float32x2_t v16[2];
  int v17;
  float32x2_t v18[2];
  int v19;
  _QWORD v20[3];
  _DWORD *v21;
  uint64_t v22;

  v6 = *a1;
  v22 = 0;
  (*(void (**)(uint64_t, uint64_t, _QWORD *))(*(_QWORD *)v6 + 136))(v6, a2, v20);
  if (!v20[0])
  {
    v22 = a3;
    v11 = a3;
LABEL_7:
    v12 = v20[1] + 20 * v11;
    v8 = *(float32x2_t *)v12;
    v9 = *(float32x2_t *)(v12 + 8);
    v10 = *(_DWORD *)(v12 + 16);
    goto LABEL_8;
  }
  (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)v20[0] + 64))(v20[0], a3);
  if (!v20[0])
  {
    v11 = v22;
    goto LABEL_7;
  }
  v7 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v20[0] + 32))(v20[0]);
  v8 = *(float32x2_t *)v7;
  v9 = *(float32x2_t *)(v7 + 8);
  v10 = *(_DWORD *)(v7 + 16);
  if (v20[0])
  {
    (*(void (**)(_QWORD))(*(_QWORD *)v20[0] + 8))(v20[0]);
    goto LABEL_10;
  }
LABEL_8:
  if (v21)
    --*v21;
LABEL_10:
  if (v10 != (_DWORD)a2 && v10 != *((_DWORD *)a1 + 2))
  {
    v14 = *(_DWORD *)(a1[5] + 4 * v10);
    if (*(_DWORD *)(a1[2] + 4 * v10) != 1 || v14 < 2)
    {
      if (v14 == 1)
      {
        v16[0] = v8;
        v16[1] = v9;
        v17 = v10;
        fst::RemoveEpsLocalClass<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::ReweightPlusDefault<fst::LatticeWeightTpl<float>>>::RemoveEpsPattern2(a1, a2, a3, v16);
      }
    }
    else
    {
      v18[0] = v8;
      v18[1] = v9;
      v19 = v10;
      fst::RemoveEpsLocalClass<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::ReweightPlusDefault<fst::LatticeWeightTpl<float>>>::RemoveEpsPattern1(a1, a2, a3, v18);
    }
  }
}

void sub_1AD90FAAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  if (a16)
    (*(void (**)(uint64_t))(*(_QWORD *)a16 + 8))(a16);
  else
    fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::OrderedExpand<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void fst::RemoveEpsLocalClass<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::ReweightPlusDefault<fst::LatticeWeightTpl<float>>>::RemoveEpsPattern1(_QWORD *a1, uint64_t a2, uint64_t a3, float32x2_t *a4)
{
  uint64_t v8;
  __n128 v9;
  uint64_t v10;
  __n128 v11;
  unint64_t v12;
  __n128 v13;
  __int32 v14;
  __int32 v15;
  unint64_t v16;
  __int32 v17;
  float32x2_t v18;
  float32x2_t v19;
  BOOL v20;
  __int32 v21;
  float32x2_t v22;
  BOOL v23;
  float32x2_t *v24;
  uint64_t v25;
  uint64_t v26;
  __n128 v27;
  float v28;
  float v29;
  __n128 v30;
  uint64_t v31;
  float v32;
  float v33;
  float v34;
  float v35;
  uint64_t v36;
  __n128 v37;
  float v38;
  float v39;
  float v40;
  _BOOL4 v41;
  _QWORD *v42;
  float32x2_t *v43;
  uint64_t v44;
  unint64_t v45;
  __n128 v46;
  __n128 v47;
  float v48;
  float v49;
  unint64_t v50;
  int32x2_t v51;
  _DWORD v52[2];
  unint64_t v53;
  float32x2_t v54;
  __int32 v55;
  uint64_t v56;
  float32x2_t *v57;
  float32x2_t *v58;
  unint64_t v59;
  float v60;
  float v61;
  float v62;
  _QWORD v63[2];
  int v64;

  v8 = a4[2].u32[0];
  v57 = 0;
  v58 = 0;
  v59 = 0;
  v9 = ((__n128 (*)(_QWORD, uint64_t, uint64_t *))*(_QWORD *)(*(_QWORD *)*a1 + 296))(*a1, v8, &v56);
  v9.n128_u32[0] = 2139095040;
  v47 = v9;
  v48 = INFINITY;
  v49 = INFINITY;
  v46 = v9;
  while (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v56 + 24))(v56))
  {
    v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v56 + 32))(v56);
    v12 = *(_QWORD *)v10;
    v63[0] = *(_QWORD *)v10;
    v13.n128_u64[0] = *(_QWORD *)(v10 + 8);
    v63[1] = v13.n128_u64[0];
    v14 = *(_DWORD *)(v10 + 16);
    v64 = v14;
    if (v14 != *((_DWORD *)a1 + 2))
    {
      v15 = a4->i32[0];
      if (a4->i32[0] && (_DWORD)v12 || (v16 = HIDWORD(v12), (v17 = a4->i32[1]) != 0) && HIDWORD(v12))
      {
        v18 = (float32x2_t)vdup_lane_s32((int32x2_t)v13.n128_u64[0], 0);
        v18.f32[0] = v49;
        v19 = vadd_f32(v18, (float32x2_t)__PAIR64__(v13.n128_u32[1], LODWORD(v48)));
        if (v19.f32[0] >= v19.f32[1])
        {
          if (v19.f32[0] > v19.f32[1] || (v49 >= v13.n128_f32[0] ? (v20 = v49 <= v13.n128_f32[0]) : (v20 = 1), !v20))
          {
            v48 = v13.n128_f32[1];
            v49 = v13.n128_f32[0];
          }
        }
      }
      else
      {
        v54 = vadd_f32((float32x2_t)v13.n128_u64[0], a4[1]);
        if (v15)
          LODWORD(v12) = v15;
        if (v17)
          v21 = v17;
        else
          v21 = v16;
        v53 = __PAIR64__(v21, v12);
        v55 = v14;
        v22 = (float32x2_t)vdup_lane_s32((int32x2_t)v13.n128_u64[0], 0);
        v22.i32[0] = v47.n128_u32[0];
        v11.n128_u64[0] = (unint64_t)vadd_f32(v22, (float32x2_t)__PAIR64__(v13.n128_u32[1], v46.n128_u32[0]));
        if (v11.n128_f32[0] >= v11.n128_f32[1])
        {
          if (v11.n128_f32[0] > v11.n128_f32[1]
            || ((v11 = v47, v47.n128_f32[0] >= v13.n128_f32[0]) ? (v23 = v47.n128_f32[0] <= v13.n128_f32[0]) : (v23 = 1),
                !v23))
          {
            v11.n128_u32[0] = v13.n128_u32[1];
            v46 = v11;
            v47 = v13;
          }
        }
        --*(_DWORD *)(a1[5] + 4 * (int)v8);
        --*(_DWORD *)(a1[2] + 4 * v64);
        v64 = *((_DWORD *)a1 + 2);
        (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v56 + 88))(v56, v63);
        v24 = v58;
        if ((unint64_t)v58 >= v59)
        {
          v25 = std::vector<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::__push_back_slow_path<fst::ArcTpl<fst::LatticeWeightTpl<float>,int> const&>((uint64_t *)&v57, (uint64_t)&v53);
        }
        else
        {
          *v58 = (float32x2_t)v53;
          v24[1] = v54;
          v24[2].i32[0] = v55;
          v25 = (uint64_t)&v24[2] + 4;
        }
        v58 = (float32x2_t *)v25;
      }
    }
    (*(void (**)(uint64_t))(*(_QWORD *)v56 + 40))(v56);
  }
  if (v56)
    (*(void (**)(uint64_t))(*(_QWORD *)v56 + 8))(v56);
  (*(void (**)(_QWORD *__return_ptr, _QWORD, _QWORD))(*(_QWORD *)*a1 + 32))(v63, *a1, (int)v8);
  v26 = v63[0];
  LODWORD(v56) = HIDWORD(v63[0]);
  LODWORD(v53) = v63[0];
  v62 = INFINITY;
  v61 = INFINITY;
  if (*(float *)v63 != INFINITY || *(float *)&v56 != v61)
  {
    if (*a4)
    {
      if ((float)(v49 + v48) >= (float)(*(float *)v63 + *((float *)v63 + 1))
        && ((float)(v49 + v48) > (float)(*(float *)v63 + *((float *)v63 + 1)) || v49 > *(float *)v63))
      {
        v48 = *((float *)v63 + 1);
        v49 = *(float *)v63;
      }
    }
    else
    {
      v27 = v46;
      v27.n128_f32[0] = v47.n128_f32[0] + v46.n128_f32[0];
      if ((float)(v47.n128_f32[0] + v46.n128_f32[0]) >= (float)(*(float *)v63 + *((float *)v63 + 1)))
      {
        if ((float)(v47.n128_f32[0] + v46.n128_f32[0]) > (float)(*(float *)v63 + *((float *)v63 + 1))
          || (v27 = v47, v47.n128_f32[0] > *(float *)v63))
        {
          v27.n128_u32[0] = HIDWORD(v63[0]);
          v46 = v27;
          v27.n128_u32[0] = v63[0];
          v47.n128_u32[0] = v63[0];
        }
      }
      v28 = a4[1].f32[0];
      v29 = a4[1].f32[1];
      (*(void (**)(unint64_t *__return_ptr, _QWORD, uint64_t, __n128))(*(_QWORD *)*a1 + 32))(&v53, *a1, a2, v27);
      v62 = *((float *)&v53 + 1);
      LODWORD(v56) = v53;
      v61 = INFINITY;
      v60 = INFINITY;
      v30.n128_u32[0] = v53;
      if (*(float *)&v53 == INFINITY)
      {
        v30.n128_f32[0] = v62;
        if (v62 == v60)
          ++*(_DWORD *)(a1[5] + 4 * (int)a2);
      }
      v31 = *a1;
      (*(void (**)(unint64_t *__return_ptr, _QWORD, uint64_t, __n128))(*(_QWORD *)*a1 + 32))(&v53, *a1, a2, v30);
      v32 = *(float *)&v26 + v28;
      v33 = *((float *)&v53 + 1);
      v34 = *(float *)&v53;
      v35 = (float)(*(float *)&v26 + v28) + (float)(*((float *)&v26 + 1) + v29);
      if ((float)(*(float *)&v53 + *((float *)&v53 + 1)) >= v35
        && ((float)(*(float *)&v53 + *((float *)&v53 + 1)) > v35 || *(float *)&v53 >= v32 && *(float *)&v53 > v32))
      {
        v33 = *((float *)&v26 + 1) + v29;
        v34 = *(float *)&v26 + v28;
      }
      *(float *)v52 = v34;
      *(float *)&v52[1] = v33;
      (*(void (**)(uint64_t, uint64_t, _DWORD *))(*(_QWORD *)v31 + 184))(v31, a2, v52);
      --*(_DWORD *)(a1[5] + 4 * (int)v8);
      v36 = *a1;
      v51 = vdup_n_s32(0x7F800000u);
      (*(void (**)(uint64_t, _QWORD, int32x2_t *))(*(_QWORD *)v36 + 184))(v36, (int)v8, &v51);
    }
  }
  LODWORD(v63[0]) = v47.n128_u32[0];
  v37 = v46;
  LODWORD(v53) = v46.n128_u32[0];
  LODWORD(v56) = 2139095040;
  v62 = INFINITY;
  if (v47.n128_f32[0] != INFINITY || (v37.n128_u32[0] = v53, *(float *)&v53 != v62))
  {
    *(float *)v63 = v49;
    *(float *)&v53 = v48;
    LODWORD(v56) = 2139095040;
    v62 = INFINITY;
    if (v49 == INFINITY && (v38 = *(float *)&v53, *(float *)&v53 == v62))
    {
      --*(_DWORD *)(a1[5] + 4 * (int)a2);
      --*(_DWORD *)(a1[2] + 4 * a4[2].i32[0]);
      a4[2].i32[0] = *((_DWORD *)a1 + 2);
      (*(void (**)(_QWORD, uint64_t, _QWORD *, float))(*(_QWORD *)*a1 + 296))(*a1, a2, v63, v38);
      (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)v63[0] + 64))(v63[0], a3);
      (*(void (**)(_QWORD, float32x2_t *))(*(_QWORD *)v63[0] + 88))(v63[0], a4);
      if (v63[0])
        (*(void (**)(_QWORD))(*(_QWORD *)v63[0] + 8))(v63[0]);
    }
    else
    {
      if ((float)(v47.n128_f32[0] + v46.n128_f32[0]) >= (float)(v49 + v48)
        && ((float)(v47.n128_f32[0] + v46.n128_f32[0]) > (float)(v49 + v48) || v47.n128_f32[0] > v49))
      {
        v46.n128_f32[0] = v48;
        v47.n128_f32[0] = v49;
      }
      v39 = v49 - v47.n128_f32[0];
      if ((float)(v49 - v47.n128_f32[0]) == -INFINITY
        || (v40 = v48 - v46.n128_f32[0], (float)(v48 - v46.n128_f32[0]) == -INFINITY))
      {
        if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
        {
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v63);
          v42 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v63, (uint64_t)"LatticeWeightTpl::Divide, NaN or invalid number produced. ", 58);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v42, (uint64_t)"[dividing by zero?]  Returning zero.", 36);
          kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)v63);
        }
        v40 = INFINITY;
        v39 = INFINITY;
      }
      else
      {
        v41 = v39 == INFINITY;
        if (v40 == INFINITY)
          v41 = 1;
        if (v41)
        {
          v40 = INFINITY;
          v39 = INFINITY;
        }
      }
      v50 = __PAIR64__(LODWORD(v40), LODWORD(v39));
      fst::RemoveEpsLocalClass<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::ReweightPlusDefault<fst::LatticeWeightTpl<float>>>::Reweight(a1, a2, a3, (float32x2_t *)&v50);
    }
  }
  v43 = v58;
  if (v58 != v57)
  {
    v44 = 0;
    v45 = 0;
    v43 = v57;
    do
    {
      ++*(_DWORD *)(a1[5] + 4 * (int)a2);
      ++*(_DWORD *)(a1[2] + 4 * v43[2].i32[v44]);
      (*(void (**)(_QWORD, uint64_t, __n128))(*(_QWORD *)*a1 + 208))(*a1, a2, v37);
      ++v45;
      v43 = v57;
      v44 += 5;
    }
    while (v45 < 0xCCCCCCCCCCCCCCCDLL * (((char *)v58 - (char *)v57) >> 2));
  }
  if (v43)
  {
    v58 = v43;
    operator delete(v43);
  }
}

void sub_1AD9101DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29)
{
  kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)&a29);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

_QWORD *fst::RemoveEpsLocalClass<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::ReweightPlusDefault<fst::LatticeWeightTpl<float>>>::RemoveEpsPattern2(_QWORD *a1, uint64_t a2, uint64_t a3, float32x2_t *a4)
{
  uint64_t v8;
  int v9;
  _QWORD *result;
  float v11;
  float v12;
  __n128 v13;
  uint64_t v14;
  float v15;
  float v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  float32x2_t v20;
  int v21;
  __int32 v22;
  unint64_t v23;
  float v24;
  int v25;
  uint64_t v26;
  float v27;
  float v28[2];
  float32x2_t v29;
  int v30;
  _QWORD v31[2];
  int v32;
  _QWORD *v33;
  int32x2_t v34;
  _DWORD v35[2];
  uint64_t v36;
  float v37;
  float v38;

  v8 = a4[2].i32[0];
  v9 = *(_DWORD *)(a1[2] + 4 * v8);
  result = (*(_QWORD *(**)(uint64_t *__return_ptr))(*(_QWORD *)*a1 + 32))(&v36);
  v28[0] = *((float *)&v36 + 1);
  LODWORD(v31[0]) = v36;
  LODWORD(v33) = 2139095040;
  v38 = INFINITY;
  if (*(float *)&v36 != INFINITY || v28[0] != v38)
  {
    if (*a4)
      return result;
    v11 = *(float *)&v36 + a4[1].f32[0];
    v12 = *((float *)&v36 + 1) + a4[1].f32[1];
    (*(void (**)(_QWORD *__return_ptr, _QWORD, uint64_t))(*(_QWORD *)*a1 + 32))(v31, *a1, a2);
    LODWORD(v33) = HIDWORD(v31[0]);
    v28[0] = *(float *)v31;
    v38 = INFINITY;
    v37 = INFINITY;
    v13.n128_u32[0] = v31[0];
    if (*(float *)v31 == INFINITY)
    {
      v13.n128_u32[0] = v33;
      if (*(float *)&v33 == v37)
        ++*(_DWORD *)(a1[5] + 4 * (int)a2);
    }
    v14 = *a1;
    (*(void (**)(_QWORD *__return_ptr, _QWORD, uint64_t, __n128))(*(_QWORD *)*a1 + 32))(v31, *a1, a2, v13);
    v15 = *((float *)v31 + 1);
    v16 = *(float *)v31;
    if ((float)(*(float *)v31 + *((float *)v31 + 1)) >= (float)(v11 + v12)
      && ((float)(*(float *)v31 + *((float *)v31 + 1)) > (float)(v11 + v12) || *(float *)v31 > v11))
    {
      v15 = v12;
      v16 = v11;
    }
    *(float *)v35 = v16;
    *(float *)&v35[1] = v15;
    (*(void (**)(uint64_t, uint64_t, _DWORD *))(*(_QWORD *)v14 + 184))(v14, a2, v35);
    if (v9 == 1)
    {
      --*(_DWORD *)(a1[5] + 4 * v8);
      v17 = *a1;
      v34 = vdup_n_s32(0x7F800000u);
      (*(void (**)(uint64_t, uint64_t, int32x2_t *))(*(_QWORD *)v17 + 184))(v17, v8, &v34);
    }
    goto LABEL_32;
  }
  (*(void (**)(_QWORD, uint64_t, _QWORD **))(*(_QWORD *)*a1 + 296))(*a1, v8, &v33);
  while (*(_DWORD *)((*(uint64_t (**)(_QWORD *))(*v33 + 32))(v33) + 16) == *((_DWORD *)a1 + 2))
    (*(void (**)(_QWORD *))(*v33 + 40))(v33);
  v18 = (*(uint64_t (**)(_QWORD *))(*v33 + 32))(v33);
  v19 = *(_QWORD *)v18;
  v31[0] = *(_QWORD *)v18;
  v20 = *(float32x2_t *)(v18 + 8);
  v31[1] = v20;
  v21 = *(_DWORD *)(v18 + 16);
  v32 = v21;
  v22 = a4->i32[0];
  if (a4->i32[0] && (_DWORD)v19 || (v23 = HIDWORD(v19), v24 = a4->f32[1], v24 != 0.0) && HIDWORD(v19))
  {
    v25 = 0;
  }
  else
  {
    v26 = v21;
    v29 = vadd_f32(v20, a4[1]);
    if (v22)
      LODWORD(v19) = v22;
    if (v24 == 0.0)
      v27 = *(float *)&v23;
    else
      v27 = v24;
    LODWORD(v28[0]) = v19;
    v28[1] = v27;
    v30 = v21;
    if (v9 == 1)
    {
      --*(_DWORD *)(a1[5] + 4 * v8);
      --*(_DWORD *)(a1[2] + 4 * v21);
      v32 = *((_DWORD *)a1 + 2);
      (*(void (**)(_QWORD *, _QWORD *))(*v33 + 88))(v33, v31);
    }
    ++*(_DWORD *)(a1[5] + 4 * (int)a2);
    ++*(_DWORD *)(a1[2] + 4 * v26);
    (*(void (**)(_QWORD, uint64_t, float *))(*(_QWORD *)*a1 + 208))(*a1, a2, v28);
    v25 = 1;
  }
  result = v33;
  if (v33)
    result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v33 + 8))(v33);
  if (v25)
  {
LABEL_32:
    --*(_DWORD *)(a1[5] + 4 * (int)a2);
    --*(_DWORD *)(a1[2] + 4 * v8);
    a4[2].i32[0] = *((_DWORD *)a1 + 2);
    (*(void (**)(_QWORD, uint64_t, _QWORD *))(*(_QWORD *)*a1 + 296))(*a1, a2, v31);
    (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)v31[0] + 64))(v31[0], a3);
    (*(void (**)(_QWORD, float32x2_t *))(*(_QWORD *)v31[0] + 88))(v31[0], a4);
    result = (_QWORD *)v31[0];
    if (v31[0])
      return (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v31[0] + 8))(v31[0]);
  }
  return result;
}

void sub_1AD910618(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  if (a16)
    (*(void (**)(uint64_t))(*(_QWORD *)a16 + 8))(a16);
  _Unwind_Resume(exception_object);
}

uint64_t fst::RemoveEpsLocalClass<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::ReweightPlusDefault<fst::LatticeWeightTpl<float>>>::Reweight(_QWORD *a1, uint64_t a2, uint64_t a3, float32x2_t *a4)
{
  float32x2_t *v7;
  uint64_t v8;
  float v9;
  float v10;
  float v11;
  float v12;
  _QWORD *v14;
  _BOOL4 v15;
  uint64_t v16;
  uint64_t v17;
  float v18;
  float v19;
  _QWORD *v20;
  uint64_t result;
  int32x2_t v22;
  uint64_t v23;
  float v24;
  float v25;
  int v26;
  uint64_t v27;
  _QWORD v28[2];
  unsigned __int32 v29;
  uint64_t v30;
  float v31;
  int v32;
  _QWORD v33[34];

  (*(void (**)(_QWORD, uint64_t, uint64_t *))(*(_QWORD *)*a1 + 296))(*a1, a2, &v30);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v30 + 64))(v30, a3);
  v7 = (float32x2_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v30 + 32))(v30);
  v28[0] = *v7;
  v29 = v7[2].u32[0];
  v28[1] = vadd_f32(v7[1], *a4);
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v30 + 88))(v30, v28);
  (*(void (**)(_QWORD, _QWORD, uint64_t *))(*(_QWORD *)*a1 + 296))(*a1, v29, &v27);
  while (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v27 + 24))(v27))
  {
    v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v27 + 32))(v27);
    v23 = *(_QWORD *)v8;
    v9 = *(float *)(v8 + 8);
    v10 = *(float *)(v8 + 12);
    v24 = v9;
    v25 = v10;
    v26 = *(_DWORD *)(v8 + 16);
    if (v26 != *((_DWORD *)a1 + 2))
    {
      v11 = v9 - a4->f32[0];
      v12 = v10 - a4->f32[1];
      if (v11 == -INFINITY || v12 == -INFINITY)
      {
        if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
        {
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v33);
          v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, (uint64_t)"LatticeWeightTpl::Divide, NaN or invalid number produced. ", 58);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"[dividing by zero?]  Returning zero.", 36);
          kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)v33);
        }
        v11 = INFINITY;
        v12 = INFINITY;
      }
      else
      {
        v15 = v11 == INFINITY;
        if (v12 == INFINITY)
          v15 = 1;
        if (v15)
        {
          v11 = INFINITY;
          v12 = INFINITY;
        }
      }
      v24 = v11;
      v25 = v12;
      (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v27 + 88))(v27, &v23);
    }
    (*(void (**)(uint64_t))(*(_QWORD *)v27 + 40))(v27);
  }
  if (v27)
    (*(void (**)(uint64_t))(*(_QWORD *)v27 + 8))(v27);
  (*(void (**)(uint64_t *__return_ptr, _QWORD, _QWORD))(*(_QWORD *)*a1 + 32))(&v23, *a1, v29);
  LODWORD(v27) = HIDWORD(v23);
  LODWORD(v33[0]) = v23;
  v32 = 2139095040;
  v31 = INFINITY;
  if (*(float *)&v23 != INFINITY || *(float *)&v27 != v31)
  {
    v16 = *a1;
    v17 = v29;
    v18 = *(float *)&v23 - a4->f32[0];
    if (v18 == -INFINITY || (v19 = *((float *)&v23 + 1) - a4->f32[1], v19 == -INFINITY))
    {
      if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
      {
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v33);
        v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, (uint64_t)"LatticeWeightTpl::Divide, NaN or invalid number produced. ", 58);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"[dividing by zero?]  Returning zero.", 36);
        kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)v33);
      }
    }
    else if (v18 != INFINITY && v19 != INFINITY)
    {
      *(float *)v22.i32 = *(float *)&v23 - a4->f32[0];
      *(float *)&v22.i32[1] = v19;
LABEL_30:
      (*(void (**)(uint64_t, uint64_t, int32x2_t *))(*(_QWORD *)v16 + 184))(v16, v17, &v22);
      goto LABEL_31;
    }
    v22 = vdup_n_s32(0x7F800000u);
    goto LABEL_30;
  }
LABEL_31:
  result = v30;
  if (v30)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v30 + 8))(v30);
  return result;
}

void sub_1AD910988(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)va);
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(a1);
}

void quasar::SpeechRequestResultData::addDump(uint64_t a1, __int128 *a2, const std::string *a3)
{
  std::mutex *v6;
  uint64_t *v7;
  __int128 *v8;

  v6 = (std::mutex *)(a1 + 192);
  std::mutex::lock((std::mutex *)(a1 + 192));
  v8 = a2;
  v7 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a1 + 304), (const void **)a2, (uint64_t)&std::piecewise_construct, &v8);
  std::string::operator=((std::string *)(v7 + 7), a3);
  std::mutex::unlock(v6);
}

void sub_1AD910A6C(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void quasar::SpeechRequestResultData::addDump(uint64_t a1, __int128 *a2, double a3)
{
  std::string v5;

  std::to_string(&v5, a3);
  quasar::SpeechRequestResultData::addDump(a1, a2, &v5);
  if (SHIBYTE(v5.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v5.__r_.__value_.__l.__data_);
}

void sub_1AD910AD0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void quasar::SpeechRequestResultData::addAA(uint64_t a1, __int128 *a2, const std::string *a3)
{
  std::mutex *v6;
  uint64_t *v7;
  __int128 *v8;

  v6 = (std::mutex *)(a1 + 192);
  std::mutex::lock((std::mutex *)(a1 + 192));
  v8 = a2;
  v7 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a1 + 280), (const void **)a2, (uint64_t)&std::piecewise_construct, &v8);
  std::string::operator=((std::string *)(v7 + 7), a3);
  std::mutex::unlock(v6);
}

void sub_1AD910B60(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void quasar::SpeechRequestResultData::appendAA(uint64_t a1, __int128 *a2, uint64_t a3, uint64_t a4)
{
  std::mutex *v8;
  uint64_t *v9;
  std::string *v10;
  int v11;
  const std::string::value_type *v12;
  std::string::size_type v13;
  int v14;
  const std::string::value_type *v15;
  std::string::size_type v16;
  __int128 *v17;

  v8 = (std::mutex *)(a1 + 192);
  std::mutex::lock((std::mutex *)(a1 + 192));
  v17 = a2;
  v9 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a1 + 280), (const void **)a2, (uint64_t)&std::piecewise_construct, &v17);
  v10 = (std::string *)(v9 + 7);
  if (*((char *)v9 + 79) < 0)
  {
    if (!v9[8])
      goto LABEL_12;
  }
  else if (!*((_BYTE *)v9 + 79))
  {
    goto LABEL_12;
  }
  v11 = *(char *)(a4 + 23);
  if (v11 >= 0)
    v12 = (const std::string::value_type *)a4;
  else
    v12 = *(const std::string::value_type **)a4;
  if (v11 >= 0)
    v13 = *(unsigned __int8 *)(a4 + 23);
  else
    v13 = *(_QWORD *)(a4 + 8);
  std::string::append((std::string *)(v9 + 7), v12, v13);
LABEL_12:
  v14 = *(char *)(a3 + 23);
  if (v14 >= 0)
    v15 = (const std::string::value_type *)a3;
  else
    v15 = *(const std::string::value_type **)a3;
  if (v14 >= 0)
    v16 = *(unsigned __int8 *)(a3 + 23);
  else
    v16 = *(_QWORD *)(a3 + 8);
  std::string::append(v10, v15, v16);
  std::mutex::unlock(v8);
}

void sub_1AD910C48(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void quasar::SpeechRequestResultData::addAA(uint64_t a1, __int128 *a2, double *a3, char a4)
{
  std::mutex *v8;
  double v9;
  uint64_t *v10;
  double v11;
  __int128 *v12;

  v8 = (std::mutex *)(a1 + 192);
  std::mutex::lock((std::mutex *)(a1 + 192));
  if ((a4 & 1) != 0
    || a1 + 264 == std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::find<std::string>(a1 + 256, (const void **)a2))
  {
    v11 = *a3;
    v12 = a2;
    *((double *)std::__tree<std::__value_type<std::string,quasar::LmeDataFactoryBase::Word const*>,std::__map_value_compare<std::string,std::__value_type<std::string,quasar::LmeDataFactoryBase::Word const*>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,quasar::LmeDataFactoryBase::Word const*>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a1 + 256), (const void **)a2, (uint64_t)&std::piecewise_construct, &v12)+ 7) = v11;
  }
  else
  {
    v9 = *a3;
    v12 = a2;
    v10 = std::__tree<std::__value_type<std::string,quasar::LmeDataFactoryBase::Word const*>,std::__map_value_compare<std::string,std::__value_type<std::string,quasar::LmeDataFactoryBase::Word const*>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,quasar::LmeDataFactoryBase::Word const*>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a1 + 256), (const void **)a2, (uint64_t)&std::piecewise_construct, &v12);
    *((double *)v10 + 7) = v9 + *((double *)v10 + 7);
  }
  std::mutex::unlock(v8);
}

void sub_1AD910D34(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void quasar::SpeechRequestResultData::addDumpAA(uint64_t a1, __int128 *a2, const std::string *a3)
{
  quasar::SpeechRequestResultData::addDump(a1, a2, a3);
  quasar::SpeechRequestResultData::addAA(a1, a2, a3);
}

void quasar::SpeechRequestResultData::addDumpAA(uint64_t a1, __int128 *a2, char a3, double a4)
{
  double v7;

  v7 = a4;
  quasar::SpeechRequestResultData::addDump(a1, a2, a4);
  quasar::SpeechRequestResultData::addAA(a1, a2, &v7, a3);
}

void quasar::SpeechRequestResultData::storeClientConfusionNetwork(uint64_t a1, uint64_t *a2)
{
  std::mutex *v4;

  v4 = (std::mutex *)(a1 + 192);
  std::mutex::lock((std::mutex *)(a1 + 192));
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::operator=[abi:ne180100]((_QWORD *)(a1 + 328), a2);
  std::mutex::unlock(v4);
}

void quasar::SpeechRequestResultData::storeServerConfusionNetwork(uint64_t a1, uint64_t *a2)
{
  std::mutex *v4;

  v4 = (std::mutex *)(a1 + 192);
  std::mutex::lock((std::mutex *)(a1 + 192));
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::operator=[abi:ne180100]((_QWORD *)(a1 + 344), a2);
  std::mutex::unlock(v4);
}

void quasar::SpeechRequestResultData::storePhoneticMatchResult(std::mutex *this, const quasar::PhoneticMatchResult *a2)
{
  std::mutex *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;

  v4 = this + 3;
  std::mutex::lock(this + 3);
  v5 = *(_QWORD *)&this[2].__m_.__opaque[32];
  v6 = *(_QWORD *)&this[2].__m_.__opaque[40];
  v7 = (uint64_t *)&this[2].__m_.__opaque[32];
  if (v5 != v6)
  {
    while (*(float *)(v5 + 12) > *((float *)a2 + 3))
    {
      v5 += 72;
      if (v5 == v6)
      {
        v5 = v6;
        break;
      }
    }
  }
  std::vector<quasar::PhoneticMatchResult>::insert(v7, v5, (unint64_t)a2);
  std::mutex::unlock(v4);
}

void sub_1AD910ED0(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

_OWORD *std::vector<quasar::PhoneticMatchResult>::insert(uint64_t *a1, uint64_t a2, unint64_t a3)
{
  _OWORD *v4;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  int v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  char *v17;
  void *v19;
  char *v20;
  char *v21;
  char *v22;
  uint64_t v23;

  v4 = (_OWORD *)a2;
  v7 = *a1;
  v6 = a1[1];
  v8 = 0x8E38E38E38E38E39 * ((a2 - *a1) >> 3);
  v11 = a1[2];
  v9 = (uint64_t)(a1 + 2);
  v10 = v11;
  if (v6 >= v11)
  {
    v14 = 0x8E38E38E38E38E39 * ((uint64_t)(v6 - v7) >> 3) + 1;
    if (v14 > 0x38E38E38E38E38ELL)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v15 = 0x8E38E38E38E38E39 * ((uint64_t)(v10 - v7) >> 3);
    if (2 * v15 > v14)
      v14 = 2 * v15;
    if (v15 >= 0x1C71C71C71C71C7)
      v16 = 0x38E38E38E38E38ELL;
    else
      v16 = v14;
    v23 = v9;
    if (v16)
      v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::TranslationToken>>(v9, v16);
    else
      v17 = 0;
    v19 = v17;
    v20 = &v17[72 * v8];
    v21 = v20;
    v22 = &v17[72 * v16];
    std::__split_buffer<quasar::PhoneticMatchResult>::push_back[abi:ne180100](&v19, a3);
    v4 = (_OWORD *)std::vector<quasar::PhoneticMatchResult>::__swap_out_circular_buffer(a1, &v19, (uint64_t)v4);
    std::__split_buffer<quasar::PhoneticMatchResult>::~__split_buffer(&v19);
  }
  else if (a2 == v6)
  {
    std::allocator<quasar::PhoneticMatchResult>::construct[abi:ne180100]<quasar::PhoneticMatchResult,quasar::PhoneticMatchResult const&>(v9, a2, a3);
    a1[1] = (uint64_t)v4 + 72;
  }
  else
  {
    std::vector<quasar::PhoneticMatchResult>::__move_range((uint64_t)a1, a2, v6, a2 + 72);
    if ((unint64_t)v4 <= a3)
      a3 += 72 * (a1[1] > a3);
    *v4 = *(_OWORD *)a3;
    if (v4 != (_OWORD *)a3)
      std::vector<quasar::PhoneticMatchAlignmentSpan>::__assign_with_size[abi:ne180100]<quasar::PhoneticMatchAlignmentSpan*,quasar::PhoneticMatchAlignmentSpan*>(v7 + 72 * v8 + 16, *(uint64_t **)(a3 + 16), *(uint64_t **)(a3 + 24), 0x8E38E38E38E38E39 * ((uint64_t)(*(_QWORD *)(a3 + 24) - *(_QWORD *)(a3 + 16)) >> 3));
    v12 = v7 + 72 * v8;
    std::string::operator=((std::string *)(v12 + 40), (const std::string *)(a3 + 40));
    v13 = *(_DWORD *)(a3 + 67);
    *(_DWORD *)(v12 + 64) = *(_DWORD *)(a3 + 64);
    *(_DWORD *)(v12 + 67) = v13;
  }
  return v4;
}

void sub_1AD9110C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  uint64_t v10;
  uint64_t v11;

  *(_QWORD *)(v11 + 8) = v10;
  _Unwind_Resume(exception_object);
}

void quasar::SpeechRequestResultData::storePhoneticMatchDecoderStats(uint64_t a1, __int128 *a2, std::string::value_type a3, std::string::value_type a4, std::string::value_type a5, float a6, float a7)
{
  std::mutex *v14;
  std::string __p;

  v14 = (std::mutex *)(a1 + 192);
  std::mutex::lock((std::mutex *)(a1 + 192));
  quasar::PhoneticMatchDecoderStat::PhoneticMatchDecoderStat(&__p, a2, a3, a4, a5, a6, a7);
  std::vector<quasar::PhoneticMatchDecoderStat>::push_back[abi:ne180100]((uint64_t *)(a1 + 144), (__int128 *)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  std::mutex::unlock(v14);
}

void sub_1AD911188(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  std::mutex *v15;

  if (a15 < 0)
    operator delete(__p);
  std::mutex::unlock(v15);
  _Unwind_Resume(a1);
}

uint64_t std::vector<quasar::PhoneticMatchDecoderStat>::push_back[abi:ne180100](uint64_t *a1, __int128 *a2)
{
  uint64_t result;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  char *v15;
  char *v16;
  __int128 v17;
  uint64_t v18;
  _QWORD v19[5];

  v6 = a1[2];
  result = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD *)(result - 8);
  if (v7 >= v6)
  {
    v11 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v7 - *a1) >> 3);
    v12 = v11 + 1;
    if (v11 + 1 > 0x666666666666666)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v13 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v5 - *a1) >> 3);
    if (2 * v13 > v12)
      v12 = 2 * v13;
    if (v13 >= 0x333333333333333)
      v14 = 0x666666666666666;
    else
      v14 = v12;
    v19[4] = result;
    if (v14)
      v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::PronChoice>>(result, v14);
    else
      v15 = 0;
    v16 = &v15[40 * v11];
    v19[0] = v15;
    v19[1] = v16;
    v19[3] = &v15[40 * v14];
    v17 = *a2;
    *((_QWORD *)v16 + 2) = *((_QWORD *)a2 + 2);
    *(_OWORD *)v16 = v17;
    *((_QWORD *)a2 + 1) = 0;
    *((_QWORD *)a2 + 2) = 0;
    *(_QWORD *)a2 = 0;
    v18 = *((_QWORD *)a2 + 3);
    *((_DWORD *)v16 + 8) = *((_DWORD *)a2 + 8);
    *((_QWORD *)v16 + 3) = v18;
    v19[2] = v16 + 40;
    std::vector<quasar::PhoneticMatchDecoderStat>::__swap_out_circular_buffer(a1, v19);
    v10 = a1[1];
    result = std::__split_buffer<quasar::PhoneticMatchDecoderStat>::~__split_buffer((uint64_t)v19);
  }
  else
  {
    v8 = *a2;
    *(_QWORD *)(v7 + 16) = *((_QWORD *)a2 + 2);
    *(_OWORD *)v7 = v8;
    *((_QWORD *)a2 + 1) = 0;
    *((_QWORD *)a2 + 2) = 0;
    *(_QWORD *)a2 = 0;
    v9 = *((_QWORD *)a2 + 3);
    *(_DWORD *)(v7 + 32) = *((_DWORD *)a2 + 8);
    *(_QWORD *)(v7 + 24) = v9;
    v10 = v7 + 40;
    a1[1] = v7 + 40;
  }
  a1[1] = v10;
  return result;
}

void sub_1AD9112F8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<quasar::PhoneticMatchDecoderStat>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void quasar::SpeechRequestResultData::getAALogData(uint64_t a1, uint64_t **a2, uint64_t **a3, _QWORD *a4, _QWORD *a5)
{
  std::mutex *v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  BOOL v15;
  _QWORD *v16;
  uint64_t *v17;
  _QWORD *v18;
  _QWORD *v19;
  __int128 *v20;

  v10 = (std::mutex *)(a1 + 192);
  std::mutex::lock((std::mutex *)(a1 + 192));
  v11 = *(_QWORD **)(a1 + 256);
  if (v11 != (_QWORD *)(a1 + 264))
  {
    do
    {
      v12 = v11[7];
      v20 = (__int128 *)(v11 + 4);
      std::__tree<std::__value_type<std::string,quasar::LmeDataFactoryBase::Word const*>,std::__map_value_compare<std::string,std::__value_type<std::string,quasar::LmeDataFactoryBase::Word const*>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,quasar::LmeDataFactoryBase::Word const*>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a2, (const void **)v11 + 4, (uint64_t)&std::piecewise_construct, &v20)[7] = v12;
      v13 = (_QWORD *)v11[1];
      if (v13)
      {
        do
        {
          v14 = v13;
          v13 = (_QWORD *)*v13;
        }
        while (v13);
      }
      else
      {
        do
        {
          v14 = (_QWORD *)v11[2];
          v15 = *v14 == (_QWORD)v11;
          v11 = v14;
        }
        while (!v15);
      }
      v11 = v14;
    }
    while (v14 != (_QWORD *)(a1 + 264));
  }
  v16 = *(_QWORD **)(a1 + 280);
  if (v16 != (_QWORD *)(a1 + 288))
  {
    do
    {
      v20 = (__int128 *)(v16 + 4);
      v17 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a3, (const void **)v16 + 4, (uint64_t)&std::piecewise_construct, &v20);
      std::string::operator=((std::string *)(v17 + 7), (const std::string *)(v16 + 7));
      v18 = (_QWORD *)v16[1];
      if (v18)
      {
        do
        {
          v19 = v18;
          v18 = (_QWORD *)*v18;
        }
        while (v18);
      }
      else
      {
        do
        {
          v19 = (_QWORD *)v16[2];
          v15 = *v19 == (_QWORD)v16;
          v16 = v19;
        }
        while (!v15);
      }
      v16 = v19;
    }
    while (v19 != (_QWORD *)(a1 + 288));
  }
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::operator=[abi:ne180100](a4, (uint64_t *)(a1 + 328));
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::operator=[abi:ne180100](a5, (uint64_t *)(a1 + 344));
  std::mutex::unlock(v10);
}

void sub_1AD911480(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void quasar::SpeechRequestResultData::getDumpData(std::mutex *this@<X0>, std::vector<std::pair<std::string, std::string>> *a2@<X8>)
{
  std::mutex *v4;
  __int128 *v5;
  char *v6;
  char *v7;
  char *v8;
  BOOL v9;
  std::string v10;
  void *__p;
  char v12;

  v4 = this + 3;
  std::mutex::lock(this + 3);
  a2->__begin_ = 0;
  a2->__end_ = 0;
  a2->__end_cap_.__value_ = 0;
  v5 = *(__int128 **)&this[4].__m_.__opaque[40];
  v6 = &this[4].__m_.__opaque[48];
  if (v5 != (__int128 *)v6)
  {
    do
    {
      std::pair<std::string,std::string>::pair[abi:ne180100]<true,0>(&v10, v5 + 2, (__int128 *)((char *)v5 + 56));
      std::vector<std::pair<std::string,std::string>>::push_back[abi:ne180100](a2, (__int128 *)&v10);
      if (v12 < 0)
        operator delete(__p);
      if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v10.__r_.__value_.__l.__data_);
      v7 = (char *)*((_QWORD *)v5 + 1);
      if (v7)
      {
        do
        {
          v8 = v7;
          v7 = *(char **)v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          v8 = (char *)*((_QWORD *)v5 + 2);
          v9 = *(_QWORD *)v8 == (_QWORD)v5;
          v5 = (__int128 *)v8;
        }
        while (!v9);
      }
      v5 = (__int128 *)v8;
    }
    while (v8 != v6);
  }
  std::mutex::unlock(v4);
}

void sub_1AD911568(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::mutex *v9;

  std::pair<std::string,std::string>::~pair((uint64_t)&a9);
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100](&a9);
  std::mutex::unlock(v9);
  _Unwind_Resume(a1);
}

void quasar::SpeechRequestResultData::addUttInfo(uint64_t a1, __int128 *a2)
{
  std::mutex *v4;

  v4 = (std::mutex *)(a1 + 192);
  std::mutex::lock((std::mutex *)(a1 + 192));
  std::vector<std::shared_ptr<quasar::FeatureExtractor>>::push_back[abi:ne180100]((char **)(a1 + 360), a2);
  std::mutex::unlock(v4);
}

void sub_1AD9115DC(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void quasar::SpeechRequestResultData::getUttInfos(std::mutex *this@<X0>, uint64_t a2@<X8>)
{
  std::mutex *v4;

  v4 = this + 3;
  std::mutex::lock(this + 3);
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  std::vector<std::shared_ptr<quasar::UttInfo>>::__init_with_size[abi:ne180100]<std::shared_ptr<quasar::UttInfo>*,std::shared_ptr<quasar::UttInfo>*>((char *)a2, *(_QWORD **)&this[5].__m_.__opaque[32], *(_QWORD **)&this[5].__m_.__opaque[40], (uint64_t)(*(_QWORD *)&this[5].__m_.__opaque[40] - *(_QWORD *)&this[5].__m_.__opaque[32]) >> 4);
  std::mutex::unlock(v4);
}

void sub_1AD911644(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

std::string *quasar::PhoneticMatchDecoderStat::PhoneticMatchDecoderStat(std::string *this, __int128 *a2, std::string::value_type a3, std::string::value_type a4, std::string::value_type a5, float a6, float a7)
{
  __int128 v13;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v13 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v13;
  }
  this[1].__r_.__value_.__s.__data_[0] = a3;
  this[1].__r_.__value_.__s.__data_[1] = a4;
  this[1].__r_.__value_.__s.__data_[2] = a5;
  *((float *)this[1].__r_.__value_.__r.__words + 1) = a6;
  *(float *)&this[1].__r_.__value_.__r.__words[1] = a7;
  return this;
}

std::string *std::pair<std::string,std::string>::pair[abi:ne180100]<true,0>(std::string *this, __int128 *a2, __int128 *a3)
{
  __int128 v5;
  std::string *v6;
  __int128 v7;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v5 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v5;
  }
  v6 = this + 1;
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v6, *(const std::string::value_type **)a3, *((_QWORD *)a3 + 1));
  }
  else
  {
    v7 = *a3;
    this[1].__r_.__value_.__r.__words[2] = *((_QWORD *)a3 + 2);
    *(_OWORD *)&v6->__r_.__value_.__l.__data_ = v7;
  }
  return this;
}

void sub_1AD911750(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t std::vector<quasar::PhoneticMatchResult>::__move_range(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  __int128 v10;
  int v11;
  char v13;

  v6 = *(_QWORD *)(a1 + 8);
  v7 = a2 + v6 - a4;
  v8 = v6;
  if (v7 < a3)
  {
    v9 = v7;
    v8 = *(_QWORD *)(a1 + 8);
    do
    {
      *(_OWORD *)v8 = *(_OWORD *)v9;
      *(_QWORD *)(v8 + 24) = 0;
      *(_QWORD *)(v8 + 32) = 0;
      *(_QWORD *)(v8 + 16) = 0;
      *(_OWORD *)(v8 + 16) = *(_OWORD *)(v9 + 16);
      *(_QWORD *)(v8 + 32) = *(_QWORD *)(v9 + 32);
      *(_QWORD *)(v9 + 16) = 0;
      *(_QWORD *)(v9 + 24) = 0;
      *(_QWORD *)(v9 + 32) = 0;
      v10 = *(_OWORD *)(v9 + 40);
      *(_QWORD *)(v8 + 56) = *(_QWORD *)(v9 + 56);
      *(_OWORD *)(v8 + 40) = v10;
      *(_QWORD *)(v9 + 48) = 0;
      *(_QWORD *)(v9 + 56) = 0;
      *(_QWORD *)(v9 + 40) = 0;
      v11 = *(_DWORD *)(v9 + 64);
      *(_DWORD *)(v8 + 67) = *(_DWORD *)(v9 + 67);
      *(_DWORD *)(v8 + 64) = v11;
      v8 += 72;
      v9 += 72;
    }
    while (v9 < a3);
  }
  *(_QWORD *)(a1 + 8) = v8;
  return std::__move_backward_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<quasar::PhoneticMatchResult *,quasar::PhoneticMatchResult *,quasar::PhoneticMatchResult *>((uint64_t)&v13, a2, v7, v6);
}

void std::__split_buffer<quasar::PhoneticMatchResult>::push_back[abi:ne180100](_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  int64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  unint64_t v16;
  unint64_t v17;
  char *v18;
  char *v19;
  __int128 v20;
  int v21;
  int64x2_t v22;
  uint64_t v23;
  void *v24;
  int64x2_t v25;
  uint64_t v26;
  uint64_t v27;

  v4 = a1[2];
  if (v4 == a1[3])
  {
    v5 = a1[1];
    if (v5 <= *a1)
    {
      if (v4 == *a1)
        v10 = 1;
      else
        v10 = 0x1C71C71C71C71C72 * ((v4 - *a1) >> 3);
      v11 = v10 >> 2;
      v12 = a1[4];
      v27 = a1[4];
      v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::TranslationToken>>(v12, v10);
      v15 = &v13[72 * v11];
      v16 = a1[1];
      v17 = a1[2] - v16;
      if (v17)
      {
        v18 = &v15[v17];
        v19 = &v13[72 * v11];
        do
        {
          *(_OWORD *)v19 = *(_OWORD *)v16;
          *((_QWORD *)v19 + 3) = 0;
          *((_QWORD *)v19 + 4) = 0;
          *((_QWORD *)v19 + 2) = 0;
          *((_OWORD *)v19 + 1) = *(_OWORD *)(v16 + 16);
          *((_QWORD *)v19 + 4) = *(_QWORD *)(v16 + 32);
          *(_QWORD *)(v16 + 16) = 0;
          *(_QWORD *)(v16 + 24) = 0;
          *(_QWORD *)(v16 + 32) = 0;
          v20 = *(_OWORD *)(v16 + 40);
          *((_QWORD *)v19 + 7) = *(_QWORD *)(v16 + 56);
          *(_OWORD *)(v19 + 40) = v20;
          *(_QWORD *)(v16 + 48) = 0;
          *(_QWORD *)(v16 + 56) = 0;
          *(_QWORD *)(v16 + 40) = 0;
          v21 = *(_DWORD *)(v16 + 64);
          *(_DWORD *)(v19 + 67) = *(_DWORD *)(v16 + 67);
          *((_DWORD *)v19 + 16) = v21;
          v19 += 72;
          v16 += 72;
        }
        while (v19 != v18);
        v22 = *(int64x2_t *)(a1 + 1);
      }
      else
      {
        v22 = vdupq_n_s64(v16);
        v18 = &v13[72 * v11];
      }
      v24 = (void *)*a1;
      *a1 = v13;
      a1[1] = v15;
      v25 = v22;
      v23 = a1[3];
      a1[2] = v18;
      a1[3] = &v13[72 * v14];
      v26 = v23;
      std::__split_buffer<quasar::PhoneticMatchResult>::~__split_buffer(&v24);
      v4 = a1[2];
    }
    else
    {
      v6 = 0x8E38E38E38E38E39 * ((uint64_t)(v5 - *a1) >> 3);
      if (v6 >= -1)
        v7 = v6 + 1;
      else
        v7 = v6 + 2;
      v8 = -9 * (v7 >> 1);
      std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<quasar::PhoneticMatchResult *,quasar::PhoneticMatchResult *,quasar::PhoneticMatchResult *>((uint64_t)&v24, v5, v4, v5 - 72 * (v7 >> 1));
      v4 = v9;
      a1[1] += 8 * v8;
      a1[2] = v9;
    }
  }
  std::allocator<quasar::PhoneticMatchResult>::construct[abi:ne180100]<quasar::PhoneticMatchResult,quasar::PhoneticMatchResult const&>(a1[4], v4, a2);
  a1[2] += 72;
}

uint64_t std::vector<quasar::PhoneticMatchResult>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v6 = a2[1];
  v7 = (uint64_t)(a1 + 2);
  std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<quasar::PhoneticMatchResult>,std::reverse_iterator<quasar::PhoneticMatchResult*>,std::reverse_iterator<quasar::PhoneticMatchResult*>,std::reverse_iterator<quasar::PhoneticMatchResult*>>((uint64_t)(a1 + 2), a3, a3, *a1, *a1, v6, v6);
  a2[1] = v8;
  a2[2] = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<quasar::PhoneticMatchResult>,quasar::PhoneticMatchResult*,quasar::PhoneticMatchResult*,quasar::PhoneticMatchResult*>(v7, a3, a1[1], a2[2]);
  v9 = *a1;
  *a1 = a2[1];
  a2[1] = v9;
  v10 = a1[1];
  a1[1] = a2[2];
  a2[2] = v10;
  v11 = a1[2];
  a1[2] = a2[3];
  a2[3] = v11;
  *a2 = a2[1];
  return v6;
}

void std::allocator<quasar::PhoneticMatchResult>::construct[abi:ne180100]<quasar::PhoneticMatchResult,quasar::PhoneticMatchResult const&>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  std::string *v5;
  __int128 v6;
  int v7;

  *(_OWORD *)a2 = *(_OWORD *)a3;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 32) = 0;
  std::vector<quasar::PhoneticMatchAlignmentSpan>::__init_with_size[abi:ne180100]<quasar::PhoneticMatchAlignmentSpan*,quasar::PhoneticMatchAlignmentSpan*>((_QWORD *)(a2 + 16), *(uint64_t **)(a3 + 16), *(uint64_t **)(a3 + 24), 0x8E38E38E38E38E39 * ((uint64_t)(*(_QWORD *)(a3 + 24) - *(_QWORD *)(a3 + 16)) >> 3));
  v5 = (std::string *)(a2 + 40);
  if (*(char *)(a3 + 63) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *(const std::string::value_type **)(a3 + 40), *(_QWORD *)(a3 + 48));
  }
  else
  {
    v6 = *(_OWORD *)(a3 + 40);
    *(_QWORD *)(a2 + 56) = *(_QWORD *)(a3 + 56);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
  v7 = *(_DWORD *)(a3 + 64);
  *(_DWORD *)(a2 + 67) = *(_DWORD *)(a3 + 67);
  *(_DWORD *)(a2 + 64) = v7;
}

void sub_1AD911B0C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::vector<quasar::PhoneticMatchAlignmentSpan>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<quasar::PhoneticMatchAlignmentSpan>::__init_with_size[abi:ne180100]<quasar::PhoneticMatchAlignmentSpan*,quasar::PhoneticMatchAlignmentSpan*>(_QWORD *result, uint64_t *a2, uint64_t *a3, unint64_t a4)
{
  _QWORD *v6;

  if (a4)
  {
    v6 = result;
    std::vector<quasar::TranslationToken>::__vallocate[abi:ne180100](result, a4);
    result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<quasar::PhoneticMatchAlignmentSpan>,quasar::PhoneticMatchAlignmentSpan*,quasar::PhoneticMatchAlignmentSpan*,quasar::PhoneticMatchAlignmentSpan*>((uint64_t)(v6 + 2), a2, a3, (_QWORD *)v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_1AD911B88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  std::vector<quasar::PhoneticMatchAlignmentSpan>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

_QWORD *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<quasar::PhoneticMatchAlignmentSpan>,quasar::PhoneticMatchAlignmentSpan*,quasar::PhoneticMatchAlignmentSpan*,quasar::PhoneticMatchAlignmentSpan*>(uint64_t a1, uint64_t *a2, uint64_t *a3, _QWORD *a4)
{
  _QWORD *v4;
  uint64_t *v6;
  _QWORD v9[3];
  char v10;
  _QWORD *v11;
  _QWORD *v12;

  v4 = a4;
  v11 = a4;
  v12 = a4;
  v9[0] = a1;
  v9[1] = &v11;
  v9[2] = &v12;
  v10 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      std::allocator<quasar::PhoneticMatchAlignmentSpan>::construct[abi:ne180100]<quasar::PhoneticMatchAlignmentSpan,quasar::PhoneticMatchAlignmentSpan&>(a1, v4, v6);
      v6 += 9;
      v4 = v12 + 9;
      v12 += 9;
    }
    while (v6 != a3);
  }
  v10 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<quasar::PhoneticMatchAlignmentSpan>,quasar::PhoneticMatchAlignmentSpan*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v9);
  return v4;
}

void sub_1AD911C3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<quasar::PhoneticMatchAlignmentSpan>,quasar::PhoneticMatchAlignmentSpan*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

_QWORD *std::allocator<quasar::PhoneticMatchAlignmentSpan>::construct[abi:ne180100]<quasar::PhoneticMatchAlignmentSpan,quasar::PhoneticMatchAlignmentSpan&>(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  std::vector<quasar::Token>::__init_with_size[abi:ne180100]<quasar::Token*,quasar::Token*>(a2, *a3, a3[1], 0x6DB6DB6DB6DB6DB7 * ((a3[1] - *a3) >> 5));
  a2[3] = 0;
  a2[4] = 0;
  a2[5] = 0;
  std::vector<quasar::Token>::__init_with_size[abi:ne180100]<quasar::Token*,quasar::Token*>(a2 + 3, a3[3], a3[4], 0x6DB6DB6DB6DB6DB7 * ((a3[4] - a3[3]) >> 5));
  a2[6] = 0;
  a2[7] = 0;
  a2[8] = 0;
  return std::vector<quasar::Token>::__init_with_size[abi:ne180100]<quasar::Token*,quasar::Token*>(a2 + 6, a3[6], a3[7], 0x6DB6DB6DB6DB6DB7 * ((a3[7] - a3[6]) >> 5));
}

void sub_1AD911CF4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<quasar::PhoneticMatchAlignmentSpan>,quasar::PhoneticMatchAlignmentSpan*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<quasar::PhoneticMatchAlignmentSpan>,quasar::PhoneticMatchAlignmentSpan*>::operator()[abi:ne180100]((uint64_t *)a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<quasar::PhoneticMatchAlignmentSpan>,quasar::PhoneticMatchAlignmentSpan*>::operator()[abi:ne180100](uint64_t *a1)
{
  void ***v1;
  void ***v2;
  void **v3;
  void **v4;
  uint64_t v5;

  v2 = (void ***)a1[1];
  v1 = (void ***)a1[2];
  v3 = *v1;
  v4 = *v2;
  if (*v1 != *v2)
  {
    v5 = *a1;
    do
    {
      v3 -= 9;
      std::allocator<quasar::PhoneticMatchAlignmentSpan>::destroy[abi:ne180100](v5, v3);
    }
    while (v3 != v4);
  }
}

uint64_t std::__move_backward_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<quasar::PhoneticMatchResult *,quasar::PhoneticMatchResult *,quasar::PhoneticMatchResult *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void **v10;
  __int128 v11;
  int v12;

  if (a3 != a2)
  {
    v7 = 0;
    do
    {
      v8 = a3 + v7;
      v9 = a4 + v7;
      *(_OWORD *)(a4 + v7 - 72) = *(_OWORD *)(a3 + v7 - 72);
      std::vector<quasar::PhoneticMatchAlignmentSpan>::__vdeallocate((void ***)(a4 + v7 - 56));
      *(_OWORD *)(v9 - 56) = *(_OWORD *)(a3 + v7 - 56);
      *(_QWORD *)(v9 - 40) = *(_QWORD *)(a3 + v7 - 40);
      *(_QWORD *)(v8 - 56) = 0;
      *(_QWORD *)(v8 - 48) = 0;
      *(_QWORD *)(v8 - 40) = 0;
      v10 = (void **)(a4 + v7 - 32);
      if (*(char *)(a4 + v7 - 9) < 0)
        operator delete(*v10);
      v11 = *(_OWORD *)(v8 - 32);
      *(_QWORD *)(v9 - 16) = *(_QWORD *)(v8 - 16);
      *(_OWORD *)v10 = v11;
      *(_BYTE *)(v8 - 9) = 0;
      *(_BYTE *)(v8 - 32) = 0;
      v12 = *(_DWORD *)(v8 - 8);
      *(_DWORD *)(v9 - 5) = *(_DWORD *)(v8 - 5);
      *(_DWORD *)(v9 - 8) = v12;
      v7 -= 72;
    }
    while (a3 + v7 != a2);
  }
  return a3;
}

void std::vector<quasar::PhoneticMatchAlignmentSpan>::__vdeallocate(void ***a1)
{
  void **v1;
  void **v3;
  void **v4;

  v1 = *a1;
  if (*a1)
  {
    v3 = a1[1];
    v4 = *a1;
    if (v3 != v1)
    {
      do
      {
        v3 -= 9;
        std::allocator<quasar::PhoneticMatchAlignmentSpan>::destroy[abi:ne180100]((uint64_t)(a1 + 2), v3);
      }
      while (v3 != v1);
      v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

void std::vector<quasar::PhoneticMatchAlignmentSpan>::__assign_with_size[abi:ne180100]<quasar::PhoneticMatchAlignmentSpan*,quasar::PhoneticMatchAlignmentSpan*>(uint64_t a1, uint64_t *a2, uint64_t *a3, unint64_t a4)
{
  uint64_t v8;
  void **v9;
  unint64_t v10;
  unint64_t v11;
  _QWORD *matched;
  uint64_t *v13;
  void **v14;
  void **v15;
  void **v16;
  char v17;
  char v18;

  v8 = a1 + 16;
  v9 = *(void ***)a1;
  if (0x8E38E38E38E38E39 * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 3) < a4)
  {
    std::vector<quasar::PhoneticMatchAlignmentSpan>::__vdeallocate((void ***)a1);
    if (a4 > 0x38E38E38E38E38ELL)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v10 = 0x1C71C71C71C71C72 * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 3);
    if (v10 <= a4)
      v10 = a4;
    if (0x8E38E38E38E38E39 * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 3) >= 0x1C71C71C71C71C7)
      v11 = 0x38E38E38E38E38ELL;
    else
      v11 = v10;
    std::vector<quasar::TranslationToken>::__vallocate[abi:ne180100]((_QWORD *)a1, v11);
    matched = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<quasar::PhoneticMatchAlignmentSpan>,quasar::PhoneticMatchAlignmentSpan*,quasar::PhoneticMatchAlignmentSpan*,quasar::PhoneticMatchAlignmentSpan*>(v8, a2, a3, *(_QWORD **)(a1 + 8));
    goto LABEL_11;
  }
  if (0x8E38E38E38E38E39 * ((uint64_t)(*(_QWORD *)(a1 + 8) - (_QWORD)v9) >> 3) < a4)
  {
    v13 = &a2[(uint64_t)(*(_QWORD *)(a1 + 8) - (_QWORD)v9) >> 3];
    std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<quasar::PhoneticMatchAlignmentSpan *,quasar::PhoneticMatchAlignmentSpan *,quasar::PhoneticMatchAlignmentSpan *>((uint64_t)&v17, a2, v13, (uint64_t)v9);
    matched = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<quasar::PhoneticMatchAlignmentSpan>,quasar::PhoneticMatchAlignmentSpan*,quasar::PhoneticMatchAlignmentSpan*,quasar::PhoneticMatchAlignmentSpan*>(v8, v13, a3, *(_QWORD **)(a1 + 8));
LABEL_11:
    *(_QWORD *)(a1 + 8) = matched;
    return;
  }
  std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<quasar::PhoneticMatchAlignmentSpan *,quasar::PhoneticMatchAlignmentSpan *,quasar::PhoneticMatchAlignmentSpan *>((uint64_t)&v18, a2, a3, (uint64_t)v9);
  v15 = v14;
  v16 = *(void ***)(a1 + 8);
  if (v16 != v14)
  {
    do
    {
      v16 -= 9;
      std::allocator<quasar::PhoneticMatchAlignmentSpan>::destroy[abi:ne180100](v8, v16);
    }
    while (v16 != v15);
  }
  *(_QWORD *)(a1 + 8) = v15;
}

void sub_1AD912070(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_1AD912078(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t *std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<quasar::PhoneticMatchAlignmentSpan *,quasar::PhoneticMatchAlignmentSpan *,quasar::PhoneticMatchAlignmentSpan *>(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t a4)
{
  uint64_t *v5;

  v5 = a2;
  if (a2 != a3)
  {
    do
    {
      if (v5 != (uint64_t *)a4)
      {
        std::vector<quasar::Token>::__assign_with_size[abi:ne180100]<quasar::Token*,quasar::Token*>(a4, *v5, v5[1], 0x6DB6DB6DB6DB6DB7 * ((v5[1] - *v5) >> 5));
        std::vector<quasar::Token>::__assign_with_size[abi:ne180100]<quasar::Token*,quasar::Token*>(a4 + 24, v5[3], v5[4], 0x6DB6DB6DB6DB6DB7 * ((v5[4] - v5[3]) >> 5));
        std::vector<quasar::Token>::__assign_with_size[abi:ne180100]<quasar::Token*,quasar::Token*>(a4 + 48, v5[6], v5[7], 0x6DB6DB6DB6DB6DB7 * ((v5[7] - v5[6]) >> 5));
      }
      v5 += 9;
      a4 += 72;
    }
    while (v5 != a3);
    return a3;
  }
  return v5;
}

uint64_t std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<quasar::PhoneticMatchResult *,quasar::PhoneticMatchResult *,quasar::PhoneticMatchResult *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  void **v7;
  __int128 v8;
  int v9;

  v5 = a2;
  if (a2 != a3)
  {
    do
    {
      *(_OWORD *)a4 = *(_OWORD *)v5;
      std::vector<quasar::PhoneticMatchAlignmentSpan>::__vdeallocate((void ***)(a4 + 16));
      *(_OWORD *)(a4 + 16) = *(_OWORD *)(v5 + 16);
      *(_QWORD *)(a4 + 32) = *(_QWORD *)(v5 + 32);
      *(_QWORD *)(v5 + 16) = 0;
      *(_QWORD *)(v5 + 24) = 0;
      *(_QWORD *)(v5 + 32) = 0;
      v7 = (void **)(a4 + 40);
      if (*(char *)(a4 + 63) < 0)
        operator delete(*v7);
      v8 = *(_OWORD *)(v5 + 40);
      *(_QWORD *)(a4 + 56) = *(_QWORD *)(v5 + 56);
      *(_OWORD *)v7 = v8;
      *(_BYTE *)(v5 + 63) = 0;
      *(_BYTE *)(v5 + 40) = 0;
      v9 = *(_DWORD *)(v5 + 64);
      *(_DWORD *)(a4 + 67) = *(_DWORD *)(v5 + 67);
      *(_DWORD *)(a4 + 64) = v9;
      a4 += 72;
      v5 += 72;
    }
    while (v5 != a3);
    return a3;
  }
  return v5;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<quasar::PhoneticMatchResult>,std::reverse_iterator<quasar::PhoneticMatchResult*>,std::reverse_iterator<quasar::PhoneticMatchResult*>,std::reverse_iterator<quasar::PhoneticMatchResult*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  __int128 v8;
  int v9;
  uint64_t v10;
  _QWORD v12[3];
  char v13;
  __int128 v14;
  __int128 v15;

  v7 = a7;
  *(_QWORD *)&v15 = a6;
  *((_QWORD *)&v15 + 1) = a7;
  v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  if (a3 == a5)
  {
    v10 = a6;
  }
  else
  {
    do
    {
      *(_OWORD *)(v7 - 72) = *(_OWORD *)(a3 - 72);
      *(_QWORD *)(v7 - 48) = 0;
      *(_QWORD *)(v7 - 40) = 0;
      *(_QWORD *)(v7 - 56) = 0;
      *(_OWORD *)(v7 - 56) = *(_OWORD *)(a3 - 56);
      *(_QWORD *)(v7 - 40) = *(_QWORD *)(a3 - 40);
      *(_QWORD *)(a3 - 56) = 0;
      *(_QWORD *)(a3 - 48) = 0;
      *(_QWORD *)(a3 - 40) = 0;
      v8 = *(_OWORD *)(a3 - 32);
      *(_QWORD *)(v7 - 16) = *(_QWORD *)(a3 - 16);
      *(_OWORD *)(v7 - 32) = v8;
      *(_QWORD *)(a3 - 24) = 0;
      *(_QWORD *)(a3 - 16) = 0;
      *(_QWORD *)(a3 - 32) = 0;
      v9 = *(_DWORD *)(a3 - 8);
      *(_DWORD *)(v7 - 5) = *(_DWORD *)(a3 - 5);
      *(_DWORD *)(v7 - 8) = v9;
      v7 = *((_QWORD *)&v15 + 1) - 72;
      *((_QWORD *)&v15 + 1) -= 72;
      a3 -= 72;
    }
    while (a3 != a5);
    v10 = v15;
  }
  v13 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<quasar::PhoneticMatchResult>,std::reverse_iterator<quasar::PhoneticMatchResult*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return v10;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<quasar::PhoneticMatchResult>,quasar::PhoneticMatchResult*,quasar::PhoneticMatchResult*,quasar::PhoneticMatchResult*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  __int128 v5;
  int v6;
  _QWORD v8[3];
  char v9;
  uint64_t v10;
  uint64_t v11;

  v4 = a4;
  v11 = a4;
  v10 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  v8[2] = &v11;
  if (a2 != a3)
  {
    do
    {
      *(_OWORD *)v4 = *(_OWORD *)a2;
      *(_QWORD *)(v4 + 24) = 0;
      *(_QWORD *)(v4 + 32) = 0;
      *(_QWORD *)(v4 + 16) = 0;
      *(_OWORD *)(v4 + 16) = *(_OWORD *)(a2 + 16);
      *(_QWORD *)(v4 + 32) = *(_QWORD *)(a2 + 32);
      *(_QWORD *)(a2 + 16) = 0;
      *(_QWORD *)(a2 + 24) = 0;
      *(_QWORD *)(a2 + 32) = 0;
      v5 = *(_OWORD *)(a2 + 40);
      *(_QWORD *)(v4 + 56) = *(_QWORD *)(a2 + 56);
      *(_OWORD *)(v4 + 40) = v5;
      *(_QWORD *)(a2 + 48) = 0;
      *(_QWORD *)(a2 + 56) = 0;
      *(_QWORD *)(a2 + 40) = 0;
      v6 = *(_DWORD *)(a2 + 64);
      *(_DWORD *)(v4 + 67) = *(_DWORD *)(a2 + 67);
      *(_DWORD *)(v4 + 64) = v6;
      v4 += 72;
      a2 += 72;
    }
    while (a2 != a3);
    v11 = v4;
  }
  v9 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<quasar::PhoneticMatchResult>,quasar::PhoneticMatchResult*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v8);
  return v4;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<quasar::PhoneticMatchResult>,std::reverse_iterator<quasar::PhoneticMatchResult*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<quasar::PhoneticMatchResult>,std::reverse_iterator<quasar::PhoneticMatchResult*>>::operator()[abi:ne180100]((uint64_t *)a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<quasar::PhoneticMatchResult>,std::reverse_iterator<quasar::PhoneticMatchResult*>>::operator()[abi:ne180100](uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(a1[2] + 8);
  v2 = *(_QWORD *)(a1[1] + 8);
  if (v1 != v2)
  {
    v3 = *a1;
    do
    {
      std::allocator<quasar::PhoneticMatchResult>::destroy[abi:ne180100](v3, v1);
      v1 += 72;
    }
    while (v1 != v2);
  }
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<quasar::PhoneticMatchResult>,quasar::PhoneticMatchResult*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<quasar::PhoneticMatchResult>,quasar::PhoneticMatchResult*>::operator()[abi:ne180100]((uint64_t *)a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<quasar::PhoneticMatchResult>,quasar::PhoneticMatchResult*>::operator()[abi:ne180100](uint64_t *a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = (uint64_t *)a1[1];
  v1 = (uint64_t *)a1[2];
  v3 = *v1;
  v4 = *v2;
  if (*v1 != *v2)
  {
    v5 = *a1;
    do
    {
      v3 -= 72;
      std::allocator<quasar::PhoneticMatchResult>::destroy[abi:ne180100](v5, v3);
    }
    while (v3 != v4);
  }
}

void **std::__split_buffer<quasar::PhoneticMatchResult>::~__split_buffer(void **a1)
{
  std::__split_buffer<quasar::PhoneticMatchResult>::clear[abi:ne180100](a1);
  if (*a1)
    operator delete(*a1);
  return a1;
}

void std::__split_buffer<quasar::PhoneticMatchResult>::clear[abi:ne180100](_QWORD *a1)
{
  uint64_t i;
  uint64_t v2;
  uint64_t v4;

  v2 = a1[1];
  for (i = a1[2]; i != v2; i = a1[2])
  {
    v4 = a1[4];
    a1[2] = i - 72;
    std::allocator<quasar::PhoneticMatchResult>::destroy[abi:ne180100](v4, i - 72);
  }
}

uint64_t std::vector<quasar::PhoneticMatchDecoderStat>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<quasar::PhoneticMatchDecoderStat>,std::reverse_iterator<quasar::PhoneticMatchDecoderStat*>,std::reverse_iterator<quasar::PhoneticMatchDecoderStat*>,std::reverse_iterator<quasar::PhoneticMatchDecoderStat*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<quasar::PhoneticMatchDecoderStat>,std::reverse_iterator<quasar::PhoneticMatchDecoderStat*>,std::reverse_iterator<quasar::PhoneticMatchDecoderStat*>,std::reverse_iterator<quasar::PhoneticMatchDecoderStat*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v12[3];
  char v13;
  __int128 v14;
  __int128 v15;

  v7 = a7;
  *(_QWORD *)&v15 = a6;
  *((_QWORD *)&v15 + 1) = a7;
  v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  if (a3 == a5)
  {
    v10 = a6;
  }
  else
  {
    do
    {
      v8 = *(_OWORD *)(a3 - 40);
      *(_QWORD *)(v7 - 24) = *(_QWORD *)(a3 - 24);
      *(_OWORD *)(v7 - 40) = v8;
      *(_QWORD *)(a3 - 32) = 0;
      *(_QWORD *)(a3 - 24) = 0;
      *(_QWORD *)(a3 - 40) = 0;
      v9 = *(_QWORD *)(a3 - 16);
      *(_DWORD *)(v7 - 8) = *(_DWORD *)(a3 - 8);
      *(_QWORD *)(v7 - 16) = v9;
      v7 = *((_QWORD *)&v15 + 1) - 40;
      *((_QWORD *)&v15 + 1) -= 40;
      a3 -= 40;
    }
    while (a3 != a5);
    v10 = v15;
  }
  v13 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<quasar::PhoneticMatchDecoderStat>,std::reverse_iterator<quasar::PhoneticMatchDecoderStat*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return v10;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<quasar::PhoneticMatchDecoderStat>,std::reverse_iterator<quasar::PhoneticMatchDecoderStat*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<quasar::PhoneticMatchDecoderStat>,std::reverse_iterator<quasar::PhoneticMatchDecoderStat*>>::operator()[abi:ne180100](a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<quasar::PhoneticMatchDecoderStat>,std::reverse_iterator<quasar::PhoneticMatchDecoderStat*>>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    if (*(char *)(v1 + 23) < 0)
      operator delete(*(void **)v1);
    v1 += 40;
  }
}

uint64_t std::__split_buffer<quasar::PhoneticMatchDecoderStat>::~__split_buffer(uint64_t a1)
{
  std::__split_buffer<quasar::PhoneticMatchDecoderStat>::__destruct_at_end[abi:ne180100](a1, *(void ***)(a1 + 8));
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void std::__split_buffer<quasar::PhoneticMatchDecoderStat>::__destruct_at_end[abi:ne180100](uint64_t a1, void **a2)
{
  void **v2;
  void **v5;

  v2 = *(void ***)(a1 + 16);
  if (v2 != a2)
  {
    do
    {
      v5 = v2 - 5;
      *(_QWORD *)(a1 + 16) = v2 - 5;
      if (*((char *)v2 - 17) < 0)
      {
        operator delete(*v5);
        v5 = *(void ***)(a1 + 16);
      }
      v2 = v5;
    }
    while (v5 != a2);
  }
}

char *std::vector<std::shared_ptr<quasar::UttInfo>>::__init_with_size[abi:ne180100]<std::shared_ptr<quasar::UttInfo>*,std::shared_ptr<quasar::UttInfo>*>(char *result, _QWORD *a2, _QWORD *a3, unint64_t a4)
{
  char *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  if (a4)
  {
    v6 = result;
    result = std::vector<std::pair<unsigned long,char const*>>::__vallocate[abi:ne180100](result, a4);
    v7 = (_QWORD *)*((_QWORD *)v6 + 1);
    while (a2 != a3)
    {
      *v7 = *a2;
      v8 = a2[1];
      v7[1] = v8;
      if (v8)
      {
        v9 = (unint64_t *)(v8 + 8);
        do
          v10 = __ldxr(v9);
        while (__stxr(v10 + 1, v9));
      }
      a2 += 2;
      v7 += 2;
    }
    *((_QWORD *)v6 + 1) = v7;
  }
  return result;
}

void sub_1AD9127A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

_QWORD *quasar::PhonetisaurusP2WP::PhonetisaurusP2WP(_QWORD *a1, uint64_t *a2, uint64_t *a3, __int128 *a4, quasar::SystemConfig *a5, int a6, uint64_t a7)
{
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  void *__p[2];
  char v26;
  void *v27[2];
  char v28;
  uint64_t v29;
  std::__shared_weak_count *v30;
  uint64_t v31;
  std::__shared_weak_count *v32;

  v12 = a2[1];
  v31 = *a2;
  v32 = (std::__shared_weak_count *)v12;
  if (v12)
  {
    v13 = (unint64_t *)(v12 + 8);
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }
  v15 = a3[1];
  v29 = *a3;
  v30 = (std::__shared_weak_count *)v15;
  if (v15)
  {
    v16 = (unint64_t *)(v15 + 8);
    do
      v17 = __ldxr(v16);
    while (__stxr(v17 + 1, v16));
  }
  std::string::basic_string[abi:ne180100]<0>(v27, ".");
  std::string::basic_string[abi:ne180100]<0>(__p, " ");
  quasar::PhonetisaurusG2P::PhonetisaurusG2P((uint64_t)a1, &v31, &v29, a4, a5, a6, a7, (__int128 *)v27, (__int128 *)__p);
  if (v26 < 0)
    operator delete(__p[0]);
  if (v28 < 0)
    operator delete(v27[0]);
  v18 = v30;
  if (v30)
  {
    p_shared_owners = (unint64_t *)&v30->__shared_owners_;
    do
      v20 = __ldaxr(p_shared_owners);
    while (__stlxr(v20 - 1, p_shared_owners));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  v21 = v32;
  if (v32)
  {
    v22 = (unint64_t *)&v32->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  *a1 = &off_1E5D365E8;
  return a1;
}

void sub_1AD912928(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,char a23)
{
  uint64_t v23;

  if (a16 < 0)
    operator delete(__p);
  if (a22 < 0)
    operator delete(a17);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&a23);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](v23 - 64);
  _Unwind_Resume(a1);
}

void quasar::PhonetisaurusP2WP::normalizeToken(uint64_t a1@<X1>, std::string *a2@<X8>)
{
  if (*(char *)(a1 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *(const std::string::value_type **)a1, *(_QWORD *)(a1 + 8));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)a1;
    a2->__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 16);
  }
}

void quasar::PhonetisaurusP2WP::convertPhonemePronsToAllProns()
{
  _OWORD v0[17];

  memset(v0, 0, sizeof(v0));
  kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v0);
  std::operator<<[abi:ne180100]<std::char_traits<char>>(v0, "Unimplemented");
  quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v0);
}

void quasar::PhonetisaurusP2WP::doG2P(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  _DWORD *v4;
  _DWORD *v5;
  uint64_t v6;
  void *__p[2];
  char v8;
  void *v9[2];
  char v10;

  quasar::PhonetisaurusG2P::doG2P(a1, a2, a3);
  v4 = (_DWORD *)*a3;
  v5 = (_DWORD *)a3[1];
  if ((_DWORD *)*a3 != v5)
  {
    do
    {
      *v4 = 2;
      std::string::basic_string[abi:ne180100]<0>(v9, "~w10");
      std::string::basic_string[abi:ne180100]<0>(__p, "}");
      v6 = (uint64_t)(v4 + 2);
      quasar::replaceAll(v6, (uint64_t)v9, (char *)__p);
      if (v8 < 0)
        operator delete(__p[0]);
      if (v10 < 0)
        operator delete(v9[0]);
      std::string::basic_string[abi:ne180100]<0>(v9, "~w11");
      std::string::basic_string[abi:ne180100]<0>(__p, "_");
      quasar::replaceAll(v6, (uint64_t)v9, (char *)__p);
      if (v8 < 0)
        operator delete(__p[0]);
      if (v10 < 0)
        operator delete(v9[0]);
      std::string::basic_string[abi:ne180100]<0>(v9, "~w13");
      std::string::basic_string[abi:ne180100]<0>(__p, " ");
      quasar::replaceAll(v6, (uint64_t)v9, (char *)__p);
      if (v8 < 0)
        operator delete(__p[0]);
      if (v10 < 0)
        operator delete(v9[0]);
      v4 = (_DWORD *)(v6 + 32);
    }
    while (v4 != v5);
  }
}

void sub_1AD912B80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  std::vector<quasar::PronChoice>::__destroy_vector::operator()[abi:ne180100]((void ***)&a15);
  _Unwind_Resume(a1);
}

void quasar::PhonetisaurusP2WP::batchDoG2P()
{
  _OWORD v0[17];

  memset(v0, 0, sizeof(v0));
  kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v0);
  std::operator<<[abi:ne180100]<std::char_traits<char>>(v0, "Unimplemented");
  quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v0);
}

void quasar::PhonetisaurusP2WP::~PhonetisaurusP2WP(void **this)
{
  quasar::PhonetisaurusG2P::~PhonetisaurusG2P(this);
  JUMPOUT(0x1AF44D190);
}

uint64_t quasar::PhonetisaurusP2WP::getG2PVersion(quasar::PhonetisaurusP2WP *this)
{
  return 4;
}

uint64_t quasar::PhonetisaurusG2P::getG2PModelInputSymbolTable(quasar::PhonetisaurusG2P *this)
{
  return *(_QWORD *)(*((_QWORD *)this + 46) + 240);
}

void quasar::PhonetisaurusG2P::~PhonetisaurusG2P(void **this)
{
  *this = &off_1E5D35F90;
  if (*((char *)this + 423) < 0)
    operator delete(this[50]);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)(this + 46));
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)(this + 44));
  quasar::QuasarG2PBase::~QuasarG2PBase(this);
}

{
  quasar::PhonetisaurusG2P::~PhonetisaurusG2P(this);
  JUMPOUT(0x1AF44D190);
}

void sub_1AD912DA8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1AD912E04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1AD9130F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_ea8_40c57_ZTSNSt3__110shared_ptrIN6quasar20RecogAudioBufferBaseEEE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 48) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

uint64_t __destroy_helper_block_ea8_40c57_ZTSNSt3__110shared_ptrIN6quasar20RecogAudioBufferBaseEEE(uint64_t a1)
{
  return std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](a1 + 40);
}

void sub_1AD913730(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  void *v17;
  void *v18;

  _Unwind_Resume(a1);
}

_QWORD *std::shared_ptr<quasar::SyncSpeechRecognizer>::operator=[abi:ne180100]<quasar::SyncSpeechRecognizer,std::default_delete<quasar::SyncSpeechRecognizer>,void>(_QWORD *a1, uint64_t *a2)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v4 = *a2;
  if (*a2)
  {
    v5 = (_QWORD *)operator new();
    v6 = *a2;
    *v5 = &unk_1E5D46268;
    v5[1] = 0;
    v5[2] = 0;
    v5[3] = v6;
  }
  else
  {
    v5 = 0;
  }
  *a2 = 0;
  v7 = (std::__shared_weak_count *)a1[1];
  *a1 = v4;
  a1[1] = v5;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  return a1;
}

void sub_1AD913A0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  void *v37;
  void *v38;
  uint64_t v39;

  if (a21 < 0)
    operator delete(__p);
  if (a27 < 0)
    operator delete(a22);
  if (a33 < 0)
    operator delete(a28);
  if (*(char *)(v39 - 65) < 0)
    operator delete(*(void **)(v39 - 88));

  _Unwind_Resume(a1);
}

void sub_1AD913C50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  void *v37;
  uint64_t v38;

  if (a21 < 0)
    operator delete(__p);
  if (a27 < 0)
    operator delete(a22);
  if (a33 < 0)
    operator delete(a28);
  if (*(char *)(v38 - 65) < 0)
    operator delete(*(void **)(v38 - 88));

  _Unwind_Resume(a1);
}

void sub_1AD914104(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void **a25)
{
  void *v25;
  void *v26;
  void *v27;
  uint64_t v28;

  a25 = (void **)(v28 - 144);
  std::vector<std::vector<quasar::Token>>::__destroy_vector::operator()[abi:ne180100](&a25);
  *(_QWORD *)(v28 - 144) = v28 - 120;
  std::vector<std::vector<quasar::Token>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v28 - 144));

  _Unwind_Resume(a1);
}

void sub_1AD9143AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12, uint64_t a13, char a14)
{
  void *v14;

  std::vector<std::vector<quasar::Token>>::__destroy_vector::operator()[abi:ne180100](&a12);
  a12 = (void **)&a14;
  std::vector<std::vector<quasar::Token>>::__destroy_vector::operator()[abi:ne180100](&a12);

  _Unwind_Resume(a1);
}

void sub_1AD914554(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12, uint64_t a13, char a14)
{
  void *v14;
  void *v15;

  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&a12);
  a12 = (void **)&a14;
  std::vector<std::vector<quasar::Token>>::__destroy_vector::operator()[abi:ne180100](&a12);

  _Unwind_Resume(a1);
}

void sub_1AD9146A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12, uint64_t a13, char a14)
{
  std::vector<std::vector<quasar::Token>>::__destroy_vector::operator()[abi:ne180100](&a12);
  a12 = (void **)&a14;
  std::vector<std::vector<quasar::Token>>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_pointer<quasar::SyncSpeechRecognizer  *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t std::__shared_ptr_pointer<quasar::SyncSpeechRecognizer  *>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<quasar::SyncSpeechRecognizer  *>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t quasar::TextEmbedder::createTextEmbedder@<X0>(std::string *a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, _QWORD *a4@<X8>)
{
  _QWORD *v7;
  uint64_t result;
  void (**v9)(quasar::GraphemeTextEmbedder *__hidden);
  _OWORD v10[17];

  if (a3 == 1)
  {
    v7 = (_QWORD *)operator new();
    result = quasar::TextEmbedder::TextEmbedder((uint64_t)v7, a1, a2);
    v9 = &off_1E5D37750;
  }
  else
  {
    if (a3)
    {
      memset(v10, 0, sizeof(v10));
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v10);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"Unrecognized EuclidEncoderType:", 31);
      std::ostream::operator<<();
      quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v10);
    }
    v7 = (_QWORD *)operator new();
    result = quasar::TextEmbedder::TextEmbedder((uint64_t)v7, a1, a2);
    v9 = &off_1E5D37960;
  }
  *v7 = v9;
  *a4 = v7;
  return result;
}

void sub_1AD9148D0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10B3C40228402DALL);
  _Unwind_Resume(a1);
}

uint64_t quasar::TextEmbedder::TextEmbedder(uint64_t a1, std::string *a2, uint64_t a3)
{
  size_t v6;
  std::string *p_p;
  const void *v8;
  std::string __p;

  *(_QWORD *)a1 = off_1E5D34DF8;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_BYTE *)(a1 + 72) = 0;
  *(_DWORD *)(a1 + 112) = 1065353216;
  *(_DWORD *)(a1 + 128) = -1;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_QWORD *)(a1 + 120) = -1;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_DWORD *)(a1 + 192) = 1065353216;
  *(_QWORD *)(a1 + 184) = 0;
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 200), " ");
  *(_QWORD *)(a1 + 224) = 0;
  if (*(char *)(a3 + 23) >= 0)
    v6 = *(unsigned __int8 *)(a3 + 23);
  else
    v6 = *(_QWORD *)(a3 + 8);
  p_p = &__p;
  std::string::basic_string[abi:ne180100]((uint64_t)&__p, v6 + 1);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if (v6)
  {
    if (*(char *)(a3 + 23) >= 0)
      v8 = (const void *)a3;
    else
      v8 = *(const void **)a3;
    memmove(p_p, v8, v6);
  }
  *(_WORD *)((char *)&p_p->__r_.__value_.__l.__data_ + v6) = 46;
  quasar::SystemConfig::setPrefix(a2, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  quasar::TextEmbedder::registerParams((quasar::TextEmbedder *)a1, (quasar::SystemConfig *)a2);
  quasar::SystemConfig::readPtree((uint64_t)a2, a3, 0, 0);
  (*(void (**)(uint64_t, std::string *))(*(_QWORD *)a1 + 16))(a1, a2);
  return a1;
}

void sub_1AD914A74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void **v17;
  void **v18;

  if (a14 < 0)
    operator delete(__p);
  if (*(char *)(v15 + 223) < 0)
    operator delete(*v17);
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(v15 + 160);
  if (*(char *)(v15 + 159) < 0)
    operator delete(*v18);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(v16);
  if (*(char *)(v15 + 71) < 0)
    operator delete(*(void **)(v15 + 48));
  if (*(char *)(v15 + 47) < 0)
    operator delete(*(void **)(v15 + 24));
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](v14);
  _Unwind_Resume(a1);
}

void quasar::TextEmbedder::registerParams(quasar::TextEmbedder *this, quasar::SystemConfig *a2)
{
  void *__p[2];
  char v5;
  void *v6[2];
  char v7;

  std::string::basic_string[abi:ne180100]<0>(v6, "model-file");
  std::string::basic_string[abi:ne180100]<0>(__p, "Euclid model file");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)v6, (uint64_t)this + 24, (uint64_t)__p, 1, 0, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
  std::string::basic_string[abi:ne180100]<0>(v6, "string-id-mapping-file");
  std::string::basic_string[abi:ne180100]<0>(__p, "String to Id mapping file");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)v6, (uint64_t)this + 48, (uint64_t)__p, 0, 0, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
  std::string::basic_string[abi:ne180100]<0>(v6, "byte-input");
  std::string::basic_string[abi:ne180100]<0>(__p, "If true, the model can take each value of byte from string as input. Otherwise, a string-id-mapping-file is required.");
  quasar::SystemConfig::Register<BOOL>((uint64_t)a2, (const void **)v6, (uint64_t)this + 72, (uint64_t)__p, 0, 0, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
  std::string::basic_string[abi:ne180100]<0>(v6, "max-input-length");
  std::string::basic_string[abi:ne180100]<0>(__p, "The length limit on the input substr. (Default = -1; enabled if >= 0)");
  quasar::SystemConfig::Register<int>((uint64_t)a2, (const void **)v6, (uint64_t)this + 120, (uint64_t)__p, 0, 0, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
  std::string::basic_string[abi:ne180100]<0>(v6, "accepted-chars-file");
  std::string::basic_string[abi:ne180100]<0>(__p, "Json array file with characters that Euclid model supports");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)v6, (uint64_t)this + 136, (uint64_t)__p, 0, 0, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
  std::string::basic_string[abi:ne180100]<0>(v6, "blank-string");
  std::string::basic_string[abi:ne180100]<0>(__p, "For grapheme model only: At the end of preprocessing, empty text is replaced by this string (default is \" \").");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)v6, (uint64_t)this + 200, (uint64_t)__p, 0, 0, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
  std::string::basic_string[abi:ne180100]<0>(v6, "pad-block-size");
  std::string::basic_string[abi:ne180100]<0>(__p, "If > 0, pad the string to the closest multiple of padSize.");
  quasar::SystemConfig::Register<int>((uint64_t)a2, (const void **)v6, (uint64_t)this + 224, (uint64_t)__p, 0, 0, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
  std::string::basic_string[abi:ne180100]<0>(v6, "pad-id");
  std::string::basic_string[abi:ne180100]<0>(__p, "The padding token ID used for padding.(Default = 0)");
  quasar::SystemConfig::Register<int>((uint64_t)a2, (const void **)v6, (uint64_t)this + 228, (uint64_t)__p, 0, 0, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
}

void sub_1AD914E84(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a16 < 0)
    operator delete(__p);
  if (a22 < 0)
    operator delete(a17);
  _Unwind_Resume(exception_object);
}

void quasar::TextEmbedder::init(quasar::TextEmbedder *this, quasar::SystemConfig *a2)
{
  uint64_t ModelLoaderPtr;
  _QWORD *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  _QWORD *v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  __int128 *v16;
  uint64_t i;
  int v18;
  uint64_t v19;
  uint64_t j;
  uint64_t v21;
  uint64_t String;
  uint64_t v23;
  int *v24;
  std::basic_string<char32_t> *p_p;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  _QWORD *v29;
  int v30;
  char *v31;
  uint64_t v32;
  std::basic_string<char32_t> __p;
  __int128 *v34[8];
  unsigned __int8 *v35;
  std::__shared_weak_count *v36;
  _QWORD *v37;
  std::__shared_weak_count *v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  _QWORD v42[18];
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  uint64_t v48;

  v48 = *MEMORY[0x1E0C80C00];
  ModelLoaderPtr = quasar::SystemConfig::getModelLoaderPtr(a2);
  v4 = *(_QWORD **)ModelLoaderPtr;
  v5 = *(std::__shared_weak_count **)(ModelLoaderPtr + 8);
  v37 = v4;
  v38 = v5;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  v35 = 0;
  v36 = 0;
  quasar::ModelLoader::readNeuralNetwork(v4, (uint64_t)this + 24, 1u, 0, 0, &v35, (uint64_t *)&v39);
  v8 = (_QWORD *)((char *)this + 8);
  std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100]((uint64_t)this + 8, &v39);
  v9 = (std::__shared_weak_count *)*((_QWORD *)&v39 + 1);
  if (*((_QWORD *)&v39 + 1))
  {
    v10 = (unint64_t *)(*((_QWORD *)&v39 + 1) + 8);
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  v12 = v36;
  if (v36)
  {
    v13 = (unint64_t *)&v36->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (!*v8)
  {
    v46 = 0u;
    v47 = 0u;
    v44 = 0u;
    v45 = 0u;
    v43 = 0u;
    memset(v42, 0, sizeof(v42));
    v40 = 0u;
    v41 = 0u;
    v39 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v39);
    v29 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v39, (uint64_t)"Failed to load Euclid model: ", 29);
    v30 = *((char *)this + 47);
    if (v30 >= 0)
      v31 = (char *)this + 24;
    else
      v31 = (char *)*((_QWORD *)this + 3);
    if (v30 >= 0)
      v32 = *((unsigned __int8 *)this + 47);
    else
      v32 = *((_QWORD *)this + 4);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)v31, v32);
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&v39);
  }
  if (*((char *)this + 71) < 0)
  {
    if (*((_QWORD *)this + 7))
      goto LABEL_20;
  }
  else if (*((_BYTE *)this + 71))
  {
    goto LABEL_20;
  }
  if (!*((_BYTE *)this + 72))
  {
    v46 = 0u;
    v47 = 0u;
    v44 = 0u;
    v45 = 0u;
    v43 = 0u;
    memset(v42, 0, sizeof(v42));
    v40 = 0u;
    v41 = 0u;
    v39 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v39);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v39, (uint64_t)"Need string-id-mapping-file if model doesn't support byte inpute(byte-input = false)", 84);
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&v39);
  }
LABEL_20:
  if ((*((_BYTE *)this + 71) & 0x80) != 0)
    v15 = *((_QWORD *)this + 7);
  else
    v15 = *((unsigned __int8 *)this + 71);
  if (v15)
  {
    if (*((_BYTE *)this + 72))
    {
      v46 = 0u;
      v47 = 0u;
      v44 = 0u;
      v45 = 0u;
      v43 = 0u;
      memset(v42, 0, sizeof(v42));
      v40 = 0u;
      v41 = 0u;
      v39 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v39);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v39, (uint64_t)"string-id-mapping-file and byte-input can not be enabled at the same time", 73);
      quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&v39);
    }
  }
  else if (*((_BYTE *)this + 72))
  {
    goto LABEL_34;
  }
  if ((*((_BYTE *)this + 71) & 0x80) != 0)
  {
    if (!*((_QWORD *)this + 7))
      goto LABEL_34;
  }
  else if (!*((_BYTE *)this + 71))
  {
    goto LABEL_34;
  }
  quasar::PTree::PTree((quasar::PTree *)&v39);
  quasar::PTree::readJsonFromFile((uint64_t)&v39, (__int128 *)this + 3);
  v16 = (__int128 *)quasar::PTree::begin((quasar::PTree *)&v39);
  for (i = quasar::PTree::end((quasar::PTree *)&v39); v16 != (__int128 *)i; v16 = (__int128 *)((char *)v16 + 88))
  {
    v18 = quasar::PTree::getInt<int>((uint64_t)v16 + 24);
    v34[0] = v16;
    *((_DWORD *)std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)this + 80, (unsigned __int8 *)v16, (uint64_t)&std::piecewise_construct, v34)+ 10) = v18;
  }
  quasar::PTree::~PTree((quasar::PTree *)&v39);
LABEL_34:
  if (*((char *)this + 159) < 0)
  {
    if (!*((_QWORD *)this + 18))
      goto LABEL_52;
  }
  else if (!*((_BYTE *)this + 159))
  {
    goto LABEL_52;
  }
  if (*((_BYTE *)this + 72))
  {
    quasar::PTree::PTree((quasar::PTree *)v34);
    quasar::PTree::readJsonFromFile((uint64_t)v34, (__int128 *)((char *)this + 136));
    v19 = quasar::PTree::begin((quasar::PTree *)v34);
    for (j = quasar::PTree::end((quasar::PTree *)v34); v19 != j; v19 += 88)
    {
      v21 = operator new();
      *(_OWORD *)(v21 + 8) = xmmword_1AE1402C0;
      *(_DWORD *)(v21 + 24) = 0;
      *(_QWORD *)v21 = &unk_1E5D40240;
      v39 = 0u;
      v40 = 0u;
      v41 = 0u;
      v42[0] = v21;
      memset(&v42[1], 0, 136);
      String = quasar::PTree::getString((quasar::PTree *)(v19 + 24));
      v23 = *(unsigned __int8 *)(String + 23);
      if ((v23 & 0x80u) == 0)
        v24 = (int *)String;
      else
        v24 = *(int **)String;
      if ((v23 & 0x80u) != 0)
        v23 = *(_QWORD *)(String + 8);
      std::wstring_convert<std::codecvt_utf8<char32_t,1114111ul,(std::codecvt_mode)0>,char32_t,std::allocator<char32_t>,std::allocator<char>>::from_bytes((uint64_t)&v39, v24, (int *)((char *)v24 + v23), &__p);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        p_p = &__p;
      else
        p_p = (std::basic_string<char32_t> *)__p.__r_.__value_.__r.__words[0];
      std::__hash_table<quasar::PersonalizedLmData::DocumentType,std::hash<quasar::PersonalizedLmData::DocumentType>,std::equal_to<quasar::PersonalizedLmData::DocumentType>,std::allocator<quasar::PersonalizedLmData::DocumentType>>::__emplace_unique_key_args<quasar::PersonalizedLmData::DocumentType,quasar::PersonalizedLmData::DocumentType>((uint64_t)this + 160, (unsigned int *)p_p, p_p);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      std::wstring_convert<std::codecvt_utf8<char32_t,1114111ul,(std::codecvt_mode)0>,char32_t,std::allocator<char32_t>,std::allocator<char>>::~wstring_convert((uint64_t)&v39);
    }
    quasar::PTree::~PTree((quasar::PTree *)v34);
  }
LABEL_52:
  *((_DWORD *)this + 31) = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v8 + 40))(*v8);
  *((_DWORD *)this + 32) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 48))(*((_QWORD *)this + 1));
  v26 = v38;
  if (v38)
  {
    v27 = (unint64_t *)&v38->__shared_owners_;
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
}

void sub_1AD91540C(void *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  JUMPOUT(0x1AD915480);
}

void sub_1AD915420(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  uint64_t v16;
  va_list va;
  uint64_t v18;
  va_list va1;

  va_start(va1, a15);
  va_start(va, a15);
  v16 = va_arg(va1, _QWORD);
  v18 = va_arg(va1, _QWORD);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_1AD915430(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_list va;

  va_start(va, a17);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1AD915438(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  quasar::PTree::~PTree((quasar::PTree *)&a18);
  JUMPOUT(0x1AD915478);
}

void quasar::TextEmbedder::computeTextEmbeddingVector(_DWORD *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  int v7;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  float v18;
  uint64_t v19;
  int v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v6 = (unint64_t)(a2[1] - *a2) >> 2;
  v7 = a1[56];
  if (v7 >= 1 && (int)v6 >= 1)
    v6 = ((v7 + (int)v6 - 1) / v7 * v7);
  v9 = a1[32];
  v10 = (int)v9 < 1 || (int)v6 <= (int)v9;
  if (v10 && (v9 = v6, (int)v6 <= 0))
  {
    kaldi::CuVector<float>::Resize(a3, 0, 0);
  }
  else
  {
    v23 = 0;
    v24 = 0;
    v21 = &unk_1E5D341C8;
    v22 = 0;
    kaldi::CuVector<float>::Resize((uint64_t)&v21, v9, 0);
    v11 = *a2;
    v12 = a2[1] - *a2;
    v13 = (unint64_t)v12 >> 2;
    if ((int)v9 >= (int)((unint64_t)v12 >> 2))
      v14 = v13;
    else
      v14 = v9;
    if ((int)v14 >= 1)
    {
      v15 = 0;
      v16 = v22;
      do
      {
        *(float *)(v16 + 4 * v15) = (float)*(int *)(v11 + 4 * v15);
        ++v15;
      }
      while (v14 != v15);
    }
    if ((int)v9 > (int)v13)
    {
      v17 = v22;
      v18 = (float)(int)a1[57];
      v19 = (int)(v12 >> 2);
      v20 = v9 - v13;
      do
      {
        *(float *)(v17 + 4 * v19++) = v18;
        --v20;
      }
      while (v20);
    }
    quasar::TextEmbedder::computeTextEmbeddingVector((uint64_t)a1, (uint64_t)&v21, a3);
    v21 = &unk_1E5D341C8;
    kaldi::CuVector<float>::Destroy((uint64_t)&v21);
  }
}

void sub_1AD9155E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  kaldi::CuVector<float>::~CuVector(&a9);
  _Unwind_Resume(a1);
}

void quasar::TextEmbedder::computeTextEmbeddingVector(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  _QWORD v7[4];
  int32x2_t v8;
  __int128 v9;
  __int128 v10;
  char v11;
  int32x2_t v12;
  __int128 v13;
  __int128 v14;
  char v15;

  kaldi::CuVector<float>::Resize(a3, 0, 0);
  v6 = *(unsigned int *)(a2 + 16);
  if ((_DWORD)v6)
  {
    v14 = 0u;
    v13 = 0u;
    v12 = (int32x2_t)&unk_1E5D34170;
    v15 = 0;
    v10 = 0u;
    v9 = 0u;
    v8 = (int32x2_t)&unk_1E5D34170;
    v11 = 0;
    kaldi::CuMatrix<float>::Resize(&v12, 1, v6, 0, 0);
    kaldi::CuMatrixBase<float>::CopyRowsFromVec((uint64_t)&v12, a2);
    quasar::TextEmbedder::computeTextEmbeddingMatrix(a1, (uint64_t)&v12, &v8);
    if (SHIDWORD(v9) >= 1)
    {
      v7[0] = &unk_1E5D29D70;
      v7[1] = v9;
      v7[3] = *((_QWORD *)&v10 + 1);
      v7[2] = DWORD2(v9);
      kaldi::CuVector<float>::operator=(a3, (uint64_t)v7);
    }
    kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&v8);
    kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&v12);
  }
}

void sub_1AD9156F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v6;
  va_list va;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  va_list va1;

  va_start(va1, a5);
  va_start(va, a5);
  v6 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)va);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)va1);
  _Unwind_Resume(a1);
}

void quasar::TextEmbedder::computeTextEmbeddingVector(_DWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  void *__p[3];

  v4 = *(unsigned __int8 *)(a2 + 23);
  if ((v4 & 0x80u) != 0)
    v4 = *(_QWORD *)(a2 + 8);
  if (v4)
  {
    (*(void (**)(void **__return_ptr))(*(_QWORD *)a1 + 24))(__p);
    quasar::TextEmbedder::computeTextEmbeddingVector(a1, (uint64_t *)__p, a3);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
  }
  else
  {
    kaldi::CuVector<float>::Resize(a3, 0, 0);
  }
}

void sub_1AD91579C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void quasar::TextEmbedder::computeTextEmbeddingMatrix(uint64_t a1, uint64_t a2, int32x2_t *a3)
{
  BOOL v3;

  if (*(_DWORD *)(a2 + 20))
    v3 = *(_DWORD *)(a2 + 16) == 0;
  else
    v3 = 1;
  if (v3)
    kaldi::CuMatrix<float>::Resize(a3, 0, 0, 0, 0);
  else
    (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 96))(*(_QWORD *)(a1 + 8));
}

uint64_t quasar::TextEmbedder::getMaxInputLength(quasar::TextEmbedder *this)
{
  return *((unsigned int *)this + 30);
}

uint64_t quasar::TextEmbedder::getEmbeddingDim(quasar::TextEmbedder *this)
{
  return *((unsigned int *)this + 31);
}

uint64_t quasar::GraphemeTextEmbedder::preprocessInput(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v8;
  uint64_t v9;
  int *v10;
  std::basic_string<char32_t>::size_type size;
  std::basic_string<char32_t>::size_type v12;
  std::basic_string<char32_t> *v13;
  uint64_t v14;
  std::basic_string<char32_t>::size_type v15;
  std::basic_string<char32_t>::size_type v16;
  std::basic_string<char32_t>::size_type v17;
  char *v18;
  uint64_t v19;
  std::string __p;
  std::basic_string<char32_t> v22;
  _OWORD v23[3];
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  if (*(char *)(a3 + 23) < 0)
  {
    **(_BYTE **)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
  }
  else
  {
    *(_BYTE *)a3 = 0;
    *(_BYTE *)(a3 + 23) = 0;
  }
  v8 = operator new();
  *(_OWORD *)(v8 + 8) = xmmword_1AE1402C0;
  *(_DWORD *)(v8 + 24) = 0;
  *(_QWORD *)v8 = &unk_1E5D40240;
  memset(v23, 0, sizeof(v23));
  v24 = v8;
  v25 = 0u;
  v26 = 0u;
  v27 = 0u;
  v28 = 0u;
  v29 = 0u;
  v30 = 0u;
  v31 = 0u;
  v32 = 0u;
  v9 = *(unsigned __int8 *)(a2 + 23);
  if ((v9 & 0x80u) == 0)
    v10 = (int *)a2;
  else
    v10 = *(int **)a2;
  if ((v9 & 0x80u) != 0)
    v9 = *(_QWORD *)(a2 + 8);
  v33 = 0;
  std::wstring_convert<std::codecvt_utf8<char32_t,1114111ul,(std::codecvt_mode)0>,char32_t,std::allocator<char32_t>,std::allocator<char>>::from_bytes((uint64_t)v23, v10, (int *)((char *)v10 + v9), &v22);
  if (*(_QWORD *)(a1 + 184))
  {
    memset(&__p, 0, sizeof(__p));
    if ((v22.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v22.__r_.__value_.__r.__words[2]);
    else
      size = v22.__r_.__value_.__l.__size_;
    std::basic_string<char32_t>::reserve((std::basic_string<char32_t> *)&__p, size);
    v12 = HIBYTE(v22.__r_.__value_.__r.__words[2]);
    if ((v22.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v13 = &v22;
    else
      v13 = (std::basic_string<char32_t> *)v22.__r_.__value_.__r.__words[0];
    if ((v22.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v12 = v22.__r_.__value_.__l.__size_;
    if (v12)
    {
      v14 = 4 * v12;
      do
      {
        if (std::__hash_table<quasar::PersonalizedLmData::DocumentType,std::hash<quasar::PersonalizedLmData::DocumentType>,std::equal_to<quasar::PersonalizedLmData::DocumentType>,std::allocator<quasar::PersonalizedLmData::DocumentType>>::find<quasar::PersonalizedLmData::DocumentType>((_QWORD *)(a1 + 160), (unsigned int *)v13))
        {
          std::basic_string<char32_t>::push_back((std::basic_string<char32_t> *)&__p, v13->__r_.__value_.__s.__data_[0]);
        }
        v13 = (std::basic_string<char32_t> *)((char *)v13 + 4);
        v14 -= 4;
      }
      while (v14);
    }
    std::basic_string<char32_t>::operator=(&v22, (const std::basic_string<char32_t> *)&__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  v15 = *(unsigned int *)(a1 + 120);
  if ((v15 & 0x80000000) == 0)
  {
    v16 = HIBYTE(v22.__r_.__value_.__r.__words[2]);
    if ((v22.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v16 = v22.__r_.__value_.__l.__size_;
    if (v16 > v15)
      std::basic_string<char32_t>::resize(&v22, v15, 0);
  }
  v17 = HIBYTE(v22.__r_.__value_.__r.__words[2]);
  if ((v22.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v18 = (char *)&v22;
  else
    v18 = (char *)v22.__r_.__value_.__r.__words[0];
  if ((v22.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v17 = v22.__r_.__value_.__l.__size_;
  std::wstring_convert<std::codecvt_utf8<char32_t,1114111ul,(std::codecvt_mode)0>,char32_t,std::allocator<char32_t>,std::allocator<char>>::to_bytes((uint64_t)v23, v18, &v18[4 * v17], &__p);
  if (*(char *)(a3 + 23) < 0)
    operator delete(*(void **)a3);
  *(std::string *)a3 = __p;
  if ((a4 & 1) == 0)
  {
    v19 = *(unsigned __int8 *)(a3 + 23);
    if ((v19 & 0x80u) != 0)
      v19 = *(_QWORD *)(a3 + 8);
    if (!v19)
      std::string::operator=((std::string *)a3, (const std::string *)(a1 + 200));
  }
  if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v22.__r_.__value_.__l.__data_);
  return std::wstring_convert<std::codecvt_utf8<char32_t,1114111ul,(std::codecvt_mode)0>,char32_t,std::allocator<char32_t>,std::allocator<char>>::~wstring_convert((uint64_t)v23);
}

void sub_1AD915A84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21)
{
  if (a20 < 0)
    operator delete(__p);
  std::wstring_convert<std::codecvt_utf8<char32_t,1114111ul,(std::codecvt_mode)0>,char32_t,std::allocator<char32_t>,std::allocator<char>>::~wstring_convert((uint64_t)&a21);
  _Unwind_Resume(a1);
}

void std::basic_string<char32_t>::reserve(std::basic_string<char32_t> *this, std::basic_string<char32_t>::size_type __requested_capacity)
{
  unint64_t v3;
  std::basic_string<char32_t>::size_type v4;
  std::basic_string<char32_t>::size_type v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  std::basic_string<char32_t>::size_type v10;
  std::basic_string<char32_t>::size_type v11;
  uint64_t v12;
  unint64_t v13;
  _BOOL4 v14;
  std::basic_string<char32_t> *v15;
  void *v16;
  unint64_t v17;
  std::basic_string<char32_t>::size_type size;
  BOOL v19;
  std::basic_string<char32_t>::size_type v20;

  if (__requested_capacity >= 0x3FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  LODWORD(v3) = SHIBYTE(this->__r_.__value_.__r.__words[2]);
  if ((v3 & 0x80000000) == 0)
  {
    if (__requested_capacity <= 4)
      return;
    v4 = HIBYTE(this->__r_.__value_.__r.__words[2]);
    v5 = v4 <= __requested_capacity ? __requested_capacity : HIBYTE(this->__r_.__value_.__r.__words[2]);
    v6 = (v5 & 0xFFFFFFFFFFFFFFFELL) + 2;
    v7 = v5 | 1;
    v8 = v7 == 5 ? v6 : v7;
    if (v8 == 4)
      return;
LABEL_23:
    v13 = v8 + 1;
    v14 = v8 < 5;
    if (v8 >= 5)
    {
      v16 = std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)this, v8 + 1);
      v13 = v17;
      LODWORD(v3) = SHIBYTE(this->__r_.__value_.__r.__words[2]);
      if ((v3 & 0x80000000) != 0)
      {
        v15 = (std::basic_string<char32_t> *)this->__r_.__value_.__r.__words[0];
LABEL_30:
        size = this->__r_.__value_.__l.__size_;
        v14 = 1;
        goto LABEL_31;
      }
      v15 = this;
    }
    else
    {
      v15 = (std::basic_string<char32_t> *)this->__r_.__value_.__r.__words[0];
      v16 = this;
      if ((v3 & 0x80) != 0)
        goto LABEL_30;
    }
    size = v3;
LABEL_31:
    v19 = __CFADD__(size, 1);
    v20 = size + 1;
    if (!v19)
      memmove(v16, v15, 4 * v20);
    if (v14)
      operator delete(v15);
    if (v8 >= 5)
    {
      this->__r_.__value_.__l.__size_ = v4;
      this->__r_.__value_.__r.__words[2] = v13 | 0x8000000000000000;
      this->__r_.__value_.__r.__words[0] = (std::basic_string<char32_t>::size_type)v16;
    }
    else
    {
      *((_BYTE *)&this->__r_.__value_.__s + 23) = v4 & 0x7F;
    }
    return;
  }
  v9 = this->__r_.__value_.__r.__words[2];
  v10 = (v9 & 0x7FFFFFFFFFFFFFFFLL) - 1;
  if (v10 < __requested_capacity)
  {
    v4 = this->__r_.__value_.__l.__size_;
    if (v4 <= __requested_capacity)
      v11 = __requested_capacity;
    else
      v11 = this->__r_.__value_.__l.__size_;
    v12 = (v11 & 0xFFFFFFFFFFFFFFFELL) + 2;
    if ((v11 | 1) != 5)
      v12 = v11 | 1;
    v8 = v11 >= 5 ? v12 : 4;
    if (v8 != v10)
    {
      v3 = HIBYTE(v9);
      goto LABEL_23;
    }
  }
}

void sub_1AD915C54(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
}

void std::basic_string<char32_t>::push_back(std::basic_string<char32_t> *this, std::basic_string<char32_t>::value_type __c)
{
  std::basic_string<char32_t> *v3;
  std::basic_string<char32_t>::size_type v4;
  std::basic_string<char32_t>::size_type size;
  std::basic_string<char32_t>::value_type *v6;

  v3 = this;
  if ((SHIBYTE(this->__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (*((_BYTE *)&this->__r_.__value_.__s + 23) != 4)
    {
      size = HIBYTE(this->__r_.__value_.__r.__words[2]);
      *((_BYTE *)&this->__r_.__value_.__s + 23) = (*((_BYTE *)&this->__r_.__value_.__s + 23) + 1) & 0x7F;
      goto LABEL_8;
    }
    v4 = 4;
    goto LABEL_5;
  }
  size = this->__r_.__value_.__l.__size_;
  v4 = (this->__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
  if (size == v4)
  {
LABEL_5:
    std::basic_string<char32_t>::__grow_by(this, v4, 1uLL, v4, v4, 0, 0);
    size = v4;
  }
  v3->__r_.__value_.__l.__size_ = size + 1;
  v3 = (std::basic_string<char32_t> *)v3->__r_.__value_.__r.__words[0];
LABEL_8:
  v6 = (std::basic_string<char32_t>::value_type *)((char *)v3 + 4 * size);
  *v6 = __c;
  v6[1] = 0;
}

std::basic_string<char32_t> *__cdecl std::basic_string<char32_t>::operator=(std::basic_string<char32_t> *this, const std::basic_string<char32_t> *__str)
{
  __int128 v2;
  std::basic_string<char32_t>::size_type size;
  std::basic_string<char32_t>::size_type v4;

  if (this != __str)
  {
    if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
    {
      size = __str->__r_.__value_.__l.__size_;
      if ((__str->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      {
        v4 = HIBYTE(__str->__r_.__value_.__r.__words[2]);
      }
      else
      {
        __str = (const std::basic_string<char32_t> *)__str->__r_.__value_.__r.__words[0];
        v4 = size;
      }
      return std::basic_string<char32_t>::__assign_no_alias<false>(this, (const std::basic_string<char32_t>::value_type *)__str, v4);
    }
    else if ((*((_BYTE *)&__str->__r_.__value_.__s + 23) & 0x80) != 0)
    {
      return std::basic_string<char32_t>::__assign_no_alias<true>(this, __str->__r_.__value_.__l.__data_, __str->__r_.__value_.__l.__size_);
    }
    else
    {
      v2 = *(_OWORD *)&__str->__r_.__value_.__l.__data_;
      this->__r_.__value_.__r.__words[2] = __str->__r_.__value_.__r.__words[2];
      *(_OWORD *)&this->__r_.__value_.__l.__data_ = v2;
    }
  }
  return this;
}

void quasar::GraphemeTextEmbedder::returnVectorOfInts(uint64_t a1@<X0>, uint64_t *a2@<X1>, char **a3@<X8>)
{
  BOOL v4;
  uint64_t v5;
  unint64_t v8;
  _QWORD *v9;
  uint64_t *v10;
  int v11;
  unint64_t v12;
  char *v13;
  char *v14;
  uint64_t *v15;
  unsigned __int8 v16;
  unsigned __int8 *v17;
  unsigned __int8 *v18;
  unint64_t v19;
  char *v20;
  char *v21;
  char *v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char *v27;
  char *v28;
  int v29;
  unint64_t v30;
  char *v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  char *v36;
  char *v37;
  int v38;
  void *__p[2];
  char v40;
  void **v41;

  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v4 = *((char *)a2 + 23) < 0;
  v5 = *((unsigned __int8 *)a2 + 23);
  if ((v5 & 0x80u) != 0)
    v5 = a2[1];
  if (v5)
  {
    v8 = 0;
    v9 = (_QWORD *)(a1 + 80);
    do
    {
      if (*(_BYTE *)(a1 + 72))
      {
        if (v4)
          v10 = (uint64_t *)*a2;
        else
          v10 = a2;
        v11 = *((unsigned __int8 *)v10 + v8);
        v13 = a3[1];
        v12 = (unint64_t)a3[2];
        if ((unint64_t)v13 >= v12)
        {
          v22 = *a3;
          v23 = (v13 - *a3) >> 2;
          v24 = v23 + 1;
          if ((unint64_t)(v23 + 1) >> 62)
            std::vector<int>::__throw_length_error[abi:ne180100]();
          v25 = v12 - (_QWORD)v22;
          if (v25 >> 1 > v24)
            v24 = v25 >> 1;
          if ((unint64_t)v25 >= 0x7FFFFFFFFFFFFFFCLL)
            v26 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v26 = v24;
          if (v26)
          {
            v27 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)(a3 + 2), v26);
            v22 = *a3;
            v13 = a3[1];
          }
          else
          {
            v27 = 0;
          }
          v28 = &v27[4 * v23];
          *(_DWORD *)v28 = v11;
          v14 = v28 + 4;
          while (v13 != v22)
          {
            v29 = *((_DWORD *)v13 - 1);
            v13 -= 4;
            *((_DWORD *)v28 - 1) = v29;
            v28 -= 4;
          }
          *a3 = v28;
          a3[1] = v14;
          a3[2] = &v27[4 * v26];
          if (v22)
            operator delete(v22);
        }
        else
        {
          *(_DWORD *)v13 = v11;
          v14 = v13 + 4;
        }
        a3[1] = v14;
      }
      else if (*(_QWORD *)(a1 + 104))
      {
        if (v4)
          v15 = (uint64_t *)*a2;
        else
          v15 = a2;
        v16 = *((_BYTE *)v15 + v8);
        v40 = 1;
        LOWORD(__p[0]) = v16;
        if (std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>(v9, (unsigned __int8 *)__p))
        {
          v41 = __p;
          v17 = std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v9, (unsigned __int8 *)__p, (uint64_t)&std::piecewise_construct, (__int128 **)&v41);
          v18 = v17;
          v20 = a3[1];
          v19 = (unint64_t)a3[2];
          if ((unint64_t)v20 >= v19)
          {
            v31 = *a3;
            v32 = (v20 - *a3) >> 2;
            v33 = v32 + 1;
            if ((unint64_t)(v32 + 1) >> 62)
              std::vector<int>::__throw_length_error[abi:ne180100]();
            v34 = v19 - (_QWORD)v31;
            if (v34 >> 1 > v33)
              v33 = v34 >> 1;
            if ((unint64_t)v34 >= 0x7FFFFFFFFFFFFFFCLL)
              v35 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v35 = v33;
            if (v35)
            {
              v36 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)(a3 + 2), v35);
              v31 = *a3;
              v20 = a3[1];
            }
            else
            {
              v36 = 0;
            }
            v37 = &v36[4 * v32];
            *(_DWORD *)v37 = *((_DWORD *)v18 + 10);
            v21 = v37 + 4;
            while (v20 != v31)
            {
              v38 = *((_DWORD *)v20 - 1);
              v20 -= 4;
              *((_DWORD *)v37 - 1) = v38;
              v37 -= 4;
            }
            *a3 = v37;
            a3[1] = v21;
            a3[2] = &v36[4 * v35];
            if (v31)
              operator delete(v31);
          }
          else
          {
            *(_DWORD *)v20 = *((_DWORD *)v17 + 10);
            v21 = v20 + 4;
          }
          a3[1] = v21;
        }
        if (v40 < 0)
          operator delete(__p[0]);
      }
      ++v8;
      v4 = *((char *)a2 + 23) < 0;
      v30 = *((unsigned __int8 *)a2 + 23);
      if ((v30 & 0x80u) != 0)
        v30 = a2[1];
    }
    while (v30 > v8);
  }
}

void sub_1AD915FF4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;
  void *v17;

  if (a15 < 0)
    operator delete(__p);
  v17 = *(void **)v15;
  if (*(_QWORD *)v15)
  {
    *(_QWORD *)(v15 + 8) = v17;
    operator delete(v17);
  }
  _Unwind_Resume(exception_object);
}

void quasar::PhonemeTextEmbedder::init(quasar::PhonemeTextEmbedder *this, quasar::SystemConfig *a2)
{
  _OWORD v3[17];

  quasar::TextEmbedder::init(this, a2);
  if ((*((char *)this + 71) & 0x80000000) == 0)
  {
    if (*((_BYTE *)this + 71))
      return;
LABEL_5:
    memset(v3, 0, sizeof(v3));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v3);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v3, "Missing string-id-mapping-file for PhonemeTextEmbedder");
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v3);
  }
  if (!*((_QWORD *)this + 7))
    goto LABEL_5;
}

void quasar::PhonemeTextEmbedder::preprocessInput(uint64_t a1, const std::string *a2, uint64_t a3)
{
  unint64_t v5;
  std::vector<std::string>::pointer begin;
  uint64_t v7;
  unint64_t v8;
  int v9;
  unsigned __int8 *v10;
  std::vector<std::string> v11;
  std::vector<std::string> *v12;

  if (*(char *)(a3 + 23) < 0)
  {
    **(_BYTE **)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
  }
  else
  {
    *(_BYTE *)a3 = 0;
    *(_BYTE *)(a3 + 23) = 0;
  }
  memset(&v11, 0, sizeof(v11));
  kaldi::SplitStringToVector(a2, " ", 1, (uint64_t)&v11);
  v5 = *(unsigned int *)(a1 + 120);
  if ((v5 & 0x80000000) == 0)
  {
    begin = v11.__begin_;
    if (0xAAAAAAAAAAAAAAABLL * (((char *)v11.__end_ - (char *)v11.__begin_) >> 3) > v5)
    {
      if (v11.__end_ == v11.__begin_)
      {
        v9 = 0;
      }
      else
      {
        v7 = 0;
        v8 = 0;
        v9 = 0;
        do
        {
          if (v9 >= *(_DWORD *)(a1 + 120))
            break;
          if (*(_QWORD *)(a1 + 104))
          {
            v10 = std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>((_QWORD *)(a1 + 80), (unsigned __int8 *)&begin[v7]);
            begin = v11.__begin_;
            if (v10)
            {
              std::string::operator=(&v11.__begin_[v9++], &v11.__begin_[v7]);
              begin = v11.__begin_;
            }
          }
          ++v8;
          ++v7;
        }
        while (0xAAAAAAAAAAAAAAABLL * (((char *)v11.__end_ - (char *)begin) >> 3) > v8);
      }
      std::vector<std::string>::resize(&v11, v9);
    }
  }
  kaldi::JoinVectorToString((uint64_t *)&v11, " ", 1, (__int128 *)a3);
  v12 = &v11;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v12);
}

void sub_1AD916230(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

void quasar::PhonemeTextEmbedder::returnVectorOfInts(uint64_t a1@<X0>, const std::string *a2@<X1>, char **a3@<X8>)
{
  uint64_t v5;
  unint64_t v6;
  unsigned __int8 *v7;
  unsigned __int8 *v8;
  unsigned __int8 *v9;
  unint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  char *v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned __int8 *v24;
  void **v25;

  v21 = 0;
  v22 = 0;
  v23 = 0;
  a3[1] = 0;
  a3[2] = 0;
  *a3 = 0;
  kaldi::SplitStringToVector(a2, " ", 1, (uint64_t)&v21);
  v5 = v21;
  if (v22 != v21)
  {
    v6 = 0;
    do
    {
      if (*(_QWORD *)(a1 + 104))
      {
        v7 = std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>((_QWORD *)(a1 + 80), (unsigned __int8 *)(v5 + 24 * v6));
        v5 = v21;
        if (v7)
        {
          v24 = (unsigned __int8 *)(v21 + 24 * v6);
          v8 = std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1 + 80, v24, (uint64_t)&std::piecewise_construct, (__int128 **)&v24);
          v9 = v8;
          v11 = a3[1];
          v10 = (unint64_t)a3[2];
          if ((unint64_t)v11 >= v10)
          {
            v13 = *a3;
            v14 = (v11 - *a3) >> 2;
            v15 = v14 + 1;
            if ((unint64_t)(v14 + 1) >> 62)
              std::vector<int>::__throw_length_error[abi:ne180100]();
            v16 = v10 - (_QWORD)v13;
            if (v16 >> 1 > v15)
              v15 = v16 >> 1;
            if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFFCLL)
              v17 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v17 = v15;
            if (v17)
            {
              v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)(a3 + 2), v17);
              v13 = *a3;
              v11 = a3[1];
            }
            else
            {
              v18 = 0;
            }
            v19 = &v18[4 * v14];
            *(_DWORD *)v19 = *((_DWORD *)v9 + 10);
            v12 = v19 + 4;
            while (v11 != v13)
            {
              v20 = *((_DWORD *)v11 - 1);
              v11 -= 4;
              *((_DWORD *)v19 - 1) = v20;
              v19 -= 4;
            }
            *a3 = v19;
            a3[1] = v12;
            a3[2] = &v18[4 * v17];
            if (v13)
              operator delete(v13);
          }
          else
          {
            *(_DWORD *)v11 = *((_DWORD *)v8 + 10);
            v12 = v11 + 4;
          }
          a3[1] = v12;
          v5 = v21;
        }
      }
      ++v6;
    }
    while (0xAAAAAAAAAAAAAAABLL * ((v22 - v5) >> 3) > v6);
  }
  v25 = (void **)&v21;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v25);
}

void sub_1AD916418(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void **a14)
{
  uint64_t v14;
  void *v16;

  v16 = *(void **)v14;
  if (*(_QWORD *)v14)
  {
    *(_QWORD *)(v14 + 8) = v16;
    operator delete(v16);
  }
  a14 = (void **)&a9;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a14);
  _Unwind_Resume(a1);
}

void quasar::GraphemeTextEmbedder::~GraphemeTextEmbedder(void **this)
{
  quasar::TextEmbedder::~TextEmbedder(this);
  JUMPOUT(0x1AF44D190);
}

void quasar::PhonemeTextEmbedder::~PhonemeTextEmbedder(void **this)
{
  quasar::TextEmbedder::~TextEmbedder(this);
  JUMPOUT(0x1AF44D190);
}

void quasar::TextEmbedder::~TextEmbedder(void **this)
{
  *this = off_1E5D34DF8;
  if (*((char *)this + 223) < 0)
    operator delete(this[25]);
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)(this + 20));
  if (*((char *)this + 159) < 0)
    operator delete(this[17]);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)(this + 10));
  if (*((char *)this + 71) < 0)
    operator delete(this[6]);
  if (*((char *)this + 47) < 0)
    operator delete(this[3]);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)(this + 1));
}

std::basic_string<char32_t> *std::basic_string<char32_t>::__assign_no_alias<true>(std::basic_string<char32_t> *__dst, const std::basic_string<char32_t>::value_type *__src, std::basic_string<char32_t>::size_type __n_add)
{
  BOOL v5;
  std::basic_string<char32_t>::size_type v6;

  v5 = __n_add > 4;
  v6 = __n_add - 4;
  if (v5)
  {
    std::basic_string<char32_t>::__grow_by_and_replace(__dst, 4uLL, v6, *((_BYTE *)&__dst->__r_.__value_.__s + 23) & 0x7F, 0, *((_BYTE *)&__dst->__r_.__value_.__s + 23) & 0x7F, __n_add, __src);
  }
  else
  {
    *((_BYTE *)&__dst->__r_.__value_.__s + 23) = __n_add;
    if (__n_add)
      memmove(__dst, __src, 4 * __n_add);
    __dst->__r_.__value_.__s.__data_[__n_add] = 0;
  }
  return __dst;
}

std::basic_string<char32_t> *std::basic_string<char32_t>::__assign_no_alias<false>(std::basic_string<char32_t> *this, const std::basic_string<char32_t>::value_type *__src, std::basic_string<char32_t>::size_type __n_add)
{
  std::basic_string<char32_t>::size_type v5;
  void *v6;

  v5 = this->__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL;
  if (v5 <= __n_add)
  {
    std::basic_string<char32_t>::__grow_by_and_replace(this, v5 - 1, __n_add - v5 + 1, this->__r_.__value_.__l.__size_, 0, this->__r_.__value_.__l.__size_, __n_add, __src);
  }
  else
  {
    v6 = (void *)this->__r_.__value_.__r.__words[0];
    this->__r_.__value_.__l.__size_ = __n_add;
    if (__n_add)
      memmove(v6, __src, 4 * __n_add);
    *((_DWORD *)v6 + __n_add) = 0;
  }
  return this;
}

uint64_t quasar::OptionValueBase::enforceMinVersion(uint64_t this, const quasar::SystemConfig *a2)
{
  _QWORD *v2;
  _BYTE *v3;

  v2 = (_QWORD *)(this + 32);
  if (*(char *)(this + 55) < 0)
  {
    if (!*(_QWORD *)(this + 40))
      return this;
    v3 = (_BYTE *)*v2;
  }
  else
  {
    v3 = (_BYTE *)(this + 32);
    if (!*(_BYTE *)(this + 55))
      return this;
  }
  if (*v3 != 60)
    return quasar::SystemConfig::enforceMinVersion((uint64_t)a2, *(_DWORD *)(this + 80), 0, (uint64_t)v2);
  return this;
}

_QWORD *quasar::OptionValueBase::setContextProvider(uint64_t a1, uint64_t *a2)
{
  return std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::operator=[abi:ne180100]((_QWORD *)(a1 + 88), a2);
}

void quasar::getOptional<std::vector<std::string>>(uint64_t a1@<X0>, uint64_t a2@<X1>, std::string *a3@<X8>)
{
  quasar::PTree *ChildOptional;
  quasar::PTree *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t String;
  __int128 *v10;
  __int128 v11;
  __int128 *v12;
  _QWORD *v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  void **v35;

  ChildOptional = (quasar::PTree *)quasar::PTree::getChildOptional(a1, a2);
  if (ChildOptional)
  {
    v6 = ChildOptional;
    if (!quasar::PTree::isList(ChildOptional))
    {
      v33 = 0u;
      v34 = 0u;
      v31 = 0u;
      v32 = 0u;
      v29 = 0u;
      v30 = 0u;
      v27 = 0u;
      v28 = 0u;
      v25 = 0u;
      v26 = 0u;
      v23 = 0u;
      v24 = 0u;
      v21 = 0u;
      v22 = 0u;
      v19 = 0u;
      v20 = 0u;
      v18 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v18);
      v14 = *(char *)(a2 + 23);
      if (v14 >= 0)
        v15 = a2;
      else
        v15 = *(_QWORD *)a2;
      if (v14 >= 0)
        v16 = *(unsigned __int8 *)(a2 + 23);
      else
        v16 = *(_QWORD *)(a2 + 8);
      v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, v15, v16);
      quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&v18);
    }
    v18 = 0uLL;
    *(_QWORD *)&v19 = 0;
    v7 = quasar::PTree::begin(v6);
    v8 = quasar::PTree::end(v6);
    if (v7 == v8)
    {
      v12 = (__int128 *)*((_QWORD *)&v18 + 1);
    }
    else
    {
      do
      {
        String = quasar::PTree::getString((quasar::PTree *)(v7 + 24));
        v10 = (__int128 *)*((_QWORD *)&v18 + 1);
        if (*((_QWORD *)&v18 + 1) >= (unint64_t)v19)
        {
          v12 = (__int128 *)std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v18, (__int128 *)String);
        }
        else
        {
          if (*(char *)(String + 23) < 0)
          {
            std::string::__init_copy_ctor_external(*((std::string **)&v18 + 1), *(const std::string::value_type **)String, *(_QWORD *)(String + 8));
          }
          else
          {
            v11 = *(_OWORD *)String;
            *(_QWORD *)(*((_QWORD *)&v18 + 1) + 16) = *(_QWORD *)(String + 16);
            *v10 = v11;
          }
          v12 = (__int128 *)((char *)v10 + 24);
        }
        *((_QWORD *)&v18 + 1) = v12;
        v7 += 88;
      }
      while (v7 != v8);
    }
    a3->__r_.__value_.__r.__words[0] = 0;
    a3->__r_.__value_.__l.__size_ = 0;
    a3->__r_.__value_.__r.__words[2] = 0;
    std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(a3, (__int128 *)v18, v12, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)((uint64_t)v12 - v18) >> 3));
    a3[1].__r_.__value_.__s.__data_[0] = 1;
    v35 = (void **)&v18;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v35);
  }
  else
  {
    a3->__r_.__value_.__s.__data_[0] = 0;
    a3[1].__r_.__value_.__s.__data_[0] = 0;
  }
}

void sub_1AD91682C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  *(_QWORD *)(v9 - 56) = &a9;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v9 - 56));
  _Unwind_Resume(a1);
}

uint64_t quasar::getOptional<quasar::PTree>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = quasar::PTree::getChildOptional(a1, a2);
  if (result)
    return std::__optional_destruct_base<quasar::PTree,false>::__optional_destruct_base[abi:ne180100]<quasar::PTree const&>((uint64_t)a3, result);
  *a3 = 0;
  a3[64] = 0;
  return result;
}

void quasar::OptionsBase::update(void (***a1)(void **__return_ptr), uint64_t a2, uint64_t a3)
{
  _QWORD *v6;
  _QWORD *v7;
  uint64_t ChildOptional;
  quasar::PTree *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  void *__p;
  _QWORD *v18;
  char v19;

  (**a1)(&__p);
  v6 = __p;
  v7 = v18;
  if (__p != v18)
  {
    do
    {
      (*(void (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*v6 + 8))(*v6, a2, a3);
      ++v6;
    }
    while (v6 != v7);
    v6 = __p;
  }
  if (v6)
  {
    v18 = v6;
    operator delete(v6);
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "overrides");
  ChildOptional = quasar::PTree::getChildOptional(a2, (uint64_t)&__p);
  v9 = (quasar::PTree *)ChildOptional;
  if (v19 < 0)
  {
    operator delete(__p);
    if (!v9)
      return;
  }
  else if (!ChildOptional)
  {
    return;
  }
  v10 = quasar::PTree::begin(v9);
  v11 = quasar::PTree::end(v9);
  if (v10 != v11)
  {
    v12 = v11;
    do
    {
      ((void (*)(void **__return_ptr, void (***)(void **__return_ptr)))**a1)(&__p, a1);
      v13 = __p;
      v14 = v18;
      if (__p != v18)
      {
        do
        {
          if (*(char *)(v10 + 23) < 0)
          {
            v16 = *(_QWORD *)v10;
            v15 = *(_QWORD *)(v10 + 8);
          }
          else
          {
            v15 = *(unsigned __int8 *)(v10 + 23);
            v16 = v10;
          }
          (*(void (**)(_QWORD, uint64_t, uint64_t, uint64_t))(*(_QWORD *)*v13 + 24))(*v13, v16, v15, v10 + 24);
          ++v13;
        }
        while (v13 != v14);
        v13 = __p;
      }
      if (v13)
      {
        v18 = v13;
        operator delete(v13);
      }
      v10 += 88;
    }
    while (v10 != v12);
  }
}

void sub_1AD916A08(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void quasar::OptionsBase::debugLog(void (***a1)(_QWORD **__return_ptr, _QWORD), uint64_t a2)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  int v9;
  uint64_t v10;
  _QWORD *v11;
  void **v12;
  uint64_t v13;
  void *__p[2];
  unsigned __int8 v15;
  _QWORD *v16;
  _QWORD *v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;

  if (quasar::gLogLevel >= 5)
  {
    v33 = 0u;
    v34 = 0u;
    v31 = 0u;
    v32 = 0u;
    v29 = 0u;
    v30 = 0u;
    v27 = 0u;
    v28 = 0u;
    v25 = 0u;
    v26 = 0u;
    v23 = 0u;
    v24 = 0u;
    v21 = 0u;
    v22 = 0u;
    v19 = 0u;
    v20 = 0u;
    v18 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v18);
    v4 = *(char *)(a2 + 23);
    if (v4 >= 0)
      v5 = a2;
    else
      v5 = *(_QWORD *)a2;
    if (v4 >= 0)
      v6 = *(unsigned __int8 *)(a2 + 23);
    else
      v6 = *(_QWORD *)(a2 + 8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v18, v5, v6);
    quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&v18);
  }
  (**a1)(&v16, a1);
  v7 = v16;
  v8 = v17;
  if (v16 != v17)
  {
    v9 = quasar::gLogLevel;
    do
    {
      if (v9 >= 5)
      {
        v10 = *v7;
        v33 = 0u;
        v34 = 0u;
        v31 = 0u;
        v32 = 0u;
        v29 = 0u;
        v30 = 0u;
        v27 = 0u;
        v28 = 0u;
        v25 = 0u;
        v26 = 0u;
        v23 = 0u;
        v24 = 0u;
        v21 = 0u;
        v22 = 0u;
        v19 = 0u;
        v20 = 0u;
        v18 = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v18);
        v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v18, (uint64_t)"    ", 4);
        (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)v10 + 16))(__p, v10);
        if ((v15 & 0x80u) == 0)
          v12 = __p;
        else
          v12 = (void **)__p[0];
        if ((v15 & 0x80u) == 0)
          v13 = v15;
        else
          v13 = (uint64_t)__p[1];
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)v12, v13);
        if ((char)v15 < 0)
          operator delete(__p[0]);
        quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&v18);
        v9 = quasar::gLogLevel;
      }
      ++v7;
    }
    while (v7 != v8);
    v7 = v16;
  }
  if (v7)
  {
    v17 = v7;
    operator delete(v7);
  }
}

void sub_1AD916BD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, uint64_t a17, char a18)
{
  quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&a18);
  _Unwind_Resume(a1);
}

void quasar::OptionsBase::enforceMinVersion(quasar::OptionsBase *this, const quasar::SystemConfig *a2)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t ConfigFileVersion;
  _QWORD *v7;

  (**(void (***)(uint64_t *__return_ptr))this)(&ConfigFileVersion);
  v4 = (_QWORD *)ConfigFileVersion;
  v5 = v7;
  if ((_QWORD *)ConfigFileVersion != v7)
  {
    do
    {
      (**(void (***)(_QWORD, const quasar::SystemConfig *))*v4)(*v4, a2);
      ++v4;
    }
    while (v4 != v5);
    v4 = (_QWORD *)ConfigFileVersion;
  }
  if (v4)
  {
    v7 = v4;
    operator delete(v4);
  }
  if (*((_DWORD *)a2 + 384))
  {
    ConfigFileVersion = quasar::SystemConfig::getConfigFileVersion(a2);
    *((_DWORD *)this + 2) = kaldi::quasar::Vocab::VocabSize((kaldi::quasar::Vocab *)&ConfigFileVersion);
  }
}

void sub_1AD916CD0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t quasar::ProcessingConnection::ProcessingConnection(uint64_t a1, uint64_t a2, __int128 *a3, __int128 *a4)
{
  __int128 v6;
  std::string *v7;
  __int128 v8;

  *(_QWORD *)a1 = a2;
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 8), *(const std::string::value_type **)a3, *((_QWORD *)a3 + 1));
  }
  else
  {
    v6 = *a3;
    *(_QWORD *)(a1 + 24) = *((_QWORD *)a3 + 2);
    *(_OWORD *)(a1 + 8) = v6;
  }
  v7 = (std::string *)(a1 + 32);
  if (*((char *)a4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)a4, *((_QWORD *)a4 + 1));
  }
  else
  {
    v8 = *a4;
    *(_QWORD *)(a1 + 48) = *((_QWORD *)a4 + 2);
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v8;
  }
  return a1;
}

void sub_1AD916D70(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 31) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

void quasar::ProcessingBlock::~ProcessingBlock(char **this)
{
  void **v2;

  *this = (char *)off_1E5D35B18;
  v2 = (void **)(this + 4);
  std::vector<quasar::ProcessingConnection>::__destroy_vector::operator()[abi:ne180100](&v2);
  std::__tree<std::string>::destroy((uint64_t)(this + 1), this[2]);
}

uint64_t *quasar::ProcessingBlock::connectOutput(uint64_t *a1, const void **a2)
{
  const void **v4;
  char *v5;
  unint64_t v6;
  uint64_t v7;
  _QWORD *v9;
  _OWORD v10[17];

  v4 = a2 + 1;
  v5 = (char *)*a2;
  if (v5 + 16 != (char *)std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::find<std::string>((uint64_t)*a2 + 8, a2 + 1))
  {
    memset(v10, 0, sizeof(v10));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v10);
    v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"Multiple connections to receiving block input name: ", 52);
    std::operator<<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v9, (uint64_t)v4);
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v10);
  }
  v6 = a1[5];
  if (v6 >= a1[6])
  {
    v7 = std::vector<quasar::ProcessingConnection>::__push_back_slow_path<quasar::ProcessingConnection const&>(a1 + 4, (uint64_t)a2);
  }
  else
  {
    std::allocator<quasar::ProcessingConnection>::construct[abi:ne180100]<quasar::ProcessingConnection,quasar::ProcessingConnection const&>((uint64_t)(a1 + 6), (_QWORD *)a1[5], (uint64_t)a2);
    v7 = v6 + 56;
    a1[5] = v6 + 56;
  }
  a1[5] = v7;
  return std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t **)*a2 + 1, v4, (uint64_t)v4);
}

void sub_1AD916EE8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&a9);
}

void quasar::ProcessingBlock::connectOutput(quasar::ProcessingBlock *this, quasar::ProcessingBlock *a2)
{
  void *v4[2];
  char v5;
  void *v6[2];
  char v7;
  const void *v8[3];
  char v9;
  void *__p;
  char v11;

  std::string::basic_string[abi:ne180100]<0>(v6, "in");
  std::string::basic_string[abi:ne180100]<0>(v4, "out");
  quasar::ProcessingConnection::ProcessingConnection((uint64_t)v8, (uint64_t)a2, (__int128 *)v6, (__int128 *)v4);
  quasar::ProcessingBlock::connectOutput((uint64_t *)this, v8);
  if (v11 < 0)
    operator delete(__p);
  if (v9 < 0)
    operator delete((void *)v8[1]);
  if (v5 < 0)
    operator delete(v4[0]);
  if (v7 < 0)
    operator delete(v6[0]);
}

void sub_1AD916FA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22)
{
  fst::FstHeader::~FstHeader(&a22);
  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  _Unwind_Resume(a1);
}

void quasar::ProcessingBlock::disconnectOutput(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  int v6;
  uint64_t v7;
  unsigned __int8 *v8;
  int v9;
  uint64_t v10;
  unsigned __int8 *v11;
  unsigned __int8 *v12;
  unsigned __int8 *v13;
  unsigned __int8 *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(_QWORD *)(a1 + 40);
  if (v2 == v3)
    return;
  v5 = *a2;
  v6 = *((char *)a2 + 31);
  if (v6 >= 0)
    v7 = *((unsigned __int8 *)a2 + 31);
  else
    v7 = a2[2];
  if (v6 >= 0)
    v8 = (unsigned __int8 *)(a2 + 1);
  else
    v8 = (unsigned __int8 *)a2[1];
  v9 = *((char *)a2 + 55);
  if (v9 >= 0)
    v10 = *((unsigned __int8 *)a2 + 55);
  else
    v10 = a2[5];
  v13 = (unsigned __int8 *)a2[4];
  v11 = (unsigned __int8 *)(a2 + 4);
  v12 = v13;
  if (v9 >= 0)
    v14 = v11;
  else
    v14 = v12;
  while (1)
  {
    if (*(_QWORD *)v2 != v5)
      goto LABEL_37;
    v15 = *(unsigned __int8 *)(v2 + 31);
    v16 = (v15 & 0x80u) == 0 ? *(unsigned __int8 *)(v2 + 31) : *(_QWORD *)(v2 + 16);
    if (v16 != v7)
      goto LABEL_37;
    if ((v15 & 0x80) != 0)
    {
      if (memcmp(*(const void **)(v2 + 8), v8, *(_QWORD *)(v2 + 16)))
        goto LABEL_37;
    }
    else if (*(_BYTE *)(v2 + 31))
    {
      v17 = 0;
      while (*(unsigned __int8 *)(v2 + v17 + 8) == v8[v17])
      {
        if (v15 == ++v17)
          goto LABEL_26;
      }
      goto LABEL_37;
    }
LABEL_26:
    v18 = *(unsigned __int8 *)(v2 + 55);
    if ((v18 & 0x80u) == 0)
      v19 = *(unsigned __int8 *)(v2 + 55);
    else
      v19 = *(_QWORD *)(v2 + 40);
    if (v19 != v10)
      goto LABEL_37;
    if ((v18 & 0x80) != 0)
      break;
    if (!*(_BYTE *)(v2 + 55))
      goto LABEL_39;
    v20 = 0;
    while (*(unsigned __int8 *)(v2 + v20 + 32) == v14[v20])
    {
      if (v18 == ++v20)
        goto LABEL_39;
    }
LABEL_37:
    v2 += 56;
    if (v2 == v3)
      return;
  }
  if (memcmp(*(const void **)(v2 + 32), v14, *(_QWORD *)(v2 + 40)))
    goto LABEL_37;
LABEL_39:
  std::__tree<std::string>::__erase_unique<std::string>((uint64_t **)(v5 + 8), (const void **)(v2 + 8));
  std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<quasar::ProcessingConnection *,quasar::ProcessingConnection *,quasar::ProcessingConnection *>((uint64_t)&v24, v2 + 56, *(_QWORD *)(a1 + 40), v2);
  v22 = v21;
  v23 = *(_QWORD *)(a1 + 40);
  if (v23 != v21)
  {
    do
    {
      v23 -= 56;
      std::allocator<quasar::ProcessingConnection>::destroy[abi:ne180100](a1 + 48, v23);
    }
    while (v23 != v22);
  }
  *(_QWORD *)(a1 + 40) = v22;
}

void quasar::ProcessingBlock::disconnectOutput(quasar::ProcessingBlock *this, quasar::ProcessingBlock *a2)
{
  void *v4[2];
  char v5;
  void *v6[2];
  char v7;
  uint64_t v8[3];
  char v9;
  void *__p;
  char v11;

  std::string::basic_string[abi:ne180100]<0>(v6, "in");
  std::string::basic_string[abi:ne180100]<0>(v4, "out");
  quasar::ProcessingConnection::ProcessingConnection((uint64_t)v8, (uint64_t)a2, (__int128 *)v6, (__int128 *)v4);
  quasar::ProcessingBlock::disconnectOutput((uint64_t)this, v8);
  if (v11 < 0)
    operator delete(__p);
  if (v9 < 0)
    operator delete((void *)v8[1]);
  if (v5 < 0)
    operator delete(v4[0]);
  if (v7 < 0)
    operator delete(v6[0]);
}

void sub_1AD917244(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22)
{
  fst::FstHeader::~FstHeader(&a22);
  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  _Unwind_Resume(a1);
}

uint64_t quasar::ProcessingBlock::send(uint64_t result, const void **a2, uint64_t a3, char a4)
{
  uint64_t v6;
  uint64_t *v7;
  uint64_t *v8;
  char v10;
  uint64_t v11;
  const void *v12;
  const void *v13;
  int v14;
  unsigned __int8 *v15;
  uint64_t v16;
  _BYTE *v17;
  _QWORD *v18;
  const char *v19;
  size_t v20;
  _QWORD *v21;
  _QWORD *v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  _OWORD v27[17];

  v6 = result;
  v7 = *(uint64_t **)(result + 32);
  v8 = *(uint64_t **)(result + 40);
  if (v7 == v8)
    goto LABEL_22;
  v10 = 0;
  do
  {
    v11 = *((unsigned __int8 *)v7 + 55);
    if ((v11 & 0x80u) == 0)
      v12 = (const void *)*((unsigned __int8 *)v7 + 55);
    else
      v12 = (const void *)v7[5];
    v13 = (const void *)*((unsigned __int8 *)a2 + 23);
    v14 = (char)v13;
    if ((char)v13 < 0)
      v13 = a2[1];
    if (v12 == v13)
    {
      if (v14 >= 0)
        v15 = (unsigned __int8 *)a2;
      else
        v15 = (unsigned __int8 *)*a2;
      if ((v11 & 0x80) != 0)
      {
        result = memcmp((const void *)v7[4], v15, v7[5]);
        if ((_DWORD)result)
          goto LABEL_20;
LABEL_19:
        v17 = (_BYTE *)*v7;
        quasar::ProcessingBlock::ensureInitialized((_BYTE *)*v7);
        result = (*(uint64_t (**)(_BYTE *, uint64_t *, uint64_t))(*(_QWORD *)v17 + 80))(v17, v7 + 1, a3);
        v10 = 1;
        goto LABEL_20;
      }
      if (!*((_BYTE *)v7 + 55))
        goto LABEL_19;
      v16 = 0;
      while (*((unsigned __int8 *)v7 + v16 + 32) == v15[v16])
      {
        if (v11 == ++v16)
          goto LABEL_19;
      }
    }
LABEL_20:
    v7 += 7;
  }
  while (v7 != v8);
  if ((v10 & 1) == 0)
  {
LABEL_22:
    if ((a4 & 1) == 0)
    {
      memset(v27, 0, sizeof(v27));
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v27);
      v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)"output port ", 12);
      v19 = (const char *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 16))(v6);
      v20 = strlen(v19);
      v21 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)v19, v20);
      v22 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)":", 1);
      v23 = *((char *)a2 + 23);
      if (v23 >= 0)
        v24 = (uint64_t)a2;
      else
        v24 = (uint64_t)*a2;
      if (v23 >= 0)
        v25 = *((unsigned __int8 *)a2 + 23);
      else
        v25 = (uint64_t)a2[1];
      v26 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, v24, v25);
      std::operator<<[abi:ne180100]<std::char_traits<char>>(v26, " not connected");
      quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v27);
    }
  }
  return result;
}

uint64_t quasar::ProcessingBlock::receive(_BYTE *a1, uint64_t a2, uint64_t a3)
{
  quasar::ProcessingBlock::ensureInitialized(a1);
  return (*(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(*(_QWORD *)a1 + 80))(a1, a2, a3);
}

void quasar::ProcessingBlock::send(uint64_t a1, uint64_t a2, char a3)
{
  void *__p[2];
  char v7;

  std::string::basic_string[abi:ne180100]<0>(__p, "out");
  quasar::ProcessingBlock::send(a1, (const void **)__p, a2, a3);
  if (v7 < 0)
    operator delete(__p[0]);
}

void sub_1AD917518(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_BYTE *quasar::ProcessingBlock::ensureInitialized(_BYTE *this)
{
  _BYTE *v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  std::string *v5;
  __int128 v6;
  std::string v7;
  void *__p[2];
  std::string::size_type v9;

  if (this[56])
  {
    v1 = this;
    v2 = (*(uint64_t (**)(_BYTE *))(*(_QWORD *)this + 88))(this);
    if (v2)
    {
      v3 = v2;
      v4 = (char *)(*(uint64_t (**)(_BYTE *))(*(_QWORD *)v1 + 16))(v1);
      std::string::basic_string[abi:ne180100]<0>(&v7, v4);
      v5 = std::string::append(&v7, " Config:");
      v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
      v9 = v5->__r_.__value_.__r.__words[2];
      *(_OWORD *)__p = v6;
      v5->__r_.__value_.__l.__size_ = 0;
      v5->__r_.__value_.__r.__words[2] = 0;
      v5->__r_.__value_.__r.__words[0] = 0;
      (*(void (**)(uint64_t, void **))(*(_QWORD *)v3 + 8))(v3, __p);
      if (SHIBYTE(v9) < 0)
        operator delete(__p[0]);
      if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v7.__r_.__value_.__l.__data_);
    }
    this = (_BYTE *)(*(uint64_t (**)(_BYTE *))(*(_QWORD *)v1 + 72))(v1);
    v1[56] = 0;
  }
  return this;
}

void sub_1AD917600(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

void quasar::ProcessingBlock::receive(_BYTE *a1, uint64_t a2)
{
  void *__p[2];
  char v5;

  std::string::basic_string[abi:ne180100]<0>(__p, "in");
  quasar::ProcessingBlock::ensureInitialized(a1);
  (*(void (**)(_BYTE *, void **, uint64_t))(*(_QWORD *)a1 + 80))(a1, __p, a2);
  if (v5 < 0)
    operator delete(__p[0]);
}

void sub_1AD91769C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void quasar::ProcessingBlock::updateConfiguration(uint64_t a1, const quasar::SystemConfig *a2, uint64_t a3, uint64_t a4)
{
  void (***v7)(void **__return_ptr);
  quasar::OptionsBase *v8;

  v7 = (void (***)(void **__return_ptr))(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 88))(a1);
  if (v7)
  {
    v8 = (quasar::OptionsBase *)v7;
    quasar::OptionsBase::update(v7, a3, a4);
    quasar::OptionsBase::enforceMinVersion(v8, a2);
  }
}

uint64_t quasar::ProcessingBlock::checkInputsConnected()
{
  return 0;
}

void quasar::MultiInputProcessingBlock::process(uint64_t a1, unsigned __int8 *a2, uint64_t **a3)
{
  unsigned __int8 **v6;
  unsigned __int8 **v7;
  char v8;
  unsigned __int8 *v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  unsigned __int8 **v15;
  unsigned __int8 **v16;
  uint64_t v17;
  unsigned __int8 ***v18;

  (*(void (**)(unsigned __int8 ***__return_ptr))(*(_QWORD *)a1 + 16))(&v15);
  v6 = v15;
  v7 = v16;
  v8 = 1;
  if (v15 != v16)
  {
    do
    {
      v9 = *v6;
      quasar::ProcessingInput::setValue(*v6, a2, a3);
      v8 &= v9[24] != 0;
      ++v6;
    }
    while (v6 != v7);
    v6 = v15;
  }
  if (v6)
  {
    v16 = v6;
    operator delete(v6);
  }
  if ((v8 & 1) != 0)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)a1 + 8))(a1);
    (*(void (**)(uint64_t **__return_ptr, uint64_t))(*(_QWORD *)a1 + 16))(&v13, a1);
    v10 = v13;
    v11 = v14;
    if (v13 != v14)
    {
      do
      {
        v12 = *v10++;
        std::vector<quasar::TranslationPhraseInternal>::__vdeallocate((void **)(v12 + 32));
        *(_QWORD *)(v12 + 32) = 0;
        *(_QWORD *)(v12 + 40) = 0;
        *(_QWORD *)(v12 + 48) = 0;
        v16 = 0;
        v17 = 0;
        v15 = 0;
        v18 = &v15;
        std::vector<quasar::TranslationPhraseInternal>::__destroy_vector::operator()[abi:ne180100]((void ***)&v18);
        *(_BYTE *)(v12 + 24) = 0;
      }
      while (v10 != v11);
      v10 = v13;
    }
    if (v10)
    {
      v14 = v10;
      operator delete(v10);
    }
  }
}

void sub_1AD917858(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void quasar::ProcessingInput::setValue(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t **a3)
{
  uint64_t v4;
  size_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  unsigned __int8 *v11;
  unsigned __int8 *v12;
  BOOL v13;
  _QWORD *v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  _OWORD v19[17];

  v4 = a2[23];
  v5 = *((_QWORD *)a2 + 1);
  if ((v4 & 0x80u) == 0)
    v6 = a2[23];
  else
    v6 = *((_QWORD *)a2 + 1);
  v7 = a1[23];
  v8 = (char)v7;
  if ((v7 & 0x80u) != 0)
    v7 = *((_QWORD *)a1 + 1);
  if (v6 != v7)
    return;
  if (v8 >= 0)
    v11 = a1;
  else
    v11 = *(unsigned __int8 **)a1;
  if ((v4 & 0x80) != 0)
  {
    if (memcmp(*(const void **)a2, v11, v5))
      return;
    goto LABEL_17;
  }
  if (!(_DWORD)v4)
  {
LABEL_17:
    if (a1[24])
      v13 = quasar::gLogLevel < 1;
    else
      v13 = 1;
    if (!v13)
    {
      memset(v19, 0, sizeof(v19));
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v19);
      v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"Input '", 7);
      v15 = (char)a2[23];
      if (v15 >= 0)
        v16 = (uint64_t)a2;
      else
        v16 = *(_QWORD *)a2;
      if (v15 >= 0)
        v17 = a2[23];
      else
        v17 = *((_QWORD *)a2 + 1);
      v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, v16, v17);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)"' set multiple times!", 21);
      quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)v19);
    }
    if (a1 + 32 != (unsigned __int8 *)a3)
      std::vector<quasar::TranslationPhraseInternal>::__assign_with_size[abi:ne180100]<quasar::TranslationPhraseInternal*,quasar::TranslationPhraseInternal*>((uint64_t)(a1 + 32), *a3, a3[1], 0x8F5C28F5C28F5C29 * (a3[1] - *a3));
    a1[24] = 1;
    return;
  }
  v12 = a2;
  while (*v12 == *v11)
  {
    ++v12;
    ++v11;
    if (!--v4)
      goto LABEL_17;
  }
}

void sub_1AD9179EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)&a9);
  _Unwind_Resume(a1);
}

void `virtual thunk to'quasar::MultiInputProcessingBlock::process(_QWORD *a1, unsigned __int8 *a2, uint64_t **a3)
{
  quasar::MultiInputProcessingBlock::process((uint64_t)a1 + *(_QWORD *)(*a1 - 96), a2, a3);
}

void quasar::MultiInputProcessingBlock::checkInputsSet(quasar::MultiInputProcessingBlock *this)
{
  __int128 **v2;
  __int128 **v3;
  int v4;
  int v5;
  int v6;
  int v7;
  __int128 *v8;
  int v9;
  _BOOL4 v10;
  _BOOL4 v11;
  std::string *v12;
  __int128 v13;
  std::string *v14;
  _QWORD *v15;
  const char *v16;
  size_t v17;
  _QWORD *v18;
  _QWORD *v19;
  void **v20;
  uint64_t v21;
  quasar::MultiInputProcessingBlock *v22;
  void **v23[2];
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 **v41;
  __int128 **v42;
  unsigned __int8 v43;
  uint64_t v44;
  std::string *v45;
  unint64_t v46;

  v44 = 0;
  v45 = 0;
  v46 = 0;
  (*(void (**)(__int128 ***__return_ptr))(*(_QWORD *)this + 16))(&v41);
  v22 = this;
  v2 = v41;
  v3 = v42;
  v4 = 1;
  if (v41 != v42)
  {
    v5 = 1;
    do
    {
      v6 = v5;
      v7 = v4;
      v8 = *v2;
      v9 = *((unsigned __int8 *)*v2 + 24);
      v10 = *((_BYTE *)*v2 + 24) == 0;
      v11 = *((_BYTE *)*v2 + 24) != 0;
      if (!*((_BYTE *)*v2 + 24))
      {
        v12 = v45;
        if ((unint64_t)v45 >= v46)
        {
          v14 = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>(&v44, *v2);
        }
        else
        {
          if (*((char *)v8 + 23) < 0)
          {
            std::string::__init_copy_ctor_external(v45, *(const std::string::value_type **)v8, *((_QWORD *)v8 + 1));
          }
          else
          {
            v13 = *v8;
            v45->__r_.__value_.__r.__words[2] = *((_QWORD *)v8 + 2);
            *(_OWORD *)&v12->__r_.__value_.__l.__data_ = v13;
          }
          v14 = v12 + 1;
        }
        v45 = v14;
      }
      v4 = v7 & v11;
      v5 = v6 & v10;
      std::vector<quasar::TranslationPhraseInternal>::__vdeallocate((void **)v8 + 4);
      *((_QWORD *)v8 + 4) = 0;
      *((_QWORD *)v8 + 5) = 0;
      *((_QWORD *)v8 + 6) = 0;
      *(_QWORD *)&v25 = 0;
      v24 = 0uLL;
      v23[0] = (void **)&v24;
      std::vector<quasar::TranslationPhraseInternal>::__destroy_vector::operator()[abi:ne180100](v23);
      *((_BYTE *)v8 + 24) = 0;
      ++v2;
    }
    while (v2 != v3);
    v2 = v41;
    if (v9)
      LOBYTE(v4) = v7;
    else
      LOBYTE(v4) = v6;
  }
  if (v2)
  {
    v42 = v2;
    operator delete(v2);
  }
  if ((v4 & 1) == 0)
  {
    v39 = 0u;
    v40 = 0u;
    v37 = 0u;
    v38 = 0u;
    v35 = 0u;
    v36 = 0u;
    v33 = 0u;
    v34 = 0u;
    v31 = 0u;
    v32 = 0u;
    v29 = 0u;
    v30 = 0u;
    v27 = 0u;
    v28 = 0u;
    v25 = 0u;
    v26 = 0u;
    v24 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v24);
    v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v24, (uint64_t)"Missing input(s) for ", 21);
    v16 = (const char *)(*(uint64_t (**)(char *))(*(_QWORD *)((char *)v22 + *(_QWORD *)(*(_QWORD *)v22 - 24))
                                                          + 16))((char *)v22 + *(_QWORD *)(*(_QWORD *)v22 - 24));
    v17 = strlen(v16);
    v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)v16, v17);
    v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)": ", 2);
    v23[0] = (void **)", ";
    v23[1] = (void **)2;
    quasar::join<std::vector<std::string>>(&v44, (uint64_t *)v23);
    if ((v43 & 0x80u) == 0)
      v20 = (void **)&v41;
    else
      v20 = (void **)v41;
    if ((v43 & 0x80u) == 0)
      v21 = v43;
    else
      v21 = (uint64_t)v42;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)v20, v21);
    if ((char)v43 < 0)
      operator delete(v41);
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&v24);
  }
  *(_QWORD *)&v24 = &v44;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v24);
}

void sub_1AD917C7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void **a13)
{
  uint64_t v13;

  a13 = (void **)(v13 - 112);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a13);
  _Unwind_Resume(a1);
}

void `virtual thunk to'quasar::MultiInputProcessingBlock::checkInputsSet(quasar::MultiInputProcessingBlock *this)
{
  quasar::MultiInputProcessingBlock::checkInputsSet((quasar::MultiInputProcessingBlock *)((char *)this
                                                                                        + *(_QWORD *)(*(_QWORD *)this - 56)));
}

uint64_t quasar::MultiInputProcessingBlock::checkInputsConnected(uint64_t a1, uint64_t a2)
{
  const void ***v4;
  const void ***v5;
  uint64_t v6;
  const void **v7;
  _QWORD *v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  int v14;
  void *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  const void **v19;
  const void ***v20;
  _QWORD *v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  const void **v31;
  const void ***v32;
  BOOL v33;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  const void ***v52;
  const void ***v53;
  char **v54;
  char *v55[3];

  v55[0] = 0;
  v55[1] = 0;
  v54 = v55;
  (*(void (**)(const void ****__return_ptr))(*(_QWORD *)a1 + 16))(&v52);
  v4 = v52;
  v5 = v53;
  if (v52 == v53)
  {
    v6 = 0;
    if (v52)
    {
LABEL_21:
      v53 = v4;
      operator delete(v4);
    }
  }
  else
  {
    v6 = 0;
    do
    {
      v7 = *v4;
      std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t **)&v54, *v4, (uint64_t)*v4);
      if (a1 + 16 + *(_QWORD *)(*(_QWORD *)a1 - 24) == std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::find<std::string>(a1 + 8 + *(_QWORD *)(*(_QWORD *)a1 - 24), v7))
      {
        if (quasar::gLogLevel >= 1)
        {
          v50 = 0u;
          v51 = 0u;
          v48 = 0u;
          v49 = 0u;
          v46 = 0u;
          v47 = 0u;
          v44 = 0u;
          v45 = 0u;
          v42 = 0u;
          v43 = 0u;
          v40 = 0u;
          v41 = 0u;
          v38 = 0u;
          v39 = 0u;
          v36 = 0u;
          v37 = 0u;
          v35 = 0u;
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v35);
          v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v35, (uint64_t)"Block '", 7);
          v9 = *(char *)(a2 + 23);
          if (v9 >= 0)
            v10 = a2;
          else
            v10 = *(_QWORD *)a2;
          if (v9 >= 0)
            v11 = *(unsigned __int8 *)(a2 + 23);
          else
            v11 = *(_QWORD *)(a2 + 8);
          v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, v10, v11);
          v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"' - required input not connected: '", 35);
          v14 = *((char *)v7 + 23);
          if (v14 >= 0)
            v15 = v7;
          else
            v15 = (void *)*v7;
          if (v14 >= 0)
            v16 = *((unsigned __int8 *)v7 + 23);
          else
            v16 = (uint64_t)v7[1];
          v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)v15, v16);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"'", 1);
          quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)&v35);
        }
        v6 = (v6 + 1);
      }
      ++v4;
    }
    while (v4 != v5);
    v4 = v52;
    if (v52)
      goto LABEL_21;
  }
  v18 = a1 + *(_QWORD *)(*(_QWORD *)a1 - 24);
  v19 = *(const void ***)(v18 + 8);
  v20 = (const void ***)(v18 + 16);
  if (v19 != (const void **)(v18 + 16))
  {
    do
    {
      if (v55 == (char **)std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::find<std::string>((uint64_t)&v54, v19 + 4))
      {
        if (quasar::gLogLevel >= 1)
        {
          v50 = 0u;
          v51 = 0u;
          v48 = 0u;
          v49 = 0u;
          v46 = 0u;
          v47 = 0u;
          v44 = 0u;
          v45 = 0u;
          v42 = 0u;
          v43 = 0u;
          v40 = 0u;
          v41 = 0u;
          v38 = 0u;
          v39 = 0u;
          v36 = 0u;
          v37 = 0u;
          v35 = 0u;
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v35);
          v21 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v35, (uint64_t)"Block '", 7);
          v22 = *(char *)(a2 + 23);
          if (v22 >= 0)
            v23 = a2;
          else
            v23 = *(_QWORD *)a2;
          if (v22 >= 0)
            v24 = *(unsigned __int8 *)(a2 + 23);
          else
            v24 = *(_QWORD *)(a2 + 8);
          v25 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, v23, v24);
          v26 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)"' - nonexistent input connected: '", 34);
          v27 = *((char *)v19 + 55);
          if (v27 >= 0)
            v28 = (uint64_t)(v19 + 4);
          else
            v28 = (uint64_t)v19[4];
          if (v27 >= 0)
            v29 = *((unsigned __int8 *)v19 + 55);
          else
            v29 = (uint64_t)v19[5];
          v30 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, v28, v29);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)"'", 1);
          quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)&v35);
        }
        v6 = (v6 + 1);
      }
      v31 = (const void **)v19[1];
      if (v31)
      {
        do
        {
          v32 = (const void ***)v31;
          v31 = (const void **)*v31;
        }
        while (v31);
      }
      else
      {
        do
        {
          v32 = (const void ***)v19[2];
          v33 = *v32 == v19;
          v19 = (const void **)v32;
        }
        while (!v33);
      }
      v19 = (const void **)v32;
    }
    while (v32 != v20);
  }
  std::__tree<std::string>::destroy((uint64_t)&v54, v55[0]);
  return v6;
}

void sub_1AD917FB8(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<std::string>::destroy(v1 - 112, *(char **)(v1 - 104));
  _Unwind_Resume(a1);
}

void sub_1AD918008(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)&a9);
  JUMPOUT(0x1AD917FD4);
}

uint64_t `virtual thunk to'quasar::MultiInputProcessingBlock::checkInputsConnected(_QWORD *a1, uint64_t a2)
{
  return quasar::MultiInputProcessingBlock::checkInputsConnected((uint64_t)a1 + *(_QWORD *)(*a1 - 64), a2);
}

uint64_t std::__optional_destruct_base<quasar::PTree,false>::__optional_destruct_base[abi:ne180100]<quasar::PTree const&>(uint64_t a1, uint64_t a2)
{
  __int128 v4;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  if (*(char *)(a2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 8), *(const std::string::value_type **)(a2 + 8), *(_QWORD *)(a2 + 16));
  }
  else
  {
    v4 = *(_OWORD *)(a2 + 8);
    *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 8) = v4;
  }
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  std::vector<std::pair<std::string,quasar::PTree>>::__init_with_size[abi:ne180100]<std::pair<std::string,quasar::PTree>*,std::pair<std::string,quasar::PTree>*>((std::string *)(a1 + 32), *(_QWORD *)(a2 + 32), *(_QWORD *)(a2 + 40), 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*(_QWORD *)(a2 + 40) - *(_QWORD *)(a2 + 32)) >> 3));
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  *(_BYTE *)(a1 + 64) = 1;
  return a1;
}

void sub_1AD9180D0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 31) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

void std::vector<quasar::TranslationPhraseInternal>::__assign_with_size[abi:ne180100]<quasar::TranslationPhraseInternal*,quasar::TranslationPhraseInternal*>(uint64_t a1, uint64_t *a2, uint64_t *a3, unint64_t a4)
{
  uint64_t v8;
  void *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v8 = a1 + 16;
  v9 = *(void **)a1;
  if (0x8F5C28F5C28F5C29 * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 3) < a4)
  {
    std::vector<quasar::TranslationPhraseInternal>::__vdeallocate((void **)a1);
    if (a4 > 0x147AE147AE147AELL)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v10 = 0x1EB851EB851EB852 * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 3);
    if (v10 <= a4)
      v10 = a4;
    if (0x8F5C28F5C28F5C29 * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 3) >= 0xA3D70A3D70A3D7)
      v11 = 0x147AE147AE147AELL;
    else
      v11 = v10;
    std::vector<quasar::TranslationPhraseInternal>::__vallocate[abi:ne180100]((_QWORD *)a1, v11);
    v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<quasar::TranslationPhraseInternal>,quasar::TranslationPhraseInternal*,quasar::TranslationPhraseInternal*,quasar::TranslationPhraseInternal*>(v8, (uint64_t)a2, (uint64_t)a3, *(_QWORD *)(a1 + 8));
    goto LABEL_11;
  }
  if (0x8F5C28F5C28F5C29 * ((uint64_t)(*(_QWORD *)(a1 + 8) - (_QWORD)v9) >> 3) < a4)
  {
    v13 = &a2[(uint64_t)(*(_QWORD *)(a1 + 8) - (_QWORD)v9) >> 3];
    std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,quasar::TranslationPhraseInternal *,quasar::TranslationPhraseInternal *,quasar::TranslationPhraseInternal *,0>(a2, v13, (uint64_t)v9);
    v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<quasar::TranslationPhraseInternal>,quasar::TranslationPhraseInternal*,quasar::TranslationPhraseInternal*,quasar::TranslationPhraseInternal*>(v8, (uint64_t)v13, (uint64_t)a3, *(_QWORD *)(a1 + 8));
LABEL_11:
    *(_QWORD *)(a1 + 8) = v12;
    return;
  }
  std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,quasar::TranslationPhraseInternal *,quasar::TranslationPhraseInternal *,quasar::TranslationPhraseInternal *,0>(a2, a3, (uint64_t)v9);
  v15 = v14;
  v16 = *(_QWORD *)(a1 + 8);
  if (v16 != v14)
  {
    do
      quasar::TranslationPhraseInternal::~TranslationPhraseInternal((quasar::TranslationPhraseInternal *)(v16 - 200));
    while (v16 != v15);
  }
  *(_QWORD *)(a1 + 8) = v15;
}

void sub_1AD918264(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_1AD91826C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void std::vector<quasar::TranslationPhraseInternal>::__vdeallocate(void **a1)
{
  char *v1;
  char *v3;
  void *v4;

  v1 = (char *)*a1;
  if (*a1)
  {
    v3 = (char *)a1[1];
    v4 = v1;
    if (v3 != v1)
    {
      do
        quasar::TranslationPhraseInternal::~TranslationPhraseInternal((quasar::TranslationPhraseInternal *)(v3 - 200));
      while (v3 != v1);
      v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

uint64_t *std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,quasar::TranslationPhraseInternal *,quasar::TranslationPhraseInternal *,quasar::TranslationPhraseInternal *,0>(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;

  v4 = a1;
  if (a1 != a2)
  {
    do
    {
      quasar::TranslationPhraseInternal::operator=(a3, v4);
      v4 += 25;
      a3 += 200;
    }
    while (v4 != a2);
    return a2;
  }
  return v4;
}

uint64_t quasar::TranslationPhraseInternal::operator=(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;

  v4 = *a2;
  *(_BYTE *)(a1 + 8) = *((_BYTE *)a2 + 8);
  *(_QWORD *)a1 = v4;
  if ((uint64_t *)a1 != a2)
    std::vector<quasar::TranslationToken>::__assign_with_size[abi:ne180100]<quasar::TranslationToken*,quasar::TranslationToken*>(a1 + 16, (std::string *)a2[2], (__int128 *)a2[3], 0x8E38E38E38E38E39 * ((a2[3] - a2[2]) >> 3));
  std::string::operator=((std::string *)(a1 + 40), (const std::string *)(a2 + 5));
  std::__optional_storage_base<std::string,false>::__assign_from[abi:ne180100]<std::__optional_copy_assign_base<std::string,false> const&>((std::string *)(a1 + 64), (const std::string *)(a2 + 8));
  std::__optional_storage_base<std::vector<quasar::AlternativeSelectionSpan>,false>::__assign_from[abi:ne180100]<std::__optional_copy_assign_base<std::vector<quasar::AlternativeSelectionSpan>,false> const&>(a1 + 96, (uint64_t)(a2 + 12));
  *(_WORD *)(a1 + 128) = *((_WORD *)a2 + 64);
  if ((uint64_t *)a1 != a2)
    std::vector<quasar::TranslationTokenInternal>::__assign_with_size[abi:ne180100]<quasar::TranslationTokenInternal*,quasar::TranslationTokenInternal*>(a1 + 136, (quasar::TranslationTokenInternal *)a2[17], (quasar::TranslationTokenInternal *)a2[18], 0xF0F0F0F0F0F0F0F1 * ((a2[18] - a2[17]) >> 3));
  *(_QWORD *)(a1 + 160) = a2[20];
  std::string::operator=((std::string *)(a1 + 168), (const std::string *)a2 + 7);
  quasar::MetaInfo::operator=((quasar::MetaInfo::Impl **)(a1 + 192), (const quasar::MetaInfo::Impl **)a2 + 24);
  return a1;
}

{
  uint64_t v4;
  void **v5;
  __int128 v6;
  void **v7;
  __int128 v8;

  v4 = *a2;
  *(_BYTE *)(a1 + 8) = *((_BYTE *)a2 + 8);
  *(_QWORD *)a1 = v4;
  std::vector<quasar::TranslationToken>::__vdeallocate((void **)(a1 + 16));
  *(_OWORD *)(a1 + 16) = *((_OWORD *)a2 + 1);
  *(_QWORD *)(a1 + 32) = a2[4];
  a2[2] = 0;
  a2[3] = 0;
  a2[4] = 0;
  v5 = (void **)(a1 + 40);
  if (*(char *)(a1 + 63) < 0)
    operator delete(*v5);
  v6 = *(_OWORD *)(a2 + 5);
  *(_QWORD *)(a1 + 56) = a2[7];
  *(_OWORD *)v5 = v6;
  *((_BYTE *)a2 + 63) = 0;
  *((_BYTE *)a2 + 40) = 0;
  std::__optional_storage_base<std::string,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::string,false>>(a1 + 64, (__n128 *)a2 + 4);
  std::__optional_storage_base<std::vector<quasar::AlternativeSelectionSpan>,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::vector<quasar::AlternativeSelectionSpan>,false>>(a1 + 96, (__n128 *)a2 + 6);
  *(_WORD *)(a1 + 128) = *((_WORD *)a2 + 64);
  std::vector<quasar::TranslationTokenInternal>::__vdeallocate((void **)(a1 + 136));
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 17);
  *(_QWORD *)(a1 + 152) = a2[19];
  a2[18] = 0;
  a2[19] = 0;
  a2[17] = 0;
  *(_QWORD *)(a1 + 160) = a2[20];
  v7 = (void **)(a1 + 168);
  if (*(char *)(a1 + 191) < 0)
    operator delete(*v7);
  v8 = *(_OWORD *)(a2 + 21);
  *(_QWORD *)(a1 + 184) = a2[23];
  *(_OWORD *)v7 = v8;
  *((_BYTE *)a2 + 191) = 0;
  *((_BYTE *)a2 + 168) = 0;
  quasar::MetaInfo::operator=((quasar::MetaInfo::Impl **)(a1 + 192), (quasar::MetaInfo::Impl **)a2 + 24);
  return a1;
}

void std::vector<quasar::TranslationToken>::__assign_with_size[abi:ne180100]<quasar::TranslationToken*,quasar::TranslationToken*>(uint64_t a1, std::string *__str, __int128 *a3, unint64_t a4)
{
  uint64_t v8;
  std::string *v9;
  unint64_t v10;
  unint64_t v11;
  std::string *v12;
  std::string *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  char v18;

  v8 = a1 + 16;
  v9 = *(std::string **)a1;
  if (0x8E38E38E38E38E39 * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 3) < a4)
  {
    std::vector<quasar::TranslationToken>::__vdeallocate((void **)a1);
    if (a4 > 0x38E38E38E38E38ELL)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v10 = 0x1C71C71C71C71C72 * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 3);
    if (v10 <= a4)
      v10 = a4;
    if (0x8E38E38E38E38E39 * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 3) >= 0x1C71C71C71C71C7)
      v11 = 0x38E38E38E38E38ELL;
    else
      v11 = v10;
    std::vector<quasar::TranslationToken>::__vallocate[abi:ne180100]((_QWORD *)a1, v11);
    v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<quasar::TranslationToken>,quasar::TranslationToken*,quasar::TranslationToken*,quasar::TranslationToken*>(v8, (__int128 *)__str, a3, *(std::string **)(a1 + 8));
    goto LABEL_11;
  }
  if (0x8E38E38E38E38E39 * ((uint64_t)(*(_QWORD *)(a1 + 8) - (_QWORD)v9) >> 3) < a4)
  {
    v13 = (std::string *)((char *)__str + 8 * ((uint64_t)(*(_QWORD *)(a1 + 8) - (_QWORD)v9) >> 3));
    std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<quasar::TranslationToken *,quasar::TranslationToken *,quasar::TranslationToken *>((int)&v17, __str, v13, v9);
    v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<quasar::TranslationToken>,quasar::TranslationToken*,quasar::TranslationToken*,quasar::TranslationToken*>(v8, (__int128 *)v13, a3, *(std::string **)(a1 + 8));
LABEL_11:
    *(_QWORD *)(a1 + 8) = v12;
    return;
  }
  std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<quasar::TranslationToken *,quasar::TranslationToken *,quasar::TranslationToken *>((int)&v18, __str, (std::string *)a3, v9);
  v15 = v14;
  v16 = *(_QWORD *)(a1 + 8);
  if (v16 != v14)
  {
    do
    {
      v16 -= 72;
      std::allocator<quasar::TranslationToken>::destroy[abi:ne180100](v8, v16);
    }
    while (v16 != v15);
  }
  *(_QWORD *)(a1 + 8) = v15;
}

void sub_1AD918594(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_1AD91859C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void std::vector<quasar::TranslationToken>::__vdeallocate(void **a1)
{
  void *v1;
  uint64_t v3;
  void *v4;

  v1 = *a1;
  if (*a1)
  {
    v3 = (uint64_t)a1[1];
    v4 = *a1;
    if ((void *)v3 != v1)
    {
      do
      {
        v3 -= 72;
        std::allocator<quasar::TranslationToken>::destroy[abi:ne180100]((uint64_t)(a1 + 2), v3);
      }
      while ((void *)v3 != v1);
      v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

std::string *std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<quasar::TranslationToken *,quasar::TranslationToken *,quasar::TranslationToken *>(int a1, std::string *__str, std::string *a3, std::string *this)
{
  std::string *v5;
  std::string *v6;
  std::string::size_type size;

  v5 = __str;
  if (__str == a3)
    return __str;
  v6 = a3;
  do
  {
    std::string::operator=(this, v5);
    LOWORD(this[1].__r_.__value_.__l.__data_) = v5[1].__r_.__value_.__l.__data_;
    if (this != v5)
      std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>(&this[1].__r_.__value_.__s.__data_[8], (char *)v5[1].__r_.__value_.__l.__size_, v5[1].__r_.__value_.__r.__words[2], (uint64_t)(v5[1].__r_.__value_.__r.__words[2] - v5[1].__r_.__value_.__l.__size_) >> 2);
    size = v5[2].__r_.__value_.__l.__size_;
    LODWORD(this[2].__r_.__value_.__r.__words[2]) = v5[2].__r_.__value_.__r.__words[2];
    this[2].__r_.__value_.__l.__size_ = size;
    this += 3;
    v5 += 3;
  }
  while (v5 != v6);
  return v6;
}

void std::__optional_storage_base<std::string,false>::__assign_from[abi:ne180100]<std::__optional_copy_assign_base<std::string,false> const&>(std::string *this, const std::string *a2)
{
  __int128 v3;

  if (this[1].__r_.__value_.__s.__data_[0] == a2[1].__r_.__value_.__s.__data_[0])
  {
    if (this[1].__r_.__value_.__s.__data_[0])
      std::string::operator=(this, a2);
  }
  else if (this[1].__r_.__value_.__s.__data_[0])
  {
    if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
      operator delete(this->__r_.__value_.__l.__data_);
    this[1].__r_.__value_.__s.__data_[0] = 0;
  }
  else
  {
    if (SHIBYTE(a2->__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::__init_copy_ctor_external(this, a2->__r_.__value_.__l.__data_, a2->__r_.__value_.__l.__size_);
    }
    else
    {
      v3 = *(_OWORD *)&a2->__r_.__value_.__l.__data_;
      this->__r_.__value_.__r.__words[2] = a2->__r_.__value_.__r.__words[2];
      *(_OWORD *)&this->__r_.__value_.__l.__data_ = v3;
    }
    this[1].__r_.__value_.__s.__data_[0] = 1;
  }
}

void std::__optional_storage_base<std::vector<quasar::AlternativeSelectionSpan>,false>::__assign_from[abi:ne180100]<std::__optional_copy_assign_base<std::vector<quasar::AlternativeSelectionSpan>,false> const&>(uint64_t a1, uint64_t a2)
{
  void **v3;

  if (*(unsigned __int8 *)(a1 + 24) == *(unsigned __int8 *)(a2 + 24))
  {
    if (a1 != a2)
    {
      if (*(_BYTE *)(a1 + 24))
        std::vector<quasar::AlternativeSelectionSpan>::__assign_with_size[abi:ne180100]<quasar::AlternativeSelectionSpan*,quasar::AlternativeSelectionSpan*>(a1, *(_QWORD *)a2, *(_QWORD *)(a2 + 8), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 3));
    }
  }
  else if (*(_BYTE *)(a1 + 24))
  {
    v3 = (void **)a1;
    std::vector<quasar::AlternativeSelectionSpan>::__destroy_vector::operator()[abi:ne180100](&v3);
    *(_BYTE *)(a1 + 24) = 0;
  }
  else
  {
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    std::vector<quasar::AlternativeSelectionSpan>::__init_with_size[abi:ne180100]<quasar::AlternativeSelectionSpan*,quasar::AlternativeSelectionSpan*>((_QWORD *)a1, *(_QWORD *)a2, *(_QWORD *)(a2 + 8), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 3));
    *(_BYTE *)(a1 + 24) = 1;
  }
}

void std::vector<quasar::AlternativeSelectionSpan>::__assign_with_size[abi:ne180100]<quasar::AlternativeSelectionSpan*,quasar::AlternativeSelectionSpan*>(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v8;
  _OWORD *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  char v19;
  void **v20;

  v8 = a1 + 16;
  v9 = *(_OWORD **)a1;
  if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 3) < a4)
  {
    std::vector<quasar::AlternativeSelectionSpan>::__vdeallocate((void **)a1);
    if (a4 > 0x666666666666666)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v10 = 0x999999999999999ALL * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 3);
    if (v10 <= a4)
      v10 = a4;
    if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 3) >= 0x333333333333333)
      v11 = 0x666666666666666;
    else
      v11 = v10;
    std::vector<quasar::AlternativeSelectionSpan>::__vallocate[abi:ne180100]((_QWORD *)a1, v11);
    v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<quasar::AlternativeSelectionSpan>,quasar::AlternativeSelectionSpan*,quasar::AlternativeSelectionSpan*,quasar::AlternativeSelectionSpan*>(v8, a2, a3, *(_QWORD *)(a1 + 8));
    goto LABEL_11;
  }
  if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(a1 + 8) - (_QWORD)v9) >> 3) < a4)
  {
    v13 = a2 + 8 * ((uint64_t)(*(_QWORD *)(a1 + 8) - (_QWORD)v9) >> 3);
    std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<quasar::AlternativeSelectionSpan *,quasar::AlternativeSelectionSpan *,quasar::AlternativeSelectionSpan *>((uint64_t)&v18, a2, v13, v9);
    v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<quasar::AlternativeSelectionSpan>,quasar::AlternativeSelectionSpan*,quasar::AlternativeSelectionSpan*,quasar::AlternativeSelectionSpan*>(v8, v13, a3, *(_QWORD *)(a1 + 8));
LABEL_11:
    *(_QWORD *)(a1 + 8) = v12;
    return;
  }
  std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<quasar::AlternativeSelectionSpan *,quasar::AlternativeSelectionSpan *,quasar::AlternativeSelectionSpan *>((uint64_t)&v19, a2, a3, v9);
  v15 = v14;
  v16 = *(_QWORD *)(a1 + 8);
  if (v16 != v14)
  {
    do
    {
      v17 = v16 - 40;
      v20 = (void **)(v16 - 24);
      std::vector<quasar::AlternativeSelectionSpan::Alternative>::__destroy_vector::operator()[abi:ne180100](&v20);
      v16 = v17;
    }
    while (v17 != v15);
  }
  *(_QWORD *)(a1 + 8) = v15;
}

void sub_1AD918968(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_1AD918970(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void std::vector<quasar::AlternativeSelectionSpan>::__vdeallocate(void **a1)
{
  char *v1;
  char *v3;
  void *v4;
  char *v5;
  void **v6;

  v1 = (char *)*a1;
  if (*a1)
  {
    v3 = (char *)a1[1];
    v4 = *a1;
    if (v3 != v1)
    {
      do
      {
        v5 = v3 - 40;
        v6 = (void **)(v3 - 24);
        std::vector<quasar::AlternativeSelectionSpan::Alternative>::__destroy_vector::operator()[abi:ne180100](&v6);
        v3 = v5;
      }
      while (v5 != v1);
      v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

uint64_t std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<quasar::AlternativeSelectionSpan *,quasar::AlternativeSelectionSpan *,quasar::AlternativeSelectionSpan *>(uint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4)
{
  uint64_t v5;

  v5 = a2;
  if (a2 != a3)
  {
    do
    {
      *a4 = *(_OWORD *)v5;
      if ((_OWORD *)v5 != a4)
        std::vector<quasar::AlternativeSelectionSpan::Alternative>::__assign_with_size[abi:ne180100]<quasar::AlternativeSelectionSpan::Alternative*,quasar::AlternativeSelectionSpan::Alternative*>((uint64_t)(a4 + 1), *(uint64_t **)(v5 + 16), *(uint64_t **)(v5 + 24), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v5 + 24) - *(_QWORD *)(v5 + 16)) >> 3));
      v5 += 40;
      a4 = (_OWORD *)((char *)a4 + 40);
    }
    while (v5 != a3);
    return a3;
  }
  return v5;
}

uint64_t std::vector<quasar::AlternativeSelectionSpan::Alternative>::__assign_with_size[abi:ne180100]<quasar::AlternativeSelectionSpan::Alternative*,quasar::AlternativeSelectionSpan::Alternative*>(uint64_t a1, uint64_t *a2, uint64_t *a3, unint64_t a4)
{
  uint64_t *v6;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t result;
  uint64_t *v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v6 = a2;
  v8 = *(_QWORD **)a1;
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 3) < a4)
  {
    std::vector<quasar::AlternativeSelectionSpan::Alternative>::__vdeallocate((void **)a1);
    if (a4 > 0xAAAAAAAAAAAAAAALL)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v9 = 0x5555555555555556 * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 3);
    if (v9 <= a4)
      v9 = a4;
    if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 3) >= 0x555555555555555)
      v10 = 0xAAAAAAAAAAAAAAALL;
    else
      v10 = v9;
    result = (uint64_t)std::vector<std::string>::__vallocate[abi:ne180100]((_QWORD *)a1, v10);
    v12 = *(uint64_t **)(a1 + 8);
    while (v6 != a3)
    {
      v13 = v6[1];
      *v12 = *v6;
      v12[1] = v13;
      if (v13)
      {
        v14 = (unint64_t *)(v13 + 8);
        do
          v15 = __ldxr(v14);
        while (__stxr(v15 + 1, v14));
      }
      v12[2] = v6[2];
      v6 += 3;
      v12 += 3;
    }
LABEL_21:
    *(_QWORD *)(a1 + 8) = v12;
    return result;
  }
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 8) - (_QWORD)v8) >> 3) < a4)
  {
    v16 = &a2[(uint64_t)(*(_QWORD *)(a1 + 8) - (_QWORD)v8) >> 3];
    result = (uint64_t)std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,quasar::AlternativeSelectionSpan::Alternative *,quasar::AlternativeSelectionSpan::Alternative *,quasar::AlternativeSelectionSpan::Alternative *,0>(a2, v16, v8);
    v12 = *(uint64_t **)(a1 + 8);
    while (v16 != a3)
    {
      v17 = v16[1];
      *v12 = *v16;
      v12[1] = v17;
      if (v17)
      {
        v18 = (unint64_t *)(v17 + 8);
        do
          v19 = __ldxr(v18);
        while (__stxr(v19 + 1, v18));
      }
      v12[2] = v16[2];
      v16 += 3;
      v12 += 3;
    }
    goto LABEL_21;
  }
  std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,quasar::AlternativeSelectionSpan::Alternative *,quasar::AlternativeSelectionSpan::Alternative *,quasar::AlternativeSelectionSpan::Alternative *,0>(a2, a3, v8);
  v21 = v20;
  result = *(_QWORD *)(a1 + 8);
  if (result != v20)
  {
    do
      result = std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](result - 24);
    while (result != v21);
  }
  *(_QWORD *)(a1 + 8) = v21;
  return result;
}

void std::vector<quasar::AlternativeSelectionSpan::Alternative>::__vdeallocate(void **a1)
{
  void *v1;
  uint64_t v3;
  void *v4;

  v1 = *a1;
  if (*a1)
  {
    v3 = (uint64_t)a1[1];
    v4 = v1;
    if ((void *)v3 != v1)
    {
      do
        v3 = std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](v3 - 24);
      while ((void *)v3 != v1);
      v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

uint64_t *std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,quasar::AlternativeSelectionSpan::Alternative *,quasar::AlternativeSelectionSpan::Alternative *,quasar::AlternativeSelectionSpan::Alternative *,0>(uint64_t *a1, uint64_t *a2, _QWORD *a3)
{
  uint64_t *v4;
  uint64_t *v5;

  v4 = a1;
  if (a1 == a2)
    return a1;
  v5 = a2;
  do
  {
    std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::operator=[abi:ne180100](a3, v4);
    a3[2] = v4[2];
    a3 += 3;
    v4 += 3;
  }
  while (v4 != v5);
  return v5;
}

void std::vector<quasar::TranslationTokenInternal>::__assign_with_size[abi:ne180100]<quasar::TranslationTokenInternal*,quasar::TranslationTokenInternal*>(uint64_t a1, quasar::TranslationTokenInternal *a2, quasar::TranslationTokenInternal *a3, unint64_t a4)
{
  uint64_t v8;
  void *v9;
  unint64_t v10;
  unint64_t v11;
  std::string *v12;
  quasar::TranslationTokenInternal *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  char v18;

  v8 = a1 + 16;
  v9 = *(void **)a1;
  if (0xF0F0F0F0F0F0F0F1 * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 3) < a4)
  {
    std::vector<quasar::TranslationTokenInternal>::__vdeallocate((void **)a1);
    if (a4 > 0x1E1E1E1E1E1E1E1)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v10 = 0xE1E1E1E1E1E1E1E2 * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 3);
    if (v10 <= a4)
      v10 = a4;
    if (0xF0F0F0F0F0F0F0F1 * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 3) >= 0xF0F0F0F0F0F0F0)
      v11 = 0x1E1E1E1E1E1E1E1;
    else
      v11 = v10;
    std::vector<quasar::TranslationTokenInternal>::__vallocate[abi:ne180100]((_QWORD *)a1, v11);
    v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<quasar::TranslationTokenInternal>,quasar::TranslationTokenInternal*,quasar::TranslationTokenInternal*,quasar::TranslationTokenInternal*>(v8, a2, a3, *(std::string **)(a1 + 8));
    goto LABEL_11;
  }
  if (0xF0F0F0F0F0F0F0F1 * ((uint64_t)(*(_QWORD *)(a1 + 8) - (_QWORD)v9) >> 3) < a4)
  {
    v13 = (quasar::TranslationTokenInternal *)((char *)a2 + 8 * ((uint64_t)(*(_QWORD *)(a1 + 8) - (_QWORD)v9) >> 3));
    std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<quasar::TranslationTokenInternal *,quasar::TranslationTokenInternal *,quasar::TranslationTokenInternal *>((uint64_t)&v17, (uint64_t)a2, (uint64_t)v13, (uint64_t)v9);
    v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<quasar::TranslationTokenInternal>,quasar::TranslationTokenInternal*,quasar::TranslationTokenInternal*,quasar::TranslationTokenInternal*>(v8, v13, a3, *(std::string **)(a1 + 8));
LABEL_11:
    *(_QWORD *)(a1 + 8) = v12;
    return;
  }
  std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<quasar::TranslationTokenInternal *,quasar::TranslationTokenInternal *,quasar::TranslationTokenInternal *>((uint64_t)&v18, (uint64_t)a2, (uint64_t)a3, (uint64_t)v9);
  v15 = v14;
  v16 = *(_QWORD *)(a1 + 8);
  if (v16 != v14)
  {
    do
    {
      v16 -= 136;
      std::allocator<quasar::TranslationTokenInternal>::destroy[abi:ne180100](v8, v16);
    }
    while (v16 != v15);
  }
  *(_QWORD *)(a1 + 8) = v15;
}

void sub_1AD918E44(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_1AD918E4C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void std::vector<quasar::TranslationTokenInternal>::__vdeallocate(void **a1)
{
  void *v1;
  uint64_t v3;
  void *v4;

  v1 = *a1;
  if (*a1)
  {
    v3 = (uint64_t)a1[1];
    v4 = *a1;
    if ((void *)v3 != v1)
    {
      do
      {
        v3 -= 136;
        std::allocator<quasar::TranslationTokenInternal>::destroy[abi:ne180100]((uint64_t)(a1 + 2), v3);
      }
      while ((void *)v3 != v1);
      v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

uint64_t std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<quasar::TranslationTokenInternal *,quasar::TranslationTokenInternal *,quasar::TranslationTokenInternal *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  if (a2 == a3)
    return a2;
  v6 = a3;
  v7 = 0;
  do
  {
    v8 = a4 + v7;
    v9 = a2 + v7;
    std::string::operator=((std::string *)(a4 + v7), (const std::string *)(a2 + v7));
    *(_WORD *)(a4 + v7 + 24) = *(_WORD *)(a2 + v7 + 24);
    if (a4 == a2)
    {
      std::string::operator=((std::string *)(v8 + 72), (const std::string *)(v8 + 72));
    }
    else
    {
      std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)(v8 + 32), *(char **)(v9 + 32), *(_QWORD *)(v9 + 40), (uint64_t)(*(_QWORD *)(v9 + 40) - *(_QWORD *)(v9 + 32)) >> 2);
      v10 = *(_QWORD *)(v9 + 56);
      *(_DWORD *)(v8 + 64) = *(_DWORD *)(v9 + 64);
      *(_QWORD *)(v8 + 56) = v10;
      std::string::operator=((std::string *)(v8 + 72), (const std::string *)(v9 + 72));
      *(_QWORD *)(v8 + 96) = *(_QWORD *)(v9 + 96);
      std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)(v8 + 104), *(char **)(v9 + 104), *(_QWORD *)(v9 + 112), (uint64_t)(*(_QWORD *)(v9 + 112) - *(_QWORD *)(v9 + 104)) >> 2);
    }
    *(_QWORD *)(v8 + 128) = *(_QWORD *)(v9 + 128);
    v7 += 136;
  }
  while (v9 + 136 != v6);
  return v6;
}

void std::vector<quasar::ProcessingConnection>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 56;
        std::allocator<quasar::ProcessingConnection>::destroy[abi:ne180100]((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::allocator<quasar::ProcessingConnection>::destroy[abi:ne180100](uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 55) < 0)
    operator delete(*(void **)(a2 + 32));
  if (*(char *)(a2 + 31) < 0)
    operator delete(*(void **)(a2 + 8));
}

uint64_t std::vector<quasar::ProcessingConnection>::__push_back_slow_path<quasar::ProcessingConnection const&>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  void *v10;
  char *v11;
  _QWORD *v12;
  char *v13;
  uint64_t *v14;

  v3 = 0x6DB6DB6DB6DB6DB7 * ((a1[1] - *a1) >> 3);
  v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) > 0x492492492492492)
    std::vector<int>::__throw_length_error[abi:ne180100]();
  if (0xDB6DB6DB6DB6DB6ELL * ((a1[2] - *a1) >> 3) > v4)
    v4 = 0xDB6DB6DB6DB6DB6ELL * ((a1[2] - *a1) >> 3);
  if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * ((a1[2] - *a1) >> 3)) >= 0x249249249249249)
    v6 = 0x492492492492492;
  else
    v6 = v4;
  v14 = a1 + 2;
  if (v6)
    v7 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::VoiceCommandArgument>>((uint64_t)(a1 + 2), v6);
  else
    v7 = 0;
  v10 = v7;
  v11 = &v7[56 * v3];
  v13 = &v7[56 * v6];
  std::allocator<quasar::ProcessingConnection>::construct[abi:ne180100]<quasar::ProcessingConnection,quasar::ProcessingConnection const&>((uint64_t)(a1 + 2), v11, a2);
  v12 = v11 + 56;
  std::vector<quasar::ProcessingConnection>::__swap_out_circular_buffer(a1, &v10);
  v8 = a1[1];
  std::__split_buffer<quasar::ProcessingConnection>::~__split_buffer(&v10);
  return v8;
}

void sub_1AD919184(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<quasar::ProcessingConnection>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

void std::allocator<quasar::ProcessingConnection>::construct[abi:ne180100]<quasar::ProcessingConnection,quasar::ProcessingConnection const&>(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  std::string *v5;
  __int128 v6;
  std::string *v7;
  __int128 v8;

  *a2 = *(_QWORD *)a3;
  v5 = (std::string *)(a2 + 1);
  if (*(char *)(a3 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *(const std::string::value_type **)(a3 + 8), *(_QWORD *)(a3 + 16));
  }
  else
  {
    v6 = *(_OWORD *)(a3 + 8);
    a2[3] = *(_QWORD *)(a3 + 24);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
  v7 = (std::string *)(a2 + 4);
  if (*(char *)(a3 + 55) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)(a3 + 32), *(_QWORD *)(a3 + 40));
  }
  else
  {
    v8 = *(_OWORD *)(a3 + 32);
    a2[6] = *(_QWORD *)(a3 + 48);
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v8;
  }
}

void sub_1AD919224(_Unwind_Exception *exception_object)
{
  void **v1;
  uint64_t v2;

  if (*(char *)(v2 + 31) < 0)
    operator delete(*v1);
  _Unwind_Resume(exception_object);
}

uint64_t std::vector<quasar::ProcessingConnection>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<quasar::ProcessingConnection>,std::reverse_iterator<quasar::ProcessingConnection*>,std::reverse_iterator<quasar::ProcessingConnection*>,std::reverse_iterator<quasar::ProcessingConnection*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<quasar::ProcessingConnection>,std::reverse_iterator<quasar::ProcessingConnection*>,std::reverse_iterator<quasar::ProcessingConnection*>,std::reverse_iterator<quasar::ProcessingConnection*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  _QWORD v13[3];
  char v14;
  __int128 v15;
  __int128 v16;

  v7 = a7;
  *(_QWORD *)&v16 = a6;
  *((_QWORD *)&v16 + 1) = a7;
  v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  v13[2] = &v16;
  if (a3 == a5)
  {
    v11 = a6;
  }
  else
  {
    do
    {
      v8 = *(_QWORD *)(a3 - 56);
      a3 -= 56;
      *(_QWORD *)(v7 - 56) = v8;
      v9 = *(_OWORD *)(a3 + 8);
      *(_QWORD *)(v7 - 32) = *(_QWORD *)(a3 + 24);
      *(_OWORD *)(v7 - 48) = v9;
      *(_QWORD *)(a3 + 16) = 0;
      *(_QWORD *)(a3 + 24) = 0;
      *(_QWORD *)(a3 + 8) = 0;
      v10 = *(_OWORD *)(a3 + 32);
      *(_QWORD *)(v7 - 8) = *(_QWORD *)(a3 + 48);
      *(_OWORD *)(v7 - 24) = v10;
      *(_QWORD *)(a3 + 32) = 0;
      *(_QWORD *)(a3 + 40) = 0;
      *(_QWORD *)(a3 + 48) = 0;
      v7 = *((_QWORD *)&v16 + 1) - 56;
      *((_QWORD *)&v16 + 1) -= 56;
    }
    while (a3 != a5);
    v11 = v16;
  }
  v14 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<quasar::ProcessingConnection>,std::reverse_iterator<quasar::ProcessingConnection*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v13);
  return v11;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<quasar::ProcessingConnection>,std::reverse_iterator<quasar::ProcessingConnection*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<quasar::ProcessingConnection>,std::reverse_iterator<quasar::ProcessingConnection*>>::operator()[abi:ne180100]((uint64_t *)a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<quasar::ProcessingConnection>,std::reverse_iterator<quasar::ProcessingConnection*>>::operator()[abi:ne180100](uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(a1[2] + 8);
  v2 = *(_QWORD *)(a1[1] + 8);
  if (v1 != v2)
  {
    v3 = *a1;
    do
    {
      std::allocator<quasar::ProcessingConnection>::destroy[abi:ne180100](v3, v1);
      v1 += 56;
    }
    while (v1 != v2);
  }
}

void **std::__split_buffer<quasar::ProcessingConnection>::~__split_buffer(void **a1)
{
  std::__split_buffer<quasar::ProcessingConnection>::clear[abi:ne180100](a1);
  if (*a1)
    operator delete(*a1);
  return a1;
}

void std::__split_buffer<quasar::ProcessingConnection>::clear[abi:ne180100](_QWORD *a1)
{
  uint64_t i;
  uint64_t v2;
  uint64_t v4;

  v2 = a1[1];
  for (i = a1[2]; i != v2; i = a1[2])
  {
    v4 = a1[4];
    a1[2] = i - 56;
    std::allocator<quasar::ProcessingConnection>::destroy[abi:ne180100](v4, i - 56);
  }
}

uint64_t std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<quasar::ProcessingConnection *,quasar::ProcessingConnection *,quasar::ProcessingConnection *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  void **v7;
  __int128 v8;
  void **v9;
  __int128 v10;

  v5 = a2;
  if (a2 != a3)
  {
    do
    {
      *(_QWORD *)a4 = *(_QWORD *)v5;
      v7 = (void **)(a4 + 8);
      if (*(char *)(a4 + 31) < 0)
        operator delete(*v7);
      v8 = *(_OWORD *)(v5 + 8);
      *(_QWORD *)(a4 + 24) = *(_QWORD *)(v5 + 24);
      *(_OWORD *)v7 = v8;
      *(_BYTE *)(v5 + 31) = 0;
      *(_BYTE *)(v5 + 8) = 0;
      v9 = (void **)(a4 + 32);
      if (*(char *)(a4 + 55) < 0)
        operator delete(*v9);
      v10 = *(_OWORD *)(v5 + 32);
      *(_QWORD *)(a4 + 48) = *(_QWORD *)(v5 + 48);
      *(_OWORD *)v9 = v10;
      *(_BYTE *)(v5 + 55) = 0;
      *(_BYTE *)(v5 + 32) = 0;
      a4 += 56;
      v5 += 56;
    }
    while (v5 != a3);
    return a3;
  }
  return v5;
}

uint64_t **quasar::tennessee::LoadIterableCollationMapping@<X0>(int *a1@<X0>, uint64_t ***a2@<X8>)
{
  uint64_t **result;
  unsigned int *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t **v9;
  uint64_t *v10;
  uint64_t v11;
  int v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;

  result = (uint64_t **)operator new();
  result[2] = 0;
  result[1] = 0;
  *result = (uint64_t *)(result + 1);
  *a2 = result;
  v5 = (unsigned int *)((char *)a1 + *(unsigned __int16 *)((char *)a1 - *a1 + 4));
  v6 = *v5;
  v8 = (uint64_t *)((char *)v5 + v6 + 4);
  v7 = *(unsigned int *)((char *)v5 + v6);
  if ((_DWORD)v7)
  {
    v9 = result;
    v10 = &v8[2 * v7];
    do
    {
      v11 = *v8;
      if (*v8 != (int)*v8)
      {
        v28 = 0u;
        v29 = 0u;
        v26 = 0u;
        v27 = 0u;
        v24 = 0u;
        v25 = 0u;
        v22 = 0u;
        v23 = 0u;
        v21 = 0u;
        v19 = 0u;
        v20 = 0u;
        v17 = 0u;
        v18 = 0u;
        v15 = 0u;
        v16 = 0u;
        v13 = 0u;
        v14 = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v13);
        quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&v13);
      }
      if (v8[1] != (int)v8[1])
      {
        v28 = 0u;
        v29 = 0u;
        v26 = 0u;
        v27 = 0u;
        v24 = 0u;
        v25 = 0u;
        v22 = 0u;
        v23 = 0u;
        v21 = 0u;
        v19 = 0u;
        v20 = 0u;
        v17 = 0u;
        v18 = 0u;
        v15 = 0u;
        v16 = 0u;
        v13 = 0u;
        v14 = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v13);
        quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&v13);
      }
      v12 = v8[1];
      LODWORD(v13) = v11;
      result = (uint64_t **)quasar::tennessee::InsertOrDie<std::map<wchar_t,wchar_t>>(v9, &v13, &v12);
      v8 += 2;
    }
    while (v8 != v10);
  }
  return result;
}

void sub_1AD919654(_Unwind_Exception *a1)
{
  uint64_t *v1;

  std::unique_ptr<std::map<wchar_t,wchar_t>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

uint64_t *quasar::tennessee::InsertOrDie<std::map<wchar_t,wchar_t>>(uint64_t **a1, _DWORD *a2, int *a3)
{
  int v3;
  uint64_t *result;
  char v5;
  _OWORD v6[17];

  v3 = *a3;
  LODWORD(v6[0]) = *a2;
  DWORD1(v6[0]) = v3;
  result = std::__tree<std::__value_type<wchar_t,wchar_t>,std::__map_value_compare<wchar_t,std::__value_type<wchar_t,wchar_t>,std::less<wchar_t>,true>,std::allocator<std::__value_type<wchar_t,wchar_t>>>::__emplace_unique_key_args<wchar_t,std::pair<wchar_t const,wchar_t> const&>(a1, (int *)v6, (uint64_t *)v6);
  if ((v5 & 1) == 0)
  {
    memset(v6, 0, sizeof(v6));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v6);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"duplicate key ", 14);
    std::ostream::operator<<();
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v6);
  }
  return result;
}

uint64_t *quasar::tennessee::LoadIterableCollation<std::string_view>@<X0>(int *a1@<X0>, _QWORD *a2@<X8>)
{
  std::__shared_weak_count_vtbl *v3;
  uint64_t **v4;
  std::__shared_weak_count_vtbl *v5;
  uint64_t **v7;
  std::__shared_weak_count_vtbl *v8;
  uint64_t **v9;

  quasar::tennessee::LoadIterableCollationMapping(a1, &v7);
  v3 = (std::__shared_weak_count_vtbl *)operator new();
  v4 = v7;
  v7 = 0;
  v9 = v4;
  quasar::tennessee::StlContainerMapping<std::map<wchar_t,wchar_t>,(quasar::tennessee::StlContainerMapping_DefaultBehavior)2>::StlContainerMapping(v3, (uint64_t *)&v9);
  v8 = v3;
  std::unique_ptr<std::map<wchar_t,wchar_t>>::reset[abi:ne180100]((uint64_t *)&v9, 0);
  std::make_unique[abi:ne180100]<quasar::tennessee::IterableCollation<std::string_view,wchar_t>,std::unique_ptr<quasar::tennessee::StlContainerMapping<std::map<wchar_t,wchar_t>,(quasar::tennessee::StlContainerMapping_DefaultBehavior)2>>,wchar_t (&)(char const*&)>(&v8, (uint64_t)quasar::tennessee::ParseSingleUTF8CharacterAndAdvanceIterator, a2);
  v5 = v8;
  v8 = 0;
  if (v5)
    (*((void (**)(std::__shared_weak_count_vtbl *))v5->~__shared_weak_count + 1))(v5);
  return std::unique_ptr<std::map<wchar_t,wchar_t>>::reset[abi:ne180100]((uint64_t *)&v7, 0);
}

void sub_1AD9197BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v12;

  v12 = a11;
  a11 = 0;
  if (v12)
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  std::unique_ptr<std::map<wchar_t,wchar_t>>::reset[abi:ne180100](&a10, 0);
  _Unwind_Resume(a1);
}

void std::make_unique[abi:ne180100]<quasar::tennessee::IterableCollation<std::string_view,wchar_t>,std::unique_ptr<quasar::tennessee::StlContainerMapping<std::map<wchar_t,wchar_t>,(quasar::tennessee::StlContainerMapping_DefaultBehavior)2>>,wchar_t (&)(char const*&)>(std::__shared_weak_count_vtbl **a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  _QWORD *v6;
  std::__shared_weak_count *v7;
  std::__shared_weak_count_vtbl *v8;
  _QWORD *v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  std::__shared_weak_count_vtbl *v14;
  std::__shared_weak_count *v15;
  _QWORD v16[3];
  _QWORD *v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v6 = (_QWORD *)operator new();
  v14 = *a1;
  if (v14)
  {
    v7 = (std::__shared_weak_count *)operator new();
    v8 = *a1;
    v7->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D465B0;
    v7->__shared_owners_ = 0;
    v7->__shared_weak_owners_ = 0;
    v7[1].__vftable = v8;
  }
  else
  {
    v7 = 0;
  }
  v15 = v7;
  *a1 = 0;
  v16[0] = &unk_1E5D3D0F0;
  v16[1] = a2;
  v17 = v16;
  quasar::tennessee::IterableCollation<std::string_view,wchar_t>::IterableCollation(v6, (uint64_t)&v14, (uint64_t)v16);
  *a3 = v6;
  v9 = v17;
  if (v17 == v16)
  {
    v10 = 4;
    v9 = v16;
  }
  else
  {
    if (!v17)
      goto LABEL_9;
    v10 = 5;
  }
  (*(void (**)(void))(*v9 + 8 * v10))();
LABEL_9:
  v11 = v15;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
}

void sub_1AD919978(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10E1C40EDC78F6FLL);
  _Unwind_Resume(a1);
}

uint64_t quasar::tennessee::ParseSingleUTF8CharacterAndAdvanceIterator(unsigned __int8 **this, const char **a2)
{
  unsigned __int8 *v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  unsigned int v7;
  unsigned int v8;
  int v9;
  int v10;
  unint64_t v11;
  unsigned int v12;
  _OWORD v14[17];

  v2 = *this;
  v3 = (char)**this;
  v4 = **this;
  if (v3 < 0)
  {
    if (v4 < 0xE0)
    {
      if (v4 < 0xC2)
        goto LABEL_17;
      v9 = v4 & 0x1F;
      v8 = 1;
    }
    else
    {
      if (v4 > 0xEF)
      {
        if (v4 > 0xF4)
          goto LABEL_17;
        v10 = v4 - 240;
        v11 = v2[1];
        if (((byte_1AE14996B[v11 >> 4] >> (v4 + 16)) & 1) == 0)
          goto LABEL_17;
        v7 = v2[2] ^ 0x80;
        if (v7 > 0x3F)
          goto LABEL_17;
        v6 = v11 & 0x3F | (v10 << 6);
        v8 = 3;
      }
      else
      {
        v6 = v3 & 0xF;
        if (((a00000000000000[v3 & 0xF] >> (v2[1] >> 5)) & 1) == 0)
          goto LABEL_17;
        v7 = v2[1] & 0x3F;
        v8 = 2;
      }
      v9 = v7 | (v6 << 6);
    }
    v12 = v2[v8] ^ 0x80;
    if (v12 <= 0x3F)
    {
      v4 = v12 | (v9 << 6);
      v5 = v8 + 1;
      goto LABEL_16;
    }
LABEL_17:
    memset(v14, 0, sizeof(v14));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v14);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v14, "Encounted invalid encoded UTF-8 character.");
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v14);
  }
  v5 = 1;
LABEL_16:
  *this = &v2[v5];
  return v4;
}

void std::make_unique[abi:ne180100]<quasar::tennessee::IterableCollation<std::string_view,unsigned char>,decltype(nullptr)>(_QWORD *a1@<X8>)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  _QWORD v10[3];
  _QWORD *v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v2 = (_QWORD *)operator new();
  v8 = 0;
  v9 = 0;
  v10[0] = &unk_1E5D3D098;
  v10[1] = quasar::tennessee::DefaultParseAndAdvanceIteratorImpl<std::string_view,unsigned char,std::string_view,true>;
  v11 = v10;
  quasar::tennessee::IterableCollation<std::string_view,unsigned char>::IterableCollation(v2, (uint64_t)&v8, (uint64_t)v10);
  *a1 = v2;
  v3 = v11;
  if (v11 == v10)
  {
    v4 = 4;
    v3 = v10;
  }
  else
  {
    if (!v11)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  v5 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
}

void sub_1AD919C30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char *a15)
{
  uint64_t v15;
  char *v16;
  char *v18;
  uint64_t v19;

  v18 = a15;
  if (a15 == v16)
  {
    v19 = 4;
    v18 = &a12;
  }
  else
  {
    if (!a15)
      goto LABEL_6;
    v19 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v18 + 8 * v19))();
LABEL_6:
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  MEMORY[0x1AF44D190](v15, 0x10E1C40EDC78F6FLL);
  _Unwind_Resume(a1);
}

uint64_t quasar::tennessee::DefaultParseAndAdvanceIteratorImpl<std::string_view,unsigned char,std::string_view,true>(_QWORD *a1)
{
  unsigned __int8 *v1;

  v1 = (unsigned __int8 *)(*a1)++;
  return *v1;
}

void std::__function::__func<unsigned char (*)(char const*&),std::allocator<unsigned char (*)(char const*&)>,unsigned char ()(char const*&)>::~__func()
{
  JUMPOUT(0x1AF44D190);
}

_QWORD *std::__function::__func<unsigned char (*)(char const*&),std::allocator<unsigned char (*)(char const*&)>,unsigned char ()(char const*&)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &unk_1E5D3D098;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<unsigned char (*)(char const*&),std::allocator<unsigned char (*)(char const*&)>,unsigned char ()(char const*&)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &unk_1E5D3D098;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<unsigned char (*)(char const*&),std::allocator<unsigned char (*)(char const*&)>,unsigned char ()(char const*&)>::operator()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(a1 + 8))(a2);
}

uint64_t std::__function::__func<unsigned char (*)(char const*&),std::allocator<unsigned char (*)(char const*&)>,unsigned char ()(char const*&)>::target(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

void *std::__function::__func<unsigned char (*)(char const*&),std::allocator<unsigned char (*)(char const*&)>,unsigned char ()(char const*&)>::target_type()
{
}

_QWORD *quasar::tennessee::IterableCollation<std::string_view,unsigned char>::IterableCollation(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD v13[3];
  _QWORD *v14;
  _QWORD v15[3];
  _QWORD *v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  *a1 = &unk_1E5D3C638;
  *(_OWORD *)(a1 + 1) = *(_OWORD *)a2;
  v5 = a1 + 1;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  std::__function::__value_func<float ()(float,float)>::__value_func[abi:ne180100]((uint64_t)(a1 + 3), a3);
  v6 = a1[1];
  std::__function::__value_func<float ()(float,float)>::__value_func[abi:ne180100]((uint64_t)v15, a3);
  a1[7] = &unk_1E5D3C5E8;
  a1[8] = v6;
  if (!v16)
  {
    a1[12] = 0;
    goto LABEL_11;
  }
  if (v16 == v15)
  {
    a1[12] = a1 + 9;
    (*(void (**)(_QWORD *, _QWORD *))(v15[0] + 24))(v15, a1 + 9);
  }
  else
  {
    a1[12] = (*(uint64_t (**)(void))(*v16 + 16))();
  }
  v7 = v16;
  if (v16 == v15)
  {
    v8 = 4;
    v7 = v15;
  }
  else
  {
    if (!v16)
      goto LABEL_11;
    v8 = 5;
  }
  (*(void (**)(void))(*v7 + 8 * v8))();
LABEL_11:
  v9 = *v5;
  std::__function::__value_func<float ()(float,float)>::__value_func[abi:ne180100]((uint64_t)v13, a3);
  a1[13] = &unk_1E5D3C610;
  a1[14] = v9;
  if (v14)
  {
    if (v14 == v13)
    {
      a1[18] = a1 + 15;
      (*(void (**)(_QWORD *))(v13[0] + 24))(v13);
    }
    else
    {
      a1[18] = (*(uint64_t (**)(void))(*v14 + 16))();
    }
    v10 = v14;
    if (v14 == v13)
    {
      v11 = 4;
      v10 = v13;
      goto LABEL_20;
    }
    if (v14)
    {
      v11 = 5;
LABEL_20:
      (*(void (**)(void))(*v10 + 8 * v11))();
    }
  }
  else
  {
    a1[18] = 0;
  }
  return a1;
}

void sub_1AD919F34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  char *v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;

  v19 = a13;
  if (a13 == &a10)
  {
    v20 = 4;
    v19 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v20 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v19 + 8 * v20))();
LABEL_6:
  v13[7] = v17 + 16;
  v21 = (_QWORD *)v13[12];
  if (v21 == v16)
  {
    v22 = 4;
  }
  else
  {
    if (!v21)
      goto LABEL_11;
    v22 = 5;
    v16 = (_QWORD *)v13[12];
  }
  (*(void (**)(_QWORD *))(*v16 + 8 * v22))(v16);
LABEL_11:
  v23 = (_QWORD *)v13[6];
  if (v23 == v15)
  {
    v24 = 4;
    v23 = v15;
  }
  else
  {
    if (!v23)
      goto LABEL_16;
    v24 = 5;
  }
  (*(void (**)(void))(*v23 + 8 * v24))();
LABEL_16:
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](v14);
  _Unwind_Resume(a1);
}

_QWORD *quasar::tennessee::IterableCollation<std::string_view,unsigned char>::ComparatorImpl<false>::~ComparatorImpl(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  *a1 = &unk_1E5D3C5E8;
  v2 = a1 + 2;
  v3 = (_QWORD *)a1[5];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

_QWORD *quasar::tennessee::IterableCollation<std::string_view,unsigned char>::~IterableCollation(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;

  *a1 = &unk_1E5D3C638;
  a1[13] = &unk_1E5D3C610;
  v2 = a1 + 15;
  v3 = (_QWORD *)a1[18];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  a1[7] = &unk_1E5D3C5E8;
  v5 = (_QWORD *)a1[12];
  if (v5 == a1 + 9)
  {
    v6 = 4;
    v5 = a1 + 9;
  }
  else
  {
    if (!v5)
      goto LABEL_11;
    v6 = 5;
  }
  (*(void (**)(void))(*v5 + 8 * v6))();
LABEL_11:
  v7 = (_QWORD *)a1[6];
  if (v7 == a1 + 3)
  {
    v8 = 4;
    v7 = a1 + 3;
    goto LABEL_15;
  }
  if (v7)
  {
    v8 = 5;
LABEL_15:
    (*(void (**)(void))(*v7 + 8 * v8))();
  }
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  return a1;
}

void quasar::tennessee::IterableCollation<std::string_view,unsigned char>::~IterableCollation(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;

  *a1 = &unk_1E5D3C638;
  a1[13] = &unk_1E5D3C610;
  v2 = a1 + 15;
  v3 = (_QWORD *)a1[18];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  a1[7] = &unk_1E5D3C5E8;
  v5 = (_QWORD *)a1[12];
  if (v5 == a1 + 9)
  {
    v6 = 4;
    v5 = a1 + 9;
  }
  else
  {
    if (!v5)
      goto LABEL_11;
    v6 = 5;
  }
  (*(void (**)(void))(*v5 + 8 * v6))();
LABEL_11:
  v7 = (_QWORD *)a1[6];
  if (v7 == a1 + 3)
  {
    v8 = 4;
    v7 = a1 + 3;
  }
  else
  {
    if (!v7)
    {
LABEL_16:
      std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
      JUMPOUT(0x1AF44D190);
    }
    v8 = 5;
  }
  (*(void (**)(void))(*v7 + 8 * v8))();
  goto LABEL_16;
}

uint64_t quasar::tennessee::IterableCollation<std::string_view,unsigned char>::GetComparator(uint64_t a1)
{
  return a1 + 56;
}

uint64_t quasar::tennessee::IterableCollation<std::string_view,unsigned char>::GetPrefixComparator(uint64_t a1)
{
  return a1 + 104;
}

void quasar::tennessee::IterableCollation<std::string_view,unsigned char>::Copy(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;

  std::make_unique[abi:ne180100]<quasar::tennessee::IterableCollation<std::string_view,unsigned char>,std::shared_ptr<quasar::tennessee::Mapping<unsigned char,unsigned char>> const&,std::function<unsigned char ()(char const*&)> const&>((uint64_t *)(a1 + 8), a1 + 24, &v3);
  *a2 = v3;
}

void quasar::tennessee::IterableCollation<std::string_view,unsigned char>::ComparatorImpl<false>::~ComparatorImpl(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  *a1 = &unk_1E5D3C5E8;
  v1 = a1 + 2;
  v2 = (_QWORD *)a1[5];
  if (v2 == v1)
  {
    v3 = 4;
    v2 = v1;
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  JUMPOUT(0x1AF44D190);
}

uint64_t quasar::tennessee::IterableCollation<std::string_view,unsigned char>::ComparatorImpl<false>::operator()(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v12;
  uint64_t v13;

  v4 = *a2;
  v12 = *a3;
  v13 = v4;
  do
  {
    v5 = *(_QWORD *)(a1 + 40);
    if (!v5
      || (v6 = (*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)v5 + 48))(v5, &v13),
          (v7 = *(_QWORD *)(a1 + 40)) == 0))
    {
      std::__throw_bad_function_call[abi:ne180100]();
    }
    v8 = (*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)v7 + 48))(v7, &v12);
    v9 = *(_QWORD *)(a1 + 8);
    if (v9)
    {
      LODWORD(v6) = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v9 + 16))(v9, v6);
      LODWORD(v8) = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8), v8);
    }
  }
  while ((_DWORD)v6 == (_DWORD)v8 && (_DWORD)v8 != 0);
  if (v6 < v8)
    return 0xFFFFFFFFLL;
  else
    return v6 > v8;
}

_QWORD *quasar::tennessee::IterableCollation<std::string_view,unsigned char>::ComparatorImpl<true>::~ComparatorImpl(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  *a1 = &unk_1E5D3C610;
  v2 = a1 + 2;
  v3 = (_QWORD *)a1[5];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

void quasar::tennessee::IterableCollation<std::string_view,unsigned char>::ComparatorImpl<true>::~ComparatorImpl(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  *a1 = &unk_1E5D3C610;
  v1 = a1 + 2;
  v2 = (_QWORD *)a1[5];
  if (v2 == v1)
  {
    v3 = 4;
    v2 = v1;
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  JUMPOUT(0x1AF44D190);
}

uint64_t quasar::tennessee::IterableCollation<std::string_view,unsigned char>::ComparatorImpl<true>::operator()(uint64_t a1, uint64_t *a2, _BYTE **a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _OWORD v12[17];
  _BYTE *v13;
  uint64_t v14;

  v3 = *a2;
  v13 = *a3;
  v14 = v3;
  if (!*v13)
  {
    memset(v12, 0, sizeof(v12));
    quasar::QuasarExceptionMessage::QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v12);
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v12);
  }
  while (1)
  {
    v5 = *(_QWORD *)(a1 + 40);
    if (!v5
      || (v6 = (*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)v5 + 48))(v5, &v14),
          (v7 = *(_QWORD *)(a1 + 40)) == 0))
    {
      std::__throw_bad_function_call[abi:ne180100]();
    }
    v8 = (*(uint64_t (**)(uint64_t, _BYTE **))(*(_QWORD *)v7 + 48))(v7, &v13);
    v9 = *(_QWORD *)(a1 + 8);
    if (v9)
    {
      LODWORD(v6) = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v9 + 16))(v9, v6);
      LODWORD(v8) = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8), v8);
    }
    if ((_DWORD)v6 != (_DWORD)v8 || (_DWORD)v8 == 0)
      break;
    if (!*v13)
    {
      LODWORD(v8) = v6;
      break;
    }
  }
  if (v6 < v8)
    return 0xFFFFFFFFLL;
  else
    return v6 > v8;
}

void std::make_unique[abi:ne180100]<quasar::tennessee::IterableCollation<std::string_view,unsigned char>,std::shared_ptr<quasar::tennessee::Mapping<unsigned char,unsigned char>> const&,std::function<unsigned char ()(char const*&)> const&>(uint64_t *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  _QWORD *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  _BYTE v17[24];
  _BYTE *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v6 = (_QWORD *)operator new();
  v7 = (std::__shared_weak_count *)a1[1];
  v15 = *a1;
  v16 = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  std::__function::__value_func<float ()(float,float)>::__value_func[abi:ne180100]((uint64_t)v17, a2);
  quasar::tennessee::IterableCollation<std::string_view,unsigned char>::IterableCollation(v6, (uint64_t)&v15, (uint64_t)v17);
  *a3 = v6;
  v10 = v18;
  if (v18 == v17)
  {
    v11 = 4;
    v10 = v17;
  }
  else
  {
    if (!v18)
      goto LABEL_9;
    v11 = 5;
  }
  (*(void (**)(void))(*v10 + 8 * v11))();
LABEL_9:
  v12 = v16;
  if (v16)
  {
    v13 = (unint64_t *)&v16->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
}

void sub_1AD91A6EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char *a15)
{
  uint64_t v15;
  char *v16;
  char *v18;
  uint64_t v19;

  v18 = a15;
  if (a15 == v16)
  {
    v19 = 4;
    v18 = &a12;
  }
  else
  {
    if (!a15)
      goto LABEL_6;
    v19 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v18 + 8 * v19))();
LABEL_6:
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  MEMORY[0x1AF44D190](v15, 0x10E1C40EDC78F6FLL);
  _Unwind_Resume(a1);
}

uint64_t *std::unique_ptr<std::map<wchar_t,wchar_t>>::reset[abi:ne180100](uint64_t *result, uint64_t a2)
{
  uint64_t v2;

  v2 = *result;
  *result = a2;
  if (v2)
  {
    std::__tree<int>::destroy(v2, *(_QWORD **)(v2 + 8));
    JUMPOUT(0x1AF44D190);
  }
  return result;
}

uint64_t *std::__tree<std::__value_type<wchar_t,wchar_t>,std::__map_value_compare<wchar_t,std::__value_type<wchar_t,wchar_t>,std::less<wchar_t>,true>,std::allocator<std::__value_type<wchar_t,wchar_t>>>::__emplace_unique_key_args<wchar_t,std::pair<wchar_t const,wchar_t> const&>(uint64_t **a1, int *a2, uint64_t *a3)
{
  uint64_t *v5;
  uint64_t **v6;
  int v7;
  uint64_t **v8;
  int v9;
  uint64_t *v10;

  v6 = a1 + 1;
  v5 = a1[1];
  if (v5)
  {
    v7 = *a2;
    while (1)
    {
      while (1)
      {
        v8 = (uint64_t **)v5;
        v9 = *((_DWORD *)v5 + 7);
        if (v7 >= v9)
          break;
        v5 = *v8;
        v6 = v8;
        if (!*v8)
          goto LABEL_10;
      }
      if (v9 >= v7)
        break;
      v5 = v8[1];
      if (!v5)
      {
        v6 = v8 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v8 = a1 + 1;
LABEL_10:
    v10 = (uint64_t *)operator new(0x28uLL);
    *(uint64_t *)((char *)v10 + 28) = *a3;
    std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at(a1, (uint64_t)v8, v6, v10);
    return v10;
  }
  return (uint64_t *)v8;
}

_QWORD *quasar::tennessee::StlContainerMapping<std::map<wchar_t,wchar_t>,(quasar::tennessee::StlContainerMapping_DefaultBehavior)2>::StlContainerMapping(_QWORD *result, uint64_t *a2)
{
  uint64_t v2;
  _OWORD v3[17];

  *result = &unk_1E5D3C7F0;
  v2 = *a2;
  *a2 = 0;
  result[1] = v2;
  if (!*(_QWORD *)(v2 + 16))
  {
    memset(v3, 0, sizeof(v3));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v3);
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v3);
  }
  return result;
}

void sub_1AD91A8DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t *a10)
{
  std::unique_ptr<std::map<wchar_t,wchar_t>>::reset[abi:ne180100](a10, 0);
  _Unwind_Resume(a1);
}

_QWORD *quasar::tennessee::StlContainerMapping<std::map<wchar_t,wchar_t>,(quasar::tennessee::StlContainerMapping_DefaultBehavior)2>::~StlContainerMapping(_QWORD *a1)
{
  *a1 = &unk_1E5D3C7F0;
  std::unique_ptr<std::map<wchar_t,wchar_t>>::reset[abi:ne180100](a1 + 1, 0);
  return a1;
}

void quasar::tennessee::StlContainerMapping<std::map<wchar_t,wchar_t>,(quasar::tennessee::StlContainerMapping_DefaultBehavior)2>::~StlContainerMapping(_QWORD *a1)
{
  *a1 = &unk_1E5D3C7F0;
  std::unique_ptr<std::map<wchar_t,wchar_t>>::reset[abi:ne180100](a1 + 1, 0);
  JUMPOUT(0x1AF44D190);
}

uint64_t quasar::tennessee::StlContainerMapping<std::map<wchar_t,wchar_t>,(quasar::tennessee::StlContainerMapping_DefaultBehavior)2>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  BOOL v8;
  uint64_t *v9;
  int v10;
  unsigned int *v11;
  unsigned int *v12;
  int v14;

  v14 = a2;
  v2 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(v2 + 8);
  v3 = v2 + 8;
  v4 = v5;
  if (v5)
  {
    v6 = v3;
    do
    {
      v7 = *(_DWORD *)(v4 + 28);
      v8 = v7 < (int)a2;
      if (v7 >= (int)a2)
        v9 = (uint64_t *)v4;
      else
        v9 = (uint64_t *)(v4 + 8);
      if (!v8)
        v6 = v4;
      v4 = *v9;
    }
    while (*v9);
    if (v6 != v3)
    {
      v10 = *(_DWORD *)(v6 + 28);
      v11 = (unsigned int *)(v6 + 32);
      v8 = v10 <= (int)a2;
      v12 = (unsigned int *)&v14;
      if (v8)
        v12 = v11;
      return *v12;
    }
  }
  return a2;
}

void std::__shared_ptr_pointer<quasar::tennessee::StlContainerMapping<std::map<wchar_t,wchar_t>,(quasar::tennessee::StlContainerMapping_DefaultBehavior)2> *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t std::__shared_ptr_pointer<quasar::tennessee::StlContainerMapping<std::map<wchar_t,wchar_t>,(quasar::tennessee::StlContainerMapping_DefaultBehavior)2> *>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<quasar::tennessee::StlContainerMapping<std::map<wchar_t,wchar_t>,(quasar::tennessee::StlContainerMapping_DefaultBehavior)2> *>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void std::__function::__func<wchar_t (*)(char const*&),std::allocator<wchar_t (*)(char const*&)>,wchar_t ()(char const*&)>::~__func()
{
  JUMPOUT(0x1AF44D190);
}

_QWORD *std::__function::__func<wchar_t (*)(char const*&),std::allocator<wchar_t (*)(char const*&)>,wchar_t ()(char const*&)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &unk_1E5D3D0F0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<wchar_t (*)(char const*&),std::allocator<wchar_t (*)(char const*&)>,wchar_t ()(char const*&)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &unk_1E5D3D0F0;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<wchar_t (*)(char const*&),std::allocator<wchar_t (*)(char const*&)>,wchar_t ()(char const*&)>::operator()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(a1 + 8))(a2);
}

uint64_t std::__function::__func<wchar_t (*)(char const*&),std::allocator<wchar_t (*)(char const*&)>,wchar_t ()(char const*&)>::target(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

void *std::__function::__func<wchar_t (*)(char const*&),std::allocator<wchar_t (*)(char const*&)>,wchar_t ()(char const*&)>::target_type()
{
}

_QWORD *quasar::tennessee::IterableCollation<std::string_view,wchar_t>::IterableCollation(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD v13[3];
  _QWORD *v14;
  _QWORD v15[3];
  _QWORD *v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  *a1 = &unk_1E5D3C6C0;
  *(_OWORD *)(a1 + 1) = *(_OWORD *)a2;
  v5 = a1 + 1;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  std::__function::__value_func<float ()(float,float)>::__value_func[abi:ne180100]((uint64_t)(a1 + 3), a3);
  v6 = a1[1];
  std::__function::__value_func<float ()(float,float)>::__value_func[abi:ne180100]((uint64_t)v15, a3);
  a1[7] = &unk_1E5D3C670;
  a1[8] = v6;
  if (!v16)
  {
    a1[12] = 0;
    goto LABEL_11;
  }
  if (v16 == v15)
  {
    a1[12] = a1 + 9;
    (*(void (**)(_QWORD *, _QWORD *))(v15[0] + 24))(v15, a1 + 9);
  }
  else
  {
    a1[12] = (*(uint64_t (**)(void))(*v16 + 16))();
  }
  v7 = v16;
  if (v16 == v15)
  {
    v8 = 4;
    v7 = v15;
  }
  else
  {
    if (!v16)
      goto LABEL_11;
    v8 = 5;
  }
  (*(void (**)(void))(*v7 + 8 * v8))();
LABEL_11:
  v9 = *v5;
  std::__function::__value_func<float ()(float,float)>::__value_func[abi:ne180100]((uint64_t)v13, a3);
  a1[13] = &unk_1E5D3C698;
  a1[14] = v9;
  if (v14)
  {
    if (v14 == v13)
    {
      a1[18] = a1 + 15;
      (*(void (**)(_QWORD *))(v13[0] + 24))(v13);
    }
    else
    {
      a1[18] = (*(uint64_t (**)(void))(*v14 + 16))();
    }
    v10 = v14;
    if (v14 == v13)
    {
      v11 = 4;
      v10 = v13;
      goto LABEL_20;
    }
    if (v14)
    {
      v11 = 5;
LABEL_20:
      (*(void (**)(void))(*v10 + 8 * v11))();
    }
  }
  else
  {
    a1[18] = 0;
  }
  return a1;
}

void sub_1AD91ACEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  char *v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;

  v19 = a13;
  if (a13 == &a10)
  {
    v20 = 4;
    v19 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v20 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v19 + 8 * v20))();
LABEL_6:
  v13[7] = v17 + 16;
  v21 = (_QWORD *)v13[12];
  if (v21 == v16)
  {
    v22 = 4;
  }
  else
  {
    if (!v21)
      goto LABEL_11;
    v22 = 5;
    v16 = (_QWORD *)v13[12];
  }
  (*(void (**)(_QWORD *))(*v16 + 8 * v22))(v16);
LABEL_11:
  v23 = (_QWORD *)v13[6];
  if (v23 == v15)
  {
    v24 = 4;
    v23 = v15;
  }
  else
  {
    if (!v23)
      goto LABEL_16;
    v24 = 5;
  }
  (*(void (**)(void))(*v23 + 8 * v24))();
LABEL_16:
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](v14);
  _Unwind_Resume(a1);
}

_QWORD *quasar::tennessee::IterableCollation<std::string_view,wchar_t>::ComparatorImpl<false>::~ComparatorImpl(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  *a1 = &unk_1E5D3C670;
  v2 = a1 + 2;
  v3 = (_QWORD *)a1[5];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

_QWORD *quasar::tennessee::IterableCollation<std::string_view,wchar_t>::~IterableCollation(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;

  *a1 = &unk_1E5D3C6C0;
  a1[13] = &unk_1E5D3C698;
  v2 = a1 + 15;
  v3 = (_QWORD *)a1[18];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  a1[7] = &unk_1E5D3C670;
  v5 = (_QWORD *)a1[12];
  if (v5 == a1 + 9)
  {
    v6 = 4;
    v5 = a1 + 9;
  }
  else
  {
    if (!v5)
      goto LABEL_11;
    v6 = 5;
  }
  (*(void (**)(void))(*v5 + 8 * v6))();
LABEL_11:
  v7 = (_QWORD *)a1[6];
  if (v7 == a1 + 3)
  {
    v8 = 4;
    v7 = a1 + 3;
    goto LABEL_15;
  }
  if (v7)
  {
    v8 = 5;
LABEL_15:
    (*(void (**)(void))(*v7 + 8 * v8))();
  }
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  return a1;
}

void quasar::tennessee::IterableCollation<std::string_view,wchar_t>::~IterableCollation(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;

  *a1 = &unk_1E5D3C6C0;
  a1[13] = &unk_1E5D3C698;
  v2 = a1 + 15;
  v3 = (_QWORD *)a1[18];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  a1[7] = &unk_1E5D3C670;
  v5 = (_QWORD *)a1[12];
  if (v5 == a1 + 9)
  {
    v6 = 4;
    v5 = a1 + 9;
  }
  else
  {
    if (!v5)
      goto LABEL_11;
    v6 = 5;
  }
  (*(void (**)(void))(*v5 + 8 * v6))();
LABEL_11:
  v7 = (_QWORD *)a1[6];
  if (v7 == a1 + 3)
  {
    v8 = 4;
    v7 = a1 + 3;
  }
  else
  {
    if (!v7)
    {
LABEL_16:
      std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
      JUMPOUT(0x1AF44D190);
    }
    v8 = 5;
  }
  (*(void (**)(void))(*v7 + 8 * v8))();
  goto LABEL_16;
}

uint64_t quasar::tennessee::IterableCollation<std::string_view,wchar_t>::GetComparator(uint64_t a1)
{
  return a1 + 56;
}

uint64_t quasar::tennessee::IterableCollation<std::string_view,wchar_t>::GetPrefixComparator(uint64_t a1)
{
  return a1 + 104;
}

void quasar::tennessee::IterableCollation<std::string_view,wchar_t>::Copy(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;

  std::make_unique[abi:ne180100]<quasar::tennessee::IterableCollation<std::string_view,wchar_t>,std::shared_ptr<quasar::tennessee::Mapping<wchar_t,wchar_t>> const&,std::function<wchar_t ()(char const*&)> const&>((uint64_t *)(a1 + 8), a1 + 24, &v3);
  *a2 = v3;
}

void quasar::tennessee::IterableCollation<std::string_view,wchar_t>::ComparatorImpl<false>::~ComparatorImpl(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  *a1 = &unk_1E5D3C670;
  v1 = a1 + 2;
  v2 = (_QWORD *)a1[5];
  if (v2 == v1)
  {
    v3 = 4;
    v2 = v1;
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  JUMPOUT(0x1AF44D190);
}

uint64_t quasar::tennessee::IterableCollation<std::string_view,wchar_t>::ComparatorImpl<false>::operator()(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v12;
  uint64_t v13;

  v4 = *a2;
  v12 = *a3;
  v13 = v4;
  do
  {
    v5 = *(_QWORD *)(a1 + 40);
    if (!v5
      || (v6 = (*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)v5 + 48))(v5, &v13),
          (v7 = *(_QWORD *)(a1 + 40)) == 0))
    {
      std::__throw_bad_function_call[abi:ne180100]();
    }
    v8 = (*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)v7 + 48))(v7, &v12);
    v9 = *(_QWORD *)(a1 + 8);
    if (v9)
    {
      LODWORD(v6) = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v9 + 16))(v9, v6);
      LODWORD(v8) = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8), v8);
    }
  }
  while ((_DWORD)v6 == (_DWORD)v8 && (_DWORD)v8 != 0);
  if ((int)v6 < (int)v8)
    return 0xFFFFFFFFLL;
  else
    return (int)v6 > (int)v8;
}

_QWORD *quasar::tennessee::IterableCollation<std::string_view,wchar_t>::ComparatorImpl<true>::~ComparatorImpl(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  *a1 = &unk_1E5D3C698;
  v2 = a1 + 2;
  v3 = (_QWORD *)a1[5];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

void quasar::tennessee::IterableCollation<std::string_view,wchar_t>::ComparatorImpl<true>::~ComparatorImpl(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  *a1 = &unk_1E5D3C698;
  v1 = a1 + 2;
  v2 = (_QWORD *)a1[5];
  if (v2 == v1)
  {
    v3 = 4;
    v2 = v1;
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  JUMPOUT(0x1AF44D190);
}

uint64_t quasar::tennessee::IterableCollation<std::string_view,wchar_t>::ComparatorImpl<true>::operator()(uint64_t a1, uint64_t *a2, _BYTE **a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _OWORD v12[17];
  _BYTE *v13;
  uint64_t v14;

  v3 = *a2;
  v13 = *a3;
  v14 = v3;
  if (!*v13)
  {
    memset(v12, 0, sizeof(v12));
    quasar::QuasarExceptionMessage::QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v12);
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v12);
  }
  while (1)
  {
    v5 = *(_QWORD *)(a1 + 40);
    if (!v5
      || (v6 = (*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)v5 + 48))(v5, &v14),
          (v7 = *(_QWORD *)(a1 + 40)) == 0))
    {
      std::__throw_bad_function_call[abi:ne180100]();
    }
    v8 = (*(uint64_t (**)(uint64_t, _BYTE **))(*(_QWORD *)v7 + 48))(v7, &v13);
    v9 = *(_QWORD *)(a1 + 8);
    if (v9)
    {
      LODWORD(v6) = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v9 + 16))(v9, v6);
      LODWORD(v8) = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8), v8);
    }
    if ((_DWORD)v6 != (_DWORD)v8 || (_DWORD)v8 == 0)
      break;
    if (!*v13)
    {
      LODWORD(v8) = v6;
      break;
    }
  }
  if ((int)v6 < (int)v8)
    return 0xFFFFFFFFLL;
  else
    return (int)v6 > (int)v8;
}

void std::make_unique[abi:ne180100]<quasar::tennessee::IterableCollation<std::string_view,wchar_t>,std::shared_ptr<quasar::tennessee::Mapping<wchar_t,wchar_t>> const&,std::function<wchar_t ()(char const*&)> const&>(uint64_t *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  _QWORD *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  _BYTE v17[24];
  _BYTE *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v6 = (_QWORD *)operator new();
  v7 = (std::__shared_weak_count *)a1[1];
  v15 = *a1;
  v16 = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  std::__function::__value_func<float ()(float,float)>::__value_func[abi:ne180100]((uint64_t)v17, a2);
  quasar::tennessee::IterableCollation<std::string_view,wchar_t>::IterableCollation(v6, (uint64_t)&v15, (uint64_t)v17);
  *a3 = v6;
  v10 = v18;
  if (v18 == v17)
  {
    v11 = 4;
    v10 = v17;
  }
  else
  {
    if (!v18)
      goto LABEL_9;
    v11 = 5;
  }
  (*(void (**)(void))(*v10 + 8 * v11))();
LABEL_9:
  v12 = v16;
  if (v16)
  {
    v13 = (unint64_t *)&v16->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
}

void sub_1AD91B4A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char *a15)
{
  uint64_t v15;
  char *v16;
  char *v18;
  uint64_t v19;

  v18 = a15;
  if (a15 == v16)
  {
    v19 = 4;
    v18 = &a12;
  }
  else
  {
    if (!a15)
      goto LABEL_6;
    v19 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v18 + 8 * v19))();
LABEL_6:
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  MEMORY[0x1AF44D190](v15, 0x10E1C40EDC78F6FLL);
  _Unwind_Resume(a1);
}

void sub_1AD91B748(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  void *v17;
  uint64_t v18;
  void *v19;

  if (a17 < 0)
    operator delete(__p);
  MEMORY[0x1AF44D190](v18, 0x10B3C4055590446);

  _Unwind_Resume(a1);
}

void sub_1AD91C890(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45,uint64_t a46,uint64_t a47,char a48,uint64_t a49,uint64_t a50,char a51,uint64_t a52,uint64_t a53,void *a54,uint64_t a55,uint64_t a56,void *a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  uint64_t a66;

  a66 = (uint64_t)&a45;
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a66);
  a66 = (uint64_t)&a48;
  std::vector<std::vector<std::vector<unsigned long>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a66);
  a66 = (uint64_t)&a51;
  std::vector<std::vector<std::vector<std::vector<quasar::Token>>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a66);

  _Unwind_Resume(a1);
}

void **std::vector<std::vector<std::vector<std::vector<quasar::Token>>>>::push_back[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  void **result;
  unint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  void *v16[5];

  v6 = a1[2];
  result = (void **)(a1 + 2);
  v5 = v6;
  v7 = *(result - 1);
  if ((unint64_t)v7 >= v6)
  {
    v9 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v7 - *a1) >> 3);
    v10 = v9 + 1;
    if (v9 + 1 > 0xAAAAAAAAAAAAAAALL)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - *a1) >> 3);
    if (2 * v11 > v10)
      v10 = 2 * v11;
    if (v11 >= 0x555555555555555)
      v12 = 0xAAAAAAAAAAAAAAALL;
    else
      v12 = v10;
    v16[4] = result;
    v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>((uint64_t)result, v12);
    v14 = &v13[24 * v9];
    v16[0] = v13;
    v16[1] = v14;
    v16[3] = &v13[24 * v15];
    *((_QWORD *)v14 + 1) = 0;
    *((_QWORD *)v14 + 2) = 0;
    *(_QWORD *)v14 = 0;
    *(_OWORD *)v14 = *(_OWORD *)a2;
    *((_QWORD *)v14 + 2) = *(_QWORD *)(a2 + 16);
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    v16[2] = v14 + 24;
    std::vector<std::vector<std::vector<std::vector<quasar::Token>>>>::__swap_out_circular_buffer(a1, v16);
    v8 = (_QWORD *)a1[1];
    result = std::__split_buffer<std::vector<std::vector<std::vector<quasar::Token>>>>::~__split_buffer(v16);
  }
  else
  {
    *v7 = 0;
    v7[1] = 0;
    v7[2] = 0;
    *(_OWORD *)v7 = *(_OWORD *)a2;
    v7[2] = *(_QWORD *)(a2 + 16);
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    v8 = v7 + 3;
    a1[1] = (uint64_t)(v7 + 3);
  }
  a1[1] = (uint64_t)v8;
  return result;
}

void sub_1AD91CFB8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::vector<std::vector<std::vector<quasar::Token>>>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

void **std::vector<std::vector<std::vector<unsigned long>>>::push_back[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  void **result;
  unint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  void *v16[5];

  v6 = a1[2];
  result = (void **)(a1 + 2);
  v5 = v6;
  v7 = *(result - 1);
  if ((unint64_t)v7 >= v6)
  {
    v9 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v7 - *a1) >> 3);
    v10 = v9 + 1;
    if (v9 + 1 > 0xAAAAAAAAAAAAAAALL)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - *a1) >> 3);
    if (2 * v11 > v10)
      v10 = 2 * v11;
    if (v11 >= 0x555555555555555)
      v12 = 0xAAAAAAAAAAAAAAALL;
    else
      v12 = v10;
    v16[4] = result;
    v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>((uint64_t)result, v12);
    v14 = &v13[24 * v9];
    v16[0] = v13;
    v16[1] = v14;
    v16[3] = &v13[24 * v15];
    *((_QWORD *)v14 + 1) = 0;
    *((_QWORD *)v14 + 2) = 0;
    *(_QWORD *)v14 = 0;
    *(_OWORD *)v14 = *(_OWORD *)a2;
    *((_QWORD *)v14 + 2) = *(_QWORD *)(a2 + 16);
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    v16[2] = v14 + 24;
    std::vector<std::vector<std::vector<unsigned long>>>::__swap_out_circular_buffer(a1, v16);
    v8 = (_QWORD *)a1[1];
    result = std::__split_buffer<std::vector<std::vector<std::pair<int,int>>>>::~__split_buffer(v16);
  }
  else
  {
    *v7 = 0;
    v7[1] = 0;
    v7[2] = 0;
    *(_OWORD *)v7 = *(_OWORD *)a2;
    v7[2] = *(_QWORD *)(a2 + 16);
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    v8 = v7 + 3;
    a1[1] = (uint64_t)(v7 + 3);
  }
  a1[1] = (uint64_t)v8;
  return result;
}

void sub_1AD91D0F4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::vector<std::vector<std::pair<int,int>>>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::vector<float>>::push_back[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  uint64_t result;
  unint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  _QWORD v16[5];

  v6 = a1[2];
  result = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD **)(result - 8);
  if ((unint64_t)v7 >= v6)
  {
    v9 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v7 - *a1) >> 3);
    v10 = v9 + 1;
    if (v9 + 1 > 0xAAAAAAAAAAAAAAALL)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - *a1) >> 3);
    if (2 * v11 > v10)
      v10 = 2 * v11;
    if (v11 >= 0x555555555555555)
      v12 = 0xAAAAAAAAAAAAAAALL;
    else
      v12 = v10;
    v16[4] = result;
    v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>(result, v12);
    v14 = &v13[24 * v9];
    v16[0] = v13;
    v16[1] = v14;
    v16[3] = &v13[24 * v15];
    *((_QWORD *)v14 + 1) = 0;
    *((_QWORD *)v14 + 2) = 0;
    *(_QWORD *)v14 = 0;
    *(_OWORD *)v14 = *(_OWORD *)a2;
    *((_QWORD *)v14 + 2) = *(_QWORD *)(a2 + 16);
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    v16[2] = v14 + 24;
    std::vector<std::vector<float>>::__swap_out_circular_buffer(a1, v16);
    v8 = (_QWORD *)a1[1];
    result = std::__split_buffer<std::vector<int>>::~__split_buffer((uint64_t)v16);
  }
  else
  {
    *v7 = 0;
    v7[1] = 0;
    v7[2] = 0;
    *(_OWORD *)v7 = *(_OWORD *)a2;
    v7[2] = *(_QWORD *)(a2 + 16);
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    v8 = v7 + 3;
    a1[1] = (uint64_t)(v7 + 3);
  }
  a1[1] = (uint64_t)v8;
  return result;
}

void sub_1AD91D230(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::vector<int>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::vector<std::vector<std::vector<std::vector<quasar::Token>>>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void **v2;
  void **v4;
  void *v5;
  void **v6;

  v1 = *a1;
  v2 = (void **)**a1;
  if (v2)
  {
    v4 = (void **)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 3;
        v6 = v4;
        std::vector<std::vector<std::vector<quasar::Token>>>::__destroy_vector::operator()[abi:ne180100](&v6);
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::vector<std::vector<std::vector<unsigned long>>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void **v2;
  void **v4;
  void *v5;
  void **v6;

  v1 = *a1;
  v2 = (void **)**a1;
  if (v2)
  {
    v4 = (void **)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 3;
        v6 = v4;
        std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100](&v6);
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t std::vector<std::vector<std::vector<std::vector<quasar::Token>>>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<std::vector<std::vector<quasar::Token>>>>,std::reverse_iterator<std::vector<std::vector<std::vector<quasar::Token>>>*>,std::reverse_iterator<std::vector<std::vector<std::vector<quasar::Token>>>*>,std::reverse_iterator<std::vector<std::vector<std::vector<quasar::Token>>>*>>((uint64_t)(a1 + 2), a1[1], (_QWORD *)a1[1], *a1, (_QWORD *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<std::vector<std::vector<quasar::Token>>>>,std::reverse_iterator<std::vector<std::vector<std::vector<quasar::Token>>>*>,std::reverse_iterator<std::vector<std::vector<std::vector<quasar::Token>>>*>,std::reverse_iterator<std::vector<std::vector<std::vector<quasar::Token>>>*>>(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  _QWORD v11[3];
  char v12;
  __int128 v13;
  __int128 v14;

  v7 = a7;
  *(_QWORD *)&v14 = a6;
  *((_QWORD *)&v14 + 1) = a7;
  v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    v9 = a6;
  }
  else
  {
    do
    {
      *(_QWORD *)(v7 - 24) = 0;
      *(_QWORD *)(v7 - 16) = 0;
      *(_QWORD *)(v7 - 8) = 0;
      v8 = *(_OWORD *)(a3 - 3);
      a3 -= 3;
      *(_OWORD *)(v7 - 24) = v8;
      *(_QWORD *)(v7 - 8) = a3[2];
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      v7 = *((_QWORD *)&v14 + 1) - 24;
      *((_QWORD *)&v14 + 1) -= 24;
    }
    while (a3 != a5);
    v9 = v14;
  }
  v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::vector<std::vector<quasar::Token>>>>,std::reverse_iterator<std::vector<std::vector<std::vector<quasar::Token>>>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::vector<std::vector<quasar::Token>>>>,std::reverse_iterator<std::vector<std::vector<std::vector<quasar::Token>>>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::vector<std::vector<quasar::Token>>>>,std::reverse_iterator<std::vector<std::vector<std::vector<quasar::Token>>>*>>::operator()[abi:ne180100](a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::vector<std::vector<quasar::Token>>>>,std::reverse_iterator<std::vector<std::vector<std::vector<quasar::Token>>>*>>::operator()[abi:ne180100](uint64_t a1)
{
  void **v1;
  void **v2;
  void **v3;

  v1 = *(void ***)(*(_QWORD *)(a1 + 16) + 8);
  v2 = *(void ***)(*(_QWORD *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    v3 = v1;
    std::vector<std::vector<std::vector<quasar::Token>>>::__destroy_vector::operator()[abi:ne180100](&v3);
    v1 += 3;
  }
}

void **std::__split_buffer<std::vector<std::vector<std::vector<quasar::Token>>>>::~__split_buffer(void **a1)
{
  std::__split_buffer<std::vector<std::vector<std::vector<quasar::Token>>>>::clear[abi:ne180100]((uint64_t)a1);
  if (*a1)
    operator delete(*a1);
  return a1;
}

void std::__split_buffer<std::vector<std::vector<std::vector<quasar::Token>>>>::clear[abi:ne180100](uint64_t a1)
{
  uint64_t i;
  uint64_t v2;
  void **v4;
  void **v5;

  v2 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v2; i = *(_QWORD *)(a1 + 16))
  {
    v4 = (void **)(i - 24);
    *(_QWORD *)(a1 + 16) = v4;
    v5 = v4;
    std::vector<std::vector<std::vector<quasar::Token>>>::__destroy_vector::operator()[abi:ne180100](&v5);
  }
}

uint64_t std::vector<std::vector<unsigned long>>::push_back[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  uint64_t result;
  unint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  _QWORD v16[5];

  v6 = a1[2];
  result = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD **)(result - 8);
  if ((unint64_t)v7 >= v6)
  {
    v9 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v7 - *a1) >> 3);
    v10 = v9 + 1;
    if (v9 + 1 > 0xAAAAAAAAAAAAAAALL)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - *a1) >> 3);
    if (2 * v11 > v10)
      v10 = 2 * v11;
    if (v11 >= 0x555555555555555)
      v12 = 0xAAAAAAAAAAAAAAALL;
    else
      v12 = v10;
    v16[4] = result;
    v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>(result, v12);
    v14 = &v13[24 * v9];
    v16[0] = v13;
    v16[1] = v14;
    v16[3] = &v13[24 * v15];
    *((_QWORD *)v14 + 1) = 0;
    *((_QWORD *)v14 + 2) = 0;
    *(_QWORD *)v14 = 0;
    *(_OWORD *)v14 = *(_OWORD *)a2;
    *((_QWORD *)v14 + 2) = *(_QWORD *)(a2 + 16);
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    v16[2] = v14 + 24;
    std::vector<std::vector<unsigned long>>::__swap_out_circular_buffer(a1, v16);
    v8 = (_QWORD *)a1[1];
    result = std::__split_buffer<std::vector<int>>::~__split_buffer((uint64_t)v16);
  }
  else
  {
    *v7 = 0;
    v7[1] = 0;
    v7[2] = 0;
    *(_OWORD *)v7 = *(_OWORD *)a2;
    v7[2] = *(_QWORD *)(a2 + 16);
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    v8 = v7 + 3;
    a1[1] = (uint64_t)(v7 + 3);
  }
  a1[1] = (uint64_t)v8;
  return result;
}

void sub_1AD91D684(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::vector<int>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::vector<unsigned long>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<unsigned long>>,std::reverse_iterator<std::vector<unsigned long>*>,std::reverse_iterator<std::vector<unsigned long>*>,std::reverse_iterator<std::vector<unsigned long>*>>((uint64_t)(a1 + 2), a1[1], (_QWORD *)a1[1], *a1, (_QWORD *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<unsigned long>>,std::reverse_iterator<std::vector<unsigned long>*>,std::reverse_iterator<std::vector<unsigned long>*>,std::reverse_iterator<std::vector<unsigned long>*>>(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  _QWORD v11[3];
  char v12;
  __int128 v13;
  __int128 v14;

  v7 = a7;
  *(_QWORD *)&v14 = a6;
  *((_QWORD *)&v14 + 1) = a7;
  v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    v9 = a6;
  }
  else
  {
    do
    {
      *(_QWORD *)(v7 - 24) = 0;
      *(_QWORD *)(v7 - 16) = 0;
      *(_QWORD *)(v7 - 8) = 0;
      v8 = *(_OWORD *)(a3 - 3);
      a3 -= 3;
      *(_OWORD *)(v7 - 24) = v8;
      *(_QWORD *)(v7 - 8) = a3[2];
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      v7 = *((_QWORD *)&v14 + 1) - 24;
      *((_QWORD *)&v14 + 1) -= 24;
    }
    while (a3 != a5);
    v9 = v14;
  }
  v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<unsigned long>>,std::reverse_iterator<std::vector<unsigned long>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<unsigned long>>,std::reverse_iterator<std::vector<unsigned long>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<int>>,std::reverse_iterator<std::vector<int>*>>::operator()[abi:ne180100](a1);
  return a1;
}

uint64_t std::vector<std::vector<std::vector<unsigned long>>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<std::vector<unsigned long>>>,std::reverse_iterator<std::vector<std::vector<unsigned long>>*>,std::reverse_iterator<std::vector<std::vector<unsigned long>>*>,std::reverse_iterator<std::vector<std::vector<unsigned long>>*>>((uint64_t)(a1 + 2), a1[1], (_QWORD *)a1[1], *a1, (_QWORD *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<std::vector<unsigned long>>>,std::reverse_iterator<std::vector<std::vector<unsigned long>>*>,std::reverse_iterator<std::vector<std::vector<unsigned long>>*>,std::reverse_iterator<std::vector<std::vector<unsigned long>>*>>(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  _QWORD v11[3];
  char v12;
  __int128 v13;
  __int128 v14;

  v7 = a7;
  *(_QWORD *)&v14 = a6;
  *((_QWORD *)&v14 + 1) = a7;
  v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    v9 = a6;
  }
  else
  {
    do
    {
      *(_QWORD *)(v7 - 24) = 0;
      *(_QWORD *)(v7 - 16) = 0;
      *(_QWORD *)(v7 - 8) = 0;
      v8 = *(_OWORD *)(a3 - 3);
      a3 -= 3;
      *(_OWORD *)(v7 - 24) = v8;
      *(_QWORD *)(v7 - 8) = a3[2];
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      v7 = *((_QWORD *)&v14 + 1) - 24;
      *((_QWORD *)&v14 + 1) -= 24;
    }
    while (a3 != a5);
    v9 = v14;
  }
  v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::vector<unsigned long>>>,std::reverse_iterator<std::vector<std::vector<unsigned long>>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::vector<unsigned long>>>,std::reverse_iterator<std::vector<std::vector<unsigned long>>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::vector<std::pair<int,int>>>>,std::reverse_iterator<std::vector<std::vector<std::pair<int,int>>>*>>::operator()[abi:ne180100](a1);
  return a1;
}

_QWORD *std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<kaldi::CuWorkspace *>::__vallocate[abi:ne180100](result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1AD91D984(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

double quasar::lm::arpa2fst::kaldi_fork::ArpaFileParser::ArpaFileParser(uint64_t a1, __int128 *a2, uint64_t a3)
{
  __int128 v3;
  double result;

  *(_QWORD *)a1 = off_1E5D3A768;
  v3 = *a2;
  *(_DWORD *)(a1 + 24) = *((_DWORD *)a2 + 4);
  *(_OWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 32) = a3;
  result = 0.0;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_QWORD *)(a1 + 88) = 0;
  return result;
}

void quasar::lm::arpa2fst::kaldi_fork::ArpaFileParser::~ArpaFileParser(quasar::lm::arpa2fst::kaldi_fork::ArpaFileParser *this)
{
  void *v2;

  *(_QWORD *)this = off_1E5D3A768;
  v2 = (void *)*((_QWORD *)this + 9);
  if (v2)
  {
    *((_QWORD *)this + 10) = v2;
    operator delete(v2);
  }
  if (*((char *)this + 71) < 0)
    operator delete(*((void **)this + 6));
}

uint64_t quasar::lm::arpa2fst::kaldi_fork::ArpaFileParser::LineReference(quasar::lm::arpa2fst::kaldi_fork::ArpaFileParser *this)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD v12[11];
  char v13;
  uint64_t v14;

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v12);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"line ", 5);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)" [", 2);
  v6 = *((_QWORD *)this + 6);
  v5 = (char *)this + 48;
  v4 = v6;
  v7 = v5[23];
  if (v7 >= 0)
    v8 = (uint64_t)v5;
  else
    v8 = v4;
  if (v7 >= 0)
    v9 = v5[23];
  else
    v9 = *((_QWORD *)v5 + 1);
  v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, v8, v9);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::stringbuf::str();
  v12[0] = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)v12 + *(_QWORD *)(v12[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  v12[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v13 < 0)
    operator delete((void *)v12[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1AF44D094](&v14);
}

void sub_1AD91DB30(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::ostringstream::~ostringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL quasar::lm::arpa2fst::kaldi_fork::ArpaFileParser::ShouldWarn(quasar::lm::arpa2fst::kaldi_fork::ArpaFileParser *this)
{
  unsigned int v1;

  v1 = *((_DWORD *)this + 11);
  if (v1 == -1)
    return 0;
  *((_DWORD *)this + 11) = v1 + 1;
  return v1 < *((_DWORD *)this + 6);
}

_OWORD *std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(uint64_t **a1, const void **a2, uint64_t a3, _OWORD **a4)
{
  void **v6;
  _OWORD *v7;
  uint64_t **v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v12;

  v6 = (void **)std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__find_equal<std::string>((uint64_t)a1, &v12, a2);
  v7 = *v6;
  if (!*v6)
  {
    v8 = (uint64_t **)v6;
    v7 = operator new(0x40uLL);
    v9 = *a4;
    v10 = *((_QWORD *)*a4 + 2);
    v7[2] = **a4;
    *((_QWORD *)v7 + 6) = v10;
    v9[1] = 0;
    v9[2] = 0;
    *v9 = 0;
    *((_QWORD *)v7 + 7) = 0;
    std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at(a1, v12, v8, (uint64_t *)v7);
  }
  return v7;
}

uint64_t QuasarC_setSpeechRecognizerDisableOverBuffer(uint64_t result)
{
  sDisableOverBuffer = result;
  return result;
}

uint64_t QuasarC_getSpeechRecognizerDisableOverBuffer()
{
  return sDisableOverBuffer;
}

uint64_t QuasarC_setLogLevel(uint64_t result)
{
  int v1;

  quasar::gLogLevel = result;
  if ((_DWORD)result == 5)
    v1 = 1;
  else
    v1 = 5;
  if ((_DWORD)result == 4)
    v1 = 0;
  if ((int)result < 4)
    v1 = -1;
  kaldi::g_kaldi_verbose_level = v1;
  return result;
}

uint64_t QuasarCSystemConfig_new()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  _QWORD v4[3];
  _QWORD *v5;
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  v4[0] = &off_1E5D3D148;
  v5 = v4;
  v0 = CapiHelpers_new<QuasarCSystemConfig,quasar::SystemConfig>((uint64_t)v4);
  v1 = v5;
  if (v5 == v4)
  {
    v2 = 4;
    v1 = v4;
    goto LABEL_5;
  }
  if (v5)
  {
    v2 = 5;
LABEL_5:
    (*(void (**)(void))(*v1 + 8 * v2))();
  }
  return v0;
}

void sub_1AD91DCFC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t CapiHelpers_new<QuasarCSystemConfig,quasar::SystemConfig>(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 24);
  if (!v1)
    std::__throw_bad_function_call[abi:ne180100]();
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 48))(v1);
}

uint64_t QuasarCSystemConfig_delete(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 56))(result);
  return result;
}

uint64_t QuasarCSystemConfig_readJsonFile(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v6;
  _QWORD v7[3];
  _QWORD *v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v6 = a2;
  v7[0] = &off_1E5D3D1F8;
  v7[1] = &v6;
  v8 = v7;
  v2 = CapiHelpers_execute<QuasarCSystemConfig,quasar::SystemConfig,int>(a1, (uint64_t)v7);
  v3 = v8;
  if (v8 == v7)
  {
    v4 = 4;
    v3 = v7;
    goto LABEL_5;
  }
  if (v8)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return v2;
}

void sub_1AD91DF18(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t CapiHelpers_execute<QuasarCSystemConfig,quasar::SystemConfig,int>(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;

  v4 = a1;
  v2 = *(_QWORD *)(a2 + 24);
  if (!v2)
    std::__throw_bad_function_call[abi:ne180100]();
  return (*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)v2 + 48))(v2, &v4);
}

void QuasarCSystemConfigInfoCacheReset(quasar::SystemConfig::SystemConfigInfoCache *a1)
{
  std::mutex *v2;

  v2 = (std::mutex *)quasar::SystemConfig::SystemConfigInfoCache::SingletonInstance(a1);
  quasar::SystemConfig::SystemConfigInfoCache::reset(v2, (uint64_t)a1);
}

void std::__function::__func<QuasarCSystemConfig * CapiHelpers_new<QuasarCSystemConfig,quasar::SystemConfig>(std::function<quasar::SystemConfig * ()(void)>)::$_0,std::allocator<QuasarCSystemConfig * CapiHelpers_new<QuasarCSystemConfig,quasar::SystemConfig>(std::function<quasar::SystemConfig * ()(void)>)::$_0>,quasar::SystemConfig* ()(void)>::~__func()
{
  JUMPOUT(0x1AF44D190);
}

_QWORD *std::__function::__func<QuasarCSystemConfig * CapiHelpers_new<QuasarCSystemConfig,quasar::SystemConfig>(std::function<quasar::SystemConfig * ()(void)>)::$_0,std::allocator<QuasarCSystemConfig * CapiHelpers_new<QuasarCSystemConfig,quasar::SystemConfig>(std::function<quasar::SystemConfig * ()(void)>)::$_0>,quasar::SystemConfig* ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E5D3D148;
  return result;
}

void std::__function::__func<QuasarCSystemConfig * CapiHelpers_new<QuasarCSystemConfig,quasar::SystemConfig>(std::function<quasar::SystemConfig * ()(void)>)::$_0,std::allocator<QuasarCSystemConfig * CapiHelpers_new<QuasarCSystemConfig,quasar::SystemConfig>(std::function<quasar::SystemConfig * ()(void)>)::$_0>,quasar::SystemConfig* ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E5D3D148;
}

quasar::SystemConfig *std::__function::__func<QuasarCSystemConfig * CapiHelpers_new<QuasarCSystemConfig,quasar::SystemConfig>(std::function<quasar::SystemConfig * ()(void)>)::$_0,std::allocator<QuasarCSystemConfig * CapiHelpers_new<QuasarCSystemConfig,quasar::SystemConfig>(std::function<quasar::SystemConfig * ()(void)>)::$_0>,quasar::SystemConfig* ()(void)>::operator()()
{
  quasar::SystemConfig *v0;

  v0 = (quasar::SystemConfig *)operator new();
  quasar::SystemConfig::SystemConfig(v0);
  return v0;
}

void sub_1AD91E140(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10B3C4039F8198BLL);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<QuasarCSystemConfig * CapiHelpers_new<QuasarCSystemConfig,quasar::SystemConfig>(std::function<quasar::SystemConfig * ()(void)>)::$_0,std::allocator<QuasarCSystemConfig * CapiHelpers_new<QuasarCSystemConfig,quasar::SystemConfig>(std::function<quasar::SystemConfig * ()(void)>)::$_0>,quasar::SystemConfig* ()(void)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<QuasarCSystemConfig * CapiHelpers_new<QuasarCSystemConfig,quasar::SystemConfig>(std::function<quasar::SystemConfig * ()(void)>)::$_0,std::allocator<QuasarCSystemConfig * CapiHelpers_new<QuasarCSystemConfig,quasar::SystemConfig>(std::function<quasar::SystemConfig * ()(void)>)::$_0>,quasar::SystemConfig* ()(void)>::target_type()
{
}

void std::__function::__func<QuasarCSystemConfig_readJsonFile::$_0,std::allocator<QuasarCSystemConfig_readJsonFile::$_0>,int ()(quasar::SystemConfig *)>::~__func()
{
  JUMPOUT(0x1AF44D190);
}

_QWORD *std::__function::__func<QuasarCSystemConfig_readJsonFile::$_0,std::allocator<QuasarCSystemConfig_readJsonFile::$_0>,int ()(quasar::SystemConfig *)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E5D3D1F8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<QuasarCSystemConfig_readJsonFile::$_0,std::allocator<QuasarCSystemConfig_readJsonFile::$_0>,int ()(quasar::SystemConfig *)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E5D3D1F8;
  a2[1] = v2;
  return result;
}

BOOL std::__function::__func<QuasarCSystemConfig_readJsonFile::$_0,std::allocator<QuasarCSystemConfig_readJsonFile::$_0>,int ()(quasar::SystemConfig *)>::operator()(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  unsigned int JsonFile;
  _OWORD v5[2];
  int v6;
  uint64_t v7[3];
  void *v8[2];
  char v9;

  v2 = *a2;
  std::string::basic_string[abi:ne180100]<0>(v8, **(char ***)(a1 + 8));
  memset(v7, 0, sizeof(v7));
  memset(v5, 0, sizeof(v5));
  v6 = 1065353216;
  JsonFile = quasar::SystemConfig::readJsonFile(v2, (uint64_t)v8, v7, (uint64_t)v5, 0, 0);
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table((uint64_t)v5);
  *(_QWORD *)&v5[0] = v7;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v5);
  if (v9 < 0)
    operator delete(v8[0]);
  return JsonFile > 1;
}

void sub_1AD91E2B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;

  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table((uint64_t)&a9);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a9);
  if (*(char *)(v9 - 17) < 0)
    operator delete(*(void **)(v9 - 40));
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<QuasarCSystemConfig_readJsonFile::$_0,std::allocator<QuasarCSystemConfig_readJsonFile::$_0>,int ()(quasar::SystemConfig *)>::target(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

void *std::__function::__func<QuasarCSystemConfig_readJsonFile::$_0,std::allocator<QuasarCSystemConfig_readJsonFile::$_0>,int ()(quasar::SystemConfig *)>::target_type()
{
}

BOOL quasar::result_handler::VoiceEditingRecoveryHandler::isMaybeCompleteCommandPackageExecutionIntentionSame(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  unsigned __int8 *v5;
  unsigned __int8 *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  unsigned __int8 *v11;
  unsigned __int8 *v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  BOOL v17;
  char *v18;
  uint64_t v19;
  _BOOL8 v20;
  char *v22;
  uint64_t v23;
  _BYTE v24[32];
  _BYTE v25[32];

  v3 = *a2;
  if (!*(_BYTE *)(*a2 + 368))
    return 0;
  v4 = *a3;
  if (!*(_BYTE *)(*a3 + 368))
    return 0;
  v5 = *(unsigned __int8 **)(v3 + 336);
  if (*(unsigned __int8 **)(v3 + 344) == v5)
    return 0;
  v6 = *(unsigned __int8 **)(v4 + 336);
  if (*(unsigned __int8 **)(v4 + 344) == v6)
    return 0;
  v7 = v5[23];
  if ((v7 & 0x80u) == 0)
    v8 = v5[23];
  else
    v8 = *((_QWORD *)v5 + 1);
  v9 = v6[23];
  v10 = (char)v9;
  if ((v9 & 0x80u) != 0)
    v9 = *((_QWORD *)v6 + 1);
  if (v8 != v9)
    return 0;
  if (v10 >= 0)
    v11 = v6;
  else
    v11 = *(unsigned __int8 **)v6;
  if ((v7 & 0x80) != 0)
  {
    if (memcmp(*(const void **)v5, v11, *((_QWORD *)v5 + 1)))
      return 0;
  }
  else if (v5[23])
  {
    v12 = v5;
    while (*v12 == *v11)
    {
      ++v12;
      ++v11;
      if (!--v7)
        goto LABEL_21;
    }
    return 0;
  }
LABEL_21:
  if ((char)v5[47] < 0)
  {
    v13 = (char *)*((_QWORD *)v5 + 3);
    v14 = *((_QWORD *)v5 + 4);
  }
  else
  {
    v13 = (char *)(v5 + 24);
    v14 = v5[47];
  }
  quasar::utf8::utf8ToUtf16(v13, v14, (uint64_t)v25);
  if ((char)v6[47] < 0)
  {
    v15 = (char *)*((_QWORD *)v6 + 3);
    v16 = *((_QWORD *)v6 + 4);
  }
  else
  {
    v15 = (char *)(v6 + 24);
    v16 = v6[47];
  }
  quasar::utf8::utf8ToUtf16(v15, v16, (uint64_t)v24);
  v17 = quasar::UInsensitiveEquals();
  tl::detail::expected_storage_base<std::vector<unsigned short>,std::string,false,false>::~expected_storage_base((uint64_t)v24);
  tl::detail::expected_storage_base<std::vector<unsigned short>,std::string,false,false>::~expected_storage_base((uint64_t)v25);
  if (!v17)
    return 0;
  if ((char)v5[71] < 0)
  {
    v18 = (char *)*((_QWORD *)v5 + 6);
    v19 = *((_QWORD *)v5 + 7);
  }
  else
  {
    v18 = (char *)(v5 + 48);
    v19 = v5[71];
  }
  quasar::utf8::utf8ToUtf16(v18, v19, (uint64_t)v25);
  if ((char)v6[71] < 0)
  {
    v22 = (char *)*((_QWORD *)v6 + 6);
    v23 = *((_QWORD *)v6 + 7);
  }
  else
  {
    v22 = (char *)(v6 + 48);
    v23 = v6[71];
  }
  quasar::utf8::utf8ToUtf16(v22, v23, (uint64_t)v24);
  v20 = quasar::UInsensitiveEquals();
  tl::detail::expected_storage_base<std::vector<unsigned short>,std::string,false,false>::~expected_storage_base((uint64_t)v24);
  tl::detail::expected_storage_base<std::vector<unsigned short>,std::string,false,false>::~expected_storage_base((uint64_t)v25);
  return v20;
}

void sub_1AD91E4D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  tl::detail::expected_storage_base<std::vector<unsigned short>,std::string,false,false>::~expected_storage_base((uint64_t)&a9);
  tl::detail::expected_storage_base<std::vector<unsigned short>,std::string,false,false>::~expected_storage_base((uint64_t)&a13);
  _Unwind_Resume(a1);
}

uint64_t quasar::result_handler::VoiceEditingRecoveryHandler::VoiceEditingRecoveryHandler(uint64_t a1, uint64_t *a2, _QWORD *a3)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  _QWORD *v8;
  _OWORD v10[17];

  *(_DWORD *)(a1 + 8) = 0;
  *(_QWORD *)a1 = &off_1E5CFF080;
  v4 = *a2;
  *a2 = 0;
  *(_QWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = *a3;
  v5 = a3[1];
  *(_QWORD *)(a1 + 40) = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  *(_BYTE *)(a1 + 48) = 0;
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 56), "en_US");
  if (quasar::gLogLevel >= 5)
  {
    memset(v10, 0, sizeof(v10));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v10);
    v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"VoiceEditingRecoveryHandler: ", 29);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Created VoiceEditingRecoveryHandler", 35);
    quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)v10);
  }
  return a1;
}

void sub_1AD91E614(_Unwind_Exception *a1)
{
  uint64_t v1;
  quasar::result_handler::Package **v2;
  uint64_t v3;
  void **v4;
  uint64_t v6;

  if (*(char *)(v1 + 79) < 0)
    operator delete(*v4);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](v3);
  std::unique_ptr<quasar::result_handler::Package>::reset[abi:ne180100](v2, 0);
  v6 = *(_QWORD *)(v1 + 16);
  *(_QWORD *)(v1 + 16) = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)v1);
  _Unwind_Resume(a1);
}

void quasar::result_handler::VoiceEditingRecoveryHandler::~VoiceEditingRecoveryHandler(quasar::result_handler::VoiceEditingRecoveryHandler *this)
{
  uint64_t v2;

  *(_QWORD *)this = &off_1E5CFF080;
  if (*((char *)this + 79) < 0)
    operator delete(*((void **)this + 7));
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this + 32);
  std::unique_ptr<quasar::result_handler::Package>::reset[abi:ne180100]((quasar::result_handler::Package **)this + 3, 0);
  v2 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  quasar::Bitmap::~Bitmap(this);
}

{
  quasar::result_handler::VoiceEditingRecoveryHandler::~VoiceEditingRecoveryHandler(this);
  JUMPOUT(0x1AF44D190);
}

