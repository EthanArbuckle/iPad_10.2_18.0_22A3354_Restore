void sub_1ADC00998(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t *v2;

  std::__list_imp<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::clear(v2);
  std::__list_imp<char *>::clear(v1);
  _Unwind_Resume(a1);
}

_QWORD *fst::Times<int,fst::TropicalWeightTpl<float>>@<X0>(int *a1@<X0>, int *a2@<X1>, uint64_t a3@<X8>)
{
  int v7;
  _QWORD v8[3];
  int v9;
  uint64_t v10[3];
  int v11;
  _QWORD v12[3];
  int v13;
  uint64_t v14[3];
  int v15;
  _QWORD v16[4];
  uint64_t v17[3];

  v11 = *a1;
  std::list<int>::list(v12, (uint64_t)(a1 + 2));
  v13 = a1[8];
  std::list<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::list(v14, (uint64_t)(a1 + 10));
  v7 = *a2;
  std::list<int>::list(v8, (uint64_t)(a2 + 2));
  v9 = a2[8];
  std::list<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::list(v10, (uint64_t)(a2 + 10));
  fst::Times<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>,fst::GallicUnionWeightOptions<int,fst::TropicalWeightTpl<float>>>(&v11, (uint64_t)&v7, (uint64_t)&v15);
  fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>::GallicWeight(a3, &v15);
  std::__list_imp<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::clear(v17);
  std::__list_imp<char *>::clear(v16);
  std::__list_imp<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::clear(v10);
  std::__list_imp<char *>::clear(v8);
  std::__list_imp<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::clear(v14);
  return std::__list_imp<char *>::clear(v12);
}

void sub_1ADC00AB0(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t *v2;
  _QWORD *v3;
  uint64_t *v4;
  uint64_t v5;

  std::__list_imp<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::clear((uint64_t *)(v5 + 40));
  std::__list_imp<char *>::clear((_QWORD *)(v5 + 8));
  std::__list_imp<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::clear(v4);
  std::__list_imp<char *>::clear(v3);
  std::__list_imp<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::clear(v2);
  std::__list_imp<char *>::clear(v1);
  _Unwind_Resume(a1);
}

uint64_t fst::DefaultDeterminizeFilter<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>::FilterArc(uint64_t a1, _DWORD *a2, uint64_t a3, _DWORD *a4, uint64_t a5)
{
  uint64_t *v7;
  int v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  _DWORD *v16;
  int v17;
  _QWORD v18[3];
  int v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;

  v16 = a2;
  v7 = std::__tree<std::__value_type<int,fst::DeterminizeArc<fst::DeterminizeStateTuple<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::IntegerFilterState<signed char>>>>,std::__map_value_compare<int,std::__value_type<int,fst::DeterminizeArc<fst::DeterminizeStateTuple<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::IntegerFilterState<signed char>>>>,std::less<int>,true>,std::allocator<std::__value_type<int,fst::DeterminizeArc<fst::DeterminizeStateTuple<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::IntegerFilterState<signed char>>>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(a5, a2, (uint64_t)&std::piecewise_construct, &v16);
  if (*((_DWORD *)v7 + 10) == -1)
  {
    fst::DeterminizeArc<fst::DeterminizeStateTuple<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::IntegerFilterState<signed char>>>::DeterminizeArc((uint64_t)&v16, a2);
    v8 = v17;
    *((_DWORD *)v7 + 10) = (_DWORD)v16;
    *((_DWORD *)v7 + 12) = v8;
    if (v7 + 5 != (uint64_t *)&v16)
      std::list<int>::__assign_with_sentinel[abi:ne180100]<std::__list_const_iterator<int,void *>,std::__list_const_iterator<int,void *>>(v7 + 7, v18[1], (uint64_t)v18);
    *((_DWORD *)v7 + 20) = v19;
    std::__list_imp<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::clear(v7 + 11);
    v9 = v22;
    if (v22)
    {
      v11 = v20;
      v10 = v21;
      v12 = *v21;
      *(_QWORD *)(v12 + 8) = *(_QWORD *)(v20 + 8);
      **(_QWORD **)(v11 + 8) = v12;
      v13 = v7[11];
      *(_QWORD *)(v13 + 8) = v10;
      *v10 = v13;
      v7[11] = v11;
      *(_QWORD *)(v11 + 8) = v7 + 11;
      v7[13] += v9;
      v22 = 0;
    }
    v7[14] = v23;
    std::__list_imp<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::clear(&v20);
    std::__list_imp<char *>::clear(v18);
    *(_BYTE *)(v7[14] + 8) = 0;
  }
  v14 = (uint64_t *)v7[14];
  *v14 = (uint64_t)std::__forward_list_base<fst::DeterminizeElement<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>::__create_node[abi:ne180100]<fst::DeterminizeElement<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>> const&>((uint64_t)v14, *v14, a4);
  return 1;
}

void sub_1ADC00C50(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t v2;

  std::__list_imp<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::clear((uint64_t *)(v2 + 48));
  std::__list_imp<char *>::clear(v1);
  _Unwind_Resume(a1);
}

uint64_t fst::DeterminizeFsaImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicCommonDivisor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4,fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>>,fst::DefaultDeterminizeFilter<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>,fst::DefaultDeterminizeStateTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::IntegerFilterState<signed char>>>::NormArc(uint64_t a1, uint64_t a2)
{
  uint64_t **v4;
  uint64_t result;
  uint64_t *v6;
  int *v7;
  uint64_t *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  char v22;
  uint64_t **v23;
  uint64_t *v24;
  char v25;
  uint64_t *v26;
  uint64_t v28;
  uint64_t *i;
  int *v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t **v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;

  v4 = *(uint64_t ***)(a2 + 72);
  result = (uint64_t)std::forward_list<fst::DeterminizeElement<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::sort[abi:ne180100](v4);
  v43 = v4;
  v6 = *v4;
  if (*v4)
  {
    v42 = a1;
    v7 = (int *)(a2 + 8);
    v8 = v6;
    do
    {
      fst::GallicCommonDivisor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4,fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>>::operator()(a2 + 8, (uint64_t)(v8 + 2), (uint64_t)&v44);
      *v7 = v44;
      if (v7 != &v44)
        std::list<int>::__assign_with_sentinel[abi:ne180100]<std::__list_const_iterator<int,void *>,std::__list_const_iterator<int,void *>>((uint64_t *)(a2 + 16), v46, (uint64_t)&v45);
      *(_DWORD *)(a2 + 40) = v47;
      std::__list_imp<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::clear((uint64_t *)(a2 + 48));
      v9 = v50;
      if (v50)
      {
        v11 = v48;
        v10 = v49;
        v12 = *v49;
        *(_QWORD *)(v12 + 8) = *(_QWORD *)(v48 + 8);
        **(_QWORD **)(v11 + 8) = v12;
        v13 = *(_QWORD *)(a2 + 48);
        *(_QWORD *)(v13 + 8) = v10;
        *v10 = v13;
        *(_QWORD *)(a2 + 48) = v11;
        *(_QWORD *)(v11 + 8) = a2 + 48;
        *(_QWORD *)(a2 + 64) += v9;
        v50 = 0;
      }
      std::__list_imp<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::clear(&v48);
      result = (uint64_t)std::__list_imp<char *>::clear(&v45);
      if (v6 == v8 || *((_DWORD *)v8 + 2) != *((_DWORD *)v6 + 2))
      {
        v28 = *v8;
        v6 = v8;
      }
      else
      {
        v14 = (int *)(v6 + 2);
        fst::Plus<int,fst::TropicalWeightTpl<float>>((int *)v6 + 4, (int *)v8 + 4, (uint64_t)&v44);
        *((_DWORD *)v6 + 4) = v44;
        if (v6 + 2 != (uint64_t *)&v44)
          std::list<int>::__assign_with_sentinel[abi:ne180100]<std::__list_const_iterator<int,void *>,std::__list_const_iterator<int,void *>>(v6 + 3, v46, (uint64_t)&v45);
        *((_DWORD *)v6 + 12) = v47;
        v15 = v6 + 7;
        std::__list_imp<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::clear(v6 + 7);
        v16 = v50;
        if (v50)
        {
          v18 = v48;
          v17 = v49;
          v19 = *v49;
          *(_QWORD *)(v19 + 8) = *(_QWORD *)(v48 + 8);
          **(_QWORD **)(v18 + 8) = v19;
          v20 = v6[7];
          *(_QWORD *)(v20 + 8) = v17;
          *v17 = v20;
          v6[7] = v18;
          *(_QWORD *)(v18 + 8) = v15;
          v6[9] += v16;
          v50 = 0;
        }
        std::__list_imp<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::clear(&v48);
        std::__list_imp<char *>::clear(&v45);
        v21 = *v14;
        if ((!*v14 || v21 != -2 || v6[5]) && *((float *)v6 + 12) != -INFINITY && (unint64_t)(v6[9] + 1) >= 2)
        {
          v22 = 0;
          v23 = (uint64_t **)(v6 + 8);
LABEL_19:
          v24 = *v23;
          while (1)
          {
            v25 = v22;
            if ((v22 & 1) != 0)
            {
              v26 = v24 + 2;
              if (v24 == v15)
                goto LABEL_36;
            }
            else
            {
              v26 = v6 + 2;
              if (v21)
              {
                v26 = v6 + 2;
                if (v21 == -2)
                {
                  v26 = v6 + 2;
                  if (!v6[5])
                    goto LABEL_36;
                }
              }
            }
            if (*(_DWORD *)v26)
            {
              if (*(_DWORD *)v26 == -2 && v26[3] == 0)
                break;
            }
            if (*((float *)v26 + 8) == -INFINITY)
              break;
            v22 = 1;
            if ((v25 & 1) != 0)
            {
              v23 = (uint64_t **)(v24 + 1);
              goto LABEL_19;
            }
          }
          *(_QWORD *)(v42 + 8) |= 4uLL;
        }
LABEL_36:
        v28 = *v8;
        result = std::forward_list<fst::DeterminizeElement<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>::erase_after((uint64_t)v43, (_QWORD **)v6);
      }
      v8 = (uint64_t *)v28;
    }
    while (v28);
    for (i = *v43; i; i = (uint64_t *)*i)
    {
      v30 = (int *)(i + 2);
      fst::Divide<int,fst::TropicalWeightTpl<float>>((int *)i + 4, v7, 0, (uint64_t)&v44);
      *((_DWORD *)i + 4) = v44;
      if (i + 2 != (uint64_t *)&v44)
        std::list<int>::__assign_with_sentinel[abi:ne180100]<std::__list_const_iterator<int,void *>,std::__list_const_iterator<int,void *>>(i + 3, v46, (uint64_t)&v45);
      *((_DWORD *)i + 12) = v47;
      v31 = i + 7;
      std::__list_imp<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::clear(i + 7);
      v32 = v50;
      if (v50)
      {
        v34 = v48;
        v33 = v49;
        v35 = *v49;
        *(_QWORD *)(v35 + 8) = *(_QWORD *)(v48 + 8);
        **(_QWORD **)(v34 + 8) = v35;
        v36 = i[7];
        *(_QWORD *)(v36 + 8) = v33;
        *v33 = v36;
        i[7] = v34;
        *(_QWORD *)(v34 + 8) = v31;
        i[9] += v32;
        v50 = 0;
      }
      std::__list_imp<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::clear(&v48);
      std::__list_imp<char *>::clear(&v45);
      fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>::Quantize((uint64_t)(i + 2), (uint64_t)&v44, *(float *)(v42 + 144));
      *v30 = v44;
      if (v30 != &v44)
        std::list<int>::__assign_with_sentinel[abi:ne180100]<std::__list_const_iterator<int,void *>,std::__list_const_iterator<int,void *>>(i + 3, v46, (uint64_t)&v45);
      *((_DWORD *)i + 12) = v47;
      std::__list_imp<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::clear(i + 7);
      v37 = v50;
      if (v50)
      {
        v39 = v48;
        v38 = v49;
        v40 = *v49;
        *(_QWORD *)(v40 + 8) = *(_QWORD *)(v48 + 8);
        **(_QWORD **)(v39 + 8) = v40;
        v41 = i[7];
        *(_QWORD *)(v41 + 8) = v38;
        *v38 = v41;
        i[7] = v39;
        *(_QWORD *)(v39 + 8) = v31;
        i[9] += v37;
        v50 = 0;
      }
      std::__list_imp<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::clear(&v48);
      result = (uint64_t)std::__list_imp<char *>::clear(&v45);
    }
  }
  return result;
}

void sub_1ADC010A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t *a11)
{
  _QWORD *v11;

  std::__list_imp<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::clear(a11);
  std::__list_imp<char *>::clear(v11);
  _Unwind_Resume(a1);
}

float fst::Times<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>,fst::GallicUnionWeightOptions<int,fst::TropicalWeightTpl<float>>>@<S0>(int *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int *v4;
  int v6;
  BOOL v7;
  int v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  float result;
  char v14;
  uint64_t *v15;
  BOOL v18;
  uint64_t v19;
  char v20;
  int *v21;
  char v23;
  uint64_t *v24;
  BOOL v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  _DWORD *v32;
  int *v33;
  uint64_t v34;
  _DWORD *v35;
  char v36;
  uint64_t *v37;
  BOOL v38;
  int *v39;
  char v40;
  int *v41;
  uint64_t *v42;
  char v43;
  BOOL v44;
  uint64_t v45;
  float v46;
  float v47;
  float v48;
  BOOL v49;
  float v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  int *v56;
  uint64_t *v57;
  int *v58;
  uint64_t v59;
  int *v60;
  int *v61;
  char v62;
  int v63;
  _QWORD v64[3];
  int v65;
  uint64_t v66;
  _QWORD *v67;
  uint64_t v68;
  char v69[8];
  uint64_t v70[4];
  int v71;
  _QWORD v72[3];
  int v73;
  uint64_t v74[4];

  v4 = a1;
  v6 = *a1;
  if (*a1)
  {
    if (*((_QWORD *)a1 + 3))
      v7 = 0;
    else
      v7 = v6 == -2;
    if (v7 || *((float *)a1 + 8) == -INFINITY)
      goto LABEL_10;
  }
  else if (*((float *)a1 + 8) == -INFINITY)
  {
    goto LABEL_10;
  }
  if ((unint64_t)(*((_QWORD *)a1 + 7) + 1) >= 2)
  {
    v14 = 0;
    v15 = (uint64_t *)(a1 + 12);
    v18 = v6 != -2 || *((_QWORD *)a1 + 3) != 0 || v6 == 0;
LABEL_31:
    v19 = *v15;
    while (1)
    {
      v20 = v14;
      if ((v14 & 1) != 0)
      {
        v21 = (int *)(v19 + 16);
        if ((int *)v19 == a1 + 10)
          break;
      }
      else
      {
        v21 = a1;
        if (!v18)
          break;
      }
      if (*v21)
      {
        if (*v21 == -2 && *((_QWORD *)v21 + 3) == 0)
          goto LABEL_66;
      }
      if (*((float *)v21 + 8) == -INFINITY)
        goto LABEL_66;
      v14 = 1;
      if ((v20 & 1) != 0)
      {
        v15 = (uint64_t *)(v19 + 8);
        goto LABEL_31;
      }
    }
  }
LABEL_10:
  v8 = *(_DWORD *)a2;
  if (*(_DWORD *)a2)
  {
    if (*(_QWORD *)(a2 + 24))
      v9 = 0;
    else
      v9 = v8 == -2;
    if (v9 || *(float *)(a2 + 32) == -INFINITY)
      goto LABEL_19;
  }
  else if (*(float *)(a2 + 32) == -INFINITY)
  {
    goto LABEL_19;
  }
  if ((unint64_t)(*(_QWORD *)(a2 + 56) + 1) < 2)
  {
LABEL_19:
    v10 = fst::UnionWeight<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>,fst::GallicUnionWeightOptions<int,fst::TropicalWeightTpl<float>>>::Zero();
    if ((fst::operator==<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>,fst::GallicUnionWeightOptions<int,fst::TropicalWeightTpl<float>>>(v4, v10) & 1) != 0|| (v11 = fst::UnionWeight<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>,fst::GallicUnionWeightOptions<int,fst::TropicalWeightTpl<float>>>::Zero(), fst::operator==<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>,fst::GallicUnionWeightOptions<int,fst::TropicalWeightTpl<float>>>((int *)a2, v11)))
    {
      v12 = (_DWORD *)fst::UnionWeight<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>,fst::GallicUnionWeightOptions<int,fst::TropicalWeightTpl<float>>>::Zero();
      *(_DWORD *)a3 = *v12;
      std::list<int>::list((_QWORD *)(a3 + 8), (uint64_t)(v12 + 2));
      *(_DWORD *)(a3 + 32) = v12[8];
      std::list<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::list((uint64_t *)(a3 + 40), (uint64_t)(v12 + 10));
      return result;
    }
    v56 = v4 + 10;
    v33 = (int *)*((_QWORD *)v4 + 6);
    v34 = *(_QWORD *)(a2 + 48);
    v35 = (_DWORD *)fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>::NoWeight();
    *(_DWORD *)a3 = *v35;
    v57 = (uint64_t *)(a3 + 8);
    std::list<int>::list((_QWORD *)(a3 + 8), (uint64_t)(v35 + 2));
    v36 = 0;
    *(_DWORD *)(a3 + 32) = v35[8];
    v37 = (uint64_t *)(a3 + 40);
    *(_QWORD *)(a3 + 40) = a3 + 40;
    *(_QWORD *)(a3 + 48) = a3 + 40;
    *(_QWORD *)(a3 + 56) = 0;
    v59 = a3;
    v58 = v4;
LABEL_69:
    v60 = v33;
    v61 = v33 + 4;
LABEL_70:
    v62 = v36;
    if ((v36 & 1) != 0)
    {
      if (v33 == v56)
        return result;
    }
    else if (*v4)
    {
      if (*((_QWORD *)v4 + 3))
        v38 = 0;
      else
        v38 = *v4 == -2;
      if (v38)
        return result;
      result = *((float *)v4 + 8);
      if (result == -INFINITY)
        return result;
    }
    else
    {
      result = *((float *)v4 + 8);
      if (result == -INFINITY)
        return result;
    }
    v39 = (int *)fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>::NoWeight();
    v71 = *v39;
    std::list<int>::list(v72, (uint64_t)(v39 + 2));
    v40 = 0;
    v73 = v39[8];
    v74[0] = (uint64_t)v74;
    v74[1] = (uint64_t)v74;
    v74[2] = 0;
    if ((v62 & 1) != 0)
      v41 = v61;
    else
      v41 = v4;
    while (1)
    {
      v42 = v37;
      v43 = v40;
      if ((v40 & 1) != 0)
      {
        if (v34 == a2 + 40)
          goto LABEL_107;
      }
      else if (*(_DWORD *)a2)
      {
        if (*(_QWORD *)(a2 + 24))
          v44 = 0;
        else
          v44 = *(_DWORD *)a2 == -2;
        if (v44 || *(float *)(a2 + 32) == -INFINITY)
        {
LABEL_107:
          fst::Plus<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>,fst::GallicUnionWeightOptions<int,fst::TropicalWeightTpl<float>>>(v59, (uint64_t)&v71, (uint64_t)&v63);
          *(_DWORD *)v59 = v63;
          v4 = v58;
          if (&v63 != (int *)v59)
            std::list<int>::__assign_with_sentinel[abi:ne180100]<std::__list_const_iterator<int,void *>,std::__list_const_iterator<int,void *>>(v57, v64[1], (uint64_t)v64);
          *(_DWORD *)(v59 + 32) = v65;
          std::__list_imp<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::clear(v37);
          v51 = v68;
          if (v68)
          {
            v53 = v66;
            v52 = v67;
            v54 = *v67;
            *(_QWORD *)(v54 + 8) = *(_QWORD *)(v66 + 8);
            **(_QWORD **)(v53 + 8) = v54;
            v55 = *(_QWORD *)(v59 + 40);
            *(_QWORD *)(v55 + 8) = v52;
            *v52 = v55;
            *(_QWORD *)(v59 + 40) = v53;
            *(_QWORD *)(v53 + 8) = v37;
            *(_QWORD *)(v59 + 56) += v51;
            v68 = 0;
          }
          std::__list_imp<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::clear(&v66);
          std::__list_imp<char *>::clear(v64);
          v34 = *(_QWORD *)(a2 + 48);
          std::__list_imp<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::clear(v74);
          std::__list_imp<char *>::clear(v72);
          v36 = 1;
          v33 = v60;
          if ((v62 & 1) != 0)
          {
            v33 = (int *)*((_QWORD *)v60 + 1);
            goto LABEL_69;
          }
          goto LABEL_70;
        }
      }
      else if (*(float *)(a2 + 32) == -INFINITY)
      {
        goto LABEL_107;
      }
      if ((v40 & 1) != 0)
        v45 = v34 + 16;
      else
        v45 = a2;
      fst::Times<int,(fst::StringType)2>(v41, v45, (uint64_t)&v63);
      v46 = *((float *)v41 + 8);
      v47 = NAN;
      if (v46 != -INFINITY)
      {
        v48 = *(float *)(v45 + 32);
        v47 = NAN;
        if (v48 != -INFINITY)
        {
          v47 = INFINITY;
          v49 = v48 == INFINITY || v46 == INFINITY;
          v50 = v46 + v48;
          if (!v49)
            v47 = v50;
        }
      }
      fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>::GallicWeight((uint64_t)v69, &v63, v47);
      std::__list_imp<char *>::clear(v64);
      v37 = v42;
      fst::UnionWeight<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>,fst::GallicUnionWeightOptions<int,fst::TropicalWeightTpl<float>>>::PushBack((float *)&v71, (uint64_t)v69, 1);
      std::__list_imp<char *>::clear(v70);
      v40 = 1;
      if ((v43 & 1) != 0)
        v34 = *(_QWORD *)(v34 + 8);
    }
  }
  v23 = 0;
  v24 = (uint64_t *)(a2 + 48);
  v27 = v8 != -2 || *(_QWORD *)(a2 + 24) != 0 || v8 == 0;
LABEL_53:
  v28 = *v24;
  while (1)
  {
    v29 = v23;
    if ((v23 & 1) != 0)
    {
      v30 = v28 + 16;
      if (v28 == a2 + 40)
        goto LABEL_19;
    }
    else
    {
      v30 = a2;
      if (!v27)
        goto LABEL_19;
    }
    if (*(_DWORD *)v30)
    {
      if (*(_DWORD *)v30 == -2 && *(_QWORD *)(v30 + 24) == 0)
        break;
    }
    if (*(float *)(v30 + 32) == -INFINITY)
      break;
    v23 = 1;
    if ((v29 & 1) != 0)
    {
      v24 = (uint64_t *)(v28 + 8);
      goto LABEL_53;
    }
  }
LABEL_66:
  v32 = (_DWORD *)fst::UnionWeight<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>,fst::GallicUnionWeightOptions<int,fst::TropicalWeightTpl<float>>>::NoWeight();
  *(_DWORD *)a3 = *v32;
  std::list<int>::list((_QWORD *)(a3 + 8), (uint64_t)(v32 + 2));
  *(_DWORD *)(a3 + 32) = v32[8];
  std::list<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::list((uint64_t *)(a3 + 40), (uint64_t)(v32 + 10));
  return result;
}

void sub_1ADC0169C(_Unwind_Exception *a1)
{
  _QWORD *v1;

  std::__list_imp<char *>::clear(v1);
  _Unwind_Resume(a1);
}

uint64_t fst::UnionWeight<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>,fst::GallicUnionWeightOptions<int,fst::TropicalWeightTpl<float>>>::NoWeight()
{
  unsigned __int8 v0;
  uint64_t v2;
  int *v3;
  int *v4;
  int v5;
  _QWORD v6[3];
  int v7;
  int v8;
  _QWORD v9[3];
  int v10;

  if ((v0 & 1) == 0
  {
    v2 = operator new();
    v3 = (int *)fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>::Zero();
    v8 = *v3;
    std::list<int>::list(v9, (uint64_t)(v3 + 2));
    v10 = v3[8];
    v4 = (int *)fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>::NoWeight();
    v5 = *v4;
    std::list<int>::list(v6, (uint64_t)(v4 + 2));
    v7 = v4[8];
    fst::UnionWeight<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>,fst::GallicUnionWeightOptions<int,fst::TropicalWeightTpl<float>>>::UnionWeight(v2, &v8, &v5);
    std::__list_imp<char *>::clear(v6);
    std::__list_imp<char *>::clear(v9);
    fst::UnionWeight<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>,fst::GallicUnionWeightOptions<int,fst::TropicalWeightTpl<float>>>::NoWeight(void)::no_weight = v2;
  }
  return fst::UnionWeight<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>,fst::GallicUnionWeightOptions<int,fst::TropicalWeightTpl<float>>>::NoWeight(void)::no_weight;
}

void sub_1ADC01814(_Unwind_Exception *a1)
{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;

  std::__list_imp<char *>::clear(v3);
  std::__list_imp<char *>::clear(v2);
  MEMORY[0x1AF44D190](v1, 0x1020C404C081FCELL);
  _Unwind_Resume(a1);
}

float *fst::UnionWeight<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>,fst::GallicUnionWeightOptions<int,fst::TropicalWeightTpl<float>>>::PushBack(float *result, uint64_t a2, int a3)
{
  float *v4;
  int v5;
  BOOL v6;
  float v7;
  uint64_t v8;
  uint64_t v9;
  float v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  _QWORD v14[3];
  int v15;
  char v16;

  v4 = result;
  v5 = *(_DWORD *)a2;
  if (*(_DWORD *)a2 && (v5 == -2 ? (v6 = *(_QWORD *)(a2 + 24) == 0) : (v6 = 0), v6)
    || (v7 = *(float *)(a2 + 32), v7 >= -INFINITY) && v7 <= -INFINITY)
  {
LABEL_8:
    v8 = (uint64_t)(v4 + 10);
LABEL_9:
    result = (float *)std::__list_imp<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::__create_node[abi:ne180100]<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2> const&>(v8, 0, 0, (_DWORD *)a2);
    *((_QWORD *)result + 1) = v8;
    v9 = *((_QWORD *)v4 + 5);
    *(_QWORD *)result = v9;
    *(_QWORD *)(v9 + 8) = result;
    *((_QWORD *)v4 + 5) = result;
    ++*((_QWORD *)v4 + 7);
    return result;
  }
  if (*(_DWORD *)result == -2 && !*((_QWORD *)result + 3))
    goto LABEL_23;
  v10 = result[8];
  if (v10 >= -INFINITY && v10 <= -INFINITY)
    goto LABEL_23;
  if (!a3)
  {
    v8 = (uint64_t)(result + 10);
    if (fst::GallicUnionWeightOptions<int,fst::TropicalWeightTpl<float>>::Compare::operator()((uint64_t)&v16, (int *)result, (int *)a2))goto LABEL_9;
    result = (float *)std::__list_imp<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::__create_node[abi:ne180100]<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2> const&>((uint64_t)(v4 + 10), 0, 0, v4);
    *((_QWORD *)result + 1) = v8;
    v12 = *((_QWORD *)v4 + 5);
    *(_QWORD *)result = v12;
    *(_QWORD *)(v12 + 8) = result;
    *((_QWORD *)v4 + 5) = result;
    ++*((_QWORD *)v4 + 7);
    v5 = *(_DWORD *)a2;
LABEL_23:
    *(_DWORD *)v4 = v5;
    if (v4 != (float *)a2)
      result = (float *)std::list<int>::__assign_with_sentinel[abi:ne180100]<std::__list_const_iterator<int,void *>,std::__list_const_iterator<int,void *>>((uint64_t *)v4 + 1, *(_QWORD *)(a2 + 16), a2 + 8);
    v4[8] = *(float *)(a2 + 32);
    return result;
  }
  v11 = (uint64_t)result;
  if (*((_QWORD *)result + 7))
    v11 = *((_QWORD *)result + 5) + 16;
  if (fst::GallicUnionWeightOptions<int,fst::TropicalWeightTpl<float>>::Compare::operator()((uint64_t)&v16, (int *)v11, (int *)a2))goto LABEL_8;
  fst::GallicUnionWeightOptions<int,fst::TropicalWeightTpl<float>>::Merge::operator()(v11, a2, (uint64_t)&v13);
  *(_DWORD *)v11 = v13;
  if ((int *)v11 != &v13)
    std::list<int>::__assign_with_sentinel[abi:ne180100]<std::__list_const_iterator<int,void *>,std::__list_const_iterator<int,void *>>((uint64_t *)(v11 + 8), v14[1], (uint64_t)v14);
  *(_DWORD *)(v11 + 32) = v15;
  return (float *)std::__list_imp<char *>::clear(v14);
}

void sub_1ADC01A2C(_Unwind_Exception *a1)
{
  _QWORD *v1;

  std::__list_imp<char *>::clear(v1);
  _Unwind_Resume(a1);
}

float fst::Plus<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>,fst::GallicUnionWeightOptions<int,fst::TropicalWeightTpl<float>>>@<S0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v6;
  BOOL v7;
  int v8;
  BOOL v9;
  uint64_t v10;
  float result;
  uint64_t v12;
  char v13;
  uint64_t *v14;
  BOOL v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  char v22;
  uint64_t *v23;
  BOOL v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  _DWORD *v31;
  uint64_t v32;
  _DWORD *v33;
  int v34;
  int v35;
  BOOL v36;
  BOOL v37;
  int *v38;
  int *v39;
  int v40;
  int v41;
  BOOL v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  int v46;
  BOOL v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  _QWORD v53[3];
  int v54;
  int v55;
  _QWORD v56[3];
  int v57;
  int v58;
  _QWORD v59[3];
  int v60;
  int v61;
  _QWORD v62[3];
  int v63;
  int v64;
  _QWORD v65[3];
  int v66;
  int v67;
  _QWORD v68[3];
  int v69;
  char v70[9];

  v6 = *(_DWORD *)a1;
  if (*(_DWORD *)a1)
  {
    if (*(_QWORD *)(a1 + 24))
      v7 = 0;
    else
      v7 = v6 == -2;
    if (v7 || *(float *)(a1 + 32) == -INFINITY)
      goto LABEL_10;
  }
  else if (*(float *)(a1 + 32) == -INFINITY)
  {
    goto LABEL_10;
  }
  if ((unint64_t)(*(_QWORD *)(a1 + 56) + 1) >= 2)
  {
    v13 = 0;
    v14 = (uint64_t *)(a1 + 48);
    v17 = v6 != -2 || *(_QWORD *)(a1 + 24) != 0 || v6 == 0;
LABEL_32:
    v18 = *v14;
    while (1)
    {
      v19 = v13;
      if ((v13 & 1) != 0)
      {
        v20 = v18 + 16;
        if (v18 == a1 + 40)
          break;
      }
      else
      {
        v20 = a1;
        if (!v17)
          break;
      }
      if (*(_DWORD *)v20)
      {
        if (*(_DWORD *)v20 == -2 && *(_QWORD *)(v20 + 24) == 0)
          goto LABEL_67;
      }
      if (*(float *)(v20 + 32) == -INFINITY)
        goto LABEL_67;
      v13 = 1;
      if ((v19 & 1) != 0)
      {
        v14 = (uint64_t *)(v18 + 8);
        goto LABEL_32;
      }
    }
  }
LABEL_10:
  v8 = *(_DWORD *)a2;
  if (!*(_DWORD *)a2)
  {
    if (*(float *)(a2 + 32) == -INFINITY)
      goto LABEL_19;
    goto LABEL_18;
  }
  if (*(_QWORD *)(a2 + 24))
    v9 = 0;
  else
    v9 = v8 == -2;
  if (!v9 && *(float *)(a2 + 32) != -INFINITY)
  {
LABEL_18:
    if ((unint64_t)(*(_QWORD *)(a2 + 56) + 1) < 2)
      goto LABEL_19;
    v22 = 0;
    v23 = (uint64_t *)(a2 + 48);
    v26 = v8 != -2 || *(_QWORD *)(a2 + 24) != 0 || v8 == 0;
LABEL_54:
    v27 = *v23;
    while (1)
    {
      v28 = v22;
      if ((v22 & 1) != 0)
      {
        v29 = v27 + 16;
        if (v27 == a2 + 40)
          goto LABEL_19;
      }
      else
      {
        v29 = a2;
        if (!v26)
          goto LABEL_19;
      }
      if (*(_DWORD *)v29)
      {
        if (*(_DWORD *)v29 == -2 && *(_QWORD *)(v29 + 24) == 0)
          break;
      }
      if (*(float *)(v29 + 32) == -INFINITY)
        break;
      v22 = 1;
      if ((v28 & 1) != 0)
      {
        v23 = (uint64_t *)(v27 + 8);
        goto LABEL_54;
      }
    }
LABEL_67:
    v31 = (_DWORD *)fst::UnionWeight<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>,fst::GallicUnionWeightOptions<int,fst::TropicalWeightTpl<float>>>::NoWeight();
    *(_DWORD *)a3 = *v31;
    std::list<int>::list((_QWORD *)(a3 + 8), (uint64_t)(v31 + 2));
    *(_DWORD *)(a3 + 32) = v31[8];
    std::list<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::list((uint64_t *)(a3 + 40), (uint64_t)(v31 + 10));
    return result;
  }
LABEL_19:
  v10 = fst::UnionWeight<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>,fst::GallicUnionWeightOptions<int,fst::TropicalWeightTpl<float>>>::Zero();
  if (fst::operator==<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>,fst::GallicUnionWeightOptions<int,fst::TropicalWeightTpl<float>>>((int *)a1, v10))
  {
    *(_DWORD *)a3 = *(_DWORD *)a2;
    std::list<int>::list((_QWORD *)(a3 + 8), a2 + 8);
    *(_DWORD *)(a3 + 32) = *(_DWORD *)(a2 + 32);
    std::list<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::list((uint64_t *)(a3 + 40), a2 + 40);
  }
  else
  {
    v12 = fst::UnionWeight<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>,fst::GallicUnionWeightOptions<int,fst::TropicalWeightTpl<float>>>::Zero();
    if (!fst::operator==<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>,fst::GallicUnionWeightOptions<int,fst::TropicalWeightTpl<float>>>((int *)a2, v12))
    {
      v32 = *(_QWORD *)(a1 + 48);
      v49 = a2 + 40;
      v50 = a1 + 40;
      v51 = *(_QWORD *)(a2 + 48);
      v33 = (_DWORD *)fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>::NoWeight();
      *(_DWORD *)a3 = *v33;
      std::list<int>::list((_QWORD *)(a3 + 8), (uint64_t)(v33 + 2));
      *(_DWORD *)(a3 + 32) = v33[8];
      *(_QWORD *)(a3 + 40) = a3 + 40;
      *(_QWORD *)(a3 + 48) = a3 + 40;
      *(_QWORD *)(a3 + 56) = 0;
      v34 = 1;
      v35 = 1;
      while (1)
      {
        if (*(_DWORD *)a1)
        {
          if (*(_QWORD *)(a1 + 24))
            v36 = 0;
          else
            v36 = *(_DWORD *)a1 == -2;
          if (v36 || (result = *(float *)(a1 + 32), result == -INFINITY))
          {
            while (1)
            {
LABEL_105:
              v40 = v35;
              if (v35)
              {
                v41 = *(_DWORD *)a1;
                if (*(_DWORD *)a1)
                {
                  if (*(_QWORD *)(a1 + 24))
                    v42 = 0;
                  else
                    v42 = v41 == -2;
                  if (v42 || (result = *(float *)(a1 + 32), v43 = a1, result >= -INFINITY) && result <= -INFINITY)
                  {
LABEL_119:
                    v44 = v51;
                    while (1)
                    {
                      v45 = v34;
                      if (v34)
                      {
                        v46 = *(_DWORD *)a2;
                        if (*(_DWORD *)a2)
                        {
                          if (*(_QWORD *)(a2 + 24))
                            v47 = 0;
                          else
                            v47 = v46 == -2;
                          if (v47)
                            return result;
                          result = *(float *)(a2 + 32);
                          v48 = a2;
                          if (result == -INFINITY)
                            return result;
                        }
                        else
                        {
                          result = *(float *)(a2 + 32);
                          v48 = a2;
                          if (result == -INFINITY)
                            return result;
                        }
                      }
                      else
                      {
                        if (v44 == v49)
                          return result;
                        v46 = *(_DWORD *)(v44 + 16);
                        v48 = v44 + 16;
                      }
                      v52 = v46;
                      std::list<int>::list(v53, v48 + 8);
                      v54 = *(_DWORD *)(v48 + 32);
                      fst::UnionWeight<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>,fst::GallicUnionWeightOptions<int,fst::TropicalWeightTpl<float>>>::PushBack((float *)a3, (uint64_t)&v52, 1);
                      std::__list_imp<char *>::clear(v53);
                      v34 = 0;
                      if (!v45)
                      {
                        v34 = 0;
                        v44 = *(_QWORD *)(v44 + 8);
                      }
                    }
                  }
                }
                else
                {
                  result = *(float *)(a1 + 32);
                  v43 = a1;
                  if (result == -INFINITY)
                    goto LABEL_119;
                }
              }
              else
              {
                if (v32 == v50)
                  goto LABEL_119;
                v41 = *(_DWORD *)(v32 + 16);
                v43 = v32 + 16;
              }
              v55 = v41;
              std::list<int>::list(v56, v43 + 8);
              v57 = *(_DWORD *)(v43 + 32);
              fst::UnionWeight<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>,fst::GallicUnionWeightOptions<int,fst::TropicalWeightTpl<float>>>::PushBack((float *)a3, (uint64_t)&v55, 1);
              std::__list_imp<char *>::clear(v56);
              v35 = 0;
              if (!v40)
              {
                v35 = 0;
                v32 = *(_QWORD *)(v32 + 8);
              }
            }
          }
        }
        else
        {
          result = *(float *)(a1 + 32);
          if (result == -INFINITY)
            goto LABEL_105;
        }
        while (1)
        {
          if (v34)
          {
            if (*(_DWORD *)a2)
            {
              if (*(_QWORD *)(a2 + 24))
                v37 = 0;
              else
                v37 = *(_DWORD *)a2 == -2;
              if (v37)
                goto LABEL_105;
              result = *(float *)(a2 + 32);
              if (result == -INFINITY)
                goto LABEL_105;
            }
            else
            {
              result = *(float *)(a2 + 32);
              if (result == -INFINITY)
                goto LABEL_105;
            }
          }
          else if (v51 == v49)
          {
            v51 = a2 + 40;
            goto LABEL_105;
          }
          v38 = (int *)(v35 ? a1 : v32 + 16);
          v67 = *v38;
          std::list<int>::list(v68, (uint64_t)(v38 + 2));
          v69 = v38[8];
          v39 = (int *)(v34 ? a2 : v51 + 16);
          v64 = *v39;
          std::list<int>::list(v65, (uint64_t)(v39 + 2));
          v66 = v39[8];
          if (fst::GallicUnionWeightOptions<int,fst::TropicalWeightTpl<float>>::Compare::operator()((uint64_t)v70, &v67, &v64))
          {
            v61 = v67;
            std::list<int>::list(v62, (uint64_t)v68);
            v63 = v69;
            fst::UnionWeight<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>,fst::GallicUnionWeightOptions<int,fst::TropicalWeightTpl<float>>>::PushBack((float *)a3, (uint64_t)&v61, 1);
            std::__list_imp<char *>::clear(v62);
            if (v35)
              v35 = 0;
            else
              v32 = *(_QWORD *)(v32 + 8);
          }
          else
          {
            v58 = v64;
            std::list<int>::list(v59, (uint64_t)v65);
            v60 = v66;
            fst::UnionWeight<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>,fst::GallicUnionWeightOptions<int,fst::TropicalWeightTpl<float>>>::PushBack((float *)a3, (uint64_t)&v58, 1);
            std::__list_imp<char *>::clear(v59);
            if (v34)
              v34 = 0;
            else
              v51 = *(_QWORD *)(v51 + 8);
          }
          std::__list_imp<char *>::clear(v65);
          std::__list_imp<char *>::clear(v68);
          if (v35)
            break;
          if (v32 == v50)
          {
            v32 = a1 + 40;
            goto LABEL_105;
          }
        }
      }
    }
    *(_DWORD *)a3 = *(_DWORD *)a1;
    std::list<int>::list((_QWORD *)(a3 + 8), a1 + 8);
    *(_DWORD *)(a3 + 32) = *(_DWORD *)(a1 + 32);
    std::list<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::list((uint64_t *)(a3 + 40), a1 + 40);
  }
  return result;
}

void sub_1ADC02108(_Unwind_Exception *a1)
{
  _QWORD *v1;

  std::__list_imp<char *>::clear(v1);
  _Unwind_Resume(a1);
}

uint64_t fst::UnionWeight<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>,fst::GallicUnionWeightOptions<int,fst::TropicalWeightTpl<float>>>::UnionWeight(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  *(_DWORD *)a1 = *a2;
  std::list<int>::list((_QWORD *)(a1 + 8), (uint64_t)(a2 + 2));
  *(_DWORD *)(a1 + 32) = a2[8];
  std::list<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::list((uint64_t *)(a1 + 40), 1, a3);
  return a1;
}

void sub_1ADC021F0(_Unwind_Exception *a1)
{
  _QWORD *v1;

  std::__list_imp<char *>::clear(v1);
  _Unwind_Resume(a1);
}

uint64_t *std::list<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::list(uint64_t *a1, uint64_t a2, _DWORD *a3)
{
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;

  *a1 = (uint64_t)a1;
  a1[1] = (uint64_t)a1;
  a1[2] = 0;
  if (a2)
  {
    v5 = a2;
    do
    {
      v6 = std::__list_imp<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::__create_node[abi:ne180100]<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2> const&>((uint64_t)a1, 0, 0, a3);
      v7 = *a1;
      *v6 = *a1;
      v6[1] = a1;
      *(_QWORD *)(v7 + 8) = v6;
      *a1 = (uint64_t)v6;
      ++a1[2];
      --v5;
    }
    while (v5);
  }
  return a1;
}

void sub_1ADC02278(_Unwind_Exception *a1)
{
  uint64_t *v1;

  std::__list_imp<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::clear(v1);
  _Unwind_Resume(a1);
}

uint64_t fst::GallicUnionWeightOptions<int,fst::TropicalWeightTpl<float>>::Compare::operator()(uint64_t a1, int *a2, int *a3)
{
  _QWORD *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  char v9;
  _QWORD *v10;
  uint64_t *v11;
  uint64_t v12;
  char v13;
  int *v14;
  int v15;
  int *v16;
  int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  _QWORD v23[2];
  uint64_t v24;

  v22 = *a2;
  std::list<int>::list(v23, (uint64_t)(a2 + 2));
  v18 = *a3;
  v4 = std::list<int>::list(&v19, (uint64_t)(a3 + 2));
  if (v22)
    v5 = v24 + 1;
  else
    v5 = 0;
  if (!v18 || v21 + 1 <= v5)
  {
    if (v18)
      v7 = v21 + 1;
    else
      v7 = 0;
    if (v22 && v24 + 1 > v7)
    {
LABEL_12:
      v6 = 0;
      goto LABEL_13;
    }
    v9 = 0;
    v10 = (_QWORD *)v23[1];
    v11 = &v20;
LABEL_15:
    v12 = *v11;
    while (1)
    {
      v13 = v9;
      if ((v9 & 1) != 0)
      {
        v14 = (int *)(v10 + 2);
        if (v10 == v23)
          goto LABEL_12;
      }
      else
      {
        if (!v22)
          goto LABEL_12;
        v14 = &v22;
      }
      v15 = *v14;
      v16 = (v13 & 1) != 0 ? (int *)(v12 + 16) : &v18;
      v17 = *v16;
      if (v15 < v17)
        break;
      if (v15 > v17)
        goto LABEL_12;
      v9 = 1;
      if ((v13 & 1) != 0)
      {
        v10 = (_QWORD *)v10[1];
        v11 = (uint64_t *)(v12 + 8);
        goto LABEL_15;
      }
    }
  }
  v6 = 1;
LABEL_13:
  std::__list_imp<char *>::clear(v4);
  std::__list_imp<char *>::clear(v23);
  return v6;
}

void sub_1ADC023A8(_Unwind_Exception *a1)
{
  _QWORD *v1;

  std::__list_imp<char *>::clear(v1);
  _Unwind_Resume(a1);
}

_QWORD *fst::GallicUnionWeightOptions<int,fst::TropicalWeightTpl<float>>::Merge::operator()@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  float v6;
  float v7;
  float v8;
  int v10;
  _QWORD v11[3];

  v10 = *(_DWORD *)a1;
  std::list<int>::list(v11, a1 + 8);
  v6 = *(float *)(a1 + 32);
  v7 = NAN;
  if (v6 != -INFINITY)
  {
    v8 = *(float *)(a2 + 32);
    v7 = NAN;
    if (v8 != -INFINITY)
    {
      if (v6 >= v8)
        v7 = *(float *)(a2 + 32);
      else
        v7 = *(float *)(a1 + 32);
    }
  }
  fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>::GallicWeight(a3, &v10, v7);
  return std::__list_imp<char *>::clear(v11);
}

void sub_1ADC02464(_Unwind_Exception *a1)
{
  _QWORD *v1;

  std::__list_imp<char *>::clear(v1);
  _Unwind_Resume(a1);
}

uint64_t fst::DeterminizeElement<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>::DeterminizeElement(uint64_t a1, int a2, _DWORD *a3)
{
  *(_DWORD *)a1 = a2;
  *(_DWORD *)(a1 + 8) = *a3;
  std::list<int>::list((_QWORD *)(a1 + 16), (uint64_t)(a3 + 2));
  *(_DWORD *)(a1 + 40) = a3[8];
  std::list<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::list((uint64_t *)(a1 + 48), (uint64_t)(a3 + 10));
  return a1;
}

void sub_1ADC024D4(_Unwind_Exception *a1)
{
  _QWORD *v1;

  std::__list_imp<char *>::clear(v1);
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<std::__value_type<int,fst::DeterminizeArc<fst::DeterminizeStateTuple<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::IntegerFilterState<signed char>>>>,std::__map_value_compare<int,std::__value_type<int,fst::DeterminizeArc<fst::DeterminizeStateTuple<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::IntegerFilterState<signed char>>>>,std::less<int>,true>,std::allocator<std::__value_type<int,fst::DeterminizeArc<fst::DeterminizeStateTuple<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::IntegerFilterState<signed char>>>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(uint64_t a1, int *a2, uint64_t a3, _DWORD **a4)
{
  uint64_t *v5;
  uint64_t **v6;
  int v7;
  uint64_t **v8;
  int v9;
  uint64_t *v11;

  v6 = (uint64_t **)(a1 + 8);
  v5 = *(uint64_t **)(a1 + 8);
  if (v5)
  {
    v7 = *a2;
    while (1)
    {
      while (1)
      {
        v8 = (uint64_t **)v5;
        v9 = *((_DWORD *)v5 + 8);
        if (v7 >= v9)
          break;
        v5 = *v8;
        v6 = v8;
        if (!*v8)
          goto LABEL_10;
      }
      if (v9 >= v7)
        break;
      v5 = v8[1];
      if (!v5)
      {
        v6 = v8 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v8 = (uint64_t **)(a1 + 8);
LABEL_10:
    std::__tree<std::__value_type<int,fst::DeterminizeArc<fst::DeterminizeStateTuple<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::IntegerFilterState<signed char>>>>,std::__map_value_compare<int,std::__value_type<int,fst::DeterminizeArc<fst::DeterminizeStateTuple<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::IntegerFilterState<signed char>>>>,std::less<int>,true>,std::allocator<std::__value_type<int,fst::DeterminizeArc<fst::DeterminizeStateTuple<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::IntegerFilterState<signed char>>>>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(a1, a4, (uint64_t)&v11);
    std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at((uint64_t **)a1, (uint64_t)v8, v6, v11);
    return v11;
  }
  return (uint64_t *)v8;
}

uint64_t std::__tree<std::__value_type<int,fst::DeterminizeArc<fst::DeterminizeStateTuple<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::IntegerFilterState<signed char>>>>,std::__map_value_compare<int,std::__value_type<int,fst::DeterminizeArc<fst::DeterminizeStateTuple<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::IntegerFilterState<signed char>>>>,std::less<int>,true>,std::allocator<std::__value_type<int,fst::DeterminizeArc<fst::DeterminizeStateTuple<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::IntegerFilterState<signed char>>>>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>@<X0>(uint64_t a1@<X0>, _DWORD **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5;
  _DWORD *v6;
  uint64_t result;

  v5 = a1 + 8;
  v6 = operator new(0x78uLL);
  *(_QWORD *)(a3 + 8) = v5;
  *(_QWORD *)a3 = v6;
  *(_BYTE *)(a3 + 16) = 0;
  v6[8] = **a2;
  result = fst::DeterminizeArc<fst::DeterminizeStateTuple<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::IntegerFilterState<signed char>>>::DeterminizeArc((uint64_t)(v6 + 10));
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void sub_1ADC0260C(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t *v2;
  uint64_t v3;

  *v1 = 0;
  std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<int,fst::DeterminizeArc<fst::DeterminizeStateTuple<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::IntegerFilterState<signed char>>>>,void *>>>::operator()[abi:ne180100](v3, v2);
  _Unwind_Resume(a1);
}

uint64_t fst::DeterminizeArc<fst::DeterminizeStateTuple<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::IntegerFilterState<signed char>>>::DeterminizeArc(uint64_t a1)
{
  _DWORD *v2;

  *(_DWORD *)a1 = -1;
  v2 = (_DWORD *)fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>::Zero();
  *(_DWORD *)(a1 + 8) = *v2;
  std::list<int>::list((_QWORD *)(a1 + 16), (uint64_t)(v2 + 2));
  *(_DWORD *)(a1 + 40) = v2[8];
  std::list<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::list((uint64_t *)(a1 + 48), (uint64_t)(v2 + 10));
  *(_QWORD *)(a1 + 72) = 0;
  return a1;
}

void sub_1ADC02690(_Unwind_Exception *a1)
{
  _QWORD *v1;

  std::__list_imp<char *>::clear(v1);
  _Unwind_Resume(a1);
}

void std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<int,fst::DeterminizeArc<fst::DeterminizeStateTuple<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::IntegerFilterState<signed char>>>>,void *>>>::operator()[abi:ne180100](uint64_t a1, uint64_t *__p)
{
  if (*(_BYTE *)(a1 + 8))
  {
    std::__list_imp<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::clear(__p + 11);
    std::__list_imp<char *>::clear(__p + 7);
  }
  if (__p)
    operator delete(__p);
}

uint64_t fst::DeterminizeArc<fst::DeterminizeStateTuple<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::IntegerFilterState<signed char>>>::DeterminizeArc(uint64_t a1, _DWORD *a2)
{
  _DWORD *v3;
  uint64_t v4;

  *(_DWORD *)a1 = *a2;
  v3 = (_DWORD *)fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>::Zero();
  *(_DWORD *)(a1 + 8) = *v3;
  std::list<int>::list((_QWORD *)(a1 + 16), (uint64_t)(v3 + 2));
  *(_DWORD *)(a1 + 40) = v3[8];
  std::list<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::list((uint64_t *)(a1 + 48), (uint64_t)(v3 + 10));
  v4 = operator new();
  *(_QWORD *)v4 = 0;
  *(_BYTE *)(v4 + 8) = -1;
  *(_QWORD *)(a1 + 72) = v4;
  return a1;
}

void sub_1ADC0277C(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t *v2;

  std::__list_imp<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::clear(v2);
  std::__list_imp<char *>::clear(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__forward_list_base<fst::DeterminizeElement<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>::__create_node[abi:ne180100]<fst::DeterminizeElement<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>> const&>(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  _QWORD *v6;

  v6 = operator new(0x50uLL);
  *v6 = a2;
  std::allocator<std::__forward_list_node<fst::DeterminizeElement<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>,void *>>::construct[abi:ne180100]<fst::DeterminizeElement<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>,fst::DeterminizeElement<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>> const&>(a1, (uint64_t)(v6 + 1), a3);
  return v6;
}

void sub_1ADC027F0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t *std::allocator<std::__forward_list_node<fst::DeterminizeElement<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>,void *>>::construct[abi:ne180100]<fst::DeterminizeElement<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>,fst::DeterminizeElement<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>> const&>(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  *(_DWORD *)a2 = *a3;
  *(_DWORD *)(a2 + 8) = a3[2];
  std::list<int>::list((_QWORD *)(a2 + 16), (uint64_t)(a3 + 4));
  *(_DWORD *)(a2 + 40) = a3[10];
  return std::list<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::list((uint64_t *)(a2 + 48), (uint64_t)(a3 + 12));
}

void sub_1ADC02860(_Unwind_Exception *a1)
{
  _QWORD *v1;

  std::__list_imp<char *>::clear(v1);
  _Unwind_Resume(a1);
}

_QWORD *fst::GallicCommonDivisor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4,fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>>::operator()@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5;
  char v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  BOOL v12;
  float v13;
  char v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  BOOL v20;
  float v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t *v27;
  BOOL v28;
  _BOOL4 v29;
  int v30;
  uint64_t v31;
  _DWORD *v32;
  int v35;
  uint64_t v36;
  uint64_t v37;
  float v38;
  int v39;
  uint64_t v40[3];
  float v41;
  float v42;

  v5 = fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>::Zero();
  v39 = *(_DWORD *)v5;
  std::list<int>::list(v40, v5 + 8);
  v6 = 0;
  v41 = *(float *)(v5 + 32);
  v7 = (uint64_t *)(a1 + 48);
LABEL_2:
  v8 = *v7;
  v9 = *v7 + 16;
  while (1)
  {
    v10 = v6;
    if ((v6 & 1) != 0)
    {
      if (v8 == a1 + 40)
        break;
      v11 = v9;
      goto LABEL_13;
    }
    if (!*(_DWORD *)a1)
    {
      v13 = *(float *)(a1 + 32);
      if (v13 >= -INFINITY && v13 <= -INFINITY)
        break;
      goto LABEL_12;
    }
    v12 = !*(_QWORD *)(a1 + 24) && *(_DWORD *)a1 == -2;
    if (v12 || *(float *)(a1 + 32) == -INFINITY)
      break;
LABEL_12:
    v11 = a1;
LABEL_13:
    fst::GallicCommonDivisor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2,fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>>::operator()((uint64_t)&v39, v11, (uint64_t)&v35);
    v39 = v35;
    std::list<int>::__assign_with_sentinel[abi:ne180100]<std::__list_const_iterator<int,void *>,std::__list_const_iterator<int,void *>>(v40, v37, (uint64_t)&v36);
    v41 = v38;
    std::__list_imp<char *>::clear(&v36);
    v6 = 1;
    if ((v10 & 1) != 0)
    {
      v7 = (uint64_t *)(v8 + 8);
      goto LABEL_2;
    }
  }
  v14 = 0;
  v15 = (uint64_t *)(a2 + 48);
  while (2)
  {
    v16 = *v15;
    v17 = *v15 + 16;
LABEL_19:
    v18 = v14;
    if ((v14 & 1) != 0)
    {
      if (v16 == a2 + 40)
        goto LABEL_33;
      v19 = v17;
LABEL_29:
      fst::GallicCommonDivisor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2,fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>>::operator()((uint64_t)&v39, v19, (uint64_t)&v35);
      v39 = v35;
      std::list<int>::__assign_with_sentinel[abi:ne180100]<std::__list_const_iterator<int,void *>,std::__list_const_iterator<int,void *>>(v40, v37, (uint64_t)&v36);
      v41 = v38;
      std::__list_imp<char *>::clear(&v36);
      v14 = 1;
      if ((v18 & 1) != 0)
      {
        v15 = (uint64_t *)(v16 + 8);
        continue;
      }
      goto LABEL_19;
    }
    break;
  }
  if (!*(_DWORD *)a2)
  {
    v21 = *(float *)(a2 + 32);
    if (v21 >= -INFINITY && v21 <= -INFINITY)
      goto LABEL_33;
    goto LABEL_28;
  }
  if (*(_QWORD *)(a2 + 24))
    v20 = 0;
  else
    v20 = *(_DWORD *)a2 == -2;
  if (!v20 && *(float *)(a2 + 32) != -INFINITY)
  {
LABEL_28:
    v19 = a2;
    goto LABEL_29;
  }
LABEL_33:
  v22 = fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>::Zero();
  if (v39)
    v23 = v40[2] + 1;
  else
    v23 = 0;
  if (*(_DWORD *)v22)
    v24 = *(_QWORD *)(v22 + 24) + 1;
  else
    v24 = 0;
  if (v23 != v24)
    goto LABEL_55;
  v25 = 0;
  v26 = v40[1];
  v27 = (uint64_t *)(v22 + 16);
  v28 = v39 && v39 == *(_DWORD *)v22;
  v29 = !v28;
  v30 = !v29;
  while (1)
  {
    v31 = *v27;
    if ((v25 & 1) == 0 && !v30)
      break;
    if ((uint64_t *)v26 == v40)
      goto LABEL_53;
    if (*(_DWORD *)(v26 + 16) != *(_DWORD *)(v31 + 16))
      goto LABEL_55;
    v26 = *(_QWORD *)(v26 + 8);
    v27 = (uint64_t *)(v31 + 8);
    v25 = 1;
  }
  if (v39)
    goto LABEL_55;
LABEL_53:
  v35 = LODWORD(v41);
  v42 = 0.0;
  v42 = *(float *)(v22 + 32);
  if (v41 == v42)
  {
    v32 = (_DWORD *)fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>::Zero();
    *(_DWORD *)a3 = *v32;
    std::list<int>::list((_QWORD *)(a3 + 8), (uint64_t)(v32 + 2));
    *(_DWORD *)(a3 + 32) = v32[8];
    std::list<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::list((uint64_t *)(a3 + 40), (uint64_t)(v32 + 10));
  }
  else
  {
LABEL_55:
    fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>::GallicWeight(a3, &v39);
  }
  return std::__list_imp<char *>::clear(v40);
}

void sub_1ADC02B88(_Unwind_Exception *a1)
{
  _QWORD *v1;
  _QWORD *v2;

  std::__list_imp<char *>::clear(v2);
  std::__list_imp<char *>::clear(v1);
  _Unwind_Resume(a1);
}

_QWORD *fst::Plus<int,fst::TropicalWeightTpl<float>>@<X0>(int *a1@<X0>, int *a2@<X1>, uint64_t a3@<X8>)
{
  int v7;
  _QWORD v8[3];
  int v9;
  uint64_t v10[3];
  int v11;
  _QWORD v12[3];
  int v13;
  uint64_t v14[3];
  int v15;
  _QWORD v16[4];
  uint64_t v17[3];

  v11 = *a1;
  std::list<int>::list(v12, (uint64_t)(a1 + 2));
  v13 = a1[8];
  std::list<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::list(v14, (uint64_t)(a1 + 10));
  v7 = *a2;
  std::list<int>::list(v8, (uint64_t)(a2 + 2));
  v9 = a2[8];
  std::list<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::list(v10, (uint64_t)(a2 + 10));
  fst::Plus<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>,fst::GallicUnionWeightOptions<int,fst::TropicalWeightTpl<float>>>((uint64_t)&v11, (uint64_t)&v7, (uint64_t)&v15);
  fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>::GallicWeight(a3, &v15);
  std::__list_imp<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::clear(v17);
  std::__list_imp<char *>::clear(v16);
  std::__list_imp<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::clear(v10);
  std::__list_imp<char *>::clear(v8);
  std::__list_imp<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::clear(v14);
  return std::__list_imp<char *>::clear(v12);
}

void sub_1ADC02CC8(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t *v2;
  _QWORD *v3;
  uint64_t *v4;
  uint64_t v5;

  std::__list_imp<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::clear((uint64_t *)(v5 + 40));
  std::__list_imp<char *>::clear((_QWORD *)(v5 + 8));
  std::__list_imp<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::clear(v4);
  std::__list_imp<char *>::clear(v3);
  std::__list_imp<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::clear(v2);
  std::__list_imp<char *>::clear(v1);
  _Unwind_Resume(a1);
}

uint64_t std::forward_list<fst::DeterminizeElement<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>::erase_after(uint64_t a1, _QWORD **a2)
{
  _QWORD *v3;
  uint64_t *v4;

  v3 = *a2;
  v4 = *a2 + 7;
  *a2 = (_QWORD *)**a2;
  std::__list_imp<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::clear(v4);
  std::__list_imp<char *>::clear(v3 + 3);
  operator delete(v3);
  return (uint64_t)*a2;
}

_QWORD *fst::Divide<int,fst::TropicalWeightTpl<float>>@<X0>(int *a1@<X0>, int *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v9;
  _QWORD v10[3];
  int v11;
  uint64_t v12[3];
  int v13;
  _QWORD v14[3];
  int v15;
  uint64_t v16[3];
  int v17;
  _QWORD v18[4];
  uint64_t v19[3];

  v13 = *a1;
  std::list<int>::list(v14, (uint64_t)(a1 + 2));
  v15 = a1[8];
  std::list<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::list(v16, (uint64_t)(a1 + 10));
  v9 = *a2;
  std::list<int>::list(v10, (uint64_t)(a2 + 2));
  v11 = a2[8];
  std::list<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::list(v12, (uint64_t)(a2 + 10));
  fst::Divide<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>,fst::GallicUnionWeightOptions<int,fst::TropicalWeightTpl<float>>>((uint64_t)&v13, (uint64_t)&v9, a3, (uint64_t)&v17);
  fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>::GallicWeight(a4, &v17);
  std::__list_imp<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::clear(v19);
  std::__list_imp<char *>::clear(v18);
  std::__list_imp<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::clear(v12);
  std::__list_imp<char *>::clear(v10);
  std::__list_imp<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::clear(v16);
  return std::__list_imp<char *>::clear(v14);
}

void sub_1ADC02E6C(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t *v2;
  _QWORD *v3;
  uint64_t *v4;
  uint64_t v5;

  std::__list_imp<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::clear((uint64_t *)(v5 + 40));
  std::__list_imp<char *>::clear((_QWORD *)(v5 + 8));
  std::__list_imp<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::clear(v4);
  std::__list_imp<char *>::clear(v3);
  std::__list_imp<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::clear(v2);
  std::__list_imp<char *>::clear(v1);
  _Unwind_Resume(a1);
}

_QWORD *fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>::Quantize@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, float a3@<S0>)
{
  int v5;
  _QWORD v6[4];
  uint64_t v7[3];

  fst::UnionWeight<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>,fst::GallicUnionWeightOptions<int,fst::TropicalWeightTpl<float>>>::Quantize(a1, (uint64_t)&v5, a3);
  fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>::GallicWeight(a2, &v5);
  std::__list_imp<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::clear(v7);
  return std::__list_imp<char *>::clear(v6);
}

void sub_1ADC02F14(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__list_imp<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::clear((uint64_t *)(v1 + 40));
  std::__list_imp<char *>::clear((_QWORD *)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>::GallicWeight(uint64_t a1, int *a2)
{
  int v5;
  _QWORD v6[3];
  int v7;

  v5 = *a2;
  std::list<int>::list(v6, (uint64_t)(a2 + 2));
  v7 = a2[8];
  fst::UnionWeight<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>,fst::GallicUnionWeightOptions<int,fst::TropicalWeightTpl<float>>>::UnionWeight(a1, &v5);
  std::__list_imp<char *>::clear(v6);
  return a1;
}

void sub_1ADC02F98(_Unwind_Exception *a1)
{
  _QWORD *v1;

  std::__list_imp<char *>::clear(v1);
  _Unwind_Resume(a1);
}

float fst::Divide<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>,fst::GallicUnionWeightOptions<int,fst::TropicalWeightTpl<float>>>@<S0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v7;
  BOOL v8;
  int v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  float result;
  char v15;
  uint64_t *v16;
  BOOL v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  char v24;
  uint64_t *v25;
  BOOL v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  _DWORD *v33;
  _QWORD *v34;
  BOOL v35;
  uint64_t v36;
  _DWORD *v37;
  BOOL v38;
  BOOL v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  float v44;
  float v45;
  uint64_t i;
  char v47;
  uint64_t v48;
  BOOL v49;
  uint64_t v50;
  float v51;
  float v52;
  uint64_t v53;
  uint64_t v54;
  char v56[8];
  uint64_t v57[4];
  char v58[8];
  uint64_t v59[4];
  int v60;
  _QWORD v61[4];

  v7 = *(_DWORD *)a1;
  if (*(_DWORD *)a1)
  {
    if (*(_QWORD *)(a1 + 24))
      v8 = 0;
    else
      v8 = v7 == -2;
    if (v8 || *(float *)(a1 + 32) == -INFINITY)
      goto LABEL_10;
  }
  else if (*(float *)(a1 + 32) == -INFINITY)
  {
    goto LABEL_10;
  }
  if ((unint64_t)(*(_QWORD *)(a1 + 56) + 1) >= 2)
  {
    v15 = 0;
    v16 = (uint64_t *)(a1 + 48);
    v19 = v7 != -2 || *(_QWORD *)(a1 + 24) != 0 || v7 == 0;
LABEL_31:
    v20 = *v16;
    while (1)
    {
      v21 = v15;
      if ((v15 & 1) != 0)
      {
        v22 = v20 + 16;
        if (v20 == a1 + 40)
          break;
      }
      else
      {
        v22 = a1;
        if (!v19)
          break;
      }
      if (*(_DWORD *)v22)
      {
        if (*(_DWORD *)v22 == -2 && *(_QWORD *)(v22 + 24) == 0)
          goto LABEL_66;
      }
      if (*(float *)(v22 + 32) == -INFINITY)
        goto LABEL_66;
      v15 = 1;
      if ((v21 & 1) != 0)
      {
        v16 = (uint64_t *)(v20 + 8);
        goto LABEL_31;
      }
    }
  }
LABEL_10:
  v9 = *(_DWORD *)a2;
  if (*(_DWORD *)a2)
  {
    if (*(_QWORD *)(a2 + 24))
      v10 = 0;
    else
      v10 = v9 == -2;
    if (!v10 && *(float *)(a2 + 32) != -INFINITY)
      goto LABEL_18;
  }
  else if (*(float *)(a2 + 32) != -INFINITY)
  {
LABEL_18:
    if ((unint64_t)(*(_QWORD *)(a2 + 56) + 1) < 2)
      goto LABEL_19;
    v24 = 0;
    v25 = (uint64_t *)(a2 + 48);
    v28 = v9 != -2 || *(_QWORD *)(a2 + 24) != 0 || v9 == 0;
LABEL_53:
    v29 = *v25;
    while (1)
    {
      v30 = v24;
      if ((v24 & 1) != 0)
      {
        v31 = v29 + 16;
        if (v29 == a2 + 40)
          goto LABEL_19;
      }
      else
      {
        v31 = a2;
        if (!v28)
          goto LABEL_19;
      }
      if (*(_DWORD *)v31)
      {
        if (*(_DWORD *)v31 == -2 && *(_QWORD *)(v31 + 24) == 0)
          break;
      }
      if (*(float *)(v31 + 32) == -INFINITY)
        break;
      v24 = 1;
      if ((v30 & 1) != 0)
      {
        v25 = (uint64_t *)(v29 + 8);
        goto LABEL_53;
      }
    }
LABEL_66:
    v33 = (_DWORD *)fst::UnionWeight<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>,fst::GallicUnionWeightOptions<int,fst::TropicalWeightTpl<float>>>::NoWeight();
    *(_DWORD *)a4 = *v33;
    std::list<int>::list((_QWORD *)(a4 + 8), (uint64_t)(v33 + 2));
    *(_DWORD *)(a4 + 32) = v33[8];
    std::list<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::list((uint64_t *)(a4 + 40), (uint64_t)(v33 + 10));
    return result;
  }
LABEL_19:
  v11 = fst::UnionWeight<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>,fst::GallicUnionWeightOptions<int,fst::TropicalWeightTpl<float>>>::Zero();
  if ((fst::operator==<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>,fst::GallicUnionWeightOptions<int,fst::TropicalWeightTpl<float>>>((int *)a1, v11) & 1) != 0|| (v12 = fst::UnionWeight<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>,fst::GallicUnionWeightOptions<int,fst::TropicalWeightTpl<float>>>::Zero(), fst::operator==<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>,fst::GallicUnionWeightOptions<int,fst::TropicalWeightTpl<float>>>((int *)a2, v12)))
  {
    v13 = (_DWORD *)fst::UnionWeight<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>,fst::GallicUnionWeightOptions<int,fst::TropicalWeightTpl<float>>>::Zero();
    *(_DWORD *)a4 = *v13;
    std::list<int>::list((_QWORD *)(a4 + 8), (uint64_t)(v13 + 2));
    *(_DWORD *)(a4 + 32) = v13[8];
    std::list<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::list((uint64_t *)(a4 + 40), (uint64_t)(v13 + 10));
    return result;
  }
  v34 = (_QWORD *)(a2 + 40);
  v35 = *(_DWORD *)a2 == -2 && !*(_QWORD *)(a2 + 24) || *(float *)(a2 + 32) == -INFINITY;
  v36 = *(_QWORD *)(a1 + 48);
  v37 = (_DWORD *)fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>::NoWeight();
  *(_DWORD *)a4 = *v37;
  std::list<int>::list((_QWORD *)(a4 + 8), (uint64_t)(v37 + 2));
  *(_DWORD *)(a4 + 32) = v37[8];
  *(_QWORD *)(a4 + 40) = a4 + 40;
  *(_QWORD *)(a4 + 48) = a4 + 40;
  *(_QWORD *)(a4 + 56) = 0;
  if (*(_DWORD *)a1)
  {
    if (*(_QWORD *)(a1 + 24))
      v38 = 0;
    else
      v38 = *(_DWORD *)a1 == -2;
    if (v38 || (result = *(float *)(a1 + 32), result == -INFINITY))
    {
LABEL_80:
      if (*(_DWORD *)a2)
      {
        if (*(_QWORD *)(a2 + 24))
          v39 = 0;
        else
          v39 = *(_DWORD *)a2 == -2;
        if (!v39)
        {
          result = *(float *)(a2 + 32);
          if (result != -INFINITY)
          {
LABEL_88:
            v40 = *(_QWORD *)(a2 + 56);
            if (!v40)
            {
              for (i = v36; ; i = *(_QWORD *)(v54 + 8))
              {
                v53 = i + 16;
                v54 = i;
                do
                {
                  v47 = v40;
                  if ((v40 & 1) != 0)
                  {
                    v48 = v53;
                    if (v54 == a1 + 40)
                      return result;
                  }
                  else if (*(_DWORD *)a1)
                  {
                    if (*(_QWORD *)(a1 + 24))
                      v49 = 0;
                    else
                      v49 = *(_DWORD *)a1 == -2;
                    if (v49)
                      return result;
                    result = *(float *)(a1 + 32);
                    v48 = a1;
                    if (result == -INFINITY)
                      return result;
                  }
                  else
                  {
                    result = *(float *)(a1 + 32);
                    v48 = a1;
                    if (result == -INFINITY)
                      return result;
                  }
                  if (v34 == *(_QWORD **)(a2 + 48))
                    v50 = a2;
                  else
                    v50 = *(_QWORD *)(a2 + 40) + 16;
                  fst::Divide<int,(fst::StringType)2>((int *)v48, (int *)v50, a3, (uint64_t)&v60);
                  v51 = *(float *)(v48 + 32);
                  v52 = NAN;
                  if (v51 != -INFINITY)
                  {
                    if ((*(_DWORD *)(v50 + 32) & 0x7FFFFFFFu) <= 0x7F7FFFFF)
                    {
                      v52 = INFINITY;
                      if (v51 != INFINITY)
                        v52 = v51 - *(float *)(v50 + 32);
                    }
                    else
                    {
                      v52 = NAN;
                    }
                  }
                  fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>::GallicWeight((uint64_t)v56, &v60, v52);
                  std::__list_imp<char *>::clear(v61);
                  fst::UnionWeight<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>,fst::GallicUnionWeightOptions<int,fst::TropicalWeightTpl<float>>>::PushBack((float *)a4, (uint64_t)v56, 1);
                  std::__list_imp<char *>::clear(v57);
                  LOBYTE(v40) = 1;
                }
                while ((v47 & 1) == 0);
              }
            }
          }
        }
      }
      else
      {
        result = *(float *)(a2 + 32);
        if (result != -INFINITY)
          goto LABEL_88;
      }
      v41 = fst::UnionWeight<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>,fst::GallicUnionWeightOptions<int,fst::TropicalWeightTpl<float>>>::NoWeight();
      fst::UnionWeight<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>,fst::GallicUnionWeightOptions<int,fst::TropicalWeightTpl<float>>>::operator=(a4, v41);
      return result;
    }
  }
  else
  {
    result = *(float *)(a1 + 32);
    if (result == -INFINITY)
      goto LABEL_80;
  }
  if (*(_QWORD *)(a1 + 56))
    goto LABEL_80;
  if (!v35)
  {
    v42 = *(_QWORD **)(a2 + 48);
    while (1)
    {
      v43 = a2;
      if (v34 != v42)
        v43 = *v34 + 16;
      fst::Divide<int,(fst::StringType)2>((int *)a1, (int *)v43, a3, (uint64_t)&v60);
      v44 = *(float *)(a1 + 32);
      v45 = NAN;
      if (v44 != -INFINITY)
      {
        if ((*(_DWORD *)(v43 + 32) & 0x7FFFFFFFu) <= 0x7F7FFFFF)
        {
          v45 = INFINITY;
          if (v44 != INFINITY)
            v45 = v44 - *(float *)(v43 + 32);
        }
        else
        {
          v45 = NAN;
        }
      }
      fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>::GallicWeight((uint64_t)v58, &v60, v45);
      std::__list_imp<char *>::clear(v61);
      fst::UnionWeight<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>,fst::GallicUnionWeightOptions<int,fst::TropicalWeightTpl<float>>>::PushBack((float *)a4, (uint64_t)v58, 1);
      std::__list_imp<char *>::clear(v59);
      v42 = *(_QWORD **)(a2 + 48);
      if (v34 == v42)
        break;
      v34 = (_QWORD *)*v34;
    }
  }
  return result;
}

void sub_1ADC035BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t *a10, _QWORD *a11)
{
  std::__list_imp<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::clear(a10);
  std::__list_imp<char *>::clear(a11);
  _Unwind_Resume(a1);
}

float *fst::UnionWeight<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>,fst::GallicUnionWeightOptions<int,fst::TropicalWeightTpl<float>>>::Quantize@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, float a3@<S0>)
{
  _DWORD *v6;
  float *result;
  char v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  float v14;
  _BYTE v15[8];
  _QWORD v16[4];

  v6 = (_DWORD *)fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>::NoWeight();
  *(_DWORD *)a2 = *v6;
  result = (float *)std::list<int>::list((_QWORD *)(a2 + 8), (uint64_t)(v6 + 2));
  v8 = 0;
  *(_DWORD *)(a2 + 32) = v6[8];
  *(_QWORD *)(a2 + 40) = a2 + 40;
  *(_QWORD *)(a2 + 48) = a2 + 40;
  *(_QWORD *)(a2 + 56) = 0;
  v9 = (uint64_t *)(a1 + 48);
LABEL_2:
  v10 = *v9;
  v11 = *v9 + 16;
  while (1)
  {
    v12 = v8;
    if ((v8 & 1) != 0)
    {
      result = (float *)v11;
      if (v10 == a1 + 40)
        return result;
      goto LABEL_5;
    }
    if (*(_DWORD *)a1)
    {
      if (*(_DWORD *)a1 == -2 && *(_QWORD *)(a1 + 24) == 0)
        return result;
    }
    v14 = *(float *)(a1 + 32);
    result = (float *)a1;
    if (v14 >= -INFINITY && v14 <= -INFINITY)
      return result;
LABEL_5:
    fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>::Quantize(result, (uint64_t)v15, a3);
    fst::UnionWeight<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>,fst::GallicUnionWeightOptions<int,fst::TropicalWeightTpl<float>>>::PushBack((float *)a2, (uint64_t)v15, 1);
    result = (float *)std::__list_imp<char *>::clear(v16);
    v8 = 1;
    if ((v12 & 1) != 0)
    {
      v9 = (uint64_t *)(v10 + 8);
      goto LABEL_2;
    }
  }
}

void sub_1ADC03738(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t *v2;
  _QWORD *v3;

  std::__list_imp<char *>::clear(v3);
  std::__list_imp<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::clear(v2);
  std::__list_imp<char *>::clear(v1);
  _Unwind_Resume(a1);
}

uint64_t fst::DeterminizeFsaImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicCommonDivisor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4,fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>>,fst::DefaultDeterminizeFilter<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>,fst::DefaultDeterminizeStateTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::IntegerFilterState<signed char>>>::FindState(uint64_t a1, int **a2)
{
  uint64_t State;
  uint64_t v5;
  uint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11[4];
  uint64_t v12[3];

  State = fst::DefaultDeterminizeStateTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::IntegerFilterState<signed char>>::FindState(*(_QWORD **)(a1 + 184), (_QWORD **)a2);
  v5 = State;
  if (*(_QWORD *)(a1 + 152))
  {
    v6 = *(uint64_t **)(a1 + 160);
    if ((int)State >= (unint64_t)((v6[1] - *v6) >> 6))
    {
      fst::DeterminizeFsaImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicCommonDivisor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4,fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>>,fst::DefaultDeterminizeFilter<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>,fst::DefaultDeterminizeStateTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::IntegerFilterState<signed char>>>::ComputeDistance(a1, a2, (uint64_t)&v10);
      v7 = v6[1];
      if (v7 >= v6[2])
      {
        v8 = std::vector<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::__push_back_slow_path<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>(v6, (uint64_t)&v10);
      }
      else
      {
        std::allocator<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::construct[abi:ne180100]<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>,fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>((uint64_t)(v6 + 2), v6[1], (uint64_t)&v10);
        v8 = v7 + 64;
        v6[1] = v7 + 64;
      }
      v6[1] = v8;
      std::__list_imp<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::clear(v12);
      std::__list_imp<char *>::clear(v11);
    }
  }
  return v5;
}

void sub_1ADC03824(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  std::__list_imp<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::clear((uint64_t *)va1);
  std::__list_imp<char *>::clear((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t fst::DefaultDeterminizeStateTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::IntegerFilterState<signed char>>::FindState(_QWORD *a1, _QWORD **a2)
{
  uint64_t v2;
  uint64_t Id;
  _QWORD **v4;
  _QWORD **v6;

  v6 = a2;
  v2 = (a1[12] - a1[11]) >> 3;
  Id = fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::FindId(a1 + 1, &v6, 1);
  if ((_DWORD)Id != (_DWORD)v2)
  {
    v4 = v6;
    if (v6)
    {
      std::__forward_list_base<fst::DeterminizeElement<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>::clear(v6);
      MEMORY[0x1AF44D190](v4, 0x1020C405F07FB98);
    }
  }
  return Id;
}

uint64_t *fst::DeterminizeFsaImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicCommonDivisor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4,fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>>,fst::DefaultDeterminizeFilter<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>,fst::DefaultDeterminizeStateTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::IntegerFilterState<signed char>>>::ComputeDistance@<X0>(uint64_t a1@<X0>, int **a2@<X1>, uint64_t a3@<X8>)
{
  _DWORD *v5;
  uint64_t *result;
  int *i;
  unint64_t v8;
  uint64_t v9;
  int *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v17;
  _QWORD v18[4];
  uint64_t v19[3];
  int v20;
  _QWORD v21[3];
  int v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  int v26;
  _QWORD v27[3];
  int v28;
  uint64_t v29[4];

  v5 = (_DWORD *)fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>::Zero();
  *(_DWORD *)a3 = *v5;
  std::list<int>::list((_QWORD *)(a3 + 8), (uint64_t)(v5 + 2));
  *(_DWORD *)(a3 + 32) = v5[8];
  result = std::list<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::list((uint64_t *)(a3 + 40), (uint64_t)(v5 + 10));
  for (i = *a2; i; i = *(int **)i)
  {
    v8 = i[2];
    v9 = **(_QWORD **)(a1 + 152);
    if (v8 >= (*(_QWORD *)(*(_QWORD *)(a1 + 152) + 8) - v9) >> 6)
      v10 = (int *)fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>::Zero();
    else
      v10 = (int *)(v9 + (v8 << 6));
    v26 = *v10;
    std::list<int>::list(v27, (uint64_t)(v10 + 2));
    v28 = v10[8];
    std::list<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::list(v29, (uint64_t)(v10 + 10));
    fst::Times<int,fst::TropicalWeightTpl<float>>(i + 4, &v26, (uint64_t)&v17);
    fst::Plus<int,fst::TropicalWeightTpl<float>>((int *)a3, &v17, (uint64_t)&v20);
    *(_DWORD *)a3 = v20;
    if (&v20 != (int *)a3)
      std::list<int>::__assign_with_sentinel[abi:ne180100]<std::__list_const_iterator<int,void *>,std::__list_const_iterator<int,void *>>((uint64_t *)(a3 + 8), v21[1], (uint64_t)v21);
    *(_DWORD *)(a3 + 32) = v22;
    std::__list_imp<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::clear((uint64_t *)(a3 + 40));
    v11 = v25;
    if (v25)
    {
      v13 = v23;
      v12 = v24;
      v14 = *v24;
      *(_QWORD *)(v14 + 8) = *(_QWORD *)(v23 + 8);
      **(_QWORD **)(v13 + 8) = v14;
      v15 = *(_QWORD *)(a3 + 40);
      *(_QWORD *)(v15 + 8) = v12;
      *v12 = v15;
      *(_QWORD *)(a3 + 40) = v13;
      *(_QWORD *)(v13 + 8) = a3 + 40;
      *(_QWORD *)(a3 + 56) += v11;
      v25 = 0;
    }
    std::__list_imp<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::clear(&v23);
    std::__list_imp<char *>::clear(v21);
    std::__list_imp<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::clear(v19);
    std::__list_imp<char *>::clear(v18);
    std::__list_imp<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::clear(v29);
    result = std::__list_imp<char *>::clear(v27);
  }
  return result;
}

void sub_1ADC03AA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, _QWORD *a10)
{
  std::__list_imp<char *>::clear(a10);
  _Unwind_Resume(a1);
}

uint64_t fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::FindId(_QWORD *a1, _QWORD *a2, int a3)
{
  uint64_t v6;
  uint64_t *v7;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  char *v18;
  char *v19;
  char *v20;
  char *v21;
  uint64_t v22;
  unsigned int v23;

  a1[13] = a2;
  v6 = (uint64_t)(a1 + 3);
  v7 = std::__hash_table<int,fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashFunc,fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashEqual,std::allocator<int>>::find<int>(a1 + 3, (int *)&fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::kCurrentKey);
  if (v7)
    return *((unsigned int *)v7 + 4);
  if (!a3)
    return 0xFFFFFFFFLL;
  v9 = a1[10];
  v10 = (_QWORD *)a1[11];
  v11 = ((uint64_t)v10 - v9) >> 3;
  v23 = v11;
  v12 = a1[12];
  if ((unint64_t)v10 >= v12)
  {
    if ((unint64_t)(v11 + 1) >> 61)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v14 = v12 - v9;
    v15 = v14 >> 2;
    if (v14 >> 2 <= (unint64_t)(v11 + 1))
      v15 = v11 + 1;
    if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF8)
      v16 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v16 = v15;
    if (v16)
      v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(a1 + 12), v16);
    else
      v17 = 0;
    v18 = &v17[8 * v11];
    v19 = &v17[8 * v16];
    *(_QWORD *)v18 = *a2;
    v13 = v18 + 8;
    v21 = (char *)a1[10];
    v20 = (char *)a1[11];
    if (v20 != v21)
    {
      do
      {
        v22 = *((_QWORD *)v20 - 1);
        v20 -= 8;
        *((_QWORD *)v18 - 1) = v22;
        v18 -= 8;
      }
      while (v20 != v21);
      v20 = (char *)a1[10];
    }
    a1[10] = v18;
    a1[11] = v13;
    a1[12] = v19;
    if (v20)
      operator delete(v20);
  }
  else
  {
    *v10 = *a2;
    v13 = v10 + 1;
  }
  a1[11] = v13;
  std::__hash_table<int,fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashFunc,fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashEqual,std::allocator<int>>::__emplace_unique_key_args<int,int const&>(v6, (int *)&v23, &v23);
  return v23;
}

uint64_t *std::__hash_table<int,fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashFunc,fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashEqual,std::allocator<int>>::find<int>(_QWORD *a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t ***v6;
  unint64_t v7;
  int8x8_t v8;
  uint8x8_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t **v12;
  uint64_t *v13;
  uint64_t *v14;
  unint64_t v15;

  v4 = *a2;
  if ((int)v4 < -1)
  {
    v7 = 0;
  }
  else
  {
    v5 = a1[4];
    if ((_DWORD)v4 == -1)
      v6 = *(uint64_t ****)(v5 + 104);
    else
      v6 = (uint64_t ***)(*(_QWORD *)(v5 + 80) + 8 * v4);
    v7 = fst::DefaultDeterminizeStateTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::IntegerFilterState<signed char>>::StateTupleKey::operator()(v5, *v6);
  }
  v8 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v8)
    return 0;
  v9 = (uint8x8_t)vcnt_s8(v8);
  v9.i16[0] = vaddlv_u8(v9);
  v10 = v9.u32[0];
  if (v9.u32[0] > 1uLL)
  {
    v11 = v7;
    if (v7 >= *(_QWORD *)&v8)
      v11 = v7 % *(_QWORD *)&v8;
  }
  else
  {
    v11 = (*(_QWORD *)&v8 - 1) & v7;
  }
  v12 = *(uint64_t ***)(*a1 + 8 * v11);
  if (!v12)
    return 0;
  v13 = *v12;
  if (*v12)
  {
    v14 = a1 + 6;
    do
    {
      v15 = v13[1];
      if (v15 == v7)
      {
        if ((fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashEqual::operator()(v14, *((_DWORD *)v13 + 4), *a2) & 1) != 0)return v13;
      }
      else
      {
        if (v10 > 1)
        {
          if (v15 >= *(_QWORD *)&v8)
            v15 %= *(_QWORD *)&v8;
        }
        else
        {
          v15 &= *(_QWORD *)&v8 - 1;
        }
        if (v15 != v11)
          return 0;
      }
      v13 = (uint64_t *)*v13;
    }
    while (v13);
  }
  return v13;
}

uint64_t fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashEqual::operator()(uint64_t *a1, int a2, int a3)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v6;
  uint64_t **v7;

  if (a2 < -1 || a3 < -1)
    return a2 == a3;
  v3 = *a1;
  if (a2 == -1)
    v4 = *(uint64_t **)(v3 + 104);
  else
    v4 = (uint64_t *)(*(_QWORD *)(v3 + 80) + 8 * a2);
  v6 = *v4;
  if (a3 == -1)
    v7 = *(uint64_t ***)(v3 + 104);
  else
    v7 = (uint64_t **)(*(_QWORD *)(v3 + 80) + 8 * a3);
  if (*((unsigned __int8 *)*v7 + 8) == *(unsigned __int8 *)(v6 + 8))
    return std::operator==[abi:ne180100]<fst::DeterminizeElement<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>,std::allocator<fst::DeterminizeElement<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>>(*v7, (uint64_t *)v6);
  else
    return 0;
}

uint64_t fst::DefaultDeterminizeStateTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::IntegerFilterState<signed char>>::StateTupleKey::operator()(uint64_t a1, uint64_t **a2)
{
  uint64_t v2;
  int *v3;
  uint64_t v4;
  unint64_t v5;
  _DWORD *v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;

  v2 = *((char *)a2 + 8);
  v3 = (int *)*a2;
  if (*a2)
  {
    do
    {
      v4 = 0;
      v5 = v3[2];
      v6 = v3 + 4;
      v7 = *((_QWORD *)v3 + 8);
      if (!*v6 || (*v6 == -2 ? (v9 = *((_QWORD *)v3 + 5) == 0) : (v9 = 0), !v9))
      {
        if (*((float *)v3 + 12) != -INFINITY)
        {
          v8 = fst::PairWeight<fst::StringWeight<int,(fst::StringType)1>,fst::LogWeightTpl<float>>::Hash(v3 + 4);
          while (1)
          {
            v4 ^= v8;
            if ((int *)v7 == v3 + 14)
              break;
            v8 = fst::PairWeight<fst::StringWeight<int,(fst::StringType)1>,fst::LogWeightTpl<float>>::Hash((int *)(v7 + 16)) ^ (2 * v4);
            v7 = *(_QWORD *)(v7 + 8);
          }
        }
      }
      v2 ^= (2 * v2) ^ (32 * v5) ^ (v5 >> 59) ^ v4;
      v3 = *(int **)v3;
    }
    while (v3);
  }
  return v2;
}

uint64_t std::operator==[abi:ne180100]<fst::DeterminizeElement<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>,std::allocator<fst::DeterminizeElement<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>>(uint64_t *a1, uint64_t *a2)
{
  while (1)
  {
    a1 = (uint64_t *)*a1;
    a2 = (uint64_t *)*a2;
    if (!a1 || a2 == 0)
      break;
    if (*((_DWORD *)a1 + 2) != *((_DWORD *)a2 + 2)
      || (fst::operator==<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>,fst::GallicUnionWeightOptions<int,fst::TropicalWeightTpl<float>>>((int *)a1 + 4, (uint64_t)(a2 + 2)) & 1) == 0)
    {
      return 0;
    }
  }
  return (a1 != 0) ^ (a2 == 0);
}

void *std::__hash_table<int,fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashFunc,fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashEqual,std::allocator<int>>::__emplace_unique_key_args<int,int const&>(uint64_t a1, int *a2, _DWORD *a3)
{
  unint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t ***v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  unint64_t v13;
  void **v14;
  void *i;
  unint64_t v16;
  float v17;
  float v18;
  _BOOL8 v19;
  unint64_t v20;
  unint64_t v21;
  size_t v22;
  uint64_t v23;
  _QWORD *v24;
  unint64_t v25;

  v7 = *a2;
  if ((int)v7 < -1)
  {
    v10 = 0;
  }
  else
  {
    v8 = *(_QWORD *)(a1 + 32);
    if ((_DWORD)v7 == -1)
      v9 = *(uint64_t ****)(v8 + 104);
    else
      v9 = (uint64_t ***)(*(_QWORD *)(v8 + 80) + 8 * v7);
    v10 = fst::DefaultDeterminizeStateTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::IntegerFilterState<signed char>>::StateTupleKey::operator()(v8, *v9);
  }
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      v3 = v10;
      if (v10 >= v11)
        v3 = v10 % v11;
    }
    else
    {
      v3 = (v11 - 1) & v10;
    }
    v14 = *(void ***)(*(_QWORD *)a1 + 8 * v3);
    if (v14)
    {
      for (i = *v14; i; i = *(void **)i)
      {
        v16 = *((_QWORD *)i + 1);
        if (v16 == v10)
        {
          if ((fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashEqual::operator()((uint64_t *)(a1 + 48), *((_DWORD *)i + 4), *a2) & 1) != 0)return i;
        }
        else
        {
          if (v13 > 1)
          {
            if (v16 >= v11)
              v16 %= v11;
          }
          else
          {
            v16 &= v11 - 1;
          }
          if (v16 != v3)
            break;
        }
      }
    }
  }
  i = operator new(0x18uLL);
  *(_QWORD *)i = 0;
  *((_QWORD *)i + 1) = v10;
  *((_DWORD *)i + 4) = *a3;
  v17 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v18 = *(float *)(a1 + 40);
  if (!v11 || (float)(v18 * (float)v11) < v17)
  {
    v19 = 1;
    if (v11 >= 3)
      v19 = (v11 & (v11 - 1)) != 0;
    v20 = v19 | (2 * v11);
    v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21)
      v22 = v21;
    else
      v22 = v20;
    std::__hash_table<int,fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashFunc,fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashEqual,std::allocator<int>>::__rehash<true>(a1, v22);
    v11 = *(_QWORD *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
        v3 = v10 % v11;
      else
        v3 = v10;
    }
    else
    {
      v3 = (v11 - 1) & v10;
    }
  }
  v23 = *(_QWORD *)a1;
  v24 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v24)
  {
    *(_QWORD *)i = *v24;
LABEL_44:
    *v24 = i;
    goto LABEL_45;
  }
  *(_QWORD *)i = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = i;
  *(_QWORD *)(v23 + 8 * v3) = a1 + 16;
  if (*(_QWORD *)i)
  {
    v25 = *(_QWORD *)(*(_QWORD *)i + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v25 >= v11)
        v25 %= v11;
    }
    else
    {
      v25 &= v11 - 1;
    }
    v24 = (_QWORD *)(*(_QWORD *)a1 + 8 * v25);
    goto LABEL_44;
  }
LABEL_45:
  ++*(_QWORD *)(a1 + 24);
  return i;
}

void sub_1ADC041A0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::vector<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::__push_back_slow_path<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v6;
  unint64_t v7;
  char *v8;
  uint64_t v9;
  void *v11;
  char *v12;
  char *v13;
  char *v14;
  uint64_t *v15;

  v3 = (a1[1] - *a1) >> 6;
  v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) >> 58)
    std::vector<int>::__throw_length_error[abi:ne180100]();
  v6 = a1[2] - *a1;
  if (v6 >> 5 > v4)
    v4 = v6 >> 5;
  if ((unint64_t)v6 >= 0x7FFFFFFFFFFFFFC0)
    v7 = 0x3FFFFFFFFFFFFFFLL;
  else
    v7 = v4;
  v15 = a1 + 2;
  if (v7)
    v8 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::corrective_reranking::VoiceEditingWFST::Edge>>((uint64_t)(a1 + 2), v7);
  else
    v8 = 0;
  v11 = v8;
  v12 = &v8[64 * v3];
  v14 = &v8[64 * v7];
  std::allocator<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::construct[abi:ne180100]<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>,fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>((uint64_t)(a1 + 2), (uint64_t)v12, a2);
  v13 = v12 + 64;
  std::vector<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::__swap_out_circular_buffer(a1, &v11);
  v9 = a1[1];
  std::__split_buffer<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::~__split_buffer(&v11);
  return v9;
}

void sub_1ADC0428C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t std::allocator<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::construct[abi:ne180100]<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>,fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_DWORD *)a2 = *(_DWORD *)a3;
  std::list<int>::list((_QWORD *)(a2 + 8), a3 + 8);
  *(_DWORD *)(a2 + 32) = *(_DWORD *)(a3 + 32);
  *(_QWORD *)(a2 + 40) = a2 + 40;
  *(_QWORD *)(a2 + 48) = a2 + 40;
  *(_QWORD *)(a2 + 56) = 0;
  return std::list<std::pair<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntryCE>>::splice(a2 + 40, (uint64_t *)(a2 + 40), (_QWORD *)(a3 + 40));
}

uint64_t std::vector<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>,std::reverse_iterator<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>*>,std::reverse_iterator<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>*>,std::reverse_iterator<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>*>>((uint64_t)(a1 + 2), a1[1], (_DWORD *)a1[1], *a1, (_DWORD *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>,std::reverse_iterator<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>*>,std::reverse_iterator<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>*>,std::reverse_iterator<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>*>>(uint64_t a1, uint64_t a2, _DWORD *a3, uint64_t a4, _DWORD *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  _DWORD *v9;
  uint64_t v11;
  _QWORD v13[3];
  char v14;
  __int128 v15;
  __int128 v16;

  v7 = a7;
  *(_QWORD *)&v16 = a6;
  *((_QWORD *)&v16 + 1) = a7;
  v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  v13[2] = &v16;
  v14 = 0;
  if (a3 == a5)
  {
    v11 = a6;
  }
  else
  {
    v9 = a3;
    do
    {
      v9 -= 16;
      std::allocator<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::construct[abi:ne180100]<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>,fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4> const&>(a1, v7 - 64, v9);
      v7 = *((_QWORD *)&v16 + 1) - 64;
      *((_QWORD *)&v16 + 1) -= 64;
    }
    while (v9 != a5);
    v11 = v16;
  }
  v14 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>,std::reverse_iterator<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v13);
  return v11;
}

void sub_1ADC04418(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>,std::reverse_iterator<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t *std::allocator<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::construct[abi:ne180100]<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>,fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4> const&>(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  *(_DWORD *)a2 = *a3;
  std::list<int>::list((_QWORD *)(a2 + 8), (uint64_t)(a3 + 2));
  *(_DWORD *)(a2 + 32) = a3[8];
  return std::list<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::list((uint64_t *)(a2 + 40), (uint64_t)(a3 + 10));
}

void sub_1ADC04480(_Unwind_Exception *a1)
{
  _QWORD *v1;

  std::__list_imp<char *>::clear(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>,std::reverse_iterator<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>,std::reverse_iterator<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>*>>::operator()[abi:ne180100]((_QWORD *)a1);
  return a1;
}

_QWORD *std::_AllocatorDestroyRangeReverse<std::allocator<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>,std::reverse_iterator<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>*>>::operator()[abi:ne180100](_QWORD *result)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(result[2] + 8);
  v2 = *(_QWORD *)(result[1] + 8);
  while (v1 != v2)
  {
    std::__list_imp<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::clear((uint64_t *)(v1 + 40));
    result = std::__list_imp<char *>::clear((_QWORD *)(v1 + 8));
    v1 += 64;
  }
  return result;
}

void **std::__split_buffer<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::~__split_buffer(void **a1)
{
  std::__split_buffer<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::__destruct_at_end[abi:ne180100](a1, (uint64_t)a1[1]);
  if (*a1)
    operator delete(*a1);
  return a1;
}

_QWORD *std::__split_buffer<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::__destruct_at_end[abi:ne180100](_QWORD *result, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v4;

  v2 = result[2];
  if (v2 != a2)
  {
    v4 = result;
    do
    {
      v4[2] = v2 - 64;
      std::__list_imp<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::clear((uint64_t *)(v2 - 24));
      result = std::__list_imp<char *>::clear((_QWORD *)(v2 - 56));
      v2 = v4[2];
    }
    while (v2 != a2);
  }
  return result;
}

void std::__tree<std::__value_type<int,fst::DeterminizeArc<fst::DeterminizeStateTuple<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::IntegerFilterState<signed char>>>>,std::__map_value_compare<int,std::__value_type<int,fst::DeterminizeArc<fst::DeterminizeStateTuple<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::IntegerFilterState<signed char>>>>,std::less<int>,true>,std::allocator<std::__value_type<int,fst::DeterminizeArc<fst::DeterminizeStateTuple<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::IntegerFilterState<signed char>>>>>>::destroy(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<int,fst::DeterminizeArc<fst::DeterminizeStateTuple<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::IntegerFilterState<signed char>>>>,std::__map_value_compare<int,std::__value_type<int,fst::DeterminizeArc<fst::DeterminizeStateTuple<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::IntegerFilterState<signed char>>>>,std::less<int>,true>,std::allocator<std::__value_type<int,fst::DeterminizeArc<fst::DeterminizeStateTuple<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::IntegerFilterState<signed char>>>>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<int,fst::DeterminizeArc<fst::DeterminizeStateTuple<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::IntegerFilterState<signed char>>>>,std::__map_value_compare<int,std::__value_type<int,fst::DeterminizeArc<fst::DeterminizeStateTuple<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::IntegerFilterState<signed char>>>>,std::less<int>,true>,std::allocator<std::__value_type<int,fst::DeterminizeArc<fst::DeterminizeStateTuple<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::IntegerFilterState<signed char>>>>>>::destroy(a1, a2[1]);
    std::__list_imp<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::clear(a2 + 11);
    std::__list_imp<char *>::clear(a2 + 7);
    operator delete(a2);
  }
}

uint64_t *fst::DeterminizeFstImplBase<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>::Final@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v7;
  _QWORD v8[3];
  int v9;
  uint64_t v10[3];
  uint64_t v11;
  _QWORD v12[3];
  int v13;
  uint64_t v14[3];

  if ((fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>::HasFinal(a1, a2) & 1) == 0)
  {
    (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)a1 + 64))(&v11, a1, a2);
    v7 = v11;
    std::list<int>::list(v8, (uint64_t)v12);
    v9 = v13;
    std::list<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::list(v10, (uint64_t)v14);
    fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>::SetFinal(a1, a2, &v7);
    std::__list_imp<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::clear(v10);
    std::__list_imp<char *>::clear(v8);
    std::__list_imp<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::clear(v14);
    std::__list_imp<char *>::clear(v12);
  }
  return fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>::Final(a1, a2, a3);
}

void sub_1ADC046CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  _QWORD *v14;
  _QWORD *v15;
  uint64_t *v16;
  va_list va;

  va_start(va, a14);
  std::__list_imp<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::clear(v16);
  std::__list_imp<char *>::clear(v15);
  std::__list_imp<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::clear((uint64_t *)va);
  std::__list_imp<char *>::clear(v14);
  _Unwind_Resume(a1);
}

unint64_t fst::DeterminizeFstImplBase<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>::NumArcs(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  if ((fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>::HasArcs((uint64_t)a1, a2) & 1) == 0)(*(void (**)(_QWORD *, uint64_t))(*a1 + 48))(a1, a2);
  v4 = a1[15];
  if (*(_DWORD *)(v4 + 76) == (_DWORD)a2)
    v5 = v4 + 80;
  else
    v5 = *(_QWORD *)(v4 + 8) + 8 * ((int)a2 + 1);
  return 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(*(_QWORD *)v5 + 88) - *(_QWORD *)(*(_QWORD *)v5 + 80)) >> 4);
}

uint64_t fst::DeterminizeFstImplBase<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>::NumInputEpsilons(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  if ((fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>::HasArcs((uint64_t)a1, a2) & 1) == 0)(*(void (**)(_QWORD *, uint64_t))(*a1 + 48))(a1, a2);
  v4 = a1[15];
  if (*(_DWORD *)(v4 + 76) == (_DWORD)a2)
    v5 = v4 + 80;
  else
    v5 = *(_QWORD *)(v4 + 8) + 8 * ((int)a2 + 1);
  return *(_QWORD *)(*(_QWORD *)v5 + 64);
}

uint64_t fst::DeterminizeFstImplBase<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>::NumOutputEpsilons(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  if ((fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>::HasArcs((uint64_t)a1, a2) & 1) == 0)(*(void (**)(_QWORD *, uint64_t))(*a1 + 48))(a1, a2);
  v4 = a1[15];
  if (*(_DWORD *)(v4 + 76) == (_DWORD)a2)
    v5 = v4 + 80;
  else
    v5 = *(_QWORD *)(v4 + 8) + 8 * ((int)a2 + 1);
  return *(_QWORD *)(*(_QWORD *)v5 + 72);
}

_QWORD *fst::DeterminizeFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>::DeterminizeFst(_QWORD *a1, uint64_t a2, int a3)
{
  _DWORD *v4;
  _DWORD *v5;
  int v6;

  *a1 = &unk_1E5D1E2F8;
  a1[1] = 0;
  v4 = *(_DWORD **)(a2 + 8);
  if (a3)
  {
    v4 = (_DWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v4 + 40))(*(_QWORD *)(a2 + 8));
    v5 = (_DWORD *)a1[1];
    if (v5)
    {
      v6 = v5[14] - 1;
      v5[14] = v6;
      if (!v6)
        (*(void (**)(_DWORD *))(*(_QWORD *)v5 + 8))(v5);
    }
  }
  else
  {
    ++v4[14];
  }
  a1[1] = v4;
  return a1;
}

void sub_1ADC048DC(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  uint64_t v3;

  *v1 = &unk_1E5D279F8;
  v3 = v1[1];
  if (v3)
    fst::ComposeFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::ComposeFst(v3);
  _Unwind_Resume(exception_object);
}

void fst::StateIterator<fst::DeterminizeFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>::~StateIterator()
{
  JUMPOUT(0x1AF44D190);
}

uint64_t fst::CacheStateIterator<fst::DeterminizeFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>::Value_(uint64_t a1)
{
  return *(unsigned int *)(a1 + 24);
}

uint64_t fst::CacheStateIterator<fst::DeterminizeFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>::Next_(uint64_t result)
{
  ++*(_DWORD *)(result + 24);
  return result;
}

uint64_t fst::CacheStateIterator<fst::DeterminizeFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>::Reset_(uint64_t result)
{
  *(_DWORD *)(result + 24) = 0;
  return result;
}

void fst::CacheStateIterator<fst::DeterminizeFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>::~CacheStateIterator()
{
  JUMPOUT(0x1AF44D190);
}

uint64_t fst::CacheStateIterator<fst::DeterminizeFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>::Done(uint64_t a1)
{
  int v2;
  uint64_t v3;
  _BOOL8 v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  int v11;
  int *v12;
  int v13;
  int v14;
  int v15;
  uint64_t v16;
  int v17;
  uint64_t v19;
  unint64_t v20;

  v2 = *(_DWORD *)(a1 + 24);
  v3 = *(_QWORD *)(a1 + 16);
  if (v2 < *(_DWORD *)(v3 + 68))
    return 0;
  v5 = fst::CacheBaseImpl<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>,fst::DefaultCacheStore<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::MinUnexpandedState(v3);
  if ((int)v5 >= *(_DWORD *)(*(_QWORD *)(a1 + 16) + 68))
    return 1;
  v6 = v5;
  do
  {
    fst::ArcIterator<fst::DeterminizeFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>::ArcIterator(&v19, *(_QWORD *)(a1 + 8), v6);
    v7 = v20;
    v8 = *(_QWORD *)(v19 + 80);
    v9 = 0xCCCCCCCCCCCCCCCDLL * ((*(_QWORD *)(v19 + 88) - v8) >> 4);
    v10 = *(_QWORD *)(a1 + 16);
    if (v20 < v9)
    {
      v11 = *(_DWORD *)(v10 + 68);
      v12 = (int *)(v8 + 80 * v20 + 72);
      do
      {
        v14 = *v12;
        v12 += 20;
        v13 = v14;
        if (v11 <= v14)
        {
          v11 = v13 + 1;
          *(_DWORD *)(v10 + 68) = v13 + 1;
        }
        ++v7;
      }
      while (v9 != v7);
      v20 = v9;
    }
    fst::CacheBaseImpl<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>,fst::DefaultCacheStore<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::SetExpandedState(v10, v6);
    v15 = *(_DWORD *)(a1 + 24);
    v16 = *(_QWORD *)(a1 + 16);
    v17 = *(_DWORD *)(v16 + 68);
    --*(_DWORD *)(v19 + 108);
    v4 = v15 >= v17;
    if (v15 < v17)
      break;
    v6 = fst::CacheBaseImpl<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>,fst::DefaultCacheStore<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::MinUnexpandedState(v16);
  }
  while ((int)v6 < *(_DWORD *)(*(_QWORD *)(a1 + 16) + 68));
  return v4;
}

void sub_1ADC04A80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  --*(_DWORD *)(a9 + 108);
  _Unwind_Resume(a1);
}

_QWORD *fst::ArcIterator<fst::DeterminizeFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>::ArcIterator(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  _DWORD *MutableState;

  v6 = *(_QWORD *)(a2 + 8);
  a1[1] = 0;
  MutableState = fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>>>>::GetMutableState(*(_QWORD *)(v6 + 120), a3);
  *a1 = MutableState;
  ++MutableState[27];
  if ((fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>::HasArcs(*(_QWORD *)(a2 + 8), a3) & 1) == 0)(*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a2 + 8) + 48))(*(_QWORD *)(a2 + 8), a3);
  return a1;
}

void sub_1ADC04B0C(_Unwind_Exception *a1)
{
  uint64_t v1;

  --*(_DWORD *)(*(_QWORD *)v1 + 108);
  _Unwind_Resume(a1);
}

uint64_t fst::DeterminizeFstImplBase<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>::InitArcIterator(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  if ((fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>::HasArcs(a1, a2) & 1) == 0)(*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 48))(a1, a2);
  return fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>::InitArcIterator(a1, a2, a3);
}

_QWORD *fst::FactorWeightFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::FactorWeightFst(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = operator new();
  fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::FactorWeightFstImpl(v6, a2, a3);
  *a1 = &unk_1E5D1EBE8;
  a1[1] = v6;
  return a1;
}

void sub_1ADC04BDC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10F3C40B21EFC33);
  _Unwind_Resume(a1);
}

void fst::FactorWeightFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::~FactorWeightFst(_QWORD *a1)
{
  _DWORD *v1;
  int v2;

  *a1 = &unk_1E5D27108;
  v1 = (_DWORD *)a1[1];
  if (v1)
  {
    v2 = v1[14] - 1;
    v1[14] = v2;
    if (!v2)
      (*(void (**)(_DWORD *))(*(_QWORD *)v1 + 8))(v1);
  }
  JUMPOUT(0x1AF44D190);
}

uint64_t fst::ImplToFst<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>,fst::Fst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>::HasSequentialStates(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8));
}

uint64_t fst::ImplToFst<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>,fst::Fst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>::Start(uint64_t a1)
{
  return fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::Start(*(_QWORD *)(a1 + 8));
}

uint64_t *fst::ImplToFst<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>,fst::Fst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>::Final@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  return fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::Final(*(_QWORD *)(a1 + 8), a2, a3);
}

unint64_t fst::ImplToFst<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>,fst::Fst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>::NumArcs(uint64_t a1, int a2)
{
  return fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::NumArcs(*(_QWORD *)(a1 + 8), a2);
}

uint64_t fst::ImplToFst<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>,fst::Fst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>::NumInputEpsilons(uint64_t a1, int a2)
{
  return fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::NumInputEpsilons(*(_QWORD *)(a1 + 8), a2);
}

uint64_t fst::ImplToFst<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>,fst::Fst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>::NumOutputEpsilons(uint64_t a1, int a2)
{
  return fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::NumOutputEpsilons(*(_QWORD *)(a1 + 8), a2);
}

uint64_t fst::ImplToFst<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>,fst::Fst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>::Properties(uint64_t a1, uint64_t a2, int a3)
{
  unint64_t v5;
  uint64_t v7;

  if (!a3)
    return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 8) + 32))(*(_QWORD *)(a1 + 8), a2);
  v7 = 0;
  v5 = fst::TestProperties<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>(a1, a2, &v7);
  *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) & (~v7 | 4) | v7 & v5;
  return v5 & a2;
}

uint64_t fst::ImplToFst<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>,fst::Fst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>::Type(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8) + 16;
}

_QWORD *fst::FactorWeightFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::Copy(uint64_t a1, int a2)
{
  _QWORD *v4;

  v4 = (_QWORD *)operator new();
  fst::ImplToFst<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>,fst::Fst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>::ImplToFst(v4, a1, a2);
  *v4 = &unk_1E5D1EBE8;
  return v4;
}

void sub_1ADC04D94(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0xA1C40BD48D6D6);
  _Unwind_Resume(a1);
}

uint64_t fst::ImplToFst<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>,fst::Fst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>::InputSymbols(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 8) + 40);
}

uint64_t fst::ImplToFst<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>,fst::Fst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>::OutputSymbols(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 8) + 48);
}

uint64_t fst::FactorWeightFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::InitStateIterator(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;

  v4 = operator new();
  *(_QWORD *)v4 = &unk_1E5D205A8;
  *(_QWORD *)(v4 + 8) = a1;
  v5 = *a1;
  *(_QWORD *)(v4 + 16) = a1[1];
  *(_DWORD *)(v4 + 24) = 0;
  result = (*(uint64_t (**)(uint64_t *))(v5 + 24))(a1);
  *(_QWORD *)v4 = &unk_1E5D1C7A8;
  *a2 = v4;
  return result;
}

void sub_1ADC04E50(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10E1C408BA93049);
  _Unwind_Resume(a1);
}

uint64_t fst::FactorWeightFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::InitArcIterator(uint64_t a1, int a2, _QWORD *a3)
{
  return fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::InitArcIterator(*(_QWORD *)(a1 + 8), a2, a3);
}

uint64_t fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::FactorWeightFstImpl(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  int v7;
  int v8;
  __int16 v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  fst *v17;
  _QWORD *v18;
  _QWORD *v19;
  char v21;
  std::string __str;

  *(_QWORD *)fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>::CacheBaseImpl(a1, a3) = &unk_1E5D21A10;
  v6 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 88))(a2, 0);
  v7 = *(_DWORD *)(a3 + 16);
  *(_QWORD *)(a1 + 148) = *(_QWORD *)(a3 + 20);
  v8 = *(_DWORD *)(a3 + 28);
  v9 = *(_WORD *)(a3 + 32);
  *(_QWORD *)(a1 + 232) = 0;
  *(_QWORD *)(a1 + 136) = v6;
  *(_DWORD *)(a1 + 144) = v7;
  *(_DWORD *)(a1 + 156) = v8;
  *(_WORD *)(a1 + 160) = v9;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_QWORD *)(a1 + 216) = 0;
  *(_DWORD *)(a1 + 224) = 1065353216;
  *(_QWORD *)(a1 + 240) = 0;
  *(_QWORD *)(a1 + 248) = 0;
  std::string::basic_string[abi:ne180100]<0>(&__str, "factor_weight");
  std::string::operator=((std::string *)(a1 + 16), &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  v10 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, 0x3FFFFFFF0007, 0);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a1 + 8) & 0xFFFFC0000000FFFFLL | fst::FactorWeightProperties(v10) & 0x3FFFFFFF0004;
  v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 112))(a2);
  v12 = *(_QWORD *)(a1 + 40);
  if (v12 != v11)
  {
    if (v12)
      (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
    if (v11)
      v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 16))(v11);
    else
      v13 = 0;
    *(_QWORD *)(a1 + 40) = v13;
  }
  v14 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 120))(a2);
  v15 = *(_QWORD *)(a1 + 48);
  if (v15 != v14)
  {
    if (v15)
      (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
    if (v14)
      v16 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 16))(v14);
    else
      v16 = 0;
    *(_QWORD *)(a1 + 48) = v16;
  }
  if (!*(_DWORD *)(a1 + 148))
  {
    std::string::basic_string[abi:ne180100]<0>(&__str, "WARNING");
    v17 = fst::LogMessage::LogMessage((fst *)&v21, (uint64_t)&__str);
    v18 = (_QWORD *)fst::cerr(v17);
    v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)"FactorWeightFst: factor mode is set to 0: ", 42);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"factoring neither arc weights nor final weights.", 48);
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v21);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
  }
  return a1;
}

void sub_1ADC05098(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, __int16 a10, char a11, char a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  _QWORD *v18;
  void **v19;
  void *v21;

  if (a18 < 0)
    operator delete(__p);
  v21 = *v19;
  if (*v19)
  {
    v18[30] = v21;
    operator delete(v21);
  }
  std::__hash_table<std::__hash_value_type<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::Element,int>,std::__unordered_map_hasher<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::Element,std::__hash_value_type<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::Element,int>,fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::ElementKey,fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::ElementEqual,true>,std::__unordered_map_equal<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::Element,std::__hash_value_type<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::Element,int>,fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::ElementEqual,fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::ElementKey,true>,std::allocator<std::__hash_value_type<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::Element,int>>>::~__hash_table((uint64_t)(v19 - 5));
  std::vector<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::Element,std::allocator<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::Element>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>::~CacheBaseImpl(v18);
  _Unwind_Resume(a1);
}

void fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::~FactorWeightFstImpl(uint64_t a1)
{
  fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::~FactorWeightFstImpl(a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::Properties(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 32))(a1, 0x3FFFFFFF0007);
}

uint64_t fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::Properties(uint64_t a1, uint64_t a2)
{
  if ((a2 & 4) != 0
    && (*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(**(_QWORD **)(a1 + 136) + 64))(*(_QWORD *)(a1 + 136), 4, 0))
  {
    *(_QWORD *)(a1 + 8) |= 4uLL;
  }
  return *(_QWORD *)(a1 + 8) & a2;
}

uint64_t std::__hash_table<std::__hash_value_type<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::Element,int>,std::__unordered_map_hasher<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::Element,std::__hash_value_type<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::Element,int>,fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::ElementKey,fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::ElementEqual,true>,std::__unordered_map_equal<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::Element,std::__hash_value_type<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::Element,int>,fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::ElementEqual,fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::ElementKey,true>,std::allocator<std::__hash_value_type<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::Element,int>>>::~__hash_table(uint64_t a1)
{
  void *v2;

  std::__hash_table<std::__hash_value_type<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::Element,int>,std::__unordered_map_hasher<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::Element,std::__hash_value_type<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::Element,int>,fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::ElementKey,fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::ElementEqual,true>,std::__unordered_map_equal<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::Element,std::__hash_value_type<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::Element,int>,fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::ElementEqual,fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::ElementKey,true>,std::allocator<std::__hash_value_type<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::Element,int>>>::__deallocate_node(a1, *(_QWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void std::__hash_table<std::__hash_value_type<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::Element,int>,std::__unordered_map_hasher<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::Element,std::__hash_value_type<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::Element,int>,fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::ElementKey,fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::ElementEqual,true>,std::__unordered_map_equal<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::Element,std::__hash_value_type<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::Element,int>,fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::ElementEqual,fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::ElementKey,true>,std::allocator<std::__hash_value_type<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::Element,int>>>::__deallocate_node(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;

  if (a2)
  {
    v2 = a2;
    do
    {
      v3 = (_QWORD *)*v2;
      std::__list_imp<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::clear(v2 + 8);
      std::__list_imp<char *>::clear(v2 + 4);
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

void std::vector<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::Element,std::allocator<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::Element>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    std::vector<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::Element,std::allocator<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::Element>>::__base_destruct_at_end[abi:ne180100](v2, (uint64_t)*v2);
    operator delete(**a1);
  }
}

_QWORD *std::vector<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::Element,std::allocator<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::Element>>::__base_destruct_at_end[abi:ne180100](_QWORD *result, uint64_t a2)
{
  _QWORD *v3;
  uint64_t i;

  v3 = result;
  for (i = result[1]; i != a2; i -= 72)
  {
    std::__list_imp<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::clear((uint64_t *)(i - 24));
    result = std::__list_imp<char *>::clear((_QWORD *)(i - 56));
  }
  v3[1] = a2;
  return result;
}

uint64_t fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::~FactorWeightFstImpl(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  void **v5;

  *(_QWORD *)a1 = &unk_1E5D21A10;
  v2 = *(_QWORD *)(a1 + 136);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *(void **)(a1 + 232);
  if (v3)
  {
    *(_QWORD *)(a1 + 240) = v3;
    operator delete(v3);
  }
  std::__hash_table<std::__hash_value_type<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::Element,int>,std::__unordered_map_hasher<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::Element,std::__hash_value_type<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::Element,int>,fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::ElementKey,fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::ElementEqual,true>,std::__unordered_map_equal<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::Element,std::__hash_value_type<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::Element,int>,fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::ElementEqual,fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::ElementKey,true>,std::allocator<std::__hash_value_type<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::Element,int>>>::~__hash_table(a1 + 192);
  v5 = (void **)(a1 + 168);
  std::vector<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::Element,std::allocator<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::Element>>::__destroy_vector::operator()[abi:ne180100](&v5);
  return fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>::~CacheBaseImpl((_QWORD *)a1);
}

uint64_t fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::Start(uint64_t a1)
{
  uint64_t result;
  int v3;
  int *v4;
  int State;
  int v6;
  _QWORD v7[3];
  int v8;
  uint64_t v9[3];
  int v10[4];
  _QWORD v11[4];
  uint64_t v12[3];

  if (*(_BYTE *)(a1 + 60))
    return *(unsigned int *)(a1 + 64);
  if ((*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 32))(a1, 4))
  {
    *(_BYTE *)(a1 + 60) = 1;
    return *(unsigned int *)(a1 + 64);
  }
  if (*(_BYTE *)(a1 + 60))
    return *(unsigned int *)(a1 + 64);
  result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 136) + 24))(*(_QWORD *)(a1 + 136));
  if ((_DWORD)result != -1)
  {
    v3 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 136) + 24))(*(_QWORD *)(a1 + 136));
    v4 = (int *)fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>::One();
    v6 = *v4;
    std::list<int>::list(v7, (uint64_t)(v4 + 2));
    v8 = v4[8];
    std::list<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::list(v9, (uint64_t)(v4 + 10));
    fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::Element::Element((uint64_t)v10, v3, &v6);
    State = fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::FindState(a1, v10);
    std::__list_imp<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::clear(v12);
    std::__list_imp<char *>::clear(v11);
    std::__list_imp<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::clear(v9);
    std::__list_imp<char *>::clear(v7);
    *(_DWORD *)(a1 + 64) = State;
    *(_BYTE *)(a1 + 60) = 1;
    if (*(_DWORD *)(a1 + 68) <= State)
      *(_DWORD *)(a1 + 68) = State + 1;
    return *(unsigned int *)(a1 + 64);
  }
  return result;
}

void sub_1ADC05468(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t *v2;
  uint64_t v3;

  std::__list_imp<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::clear((uint64_t *)(v3 + 48));
  std::__list_imp<char *>::clear((_QWORD *)(v3 + 16));
  std::__list_imp<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::clear(v2);
  std::__list_imp<char *>::clear(v1);
  _Unwind_Resume(a1);
}

uint64_t fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::FindState(uint64_t a1, int *a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  char *v7;
  char *v8;
  unint64_t v9;
  _QWORD *v10;
  char *v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  char *v16;
  int v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  unint64_t v22;
  uint64_t v23;
  int v24[4];
  uint64_t v25[4];
  uint64_t v26[4];
  unsigned int v27;

  if ((*(_BYTE *)(a1 + 148) & 2) != 0
    || (v4 = fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>::One(),
        !fst::operator==<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>,fst::GallicUnionWeightOptions<int,fst::TropicalWeightTpl<float>>>(a2 + 2, v4))|| (v5 = *a2, *a2 == -1))
  {
    v20 = std::__hash_table<std::__hash_value_type<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::Element,int>,std::__unordered_map_hasher<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::Element,std::__hash_value_type<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::Element,int>,fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::ElementKey,fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::ElementEqual,true>,std::__unordered_map_equal<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::Element,std::__hash_value_type<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::Element,int>,fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::ElementEqual,fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::ElementKey,true>,std::allocator<std::__hash_value_type<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::Element,int>>>::find<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::Element>((_QWORD *)(a1 + 192), a2);
    if (v20)
    {
      return *((unsigned int *)v20 + 22);
    }
    else
    {
      v22 = *(_QWORD *)(a1 + 176);
      v27 = 954437177 * ((v22 - *(_QWORD *)(a1 + 168)) >> 3);
      if (v22 >= *(_QWORD *)(a1 + 184))
      {
        v23 = std::vector<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::Element,std::allocator<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::Element>>::__push_back_slow_path<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::Element const&>((uint64_t *)(a1 + 168), a2);
      }
      else
      {
        std::allocator<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::Element>::construct[abi:ne180100]<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::Element,fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::Element const&>(a1 + 184, v22, a2);
        v23 = v22 + 72;
        *(_QWORD *)(a1 + 176) = v22 + 72;
      }
      *(_QWORD *)(a1 + 176) = v23;
      std::pair<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::Element const,int>::pair[abi:ne180100]<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::Element const&,int &,0>((uint64_t)v24, a2, &v27);
      std::__hash_table<std::__hash_value_type<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::Element,int>,std::__unordered_map_hasher<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::Element,std::__hash_value_type<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::Element,int>,fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::ElementKey,fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::ElementEqual,true>,std::__unordered_map_equal<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::Element,std::__hash_value_type<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::Element,int>,fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::ElementEqual,fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::ElementKey,true>,std::allocator<std::__hash_value_type<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::Element,int>>>::__emplace_unique_key_args<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::Element,std::pair<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::Element const,int>>(a1 + 192, v24, v24);
      std::__list_imp<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::clear(v26);
      std::__list_imp<char *>::clear(v25);
      return v27;
    }
  }
  else
  {
    v6 = v5;
    v7 = *(char **)(a1 + 232);
    v8 = *(char **)(a1 + 240);
    v9 = (v8 - v7) >> 2;
    if (v9 <= v5)
    {
      v10 = (_QWORD *)(a1 + 248);
      do
      {
        if ((unint64_t)v8 >= *v10)
        {
          v12 = v9 + 1;
          if ((v9 + 1) >> 62)
            std::vector<int>::__throw_length_error[abi:ne180100]();
          v13 = *v10 - (_QWORD)v7;
          if (v13 >> 1 > v12)
            v12 = v13 >> 1;
          if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFFCLL)
            v14 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v14 = v12;
          if (v14)
          {
            v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(a1 + 248, v14);
            v7 = *(char **)(a1 + 232);
            v8 = *(char **)(a1 + 240);
          }
          else
          {
            v15 = 0;
          }
          v16 = &v15[4 * v9];
          *(_DWORD *)v16 = -1;
          v11 = v16 + 4;
          while (v8 != v7)
          {
            v17 = *((_DWORD *)v8 - 1);
            v8 -= 4;
            *((_DWORD *)v16 - 1) = v17;
            v16 -= 4;
          }
          *(_QWORD *)(a1 + 232) = v16;
          *(_QWORD *)(a1 + 240) = v11;
          *(_QWORD *)(a1 + 248) = &v15[4 * v14];
          if (v7)
          {
            operator delete(v7);
            v7 = *(char **)(a1 + 232);
          }
          else
          {
            v7 = v16;
          }
        }
        else
        {
          *(_DWORD *)v8 = -1;
          v11 = v8 + 4;
        }
        *(_QWORD *)(a1 + 240) = v11;
        v9 = (v11 - v7) >> 2;
        v5 = *a2;
        v8 = v11;
      }
      while (v9 <= *a2);
      v6 = v5;
    }
    if (*(_DWORD *)&v7[4 * v6] == -1)
    {
      v18 = *(_QWORD *)(a1 + 176);
      *(_DWORD *)&v7[4 * v6] = 954437177 * ((v18 - *(_QWORD *)(a1 + 168)) >> 3);
      if (v18 >= *(_QWORD *)(a1 + 184))
      {
        v19 = std::vector<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::Element,std::allocator<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::Element>>::__push_back_slow_path<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::Element const&>((uint64_t *)(a1 + 168), a2);
      }
      else
      {
        std::allocator<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::Element>::construct[abi:ne180100]<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::Element,fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::Element const&>(a1 + 184, v18, a2);
        v19 = v18 + 72;
        *(_QWORD *)(a1 + 176) = v18 + 72;
      }
      *(_QWORD *)(a1 + 176) = v19;
      v5 = *a2;
      v7 = *(char **)(a1 + 232);
    }
    return *(unsigned int *)&v7[4 * v5];
  }
}

void sub_1ADC05724(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 176) = v2;
  _Unwind_Resume(exception_object);
}

uint64_t std::vector<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::Element,std::allocator<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::Element>>::__push_back_slow_path<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::Element const&>(uint64_t *a1, _DWORD *a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  void *v10;
  char *v11;
  char *v12;
  char *v13;
  uint64_t *v14;

  v3 = 0x8E38E38E38E38E39 * ((a1[1] - *a1) >> 3);
  v4 = v3 + 1;
  if (v3 + 1 > 0x38E38E38E38E38ELL)
    std::vector<int>::__throw_length_error[abi:ne180100]();
  if (0x1C71C71C71C71C72 * ((a1[2] - *a1) >> 3) > v4)
    v4 = 0x1C71C71C71C71C72 * ((a1[2] - *a1) >> 3);
  if (0x8E38E38E38E38E39 * ((a1[2] - *a1) >> 3) >= 0x1C71C71C71C71C7)
    v6 = 0x38E38E38E38E38ELL;
  else
    v6 = v4;
  v14 = a1 + 2;
  if (v6)
    v7 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::TranslationToken>>((uint64_t)(a1 + 2), v6);
  else
    v7 = 0;
  v10 = v7;
  v11 = &v7[72 * v3];
  v13 = &v7[72 * v6];
  std::allocator<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::Element>::construct[abi:ne180100]<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::Element,fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::Element const&>((uint64_t)(a1 + 2), (uint64_t)v11, a2);
  v12 = v11 + 72;
  std::vector<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::Element,std::allocator<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::Element>>::__swap_out_circular_buffer(a1, &v10);
  v8 = a1[1];
  std::__split_buffer<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::Element,std::allocator<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::Element> &>::~__split_buffer(&v10);
  return v8;
}

void sub_1ADC05868(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::Element,std::allocator<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::Element> &>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t *std::allocator<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::Element>::construct[abi:ne180100]<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::Element,fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::Element const&>(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  *(_DWORD *)a2 = *a3;
  *(_DWORD *)(a2 + 8) = a3[2];
  std::list<int>::list((_QWORD *)(a2 + 16), (uint64_t)(a3 + 4));
  *(_DWORD *)(a2 + 40) = a3[10];
  return std::list<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::list((uint64_t *)(a2 + 48), (uint64_t)(a3 + 12));
}

void sub_1ADC058D8(_Unwind_Exception *a1)
{
  _QWORD *v1;

  std::__list_imp<char *>::clear(v1);
  _Unwind_Resume(a1);
}

uint64_t std::vector<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::Element,std::allocator<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::Element>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::Element>,std::reverse_iterator<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::Element*>,std::reverse_iterator<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::Element*>,std::reverse_iterator<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::Element*>>((uint64_t)(a1 + 2), a1[1], (_DWORD *)a1[1], *a1, (_DWORD *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::Element>,std::reverse_iterator<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::Element*>,std::reverse_iterator<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::Element*>,std::reverse_iterator<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::Element*>>(uint64_t a1, uint64_t a2, _DWORD *a3, uint64_t a4, _DWORD *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  _DWORD *v9;
  uint64_t v11;
  _QWORD v13[3];
  char v14;
  __int128 v15;
  __int128 v16;

  v7 = a7;
  *(_QWORD *)&v16 = a6;
  *((_QWORD *)&v16 + 1) = a7;
  v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  v13[2] = &v16;
  v14 = 0;
  if (a3 == a5)
  {
    v11 = a6;
  }
  else
  {
    v9 = a3;
    do
    {
      v9 -= 18;
      std::allocator<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::Element>::construct[abi:ne180100]<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::Element,fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::Element const&>(a1, v7 - 72, v9);
      v7 = *((_QWORD *)&v16 + 1) - 72;
      *((_QWORD *)&v16 + 1) -= 72;
    }
    while (v9 != a5);
    v11 = v16;
  }
  v14 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::Element>,std::reverse_iterator<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::Element*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v13);
  return v11;
}

void sub_1ADC05A14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::Element>,std::reverse_iterator<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::Element*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::Element>,std::reverse_iterator<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::Element*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::Element>,std::reverse_iterator<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::Element*>>::operator()[abi:ne180100]((_QWORD *)a1);
  return a1;
}

_QWORD *std::_AllocatorDestroyRangeReverse<std::allocator<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::Element>,std::reverse_iterator<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::Element*>>::operator()[abi:ne180100](_QWORD *result)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(result[2] + 8);
  v2 = *(_QWORD *)(result[1] + 8);
  while (v1 != v2)
  {
    std::__list_imp<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::clear((uint64_t *)(v1 + 48));
    result = std::__list_imp<char *>::clear((_QWORD *)(v1 + 16));
    v1 += 72;
  }
  return result;
}

void **std::__split_buffer<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::Element,std::allocator<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::Element> &>::~__split_buffer(void **a1)
{
  std::__split_buffer<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::Element,std::allocator<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::Element> &>::__destruct_at_end[abi:ne180100](a1, (uint64_t)a1[1]);
  if (*a1)
    operator delete(*a1);
  return a1;
}

_QWORD *std::__split_buffer<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::Element,std::allocator<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::Element> &>::__destruct_at_end[abi:ne180100](_QWORD *result, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v4;

  v2 = result[2];
  if (v2 != a2)
  {
    v4 = result;
    do
    {
      v4[2] = v2 - 72;
      std::__list_imp<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::clear((uint64_t *)(v2 - 24));
      result = std::__list_imp<char *>::clear((_QWORD *)(v2 - 56));
      v2 = v4[2];
    }
    while (v2 != a2);
  }
  return result;
}

uint64_t *std::__hash_table<std::__hash_value_type<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::Element,int>,std::__unordered_map_hasher<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::Element,std::__hash_value_type<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::Element,int>,fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::ElementKey,fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::ElementEqual,true>,std::__unordered_map_equal<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::Element,std::__hash_value_type<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::Element,int>,fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::ElementEqual,fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::ElementKey,true>,std::allocator<std::__hash_value_type<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::Element,int>>>::find<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::Element>(_QWORD *a1, int *a2)
{
  unint64_t v4;
  int8x8_t v5;
  unint64_t v6;
  uint8x8_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t **v10;
  uint64_t *i;
  unint64_t v12;

  v4 = fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::ElementKey::operator()((uint64_t)(a1 + 3), a2);
  v5 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v5)
    return 0;
  v6 = v4;
  v7 = (uint8x8_t)vcnt_s8(v5);
  v7.i16[0] = vaddlv_u8(v7);
  v8 = v7.u32[0];
  if (v7.u32[0] > 1uLL)
  {
    v9 = v4;
    if (v4 >= *(_QWORD *)&v5)
      v9 = v4 % *(_QWORD *)&v5;
  }
  else
  {
    v9 = (*(_QWORD *)&v5 - 1) & v4;
  }
  v10 = *(uint64_t ***)(*a1 + 8 * v9);
  if (!v10)
    return 0;
  for (i = *v10; i; i = (uint64_t *)*i)
  {
    v12 = i[1];
    if (v12 == v6)
    {
      if (*((_DWORD *)i + 4) == *a2
        && (fst::operator==<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>,fst::GallicUnionWeightOptions<int,fst::TropicalWeightTpl<float>>>((int *)i + 6, (uint64_t)(a2 + 2)) & 1) != 0)
      {
        return i;
      }
    }
    else
    {
      if (v8 > 1)
      {
        if (v12 >= *(_QWORD *)&v5)
          v12 %= *(_QWORD *)&v5;
      }
      else
      {
        v12 &= *(_QWORD *)&v5 - 1;
      }
      if (v12 != v9)
        return 0;
    }
  }
  return i;
}

uint64_t fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::ElementKey::operator()(uint64_t a1, int *a2)
{
  uint64_t v2;
  int v3;
  _DWORD *v4;
  int *v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;

  v2 = 0;
  v3 = *a2;
  v4 = a2 + 2;
  v5 = a2 + 12;
  v6 = *((_QWORD *)a2 + 7);
  if (!*v4)
  {
    if (*((float *)a2 + 10) == -INFINITY)
      return v2 + 7853 * v3;
    goto LABEL_12;
  }
  if (*((_QWORD *)a2 + 4))
    v8 = 0;
  else
    v8 = *v4 == -2;
  if (!v8 && *((float *)a2 + 10) != -INFINITY)
  {
LABEL_12:
    v7 = fst::PairWeight<fst::StringWeight<int,(fst::StringType)1>,fst::LogWeightTpl<float>>::Hash(a2 + 2);
    while (1)
    {
      v2 ^= v7;
      if ((int *)v6 == v5)
        break;
      v7 = fst::PairWeight<fst::StringWeight<int,(fst::StringType)1>,fst::LogWeightTpl<float>>::Hash((int *)(v6 + 16)) ^ (2 * v2);
      v6 = *(_QWORD *)(v6 + 8);
    }
  }
  return v2 + 7853 * v3;
}

uint64_t *std::__hash_table<std::__hash_value_type<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::Element,int>,std::__unordered_map_hasher<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::Element,std::__hash_value_type<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::Element,int>,fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::ElementKey,fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::ElementEqual,true>,std::__unordered_map_equal<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::Element,std::__hash_value_type<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::Element,int>,fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::ElementEqual,fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::ElementKey,true>,std::allocator<std::__hash_value_type<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::Element,int>>>::__emplace_unique_key_args<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::Element,std::pair<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::Element const,int>>(uint64_t a1, int *a2, _DWORD *a3)
{
  unint64_t v3;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  unint64_t v12;
  uint64_t **v13;
  uint64_t *i;
  unint64_t v15;
  float v16;
  float v17;
  _BOOL8 v18;
  unint64_t v19;
  unint64_t v20;
  size_t v21;
  _QWORD *v22;
  unint64_t v23;
  _QWORD v25[3];

  v7 = (_QWORD *)(a1 + 24);
  v8 = fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::ElementKey::operator()(a1 + 24, a2);
  v9 = v8;
  v10 = *(_QWORD *)(a1 + 8);
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      v3 = v8;
      if (v8 >= v10)
        v3 = v8 % v10;
    }
    else
    {
      v3 = (v10 - 1) & v8;
    }
    v13 = *(uint64_t ***)(*(_QWORD *)a1 + 8 * v3);
    if (v13)
    {
      for (i = *v13; i; i = (uint64_t *)*i)
      {
        v15 = i[1];
        if (v15 == v9)
        {
          if (*((_DWORD *)i + 4) == *a2
            && (fst::operator==<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>,fst::GallicUnionWeightOptions<int,fst::TropicalWeightTpl<float>>>((int *)i + 6, (uint64_t)(a2 + 2)) & 1) != 0)
          {
            return i;
          }
        }
        else
        {
          if (v12 > 1)
          {
            if (v15 >= v10)
              v15 %= v10;
          }
          else
          {
            v15 &= v10 - 1;
          }
          if (v15 != v3)
            break;
        }
      }
    }
  }
  std::__hash_table<std::__hash_value_type<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::Element,int>,std::__unordered_map_hasher<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::Element,std::__hash_value_type<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::Element,int>,fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::ElementKey,fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::ElementEqual,true>,std::__unordered_map_equal<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::Element,std::__hash_value_type<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::Element,int>,fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::ElementEqual,fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::ElementKey,true>,std::allocator<std::__hash_value_type<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::Element,int>>>::__construct_node_hash<std::pair<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::Element const,int>>(a1, v9, a3, (uint64_t)v25);
  v16 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v17 = *(float *)(a1 + 32);
  if (!v10 || (float)(v17 * (float)v10) < v16)
  {
    v18 = 1;
    if (v10 >= 3)
      v18 = (v10 & (v10 - 1)) != 0;
    v19 = v18 | (2 * v10);
    v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20)
      v21 = v20;
    else
      v21 = v19;
    std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::__rehash<true>(a1, v21);
    v10 = *(_QWORD *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
        v3 = v9 % v10;
      else
        v3 = v9;
    }
    else
    {
      v3 = (v10 - 1) & v9;
    }
  }
  v22 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v22)
  {
    *(_QWORD *)v25[0] = *v22;
    *v22 = v25[0];
  }
  else
  {
    *(_QWORD *)v25[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v25[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v3) = a1 + 16;
    if (*(_QWORD *)v25[0])
    {
      v23 = *(_QWORD *)(*(_QWORD *)v25[0] + 8);
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v23 >= v10)
          v23 %= v10;
      }
      else
      {
        v23 &= v10 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v23) = v25[0];
    }
  }
  i = (uint64_t *)v25[0];
  ++*v7;
  return i;
}

void sub_1ADC05F78(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t *__p, uint64_t a11)
{
  if (__p)
    std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::Element,int>,void *>>>::operator()[abi:ne180100]((uint64_t)&a11, __p);
  _Unwind_Resume(exception_object);
}

uint64_t std::__hash_table<std::__hash_value_type<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::Element,int>,std::__unordered_map_hasher<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::Element,std::__hash_value_type<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::Element,int>,fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::ElementKey,fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::ElementEqual,true>,std::__unordered_map_equal<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::Element,std::__hash_value_type<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::Element,int>,fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::ElementEqual,fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::ElementKey,true>,std::allocator<std::__hash_value_type<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::Element,int>>>::__construct_node_hash<std::pair<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::Element const,int>>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _DWORD *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  _QWORD *v8;
  uint64_t result;

  v7 = a1 + 16;
  v8 = operator new(0x60uLL);
  *(_QWORD *)a4 = v8;
  *(_QWORD *)(a4 + 8) = v7;
  *(_BYTE *)(a4 + 16) = 0;
  *v8 = 0;
  v8[1] = a2;
  result = std::pair<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::Element const,int>::pair[abi:ne180100]((uint64_t)(v8 + 2), a3);
  *(_BYTE *)(a4 + 16) = 1;
  return result;
}

void sub_1ADC06008(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t *v2;
  uint64_t v3;

  *v1 = 0;
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::Element,int>,void *>>>::operator()[abi:ne180100](v3, v2);
  _Unwind_Resume(a1);
}

uint64_t std::pair<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::Element const,int>::pair[abi:ne180100](uint64_t a1, _DWORD *a2)
{
  *(_DWORD *)a1 = *a2;
  *(_DWORD *)(a1 + 8) = a2[2];
  std::list<int>::list((_QWORD *)(a1 + 16), (uint64_t)(a2 + 4));
  *(_DWORD *)(a1 + 40) = a2[10];
  std::list<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::list((uint64_t *)(a1 + 48), (uint64_t)(a2 + 12));
  *(_DWORD *)(a1 + 72) = a2[18];
  return a1;
}

void sub_1ADC0608C(_Unwind_Exception *a1)
{
  _QWORD *v1;

  std::__list_imp<char *>::clear(v1);
  _Unwind_Resume(a1);
}

void std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::Element,int>,void *>>>::operator()[abi:ne180100](uint64_t a1, uint64_t *__p)
{
  if (*(_BYTE *)(a1 + 8))
  {
    std::__list_imp<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::clear(__p + 8);
    std::__list_imp<char *>::clear(__p + 4);
  }
  if (__p)
    operator delete(__p);
}

uint64_t std::pair<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::Element const,int>::pair[abi:ne180100]<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::Element const&,int &,0>(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  *(_DWORD *)a1 = *a2;
  *(_DWORD *)(a1 + 8) = a2[2];
  std::list<int>::list((_QWORD *)(a1 + 16), (uint64_t)(a2 + 4));
  *(_DWORD *)(a1 + 40) = a2[10];
  std::list<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::list((uint64_t *)(a1 + 48), (uint64_t)(a2 + 12));
  *(_DWORD *)(a1 + 72) = *a3;
  return a1;
}

void sub_1ADC06154(_Unwind_Exception *a1)
{
  _QWORD *v1;

  std::__list_imp<char *>::clear(v1);
  _Unwind_Resume(a1);
}

uint64_t fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::Element::Element(uint64_t a1, int a2, _DWORD *a3)
{
  *(_DWORD *)a1 = a2;
  *(_DWORD *)(a1 + 8) = *a3;
  std::list<int>::list((_QWORD *)(a1 + 16), (uint64_t)(a3 + 2));
  *(_DWORD *)(a1 + 40) = a3[8];
  std::list<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::list((uint64_t *)(a1 + 48), (uint64_t)(a3 + 10));
  return a1;
}

void sub_1ADC061C4(_Unwind_Exception *a1)
{
  _QWORD *v1;

  std::__list_imp<char *>::clear(v1);
  _Unwind_Resume(a1);
}

uint64_t *fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::Final@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  int *v6;
  int *v7;
  int v8;
  float v9;
  _QWORD *v10;
  uint64_t *v11;
  int *v12;
  int v14;
  _QWORD v15[3];
  int v16;
  uint64_t v17[3];
  int v18;
  _QWORD v19[3];
  int v20;
  uint64_t v21[3];
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  char v26;
  uint64_t v27[3];
  int v28;
  _QWORD v29[3];
  int v30;
  uint64_t v31[3];

  if ((fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>::HasFinal(a1, a2) & 1) == 0)
  {
    v6 = (int *)(*(_QWORD *)(a1 + 168) + 72 * a2);
    v8 = *v6;
    v7 = v6 + 2;
    if (v8 == -1)
    {
      v28 = *v7;
      std::list<int>::list(v29, (uint64_t)(v7 + 2));
      v30 = v7[8];
      std::list<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::list(v31, (uint64_t)(v7 + 10));
    }
    else
    {
      (*(void (**)(uint64_t *__return_ptr))(**(_QWORD **)(a1 + 136) + 32))(&v22);
      fst::Times<int,fst::TropicalWeightTpl<float>>(v7, (int *)&v22, (uint64_t)&v28);
      std::__list_imp<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::clear(v27);
      std::__list_imp<char *>::clear(&v23);
    }
    fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>::GallicFactor((uint64_t)&v22, &v28);
    if ((*(_BYTE *)(a1 + 148) & 1) == 0 || v26)
      goto LABEL_12;
    if (v24)
    {
      if (*(_DWORD *)v22 == -2 && !*(_QWORD *)(v22 + 24))
        goto LABEL_12;
      v9 = *(float *)(v22 + 32);
      if (v9 >= -INFINITY && v9 <= -INFINITY)
        goto LABEL_12;
    }
    else if (v25 == v23)
    {
LABEL_12:
      v18 = v28;
      v10 = v19;
      std::list<int>::list(v19, (uint64_t)v29);
      v20 = v30;
      v11 = v21;
      std::list<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::list(v21, (uint64_t)v31);
      fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>::SetFinal(a1, a2, &v18);
LABEL_15:
      std::__list_imp<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::clear(v11);
      std::__list_imp<char *>::clear(v10);
      std::__list_imp<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::clear(v31);
      std::__list_imp<char *>::clear(v29);
      return fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>::Final(a1, a2, a3);
    }
    v12 = (int *)fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>::Zero();
    v14 = *v12;
    v10 = v15;
    std::list<int>::list(v15, (uint64_t)(v12 + 2));
    v16 = v12[8];
    v11 = v17;
    std::list<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::list(v17, (uint64_t)(v12 + 10));
    fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>::SetFinal(a1, a2, &v14);
    goto LABEL_15;
  }
  return fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>::Final(a1, a2, a3);
}

void sub_1ADC063DC(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t *v2;
  uint64_t v3;

  std::__list_imp<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::clear(v2);
  std::__list_imp<char *>::clear(v1);
  std::__list_imp<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::clear((uint64_t *)(v3 - 88));
  std::__list_imp<char *>::clear((_QWORD *)(v3 - 120));
  _Unwind_Resume(a1);
}

uint64_t fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>::GallicFactor(uint64_t result, int *a2)
{
  int v2;
  uint64_t v3;
  BOOL v4;
  BOOL v5;
  float v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;

  *(_QWORD *)result = a2;
  *(_QWORD *)(result + 8) = a2 + 10;
  *(_BYTE *)(result + 16) = 1;
  *(_QWORD *)(result + 24) = *((_QWORD *)a2 + 6);
  v2 = *a2;
  if (*a2)
  {
    v3 = *((_QWORD *)a2 + 3);
    if (v3)
      v4 = 0;
    else
      v4 = v2 == -2;
    v5 = 1;
    if (!v4)
    {
      v6 = *((float *)a2 + 8);
      if (v6 != -INFINITY)
      {
        v7 = *((_QWORD *)a2 + 7);
        if (v7 != -1)
        {
          v5 = 0;
          v8 = !v3 && v2 == -2;
          if (!v8 && v6 != -INFINITY && !v7)
          {
            v9 = *((_QWORD *)a2 + 3);
LABEL_17:
            v5 = (unint64_t)(v9 + 1) < 2;
          }
        }
      }
    }
  }
  else
  {
    v5 = 1;
    if (*((float *)a2 + 8) != -INFINITY)
    {
      v9 = *((_QWORD *)a2 + 7);
      goto LABEL_17;
    }
  }
  *(_BYTE *)(result + 32) = v5;
  return result;
}

unint64_t fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::NumArcs(uint64_t a1, int a2)
{
  uint64_t v4;
  uint64_t v5;

  if ((fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>::HasArcs(a1, a2) & 1) == 0)fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::Expand(a1, a2);
  v4 = *(_QWORD *)(a1 + 120);
  if (*(_DWORD *)(v4 + 76) == a2)
    v5 = v4 + 80;
  else
    v5 = *(_QWORD *)(v4 + 8) + 8 * (a2 + 1);
  return 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(*(_QWORD *)v5 + 88) - *(_QWORD *)(*(_QWORD *)v5 + 80)) >> 4);
}

_QWORD *fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::Expand(uint64_t a1, int a2)
{
  int *v3;
  uint64_t v4;
  int *v5;
  int v6;
  float v7;
  int v8;
  int *v9;
  int v10;
  int v11;
  int v12;
  uint64_t *v13;
  int v15;
  int State;
  int v17;
  int v18;
  uint64_t *MutableState;
  uint64_t v20;
  char v21;
  int v23;
  int v24;
  uint64_t *v25;
  _QWORD *v26;
  _QWORD *v27;
  BOOL v28;
  int v29;
  uint64_t *v30;
  uint64_t *v31;
  _QWORD *v32;
  _QWORD *v33;
  int v34;
  int v35;
  float v37;
  int v39;
  _DWORD v40[8];
  uint64_t v41[3];
  int v42;
  _QWORD v43[4];
  uint64_t v44[3];
  int v45;
  _QWORD v46[3];
  int v47;
  uint64_t v48[3];
  int v49[4];
  _QWORD v50[4];
  uint64_t v51[4];
  int v52;
  _QWORD v53[4];
  uint64_t v54[3];
  uint64_t v55;
  uint64_t v56;
  _QWORD v57[2];
  int v58;
  uint64_t v59;
  uint64_t v60[2];
  uint64_t v61;
  _QWORD v62[4];
  uint64_t v63[3];
  int v64;
  _QWORD v65[3];
  int v66;
  uint64_t v67[3];
  int v68;
  _QWORD v69[3];
  int v70;
  uint64_t v71[3];
  uint64_t v72;
  uint64_t v73;
  unsigned __int8 v74;
  uint64_t v75;
  char v76;
  int v77;
  _QWORD v78[3];
  int v79;
  uint64_t v80[3];
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  unint64_t v85;
  int v86;
  int v87;
  _QWORD v88[3];
  int v89;
  uint64_t v90[4];

  v3 = (int *)(*(_QWORD *)(a1 + 168) + 72 * a2);
  v86 = *v3;
  v87 = v3[2];
  std::list<int>::list(v88, (uint64_t)(v3 + 4));
  v89 = v3[10];
  std::list<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::list(v90, (uint64_t)(v3 + 12));
  if (v86 == -1)
    goto LABEL_39;
  v4 = *(_QWORD *)(a1 + 136);
  v85 = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v4 + 136))(v4);
  while (1)
  {
    if (!v81)
    {
      if (v85 >= v83)
        goto LABEL_37;
LABEL_8:
      v5 = (int *)(v82 + 80 * v85);
      goto LABEL_9;
    }
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v81 + 24))(v81))
      break;
    if (!v81)
      goto LABEL_8;
    v5 = (int *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v81 + 32))(v81);
LABEL_9:
    fst::Times<int,fst::TropicalWeightTpl<float>>(&v87, v5 + 2, (uint64_t)&v77);
    fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>::GallicFactor((uint64_t)&v72, &v77);
    if ((*(_BYTE *)(a1 + 148) & 2) != 0 && !v76)
    {
      v6 = v74;
      if (v74)
      {
        if (*(_DWORD *)v72 != -2 || *(_QWORD *)(v72 + 24))
        {
          v7 = *(float *)(v72 + 32);
          if (v7 < -INFINITY || v7 > -INFINITY)
          {
            while (1)
            {
LABEL_21:
              if (v6)
              {
                if (*(_DWORD *)v72)
                {
                  if (*(_DWORD *)v72 == -2 && *(_QWORD *)(v72 + 24) == 0)
                    goto LABEL_17;
                }
                if (*(float *)(v72 + 32) == -INFINITY)
                  goto LABEL_17;
              }
              else if (v75 == v73)
              {
                goto LABEL_17;
              }
              fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>::Value((uint64_t)&v72, (uint64_t)&v55);
              v15 = v5[18];
              fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>::Quantize((uint64_t)&v61, (uint64_t)&v52, *(float *)(a1 + 144));
              fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::Element::Element((uint64_t)v49, v15, &v52);
              State = fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::FindState(a1, v49);
              std::__list_imp<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::clear(v51);
              std::__list_imp<char *>::clear(v50);
              std::__list_imp<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::clear(v54);
              std::__list_imp<char *>::clear(v53);
              v18 = *v5;
              v17 = v5[1];
              v45 = v55;
              std::list<int>::list(v46, (uint64_t)&v56);
              v47 = v58;
              std::list<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::list(v48, (uint64_t)&v59);
              fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>::GallicArc((uint64_t)v49, v18, v17, &v45, State);
              MutableState = (uint64_t *)fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>>>>::GetMutableState(*(_QWORD *)(a1 + 120), a2);
              fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>::PushArc(MutableState, (uint64_t)v49);
              std::__list_imp<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::clear(v51);
              std::__list_imp<char *>::clear(v50);
              std::__list_imp<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::clear(v48);
              std::__list_imp<char *>::clear(v46);
              std::__list_imp<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::clear(v63);
              std::__list_imp<char *>::clear(v62);
              std::__list_imp<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::clear(&v59);
              std::__list_imp<char *>::clear(&v56);
              if (v74)
                v74 = 0;
              else
                v75 = *(_QWORD *)(v75 + 8);
              v6 = 0;
              if (v76)
                goto LABEL_17;
            }
          }
        }
      }
      else if (v75 != v73)
      {
        goto LABEL_21;
      }
    }
    v8 = v5[18];
    v9 = (int *)fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>::One();
    v68 = *v9;
    std::list<int>::list(v69, (uint64_t)(v9 + 2));
    v70 = v9[8];
    std::list<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::list(v71, (uint64_t)(v9 + 10));
    fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::Element::Element((uint64_t)&v55, v8, &v68);
    v10 = fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::FindState(a1, (int *)&v55);
    std::__list_imp<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::clear(v60);
    std::__list_imp<char *>::clear(v57);
    std::__list_imp<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::clear(v71);
    std::__list_imp<char *>::clear(v69);
    v12 = *v5;
    v11 = v5[1];
    v64 = v77;
    std::list<int>::list(v65, (uint64_t)v78);
    v66 = v79;
    std::list<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::list(v67, (uint64_t)v80);
    fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>::GallicArc((uint64_t)&v55, v12, v11, &v64, v10);
    v13 = (uint64_t *)fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>>>>::GetMutableState(*(_QWORD *)(a1 + 120), a2);
    fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>::PushArc(v13, (uint64_t)&v55);
    std::__list_imp<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::clear(v60);
    std::__list_imp<char *>::clear(v57);
    std::__list_imp<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::clear(v67);
    std::__list_imp<char *>::clear(v65);
LABEL_17:
    std::__list_imp<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::clear(v80);
    std::__list_imp<char *>::clear(v78);
    if (v81)
      (*(void (**)(uint64_t))(*(_QWORD *)v81 + 40))(v81);
    else
      ++v85;
  }
  if (v81)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v81 + 8))(v81);
    goto LABEL_39;
  }
LABEL_37:
  if (v84)
    --*(_DWORD *)v84;
LABEL_39:
  if ((*(_BYTE *)(a1 + 148) & 1) != 0)
  {
    if (v86 == -1)
      goto LABEL_45;
    (*(void (**)(uint64_t *__return_ptr))(**(_QWORD **)(a1 + 136) + 32))(&v55);
    v20 = fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>::Zero();
    v21 = fst::operator==<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>,fst::GallicUnionWeightOptions<int,fst::TropicalWeightTpl<float>>>((int *)&v55, v20);
    std::__list_imp<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::clear(&v59);
    std::__list_imp<char *>::clear(&v56);
    if ((v21 & 1) != 0)
      goto LABEL_42;
    if (v86 == -1)
    {
LABEL_45:
      v77 = v87;
      std::list<int>::list(v78, (uint64_t)v88);
      v79 = v89;
      std::list<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::list(v80, (uint64_t)v90);
    }
    else
    {
      (*(void (**)(uint64_t *__return_ptr))(**(_QWORD **)(a1 + 136) + 32))(&v55);
      fst::Times<int,fst::TropicalWeightTpl<float>>(&v87, (int *)&v55, (uint64_t)&v77);
      std::__list_imp<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::clear(&v59);
      std::__list_imp<char *>::clear(&v56);
    }
    v23 = *(_DWORD *)(a1 + 152);
    v24 = *(_DWORD *)(a1 + 156);
    fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>::GallicFactor((uint64_t)&v81, &v77);
    if (!(_BYTE)v85)
    {
      v25 = v51;
      v26 = v50;
      v27 = v40;
      v28 = (_BYTE)v83 == 0;
      do
      {
        if (v28)
        {
          if (v84 == v82)
            break;
        }
        else
        {
          if (*(_DWORD *)v81)
          {
            if (*(_DWORD *)v81 == -2 && *(_QWORD *)(v81 + 24) == 0)
              break;
          }
          v37 = *(float *)(v81 + 32);
          if (v37 >= -INFINITY && v37 <= -INFINITY)
            break;
        }
        fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>::Value((uint64_t)&v81, (uint64_t)&v55);
        fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>::Quantize((uint64_t)&v61, (uint64_t)&v42, *(float *)(a1 + 144));
        fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::Element::Element((uint64_t)v49, -1, &v42);
        v29 = fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::FindState(a1, v49);
        std::__list_imp<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::clear(v25);
        std::__list_imp<char *>::clear(v26);
        std::__list_imp<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::clear(v44);
        std::__list_imp<char *>::clear(v43);
        v39 = v55;
        std::list<int>::list(v27, (uint64_t)&v56);
        v40[6] = v58;
        std::list<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::list(v41, (uint64_t)&v59);
        fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>::GallicArc((uint64_t)v49, v23, v24, &v39, v29);
        v30 = (uint64_t *)fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>>>>::GetMutableState(*(_QWORD *)(a1 + 120), a2);
        fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>::PushArc(v30, (uint64_t)v49);
        v31 = v25;
        std::__list_imp<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::clear(v25);
        v32 = v26;
        std::__list_imp<char *>::clear(v26);
        std::__list_imp<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::clear(v41);
        v33 = v27;
        std::__list_imp<char *>::clear(v27);
        v34 = *(unsigned __int8 *)(a1 + 160);
        v35 = *(unsigned __int8 *)(a1 + 161);
        std::__list_imp<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::clear(v63);
        std::__list_imp<char *>::clear(v62);
        std::__list_imp<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::clear(&v59);
        std::__list_imp<char *>::clear(&v56);
        if ((_BYTE)v83)
          LOBYTE(v83) = 0;
        else
          v84 = *(_QWORD *)(v84 + 8);
        v23 += v34;
        v24 += v35;
        v28 = 1;
        v27 = v33;
        v26 = v32;
        v25 = v31;
      }
      while (!(_BYTE)v85);
    }
    std::__list_imp<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::clear(v80);
    std::__list_imp<char *>::clear(v78);
  }
LABEL_42:
  fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>::SetArcs(a1, a2);
  std::__list_imp<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::clear(v90);
  return std::__list_imp<char *>::clear(v88);
}

void sub_1ADC06D4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t *a9, _QWORD *a10)
{
  uint64_t v10;

  std::__list_imp<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::clear((uint64_t *)(v10 + 40));
  std::__list_imp<char *>::clear((_QWORD *)(v10 + 8));
  std::__list_imp<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::clear(a9);
  std::__list_imp<char *>::clear(a10);
  _Unwind_Resume(a1);
}

_QWORD *fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>::Value@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  float *v3;
  char v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18[4];
  uint64_t v19[3];
  int v20;
  _QWORD v21[2];
  uint64_t v22;
  int v23;
  uint64_t v24[4];
  int v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  int v33;
  _QWORD v34[2];
  uint64_t v35;
  int v36;
  uint64_t v37[4];
  float v38;
  _QWORD v39[3];
  char v40;
  float v41;
  _QWORD v42[3];
  float v43;

  if (*(_BYTE *)(a1 + 16))
    v3 = *(float **)a1;
  else
    v3 = (float *)(*(_QWORD *)(a1 + 24) + 16);
  v41 = *v3;
  std::list<int>::list(v42, (uint64_t)(v3 + 2));
  v43 = v3[8];
  v38 = v41;
  std::list<int>::list(v39, (uint64_t)v42);
  v5 = v41 == 0.0 || (unint64_t)(v42[2] + 1) < 2;
  v40 = v5;
  fst::StringFactor<int,(fst::StringType)2>::Value((uint64_t)&v38, (uint64_t)&v25);
  v33 = v25;
  v34[0] = v34;
  v34[1] = v34;
  v35 = 0;
  v6 = v28;
  if (v28)
  {
    v8 = v26;
    v7 = v27;
    v9 = *v27;
    *(_QWORD *)(v9 + 8) = *(_QWORD *)(v26 + 8);
    **(_QWORD **)(v8 + 8) = v9;
    v10 = v34[0];
    *(_QWORD *)(v34[0] + 8) = v7;
    *v7 = v10;
    v34[0] = v8;
    *(_QWORD *)(v8 + 8) = v34;
    v35 = v6;
    v28 = 0;
  }
  fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>::GallicWeight((uint64_t)&v36, &v33, v43);
  std::__list_imp<char *>::clear(v34);
  std::__list_imp<char *>::clear(&v30);
  std::__list_imp<char *>::clear(&v26);
  fst::StringFactor<int,(fst::StringType)2>::Value((uint64_t)&v38, (uint64_t)&v25);
  v20 = v29;
  v21[0] = v21;
  v21[1] = v21;
  v22 = 0;
  v11 = v32;
  if (v32)
  {
    v13 = v30;
    v12 = v31;
    v14 = *v31;
    *(_QWORD *)(v14 + 8) = *(_QWORD *)(v30 + 8);
    **(_QWORD **)(v13 + 8) = v14;
    v15 = v21[0];
    *(_QWORD *)(v21[0] + 8) = v12;
    *v12 = v15;
    v21[0] = v13;
    *(_QWORD *)(v13 + 8) = v21;
    v22 = v11;
    v32 = 0;
  }
  fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>::GallicWeight((uint64_t)&v23, &v20, 0.0);
  std::__list_imp<char *>::clear(v21);
  std::__list_imp<char *>::clear(&v30);
  std::__list_imp<char *>::clear(&v26);
  fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>::GallicWeight((uint64_t)&v25, &v36);
  fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>::GallicWeight((uint64_t)&v17, &v23);
  std::pair<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>,fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::pair[abi:ne180100]<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>,fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>,0>(a2, (uint64_t)&v25, (uint64_t)&v17);
  std::__list_imp<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::clear(v19);
  std::__list_imp<char *>::clear(v18);
  std::__list_imp<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::clear(&v30);
  std::__list_imp<char *>::clear(&v26);
  std::__list_imp<char *>::clear(v24);
  std::__list_imp<char *>::clear(v37);
  std::__list_imp<char *>::clear(v39);
  return std::__list_imp<char *>::clear(v42);
}

void sub_1ADC071BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  _QWORD *v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;

  std::__list_imp<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::clear((uint64_t *)(v33 + 40));
  std::__list_imp<char *>::clear((_QWORD *)(v33 + 8));
  std::__list_imp<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::clear(&a31);
  std::__list_imp<char *>::clear(&a27);
  std::__list_imp<char *>::clear(&a22);
  std::__list_imp<char *>::clear((_QWORD *)(v34 - 160));
  std::__list_imp<char *>::clear(v32);
  std::__list_imp<char *>::clear(v31);
  _Unwind_Resume(a1);
}

void sub_1ADC0724C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  _QWORD *v31;

  std::__list_imp<char *>::clear(v31);
  std::__list_imp<char *>::clear(&a31);
  JUMPOUT(0x1ADC07230);
}

void sub_1ADC0726C()
{
  JUMPOUT(0x1ADC07234);
}

void sub_1ADC07274()
{
  JUMPOUT(0x1ADC0723CLL);
}

_QWORD *std::pair<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>,fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::~pair(_QWORD *a1)
{
  std::__list_imp<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::clear(a1 + 13);
  std::__list_imp<char *>::clear(a1 + 9);
  std::__list_imp<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::clear(a1 + 5);
  std::__list_imp<char *>::clear(a1 + 1);
  return a1;
}

uint64_t std::pair<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>,fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::pair[abi:ne180100]<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>,fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>,0>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  std::list<int>::list((_QWORD *)(a1 + 8), a2 + 8);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = a1 + 40;
  *(_QWORD *)(a1 + 48) = a1 + 40;
  *(_QWORD *)(a1 + 56) = 0;
  std::list<std::pair<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntryCE>>::splice(a1 + 40, (uint64_t *)(a1 + 40), (_QWORD *)(a2 + 40));
  *(_DWORD *)(a1 + 64) = *(_DWORD *)a3;
  std::list<int>::list((_QWORD *)(a1 + 72), a3 + 8);
  *(_DWORD *)(a1 + 96) = *(_DWORD *)(a3 + 32);
  *(_QWORD *)(a1 + 104) = a1 + 104;
  *(_QWORD *)(a1 + 112) = a1 + 104;
  *(_QWORD *)(a1 + 120) = 0;
  std::list<std::pair<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntryCE>>::splice(a1 + 104, (uint64_t *)(a1 + 104), (_QWORD *)(a3 + 40));
  return a1;
}

void sub_1ADC07360(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t *v2;

  std::__list_imp<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::clear(v2);
  std::__list_imp<char *>::clear(v1);
  _Unwind_Resume(a1);
}

uint64_t fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::NumInputEpsilons(uint64_t a1, int a2)
{
  uint64_t v4;
  uint64_t v5;

  if ((fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>::HasArcs(a1, a2) & 1) == 0)fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::Expand(a1, a2);
  v4 = *(_QWORD *)(a1 + 120);
  if (*(_DWORD *)(v4 + 76) == a2)
    v5 = v4 + 80;
  else
    v5 = *(_QWORD *)(v4 + 8) + 8 * (a2 + 1);
  return *(_QWORD *)(*(_QWORD *)v5 + 64);
}

uint64_t fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::NumOutputEpsilons(uint64_t a1, int a2)
{
  uint64_t v4;
  uint64_t v5;

  if ((fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>::HasArcs(a1, a2) & 1) == 0)fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::Expand(a1, a2);
  v4 = *(_QWORD *)(a1 + 120);
  if (*(_DWORD *)(v4 + 76) == a2)
    v5 = v4 + 80;
  else
    v5 = *(_QWORD *)(v4 + 8) + 8 * (a2 + 1);
  return *(_QWORD *)(*(_QWORD *)v5 + 72);
}

_QWORD *fst::ImplToFst<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>,fst::Fst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>::ImplToFst(_QWORD *a1, uint64_t a2, int a3)
{
  uint64_t v5;
  uint64_t v6;

  *a1 = &unk_1E5D27108;
  if (a3)
  {
    v5 = operator new();
    fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::FactorWeightFstImpl(v5, *(_QWORD *)(a2 + 8));
    a1[1] = v5;
  }
  else
  {
    v6 = *(_QWORD *)(a2 + 8);
    a1[1] = v6;
    ++*(_DWORD *)(v6 + 56);
  }
  return a1;
}

void sub_1ADC074BC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10F3C40B21EFC33);
  _Unwind_Resume(a1);
}

uint64_t fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::FactorWeightFstImpl(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  int v6;
  __int16 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  std::string __str;

  *(_QWORD *)fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>::CacheBaseImpl(a1, a2, 0) = &unk_1E5D21A10;
  v4 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a2 + 136) + 88))(*(_QWORD *)(a2 + 136), 1);
  v5 = *(_DWORD *)(a2 + 144);
  *(_QWORD *)(a1 + 148) = *(_QWORD *)(a2 + 148);
  v6 = *(_DWORD *)(a2 + 156);
  v7 = *(_WORD *)(a2 + 160);
  *(_OWORD *)(a1 + 168) = 0u;
  *(_QWORD *)(a1 + 136) = v4;
  *(_DWORD *)(a1 + 144) = v5;
  *(_DWORD *)(a1 + 156) = v6;
  *(_WORD *)(a1 + 160) = v7;
  *(_QWORD *)(a1 + 216) = 0;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_DWORD *)(a1 + 224) = 1065353216;
  *(_QWORD *)(a1 + 232) = 0;
  *(_QWORD *)(a1 + 240) = 0;
  *(_QWORD *)(a1 + 248) = 0;
  std::string::basic_string[abi:ne180100]<0>(&__str, "factor_weight");
  std::string::operator=((std::string *)(a1 + 16), &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a1 + 8) & 0xFFFFC0000000FFFFLL | (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2) & 0x3FFFFFFF0004;
  v8 = *(_QWORD *)(a2 + 40);
  v9 = *(_QWORD *)(a1 + 40);
  if (v9 != v8)
  {
    if (v9)
      (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
    if (v8)
      v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 16))(v8);
    else
      v10 = 0;
    *(_QWORD *)(a1 + 40) = v10;
  }
  v11 = *(_QWORD *)(a2 + 48);
  v12 = *(_QWORD *)(a1 + 48);
  if (v12 != v11)
  {
    if (v12)
      (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
    if (v11)
      v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 16))(v11);
    else
      v13 = 0;
    *(_QWORD *)(a1 + 48) = v13;
  }
  return a1;
}

void sub_1ADC07668(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  _QWORD *v15;
  void *v16;
  void **v17;
  void *v19;

  if (a15 < 0)
    operator delete(__p);
  v19 = *v17;
  if (*v17)
  {
    v15[30] = v19;
    operator delete(v19);
  }
  std::__hash_table<std::__hash_value_type<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::Element,int>,std::__unordered_map_hasher<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::Element,std::__hash_value_type<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::Element,int>,fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::ElementKey,fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::ElementEqual,true>,std::__unordered_map_equal<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::Element,std::__hash_value_type<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::Element,int>,fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::ElementEqual,fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::ElementKey,true>,std::allocator<std::__hash_value_type<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::Element,int>>>::~__hash_table((uint64_t)v16 + 24);
  __p = v16;
  std::vector<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::Element,std::allocator<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::Element>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>::~CacheBaseImpl(v15);
  _Unwind_Resume(a1);
}

void fst::StateIterator<fst::FactorWeightFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>>::~StateIterator()
{
  JUMPOUT(0x1AF44D190);
}

uint64_t fst::CacheStateIterator<fst::FactorWeightFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>>::Value_(uint64_t a1)
{
  return *(unsigned int *)(a1 + 24);
}

uint64_t fst::CacheStateIterator<fst::FactorWeightFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>>::Next_(uint64_t result)
{
  ++*(_DWORD *)(result + 24);
  return result;
}

uint64_t fst::CacheStateIterator<fst::FactorWeightFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>>::Reset_(uint64_t result)
{
  *(_DWORD *)(result + 24) = 0;
  return result;
}

void fst::CacheStateIterator<fst::FactorWeightFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>>::~CacheStateIterator()
{
  JUMPOUT(0x1AF44D190);
}

uint64_t fst::CacheStateIterator<fst::FactorWeightFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>>::Done(uint64_t a1)
{
  int v2;
  uint64_t v3;
  _BOOL8 v4;
  int v5;
  int v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  int v11;
  int *v12;
  int v13;
  int v14;
  int v15;
  uint64_t v16;
  int v17;
  uint64_t v19;
  unint64_t v20;

  v2 = *(_DWORD *)(a1 + 24);
  v3 = *(_QWORD *)(a1 + 16);
  if (v2 < *(_DWORD *)(v3 + 68))
    return 0;
  v5 = fst::CacheBaseImpl<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>,fst::DefaultCacheStore<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::MinUnexpandedState(v3);
  if (v5 >= *(_DWORD *)(*(_QWORD *)(a1 + 16) + 68))
    return 1;
  v6 = v5;
  do
  {
    fst::ArcIterator<fst::FactorWeightFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>>::ArcIterator(&v19, *(_QWORD *)(a1 + 8), v6);
    v7 = v20;
    v8 = *(_QWORD *)(v19 + 80);
    v9 = 0xCCCCCCCCCCCCCCCDLL * ((*(_QWORD *)(v19 + 88) - v8) >> 4);
    v10 = *(_QWORD *)(a1 + 16);
    if (v20 < v9)
    {
      v11 = *(_DWORD *)(v10 + 68);
      v12 = (int *)(v8 + 80 * v20 + 72);
      do
      {
        v14 = *v12;
        v12 += 20;
        v13 = v14;
        if (v11 <= v14)
        {
          v11 = v13 + 1;
          *(_DWORD *)(v10 + 68) = v13 + 1;
        }
        ++v7;
      }
      while (v9 != v7);
      v20 = v9;
    }
    fst::CacheBaseImpl<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>,fst::DefaultCacheStore<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::SetExpandedState(v10, v6);
    v15 = *(_DWORD *)(a1 + 24);
    v16 = *(_QWORD *)(a1 + 16);
    v17 = *(_DWORD *)(v16 + 68);
    --*(_DWORD *)(v19 + 108);
    v4 = v15 >= v17;
    if (v15 < v17)
      break;
    v6 = fst::CacheBaseImpl<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>,fst::DefaultCacheStore<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::MinUnexpandedState(v16);
  }
  while (v6 < *(_DWORD *)(*(_QWORD *)(a1 + 16) + 68));
  return v4;
}

void sub_1ADC07844(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  --*(_DWORD *)(a9 + 108);
  _Unwind_Resume(a1);
}

_QWORD *fst::ArcIterator<fst::FactorWeightFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>>::ArcIterator(_QWORD *a1, uint64_t a2, int a3)
{
  uint64_t v6;
  _DWORD *MutableState;

  v6 = *(_QWORD *)(a2 + 8);
  a1[1] = 0;
  MutableState = fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>>>>::GetMutableState(*(_QWORD *)(v6 + 120), a3);
  *a1 = MutableState;
  ++MutableState[27];
  if ((fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>::HasArcs(*(_QWORD *)(a2 + 8), a3) & 1) == 0)fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::Expand(*(_QWORD *)(a2 + 8), a3);
  return a1;
}

void sub_1ADC078C8(_Unwind_Exception *a1)
{
  uint64_t v1;

  --*(_DWORD *)(*(_QWORD *)v1 + 108);
  _Unwind_Resume(a1);
}

uint64_t fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::InitArcIterator(uint64_t a1, int a2, _QWORD *a3)
{
  if ((fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>::HasArcs(a1, a2) & 1) == 0)fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::Expand(a1, a2);
  return fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>::InitArcIterator(a1, a2, a3);
}

_QWORD *fst::ArcMapFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FromGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>::ArcMapFst(_QWORD *a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v6;
  char v8[8];
  uint64_t v9;

  v6 = operator new();
  v8[0] = 1;
  v9 = 0;
  fst::ArcMapFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FromGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>::ArcMapFstImpl(v6, a2, a3, (uint64_t)v8);
  *a1 = &unk_1E5D23928;
  a1[1] = v6;
  return a1;
}

void sub_1ADC079A8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10F3C40777B4A47);
  _Unwind_Resume(a1);
}

_QWORD *fst::ArcMapFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FromGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>::~ArcMapFst(_QWORD *a1)
{
  _DWORD *v2;
  int v3;

  *a1 = &unk_1E5D24850;
  v2 = (_DWORD *)a1[1];
  if (v2)
  {
    v3 = v2[14] - 1;
    v2[14] = v3;
    if (!v3)
      (*(void (**)(_DWORD *))(*(_QWORD *)v2 + 8))(v2);
  }
  return a1;
}

void fst::ArcMapFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FromGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>::~ArcMapFst(_QWORD *a1)
{
  _DWORD *v1;
  int v2;

  *a1 = &unk_1E5D24850;
  v1 = (_DWORD *)a1[1];
  if (v1)
  {
    v2 = v1[14] - 1;
    v1[14] = v2;
    if (!v2)
      (*(void (**)(_DWORD *))(*(_QWORD *)v1 + 8))(v1);
  }
  JUMPOUT(0x1AF44D190);
}

uint64_t fst::ImplToFst<fst::ArcMapFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FromGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::HasSequentialStates(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8));
}

uint64_t fst::ImplToFst<fst::ArcMapFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FromGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Start(uint64_t a1)
{
  return fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::StdToLatticeMapper<float>>::Start(*(_QWORD *)(a1 + 8));
}

float fst::ImplToFst<fst::ArcMapFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FromGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Final(uint64_t a1, int a2)
{
  return fst::ArcMapFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FromGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>::Final(*(_QWORD *)(a1 + 8), a2);
}

uint64_t fst::ImplToFst<fst::ArcMapFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FromGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::NumArcs(uint64_t a1, int a2)
{
  return fst::ArcMapFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FromGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>::NumArcs(*(_QWORD *)(a1 + 8), a2);
}

uint64_t fst::ImplToFst<fst::ArcMapFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FromGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::NumInputEpsilons(uint64_t a1, int a2)
{
  return fst::ArcMapFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FromGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>::NumInputEpsilons(*(_QWORD *)(a1 + 8), a2);
}

uint64_t fst::ImplToFst<fst::ArcMapFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FromGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::NumOutputEpsilons(uint64_t a1, int a2)
{
  return fst::ArcMapFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FromGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>::NumOutputEpsilons(*(_QWORD *)(a1 + 8), a2);
}

uint64_t fst::ImplToFst<fst::ArcMapFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FromGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Properties(uint64_t a1, uint64_t a2, int a3)
{
  unint64_t v5;
  uint64_t v7;

  if (!a3)
    return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 8) + 32))(*(_QWORD *)(a1 + 8), a2);
  v7 = 0;
  v5 = fst::TestProperties<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>(a1, a2, &v7);
  *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) & (~v7 | 4) | v7 & v5;
  return v5 & a2;
}

uint64_t fst::ImplToFst<fst::ArcMapFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FromGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Type(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8) + 16;
}

_QWORD *fst::ArcMapFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FromGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>::Copy(uint64_t a1, int a2)
{
  _QWORD *v4;

  v4 = (_QWORD *)operator new();
  fst::ImplToFst<fst::ArcMapFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FromGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::ImplToFst(v4, a1, a2);
  *v4 = &unk_1E5D23928;
  return v4;
}

void sub_1ADC07BB4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0xA1C40BD48D6D6);
  _Unwind_Resume(a1);
}

uint64_t fst::ImplToFst<fst::ArcMapFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FromGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::InputSymbols(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 8) + 40);
}

uint64_t fst::ImplToFst<fst::ArcMapFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FromGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::OutputSymbols(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 8) + 48);
}

uint64_t fst::ArcMapFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FromGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>::InitStateIterator(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t result;

  v4 = operator new();
  result = fst::StateIterator<fst::ArcMapFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FromGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>::StateIterator(v4, a1);
  *a2 = v4;
  return result;
}

void sub_1ADC07C40(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10E1C40E7AEC4CDLL);
  _Unwind_Resume(a1);
}

uint64_t fst::ArcMapFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FromGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>::InitArcIterator(uint64_t a1, int a2, _QWORD *a3)
{
  return fst::ArcMapFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FromGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>::InitArcIterator(*(_QWORD *)(a1 + 8), a2, a3);
}

uint64_t fst::ArcMapFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FromGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>::ArcMapFstImpl(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4)
{
  _QWORD *v7;

  *(_QWORD *)fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::CacheBaseImpl(a1, a4) = &unk_1E5D1B560;
  *(_QWORD *)(a1 + 136) = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 88))(a2, 0);
  v7 = (_QWORD *)operator new();
  *v7 = *a3;
  *(_QWORD *)(a1 + 144) = v7;
  *(_BYTE *)(a1 + 152) = 1;
  *(_QWORD *)(a1 + 160) = 0xFFFFFFFFLL;
  fst::ArcMapFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FromGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>::Init(a1);
  return a1;
}

void sub_1ADC07D08(_Unwind_Exception *a1)
{
  _QWORD *v1;

  fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::~CacheBaseImpl(v1);
  _Unwind_Resume(a1);
}

uint64_t fst::ArcMapFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FromGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>::Init(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  std::string __str;

  std::string::basic_string[abi:ne180100]<0>(&__str, "map");
  std::string::operator=((std::string *)(a1 + 16), &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  v2 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 136) + 112))(*(_QWORD *)(a1 + 136));
  v3 = *(_QWORD *)(a1 + 40);
  if (v3 != v2)
  {
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
    if (v2)
      v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 16))(v2);
    else
      v4 = 0;
    *(_QWORD *)(a1 + 40) = v4;
  }
  v5 = *(_QWORD *)(a1 + 48);
  if (v5)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
    *(_QWORD *)(a1 + 48) = 0;
  }
  result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 136) + 24))(*(_QWORD *)(a1 + 136));
  if ((_DWORD)result == -1)
  {
    *(_DWORD *)(a1 + 156) = 0;
    *(_QWORD *)(a1 + 8) = *(_QWORD *)(a1 + 8) & 4 | 0x156A5A950000;
  }
  else
  {
    *(_DWORD *)(a1 + 156) = 1;
    result = (*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(**(_QWORD **)(a1 + 136) + 64))(*(_QWORD *)(a1 + 136), 0x3FFFFFFF0004, 0);
    if (*(_BYTE *)(*(_QWORD *)(a1 + 144) + 4))
      v7 = result & 0x2EBC21080003 | 4;
    else
      v7 = result & 0x2EBC21080007;
    *(_QWORD *)(a1 + 8) = *(_QWORD *)(a1 + 8) & 4 | v7;
    if (*(_DWORD *)(a1 + 156) == 2)
      *(_DWORD *)(a1 + 160) = 0;
  }
  return result;
}

void sub_1ADC07E74(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void fst::ArcMapFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FromGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>::~ArcMapFstImpl(uint64_t a1)
{
  fst::ArcMapFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FromGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>::~ArcMapFstImpl(a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t fst::ArcMapFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FromGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>::Properties(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 32))(a1, 0x3FFFFFFF0007);
}

uint64_t fst::ArcMapFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FromGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>::Properties(uint64_t a1, uint64_t a2)
{
  if ((a2 & 4) != 0
    && ((*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(**(_QWORD **)(a1 + 136) + 64))(*(_QWORD *)(a1 + 136), 4, 0)|| *(_BYTE *)(*(_QWORD *)(a1 + 144) + 4)))
  {
    *(_QWORD *)(a1 + 8) |= 4uLL;
  }
  return *(_QWORD *)(a1 + 8) & a2;
}

uint64_t fst::ArcMapFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FromGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>::~ArcMapFstImpl(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)a1 = &unk_1E5D1B560;
  v2 = *(_QWORD *)(a1 + 136);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  if (*(_BYTE *)(a1 + 152))
  {
    v3 = *(_QWORD *)(a1 + 144);
    if (v3)
      MEMORY[0x1AF44D190](v3, 0x1000C4090D0E795);
  }
  return fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::~CacheBaseImpl((_QWORD *)a1);
}

float fst::ArcMapFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FromGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>::Final(uint64_t a1, int a2)
{
  int v4;
  float v5;
  char *MutableState;
  int v7;
  int *v8;
  int v9;
  _BOOL4 v11;
  unint64_t v12;
  int v13;
  int v14;
  fst *v15;
  _QWORD *v16;
  int *v17;
  _BOOL4 v19;
  unint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  _QWORD v26[4];
  uint64_t v27[3];
  char v28;
  uint64_t v29;
  _QWORD v30[4];
  uint64_t v31[3];
  void *__p[2];
  _QWORD v33[4];
  uint64_t v34[4];

  if ((fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::HasFinal(a1, a2) & 1) != 0)goto LABEL_33;
  v4 = *(_DWORD *)(a1 + 156);
  if (v4 != 1)
  {
    if (v4 == 2)
    {
      if (*(_DWORD *)(a1 + 160) == a2)
        v5 = 0.0;
      else
        v5 = INFINITY;
      MutableState = fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>::GetMutableState(*(_QWORD *)(a1 + 120), a2);
      *(float *)MutableState = v5;
      goto LABEL_32;
    }
    v8 = *(int **)(a1 + 144);
    v9 = *(_DWORD *)(a1 + 160);
    v11 = v9 != -1 && v9 <= a2;
    (*(void (**)(uint64_t *__return_ptr, _QWORD, _QWORD))(**(_QWORD **)(a1 + 136) + 32))(&v29, *(_QWORD *)(a1 + 136), (a2 - v11));
    fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>::GallicArc((uint64_t)__p, 0, 0, &v29, -1);
    v12 = fst::FromGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>::operator()(v8, __p);
    v14 = v13;
    std::__list_imp<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::clear(v34);
    std::__list_imp<char *>::clear(v33);
    std::__list_imp<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::clear(v31);
    std::__list_imp<char *>::clear(v30);
    if (v12)
    {
      if (FLAGS_fst_error_fatal)
        std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
      else
        std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
      v15 = fst::LogMessage::LogMessage((fst *)&v28, (uint64_t)__p);
      v16 = (_QWORD *)fst::cerr(v15);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"ArcMapFst: non-zero arc labels for superfinal arc", 49);
      fst::LogMessage::~LogMessage((fst::LogMessage *)&v28);
      if (SHIBYTE(v33[0]) < 0)
        operator delete(__p[0]);
      *(_QWORD *)(a1 + 8) |= 4uLL;
    }
    goto LABEL_31;
  }
  v7 = *(_DWORD *)(a1 + 160);
  if (v7 == a2)
  {
    MutableState = fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>::GetMutableState(*(_QWORD *)(a1 + 120), a2);
    *(_DWORD *)MutableState = 0;
  }
  else
  {
    v17 = *(int **)(a1 + 144);
    v19 = v7 != -1 && v7 <= a2;
    (*(void (**)(uint64_t *__return_ptr, _QWORD, _QWORD))(**(_QWORD **)(a1 + 136) + 32))(&v25, *(_QWORD *)(a1 + 136), (a2 - v19));
    fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>::GallicArc((uint64_t)__p, 0, 0, &v25, -1);
    v20 = fst::FromGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>::operator()(v17, __p);
    v14 = v21;
    std::__list_imp<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::clear(v34);
    std::__list_imp<char *>::clear(v33);
    std::__list_imp<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::clear(v27);
    std::__list_imp<char *>::clear(v26);
    if (!v20)
    {
LABEL_31:
      MutableState = fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>::GetMutableState(*(_QWORD *)(a1 + 120), a2);
      *(_DWORD *)MutableState = v14;
      goto LABEL_32;
    }
    MutableState = fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>::GetMutableState(*(_QWORD *)(a1 + 120), a2);
    *(_DWORD *)MutableState = 2139095040;
  }
LABEL_32:
  *((_DWORD *)MutableState + 12) |= 9u;
LABEL_33:
  v22 = *(_QWORD *)(a1 + 120);
  if (*(_DWORD *)(v22 + 76) == a2)
    v23 = v22 + 80;
  else
    v23 = *(_QWORD *)(v22 + 8) + 8 * (a2 + 1);
  return **(float **)v23;
}

void sub_1ADC08224(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  fst::LogMessage::~LogMessage((fst::LogMessage *)&a21);
  if (a35 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

unint64_t fst::FromGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>::operator()(int *a1, _DWORD *a2)
{
  uint64_t v4;
  unint64_t v5;
  unsigned int v6;
  fst *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  void *__p[2];
  char v15;
  char v16;
  unsigned int v17;
  unsigned int v18;

  if (a2[18] == -1
    && (v4 = fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>::Zero(),
        fst::operator==<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>,fst::GallicUnionWeightOptions<int,fst::TropicalWeightTpl<float>>>(a2 + 2, v4)))
  {
    v5 = 0;
    v6 = *a2;
  }
  else
  {
    v18 = -1;
    if (!fst::FromGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>::Extract((uint64_t)(a2 + 2), &v17, &v18)|| (v6 = *a2, *a2 != a2[1]))
    {
      if (FLAGS_fst_error_fatal)
        std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
      else
        std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
      v7 = fst::LogMessage::LogMessage((fst *)&v16, (uint64_t)__p);
      v8 = (_QWORD *)fst::cerr(v7);
      v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"FromGallicMapper: unrepresentable weight: ", 42);
      v10 = fst::operator<<<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>,fst::GallicUnionWeightOptions<int,fst::TropicalWeightTpl<float>>>(v9, (uint64_t)(a2 + 2));
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)" for arc with ilabel = ", 23);
      v11 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)", olabel = ", 11);
      v12 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)", nextstate = ", 14);
      std::ostream::operator<<();
      fst::LogMessage::~LogMessage((fst::LogMessage *)&v16);
      if (v15 < 0)
        operator delete(__p[0]);
      *((_BYTE *)a1 + 4) = 1;
      v6 = *a2;
    }
    if (!v6 && v18 && a2[18] == -1)
      v6 = *a1;
    v5 = (unint64_t)v18 << 32;
  }
  return v5 | v6;
}

void sub_1ADC08454(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, int a16, __int16 a17, char a18, char a19)
{
  fst::LogMessage::~LogMessage((fst::LogMessage *)&a19);
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t fst::FromGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>::Extract(uint64_t a1, unsigned int *a2, unsigned int *a3)
{
  unsigned int v3;
  float v4;
  BOOL v6;
  BOOL v8;
  uint64_t v9;

  v3 = *(_DWORD *)a1;
  if (*(_DWORD *)a1)
  {
    v4 = *(float *)(a1 + 32);
    if (v3 == -2 && *(_QWORD *)(a1 + 24) == 0)
    {
      v6 = 1;
LABEL_13:
      v8 = v3 == -2 && v6;
      if (v8 || v4 == -INFINITY)
        goto LABEL_22;
      goto LABEL_18;
    }
    if (v4 == -INFINITY || (unint64_t)(*(_QWORD *)(a1 + 56) - 1) >= 0xFFFFFFFFFFFFFFFELL)
    {
      v6 = *(_QWORD *)(a1 + 24) == 0;
      goto LABEL_13;
    }
    return 0;
  }
  if (*(float *)(a1 + 32) == -INFINITY)
  {
LABEL_22:
    *a3 = 0;
    *a2 = 2139095040;
    return 1;
  }
  if ((unint64_t)(*(_QWORD *)(a1 + 56) - 1) < 0xFFFFFFFFFFFFFFFELL)
    return 0;
LABEL_18:
  v9 = *(_QWORD *)(a1 + 56);
  if (v9 == -1)
    goto LABEL_22;
  if (v9)
    a1 = *(_QWORD *)(a1 + 40) + 16;
  return fst::FromGallicMapper<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>::Extract<(fst::GallicType)1>((unsigned int *)a1, a2, a3);
}

_QWORD *fst::operator<<<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>,fst::GallicUnionWeightOptions<int,fst::TropicalWeightTpl<float>>>(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  BOOL v6;
  uint64_t v7;
  BOOL v8;
  float v9;
  const char *v10;
  uint64_t v11;
  char v13;
  BOOL v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  _QWORD *v21[2];
  char v22;

  v4 = *(_QWORD *)(a2 + 48);
  v5 = *(_DWORD *)a2;
  if (!*(_DWORD *)a2)
  {
    v9 = *(float *)(a2 + 32);
    if (v9 < -INFINITY || v9 > -INFINITY)
      goto LABEL_7;
LABEL_23:
    v10 = "EmptySet";
    v11 = 8;
    return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)v10, v11);
  }
  if (*(_QWORD *)(a2 + 24))
    v6 = 0;
  else
    v6 = v5 == -2;
  if (v6 || *(float *)(a2 + 32) == -INFINITY)
    goto LABEL_23;
LABEL_7:
  v7 = a2 + 40;
  if ((unint64_t)(*(_QWORD *)(a2 + 56) + 1) >= 2)
  {
    v13 = 0;
    v16 = v5 != -2 || *(_QWORD *)(a2 + 24) != 0 || v5 == 0;
    v17 = *(_QWORD *)(a2 + 48);
    while (1)
    {
      v18 = v13;
      if ((v13 & 1) != 0)
      {
        v19 = v17 + 16;
        if (v17 == v7)
          goto LABEL_8;
      }
      else
      {
        v19 = a2;
        if (!v16)
          goto LABEL_8;
      }
      if (*(_DWORD *)v19)
      {
        if (*(_DWORD *)v19 == -2 && *(_QWORD *)(v19 + 24) == 0)
          break;
      }
      if (*(float *)(v19 + 32) == -INFINITY)
        break;
      v13 = 1;
      if ((v18 & 1) != 0)
        v17 = *(_QWORD *)(v17 + 8);
    }
    v10 = "BadSet";
    v11 = 6;
    return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)v10, v11);
  }
LABEL_8:
  fst::CompositeWeightWriter::CompositeWeightWriter((uint64_t)v21, a1);
  if (*FLAGS_fst_weight_parentheses)
  {
    v22 = *FLAGS_fst_weight_parentheses;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21[0], (uint64_t)&v22, 1);
  }
  if (*(_DWORD *)a2)
  {
    if (*(_QWORD *)(a2 + 24))
      v8 = 0;
    else
      v8 = *(_DWORD *)a2 == -2;
    if (v8 || *(float *)(a2 + 32) == -INFINITY)
      goto LABEL_24;
  }
  else if (*(float *)(a2 + 32) == -INFINITY)
  {
    goto LABEL_24;
  }
  fst::CompositeWeightWriter::WriteElement<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>((uint64_t)v21, a2);
  while (v4 != v7)
  {
    fst::CompositeWeightWriter::WriteElement<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>((uint64_t)v21, v4 + 16);
    v4 = *(_QWORD *)(v4 + 8);
  }
LABEL_24:
  if (*FLAGS_fst_weight_parentheses)
  {
    v22 = *(_BYTE *)(FLAGS_fst_weight_parentheses + 1);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21[0], (uint64_t)&v22, 1);
  }
  return a1;
}

_QWORD *fst::CompositeWeightWriter::WriteElement<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>(uint64_t a1, uint64_t a2)
{
  int v4;
  _QWORD *v5;
  _QWORD *result;
  _QWORD *v7[2];
  char v8;

  v4 = *(_DWORD *)(a1 + 8);
  *(_DWORD *)(a1 + 8) = v4 + 1;
  if (v4 >= 1)
  {
    v5 = *(_QWORD **)a1;
    LOBYTE(v7[0]) = *FLAGS_fst_weight_separator;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)v7, 1);
  }
  fst::CompositeWeightWriter::CompositeWeightWriter((uint64_t)v7, *(_QWORD **)a1);
  if (*FLAGS_fst_weight_parentheses)
  {
    v8 = *FLAGS_fst_weight_parentheses;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7[0], (uint64_t)&v8, 1);
  }
  fst::CompositeWeightWriter::WriteElement<fst::StringWeight<int,(fst::StringType)1>>((uint64_t)v7, (int *)a2);
  result = fst::CompositeWeightWriter::WriteElement<fst::LogWeightTpl<float>>((uint64_t)v7, (float *)(a2 + 32));
  if (*FLAGS_fst_weight_parentheses)
  {
    v8 = *(_BYTE *)(FLAGS_fst_weight_parentheses + 1);
    return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7[0], (uint64_t)&v8, 1);
  }
  return result;
}

uint64_t fst::ArcMapFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FromGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>::NumArcs(uint64_t a1, int a2)
{
  uint64_t v4;
  uint64_t v5;

  if ((fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::HasArcs(a1, a2) & 1) == 0)fst::ArcMapFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FromGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>::Expand(a1, a2);
  v4 = *(_QWORD *)(a1 + 120);
  if (*(_DWORD *)(v4 + 76) == a2)
    v5 = v4 + 80;
  else
    v5 = *(_QWORD *)(v4 + 8) + 8 * (a2 + 1);
  return (uint64_t)(*(_QWORD *)(*(_QWORD *)v5 + 32) - *(_QWORD *)(*(_QWORD *)v5 + 24)) >> 4;
}

void fst::ArcMapFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FromGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>::Expand(uint64_t a1, int a2)
{
  int v4;
  uint64_t v5;
  _BOOL4 v7;
  uint64_t v8;
  int v9;
  int v10;
  uint64_t v12;
  char *MutableState;
  int v14;
  int *v15;
  int v16;
  BOOL v17;
  _BOOL4 v18;
  unint64_t v19;
  uint64_t v20;
  int v21;
  char *v22;
  unint64_t *v23;
  int *v24;
  int v25;
  _BOOL4 v27;
  unint64_t v28;
  float v29;
  float v30;
  int v31;
  uint64_t v32;
  uint64_t v33[4];
  uint64_t v34[3];
  uint64_t v35;
  uint64_t v36[4];
  uint64_t v37[3];
  __int128 v38;
  unint64_t v39;
  float v40;
  int v41;
  _QWORD v42[3];
  int v43;
  uint64_t v44[3];
  int v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t v48;
  _DWORD *v49;
  unint64_t v50;

  v4 = *(_DWORD *)(a1 + 160);
  if (v4 == a2)
  {
    fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::SetArcs(a1, a2);
    return;
  }
  v5 = *(_QWORD *)(a1 + 136);
  v7 = v4 != -1 && v4 <= a2;
  v50 = 0;
  (*(void (**)(uint64_t, _QWORD, unint64_t *))(*(_QWORD *)v5 + 136))(v5, (a2 - v7), &v46);
  while (1)
  {
    if (!v46)
    {
      if (v50 >= v48)
        goto LABEL_28;
      goto LABEL_15;
    }
    if ((*(unsigned int (**)(unint64_t))(*(_QWORD *)v46 + 24))(v46))
      break;
    if (v46)
    {
      v8 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)v46 + 32))(v46);
      goto LABEL_16;
    }
LABEL_15:
    v8 = v47 + 80 * v50;
LABEL_16:
    v39 = *(_QWORD *)v8;
    v40 = *(float *)(v8 + 8);
    std::list<int>::list(v42, v8 + 16);
    v43 = *(_DWORD *)(v8 + 40);
    std::list<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::list(v44, v8 + 48);
    v9 = *(_DWORD *)(v8 + 72);
    v10 = *(_DWORD *)(a1 + 160);
    if (v10 != -1 && v10 <= v9)
      ++v9;
    if (v9 >= *(_DWORD *)(a1 + 164))
      *(_DWORD *)(a1 + 164) = v9 + 1;
    v45 = v9;
    *(_QWORD *)&v38 = fst::FromGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>::operator()(*(int **)(a1 + 144), &v39);
    *((_QWORD *)&v38 + 1) = v12;
    MutableState = fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>::GetMutableState(*(_QWORD *)(a1 + 120), a2);
    fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::PushArc(MutableState, &v38);
    std::__list_imp<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::clear(v44);
    std::__list_imp<char *>::clear(v42);
    if (v46)
      (*(void (**)(unint64_t))(*(_QWORD *)v46 + 40))(v46);
    else
      ++v50;
  }
  if (v46)
  {
    (*(void (**)(unint64_t))(*(_QWORD *)v46 + 8))(v46);
    goto LABEL_30;
  }
LABEL_28:
  if (v49)
    --*v49;
LABEL_30:
  if ((fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::HasFinal(a1, a2) & 1) == 0|| (LODWORD(v39) = fst::ArcMapFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FromGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>::Final(a1, a2), LODWORD(v46) = 2139095040, *(float *)&v39 == INFINITY))
  {
    v14 = *(_DWORD *)(a1 + 156);
    if (v14 == 2)
    {
      v24 = *(int **)(a1 + 144);
      v25 = *(_DWORD *)(a1 + 160);
      v27 = v25 != -1 && v25 <= a2;
      (*(void (**)(uint64_t *__return_ptr, _QWORD, _QWORD))(**(_QWORD **)(a1 + 136) + 32))(&v32, *(_QWORD *)(a1 + 136), (a2 - v27));
      fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>::GallicArc((uint64_t)&v39, 0, 0, &v32, -1);
      v28 = fst::FromGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>::operator()(v24, &v39);
      v30 = v29;
      std::__list_imp<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::clear(v44);
      std::__list_imp<char *>::clear(v42);
      std::__list_imp<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::clear(v34);
      std::__list_imp<char *>::clear(v33);
      if (v28 || (*(float *)&v39 = v30, LODWORD(v46) = 2139095040, v30 != INFINITY))
      {
        v31 = *(_DWORD *)(a1 + 160);
        v39 = v28;
        v40 = v30;
        v41 = v31;
        v22 = fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>::GetMutableState(*(_QWORD *)(a1 + 120), a2);
        v23 = &v39;
        goto LABEL_53;
      }
    }
    else if (v14 == 1)
    {
      v15 = *(int **)(a1 + 144);
      v16 = *(_DWORD *)(a1 + 160);
      v17 = v16 != -1 && v16 <= a2;
      v18 = v17;
      (*(void (**)(uint64_t *__return_ptr, _QWORD, _QWORD))(**(_QWORD **)(a1 + 136) + 32))(&v35, *(_QWORD *)(a1 + 136), (a2 - v18));
      fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>::GallicArc((uint64_t)&v39, 0, 0, &v35, -1);
      v19 = fst::FromGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>::operator()(v15, &v39);
      v46 = v19;
      v47 = v20;
      std::__list_imp<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::clear(v44);
      std::__list_imp<char *>::clear(v42);
      std::__list_imp<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::clear(v37);
      std::__list_imp<char *>::clear(v36);
      if (v19)
      {
        v21 = *(_DWORD *)(a1 + 160);
        if (v21 == -1)
        {
          v21 = *(_DWORD *)(a1 + 164);
          *(_DWORD *)(a1 + 160) = v21;
          *(_DWORD *)(a1 + 164) = v21 + 1;
        }
        HIDWORD(v47) = v21;
        v22 = fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>::GetMutableState(*(_QWORD *)(a1 + 120), a2);
        v23 = &v46;
LABEL_53:
        fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::PushArc(v22, v23);
      }
    }
  }
  fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::SetArcs(a1, a2);
}

void sub_1ADC08C94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v3;
  uint64_t v5;
  va_list va;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v5 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  std::__list_imp<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::clear((uint64_t *)(v3 + 48));
  std::__list_imp<char *>::clear((_QWORD *)(v3 + 16));
  std::__list_imp<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::clear((uint64_t *)va1);
  std::__list_imp<char *>::clear((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t fst::ArcMapFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FromGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>::NumInputEpsilons(uint64_t a1, int a2)
{
  uint64_t v4;
  uint64_t v5;

  if ((fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::HasArcs(a1, a2) & 1) == 0)fst::ArcMapFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FromGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>::Expand(a1, a2);
  v4 = *(_QWORD *)(a1 + 120);
  if (*(_DWORD *)(v4 + 76) == a2)
    v5 = v4 + 80;
  else
    v5 = *(_QWORD *)(v4 + 8) + 8 * (a2 + 1);
  return *(_QWORD *)(*(_QWORD *)v5 + 8);
}

uint64_t fst::ArcMapFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FromGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>::NumOutputEpsilons(uint64_t a1, int a2)
{
  uint64_t v4;
  uint64_t v5;

  if ((fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::HasArcs(a1, a2) & 1) == 0)fst::ArcMapFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FromGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>::Expand(a1, a2);
  v4 = *(_QWORD *)(a1 + 120);
  if (*(_DWORD *)(v4 + 76) == a2)
    v5 = v4 + 80;
  else
    v5 = *(_QWORD *)(v4 + 8) + 8 * (a2 + 1);
  return *(_QWORD *)(*(_QWORD *)v5 + 16);
}

_QWORD *fst::ImplToFst<fst::ArcMapFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FromGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::ImplToFst(_QWORD *a1, uint64_t a2, int a3)
{
  uint64_t v5;
  uint64_t v6;

  *a1 = &unk_1E5D24850;
  if (a3)
  {
    v5 = operator new();
    fst::ArcMapFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FromGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>::ArcMapFstImpl(v5, *(_QWORD *)(a2 + 8));
    a1[1] = v5;
  }
  else
  {
    v6 = *(_QWORD *)(a2 + 8);
    a1[1] = v6;
    ++*(_DWORD *)(v6 + 56);
  }
  return a1;
}

void sub_1ADC08E8C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10F3C40777B4A47);
  _Unwind_Resume(a1);
}

uint64_t fst::ArcMapFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FromGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>::ArcMapFstImpl(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;

  *(_QWORD *)fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::CacheBaseImpl(a1, a2, 0) = &unk_1E5D1B560;
  *(_QWORD *)(a1 + 136) = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a2 + 136) + 88))(*(_QWORD *)(a2 + 136), 1);
  v4 = (_QWORD *)operator new();
  *v4 = **(_QWORD **)(a2 + 144);
  *(_QWORD *)(a1 + 144) = v4;
  *(_BYTE *)(a1 + 152) = 1;
  *(_QWORD *)(a1 + 160) = 0xFFFFFFFFLL;
  fst::ArcMapFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FromGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>::Init(a1);
  return a1;
}

void sub_1ADC08F44(_Unwind_Exception *a1)
{
  _QWORD *v1;

  fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::~CacheBaseImpl(v1);
  _Unwind_Resume(a1);
}

uint64_t fst::StateIterator<fst::ArcMapFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FromGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>::StateIterator(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = &unk_1E5D1CC28;
  *(_QWORD *)(a1 + 8) = v3;
  v4 = a1 + 16;
  v5 = *(_QWORD *)(v3 + 136);
  *(_DWORD *)(a1 + 32) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 128))(v5, v4);
  *(_DWORD *)(a1 + 40) = 0;
  *(_BYTE *)(a1 + 44) = *(_DWORD *)(*(_QWORD *)(a1 + 8) + 156) == 2;
  fst::StateIterator<fst::ArcMapFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FromGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>::CheckSuperfinal(a1);
  return a1;
}

void sub_1ADC08FC8(_Unwind_Exception *exception_object)
{
  _QWORD *v1;

  if (*v1)
    (*(void (**)(_QWORD))(*(_QWORD *)*v1 + 8))(*v1);
  _Unwind_Resume(exception_object);
}

uint64_t fst::StateIterator<fst::ArcMapFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FromGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>::CheckSuperfinal(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  int *v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD v6[4];
  uint64_t v7[3];
  _DWORD v8[4];
  _QWORD v9[4];
  uint64_t v10[4];

  v1 = *(_QWORD *)(result + 8);
  if (*(_DWORD *)(v1 + 156) == 1)
  {
    v2 = result;
    if (!*(_BYTE *)(result + 44))
    {
      result = *(_QWORD *)(result + 16);
      if (result)
      {
        result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 16))(result);
        if ((result & 1) != 0)
          return result;
        v1 = *(_QWORD *)(v2 + 8);
      }
      else if (*(_DWORD *)(v2 + 32) >= *(_DWORD *)(v2 + 24))
      {
        return result;
      }
      v3 = *(int **)(v1 + 144);
      (*(void (**)(uint64_t *__return_ptr, _QWORD, _QWORD))(**(_QWORD **)(v1 + 136) + 32))(&v5, *(_QWORD *)(v1 + 136), *(unsigned int *)(v2 + 40));
      fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>::GallicArc((uint64_t)v8, 0, 0, &v5, -1);
      v4 = fst::FromGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>::operator()(v3, v8);
      std::__list_imp<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::clear(v10);
      std::__list_imp<char *>::clear(v9);
      std::__list_imp<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::clear(v7);
      result = (uint64_t)std::__list_imp<char *>::clear(v6);
      if (v4)
        *(_BYTE *)(v2 + 44) = 1;
    }
  }
  return result;
}

void sub_1ADC090D4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  std::__list_imp<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::clear((uint64_t *)(v2 + 48));
  std::__list_imp<char *>::clear((_QWORD *)(v2 + 16));
  std::__list_imp<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::clear((uint64_t *)va1);
  std::__list_imp<char *>::clear((uint64_t *)va);
  _Unwind_Resume(a1);
}

_QWORD *fst::StateIterator<fst::ArcMapFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FromGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>::~StateIterator(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &unk_1E5D1CC28;
  v2 = a1[2];
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void fst::StateIterator<fst::ArcMapFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FromGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>::~StateIterator(_QWORD *a1)
{
  uint64_t v1;

  *a1 = &unk_1E5D1CC28;
  v1 = a1[2];
  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  JUMPOUT(0x1AF44D190);
}

BOOL fst::StateIterator<fst::ArcMapFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FromGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>::Done_(uint64_t a1)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2)
  {
    if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 16))(v2) & 1) != 0)
      return *(_BYTE *)(a1 + 44) == 0;
  }
  else if (*(_DWORD *)(a1 + 32) >= *(_DWORD *)(a1 + 24))
  {
    return *(_BYTE *)(a1 + 44) == 0;
  }
  return 0;
}

uint64_t fst::StateIterator<fst::ArcMapFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FromGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>::Value_(uint64_t a1)
{
  return *(unsigned int *)(a1 + 40);
}

uint64_t fst::StateIterator<fst::ArcMapFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FromGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>::Next(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;

  ++*(_DWORD *)(a1 + 40);
  result = *(_QWORD *)(a1 + 16);
  if (result)
  {
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 16))(result);
    if ((result & 1) == 0)
    {
      v3 = *(_QWORD *)(a1 + 16);
      if (v3)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v3 + 32))(v3);
        return fst::StateIterator<fst::ArcMapFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FromGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>::CheckSuperfinal(a1);
      }
LABEL_6:
      ++*(_DWORD *)(a1 + 32);
      return fst::StateIterator<fst::ArcMapFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FromGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>::CheckSuperfinal(a1);
    }
  }
  else if (*(_DWORD *)(a1 + 32) < *(_DWORD *)(a1 + 24))
  {
    goto LABEL_6;
  }
  if (*(_BYTE *)(a1 + 44))
    *(_BYTE *)(a1 + 44) = 0;
  return result;
}

uint64_t fst::StateIterator<fst::ArcMapFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FromGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>::Reset(uint64_t a1)
{
  uint64_t v2;

  *(_DWORD *)(a1 + 40) = 0;
  v2 = *(_QWORD *)(a1 + 16);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2);
  else
    *(_DWORD *)(a1 + 32) = 0;
  *(_BYTE *)(a1 + 44) = *(_DWORD *)(*(_QWORD *)(a1 + 8) + 156) == 2;
  return fst::StateIterator<fst::ArcMapFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FromGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>::CheckSuperfinal(a1);
}

uint64_t fst::ArcMapFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FromGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>::InitArcIterator(uint64_t a1, int a2, _QWORD *a3)
{
  if ((fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::HasArcs(a1, a2) & 1) == 0)fst::ArcMapFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FromGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>::Expand(a1, a2);
  return fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::InitArcIterator(a1, a2, a3);
}

uint64_t fst::DeterminizeFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4,fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>,fst::DefaultDeterminizeFilter<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::DefaultDeterminizeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>>>::~DeterminizeFstImpl(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  *a1 = &unk_1E5D20D98;
  v2 = a1[20];
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  *a1 = &unk_1E5D21F70;
  v3 = a1[17];
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::~CacheBaseImpl(a1);
}

uint64_t fst::DeterminizeFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4,fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>,fst::DefaultDeterminizeFilter<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::DefaultDeterminizeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>>>::DeterminizeFstImpl(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = fst::DeterminizeFstImplBase<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::DeterminizeFstImplBase(a1, a2);
  *(_QWORD *)v4 = &unk_1E5D20D98;
  *(_DWORD *)(v4 + 144) = *(_DWORD *)(a2 + 144);
  *(_DWORD *)(v4 + 148) = *(_DWORD *)(a2 + 148);
  *(_BYTE *)(v4 + 152) = *(_BYTE *)(a2 + 152);
  fst::DeterminizeFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4,fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>,fst::DefaultDeterminizeFilter<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::DefaultDeterminizeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>>>::Init(v4, *(_QWORD *)(v4 + 136), 0);
  return a1;
}

void sub_1ADC09400(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t v3;

  *v1 = &unk_1E5D21F70;
  v3 = v1[17];
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::~CacheBaseImpl(v1);
  _Unwind_Resume(a1);
}

char **fst::ArcIterator<fst::ArcMapFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FromGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>::ArcIterator(char **a1, uint64_t a2, int a3)
{
  uint64_t v6;
  char *MutableState;

  v6 = *(_QWORD *)(a2 + 8);
  a1[1] = 0;
  MutableState = fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>::GetMutableState(*(_QWORD *)(v6 + 120), a3);
  *a1 = MutableState;
  ++*((_DWORD *)MutableState + 13);
  if ((fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::HasArcs(*(_QWORD *)(a2 + 8), a3) & 1) == 0)fst::ArcMapFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FromGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>::Expand(*(_QWORD *)(a2 + 8), a3);
  return a1;
}

void sub_1ADC094A8(_Unwind_Exception *a1)
{
  uint64_t v1;

  --*(_DWORD *)(*(_QWORD *)v1 + 52);
  _Unwind_Resume(a1);
}

_QWORD *fst::DeterminizeFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::DeterminizeFst(_QWORD *a1, uint64_t a2, int a3)
{
  _DWORD *v4;
  _DWORD *v5;
  int v6;

  *a1 = &unk_1E5D1DED8;
  a1[1] = 0;
  v4 = *(_DWORD **)(a2 + 8);
  if (a3)
  {
    v4 = (_DWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v4 + 40))(*(_QWORD *)(a2 + 8));
    v5 = (_DWORD *)a1[1];
    if (v5)
    {
      v6 = v5[14] - 1;
      v5[14] = v6;
      if (!v6)
        (*(void (**)(_DWORD *))(*(_QWORD *)v5 + 8))(v5);
    }
  }
  else
  {
    ++v4[14];
  }
  a1[1] = v4;
  return a1;
}

void sub_1ADC09540(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  uint64_t v3;

  *v1 = &unk_1E5D275D8;
  v3 = v1[1];
  if (v3)
    fst::ComposeFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::ComposeFst(v3);
  _Unwind_Resume(exception_object);
}

void fst::StateIterator<fst::DeterminizeFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::~StateIterator()
{
  JUMPOUT(0x1AF44D190);
}

uint64_t fst::CacheStateIterator<fst::DeterminizeFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Value_(uint64_t a1)
{
  return *(unsigned int *)(a1 + 24);
}

uint64_t fst::CacheStateIterator<fst::DeterminizeFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Next_(uint64_t result)
{
  ++*(_DWORD *)(result + 24);
  return result;
}

uint64_t fst::CacheStateIterator<fst::DeterminizeFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Reset_(uint64_t result)
{
  *(_DWORD *)(result + 24) = 0;
  return result;
}

void fst::CacheStateIterator<fst::DeterminizeFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::~CacheStateIterator()
{
  JUMPOUT(0x1AF44D190);
}

uint64_t fst::CacheStateIterator<fst::DeterminizeFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Done(uint64_t a1)
{
  int v2;
  uint64_t v3;
  _BOOL8 v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  int *v13;
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  int v18;
  char *v20;
  unint64_t v21;

  v2 = *(_DWORD *)(a1 + 24);
  v3 = *(_QWORD *)(a1 + 16);
  if (v2 < *(_DWORD *)(v3 + 68))
    return 0;
  v5 = fst::CacheBaseImpl<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>,fst::DefaultCacheStore<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::MinUnexpandedState(v3);
  if ((int)v5 >= *(_DWORD *)(*(_QWORD *)(a1 + 16) + 68))
    return 1;
  v6 = v5;
  do
  {
    fst::ArcIterator<fst::DeterminizeFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::ArcIterator(&v20, *(_QWORD *)(a1 + 8), v6);
    v7 = v21;
    v8 = *((_QWORD *)v20 + 3);
    v9 = *((_QWORD *)v20 + 4) - v8;
    v10 = *(_QWORD *)(a1 + 16);
    if (v21 < v9 >> 4)
    {
      v11 = v9 >> 4;
      v12 = *(_DWORD *)(v10 + 68);
      v13 = (int *)(v8 + 16 * v21 + 12);
      do
      {
        v15 = *v13;
        v13 += 4;
        v14 = v15;
        if (v12 <= v15)
        {
          v12 = v14 + 1;
          *(_DWORD *)(v10 + 68) = v14 + 1;
        }
        ++v7;
      }
      while (v11 != v7);
      v21 = v11;
    }
    fst::CacheBaseImpl<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>,fst::DefaultCacheStore<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::SetExpandedState(v10, v6);
    v16 = *(_DWORD *)(a1 + 24);
    v17 = *(_QWORD *)(a1 + 16);
    v18 = *(_DWORD *)(v17 + 68);
    --*((_DWORD *)v20 + 13);
    v4 = v16 >= v18;
    if (v16 < v18)
      break;
    v6 = fst::CacheBaseImpl<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>,fst::DefaultCacheStore<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::MinUnexpandedState(v17);
  }
  while ((int)v6 < *(_DWORD *)(*(_QWORD *)(a1 + 16) + 68));
  return v4;
}

void sub_1ADC096CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  --*(_DWORD *)(a9 + 52);
  _Unwind_Resume(a1);
}

char **fst::ArcIterator<fst::DeterminizeFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::ArcIterator(char **a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  char *MutableState;

  v6 = *(_QWORD *)(a2 + 8);
  a1[1] = 0;
  MutableState = fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>::GetMutableState(*(_QWORD *)(v6 + 120), a3);
  *a1 = MutableState;
  ++*((_DWORD *)MutableState + 13);
  if ((fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::HasArcs(*(_QWORD *)(a2 + 8), a3) & 1) == 0)(*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a2 + 8) + 48))(*(_QWORD *)(a2 + 8), a3);
  return a1;
}

void sub_1ADC09758(_Unwind_Exception *a1)
{
  uint64_t v1;

  --*(_DWORD *)(*(_QWORD *)v1 + 52);
  _Unwind_Resume(a1);
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>,fst::MutableFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>::SetProperties(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t result;

  v6 = a3 & 4;
  result = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 8) + 32))(*(_QWORD *)(a1 + 8), v6);
  if (result != (v6 & a2))
    result = fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>,fst::MutableFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>::MutateCheck(a1);
  *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) & (~a3 | 4) | a3 & a2;
  return result;
}

void fst::Push<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>(uint64_t *a1, int a2, int a3, float a4)
{
  _DWORD *v7;
  int v8;
  _QWORD v9[3];
  int v10;
  int v11;
  _QWORD v12[3];
  int v13;
  void **v14;
  uint64_t v15[3];
  int v16;
  uint64_t v17[3];

  memset(v17, 0, sizeof(v17));
  fst::ShortestDistance<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>((uint64_t)a1, v17, a2 == 0, a4);
  v7 = (_DWORD *)fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>::One();
  LODWORD(v14) = *v7;
  std::list<int>::list(v15, (uint64_t)(v7 + 2));
  v16 = v7[8];
  if (a3)
  {
    fst::ComputeTotalWeight<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>((uint64_t)a1, v17, a2 == 0, (uint64_t)&v11);
    LODWORD(v14) = v11;
    std::list<int>::__assign_with_sentinel[abi:ne180100]<std::__list_const_iterator<int,void *>,std::__list_const_iterator<int,void *>>(v15, v12[1], (uint64_t)v12);
    v16 = v13;
    std::__list_imp<char *>::clear(v12);
  }
  fst::Reweight<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>(a1, v17, a2);
  if (a3)
  {
    v8 = (int)v14;
    std::list<int>::list(v9, (uint64_t)v15);
    v10 = v16;
    fst::RemoveWeight<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>((uint64_t)a1, (uint64_t)&v8, a2 == 1);
    std::__list_imp<char *>::clear(v9);
  }
  std::__list_imp<char *>::clear(v15);
  v14 = (void **)v17;
  std::vector<fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)0>>::__destroy_vector::operator()[abi:ne180100](&v14);
}

void sub_1ADC0991C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void **a19)
{
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;

  std::__list_imp<char *>::clear(v20);
  std::__list_imp<char *>::clear(v19);
  a19 = (void **)(v21 - 72);
  std::vector<fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)0>>::__destroy_vector::operator()[abi:ne180100](&a19);
  _Unwind_Resume(a1);
}

void fst::AcceptorMinimize<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>(_QWORD *a1)
{
  fst *v2;
  _QWORD *v3;
  fst *v4;
  _QWORD *v5;
  fst *v6;
  _QWORD *v7;
  _QWORD *v8;
  _OWORD v9[2];
  void *__p[2];
  _OWORD v11[16];
  void **v12;

  if ((*(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(*a1 + 64))(a1, 0x200010000, 1))
  {
    fst::Connect<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>((uint64_t)a1);
    if ((*(unsigned int (**)(_QWORD *))(*a1 + 160))(a1))
    {
      if ((*(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(*a1 + 64))(a1, 0x800000000, 1))
      {
        if (FLAGS_v >= 2)
        {
          std::string::basic_string[abi:ne180100]<0>(__p, "INFO");
          v2 = fst::LogMessage::LogMessage((fst *)&v12, (uint64_t)__p);
          v3 = (_QWORD *)fst::cerr(v2);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"Acyclic Minimization", 20);
          fst::LogMessage::~LogMessage((fst::LogMessage *)&v12);
          if (SBYTE7(v11[0]) < 0)
            operator delete(__p[0]);
        }
        fst::ArcSort<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,fst::ILabelCompare<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>((uint64_t)a1);
        fst::AcyclicMinimizer<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>::AcyclicMinimizer((uint64_t)__p, a1);
        fst::MergeStates<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>(__p, (uint64_t)a1);
        fst::Partition<int>::~Partition(__p);
      }
      else
      {
        if (FLAGS_v >= 2)
        {
          std::string::basic_string[abi:ne180100]<0>(__p, "INFO");
          v6 = fst::LogMessage::LogMessage((fst *)&v12, (uint64_t)__p);
          v7 = (_QWORD *)fst::cerr(v6);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"Cyclic Minimization", 19);
          fst::LogMessage::~LogMessage((fst::LogMessage *)&v12);
          if (SBYTE7(v11[0]) < 0)
            operator delete(__p[0]);
        }
        fst::CyclicMinimizer<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,fst::LifoQueue<int>>::CyclicMinimizer((uint64_t)__p, (uint64_t)a1);
        fst::MergeStates<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>(__p, (uint64_t)a1);
        fst::CyclicMinimizer<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,fst::LifoQueue<int>>::~CyclicMinimizer(__p);
      }
      __p[0] = a1;
      memset(v11, 0, 32);
      v8 = a1;
      memset(v9, 0, sizeof(v9));
      fst::StateMap<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,fst::ArcUniqueMapper<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>((uint64_t)a1, (uint64_t *)&v8);
      v12 = (void **)v9;
      std::vector<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>::__destroy_vector::operator()[abi:ne180100](&v12);
      v12 = (void **)v11;
      std::vector<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>::__destroy_vector::operator()[abi:ne180100](&v12);
    }
  }
  else
  {
    if (FLAGS_fst_error_fatal)
      std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
    else
      std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
    v4 = fst::LogMessage::LogMessage((fst *)&v12, (uint64_t)__p);
    v5 = (_QWORD *)fst::cerr(v4);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"FST is not an unweighted acceptor", 33);
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v12);
    if (SBYTE7(v11[0]) < 0)
      operator delete(__p[0]);
    (*(void (**)(_QWORD *, uint64_t, uint64_t))(*a1 + 192))(a1, 4, 4);
  }
}

void sub_1ADC09BC8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *fst::FactorWeightFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>>::~FactorWeightFst(_QWORD *a1)
{
  _DWORD *v2;
  int v3;

  *a1 = &unk_1E5D26EF8;
  v2 = (_DWORD *)a1[1];
  if (v2)
  {
    v3 = v2[14] - 1;
    v2[14] = v3;
    if (!v3)
      (*(void (**)(_DWORD *))(*(_QWORD *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t fst::ArcMap<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::GallicToNewSymbolsMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  _BOOL8 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD v19[3];
  int v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  _DWORD *v24;
  unint64_t v25;
  int v26;
  int v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  unsigned int v32;

  (*(void (**)(uint64_t))(*(_QWORD *)a2 + 224))(a2);
  v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 112))(a1);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 280))(a2, v6);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 288))(a2, 0);
  v7 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 64))(a1, 0x3FFFFFFF0004, 0);
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  if ((_DWORD)result == -1)
  {
    if ((v7 & 4) != 0)
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 192))(a2, 4, 4);
    return result;
  }
  if ((*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 64))(a1, 1, 0))
  {
    v9 = fst::CountStates<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>(a1) != -1;
    (*(void (**)(uint64_t, _BOOL8))(*(_QWORD *)a2 + 248))(a2, v9);
  }
  LODWORD(v23) = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 128))(a1, &v21);
  while (!v21)
  {
    if ((int)v23 >= (int)v22)
      goto LABEL_14;
LABEL_9:
    (*(void (**)(uint64_t))(*(_QWORD *)a2 + 200))(a2);
    if (v21)
      (*(void (**)(uint64_t))(*(_QWORD *)v21 + 32))(v21);
    else
      LODWORD(v23) = v23 + 1;
  }
  if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v21 + 16))(v21))
    goto LABEL_9;
  if (v21)
    (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
LABEL_14:
  v32 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 128))(a1, &v30);
  LODWORD(v10) = -1;
  while (2)
  {
    if (!v30)
    {
      if ((int)v32 >= v31)
        goto LABEL_47;
      goto LABEL_20;
    }
    if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v30 + 16))(v30))
    {
      if (v30)
      {
        v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v30 + 24))(v30);
        goto LABEL_21;
      }
LABEL_20:
      v11 = v32;
LABEL_21:
      if ((_DWORD)v11 == (*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1))
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 176))(a2, v11);
      v12 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 40))(a1, v11);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 256))(a2, v11, v12);
      v25 = 0;
      (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(_QWORD *)a1 + 136))(a1, v11, &v21);
LABEL_24:
      if (v21)
      {
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v21 + 24))(v21))
        {
          if (v21)
          {
            (*(void (**)(void))(*(_QWORD *)v21 + 8))();
            goto LABEL_37;
          }
LABEL_35:
          if (v24)
            --*v24;
LABEL_37:
          (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)a1 + 32))(&v18, a1, v11);
          v21 = 0;
          LODWORD(v22) = v18;
          std::list<int>::list(&v23, (uint64_t)v19);
          v26 = v20;
          v27 = -1;
          v28 = fst::GallicToNewSymbolsMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>::operator()((_QWORD *)a3, (int *)&v21);
          v29 = v15;
          std::__list_imp<char *>::clear(&v23);
          std::__list_imp<char *>::clear(v19);
          if (v28)
          {
            if ((_DWORD)v10 == -1)
            {
              v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 200))(a2);
              (*(void (**)(uint64_t, uint64_t, float))(*(_QWORD *)a2 + 184))(a2, v10, 0.0);
            }
            HIDWORD(v29) = v10;
            (*(void (**)(uint64_t, uint64_t, unint64_t *))(*(_QWORD *)a2 + 208))(a2, v11, &v28);
            (*(void (**)(uint64_t, uint64_t, float))(*(_QWORD *)a2 + 184))(a2, v11, INFINITY);
          }
          else
          {
            (*(void (**)(uint64_t, uint64_t, float))(*(_QWORD *)a2 + 184))(a2, v11, *(float *)&v29);
          }
          if (v30)
            (*(void (**)(uint64_t))(*(_QWORD *)v30 + 32))(v30);
          else
            ++v32;
          continue;
        }
        if (v21)
        {
          v13 = (int *)(*(uint64_t (**)(void))(*(_QWORD *)v21 + 32))();
          goto LABEL_30;
        }
      }
      else if (v25 >= v23)
      {
        goto LABEL_35;
      }
      v13 = (int *)(v22 + 56 * v25);
LABEL_30:
      v28 = fst::GallicToNewSymbolsMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>::operator()((_QWORD *)a3, v13);
      v29 = v14;
      (*(void (**)(uint64_t, uint64_t, unint64_t *))(*(_QWORD *)a2 + 208))(a2, v11, &v28);
      if (v21)
        (*(void (**)(uint64_t))(*(_QWORD *)v21 + 40))(v21);
      else
        ++v25;
      goto LABEL_24;
    }
    break;
  }
  if (v30)
    (*(void (**)(uint64_t))(*(_QWORD *)v30 + 8))(v30);
LABEL_47:
  v16 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, 0x3FFFFFFF0007, 0);
  v17 = v7 & 0x2EBC21080007;
  if (*(_BYTE *)(a3 + 72))
    v17 = v7 & 0x2EBC21080003 | 4;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 192))(a2, v17 | v16, 0x3FFFFFFF0007);
}

void sub_1ADC0A1C0(_Unwind_Exception *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v5;

  std::__list_imp<char *>::clear(v2);
  std::__list_imp<char *>::clear(v1);
  v5 = *(_QWORD *)(v3 - 104);
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  _Unwind_Resume(a1);
}

_QWORD *fst::VectorFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>::~VectorFst(_QWORD *a1)
{
  _DWORD *v2;
  int v3;

  *a1 = &unk_1E5D25E40;
  v2 = (_DWORD *)a1[1];
  if (v2)
  {
    v3 = v2[14] - 1;
    v2[14] = v3;
    if (!v3)
      (*(void (**)(_DWORD *))(*(_QWORD *)v2 + 8))(v2);
  }
  return a1;
}

_QWORD *fst::VectorFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>::VectorFst(_QWORD *a1)
{
  uint64_t v2;

  v2 = operator new();
  fst::VectorFstImpl<fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>::VectorFstImpl(v2);
  *a1 = &unk_1E5D290F0;
  a1[1] = v2;
  return a1;
}

void sub_1ADC0A2FC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10B3C40637D23BDLL);
  _Unwind_Resume(a1);
}

void fst::VectorFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>::~VectorFst(_QWORD *a1)
{
  _DWORD *v1;
  int v2;

  *a1 = &unk_1E5D25E40;
  v1 = (_DWORD *)a1[1];
  if (v1)
  {
    v2 = v1[14] - 1;
    v1[14] = v2;
    if (!v2)
      (*(void (**)(_DWORD *))(*(_QWORD *)v1 + 8))(v1);
  }
  JUMPOUT(0x1AF44D190);
}

uint64_t fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>,fst::MutableFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>::HasSequentialStates(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8));
}

uint64_t fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>,fst::MutableFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>::Start(uint64_t a1)
{
  return *(unsigned int *)(*(_QWORD *)(a1 + 8) + 88);
}

_QWORD *fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>,fst::MutableFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>::Final@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  _DWORD *v4;
  _QWORD *result;

  v4 = *(_DWORD **)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 64) + 8 * a2);
  *(_DWORD *)a3 = *v4;
  result = std::list<int>::list((_QWORD *)(a3 + 8), (uint64_t)(v4 + 2));
  *(_DWORD *)(a3 + 32) = v4[8];
  return result;
}

uint64_t fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>,fst::MutableFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>::NumArcs(uint64_t a1, int a2)
{
  return 0x6DB6DB6DB6DB6DB7
       * ((uint64_t)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 64) + 8 * a2) + 64)
                  - *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 64) + 8 * a2) + 56)) >> 3);
}

uint64_t fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>,fst::MutableFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>::NumInputEpsilons(uint64_t a1, int a2)
{
  return *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 64) + 8 * a2) + 40);
}

uint64_t fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>,fst::MutableFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>::NumOutputEpsilons(uint64_t a1, int a2)
{
  return *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 64) + 8 * a2) + 48);
}

uint64_t fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>,fst::MutableFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>::Properties(uint64_t a1, uint64_t a2, int a3)
{
  unint64_t v5;
  uint64_t v7;

  if (!a3)
    return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 8) + 32))(*(_QWORD *)(a1 + 8), a2);
  v7 = 0;
  v5 = fst::TestProperties<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>(a1, a2, &v7);
  *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) & (~v7 | 4) | v7 & v5;
  return v5 & a2;
}

uint64_t fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>,fst::MutableFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>::Type(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8) + 16;
}

void fst::Fst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>::GetArcs(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  fst::ArcBuffer<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>::SetFromFst<fst::Fst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>(a3, a1, a2, a4, 2);
}

_QWORD *fst::VectorFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>::Copy(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = (_QWORD *)operator new();
  v3 = *(_QWORD *)(a1 + 8);
  ++*(_DWORD *)(v3 + 56);
  *result = &unk_1E5D290F0;
  result[1] = v3;
  return result;
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>,fst::MutableFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>::InputSymbols(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 8) + 40);
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>,fst::MutableFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>::OutputSymbols(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 8) + 48);
}

uint64_t fst::VectorFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>::InitStateIterator(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *(_QWORD *)a2 = 0;
  *(_DWORD *)(a2 + 8) = (*(_QWORD *)(v2 + 72) - *(_QWORD *)(v2 + 64)) >> 3;
  return result;
}

uint64_t fst::VectorFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>::InitArcIterator(uint64_t result, int a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;

  v3 = *(_QWORD *)(result + 8);
  *a3 = 0;
  v5 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)(v3 + 64) + 8 * a2) + 56);
  v4 = *v5;
  v6 = 0x6DB6DB6DB6DB6DB7 * ((v5[1] - *v5) >> 3);
  if (v5[1] == *v5)
    v4 = 0;
  a3[1] = v4;
  a3[2] = v6;
  a3[3] = 0;
  return result;
}

uint64_t fst::Fst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>::IsMemoryMapped()
{
  return 0;
}

uint64_t fst::ImplToExpandedFst<fst::VectorFstImpl<fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>,fst::MutableFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>::NumStates(uint64_t a1)
{
  return (*(_QWORD *)(*(_QWORD *)(a1 + 8) + 72) - *(_QWORD *)(*(_QWORD *)(a1 + 8) + 64)) >> 3;
}

uint64_t fst::VectorFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _DWORD *v5;
  int v6;

  if (a1 != a2)
  {
    v4 = operator new();
    fst::VectorFstImpl<fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>::VectorFstImpl(v4, a2);
    v5 = *(_DWORD **)(a1 + 8);
    if (v5)
    {
      v6 = v5[14] - 1;
      v5[14] = v6;
      if (!v6)
        (*(void (**)(_DWORD *))(*(_QWORD *)v5 + 8))(v5);
    }
    *(_QWORD *)(a1 + 8) = v4;
  }
  return a1;
}

void sub_1ADC0A654(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10B3C40637D23BDLL);
  _Unwind_Resume(a1);
}

unint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>,fst::MutableFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>::SetStart(uint64_t a1, int a2)
{
  uint64_t v4;
  unint64_t result;

  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>,fst::MutableFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>::MutateCheck(a1);
  v4 = *(_QWORD *)(a1 + 8);
  *(_DWORD *)(v4 + 88) = a2;
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
  *(_QWORD *)(v4 + 8) = result & 0xCCFFFFF0007 | (((result >> 35) & 1) << 37) | *(_QWORD *)(v4 + 8) & 4;
  return result;
}

_QWORD *fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>,fst::MutableFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>::SetFinal(uint64_t a1, int a2, int *a3)
{
  _QWORD *v6;
  int v8;
  _QWORD v9[3];
  int v10;

  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>,fst::MutableFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>::MutateCheck(a1);
  v6 = *(_QWORD **)(a1 + 8);
  v8 = *a3;
  std::list<int>::list(v9, (uint64_t)(a3 + 2));
  v10 = a3[8];
  fst::VectorFstImpl<fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>::SetFinal(v6, a2, &v8);
  return std::__list_imp<char *>::clear(v9);
}

void sub_1ADC0A754(_Unwind_Exception *a1)
{
  _QWORD *v1;

  std::__list_imp<char *>::clear(v1);
  _Unwind_Resume(a1);
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>,fst::MutableFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>::AddState(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;

  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>,fst::MutableFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>::MutateCheck(a1);
  v2 = *(_QWORD **)(a1 + 8);
  v3 = fst::VectorFstBaseImpl<fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>::AddState(v2);
  v2[1] = v2[1] & 4 | (*(uint64_t (**)(_QWORD *))(*v2 + 24))(v2) & 0x2AFFFFFF0007;
  return v3;
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>,fst::MutableFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>::AddArc(uint64_t a1, int a2, int *a3)
{
  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>,fst::MutableFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>::MutateCheck(a1);
  return fst::VectorFstImpl<fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>::AddArc(*(_QWORD **)(a1 + 8), a2, a3);
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>,fst::MutableFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>::DeleteStates(uint64_t a1, char **a2)
{
  _QWORD *v4;
  uint64_t result;

  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>,fst::MutableFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>::MutateCheck(a1);
  v4 = *(_QWORD **)(a1 + 8);
  fst::VectorFstBaseImpl<fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>::DeleteStates((uint64_t)v4, a2);
  result = (*(uint64_t (**)(_QWORD *))(*v4 + 24))(v4);
  v4[1] = v4[1] & 4 | result & 0x6A5A950007;
  return result;
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>,fst::MutableFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>::DeleteStates(uint64_t a1)
{
  _QWORD *v2;
  uint64_t result;

  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>,fst::MutableFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>::MutateCheck(a1);
  v2 = *(_QWORD **)(a1 + 8);
  fst::VectorFstBaseImpl<fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>::DeleteStates((uint64_t)v2);
  result = (*(uint64_t (**)(_QWORD *))(*v2 + 24))(v2);
  v2[1] = (*((_DWORD *)v2 + 2) | result) & 4 | 0x156A5A950003;
  return result;
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>,fst::MutableFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>::DeleteArcs(uint64_t a1, int a2, uint64_t a3)
{
  _QWORD *v6;
  uint64_t result;

  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>,fst::MutableFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>::MutateCheck(a1);
  v6 = *(_QWORD **)(a1 + 8);
  fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::DeleteArcs(*(_QWORD **)(v6[8] + 8 * a2), a3);
  result = (*(uint64_t (**)(_QWORD *))(*v6 + 24))(v6);
  v6[1] = v6[1] & 4 | result & 0xA6A5A950007;
  return result;
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>,fst::MutableFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>::DeleteArcs(uint64_t a1, int a2)
{
  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>,fst::MutableFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>::MutateCheck(a1);
  return fst::VectorFstImpl<fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>::DeleteArcs(*(_QWORD **)(a1 + 8), a2);
}

void fst::VectorFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>::ReserveStates(uint64_t a1, int a2)
{
  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>,fst::MutableFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>::MutateCheck(a1);
  std::vector<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> *,std::allocator<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> *>>::reserve((void **)(*(_QWORD *)(a1 + 8) + 64), a2);
}

uint64_t fst::VectorFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>::ReserveArcs(uint64_t a1, int a2, unint64_t a3)
{
  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>,fst::MutableFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>::MutateCheck(a1);
  return std::vector<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>::reserve((uint64_t *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 64) + 8 * a2) + 56), a3);
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>,fst::MutableFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>::MutableInputSymbols(uint64_t a1)
{
  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>,fst::MutableFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>::MutateCheck(a1);
  return *(_QWORD *)(*(_QWORD *)(a1 + 8) + 40);
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>,fst::MutableFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>::MutableOutputSymbols(uint64_t a1)
{
  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>,fst::MutableFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>::MutateCheck(a1);
  return *(_QWORD *)(*(_QWORD *)(a1 + 8) + 48);
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>,fst::MutableFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>::SetInputSymbols(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;

  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>,fst::MutableFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>::MutateCheck(a1);
  v4 = *(_QWORD *)(a1 + 8);
  result = *(_QWORD *)(v4 + 40);
  if (result != a2)
  {
    if (result)
      (*(void (**)(uint64_t))(*(_QWORD *)result + 8))(result);
    if (a2)
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
    else
      result = 0;
    *(_QWORD *)(v4 + 40) = result;
  }
  return result;
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>,fst::MutableFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>::SetOutputSymbols(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;

  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>,fst::MutableFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>::MutateCheck(a1);
  v4 = *(_QWORD *)(a1 + 8);
  result = *(_QWORD *)(v4 + 48);
  if (result != a2)
  {
    if (result)
      (*(void (**)(uint64_t))(*(_QWORD *)result + 8))(result);
    if (a2)
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
    else
      result = 0;
    *(_QWORD *)(v4 + 48) = result;
  }
  return result;
}

uint64_t fst::VectorFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>::InitMutableArcIterator(uint64_t a1, int a2, _QWORD *a3)
{
  _QWORD *v6;
  uint64_t result;
  uint64_t v8;

  v6 = (_QWORD *)operator new();
  *v6 = &unk_1E5D21650;
  v6[3] = 0;
  result = fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>,fst::MutableFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>::MutateCheck(a1);
  v8 = *(_QWORD *)(a1 + 8);
  v6[1] = *(_QWORD *)(*(_QWORD *)(v8 + 64) + 8 * a2);
  v6[2] = v8 + 8;
  *a3 = v6;
  return result;
}

void sub_1ADC0AB70(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10B1C402DF695F1);
  _Unwind_Resume(a1);
}

uint64_t fst::VectorFstImpl<fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>::VectorFstImpl(uint64_t a1)
{
  std::string *v2;
  std::string __str;

  *(_QWORD *)a1 = &unk_1E5D229E8;
  *(_QWORD *)(a1 + 8) = 0;
  v2 = (std::string *)(a1 + 16);
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 16), "null");
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 56) = 1;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_DWORD *)(a1 + 88) = -1;
  *(_QWORD *)a1 = &unk_1E5D1D070;
  std::string::basic_string[abi:ne180100]<0>(&__str, "vector");
  std::string::operator=(v2, &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a1 + 8) & 4 | 0x156A5A950003;
  return a1;
}

void sub_1ADC0AC54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  _QWORD *v15;

  if (a15 < 0)
    operator delete(__p);
  fst::VectorFstBaseImpl<fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>::~VectorFstBaseImpl(v15);
  _Unwind_Resume(a1);
}

uint64_t fst::VectorFstBaseImpl<fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>::~VectorFstBaseImpl(_QWORD *a1)
{
  _QWORD *v2;
  unint64_t v3;

  *a1 = &unk_1E5D1FE70;
  v2 = (_QWORD *)a1[9];
  if (v2 != (_QWORD *)a1[8])
  {
    v3 = 0;
    v2 = (_QWORD *)a1[8];
    do
    {
      fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::Destroy(v2[v3++]);
      v2 = (_QWORD *)a1[8];
    }
    while (v3 < (uint64_t)(a1[9] - (_QWORD)v2) >> 3);
  }
  if (v2)
  {
    a1[9] = v2;
    operator delete(v2);
  }
  return fst::FstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>::~FstImpl((uint64_t)a1);
}

void fst::VectorFstImpl<fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>::~VectorFstImpl(_QWORD *a1)
{
  fst::VectorFstBaseImpl<fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>::~VectorFstBaseImpl(a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t fst::FstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>::HasSequentialStates()
{
  return 1;
}

uint64_t fst::FstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>::Properties(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8);
}

uint64_t fst::FstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>::Properties(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a1 + 8) & a2;
}

void fst::VectorFstBaseImpl<fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>::~VectorFstBaseImpl(_QWORD *a1)
{
  fst::VectorFstBaseImpl<fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>::~VectorFstBaseImpl(a1);
  JUMPOUT(0x1AF44D190);
}

void fst::FstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>::~FstImpl(uint64_t a1)
{
  fst::FstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>::~FstImpl(a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t fst::FstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>::~FstImpl(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)a1 = &unk_1E5D229E8;
  v2 = *(_QWORD *)(a1 + 40);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *(_QWORD *)(a1 + 48);
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  if (*(char *)(a1 + 39) < 0)
    operator delete(*(void **)(a1 + 16));
  return a1;
}

uint64_t fst::Fst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>::Write(uint64_t a1)
{
  fst *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  void *__p[2];
  char v12;
  char v13;

  std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
  v2 = fst::LogMessage::LogMessage((fst *)&v13, (uint64_t)__p);
  v3 = (_QWORD *)fst::cerr(v2);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"Fst::Write: No write stream method for ", 39);
  v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 72))(a1);
  v6 = *(char *)(v5 + 23);
  if (v6 >= 0)
    v7 = v5;
  else
    v7 = *(_QWORD *)v5;
  if (v6 >= 0)
    v8 = *(unsigned __int8 *)(v5 + 23);
  else
    v8 = *(_QWORD *)(v5 + 8);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, v7, v8);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)" Fst type", 9);
  fst::LogMessage::~LogMessage((fst::LogMessage *)&v13);
  if (v12 < 0)
    operator delete(__p[0]);
  return 0;
}

{
  fst *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  void *__p[2];
  char v12;
  char v13;

  std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
  v2 = fst::LogMessage::LogMessage((fst *)&v13, (uint64_t)__p);
  v3 = (_QWORD *)fst::cerr(v2);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"Fst::Write: No write filename method for ", 41);
  v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 72))(a1);
  v6 = *(char *)(v5 + 23);
  if (v6 >= 0)
    v7 = v5;
  else
    v7 = *(_QWORD *)v5;
  if (v6 >= 0)
    v8 = *(unsigned __int8 *)(v5 + 23);
  else
    v8 = *(_QWORD *)(v5 + 8);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, v7, v8);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)" Fst type", 9);
  fst::LogMessage::~LogMessage((fst::LogMessage *)&v13);
  if (v12 < 0)
    operator delete(__p[0]);
  return 0;
}

void sub_1ADC0AEB0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1ADC0AF90(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>,fst::MutableFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>::InputSymbols(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 8) + 40);
}

uint64_t fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>,fst::MutableFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>::OutputSymbols(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 8) + 48);
}

uint64_t fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>,fst::MutableFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>::operator=(uint64_t a1)
{
  fst *v2;
  _QWORD *v3;
  void *__p[2];
  char v6;
  char v7;

  if (FLAGS_fst_error_fatal)
    std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
  else
    std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
  v2 = fst::LogMessage::LogMessage((fst *)&v7, (uint64_t)__p);
  v3 = (_QWORD *)fst::cerr(v2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"ImplToFst: Assignment operator disallowed", 41);
  fst::LogMessage::~LogMessage((fst::LogMessage *)&v7);
  if (v6 < 0)
    operator delete(__p[0]);
  *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) |= 4uLL;
  return a1;
}

void sub_1ADC0B090(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  uint64_t v14;

  fst::LogMessage::~LogMessage((fst::LogMessage *)(v14 - 17));
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>,fst::MutableFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>::MutateCheck(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  int v3;

  if (*(int *)(*(_QWORD *)(result + 8) + 56) >= 2)
  {
    v1 = result;
    v2 = operator new();
    fst::VectorFstImpl<fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>::VectorFstImpl(v2, v1);
    result = *(_QWORD *)(v1 + 8);
    if (result)
    {
      v3 = *(_DWORD *)(result + 56) - 1;
      *(_DWORD *)(result + 56) = v3;
      if (!v3)
        result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
    }
    *(_QWORD *)(v1 + 8) = v2;
  }
  return result;
}

void sub_1ADC0B140(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10B3C40637D23BDLL);
  _Unwind_Resume(a1);
}

uint64_t fst::VectorFstImpl<fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>::VectorFstImpl(uint64_t a1, uint64_t a2)
{
  std::string *v4;
  uint64_t *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  unint64_t v15;
  _DWORD *v16;
  std::string __str;
  _DWORD *v19;
  std::string::size_type v20;
  uint64_t v21;
  uint64_t v22[4];
  uint64_t v23;
  int v24;
  unsigned int v25;

  *(_QWORD *)a1 = &unk_1E5D229E8;
  *(_QWORD *)(a1 + 8) = 0;
  v4 = (std::string *)(a1 + 16);
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 16), "null");
  *(_QWORD *)(a1 + 40) = 0;
  v5 = (uint64_t *)(a1 + 40);
  *(_QWORD *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 56) = 1;
  *(_QWORD *)(a1 + 64) = 0;
  v6 = (_QWORD *)(a1 + 64);
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_DWORD *)(a1 + 88) = -1;
  *(_QWORD *)a1 = &unk_1E5D1D070;
  std::string::basic_string[abi:ne180100]<0>(&__str, "vector");
  std::string::operator=(v4, &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 112))(a2);
  v8 = *v5;
  if (*v5 != v7)
  {
    if (v8)
      (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
    if (v7)
      v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 16))(v7);
    else
      v9 = 0;
    *v5 = v9;
  }
  v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 120))(a2);
  v11 = *(_QWORD *)(a1 + 48);
  if (v11 != v10)
  {
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
    if (v10)
      v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 16))(v10);
    else
      v12 = 0;
    *(_QWORD *)(a1 + 48) = v12;
  }
  *(_DWORD *)(a1 + 88) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2);
  if ((*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, 1, 0))
  {
    v13 = fst::CountStates<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>(a2);
    std::vector<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> *,std::allocator<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> *>>::reserve((void **)(a1 + 64), v13);
  }
  v25 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a2 + 128))(a2, &v23);
  while (1)
  {
    if (!v23)
    {
      if ((int)v25 >= v24)
        goto LABEL_45;
LABEL_25:
      v14 = v25;
      goto LABEL_26;
    }
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v23 + 16))(v23))
      break;
    if (!v23)
      goto LABEL_25;
    v14 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v23 + 24))(v23);
LABEL_26:
    fst::VectorFstBaseImpl<fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>::AddState((_QWORD *)a1);
    (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(&v21, a2, v14);
    fst::VectorFstBaseImpl<fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>::SetFinal(a1, v14, (int *)&v21);
    std::__list_imp<char *>::clear(v22);
    v15 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 40))(a2, v14);
    std::vector<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>::reserve((uint64_t *)(*(_QWORD *)(*v6 + 8 * (int)v14) + 56), v15);
    v20 = 0;
    (*(void (**)(uint64_t, uint64_t, std::string *))(*(_QWORD *)a2 + 136))(a2, v14, &__str);
    while (1)
    {
      if (!__str.__r_.__value_.__r.__words[0])
      {
        if (v20 >= __str.__r_.__value_.__r.__words[2])
          goto LABEL_38;
LABEL_32:
        v16 = (_DWORD *)(__str.__r_.__value_.__l.__size_ + 56 * v20);
        goto LABEL_33;
      }
      if ((*(unsigned int (**)(std::string::size_type))(*(_QWORD *)__str.__r_.__value_.__l.__data_ + 24))(__str.__r_.__value_.__r.__words[0]))
        break;
      if (!__str.__r_.__value_.__r.__words[0])
        goto LABEL_32;
      v16 = (_DWORD *)(*(uint64_t (**)(void))(*(_QWORD *)__str.__r_.__value_.__l.__data_ + 32))();
LABEL_33:
      fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>::AddArc(*(_QWORD **)(*v6 + 8 * (int)v14), v16);
      if (__str.__r_.__value_.__r.__words[0])
        (*(void (**)(std::string::size_type))(*(_QWORD *)__str.__r_.__value_.__l.__data_ + 40))(__str.__r_.__value_.__r.__words[0]);
      else
        ++v20;
    }
    if (__str.__r_.__value_.__r.__words[0])
    {
      (*(void (**)(void))(*(_QWORD *)__str.__r_.__value_.__l.__data_ + 8))();
      goto LABEL_40;
    }
LABEL_38:
    if (v19)
      --*v19;
LABEL_40:
    if (v23)
      (*(void (**)(uint64_t))(*(_QWORD *)v23 + 32))(v23);
    else
      ++v25;
  }
  if (v23)
    (*(void (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
LABEL_45:
  *(_QWORD *)(a1 + 8) = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, 0x3FFFFFFF0004, 0) | *(_QWORD *)(a1 + 8) & 4 | 3;
  return a1;
}

void sub_1ADC0B514(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16)
{
  _QWORD *v16;

  fst::VectorFstBaseImpl<fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>::~VectorFstBaseImpl(v16);
  _Unwind_Resume(a1);
}

uint64_t fst::VectorFstBaseImpl<fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>::AddState(_QWORD *a1)
{
  char *v2;
  _DWORD *v3;
  unint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  uint64_t v17;

  v2 = (char *)operator new(0x50uLL);
  v3 = (_DWORD *)fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>::Zero();
  *(_DWORD *)v2 = *v3;
  std::list<int>::list((_QWORD *)v2 + 1, (uint64_t)(v3 + 2));
  v4 = a1[10];
  *((_DWORD *)v2 + 8) = v3[8];
  *(_OWORD *)(v2 + 40) = 0u;
  *(_OWORD *)(v2 + 56) = 0u;
  *((_QWORD *)v2 + 9) = 0;
  v5 = (_QWORD *)a1[9];
  if ((unint64_t)v5 >= v4)
  {
    v7 = a1[8];
    v8 = ((uint64_t)v5 - v7) >> 3;
    if ((unint64_t)(v8 + 1) >> 61)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v9 = v4 - v7;
    v10 = v9 >> 2;
    if (v9 >> 2 <= (unint64_t)(v8 + 1))
      v10 = v8 + 1;
    if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF8)
      v11 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v11 = v10;
    if (v11)
      v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(a1 + 10), v11);
    else
      v12 = 0;
    v13 = &v12[8 * v8];
    v14 = &v12[8 * v11];
    *(_QWORD *)v13 = v2;
    v6 = v13 + 8;
    v16 = (char *)a1[8];
    v15 = (char *)a1[9];
    if (v15 != v16)
    {
      do
      {
        v17 = *((_QWORD *)v15 - 1);
        v15 -= 8;
        *((_QWORD *)v13 - 1) = v17;
        v13 -= 8;
      }
      while (v15 != v16);
      v15 = (char *)a1[8];
    }
    a1[8] = v13;
    a1[9] = v6;
    a1[10] = v14;
    if (v15)
      operator delete(v15);
  }
  else
  {
    *v5 = v2;
    v6 = v5 + 1;
  }
  a1[9] = v6;
  return (((unint64_t)v6 - a1[8]) >> 3) - 1;
}

_QWORD *fst::VectorFstBaseImpl<fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>::SetFinal(uint64_t a1, int a2, int *a3)
{
  uint64_t v4;
  int v5;
  int v7;
  _QWORD v8[3];
  int v9;

  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 64) + 8 * a2);
  v7 = *a3;
  std::list<int>::list(v8, (uint64_t)(a3 + 2));
  v5 = a3[8];
  v9 = v5;
  *(_DWORD *)v4 = v7;
  if ((int *)v4 != &v7)
  {
    std::list<int>::__assign_with_sentinel[abi:ne180100]<std::__list_const_iterator<int,void *>,std::__list_const_iterator<int,void *>>((uint64_t *)(v4 + 8), v8[1], (uint64_t)v8);
    v5 = v9;
  }
  *(_DWORD *)(v4 + 32) = v5;
  return std::__list_imp<char *>::clear(v8);
}

void sub_1ADC0B764(_Unwind_Exception *a1)
{
  _QWORD *v1;

  std::__list_imp<char *>::clear(v1);
  _Unwind_Resume(a1);
}

uint64_t fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>::Zero()
{
  unsigned __int8 v0;
  uint64_t v2;
  _DWORD *v3;

  if ((v0 & 1) == 0
  {
    v2 = operator new();
    v3 = (_DWORD *)fst::ProductWeight<fst::StringWeight<int,(fst::StringType)0>,fst::TropicalWeightTpl<float>>::Zero();
    *(_DWORD *)v2 = *v3;
    std::list<int>::list((_QWORD *)(v2 + 8), (uint64_t)(v3 + 2));
    *(_DWORD *)(v2 + 32) = v3[8];
    fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>::Zero(void)::zero = v2;
  }
  return fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>::Zero(void)::zero;
}

void sub_1ADC0B810(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t fst::ProductWeight<fst::StringWeight<int,(fst::StringType)0>,fst::TropicalWeightTpl<float>>::Zero()
{
  unsigned __int8 v0;
  uint64_t v2;
  _DWORD *v3;

  if ((v0 & 1) == 0
  {
    v2 = operator new();
    v3 = (_DWORD *)fst::PairWeight<fst::StringWeight<int,(fst::StringType)0>,fst::TropicalWeightTpl<float>>::Zero();
    *(_DWORD *)v2 = *v3;
    std::list<int>::list((_QWORD *)(v2 + 8), (uint64_t)(v3 + 2));
    *(_DWORD *)(v2 + 32) = v3[8];
    fst::ProductWeight<fst::StringWeight<int,(fst::StringType)0>,fst::TropicalWeightTpl<float>>::Zero(void)::zero = v2;
  }
  return fst::ProductWeight<fst::StringWeight<int,(fst::StringType)0>,fst::TropicalWeightTpl<float>>::Zero(void)::zero;
}

void sub_1ADC0B8E0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t fst::PairWeight<fst::StringWeight<int,(fst::StringType)0>,fst::TropicalWeightTpl<float>>::Zero()
{
  unsigned __int8 v0;
  uint64_t v2;
  int *v3;
  int v4;
  _QWORD v5[3];

  if ((v0 & 1) == 0
  {
    v2 = operator new();
    v3 = (int *)fst::StringWeight<int,(fst::StringType)0>::Zero();
    v4 = *v3;
    std::list<int>::list(v5, (uint64_t)(v3 + 2));
    *(_DWORD *)v2 = v4;
    std::list<int>::list((_QWORD *)(v2 + 8), (uint64_t)v5);
    *(_DWORD *)(v2 + 32) = 2139095040;
    std::__list_imp<char *>::clear(v5);
    fst::PairWeight<fst::StringWeight<int,(fst::StringType)0>,fst::TropicalWeightTpl<float>>::Zero(void)::zero = v2;
  }
  return fst::PairWeight<fst::StringWeight<int,(fst::StringType)0>,fst::TropicalWeightTpl<float>>::Zero(void)::zero;
}

void sub_1ADC0B9DC(_Unwind_Exception *a1)
{
  uint64_t v1;
  _QWORD *v2;

  std::__list_imp<char *>::clear(v2);
  MEMORY[0x1AF44D190](v1, 0x1020C4067685F46);
  _Unwind_Resume(a1);
}

uint64_t std::vector<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>::reserve(uint64_t *a1, unint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[5];

  v4 = a1[2];
  result = (uint64_t)(a1 + 2);
  if (0x6DB6DB6DB6DB6DB7 * ((v4 - *a1) >> 3) < a2)
  {
    if (a2 >= 0x492492492492493)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v5 = a1[1] - *a1;
    v7[4] = result;
    v7[0] = std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::VoiceCommandArgument>>(result, a2);
    v7[1] = v7[0] + v5;
    v7[2] = v7[0] + v5;
    v7[3] = v7[0] + 56 * v6;
    std::vector<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>::__swap_out_circular_buffer(a1, v7);
    return std::__split_buffer<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>::~__split_buffer((uint64_t)v7);
  }
  return result;
}

void sub_1ADC0BACC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>,std::reverse_iterator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>*>,std::reverse_iterator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>*>,std::reverse_iterator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>,std::reverse_iterator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>*>,std::reverse_iterator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>*>,std::reverse_iterator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v11;
  uint64_t v12;

  if (a3 != a5)
  {
    v11 = 0;
    do
    {
      v12 = a7 + v11;
      *(_QWORD *)(v12 - 56) = *(_QWORD *)(a3 + v11 - 56);
      *(_DWORD *)(v12 - 48) = *(_DWORD *)(a3 + v11 - 48);
      std::list<int>::list((_QWORD *)(a7 + v11 - 40), a3 + v11 - 40);
      *(_DWORD *)(v12 - 16) = *(_DWORD *)(a3 + v11 - 16);
      *(_DWORD *)(v12 - 8) = *(_DWORD *)(a3 + v11 - 8);
      v11 -= 56;
    }
    while (a3 + v11 != a5);
  }
  return a6;
}

void sub_1ADC0BBF0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  if (v2)
  {
    v4 = v1 + 16;
    do
    {
      std::__list_imp<char *>::clear((_QWORD *)(v4 + v2));
      v2 += 56;
    }
    while (v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>::AddArc(_QWORD *a1, _DWORD *a2)
{
  uint64_t *v3;
  unint64_t v4;
  uint64_t result;

  if (!*a2)
    ++a1[5];
  if (!a2[1])
    ++a1[6];
  v3 = a1 + 7;
  v4 = a1[8];
  if (v4 >= a1[9])
  {
    result = std::vector<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>::__push_back_slow_path<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0> const&>(v3, (uint64_t)a2);
  }
  else
  {
    std::vector<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>::__construct_one_at_end[abi:ne180100]<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0> const&>((uint64_t)v3, (uint64_t)a2);
    result = v4 + 56;
  }
  a1[8] = result;
  return result;
}

_QWORD *std::vector<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>::__construct_one_at_end[abi:ne180100]<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0> const&>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD *result;

  v4 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)v4 = *(_QWORD *)a2;
  *(_DWORD *)(v4 + 8) = *(_DWORD *)(a2 + 8);
  result = std::list<int>::list((_QWORD *)(v4 + 16), a2 + 16);
  *(_DWORD *)(v4 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(v4 + 48) = *(_DWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 8) = v4 + 56;
  return result;
}

void sub_1ADC0BCDC(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>::__push_back_slow_path<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0> const&>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;
  _QWORD v15[2];
  char *v16;
  char *v17;
  uint64_t *v18;

  v3 = *a1;
  v4 = 0x6DB6DB6DB6DB6DB7 * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) > 0x492492492492492)
    std::vector<int>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0x6DB6DB6DB6DB6DB7 * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x249249249249249)
    v9 = 0x492492492492492;
  else
    v9 = v5;
  v18 = a1 + 2;
  if (v9)
    v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::VoiceCommandArgument>>(v7, v9);
  else
    v10 = 0;
  v11 = &v10[56 * v4];
  v15[0] = v10;
  v15[1] = v11;
  v16 = v11;
  v17 = &v10[56 * v9];
  *(_QWORD *)v11 = *(_QWORD *)a2;
  *((_DWORD *)v11 + 2) = *(_DWORD *)(a2 + 8);
  std::list<int>::list((_QWORD *)v11 + 2, a2 + 16);
  v12 = &v10[56 * v4];
  *((_DWORD *)v12 + 10) = *(_DWORD *)(a2 + 40);
  *((_DWORD *)v12 + 12) = *(_DWORD *)(a2 + 48);
  v16 += 56;
  std::vector<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>::__swap_out_circular_buffer(a1, v15);
  v13 = a1[1];
  std::__split_buffer<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>::~__split_buffer((uint64_t)v15);
  return v13;
}

void sub_1ADC0BE18(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

unint64_t fst::TestProperties<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  unint64_t v6;
  unint64_t v7;
  fst *v8;
  _QWORD *v9;
  _QWORD *v10;
  void *__p[2];
  char v13;
  char v14;

  if (!FLAGS_fst_verify_properties)
    return fst::ComputeProperties<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>(a1, a2, a3, 1);
  v6 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 64))(a1, 0x3FFFFFFF0007, 0);
  v7 = fst::ComputeProperties<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>(a1, a2, a3, 0);
  if (!fst::CompatProperties(v6, v7))
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
    v8 = fst::LogMessage::LogMessage((fst *)&v14, (uint64_t)__p);
    v9 = (_QWORD *)fst::cerr(v8);
    v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"TestProperties: stored Fst properties incorrect", 47);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)" (stored: props1, computed: props2)", 35);
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v14);
    if (v13 < 0)
      operator delete(__p[0]);
  }
  return v7;
}

void sub_1ADC0BF38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

unint64_t fst::ComputeProperties<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>(uint64_t a1, uint64_t a2, uint64_t *a3, int a4)
{
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  std::vector<unsigned int>::size_type v18;
  char v19;
  uint64_t v20;
  int v21;
  int v22;
  unint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t *v29;
  uint64_t *v30;
  BOOL v31;
  _BOOL4 v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  uint64_t *v39;
  uint64_t *v40;
  BOOL v41;
  _BOOL4 v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  std::vector<unsigned int>::pointer end;
  unsigned int *v47;
  std::vector<unsigned int>::pointer begin;
  int64_t v49;
  unint64_t v50;
  int64_t v51;
  unint64_t v52;
  char *v53;
  unsigned int *v54;
  unsigned int v55;
  std::vector<unsigned int>::pointer v56;
  unsigned int *v57;
  std::vector<unsigned int>::pointer v58;
  int64_t v59;
  unint64_t v60;
  int64_t v61;
  unint64_t v62;
  char *v63;
  unsigned int *v64;
  unsigned int v65;
  unint64_t v66;
  std::vector<unsigned int>::pointer v67;
  unsigned int v68;
  unint64_t v69;
  unsigned int v70;
  unsigned int v71;
  unint64_t v72;
  std::vector<unsigned int>::pointer v73;
  unsigned int v74;
  unint64_t v75;
  unsigned int v76;
  unsigned int v77;
  uint64_t v78;
  char *v79;
  uint64_t v80;
  char v81;
  unint64_t v82;
  uint64_t *v83;
  BOOL v84;
  _BOOL4 v85;
  uint64_t v86;
  uint64_t v87;
  char *v88;
  uint64_t v89;
  char v90;
  unint64_t v91;
  uint64_t *v92;
  BOOL v93;
  _BOOL4 v94;
  uint64_t v95;
  uint64_t v98;
  uint64_t v99;
  unint64_t v100;
  _DWORD *v101;
  unint64_t v102;
  uint64_t v103;
  int v104;
  unsigned int v105;
  std::vector<unsigned int> v106;
  std::vector<unsigned int> v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t *v111;
  uint64_t v112;
  int v113;
  int v114;
  unint64_t v115;
  float v116;
  float v117;

  v7 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 64))(a1, 0x3FFFFFFF0007, 0);
  v8 = v7;
  if (!a4
    || (v9 = v7 & 0x3FFFFFFF0000 | (2 * v7) & 0x2AAAAAAA0000 | (v7 >> 1) & 0x155555550000 | 7, (a2 & ~v9) != 0))
  {
    v8 = v7 & 7;
    v115 = v8;
    v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
    if ((a2 & 0xF3C00000000) != 0 && v10)
    {
      v108 = 0;
      v109 = 0;
      v110 = 0;
      v111 = (uint64_t *)&v115;
      fst::DfsVisit<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,fst::SccVisitor<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>,fst::AnyArcFilter<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>(a1, &v108, 0);
      v8 = v115;
    }
    if ((a2 & 0xFFFFF0C3FFFFFFF8) == 0)
      goto LABEL_211;
    v11 = a2 & 0xC0000;
    v12 = 0x10425A810000;
    if ((a2 & 0xC0000) != 0)
      v12 = 0x10425A850000;
    v13 = v8 | v12;
    v14 = a2 & 0x300000;
    if ((a2 & 0x300000) != 0)
      v13 |= 0x100000uLL;
    v115 = v13;
    memset(&v107, 0, sizeof(v107));
    memset(&v106, 0, sizeof(v106));
    v105 = 0;
    v15 = a1;
    (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 128))(a1, &v103);
    v16 = 0;
LABEL_12:
    if (!v103)
    {
      if ((int)v105 >= v104)
        goto LABEL_203;
      goto LABEL_17;
    }
    if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v103 + 16))(v103))
    {
      if (v103)
      {
        v17 = (*(uint64_t (**)(void))(*(_QWORD *)v103 + 24))();
LABEL_18:
        v18 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v15 + 40))(v15, v17);
        v110 = (uint64_t)&v110;
        v111 = &v110;
        v112 = 0;
        LODWORD(v109) = 0;
        v107.__end_ = v107.__begin_;
        v106.__end_ = v106.__begin_;
        if (v11)
          std::vector<int>::reserve(&v107, v18);
        if (v14)
          std::vector<int>::reserve(&v106, v18);
        v102 = 0;
        (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(_QWORD *)v15 + 136))(v15, v17, &v98);
        v19 = 1;
        while (1)
        {
          if (v98)
          {
            if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v98 + 24))(v98))
            {
              if (v98)
              {
                (*(void (**)(void))(*(_QWORD *)v98 + 8))();
              }
              else
              {
LABEL_132:
                if (v101)
                  --*v101;
              }
              v15 = a1;
              if (!v11
                || (std::__sort<std::__less<int,int> &,int *>(),
                    (std::vector<unsigned int>::pointer)((char *)v107.__end_ - (char *)v107.__begin_) < (std::vector<unsigned int>::pointer)5))
              {
LABEL_141:
                if (!v14)
                  goto LABEL_152;
LABEL_142:
                std::__sort<std::__less<int,int> &,int *>();
                if ((std::vector<unsigned int>::pointer)((char *)v106.__end_ - (char *)v106.__begin_) >= (std::vector<unsigned int>::pointer)5)
                {
                  v72 = v106.__end_ - v106.__begin_;
                  if (v72 <= 2)
                    v72 = 2;
                  v73 = v106.__begin_ + 1;
                  v74 = *v106.__begin_;
                  v75 = v72 - 1;
                  while (1)
                  {
                    v77 = *v73++;
                    v76 = v77;
                    if (v77 == v74)
                      break;
                    v74 = v76;
                    if (!--v75)
                      goto LABEL_152;
                  }
                  v115 = v115 & 0xFFFFFFFFFFCFFFFFLL | 0x200000;
                }
                goto LABEL_152;
              }
              v66 = v107.__end_ - v107.__begin_;
              if (v66 <= 2)
                v66 = 2;
              v67 = v107.__begin_ + 1;
              v68 = *v107.__begin_;
              v69 = v66 - 1;
              while (1)
              {
                v71 = *v67++;
                v70 = v71;
                if (v71 == v68)
                  break;
                v68 = v70;
                if (!--v69)
                  goto LABEL_141;
              }
              v115 = v115 & 0xFFFFFFFFFFF3FFFFLL | 0x80000;
              if (v14)
                goto LABEL_142;
LABEL_152:
              if (v16 >= 1)
                v115 = v115 & 0xFFFFCFFFFFFFFFFFLL | 0x200000000000;
              (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)a1 + 32))(&v98, a1, v17);
              v78 = fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>::Zero();
              if ((_DWORD)v98)
                v79 = (char *)v101 + 1;
              else
                v79 = 0;
              if (*(_DWORD *)v78)
                v80 = *(_QWORD *)(v78 + 24) + 1;
              else
                v80 = 0;
              if (v79 != (char *)v80)
                goto LABEL_174;
              v81 = 0;
              v82 = v100;
              v83 = (uint64_t *)(v78 + 16);
              v84 = (_DWORD)v98 && (_DWORD)v98 == *(_DWORD *)v78;
              v85 = !v84;
              while (1)
              {
                v86 = *v83;
                if ((v81 & 1) == 0 && v85)
                  break;
                if ((uint64_t *)v82 == &v99)
                  goto LABEL_173;
                if (*(_DWORD *)(v82 + 16) != *(_DWORD *)(v86 + 16))
                  goto LABEL_174;
                v82 = *(_QWORD *)(v82 + 8);
                v83 = (uint64_t *)(v86 + 8);
                v81 = 1;
              }
              if ((_DWORD)v98)
                goto LABEL_174;
LABEL_173:
              v117 = *(float *)&v102;
              v116 = 0.0;
              v116 = *(float *)(v78 + 32);
              if (*(float *)&v102 == v116)
              {
                if ((*(uint64_t (**)(uint64_t, uint64_t, float))(*(_QWORD *)a1 + 40))(a1, v17, *(float *)&v102) != 1)v115 = v115 & 0xFFFFCFFFFFFFFFFFLL | 0x200000000000;
              }
              else
              {
LABEL_174:
                v87 = fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>::One();
                if ((_DWORD)v98)
                  v88 = (char *)v101 + 1;
                else
                  v88 = 0;
                if (*(_DWORD *)v87)
                  v89 = *(_QWORD *)(v87 + 24) + 1;
                else
                  v89 = 0;
                if (v88 != (char *)v89)
                  goto LABEL_194;
                v90 = 0;
                v91 = v100;
                v92 = (uint64_t *)(v87 + 16);
                v93 = (_DWORD)v98 && (_DWORD)v98 == *(_DWORD *)v87;
                v94 = !v93;
                while (1)
                {
                  v95 = *v92;
                  if ((v90 & 1) == 0 && v94)
                    break;
                  if ((uint64_t *)v91 == &v99)
                    goto LABEL_193;
                  if (*(_DWORD *)(v91 + 16) != *(_DWORD *)(v95 + 16))
                    goto LABEL_194;
                  v91 = *(_QWORD *)(v91 + 8);
                  v92 = (uint64_t *)(v95 + 8);
                  v90 = 1;
                }
                if ((_DWORD)v98)
                  goto LABEL_194;
LABEL_193:
                v117 = *(float *)&v102;
                v116 = 0.0;
                v116 = *(float *)(v87 + 32);
                if (*(float *)&v102 != v116)
LABEL_194:
                  v115 = v115 & 0xFFFFFFFCFFFFFFFFLL | 0x100000000;
                ++v16;
              }
              std::__list_imp<char *>::clear(&v99);
              std::__list_imp<char *>::clear(&v110);
              if (v103)
                (*(void (**)(uint64_t))(*(_QWORD *)v103 + 32))(v103);
              else
                ++v105;
              goto LABEL_12;
            }
            if (v98)
            {
              v20 = (*(uint64_t (**)(void))(*(_QWORD *)v98 + 32))();
              goto LABEL_29;
            }
          }
          else if (v102 >= v100)
          {
            goto LABEL_132;
          }
          v20 = v99 + 56 * v102;
LABEL_29:
          v21 = *(_DWORD *)v20;
          v22 = *(_DWORD *)v20;
          if (*(_DWORD *)v20 != *(_DWORD *)(v20 + 4))
          {
            v115 = v115 & 0xFFFFFFFFFFFCFFFFLL | 0x20000;
            v22 = *(_DWORD *)(v20 + 4);
          }
          if (v21 | v22)
          {
            if (v21)
            {
              if (v22)
                goto LABEL_35;
              goto LABEL_39;
            }
            v23 = v115;
          }
          else
          {
            v23 = v115 & 0xFFFFFFFFFF3FFFFFLL | 0x400000;
          }
          v115 = v23 & 0xFFFFFFFFFCFFFFFFLL | 0x1000000;
          if (v22)
          {
LABEL_35:
            if ((v19 & 1) == 0)
              goto LABEL_40;
            goto LABEL_44;
          }
LABEL_39:
          v115 = v115 & 0xFFFFFFFFF3FFFFFFLL | 0x4000000;
          if ((v19 & 1) == 0)
          {
LABEL_40:
            if (v21 < (int)v108)
              v115 = v115 & 0xFFFFFFFFCFFFFFFFLL | 0x20000000;
            if (v22 < SHIDWORD(v108))
              v115 = v115 & 0xFFFFFFFF3FFFFFFFLL | 0x80000000;
          }
LABEL_44:
          v24 = fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>::One();
          v25 = *(_DWORD *)(v20 + 8);
          if (v25)
            v26 = *(_QWORD *)(v20 + 32) + 1;
          else
            v26 = 0;
          if (*(_DWORD *)v24)
            v27 = *(_QWORD *)(v24 + 24) + 1;
          else
            v27 = 0;
          if (v26 != v27)
            goto LABEL_64;
          v28 = 0;
          v29 = (uint64_t *)(v20 + 24);
          v30 = (uint64_t *)(v24 + 16);
          v31 = v25 && v25 == *(_DWORD *)v24;
          v32 = !v31;
          while (1)
          {
            v33 = *v29;
            v34 = *v30;
            if ((v28 & 1) == 0 && v32)
              break;
            if (v33 == v20 + 16)
              goto LABEL_63;
            if (*(_DWORD *)(v33 + 16) != *(_DWORD *)(v34 + 16))
              goto LABEL_64;
            v29 = (uint64_t *)(v33 + 8);
            v30 = (uint64_t *)(v34 + 8);
            v28 = 1;
          }
          if (v25)
            goto LABEL_64;
LABEL_63:
          v117 = 0.0;
          v117 = *(float *)(v20 + 40);
          v116 = 0.0;
          v116 = *(float *)(v24 + 32);
          if (v117 != v116)
          {
LABEL_64:
            v35 = fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>::Zero();
            v25 = *(_DWORD *)(v20 + 8);
            if (v25)
              v36 = *(_QWORD *)(v20 + 32) + 1;
            else
              v36 = 0;
            if (*(_DWORD *)v35)
              v37 = *(_QWORD *)(v35 + 24) + 1;
            else
              v37 = 0;
            if (v36 != v37)
              goto LABEL_84;
            v38 = 0;
            v39 = (uint64_t *)(v20 + 24);
            v40 = (uint64_t *)(v35 + 16);
            v41 = v25 && v25 == *(_DWORD *)v35;
            v42 = !v41;
            while (1)
            {
              v43 = *v39;
              v44 = *v40;
              if ((v38 & 1) == 0 && v42)
                break;
              if (v43 == v20 + 16)
                goto LABEL_83;
              if (*(_DWORD *)(v43 + 16) != *(_DWORD *)(v44 + 16))
                goto LABEL_84;
              v39 = (uint64_t *)(v43 + 8);
              v40 = (uint64_t *)(v44 + 8);
              v38 = 1;
            }
            if (v25)
              goto LABEL_84;
LABEL_83:
            v117 = 0.0;
            v117 = *(float *)(v20 + 40);
            v116 = 0.0;
            v116 = *(float *)(v35 + 32);
            if (v117 != v116)
LABEL_84:
              v115 = v115 & 0xFFFFFFFCFFFFFFFFLL | 0x100000000;
          }
          v45 = *(_DWORD *)(v20 + 48);
          if (v45 <= (int)v17)
            v115 = v115 & 0xFFFFFF3FFFFFFFFFLL | 0x8000000000;
          if (v45 != (_DWORD)v17 + 1)
            v115 = v115 & 0xFFFFCFFFFFFFFFFFLL | 0x200000000000;
          v108 = *(_QWORD *)v20;
          LODWORD(v109) = v25;
          if (&v108 != (uint64_t *)v20)
          {
            std::list<int>::__assign_with_sentinel[abi:ne180100]<std::__list_const_iterator<int,void *>,std::__list_const_iterator<int,void *>>(&v110, *(_QWORD *)(v20 + 24), v20 + 16);
            v45 = *(_DWORD *)(v20 + 48);
          }
          v113 = *(_DWORD *)(v20 + 40);
          v114 = v45;
          if (v11)
          {
            end = v107.__end_;
            if (v107.__end_ >= v107.__end_cap_.__value_)
            {
              begin = v107.__begin_;
              v49 = v107.__end_ - v107.__begin_;
              v50 = v49 + 1;
              if ((unint64_t)(v49 + 1) >> 62)
                goto LABEL_213;
              v51 = (char *)v107.__end_cap_.__value_ - (char *)v107.__begin_;
              if (((char *)v107.__end_cap_.__value_ - (char *)v107.__begin_) >> 1 > v50)
                v50 = v51 >> 1;
              if ((unint64_t)v51 >= 0x7FFFFFFFFFFFFFFCLL)
                v52 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v52 = v50;
              if (v52)
              {
                v53 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v107.__end_cap_, v52);
                begin = v107.__begin_;
                end = v107.__end_;
              }
              else
              {
                v53 = 0;
              }
              v54 = (unsigned int *)&v53[4 * v49];
              *v54 = *(_DWORD *)v20;
              v47 = v54 + 1;
              while (end != begin)
              {
                v55 = *--end;
                *--v54 = v55;
              }
              v107.__begin_ = v54;
              v107.__end_ = v47;
              v107.__end_cap_.__value_ = (unsigned int *)&v53[4 * v52];
              if (begin)
                operator delete(begin);
            }
            else
            {
              *v107.__end_ = *(_DWORD *)v20;
              v47 = end + 1;
            }
            v107.__end_ = v47;
          }
          if (v14)
          {
            v56 = v106.__end_;
            if (v106.__end_ >= v106.__end_cap_.__value_)
            {
              v58 = v106.__begin_;
              v59 = v106.__end_ - v106.__begin_;
              v60 = v59 + 1;
              if ((unint64_t)(v59 + 1) >> 62)
LABEL_213:
                std::vector<int>::__throw_length_error[abi:ne180100]();
              v61 = (char *)v106.__end_cap_.__value_ - (char *)v106.__begin_;
              if (((char *)v106.__end_cap_.__value_ - (char *)v106.__begin_) >> 1 > v60)
                v60 = v61 >> 1;
              if ((unint64_t)v61 >= 0x7FFFFFFFFFFFFFFCLL)
                v62 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v62 = v60;
              if (v62)
              {
                v63 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v106.__end_cap_, v62);
                v58 = v106.__begin_;
                v56 = v106.__end_;
              }
              else
              {
                v63 = 0;
              }
              v64 = (unsigned int *)&v63[4 * v59];
              *v64 = *(_DWORD *)(v20 + 4);
              v57 = v64 + 1;
              while (v56 != v58)
              {
                v65 = *--v56;
                *--v64 = v65;
              }
              v106.__begin_ = v64;
              v106.__end_ = v57;
              v106.__end_cap_.__value_ = (unsigned int *)&v63[4 * v62];
              if (v58)
                operator delete(v58);
            }
            else
            {
              *v106.__end_ = *(_DWORD *)(v20 + 4);
              v57 = v56 + 1;
            }
            v106.__end_ = v57;
          }
          if (v98)
          {
            (*(void (**)(uint64_t))(*(_QWORD *)v98 + 40))(v98);
            v19 = 0;
          }
          else
          {
            v19 = 0;
            ++v102;
          }
        }
      }
LABEL_17:
      v17 = v105;
      goto LABEL_18;
    }
    if (v103)
      (*(void (**)(void))(*(_QWORD *)v103 + 8))();
LABEL_203:
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v15 + 24))(v15) != -1
      && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v15 + 24))(v15))
    {
      v115 = v115 & 0xFFFFCFFFFFFFFFFFLL | 0x200000000000;
    }
    if (v106.__begin_)
    {
      v106.__end_ = v106.__begin_;
      operator delete(v106.__begin_);
    }
    if (v107.__begin_)
    {
      v107.__end_ = v107.__begin_;
      operator delete(v107.__begin_);
    }
    v8 = v115;
LABEL_211:
    v9 = v8 & 0x3FFFFFFF0000 | (2 * v8) & 0x2AAAAAAA0000 | (v8 >> 1) & 0x155555550000 | 7;
  }
  *a3 = v9;
  return v8;
}

void sub_1ADC0C9C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,uint64_t a25,void *a26,uint64_t a27)
{
  if (__p)
    operator delete(__p);
  if (a26)
    operator delete(a26);
  _Unwind_Resume(exception_object);
}

uint64_t fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>::One()
{
  unsigned __int8 v0;
  uint64_t v2;
  _DWORD *v3;

  if ((v0 & 1) == 0
  {
    v2 = operator new();
    v3 = (_DWORD *)fst::ProductWeight<fst::StringWeight<int,(fst::StringType)0>,fst::TropicalWeightTpl<float>>::One();
    *(_DWORD *)v2 = *v3;
    std::list<int>::list((_QWORD *)(v2 + 8), (uint64_t)(v3 + 2));
    *(_DWORD *)(v2 + 32) = v3[8];
    fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>::One(void)::one = v2;
  }
  return fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>::One(void)::one;
}

void sub_1ADC0CB14(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void fst::DfsVisit<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,fst::SccVisitor<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>,fst::AnyArcFilter<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>(uint64_t a1, uint64_t *a2, char a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char inited;
  char v10;
  _QWORD *v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  std::vector<char>::pointer begin;
  unint64_t v19;
  uint64_t v20;
  _DWORD *v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  int v31;
  std::vector<char>::pointer end;
  char *v33;
  std::vector<char>::pointer v34;
  int64_t v35;
  int64_t v36;
  unint64_t v37;
  size_t v38;
  char *v39;
  char *v40;
  char *v41;
  char *v42;
  char v43;
  char v44;
  uint64_t v45;
  int v46;
  std::vector<char>::value_type v47[8];
  std::vector<char>::value_type __x[8];
  int v49;
  int v50;
  void *v51;
  _QWORD v52[6];
  _QWORD *v53;
  _OWORD v54[2];
  __int128 v55;
  std::vector<char> v56;

  fst::SccVisitor<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::InitVisit((uint64_t)a2, a1);
  v46 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  if (v46 == -1)
  {
    fst::SccVisitor<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::FinishVisit((uint64_t)a2);
    return;
  }
  memset(&v56, 0, sizeof(v56));
  v55 = 0u;
  memset(v54, 0, sizeof(v54));
  fst::MemoryPool<fst::DfsState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>::MemoryPool(&v51, 64);
  v45 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 64))(a1, 1, 0);
  if (v45)
    v6 = fst::CountStates<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>(a1);
  else
    v6 = (v46 + 1);
  __x[0] = 0;
  if ((std::vector<char>::pointer)(int)v6 <= (std::vector<char>::pointer)(v56.__end_ - v56.__begin_))
  {
    if ((std::vector<char>::pointer)(int)v6 < (std::vector<char>::pointer)(v56.__end_ - v56.__begin_))
      v56.__end_ = &v56.__begin_[(int)v6];
  }
  else
  {
    std::vector<char>::__append(&v56, (int)v6 - (unint64_t)(v56.__end_ - v56.__begin_), __x);
  }
  v50 = 0;
  (*(void (**)(uint64_t, std::vector<char>::value_type *))(*(_QWORD *)a1 + 128))(a1, __x);
  if (v46 >= (int)v6)
    goto LABEL_97;
  v7 = v46;
  v44 = a3;
  do
  {
    v56.__begin_[(int)v7] = 1;
    v8 = (uint64_t)v53;
    if (v53)
    {
      v53 = (_QWORD *)v53[6];
    }
    else
    {
      v8 = fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::Link>::Allocate(v52, 1);
      *(_QWORD *)(v8 + 48) = 0;
    }
    *(_DWORD *)v8 = v7;
    *(_QWORD *)(v8 + 40) = 0;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 136))(a1, v7, v8 + 8);
    *(_QWORD *)v47 = v8;
    std::deque<fst::DfsState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>> *,std::allocator<fst::DfsState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>> *>>::push_back(v54, v47);
    inited = fst::SccVisitor<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::InitState(a2, v7, v7);
LABEL_16:
    v10 = inited;
    while (*((_QWORD *)&v55 + 1))
    {
      v11 = *(_QWORD **)(*(_QWORD *)(*((_QWORD *)&v54[0] + 1)
                                   + (((unint64_t)(*((_QWORD *)&v55 + 1) + v55 - 1) >> 6) & 0x3FFFFFFFFFFFFF8))
                       + 8 * ((*((_QWORD *)&v55 + 1) + v55 - 1) & 0x1FF));
      v12 = *(int *)v11;
      v13 = v56.__end_ - v56.__begin_;
      if (v56.__end_ - v56.__begin_ <= v12)
      {
        v6 = v12 + 1;
        v47[0] = 0;
        if (v12 + 1 <= v13)
        {
          if (v12 + 1 < v13)
            v56.__end_ = &v56.__begin_[v6];
        }
        else
        {
          std::vector<char>::__append(&v56, v12 + 1 - v13, v47);
        }
      }
      if ((v10 & 1) == 0)
        goto LABEL_33;
      v14 = v11[1];
      if (v14)
      {
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v14 + 24))(v14))
          goto LABEL_33;
        v15 = v11[1];
        if (!v15)
          goto LABEL_29;
        v16 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 32))(v15);
LABEL_30:
        v17 = *(int *)(v16 + 48);
        begin = v56.__begin_;
        v19 = v56.__end_ - v56.__begin_;
        if (v56.__end_ - v56.__begin_ <= v17)
        {
          v6 = (v17 + 1);
          v47[0] = 0;
          if ((int)v6 <= v19)
          {
            if ((int)v6 < v19)
              v56.__end_ = &v56.__begin_[(int)v6];
          }
          else
          {
            std::vector<char>::__append(&v56, (int)v6 - v19, v47);
            v17 = *(int *)(v16 + 48);
            begin = v56.__begin_;
          }
        }
        v26 = begin[v17];
        if (v26 == 1)
        {
          v10 = fst::SccVisitor<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>::BackArc((uint64_t)a2, v12, v16);
          v25 = v11[1];
          if (v25)
            goto LABEL_50;
LABEL_51:
          ++v11[5];
        }
        else
        {
          if (v26 != 2)
          {
            begin[v17] = 1;
            v27 = (uint64_t)v53;
            if (v53)
            {
              v53 = (_QWORD *)v53[6];
            }
            else
            {
              v27 = fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::Link>::Allocate(v52, 1);
              *(_QWORD *)(v27 + 48) = 0;
            }
            *(_DWORD *)v27 = *(_DWORD *)(v16 + 48);
            *(_QWORD *)(v27 + 40) = 0;
            (*(void (**)(uint64_t))(*(_QWORD *)a1 + 136))(a1);
            *(_QWORD *)v47 = v27;
            std::deque<fst::DfsState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>> *,std::allocator<fst::DfsState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>> *>>::push_back(v54, v47);
            inited = fst::SccVisitor<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::InitState(a2, *(_DWORD *)(v16 + 48), v7);
            goto LABEL_16;
          }
          v10 = fst::SccVisitor<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>::ForwardOrCrossArc((_QWORD **)a2, v12, v16);
          v25 = v11[1];
          if (!v25)
            goto LABEL_51;
LABEL_50:
          (*(void (**)(uint64_t))(*(_QWORD *)v25 + 40))(v25);
        }
      }
      else
      {
        if (v11[5] < v11[3])
        {
LABEL_29:
          v16 = v11[2] + 56 * v11[5];
          goto LABEL_30;
        }
LABEL_33:
        v56.__begin_[v12] = 2;
        v20 = v11[1];
        if (v20)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
        }
        else
        {
          v21 = (_DWORD *)v11[4];
          if (v21)
            --*v21;
        }
        v11[6] = v53;
        v53 = v11;
        --*((_QWORD *)&v55 + 1);
        std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::__maybe_remove_back_spare[abi:ne180100](v54, 1);
        if (*((_QWORD *)&v55 + 1))
        {
          v22 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)&v54[0] + 1)
                                      + (((unint64_t)(*((_QWORD *)&v55 + 1) + v55 - 1) >> 6) & 0x3FFFFFFFFFFFFF8))
                          + 8 * ((*((_QWORD *)&v55 + 1) + v55 - 1) & 0x1FF));
          v23 = *(_DWORD *)v22;
          v24 = *(_QWORD *)(v22 + 8);
          if (v24)
            (*(void (**)(uint64_t))(*(_QWORD *)v24 + 32))(v24);
          fst::SccVisitor<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>::FinishState((uint64_t)a2, v12, v23);
          v25 = *(_QWORD *)(v22 + 8);
          if (v25)
            goto LABEL_50;
          ++*(_QWORD *)(v22 + 40);
        }
        else
        {
          fst::SccVisitor<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>::FinishState((uint64_t)a2, v12, -1);
        }
      }
    }
    if ((a3 & 1) != 0)
      break;
    if ((_DWORD)v7 == v46)
      v7 = 0;
    else
      v7 = (v7 + 1);
    if ((int)v7 < (int)v6)
    {
      v28 = &v56.__begin_[(int)v7];
      v29 = (int)v6 - (uint64_t)(int)v7;
      while (*v28++)
      {
        v7 = (v7 + 1);
        if (!--v29)
        {
          v7 = v6;
          break;
        }
      }
    }
    if (v45 || (_DWORD)v7 != (_DWORD)v6)
      continue;
LABEL_67:
    if (*(_QWORD *)__x)
    {
      if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)__x + 16))(*(_QWORD *)__x) & 1) != 0)
        continue;
      if (*(_QWORD *)__x)
      {
        v31 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)__x + 24))(*(_QWORD *)__x);
        goto LABEL_73;
      }
    }
    else if (v50 >= v49)
    {
      continue;
    }
    v31 = v50;
LABEL_73:
    if (v31 != (_DWORD)v6)
    {
      if (*(_QWORD *)__x)
        (*(void (**)(_QWORD))(**(_QWORD **)__x + 32))(*(_QWORD *)__x);
      else
        ++v50;
      goto LABEL_67;
    }
    end = v56.__end_;
    if (v56.__end_ >= v56.__end_cap_.__value_)
    {
      v34 = v56.__begin_;
      v35 = v56.__end_ - v56.__begin_;
      v36 = v56.__end_ - v56.__begin_ + 1;
      if (v36 < 0)
        std::vector<int>::__throw_length_error[abi:ne180100]();
      v37 = v56.__end_cap_.__value_ - v56.__begin_;
      if (2 * (v56.__end_cap_.__value_ - v56.__begin_) > (unint64_t)v36)
        v36 = 2 * v37;
      if (v37 >= 0x3FFFFFFFFFFFFFFFLL)
        v38 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v38 = v36;
      if (v38)
        v39 = (char *)operator new(v38);
      else
        v39 = 0;
      v40 = &v39[v35];
      v41 = &v39[v35];
      *v41 = 0;
      v33 = v41 + 1;
      if (end != v34)
      {
        v42 = &end[~(unint64_t)v34];
        do
        {
          v43 = *--end;
          (v42--)[(_QWORD)v39] = v43;
        }
        while (end != v34);
        end = v56.__begin_;
        v40 = v39;
      }
      v56.__begin_ = v40;
      v56.__end_ = v33;
      v56.__end_cap_.__value_ = &v39[v38];
      if (end)
        operator delete(end);
    }
    else
    {
      *v56.__end_ = 0;
      v33 = end + 1;
    }
    v56.__end_ = v33;
    v6 = (v6 + 1);
    a3 = v44;
  }
  while ((v10 & 1) != 0 && (int)v7 < (int)v6);
LABEL_97:
  fst::SccVisitor<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::FinishVisit((uint64_t)a2);
  if (*(_QWORD *)__x)
    (*(void (**)(_QWORD))(**(_QWORD **)__x + 8))(*(_QWORD *)__x);
  v51 = &unk_1E5D19A30;
  fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>::Link>::~MemoryArena(v52);
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v51);
  std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100](v54);
  if (v56.__begin_)
  {
    v56.__end_ = v56.__begin_;
    operator delete(v56.__begin_);
  }
}

void sub_1ADC0D220(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  void *v11;
  void *v12;
  va_list va;
  uint64_t v14;
  va_list va1;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  va_list va2;

  va_start(va2, a9);
  va_start(va1, a9);
  va_start(va, a9);
  va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v14 = va_arg(va2, _QWORD);
  v16 = va_arg(va2, _QWORD);
  v17 = va_arg(va2, _QWORD);
  v18 = va_arg(va2, _QWORD);
  v19 = va_arg(va2, _QWORD);
  v20 = va_arg(va2, _QWORD);
  v21 = va_arg(va2, _QWORD);
  v12 = &unk_1E5D19A30;
  fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>::Link>::~MemoryArena((uint64_t *)va1);
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)va);
  std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100]((uint64_t *)va2);
  v11 = *(void **)(v9 - 112);
  if (v11)
  {
    *(_QWORD *)(v9 - 104) = v11;
    operator delete(v11);
  }
  _Unwind_Resume(a1);
}

unint64_t fst::SccVisitor<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>::FinishState(uint64_t a1, int a2, int a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t *v11;
  BOOL v12;
  int v13;
  int v14;
  uint64_t v15;
  unint64_t result;
  unint64_t v17;
  uint64_t v18;
  char v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  int *v23;
  unint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  int *i;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  float v32;
  float v33;
  uint64_t v34;
  _QWORD v35[3];
  float v36;
  float v37;
  float v38;

  (*(void (**)(uint64_t *__return_ptr))(**(_QWORD **)(a1 + 32) + 32))(&v34);
  v6 = fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>::Zero();
  if ((_DWORD)v34)
    v7 = v35[2] + 1;
  else
    v7 = 0;
  if (*(_DWORD *)v6)
    v8 = *(_QWORD *)(v6 + 24) + 1;
  else
    v8 = 0;
  if (v7 == v8)
  {
    v9 = 0;
    v10 = v35[1];
    v11 = (uint64_t *)(v6 + 16);
    if ((_DWORD)v34)
      v12 = (_DWORD)v34 == *(_DWORD *)v6;
    else
      v12 = 0;
    v13 = !v12;
    v14 = v13 ^ 1;
    while (1)
    {
      v15 = *v11;
      if ((v9 & 1) == 0 && !v14)
        break;
      if ((_QWORD *)v10 == v35)
        goto LABEL_42;
      if (*(_DWORD *)(v10 + 16) != *(_DWORD *)(v15 + 16))
        goto LABEL_21;
      v10 = *(_QWORD *)(v10 + 8);
      v11 = (uint64_t *)(v15 + 8);
      v9 = 1;
    }
    if ((_DWORD)v34)
      goto LABEL_21;
LABEL_42:
    v38 = v36;
    v37 = 0.0;
    v37 = *(float *)(v6 + 32);
    v32 = v36;
    v33 = v37;
    result = (unint64_t)std::__list_imp<char *>::clear(v35);
    if (v32 == v33)
    {
      v17 = a2;
      goto LABEL_23;
    }
  }
  else
  {
LABEL_21:
    result = (unint64_t)std::__list_imp<char *>::clear(v35);
  }
  v17 = a2;
  *(_QWORD *)(**(_QWORD **)(a1 + 16) + (((unint64_t)a2 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << a2;
LABEL_23:
  v18 = **(_QWORD **)(a1 + 64);
  if (*(_DWORD *)(**(_QWORD **)(a1 + 56) + 4 * v17) != *(_DWORD *)(v18 + 4 * v17))
    goto LABEL_36;
  v19 = 0;
  v20 = *(_QWORD **)(a1 + 80);
  v21 = v20[1];
  v22 = **(_QWORD **)(a1 + 16);
  v23 = (int *)(((v21 - *v20) & 0xFFFFFFFFFFFFFFFCLL) + *v20 - 4);
  do
  {
    v24 = *v23--;
    v19 |= *(_QWORD *)(v22 + ((v24 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v24;
  }
  while ((_DWORD)v24 != a2);
  v25 = *(_QWORD **)a1;
  v26 = **(_QWORD **)(a1 + 72);
  for (i = (int *)(v21 - 4); ; --i)
  {
    v28 = *i;
    if (v25)
      *(_DWORD *)(*v25 + 4 * v28) = *(_DWORD *)(a1 + 48);
    result = v28 >> 6;
    v29 = 1 << v28;
    if ((v19 & 1) == 0)
      break;
    *(_QWORD *)(v22 + 8 * result) |= v29;
    *(_QWORD *)(v26 + 8 * result) &= ~v29;
    if ((_DWORD)v28 == a2)
    {
      v20[1] = i;
      goto LABEL_35;
    }
LABEL_33:
    ;
  }
  *(_QWORD *)(v26 + 8 * result) &= ~v29;
  if ((_DWORD)v28 != a2)
    goto LABEL_33;
  v20[1] = i;
  **(_QWORD **)(a1 + 24) = **(_QWORD **)(a1 + 24) & 0xFFFFF3FFFFFFFFFFLL | 0x80000000000;
LABEL_35:
  ++*(_DWORD *)(a1 + 48);
LABEL_36:
  if (a3 != -1)
  {
    v30 = **(_QWORD **)(a1 + 16);
    if (((*(_QWORD *)(v30 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v17) & 1) != 0)
      *(_QWORD *)(v30 + (((unint64_t)a3 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << a3;
    v31 = *(_DWORD *)(v18 + 4 * v17);
    if (v31 < *(_DWORD *)(v18 + 4 * a3))
      *(_DWORD *)(v18 + 4 * a3) = v31;
  }
  return result;
}

void sub_1ADC0D564(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__list_imp<char *>::clear((_QWORD *)(v1 + 8));
  _Unwind_Resume(a1);
}

void fst::MemoryPool<fst::DfsState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>::~MemoryPool(quasar::Bitmap *a1)
{
  *(_QWORD *)a1 = &unk_1E5D19A30;
  fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>::Link>::~MemoryArena((_QWORD *)a1 + 1);
  quasar::Bitmap::~Bitmap(a1);
}

{
  *(_QWORD *)a1 = &unk_1E5D19A30;
  fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>::Link>::~MemoryArena((_QWORD *)a1 + 1);
  quasar::Bitmap::~Bitmap(a1);
  JUMPOUT(0x1AF44D190);
}

_QWORD *fst::MemoryPool<fst::DfsState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>::MemoryPool(_QWORD *a1, uint64_t a2)
{
  *a1 = &unk_1E5D19A30;
  fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>::Link>::MemoryArena(a1 + 1, a2);
  a1[7] = 0;
  return a1;
}

void sub_1ADC0D5E4(_Unwind_Exception *a1)
{
  quasar::Bitmap *v1;

  quasar::Bitmap::~Bitmap(v1);
  _Unwind_Resume(a1);
}

uint64_t fst::MemoryPool<fst::DfsState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>::Size()
{
  return 48;
}

_QWORD *fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>::Link>::MemoryArena(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;

  *a1 = &unk_1E5D1A9E8;
  a1[1] = 56 * a2;
  a1[2] = 0;
  a1[3] = a1 + 3;
  a1[4] = a1 + 3;
  a1[5] = 0;
  v3 = operator new[]();
  v4 = operator new(0x18uLL);
  v5 = (_QWORD *)a1[4];
  v6 = a1[5];
  *v4 = a1 + 3;
  v4[1] = v5;
  v4[2] = v3;
  *v5 = v4;
  a1[4] = v4;
  a1[5] = v6 + 1;
  return a1;
}

void sub_1ADC0D6CC(_Unwind_Exception *a1)
{
  quasar::Bitmap *v1;
  _QWORD *v2;

  std::__list_imp<char *>::clear(v2);
  quasar::Bitmap::~Bitmap(v1);
  _Unwind_Resume(a1);
}

void fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>::Link>::~MemoryArena(_QWORD *a1)
{
  fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>::Link>::~MemoryArena(a1);
  JUMPOUT(0x1AF44D190);
}

{
  _QWORD *v2;
  _QWORD *i;
  uint64_t v4;

  *a1 = &unk_1E5D1A9E8;
  v2 = a1 + 3;
  for (i = (_QWORD *)a1[4]; i != v2; i = (_QWORD *)i[1])
  {
    v4 = i[2];
    if (v4)
      MEMORY[0x1AF44D160](v4, 0x1000C8077774924);
  }
  std::__list_imp<char *>::clear(v2);
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)a1);
}

uint64_t fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>::Link>::Size()
{
  return 56;
}

void std::deque<fst::DfsState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>> *,std::allocator<fst::DfsState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>> *>>::push_back(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;

  v4 = a1[2];
  v5 = a1[1];
  if (v4 == v5)
    v6 = 0;
  else
    v6 = ((v4 - v5) << 6) - 1;
  v7 = a1[5];
  v8 = v7 + a1[4];
  if (v6 == v8)
  {
    std::deque<fst::DfsState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>> *,std::allocator<fst::DfsState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>> *>>::__add_back_capacity(a1);
    v5 = a1[1];
    v7 = a1[5];
    v8 = a1[4] + v7;
  }
  *(_QWORD *)(*(_QWORD *)(v5 + ((v8 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v8 & 0x1FF)) = *a2;
  a1[5] = v7 + 1;
}

void std::deque<fst::DfsState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>> *,std::allocator<fst::DfsState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>> *>>::__add_back_capacity(_QWORD *a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  char *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  unint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  void *v53;
  __int128 v54;
  __int128 v55;
  _QWORD *v56;

  v2 = a1[4];
  v3 = v2 >= 0x200;
  v4 = v2 - 512;
  if (v3)
  {
    v5 = (uint64_t)(a1 + 3);
    v6 = (char *)a1[3];
    a1[4] = v4;
    v7 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v11 = *v7;
    v9 = (char *)(v7 + 1);
    v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(_QWORD *)v8 = v10;
      a1[2] += 8;
      return;
    }
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v33 = 1;
      else
        v33 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>(v5, v33);
      v35 = &v34[8 * (v33 >> 2)];
      v37 = &v34[8 * v36];
      v38 = (uint64_t *)a1[1];
      v8 = v35;
      v39 = a1[2] - (_QWORD)v38;
      if (v39)
      {
        v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        v40 = 8 * (v39 >> 3);
        v41 = &v34[8 * (v33 >> 2)];
        do
        {
          v42 = *v38++;
          *(_QWORD *)v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    v13 = v12 >> 3;
    v14 = v12 >> 3 < -1;
    v15 = (v12 >> 3) + 2;
    if (v14)
      v16 = v15;
    else
      v16 = v13 + 1;
    v17 = -(v16 >> 1);
    v18 = v16 >> 1;
    v19 = &v9[-8 * v18];
    v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      v9 = (char *)a1[1];
    }
    v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  v21 = a1[2];
  v22 = (v21 - a1[1]) >> 3;
  v23 = a1[3];
  v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(_QWORD *)&v54 = operator new(0x1000uLL);
      std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **>>::push_back(a1, &v54);
      return;
    }
    *(_QWORD *)&v54 = operator new(0x1000uLL);
    std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **>>::push_front((uint64_t)a1, &v54);
    v44 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v45 = *v44;
    v9 = (char *)(v44 + 1);
    v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3])
      goto LABEL_33;
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v46 = 1;
      else
        v46 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(a1 + 3), v46);
      v35 = &v34[8 * (v46 >> 2)];
      v37 = &v34[8 * v47];
      v48 = (uint64_t *)a1[1];
      v8 = v35;
      v49 = a1[2] - (_QWORD)v48;
      if (v49)
      {
        v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        v50 = 8 * (v49 >> 3);
        v51 = &v34[8 * (v46 >> 2)];
        do
        {
          v52 = *v48++;
          *(_QWORD *)v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1)
    v25 = 1;
  else
    v25 = v24 >> 2;
  v56 = a1 + 3;
  *(_QWORD *)&v54 = std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(a1 + 3), v25);
  *((_QWORD *)&v54 + 1) = v54 + 8 * v22;
  *(_QWORD *)&v55 = *((_QWORD *)&v54 + 1);
  *((_QWORD *)&v55 + 1) = v54 + 8 * v26;
  v53 = operator new(0x1000uLL);
  std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **> &>::push_back(&v54, &v53);
  v27 = (_QWORD *)a1[2];
  v28 = -7 - (_QWORD)v27;
  while (v27 != (_QWORD *)a1[1])
  {
    --v27;
    v28 += 8;
    std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **> &>::push_front((uint64_t)&v54, v27);
  }
  v29 = (char *)*a1;
  v30 = v54;
  v31 = v55;
  *(_QWORD *)&v54 = *a1;
  *((_QWORD *)&v54 + 1) = v27;
  v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  v55 = v32;
  if (v27 != (_QWORD *)v32)
    *(_QWORD *)&v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  if (v29)
    operator delete(v29);
}

void sub_1ADC0DAD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  void *v13;

  operator delete(v13);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t fst::ProductWeight<fst::StringWeight<int,(fst::StringType)0>,fst::TropicalWeightTpl<float>>::One()
{
  unsigned __int8 v0;
  uint64_t v2;
  _DWORD *v3;

  if ((v0 & 1) == 0
  {
    v2 = operator new();
    v3 = (_DWORD *)fst::PairWeight<fst::StringWeight<int,(fst::StringType)0>,fst::TropicalWeightTpl<float>>::One();
    *(_DWORD *)v2 = *v3;
    std::list<int>::list((_QWORD *)(v2 + 8), (uint64_t)(v3 + 2));
    *(_DWORD *)(v2 + 32) = v3[8];
    fst::ProductWeight<fst::StringWeight<int,(fst::StringType)0>,fst::TropicalWeightTpl<float>>::One(void)::one = v2;
  }
  return fst::ProductWeight<fst::StringWeight<int,(fst::StringType)0>,fst::TropicalWeightTpl<float>>::One(void)::one;
}

void sub_1ADC0DBBC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t fst::PairWeight<fst::StringWeight<int,(fst::StringType)0>,fst::TropicalWeightTpl<float>>::One()
{
  unsigned __int8 v0;
  uint64_t v2;
  int *v3;
  int v4;
  _QWORD v5[3];

  if ((v0 & 1) == 0
  {
    v2 = operator new();
    v3 = (int *)fst::StringWeight<int,(fst::StringType)0>::One();
    v4 = *v3;
    std::list<int>::list(v5, (uint64_t)(v3 + 2));
    *(_DWORD *)v2 = v4;
    std::list<int>::list((_QWORD *)(v2 + 8), (uint64_t)v5);
    *(_DWORD *)(v2 + 32) = 0;
    std::__list_imp<char *>::clear(v5);
    fst::PairWeight<fst::StringWeight<int,(fst::StringType)0>,fst::TropicalWeightTpl<float>>::One(void)::one = v2;
  }
  return fst::PairWeight<fst::StringWeight<int,(fst::StringType)0>,fst::TropicalWeightTpl<float>>::One(void)::one;
}

void sub_1ADC0DCB4(_Unwind_Exception *a1)
{
  uint64_t v1;
  _QWORD *v2;

  std::__list_imp<char *>::clear(v2);
  MEMORY[0x1AF44D190](v1, 0x1020C4067685F46);
  _Unwind_Resume(a1);
}

void fst::ArcBuffer<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>::SetFromFst<fst::Fst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t v17;
  _DWORD *v18;
  unint64_t v19;
  unint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  unint64_t v28;
  _DWORD *v29;

  (*(void (**)(uint64_t, uint64_t, uint64_t **))(*(_QWORD *)a2 + 136))(a2, a3, &v26);
  if (!v26 && (a4 & 1) == 0)
  {
    v10 = v27 + 56 * v28;
    *(_QWORD *)(a1 + 16) = v27;
    *(_QWORD *)(a1 + 24) = v10;
    if (*(_QWORD *)a1)
    {
      free(*(void **)a1);
      *(_QWORD *)a1 = 0;
    }
    *(_QWORD *)(a1 + 8) = 0;
    return;
  }
  v11 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 40))(a2, a3);
  v12 = a5;
  if (!a4)
    v12 = 0;
  v13 = v11 + v12;
  if (*(_QWORD *)(a1 + 8) < (unint64_t)(v11 + v12))
  {
    if (*(_QWORD *)a1)
      free(*(void **)a1);
    v25 = 0x4000;
    if (v13 > 0x4000)
      v25 = v13;
    *(_QWORD *)(a1 + 8) = v25;
    v15 = (uint64_t *)malloc_type_malloc(56 * v25, 0x1020040540EBC04uLL);
    *(_QWORD *)a1 = v15;
    *(_QWORD *)(a1 + 16) = v15;
    v14 = v15;
  }
  else
  {
    v14 = *(uint64_t **)(a1 + 16);
    v15 = *(uint64_t **)a1;
  }
  *(_QWORD *)(a1 + 24) = &v14[7 * v13];
  v16 = v26;
  v17 = v27;
  v19 = v28;
  v18 = v29;
  if (v29)
    ++*v29;
  v20 = 0;
LABEL_13:
  v15 += 7;
  while (v16)
  {
    v21 = (*(uint64_t (**)(uint64_t *))(*v16 + 24))(v16);
    v22 = *v16;
    if (v21)
    {
      (*(void (**)(uint64_t *))(v22 + 8))(v16);
      return;
    }
    v23 = (*(uint64_t (**)(uint64_t *))(v22 + 32))(v16);
LABEL_18:
    v24 = v15 - 7;
    *v24 = *(_QWORD *)v23;
    *((_DWORD *)v24 + 2) = *(_DWORD *)(v23 + 8);
    if (v15 - 7 != (uint64_t *)v23)
      std::list<int>::__assign_with_sentinel[abi:ne180100]<std::__list_const_iterator<int,void *>,std::__list_const_iterator<int,void *>>(v15 - 5, *(_QWORD *)(v23 + 24), v23 + 16);
    *((_DWORD *)v15 - 4) = *(_DWORD *)(v23 + 40);
    *((_DWORD *)v15 - 2) = *(_DWORD *)(v23 + 48);
    if (!v16)
    {
      ++v20;
      goto LABEL_13;
    }
    v15 += 7;
    (*(void (**)(uint64_t *))(*v16 + 40))(v16);
  }
  v23 = v17 + 56 * v20;
  if (v20 < v19)
    goto LABEL_18;
  if (v18)
    --*v18;
}

void sub_1ADC0DF10(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  _DWORD *v2;

  if (v1)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  }
  else if (v2)
  {
    --*v2;
  }
  _Unwind_Resume(exception_object);
}

uint64_t fst::VectorFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>::WriteFst<fst::VectorFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>>(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  int v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _DWORD *v17;
  uint64_t v18;
  _DWORD *v19;
  int v20;
  fst *v21;
  _QWORD *v22;
  _QWORD *v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t updated;
  fst *v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  _BYTE v34[8];
  void *v35[2];
  void *v36[2];
  __int128 v37;
  __int128 v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  std::string __p[5];
  uint64_t v43;
  uint64_t v44;

  v44 = *MEMORY[0x1E0C80C00];
  v37 = 0u;
  v38 = 0u;
  *(_OWORD *)v35 = 0u;
  *(_OWORD *)v36 = 0u;
  v6 = -1;
  v40 = 0;
  v41 = 0;
  v39 = -1;
  v39 = (*(int (**)(_QWORD *))(*a1 + 24))(a1);
  v40 = -1;
  if ((*(uint64_t (**)(_QWORD *, uint64_t, _QWORD))(*a1 + 64))(a1, 1, 0))
  {
    v6 = 0;
LABEL_3:
    v7 = 0;
    v40 = (int)fst::CountStates<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>((uint64_t)a1);
    goto LABEL_6;
  }
  v8 = (char *)a2 + *(_QWORD *)(*a2 - 24);
  if ((v8[32] & 5) == 0)
  {
    (*(void (**)(std::string *__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**((_QWORD **)v8 + 5) + 32))(__p, *((_QWORD *)v8 + 5), 0, 1, 16);
    v6 = v43;
    if (v43 != -1)
      goto LABEL_3;
  }
  v7 = 1;
LABEL_6:
  v9 = (*(uint64_t (**)(_QWORD *, uint64_t, _QWORD))(*a1 + 64))(a1, 0x3FFFFFFF0004, 0);
  std::string::basic_string[abi:ne180100]<0>(__p, "vector");
  v9 |= 3uLL;
  fst::FstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>::WriteFstHeader((uint64_t)a1, (uint64_t)a2, (_BYTE *)a3, 2, __p, v9, (uint64_t)v34);
  v31 = v9;
  v32 = v6;
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p[0].__r_.__value_.__l.__data_);
  v10 = *(_QWORD *)(a1[1] + 72) - *(_QWORD *)(a1[1] + 64);
  v11 = v10 >> 3;
  if ((int)(v10 >> 3) < 1)
  {
    LODWORD(v11) = 0;
  }
  else
  {
    v12 = 0;
    v13 = (v10 >> 3);
    do
    {
      (*(void (**)(std::string *__return_ptr, _QWORD *, uint64_t))(*a1 + 32))(__p, a1, v12);
      fst::PairWeight<fst::StringWeight<int,(fst::StringType)1>,fst::LogWeightTpl<float>>::Write(__p);
      std::__list_imp<char *>::clear(&__p[0].__r_.__value_.__l.__size_);
      __p[0].__r_.__value_.__r.__words[0] = (*(uint64_t (**)(_QWORD *, uint64_t))(*a1 + 40))(a1, v12);
      std::ostream::write();
      v14 = *(_QWORD *)(*(_QWORD *)(a1[1] + 64) + 8 * v12);
      v16 = *(_QWORD *)(v14 + 56);
      v15 = *(_QWORD *)(v14 + 64);
      if (v15 == v16)
        v17 = 0;
      else
        v17 = *(_DWORD **)(v14 + 56);
      if (v15 != v16)
      {
        if ((unint64_t)((v15 - v16) / 56) <= 1)
          v18 = 1;
        else
          v18 = (v15 - v16) / 56;
        v19 = v17;
        do
        {
          v20 = *v19;
          v19 += 14;
          LODWORD(__p[0].__r_.__value_.__l.__data_) = v20;
          std::ostream::write();
          LODWORD(__p[0].__r_.__value_.__l.__data_) = v17[1];
          std::ostream::write();
          fst::PairWeight<fst::StringWeight<int,(fst::StringType)1>,fst::LogWeightTpl<float>>::Write(v17 + 2);
          LODWORD(__p[0].__r_.__value_.__l.__data_) = v17[12];
          std::ostream::write();
          v17 = v19;
          --v18;
        }
        while (v18);
      }
      ++v12;
    }
    while (v12 != v13);
  }
  std::ostream::flush();
  if ((*((_BYTE *)a2 + *(_QWORD *)(*a2 - 24) + 32) & 5) != 0)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
    v21 = fst::LogMessage::LogMessage((fst *)&v33, (uint64_t)__p);
    v22 = (_QWORD *)fst::cerr(v21);
    v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"VectorFst::Write: write failed: ", 32);
    v24 = *(char *)(a3 + 23);
    if (v24 >= 0)
      v25 = a3;
    else
      v25 = *(_QWORD *)a3;
    if (v24 >= 0)
      v26 = *(unsigned __int8 *)(a3 + 23);
    else
      v26 = *(_QWORD *)(a3 + 8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, v25, v26);
LABEL_30:
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v33);
    if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p[0].__r_.__value_.__l.__data_);
    updated = 0;
    goto LABEL_33;
  }
  if (!v7)
  {
    if (v40 == v11)
    {
      updated = 1;
      goto LABEL_33;
    }
    std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
    v29 = fst::LogMessage::LogMessage((fst *)&v33, (uint64_t)__p);
    v30 = (_QWORD *)fst::cerr(v29);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)"Inconsistent number of states observed during write", 51);
    goto LABEL_30;
  }
  v40 = v11;
  std::string::basic_string[abi:ne180100]<0>(__p, "vector");
  updated = fst::FstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>::UpdateFstHeader((uint64_t)a1, a2, a3, 2, __p, v31, (uint64_t)v34, v32);
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p[0].__r_.__value_.__l.__data_);
LABEL_33:
  if (SHIBYTE(v37) < 0)
    operator delete(v36[1]);
  if (SHIBYTE(v36[0]) < 0)
    operator delete(v35[0]);
  return updated;
}

void sub_1ADC0E370(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  if (a34 < 0)
    operator delete(__p);
  fst::FstHeader::~FstHeader(&a17);
  _Unwind_Resume(a1);
}

uint64_t fst::FstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>::WriteFstHeader(uint64_t a1, uint64_t a2, _BYTE *a3, int a4, std::string *__str, uint64_t a6, uint64_t a7)
{
  const std::string *v13;
  BOOL v14;
  int v15;
  uint64_t v16;
  BOOL v17;
  int v18;
  BOOL v19;
  uint64_t v20;
  uint64_t result;
  BOOL v22;
  uint64_t v23;

  if (a3[24])
  {
    std::string::operator=((std::string *)(a7 + 8), __str);
    v13 = (const std::string *)fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>::Type();
    std::string::operator=((std::string *)(a7 + 32), v13);
    *(_DWORD *)(a7 + 56) = a4;
    *(_QWORD *)(a7 + 64) = a6;
    if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 112))(a1))
      v14 = a3[25] == 0;
    else
      v14 = 1;
    v15 = !v14;
    v16 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1);
    if (a3[26])
      v17 = v16 == 0;
    else
      v17 = 1;
    v18 = v15 | 2;
    if (v17)
      v18 = v15;
    if (a3[27])
      v18 |= 4u;
    *(_DWORD *)(a7 + 60) = v18;
    fst::FstHeader::Write();
  }
  if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 112))(a1))
    v19 = a3[25] == 0;
  else
    v19 = 1;
  if (!v19)
  {
    v20 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 112))(a1);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v20 + 72))(v20, a2);
  }
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1);
  if (result)
    v22 = a3[26] == 0;
  else
    v22 = 1;
  if (!v22)
  {
    v23 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1);
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v23 + 72))(v23, a2);
  }
  return result;
}

uint64_t fst::FstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>::UpdateFstHeader(uint64_t a1, _QWORD *a2, uint64_t a3, int a4, std::string *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char *v16;
  uint64_t v17;
  fst *v18;
  _QWORD *v19;
  _QWORD *v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  fst *v24;
  _QWORD *v25;
  int v26;
  char *v27;
  fst *v28;
  _QWORD *v29;
  int v30;
  _BYTE v32[16];
  _QWORD v33[17];
  __int128 __p;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  uint64_t v42;
  uint64_t v43;

  v43 = *MEMORY[0x1E0C80C00];
  MEMORY[0x1AF44CB90](v32);
  v16 = (char *)a2 + *(_QWORD *)(*a2 - 24);
  if ((v16[32] & 5) == 0)
  {
    v17 = *((_QWORD *)v16 + 5);
    v40 = 0u;
    v41 = 0u;
    v38 = 0u;
    v39 = 0u;
    v36 = 0u;
    v37 = 0u;
    __p = 0u;
    v35 = 0u;
    v42 = a8;
    (*(void (**)(_QWORD *__return_ptr, uint64_t, __int128 *, uint64_t))(*(_QWORD *)v17 + 40))(v33, v17, &__p, 16);
    if (v33[16] == -1)
      std::ios_base::clear((std::ios_base *)((char *)a2 + *(_QWORD *)(*a2 - 24)), *(_DWORD *)((char *)a2 + *(_QWORD *)(*a2 - 24) + 32) | 4);
  }
  MEMORY[0x1AF44CB9C](v32);
  if ((*((_BYTE *)a2 + *(_QWORD *)(*a2 - 24) + 32) & 5) != 0)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "ERROR");
    v18 = fst::LogMessage::LogMessage((fst *)v33, (uint64_t)&__p);
    v19 = (_QWORD *)fst::cerr(v18);
    v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"Fst::UpdateFstHeader: write failed: ", 36);
    v21 = *(char *)(a3 + 23);
    if (v21 >= 0)
      v22 = a3;
    else
      v22 = *(_QWORD *)a3;
    if (v21 >= 0)
      v23 = *(unsigned __int8 *)(a3 + 23);
    else
      v23 = *(_QWORD *)(a3 + 8);
  }
  else
  {
    fst::FstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>::WriteFstHeader(a1, (uint64_t)a2, (_BYTE *)a3, a4, a5, a6, a7);
    if ((*((_BYTE *)a2 + *(_QWORD *)(*a2 - 24) + 32) & 5) != 0)
    {
      std::string::basic_string[abi:ne180100]<0>(&__p, "ERROR");
      v24 = fst::LogMessage::LogMessage((fst *)v33, (uint64_t)&__p);
      v25 = (_QWORD *)fst::cerr(v24);
      v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)"Fst::UpdateFstHeader: write failed: ", 36);
      v26 = *(char *)(a3 + 23);
      if (v26 >= 0)
        v22 = a3;
      else
        v22 = *(_QWORD *)a3;
      if (v26 >= 0)
        v23 = *(unsigned __int8 *)(a3 + 23);
      else
        v23 = *(_QWORD *)(a3 + 8);
    }
    else
    {
      MEMORY[0x1AF44CB90](v33, a2);
      v27 = (char *)a2 + *(_QWORD *)(*a2 - 24);
      if ((v27[32] & 5) == 0)
      {
        (*(void (**)(__int128 *__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**((_QWORD **)v27 + 5) + 32))(&__p, *((_QWORD *)v27 + 5), 0, 2, 16);
        if (v42 == -1)
          std::ios_base::clear((std::ios_base *)((char *)a2 + *(_QWORD *)(*a2 - 24)), *(_DWORD *)((char *)a2 + *(_QWORD *)(*a2 - 24) + 32) | 4);
      }
      MEMORY[0x1AF44CB9C](v33);
      if ((*((_BYTE *)a2 + *(_QWORD *)(*a2 - 24) + 32) & 5) == 0)
        return 1;
      std::string::basic_string[abi:ne180100]<0>(&__p, "ERROR");
      v28 = fst::LogMessage::LogMessage((fst *)v33, (uint64_t)&__p);
      v29 = (_QWORD *)fst::cerr(v28);
      v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)"Fst::UpdateFstHeader: write failed: ", 36);
      v30 = *(char *)(a3 + 23);
      if (v30 >= 0)
        v22 = a3;
      else
        v22 = *(_QWORD *)a3;
      if (v30 >= 0)
        v23 = *(unsigned __int8 *)(a3 + 23);
      else
        v23 = *(_QWORD *)(a3 + 8);
    }
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, v22, v23);
  fst::LogMessage::~LogMessage((fst::LogMessage *)v33);
  if (SBYTE7(v35) < 0)
    operator delete((void *)__p);
  return 0;
}

void sub_1ADC0E860(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  MEMORY[0x1AF44CB9C](&a12);
  _Unwind_Resume(a1);
}

uint64_t fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>::Type()
{
  unsigned __int8 v0;
  uint64_t v2;

  if ((v0 & 1) == 0
  {
    v2 = operator new();
    fst::ArcTpl<fst::TropicalWeightTpl<float>,int>::Type();
    std::operator+<char>();
    fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>::Type(void)::type = v2;
  }
  return fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>::Type(void)::type;
}

void sub_1ADC0E950(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t fst::Fst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>::WriteFile(fst *a1, uint64_t a2)
{
  fst *v4;
  _QWORD *v5;
  _QWORD *v6;
  int v7;
  const std::string::value_type *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  char v13;
  std::string __p;
  __int16 v16;
  char v17;
  char v18;
  char v19;
  std::string v20;
  __int16 v21;
  char v22;
  char v23;
  _BYTE v24[384];
  _QWORD v25[20];

  v25[19] = *MEMORY[0x1E0C80C00];
  if (*(char *)(a2 + 23) < 0)
  {
    if (*(_QWORD *)(a2 + 8))
    {
LABEL_5:
      std::ofstream::basic_ofstream(&v20);
      if ((v24[*(_QWORD *)(v20.__r_.__value_.__r.__words[0] - 24)] & 5) != 0)
      {
        std::string::basic_string[abi:ne180100]<0>(&__p, "ERROR");
        v4 = fst::LogMessage::LogMessage((fst *)&v19, (uint64_t)&__p);
        v5 = (_QWORD *)fst::cerr(v4);
        v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Fst::Write: Can't open file: ", 29);
        v7 = *(char *)(a2 + 23);
        if (v7 >= 0)
          v8 = (const std::string::value_type *)a2;
        else
          v8 = *(const std::string::value_type **)a2;
        if (v7 >= 0)
          v9 = *(unsigned __int8 *)(a2 + 23);
        else
          v9 = *(_QWORD *)(a2 + 8);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)v8, v9);
        fst::LogMessage::~LogMessage((fst::LogMessage *)&v19);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        v10 = 0;
      }
      else
      {
        v13 = FLAGS_fst_align;
        if (*(char *)(a2 + 23) < 0)
          std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
        else
          __p = *(std::string *)a2;
        v16 = 257;
        v17 = 1;
        v18 = v13;
        v10 = (*(uint64_t (**)(fst *, std::string *, std::string *))(*(_QWORD *)a1 + 96))(a1, &v20, &__p);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
      }
      v20.__r_.__value_.__r.__words[0] = *MEMORY[0x1E0DE4F48];
      *(std::string::size_type *)((char *)v20.__r_.__value_.__r.__words
                                + *(_QWORD *)(v20.__r_.__value_.__r.__words[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F48]
                                                                                                  + 24);
      MEMORY[0x1AF44CA70](&v20.__r_.__value_.__r.__words[1]);
      std::ostream::~ostream();
      MEMORY[0x1AF44D094](v25);
      return v10;
    }
  }
  else if (*(_BYTE *)(a2 + 23))
  {
    goto LABEL_5;
  }
  v11 = fst::cout(a1);
  std::string::basic_string[abi:ne180100]<0>(&__p, "standard output");
  v12 = FLAGS_fst_align;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v20, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  else
    v20 = __p;
  v21 = 257;
  v22 = 1;
  v23 = v12;
  v10 = (*(uint64_t (**)(fst *, uint64_t, std::string *))(*(_QWORD *)a1 + 96))(a1, v11, &v20);
  if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v20.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return v10;
}

void sub_1ADC0EBF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  std::ofstream::~ofstream(&a21);
  _Unwind_Resume(a1);
}

_QWORD *fst::VectorFstImpl<fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>::SetFinal(_QWORD *a1, int a2, int *a3)
{
  int *v6;
  unint64_t v7;
  int v9;
  _QWORD v10[3];
  int v11;
  int v12;
  _QWORD v13[3];
  int v14;
  int v15;
  _QWORD v16[3];
  int v17;
  int v18;
  _QWORD v19[3];
  int v20;

  v6 = *(int **)(a1[8] + 8 * a2);
  v18 = *v6;
  std::list<int>::list(v19, (uint64_t)(v6 + 2));
  v20 = v6[8];
  v15 = *a3;
  std::list<int>::list(v16, (uint64_t)(a3 + 2));
  v17 = a3[8];
  fst::VectorFstBaseImpl<fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>::SetFinal((uint64_t)a1, a2, &v15);
  std::__list_imp<char *>::clear(v16);
  v7 = (*(uint64_t (**)(_QWORD *))(*a1 + 24))(a1);
  v12 = v18;
  std::list<int>::list(v13, (uint64_t)v19);
  v14 = v20;
  v9 = *a3;
  std::list<int>::list(v10, (uint64_t)(a3 + 2));
  v11 = a3[8];
  a1[1] = a1[1] & 4 | fst::SetFinalProperties<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>>(v7, &v12, &v9);
  std::__list_imp<char *>::clear(v10);
  std::__list_imp<char *>::clear(v13);
  return std::__list_imp<char *>::clear(v19);
}

void sub_1ADC0EDB0(_Unwind_Exception *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;

  std::__list_imp<char *>::clear(v3);
  std::__list_imp<char *>::clear(v2);
  std::__list_imp<char *>::clear(v1);
  _Unwind_Resume(a1);
}

uint64_t fst::SetFinalProperties<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>>(unint64_t a1, int *a2, int *a3)
{
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t *v11;
  uint64_t *v12;
  BOOL v13;
  _BOOL4 v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t *v23;
  uint64_t *v24;
  BOOL v25;
  _BOOL4 v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  uint64_t *v35;
  uint64_t *v36;
  BOOL v37;
  _BOOL4 v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  char v46;
  uint64_t *v47;
  uint64_t *v48;
  BOOL v49;
  _BOOL4 v50;
  int v51;
  uint64_t v52;
  uint64_t v53;

  v6 = fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>::Zero();
  v7 = *a2;
  if (*a2)
    v8 = *((_QWORD *)a2 + 3) + 1;
  else
    v8 = 0;
  if (*(_DWORD *)v6)
    v9 = *(_QWORD *)(v6 + 24) + 1;
  else
    v9 = 0;
  if (v8 != v9)
    goto LABEL_22;
  v10 = 0;
  v11 = (uint64_t *)(a2 + 4);
  v12 = (uint64_t *)(v6 + 16);
  v13 = v7 && v7 == *(_DWORD *)v6;
  v14 = !v13;
  v15 = !v14;
  while (1)
  {
    v16 = *v11;
    v17 = *v12;
    if ((v10 & 1) == 0 && !v15)
      break;
    if ((int *)v16 == a2 + 2)
      goto LABEL_21;
    if (*(_DWORD *)(v16 + 16) != *(_DWORD *)(v17 + 16))
      goto LABEL_22;
    v11 = (uint64_t *)(v16 + 8);
    v12 = (uint64_t *)(v17 + 8);
    v10 = 1;
  }
  if (v7)
    goto LABEL_22;
LABEL_21:
  if (*((float *)a2 + 8) != *(float *)(v6 + 32))
  {
LABEL_22:
    v18 = fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>::One();
    v19 = *a2;
    if (*a2)
      v20 = *((_QWORD *)a2 + 3) + 1;
    else
      v20 = 0;
    if (*(_DWORD *)v18)
      v21 = *(_QWORD *)(v18 + 24) + 1;
    else
      v21 = 0;
    if (v20 != v21)
      goto LABEL_43;
    v22 = 0;
    v23 = (uint64_t *)(a2 + 4);
    v24 = (uint64_t *)(v18 + 16);
    v25 = v19 && v19 == *(_DWORD *)v18;
    v26 = !v25;
    v27 = !v26;
    while (1)
    {
      v28 = *v23;
      v29 = *v24;
      if ((v22 & 1) == 0 && !v27)
        break;
      if ((int *)v28 == a2 + 2)
        goto LABEL_42;
      if (*(_DWORD *)(v28 + 16) != *(_DWORD *)(v29 + 16))
        goto LABEL_43;
      v23 = (uint64_t *)(v28 + 8);
      v24 = (uint64_t *)(v29 + 8);
      v22 = 1;
    }
    if (v19)
      goto LABEL_43;
LABEL_42:
    if (*((float *)a2 + 8) != *(float *)(v18 + 32))
LABEL_43:
      a1 &= ~0x100000000uLL;
  }
  v30 = fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>::Zero();
  v31 = *a3;
  if (*a3)
    v32 = *((_QWORD *)a3 + 3) + 1;
  else
    v32 = 0;
  if (*(_DWORD *)v30)
    v33 = *(_QWORD *)(v30 + 24) + 1;
  else
    v33 = 0;
  if (v32 != v33)
    goto LABEL_65;
  v34 = 0;
  v35 = (uint64_t *)(a3 + 4);
  v36 = (uint64_t *)(v30 + 16);
  v37 = v31 && v31 == *(_DWORD *)v30;
  v38 = !v37;
  v39 = !v38;
  while (1)
  {
    v40 = *v35;
    v41 = *v36;
    if ((v34 & 1) == 0 && !v39)
      break;
    if ((int *)v40 == a3 + 2)
      goto LABEL_64;
    if (*(_DWORD *)(v40 + 16) != *(_DWORD *)(v41 + 16))
      goto LABEL_65;
    v35 = (uint64_t *)(v40 + 8);
    v36 = (uint64_t *)(v41 + 8);
    v34 = 1;
  }
  if (v31)
    goto LABEL_65;
LABEL_64:
  if (*((float *)a3 + 8) != *(float *)(v30 + 32))
  {
LABEL_65:
    v42 = fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>::One();
    v43 = *a3;
    if (*a3)
      v44 = *((_QWORD *)a3 + 3) + 1;
    else
      v44 = 0;
    if (*(_DWORD *)v42)
      v45 = *(_QWORD *)(v42 + 24) + 1;
    else
      v45 = 0;
    if (v44 != v45)
      goto LABEL_86;
    v46 = 0;
    v47 = (uint64_t *)(a3 + 4);
    v48 = (uint64_t *)(v42 + 16);
    v49 = v43 && v43 == *(_DWORD *)v42;
    v50 = !v49;
    v51 = !v50;
    while (1)
    {
      v52 = *v47;
      v53 = *v48;
      if ((v46 & 1) == 0 && !v51)
        break;
      if ((int *)v52 == a3 + 2)
        goto LABEL_85;
      if (*(_DWORD *)(v52 + 16) != *(_DWORD *)(v53 + 16))
        goto LABEL_86;
      v47 = (uint64_t *)(v52 + 8);
      v48 = (uint64_t *)(v53 + 8);
      v46 = 1;
    }
    if (v43)
      goto LABEL_86;
LABEL_85:
    if (*((float *)a3 + 8) != *(float *)(v42 + 32))
LABEL_86:
      a1 = a1 & 0xFFFFFFFCFFFFFFFFLL | 0x100000000;
  }
  return a1 & 0x3FFFFFF0007;
}

uint64_t fst::VectorFstImpl<fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>::AddArc(_QWORD *a1, int a2, int *a3)
{
  uint64_t v6;
  _DWORD *v7;
  unint64_t v8;

  v6 = *(_QWORD *)(*(_QWORD *)(a1[8] + 8 * a2) + 64);
  if (v6 == *(_QWORD *)(*(_QWORD *)(a1[8] + 8 * a2) + 56))
    v7 = 0;
  else
    v7 = (_DWORD *)(v6 - 56);
  v8 = (*(uint64_t (**)(_QWORD *))(*a1 + 24))(a1);
  a1[1] = a1[1] & 4 | fst::AddArcProperties<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>(v8, a2, a3, v7);
  return fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>::AddArc(*(_QWORD **)(a1[8] + 8 * a2), a3);
}

uint64_t fst::AddArcProperties<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>(unint64_t a1, int a2, int *a3, _DWORD *a4)
{
  int v6;
  int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t *v17;
  uint64_t *v18;
  BOOL v19;
  _BOOL4 v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t *v29;
  uint64_t *v30;
  BOOL v31;
  _BOOL4 v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;

  v6 = *a3;
  v7 = a3[1];
  v8 = a1 & 0xFFFFFFFFFFFCFFFFLL | 0x20000;
  if (*a3 == v7)
    v8 = a1;
  v9 = v8 & 0xFFFFFFFFFCFFFFFFLL | 0x1000000;
  if (!v7)
    v9 = v8 & 0xFFFFFFFFFC3FFFFFLL | 0x1400000;
  if (!v6)
    v8 = v9;
  if (v7)
    v10 = v8;
  else
    v10 = v8 & 0xFFFFFFFFF3FFFFFFLL | 0x4000000;
  if (a4)
  {
    if (*a4 <= v6)
      v11 = v10;
    else
      v11 = v10 & 0xFFFFFFFFCFFFFFFFLL | 0x20000000;
    if (a4[1] > v7)
      v10 = v11 & 0xFFFFFFFF3FFFFFFFLL | 0x80000000;
    else
      v10 = v11;
  }
  v12 = fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>::Zero();
  v13 = a3[2];
  if (v13)
    v14 = *((_QWORD *)a3 + 4) + 1;
  else
    v14 = 0;
  if (*(_DWORD *)v12)
    v15 = *(_QWORD *)(v12 + 24) + 1;
  else
    v15 = 0;
  if (v14 != v15)
    goto LABEL_38;
  v16 = 0;
  v17 = (uint64_t *)(a3 + 6);
  v18 = (uint64_t *)(v12 + 16);
  v19 = v13 && v13 == *(_DWORD *)v12;
  v20 = !v19;
  v21 = !v20;
  while (1)
  {
    v22 = *v17;
    v23 = *v18;
    if ((v16 & 1) == 0 && !v21)
      break;
    if ((int *)v22 == a3 + 4)
      goto LABEL_37;
    if (*(_DWORD *)(v22 + 16) != *(_DWORD *)(v23 + 16))
      goto LABEL_38;
    v17 = (uint64_t *)(v22 + 8);
    v18 = (uint64_t *)(v23 + 8);
    v16 = 1;
  }
  if (v13)
    goto LABEL_38;
LABEL_37:
  if (*((float *)a3 + 10) != *(float *)(v12 + 32))
  {
LABEL_38:
    v24 = fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>::One();
    v25 = a3[2];
    if (v25)
      v26 = *((_QWORD *)a3 + 4) + 1;
    else
      v26 = 0;
    if (*(_DWORD *)v24)
      v27 = *(_QWORD *)(v24 + 24) + 1;
    else
      v27 = 0;
    if (v26 != v27)
      goto LABEL_59;
    v28 = 0;
    v29 = (uint64_t *)(a3 + 6);
    v30 = (uint64_t *)(v24 + 16);
    v31 = v25 && v25 == *(_DWORD *)v24;
    v32 = !v31;
    v33 = !v32;
    while (1)
    {
      v34 = *v29;
      v35 = *v30;
      if ((v28 & 1) == 0 && !v33)
        break;
      if ((int *)v34 == a3 + 4)
        goto LABEL_58;
      if (*(_DWORD *)(v34 + 16) != *(_DWORD *)(v35 + 16))
        goto LABEL_59;
      v29 = (uint64_t *)(v34 + 8);
      v30 = (uint64_t *)(v35 + 8);
      v28 = 1;
    }
    if (v25)
      goto LABEL_59;
LABEL_58:
    if (*((float *)a3 + 10) != *(float *)(v24 + 32))
LABEL_59:
      v10 = v10 & 0xFFFFFFFCFFFFFFFFLL | 0x100000000;
  }
  if (a3[12] <= a2)
    v36 = v10 & 0xFFFFFF3FFFFFFFFFLL | 0x8000000000;
  else
    v36 = v10;
  if ((v36 & 0x4000000000) != 0)
    return v36 & 0x5D7FFEB0007 | 0x2800000000;
  else
    return v36 & 0x5D7FFEB0007;
}

void fst::VectorFstBaseImpl<fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>::DeleteStates(uint64_t a1, char **a2)
{
  uint64_t *v4;
  std::vector<int>::size_type v5;
  char *v6;
  uint64_t v7;
  unint64_t v8;
  std::vector<int>::pointer begin;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  int64x2_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  int *v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int64x2_t v28;
  unint64_t v29;
  uint64_t v30;
  int *v31;
  int64x2_t v32;
  int64x2_t v33;
  std::vector<int>::value_type __x;
  std::vector<int> v35;

  v4 = (uint64_t *)(a1 + 64);
  v5 = (uint64_t)(*(_QWORD *)(a1 + 72) - *(_QWORD *)(a1 + 64)) >> 3;
  __x = 0;
  std::vector<int>::vector(&v35, v5, &__x);
  v6 = *a2;
  v7 = a2[1] - *a2;
  if (v7)
  {
    v8 = v7 >> 2;
    begin = v35.__begin_;
    if (v8 <= 1)
      v8 = 1;
    do
    {
      v10 = *(int *)v6;
      v6 += 4;
      begin[v10] = -1;
      --v8;
    }
    while (v8);
  }
  v11 = *(_QWORD *)(a1 + 64);
  if (*(_QWORD *)(a1 + 72) == v11)
  {
    v13 = 0;
  }
  else
  {
    v12 = 0;
    v13 = 0;
    do
    {
      if (v35.__begin_[v12] == -1)
      {
        fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::Destroy(*(_QWORD *)(v11 + 8 * v12));
      }
      else
      {
        v35.__begin_[v12] = v13;
        if (v12 != v13)
          *(_QWORD *)(v11 + 8 * v13) = *(_QWORD *)(v11 + 8 * v12);
        ++v13;
      }
      ++v12;
      v11 = *(_QWORD *)(a1 + 64);
    }
    while (v12 < (*(_QWORD *)(a1 + 72) - v11) >> 3);
  }
  std::vector<fst::QueueBase<int> *,std::allocator<fst::QueueBase<int> *>>::resize((uint64_t)v4, v13);
  v14 = *(_QWORD *)(a1 + 64);
  if (*(_QWORD *)(a1 + 72) != v14)
  {
    v15 = 0;
    do
    {
      v16 = *(_QWORD *)(v14 + 8 * v15);
      v17 = *(int64x2_t *)(v16 + 40);
      v18 = *(_QWORD *)(v16 + 64) - *(_QWORD *)(v16 + 56);
      if (v18)
        v19 = *(_QWORD *)(v16 + 56);
      else
        v19 = 0;
      if (v18)
      {
        v20 = 0;
        v21 = 0;
        v22 = (int *)(v19 + 48);
        v23 = v19 + 16;
        do
        {
          v24 = v35.__begin_[*v22];
          if (v24 == -1)
          {
            v27 = *((_QWORD *)v22 - 6);
            v28.i64[0] = v27;
            v28.i64[1] = HIDWORD(v27);
            v17 = vaddq_s64(v17, vceqzq_s64(v28));
          }
          else
          {
            *v22 = v24;
            if (v20 != v21)
            {
              v32 = v17;
              v25 = v19 + 56 * v21;
              *(_QWORD *)v25 = *((_QWORD *)v22 - 6);
              *(_DWORD *)(v25 + 8) = *(v22 - 10);
              std::list<int>::__assign_with_sentinel[abi:ne180100]<std::__list_const_iterator<int,void *>,std::__list_const_iterator<int,void *>>((uint64_t *)(v25 + 16), *((_QWORD *)v22 - 3), v23);
              v26 = v19 + 56 * v21;
              *(_DWORD *)(v26 + 40) = *(v22 - 2);
              *(_DWORD *)(v26 + 48) = *v22;
              v14 = *v4;
              v17 = v32;
            }
            ++v21;
          }
          ++v20;
          v16 = *(_QWORD *)(v14 + 8 * v15);
          v29 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(v16 + 64) - *(_QWORD *)(v16 + 56)) >> 3);
          v22 += 14;
          v23 += 56;
        }
        while (v20 < v29);
        v33 = v17;
      }
      else
      {
        v33 = *(int64x2_t *)(v16 + 40);
        v21 = 0;
        v29 = 0;
      }
      fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::DeleteArcs((_QWORD *)v16, v29 - v21);
      v14 = *(_QWORD *)(a1 + 64);
      *(int64x2_t *)(*(_QWORD *)(v14 + 8 * v15++) + 40) = v33;
    }
    while (v15 < (*(_QWORD *)(a1 + 72) - v14) >> 3);
  }
  v30 = *(int *)(a1 + 88);
  if ((_DWORD)v30 == -1)
  {
    v31 = v35.__begin_;
    if (!v35.__begin_)
      return;
  }
  else
  {
    v31 = v35.__begin_;
    *(_DWORD *)(a1 + 88) = v35.__begin_[v30];
  }
  v35.__end_ = v31;
  operator delete(v31);
}

void sub_1ADC0F620(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void fst::MutableArcIterator<fst::VectorFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>>::~MutableArcIterator()
{
  JUMPOUT(0x1AF44D190);
}

uint64_t fst::ArcIteratorBase<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>::Reinit()
{
  return 0;
}

BOOL fst::MutableArcIterator<fst::VectorFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>>::Done_(uint64_t a1)
{
  return *(_QWORD *)(a1 + 24) >= (unint64_t)(0x6DB6DB6DB6DB6DB7
                                                  * ((uint64_t)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 64)
                                                             - *(_QWORD *)(*(_QWORD *)(a1 + 8) + 56)) >> 3));
}

uint64_t fst::MutableArcIterator<fst::VectorFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>>::Value_(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 8) + 56) + 56 * *(_QWORD *)(a1 + 24);
}

uint64_t fst::MutableArcIterator<fst::VectorFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>>::Next_(uint64_t result)
{
  ++*(_QWORD *)(result + 24);
  return result;
}

uint64_t fst::MutableArcIterator<fst::VectorFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>>::Position_(uint64_t a1)
{
  return *(_QWORD *)(a1 + 24);
}

uint64_t fst::MutableArcIterator<fst::VectorFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>>::Reset_(uint64_t result)
{
  *(_QWORD *)(result + 24) = 0;
  return result;
}

uint64_t fst::MutableArcIterator<fst::VectorFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>>::Seek_(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 24) = a2;
  return result;
}

uint64_t fst::MutableArcIterator<fst::VectorFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>>::Flags_()
{
  return 15;
}

uint64_t fst::MutableArcIterator<fst::VectorFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>>::SetValue(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  int *v6;
  int v7;
  int v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  int *v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t *v20;
  uint64_t *v21;
  BOOL v22;
  _BOOL4 v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  uint64_t *v32;
  uint64_t *v33;
  BOOL v34;
  _BOOL4 v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  int v41;
  unint64_t *v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t result;
  int v46;
  uint64_t v47;
  uint64_t v48;
  char v49;
  uint64_t *v50;
  uint64_t *v51;
  BOOL v52;
  _BOOL4 v53;
  int v54;
  uint64_t v55;
  uint64_t v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  char v60;
  uint64_t *v61;
  uint64_t *v62;
  BOOL v63;
  _BOOL4 v64;
  int v65;
  uint64_t v66;
  uint64_t v67;

  v4 = *(_QWORD *)(a1 + 24);
  v5 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 56);
  v6 = (int *)(v5 + 56 * v4);
  v7 = *v6;
  v8 = v6[1];
  if (*v6 != v8)
    **(_QWORD **)(a1 + 16) &= ~0x20000uLL;
  if (v7)
  {
    if (!v8)
    {
      v9 = *(unint64_t **)(a1 + 16);
      v10 = *v9;
LABEL_8:
      *v9 = v10 & 0xFFFFFFFFFBFFFFFFLL;
    }
  }
  else
  {
    v9 = *(unint64_t **)(a1 + 16);
    v11 = *v9;
    *v9 &= ~0x1000000uLL;
    if (!v8)
    {
      v10 = v11 & 0xFFFFFFFFFEBFFFFFLL;
      *v9 = v11 & 0xFFFFFFFFFEBFFFFFLL;
      goto LABEL_8;
    }
  }
  v12 = v5 + 56 * v4;
  v13 = fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>::Zero();
  v16 = *(_DWORD *)(v12 + 8);
  v15 = (int *)(v12 + 8);
  v14 = v16;
  if (v16)
    v17 = *((_QWORD *)v15 + 3) + 1;
  else
    v17 = 0;
  if (*(_DWORD *)v13)
    v18 = *(_QWORD *)(v13 + 24) + 1;
  else
    v18 = 0;
  if (v17 != v18)
    goto LABEL_30;
  v19 = 0;
  v20 = (uint64_t *)(v15 + 4);
  v21 = (uint64_t *)(v13 + 16);
  v22 = v14 && v14 == *(_DWORD *)v13;
  v23 = !v22;
  v24 = !v23;
  while (1)
  {
    v25 = *v20;
    v26 = *v21;
    if ((v19 & 1) == 0 && !v24)
      break;
    if ((int *)v25 == v15 + 2)
      goto LABEL_29;
    if (*(_DWORD *)(v25 + 16) != *(_DWORD *)(v26 + 16))
      goto LABEL_30;
    v20 = (uint64_t *)(v25 + 8);
    v21 = (uint64_t *)(v26 + 8);
    v19 = 1;
  }
  if (v14)
    goto LABEL_30;
LABEL_29:
  if (*((float *)v15 + 8) != *(float *)(v13 + 32))
  {
LABEL_30:
    v27 = fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>::One();
    v28 = *v15;
    if (*v15)
      v29 = *((_QWORD *)v15 + 3) + 1;
    else
      v29 = 0;
    if (*(_DWORD *)v27)
      v30 = *(_QWORD *)(v27 + 24) + 1;
    else
      v30 = 0;
    if (v29 != v30)
      goto LABEL_51;
    v31 = 0;
    v32 = (uint64_t *)(v15 + 4);
    v33 = (uint64_t *)(v27 + 16);
    v34 = v28 && v28 == *(_DWORD *)v27;
    v35 = !v34;
    v36 = !v35;
    while (1)
    {
      v37 = *v32;
      v38 = *v33;
      if ((v31 & 1) == 0 && !v36)
        break;
      if ((int *)v37 == v15 + 2)
        goto LABEL_50;
      if (*(_DWORD *)(v37 + 16) != *(_DWORD *)(v38 + 16))
        goto LABEL_51;
      v32 = (uint64_t *)(v37 + 8);
      v33 = (uint64_t *)(v38 + 8);
      v31 = 1;
    }
    if (v28)
      goto LABEL_51;
LABEL_50:
    if (*((float *)v15 + 8) != *(float *)(v27 + 32))
LABEL_51:
      **(_QWORD **)(a1 + 16) &= ~0x100000000uLL;
  }
  v39 = 0x30FC30007;
  if (*(_DWORD *)a2 == *v6 && *(_DWORD *)(a2 + 4) == v6[1] && *(_DWORD *)(a2 + 48) == *(_DWORD *)(v5 + 56 * v4 + 48))
    v39 = 0x3FFFFFFF0007;
  fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::SetArc(*(uint64_t **)(a1 + 8), a2, *(_QWORD *)(a1 + 24));
  v40 = *(_DWORD *)a2;
  v41 = *(_DWORD *)(a2 + 4);
  if (*(_DWORD *)a2 != v41)
    **(_QWORD **)(a1 + 16) = **(_QWORD **)(a1 + 16) & 0xFFFFFFFFFFFCFFFFLL | 0x20000;
  if (v40)
  {
    if (!v41)
    {
      v42 = *(unint64_t **)(a1 + 16);
      v43 = *v42;
LABEL_63:
      *v42 = v43 & 0xFFFFFFFFF3FFFFFFLL | 0x4000000;
    }
  }
  else
  {
    v42 = *(unint64_t **)(a1 + 16);
    v44 = *v42 & 0xFFFFFFFFFCFFFFFFLL | 0x1000000;
    *v42 = v44;
    if (!v41)
    {
      v43 = v44 & 0xFFFFFFFFFD3FFFFFLL | 0x400000;
      *v42 = v43;
      goto LABEL_63;
    }
  }
  result = fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>::Zero();
  v46 = *(_DWORD *)(a2 + 8);
  if (v46)
    v47 = *(_QWORD *)(a2 + 32) + 1;
  else
    v47 = 0;
  if (*(_DWORD *)result)
    v48 = *(_QWORD *)(result + 24) + 1;
  else
    v48 = 0;
  if (v47 != v48)
    goto LABEL_85;
  v49 = 0;
  v50 = (uint64_t *)(a2 + 24);
  v51 = (uint64_t *)(result + 16);
  v52 = v46 && v46 == *(_DWORD *)result;
  v53 = !v52;
  v54 = !v53;
  while (1)
  {
    v55 = *v50;
    v56 = *v51;
    if ((v49 & 1) == 0 && !v54)
      break;
    if (v55 == a2 + 16)
      goto LABEL_84;
    if (*(_DWORD *)(v55 + 16) != *(_DWORD *)(v56 + 16))
      goto LABEL_85;
    v50 = (uint64_t *)(v55 + 8);
    v51 = (uint64_t *)(v56 + 8);
    v49 = 1;
  }
  if (v46)
    goto LABEL_85;
LABEL_84:
  if (*(float *)(a2 + 40) != *(float *)(result + 32))
  {
LABEL_85:
    result = fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>::One();
    v57 = *(_DWORD *)(a2 + 8);
    if (v57)
      v58 = *(_QWORD *)(a2 + 32) + 1;
    else
      v58 = 0;
    if (*(_DWORD *)result)
      v59 = *(_QWORD *)(result + 24) + 1;
    else
      v59 = 0;
    if (v58 != v59)
      goto LABEL_106;
    v60 = 0;
    v61 = (uint64_t *)(a2 + 24);
    v62 = (uint64_t *)(result + 16);
    v63 = v57 && v57 == *(_DWORD *)result;
    v64 = !v63;
    v65 = !v64;
    while (1)
    {
      v66 = *v61;
      v67 = *v62;
      if ((v60 & 1) == 0 && !v65)
        break;
      if (v66 == a2 + 16)
        goto LABEL_105;
      if (*(_DWORD *)(v66 + 16) != *(_DWORD *)(v67 + 16))
        goto LABEL_106;
      v61 = (uint64_t *)(v66 + 8);
      v62 = (uint64_t *)(v67 + 8);
      v60 = 1;
    }
    if (v57)
      goto LABEL_106;
LABEL_105:
    if (*(float *)(a2 + 40) != *(float *)(result + 32))
LABEL_106:
      **(_QWORD **)(a1 + 16) = **(_QWORD **)(a1 + 16) & 0xFFFFFFFCFFFFFFFFLL | 0x100000000;
  }
  **(_QWORD **)(a1 + 16) &= v39;
  return result;
}

uint64_t fst::ArcMap<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,fst::ToGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t result;
  _BOOL8 v7;
  uint64_t v8;
  uint64_t v9;
  float *v10;
  unsigned int v11;
  int v12;
  fst *v13;
  _QWORD *v14;
  void *v15;
  uint64_t v16;
  unint64_t v17;
  int v18;
  _QWORD v19[3];
  int v20;
  void *__p[2];
  char v22;
  char v23;
  _QWORD v24[2];
  char v25;
  char v26;
  uint64_t v27;
  int v28;
  _QWORD v29[3];
  int v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  _DWORD *v34;
  unint64_t v35;
  uint64_t v36;
  int v37;
  unsigned int v38;

  (*(void (**)(uint64_t))(*(_QWORD *)a2 + 224))(a2);
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 112))(a1);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 280))(a2, v4);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 288))(a2, 0);
  v5 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 64))(a1, 0x3FFFFFFF0004, 0);
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  if ((_DWORD)result == -1)
  {
    if ((v5 & 4) != 0)
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 192))(a2, 4, 4);
    return result;
  }
  if ((*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 64))(a1, 1, 0))
  {
    v7 = fst::CountStates<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>(a1) != 0;
    (*(void (**)(uint64_t, _BOOL8))(*(_QWORD *)a2 + 248))(a2, v7);
  }
  LODWORD(v29[0]) = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 128))(a1, &v27);
  while (!v27)
  {
    if (SLODWORD(v29[0]) >= v28)
      goto LABEL_14;
LABEL_9:
    (*(void (**)(uint64_t))(*(_QWORD *)a2 + 200))(a2);
    if (v27)
      (*(void (**)(uint64_t))(*(_QWORD *)v27 + 32))(v27);
    else
      ++LODWORD(v29[0]);
  }
  if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v27 + 16))(v27))
    goto LABEL_9;
  if (v27)
    (*(void (**)(uint64_t))(*(_QWORD *)v27 + 8))(v27);
LABEL_14:
  v38 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 128))(a1, &v36);
  while (2)
  {
    if (!v36)
    {
      if ((int)v38 >= v37)
        goto LABEL_53;
      goto LABEL_20;
    }
    if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v36 + 16))(v36))
    {
      if (v36)
      {
        v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v36 + 24))(v36);
        goto LABEL_21;
      }
LABEL_20:
      v8 = v38;
LABEL_21:
      if ((_DWORD)v8 == (*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1))
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 176))(a2, v8);
      v9 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 40))(a1, v8);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 256))(a2, v8, v9);
      v35 = 0;
      (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(_QWORD *)a1 + 136))(a1, v8, &v31);
LABEL_24:
      if (v31)
      {
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v31 + 24))(v31))
        {
          if (v31)
          {
            (*(void (**)(uint64_t))(*(_QWORD *)v31 + 8))(v31);
            goto LABEL_37;
          }
LABEL_35:
          if (v34)
            --*v34;
LABEL_37:
          *(float *)&v11 = (*(float (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 32))(a1, v8);
          v31 = 0;
          v32 = v11 | 0xFFFFFFFF00000000;
          fst::ToGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>::operator()((float *)&v31, (uint64_t)&v27);
          if (v27)
          {
            v12 = FLAGS_fst_error_fatal;
            if (FLAGS_fst_error_fatal)
            {
              std::string::basic_string[abi:ne180100]<0>(v24, "FATAL");
              v13 = fst::LogMessage::LogMessage((fst *)&v26, (uint64_t)v24);
            }
            else
            {
              std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
              v13 = fst::LogMessage::LogMessage((fst *)&v23, (uint64_t)__p);
            }
            v14 = (_QWORD *)fst::cerr(v13);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"ArcMap: non-zero arc labels for superfinal arc", 46);
            if (v12)
            {
              fst::LogMessage::~LogMessage((fst::LogMessage *)&v26);
              if (v25 < 0)
              {
                v15 = (void *)v24[0];
                goto LABEL_46;
              }
            }
            else
            {
              fst::LogMessage::~LogMessage((fst::LogMessage *)&v23);
              if (v22 < 0)
              {
                v15 = __p[0];
LABEL_46:
                operator delete(v15);
              }
            }
            (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 192))(a2, 4, 4);
          }
          v18 = v28;
          std::list<int>::list(v19, (uint64_t)v29);
          v20 = v30;
          (*(void (**)(uint64_t, uint64_t, int *))(*(_QWORD *)a2 + 184))(a2, v8, &v18);
          std::__list_imp<char *>::clear(v19);
          std::__list_imp<char *>::clear(v29);
          if (v36)
            (*(void (**)(uint64_t))(*(_QWORD *)v36 + 32))(v36);
          else
            ++v38;
          continue;
        }
        if (v31)
        {
          v10 = (float *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v31 + 32))(v31);
          goto LABEL_30;
        }
      }
      else if (v35 >= v33)
      {
        goto LABEL_35;
      }
      v10 = (float *)(v32 + 16 * v35);
LABEL_30:
      fst::ToGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>::operator()(v10, (uint64_t)&v27);
      (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(_QWORD *)a2 + 208))(a2, v8, &v27);
      std::__list_imp<char *>::clear(v29);
      if (v31)
        (*(void (**)(uint64_t))(*(_QWORD *)v31 + 40))(v31);
      else
        ++v35;
      goto LABEL_24;
    }
    break;
  }
  if (v36)
    (*(void (**)(uint64_t))(*(_QWORD *)v36 + 8))(v36);
LABEL_53:
  v16 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, 0x3FFFFFFF0007, 0);
  v17 = fst::ProjectProperties(v5, 1);
  return (*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)a2 + 192))(a2, v17 & 0x3FFCFFFF0007 | v16, 0x3FFFFFFF0007);
}

void sub_1ADC100B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,int a31,__int16 a32,char a33,char a34,uint64_t a35)
{
  _QWORD *v35;
  uint64_t v36;
  uint64_t v38;

  fst::LogMessage::~LogMessage((fst::LogMessage *)&a24);
  if (a20 < 0)
    operator delete(__p);
  std::__list_imp<char *>::clear(v35);
  v38 = *(_QWORD *)(v36 - 112);
  if (v38)
    (*(void (**)(uint64_t))(*(_QWORD *)v38 + 8))(v38);
  _Unwind_Resume(a1);
}

_QWORD *fst::ToGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>::operator()@<X0>(float *a1@<X1>, uint64_t a2@<X8>)
{
  int v4;
  float v5;
  int v6;
  uint64_t *v7;
  int *v8;
  _DWORD *v9;
  int *v10;
  int v11;
  int *v12;
  int v14;
  uint64_t v15;
  int v16;
  _QWORD v17[3];
  int v18;
  int v19;
  _QWORD v20[3];
  int v21;
  _DWORD v22[8];
  int v23;
  _QWORD v24[3];
  int v25;
  int v26;
  _QWORD v27[3];
  int v28;
  _DWORD v29[9];
  float v30;

  if (*((_DWORD *)a1 + 3) == -1)
  {
    v30 = 0.0;
    v30 = a1[2];
    v29[8] = 2139095040;
    if (v30 == INFINITY)
    {
      v12 = (int *)fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>::Zero();
      v23 = *v12;
      v7 = v24;
      std::list<int>::list(v24, (uint64_t)(v12 + 2));
      v25 = v12[8];
      *(_QWORD *)a2 = 0;
      *(_DWORD *)(a2 + 8) = v23;
      std::list<int>::list((_QWORD *)(a2 + 16), (uint64_t)v24);
      *(_DWORD *)(a2 + 40) = v25;
      *(_DWORD *)(a2 + 48) = -1;
      return std::__list_imp<char *>::clear(v7);
    }
    v8 = (int *)fst::StringWeight<int,(fst::StringType)0>::One();
    v26 = *v8;
    v7 = v27;
    std::list<int>::list(v27, (uint64_t)(v8 + 2));
    fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>::GallicWeight((uint64_t)&v28, &v26, a1[2]);
    *(_QWORD *)a2 = 0;
    *(_DWORD *)(a2 + 8) = v28;
    v9 = v29;
    std::list<int>::list((_QWORD *)(a2 + 16), (uint64_t)v29);
    *(_DWORD *)(a2 + 40) = v29[6];
    *(_DWORD *)(a2 + 48) = -1;
    goto LABEL_7;
  }
  v5 = *a1;
  v4 = *((_DWORD *)a1 + 1);
  if (!v4)
  {
    v10 = (int *)fst::StringWeight<int,(fst::StringType)0>::One();
    v19 = *v10;
    v7 = v20;
    std::list<int>::list(v20, (uint64_t)(v10 + 2));
    fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>::GallicWeight((uint64_t)&v21, &v19, a1[2]);
    v11 = *((_DWORD *)a1 + 3);
    *(float *)a2 = v5;
    *(float *)(a2 + 4) = v5;
    *(_DWORD *)(a2 + 8) = v21;
    v9 = v22;
    std::list<int>::list((_QWORD *)(a2 + 16), (uint64_t)v22);
    *(_DWORD *)(a2 + 40) = v22[6];
    *(_DWORD *)(a2 + 48) = v11;
LABEL_7:
    std::__list_imp<char *>::clear(v9);
    return std::__list_imp<char *>::clear(v7);
  }
  fst::StringWeight<int,(fst::StringType)0>::StringWeight((uint64_t)&v14, v4);
  fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>::GallicWeight((uint64_t)&v16, &v14, a1[2]);
  v6 = *((_DWORD *)a1 + 3);
  *(float *)a2 = v5;
  *(float *)(a2 + 4) = v5;
  *(_DWORD *)(a2 + 8) = v16;
  std::list<int>::list((_QWORD *)(a2 + 16), (uint64_t)v17);
  *(_DWORD *)(a2 + 40) = v18;
  *(_DWORD *)(a2 + 48) = v6;
  std::__list_imp<char *>::clear(v17);
  v7 = &v15;
  return std::__list_imp<char *>::clear(v7);
}

void sub_1ADC103C4(_Unwind_Exception *a1)
{
  _QWORD *v1;

  std::__list_imp<char *>::clear(v1);
  _Unwind_Resume(a1);
}

uint64_t fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>::GallicWeight(uint64_t a1, int *a2, float a3)
{
  int v6;
  _QWORD v7[3];

  v6 = *a2;
  std::list<int>::list(v7, (uint64_t)(a2 + 2));
  fst::ProductWeight<fst::StringWeight<int,(fst::StringType)0>,fst::TropicalWeightTpl<float>>::ProductWeight(a1, &v6, a3);
  std::__list_imp<char *>::clear(v7);
  return a1;
}

void sub_1ADC10478(_Unwind_Exception *a1)
{
  _QWORD *v1;

  std::__list_imp<char *>::clear(v1);
  _Unwind_Resume(a1);
}

uint64_t fst::ProductWeight<fst::StringWeight<int,(fst::StringType)0>,fst::TropicalWeightTpl<float>>::ProductWeight(uint64_t a1, int *a2, float a3)
{
  int v6;
  _QWORD v7[3];

  v6 = *a2;
  std::list<int>::list(v7, (uint64_t)(a2 + 2));
  *(_DWORD *)a1 = v6;
  std::list<int>::list((_QWORD *)(a1 + 8), (uint64_t)v7);
  *(float *)(a1 + 32) = a3;
  std::__list_imp<char *>::clear(v7);
  return a1;
}

void sub_1ADC104F8(_Unwind_Exception *a1)
{
  _QWORD *v1;

  std::__list_imp<char *>::clear(v1);
  _Unwind_Resume(a1);
}

_QWORD *fst::ShortestDistance<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>(uint64_t a1, uint64_t *a2, char a3, float a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  float v12;
  _DWORD *v13;
  _QWORD *result;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  int v18;
  void ***v19;
  uint64_t v20;
  float v21;
  char v22;
  int v23;
  void ***v24;
  int v25;
  float v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  void **v33[9];

  if ((a3 & 1) != 0)
  {
    fst::VectorFst<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>,fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>>::VectorFst(&v31);
    fst::Reverse<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>(a1, (uint64_t *)&v31, 1);
    v28 = 0;
    v29 = 0;
    v30 = 0;
    fst::AutoQueue<int>::AutoQueue<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>,fst::AnyArcFilter<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>((uint64_t)v33, (uint64_t)&v31);
    v24 = v33;
    v25 = -1;
    v27 = 0;
    v26 = a4;
    fst::ShortestDistance<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>,fst::AutoQueue<int>,fst::AnyArcFilter<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>((uint64_t)&v31, &v28, (uint64_t)&v24);
    v8 = *a2;
    v7 = a2[1];
    if (v7 != *a2)
    {
      do
      {
        v9 = v7 - 40;
        std::__list_imp<char *>::clear((_QWORD *)(v7 - 32));
        v7 = v9;
      }
      while (v9 != v8);
    }
    a2[1] = v8;
    v10 = v28;
    if (v29 - v28 == 40
      && (*(_DWORD *)v28 && (*(_DWORD *)v28 == -2 ? (v11 = *(_QWORD *)(v28 + 24) == 0) : (v11 = 0), v11)
       || (v12 = *(float *)(v28 + 32), v12 >= -INFINITY) && v12 <= -INFINITY))
    {
      v13 = (_DWORD *)fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>::NoWeight();
      std::vector<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>>::resize(a2, 1uLL, v13);
    }
    else
    {
      v15 = 0xCCCCCCCCCCCCCCCDLL * ((v8 - *a2) >> 3);
      if (v15 < 0xCCCCCCCCCCCCCCCDLL * ((v29 - v28) >> 3) - 1)
      {
        do
        {
          fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)1>::Reverse((_DWORD *)(v10 + 40 * v15 + 40), (uint64_t)&v19);
          v16 = a2[1];
          if (v16 >= a2[2])
          {
            v17 = std::vector<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>>::__push_back_slow_path<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>>(a2, &v19);
          }
          else
          {
            *(_DWORD *)v16 = (_DWORD)v19;
            std::list<int>::list((_QWORD *)(v16 + 8), (uint64_t)&v20);
            *(_DWORD *)(v16 + 32) = v23;
            v17 = v16 + 40;
            a2[1] = v16 + 40;
          }
          a2[1] = v17;
          std::__list_imp<char *>::clear(&v20);
          v10 = v28;
          v15 = 0xCCCCCCCCCCCCCCCDLL * ((a2[1] - *a2) >> 3);
        }
        while (v15 < -1 - 0x3333333333333333 * ((v29 - v28) >> 3));
      }
    }
    fst::AutoQueue<int>::~AutoQueue(v33);
    v33[0] = (void **)&v28;
    std::vector<fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)0>>::__destroy_vector::operator()[abi:ne180100](v33);
    v31 = &unk_1E5D25300;
    result = (_QWORD *)v32;
    if (v32)
    {
      v18 = *(_DWORD *)(v32 + 56) - 1;
      *(_DWORD *)(v32 + 56) = v18;
      if (!v18)
        return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 8))(result);
    }
  }
  else
  {
    fst::AutoQueue<int>::AutoQueue<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,fst::AnyArcFilter<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>((uint64_t)v33, a1);
    v19 = v33;
    HIDWORD(v20) = -1;
    v22 = 0;
    v21 = a4;
    fst::ShortestDistance<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,fst::AutoQueue<int>,fst::AnyArcFilter<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>(a1, a2, (uint64_t)&v19);
    return fst::AutoQueue<int>::~AutoQueue(v33);
  }
  return result;
}

void sub_1ADC10780(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_list va;

  va_start(va, a14);
  fst::AutoQueue<int>::~AutoQueue((uint64_t *)va);
  _Unwind_Resume(a1);
}

_QWORD *fst::ComputeTotalWeight<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  _DWORD *v7;
  _DWORD *v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  float v13;
  float v14;
  BOOL v15;
  float v16;
  float v17;
  float v18;
  uint64_t v19;
  _QWORD v20[3];
  float v21;
  _BYTE v22[8];
  _QWORD v23[3];
  float v24;
  int v25;
  _QWORD v26[3];
  int v27;
  int v28;
  _QWORD v29[4];

  if (a3)
  {
    if (0xCCCCCCCCCCCCCCCDLL * ((a2[1] - *a2) >> 3) <= (*(int (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1))
      v7 = (_DWORD *)fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>::Zero();
    else
      v7 = (_DWORD *)(*a2 + 40 * (*(int (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1));
    *(_DWORD *)a4 = *v7;
    result = std::list<int>::list((_QWORD *)(a4 + 8), (uint64_t)(v7 + 2));
    *(_DWORD *)(a4 + 32) = v7[8];
  }
  else
  {
    v8 = (_DWORD *)fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>::Zero();
    *(_DWORD *)a4 = *v8;
    result = std::list<int>::list((_QWORD *)(a4 + 8), (uint64_t)(v8 + 2));
    *(_DWORD *)(a4 + 32) = v8[8];
    v10 = *a2;
    if (a2[1] != *a2)
    {
      v11 = 0;
      v12 = 0;
      do
      {
        (*(void (**)(uint64_t *__return_ptr, uint64_t, unint64_t))(*(_QWORD *)a1 + 32))(&v19, a1, v12);
        fst::Times<int,(fst::StringType)0>((int *)(v10 + v11), (uint64_t)&v19, (uint64_t)&v28);
        v13 = *(float *)(v10 + v11 + 32);
        v14 = NAN;
        if (v13 != -INFINITY)
        {
          v14 = NAN;
          if (v21 != -INFINITY)
          {
            v14 = INFINITY;
            v15 = v21 == INFINITY || v13 == INFINITY;
            v16 = v13 + v21;
            if (!v15)
              v14 = v16;
          }
        }
        fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>::GallicWeight((uint64_t)v22, &v28, v14);
        std::__list_imp<char *>::clear(v29);
        fst::Plus<int>(a4, (uint64_t)v22, (uint64_t)&v28);
        v17 = *(float *)(a4 + 32);
        v18 = NAN;
        if (v17 != -INFINITY)
        {
          v18 = NAN;
          if (v24 != -INFINITY)
          {
            if (v17 >= v24)
              v18 = v24;
            else
              v18 = *(float *)(a4 + 32);
          }
        }
        fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>::GallicWeight((uint64_t)&v25, &v28, v18);
        std::__list_imp<char *>::clear(v29);
        *(_DWORD *)a4 = v25;
        if (&v25 != (int *)a4)
          std::list<int>::__assign_with_sentinel[abi:ne180100]<std::__list_const_iterator<int,void *>,std::__list_const_iterator<int,void *>>((uint64_t *)(a4 + 8), v26[1], (uint64_t)v26);
        *(_DWORD *)(a4 + 32) = v27;
        std::__list_imp<char *>::clear(v26);
        std::__list_imp<char *>::clear(v23);
        result = std::__list_imp<char *>::clear(v20);
        ++v12;
        v10 = *a2;
        v11 += 40;
      }
      while (0xCCCCCCCCCCCCCCCDLL * ((a2[1] - *a2) >> 3) > v12);
    }
  }
  return result;
}

void sub_1ADC10A9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, _QWORD *a9, _QWORD *a10)
{
  _QWORD *v10;
  _QWORD *v11;

  std::__list_imp<char *>::clear(v11);
  std::__list_imp<char *>::clear(v10);
  std::__list_imp<char *>::clear(a10);
  std::__list_imp<char *>::clear(a9);
  _Unwind_Resume(a1);
}

void sub_1ADC10AF0()
{
  JUMPOUT(0x1ADC10AE0);
}

uint64_t fst::Reweight<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>(uint64_t *a1, _QWORD *a2, int a3)
{
  uint64_t result;
  fst *v6;
  _QWORD *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t *v16;
  BOOL v17;
  _BOOL4 v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t *v28;
  BOOL v29;
  _BOOL4 v30;
  uint64_t v31;
  float v32;
  float v34;
  float v35;
  uint64_t v36;
  uint64_t v37;
  __n128 v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  uint64_t v43;
  uint64_t *v44;
  BOOL v45;
  _BOOL4 v46;
  int v47;
  uint64_t v48;
  _QWORD *v49;
  _QWORD *v50;
  uint64_t v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char v58;
  uint64_t v59;
  uint64_t *v60;
  BOOL v61;
  _BOOL4 v62;
  int v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  float v69;
  float v70;
  uint64_t v71;
  int v72;
  uint64_t v73;
  float v74;
  float v75;
  float v76;
  uint64_t *v78;
  float v79;
  uint64_t v81;
  float v82;
  float v83;
  uint64_t *v84;
  int v85;
  uint64_t *v86;
  float v87;
  unint64_t v89;
  unint64_t v90;
  unsigned int v92;
  int v93;
  _QWORD v94[3];
  float v95;
  _BYTE v96[8];
  _QWORD v97[4];
  _BYTE v98[8];
  uint64_t v99;
  _BYTE v100[8];
  _QWORD v101[4];
  float v102;
  _QWORD v103[3];
  float v104;
  float v105;
  _QWORD v106[3];
  float v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  float v112;
  void *v113;
  uint64_t v114;
  uint64_t v115[2];
  float v116;
  float v117;
  int v118;
  uint64_t v119;
  int v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  float v124;
  uint64_t v125;
  int v126;
  int v127;
  uint64_t v128;
  _QWORD v129[4];

  result = (*(uint64_t (**)(uint64_t *))(*a1 + 160))(a1);
  if (!(_DWORD)result)
    return result;
  if (a3 == 1)
  {
    if (FLAGS_fst_error_fatal)
      std::string::basic_string[abi:ne180100]<0>(&v113, "FATAL");
    else
      std::string::basic_string[abi:ne180100]<0>(&v113, "ERROR");
    v6 = fst::LogMessage::LogMessage((fst *)&v120, (uint64_t)&v113);
    v7 = (_QWORD *)fst::cerr(v6);
    v49 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"Reweight: Reweighting to the final states requires ", 51);
    v50 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v49, (uint64_t)"Weight to be right distributive: ", 33);
    v51 = fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>::Type();
    v52 = *(char *)(v51 + 23);
    if (v52 >= 0)
      v53 = v51;
    else
      v53 = *(_QWORD *)v51;
    if (v52 >= 0)
      v54 = *(unsigned __int8 *)(v51 + 23);
    else
      v54 = *(_QWORD *)(v51 + 8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v50, v53, v54);
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v120);
    if (SHIBYTE(v115[0]) < 0)
      operator delete(v113);
    return (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*a1 + 192))(a1, 4, 4);
  }
  v127 = 0;
  (*(void (**)(uint64_t *, uint64_t *))(*a1 + 128))(a1, &v125);
  while (1)
  {
    if (v125)
    {
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v125 + 16))(v125))
        goto LABEL_91;
      if (v125)
      {
        v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v125 + 24))(v125);
        goto LABEL_12;
      }
    }
    else if (v127 >= v126)
    {
      goto LABEL_91;
    }
    v8 = v127;
LABEL_12:
    if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(a2[1] - *a2) >> 3) == v8)
      break;
    v9 = v8;
    v10 = *a2 + 40 * v8;
    v120 = *(_DWORD *)v10;
    std::list<int>::list(&v121, v10 + 8);
    v124 = *(float *)(v10 + 32);
    v11 = fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>::Zero();
    if (v120)
      v12 = v123 + 1;
    else
      v12 = 0;
    if (*(_DWORD *)v11)
      v13 = *(_QWORD *)(v11 + 24) + 1;
    else
      v13 = 0;
    if (v12 != v13)
      goto LABEL_33;
    v14 = 0;
    v15 = v122;
    v16 = (uint64_t *)(v11 + 16);
    v17 = v120 && v120 == *(_DWORD *)v11;
    v18 = !v17;
    while (1)
    {
      v19 = *v16;
      if ((v14 & 1) == 0 && v18)
        break;
      if ((uint64_t *)v15 == &v121)
        goto LABEL_32;
      if (*(_DWORD *)(v15 + 16) != *(_DWORD *)(v19 + 16))
        goto LABEL_33;
      v15 = *(_QWORD *)(v15 + 8);
      v16 = (uint64_t *)(v19 + 8);
      v14 = 1;
    }
    if (v120)
      goto LABEL_33;
LABEL_32:
    *(float *)&v113 = v124;
    LODWORD(v108) = 0;
    LODWORD(v108) = *(_DWORD *)(v11 + 32);
    if (v124 != *(float *)&v108)
    {
LABEL_33:
      (*(void (**)(uint64_t *, uint64_t, uint64_t *))(*a1 + 296))(a1, v9, &v119);
      while (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v119 + 24))(v119))
      {
        v20 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v119 + 32))(v119);
        v113 = *(void **)v20;
        LODWORD(v114) = *(_DWORD *)(v20 + 8);
        std::list<int>::list(v115, v20 + 16);
        v21 = *(int *)(v20 + 48);
        v117 = *(float *)(v20 + 40);
        v118 = v21;
        if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(a2[1] - *a2) >> 3) > v21)
        {
          v22 = *a2 + 40 * (int)v21;
          LODWORD(v108) = *(_DWORD *)v22;
          std::list<int>::list(&v109, v22 + 8);
          v112 = *(float *)(v22 + 32);
          v23 = fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>::Zero();
          if ((_DWORD)v108)
            v24 = v111 + 1;
          else
            v24 = 0;
          if (*(_DWORD *)v23)
            v25 = *(_QWORD *)(v23 + 24) + 1;
          else
            v25 = 0;
          if (v24 != v25)
            goto LABEL_56;
          v26 = 0;
          v27 = v110;
          v28 = (uint64_t *)(v23 + 16);
          v29 = (_DWORD)v108 && (_DWORD)v108 == *(_DWORD *)v23;
          v30 = !v29;
          while (1)
          {
            v31 = *v28;
            if ((v26 & 1) == 0 && v30)
              break;
            if ((uint64_t *)v27 == &v109)
              goto LABEL_55;
            if (*(_DWORD *)(v27 + 16) != *(_DWORD *)(v31 + 16))
              goto LABEL_56;
            v27 = *(_QWORD *)(v27 + 8);
            v28 = (uint64_t *)(v31 + 8);
            v26 = 1;
          }
          if ((_DWORD)v108)
            goto LABEL_56;
LABEL_55:
          v105 = v112;
          v102 = 0.0;
          v102 = *(float *)(v23 + 32);
          if (v112 != v102)
          {
LABEL_56:
            if (!a3)
            {
              fst::Times<int,(fst::StringType)0>((int *)&v114, (uint64_t)&v108, (uint64_t)&v128);
              v32 = NAN;
              if (v117 != -INFINITY)
              {
                v32 = NAN;
                if (v112 != -INFINITY)
                {
                  v32 = INFINITY;
                  if (v112 != INFINITY && v117 != INFINITY)
                    v32 = v117 + v112;
                }
              }
              fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>::GallicWeight((uint64_t)&v102, (int *)&v128, v32);
              std::__list_imp<char *>::clear(v129);
              fst::DivideLeft<int,(fst::StringType)0>((int *)&v102, &v120, (uint64_t)&v128);
              v34 = NAN;
              if (v104 != -INFINITY)
              {
                if ((LODWORD(v124) & 0x7FFFFFFFu) <= 0x7F7FFFFF)
                {
                  v34 = INFINITY;
                  if (v104 != INFINITY)
                    v34 = v104 - v124;
                }
                else
                {
                  v34 = NAN;
                }
              }
              fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>::GallicWeight((uint64_t)&v105, (int *)&v128, v34);
              std::__list_imp<char *>::clear(v129);
              *(float *)&v114 = v105;
              std::list<int>::__assign_with_sentinel[abi:ne180100]<std::__list_const_iterator<int,void *>,std::__list_const_iterator<int,void *>>(v115, v106[1], (uint64_t)v106);
              v117 = v107;
              std::__list_imp<char *>::clear(v106);
              std::__list_imp<char *>::clear(v103);
            }
            (*(void (**)(uint64_t, void **))(*(_QWORD *)v119 + 88))(v119, &v113);
          }
          std::__list_imp<char *>::clear(&v109);
        }
        std::__list_imp<char *>::clear(v115);
        (*(void (**)(uint64_t))(*(_QWORD *)v119 + 40))(v119);
      }
      if (v119)
        (*(void (**)(uint64_t))(*(_QWORD *)v119 + 8))(v119);
      if (!a3)
      {
        (*(void (**)(void **__return_ptr, uint64_t *, uint64_t))(*a1 + 32))(&v113, a1, v9);
        fst::DivideLeft<int,(fst::StringType)0>((int *)&v113, &v120, (uint64_t)&v108);
        v35 = NAN;
        if (v116 != -INFINITY)
        {
          if ((LODWORD(v124) & 0x7FFFFFFFu) <= 0x7F7FFFFF)
          {
            v35 = INFINITY;
            if (v116 != INFINITY)
              v35 = v116 - v124;
          }
          else
          {
            v35 = NAN;
          }
        }
        fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>::GallicWeight((uint64_t)v100, (int *)&v108, v35);
        std::__list_imp<char *>::clear(&v109);
        (*(void (**)(uint64_t *, uint64_t, _BYTE *))(*a1 + 184))(a1, v9, v100);
        std::__list_imp<char *>::clear(v101);
        std::__list_imp<char *>::clear(&v114);
      }
    }
    std::__list_imp<char *>::clear(&v121);
    if (v125)
      (*(void (**)(uint64_t))(*(_QWORD *)v125 + 32))(v125);
    else
      ++v127;
  }
  while (1)
  {
LABEL_91:
    if (!v125)
    {
      if (v127 >= v126)
        break;
      goto LABEL_88;
    }
    if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v125 + 16))(v125) & 1) != 0)
      break;
    if (!v125)
      goto LABEL_90;
    (*(void (**)(uint64_t))(*(_QWORD *)v125 + 24))(v125);
LABEL_88:
    if (v125)
      (*(void (**)(uint64_t))(*(_QWORD *)v125 + 32))(v125);
    else
LABEL_90:
      ++v127;
  }
  if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(a2[1] - *a2) >> 3) <= (*(int (**)(uint64_t *))(*a1 + 24))(a1))
    v36 = fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>::Zero();
  else
    v36 = *a2 + 40 * (*(int (**)(uint64_t *))(*a1 + 24))(a1);
  v120 = *(_DWORD *)v36;
  std::list<int>::list(&v121, v36 + 8);
  v124 = *(float *)(v36 + 32);
  v37 = fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>::One();
  v39 = a1;
  if (v120)
    v40 = v123 + 1;
  else
    v40 = 0;
  if (*(_DWORD *)v37)
    v41 = *(_QWORD *)(v37 + 24) + 1;
  else
    v41 = 0;
  if (v40 != v41)
    goto LABEL_127;
  v42 = 0;
  v43 = v122;
  v44 = (uint64_t *)(v37 + 16);
  v45 = v120 && v120 == *(_DWORD *)v37;
  v46 = !v45;
  v47 = !v46;
  while (1)
  {
    v48 = *v44;
    if ((v42 & 1) == 0 && !v47)
      break;
    if ((uint64_t *)v43 == &v121)
      goto LABEL_126;
    if (*(_DWORD *)(v43 + 16) != *(_DWORD *)(v48 + 16))
      goto LABEL_127;
    v43 = *(_QWORD *)(v43 + 8);
    v44 = (uint64_t *)(v48 + 8);
    v42 = 1;
  }
  if (v120)
    goto LABEL_127;
LABEL_126:
  *(float *)&v113 = v124;
  LODWORD(v108) = 0;
  LODWORD(v108) = *(_DWORD *)(v37 + 32);
  v38.n128_f32[0] = v124;
  if (v124 != *(float *)&v108)
  {
LABEL_127:
    v55 = fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>::Zero();
    if (v120)
      v56 = v123 + 1;
    else
      v56 = 0;
    if (*(_DWORD *)v55)
      v57 = *(_QWORD *)(v55 + 24) + 1;
    else
      v57 = 0;
    if (v56 != v57)
      goto LABEL_148;
    v58 = 0;
    v59 = v122;
    v60 = (uint64_t *)(v55 + 16);
    v61 = v120 && v120 == *(_DWORD *)v55;
    v62 = !v61;
    v63 = !v62;
    while (1)
    {
      v64 = *v60;
      if ((v58 & 1) == 0 && !v63)
        break;
      if ((uint64_t *)v59 == &v121)
        goto LABEL_147;
      if (*(_DWORD *)(v59 + 16) != *(_DWORD *)(v64 + 16))
        goto LABEL_148;
      v59 = *(_QWORD *)(v59 + 8);
      v60 = (uint64_t *)(v64 + 8);
      v58 = 1;
    }
    if (v120)
      goto LABEL_148;
LABEL_147:
    *(float *)&v113 = v124;
    LODWORD(v108) = 0;
    LODWORD(v108) = *(_DWORD *)(v55 + 32);
    v38.n128_f32[0] = v124;
    if (v124 != *(float *)&v108)
    {
LABEL_148:
      v65 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*a1 + 64))(a1, 0x2000000000, 1);
      v66 = *a1;
      if ((v65 & 0x2000000000) != 0)
      {
        v92 = (*(uint64_t (**)(uint64_t *))(v66 + 24))(a1);
        (*(void (**)(uint64_t *))(*a1 + 296))(a1);
        while (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v128 + 24))(v128))
        {
          v71 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v128 + 32))(v128);
          v113 = *(void **)v71;
          LODWORD(v114) = *(_DWORD *)(v71 + 8);
          std::list<int>::list(v115, v71 + 16);
          v72 = *(_DWORD *)(v71 + 48);
          v117 = *(float *)(v71 + 40);
          v118 = v72;
          if (a3)
          {
            v73 = fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>::One();
            fst::Divide<int>((int *)v73, &v120, 1, (uint64_t)&v102);
            v74 = *(float *)(v73 + 32);
            v75 = NAN;
            if (v74 != -INFINITY)
            {
              if ((LODWORD(v124) & 0x7FFFFFFFu) <= 0x7F7FFFFF)
              {
                v75 = INFINITY;
                if (v74 != INFINITY)
                  v75 = v74 - v124;
              }
              else
              {
                v75 = NAN;
              }
            }
            fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>::GallicWeight((uint64_t)&v105, (int *)&v102, v75);
            std::__list_imp<char *>::clear(v103);
            fst::Times<int,(fst::StringType)0>((int *)&v105, (uint64_t)&v114, (uint64_t)&v102);
            v79 = NAN;
            if (v107 != -INFINITY)
            {
              v79 = NAN;
              if (v117 != -INFINITY)
              {
                v79 = INFINITY;
                if (v117 != INFINITY && v107 != INFINITY)
                  v79 = v107 + v117;
              }
            }
            fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>::GallicWeight((uint64_t)&v108, (int *)&v102, v79);
            std::__list_imp<char *>::clear(v103);
            LODWORD(v114) = v108;
            std::list<int>::__assign_with_sentinel[abi:ne180100]<std::__list_const_iterator<int,void *>,std::__list_const_iterator<int,void *>>(v115, v110, (uint64_t)&v109);
            v117 = v112;
            std::__list_imp<char *>::clear(&v109);
            v78 = v106;
          }
          else
          {
            fst::Times<int,(fst::StringType)0>(&v120, (uint64_t)&v114, (uint64_t)&v105);
            v76 = NAN;
            if (v124 != -INFINITY)
            {
              v76 = NAN;
              if (v117 != -INFINITY)
              {
                v76 = INFINITY;
                if (v117 != INFINITY && v124 != INFINITY)
                  v76 = v124 + v117;
              }
            }
            fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>::GallicWeight((uint64_t)&v108, (int *)&v105, v76);
            std::__list_imp<char *>::clear(v106);
            LODWORD(v114) = v108;
            std::list<int>::__assign_with_sentinel[abi:ne180100]<std::__list_const_iterator<int,void *>,std::__list_const_iterator<int,void *>>(v115, v110, (uint64_t)&v109);
            v117 = v112;
            v78 = &v109;
          }
          std::__list_imp<char *>::clear(v78);
          (*(void (**)(uint64_t, void **))(*(_QWORD *)v128 + 88))(v128, &v113);
          std::__list_imp<char *>::clear(v115);
          (*(void (**)(uint64_t))(*(_QWORD *)v128 + 40))(v128);
        }
        if (v128)
          (*(void (**)(uint64_t))(*(_QWORD *)v128 + 8))(v128);
        v39 = a1;
        if (a3)
        {
          v81 = fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>::One();
          fst::Divide<int>((int *)v81, &v120, 1, (uint64_t)&v108);
          v82 = *(float *)(v81 + 32);
          v83 = NAN;
          if (v82 != -INFINITY)
          {
            if ((LODWORD(v124) & 0x7FFFFFFFu) <= 0x7F7FFFFF)
            {
              v83 = INFINITY;
              if (v82 != INFINITY)
                v83 = v82 - v124;
            }
            else
            {
              v83 = NAN;
            }
          }
          fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>::GallicWeight((uint64_t)&v113, (int *)&v108, v83);
          std::__list_imp<char *>::clear(&v109);
          (*(void (**)(uint64_t *__return_ptr, uint64_t *, _QWORD))(*a1 + 32))(&v108, a1, v92);
          fst::Times<int,(fst::StringType)0>((int *)&v113, (uint64_t)&v108, (uint64_t)&v105);
          v87 = NAN;
          if (v116 != -INFINITY)
          {
            v87 = NAN;
            if (v112 != -INFINITY)
            {
              v87 = INFINITY;
              if (v112 != INFINITY && v116 != INFINITY)
                v87 = v116 + v112;
            }
          }
          fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>::GallicWeight((uint64_t)v96, (int *)&v105, v87);
          std::__list_imp<char *>::clear(v106);
          (*(void (**)(uint64_t *, _QWORD, _BYTE *))(*a1 + 184))(a1, v92, v96);
          std::__list_imp<char *>::clear(v97);
          v84 = &v109;
        }
        else
        {
          (*(void (**)(void **__return_ptr, uint64_t *, _QWORD))(*a1 + 32))(&v113, a1, v92);
          fst::Times<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>((uint64_t)&v120, (uint64_t)&v113, (uint64_t)v98);
          (*(void (**)(uint64_t *, _QWORD, _BYTE *))(*a1 + 184))(a1, v92, v98);
          v84 = &v99;
        }
        std::__list_imp<char *>::clear(v84);
        v86 = &v114;
      }
      else
      {
        v67 = (*(uint64_t (**)(uint64_t *))(v66 + 200))(a1);
        if (a3)
        {
          v68 = fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>::One();
          fst::Divide<int>((int *)v68, &v120, 1, (uint64_t)&v113);
          v69 = *(float *)(v68 + 32);
          v70 = NAN;
          if (v69 != -INFINITY)
          {
            if ((LODWORD(v124) & 0x7FFFFFFFu) <= 0x7F7FFFFF)
            {
              v70 = INFINITY;
              if (v69 != INFINITY)
                v70 = v69 - v124;
            }
            else
            {
              v70 = NAN;
            }
          }
          fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>::GallicWeight((uint64_t)&v108, (int *)&v113, v70);
          std::__list_imp<char *>::clear(&v114);
        }
        else
        {
          LODWORD(v108) = v120;
          std::list<int>::list(&v109, (uint64_t)&v121);
          v112 = v124;
        }
        v93 = v108;
        std::list<int>::list(v94, (uint64_t)&v109);
        v95 = v112;
        v85 = (*(uint64_t (**)(uint64_t *))(*a1 + 24))(a1);
        v113 = 0;
        LODWORD(v114) = v93;
        std::list<int>::list(v115, (uint64_t)v94);
        v117 = v95;
        v118 = v85;
        std::__list_imp<char *>::clear(v94);
        v39 = a1;
        (*(void (**)(uint64_t *, uint64_t, void **))(*a1 + 208))(a1, v67, &v113);
        (*(void (**)(uint64_t *, uint64_t))(*v39 + 176))(v39, v67);
        std::__list_imp<char *>::clear(v115);
        v86 = &v109;
      }
      std::__list_imp<char *>::clear(v86);
    }
  }
  v89 = (*(uint64_t (**)(uint64_t *, uint64_t, _QWORD, __n128))(*v39 + 64))(v39, 0x3FFFFFFF0007, 0, v38);
  v90 = fst::ReweightProperties(v89);
  (*(void (**)(uint64_t *, unint64_t, uint64_t))(*v39 + 192))(v39, v90, 0x3FFFFFFF0007);
  std::__list_imp<char *>::clear(&v121);
  result = v125;
  if (v125)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v125 + 8))(v125);
  return result;
}

void sub_1ADC119F4(_Unwind_Exception *a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v5;

  std::__list_imp<char *>::clear((_QWORD *)(v1 + 8));
  std::__list_imp<char *>::clear((_QWORD *)(v3 - 240));
  std::__list_imp<char *>::clear(v2);
  v5 = *(_QWORD *)(v3 - 144);
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  _Unwind_Resume(a1);
}

_QWORD *fst::RemoveWeight<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>(uint64_t a1, uint64_t a2, int a3)
{
  _QWORD *result;
  int v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t *v11;
  uint64_t *v12;
  BOOL v13;
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t *v22;
  uint64_t *v23;
  BOOL v24;
  int v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  float v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  float v36;
  float v37;
  uint64_t v38;
  _QWORD v39[4];
  float v40;
  _QWORD v41[3];
  float v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45[2];
  float v46;
  float v47;
  int v48;
  uint64_t v49;
  _BYTE v50[8];
  _QWORD v51[4];
  _QWORD *v52;
  uint64_t v53;
  unsigned int v54;

  result = (_QWORD *)fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>::One();
  v7 = *(_DWORD *)a2;
  if (*(_DWORD *)a2)
    v8 = *(_QWORD *)(a2 + 24) + 1;
  else
    v8 = 0;
  if (*(_DWORD *)result)
    v9 = result[3] + 1;
  else
    v9 = 0;
  if (v8 == v9)
  {
    v10 = 0;
    v11 = (uint64_t *)(a2 + 16);
    v12 = result + 2;
    if (v7)
      v13 = v7 == *(_DWORD *)result;
    else
      v13 = 0;
    v14 = !v13;
    v15 = v14 ^ 1;
    while (1)
    {
      v16 = *v11;
      v17 = *v12;
      if ((v10 & 1) == 0 && !v15)
        break;
      if (v16 == a2 + 8)
        goto LABEL_21;
      if (*(_DWORD *)(v16 + 16) != *(_DWORD *)(v17 + 16))
        goto LABEL_22;
      v11 = (uint64_t *)(v16 + 8);
      v12 = (uint64_t *)(v17 + 8);
      v10 = 1;
    }
    if (v7)
      goto LABEL_22;
LABEL_21:
    LODWORD(v43) = 0;
    LODWORD(v43) = *(_DWORD *)(a2 + 32);
    v40 = 0.0;
    v40 = *((float *)result + 8);
    if (*(float *)&v43 == v40)
      return result;
  }
LABEL_22:
  result = (_QWORD *)fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>::Zero();
  v18 = *(_DWORD *)a2;
  if (*(_DWORD *)a2)
    v19 = *(_QWORD *)(a2 + 24) + 1;
  else
    v19 = 0;
  if (*(_DWORD *)result)
    v20 = result[3] + 1;
  else
    v20 = 0;
  if (v19 == v20)
  {
    v21 = 0;
    v22 = (uint64_t *)(a2 + 16);
    v23 = result + 2;
    if (v18)
      v24 = v18 == *(_DWORD *)result;
    else
      v24 = 0;
    v25 = !v24;
    v26 = v25 ^ 1;
    while (1)
    {
      v27 = *v22;
      v28 = *v23;
      if ((v21 & 1) == 0 && !v26)
        break;
      if (v27 == a2 + 8)
        goto LABEL_42;
      if (*(_DWORD *)(v27 + 16) != *(_DWORD *)(v28 + 16))
        goto LABEL_43;
      v22 = (uint64_t *)(v27 + 8);
      v23 = (uint64_t *)(v28 + 8);
      v21 = 1;
    }
    if (v18)
      goto LABEL_43;
LABEL_42:
    LODWORD(v43) = 0;
    LODWORD(v43) = *(_DWORD *)(a2 + 32);
    v40 = 0.0;
    v40 = *((float *)result + 8);
    if (*(float *)&v43 == v40)
      return result;
  }
LABEL_43:
  if (a3)
  {
    v54 = 0;
    (*(void (**)(uint64_t, _QWORD **))(*(_QWORD *)a1 + 128))(a1, &v52);
    while (1)
    {
      result = v52;
      if (!v52)
        break;
      v29 = (*(uint64_t (**)(_QWORD *))(*v52 + 16))(v52);
      result = v52;
      if (v29)
      {
        if (v52)
          return (_QWORD *)(*(uint64_t (**)(void))(*v52 + 8))();
        return result;
      }
      if (!v52)
        goto LABEL_51;
      v30 = (*(uint64_t (**)(void))(*v52 + 24))();
      if (v52)
        v31 = (*(uint64_t (**)(_QWORD *))(*v52 + 24))(v52);
      else
        v31 = v54;
LABEL_52:
      (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)a1 + 32))(&v43, a1, v31);
      fst::Divide<int>((int *)&v43, (int *)a2, 1, (uint64_t)&v40);
      v32 = NAN;
      if (v46 != -INFINITY)
      {
        if ((*(_DWORD *)(a2 + 32) & 0x7FFFFFFFu) <= 0x7F7FFFFF)
        {
          v32 = INFINITY;
          if (v46 != INFINITY)
            v32 = v46 - *(float *)(a2 + 32);
        }
        else
        {
          v32 = NAN;
        }
      }
      fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>::GallicWeight((uint64_t)v50, (int *)&v40, v32);
      std::__list_imp<char *>::clear(v41);
      (*(void (**)(uint64_t, uint64_t, _BYTE *))(*(_QWORD *)a1 + 184))(a1, v30, v50);
      std::__list_imp<char *>::clear(v51);
      std::__list_imp<char *>::clear(&v44);
      if (v52)
        (*(void (**)(_QWORD *))(*v52 + 32))(v52);
      else
        ++v54;
    }
    if ((int)v54 >= (int)v53)
      return result;
LABEL_51:
    v30 = v54;
    v31 = v54;
    goto LABEL_52;
  }
  v33 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(_QWORD *)a1 + 296))(a1, v33, &v49);
  while (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v49 + 24))(v49))
  {
    v34 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v49 + 32))(v49);
    v43 = *(_QWORD *)v34;
    LODWORD(v44) = *(_DWORD *)(v34 + 8);
    std::list<int>::list(v45, v34 + 16);
    v35 = *(_DWORD *)(v34 + 48);
    v47 = *(float *)(v34 + 40);
    v48 = v35;
    fst::DivideLeft<int,(fst::StringType)0>((int *)&v44, (int *)a2, (uint64_t)&v52);
    v36 = NAN;
    if (v47 != -INFINITY)
    {
      if ((*(_DWORD *)(a2 + 32) & 0x7FFFFFFFu) <= 0x7F7FFFFF)
      {
        v36 = INFINITY;
        if (v47 != INFINITY)
          v36 = v47 - *(float *)(a2 + 32);
      }
      else
      {
        v36 = NAN;
      }
    }
    fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>::GallicWeight((uint64_t)&v40, (int *)&v52, v36);
    std::__list_imp<char *>::clear(&v53);
    *(float *)&v44 = v40;
    std::list<int>::__assign_with_sentinel[abi:ne180100]<std::__list_const_iterator<int,void *>,std::__list_const_iterator<int,void *>>(v45, v41[1], (uint64_t)v41);
    v47 = v42;
    std::__list_imp<char *>::clear(v41);
    (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v49 + 88))(v49, &v43);
    std::__list_imp<char *>::clear(v45);
    (*(void (**)(uint64_t))(*(_QWORD *)v49 + 40))(v49);
  }
  if (v49)
    (*(void (**)(uint64_t))(*(_QWORD *)v49 + 8))(v49);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)a1 + 32))(&v43, a1, v33);
  fst::DivideLeft<int,(fst::StringType)0>((int *)&v43, (int *)a2, (uint64_t)&v40);
  v37 = NAN;
  if (v46 != -INFINITY)
  {
    if ((*(_DWORD *)(a2 + 32) & 0x7FFFFFFFu) <= 0x7F7FFFFF)
    {
      v37 = INFINITY;
      if (v46 != INFINITY)
        v37 = v46 - *(float *)(a2 + 32);
    }
    else
    {
      v37 = NAN;
    }
  }
  fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>::GallicWeight((uint64_t)&v38, (int *)&v40, v37);
  std::__list_imp<char *>::clear(v41);
  (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(_QWORD *)a1 + 184))(a1, v33, &v38);
  std::__list_imp<char *>::clear(v39);
  return std::__list_imp<char *>::clear(&v44);
}

void sub_1ADC121D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  uint64_t v12;
  va_list va;

  va_start(va, a12);
  std::__list_imp<char *>::clear((_QWORD *)(v12 + 8));
  std::__list_imp<char *>::clear(va);
  _Unwind_Resume(a1);
}

uint64_t fst::ShortestDistance<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,fst::AutoQueue<int>,fst::AnyArcFilter<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _DWORD *v10;
  _QWORD v12[3];
  int v13;
  char v14;
  char v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  _OWORD v19[2];

  v12[0] = a1;
  v12[1] = a2;
  v12[2] = *(_QWORD *)a3;
  v13 = *(_DWORD *)(a3 + 16);
  v14 = *(_BYTE *)(a3 + 20);
  v15 = 0;
  v16 = 0u;
  v17 = 0u;
  v18 = 0u;
  memset(v19, 0, 29);
  v5 = *a2;
  v4 = a2[1];
  if (v4 != *a2)
  {
    do
    {
      v6 = v4 - 40;
      std::__list_imp<char *>::clear((_QWORD *)(v4 - 32));
      v4 = v6;
    }
    while (v6 != v5);
  }
  a2[1] = v5;
  fst::ShortestDistanceState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,fst::AutoQueue<int>,fst::AnyArcFilter<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>::ShortestDistance(v12);
  if (BYTE12(v19[1]))
  {
    v8 = *a2;
    v7 = a2[1];
    if (v7 != *a2)
    {
      do
      {
        v9 = v7 - 40;
        std::__list_imp<char *>::clear((_QWORD *)(v7 - 32));
        v7 = v9;
      }
      while (v9 != v8);
    }
    a2[1] = v8;
    v10 = (_DWORD *)fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>::NoWeight();
    std::vector<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>>::resize(a2, 1uLL, v10);
  }
  return fst::ShortestDistanceState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::AutoQueue<int>,fst::AnyArcFilter<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::~ShortestDistanceState((uint64_t)v12);
}

void sub_1ADC12374(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  fst::ShortestDistanceState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::AutoQueue<int>,fst::AnyArcFilter<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::~ShortestDistanceState((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t fst::Reverse<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>(uint64_t a1, uint64_t *a2, char a3)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t i;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t *v20;
  BOOL v21;
  int v22;
  uint64_t v23;
  float v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  uint64_t *v30;
  BOOL v31;
  _BOOL4 v32;
  int v33;
  uint64_t v34;
  int *v35;
  unint64_t v36;
  int v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  float v41;
  int v42;
  uint64_t v43;
  int v44;
  int *v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  char v49;
  unint64_t v50;
  uint64_t *v51;
  BOOL v52;
  int v53;
  uint64_t v54;
  _BOOL4 v55;
  uint64_t v56;
  int v57;
  uint64_t v58;
  char v59;
  float v60;
  void **v62;
  int v63;
  uint64_t v64;
  char v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v71;
  unsigned int v72;
  char v73[8];
  uint64_t v74[4];
  float v75;
  _QWORD v76[3];
  float v77;
  uint64_t v78;
  uint64_t v79[4];
  int v80;
  uint64_t v81[3];
  float v82;
  float v83;
  uint64_t v84[3];
  float v85;
  void *__p;
  _DWORD *v87;
  unint64_t v88;
  _DWORD *v89;
  unint64_t v90;
  int v91;
  _QWORD v92[3];
  float v93;
  int v94;
  _QWORD v95[3];
  int v96;
  uint64_t v97;
  int v98;
  unsigned int v99;
  uint64_t v100;
  uint64_t v101;
  unint64_t v102;
  _DWORD *v103;
  unint64_t v104;
  void **p_p;
  uint64_t v106;
  uint64_t v107;
  uint64_t *v108;
  float v109;
  float v110;
  int v111;
  uint64_t v112;
  int v113;
  uint64_t v114[4];

  (*(void (**)(uint64_t *))(*a2 + 224))(a2);
  v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 112))(a1);
  (*(void (**)(uint64_t *, uint64_t))(*a2 + 280))(a2, v6);
  v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1);
  (*(void (**)(uint64_t *, uint64_t))(*a2 + 288))(a2, v7);
  if ((*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 64))(a1, 1, 0))
  {
    v8 = fst::CountStates<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>(a1);
    (*(void (**)(uint64_t *, _QWORD))(*a2 + 248))(a2, (v8 + 1));
  }
  v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  v10 = 0;
  v112 = 0;
  v72 = v9;
  if ((a3 & 1) != 0)
    goto LABEL_95;
  LODWORD(v102) = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 128))(a1, &v100);
  for (i = 0xFFFFFFFFLL; ; i = v14)
  {
    if (v100)
    {
      v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v100 + 16))(v100);
      v13 = v100;
      if ((v12 & 1) != 0)
        goto LABEL_39;
      if (v100)
      {
        v14 = (*(uint64_t (**)(void))(*(_QWORD *)v100 + 24))();
        goto LABEL_11;
      }
    }
    else if ((int)v102 >= (int)v101)
    {
      goto LABEL_41;
    }
    v14 = v102;
LABEL_11:
    (*(void (**)(void ***__return_ptr, uint64_t, uint64_t))(*(_QWORD *)a1 + 32))(&p_p, a1, v14);
    v15 = fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>::Zero();
    v16 = (_DWORD)p_p ? (uint64_t)v108 + 1 : 0;
    v17 = *(_DWORD *)v15 ? *(_QWORD *)(v15 + 24) + 1 : 0;
    if (v16 != v17)
      break;
    v18 = 0;
    v19 = v107;
    v20 = (uint64_t *)(v15 + 16);
    if ((_DWORD)p_p)
      v21 = (_DWORD)p_p == *(_DWORD *)v15;
    else
      v21 = 0;
    v22 = !v21;
    while (1)
    {
      v23 = *v20;
      if ((v18 & 1) == 0 && v22 == 1)
        break;
      if ((uint64_t *)v19 == &v106)
        goto LABEL_36;
      if (*(_DWORD *)(v19 + 16) != *(_DWORD *)(v23 + 16))
        goto LABEL_30;
      v19 = *(_QWORD *)(v19 + 8);
      v20 = (uint64_t *)(v23 + 8);
      v18 = 1;
    }
    if ((_DWORD)p_p)
      break;
LABEL_36:
    *(float *)&__p = v109;
    v83 = 0.0;
    v83 = *(float *)(v15 + 32);
    v24 = v109;
    std::__list_imp<char *>::clear(&v106);
    if (v24 != v83)
      goto LABEL_31;
    v14 = i;
LABEL_32:
    if (v100)
      (*(void (**)(uint64_t))(*(_QWORD *)v100 + 32))(v100);
    else
      LODWORD(v102) = v102 + 1;
  }
LABEL_30:
  std::__list_imp<char *>::clear(&v106);
LABEL_31:
  if ((_DWORD)i == -1)
    goto LABEL_32;
  i = 0xFFFFFFFFLL;
  v13 = v100;
LABEL_39:
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
LABEL_41:
  if ((_DWORD)i != -1)
  {
    (*(void (**)(void ***__return_ptr, uint64_t, uint64_t))(*(_QWORD *)a1 + 32))(&p_p, a1, i);
    v25 = fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>::One();
    if ((_DWORD)p_p)
      v26 = (char *)v108 + 1;
    else
      v26 = 0;
    if (*(_DWORD *)v25)
      v27 = *(_QWORD *)(v25 + 24) + 1;
    else
      v27 = 0;
    if (v26 != (char *)v27)
      goto LABEL_63;
    v28 = 0;
    v29 = v107;
    v30 = (uint64_t *)(v25 + 16);
    v31 = (_DWORD)p_p && (_DWORD)p_p == *(_DWORD *)v25;
    v32 = !v31;
    v33 = !v32;
    while (1)
    {
      v34 = *v30;
      if ((v28 & 1) == 0 && !v33)
        break;
      if ((uint64_t *)v29 == &v106)
        goto LABEL_80;
      if (*(_DWORD *)(v29 + 16) != *(_DWORD *)(v34 + 16))
        goto LABEL_63;
      v29 = *(_QWORD *)(v29 + 8);
      v30 = (uint64_t *)(v34 + 8);
      v28 = 1;
    }
    if (!(_DWORD)p_p)
    {
LABEL_80:
      *(float *)&v100 = v109;
      LODWORD(__p) = 0;
      LODWORD(__p) = *(_DWORD *)(v25 + 32);
      v41 = v109;
      std::__list_imp<char *>::clear(&v106);
      if (v41 == *(float *)&__p)
      {
        v42 = 0;
        v71 = 0;
        goto LABEL_96;
      }
    }
    else
    {
LABEL_63:
      std::__list_imp<char *>::clear(&v106);
    }
    __p = 0;
    v87 = 0;
    v88 = 0;
    p_p = &__p;
    v106 = 0;
    v107 = 0;
    v108 = &v112;
    fst::DfsVisit<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,fst::SccVisitor<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>,fst::AnyArcFilter<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>(a1, (uint64_t *)&p_p, 0);
    v35 = (int *)__p;
    if (__p != v87)
    {
      v36 = 0;
      do
      {
        v37 = *v35++;
        if (v37 == *((_DWORD *)__p + (int)i))
          ++v36;
      }
      while (v35 != v87);
      if (v36 > 1)
        goto LABEL_90;
    }
    v104 = 0;
    (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(_QWORD *)a1 + 136))(a1, i, &v100);
    while (2)
    {
      while (2)
      {
        if (v100)
        {
          v38 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v100 + 24))(v100);
          v39 = v100;
          if ((v38 & 1) != 0)
            goto LABEL_84;
          if (v100)
          {
            v40 = (*(uint64_t (**)(void))(*(_QWORD *)v100 + 32))();
            v39 = v100;
            if (*(_DWORD *)(v40 + 48) == (_DWORD)i)
            {
              i = 0xFFFFFFFFLL;
LABEL_84:
              if (v39)
              {
                (*(void (**)(uint64_t))(*(_QWORD *)v39 + 8))(v39);
                goto LABEL_88;
              }
LABEL_86:
              if (v103)
                --*v103;
LABEL_88:
              if ((_DWORD)i != -1)
              {
                v10 = 0x2000000000;
                goto LABEL_91;
              }
LABEL_90:
              v10 = 0;
              i = 0xFFFFFFFFLL;
LABEL_91:
              if (__p)
              {
                v87 = __p;
                operator delete(__p);
              }
              if ((_DWORD)i != -1)
              {
                v71 = v10;
                v42 = 0;
                goto LABEL_96;
              }
              goto LABEL_95;
            }
            if (v100)
            {
              (*(void (**)(void))(*(_QWORD *)v100 + 40))();
              continue;
            }
            goto LABEL_79;
          }
        }
        else if (v104 >= v102)
        {
          goto LABEL_86;
        }
        break;
      }
      if (*(_DWORD *)(v101 + 56 * v104 + 48) == (_DWORD)i)
      {
        i = 0xFFFFFFFFLL;
        goto LABEL_86;
      }
LABEL_79:
      ++v104;
      continue;
    }
  }
  v10 = 0;
LABEL_95:
  v71 = v10;
  i = (*(uint64_t (**)(uint64_t *))(*a2 + 200))(a2);
  v42 = 1;
LABEL_96:
  v99 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 128))(a1, &v97);
  while (2)
  {
    if (!v97)
    {
      if ((int)v99 >= v98)
        goto LABEL_165;
      goto LABEL_102;
    }
    if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v97 + 16))(v97))
    {
      if (v97)
      {
        v43 = (*(uint64_t (**)(void))(*(_QWORD *)v97 + 24))();
LABEL_103:
        v44 = v43 + v42;
        while ((*(int (**)(uint64_t *))(*a2 + 160))(a2) <= v44)
          (*(void (**)(uint64_t *))(*a2 + 200))(a2);
        if ((_DWORD)v43 == v72)
        {
          v45 = (int *)fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)1>::One();
          v94 = *v45;
          std::list<int>::list(v95, (uint64_t)(v45 + 2));
          v96 = v45[8];
          (*(void (**)(uint64_t *, _QWORD, int *))(*a2 + 184))(a2, (v43 + v42), &v94);
          std::__list_imp<char *>::clear(v95);
        }
        (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)a1 + 32))(&v100, a1, v43);
        v46 = fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>::Zero();
        if ((_DWORD)v100)
          v47 = (char *)v103 + 1;
        else
          v47 = 0;
        if (*(_DWORD *)v46)
          v48 = *(_QWORD *)(v46 + 24) + 1;
        else
          v48 = 0;
        if (v47 == (char *)v48)
        {
          v49 = 0;
          v50 = v102;
          v51 = (uint64_t *)(v46 + 16);
          if ((_DWORD)v100)
            v52 = (_DWORD)v100 == *(_DWORD *)v46;
          else
            v52 = 0;
          v53 = !v52;
          while (1)
          {
            v54 = *v51;
            if ((v49 & 1) == 0 && v53 == 1)
              break;
            if ((uint64_t *)v50 == &v101)
              goto LABEL_128;
            if (*(_DWORD *)(v50 + 16) != *(_DWORD *)(v54 + 16))
              goto LABEL_127;
            v50 = *(_QWORD *)(v50 + 8);
            v51 = (uint64_t *)(v54 + 8);
            v49 = 1;
          }
          if ((_DWORD)v100)
            goto LABEL_127;
LABEL_128:
          LODWORD(p_p) = v104;
          LODWORD(__p) = 0;
          LODWORD(__p) = *(_DWORD *)(v46 + 32);
          v55 = *(float *)&v104 != *(float *)&__p;
        }
        else
        {
LABEL_127:
          v55 = 1;
        }
        if ((v42 & v55) == 1)
        {
          fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>::Reverse(&v100, (uint64_t)&v91);
          p_p = 0;
          LODWORD(v106) = v91;
          std::list<int>::list(&v107, (uint64_t)v92);
          v110 = v93;
          v111 = v43 + v42;
          std::__list_imp<char *>::clear(v92);
          (*(void (**)(uint64_t *, _QWORD, void ***))(*a2 + 208))(a2, 0, &p_p);
          std::__list_imp<char *>::clear(&v107);
        }
        v90 = 0;
        (*(void (**)(uint64_t, uint64_t, void **))(*(_QWORD *)a1 + 136))(a1, v43, &__p);
LABEL_132:
        if (__p)
        {
          if ((*(unsigned int (**)(void *))(*(_QWORD *)__p + 24))(__p))
          {
            if (__p)
            {
              (*(void (**)(void))(*(_QWORD *)__p + 8))();
              goto LABEL_160;
            }
LABEL_158:
            if (v89)
              --*v89;
LABEL_160:
            std::__list_imp<char *>::clear(&v101);
            if (v97)
              (*(void (**)(uint64_t))(*(_QWORD *)v97 + 32))(v97);
            else
              ++v99;
            continue;
          }
          if (__p)
          {
            v56 = (*(uint64_t (**)(void))(*(_QWORD *)__p + 32))();
LABEL_138:
            v57 = *(_DWORD *)(v56 + 48);
            fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>::Reverse((_DWORD *)(v56 + 8), (uint64_t)&v83);
            v58 = (v57 + v42);
            if ((_DWORD)v58 == (_DWORD)i)
              v59 = v42;
            else
              v59 = 1;
            if ((v59 & 1) == 0)
            {
              (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)a1 + 32))(&v78, a1, i);
              fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>::Reverse(&v78, (uint64_t)&v80);
              fst::Times<int,(fst::StringType)1>(&v80, (uint64_t)&v83, (uint64_t)&v113);
              v60 = NAN;
              if (v82 != -INFINITY)
              {
                v60 = NAN;
                if (v85 != -INFINITY)
                {
                  v60 = INFINITY;
                  if (v85 != INFINITY && v82 != INFINITY)
                    v60 = v82 + v85;
                }
              }
              fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)1>::GallicWeight((uint64_t)&p_p, &v113, v60);
              std::__list_imp<char *>::clear(v114);
              v83 = *(float *)&p_p;
              std::list<int>::__assign_with_sentinel[abi:ne180100]<std::__list_const_iterator<int,void *>,std::__list_const_iterator<int,void *>>(v84, v107, (uint64_t)&v106);
              v85 = v109;
              std::__list_imp<char *>::clear(&v106);
              std::__list_imp<char *>::clear(v81);
              std::__list_imp<char *>::clear(v79);
            }
            v62 = *(void ***)v56;
            v75 = v83;
            std::list<int>::list(v76, (uint64_t)v84);
            v77 = v85;
            p_p = v62;
            *(float *)&v106 = v75;
            std::list<int>::list(&v107, (uint64_t)v76);
            v110 = v77;
            v111 = v44;
            std::__list_imp<char *>::clear(v76);
            while (1)
            {
              v63 = (*(uint64_t (**)(uint64_t *))(*a2 + 160))(a2);
              v64 = *a2;
              if (v63 > (int)v58)
                break;
              (*(void (**)(uint64_t *))(v64 + 200))(a2);
            }
            (*(void (**)(uint64_t *, uint64_t, void ***))(v64 + 208))(a2, v58, &p_p);
            std::__list_imp<char *>::clear(&v107);
            std::__list_imp<char *>::clear(v84);
            if (__p)
              (*(void (**)(void *))(*(_QWORD *)__p + 40))(__p);
            else
              ++v90;
            goto LABEL_132;
          }
        }
        else if (v90 >= v88)
        {
          goto LABEL_158;
        }
        v56 = (uint64_t)&v87[14 * v90];
        goto LABEL_138;
      }
LABEL_102:
      v43 = v99;
      goto LABEL_103;
    }
    break;
  }
  if (v97)
    (*(void (**)(void))(*(_QWORD *)v97 + 8))();
LABEL_165:
  (*(void (**)(uint64_t *, uint64_t))(*a2 + 176))(a2, i);
  if ((_DWORD)i == v72)
    v65 = v42;
  else
    v65 = 1;
  if ((v65 & 1) == 0)
  {
    (*(void (**)(void ***__return_ptr, uint64_t, _QWORD))(*(_QWORD *)a1 + 32))(&p_p, a1, v72);
    fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>::Reverse(&p_p, (uint64_t)v73);
    (*(void (**)(uint64_t *, _QWORD, char *))(*a2 + 184))(a2, v72, v73);
    std::__list_imp<char *>::clear(v74);
    std::__list_imp<char *>::clear(&v106);
  }
  v66 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 64))(a1, 0x3FFFFFFF0004, 0);
  v67 = v112 | v66;
  v68 = (*(uint64_t (**)(uint64_t *, uint64_t, _QWORD))(*a2 + 64))(a2, 0x3FFFFFFF0007, 0) | v71;
  v69 = fst::ReverseProperties(v67, v42);
  return (*(uint64_t (**)(uint64_t *, unint64_t, uint64_t))(*a2 + 192))(a2, v68 | v69, 0x3FFFFFFF0007);
}

void sub_1ADC12EA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,void *__p)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t fst::ShortestDistance<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>,fst::AutoQueue<int>,fst::AnyArcFilter<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _DWORD *v11;
  _QWORD v13[3];
  int v14;
  char v15;
  char v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  _OWORD v20[2];

  v13[0] = a1;
  v13[1] = a2;
  v13[2] = *(_QWORD *)a3;
  v14 = *(_DWORD *)(a3 + 16);
  v15 = *(_BYTE *)(a3 + 20);
  v16 = 0;
  v17 = 0u;
  v18 = 0u;
  v19 = 0u;
  memset(v20, 0, 29);
  v6 = *a2;
  v5 = a2[1];
  if (v5 != *a2)
  {
    do
    {
      v7 = v5 - 40;
      std::__list_imp<char *>::clear((_QWORD *)(v5 - 32));
      v5 = v7;
    }
    while (v7 != v6);
  }
  a2[1] = v6;
  fst::ShortestDistanceState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>,fst::AutoQueue<int>,fst::AnyArcFilter<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>::ShortestDistance(v13, *(_DWORD *)(a3 + 12));
  if (BYTE12(v20[1]))
  {
    v9 = *a2;
    v8 = a2[1];
    if (v8 != *a2)
    {
      do
      {
        v10 = v8 - 40;
        std::__list_imp<char *>::clear((_QWORD *)(v8 - 32));
        v8 = v10;
      }
      while (v10 != v9);
    }
    a2[1] = v9;
    v11 = (_DWORD *)fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)1>::NoWeight();
    std::vector<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)1>>::resize(a2, 1uLL, v11);
  }
  return fst::ShortestDistanceState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::AutoQueue<int>,fst::AnyArcFilter<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::~ShortestDistanceState((uint64_t)v13);
}

void sub_1ADC13148(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  fst::ShortestDistanceState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::AutoQueue<int>,fst::AnyArcFilter<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::~ShortestDistanceState((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *std::vector<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>>::resize(uint64_t *result, unint64_t a2, _DWORD *a3)
{
  uint64_t *v3;
  uint64_t v4;
  unint64_t v5;
  BOOL v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v3 = result;
  v4 = result[1];
  v5 = 0xCCCCCCCCCCCCCCCDLL * ((v4 - *result) >> 3);
  v6 = a2 >= v5;
  v7 = a2 - v5;
  if (v7 != 0 && v6)
    return std::vector<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>>::__append(result, v7, a3);
  if (!v6)
  {
    v8 = *result + 40 * a2;
    if (v4 != v8)
    {
      do
      {
        v9 = v4 - 40;
        result = std::__list_imp<char *>::clear((_QWORD *)(v4 - 32));
        v4 = v9;
      }
      while (v9 != v8);
    }
    v3[1] = v8;
  }
  return result;
}

uint64_t fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>::NoWeight()
{
  unsigned __int8 v0;
  uint64_t v2;
  _DWORD *v3;

  if ((v0 & 1) == 0
  {
    v2 = operator new();
    v3 = (_DWORD *)fst::ProductWeight<fst::StringWeight<int,(fst::StringType)0>,fst::TropicalWeightTpl<float>>::NoWeight();
    *(_DWORD *)v2 = *v3;
    std::list<int>::list((_QWORD *)(v2 + 8), (uint64_t)(v3 + 2));
    *(_DWORD *)(v2 + 32) = v3[8];
    fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>::NoWeight(void)::no_weight = v2;
  }
  return fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>::NoWeight(void)::no_weight;
}

void sub_1ADC13280(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

_QWORD *fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)1>::Reverse@<X0>(_DWORD *a1@<X0>, uint64_t a2@<X8>)
{
  int v4;
  _QWORD v5[3];
  int v6;

  fst::ProductWeight<fst::StringWeight<int,(fst::StringType)1>,fst::TropicalWeightTpl<float>>::Reverse(a1, (uint64_t)&v4);
  *(_DWORD *)a2 = v4;
  std::list<int>::list((_QWORD *)(a2 + 8), (uint64_t)v5);
  *(_DWORD *)(a2 + 32) = v6;
  return std::__list_imp<char *>::clear(v5);
}

void sub_1ADC13310(_Unwind_Exception *a1)
{
  _QWORD *v1;

  std::__list_imp<char *>::clear(v1);
  _Unwind_Resume(a1);
}

_QWORD *fst::VectorFst<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>,fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>>::~VectorFst(_QWORD *a1)
{
  _DWORD *v2;
  int v3;

  *a1 = &unk_1E5D25300;
  v2 = (_DWORD *)a1[1];
  if (v2)
  {
    v3 = v2[14] - 1;
    v2[14] = v3;
    if (!v3)
      (*(void (**)(_DWORD *))(*(_QWORD *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t fst::AutoQueue<int>::AutoQueue<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,fst::AnyArcFilter<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  int *v7;
  int *v8;
  int *v9;
  int v10;
  int *v11;
  int v12;
  int v13;
  BOOL v14;
  int v15;
  unint64_t v16;
  uint64_t v17;
  fst *v18;
  _QWORD *v19;
  uint64_t v20;
  fst *v21;
  _QWORD *v22;
  void *v23;
  uint64_t v24;
  fst *v25;
  _QWORD *v26;
  uint64_t v27;
  fst *v28;
  _QWORD *v29;
  uint64_t v30;
  fst *v31;
  _QWORD *v32;
  fst *v33;
  _QWORD *v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  fst *v38;
  _QWORD *v39;
  _QWORD *v40;
  uint64_t v41;
  fst *v42;
  _QWORD *v43;
  _QWORD *v44;
  fst *v45;
  _QWORD *v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t result;
  void *__p[2];
  char v51;
  char v52;
  __int16 v53;
  void *v54[3];
  uint64_t v55[2];
  uint64_t v56;
  uint64_t *v57;
  uint64_t v58;

  *(_DWORD *)(a1 + 8) = 7;
  *(_BYTE *)(a1 + 12) = 0;
  *(_OWORD *)(a1 + 24) = 0u;
  v4 = (_QWORD *)(a1 + 24);
  *(_QWORD *)a1 = &unk_1E5D239D8;
  v5 = (_QWORD *)(a1 + 48);
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  v6 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, 0x4E00000000, 0);
  if ((v6 & 0x4000000000) != 0 || (*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2) == -1)
  {
    v20 = operator new();
    *(_DWORD *)(v20 + 8) = 5;
    *(_BYTE *)(v20 + 12) = 0;
    *(_QWORD *)v20 = &unk_1E5D1EEB0;
    *(_QWORD *)(v20 + 16) = 0xFFFFFFFF00000000;
    *(_QWORD *)(v20 + 32) = 0;
    *(_QWORD *)(v20 + 40) = 0;
    *(_QWORD *)(v20 + 24) = 0;
    *(_QWORD *)(a1 + 16) = v20;
    if (FLAGS_v < 2)
      return a1;
    std::string::basic_string[abi:ne180100]<0>(v55, "INFO");
    v21 = fst::LogMessage::LogMessage((fst *)v54, (uint64_t)v55);
    v22 = (_QWORD *)fst::cerr(v21);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"AutoQueue: using state-order discipline", 39);
    goto LABEL_18;
  }
  if ((v6 & 0x800000000) != 0)
  {
    v24 = operator new();
    fst::TopOrderQueue<int>::TopOrderQueue<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,fst::AnyArcFilter<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>(v24, a2);
    *(_QWORD *)(a1 + 16) = v24;
    if (FLAGS_v < 2)
      return a1;
    std::string::basic_string[abi:ne180100]<0>(v55, "INFO");
    v25 = fst::LogMessage::LogMessage((fst *)v54, (uint64_t)v55);
    v26 = (_QWORD *)fst::cerr(v25);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)"AutoQueue: using top-order discipline", 37);
    goto LABEL_18;
  }
  if ((v6 & 0x200000000) != 0)
  {
    v27 = operator new();
    *(_DWORD *)(v27 + 8) = 2;
    *(_BYTE *)(v27 + 12) = 0;
    *(_OWORD *)(v27 + 16) = 0u;
    *(_OWORD *)(v27 + 32) = 0u;
    *(_OWORD *)(v27 + 48) = 0u;
    *(_QWORD *)v27 = &unk_1E5D27B60;
    *(_QWORD *)(a1 + 16) = v27;
    if (FLAGS_v < 2)
      return a1;
    std::string::basic_string[abi:ne180100]<0>(v55, "INFO");
    v28 = fst::LogMessage::LogMessage((fst *)v54, (uint64_t)v55);
    v29 = (_QWORD *)fst::cerr(v28);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)"AutoQueue: using LIFO discipline", 32);
LABEL_18:
    fst::LogMessage::~LogMessage((fst::LogMessage *)v54);
    if (SHIBYTE(v56) < 0)
    {
      v23 = (void *)v55[0];
LABEL_49:
      operator delete(v23);
    }
    return a1;
  }
  v58 = 0;
  v55[0] = (uint64_t)v5;
  v55[1] = 0;
  v56 = 0;
  v57 = &v58;
  fst::DfsVisit<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,fst::SccVisitor<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>,fst::AnyArcFilter<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>(a2, v55, 0);
  v7 = *(int **)(a1 + 48);
  v8 = *(int **)(a1 + 56);
  if (v7 != v8)
  {
    v9 = v7 + 1;
    if (v7 + 1 != v8)
    {
      v10 = *v7;
      v11 = v7 + 1;
      do
      {
        v13 = *v11++;
        v12 = v13;
        v14 = v10 < v13;
        if (v10 <= v13)
          v10 = v12;
        if (v14)
          v7 = v9;
        v9 = v11;
      }
      while (v11 != v8);
    }
  }
  v15 = *v7;
  v16 = *v7 + 1;
  std::vector<fst::QueueType>::vector(v54, v16);
  v53 = 0;
  fst::AutoQueue<int>::SccQueueType<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,fst::AnyArcFilter<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>,fst::NaturalLess<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>>>(a2, v5, (uint64_t)v54, 0, &v53, (_BYTE *)&v53 + 1);
  if (HIBYTE(v53))
  {
    v17 = operator new();
    *(_DWORD *)(v17 + 8) = 2;
    *(_BYTE *)(v17 + 12) = 0;
    *(_OWORD *)(v17 + 16) = 0u;
    *(_OWORD *)(v17 + 32) = 0u;
    *(_OWORD *)(v17 + 48) = 0u;
    *(_QWORD *)v17 = &unk_1E5D27B60;
    *(_QWORD *)(a1 + 16) = v17;
    if (FLAGS_v < 2)
      goto LABEL_47;
    std::string::basic_string[abi:ne180100]<0>(__p, "INFO");
    v18 = fst::LogMessage::LogMessage((fst *)&v52, (uint64_t)__p);
    v19 = (_QWORD *)fst::cerr(v18);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"AutoQueue: using LIFO discipline", 32);
LABEL_27:
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v52);
    if (v51 < 0)
      operator delete(__p[0]);
LABEL_47:
    v23 = v54[0];
    if (v54[0])
    {
      v54[1] = v54[0];
      goto LABEL_49;
    }
    return a1;
  }
  if ((_BYTE)v53)
  {
    v30 = operator new();
    fst::TopOrderQueue<int>::TopOrderQueue(v30, (uint64_t)v5);
    *(_QWORD *)(a1 + 16) = v30;
    if (FLAGS_v < 2)
      goto LABEL_47;
    std::string::basic_string[abi:ne180100]<0>(__p, "INFO");
    v31 = fst::LogMessage::LogMessage((fst *)&v52, (uint64_t)__p);
    v32 = (_QWORD *)fst::cerr(v31);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)"AutoQueue: using top-order discipline", 37);
    goto LABEL_27;
  }
  if (FLAGS_v >= 2)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "INFO");
    v33 = fst::LogMessage::LogMessage((fst *)&v52, (uint64_t)__p);
    v34 = (_QWORD *)fst::cerr(v33);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)"AutoQueue: using SCC meta-discipline", 36);
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v52);
    if (v51 < 0)
      operator delete(__p[0]);
  }
  std::vector<fst::QueueBase<int> *,std::allocator<fst::QueueBase<int> *>>::resize((uint64_t)v4, v16);
  if (v15 < 0)
  {
LABEL_46:
    v48 = operator new();
    *(_DWORD *)(v48 + 8) = 6;
    *(_BYTE *)(v48 + 12) = 0;
    *(_QWORD *)v48 = &unk_1E5D22CF0;
    *(_QWORD *)(v48 + 16) = v4;
    *(_QWORD *)(v48 + 24) = v5;
    *(_QWORD *)(v48 + 32) = 0xFFFFFFFF00000000;
    *(_QWORD *)(v48 + 48) = 0;
    *(_QWORD *)(v48 + 56) = 0;
    *(_QWORD *)(v48 + 40) = 0;
    *(_QWORD *)(a1 + 16) = v48;
    goto LABEL_47;
  }
  v35 = 0;
  while (1)
  {
    v36 = *((_DWORD *)v54[0] + v35);
    if (v36)
      break;
    *(_QWORD *)(*v4 + 8 * v35) = 0;
    if (FLAGS_v >= 3)
    {
      std::string::basic_string[abi:ne180100]<0>(__p, "INFO");
      v45 = fst::LogMessage::LogMessage((fst *)&v52, (uint64_t)__p);
      v46 = (_QWORD *)fst::cerr(v45);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v46, (uint64_t)"AutoQueue: SCC #", 16);
      v47 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v47, (uint64_t)": using trivial discipline", 26);
LABEL_43:
      fst::LogMessage::~LogMessage((fst::LogMessage *)&v52);
      if (v51 < 0)
        operator delete(__p[0]);
    }
LABEL_45:
    if (v16 == ++v35)
      goto LABEL_46;
  }
  if (v36 == 2)
  {
    v41 = operator new();
    *(_DWORD *)(v41 + 8) = 2;
    *(_BYTE *)(v41 + 12) = 0;
    *(_OWORD *)(v41 + 16) = 0u;
    *(_OWORD *)(v41 + 32) = 0u;
    *(_OWORD *)(v41 + 48) = 0u;
    *(_QWORD *)v41 = &unk_1E5D27B60;
    *(_QWORD *)(*v4 + 8 * v35) = v41;
    if (FLAGS_v >= 3)
    {
      std::string::basic_string[abi:ne180100]<0>(__p, "INFO");
      v42 = fst::LogMessage::LogMessage((fst *)&v52, (uint64_t)__p);
      v43 = (_QWORD *)fst::cerr(v42);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"AutoQueue: SCC #", 16);
      v44 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v44, (uint64_t)": using LIFO disciplle", 22);
      goto LABEL_43;
    }
    goto LABEL_45;
  }
  if (v36 != 3)
  {
    v37 = operator new();
    *(_DWORD *)(v37 + 8) = 1;
    *(_BYTE *)(v37 + 12) = 0;
    *(_OWORD *)(v37 + 16) = 0u;
    *(_OWORD *)(v37 + 32) = 0u;
    *(_OWORD *)(v37 + 48) = 0u;
    *(_QWORD *)v37 = &unk_1E5D23A28;
    *(_QWORD *)(*v4 + 8 * v35) = v37;
    if (FLAGS_v >= 3)
    {
      std::string::basic_string[abi:ne180100]<0>(__p, "INFO");
      v38 = fst::LogMessage::LogMessage((fst *)&v52, (uint64_t)__p);
      v39 = (_QWORD *)fst::cerr(v38);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v39, (uint64_t)"AutoQueue: SCC #", 16);
      v40 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)": using FIFO disciplle", 22);
      goto LABEL_43;
    }
    goto LABEL_45;
  }
  result = operator new();
  __break(1u);
  return result;
}

void sub_1ADC13A50(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, char a16, char a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  uint64_t v26;
  void **v27;
  void **v28;
  void *v30;
  void *v31;

  if (a14 < 0)
    operator delete(__p);
  if (a18)
    operator delete(a18);
  v30 = *v28;
  if (*v28)
  {
    *(_QWORD *)(v26 + 56) = v30;
    operator delete(v30);
  }
  v31 = *v27;
  if (*v27)
  {
    *(_QWORD *)(v26 + 32) = v31;
    operator delete(v31);
  }
  _Unwind_Resume(exception_object);
}

uint64_t fst::AutoQueue<int>::SccQueueType<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,fst::AnyArcFilter<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>,fst::NaturalLess<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>>>(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4, _BYTE *a5, _BYTE *a6)
{
  uint64_t v11;
  unint64_t v12;
  uint64_t result;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _DWORD *v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t *v27;
  uint64_t *v28;
  BOOL v29;
  _BOOL4 v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  uint64_t *v38;
  uint64_t *v39;
  BOOL v40;
  _BOOL4 v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  __n128 v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  char v49;
  uint64_t *v50;
  uint64_t *v51;
  BOOL v52;
  _BOOL4 v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  char v60;
  uint64_t *v61;
  uint64_t *v62;
  BOOL v63;
  _BOOL4 v64;
  uint64_t v65;
  uint64_t v66;
  _QWORD v68[3];
  _DWORD *v69;
  unint64_t v70;
  uint64_t v71;
  int v72;
  unsigned int v73;
  float v74;
  float v75;

  *a5 = 1;
  *a6 = 1;
  v11 = *(_QWORD *)(a3 + 8) - *(_QWORD *)a3;
  if (v11)
  {
    v12 = v11 >> 2;
    if (v12 <= 1)
      v12 = 1;
    bzero(*(void **)a3, 4 * v12);
  }
  v73 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 128))(a1, &v71);
  while (1)
  {
    result = v71;
    if (!v71)
    {
      if ((int)v73 >= v72)
        return result;
LABEL_11:
      v15 = v73;
      goto LABEL_12;
    }
    v14 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v71 + 16))(v71);
    result = v71;
    if (v14)
      break;
    if (!v71)
      goto LABEL_11;
    v15 = (*(uint64_t (**)(void))(*(_QWORD *)v71 + 24))();
LABEL_12:
    v70 = 0;
    (*(void (**)(uint64_t, uint64_t, _QWORD *))(*(_QWORD *)a1 + 136))(a1, v15, v68);
    v16 = (int)v15;
    while (1)
    {
      if (!v68[0])
      {
        if (v70 >= v68[2])
          goto LABEL_114;
        goto LABEL_18;
      }
      if ((*(unsigned int (**)(_QWORD))(*(_QWORD *)v68[0] + 24))(v68[0]))
        break;
      if (v68[0])
      {
        v17 = (*(uint64_t (**)(void))(*(_QWORD *)v68[0] + 32))();
        goto LABEL_19;
      }
LABEL_18:
      v17 = v68[1] + 56 * v70;
LABEL_19:
      v18 = *(int *)(*a2 + 4 * v16);
      if ((_DWORD)v18 == *(_DWORD *)(*a2 + 4 * *(int *)(v17 + 48)))
      {
        v19 = *(_DWORD **)a3;
        if (!a4
          || (v20 = fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>::One(),
              fst::NaturalLess<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>>::operator()(a4, v17 + 8, v20)))
        {
          v21 = 1;
          goto LABEL_65;
        }
        if ((v19[v18] | 2) == 2)
        {
          v22 = fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>::Zero();
          v23 = *(_DWORD *)(v17 + 8);
          if (v23)
            v24 = *(_QWORD *)(v17 + 32) + 1;
          else
            v24 = 0;
          if (*(_DWORD *)v22)
            v25 = *(_QWORD *)(v22 + 24) + 1;
          else
            v25 = 0;
          if (v24 != v25)
            goto LABEL_44;
          v26 = 0;
          v27 = (uint64_t *)(v17 + 24);
          v28 = (uint64_t *)(v22 + 16);
          v29 = v23 && v23 == *(_DWORD *)v22;
          v30 = !v29;
          while (1)
          {
            v31 = *v27;
            v32 = *v28;
            if ((v26 & 1) == 0 && v30)
              break;
            if (v31 == v17 + 16)
              goto LABEL_43;
            if (*(_DWORD *)(v31 + 16) != *(_DWORD *)(v32 + 16))
              goto LABEL_44;
            v27 = (uint64_t *)(v31 + 8);
            v28 = (uint64_t *)(v32 + 8);
            v26 = 1;
          }
          if (v23)
            goto LABEL_44;
LABEL_43:
          v75 = 0.0;
          v75 = *(float *)(v17 + 40);
          v74 = 0.0;
          v74 = *(float *)(v22 + 32);
          if (v75 != v74)
          {
LABEL_44:
            v33 = fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>::One();
            v34 = *(_DWORD *)(v17 + 8);
            if (v34)
              v35 = *(_QWORD *)(v17 + 32) + 1;
            else
              v35 = 0;
            if (*(_DWORD *)v33)
              v36 = *(_QWORD *)(v33 + 24) + 1;
            else
              v36 = 0;
            if (v35 != v36)
              goto LABEL_64;
            v37 = 0;
            v38 = (uint64_t *)(v17 + 24);
            v39 = (uint64_t *)(v33 + 16);
            v40 = v34 && v34 == *(_DWORD *)v33;
            v41 = !v40;
            while (1)
            {
              v42 = *v38;
              v43 = *v39;
              if ((v37 & 1) == 0 && v41)
                break;
              if (v42 == v17 + 16)
                goto LABEL_63;
              if (*(_DWORD *)(v42 + 16) != *(_DWORD *)(v43 + 16))
                goto LABEL_64;
              v38 = (uint64_t *)(v42 + 8);
              v39 = (uint64_t *)(v43 + 8);
              v37 = 1;
            }
            if (v34)
              goto LABEL_64;
LABEL_63:
            v75 = 0.0;
            v75 = *(float *)(v17 + 40);
            v74 = 0.0;
            v74 = *(float *)(v33 + 32);
            if (v75 != v74)
            {
LABEL_64:
              v21 = 3;
              goto LABEL_65;
            }
          }
          v21 = 2;
LABEL_65:
          v19[v18] = v21;
        }
        *a5 = 0;
      }
      v44 = fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>::Zero();
      v46 = *(_DWORD *)(v17 + 8);
      if (v46)
        v47 = *(_QWORD *)(v17 + 32) + 1;
      else
        v47 = 0;
      if (*(_DWORD *)v44)
        v48 = *(_QWORD *)(v44 + 24) + 1;
      else
        v48 = 0;
      if (v47 != v48)
        goto LABEL_87;
      v49 = 0;
      v50 = (uint64_t *)(v17 + 24);
      v51 = (uint64_t *)(v44 + 16);
      v52 = v46 && v46 == *(_DWORD *)v44;
      v53 = !v52;
      while (1)
      {
        v54 = *v50;
        v55 = *v51;
        if ((v49 & 1) == 0 && v53)
          break;
        if (v54 == v17 + 16)
          goto LABEL_86;
        if (*(_DWORD *)(v54 + 16) != *(_DWORD *)(v55 + 16))
          goto LABEL_87;
        v50 = (uint64_t *)(v54 + 8);
        v51 = (uint64_t *)(v55 + 8);
        v49 = 1;
      }
      if (v46)
        goto LABEL_87;
LABEL_86:
      v75 = 0.0;
      v75 = *(float *)(v17 + 40);
      v74 = 0.0;
      v74 = *(float *)(v44 + 32);
      v45.n128_f32[0] = v75;
      if (v75 != v74)
      {
LABEL_87:
        v56 = fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>::One();
        v57 = *(_DWORD *)(v17 + 8);
        if (v57)
          v58 = *(_QWORD *)(v17 + 32) + 1;
        else
          v58 = 0;
        if (*(_DWORD *)v56)
          v59 = *(_QWORD *)(v56 + 24) + 1;
        else
          v59 = 0;
        if (v58 != v59)
          goto LABEL_107;
        v60 = 0;
        v61 = (uint64_t *)(v17 + 24);
        v62 = (uint64_t *)(v56 + 16);
        v63 = v57 && v57 == *(_DWORD *)v56;
        v64 = !v63;
        while (1)
        {
          v65 = *v61;
          v66 = *v62;
          if ((v60 & 1) == 0 && v64)
            break;
          if (v65 == v17 + 16)
            goto LABEL_106;
          if (*(_DWORD *)(v65 + 16) != *(_DWORD *)(v66 + 16))
            goto LABEL_107;
          v61 = (uint64_t *)(v65 + 8);
          v62 = (uint64_t *)(v66 + 8);
          v60 = 1;
        }
        if (v57)
          goto LABEL_107;
LABEL_106:
        v75 = 0.0;
        v75 = *(float *)(v17 + 40);
        v74 = 0.0;
        v74 = *(float *)(v56 + 32);
        v45.n128_f32[0] = v75;
        if (v75 != v74)
LABEL_107:
          *a6 = 0;
      }
      if (v68[0])
        (*(void (**)(_QWORD, __n128))(*(_QWORD *)v68[0] + 40))(v68[0], v45);
      else
        ++v70;
    }
    if (v68[0])
    {
      (*(void (**)(void))(*(_QWORD *)v68[0] + 8))();
      goto LABEL_116;
    }
LABEL_114:
    if (v69)
      --*v69;
LABEL_116:
    if (v71)
      (*(void (**)(uint64_t))(*(_QWORD *)v71 + 32))(v71);
    else
      ++v73;
  }
  if (v71)
    return (*(uint64_t (**)(void))(*(_QWORD *)v71 + 8))();
  return result;
}

void sub_1ADC1409C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  if (a15)
    (*(void (**)(uint64_t))(*(_QWORD *)a15 + 8))(a15);
  _Unwind_Resume(exception_object);
}

uint64_t fst::TopOrderQueue<int>::TopOrderQueue<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,fst::AnyArcFilter<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>(uint64_t a1, uint64_t a2)
{
  std::vector<int> *v3;
  fst *v4;
  _QWORD *v5;
  void *__p[2];
  char v8;
  char v9;
  _QWORD v10[3];
  char v11;

  *(_DWORD *)(a1 + 8) = 4;
  *(_BYTE *)(a1 + 12) = 0;
  *(_QWORD *)a1 = &unk_1E5D1CC68;
  *(_QWORD *)(a1 + 16) = 0xFFFFFFFF00000000;
  *(_OWORD *)(a1 + 24) = 0u;
  v3 = (std::vector<int> *)(a1 + 48);
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  v11 = 0;
  v10[0] = a1 + 24;
  v10[1] = &v11;
  fst::DfsVisit<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,fst::TopOrderVisitor<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>,fst::AnyArcFilter<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>(a2, (uint64_t)v10, 0);
  if (!v11)
  {
    if (FLAGS_fst_error_fatal)
      std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
    else
      std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
    v4 = fst::LogMessage::LogMessage((fst *)&v9, (uint64_t)__p);
    v5 = (_QWORD *)fst::cerr(v4);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"TopOrderQueue: fst is not acyclic.", 34);
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v9);
    if (v8 < 0)
      operator delete(__p[0]);
    *(_BYTE *)(a1 + 12) = 1;
  }
  std::vector<int>::resize(v3, (uint64_t)(*(_QWORD *)(a1 + 32) - *(_QWORD *)(a1 + 24)) >> 2, &fst::kNoStateId);
  return a1;
}

void sub_1ADC14234(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  uint64_t v18;
  void **v19;
  void **v20;
  void *v22;
  void *v23;

  fst::LogMessage::~LogMessage((fst::LogMessage *)&a18);
  if (a14 < 0)
    operator delete(__p);
  v22 = *v19;
  if (*v19)
  {
    *(_QWORD *)(v18 + 56) = v22;
    operator delete(v22);
  }
  v23 = *v20;
  if (*v20)
  {
    *(_QWORD *)(v18 + 32) = v23;
    operator delete(v23);
  }
  _Unwind_Resume(a1);
}

void fst::DfsVisit<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,fst::TopOrderVisitor<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>,fst::AnyArcFilter<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>(uint64_t a1, uint64_t a2, char a3)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  _QWORD *v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  std::vector<char>::pointer begin;
  unint64_t v20;
  uint64_t v21;
  _DWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  int v33;
  std::vector<char>::pointer end;
  char *v35;
  std::vector<char>::pointer v36;
  int64_t v37;
  int64_t v38;
  unint64_t v39;
  size_t v40;
  char *v41;
  char *v42;
  char *v43;
  char *v44;
  char v45;
  char v46;
  uint64_t v47;
  int v48;
  std::vector<char>::value_type v49[8];
  std::vector<char>::value_type __x[8];
  int v51;
  int v52;
  void *v53;
  _QWORD v54[6];
  _QWORD *v55;
  _OWORD v56[2];
  __int128 v57;
  std::vector<char> v58;

  v6 = (_QWORD *)operator new();
  v6[1] = 0;
  v6[2] = 0;
  *v6 = 0;
  *(_QWORD *)(a2 + 16) = v6;
  **(_BYTE **)(a2 + 8) = 1;
  v48 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  if (v48 == -1)
  {
    fst::TopOrderVisitor<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>::FinishVisit((char ***)a2);
    return;
  }
  memset(&v58, 0, sizeof(v58));
  v57 = 0u;
  memset(v56, 0, sizeof(v56));
  fst::MemoryPool<fst::DfsState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>::MemoryPool(&v53, 64);
  v47 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 64))(a1, 1, 0);
  if (v47)
    v7 = fst::CountStates<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>(a1);
  else
    v7 = (v48 + 1);
  __x[0] = 0;
  if ((std::vector<char>::pointer)(int)v7 <= (std::vector<char>::pointer)(v58.__end_ - v58.__begin_))
  {
    if ((std::vector<char>::pointer)(int)v7 < (std::vector<char>::pointer)(v58.__end_ - v58.__begin_))
      v58.__end_ = &v58.__begin_[(int)v7];
  }
  else
  {
    std::vector<char>::__append(&v58, (int)v7 - (unint64_t)(v58.__end_ - v58.__begin_), __x);
  }
  v52 = 0;
  (*(void (**)(uint64_t, std::vector<char>::value_type *))(*(_QWORD *)a1 + 128))(a1, __x);
  if (v48 >= (int)v7)
    goto LABEL_102;
  v8 = v48;
  v46 = a3;
  do
  {
    v58.__begin_[(int)v8] = 1;
    v9 = (uint64_t)v55;
    if (v55)
    {
      v55 = (_QWORD *)v55[6];
    }
    else
    {
      v9 = fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::Link>::Allocate(v54, 1);
      *(_QWORD *)(v9 + 48) = 0;
    }
    *(_DWORD *)v9 = v8;
    *(_QWORD *)(v9 + 40) = 0;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 136))(a1, v8, v9 + 8);
    *(_QWORD *)v49 = v9;
    std::deque<fst::DfsState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>> *,std::allocator<fst::DfsState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>> *>>::push_back(v56, v49);
    v10 = *((_QWORD *)&v57 + 1);
    if (!*((_QWORD *)&v57 + 1))
    {
      v11 = 1;
      if ((a3 & 1) != 0)
        break;
      goto LABEL_62;
    }
    v11 = 1;
    do
    {
      v12 = *(_QWORD **)(*(_QWORD *)(*((_QWORD *)&v56[0] + 1)
                                   + (((unint64_t)(v10 + v57 - 1) >> 6) & 0x3FFFFFFFFFFFFF8))
                       + 8 * ((v10 + v57 - 1) & 0x1FF));
      v13 = *(int *)v12;
      v14 = v58.__end_ - v58.__begin_;
      if (v58.__end_ - v58.__begin_ <= v13)
      {
        v7 = v13 + 1;
        v49[0] = 0;
        if (v13 + 1 <= v14)
        {
          if (v13 + 1 < v14)
            v58.__end_ = &v58.__begin_[v7];
        }
        else
        {
          std::vector<char>::__append(&v58, v13 + 1 - v14, v49);
        }
      }
      if ((v11 & 1) != 0)
      {
        v15 = v12[1];
        if (v15)
        {
          if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v15 + 24))(v15))
          {
            v16 = v12[1];
            if (v16)
              v17 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v16 + 32))(v16);
            else
LABEL_28:
              v17 = v12[2] + 56 * v12[5];
            v18 = *(int *)(v17 + 48);
            begin = v58.__begin_;
            v20 = v58.__end_ - v58.__begin_;
            if (v58.__end_ - v58.__begin_ <= v18)
            {
              v7 = (v18 + 1);
              v49[0] = 0;
              if ((int)v7 <= v20)
              {
                if ((int)v7 < v20)
                  v58.__end_ = &v58.__begin_[(int)v7];
              }
              else
              {
                std::vector<char>::__append(&v58, (int)v7 - v20, v49);
                v18 = *(int *)(v17 + 48);
                begin = v58.__begin_;
              }
            }
            v26 = begin[v18];
            if (v26 == 1)
            {
              **(_BYTE **)(a2 + 8) = 0;
              v28 = v12[1];
              if (v28)
              {
                (*(void (**)(uint64_t))(*(_QWORD *)v28 + 40))(v28);
                v11 = 0;
              }
              else
              {
                v11 = 0;
                ++v12[5];
              }
            }
            else
            {
              if (v26 == 2)
              {
                v27 = v12[1];
                if (v27)
                  (*(void (**)(uint64_t))(*(_QWORD *)v27 + 40))(v27);
                else
                  ++v12[5];
              }
              else
              {
                begin[v18] = 1;
                v29 = (uint64_t)v55;
                if (v55)
                {
                  v55 = (_QWORD *)v55[6];
                }
                else
                {
                  v29 = fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::Link>::Allocate(v54, 1);
                  *(_QWORD *)(v29 + 48) = 0;
                }
                *(_DWORD *)v29 = *(_DWORD *)(v17 + 48);
                *(_QWORD *)(v29 + 40) = 0;
                (*(void (**)(uint64_t))(*(_QWORD *)a1 + 136))(a1);
                *(_QWORD *)v49 = v29;
                std::deque<fst::DfsState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>> *,std::allocator<fst::DfsState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>> *>>::push_back(v56, v49);
              }
              v11 = 1;
            }
            goto LABEL_58;
          }
        }
        else if (v12[5] < v12[3])
        {
          goto LABEL_28;
        }
      }
      v58.__begin_[v13] = 2;
      v21 = v12[1];
      if (v21)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
      }
      else
      {
        v22 = (_DWORD *)v12[4];
        if (v22)
          --*v22;
      }
      v12[6] = v55;
      v55 = v12;
      --*((_QWORD *)&v57 + 1);
      std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::__maybe_remove_back_spare[abi:ne180100](v56, 1);
      if (*((_QWORD *)&v57 + 1))
      {
        v23 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)&v56[0] + 1)
                                    + (((unint64_t)(*((_QWORD *)&v57 + 1) + v57 - 1) >> 6) & 0x3FFFFFFFFFFFFF8))
                        + 8 * ((*((_QWORD *)&v57 + 1) + v57 - 1) & 0x1FF));
        v24 = *(_QWORD *)(v23 + 8);
        if (v24)
          (*(void (**)(uint64_t))(*(_QWORD *)v24 + 32))(v24);
        fst::TopOrderVisitor<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>::FinishState(a2, v13);
        v25 = *(_QWORD *)(v23 + 8);
        if (v25)
          (*(void (**)(uint64_t))(*(_QWORD *)v25 + 40))(v25);
        else
          ++*(_QWORD *)(v23 + 40);
      }
      else
      {
        fst::TopOrderVisitor<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>::FinishState(a2, v13);
      }
LABEL_58:
      v10 = *((_QWORD *)&v57 + 1);
    }
    while (*((_QWORD *)&v57 + 1));
    if ((a3 & 1) != 0)
      break;
LABEL_62:
    if ((_DWORD)v8 == v48)
      v8 = 0;
    else
      v8 = (v8 + 1);
    if ((int)v8 < (int)v7)
    {
      v30 = &v58.__begin_[(int)v8];
      v31 = (int)v7 - (uint64_t)(int)v8;
      while (*v30++)
      {
        v8 = (v8 + 1);
        if (!--v31)
        {
          v8 = v7;
          break;
        }
      }
    }
    if (v47 || (_DWORD)v8 != (_DWORD)v7)
      continue;
LABEL_72:
    if (*(_QWORD *)__x)
    {
      if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)__x + 16))(*(_QWORD *)__x) & 1) != 0)
        continue;
      if (*(_QWORD *)__x)
      {
        v33 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)__x + 24))(*(_QWORD *)__x);
        goto LABEL_78;
      }
    }
    else if (v52 >= v51)
    {
      continue;
    }
    v33 = v52;
LABEL_78:
    if (v33 != (_DWORD)v7)
    {
      if (*(_QWORD *)__x)
        (*(void (**)(_QWORD))(**(_QWORD **)__x + 32))(*(_QWORD *)__x);
      else
        ++v52;
      goto LABEL_72;
    }
    end = v58.__end_;
    if (v58.__end_ >= v58.__end_cap_.__value_)
    {
      v36 = v58.__begin_;
      v37 = v58.__end_ - v58.__begin_;
      v38 = v58.__end_ - v58.__begin_ + 1;
      if (v38 < 0)
        std::vector<int>::__throw_length_error[abi:ne180100]();
      v39 = v58.__end_cap_.__value_ - v58.__begin_;
      if (2 * (v58.__end_cap_.__value_ - v58.__begin_) > (unint64_t)v38)
        v38 = 2 * v39;
      if (v39 >= 0x3FFFFFFFFFFFFFFFLL)
        v40 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v40 = v38;
      if (v40)
        v41 = (char *)operator new(v40);
      else
        v41 = 0;
      v42 = &v41[v37];
      v43 = &v41[v37];
      *v43 = 0;
      v35 = v43 + 1;
      if (end != v36)
      {
        v44 = &end[~(unint64_t)v36];
        do
        {
          v45 = *--end;
          (v44--)[(_QWORD)v41] = v45;
        }
        while (end != v36);
        end = v58.__begin_;
        v42 = v41;
      }
      v58.__begin_ = v42;
      v58.__end_ = v35;
      v58.__end_cap_.__value_ = &v41[v40];
      if (end)
        operator delete(end);
    }
    else
    {
      *v58.__end_ = 0;
      v35 = end + 1;
    }
    v58.__end_ = v35;
    v7 = (v7 + 1);
    a3 = v46;
  }
  while ((v11 & 1) != 0 && (int)v8 < (int)v7);
LABEL_102:
  fst::TopOrderVisitor<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>::FinishVisit((char ***)a2);
  if (*(_QWORD *)__x)
    (*(void (**)(_QWORD))(**(_QWORD **)__x + 8))(*(_QWORD *)__x);
  v53 = &unk_1E5D19A30;
  fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>::Link>::~MemoryArena(v54);
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v53);
  std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100](v56);
  if (v58.__begin_)
  {
    v58.__end_ = v58.__begin_;
    operator delete(v58.__begin_);
  }
}

void sub_1ADC14984(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  void *v11;
  void *v12;
  va_list va;
  uint64_t v14;
  va_list va1;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  va_list va2;

  va_start(va2, a9);
  va_start(va1, a9);
  va_start(va, a9);
  va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v14 = va_arg(va2, _QWORD);
  v16 = va_arg(va2, _QWORD);
  v17 = va_arg(va2, _QWORD);
  v18 = va_arg(va2, _QWORD);
  v19 = va_arg(va2, _QWORD);
  v20 = va_arg(va2, _QWORD);
  v21 = va_arg(va2, _QWORD);
  v12 = &unk_1E5D19A30;
  fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>::Link>::~MemoryArena((uint64_t *)va1);
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)va);
  std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100]((uint64_t *)va2);
  v11 = *(void **)(v9 - 112);
  if (v11)
  {
    *(_QWORD *)(v9 - 104) = v11;
    operator delete(v11);
  }
  _Unwind_Resume(a1);
}

uint64_t fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>::Type()
{
  unsigned __int8 v0;
  _QWORD *v2;

  if ((v0 & 1) == 0
  {
    v2 = (_QWORD *)operator new();
    std::string::basic_string[abi:ne180100]<0>(v2, "left_gallic");
    fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>::Type(void)::type = (uint64_t)v2;
  }
  return fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>::Type(void)::type;
}

void sub_1ADC14AA0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x1012C40EC159624);
  _Unwind_Resume(a1);
}

BOOL fst::NaturalLess<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>>::operator()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  float v5;
  float v6;
  float v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  int v14;
  uint64_t v15;
  float v16;
  uint64_t v17;
  char v18;
  uint64_t *v19;
  BOOL v20;
  int v21;
  int v22;
  uint64_t v23;
  _BOOL8 v24;
  int v26;
  _QWORD v27[3];
  float v28;
  float v29;
  _QWORD v30[3];
  float v31;

  fst::Plus<int>(a2, a3, (uint64_t)&v29);
  v5 = *(float *)(a2 + 32);
  v6 = NAN;
  if (v5 != -INFINITY)
  {
    v7 = *(float *)(a3 + 32);
    v6 = NAN;
    if (v7 != -INFINITY)
    {
      if (v5 >= v7)
        v6 = *(float *)(a3 + 32);
      else
        v6 = *(float *)(a2 + 32);
    }
  }
  fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>::GallicWeight((uint64_t)&v26, (int *)&v29, v6);
  std::__list_imp<char *>::clear(v30);
  if (v26)
    v8 = v27[2] + 1;
  else
    v8 = 0;
  v9 = *(_DWORD *)a2;
  if (*(_DWORD *)a2)
    v10 = *(_QWORD *)(a2 + 24) + 1;
  else
    v10 = 0;
  if (v8 != v10)
    goto LABEL_41;
  v11 = v27[1];
  v12 = *(_QWORD *)(a2 + 16);
  if (v26)
    v13 = v26 == v9;
  else
    v13 = 0;
  v14 = !v13;
  v15 = *(_QWORD *)(a2 + 16);
  if (v14 != 1)
  {
    while ((_QWORD *)v11 != v27)
    {
      if (*(_DWORD *)(v11 + 16) != *(_DWORD *)(v15 + 16))
        goto LABEL_41;
      v11 = *(_QWORD *)(v11 + 8);
      v15 = *(_QWORD *)(v15 + 8);
    }
  }
  else if (v26)
  {
LABEL_41:
    v24 = 0;
    goto LABEL_42;
  }
  v29 = v28;
  v31 = 0.0;
  v16 = *(float *)(a2 + 32);
  v31 = v16;
  if (v28 != v16)
    goto LABEL_41;
  if (*(_DWORD *)a3)
    v17 = *(_QWORD *)(a3 + 24) + 1;
  else
    v17 = 0;
  if (v8 == v17)
  {
    v18 = 0;
    v19 = (uint64_t *)(a3 + 16);
    if (v9)
      v20 = v9 == *(_DWORD *)a3;
    else
      v20 = 0;
    v21 = !v20;
    v22 = v21 ^ 1;
    while (1)
    {
      v23 = *v19;
      if ((v18 & 1) == 0 && !v22)
        break;
      if (v12 == a2 + 8)
        goto LABEL_45;
      if (*(_DWORD *)(v12 + 16) != *(_DWORD *)(v23 + 16))
        goto LABEL_44;
      v12 = *(_QWORD *)(v12 + 8);
      v19 = (uint64_t *)(v23 + 8);
      v18 = 1;
    }
    if (v9)
      goto LABEL_44;
LABEL_45:
    v29 = v16;
    v31 = 0.0;
    v31 = *(float *)(a3 + 32);
    v24 = v16 != v31;
  }
  else
  {
LABEL_44:
    v24 = 1;
  }
LABEL_42:
  std::__list_imp<char *>::clear(v27);
  return v24;
}

void sub_1ADC14CD8(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__list_imp<char *>::clear((_QWORD *)(v1 + 8));
  _Unwind_Resume(a1);
}

void fst::ShortestDistanceState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,fst::AutoQueue<int>,fst::AnyArcFilter<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>::ShortestDistance(_QWORD *a1)
{
  fst *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  void *__p[2];
  char v10;
  char v11;

  if ((*(unsigned int (**)(_QWORD))(*(_QWORD *)*a1 + 24))(*a1) != -1)
  {
    if (FLAGS_fst_error_fatal)
      std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
    else
      std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
    v2 = fst::LogMessage::LogMessage((fst *)&v11, (uint64_t)__p);
    v3 = (_QWORD *)fst::cerr(v2);
    v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"ShortestDistance: Weight needs to be right distributive: ", 57);
    v5 = fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>::Type();
    v6 = *(char *)(v5 + 23);
    if (v6 >= 0)
      v7 = v5;
    else
      v7 = *(_QWORD *)v5;
    if (v6 >= 0)
      v8 = *(unsigned __int8 *)(v5 + 23);
    else
      v8 = *(_QWORD *)(v5 + 8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, v7, v8);
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v11);
    if (v10 < 0)
      operator delete(__p[0]);
    goto LABEL_15;
  }
  if ((*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(*(_QWORD *)*a1 + 64))(*a1, 4, 0))
LABEL_15:
    *((_BYTE *)a1 + 116) = 1;
}

void sub_1ADC14DFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  fst::LogMessage::~LogMessage((fst::LogMessage *)&a18);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

_QWORD *fst::Times<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  float v6;
  float v7;
  float v8;
  BOOL v9;
  float v10;
  int v12;
  _QWORD v13[3];

  fst::Times<int,(fst::StringType)0>((int *)a1, a2, (uint64_t)&v12);
  v6 = *(float *)(a1 + 32);
  v7 = NAN;
  if (v6 != -INFINITY)
  {
    v8 = *(float *)(a2 + 32);
    v7 = NAN;
    if (v8 != -INFINITY)
    {
      v7 = INFINITY;
      v9 = v8 == INFINITY || v6 == INFINITY;
      v10 = v6 + v8;
      if (!v9)
        v7 = v10;
    }
  }
  fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>::GallicWeight(a3, &v12, v7);
  return std::__list_imp<char *>::clear(v13);
}

void sub_1ADC14EE0(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__list_imp<char *>::clear((_QWORD *)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t std::vector<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>>,std::reverse_iterator<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>*>,std::reverse_iterator<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>*>,std::reverse_iterator<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>>,std::reverse_iterator<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>*>,std::reverse_iterator<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>*>,std::reverse_iterator<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v11;

  if (a3 != a5)
  {
    v11 = 0;
    do
    {
      *(_DWORD *)(a7 + v11 - 40) = *(_DWORD *)(a3 + v11 - 40);
      std::list<int>::list((_QWORD *)(a7 + v11 - 32), a3 + v11 - 32);
      *(_DWORD *)(a7 + v11 - 8) = *(_DWORD *)(a3 + v11 - 8);
      v11 -= 40;
    }
    while (a3 + v11 != a5);
  }
  return a6;
}

void sub_1ADC14FF4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  if (v2)
  {
    v4 = v1 + 8;
    do
    {
      std::__list_imp<char *>::clear((_QWORD *)(v4 + v2));
      v2 += 40;
    }
    while (v2);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *fst::VectorFst<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>,fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>>::VectorFst(_QWORD *a1)
{
  uint64_t v2;

  v2 = operator new();
  fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>>::VectorFstImpl(v2);
  *a1 = &unk_1E5D285B0;
  a1[1] = v2;
  return a1;
}

void sub_1ADC15068(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10B3C40637D23BDLL);
  _Unwind_Resume(a1);
}

void fst::VectorFst<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>,fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>>::~VectorFst(_QWORD *a1)
{
  _DWORD *v1;
  int v2;

  *a1 = &unk_1E5D25300;
  v1 = (_DWORD *)a1[1];
  if (v1)
  {
    v2 = v1[14] - 1;
    v1[14] = v2;
    if (!v2)
      (*(void (**)(_DWORD *))(*(_QWORD *)v1 + 8))(v1);
  }
  JUMPOUT(0x1AF44D190);
}

uint64_t fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>>,fst::MutableFst<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>::HasSequentialStates(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8));
}

uint64_t fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>>,fst::MutableFst<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>::Start(uint64_t a1)
{
  return *(unsigned int *)(*(_QWORD *)(a1 + 8) + 88);
}

_QWORD *fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>>,fst::MutableFst<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>::Final@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  _DWORD *v4;
  _QWORD *result;

  v4 = *(_DWORD **)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 64) + 8 * a2);
  *(_DWORD *)a3 = *v4;
  result = std::list<int>::list((_QWORD *)(a3 + 8), (uint64_t)(v4 + 2));
  *(_DWORD *)(a3 + 32) = v4[8];
  return result;
}

uint64_t fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>>,fst::MutableFst<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>::NumArcs(uint64_t a1, int a2)
{
  return 0x6DB6DB6DB6DB6DB7
       * ((uint64_t)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 64) + 8 * a2) + 64)
                  - *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 64) + 8 * a2) + 56)) >> 3);
}

uint64_t fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>>,fst::MutableFst<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>::NumInputEpsilons(uint64_t a1, int a2)
{
  return *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 64) + 8 * a2) + 40);
}

uint64_t fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>>,fst::MutableFst<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>::NumOutputEpsilons(uint64_t a1, int a2)
{
  return *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 64) + 8 * a2) + 48);
}

uint64_t fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>>,fst::MutableFst<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>::Properties(uint64_t a1, uint64_t a2, int a3)
{
  unint64_t v5;
  uint64_t v7;

  if (!a3)
    return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 8) + 32))(*(_QWORD *)(a1 + 8), a2);
  v7 = 0;
  v5 = fst::TestProperties<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>(a1, a2, &v7);
  *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) & (~v7 | 4) | v7 & v5;
  return v5 & a2;
}

uint64_t fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>>,fst::MutableFst<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>::Type(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8) + 16;
}

void fst::Fst<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>::GetArcs(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  fst::ArcBuffer<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>::SetFromFst<fst::Fst<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>(a3, a1, a2, a4, 2);
}

_QWORD *fst::VectorFst<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>,fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>>::Copy(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = (_QWORD *)operator new();
  v3 = *(_QWORD *)(a1 + 8);
  ++*(_DWORD *)(v3 + 56);
  *result = &unk_1E5D285B0;
  result[1] = v3;
  return result;
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>>,fst::MutableFst<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>::InputSymbols(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 8) + 40);
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>>,fst::MutableFst<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>::OutputSymbols(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 8) + 48);
}

uint64_t fst::VectorFst<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>,fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>>::InitStateIterator(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *(_QWORD *)a2 = 0;
  *(_DWORD *)(a2 + 8) = (*(_QWORD *)(v2 + 72) - *(_QWORD *)(v2 + 64)) >> 3;
  return result;
}

uint64_t fst::VectorFst<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>,fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>>::InitArcIterator(uint64_t result, int a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;

  v3 = *(_QWORD *)(result + 8);
  *a3 = 0;
  v5 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)(v3 + 64) + 8 * a2) + 56);
  v4 = *v5;
  v6 = 0x6DB6DB6DB6DB6DB7 * ((v5[1] - *v5) >> 3);
  if (v5[1] == *v5)
    v4 = 0;
  a3[1] = v4;
  a3[2] = v6;
  a3[3] = 0;
  return result;
}

uint64_t fst::Fst<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>::IsMemoryMapped()
{
  return 0;
}

uint64_t fst::ImplToExpandedFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>>,fst::MutableFst<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>::NumStates(uint64_t a1)
{
  return (*(_QWORD *)(*(_QWORD *)(a1 + 8) + 72) - *(_QWORD *)(*(_QWORD *)(a1 + 8) + 64)) >> 3;
}

uint64_t fst::VectorFst<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>,fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>>::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _DWORD *v5;
  int v6;

  if (a1 != a2)
  {
    v4 = operator new();
    fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>>::VectorFstImpl(v4, a2);
    v5 = *(_DWORD **)(a1 + 8);
    if (v5)
    {
      v6 = v5[14] - 1;
      v5[14] = v6;
      if (!v6)
        (*(void (**)(_DWORD *))(*(_QWORD *)v5 + 8))(v5);
    }
    *(_QWORD *)(a1 + 8) = v4;
  }
  return a1;
}

void sub_1ADC153C0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10B3C40637D23BDLL);
  _Unwind_Resume(a1);
}

unint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>>,fst::MutableFst<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>::SetStart(uint64_t a1, int a2)
{
  uint64_t v4;
  unint64_t result;

  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>>,fst::MutableFst<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>::MutateCheck(a1);
  v4 = *(_QWORD *)(a1 + 8);
  *(_DWORD *)(v4 + 88) = a2;
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
  *(_QWORD *)(v4 + 8) = result & 0xCCFFFFF0007 | (((result >> 35) & 1) << 37) | *(_QWORD *)(v4 + 8) & 4;
  return result;
}

_QWORD *fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>>,fst::MutableFst<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>::SetFinal(uint64_t a1, int a2, int *a3)
{
  _QWORD *v6;
  int v8;
  _QWORD v9[3];
  int v10;

  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>>,fst::MutableFst<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>::MutateCheck(a1);
  v6 = *(_QWORD **)(a1 + 8);
  v8 = *a3;
  std::list<int>::list(v9, (uint64_t)(a3 + 2));
  v10 = a3[8];
  fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>>::SetFinal(v6, a2, &v8);
  return std::__list_imp<char *>::clear(v9);
}

void sub_1ADC154C0(_Unwind_Exception *a1)
{
  _QWORD *v1;

  std::__list_imp<char *>::clear(v1);
  _Unwind_Resume(a1);
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>>,fst::MutableFst<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>::SetProperties(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t result;

  v6 = a3 & 4;
  result = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 8) + 32))(*(_QWORD *)(a1 + 8), v6);
  if (result != (v6 & a2))
    result = fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>>,fst::MutableFst<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>::MutateCheck(a1);
  *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) & (~a3 | 4) | a3 & a2;
  return result;
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>>,fst::MutableFst<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>::AddState(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;

  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>>,fst::MutableFst<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>::MutateCheck(a1);
  v2 = *(_QWORD **)(a1 + 8);
  v3 = fst::VectorFstBaseImpl<fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>>::AddState(v2);
  v2[1] = v2[1] & 4 | (*(uint64_t (**)(_QWORD *))(*v2 + 24))(v2) & 0x2AFFFFFF0007;
  return v3;
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>>,fst::MutableFst<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>::AddArc(uint64_t a1, int a2, int *a3)
{
  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>>,fst::MutableFst<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>::MutateCheck(a1);
  return fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>>::AddArc(*(_QWORD **)(a1 + 8), a2, a3);
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>>,fst::MutableFst<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>::DeleteStates(uint64_t a1, char **a2)
{
  _QWORD *v4;
  uint64_t result;

  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>>,fst::MutableFst<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>::MutateCheck(a1);
  v4 = *(_QWORD **)(a1 + 8);
  fst::VectorFstBaseImpl<fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>>::DeleteStates((uint64_t)v4, a2);
  result = (*(uint64_t (**)(_QWORD *))(*v4 + 24))(v4);
  v4[1] = v4[1] & 4 | result & 0x6A5A950007;
  return result;
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>>,fst::MutableFst<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>::DeleteStates(uint64_t a1)
{
  _QWORD *v2;
  uint64_t result;

  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>>,fst::MutableFst<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>::MutateCheck(a1);
  v2 = *(_QWORD **)(a1 + 8);
  fst::VectorFstBaseImpl<fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>::DeleteStates((uint64_t)v2);
  result = (*(uint64_t (**)(_QWORD *))(*v2 + 24))(v2);
  v2[1] = (*((_DWORD *)v2 + 2) | result) & 4 | 0x156A5A950003;
  return result;
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>>,fst::MutableFst<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>::DeleteArcs(uint64_t a1, int a2, uint64_t a3)
{
  _QWORD *v6;
  uint64_t result;

  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>>,fst::MutableFst<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>::MutateCheck(a1);
  v6 = *(_QWORD **)(a1 + 8);
  fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::DeleteArcs(*(_QWORD **)(v6[8] + 8 * a2), a3);
  result = (*(uint64_t (**)(_QWORD *))(*v6 + 24))(v6);
  v6[1] = v6[1] & 4 | result & 0xA6A5A950007;
  return result;
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>>,fst::MutableFst<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>::DeleteArcs(uint64_t a1, int a2)
{
  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>>,fst::MutableFst<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>::MutateCheck(a1);
  return fst::VectorFstImpl<fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>::DeleteArcs(*(_QWORD **)(a1 + 8), a2);
}

void fst::VectorFst<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>,fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>>::ReserveStates(uint64_t a1, int a2)
{
  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>>,fst::MutableFst<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>::MutateCheck(a1);
  std::vector<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> *,std::allocator<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> *>>::reserve((void **)(*(_QWORD *)(a1 + 8) + 64), a2);
}

uint64_t fst::VectorFst<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>,fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>>::ReserveArcs(uint64_t a1, int a2, unint64_t a3)
{
  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>>,fst::MutableFst<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>::MutateCheck(a1);
  return std::vector<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>::reserve((uint64_t *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 64) + 8 * a2) + 56), a3);
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>>,fst::MutableFst<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>::MutableInputSymbols(uint64_t a1)
{
  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>>,fst::MutableFst<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>::MutateCheck(a1);
  return *(_QWORD *)(*(_QWORD *)(a1 + 8) + 40);
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>>,fst::MutableFst<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>::MutableOutputSymbols(uint64_t a1)
{
  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>>,fst::MutableFst<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>::MutateCheck(a1);
  return *(_QWORD *)(*(_QWORD *)(a1 + 8) + 48);
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>>,fst::MutableFst<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>::SetInputSymbols(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;

  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>>,fst::MutableFst<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>::MutateCheck(a1);
  v4 = *(_QWORD *)(a1 + 8);
  result = *(_QWORD *)(v4 + 40);
  if (result != a2)
  {
    if (result)
      (*(void (**)(uint64_t))(*(_QWORD *)result + 8))(result);
    if (a2)
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
    else
      result = 0;
    *(_QWORD *)(v4 + 40) = result;
  }
  return result;
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>>,fst::MutableFst<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>::SetOutputSymbols(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;

  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>>,fst::MutableFst<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>::MutateCheck(a1);
  v4 = *(_QWORD *)(a1 + 8);
  result = *(_QWORD *)(v4 + 48);
  if (result != a2)
  {
    if (result)
      (*(void (**)(uint64_t))(*(_QWORD *)result + 8))(result);
    if (a2)
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
    else
      result = 0;
    *(_QWORD *)(v4 + 48) = result;
  }
  return result;
}

uint64_t fst::VectorFst<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>,fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>>::InitMutableArcIterator(uint64_t a1, int a2, _QWORD *a3)
{
  _QWORD *v6;
  uint64_t result;
  uint64_t v8;

  v6 = (_QWORD *)operator new();
  *v6 = &unk_1E5D21260;
  v6[3] = 0;
  result = fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>>,fst::MutableFst<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>::MutateCheck(a1);
  v8 = *(_QWORD *)(a1 + 8);
  v6[1] = *(_QWORD *)(*(_QWORD *)(v8 + 64) + 8 * a2);
  v6[2] = v8 + 8;
  *a3 = v6;
  return result;
}

void sub_1ADC15954(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10B1C402DF695F1);
  _Unwind_Resume(a1);
}

uint64_t fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>>::VectorFstImpl(uint64_t a1)
{
  std::string *v2;
  std::string __str;

  *(_QWORD *)a1 = &unk_1E5D22748;
  *(_QWORD *)(a1 + 8) = 0;
  v2 = (std::string *)(a1 + 16);
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 16), "null");
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 56) = 1;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_DWORD *)(a1 + 88) = -1;
  *(_QWORD *)a1 = &unk_1E5D1CE78;
  std::string::basic_string[abi:ne180100]<0>(&__str, "vector");
  std::string::operator=(v2, &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a1 + 8) & 4 | 0x156A5A950003;
  return a1;
}

void sub_1ADC15A38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  _QWORD *v15;

  if (a15 < 0)
    operator delete(__p);
  fst::VectorFstBaseImpl<fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>>::~VectorFstBaseImpl(v15);
  _Unwind_Resume(a1);
}

uint64_t fst::VectorFstBaseImpl<fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>>::~VectorFstBaseImpl(_QWORD *a1)
{
  _QWORD *v2;
  unint64_t v3;

  *a1 = &unk_1E5D1FC78;
  v2 = (_QWORD *)a1[9];
  if (v2 != (_QWORD *)a1[8])
  {
    v3 = 0;
    v2 = (_QWORD *)a1[8];
    do
    {
      fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::Destroy(v2[v3++]);
      v2 = (_QWORD *)a1[8];
    }
    while (v3 < (uint64_t)(a1[9] - (_QWORD)v2) >> 3);
  }
  if (v2)
  {
    a1[9] = v2;
    operator delete(v2);
  }
  return fst::FstImpl<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>::~FstImpl((uint64_t)a1);
}

void fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>>::~VectorFstImpl(_QWORD *a1)
{
  fst::VectorFstBaseImpl<fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>>::~VectorFstBaseImpl(a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t fst::FstImpl<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>::HasSequentialStates()
{
  return 1;
}

uint64_t fst::FstImpl<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>::Properties(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8);
}

uint64_t fst::FstImpl<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>::Properties(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a1 + 8) & a2;
}

void fst::VectorFstBaseImpl<fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>>::~VectorFstBaseImpl(_QWORD *a1)
{
  fst::VectorFstBaseImpl<fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>>::~VectorFstBaseImpl(a1);
  JUMPOUT(0x1AF44D190);
}

void fst::FstImpl<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>::~FstImpl(uint64_t a1)
{
  fst::FstImpl<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>::~FstImpl(a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t fst::FstImpl<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>::~FstImpl(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)a1 = &unk_1E5D22748;
  v2 = *(_QWORD *)(a1 + 40);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *(_QWORD *)(a1 + 48);
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  if (*(char *)(a1 + 39) < 0)
    operator delete(*(void **)(a1 + 16));
  return a1;
}

uint64_t fst::Fst<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>::Write(uint64_t a1)
{
  fst *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  void *__p[2];
  char v12;
  char v13;

  std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
  v2 = fst::LogMessage::LogMessage((fst *)&v13, (uint64_t)__p);
  v3 = (_QWORD *)fst::cerr(v2);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"Fst::Write: No write stream method for ", 39);
  v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 72))(a1);
  v6 = *(char *)(v5 + 23);
  if (v6 >= 0)
    v7 = v5;
  else
    v7 = *(_QWORD *)v5;
  if (v6 >= 0)
    v8 = *(unsigned __int8 *)(v5 + 23);
  else
    v8 = *(_QWORD *)(v5 + 8);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, v7, v8);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)" Fst type", 9);
  fst::LogMessage::~LogMessage((fst::LogMessage *)&v13);
  if (v12 < 0)
    operator delete(__p[0]);
  return 0;
}

{
  fst *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  void *__p[2];
  char v12;
  char v13;

  std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
  v2 = fst::LogMessage::LogMessage((fst *)&v13, (uint64_t)__p);
  v3 = (_QWORD *)fst::cerr(v2);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"Fst::Write: No write filename method for ", 41);
  v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 72))(a1);
  v6 = *(char *)(v5 + 23);
  if (v6 >= 0)
    v7 = v5;
  else
    v7 = *(_QWORD *)v5;
  if (v6 >= 0)
    v8 = *(unsigned __int8 *)(v5 + 23);
  else
    v8 = *(_QWORD *)(v5 + 8);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, v7, v8);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)" Fst type", 9);
  fst::LogMessage::~LogMessage((fst::LogMessage *)&v13);
  if (v12 < 0)
    operator delete(__p[0]);
  return 0;
}

void sub_1ADC15C94(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1ADC15D74(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>>,fst::MutableFst<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>::InputSymbols(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 8) + 40);
}

uint64_t fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>>,fst::MutableFst<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>::OutputSymbols(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 8) + 48);
}

uint64_t fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>>,fst::MutableFst<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>::operator=(uint64_t a1)
{
  fst *v2;
  _QWORD *v3;
  void *__p[2];
  char v6;
  char v7;

  if (FLAGS_fst_error_fatal)
    std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
  else
    std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
  v2 = fst::LogMessage::LogMessage((fst *)&v7, (uint64_t)__p);
  v3 = (_QWORD *)fst::cerr(v2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"ImplToFst: Assignment operator disallowed", 41);
  fst::LogMessage::~LogMessage((fst::LogMessage *)&v7);
  if (v6 < 0)
    operator delete(__p[0]);
  *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) |= 4uLL;
  return a1;
}

void sub_1ADC15E74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  uint64_t v14;

  fst::LogMessage::~LogMessage((fst::LogMessage *)(v14 - 17));
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>>,fst::MutableFst<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>::MutateCheck(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  int v3;

  if (*(int *)(*(_QWORD *)(result + 8) + 56) >= 2)
  {
    v1 = result;
    v2 = operator new();
    fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>>::VectorFstImpl(v2, v1);
    result = *(_QWORD *)(v1 + 8);
    if (result)
    {
      v3 = *(_DWORD *)(result + 56) - 1;
      *(_DWORD *)(result + 56) = v3;
      if (!v3)
        result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
    }
    *(_QWORD *)(v1 + 8) = v2;
  }
  return result;
}

void sub_1ADC15F24(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10B3C40637D23BDLL);
  _Unwind_Resume(a1);
}

uint64_t fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>>::VectorFstImpl(uint64_t a1, uint64_t a2)
{
  std::string *v4;
  uint64_t *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  unint64_t v15;
  _DWORD *v16;
  std::string __str;
  _DWORD *v19;
  std::string::size_type v20;
  uint64_t v21;
  uint64_t v22[4];
  uint64_t v23;
  int v24;
  unsigned int v25;

  *(_QWORD *)a1 = &unk_1E5D22748;
  *(_QWORD *)(a1 + 8) = 0;
  v4 = (std::string *)(a1 + 16);
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 16), "null");
  *(_QWORD *)(a1 + 40) = 0;
  v5 = (uint64_t *)(a1 + 40);
  *(_QWORD *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 56) = 1;
  *(_QWORD *)(a1 + 64) = 0;
  v6 = (_QWORD *)(a1 + 64);
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_DWORD *)(a1 + 88) = -1;
  *(_QWORD *)a1 = &unk_1E5D1CE78;
  std::string::basic_string[abi:ne180100]<0>(&__str, "vector");
  std::string::operator=(v4, &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 112))(a2);
  v8 = *v5;
  if (*v5 != v7)
  {
    if (v8)
      (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
    if (v7)
      v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 16))(v7);
    else
      v9 = 0;
    *v5 = v9;
  }
  v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 120))(a2);
  v11 = *(_QWORD *)(a1 + 48);
  if (v11 != v10)
  {
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
    if (v10)
      v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 16))(v10);
    else
      v12 = 0;
    *(_QWORD *)(a1 + 48) = v12;
  }
  *(_DWORD *)(a1 + 88) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2);
  if ((*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, 1, 0))
  {
    v13 = fst::CountStates<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>(a2);
    std::vector<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> *,std::allocator<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> *>>::reserve((void **)(a1 + 64), v13);
  }
  v25 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a2 + 128))(a2, &v23);
  while (1)
  {
    if (!v23)
    {
      if ((int)v25 >= v24)
        goto LABEL_45;
LABEL_25:
      v14 = v25;
      goto LABEL_26;
    }
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v23 + 16))(v23))
      break;
    if (!v23)
      goto LABEL_25;
    v14 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v23 + 24))(v23);
LABEL_26:
    fst::VectorFstBaseImpl<fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>>::AddState((_QWORD *)a1);
    (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(&v21, a2, v14);
    fst::VectorFstBaseImpl<fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>>::SetFinal(a1, v14, (int *)&v21);
    std::__list_imp<char *>::clear(v22);
    v15 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 40))(a2, v14);
    std::vector<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>::reserve((uint64_t *)(*(_QWORD *)(*v6 + 8 * (int)v14) + 56), v15);
    v20 = 0;
    (*(void (**)(uint64_t, uint64_t, std::string *))(*(_QWORD *)a2 + 136))(a2, v14, &__str);
    while (1)
    {
      if (!__str.__r_.__value_.__r.__words[0])
      {
        if (v20 >= __str.__r_.__value_.__r.__words[2])
          goto LABEL_38;
LABEL_32:
        v16 = (_DWORD *)(__str.__r_.__value_.__l.__size_ + 56 * v20);
        goto LABEL_33;
      }
      if ((*(unsigned int (**)(std::string::size_type))(*(_QWORD *)__str.__r_.__value_.__l.__data_ + 24))(__str.__r_.__value_.__r.__words[0]))
        break;
      if (!__str.__r_.__value_.__r.__words[0])
        goto LABEL_32;
      v16 = (_DWORD *)(*(uint64_t (**)(void))(*(_QWORD *)__str.__r_.__value_.__l.__data_ + 32))();
LABEL_33:
      fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>::AddArc(*(_QWORD **)(*v6 + 8 * (int)v14), v16);
      if (__str.__r_.__value_.__r.__words[0])
        (*(void (**)(std::string::size_type))(*(_QWORD *)__str.__r_.__value_.__l.__data_ + 40))(__str.__r_.__value_.__r.__words[0]);
      else
        ++v20;
    }
    if (__str.__r_.__value_.__r.__words[0])
    {
      (*(void (**)(void))(*(_QWORD *)__str.__r_.__value_.__l.__data_ + 8))();
      goto LABEL_40;
    }
LABEL_38:
    if (v19)
      --*v19;
LABEL_40:
    if (v23)
      (*(void (**)(uint64_t))(*(_QWORD *)v23 + 32))(v23);
    else
      ++v25;
  }
  if (v23)
    (*(void (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
LABEL_45:
  *(_QWORD *)(a1 + 8) = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, 0x3FFFFFFF0004, 0) | *(_QWORD *)(a1 + 8) & 4 | 3;
  return a1;
}

void sub_1ADC162F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16)
{
  _QWORD *v16;

  fst::VectorFstBaseImpl<fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>>::~VectorFstBaseImpl(v16);
  _Unwind_Resume(a1);
}

uint64_t fst::VectorFstBaseImpl<fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>>::AddState(_QWORD *a1)
{
  char *v2;
  _DWORD *v3;
  unint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  uint64_t v17;

  v2 = (char *)operator new(0x50uLL);
  v3 = (_DWORD *)fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)1>::Zero();
  *(_DWORD *)v2 = *v3;
  std::list<int>::list((_QWORD *)v2 + 1, (uint64_t)(v3 + 2));
  v4 = a1[10];
  *((_DWORD *)v2 + 8) = v3[8];
  *(_OWORD *)(v2 + 40) = 0u;
  *(_OWORD *)(v2 + 56) = 0u;
  *((_QWORD *)v2 + 9) = 0;
  v5 = (_QWORD *)a1[9];
  if ((unint64_t)v5 >= v4)
  {
    v7 = a1[8];
    v8 = ((uint64_t)v5 - v7) >> 3;
    if ((unint64_t)(v8 + 1) >> 61)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v9 = v4 - v7;
    v10 = v9 >> 2;
    if (v9 >> 2 <= (unint64_t)(v8 + 1))
      v10 = v8 + 1;
    if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF8)
      v11 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v11 = v10;
    if (v11)
      v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(a1 + 10), v11);
    else
      v12 = 0;
    v13 = &v12[8 * v8];
    v14 = &v12[8 * v11];
    *(_QWORD *)v13 = v2;
    v6 = v13 + 8;
    v16 = (char *)a1[8];
    v15 = (char *)a1[9];
    if (v15 != v16)
    {
      do
      {
        v17 = *((_QWORD *)v15 - 1);
        v15 -= 8;
        *((_QWORD *)v13 - 1) = v17;
        v13 -= 8;
      }
      while (v15 != v16);
      v15 = (char *)a1[8];
    }
    a1[8] = v13;
    a1[9] = v6;
    a1[10] = v14;
    if (v15)
      operator delete(v15);
  }
  else
  {
    *v5 = v2;
    v6 = v5 + 1;
  }
  a1[9] = v6;
  return (((unint64_t)v6 - a1[8]) >> 3) - 1;
}

_QWORD *fst::VectorFstBaseImpl<fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>>::SetFinal(uint64_t a1, int a2, int *a3)
{
  uint64_t v4;
  int v5;
  int v7;
  _QWORD v8[3];
  int v9;

  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 64) + 8 * a2);
  v7 = *a3;
  std::list<int>::list(v8, (uint64_t)(a3 + 2));
  v5 = a3[8];
  v9 = v5;
  *(_DWORD *)v4 = v7;
  if ((int *)v4 != &v7)
  {
    std::list<int>::__assign_with_sentinel[abi:ne180100]<std::__list_const_iterator<int,void *>,std::__list_const_iterator<int,void *>>((uint64_t *)(v4 + 8), v8[1], (uint64_t)v8);
    v5 = v9;
  }
  *(_DWORD *)(v4 + 32) = v5;
  return std::__list_imp<char *>::clear(v8);
}

void sub_1ADC16548(_Unwind_Exception *a1)
{
  _QWORD *v1;

  std::__list_imp<char *>::clear(v1);
  _Unwind_Resume(a1);
}

uint64_t fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)1>::Zero()
{
  unsigned __int8 v0;
  uint64_t v2;
  _DWORD *v3;

  if ((v0 & 1) == 0
  {
    v2 = operator new();
    v3 = (_DWORD *)fst::ProductWeight<fst::StringWeight<int,(fst::StringType)1>,fst::TropicalWeightTpl<float>>::Zero();
    *(_DWORD *)v2 = *v3;
    std::list<int>::list((_QWORD *)(v2 + 8), (uint64_t)(v3 + 2));
    *(_DWORD *)(v2 + 32) = v3[8];
    fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)1>::Zero(void)::zero = v2;
  }
  return fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)1>::Zero(void)::zero;
}

void sub_1ADC165F4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t fst::ProductWeight<fst::StringWeight<int,(fst::StringType)1>,fst::TropicalWeightTpl<float>>::Zero()
{
  unsigned __int8 v0;
  uint64_t v2;
  _DWORD *v3;

  if ((v0 & 1) == 0
  {
    v2 = operator new();
    v3 = (_DWORD *)fst::PairWeight<fst::StringWeight<int,(fst::StringType)1>,fst::TropicalWeightTpl<float>>::Zero();
    *(_DWORD *)v2 = *v3;
    std::list<int>::list((_QWORD *)(v2 + 8), (uint64_t)(v3 + 2));
    *(_DWORD *)(v2 + 32) = v3[8];
    fst::ProductWeight<fst::StringWeight<int,(fst::StringType)1>,fst::TropicalWeightTpl<float>>::Zero(void)::zero = v2;
  }
  return fst::ProductWeight<fst::StringWeight<int,(fst::StringType)1>,fst::TropicalWeightTpl<float>>::Zero(void)::zero;
}

void sub_1ADC166C4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t fst::PairWeight<fst::StringWeight<int,(fst::StringType)1>,fst::TropicalWeightTpl<float>>::Zero()
{
  unsigned __int8 v0;
  uint64_t v2;
  int *v3;
  int v4;
  _QWORD v5[3];

  if ((v0 & 1) == 0
  {
    v2 = operator new();
    v3 = (int *)fst::StringWeight<int,(fst::StringType)1>::Zero();
    v4 = *v3;
    std::list<int>::list(v5, (uint64_t)(v3 + 2));
    *(_DWORD *)v2 = v4;
    std::list<int>::list((_QWORD *)(v2 + 8), (uint64_t)v5);
    *(_DWORD *)(v2 + 32) = 2139095040;
    std::__list_imp<char *>::clear(v5);
    fst::PairWeight<fst::StringWeight<int,(fst::StringType)1>,fst::TropicalWeightTpl<float>>::Zero(void)::zero = v2;
  }
  return fst::PairWeight<fst::StringWeight<int,(fst::StringType)1>,fst::TropicalWeightTpl<float>>::Zero(void)::zero;
}

void sub_1ADC167C0(_Unwind_Exception *a1)
{
  uint64_t v1;
  _QWORD *v2;

  std::__list_imp<char *>::clear(v2);
  MEMORY[0x1AF44D190](v1, 0x1020C4067685F46);
  _Unwind_Resume(a1);
}

uint64_t std::vector<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>::reserve(uint64_t *a1, unint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[5];

  v4 = a1[2];
  result = (uint64_t)(a1 + 2);
  if (0x6DB6DB6DB6DB6DB7 * ((v4 - *a1) >> 3) < a2)
  {
    if (a2 >= 0x492492492492493)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v5 = a1[1] - *a1;
    v7[4] = result;
    v7[0] = std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::VoiceCommandArgument>>(result, a2);
    v7[1] = v7[0] + v5;
    v7[2] = v7[0] + v5;
    v7[3] = v7[0] + 56 * v6;
    std::vector<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>::__swap_out_circular_buffer(a1, v7);
    return std::__split_buffer<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>::~__split_buffer((uint64_t)v7);
  }
  return result;
}

void sub_1ADC168B0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>,std::reverse_iterator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>*>,std::reverse_iterator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>*>,std::reverse_iterator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>,std::reverse_iterator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>*>,std::reverse_iterator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>*>,std::reverse_iterator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v11;
  uint64_t v12;

  if (a3 != a5)
  {
    v11 = 0;
    do
    {
      v12 = a7 + v11;
      *(_QWORD *)(v12 - 56) = *(_QWORD *)(a3 + v11 - 56);
      *(_DWORD *)(v12 - 48) = *(_DWORD *)(a3 + v11 - 48);
      std::list<int>::list((_QWORD *)(a7 + v11 - 40), a3 + v11 - 40);
      *(_DWORD *)(v12 - 16) = *(_DWORD *)(a3 + v11 - 16);
      *(_DWORD *)(v12 - 8) = *(_DWORD *)(a3 + v11 - 8);
      v11 -= 56;
    }
    while (a3 + v11 != a5);
  }
  return a6;
}

void sub_1ADC169D4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  if (v2)
  {
    v4 = v1 + 16;
    do
    {
      std::__list_imp<char *>::clear((_QWORD *)(v4 + v2));
      v2 += 56;
    }
    while (v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>::AddArc(_QWORD *a1, _DWORD *a2)
{
  uint64_t *v3;
  unint64_t v4;
  uint64_t result;

  if (!*a2)
    ++a1[5];
  if (!a2[1])
    ++a1[6];
  v3 = a1 + 7;
  v4 = a1[8];
  if (v4 >= a1[9])
  {
    result = std::vector<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>::__push_back_slow_path<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>> const&>(v3, (uint64_t)a2);
  }
  else
  {
    std::vector<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>::__construct_one_at_end[abi:ne180100]<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>> const&>((uint64_t)v3, (uint64_t)a2);
    result = v4 + 56;
  }
  a1[8] = result;
  return result;
}

_QWORD *std::vector<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>::__construct_one_at_end[abi:ne180100]<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>> const&>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD *result;

  v4 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)v4 = *(_QWORD *)a2;
  *(_DWORD *)(v4 + 8) = *(_DWORD *)(a2 + 8);
  result = std::list<int>::list((_QWORD *)(v4 + 16), a2 + 16);
  *(_DWORD *)(v4 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(v4 + 48) = *(_DWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 8) = v4 + 56;
  return result;
}

void sub_1ADC16AC0(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>::__push_back_slow_path<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>> const&>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;
  _QWORD v15[2];
  char *v16;
  char *v17;
  uint64_t *v18;

  v3 = *a1;
  v4 = 0x6DB6DB6DB6DB6DB7 * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) > 0x492492492492492)
    std::vector<int>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0x6DB6DB6DB6DB6DB7 * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x249249249249249)
    v9 = 0x492492492492492;
  else
    v9 = v5;
  v18 = a1 + 2;
  if (v9)
    v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::VoiceCommandArgument>>(v7, v9);
  else
    v10 = 0;
  v11 = &v10[56 * v4];
  v15[0] = v10;
  v15[1] = v11;
  v16 = v11;
  v17 = &v10[56 * v9];
  *(_QWORD *)v11 = *(_QWORD *)a2;
  *((_DWORD *)v11 + 2) = *(_DWORD *)(a2 + 8);
  std::list<int>::list((_QWORD *)v11 + 2, a2 + 16);
  v12 = &v10[56 * v4];
  *((_DWORD *)v12 + 10) = *(_DWORD *)(a2 + 40);
  *((_DWORD *)v12 + 12) = *(_DWORD *)(a2 + 48);
  v16 += 56;
  std::vector<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>::__swap_out_circular_buffer(a1, v15);
  v13 = a1[1];
  std::__split_buffer<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>::~__split_buffer((uint64_t)v15);
  return v13;
}

void sub_1ADC16BFC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

unint64_t fst::TestProperties<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  unint64_t v6;
  unint64_t v7;
  fst *v8;
  _QWORD *v9;
  _QWORD *v10;
  void *__p[2];
  char v13;
  char v14;

  if (!FLAGS_fst_verify_properties)
    return fst::ComputeProperties<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>(a1, a2, a3, 1);
  v6 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 64))(a1, 0x3FFFFFFF0007, 0);
  v7 = fst::ComputeProperties<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>(a1, a2, a3, 0);
  if (!fst::CompatProperties(v6, v7))
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
    v8 = fst::LogMessage::LogMessage((fst *)&v14, (uint64_t)__p);
    v9 = (_QWORD *)fst::cerr(v8);
    v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"TestProperties: stored Fst properties incorrect", 47);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)" (stored: props1, computed: props2)", 35);
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v14);
    if (v13 < 0)
      operator delete(__p[0]);
  }
  return v7;
}

void sub_1ADC16D1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

unint64_t fst::ComputeProperties<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>(uint64_t a1, uint64_t a2, uint64_t *a3, int a4)
{
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  std::vector<unsigned int>::size_type v18;
  char v19;
  uint64_t v20;
  int v21;
  int v22;
  unint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t *v29;
  uint64_t *v30;
  BOOL v31;
  _BOOL4 v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  uint64_t *v39;
  uint64_t *v40;
  BOOL v41;
  _BOOL4 v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  std::vector<unsigned int>::pointer end;
  unsigned int *v47;
  std::vector<unsigned int>::pointer begin;
  int64_t v49;
  unint64_t v50;
  int64_t v51;
  unint64_t v52;
  char *v53;
  unsigned int *v54;
  unsigned int v55;
  std::vector<unsigned int>::pointer v56;
  unsigned int *v57;
  std::vector<unsigned int>::pointer v58;
  int64_t v59;
  unint64_t v60;
  int64_t v61;
  unint64_t v62;
  char *v63;
  unsigned int *v64;
  unsigned int v65;
  unint64_t v66;
  std::vector<unsigned int>::pointer v67;
  unsigned int v68;
  unint64_t v69;
  unsigned int v70;
  unsigned int v71;
  unint64_t v72;
  std::vector<unsigned int>::pointer v73;
  unsigned int v74;
  unint64_t v75;
  unsigned int v76;
  unsigned int v77;
  uint64_t v78;
  char *v79;
  uint64_t v80;
  char v81;
  unint64_t v82;
  uint64_t *v83;
  BOOL v84;
  _BOOL4 v85;
  uint64_t v86;
  uint64_t v87;
  char *v88;
  uint64_t v89;
  char v90;
  unint64_t v91;
  uint64_t *v92;
  BOOL v93;
  _BOOL4 v94;
  uint64_t v95;
  uint64_t v98;
  uint64_t v99;
  unint64_t v100;
  _DWORD *v101;
  unint64_t v102;
  uint64_t v103;
  int v104;
  unsigned int v105;
  std::vector<unsigned int> v106;
  std::vector<unsigned int> v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t *v111;
  uint64_t v112;
  int v113;
  int v114;
  unint64_t v115;
  float v116;
  float v117;

  v7 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 64))(a1, 0x3FFFFFFF0007, 0);
  v8 = v7;
  if (!a4
    || (v9 = v7 & 0x3FFFFFFF0000 | (2 * v7) & 0x2AAAAAAA0000 | (v7 >> 1) & 0x155555550000 | 7, (a2 & ~v9) != 0))
  {
    v8 = v7 & 7;
    v115 = v8;
    v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
    if ((a2 & 0xF3C00000000) != 0 && v10)
    {
      v108 = 0;
      v109 = 0;
      v110 = 0;
      v111 = (uint64_t *)&v115;
      fst::DfsVisit<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>,fst::SccVisitor<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>,fst::AnyArcFilter<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>(a1, &v108, 0);
      v8 = v115;
    }
    if ((a2 & 0xFFFFF0C3FFFFFFF8) == 0)
      goto LABEL_211;
    v11 = a2 & 0xC0000;
    v12 = 0x10425A810000;
    if ((a2 & 0xC0000) != 0)
      v12 = 0x10425A850000;
    v13 = v8 | v12;
    v14 = a2 & 0x300000;
    if ((a2 & 0x300000) != 0)
      v13 |= 0x100000uLL;
    v115 = v13;
    memset(&v107, 0, sizeof(v107));
    memset(&v106, 0, sizeof(v106));
    v105 = 0;
    v15 = a1;
    (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 128))(a1, &v103);
    v16 = 0;
LABEL_12:
    if (!v103)
    {
      if ((int)v105 >= v104)
        goto LABEL_203;
      goto LABEL_17;
    }
    if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v103 + 16))(v103))
    {
      if (v103)
      {
        v17 = (*(uint64_t (**)(void))(*(_QWORD *)v103 + 24))();
LABEL_18:
        v18 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v15 + 40))(v15, v17);
        v110 = (uint64_t)&v110;
        v111 = &v110;
        v112 = 0;
        LODWORD(v109) = 0;
        v107.__end_ = v107.__begin_;
        v106.__end_ = v106.__begin_;
        if (v11)
          std::vector<int>::reserve(&v107, v18);
        if (v14)
          std::vector<int>::reserve(&v106, v18);
        v102 = 0;
        (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(_QWORD *)v15 + 136))(v15, v17, &v98);
        v19 = 1;
        while (1)
        {
          if (v98)
          {
            if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v98 + 24))(v98))
            {
              if (v98)
              {
                (*(void (**)(void))(*(_QWORD *)v98 + 8))();
              }
              else
              {
LABEL_132:
                if (v101)
                  --*v101;
              }
              v15 = a1;
              if (!v11
                || (std::__sort<std::__less<int,int> &,int *>(),
                    (std::vector<unsigned int>::pointer)((char *)v107.__end_ - (char *)v107.__begin_) < (std::vector<unsigned int>::pointer)5))
              {
LABEL_141:
                if (!v14)
                  goto LABEL_152;
LABEL_142:
                std::__sort<std::__less<int,int> &,int *>();
                if ((std::vector<unsigned int>::pointer)((char *)v106.__end_ - (char *)v106.__begin_) >= (std::vector<unsigned int>::pointer)5)
                {
                  v72 = v106.__end_ - v106.__begin_;
                  if (v72 <= 2)
                    v72 = 2;
                  v73 = v106.__begin_ + 1;
                  v74 = *v106.__begin_;
                  v75 = v72 - 1;
                  while (1)
                  {
                    v77 = *v73++;
                    v76 = v77;
                    if (v77 == v74)
                      break;
                    v74 = v76;
                    if (!--v75)
                      goto LABEL_152;
                  }
                  v115 = v115 & 0xFFFFFFFFFFCFFFFFLL | 0x200000;
                }
                goto LABEL_152;
              }
              v66 = v107.__end_ - v107.__begin_;
              if (v66 <= 2)
                v66 = 2;
              v67 = v107.__begin_ + 1;
              v68 = *v107.__begin_;
              v69 = v66 - 1;
              while (1)
              {
                v71 = *v67++;
                v70 = v71;
                if (v71 == v68)
                  break;
                v68 = v70;
                if (!--v69)
                  goto LABEL_141;
              }
              v115 = v115 & 0xFFFFFFFFFFF3FFFFLL | 0x80000;
              if (v14)
                goto LABEL_142;
LABEL_152:
              if (v16 >= 1)
                v115 = v115 & 0xFFFFCFFFFFFFFFFFLL | 0x200000000000;
              (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)a1 + 32))(&v98, a1, v17);
              v78 = fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)1>::Zero();
              if ((_DWORD)v98)
                v79 = (char *)v101 + 1;
              else
                v79 = 0;
              if (*(_DWORD *)v78)
                v80 = *(_QWORD *)(v78 + 24) + 1;
              else
                v80 = 0;
              if (v79 != (char *)v80)
                goto LABEL_174;
              v81 = 0;
              v82 = v100;
              v83 = (uint64_t *)(v78 + 16);
              v84 = (_DWORD)v98 && (_DWORD)v98 == *(_DWORD *)v78;
              v85 = !v84;
              while (1)
              {
                v86 = *v83;
                if ((v81 & 1) == 0 && v85)
                  break;
                if ((uint64_t *)v82 == &v99)
                  goto LABEL_173;
                if (*(_DWORD *)(v82 + 16) != *(_DWORD *)(v86 + 16))
                  goto LABEL_174;
                v82 = *(_QWORD *)(v82 + 8);
                v83 = (uint64_t *)(v86 + 8);
                v81 = 1;
              }
              if ((_DWORD)v98)
                goto LABEL_174;
LABEL_173:
              v117 = *(float *)&v102;
              v116 = 0.0;
              v116 = *(float *)(v78 + 32);
              if (*(float *)&v102 == v116)
              {
                if ((*(uint64_t (**)(uint64_t, uint64_t, float))(*(_QWORD *)a1 + 40))(a1, v17, *(float *)&v102) != 1)v115 = v115 & 0xFFFFCFFFFFFFFFFFLL | 0x200000000000;
              }
              else
              {
LABEL_174:
                v87 = fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)1>::One();
                if ((_DWORD)v98)
                  v88 = (char *)v101 + 1;
                else
                  v88 = 0;
                if (*(_DWORD *)v87)
                  v89 = *(_QWORD *)(v87 + 24) + 1;
                else
                  v89 = 0;
                if (v88 != (char *)v89)
                  goto LABEL_194;
                v90 = 0;
                v91 = v100;
                v92 = (uint64_t *)(v87 + 16);
                v93 = (_DWORD)v98 && (_DWORD)v98 == *(_DWORD *)v87;
                v94 = !v93;
                while (1)
                {
                  v95 = *v92;
                  if ((v90 & 1) == 0 && v94)
                    break;
                  if ((uint64_t *)v91 == &v99)
                    goto LABEL_193;
                  if (*(_DWORD *)(v91 + 16) != *(_DWORD *)(v95 + 16))
                    goto LABEL_194;
                  v91 = *(_QWORD *)(v91 + 8);
                  v92 = (uint64_t *)(v95 + 8);
                  v90 = 1;
                }
                if ((_DWORD)v98)
                  goto LABEL_194;
LABEL_193:
                v117 = *(float *)&v102;
                v116 = 0.0;
                v116 = *(float *)(v87 + 32);
                if (*(float *)&v102 != v116)
LABEL_194:
                  v115 = v115 & 0xFFFFFFFCFFFFFFFFLL | 0x100000000;
                ++v16;
              }
              std::__list_imp<char *>::clear(&v99);
              std::__list_imp<char *>::clear(&v110);
              if (v103)
                (*(void (**)(uint64_t))(*(_QWORD *)v103 + 32))(v103);
              else
                ++v105;
              goto LABEL_12;
            }
            if (v98)
            {
              v20 = (*(uint64_t (**)(void))(*(_QWORD *)v98 + 32))();
              goto LABEL_29;
            }
          }
          else if (v102 >= v100)
          {
            goto LABEL_132;
          }
          v20 = v99 + 56 * v102;
LABEL_29:
          v21 = *(_DWORD *)v20;
          v22 = *(_DWORD *)v20;
          if (*(_DWORD *)v20 != *(_DWORD *)(v20 + 4))
          {
            v115 = v115 & 0xFFFFFFFFFFFCFFFFLL | 0x20000;
            v22 = *(_DWORD *)(v20 + 4);
          }
          if (v21 | v22)
          {
            if (v21)
            {
              if (v22)
                goto LABEL_35;
              goto LABEL_39;
            }
            v23 = v115;
          }
          else
          {
            v23 = v115 & 0xFFFFFFFFFF3FFFFFLL | 0x400000;
          }
          v115 = v23 & 0xFFFFFFFFFCFFFFFFLL | 0x1000000;
          if (v22)
          {
LABEL_35:
            if ((v19 & 1) == 0)
              goto LABEL_40;
            goto LABEL_44;
          }
LABEL_39:
          v115 = v115 & 0xFFFFFFFFF3FFFFFFLL | 0x4000000;
          if ((v19 & 1) == 0)
          {
LABEL_40:
            if (v21 < (int)v108)
              v115 = v115 & 0xFFFFFFFFCFFFFFFFLL | 0x20000000;
            if (v22 < SHIDWORD(v108))
              v115 = v115 & 0xFFFFFFFF3FFFFFFFLL | 0x80000000;
          }
LABEL_44:
          v24 = fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)1>::One();
          v25 = *(_DWORD *)(v20 + 8);
          if (v25)
            v26 = *(_QWORD *)(v20 + 32) + 1;
          else
            v26 = 0;
          if (*(_DWORD *)v24)
            v27 = *(_QWORD *)(v24 + 24) + 1;
          else
            v27 = 0;
          if (v26 != v27)
            goto LABEL_64;
          v28 = 0;
          v29 = (uint64_t *)(v20 + 24);
          v30 = (uint64_t *)(v24 + 16);
          v31 = v25 && v25 == *(_DWORD *)v24;
          v32 = !v31;
          while (1)
          {
            v33 = *v29;
            v34 = *v30;
            if ((v28 & 1) == 0 && v32)
              break;
            if (v33 == v20 + 16)
              goto LABEL_63;
            if (*(_DWORD *)(v33 + 16) != *(_DWORD *)(v34 + 16))
              goto LABEL_64;
            v29 = (uint64_t *)(v33 + 8);
            v30 = (uint64_t *)(v34 + 8);
            v28 = 1;
          }
          if (v25)
            goto LABEL_64;
LABEL_63:
          v117 = 0.0;
          v117 = *(float *)(v20 + 40);
          v116 = 0.0;
          v116 = *(float *)(v24 + 32);
          if (v117 != v116)
          {
LABEL_64:
            v35 = fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)1>::Zero();
            v25 = *(_DWORD *)(v20 + 8);
            if (v25)
              v36 = *(_QWORD *)(v20 + 32) + 1;
            else
              v36 = 0;
            if (*(_DWORD *)v35)
              v37 = *(_QWORD *)(v35 + 24) + 1;
            else
              v37 = 0;
            if (v36 != v37)
              goto LABEL_84;
            v38 = 0;
            v39 = (uint64_t *)(v20 + 24);
            v40 = (uint64_t *)(v35 + 16);
            v41 = v25 && v25 == *(_DWORD *)v35;
            v42 = !v41;
            while (1)
            {
              v43 = *v39;
              v44 = *v40;
              if ((v38 & 1) == 0 && v42)
                break;
              if (v43 == v20 + 16)
                goto LABEL_83;
              if (*(_DWORD *)(v43 + 16) != *(_DWORD *)(v44 + 16))
                goto LABEL_84;
              v39 = (uint64_t *)(v43 + 8);
              v40 = (uint64_t *)(v44 + 8);
              v38 = 1;
            }
            if (v25)
              goto LABEL_84;
LABEL_83:
            v117 = 0.0;
            v117 = *(float *)(v20 + 40);
            v116 = 0.0;
            v116 = *(float *)(v35 + 32);
            if (v117 != v116)
LABEL_84:
              v115 = v115 & 0xFFFFFFFCFFFFFFFFLL | 0x100000000;
          }
          v45 = *(_DWORD *)(v20 + 48);
          if (v45 <= (int)v17)
            v115 = v115 & 0xFFFFFF3FFFFFFFFFLL | 0x8000000000;
          if (v45 != (_DWORD)v17 + 1)
            v115 = v115 & 0xFFFFCFFFFFFFFFFFLL | 0x200000000000;
          v108 = *(_QWORD *)v20;
          LODWORD(v109) = v25;
          if (&v108 != (uint64_t *)v20)
          {
            std::list<int>::__assign_with_sentinel[abi:ne180100]<std::__list_const_iterator<int,void *>,std::__list_const_iterator<int,void *>>(&v110, *(_QWORD *)(v20 + 24), v20 + 16);
            v45 = *(_DWORD *)(v20 + 48);
          }
          v113 = *(_DWORD *)(v20 + 40);
          v114 = v45;
          if (v11)
          {
            end = v107.__end_;
            if (v107.__end_ >= v107.__end_cap_.__value_)
            {
              begin = v107.__begin_;
              v49 = v107.__end_ - v107.__begin_;
              v50 = v49 + 1;
              if ((unint64_t)(v49 + 1) >> 62)
                goto LABEL_213;
              v51 = (char *)v107.__end_cap_.__value_ - (char *)v107.__begin_;
              if (((char *)v107.__end_cap_.__value_ - (char *)v107.__begin_) >> 1 > v50)
                v50 = v51 >> 1;
              if ((unint64_t)v51 >= 0x7FFFFFFFFFFFFFFCLL)
                v52 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v52 = v50;
              if (v52)
              {
                v53 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v107.__end_cap_, v52);
                begin = v107.__begin_;
                end = v107.__end_;
              }
              else
              {
                v53 = 0;
              }
              v54 = (unsigned int *)&v53[4 * v49];
              *v54 = *(_DWORD *)v20;
              v47 = v54 + 1;
              while (end != begin)
              {
                v55 = *--end;
                *--v54 = v55;
              }
              v107.__begin_ = v54;
              v107.__end_ = v47;
              v107.__end_cap_.__value_ = (unsigned int *)&v53[4 * v52];
              if (begin)
                operator delete(begin);
            }
            else
            {
              *v107.__end_ = *(_DWORD *)v20;
              v47 = end + 1;
            }
            v107.__end_ = v47;
          }
          if (v14)
          {
            v56 = v106.__end_;
            if (v106.__end_ >= v106.__end_cap_.__value_)
            {
              v58 = v106.__begin_;
              v59 = v106.__end_ - v106.__begin_;
              v60 = v59 + 1;
              if ((unint64_t)(v59 + 1) >> 62)
LABEL_213:
                std::vector<int>::__throw_length_error[abi:ne180100]();
              v61 = (char *)v106.__end_cap_.__value_ - (char *)v106.__begin_;
              if (((char *)v106.__end_cap_.__value_ - (char *)v106.__begin_) >> 1 > v60)
                v60 = v61 >> 1;
              if ((unint64_t)v61 >= 0x7FFFFFFFFFFFFFFCLL)
                v62 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v62 = v60;
              if (v62)
              {
                v63 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v106.__end_cap_, v62);
                v58 = v106.__begin_;
                v56 = v106.__end_;
              }
              else
              {
                v63 = 0;
              }
              v64 = (unsigned int *)&v63[4 * v59];
              *v64 = *(_DWORD *)(v20 + 4);
              v57 = v64 + 1;
              while (v56 != v58)
              {
                v65 = *--v56;
                *--v64 = v65;
              }
              v106.__begin_ = v64;
              v106.__end_ = v57;
              v106.__end_cap_.__value_ = (unsigned int *)&v63[4 * v62];
              if (v58)
                operator delete(v58);
            }
            else
            {
              *v106.__end_ = *(_DWORD *)(v20 + 4);
              v57 = v56 + 1;
            }
            v106.__end_ = v57;
          }
          if (v98)
          {
            (*(void (**)(uint64_t))(*(_QWORD *)v98 + 40))(v98);
            v19 = 0;
          }
          else
          {
            v19 = 0;
            ++v102;
          }
        }
      }
LABEL_17:
      v17 = v105;
      goto LABEL_18;
    }
    if (v103)
      (*(void (**)(void))(*(_QWORD *)v103 + 8))();
LABEL_203:
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v15 + 24))(v15) != -1
      && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v15 + 24))(v15))
    {
      v115 = v115 & 0xFFFFCFFFFFFFFFFFLL | 0x200000000000;
    }
    if (v106.__begin_)
    {
      v106.__end_ = v106.__begin_;
      operator delete(v106.__begin_);
    }
    if (v107.__begin_)
    {
      v107.__end_ = v107.__begin_;
      operator delete(v107.__begin_);
    }
    v8 = v115;
LABEL_211:
    v9 = v8 & 0x3FFFFFFF0000 | (2 * v8) & 0x2AAAAAAA0000 | (v8 >> 1) & 0x155555550000 | 7;
  }
  *a3 = v9;
  return v8;
}

void sub_1ADC177A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,uint64_t a25,void *a26,uint64_t a27)
{
  if (__p)
    operator delete(__p);
  if (a26)
    operator delete(a26);
  _Unwind_Resume(exception_object);
}

uint64_t fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)1>::One()
{
  unsigned __int8 v0;
  uint64_t v2;
  _DWORD *v3;

  if ((v0 & 1) == 0
  {
    v2 = operator new();
    v3 = (_DWORD *)fst::ProductWeight<fst::StringWeight<int,(fst::StringType)1>,fst::TropicalWeightTpl<float>>::One();
    *(_DWORD *)v2 = *v3;
    std::list<int>::list((_QWORD *)(v2 + 8), (uint64_t)(v3 + 2));
    *(_DWORD *)(v2 + 32) = v3[8];
    fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)1>::One(void)::one = v2;
  }
  return fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)1>::One(void)::one;
}

void sub_1ADC178F8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void fst::DfsVisit<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>,fst::SccVisitor<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>,fst::AnyArcFilter<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>(uint64_t a1, uint64_t *a2, char a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char inited;
  char v10;
  _QWORD *v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  std::vector<char>::pointer begin;
  unint64_t v19;
  uint64_t v20;
  _DWORD *v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  int v31;
  std::vector<char>::pointer end;
  char *v33;
  std::vector<char>::pointer v34;
  int64_t v35;
  int64_t v36;
  unint64_t v37;
  size_t v38;
  char *v39;
  char *v40;
  char *v41;
  char *v42;
  char v43;
  char v44;
  uint64_t v45;
  int v46;
  std::vector<char>::value_type v47[8];
  std::vector<char>::value_type __x[8];
  int v49;
  int v50;
  void *v51;
  _QWORD v52[6];
  _QWORD *v53;
  _OWORD v54[2];
  __int128 v55;
  std::vector<char> v56;

  fst::SccVisitor<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::InitVisit((uint64_t)a2, a1);
  v46 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  if (v46 == -1)
  {
    fst::SccVisitor<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::FinishVisit((uint64_t)a2);
    return;
  }
  memset(&v56, 0, sizeof(v56));
  v55 = 0u;
  memset(v54, 0, sizeof(v54));
  fst::MemoryPool<fst::DfsState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>::MemoryPool(&v51, 64);
  v45 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 64))(a1, 1, 0);
  if (v45)
    v6 = fst::CountStates<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>(a1);
  else
    v6 = (v46 + 1);
  __x[0] = 0;
  if ((std::vector<char>::pointer)(int)v6 <= (std::vector<char>::pointer)(v56.__end_ - v56.__begin_))
  {
    if ((std::vector<char>::pointer)(int)v6 < (std::vector<char>::pointer)(v56.__end_ - v56.__begin_))
      v56.__end_ = &v56.__begin_[(int)v6];
  }
  else
  {
    std::vector<char>::__append(&v56, (int)v6 - (unint64_t)(v56.__end_ - v56.__begin_), __x);
  }
  v50 = 0;
  (*(void (**)(uint64_t, std::vector<char>::value_type *))(*(_QWORD *)a1 + 128))(a1, __x);
  if (v46 >= (int)v6)
    goto LABEL_97;
  v7 = v46;
  v44 = a3;
  do
  {
    v56.__begin_[(int)v7] = 1;
    v8 = (uint64_t)v53;
    if (v53)
    {
      v53 = (_QWORD *)v53[6];
    }
    else
    {
      v8 = fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::Link>::Allocate(v52, 1);
      *(_QWORD *)(v8 + 48) = 0;
    }
    *(_DWORD *)v8 = v7;
    *(_QWORD *)(v8 + 40) = 0;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 136))(a1, v7, v8 + 8);
    *(_QWORD *)v47 = v8;
    std::deque<fst::DfsState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>> *,std::allocator<fst::DfsState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>> *>>::push_back(v54, v47);
    inited = fst::SccVisitor<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::InitState(a2, v7, v7);
LABEL_16:
    v10 = inited;
    while (*((_QWORD *)&v55 + 1))
    {
      v11 = *(_QWORD **)(*(_QWORD *)(*((_QWORD *)&v54[0] + 1)
                                   + (((unint64_t)(*((_QWORD *)&v55 + 1) + v55 - 1) >> 6) & 0x3FFFFFFFFFFFFF8))
                       + 8 * ((*((_QWORD *)&v55 + 1) + v55 - 1) & 0x1FF));
      v12 = *(int *)v11;
      v13 = v56.__end_ - v56.__begin_;
      if (v56.__end_ - v56.__begin_ <= v12)
      {
        v6 = v12 + 1;
        v47[0] = 0;
        if (v12 + 1 <= v13)
        {
          if (v12 + 1 < v13)
            v56.__end_ = &v56.__begin_[v6];
        }
        else
        {
          std::vector<char>::__append(&v56, v12 + 1 - v13, v47);
        }
      }
      if ((v10 & 1) == 0)
        goto LABEL_33;
      v14 = v11[1];
      if (v14)
      {
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v14 + 24))(v14))
          goto LABEL_33;
        v15 = v11[1];
        if (!v15)
          goto LABEL_29;
        v16 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 32))(v15);
LABEL_30:
        v17 = *(int *)(v16 + 48);
        begin = v56.__begin_;
        v19 = v56.__end_ - v56.__begin_;
        if (v56.__end_ - v56.__begin_ <= v17)
        {
          v6 = (v17 + 1);
          v47[0] = 0;
          if ((int)v6 <= v19)
          {
            if ((int)v6 < v19)
              v56.__end_ = &v56.__begin_[(int)v6];
          }
          else
          {
            std::vector<char>::__append(&v56, (int)v6 - v19, v47);
            v17 = *(int *)(v16 + 48);
            begin = v56.__begin_;
          }
        }
        v26 = begin[v17];
        if (v26 == 1)
        {
          v10 = fst::SccVisitor<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>::BackArc((uint64_t)a2, v12, v16);
          v25 = v11[1];
          if (v25)
            goto LABEL_50;
LABEL_51:
          ++v11[5];
        }
        else
        {
          if (v26 != 2)
          {
            begin[v17] = 1;
            v27 = (uint64_t)v53;
            if (v53)
            {
              v53 = (_QWORD *)v53[6];
            }
            else
            {
              v27 = fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::Link>::Allocate(v52, 1);
              *(_QWORD *)(v27 + 48) = 0;
            }
            *(_DWORD *)v27 = *(_DWORD *)(v16 + 48);
            *(_QWORD *)(v27 + 40) = 0;
            (*(void (**)(uint64_t))(*(_QWORD *)a1 + 136))(a1);
            *(_QWORD *)v47 = v27;
            std::deque<fst::DfsState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>> *,std::allocator<fst::DfsState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>> *>>::push_back(v54, v47);
            inited = fst::SccVisitor<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::InitState(a2, *(_DWORD *)(v16 + 48), v7);
            goto LABEL_16;
          }
          v10 = fst::SccVisitor<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>::ForwardOrCrossArc((_QWORD **)a2, v12, v16);
          v25 = v11[1];
          if (!v25)
            goto LABEL_51;
LABEL_50:
          (*(void (**)(uint64_t))(*(_QWORD *)v25 + 40))(v25);
        }
      }
      else
      {
        if (v11[5] < v11[3])
        {
LABEL_29:
          v16 = v11[2] + 56 * v11[5];
          goto LABEL_30;
        }
LABEL_33:
        v56.__begin_[v12] = 2;
        v20 = v11[1];
        if (v20)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
        }
        else
        {
          v21 = (_DWORD *)v11[4];
          if (v21)
            --*v21;
        }
        v11[6] = v53;
        v53 = v11;
        --*((_QWORD *)&v55 + 1);
        std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::__maybe_remove_back_spare[abi:ne180100](v54, 1);
        if (*((_QWORD *)&v55 + 1))
        {
          v22 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)&v54[0] + 1)
                                      + (((unint64_t)(*((_QWORD *)&v55 + 1) + v55 - 1) >> 6) & 0x3FFFFFFFFFFFFF8))
                          + 8 * ((*((_QWORD *)&v55 + 1) + v55 - 1) & 0x1FF));
          v23 = *(_DWORD *)v22;
          v24 = *(_QWORD *)(v22 + 8);
          if (v24)
            (*(void (**)(uint64_t))(*(_QWORD *)v24 + 32))(v24);
          fst::SccVisitor<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>::FinishState((uint64_t)a2, v12, v23);
          v25 = *(_QWORD *)(v22 + 8);
          if (v25)
            goto LABEL_50;
          ++*(_QWORD *)(v22 + 40);
        }
        else
        {
          fst::SccVisitor<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>::FinishState((uint64_t)a2, v12, -1);
        }
      }
    }
    if ((a3 & 1) != 0)
      break;
    if ((_DWORD)v7 == v46)
      v7 = 0;
    else
      v7 = (v7 + 1);
    if ((int)v7 < (int)v6)
    {
      v28 = &v56.__begin_[(int)v7];
      v29 = (int)v6 - (uint64_t)(int)v7;
      while (*v28++)
      {
        v7 = (v7 + 1);
        if (!--v29)
        {
          v7 = v6;
          break;
        }
      }
    }
    if (v45 || (_DWORD)v7 != (_DWORD)v6)
      continue;
LABEL_67:
    if (*(_QWORD *)__x)
    {
      if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)__x + 16))(*(_QWORD *)__x) & 1) != 0)
        continue;
      if (*(_QWORD *)__x)
      {
        v31 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)__x + 24))(*(_QWORD *)__x);
        goto LABEL_73;
      }
    }
    else if (v50 >= v49)
    {
      continue;
    }
    v31 = v50;
LABEL_73:
    if (v31 != (_DWORD)v6)
    {
      if (*(_QWORD *)__x)
        (*(void (**)(_QWORD))(**(_QWORD **)__x + 32))(*(_QWORD *)__x);
      else
        ++v50;
      goto LABEL_67;
    }
    end = v56.__end_;
    if (v56.__end_ >= v56.__end_cap_.__value_)
    {
      v34 = v56.__begin_;
      v35 = v56.__end_ - v56.__begin_;
      v36 = v56.__end_ - v56.__begin_ + 1;
      if (v36 < 0)
        std::vector<int>::__throw_length_error[abi:ne180100]();
      v37 = v56.__end_cap_.__value_ - v56.__begin_;
      if (2 * (v56.__end_cap_.__value_ - v56.__begin_) > (unint64_t)v36)
        v36 = 2 * v37;
      if (v37 >= 0x3FFFFFFFFFFFFFFFLL)
        v38 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v38 = v36;
      if (v38)
        v39 = (char *)operator new(v38);
      else
        v39 = 0;
      v40 = &v39[v35];
      v41 = &v39[v35];
      *v41 = 0;
      v33 = v41 + 1;
      if (end != v34)
      {
        v42 = &end[~(unint64_t)v34];
        do
        {
          v43 = *--end;
          (v42--)[(_QWORD)v39] = v43;
        }
        while (end != v34);
        end = v56.__begin_;
        v40 = v39;
      }
      v56.__begin_ = v40;
      v56.__end_ = v33;
      v56.__end_cap_.__value_ = &v39[v38];
      if (end)
        operator delete(end);
    }
    else
    {
      *v56.__end_ = 0;
      v33 = end + 1;
    }
    v56.__end_ = v33;
    v6 = (v6 + 1);
    a3 = v44;
  }
  while ((v10 & 1) != 0 && (int)v7 < (int)v6);
LABEL_97:
  fst::SccVisitor<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::FinishVisit((uint64_t)a2);
  if (*(_QWORD *)__x)
    (*(void (**)(_QWORD))(**(_QWORD **)__x + 8))(*(_QWORD *)__x);
  v51 = &unk_1E5D19850;
  fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>::Link>::~MemoryArena(v52);
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v51);
  std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100](v54);
  if (v56.__begin_)
  {
    v56.__end_ = v56.__begin_;
    operator delete(v56.__begin_);
  }
}

void sub_1ADC18004(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  void *v11;
  void *v12;
  va_list va;
  uint64_t v14;
  va_list va1;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  va_list va2;

  va_start(va2, a9);
  va_start(va1, a9);
  va_start(va, a9);
  va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v14 = va_arg(va2, _QWORD);
  v16 = va_arg(va2, _QWORD);
  v17 = va_arg(va2, _QWORD);
  v18 = va_arg(va2, _QWORD);
  v19 = va_arg(va2, _QWORD);
  v20 = va_arg(va2, _QWORD);
  v21 = va_arg(va2, _QWORD);
  v12 = &unk_1E5D19850;
  fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>::Link>::~MemoryArena((uint64_t *)va1);
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)va);
  std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100]((uint64_t *)va2);
  v11 = *(void **)(v9 - 112);
  if (v11)
  {
    *(_QWORD *)(v9 - 104) = v11;
    operator delete(v11);
  }
  _Unwind_Resume(a1);
}

unint64_t fst::SccVisitor<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>::FinishState(uint64_t a1, int a2, int a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t *v11;
  BOOL v12;
  int v13;
  int v14;
  uint64_t v15;
  unint64_t result;
  unint64_t v17;
  uint64_t v18;
  char v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  int *v23;
  unint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  int *i;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  float v32;
  float v33;
  uint64_t v34;
  _QWORD v35[3];
  float v36;
  float v37;
  float v38;

  (*(void (**)(uint64_t *__return_ptr))(**(_QWORD **)(a1 + 32) + 32))(&v34);
  v6 = fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)1>::Zero();
  if ((_DWORD)v34)
    v7 = v35[2] + 1;
  else
    v7 = 0;
  if (*(_DWORD *)v6)
    v8 = *(_QWORD *)(v6 + 24) + 1;
  else
    v8 = 0;
  if (v7 == v8)
  {
    v9 = 0;
    v10 = v35[1];
    v11 = (uint64_t *)(v6 + 16);
    if ((_DWORD)v34)
      v12 = (_DWORD)v34 == *(_DWORD *)v6;
    else
      v12 = 0;
    v13 = !v12;
    v14 = v13 ^ 1;
    while (1)
    {
      v15 = *v11;
      if ((v9 & 1) == 0 && !v14)
        break;
      if ((_QWORD *)v10 == v35)
        goto LABEL_42;
      if (*(_DWORD *)(v10 + 16) != *(_DWORD *)(v15 + 16))
        goto LABEL_21;
      v10 = *(_QWORD *)(v10 + 8);
      v11 = (uint64_t *)(v15 + 8);
      v9 = 1;
    }
    if ((_DWORD)v34)
      goto LABEL_21;
LABEL_42:
    v38 = v36;
    v37 = 0.0;
    v37 = *(float *)(v6 + 32);
    v32 = v36;
    v33 = v37;
    result = (unint64_t)std::__list_imp<char *>::clear(v35);
    if (v32 == v33)
    {
      v17 = a2;
      goto LABEL_23;
    }
  }
  else
  {
LABEL_21:
    result = (unint64_t)std::__list_imp<char *>::clear(v35);
  }
  v17 = a2;
  *(_QWORD *)(**(_QWORD **)(a1 + 16) + (((unint64_t)a2 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << a2;
LABEL_23:
  v18 = **(_QWORD **)(a1 + 64);
  if (*(_DWORD *)(**(_QWORD **)(a1 + 56) + 4 * v17) != *(_DWORD *)(v18 + 4 * v17))
    goto LABEL_36;
  v19 = 0;
  v20 = *(_QWORD **)(a1 + 80);
  v21 = v20[1];
  v22 = **(_QWORD **)(a1 + 16);
  v23 = (int *)(((v21 - *v20) & 0xFFFFFFFFFFFFFFFCLL) + *v20 - 4);
  do
  {
    v24 = *v23--;
    v19 |= *(_QWORD *)(v22 + ((v24 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v24;
  }
  while ((_DWORD)v24 != a2);
  v25 = *(_QWORD **)a1;
  v26 = **(_QWORD **)(a1 + 72);
  for (i = (int *)(v21 - 4); ; --i)
  {
    v28 = *i;
    if (v25)
      *(_DWORD *)(*v25 + 4 * v28) = *(_DWORD *)(a1 + 48);
    result = v28 >> 6;
    v29 = 1 << v28;
    if ((v19 & 1) == 0)
      break;
    *(_QWORD *)(v22 + 8 * result) |= v29;
    *(_QWORD *)(v26 + 8 * result) &= ~v29;
    if ((_DWORD)v28 == a2)
    {
      v20[1] = i;
      goto LABEL_35;
    }
LABEL_33:
    ;
  }
  *(_QWORD *)(v26 + 8 * result) &= ~v29;
  if ((_DWORD)v28 != a2)
    goto LABEL_33;
  v20[1] = i;
  **(_QWORD **)(a1 + 24) = **(_QWORD **)(a1 + 24) & 0xFFFFF3FFFFFFFFFFLL | 0x80000000000;
LABEL_35:
  ++*(_DWORD *)(a1 + 48);
LABEL_36:
  if (a3 != -1)
  {
    v30 = **(_QWORD **)(a1 + 16);
    if (((*(_QWORD *)(v30 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v17) & 1) != 0)
      *(_QWORD *)(v30 + (((unint64_t)a3 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << a3;
    v31 = *(_DWORD *)(v18 + 4 * v17);
    if (v31 < *(_DWORD *)(v18 + 4 * a3))
      *(_DWORD *)(v18 + 4 * a3) = v31;
  }
  return result;
}

void sub_1ADC18348(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__list_imp<char *>::clear((_QWORD *)(v1 + 8));
  _Unwind_Resume(a1);
}

void fst::MemoryPool<fst::DfsState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>::~MemoryPool(quasar::Bitmap *a1)
{
  *(_QWORD *)a1 = &unk_1E5D19850;
  fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>::Link>::~MemoryArena((_QWORD *)a1 + 1);
  quasar::Bitmap::~Bitmap(a1);
}

{
  *(_QWORD *)a1 = &unk_1E5D19850;
  fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>::Link>::~MemoryArena((_QWORD *)a1 + 1);
  quasar::Bitmap::~Bitmap(a1);
  JUMPOUT(0x1AF44D190);
}

_QWORD *fst::MemoryPool<fst::DfsState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>::MemoryPool(_QWORD *a1, uint64_t a2)
{
  *a1 = &unk_1E5D19850;
  fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>::Link>::MemoryArena(a1 + 1, a2);
  a1[7] = 0;
  return a1;
}

void sub_1ADC183C8(_Unwind_Exception *a1)
{
  quasar::Bitmap *v1;

  quasar::Bitmap::~Bitmap(v1);
  _Unwind_Resume(a1);
}

uint64_t fst::MemoryPool<fst::DfsState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>::Size()
{
  return 48;
}

_QWORD *fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>::Link>::MemoryArena(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;

  *a1 = &unk_1E5D1A808;
  a1[1] = 56 * a2;
  a1[2] = 0;
  a1[3] = a1 + 3;
  a1[4] = a1 + 3;
  a1[5] = 0;
  v3 = operator new[]();
  v4 = operator new(0x18uLL);
  v5 = (_QWORD *)a1[4];
  v6 = a1[5];
  *v4 = a1 + 3;
  v4[1] = v5;
  v4[2] = v3;
  *v5 = v4;
  a1[4] = v4;
  a1[5] = v6 + 1;
  return a1;
}

void sub_1ADC184B0(_Unwind_Exception *a1)
{
  quasar::Bitmap *v1;
  _QWORD *v2;

  std::__list_imp<char *>::clear(v2);
  quasar::Bitmap::~Bitmap(v1);
  _Unwind_Resume(a1);
}

void fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>::Link>::~MemoryArena(_QWORD *a1)
{
  fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>::Link>::~MemoryArena(a1);
  JUMPOUT(0x1AF44D190);
}

{
  _QWORD *v2;
  _QWORD *i;
  uint64_t v4;

  *a1 = &unk_1E5D1A808;
  v2 = a1 + 3;
  for (i = (_QWORD *)a1[4]; i != v2; i = (_QWORD *)i[1])
  {
    v4 = i[2];
    if (v4)
      MEMORY[0x1AF44D160](v4, 0x1000C8077774924);
  }
  std::__list_imp<char *>::clear(v2);
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)a1);
}

uint64_t fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>::Link>::Size()
{
  return 56;
}

void std::deque<fst::DfsState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>> *,std::allocator<fst::DfsState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>> *>>::push_back(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;

  v4 = a1[2];
  v5 = a1[1];
  if (v4 == v5)
    v6 = 0;
  else
    v6 = ((v4 - v5) << 6) - 1;
  v7 = a1[5];
  v8 = v7 + a1[4];
  if (v6 == v8)
  {
    std::deque<fst::DfsState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>> *,std::allocator<fst::DfsState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>> *>>::__add_back_capacity(a1);
    v5 = a1[1];
    v7 = a1[5];
    v8 = a1[4] + v7;
  }
  *(_QWORD *)(*(_QWORD *)(v5 + ((v8 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v8 & 0x1FF)) = *a2;
  a1[5] = v7 + 1;
}

void std::deque<fst::DfsState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>> *,std::allocator<fst::DfsState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>> *>>::__add_back_capacity(_QWORD *a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  char *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  unint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  void *v53;
  __int128 v54;
  __int128 v55;
  _QWORD *v56;

  v2 = a1[4];
  v3 = v2 >= 0x200;
  v4 = v2 - 512;
  if (v3)
  {
    v5 = (uint64_t)(a1 + 3);
    v6 = (char *)a1[3];
    a1[4] = v4;
    v7 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v11 = *v7;
    v9 = (char *)(v7 + 1);
    v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(_QWORD *)v8 = v10;
      a1[2] += 8;
      return;
    }
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v33 = 1;
      else
        v33 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>(v5, v33);
      v35 = &v34[8 * (v33 >> 2)];
      v37 = &v34[8 * v36];
      v38 = (uint64_t *)a1[1];
      v8 = v35;
      v39 = a1[2] - (_QWORD)v38;
      if (v39)
      {
        v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        v40 = 8 * (v39 >> 3);
        v41 = &v34[8 * (v33 >> 2)];
        do
        {
          v42 = *v38++;
          *(_QWORD *)v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    v13 = v12 >> 3;
    v14 = v12 >> 3 < -1;
    v15 = (v12 >> 3) + 2;
    if (v14)
      v16 = v15;
    else
      v16 = v13 + 1;
    v17 = -(v16 >> 1);
    v18 = v16 >> 1;
    v19 = &v9[-8 * v18];
    v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      v9 = (char *)a1[1];
    }
    v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  v21 = a1[2];
  v22 = (v21 - a1[1]) >> 3;
  v23 = a1[3];
  v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(_QWORD *)&v54 = operator new(0x1000uLL);
      std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **>>::push_back(a1, &v54);
      return;
    }
    *(_QWORD *)&v54 = operator new(0x1000uLL);
    std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **>>::push_front((uint64_t)a1, &v54);
    v44 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v45 = *v44;
    v9 = (char *)(v44 + 1);
    v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3])
      goto LABEL_33;
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v46 = 1;
      else
        v46 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(a1 + 3), v46);
      v35 = &v34[8 * (v46 >> 2)];
      v37 = &v34[8 * v47];
      v48 = (uint64_t *)a1[1];
      v8 = v35;
      v49 = a1[2] - (_QWORD)v48;
      if (v49)
      {
        v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        v50 = 8 * (v49 >> 3);
        v51 = &v34[8 * (v46 >> 2)];
        do
        {
          v52 = *v48++;
          *(_QWORD *)v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1)
    v25 = 1;
  else
    v25 = v24 >> 2;
  v56 = a1 + 3;
  *(_QWORD *)&v54 = std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(a1 + 3), v25);
  *((_QWORD *)&v54 + 1) = v54 + 8 * v22;
  *(_QWORD *)&v55 = *((_QWORD *)&v54 + 1);
  *((_QWORD *)&v55 + 1) = v54 + 8 * v26;
  v53 = operator new(0x1000uLL);
  std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **> &>::push_back(&v54, &v53);
  v27 = (_QWORD *)a1[2];
  v28 = -7 - (_QWORD)v27;
  while (v27 != (_QWORD *)a1[1])
  {
    --v27;
    v28 += 8;
    std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **> &>::push_front((uint64_t)&v54, v27);
  }
  v29 = (char *)*a1;
  v30 = v54;
  v31 = v55;
  *(_QWORD *)&v54 = *a1;
  *((_QWORD *)&v54 + 1) = v27;
  v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  v55 = v32;
  if (v27 != (_QWORD *)v32)
    *(_QWORD *)&v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  if (v29)
    operator delete(v29);
}

void sub_1ADC188BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  void *v13;

  operator delete(v13);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t fst::ProductWeight<fst::StringWeight<int,(fst::StringType)1>,fst::TropicalWeightTpl<float>>::One()
{
  unsigned __int8 v0;
  uint64_t v2;
  _DWORD *v3;

  if ((v0 & 1) == 0
  {
    v2 = operator new();
    v3 = (_DWORD *)fst::PairWeight<fst::StringWeight<int,(fst::StringType)1>,fst::TropicalWeightTpl<float>>::One();
    *(_DWORD *)v2 = *v3;
    std::list<int>::list((_QWORD *)(v2 + 8), (uint64_t)(v3 + 2));
    *(_DWORD *)(v2 + 32) = v3[8];
    fst::ProductWeight<fst::StringWeight<int,(fst::StringType)1>,fst::TropicalWeightTpl<float>>::One(void)::one = v2;
  }
  return fst::ProductWeight<fst::StringWeight<int,(fst::StringType)1>,fst::TropicalWeightTpl<float>>::One(void)::one;
}

void sub_1ADC189A0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t fst::PairWeight<fst::StringWeight<int,(fst::StringType)1>,fst::TropicalWeightTpl<float>>::One()
{
  unsigned __int8 v0;
  uint64_t v2;
  int *v3;
  int v4;
  _QWORD v5[3];

  if ((v0 & 1) == 0
  {
    v2 = operator new();
    v3 = (int *)fst::StringWeight<int,(fst::StringType)1>::One();
    v4 = *v3;
    std::list<int>::list(v5, (uint64_t)(v3 + 2));
    *(_DWORD *)v2 = v4;
    std::list<int>::list((_QWORD *)(v2 + 8), (uint64_t)v5);
    *(_DWORD *)(v2 + 32) = 0;
    std::__list_imp<char *>::clear(v5);
    fst::PairWeight<fst::StringWeight<int,(fst::StringType)1>,fst::TropicalWeightTpl<float>>::One(void)::one = v2;
  }
  return fst::PairWeight<fst::StringWeight<int,(fst::StringType)1>,fst::TropicalWeightTpl<float>>::One(void)::one;
}

void sub_1ADC18A98(_Unwind_Exception *a1)
{
  uint64_t v1;
  _QWORD *v2;

  std::__list_imp<char *>::clear(v2);
  MEMORY[0x1AF44D190](v1, 0x1020C4067685F46);
  _Unwind_Resume(a1);
}

void fst::ArcBuffer<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>::SetFromFst<fst::Fst<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t v17;
  _DWORD *v18;
  unint64_t v19;
  unint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  unint64_t v28;
  _DWORD *v29;

  (*(void (**)(uint64_t, uint64_t, uint64_t **))(*(_QWORD *)a2 + 136))(a2, a3, &v26);
  if (!v26 && (a4 & 1) == 0)
  {
    v10 = v27 + 56 * v28;
    *(_QWORD *)(a1 + 16) = v27;
    *(_QWORD *)(a1 + 24) = v10;
    if (*(_QWORD *)a1)
    {
      free(*(void **)a1);
      *(_QWORD *)a1 = 0;
    }
    *(_QWORD *)(a1 + 8) = 0;
    return;
  }
  v11 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 40))(a2, a3);
  v12 = a5;
  if (!a4)
    v12 = 0;
  v13 = v11 + v12;
  if (*(_QWORD *)(a1 + 8) < (unint64_t)(v11 + v12))
  {
    if (*(_QWORD *)a1)
      free(*(void **)a1);
    v25 = 0x4000;
    if (v13 > 0x4000)
      v25 = v13;
    *(_QWORD *)(a1 + 8) = v25;
    v15 = (uint64_t *)malloc_type_malloc(56 * v25, 0x1020040540EBC04uLL);
    *(_QWORD *)a1 = v15;
    *(_QWORD *)(a1 + 16) = v15;
    v14 = v15;
  }
  else
  {
    v14 = *(uint64_t **)(a1 + 16);
    v15 = *(uint64_t **)a1;
  }
  *(_QWORD *)(a1 + 24) = &v14[7 * v13];
  v16 = v26;
  v17 = v27;
  v19 = v28;
  v18 = v29;
  if (v29)
    ++*v29;
  v20 = 0;
LABEL_13:
  v15 += 7;
  while (v16)
  {
    v21 = (*(uint64_t (**)(uint64_t *))(*v16 + 24))(v16);
    v22 = *v16;
    if (v21)
    {
      (*(void (**)(uint64_t *))(v22 + 8))(v16);
      return;
    }
    v23 = (*(uint64_t (**)(uint64_t *))(v22 + 32))(v16);
LABEL_18:
    v24 = v15 - 7;
    *v24 = *(_QWORD *)v23;
    *((_DWORD *)v24 + 2) = *(_DWORD *)(v23 + 8);
    if (v15 - 7 != (uint64_t *)v23)
      std::list<int>::__assign_with_sentinel[abi:ne180100]<std::__list_const_iterator<int,void *>,std::__list_const_iterator<int,void *>>(v15 - 5, *(_QWORD *)(v23 + 24), v23 + 16);
    *((_DWORD *)v15 - 4) = *(_DWORD *)(v23 + 40);
    *((_DWORD *)v15 - 2) = *(_DWORD *)(v23 + 48);
    if (!v16)
    {
      ++v20;
      goto LABEL_13;
    }
    v15 += 7;
    (*(void (**)(uint64_t *))(*v16 + 40))(v16);
  }
  v23 = v17 + 56 * v20;
  if (v20 < v19)
    goto LABEL_18;
  if (v18)
    --*v18;
}

void sub_1ADC18CF4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  _DWORD *v2;

  if (v1)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  }
  else if (v2)
  {
    --*v2;
  }
  _Unwind_Resume(exception_object);
}

uint64_t fst::VectorFst<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>,fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>>::WriteFst<fst::VectorFst<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>,fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>>>(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  int v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _DWORD *v17;
  uint64_t v18;
  _DWORD *v19;
  int v20;
  fst *v21;
  _QWORD *v22;
  _QWORD *v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t updated;
  fst *v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  _BYTE v34[8];
  void *v35[2];
  void *v36[2];
  __int128 v37;
  __int128 v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  std::string __p[5];
  uint64_t v43;
  uint64_t v44;

  v44 = *MEMORY[0x1E0C80C00];
  v37 = 0u;
  v38 = 0u;
  *(_OWORD *)v35 = 0u;
  *(_OWORD *)v36 = 0u;
  v6 = -1;
  v40 = 0;
  v41 = 0;
  v39 = -1;
  v39 = (*(int (**)(_QWORD *))(*a1 + 24))(a1);
  v40 = -1;
  if ((*(uint64_t (**)(_QWORD *, uint64_t, _QWORD))(*a1 + 64))(a1, 1, 0))
  {
    v6 = 0;
LABEL_3:
    v7 = 0;
    v40 = (int)fst::CountStates<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>((uint64_t)a1);
    goto LABEL_6;
  }
  v8 = (char *)a2 + *(_QWORD *)(*a2 - 24);
  if ((v8[32] & 5) == 0)
  {
    (*(void (**)(std::string *__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**((_QWORD **)v8 + 5) + 32))(__p, *((_QWORD *)v8 + 5), 0, 1, 16);
    v6 = v43;
    if (v43 != -1)
      goto LABEL_3;
  }
  v7 = 1;
LABEL_6:
  v9 = (*(uint64_t (**)(_QWORD *, uint64_t, _QWORD))(*a1 + 64))(a1, 0x3FFFFFFF0004, 0);
  std::string::basic_string[abi:ne180100]<0>(__p, "vector");
  v9 |= 3uLL;
  fst::FstImpl<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>::WriteFstHeader((uint64_t)a1, (uint64_t)a2, (_BYTE *)a3, 2, __p, v9, (uint64_t)v34);
  v31 = v9;
  v32 = v6;
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p[0].__r_.__value_.__l.__data_);
  v10 = *(_QWORD *)(a1[1] + 72) - *(_QWORD *)(a1[1] + 64);
  v11 = v10 >> 3;
  if ((int)(v10 >> 3) < 1)
  {
    LODWORD(v11) = 0;
  }
  else
  {
    v12 = 0;
    v13 = (v10 >> 3);
    do
    {
      (*(void (**)(std::string *__return_ptr, _QWORD *, uint64_t))(*a1 + 32))(__p, a1, v12);
      fst::PairWeight<fst::StringWeight<int,(fst::StringType)1>,fst::LogWeightTpl<float>>::Write(__p);
      std::__list_imp<char *>::clear(&__p[0].__r_.__value_.__l.__size_);
      __p[0].__r_.__value_.__r.__words[0] = (*(uint64_t (**)(_QWORD *, uint64_t))(*a1 + 40))(a1, v12);
      std::ostream::write();
      v14 = *(_QWORD *)(*(_QWORD *)(a1[1] + 64) + 8 * v12);
      v16 = *(_QWORD *)(v14 + 56);
      v15 = *(_QWORD *)(v14 + 64);
      if (v15 == v16)
        v17 = 0;
      else
        v17 = *(_DWORD **)(v14 + 56);
      if (v15 != v16)
      {
        if ((unint64_t)((v15 - v16) / 56) <= 1)
          v18 = 1;
        else
          v18 = (v15 - v16) / 56;
        v19 = v17;
        do
        {
          v20 = *v19;
          v19 += 14;
          LODWORD(__p[0].__r_.__value_.__l.__data_) = v20;
          std::ostream::write();
          LODWORD(__p[0].__r_.__value_.__l.__data_) = v17[1];
          std::ostream::write();
          fst::PairWeight<fst::StringWeight<int,(fst::StringType)1>,fst::LogWeightTpl<float>>::Write(v17 + 2);
          LODWORD(__p[0].__r_.__value_.__l.__data_) = v17[12];
          std::ostream::write();
          v17 = v19;
          --v18;
        }
        while (v18);
      }
      ++v12;
    }
    while (v12 != v13);
  }
  std::ostream::flush();
  if ((*((_BYTE *)a2 + *(_QWORD *)(*a2 - 24) + 32) & 5) != 0)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
    v21 = fst::LogMessage::LogMessage((fst *)&v33, (uint64_t)__p);
    v22 = (_QWORD *)fst::cerr(v21);
    v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"VectorFst::Write: write failed: ", 32);
    v24 = *(char *)(a3 + 23);
    if (v24 >= 0)
      v25 = a3;
    else
      v25 = *(_QWORD *)a3;
    if (v24 >= 0)
      v26 = *(unsigned __int8 *)(a3 + 23);
    else
      v26 = *(_QWORD *)(a3 + 8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, v25, v26);
LABEL_30:
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v33);
    if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p[0].__r_.__value_.__l.__data_);
    updated = 0;
    goto LABEL_33;
  }
  if (!v7)
  {
    if (v40 == v11)
    {
      updated = 1;
      goto LABEL_33;
    }
    std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
    v29 = fst::LogMessage::LogMessage((fst *)&v33, (uint64_t)__p);
    v30 = (_QWORD *)fst::cerr(v29);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)"Inconsistent number of states observed during write", 51);
    goto LABEL_30;
  }
  v40 = v11;
  std::string::basic_string[abi:ne180100]<0>(__p, "vector");
  updated = fst::FstImpl<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>::UpdateFstHeader((uint64_t)a1, a2, a3, 2, __p, v31, (uint64_t)v34, v32);
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p[0].__r_.__value_.__l.__data_);
LABEL_33:
  if (SHIBYTE(v37) < 0)
    operator delete(v36[1]);
  if (SHIBYTE(v36[0]) < 0)
    operator delete(v35[0]);
  return updated;
}

void sub_1ADC19154(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  if (a34 < 0)
    operator delete(__p);
  fst::FstHeader::~FstHeader(&a17);
  _Unwind_Resume(a1);
}

uint64_t fst::FstImpl<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>::WriteFstHeader(uint64_t a1, uint64_t a2, _BYTE *a3, int a4, std::string *__str, uint64_t a6, uint64_t a7)
{
  const std::string *v13;
  BOOL v14;
  int v15;
  uint64_t v16;
  BOOL v17;
  int v18;
  BOOL v19;
  uint64_t v20;
  uint64_t result;
  BOOL v22;
  uint64_t v23;

  if (a3[24])
  {
    std::string::operator=((std::string *)(a7 + 8), __str);
    v13 = (const std::string *)fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>::Type();
    std::string::operator=((std::string *)(a7 + 32), v13);
    *(_DWORD *)(a7 + 56) = a4;
    *(_QWORD *)(a7 + 64) = a6;
    if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 112))(a1))
      v14 = a3[25] == 0;
    else
      v14 = 1;
    v15 = !v14;
    v16 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1);
    if (a3[26])
      v17 = v16 == 0;
    else
      v17 = 1;
    v18 = v15 | 2;
    if (v17)
      v18 = v15;
    if (a3[27])
      v18 |= 4u;
    *(_DWORD *)(a7 + 60) = v18;
    fst::FstHeader::Write();
  }
  if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 112))(a1))
    v19 = a3[25] == 0;
  else
    v19 = 1;
  if (!v19)
  {
    v20 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 112))(a1);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v20 + 72))(v20, a2);
  }
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1);
  if (result)
    v22 = a3[26] == 0;
  else
    v22 = 1;
  if (!v22)
  {
    v23 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1);
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v23 + 72))(v23, a2);
  }
  return result;
}

uint64_t fst::FstImpl<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>::UpdateFstHeader(uint64_t a1, _QWORD *a2, uint64_t a3, int a4, std::string *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char *v16;
  uint64_t v17;
  fst *v18;
  _QWORD *v19;
  _QWORD *v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  fst *v24;
  _QWORD *v25;
  int v26;
  char *v27;
  fst *v28;
  _QWORD *v29;
  int v30;
  _BYTE v32[16];
  _QWORD v33[17];
  __int128 __p;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  uint64_t v42;
  uint64_t v43;

  v43 = *MEMORY[0x1E0C80C00];
  MEMORY[0x1AF44CB90](v32);
  v16 = (char *)a2 + *(_QWORD *)(*a2 - 24);
  if ((v16[32] & 5) == 0)
  {
    v17 = *((_QWORD *)v16 + 5);
    v40 = 0u;
    v41 = 0u;
    v38 = 0u;
    v39 = 0u;
    v36 = 0u;
    v37 = 0u;
    __p = 0u;
    v35 = 0u;
    v42 = a8;
    (*(void (**)(_QWORD *__return_ptr, uint64_t, __int128 *, uint64_t))(*(_QWORD *)v17 + 40))(v33, v17, &__p, 16);
    if (v33[16] == -1)
      std::ios_base::clear((std::ios_base *)((char *)a2 + *(_QWORD *)(*a2 - 24)), *(_DWORD *)((char *)a2 + *(_QWORD *)(*a2 - 24) + 32) | 4);
  }
  MEMORY[0x1AF44CB9C](v32);
  if ((*((_BYTE *)a2 + *(_QWORD *)(*a2 - 24) + 32) & 5) != 0)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "ERROR");
    v18 = fst::LogMessage::LogMessage((fst *)v33, (uint64_t)&__p);
    v19 = (_QWORD *)fst::cerr(v18);
    v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"Fst::UpdateFstHeader: write failed: ", 36);
    v21 = *(char *)(a3 + 23);
    if (v21 >= 0)
      v22 = a3;
    else
      v22 = *(_QWORD *)a3;
    if (v21 >= 0)
      v23 = *(unsigned __int8 *)(a3 + 23);
    else
      v23 = *(_QWORD *)(a3 + 8);
  }
  else
  {
    fst::FstImpl<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>::WriteFstHeader(a1, (uint64_t)a2, (_BYTE *)a3, a4, a5, a6, a7);
    if ((*((_BYTE *)a2 + *(_QWORD *)(*a2 - 24) + 32) & 5) != 0)
    {
      std::string::basic_string[abi:ne180100]<0>(&__p, "ERROR");
      v24 = fst::LogMessage::LogMessage((fst *)v33, (uint64_t)&__p);
      v25 = (_QWORD *)fst::cerr(v24);
      v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)"Fst::UpdateFstHeader: write failed: ", 36);
      v26 = *(char *)(a3 + 23);
      if (v26 >= 0)
        v22 = a3;
      else
        v22 = *(_QWORD *)a3;
      if (v26 >= 0)
        v23 = *(unsigned __int8 *)(a3 + 23);
      else
        v23 = *(_QWORD *)(a3 + 8);
    }
    else
    {
      MEMORY[0x1AF44CB90](v33, a2);
      v27 = (char *)a2 + *(_QWORD *)(*a2 - 24);
      if ((v27[32] & 5) == 0)
      {
        (*(void (**)(__int128 *__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**((_QWORD **)v27 + 5) + 32))(&__p, *((_QWORD *)v27 + 5), 0, 2, 16);
        if (v42 == -1)
          std::ios_base::clear((std::ios_base *)((char *)a2 + *(_QWORD *)(*a2 - 24)), *(_DWORD *)((char *)a2 + *(_QWORD *)(*a2 - 24) + 32) | 4);
      }
      MEMORY[0x1AF44CB9C](v33);
      if ((*((_BYTE *)a2 + *(_QWORD *)(*a2 - 24) + 32) & 5) == 0)
        return 1;
      std::string::basic_string[abi:ne180100]<0>(&__p, "ERROR");
      v28 = fst::LogMessage::LogMessage((fst *)v33, (uint64_t)&__p);
      v29 = (_QWORD *)fst::cerr(v28);
      v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)"Fst::UpdateFstHeader: write failed: ", 36);
      v30 = *(char *)(a3 + 23);
      if (v30 >= 0)
        v22 = a3;
      else
        v22 = *(_QWORD *)a3;
      if (v30 >= 0)
        v23 = *(unsigned __int8 *)(a3 + 23);
      else
        v23 = *(_QWORD *)(a3 + 8);
    }
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, v22, v23);
  fst::LogMessage::~LogMessage((fst::LogMessage *)v33);
  if (SBYTE7(v35) < 0)
    operator delete((void *)__p);
  return 0;
}

void sub_1ADC19644(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  MEMORY[0x1AF44CB9C](&a12);
  _Unwind_Resume(a1);
}

uint64_t fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>::Type()
{
  unsigned __int8 v0;
  uint64_t v2;

  if ((v0 & 1) == 0
  {
    v2 = operator new();
    fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>::Type();
    std::operator+<char>();
    fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>::Type(void)::type = v2;
  }
  return fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>::Type(void)::type;
}

void sub_1ADC19734(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t fst::Fst<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>::WriteFile(fst *a1, uint64_t a2)
{
  fst *v4;
  _QWORD *v5;
  _QWORD *v6;
  int v7;
  const std::string::value_type *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  char v13;
  std::string __p;
  __int16 v16;
  char v17;
  char v18;
  char v19;
  std::string v20;
  __int16 v21;
  char v22;
  char v23;
  _BYTE v24[384];
  _QWORD v25[20];

  v25[19] = *MEMORY[0x1E0C80C00];
  if (*(char *)(a2 + 23) < 0)
  {
    if (*(_QWORD *)(a2 + 8))
    {
LABEL_5:
      std::ofstream::basic_ofstream(&v20);
      if ((v24[*(_QWORD *)(v20.__r_.__value_.__r.__words[0] - 24)] & 5) != 0)
      {
        std::string::basic_string[abi:ne180100]<0>(&__p, "ERROR");
        v4 = fst::LogMessage::LogMessage((fst *)&v19, (uint64_t)&__p);
        v5 = (_QWORD *)fst::cerr(v4);
        v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Fst::Write: Can't open file: ", 29);
        v7 = *(char *)(a2 + 23);
        if (v7 >= 0)
          v8 = (const std::string::value_type *)a2;
        else
          v8 = *(const std::string::value_type **)a2;
        if (v7 >= 0)
          v9 = *(unsigned __int8 *)(a2 + 23);
        else
          v9 = *(_QWORD *)(a2 + 8);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)v8, v9);
        fst::LogMessage::~LogMessage((fst::LogMessage *)&v19);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        v10 = 0;
      }
      else
      {
        v13 = FLAGS_fst_align;
        if (*(char *)(a2 + 23) < 0)
          std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
        else
          __p = *(std::string *)a2;
        v16 = 257;
        v17 = 1;
        v18 = v13;
        v10 = (*(uint64_t (**)(fst *, std::string *, std::string *))(*(_QWORD *)a1 + 96))(a1, &v20, &__p);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
      }
      v20.__r_.__value_.__r.__words[0] = *MEMORY[0x1E0DE4F48];
      *(std::string::size_type *)((char *)v20.__r_.__value_.__r.__words
                                + *(_QWORD *)(v20.__r_.__value_.__r.__words[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F48]
                                                                                                  + 24);
      MEMORY[0x1AF44CA70](&v20.__r_.__value_.__r.__words[1]);
      std::ostream::~ostream();
      MEMORY[0x1AF44D094](v25);
      return v10;
    }
  }
  else if (*(_BYTE *)(a2 + 23))
  {
    goto LABEL_5;
  }
  v11 = fst::cout(a1);
  std::string::basic_string[abi:ne180100]<0>(&__p, "standard output");
  v12 = FLAGS_fst_align;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v20, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  else
    v20 = __p;
  v21 = 257;
  v22 = 1;
  v23 = v12;
  v10 = (*(uint64_t (**)(fst *, uint64_t, std::string *))(*(_QWORD *)a1 + 96))(a1, v11, &v20);
  if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v20.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return v10;
}

void sub_1ADC199D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  std::ofstream::~ofstream(&a21);
  _Unwind_Resume(a1);
}

_QWORD *fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>>::SetFinal(_QWORD *a1, int a2, int *a3)
{
  int *v6;
  unint64_t v7;
  int v9;
  _QWORD v10[3];
  int v11;
  int v12;
  _QWORD v13[3];
  int v14;
  int v15;
  _QWORD v16[3];
  int v17;
  int v18;
  _QWORD v19[3];
  int v20;

  v6 = *(int **)(a1[8] + 8 * a2);
  v18 = *v6;
  std::list<int>::list(v19, (uint64_t)(v6 + 2));
  v20 = v6[8];
  v15 = *a3;
  std::list<int>::list(v16, (uint64_t)(a3 + 2));
  v17 = a3[8];
  fst::VectorFstBaseImpl<fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>>::SetFinal((uint64_t)a1, a2, &v15);
  std::__list_imp<char *>::clear(v16);
  v7 = (*(uint64_t (**)(_QWORD *))(*a1 + 24))(a1);
  v12 = v18;
  std::list<int>::list(v13, (uint64_t)v19);
  v14 = v20;
  v9 = *a3;
  std::list<int>::list(v10, (uint64_t)(a3 + 2));
  v11 = a3[8];
  a1[1] = a1[1] & 4 | fst::SetFinalProperties<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)1>>(v7, &v12, &v9);
  std::__list_imp<char *>::clear(v10);
  std::__list_imp<char *>::clear(v13);
  return std::__list_imp<char *>::clear(v19);
}

void sub_1ADC19B94(_Unwind_Exception *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;

  std::__list_imp<char *>::clear(v3);
  std::__list_imp<char *>::clear(v2);
  std::__list_imp<char *>::clear(v1);
  _Unwind_Resume(a1);
}

uint64_t fst::SetFinalProperties<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)1>>(unint64_t a1, int *a2, int *a3)
{
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t *v11;
  uint64_t *v12;
  BOOL v13;
  _BOOL4 v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t *v23;
  uint64_t *v24;
  BOOL v25;
  _BOOL4 v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  uint64_t *v35;
  uint64_t *v36;
  BOOL v37;
  _BOOL4 v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  char v46;
  uint64_t *v47;
  uint64_t *v48;
  BOOL v49;
  _BOOL4 v50;
  int v51;
  uint64_t v52;
  uint64_t v53;

  v6 = fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)1>::Zero();
  v7 = *a2;
  if (*a2)
    v8 = *((_QWORD *)a2 + 3) + 1;
  else
    v8 = 0;
  if (*(_DWORD *)v6)
    v9 = *(_QWORD *)(v6 + 24) + 1;
  else
    v9 = 0;
  if (v8 != v9)
    goto LABEL_22;
  v10 = 0;
  v11 = (uint64_t *)(a2 + 4);
  v12 = (uint64_t *)(v6 + 16);
  v13 = v7 && v7 == *(_DWORD *)v6;
  v14 = !v13;
  v15 = !v14;
  while (1)
  {
    v16 = *v11;
    v17 = *v12;
    if ((v10 & 1) == 0 && !v15)
      break;
    if ((int *)v16 == a2 + 2)
      goto LABEL_21;
    if (*(_DWORD *)(v16 + 16) != *(_DWORD *)(v17 + 16))
      goto LABEL_22;
    v11 = (uint64_t *)(v16 + 8);
    v12 = (uint64_t *)(v17 + 8);
    v10 = 1;
  }
  if (v7)
    goto LABEL_22;
LABEL_21:
  if (*((float *)a2 + 8) != *(float *)(v6 + 32))
  {
LABEL_22:
    v18 = fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)1>::One();
    v19 = *a2;
    if (*a2)
      v20 = *((_QWORD *)a2 + 3) + 1;
    else
      v20 = 0;
    if (*(_DWORD *)v18)
      v21 = *(_QWORD *)(v18 + 24) + 1;
    else
      v21 = 0;
    if (v20 != v21)
      goto LABEL_43;
    v22 = 0;
    v23 = (uint64_t *)(a2 + 4);
    v24 = (uint64_t *)(v18 + 16);
    v25 = v19 && v19 == *(_DWORD *)v18;
    v26 = !v25;
    v27 = !v26;
    while (1)
    {
      v28 = *v23;
      v29 = *v24;
      if ((v22 & 1) == 0 && !v27)
        break;
      if ((int *)v28 == a2 + 2)
        goto LABEL_42;
      if (*(_DWORD *)(v28 + 16) != *(_DWORD *)(v29 + 16))
        goto LABEL_43;
      v23 = (uint64_t *)(v28 + 8);
      v24 = (uint64_t *)(v29 + 8);
      v22 = 1;
    }
    if (v19)
      goto LABEL_43;
LABEL_42:
    if (*((float *)a2 + 8) != *(float *)(v18 + 32))
LABEL_43:
      a1 &= ~0x100000000uLL;
  }
  v30 = fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)1>::Zero();
  v31 = *a3;
  if (*a3)
    v32 = *((_QWORD *)a3 + 3) + 1;
  else
    v32 = 0;
  if (*(_DWORD *)v30)
    v33 = *(_QWORD *)(v30 + 24) + 1;
  else
    v33 = 0;
  if (v32 != v33)
    goto LABEL_65;
  v34 = 0;
  v35 = (uint64_t *)(a3 + 4);
  v36 = (uint64_t *)(v30 + 16);
  v37 = v31 && v31 == *(_DWORD *)v30;
  v38 = !v37;
  v39 = !v38;
  while (1)
  {
    v40 = *v35;
    v41 = *v36;
    if ((v34 & 1) == 0 && !v39)
      break;
    if ((int *)v40 == a3 + 2)
      goto LABEL_64;
    if (*(_DWORD *)(v40 + 16) != *(_DWORD *)(v41 + 16))
      goto LABEL_65;
    v35 = (uint64_t *)(v40 + 8);
    v36 = (uint64_t *)(v41 + 8);
    v34 = 1;
  }
  if (v31)
    goto LABEL_65;
LABEL_64:
  if (*((float *)a3 + 8) != *(float *)(v30 + 32))
  {
LABEL_65:
    v42 = fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)1>::One();
    v43 = *a3;
    if (*a3)
      v44 = *((_QWORD *)a3 + 3) + 1;
    else
      v44 = 0;
    if (*(_DWORD *)v42)
      v45 = *(_QWORD *)(v42 + 24) + 1;
    else
      v45 = 0;
    if (v44 != v45)
      goto LABEL_86;
    v46 = 0;
    v47 = (uint64_t *)(a3 + 4);
    v48 = (uint64_t *)(v42 + 16);
    v49 = v43 && v43 == *(_DWORD *)v42;
    v50 = !v49;
    v51 = !v50;
    while (1)
    {
      v52 = *v47;
      v53 = *v48;
      if ((v46 & 1) == 0 && !v51)
        break;
      if ((int *)v52 == a3 + 2)
        goto LABEL_85;
      if (*(_DWORD *)(v52 + 16) != *(_DWORD *)(v53 + 16))
        goto LABEL_86;
      v47 = (uint64_t *)(v52 + 8);
      v48 = (uint64_t *)(v53 + 8);
      v46 = 1;
    }
    if (v43)
      goto LABEL_86;
LABEL_85:
    if (*((float *)a3 + 8) != *(float *)(v42 + 32))
LABEL_86:
      a1 = a1 & 0xFFFFFFFCFFFFFFFFLL | 0x100000000;
  }
  return a1 & 0x3FFFFFF0007;
}

uint64_t fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>>::AddArc(_QWORD *a1, int a2, int *a3)
{
  uint64_t v6;
  _DWORD *v7;
  unint64_t v8;

  v6 = *(_QWORD *)(*(_QWORD *)(a1[8] + 8 * a2) + 64);
  if (v6 == *(_QWORD *)(*(_QWORD *)(a1[8] + 8 * a2) + 56))
    v7 = 0;
  else
    v7 = (_DWORD *)(v6 - 56);
  v8 = (*(uint64_t (**)(_QWORD *))(*a1 + 24))(a1);
  a1[1] = a1[1] & 4 | fst::AddArcProperties<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>(v8, a2, a3, v7);
  return fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>::AddArc(*(_QWORD **)(a1[8] + 8 * a2), a3);
}

uint64_t fst::AddArcProperties<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>(unint64_t a1, int a2, int *a3, _DWORD *a4)
{
  int v6;
  int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t *v17;
  uint64_t *v18;
  BOOL v19;
  _BOOL4 v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t *v29;
  uint64_t *v30;
  BOOL v31;
  _BOOL4 v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;

  v6 = *a3;
  v7 = a3[1];
  v8 = a1 & 0xFFFFFFFFFFFCFFFFLL | 0x20000;
  if (*a3 == v7)
    v8 = a1;
  v9 = v8 & 0xFFFFFFFFFCFFFFFFLL | 0x1000000;
  if (!v7)
    v9 = v8 & 0xFFFFFFFFFC3FFFFFLL | 0x1400000;
  if (!v6)
    v8 = v9;
  if (v7)
    v10 = v8;
  else
    v10 = v8 & 0xFFFFFFFFF3FFFFFFLL | 0x4000000;
  if (a4)
  {
    if (*a4 <= v6)
      v11 = v10;
    else
      v11 = v10 & 0xFFFFFFFFCFFFFFFFLL | 0x20000000;
    if (a4[1] > v7)
      v10 = v11 & 0xFFFFFFFF3FFFFFFFLL | 0x80000000;
    else
      v10 = v11;
  }
  v12 = fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)1>::Zero();
  v13 = a3[2];
  if (v13)
    v14 = *((_QWORD *)a3 + 4) + 1;
  else
    v14 = 0;
  if (*(_DWORD *)v12)
    v15 = *(_QWORD *)(v12 + 24) + 1;
  else
    v15 = 0;
  if (v14 != v15)
    goto LABEL_38;
  v16 = 0;
  v17 = (uint64_t *)(a3 + 6);
  v18 = (uint64_t *)(v12 + 16);
  v19 = v13 && v13 == *(_DWORD *)v12;
  v20 = !v19;
  v21 = !v20;
  while (1)
  {
    v22 = *v17;
    v23 = *v18;
    if ((v16 & 1) == 0 && !v21)
      break;
    if ((int *)v22 == a3 + 4)
      goto LABEL_37;
    if (*(_DWORD *)(v22 + 16) != *(_DWORD *)(v23 + 16))
      goto LABEL_38;
    v17 = (uint64_t *)(v22 + 8);
    v18 = (uint64_t *)(v23 + 8);
    v16 = 1;
  }
  if (v13)
    goto LABEL_38;
LABEL_37:
  if (*((float *)a3 + 10) != *(float *)(v12 + 32))
  {
LABEL_38:
    v24 = fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)1>::One();
    v25 = a3[2];
    if (v25)
      v26 = *((_QWORD *)a3 + 4) + 1;
    else
      v26 = 0;
    if (*(_DWORD *)v24)
      v27 = *(_QWORD *)(v24 + 24) + 1;
    else
      v27 = 0;
    if (v26 != v27)
      goto LABEL_59;
    v28 = 0;
    v29 = (uint64_t *)(a3 + 6);
    v30 = (uint64_t *)(v24 + 16);
    v31 = v25 && v25 == *(_DWORD *)v24;
    v32 = !v31;
    v33 = !v32;
    while (1)
    {
      v34 = *v29;
      v35 = *v30;
      if ((v28 & 1) == 0 && !v33)
        break;
      if ((int *)v34 == a3 + 4)
        goto LABEL_58;
      if (*(_DWORD *)(v34 + 16) != *(_DWORD *)(v35 + 16))
        goto LABEL_59;
      v29 = (uint64_t *)(v34 + 8);
      v30 = (uint64_t *)(v35 + 8);
      v28 = 1;
    }
    if (v25)
      goto LABEL_59;
LABEL_58:
    if (*((float *)a3 + 10) != *(float *)(v24 + 32))
LABEL_59:
      v10 = v10 & 0xFFFFFFFCFFFFFFFFLL | 0x100000000;
  }
  if (a3[12] <= a2)
    v36 = v10 & 0xFFFFFF3FFFFFFFFFLL | 0x8000000000;
  else
    v36 = v10;
  if ((v36 & 0x4000000000) != 0)
    return v36 & 0x5D7FFEB0007 | 0x2800000000;
  else
    return v36 & 0x5D7FFEB0007;
}

void fst::VectorFstBaseImpl<fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>>::DeleteStates(uint64_t a1, char **a2)
{
  uint64_t *v4;
  std::vector<int>::size_type v5;
  char *v6;
  uint64_t v7;
  unint64_t v8;
  std::vector<int>::pointer begin;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  int64x2_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  int *v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int64x2_t v28;
  unint64_t v29;
  uint64_t v30;
  int *v31;
  int64x2_t v32;
  int64x2_t v33;
  std::vector<int>::value_type __x;
  std::vector<int> v35;

  v4 = (uint64_t *)(a1 + 64);
  v5 = (uint64_t)(*(_QWORD *)(a1 + 72) - *(_QWORD *)(a1 + 64)) >> 3;
  __x = 0;
  std::vector<int>::vector(&v35, v5, &__x);
  v6 = *a2;
  v7 = a2[1] - *a2;
  if (v7)
  {
    v8 = v7 >> 2;
    begin = v35.__begin_;
    if (v8 <= 1)
      v8 = 1;
    do
    {
      v10 = *(int *)v6;
      v6 += 4;
      begin[v10] = -1;
      --v8;
    }
    while (v8);
  }
  v11 = *(_QWORD *)(a1 + 64);
  if (*(_QWORD *)(a1 + 72) == v11)
  {
    v13 = 0;
  }
  else
  {
    v12 = 0;
    v13 = 0;
    do
    {
      if (v35.__begin_[v12] == -1)
      {
        fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::Destroy(*(_QWORD *)(v11 + 8 * v12));
      }
      else
      {
        v35.__begin_[v12] = v13;
        if (v12 != v13)
          *(_QWORD *)(v11 + 8 * v13) = *(_QWORD *)(v11 + 8 * v12);
        ++v13;
      }
      ++v12;
      v11 = *(_QWORD *)(a1 + 64);
    }
    while (v12 < (*(_QWORD *)(a1 + 72) - v11) >> 3);
  }
  std::vector<fst::QueueBase<int> *,std::allocator<fst::QueueBase<int> *>>::resize((uint64_t)v4, v13);
  v14 = *(_QWORD *)(a1 + 64);
  if (*(_QWORD *)(a1 + 72) != v14)
  {
    v15 = 0;
    do
    {
      v16 = *(_QWORD *)(v14 + 8 * v15);
      v17 = *(int64x2_t *)(v16 + 40);
      v18 = *(_QWORD *)(v16 + 64) - *(_QWORD *)(v16 + 56);
      if (v18)
        v19 = *(_QWORD *)(v16 + 56);
      else
        v19 = 0;
      if (v18)
      {
        v20 = 0;
        v21 = 0;
        v22 = (int *)(v19 + 48);
        v23 = v19 + 16;
        do
        {
          v24 = v35.__begin_[*v22];
          if (v24 == -1)
          {
            v27 = *((_QWORD *)v22 - 6);
            v28.i64[0] = v27;
            v28.i64[1] = HIDWORD(v27);
            v17 = vaddq_s64(v17, vceqzq_s64(v28));
          }
          else
          {
            *v22 = v24;
            if (v20 != v21)
            {
              v32 = v17;
              v25 = v19 + 56 * v21;
              *(_QWORD *)v25 = *((_QWORD *)v22 - 6);
              *(_DWORD *)(v25 + 8) = *(v22 - 10);
              std::list<int>::__assign_with_sentinel[abi:ne180100]<std::__list_const_iterator<int,void *>,std::__list_const_iterator<int,void *>>((uint64_t *)(v25 + 16), *((_QWORD *)v22 - 3), v23);
              v26 = v19 + 56 * v21;
              *(_DWORD *)(v26 + 40) = *(v22 - 2);
              *(_DWORD *)(v26 + 48) = *v22;
              v14 = *v4;
              v17 = v32;
            }
            ++v21;
          }
          ++v20;
          v16 = *(_QWORD *)(v14 + 8 * v15);
          v29 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(v16 + 64) - *(_QWORD *)(v16 + 56)) >> 3);
          v22 += 14;
          v23 += 56;
        }
        while (v20 < v29);
        v33 = v17;
      }
      else
      {
        v33 = *(int64x2_t *)(v16 + 40);
        v21 = 0;
        v29 = 0;
      }
      fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::DeleteArcs((_QWORD *)v16, v29 - v21);
      v14 = *(_QWORD *)(a1 + 64);
      *(int64x2_t *)(*(_QWORD *)(v14 + 8 * v15++) + 40) = v33;
    }
    while (v15 < (*(_QWORD *)(a1 + 72) - v14) >> 3);
  }
  v30 = *(int *)(a1 + 88);
  if ((_DWORD)v30 == -1)
  {
    v31 = v35.__begin_;
    if (!v35.__begin_)
      return;
  }
  else
  {
    v31 = v35.__begin_;
    *(_DWORD *)(a1 + 88) = v35.__begin_[v30];
  }
  v35.__end_ = v31;
  operator delete(v31);
}

void sub_1ADC1A404(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void fst::MutableArcIterator<fst::VectorFst<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>,fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>>>::~MutableArcIterator()
{
  JUMPOUT(0x1AF44D190);
}

uint64_t fst::ArcIteratorBase<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>::Reinit()
{
  return 0;
}

BOOL fst::MutableArcIterator<fst::VectorFst<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>,fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>>>::Done_(uint64_t a1)
{
  return *(_QWORD *)(a1 + 24) >= (unint64_t)(0x6DB6DB6DB6DB6DB7
                                                  * ((uint64_t)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 64)
                                                             - *(_QWORD *)(*(_QWORD *)(a1 + 8) + 56)) >> 3));
}

uint64_t fst::MutableArcIterator<fst::VectorFst<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>,fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>>>::Value_(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 8) + 56) + 56 * *(_QWORD *)(a1 + 24);
}

uint64_t fst::MutableArcIterator<fst::VectorFst<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>,fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>>>::Next_(uint64_t result)
{
  ++*(_QWORD *)(result + 24);
  return result;
}

uint64_t fst::MutableArcIterator<fst::VectorFst<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>,fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>>>::Position_(uint64_t a1)
{
  return *(_QWORD *)(a1 + 24);
}

uint64_t fst::MutableArcIterator<fst::VectorFst<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>,fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>>>::Reset_(uint64_t result)
{
  *(_QWORD *)(result + 24) = 0;
  return result;
}

uint64_t fst::MutableArcIterator<fst::VectorFst<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>,fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>>>::Seek_(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 24) = a2;
  return result;
}

uint64_t fst::MutableArcIterator<fst::VectorFst<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>,fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>>>::Flags_()
{
  return 15;
}

uint64_t fst::MutableArcIterator<fst::VectorFst<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>,fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>>>::SetValue(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  int *v6;
  int v7;
  int v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  int *v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t *v20;
  uint64_t *v21;
  BOOL v22;
  _BOOL4 v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  uint64_t *v32;
  uint64_t *v33;
  BOOL v34;
  _BOOL4 v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  int v41;
  unint64_t *v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t result;
  int v46;
  uint64_t v47;
  uint64_t v48;
  char v49;
  uint64_t *v50;
  uint64_t *v51;
  BOOL v52;
  _BOOL4 v53;
  int v54;
  uint64_t v55;
  uint64_t v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  char v60;
  uint64_t *v61;
  uint64_t *v62;
  BOOL v63;
  _BOOL4 v64;
  int v65;
  uint64_t v66;
  uint64_t v67;

  v4 = *(_QWORD *)(a1 + 24);
  v5 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 56);
  v6 = (int *)(v5 + 56 * v4);
  v7 = *v6;
  v8 = v6[1];
  if (*v6 != v8)
    **(_QWORD **)(a1 + 16) &= ~0x20000uLL;
  if (v7)
  {
    if (!v8)
    {
      v9 = *(unint64_t **)(a1 + 16);
      v10 = *v9;
LABEL_8:
      *v9 = v10 & 0xFFFFFFFFFBFFFFFFLL;
    }
  }
  else
  {
    v9 = *(unint64_t **)(a1 + 16);
    v11 = *v9;
    *v9 &= ~0x1000000uLL;
    if (!v8)
    {
      v10 = v11 & 0xFFFFFFFFFEBFFFFFLL;
      *v9 = v11 & 0xFFFFFFFFFEBFFFFFLL;
      goto LABEL_8;
    }
  }
  v12 = v5 + 56 * v4;
  v13 = fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)1>::Zero();
  v16 = *(_DWORD *)(v12 + 8);
  v15 = (int *)(v12 + 8);
  v14 = v16;
  if (v16)
    v17 = *((_QWORD *)v15 + 3) + 1;
  else
    v17 = 0;
  if (*(_DWORD *)v13)
    v18 = *(_QWORD *)(v13 + 24) + 1;
  else
    v18 = 0;
  if (v17 != v18)
    goto LABEL_30;
  v19 = 0;
  v20 = (uint64_t *)(v15 + 4);
  v21 = (uint64_t *)(v13 + 16);
  v22 = v14 && v14 == *(_DWORD *)v13;
  v23 = !v22;
  v24 = !v23;
  while (1)
  {
    v25 = *v20;
    v26 = *v21;
    if ((v19 & 1) == 0 && !v24)
      break;
    if ((int *)v25 == v15 + 2)
      goto LABEL_29;
    if (*(_DWORD *)(v25 + 16) != *(_DWORD *)(v26 + 16))
      goto LABEL_30;
    v20 = (uint64_t *)(v25 + 8);
    v21 = (uint64_t *)(v26 + 8);
    v19 = 1;
  }
  if (v14)
    goto LABEL_30;
LABEL_29:
  if (*((float *)v15 + 8) != *(float *)(v13 + 32))
  {
LABEL_30:
    v27 = fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)1>::One();
    v28 = *v15;
    if (*v15)
      v29 = *((_QWORD *)v15 + 3) + 1;
    else
      v29 = 0;
    if (*(_DWORD *)v27)
      v30 = *(_QWORD *)(v27 + 24) + 1;
    else
      v30 = 0;
    if (v29 != v30)
      goto LABEL_51;
    v31 = 0;
    v32 = (uint64_t *)(v15 + 4);
    v33 = (uint64_t *)(v27 + 16);
    v34 = v28 && v28 == *(_DWORD *)v27;
    v35 = !v34;
    v36 = !v35;
    while (1)
    {
      v37 = *v32;
      v38 = *v33;
      if ((v31 & 1) == 0 && !v36)
        break;
      if ((int *)v37 == v15 + 2)
        goto LABEL_50;
      if (*(_DWORD *)(v37 + 16) != *(_DWORD *)(v38 + 16))
        goto LABEL_51;
      v32 = (uint64_t *)(v37 + 8);
      v33 = (uint64_t *)(v38 + 8);
      v31 = 1;
    }
    if (v28)
      goto LABEL_51;
LABEL_50:
    if (*((float *)v15 + 8) != *(float *)(v27 + 32))
LABEL_51:
      **(_QWORD **)(a1 + 16) &= ~0x100000000uLL;
  }
  v39 = 0x30FC30007;
  if (*(_DWORD *)a2 == *v6 && *(_DWORD *)(a2 + 4) == v6[1] && *(_DWORD *)(a2 + 48) == *(_DWORD *)(v5 + 56 * v4 + 48))
    v39 = 0x3FFFFFFF0007;
  fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::SetArc(*(uint64_t **)(a1 + 8), a2, *(_QWORD *)(a1 + 24));
  v40 = *(_DWORD *)a2;
  v41 = *(_DWORD *)(a2 + 4);
  if (*(_DWORD *)a2 != v41)
    **(_QWORD **)(a1 + 16) = **(_QWORD **)(a1 + 16) & 0xFFFFFFFFFFFCFFFFLL | 0x20000;
  if (v40)
  {
    if (!v41)
    {
      v42 = *(unint64_t **)(a1 + 16);
      v43 = *v42;
LABEL_63:
      *v42 = v43 & 0xFFFFFFFFF3FFFFFFLL | 0x4000000;
    }
  }
  else
  {
    v42 = *(unint64_t **)(a1 + 16);
    v44 = *v42 & 0xFFFFFFFFFCFFFFFFLL | 0x1000000;
    *v42 = v44;
    if (!v41)
    {
      v43 = v44 & 0xFFFFFFFFFD3FFFFFLL | 0x400000;
      *v42 = v43;
      goto LABEL_63;
    }
  }
  result = fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)1>::Zero();
  v46 = *(_DWORD *)(a2 + 8);
  if (v46)
    v47 = *(_QWORD *)(a2 + 32) + 1;
  else
    v47 = 0;
  if (*(_DWORD *)result)
    v48 = *(_QWORD *)(result + 24) + 1;
  else
    v48 = 0;
  if (v47 != v48)
    goto LABEL_85;
  v49 = 0;
  v50 = (uint64_t *)(a2 + 24);
  v51 = (uint64_t *)(result + 16);
  v52 = v46 && v46 == *(_DWORD *)result;
  v53 = !v52;
  v54 = !v53;
  while (1)
  {
    v55 = *v50;
    v56 = *v51;
    if ((v49 & 1) == 0 && !v54)
      break;
    if (v55 == a2 + 16)
      goto LABEL_84;
    if (*(_DWORD *)(v55 + 16) != *(_DWORD *)(v56 + 16))
      goto LABEL_85;
    v50 = (uint64_t *)(v55 + 8);
    v51 = (uint64_t *)(v56 + 8);
    v49 = 1;
  }
  if (v46)
    goto LABEL_85;
LABEL_84:
  if (*(float *)(a2 + 40) != *(float *)(result + 32))
  {
LABEL_85:
    result = fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)1>::One();
    v57 = *(_DWORD *)(a2 + 8);
    if (v57)
      v58 = *(_QWORD *)(a2 + 32) + 1;
    else
      v58 = 0;
    if (*(_DWORD *)result)
      v59 = *(_QWORD *)(result + 24) + 1;
    else
      v59 = 0;
    if (v58 != v59)
      goto LABEL_106;
    v60 = 0;
    v61 = (uint64_t *)(a2 + 24);
    v62 = (uint64_t *)(result + 16);
    v63 = v57 && v57 == *(_DWORD *)result;
    v64 = !v63;
    v65 = !v64;
    while (1)
    {
      v66 = *v61;
      v67 = *v62;
      if ((v60 & 1) == 0 && !v65)
        break;
      if (v66 == a2 + 16)
        goto LABEL_105;
      if (*(_DWORD *)(v66 + 16) != *(_DWORD *)(v67 + 16))
        goto LABEL_106;
      v61 = (uint64_t *)(v66 + 8);
      v62 = (uint64_t *)(v67 + 8);
      v60 = 1;
    }
    if (v57)
      goto LABEL_106;
LABEL_105:
    if (*(float *)(a2 + 40) != *(float *)(result + 32))
LABEL_106:
      **(_QWORD **)(a1 + 16) = **(_QWORD **)(a1 + 16) & 0xFFFFFFFCFFFFFFFFLL | 0x100000000;
  }
  **(_QWORD **)(a1 + 16) &= v39;
  return result;
}

_QWORD *fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>::Reverse@<X0>(_DWORD *a1@<X0>, uint64_t a2@<X8>)
{
  int v4;
  _QWORD v5[3];
  int v6;

  fst::ProductWeight<fst::StringWeight<int,(fst::StringType)0>,fst::TropicalWeightTpl<float>>::Reverse(a1, (uint64_t)&v4);
  *(_DWORD *)a2 = v4;
  std::list<int>::list((_QWORD *)(a2 + 8), (uint64_t)v5);
  *(_DWORD *)(a2 + 32) = v6;
  return std::__list_imp<char *>::clear(v5);
}

void sub_1ADC1A998(_Unwind_Exception *a1)
{
  _QWORD *v1;

  std::__list_imp<char *>::clear(v1);
  _Unwind_Resume(a1);
}

_QWORD *fst::ProductWeight<fst::StringWeight<int,(fst::StringType)0>,fst::TropicalWeightTpl<float>>::Reverse@<X0>(_DWORD *a1@<X0>, uint64_t a2@<X8>)
{
  int v4;
  _QWORD v5[3];
  int v6;

  fst::PairWeight<fst::StringWeight<int,(fst::StringType)0>,fst::TropicalWeightTpl<float>>::Reverse(a1, (uint64_t)&v4);
  *(_DWORD *)a2 = v4;
  std::list<int>::list((_QWORD *)(a2 + 8), (uint64_t)v5);
  *(_DWORD *)(a2 + 32) = v6;
  return std::__list_imp<char *>::clear(v5);
}

void sub_1ADC1AA04(_Unwind_Exception *a1)
{
  _QWORD *v1;

  std::__list_imp<char *>::clear(v1);
  _Unwind_Resume(a1);
}

_QWORD *fst::PairWeight<fst::StringWeight<int,(fst::StringType)0>,fst::TropicalWeightTpl<float>>::Reverse@<X0>(_DWORD *a1@<X0>, uint64_t a2@<X8>)
{
  int v4;
  uint64_t v5;
  char v6;
  _DWORD *v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  int v11;
  char v12;
  _DWORD *v13;
  int v14;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;

  v4 = 0;
  v5 = 0;
  v6 = 0;
  v16 = (uint64_t)&v16;
  v17 = &v16;
  v18 = 0;
  v7 = a1 + 2;
  v8 = (uint64_t *)(a1 + 4);
  v9 = &v16;
LABEL_2:
  v10 = *v8;
  v11 = v4;
  while (1)
  {
    v12 = v6;
    if ((v6 & 1) != 0)
    {
      if ((_DWORD *)v10 == v7)
        break;
      v4 = *(_DWORD *)(v10 + 16);
      goto LABEL_7;
    }
    v4 = *a1;
    if (!*a1)
      break;
LABEL_7:
    if (v11)
    {
      v13 = operator new(0x18uLL);
      v13[4] = v11;
      *(_QWORD *)v13 = &v16;
      *((_QWORD *)v13 + 1) = v9;
      *v9 = (uint64_t)v13;
      ++v5;
      v9 = (uint64_t *)v13;
      v17 = (uint64_t *)v13;
      v18 = v5;
    }
    v6 = 1;
    v11 = v4;
    if ((v12 & 1) != 0)
    {
      v8 = (uint64_t *)(v10 + 8);
      goto LABEL_2;
    }
  }
  v14 = a1[8];
  *(_DWORD *)a2 = v11;
  std::list<int>::list((_QWORD *)(a2 + 8), (uint64_t)&v16);
  *(_DWORD *)(a2 + 32) = v14;
  return std::__list_imp<char *>::clear(&v16);
}

void sub_1ADC1AB18(_Unwind_Exception *a1)
{
  _QWORD *v1;

  std::__list_imp<char *>::clear(v1);
  _Unwind_Resume(a1);
}

uint64_t fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)1>::GallicWeight(uint64_t a1, int *a2, float a3)
{
  int v6;
  _QWORD v7[3];

  v6 = *a2;
  std::list<int>::list(v7, (uint64_t)(a2 + 2));
  fst::ProductWeight<fst::StringWeight<int,(fst::StringType)1>,fst::TropicalWeightTpl<float>>::ProductWeight(a1, &v6, a3);
  std::__list_imp<char *>::clear(v7);
  return a1;
}

void sub_1ADC1AB94(_Unwind_Exception *a1)
{
  _QWORD *v1;

  std::__list_imp<char *>::clear(v1);
  _Unwind_Resume(a1);
}

uint64_t fst::ProductWeight<fst::StringWeight<int,(fst::StringType)1>,fst::TropicalWeightTpl<float>>::ProductWeight(uint64_t a1, int *a2, float a3)
{
  int v6;
  _QWORD v7[3];

  v6 = *a2;
  std::list<int>::list(v7, (uint64_t)(a2 + 2));
  *(_DWORD *)a1 = v6;
  std::list<int>::list((_QWORD *)(a1 + 8), (uint64_t)v7);
  *(float *)(a1 + 32) = a3;
  std::__list_imp<char *>::clear(v7);
  return a1;
}

void sub_1ADC1AC14(_Unwind_Exception *a1)
{
  _QWORD *v1;

  std::__list_imp<char *>::clear(v1);
  _Unwind_Resume(a1);
}

uint64_t fst::AutoQueue<int>::AutoQueue<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>,fst::AnyArcFilter<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  int *v7;
  int *v8;
  int *v9;
  int v10;
  int *v11;
  int v12;
  int v13;
  BOOL v14;
  int v15;
  unint64_t v16;
  uint64_t v17;
  fst *v18;
  _QWORD *v19;
  uint64_t v20;
  fst *v21;
  _QWORD *v22;
  void *v23;
  uint64_t v24;
  fst *v25;
  _QWORD *v26;
  uint64_t v27;
  fst *v28;
  _QWORD *v29;
  uint64_t v30;
  fst *v31;
  _QWORD *v32;
  fst *v33;
  _QWORD *v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  fst *v38;
  _QWORD *v39;
  _QWORD *v40;
  uint64_t v41;
  fst *v42;
  _QWORD *v43;
  _QWORD *v44;
  fst *v45;
  _QWORD *v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t result;
  void *__p[2];
  char v51;
  char v52;
  __int16 v53;
  void *v54[3];
  uint64_t v55[2];
  uint64_t v56;
  uint64_t *v57;
  uint64_t v58;

  *(_DWORD *)(a1 + 8) = 7;
  *(_BYTE *)(a1 + 12) = 0;
  *(_OWORD *)(a1 + 24) = 0u;
  v4 = (_QWORD *)(a1 + 24);
  *(_QWORD *)a1 = &unk_1E5D239D8;
  v5 = (_QWORD *)(a1 + 48);
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  v6 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, 0x4E00000000, 0);
  if ((v6 & 0x4000000000) != 0 || (*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2) == -1)
  {
    v20 = operator new();
    *(_DWORD *)(v20 + 8) = 5;
    *(_BYTE *)(v20 + 12) = 0;
    *(_QWORD *)v20 = &unk_1E5D1EEB0;
    *(_QWORD *)(v20 + 16) = 0xFFFFFFFF00000000;
    *(_QWORD *)(v20 + 32) = 0;
    *(_QWORD *)(v20 + 40) = 0;
    *(_QWORD *)(v20 + 24) = 0;
    *(_QWORD *)(a1 + 16) = v20;
    if (FLAGS_v < 2)
      return a1;
    std::string::basic_string[abi:ne180100]<0>(v55, "INFO");
    v21 = fst::LogMessage::LogMessage((fst *)v54, (uint64_t)v55);
    v22 = (_QWORD *)fst::cerr(v21);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"AutoQueue: using state-order discipline", 39);
    goto LABEL_18;
  }
  if ((v6 & 0x800000000) != 0)
  {
    v24 = operator new();
    fst::TopOrderQueue<int>::TopOrderQueue<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>,fst::AnyArcFilter<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>(v24, a2);
    *(_QWORD *)(a1 + 16) = v24;
    if (FLAGS_v < 2)
      return a1;
    std::string::basic_string[abi:ne180100]<0>(v55, "INFO");
    v25 = fst::LogMessage::LogMessage((fst *)v54, (uint64_t)v55);
    v26 = (_QWORD *)fst::cerr(v25);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)"AutoQueue: using top-order discipline", 37);
    goto LABEL_18;
  }
  if ((v6 & 0x200000000) != 0)
  {
    v27 = operator new();
    *(_DWORD *)(v27 + 8) = 2;
    *(_BYTE *)(v27 + 12) = 0;
    *(_OWORD *)(v27 + 16) = 0u;
    *(_OWORD *)(v27 + 32) = 0u;
    *(_OWORD *)(v27 + 48) = 0u;
    *(_QWORD *)v27 = &unk_1E5D27B60;
    *(_QWORD *)(a1 + 16) = v27;
    if (FLAGS_v < 2)
      return a1;
    std::string::basic_string[abi:ne180100]<0>(v55, "INFO");
    v28 = fst::LogMessage::LogMessage((fst *)v54, (uint64_t)v55);
    v29 = (_QWORD *)fst::cerr(v28);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)"AutoQueue: using LIFO discipline", 32);
LABEL_18:
    fst::LogMessage::~LogMessage((fst::LogMessage *)v54);
    if (SHIBYTE(v56) < 0)
    {
      v23 = (void *)v55[0];
LABEL_49:
      operator delete(v23);
    }
    return a1;
  }
  v58 = 0;
  v55[0] = (uint64_t)v5;
  v55[1] = 0;
  v56 = 0;
  v57 = &v58;
  fst::DfsVisit<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>,fst::SccVisitor<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>,fst::AnyArcFilter<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>(a2, v55, 0);
  v7 = *(int **)(a1 + 48);
  v8 = *(int **)(a1 + 56);
  if (v7 != v8)
  {
    v9 = v7 + 1;
    if (v7 + 1 != v8)
    {
      v10 = *v7;
      v11 = v7 + 1;
      do
      {
        v13 = *v11++;
        v12 = v13;
        v14 = v10 < v13;
        if (v10 <= v13)
          v10 = v12;
        if (v14)
          v7 = v9;
        v9 = v11;
      }
      while (v11 != v8);
    }
  }
  v15 = *v7;
  v16 = *v7 + 1;
  std::vector<fst::QueueType>::vector(v54, v16);
  v53 = 0;
  fst::AutoQueue<int>::SccQueueType<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>,fst::AnyArcFilter<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>,fst::NaturalLess<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)1>>>(a2, v5, (uint64_t)v54, 0, &v53, (_BYTE *)&v53 + 1);
  if (HIBYTE(v53))
  {
    v17 = operator new();
    *(_DWORD *)(v17 + 8) = 2;
    *(_BYTE *)(v17 + 12) = 0;
    *(_OWORD *)(v17 + 16) = 0u;
    *(_OWORD *)(v17 + 32) = 0u;
    *(_OWORD *)(v17 + 48) = 0u;
    *(_QWORD *)v17 = &unk_1E5D27B60;
    *(_QWORD *)(a1 + 16) = v17;
    if (FLAGS_v < 2)
      goto LABEL_47;
    std::string::basic_string[abi:ne180100]<0>(__p, "INFO");
    v18 = fst::LogMessage::LogMessage((fst *)&v52, (uint64_t)__p);
    v19 = (_QWORD *)fst::cerr(v18);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"AutoQueue: using LIFO discipline", 32);
LABEL_27:
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v52);
    if (v51 < 0)
      operator delete(__p[0]);
LABEL_47:
    v23 = v54[0];
    if (v54[0])
    {
      v54[1] = v54[0];
      goto LABEL_49;
    }
    return a1;
  }
  if ((_BYTE)v53)
  {
    v30 = operator new();
    fst::TopOrderQueue<int>::TopOrderQueue(v30, (uint64_t)v5);
    *(_QWORD *)(a1 + 16) = v30;
    if (FLAGS_v < 2)
      goto LABEL_47;
    std::string::basic_string[abi:ne180100]<0>(__p, "INFO");
    v31 = fst::LogMessage::LogMessage((fst *)&v52, (uint64_t)__p);
    v32 = (_QWORD *)fst::cerr(v31);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)"AutoQueue: using top-order discipline", 37);
    goto LABEL_27;
  }
  if (FLAGS_v >= 2)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "INFO");
    v33 = fst::LogMessage::LogMessage((fst *)&v52, (uint64_t)__p);
    v34 = (_QWORD *)fst::cerr(v33);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)"AutoQueue: using SCC meta-discipline", 36);
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v52);
    if (v51 < 0)
      operator delete(__p[0]);
  }
  std::vector<fst::QueueBase<int> *,std::allocator<fst::QueueBase<int> *>>::resize((uint64_t)v4, v16);
  if (v15 < 0)
  {
LABEL_46:
    v48 = operator new();
    *(_DWORD *)(v48 + 8) = 6;
    *(_BYTE *)(v48 + 12) = 0;
    *(_QWORD *)v48 = &unk_1E5D22CF0;
    *(_QWORD *)(v48 + 16) = v4;
    *(_QWORD *)(v48 + 24) = v5;
    *(_QWORD *)(v48 + 32) = 0xFFFFFFFF00000000;
    *(_QWORD *)(v48 + 48) = 0;
    *(_QWORD *)(v48 + 56) = 0;
    *(_QWORD *)(v48 + 40) = 0;
    *(_QWORD *)(a1 + 16) = v48;
    goto LABEL_47;
  }
  v35 = 0;
  while (1)
  {
    v36 = *((_DWORD *)v54[0] + v35);
    if (v36)
      break;
    *(_QWORD *)(*v4 + 8 * v35) = 0;
    if (FLAGS_v >= 3)
    {
      std::string::basic_string[abi:ne180100]<0>(__p, "INFO");
      v45 = fst::LogMessage::LogMessage((fst *)&v52, (uint64_t)__p);
      v46 = (_QWORD *)fst::cerr(v45);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v46, (uint64_t)"AutoQueue: SCC #", 16);
      v47 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v47, (uint64_t)": using trivial discipline", 26);
LABEL_43:
      fst::LogMessage::~LogMessage((fst::LogMessage *)&v52);
      if (v51 < 0)
        operator delete(__p[0]);
    }
LABEL_45:
    if (v16 == ++v35)
      goto LABEL_46;
  }
  if (v36 == 2)
  {
    v41 = operator new();
    *(_DWORD *)(v41 + 8) = 2;
    *(_BYTE *)(v41 + 12) = 0;
    *(_OWORD *)(v41 + 16) = 0u;
    *(_OWORD *)(v41 + 32) = 0u;
    *(_OWORD *)(v41 + 48) = 0u;
    *(_QWORD *)v41 = &unk_1E5D27B60;
    *(_QWORD *)(*v4 + 8 * v35) = v41;
    if (FLAGS_v >= 3)
    {
      std::string::basic_string[abi:ne180100]<0>(__p, "INFO");
      v42 = fst::LogMessage::LogMessage((fst *)&v52, (uint64_t)__p);
      v43 = (_QWORD *)fst::cerr(v42);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"AutoQueue: SCC #", 16);
      v44 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v44, (uint64_t)": using LIFO disciplle", 22);
      goto LABEL_43;
    }
    goto LABEL_45;
  }
  if (v36 != 3)
  {
    v37 = operator new();
    *(_DWORD *)(v37 + 8) = 1;
    *(_BYTE *)(v37 + 12) = 0;
    *(_OWORD *)(v37 + 16) = 0u;
    *(_OWORD *)(v37 + 32) = 0u;
    *(_OWORD *)(v37 + 48) = 0u;
    *(_QWORD *)v37 = &unk_1E5D23A28;
    *(_QWORD *)(*v4 + 8 * v35) = v37;
    if (FLAGS_v >= 3)
    {
      std::string::basic_string[abi:ne180100]<0>(__p, "INFO");
      v38 = fst::LogMessage::LogMessage((fst *)&v52, (uint64_t)__p);
      v39 = (_QWORD *)fst::cerr(v38);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v39, (uint64_t)"AutoQueue: SCC #", 16);
      v40 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)": using FIFO disciplle", 22);
      goto LABEL_43;
    }
    goto LABEL_45;
  }
  result = operator new();
  __break(1u);
  return result;
}

void sub_1ADC1B300(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, char a16, char a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  uint64_t v26;
  void **v27;
  void **v28;
  void *v30;
  void *v31;

  if (a14 < 0)
    operator delete(__p);
  if (a18)
    operator delete(a18);
  v30 = *v28;
  if (*v28)
  {
    *(_QWORD *)(v26 + 56) = v30;
    operator delete(v30);
  }
  v31 = *v27;
  if (*v27)
  {
    *(_QWORD *)(v26 + 32) = v31;
    operator delete(v31);
  }
  _Unwind_Resume(exception_object);
}

uint64_t fst::AutoQueue<int>::SccQueueType<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>,fst::AnyArcFilter<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>,fst::NaturalLess<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)1>>>(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4, _BYTE *a5, _BYTE *a6)
{
  uint64_t v11;
  unint64_t v12;
  uint64_t result;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _DWORD *v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t *v27;
  uint64_t *v28;
  BOOL v29;
  _BOOL4 v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  uint64_t *v38;
  uint64_t *v39;
  BOOL v40;
  _BOOL4 v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  __n128 v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  char v49;
  uint64_t *v50;
  uint64_t *v51;
  BOOL v52;
  _BOOL4 v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  char v60;
  uint64_t *v61;
  uint64_t *v62;
  BOOL v63;
  _BOOL4 v64;
  uint64_t v65;
  uint64_t v66;
  _QWORD v68[3];
  _DWORD *v69;
  unint64_t v70;
  uint64_t v71;
  int v72;
  unsigned int v73;
  float v74;
  float v75;

  *a5 = 1;
  *a6 = 1;
  v11 = *(_QWORD *)(a3 + 8) - *(_QWORD *)a3;
  if (v11)
  {
    v12 = v11 >> 2;
    if (v12 <= 1)
      v12 = 1;
    bzero(*(void **)a3, 4 * v12);
  }
  v73 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 128))(a1, &v71);
  while (1)
  {
    result = v71;
    if (!v71)
    {
      if ((int)v73 >= v72)
        return result;
LABEL_11:
      v15 = v73;
      goto LABEL_12;
    }
    v14 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v71 + 16))(v71);
    result = v71;
    if (v14)
      break;
    if (!v71)
      goto LABEL_11;
    v15 = (*(uint64_t (**)(void))(*(_QWORD *)v71 + 24))();
LABEL_12:
    v70 = 0;
    (*(void (**)(uint64_t, uint64_t, _QWORD *))(*(_QWORD *)a1 + 136))(a1, v15, v68);
    v16 = (int)v15;
    while (1)
    {
      if (!v68[0])
      {
        if (v70 >= v68[2])
          goto LABEL_114;
        goto LABEL_18;
      }
      if ((*(unsigned int (**)(_QWORD))(*(_QWORD *)v68[0] + 24))(v68[0]))
        break;
      if (v68[0])
      {
        v17 = (*(uint64_t (**)(void))(*(_QWORD *)v68[0] + 32))();
        goto LABEL_19;
      }
LABEL_18:
      v17 = v68[1] + 56 * v70;
LABEL_19:
      v18 = *(int *)(*a2 + 4 * v16);
      if ((_DWORD)v18 == *(_DWORD *)(*a2 + 4 * *(int *)(v17 + 48)))
      {
        v19 = *(_DWORD **)a3;
        if (!a4
          || (v20 = fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)1>::One(),
              fst::NaturalLess<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)1>>::operator()(a4, v17 + 8, v20)))
        {
          v21 = 1;
          goto LABEL_65;
        }
        if ((v19[v18] | 2) == 2)
        {
          v22 = fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)1>::Zero();
          v23 = *(_DWORD *)(v17 + 8);
          if (v23)
            v24 = *(_QWORD *)(v17 + 32) + 1;
          else
            v24 = 0;
          if (*(_DWORD *)v22)
            v25 = *(_QWORD *)(v22 + 24) + 1;
          else
            v25 = 0;
          if (v24 != v25)
            goto LABEL_44;
          v26 = 0;
          v27 = (uint64_t *)(v17 + 24);
          v28 = (uint64_t *)(v22 + 16);
          v29 = v23 && v23 == *(_DWORD *)v22;
          v30 = !v29;
          while (1)
          {
            v31 = *v27;
            v32 = *v28;
            if ((v26 & 1) == 0 && v30)
              break;
            if (v31 == v17 + 16)
              goto LABEL_43;
            if (*(_DWORD *)(v31 + 16) != *(_DWORD *)(v32 + 16))
              goto LABEL_44;
            v27 = (uint64_t *)(v31 + 8);
            v28 = (uint64_t *)(v32 + 8);
            v26 = 1;
          }
          if (v23)
            goto LABEL_44;
LABEL_43:
          v75 = 0.0;
          v75 = *(float *)(v17 + 40);
          v74 = 0.0;
          v74 = *(float *)(v22 + 32);
          if (v75 != v74)
          {
LABEL_44:
            v33 = fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)1>::One();
            v34 = *(_DWORD *)(v17 + 8);
            if (v34)
              v35 = *(_QWORD *)(v17 + 32) + 1;
            else
              v35 = 0;
            if (*(_DWORD *)v33)
              v36 = *(_QWORD *)(v33 + 24) + 1;
            else
              v36 = 0;
            if (v35 != v36)
              goto LABEL_64;
            v37 = 0;
            v38 = (uint64_t *)(v17 + 24);
            v39 = (uint64_t *)(v33 + 16);
            v40 = v34 && v34 == *(_DWORD *)v33;
            v41 = !v40;
            while (1)
            {
              v42 = *v38;
              v43 = *v39;
              if ((v37 & 1) == 0 && v41)
                break;
              if (v42 == v17 + 16)
                goto LABEL_63;
              if (*(_DWORD *)(v42 + 16) != *(_DWORD *)(v43 + 16))
                goto LABEL_64;
              v38 = (uint64_t *)(v42 + 8);
              v39 = (uint64_t *)(v43 + 8);
              v37 = 1;
            }
            if (v34)
              goto LABEL_64;
LABEL_63:
            v75 = 0.0;
            v75 = *(float *)(v17 + 40);
            v74 = 0.0;
            v74 = *(float *)(v33 + 32);
            if (v75 != v74)
            {
LABEL_64:
              v21 = 3;
              goto LABEL_65;
            }
          }
          v21 = 2;
LABEL_65:
          v19[v18] = v21;
        }
        *a5 = 0;
      }
      v44 = fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)1>::Zero();
      v46 = *(_DWORD *)(v17 + 8);
      if (v46)
        v47 = *(_QWORD *)(v17 + 32) + 1;
      else
        v47 = 0;
      if (*(_DWORD *)v44)
        v48 = *(_QWORD *)(v44 + 24) + 1;
      else
        v48 = 0;
      if (v47 != v48)
        goto LABEL_87;
      v49 = 0;
      v50 = (uint64_t *)(v17 + 24);
      v51 = (uint64_t *)(v44 + 16);
      v52 = v46 && v46 == *(_DWORD *)v44;
      v53 = !v52;
      while (1)
      {
        v54 = *v50;
        v55 = *v51;
        if ((v49 & 1) == 0 && v53)
          break;
        if (v54 == v17 + 16)
          goto LABEL_86;
        if (*(_DWORD *)(v54 + 16) != *(_DWORD *)(v55 + 16))
          goto LABEL_87;
        v50 = (uint64_t *)(v54 + 8);
        v51 = (uint64_t *)(v55 + 8);
        v49 = 1;
      }
      if (v46)
        goto LABEL_87;
LABEL_86:
      v75 = 0.0;
      v75 = *(float *)(v17 + 40);
      v74 = 0.0;
      v74 = *(float *)(v44 + 32);
      v45.n128_f32[0] = v75;
      if (v75 != v74)
      {
LABEL_87:
        v56 = fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)1>::One();
        v57 = *(_DWORD *)(v17 + 8);
        if (v57)
          v58 = *(_QWORD *)(v17 + 32) + 1;
        else
          v58 = 0;
        if (*(_DWORD *)v56)
          v59 = *(_QWORD *)(v56 + 24) + 1;
        else
          v59 = 0;
        if (v58 != v59)
          goto LABEL_107;
        v60 = 0;
        v61 = (uint64_t *)(v17 + 24);
        v62 = (uint64_t *)(v56 + 16);
        v63 = v57 && v57 == *(_DWORD *)v56;
        v64 = !v63;
        while (1)
        {
          v65 = *v61;
          v66 = *v62;
          if ((v60 & 1) == 0 && v64)
            break;
          if (v65 == v17 + 16)
            goto LABEL_106;
          if (*(_DWORD *)(v65 + 16) != *(_DWORD *)(v66 + 16))
            goto LABEL_107;
          v61 = (uint64_t *)(v65 + 8);
          v62 = (uint64_t *)(v66 + 8);
          v60 = 1;
        }
        if (v57)
          goto LABEL_107;
LABEL_106:
        v75 = 0.0;
        v75 = *(float *)(v17 + 40);
        v74 = 0.0;
        v74 = *(float *)(v56 + 32);
        v45.n128_f32[0] = v75;
        if (v75 != v74)
LABEL_107:
          *a6 = 0;
      }
      if (v68[0])
        (*(void (**)(_QWORD, __n128))(*(_QWORD *)v68[0] + 40))(v68[0], v45);
      else
        ++v70;
    }
    if (v68[0])
    {
      (*(void (**)(void))(*(_QWORD *)v68[0] + 8))();
      goto LABEL_116;
    }
LABEL_114:
    if (v69)
      --*v69;
LABEL_116:
    if (v71)
      (*(void (**)(uint64_t))(*(_QWORD *)v71 + 32))(v71);
    else
      ++v73;
  }
  if (v71)
    return (*(uint64_t (**)(void))(*(_QWORD *)v71 + 8))();
  return result;
}

void sub_1ADC1B94C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  if (a15)
    (*(void (**)(uint64_t))(*(_QWORD *)a15 + 8))(a15);
  _Unwind_Resume(exception_object);
}

uint64_t fst::TopOrderQueue<int>::TopOrderQueue<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>,fst::AnyArcFilter<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>(uint64_t a1, uint64_t a2)
{
  std::vector<int> *v3;
  fst *v4;
  _QWORD *v5;
  void *__p[2];
  char v8;
  char v9;
  _QWORD v10[3];
  char v11;

  *(_DWORD *)(a1 + 8) = 4;
  *(_BYTE *)(a1 + 12) = 0;
  *(_QWORD *)a1 = &unk_1E5D1CC68;
  *(_QWORD *)(a1 + 16) = 0xFFFFFFFF00000000;
  *(_OWORD *)(a1 + 24) = 0u;
  v3 = (std::vector<int> *)(a1 + 48);
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  v11 = 0;
  v10[0] = a1 + 24;
  v10[1] = &v11;
  fst::DfsVisit<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>,fst::TopOrderVisitor<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>,fst::AnyArcFilter<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>(a2, (uint64_t)v10, 0);
  if (!v11)
  {
    if (FLAGS_fst_error_fatal)
      std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
    else
      std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
    v4 = fst::LogMessage::LogMessage((fst *)&v9, (uint64_t)__p);
    v5 = (_QWORD *)fst::cerr(v4);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"TopOrderQueue: fst is not acyclic.", 34);
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v9);
    if (v8 < 0)
      operator delete(__p[0]);
    *(_BYTE *)(a1 + 12) = 1;
  }
  std::vector<int>::resize(v3, (uint64_t)(*(_QWORD *)(a1 + 32) - *(_QWORD *)(a1 + 24)) >> 2, &fst::kNoStateId);
  return a1;
}

void sub_1ADC1BAE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  uint64_t v18;
  void **v19;
  void **v20;
  void *v22;
  void *v23;

  fst::LogMessage::~LogMessage((fst::LogMessage *)&a18);
  if (a14 < 0)
    operator delete(__p);
  v22 = *v19;
  if (*v19)
  {
    *(_QWORD *)(v18 + 56) = v22;
    operator delete(v22);
  }
  v23 = *v20;
  if (*v20)
  {
    *(_QWORD *)(v18 + 32) = v23;
    operator delete(v23);
  }
  _Unwind_Resume(a1);
}

void fst::DfsVisit<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>,fst::TopOrderVisitor<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>,fst::AnyArcFilter<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>(uint64_t a1, uint64_t a2, char a3)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  _QWORD *v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  std::vector<char>::pointer begin;
  unint64_t v20;
  uint64_t v21;
  _DWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  int v33;
  std::vector<char>::pointer end;
  char *v35;
  std::vector<char>::pointer v36;
  int64_t v37;
  int64_t v38;
  unint64_t v39;
  size_t v40;
  char *v41;
  char *v42;
  char *v43;
  char *v44;
  char v45;
  char v46;
  uint64_t v47;
  int v48;
  std::vector<char>::value_type v49[8];
  std::vector<char>::value_type __x[8];
  int v51;
  int v52;
  void *v53;
  _QWORD v54[6];
  _QWORD *v55;
  _OWORD v56[2];
  __int128 v57;
  std::vector<char> v58;

  v6 = (_QWORD *)operator new();
  v6[1] = 0;
  v6[2] = 0;
  *v6 = 0;
  *(_QWORD *)(a2 + 16) = v6;
  **(_BYTE **)(a2 + 8) = 1;
  v48 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  if (v48 == -1)
  {
    fst::TopOrderVisitor<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>::FinishVisit((char ***)a2);
    return;
  }
  memset(&v58, 0, sizeof(v58));
  v57 = 0u;
  memset(v56, 0, sizeof(v56));
  fst::MemoryPool<fst::DfsState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>::MemoryPool(&v53, 64);
  v47 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 64))(a1, 1, 0);
  if (v47)
    v7 = fst::CountStates<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>(a1);
  else
    v7 = (v48 + 1);
  __x[0] = 0;
  if ((std::vector<char>::pointer)(int)v7 <= (std::vector<char>::pointer)(v58.__end_ - v58.__begin_))
  {
    if ((std::vector<char>::pointer)(int)v7 < (std::vector<char>::pointer)(v58.__end_ - v58.__begin_))
      v58.__end_ = &v58.__begin_[(int)v7];
  }
  else
  {
    std::vector<char>::__append(&v58, (int)v7 - (unint64_t)(v58.__end_ - v58.__begin_), __x);
  }
  v52 = 0;
  (*(void (**)(uint64_t, std::vector<char>::value_type *))(*(_QWORD *)a1 + 128))(a1, __x);
  if (v48 >= (int)v7)
    goto LABEL_102;
  v8 = v48;
  v46 = a3;
  do
  {
    v58.__begin_[(int)v8] = 1;
    v9 = (uint64_t)v55;
    if (v55)
    {
      v55 = (_QWORD *)v55[6];
    }
    else
    {
      v9 = fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::Link>::Allocate(v54, 1);
      *(_QWORD *)(v9 + 48) = 0;
    }
    *(_DWORD *)v9 = v8;
    *(_QWORD *)(v9 + 40) = 0;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 136))(a1, v8, v9 + 8);
    *(_QWORD *)v49 = v9;
    std::deque<fst::DfsState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>> *,std::allocator<fst::DfsState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>> *>>::push_back(v56, v49);
    v10 = *((_QWORD *)&v57 + 1);
    if (!*((_QWORD *)&v57 + 1))
    {
      v11 = 1;
      if ((a3 & 1) != 0)
        break;
      goto LABEL_62;
    }
    v11 = 1;
    do
    {
      v12 = *(_QWORD **)(*(_QWORD *)(*((_QWORD *)&v56[0] + 1)
                                   + (((unint64_t)(v10 + v57 - 1) >> 6) & 0x3FFFFFFFFFFFFF8))
                       + 8 * ((v10 + v57 - 1) & 0x1FF));
      v13 = *(int *)v12;
      v14 = v58.__end_ - v58.__begin_;
      if (v58.__end_ - v58.__begin_ <= v13)
      {
        v7 = v13 + 1;
        v49[0] = 0;
        if (v13 + 1 <= v14)
        {
          if (v13 + 1 < v14)
            v58.__end_ = &v58.__begin_[v7];
        }
        else
        {
          std::vector<char>::__append(&v58, v13 + 1 - v14, v49);
        }
      }
      if ((v11 & 1) != 0)
      {
        v15 = v12[1];
        if (v15)
        {
          if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v15 + 24))(v15))
          {
            v16 = v12[1];
            if (v16)
              v17 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v16 + 32))(v16);
            else
LABEL_28:
              v17 = v12[2] + 56 * v12[5];
            v18 = *(int *)(v17 + 48);
            begin = v58.__begin_;
            v20 = v58.__end_ - v58.__begin_;
            if (v58.__end_ - v58.__begin_ <= v18)
            {
              v7 = (v18 + 1);
              v49[0] = 0;
              if ((int)v7 <= v20)
              {
                if ((int)v7 < v20)
                  v58.__end_ = &v58.__begin_[(int)v7];
              }
              else
              {
                std::vector<char>::__append(&v58, (int)v7 - v20, v49);
                v18 = *(int *)(v17 + 48);
                begin = v58.__begin_;
              }
            }
            v26 = begin[v18];
            if (v26 == 1)
            {
              **(_BYTE **)(a2 + 8) = 0;
              v28 = v12[1];
              if (v28)
              {
                (*(void (**)(uint64_t))(*(_QWORD *)v28 + 40))(v28);
                v11 = 0;
              }
              else
              {
                v11 = 0;
                ++v12[5];
              }
            }
            else
            {
              if (v26 == 2)
              {
                v27 = v12[1];
                if (v27)
                  (*(void (**)(uint64_t))(*(_QWORD *)v27 + 40))(v27);
                else
                  ++v12[5];
              }
              else
              {
                begin[v18] = 1;
                v29 = (uint64_t)v55;
                if (v55)
                {
                  v55 = (_QWORD *)v55[6];
                }
                else
                {
                  v29 = fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::Link>::Allocate(v54, 1);
                  *(_QWORD *)(v29 + 48) = 0;
                }
                *(_DWORD *)v29 = *(_DWORD *)(v17 + 48);
                *(_QWORD *)(v29 + 40) = 0;
                (*(void (**)(uint64_t))(*(_QWORD *)a1 + 136))(a1);
                *(_QWORD *)v49 = v29;
                std::deque<fst::DfsState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>> *,std::allocator<fst::DfsState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>> *>>::push_back(v56, v49);
              }
              v11 = 1;
            }
            goto LABEL_58;
          }
        }
        else if (v12[5] < v12[3])
        {
          goto LABEL_28;
        }
      }
      v58.__begin_[v13] = 2;
      v21 = v12[1];
      if (v21)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
      }
      else
      {
        v22 = (_DWORD *)v12[4];
        if (v22)
          --*v22;
      }
      v12[6] = v55;
      v55 = v12;
      --*((_QWORD *)&v57 + 1);
      std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::__maybe_remove_back_spare[abi:ne180100](v56, 1);
      if (*((_QWORD *)&v57 + 1))
      {
        v23 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)&v56[0] + 1)
                                    + (((unint64_t)(*((_QWORD *)&v57 + 1) + v57 - 1) >> 6) & 0x3FFFFFFFFFFFFF8))
                        + 8 * ((*((_QWORD *)&v57 + 1) + v57 - 1) & 0x1FF));
        v24 = *(_QWORD *)(v23 + 8);
        if (v24)
          (*(void (**)(uint64_t))(*(_QWORD *)v24 + 32))(v24);
        fst::TopOrderVisitor<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>::FinishState(a2, v13);
        v25 = *(_QWORD *)(v23 + 8);
        if (v25)
          (*(void (**)(uint64_t))(*(_QWORD *)v25 + 40))(v25);
        else
          ++*(_QWORD *)(v23 + 40);
      }
      else
      {
        fst::TopOrderVisitor<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>::FinishState(a2, v13);
      }
LABEL_58:
      v10 = *((_QWORD *)&v57 + 1);
    }
    while (*((_QWORD *)&v57 + 1));
    if ((a3 & 1) != 0)
      break;
LABEL_62:
    if ((_DWORD)v8 == v48)
      v8 = 0;
    else
      v8 = (v8 + 1);
    if ((int)v8 < (int)v7)
    {
      v30 = &v58.__begin_[(int)v8];
      v31 = (int)v7 - (uint64_t)(int)v8;
      while (*v30++)
      {
        v8 = (v8 + 1);
        if (!--v31)
        {
          v8 = v7;
          break;
        }
      }
    }
    if (v47 || (_DWORD)v8 != (_DWORD)v7)
      continue;
LABEL_72:
    if (*(_QWORD *)__x)
    {
      if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)__x + 16))(*(_QWORD *)__x) & 1) != 0)
        continue;
      if (*(_QWORD *)__x)
      {
        v33 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)__x + 24))(*(_QWORD *)__x);
        goto LABEL_78;
      }
    }
    else if (v52 >= v51)
    {
      continue;
    }
    v33 = v52;
LABEL_78:
    if (v33 != (_DWORD)v7)
    {
      if (*(_QWORD *)__x)
        (*(void (**)(_QWORD))(**(_QWORD **)__x + 32))(*(_QWORD *)__x);
      else
        ++v52;
      goto LABEL_72;
    }
    end = v58.__end_;
    if (v58.__end_ >= v58.__end_cap_.__value_)
    {
      v36 = v58.__begin_;
      v37 = v58.__end_ - v58.__begin_;
      v38 = v58.__end_ - v58.__begin_ + 1;
      if (v38 < 0)
        std::vector<int>::__throw_length_error[abi:ne180100]();
      v39 = v58.__end_cap_.__value_ - v58.__begin_;
      if (2 * (v58.__end_cap_.__value_ - v58.__begin_) > (unint64_t)v38)
        v38 = 2 * v39;
      if (v39 >= 0x3FFFFFFFFFFFFFFFLL)
        v40 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v40 = v38;
      if (v40)
        v41 = (char *)operator new(v40);
      else
        v41 = 0;
      v42 = &v41[v37];
      v43 = &v41[v37];
      *v43 = 0;
      v35 = v43 + 1;
      if (end != v36)
      {
        v44 = &end[~(unint64_t)v36];
        do
        {
          v45 = *--end;
          (v44--)[(_QWORD)v41] = v45;
        }
        while (end != v36);
        end = v58.__begin_;
        v42 = v41;
      }
      v58.__begin_ = v42;
      v58.__end_ = v35;
      v58.__end_cap_.__value_ = &v41[v40];
      if (end)
        operator delete(end);
    }
    else
    {
      *v58.__end_ = 0;
      v35 = end + 1;
    }
    v58.__end_ = v35;
    v7 = (v7 + 1);
    a3 = v46;
  }
  while ((v11 & 1) != 0 && (int)v8 < (int)v7);
LABEL_102:
  fst::TopOrderVisitor<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>::FinishVisit((char ***)a2);
  if (*(_QWORD *)__x)
    (*(void (**)(_QWORD))(**(_QWORD **)__x + 8))(*(_QWORD *)__x);
  v53 = &unk_1E5D19850;
  fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>::Link>::~MemoryArena(v54);
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v53);
  std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100](v56);
  if (v58.__begin_)
  {
    v58.__end_ = v58.__begin_;
    operator delete(v58.__begin_);
  }
}

void sub_1ADC1C234(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  void *v11;
  void *v12;
  va_list va;
  uint64_t v14;
  va_list va1;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  va_list va2;

  va_start(va2, a9);
  va_start(va1, a9);
  va_start(va, a9);
  va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v14 = va_arg(va2, _QWORD);
  v16 = va_arg(va2, _QWORD);
  v17 = va_arg(va2, _QWORD);
  v18 = va_arg(va2, _QWORD);
  v19 = va_arg(va2, _QWORD);
  v20 = va_arg(va2, _QWORD);
  v21 = va_arg(va2, _QWORD);
  v12 = &unk_1E5D19850;
  fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>::Link>::~MemoryArena((uint64_t *)va1);
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)va);
  std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100]((uint64_t *)va2);
  v11 = *(void **)(v9 - 112);
  if (v11)
  {
    *(_QWORD *)(v9 - 104) = v11;
    operator delete(v11);
  }
  _Unwind_Resume(a1);
}

uint64_t fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)1>::Type()
{
  unsigned __int8 v0;
  _QWORD *v2;

  if ((v0 & 1) == 0
  {
    v2 = (_QWORD *)operator new();
    std::string::basic_string[abi:ne180100]<0>(v2, "right_gallic");
    fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)1>::Type(void)::type = (uint64_t)v2;
  }
  return fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)1>::Type(void)::type;
}

void sub_1ADC1C350(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x1012C40EC159624);
  _Unwind_Resume(a1);
}

BOOL fst::NaturalLess<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)1>>::operator()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  float v5;
  float v6;
  float v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  int v14;
  uint64_t v15;
  float v16;
  uint64_t v17;
  char v18;
  uint64_t *v19;
  BOOL v20;
  int v21;
  int v22;
  uint64_t v23;
  _BOOL8 v24;
  int v26;
  _QWORD v27[3];
  float v28;
  float v29;
  _QWORD v30[3];
  float v31;

  fst::Plus<int>(a2, a3, (uint64_t)&v29);
  v5 = *(float *)(a2 + 32);
  v6 = NAN;
  if (v5 != -INFINITY)
  {
    v7 = *(float *)(a3 + 32);
    v6 = NAN;
    if (v7 != -INFINITY)
    {
      if (v5 >= v7)
        v6 = *(float *)(a3 + 32);
      else
        v6 = *(float *)(a2 + 32);
    }
  }
  fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)1>::GallicWeight((uint64_t)&v26, (int *)&v29, v6);
  std::__list_imp<char *>::clear(v30);
  if (v26)
    v8 = v27[2] + 1;
  else
    v8 = 0;
  v9 = *(_DWORD *)a2;
  if (*(_DWORD *)a2)
    v10 = *(_QWORD *)(a2 + 24) + 1;
  else
    v10 = 0;
  if (v8 != v10)
    goto LABEL_41;
  v11 = v27[1];
  v12 = *(_QWORD *)(a2 + 16);
  if (v26)
    v13 = v26 == v9;
  else
    v13 = 0;
  v14 = !v13;
  v15 = *(_QWORD *)(a2 + 16);
  if (v14 != 1)
  {
    while ((_QWORD *)v11 != v27)
    {
      if (*(_DWORD *)(v11 + 16) != *(_DWORD *)(v15 + 16))
        goto LABEL_41;
      v11 = *(_QWORD *)(v11 + 8);
      v15 = *(_QWORD *)(v15 + 8);
    }
  }
  else if (v26)
  {
LABEL_41:
    v24 = 0;
    goto LABEL_42;
  }
  v29 = v28;
  v31 = 0.0;
  v16 = *(float *)(a2 + 32);
  v31 = v16;
  if (v28 != v16)
    goto LABEL_41;
  if (*(_DWORD *)a3)
    v17 = *(_QWORD *)(a3 + 24) + 1;
  else
    v17 = 0;
  if (v8 == v17)
  {
    v18 = 0;
    v19 = (uint64_t *)(a3 + 16);
    if (v9)
      v20 = v9 == *(_DWORD *)a3;
    else
      v20 = 0;
    v21 = !v20;
    v22 = v21 ^ 1;
    while (1)
    {
      v23 = *v19;
      if ((v18 & 1) == 0 && !v22)
        break;
      if (v12 == a2 + 8)
        goto LABEL_45;
      if (*(_DWORD *)(v12 + 16) != *(_DWORD *)(v23 + 16))
        goto LABEL_44;
      v12 = *(_QWORD *)(v12 + 8);
      v19 = (uint64_t *)(v23 + 8);
      v18 = 1;
    }
    if (v9)
      goto LABEL_44;
LABEL_45:
    v29 = v16;
    v31 = 0.0;
    v31 = *(float *)(a3 + 32);
    v24 = v16 != v31;
  }
  else
  {
LABEL_44:
    v24 = 1;
  }
LABEL_42:
  std::__list_imp<char *>::clear(v27);
  return v24;
}

void sub_1ADC1C588(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__list_imp<char *>::clear((_QWORD *)(v1 + 8));
  _Unwind_Resume(a1);
}

void fst::ShortestDistanceState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>,fst::AutoQueue<int>,fst::AnyArcFilter<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>::ShortestDistance(_QWORD *a1, int a2)
{
  fst *v4;
  _QWORD *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t *v14;
  uint64_t *i;
  _DWORD *v16;
  _DWORD *v17;
  unint64_t v18;
  uint64_t v19;
  _DWORD *v20;
  _DWORD *v21;
  unint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  unint64_t v26;
  _QWORD *v27;
  char *v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  char *v32;
  char *v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  _QWORD *v42;
  _QWORD *v43;
  int v44;
  uint64_t *v45;
  uint64_t *v46;
  unint64_t j;
  _DWORD *v48;
  _DWORD *v49;
  unint64_t v50;
  uint64_t v51;
  _DWORD *v52;
  _DWORD *v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char v59;
  uint64_t v60;
  uint64_t *v61;
  BOOL v62;
  _BOOL4 v63;
  uint64_t v64;
  float v65;
  float v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t *v73;
  uint64_t *v74;
  unint64_t k;
  _DWORD *v76;
  _DWORD *v77;
  uint64_t v78;
  uint64_t v79;
  _DWORD *v80;
  _DWORD *v81;
  unint64_t v82;
  uint64_t v83;
  char *v84;
  char *v85;
  unint64_t v86;
  uint64_t v87;
  char *v88;
  unint64_t v89;
  uint64_t v90;
  unint64_t v91;
  char *v92;
  char *v93;
  int v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  unint64_t v101;
  uint64_t v102;
  uint64_t v103;
  float v104;
  float v105;
  uint64_t v107;
  float v108;
  float v109;
  int v110;
  uint64_t v111;
  uint64_t v112;
  char v113;
  float v114;
  uint64_t *v115;
  uint64_t v116;
  BOOL v117;
  int v118;
  uint64_t v119;
  float v120;
  float v121;
  uint64_t v122;
  float v123;
  float v124;
  uint64_t v125;
  float v126;
  float v127;
  float v128;
  float v129;
  char v131;
  _QWORD *v132;
  _QWORD *v133;
  uint64_t v134;
  int v135;
  uint64_t v136;
  uint64_t v137;
  _BYTE *v138;
  int v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  float v143;
  float v144;
  _QWORD v145[3];
  float v146;
  _QWORD v147[3];
  _DWORD *v148;
  unint64_t v149;
  void *__p;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  float v154;
  int v155;
  _QWORD v156[4];

  if ((*(unsigned int (**)(_QWORD))(*(_QWORD *)*a1 + 24))(*a1) == -1)
  {
    if (!(*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(*(_QWORD *)*a1 + 64))(*a1, 4, 0))
      return;
    goto LABEL_207;
  }
  if (*((_BYTE *)a1 + 32))
  {
    if (FLAGS_fst_error_fatal)
      std::string::basic_string[abi:ne180100]<0>(&__p, "FATAL");
    else
      std::string::basic_string[abi:ne180100]<0>(&__p, "ERROR");
    v4 = fst::LogMessage::LogMessage((fst *)v147, (uint64_t)&__p);
    v5 = (_QWORD *)fst::cerr(v4);
    v132 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"ShortestDistance: first_path option disallowed when ", 52);
    v133 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v132, (uint64_t)"Weight does not have the path property: ", 40);
    v134 = fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)1>::Type();
    v135 = *(char *)(v134 + 23);
    if (v135 >= 0)
      v136 = v134;
    else
      v136 = *(_QWORD *)v134;
    if (v135 >= 0)
      v137 = *(unsigned __int8 *)(v134 + 23);
    else
      v137 = *(_QWORD *)(v134 + 8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v133, v136, v137);
    fst::LogMessage::~LogMessage((fst::LogMessage *)v147);
    if (SHIBYTE(v152) < 0)
      operator delete(__p);
LABEL_207:
    v138 = (char *)a1 + 116;
    goto LABEL_208;
  }
  (*(void (**)(_QWORD))(**(_QWORD **)(a1[2] + 16) + 56))(*(_QWORD *)(a1[2] + 16));
  if (!*((_BYTE *)a1 + 33))
  {
    v6 = (uint64_t *)a1[1];
    v8 = *v6;
    v7 = v6[1];
    if (v7 != *v6)
    {
      do
      {
        v9 = v7 - 40;
        std::__list_imp<char *>::clear((_QWORD *)(v7 - 32));
        v7 = v9;
      }
      while (v9 != v8);
    }
    v6[1] = v8;
    v11 = a1[5];
    v10 = a1[6];
    if (v10 != v11)
    {
      do
      {
        v12 = v10 - 40;
        std::__list_imp<char *>::clear((_QWORD *)(v10 - 32));
        v10 = v12;
      }
      while (v12 != v11);
    }
    a1[6] = v11;
    a1[9] = 0;
  }
  if (a2 == -1)
    a2 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a1 + 24))(*a1);
  v13 = a2;
  v14 = (uint64_t *)a1[1];
  for (i = v14 + 1; 0xCCCCCCCCCCCCCCCDLL * ((v14[1] - *v14) >> 3) <= a2; i = v14 + 1)
  {
    v16 = (_DWORD *)fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)1>::Zero();
    v17 = v16;
    v18 = v14[1];
    if (v18 >= v14[2])
    {
      v19 = std::vector<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)1>>::__push_back_slow_path<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)1> const&>(v14, v16);
    }
    else
    {
      *(_DWORD *)v18 = *v16;
      std::list<int>::list((_QWORD *)(v18 + 8), (uint64_t)(v16 + 2));
      *(_DWORD *)(v18 + 32) = v17[8];
      v19 = v18 + 40;
      *i = v18 + 40;
    }
    *i = v19;
    v20 = (_DWORD *)fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)1>::Zero();
    v21 = v20;
    v22 = a1[6];
    if (v22 >= a1[7])
    {
      v23 = std::vector<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)1>>::__push_back_slow_path<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)1> const&>(a1 + 5, v20);
    }
    else
    {
      *(_DWORD *)v22 = *v20;
      std::list<int>::list((_QWORD *)(v22 + 8), (uint64_t)(v20 + 2));
      *(_DWORD *)(v22 + 32) = v21[8];
      v23 = v22 + 40;
      a1[6] = v22 + 40;
    }
    a1[6] = v23;
    LOBYTE(__p) = 0;
    std::vector<BOOL>::push_back((uint64_t)(a1 + 8), &__p);
    v14 = (uint64_t *)a1[1];
  }
  if (*((_BYTE *)a1 + 33))
  {
    v24 = (char *)a1[11];
    v25 = (char *)a1[12];
    v26 = (v25 - v24) >> 2;
    if (v26 <= a2)
    {
      v27 = a1 + 13;
      do
      {
        if ((unint64_t)v25 >= *v27)
        {
          v29 = v26 + 1;
          if ((v26 + 1) >> 62)
            std::vector<int>::__throw_length_error[abi:ne180100]();
          v30 = *v27 - (_QWORD)v24;
          if (v30 >> 1 > v29)
            v29 = v30 >> 1;
          if ((unint64_t)v30 >= 0x7FFFFFFFFFFFFFFCLL)
            v31 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v31 = v29;
          if (v31)
          {
            v32 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)(a1 + 13), v31);
            v24 = (char *)a1[11];
            v25 = (char *)a1[12];
          }
          else
          {
            v32 = 0;
          }
          v33 = &v32[4 * v26];
          *(_DWORD *)v33 = -1;
          v28 = v33 + 4;
          while (v25 != v24)
          {
            v34 = *((_DWORD *)v25 - 1);
            v25 -= 4;
            *((_DWORD *)v33 - 1) = v34;
            v33 -= 4;
          }
          a1[11] = v33;
          a1[12] = v28;
          a1[13] = &v32[4 * v31];
          if (v24)
          {
            operator delete(v24);
            v24 = (char *)a1[11];
          }
          else
          {
            v24 = v33;
          }
        }
        else
        {
          *(_DWORD *)v25 = -1;
          v28 = v25 + 4;
        }
        a1[12] = v28;
        v26 = (v28 - v24) >> 2;
        v25 = v28;
      }
      while (v26 <= a2);
    }
    *(_DWORD *)&v24[4 * a2] = *((_DWORD *)a1 + 28);
  }
  v35 = fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)1>::One();
  v36 = v35;
  v37 = *(_QWORD *)a1[1] + 40 * (int)v13;
  *(_DWORD *)v37 = *(_DWORD *)v35;
  if (v37 != v35)
    std::list<int>::__assign_with_sentinel[abi:ne180100]<std::__list_const_iterator<int,void *>,std::__list_const_iterator<int,void *>>((uint64_t *)(v37 + 8), *(_QWORD *)(v35 + 16), v35 + 8);
  *(_DWORD *)(v37 + 32) = *(_DWORD *)(v36 + 32);
  v38 = fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)1>::One();
  v39 = v38;
  v40 = a1 + 5;
  v41 = a1[5] + 40 * (int)v13;
  *(_DWORD *)v41 = *(_DWORD *)v38;
  if (v41 != v38)
    std::list<int>::__assign_with_sentinel[abi:ne180100]<std::__list_const_iterator<int,void *>,std::__list_const_iterator<int,void *>>((uint64_t *)(v41 + 8), *(_QWORD *)(v38 + 16), v38 + 8);
  *(_DWORD *)(v41 + 32) = *(_DWORD *)(v39 + 32);
  v42 = a1 + 8;
  *(_QWORD *)(a1[8] + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
  (*(void (**)(_QWORD, unint64_t))(**(_QWORD **)(a1[2] + 16) + 24))(*(_QWORD *)(a1[2] + 16), v13);
  v43 = a1 + 13;
  v138 = (char *)a1 + 116;
  do
  {
    if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1[2] + 16) + 48))(*(_QWORD *)(a1[2] + 16)) & 1) != 0)
      goto LABEL_196;
    v44 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1[2] + 16) + 16))(*(_QWORD *)(a1[2] + 16));
    (*(void (**)(_QWORD))(**(_QWORD **)(a1[2] + 16) + 32))(*(_QWORD *)(a1[2] + 16));
    v45 = (uint64_t *)a1[1];
    v46 = v45 + 1;
    for (j = v44; 0xCCCCCCCCCCCCCCCDLL * ((v45[1] - *v45) >> 3) <= j; v46 = v45 + 1)
    {
      v48 = (_DWORD *)fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)1>::Zero();
      v49 = v48;
      v50 = v45[1];
      if (v50 >= v45[2])
      {
        v51 = std::vector<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)1>>::__push_back_slow_path<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)1> const&>(v45, v48);
      }
      else
      {
        *(_DWORD *)v50 = *v48;
        std::list<int>::list((_QWORD *)(v50 + 8), (uint64_t)(v48 + 2));
        *(_DWORD *)(v50 + 32) = v49[8];
        v51 = v50 + 40;
        *v46 = v50 + 40;
      }
      *v46 = v51;
      v52 = (_DWORD *)fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)1>::Zero();
      v53 = v52;
      v54 = a1[6];
      if (v54 >= a1[7])
      {
        v55 = std::vector<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)1>>::__push_back_slow_path<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)1> const&>(a1 + 5, v52);
      }
      else
      {
        *(_DWORD *)v54 = *v52;
        std::list<int>::list((_QWORD *)(v54 + 8), (uint64_t)(v52 + 2));
        *(_DWORD *)(v54 + 32) = v53[8];
        v55 = v54 + 40;
        a1[6] = v54 + 40;
      }
      a1[6] = v55;
      LOBYTE(__p) = 0;
      std::vector<BOOL>::push_back((uint64_t)(a1 + 8), &__p);
      v45 = (uint64_t *)a1[1];
    }
    if (*((_BYTE *)a1 + 32))
    {
      (*(void (**)(void **__return_ptr, _QWORD, unint64_t))(*(_QWORD *)*a1 + 32))(&__p, *a1, j);
      v56 = fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)1>::Zero();
      if ((_DWORD)__p)
        v57 = v153 + 1;
      else
        v57 = 0;
      if (*(_DWORD *)v56)
        v58 = *(_QWORD *)(v56 + 24) + 1;
      else
        v58 = 0;
      if (v57 != v58)
        goto LABEL_195;
      v59 = 0;
      v60 = v152;
      v61 = (uint64_t *)(v56 + 16);
      v62 = (_DWORD)__p && (_DWORD)__p == *(_DWORD *)v56;
      v63 = !v62;
      while (1)
      {
        v64 = *v61;
        if ((v59 & 1) == 0 && v63)
          break;
        if ((uint64_t *)v60 == &v151)
          goto LABEL_79;
        if (*(_DWORD *)(v60 + 16) != *(_DWORD *)(v64 + 16))
          goto LABEL_195;
        v60 = *(_QWORD *)(v60 + 8);
        v61 = (uint64_t *)(v64 + 8);
        v59 = 1;
      }
      if ((_DWORD)__p)
      {
LABEL_195:
        std::__list_imp<char *>::clear(&v151);
LABEL_196:
        ++*((_DWORD *)a1 + 28);
        if (!(*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(*(_QWORD *)*a1 + 64))(*a1, 4, 0))
          return;
LABEL_208:
        *v138 = 1;
        return;
      }
LABEL_79:
      *(float *)v147 = v154;
      v144 = 0.0;
      v144 = *(float *)(v56 + 32);
      v65 = v154;
      v66 = v144;
      std::__list_imp<char *>::clear(&v151);
      if (v65 != v66)
        goto LABEL_196;
    }
    *(_QWORD *)(*v42 + ((j >> 3) & 0x1FFFFFFFFFFFFFF8)) &= ~(1 << j);
    v67 = *v40 + 40 * (int)j;
    LODWORD(__p) = *(_DWORD *)v67;
    std::list<int>::list(&v151, v67 + 8);
    v154 = *(float *)(v67 + 32);
    v68 = fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)1>::Zero();
    v69 = v68;
    v70 = *v40 + 40 * (int)j;
    *(_DWORD *)v70 = *(_DWORD *)v68;
    if (v70 != v68)
      std::list<int>::__assign_with_sentinel[abi:ne180100]<std::__list_const_iterator<int,void *>,std::__list_const_iterator<int,void *>>((uint64_t *)(v70 + 8), *(_QWORD *)(v68 + 16), v68 + 8);
    *(_DWORD *)(v70 + 32) = *(_DWORD *)(v69 + 32);
    v71 = *a1;
    v149 = 0;
    (*(void (**)(uint64_t, unint64_t, _QWORD *))(*(_QWORD *)v71 + 136))(v71, j, v147);
    while (v147[0])
    {
      if (((*(uint64_t (**)(_QWORD))(*(_QWORD *)v147[0] + 24))(v147[0]) & 1) != 0)
        goto LABEL_188;
      if (v147[0])
      {
        v72 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v147[0] + 32))(v147[0]);
        goto LABEL_89;
      }
LABEL_88:
      v72 = v147[1] + 56 * v149;
LABEL_89:
      v73 = (uint64_t *)a1[1];
      v74 = v73 + 1;
      for (k = *(int *)(v72 + 48); 0xCCCCCCCCCCCCCCCDLL * ((v73[1] - *v73) >> 3) <= k; k = *(int *)(v72 + 48))
      {
        v76 = (_DWORD *)fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)1>::Zero();
        v77 = v76;
        v78 = *v74;
        if (*v74 >= (unint64_t)v73[2])
        {
          v79 = std::vector<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)1>>::__push_back_slow_path<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)1> const&>(v73, v76);
        }
        else
        {
          *(_DWORD *)v78 = *v76;
          std::list<int>::list((_QWORD *)(v78 + 8), (uint64_t)(v76 + 2));
          *(_DWORD *)(v78 + 32) = v77[8];
          v79 = v78 + 40;
          *v74 = v78 + 40;
        }
        *v74 = v79;
        v80 = (_DWORD *)fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)1>::Zero();
        v81 = v80;
        v82 = a1[6];
        if (v82 >= a1[7])
        {
          v83 = std::vector<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)1>>::__push_back_slow_path<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)1> const&>(a1 + 5, v80);
        }
        else
        {
          *(_DWORD *)v82 = *v80;
          std::list<int>::list((_QWORD *)(v82 + 8), (uint64_t)(v80 + 2));
          *(_DWORD *)(v82 + 32) = v81[8];
          v83 = v82 + 40;
          a1[6] = v82 + 40;
        }
        a1[6] = v83;
        LOBYTE(v144) = 0;
        std::vector<BOOL>::push_back((uint64_t)(a1 + 8), &v144);
        v73 = (uint64_t *)a1[1];
        v74 = v73 + 1;
      }
      if (*((_BYTE *)a1 + 33))
      {
        v84 = (char *)a1[11];
        v85 = (char *)a1[12];
        v86 = (v85 - v84) >> 2;
        if (v86 <= (int)k)
        {
          do
          {
            if ((unint64_t)v85 >= *v43)
            {
              v89 = v86 + 1;
              if ((v86 + 1) >> 62)
                std::vector<int>::__throw_length_error[abi:ne180100]();
              v90 = *v43 - (_QWORD)v84;
              if (v90 >> 1 > v89)
                v89 = v90 >> 1;
              if ((unint64_t)v90 >= 0x7FFFFFFFFFFFFFFCLL)
                v91 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v91 = v89;
              if (v91)
              {
                v92 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)(a1 + 13), v91);
                v84 = (char *)a1[11];
                v85 = (char *)a1[12];
              }
              else
              {
                v92 = 0;
              }
              v93 = &v92[4 * v86];
              *(_DWORD *)v93 = -1;
              v88 = v93 + 4;
              while (v85 != v84)
              {
                v94 = *((_DWORD *)v85 - 1);
                v85 -= 4;
                *((_DWORD *)v93 - 1) = v94;
                v93 -= 4;
              }
              a1[11] = v93;
              a1[12] = v88;
              a1[13] = &v92[4 * v91];
              if (v84)
              {
                operator delete(v84);
                v84 = (char *)a1[11];
              }
              else
              {
                v84 = v93;
              }
            }
            else
            {
              *(_DWORD *)v85 = -1;
              v88 = v85 + 4;
            }
            a1[12] = v88;
            v86 = (v88 - v84) >> 2;
            LODWORD(k) = *(_DWORD *)(v72 + 48);
            v85 = v88;
          }
          while (v86 <= (int)k);
          v87 = (int)k;
        }
        else
        {
          v87 = (int)k;
        }
        if (*(_DWORD *)&v84[4 * v87] != *((_DWORD *)a1 + 28))
        {
          v95 = fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)1>::Zero();
          v96 = v95;
          v97 = *(_QWORD *)a1[1] + 40 * *(int *)(v72 + 48);
          *(_DWORD *)v97 = *(_DWORD *)v95;
          if (v97 != v95)
            std::list<int>::__assign_with_sentinel[abi:ne180100]<std::__list_const_iterator<int,void *>,std::__list_const_iterator<int,void *>>((uint64_t *)(v97 + 8), *(_QWORD *)(v95 + 16), v95 + 8);
          *(_DWORD *)(v97 + 32) = *(_DWORD *)(v96 + 32);
          v98 = fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)1>::Zero();
          v99 = v98;
          v100 = *v40 + 40 * *(int *)(v72 + 48);
          *(_DWORD *)v100 = *(_DWORD *)v98;
          if (v100 != v98)
            std::list<int>::__assign_with_sentinel[abi:ne180100]<std::__list_const_iterator<int,void *>,std::__list_const_iterator<int,void *>>((uint64_t *)(v100 + 8), *(_QWORD *)(v98 + 16), v98 + 8);
          *(_DWORD *)(v100 + 32) = *(_DWORD *)(v99 + 32);
          v101 = *(int *)(v72 + 48);
          *(_QWORD *)(a1[8] + ((v101 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= ~(1 << v101);
          *(_DWORD *)(a1[11] + 4 * v101) = *((_DWORD *)a1 + 28);
          LODWORD(k) = *(_DWORD *)(v72 + 48);
        }
      }
      v102 = *(_QWORD *)a1[1];
      v103 = a1[5];
      fst::Times<int,(fst::StringType)1>((int *)&__p, v72 + 8, (uint64_t)&v139);
      v104 = NAN;
      if (v154 != -INFINITY)
      {
        v105 = *(float *)(v72 + 40);
        v104 = NAN;
        if (v105 != -INFINITY)
        {
          v104 = INFINITY;
          if (v105 != INFINITY && v154 != INFINITY)
            v104 = v154 + v105;
        }
      }
      fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)1>::GallicWeight((uint64_t)&v144, &v139, v104);
      v107 = v102 + 40 * (int)k;
      std::__list_imp<char *>::clear(&v140);
      fst::Plus<int>(v107, (uint64_t)&v144, (uint64_t)&v155);
      v108 = *(float *)(v107 + 32);
      v109 = NAN;
      if (v108 != -INFINITY)
      {
        v109 = NAN;
        if (v146 != -INFINITY)
        {
          if (v108 >= v146)
            v109 = v146;
          else
            v109 = *(float *)(v107 + 32);
        }
      }
      fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)1>::GallicWeight((uint64_t)&v139, &v155, v109);
      std::__list_imp<char *>::clear(v156);
      v110 = *(_DWORD *)v107;
      if (*(_DWORD *)v107)
        v111 = *(_QWORD *)(v107 + 24) + 1;
      else
        v111 = 0;
      if (v139)
        v112 = v142 + 1;
      else
        v112 = 0;
      if (v111 == v112)
      {
        v113 = 0;
        v114 = *((float *)a1 + 7);
        v115 = (uint64_t *)(v107 + 16);
        v116 = v141;
        if (v110)
          v117 = v110 == v139;
        else
          v117 = 0;
        v118 = !v117;
        while (1)
        {
          v119 = *v115;
          if ((v113 & 1) == 0 && v118 == 1)
            break;
          if (v119 == v107 + 8)
            goto LABEL_180;
          if (*(_DWORD *)(v119 + 16) != *(_DWORD *)(v116 + 16))
            goto LABEL_156;
          v115 = (uint64_t *)(v119 + 8);
          v116 = *(_QWORD *)(v116 + 8);
          v113 = 1;
        }
        if (v110)
          goto LABEL_156;
LABEL_180:
        v126 = *(float *)(v107 + 32);
        v127 = v143;
        v128 = v114 + v143;
        v129 = v114 + v126;
        std::__list_imp<char *>::clear(&v140);
        if (v127 <= v129 && v126 <= v128)
          goto LABEL_184;
      }
      else
      {
LABEL_156:
        std::__list_imp<char *>::clear(&v140);
      }
      fst::Plus<int>(v107, (uint64_t)&v144, (uint64_t)&v155);
      v120 = *(float *)(v107 + 32);
      v121 = NAN;
      if (v120 != -INFINITY)
      {
        v121 = NAN;
        if (v146 != -INFINITY)
        {
          if (v120 >= v146)
            v121 = v146;
          else
            v121 = *(float *)(v107 + 32);
        }
      }
      fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)1>::GallicWeight((uint64_t)&v139, &v155, v121);
      std::__list_imp<char *>::clear(v156);
      *(_DWORD *)v107 = v139;
      if ((int *)v107 != &v139)
        std::list<int>::__assign_with_sentinel[abi:ne180100]<std::__list_const_iterator<int,void *>,std::__list_const_iterator<int,void *>>((uint64_t *)(v107 + 8), v141, (uint64_t)&v140);
      v122 = v103 + 40 * (int)k;
      *(float *)(v107 + 32) = v143;
      std::__list_imp<char *>::clear(&v140);
      fst::Plus<int>(v122, (uint64_t)&v144, (uint64_t)&v155);
      v123 = *(float *)(v122 + 32);
      v124 = NAN;
      if (v123 != -INFINITY)
      {
        v124 = NAN;
        if (v146 != -INFINITY)
        {
          if (v123 >= v146)
            v124 = v146;
          else
            v124 = *(float *)(v122 + 32);
        }
      }
      fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)1>::GallicWeight((uint64_t)&v139, &v155, v124);
      std::__list_imp<char *>::clear(v156);
      *(_DWORD *)v122 = v139;
      if ((int *)v122 != &v139)
        std::list<int>::__assign_with_sentinel[abi:ne180100]<std::__list_const_iterator<int,void *>,std::__list_const_iterator<int,void *>>((uint64_t *)(v122 + 8), v141, (uint64_t)&v140);
      *(float *)(v122 + 32) = v143;
      std::__list_imp<char *>::clear(&v140);
      if (*(_DWORD *)v107 == -2 && !*(_QWORD *)(v107 + 24)
        || *(float *)(v107 + 32) == -INFINITY
        || *(_DWORD *)v122 == -2 && !*(_QWORD *)(v122 + 24)
        || *(float *)(v122 + 32) == -INFINITY)
      {
        *v138 = 1;
        std::__list_imp<char *>::clear(v145);
        v131 = 0;
        goto LABEL_189;
      }
      v125 = **(_QWORD **)(a1[2] + 16);
      if (((*(_QWORD *)(a1[8] + (((unint64_t)*(int *)(v72 + 48) >> 3) & 0x1FFFFFFFFFFFFFF8)) >> *(_DWORD *)(v72 + 48)) & 1) != 0)
      {
        (*(void (**)(void))(v125 + 40))();
      }
      else
      {
        (*(void (**)(void))(v125 + 24))();
        *(_QWORD *)(*v42 + (((unint64_t)*(int *)(v72 + 48) >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << *(_DWORD *)(v72 + 48);
      }
LABEL_184:
      std::__list_imp<char *>::clear(v145);
      if (v147[0])
        (*(void (**)(_QWORD))(*(_QWORD *)v147[0] + 40))(v147[0]);
      else
        ++v149;
    }
    if (v149 < v147[2])
      goto LABEL_88;
LABEL_188:
    v131 = 1;
LABEL_189:
    if (v147[0])
    {
      (*(void (**)(_QWORD))(*(_QWORD *)v147[0] + 8))(v147[0]);
    }
    else if (v148)
    {
      --*v148;
    }
    std::__list_imp<char *>::clear(&v151);
  }
  while ((v131 & 1) != 0);
}

void sub_1ADC1D4C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  fst::LogMessage::~LogMessage((fst::LogMessage *)&a26);
  if (a36 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t *std::vector<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)1>>::resize(uint64_t *result, unint64_t a2, _DWORD *a3)
{
  uint64_t *v3;
  uint64_t v4;
  unint64_t v5;
  BOOL v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v3 = result;
  v4 = result[1];
  v5 = 0xCCCCCCCCCCCCCCCDLL * ((v4 - *result) >> 3);
  v6 = a2 >= v5;
  v7 = a2 - v5;
  if (v7 != 0 && v6)
    return std::vector<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)1>>::__append(result, v7, a3);
  if (!v6)
  {
    v8 = *result + 40 * a2;
    if (v4 != v8)
    {
      do
      {
        v9 = v4 - 40;
        result = std::__list_imp<char *>::clear((_QWORD *)(v4 - 32));
        v4 = v9;
      }
      while (v9 != v8);
    }
    v3[1] = v8;
  }
  return result;
}

uint64_t fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)1>::NoWeight()
{
  unsigned __int8 v0;
  uint64_t v2;
  _DWORD *v3;

  if ((v0 & 1) == 0
  {
    v2 = operator new();
    v3 = (_DWORD *)fst::ProductWeight<fst::StringWeight<int,(fst::StringType)1>,fst::TropicalWeightTpl<float>>::NoWeight();
    *(_DWORD *)v2 = *v3;
    std::list<int>::list((_QWORD *)(v2 + 8), (uint64_t)(v3 + 2));
    *(_DWORD *)(v2 + 32) = v3[8];
    fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)1>::NoWeight(void)::no_weight = v2;
  }
  return fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)1>::NoWeight(void)::no_weight;
}

void sub_1ADC1D718(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t std::vector<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)1>>::__push_back_slow_path<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)1> const&>(uint64_t *a1, _DWORD *a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  _QWORD v14[2];
  char *v15;
  char *v16;
  uint64_t *v17;

  v3 = *a1;
  v4 = 0xCCCCCCCCCCCCCCCDLL * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if (v4 + 1 > 0x666666666666666)
    std::vector<int>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0xCCCCCCCCCCCCCCCDLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x333333333333333)
    v9 = 0x666666666666666;
  else
    v9 = v5;
  v17 = a1 + 2;
  if (v9)
    v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::PronChoice>>(v7, v9);
  else
    v10 = 0;
  v11 = &v10[40 * v4];
  v14[0] = v10;
  v14[1] = v11;
  v15 = v11;
  v16 = &v10[40 * v9];
  *(_DWORD *)v11 = *a2;
  std::list<int>::list((_QWORD *)v11 + 1, (uint64_t)(a2 + 2));
  *((_DWORD *)v11 + 8) = a2[8];
  v15 += 40;
  std::vector<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)1>>::__swap_out_circular_buffer(a1, v14);
  v12 = a1[1];
  std::__split_buffer<fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::~__split_buffer((uint64_t)v14);
  return v12;
}

void sub_1ADC1D850(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)1>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)1>>,std::reverse_iterator<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)1>*>,std::reverse_iterator<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)1>*>,std::reverse_iterator<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)1>*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)1>>,std::reverse_iterator<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)1>*>,std::reverse_iterator<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)1>*>,std::reverse_iterator<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)1>*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v11;

  if (a3 != a5)
  {
    v11 = 0;
    do
    {
      *(_DWORD *)(a7 + v11 - 40) = *(_DWORD *)(a3 + v11 - 40);
      std::list<int>::list((_QWORD *)(a7 + v11 - 32), a3 + v11 - 32);
      *(_DWORD *)(a7 + v11 - 8) = *(_DWORD *)(a3 + v11 - 8);
      v11 -= 40;
    }
    while (a3 + v11 != a5);
  }
  return a6;
}

void sub_1ADC1D964(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  if (v2)
  {
    v4 = v1 + 8;
    do
    {
      std::__list_imp<char *>::clear((_QWORD *)(v4 + v2));
      v2 += 40;
    }
    while (v2);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *std::vector<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)1>>::__append(uint64_t *a1, unint64_t a2, _DWORD *a3)
{
  _QWORD *result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  char *v19;
  char *v20;
  _QWORD *v21;

  v8 = a1[2];
  result = a1 + 2;
  v7 = v8;
  v9 = *(result - 1);
  if (0xCCCCCCCCCCCCCCCDLL * ((v8 - v9) >> 3) >= a2)
  {
    if (a2)
    {
      v15 = v9 + 40 * a2;
      v16 = 40 * a2;
      do
      {
        *(_DWORD *)v9 = *a3;
        result = std::list<int>::list((_QWORD *)(v9 + 8), (uint64_t)(a3 + 2));
        *(_DWORD *)(v9 + 32) = a3[8];
        v9 += 40;
        v16 -= 40;
      }
      while (v16);
      v9 = v15;
    }
    a1[1] = v9;
  }
  else
  {
    v10 = 0xCCCCCCCCCCCCCCCDLL * ((v9 - *a1) >> 3);
    v11 = v10 + a2;
    if (v10 + a2 > 0x666666666666666)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v12 = 0xCCCCCCCCCCCCCCCDLL * ((v7 - *a1) >> 3);
    if (2 * v12 > v11)
      v11 = 2 * v12;
    if (v12 >= 0x333333333333333)
      v13 = 0x666666666666666;
    else
      v13 = v11;
    v21 = result;
    if (v13)
      v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::PronChoice>>((uint64_t)result, v13);
    else
      v14 = 0;
    v17 = v14;
    v18 = &v14[40 * v10];
    v19 = v18;
    v20 = &v14[40 * v13];
    std::__split_buffer<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)1>>::__construct_at_end(&v17, a2, a3);
    std::vector<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)1>>::__swap_out_circular_buffer(a1, &v17);
    return (_QWORD *)std::__split_buffer<fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::~__split_buffer((uint64_t)&v17);
  }
  return result;
}

void sub_1ADC1DADC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *std::__split_buffer<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)1>>::__construct_at_end(_QWORD *result, uint64_t a2, _DWORD *a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v3 = result;
  v4 = result[2];
  if (a2)
  {
    v6 = v4 + 40 * a2;
    v7 = (uint64_t)(a3 + 2);
    v8 = 40 * a2;
    do
    {
      *(_DWORD *)v4 = *a3;
      result = std::list<int>::list((_QWORD *)(v4 + 8), v7);
      *(_DWORD *)(v4 + 32) = a3[8];
      v4 += 40;
      v8 -= 40;
    }
    while (v8);
    v4 = v6;
  }
  v3[2] = v4;
  return result;
}

void sub_1ADC1DB78(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 16) = v2;
  _Unwind_Resume(a1);
}

uint64_t fst::ProductWeight<fst::StringWeight<int,(fst::StringType)1>,fst::TropicalWeightTpl<float>>::NoWeight()
{
  unsigned __int8 v0;
  uint64_t v2;
  _DWORD *v3;

  if ((v0 & 1) == 0
  {
    v2 = operator new();
    v3 = (_DWORD *)fst::PairWeight<fst::StringWeight<int,(fst::StringType)1>,fst::TropicalWeightTpl<float>>::NoWeight();
    *(_DWORD *)v2 = *v3;
    std::list<int>::list((_QWORD *)(v2 + 8), (uint64_t)(v3 + 2));
    *(_DWORD *)(v2 + 32) = v3[8];
    fst::ProductWeight<fst::StringWeight<int,(fst::StringType)1>,fst::TropicalWeightTpl<float>>::NoWeight(void)::no_weight = v2;
  }
  return fst::ProductWeight<fst::StringWeight<int,(fst::StringType)1>,fst::TropicalWeightTpl<float>>::NoWeight(void)::no_weight;
}

void sub_1ADC1DC18(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t fst::PairWeight<fst::StringWeight<int,(fst::StringType)1>,fst::TropicalWeightTpl<float>>::NoWeight()
{
  unsigned __int8 v0;
  uint64_t v2;
  int *v3;
  int v4;
  _QWORD v5[3];

  if ((v0 & 1) == 0
  {
    v2 = operator new();
    v3 = (int *)fst::StringWeight<int,(fst::StringType)1>::NoWeight();
    v4 = *v3;
    std::list<int>::list(v5, (uint64_t)(v3 + 2));
    *(_DWORD *)v2 = v4;
    std::list<int>::list((_QWORD *)(v2 + 8), (uint64_t)v5);
    *(_DWORD *)(v2 + 32) = 2143289344;
    std::__list_imp<char *>::clear(v5);
    fst::PairWeight<fst::StringWeight<int,(fst::StringType)1>,fst::TropicalWeightTpl<float>>::NoWeight(void)::no_weight = v2;
  }
  return fst::PairWeight<fst::StringWeight<int,(fst::StringType)1>,fst::TropicalWeightTpl<float>>::NoWeight(void)::no_weight;
}

void sub_1ADC1DD14(_Unwind_Exception *a1)
{
  uint64_t v1;
  _QWORD *v2;

  std::__list_imp<char *>::clear(v2);
  MEMORY[0x1AF44D190](v1, 0x1020C4067685F46);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>>::__append(uint64_t *a1, unint64_t a2, _DWORD *a3)
{
  _QWORD *result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  char *v19;
  char *v20;
  _QWORD *v21;

  v8 = a1[2];
  result = a1 + 2;
  v7 = v8;
  v9 = *(result - 1);
  if (0xCCCCCCCCCCCCCCCDLL * ((v8 - v9) >> 3) >= a2)
  {
    if (a2)
    {
      v15 = v9 + 40 * a2;
      v16 = 40 * a2;
      do
      {
        *(_DWORD *)v9 = *a3;
        result = std::list<int>::list((_QWORD *)(v9 + 8), (uint64_t)(a3 + 2));
        *(_DWORD *)(v9 + 32) = a3[8];
        v9 += 40;
        v16 -= 40;
      }
      while (v16);
      v9 = v15;
    }
    a1[1] = v9;
  }
  else
  {
    v10 = 0xCCCCCCCCCCCCCCCDLL * ((v9 - *a1) >> 3);
    v11 = v10 + a2;
    if (v10 + a2 > 0x666666666666666)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v12 = 0xCCCCCCCCCCCCCCCDLL * ((v7 - *a1) >> 3);
    if (2 * v12 > v11)
      v11 = 2 * v12;
    if (v12 >= 0x333333333333333)
      v13 = 0x666666666666666;
    else
      v13 = v11;
    v21 = result;
    if (v13)
      v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::PronChoice>>((uint64_t)result, v13);
    else
      v14 = 0;
    v17 = v14;
    v18 = &v14[40 * v10];
    v19 = v18;
    v20 = &v14[40 * v13];
    std::__split_buffer<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>>::__construct_at_end(&v17, a2, a3);
    std::vector<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>>::__swap_out_circular_buffer(a1, &v17);
    return (_QWORD *)std::__split_buffer<fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::~__split_buffer((uint64_t)&v17);
  }
  return result;
}

void sub_1ADC1DEB0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *std::__split_buffer<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>>::__construct_at_end(_QWORD *result, uint64_t a2, _DWORD *a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v3 = result;
  v4 = result[2];
  if (a2)
  {
    v6 = v4 + 40 * a2;
    v7 = (uint64_t)(a3 + 2);
    v8 = 40 * a2;
    do
    {
      *(_DWORD *)v4 = *a3;
      result = std::list<int>::list((_QWORD *)(v4 + 8), v7);
      *(_DWORD *)(v4 + 32) = a3[8];
      v4 += 40;
      v8 -= 40;
    }
    while (v8);
    v4 = v6;
  }
  v3[2] = v4;
  return result;
}

void sub_1ADC1DF4C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 16) = v2;
  _Unwind_Resume(a1);
}

uint64_t fst::ProductWeight<fst::StringWeight<int,(fst::StringType)0>,fst::TropicalWeightTpl<float>>::NoWeight()
{
  unsigned __int8 v0;
  uint64_t v2;
  _DWORD *v3;

  if ((v0 & 1) == 0
  {
    v2 = operator new();
    v3 = (_DWORD *)fst::PairWeight<fst::StringWeight<int,(fst::StringType)0>,fst::TropicalWeightTpl<float>>::NoWeight();
    *(_DWORD *)v2 = *v3;
    std::list<int>::list((_QWORD *)(v2 + 8), (uint64_t)(v3 + 2));
    *(_DWORD *)(v2 + 32) = v3[8];
    fst::ProductWeight<fst::StringWeight<int,(fst::StringType)0>,fst::TropicalWeightTpl<float>>::NoWeight(void)::no_weight = v2;
  }
  return fst::ProductWeight<fst::StringWeight<int,(fst::StringType)0>,fst::TropicalWeightTpl<float>>::NoWeight(void)::no_weight;
}

void sub_1ADC1DFEC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t fst::PairWeight<fst::StringWeight<int,(fst::StringType)0>,fst::TropicalWeightTpl<float>>::NoWeight()
{
  unsigned __int8 v0;
  uint64_t v2;
  int *v3;
  int v4;
  _QWORD v5[3];

  if ((v0 & 1) == 0
  {
    v2 = operator new();
    v3 = (int *)fst::StringWeight<int,(fst::StringType)0>::NoWeight();
    v4 = *v3;
    std::list<int>::list(v5, (uint64_t)(v3 + 2));
    *(_DWORD *)v2 = v4;
    std::list<int>::list((_QWORD *)(v2 + 8), (uint64_t)v5);
    *(_DWORD *)(v2 + 32) = 2143289344;
    std::__list_imp<char *>::clear(v5);
    fst::PairWeight<fst::StringWeight<int,(fst::StringType)0>,fst::TropicalWeightTpl<float>>::NoWeight(void)::no_weight = v2;
  }
  return fst::PairWeight<fst::StringWeight<int,(fst::StringType)0>,fst::TropicalWeightTpl<float>>::NoWeight(void)::no_weight;
}

void sub_1ADC1E0E8(_Unwind_Exception *a1)
{
  uint64_t v1;
  _QWORD *v2;

  std::__list_imp<char *>::clear(v2);
  MEMORY[0x1AF44D190](v1, 0x1020C4067685F46);
  _Unwind_Resume(a1);
}

uint64_t std::vector<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>>::__push_back_slow_path<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>>(uint64_t *a1, _DWORD *a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  _QWORD v14[2];
  char *v15;
  char *v16;
  uint64_t *v17;

  v3 = *a1;
  v4 = 0xCCCCCCCCCCCCCCCDLL * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if (v4 + 1 > 0x666666666666666)
    std::vector<int>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0xCCCCCCCCCCCCCCCDLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x333333333333333)
    v9 = 0x666666666666666;
  else
    v9 = v5;
  v17 = a1 + 2;
  if (v9)
    v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::PronChoice>>(v7, v9);
  else
    v10 = 0;
  v11 = &v10[40 * v4];
  v14[0] = v10;
  v14[1] = v11;
  v15 = v11;
  v16 = &v10[40 * v9];
  *(_DWORD *)v11 = *a2;
  std::list<int>::list((_QWORD *)v11 + 1, (uint64_t)(a2 + 2));
  *((_DWORD *)v11 + 8) = a2[8];
  v15 += 40;
  std::vector<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>>::__swap_out_circular_buffer(a1, v14);
  v12 = a1[1];
  std::__split_buffer<fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::~__split_buffer((uint64_t)v14);
  return v12;
}

void sub_1ADC1E230(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *fst::ProductWeight<fst::StringWeight<int,(fst::StringType)1>,fst::TropicalWeightTpl<float>>::Reverse@<X0>(_DWORD *a1@<X0>, uint64_t a2@<X8>)
{
  int v4;
  _QWORD v5[3];
  int v6;

  fst::PairWeight<fst::StringWeight<int,(fst::StringType)1>,fst::TropicalWeightTpl<float>>::Reverse(a1, (uint64_t)&v4);
  *(_DWORD *)a2 = v4;
  std::list<int>::list((_QWORD *)(a2 + 8), (uint64_t)v5);
  *(_DWORD *)(a2 + 32) = v6;
  return std::__list_imp<char *>::clear(v5);
}

void sub_1ADC1E29C(_Unwind_Exception *a1)
{
  _QWORD *v1;

  std::__list_imp<char *>::clear(v1);
  _Unwind_Resume(a1);
}

_QWORD *fst::PairWeight<fst::StringWeight<int,(fst::StringType)1>,fst::TropicalWeightTpl<float>>::Reverse@<X0>(_DWORD *a1@<X0>, uint64_t a2@<X8>)
{
  int v4;
  uint64_t v5;
  char v6;
  _DWORD *v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  int v11;
  char v12;
  _DWORD *v13;
  int v14;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;

  v4 = 0;
  v5 = 0;
  v6 = 0;
  v16 = (uint64_t)&v16;
  v17 = &v16;
  v18 = 0;
  v7 = a1 + 2;
  v8 = (uint64_t *)(a1 + 4);
  v9 = &v16;
LABEL_2:
  v10 = *v8;
  v11 = v4;
  while (1)
  {
    v12 = v6;
    if ((v6 & 1) != 0)
    {
      if ((_DWORD *)v10 == v7)
        break;
      v4 = *(_DWORD *)(v10 + 16);
      goto LABEL_7;
    }
    v4 = *a1;
    if (!*a1)
      break;
LABEL_7:
    if (v11)
    {
      v13 = operator new(0x18uLL);
      v13[4] = v11;
      *(_QWORD *)v13 = &v16;
      *((_QWORD *)v13 + 1) = v9;
      *v9 = (uint64_t)v13;
      ++v5;
      v9 = (uint64_t *)v13;
      v17 = (uint64_t *)v13;
      v18 = v5;
    }
    v6 = 1;
    v11 = v4;
    if ((v12 & 1) != 0)
    {
      v8 = (uint64_t *)(v10 + 8);
      goto LABEL_2;
    }
  }
  v14 = a1[8];
  *(_DWORD *)a2 = v11;
  std::list<int>::list((_QWORD *)(a2 + 8), (uint64_t)&v16);
  *(_DWORD *)(a2 + 32) = v14;
  return std::__list_imp<char *>::clear(&v16);
}

void sub_1ADC1E3B0(_Unwind_Exception *a1)
{
  _QWORD *v1;

  std::__list_imp<char *>::clear(v1);
  _Unwind_Resume(a1);
}

void sub_1ADC1E4A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  uint64_t v14;

  fst::LogMessage::~LogMessage((fst::LogMessage *)(v14 - 17));
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

_QWORD *fst::DivideLeft<int,(fst::StringType)0>@<X0>(int *a1@<X0>, int *a2@<X1>, uint64_t a3@<X8>)
{
  BOOL v6;
  BOOL v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t *v13;
  uint64_t *v14;
  BOOL v15;
  int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  _DWORD *v20;
  _QWORD *result;
  int v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t *v27;
  BOOL v28;
  int v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  char v34;
  int *v35;

  if (*a1 && (*a1 == -2 ? (v6 = *((_QWORD *)a1 + 3) == 0) : (v6 = 0), v6)
    || *a2 && (*a2 == -2 ? (v7 = *((_QWORD *)a2 + 3) == 0) : (v7 = 0), v7))
  {
    v20 = (_DWORD *)fst::StringWeight<int,(fst::StringType)0>::NoWeight();
    goto LABEL_31;
  }
  v8 = fst::StringWeight<int,(fst::StringType)0>::Zero();
  v9 = *a2;
  if (*a2)
    v10 = *((_QWORD *)a2 + 3) + 1;
  else
    v10 = 0;
  if (*(_DWORD *)v8)
    v11 = *(_QWORD *)(v8 + 24) + 1;
  else
    v11 = 0;
  if (v10 != v11)
  {
LABEL_33:
    result = (_QWORD *)fst::StringWeight<int,(fst::StringType)0>::Zero();
    v22 = *a1;
    if (*a1)
      v23 = *((_QWORD *)a1 + 3) + 1;
    else
      v23 = 0;
    if (*(_DWORD *)result)
      v24 = result[3] + 1;
    else
      v24 = 0;
    if (v23 != v24)
    {
      v26 = *((_QWORD *)a1 + 2);
LABEL_53:
      v33 = 0;
      v34 = 0;
      *(_QWORD *)(a3 + 8) = a3 + 8;
      *(_QWORD *)(a3 + 16) = a3 + 8;
      *(_QWORD *)(a3 + 24) = 0;
      *(_DWORD *)a3 = 0;
      if (*a1)
      {
        do
        {
          if (!*a2 || *((_QWORD *)a2 + 3) + 1 <= v33)
          {
            v35 = (int *)(v26 + 16);
            if ((v34 & 1) == 0)
              v35 = a1;
            result = fst::StringWeight<int,(fst::StringType)1>::PushBack((_DWORD *)a3, *v35);
          }
          if ((v34 & 1) != 0)
            v26 = *(_QWORD *)(v26 + 8);
          ++v33;
          v34 = 1;
        }
        while ((int *)v26 != a1 + 2);
      }
      return result;
    }
    v25 = 0;
    v26 = *((_QWORD *)a1 + 2);
    v27 = result + 2;
    if (v22)
      v28 = v22 == *(_DWORD *)result;
    else
      v28 = 0;
    v29 = !v28;
    v30 = v29 ^ 1;
    v31 = *((_QWORD *)a1 + 2);
    while (1)
    {
      v32 = *v27;
      if ((v25 & 1) == 0 && !v30)
        break;
      if ((int *)v31 == a1 + 2)
        goto LABEL_68;
      if (*(_DWORD *)(v31 + 16) != *(_DWORD *)(v32 + 16))
        goto LABEL_53;
      v31 = *(_QWORD *)(v31 + 8);
      v27 = (uint64_t *)(v32 + 8);
      v25 = 1;
    }
    if (v22)
      goto LABEL_53;
LABEL_68:
    v20 = (_DWORD *)fst::StringWeight<int,(fst::StringType)0>::Zero();
LABEL_31:
    *(_DWORD *)a3 = *v20;
    return std::list<int>::list((_QWORD *)(a3 + 8), (uint64_t)(v20 + 2));
  }
  v12 = 0;
  v13 = (uint64_t *)(a2 + 4);
  v14 = (uint64_t *)(v8 + 16);
  if (v9)
    v15 = v9 == *(_DWORD *)v8;
  else
    v15 = 0;
  v16 = !v15;
  v17 = v16 ^ 1;
  while (1)
  {
    v18 = *v13;
    v19 = *v14;
    if ((v12 & 1) == 0 && !v17)
      break;
    if ((int *)v18 == a2 + 2)
      return (_QWORD *)fst::StringWeight<int,(fst::StringType)0>::StringWeight(a3, -2);
    if (*(_DWORD *)(v18 + 16) != *(_DWORD *)(v19 + 16))
      goto LABEL_33;
    v13 = (uint64_t *)(v18 + 8);
    v14 = (uint64_t *)(v19 + 8);
    v12 = 1;
  }
  if (v9)
    goto LABEL_33;
  return (_QWORD *)fst::StringWeight<int,(fst::StringType)0>::StringWeight(a3, -2);
}

void sub_1ADC1E730(_Unwind_Exception *a1)
{
  _QWORD *v1;

  std::__list_imp<char *>::clear(v1);
  _Unwind_Resume(a1);
}

uint64_t fst::ArcMap<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,fst::QuantizeMapper<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>(uint64_t a1, float *a2)
{
  uint64_t result;
  uint64_t v5;
  float *v6;
  int v7;
  fst *v8;
  _QWORD *v9;
  void *v10;
  uint64_t v11;
  int v12;
  _QWORD v13[3];
  int v14;
  void *__p[2];
  char v16;
  char v17;
  _QWORD v18[2];
  char v19;
  char v20;
  uint64_t v21;
  _QWORD v22[3];
  int v23;
  uint64_t v24;
  int v25;
  _QWORD v26[3];
  int v27;
  int v28;
  uint64_t v29;
  int v30;
  _QWORD v31[3];
  int v32;

  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  if ((_DWORD)result != -1)
  {
    v11 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 64))(a1, 0x3FFFFFFF0007, 0);
    if ((*(int (**)(uint64_t))(*(_QWORD *)a1 + 160))(a1) >= 1)
    {
      v5 = 0;
      do
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(_QWORD *)a1 + 296))(a1, v5, &v24);
        while (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v24 + 24))(v24))
        {
          v6 = (float *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v24 + 32))(v24);
          fst::QuantizeMapper<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>::operator()(a2, v6, (uint64_t)&v29);
          (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v24 + 88))(v24, &v29);
          std::__list_imp<char *>::clear(v31);
          (*(void (**)(uint64_t))(*(_QWORD *)v24 + 40))(v24);
        }
        if (v24)
          (*(void (**)(void))(*(_QWORD *)v24 + 8))();
        (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)a1 + 32))(&v21, a1, v5);
        v24 = 0;
        v25 = v21;
        std::list<int>::list(v26, (uint64_t)v22);
        v27 = v23;
        v28 = -1;
        fst::QuantizeMapper<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>::operator()(a2, (float *)&v24, (uint64_t)&v29);
        std::__list_imp<char *>::clear(v26);
        std::__list_imp<char *>::clear(v22);
        if (!v29)
          goto LABEL_20;
        v7 = FLAGS_fst_error_fatal;
        if (FLAGS_fst_error_fatal)
        {
          std::string::basic_string[abi:ne180100]<0>(v18, "FATAL");
          v8 = fst::LogMessage::LogMessage((fst *)&v20, (uint64_t)v18);
        }
        else
        {
          std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
          v8 = fst::LogMessage::LogMessage((fst *)&v17, (uint64_t)__p);
        }
        v9 = (_QWORD *)fst::cerr(v8);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"ArcMap: non-zero arc labels for superfinal arc", 46);
        if (v7)
        {
          fst::LogMessage::~LogMessage((fst::LogMessage *)&v20);
          if (v19 < 0)
          {
            v10 = (void *)v18[0];
LABEL_18:
            operator delete(v10);
          }
        }
        else
        {
          fst::LogMessage::~LogMessage((fst::LogMessage *)&v17);
          if (v16 < 0)
          {
            v10 = __p[0];
            goto LABEL_18;
          }
        }
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 192))(a1, 4, 4);
LABEL_20:
        v12 = v30;
        std::list<int>::list(v13, (uint64_t)v31);
        v14 = v32;
        (*(void (**)(uint64_t, uint64_t, int *))(*(_QWORD *)a1 + 184))(a1, v5, &v12);
        std::__list_imp<char *>::clear(v13);
        std::__list_imp<char *>::clear(v31);
        v5 = (v5 + 1);
      }
      while ((int)v5 < (*(int (**)(uint64_t))(*(_QWORD *)a1 + 160))(a1));
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 192))(a1, v11 & 0x3FFCFFFF0007, 0x3FFFFFFF0007);
  }
  return result;
}

void sub_1ADC1EA38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40)
{
  _QWORD *v40;

  fst::LogMessage::~LogMessage((fst::LogMessage *)&a24);
  if (a20 < 0)
    operator delete(__p);
  std::__list_imp<char *>::clear(v40);
  _Unwind_Resume(a1);
}

_QWORD *fst::QuantizeMapper<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>::operator()@<X0>(float *a1@<X0>, float *a2@<X1>, uint64_t a3@<X8>)
{
  float *v3;
  uint64_t v5;
  int v7;
  _QWORD v8[3];
  int v9;
  int v10;
  _QWORD v11[3];
  int v12;

  v3 = a2;
  fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>::Quantize(a2 + 2, (uint64_t)&v10, *a1);
  v5 = *(_QWORD *)v3;
  v7 = v10;
  std::list<int>::list(v8, (uint64_t)v11);
  v9 = v12;
  *(float *)&v3 = v3[12];
  *(_QWORD *)a3 = v5;
  *(_DWORD *)(a3 + 8) = v7;
  std::list<int>::list((_QWORD *)(a3 + 16), (uint64_t)v8);
  *(_DWORD *)(a3 + 40) = v9;
  *(_DWORD *)(a3 + 48) = (_DWORD)v3;
  std::__list_imp<char *>::clear(v8);
  return std::__list_imp<char *>::clear(v11);
}

void sub_1ADC1EBC4(_Unwind_Exception *a1)
{
  _QWORD *v1;
  _QWORD *v2;

  std::__list_imp<char *>::clear(v2);
  std::__list_imp<char *>::clear(v1);
  _Unwind_Resume(a1);
}

_QWORD *fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>::Quantize@<X0>(float *a1@<X0>, uint64_t a2@<X8>, float a3@<S0>)
{
  int v5;
  _QWORD v6[3];
  int v7;

  fst::ProductWeight<fst::StringWeight<int,(fst::StringType)0>,fst::TropicalWeightTpl<float>>::Quantize(a1, (uint64_t)&v5, a3);
  *(_DWORD *)a2 = v5;
  std::list<int>::list((_QWORD *)(a2 + 8), (uint64_t)v6);
  *(_DWORD *)(a2 + 32) = v7;
  return std::__list_imp<char *>::clear(v6);
}

void sub_1ADC1EC40(_Unwind_Exception *a1)
{
  _QWORD *v1;

  std::__list_imp<char *>::clear(v1);
  _Unwind_Resume(a1);
}

_QWORD *fst::ProductWeight<fst::StringWeight<int,(fst::StringType)0>,fst::TropicalWeightTpl<float>>::Quantize@<X0>(float *a1@<X0>, uint64_t a2@<X8>, float a3@<S0>)
{
  int v5;
  _QWORD v6[3];
  int v7;

  fst::PairWeight<fst::StringWeight<int,(fst::StringType)0>,fst::TropicalWeightTpl<float>>::Quantize(a1, (uint64_t)&v5, a3);
  *(_DWORD *)a2 = v5;
  std::list<int>::list((_QWORD *)(a2 + 8), (uint64_t)v6);
  *(_DWORD *)(a2 + 32) = v7;
  return std::__list_imp<char *>::clear(v6);
}

void sub_1ADC1ECAC(_Unwind_Exception *a1)
{
  _QWORD *v1;

  std::__list_imp<char *>::clear(v1);
  _Unwind_Resume(a1);
}

_QWORD *fst::PairWeight<fst::StringWeight<int,(fst::StringType)0>,fst::TropicalWeightTpl<float>>::Quantize@<X0>(float *a1@<X0>, uint64_t a2@<X8>, float a3@<S0>)
{
  float v6;
  float v8;
  _QWORD v9[3];

  v8 = *a1;
  std::list<int>::list(v9, (uint64_t)(a1 + 2));
  v6 = a1[8];
  if ((LODWORD(v6) & 0x7FFFFFFFu) <= 0x7F7FFFFF)
    v6 = floorf((float)(v6 / a3) + 0.5) * a3;
  *(float *)a2 = v8;
  std::list<int>::list((_QWORD *)(a2 + 8), (uint64_t)v9);
  *(float *)(a2 + 32) = v6;
  return std::__list_imp<char *>::clear(v9);
}

void sub_1ADC1ED64(_Unwind_Exception *a1)
{
  _QWORD *v1;

  std::__list_imp<char *>::clear(v1);
  _Unwind_Resume(a1);
}

uint64_t fst::EncodeMapper<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>::EncodeMapper(uint64_t a1, int a2, int a3)
{
  uint64_t v5;

  *(_DWORD *)a1 = a2;
  *(_DWORD *)(a1 + 4) = a3;
  v5 = operator new();
  fst::EncodeTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>::EncodeTable(v5, a2);
  *(_QWORD *)(a1 + 8) = v5;
  *(_BYTE *)(a1 + 16) = 0;
  return a1;
}

void sub_1ADC1EDD4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10A0C40782F6942);
  _Unwind_Resume(a1);
}

uint64_t fst::EncodeTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>::EncodeTable(uint64_t a1, int a2)
{
  int v4;
  char v5;
  BOOL v6;

  *(_DWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  v4 = a2;
  v5 = a2 & 1;
  v6 = (a2 & 2) != 0;
  std::unordered_map<fst::EncodeTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>::Tuple const*,int,fst::EncodeTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>::TupleKey,fst::EncodeTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>::TupleEqual,std::allocator<std::pair<fst::EncodeTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>::Tuple const* const,int>>>::unordered_map(a1 + 32, 0x400uLL, &v4);
  *(_DWORD *)(a1 + 80) = 1;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  return a1;
}

void sub_1ADC1EE64(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void **v3;
  void *v5;

  v3 = v2;
  v5 = *v3;
  if (*v3)
  {
    *(_QWORD *)(v1 + 16) = v5;
    operator delete(v5);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::unordered_map<fst::EncodeTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>::Tuple const*,int,fst::EncodeTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>::TupleKey,fst::EncodeTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>::TupleEqual,std::allocator<std::pair<fst::EncodeTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>::Tuple const* const,int>>>::unordered_map(uint64_t a1, size_t a2, int *a3)
{
  int v4;

  v4 = *a3;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = v4;
  *(_BYTE *)(a1 + 36) = v4 & 1;
  *(_BYTE *)(a1 + 37) = (v4 & 2) != 0;
  *(_DWORD *)(a1 + 40) = 1065353216;
  std::__hash_table<int,fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashFunc,fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashEqual,std::allocator<int>>::__rehash<true>(a1, a2);
  return a1;
}

void sub_1ADC1EED0(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

uint64_t fst::ArcMap<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,fst::EncodeMapper<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  char v5;
  uint64_t v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  fst *v11;
  _QWORD *v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t *v19;
  BOOL v20;
  _BOOL4 v21;
  uint64_t v22;
  void *v23;
  _QWORD *v24;
  uint64_t v25;
  int *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  int v32;
  _QWORD v33[3];
  int v34;
  int v35;
  _QWORD v36[3];
  float v37;
  uint64_t v38;
  _QWORD v39[3];
  float v40;
  int v41;
  _QWORD v42[3];
  float v43;
  void *__p[2];
  char v45;
  char v46;
  _QWORD v47[2];
  char v48;
  char v49;
  uint64_t v50;
  _QWORD v51[3];
  float v52;
  uint64_t v53;
  int v54;
  _QWORD v55[3];
  float v56;
  int v57;
  uint64_t v58;
  int v59;
  _QWORD v60[3];
  float v61;
  int v62;
  _QWORD v63[3];
  int v64;
  float v65;

  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a1 + 280))(a1, 0);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a1 + 288))(a1, 0);
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  if ((_DWORD)result != -1)
  {
    v30 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 64))(a1, 0x3FFFFFFF0007, 0);
    if (*(_DWORD *)(a2 + 4) == 1 && (*(_BYTE *)a2 & 2) != 0)
    {
      v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 200))(a1);
      v7 = (int *)fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>::One();
      v62 = *v7;
      std::list<int>::list(v63, (uint64_t)(v7 + 2));
      v64 = v7[8];
      v31 = v6;
      (*(void (**)(uint64_t, uint64_t, int *))(*(_QWORD *)a1 + 184))(a1, v6, &v62);
      std::__list_imp<char *>::clear(v63);
      v5 = 0;
    }
    else
    {
      v31 = -1;
      v5 = 1;
    }
    if ((*(int (**)(uint64_t))(*(_QWORD *)a1 + 160))(a1) >= 1)
    {
      v8 = 0;
      while (1)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(_QWORD *)a1 + 296))(a1, v8, &v53);
        while (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v53 + 24))(v53))
        {
          v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v53 + 32))(v53);
          fst::EncodeMapper<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>::operator()((int *)a2, v9, (uint64_t)&v58);
          (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v53 + 88))(v53, &v58);
          std::__list_imp<char *>::clear(v60);
          (*(void (**)(uint64_t))(*(_QWORD *)v53 + 40))(v53);
        }
        if (v53)
          (*(void (**)(void))(*(_QWORD *)v53 + 8))();
        if ((v5 & 1) != 0)
          break;
        if ((_DWORD)v8 != v31)
        {
          (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)a1 + 32))(&v38, a1, v8);
          v53 = 0;
          v54 = v38;
          std::list<int>::list(v55, (uint64_t)v39);
          v56 = v40;
          v57 = -1;
          fst::EncodeMapper<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>::operator()((int *)a2, (uint64_t)&v53, (uint64_t)&v58);
          std::__list_imp<char *>::clear(v55);
          std::__list_imp<char *>::clear(v39);
          if (v58)
          {
            v13 = v59;
            goto LABEL_49;
          }
          v14 = fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>::Zero();
          v13 = v59;
          if (v59)
            v15 = v60[2] + 1;
          else
            v15 = 0;
          if (*(_DWORD *)v14)
            v16 = *(_QWORD *)(v14 + 24) + 1;
          else
            v16 = 0;
          if (v15 != v16)
            goto LABEL_49;
          v17 = 0;
          v18 = v60[1];
          v19 = (uint64_t *)(v14 + 16);
          v20 = v59 && v59 == *(_DWORD *)v14;
          v21 = !v20;
          while (1)
          {
            v22 = *v19;
            if ((v17 & 1) == 0 && v21)
              break;
            if ((_QWORD *)v18 == v60)
              goto LABEL_48;
            if (*(_DWORD *)(v18 + 16) != *(_DWORD *)(v22 + 16))
              goto LABEL_49;
            v18 = *(_QWORD *)(v18 + 8);
            v19 = (uint64_t *)(v22 + 8);
            v17 = 1;
          }
          if (v59)
            goto LABEL_49;
LABEL_48:
          *(float *)&v53 = v61;
          v65 = 0.0;
          v65 = *(float *)(v14 + 32);
          if (v61 != v65)
          {
LABEL_49:
            v25 = v58;
            v35 = v13;
            std::list<int>::list(v36, (uint64_t)v60);
            v37 = v61;
            v53 = v25;
            v54 = v35;
            std::list<int>::list(v55, (uint64_t)v36);
            v56 = v37;
            v57 = v31;
            (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(_QWORD *)a1 + 208))(a1, v8, &v53);
            std::__list_imp<char *>::clear(v55);
            std::__list_imp<char *>::clear(v36);
          }
          v26 = (int *)fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>::Zero();
          v32 = *v26;
          std::list<int>::list(v33, (uint64_t)(v26 + 2));
          v34 = v26[8];
          (*(void (**)(uint64_t, uint64_t, int *))(*(_QWORD *)a1 + 184))(a1, v8, &v32);
          v24 = v33;
LABEL_51:
          std::__list_imp<char *>::clear(v24);
          std::__list_imp<char *>::clear(v60);
        }
        v8 = (v8 + 1);
        if ((int)v8 >= (*(int (**)(uint64_t))(*(_QWORD *)a1 + 160))(a1))
          goto LABEL_53;
      }
      (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)a1 + 32))(&v50, a1, v8);
      v53 = 0;
      v54 = v50;
      std::list<int>::list(v55, (uint64_t)v51);
      v56 = v52;
      v57 = -1;
      fst::EncodeMapper<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>::operator()((int *)a2, (uint64_t)&v53, (uint64_t)&v58);
      std::__list_imp<char *>::clear(v55);
      std::__list_imp<char *>::clear(v51);
      if (!v58)
      {
LABEL_46:
        v41 = v59;
        std::list<int>::list(v42, (uint64_t)v60);
        v43 = v61;
        (*(void (**)(uint64_t, uint64_t, int *))(*(_QWORD *)a1 + 184))(a1, v8, &v41);
        v24 = v42;
        goto LABEL_51;
      }
      v10 = FLAGS_fst_error_fatal;
      if (FLAGS_fst_error_fatal)
      {
        std::string::basic_string[abi:ne180100]<0>(v47, "FATAL");
        v11 = fst::LogMessage::LogMessage((fst *)&v49, (uint64_t)v47);
      }
      else
      {
        std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
        v11 = fst::LogMessage::LogMessage((fst *)&v46, (uint64_t)__p);
      }
      v12 = (_QWORD *)fst::cerr(v11);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"ArcMap: non-zero arc labels for superfinal arc", 46);
      if (v10)
      {
        fst::LogMessage::~LogMessage((fst::LogMessage *)&v49);
        if (v48 < 0)
        {
          v23 = (void *)v47[0];
LABEL_44:
          operator delete(v23);
        }
      }
      else
      {
        fst::LogMessage::~LogMessage((fst::LogMessage *)&v46);
        if (v45 < 0)
        {
          v23 = __p[0];
          goto LABEL_44;
        }
      }
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 192))(a1, 4, 4);
      goto LABEL_46;
    }
LABEL_53:
    v27 = 0x3FFF00000007;
    if ((*(_DWORD *)a2 & 1) == 0)
      v27 = 0x3FFFFFFF0007;
    if ((*(_DWORD *)a2 & 2) != 0)
    {
      v28 = 0x1D7C48100007;
      if (*(_DWORD *)(a2 + 4) == 1)
        v28 = 0x2EBC84200007;
      v27 &= v28;
    }
    if (*(_BYTE *)(a2 + 16))
      v29 = v30 | 4;
    else
      v29 = v30;
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 192))(a1, v27 & v29, 0x3FFFFFFF0007);
  }
  return result;
}

void sub_1ADC1F4D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *__p,uint64_t a34,int a35,__int16 a36,char a37,char a38,int a39,__int16 a40,char a41,char a42,uint64_t a43,uint64_t a44,int a45,__int16 a46,char a47,char a48,int a49,__int16 a50,char a51,char a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58)
{
  _QWORD *v58;

  std::__list_imp<char *>::clear(v58);
  _Unwind_Resume(a1);
}

_QWORD *fst::EncodeMapper<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>::operator()@<X0>(int *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v6;
  int v7;
  int v8;
  int v9;
  int *v10;
  int v11;
  fst *v12;
  _QWORD *v13;
  int v14;
  _QWORD *v15;
  int v16;
  int v17;
  _QWORD *result;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t *v23;
  uint64_t *v24;
  BOOL v25;
  _BOOL4 v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  uint64_t *v35;
  uint64_t *v36;
  BOOL v37;
  _BOOL4 v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  fst *v42;
  _QWORD *v43;
  _DWORD *v44;
  int v45;
  _DWORD *v46;
  int v47;
  _DWORD *v48;
  _DWORD *v49;
  fst *v50;
  _QWORD *v51;
  int *v52;
  int v53;
  _QWORD v54[3];
  int v55;
  int v56;
  _QWORD v57[3];
  int v58;
  void *v59[2];
  char v60;
  char v61;
  void *__p[2];
  char v63;
  char v64;
  void *v65[2];
  char v66;
  char v67;
  int v68;
  _QWORD v69[3];
  int v70;

  v6 = *(_DWORD *)(a2 + 48);
  if (a1[1] != 1)
  {
    if (v6 != -1 && *(_DWORD *)a2)
    {
      v11 = *a1;
      if ((*a1 & 1) != 0 && *(_DWORD *)a2 != *(_DWORD *)(a2 + 4))
      {
        if (FLAGS_fst_error_fatal)
          std::string::basic_string[abi:ne180100]<0>(v65, "FATAL");
        else
          std::string::basic_string[abi:ne180100]<0>(v65, "ERROR");
        v12 = fst::LogMessage::LogMessage((fst *)&v67, (uint64_t)v65);
        v13 = (_QWORD *)fst::cerr(v12);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"EncodeMapper: Label-encoded arc has different input and output labels", 69);
        fst::LogMessage::~LogMessage((fst::LogMessage *)&v67);
        if (v66 < 0)
          operator delete(v65[0]);
        *((_BYTE *)a1 + 16) = 1;
        v11 = *a1;
      }
      if ((v11 & 2) != 0)
      {
        v30 = fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>::One();
        v31 = *(_DWORD *)(a2 + 8);
        v32 = v31 ? *(_QWORD *)(a2 + 32) + 1 : 0;
        v33 = *(_DWORD *)v30 ? *(_QWORD *)(v30 + 24) + 1 : 0;
        if (v32 != v33)
          goto LABEL_66;
        v34 = 0;
        v35 = (uint64_t *)(a2 + 24);
        v36 = (uint64_t *)(v30 + 16);
        v37 = v31 && v31 == *(_DWORD *)v30;
        v38 = !v37;
        v39 = !v38;
        while (1)
        {
          v40 = *v35;
          v41 = *v36;
          if ((v34 & 1) == 0 && !v39)
            break;
          if (v40 == a2 + 16)
            goto LABEL_65;
          if (*(_DWORD *)(v40 + 16) != *(_DWORD *)(v41 + 16))
            goto LABEL_66;
          v35 = (uint64_t *)(v40 + 8);
          v36 = (uint64_t *)(v41 + 8);
          v34 = 1;
        }
        if (v31)
          goto LABEL_66;
LABEL_65:
        LODWORD(__p[0]) = 0;
        LODWORD(__p[0]) = *(_DWORD *)(a2 + 40);
        LODWORD(v59[0]) = 0;
        LODWORD(v59[0]) = *(_DWORD *)(v30 + 32);
        if (*(float *)__p != *(float *)v59)
        {
LABEL_66:
          if (FLAGS_fst_error_fatal)
            std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
          else
            std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
          v42 = fst::LogMessage::LogMessage((fst *)&v64, (uint64_t)__p);
          v43 = (_QWORD *)fst::cerr(v42);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"EncodeMapper: Weight-encoded arc has non-trivial weight", 55);
          fst::LogMessage::~LogMessage((fst::LogMessage *)&v64);
          if (v63 < 0)
            operator delete(__p[0]);
          *((_BYTE *)a1 + 16) = 1;
        }
      }
      v44 = (_DWORD *)fst::EncodeTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>::Decode(*((_QWORD *)a1 + 1), *(_DWORD *)a2);
      if (v44)
      {
        v45 = *v44;
        if ((*a1 & 1) != 0)
          v46 = v44;
        else
          v46 = (_DWORD *)a2;
        v47 = v46[1];
        if ((*a1 & 2) != 0)
          v48 = v44;
        else
          v48 = (_DWORD *)a2;
        if ((*a1 & 2) != 0)
          v49 = v44 + 2;
        else
          v49 = (_DWORD *)(a2 + 8);
        v53 = v48[2];
        v15 = v54;
        std::list<int>::list(v54, (uint64_t)(v49 + 2));
        v55 = v49[8];
        v16 = *(_DWORD *)(a2 + 48);
        *(_DWORD *)a3 = v45;
        *(_DWORD *)(a3 + 4) = v47;
        *(_DWORD *)(a3 + 8) = v53;
        std::list<int>::list((_QWORD *)(a3 + 16), (uint64_t)v54);
        v17 = v55;
      }
      else
      {
        if (FLAGS_fst_error_fatal)
          std::string::basic_string[abi:ne180100]<0>(v59, "FATAL");
        else
          std::string::basic_string[abi:ne180100]<0>(v59, "ERROR");
        v50 = fst::LogMessage::LogMessage((fst *)&v61, (uint64_t)v59);
        v51 = (_QWORD *)fst::cerr(v50);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v51, (uint64_t)"EncodeMapper: decode failed", 27);
        fst::LogMessage::~LogMessage((fst::LogMessage *)&v61);
        if (v60 < 0)
          operator delete(v59[0]);
        *((_BYTE *)a1 + 16) = 1;
        v52 = (int *)fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>::NoWeight();
        v56 = *v52;
        v15 = v57;
        std::list<int>::list(v57, (uint64_t)(v52 + 2));
        v58 = v52[8];
        v16 = *(_DWORD *)(a2 + 48);
        *(_QWORD *)a3 = -1;
        *(_DWORD *)(a3 + 8) = v56;
        std::list<int>::list((_QWORD *)(a3 + 16), (uint64_t)v57);
        v17 = v58;
      }
      goto LABEL_89;
    }
    *(_QWORD *)a3 = *(_QWORD *)a2;
    v14 = *(_DWORD *)(a2 + 8);
    goto LABEL_20;
  }
  if (v6 == -1)
  {
    if ((*(_BYTE *)a1 & 2) != 0)
    {
      v19 = fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>::Zero();
      v14 = *(_DWORD *)(a2 + 8);
      if (v14)
        v20 = *(_QWORD *)(a2 + 32) + 1;
      else
        v20 = 0;
      if (*(_DWORD *)v19)
        v21 = *(_QWORD *)(v19 + 24) + 1;
      else
        v21 = 0;
      if (v20 != v21)
        goto LABEL_3;
      v22 = 0;
      v23 = (uint64_t *)(a2 + 24);
      v24 = (uint64_t *)(v19 + 16);
      v25 = v14 && v14 == *(_DWORD *)v19;
      v26 = !v25;
      v27 = !v26;
      while (1)
      {
        v28 = *v23;
        v29 = *v24;
        if ((v22 & 1) == 0 && !v27)
          break;
        if (v28 == a2 + 16)
          goto LABEL_91;
        if (*(_DWORD *)(v28 + 16) != *(_DWORD *)(v29 + 16))
          goto LABEL_3;
        v23 = (uint64_t *)(v28 + 8);
        v24 = (uint64_t *)(v29 + 8);
        v22 = 1;
      }
      if (v14)
        goto LABEL_3;
LABEL_91:
      LODWORD(v65[0]) = 0;
      LODWORD(v65[0]) = *(_DWORD *)(a2 + 40);
      LODWORD(__p[0]) = 0;
      LODWORD(__p[0]) = *(_DWORD *)(v19 + 32);
      if (*(float *)v65 != *(float *)__p)
        goto LABEL_3;
    }
    else
    {
      v14 = *(_DWORD *)(a2 + 8);
    }
    *(_QWORD *)a3 = *(_QWORD *)a2;
LABEL_20:
    *(_DWORD *)(a3 + 8) = v14;
    result = std::list<int>::list((_QWORD *)(a3 + 16), a2 + 16);
    *(_DWORD *)(a3 + 40) = *(_DWORD *)(a2 + 40);
    *(_DWORD *)(a3 + 48) = *(_DWORD *)(a2 + 48);
    return result;
  }
LABEL_3:
  v7 = fst::EncodeTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>::Encode(*((_QWORD *)a1 + 1), (unsigned int *)a2);
  v8 = v7;
  if ((*a1 & 1) != 0)
    v9 = v7;
  else
    v9 = *(_DWORD *)(a2 + 4);
  if ((*a1 & 2) != 0)
    v10 = (int *)fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>::One();
  else
    v10 = (int *)(a2 + 8);
  v68 = *v10;
  v15 = v69;
  std::list<int>::list(v69, (uint64_t)(v10 + 2));
  v70 = v10[8];
  v16 = *(_DWORD *)(a2 + 48);
  *(_DWORD *)a3 = v8;
  *(_DWORD *)(a3 + 4) = v9;
  *(_DWORD *)(a3 + 8) = v68;
  std::list<int>::list((_QWORD *)(a3 + 16), (uint64_t)v69);
  v17 = v70;
LABEL_89:
  *(_DWORD *)(a3 + 40) = v17;
  *(_DWORD *)(a3 + 48) = v16;
  return std::__list_imp<char *>::clear(v15);
}

void sub_1ADC1FB1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  fst::LogMessage::~LogMessage((fst::LogMessage *)&a29);
  if (a25 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t fst::EncodeTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>::Encode(uint64_t a1, unsigned int *a2)
{
  unsigned int v3;
  int v4;
  int *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t *v10;
  int **v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  uint64_t *v18;
  char *v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  int v25;
  _QWORD v26[3];
  int v27;
  unint64_t v28;
  int v29;
  _QWORD v30[3];
  int v31;
  unint64_t *v32;

  v3 = *a2;
  v4 = ((int)(*(_DWORD *)a1 << 31) >> 31) & a2[1];
  if ((*(_DWORD *)a1 & 2) != 0)
    v5 = (int *)(a2 + 2);
  else
    v5 = (int *)fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>::One();
  v25 = *v5;
  std::list<int>::list(v26, (uint64_t)(v5 + 2));
  v27 = v5[8];
  v28 = __PAIR64__(v4, v3);
  v29 = v25;
  std::list<int>::list(v30, (uint64_t)v26);
  v31 = v27;
  std::__list_imp<char *>::clear(v26);
  v32 = &v28;
  v6 = std::__hash_table<std::__hash_value_type<fst::EncodeTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>::Tuple const*,int>,std::__unordered_map_hasher<fst::EncodeTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>::Tuple const*,std::__hash_value_type<fst::EncodeTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>::Tuple const*,int>,fst::EncodeTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>::TupleKey,fst::EncodeTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>::TupleEqual,false>,std::__unordered_map_equal<fst::EncodeTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>::Tuple const*,std::__hash_value_type<fst::EncodeTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>::Tuple const*,int>,fst::EncodeTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>::TupleEqual,fst::EncodeTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>::TupleKey,true>,std::allocator<std::__hash_value_type<fst::EncodeTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>::Tuple const*,int>>>::find<fst::EncodeTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>::Tuple const*>((_QWORD *)(a1 + 32), (int **)&v32);
  if (v6)
  {
    v7 = *((unsigned int *)v6 + 6);
  }
  else
  {
    v8 = operator new();
    *(_QWORD *)v8 = v28;
    *(_DWORD *)(v8 + 8) = v29;
    std::list<int>::list((_QWORD *)(v8 + 16), (uint64_t)v30);
    *(_DWORD *)(v8 + 40) = v31;
    v9 = *(_QWORD *)(a1 + 24);
    v10 = *(uint64_t **)(a1 + 16);
    if ((unint64_t)v10 >= v9)
    {
      v12 = *(_QWORD *)(a1 + 8);
      v13 = ((uint64_t)v10 - v12) >> 3;
      if ((unint64_t)(v13 + 1) >> 61)
        std::vector<int>::__throw_length_error[abi:ne180100]();
      v14 = v9 - v12;
      v15 = v14 >> 2;
      if (v14 >> 2 <= (unint64_t)(v13 + 1))
        v15 = v13 + 1;
      if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF8)
        v16 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v16 = v15;
      if (v16)
        v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>(a1 + 24, v16);
      else
        v17 = 0;
      v18 = (uint64_t *)&v17[8 * v13];
      v19 = &v17[8 * v16];
      *v18 = v8;
      v11 = (int **)(v18 + 1);
      v21 = *(char **)(a1 + 8);
      v20 = *(char **)(a1 + 16);
      if (v20 != v21)
      {
        do
        {
          v22 = *((_QWORD *)v20 - 1);
          v20 -= 8;
          *--v18 = v22;
        }
        while (v20 != v21);
        v20 = *(char **)(a1 + 8);
      }
      *(_QWORD *)(a1 + 8) = v18;
      *(_QWORD *)(a1 + 16) = v11;
      *(_QWORD *)(a1 + 24) = v19;
      if (v20)
        operator delete(v20);
    }
    else
    {
      *v10 = v8;
      v11 = (int **)(v10 + 1);
    }
    *(_QWORD *)(a1 + 16) = v11;
    v23 = *(_QWORD *)(a1 + 8);
    v32 = (unint64_t *)(v11 - 1);
    *((_DWORD *)std::__hash_table<std::__hash_value_type<fst::EncodeTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>::Tuple const*,int>,std::__unordered_map_hasher<fst::EncodeTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>::Tuple const*,std::__hash_value_type<fst::EncodeTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>::Tuple const*,int>,fst::EncodeTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>::TupleKey,fst::EncodeTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>::TupleEqual,false>,std::__unordered_map_equal<fst::EncodeTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>::Tuple const*,std::__hash_value_type<fst::EncodeTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>::Tuple const*,int>,fst::EncodeTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>::TupleEqual,fst::EncodeTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>::TupleKey,true>,std::allocator<std::__hash_value_type<fst::EncodeTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>::Tuple const*,int>>>::__emplace_unique_key_args<fst::EncodeTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>::Tuple const*,std::piecewise_construct_t const&,std::tuple<fst::EncodeTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>::Tuple const* const&>,std::tuple<>>(a1 + 32, v11 - 1, (uint64_t)&std::piecewise_construct, &v32)+ 6) = ((unint64_t)v11 - v23) >> 3;
    v7 = (*(_QWORD *)(a1 + 16) - *(_QWORD *)(a1 + 8)) >> 3;
  }
  std::__list_imp<char *>::clear(v30);
  return v7;
}

void sub_1ADC1FDD8(_Unwind_Exception *a1)
{
  _QWORD *v1;

  std::__list_imp<char *>::clear(v1);
  _Unwind_Resume(a1);
}

uint64_t fst::EncodeTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>::Decode(uint64_t a1, int a2)
{
  uint64_t v2;
  fst *v3;
  _QWORD *v4;
  void *__p[2];
  char v7;
  char v8;

  if (a2 >= 1)
  {
    v2 = *(_QWORD *)(a1 + 8);
    if (a2 <= (unint64_t)((*(_QWORD *)(a1 + 16) - v2) >> 3))
      return *(_QWORD *)(v2 + 8 * (a2 - 1));
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
  v3 = fst::LogMessage::LogMessage((fst *)&v8, (uint64_t)__p);
  v4 = (_QWORD *)fst::cerr(v3);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"EncodeTable::Decode: unknown decode key: ", 41);
  std::ostream::operator<<();
  fst::LogMessage::~LogMessage((fst::LogMessage *)&v8);
  if (v7 < 0)
    operator delete(__p[0]);
  return 0;
}

void sub_1ADC1FEBC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *std::__hash_table<std::__hash_value_type<fst::EncodeTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>::Tuple const*,int>,std::__unordered_map_hasher<fst::EncodeTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>::Tuple const*,std::__hash_value_type<fst::EncodeTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>::Tuple const*,int>,fst::EncodeTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>::TupleKey,fst::EncodeTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>::TupleEqual,false>,std::__unordered_map_equal<fst::EncodeTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>::Tuple const*,std::__hash_value_type<fst::EncodeTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>::Tuple const*,int>,fst::EncodeTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>::TupleEqual,fst::EncodeTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>::TupleKey,true>,std::allocator<std::__hash_value_type<fst::EncodeTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>::Tuple const*,int>>>::find<fst::EncodeTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>::Tuple const*>(_QWORD *a1, int **a2)
{
  unint64_t v4;
  int8x8_t v5;
  unint64_t v6;
  uint8x8_t v7;
  unint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  unint64_t v13;

  v4 = fst::EncodeTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>::TupleKey::operator()((uint64_t)(a1 + 4), *a2);
  v5 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v5)
    return 0;
  v6 = v4;
  v7 = (uint8x8_t)vcnt_s8(v5);
  v7.i16[0] = vaddlv_u8(v7);
  v8 = v7.u32[0];
  if (v7.u32[0] > 1uLL)
  {
    v9 = v4;
    if (v4 >= *(_QWORD *)&v5)
      v9 = v4 % *(_QWORD *)&v5;
  }
  else
  {
    v9 = (*(_QWORD *)&v5 - 1) & v4;
  }
  v10 = *(_QWORD **)(*a1 + 8 * v9);
  if (!v10)
    return 0;
  v11 = (_QWORD *)*v10;
  if (*v10)
  {
    v12 = (uint64_t)(a1 + 5);
    do
    {
      v13 = v11[1];
      if (v13 == v6)
      {
        if (fst::EncodeTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>::TupleEqual::operator()(v12, v11[2], (uint64_t)*a2))
        {
          return v11;
        }
      }
      else
      {
        if (v8 > 1)
        {
          if (v13 >= *(_QWORD *)&v5)
            v13 %= *(_QWORD *)&v5;
        }
        else
        {
          v13 &= *(_QWORD *)&v5 - 1;
        }
        if (v13 != v9)
          return 0;
      }
      v11 = (_QWORD *)*v11;
    }
    while (v11);
  }
  return v11;
}

uint64_t fst::EncodeTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>::TupleKey::operator()(uint64_t a1, int *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a2;
  if (!*(_BYTE *)(a1 + 4))
  {
    if (!*(_BYTE *)(a1 + 5))
      return *a2;
    v3 = 7867 * fst::PairWeight<fst::StringWeight<int,(fst::StringType)1>,fst::LogWeightTpl<float>>::Hash(a2 + 2);
    goto LABEL_6;
  }
  v3 = v2 + 7853 * a2[1];
  if (*(_BYTE *)(a1 + 5))
  {
    v2 = 7867 * fst::PairWeight<fst::StringWeight<int,(fst::StringType)1>,fst::LogWeightTpl<float>>::Hash(a2 + 2);
LABEL_6:
    v3 += v2;
  }
  return v3;
}

BOOL fst::EncodeTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>::TupleEqual::operator()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  char v7;
  uint64_t *v8;
  uint64_t *v9;
  BOOL v10;
  int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;

  if (*(_DWORD *)a2 != *(_DWORD *)a3 || *(_DWORD *)(a2 + 4) != *(_DWORD *)(a3 + 4))
    return 0;
  v3 = *(_DWORD *)(a2 + 8);
  v4 = v3 ? *(_QWORD *)(a2 + 32) + 1 : 0;
  v5 = *(_DWORD *)(a3 + 8);
  v6 = v5 ? *(_QWORD *)(a3 + 32) + 1 : 0;
  if (v4 != v6)
    return 0;
  v7 = 0;
  v8 = (uint64_t *)(a2 + 24);
  v9 = (uint64_t *)(a3 + 24);
  if (v3)
    v10 = v3 == v5;
  else
    v10 = 0;
  v11 = !v10;
  v12 = v11 ^ 1;
  while (1)
  {
    v13 = *v8;
    v14 = *v9;
    if ((v7 & 1) == 0 && !v12)
      break;
    if (v13 == a2 + 16)
      return *(float *)(a2 + 40) == *(float *)(a3 + 40);
    if (*(_DWORD *)(v13 + 16) != *(_DWORD *)(v14 + 16))
      return 0;
    v8 = (uint64_t *)(v13 + 8);
    v9 = (uint64_t *)(v14 + 8);
    v7 = 1;
  }
  if (v3)
    return 0;
  return *(float *)(a2 + 40) == *(float *)(a3 + 40);
}

_QWORD *std::__hash_table<std::__hash_value_type<fst::EncodeTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>::Tuple const*,int>,std::__unordered_map_hasher<fst::EncodeTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>::Tuple const*,std::__hash_value_type<fst::EncodeTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>::Tuple const*,int>,fst::EncodeTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>::TupleKey,fst::EncodeTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>::TupleEqual,false>,std::__unordered_map_equal<fst::EncodeTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>::Tuple const*,std::__hash_value_type<fst::EncodeTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>::Tuple const*,int>,fst::EncodeTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>::TupleEqual,fst::EncodeTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>::TupleKey,true>,std::allocator<std::__hash_value_type<fst::EncodeTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>::Tuple const*,int>>>::__emplace_unique_key_args<fst::EncodeTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>::Tuple const*,std::piecewise_construct_t const&,std::tuple<fst::EncodeTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>::Tuple const* const&>,std::tuple<>>(uint64_t a1, int **a2, uint64_t a3, _QWORD **a4)
{
  unint64_t v4;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  unint64_t v12;
  void **v13;
  _QWORD *v14;
  unint64_t v15;
  float v16;
  float v17;
  _BOOL8 v18;
  unint64_t v19;
  unint64_t v20;
  size_t v21;
  uint64_t v22;
  _QWORD *v23;
  unint64_t v24;

  v8 = fst::EncodeTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>::TupleKey::operator()(a1 + 32, *a2);
  v9 = v8;
  v10 = *(_QWORD *)(a1 + 8);
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      v4 = v8;
      if (v8 >= v10)
        v4 = v8 % v10;
    }
    else
    {
      v4 = (v10 - 1) & v8;
    }
    v13 = *(void ***)(*(_QWORD *)a1 + 8 * v4);
    if (v13)
    {
      v14 = *v13;
      if (*v13)
      {
        do
        {
          v15 = v14[1];
          if (v15 == v9)
          {
            if (fst::EncodeTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>::TupleEqual::operator()(a1 + 40, v14[2], (uint64_t)*a2))
            {
              return v14;
            }
          }
          else
          {
            if (v12 > 1)
            {
              if (v15 >= v10)
                v15 %= v10;
            }
            else
            {
              v15 &= v10 - 1;
            }
            if (v15 != v4)
              break;
          }
          v14 = (_QWORD *)*v14;
        }
        while (v14);
      }
    }
  }
  v14 = operator new(0x20uLL);
  *v14 = 0;
  v14[1] = v9;
  v14[2] = **a4;
  *((_DWORD *)v14 + 6) = 0;
  v16 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v17 = *(float *)(a1 + 40);
  if (!v10 || (float)(v17 * (float)v10) < v16)
  {
    v18 = 1;
    if (v10 >= 3)
      v18 = (v10 & (v10 - 1)) != 0;
    v19 = v18 | (2 * v10);
    v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20)
      v21 = v20;
    else
      v21 = v19;
    std::__hash_table<int,fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashFunc,fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashEqual,std::allocator<int>>::__rehash<true>(a1, v21);
    v10 = *(_QWORD *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
        v4 = v9 % v10;
      else
        v4 = v9;
    }
    else
    {
      v4 = (v10 - 1) & v9;
    }
  }
  v22 = *(_QWORD *)a1;
  v23 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v23)
  {
    *v14 = *v23;
LABEL_38:
    *v23 = v14;
    goto LABEL_39;
  }
  *v14 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v14;
  *(_QWORD *)(v22 + 8 * v4) = a1 + 16;
  if (*v14)
  {
    v24 = *(_QWORD *)(*v14 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v24 >= v10)
        v24 %= v10;
    }
    else
    {
      v24 &= v10 - 1;
    }
    v23 = (_QWORD *)(*(_QWORD *)a1 + 8 * v24);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return v14;
}

void sub_1ADC20374(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void fst::Connect<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>(uint64_t a1)
{
  unint64_t v2;
  char *v3;
  unint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  char *v12;
  int v13;
  void *__p;
  char *v15;
  char *v16;
  uint64_t v17[11];
  uint64_t v18;
  void *v19[3];
  _QWORD *v20;
  unint64_t v21;
  uint64_t v22;

  v20 = 0;
  v21 = 0;
  v22 = 0;
  memset(v19, 0, sizeof(v19));
  v18 = 0;
  v17[0] = 0;
  v17[1] = (uint64_t)&v20;
  v17[2] = (uint64_t)v19;
  v17[3] = (uint64_t)&v18;
  fst::DfsVisit<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,fst::SccVisitor<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>,fst::AnyArcFilter<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>(a1, v17, 0);
  __p = 0;
  v15 = 0;
  v16 = 0;
  v2 = v21;
  if (v21)
  {
    v3 = 0;
    v4 = 0;
    do
    {
      if ((v20[v4 >> 6] & (1 << v4)) == 0 || (*((_QWORD *)v19[0] + (v4 >> 6)) & (1 << v4)) == 0)
      {
        if (v3 >= v16)
        {
          v6 = (char *)__p;
          v7 = (v3 - (_BYTE *)__p) >> 2;
          v8 = v7 + 1;
          if ((unint64_t)(v7 + 1) >> 62)
            std::vector<int>::__throw_length_error[abi:ne180100]();
          v9 = v16 - (_BYTE *)__p;
          if ((v16 - (_BYTE *)__p) >> 1 > v8)
            v8 = v9 >> 1;
          if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFFCLL)
            v10 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v10 = v8;
          if (v10)
          {
            v11 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v16, v10);
            v6 = (char *)__p;
            v3 = v15;
          }
          else
          {
            v11 = 0;
          }
          v12 = &v11[4 * v7];
          *(_DWORD *)v12 = v4;
          v5 = v12 + 4;
          while (v3 != v6)
          {
            v13 = *((_DWORD *)v3 - 1);
            v3 -= 4;
            *((_DWORD *)v12 - 1) = v13;
            v12 -= 4;
          }
          __p = v12;
          v15 = v5;
          v16 = &v11[4 * v10];
          if (v6)
            operator delete(v6);
        }
        else
        {
          *(_DWORD *)v3 = v4;
          v5 = v3 + 4;
        }
        v15 = v5;
        v2 = v21;
        v3 = v5;
      }
      ++v4;
    }
    while (v2 > v4);
  }
  (*(void (**)(uint64_t, void **))(*(_QWORD *)a1 + 216))(a1, &__p);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 192))(a1, 0x50000000000, 0x50000000000);
  if (__p)
  {
    v15 = (char *)__p;
    operator delete(__p);
  }
  if (v19[0])
    operator delete(v19[0]);
  if (v20)
    operator delete(v20);
}

void sub_1ADC2055C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  uint64_t v11;
  void *v13;
  void *v14;

  v13 = *(void **)(v11 - 112);
  if (v13)
    operator delete(v13);
  v14 = *(void **)(v11 - 88);
  if (v14)
    operator delete(v14);
  _Unwind_Resume(exception_object);
}

void fst::ArcSort<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,fst::ILabelCompare<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>(uint64_t a1)
{
  uint64_t v1[2];
  _OWORD v2[2];
  uint64_t v3;
  char *v4;
  _OWORD v5[2];
  char v6;
  void **v7;

  v3 = a1;
  v4 = &v6;
  memset(v5, 0, sizeof(v5));
  v1[0] = a1;
  v1[1] = (uint64_t)&v6;
  memset(v2, 0, sizeof(v2));
  fst::StateMap<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,fst::ArcSortMapper<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,fst::ILabelCompare<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>(a1, v1);
  v7 = (void **)v2;
  std::vector<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>::__destroy_vector::operator()[abi:ne180100](&v7);
  v7 = (void **)v5;
  std::vector<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>::__destroy_vector::operator()[abi:ne180100](&v7);
}

void sub_1ADC20610(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v4 = v1;
  *(_QWORD *)(v3 - 40) = v2;
  std::vector<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v3 - 40));
  *(_QWORD *)(v3 - 40) = v4;
  std::vector<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v3 - 40));
  _Unwind_Resume(a1);
}

void fst::MergeStates<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  std::vector<int>::pointer begin;
  unint64_t v10;
  unsigned int *v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  int v17;
  _QWORD v18[3];
  int v19;
  int v20;
  uint64_t v21;
  std::vector<int> v22;

  std::vector<int>::vector(&v22, (int)((uint64_t)(a1[5] - a1[4]) >> 3));
  v5 = a1[4];
  v4 = a1[5];
  v6 = v4 - v5;
  if (((unint64_t)(v4 - v5) >> 3))
  {
    v7 = 0;
    v8 = (int)(v6 >> 3);
    begin = v22.__begin_;
    if (v8 <= 1)
      v8 = 1;
    do
    {
      *begin++ = **(_DWORD **)(v5 + (v7 >> 29));
      v7 += 0x100000000;
      --v8;
    }
    while (v8);
  }
  if ((v6 & 0x7FFFFFFF8) != 0)
  {
    v10 = 0;
    do
    {
      v11 = *(unsigned int **)(v5 + 8 * (int)v10);
      if (v11)
      {
        do
        {
          v12 = *v11;
          (*(void (**)(uint64_t, _QWORD, uint64_t *))(*(_QWORD *)a2 + 296))(a2, *v11, &v21);
          while (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v21 + 24))(v21))
          {
            v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v21 + 32))(v21);
            v16 = *(_QWORD *)v13;
            v17 = *(_DWORD *)(v13 + 8);
            std::list<int>::list(v18, v13 + 16);
            v14 = *(int *)(v13 + 48);
            v19 = *(_DWORD *)(v13 + 40);
            v20 = v14;
            v20 = v22.__begin_[*(int *)(a1[10] + 4 * v14)];
            if (v12 == v22.__begin_[v10])
              (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v21 + 88))(v21, &v16);
            else
              (*(void (**)(uint64_t))(*(_QWORD *)a2 + 208))(a2);
            std::__list_imp<char *>::clear(v18);
            (*(void (**)(uint64_t))(*(_QWORD *)v21 + 40))(v21);
          }
          if (v21)
            (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
          v11 = (unsigned int *)*((_QWORD *)v11 + 1);
        }
        while (v11);
        v5 = a1[4];
        v4 = a1[5];
      }
      ++v10;
    }
    while (v10 < (int)((unint64_t)(v4 - v5) >> 3));
  }
  v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 176))(a2, v22.__begin_[*(int *)(a1[10] + 4 * v15)]);
  fst::Connect<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>(a2);
  if (v22.__begin_)
  {
    v22.__end_ = v22.__begin_;
    operator delete(v22.__begin_);
  }
}

void sub_1ADC20848(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t fst::StateMap<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,fst::ArcSortMapper<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,fst::ILabelCompare<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>(uint64_t a1, uint64_t *a2)
{
  uint64_t result;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t i;
  uint64_t v9;
  uint64_t v10;
  _QWORD v11[4];

  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  if ((_DWORD)result != -1)
  {
    v5 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 64))(a1, 0x3FFFFFFF0007, 0);
    v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)*a2 + 24))(*a2);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 176))(a1, v6);
    if ((*(int (**)(uint64_t))(*(_QWORD *)a1 + 160))(a1) >= 1)
    {
      v7 = 0;
      do
      {
        fst::ArcSortMapper<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,fst::ILabelCompare<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>::SetState(a2, v7);
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 240))(a1, v7);
        for (i = a2[5]; ; a2[5] = i)
        {
          v9 = a2[2];
          if (i >= 0x6DB6DB6DB6DB6DB7 * ((a2[3] - v9) >> 3))
            break;
          (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)a1 + 208))(a1, v7, v9 + 56 * i);
          i = a2[5] + 1;
        }
        (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)*a2 + 32))(&v10, *a2, v7);
        (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(_QWORD *)a1 + 184))(a1, v7, &v10);
        std::__list_imp<char *>::clear(v11);
        v7 = (v7 + 1);
      }
      while ((int)v7 < (*(int (**)(uint64_t))(*(_QWORD *)a1 + 160))(a1));
    }
    return (*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)a1 + 192))(a1, v5 & 0x3FFF0FFF0007 | (((v5 >> 16) & 1) << 30) | 0x10000000, 0x3FFFFFFF0007);
  }
  return result;
}

void sub_1ADC20A54(_Unwind_Exception *a1)
{
  _QWORD *v1;

  std::__list_imp<char *>::clear(v1);
  _Unwind_Resume(a1);
}

_QWORD *fst::ArcSortMapper<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,fst::ILabelCompare<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>::SetState(uint64_t *a1, uint64_t a2)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD v18[3];
  _DWORD *v19;
  unint64_t v20;

  v4 = a1 + 2;
  v5 = a1[2];
  a1[5] = 0;
  v6 = a1[3];
  if (v6 != v5)
  {
    do
    {
      v7 = v6 - 56;
      std::__list_imp<char *>::clear((_QWORD *)(v6 - 40));
      v6 = v7;
    }
    while (v7 != v5);
  }
  a1[3] = v5;
  v8 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)*a1 + 40))(*a1, a2);
  std::vector<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>::reserve(v4, v8);
  v9 = *a1;
  v20 = 0;
  (*(void (**)(uint64_t, uint64_t, _QWORD *))(*(_QWORD *)v9 + 136))(v9, a2, v18);
  while (1)
  {
    if (!v18[0])
    {
      if (v20 >= v18[2])
        goto LABEL_18;
      goto LABEL_9;
    }
    if ((*(unsigned int (**)(_QWORD))(*(_QWORD *)v18[0] + 24))(v18[0]))
      break;
    if (v18[0])
    {
      v10 = (*(uint64_t (**)(void))(*(_QWORD *)v18[0] + 32))();
      goto LABEL_10;
    }
LABEL_9:
    v10 = v18[1] + 56 * v20;
LABEL_10:
    v11 = a1[3];
    if (v11 >= a1[4])
    {
      v12 = std::vector<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>::__push_back_slow_path<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0> const&>(v4, v10);
    }
    else
    {
      std::vector<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>::__construct_one_at_end[abi:ne180100]<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0> const&>((uint64_t)v4, v10);
      v12 = v11 + 56;
    }
    a1[3] = v12;
    if (v18[0])
      (*(void (**)(_QWORD))(*(_QWORD *)v18[0] + 40))(v18[0]);
    else
      ++v20;
  }
  if (v18[0])
  {
    (*(void (**)(void))(*(_QWORD *)v18[0] + 8))();
    goto LABEL_20;
  }
LABEL_18:
  if (v19)
    --*v19;
LABEL_20:
  v13 = (_QWORD *)a1[2];
  v14 = (uint64_t *)a1[3];
  v15 = 126 - 2 * __clz(0x6DB6DB6DB6DB6DB7 * (v14 - v13));
  if (v14 == v13)
    v16 = 0;
  else
    v16 = v15;
  return std::__introsort<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>> &,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>*,false>(v13, v14, (uint64_t)v18, v16, 1);
}

void sub_1ADC20C20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  else
    fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::OrderedExpand<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>((uint64_t)&a10);
  _Unwind_Resume(a1);
}

_QWORD *std::__introsort<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>> &,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>*,false>(_QWORD *result, uint64_t *a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  int v19;
  int v20;
  unint64_t v21;
  char v22;
  char v23;
  uint64_t *v24;
  uint64_t v25;
  _QWORD *v26;
  int v27;
  int v28;
  int v29;
  uint64_t v30;
  uint64_t v31[3];
  int v32;
  int v33;
  uint64_t v34;
  int v35;
  _QWORD v36[3];
  int v37;
  int v38;
  uint64_t v39;
  int v40;
  uint64_t v41[3];
  int v42;
  int v43;
  uint64_t v44;
  int v45;
  _QWORD v46[3];
  int v47;
  int v48;

  v8 = (uint64_t)result;
LABEL_2:
  v9 = v8;
LABEL_3:
  v10 = 1 - a4;
  while (2)
  {
    v8 = v9;
    v11 = v10;
    v12 = (uint64_t)a2 - v9;
    v13 = 0x6DB6DB6DB6DB6DB7 * (((uint64_t)a2 - v9) >> 3);
    switch(v13)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        v25 = *(a2 - 7);
        v24 = a2 - 7;
        v44 = v25;
        v45 = *((_DWORD *)v24 + 2);
        std::list<int>::list(v46, (uint64_t)(v24 + 2));
        v47 = *((_DWORD *)v24 + 10);
        v48 = *((_DWORD *)v24 + 12);
        v39 = *(_QWORD *)v9;
        v40 = *(_DWORD *)(v9 + 8);
        v26 = std::list<int>::list(v41, v9 + 16);
        v27 = *(_DWORD *)(v9 + 48);
        v42 = *(_DWORD *)(v9 + 40);
        v43 = v27;
        v28 = v44;
        v29 = v39;
        std::__list_imp<char *>::clear(v26);
        result = std::__list_imp<char *>::clear(v46);
        if (v28 < v29)
          return std::swap[abi:ne180100]<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>((uint64_t *)v9, v24);
        return result;
      case 3uLL:
        return (_QWORD *)std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>> &,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>*>(v9, v9 + 56, (uint64_t)(a2 - 7));
      case 4uLL:
        return std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>> &,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>*>(v9, v9 + 56, v9 + 112, (uint64_t)(a2 - 7));
      case 5uLL:
        return std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>> &,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>*>(v9, v9 + 56, v9 + 112, v9 + 168, (uint64_t)(a2 - 7));
      default:
        if (v12 <= 1343)
        {
          if ((a5 & 1) != 0)
            return std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>> &,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>*>((_QWORD *)v9, a2);
          else
            return std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>> &,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>*>((_QWORD *)v9, a2);
        }
        if (v11 != 1)
        {
          v14 = v13 >> 1;
          v15 = (uint64_t *)(v9 + 56 * (v13 >> 1));
          if ((unint64_t)v12 < 0x1C01)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>> &,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>*>((uint64_t)v15, v8, (uint64_t)(a2 - 7));
            if ((a5 & 1) != 0)
              goto LABEL_12;
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>> &,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>*>(v8, (uint64_t)v15, (uint64_t)(a2 - 7));
            v16 = 56 * v14;
            v17 = 56 * v14 + v8 - 56;
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>> &,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>*>(v8 + 56, v17, (uint64_t)(a2 - 14));
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>> &,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>*>(v8 + 112, v8 + 56 + v16, (uint64_t)(a2 - 21));
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>> &,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>*>(v17, (uint64_t)v15, v8 + 56 + v16);
            std::swap[abi:ne180100]<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>((uint64_t *)v8, v15);
            if ((a5 & 1) != 0)
              goto LABEL_12;
          }
          v34 = *(_QWORD *)(v8 - 56);
          v35 = *(_DWORD *)(v8 - 48);
          std::list<int>::list(v36, v8 - 40);
          v37 = *(_DWORD *)(v8 - 16);
          v38 = *(_DWORD *)(v8 - 8);
          v30 = *(_QWORD *)v8;
          v18 = std::list<int>::list(v31, v8 + 16);
          v19 = *(_DWORD *)(v8 + 48);
          v32 = *(_DWORD *)(v8 + 40);
          v33 = v19;
          v20 = v34;
          std::__list_imp<char *>::clear(v18);
          std::__list_imp<char *>::clear(v36);
          if (v20 >= (int)v30)
          {
            result = (_QWORD *)std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0> *,fst::ILabelCompare<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>> &>((uint64_t *)v8, a2);
            v9 = (uint64_t)result;
            goto LABEL_17;
          }
LABEL_12:
          v21 = std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0> *,fst::ILabelCompare<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>> &>((uint64_t *)v8, (unint64_t)a2);
          if ((v22 & 1) == 0)
            goto LABEL_15;
          v23 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>> &,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>*>(v8, v21);
          v9 = v21 + 56;
          result = (_QWORD *)std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>> &,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>*>(v21 + 56, (uint64_t)a2);
          if (!(_DWORD)result)
          {
            v10 = v11 + 1;
            if ((v23 & 1) != 0)
              continue;
LABEL_15:
            result = (_QWORD *)std::__introsort<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>> &,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>*,false>(v8, v21, a3, -v11, a5 & 1);
            v9 = v21 + 56;
LABEL_17:
            a5 = 0;
            a4 = -v11;
            goto LABEL_3;
          }
          a4 = -v11;
          a2 = (uint64_t *)v21;
          if ((v23 & 1) != 0)
            return result;
          goto LABEL_2;
        }
        if ((uint64_t *)v9 != a2)
          return (_QWORD *)std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>> &,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>*,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>*>((uint64_t *)v9, (uint64_t)a2, (uint64_t)a2, a3);
        return result;
    }
  }
}

void sub_1ADC21008(_Unwind_Exception *a1)
{
  _QWORD *v1;

  std::__list_imp<char *>::clear(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>> &,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>*>(_QWORD *result, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  int v8;
  _QWORD *v9;
  int v10;
  int v11;
  int v12;
  int v13;
  uint64_t v14;
  char *v15;
  int v16;
  int v17;
  uint64_t v18;
  int v19;
  _QWORD *v20;
  uint64_t v22;
  _QWORD v23[3];
  int v24;
  int v25;
  uint64_t v26;
  int v27;
  _QWORD v28[3];
  int v29;
  int v30;
  uint64_t v31;
  int v32;
  _QWORD v33[3];
  int v34;
  int v35;
  uint64_t v36;
  int v37;
  uint64_t v38[3];
  int v39;
  int v40;
  uint64_t v41;
  int v42;
  _QWORD v43[3];
  int v44;
  int v45;

  if (result != a2)
  {
    v2 = result;
    v3 = result + 7;
    if (result + 7 != a2)
    {
      v4 = 0;
      v20 = result + 2;
      v5 = result;
      do
      {
        v6 = v4;
        v7 = v3;
        v41 = v5[7];
        v42 = *((_DWORD *)v5 + 16);
        std::list<int>::list(v43, (uint64_t)(v5 + 9));
        v8 = *((_DWORD *)v5 + 26);
        v44 = *((_DWORD *)v5 + 24);
        v45 = v8;
        v36 = *v5;
        v37 = *((_DWORD *)v5 + 2);
        v9 = std::list<int>::list(v38, (uint64_t)(v5 + 2));
        v10 = *((_DWORD *)v5 + 12);
        v39 = *((_DWORD *)v5 + 10);
        v40 = v10;
        v11 = v41;
        v12 = v36;
        std::__list_imp<char *>::clear(v9);
        result = std::__list_imp<char *>::clear(v43);
        if (v11 < v12)
        {
          v31 = *v7;
          v32 = *((_DWORD *)v5 + 16);
          std::list<int>::list(v33, (uint64_t)(v5 + 9));
          v13 = *((_DWORD *)v5 + 26);
          v34 = *((_DWORD *)v5 + 24);
          v35 = v13;
          v14 = v6;
          while (1)
          {
            v15 = (char *)v2 + v14;
            *((_QWORD *)v15 + 7) = *(_QWORD *)((char *)v2 + v14);
            *((_DWORD *)v15 + 16) = *(_DWORD *)((char *)v2 + v14 + 8);
            std::list<int>::__assign_with_sentinel[abi:ne180100]<std::__list_const_iterator<int,void *>,std::__list_const_iterator<int,void *>>((_QWORD *)((char *)v2 + v14 + 72), *(_QWORD *)((char *)v2 + v14 + 24), (uint64_t)v20 + v14);
            *((_DWORD *)v15 + 24) = *((_DWORD *)v15 + 10);
            *((_DWORD *)v15 + 26) = *((_DWORD *)v15 + 12);
            if (!v14)
              break;
            v26 = v31;
            v27 = v32;
            std::list<int>::list(v28, (uint64_t)v33);
            v29 = v34;
            v30 = v35;
            v22 = *(_QWORD *)((char *)v2 + v14 - 56);
            std::list<int>::list(v23, (uint64_t)v2 + v14 - 40);
            v16 = *(_DWORD *)((char *)v2 + v14 - 8);
            v24 = *(_DWORD *)((char *)v2 + v14 - 16);
            v25 = v16;
            v17 = v26;
            std::__list_imp<char *>::clear(v23);
            std::__list_imp<char *>::clear(v28);
            v14 -= 56;
            if (v17 >= (int)v22)
            {
              v18 = (uint64_t)v2 + v14 + 56;
              goto LABEL_10;
            }
          }
          v18 = (uint64_t)v2;
LABEL_10:
          *(_QWORD *)v18 = v31;
          *(_DWORD *)(v18 + 8) = v32;
          if ((uint64_t *)v18 != &v31)
            std::list<int>::__assign_with_sentinel[abi:ne180100]<std::__list_const_iterator<int,void *>,std::__list_const_iterator<int,void *>>((uint64_t *)(v18 + 16), v33[1], (uint64_t)v33);
          v19 = v35;
          *(_DWORD *)(v18 + 40) = v34;
          *(_DWORD *)(v18 + 48) = v19;
          result = std::__list_imp<char *>::clear(v33);
        }
        v3 = v7 + 7;
        v4 = v6 + 56;
        v5 = v7;
      }
      while (v7 + 7 != a2);
    }
  }
  return result;
}

void sub_1ADC212A4(_Unwind_Exception *a1)
{
  _QWORD *v1;

  std::__list_imp<char *>::clear(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>> &,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>*>(_QWORD *result, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  int v6;
  _QWORD *v7;
  int v8;
  int v9;
  int v10;
  uint64_t v11;
  char *v12;
  int v13;
  uint64_t *v14;
  int v15;
  int v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD v20[3];
  int v21;
  int v22;
  uint64_t v23;
  int v24;
  _QWORD v25[3];
  int v26;
  int v27;
  uint64_t v28;
  int v29;
  _QWORD v30[3];
  int v31;
  int v32;
  uint64_t v33;
  int v34;
  uint64_t v35[3];
  int v36;
  int v37;
  uint64_t v38;
  int v39;
  _QWORD v40[3];
  int v41;
  int v42;

  if (result != a2)
  {
    v2 = result;
    v3 = result + 7;
    if (result + 7 != a2)
    {
      v18 = 0;
      v4 = result;
      do
      {
        v5 = v3;
        v38 = v4[7];
        v39 = *((_DWORD *)v4 + 16);
        std::list<int>::list(v40, (uint64_t)(v4 + 9));
        v6 = *((_DWORD *)v4 + 26);
        v41 = *((_DWORD *)v4 + 24);
        v42 = v6;
        v33 = *v4;
        v34 = *((_DWORD *)v4 + 2);
        v7 = std::list<int>::list(v35, (uint64_t)(v4 + 2));
        v8 = *((_DWORD *)v4 + 12);
        v36 = *((_DWORD *)v4 + 10);
        v37 = v8;
        v17 = v38;
        v9 = v33;
        std::__list_imp<char *>::clear(v7);
        result = std::__list_imp<char *>::clear(v40);
        if (v17 < v9)
        {
          v28 = *v5;
          v29 = *((_DWORD *)v4 + 16);
          std::list<int>::list(v30, (uint64_t)(v4 + 9));
          v10 = *((_DWORD *)v4 + 26);
          v31 = *((_DWORD *)v4 + 24);
          v32 = v10;
          v11 = v18;
          do
          {
            v12 = (char *)v2 + v11;
            *((_QWORD *)v12 + 7) = *(_QWORD *)((char *)v2 + v11);
            *((_DWORD *)v12 + 16) = *(_DWORD *)((char *)v2 + v11 + 8);
            std::list<int>::__assign_with_sentinel[abi:ne180100]<std::__list_const_iterator<int,void *>,std::__list_const_iterator<int,void *>>((_QWORD *)((char *)v2 + v11 + 72), *(_QWORD *)((char *)v2 + v11 + 24), (uint64_t)v2 + v11 + 16);
            *((_DWORD *)v12 + 24) = *((_DWORD *)v12 + 10);
            *((_DWORD *)v12 + 26) = *((_DWORD *)v12 + 12);
            v23 = v28;
            v24 = v29;
            std::list<int>::list(v25, (uint64_t)v30);
            v26 = v31;
            v27 = v32;
            v19 = *(_QWORD *)((char *)v2 + v11 - 56);
            std::list<int>::list(v20, (uint64_t)v2 + v11 - 40);
            v13 = *(_DWORD *)((char *)v2 + v11 - 8);
            v21 = *(_DWORD *)((char *)v2 + v11 - 16);
            v22 = v13;
            LODWORD(v12) = v23;
            std::__list_imp<char *>::clear(v20);
            std::__list_imp<char *>::clear(v25);
            v11 -= 56;
          }
          while ((int)v12 < (int)v19);
          v14 = (_QWORD *)((char *)v2 + v11);
          *(_QWORD *)((char *)v2 + v11 + 56) = v28;
          *(_DWORD *)((char *)v2 + v11 + 64) = v29;
          if ((_QWORD *)((char *)v2 + v11 + 56) != &v28)
            std::list<int>::__assign_with_sentinel[abi:ne180100]<std::__list_const_iterator<int,void *>,std::__list_const_iterator<int,void *>>(v14 + 9, v30[1], (uint64_t)v30);
          v15 = v32;
          *((_DWORD *)v14 + 24) = v31;
          *((_DWORD *)v14 + 26) = v15;
          result = std::__list_imp<char *>::clear(v30);
        }
        v3 = v5 + 7;
        v18 += 56;
        v4 = v5;
      }
      while (v5 + 7 != a2);
    }
  }
  return result;
}

void sub_1ADC21548(_Unwind_Exception *a1)
{
  _QWORD *v1;

  std::__list_imp<char *>::clear(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>> &,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>*>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  int v7;
  _QWORD *v8;
  int v9;
  int v10;
  int v11;
  _QWORD *v12;
  int v13;
  int v14;
  int v15;
  _QWORD *v16;
  int v17;
  int v18;
  int v19;
  _QWORD *v20;
  int v21;
  int v22;
  uint64_t *v23;
  uint64_t *v24;
  int v25;
  _QWORD *v26;
  int v27;
  int v28;
  uint64_t v30;
  _QWORD v31[3];
  int v32;
  int v33;
  uint64_t v34;
  int v35;
  _QWORD v36[3];
  int v37;
  int v38;
  uint64_t v39;
  int v40;
  _QWORD v41[3];
  int v42;
  int v43;
  uint64_t v44;
  int v45;
  _QWORD v46[3];
  int v47;
  int v48;
  uint64_t v49;
  int v50;
  _QWORD v51[3];
  int v52;
  int v53;
  uint64_t v54;
  int v55;
  _QWORD v56[3];
  int v57;
  int v58;
  uint64_t v59;
  int v60;
  _QWORD v61[3];
  int v62;
  int v63;
  uint64_t v64;
  int v65;
  _QWORD v66[3];
  int v67;
  int v68;
  uint64_t v69;
  int v70;
  _QWORD v71[3];
  int v72;
  int v73;
  uint64_t v74;
  int v75;
  _QWORD v76[3];
  int v77;
  int v78;

  v74 = *(_QWORD *)a2;
  v75 = *(_DWORD *)(a2 + 8);
  v6 = a2 + 16;
  std::list<int>::list(v76, a2 + 16);
  v7 = *(_DWORD *)(a2 + 48);
  v77 = *(_DWORD *)(a2 + 40);
  v78 = v7;
  v69 = *(_QWORD *)a1;
  v70 = *(_DWORD *)(a1 + 8);
  v8 = std::list<int>::list(v71, a1 + 16);
  v9 = *(_DWORD *)(a1 + 48);
  v72 = *(_DWORD *)(a1 + 40);
  v73 = v9;
  v10 = v74;
  std::__list_imp<char *>::clear(v8);
  std::__list_imp<char *>::clear(v76);
  if (v10 < (int)v69)
  {
    v44 = *(_QWORD *)a3;
    v45 = *(_DWORD *)(a3 + 8);
    std::list<int>::list(v46, a3 + 16);
    v11 = *(_DWORD *)(a3 + 48);
    v47 = *(_DWORD *)(a3 + 40);
    v48 = v11;
    v39 = *(_QWORD *)a2;
    v40 = *(_DWORD *)(a2 + 8);
    v12 = std::list<int>::list(v41, v6);
    v13 = *(_DWORD *)(a2 + 48);
    v42 = *(_DWORD *)(a2 + 40);
    v43 = v13;
    v14 = v44;
    std::__list_imp<char *>::clear(v12);
    std::__list_imp<char *>::clear(v46);
    if (v14 < (int)v39)
    {
      std::swap[abi:ne180100]<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>((uint64_t *)a1, (uint64_t *)a3);
      return 1;
    }
    std::swap[abi:ne180100]<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>((uint64_t *)a1, (uint64_t *)a2);
    v34 = *(_QWORD *)a3;
    v35 = *(_DWORD *)(a3 + 8);
    std::list<int>::list(v36, a3 + 16);
    v25 = *(_DWORD *)(a3 + 48);
    v37 = *(_DWORD *)(a3 + 40);
    v38 = v25;
    v30 = *(_QWORD *)a2;
    v26 = std::list<int>::list(v31, v6);
    v27 = *(_DWORD *)(a2 + 48);
    v32 = *(_DWORD *)(a2 + 40);
    v33 = v27;
    v28 = v34;
    std::__list_imp<char *>::clear(v26);
    std::__list_imp<char *>::clear(v36);
    if (v28 >= (int)v30)
      return 1;
    v23 = (uint64_t *)a2;
    v24 = (uint64_t *)a3;
LABEL_9:
    std::swap[abi:ne180100]<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>(v23, v24);
    return 2;
  }
  v64 = *(_QWORD *)a3;
  v65 = *(_DWORD *)(a3 + 8);
  std::list<int>::list(v66, a3 + 16);
  v15 = *(_DWORD *)(a3 + 48);
  v67 = *(_DWORD *)(a3 + 40);
  v68 = v15;
  v59 = *(_QWORD *)a2;
  v60 = *(_DWORD *)(a2 + 8);
  v16 = std::list<int>::list(v61, v6);
  v17 = *(_DWORD *)(a2 + 48);
  v62 = *(_DWORD *)(a2 + 40);
  v63 = v17;
  v18 = v64;
  std::__list_imp<char *>::clear(v16);
  std::__list_imp<char *>::clear(v66);
  if (v18 < (int)v59)
  {
    std::swap[abi:ne180100]<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>((uint64_t *)a2, (uint64_t *)a3);
    v54 = *(_QWORD *)a2;
    v55 = *(_DWORD *)(a2 + 8);
    std::list<int>::list(v56, v6);
    v19 = *(_DWORD *)(a2 + 48);
    v57 = *(_DWORD *)(a2 + 40);
    v58 = v19;
    v49 = *(_QWORD *)a1;
    v50 = *(_DWORD *)(a1 + 8);
    v20 = std::list<int>::list(v51, a1 + 16);
    v21 = *(_DWORD *)(a1 + 48);
    v52 = *(_DWORD *)(a1 + 40);
    v53 = v21;
    v22 = v54;
    std::__list_imp<char *>::clear(v20);
    std::__list_imp<char *>::clear(v56);
    if (v22 >= (int)v49)
      return 1;
    v23 = (uint64_t *)a1;
    v24 = (uint64_t *)a2;
    goto LABEL_9;
  }
  return 0;
}

void sub_1ADC218A0(_Unwind_Exception *a1)
{
  _QWORD *v1;

  std::__list_imp<char *>::clear(v1);
  _Unwind_Resume(a1);
}

unint64_t std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0> *,fst::ILabelCompare<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>> &>(uint64_t *a1, uint64_t *a2)
{
  uint64_t *v3;
  int v4;
  _QWORD *v5;
  int v6;
  int v7;
  unint64_t v8;
  int v9;
  int v10;
  unint64_t v11;
  int v12;
  int v13;
  uint64_t *v14;
  int v15;
  int v16;
  unint64_t v17;
  int v18;
  int v19;
  uint64_t *v20;
  int v21;
  uint64_t *v23;
  uint64_t *v24;
  uint64_t v25;
  _QWORD v26[3];
  int v27;
  int v28;
  uint64_t v29;
  int v30;
  _QWORD v31[3];
  int v32;
  int v33;
  uint64_t v34;
  int v35;
  _QWORD v36[3];
  int v37;
  int v38;
  uint64_t v39;
  int v40;
  _QWORD v41[3];
  int v42;
  int v43;
  uint64_t v44;
  int v45;
  _QWORD v46[3];
  int v47;
  int v48;
  uint64_t v49;
  int v50;
  _QWORD v51[3];
  int v52;
  int v53;
  uint64_t v54;
  int v55;
  _QWORD v56[3];
  int v57;
  int v58;
  uint64_t v59;
  int v60;
  _QWORD v61[3];
  int v62;
  int v63;
  uint64_t v64;
  int v65;
  _QWORD v66[3];
  int v67;
  int v68;
  uint64_t v69;
  int v70;
  _QWORD v71[3];
  int v72;
  int v73;
  uint64_t v74;
  int v75;
  uint64_t v76[3];
  int v77;
  int v78;
  uint64_t v79;
  int v80;
  _QWORD v81[3];
  int v82;
  int v83;
  uint64_t v84;
  int v85;
  _QWORD v86[3];
  int v87;
  int v88;

  v3 = a1;
  v84 = *a1;
  v85 = *((_DWORD *)a1 + 2);
  v23 = a1 + 2;
  std::list<int>::list(v86, (uint64_t)(a1 + 2));
  v4 = *((_DWORD *)v3 + 12);
  v87 = *((_DWORD *)v3 + 10);
  v88 = v4;
  v79 = v84;
  v80 = v85;
  std::list<int>::list(v81, (uint64_t)v86);
  v82 = v87;
  v83 = v88;
  v74 = *(a2 - 7);
  v75 = *((_DWORD *)a2 - 12);
  v5 = std::list<int>::list(v76, (uint64_t)(a2 - 5));
  v6 = *((_DWORD *)a2 - 2);
  v77 = *((_DWORD *)a2 - 4);
  v78 = v6;
  v7 = v79;
  std::__list_imp<char *>::clear(v5);
  std::__list_imp<char *>::clear(v81);
  v24 = v3;
  if (v7 >= (int)v74)
  {
    v11 = (unint64_t)(v3 + 7);
    do
    {
      v8 = v11;
      if (v11 >= (unint64_t)a2)
        break;
      v59 = v84;
      v60 = v85;
      std::list<int>::list(v61, (uint64_t)v86);
      v62 = v87;
      v63 = v88;
      v54 = *(_QWORD *)v8;
      v55 = *(_DWORD *)(v8 + 8);
      std::list<int>::list(v56, v8 + 16);
      v12 = *(_DWORD *)(v8 + 48);
      v57 = *(_DWORD *)(v8 + 40);
      v58 = v12;
      v13 = v59;
      std::__list_imp<char *>::clear(v56);
      std::__list_imp<char *>::clear(v61);
      v11 = v8 + 56;
    }
    while (v13 >= (int)v54);
  }
  else
  {
    do
    {
      v69 = v84;
      v70 = v85;
      std::list<int>::list(v71, (uint64_t)v86);
      v72 = v87;
      v73 = v88;
      v64 = v3[7];
      v65 = *((_DWORD *)v3 + 16);
      std::list<int>::list(v66, (uint64_t)(v3 + 9));
      v8 = (unint64_t)(v3 + 7);
      v9 = *((_DWORD *)v3 + 26);
      v67 = *((_DWORD *)v3 + 24);
      v68 = v9;
      v10 = v69;
      std::__list_imp<char *>::clear(v66);
      std::__list_imp<char *>::clear(v71);
      v3 += 7;
    }
    while (v10 >= (int)v64);
  }
  if (v8 >= (unint64_t)a2)
  {
    v14 = a2;
  }
  else
  {
    do
    {
      v49 = v84;
      v50 = v85;
      std::list<int>::list(v51, (uint64_t)v86);
      v52 = v87;
      v53 = v88;
      v44 = *(a2 - 7);
      v45 = *((_DWORD *)a2 - 12);
      std::list<int>::list(v46, (uint64_t)(a2 - 5));
      v14 = a2 - 7;
      v15 = *((_DWORD *)a2 - 2);
      v47 = *((_DWORD *)a2 - 4);
      v48 = v15;
      v16 = v49;
      std::__list_imp<char *>::clear(v46);
      std::__list_imp<char *>::clear(v51);
      a2 -= 7;
    }
    while (v16 < (int)v44);
  }
  while (v8 < (unint64_t)v14)
  {
    std::swap[abi:ne180100]<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>((uint64_t *)v8, v14);
    v17 = v8;
    do
    {
      v39 = v84;
      v40 = v85;
      std::list<int>::list(v41, (uint64_t)v86);
      v42 = v87;
      v43 = v88;
      v34 = *(_QWORD *)(v17 + 56);
      v35 = *(_DWORD *)(v17 + 64);
      std::list<int>::list(v36, v17 + 72);
      v8 = v17 + 56;
      v37 = *(_DWORD *)(v17 + 96);
      v38 = *(_DWORD *)(v17 + 104);
      v18 = v39;
      v19 = v34;
      std::__list_imp<char *>::clear(v36);
      std::__list_imp<char *>::clear(v41);
      v17 += 56;
    }
    while (v18 >= v19);
    v20 = v14;
    do
    {
      v29 = v84;
      v30 = v85;
      std::list<int>::list(v31, (uint64_t)v86);
      v32 = v87;
      v33 = v88;
      v25 = *(v20 - 7);
      std::list<int>::list(v26, (uint64_t)(v20 - 5));
      v14 = v20 - 7;
      v27 = *((_DWORD *)v20 - 4);
      v28 = *((_DWORD *)v20 - 2);
      v21 = v29;
      std::__list_imp<char *>::clear(v26);
      std::__list_imp<char *>::clear(v31);
      v20 -= 7;
    }
    while (v21 < (int)v25);
  }
  if ((uint64_t *)(v8 - 56) != v24)
  {
    *v24 = *(_QWORD *)(v8 - 56);
    *((_DWORD *)v24 + 2) = *(_DWORD *)(v8 - 48);
    std::list<int>::__assign_with_sentinel[abi:ne180100]<std::__list_const_iterator<int,void *>,std::__list_const_iterator<int,void *>>(v23, *(_QWORD *)(v8 - 32), v8 - 40);
    *((_DWORD *)v24 + 10) = *(_DWORD *)(v8 - 16);
    *((_DWORD *)v24 + 12) = *(_DWORD *)(v8 - 8);
  }
  *(_QWORD *)(v8 - 56) = v84;
  *(_DWORD *)(v8 - 48) = v85;
  if ((uint64_t *)(v8 - 56) != &v84)
    std::list<int>::__assign_with_sentinel[abi:ne180100]<std::__list_const_iterator<int,void *>,std::__list_const_iterator<int,void *>>((uint64_t *)(v8 - 40), v86[1], (uint64_t)v86);
  *(_DWORD *)(v8 - 16) = v87;
  *(_DWORD *)(v8 - 8) = v88;
  std::__list_imp<char *>::clear(v86);
  return v8;
}

void sub_1ADC21D64(_Unwind_Exception *a1)
{
  _QWORD *v1;
  _QWORD *v2;

  std::__list_imp<char *>::clear(v2);
  std::__list_imp<char *>::clear(v1);
  _Unwind_Resume(a1);
}

unint64_t std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0> *,fst::ILabelCompare<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>> &>(uint64_t *a1, unint64_t a2)
{
  uint64_t *v4;
  uint64_t v5;
  int v6;
  int v7;
  int v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int v14;
  int v15;
  int v16;
  int v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  int v21;
  int v22;
  unint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t *v27;
  uint64_t *v28;
  int v29;
  _QWORD v30[3];
  int v31;
  int v32;
  uint64_t v33;
  int v34;
  _QWORD v35[3];
  int v36;
  int v37;
  uint64_t v38;
  int v39;
  _QWORD v40[3];
  int v41;
  int v42;
  uint64_t v43;
  int v44;
  _QWORD v45[3];
  int v46;
  int v47;
  uint64_t v48;
  int v49;
  _QWORD v50[3];
  int v51;
  int v52;
  uint64_t v53;
  int v54;
  _QWORD v55[3];
  int v56;
  int v57;
  uint64_t v58;
  int v59;
  _QWORD v60[3];
  int v61;
  int v62;
  uint64_t v63;
  int v64;
  _QWORD v65[3];
  int v66;
  int v67;
  uint64_t v68;
  int v69;
  _QWORD v70[3];
  int v71;
  int v72;
  uint64_t v73;
  int v74;
  _QWORD v75[3];
  int v76;
  int v77;
  uint64_t v78;
  int v79;
  _QWORD v80[3];
  int v81;
  int v82;

  v78 = *a1;
  v79 = *((_DWORD *)a1 + 2);
  v4 = a1 + 2;
  std::list<int>::list(v80, (uint64_t)(a1 + 2));
  v5 = 0;
  v6 = *((_DWORD *)a1 + 12);
  v81 = *((_DWORD *)a1 + 10);
  v82 = v6;
  do
  {
    v73 = a1[v5 + 7];
    v74 = a1[v5 + 8];
    std::list<int>::list(v75, (uint64_t)&a1[v5 + 9]);
    v7 = a1[v5 + 13];
    v76 = a1[v5 + 12];
    v77 = v7;
    v68 = v78;
    v69 = v79;
    std::list<int>::list(v70, (uint64_t)v80);
    v71 = v81;
    v72 = v82;
    v8 = v73;
    std::__list_imp<char *>::clear(v70);
    std::__list_imp<char *>::clear(v75);
    v5 += 7;
  }
  while (v8 < (int)v68);
  v9 = (unint64_t)&a1[v5];
  if (v5 == 7)
  {
    while (v9 < a2)
    {
      v63 = *(_QWORD *)(a2 - 56);
      v64 = *(_DWORD *)(a2 - 48);
      std::list<int>::list(v65, a2 - 40);
      v16 = *(_DWORD *)(a2 - 8);
      v66 = *(_DWORD *)(a2 - 16);
      v67 = v16;
      v58 = v78;
      v59 = v79;
      std::list<int>::list(v60, (uint64_t)v80);
      v61 = v81;
      v62 = v82;
      v17 = v63;
      std::__list_imp<char *>::clear(v60);
      std::__list_imp<char *>::clear(v65);
      v10 = a2 - 56;
      a2 -= 56;
      if (v17 < (int)v58)
        goto LABEL_11;
    }
    v10 = a2;
  }
  else
  {
    v10 = a2;
    do
    {
      v12 = *(_QWORD *)(v10 - 56);
      v11 = v10 - 56;
      v53 = v12;
      v54 = *(_DWORD *)(v11 + 8);
      v13 = v11;
      std::list<int>::list(v55, v11 + 16);
      v14 = *(_DWORD *)(a2 - 8);
      v56 = *(_DWORD *)(a2 - 16);
      v57 = v14;
      v48 = v78;
      v49 = v79;
      std::list<int>::list(v50, (uint64_t)v80);
      v51 = v81;
      v52 = v82;
      v15 = v53;
      std::__list_imp<char *>::clear(v50);
      std::__list_imp<char *>::clear(v55);
      v10 = v13;
      a2 = v13;
    }
    while (v15 >= (int)v48);
  }
LABEL_11:
  v27 = v4;
  v28 = a1;
  if (v9 < v10)
  {
    v18 = v10;
    do
    {
      std::swap[abi:ne180100]<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>((uint64_t *)v9, (uint64_t *)v18);
      v19 = v9;
      do
      {
        v20 = *(_QWORD *)(v9 + 56);
        v9 += 56;
        v43 = v20;
        v44 = *(_DWORD *)(v9 + 8);
        std::list<int>::list(v45, v9 + 16);
        v46 = *(_DWORD *)(v19 + 96);
        v47 = *(_DWORD *)(v19 + 104);
        v38 = v78;
        v39 = v79;
        std::list<int>::list(v40, (uint64_t)v80);
        v41 = v81;
        v42 = v82;
        v21 = v43;
        v22 = v38;
        std::__list_imp<char *>::clear(v40);
        std::__list_imp<char *>::clear(v45);
        v19 = v9;
      }
      while (v21 < v22);
      v23 = v18;
      do
      {
        v24 = *(_QWORD *)(v18 - 56);
        v18 -= 56;
        v33 = v24;
        v34 = *(_DWORD *)(v18 + 8);
        std::list<int>::list(v35, v18 + 16);
        v36 = *(_DWORD *)(v23 - 16);
        v37 = *(_DWORD *)(v23 - 8);
        v29 = v78;
        std::list<int>::list(v30, (uint64_t)v80);
        v31 = v81;
        v32 = v82;
        v25 = v33;
        std::__list_imp<char *>::clear(v30);
        std::__list_imp<char *>::clear(v35);
        v23 = v18;
      }
      while (v25 >= v29);
    }
    while (v9 < v18);
  }
  if ((uint64_t *)(v9 - 56) != v28)
  {
    *v28 = *(_QWORD *)(v9 - 56);
    *((_DWORD *)v28 + 2) = *(_DWORD *)(v9 - 48);
    std::list<int>::__assign_with_sentinel[abi:ne180100]<std::__list_const_iterator<int,void *>,std::__list_const_iterator<int,void *>>(v27, *(_QWORD *)(v9 - 32), v9 - 40);
    *((_DWORD *)v28 + 10) = *(_DWORD *)(v9 - 16);
    *((_DWORD *)v28 + 12) = *(_DWORD *)(v9 - 8);
  }
  *(_QWORD *)(v9 - 56) = v78;
  *(_DWORD *)(v9 - 48) = v79;
  if ((uint64_t *)(v9 - 56) != &v78)
    std::list<int>::__assign_with_sentinel[abi:ne180100]<std::__list_const_iterator<int,void *>,std::__list_const_iterator<int,void *>>((uint64_t *)(v9 - 40), v80[1], (uint64_t)v80);
  *(_DWORD *)(v9 - 16) = v81;
  *(_DWORD *)(v9 - 8) = v82;
  std::__list_imp<char *>::clear(v80);
  return v9 - 56;
}

void sub_1ADC2220C(_Unwind_Exception *a1)
{
  _QWORD *v1;

  std::__list_imp<char *>::clear(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>> &,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>*>(uint64_t a1, uint64_t a2)
{
  _BOOL8 v4;
  uint64_t v5;
  int v6;
  _QWORD *v7;
  int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  int v14;
  _QWORD *v15;
  int v16;
  int v17;
  int v18;
  _QWORD *v19;
  _QWORD *v20;
  int v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  int v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  int v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD v36[3];
  int v37;
  int v38;
  uint64_t v39;
  int v40;
  _QWORD v41[3];
  int v42;
  int v43;
  uint64_t v44;
  int v45;
  _QWORD v46[3];
  int v47;
  int v48;
  uint64_t v49;
  int v50;
  _DWORD v51[10];
  uint64_t v52;
  int v53;
  _QWORD v54[3];
  int v55;
  int v56;
  uint64_t v57;
  int v58;
  _QWORD v59[3];
  int v60;
  int v61;
  uint64_t v62;
  int v63;
  _QWORD v64[3];
  int v65;
  int v66;

  v4 = 1;
  switch(0x6DB6DB6DB6DB6DB7 * ((a2 - a1) >> 3))
  {
    case 0:
    case 1:
      return v4;
    case 2:
      v5 = a2 - 56;
      v62 = *(_QWORD *)(a2 - 56);
      v63 = *(_DWORD *)(a2 - 48);
      std::list<int>::list(v64, a2 - 40);
      v6 = *(_DWORD *)(v5 + 48);
      v65 = *(_DWORD *)(v5 + 40);
      v66 = v6;
      v57 = *(_QWORD *)a1;
      v58 = *(_DWORD *)(a1 + 8);
      v7 = std::list<int>::list(v59, a1 + 16);
      v8 = *(_DWORD *)(a1 + 48);
      v60 = *(_DWORD *)(a1 + 40);
      v61 = v8;
      v9 = v62;
      std::__list_imp<char *>::clear(v7);
      std::__list_imp<char *>::clear(v64);
      if (v9 < (int)v57)
        std::swap[abi:ne180100]<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>((uint64_t *)a1, (uint64_t *)v5);
      return 1;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>> &,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>*>(a1, a1 + 56, a2 - 56);
      return v4;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>> &,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>*>(a1, a1 + 56, a1 + 112, a2 - 56);
      return v4;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>> &,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>*>(a1, a1 + 56, a1 + 112, a1 + 168, a2 - 56);
      return v4;
    default:
      v10 = a1 + 112;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>> &,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>*>(a1, a1 + 56, a1 + 112);
      v11 = a1 + 168;
      if (a1 + 168 == a2)
        return 1;
      v12 = 0;
      v33 = 0;
      v13 = v51;
      v34 = a2;
      break;
  }
  while (1)
  {
    v52 = *(_QWORD *)v11;
    v53 = *(_DWORD *)(v11 + 8);
    std::list<int>::list(v54, v11 + 16);
    v14 = *(_DWORD *)(v11 + 48);
    v55 = *(_DWORD *)(v11 + 40);
    v56 = v14;
    v49 = *(_QWORD *)v10;
    v50 = *(_DWORD *)(v10 + 8);
    v15 = std::list<int>::list(v13, v10 + 16);
    v16 = *(_DWORD *)(v10 + 48);
    v51[6] = *(_DWORD *)(v10 + 40);
    v51[8] = v16;
    v17 = v52;
    v18 = v49;
    v19 = v15;
    std::__list_imp<char *>::clear(v15);
    std::__list_imp<char *>::clear(v54);
    if (v17 < v18)
      break;
    v30 = v34;
    v22 = v12;
    v13 = v19;
LABEL_18:
    v10 = v11;
    v12 = v22 + 56;
    v11 += 56;
    if (v11 == v30)
      return 1;
  }
  v44 = *(_QWORD *)v11;
  v45 = *(_DWORD *)(v11 + 8);
  v20 = std::list<int>::list(v46, v11 + 16);
  v21 = *(_DWORD *)(v11 + 48);
  v47 = *(_DWORD *)(v11 + 40);
  v48 = v21;
  v22 = v12;
  v23 = v20;
  v24 = v22;
  v13 = v19;
  while (1)
  {
    v25 = a1 + v24;
    *(_QWORD *)(v25 + 168) = *(_QWORD *)(a1 + v24 + 112);
    *(_DWORD *)(v25 + 176) = *(_DWORD *)(a1 + v24 + 120);
    std::list<int>::__assign_with_sentinel[abi:ne180100]<std::__list_const_iterator<int,void *>,std::__list_const_iterator<int,void *>>((uint64_t *)(a1 + v24 + 184), *(_QWORD *)(a1 + v24 + 136), a1 + 128 + v24);
    *(_DWORD *)(v25 + 208) = *(_DWORD *)(v25 + 152);
    *(_DWORD *)(v25 + 216) = *(_DWORD *)(v25 + 160);
    if (v24 == -112)
      break;
    v39 = v44;
    v40 = v45;
    std::list<int>::list(v41, (uint64_t)v23);
    v42 = v47;
    v43 = v48;
    v35 = *(_QWORD *)(a1 + v24 + 56);
    std::list<int>::list(v36, a1 + v24 + 72);
    v26 = *(_DWORD *)(a1 + v24 + 104);
    v37 = *(_DWORD *)(a1 + v24 + 96);
    v38 = v26;
    v27 = v39;
    std::__list_imp<char *>::clear(v36);
    std::__list_imp<char *>::clear(v41);
    v24 -= 56;
    v28 = v27 < (int)v35;
    v13 = v19;
    if (!v28)
    {
      v29 = a1 + v24 + 168;
      goto LABEL_14;
    }
  }
  v29 = a1;
LABEL_14:
  *(_QWORD *)v29 = v44;
  *(_DWORD *)(v29 + 8) = v45;
  v30 = v34;
  if ((uint64_t *)v29 != &v44)
    std::list<int>::__assign_with_sentinel[abi:ne180100]<std::__list_const_iterator<int,void *>,std::__list_const_iterator<int,void *>>((uint64_t *)(v29 + 16), v46[1], (uint64_t)v23);
  v31 = v48;
  *(_DWORD *)(v29 + 40) = v47;
  *(_DWORD *)(v29 + 48) = v31;
  if (v33 != 7)
  {
    ++v33;
    std::__list_imp<char *>::clear(v23);
    goto LABEL_18;
  }
  v4 = v11 + 56 == v34;
  std::__list_imp<char *>::clear(v23);
  return v4;
}

void sub_1ADC22664(_Unwind_Exception *a1)
{
  _QWORD *v1;

  std::__list_imp<char *>::clear(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::swap[abi:ne180100]<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>(uint64_t *a1, uint64_t *a2)
{
  uint64_t *v4;
  int v5;
  int v6;
  uint64_t v8;
  int v9;
  _QWORD v10[3];
  int v11;
  int v12;

  v8 = *a1;
  v9 = *((_DWORD *)a1 + 2);
  v4 = a1 + 2;
  std::list<int>::list(v10, (uint64_t)(a1 + 2));
  v5 = *((_DWORD *)a1 + 12);
  v11 = *((_DWORD *)a1 + 10);
  v12 = v5;
  *a1 = *a2;
  *((_DWORD *)a1 + 2) = *((_DWORD *)a2 + 2);
  if (a1 != a2)
    std::list<int>::__assign_with_sentinel[abi:ne180100]<std::__list_const_iterator<int,void *>,std::__list_const_iterator<int,void *>>(v4, a2[3], (uint64_t)(a2 + 2));
  *((_DWORD *)a1 + 10) = *((_DWORD *)a2 + 10);
  *((_DWORD *)a1 + 12) = *((_DWORD *)a2 + 12);
  *a2 = v8;
  *((_DWORD *)a2 + 2) = v9;
  if (&v8 != a2)
    std::list<int>::__assign_with_sentinel[abi:ne180100]<std::__list_const_iterator<int,void *>,std::__list_const_iterator<int,void *>>(a2 + 2, v10[1], (uint64_t)v10);
  v6 = v12;
  *((_DWORD *)a2 + 10) = v11;
  *((_DWORD *)a2 + 12) = v6;
  return std::__list_imp<char *>::clear(v10);
}

void sub_1ADC2278C(_Unwind_Exception *a1)
{
  _QWORD *v1;

  std::__list_imp<char *>::clear(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>> &,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v8;
  _QWORD *v9;
  int v10;
  int v11;
  _QWORD *result;
  int v13;
  _QWORD *v14;
  int v15;
  int v16;
  int v17;
  _QWORD *v18;
  int v19;
  int v20;
  uint64_t v21;
  _QWORD v22[3];
  int v23;
  int v24;
  uint64_t v25;
  int v26;
  _QWORD v27[3];
  int v28;
  int v29;
  uint64_t v30;
  int v31;
  _QWORD v32[3];
  int v33;
  int v34;
  uint64_t v35;
  int v36;
  _QWORD v37[3];
  int v38;
  int v39;
  uint64_t v40;
  int v41;
  _QWORD v42[3];
  int v43;
  int v44;
  uint64_t v45;
  int v46;
  _QWORD v47[3];
  int v48;
  int v49;

  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>> &,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>*>(a1, a2, a3);
  v45 = *(_QWORD *)a4;
  v46 = *(_DWORD *)(a4 + 8);
  std::list<int>::list(v47, a4 + 16);
  v8 = *(_DWORD *)(a4 + 48);
  v48 = *(_DWORD *)(a4 + 40);
  v49 = v8;
  v40 = *(_QWORD *)a3;
  v41 = *(_DWORD *)(a3 + 8);
  v9 = std::list<int>::list(v42, a3 + 16);
  v10 = *(_DWORD *)(a3 + 48);
  v43 = *(_DWORD *)(a3 + 40);
  v44 = v10;
  v11 = v45;
  std::__list_imp<char *>::clear(v9);
  result = std::__list_imp<char *>::clear(v47);
  if (v11 < (int)v40)
  {
    std::swap[abi:ne180100]<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>((uint64_t *)a3, (uint64_t *)a4);
    v35 = *(_QWORD *)a3;
    v36 = *(_DWORD *)(a3 + 8);
    std::list<int>::list(v37, a3 + 16);
    v13 = *(_DWORD *)(a3 + 48);
    v38 = *(_DWORD *)(a3 + 40);
    v39 = v13;
    v30 = *(_QWORD *)a2;
    v31 = *(_DWORD *)(a2 + 8);
    v14 = std::list<int>::list(v32, a2 + 16);
    v15 = *(_DWORD *)(a2 + 48);
    v33 = *(_DWORD *)(a2 + 40);
    v34 = v15;
    v16 = v35;
    std::__list_imp<char *>::clear(v14);
    result = std::__list_imp<char *>::clear(v37);
    if (v16 < (int)v30)
    {
      std::swap[abi:ne180100]<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>((uint64_t *)a2, (uint64_t *)a3);
      v25 = *(_QWORD *)a2;
      v26 = *(_DWORD *)(a2 + 8);
      std::list<int>::list(v27, a2 + 16);
      v17 = *(_DWORD *)(a2 + 48);
      v28 = *(_DWORD *)(a2 + 40);
      v29 = v17;
      v21 = *(_QWORD *)a1;
      v18 = std::list<int>::list(v22, a1 + 16);
      v19 = *(_DWORD *)(a1 + 48);
      v23 = *(_DWORD *)(a1 + 40);
      v24 = v19;
      v20 = v25;
      std::__list_imp<char *>::clear(v18);
      result = std::__list_imp<char *>::clear(v27);
      if (v20 < (int)v21)
        return std::swap[abi:ne180100]<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>((uint64_t *)a1, (uint64_t *)a2);
    }
  }
  return result;
}

void sub_1ADC229A4(_Unwind_Exception *a1)
{
  _QWORD *v1;

  std::__list_imp<char *>::clear(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>> &,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v10;
  _QWORD *v11;
  int v12;
  int v13;
  _QWORD *result;
  int v15;
  _QWORD *v16;
  int v17;
  int v18;
  int v19;
  _QWORD *v20;
  int v21;
  int v22;
  int v23;
  _QWORD *v24;
  int v25;
  int v26;
  uint64_t v27;
  _QWORD v28[3];
  int v29;
  int v30;
  uint64_t v31;
  int v32;
  _QWORD v33[3];
  int v34;
  int v35;
  uint64_t v36;
  int v37;
  _QWORD v38[3];
  int v39;
  int v40;
  uint64_t v41;
  int v42;
  _QWORD v43[3];
  int v44;
  int v45;
  uint64_t v46;
  int v47;
  _QWORD v48[3];
  int v49;
  int v50;
  uint64_t v51;
  int v52;
  _QWORD v53[3];
  int v54;
  int v55;
  uint64_t v56;
  int v57;
  _QWORD v58[3];
  int v59;
  int v60;
  uint64_t v61;
  int v62;
  _QWORD v63[3];
  int v64;
  int v65;

  std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>> &,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>*>(a1, a2, a3, a4);
  v61 = *(_QWORD *)a5;
  v62 = *(_DWORD *)(a5 + 8);
  std::list<int>::list(v63, a5 + 16);
  v10 = *(_DWORD *)(a5 + 48);
  v64 = *(_DWORD *)(a5 + 40);
  v65 = v10;
  v56 = *(_QWORD *)a4;
  v57 = *(_DWORD *)(a4 + 8);
  v11 = std::list<int>::list(v58, a4 + 16);
  v12 = *(_DWORD *)(a4 + 48);
  v59 = *(_DWORD *)(a4 + 40);
  v60 = v12;
  v13 = v61;
  std::__list_imp<char *>::clear(v11);
  result = std::__list_imp<char *>::clear(v63);
  if (v13 < (int)v56)
  {
    std::swap[abi:ne180100]<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>((uint64_t *)a4, (uint64_t *)a5);
    v51 = *(_QWORD *)a4;
    v52 = *(_DWORD *)(a4 + 8);
    std::list<int>::list(v53, a4 + 16);
    v15 = *(_DWORD *)(a4 + 48);
    v54 = *(_DWORD *)(a4 + 40);
    v55 = v15;
    v46 = *(_QWORD *)a3;
    v47 = *(_DWORD *)(a3 + 8);
    v16 = std::list<int>::list(v48, a3 + 16);
    v17 = *(_DWORD *)(a3 + 48);
    v49 = *(_DWORD *)(a3 + 40);
    v50 = v17;
    v18 = v51;
    std::__list_imp<char *>::clear(v16);
    result = std::__list_imp<char *>::clear(v53);
    if (v18 < (int)v46)
    {
      std::swap[abi:ne180100]<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>((uint64_t *)a3, (uint64_t *)a4);
      v41 = *(_QWORD *)a3;
      v42 = *(_DWORD *)(a3 + 8);
      std::list<int>::list(v43, a3 + 16);
      v19 = *(_DWORD *)(a3 + 48);
      v44 = *(_DWORD *)(a3 + 40);
      v45 = v19;
      v36 = *(_QWORD *)a2;
      v37 = *(_DWORD *)(a2 + 8);
      v20 = std::list<int>::list(v38, a2 + 16);
      v21 = *(_DWORD *)(a2 + 48);
      v39 = *(_DWORD *)(a2 + 40);
      v40 = v21;
      v22 = v41;
      std::__list_imp<char *>::clear(v20);
      result = std::__list_imp<char *>::clear(v43);
      if (v22 < (int)v36)
      {
        std::swap[abi:ne180100]<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>((uint64_t *)a2, (uint64_t *)a3);
        v31 = *(_QWORD *)a2;
        v32 = *(_DWORD *)(a2 + 8);
        std::list<int>::list(v33, a2 + 16);
        v23 = *(_DWORD *)(a2 + 48);
        v34 = *(_DWORD *)(a2 + 40);
        v35 = v23;
        v27 = *(_QWORD *)a1;
        v24 = std::list<int>::list(v28, a1 + 16);
        v25 = *(_DWORD *)(a1 + 48);
        v29 = *(_DWORD *)(a1 + 40);
        v30 = v25;
        v26 = v31;
        std::__list_imp<char *>::clear(v24);
        result = std::__list_imp<char *>::clear(v33);
        if (v26 < (int)v27)
          return std::swap[abi:ne180100]<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>((uint64_t *)a1, (uint64_t *)a2);
      }
    }
  }
  return result;
}

void sub_1ADC22C58(_Unwind_Exception *a1)
{
  _QWORD *v1;

  std::__list_imp<char *>::clear(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>> &,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>*,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>*>(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  int v16;
  int v17;
  unint64_t v18;
  uint64_t v21;
  _QWORD v22[3];
  int v23;
  int v24;
  uint64_t v25;
  int v26;
  _QWORD v27[3];
  int v28;
  int v29;

  if (a1 != (uint64_t *)a2)
  {
    v6 = a2;
    v8 = a2 - (_QWORD)a1;
    v9 = (a2 - (uint64_t)a1) / 56;
    if (a2 - (uint64_t)a1 >= 57)
    {
      v10 = (unint64_t)(v9 - 2) >> 1;
      v11 = v10 + 1;
      v12 = &a1[7 * v10];
      do
      {
        std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>> &,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>*>(a1, a4, v9, v12);
        v12 -= 7;
        --v11;
      }
      while (v11);
    }
    v13 = v6;
    if (v6 != a3)
    {
      v14 = v6;
      do
      {
        v25 = *(_QWORD *)v14;
        v26 = *(_DWORD *)(v14 + 8);
        std::list<int>::list(v27, v14 + 16);
        v15 = *(_DWORD *)(v14 + 48);
        v28 = *(_DWORD *)(v14 + 40);
        v29 = v15;
        v21 = *a1;
        std::list<int>::list(v22, (uint64_t)(a1 + 2));
        v16 = *((_DWORD *)a1 + 12);
        v23 = *((_DWORD *)a1 + 10);
        v24 = v16;
        v17 = v25;
        std::__list_imp<char *>::clear(v22);
        std::__list_imp<char *>::clear(v27);
        if (v17 < (int)v21)
        {
          std::swap[abi:ne180100]<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>((uint64_t *)v14, a1);
          std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>> &,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>*>(a1, a4, v9, a1);
        }
        v14 += 56;
      }
      while (v14 != a3);
      v13 = a3;
    }
    if (v8 >= 57)
    {
      v18 = v8 / 0x38uLL;
      do
      {
        std::__pop_heap[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>*>(a1, v6, a4, v18);
        v6 -= 56;
      }
      while (v18-- > 2);
    }
    return v13;
  }
  return a3;
}

void sub_1ADC22E58(_Unwind_Exception *a1)
{
  _QWORD *v1;

  std::__list_imp<char *>::clear(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>> &,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>*>(_QWORD *result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  unint64_t v4;
  uint64_t *v5;
  int64_t v6;
  uint64_t *v7;
  int64_t v8;
  _DWORD *v9;
  int v10;
  _QWORD *v11;
  int v12;
  int v13;
  _QWORD *v14;
  int v15;
  int v16;
  int v17;
  uint64_t *v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int64_t v28;
  _QWORD *v30;
  int v31;
  _QWORD v32[3];
  int v33;
  int v34;
  uint64_t v35;
  int v36;
  _QWORD v37[3];
  int v38;
  int v39;
  uint64_t v40;
  int v41;
  _QWORD v42[3];
  int v43;
  int v44;
  uint64_t v45;
  int v46;
  _QWORD v47[3];
  int v48;
  int v49;
  uint64_t v50;
  int v51;
  _QWORD v52[3];
  int v53;
  int v54;
  uint64_t v55;
  int v56;
  uint64_t v57[3];
  int v58;
  int v59;
  uint64_t v60;
  int v61;
  _QWORD v62[3];
  int v63;
  int v64;
  uint64_t v65;
  int v66;
  uint64_t v67[3];
  int v68;
  int v69;
  uint64_t v70;
  int v71;
  _QWORD v72[3];
  int v73;
  int v74;

  v30 = result;
  v4 = a3 - 2;
  if (a3 >= 2)
  {
    v5 = a4;
    v28 = v4 >> 1;
    if ((uint64_t)(v4 >> 1) >= 0x6DB6DB6DB6DB6DB7 * (a4 - result))
    {
      v6 = (0xDB6DB6DB6DB6DB6ELL * (a4 - result)) | 1;
      v7 = &result[7 * v6];
      v8 = 0xDB6DB6DB6DB6DB6ELL * (a4 - result) + 2;
      if (v8 < a3)
      {
        v70 = *v7;
        v9 = &result[7 * v6];
        v71 = v9[2];
        std::list<int>::list(v72, (uint64_t)(v9 + 4));
        v10 = v9[12];
        v73 = v9[10];
        v74 = v10;
        v65 = v7[7];
        v66 = *((_DWORD *)v7 + 16);
        v11 = std::list<int>::list(v67, (uint64_t)(v7 + 9));
        v12 = *((_DWORD *)v7 + 26);
        v68 = *((_DWORD *)v7 + 24);
        v69 = v12;
        LODWORD(v9) = v70;
        std::__list_imp<char *>::clear(v11);
        std::__list_imp<char *>::clear(v72);
        v7 += 7 * ((int)v9 < (int)v65);
        if ((int)v9 < (int)v65)
          v6 = v8;
      }
      v60 = *v7;
      v61 = *((_DWORD *)v7 + 2);
      std::list<int>::list(v62, (uint64_t)(v7 + 2));
      v13 = *((_DWORD *)v7 + 12);
      v63 = *((_DWORD *)v7 + 10);
      v64 = v13;
      v55 = *v5;
      v56 = *((_DWORD *)v5 + 2);
      v14 = std::list<int>::list(v57, (uint64_t)(v5 + 2));
      v15 = *((_DWORD *)v5 + 12);
      v58 = *((_DWORD *)v5 + 10);
      v59 = v15;
      v16 = v60;
      std::__list_imp<char *>::clear(v14);
      result = std::__list_imp<char *>::clear(v62);
      if (v16 >= (int)v55)
      {
        v50 = *v5;
        v51 = *((_DWORD *)v5 + 2);
        std::list<int>::list(v52, (uint64_t)(v5 + 2));
        v17 = *((_DWORD *)v5 + 12);
        v53 = *((_DWORD *)v5 + 10);
        v54 = v17;
        do
        {
          v18 = v7;
          *v5 = *v7;
          *((_DWORD *)v5 + 2) = *((_DWORD *)v7 + 2);
          if (v5 != v7)
            std::list<int>::__assign_with_sentinel[abi:ne180100]<std::__list_const_iterator<int,void *>,std::__list_const_iterator<int,void *>>(v5 + 2, v7[3], (uint64_t)(v7 + 2));
          *((_DWORD *)v5 + 10) = *((_DWORD *)v7 + 10);
          *((_DWORD *)v5 + 12) = *((_DWORD *)v7 + 12);
          if (v28 < v6)
            break;
          v19 = (2 * v6) | 1;
          v7 = &v30[7 * v19];
          v6 = 2 * v6 + 2;
          if (v6 >= a3)
          {
            v6 = v19;
          }
          else
          {
            v45 = *v7;
            v20 = &v30[7 * v19];
            v46 = *((_DWORD *)v20 + 2);
            std::list<int>::list(v47, (uint64_t)(v20 + 2));
            v21 = &v30[7 * v19];
            v22 = *((_DWORD *)v21 + 10);
            LODWORD(v21) = *((_DWORD *)v21 + 12);
            v48 = v22;
            v49 = (int)v21;
            v40 = v7[7];
            v41 = *((_DWORD *)v7 + 16);
            std::list<int>::list(v42, (uint64_t)(v7 + 9));
            v23 = *((_DWORD *)v7 + 26);
            v43 = *((_DWORD *)v7 + 24);
            v44 = v23;
            v24 = v45;
            v25 = v40;
            std::__list_imp<char *>::clear(v42);
            std::__list_imp<char *>::clear(v47);
            v7 += 7 * (v24 < v25);
            if (v24 >= v25)
              v6 = v19;
          }
          v35 = *v7;
          v36 = *((_DWORD *)v7 + 2);
          std::list<int>::list(v37, (uint64_t)(v7 + 2));
          v26 = *((_DWORD *)v7 + 12);
          v38 = *((_DWORD *)v7 + 10);
          v39 = v26;
          v31 = v50;
          std::list<int>::list(v32, (uint64_t)v52);
          v33 = v53;
          v34 = v54;
          v27 = v35;
          std::__list_imp<char *>::clear(v32);
          std::__list_imp<char *>::clear(v37);
          v5 = v18;
        }
        while (v27 >= v31);
        *v18 = v50;
        *((_DWORD *)v18 + 2) = v51;
        if (v18 != &v50)
          std::list<int>::__assign_with_sentinel[abi:ne180100]<std::__list_const_iterator<int,void *>,std::__list_const_iterator<int,void *>>(v18 + 2, v52[1], (uint64_t)v52);
        *((_DWORD *)v18 + 10) = v53;
        *((_DWORD *)v18 + 12) = v54;
        return std::__list_imp<char *>::clear(v52);
      }
    }
  }
  return result;
}

void sub_1ADC23260(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, _QWORD *a11)
{
  std::__list_imp<char *>::clear(a11);
  _Unwind_Resume(a1);
}

_QWORD *std::__pop_heap[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>*>(_QWORD *result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v7;
  int v8;
  uint64_t *v9;
  uint64_t *v10;
  int v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  int v17;

  if (a4 >= 2)
  {
    v7 = result;
    v12 = *result;
    v13 = *((_DWORD *)result + 2);
    std::list<int>::list(&v14, (uint64_t)(result + 2));
    v8 = *((_DWORD *)v7 + 12);
    v16 = *((_DWORD *)v7 + 10);
    v17 = v8;
    v9 = std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>> &,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>*>(v7, a3, a4);
    v10 = v9;
    if (v9 == (uint64_t *)(a2 - 56))
    {
      *v9 = v12;
      *((_DWORD *)v9 + 2) = v13;
      if (v9 != &v12)
        std::list<int>::__assign_with_sentinel[abi:ne180100]<std::__list_const_iterator<int,void *>,std::__list_const_iterator<int,void *>>(v9 + 2, v15, (uint64_t)&v14);
      *((_DWORD *)v10 + 10) = v16;
      *((_DWORD *)v10 + 12) = v17;
    }
    else
    {
      *v9 = *(_QWORD *)(a2 - 56);
      *((_DWORD *)v9 + 2) = *(_DWORD *)(a2 - 48);
      std::list<int>::__assign_with_sentinel[abi:ne180100]<std::__list_const_iterator<int,void *>,std::__list_const_iterator<int,void *>>(v9 + 2, *(_QWORD *)(a2 - 32), a2 - 40);
      *((_DWORD *)v10 + 10) = *(_DWORD *)(a2 - 16);
      *((_DWORD *)v10 + 12) = *(_DWORD *)(a2 - 8);
      *(_QWORD *)(a2 - 56) = v12;
      *(_DWORD *)(a2 - 48) = v13;
      if ((uint64_t *)(a2 - 56) != &v12)
        std::list<int>::__assign_with_sentinel[abi:ne180100]<std::__list_const_iterator<int,void *>,std::__list_const_iterator<int,void *>>((uint64_t *)(a2 - 40), v15, (uint64_t)&v14);
      v11 = v17;
      *(_DWORD *)(a2 - 16) = v16;
      *(_DWORD *)(a2 - 8) = v11;
      std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>> &,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>*>(v7, (uint64_t)(v10 + 7), a3, 0x6DB6DB6DB6DB6DB7 * (v10 + 7 - v7));
    }
    return std::__list_imp<char *>::clear(&v14);
  }
  return result;
}

void sub_1ADC2342C(_Unwind_Exception *a1)
{
  _QWORD *v1;

  std::__list_imp<char *>::clear(v1);
  _Unwind_Resume(a1);
}

uint64_t *std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>> &,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>*>(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v14;
  _QWORD v15[3];
  int v16;
  int v17;
  uint64_t v18;
  int v19;
  _QWORD v20[3];
  int v21;
  int v22;

  v5 = 0;
  v6 = a3 - 2;
  if (a3 < 2)
    v6 = a3 - 1;
  v7 = v6 >> 1;
  do
  {
    v8 = v5 + 1;
    v9 = &a1[7 * v5 + 7];
    v10 = 2 * v5;
    v5 = (2 * v5) | 1;
    v11 = v10 + 2;
    if (v10 + 2 < a3)
    {
      v18 = *v9;
      v12 = &a1[7 * v8];
      v19 = *((_DWORD *)v12 + 2);
      std::list<int>::list(v20, (uint64_t)(v12 + 2));
      v21 = *((_DWORD *)v12 + 10);
      v22 = *((_DWORD *)v12 + 12);
      v14 = v9[7];
      std::list<int>::list(v15, (uint64_t)(v9 + 9));
      v16 = *((_DWORD *)v9 + 24);
      v17 = *((_DWORD *)v9 + 26);
      LODWORD(v12) = v18;
      std::__list_imp<char *>::clear(v15);
      std::__list_imp<char *>::clear(v20);
      v9 += 7 * ((int)v12 < (int)v14);
      if ((int)v12 < (int)v14)
        v5 = v11;
    }
    *a1 = *v9;
    *((_DWORD *)a1 + 2) = *((_DWORD *)v9 + 2);
    if (a1 != v9)
      std::list<int>::__assign_with_sentinel[abi:ne180100]<std::__list_const_iterator<int,void *>,std::__list_const_iterator<int,void *>>(a1 + 2, v9[3], (uint64_t)(v9 + 2));
    *((_DWORD *)a1 + 10) = *((_DWORD *)v9 + 10);
    *((_DWORD *)a1 + 12) = *((_DWORD *)v9 + 12);
    a1 = v9;
  }
  while (v5 <= v7);
  return v9;
}

void sub_1ADC235BC(_Unwind_Exception *a1)
{
  _QWORD *v1;

  std::__list_imp<char *>::clear(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>> &,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>*>(_QWORD *result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  _QWORD *v6;
  unint64_t v7;
  uint64_t *v8;
  int v9;
  uint64_t *v10;
  _QWORD *v11;
  int v12;
  int v13;
  int v14;
  uint64_t *v15;
  int v16;
  int v17;
  int v18;
  int v19;
  _QWORD v20[3];
  int v21;
  int v22;
  uint64_t v23;
  int v24;
  _QWORD v25[3];
  int v26;
  int v27;
  uint64_t v28;
  int v29;
  _QWORD v30[3];
  int v31;
  int v32;
  uint64_t v33;
  int v34;
  uint64_t v35[3];
  int v36;
  int v37;
  uint64_t v38;
  int v39;
  _QWORD v40[3];
  int v41;
  int v42;

  v4 = a4 - 2;
  if (a4 >= 2)
  {
    v6 = result;
    v7 = v4 >> 1;
    v8 = &result[7 * (v4 >> 1)];
    v38 = *v8;
    v39 = *((_DWORD *)v8 + 2);
    std::list<int>::list(v40, (uint64_t)(v8 + 2));
    v9 = *((_DWORD *)v8 + 12);
    v41 = *((_DWORD *)v8 + 10);
    v42 = v9;
    v10 = (uint64_t *)(a2 - 56);
    v33 = *(_QWORD *)(a2 - 56);
    v34 = *(_DWORD *)(a2 - 48);
    v11 = std::list<int>::list(v35, a2 - 40);
    v12 = *(_DWORD *)(a2 - 8);
    v36 = *(_DWORD *)(a2 - 16);
    v37 = v12;
    v13 = v38;
    std::__list_imp<char *>::clear(v11);
    result = std::__list_imp<char *>::clear(v40);
    if (v13 < (int)v33)
    {
      v28 = *(_QWORD *)(a2 - 56);
      v29 = *(_DWORD *)(a2 - 48);
      std::list<int>::list(v30, a2 - 40);
      v14 = *(_DWORD *)(a2 - 8);
      v31 = *(_DWORD *)(a2 - 16);
      v32 = v14;
      do
      {
        v15 = v8;
        *v10 = *v8;
        *((_DWORD *)v10 + 2) = *((_DWORD *)v8 + 2);
        if (v10 != v8)
          std::list<int>::__assign_with_sentinel[abi:ne180100]<std::__list_const_iterator<int,void *>,std::__list_const_iterator<int,void *>>(v10 + 2, v8[3], (uint64_t)(v8 + 2));
        *((_DWORD *)v10 + 10) = *((_DWORD *)v8 + 10);
        *((_DWORD *)v10 + 12) = *((_DWORD *)v8 + 12);
        if (!v7)
          break;
        v7 = (v7 - 1) >> 1;
        v8 = &v6[7 * v7];
        v23 = *v8;
        v24 = *((_DWORD *)v8 + 2);
        std::list<int>::list(v25, (uint64_t)(v8 + 2));
        v16 = *((_DWORD *)v8 + 12);
        v26 = *((_DWORD *)v8 + 10);
        v27 = v16;
        v19 = v28;
        std::list<int>::list(v20, (uint64_t)v30);
        v21 = v31;
        v22 = v32;
        v17 = v23;
        std::__list_imp<char *>::clear(v20);
        std::__list_imp<char *>::clear(v25);
        v10 = v15;
      }
      while (v17 < v19);
      *v15 = v28;
      *((_DWORD *)v15 + 2) = v29;
      if (v15 != &v28)
        std::list<int>::__assign_with_sentinel[abi:ne180100]<std::__list_const_iterator<int,void *>,std::__list_const_iterator<int,void *>>(v15 + 2, v30[1], (uint64_t)v30);
      v18 = v32;
      *((_DWORD *)v15 + 10) = v31;
      *((_DWORD *)v15 + 12) = v18;
      return std::__list_imp<char *>::clear(v30);
    }
  }
  return result;
}

void sub_1ADC23818(_Unwind_Exception *a1)
{
  _QWORD *v1;

  std::__list_imp<char *>::clear(v1);
  _Unwind_Resume(a1);
}

uint64_t fst::AcyclicMinimizer<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>::AcyclicMinimizer(uint64_t a1, _QWORD *a2)
{
  BOOL v4;

  v4 = (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(*a2 + 64))(a2, 0x40000, 1) == 0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_QWORD *)(a1 + 168) = 0;
  *(_BYTE *)(a1 + 176) = v4;
  if (!(*(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(*a2 + 64))(a2, 0x40000, 1))
    FstCheck(1, "Weight::Properties() & kIdempotent", "../libquasar/libkaldi/tools/openfst/src/include/fst/minimize.h");
  fst::AcyclicMinimizer<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>::Initialize((_QWORD *)a1, (uint64_t)a2);
  fst::AcyclicMinimizer<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>::Refine((_QWORD *)a1, a2);
  return a1;
}

void sub_1ADC23918(_Unwind_Exception *a1)
{
  _QWORD *v1;

  fst::Partition<int>::~Partition(v1);
  _Unwind_Resume(a1);
}

void fst::AcyclicMinimizer<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>::Initialize(_QWORD *a1, uint64_t a2)
{
  _DWORD *v3;
  uint64_t v4;
  unint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  unint64_t v12;

  v12 = 0;
  v10 = 0u;
  v11 = 0u;
  fst::DfsVisit<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,fst::AcyclicMinimizer<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>::HeightVisitor,fst::AnyArcFilter<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>(a2, (uint64_t)&v10, 0);
  fst::Partition<int>::Initialize((uint64_t)a1, v12);
  fst::Partition<int>::AllocateClasses((uint64_t)a1, DWORD2(v11) + 1);
  v3 = (_DWORD *)*((_QWORD *)&v10 + 1);
  if (*((_QWORD *)&v10 + 1) != (_QWORD)v10)
  {
    v4 = 0;
    v5 = 0;
    v3 = (_DWORD *)v10;
    do
    {
      v6 = v3[v5];
      v7 = *(_QWORD *)(a1[1] + (v4 >> 29));
      v8 = a1[4];
      v9 = *(_QWORD *)(v8 + 8 * v6);
      if (v9)
      {
        *(_QWORD *)(v9 + 16) = v7;
        v9 = *(_QWORD *)(v8 + 8 * v6);
      }
      *(_QWORD *)(v7 + 8) = v9;
      *(_QWORD *)(v7 + 16) = 0;
      *(_QWORD *)(v8 + 8 * v6) = v7;
      *(_DWORD *)(a1[10] + 4 * (v4 >> 32)) = v6;
      ++*(_DWORD *)(a1[13] + 4 * v6);
      ++v5;
      v3 = (_DWORD *)v10;
      v4 += 0x100000000;
    }
    while (v5 < (uint64_t)(*((_QWORD *)&v10 + 1) - v10) >> 2);
  }
  if (v3)
  {
    *((_QWORD *)&v10 + 1) = v3;
    operator delete(v3);
  }
}

void sub_1ADC23A18(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void fst::AcyclicMinimizer<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>::Refine(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t i;
  uint64_t v10;
  int v11;
  uint64_t v12;
  int v13;
  int v14;
  int v15;
  uint64_t *v16;
  _QWORD *v17[4];
  int v18;
  unsigned int *v19;

  v2 = a1[5] - a1[4];
  if (((unint64_t)v2 >> 3))
  {
    v5 = 0;
    v6 = (int)(v2 >> 3);
    if (v6 <= 1)
      v7 = 1;
    else
      v7 = v6;
    do
    {
      v17[0] = 0;
      v17[1] = 0;
      v17[2] = a2;
      v17[3] = a1;
      v18 = 7;
      v16 = (uint64_t *)v17;
      v8 = *(_QWORD *)(a1[4] + 8 * (int)v5);
      v15 = *(_DWORD *)v8;
      v19 = (unsigned int *)&v15;
      *((_DWORD *)std::__tree<std::__value_type<int,int>,std::__map_value_compare<int,std::__value_type<int,int>,fst::StateComparator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>,false>,std::allocator<std::__value_type<int,int>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int &&>,std::tuple<>>(&v16, (unsigned int *)&v15, (uint64_t)&std::piecewise_construct, &v19)+ 8) = v5;
      for (i = *(_QWORD *)(v8 + 8); i; i = *(_QWORD *)(i + 8))
      {
        v15 = 0;
        v15 = *(_DWORD *)i;
        v10 = std::__tree<std::__value_type<int,int>,std::__map_value_compare<int,std::__value_type<int,int>,fst::StateComparator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>,false>,std::allocator<std::__value_type<int,int>>>::find<int>((uint64_t)&v16, (unsigned int *)&v15);
        if (v17 == (_QWORD **)v10)
          v11 = fst::Partition<int>::AddClass((uint64_t)a1);
        else
          v11 = *(_DWORD *)(v10 + 32);
        v19 = (unsigned int *)&v15;
        *((_DWORD *)std::__tree<std::__value_type<int,int>,std::__map_value_compare<int,std::__value_type<int,int>,fst::StateComparator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>,false>,std::allocator<std::__value_type<int,int>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int &&>,std::tuple<>>(&v16, (unsigned int *)&v15, (uint64_t)&std::piecewise_construct, &v19)+ 8) = v11;
      }
      v12 = *(_QWORD *)(a1[4] + 8 * (int)v5);
      while (v12)
      {
        v15 = 0;
        v15 = *(_DWORD *)v12;
        v13 = *(_DWORD *)(a1[10] + 4 * v15);
        v19 = (unsigned int *)&v15;
        v14 = *((_DWORD *)std::__tree<std::__value_type<int,int>,std::__map_value_compare<int,std::__value_type<int,int>,fst::StateComparator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>,false>,std::allocator<std::__value_type<int,int>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int &&>,std::tuple<>>(&v16, (unsigned int *)&v15, (uint64_t)&std::piecewise_construct, &v19)+ 8);
        v12 = *(_QWORD *)(v12 + 8);
        if (v13 != v14)
          fst::Partition<int>::Move(a1, v15, v14);
      }
      std::__tree<int>::destroy((uint64_t)&v16, v17[0]);
      ++v5;
    }
    while (v5 != v7);
  }
}

void sub_1ADC23BF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, _QWORD *a12)
{
  std::__tree<int>::destroy((uint64_t)&a11, a12);
  _Unwind_Resume(a1);
}

void fst::DfsVisit<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,fst::AcyclicMinimizer<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>::HeightVisitor,fst::AnyArcFilter<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char inited;
  char v10;
  _QWORD *v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  std::vector<char>::pointer begin;
  unint64_t v19;
  uint64_t v20;
  _DWORD *v21;
  unsigned int *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  int v26;
  int v27;
  uint64_t v28;
  int v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  int v36;
  std::vector<char>::pointer end;
  char *v38;
  std::vector<char>::pointer v39;
  int64_t v40;
  int64_t v41;
  unint64_t v42;
  size_t v43;
  char *v44;
  char *v45;
  char *v46;
  char *v47;
  char v48;
  char v49;
  uint64_t v50;
  int v51;
  std::vector<char>::value_type v52[8];
  std::vector<char>::value_type __x[8];
  int v54;
  int v55;
  void *v56;
  _QWORD v57[6];
  _QWORD *v58;
  _OWORD v59[2];
  __int128 v60;
  std::vector<char> v61;

  v51 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  if (v51 == -1)
    return;
  memset(&v61, 0, sizeof(v61));
  v60 = 0u;
  memset(v59, 0, sizeof(v59));
  fst::MemoryPool<fst::DfsState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>::MemoryPool(&v56, 64);
  v50 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 64))(a1, 1, 0);
  if (v50)
    v6 = fst::CountStates<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>(a1);
  else
    v6 = (v51 + 1);
  __x[0] = 0;
  if ((std::vector<char>::pointer)(int)v6 <= (std::vector<char>::pointer)(v61.__end_ - v61.__begin_))
  {
    if ((std::vector<char>::pointer)(int)v6 < (std::vector<char>::pointer)(v61.__end_ - v61.__begin_))
      v61.__end_ = &v61.__begin_[(int)v6];
  }
  else
  {
    std::vector<char>::__append(&v61, (int)v6 - (unint64_t)(v61.__end_ - v61.__begin_), __x);
  }
  v55 = 0;
  (*(void (**)(uint64_t, std::vector<char>::value_type *))(*(_QWORD *)a1 + 128))(a1, __x);
  if (v51 >= (int)v6)
    goto LABEL_107;
  v7 = v51;
  v49 = a3;
  do
  {
    v61.__begin_[(int)v7] = 1;
    v8 = (uint64_t)v58;
    if (v58)
    {
      v58 = (_QWORD *)v58[6];
    }
    else
    {
      v8 = fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::Link>::Allocate(v57, 1);
      *(_QWORD *)(v8 + 48) = 0;
    }
    *(_DWORD *)v8 = v7;
    *(_QWORD *)(v8 + 40) = 0;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 136))(a1, v7, v8 + 8);
    *(_QWORD *)v52 = v8;
    std::deque<fst::DfsState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>> *,std::allocator<fst::DfsState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>> *>>::push_back(v59, v52);
    inited = fst::AcyclicMinimizer<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::HeightVisitor::InitState((char **)a2, v7);
LABEL_15:
    v10 = inited;
    while (*((_QWORD *)&v60 + 1))
    {
      v11 = *(_QWORD **)(*(_QWORD *)(*((_QWORD *)&v59[0] + 1)
                                   + (((unint64_t)(*((_QWORD *)&v60 + 1) + v60 - 1) >> 6) & 0x3FFFFFFFFFFFFF8))
                       + 8 * ((*((_QWORD *)&v60 + 1) + v60 - 1) & 0x1FF));
      v12 = *(int *)v11;
      v13 = v61.__end_ - v61.__begin_;
      if (v61.__end_ - v61.__begin_ <= v12)
      {
        v6 = (v12 + 1);
        v52[0] = 0;
        if ((int)v6 <= v13)
        {
          if ((int)v6 < v13)
            v61.__end_ = &v61.__begin_[(int)v6];
        }
        else
        {
          std::vector<char>::__append(&v61, (int)v6 - v13, v52);
        }
      }
      if ((v10 & 1) == 0)
        goto LABEL_32;
      v14 = v11[1];
      if (!v14)
      {
        if (v11[5] < v11[3])
          goto LABEL_28;
        goto LABEL_32;
      }
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v14 + 24))(v14))
      {
LABEL_32:
        v61.__begin_[v12] = 2;
        v20 = v11[1];
        if (v20)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
        }
        else
        {
          v21 = (_DWORD *)v11[4];
          if (v21)
            --*v21;
        }
        v11[6] = v58;
        v58 = v11;
        --*((_QWORD *)&v60 + 1);
        std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::__maybe_remove_back_spare[abi:ne180100](v59, 1);
        if (*((_QWORD *)&v60 + 1))
        {
          v22 = *(unsigned int **)(*(_QWORD *)(*((_QWORD *)&v59[0] + 1)
                                             + (((unint64_t)(*((_QWORD *)&v60 + 1) + v60 - 1) >> 6) & 0x3FFFFFFFFFFFFF8))
                                 + 8 * ((*((_QWORD *)&v60 + 1) + v60 - 1) & 0x1FF));
          v23 = *v22;
          v24 = *((_QWORD *)v22 + 1);
          if (v24)
            (*(void (**)(uint64_t))(*(_QWORD *)v24 + 32))(v24);
          v25 = *(char **)a2;
          v26 = *(_DWORD *)(*(_QWORD *)a2 + 4 * v12);
          if (v26 == -1)
          {
            v26 = 0;
            *(_DWORD *)&v25[4 * v12] = 0;
            if ((v23 & 0x80000000) != 0)
              goto LABEL_49;
          }
          else if ((v23 & 0x80000000) != 0)
          {
            goto LABEL_49;
          }
          v27 = v26 + 1;
          if (v26 >= *(_DWORD *)&v25[4 * v23])
            *(_DWORD *)&v25[4 * v23] = v27;
          if (*(_QWORD *)(a2 + 24) < (unint64_t)v27)
            *(_QWORD *)(a2 + 24) = v27;
LABEL_49:
          v28 = *((_QWORD *)v22 + 1);
          if (v28)
            (*(void (**)(uint64_t))(*(_QWORD *)v28 + 40))(v28);
          else
            ++*((_QWORD *)v22 + 5);
        }
        else if (*(_DWORD *)(*(_QWORD *)a2 + 4 * v12) == -1)
        {
          *(_DWORD *)(*(_QWORD *)a2 + 4 * v12) = 0;
        }
      }
      else
      {
        v15 = v11[1];
        if (v15)
        {
          v16 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 32))(v15);
          goto LABEL_29;
        }
LABEL_28:
        v16 = v11[2] + 56 * v11[5];
LABEL_29:
        v17 = *(int *)(v16 + 48);
        begin = v61.__begin_;
        v19 = v61.__end_ - v61.__begin_;
        if (v61.__end_ - v61.__begin_ <= v17)
        {
          v6 = (v17 + 1);
          v52[0] = 0;
          if ((int)v6 <= v19)
          {
            if ((int)v6 < v19)
              v61.__end_ = &v61.__begin_[(int)v6];
          }
          else
          {
            std::vector<char>::__append(&v61, (int)v6 - v19, v52);
            v17 = *(int *)(v16 + 48);
            begin = v61.__begin_;
          }
        }
        v29 = begin[v17];
        if (v29 != 1)
        {
          if (v29 != 2)
          {
            begin[v17] = 1;
            v32 = (uint64_t)v58;
            if (v58)
            {
              v58 = (_QWORD *)v58[6];
            }
            else
            {
              v32 = fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::Link>::Allocate(v57, 1);
              *(_QWORD *)(v32 + 48) = 0;
            }
            *(_DWORD *)v32 = *(_DWORD *)(v16 + 48);
            *(_QWORD *)(v32 + 40) = 0;
            (*(void (**)(uint64_t))(*(_QWORD *)a1 + 136))(a1);
            *(_QWORD *)v52 = v32;
            std::deque<fst::DfsState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>> *,std::allocator<fst::DfsState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>> *>>::push_back(v59, v52);
            inited = fst::AcyclicMinimizer<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::HeightVisitor::InitState((char **)a2, *(_DWORD *)(v16 + 48));
            goto LABEL_15;
          }
          v30 = *(_DWORD *)(*(_QWORD *)a2 + 4 * v17);
          if (v30 >= *(_DWORD *)(*(_QWORD *)a2 + 4 * v12))
            *(_DWORD *)(*(_QWORD *)a2 + 4 * v12) = v30 + 1;
        }
        v31 = v11[1];
        if (v31)
          (*(void (**)(uint64_t))(*(_QWORD *)v31 + 40))(v31);
        else
          ++v11[5];
        v10 = 1;
      }
    }
    if ((a3 & 1) != 0)
      break;
    if ((_DWORD)v7 == v51)
      v7 = 0;
    else
      v7 = (v7 + 1);
    if ((int)v7 < (int)v6)
    {
      v33 = &v61.__begin_[(int)v7];
      v34 = (int)v6 - (uint64_t)(int)v7;
      while (*v33++)
      {
        v7 = (v7 + 1);
        if (!--v34)
        {
          v7 = v6;
          break;
        }
      }
    }
    if (v50 || (_DWORD)v7 != (_DWORD)v6)
      continue;
LABEL_77:
    if (*(_QWORD *)__x)
    {
      if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)__x + 16))(*(_QWORD *)__x) & 1) != 0)
        continue;
      if (*(_QWORD *)__x)
      {
        v36 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)__x + 24))(*(_QWORD *)__x);
        goto LABEL_83;
      }
    }
    else if (v55 >= v54)
    {
      continue;
    }
    v36 = v55;
LABEL_83:
    if (v36 != (_DWORD)v6)
    {
      if (*(_QWORD *)__x)
        (*(void (**)(_QWORD))(**(_QWORD **)__x + 32))(*(_QWORD *)__x);
      else
        ++v55;
      goto LABEL_77;
    }
    end = v61.__end_;
    if (v61.__end_ >= v61.__end_cap_.__value_)
    {
      v39 = v61.__begin_;
      v40 = v61.__end_ - v61.__begin_;
      v41 = v61.__end_ - v61.__begin_ + 1;
      if (v41 < 0)
        std::vector<int>::__throw_length_error[abi:ne180100]();
      v42 = v61.__end_cap_.__value_ - v61.__begin_;
      if (2 * (v61.__end_cap_.__value_ - v61.__begin_) > (unint64_t)v41)
        v41 = 2 * v42;
      if (v42 >= 0x3FFFFFFFFFFFFFFFLL)
        v43 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v43 = v41;
      if (v43)
        v44 = (char *)operator new(v43);
      else
        v44 = 0;
      v45 = &v44[v40];
      v46 = &v44[v40];
      *v46 = 0;
      v38 = v46 + 1;
      if (end != v39)
      {
        v47 = &end[~(unint64_t)v39];
        do
        {
          v48 = *--end;
          (v47--)[(_QWORD)v44] = v48;
        }
        while (end != v39);
        end = v61.__begin_;
        v45 = v44;
      }
      v61.__begin_ = v45;
      v61.__end_ = v38;
      v61.__end_cap_.__value_ = &v44[v43];
      if (end)
        operator delete(end);
    }
    else
    {
      *v61.__end_ = 0;
      v38 = end + 1;
    }
    v61.__end_ = v38;
    v6 = (v6 + 1);
    a3 = v49;
  }
  while ((v10 & 1) != 0 && (int)v7 < (int)v6);
LABEL_107:
  if (*(_QWORD *)__x)
    (*(void (**)(_QWORD))(**(_QWORD **)__x + 8))(*(_QWORD *)__x);
  v56 = &unk_1E5D19A30;
  fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>::Link>::~MemoryArena(v57);
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v56);
  std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100](v59);
  if (v61.__begin_)
  {
    v61.__end_ = v61.__begin_;
    operator delete(v61.__begin_);
  }
}

void sub_1ADC242B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  void *v11;
  void *v12;
  va_list va;
  uint64_t v14;
  va_list va1;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  va_list va2;

  va_start(va2, a9);
  va_start(va1, a9);
  va_start(va, a9);
  va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v14 = va_arg(va2, _QWORD);
  v16 = va_arg(va2, _QWORD);
  v17 = va_arg(va2, _QWORD);
  v18 = va_arg(va2, _QWORD);
  v19 = va_arg(va2, _QWORD);
  v20 = va_arg(va2, _QWORD);
  v21 = va_arg(va2, _QWORD);
  v12 = &unk_1E5D19A30;
  fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>::Link>::~MemoryArena((uint64_t *)va1);
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)va);
  std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100]((uint64_t *)va2);
  v11 = *(void **)(v9 - 112);
  if (v11)
  {
    *(_QWORD *)(v9 - 104) = v11;
    operator delete(v11);
  }
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<std::__value_type<int,int>,std::__map_value_compare<int,std::__value_type<int,int>,fst::StateComparator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>,false>,std::allocator<std::__value_type<int,int>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int &&>,std::tuple<>>(uint64_t **a1, unsigned int *a2, uint64_t a3, unsigned int **a4)
{
  uint64_t *v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t v10;

  v6 = std::__tree<std::__value_type<int,int>,std::__map_value_compare<int,std::__value_type<int,int>,fst::StateComparator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>,false>,std::allocator<std::__value_type<int,int>>>::__find_equal<int>((uint64_t)a1, &v10, a2);
  v7 = (uint64_t *)*v6;
  if (!*v6)
  {
    v8 = (uint64_t **)v6;
    v7 = (uint64_t *)operator new(0x28uLL);
    *(uint64_t *)((char *)v7 + 28) = **a4;
    std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at(a1, v10, v8, v7);
  }
  return v7;
}

uint64_t *std::__tree<std::__value_type<int,int>,std::__map_value_compare<int,std::__value_type<int,int>,fst::StateComparator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>,false>,std::allocator<std::__value_type<int,int>>>::__find_equal<int>(uint64_t a1, _QWORD *a2, unsigned int *a3)
{
  uint64_t *v4;
  uint64_t *v5;
  _QWORD *v7;
  uint64_t *v8;

  v5 = (uint64_t *)(a1 + 8);
  v4 = *(uint64_t **)(a1 + 8);
  if (v4)
  {
    v7 = (_QWORD *)(a1 + 24);
    do
    {
      while (1)
      {
        v8 = v4;
        if (!fst::StateComparator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>::operator()(v7, *a3, *((unsigned int *)v4 + 7)))break;
        v4 = (uint64_t *)*v8;
        v5 = v8;
        if (!*v8)
          goto LABEL_10;
      }
      if (!fst::StateComparator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>::operator()(v7, *((unsigned int *)v8 + 7), *a3))break;
      v5 = v8 + 1;
      v4 = (uint64_t *)v8[1];
    }
    while (v4);
  }
  else
  {
    v8 = (uint64_t *)(a1 + 8);
  }
LABEL_10:
  *a2 = v8;
  return v5;
}

uint64_t fst::StateComparator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>::operator()(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  int v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _DWORD *v11;
  _DWORD *v12;
  uint64_t v13;
  int v14;
  int v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  char v25;
  _QWORD v27[3];
  _DWORD *v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  _DWORD *v33;
  unint64_t v34;

  v6 = *((_DWORD *)a1 + 4);
  if ((v6 & 1) != 0)
  {
    (*(void (**)(uint64_t *__return_ptr, _QWORD, uint64_t))(*(_QWORD *)*a1 + 32))(&v30, *a1, a2);
    v16 = 0;
    v17 = v32;
    if ((_DWORD)v30)
    {
      v18 = (int)v30;
      while (1)
      {
        v16 ^= v18;
        if ((uint64_t *)v17 == &v31)
          break;
        v18 = *(int *)(v17 + 16) ^ (unint64_t)(2 * v16);
        v17 = *(_QWORD *)(v17 + 8);
      }
    }
    v19 = v34 ^ __ROR8__(v16, 59);
    std::__list_imp<char *>::clear(&v31);
    (*(void (**)(uint64_t *__return_ptr, _QWORD, uint64_t))(*(_QWORD *)*a1 + 32))(&v30, *a1, a3);
    v20 = 0;
    v21 = v32;
    if ((_DWORD)v30)
    {
      v22 = (int)v30;
      while (1)
      {
        v20 ^= v22;
        if ((uint64_t *)v21 == &v31)
          break;
        v22 = *(int *)(v21 + 16) ^ (unint64_t)(2 * v20);
        v21 = *(_QWORD *)(v21 + 8);
      }
    }
    v23 = v34 ^ __ROR8__(v20, 59);
    std::__list_imp<char *>::clear(&v31);
    if (v19 < v23)
      return 1;
    if (v19 <= v23 && (a1[2] & 2) != 0)
      goto LABEL_3;
    return 0;
  }
  if ((v6 & 2) == 0)
    return 0;
LABEL_3:
  v7 = (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*a1 + 40))(*a1, a2);
  if (v7 < (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*a1 + 40))(*a1, a3))
    return 1;
  v8 = (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*a1 + 40))(*a1, a2);
  if (v8 > (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*a1 + 40))(*a1, a3) || (a1[2] & 4) == 0)
    return 0;
  v9 = *a1;
  v34 = 0;
  (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(_QWORD *)v9 + 136))(v9, a2, &v30);
  v10 = *a1;
  v29 = 0;
  (*(void (**)(uint64_t, uint64_t, _QWORD *))(*(_QWORD *)v10 + 136))(v10, a3, v27);
  while (1)
  {
    if (v30)
    {
      if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v30 + 24))(v30) & 1) != 0)
        goto LABEL_48;
    }
    else if (v34 >= v32)
    {
      goto LABEL_48;
    }
    if (v27[0])
    {
      if (((*(uint64_t (**)(_QWORD))(*(_QWORD *)v27[0] + 24))(v27[0]) & 1) != 0)
        goto LABEL_48;
    }
    else if (v29 >= v27[2])
    {
LABEL_48:
      v24 = 0;
      v25 = 1;
      goto LABEL_51;
    }
    if (v30)
      v11 = (_DWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v30 + 32))(v30);
    else
      v11 = (_DWORD *)(v31 + 56 * v34);
    if (v27[0])
      v12 = (_DWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v27[0] + 32))(v27[0]);
    else
      v12 = (_DWORD *)(v27[1] + 56 * v29);
    if (*v11 < *v12)
      goto LABEL_49;
    if (*v11 > *v12)
      break;
    v13 = *(_QWORD *)(a1[1] + 80);
    v14 = *(_DWORD *)(v13 + 4 * (int)v11[12]);
    v15 = *(_DWORD *)(v13 + 4 * (int)v12[12]);
    if (v14 < v15)
    {
LABEL_49:
      v25 = 0;
      v24 = 1;
      goto LABEL_51;
    }
    if (v14 > v15)
      break;
    if (v30)
      (*(void (**)(uint64_t))(*(_QWORD *)v30 + 40))(v30);
    else
      ++v34;
    if (v27[0])
      (*(void (**)(_QWORD))(*(_QWORD *)v27[0] + 40))(v27[0]);
    else
      ++v29;
  }
  v25 = 0;
  v24 = 0;
LABEL_51:
  if (v27[0])
  {
    (*(void (**)(_QWORD))(*(_QWORD *)v27[0] + 8))(v27[0]);
  }
  else if (v28)
  {
    --*v28;
  }
  if (v30)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v30 + 8))(v30);
  }
  else if (v33)
  {
    --*v33;
  }
  if ((v25 & 1) != 0)
    return 0;
  return v24;
}

void sub_1ADC24814(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, _DWORD *a17)
{
  if (a14)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)a14 + 8))(a14);
  }
  else if (a17)
  {
    --*a17;
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__tree<std::__value_type<int,int>,std::__map_value_compare<int,std::__value_type<int,int>,fst::StateComparator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>,false>,std::allocator<std::__value_type<int,int>>>::find<int>(uint64_t a1, unsigned int *a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;
  int v7;
  uint64_t *v8;

  v2 = a1 + 8;
  v3 = *(_QWORD *)(a1 + 8);
  if (!v3)
    return v2;
  v5 = (_QWORD *)(a1 + 24);
  v6 = a1 + 8;
  do
  {
    v7 = fst::StateComparator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>::operator()(v5, *(unsigned int *)(v3 + 28), *a2);
    v8 = (uint64_t *)(v3 + 8);
    if (!v7)
    {
      v8 = (uint64_t *)v3;
      v6 = v3;
    }
    v3 = *v8;
  }
  while (*v8);
  if (v6 == v2
    || fst::StateComparator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>::operator()(v5, *a2, *(unsigned int *)(v6 + 28)))
  {
    return v2;
  }
  return v6;
}

uint64_t fst::CyclicMinimizer<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,fst::LifoQueue<int>>::CyclicMinimizer(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 64))(a2, 0x40000, 1);
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_QWORD *)(a1 + 168) = 0;
  *(_BYTE *)(a1 + 176) = v4 == 0;
  *(_DWORD *)(a1 + 192) = 2;
  *(_BYTE *)(a1 + 196) = 0;
  *(_QWORD *)(a1 + 184) = &unk_1E5D27B60;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  fst::VectorFst<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>,fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>>::VectorFst((_QWORD *)(a1 + 248));
  if (!(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 64))(a2, 0x40000, 1))
    FstCheck(1, "Weight::Properties() & kIdempotent", "../libquasar/libkaldi/tools/openfst/src/include/fst/minimize.h");
  fst::CyclicMinimizer<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,fst::LifoQueue<int>>::Initialize((_QWORD *)a1, a2);
  fst::CyclicMinimizer<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,fst::LifoQueue<int>>::Compute((_QWORD *)a1);
  return a1;
}

void sub_1ADC24A00(_Unwind_Exception *a1)
{
  _QWORD *v1;
  _QWORD *v2;

  std::deque<int>::~deque[abi:ne180100](v2);
  fst::Partition<int>::~Partition(v1);
  _Unwind_Resume(a1);
}

_QWORD *fst::CyclicMinimizer<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,fst::LifoQueue<int>>::Initialize(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD *result;

  v4 = (uint64_t)(a1 + 31);
  fst::Reverse<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>(a2, a1 + 31, 1);
  fst::ArcSort<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>,fst::ILabelCompare<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>(v4);
  fst::Partition<int>::Initialize((uint64_t)a1, (((*(_QWORD *)(a1[32] + 72) - *(_QWORD *)(a1[32] + 64)) << 29) - 0x100000000) >> 32);
  fst::CyclicMinimizer<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,fst::LifoQueue<int>>::PrePartition(a1, a2);
  result = (_QWORD *)operator new();
  *result = 0;
  result[1] = 0;
  result[2] = 0;
  result[3] = a1;
  a1[33] = result;
  return result;
}

void fst::CyclicMinimizer<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,fst::LifoQueue<int>>::Compute(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  v1 = a1[30];
  if (v1)
  {
    v3 = (uint64_t)(a1 + 25);
    do
    {
      v4 = *(_DWORD *)(*(_QWORD *)(a1[26] + ((a1[29] >> 7) & 0x1FFFFFFFFFFFFF8)) + 4 * (a1[29] & 0x3FFLL));
      ++a1[29];
      a1[30] = v1 - 1;
      std::deque<int>::__maybe_remove_front_spare[abi:ne180100](v3, 1);
      fst::CyclicMinimizer<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,fst::LifoQueue<int>>::Split(a1, v4);
      v1 = a1[30];
    }
    while (v1);
  }
}

void fst::ArcSort<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>,fst::ILabelCompare<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>(uint64_t a1)
{
  uint64_t v1[2];
  _OWORD v2[2];
  uint64_t v3;
  char *v4;
  _OWORD v5[2];
  char v6;
  void **v7;

  v3 = a1;
  v4 = &v6;
  memset(v5, 0, sizeof(v5));
  v1[0] = a1;
  v1[1] = (uint64_t)&v6;
  memset(v2, 0, sizeof(v2));
  fst::StateMap<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>,fst::ArcSortMapper<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>,fst::ILabelCompare<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>>(a1, v1);
  v7 = (void **)v2;
  std::vector<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>::__destroy_vector::operator()[abi:ne180100](&v7);
  v7 = (void **)v5;
  std::vector<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>::__destroy_vector::operator()[abi:ne180100](&v7);
}

void sub_1ADC24BD4(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v4 = v1;
  *(_QWORD *)(v3 - 40) = v2;
  std::vector<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v3 - 40));
  *(_QWORD *)(v3 - 40) = v4;
  std::vector<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v3 - 40));
  _Unwind_Resume(a1);
}

void fst::CyclicMinimizer<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,fst::LifoQueue<int>>::PrePartition(_QWORD *a1, uint64_t a2)
{
  fst *v4;
  _QWORD *v5;
  int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  fst *v27;
  _QWORD *v28;
  void *v29[2];
  char v30;
  int v31;
  uint64_t v32;
  int v33;
  int v34;
  void *__p;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  int v40;

  if (FLAGS_v >= 5)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "INFO");
    v4 = fst::LogMessage::LogMessage((fst *)&v32, (uint64_t)&__p);
    v5 = (_QWORD *)fst::cerr(v4);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"PrePartition", 12);
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v32);
    if (SHIBYTE(v37) < 0)
      operator delete(__p);
  }
  v37 = 0;
  v38 = a2;
  v39 = a1;
  v40 = 1;
  __p = &v36;
  v36 = 0;
  v34 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a2 + 128))(a2, &v32);
  v6 = fst::Partition<int>::AddClass((uint64_t)a1);
  if (v32)
    v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v32 + 24))(v32);
  else
    v7 = v34;
  v8 = *(_QWORD *)(a1[1] + 8 * v7);
  v9 = a1[4];
  v10 = *(_QWORD *)(v9 + 8 * v6);
  if (v10)
  {
    *(_QWORD *)(v10 + 16) = v8;
    v10 = *(_QWORD *)(v9 + 8 * v6);
  }
  *(_QWORD *)(v8 + 8) = v10;
  *(_QWORD *)(v8 + 16) = 0;
  *(_QWORD *)(v9 + 8 * v6) = v8;
  *(_DWORD *)(a1[10] + 4 * v7) = v6;
  ++*(_DWORD *)(a1[13] + 4 * v6);
  if (v32)
    v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v32 + 24))(v32);
  else
    v11 = v34;
  v31 = v11;
  v29[0] = &v31;
  *((_DWORD *)std::__tree<std::__value_type<int,int>,std::__map_value_compare<int,std::__value_type<int,int>,fst::StateComparator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>,false>,std::allocator<std::__value_type<int,int>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int &&>,std::tuple<>>((uint64_t **)&__p, (unsigned int *)&v31, (uint64_t)&std::piecewise_construct, (unsigned int **)v29)+ 8) = v6;
  LODWORD(v29[0]) = v6;
  std::deque<int>::push_front((uint64_t)(a1 + 25), v29);
  v12 = v32;
  if (v32)
    goto LABEL_28;
  ++v34;
  while (v32)
  {
    if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v32 + 16))(v32) & 1) != 0)
      goto LABEL_30;
    v31 = 0;
    if (!v32)
      goto LABEL_19;
    v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v32 + 24))(v32);
LABEL_20:
    v31 = v13;
    v14 = std::__tree<std::__value_type<int,int>,std::__map_value_compare<int,std::__value_type<int,int>,fst::StateComparator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>,false>,std::allocator<std::__value_type<int,int>>>::find<int>((uint64_t)&__p, (unsigned int *)&v31);
    if (&v36 == (_QWORD **)v14)
    {
      v21 = fst::Partition<int>::AddClass((uint64_t)a1);
      v22 = v21;
      v23 = v31;
      v24 = *(_QWORD *)(a1[1] + 8 * v31);
      v25 = a1[4];
      v26 = *(_QWORD *)(v25 + 8 * v21);
      if (v26)
      {
        *(_QWORD *)(v26 + 16) = v24;
        v26 = *(_QWORD *)(v25 + 8 * v21);
      }
      *(_QWORD *)(v24 + 8) = v26;
      *(_QWORD *)(v24 + 16) = 0;
      *(_QWORD *)(v25 + 8 * v21) = v24;
      *(_DWORD *)(a1[10] + 4 * v23) = v21;
      ++*(_DWORD *)(a1[13] + 4 * v21);
      v29[0] = &v31;
      *((_DWORD *)std::__tree<std::__value_type<int,int>,std::__map_value_compare<int,std::__value_type<int,int>,fst::StateComparator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>,false>,std::allocator<std::__value_type<int,int>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int &&>,std::tuple<>>((uint64_t **)&__p, (unsigned int *)&v31, (uint64_t)&std::piecewise_construct, (unsigned int **)v29)+ 8) = v21;
      LODWORD(v29[0]) = v22;
      std::deque<int>::push_front((uint64_t)(a1 + 25), v29);
    }
    else
    {
      v15 = v31;
      v16 = *(_DWORD *)(v14 + 32);
      v17 = *(_QWORD *)(a1[1] + 8 * v31);
      v18 = a1[4];
      v19 = *(_QWORD *)(v18 + 8 * v16);
      if (v19)
      {
        *(_QWORD *)(v19 + 16) = v17;
        v19 = *(_QWORD *)(v18 + 8 * v16);
      }
      *(_QWORD *)(v17 + 8) = v19;
      *(_QWORD *)(v17 + 16) = 0;
      *(_QWORD *)(v18 + 8 * v16) = v17;
      *(_DWORD *)(a1[10] + 4 * v15) = v16;
      ++*(_DWORD *)(a1[13] + 4 * v16);
      v20 = *(_DWORD *)(v14 + 32);
      v29[0] = &v31;
      *((_DWORD *)std::__tree<std::__value_type<int,int>,std::__map_value_compare<int,std::__value_type<int,int>,fst::StateComparator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>,false>,std::allocator<std::__value_type<int,int>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int &&>,std::tuple<>>((uint64_t **)&__p, (unsigned int *)&v31, (uint64_t)&std::piecewise_construct, (unsigned int **)v29)+ 8) = v20;
    }
    v12 = v32;
    if (v32)
LABEL_28:
      (*(void (**)(uint64_t))(*(_QWORD *)v32 + 32))(v12);
    else
      ++v34;
  }
  if (v34 < v33)
  {
LABEL_19:
    v13 = v34;
    goto LABEL_20;
  }
LABEL_30:
  if (FLAGS_v >= 5)
  {
    std::string::basic_string[abi:ne180100]<0>(v29, "INFO");
    v27 = fst::LogMessage::LogMessage((fst *)&v31, (uint64_t)v29);
    v28 = (_QWORD *)fst::cerr(v27);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)"Initial Partition: ", 19);
    std::ostream::operator<<();
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v31);
    if (v30 < 0)
      operator delete(v29[0]);
  }
  if (v32)
    (*(void (**)(uint64_t))(*(_QWORD *)v32 + 8))(v32);
  std::__tree<int>::destroy((uint64_t)&__p, v36);
}

void sub_1ADC24FC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,_QWORD *a21,int a22,__int16 a23,char a24,char a25)
{
  if (a14 < 0)
    operator delete(__p);
  if (a17)
    (*(void (**)(uint64_t))(*(_QWORD *)a17 + 8))(a17);
  std::__tree<int>::destroy((uint64_t)&a20, a21);
  _Unwind_Resume(a1);
}

uint64_t fst::StateMap<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>,fst::ArcSortMapper<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>,fst::ILabelCompare<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>>(uint64_t a1, uint64_t *a2)
{
  uint64_t result;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t i;
  uint64_t v9;
  uint64_t v10;
  _QWORD v11[4];

  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  if ((_DWORD)result != -1)
  {
    v5 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 64))(a1, 0x3FFFFFFF0007, 0);
    v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)*a2 + 24))(*a2);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 176))(a1, v6);
    if ((*(int (**)(uint64_t))(*(_QWORD *)a1 + 160))(a1) >= 1)
    {
      v7 = 0;
      do
      {
        fst::ArcSortMapper<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>,fst::ILabelCompare<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>::SetState(a2, v7);
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 240))(a1, v7);
        for (i = a2[5]; ; a2[5] = i)
        {
          v9 = a2[2];
          if (i >= 0x6DB6DB6DB6DB6DB7 * ((a2[3] - v9) >> 3))
            break;
          (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)a1 + 208))(a1, v7, v9 + 56 * i);
          i = a2[5] + 1;
        }
        (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)*a2 + 32))(&v10, *a2, v7);
        (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(_QWORD *)a1 + 184))(a1, v7, &v10);
        std::__list_imp<char *>::clear(v11);
        v7 = (v7 + 1);
      }
      while ((int)v7 < (*(int (**)(uint64_t))(*(_QWORD *)a1 + 160))(a1));
    }
    return (*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)a1 + 192))(a1, v5 & 0x3FFF0FFF0007 | (((v5 >> 16) & 1) << 30) | 0x10000000, 0x3FFFFFFF0007);
  }
  return result;
}

void sub_1ADC2521C(_Unwind_Exception *a1)
{
  _QWORD *v1;

  std::__list_imp<char *>::clear(v1);
  _Unwind_Resume(a1);
}

_QWORD *fst::ArcSortMapper<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>,fst::ILabelCompare<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>::SetState(uint64_t *a1, uint64_t a2)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD v18[3];
  _DWORD *v19;
  unint64_t v20;

  v4 = a1 + 2;
  v5 = a1[2];
  a1[5] = 0;
  v6 = a1[3];
  if (v6 != v5)
  {
    do
    {
      v7 = v6 - 56;
      std::__list_imp<char *>::clear((_QWORD *)(v6 - 40));
      v6 = v7;
    }
    while (v7 != v5);
  }
  a1[3] = v5;
  v8 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)*a1 + 40))(*a1, a2);
  std::vector<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>::reserve(v4, v8);
  v9 = *a1;
  v20 = 0;
  (*(void (**)(uint64_t, uint64_t, _QWORD *))(*(_QWORD *)v9 + 136))(v9, a2, v18);
  while (1)
  {
    if (!v18[0])
    {
      if (v20 >= v18[2])
        goto LABEL_18;
      goto LABEL_9;
    }
    if ((*(unsigned int (**)(_QWORD))(*(_QWORD *)v18[0] + 24))(v18[0]))
      break;
    if (v18[0])
    {
      v10 = (*(uint64_t (**)(void))(*(_QWORD *)v18[0] + 32))();
      goto LABEL_10;
    }
LABEL_9:
    v10 = v18[1] + 56 * v20;
LABEL_10:
    v11 = a1[3];
    if (v11 >= a1[4])
    {
      v12 = std::vector<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>::__push_back_slow_path<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>> const&>(v4, v10);
    }
    else
    {
      std::vector<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>::__construct_one_at_end[abi:ne180100]<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>> const&>((uint64_t)v4, v10);
      v12 = v11 + 56;
    }
    a1[3] = v12;
    if (v18[0])
      (*(void (**)(_QWORD))(*(_QWORD *)v18[0] + 40))(v18[0]);
    else
      ++v20;
  }
  if (v18[0])
  {
    (*(void (**)(void))(*(_QWORD *)v18[0] + 8))();
    goto LABEL_20;
  }
LABEL_18:
  if (v19)
    --*v19;
LABEL_20:
  v13 = (_QWORD *)a1[2];
  v14 = (uint64_t *)a1[3];
  v15 = 126 - 2 * __clz(0x6DB6DB6DB6DB6DB7 * (v14 - v13));
  if (v14 == v13)
    v16 = 0;
  else
    v16 = v15;
  return std::__introsort<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>> &,fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>*,false>(v13, v14, (uint64_t)v18, v16, 1);
}

void sub_1ADC253E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  else
    fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::OrderedExpand<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>((uint64_t)&a10);
  _Unwind_Resume(a1);
}

_QWORD *std::__introsort<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>> &,fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>*,false>(_QWORD *result, uint64_t *a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  int v19;
  int v20;
  unint64_t v21;
  char v22;
  char v23;
  uint64_t *v24;
  uint64_t v25;
  _QWORD *v26;
  int v27;
  int v28;
  int v29;
  uint64_t v30;
  uint64_t v31[3];
  int v32;
  int v33;
  uint64_t v34;
  int v35;
  _QWORD v36[3];
  int v37;
  int v38;
  uint64_t v39;
  int v40;
  uint64_t v41[3];
  int v42;
  int v43;
  uint64_t v44;
  int v45;
  _QWORD v46[3];
  int v47;
  int v48;

  v8 = (uint64_t)result;
LABEL_2:
  v9 = v8;
LABEL_3:
  v10 = 1 - a4;
  while (2)
  {
    v8 = v9;
    v11 = v10;
    v12 = (uint64_t)a2 - v9;
    v13 = 0x6DB6DB6DB6DB6DB7 * (((uint64_t)a2 - v9) >> 3);
    switch(v13)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        v25 = *(a2 - 7);
        v24 = a2 - 7;
        v44 = v25;
        v45 = *((_DWORD *)v24 + 2);
        std::list<int>::list(v46, (uint64_t)(v24 + 2));
        v47 = *((_DWORD *)v24 + 10);
        v48 = *((_DWORD *)v24 + 12);
        v39 = *(_QWORD *)v9;
        v40 = *(_DWORD *)(v9 + 8);
        v26 = std::list<int>::list(v41, v9 + 16);
        v27 = *(_DWORD *)(v9 + 48);
        v42 = *(_DWORD *)(v9 + 40);
        v43 = v27;
        v28 = v44;
        v29 = v39;
        std::__list_imp<char *>::clear(v26);
        result = std::__list_imp<char *>::clear(v46);
        if (v28 < v29)
          return std::swap[abi:ne180100]<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>((uint64_t *)v9, v24);
        return result;
      case 3uLL:
        return (_QWORD *)std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>> &,fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>*>(v9, v9 + 56, (uint64_t)(a2 - 7));
      case 4uLL:
        return std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>> &,fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>*>(v9, v9 + 56, v9 + 112, (uint64_t)(a2 - 7));
      case 5uLL:
        return std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>> &,fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>*>(v9, v9 + 56, v9 + 112, v9 + 168, (uint64_t)(a2 - 7));
      default:
        if (v12 <= 1343)
        {
          if ((a5 & 1) != 0)
            return std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>> &,fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>*>((_QWORD *)v9, a2);
          else
            return std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>> &,fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>*>((_QWORD *)v9, a2);
        }
        if (v11 != 1)
        {
          v14 = v13 >> 1;
          v15 = (uint64_t *)(v9 + 56 * (v13 >> 1));
          if ((unint64_t)v12 < 0x1C01)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>> &,fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>*>((uint64_t)v15, v8, (uint64_t)(a2 - 7));
            if ((a5 & 1) != 0)
              goto LABEL_12;
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>> &,fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>*>(v8, (uint64_t)v15, (uint64_t)(a2 - 7));
            v16 = 56 * v14;
            v17 = 56 * v14 + v8 - 56;
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>> &,fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>*>(v8 + 56, v17, (uint64_t)(a2 - 14));
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>> &,fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>*>(v8 + 112, v8 + 56 + v16, (uint64_t)(a2 - 21));
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>> &,fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>*>(v17, (uint64_t)v15, v8 + 56 + v16);
            std::swap[abi:ne180100]<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>((uint64_t *)v8, v15);
            if ((a5 & 1) != 0)
              goto LABEL_12;
          }
          v34 = *(_QWORD *)(v8 - 56);
          v35 = *(_DWORD *)(v8 - 48);
          std::list<int>::list(v36, v8 - 40);
          v37 = *(_DWORD *)(v8 - 16);
          v38 = *(_DWORD *)(v8 - 8);
          v30 = *(_QWORD *)v8;
          v18 = std::list<int>::list(v31, v8 + 16);
          v19 = *(_DWORD *)(v8 + 48);
          v32 = *(_DWORD *)(v8 + 40);
          v33 = v19;
          v20 = v34;
          std::__list_imp<char *>::clear(v18);
          std::__list_imp<char *>::clear(v36);
          if (v20 >= (int)v30)
          {
            result = (_QWORD *)std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>> *,fst::ILabelCompare<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>> &>((uint64_t *)v8, a2);
            v9 = (uint64_t)result;
            goto LABEL_17;
          }
LABEL_12:
          v21 = std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>> *,fst::ILabelCompare<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>> &>((uint64_t *)v8, (unint64_t)a2);
          if ((v22 & 1) == 0)
            goto LABEL_15;
          v23 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>> &,fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>*>(v8, v21);
          v9 = v21 + 56;
          result = (_QWORD *)std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>> &,fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>*>(v21 + 56, (uint64_t)a2);
          if (!(_DWORD)result)
          {
            v10 = v11 + 1;
            if ((v23 & 1) != 0)
              continue;
LABEL_15:
            result = (_QWORD *)std::__introsort<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>> &,fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>*,false>(v8, v21, a3, -v11, a5 & 1);
            v9 = v21 + 56;
LABEL_17:
            a5 = 0;
            a4 = -v11;
            goto LABEL_3;
          }
          a4 = -v11;
          a2 = (uint64_t *)v21;
          if ((v23 & 1) != 0)
            return result;
          goto LABEL_2;
        }
        if ((uint64_t *)v9 != a2)
          return (_QWORD *)std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>> &,fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>*,fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>*>((uint64_t *)v9, (uint64_t)a2, (uint64_t)a2, a3);
        return result;
    }
  }
}

void sub_1ADC257D0(_Unwind_Exception *a1)
{
  _QWORD *v1;

  std::__list_imp<char *>::clear(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>> &,fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>*>(_QWORD *result, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  int v8;
  _QWORD *v9;
  int v10;
  int v11;
  int v12;
  int v13;
  uint64_t v14;
  char *v15;
  int v16;
  int v17;
  uint64_t v18;
  int v19;
  _QWORD *v20;
  uint64_t v22;
  _QWORD v23[3];
  int v24;
  int v25;
  uint64_t v26;
  int v27;
  _QWORD v28[3];
  int v29;
  int v30;
  uint64_t v31;
  int v32;
  _QWORD v33[3];
  int v34;
  int v35;
  uint64_t v36;
  int v37;
  uint64_t v38[3];
  int v39;
  int v40;
  uint64_t v41;
  int v42;
  _QWORD v43[3];
  int v44;
  int v45;

  if (result != a2)
  {
    v2 = result;
    v3 = result + 7;
    if (result + 7 != a2)
    {
      v4 = 0;
      v20 = result + 2;
      v5 = result;
      do
      {
        v6 = v4;
        v7 = v3;
        v41 = v5[7];
        v42 = *((_DWORD *)v5 + 16);
        std::list<int>::list(v43, (uint64_t)(v5 + 9));
        v8 = *((_DWORD *)v5 + 26);
        v44 = *((_DWORD *)v5 + 24);
        v45 = v8;
        v36 = *v5;
        v37 = *((_DWORD *)v5 + 2);
        v9 = std::list<int>::list(v38, (uint64_t)(v5 + 2));
        v10 = *((_DWORD *)v5 + 12);
        v39 = *((_DWORD *)v5 + 10);
        v40 = v10;
        v11 = v41;
        v12 = v36;
        std::__list_imp<char *>::clear(v9);
        result = std::__list_imp<char *>::clear(v43);
        if (v11 < v12)
        {
          v31 = *v7;
          v32 = *((_DWORD *)v5 + 16);
          std::list<int>::list(v33, (uint64_t)(v5 + 9));
          v13 = *((_DWORD *)v5 + 26);
          v34 = *((_DWORD *)v5 + 24);
          v35 = v13;
          v14 = v6;
          while (1)
          {
            v15 = (char *)v2 + v14;
            *((_QWORD *)v15 + 7) = *(_QWORD *)((char *)v2 + v14);
            *((_DWORD *)v15 + 16) = *(_DWORD *)((char *)v2 + v14 + 8);
            std::list<int>::__assign_with_sentinel[abi:ne180100]<std::__list_const_iterator<int,void *>,std::__list_const_iterator<int,void *>>((_QWORD *)((char *)v2 + v14 + 72), *(_QWORD *)((char *)v2 + v14 + 24), (uint64_t)v20 + v14);
            *((_DWORD *)v15 + 24) = *((_DWORD *)v15 + 10);
            *((_DWORD *)v15 + 26) = *((_DWORD *)v15 + 12);
            if (!v14)
              break;
            v26 = v31;
            v27 = v32;
            std::list<int>::list(v28, (uint64_t)v33);
            v29 = v34;
            v30 = v35;
            v22 = *(_QWORD *)((char *)v2 + v14 - 56);
            std::list<int>::list(v23, (uint64_t)v2 + v14 - 40);
            v16 = *(_DWORD *)((char *)v2 + v14 - 8);
            v24 = *(_DWORD *)((char *)v2 + v14 - 16);
            v25 = v16;
            v17 = v26;
            std::__list_imp<char *>::clear(v23);
            std::__list_imp<char *>::clear(v28);
            v14 -= 56;
            if (v17 >= (int)v22)
            {
              v18 = (uint64_t)v2 + v14 + 56;
              goto LABEL_10;
            }
          }
          v18 = (uint64_t)v2;
LABEL_10:
          *(_QWORD *)v18 = v31;
          *(_DWORD *)(v18 + 8) = v32;
          if ((uint64_t *)v18 != &v31)
            std::list<int>::__assign_with_sentinel[abi:ne180100]<std::__list_const_iterator<int,void *>,std::__list_const_iterator<int,void *>>((uint64_t *)(v18 + 16), v33[1], (uint64_t)v33);
          v19 = v35;
          *(_DWORD *)(v18 + 40) = v34;
          *(_DWORD *)(v18 + 48) = v19;
          result = std::__list_imp<char *>::clear(v33);
        }
        v3 = v7 + 7;
        v4 = v6 + 56;
        v5 = v7;
      }
      while (v7 + 7 != a2);
    }
  }
  return result;
}

void sub_1ADC25A6C(_Unwind_Exception *a1)
{
  _QWORD *v1;

  std::__list_imp<char *>::clear(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>> &,fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>*>(_QWORD *result, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  int v6;
  _QWORD *v7;
  int v8;
  int v9;
  int v10;
  uint64_t v11;
  char *v12;
  int v13;
  uint64_t *v14;
  int v15;
  int v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD v20[3];
  int v21;
  int v22;
  uint64_t v23;
  int v24;
  _QWORD v25[3];
  int v26;
  int v27;
  uint64_t v28;
  int v29;
  _QWORD v30[3];
  int v31;
  int v32;
  uint64_t v33;
  int v34;
  uint64_t v35[3];
  int v36;
  int v37;
  uint64_t v38;
  int v39;
  _QWORD v40[3];
  int v41;
  int v42;

  if (result != a2)
  {
    v2 = result;
    v3 = result + 7;
    if (result + 7 != a2)
    {
      v18 = 0;
      v4 = result;
      do
      {
        v5 = v3;
        v38 = v4[7];
        v39 = *((_DWORD *)v4 + 16);
        std::list<int>::list(v40, (uint64_t)(v4 + 9));
        v6 = *((_DWORD *)v4 + 26);
        v41 = *((_DWORD *)v4 + 24);
        v42 = v6;
        v33 = *v4;
        v34 = *((_DWORD *)v4 + 2);
        v7 = std::list<int>::list(v35, (uint64_t)(v4 + 2));
        v8 = *((_DWORD *)v4 + 12);
        v36 = *((_DWORD *)v4 + 10);
        v37 = v8;
        v17 = v38;
        v9 = v33;
        std::__list_imp<char *>::clear(v7);
        result = std::__list_imp<char *>::clear(v40);
        if (v17 < v9)
        {
          v28 = *v5;
          v29 = *((_DWORD *)v4 + 16);
          std::list<int>::list(v30, (uint64_t)(v4 + 9));
          v10 = *((_DWORD *)v4 + 26);
          v31 = *((_DWORD *)v4 + 24);
          v32 = v10;
          v11 = v18;
          do
          {
            v12 = (char *)v2 + v11;
            *((_QWORD *)v12 + 7) = *(_QWORD *)((char *)v2 + v11);
            *((_DWORD *)v12 + 16) = *(_DWORD *)((char *)v2 + v11 + 8);
            std::list<int>::__assign_with_sentinel[abi:ne180100]<std::__list_const_iterator<int,void *>,std::__list_const_iterator<int,void *>>((_QWORD *)((char *)v2 + v11 + 72), *(_QWORD *)((char *)v2 + v11 + 24), (uint64_t)v2 + v11 + 16);
            *((_DWORD *)v12 + 24) = *((_DWORD *)v12 + 10);
            *((_DWORD *)v12 + 26) = *((_DWORD *)v12 + 12);
            v23 = v28;
            v24 = v29;
            std::list<int>::list(v25, (uint64_t)v30);
            v26 = v31;
            v27 = v32;
            v19 = *(_QWORD *)((char *)v2 + v11 - 56);
            std::list<int>::list(v20, (uint64_t)v2 + v11 - 40);
            v13 = *(_DWORD *)((char *)v2 + v11 - 8);
            v21 = *(_DWORD *)((char *)v2 + v11 - 16);
            v22 = v13;
            LODWORD(v12) = v23;
            std::__list_imp<char *>::clear(v20);
            std::__list_imp<char *>::clear(v25);
            v11 -= 56;
          }
          while ((int)v12 < (int)v19);
          v14 = (_QWORD *)((char *)v2 + v11);
          *(_QWORD *)((char *)v2 + v11 + 56) = v28;
          *(_DWORD *)((char *)v2 + v11 + 64) = v29;
          if ((_QWORD *)((char *)v2 + v11 + 56) != &v28)
            std::list<int>::__assign_with_sentinel[abi:ne180100]<std::__list_const_iterator<int,void *>,std::__list_const_iterator<int,void *>>(v14 + 9, v30[1], (uint64_t)v30);
          v15 = v32;
          *((_DWORD *)v14 + 24) = v31;
          *((_DWORD *)v14 + 26) = v15;
          result = std::__list_imp<char *>::clear(v30);
        }
        v3 = v5 + 7;
        v18 += 56;
        v4 = v5;
      }
      while (v5 + 7 != a2);
    }
  }
  return result;
}

void sub_1ADC25D10(_Unwind_Exception *a1)
{
  _QWORD *v1;

  std::__list_imp<char *>::clear(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>> &,fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>*>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  int v7;
  _QWORD *v8;
  int v9;
  int v10;
  int v11;
  _QWORD *v12;
  int v13;
  int v14;
  int v15;
  _QWORD *v16;
  int v17;
  int v18;
  int v19;
  _QWORD *v20;
  int v21;
  int v22;
  uint64_t *v23;
  uint64_t *v24;
  int v25;
  _QWORD *v26;
  int v27;
  int v28;
  uint64_t v30;
  _QWORD v31[3];
  int v32;
  int v33;
  uint64_t v34;
  int v35;
  _QWORD v36[3];
  int v37;
  int v38;
  uint64_t v39;
  int v40;
  _QWORD v41[3];
  int v42;
  int v43;
  uint64_t v44;
  int v45;
  _QWORD v46[3];
  int v47;
  int v48;
  uint64_t v49;
  int v50;
  _QWORD v51[3];
  int v52;
  int v53;
  uint64_t v54;
  int v55;
  _QWORD v56[3];
  int v57;
  int v58;
  uint64_t v59;
  int v60;
  _QWORD v61[3];
  int v62;
  int v63;
  uint64_t v64;
  int v65;
  _QWORD v66[3];
  int v67;
  int v68;
  uint64_t v69;
  int v70;
  _QWORD v71[3];
  int v72;
  int v73;
  uint64_t v74;
  int v75;
  _QWORD v76[3];
  int v77;
  int v78;

  v74 = *(_QWORD *)a2;
  v75 = *(_DWORD *)(a2 + 8);
  v6 = a2 + 16;
  std::list<int>::list(v76, a2 + 16);
  v7 = *(_DWORD *)(a2 + 48);
  v77 = *(_DWORD *)(a2 + 40);
  v78 = v7;
  v69 = *(_QWORD *)a1;
  v70 = *(_DWORD *)(a1 + 8);
  v8 = std::list<int>::list(v71, a1 + 16);
  v9 = *(_DWORD *)(a1 + 48);
  v72 = *(_DWORD *)(a1 + 40);
  v73 = v9;
  v10 = v74;
  std::__list_imp<char *>::clear(v8);
  std::__list_imp<char *>::clear(v76);
  if (v10 < (int)v69)
  {
    v44 = *(_QWORD *)a3;
    v45 = *(_DWORD *)(a3 + 8);
    std::list<int>::list(v46, a3 + 16);
    v11 = *(_DWORD *)(a3 + 48);
    v47 = *(_DWORD *)(a3 + 40);
    v48 = v11;
    v39 = *(_QWORD *)a2;
    v40 = *(_DWORD *)(a2 + 8);
    v12 = std::list<int>::list(v41, v6);
    v13 = *(_DWORD *)(a2 + 48);
    v42 = *(_DWORD *)(a2 + 40);
    v43 = v13;
    v14 = v44;
    std::__list_imp<char *>::clear(v12);
    std::__list_imp<char *>::clear(v46);
    if (v14 < (int)v39)
    {
      std::swap[abi:ne180100]<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>((uint64_t *)a1, (uint64_t *)a3);
      return 1;
    }
    std::swap[abi:ne180100]<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>((uint64_t *)a1, (uint64_t *)a2);
    v34 = *(_QWORD *)a3;
    v35 = *(_DWORD *)(a3 + 8);
    std::list<int>::list(v36, a3 + 16);
    v25 = *(_DWORD *)(a3 + 48);
    v37 = *(_DWORD *)(a3 + 40);
    v38 = v25;
    v30 = *(_QWORD *)a2;
    v26 = std::list<int>::list(v31, v6);
    v27 = *(_DWORD *)(a2 + 48);
    v32 = *(_DWORD *)(a2 + 40);
    v33 = v27;
    v28 = v34;
    std::__list_imp<char *>::clear(v26);
    std::__list_imp<char *>::clear(v36);
    if (v28 >= (int)v30)
      return 1;
    v23 = (uint64_t *)a2;
    v24 = (uint64_t *)a3;
LABEL_9:
    std::swap[abi:ne180100]<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>(v23, v24);
    return 2;
  }
  v64 = *(_QWORD *)a3;
  v65 = *(_DWORD *)(a3 + 8);
  std::list<int>::list(v66, a3 + 16);
  v15 = *(_DWORD *)(a3 + 48);
  v67 = *(_DWORD *)(a3 + 40);
  v68 = v15;
  v59 = *(_QWORD *)a2;
  v60 = *(_DWORD *)(a2 + 8);
  v16 = std::list<int>::list(v61, v6);
  v17 = *(_DWORD *)(a2 + 48);
  v62 = *(_DWORD *)(a2 + 40);
  v63 = v17;
  v18 = v64;
  std::__list_imp<char *>::clear(v16);
  std::__list_imp<char *>::clear(v66);
  if (v18 < (int)v59)
  {
    std::swap[abi:ne180100]<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>((uint64_t *)a2, (uint64_t *)a3);
    v54 = *(_QWORD *)a2;
    v55 = *(_DWORD *)(a2 + 8);
    std::list<int>::list(v56, v6);
    v19 = *(_DWORD *)(a2 + 48);
    v57 = *(_DWORD *)(a2 + 40);
    v58 = v19;
    v49 = *(_QWORD *)a1;
    v50 = *(_DWORD *)(a1 + 8);
    v20 = std::list<int>::list(v51, a1 + 16);
    v21 = *(_DWORD *)(a1 + 48);
    v52 = *(_DWORD *)(a1 + 40);
    v53 = v21;
    v22 = v54;
    std::__list_imp<char *>::clear(v20);
    std::__list_imp<char *>::clear(v56);
    if (v22 >= (int)v49)
      return 1;
    v23 = (uint64_t *)a1;
    v24 = (uint64_t *)a2;
    goto LABEL_9;
  }
  return 0;
}

void sub_1ADC26068(_Unwind_Exception *a1)
{
  _QWORD *v1;

  std::__list_imp<char *>::clear(v1);
  _Unwind_Resume(a1);
}

unint64_t std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>> *,fst::ILabelCompare<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>> &>(uint64_t *a1, uint64_t *a2)
{
  uint64_t *v3;
  int v4;
  _QWORD *v5;
  int v6;
  int v7;
  unint64_t v8;
  int v9;
  int v10;
  unint64_t v11;
  int v12;
  int v13;
  uint64_t *v14;
  int v15;
  int v16;
  unint64_t v17;
  int v18;
  int v19;
  uint64_t *v20;
  int v21;
  uint64_t *v23;
  uint64_t *v24;
  uint64_t v25;
  _QWORD v26[3];
  int v27;
  int v28;
  uint64_t v29;
  int v30;
  _QWORD v31[3];
  int v32;
  int v33;
  uint64_t v34;
  int v35;
  _QWORD v36[3];
  int v37;
  int v38;
  uint64_t v39;
  int v40;
  _QWORD v41[3];
  int v42;
  int v43;
  uint64_t v44;
  int v45;
  _QWORD v46[3];
  int v47;
  int v48;
  uint64_t v49;
  int v50;
  _QWORD v51[3];
  int v52;
  int v53;
  uint64_t v54;
  int v55;
  _QWORD v56[3];
  int v57;
  int v58;
  uint64_t v59;
  int v60;
  _QWORD v61[3];
  int v62;
  int v63;
  uint64_t v64;
  int v65;
  _QWORD v66[3];
  int v67;
  int v68;
  uint64_t v69;
  int v70;
  _QWORD v71[3];
  int v72;
  int v73;
  uint64_t v74;
  int v75;
  uint64_t v76[3];
  int v77;
  int v78;
  uint64_t v79;
  int v80;
  _QWORD v81[3];
  int v82;
  int v83;
  uint64_t v84;
  int v85;
  _QWORD v86[3];
  int v87;
  int v88;

  v3 = a1;
  v84 = *a1;
  v85 = *((_DWORD *)a1 + 2);
  v23 = a1 + 2;
  std::list<int>::list(v86, (uint64_t)(a1 + 2));
  v4 = *((_DWORD *)v3 + 12);
  v87 = *((_DWORD *)v3 + 10);
  v88 = v4;
  v79 = v84;
  v80 = v85;
  std::list<int>::list(v81, (uint64_t)v86);
  v82 = v87;
  v83 = v88;
  v74 = *(a2 - 7);
  v75 = *((_DWORD *)a2 - 12);
  v5 = std::list<int>::list(v76, (uint64_t)(a2 - 5));
  v6 = *((_DWORD *)a2 - 2);
  v77 = *((_DWORD *)a2 - 4);
  v78 = v6;
  v7 = v79;
  std::__list_imp<char *>::clear(v5);
  std::__list_imp<char *>::clear(v81);
  v24 = v3;
  if (v7 >= (int)v74)
  {
    v11 = (unint64_t)(v3 + 7);
    do
    {
      v8 = v11;
      if (v11 >= (unint64_t)a2)
        break;
      v59 = v84;
      v60 = v85;
      std::list<int>::list(v61, (uint64_t)v86);
      v62 = v87;
      v63 = v88;
      v54 = *(_QWORD *)v8;
      v55 = *(_DWORD *)(v8 + 8);
      std::list<int>::list(v56, v8 + 16);
      v12 = *(_DWORD *)(v8 + 48);
      v57 = *(_DWORD *)(v8 + 40);
      v58 = v12;
      v13 = v59;
      std::__list_imp<char *>::clear(v56);
      std::__list_imp<char *>::clear(v61);
      v11 = v8 + 56;
    }
    while (v13 >= (int)v54);
  }
  else
  {
    do
    {
      v69 = v84;
      v70 = v85;
      std::list<int>::list(v71, (uint64_t)v86);
      v72 = v87;
      v73 = v88;
      v64 = v3[7];
      v65 = *((_DWORD *)v3 + 16);
      std::list<int>::list(v66, (uint64_t)(v3 + 9));
      v8 = (unint64_t)(v3 + 7);
      v9 = *((_DWORD *)v3 + 26);
      v67 = *((_DWORD *)v3 + 24);
      v68 = v9;
      v10 = v69;
      std::__list_imp<char *>::clear(v66);
      std::__list_imp<char *>::clear(v71);
      v3 += 7;
    }
    while (v10 >= (int)v64);
  }
  if (v8 >= (unint64_t)a2)
  {
    v14 = a2;
  }
  else
  {
    do
    {
      v49 = v84;
      v50 = v85;
      std::list<int>::list(v51, (uint64_t)v86);
      v52 = v87;
      v53 = v88;
      v44 = *(a2 - 7);
      v45 = *((_DWORD *)a2 - 12);
      std::list<int>::list(v46, (uint64_t)(a2 - 5));
      v14 = a2 - 7;
      v15 = *((_DWORD *)a2 - 2);
      v47 = *((_DWORD *)a2 - 4);
      v48 = v15;
      v16 = v49;
      std::__list_imp<char *>::clear(v46);
      std::__list_imp<char *>::clear(v51);
      a2 -= 7;
    }
    while (v16 < (int)v44);
  }
  while (v8 < (unint64_t)v14)
  {
    std::swap[abi:ne180100]<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>((uint64_t *)v8, v14);
    v17 = v8;
    do
    {
      v39 = v84;
      v40 = v85;
      std::list<int>::list(v41, (uint64_t)v86);
      v42 = v87;
      v43 = v88;
      v34 = *(_QWORD *)(v17 + 56);
      v35 = *(_DWORD *)(v17 + 64);
      std::list<int>::list(v36, v17 + 72);
      v8 = v17 + 56;
      v37 = *(_DWORD *)(v17 + 96);
      v38 = *(_DWORD *)(v17 + 104);
      v18 = v39;
      v19 = v34;
      std::__list_imp<char *>::clear(v36);
      std::__list_imp<char *>::clear(v41);
      v17 += 56;
    }
    while (v18 >= v19);
    v20 = v14;
    do
    {
      v29 = v84;
      v30 = v85;
      std::list<int>::list(v31, (uint64_t)v86);
      v32 = v87;
      v33 = v88;
      v25 = *(v20 - 7);
      std::list<int>::list(v26, (uint64_t)(v20 - 5));
      v14 = v20 - 7;
      v27 = *((_DWORD *)v20 - 4);
      v28 = *((_DWORD *)v20 - 2);
      v21 = v29;
      std::__list_imp<char *>::clear(v26);
      std::__list_imp<char *>::clear(v31);
      v20 -= 7;
    }
    while (v21 < (int)v25);
  }
  if ((uint64_t *)(v8 - 56) != v24)
  {
    *v24 = *(_QWORD *)(v8 - 56);
    *((_DWORD *)v24 + 2) = *(_DWORD *)(v8 - 48);
    std::list<int>::__assign_with_sentinel[abi:ne180100]<std::__list_const_iterator<int,void *>,std::__list_const_iterator<int,void *>>(v23, *(_QWORD *)(v8 - 32), v8 - 40);
    *((_DWORD *)v24 + 10) = *(_DWORD *)(v8 - 16);
    *((_DWORD *)v24 + 12) = *(_DWORD *)(v8 - 8);
  }
  *(_QWORD *)(v8 - 56) = v84;
  *(_DWORD *)(v8 - 48) = v85;
  if ((uint64_t *)(v8 - 56) != &v84)
    std::list<int>::__assign_with_sentinel[abi:ne180100]<std::__list_const_iterator<int,void *>,std::__list_const_iterator<int,void *>>((uint64_t *)(v8 - 40), v86[1], (uint64_t)v86);
  *(_DWORD *)(v8 - 16) = v87;
  *(_DWORD *)(v8 - 8) = v88;
  std::__list_imp<char *>::clear(v86);
  return v8;
}

void sub_1ADC2652C(_Unwind_Exception *a1)
{
  _QWORD *v1;
  _QWORD *v2;

  std::__list_imp<char *>::clear(v2);
  std::__list_imp<char *>::clear(v1);
  _Unwind_Resume(a1);
}

unint64_t std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>> *,fst::ILabelCompare<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>> &>(uint64_t *a1, unint64_t a2)
{
  uint64_t *v4;
  uint64_t v5;
  int v6;
  int v7;
  int v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int v14;
  int v15;
  int v16;
  int v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  int v21;
  int v22;
  unint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t *v27;
  uint64_t *v28;
  int v29;
  _QWORD v30[3];
  int v31;
  int v32;
  uint64_t v33;
  int v34;
  _QWORD v35[3];
  int v36;
  int v37;
  uint64_t v38;
  int v39;
  _QWORD v40[3];
  int v41;
  int v42;
  uint64_t v43;
  int v44;
  _QWORD v45[3];
  int v46;
  int v47;
  uint64_t v48;
  int v49;
  _QWORD v50[3];
  int v51;
  int v52;
  uint64_t v53;
  int v54;
  _QWORD v55[3];
  int v56;
  int v57;
  uint64_t v58;
  int v59;
  _QWORD v60[3];
  int v61;
  int v62;
  uint64_t v63;
  int v64;
  _QWORD v65[3];
  int v66;
  int v67;
  uint64_t v68;
  int v69;
  _QWORD v70[3];
  int v71;
  int v72;
  uint64_t v73;
  int v74;
  _QWORD v75[3];
  int v76;
  int v77;
  uint64_t v78;
  int v79;
  _QWORD v80[3];
  int v81;
  int v82;

  v78 = *a1;
  v79 = *((_DWORD *)a1 + 2);
  v4 = a1 + 2;
  std::list<int>::list(v80, (uint64_t)(a1 + 2));
  v5 = 0;
  v6 = *((_DWORD *)a1 + 12);
  v81 = *((_DWORD *)a1 + 10);
  v82 = v6;
  do
  {
    v73 = a1[v5 + 7];
    v74 = a1[v5 + 8];
    std::list<int>::list(v75, (uint64_t)&a1[v5 + 9]);
    v7 = a1[v5 + 13];
    v76 = a1[v5 + 12];
    v77 = v7;
    v68 = v78;
    v69 = v79;
    std::list<int>::list(v70, (uint64_t)v80);
    v71 = v81;
    v72 = v82;
    v8 = v73;
    std::__list_imp<char *>::clear(v70);
    std::__list_imp<char *>::clear(v75);
    v5 += 7;
  }
  while (v8 < (int)v68);
  v9 = (unint64_t)&a1[v5];
  if (v5 == 7)
  {
    while (v9 < a2)
    {
      v63 = *(_QWORD *)(a2 - 56);
      v64 = *(_DWORD *)(a2 - 48);
      std::list<int>::list(v65, a2 - 40);
      v16 = *(_DWORD *)(a2 - 8);
      v66 = *(_DWORD *)(a2 - 16);
      v67 = v16;
      v58 = v78;
      v59 = v79;
      std::list<int>::list(v60, (uint64_t)v80);
      v61 = v81;
      v62 = v82;
      v17 = v63;
      std::__list_imp<char *>::clear(v60);
      std::__list_imp<char *>::clear(v65);
      v10 = a2 - 56;
      a2 -= 56;
      if (v17 < (int)v58)
        goto LABEL_11;
    }
    v10 = a2;
  }
  else
  {
    v10 = a2;
    do
    {
      v12 = *(_QWORD *)(v10 - 56);
      v11 = v10 - 56;
      v53 = v12;
      v54 = *(_DWORD *)(v11 + 8);
      v13 = v11;
      std::list<int>::list(v55, v11 + 16);
      v14 = *(_DWORD *)(a2 - 8);
      v56 = *(_DWORD *)(a2 - 16);
      v57 = v14;
      v48 = v78;
      v49 = v79;
      std::list<int>::list(v50, (uint64_t)v80);
      v51 = v81;
      v52 = v82;
      v15 = v53;
      std::__list_imp<char *>::clear(v50);
      std::__list_imp<char *>::clear(v55);
      v10 = v13;
      a2 = v13;
    }
    while (v15 >= (int)v48);
  }
LABEL_11:
  v27 = v4;
  v28 = a1;
  if (v9 < v10)
  {
    v18 = v10;
    do
    {
      std::swap[abi:ne180100]<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>((uint64_t *)v9, (uint64_t *)v18);
      v19 = v9;
      do
      {
        v20 = *(_QWORD *)(v9 + 56);
        v9 += 56;
        v43 = v20;
        v44 = *(_DWORD *)(v9 + 8);
        std::list<int>::list(v45, v9 + 16);
        v46 = *(_DWORD *)(v19 + 96);
        v47 = *(_DWORD *)(v19 + 104);
        v38 = v78;
        v39 = v79;
        std::list<int>::list(v40, (uint64_t)v80);
        v41 = v81;
        v42 = v82;
        v21 = v43;
        v22 = v38;
        std::__list_imp<char *>::clear(v40);
        std::__list_imp<char *>::clear(v45);
        v19 = v9;
      }
      while (v21 < v22);
      v23 = v18;
      do
      {
        v24 = *(_QWORD *)(v18 - 56);
        v18 -= 56;
        v33 = v24;
        v34 = *(_DWORD *)(v18 + 8);
        std::list<int>::list(v35, v18 + 16);
        v36 = *(_DWORD *)(v23 - 16);
        v37 = *(_DWORD *)(v23 - 8);
        v29 = v78;
        std::list<int>::list(v30, (uint64_t)v80);
        v31 = v81;
        v32 = v82;
        v25 = v33;
        std::__list_imp<char *>::clear(v30);
        std::__list_imp<char *>::clear(v35);
        v23 = v18;
      }
      while (v25 >= v29);
    }
    while (v9 < v18);
  }
  if ((uint64_t *)(v9 - 56) != v28)
  {
    *v28 = *(_QWORD *)(v9 - 56);
    *((_DWORD *)v28 + 2) = *(_DWORD *)(v9 - 48);
    std::list<int>::__assign_with_sentinel[abi:ne180100]<std::__list_const_iterator<int,void *>,std::__list_const_iterator<int,void *>>(v27, *(_QWORD *)(v9 - 32), v9 - 40);
    *((_DWORD *)v28 + 10) = *(_DWORD *)(v9 - 16);
    *((_DWORD *)v28 + 12) = *(_DWORD *)(v9 - 8);
  }
  *(_QWORD *)(v9 - 56) = v78;
  *(_DWORD *)(v9 - 48) = v79;
  if ((uint64_t *)(v9 - 56) != &v78)
    std::list<int>::__assign_with_sentinel[abi:ne180100]<std::__list_const_iterator<int,void *>,std::__list_const_iterator<int,void *>>((uint64_t *)(v9 - 40), v80[1], (uint64_t)v80);
  *(_DWORD *)(v9 - 16) = v81;
  *(_DWORD *)(v9 - 8) = v82;
  std::__list_imp<char *>::clear(v80);
  return v9 - 56;
}

void sub_1ADC269D4(_Unwind_Exception *a1)
{
  _QWORD *v1;

  std::__list_imp<char *>::clear(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>> &,fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>*>(uint64_t a1, uint64_t a2)
{
  _BOOL8 v4;
  uint64_t v5;
  int v6;
  _QWORD *v7;
  int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  int v14;
  _QWORD *v15;
  int v16;
  int v17;
  int v18;
  _QWORD *v19;
  _QWORD *v20;
  int v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  int v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  int v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD v36[3];
  int v37;
  int v38;
  uint64_t v39;
  int v40;
  _QWORD v41[3];
  int v42;
  int v43;
  uint64_t v44;
  int v45;
  _QWORD v46[3];
  int v47;
  int v48;
  uint64_t v49;
  int v50;
  _DWORD v51[10];
  uint64_t v52;
  int v53;
  _QWORD v54[3];
  int v55;
  int v56;
  uint64_t v57;
  int v58;
  _QWORD v59[3];
  int v60;
  int v61;
  uint64_t v62;
  int v63;
  _QWORD v64[3];
  int v65;
  int v66;

  v4 = 1;
  switch(0x6DB6DB6DB6DB6DB7 * ((a2 - a1) >> 3))
  {
    case 0:
    case 1:
      return v4;
    case 2:
      v5 = a2 - 56;
      v62 = *(_QWORD *)(a2 - 56);
      v63 = *(_DWORD *)(a2 - 48);
      std::list<int>::list(v64, a2 - 40);
      v6 = *(_DWORD *)(v5 + 48);
      v65 = *(_DWORD *)(v5 + 40);
      v66 = v6;
      v57 = *(_QWORD *)a1;
      v58 = *(_DWORD *)(a1 + 8);
      v7 = std::list<int>::list(v59, a1 + 16);
      v8 = *(_DWORD *)(a1 + 48);
      v60 = *(_DWORD *)(a1 + 40);
      v61 = v8;
      v9 = v62;
      std::__list_imp<char *>::clear(v7);
      std::__list_imp<char *>::clear(v64);
      if (v9 < (int)v57)
        std::swap[abi:ne180100]<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>((uint64_t *)a1, (uint64_t *)v5);
      return 1;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>> &,fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>*>(a1, a1 + 56, a2 - 56);
      return v4;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>> &,fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>*>(a1, a1 + 56, a1 + 112, a2 - 56);
      return v4;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>> &,fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>*>(a1, a1 + 56, a1 + 112, a1 + 168, a2 - 56);
      return v4;
    default:
      v10 = a1 + 112;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>> &,fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>*>(a1, a1 + 56, a1 + 112);
      v11 = a1 + 168;
      if (a1 + 168 == a2)
        return 1;
      v12 = 0;
      v33 = 0;
      v13 = v51;
      v34 = a2;
      break;
  }
  while (1)
  {
    v52 = *(_QWORD *)v11;
    v53 = *(_DWORD *)(v11 + 8);
    std::list<int>::list(v54, v11 + 16);
    v14 = *(_DWORD *)(v11 + 48);
    v55 = *(_DWORD *)(v11 + 40);
    v56 = v14;
    v49 = *(_QWORD *)v10;
    v50 = *(_DWORD *)(v10 + 8);
    v15 = std::list<int>::list(v13, v10 + 16);
    v16 = *(_DWORD *)(v10 + 48);
    v51[6] = *(_DWORD *)(v10 + 40);
    v51[8] = v16;
    v17 = v52;
    v18 = v49;
    v19 = v15;
    std::__list_imp<char *>::clear(v15);
    std::__list_imp<char *>::clear(v54);
    if (v17 < v18)
      break;
    v30 = v34;
    v22 = v12;
    v13 = v19;
LABEL_18:
    v10 = v11;
    v12 = v22 + 56;
    v11 += 56;
    if (v11 == v30)
      return 1;
  }
  v44 = *(_QWORD *)v11;
  v45 = *(_DWORD *)(v11 + 8);
  v20 = std::list<int>::list(v46, v11 + 16);
  v21 = *(_DWORD *)(v11 + 48);
  v47 = *(_DWORD *)(v11 + 40);
  v48 = v21;
  v22 = v12;
  v23 = v20;
  v24 = v22;
  v13 = v19;
  while (1)
  {
    v25 = a1 + v24;
    *(_QWORD *)(v25 + 168) = *(_QWORD *)(a1 + v24 + 112);
    *(_DWORD *)(v25 + 176) = *(_DWORD *)(a1 + v24 + 120);
    std::list<int>::__assign_with_sentinel[abi:ne180100]<std::__list_const_iterator<int,void *>,std::__list_const_iterator<int,void *>>((uint64_t *)(a1 + v24 + 184), *(_QWORD *)(a1 + v24 + 136), a1 + 128 + v24);
    *(_DWORD *)(v25 + 208) = *(_DWORD *)(v25 + 152);
    *(_DWORD *)(v25 + 216) = *(_DWORD *)(v25 + 160);
    if (v24 == -112)
      break;
    v39 = v44;
    v40 = v45;
    std::list<int>::list(v41, (uint64_t)v23);
    v42 = v47;
    v43 = v48;
    v35 = *(_QWORD *)(a1 + v24 + 56);
    std::list<int>::list(v36, a1 + v24 + 72);
    v26 = *(_DWORD *)(a1 + v24 + 104);
    v37 = *(_DWORD *)(a1 + v24 + 96);
    v38 = v26;
    v27 = v39;
    std::__list_imp<char *>::clear(v36);
    std::__list_imp<char *>::clear(v41);
    v24 -= 56;
    v28 = v27 < (int)v35;
    v13 = v19;
    if (!v28)
    {
      v29 = a1 + v24 + 168;
      goto LABEL_14;
    }
  }
  v29 = a1;
LABEL_14:
  *(_QWORD *)v29 = v44;
  *(_DWORD *)(v29 + 8) = v45;
  v30 = v34;
  if ((uint64_t *)v29 != &v44)
    std::list<int>::__assign_with_sentinel[abi:ne180100]<std::__list_const_iterator<int,void *>,std::__list_const_iterator<int,void *>>((uint64_t *)(v29 + 16), v46[1], (uint64_t)v23);
  v31 = v48;
  *(_DWORD *)(v29 + 40) = v47;
  *(_DWORD *)(v29 + 48) = v31;
  if (v33 != 7)
  {
    ++v33;
    std::__list_imp<char *>::clear(v23);
    goto LABEL_18;
  }
  v4 = v11 + 56 == v34;
  std::__list_imp<char *>::clear(v23);
  return v4;
}

void sub_1ADC26E2C(_Unwind_Exception *a1)
{
  _QWORD *v1;

  std::__list_imp<char *>::clear(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::swap[abi:ne180100]<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>(uint64_t *a1, uint64_t *a2)
{
  uint64_t *v4;
  int v5;
  int v6;
  uint64_t v8;
  int v9;
  _QWORD v10[3];
  int v11;
  int v12;

  v8 = *a1;
  v9 = *((_DWORD *)a1 + 2);
  v4 = a1 + 2;
  std::list<int>::list(v10, (uint64_t)(a1 + 2));
  v5 = *((_DWORD *)a1 + 12);
  v11 = *((_DWORD *)a1 + 10);
  v12 = v5;
  *a1 = *a2;
  *((_DWORD *)a1 + 2) = *((_DWORD *)a2 + 2);
  if (a1 != a2)
    std::list<int>::__assign_with_sentinel[abi:ne180100]<std::__list_const_iterator<int,void *>,std::__list_const_iterator<int,void *>>(v4, a2[3], (uint64_t)(a2 + 2));
  *((_DWORD *)a1 + 10) = *((_DWORD *)a2 + 10);
  *((_DWORD *)a1 + 12) = *((_DWORD *)a2 + 12);
  *a2 = v8;
  *((_DWORD *)a2 + 2) = v9;
  if (&v8 != a2)
    std::list<int>::__assign_with_sentinel[abi:ne180100]<std::__list_const_iterator<int,void *>,std::__list_const_iterator<int,void *>>(a2 + 2, v10[1], (uint64_t)v10);
  v6 = v12;
  *((_DWORD *)a2 + 10) = v11;
  *((_DWORD *)a2 + 12) = v6;
  return std::__list_imp<char *>::clear(v10);
}

void sub_1ADC26F54(_Unwind_Exception *a1)
{
  _QWORD *v1;

  std::__list_imp<char *>::clear(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>> &,fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v8;
  _QWORD *v9;
  int v10;
  int v11;
  _QWORD *result;
  int v13;
  _QWORD *v14;
  int v15;
  int v16;
  int v17;
  _QWORD *v18;
  int v19;
  int v20;
  uint64_t v21;
  _QWORD v22[3];
  int v23;
  int v24;
  uint64_t v25;
  int v26;
  _QWORD v27[3];
  int v28;
  int v29;
  uint64_t v30;
  int v31;
  _QWORD v32[3];
  int v33;
  int v34;
  uint64_t v35;
  int v36;
  _QWORD v37[3];
  int v38;
  int v39;
  uint64_t v40;
  int v41;
  _QWORD v42[3];
  int v43;
  int v44;
  uint64_t v45;
  int v46;
  _QWORD v47[3];
  int v48;
  int v49;

  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>> &,fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>*>(a1, a2, a3);
  v45 = *(_QWORD *)a4;
  v46 = *(_DWORD *)(a4 + 8);
  std::list<int>::list(v47, a4 + 16);
  v8 = *(_DWORD *)(a4 + 48);
  v48 = *(_DWORD *)(a4 + 40);
  v49 = v8;
  v40 = *(_QWORD *)a3;
  v41 = *(_DWORD *)(a3 + 8);
  v9 = std::list<int>::list(v42, a3 + 16);
  v10 = *(_DWORD *)(a3 + 48);
  v43 = *(_DWORD *)(a3 + 40);
  v44 = v10;
  v11 = v45;
  std::__list_imp<char *>::clear(v9);
  result = std::__list_imp<char *>::clear(v47);
  if (v11 < (int)v40)
  {
    std::swap[abi:ne180100]<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>((uint64_t *)a3, (uint64_t *)a4);
    v35 = *(_QWORD *)a3;
    v36 = *(_DWORD *)(a3 + 8);
    std::list<int>::list(v37, a3 + 16);
    v13 = *(_DWORD *)(a3 + 48);
    v38 = *(_DWORD *)(a3 + 40);
    v39 = v13;
    v30 = *(_QWORD *)a2;
    v31 = *(_DWORD *)(a2 + 8);
    v14 = std::list<int>::list(v32, a2 + 16);
    v15 = *(_DWORD *)(a2 + 48);
    v33 = *(_DWORD *)(a2 + 40);
    v34 = v15;
    v16 = v35;
    std::__list_imp<char *>::clear(v14);
    result = std::__list_imp<char *>::clear(v37);
    if (v16 < (int)v30)
    {
      std::swap[abi:ne180100]<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>((uint64_t *)a2, (uint64_t *)a3);
      v25 = *(_QWORD *)a2;
      v26 = *(_DWORD *)(a2 + 8);
      std::list<int>::list(v27, a2 + 16);
      v17 = *(_DWORD *)(a2 + 48);
      v28 = *(_DWORD *)(a2 + 40);
      v29 = v17;
      v21 = *(_QWORD *)a1;
      v18 = std::list<int>::list(v22, a1 + 16);
      v19 = *(_DWORD *)(a1 + 48);
      v23 = *(_DWORD *)(a1 + 40);
      v24 = v19;
      v20 = v25;
      std::__list_imp<char *>::clear(v18);
      result = std::__list_imp<char *>::clear(v27);
      if (v20 < (int)v21)
        return std::swap[abi:ne180100]<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>((uint64_t *)a1, (uint64_t *)a2);
    }
  }
  return result;
}

void sub_1ADC2716C(_Unwind_Exception *a1)
{
  _QWORD *v1;

  std::__list_imp<char *>::clear(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>> &,fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v10;
  _QWORD *v11;
  int v12;
  int v13;
  _QWORD *result;
  int v15;
  _QWORD *v16;
  int v17;
  int v18;
  int v19;
  _QWORD *v20;
  int v21;
  int v22;
  int v23;
  _QWORD *v24;
  int v25;
  int v26;
  uint64_t v27;
  _QWORD v28[3];
  int v29;
  int v30;
  uint64_t v31;
  int v32;
  _QWORD v33[3];
  int v34;
  int v35;
  uint64_t v36;
  int v37;
  _QWORD v38[3];
  int v39;
  int v40;
  uint64_t v41;
  int v42;
  _QWORD v43[3];
  int v44;
  int v45;
  uint64_t v46;
  int v47;
  _QWORD v48[3];
  int v49;
  int v50;
  uint64_t v51;
  int v52;
  _QWORD v53[3];
  int v54;
  int v55;
  uint64_t v56;
  int v57;
  _QWORD v58[3];
  int v59;
  int v60;
  uint64_t v61;
  int v62;
  _QWORD v63[3];
  int v64;
  int v65;

  std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>> &,fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>*>(a1, a2, a3, a4);
  v61 = *(_QWORD *)a5;
  v62 = *(_DWORD *)(a5 + 8);
  std::list<int>::list(v63, a5 + 16);
  v10 = *(_DWORD *)(a5 + 48);
  v64 = *(_DWORD *)(a5 + 40);
  v65 = v10;
  v56 = *(_QWORD *)a4;
  v57 = *(_DWORD *)(a4 + 8);
  v11 = std::list<int>::list(v58, a4 + 16);
  v12 = *(_DWORD *)(a4 + 48);
  v59 = *(_DWORD *)(a4 + 40);
  v60 = v12;
  v13 = v61;
  std::__list_imp<char *>::clear(v11);
  result = std::__list_imp<char *>::clear(v63);
  if (v13 < (int)v56)
  {
    std::swap[abi:ne180100]<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>((uint64_t *)a4, (uint64_t *)a5);
    v51 = *(_QWORD *)a4;
    v52 = *(_DWORD *)(a4 + 8);
    std::list<int>::list(v53, a4 + 16);
    v15 = *(_DWORD *)(a4 + 48);
    v54 = *(_DWORD *)(a4 + 40);
    v55 = v15;
    v46 = *(_QWORD *)a3;
    v47 = *(_DWORD *)(a3 + 8);
    v16 = std::list<int>::list(v48, a3 + 16);
    v17 = *(_DWORD *)(a3 + 48);
    v49 = *(_DWORD *)(a3 + 40);
    v50 = v17;
    v18 = v51;
    std::__list_imp<char *>::clear(v16);
    result = std::__list_imp<char *>::clear(v53);
    if (v18 < (int)v46)
    {
      std::swap[abi:ne180100]<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>((uint64_t *)a3, (uint64_t *)a4);
      v41 = *(_QWORD *)a3;
      v42 = *(_DWORD *)(a3 + 8);
      std::list<int>::list(v43, a3 + 16);
      v19 = *(_DWORD *)(a3 + 48);
      v44 = *(_DWORD *)(a3 + 40);
      v45 = v19;
      v36 = *(_QWORD *)a2;
      v37 = *(_DWORD *)(a2 + 8);
      v20 = std::list<int>::list(v38, a2 + 16);
      v21 = *(_DWORD *)(a2 + 48);
      v39 = *(_DWORD *)(a2 + 40);
      v40 = v21;
      v22 = v41;
      std::__list_imp<char *>::clear(v20);
      result = std::__list_imp<char *>::clear(v43);
      if (v22 < (int)v36)
      {
        std::swap[abi:ne180100]<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>((uint64_t *)a2, (uint64_t *)a3);
        v31 = *(_QWORD *)a2;
        v32 = *(_DWORD *)(a2 + 8);
        std::list<int>::list(v33, a2 + 16);
        v23 = *(_DWORD *)(a2 + 48);
        v34 = *(_DWORD *)(a2 + 40);
        v35 = v23;
        v27 = *(_QWORD *)a1;
        v24 = std::list<int>::list(v28, a1 + 16);
        v25 = *(_DWORD *)(a1 + 48);
        v29 = *(_DWORD *)(a1 + 40);
        v30 = v25;
        v26 = v31;
        std::__list_imp<char *>::clear(v24);
        result = std::__list_imp<char *>::clear(v33);
        if (v26 < (int)v27)
          return std::swap[abi:ne180100]<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>((uint64_t *)a1, (uint64_t *)a2);
      }
    }
  }
  return result;
}

void sub_1ADC27420(_Unwind_Exception *a1)
{
  _QWORD *v1;

  std::__list_imp<char *>::clear(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>> &,fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>*,fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>*>(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  int v16;
  int v17;
  unint64_t v18;
  uint64_t v21;
  _QWORD v22[3];
  int v23;
  int v24;
  uint64_t v25;
  int v26;
  _QWORD v27[3];
  int v28;
  int v29;

  if (a1 != (uint64_t *)a2)
  {
    v6 = a2;
    v8 = a2 - (_QWORD)a1;
    v9 = (a2 - (uint64_t)a1) / 56;
    if (a2 - (uint64_t)a1 >= 57)
    {
      v10 = (unint64_t)(v9 - 2) >> 1;
      v11 = v10 + 1;
      v12 = &a1[7 * v10];
      do
      {
        std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>> &,fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>*>(a1, a4, v9, v12);
        v12 -= 7;
        --v11;
      }
      while (v11);
    }
    v13 = v6;
    if (v6 != a3)
    {
      v14 = v6;
      do
      {
        v25 = *(_QWORD *)v14;
        v26 = *(_DWORD *)(v14 + 8);
        std::list<int>::list(v27, v14 + 16);
        v15 = *(_DWORD *)(v14 + 48);
        v28 = *(_DWORD *)(v14 + 40);
        v29 = v15;
        v21 = *a1;
        std::list<int>::list(v22, (uint64_t)(a1 + 2));
        v16 = *((_DWORD *)a1 + 12);
        v23 = *((_DWORD *)a1 + 10);
        v24 = v16;
        v17 = v25;
        std::__list_imp<char *>::clear(v22);
        std::__list_imp<char *>::clear(v27);
        if (v17 < (int)v21)
        {
          std::swap[abi:ne180100]<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>((uint64_t *)v14, a1);
          std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>> &,fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>*>(a1, a4, v9, a1);
        }
        v14 += 56;
      }
      while (v14 != a3);
      v13 = a3;
    }
    if (v8 >= 57)
    {
      v18 = v8 / 0x38uLL;
      do
      {
        std::__pop_heap[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>,fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>*>(a1, v6, a4, v18);
        v6 -= 56;
      }
      while (v18-- > 2);
    }
    return v13;
  }
  return a3;
}

void sub_1ADC27620(_Unwind_Exception *a1)
{
  _QWORD *v1;

  std::__list_imp<char *>::clear(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>> &,fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>*>(_QWORD *result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  unint64_t v4;
  uint64_t *v5;
  int64_t v6;
  uint64_t *v7;
  int64_t v8;
  _DWORD *v9;
  int v10;
  _QWORD *v11;
  int v12;
  int v13;
  _QWORD *v14;
  int v15;
  int v16;
  int v17;
  uint64_t *v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int64_t v28;
  _QWORD *v30;
  int v31;
  _QWORD v32[3];
  int v33;
  int v34;
  uint64_t v35;
  int v36;
  _QWORD v37[3];
  int v38;
  int v39;
  uint64_t v40;
  int v41;
  _QWORD v42[3];
  int v43;
  int v44;
  uint64_t v45;
  int v46;
  _QWORD v47[3];
  int v48;
  int v49;
  uint64_t v50;
  int v51;
  _QWORD v52[3];
  int v53;
  int v54;
  uint64_t v55;
  int v56;
  uint64_t v57[3];
  int v58;
  int v59;
  uint64_t v60;
  int v61;
  _QWORD v62[3];
  int v63;
  int v64;
  uint64_t v65;
  int v66;
  uint64_t v67[3];
  int v68;
  int v69;
  uint64_t v70;
  int v71;
  _QWORD v72[3];
  int v73;
  int v74;

  v30 = result;
  v4 = a3 - 2;
  if (a3 >= 2)
  {
    v5 = a4;
    v28 = v4 >> 1;
    if ((uint64_t)(v4 >> 1) >= 0x6DB6DB6DB6DB6DB7 * (a4 - result))
    {
      v6 = (0xDB6DB6DB6DB6DB6ELL * (a4 - result)) | 1;
      v7 = &result[7 * v6];
      v8 = 0xDB6DB6DB6DB6DB6ELL * (a4 - result) + 2;
      if (v8 < a3)
      {
        v70 = *v7;
        v9 = &result[7 * v6];
        v71 = v9[2];
        std::list<int>::list(v72, (uint64_t)(v9 + 4));
        v10 = v9[12];
        v73 = v9[10];
        v74 = v10;
        v65 = v7[7];
        v66 = *((_DWORD *)v7 + 16);
        v11 = std::list<int>::list(v67, (uint64_t)(v7 + 9));
        v12 = *((_DWORD *)v7 + 26);
        v68 = *((_DWORD *)v7 + 24);
        v69 = v12;
        LODWORD(v9) = v70;
        std::__list_imp<char *>::clear(v11);
        std::__list_imp<char *>::clear(v72);
        v7 += 7 * ((int)v9 < (int)v65);
        if ((int)v9 < (int)v65)
          v6 = v8;
      }
      v60 = *v7;
      v61 = *((_DWORD *)v7 + 2);
      std::list<int>::list(v62, (uint64_t)(v7 + 2));
      v13 = *((_DWORD *)v7 + 12);
      v63 = *((_DWORD *)v7 + 10);
      v64 = v13;
      v55 = *v5;
      v56 = *((_DWORD *)v5 + 2);
      v14 = std::list<int>::list(v57, (uint64_t)(v5 + 2));
      v15 = *((_DWORD *)v5 + 12);
      v58 = *((_DWORD *)v5 + 10);
      v59 = v15;
      v16 = v60;
      std::__list_imp<char *>::clear(v14);
      result = std::__list_imp<char *>::clear(v62);
      if (v16 >= (int)v55)
      {
        v50 = *v5;
        v51 = *((_DWORD *)v5 + 2);
        std::list<int>::list(v52, (uint64_t)(v5 + 2));
        v17 = *((_DWORD *)v5 + 12);
        v53 = *((_DWORD *)v5 + 10);
        v54 = v17;
        do
        {
          v18 = v7;
          *v5 = *v7;
          *((_DWORD *)v5 + 2) = *((_DWORD *)v7 + 2);
          if (v5 != v7)
            std::list<int>::__assign_with_sentinel[abi:ne180100]<std::__list_const_iterator<int,void *>,std::__list_const_iterator<int,void *>>(v5 + 2, v7[3], (uint64_t)(v7 + 2));
          *((_DWORD *)v5 + 10) = *((_DWORD *)v7 + 10);
          *((_DWORD *)v5 + 12) = *((_DWORD *)v7 + 12);
          if (v28 < v6)
            break;
          v19 = (2 * v6) | 1;
          v7 = &v30[7 * v19];
          v6 = 2 * v6 + 2;
          if (v6 >= a3)
          {
            v6 = v19;
          }
          else
          {
            v45 = *v7;
            v20 = &v30[7 * v19];
            v46 = *((_DWORD *)v20 + 2);
            std::list<int>::list(v47, (uint64_t)(v20 + 2));
            v21 = &v30[7 * v19];
            v22 = *((_DWORD *)v21 + 10);
            LODWORD(v21) = *((_DWORD *)v21 + 12);
            v48 = v22;
            v49 = (int)v21;
            v40 = v7[7];
            v41 = *((_DWORD *)v7 + 16);
            std::list<int>::list(v42, (uint64_t)(v7 + 9));
            v23 = *((_DWORD *)v7 + 26);
            v43 = *((_DWORD *)v7 + 24);
            v44 = v23;
            v24 = v45;
            v25 = v40;
            std::__list_imp<char *>::clear(v42);
            std::__list_imp<char *>::clear(v47);
            v7 += 7 * (v24 < v25);
            if (v24 >= v25)
              v6 = v19;
          }
          v35 = *v7;
          v36 = *((_DWORD *)v7 + 2);
          std::list<int>::list(v37, (uint64_t)(v7 + 2));
          v26 = *((_DWORD *)v7 + 12);
          v38 = *((_DWORD *)v7 + 10);
          v39 = v26;
          v31 = v50;
          std::list<int>::list(v32, (uint64_t)v52);
          v33 = v53;
          v34 = v54;
          v27 = v35;
          std::__list_imp<char *>::clear(v32);
          std::__list_imp<char *>::clear(v37);
          v5 = v18;
        }
        while (v27 >= v31);
        *v18 = v50;
        *((_DWORD *)v18 + 2) = v51;
        if (v18 != &v50)
          std::list<int>::__assign_with_sentinel[abi:ne180100]<std::__list_const_iterator<int,void *>,std::__list_const_iterator<int,void *>>(v18 + 2, v52[1], (uint64_t)v52);
        *((_DWORD *)v18 + 10) = v53;
        *((_DWORD *)v18 + 12) = v54;
        return std::__list_imp<char *>::clear(v52);
      }
    }
  }
  return result;
}

void sub_1ADC27A28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, _QWORD *a11)
{
  std::__list_imp<char *>::clear(a11);
  _Unwind_Resume(a1);
}

_QWORD *std::__pop_heap[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>,fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>*>(_QWORD *result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v7;
  int v8;
  uint64_t *v9;
  uint64_t *v10;
  int v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  int v17;

  if (a4 >= 2)
  {
    v7 = result;
    v12 = *result;
    v13 = *((_DWORD *)result + 2);
    std::list<int>::list(&v14, (uint64_t)(result + 2));
    v8 = *((_DWORD *)v7 + 12);
    v16 = *((_DWORD *)v7 + 10);
    v17 = v8;
    v9 = std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>> &,fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>*>(v7, a3, a4);
    v10 = v9;
    if (v9 == (uint64_t *)(a2 - 56))
    {
      *v9 = v12;
      *((_DWORD *)v9 + 2) = v13;
      if (v9 != &v12)
        std::list<int>::__assign_with_sentinel[abi:ne180100]<std::__list_const_iterator<int,void *>,std::__list_const_iterator<int,void *>>(v9 + 2, v15, (uint64_t)&v14);
      *((_DWORD *)v10 + 10) = v16;
      *((_DWORD *)v10 + 12) = v17;
    }
    else
    {
      *v9 = *(_QWORD *)(a2 - 56);
      *((_DWORD *)v9 + 2) = *(_DWORD *)(a2 - 48);
      std::list<int>::__assign_with_sentinel[abi:ne180100]<std::__list_const_iterator<int,void *>,std::__list_const_iterator<int,void *>>(v9 + 2, *(_QWORD *)(a2 - 32), a2 - 40);
      *((_DWORD *)v10 + 10) = *(_DWORD *)(a2 - 16);
      *((_DWORD *)v10 + 12) = *(_DWORD *)(a2 - 8);
      *(_QWORD *)(a2 - 56) = v12;
      *(_DWORD *)(a2 - 48) = v13;
      if ((uint64_t *)(a2 - 56) != &v12)
        std::list<int>::__assign_with_sentinel[abi:ne180100]<std::__list_const_iterator<int,void *>,std::__list_const_iterator<int,void *>>((uint64_t *)(a2 - 40), v15, (uint64_t)&v14);
      v11 = v17;
      *(_DWORD *)(a2 - 16) = v16;
      *(_DWORD *)(a2 - 8) = v11;
      std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>> &,fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>*>(v7, (uint64_t)(v10 + 7), a3, 0x6DB6DB6DB6DB6DB7 * (v10 + 7 - v7));
    }
    return std::__list_imp<char *>::clear(&v14);
  }
  return result;
}

void sub_1ADC27BF4(_Unwind_Exception *a1)
{
  _QWORD *v1;

  std::__list_imp<char *>::clear(v1);
  _Unwind_Resume(a1);
}

uint64_t *std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>> &,fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>*>(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v14;
  _QWORD v15[3];
  int v16;
  int v17;
  uint64_t v18;
  int v19;
  _QWORD v20[3];
  int v21;
  int v22;

  v5 = 0;
  v6 = a3 - 2;
  if (a3 < 2)
    v6 = a3 - 1;
  v7 = v6 >> 1;
  do
  {
    v8 = v5 + 1;
    v9 = &a1[7 * v5 + 7];
    v10 = 2 * v5;
    v5 = (2 * v5) | 1;
    v11 = v10 + 2;
    if (v10 + 2 < a3)
    {
      v18 = *v9;
      v12 = &a1[7 * v8];
      v19 = *((_DWORD *)v12 + 2);
      std::list<int>::list(v20, (uint64_t)(v12 + 2));
      v21 = *((_DWORD *)v12 + 10);
      v22 = *((_DWORD *)v12 + 12);
      v14 = v9[7];
      std::list<int>::list(v15, (uint64_t)(v9 + 9));
      v16 = *((_DWORD *)v9 + 24);
      v17 = *((_DWORD *)v9 + 26);
      LODWORD(v12) = v18;
      std::__list_imp<char *>::clear(v15);
      std::__list_imp<char *>::clear(v20);
      v9 += 7 * ((int)v12 < (int)v14);
      if ((int)v12 < (int)v14)
        v5 = v11;
    }
    *a1 = *v9;
    *((_DWORD *)a1 + 2) = *((_DWORD *)v9 + 2);
    if (a1 != v9)
      std::list<int>::__assign_with_sentinel[abi:ne180100]<std::__list_const_iterator<int,void *>,std::__list_const_iterator<int,void *>>(a1 + 2, v9[3], (uint64_t)(v9 + 2));
    *((_DWORD *)a1 + 10) = *((_DWORD *)v9 + 10);
    *((_DWORD *)a1 + 12) = *((_DWORD *)v9 + 12);
    a1 = v9;
  }
  while (v5 <= v7);
  return v9;
}

void sub_1ADC27D84(_Unwind_Exception *a1)
{
  _QWORD *v1;

  std::__list_imp<char *>::clear(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>> &,fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>*>(_QWORD *result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  _QWORD *v6;
  unint64_t v7;
  uint64_t *v8;
  int v9;
  uint64_t *v10;
  _QWORD *v11;
  int v12;
  int v13;
  int v14;
  uint64_t *v15;
  int v16;
  int v17;
  int v18;
  int v19;
  _QWORD v20[3];
  int v21;
  int v22;
  uint64_t v23;
  int v24;
  _QWORD v25[3];
  int v26;
  int v27;
  uint64_t v28;
  int v29;
  _QWORD v30[3];
  int v31;
  int v32;
  uint64_t v33;
  int v34;
  uint64_t v35[3];
  int v36;
  int v37;
  uint64_t v38;
  int v39;
  _QWORD v40[3];
  int v41;
  int v42;

  v4 = a4 - 2;
  if (a4 >= 2)
  {
    v6 = result;
    v7 = v4 >> 1;
    v8 = &result[7 * (v4 >> 1)];
    v38 = *v8;
    v39 = *((_DWORD *)v8 + 2);
    std::list<int>::list(v40, (uint64_t)(v8 + 2));
    v9 = *((_DWORD *)v8 + 12);
    v41 = *((_DWORD *)v8 + 10);
    v42 = v9;
    v10 = (uint64_t *)(a2 - 56);
    v33 = *(_QWORD *)(a2 - 56);
    v34 = *(_DWORD *)(a2 - 48);
    v11 = std::list<int>::list(v35, a2 - 40);
    v12 = *(_DWORD *)(a2 - 8);
    v36 = *(_DWORD *)(a2 - 16);
    v37 = v12;
    v13 = v38;
    std::__list_imp<char *>::clear(v11);
    result = std::__list_imp<char *>::clear(v40);
    if (v13 < (int)v33)
    {
      v28 = *(_QWORD *)(a2 - 56);
      v29 = *(_DWORD *)(a2 - 48);
      std::list<int>::list(v30, a2 - 40);
      v14 = *(_DWORD *)(a2 - 8);
      v31 = *(_DWORD *)(a2 - 16);
      v32 = v14;
      do
      {
        v15 = v8;
        *v10 = *v8;
        *((_DWORD *)v10 + 2) = *((_DWORD *)v8 + 2);
        if (v10 != v8)
          std::list<int>::__assign_with_sentinel[abi:ne180100]<std::__list_const_iterator<int,void *>,std::__list_const_iterator<int,void *>>(v10 + 2, v8[3], (uint64_t)(v8 + 2));
        *((_DWORD *)v10 + 10) = *((_DWORD *)v8 + 10);
        *((_DWORD *)v10 + 12) = *((_DWORD *)v8 + 12);
        if (!v7)
          break;
        v7 = (v7 - 1) >> 1;
        v8 = &v6[7 * v7];
        v23 = *v8;
        v24 = *((_DWORD *)v8 + 2);
        std::list<int>::list(v25, (uint64_t)(v8 + 2));
        v16 = *((_DWORD *)v8 + 12);
        v26 = *((_DWORD *)v8 + 10);
        v27 = v16;
        v19 = v28;
        std::list<int>::list(v20, (uint64_t)v30);
        v21 = v31;
        v22 = v32;
        v17 = v23;
        std::__list_imp<char *>::clear(v20);
        std::__list_imp<char *>::clear(v25);
        v10 = v15;
      }
      while (v17 < v19);
      *v15 = v28;
      *((_DWORD *)v15 + 2) = v29;
      if (v15 != &v28)
        std::list<int>::__assign_with_sentinel[abi:ne180100]<std::__list_const_iterator<int,void *>,std::__list_const_iterator<int,void *>>(v15 + 2, v30[1], (uint64_t)v30);
      v18 = v32;
      *((_DWORD *)v15 + 10) = v31;
      *((_DWORD *)v15 + 12) = v18;
      return std::__list_imp<char *>::clear(v30);
    }
  }
  return result;
}

void sub_1ADC27FE0(_Unwind_Exception *a1)
{
  _QWORD *v1;

  std::__list_imp<char *>::clear(v1);
  _Unwind_Resume(a1);
}

void fst::CyclicMinimizer<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,fst::LifoQueue<int>>::Split(_QWORD *a1, int a2)
{
  int *i;
  uint64_t v4;
  void **v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  uint64_t *v15;
  char *v16;
  char *v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  int v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD **v27;
  _QWORD *v28;
  char v29;
  uint64_t v30;
  _DWORD *v31;
  int *v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  void **v36;
  char *v37;
  unint64_t v38;
  uint64_t v39;
  _DWORD *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  char *v45;
  char *v46;
  char *v47;
  char *v48;
  uint64_t v49;
  void *v50;
  void *v51;

  for (i = *(int **)(a1[4] + 8 * a2); i; i = (int *)*((_QWORD *)i + 1))
  {
    v4 = *i + 1;
    if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1[32] + 64) + 8 * v4) + 64) != *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1[32] + 64) + 8 * v4)
                                                                                           + 56))
    {
      v5 = (void **)a1[33];
      v6 = operator new();
      *(_QWORD *)(v6 + 32) = 0;
      (*(void (**)(_QWORD *, uint64_t, uint64_t))(a1[31] + 136))(a1 + 31, v4, v6);
      v7 = (unint64_t)v5[2];
      v8 = (uint64_t *)v5[1];
      if ((unint64_t)v8 >= v7)
      {
        v10 = ((char *)v8 - (_BYTE *)*v5) >> 3;
        if ((unint64_t)(v10 + 1) >> 61)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v11 = v7 - (_QWORD)*v5;
        v12 = v11 >> 2;
        if (v11 >> 2 <= (unint64_t)(v10 + 1))
          v12 = v10 + 1;
        if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
          v13 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v13 = v12;
        if (v13)
          v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(v5 + 2), v13);
        else
          v14 = 0;
        v15 = (uint64_t *)&v14[8 * v10];
        *v15 = v6;
        v9 = (uint64_t)(v15 + 1);
        v17 = (char *)*v5;
        v16 = (char *)v5[1];
        if (v16 != *v5)
        {
          do
          {
            v18 = *((_QWORD *)v16 - 1);
            v16 -= 8;
            *--v15 = v18;
          }
          while (v16 != v17);
          v16 = (char *)*v5;
        }
        *v5 = v15;
        v5[1] = (void *)v9;
        v5[2] = &v14[8 * v13];
        if (v16)
          operator delete(v16);
      }
      else
      {
        *v8 = v6;
        v9 = (uint64_t)(v8 + 1);
      }
      v5[1] = (void *)v9;
      v19 = *v5;
      v51 = v5[3];
      std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,fst::CyclicMinimizer<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,fst::LifoQueue<int>>::ArcIterCompare &,std::__wrap_iter<fst::ArcIterator<fst::Fst<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>> **>>((_BOOL8)v19, v9, (uint64_t)&v51, (v9 - (uint64_t)v19) >> 3);
    }
  }
  v20 = a1[33];
  v21 = *(_QWORD **)v20;
  v22 = (_QWORD *)(v20 + 8);
  v23 = *(_QWORD *)(v20 + 8);
  if (*(_QWORD *)v20 != v23)
  {
    v24 = -1;
    while (1)
    {
      v25 = (_QWORD *)*v21;
      v51 = *(void **)(v20 + 24);
      if (v23 - (uint64_t)v21 >= 9)
      {
        v26 = (_QWORD *)*v21;
        v27 = std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,fst::CyclicMinimizer<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,fst::LifoQueue<int>>::ArcIterCompare &,std::__wrap_iter<fst::ArcIterator<fst::Fst<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>> **>>(v21, (uint64_t)&v51, (unint64_t)(v23 - (_QWORD)v21) >> 3);
        v28 = (_QWORD *)(v23 - 8);
        if ((_QWORD **)(v23 - 8) == v27)
        {
          *v27 = v26;
        }
        else
        {
          *v27 = (_QWORD *)*v28;
          *v28 = v26;
          std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,fst::CyclicMinimizer<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,fst::LifoQueue<int>>::ArcIterCompare &,std::__wrap_iter<fst::ArcIterator<fst::Fst<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>> **>>((_BOOL8)v21, (uint64_t)(v27 + 1), (uint64_t)&v51, v27 + 1 - (_QWORD **)v21);
        }
      }
      *v22 -= 8;
      if (!*v25)
        break;
      v29 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v25 + 24))(*v25);
      v30 = *v25;
      if ((v29 & 1) == 0)
      {
        if (v30)
        {
          v32 = (int *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v30 + 32))(v30);
          if (*v25)
          {
            v33 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v25 + 32))(*v25);
            goto LABEL_40;
          }
        }
        else
        {
LABEL_38:
          v32 = (int *)(v25[1] + 56 * v25[4]);
        }
        v33 = v25[1] + 56 * v25[4];
LABEL_40:
        v34 = *(int *)(v33 + 48);
        v35 = *v32;
        if (v24 != *v32)
          fst::Partition<int>::FinalizeSplit<fst::LifoQueue<int>>((uint64_t)a1, (uint64_t)(a1 + 23));
        if (*(_DWORD *)(a1[13] + 4 * *(int *)(a1[10] + 4 * (v34 - 1))) >= 2u)
          fst::Partition<int>::SplitOn(a1, v34 - 1);
        if (*v25)
        {
          (*(void (**)(_QWORD))(*(_QWORD *)*v25 + 40))(*v25);
          if (*v25)
          {
            if (((*(uint64_t (**)(_QWORD))(*(_QWORD *)*v25 + 24))(*v25) & 1) != 0)
            {
              if (*v25)
              {
                (*(void (**)(_QWORD))(*(_QWORD *)*v25 + 8))(*v25);
                goto LABEL_55;
              }
LABEL_53:
              v40 = (_DWORD *)v25[3];
              if (v40)
                --*v40;
LABEL_55:
              MEMORY[0x1AF44D190](v25, 0x1070C401ACC3EEFLL);
LABEL_71:
              v24 = v35;
              goto LABEL_72;
            }
LABEL_51:
            v36 = (void **)a1[33];
            v37 = (char *)v36[1];
            v38 = (unint64_t)v36[2];
            if ((unint64_t)v37 >= v38)
            {
              v41 = (v37 - (_BYTE *)*v36) >> 3;
              if ((unint64_t)(v41 + 1) >> 61)
                std::vector<int>::__throw_length_error[abi:ne180100]();
              v42 = v38 - (_QWORD)*v36;
              v43 = v42 >> 2;
              if (v42 >> 2 <= (unint64_t)(v41 + 1))
                v43 = v41 + 1;
              if ((unint64_t)v42 >= 0x7FFFFFFFFFFFFFF8)
                v44 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v44 = v43;
              if (v44)
                v45 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(v36 + 2), v44);
              else
                v45 = 0;
              v46 = &v45[8 * v41];
              *(_QWORD *)v46 = v25;
              v39 = (uint64_t)(v46 + 8);
              v48 = (char *)*v36;
              v47 = (char *)v36[1];
              if (v47 != *v36)
              {
                do
                {
                  v49 = *((_QWORD *)v47 - 1);
                  v47 -= 8;
                  *((_QWORD *)v46 - 1) = v49;
                  v46 -= 8;
                }
                while (v47 != v48);
                v47 = (char *)*v36;
              }
              *v36 = v46;
              v36[1] = (void *)v39;
              v36[2] = &v45[8 * v44];
              if (v47)
                operator delete(v47);
            }
            else
            {
              *(_QWORD *)v37 = v25;
              v39 = (uint64_t)(v37 + 8);
            }
            v36[1] = (void *)v39;
            v50 = *v36;
            v51 = v36[3];
            std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,fst::CyclicMinimizer<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,fst::LifoQueue<int>>::ArcIterCompare &,std::__wrap_iter<fst::ArcIterator<fst::Fst<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>> **>>((_BOOL8)v50, v39, (uint64_t)&v51, (v39 - (uint64_t)v50) >> 3);
            goto LABEL_71;
          }
        }
        else
        {
          ++v25[4];
        }
        if (v25[4] >= v25[2])
          goto LABEL_53;
        goto LABEL_51;
      }
      if (!v30)
        goto LABEL_32;
      (*(void (**)(uint64_t))(*(_QWORD *)v30 + 8))(v30);
LABEL_34:
      MEMORY[0x1AF44D190](v25, 0x1070C401ACC3EEFLL);
LABEL_72:
      v20 = a1[33];
      v21 = *(_QWORD **)v20;
      v22 = (_QWORD *)(v20 + 8);
      v23 = *(_QWORD *)(v20 + 8);
      if (*(_QWORD *)v20 == v23)
        goto LABEL_73;
    }
    if (v25[4] < v25[2])
      goto LABEL_38;
LABEL_32:
    v31 = (_DWORD *)v25[3];
    if (v31)
      --*v31;
    goto LABEL_34;
  }
LABEL_73:
  fst::Partition<int>::FinalizeSplit<fst::LifoQueue<int>>((uint64_t)a1, (uint64_t)(a1 + 23));
}

void sub_1ADC284C0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x1070C401ACC3EEFLL);
  _Unwind_Resume(a1);
}

BOOL std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,fst::CyclicMinimizer<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,fst::LifoQueue<int>>::ArcIterCompare &,std::__wrap_iter<fst::ArcIterator<fst::Fst<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>> **>>(_BOOL8 result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  _BOOL8 v6;
  unint64_t v7;
  _QWORD **v8;
  _QWORD **v9;
  _QWORD *v10;
  _QWORD *v11;

  v4 = a4 - 2;
  if (a4 >= 2)
  {
    v6 = result;
    v7 = v4 >> 1;
    v8 = (_QWORD **)(result + 8 * (v4 >> 1));
    v9 = (_QWORD **)(a2 - 8);
    result = fst::CyclicMinimizer<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,fst::LifoQueue<int>>::ArcIterCompare::operator()(a3, *v8, *(_QWORD **)(a2 - 8));
    if (result)
    {
      v10 = *v9;
      do
      {
        v11 = v8;
        *v9 = *v8;
        if (!v7)
          break;
        v7 = (v7 - 1) >> 1;
        v8 = (_QWORD **)(v6 + 8 * v7);
        result = fst::CyclicMinimizer<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,fst::LifoQueue<int>>::ArcIterCompare::operator()(a3, *v8, v10);
        v9 = (_QWORD **)v11;
      }
      while (result);
      *v11 = v10;
    }
  }
  return result;
}

BOOL fst::CyclicMinimizer<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,fst::LifoQueue<int>>::ArcIterCompare::operator()(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  _DWORD *v4;
  _DWORD *v5;

  if (*a2)
    v4 = (_DWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)*a2 + 32))(*a2);
  else
    v4 = (_DWORD *)(a2[1] + 56 * a2[4]);
  if (*a3)
    v5 = (_DWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)*a3 + 32))(*a3);
  else
    v5 = (_DWORD *)(a3[1] + 56 * a3[4]);
  return *v4 > *v5;
}

_QWORD **std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,fst::CyclicMinimizer<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,fst::LifoQueue<int>>::ArcIterCompare &,std::__wrap_iter<fst::ArcIterator<fst::Fst<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>> **>>(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD **v9;
  uint64_t v10;
  uint64_t v11;

  v6 = 0;
  v7 = a3 - 2;
  if (a3 < 2)
    v7 = a3 - 1;
  v8 = v7 >> 1;
  do
  {
    v9 = (_QWORD **)&a1[v6 + 1];
    v10 = (2 * v6) | 1;
    v11 = 2 * v6 + 2;
    if (v11 < a3
      && fst::CyclicMinimizer<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,fst::LifoQueue<int>>::ArcIterCompare::operator()(a2, *v9, (_QWORD *)a1[v6 + 2]))
    {
      ++v9;
      v10 = v11;
    }
    *a1 = *v9;
    a1 = v9;
    v6 = v10;
  }
  while (v10 <= v8);
  return v9;
}

_QWORD *fst::CyclicMinimizer<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,fst::LifoQueue<int>>::~CyclicMinimizer(_QWORD *a1)
{
  uint64_t v2;
  void *v3;
  _DWORD *v4;
  int v5;

  v2 = a1[33];
  if (v2)
  {
    v3 = *(void **)v2;
    if (*(_QWORD *)v2)
    {
      *(_QWORD *)(v2 + 8) = v3;
      operator delete(v3);
    }
    MEMORY[0x1AF44D190](v2, 0xE0C40DD5D8FE3);
  }
  a1[31] = &unk_1E5D25300;
  v4 = (_DWORD *)a1[32];
  if (v4)
  {
    v5 = v4[14] - 1;
    v4[14] = v5;
    if (!v5)
      (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 8))(v4);
  }
  std::deque<int>::~deque[abi:ne180100](a1 + 25);
  return fst::Partition<int>::~Partition(a1);
}

uint64_t fst::StateMap<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,fst::ArcUniqueMapper<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>(uint64_t a1, uint64_t *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t i;
  uint64_t v9;
  uint64_t v10;
  _QWORD v11[4];

  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  if ((_DWORD)result != -1)
  {
    v5 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 64))(a1, 0x3FFFFFFF0007, 0);
    v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)*a2 + 24))(*a2);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 176))(a1, v6);
    if ((*(int (**)(uint64_t))(*(_QWORD *)a1 + 160))(a1) >= 1)
    {
      v7 = 0;
      do
      {
        fst::ArcUniqueMapper<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>::SetState(a2, v7);
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 240))(a1, v7);
        for (i = a2[5]; ; a2[5] = i)
        {
          v9 = a2[2];
          if (i >= 0x6DB6DB6DB6DB6DB7 * ((a2[3] - v9) >> 3))
            break;
          (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)a1 + 208))(a1, v7, v9 + 56 * i);
          i = a2[5] + 1;
        }
        (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)*a2 + 32))(&v10, *a2, v7);
        (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(_QWORD *)a1 + 184))(a1, v7, &v10);
        std::__list_imp<char *>::clear(v11);
        v7 = (v7 + 1);
      }
      while ((int)v7 < (*(int (**)(uint64_t))(*(_QWORD *)a1 + 160))(a1));
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 192))(a1, v5 & 0xA6A0A950007, 0x3FFFFFFF0007);
  }
  return result;
}

void sub_1ADC288E8(_Unwind_Exception *a1)
{
  _QWORD *v1;

  std::__list_imp<char *>::clear(v1);
  _Unwind_Resume(a1);
}

uint64_t *fst::ArcUniqueMapper<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>::SetState(uint64_t *a1, uint64_t a2)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD v19[3];
  _DWORD *v20;
  unint64_t v21;

  v4 = a1 + 2;
  v5 = a1[2];
  a1[5] = 0;
  v6 = a1[3];
  if (v6 != v5)
  {
    do
    {
      v7 = v6 - 56;
      std::__list_imp<char *>::clear((_QWORD *)(v6 - 40));
      v6 = v7;
    }
    while (v7 != v5);
  }
  a1[3] = v5;
  v8 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)*a1 + 40))(*a1, a2);
  std::vector<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>::reserve(v4, v8);
  v9 = *a1;
  v21 = 0;
  (*(void (**)(uint64_t, uint64_t, _QWORD *))(*(_QWORD *)v9 + 136))(v9, a2, v19);
  while (1)
  {
    if (!v19[0])
    {
      if (v21 >= v19[2])
        goto LABEL_18;
      goto LABEL_9;
    }
    if ((*(unsigned int (**)(_QWORD))(*(_QWORD *)v19[0] + 24))(v19[0]))
      break;
    if (v19[0])
    {
      v10 = (*(uint64_t (**)(void))(*(_QWORD *)v19[0] + 32))();
      goto LABEL_10;
    }
LABEL_9:
    v10 = v19[1] + 56 * v21;
LABEL_10:
    v11 = a1[3];
    if (v11 >= a1[4])
    {
      v12 = std::vector<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>::__push_back_slow_path<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0> const&>(v4, v10);
    }
    else
    {
      std::vector<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>::__construct_one_at_end[abi:ne180100]<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0> const&>((uint64_t)v4, v10);
      v12 = v11 + 56;
    }
    a1[3] = v12;
    if (v19[0])
      (*(void (**)(_QWORD))(*(_QWORD *)v19[0] + 40))(v19[0]);
    else
      ++v21;
  }
  if (v19[0])
  {
    (*(void (**)(void))(*(_QWORD *)v19[0] + 8))();
    goto LABEL_20;
  }
LABEL_18:
  if (v20)
    --*v20;
LABEL_20:
  v13 = (_QWORD *)a1[2];
  v14 = (_QWORD *)a1[3];
  v15 = 126 - 2 * __clz(0x6DB6DB6DB6DB6DB7 * (v14 - v13));
  if (v14 == v13)
    v16 = 0;
  else
    v16 = v15;
  std::__introsort<std::_ClassicAlgPolicy,fst::ArcUniqueMapper<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>::Compare &,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>*,false>(v13, v14, (uint64_t)v19, v16, 1);
  v17 = std::__unique[abi:ne180100]<std::_ClassicAlgPolicy,std::__wrap_iter<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0> *>,std::__wrap_iter<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0> *>,fst::ArcUniqueMapper<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>::Equal &>(a1[2], a1[3], (uint64_t)v19);
  return std::vector<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>::resize(v4, 0x6DB6DB6DB6DB6DB7 * ((v17 - a1[2]) >> 3));
}

void sub_1ADC28AD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  else
    fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::OrderedExpand<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>((uint64_t)&a10);
  _Unwind_Resume(a1);
}

uint64_t *std::vector<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>::resize(uint64_t *result, unint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;
  unint64_t v4;
  BOOL v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2 = result;
  v3 = result[1];
  v4 = 0x6DB6DB6DB6DB6DB7 * ((v3 - *result) >> 3);
  v5 = a2 >= v4;
  v6 = a2 - v4;
  if (v6 != 0 && v5)
    return (uint64_t *)std::vector<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>::__append(result, v6);
  if (!v5)
  {
    v7 = *result + 56 * a2;
    if (v3 != v7)
    {
      do
      {
        v8 = v3 - 56;
        result = std::__list_imp<char *>::clear((_QWORD *)(v3 - 40));
        v3 = v8;
      }
      while (v8 != v7);
    }
    v2[1] = v7;
  }
  return result;
}

_QWORD *std::__introsort<std::_ClassicAlgPolicy,fst::ArcUniqueMapper<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>::Compare &,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>*,false>(_QWORD *result, _QWORD *a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t *v19;
  int v20;
  int v21;
  int v22;
  _DWORD *v23;
  char v24;
  char v25;
  int v26;
  int v27;
  int v28;

  v8 = (uint64_t)result;
LABEL_2:
  v9 = v8;
LABEL_3:
  v10 = 1 - a4;
  while (2)
  {
    v8 = v9;
    v11 = v10;
    v12 = (uint64_t)a2 - v9;
    v13 = 0x6DB6DB6DB6DB6DB7 * (((uint64_t)a2 - v9) >> 3);
    switch(v13)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        v26 = *((_DWORD *)a2 - 14);
        if (v26 < *(_DWORD *)v9)
          return std::swap[abi:ne180100]<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>((uint64_t *)v9, a2 - 7);
        if (v26 <= *(_DWORD *)v9)
        {
          v27 = *((_DWORD *)a2 - 13);
          v28 = *(_DWORD *)(v9 + 4);
          if (v27 < v28 || v27 <= v28 && *((_DWORD *)a2 - 2) < *(_DWORD *)(v9 + 48))
            return std::swap[abi:ne180100]<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>((uint64_t *)v9, a2 - 7);
        }
        return result;
      case 3uLL:
        return (_QWORD *)std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,fst::ArcUniqueMapper<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>::Compare &,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>*>(v9, (uint64_t *)(v9 + 56), (uint64_t)(a2 - 7));
      case 4uLL:
        return std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,fst::ArcUniqueMapper<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>::Compare &,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>*>(v9, v9 + 56, v9 + 112, (uint64_t)(a2 - 7));
      case 5uLL:
        return std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,fst::ArcUniqueMapper<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>::Compare &,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>*>(v9, v9 + 56, v9 + 112, v9 + 168, (uint64_t)(a2 - 7));
      default:
        if (v12 <= 1343)
        {
          if ((a5 & 1) != 0)
            return std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,fst::ArcUniqueMapper<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>::Compare &,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>*>((_QWORD *)v9, a2);
          else
            return std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,fst::ArcUniqueMapper<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>::Compare &,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>*>((_QWORD *)v9, a2);
        }
        if (v11 != 1)
        {
          v14 = v13 >> 1;
          v15 = (uint64_t *)(v9 + 56 * (v13 >> 1));
          if ((unint64_t)v12 < 0x1C01)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,fst::ArcUniqueMapper<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>::Compare &,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>*>((uint64_t)v15, (uint64_t *)v9, (uint64_t)(a2 - 7));
            if ((a5 & 1) != 0)
              goto LABEL_16;
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,fst::ArcUniqueMapper<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>::Compare &,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>*>(v9, v15, (uint64_t)(a2 - 7));
            v16 = 56 * v14;
            v17 = (uint64_t *)(56 * v14 + v9 - 56);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,fst::ArcUniqueMapper<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>::Compare &,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>*>(v9 + 56, v17, (uint64_t)(a2 - 14));
            v18 = v9 + 112;
            v19 = (uint64_t *)(v9 + 56 + v16);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,fst::ArcUniqueMapper<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>::Compare &,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>*>(v18, v19, (uint64_t)(a2 - 21));
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,fst::ArcUniqueMapper<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>::Compare &,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>*>((uint64_t)v17, v15, (uint64_t)v19);
            std::swap[abi:ne180100]<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>((uint64_t *)v8, v15);
            if ((a5 & 1) != 0)
              goto LABEL_16;
          }
          v20 = *(_DWORD *)(v8 - 56);
          if (v20 >= *(_DWORD *)v8)
          {
            if (v20 > *(_DWORD *)v8
              || (v21 = *(_DWORD *)(v8 - 52), v22 = *(_DWORD *)(v8 + 4), v21 >= v22)
              && (v21 > v22 || *(_DWORD *)(v8 - 8) >= *(_DWORD *)(v8 + 48)))
            {
              result = (_QWORD *)std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0> *,fst::ArcUniqueMapper<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>::Compare &>((uint64_t *)v8, (unint64_t)a2);
              v9 = (uint64_t)result;
              goto LABEL_21;
            }
          }
LABEL_16:
          v23 = (_DWORD *)std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0> *,fst::ArcUniqueMapper<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>::Compare &>((uint64_t *)v8, (unint64_t)a2);
          if ((v24 & 1) == 0)
            goto LABEL_19;
          v25 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,fst::ArcUniqueMapper<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>::Compare &,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>*>(v8, v23);
          v9 = (uint64_t)(v23 + 14);
          result = (_QWORD *)std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,fst::ArcUniqueMapper<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>::Compare &,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>*>((uint64_t)(v23 + 14), a2);
          if (!(_DWORD)result)
          {
            v10 = v11 + 1;
            if ((v25 & 1) != 0)
              continue;
LABEL_19:
            result = (_QWORD *)std::__introsort<std::_ClassicAlgPolicy,fst::ArcUniqueMapper<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>::Compare &,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>*,false>(v8, v23, a3, -v11, a5 & 1);
            v9 = (uint64_t)(v23 + 14);
LABEL_21:
            a5 = 0;
            a4 = -v11;
            goto LABEL_3;
          }
          a4 = -v11;
          a2 = v23;
          if ((v25 & 1) != 0)
            return result;
          goto LABEL_2;
        }
        if ((_QWORD *)v9 != a2)
          return (_QWORD *)std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,fst::ArcUniqueMapper<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>::Compare &,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>*,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>*>(v9, (uint64_t)a2, (uint64_t)a2, a3);
        return result;
    }
  }
}

_QWORD *std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,fst::ArcUniqueMapper<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>::Compare &,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>*>(_QWORD *result, _QWORD *a2)
{
  char *v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  _DWORD *v7;
  int v8;
  int v9;
  int v10;
  int v11;
  uint64_t i;
  char *v13;
  int v14;
  int v15;
  char *v16;
  int v17;
  uint64_t v18;
  int v19;
  _QWORD v20[3];
  int v21;
  int v22;

  if (result != a2)
  {
    v3 = (char *)result;
    v4 = result + 7;
    if (result + 7 != a2)
    {
      v5 = 0;
      v6 = result;
      do
      {
        v7 = v6;
        v6 = v4;
        v8 = v7[14];
        if (v8 < *v7 || v8 <= *v7 && ((v9 = v7[15], v10 = v7[1], v9 < v10) || v9 <= v10 && v7[26] < v7[12]))
        {
          v18 = *v6;
          v19 = v7[16];
          std::list<int>::list(v20, (uint64_t)(v7 + 18));
          v11 = v7[26];
          v21 = v7[24];
          v22 = v11;
          for (i = v5; ; i -= 56)
          {
            v13 = &v3[i];
            *((_QWORD *)v13 + 7) = *(_QWORD *)&v3[i];
            *((_DWORD *)v13 + 16) = *(_DWORD *)&v3[i + 8];
            std::list<int>::__assign_with_sentinel[abi:ne180100]<std::__list_const_iterator<int,void *>,std::__list_const_iterator<int,void *>>((uint64_t *)&v3[i + 72], *(_QWORD *)&v3[i + 24], (uint64_t)&v3[i + 16]);
            *((_DWORD *)v13 + 24) = *((_DWORD *)v13 + 10);
            *((_DWORD *)v13 + 26) = *((_DWORD *)v13 + 12);
            if (!i)
            {
              v16 = v3;
              goto LABEL_17;
            }
            v14 = *(_DWORD *)&v3[i - 56];
            if ((int)v18 >= v14)
            {
              if ((int)v18 > v14)
                break;
              v15 = *(_DWORD *)&v3[i - 52];
              if (SHIDWORD(v18) >= v15 && (SHIDWORD(v18) > v15 || v22 >= *(_DWORD *)&v3[i - 8]))
                break;
            }
          }
          v16 = &v3[i];
LABEL_17:
          *(_QWORD *)v16 = v18;
          *((_DWORD *)v16 + 2) = v19;
          if (v16 != (char *)&v18)
            std::list<int>::__assign_with_sentinel[abi:ne180100]<std::__list_const_iterator<int,void *>,std::__list_const_iterator<int,void *>>((uint64_t *)v16 + 2, v20[1], (uint64_t)v20);
          v17 = v22;
          *((_DWORD *)v16 + 10) = v21;
          *((_DWORD *)v16 + 12) = v17;
          result = std::__list_imp<char *>::clear(v20);
        }
        v4 = v6 + 7;
        v5 += 56;
      }
      while (v6 + 7 != a2);
    }
  }
  return result;
}

void sub_1ADC29134(_Unwind_Exception *a1)
{
  _QWORD *v1;

  std::__list_imp<char *>::clear(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,fst::ArcUniqueMapper<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>::Compare &,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>*>(_QWORD *result, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  _DWORD *v7;
  int v8;
  int v9;
  int v10;
  int v11;
  uint64_t i;
  char *v13;
  int v14;
  int v15;
  char *v16;
  int v17;
  uint64_t v18;
  int v19;
  _QWORD v20[3];
  int v21;
  int v22;

  if (result != a2)
  {
    v3 = result;
    v4 = result + 7;
    if (result + 7 != a2)
    {
      v5 = 0;
      v6 = result;
      do
      {
        v7 = v6;
        v6 = v4;
        v8 = v7[14];
        if (v8 < *v7 || v8 <= *v7 && ((v9 = v7[15], v10 = v7[1], v9 < v10) || v9 <= v10 && v7[26] < v7[12]))
        {
          v18 = *v6;
          v19 = v7[16];
          std::list<int>::list(v20, (uint64_t)(v7 + 18));
          v11 = v7[26];
          v21 = v7[24];
          v22 = v11;
          for (i = v5; ; i -= 56)
          {
            v13 = (char *)v3 + i;
            *((_QWORD *)v13 + 7) = *(_QWORD *)((char *)v3 + i);
            *((_DWORD *)v13 + 16) = *(_DWORD *)((char *)v3 + i + 8);
            std::list<int>::__assign_with_sentinel[abi:ne180100]<std::__list_const_iterator<int,void *>,std::__list_const_iterator<int,void *>>((_QWORD *)((char *)v3 + i + 72), *(_QWORD *)((char *)v3 + i + 24), (uint64_t)v3 + i + 16);
            *((_DWORD *)v13 + 24) = *((_DWORD *)v13 + 10);
            *((_DWORD *)v13 + 26) = *((_DWORD *)v13 + 12);
            v14 = *(_DWORD *)((char *)v3 + i - 56);
            if ((int)v18 >= v14)
            {
              if ((int)v18 > v14)
                break;
              v15 = *(_DWORD *)((char *)v3 + i - 52);
              if (SHIDWORD(v18) >= v15 && (SHIDWORD(v18) > v15 || v22 >= *(_DWORD *)((char *)v3 + i - 8)))
                break;
            }
          }
          v16 = (char *)v3 + i;
          *(_QWORD *)v16 = v18;
          *((_DWORD *)v16 + 2) = v19;
          if (v16 != (char *)&v18)
            std::list<int>::__assign_with_sentinel[abi:ne180100]<std::__list_const_iterator<int,void *>,std::__list_const_iterator<int,void *>>((uint64_t *)v16 + 2, v20[1], (uint64_t)v20);
          v17 = v22;
          *((_DWORD *)v16 + 10) = v21;
          *((_DWORD *)v16 + 12) = v17;
          result = std::__list_imp<char *>::clear(v20);
        }
        v4 = v6 + 7;
        v5 += 56;
      }
      while (v6 + 7 != a2);
    }
  }
  return result;
}

void sub_1ADC292FC(_Unwind_Exception *a1)
{
  _QWORD *v1;

  std::__list_imp<char *>::clear(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,fst::ArcUniqueMapper<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>::Compare &,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>*>(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v6;
  int v8;
  int v9;
  uint64_t *v10;
  uint64_t *v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;

  v6 = *(_DWORD *)a2;
  if (*(_DWORD *)a2 < *(_DWORD *)a1
    || v6 <= *(_DWORD *)a1
    && ((v14 = *((_DWORD *)a2 + 1), v15 = *(_DWORD *)(a1 + 4), v14 < v15)
     || v14 <= v15 && *((_DWORD *)a2 + 12) < *(_DWORD *)(a1 + 48)))
  {
    if (*(_DWORD *)a3 < v6
      || *(_DWORD *)a3 <= v6
      && ((v12 = *(_DWORD *)(a3 + 4), v13 = *((_DWORD *)a2 + 1), v12 < v13)
       || v12 <= v13 && *(_DWORD *)(a3 + 48) < *((_DWORD *)a2 + 12)))
    {
      std::swap[abi:ne180100]<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>((uint64_t *)a1, (uint64_t *)a3);
    }
    else
    {
      std::swap[abi:ne180100]<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>((uint64_t *)a1, a2);
      if (*(_DWORD *)a3 < *(_DWORD *)a2
        || *(_DWORD *)a3 <= *(_DWORD *)a2
        && ((v18 = *(_DWORD *)(a3 + 4), v19 = *((_DWORD *)a2 + 1), v18 < v19)
         || v18 <= v19 && *(_DWORD *)(a3 + 48) < *((_DWORD *)a2 + 12)))
      {
        v10 = a2;
        v11 = (uint64_t *)a3;
        goto LABEL_19;
      }
    }
    return 1;
  }
  if (*(_DWORD *)a3 < v6
    || *(_DWORD *)a3 <= v6
    && ((v8 = *(_DWORD *)(a3 + 4), v9 = *((_DWORD *)a2 + 1), v8 < v9)
     || v8 <= v9 && *(_DWORD *)(a3 + 48) < *((_DWORD *)a2 + 12)))
  {
    std::swap[abi:ne180100]<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>(a2, (uint64_t *)a3);
    if (*(_DWORD *)a2 < *(_DWORD *)a1
      || *(_DWORD *)a2 <= *(_DWORD *)a1
      && ((v16 = *((_DWORD *)a2 + 1), v17 = *(_DWORD *)(a1 + 4), v16 < v17)
       || v16 <= v17 && *((_DWORD *)a2 + 12) < *(_DWORD *)(a1 + 48)))
    {
      v10 = (uint64_t *)a1;
      v11 = a2;
LABEL_19:
      std::swap[abi:ne180100]<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>(v10, v11);
      return 2;
    }
    return 1;
  }
  return 0;
}

unint64_t std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0> *,fst::ArcUniqueMapper<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>::Compare &>(uint64_t *a1, unint64_t a2)
{
  uint64_t *v4;
  int v5;
  int v6;
  int v7;
  unint64_t i;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int j;
  int v15;
  int v16;
  int v17;
  int v18;
  BOOL v19;
  int v20;
  int v22;
  uint64_t v23;
  int v24;
  _QWORD v25[3];
  int v26;
  int v27;

  v23 = *a1;
  v24 = *((_DWORD *)a1 + 2);
  v4 = a1 + 2;
  std::list<int>::list(v25, (uint64_t)(a1 + 2));
  v5 = *((_DWORD *)a1 + 12);
  v26 = *((_DWORD *)a1 + 10);
  v27 = v5;
  v6 = *(_DWORD *)(a2 - 56);
  if ((int)v23 < v6
    || (int)v23 <= v6
    && ((v22 = *(_DWORD *)(a2 - 52), SHIDWORD(v23) < v22) || SHIDWORD(v23) <= v22 && v5 < *(_DWORD *)(a2 - 8)))
  {
    i = (unint64_t)(a1 + 7);
    v7 = *((_DWORD *)a1 + 14);
    if ((int)v23 >= v7)
    {
      do
      {
        if ((int)v23 <= v7)
        {
          v9 = *(_DWORD *)(i + 4);
          if (SHIDWORD(v23) < v9 || SHIDWORD(v23) <= v9 && v5 < *(_DWORD *)(i + 48))
            break;
        }
        v10 = *(_DWORD *)(i + 56);
        i += 56;
        v7 = v10;
      }
      while ((int)v23 >= v10);
    }
  }
  else
  {
    for (i = (unint64_t)(a1 + 7); i < a2; i += 56)
    {
      if ((int)v23 < *(_DWORD *)i)
        break;
      if ((int)v23 <= *(_DWORD *)i)
      {
        v11 = *(_DWORD *)(i + 4);
        if (SHIDWORD(v23) < v11 || SHIDWORD(v23) <= v11 && v5 < *(_DWORD *)(i + 48))
          break;
      }
    }
  }
  if (i < a2)
  {
    for (a2 -= 56; ; a2 -= 56)
    {
      if ((int)v23 >= v6)
      {
        if ((int)v23 > v6)
          break;
        v12 = *(_DWORD *)(a2 + 4);
        if (SHIDWORD(v23) >= v12 && (SHIDWORD(v23) > v12 || v5 >= *(_DWORD *)(a2 + 48)))
          break;
      }
      v13 = *(_DWORD *)(a2 - 56);
      v6 = v13;
    }
  }
  while (i < a2)
  {
    std::swap[abi:ne180100]<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>((uint64_t *)i, (uint64_t *)a2);
    v15 = *(_DWORD *)(i + 56);
    i += 56;
    for (j = v15; (int)v23 >= j; j = v17)
    {
      if ((int)v23 <= j)
      {
        v16 = *(_DWORD *)(i + 4);
        if (SHIDWORD(v23) < v16 || SHIDWORD(v23) <= v16 && v27 < *(_DWORD *)(i + 48))
          break;
      }
      v17 = *(_DWORD *)(i + 56);
      i += 56;
    }
    do
    {
      do
      {
        v18 = *(_DWORD *)(a2 - 56);
        a2 -= 56;
        v19 = (int)v23 <= v18;
      }
      while ((int)v23 < v18);
      if (!v19)
        break;
      v20 = *(_DWORD *)(a2 + 4);
    }
    while (SHIDWORD(v23) < v20 || SHIDWORD(v23) <= v20 && v27 < *(_DWORD *)(a2 + 48));
  }
  if ((uint64_t *)(i - 56) != a1)
  {
    *a1 = *(_QWORD *)(i - 56);
    *((_DWORD *)a1 + 2) = *(_DWORD *)(i - 48);
    std::list<int>::__assign_with_sentinel[abi:ne180100]<std::__list_const_iterator<int,void *>,std::__list_const_iterator<int,void *>>(v4, *(_QWORD *)(i - 32), i - 40);
    *((_DWORD *)a1 + 10) = *(_DWORD *)(i - 16);
    *((_DWORD *)a1 + 12) = *(_DWORD *)(i - 8);
  }
  *(_QWORD *)(i - 56) = v23;
  *(_DWORD *)(i - 48) = v24;
  if ((uint64_t *)(i - 56) != &v23)
    std::list<int>::__assign_with_sentinel[abi:ne180100]<std::__list_const_iterator<int,void *>,std::__list_const_iterator<int,void *>>((uint64_t *)(i - 40), v25[1], (uint64_t)v25);
  *(_DWORD *)(i - 16) = v26;
  *(_DWORD *)(i - 8) = v27;
  std::__list_imp<char *>::clear(v25);
  return i;
}

void sub_1ADC29728(_Unwind_Exception *a1)
{
  _QWORD *v1;

  std::__list_imp<char *>::clear(v1);
  _Unwind_Resume(a1);
}

unint64_t std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0> *,fst::ArcUniqueMapper<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>::Compare &>(uint64_t *a1, unint64_t a2)
{
  uint64_t *v4;
  uint64_t v5;
  int v6;
  int v7;
  int v8;
  unint64_t v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  unint64_t v17;
  unint64_t v18;
  int v19;
  int v20;
  int v21;
  int v22;
  uint64_t v24;
  int v25;
  _QWORD v26[3];
  int v27;
  int v28;

  v24 = *a1;
  v25 = *((_DWORD *)a1 + 2);
  v4 = a1 + 2;
  std::list<int>::list(v26, (uint64_t)(a1 + 2));
  v5 = 0;
  v6 = *((_DWORD *)a1 + 12);
  v27 = *((_DWORD *)a1 + 10);
  v28 = v6;
  while (1)
  {
    v7 = a1[v5 + 7];
    if (v7 >= (int)v24)
    {
      if (v7 > (int)v24)
        break;
      v8 = HIDWORD(a1[v5 + 7]);
      if (v8 >= SHIDWORD(v24) && (v8 > SHIDWORD(v24) || SLODWORD(a1[v5 + 13]) >= v6))
        break;
    }
    v5 += 7;
  }
  v9 = (unint64_t)&a1[v5 + 7];
  if (v5 * 8)
  {
    while (1)
    {
      v11 = *(_DWORD *)(a2 - 56);
      a2 -= 56;
      v10 = v11;
      if (v11 < (int)v24)
        break;
      if (v10 <= (int)v24)
      {
        v12 = *(_DWORD *)(a2 + 4);
        if (v12 < SHIDWORD(v24) || v12 <= SHIDWORD(v24) && *(_DWORD *)(a2 + 48) < v6)
          break;
      }
    }
  }
  else
  {
LABEL_25:
    if (v9 < a2)
    {
      do
      {
        v14 = *(_DWORD *)(a2 - 56);
        a2 -= 56;
        v13 = v14;
        if (v14 < (int)v24)
          break;
        if (v13 > (int)v24)
          goto LABEL_25;
        v15 = *(_DWORD *)(a2 + 4);
        if (v15 < SHIDWORD(v24))
          break;
        if (v15 > SHIDWORD(v24))
          goto LABEL_25;
      }
      while (*(_DWORD *)(a2 + 48) >= v6 && v9 < a2);
    }
  }
  v17 = v9;
  if (v9 < a2)
  {
    v18 = a2;
    do
    {
      std::swap[abi:ne180100]<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>((uint64_t *)v17, (uint64_t *)v18);
      for (v17 += 56; ; v17 += 56)
      {
        if (*(_DWORD *)v17 >= (int)v24)
        {
          if (*(_DWORD *)v17 > (int)v24)
            break;
          v19 = *(_DWORD *)(v17 + 4);
          if (v19 >= SHIDWORD(v24) && (v19 > SHIDWORD(v24) || *(_DWORD *)(v17 + 48) >= v28))
            break;
        }
      }
      while (1)
      {
        v21 = *(_DWORD *)(v18 - 56);
        v18 -= 56;
        v20 = v21;
        if (v21 < (int)v24)
          break;
        if (v20 <= (int)v24)
        {
          v22 = *(_DWORD *)(v18 + 4);
          if (v22 < SHIDWORD(v24) || v22 <= SHIDWORD(v24) && *(_DWORD *)(v18 + 48) < v28)
            break;
        }
      }
    }
    while (v17 < v18);
  }
  if ((uint64_t *)(v17 - 56) != a1)
  {
    *a1 = *(_QWORD *)(v17 - 56);
    *((_DWORD *)a1 + 2) = *(_DWORD *)(v17 - 48);
    std::list<int>::__assign_with_sentinel[abi:ne180100]<std::__list_const_iterator<int,void *>,std::__list_const_iterator<int,void *>>(v4, *(_QWORD *)(v17 - 32), v17 - 40);
    *((_DWORD *)a1 + 10) = *(_DWORD *)(v17 - 16);
    *((_DWORD *)a1 + 12) = *(_DWORD *)(v17 - 8);
  }
  *(_QWORD *)(v17 - 56) = v24;
  *(_DWORD *)(v17 - 48) = v25;
  if ((uint64_t *)(v17 - 56) != &v24)
    std::list<int>::__assign_with_sentinel[abi:ne180100]<std::__list_const_iterator<int,void *>,std::__list_const_iterator<int,void *>>((uint64_t *)(v17 - 40), v26[1], (uint64_t)v26);
  *(_DWORD *)(v17 - 16) = v27;
  *(_DWORD *)(v17 - 8) = v28;
  std::__list_imp<char *>::clear(v26);
  return v17 - 56;
}

void sub_1ADC299A4(_Unwind_Exception *a1)
{
  _QWORD *v1;

  std::__list_imp<char *>::clear(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,fst::ArcUniqueMapper<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>::Compare &,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>*>(uint64_t a1, _DWORD *a2)
{
  _BOOL8 v4;
  uint64_t *v5;
  int v6;
  _DWORD *v7;
  _DWORD *v8;
  uint64_t v9;
  int v10;
  int v11;
  int v12;
  int v13;
  uint64_t i;
  uint64_t v15;
  int v16;
  int v17;
  uint64_t v18;
  int v19;
  int v20;
  int v21;
  uint64_t v23;
  int v24;
  _QWORD v25[3];
  int v26;
  int v27;

  v4 = 1;
  switch(0x6DB6DB6DB6DB6DB7 * (((uint64_t)a2 - a1) >> 3))
  {
    case 0:
    case 1:
      return v4;
    case 2:
      v5 = (uint64_t *)(a2 - 14);
      v6 = *(a2 - 14);
      if (v6 < *(_DWORD *)a1
        || v6 <= *(_DWORD *)a1
        && ((v20 = *(a2 - 13), v21 = *(_DWORD *)(a1 + 4), v20 < v21) || v20 <= v21 && *(a2 - 2) < *(_DWORD *)(a1 + 48)))
      {
        std::swap[abi:ne180100]<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>((uint64_t *)a1, v5);
      }
      return v4;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,fst::ArcUniqueMapper<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>::Compare &,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>*>(a1, (uint64_t *)(a1 + 56), (uint64_t)(a2 - 14));
      return v4;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,fst::ArcUniqueMapper<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>::Compare &,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>*>(a1, a1 + 56, a1 + 112, (uint64_t)(a2 - 14));
      return v4;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,fst::ArcUniqueMapper<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>::Compare &,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>*>(a1, a1 + 56, a1 + 112, a1 + 168, (uint64_t)(a2 - 14));
      return v4;
    default:
      v7 = (_DWORD *)(a1 + 112);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,fst::ArcUniqueMapper<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>::Compare &,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>*>(a1, (uint64_t *)(a1 + 56), a1 + 112);
      v8 = (_DWORD *)(a1 + 168);
      if ((_DWORD *)(a1 + 168) == a2)
        return 1;
      v9 = 0;
      v10 = 0;
      break;
  }
  while (1)
  {
    if (*v8 >= *v7)
    {
      if (*v8 > *v7)
        goto LABEL_23;
      v11 = v8[1];
      v12 = v7[1];
      if (v11 >= v12 && (v11 > v12 || v8[12] >= v7[12]))
        goto LABEL_23;
    }
    v23 = *(_QWORD *)v8;
    v24 = v8[2];
    std::list<int>::list(v25, (uint64_t)(v8 + 4));
    v13 = v8[12];
    v26 = v8[10];
    v27 = v13;
    for (i = v9; ; i -= 56)
    {
      v15 = a1 + i;
      *(_QWORD *)(v15 + 168) = *(_QWORD *)(a1 + i + 112);
      *(_DWORD *)(v15 + 176) = *(_DWORD *)(a1 + i + 120);
      std::list<int>::__assign_with_sentinel[abi:ne180100]<std::__list_const_iterator<int,void *>,std::__list_const_iterator<int,void *>>((uint64_t *)(a1 + i + 184), *(_QWORD *)(a1 + i + 136), a1 + 128 + i);
      *(_DWORD *)(v15 + 208) = *(_DWORD *)(v15 + 152);
      *(_DWORD *)(v15 + 216) = *(_DWORD *)(v15 + 160);
      if (i == -112)
      {
        v18 = a1;
        goto LABEL_19;
      }
      v16 = *(_DWORD *)(a1 + i + 56);
      if ((int)v23 >= v16)
      {
        if ((int)v23 > v16)
          break;
        v17 = *(_DWORD *)(a1 + i + 60);
        if (SHIDWORD(v23) >= v17 && (SHIDWORD(v23) > v17 || v27 >= *(_DWORD *)(a1 + i + 104)))
          break;
      }
    }
    v18 = a1 + i + 112;
LABEL_19:
    *(_QWORD *)v18 = v23;
    *(_DWORD *)(v18 + 8) = v24;
    if ((uint64_t *)v18 != &v23)
      std::list<int>::__assign_with_sentinel[abi:ne180100]<std::__list_const_iterator<int,void *>,std::__list_const_iterator<int,void *>>((uint64_t *)(v18 + 16), v25[1], (uint64_t)v25);
    v19 = v27;
    *(_DWORD *)(v18 + 40) = v26;
    *(_DWORD *)(v18 + 48) = v19;
    if (++v10 == 8)
      break;
    std::__list_imp<char *>::clear(v25);
LABEL_23:
    v7 = v8;
    v9 += 56;
    v8 += 14;
    if (v8 == a2)
      return 1;
  }
  v4 = v8 + 14 == a2;
  std::__list_imp<char *>::clear(v25);
  return v4;
}

void sub_1ADC29CA8(_Unwind_Exception *a1)
{
  _QWORD *v1;

  std::__list_imp<char *>::clear(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,fst::ArcUniqueMapper<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>::Compare &,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *result;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;

  result = (_QWORD *)std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,fst::ArcUniqueMapper<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>::Compare &,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>*>(a1, (uint64_t *)a2, a3);
  if (*(_DWORD *)a4 < *(_DWORD *)a3
    || *(_DWORD *)a4 <= *(_DWORD *)a3
    && ((v9 = *(_DWORD *)(a4 + 4), v10 = *(_DWORD *)(a3 + 4), v9 < v10)
     || v9 <= v10 && *(_DWORD *)(a4 + 48) < *(_DWORD *)(a3 + 48)))
  {
    result = std::swap[abi:ne180100]<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>((uint64_t *)a3, (uint64_t *)a4);
    if (*(_DWORD *)a3 < *(_DWORD *)a2
      || *(_DWORD *)a3 <= *(_DWORD *)a2
      && ((v11 = *(_DWORD *)(a3 + 4), v12 = *(_DWORD *)(a2 + 4), v11 < v12)
       || v11 <= v12 && *(_DWORD *)(a3 + 48) < *(_DWORD *)(a2 + 48)))
    {
      result = std::swap[abi:ne180100]<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>((uint64_t *)a2, (uint64_t *)a3);
      if (*(_DWORD *)a2 < *(_DWORD *)a1)
        return std::swap[abi:ne180100]<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>((uint64_t *)a1, (uint64_t *)a2);
      if (*(_DWORD *)a2 <= *(_DWORD *)a1)
      {
        v13 = *(_DWORD *)(a2 + 4);
        v14 = *(_DWORD *)(a1 + 4);
        if (v13 < v14 || v13 <= v14 && *(_DWORD *)(a2 + 48) < *(_DWORD *)(a1 + 48))
          return std::swap[abi:ne180100]<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>((uint64_t *)a1, (uint64_t *)a2);
      }
    }
  }
  return result;
}

_QWORD *std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,fst::ArcUniqueMapper<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>::Compare &,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *result;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;

  result = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,fst::ArcUniqueMapper<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>::Compare &,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>*>(a1, a2, a3, a4);
  if (*(_DWORD *)a5 < *(_DWORD *)a4
    || *(_DWORD *)a5 <= *(_DWORD *)a4
    && ((v17 = *(_DWORD *)(a5 + 4), v18 = *(_DWORD *)(a4 + 4), v17 < v18)
     || v17 <= v18 && *(_DWORD *)(a5 + 48) < *(_DWORD *)(a4 + 48)))
  {
    result = std::swap[abi:ne180100]<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>((uint64_t *)a4, (uint64_t *)a5);
    if (*(_DWORD *)a4 < *(_DWORD *)a3
      || *(_DWORD *)a4 <= *(_DWORD *)a3
      && ((v11 = *(_DWORD *)(a4 + 4), v12 = *(_DWORD *)(a3 + 4), v11 < v12)
       || v11 <= v12 && *(_DWORD *)(a4 + 48) < *(_DWORD *)(a3 + 48)))
    {
      result = std::swap[abi:ne180100]<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>((uint64_t *)a3, (uint64_t *)a4);
      if (*(_DWORD *)a3 < *(_DWORD *)a2
        || *(_DWORD *)a3 <= *(_DWORD *)a2
        && ((v13 = *(_DWORD *)(a3 + 4), v14 = *(_DWORD *)(a2 + 4), v13 < v14)
         || v13 <= v14 && *(_DWORD *)(a3 + 48) < *(_DWORD *)(a2 + 48)))
      {
        result = std::swap[abi:ne180100]<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>((uint64_t *)a2, (uint64_t *)a3);
        if (*(_DWORD *)a2 < *(_DWORD *)a1)
          return std::swap[abi:ne180100]<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>((uint64_t *)a1, (uint64_t *)a2);
        if (*(_DWORD *)a2 <= *(_DWORD *)a1)
        {
          v15 = *(_DWORD *)(a2 + 4);
          v16 = *(_DWORD *)(a1 + 4);
          if (v15 < v16 || v15 <= v16 && *(_DWORD *)(a2 + 48) < *(_DWORD *)(a1 + 48))
            return std::swap[abi:ne180100]<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>((uint64_t *)a1, (uint64_t *)a2);
        }
      }
    }
  }
  return result;
}

uint64_t std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,fst::ArcUniqueMapper<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>::Compare &,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>*,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  int v16;
  unint64_t v17;

  if (a1 != a2)
  {
    v6 = a2;
    v8 = a2 - a1;
    v9 = (a2 - a1) / 56;
    if (a2 - a1 >= 57)
    {
      v10 = (unint64_t)(v9 - 2) >> 1;
      v11 = v10 + 1;
      v12 = (uint64_t *)(a1 + 56 * v10);
      do
      {
        std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,fst::ArcUniqueMapper<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>::Compare &,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>*>((_QWORD *)a1, a4, v9, v12);
        v12 -= 7;
        --v11;
      }
      while (v11);
    }
    v13 = v6;
    if (v6 != a3)
    {
      v14 = v6;
      do
      {
        if (*(_DWORD *)v14 < *(_DWORD *)a1
          || *(_DWORD *)v14 <= *(_DWORD *)a1
          && ((v15 = *(_DWORD *)(v14 + 4), v16 = *(_DWORD *)(a1 + 4), v15 < v16)
           || v15 <= v16 && *(_DWORD *)(v14 + 48) < *(_DWORD *)(a1 + 48)))
        {
          std::swap[abi:ne180100]<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>((uint64_t *)v14, (uint64_t *)a1);
          std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,fst::ArcUniqueMapper<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>::Compare &,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>*>((_QWORD *)a1, a4, v9, (uint64_t *)a1);
        }
        v14 += 56;
      }
      while (v14 != a3);
      v13 = a3;
    }
    if (v8 >= 57)
    {
      v17 = v8 / 0x38uLL;
      do
      {
        std::__pop_heap[abi:ne180100]<std::_ClassicAlgPolicy,fst::ArcUniqueMapper<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>::Compare,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>*>((_QWORD *)a1, v6, a4, v17);
        v6 -= 56;
      }
      while (v17-- > 2);
    }
    return v13;
  }
  return a3;
}

_QWORD *std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,fst::ArcUniqueMapper<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>::Compare &,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>*>(_QWORD *result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  unint64_t v4;
  uint64_t *v5;
  _QWORD *v6;
  int64_t v7;
  int64_t v9;
  uint64_t *v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  uint64_t *v17;
  uint64_t v18;
  int v19;
  int v20;
  int v21;
  int v22;
  uint64_t v23;
  int v24;
  _QWORD v25[3];
  int v26;
  int v27;

  v4 = a3 - 2;
  if (a3 >= 2)
  {
    v5 = a4;
    v6 = result;
    v7 = v4 >> 1;
    if ((uint64_t)(v4 >> 1) >= 0x6DB6DB6DB6DB6DB7 * (a4 - result))
    {
      v9 = (0xDB6DB6DB6DB6DB6ELL * (a4 - result)) | 1;
      v10 = &result[7 * v9];
      if ((uint64_t)(0xDB6DB6DB6DB6DB6ELL * (a4 - result) + 2) < a3)
      {
        v11 = *((_DWORD *)v10 + 14);
        if (*(_DWORD *)v10 < v11
          || *(_DWORD *)v10 <= v11
          && ((v12 = HIDWORD(result[7 * v9]), v13 = *((_DWORD *)v10 + 15), v12 < v13)
           || v12 <= v13 && SLODWORD(result[7 * v9 + 6]) < *((_DWORD *)v10 + 26)))
        {
          v10 += 7;
          v9 = 0xDB6DB6DB6DB6DB6ELL * (a4 - result) + 2;
        }
      }
      if (*(_DWORD *)v10 >= *(_DWORD *)a4)
      {
        if (*(_DWORD *)v10 > *(_DWORD *)a4
          || (v14 = *((_DWORD *)v10 + 1), v15 = *((_DWORD *)a4 + 1), v14 >= v15)
          && (v14 > v15 || *((_DWORD *)v10 + 12) >= *((_DWORD *)a4 + 12)))
        {
          v23 = *a4;
          v24 = *((_DWORD *)a4 + 2);
          std::list<int>::list(v25, (uint64_t)(a4 + 2));
          v16 = *((_DWORD *)v5 + 12);
          v26 = *((_DWORD *)v5 + 10);
          v27 = v16;
          while (1)
          {
            v17 = v10;
            *v5 = *v10;
            *((_DWORD *)v5 + 2) = *((_DWORD *)v10 + 2);
            if (v5 != v10)
              std::list<int>::__assign_with_sentinel[abi:ne180100]<std::__list_const_iterator<int,void *>,std::__list_const_iterator<int,void *>>(v5 + 2, v10[3], (uint64_t)(v10 + 2));
            *((_DWORD *)v5 + 10) = *((_DWORD *)v10 + 10);
            *((_DWORD *)v5 + 12) = *((_DWORD *)v10 + 12);
            if (v7 < v9)
              break;
            v18 = (2 * v9) | 1;
            v10 = &v6[7 * v18];
            if (2 * v9 + 2 < a3)
            {
              v19 = *((_DWORD *)v10 + 14);
              if (*(_DWORD *)v10 < v19
                || *(_DWORD *)v10 <= v19
                && ((v20 = HIDWORD(v6[7 * v18]), v21 = *((_DWORD *)v10 + 15), v20 < v21)
                 || v20 <= v21 && SLODWORD(v6[7 * v18 + 6]) < *((_DWORD *)v10 + 26)))
              {
                v10 += 7;
                v18 = 2 * v9 + 2;
              }
            }
            if (*(_DWORD *)v10 < (int)v23)
              break;
            v5 = v17;
            v9 = v18;
            if (*(_DWORD *)v10 <= (int)v23)
            {
              v22 = *((_DWORD *)v10 + 1);
              if (v22 < SHIDWORD(v23))
                break;
              v5 = v17;
              v9 = v18;
              if (v22 <= SHIDWORD(v23))
              {
                v5 = v17;
                v9 = v18;
                if (*((_DWORD *)v10 + 12) < v27)
                  break;
              }
            }
          }
          *v17 = v23;
          *((_DWORD *)v17 + 2) = v24;
          if (v17 != &v23)
            std::list<int>::__assign_with_sentinel[abi:ne180100]<std::__list_const_iterator<int,void *>,std::__list_const_iterator<int,void *>>(v17 + 2, v25[1], (uint64_t)v25);
          *((_DWORD *)v17 + 10) = v26;
          *((_DWORD *)v17 + 12) = v27;
          return std::__list_imp<char *>::clear(v25);
        }
      }
    }
  }
  return result;
}

void sub_1ADC2A344(_Unwind_Exception *a1)
{
  _QWORD *v1;

  std::__list_imp<char *>::clear(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__pop_heap[abi:ne180100]<std::_ClassicAlgPolicy,fst::ArcUniqueMapper<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>::Compare,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>*>(_QWORD *result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  int v17;

  if (a4 >= 2)
  {
    v7 = (uint64_t)result;
    v12 = *result;
    v13 = *((_DWORD *)result + 2);
    std::list<int>::list(&v14, (uint64_t)(result + 2));
    v8 = *(_DWORD *)(v7 + 48);
    v16 = *(_DWORD *)(v7 + 40);
    v17 = v8;
    v9 = std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,fst::ArcUniqueMapper<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>::Compare &,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>*>(v7, a3, a4);
    v10 = v9;
    if (v9 == a2 - 56)
    {
      *(_QWORD *)v9 = v12;
      *(_DWORD *)(v9 + 8) = v13;
      if ((uint64_t *)v9 != &v12)
        std::list<int>::__assign_with_sentinel[abi:ne180100]<std::__list_const_iterator<int,void *>,std::__list_const_iterator<int,void *>>((uint64_t *)(v9 + 16), v15, (uint64_t)&v14);
      *(_DWORD *)(v10 + 40) = v16;
      *(_DWORD *)(v10 + 48) = v17;
    }
    else
    {
      *(_QWORD *)v9 = *(_QWORD *)(a2 - 56);
      *(_DWORD *)(v9 + 8) = *(_DWORD *)(a2 - 48);
      std::list<int>::__assign_with_sentinel[abi:ne180100]<std::__list_const_iterator<int,void *>,std::__list_const_iterator<int,void *>>((uint64_t *)(v9 + 16), *(_QWORD *)(a2 - 32), a2 - 40);
      *(_DWORD *)(v10 + 40) = *(_DWORD *)(a2 - 16);
      *(_DWORD *)(v10 + 48) = *(_DWORD *)(a2 - 8);
      *(_QWORD *)(a2 - 56) = v12;
      *(_DWORD *)(a2 - 48) = v13;
      if ((uint64_t *)(a2 - 56) != &v12)
        std::list<int>::__assign_with_sentinel[abi:ne180100]<std::__list_const_iterator<int,void *>,std::__list_const_iterator<int,void *>>((uint64_t *)(a2 - 40), v15, (uint64_t)&v14);
      v11 = v17;
      *(_DWORD *)(a2 - 16) = v16;
      *(_DWORD *)(a2 - 8) = v11;
      std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,fst::ArcUniqueMapper<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>::Compare &,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>*>((_QWORD *)v7, v10 + 56, a3, 0x6DB6DB6DB6DB6DB7 * ((v10 + 56 - v7) >> 3));
    }
    return std::__list_imp<char *>::clear(&v14);
  }
  return result;
}

void sub_1ADC2A4E4(_Unwind_Exception *a1)
{
  _QWORD *v1;

  std::__list_imp<char *>::clear(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,fst::ArcUniqueMapper<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>::Compare &,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>*>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  int v13;
  int v14;

  v5 = 0;
  v6 = a3 - 2;
  if (a3 < 2)
    v6 = a3 - 1;
  v7 = v6 >> 1;
  do
  {
    v8 = v5 + 1;
    v9 = a1 + 56 * (v5 + 1);
    v10 = 2 * v5;
    v5 = (2 * v5) | 1;
    v11 = v10 + 2;
    if (v11 < a3)
    {
      v12 = *(_DWORD *)(v9 + 56);
      if (*(_DWORD *)v9 < v12
        || *(_DWORD *)v9 <= v12
        && ((v13 = *(_DWORD *)(a1 + 56 * v8 + 4), v14 = *(_DWORD *)(v9 + 60), v13 < v14)
         || v13 <= v14 && *(_DWORD *)(a1 + 56 * v8 + 48) < *(_DWORD *)(v9 + 104)))
      {
        v9 += 56;
        v5 = v11;
      }
    }
    *(_QWORD *)a1 = *(_QWORD *)v9;
    *(_DWORD *)(a1 + 8) = *(_DWORD *)(v9 + 8);
    if (a1 != v9)
      std::list<int>::__assign_with_sentinel[abi:ne180100]<std::__list_const_iterator<int,void *>,std::__list_const_iterator<int,void *>>((uint64_t *)(a1 + 16), *(_QWORD *)(v9 + 24), v9 + 16);
    *(_DWORD *)(a1 + 40) = *(_DWORD *)(v9 + 40);
    *(_DWORD *)(a1 + 48) = *(_DWORD *)(v9 + 48);
    a1 = v9;
  }
  while (v5 <= v7);
  return v9;
}

_QWORD *std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,fst::ArcUniqueMapper<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>::Compare &,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>*>(_QWORD *result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  _QWORD *v6;
  unint64_t v7;
  uint64_t *v8;
  int v9;
  uint64_t *v10;
  int v11;
  int v12;
  int v13;
  uint64_t *v14;
  int v15;
  int v16;
  uint64_t v17;
  int v18;
  _QWORD v19[3];
  int v20;
  int v21;

  v4 = a4 - 2;
  if (a4 >= 2)
  {
    v6 = result;
    v7 = v4 >> 1;
    v8 = &result[7 * (v4 >> 1)];
    v10 = (uint64_t *)(a2 - 56);
    v9 = *(_DWORD *)(a2 - 56);
    if (*(_DWORD *)v8 < v9
      || *(_DWORD *)v8 <= v9
      && ((v11 = HIDWORD(result[7 * v7]), v12 = *(_DWORD *)(a2 - 52), v11 < v12)
       || v11 <= v12 && SLODWORD(result[7 * v7 + 6]) < *(_DWORD *)(a2 - 8)))
    {
      v17 = *(_QWORD *)(a2 - 56);
      v18 = *(_DWORD *)(a2 - 48);
      std::list<int>::list(v19, a2 - 40);
      v13 = *(_DWORD *)(a2 - 8);
      v20 = *(_DWORD *)(a2 - 16);
      v21 = v13;
      while (1)
      {
        v14 = v8;
        *v10 = *v8;
        *((_DWORD *)v10 + 2) = *((_DWORD *)v8 + 2);
        if (v10 != v8)
          std::list<int>::__assign_with_sentinel[abi:ne180100]<std::__list_const_iterator<int,void *>,std::__list_const_iterator<int,void *>>(v10 + 2, v8[3], (uint64_t)(v8 + 2));
        *((_DWORD *)v10 + 10) = *((_DWORD *)v8 + 10);
        *((_DWORD *)v10 + 12) = *((_DWORD *)v8 + 12);
        if (!v7)
          break;
        v7 = (v7 - 1) >> 1;
        v8 = &v6[7 * v7];
        v10 = v14;
        if (*(_DWORD *)v8 >= (int)v17)
        {
          if (*(_DWORD *)v8 > (int)v17)
            break;
          v15 = HIDWORD(v6[7 * v7]);
          v10 = v14;
          if (v15 >= SHIDWORD(v17))
          {
            if (v15 > SHIDWORD(v17))
              break;
            v10 = v14;
            if (SLODWORD(v6[7 * v7 + 6]) >= v21)
              break;
          }
        }
      }
      *v14 = v17;
      *((_DWORD *)v14 + 2) = v18;
      if (v14 != &v17)
        std::list<int>::__assign_with_sentinel[abi:ne180100]<std::__list_const_iterator<int,void *>,std::__list_const_iterator<int,void *>>(v14 + 2, v19[1], (uint64_t)v19);
      v16 = v21;
      *((_DWORD *)v14 + 10) = v20;
      *((_DWORD *)v14 + 12) = v16;
      return std::__list_imp<char *>::clear(v19);
    }
  }
  return result;
}

void sub_1ADC2A7AC(_Unwind_Exception *a1)
{
  _QWORD *v1;

  std::__list_imp<char *>::clear(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__unique[abi:ne180100]<std::_ClassicAlgPolicy,std::__wrap_iter<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0> *>,std::__wrap_iter<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0> *>,fst::ArcUniqueMapper<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>::Equal &>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  _BOOL4 v9;
  uint64_t v10;
  uint64_t v11;

  result = a2;
  if (a1 != a2)
  {
    v7 = a1 + 72;
    do
    {
      v8 = a1 + 56;
      if (a1 + 56 == a2)
        return a2;
      v9 = fst::ArcUniqueMapper<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>::Equal::operator()(a3, a1, a1 + 56);
      v7 += 56;
      a1 = v8;
    }
    while (!v9);
    v10 = v8 + 56;
    v11 = v8 - 56;
    while (v10 != a2)
    {
      if (!fst::ArcUniqueMapper<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>::Equal::operator()(a3, v11, v10))
      {
        *(_QWORD *)(v11 + 56) = *(_QWORD *)v10;
        *(_DWORD *)(v11 + 64) = *(_DWORD *)(v10 + 8);
        if (v10 - 56 != v11)
          std::list<int>::__assign_with_sentinel[abi:ne180100]<std::__list_const_iterator<int,void *>,std::__list_const_iterator<int,void *>>((uint64_t *)(v11 + 72), *(_QWORD *)(v10 + 24), v7);
        *(_DWORD *)(v11 + 96) = *(_DWORD *)(v10 + 40);
        *(_DWORD *)(v11 + 104) = *(_DWORD *)(v10 + 48);
        v11 += 56;
      }
      v10 += 56;
      v7 += 56;
    }
    return v11 + 56;
  }
  return result;
}

BOOL fst::ArcUniqueMapper<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>::Equal::operator()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  char v7;
  uint64_t *v8;
  uint64_t *v9;
  BOOL v10;
  int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;

  if (*(_DWORD *)a2 != *(_DWORD *)a3
    || *(_DWORD *)(a2 + 4) != *(_DWORD *)(a3 + 4)
    || *(_DWORD *)(a2 + 48) != *(_DWORD *)(a3 + 48))
  {
    return 0;
  }
  v3 = *(_DWORD *)(a2 + 8);
  v4 = v3 ? *(_QWORD *)(a2 + 32) + 1 : 0;
  v5 = *(_DWORD *)(a3 + 8);
  v6 = v5 ? *(_QWORD *)(a3 + 32) + 1 : 0;
  if (v4 != v6)
    return 0;
  v7 = 0;
  v8 = (uint64_t *)(a2 + 24);
  v9 = (uint64_t *)(a3 + 24);
  if (v3)
    v10 = v3 == v5;
  else
    v10 = 0;
  v11 = !v10;
  v12 = v11 ^ 1;
  while (1)
  {
    v13 = *v8;
    v14 = *v9;
    if ((v7 & 1) == 0 && !v12)
      break;
    if (v13 == a2 + 16)
      return *(float *)(a2 + 40) == *(float *)(a3 + 40);
    if (*(_DWORD *)(v13 + 16) != *(_DWORD *)(v14 + 16))
      return 0;
    v8 = (uint64_t *)(v13 + 8);
    v9 = (uint64_t *)(v14 + 8);
    v7 = 1;
  }
  if (v3)
    return 0;
  return *(float *)(a2 + 40) == *(float *)(a3 + 40);
}

uint64_t std::vector<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>::__append(uint64_t *a1, unint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  char *v17;
  _QWORD *v18;
  char *v19;
  char *v20;
  char *v21;
  char *v22;
  uint64_t v23;

  v6 = a1[2];
  result = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD *)(result - 8);
  if (0x6DB6DB6DB6DB6DB7 * ((v6 - v7) >> 3) >= a2)
  {
    if (a2)
    {
      v13 = v7 + 56 * a2;
      v14 = 56 * a2;
      v15 = (_QWORD *)(v7 + 16);
      do
      {
        *v15 = v15;
        v15[1] = v15;
        v15[2] = 0;
        *((_DWORD *)v15 - 2) = 0;
        v15 += 7;
        v14 -= 56;
      }
      while (v14);
    }
    else
    {
      v13 = *(_QWORD *)(result - 8);
    }
    a1[1] = v13;
  }
  else
  {
    v8 = 0x6DB6DB6DB6DB6DB7 * ((v7 - *a1) >> 3);
    v9 = v8 + a2;
    if (v8 + a2 > 0x492492492492492)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v10 = 0x6DB6DB6DB6DB6DB7 * ((v5 - *a1) >> 3);
    if (2 * v10 > v9)
      v9 = 2 * v10;
    if (v10 >= 0x249249249249249)
      v11 = 0x492492492492492;
    else
      v11 = v9;
    v23 = result;
    if (v11)
      v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::VoiceCommandArgument>>(result, v11);
    else
      v12 = 0;
    v19 = v12;
    v20 = &v12[56 * v8];
    v22 = &v12[56 * v11];
    v16 = 56 * a2;
    v17 = &v20[56 * a2];
    v18 = v20 + 16;
    do
    {
      *v18 = v18;
      v18[1] = v18;
      v18[2] = 0;
      *((_DWORD *)v18 - 2) = 0;
      v18 += 7;
      v16 -= 56;
    }
    while (v16);
    v21 = v17;
    std::vector<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>::__swap_out_circular_buffer(a1, &v19);
    return std::__split_buffer<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>::~__split_buffer((uint64_t)&v19);
  }
  return result;
}

void sub_1ADC2AB08(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void fst::RmFinalEpsilon<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>(uint64_t a1)
{
  int v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  char v6;
  unint64_t v7;
  uint64_t *v8;
  BOOL v9;
  int v10;
  uint64_t v11;
  char v12;
  void **v13;
  uint64_t v14;
  char v15;
  float v16;
  float v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  float v23;
  float v24;
  float v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  int v34;
  _QWORD v35[3];
  int v36;
  uint64_t v37;
  uint64_t v38[3];
  float v39;
  float v40;
  uint64_t v41[3];
  float v42;
  int v43;
  _QWORD v44[3];
  int v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  _DWORD *v49;
  unint64_t v50;
  uint64_t v51;
  int v52;
  unsigned int v53;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  void **v57;
  uint64_t v58;
  unint64_t v59;
  _DWORD *v60;
  unint64_t v61;
  _OWORD v62[2];
  int v63;
  uint64_t v64[11];
  uint64_t v65;
  void *v66[3];
  void *v67[3];
  int v68;
  _QWORD v69[4];

  memset(v67, 0, sizeof(v67));
  memset(v66, 0, sizeof(v66));
  v65 = 0;
  v64[0] = 0;
  v64[1] = (uint64_t)v67;
  v64[2] = (uint64_t)v66;
  v64[3] = (uint64_t)&v65;
  fst::DfsVisit<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,fst::SccVisitor<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>,fst::AnyArcFilter<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>(a1, v64, 0);
  memset(v62, 0, sizeof(v62));
  v63 = 1065353216;
  LODWORD(v48) = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 128))(a1, &v46);
  while (1)
  {
    if (!v46)
    {
      if ((int)v48 >= (int)v47)
        goto LABEL_56;
LABEL_7:
      v2 = v48;
      goto LABEL_8;
    }
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v46 + 16))(v46))
      break;
    LODWORD(v37) = 0;
    if (!v46)
      goto LABEL_7;
    v2 = (*(uint64_t (**)(void))(*(_QWORD *)v46 + 24))();
LABEL_8:
    LODWORD(v37) = v2;
    (*(void (**)(void ***__return_ptr, uint64_t))(*(_QWORD *)a1 + 32))(&v57, a1);
    v3 = fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>::Zero();
    if ((_DWORD)v57)
      v4 = (char *)v60 + 1;
    else
      v4 = 0;
    if (*(_DWORD *)v3)
      v5 = *(_QWORD *)(v3 + 24) + 1;
    else
      v5 = 0;
    if (v4 == (char *)v5)
    {
      v6 = 0;
      v7 = v59;
      v8 = (uint64_t *)(v3 + 16);
      if ((_DWORD)v57)
        v9 = (_DWORD)v57 == *(_DWORD *)v3;
      else
        v9 = 0;
      v10 = !v9;
      while (1)
      {
        v11 = *v8;
        if ((v6 & 1) == 0 && v10 == 1)
          break;
        if ((uint64_t *)v7 == &v58)
          goto LABEL_46;
        if (*(_DWORD *)(v7 + 16) != *(_DWORD *)(v11 + 16))
          goto LABEL_27;
        v7 = *(_QWORD *)(v7 + 8);
        v8 = (uint64_t *)(v11 + 8);
        v6 = 1;
      }
      if ((_DWORD)v57)
        goto LABEL_27;
LABEL_46:
      v43 = v61;
      v40 = 0.0;
      v40 = *(float *)(v3 + 32);
      v16 = *(float *)&v61;
      v17 = v40;
      std::__list_imp<char *>::clear(&v58);
      if (v16 == v17)
        goto LABEL_51;
    }
    else
    {
LABEL_27:
      std::__list_imp<char *>::clear(&v58);
    }
    v61 = 0;
    (*(void (**)(uint64_t, _QWORD, void ***))(*(_QWORD *)a1 + 136))(a1, v37, &v57);
    while (1)
    {
      if (v57)
      {
        v12 = (*((uint64_t (**)(void **))*v57 + 3))(v57);
        v13 = v57;
        if ((v12 & 1) != 0)
        {
          v15 = 0;
          if (v57)
            goto LABEL_40;
          goto LABEL_42;
        }
        if (v57)
        {
          v14 = (*((uint64_t (**)(void))*v57 + 4))();
          v13 = v57;
          goto LABEL_35;
        }
      }
      else if (v61 >= v59)
      {
        if (v60)
          --*v60;
        goto LABEL_50;
      }
      v13 = 0;
      v14 = v58 + 56 * v61;
LABEL_35:
      if (((*(_QWORD *)((char *)v66[0] + (((unint64_t)*(int *)(v14 + 48) >> 3) & 0x1FFFFFFFFFFFFFF8)) >> *(_DWORD *)(v14 + 48)) & 1) != 0)
        break;
      if (v13)
        (*((void (**)(void **))*v13 + 5))(v13);
      else
        ++v61;
    }
    v15 = 1;
    if (v13)
    {
LABEL_40:
      (*((void (**)(void **))*v13 + 1))(v13);
      goto LABEL_44;
    }
LABEL_42:
    if (v60)
      --*v60;
LABEL_44:
    if ((v15 & 1) != 0)
      goto LABEL_51;
LABEL_50:
    std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::__emplace_unique_key_args<int,int const&>((uint64_t)v62, (int *)&v37, &v37);
LABEL_51:
    if (v46)
      (*(void (**)(uint64_t))(*(_QWORD *)v46 + 32))(v46);
    else
      LODWORD(v48) = v48 + 1;
  }
  if (v46)
    (*(void (**)(void))(*(_QWORD *)v46 + 8))();
LABEL_56:
  v54 = 0;
  v55 = 0;
  v56 = 0;
  v53 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 128))(a1, &v51);
  while (2)
  {
    if (!v51)
    {
      if ((int)v53 >= v52)
        goto LABEL_109;
      goto LABEL_62;
    }
    if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v51 + 16))(v51))
    {
      if (v51)
      {
        v18 = (*(uint64_t (**)(void))(*(_QWORD *)v51 + 24))();
        goto LABEL_63;
      }
LABEL_62:
      v18 = v53;
LABEL_63:
      (*(void (**)(void ***__return_ptr, uint64_t, uint64_t))(*(_QWORD *)a1 + 32))(&v57, a1, v18);
      v20 = v54;
      v19 = v55;
      if (v55 != v54)
      {
        do
        {
          v21 = v19 - 56;
          std::__list_imp<char *>::clear((_QWORD *)(v19 - 40));
          v19 = v21;
        }
        while (v21 != v20);
      }
      v55 = v20;
      v50 = 0;
      (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(_QWORD *)a1 + 136))(a1, v18, &v46);
LABEL_66:
      if (v46)
      {
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v46 + 24))(v46))
        {
          if (v46)
          {
            (*(void (**)(void))(*(_QWORD *)v46 + 8))();
            goto LABEL_100;
          }
LABEL_98:
          if (v49)
            --*v49;
LABEL_100:
          v30 = v54;
          v29 = v55;
          if (0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v29 - v30) >> 3) < (unint64_t)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 40))(a1, v18))
          {
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 240))(a1, v18);
            v34 = (int)v57;
            std::list<int>::list(v35, (uint64_t)&v58);
            v36 = v61;
            (*(void (**)(uint64_t, uint64_t, int *))(*(_QWORD *)a1 + 184))(a1, v18, &v34);
            std::__list_imp<char *>::clear(v35);
            v31 = v54;
            if (v55 != v54)
            {
              v32 = 0;
              v33 = 0;
              do
              {
                (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 208))(a1, v18, v31 + v32);
                ++v33;
                v31 = v54;
                v32 += 56;
              }
              while (v33 < 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v55 - v54) >> 3));
            }
          }
          std::__list_imp<char *>::clear(&v58);
          if (v51)
            (*(void (**)(uint64_t))(*(_QWORD *)v51 + 32))(v51);
          else
            ++v53;
          continue;
        }
        if (v46)
        {
          v22 = (*(uint64_t (**)(void))(*(_QWORD *)v46 + 32))();
          goto LABEL_72;
        }
      }
      else if (v50 >= v48)
      {
        goto LABEL_98;
      }
      v22 = v47 + 56 * v50;
LABEL_72:
      if (std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>(v62, (int *)(v22 + 48)))
      {
        if (!*(_QWORD *)v22)
        {
          (*(void (**)(uint64_t *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)a1 + 32))(&v37, a1, *(unsigned int *)(v22 + 48));
          fst::Times<int,(fst::StringType)0>((int *)&v37, v22 + 8, (uint64_t)&v68);
          v23 = NAN;
          if (v39 != -INFINITY)
          {
            v24 = *(float *)(v22 + 40);
            v23 = NAN;
            if (v24 != -INFINITY)
            {
              v23 = INFINITY;
              if (v24 != INFINITY && v39 != INFINITY)
                v23 = v39 + v24;
            }
          }
          fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>::GallicWeight((uint64_t)&v40, &v68, v23);
          std::__list_imp<char *>::clear(v69);
          fst::Plus<int>((uint64_t)&v40, (uint64_t)&v57, (uint64_t)&v68);
          v26 = NAN;
          if (v42 != -INFINITY)
          {
            v26 = NAN;
            if (*(float *)&v61 != -INFINITY)
            {
              if (v42 >= *(float *)&v61)
                v26 = *(float *)&v61;
              else
                v26 = v42;
            }
          }
          fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>::GallicWeight((uint64_t)&v43, &v68, v26);
          std::__list_imp<char *>::clear(v69);
          LODWORD(v57) = v43;
          std::list<int>::__assign_with_sentinel[abi:ne180100]<std::__list_const_iterator<int,void *>,std::__list_const_iterator<int,void *>>(&v58, v44[1], (uint64_t)v44);
          LODWORD(v61) = v45;
          std::__list_imp<char *>::clear(v44);
          std::__list_imp<char *>::clear(v41);
          std::__list_imp<char *>::clear(v38);
          goto LABEL_93;
        }
        v27 = v55;
        if (v55 < v56)
        {
LABEL_90:
          std::vector<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>::__construct_one_at_end[abi:ne180100]<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0> const&>((uint64_t)&v54, v22);
          v28 = v27 + 56;
LABEL_92:
          v55 = v28;
LABEL_93:
          if (v46)
            (*(void (**)(uint64_t))(*(_QWORD *)v46 + 40))(v46);
          else
            ++v50;
          goto LABEL_66;
        }
      }
      else
      {
        v27 = v55;
        if (v55 < v56)
          goto LABEL_90;
      }
      v28 = std::vector<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>::__push_back_slow_path<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0> const&>(&v54, v22);
      goto LABEL_92;
    }
    break;
  }
  if (v51)
    (*(void (**)(void))(*(_QWORD *)v51 + 8))();
LABEL_109:
  fst::Connect<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>(a1);
  v57 = (void **)&v54;
  std::vector<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>::__destroy_vector::operator()[abi:ne180100](&v57);
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)v62);
  if (v66[0])
    operator delete(v66[0]);
  if (v67[0])
    operator delete(v67[0]);
}

void sub_1ADC2B2EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39,uint64_t a40,uint64_t a41,void **a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,char a47)
{
  uint64_t v47;
  void *v49;
  void *v50;

  a42 = (void **)&a39;
  std::vector<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>::__destroy_vector::operator()[abi:ne180100](&a42);
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)&a47);
  v49 = *(void **)(v47 - 184);
  if (v49)
    operator delete(v49);
  v50 = *(void **)(v47 - 160);
  if (v50)
    operator delete(v50);
  _Unwind_Resume(a1);
}

_QWORD *fst::FactorWeightFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>>::FactorWeightFst(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  char v6[8];
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int16 v10;

  v4 = operator new();
  v6[0] = FLAGS_fst_default_cache_gc;
  v7 = FLAGS_fst_default_cache_gc_limit;
  v8 = 0x33A800000;
  v9 = 0;
  v10 = 0;
  fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>>::FactorWeightFstImpl(v4, a2, (uint64_t)v6);
  *a1 = &unk_1E5D1E9D8;
  a1[1] = v4;
  return a1;
}

void sub_1ADC2B51C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10F3C40B21EFC33);
  _Unwind_Resume(a1);
}

void fst::FactorWeightFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>>::~FactorWeightFst(_QWORD *a1)
{
  _DWORD *v1;
  int v2;

  *a1 = &unk_1E5D26EF8;
  v1 = (_DWORD *)a1[1];
  if (v1)
  {
    v2 = v1[14] - 1;
    v1[14] = v2;
    if (!v2)
      (*(void (**)(_DWORD *))(*(_QWORD *)v1 + 8))(v1);
  }
  JUMPOUT(0x1AF44D190);
}

uint64_t fst::ImplToFst<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>>,fst::Fst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>::HasSequentialStates(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8));
}

uint64_t fst::ImplToFst<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>>,fst::Fst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>::Start(uint64_t a1)
{
  return fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>>::Start(*(_QWORD *)(a1 + 8));
}

_QWORD *fst::ImplToFst<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>>,fst::Fst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>::Final@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  return fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>>::Final(*(_QWORD *)(a1 + 8), a2, a3);
}

uint64_t fst::ImplToFst<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>>,fst::Fst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>::NumArcs(uint64_t a1, int a2)
{
  return fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>>::NumArcs(*(_QWORD *)(a1 + 8), a2);
}

uint64_t fst::ImplToFst<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>>,fst::Fst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>::NumInputEpsilons(uint64_t a1, int a2)
{
  return fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>>::NumInputEpsilons(*(_QWORD *)(a1 + 8), a2);
}

uint64_t fst::ImplToFst<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>>,fst::Fst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>::NumOutputEpsilons(uint64_t a1, int a2)
{
  return fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>>::NumOutputEpsilons(*(_QWORD *)(a1 + 8), a2);
}

uint64_t fst::ImplToFst<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>>,fst::Fst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>::Properties(uint64_t a1, uint64_t a2, int a3)
{
  unint64_t v5;
  uint64_t v7;

  if (!a3)
    return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 8) + 32))(*(_QWORD *)(a1 + 8), a2);
  v7 = 0;
  v5 = fst::TestProperties<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>(a1, a2, &v7);
  *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) & (~v7 | 4) | v7 & v5;
  return v5 & a2;
}

uint64_t fst::ImplToFst<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>>,fst::Fst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>::Type(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8) + 16;
}

_QWORD *fst::FactorWeightFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>>::Copy(uint64_t a1, int a2)
{
  _QWORD *v4;

  v4 = (_QWORD *)operator new();
  fst::ImplToFst<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>>,fst::Fst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>::ImplToFst(v4, a1, a2);
  *v4 = &unk_1E5D1E9D8;
  return v4;
}

void sub_1ADC2B6D4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0xA1C40BD48D6D6);
  _Unwind_Resume(a1);
}

uint64_t fst::ImplToFst<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>>,fst::Fst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>::InputSymbols(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 8) + 40);
}

uint64_t fst::ImplToFst<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>>,fst::Fst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>::OutputSymbols(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 8) + 48);
}

uint64_t fst::FactorWeightFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>>::InitStateIterator(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;

  v4 = operator new();
  *(_QWORD *)v4 = &unk_1E5D204E8;
  *(_QWORD *)(v4 + 8) = a1;
  v5 = *a1;
  *(_QWORD *)(v4 + 16) = a1[1];
  *(_DWORD *)(v4 + 24) = 0;
  result = (*(uint64_t (**)(uint64_t *))(v5 + 24))(a1);
  *(_QWORD *)v4 = &unk_1E5D1C6E8;
  *a2 = v4;
  return result;
}

void sub_1ADC2B790(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10E1C408BA93049);
  _Unwind_Resume(a1);
}

uint64_t fst::FactorWeightFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>>::InitArcIterator(uint64_t a1, int a2, _QWORD *a3)
{
  return fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>>::InitArcIterator(*(_QWORD *)(a1 + 8), a2, a3);
}

uint64_t fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>>::FactorWeightFstImpl(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  int v7;
  int v8;
  __int16 v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  fst *v17;
  _QWORD *v18;
  _QWORD *v19;
  char v21;
  std::string __str;

  *(_QWORD *)fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>::CacheBaseImpl(a1, a3) = &unk_1E5D21968;
  v6 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 88))(a2, 0);
  v7 = *(_DWORD *)(a3 + 16);
  *(_QWORD *)(a1 + 148) = *(_QWORD *)(a3 + 20);
  v8 = *(_DWORD *)(a3 + 28);
  v9 = *(_WORD *)(a3 + 32);
  *(_QWORD *)(a1 + 232) = 0;
  *(_QWORD *)(a1 + 136) = v6;
  *(_DWORD *)(a1 + 144) = v7;
  *(_DWORD *)(a1 + 156) = v8;
  *(_WORD *)(a1 + 160) = v9;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_QWORD *)(a1 + 216) = 0;
  *(_DWORD *)(a1 + 224) = 1065353216;
  *(_QWORD *)(a1 + 240) = 0;
  *(_QWORD *)(a1 + 248) = 0;
  std::string::basic_string[abi:ne180100]<0>(&__str, "factor_weight");
  std::string::operator=((std::string *)(a1 + 16), &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  v10 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, 0x3FFFFFFF0007, 0);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a1 + 8) & 0xFFFFC0000000FFFFLL | fst::FactorWeightProperties(v10) & 0x3FFFFFFF0004;
  v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 112))(a2);
  v12 = *(_QWORD *)(a1 + 40);
  if (v12 != v11)
  {
    if (v12)
      (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
    if (v11)
      v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 16))(v11);
    else
      v13 = 0;
    *(_QWORD *)(a1 + 40) = v13;
  }
  v14 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 120))(a2);
  v15 = *(_QWORD *)(a1 + 48);
  if (v15 != v14)
  {
    if (v15)
      (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
    if (v14)
      v16 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 16))(v14);
    else
      v16 = 0;
    *(_QWORD *)(a1 + 48) = v16;
  }
  if (!*(_DWORD *)(a1 + 148))
  {
    std::string::basic_string[abi:ne180100]<0>(&__str, "WARNING");
    v17 = fst::LogMessage::LogMessage((fst *)&v21, (uint64_t)&__str);
    v18 = (_QWORD *)fst::cerr(v17);
    v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)"FactorWeightFst: factor mode is set to 0: ", 42);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"factoring neither arc weights nor final weights.", 48);
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v21);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
  }
  return a1;
}

void sub_1ADC2B9D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, __int16 a10, char a11, char a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  _QWORD *v18;
  void **v19;
  void *v21;

  if (a18 < 0)
    operator delete(__p);
  v21 = *v19;
  if (*v19)
  {
    v18[30] = v21;
    operator delete(v21);
  }
  std::__hash_table<std::__hash_value_type<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,int>,std::__unordered_map_hasher<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,std::__hash_value_type<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,int>,fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::ElementKey,fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::ElementEqual,true>,std::__unordered_map_equal<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,std::__hash_value_type<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,int>,fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::ElementEqual,fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::ElementKey,true>,std::allocator<std::__hash_value_type<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,int>>>::~__hash_table((uint64_t)(v19 - 5));
  std::vector<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,std::allocator<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>::~CacheBaseImpl(v18);
  _Unwind_Resume(a1);
}

void fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>>::~FactorWeightFstImpl(uint64_t a1)
{
  fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>>::~FactorWeightFstImpl(a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>>::Properties(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 32))(a1, 0x3FFFFFFF0007);
}

uint64_t fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>>::Properties(uint64_t a1, uint64_t a2)
{
  if ((a2 & 4) != 0
    && (*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(**(_QWORD **)(a1 + 136) + 64))(*(_QWORD *)(a1 + 136), 4, 0))
  {
    *(_QWORD *)(a1 + 8) |= 4uLL;
  }
  return *(_QWORD *)(a1 + 8) & a2;
}

uint64_t fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>::CacheBaseImpl(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;

  *(_QWORD *)a1 = &unk_1E5D229E8;
  *(_QWORD *)(a1 + 8) = 0;
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 16), "null");
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 56) = 1;
  *(_QWORD *)a1 = &unk_1E5D1B8A8;
  *(_BYTE *)(a1 + 60) = 0;
  *(_DWORD *)(a1 + 64) = -1;
  *(_OWORD *)(a1 + 68) = 0u;
  *(_OWORD *)(a1 + 84) = 0u;
  *(_DWORD *)(a1 + 100) = -1;
  *(_BYTE *)(a1 + 104) = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 8);
  v4 = operator new();
  fst::VectorCacheStore<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>::VectorCacheStore((_QWORD *)v4, (_BYTE *)a2);
  v5 = *(_QWORD *)(a2 + 8);
  *(_BYTE *)(v4 + 72) = v5 == 0;
  *(_DWORD *)(v4 + 76) = -1;
  *(_QWORD *)(v4 + 80) = 0;
  *(_BYTE *)(v4 + 88) = *(_BYTE *)a2;
  if (v5 <= 0x1FA0)
    v5 = 8096;
  *(_QWORD *)(v4 + 96) = v5;
  *(_BYTE *)(v4 + 104) = 0;
  *(_QWORD *)(v4 + 112) = 0;
  *(_QWORD *)(a1 + 120) = v4;
  *(_BYTE *)(a1 + 128) = 1;
  return a1;
}

void sub_1ADC2BBDC(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v4;

  MEMORY[0x1AF44D190](v2, 0x10A0C407A9BBF1FLL);
  v4 = *(void **)(v1 + 72);
  if (v4)
    operator delete(v4);
  fst::FstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>::~FstImpl(v1);
  _Unwind_Resume(a1);
}

void fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>::~CacheBaseImpl(_QWORD *a1)
{
  fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>::~CacheBaseImpl(a1);
  JUMPOUT(0x1AF44D190);
}

_QWORD *fst::VectorCacheStore<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>::VectorCacheStore(_QWORD *a1, _BYTE *a2)
{
  *(_BYTE *)a1 = *a2;
  a1[1] = 0;
  a1[2] = 0;
  a1[3] = 0;
  a1[4] = a1 + 4;
  a1[5] = a1 + 4;
  a1[6] = 0;
  a1[7] = 0;
  fst::VectorCacheStore<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>::Clear(a1);
  a1[7] = a1[5];
  return a1;
}

void sub_1ADC2BC98(_Unwind_Exception *a1)
{
  uint64_t v1;
  _QWORD *v2;
  void **v3;
  void **v4;
  void *v6;

  v4 = v3;
  std::__list_imp<char *>::clear(v2);
  v6 = *v4;
  if (*v4)
  {
    *(_QWORD *)(v1 + 16) = v6;
    operator delete(v6);
  }
  _Unwind_Resume(a1);
}

uint64_t fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>::~CacheBaseImpl(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;

  *a1 = &unk_1E5D1B8A8;
  v2 = (_QWORD *)a1[15];
  if (v2)
  {
    v3 = fst::VectorCacheStore<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>::~VectorCacheStore(v2);
    MEMORY[0x1AF44D190](v3, 0x10A0C407A9BBF1FLL);
  }
  v4 = (void *)a1[9];
  if (v4)
    operator delete(v4);
  return fst::FstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>::~FstImpl((uint64_t)a1);
}

_QWORD *fst::VectorCacheStore<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>::~VectorCacheStore(_QWORD *a1)
{
  void *v2;

  fst::VectorCacheStore<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>::Clear(a1);
  std::__list_imp<char *>::clear(a1 + 4);
  v2 = (void *)a1[1];
  if (v2)
  {
    a1[2] = v2;
    operator delete(v2);
  }
  return a1;
}

uint64_t fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>>::~FactorWeightFstImpl(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  void **v5;

  *(_QWORD *)a1 = &unk_1E5D21968;
  v2 = *(_QWORD *)(a1 + 136);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *(void **)(a1 + 232);
  if (v3)
  {
    *(_QWORD *)(a1 + 240) = v3;
    operator delete(v3);
  }
  std::__hash_table<std::__hash_value_type<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,int>,std::__unordered_map_hasher<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,std::__hash_value_type<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,int>,fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::ElementKey,fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::ElementEqual,true>,std::__unordered_map_equal<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,std::__hash_value_type<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,int>,fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::ElementEqual,fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::ElementKey,true>,std::allocator<std::__hash_value_type<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,int>>>::~__hash_table(a1 + 192);
  v5 = (void **)(a1 + 168);
  std::vector<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,std::allocator<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element>>::__destroy_vector::operator()[abi:ne180100](&v5);
  return fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>::~CacheBaseImpl((_QWORD *)a1);
}

uint64_t fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>>::Start(uint64_t a1)
{
  uint64_t result;
  int v3;
  int *v4;
  int State;
  int v6;
  _QWORD v7[3];
  int v8;
  int v9[4];
  _QWORD v10[3];
  int v11;

  if (*(_BYTE *)(a1 + 60))
    return *(unsigned int *)(a1 + 64);
  if ((*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 32))(a1, 4))
  {
    *(_BYTE *)(a1 + 60) = 1;
    return *(unsigned int *)(a1 + 64);
  }
  if (*(_BYTE *)(a1 + 60))
    return *(unsigned int *)(a1 + 64);
  result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 136) + 24))(*(_QWORD *)(a1 + 136));
  if ((_DWORD)result != -1)
  {
    v3 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 136) + 24))(*(_QWORD *)(a1 + 136));
    v4 = (int *)fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>::One();
    v6 = *v4;
    std::list<int>::list(v7, (uint64_t)(v4 + 2));
    v8 = v4[8];
    v9[0] = v3;
    v9[2] = v6;
    std::list<int>::list(v10, (uint64_t)v7);
    v11 = v8;
    State = fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>>::FindState(a1, v9);
    std::__list_imp<char *>::clear(v10);
    std::__list_imp<char *>::clear(v7);
    *(_DWORD *)(a1 + 64) = State;
    *(_BYTE *)(a1 + 60) = 1;
    if (*(_DWORD *)(a1 + 68) <= State)
      *(_DWORD *)(a1 + 68) = State + 1;
    return *(unsigned int *)(a1 + 64);
  }
  return result;
}

void sub_1ADC2BEFC(_Unwind_Exception *a1)
{
  _QWORD *v1;
  _QWORD *v2;

  std::__list_imp<char *>::clear(v2);
  std::__list_imp<char *>::clear(v1);
  _Unwind_Resume(a1);
}

uint64_t fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>>::FindState(uint64_t a1, int *a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t *v9;
  uint64_t *v10;
  BOOL v11;
  _BOOL4 v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  _QWORD *v18;
  uint64_t v19;
  uint64_t *v20;
  unint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v25;
  char *v26;
  char *v27;
  unint64_t v28;
  _QWORD *v29;
  char *v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  char *v34;
  char *v35;
  int v36;
  unint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  int v40[4];
  _QWORD v41[3];
  int v42;
  int v43;
  float v44;

  if ((*(_BYTE *)(a1 + 148) & 2) != 0)
    goto LABEL_27;
  v4 = fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>::One();
  v5 = a2[2];
  v6 = v5 ? *((_QWORD *)a2 + 4) + 1 : 0;
  v7 = *(_DWORD *)v4 ? *(_QWORD *)(v4 + 24) + 1 : 0;
  if (v6 != v7)
    goto LABEL_27;
  v8 = 0;
  v9 = (uint64_t *)(a2 + 6);
  v10 = (uint64_t *)(v4 + 16);
  v11 = v5 && v5 == *(_DWORD *)v4;
  v12 = !v11;
  v13 = !v12;
  while (1)
  {
    v14 = *v9;
    v15 = *v10;
    if ((v8 & 1) == 0 && !v13)
      break;
    if ((int *)v14 == a2 + 4)
      goto LABEL_22;
    if (*(_DWORD *)(v14 + 16) != *(_DWORD *)(v15 + 16))
      goto LABEL_27;
    v9 = (uint64_t *)(v14 + 8);
    v10 = (uint64_t *)(v15 + 8);
    v8 = 1;
  }
  if (v5)
    goto LABEL_27;
LABEL_22:
  v40[0] = 0;
  v40[0] = a2[10];
  v44 = 0.0;
  v44 = *(float *)(v4 + 32);
  v16 = *a2;
  if (*(float *)v40 != v44 || v16 == -1)
  {
LABEL_27:
    v18 = std::__hash_table<std::__hash_value_type<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,int>,std::__unordered_map_hasher<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,std::__hash_value_type<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,int>,fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::ElementKey,fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::ElementEqual,true>,std::__unordered_map_equal<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,std::__hash_value_type<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,int>,fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::ElementEqual,fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::ElementKey,true>,std::allocator<std::__hash_value_type<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,int>>>::find<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element>((_QWORD *)(a1 + 192), a2);
    if (v18)
    {
      return *((unsigned int *)v18 + 16);
    }
    else
    {
      v21 = *(_QWORD *)(a1 + 176);
      v20 = (uint64_t *)(a1 + 168);
      v19 = -1431655765 * ((v21 - *(_QWORD *)(a1 + 168)) >> 4);
      if (v21 >= *(_QWORD *)(a1 + 184))
      {
        v22 = std::vector<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>>::Element,std::allocator<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>>::Element>>::__push_back_slow_path<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>>::Element const&>(v20, a2);
      }
      else
      {
        std::vector<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>>::Element,std::allocator<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>>::Element>>::__construct_one_at_end[abi:ne180100]<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>>::Element const&>((uint64_t)v20, a2);
        v22 = v21 + 48;
      }
      *(_QWORD *)(a1 + 176) = v22;
      v23 = a2[2];
      v40[0] = *a2;
      v40[2] = v23;
      std::list<int>::list(v41, (uint64_t)(a2 + 4));
      v42 = a2[10];
      v43 = v19;
      std::__hash_table<std::__hash_value_type<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,int>,std::__unordered_map_hasher<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,std::__hash_value_type<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,int>,fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::ElementKey,fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::ElementEqual,true>,std::__unordered_map_equal<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,std::__hash_value_type<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,int>,fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::ElementEqual,fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::ElementKey,true>,std::allocator<std::__hash_value_type<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,int>>>::__emplace_unique_key_args<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,std::pair<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element const,int>>(a1 + 192, v40, v40);
      std::__list_imp<char *>::clear(v41);
    }
  }
  else
  {
    v25 = v16;
    v26 = *(char **)(a1 + 232);
    v27 = *(char **)(a1 + 240);
    v28 = (v27 - v26) >> 2;
    if (v28 <= v16)
    {
      v29 = (_QWORD *)(a1 + 248);
      do
      {
        if ((unint64_t)v27 >= *v29)
        {
          v31 = v28 + 1;
          if ((v28 + 1) >> 62)
            std::vector<int>::__throw_length_error[abi:ne180100]();
          v32 = *v29 - (_QWORD)v26;
          if (v32 >> 1 > v31)
            v31 = v32 >> 1;
          if ((unint64_t)v32 >= 0x7FFFFFFFFFFFFFFCLL)
            v33 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v33 = v31;
          if (v33)
          {
            v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(a1 + 248, v33);
            v26 = *(char **)(a1 + 232);
            v27 = *(char **)(a1 + 240);
          }
          else
          {
            v34 = 0;
          }
          v35 = &v34[4 * v28];
          *(_DWORD *)v35 = -1;
          v30 = v35 + 4;
          while (v27 != v26)
          {
            v36 = *((_DWORD *)v27 - 1);
            v27 -= 4;
            *((_DWORD *)v35 - 1) = v36;
            v35 -= 4;
          }
          *(_QWORD *)(a1 + 232) = v35;
          *(_QWORD *)(a1 + 240) = v30;
          *(_QWORD *)(a1 + 248) = &v34[4 * v33];
          if (v26)
          {
            operator delete(v26);
            v26 = *(char **)(a1 + 232);
          }
          else
          {
            v26 = v35;
          }
        }
        else
        {
          *(_DWORD *)v27 = -1;
          v30 = v27 + 4;
        }
        *(_QWORD *)(a1 + 240) = v30;
        v28 = (v30 - v26) >> 2;
        v16 = *a2;
        v27 = v30;
      }
      while (v28 <= *a2);
      v25 = v16;
    }
    if (*(_DWORD *)&v26[4 * v25] == -1)
    {
      v37 = *(_QWORD *)(a1 + 176);
      *(_DWORD *)&v26[4 * v25] = -1431655765 * ((v37 - *(_QWORD *)(a1 + 168)) >> 4);
      v38 = (uint64_t *)(a1 + 168);
      if (v37 >= *(_QWORD *)(a1 + 184))
      {
        v39 = std::vector<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>>::Element,std::allocator<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>>::Element>>::__push_back_slow_path<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>>::Element const&>(v38, a2);
      }
      else
      {
        std::vector<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>>::Element,std::allocator<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>>::Element>>::__construct_one_at_end[abi:ne180100]<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>>::Element const&>((uint64_t)v38, a2);
        v39 = v37 + 48;
      }
      *(_QWORD *)(a1 + 176) = v39;
      v16 = *a2;
      v26 = *(char **)(a1 + 232);
    }
    return *(unsigned int *)&v26[4 * v16];
  }
  return v19;
}

void sub_1ADC2C220(_Unwind_Exception *a1)
{
  _QWORD *v1;

  std::__list_imp<char *>::clear(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>>::Element,std::allocator<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>>::Element>>::__construct_one_at_end[abi:ne180100]<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>>::Element const&>(uint64_t a1, _DWORD *a2)
{
  uint64_t v4;
  _QWORD *result;

  v4 = *(_QWORD *)(a1 + 8);
  *(_DWORD *)v4 = *a2;
  *(_DWORD *)(v4 + 8) = a2[2];
  result = std::list<int>::list((_QWORD *)(v4 + 16), (uint64_t)(a2 + 4));
  *(_DWORD *)(v4 + 40) = a2[10];
  *(_QWORD *)(a1 + 8) = v4 + 48;
  return result;
}

void sub_1ADC2C28C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>>::Element,std::allocator<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>>::Element>>::__push_back_slow_path<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>>::Element const&>(uint64_t *a1, _DWORD *a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  _DWORD *v10;
  char *v11;
  uint64_t v12;
  _QWORD v14[2];
  char *v15;
  char *v16;
  uint64_t *v17;

  v3 = *a1;
  v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 4);
  v5 = v4 + 1;
  if (v4 + 1 > 0x555555555555555)
    std::vector<int>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 4);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x2AAAAAAAAAAAAAALL)
    v9 = 0x555555555555555;
  else
    v9 = v5;
  v17 = a1 + 2;
  if (v9)
    v10 = std::__allocate_at_least[abi:ne180100]<std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>(v7, v9);
  else
    v10 = 0;
  v11 = (char *)&v10[12 * v4];
  v14[0] = v10;
  v14[1] = v11;
  v15 = v11;
  v16 = (char *)&v10[12 * v9];
  *(_DWORD *)v11 = *a2;
  *((_DWORD *)v11 + 2) = a2[2];
  std::list<int>::list((_QWORD *)v11 + 2, (uint64_t)(a2 + 4));
  v10[12 * v4 + 10] = a2[10];
  v15 += 48;
  std::vector<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>>::Element,std::allocator<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>>::Element>>::__swap_out_circular_buffer(a1, v14);
  v12 = a1[1];
  std::__split_buffer<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,std::allocator<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element> &>::~__split_buffer((uint64_t)v14);
  return v12;
}

void sub_1ADC2C3A8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,std::allocator<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element> &>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>>::Element,std::allocator<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>>::Element>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>>::Element>,std::reverse_iterator<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>>::Element*>,std::reverse_iterator<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>>::Element*>,std::reverse_iterator<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>>::Element*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>>::Element>,std::reverse_iterator<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>>::Element*>,std::reverse_iterator<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>>::Element*>,std::reverse_iterator<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>>::Element*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v11;
  uint64_t v12;

  if (a3 != a5)
  {
    v11 = 0;
    do
    {
      v12 = a7 + v11;
      *(_DWORD *)(v12 - 48) = *(_DWORD *)(a3 + v11 - 48);
      *(_DWORD *)(v12 - 40) = *(_DWORD *)(a3 + v11 - 40);
      std::list<int>::list((_QWORD *)(a7 + v11 - 32), a3 + v11 - 32);
      *(_DWORD *)(v12 - 8) = *(_DWORD *)(a3 + v11 - 8);
      v11 -= 48;
    }
    while (a3 + v11 != a5);
  }
  return a6;
}

void sub_1ADC2C4C4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  if (v2)
  {
    v4 = v1 + 16;
    do
    {
      std::__list_imp<char *>::clear((_QWORD *)(v4 + v2));
      v2 += 48;
    }
    while (v2);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>>::Final@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  int *v6;
  int *v7;
  int v8;
  float v9;
  float v10;
  BOOL v11;
  float v12;
  BOOL v13;
  int v14;
  int *v15;
  _QWORD *v16;
  int v18;
  _QWORD v19[3];
  int v20;
  int v21;
  _QWORD v22[3];
  float v23;
  uint64_t v24;
  _QWORD v25[3];
  float v26;
  char v27;
  int v28;
  _QWORD v29[3];
  float v30;
  int v31;
  uint64_t v32[3];

  if ((fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::HasFinal(a1, a2) & 1) == 0)
  {
    v6 = (int *)(*(_QWORD *)(a1 + 168) + 48 * a2);
    v8 = *v6;
    v7 = v6 + 2;
    if (v8 == -1)
    {
      v28 = *v7;
      std::list<int>::list(v29, (uint64_t)(v7 + 2));
      v30 = *((float *)v7 + 8);
    }
    else
    {
      (*(void (**)(uint64_t *__return_ptr))(**(_QWORD **)(a1 + 136) + 32))(&v24);
      fst::Times<int,(fst::StringType)0>(v7, (uint64_t)&v24, (uint64_t)&v31);
      v9 = *((float *)v7 + 8);
      v10 = NAN;
      if (v9 != -INFINITY)
      {
        v10 = NAN;
        if (v26 != -INFINITY)
        {
          v10 = INFINITY;
          v11 = v26 == INFINITY || v9 == INFINITY;
          v12 = v9 + v26;
          if (!v11)
            v10 = v12;
        }
      }
      fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>::GallicWeight((uint64_t)&v28, &v31, v10);
      std::__list_imp<char *>::clear(v32);
      std::__list_imp<char *>::clear(v25);
    }
    LODWORD(v24) = v28;
    std::list<int>::list(v25, (uint64_t)v29);
    v26 = v30;
    if (v28)
      v13 = (unint64_t)(v29[2] + 1) >= 2;
    else
      v13 = 0;
    v14 = !v13;
    v27 = v14;
    if ((*(_BYTE *)(a1 + 148) & 1) == 0 || v14)
    {
      v21 = v28;
      v16 = v22;
      std::list<int>::list(v22, (uint64_t)v29);
      v23 = v30;
      fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>::SetFinal(a1, a2, &v21);
    }
    else
    {
      v15 = (int *)fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>::Zero();
      v18 = *v15;
      v16 = v19;
      std::list<int>::list(v19, (uint64_t)(v15 + 2));
      v20 = v15[8];
      fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>::SetFinal(a1, a2, &v18);
    }
    std::__list_imp<char *>::clear(v16);
    std::__list_imp<char *>::clear(v25);
    std::__list_imp<char *>::clear(v29);
  }
  return fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::Final(a1, a2, a3);
}

void sub_1ADC2C6FC(_Unwind_Exception *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;

  std::__list_imp<char *>::clear(v3);
  std::__list_imp<char *>::clear(v2);
  std::__list_imp<char *>::clear(v1);
  _Unwind_Resume(a1);
}

_QWORD *fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>::SetFinal(uint64_t a1, int a2, int *a3)
{
  char *MutableState;
  int v5;
  _QWORD *result;
  int v7;
  _QWORD v8[3];
  int v9;

  MutableState = fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>>>::GetMutableState(*(_QWORD *)(a1 + 120), a2);
  v7 = *a3;
  std::list<int>::list(v8, (uint64_t)(a3 + 2));
  v5 = a3[8];
  v9 = v5;
  *(_DWORD *)MutableState = v7;
  if (MutableState != (char *)&v7)
  {
    std::list<int>::__assign_with_sentinel[abi:ne180100]<std::__list_const_iterator<int,void *>,std::__list_const_iterator<int,void *>>((uint64_t *)MutableState + 1, v8[1], (uint64_t)v8);
    v5 = v9;
  }
  *((_DWORD *)MutableState + 8) = v5;
  result = std::__list_imp<char *>::clear(v8);
  *((_DWORD *)MutableState + 20) |= 9u;
  return result;
}

void sub_1ADC2C7F0(_Unwind_Exception *a1)
{
  _QWORD *v1;

  std::__list_imp<char *>::clear(v1);
  _Unwind_Resume(a1);
}

char *fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>>>::GetMutableState(uint64_t a1, int a2)
{
  char *MutableState;
  char *v4;
  int v5;
  unint64_t v6;

  MutableState = fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>>::GetMutableState(a1, a2);
  v4 = MutableState;
  if (*(_BYTE *)(a1 + 88))
  {
    v5 = *((_DWORD *)MutableState + 20);
    if ((v5 & 4) == 0)
    {
      *((_DWORD *)MutableState + 20) = v5 | 4;
      v6 = *((_QWORD *)MutableState + 8) - *((_QWORD *)MutableState + 7) + *(_QWORD *)(a1 + 112) + 88;
      *(_QWORD *)(a1 + 112) = v6;
      *(_BYTE *)(a1 + 104) = 1;
      if (v6 > *(_QWORD *)(a1 + 96))
        fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>>>::GC(a1, MutableState, 0, 0.666);
    }
  }
  return v4;
}

char *fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>>::GetMutableState(uint64_t a1, int a2)
{
  int v3;
  char *result;
  uint64_t v5;
  char *MutableState;

  v3 = *(_DWORD *)(a1 + 76);
  if (v3 == a2)
    return *(char **)(a1 + 80);
  if (!*(_BYTE *)(a1 + 72))
    return fst::VectorCacheStore<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>::GetMutableState(a1, a2 + 1);
  if (v3 == -1)
  {
    *(_DWORD *)(a1 + 76) = a2;
    MutableState = fst::VectorCacheStore<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>::GetMutableState(a1, 0);
    *(_QWORD *)(a1 + 80) = MutableState;
    *((_DWORD *)MutableState + 20) |= 4u;
    std::vector<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>::reserve((uint64_t *)MutableState + 7, 0x80uLL);
    return *(char **)(a1 + 80);
  }
  v5 = *(_QWORD *)(a1 + 80);
  if (*(_DWORD *)(v5 + 84))
  {
    *(_DWORD *)(v5 + 80) &= ~4u;
    *(_BYTE *)(a1 + 72) = 0;
    return fst::VectorCacheStore<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>::GetMutableState(a1, a2 + 1);
  }
  *(_DWORD *)(a1 + 76) = a2;
  fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>::Reset(v5);
  result = *(char **)(a1 + 80);
  *((_DWORD *)result + 20) |= 4u;
  return result;
}

void fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>>>::GC(uint64_t a1, char *a2, char a3, float a4)
{
  fst *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  unint64_t v16;
  uint64_t v17;
  int v18;
  int v19;
  char *MutableState;
  unint64_t v21;
  int v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  BOOL v26;
  fst *v27;
  _QWORD *v28;
  fst *v29;
  _QWORD *v30;
  _QWORD *v31;
  _QWORD *v32;
  _QWORD *v33;
  _QWORD *v34;
  _QWORD *v35;
  _QWORD *v36;
  void *v37[2];
  char v38;
  char v39;
  char v40;
  void *__p[2];
  char v42;

  if (*(_BYTE *)(a1 + 104))
  {
    if (FLAGS_v >= 2)
    {
      std::string::basic_string[abi:ne180100]<0>(__p, "INFO");
      v8 = fst::LogMessage::LogMessage((fst *)v37, (uint64_t)__p);
      v9 = (_QWORD *)fst::cerr(v8);
      v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"GCCacheStore: Enter GC: object = ", 33);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"(", 1);
      v11 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"), free recently cached = ", 26);
      v12 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)", cache size = ", 15);
      v13 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)", cache frac = ", 15);
      v14 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)", cache limit = ", 16);
      v15 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"\n", 1);
      fst::LogMessage::~LogMessage((fst::LogMessage *)v37);
      if (v42 < 0)
        operator delete(__p[0]);
    }
    v16 = (unint64_t)(float)((float)*(unint64_t *)(a1 + 96) * a4);
    v17 = *(_QWORD *)(a1 + 40);
    *(_QWORD *)(a1 + 56) = v17;
    while (v17 != a1 + 32)
    {
      v18 = *(_DWORD *)(v17 + 16);
      if (v18)
        v19 = v18 - 1;
      else
        v19 = *(_DWORD *)(a1 + 76);
      MutableState = fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>>::GetMutableState(a1, v19);
      v21 = *(_QWORD *)(a1 + 112);
      if (v21 > v16 && !*((_DWORD *)MutableState + 21))
      {
        if ((a3 & 1) != 0)
        {
          if (MutableState != a2)
          {
            v22 = *((_DWORD *)MutableState + 20);
LABEL_19:
            if ((v22 & 4) != 0)
            {
              v23 = *((_QWORD *)MutableState + 8) - *((_QWORD *)MutableState + 7) + 88;
              FstCheck(v23 <= v21, "(size) <= (cache_size_)", "../libquasar/libkaldi/tools/openfst/src/include/fst/cache.h");
              *(_QWORD *)(a1 + 112) -= v23;
            }
            fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>>::Delete((_QWORD *)a1);
            v17 = *(_QWORD *)(a1 + 56);
            continue;
          }
        }
        else
        {
          v22 = *((_DWORD *)MutableState + 20);
          if ((v22 & 8) == 0 && MutableState != a2)
            goto LABEL_19;
        }
      }
      *((_DWORD *)MutableState + 20) &= ~8u;
      v17 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
      *(_QWORD *)(a1 + 56) = v17;
    }
    if ((a3 & 1) != 0 || *(_QWORD *)(a1 + 112) <= v16)
    {
      v24 = *(_QWORD *)(a1 + 112);
      if (v16)
      {
        if (v24 > v16)
        {
          v25 = *(_QWORD *)(a1 + 96);
          do
          {
            v25 *= 2;
            v26 = v24 > 2 * v16;
            v16 *= 2;
          }
          while (v26);
          *(_QWORD *)(a1 + 96) = v25;
        }
      }
      else if (v24)
      {
        if (FLAGS_fst_error_fatal)
          std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
        else
          std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
        v27 = fst::LogMessage::LogMessage((fst *)&v40, (uint64_t)__p);
        v28 = (_QWORD *)fst::cerr(v27);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)"GCCacheStore:GC: Unable to free all cached states", 49);
        fst::LogMessage::~LogMessage((fst::LogMessage *)&v40);
        if (v42 < 0)
          operator delete(__p[0]);
      }
    }
    else
    {
      fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>>>::GC(a1, a2, 1, a4);
    }
    if (FLAGS_v >= 2)
    {
      std::string::basic_string[abi:ne180100]<0>(v37, "INFO");
      v29 = fst::LogMessage::LogMessage((fst *)&v39, (uint64_t)v37);
      v30 = (_QWORD *)fst::cerr(v29);
      v31 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)"GCCacheStore: Exit GC: object = ", 32);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)"(", 1);
      v32 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)"), free recently cached = ", 26);
      v33 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, (uint64_t)", cache size = ", 15);
      v34 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)", cache frac = ", 15);
      v35 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)", cache limit = ", 16);
      v36 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)"\n", 1);
      fst::LogMessage::~LogMessage((fst::LogMessage *)&v39);
      if (v38 < 0)
        operator delete(v37[0]);
    }
  }
}

void sub_1ADC2CD24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, int a16, __int16 a17, char a18, char a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  fst::LogMessage::~LogMessage((fst::LogMessage *)&a19);
  if (a25 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

char *fst::VectorCacheStore<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>::GetMutableState(uint64_t a1, int a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  _DWORD *v9;
  _DWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v14;

  v4 = a2;
  v6 = *(_QWORD *)(a1 + 8);
  v7 = *(_QWORD *)(a1 + 16);
  v5 = a1 + 8;
  if (a2 >= (unint64_t)((v7 - v6) >> 3))
  {
    v14 = 0;
    std::vector<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> *,std::allocator<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> *>>::resize(v5, a2 + 1, &v14);
  }
  else
  {
    v8 = *(char **)(v6 + 8 * a2);
    if (v8)
      return v8;
  }
  v8 = (char *)operator new(0x58uLL);
  v9 = (_DWORD *)fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>::Zero();
  *(_DWORD *)v8 = *v9;
  std::list<int>::list((_QWORD *)v8 + 1, (uint64_t)(v9 + 2));
  *((_DWORD *)v8 + 8) = v9[8];
  *(_OWORD *)(v8 + 40) = 0u;
  *(_OWORD *)(v8 + 56) = 0u;
  *(_OWORD *)(v8 + 72) = 0u;
  *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * v4) = v8;
  if (*(_BYTE *)a1)
  {
    v10 = operator new(0x18uLL);
    v10[4] = a2;
    v12 = *(_QWORD *)(a1 + 32);
    v11 = (_QWORD *)(a1 + 32);
    *(_QWORD *)v10 = v12;
    *((_QWORD *)v10 + 1) = v11;
    *(_QWORD *)(v12 + 8) = v10;
    *v11 = v10;
    ++v11[2];
  }
  return v8;
}

uint64_t fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>::Reset(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  result = fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>::Zero();
  v3 = result;
  *(_DWORD *)a1 = *(_DWORD *)result;
  if (result != a1)
    result = (uint64_t)std::list<int>::__assign_with_sentinel[abi:ne180100]<std::__list_const_iterator<int,void *>,std::__list_const_iterator<int,void *>>((uint64_t *)(a1 + 8), *(_QWORD *)(result + 16), result + 8);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(v3 + 32);
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  v5 = *(_QWORD *)(a1 + 56);
  v4 = *(_QWORD *)(a1 + 64);
  if (v4 != v5)
  {
    do
    {
      v6 = v4 - 56;
      result = (uint64_t)std::__list_imp<char *>::clear((_QWORD *)(v4 - 40));
      v4 = v6;
    }
    while (v6 != v5);
  }
  *(_QWORD *)(a1 + 64) = v5;
  return result;
}

uint64_t fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>>::NumArcs(uint64_t a1, int a2)
{
  uint64_t v4;
  uint64_t v5;

  if ((fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::HasArcs(a1, a2) & 1) == 0)fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>>::Expand(a1, a2);
  v4 = *(_QWORD *)(a1 + 120);
  if (*(_DWORD *)(v4 + 76) == a2)
    v5 = v4 + 80;
  else
    v5 = *(_QWORD *)(v4 + 8) + 8 * (a2 + 1);
  return 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(*(_QWORD *)v5 + 64) - *(_QWORD *)(*(_QWORD *)v5 + 56)) >> 3);
}

_QWORD *fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>>::Expand(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  float v7;
  float v8;
  int v11;
  int v12;
  int State;
  uint64_t v14;
  uint64_t *v15;
  uint64_t *v16;
  int v17;
  int *v18;
  uint64_t v19;
  uint64_t *MutableState;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t *v26;
  BOOL v27;
  int v28;
  int v29;
  uint64_t v30;
  float v31;
  uint64_t v33;
  BOOL v34;
  char v35;
  int v36;
  uint64_t *v37;
  float v39;
  float v40;
  int v42;
  _QWORD v43[3];
  float v44;
  int v45;
  _QWORD v46[3];
  float v47;
  int v48;
  _QWORD v49[3];
  float v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD v53[3];
  float v54;
  int v55;
  int v56;
  _QWORD v57[3];
  float v58;
  uint64_t v59;
  uint64_t v60;
  _QWORD v61[2];
  float v62;
  int v63;
  _QWORD v64[4];
  int v65;
  uint64_t v66;
  int v67;
  int v68;
  _QWORD v69[3];
  int v70;
  float v71;
  _QWORD v72[3];
  int v73;
  char v74;
  int v75;
  _QWORD v76[3];
  int v77;
  uint64_t v78;
  _QWORD v79[2];
  _DWORD *v80;
  unint64_t v81;
  int v82;
  int v83;
  _QWORD v84[3];
  float v85;

  v3 = *(_QWORD *)(a1 + 168) + 48 * a2;
  v82 = *(_DWORD *)v3;
  v83 = *(_DWORD *)(v3 + 8);
  std::list<int>::list(v84, v3 + 16);
  v85 = *(float *)(v3 + 40);
  if (v82 == -1)
    goto LABEL_33;
  v4 = *(_QWORD *)(a1 + 136);
  v81 = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v4 + 136))(v4);
  v5 = &v66;
  while (1)
  {
    if (!v78)
    {
      if (v81 >= v79[1])
        goto LABEL_31;
      goto LABEL_8;
    }
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v78 + 24))(v78))
      break;
    if (v78)
    {
      v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v78 + 32))(v78);
      goto LABEL_9;
    }
LABEL_8:
    v6 = v79[0] + 56 * v81;
LABEL_9:
    fst::Times<int,(fst::StringType)0>(&v83, v6 + 8, (uint64_t)&v59);
    v7 = NAN;
    if (v85 != -INFINITY)
    {
      v8 = *(float *)(v6 + 40);
      v7 = NAN;
      if (v8 != -INFINITY)
      {
        v7 = INFINITY;
        if (v8 != INFINITY && v85 != INFINITY)
          v7 = v85 + v8;
      }
    }
    fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>::GallicWeight((uint64_t)&v75, (int *)&v59, v7);
    std::__list_imp<char *>::clear(&v60);
    v71 = *(float *)&v75;
    std::list<int>::list(v72, (uint64_t)v76);
    v73 = v77;
    v11 = *(float *)&v75 == 0.0 || (unint64_t)(v76[2] + 1) < 2;
    v74 = v11;
    if ((*(_BYTE *)(a1 + 148) & 2) == 0 || v11)
    {
      v16 = v5;
      v17 = *(_DWORD *)(v6 + 48);
      v18 = (int *)fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>::One();
      v68 = *v18;
      std::list<int>::list(v69, (uint64_t)(v18 + 2));
      v70 = v18[8];
      LODWORD(v59) = v17;
      LODWORD(v60) = v68;
      std::list<int>::list(v61, (uint64_t)v69);
      v63 = v70;
      LODWORD(v18) = fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>>::FindState(a1, (int *)&v59);
      v5 = v16;
      std::__list_imp<char *>::clear(v61);
      std::__list_imp<char *>::clear(v69);
      v19 = *(_QWORD *)v6;
      v65 = v75;
      std::list<int>::list(v16, (uint64_t)v76);
      v67 = v77;
      v59 = v19;
      LODWORD(v60) = v65;
      std::list<int>::list(v61, (uint64_t)v16);
      v63 = v67;
      LODWORD(v64[0]) = (_DWORD)v18;
      MutableState = (uint64_t *)fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>>>::GetMutableState(*(_QWORD *)(a1 + 120), a2);
      fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>::PushArc(MutableState, (uint64_t)&v59);
      std::__list_imp<char *>::clear(v61);
      std::__list_imp<char *>::clear(v16);
    }
    else
    {
      fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>::Value((int *)&v71, (uint64_t)&v59);
      v12 = *(_DWORD *)(v6 + 48);
      fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>::Quantize((float *)&v63, (uint64_t)&v56, *(float *)(a1 + 144));
      LODWORD(v51) = v12;
      LODWORD(v52) = v56;
      std::list<int>::list(v53, (uint64_t)v57);
      v54 = v58;
      State = fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>>::FindState(a1, (int *)&v51);
      std::__list_imp<char *>::clear(v53);
      std::__list_imp<char *>::clear(v57);
      v14 = *(_QWORD *)v6;
      v48 = v59;
      std::list<int>::list(v49, (uint64_t)&v60);
      v50 = v62;
      v51 = v14;
      LODWORD(v52) = v48;
      std::list<int>::list(v53, (uint64_t)v49);
      v54 = v50;
      v55 = State;
      v15 = (uint64_t *)fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>>>::GetMutableState(*(_QWORD *)(a1 + 120), a2);
      fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>::PushArc(v15, (uint64_t)&v51);
      std::__list_imp<char *>::clear(v53);
      std::__list_imp<char *>::clear(v49);
      std::__list_imp<char *>::clear(v64);
      std::__list_imp<char *>::clear(&v60);
      v74 = 1;
    }
    std::__list_imp<char *>::clear(v72);
    std::__list_imp<char *>::clear(v76);
    if (v78)
      (*(void (**)(uint64_t))(*(_QWORD *)v78 + 40))(v78);
    else
      ++v81;
  }
  if (v78)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v78 + 8))(v78);
    goto LABEL_33;
  }
LABEL_31:
  if (v80)
    --*v80;
LABEL_33:
  if ((*(_BYTE *)(a1 + 148) & 1) != 0)
  {
    if (v82 == -1)
      goto LABEL_65;
    (*(void (**)(uint64_t *__return_ptr))(**(_QWORD **)(a1 + 136) + 32))(&v59);
    v21 = fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>::Zero();
    v22 = (_DWORD)v59 ? v61[1] + 1 : 0;
    v23 = *(_DWORD *)v21 ? *(_QWORD *)(v21 + 24) + 1 : 0;
    if (v22 == v23)
    {
      v24 = 0;
      v25 = v61[0];
      v26 = (uint64_t *)(v21 + 16);
      if ((_DWORD)v59)
        v27 = (_DWORD)v59 == *(_DWORD *)v21;
      else
        v27 = 0;
      v28 = !v27;
      v29 = v28 ^ 1;
      while (1)
      {
        v30 = *v26;
        if ((v24 & 1) == 0 && !v29)
          break;
        if ((uint64_t *)v25 == &v60)
          goto LABEL_77;
        if (*(_DWORD *)(v25 + 16) != *(_DWORD *)(v30 + 16))
          goto LABEL_55;
        v25 = *(_QWORD *)(v25 + 8);
        v26 = (uint64_t *)(v30 + 8);
        v24 = 1;
      }
      if ((_DWORD)v59)
        goto LABEL_55;
LABEL_77:
      *(float *)&v51 = v62;
      v71 = 0.0;
      v71 = *(float *)(v21 + 32);
      v39 = v62;
      v40 = v71;
      std::__list_imp<char *>::clear(&v60);
      if (v39 == v40)
        goto LABEL_76;
    }
    else
    {
LABEL_55:
      std::__list_imp<char *>::clear(&v60);
    }
    if (v82 == -1)
    {
LABEL_65:
      LODWORD(v78) = v83;
      std::list<int>::list(v79, (uint64_t)v84);
      *(float *)&v81 = v85;
    }
    else
    {
      (*(void (**)(uint64_t *__return_ptr))(**(_QWORD **)(a1 + 136) + 32))(&v59);
      fst::Times<int,(fst::StringType)0>(&v83, (uint64_t)&v59, (uint64_t)&v51);
      v31 = NAN;
      if (v85 != -INFINITY)
      {
        v31 = NAN;
        if (v62 != -INFINITY)
        {
          v31 = INFINITY;
          if (v62 != INFINITY && v85 != INFINITY)
            v31 = v85 + v62;
        }
      }
      fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>::GallicWeight((uint64_t)&v78, (int *)&v51, v31);
      std::__list_imp<char *>::clear(&v52);
      std::__list_imp<char *>::clear(&v60);
    }
    v33 = *(_QWORD *)(a1 + 152);
    v71 = *(float *)&v78;
    std::list<int>::list(v72, (uint64_t)v79);
    v73 = v81;
    if ((_DWORD)v78)
      v34 = (unint64_t)v80 + 1 >= 2;
    else
      v34 = 0;
    v35 = !v34;
    v74 = v35;
    if (v34)
    {
      fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>::Value((int *)&v71, (uint64_t)&v59);
      fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>::Quantize((float *)&v63, (uint64_t)&v45, *(float *)(a1 + 144));
      LODWORD(v51) = -1;
      LODWORD(v52) = v45;
      std::list<int>::list(v53, (uint64_t)v46);
      v54 = v47;
      v36 = fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>>::FindState(a1, (int *)&v51);
      std::__list_imp<char *>::clear(v53);
      std::__list_imp<char *>::clear(v46);
      v42 = v59;
      std::list<int>::list(v43, (uint64_t)&v60);
      v44 = v62;
      v51 = v33;
      LODWORD(v52) = v42;
      std::list<int>::list(v53, (uint64_t)v43);
      v54 = v44;
      v55 = v36;
      v37 = (uint64_t *)fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>>>::GetMutableState(*(_QWORD *)(a1 + 120), a2);
      fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>::PushArc(v37, (uint64_t)&v51);
      std::__list_imp<char *>::clear(v53);
      std::__list_imp<char *>::clear(v43);
      std::__list_imp<char *>::clear(v64);
      std::__list_imp<char *>::clear(&v60);
      v74 = 1;
    }
    std::__list_imp<char *>::clear(v72);
    std::__list_imp<char *>::clear(v79);
  }
LABEL_76:
  fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>::SetArcs(a1, a2);
  return std::__list_imp<char *>::clear(v84);
}

void sub_1ADC2D70C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47)
{
  uint64_t v47;
  _QWORD *v48;

  std::__list_imp<char *>::clear((_QWORD *)(v47 + 8));
  std::__list_imp<char *>::clear(&a47);
  std::__list_imp<char *>::clear(v48);
  _Unwind_Resume(a1);
}

_QWORD *fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>::Value@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  BOOL v4;
  char v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v17;
  _QWORD v18[2];
  uint64_t v19;
  int v20;
  _QWORD v21[4];
  int v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  int v30;
  _QWORD v31[2];
  uint64_t v32;
  int v33;
  _QWORD v34[4];
  int v35;
  _QWORD v36[3];
  char v37;

  v35 = *a1;
  std::list<int>::list(v36, (uint64_t)(a1 + 2));
  if (*a1)
    v4 = (unint64_t)(*((_QWORD *)a1 + 3) + 1) >= 2;
  else
    v4 = 0;
  v5 = !v4;
  v37 = v5;
  fst::StringFactor<int,(fst::StringType)0>::Value((uint64_t)&v35, (uint64_t)&v22);
  v30 = v22;
  v31[0] = v31;
  v31[1] = v31;
  v32 = 0;
  v6 = v25;
  if (v25)
  {
    v8 = v23;
    v7 = v24;
    v9 = *v24;
    *(_QWORD *)(v9 + 8) = *(_QWORD *)(v23 + 8);
    **(_QWORD **)(v8 + 8) = v9;
    v10 = v31[0];
    *(_QWORD *)(v31[0] + 8) = v7;
    *v7 = v10;
    v31[0] = v8;
    *(_QWORD *)(v8 + 8) = v31;
    v32 = v6;
    v25 = 0;
  }
  fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>::GallicWeight((uint64_t)&v33, &v30, *((float *)a1 + 8));
  std::__list_imp<char *>::clear(v31);
  std::__list_imp<char *>::clear(&v27);
  std::__list_imp<char *>::clear(&v23);
  fst::StringFactor<int,(fst::StringType)0>::Value((uint64_t)&v35, (uint64_t)&v22);
  v17 = v26;
  v18[0] = v18;
  v18[1] = v18;
  v19 = 0;
  v11 = v29;
  if (v29)
  {
    v13 = v27;
    v12 = v28;
    v14 = *v28;
    *(_QWORD *)(v14 + 8) = *(_QWORD *)(v27 + 8);
    **(_QWORD **)(v13 + 8) = v14;
    v15 = v18[0];
    *(_QWORD *)(v18[0] + 8) = v12;
    *v12 = v15;
    v18[0] = v13;
    *(_QWORD *)(v13 + 8) = v18;
    v19 = v11;
    v29 = 0;
  }
  fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>::GallicWeight((uint64_t)&v20, &v17, 0.0);
  std::__list_imp<char *>::clear(v18);
  std::__list_imp<char *>::clear(&v27);
  std::__list_imp<char *>::clear(&v23);
  std::pair<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>,fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>>::pair[abi:ne180100]<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>&,fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>&,0>(a2, &v33, &v20);
  std::__list_imp<char *>::clear(v21);
  std::__list_imp<char *>::clear(v34);
  return std::__list_imp<char *>::clear(v36);
}

void sub_1ADC2DAB4(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  std::__list_imp<char *>::clear((_QWORD *)(v2 + 8));
  std::__list_imp<char *>::clear((_QWORD *)(v3 - 120));
  std::__list_imp<char *>::clear(v1);
  _Unwind_Resume(a1);
}

void fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>::SetArcs(uint64_t a1, int a2)
{
  char *MutableState;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int v8;
  int *v9;
  int v10;
  int v11;

  MutableState = fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>>>::GetMutableState(*(_QWORD *)(a1 + 120), a2);
  fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>>>::SetArcs(*(_QWORD *)(a1 + 120), (uint64_t)MutableState);
  v5 = *((_QWORD *)MutableState + 7);
  v6 = *((_QWORD *)MutableState + 8) - v5;
  if (v6)
  {
    v7 = v6 / 56;
    v8 = *(_DWORD *)(a1 + 68);
    if (v7 <= 1)
      v7 = 1;
    v9 = (int *)(v5 + 48);
    do
    {
      v11 = *v9;
      v9 += 14;
      v10 = v11;
      if (v11 >= v8)
      {
        v8 = v10 + 1;
        *(_DWORD *)(a1 + 68) = v10 + 1;
      }
      --v7;
    }
    while (v7);
  }
  fst::CacheBaseImpl<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>,fst::DefaultCacheStore<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::SetExpandedState(a1, a2);
  *((_DWORD *)MutableState + 20) |= 0xAu;
}

uint64_t fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>::PushArc(uint64_t *a1, uint64_t a2)
{
  uint64_t *v3;
  unint64_t v4;
  uint64_t result;

  v3 = a1 + 7;
  v4 = a1[8];
  if (v4 >= a1[9])
  {
    result = std::vector<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>::__push_back_slow_path<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0> const&>(v3, a2);
  }
  else
  {
    std::vector<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>::__construct_one_at_end[abi:ne180100]<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0> const&>((uint64_t)v3, a2);
    result = v4 + 56;
  }
  a1[8] = result;
  return result;
}

_QWORD *fst::StringFactor<int,(fst::StringType)0>::Value@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  _QWORD *v7;
  int v8;
  _DWORD *v9;
  int v11;
  _QWORD v12[2];
  uint64_t v13;
  int v14;
  _QWORD v15[3];

  v3 = a1 + 8;
  v4 = *(_QWORD *)(a1 + 16);
  fst::StringWeight<int,(fst::StringType)0>::StringWeight((uint64_t)&v14, *(_DWORD *)a1);
  v12[0] = v12;
  v12[1] = v12;
  v13 = 0;
  v11 = 0;
  if (v4 != v3)
  {
    v5 = 0;
    v6 = 0;
    v7 = v12;
    do
    {
      v8 = *(_DWORD *)(v4 + 16);
      if (v5)
      {
        v9 = operator new(0x18uLL);
        v9[4] = v8;
        *(_QWORD *)v9 = v7;
        *((_QWORD *)v9 + 1) = v12;
        v7[1] = v9;
        ++v6;
        v7 = v9;
        v12[0] = v9;
        v13 = v6;
      }
      else
      {
        v11 = *(_DWORD *)(v4 + 16);
        v5 = v8;
      }
      v4 = *(_QWORD *)(v4 + 8);
    }
    while (v4 != v3);
  }
  std::pair<fst::StringWeight<int,(fst::StringType)0>,fst::StringWeight<int,(fst::StringType)0>>::pair[abi:ne180100]<fst::StringWeight<int,(fst::StringType)0>&,fst::StringWeight<int,(fst::StringType)0>&,0>(a2, &v14, &v11);
  std::__list_imp<char *>::clear(v12);
  return std::__list_imp<char *>::clear(v15);
}

void sub_1ADC2DCFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  _QWORD *v6;
  va_list va;

  va_start(va, a6);
  std::__list_imp<char *>::clear(v6);
  std::__list_imp<char *>::clear((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t std::pair<fst::StringWeight<int,(fst::StringType)0>,fst::StringWeight<int,(fst::StringType)0>>::pair[abi:ne180100]<fst::StringWeight<int,(fst::StringType)0>&,fst::StringWeight<int,(fst::StringType)0>&,0>(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  *(_DWORD *)a1 = *a2;
  std::list<int>::list((_QWORD *)(a1 + 8), (uint64_t)(a2 + 2));
  *(_DWORD *)(a1 + 32) = *a3;
  std::list<int>::list((_QWORD *)(a1 + 40), (uint64_t)(a3 + 2));
  return a1;
}

void sub_1ADC2DD74(_Unwind_Exception *a1)
{
  _QWORD *v1;

  std::__list_imp<char *>::clear(v1);
  _Unwind_Resume(a1);
}

uint64_t std::pair<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>,fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>>::pair[abi:ne180100]<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>&,fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>&,0>(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  *(_DWORD *)a1 = *a2;
  std::list<int>::list((_QWORD *)(a1 + 8), (uint64_t)(a2 + 2));
  *(_DWORD *)(a1 + 32) = a2[8];
  *(_DWORD *)(a1 + 40) = *a3;
  std::list<int>::list((_QWORD *)(a1 + 48), (uint64_t)(a3 + 2));
  *(_DWORD *)(a1 + 72) = a3[8];
  return a1;
}

void sub_1ADC2DDF0(_Unwind_Exception *a1)
{
  _QWORD *v1;

  std::__list_imp<char *>::clear(v1);
  _Unwind_Resume(a1);
}

void fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>>>::SetArcs(uint64_t a1, uint64_t a2)
{
  unint64_t v4;

  fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::SetArcs((_QWORD *)a2);
  if (*(_BYTE *)(a1 + 104) && (*(_BYTE *)(a2 + 80) & 4) != 0)
  {
    v4 = *(_QWORD *)(a2 + 64) - *(_QWORD *)(a2 + 56) + *(_QWORD *)(a1 + 112);
    *(_QWORD *)(a1 + 112) = v4;
    if (v4 > *(_QWORD *)(a1 + 96))
      fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>>>::GC(a1, (char *)a2, 0, 0.666);
  }
}

uint64_t fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>>::NumInputEpsilons(uint64_t a1, int a2)
{
  uint64_t v4;
  uint64_t v5;

  if ((fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::HasArcs(a1, a2) & 1) == 0)fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>>::Expand(a1, a2);
  v4 = *(_QWORD *)(a1 + 120);
  if (*(_DWORD *)(v4 + 76) == a2)
    v5 = v4 + 80;
  else
    v5 = *(_QWORD *)(v4 + 8) + 8 * (a2 + 1);
  return *(_QWORD *)(*(_QWORD *)v5 + 40);
}

uint64_t fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>>::NumOutputEpsilons(uint64_t a1, int a2)
{
  uint64_t v4;
  uint64_t v5;

  if ((fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::HasArcs(a1, a2) & 1) == 0)fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>>::Expand(a1, a2);
  v4 = *(_QWORD *)(a1 + 120);
  if (*(_DWORD *)(v4 + 76) == a2)
    v5 = v4 + 80;
  else
    v5 = *(_QWORD *)(v4 + 8) + 8 * (a2 + 1);
  return *(_QWORD *)(*(_QWORD *)v5 + 48);
}

_QWORD *fst::ImplToFst<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>>,fst::Fst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>::ImplToFst(_QWORD *a1, uint64_t a2, int a3)
{
  uint64_t v5;
  uint64_t v6;

  *a1 = &unk_1E5D26EF8;
  if (a3)
  {
    v5 = operator new();
    fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>>::FactorWeightFstImpl(v5, *(_QWORD *)(a2 + 8));
    a1[1] = v5;
  }
  else
  {
    v6 = *(_QWORD *)(a2 + 8);
    a1[1] = v6;
    ++*(_DWORD *)(v6 + 56);
  }
  return a1;
}

void sub_1ADC2DFBC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10F3C40B21EFC33);
  _Unwind_Resume(a1);
}

uint64_t fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>>::FactorWeightFstImpl(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  int v6;
  __int16 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  std::string __str;

  *(_QWORD *)fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>::CacheBaseImpl(a1, a2, 0) = &unk_1E5D21968;
  v4 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a2 + 136) + 88))(*(_QWORD *)(a2 + 136), 1);
  v5 = *(_DWORD *)(a2 + 144);
  *(_QWORD *)(a1 + 148) = *(_QWORD *)(a2 + 148);
  v6 = *(_DWORD *)(a2 + 156);
  v7 = *(_WORD *)(a2 + 160);
  *(_OWORD *)(a1 + 168) = 0u;
  *(_QWORD *)(a1 + 136) = v4;
  *(_DWORD *)(a1 + 144) = v5;
  *(_DWORD *)(a1 + 156) = v6;
  *(_WORD *)(a1 + 160) = v7;
  *(_QWORD *)(a1 + 216) = 0;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_DWORD *)(a1 + 224) = 1065353216;
  *(_QWORD *)(a1 + 232) = 0;
  *(_QWORD *)(a1 + 240) = 0;
  *(_QWORD *)(a1 + 248) = 0;
  std::string::basic_string[abi:ne180100]<0>(&__str, "factor_weight");
  std::string::operator=((std::string *)(a1 + 16), &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a1 + 8) & 0xFFFFC0000000FFFFLL | (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2) & 0x3FFFFFFF0004;
  v8 = *(_QWORD *)(a2 + 40);
  v9 = *(_QWORD *)(a1 + 40);
  if (v9 != v8)
  {
    if (v9)
      (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
    if (v8)
      v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 16))(v8);
    else
      v10 = 0;
    *(_QWORD *)(a1 + 40) = v10;
  }
  v11 = *(_QWORD *)(a2 + 48);
  v12 = *(_QWORD *)(a1 + 48);
  if (v12 != v11)
  {
    if (v12)
      (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
    if (v11)
      v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 16))(v11);
    else
      v13 = 0;
    *(_QWORD *)(a1 + 48) = v13;
  }
  return a1;
}

void sub_1ADC2E168(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  _QWORD *v15;
  void *v16;
  void **v17;
  void *v19;

  if (a15 < 0)
    operator delete(__p);
  v19 = *v17;
  if (*v17)
  {
    v15[30] = v19;
    operator delete(v19);
  }
  std::__hash_table<std::__hash_value_type<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,int>,std::__unordered_map_hasher<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,std::__hash_value_type<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,int>,fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::ElementKey,fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::ElementEqual,true>,std::__unordered_map_equal<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,std::__hash_value_type<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,int>,fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::ElementEqual,fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::ElementKey,true>,std::allocator<std::__hash_value_type<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,int>>>::~__hash_table((uint64_t)v16 + 24);
  __p = v16;
  std::vector<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,std::allocator<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>::~CacheBaseImpl(v15);
  _Unwind_Resume(a1);
}

uint64_t fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>::CacheBaseImpl(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  char v9;
  uint64_t v10;
  __int128 v11;
  char v13[8];
  unint64_t v14;

  *(_QWORD *)a1 = &unk_1E5D229E8;
  *(_QWORD *)(a1 + 8) = 0;
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 16), "null");
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 56) = 1;
  *(_QWORD *)a1 = &unk_1E5D1B8A8;
  *(_BYTE *)(a1 + 60) = 0;
  *(_DWORD *)(a1 + 64) = -1;
  *(_OWORD *)(a1 + 68) = 0u;
  *(_OWORD *)(a1 + 84) = 0u;
  *(_DWORD *)(a1 + 100) = -1;
  *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  v6 = operator new();
  v7 = *(_QWORD *)(a1 + 112);
  v13[0] = *(_BYTE *)(a1 + 104);
  v14 = v7;
  fst::VectorCacheStore<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>::VectorCacheStore((_QWORD *)v6, v13);
  v8 = v14;
  *(_BYTE *)(v6 + 72) = v14 == 0;
  *(_DWORD *)(v6 + 76) = -1;
  *(_QWORD *)(v6 + 80) = 0;
  *(_BYTE *)(v6 + 88) = v13[0];
  if (v8 <= 0x1FA0)
    v8 = 8096;
  *(_QWORD *)(v6 + 96) = v8;
  *(_BYTE *)(v6 + 104) = 0;
  *(_QWORD *)(v6 + 112) = 0;
  *(_QWORD *)(a1 + 120) = v6;
  if (*(_BYTE *)(a2 + 128))
    v9 = 1;
  else
    v9 = a3 ^ 1;
  *(_BYTE *)(a1 + 128) = v9;
  if (((a3 ^ 1) & 1) == 0)
  {
    v10 = *(_QWORD *)(a2 + 120);
    fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>>::operator=(v6, v10);
    v11 = *(_OWORD *)(v10 + 104);
    *(_OWORD *)(v6 + 88) = *(_OWORD *)(v10 + 88);
    *(_OWORD *)(v6 + 104) = v11;
    *(_BYTE *)(a1 + 60) = *(_BYTE *)(a2 + 60);
    *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
    std::vector<BOOL>::operator=((void **)(a1 + 72), a2 + 72);
    *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  }
  return a1;
}

void sub_1ADC2E340(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;
  uint64_t v3;

  MEMORY[0x1AF44D190](v3, 0x10A0C407A9BBF1FLL);
  if (*v2)
    operator delete(*v2);
  fst::FstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>::~FstImpl(v1);
  _Unwind_Resume(a1);
}

uint64_t fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>>::operator=(uint64_t a1, uint64_t a2)
{
  char *MutableState;

  if (a1 != a2)
  {
    fst::VectorCacheStore<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>::CopyStates((_QWORD *)a1, a2);
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(a1 + 40);
    *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
    *(_DWORD *)(a1 + 76) = *(_DWORD *)(a2 + 76);
    if (*(_DWORD *)(a2 + 76) == -1)
      MutableState = 0;
    else
      MutableState = fst::VectorCacheStore<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>::GetMutableState(a1, 0);
    *(_QWORD *)(a1 + 80) = MutableState;
  }
  return a1;
}

void fst::VectorCacheStore<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>::CopyStates(_QWORD *a1, uint64_t a2)
{
  char **v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  void *v8;
  _DWORD *v9;
  uint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  char *v19;
  char *v20;
  char *v21;
  uint64_t v22;

  fst::VectorCacheStore<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>::Clear(a1);
  v4 = (char **)(a1 + 1);
  std::vector<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> *,std::allocator<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> *>>::reserve((void **)a1 + 1, (uint64_t)(*(_QWORD *)(a2 + 16) - *(_QWORD *)(a2 + 8)) >> 3);
  v5 = *(_QWORD *)(a2 + 8);
  if (*(_QWORD *)(a2 + 16) != v5)
  {
    v6 = 0;
    do
    {
      v7 = *(_QWORD *)(v5 + 8 * v6);
      if (v7)
      {
        v8 = operator new(0x58uLL);
        fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>::CacheState((uint64_t)v8, v7);
        if (*(_BYTE *)a1)
        {
          v9 = operator new(0x18uLL);
          v9[4] = v6;
          v10 = a1[4];
          *(_QWORD *)v9 = v10;
          *((_QWORD *)v9 + 1) = a1 + 4;
          *(_QWORD *)(v10 + 8) = v9;
          a1[4] = v9;
          ++a1[6];
        }
      }
      else
      {
        v8 = 0;
      }
      v12 = (_QWORD *)a1[2];
      v11 = a1[3];
      if ((unint64_t)v12 >= v11)
      {
        v14 = ((char *)v12 - *v4) >> 3;
        if ((unint64_t)(v14 + 1) >> 61)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v15 = v11 - (_QWORD)*v4;
        v16 = v15 >> 2;
        if (v15 >> 2 <= (unint64_t)(v14 + 1))
          v16 = v14 + 1;
        if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF8)
          v17 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v17 = v16;
        if (v17)
          v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(a1 + 3), v17);
        else
          v18 = 0;
        v19 = &v18[8 * v14];
        *(_QWORD *)v19 = v8;
        v13 = v19 + 8;
        v21 = (char *)a1[1];
        v20 = (char *)a1[2];
        if (v20 != v21)
        {
          do
          {
            v22 = *((_QWORD *)v20 - 1);
            v20 -= 8;
            *((_QWORD *)v19 - 1) = v22;
            v19 -= 8;
          }
          while (v20 != v21);
          v20 = *v4;
        }
        a1[1] = v19;
        a1[2] = v13;
        a1[3] = &v18[8 * v17];
        if (v20)
          operator delete(v20);
      }
      else
      {
        *v12 = v8;
        v13 = v12 + 1;
      }
      a1[2] = v13;
      ++v6;
      v5 = *(_QWORD *)(a2 + 8);
    }
    while (v6 < (*(_QWORD *)(a2 + 16) - v5) >> 3);
  }
}

uint64_t fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>::CacheState(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  uint64_t v5;
  uint64_t v6;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  std::list<int>::list((_QWORD *)(a1 + 8), a2 + 8);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 40);
  v5 = *(_QWORD *)(a2 + 56);
  v6 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 56) = 0;
  *(_OWORD *)(a1 + 40) = v4;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  std::vector<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>::__init_with_size[abi:ne180100]<std::__wrap_iter<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0> const*>,std::__wrap_iter<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0> const*>>((_QWORD *)(a1 + 56), v5, v6, 0x6DB6DB6DB6DB6DB7 * ((v6 - v5) >> 3));
  *(_QWORD *)(a1 + 80) = *(unsigned int *)(a2 + 80);
  return a1;
}

void sub_1ADC2E60C(_Unwind_Exception *a1)
{
  _QWORD *v1;

  std::__list_imp<char *>::clear(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>::__init_with_size[abi:ne180100]<std::__wrap_iter<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0> const*>,std::__wrap_iter<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0> const*>>(_QWORD *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;

  if (a4)
  {
    v6 = result;
    std::vector<quasar::VoiceCommandArgument>::__vallocate[abi:ne180100](result, a4);
    result = (_QWORD *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0> const*,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0> const*,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>*>((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_1ADC2E684(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  std::vector<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0> const*,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0> const*,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (a2 != a3)
  {
    v7 = 0;
    do
    {
      v8 = a2 + v7;
      v9 = a4 + v7;
      *(_QWORD *)v9 = *(_QWORD *)(a2 + v7);
      *(_DWORD *)(v9 + 8) = *(_DWORD *)(a2 + v7 + 8);
      std::list<int>::list((_QWORD *)(a4 + v7 + 16), a2 + v7 + 16);
      *(_DWORD *)(v9 + 40) = *(_DWORD *)(a2 + v7 + 40);
      *(_DWORD *)(v9 + 48) = *(_DWORD *)(a2 + v7 + 48);
      v7 += 56;
    }
    while (v8 + 56 != a3);
    a4 += v7;
  }
  return a4;
}

void sub_1ADC2E730(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  if (v2)
  {
    v4 = v1 - 40;
    do
    {
      std::__list_imp<char *>::clear((_QWORD *)(v4 + v2));
      v2 -= 56;
    }
    while (v2);
  }
  _Unwind_Resume(exception_object);
}

void fst::StateIterator<fst::FactorWeightFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>>>::~StateIterator()
{
  JUMPOUT(0x1AF44D190);
}

uint64_t fst::CacheStateIterator<fst::FactorWeightFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>>>::Value_(uint64_t a1)
{
  return *(unsigned int *)(a1 + 24);
}

uint64_t fst::CacheStateIterator<fst::FactorWeightFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>>>::Next_(uint64_t result)
{
  ++*(_DWORD *)(result + 24);
  return result;
}

uint64_t fst::CacheStateIterator<fst::FactorWeightFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>>>::Reset_(uint64_t result)
{
  *(_DWORD *)(result + 24) = 0;
  return result;
}

void fst::CacheStateIterator<fst::FactorWeightFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>>>::~CacheStateIterator()
{
  JUMPOUT(0x1AF44D190);
}

uint64_t fst::CacheStateIterator<fst::FactorWeightFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>>>::Done(uint64_t a1)
{
  int v2;
  uint64_t v3;
  _BOOL8 v4;
  int v5;
  int v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  int v11;
  int *v12;
  int v13;
  int v14;
  int v15;
  uint64_t v16;
  int v17;
  char *v19;
  unint64_t v20;

  v2 = *(_DWORD *)(a1 + 24);
  v3 = *(_QWORD *)(a1 + 16);
  if (v2 < *(_DWORD *)(v3 + 68))
    return 0;
  v5 = fst::CacheBaseImpl<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>,fst::DefaultCacheStore<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::MinUnexpandedState(v3);
  if (v5 >= *(_DWORD *)(*(_QWORD *)(a1 + 16) + 68))
    return 1;
  v6 = v5;
  do
  {
    fst::ArcIterator<fst::FactorWeightFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>>>::ArcIterator(&v19, *(_QWORD *)(a1 + 8), v6);
    v7 = v20;
    v8 = *((_QWORD *)v19 + 7);
    v9 = 0x6DB6DB6DB6DB6DB7 * ((*((_QWORD *)v19 + 8) - v8) >> 3);
    v10 = *(_QWORD *)(a1 + 16);
    if (v20 < v9)
    {
      v11 = *(_DWORD *)(v10 + 68);
      v12 = (int *)(v8 + 56 * v20 + 48);
      do
      {
        v14 = *v12;
        v12 += 14;
        v13 = v14;
        if (v11 <= v14)
        {
          v11 = v13 + 1;
          *(_DWORD *)(v10 + 68) = v13 + 1;
        }
        ++v7;
      }
      while (v9 != v7);
      v20 = v9;
    }
    fst::CacheBaseImpl<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>,fst::DefaultCacheStore<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::SetExpandedState(v10, v6);
    v15 = *(_DWORD *)(a1 + 24);
    v16 = *(_QWORD *)(a1 + 16);
    v17 = *(_DWORD *)(v16 + 68);
    --*((_DWORD *)v19 + 21);
    v4 = v15 >= v17;
    if (v15 < v17)
      break;
    v6 = fst::CacheBaseImpl<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>,fst::DefaultCacheStore<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::MinUnexpandedState(v16);
  }
  while (v6 < *(_DWORD *)(*(_QWORD *)(a1 + 16) + 68));
  return v4;
}

void sub_1ADC2E8D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  --*(_DWORD *)(a9 + 84);
  _Unwind_Resume(a1);
}

char **fst::ArcIterator<fst::FactorWeightFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>>>::ArcIterator(char **a1, uint64_t a2, int a3)
{
  uint64_t v6;
  char *MutableState;

  v6 = *(_QWORD *)(a2 + 8);
  a1[1] = 0;
  MutableState = fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>>>::GetMutableState(*(_QWORD *)(v6 + 120), a3);
  *a1 = MutableState;
  ++*((_DWORD *)MutableState + 21);
  if ((fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::HasArcs(*(_QWORD *)(a2 + 8), a3) & 1) == 0)fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>>::Expand(*(_QWORD *)(a2 + 8), a3);
  return a1;
}

void sub_1ADC2E95C(_Unwind_Exception *a1)
{
  uint64_t v1;

  --*(_DWORD *)(*(_QWORD *)v1 + 84);
  _Unwind_Resume(a1);
}

uint64_t fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>>::InitArcIterator(uint64_t a1, int a2, _QWORD *a3)
{
  if ((fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::HasArcs(a1, a2) & 1) == 0)fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>>::Expand(a1, a2);
  return fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::InitArcIterator(a1, a2, a3);
}

uint64_t fst::ArcMap<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FromGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  _BOOL8 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD v19[3];
  int v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  _DWORD *v24;
  unint64_t v25;
  int v26;
  int v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  unsigned int v32;

  (*(void (**)(uint64_t))(*(_QWORD *)a2 + 224))(a2);
  v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 112))(a1);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 280))(a2, v6);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 288))(a2, 0);
  v7 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 64))(a1, 0x3FFFFFFF0004, 0);
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  if ((_DWORD)result == -1)
  {
    if ((v7 & 4) != 0)
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 192))(a2, 4, 4);
    return result;
  }
  if ((*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 64))(a1, 1, 0))
  {
    v9 = fst::CountStates<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>(a1) != -1;
    (*(void (**)(uint64_t, _BOOL8))(*(_QWORD *)a2 + 248))(a2, v9);
  }
  LODWORD(v23) = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 128))(a1, &v21);
  while (!v21)
  {
    if ((int)v23 >= (int)v22)
      goto LABEL_14;
LABEL_9:
    (*(void (**)(uint64_t))(*(_QWORD *)a2 + 200))(a2);
    if (v21)
      (*(void (**)(uint64_t))(*(_QWORD *)v21 + 32))(v21);
    else
      LODWORD(v23) = v23 + 1;
  }
  if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v21 + 16))(v21))
    goto LABEL_9;
  if (v21)
    (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
LABEL_14:
  v32 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 128))(a1, &v30);
  LODWORD(v10) = -1;
  while (2)
  {
    if (!v30)
    {
      if ((int)v32 >= v31)
        goto LABEL_47;
      goto LABEL_20;
    }
    if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v30 + 16))(v30))
    {
      if (v30)
      {
        v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v30 + 24))(v30);
        goto LABEL_21;
      }
LABEL_20:
      v11 = v32;
LABEL_21:
      if ((_DWORD)v11 == (*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1))
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 176))(a2, v11);
      v12 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 40))(a1, v11);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 256))(a2, v11, v12);
      v25 = 0;
      (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(_QWORD *)a1 + 136))(a1, v11, &v21);
LABEL_24:
      if (v21)
      {
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v21 + 24))(v21))
        {
          if (v21)
          {
            (*(void (**)(void))(*(_QWORD *)v21 + 8))();
            goto LABEL_37;
          }
LABEL_35:
          if (v24)
            --*v24;
LABEL_37:
          (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)a1 + 32))(&v18, a1, v11);
          v21 = 0;
          LODWORD(v22) = v18;
          std::list<int>::list(&v23, (uint64_t)v19);
          v26 = v20;
          v27 = -1;
          v28 = fst::FromGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>::operator()((int *)a3, (int *)&v21);
          v29 = v15;
          std::__list_imp<char *>::clear(&v23);
          std::__list_imp<char *>::clear(v19);
          if (v28)
          {
            if ((_DWORD)v10 == -1)
            {
              v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 200))(a2);
              (*(void (**)(uint64_t, uint64_t, float))(*(_QWORD *)a2 + 184))(a2, v10, 0.0);
            }
            HIDWORD(v29) = v10;
            (*(void (**)(uint64_t, uint64_t, unint64_t *))(*(_QWORD *)a2 + 208))(a2, v11, &v28);
            (*(void (**)(uint64_t, uint64_t, float))(*(_QWORD *)a2 + 184))(a2, v11, INFINITY);
          }
          else
          {
            (*(void (**)(uint64_t, uint64_t, float))(*(_QWORD *)a2 + 184))(a2, v11, *(float *)&v29);
          }
          if (v30)
            (*(void (**)(uint64_t))(*(_QWORD *)v30 + 32))(v30);
          else
            ++v32;
          continue;
        }
        if (v21)
        {
          v13 = (int *)(*(uint64_t (**)(void))(*(_QWORD *)v21 + 32))();
          goto LABEL_30;
        }
      }
      else if (v25 >= v23)
      {
        goto LABEL_35;
      }
      v13 = (int *)(v22 + 56 * v25);
LABEL_30:
      v28 = fst::FromGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>::operator()((int *)a3, v13);
      v29 = v14;
      (*(void (**)(uint64_t, uint64_t, unint64_t *))(*(_QWORD *)a2 + 208))(a2, v11, &v28);
      if (v21)
        (*(void (**)(uint64_t))(*(_QWORD *)v21 + 40))(v21);
      else
        ++v25;
      goto LABEL_24;
    }
    break;
  }
  if (v30)
    (*(void (**)(uint64_t))(*(_QWORD *)v30 + 8))(v30);
LABEL_47:
  v16 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, 0x3FFFFFFF0007, 0);
  v17 = v7 & 0x2EBC21080007;
  if (*(_BYTE *)(a3 + 4))
    v17 = v7 & 0x2EBC21080003 | 4;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 192))(a2, v17 | v16, 0x3FFFFFFF0007);
}

void sub_1ADC2EED8(_Unwind_Exception *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v5;

  std::__list_imp<char *>::clear(v2);
  std::__list_imp<char *>::clear(v1);
  v5 = *(_QWORD *)(v3 - 104);
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  _Unwind_Resume(a1);
}

unint64_t fst::FromGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>::operator()(int *a1, int *a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t *v9;
  uint64_t *v10;
  BOOL v11;
  _BOOL4 v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unsigned int v17;
  fst *v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  void *__p[2];
  char v25;
  char v26;
  unsigned int v27;
  unsigned int v28;
  float v29[5];
  char v30;

  if (a2[12] != -1)
    goto LABEL_24;
  v4 = fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>::Zero();
  v5 = a2[2];
  v6 = v5 ? *((_QWORD *)a2 + 4) + 1 : 0;
  v7 = *(_DWORD *)v4 ? *(_QWORD *)(v4 + 24) + 1 : 0;
  if (v6 != v7)
    goto LABEL_24;
  v8 = 0;
  v9 = (uint64_t *)(a2 + 6);
  v10 = (uint64_t *)(v4 + 16);
  v11 = v5 && v5 == *(_DWORD *)v4;
  v12 = !v11;
  v13 = !v12;
  while (1)
  {
    v14 = *v9;
    v15 = *v10;
    if ((v8 & 1) == 0 && !v13)
      break;
    if ((int *)v14 == a2 + 4)
      goto LABEL_22;
    if (*(_DWORD *)(v14 + 16) != *(_DWORD *)(v15 + 16))
      goto LABEL_24;
    v9 = (uint64_t *)(v14 + 8);
    v10 = (uint64_t *)(v15 + 8);
    v8 = 1;
  }
  if (v5)
    goto LABEL_24;
LABEL_22:
  LODWORD(__p[0]) = 0;
  LODWORD(__p[0]) = a2[10];
  v29[0] = 0.0;
  v29[0] = *(float *)(v4 + 32);
  if (*(float *)__p == v29[0])
  {
    v16 = 0;
    v17 = *a2;
  }
  else
  {
LABEL_24:
    v28 = -1;
    if (!fst::FromGallicMapper<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>::Extract<(fst::GallicType)1>((unsigned int *)a2 + 2, &v27, &v28)|| (v17 = *a2, *a2 != a2[1]))
    {
      if (FLAGS_fst_error_fatal)
        std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
      else
        std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
      v18 = fst::LogMessage::LogMessage((fst *)&v26, (uint64_t)__p);
      v19 = (_QWORD *)fst::cerr(v18);
      v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"FromGallicMapper: unrepresentable weight: ", 42);
      fst::CompositeWeightWriter::CompositeWeightWriter((uint64_t)v29, v20);
      if (*FLAGS_fst_weight_parentheses)
      {
        v30 = *FLAGS_fst_weight_parentheses;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)v29, (uint64_t)&v30, 1);
      }
      fst::CompositeWeightWriter::WriteElement<fst::StringWeight<int,(fst::StringType)1>>((uint64_t)v29, a2 + 2);
      fst::CompositeWeightWriter::WriteElement<fst::LogWeightTpl<float>>((uint64_t)v29, (float *)a2 + 10);
      if (*FLAGS_fst_weight_parentheses)
      {
        v30 = *(_BYTE *)(FLAGS_fst_weight_parentheses + 1);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)v29, (uint64_t)&v30, 1);
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)" for arc with ilabel = ", 23);
      v21 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)", olabel = ", 11);
      v22 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)", nextstate = ", 14);
      std::ostream::operator<<();
      fst::LogMessage::~LogMessage((fst::LogMessage *)&v26);
      if (v25 < 0)
        operator delete(__p[0]);
      *((_BYTE *)a1 + 4) = 1;
      v17 = *a2;
    }
    if (!v17 && v28 && a2[12] == -1)
      v17 = *a1;
    v16 = (unint64_t)v28 << 32;
  }
  return v16 | v17;
}

void sub_1ADC2F220(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  fst::LogMessage::~LogMessage((fst::LogMessage *)&a18);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

_QWORD *fst::GallicToNewSymbolsMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>::GallicToNewSymbolsMapper(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  size_t v6;
  void **v7;
  char *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  void *__p[2];
  char v14;
  void *v15[2];
  char v16;

  *a1 = a2;
  *(_OWORD *)(a1 + 1) = 0u;
  *(_OWORD *)(a1 + 3) = 0u;
  *((_DWORD *)a1 + 10) = 1065353216;
  *((_DWORD *)a1 + 12) = 0;
  a1[7] = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 120))(a2);
  a1[8] = 0;
  *((_BYTE *)a1 + 72) = 0;
  (*(void (**)(_QWORD))(*(_QWORD *)*a1 + 224))(*a1);
  *((_DWORD *)a1 + 13) = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a1 + 200))(*a1);
  (*(void (**)(_QWORD))(*(_QWORD *)*a1 + 176))(*a1);
  (*(void (**)(_QWORD, _QWORD, float))(*(_QWORD *)*a1 + 184))(*a1, *((unsigned int *)a1 + 13), 0.0);
  v3 = a1[7];
  if (v3)
  {
    v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 48))(v3);
    v5 = (char *)v4;
    if (*(char *)(v4 + 23) >= 0)
      v6 = *(unsigned __int8 *)(v4 + 23);
    else
      v6 = *(_QWORD *)(v4 + 8);
    v7 = v15;
    std::string::basic_string[abi:ne180100]((uint64_t)v15, v6 + 12);
    if (v16 < 0)
      v7 = (void **)v15[0];
    if (v6)
    {
      if (v5[23] >= 0)
        v8 = v5;
      else
        v8 = *(char **)v5;
      memmove(v7, v8, v6);
    }
    strcpy((char *)v7 + v6, "_from_gallic");
    v9 = *a1;
    v10 = (_QWORD *)operator new();
    fst::SymbolTable::SymbolTable(v10, (__int128 *)v15);
    (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v9 + 280))(v9, v10);
    v11 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a1 + 264))(*a1);
    a1[8] = v11;
    (*(void (**)(void **__return_ptr, _QWORD, _QWORD))(*(_QWORD *)a1[7] + 88))(__p, a1[7], 0);
    (*(void (**)(uint64_t, void **, _QWORD))(*(_QWORD *)v11 + 24))(v11, __p, 0);
    if (v14 < 0)
      operator delete(__p[0]);
    if (v16 < 0)
      operator delete(v15[0]);
  }
  else
  {
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)*a1 + 280))(*a1, 0);
  }
  return a1;
}

void sub_1ADC2F468(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  uint64_t v20;

  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  std::__hash_table<std::__hash_value_type<fst::StringWeight<int,(fst::StringType)0>,int>,std::__unordered_map_hasher<fst::StringWeight<int,(fst::StringType)0>,std::__hash_value_type<fst::StringWeight<int,(fst::StringType)0>,int>,fst::GallicToNewSymbolsMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>::StringKey,std::equal_to<fst::StringWeight<int,(fst::StringType)0>>,true>,std::__unordered_map_equal<fst::StringWeight<int,(fst::StringType)0>,std::__hash_value_type<fst::StringWeight<int,(fst::StringType)0>,int>,std::equal_to<fst::StringWeight<int,(fst::StringType)0>>,fst::GallicToNewSymbolsMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>::StringKey,true>,std::allocator<std::__hash_value_type<fst::StringWeight<int,(fst::StringType)0>,int>>>::~__hash_table(v20);
  _Unwind_Resume(a1);
}

uint64_t std::__hash_table<std::__hash_value_type<fst::StringWeight<int,(fst::StringType)0>,int>,std::__unordered_map_hasher<fst::StringWeight<int,(fst::StringType)0>,std::__hash_value_type<fst::StringWeight<int,(fst::StringType)0>,int>,fst::GallicToNewSymbolsMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>::StringKey,std::equal_to<fst::StringWeight<int,(fst::StringType)0>>,true>,std::__unordered_map_equal<fst::StringWeight<int,(fst::StringType)0>,std::__hash_value_type<fst::StringWeight<int,(fst::StringType)0>,int>,std::equal_to<fst::StringWeight<int,(fst::StringType)0>>,fst::GallicToNewSymbolsMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>::StringKey,true>,std::allocator<std::__hash_value_type<fst::StringWeight<int,(fst::StringType)0>,int>>>::~__hash_table(uint64_t a1)
{
  void *v2;

  std::__hash_table<std::__hash_value_type<fst::StringWeight<int,(fst::StringType)0>,int>,std::__unordered_map_hasher<fst::StringWeight<int,(fst::StringType)0>,std::__hash_value_type<fst::StringWeight<int,(fst::StringType)0>,int>,fst::GallicToNewSymbolsMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>::StringKey,std::equal_to<fst::StringWeight<int,(fst::StringType)0>>,true>,std::__unordered_map_equal<fst::StringWeight<int,(fst::StringType)0>,std::__hash_value_type<fst::StringWeight<int,(fst::StringType)0>,int>,std::equal_to<fst::StringWeight<int,(fst::StringType)0>>,fst::GallicToNewSymbolsMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>::StringKey,true>,std::allocator<std::__hash_value_type<fst::StringWeight<int,(fst::StringType)0>,int>>>::__deallocate_node(a1, *(_QWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void std::__hash_table<std::__hash_value_type<fst::StringWeight<int,(fst::StringType)0>,int>,std::__unordered_map_hasher<fst::StringWeight<int,(fst::StringType)0>,std::__hash_value_type<fst::StringWeight<int,(fst::StringType)0>,int>,fst::GallicToNewSymbolsMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>::StringKey,std::equal_to<fst::StringWeight<int,(fst::StringType)0>>,true>,std::__unordered_map_equal<fst::StringWeight<int,(fst::StringType)0>,std::__hash_value_type<fst::StringWeight<int,(fst::StringType)0>,int>,std::equal_to<fst::StringWeight<int,(fst::StringType)0>>,fst::GallicToNewSymbolsMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>::StringKey,true>,std::allocator<std::__hash_value_type<fst::StringWeight<int,(fst::StringType)0>,int>>>::__deallocate_node(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;

  if (a2)
  {
    v2 = a2;
    do
    {
      v3 = (_QWORD *)*v2;
      std::__list_imp<char *>::clear(v2 + 3);
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

unint64_t fst::GallicToNewSymbolsMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>::operator()(_QWORD *a1, int *a2)
{
  float v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t *v9;
  uint64_t *v10;
  BOOL v11;
  _BOOL4 v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t *v18;
  uint64_t v19;
  unint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int *v25;
  unsigned int v26;
  int v27;
  std::string::size_type size;
  std::string *v29;
  std::string *p_p;
  std::string *v31;
  std::string::size_type v32;
  std::string *v33;
  std::string::size_type v34;
  char v35;
  uint64_t v36;
  fst *v37;
  _QWORD *v38;
  std::string v40;
  std::string __p;
  int v42;
  float v43;
  _QWORD v44[2];
  uint64_t v45;
  _QWORD v46[3];

  v46[2] = *MEMORY[0x1E0C80C00];
  if (a2[12] != -1)
  {
    v4 = *((float *)a2 + 2);
    goto LABEL_25;
  }
  v5 = fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>::Zero();
  v4 = *((float *)a2 + 2);
  if (v4 == 0.0)
    v6 = 0;
  else
    v6 = *((_QWORD *)a2 + 4) + 1;
  if (*(_DWORD *)v5)
    v7 = *(_QWORD *)(v5 + 24) + 1;
  else
    v7 = 0;
  if (v6 != v7)
    goto LABEL_25;
  v8 = 0;
  v9 = (uint64_t *)(a2 + 6);
  v10 = (uint64_t *)(v5 + 16);
  v11 = v4 != 0.0 && LODWORD(v4) == *(_DWORD *)v5;
  v12 = !v11;
  v13 = !v12;
  while (1)
  {
    v14 = *v9;
    v15 = *v10;
    if ((v8 & 1) == 0 && !v13)
      break;
    if ((int *)v14 == a2 + 4)
      goto LABEL_23;
    if (*(_DWORD *)(v14 + 16) != *(_DWORD *)(v15 + 16))
      goto LABEL_25;
    v9 = (uint64_t *)(v14 + 8);
    v10 = (uint64_t *)(v15 + 8);
    v8 = 1;
  }
  if (v4 != 0.0)
    goto LABEL_25;
LABEL_23:
  LODWORD(__p.__r_.__value_.__l.__data_) = 0;
  LODWORD(__p.__r_.__value_.__l.__data_) = a2[10];
  v43 = 0.0;
  v43 = *(float *)(v5 + 32);
  if (*(float *)&__p.__r_.__value_.__l.__data_ != v43)
  {
LABEL_25:
    v43 = v4;
    std::list<int>::list(v44, (uint64_t)(a2 + 4));
    v16 = 0;
    if (v43 == 0.0 || v45 == -1)
    {
LABEL_77:
      v17 = *a2;
      if (*a2 == a2[1])
      {
LABEL_84:
        std::__list_imp<char *>::clear(v44);
        return v17 | (unint64_t)(v16 << 32);
      }
LABEL_78:
      if (FLAGS_fst_error_fatal)
        std::string::basic_string[abi:ne180100]<0>(&__p, "FATAL");
      else
        std::string::basic_string[abi:ne180100]<0>(&__p, "ERROR");
      v37 = fst::LogMessage::LogMessage((fst *)&v40, (uint64_t)&__p);
      v38 = (_QWORD *)fst::cerr(v37);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v38, (uint64_t)"GallicToNewSymbolMapper: unrepresentable weight: ", 49);
      std::ostream::operator<<();
      fst::LogMessage::~LogMessage((fst::LogMessage *)&v40);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      *((_BYTE *)a1 + 72) = 1;
      v17 = *a2;
      goto LABEL_84;
    }
    v18 = std::__hash_table<std::__hash_value_type<fst::StringWeight<int,(fst::StringType)0>,int>,std::__unordered_map_hasher<fst::StringWeight<int,(fst::StringType)0>,std::__hash_value_type<fst::StringWeight<int,(fst::StringType)0>,int>,fst::GallicToNewSymbolsMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>::StringKey,std::equal_to<fst::StringWeight<int,(fst::StringType)0>>,true>,std::__unordered_map_equal<fst::StringWeight<int,(fst::StringType)0>,std::__hash_value_type<fst::StringWeight<int,(fst::StringType)0>,int>,std::equal_to<fst::StringWeight<int,(fst::StringType)0>>,fst::GallicToNewSymbolsMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>::StringKey,true>,std::allocator<std::__hash_value_type<fst::StringWeight<int,(fst::StringType)0>,int>>>::find<fst::StringWeight<int,(fst::StringType)0>>(a1 + 1, (int *)&v43);
    if (v18)
    {
      v16 = *((unsigned int *)v18 + 12);
      goto LABEL_76;
    }
    v16 = *((int *)a1 + 12) + 1;
    *((_DWORD *)a1 + 12) = v16;
    *(float *)&__p.__r_.__value_.__l.__data_ = v43;
    std::list<int>::list(&__p.__r_.__value_.__l.__size_, (uint64_t)v44);
    v42 = v16;
    std::__hash_table<std::__hash_value_type<fst::StringWeight<int,(fst::StringType)0>,int>,std::__unordered_map_hasher<fst::StringWeight<int,(fst::StringType)0>,std::__hash_value_type<fst::StringWeight<int,(fst::StringType)0>,int>,fst::GallicToNewSymbolsMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>::StringKey,std::equal_to<fst::StringWeight<int,(fst::StringType)0>>,true>,std::__unordered_map_equal<fst::StringWeight<int,(fst::StringType)0>,std::__hash_value_type<fst::StringWeight<int,(fst::StringType)0>,int>,std::equal_to<fst::StringWeight<int,(fst::StringType)0>>,fst::GallicToNewSymbolsMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>::StringKey,true>,std::allocator<std::__hash_value_type<fst::StringWeight<int,(fst::StringType)0>,int>>>::__emplace_unique_key_args<fst::StringWeight<int,(fst::StringType)0>,std::pair<fst::StringWeight<int,(fst::StringType)0> const,int>>((uint64_t)(a1 + 1), (int *)&__p, &__p);
    std::__list_imp<char *>::clear(&__p.__r_.__value_.__l.__size_);
    v19 = v44[1];
    memset(&__p, 0, sizeof(__p));
    if (v43 == 0.0)
    {
LABEL_72:
      v36 = a1[8];
      if (v36)
        (*(void (**)(uint64_t, std::string *, uint64_t))(*(_QWORD *)v36 + 24))(v36, &__p, v16);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
LABEL_76:
      if (v16 > 0xFFFFFFFD)
        goto LABEL_78;
      goto LABEL_77;
    }
    v20 = 0;
    v21 = 0;
    v22 = *((unsigned int *)a1 + 13);
    while (1)
    {
      if (v20 >= v45 + 1)
        goto LABEL_72;
      v23 = v20 == v45 ? *((unsigned int *)a1 + 13) : (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a1 + 200))(*a1);
      v24 = *a1;
      v25 = (v21 & 1) != 0 ? (int *)(v19 + 16) : (int *)&v43;
      v26 = *v25;
      v27 = v20 ? 0 : v16;
      LODWORD(v40.__r_.__value_.__l.__data_) = v27;
      *(std::string::size_type *)((char *)v40.__r_.__value_.__r.__words + 4) = v26;
      HIDWORD(v40.__r_.__value_.__r.__words[1]) = v23;
      (*(void (**)(uint64_t, uint64_t, std::string *))(*(_QWORD *)v24 + 208))(v24, v22, &v40);
      if (a1[8])
      {
        if (v20)
        {
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
          else
            size = __p.__r_.__value_.__l.__size_;
          std::string::basic_string[abi:ne180100]((uint64_t)&v40, size + 1);
          if ((v40.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v29 = &v40;
          else
            v29 = (std::string *)v40.__r_.__value_.__r.__words[0];
          if (size)
          {
            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              p_p = &__p;
            else
              p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
            memmove(v29, p_p, size);
          }
          *(_WORD *)((char *)&v29->__r_.__value_.__l.__data_ + size) = 95;
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
          __p = v40;
        }
        (*(void (**)(std::string *__return_ptr, _QWORD, _QWORD))(*(_QWORD *)a1[7] + 88))(&v40, a1[7], *v25);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v31 = &__p;
        else
          v31 = (std::string *)__p.__r_.__value_.__r.__words[0];
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v32 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        else
          v32 = __p.__r_.__value_.__l.__size_;
        v33 = std::string::insert(&v40, 0, (const std::string::value_type *)v31, v32);
        v34 = v33->__r_.__value_.__r.__words[0];
        v46[0] = v33->__r_.__value_.__l.__size_;
        *(_QWORD *)((char *)v46 + 7) = *(std::string::size_type *)((char *)&v33->__r_.__value_.__r.__words[1] + 7);
        v35 = HIBYTE(v33->__r_.__value_.__r.__words[2]);
        v33->__r_.__value_.__l.__size_ = 0;
        v33->__r_.__value_.__r.__words[2] = 0;
        v33->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        __p.__r_.__value_.__r.__words[0] = v34;
        __p.__r_.__value_.__l.__size_ = v46[0];
        *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 7) = *(_QWORD *)((char *)v46 + 7);
        *((_BYTE *)&__p.__r_.__value_.__s + 23) = v35;
        if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0)
          break;
      }
      if ((v21 & 1) != 0)
        goto LABEL_67;
LABEL_68:
      ++v20;
      v21 = 1;
      v22 = v23;
      if (v43 == 0.0)
        goto LABEL_72;
    }
    operator delete(v40.__r_.__value_.__l.__data_);
    if ((v21 & 1) == 0)
      goto LABEL_68;
LABEL_67:
    v19 = *(_QWORD *)(v19 + 8);
    goto LABEL_68;
  }
  v16 = 0;
  v17 = *a2;
  return v17 | (unint64_t)(v16 << 32);
}

void sub_1ADC2FA08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _QWORD *a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0)
    operator delete(__p);
  std::__list_imp<char *>::clear(a10);
  _Unwind_Resume(a1);
}

uint64_t *std::__hash_table<std::__hash_value_type<fst::StringWeight<int,(fst::StringType)0>,int>,std::__unordered_map_hasher<fst::StringWeight<int,(fst::StringType)0>,std::__hash_value_type<fst::StringWeight<int,(fst::StringType)0>,int>,fst::GallicToNewSymbolsMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>::StringKey,std::equal_to<fst::StringWeight<int,(fst::StringType)0>>,true>,std::__unordered_map_equal<fst::StringWeight<int,(fst::StringType)0>,std::__hash_value_type<fst::StringWeight<int,(fst::StringType)0>,int>,std::equal_to<fst::StringWeight<int,(fst::StringType)0>>,fst::GallicToNewSymbolsMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>::StringKey,true>,std::allocator<std::__hash_value_type<fst::StringWeight<int,(fst::StringType)0>,int>>>::find<fst::StringWeight<int,(fst::StringType)0>>(_QWORD *a1, int *a2)
{
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  int8x8_t v6;
  uint8x8_t v7;
  unint64_t v8;
  unint64_t v9;
  int **v10;
  int *v11;
  uint64_t v12;
  unint64_t v13;

  v3 = 0;
  v4 = *((_QWORD *)a2 + 2);
  if (*a2)
  {
    v5 = *a2;
    while (1)
    {
      v3 ^= v5;
      if ((int *)v4 == a2 + 2)
        break;
      v5 = *(int *)(v4 + 16) ^ (2 * v3);
      v4 = *(_QWORD *)(v4 + 8);
    }
  }
  v6 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v6)
    return 0;
  v7 = (uint8x8_t)vcnt_s8(v6);
  v7.i16[0] = vaddlv_u8(v7);
  v8 = v7.u32[0];
  if (v7.u32[0] > 1uLL)
  {
    v9 = v3;
    if (v3 >= *(_QWORD *)&v6)
      v9 = v3 % *(_QWORD *)&v6;
  }
  else
  {
    v9 = (*(_QWORD *)&v6 - 1) & v3;
  }
  v10 = *(int ***)(*a1 + 8 * v9);
  if (!v10)
    return 0;
  v11 = *v10;
  if (*v10)
  {
    v12 = (uint64_t)(a1 + 4);
    do
    {
      v13 = *((_QWORD *)v11 + 1);
      if (v13 == v3)
      {
        if (std::equal_to<fst::StringWeight<int,(fst::StringType)0>>::operator()[abi:ne180100](v12, v11 + 4, (uint64_t)a2))
        {
          return (uint64_t *)v11;
        }
      }
      else
      {
        if (v8 > 1)
        {
          if (v13 >= *(_QWORD *)&v6)
            v13 %= *(_QWORD *)&v6;
        }
        else
        {
          v13 &= *(_QWORD *)&v6 - 1;
        }
        if (v13 != v9)
          return 0;
      }
      v11 = *(int **)v11;
    }
    while (v11);
  }
  return (uint64_t *)v11;
}

BOOL std::equal_to<fst::StringWeight<int,(fst::StringType)0>>::operator()[abi:ne180100](uint64_t a1, int *a2, uint64_t a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  int *v7;
  uint64_t *v8;
  uint64_t *v9;
  BOOL v10;
  int v11;
  int v12;
  int *v13;
  uint64_t v14;
  _BOOL8 result;

  v3 = *a2;
  if (*a2)
    v4 = *((_QWORD *)a2 + 3) + 1;
  else
    v4 = 0;
  if (*(_DWORD *)a3)
    v5 = *(_QWORD *)(a3 + 24) + 1;
  else
    v5 = 0;
  if (v4 != v5)
    return 0;
  v6 = 0;
  v7 = a2 + 2;
  v8 = (uint64_t *)(a2 + 4);
  v9 = (uint64_t *)(a3 + 16);
  if (v3)
    v10 = v3 == *(_DWORD *)a3;
  else
    v10 = 0;
  v11 = !v10;
  v12 = v11 ^ 1;
  while (1)
  {
    v13 = (int *)*v8;
    v14 = *v9;
    if ((v6 & 1) == 0 && !v12)
      break;
    result = v13 == v7;
    if (v13 == v7 || v13[4] != *(_DWORD *)(v14 + 16))
      return result;
    v8 = (uint64_t *)(v13 + 2);
    v9 = (uint64_t *)(v14 + 8);
    v6 = 1;
  }
  return *a2 == 0;
}

uint64_t *std::__hash_table<std::__hash_value_type<fst::StringWeight<int,(fst::StringType)0>,int>,std::__unordered_map_hasher<fst::StringWeight<int,(fst::StringType)0>,std::__hash_value_type<fst::StringWeight<int,(fst::StringType)0>,int>,fst::GallicToNewSymbolsMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>::StringKey,std::equal_to<fst::StringWeight<int,(fst::StringType)0>>,true>,std::__unordered_map_equal<fst::StringWeight<int,(fst::StringType)0>,std::__hash_value_type<fst::StringWeight<int,(fst::StringType)0>,int>,std::equal_to<fst::StringWeight<int,(fst::StringType)0>>,fst::GallicToNewSymbolsMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>::StringKey,true>,std::allocator<std::__hash_value_type<fst::StringWeight<int,(fst::StringType)0>,int>>>::__emplace_unique_key_args<fst::StringWeight<int,(fst::StringType)0>,std::pair<fst::StringWeight<int,(fst::StringType)0> const,int>>(uint64_t a1, int *a2, _DWORD *a3)
{
  unint64_t v3;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  unint64_t v12;
  int **v13;
  int *i;
  unint64_t v15;
  float v16;
  float v17;
  _BOOL8 v18;
  unint64_t v19;
  unint64_t v20;
  size_t v21;
  _QWORD *v22;
  unint64_t v23;
  _QWORD v25[3];

  v7 = 0;
  v8 = *((_QWORD *)a2 + 2);
  if (*a2)
  {
    v9 = *a2;
    while (1)
    {
      v7 ^= v9;
      if ((int *)v8 == a2 + 2)
        break;
      v9 = *(int *)(v8 + 16) ^ (2 * v7);
      v8 = *(_QWORD *)(v8 + 8);
    }
  }
  v10 = *(_QWORD *)(a1 + 8);
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      v3 = v7;
      if (v7 >= v10)
        v3 = v7 % v10;
    }
    else
    {
      v3 = (v10 - 1) & v7;
    }
    v13 = *(int ***)(*(_QWORD *)a1 + 8 * v3);
    if (v13)
    {
      for (i = *v13; i; i = *(int **)i)
      {
        v15 = *((_QWORD *)i + 1);
        if (v15 == v7)
        {
          if (std::equal_to<fst::StringWeight<int,(fst::StringType)0>>::operator()[abi:ne180100](a1 + 32, i + 4, (uint64_t)a2))
          {
            return (uint64_t *)i;
          }
        }
        else
        {
          if (v12 > 1)
          {
            if (v15 >= v10)
              v15 %= v10;
          }
          else
          {
            v15 &= v10 - 1;
          }
          if (v15 != v3)
            break;
        }
      }
    }
  }
  std::__hash_table<std::__hash_value_type<fst::StringWeight<int,(fst::StringType)0>,int>,std::__unordered_map_hasher<fst::StringWeight<int,(fst::StringType)0>,std::__hash_value_type<fst::StringWeight<int,(fst::StringType)0>,int>,fst::GallicToNewSymbolsMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>::StringKey,std::equal_to<fst::StringWeight<int,(fst::StringType)0>>,true>,std::__unordered_map_equal<fst::StringWeight<int,(fst::StringType)0>,std::__hash_value_type<fst::StringWeight<int,(fst::StringType)0>,int>,std::equal_to<fst::StringWeight<int,(fst::StringType)0>>,fst::GallicToNewSymbolsMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>::StringKey,true>,std::allocator<std::__hash_value_type<fst::StringWeight<int,(fst::StringType)0>,int>>>::__construct_node_hash<std::pair<fst::StringWeight<int,(fst::StringType)0> const,int>>(a1, v7, a3, (uint64_t)v25);
  v16 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v17 = *(float *)(a1 + 32);
  if (!v10 || (float)(v17 * (float)v10) < v16)
  {
    v18 = 1;
    if (v10 >= 3)
      v18 = (v10 & (v10 - 1)) != 0;
    v19 = v18 | (2 * v10);
    v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20)
      v21 = v20;
    else
      v21 = v19;
    std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::__rehash<true>(a1, v21);
    v10 = *(_QWORD *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v7 >= v10)
        v3 = v7 % v10;
      else
        v3 = v7;
    }
    else
    {
      v3 = (v10 - 1) & v7;
    }
  }
  v22 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v22)
  {
    *(_QWORD *)v25[0] = *v22;
    *v22 = v25[0];
  }
  else
  {
    *(_QWORD *)v25[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v25[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v3) = a1 + 16;
    if (*(_QWORD *)v25[0])
    {
      v23 = *(_QWORD *)(*(_QWORD *)v25[0] + 8);
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v23 >= v10)
          v23 %= v10;
      }
      else
      {
        v23 &= v10 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v23) = v25[0];
    }
  }
  i = (int *)v25[0];
  v25[0] = 0;
  ++*(_QWORD *)(a1 + 24);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<fst::StringWeight<int,(fst::StringType)0>,int>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<fst::StringWeight<int,(fst::StringType)0>,int>,void *>>>>::reset[abi:ne180100]((uint64_t)v25, 0);
  return (uint64_t *)i;
}

void sub_1ADC2FF14(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<fst::StringWeight<int,(fst::StringType)0>,int>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<fst::StringWeight<int,(fst::StringType)0>,int>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

_QWORD *std::__hash_table<std::__hash_value_type<fst::StringWeight<int,(fst::StringType)0>,int>,std::__unordered_map_hasher<fst::StringWeight<int,(fst::StringType)0>,std::__hash_value_type<fst::StringWeight<int,(fst::StringType)0>,int>,fst::GallicToNewSymbolsMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>::StringKey,std::equal_to<fst::StringWeight<int,(fst::StringType)0>>,true>,std::__unordered_map_equal<fst::StringWeight<int,(fst::StringType)0>,std::__hash_value_type<fst::StringWeight<int,(fst::StringType)0>,int>,std::equal_to<fst::StringWeight<int,(fst::StringType)0>>,fst::GallicToNewSymbolsMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>::StringKey,true>,std::allocator<std::__hash_value_type<fst::StringWeight<int,(fst::StringType)0>,int>>>::__construct_node_hash<std::pair<fst::StringWeight<int,(fst::StringType)0> const,int>>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _DWORD *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  _QWORD *v8;
  _QWORD *result;

  v7 = a1 + 16;
  v8 = operator new(0x38uLL);
  *(_QWORD *)a4 = v8;
  *(_QWORD *)(a4 + 8) = v7;
  *(_BYTE *)(a4 + 16) = 0;
  *v8 = 0;
  v8[1] = a2;
  *((_DWORD *)v8 + 4) = *a3;
  result = std::list<int>::list(v8 + 3, (uint64_t)(a3 + 2));
  *((_DWORD *)v8 + 12) = a3[8];
  *(_BYTE *)(a4 + 16) = 1;
  return result;
}

void sub_1ADC2FFA0(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__hash_node<std::__hash_value_type<fst::StringWeight<int,(fst::StringType)0>,int>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<fst::StringWeight<int,(fst::StringType)0>,int>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<fst::StringWeight<int,(fst::StringType)0>,int>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<fst::StringWeight<int,(fst::StringType)0>,int>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  _QWORD *v2;

  v2 = *(_QWORD **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__list_imp<char *>::clear(v2 + 3);
    operator delete(v2);
  }
}

uint64_t fst::EncodeMapper<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>::~EncodeMapper(uint64_t a1)
{
  uint64_t v2;
  int v3;
  _QWORD *v4;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_DWORD *)(v2 + 80) - 1;
  *(_DWORD *)(v2 + 80) = v3;
  if (!v3)
  {
    v4 = fst::EncodeTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>::~EncodeTable((_QWORD *)v2);
    MEMORY[0x1AF44D190](v4, 0x10A0C40782F6942);
  }
  return a1;
}

_QWORD *fst::EncodeTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>::~EncodeTable(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;

  v3 = a1[1];
  v2 = a1[2];
  if (v2 != v3)
  {
    v4 = 0;
    do
    {
      v5 = *(_QWORD *)(v3 + 8 * v4);
      if (v5)
      {
        std::__list_imp<char *>::clear((_QWORD *)(v5 + 16));
        MEMORY[0x1AF44D190](v5, 0x1020C400F9B4526);
        v3 = a1[1];
        v2 = a1[2];
      }
      ++v4;
    }
    while (v4 < (v2 - v3) >> 3);
  }
  v6 = a1[11];
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  v7 = a1[12];
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)(a1 + 4));
  v8 = (void *)a1[1];
  if (v8)
  {
    a1[2] = v8;
    operator delete(v8);
  }
  return a1;
}

uint64_t quasar::artifact::AppLmArtifactLifeCycleStage::AppLmArtifactLifeCycleStage(uint64_t a1, __int128 *a2, int a3, char a4, char a5, char a6, const void ***a7)
{
  __int128 v13;

  *(_QWORD *)a1 = &unk_1E5D3BCD0;
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 8), *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v13 = *a2;
    *(_QWORD *)(a1 + 24) = *((_QWORD *)a2 + 2);
    *(_OWORD *)(a1 + 8) = v13;
  }
  *(_DWORD *)(a1 + 32) = a3;
  *(_BYTE *)(a1 + 36) = a4;
  *(_BYTE *)(a1 + 37) = a5;
  *(_BYTE *)(a1 + 38) = a6;
  std::set<std::string>::set[abi:ne180100]((uint64_t *)(a1 + 40), a7);
  return a1;
}

void sub_1ADC301A4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 31) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

uint64_t quasar::artifact::AppLmArtifactLifeCycleStage::operator int(uint64_t a1)
{
  return *(unsigned int *)(a1 + 32);
}

uint64_t quasar::artifact::AppLmArtifactLifeCycleStage::isValid(quasar::artifact::AppLmArtifactLifeCycleStage *this)
{
  return *((unsigned __int8 *)this + 36);
}

uint64_t quasar::artifact::AppLmArtifactLifeCycleStage::isTextNormalized(quasar::artifact::AppLmArtifactLifeCycleStage *this)
{
  return *((unsigned __int8 *)this + 37);
}

uint64_t quasar::artifact::AppLmArtifactLifeCycleStage::isAdaptableToArbitraryDatapacks(quasar::artifact::AppLmArtifactLifeCycleStage *this)
{
  return *((unsigned __int8 *)this + 38);
}

uint64_t *quasar::artifact::AppLmArtifactLifeCycleStage::contentKeys@<X0>(const void ***this@<X0>, uint64_t *a2@<X8>)
{
  return std::set<std::string>::set[abi:ne180100](a2, this + 5);
}

_QWORD *quasar::artifact::operator<<(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v5 = *(_QWORD *)(a2 + 8);
  v3 = a2 + 8;
  v4 = v5;
  v6 = *(_QWORD *)(v3 + 8);
  if (*(char *)(v3 + 23) >= 0)
  {
    v7 = *(unsigned __int8 *)(v3 + 23);
  }
  else
  {
    v3 = v4;
    v7 = v6;
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, v3, v7);
  return a1;
}

uint64_t quasar::artifact::AppLmArtifactLifeCycleStages::get(quasar::artifact::AppLmArtifactLifeCycleStages *this)
{
  unsigned __int8 v1;
  quasar::artifact::AppLmArtifactLifeCycleStages *v3;

  if ((v1 & 1) == 0
  {
    v3 = (quasar::artifact::AppLmArtifactLifeCycleStages *)operator new();
    quasar::artifact::AppLmArtifactLifeCycleStages::AppLmArtifactLifeCycleStages(v3);
    quasar::artifact::AppLmArtifactLifeCycleStages::get(void)::singleton = (uint64_t)v3;
  }
  return quasar::artifact::AppLmArtifactLifeCycleStages::get(void)::singleton;
}

void sub_1ADC302A0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10B2C40F2137253);
  _Unwind_Resume(a1);
}

quasar::artifact::AppLmArtifactLifeCycleStages *quasar::artifact::AppLmArtifactLifeCycleStages::AppLmArtifactLifeCycleStages(quasar::artifact::AppLmArtifactLifeCycleStages *this)
{
  uint64_t i;
  uint64_t j;
  uint64_t k;
  uint64_t m;
  uint64_t n;
  const void **v8;
  char *v9;
  __int128 v10;
  uint64_t v11;
  std::string __p;
  quasar::artifact::AppLmArtifactLifeCycleStages *v13;
  std::string v14;
  char *v15;
  std::string v16;
  char *v17;
  std::string v18;
  char *v19;
  std::string v20;
  char *v21;
  std::string v22;
  char *v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  std::string::basic_string[abi:ne180100]<0>(&__p, "UNKNOWN");
  *((_QWORD *)&v10 + 1) = 0;
  v11 = 0;
  *(_QWORD *)&v10 = (char *)&v10 + 8;
  quasar::artifact::AppLmArtifactLifeCycleStage::AppLmArtifactLifeCycleStage((uint64_t)this, (__int128 *)&__p, 0, 0, 0, 0, (const void ***)&v10);
  std::__tree<std::string>::destroy((uint64_t)&v10, *((char **)&v10 + 1));
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&__p, "INVALID");
  *((_QWORD *)&v10 + 1) = 0;
  v11 = 0;
  *(_QWORD *)&v10 = (char *)&v10 + 8;
  quasar::artifact::AppLmArtifactLifeCycleStage::AppLmArtifactLifeCycleStage((uint64_t)this + 64, (__int128 *)&__p, 1, 0, 0, 0, (const void ***)&v10);
  std::__tree<std::string>::destroy((uint64_t)&v10, *((char **)&v10 + 1));
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v10, "RAW_PHRASE_COUNTS");
  std::string::basic_string[abi:ne180100]<0>(&__p, "phrase-count");
  std::string::basic_string[abi:ne180100]<0>(&v13, "oov");
  std::string::basic_string[abi:ne180100]<0>(&v14.__r_.__value_.__r.__words[2], "custom-prons");
  std::set<std::string>::set[abi:ne180100]((uint64_t)&v8, (const void **)&__p.__r_.__value_.__l.__data_, 3);
  quasar::artifact::AppLmArtifactLifeCycleStage::AppLmArtifactLifeCycleStage((uint64_t)this + 128, &v10, 1000, 1, 0, 1, &v8);
  std::__tree<std::string>::destroy((uint64_t)&v8, v9);
  for (i = 0; i != -9; i -= 3)
  {
    if (SHIBYTE(v16.__r_.__value_.__r.__words[i]) < 0)
      operator delete((void *)v14.__r_.__value_.__r.__words[i + 2]);
  }
  if (SHIBYTE(v11) < 0)
    operator delete((void *)v10);
  std::string::basic_string[abi:ne180100]<0>(&v10, "PROCESSED_PHRASE_COUNTS");
  std::string::basic_string[abi:ne180100]<0>(&__p, "phrase-count");
  std::string::basic_string[abi:ne180100]<0>(&v13, "oov");
  std::string::basic_string[abi:ne180100]<0>(&v14.__r_.__value_.__r.__words[2], "custom-prons");
  std::set<std::string>::set[abi:ne180100]((uint64_t)&v8, (const void **)&__p.__r_.__value_.__l.__data_, 3);
  quasar::artifact::AppLmArtifactLifeCycleStage::AppLmArtifactLifeCycleStage((uint64_t)this + 192, &v10, 2000, 1, 1, 1, &v8);
  std::__tree<std::string>::destroy((uint64_t)&v8, v9);
  for (j = 0; j != -9; j -= 3)
  {
    if (SHIBYTE(v16.__r_.__value_.__r.__words[j]) < 0)
      operator delete((void *)v14.__r_.__value_.__r.__words[j + 2]);
  }
  if (SHIBYTE(v11) < 0)
    operator delete((void *)v10);
  std::string::basic_string[abi:ne180100]<0>(&v10, "PROCESSED_NGRAM_COUNTS");
  std::string::basic_string[abi:ne180100]<0>(&__p, "ngram-count");
  std::string::basic_string[abi:ne180100]<0>(&v13, "oov");
  std::string::basic_string[abi:ne180100]<0>(&v14.__r_.__value_.__r.__words[2], "custom-prons");
  std::set<std::string>::set[abi:ne180100]((uint64_t)&v8, (const void **)&__p.__r_.__value_.__l.__data_, 3);
  quasar::artifact::AppLmArtifactLifeCycleStage::AppLmArtifactLifeCycleStage((uint64_t)this + 256, &v10, 3000, 1, 1, 1, &v8);
  std::__tree<std::string>::destroy((uint64_t)&v8, v9);
  for (k = 0; k != -9; k -= 3)
  {
    if (SHIBYTE(v16.__r_.__value_.__r.__words[k]) < 0)
      operator delete((void *)v14.__r_.__value_.__r.__words[k + 2]);
  }
  if (SHIBYTE(v11) < 0)
    operator delete((void *)v10);
  std::string::basic_string[abi:ne180100]<0>(&v10, "DECODING_READY");
  std::string::basic_string[abi:ne180100]<0>(&__p, "language-model-fst");
  std::string::basic_string[abi:ne180100]<0>(&v13, "language-model-arpa");
  std::string::basic_string[abi:ne180100]<0>(&v14.__r_.__value_.__r.__words[2], "oov");
  std::string::basic_string[abi:ne180100]<0>(&v16.__r_.__value_.__l.__size_, "custom-prons");
  std::set<std::string>::set[abi:ne180100]((uint64_t)&v8, (const void **)&__p.__r_.__value_.__l.__data_, 4);
  quasar::artifact::AppLmArtifactLifeCycleStage::AppLmArtifactLifeCycleStage((uint64_t)this + 320, &v10, 4000, 1, 1, 0, &v8);
  std::__tree<std::string>::destroy((uint64_t)&v8, v9);
  for (m = 0; m != -12; m -= 3)
  {
    if (*((char *)&v17 + m * 8 + 7) < 0)
      operator delete((void *)v16.__r_.__value_.__r.__words[m + 1]);
  }
  if (SHIBYTE(v11) < 0)
    operator delete((void *)v10);
  if (*((char *)this + 31) < 0)
    std::string::__init_copy_ctor_external(&__p, *((const std::string::value_type **)this + 1), *((_QWORD *)this + 2));
  else
    __p = *(std::string *)((char *)this + 8);
  v13 = this;
  if (*((char *)this + 95) < 0)
    std::string::__init_copy_ctor_external(&v14, *((const std::string::value_type **)this + 9), *((_QWORD *)this + 10));
  else
    v14 = *(std::string *)((_BYTE *)this + 3);
  v15 = (char *)this + 64;
  if (*((char *)this + 159) < 0)
    std::string::__init_copy_ctor_external(&v16, *((const std::string::value_type **)this + 17), *((_QWORD *)this + 18));
  else
    v16 = *(std::string *)((char *)this + 136);
  v17 = (char *)this + 128;
  if (*((char *)this + 223) < 0)
    std::string::__init_copy_ctor_external(&v18, *((const std::string::value_type **)this + 25), *((_QWORD *)this + 26));
  else
    v18 = *(std::string *)((char *)this + 200);
  v19 = (char *)this + 192;
  if (*((char *)this + 287) < 0)
    std::string::__init_copy_ctor_external(&v20, *((const std::string::value_type **)this + 33), *((_QWORD *)this + 34));
  else
    v20 = *(std::string *)((_BYTE *)this + 11);
  v21 = (char *)this + 256;
  if (*((char *)this + 351) < 0)
    std::string::__init_copy_ctor_external(&v22, *((const std::string::value_type **)this + 41), *((_QWORD *)this + 42));
  else
    v22 = *(std::string *)((char *)this + 328);
  v23 = (char *)this + 320;
  std::map<std::string,quasar::artifact::AppLmArtifactLifeCycleStage const&>::map[abi:ne180100]((uint64_t)this + 384, (const void **)&__p.__r_.__value_.__l.__data_, 6);
  for (n = 0; n != -24; n -= 4)
  {
    if (SHIBYTE(v22.__r_.__value_.__r.__words[n + 2]) < 0)
      operator delete(*(void **)((char *)&v22.__r_.__value_.__l.__data_ + n * 8));
  }
  return this;
}

void sub_1ADC308D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  quasar::artifact::AppLmArtifactLifeCycleStage *v25;
  quasar::artifact::AppLmArtifactLifeCycleStage *v26;
  quasar::artifact::AppLmArtifactLifeCycleStage *v27;
  quasar::artifact::AppLmArtifactLifeCycleStage *v28;
  quasar::artifact::AppLmArtifactLifeCycleStage *v29;
  quasar::artifact::AppLmArtifactLifeCycleStage *v30;

  quasar::artifact::AppLmArtifactLifeCycleStage::~AppLmArtifactLifeCycleStage(v30);
  quasar::artifact::AppLmArtifactLifeCycleStage::~AppLmArtifactLifeCycleStage(v29);
  quasar::artifact::AppLmArtifactLifeCycleStage::~AppLmArtifactLifeCycleStage(v28);
  quasar::artifact::AppLmArtifactLifeCycleStage::~AppLmArtifactLifeCycleStage(v27);
  quasar::artifact::AppLmArtifactLifeCycleStage::~AppLmArtifactLifeCycleStage(v26);
  quasar::artifact::AppLmArtifactLifeCycleStage::~AppLmArtifactLifeCycleStage(v25);
  _Unwind_Resume(a1);
}

void quasar::artifact::AppLmArtifactLifeCycleStage::~AppLmArtifactLifeCycleStage(quasar::artifact::AppLmArtifactLifeCycleStage *this)
{
  quasar::artifact::AppLmArtifactLifeCycleStage::~AppLmArtifactLifeCycleStage(this);
  JUMPOUT(0x1AF44D190);
}

{
  *(_QWORD *)this = &unk_1E5D3BCD0;
  std::__tree<std::string>::destroy((uint64_t)this + 40, *((char **)this + 6));
  if (*((char *)this + 31) < 0)
    operator delete(*((void **)this + 1));
}

uint64_t std::map<std::string,quasar::artifact::AppLmArtifactLifeCycleStage const&>::map[abi:ne180100](uint64_t a1, const void **a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v6;

  *(_QWORD *)(a1 + 8) = 0;
  v4 = (uint64_t *)(a1 + 8);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = a1 + 8;
  if (a3)
  {
    v6 = 32 * a3;
    do
    {
      std::__tree<std::__value_type<std::string,BOOL *>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL *>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,BOOL *> const&>((uint64_t **)a1, v4, a2, (uint64_t)a2);
      a2 += 4;
      v6 -= 32;
    }
    while (v6);
  }
  return a1;
}

void sub_1ADC30CC0(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<std::string>::destroy(v1, *(char **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t quasar::OnlineSeevaStepBigLmDecoder::OnlineSeevaStepBigLmDecoder(uint64_t a1, __int128 *a2)
{
  uint64_t v3;

  v3 = quasar::OnlineSeevaStepDecoder::OnlineSeevaStepDecoder(a1, a2);
  *(_QWORD *)v3 = &off_1E5D3A038;
  *(_QWORD *)(v3 + 1040) = &unk_1E5D33A48;
  *(_QWORD *)(v3 + 1048) = 0x203F000000;
  *(_QWORD *)(v3 + 1056) = 0x200000002;
  *(_BYTE *)(v3 + 1064) = 0;
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(v3 + 1072), "/cpu:0");
  *(_QWORD *)(a1 + 1104) = 0;
  *(_QWORD *)(a1 + 1096) = 0;
  *(_QWORD *)(a1 + 1112) = 0;
  *(_WORD *)(a1 + 1120) = 1;
  *(_QWORD *)(a1 + 1160) = 0;
  *(_QWORD *)(a1 + 1176) = 0;
  *(_QWORD *)(a1 + 1168) = 0;
  *(_QWORD *)(a1 + 1124) = 0;
  *(_QWORD *)(a1 + 1140) = 0;
  *(_QWORD *)(a1 + 1132) = 0;
  *(_QWORD *)(a1 + 1145) = 0;
  *(_OWORD *)(a1 + 1184) = xmmword_1AE1699E0;
  *(_DWORD *)(a1 + 1200) = 200;
  *(_QWORD *)(a1 + 1204) = 0;
  *(_OWORD *)(a1 + 1212) = xmmword_1AE1699F0;
  *(_DWORD *)(a1 + 1228) = 2;
  *(_BYTE *)(a1 + 1232) = 1;
  *(_QWORD *)(a1 + 1040) = &unk_1E5D33DE8;
  *(_OWORD *)(a1 + 1236) = xmmword_1AE169A00;
  *(_QWORD *)(a1 + 1252) = 0x4100000041000000;
  *(_QWORD *)(a1 + 1260) = 0x1F4000000010;
  *(_OWORD *)(a1 + 1284) = 0u;
  *(_DWORD *)(a1 + 1316) = 0;
  *(_OWORD *)(a1 + 1268) = 0u;
  *(_OWORD *)(a1 + 1300) = 0u;
  *(_OWORD *)(a1 + 1328) = 0u;
  *(_OWORD *)(a1 + 1344) = 0u;
  *(_OWORD *)(a1 + 1360) = 0u;
  *(_OWORD *)(a1 + 1376) = 0u;
  *(_OWORD *)(a1 + 1392) = 0u;
  *(_OWORD *)(a1 + 1408) = 0u;
  *(_OWORD *)(a1 + 1424) = 0u;
  *(_OWORD *)(a1 + 1440) = 0u;
  *(_OWORD *)(a1 + 1456) = 0u;
  *(_OWORD *)(a1 + 1472) = 0u;
  *(_OWORD *)(a1 + 1488) = 0u;
  *(_OWORD *)(a1 + 1504) = 0u;
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 1520), "wordmap");
  *(_QWORD *)(a1 + 1560) = 0;
  *(_OWORD *)(a1 + 1544) = 0u;
  *(_DWORD *)(a1 + 1568) = 7;
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 1576), "<unk>");
  *(_QWORD *)(a1 + 1656) = 0;
  *(_QWORD *)(a1 + 1648) = 0;
  *(_OWORD *)(a1 + 1608) = 0u;
  *(_OWORD *)(a1 + 1624) = 0u;
  *(_QWORD *)(a1 + 1640) = a1 + 1648;
  *(_OWORD *)(a1 + 1664) = 0u;
  *(_OWORD *)(a1 + 1680) = 0u;
  *(_OWORD *)(a1 + 1696) = 0u;
  *(_OWORD *)(a1 + 1712) = 0u;
  *(_OWORD *)(a1 + 1728) = 0u;
  *(_OWORD *)(a1 + 1744) = 0u;
  *(_OWORD *)(a1 + 1760) = 0u;
  *(_OWORD *)(a1 + 1776) = 0u;
  *(_OWORD *)(a1 + 1792) = 0u;
  *(_OWORD *)(a1 + 1808) = 0u;
  *(_OWORD *)(a1 + 1824) = 0u;
  *(_OWORD *)(a1 + 1840) = 0u;
  *(_OWORD *)(a1 + 1856) = 0u;
  return a1;
}

void sub_1ADC30EC0(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;
  void **v3;
  void **v4;
  void *v6;
  void *v7;

  if (*(char *)(v1 + 1567) < 0)
    operator delete(*v4);
  if (*(char *)(v1 + 1543) < 0)
    operator delete(*v3);
  if (*(char *)(v1 + 1519) < 0)
    operator delete(*(void **)(v1 + 1496));
  if (*(char *)(v1 + 1495) < 0)
    operator delete(*(void **)(v1 + 1472));
  if (*(char *)(v1 + 1471) < 0)
    operator delete(*(void **)(v1 + 1448));
  if (*(char *)(v1 + 1447) < 0)
    operator delete(*(void **)(v1 + 1424));
  if (*(char *)(v1 + 1423) < 0)
    operator delete(*(void **)(v1 + 1400));
  if (*(char *)(v1 + 1399) < 0)
    operator delete(*(void **)(v1 + 1376));
  if (*(char *)(v1 + 1375) < 0)
    operator delete(*(void **)(v1 + 1352));
  if (*(char *)(v1 + 1351) < 0)
    operator delete(*(void **)(v1 + 1328));
  v6 = *(void **)(v1 + 1296);
  if (v6)
  {
    *(_QWORD *)(v1 + 1304) = v6;
    operator delete(v6);
  }
  v7 = *(void **)(v1 + 1272);
  if (v7)
  {
    *(_QWORD *)(v1 + 1280) = v7;
    operator delete(v7);
  }
  kaldi::quasar::SeevaStepInferenceConfig::~SeevaStepInferenceConfig(v2);
  quasar::OnlineSeevaStepDecoder::~OnlineSeevaStepDecoder((quasar::OnlineSeevaStepDecoder *)v1);
  _Unwind_Resume(a1);
}

void quasar::OnlineSeevaStepBigLmDecoder::~OnlineSeevaStepBigLmDecoder(quasar::OnlineSeevaStepBigLmDecoder *this)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void **v6;

  *(_QWORD *)this = &off_1E5D3A038;
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this + 1856);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this + 1840);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this + 1824);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this + 1808);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this + 1792);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this + 1776);
  v6 = (void **)((char *)this + 1752);
  std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100](&v6);
  v6 = (void **)((char *)this + 1728);
  std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100](&v6);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this + 1712);
  v2 = (void *)*((_QWORD *)this + 211);
  if (v2)
  {
    *((_QWORD *)this + 212) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 208);
  if (v3)
  {
    *((_QWORD *)this + 209) = v3;
    operator delete(v3);
  }
  std::__tree<std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>>>::destroy((uint64_t)this + 1640, *((_QWORD **)this + 206));
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this + 1624);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this + 1608);
  if (*((char *)this + 1599) < 0)
    operator delete(*((void **)this + 197));
  if (*((char *)this + 1567) < 0)
    operator delete(*((void **)this + 193));
  if (*((char *)this + 1543) < 0)
    operator delete(*((void **)this + 190));
  if (*((char *)this + 1519) < 0)
    operator delete(*((void **)this + 187));
  if (*((char *)this + 1495) < 0)
    operator delete(*((void **)this + 184));
  if (*((char *)this + 1471) < 0)
    operator delete(*((void **)this + 181));
  if (*((char *)this + 1447) < 0)
    operator delete(*((void **)this + 178));
  if (*((char *)this + 1423) < 0)
    operator delete(*((void **)this + 175));
  if (*((char *)this + 1399) < 0)
    operator delete(*((void **)this + 172));
  if (*((char *)this + 1375) < 0)
    operator delete(*((void **)this + 169));
  if (*((char *)this + 1351) < 0)
    operator delete(*((void **)this + 166));
  v4 = (void *)*((_QWORD *)this + 162);
  if (v4)
  {
    *((_QWORD *)this + 163) = v4;
    operator delete(v4);
  }
  v5 = (void *)*((_QWORD *)this + 159);
  if (v5)
  {
    *((_QWORD *)this + 160) = v5;
    operator delete(v5);
  }
  *((_QWORD *)this + 130) = &unk_1E5D33A48;
  if (*((char *)this + 1183) < 0)
    operator delete(*((void **)this + 145));
  if (*((char *)this + 1151) < 0)
    operator delete(*((void **)this + 141));
  if (*((char *)this + 1119) < 0)
    operator delete(*((void **)this + 137));
  if (*((char *)this + 1095) < 0)
    operator delete(*((void **)this + 134));
  quasar::OnlineSeevaStepDecoder::~OnlineSeevaStepDecoder(this);
}

{
  quasar::OnlineSeevaStepBigLmDecoder::~OnlineSeevaStepBigLmDecoder(this);
  JUMPOUT(0x1AF44D190);
}

void quasar::OnlineSeevaStepBigLmDecoder::setLmeTags(uint64_t a1, uint64_t *a2, _QWORD *a3)
{
  uint64_t v4;
  uint64_t v5;
  std::vector<unsigned int>::size_type v6;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int WordId;
  int v15;
  int v16;
  int v17;
  int v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  _QWORD *v27;
  _QWORD *v28;
  std::vector<unsigned int>::size_type v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;

  v5 = *a2;
  v4 = a2[1];
  v6 = 0xAAAAAAAAAAAAAAABLL * ((v4 - *a2) >> 3);
  if (v6 != 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a3[1] - *a3) >> 3))
  {
    v45 = 0u;
    v46 = 0u;
    v43 = 0u;
    v44 = 0u;
    v41 = 0u;
    v42 = 0u;
    v39 = 0u;
    v40 = 0u;
    v37 = 0u;
    v38 = 0u;
    v35 = 0u;
    v36 = 0u;
    v33 = 0u;
    v34 = 0u;
    v31 = 0u;
    v32 = 0u;
    v30 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v30);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v30, (uint64_t)"number of start/end LME class tags doesn't match: ", 50);
    v28 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)" vs ", 4);
    std::ostream::operator<<();
    goto LABEL_42;
  }
  std::vector<int>::resize((std::vector<unsigned int> *)(a1 + 1272), 0xAAAAAAAAAAAAAAABLL * ((v4 - *a2) >> 3));
  std::vector<int>::resize((std::vector<unsigned int> *)(a1 + 1296), v6);
  v9 = 2 * *(_DWORD *)(a1 + 768);
  v29 = v6;
  if (v4 != v5)
  {
    v10 = 0;
    v11 = 0;
    if (v6 <= 1)
      v12 = 1;
    else
      v12 = v6;
    v13 = -1;
    while (1)
    {
      WordId = kaldi::quasar::Vocab::GetWordId(*(_QWORD *)(a1 + 864), (unsigned __int8 *)(*a2 + v10));
      if (WordId == *(_DWORD *)(a1 + 764))
        break;
      v15 = WordId;
      *(_DWORD *)(*(_QWORD *)(a1 + 1272) + 4 * v11) = WordId;
      v16 = kaldi::quasar::Vocab::GetWordId(*(_QWORD *)(a1 + 864), (unsigned __int8 *)(*a3 + v10));
      if (v16 == *(_DWORD *)(a1 + 764))
      {
        v45 = 0u;
        v46 = 0u;
        v43 = 0u;
        v44 = 0u;
        v41 = 0u;
        v42 = 0u;
        v39 = 0u;
        v40 = 0u;
        v37 = 0u;
        v38 = 0u;
        v35 = 0u;
        v36 = 0u;
        v33 = 0u;
        v34 = 0u;
        v31 = 0u;
        v32 = 0u;
        v30 = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v30);
        v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v30, (uint64_t)"cannot find ", 12);
        v25 = *a3 + v10;
        v26 = *(char *)(v25 + 23);
        if (v26 >= 0)
          v23 = *a3 + v10;
        else
          v23 = *(_QWORD *)v25;
        if (v26 >= 0)
          v24 = *(unsigned __int8 *)(v25 + 23);
        else
          v24 = *(_QWORD *)(v25 + 8);
        goto LABEL_41;
      }
      if (v15 <= v13)
        v17 = v13;
      else
        v17 = v15;
      if (v15 >= v9)
        v18 = v9;
      else
        v18 = v15;
      *(_DWORD *)(*(_QWORD *)(a1 + 1296) + 4 * v11) = v16;
      if (v16 >= v18)
        v9 = v18;
      else
        v9 = v16;
      if (v16 <= v17)
        v13 = v17;
      else
        v13 = v16;
      ++v11;
      v10 += 24;
      if (v12 == v11)
        goto LABEL_24;
    }
    v45 = 0u;
    v46 = 0u;
    v43 = 0u;
    v44 = 0u;
    v41 = 0u;
    v42 = 0u;
    v39 = 0u;
    v40 = 0u;
    v37 = 0u;
    v38 = 0u;
    v35 = 0u;
    v36 = 0u;
    v33 = 0u;
    v34 = 0u;
    v31 = 0u;
    v32 = 0u;
    v30 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v30);
    v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v30, (uint64_t)"cannot find ", 12);
    v21 = *a2 + v10;
    v22 = *(char *)(v21 + 23);
    if (v22 >= 0)
      v23 = *a2 + v10;
    else
      v23 = *(_QWORD *)v21;
    if (v22 >= 0)
      v24 = *(unsigned __int8 *)(v21 + 23);
    else
      v24 = *(_QWORD *)(v21 + 8);
LABEL_41:
    v27 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, v23, v24);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v27, " in the vocab file");
LABEL_42:
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&v30);
  }
  v13 = -1;
LABEL_24:
  if (v13 - v9 + 1 == 2 * v29)
  {
    *(_DWORD *)(a1 + 1320) = v9;
    *(_DWORD *)(a1 + 1324) = v13;
  }
  else if (quasar::gLogLevel >= 4)
  {
    v45 = 0u;
    v46 = 0u;
    v43 = 0u;
    v44 = 0u;
    v41 = 0u;
    v42 = 0u;
    v39 = 0u;
    v40 = 0u;
    v37 = 0u;
    v38 = 0u;
    v35 = 0u;
    v36 = 0u;
    v33 = 0u;
    v34 = 0u;
    v31 = 0u;
    v32 = 0u;
    v30 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v30);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v30, (uint64_t)"there are ", 10);
    v19 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)" LME classes, their IDs are not contiguous", 42);
    quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&v30);
  }
}

void sub_1ADC31518(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)va);
  _Unwind_Resume(a1);
}

void sub_1ADC3152C(uint64_t a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)va);
}

void quasar::OnlineSeevaStepBigLmDecoder::registerParams(quasar::QsrTextSymbolTable **this, quasar::SystemConfig *a2)
{
  char *v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  void *v8[2];
  char v9;
  void *__p[2];
  char v11;

  kaldi::quasar::SeevaStepLmInferenceConfig::Register((uint64_t)(this + 130), (uint64_t)a2);
  std::string::basic_string[abi:ne180100]<0>(__p, "seeva-step");
  quasar::SystemConfig::enforceMinVersion((uint64_t)a2, 152, 0, (uint64_t)__p);
  if (v11 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "encoder-model-file");
  std::string::basic_string[abi:ne180100]<0>(v8, "seeva inference encoder graph file");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)__p, (uint64_t)(this + 56), (uint64_t)v8, 1, 152, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v9 < 0)
    operator delete(v8[0]);
  if (v11 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "decoder-model-file");
  std::string::basic_string[abi:ne180100]<0>(v8, "seeva inference decoder graph file");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)__p, (uint64_t)(this + 59), (uint64_t)v8, 1, 152, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v9 < 0)
    operator delete(v8[0]);
  if (v11 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "num-encoder-states");
  std::string::basic_string[abi:ne180100]<0>(v8, "number of encoder states");
  quasar::SystemConfig::Register<int>((uint64_t)a2, (const void **)__p, (uint64_t)this + 772, (uint64_t)v8, 1, 152, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v9 < 0)
    operator delete(v8[0]);
  if (v11 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "num-decoder-states");
  std::string::basic_string[abi:ne180100]<0>(v8, "number of decoder states");
  quasar::SystemConfig::Register<int>((uint64_t)a2, (const void **)__p, (uint64_t)(this + 97), (uint64_t)v8, 1, 152, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v9 < 0)
    operator delete(v8[0]);
  if (v11 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "align-state-list");
  std::string::basic_string[abi:ne180100]<0>(v8, "alignment state indices in the decoder states");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)__p, (uint64_t)(this + 104), (uint64_t)v8, 1, 152, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v9 < 0)
    operator delete(v8[0]);
  if (v11 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "vocab-file");
  std::string::basic_string[abi:ne180100]<0>(v8, "the vocab file for the model output token");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)__p, (uint64_t)(this + 62), (uint64_t)v8, 1, 152, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v9 < 0)
    operator delete(v8[0]);
  if (v11 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "vocab-is-binary");
  std::string::basic_string[abi:ne180100]<0>(v8, "vocab file is binary");
  quasar::SystemConfig::Register<BOOL>((uint64_t)a2, (const void **)__p, (uint64_t)(this + 65), (uint64_t)v8, 1, 152, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v9 < 0)
    operator delete(v8[0]);
  if (v11 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "model-format-version");
  std::string::basic_string[abi:ne180100]<0>(v8, "model format version");
  quasar::SystemConfig::Register<int>((uint64_t)a2, (const void **)__p, (uint64_t)this + 524, (uint64_t)v8, 1, 152, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v9 < 0)
    operator delete(v8[0]);
  if (v11 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "transform-file");
  std::string::basic_string[abi:ne180100]<0>(v8, "feature transform file");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)__p, (uint64_t)(this + 66), (uint64_t)v8, 0, 152, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v9 < 0)
    operator delete(v8[0]);
  if (v11 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "lme-start-tag-list");
  std::string::basic_string[abi:ne180100]<0>(v8, "a list of LME start tag");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)__p, (uint64_t)(this + 166), (uint64_t)v8, 0, 152, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v9 < 0)
    operator delete(v8[0]);
  if (v11 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "lme-end-tag-list");
  std::string::basic_string[abi:ne180100]<0>(v8, "a list of LME end tag");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)__p, (uint64_t)(this + 169), (uint64_t)v8, 0, 152, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v9 < 0)
    operator delete(v8[0]);
  if (v11 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "speller-fst-file");
  std::string::basic_string[abi:ne180100]<0>(v8, "the speller FST file");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)__p, (uint64_t)(this + 172), (uint64_t)v8, 1, 152, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v9 < 0)
    operator delete(v8[0]);
  if (v11 < 0)
    operator delete(__p[0]);
  v4 = (char *)operator new(0xA8uLL);
  *((_QWORD *)v4 + 2) = 0;
  *(_QWORD *)v4 = &unk_1E5D43328;
  *((_QWORD *)v4 + 1) = 0;
  *((_QWORD *)v4 + 19) = 0;
  *((_QWORD *)v4 + 20) = 0;
  *((_QWORD *)v4 + 18) = 0;
  *(_OWORD *)(v4 + 40) = 0u;
  *(_OWORD *)(v4 + 56) = 0u;
  *(_OWORD *)(v4 + 72) = 0u;
  *(_OWORD *)(v4 + 88) = 0u;
  *(_OWORD *)(v4 + 104) = 0u;
  *(_OWORD *)(v4 + 120) = 0u;
  *((_DWORD *)v4 + 34) = 0;
  __p[1] = v4;
  *(_OWORD *)(v4 + 24) = 0u;
  __p[0] = v4 + 24;
  std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100]((uint64_t)(this + 214), (__int128 *)__p);
  v5 = (std::__shared_weak_count *)__p[1];
  if (__p[1])
  {
    v6 = (unint64_t *)((char *)__p[1] + 8);
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  quasar::QsrTextSymbolTable::Register(this[214], a2, 152, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  std::string::basic_string[abi:ne180100]<0>(__p, "inv-g-fst-file");
  std::string::basic_string[abi:ne180100]<0>(v8, "Inverted small grammar FST filename");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)__p, (uint64_t)(this + 175), (uint64_t)v8, 0, 152, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v9 < 0)
    operator delete(v8[0]);
  if (v11 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "big-g-fst-file-list");
  std::string::basic_string[abi:ne180100]<0>(v8, "list of BigGrammar FST filename, use comma to separate multiple ones");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)__p, (uint64_t)(this + 178), (uint64_t)v8, 0, 152, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v9 < 0)
    operator delete(v8[0]);
  if (v11 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "big-g-fst-weight-list");
  std::string::basic_string[abi:ne180100]<0>(v8, "the interpolation weights for the FST LMs, use comma to separate multiple ones");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)__p, (uint64_t)(this + 184), (uint64_t)v8, 0, 152, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v9 < 0)
    operator delete(v8[0]);
  if (v11 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "big-g-nnet-file-list");
  std::string::basic_string[abi:ne180100]<0>(v8, "list of BigGrammar NNLM filename, use comma to separate multiple ones");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)__p, (uint64_t)(this + 181), (uint64_t)v8, 0, 152, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v9 < 0)
    operator delete(v8[0]);
  if (v11 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "nnet-map-file-ext");
  std::string::basic_string[abi:ne180100]<0>(v8, "the file extension name of the corresponding NNLM word map file");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)__p, (uint64_t)(this + 190), (uint64_t)v8, 0, 152, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v9 < 0)
    operator delete(v8[0]);
  if (v11 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "big-g-nnet-weight-list");
  std::string::basic_string[abi:ne180100]<0>(v8, "the interpolation weights for the NNLMs, use comma to separate multiple ones");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)__p, (uint64_t)(this + 187), (uint64_t)v8, 0, 152, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v9 < 0)
    operator delete(v8[0]);
  if (v11 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "nnlm-nce-norm-factor-list");
  std::string::basic_string[abi:ne180100]<0>(v8, "the normalization factor for NCE trained NNLMs, use comma to separate multiple ones");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)__p, (uint64_t)(this + 193), (uint64_t)v8, 0, 26, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v9 < 0)
    operator delete(v8[0]);
  if (v11 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "rnnlm-max-context-size");
  std::string::basic_string[abi:ne180100]<0>(v8, "maximal context for RNN style LM, no-op for other style of LMs");
  quasar::SystemConfig::Register<int>((uint64_t)a2, (const void **)__p, (uint64_t)(this + 196), (uint64_t)v8, 0, 152, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v9 < 0)
    operator delete(v8[0]);
  if (v11 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "lm-unknown-word");
  std::string::basic_string[abi:ne180100]<0>(v8, "the unknown word (OOV) in the LM");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)__p, (uint64_t)(this + 197), (uint64_t)v8, 0, 152, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v9 < 0)
    operator delete(v8[0]);
  if (v11 < 0)
    operator delete(__p[0]);
}

void sub_1ADC31F40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a16 < 0)
    operator delete(__p);
  if (a22 < 0)
    operator delete(a17);
  _Unwind_Resume(exception_object);
}

void kaldi::quasar::SeevaStepLmInferenceConfig::Register(uint64_t a1, uint64_t a2)
{
  void *__p[2];
  char v5;
  void *v6[2];
  char v7;

  kaldi::quasar::SeevaStepInferenceConfig::Register(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v6, "lme-score-scale");
  std::string::basic_string[abi:ne180100]<0>(__p, "scale the LME FST score when LME is active");
  (*(void (**)(uint64_t, void **, uint64_t, void **))(*(_QWORD *)a2 + 24))(a2, v6, a1 + 200, __p);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
  std::string::basic_string[abi:ne180100]<0>(v6, "nonlme-score-scale");
  std::string::basic_string[abi:ne180100]<0>(__p, "scale the nonLME arc score when LME is active.");
  (*(void (**)(uint64_t, void **, uint64_t, void **))(*(_QWORD *)a2 + 24))(a2, v6, a1 + 204, __p);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
  std::string::basic_string[abi:ne180100]<0>(v6, "lm-score-scale");
  std::string::basic_string[abi:ne180100]<0>(__p, "scale external LM score when available");
  (*(void (**)(uint64_t, void **, uint64_t, void **))(*(_QWORD *)a2 + 24))(a2, v6, a1 + 208, __p);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
  std::string::basic_string[abi:ne180100]<0>(v6, "lm-miss-penalty");
  std::string::basic_string[abi:ne180100]<0>(__p, "penalty for missing LM arc");
  (*(void (**)(uint64_t, void **, uint64_t, void **))(*(_QWORD *)a2 + 24))(a2, v6, a1 + 212, __p);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
  std::string::basic_string[abi:ne180100]<0>(v6, "lm-miss-final-penalty");
  std::string::basic_string[abi:ne180100]<0>(__p, "penalty for missing LM arc in final");
  (*(void (**)(uint64_t, void **, uint64_t, void **))(*(_QWORD *)a2 + 24))(a2, v6, a1 + 216, __p);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
  std::string::basic_string[abi:ne180100]<0>(v6, "lm-beam");
  std::string::basic_string[abi:ne180100]<0>(__p, "use this beam value for the external LM");
  (*(void (**)(uint64_t, void **, uint64_t, void **))(*(_QWORD *)a2 + 8))(a2, v6, a1 + 220, __p);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
  std::string::basic_string[abi:ne180100]<0>(v6, "lme-beam");
  std::string::basic_string[abi:ne180100]<0>(__p, "use this beam value for the LME arcs");
  (*(void (**)(uint64_t, void **, uint64_t, void **))(*(_QWORD *)a2 + 8))(a2, v6, a1 + 224, __p);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
  std::string::basic_string[abi:ne180100]<0>(v6, "length-penalty-lm");
  std::string::basic_string[abi:ne180100]<0>(__p, "the length penalty value when using external LM");
  (*(void (**)(uint64_t, void **, uint64_t, void **))(*(_QWORD *)a2 + 24))(a2, v6, a1 + 228, __p);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
}

void sub_1ADC32324(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

void quasar::OnlineSeevaStepBigLmDecoder::finishInit(quasar::OnlineSeevaStepBigLmDecoder *this)
{
  _OWORD *v2;
  __int128 v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t *v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t *v15;
  const void **v16;
  const void **v17;
  _QWORD *v18;
  _OWORD *v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char *v25;
  uint64_t v26;
  char *v27;
  _QWORD *v28;
  _QWORD *v29;
  char *v30;
  __int128 v31;
  __int128 v32;
  _OWORD *v33;
  uint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *p_shared_owners;
  unint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  _QWORD *v44;
  _OWORD *v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  char *v51;
  uint64_t v52;
  char *v53;
  _QWORD *v54;
  _QWORD *v55;
  char *v56;
  __int128 v57;
  __int128 v58;
  _OWORD *v59;
  uint64_t v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  uint64_t v64;
  float *v65;
  float *v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  _DWORD *v71;
  char *v72;
  char *v73;
  uint64_t v74;
  _DWORD *v75;
  int v76;
  uint64_t v77;
  int v78;
  _QWORD *v79;
  int v80;
  char *v81;
  uint64_t v82;
  _QWORD *v83;
  _QWORD *v84;
  void *__p;
  char *v86;
  uint64_t v87;
  void *v88[2];
  uint64_t v89;
  __int128 v90;
  uint64_t v91;
  const void **v92;
  const void **v93;
  uint64_t v94;
  _QWORD v95[3];
  uint64_t v96[3];
  __int128 v97[2];
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;

  v2 = (_OWORD *)((char *)this + 552);
  *((_BYTE *)this + 576) = *((_BYTE *)this + 1064);
  *((_OWORD *)this + 35) = *(_OWORD *)((char *)this + 1048);
  std::string::operator=((std::string *)((char *)this + 584), (const std::string *)((char *)this + 1072));
  std::string::operator=((std::string *)((char *)this + 608), (const std::string *)((char *)this + 1096));
  *((_QWORD *)this + 79) = *((_QWORD *)this + 140);
  std::string::operator=((std::string *)((char *)this + 640), (const std::string *)this + 47);
  *((_BYTE *)this + 664) = *((_BYTE *)this + 1152);
  std::string::operator=((std::string *)this + 28, (const std::string *)((char *)this + 1160));
  v3 = *((_OWORD *)this + 75);
  v2[9] = *((_OWORD *)this + 74);
  v2[10] = v3;
  v2[11] = *((_OWORD *)this + 76);
  *((_QWORD *)this + 93) = *((_QWORD *)this + 154);
  quasar::OnlineSeevaStepDecoder::finishInit(this);
  if (*((_DWORD *)this + 298) > *((_DWORD *)this + 315))
  {
    v111 = 0u;
    v112 = 0u;
    v109 = 0u;
    v110 = 0u;
    v107 = 0u;
    v108 = 0u;
    v105 = 0u;
    v106 = 0u;
    v103 = 0u;
    v104 = 0u;
    v101 = 0u;
    v102 = 0u;
    v99 = 0u;
    v100 = 0u;
    v98 = 0u;
    memset(v97, 0, sizeof(v97));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v97);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v97, (uint64_t)"the lm beam should be no less than the model beam, ", 51);
    v84 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v84, (uint64_t)" vs ", 4);
    std::ostream::operator<<();
    goto LABEL_133;
  }
  if (*((char *)this + 1423) < 0)
    v4 = *((_QWORD *)this + 176);
  else
    v4 = *((unsigned __int8 *)this + 1423);
  if (v4)
  {
    (*(void (**)(__int128 *__return_ptr, _QWORD, char *))(**((_QWORD **)this + 46) + 16))(v97, *((_QWORD *)this + 46), (char *)this + 1400);
    std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100]((uint64_t)this + 1624, v97);
    v5 = (std::__shared_weak_count *)*((_QWORD *)&v97[0] + 1);
    if (*((_QWORD *)&v97[0] + 1))
    {
      v6 = (unint64_t *)(*((_QWORD *)&v97[0] + 1) + 8);
      do
        v7 = __ldaxr(v6);
      while (__stlxr(v7 - 1, v6));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    *(_QWORD *)&v97[0] = (char *)this + 1400;
    v8 = std::__tree<std::__value_type<std::string,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)this + 205, (const void **)this + 175, (uint64_t)&std::piecewise_construct, (__int128 **)v97);
    std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::operator=[abi:ne180100](v8 + 7, (uint64_t *)this + 203);
    if ((*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(**((_QWORD **)this + 203) + 64))(*((_QWORD *)this + 203), 0x10000000, 0) != 0x10000000)
    {
      v111 = 0u;
      v112 = 0u;
      v109 = 0u;
      v110 = 0u;
      v107 = 0u;
      v108 = 0u;
      v105 = 0u;
      v106 = 0u;
      v103 = 0u;
      v104 = 0u;
      v101 = 0u;
      v102 = 0u;
      v99 = 0u;
      v100 = 0u;
      v98 = 0u;
      memset(v97, 0, sizeof(v97));
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v97);
      std::operator<<[abi:ne180100]<std::char_traits<char>>(v97, "gInvFst: input label is not sorted!");
LABEL_133:
      quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v97);
    }
    std::allocate_shared[abi:ne180100]<fst::BackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,std::allocator<fst::BackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>&,void>(*((_QWORD *)this + 203), v97);
    std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100]((uint64_t)this + 1776, v97);
    v9 = (std::__shared_weak_count *)*((_QWORD *)&v97[0] + 1);
    if (*((_QWORD *)&v97[0] + 1))
    {
      v10 = (unint64_t *)(*((_QWORD *)&v97[0] + 1) + 8);
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 - 1, v10));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
    if (quasar::gLogLevel >= 4)
    {
      v111 = 0u;
      v112 = 0u;
      v109 = 0u;
      v110 = 0u;
      v107 = 0u;
      v108 = 0u;
      v105 = 0u;
      v106 = 0u;
      v103 = 0u;
      v104 = 0u;
      v101 = 0u;
      v102 = 0u;
      v99 = 0u;
      v100 = 0u;
      v98 = 0u;
      memset(v97, 0, sizeof(v97));
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v97);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v97, (uint64_t)"loaded an inverted G, make sure the speller FST is weighted", 59);
LABEL_21:
      quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)v97);
    }
  }
  else if (quasar::gLogLevel >= 4)
  {
    v111 = 0u;
    v112 = 0u;
    v109 = 0u;
    v110 = 0u;
    v107 = 0u;
    v108 = 0u;
    v105 = 0u;
    v106 = 0u;
    v103 = 0u;
    v104 = 0u;
    v101 = 0u;
    v102 = 0u;
    v99 = 0u;
    v100 = 0u;
    v98 = 0u;
    memset(v97, 0, sizeof(v97));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v97);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v97, (uint64_t)"do not have an inverted G, make sure the speller FST is unweighted", 66);
    goto LABEL_21;
  }
  (*(void (**)(__int128 *__return_ptr, _QWORD, char *))(**((_QWORD **)this + 46) + 16))(v97, *((_QWORD *)this + 46), (char *)this + 1376);
  std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100]((uint64_t)this + 1608, v97);
  v12 = (std::__shared_weak_count *)*((_QWORD *)&v97[0] + 1);
  if (*((_QWORD *)&v97[0] + 1))
  {
    v13 = (unint64_t *)(*((_QWORD *)&v97[0] + 1) + 8);
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  *(_QWORD *)&v97[0] = (char *)this + 1376;
  v15 = std::__tree<std::__value_type<std::string,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)this + 205, (const void **)this + 172, (uint64_t)&std::piecewise_construct, (__int128 **)v97);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::operator=[abi:ne180100](v15 + 7, (uint64_t *)this + 201);
  if ((*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(**((_QWORD **)this + 201) + 64))(*((_QWORD *)this + 201), 0x10000000, 0) != 0x10000000)
  {
    v111 = 0u;
    v112 = 0u;
    v109 = 0u;
    v110 = 0u;
    v107 = 0u;
    v108 = 0u;
    v105 = 0u;
    v106 = 0u;
    v103 = 0u;
    v104 = 0u;
    v101 = 0u;
    v102 = 0u;
    v99 = 0u;
    v100 = 0u;
    v98 = 0u;
    memset(v97, 0, sizeof(v97));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v97);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v97, "spellerFst: input label is not sorted");
    goto LABEL_133;
  }
  memset(v96, 0, sizeof(v96));
  memset(v95, 0, sizeof(v95));
  kaldi::SplitStringToVector((const std::string *)((char *)this + 1328), ",", 1, (uint64_t)v96);
  kaldi::SplitStringToVector((const std::string *)((char *)this + 1352), ",", 1, (uint64_t)v95);
  quasar::OnlineSeevaStepBigLmDecoder::setLmeTags((uint64_t)this, v96, v95);
  if (*((char *)this + 1447) < 0)
  {
    if (*((_QWORD *)this + 179))
      goto LABEL_34;
  }
  else if (*((_BYTE *)this + 1447))
  {
    goto LABEL_34;
  }
  if ((*((char *)this + 1471) & 0x80000000) == 0)
  {
    if (*((_BYTE *)this + 1471))
      goto LABEL_34;
LABEL_122:
    v111 = 0u;
    v112 = 0u;
    v109 = 0u;
    v110 = 0u;
    v107 = 0u;
    v108 = 0u;
    v105 = 0u;
    v106 = 0u;
    v103 = 0u;
    v104 = 0u;
    v101 = 0u;
    v102 = 0u;
    v99 = 0u;
    v100 = 0u;
    v98 = 0u;
    memset(v97, 0, sizeof(v97));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v97);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v97, (uint64_t)"No BigG FST or NNLM specified. Hint: This is a BigLm decoder.", 61);
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v97);
  }
  if (!*((_QWORD *)this + 182))
    goto LABEL_122;
LABEL_34:
  v92 = 0;
  v93 = 0;
  v94 = 0;
  kaldi::SplitStringToVector((const std::string *)((char *)this + 1424), ",", 1, (uint64_t)&v92);
  v16 = v92;
  v17 = v93;
  if (v92 != v93)
  {
    v18 = (_QWORD *)((char *)this + 1728);
    do
    {
      (*(void (**)(__int128 *__return_ptr, _QWORD, const void **))(**((_QWORD **)this + 46) + 16))(&v90, *((_QWORD *)this + 46), v16);
      v19 = (_OWORD *)*((_QWORD *)this + 217);
      v20 = *((_QWORD *)this + 218);
      if ((unint64_t)v19 >= v20)
      {
        v21 = ((uint64_t)v19 - *v18) >> 4;
        v22 = v21 + 1;
        if ((unint64_t)(v21 + 1) >> 60)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v23 = v20 - *v18;
        if (v23 >> 3 > v22)
          v22 = v23 >> 3;
        if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFFF0)
          v24 = 0xFFFFFFFFFFFFFFFLL;
        else
          v24 = v22;
        *(_QWORD *)&v98 = (char *)this + 1744;
        v25 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<int,unsigned long>>>((uint64_t)this + 1744, v24);
        v27 = &v25[16 * v21];
        *(_OWORD *)v27 = v90;
        v90 = 0uLL;
        v28 = (_QWORD *)*((_QWORD *)this + 217);
        v29 = (_QWORD *)*((_QWORD *)this + 216);
        if (v28 == v29)
        {
          v32 = (__int128)vdupq_n_s64((unint64_t)v28);
          v30 = &v25[16 * v21];
        }
        else
        {
          v30 = &v25[16 * v21];
          do
          {
            v31 = *((_OWORD *)v28 - 1);
            v28 -= 2;
            *((_OWORD *)v30 - 1) = v31;
            v30 -= 16;
            *v28 = 0;
            v28[1] = 0;
          }
          while (v28 != v29);
          v32 = *(_OWORD *)v18;
        }
        v33 = v27 + 16;
        *((_QWORD *)this + 216) = v30;
        *((_QWORD *)this + 217) = v27 + 16;
        *(__int128 *)((char *)v97 + 8) = v32;
        v34 = *((_QWORD *)this + 218);
        *((_QWORD *)this + 218) = &v25[16 * v26];
        *((_QWORD *)&v97[1] + 1) = v34;
        *(_QWORD *)&v97[0] = v32;
        std::__split_buffer<std::shared_ptr<quasar::FeatureExtractor>>::~__split_buffer((uint64_t)v97);
        v35 = (std::__shared_weak_count *)*((_QWORD *)&v90 + 1);
        *((_QWORD *)this + 217) = v33;
        if (v35)
        {
          p_shared_owners = (unint64_t *)&v35->__shared_owners_;
          do
            v37 = __ldaxr(p_shared_owners);
          while (__stlxr(v37 - 1, p_shared_owners));
          if (!v37)
          {
            ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
            std::__shared_weak_count::__release_weak(v35);
          }
        }
      }
      else
      {
        *v19 = v90;
        *((_QWORD *)this + 217) = v19 + 1;
      }
      if ((*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(**(_QWORD **)(*((_QWORD *)this + 217) - 16) + 64))(*(_QWORD *)(*((_QWORD *)this + 217) - 16), 0x10000000, 0) != 0x10000000)
      {
        v111 = 0u;
        v112 = 0u;
        v109 = 0u;
        v110 = 0u;
        v107 = 0u;
        v108 = 0u;
        v105 = 0u;
        v106 = 0u;
        v103 = 0u;
        v104 = 0u;
        v101 = 0u;
        v102 = 0u;
        v99 = 0u;
        v100 = 0u;
        v98 = 0u;
        memset(v97, 0, sizeof(v97));
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v97);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v97, (uint64_t)"bigGFst: input label is not sorted!", 35);
        quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v97);
      }
      v38 = *((_QWORD *)this + 217);
      *(_QWORD *)&v97[0] = v16;
      v39 = std::__tree<std::__value_type<std::string,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)this + 205, v16, (uint64_t)&std::piecewise_construct, (__int128 **)v97);
      std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::operator=[abi:ne180100](v39 + 7, (uint64_t *)(v38 - 16));
      v16 += 3;
    }
    while (v16 != v17);
  }
  v90 = 0uLL;
  v91 = 0;
  kaldi::SplitStringToVector((const std::string *)((char *)this + 1448), ",", 1, (uint64_t)&v90);
  if (*((char *)this + 1567) < 0)
    v40 = *((_QWORD *)this + 194);
  else
    v40 = *((unsigned __int8 *)this + 1567);
  if (v40)
  {
    if ((kaldi::SplitStringToFloats<float>((uint64_t)this + 1544, ",", 1, (_QWORD *)this + 211) & 1) == 0)
    {
      v111 = 0u;
      v112 = 0u;
      v109 = 0u;
      v110 = 0u;
      v107 = 0u;
      v108 = 0u;
      v105 = 0u;
      v106 = 0u;
      v103 = 0u;
      v104 = 0u;
      v101 = 0u;
      v102 = 0u;
      v99 = 0u;
      v100 = 0u;
      v98 = 0u;
      memset(v97, 0, sizeof(v97));
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v97);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v97, (uint64_t)"Could not read the NNLM normalization factor info", 49);
      quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v97);
    }
    v42 = *((_QWORD *)&v90 + 1);
    v41 = v90;
    if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)&v90 + 1) - v90) >> 3) != (uint64_t)(*((_QWORD *)this + 212)
                                                                                         - *((_QWORD *)this + 211)) >> 2)
    {
      v111 = 0u;
      v112 = 0u;
      v109 = 0u;
      v110 = 0u;
      v107 = 0u;
      v108 = 0u;
      v105 = 0u;
      v106 = 0u;
      v103 = 0u;
      v104 = 0u;
      v101 = 0u;
      v102 = 0u;
      v99 = 0u;
      v100 = 0u;
      v98 = 0u;
      memset(v97, 0, sizeof(v97));
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v97);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v97, (uint64_t)"the number of NNLM files and the number of NNLM norm factors do not match", 73);
      quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v97);
    }
  }
  else
  {
    LODWORD(v97[0]) = 0;
    std::vector<float>::assign((char **)this + 211, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)&v90 + 1) - v90) >> 3), v97);
    v42 = *((_QWORD *)&v90 + 1);
    v41 = v90;
  }
  if (v42 != v41)
  {
    v43 = 0;
    v44 = (_QWORD *)((char *)this + 1752);
    do
    {
      quasar::ModelLoader::readNeuralNetworkLm(*((_QWORD **)this + 46), v41 + 24 * v43, (uint64_t)this + 1520, 1u, *((_DWORD *)this + 392), (uint64_t *)v88, *(float *)(*((_QWORD *)this + 211) + 4 * v43));
      v45 = (_OWORD *)*((_QWORD *)this + 220);
      v46 = *((_QWORD *)this + 221);
      if ((unint64_t)v45 >= v46)
      {
        v47 = ((uint64_t)v45 - *v44) >> 4;
        v48 = v47 + 1;
        if ((unint64_t)(v47 + 1) >> 60)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v49 = v46 - *v44;
        if (v49 >> 3 > v48)
          v48 = v49 >> 3;
        if ((unint64_t)v49 >= 0x7FFFFFFFFFFFFFF0)
          v50 = 0xFFFFFFFFFFFFFFFLL;
        else
          v50 = v48;
        *(_QWORD *)&v98 = (char *)this + 1768;
        v51 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<int,unsigned long>>>((uint64_t)this + 1768, v50);
        v53 = &v51[16 * v47];
        *(_OWORD *)v53 = *(_OWORD *)v88;
        v88[0] = 0;
        v88[1] = 0;
        v54 = (_QWORD *)*((_QWORD *)this + 220);
        v55 = (_QWORD *)*((_QWORD *)this + 219);
        if (v54 == v55)
        {
          v58 = (__int128)vdupq_n_s64((unint64_t)v54);
          v56 = &v51[16 * v47];
        }
        else
        {
          v56 = &v51[16 * v47];
          do
          {
            v57 = *((_OWORD *)v54 - 1);
            v54 -= 2;
            *((_OWORD *)v56 - 1) = v57;
            v56 -= 16;
            *v54 = 0;
            v54[1] = 0;
          }
          while (v54 != v55);
          v58 = *(_OWORD *)v44;
        }
        v59 = v53 + 16;
        *((_QWORD *)this + 219) = v56;
        *((_QWORD *)this + 220) = v53 + 16;
        *(__int128 *)((char *)v97 + 8) = v58;
        v60 = *((_QWORD *)this + 221);
        *((_QWORD *)this + 221) = &v51[16 * v52];
        *((_QWORD *)&v97[1] + 1) = v60;
        *(_QWORD *)&v97[0] = v58;
        std::__split_buffer<std::shared_ptr<quasar::FeatureExtractor>>::~__split_buffer((uint64_t)v97);
        v61 = (std::__shared_weak_count *)v88[1];
        *((_QWORD *)this + 220) = v59;
        if (v61)
        {
          v62 = (unint64_t *)&v61->__shared_owners_;
          do
            v63 = __ldaxr(v62);
          while (__stlxr(v63 - 1, v62));
          if (!v63)
          {
            ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
            std::__shared_weak_count::__release_weak(v61);
          }
        }
      }
      else
      {
        *v45 = *(_OWORD *)v88;
        *((_QWORD *)this + 220) = v45 + 1;
      }
      ++v43;
      v41 = v90;
    }
    while (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)&v90 + 1) - v90) >> 3) > v43);
  }
  v88[0] = 0;
  v88[1] = 0;
  v89 = 0;
  __p = 0;
  v86 = 0;
  v87 = 0;
  if ((kaldi::SplitStringToFloats<float>((uint64_t)this + 1472, ",", 1, v88) & 1) == 0)
  {
    v111 = 0u;
    v112 = 0u;
    v109 = 0u;
    v110 = 0u;
    v107 = 0u;
    v108 = 0u;
    v105 = 0u;
    v106 = 0u;
    v103 = 0u;
    v104 = 0u;
    v101 = 0u;
    v102 = 0u;
    v99 = 0u;
    v100 = 0u;
    v98 = 0u;
    memset(v97, 0, sizeof(v97));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v97);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v97, (uint64_t)"Could not read FST LM interpolation weight info", 47);
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v97);
  }
  if ((uint64_t)(*((_QWORD *)this + 217) - *((_QWORD *)this + 216)) >> 4 != ((char *)v88[1] - (char *)v88[0]) >> 2)
  {
    v111 = 0u;
    v112 = 0u;
    v109 = 0u;
    v110 = 0u;
    v107 = 0u;
    v108 = 0u;
    v105 = 0u;
    v106 = 0u;
    v103 = 0u;
    v104 = 0u;
    v101 = 0u;
    v102 = 0u;
    v99 = 0u;
    v100 = 0u;
    v98 = 0u;
    memset(v97, 0, sizeof(v97));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v97);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v97, (uint64_t)"The number of big FST LMs and the number of weights mismatch", 60);
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v97);
  }
  if ((kaldi::SplitStringToFloats<float>((uint64_t)this + 1496, ",", 1, &__p) & 1) == 0)
  {
    v111 = 0u;
    v112 = 0u;
    v109 = 0u;
    v110 = 0u;
    v107 = 0u;
    v108 = 0u;
    v105 = 0u;
    v106 = 0u;
    v103 = 0u;
    v104 = 0u;
    v101 = 0u;
    v102 = 0u;
    v99 = 0u;
    v100 = 0u;
    v98 = 0u;
    memset(v97, 0, sizeof(v97));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v97);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v97, (uint64_t)"Could not read NN LM interpolation weight info", 46);
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v97);
  }
  if ((uint64_t)(*((_QWORD *)this + 220) - *((_QWORD *)this + 219)) >> 4 != (v86 - (_BYTE *)__p) >> 2)
  {
    v111 = 0u;
    v112 = 0u;
    v109 = 0u;
    v110 = 0u;
    v107 = 0u;
    v108 = 0u;
    v105 = 0u;
    v106 = 0u;
    v103 = 0u;
    v104 = 0u;
    v101 = 0u;
    v102 = 0u;
    v99 = 0u;
    v100 = 0u;
    v98 = 0u;
    memset(v97, 0, sizeof(v97));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v97);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v97, (uint64_t)"The number of big NN LMs and the number of weights mismatch", 59);
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v97);
  }
  v64 = *((_QWORD *)this + 208);
  *((_QWORD *)this + 209) = v64;
  std::vector<float>::__insert_with_size[abi:ne180100]<std::__wrap_iter<float const*>,std::__wrap_iter<float const*>>((uint64_t)this + 1664, v64, (char *)v88[0], (char *)v88[1], ((char *)v88[1] - (char *)v88[0]) >> 2);
  std::vector<float>::__insert_with_size[abi:ne180100]<std::__wrap_iter<float const*>,std::__wrap_iter<float const*>>((uint64_t)this + 1664, *((_QWORD *)this + 209), (char *)__p, v86, (v86 - (_BYTE *)__p) >> 2);
  v65 = (float *)*((_QWORD *)this + 208);
  v66 = (float *)*((_QWORD *)this + 209);
  if (v65 == v66)
  {
    v67 = *((_QWORD *)this + 210);
    if ((unint64_t)v65 >= v67)
    {
      v68 = v67 - (_QWORD)v65;
      v69 = v68 >> 1;
      if ((unint64_t)(v68 >> 1) <= 1)
        v69 = 1;
      if ((unint64_t)v68 >= 0x7FFFFFFFFFFFFFFCLL)
        v70 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v70 = v69;
      v71 = std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)this + 1680, v70);
      v72 = (char *)*((_QWORD *)this + 209);
      v73 = (char *)*((_QWORD *)this + 208);
      v75 = &v71[v74];
      *v71 = 1065353216;
      v66 = (float *)(v71 + 1);
      while (v72 != v73)
      {
        v76 = *((_DWORD *)v72 - 1);
        v72 -= 4;
        *--v71 = v76;
      }
      *((_QWORD *)this + 208) = v71;
      *((_QWORD *)this + 209) = v66;
      *((_QWORD *)this + 210) = v75;
      if (v73)
        operator delete(v73);
    }
    else
    {
      *v65 = 1.0;
      v66 = v65 + 1;
    }
    *((_QWORD *)this + 209) = v66;
    v65 = (float *)*((_QWORD *)this + 208);
  }
  if ((char *)v66 - (char *)v65 == 4 && *v65 != 1.0)
  {
    v111 = 0u;
    v112 = 0u;
    v109 = 0u;
    v110 = 0u;
    v107 = 0u;
    v108 = 0u;
    v105 = 0u;
    v106 = 0u;
    v103 = 0u;
    v104 = 0u;
    v101 = 0u;
    v102 = 0u;
    v99 = 0u;
    v100 = 0u;
    v98 = 0u;
    memset(v97, 0, sizeof(v97));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v97);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v97, (uint64_t)"Language model weight must be 1 when using a single LM", 54);
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v97);
  }
  quasar::QsrTextSymbolTable::init(*((const std::string **)this + 214), (quasar::OnlineSeevaStepBigLmDecoder *)((char *)this + 32), 0, *((unsigned __int8 *)this + 441), 1);
  v77 = quasar::QsrTextSymbolTable::Find(*((_QWORD *)this + 214), (uint64_t)this + 1576);
  *((_QWORD *)this + 200) = v77;
  v78 = quasar::gLogLevel;
  if (v77 == -1 && quasar::gLogLevel >= 4)
  {
    v111 = 0u;
    v112 = 0u;
    v109 = 0u;
    v110 = 0u;
    v107 = 0u;
    v108 = 0u;
    v105 = 0u;
    v106 = 0u;
    v103 = 0u;
    v104 = 0u;
    v101 = 0u;
    v102 = 0u;
    v99 = 0u;
    v100 = 0u;
    v98 = 0u;
    memset(v97, 0, sizeof(v97));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v97);
    v79 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v97, (uint64_t)"cannot find the OOV word ", 25);
    v80 = *((char *)this + 1599);
    if (v80 >= 0)
      v81 = (char *)this + 1576;
    else
      v81 = (char *)*((_QWORD *)this + 197);
    if (v80 >= 0)
      v82 = *((unsigned __int8 *)this + 1599);
    else
      v82 = *((_QWORD *)this + 198);
    v83 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v79, (uint64_t)v81, v82);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v83, (uint64_t)" in the symbol table", 20);
    quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)v97);
    v78 = quasar::gLogLevel;
  }
  if (v78 >= 4)
  {
    v111 = 0u;
    v112 = 0u;
    v109 = 0u;
    v110 = 0u;
    v107 = 0u;
    v108 = 0u;
    v105 = 0u;
    v106 = 0u;
    v103 = 0u;
    v104 = 0u;
    v101 = 0u;
    v102 = 0u;
    v99 = 0u;
    v100 = 0u;
    v98 = 0u;
    memset(v97, 0, sizeof(v97));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v97);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v97, (uint64_t)"Finished initializing OnlineSeevaStepBigLmDecoder", 49);
    quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)v97);
  }
  if (__p)
  {
    v86 = (char *)__p;
    operator delete(__p);
  }
  if (v88[0])
  {
    v88[1] = v88[0];
    operator delete(v88[0]);
  }
  *(_QWORD *)&v97[0] = &v90;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v97);
  *(_QWORD *)&v97[0] = &v92;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v97);
  *(_QWORD *)&v97[0] = v95;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v97);
  *(_QWORD *)&v97[0] = v96;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v97);
}

void sub_1ADC3334C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)va);
  JUMPOUT(0x1ADC3337CLL);
}

void sub_1ADC33394(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void ****a17, uint64_t a18, uint64_t a19, void ***a20,uint64_t a21,uint64_t a22,void **a23,uint64_t a24,uint64_t a25,char a26)
{
  a17 = &a20;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a17);
  a20 = &a23;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a20);
  a23 = (void **)&a26;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a23);
  _Unwind_Resume(a1);
}

void quasar::OnlineSeevaStepBigLmDecoder::setupDecoder(quasar::OnlineSeevaStepBigLmDecoder *this)
{
  char *v2;
  _QWORD **v3;
  std::__shared_weak_count *v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t *i;
  _QWORD *v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  const void **v24;
  const void **j;
  _QWORD *v26;
  const void *v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t **v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t *v36;
  __int128 v37;
  unint64_t *v38;
  unint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  uint64_t *v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  unint64_t *v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  int v76;
  _QWORD **v77;
  _QWORD *v78[2];
  __int32 *v79;
  __int32 *v80;
  uint64_t v81;
  unsigned int *v82;
  _QWORD *v83;
  uint64_t v84;
  uint64_t v85;
  std::__shared_weak_count *v86;

  quasar::OnlineSeevaStepDecoder::resetDecoder(this);
  v2 = (char *)operator new(0x48uLL);
  *((_QWORD *)v2 + 2) = 0;
  *(_QWORD *)v2 = &unk_1E5D420C8;
  *((_QWORD *)v2 + 1) = 0;
  *(_OWORD *)(v2 + 40) = 0u;
  *(_OWORD *)(v2 + 56) = 0u;
  *((_QWORD *)&v57 + 1) = v2;
  *(_OWORD *)(v2 + 24) = 0u;
  *(_QWORD *)&v57 = v2 + 24;
  v3 = (_QWORD **)((char *)this + 1856);
  std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100]((uint64_t)this + 1856, &v57);
  v4 = (std::__shared_weak_count *)*((_QWORD *)&v57 + 1);
  if (*((_QWORD *)&v57 + 1))
  {
    v5 = (unint64_t *)(*((_QWORD *)&v57 + 1) + 8);
    do
      v6 = __ldaxr(v5);
    while (__stlxr(v6 - 1, v5));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  v7 = *((_QWORD *)this + 214);
  v8 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v7 + 96) + 112))(*(_QWORD *)(v7 + 96));
  LODWORD(v9) = v8;
  if ((v8 & 0x8000000000000000) == 0)
    v9 = *(_QWORD *)(v7 + 120) + v8;
  v10 = (uint64_t *)*((_QWORD *)this + 216);
  for (i = (uint64_t *)*((_QWORD *)this + 217); v10 != i; v10 += 2)
  {
    v12 = *v3;
    v13 = *v10;
    v14 = (std::__shared_weak_count *)v10[1];
    v85 = *v10;
    v86 = v14;
    if (v14)
    {
      p_shared_owners = (unint64_t *)&v14->__shared_owners_;
      do
        v16 = __ldxr(p_shared_owners);
      while (__stxr(v16 + 1, p_shared_owners));
      LODWORD(v57) = v9;
      *((_QWORD *)&v57 + 1) = v13;
      *(_QWORD *)&v58 = v14;
      do
        v17 = __ldxr(p_shared_owners);
      while (__stxr(v17 + 1, p_shared_owners));
    }
    else
    {
      LODWORD(v57) = v9;
      *((_QWORD *)&v57 + 1) = v13;
      *(_QWORD *)&v58 = 0;
    }
    DWORD2(v58) = -1;
    v74 = 0uLL;
    *(_QWORD *)&v75 = 0;
    v83 = 0;
    v84 = 0;
    v82 = (unsigned int *)&v83;
    kaldi::quasar::DeterministicOnDemandFstCreator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::AddBackoffFst(v12, (unsigned int *)&v57, (uint64_t *)&v74, 0, 0, 0x40000000, 0x20000uLL, (uint64_t)&v82);
    std::__tree<int>::destroy((uint64_t)&v82, v83);
    v82 = (unsigned int *)&v74;
    std::vector<fst::FstWithLabel<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v82);
    v18 = (std::__shared_weak_count *)v58;
    if ((_QWORD)v58)
    {
      v19 = (unint64_t *)(v58 + 8);
      do
        v20 = __ldaxr(v19);
      while (__stlxr(v20 - 1, v19));
      if (!v20)
      {
        ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
        std::__shared_weak_count::__release_weak(v18);
      }
    }
    v21 = v86;
    if (v86)
    {
      v22 = (unint64_t *)&v86->__shared_owners_;
      do
        v23 = __ldaxr(v22);
      while (__stlxr(v23 - 1, v22));
      if (!v23)
      {
        ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
        std::__shared_weak_count::__release_weak(v21);
      }
    }
  }
  v24 = (const void **)*((_QWORD *)this + 219);
  for (j = (const void **)*((_QWORD *)this + 220); v24 != j; v24 += 2)
  {
    v26 = *v3;
    v27 = *v24;
    v82 = 0;
    v83 = 0;
    v84 = 0;
    v57 = 0u;
    v58 = 0u;
    LODWORD(v59) = 1065353216;
    v79 = 0;
    v80 = 0;
    v81 = 0;
    v78[0] = 0;
    v78[1] = 0;
    v77 = v78;
    v74 = 0u;
    v75 = 0u;
    v76 = 1065353216;
    kaldi::quasar::DeterministicOnDemandFstCreator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::AddNnlm(v26, v27, &v82, &v57, &v79, (uint64_t)&v77, 0, 0, -1.0, 0, 0x20000uLL, (uint64_t)&v74);
    std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)&v74);
    std::__tree<int>::destroy((uint64_t)&v77, v78[0]);
    if (v79)
    {
      v80 = v79;
      operator delete(v79);
    }
    std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)&v57);
    *(_QWORD *)&v57 = &v82;
    std::vector<fst::FstWithLabel<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v57);
  }
  v28 = *((_QWORD *)this + 232);
  if ((uint64_t)(*(_QWORD *)(v28 + 8) - *(_QWORD *)v28) >> 4 != (uint64_t)(*((_QWORD *)this + 209)
                                                                        - *((_QWORD *)this + 208)) >> 2)
  {
    v72 = 0u;
    v73 = 0u;
    v70 = 0u;
    v71 = 0u;
    v68 = 0u;
    v69 = 0u;
    v66 = 0u;
    v67 = 0u;
    v64 = 0u;
    v65 = 0u;
    v62 = 0u;
    v63 = 0u;
    v60 = 0u;
    v61 = 0u;
    v58 = 0u;
    v59 = 0u;
    v57 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v57);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(&v57, "some FST/NN LMs failed to load");
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&v57);
  }
  v74 = 0uLL;
  if (*(_QWORD *)(v28 + 8) - *(_QWORD *)v28 == 16)
  {
    std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::operator=[abi:ne180100](&v74, *(uint64_t **)v28);
  }
  else
  {
    v29 = operator new(0x30uLL);
    v29[1] = 0;
    v29[2] = 0;
    *v29 = &unk_1E5D45858;
    v29[4] = 0;
    v29[5] = 0;
    v29[3] = 0;
    *(_QWORD *)&v57 = v29 + 3;
    *((_QWORD *)&v57 + 1) = v29;
    v30 = (uint64_t **)((char *)this + 1840);
    std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100]((uint64_t)this + 1840, &v57);
    v31 = (std::__shared_weak_count *)*((_QWORD *)&v57 + 1);
    if (*((_QWORD *)&v57 + 1))
    {
      v32 = (unint64_t *)(*((_QWORD *)&v57 + 1) + 8);
      do
        v33 = __ldaxr(v32);
      while (__stlxr(v33 - 1, v32));
      if (!v33)
      {
        ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
        std::__shared_weak_count::__release_weak(v31);
      }
    }
    v34 = *((_QWORD *)this + 208);
    if (*((_QWORD *)this + 209) != v34)
    {
      v35 = 0;
      do
      {
        v36 = *v30;
        v37 = *(_OWORD *)(*(_QWORD *)v28 + 16 * v35);
        v57 = v37;
        if (*((_QWORD *)&v37 + 1))
        {
          v38 = (unint64_t *)(*((_QWORD *)&v37 + 1) + 8);
          do
            v39 = __ldxr(v38);
          while (__stxr(v39 + 1, v38));
        }
        LODWORD(v58) = *(_DWORD *)(v34 + 4 * v35);
        std::vector<std::pair<std::shared_ptr<fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,float>>::push_back[abi:ne180100](v36, (uint64_t)&v57);
        v40 = (std::__shared_weak_count *)*((_QWORD *)&v57 + 1);
        if (*((_QWORD *)&v57 + 1))
        {
          v41 = (unint64_t *)(*((_QWORD *)&v57 + 1) + 8);
          do
            v42 = __ldaxr(v41);
          while (__stlxr(v42 - 1, v41));
          if (!v42)
          {
            ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
            std::__shared_weak_count::__release_weak(v40);
          }
        }
        ++v35;
        v34 = *((_QWORD *)this + 208);
      }
      while (v35 < (*((_QWORD *)this + 209) - v34) >> 2);
    }
    v43 = *v30;
    LODWORD(v82) = 0;
    std::allocate_shared[abi:ne180100]<fst::InterpolateDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,std::allocator<fst::InterpolateDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,std::vector<std::pair<std::shared_ptr<fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,float>> &,fst::InterpolateDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::WeightType,void>(v43, (int *)&v82, &v57);
    std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100]((uint64_t)this + 1824, &v57);
    v44 = (std::__shared_weak_count *)*((_QWORD *)&v57 + 1);
    if (*((_QWORD *)&v57 + 1))
    {
      v45 = (unint64_t *)(*((_QWORD *)&v57 + 1) + 8);
      do
        v46 = __ldaxr(v45);
      while (__stlxr(v46 - 1, v45));
      if (!v46)
      {
        ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
        std::__shared_weak_count::__release_weak(v44);
      }
    }
    std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::operator=[abi:ne180100](&v74, (uint64_t *)this + 228);
  }
  if (!*((_QWORD *)this + 222))
  {
    std::allocate_shared[abi:ne180100]<fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,std::allocator<fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,std::shared_ptr<fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> &,void>((uint64_t *)&v74, &v57);
    std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100]((uint64_t)this + 1808, &v57);
    v50 = (std::__shared_weak_count *)*((_QWORD *)&v57 + 1);
    if (!*((_QWORD *)&v57 + 1))
      goto LABEL_71;
    v53 = (unint64_t *)(*((_QWORD *)&v57 + 1) + 8);
    do
      v52 = __ldaxr(v53);
    while (__stlxr(v52 - 1, v53));
    goto LABEL_69;
  }
  std::allocate_shared[abi:ne180100]<fst::ComposeDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,std::allocator<fst::ComposeDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,std::shared_ptr<fst::BackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>> &,std::shared_ptr<fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> &,void>((uint64_t *)this + 222, (uint64_t *)&v74, &v57);
  std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100]((uint64_t)this + 1792, &v57);
  v47 = (std::__shared_weak_count *)*((_QWORD *)&v57 + 1);
  if (*((_QWORD *)&v57 + 1))
  {
    v48 = (unint64_t *)(*((_QWORD *)&v57 + 1) + 8);
    do
      v49 = __ldaxr(v48);
    while (__stlxr(v49 - 1, v48));
    if (!v49)
    {
      ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
      std::__shared_weak_count::__release_weak(v47);
    }
  }
  std::allocate_shared[abi:ne180100]<fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,std::allocator<fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,std::shared_ptr<fst::ComposeDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>> &,void>((uint64_t *)this + 224, &v57);
  std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100]((uint64_t)this + 1808, &v57);
  v50 = (std::__shared_weak_count *)*((_QWORD *)&v57 + 1);
  if (*((_QWORD *)&v57 + 1))
  {
    v51 = (unint64_t *)(*((_QWORD *)&v57 + 1) + 8);
    do
      v52 = __ldaxr(v51);
    while (__stlxr(v52 - 1, v51));
LABEL_69:
    if (!v52)
    {
      ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
      std::__shared_weak_count::__release_weak(v50);
    }
  }
LABEL_71:
  v54 = (std::__shared_weak_count *)*((_QWORD *)&v74 + 1);
  if (*((_QWORD *)&v74 + 1))
  {
    v55 = (unint64_t *)(*((_QWORD *)&v74 + 1) + 8);
    do
      v56 = __ldaxr(v55);
    while (__stlxr(v56 - 1, v55));
    if (!v56)
    {
      ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
      std::__shared_weak_count::__release_weak(v54);
    }
  }
}

uint64_t quasar::OnlineSeevaStepBigLmDecoder::runImpl(quasar::OnlineSeevaStepBigLmDecoder *a1, uint64_t *a2, uint64_t *a3, uint64_t a4)
{
  quasar::OnlineSeevaStepBigLmDecoder *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  signed int v14;
  _BOOL4 IsValidFrame;
  int v16;
  int v17;
  signed int v18;
  quasar::OnlineSeevaStepBigLmDecoder *v19;
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  int v26;
  void *v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  void *v36;
  uint64_t v37;
  const kaldi::quasar::SeevaStepInference *v38;
  const kaldi::quasar::Vocab *v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  uint64_t *CurrentBreadcrumb;
  uint64_t *v44;
  float **v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t v48;
  float *v49;
  float *v50;
  float v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  __int128 *v56;
  __int128 v57;
  std::string *v58;
  std::string *v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t **v64;
  uint64_t v65;
  _QWORD *v66;
  _QWORD *v67;
  uint64_t started;
  std::__shared_weak_count *v69;
  unint64_t *v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  std::__shared_weak_count *v74;
  unint64_t *v75;
  unint64_t v76;
  int v79;
  uint64_t v81;
  uint64_t v82;
  std::__shared_weak_count *v83;
  _BYTE v84[24];
  __int128 v85;
  char v86;
  void *v87[3];
  uint64_t *v88[3];
  unsigned __int8 v89;
  uint64_t v90;
  uint64_t v91;
  std::string *v92;
  unint64_t v93;
  void *v94;
  float *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  void *v100;
  void *v101;
  uint64_t v102;
  uint64_t v103[3];
  float **v104;
  void *v105;
  void *v106;
  void *v107;
  void *v108;
  uint64_t v109;
  void *__p;
  void *v111;
  uint64_t v112;
  void *v113;
  void *v114;
  uint64_t v115;
  uint64_t v116;
  int v117;
  int v118;
  uint64_t v119;
  uint64_t v120;
  int v121;
  int v122;
  uint64_t v123;
  std::__shared_weak_count *v124;

  v5 = a1;
  quasar::OnlineSeevaStepBigLmDecoder::setupDecoder(a1);
  v7 = *a2;
  v6 = (std::__shared_weak_count *)a2[1];
  v123 = *a2;
  v124 = v6;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  v79 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v7 + 16) + 24))(*(_QWORD *)(v7 + 16));
  v10 = 0;
  v11 = *(unsigned int *)(v7 + 24);
  v12 = 1;
  v81 = v7;
  while (1)
  {
    kaldi::Matrix<float>::Matrix((uint64_t)&v120, *((unsigned int *)v5 + 188), v11, 0, 0);
    v13 = *((_DWORD *)v5 + 188);
    if (v13 < 1)
    {
      v14 = 0;
      v16 = 0;
    }
    else
    {
      v14 = 0;
      while (1)
      {
        IsValidFrame = kaldi::OnlineFeatureMatrix::IsValidFrame((int32x2_t *)v7, v10 + v14, 1);
        if (!IsValidFrame)
          break;
        kaldi::OnlineFeatureMatrix::GetFrame((kaldi::OnlineFeatureMatrix *)v7, v10 + v14, &v116);
        kaldi::MatrixBase<float>::CopyRowFromVec((uint64_t)&v120, (uint64_t)&v116, v14++);
        v13 = *((_DWORD *)v5 + 188);
        if (v14 >= v13)
          goto LABEL_12;
      }
      v13 = *((_DWORD *)v5 + 188);
LABEL_12:
      v16 = !IsValidFrame;
    }
    if (v14 <= 1)
      v17 = 1;
    else
      v17 = v14;
    if (v13 >= *((_DWORD *)v5 + 175))
      v18 = *((_DWORD *)v5 + 175);
    else
      v18 = v13;
    v10 += v14;
    if (v16 && v10 < v18)
    {
      v19 = v5;
      v20 = v10;
      v21 = v16;
      v22 = v12;
      v23 = v11;
      v24 = v120;
      v25 = v122;
      v26 = kaldi::MatrixBase<float>::NumCols((uint64_t)&v120);
      v118 = 0;
      v119 = 0;
      v116 = v24 + 4 * v25 * (v14 - 1);
      v117 = v26;
      v11 = v23;
      v12 = v22;
      v16 = v21;
      v10 = v20;
      v5 = v19;
      v7 = v81;
      if (v14 < v18)
      {
        do
          kaldi::MatrixBase<float>::CopyRowFromVec((uint64_t)&v120, (uint64_t)&v116, v14++);
        while (v18 != v14);
      }
      v17 = v18;
    }
    if (v17 >= *((_DWORD *)v5 + 177))
    {
      v103[0] = 0;
      if (*((_QWORD *)v5 + 107))
      {
        kaldi::SubMatrix<float>::SubMatrix((uint64_t)v84, (uint64_t)&v120, 0, v17, 0, v121);
        kaldi::CuMatrix<float>::CuMatrix<float>(&v116, v84, 111, 0);
        quasar::Bitmap::~Bitmap((quasar::Bitmap *)v84);
        *(_OWORD *)&v84[8] = 0u;
        v85 = 0u;
        *(_QWORD *)v84 = &unk_1E5D34170;
        v86 = 0;
        kaldi::nnet1::Nnet::Feedforward(*((uint64_t **)v5 + 107), (uint64_t)&v116, (int32x2_t *)v84, -1, 0);
        (*(void (**)(void **__return_ptr, _QWORD, _BYTE *))(**(_QWORD **)(*((_QWORD *)v5 + 109) + 8) + 32))(&v100, *(_QWORD *)(*((_QWORD *)v5 + 109) + 8), v84);
        v27 = v100;
        v100 = 0;
        v28 = v103[0];
        v103[0] = (uint64_t)v27;
        if (v28)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v28 + 8))(v28);
          v29 = v100;
          v100 = 0;
          if (v29)
            (*(void (**)(void *))(*(_QWORD *)v29 + 8))(v29);
        }
        kaldi::CuMatrix<float>::~CuMatrix((uint64_t)v84);
        kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&v116);
      }
      else if (v17 == *((_DWORD *)v5 + 188))
      {
        (*(void (**)(uint64_t *__return_ptr, _QWORD, uint64_t *))(**(_QWORD **)(*((_QWORD *)v5 + 109) + 8)
                                                                         + 40))(&v116, *(_QWORD *)(*((_QWORD *)v5 + 109) + 8), &v120);
        v30 = v116;
        v116 = 0;
        v31 = v103[0];
        v103[0] = v30;
        if (v31)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v31 + 8))(v31);
          v32 = v116;
          v116 = 0;
          if (v32)
            (*(void (**)(uint64_t))(*(_QWORD *)v32 + 8))(v32);
        }
      }
      else
      {
        v33 = *(_QWORD *)(*((_QWORD *)v5 + 109) + 8);
        kaldi::SubMatrix<float>::SubMatrix((uint64_t)v84, (uint64_t)&v120, 0, v17, 0, v121);
        kaldi::CuMatrix<float>::CuMatrix<float>(&v116, v84, 111, 0);
        (*(void (**)(void **__return_ptr, uint64_t, uint64_t *))(*(_QWORD *)v33 + 32))(&v100, v33, &v116);
        v34 = v100;
        v100 = 0;
        v35 = v103[0];
        v103[0] = (uint64_t)v34;
        if (v35)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v35 + 8))(v35);
          v36 = v100;
          v100 = 0;
          if (v36)
            (*(void (**)(void *))(*(_QWORD *)v36 + 8))(v36);
        }
        kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&v116);
        quasar::Bitmap::~Bitmap((quasar::Bitmap *)v84);
      }
      kaldi::quasar::SeevaStepInference::RunEncoder(*((_QWORD *)v5 + 109), v103, v12 & 1);
      v37 = v103[0];
      v103[0] = 0;
      if (v37)
        (*(void (**)(uint64_t))(*(_QWORD *)v37 + 8))(v37);
      v12 = 0;
    }
    if (v16)
      break;
    kaldi::Matrix<float>::~Matrix((uint64_t)&v120);
  }
  v38 = (const kaldi::quasar::SeevaStepInference *)*((_QWORD *)v5 + 109);
  v39 = (const kaldi::quasar::Vocab *)*((_QWORD *)v5 + 108);
  v40 = *((_QWORD *)v5 + 226);
  v41 = *((_QWORD *)v5 + 201);
  v42 = *((_DWORD *)v5 + 400);
  v115 = 0;
  v113 = 0;
  v114 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v113, *((const void **)v5 + 159), *((_QWORD *)v5 + 160), (uint64_t)(*((_QWORD *)v5 + 160) - *((_QWORD *)v5 + 159)) >> 2);
  v111 = 0;
  __p = 0;
  v112 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, *((const void **)v5 + 162), *((_QWORD *)v5 + 163), (uint64_t)(*((_QWORD *)v5 + 163) - *((_QWORD *)v5 + 162)) >> 2);
  kaldi::quasar::SeevaBeamSearchBigLm::SeevaBeamSearchBigLm((uint64_t)&v116, v38, (quasar::OnlineSeevaStepBigLmDecoder *)((char *)v5 + 1040), v39, v40, v41, v42, (uint64_t)&v113, (uint64_t)&__p, *((_DWORD *)v5 + 330), *((_DWORD *)v5 + 331));
  if (__p)
  {
    v111 = __p;
    operator delete(__p);
  }
  if (v113)
  {
    v114 = v113;
    operator delete(v113);
  }
  kaldi::quasar::SeevaStepInference::CollectEncoderOutput(*((kaldi::quasar::SeevaStepInference **)v5 + 109), 0, -1, &v109);
  kaldi::quasar::SeevaBeamSearchBase::Initialize((kaldi::quasar::SeevaBeamSearchBase *)&v116, &v109, 1);
  kaldi::quasar::SeevaBeamSearchBase::BeamSearch(&v116, &v109, 1);
  CurrentBreadcrumb = (uint64_t *)kaldi::quasar::SeevaBeamSearchBase::GetCurrentBreadcrumb((kaldi::quasar::SeevaBeamSearchBase *)&v116);
  kaldi::quasar::SeevaBeamSearchBase::TraceBack((uint64_t)&v116, CurrentBreadcrumb, (uint64_t)v103);
  v44 = (uint64_t *)v103[0];
  v45 = v104;
  v102 = 0;
  v101 = 0;
  v100 = 0;
  v46 = (uint64_t)(*(_QWORD *)(v103[0] + 8) - *(_QWORD *)v103[0]) >> 2;
  *(_DWORD *)v84 = 0;
  std::vector<float>::resize((uint64_t)&v100, v46, v84);
  v47 = v44[1] - *v44;
  if (v47)
  {
    v48 = v47 >> 2;
    v49 = *v45;
    v50 = (float *)v100;
    if (v48 <= 1)
      v48 = 1;
    do
    {
      v51 = *v49++;
      *v50++ = -v51;
      --v48;
    }
    while (v48);
  }
  v98 = 0;
  v97 = 0;
  v99 = 0;
  v95 = 0;
  v94 = 0;
  v96 = 0;
  quasar::printOneBest(*((kaldi::quasar::Vocab **)v5 + 108), *((_DWORD *)v5 + 131), v44, (uint64_t *)&v100, &v97, (uint64_t)&v94);
  v52 = *(_DWORD *)(*(_QWORD *)a4 + 8);
  v92 = 0;
  v91 = 0;
  v93 = 0;
  std::vector<quasar::Token>::reserve(&v91, 0xAAAAAAAAAAAAAAABLL * ((v98 - v97) >> 3));
  v53 = v97;
  if (v98 != v97)
  {
    v54 = 0;
    v55 = 0;
    do
    {
      v56 = (__int128 *)(v53 + v54);
      v57 = *v56;
      *(_QWORD *)&v84[16] = *((_QWORD *)v56 + 2);
      *(_OWORD *)v84 = v57;
      *((_QWORD *)v56 + 1) = 0;
      *((_QWORD *)v56 + 2) = 0;
      *(_QWORD *)v56 = 0;
      LODWORD(v88[0]) = 0;
      LODWORD(v88[0]) = expf(-*((float *)v94 + v55));
      LODWORD(v87[0]) = 0;
      v90 = 0;
      v89 = 0;
      v58 = v92;
      if ((unint64_t)v92 >= v93)
      {
        v59 = (std::string *)std::vector<quasar::Token>::__emplace_back_slow_path<std::string,int,int,int,float const&,BOOL>(&v91, (uint64_t)v84, (int *)v87, (int *)&v90 + 1, (int *)&v90, (float *)v88, &v89);
      }
      else
      {
        std::allocator<quasar::Token>::construct[abi:ne180100]<quasar::Token,std::string,int,int,int,float const&,BOOL>((uint64_t)&v93, v92, (uint64_t)v84, (int *)v87, (int *)&v90 + 1, (int *)&v90, (float *)v88, &v89);
        v59 = (std::string *)((char *)v58 + 224);
      }
      v92 = v59;
      if ((v84[23] & 0x80000000) != 0)
        operator delete(*(void **)v84);
      ++v55;
      v53 = v97;
      v54 += 24;
    }
    while (v55 < 0xAAAAAAAAAAAAAAABLL * ((v98 - v97) >> 3));
  }
  memset(v88, 0, sizeof(v88));
  std::vector<std::vector<quasar::Token>>::emplace_back<std::vector<quasar::Token>>((uint64_t *)v88, (uint64_t)&v91);
  *(_QWORD *)v84 = 0x7FEFFFFFFFFFFFFFLL;
  std::vector<double>::vector(v87, 1uLL, v84);
  if (v94 != v95)
    *(double *)v87[0] = *(v95 - 1);
  quasar::RecogResult::RecogResult((quasar::RecogResult *)v84);
  v60 = *(std::__shared_weak_count **)(*(_QWORD *)a4 + 32);
  v82 = *(_QWORD *)(*(_QWORD *)a4 + 24);
  v83 = v60;
  if (v60)
  {
    v61 = (unint64_t *)&v60->__shared_owners_;
    do
      v62 = __ldxr(v61);
    while (__stxr(v62 + 1, v61));
  }
  v63 = quasar::RecogResult::setParams((uint64_t)v84, &v82);
  v64 = quasar::Token::resetSpacing(v88);
  v65 = quasar::RecogResult::setResultChoices(v63, (uint64_t)v64);
  v66 = (_QWORD *)quasar::RecogResult::setResultCosts(v65, (uint64_t)v87);
  v67 = quasar::RecogResult::setLmeStatus(v66, (uint64_t *)(*a3 + 584));
  started = quasar::RecogResult::setUtteranceStartMillis((uint64_t)v67, v52 * v79);
  quasar::RecogResult::setUtteranceDurationMillis(started, v10 * v79);
  v69 = v83;
  if (v83)
  {
    v70 = (unint64_t *)&v83->__shared_owners_;
    do
      v71 = __ldaxr(v70);
    while (__stlxr(v71 - 1, v70));
    if (!v71)
    {
      ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
      std::__shared_weak_count::__release_weak(v69);
    }
  }
  (*(void (**)(_QWORD, _BYTE *, uint64_t))(**(_QWORD **)(*a3 + 560) + 40))(*(_QWORD *)(*a3 + 560), v84, 1);
  v72 = *a3;
  *(_DWORD *)(v72 + 576) = v10;
  *(_WORD *)(v72 + 580) = 257;
  quasar::RecogResult::~RecogResult((quasar::RecogResult *)v84);
  if (v87[0])
  {
    v87[1] = v87[0];
    operator delete(v87[0]);
  }
  *(_QWORD *)v84 = v88;
  std::vector<std::vector<quasar::Token>>::__destroy_vector::operator()[abi:ne180100]((void ***)v84);
  *(_QWORD *)v84 = &v91;
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)v84);
  if (v94)
  {
    v95 = (float *)v94;
    operator delete(v94);
  }
  *(_QWORD *)v84 = &v97;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v84);
  if (v100)
  {
    v101 = v100;
    operator delete(v100);
  }
  if (v107)
  {
    v108 = v107;
    operator delete(v107);
  }
  if (v105)
  {
    v106 = v105;
    operator delete(v105);
  }
  *(_QWORD *)v84 = &v104;
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100]((void ***)v84);
  *(_QWORD *)v84 = v103;
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100]((void ***)v84);
  v73 = v109;
  v109 = 0;
  if (v73)
    (*(void (**)(uint64_t))(*(_QWORD *)v73 + 8))(v73);
  kaldi::quasar::SeevaBeamSearchBigLm::~SeevaBeamSearchBigLm((kaldi::quasar::SeevaBeamSearchBigLm *)&v116);
  kaldi::Matrix<float>::~Matrix((uint64_t)&v120);
  v74 = v124;
  if (v124)
  {
    v75 = (unint64_t *)&v124->__shared_owners_;
    do
      v76 = __ldaxr(v75);
    while (__stlxr(v76 - 1, v75));
    if (!v76)
    {
      ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
      std::__shared_weak_count::__release_weak(v74);
    }
  }
  return 0;
}

void sub_1ADC343C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  void *__p;
  uint64_t a70;
  char a72;
  uint64_t v72;
  void *v74;
  void *v75;
  unint64_t v76;

  quasar::RecogResult::~RecogResult((quasar::RecogResult *)&a21);
  if (__p)
  {
    a70 = (uint64_t)__p;
    operator delete(__p);
  }
  a21 = &a72;
  std::vector<std::vector<quasar::Token>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a21);
  a21 = &STACK[0x220];
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&a21);
  v74 = (void *)STACK[0x238];
  if (STACK[0x238])
  {
    STACK[0x240] = (unint64_t)v74;
    operator delete(v74);
  }
  a21 = &STACK[0x250];
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a21);
  v75 = (void *)STACK[0x268];
  if (STACK[0x268])
  {
    STACK[0x270] = (unint64_t)v75;
    operator delete(v75);
  }
  kaldi::quasar::SeevaBeamSearchBase::DecodeOutputData::~DecodeOutputData((kaldi::quasar::SeevaBeamSearchBase::DecodeOutputData *)&STACK[0x280]);
  v76 = STACK[0x2E8];
  STACK[0x2E8] = 0;
  if (v76)
    (*(void (**)(unint64_t))(*(_QWORD *)v76 + 8))(v76);
  kaldi::quasar::SeevaBeamSearchBigLm::~SeevaBeamSearchBigLm((kaldi::quasar::SeevaBeamSearchBigLm *)&STACK[0x320]);
  kaldi::Matrix<float>::~Matrix(v72 - 144);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](v72 - 104);
  _Unwind_Resume(a1);
}

uint64_t quasar::OnlineSeevaStepDecoder::affectsRecognitionResults(quasar::OnlineSeevaStepDecoder *this)
{
  return 1;
}

uint64_t kaldi::quasar::SeevaBeamSearchBigLm::SeevaBeamSearchBigLm(uint64_t a1, const kaldi::quasar::SeevaStepInference *a2, const kaldi::quasar::SeevaStepInferenceConfig *a3, const kaldi::quasar::Vocab *a4, uint64_t a5, uint64_t a6, int a7, uint64_t a8, uint64_t a9, int a10, int a11)
{
  int32x2_t *v17;

  v17 = (int32x2_t *)kaldi::quasar::SeevaBeamSearchBase::SeevaBeamSearchBase((kaldi::quasar::SeevaBeamSearchBase *)a1, a2, a3, a4);
  *v17 = (int32x2_t)&unk_1E5D33A10;
  v17[49] = (int32x2_t)a5;
  v17[50] = (int32x2_t)a6;
  fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::SortedMatcher(v17 + 51, a6, 0, 1);
  *(_DWORD *)(a1 + 552) = a7;
  *(_QWORD *)(a1 + 560) = a3;
  *(_QWORD *)(a1 + 576) = 0;
  *(_OWORD *)(a1 + 584) = 0u;
  *(_OWORD *)(a1 + 576) = *(_OWORD *)a8;
  *(_QWORD *)(a1 + 592) = *(_QWORD *)(a8 + 16);
  *(_QWORD *)(a8 + 16) = 0;
  *(_OWORD *)a8 = 0u;
  *(_QWORD *)(a1 + 616) = 0;
  *(_OWORD *)(a1 + 600) = 0u;
  *(_OWORD *)(a1 + 600) = *(_OWORD *)a9;
  *(_QWORD *)(a1 + 616) = *(_QWORD *)(a9 + 16);
  *(_QWORD *)a9 = 0;
  *(_QWORD *)(a9 + 8) = 0;
  *(_QWORD *)(a9 + 16) = 0;
  *(_DWORD *)(a1 + 624) = a10;
  *(_DWORD *)(a1 + 628) = a11;
  *(_OWORD *)(a1 + 632) = 0u;
  *(_OWORD *)(a1 + 648) = 0u;
  *(_OWORD *)(a1 + 664) = 0u;
  *(_OWORD *)(a1 + 680) = 0u;
  *(_QWORD *)(a1 + 696) = 0;
  *(_DWORD *)(a1 + 568) = (***(uint64_t (****)(_QWORD))(a1 + 392))(*(_QWORD *)(a1 + 392));
  *(_DWORD *)(a1 + 572) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 400) + 24))(*(_QWORD *)(a1 + 400));
  return a1;
}

void sub_1ADC346D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  kaldi::quasar::SeevaBeamSearchBase *v10;

  kaldi::quasar::SeevaBeamSearchBase::~SeevaBeamSearchBase(v10);
  _Unwind_Resume(a1);
}

kaldi::quasar::SeevaBeamSearchBase *kaldi::quasar::SeevaBeamSearchBase::SeevaBeamSearchBase(kaldi::quasar::SeevaBeamSearchBase *this, const kaldi::quasar::SeevaStepInference *a2, const kaldi::quasar::SeevaStepInferenceConfig *a3, const kaldi::quasar::Vocab *a4)
{
  kaldi::quasar::Vocab *v6;
  kaldi::quasar::Vocab *v7;
  std::string __p;

  *(_QWORD *)this = &unk_1E5D33808;
  *((_QWORD *)this + 1) = a2;
  *((_QWORD *)this + 2) = a3;
  *((_QWORD *)this + 3) = a4;
  *(_OWORD *)((char *)this + 68) = 0u;
  *(_OWORD *)((char *)this + 84) = 0u;
  *(_OWORD *)((char *)this + 100) = 0u;
  *(_OWORD *)((char *)this + 116) = 0u;
  *(_OWORD *)((char *)this + 132) = 0u;
  *(_OWORD *)((char *)this + 148) = 0u;
  *(_OWORD *)((char *)this + 164) = 0u;
  *(_OWORD *)((char *)this + 180) = 0u;
  *(_OWORD *)((char *)this + 196) = 0u;
  *(_OWORD *)((char *)this + 212) = 0u;
  *(_OWORD *)((char *)this + 228) = 0u;
  *(_OWORD *)((char *)this + 244) = 0u;
  *((_DWORD *)this + 97) = 0;
  *(_OWORD *)((char *)this + 52) = 0u;
  *(_OWORD *)((char *)this + 260) = 0u;
  *(_OWORD *)((char *)this + 276) = 0u;
  *(_OWORD *)((char *)this + 292) = 0u;
  *(_OWORD *)((char *)this + 308) = 0u;
  *(_OWORD *)((char *)this + 324) = 0u;
  *(_OWORD *)((char *)this + 340) = 0u;
  *(_OWORD *)((char *)this + 356) = 0u;
  *(_OWORD *)((char *)this + 372) = 0u;
  kaldi::quasar::Vocab::BosWord(a4, &__p);
  *((_DWORD *)this + 8) = kaldi::quasar::Vocab::GetWordId((uint64_t)a4, (unsigned __int8 *)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v6 = (kaldi::quasar::Vocab *)*((_QWORD *)this + 3);
  kaldi::quasar::Vocab::EosWord(v6, &__p);
  *((_DWORD *)this + 9) = kaldi::quasar::Vocab::GetWordId((uint64_t)v6, (unsigned __int8 *)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v7 = (kaldi::quasar::Vocab *)*((_QWORD *)this + 3);
  kaldi::quasar::Vocab::OOvWord(v7, &__p);
  *((_DWORD *)this + 10) = kaldi::quasar::Vocab::GetWordId((uint64_t)v7, (unsigned __int8 *)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  *((_DWORD *)this + 11) = kaldi::quasar::Vocab::VocabSize(*((kaldi::quasar::Vocab **)this + 3));
  *((_DWORD *)this + 12) = *(_DWORD *)(*((_QWORD *)this + 2) + 184) + 1;
  return this;
}

void sub_1ADC34894(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  _QWORD *v15;
  void *v17;

  std::deque<kaldi::quasar::SeevaBeamSearchBase::RollbackStats>::~deque[abi:ne180100](v15 + 43);
  std::deque<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::~deque[abi:ne180100](v15 + 37);
  std::deque<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::~deque[abi:ne180100](v15 + 31);
  __p = v15 + 28;
  std::vector<kaldi::quasar::SeevaBeamSearchBase::Breadcrumb>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  std::deque<std::vector<int>>::~deque[abi:ne180100](v15 + 22);
  std::deque<std::vector<BOOL>>::~deque[abi:ne180100](v15 + 16);
  std::deque<std::vector<int>>::~deque[abi:ne180100](v15 + 10);
  v17 = (void *)v15[7];
  if (v17)
  {
    v15[8] = v17;
    operator delete(v17);
  }
  _Unwind_Resume(a1);
}

void kaldi::quasar::SeevaBeamSearchBase::~SeevaBeamSearchBase(kaldi::quasar::SeevaBeamSearchBase *this)
{
  void *v2;
  void **v3;

  *(_QWORD *)this = &unk_1E5D33808;
  std::deque<kaldi::quasar::SeevaBeamSearchBase::RollbackStats>::~deque[abi:ne180100]((_QWORD *)this + 43);
  std::deque<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::~deque[abi:ne180100]((_QWORD *)this + 37);
  std::deque<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::~deque[abi:ne180100]((_QWORD *)this + 31);
  v3 = (void **)((char *)this + 224);
  std::vector<kaldi::quasar::SeevaBeamSearchBase::Breadcrumb>::__destroy_vector::operator()[abi:ne180100](&v3);
  std::deque<std::vector<int>>::~deque[abi:ne180100]((_QWORD *)this + 22);
  std::deque<std::vector<BOOL>>::~deque[abi:ne180100]((_QWORD *)this + 16);
  std::deque<std::vector<int>>::~deque[abi:ne180100]((_QWORD *)this + 10);
  v2 = (void *)*((_QWORD *)this + 7);
  if (v2)
  {
    *((_QWORD *)this + 8) = v2;
    operator delete(v2);
  }
}

uint64_t std::deque<kaldi::quasar::SeevaBeamSearchBase::RollbackStats>::~deque[abi:ne180100](_QWORD *a1)
{
  void **v2;
  void **v3;
  _QWORD *v4;
  unint64_t v5;
  void **v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  void *v15;

  v2 = (void **)a1[1];
  v3 = (void **)a1[2];
  if (v3 == v2)
  {
    v4 = a1 + 5;
    v3 = (void **)a1[1];
  }
  else
  {
    v4 = a1 + 5;
    v5 = a1[4];
    v6 = &v2[v5 >> 7];
    v7 = (uint64_t)*v6;
    v8 = (uint64_t)*v6 + 32 * (v5 & 0x7F);
    v9 = *(uint64_t *)((char *)v2 + (((a1[5] + v5) >> 4) & 0xFFFFFFFFFFFFFF8)) + 32 * ((a1[5] + v5) & 0x7F);
    if (v8 != v9)
    {
      do
      {
        v10 = *(void **)v8;
        if (*(_QWORD *)v8)
        {
          *(_QWORD *)(v8 + 8) = v10;
          operator delete(v10);
          v7 = (uint64_t)*v6;
        }
        v8 += 32;
        if (v8 - v7 == 4096)
        {
          v11 = (uint64_t)v6[1];
          ++v6;
          v7 = v11;
          v8 = v11;
        }
      }
      while (v8 != v9);
      v2 = (void **)a1[1];
      v3 = (void **)a1[2];
    }
  }
  *v4 = 0;
  v12 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v3 = (void **)a1[2];
      v2 = (void **)(a1[1] + 8);
      a1[1] = v2;
      v12 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  v13 = v12 >> 3;
  if (v13 == 1)
  {
    v14 = 64;
  }
  else
  {
    if (v13 != 2)
      goto LABEL_18;
    v14 = 128;
  }
  a1[4] = v14;
LABEL_18:
  while (v2 != v3)
  {
    v15 = *v2++;
    operator delete(v15);
  }
  return std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **>>::~__split_buffer((uint64_t)a1);
}

uint64_t std::deque<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::~deque[abi:ne180100](_QWORD *a1)
{
  void **v2;
  void **v3;
  _QWORD *v4;
  unint64_t v5;
  void **v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  void *v14;

  v2 = (void **)a1[1];
  v3 = (void **)a1[2];
  if (v3 == v2)
  {
    v4 = a1 + 5;
    v3 = (void **)a1[1];
  }
  else
  {
    v4 = a1 + 5;
    v5 = a1[4];
    v6 = &v2[v5 >> 9];
    v7 = (uint64_t *)((char *)*v6 + 8 * (v5 & 0x1FF));
    v8 = *(uint64_t *)((char *)v2 + (((a1[5] + v5) >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * ((a1[5] + v5) & 0x1FF);
    if (v7 != (uint64_t *)v8)
    {
      do
      {
        v9 = *v7;
        *v7 = 0;
        if (v9)
          (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
        if ((char *)++v7 - (_BYTE *)*v6 == 4096)
        {
          v10 = (uint64_t *)v6[1];
          ++v6;
          v7 = v10;
        }
      }
      while (v7 != (uint64_t *)v8);
      v2 = (void **)a1[1];
      v3 = (void **)a1[2];
    }
  }
  *v4 = 0;
  v11 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v3 = (void **)a1[2];
      v2 = (void **)(a1[1] + 8);
      a1[1] = v2;
      v11 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  v12 = v11 >> 3;
  if (v12 == 1)
  {
    v13 = 256;
  }
  else
  {
    if (v12 != 2)
      goto LABEL_18;
    v13 = 512;
  }
  a1[4] = v13;
LABEL_18:
  while (v2 != v3)
  {
    v14 = *v2++;
    operator delete(v14);
  }
  return std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **>>::~__split_buffer((uint64_t)a1);
}

void std::vector<kaldi::quasar::SeevaBeamSearchBase::Breadcrumb>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 72;
        std::allocator<kaldi::quasar::SeevaBeamSearchBase::Breadcrumb>::destroy[abi:ne180100]((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t std::deque<std::vector<BOOL>>::~deque[abi:ne180100](_QWORD *a1)
{
  void **v2;
  void **v3;
  _QWORD *v4;
  unint64_t v5;
  void **v6;
  _BYTE *v7;
  void **v8;
  unint64_t v9;
  void **v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  void *v14;

  v2 = (void **)a1[1];
  v3 = (void **)a1[2];
  if (v3 == v2)
  {
    v4 = a1 + 5;
    v3 = (void **)a1[1];
  }
  else
  {
    v4 = a1 + 5;
    v5 = a1[4];
    v6 = &v2[v5 / 0xAA];
    v7 = *v6;
    v8 = (void **)((char *)*v6 + 24 * (v5 % 0xAA));
    v9 = (unint64_t)v2[(a1[5] + v5) / 0xAA] + 24 * ((a1[5] + v5) % 0xAA);
    if (v8 != (void **)v9)
    {
      do
      {
        if (*v8)
        {
          operator delete(*v8);
          v7 = *v6;
        }
        v8 += 3;
        if ((char *)v8 - v7 == 4080)
        {
          v10 = (void **)v6[1];
          ++v6;
          v7 = v10;
          v8 = v10;
        }
      }
      while (v8 != (void **)v9);
      v2 = (void **)a1[1];
      v3 = (void **)a1[2];
    }
  }
  *v4 = 0;
  v11 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v3 = (void **)a1[2];
      v2 = (void **)(a1[1] + 8);
      a1[1] = v2;
      v11 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  v12 = v11 >> 3;
  if (v12 == 1)
  {
    v13 = 85;
  }
  else
  {
    if (v12 != 2)
      goto LABEL_18;
    v13 = 170;
  }
  a1[4] = v13;
LABEL_18:
  while (v2 != v3)
  {
    v14 = *v2++;
    operator delete(v14);
  }
  return std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **>>::~__split_buffer((uint64_t)a1);
}

void kaldi::quasar::SeevaBeamSearchBigLm::~SeevaBeamSearchBigLm(kaldi::quasar::SeevaBeamSearchBigLm *this)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void **v7;

  *(_QWORD *)this = &unk_1E5D33A10;
  v7 = (void **)((char *)this + 680);
  std::vector<std::pair<std::vector<quasar::rescoring::FeatureType>,std::vector<quasar::rescoring::FeatureTransformation>>>::__destroy_vector::operator()[abi:ne180100](&v7);
  v2 = (void *)*((_QWORD *)this + 82);
  if (v2)
  {
    *((_QWORD *)this + 83) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 79);
  if (v3)
  {
    *((_QWORD *)this + 80) = v3;
    operator delete(v3);
  }
  v4 = (void *)*((_QWORD *)this + 75);
  if (v4)
  {
    *((_QWORD *)this + 76) = v4;
    operator delete(v4);
  }
  v5 = (void *)*((_QWORD *)this + 72);
  if (v5)
  {
    *((_QWORD *)this + 73) = v5;
    operator delete(v5);
  }
  fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::~SortedMatcher((_QWORD *)this + 51);
  *(_QWORD *)this = &unk_1E5D33808;
  std::deque<kaldi::quasar::SeevaBeamSearchBase::RollbackStats>::~deque[abi:ne180100]((_QWORD *)this + 43);
  std::deque<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::~deque[abi:ne180100]((_QWORD *)this + 37);
  std::deque<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::~deque[abi:ne180100]((_QWORD *)this + 31);
  v7 = (void **)((char *)this + 224);
  std::vector<kaldi::quasar::SeevaBeamSearchBase::Breadcrumb>::__destroy_vector::operator()[abi:ne180100](&v7);
  std::deque<std::vector<int>>::~deque[abi:ne180100]((_QWORD *)this + 22);
  std::deque<std::vector<BOOL>>::~deque[abi:ne180100]((_QWORD *)this + 16);
  std::deque<std::vector<int>>::~deque[abi:ne180100]((_QWORD *)this + 10);
  v6 = (void *)*((_QWORD *)this + 7);
  if (v6)
  {
    *((_QWORD *)this + 8) = v6;
    operator delete(v6);
  }
}

_QWORD *std::allocate_shared[abi:ne180100]<fst::ComposeDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,std::allocator<fst::ComposeDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,std::shared_ptr<fst::BackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>> &,std::shared_ptr<fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> &,void>@<X0>(uint64_t *a1@<X1>, uint64_t *a2@<X2>, _QWORD *a3@<X8>)
{
  _QWORD *v6;
  _QWORD *result;

  v6 = operator new(0x90uLL);
  result = std::__shared_ptr_emplace<fst::ComposeDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::__shared_ptr_emplace[abi:ne180100]<std::shared_ptr<fst::BackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>> &,std::shared_ptr<fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> &,std::allocator<fst::ComposeDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,0>(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  return result;
}

void sub_1ADC34F1C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<fst::ComposeDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::__shared_ptr_emplace[abi:ne180100]<std::shared_ptr<fst::BackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>> &,std::shared_ptr<fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> &,std::allocator<fst::ComposeDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,0>(_QWORD *a1, uint64_t *a2, uint64_t *a3)
{
  char v5;

  a1[2] = 0;
  *a1 = &unk_1E5D41060;
  a1[1] = 0;
  std::allocator<fst::ComposeDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::construct[abi:ne180100]<fst::ComposeDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,std::shared_ptr<fst::BackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>> &,std::shared_ptr<fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> &>((uint64_t)&v5, (uint64_t)(a1 + 3), a2, a3);
  return a1;
}

void sub_1ADC34F80(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::allocator<fst::ComposeDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::construct[abi:ne180100]<fst::ComposeDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,std::shared_ptr<fst::BackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>> &,std::shared_ptr<fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> &>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  std::__shared_weak_count *v23;
  uint64_t v24;
  std::__shared_weak_count *v25;

  v4 = (std::__shared_weak_count *)a3[1];
  v24 = *a3;
  v25 = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  v7 = (std::__shared_weak_count *)a4[1];
  v22 = *a4;
  v23 = v7;
  if (v7)
  {
    v8 = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  __asm { FMOV            V0.2S, #1.0 }
  v21 = _D0;
  fst::ComposeDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::ComposeDeterministicOnDemandFst(a2, &v24, &v22, &v21);
  v15 = v23;
  if (v23)
  {
    v16 = (unint64_t *)&v23->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  v18 = v25;
  if (v25)
  {
    v19 = (unint64_t *)&v25->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
}

void sub_1ADC35080(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  _Unwind_Resume(a1);
}

_QWORD *std::allocate_shared[abi:ne180100]<fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,std::allocator<fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,std::shared_ptr<fst::ComposeDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>> &,void>@<X0>(uint64_t *a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *result;

  v4 = operator new(0x60uLL);
  result = std::__shared_ptr_emplace<fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::__shared_ptr_emplace[abi:ne180100]<std::shared_ptr<fst::ComposeDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>> &,std::allocator<fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,0>(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_1ADC350E0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::__shared_ptr_emplace[abi:ne180100]<std::shared_ptr<fst::ComposeDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>> &,std::allocator<fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,0>(_QWORD *a1, uint64_t *a2)
{
  char v4;

  a1[2] = 0;
  *a1 = &unk_1E5D40FF0;
  a1[1] = 0;
  std::allocator<fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::construct[abi:ne180100]<fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,std::shared_ptr<fst::ComposeDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>> &>((uint64_t)&v4, a1 + 3, a2);
  return a1;
}

void sub_1ADC35140(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::allocator<fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::construct[abi:ne180100]<fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,std::shared_ptr<fst::ComposeDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>> &>(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;

  v3 = (std::__shared_weak_count *)a3[1];
  v9 = *a3;
  v10 = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }
  fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::CacheDeterministicOnDemandFst(a2, &v9, 0x20000uLL);
  v6 = v10;
  if (v10)
  {
    v7 = (unint64_t *)&v10->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_1ADC351DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

_QWORD *std::allocate_shared[abi:ne180100]<fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,std::allocator<fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,std::shared_ptr<fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> &,void>@<X0>(uint64_t *a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *result;

  v4 = operator new(0x60uLL);
  result = std::__shared_ptr_emplace<fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::__shared_ptr_emplace[abi:ne180100]<std::shared_ptr<fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> &,std::allocator<fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,0>(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_1ADC35234(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::__shared_ptr_emplace[abi:ne180100]<std::shared_ptr<fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> &,std::allocator<fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,0>(_QWORD *a1, uint64_t *a2)
{
  char v4;

  a1[2] = 0;
  *a1 = &unk_1E5D40FF0;
  a1[1] = 0;
  std::allocator<fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::construct[abi:ne180100]<fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,std::shared_ptr<fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> &>((uint64_t)&v4, a1 + 3, a2);
  return a1;
}

void sub_1ADC35294(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::allocator<fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::construct[abi:ne180100]<fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,std::shared_ptr<fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> &>(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;

  v3 = (std::__shared_weak_count *)a3[1];
  v9 = *a3;
  v10 = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }
  fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::CacheDeterministicOnDemandFst(a2, &v9, 0x20000uLL);
  v6 = v10;
  if (v10)
  {
    v7 = (unint64_t *)&v10->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_1ADC35330(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::vector<quasar::Token>::__emplace_back_slow_path<std::string,int,int,int,float const&,BOOL>(uint64_t *a1, uint64_t a2, int *a3, int *a4, int *a5, float *a6, unsigned __int8 *a7)
{
  uint64_t v8;
  unint64_t v9;
  unint64_t v16;
  char *v17;
  uint64_t v18;
  char *v20;
  std::string *v21;
  std::string::value_type *v22;
  char *v23;
  uint64_t *v24;

  v8 = 0x6DB6DB6DB6DB6DB7 * ((a1[1] - *a1) >> 5);
  v9 = v8 + 1;
  if ((unint64_t)(v8 + 1) > 0x124924924924924)
    std::vector<int>::__throw_length_error[abi:ne180100]();
  if (0xDB6DB6DB6DB6DB6ELL * ((a1[2] - *a1) >> 5) > v9)
    v9 = 0xDB6DB6DB6DB6DB6ELL * ((a1[2] - *a1) >> 5);
  if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * ((a1[2] - *a1) >> 5)) >= 0x92492492492492)
    v16 = 0x124924924924924;
  else
    v16 = v9;
  v24 = a1 + 2;
  if (v16)
    v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::Token>>((uint64_t)(a1 + 2), v16);
  else
    v17 = 0;
  v20 = v17;
  v21 = (std::string *)&v17[224 * v8];
  v23 = &v17[224 * v16];
  std::allocator<quasar::Token>::construct[abi:ne180100]<quasar::Token,std::string,int,int,int,float const&,BOOL>((uint64_t)(a1 + 2), v21, a2, a3, a4, a5, a6, a7);
  v22 = &v21[9].__r_.__value_.__s.__data_[8];
  std::vector<quasar::Token>::__swap_out_circular_buffer(a1, &v20);
  v18 = a1[1];
  std::__split_buffer<quasar::Token>::~__split_buffer((uint64_t)&v20);
  return v18;
}

void sub_1ADC35494(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<quasar::Token>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::allocator<quasar::Token>::construct[abi:ne180100]<quasar::Token,std::string,int,int,int,float const&,BOOL>(uint64_t a1, std::string *a2, uint64_t a3, int *a4, int *a5, int *a6, float *a7, unsigned __int8 *a8)
{
  int v9;
  int v10;
  int v11;
  float v12;
  int v13;
  void *__p[2];
  char v15;
  __int128 *v16[3];
  void *v17[2];
  char v18;
  void *v19[2];
  char v20;
  __int128 v21;
  uint64_t v22;

  v21 = *(_OWORD *)a3;
  v22 = *(_QWORD *)(a3 + 16);
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)a3 = 0;
  v9 = *a4;
  v10 = *a5;
  v11 = *a6;
  v12 = *a7;
  v13 = *a8;
  std::string::basic_string[abi:ne180100]<0>(v19, "");
  std::string::basic_string[abi:ne180100]<0>(v17, "");
  memset(v16, 0, sizeof(v16));
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  quasar::Token::Token(a2, &v21, v9, v10, v11, v13 != 0, 0, (__int128 *)v19, v12, (__int128 *)v17, v16, 0, (__int128 *)__p, 0, 0);
  if (v15 < 0)
    operator delete(__p[0]);
  __p[0] = v16;
  std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  if (v18 < 0)
    operator delete(v17[0]);
  if (v20 < 0)
    operator delete(v19[0]);
  if (SHIBYTE(v22) < 0)
    operator delete((void *)v21);
}

void sub_1ADC355E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  uint64_t v35;

  if (a20 < 0)
    operator delete(__p);
  __p = &a21;
  std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  if (a29 < 0)
    operator delete(a24);
  if (a35 < 0)
    operator delete(a30);
  if (*(char *)(v35 - 89) < 0)
    operator delete(*(void **)(v35 - 112));
  _Unwind_Resume(a1);
}

void quasar::CustomPronData::loadFromStream(uint64_t *a1@<X0>, quasar::lm::SymbolTableData *a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v7;
  std::string *v8;
  uint64_t v9;
  _QWORD *v10;
  std::string *p_p;
  const std::string *v12;
  std::string::size_type v13;
  const std::string *v14;
  const std::string *v15;
  std::string::size_type v16;
  const std::string *v17;
  char v18;
  std::string::size_type v19;
  uint64_t *v20;
  BOOL IsOov;
  uint64_t *v22;
  unint64_t v23;
  __int128 v24;
  char *v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  unint64_t v29;
  __int128 v30;
  char *v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  __int128 v35;
  char *v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  char **v43;
  BOOL v44;
  std::string::size_type v45;
  _BYTE *v46;
  std::string *v47;
  uint64_t v48;
  const std::string *v49;
  std::string __p;
  char **v52;
  std::string *v53;
  uint64_t v54;
  int v55;
  std::string v56;
  char **v57;
  char *v58;
  uint64_t v59;
  char **v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  void *v64[2];
  uint64_t v65;
  uint64_t v66;
  std::string *v67;

  v7 = operator new();
  *(_BYTE *)v7 = 1;
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(v7 + 8), "");
  *(_OWORD *)(v7 + 48) = 0u;
  *(_OWORD *)(v7 + 64) = 0u;
  *(_OWORD *)(v7 + 32) = 0u;
  *a4 = v7;
  std::string::basic_string[abi:ne180100]<0>(v64, "_");
  quasar::Locale::toInternalShortIdentifier(a3, (uint64_t)v64);
  v8 = (std::string *)operator new();
  quasar::PhonesetMapping::PhonesetMapping(v8, (__int128 *)&__p);
  v67 = v8;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v65) < 0)
    operator delete(v64[0]);
  v64[0] = 0;
  v64[1] = 0;
  v65 = 0;
  v9 = operator new();
  v10 = operator new(0x60uLL);
  *(_QWORD *)(v9 + 8) = v10;
  v10[7] = 0;
  v10[8] = v10 + 7;
  v10[9] = v10 + 7;
  v10[10] = v10 + 10;
  v10[11] = v10 + 10;
  *(_QWORD *)(v9 + 24) = 0;
  v66 = v9;
  boost::property_tree::xml_parser::read_xml<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>(*a1, (uint64_t)v64);
  std::string::basic_string[abi:ne180100]<0>(&__p, "lexicon");
  LOBYTE(v52) = 46;
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  v53 = p_p;
  boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::get_child_optional((uint64_t)v64, (uint64_t)&__p, &v63);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (!v63)
  {
    MEMORY[0x1AF44C914](v7 + 8, "Custom pronunciation file contained no lexicon field");
    *(_BYTE *)v7 = 0;
    goto LABEL_86;
  }
  v12 = *(const std::string **)(*(_QWORD *)(v63 + 24) + 8);
  v13 = v12[3].__r_.__value_.__r.__words[2];
  if (v13)
    v14 = (const std::string *)(v13 - 80);
  else
    v14 = 0;
  if (v14 != v12)
  {
    v49 = *(const std::string **)(*(_QWORD *)(v63 + 24) + 8);
    do
    {
      if (!std::string::compare(v14, "lexeme"))
      {
        v61 = 0;
        v62 = 0;
        v60 = &v61;
        v58 = 0;
        v59 = 0;
        v57 = &v58;
        v15 = *(const std::string **)(v14[2].__r_.__value_.__r.__words[0] + 8);
        v16 = v15[3].__r_.__value_.__r.__words[2];
        if (v16)
          v17 = (const std::string *)(v16 - 80);
        else
          v17 = 0;
        if (v17 == v15)
          goto LABEL_81;
        v18 = 0;
        do
        {
          if (!std::string::compare(v17, "grapheme"))
          {
            std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t **)&v57, (const void **)&v17[1].__r_.__value_.__l.__data_, (uint64_t)&v17[1]);
          }
          else if (!std::string::compare(v17, "phoneme"))
          {
            quasar::PhonesetMapping::getNvASRPhoneSequence((uint64_t)v67, (uint64_t)&v17[1], (uint64_t)&__p);
            if (!std::string::compare(&__p, ""))
              v18 = 1;
            else
              std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t **)&v60, (const void **)&__p.__r_.__value_.__l.__data_, (uint64_t)&__p);
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__p.__r_.__value_.__l.__data_);
          }
          else
          {
            v18 |= std::string::compare(v17, "alias") == 0;
          }
          v19 = v17[3].__r_.__value_.__r.__words[2];
          if (v19)
            v17 = (const std::string *)(v19 - 80);
          else
            v17 = 0;
        }
        while (v17 != v15);
        if (!v59 || !((v62 != 0) | v18 & 1))
        {
LABEL_81:
          v46 = (_BYTE *)*a4;
          v47 = (std::string *)(*a4 + 8);
          MEMORY[0x1AF44C914](v47, "Custom pronunciation file was missing fields");
          if (!v62)
            std::string::append(v47, " (contains no phonemes)");
          if (!v59)
            std::string::append(v47, " (contains no graphemes)");
          *v46 = 0;
          std::__tree<std::string>::destroy((uint64_t)&v57, v58);
          std::__tree<std::string>::destroy((uint64_t)&v60, v61);
          break;
        }
        v20 = (uint64_t *)v57;
        if (v57 != &v58)
        {
          do
          {
            if (*((char *)v20 + 55) < 0)
              std::string::__init_copy_ctor_external(&v56, (const std::string::value_type *)v20[4], v20[5]);
            else
              v56 = *(std::string *)(v20 + 4);
            if (v62)
            {
              IsOov = quasar::lm::SymbolTableData::tokenIsOov(a2);
              v22 = (uint64_t *)*a4;
              if (IsOov)
              {
                quasar::AppLmData::Oov::Oov(&__p, (__int128 *)&v56, (const void ***)&v60, 1);
                v23 = v22[5];
                if (v23 >= v22[6])
                {
                  v40 = std::vector<quasar::AppLmData::Oov>::__push_back_slow_path<quasar::AppLmData::Oov>(v22 + 4, (__int128 *)&__p);
                }
                else
                {
                  v24 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
                  *(_QWORD *)(v23 + 16) = *((_QWORD *)&__p.__r_.__value_.__l + 2);
                  *(_OWORD *)v23 = v24;
                  memset(&__p, 0, sizeof(__p));
                  *(_QWORD *)(v23 + 24) = v52;
                  v25 = (char *)v53;
                  *(_QWORD *)(v23 + 32) = v53;
                  v26 = v23 + 32;
                  v27 = v54;
                  *(_QWORD *)(v23 + 40) = v54;
                  if (v27)
                  {
                    *((_QWORD *)v25 + 2) = v26;
                    v52 = (char **)&v53;
                    v53 = 0;
                    v54 = 0;
                  }
                  else
                  {
                    *(_QWORD *)(v23 + 24) = v26;
                  }
                  *(_DWORD *)(v23 + 48) = v55;
                  v40 = v23 + 56;
                  v22[5] = v23 + 56;
                }
                v22[5] = v40;
              }
              else
              {
                quasar::AppLmData::Oov::Oov(&__p, (__int128 *)&v56, (const void ***)&v60, 1);
                v34 = v22[8];
                if (v34 >= v22[9])
                {
                  v41 = std::vector<quasar::AppLmData::Oov>::__push_back_slow_path<quasar::AppLmData::Oov>(v22 + 7, (__int128 *)&__p);
                }
                else
                {
                  v35 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
                  *(_QWORD *)(v34 + 16) = *((_QWORD *)&__p.__r_.__value_.__l + 2);
                  *(_OWORD *)v34 = v35;
                  memset(&__p, 0, sizeof(__p));
                  *(_QWORD *)(v34 + 24) = v52;
                  v36 = (char *)v53;
                  *(_QWORD *)(v34 + 32) = v53;
                  v37 = v34 + 32;
                  v38 = v54;
                  *(_QWORD *)(v34 + 40) = v54;
                  if (v38)
                  {
                    *((_QWORD *)v36 + 2) = v37;
                    v52 = (char **)&v53;
                    v53 = 0;
                    v54 = 0;
                  }
                  else
                  {
                    *(_QWORD *)(v34 + 24) = v37;
                  }
                  *(_DWORD *)(v34 + 48) = v55;
                  v41 = v34 + 56;
                  v22[8] = v34 + 56;
                }
                v22[8] = v41;
              }
            }
            else
            {
              v28 = (uint64_t *)*a4;
              quasar::AppLmData::Oov::Oov(&__p, (__int128 *)&v56, (const void ***)&v60, 1);
              v29 = v28[8];
              if (v29 >= v28[9])
              {
                v39 = std::vector<quasar::AppLmData::Oov>::__push_back_slow_path<quasar::AppLmData::Oov>(v28 + 7, (__int128 *)&__p);
              }
              else
              {
                v30 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
                *(_QWORD *)(v29 + 16) = *((_QWORD *)&__p.__r_.__value_.__l + 2);
                *(_OWORD *)v29 = v30;
                memset(&__p, 0, sizeof(__p));
                *(_QWORD *)(v29 + 24) = v52;
                v31 = (char *)v53;
                *(_QWORD *)(v29 + 32) = v53;
                v32 = v29 + 32;
                v33 = v54;
                *(_QWORD *)(v29 + 40) = v54;
                if (v33)
                {
                  *((_QWORD *)v31 + 2) = v32;
                  v52 = (char **)&v53;
                  v53 = 0;
                  v54 = 0;
                }
                else
                {
                  *(_QWORD *)(v29 + 24) = v32;
                }
                *(_DWORD *)(v29 + 48) = v55;
                v39 = v29 + 56;
                v28[8] = v29 + 56;
              }
              v28[8] = v39;
            }
            std::__tree<std::string>::destroy((uint64_t)&v52, (char *)v53);
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__p.__r_.__value_.__l.__data_);
            if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v56.__r_.__value_.__l.__data_);
            v42 = (char *)v20[1];
            if (v42)
            {
              do
              {
                v43 = (char **)v42;
                v42 = *(char **)v42;
              }
              while (v42);
            }
            else
            {
              do
              {
                v43 = (char **)v20[2];
                v44 = *v43 == (char *)v20;
                v20 = (uint64_t *)v43;
              }
              while (!v44);
            }
            v20 = (uint64_t *)v43;
          }
          while (v43 != &v58);
        }
        std::__tree<std::string>::destroy((uint64_t)&v57, v58);
        std::__tree<std::string>::destroy((uint64_t)&v60, v61);
        v12 = v49;
      }
      v45 = v14[3].__r_.__value_.__r.__words[2];
      if (v45)
        v14 = (const std::string *)(v45 - 80);
      else
        v14 = 0;
    }
    while (v14 != v12);
  }
LABEL_86:
  boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::~basic_ptree((uint64_t)v64);
  v48 = (uint64_t)v67;
  v67 = 0;
  if (v48)
    std::default_delete<quasar::PhonesetMapping>::operator()[abi:ne180100]((uint64_t)&v67, v48);
}

void sub_1ADC35CD0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,char a28,char *a29,uint64_t a30,char a31,char *a32)
{
  uint64_t *v32;
  uint64_t v33;
  uint64_t v35;
  uint64_t v36;

  std::__tree<std::string>::destroy((uint64_t)&a28, a29);
  std::__tree<std::string>::destroy((uint64_t)&a31, a32);
  boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::~basic_ptree(v33 - 128);
  v35 = *(_QWORD *)(v33 - 96);
  *(_QWORD *)(v33 - 96) = 0;
  if (v35)
    std::default_delete<quasar::PhonesetMapping>::operator()[abi:ne180100](v33 - 96, v35);
  v36 = *v32;
  *v32 = 0;
  if (v36)
    std::default_delete<quasar::CustomPronData>::operator()[abi:ne180100]((uint64_t)v32, v36);
  _Unwind_Resume(a1);
}

void boost::property_tree::xml_parser::read_xml<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>(uint64_t a1, uint64_t a2)
{
  boost::property_tree::xml_parser::read_xml_internal<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>(a1, a2);
}

void sub_1ADC35F00(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void boost::property_tree::xml_parser::read_xml_internal<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  __int128 *v3;
  __int128 *v4;
  uint64_t v5;
  uint64_t v6;
  __int128 *v7;
  __int128 *v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  char *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  size_t v18;
  void *v19;
  char *v20;
  char *v21;
  char v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  __int128 v26;
  std::string::size_type v27;
  uint64_t v28;
  std::string v29;
  uint64_t v30;
  _QWORD v31[3];
  void *__p;
  char *v33;
  unint64_t v34;
  _OWORD v35[2];
  uint64_t v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD v40[3];
  _BYTE v41[65536];
  __int128 v42;
  uint64_t v43;

  v2 = (_QWORD *)MEMORY[0x1E0C80A78](a1, a2);
  v4 = v3;
  v6 = v5;
  v8 = v7;
  v9 = v2;
  v43 = *MEMORY[0x1E0C80C00];
  v10 = *v2;
  *(_DWORD *)((char *)v2 + *(_QWORD *)(*v2 - 24) + 8) &= ~0x1000u;
  v11 = *(_QWORD **)((char *)v2 + *(_QWORD *)(v10 - 24) + 40);
  v33 = 0;
  v34 = 0;
  __p = 0;
  std::vector<char>::__init_with_sentinel[abi:ne180100]<std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>((unint64_t *)&__p, v11, 0);
  if (*(_DWORD *)((char *)v9 + *(_QWORD *)(*v9 - 24) + 32))
  {
    std::string::basic_string[abi:ne180100]<0>(&v29, "read error");
    boost::property_tree::file_parser_error::file_parser_error((uint64_t)v35, (uint64_t)&v29, v4, 0);
    *(_QWORD *)&v35[0] = &unk_1E5D297A8;
    v31[0] = "/AppleInternal/Library/BuildRoots/ae269ea5-5122-11ef-a621-12147c76fa9d/Applications/Xcode.app/Contents/Deve"
             "loper/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.0.Internal.sdk/usr/local/include/boost/property"
             "_tree/detail/xml_parser_read_rapidxml.hpp";
    v31[1] = "void boost::property_tree::xml_parser::read_xml_internal(std::basic_istream<typename Ptree::key_type::value"
             "_type> &, Ptree &, int, const std::string &) [Ptree = boost::property_tree::basic_ptree<std::string, std::string>]";
    v31[2] = 101;
    boost::throw_exception<boost::property_tree::xml_parser::xml_parser_error>((uint64_t)v35, (uint64_t)v31);
  }
  v12 = v33;
  if ((unint64_t)v33 >= v34)
  {
    v14 = (unint64_t)__p;
    v15 = v33 - (_BYTE *)__p;
    v16 = v33 - (_BYTE *)__p + 1;
    if (v16 < 0)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v17 = v34 - (_QWORD)__p;
    if (2 * (v34 - (unint64_t)__p) > v16)
      v16 = 2 * v17;
    if (v17 >= 0x3FFFFFFFFFFFFFFFLL)
      v18 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v18 = v16;
    if (v18)
      v19 = operator new(v18);
    else
      v19 = 0;
    v20 = (char *)v19 + v18;
    *((_BYTE *)v19 + v15) = 0;
    v13 = (uint64_t)v19 + v15 + 1;
    if (v12 == (char *)v14)
    {
      v19 = (char *)v19 + v15;
    }
    else
    {
      v21 = &v12[~v14];
      do
      {
        v22 = *--v12;
        (v21--)[(_QWORD)v19] = v22;
      }
      while (v12 != (char *)v14);
      v12 = (char *)__p;
    }
    __p = v19;
    v33 = (char *)v13;
    v34 = (unint64_t)v20;
    if (v12)
      operator delete(v12);
  }
  else
  {
    *v33 = 0;
    v13 = (uint64_t)(v12 + 1);
  }
  v33 = (char *)v13;
  v36 = 0;
  v35[0] = 0u;
  v37 = 0;
  v38 = 0;
  v39 = 0;
  v42 = 0u;
  v40[0] = v41;
  v40[1] = v41;
  v40[2] = &v42;
  if ((v6 & 2) != 0)
  {
    if ((v6 & 4) != 0)
      boost::property_tree::detail::rapidxml::xml_document<char>::parse<3072>(v35, (char *)__p);
    else
      boost::property_tree::detail::rapidxml::xml_document<char>::parse<0>(v35, (char *)__p);
  }
  else if ((v6 & 4) != 0)
  {
    boost::property_tree::detail::rapidxml::xml_document<char>::parse<3136>(v35, (char *)__p);
  }
  else
  {
    boost::property_tree::detail::rapidxml::xml_document<char>::parse<64>(v35, (char *)__p);
  }
  memset(&v29, 0, sizeof(v29));
  v23 = operator new();
  v24 = operator new(0x60uLL);
  *(_QWORD *)(v23 + 8) = v24;
  v24[7] = 0;
  v24[8] = v24 + 7;
  v24[9] = v24 + 7;
  v24[10] = v24 + 10;
  v24[11] = v24 + 10;
  *(_QWORD *)(v23 + 24) = 0;
  v30 = v23;
  v25 = v38;
  if (v38)
  {
    do
    {
      boost::property_tree::xml_parser::read_xml_node<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>,char>(v25, &v29, v6);
      v25 = *(_QWORD *)(v25 + 88);
    }
    while (v25);
    v23 = v30;
  }
  v26 = *v8;
  *v8 = *(_OWORD *)&v29.__r_.__value_.__l.__data_;
  *(_OWORD *)&v29.__r_.__value_.__l.__data_ = v26;
  v27 = *((_QWORD *)v8 + 2);
  v28 = *((_QWORD *)v8 + 3);
  *((_QWORD *)v8 + 2) = *((_QWORD *)&v29.__r_.__value_.__l + 2);
  *((_QWORD *)v8 + 3) = v23;
  v29.__r_.__value_.__r.__words[2] = v27;
  v30 = v28;
  boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::~basic_ptree((uint64_t)&v29);
  boost::property_tree::detail::rapidxml::memory_pool<char>::clear(v40);
  if (__p)
  {
    v33 = (char *)__p;
    operator delete(__p);
  }
}

void sub_1ADC3623C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,std::runtime_error a26)
{
  boost::property_tree::file_parser_error::~file_parser_error(&a26);
  if (a14 < 0)
    operator delete(__p);
  if (a19)
    operator delete(a19);
  _Unwind_Resume(a1);
}

void sub_1ADC36264(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16)
{
  if (a16)
    operator delete(a16);
  JUMPOUT(0x1ADC363E0);
}

void sub_1ADC36274(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, const char *a16, const char *a17, uint64_t a18, unsigned __int8 *a19, unsigned __int8 *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26)
{
  __int128 *v26;
  _QWORD *v27;
  uint64_t v28;
  _QWORD *v31;
  unsigned __int8 *v32;
  unsigned __int8 *v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  char *v37;

  MEMORY[0x1AF44D190](v28, 0x1020C402FC1992ELL);
  if (a14 < 0)
    operator delete(__p);
  boost::property_tree::detail::rapidxml::memory_pool<char>::clear(v27);
  if (a2 == 1)
  {
    v31 = __cxa_begin_catch(a1);
    v32 = a19;
    v33 = (unsigned __int8 *)v31[2];
    if (a19 == v33)
    {
      v34 = 1;
    }
    else
    {
      v35 = 0;
      do
      {
        v36 = *v32++;
        if (v36 == 10)
          ++v35;
      }
      while (v32 != v33);
      v34 = v35 + 1;
    }
    v37 = (char *)(*(uint64_t (**)(_QWORD *))(*v31 + 16))(v31);
    std::string::basic_string[abi:ne180100]<0>(&__p, v37);
    boost::property_tree::file_parser_error::file_parser_error((uint64_t)&a26, (uint64_t)&__p, v26, v34);
    a26 = &unk_1E5D297A8;
    a16 = "/AppleInternal/Library/BuildRoots/ae269ea5-5122-11ef-a621-12147c76fa9d/Applications/Xcode.app/Contents/Develop"
          "er/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.0.Internal.sdk/usr/local/include/boost/property_tree/"
          "detail/xml_parser_read_rapidxml.hpp";
    a17 = "void boost::property_tree::xml_parser::read_xml_internal(std::basic_istream<typename Ptree::key_type::value_ty"
          "pe> &, Ptree &, int, const std::string &) [Ptree = boost::property_tree::basic_ptree<std::string, std::string>]";
    a18 = 138;
    boost::throw_exception<boost::property_tree::xml_parser::xml_parser_error>((uint64_t)&a26, (uint64_t)&a16);
  }
  if (a19)
  {
    a20 = a19;
    operator delete(a19);
  }
  _Unwind_Resume(a1);
}

void sub_1ADC36390(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,std::runtime_error a26)
{
  boost::property_tree::file_parser_error::~file_parser_error(&a26);
  if (a14 < 0)
    operator delete(__p);
  __cxa_end_catch();
  JUMPOUT(0x1ADC363C0);
}

void sub_1ADC363D8(void *a1, int a2)
{
  if (!a2)
    JUMPOUT(0x1ADC363E0);
  __clang_call_terminate(a1);
}

void boost::throw_exception<boost::property_tree::xml_parser::xml_parser_error>(uint64_t a1, uint64_t a2)
{
  void *exception;

  exception = __cxa_allocate_exception(0x78uLL);
  boost::wrapexcept<boost::property_tree::xml_parser::xml_parser_error>::wrapexcept(exception, a1, a2);
}

void sub_1ADC36438(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

_QWORD *boost::property_tree::detail::rapidxml::xml_document<char>::parse<3072>(_QWORD *result, char *a2)
{
  uint64_t v2;
  uint64_t i;
  _QWORD *v4;
  uint64_t j;
  char *v6;
  unsigned __int8 v7;
  int v8;
  int v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *exception;
  char *v13;
  char *v14;

  v2 = (uint64_t)result;
  v14 = a2;
  v4 = result + 6;
  for (i = result[6]; i; i = *(_QWORD *)(i + 88))
    *(_QWORD *)(i + 32) = 0;
  result[6] = 0;
  for (j = result[8]; j; j = *(_QWORD *)(j + 48))
    *(_QWORD *)(j + 32) = 0;
  result[8] = 0;
  if (*a2 == 239 && a2[1] == 187 && a2[2] == 191)
  {
    a2 += 3;
    v14 = a2;
  }
  while (1)
  {
    do
    {
      v6 = a2;
      v8 = *a2++;
      v7 = v8;
      if (v8 < 0)
        v7 = 122;
    }
    while (boost::property_tree::detail::rapidxml::internal::lookup_tables<0>::lookup_whitespace[v7]);
    v14 = v6;
    v9 = *v6;
    if (v9 != 60)
      break;
    v14 = a2;
    result = boost::property_tree::detail::rapidxml::xml_document<char>::parse_node<3072>(v2, &v14);
    if (result)
    {
      v10 = *v4;
      if (*v4)
      {
        v10 = *(_QWORD *)(v2 + 56);
        v11 = (_QWORD *)(v10 + 88);
      }
      else
      {
        v11 = v4;
      }
      *v11 = result;
      result[10] = v10;
      *(_QWORD *)(v2 + 56) = result;
      result[4] = v2;
      result[11] = 0;
    }
    a2 = v14;
  }
  if (v9)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    v13 = v14;
    *exception = &unk_1E5D29870;
    exception[1] = "expected <";
    exception[2] = v13;
  }
  return result;
}

_QWORD *boost::property_tree::detail::rapidxml::xml_document<char>::parse<0>(_QWORD *result, char *a2)
{
  uint64_t v2;
  uint64_t i;
  _QWORD *v4;
  uint64_t j;
  char *v6;
  unsigned __int8 v7;
  int v8;
  int v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *exception;
  char *v13;
  char *v14;

  v2 = (uint64_t)result;
  v14 = a2;
  v4 = result + 6;
  for (i = result[6]; i; i = *(_QWORD *)(i + 88))
    *(_QWORD *)(i + 32) = 0;
  result[6] = 0;
  for (j = result[8]; j; j = *(_QWORD *)(j + 48))
    *(_QWORD *)(j + 32) = 0;
  result[8] = 0;
  if (*a2 == 239 && a2[1] == 187 && a2[2] == 191)
  {
    a2 += 3;
    v14 = a2;
  }
  while (1)
  {
    do
    {
      v6 = a2;
      v8 = *a2++;
      v7 = v8;
      if (v8 < 0)
        v7 = 122;
    }
    while (boost::property_tree::detail::rapidxml::internal::lookup_tables<0>::lookup_whitespace[v7]);
    v14 = v6;
    v9 = *v6;
    if (v9 != 60)
      break;
    v14 = a2;
    result = boost::property_tree::detail::rapidxml::xml_document<char>::parse_node<0>(v2, &v14);
    if (result)
    {
      v10 = *v4;
      if (*v4)
      {
        v10 = *(_QWORD *)(v2 + 56);
        v11 = (_QWORD *)(v10 + 88);
      }
      else
      {
        v11 = v4;
      }
      *v11 = result;
      result[10] = v10;
      *(_QWORD *)(v2 + 56) = result;
      result[4] = v2;
      result[11] = 0;
    }
    a2 = v14;
  }
  if (v9)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    v13 = v14;
    *exception = &unk_1E5D29870;
    exception[1] = "expected <";
    exception[2] = v13;
  }
  return result;
}

_QWORD *boost::property_tree::detail::rapidxml::xml_document<char>::parse<3136>(_QWORD *result, char *a2)
{
  uint64_t v2;
  uint64_t i;
  _QWORD *v4;
  uint64_t j;
  char *v6;
  unsigned __int8 v7;
  int v8;
  int v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *exception;
  char *v13;
  char *v14;

  v2 = (uint64_t)result;
  v14 = a2;
  v4 = result + 6;
  for (i = result[6]; i; i = *(_QWORD *)(i + 88))
    *(_QWORD *)(i + 32) = 0;
  result[6] = 0;
  for (j = result[8]; j; j = *(_QWORD *)(j + 48))
    *(_QWORD *)(j + 32) = 0;
  result[8] = 0;
  if (*a2 == 239 && a2[1] == 187 && a2[2] == 191)
  {
    a2 += 3;
    v14 = a2;
  }
  while (1)
  {
    do
    {
      v6 = a2;
      v8 = *a2++;
      v7 = v8;
      if (v8 < 0)
        v7 = 122;
    }
    while (boost::property_tree::detail::rapidxml::internal::lookup_tables<0>::lookup_whitespace[v7]);
    v14 = v6;
    v9 = *v6;
    if (v9 != 60)
      break;
    v14 = a2;
    result = boost::property_tree::detail::rapidxml::xml_document<char>::parse_node<3136>(v2, &v14);
    if (result)
    {
      v10 = *v4;
      if (*v4)
      {
        v10 = *(_QWORD *)(v2 + 56);
        v11 = (_QWORD *)(v10 + 88);
      }
      else
      {
        v11 = v4;
      }
      *v11 = result;
      result[10] = v10;
      *(_QWORD *)(v2 + 56) = result;
      result[4] = v2;
      result[11] = 0;
    }
    a2 = v14;
  }
  if (v9)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    v13 = v14;
    *exception = &unk_1E5D29870;
    exception[1] = "expected <";
    exception[2] = v13;
  }
  return result;
}

_QWORD *boost::property_tree::detail::rapidxml::xml_document<char>::parse<64>(_QWORD *result, char *a2)
{
  uint64_t v2;
  uint64_t i;
  _QWORD *v4;
  uint64_t j;
  char *v6;
  unsigned __int8 v7;
  int v8;
  int v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *exception;
  char *v13;
  char *v14;

  v2 = (uint64_t)result;
  v14 = a2;
  v4 = result + 6;
  for (i = result[6]; i; i = *(_QWORD *)(i + 88))
    *(_QWORD *)(i + 32) = 0;
  result[6] = 0;
  for (j = result[8]; j; j = *(_QWORD *)(j + 48))
    *(_QWORD *)(j + 32) = 0;
  result[8] = 0;
  if (*a2 == 239 && a2[1] == 187 && a2[2] == 191)
  {
    a2 += 3;
    v14 = a2;
  }
  while (1)
  {
    do
    {
      v6 = a2;
      v8 = *a2++;
      v7 = v8;
      if (v8 < 0)
        v7 = 122;
    }
    while (boost::property_tree::detail::rapidxml::internal::lookup_tables<0>::lookup_whitespace[v7]);
    v14 = v6;
    v9 = *v6;
    if (v9 != 60)
      break;
    v14 = a2;
    result = boost::property_tree::detail::rapidxml::xml_document<char>::parse_node<64>(v2, &v14);
    if (result)
    {
      v10 = *v4;
      if (*v4)
      {
        v10 = *(_QWORD *)(v2 + 56);
        v11 = (_QWORD *)(v10 + 88);
      }
      else
      {
        v11 = v4;
      }
      *v11 = result;
      result[10] = v10;
      *(_QWORD *)(v2 + 56) = result;
      result[4] = v2;
      result[11] = 0;
    }
    a2 = v14;
  }
  if (v9)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    v13 = v14;
    *exception = &unk_1E5D29870;
    exception[1] = "expected <";
    exception[2] = v13;
  }
  return result;
}

void boost::property_tree::xml_parser::read_xml_node<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>,char>(uint64_t a1, std::string *a2, uint64_t a3)
{
  int v6;
  void *v7;
  uint64_t v8;
  _QWORD *v9;
  unint64_t *v10;
  __int128 *v11;
  uint64_t v12;
  _QWORD *v13;
  unint64_t *v14;
  uint64_t i;
  void *v16;
  uint64_t v17;
  _QWORD *v18;
  unint64_t *v19;
  uint64_t v20;
  void *v21;
  size_t v22;
  void **v23;
  uint64_t v24;
  unint64_t *v25;
  uint64_t v26;
  void *v27;
  size_t v28;
  __int128 *v29;
  uint64_t v30;
  void *v31;
  size_t v32;
  char *v33;
  void **v34;
  std::string::size_type v35;
  void *v36;
  uint64_t v37;
  _QWORD *v38;
  std::string v39;
  std::string v40;
  _BYTE v41[32];
  std::string v42;
  uint64_t v43;
  void *__p[2];
  int64_t v45;
  _BYTE v46[40];

  v6 = *(_DWORD *)(a1 + 40);
  if ((v6 - 2) < 2)
  {
    if ((a3 & 1) == 0)
    {
      v26 = *(_QWORD *)(a1 + 8);
      if (v26)
        v27 = *(void **)(a1 + 8);
      else
        v27 = &boost::property_tree::detail::rapidxml::xml_base<char>::nullstr(void)::zero;
      if (v26)
        v28 = *(_QWORD *)(a1 + 24);
      else
        v28 = 0;
      std::string::basic_string[abi:ne180100](__p, v27, v28);
      if (v45 >= 0)
        v34 = __p;
      else
        v34 = (void **)__p[0];
      if (v45 >= 0)
        v35 = HIBYTE(v45);
      else
        v35 = (std::string::size_type)__p[1];
      std::string::append(a2, (const std::string::value_type *)v34, v35);
      if ((SHIBYTE(v45) & 0x80000000) == 0)
        return;
      v36 = __p[0];
LABEL_69:
      operator delete(v36);
      return;
    }
    v29 = (__int128 *)boost::property_tree::xml_parser::xmltext<std::string>();
    if (*(_QWORD *)(a1 + 8))
      v33 = *(char **)(a1 + 8);
    else
      v33 = (char *)&boost::property_tree::detail::rapidxml::xml_base<char>::nullstr(void)::zero;
    std::string::basic_string[abi:ne180100]<0>(&v39, v33);
    if ((SHIBYTE(v39.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      v42 = v39;
      goto LABEL_63;
    }
  }
  else
  {
    if (v6 != 4)
    {
      if (v6 == 1)
      {
        v7 = *(void **)a1;
        if (!*(_QWORD *)a1)
          v7 = &boost::property_tree::detail::rapidxml::xml_base<char>::nullstr(void)::zero;
        v39.__r_.__value_.__r.__words[0] = (std::string::size_type)v7;
        memset(&v42, 0, sizeof(v42));
        v8 = operator new();
        v9 = operator new(0x60uLL);
        *(_QWORD *)(v8 + 8) = v9;
        v9[7] = 0;
        v9[8] = v9 + 7;
        v9[9] = v9 + 7;
        v9[10] = v9 + 10;
        v9[11] = v9 + 10;
        *(_QWORD *)(v8 + 24) = 0;
        v43 = v8;
        std::pair<char *,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>::pair[abi:ne180100]<char *,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>,0>((uint64_t)&v40, &v39, (__int128 *)&v42);
        std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>::pair[abi:ne180100]<char *,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>,0>(__p, (uint64_t)&v40);
        v10 = boost::multi_index::detail::sequenced_index<boost::multi_index::detail::nth_layer<1,std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,boost::multi_index::indexed_by<boost::multi_index::sequenced<boost::multi_index::tag<mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>>,boost::multi_index::ordered_non_unique<boost::multi_index::tag<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::subs::by_name,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>,boost::multi_index::member<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,std::string const,&std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>::first>,std::less<std::string>>,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>,std::allocator<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>>>,boost::mpl::vector0<mpl_::na>>::insert(a2[1].__r_.__value_.__r.__words[0] + 16, *(_QWORD *)(a2[1].__r_.__value_.__r.__words[0] + 8), (__int128 *)__p);
        boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::~basic_ptree((uint64_t)v46);
        if (SHIBYTE(v45) < 0)
          operator delete(__p[0]);
        boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::~basic_ptree((uint64_t)&v40.__r_.__value_.__l.__size_);
        boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::~basic_ptree((uint64_t)&v42);
        if (*(_QWORD *)(a1 + 64))
        {
          v11 = (__int128 *)boost::property_tree::xml_parser::xmlattr<std::string>();
          memset(&v42, 0, sizeof(v42));
          v12 = operator new();
          v13 = operator new(0x60uLL);
          *(_QWORD *)(v12 + 8) = v13;
          v13[7] = 0;
          v13[8] = v13 + 7;
          v13[9] = v13 + 7;
          v13[10] = v13 + 10;
          v13[11] = v13 + 10;
          *(_QWORD *)(v12 + 24) = 0;
          v43 = v12;
          std::pair<std::string,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>::pair[abi:ne180100]<std::string const&,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>,0>(&v40, v11, (__int128 *)&v42);
          std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>::pair[abi:ne180100]<std::string,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>,0>((uint64_t)__p, (__int128 *)&v40);
          v14 = boost::multi_index::detail::sequenced_index<boost::multi_index::detail::nth_layer<1,std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,boost::multi_index::indexed_by<boost::multi_index::sequenced<boost::multi_index::tag<mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>>,boost::multi_index::ordered_non_unique<boost::multi_index::tag<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::subs::by_name,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>,boost::multi_index::member<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,std::string const,&std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>::first>,std::less<std::string>>,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>,std::allocator<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>>>,boost::mpl::vector0<mpl_::na>>::insert(v10[6] + 16, *(_QWORD *)(v10[6] + 8), (__int128 *)__p);
          boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::~basic_ptree((uint64_t)v46);
          if (SHIBYTE(v45) < 0)
            operator delete(__p[0]);
          boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::~basic_ptree((uint64_t)v41);
          if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v40.__r_.__value_.__l.__data_);
          boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::~basic_ptree((uint64_t)&v42);
          for (i = *(_QWORD *)(a1 + 64); i; i = *(_QWORD *)(i + 48))
          {
            v16 = *(void **)i;
            if (!*(_QWORD *)i)
              v16 = &boost::property_tree::detail::rapidxml::xml_base<char>::nullstr(void)::zero;
            v39.__r_.__value_.__r.__words[0] = (std::string::size_type)v16;
            memset(&v42, 0, sizeof(v42));
            v17 = operator new();
            v18 = operator new(0x60uLL);
            *(_QWORD *)(v17 + 8) = v18;
            v18[7] = 0;
            v18[8] = v18 + 7;
            v18[9] = v18 + 7;
            v18[10] = v18 + 10;
            v18[11] = v18 + 10;
            *(_QWORD *)(v17 + 24) = 0;
            v43 = v17;
            std::pair<char *,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>::pair[abi:ne180100]<char *,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>,0>((uint64_t)&v40, &v39, (__int128 *)&v42);
            std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>::pair[abi:ne180100]<char *,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>,0>(__p, (uint64_t)&v40);
            v19 = boost::multi_index::detail::sequenced_index<boost::multi_index::detail::nth_layer<1,std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,boost::multi_index::indexed_by<boost::multi_index::sequenced<boost::multi_index::tag<mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>>,boost::multi_index::ordered_non_unique<boost::multi_index::tag<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::subs::by_name,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>,boost::multi_index::member<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,std::string const,&std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>::first>,std::less<std::string>>,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>,std::allocator<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>>>,boost::mpl::vector0<mpl_::na>>::insert(v14[6] + 16, *(_QWORD *)(v14[6] + 8), (__int128 *)__p);
            boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::~basic_ptree((uint64_t)v46);
            if (SHIBYTE(v45) < 0)
              operator delete(__p[0]);
            boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::~basic_ptree((uint64_t)&v40.__r_.__value_.__l.__size_);
            boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::~basic_ptree((uint64_t)&v42);
            v20 = *(_QWORD *)(i + 8);
            if (v20)
              v21 = *(void **)(i + 8);
            else
              v21 = &boost::property_tree::detail::rapidxml::xml_base<char>::nullstr(void)::zero;
            if (v20)
              v22 = *(_QWORD *)(i + 24);
            else
              v22 = 0;
            v23 = (void **)(v19 + 3);
            std::string::basic_string[abi:ne180100](__p, v21, v22);
            if (*((char *)v19 + 47) < 0)
              operator delete(*v23);
            *(_OWORD *)v23 = *(_OWORD *)__p;
            v19[5] = v45;
            if (!*(_QWORD *)(i + 32))
              break;
          }
        }
        v24 = *(_QWORD *)(a1 + 48);
        if (v24)
        {
          v25 = v10 + 3;
          do
          {
            boost::property_tree::xml_parser::read_xml_node<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>,char>(v24, v25, a3);
            v24 = *(_QWORD *)(v24 + 88);
          }
          while (v24);
        }
      }
      return;
    }
    if ((a3 & 2) != 0)
      return;
    v29 = (__int128 *)boost::property_tree::xml_parser::xmlcomment<std::string>();
    v30 = *(_QWORD *)(a1 + 8);
    if (v30)
      v31 = *(void **)(a1 + 8);
    else
      v31 = &boost::property_tree::detail::rapidxml::xml_base<char>::nullstr(void)::zero;
    if (v30)
      v32 = *(_QWORD *)(a1 + 24);
    else
      v32 = 0;
    std::string::basic_string[abi:ne180100](&v39, v31, v32);
    if ((SHIBYTE(v39.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      v42 = v39;
      goto LABEL_63;
    }
  }
  std::string::__init_copy_ctor_external(&v42, v39.__r_.__value_.__l.__data_, v39.__r_.__value_.__l.__size_);
LABEL_63:
  v37 = operator new();
  v38 = operator new(0x60uLL);
  *(_QWORD *)(v37 + 8) = v38;
  v38[7] = 0;
  v38[8] = v38 + 7;
  v38[9] = v38 + 7;
  v38[10] = v38 + 10;
  v38[11] = v38 + 10;
  *(_QWORD *)(v37 + 24) = 0;
  v43 = v37;
  std::pair<std::string,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>::pair[abi:ne180100]<std::string const&,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>,0>(&v40, v29, (__int128 *)&v42);
  std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>::pair[abi:ne180100]<std::string,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>,0>((uint64_t)__p, (__int128 *)&v40);
  boost::multi_index::detail::sequenced_index<boost::multi_index::detail::nth_layer<1,std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,boost::multi_index::indexed_by<boost::multi_index::sequenced<boost::multi_index::tag<mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>>,boost::multi_index::ordered_non_unique<boost::multi_index::tag<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::subs::by_name,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>,boost::multi_index::member<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,std::string const,&std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>::first>,std::less<std::string>>,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>,std::allocator<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>>>,boost::mpl::vector0<mpl_::na>>::insert(a2[1].__r_.__value_.__r.__words[0] + 16, *(_QWORD *)(a2[1].__r_.__value_.__r.__words[0] + 8), (__int128 *)__p);
  boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::~basic_ptree((uint64_t)v46);
  if (SHIBYTE(v45) < 0)
    operator delete(__p[0]);
  boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::~basic_ptree((uint64_t)v41);
  if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v40.__r_.__value_.__l.__data_);
  boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::~basic_ptree((uint64_t)&v42);
  if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0)
  {
    v36 = (void *)v39.__r_.__value_.__r.__words[0];
    goto LABEL_69;
  }
}

void sub_1ADC36F34(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t std::vector<char>::__init_with_sentinel[abi:ne180100]<std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>(unint64_t *a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t result;
  char *v5;
  char v6;
  unint64_t v7;
  _BYTE *v8;
  _BYTE *v9;
  unint64_t v10;
  _BYTE *v11;
  unint64_t v12;
  unint64_t v13;
  size_t v14;
  char *v15;
  char *v16;
  _BYTE *v17;
  _BYTE *v18;
  char v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;

  v21 = a3;
  v22 = a2;
  while (1)
  {
    result = std::istreambuf_iterator<char>::equal[abi:ne180100](&v22, &v21);
    if ((result & 1) != 0)
      break;
    v5 = (char *)v22[3];
    if (v5 == (char *)v22[4])
      v6 = (*(uint64_t (**)(_QWORD *))(*v22 + 72))(v22);
    else
      v6 = *v5;
    v8 = (_BYTE *)a1[1];
    v7 = a1[2];
    if ((unint64_t)v8 >= v7)
    {
      v10 = *a1;
      v11 = &v8[-*a1];
      v12 = (unint64_t)(v11 + 1);
      if ((uint64_t)(v11 + 1) < 0)
        std::vector<int>::__throw_length_error[abi:ne180100]();
      v13 = v7 - v10;
      if (2 * v13 > v12)
        v12 = 2 * v13;
      if (v13 >= 0x3FFFFFFFFFFFFFFFLL)
        v14 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v14 = v12;
      if (v14)
        v15 = (char *)operator new(v14);
      else
        v15 = 0;
      v16 = &v11[(_QWORD)v15];
      v17 = &v11[(_QWORD)v15];
      *v17 = v6;
      v9 = v17 + 1;
      if (v8 != (_BYTE *)v10)
      {
        v18 = &v8[~v10];
        do
        {
          v19 = *--v8;
          (v18--)[(_QWORD)v15] = v19;
        }
        while (v8 != (_BYTE *)v10);
        v8 = (_BYTE *)*a1;
        v16 = v15;
      }
      *a1 = (unint64_t)v16;
      a1[1] = (unint64_t)v9;
      a1[2] = (unint64_t)&v15[v14];
      if (v8)
        operator delete(v8);
    }
    else
    {
      *v8 = v6;
      v9 = v8 + 1;
    }
    a1[1] = (unint64_t)v9;
    v20 = v22[3];
    if (v20 == v22[4])
      (*(void (**)(_QWORD *))(*v22 + 80))(v22);
    else
      v22[3] = v20 + 1;
  }
  return result;
}

void sub_1ADC37210(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t boost::wrapexcept<boost::property_tree::xml_parser::xml_parser_error>::~wrapexcept(uint64_t a1)
{
  *(_QWORD *)(a1 + 80) = &unk_1E5D29AE0;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)(a1 + 88));
  boost::property_tree::file_parser_error::~file_parser_error((std::runtime_error *)(a1 + 8));
  return a1;
}

uint64_t boost::wrapexcept<boost::property_tree::xml_parser::xml_parser_error>::wrapexcept(uint64_t a1, uint64_t a2, int8x16_t *a3)
{
  __int128 v6;
  std::string *v7;
  __int128 v8;
  uint64_t v9;

  *(_QWORD *)a1 = &unk_1E5D29898;
  std::runtime_error::runtime_error((std::runtime_error *)(a1 + 8), (const std::runtime_error *)a2);
  *(_QWORD *)(a1 + 8) = &unk_1E5D29848;
  if (*(char *)(a2 + 39) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 24), *(const std::string::value_type **)(a2 + 16), *(_QWORD *)(a2 + 24));
  }
  else
  {
    v6 = *(_OWORD *)(a2 + 16);
    *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 24) = v6;
  }
  v7 = (std::string *)(a1 + 48);
  if (*(char *)(a2 + 63) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)(a2 + 40), *(_QWORD *)(a2 + 48));
  }
  else
  {
    v8 = *(_OWORD *)(a2 + 40);
    *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 56);
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v8;
  }
  *(_QWORD *)a1 = &unk_1E5D292F0;
  *(_QWORD *)(a1 + 8) = &unk_1E5D29320;
  v9 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 72) = v9;
  *(_QWORD *)(a1 + 80) = &unk_1E5D29348;
  *(_QWORD *)(a1 + 88) = 0;
  *(_DWORD *)(a1 + 112) = a3[1].i32[0];
  *(int8x16_t *)(a1 + 96) = vextq_s8(*a3, *a3, 8uLL);
  return a1;
}

void sub_1ADC37374(_Unwind_Exception *a1)
{
  uint64_t v1;
  std::runtime_error *v2;
  void **v3;

  if (*(char *)(v1 + 47) < 0)
    operator delete(*v3);
  std::runtime_error::~runtime_error(v2);
  _Unwind_Resume(a1);
}

uint64_t boost::wrapexcept<boost::property_tree::xml_parser::xml_parser_error>::clone(uint64_t a1)
{
  uint64_t v2;

  v2 = operator new();
  boost::wrapexcept<boost::property_tree::xml_parser::xml_parser_error>::wrapexcept(v2, a1);
  boost::exception_detail::copy_boost_exception(v2 + 80, a1 + 80);
  return v2;
}

void sub_1ADC373F0(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 24))(v1);
  _Unwind_Resume(a1);
}

void boost::wrapexcept<boost::property_tree::xml_parser::xml_parser_error>::rethrow(uint64_t a1)
{
  void *exception;

  exception = __cxa_allocate_exception(0x78uLL);
  boost::wrapexcept<boost::property_tree::xml_parser::xml_parser_error>::wrapexcept(exception, a1);
}

void sub_1ADC37468(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void boost::wrapexcept<boost::property_tree::xml_parser::xml_parser_error>::~wrapexcept(uint64_t a1)
{
  *(_QWORD *)(a1 + 80) = &unk_1E5D29AE0;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)(a1 + 88));
  boost::property_tree::file_parser_error::~file_parser_error((std::runtime_error *)(a1 + 8));
  JUMPOUT(0x1AF44D190);
}

void `non-virtual thunk to'boost::wrapexcept<boost::property_tree::xml_parser::xml_parser_error>::~wrapexcept(uint64_t a1)
{
  *(_QWORD *)(a1 + 72) = &unk_1E5D29AE0;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)(a1 + 80));
  boost::property_tree::file_parser_error::~file_parser_error((std::runtime_error *)a1);
}

{
  *(_QWORD *)(a1 + 72) = &unk_1E5D29AE0;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)(a1 + 80));
  boost::property_tree::file_parser_error::~file_parser_error((std::runtime_error *)a1);
  JUMPOUT(0x1AF44D190);
}

void `non-virtual thunk to'boost::wrapexcept<boost::property_tree::xml_parser::xml_parser_error>::~wrapexcept(_QWORD *a1)
{
  *a1 = &unk_1E5D29AE0;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(a1 + 1);
  boost::property_tree::file_parser_error::~file_parser_error((std::runtime_error *)(a1 - 9));
}

{
  *a1 = &unk_1E5D29AE0;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(a1 + 1);
  boost::property_tree::file_parser_error::~file_parser_error((std::runtime_error *)(a1 - 9));
  JUMPOUT(0x1AF44D190);
}

void boost::property_tree::xml_parser::xml_parser_error::~xml_parser_error(std::runtime_error *this)
{
  boost::property_tree::file_parser_error::~file_parser_error(this);
  JUMPOUT(0x1AF44D190);
}

uint64_t boost::wrapexcept<boost::property_tree::xml_parser::xml_parser_error>::wrapexcept(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  std::string *v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;

  *(_QWORD *)a1 = &unk_1E5D29898;
  std::runtime_error::runtime_error((std::runtime_error *)(a1 + 8), (const std::runtime_error *)(a2 + 8));
  *(_QWORD *)(a1 + 8) = &unk_1E5D29848;
  if (*(char *)(a2 + 47) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 24), *(const std::string::value_type **)(a2 + 24), *(_QWORD *)(a2 + 32));
  }
  else
  {
    v4 = *(_OWORD *)(a2 + 24);
    *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
    *(_OWORD *)(a1 + 24) = v4;
  }
  v5 = (std::string *)(a1 + 48);
  if (*(char *)(a2 + 71) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *(const std::string::value_type **)(a2 + 48), *(_QWORD *)(a2 + 56));
  }
  else
  {
    v6 = *(_OWORD *)(a2 + 48);
    *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
  v7 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 8) = &unk_1E5D297A8;
  *(_QWORD *)(a1 + 72) = v7;
  *(_QWORD *)(a1 + 80) = &unk_1E5D29AE0;
  v8 = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 88) = v8;
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 24))(v8);
  v9 = *(_OWORD *)(a2 + 96);
  *(_DWORD *)(a1 + 112) = *(_DWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 96) = v9;
  *(_QWORD *)a1 = &unk_1E5D292F0;
  *(_QWORD *)(a1 + 8) = &unk_1E5D29320;
  *(_QWORD *)(a1 + 80) = &unk_1E5D29348;
  return a1;
}

void sub_1ADC3772C(_Unwind_Exception *a1)
{
  std::runtime_error *v1;
  uint64_t v2;
  void **v3;

  if (*(char *)(v2 + 47) < 0)
    operator delete(*v3);
  std::runtime_error::~runtime_error(v1);
  _Unwind_Resume(a1);
}

_QWORD *boost::property_tree::detail::rapidxml::xml_document<char>::parse_node<3072>(uint64_t a1, char **a2)
{
  char *v2;
  int v3;
  int v4;
  int v5;
  int v7;
  char *v8;
  int v9;
  int v10;
  _QWORD *exception;
  char *v13;

  v2 = *a2;
  v3 = **a2;
  if (v3 == 33)
  {
    v5 = v2[1];
    if (v5 == 91)
    {
      if (v2[2] == 67 && v2[3] == 68 && v2[4] == 65 && v2[5] == 84 && v2[6] == 65 && v2[7] == 91)
      {
        *a2 = v2 + 8;
        return (_QWORD *)boost::property_tree::detail::rapidxml::xml_document<char>::parse_cdata<3072>(a1, a2);
      }
    }
    else if (v5 == 68)
    {
      if (v2[2] == 79 && v2[3] == 67 && v2[4] == 84 && v2[5] == 89 && v2[6] == 80 && v2[7] == 69)
      {
        v7 = v2[8];
        if (v7 < 0)
          LOBYTE(v7) = 122;
        if (boost::property_tree::detail::rapidxml::internal::lookup_tables<0>::lookup_whitespace[v7])
        {
          *a2 = v2 + 9;
          return (_QWORD *)boost::property_tree::detail::rapidxml::xml_document<char>::parse_doctype<3072>(a1, a2);
        }
      }
    }
    else if (v5 == 45 && v2[2] == 45)
    {
      *a2 = v2 + 3;
      return (_QWORD *)boost::property_tree::detail::rapidxml::xml_document<char>::parse_comment<3072>(a1, a2);
    }
    v8 = v2 + 1;
    while (1)
    {
      *a2 = v8;
      v10 = *v8++;
      v9 = v10;
      if (v10 == 62)
        break;
      if (!v9)
      {
        exception = __cxa_allocate_exception(0x18uLL);
        v13 = *a2;
        *exception = &unk_1E5D29870;
        exception[1] = "unexpected end of data";
        exception[2] = v13;
      }
    }
    *a2 = v8;
    return 0;
  }
  else if (v3 == 63)
  {
    *a2 = v2 + 1;
    if ((v2[1] | 0x20) == 0x78
      && (v2[2] | 0x20) == 0x6D
      && (v2[3] | 0x20) == 0x6C)
    {
      v4 = v2[4];
      if (v4 < 0)
        LOBYTE(v4) = 122;
      if (boost::property_tree::detail::rapidxml::internal::lookup_tables<0>::lookup_whitespace[v4])
        *a2 = v2 + 5;
    }
    return (_QWORD *)boost::property_tree::detail::rapidxml::xml_document<char>::parse_xml_declaration<3072>(a1, a2);
  }
  else
  {
    return boost::property_tree::detail::rapidxml::xml_document<char>::parse_element<3072>(a1, a2);
  }
}

_QWORD *boost::property_tree::detail::rapidxml::xml_document<char>::parse_element<3072>(uint64_t a1, char **a2)
{
  uint64_t aligned;
  _QWORD *v5;
  uint64_t v6;
  char *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  unsigned __int8 v11;
  int v12;
  char *v13;
  int v14;
  _BYTE *v15;
  uint64_t v16;
  _QWORD *exception;
  char *v19;
  const char *v20;

  aligned = boost::property_tree::detail::rapidxml::memory_pool<char>::allocate_aligned((uint64_t *)(a1 + 96), 0x60uLL);
  v5 = (_QWORD *)aligned;
  v6 = 0;
  *(_QWORD *)(aligned + 32) = 0;
  *(_QWORD *)aligned = 0;
  *(_QWORD *)(aligned + 8) = 0;
  *(_DWORD *)(aligned + 40) = 1;
  *(_QWORD *)(aligned + 48) = 0;
  *(_QWORD *)(aligned + 64) = 0;
  v7 = *a2;
  do
  {
    v8 = v7[v6];
    if (v8 < 0)
      LOBYTE(v8) = 122;
    ++v6;
  }
  while (boost::property_tree::detail::rapidxml::internal::lookup_tables<0>::lookup_node_name[v8]);
  *a2 = &v7[v6 - 1];
  v9 = v6 - 1;
  if (!v9)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    v19 = *a2;
    v20 = "expected element name";
    goto LABEL_21;
  }
  *(_QWORD *)aligned = v7;
  *(_QWORD *)(aligned + 16) = v9;
  v10 = (uint64_t)(*a2 - 1);
  do
  {
    v12 = *(char *)++v10;
    v11 = v12;
    if (v12 < 0)
      v11 = 122;
  }
  while (boost::property_tree::detail::rapidxml::internal::lookup_tables<0>::lookup_whitespace[v11]);
  *a2 = (char *)v10;
  boost::property_tree::detail::rapidxml::xml_document<char>::parse_node_attributes<3072>((char *)a1, a2, aligned);
  v13 = *a2;
  v14 = **a2;
  if (v14 != 47)
  {
    if (v14 == 62)
    {
      *a2 = v13 + 1;
      boost::property_tree::detail::rapidxml::xml_document<char>::parse_node_contents<3072>(a1, a2, v5);
      goto LABEL_15;
    }
    goto LABEL_20;
  }
  *a2 = v13 + 1;
  if (v13[1] != 62)
  {
LABEL_20:
    exception = __cxa_allocate_exception(0x18uLL);
    v19 = *a2;
    v20 = "expected >";
LABEL_21:
    *exception = &unk_1E5D29870;
    exception[1] = v20;
    exception[2] = v19;
  }
  *a2 = v13 + 2;
LABEL_15:
  v15 = (_BYTE *)*v5;
  if (*v5)
  {
    v16 = v5[2];
  }
  else
  {
    v16 = 0;
    v15 = &boost::property_tree::detail::rapidxml::xml_base<char>::nullstr(void)::zero;
  }
  v15[v16] = 0;
  return v5;
}

uint64_t boost::property_tree::detail::rapidxml::xml_document<char>::parse_xml_declaration<3072>(uint64_t a1, _BYTE **a2)
{
  _BYTE *i;
  _QWORD *exception;
  _BYTE *v6;

  for (i = *a2; *i++ != 63; *a2 = i)
  {
    if (!*(i - 1))
    {
      exception = __cxa_allocate_exception(0x18uLL);
      v6 = *a2;
      *exception = &unk_1E5D29870;
      exception[1] = "unexpected end of data";
      exception[2] = v6;
    }
LABEL_6:
    ;
  }
  if (*i != 62)
    goto LABEL_6;
  *a2 = i + 1;
  return 0;
}

uint64_t boost::property_tree::detail::rapidxml::xml_document<char>::parse_comment<3072>(uint64_t a1, _BYTE **a2)
{
  _BYTE *i;
  _QWORD *exception;
  _BYTE *v6;

  for (i = *a2; ; *a2 = i)
  {
    if (*i++ != 45)
    {
      if (!*(i - 1))
      {
        exception = __cxa_allocate_exception(0x18uLL);
        v6 = *a2;
        *exception = &unk_1E5D29870;
        exception[1] = "unexpected end of data";
        exception[2] = v6;
      }
      continue;
    }
    if (*i == 45 && i[1] == 62)
      break;
  }
  *a2 = i + 2;
  return 0;
}

uint64_t boost::property_tree::detail::rapidxml::xml_document<char>::parse_cdata<3072>(uint64_t a1, _QWORD *a2)
{
  _BYTE *v3;
  _BYTE *i;
  uint64_t result;
  uint64_t v6;
  _QWORD *exception;
  uint64_t v8;

  v3 = (_BYTE *)*a2;
  for (i = (_BYTE *)(*a2 + 1); ; ++i)
  {
    if (*(i - 1) != 93)
    {
      if (!*(i - 1))
      {
        exception = __cxa_allocate_exception(0x18uLL);
        v8 = *a2;
        *exception = &unk_1E5D29870;
        exception[1] = "unexpected end of data";
        exception[2] = v8;
      }
      goto LABEL_7;
    }
    if (*i == 93 && i[1] == 62)
      break;
LABEL_7:
    *a2 = i;
  }
  result = boost::property_tree::detail::rapidxml::memory_pool<char>::allocate_aligned((uint64_t *)(a1 + 96), 0x60uLL);
  *(_QWORD *)(result + 32) = 0;
  *(_QWORD *)result = 0;
  *(_QWORD *)(result + 8) = 0;
  *(_DWORD *)(result + 40) = 3;
  *(_QWORD *)(result + 48) = 0;
  *(_QWORD *)(result + 64) = 0;
  v6 = *a2 - (_QWORD)v3;
  *(_QWORD *)(result + 8) = v3;
  *(_QWORD *)(result + 24) = v6;
  *(_BYTE *)*a2 = 0;
  *a2 += 3;
  return result;
}

uint64_t boost::property_tree::detail::rapidxml::xml_document<char>::parse_doctype<3072>(uint64_t a1, _BYTE **a2)
{
  _BYTE *v2;
  int v3;
  int v4;
  int v5;
  _QWORD *exception;
  _BYTE *v9;

  v2 = *a2;
  while (1)
  {
    v3 = *v2;
    if (v3 == 62)
      break;
    if (*v2 == 91)
    {
      *a2 = ++v2;
      v4 = 1;
      do
      {
        v5 = (char)*v2;
        if (v5 == 91)
        {
          ++v4;
        }
        else if (v5 == 93)
        {
          --v4;
        }
        else if (!*v2)
        {
          goto LABEL_16;
        }
        *a2 = ++v2;
      }
      while (v4 > 0);
    }
    else
    {
      if (!(_BYTE)v3)
      {
LABEL_16:
        exception = __cxa_allocate_exception(0x18uLL);
        v9 = *a2;
        *exception = &unk_1E5D29870;
        exception[1] = "unexpected end of data";
        exception[2] = v9;
      }
      *a2 = ++v2;
    }
  }
  *a2 = v2 + 1;
  return 0;
}

char *boost::property_tree::detail::rapidxml::xml_document<char>::parse_node_attributes<3072>(char *result, char **a2, uint64_t a3)
{
  char *v3;
  int v4;
  uint64_t v5;
  _QWORD *v7;
  void *v8;
  uint64_t v9;
  int v10;
  _QWORD *aligned;
  _QWORD *v12;
  int64_t v13;
  uint64_t v14;
  _QWORD *v15;
  char *v16;
  unsigned __int8 v17;
  int v18;
  _QWORD *v19;
  _BYTE *v20;
  void *v21;
  char *v22;
  char *v23;
  unsigned __int8 v24;
  int v25;
  int v26;
  char *v27;
  void *v28;
  unsigned __int8 v29;
  int v30;
  int v31;
  _QWORD *exception;
  char *v33;
  const char *v34;
  uint64_t *v36;

  v3 = *a2;
  v4 = **a2;
  if (v4 < 0)
    LOBYTE(v4) = 122;
  if (boost::property_tree::detail::rapidxml::internal::lookup_tables<0>::lookup_attribute_name[v4])
  {
    v5 = a3;
    v36 = (uint64_t *)(result + 96);
    v7 = (_QWORD *)(a3 + 64);
    v8 = &boost::property_tree::detail::rapidxml::xml_base<char>::nullstr(void)::zero;
    while (1)
    {
      v9 = 0;
      *a2 = v3 + 1;
      do
      {
        v10 = v3[v9 + 1];
        if (v10 < 0)
          LOBYTE(v10) = 122;
        ++v9;
      }
      while (boost::property_tree::detail::rapidxml::internal::lookup_tables<0>::lookup_attribute_name[v10]);
      *a2 = &v3[v9];
      if (!v9)
        break;
      aligned = (_QWORD *)boost::property_tree::detail::rapidxml::memory_pool<char>::allocate_aligned(v36, 0x38uLL);
      v12 = aligned;
      aligned[4] = 0;
      *aligned = 0;
      aligned[1] = 0;
      v13 = *a2 - v3;
      *aligned = v3;
      aligned[2] = v13;
      v14 = *v7;
      if (*v7)
      {
        v14 = *(_QWORD *)(v5 + 72);
        v15 = (_QWORD *)(v14 + 48);
      }
      else
      {
        v15 = v7;
      }
      *v15 = aligned;
      aligned[5] = v14;
      *(_QWORD *)(v5 + 72) = aligned;
      aligned[4] = v5;
      aligned[6] = 0;
      v16 = *a2;
      do
      {
        v18 = *v16++;
        v17 = v18;
        if (v18 < 0)
          v17 = 122;
      }
      while (boost::property_tree::detail::rapidxml::internal::lookup_tables<0>::lookup_whitespace[v17]);
      *a2 = v16 - 1;
      if (*(v16 - 1) != 61)
      {
        exception = __cxa_allocate_exception(0x18uLL);
        v33 = *a2;
        v34 = "expected =";
LABEL_43:
        *exception = &unk_1E5D29870;
        exception[1] = v34;
        exception[2] = v33;
LABEL_44:
      }
      v19 = v7;
      *a2 = v16;
      v20 = (_BYTE *)*aligned;
      v21 = v8;
      if (!*aligned)
      {
        v20 = v8;
        v13 = 0;
      }
      v20[v13] = 0;
      v22 = *a2;
      v23 = *a2;
      do
      {
        v25 = *v23++;
        v24 = v25;
        if (v25 < 0)
          v24 = 122;
        ++v22;
      }
      while (boost::property_tree::detail::rapidxml::internal::lookup_tables<0>::lookup_whitespace[v24]);
      *a2 = v23 - 1;
      v26 = *(v23 - 1);
      if (v26 != 34 && v26 != 39
        || ((*a2 = v23, v26 != 39)
          ? (result = boost::property_tree::detail::rapidxml::xml_document<char>::skip_and_expand_character_refs<boost::property_tree::detail::rapidxml::xml_document<char>::attribute_value_pred<(char)34>,boost::property_tree::detail::rapidxml::xml_document<char>::attribute_value_pure_pred<(char)34>,1024>(a2))
          : (result = boost::property_tree::detail::rapidxml::xml_document<char>::skip_and_expand_character_refs<boost::property_tree::detail::rapidxml::xml_document<char>::attribute_value_pred<(char)39>,boost::property_tree::detail::rapidxml::xml_document<char>::attribute_value_pure_pred<(char)39>,1024>(a2)),
            v27 = (char *)(result - v22),
            v12[1] = v23,
            v12[3] = result - v22,
            **a2 != v26))
      {
        exception = __cxa_allocate_exception(0x18uLL);
        v33 = *a2;
        v34 = "expected ' or \"";
        goto LABEL_43;
      }
      ++*a2;
      v28 = (void *)v12[1];
      v8 = v21;
      if (!v28)
      {
        v28 = v21;
        v27 = 0;
      }
      v27[(_QWORD)v28] = 0;
      v3 = *a2 - 1;
      v7 = v19;
      v5 = a3;
      do
      {
        v30 = *++v3;
        v29 = v30;
        if (v30 < 0)
          v29 = 122;
      }
      while (boost::property_tree::detail::rapidxml::internal::lookup_tables<0>::lookup_whitespace[v29]);
      *a2 = v3;
      v31 = *v3;
      if (v31 < 0)
        LOBYTE(v31) = 122;
      if (!boost::property_tree::detail::rapidxml::internal::lookup_tables<0>::lookup_attribute_name[v31])
        return result;
    }
    exception = __cxa_allocate_exception(0x18uLL);
    *exception = &unk_1E5D29870;
    exception[1] = "expected attribute name";
    exception[2] = v3;
    goto LABEL_44;
  }
  return result;
}

uint64_t boost::property_tree::detail::rapidxml::xml_document<char>::parse_node_contents<3072>(uint64_t a1, char **a2, _QWORD *a3)
{
  uint64_t *v6;
  char *v7;
  unsigned __int8 v8;
  int v9;
  uint64_t result;
  char *v11;
  int v12;
  char *v13;
  unsigned __int8 v14;
  int v15;
  unsigned __int8 v16;
  int v17;
  uint64_t v18;
  uint64_t *v19;
  _QWORD *exception;
  char *v21;
  const char *v22;

  v6 = a3 + 6;
  do
  {
    v7 = *a2 - 1;
    do
    {
      v9 = *++v7;
      v8 = v9;
      if (v9 < 0)
        v8 = 122;
    }
    while (boost::property_tree::detail::rapidxml::internal::lookup_tables<0>::lookup_whitespace[v8]);
    *a2 = v7;
    for (result = *v7;
          result != 60;
          result = boost::property_tree::detail::rapidxml::xml_document<char>::parse_and_append_data<3072>(a1, a3, a2))
    {
      if (!(_BYTE)result)
      {
        exception = __cxa_allocate_exception(0x18uLL);
        v21 = *a2;
        v22 = "unexpected end of data";
        goto LABEL_29;
      }
    }
    v11 = *a2;
    v12 = (*a2)[1];
    if (v12 == 47)
    {
      *a2 = v11 + 2;
      v13 = v11 + 1;
      do
      {
        v15 = *++v13;
        v14 = v15;
        if (v15 < 0)
          v14 = 122;
      }
      while (boost::property_tree::detail::rapidxml::internal::lookup_tables<0>::lookup_node_name[v14]);
      *a2 = v13;
      do
      {
        v17 = *v13++;
        v16 = v17;
        if (v17 < 0)
          v16 = 122;
      }
      while (boost::property_tree::detail::rapidxml::internal::lookup_tables<0>::lookup_whitespace[v16]);
      *a2 = v13 - 1;
      if (*(v13 - 1) != 62)
      {
        exception = __cxa_allocate_exception(0x18uLL);
        v21 = *a2;
        v22 = "expected >";
LABEL_29:
        *exception = &unk_1E5D29870;
        exception[1] = v22;
        exception[2] = v21;
      }
      *a2 = v13;
    }
    else
    {
      ++*a2;
      result = boost::property_tree::detail::rapidxml::xml_document<char>::parse_node<3072>(a1, a2);
      if (result)
      {
        v18 = *v6;
        if (*v6)
        {
          v18 = a3[7];
          v19 = (uint64_t *)(v18 + 88);
        }
        else
        {
          v19 = v6;
        }
        *v19 = result;
        *(_QWORD *)(result + 80) = v18;
        a3[7] = result;
        *(_QWORD *)(result + 32) = a3;
        *(_QWORD *)(result + 88) = 0;
      }
    }
  }
  while (v12 != 47);
  return result;
}

uint64_t boost::property_tree::detail::rapidxml::memory_pool<char>::allocate_aligned(uint64_t *a1, unint64_t a2)
{
  unint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t (*v7)(uint64_t);
  uint64_t v8;
  uint64_t *v9;

  v4 = a1[2];
  result = a1[1] + (-*((_BYTE *)a1 + 8) & 7);
  if (result + a2 > v4)
  {
    if (a2 <= 0x10000)
      v6 = 65558;
    else
      v6 = a2 + 22;
    v7 = (uint64_t (*)(uint64_t))a1[8195];
    if (v7)
      v8 = v7(v6);
    else
      v8 = operator new[]();
    v9 = (uint64_t *)(v8 + (-(int)v8 & 7));
    *v9 = *a1;
    *a1 = v8;
    a1[2] = v8 + v6;
    result = (uint64_t)v9 + (-((_DWORD)v9 + 8) & 7) + 8;
  }
  a1[1] = result + a2;
  return result;
}

char *boost::property_tree::detail::rapidxml::xml_document<char>::skip_and_expand_character_refs<boost::property_tree::detail::rapidxml::xml_document<char>::attribute_value_pred<(char)39>,boost::property_tree::detail::rapidxml::xml_document<char>::attribute_value_pure_pred<(char)39>,1024>(char **a1)
{
  char *v2;
  unsigned __int8 v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  _BYTE *v9;
  unint64_t v10;
  unint64_t v11;
  unsigned int v12;
  uint64_t v13;
  unint64_t v14;
  unsigned int v15;
  uint64_t v16;
  char *v17;
  _QWORD *exception;
  char *v20;

  v2 = *a1 - 1;
  do
  {
    v4 = *++v2;
    v3 = v4;
    if (v4 < 0)
      v3 = 122;
  }
  while (boost::property_tree::detail::rapidxml::internal::lookup_tables<0>::lookup_attribute_data_1_pure[v3]);
  *a1 = v2;
  v20 = v2;
  while (1)
  {
    v5 = *v2;
    v6 = (v5 & 0x80u) == 0 ? *v2 : 122;
    if (!v6 || v6 == 39)
      break;
    if (v5 != 38)
      goto LABEL_48;
    v7 = v2[1];
    if (v7 <= 102)
    {
      if (v7 == 35)
      {
        v9 = v2 + 2;
        if (v2[2] == 120)
        {
          v10 = 0;
          do
          {
            v11 = v10;
            v12 = *++v9;
            v13 = boost::property_tree::detail::rapidxml::internal::lookup_tables<0>::lookup_digits[v12];
            v10 = v13 + 16 * v10;
          }
          while (v13 != 255);
        }
        else
        {
          v14 = 0;
          v9 = v2 + 1;
          do
          {
            v11 = v14;
            v15 = *++v9;
            v16 = boost::property_tree::detail::rapidxml::internal::lookup_tables<0>::lookup_digits[v15];
            v14 = v16 + 10 * v14;
          }
          while (v16 != 255);
        }
        boost::property_tree::detail::rapidxml::xml_document<char>::insert_coded_character<1024>((uint64_t *)&v20, v11);
        if (*v9 != 59)
        {
          exception = __cxa_allocate_exception(0x18uLL);
          *exception = &unk_1E5D29870;
          exception[1] = "expected ;";
          exception[2] = v9;
        }
        v2 = v9 + 1;
      }
      else
      {
        if (v7 != 97)
          goto LABEL_48;
        v8 = v2[2];
        if (v8 == 112)
        {
          if (v2[3] != 111 || v2[4] != 115 || v2[5] != 59)
            goto LABEL_48;
          *v20 = 39;
LABEL_47:
          ++v20;
          v2 += 6;
        }
        else
        {
          if (v8 != 109 || v2[3] != 112 || v2[4] != 59)
            goto LABEL_48;
          *v20++ = 38;
          v2 += 5;
        }
      }
    }
    else if (v7 == 103)
    {
      if (v2[2] != 116 || v2[3] != 59)
        goto LABEL_48;
      *v20 = 62;
LABEL_34:
      ++v20;
      v2 += 4;
    }
    else
    {
      if (v7 == 108)
      {
        if (v2[2] != 116 || v2[3] != 59)
          goto LABEL_48;
        *v20 = 60;
        goto LABEL_34;
      }
      if (v7 == 113 && v2[2] == 117 && v2[3] == 111 && v2[4] == 116 && v2[5] == 59)
      {
        *v20 = 34;
        goto LABEL_47;
      }
LABEL_48:
      ++v2;
      v17 = v20++;
      *v17 = v5;
    }
  }
  *a1 = v2;
  return v20;
}

char *boost::property_tree::detail::rapidxml::xml_document<char>::skip_and_expand_character_refs<boost::property_tree::detail::rapidxml::xml_document<char>::attribute_value_pred<(char)34>,boost::property_tree::detail::rapidxml::xml_document<char>::attribute_value_pure_pred<(char)34>,1024>(char **a1)
{
  char *v2;
  unsigned __int8 v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  _BYTE *v9;
  unint64_t v10;
  unint64_t v11;
  int v12;
  uint64_t v13;
  unint64_t v14;
  int v15;
  uint64_t v16;
  char *v17;
  _QWORD *exception;
  char *v20;

  v2 = *a1 - 1;
  do
  {
    v4 = *++v2;
    v3 = v4;
    if (v4 < 0)
      v3 = 122;
  }
  while (boost::property_tree::detail::rapidxml::internal::lookup_tables<0>::lookup_attribute_data_2_pure[v3]);
  *a1 = v2;
  v20 = v2;
  while (1)
  {
    v5 = *v2;
    v6 = (v5 & 0x80u) == 0 ? *v2 : 122;
    if (!v6 || v6 == 34)
      break;
    if (v5 != 38)
      goto LABEL_48;
    v7 = v2[1];
    if (v7 <= 102)
    {
      if (v7 == 35)
      {
        v9 = v2 + 2;
        if (v2[2] == 120)
        {
          v10 = 0;
          do
          {
            v11 = v10;
            v12 = *++v9;
            v13 = boost::property_tree::detail::rapidxml::internal::lookup_tables<0>::lookup_digits[v12];
            v10 = v13 + 16 * v10;
          }
          while (v13 != 255);
        }
        else
        {
          v14 = 0;
          v9 = v2 + 1;
          do
          {
            v11 = v14;
            v15 = *++v9;
            v16 = boost::property_tree::detail::rapidxml::internal::lookup_tables<0>::lookup_digits[v15];
            v14 = v16 + 10 * v14;
          }
          while (v16 != 255);
        }
        boost::property_tree::detail::rapidxml::xml_document<char>::insert_coded_character<1024>((uint64_t *)&v20, v11);
        if (*v9 != 59)
        {
          exception = __cxa_allocate_exception(0x18uLL);
          *exception = &unk_1E5D29870;
          exception[1] = "expected ;";
          exception[2] = v9;
        }
        v2 = v9 + 1;
      }
      else
      {
        if (v7 != 97)
          goto LABEL_48;
        v8 = v2[2];
        if (v8 == 112)
        {
          if (v2[3] != 111 || v2[4] != 115 || v2[5] != 59)
            goto LABEL_48;
          *v20 = 39;
LABEL_47:
          ++v20;
          v2 += 6;
        }
        else
        {
          if (v8 != 109 || v2[3] != 112 || v2[4] != 59)
            goto LABEL_48;
          *v20++ = 38;
          v2 += 5;
        }
      }
    }
    else if (v7 == 103)
    {
      if (v2[2] != 116 || v2[3] != 59)
        goto LABEL_48;
      *v20 = 62;
LABEL_34:
      ++v20;
      v2 += 4;
    }
    else
    {
      if (v7 == 108)
      {
        if (v2[2] != 116 || v2[3] != 59)
          goto LABEL_48;
        *v20 = 60;
        goto LABEL_34;
      }
      if (v7 == 113 && v2[2] == 117 && v2[3] == 111 && v2[4] == 116 && v2[5] == 59)
      {
        *v20 = 34;
        goto LABEL_47;
      }
LABEL_48:
      ++v2;
      v17 = v20++;
      *v17 = v5;
    }
  }
  *a1 = v2;
  return v20;
}

uint64_t *boost::property_tree::detail::rapidxml::xml_document<char>::insert_coded_character<1024>(uint64_t *result, unint64_t a2)
{
  uint64_t v2;
  uint64_t *v3;
  _QWORD *exception;
  uint64_t v5;

  if (a2 > 0x7F)
  {
    if (a2 > 0x7FF)
    {
      if (a2 >> 16)
      {
        if (a2 >> 16 > 0x10)
        {
          v3 = result;
          exception = __cxa_allocate_exception(0x18uLL);
          v5 = *v3;
          *exception = &unk_1E5D29870;
          exception[1] = "invalid numeric character entity";
          exception[2] = v5;
        }
        *(_BYTE *)(*result + 3) = a2 & 0x3F | 0x80;
        *(_BYTE *)(*result + 2) = (a2 >> 6) & 0x3F | 0x80;
        *(_BYTE *)(*result + 1) = (a2 >> 12) & 0x3F | 0x80;
        LODWORD(a2) = (a2 >> 18) | 0xFFFFFFF0;
        v2 = 4;
      }
      else
      {
        *(_BYTE *)(*result + 2) = a2 & 0x3F | 0x80;
        *(_BYTE *)(*result + 1) = (a2 >> 6) & 0x3F | 0x80;
        LODWORD(a2) = (a2 >> 12) | 0xFFFFFFE0;
        v2 = 3;
      }
    }
    else
    {
      *(_BYTE *)(*result + 1) = a2 & 0x3F | 0x80;
      LODWORD(a2) = (a2 >> 6) | 0xFFFFFFC0;
      v2 = 2;
    }
  }
  else
  {
    v2 = 1;
  }
  *(_BYTE *)*result = a2;
  *result += v2;
  return result;
}

uint64_t boost::property_tree::detail::rapidxml::xml_document<char>::parse_and_append_data<3072>(uint64_t a1, _QWORD *a2, char **a3)
{
  char *v6;
  char *v7;
  char *v8;
  uint64_t aligned;
  uint64_t *v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t result;

  v6 = *a3;
  v7 = boost::property_tree::detail::rapidxml::xml_document<char>::skip_and_expand_character_refs<boost::property_tree::detail::rapidxml::xml_document<char>::text_pred,boost::property_tree::detail::rapidxml::xml_document<char>::text_pure_with_ws_pred,3072>(a3);
  if (*(v7 - 1) == 32)
    v8 = v7 - 1;
  else
    v8 = v7;
  aligned = boost::property_tree::detail::rapidxml::memory_pool<char>::allocate_aligned((uint64_t *)(a1 + 96), 0x60uLL);
  *(_DWORD *)(aligned + 40) = 2;
  *(_QWORD *)(aligned + 48) = 0;
  *(_QWORD *)(aligned + 64) = 0;
  *(_QWORD *)aligned = 0;
  *(_QWORD *)(aligned + 8) = v6;
  *(_QWORD *)(aligned + 24) = v8 - v6;
  v10 = a2 + 6;
  v11 = a2[6];
  if (v11)
  {
    v11 = a2[7];
    v10 = (uint64_t *)(v11 + 88);
  }
  *v10 = aligned;
  *(_QWORD *)(aligned + 80) = v11;
  a2[7] = aligned;
  *(_QWORD *)(aligned + 32) = a2;
  *(_QWORD *)(aligned + 88) = 0;
  v12 = (_BYTE *)a2[1];
  if (!v12)
    v12 = &boost::property_tree::detail::rapidxml::xml_base<char>::nullstr(void)::zero;
  if (!*v12)
  {
    a2[1] = v6;
    a2[3] = v8 - v6;
  }
  result = **a3;
  *v8 = 0;
  return result;
}

char *boost::property_tree::detail::rapidxml::xml_document<char>::skip_and_expand_character_refs<boost::property_tree::detail::rapidxml::xml_document<char>::text_pred,boost::property_tree::detail::rapidxml::xml_document<char>::text_pure_with_ws_pred,3072>(char **a1)
{
  char *v2;
  unsigned __int8 v3;
  int v4;
  int v5;
  uint64_t v6;
  int v7;
  char *v8;
  char v9;
  int v10;
  _BYTE *v11;
  unint64_t v12;
  unint64_t v13;
  int v14;
  uint64_t v15;
  unint64_t v16;
  int v17;
  uint64_t v18;
  unsigned __int8 v19;
  int v20;
  char *v21;
  _QWORD *exception;
  char *v24;

  v2 = *a1 - 1;
  do
  {
    v4 = *++v2;
    v3 = v4;
    if (v4 < 0)
      v3 = 122;
  }
  while (boost::property_tree::detail::rapidxml::internal::lookup_tables<0>::lookup_text_pure_with_ws[v3]);
  *a1 = v2;
  v24 = v2;
  while (1)
  {
    v5 = *v2;
    v6 = (v5 & 0x80u) == 0 ? *v2 : 122;
    if (!(_DWORD)v6 || (_DWORD)v6 == 60)
      break;
    if (v5 != 38)
      goto LABEL_48;
    v7 = v2[1];
    if (v7 <= 102)
    {
      if (v7 == 35)
      {
        v11 = v2 + 2;
        if (v2[2] == 120)
        {
          v12 = 0;
          do
          {
            v13 = v12;
            v14 = *++v11;
            v15 = boost::property_tree::detail::rapidxml::internal::lookup_tables<0>::lookup_digits[v14];
            v12 = v15 + 16 * v12;
          }
          while (v15 != 255);
        }
        else
        {
          v16 = 0;
          v11 = v2 + 1;
          do
          {
            v13 = v16;
            v17 = *++v11;
            v18 = boost::property_tree::detail::rapidxml::internal::lookup_tables<0>::lookup_digits[v17];
            v16 = v18 + 10 * v16;
          }
          while (v18 != 255);
        }
        boost::property_tree::detail::rapidxml::xml_document<char>::insert_coded_character<1024>((uint64_t *)&v24, v13);
        if (*v11 != 59)
        {
          exception = __cxa_allocate_exception(0x18uLL);
          *exception = &unk_1E5D29870;
          exception[1] = "expected ;";
          exception[2] = v11;
        }
        v2 = v11 + 1;
      }
      else
      {
        if (v7 != 97)
          goto LABEL_48;
        v10 = v2[2];
        if (v10 == 112)
        {
          if (v2[3] != 111 || v2[4] != 115 || v2[5] != 59)
            goto LABEL_48;
          v8 = v24;
          v9 = 39;
LABEL_47:
          *v8 = v9;
          ++v24;
          v2 += 6;
        }
        else
        {
          if (v10 != 109 || v2[3] != 112 || v2[4] != 59)
            goto LABEL_48;
          *v24++ = 38;
          v2 += 5;
        }
      }
    }
    else
    {
      if (v7 == 103)
      {
        if (v2[2] != 116 || v2[3] != 59)
          goto LABEL_48;
        *v24 = 62;
        goto LABEL_34;
      }
      if (v7 == 108)
      {
        if (v2[2] != 116 || v2[3] != 59)
          goto LABEL_48;
        *v24 = 60;
LABEL_34:
        ++v24;
        v2 += 4;
      }
      else
      {
        if (v7 == 113 && v2[2] == 117 && v2[3] == 111 && v2[4] == 116 && v2[5] == 59)
        {
          v8 = v24;
          v9 = 34;
          goto LABEL_47;
        }
LABEL_48:
        if (boost::property_tree::detail::rapidxml::internal::lookup_tables<0>::lookup_whitespace[v6])
        {
          *v24++ = 32;
          do
          {
            v20 = *++v2;
            v19 = v20;
            if (v20 < 0)
              v19 = 122;
          }
          while (boost::property_tree::detail::rapidxml::internal::lookup_tables<0>::lookup_whitespace[v19]);
        }
        else
        {
          ++v2;
          v21 = v24++;
          *v21 = v5;
        }
      }
    }
  }
  *a1 = v2;
  return v24;
}

void boost::property_tree::detail::rapidxml::parse_error::~parse_error(std::exception *this)
{
  std::exception::~exception(this);
  JUMPOUT(0x1AF44D190);
}

uint64_t boost::property_tree::detail::rapidxml::parse_error::what(boost::property_tree::detail::rapidxml::parse_error *this)
{
  return *((_QWORD *)this + 1);
}

_QWORD *boost::property_tree::detail::rapidxml::xml_document<char>::parse_node<0>(uint64_t a1, char **a2)
{
  char *v2;
  int v3;
  int v4;
  int v5;
  int v7;
  char *v8;
  int v9;
  int v10;
  _QWORD *exception;
  char *v13;

  v2 = *a2;
  v3 = **a2;
  if (v3 == 33)
  {
    v5 = v2[1];
    if (v5 == 91)
    {
      if (v2[2] == 67 && v2[3] == 68 && v2[4] == 65 && v2[5] == 84 && v2[6] == 65 && v2[7] == 91)
      {
        *a2 = v2 + 8;
        return (_QWORD *)boost::property_tree::detail::rapidxml::xml_document<char>::parse_cdata<3072>(a1, a2);
      }
    }
    else if (v5 == 68)
    {
      if (v2[2] == 79 && v2[3] == 67 && v2[4] == 84 && v2[5] == 89 && v2[6] == 80 && v2[7] == 69)
      {
        v7 = v2[8];
        if (v7 < 0)
          LOBYTE(v7) = 122;
        if (boost::property_tree::detail::rapidxml::internal::lookup_tables<0>::lookup_whitespace[v7])
        {
          *a2 = v2 + 9;
          return (_QWORD *)boost::property_tree::detail::rapidxml::xml_document<char>::parse_doctype<3072>(a1, a2);
        }
      }
    }
    else if (v5 == 45 && v2[2] == 45)
    {
      *a2 = v2 + 3;
      return (_QWORD *)boost::property_tree::detail::rapidxml::xml_document<char>::parse_comment<3072>(a1, a2);
    }
    v8 = v2 + 1;
    while (1)
    {
      *a2 = v8;
      v10 = *v8++;
      v9 = v10;
      if (v10 == 62)
        break;
      if (!v9)
      {
        exception = __cxa_allocate_exception(0x18uLL);
        v13 = *a2;
        *exception = &unk_1E5D29870;
        exception[1] = "unexpected end of data";
        exception[2] = v13;
      }
    }
    *a2 = v8;
    return 0;
  }
  else if (v3 == 63)
  {
    *a2 = v2 + 1;
    if ((v2[1] | 0x20) == 0x78
      && (v2[2] | 0x20) == 0x6D
      && (v2[3] | 0x20) == 0x6C)
    {
      v4 = v2[4];
      if (v4 < 0)
        LOBYTE(v4) = 122;
      if (boost::property_tree::detail::rapidxml::internal::lookup_tables<0>::lookup_whitespace[v4])
        *a2 = v2 + 5;
    }
    return (_QWORD *)boost::property_tree::detail::rapidxml::xml_document<char>::parse_xml_declaration<3072>(a1, a2);
  }
  else
  {
    return boost::property_tree::detail::rapidxml::xml_document<char>::parse_element<0>(a1, a2);
  }
}

_QWORD *boost::property_tree::detail::rapidxml::xml_document<char>::parse_element<0>(uint64_t a1, char **a2)
{
  uint64_t aligned;
  _QWORD *v5;
  uint64_t v6;
  char *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  unsigned __int8 v11;
  int v12;
  char *v13;
  int v14;
  _BYTE *v15;
  uint64_t v16;
  _QWORD *exception;
  char *v19;
  const char *v20;

  aligned = boost::property_tree::detail::rapidxml::memory_pool<char>::allocate_aligned((uint64_t *)(a1 + 96), 0x60uLL);
  v5 = (_QWORD *)aligned;
  v6 = 0;
  *(_QWORD *)(aligned + 32) = 0;
  *(_QWORD *)aligned = 0;
  *(_QWORD *)(aligned + 8) = 0;
  *(_DWORD *)(aligned + 40) = 1;
  *(_QWORD *)(aligned + 48) = 0;
  *(_QWORD *)(aligned + 64) = 0;
  v7 = *a2;
  do
  {
    v8 = v7[v6];
    if (v8 < 0)
      LOBYTE(v8) = 122;
    ++v6;
  }
  while (boost::property_tree::detail::rapidxml::internal::lookup_tables<0>::lookup_node_name[v8]);
  *a2 = &v7[v6 - 1];
  v9 = v6 - 1;
  if (!v9)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    v19 = *a2;
    v20 = "expected element name";
    goto LABEL_21;
  }
  *(_QWORD *)aligned = v7;
  *(_QWORD *)(aligned + 16) = v9;
  v10 = (uint64_t)(*a2 - 1);
  do
  {
    v12 = *(char *)++v10;
    v11 = v12;
    if (v12 < 0)
      v11 = 122;
  }
  while (boost::property_tree::detail::rapidxml::internal::lookup_tables<0>::lookup_whitespace[v11]);
  *a2 = (char *)v10;
  boost::property_tree::detail::rapidxml::xml_document<char>::parse_node_attributes<3072>((char *)a1, a2, aligned);
  v13 = *a2;
  v14 = **a2;
  if (v14 != 47)
  {
    if (v14 == 62)
    {
      *a2 = v13 + 1;
      boost::property_tree::detail::rapidxml::xml_document<char>::parse_node_contents<0>(a1, a2, v5);
      goto LABEL_15;
    }
    goto LABEL_20;
  }
  *a2 = v13 + 1;
  if (v13[1] != 62)
  {
LABEL_20:
    exception = __cxa_allocate_exception(0x18uLL);
    v19 = *a2;
    v20 = "expected >";
LABEL_21:
    *exception = &unk_1E5D29870;
    exception[1] = v20;
    exception[2] = v19;
  }
  *a2 = v13 + 2;
LABEL_15:
  v15 = (_BYTE *)*v5;
  if (*v5)
  {
    v16 = v5[2];
  }
  else
  {
    v16 = 0;
    v15 = &boost::property_tree::detail::rapidxml::xml_base<char>::nullstr(void)::zero;
  }
  v15[v16] = 0;
  return v5;
}

uint64_t boost::property_tree::detail::rapidxml::xml_document<char>::parse_node_contents<0>(uint64_t a1, char **a2, _QWORD *a3)
{
  uint64_t *v6;
  char *v7;
  uint64_t result;
  char *v9;
  int v10;
  char *v11;
  unsigned __int8 v12;
  int v13;
  unsigned __int8 v14;
  int v15;
  uint64_t v16;
  uint64_t *v17;
  _QWORD *exception;
  char *v19;
  const char *v20;

  v6 = a3 + 6;
  do
  {
    v7 = *a2;
    for (result = **a2;
          result != 60;
          result = boost::property_tree::detail::rapidxml::xml_document<char>::parse_and_append_data<0>(a1, a3, a2, v7))
    {
      if (!(_BYTE)result)
      {
        exception = __cxa_allocate_exception(0x18uLL);
        v19 = *a2;
        v20 = "unexpected end of data";
        goto LABEL_25;
      }
    }
    v9 = *a2;
    v10 = (*a2)[1];
    if (v10 == 47)
    {
      *a2 = v9 + 2;
      v11 = v9 + 1;
      do
      {
        v13 = *++v11;
        v12 = v13;
        if (v13 < 0)
          v12 = 122;
      }
      while (boost::property_tree::detail::rapidxml::internal::lookup_tables<0>::lookup_node_name[v12]);
      *a2 = v11;
      do
      {
        v15 = *v11++;
        v14 = v15;
        if (v15 < 0)
          v14 = 122;
      }
      while (boost::property_tree::detail::rapidxml::internal::lookup_tables<0>::lookup_whitespace[v14]);
      *a2 = v11 - 1;
      if (*(v11 - 1) != 62)
      {
        exception = __cxa_allocate_exception(0x18uLL);
        v19 = *a2;
        v20 = "expected >";
LABEL_25:
        *exception = &unk_1E5D29870;
        exception[1] = v20;
        exception[2] = v19;
      }
      *a2 = v11;
    }
    else
    {
      ++*a2;
      result = boost::property_tree::detail::rapidxml::xml_document<char>::parse_node<0>(a1, a2);
      if (result)
      {
        v16 = *v6;
        if (*v6)
        {
          v16 = a3[7];
          v17 = (uint64_t *)(v16 + 88);
        }
        else
        {
          v17 = v6;
        }
        *v17 = result;
        *(_QWORD *)(result + 80) = v16;
        a3[7] = result;
        *(_QWORD *)(result + 32) = a3;
        *(_QWORD *)(result + 88) = 0;
      }
    }
  }
  while (v10 != 47);
  return result;
}

uint64_t boost::property_tree::detail::rapidxml::xml_document<char>::parse_and_append_data<0>(uint64_t a1, _QWORD *a2, char **a3, char *a4)
{
  char *v8;
  uint64_t aligned;
  uint64_t *v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t result;

  *a3 = a4;
  v8 = boost::property_tree::detail::rapidxml::xml_document<char>::skip_and_expand_character_refs<boost::property_tree::detail::rapidxml::xml_document<char>::text_pred,boost::property_tree::detail::rapidxml::xml_document<char>::text_pure_no_ws_pred,0>(a3);
  aligned = boost::property_tree::detail::rapidxml::memory_pool<char>::allocate_aligned((uint64_t *)(a1 + 96), 0x60uLL);
  *(_DWORD *)(aligned + 40) = 2;
  *(_QWORD *)(aligned + 48) = 0;
  *(_QWORD *)(aligned + 64) = 0;
  *(_QWORD *)aligned = 0;
  *(_QWORD *)(aligned + 8) = a4;
  *(_QWORD *)(aligned + 24) = v8 - a4;
  v10 = a2 + 6;
  v11 = a2[6];
  if (v11)
  {
    v11 = a2[7];
    v10 = (uint64_t *)(v11 + 88);
  }
  *v10 = aligned;
  *(_QWORD *)(aligned + 80) = v11;
  a2[7] = aligned;
  *(_QWORD *)(aligned + 32) = a2;
  *(_QWORD *)(aligned + 88) = 0;
  v12 = (_BYTE *)a2[1];
  if (!v12)
    v12 = &boost::property_tree::detail::rapidxml::xml_base<char>::nullstr(void)::zero;
  if (!*v12)
  {
    a2[1] = a4;
    a2[3] = v8 - a4;
  }
  result = **a3;
  *v8 = 0;
  return result;
}

char *boost::property_tree::detail::rapidxml::xml_document<char>::skip_and_expand_character_refs<boost::property_tree::detail::rapidxml::xml_document<char>::text_pred,boost::property_tree::detail::rapidxml::xml_document<char>::text_pure_no_ws_pred,0>(char **a1)
{
  char *v2;
  unsigned __int8 v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  _BYTE *v9;
  unint64_t v10;
  unint64_t v11;
  int v12;
  uint64_t v13;
  unint64_t v14;
  int v15;
  uint64_t v16;
  char *v17;
  _QWORD *exception;
  char *v20;

  v2 = *a1 - 1;
  do
  {
    v4 = *++v2;
    v3 = v4;
    if (v4 < 0)
      v3 = 122;
  }
  while (boost::property_tree::detail::rapidxml::internal::lookup_tables<0>::lookup_text_pure_no_ws[v3]);
  *a1 = v2;
  v20 = v2;
  while (1)
  {
    v5 = *v2;
    v6 = (v5 & 0x80u) == 0 ? *v2 : 122;
    if (!v6 || v6 == 60)
      break;
    if (v5 != 38)
      goto LABEL_48;
    v7 = v2[1];
    if (v7 <= 102)
    {
      if (v7 == 35)
      {
        v9 = v2 + 2;
        if (v2[2] == 120)
        {
          v10 = 0;
          do
          {
            v11 = v10;
            v12 = *++v9;
            v13 = boost::property_tree::detail::rapidxml::internal::lookup_tables<0>::lookup_digits[v12];
            v10 = v13 + 16 * v10;
          }
          while (v13 != 255);
        }
        else
        {
          v14 = 0;
          v9 = v2 + 1;
          do
          {
            v11 = v14;
            v15 = *++v9;
            v16 = boost::property_tree::detail::rapidxml::internal::lookup_tables<0>::lookup_digits[v15];
            v14 = v16 + 10 * v14;
          }
          while (v16 != 255);
        }
        boost::property_tree::detail::rapidxml::xml_document<char>::insert_coded_character<1024>((uint64_t *)&v20, v11);
        if (*v9 != 59)
        {
          exception = __cxa_allocate_exception(0x18uLL);
          *exception = &unk_1E5D29870;
          exception[1] = "expected ;";
          exception[2] = v9;
        }
        v2 = v9 + 1;
      }
      else
      {
        if (v7 != 97)
          goto LABEL_48;
        v8 = v2[2];
        if (v8 == 112)
        {
          if (v2[3] != 111 || v2[4] != 115 || v2[5] != 59)
            goto LABEL_48;
          *v20 = 39;
LABEL_47:
          ++v20;
          v2 += 6;
        }
        else
        {
          if (v8 != 109 || v2[3] != 112 || v2[4] != 59)
            goto LABEL_48;
          *v20++ = 38;
          v2 += 5;
        }
      }
    }
    else if (v7 == 103)
    {
      if (v2[2] != 116 || v2[3] != 59)
        goto LABEL_48;
      *v20 = 62;
LABEL_34:
      ++v20;
      v2 += 4;
    }
    else
    {
      if (v7 == 108)
      {
        if (v2[2] != 116 || v2[3] != 59)
          goto LABEL_48;
        *v20 = 60;
        goto LABEL_34;
      }
      if (v7 == 113 && v2[2] == 117 && v2[3] == 111 && v2[4] == 116 && v2[5] == 59)
      {
        *v20 = 34;
        goto LABEL_47;
      }
LABEL_48:
      ++v2;
      v17 = v20++;
      *v17 = v5;
    }
  }
  *a1 = v2;
  return v20;
}

_QWORD *boost::property_tree::detail::rapidxml::xml_document<char>::parse_node<3136>(uint64_t a1, char **a2)
{
  char *v2;
  int v3;
  int v4;
  int v5;
  int v7;
  char *v8;
  int v9;
  int v10;
  _QWORD *exception;
  char *v13;

  v2 = *a2;
  v3 = **a2;
  if (v3 == 33)
  {
    v5 = v2[1];
    if (v5 == 91)
    {
      if (v2[2] == 67 && v2[3] == 68 && v2[4] == 65 && v2[5] == 84 && v2[6] == 65 && v2[7] == 91)
      {
        *a2 = v2 + 8;
        return (_QWORD *)boost::property_tree::detail::rapidxml::xml_document<char>::parse_cdata<3072>(a1, a2);
      }
    }
    else if (v5 == 68)
    {
      if (v2[2] == 79 && v2[3] == 67 && v2[4] == 84 && v2[5] == 89 && v2[6] == 80 && v2[7] == 69)
      {
        v7 = v2[8];
        if (v7 < 0)
          LOBYTE(v7) = 122;
        if (boost::property_tree::detail::rapidxml::internal::lookup_tables<0>::lookup_whitespace[v7])
        {
          *a2 = v2 + 9;
          return (_QWORD *)boost::property_tree::detail::rapidxml::xml_document<char>::parse_doctype<3072>(a1, a2);
        }
      }
    }
    else if (v5 == 45 && v2[2] == 45)
    {
      *a2 = v2 + 3;
      return (_QWORD *)boost::property_tree::detail::rapidxml::xml_document<char>::parse_comment<3136>(a1, a2);
    }
    v8 = v2 + 1;
    while (1)
    {
      *a2 = v8;
      v10 = *v8++;
      v9 = v10;
      if (v10 == 62)
        break;
      if (!v9)
      {
        exception = __cxa_allocate_exception(0x18uLL);
        v13 = *a2;
        *exception = &unk_1E5D29870;
        exception[1] = "unexpected end of data";
        exception[2] = v13;
      }
    }
    *a2 = v8;
    return 0;
  }
  else if (v3 == 63)
  {
    *a2 = v2 + 1;
    if ((v2[1] | 0x20) == 0x78
      && (v2[2] | 0x20) == 0x6D
      && (v2[3] | 0x20) == 0x6C)
    {
      v4 = v2[4];
      if (v4 < 0)
        LOBYTE(v4) = 122;
      if (boost::property_tree::detail::rapidxml::internal::lookup_tables<0>::lookup_whitespace[v4])
        *a2 = v2 + 5;
    }
    return (_QWORD *)boost::property_tree::detail::rapidxml::xml_document<char>::parse_xml_declaration<3072>(a1, a2);
  }
  else
  {
    return boost::property_tree::detail::rapidxml::xml_document<char>::parse_element<3136>(a1, a2);
  }
}

_QWORD *boost::property_tree::detail::rapidxml::xml_document<char>::parse_element<3136>(uint64_t a1, char **a2)
{
  uint64_t aligned;
  _QWORD *v5;
  uint64_t v6;
  char *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  unsigned __int8 v11;
  int v12;
  char *v13;
  int v14;
  _BYTE *v15;
  uint64_t v16;
  _QWORD *exception;
  char *v19;
  const char *v20;

  aligned = boost::property_tree::detail::rapidxml::memory_pool<char>::allocate_aligned((uint64_t *)(a1 + 96), 0x60uLL);
  v5 = (_QWORD *)aligned;
  v6 = 0;
  *(_QWORD *)(aligned + 32) = 0;
  *(_QWORD *)aligned = 0;
  *(_QWORD *)(aligned + 8) = 0;
  *(_DWORD *)(aligned + 40) = 1;
  *(_QWORD *)(aligned + 48) = 0;
  *(_QWORD *)(aligned + 64) = 0;
  v7 = *a2;
  do
  {
    v8 = v7[v6];
    if (v8 < 0)
      LOBYTE(v8) = 122;
    ++v6;
  }
  while (boost::property_tree::detail::rapidxml::internal::lookup_tables<0>::lookup_node_name[v8]);
  *a2 = &v7[v6 - 1];
  v9 = v6 - 1;
  if (!v9)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    v19 = *a2;
    v20 = "expected element name";
    goto LABEL_21;
  }
  *(_QWORD *)aligned = v7;
  *(_QWORD *)(aligned + 16) = v9;
  v10 = (uint64_t)(*a2 - 1);
  do
  {
    v12 = *(char *)++v10;
    v11 = v12;
    if (v12 < 0)
      v11 = 122;
  }
  while (boost::property_tree::detail::rapidxml::internal::lookup_tables<0>::lookup_whitespace[v11]);
  *a2 = (char *)v10;
  boost::property_tree::detail::rapidxml::xml_document<char>::parse_node_attributes<3072>((char *)a1, a2, aligned);
  v13 = *a2;
  v14 = **a2;
  if (v14 != 47)
  {
    if (v14 == 62)
    {
      *a2 = v13 + 1;
      boost::property_tree::detail::rapidxml::xml_document<char>::parse_node_contents<3136>(a1, a2, v5);
      goto LABEL_15;
    }
    goto LABEL_20;
  }
  *a2 = v13 + 1;
  if (v13[1] != 62)
  {
LABEL_20:
    exception = __cxa_allocate_exception(0x18uLL);
    v19 = *a2;
    v20 = "expected >";
LABEL_21:
    *exception = &unk_1E5D29870;
    exception[1] = v20;
    exception[2] = v19;
  }
  *a2 = v13 + 2;
LABEL_15:
  v15 = (_BYTE *)*v5;
  if (*v5)
  {
    v16 = v5[2];
  }
  else
  {
    v16 = 0;
    v15 = &boost::property_tree::detail::rapidxml::xml_base<char>::nullstr(void)::zero;
  }
  v15[v16] = 0;
  return v5;
}

uint64_t boost::property_tree::detail::rapidxml::xml_document<char>::parse_comment<3136>(uint64_t a1, _QWORD *a2)
{
  _BYTE *v3;
  _BYTE *i;
  uint64_t result;
  uint64_t v6;
  _QWORD *exception;
  uint64_t v8;

  v3 = (_BYTE *)*a2;
  for (i = (_BYTE *)(*a2 + 1); ; ++i)
  {
    if (*(i - 1) != 45)
    {
      if (!*(i - 1))
      {
        exception = __cxa_allocate_exception(0x18uLL);
        v8 = *a2;
        *exception = &unk_1E5D29870;
        exception[1] = "unexpected end of data";
        exception[2] = v8;
      }
      goto LABEL_7;
    }
    if (*i == 45 && i[1] == 62)
      break;
LABEL_7:
    *a2 = i;
  }
  result = boost::property_tree::detail::rapidxml::memory_pool<char>::allocate_aligned((uint64_t *)(a1 + 96), 0x60uLL);
  *(_QWORD *)(result + 32) = 0;
  *(_QWORD *)result = 0;
  *(_QWORD *)(result + 8) = 0;
  *(_DWORD *)(result + 40) = 4;
  *(_QWORD *)(result + 48) = 0;
  *(_QWORD *)(result + 64) = 0;
  v6 = *a2 - (_QWORD)v3;
  *(_QWORD *)(result + 8) = v3;
  *(_QWORD *)(result + 24) = v6;
  *(_BYTE *)*a2 = 0;
  *a2 += 3;
  return result;
}

uint64_t boost::property_tree::detail::rapidxml::xml_document<char>::parse_node_contents<3136>(uint64_t a1, char **a2, _QWORD *a3)
{
  uint64_t *v6;
  char *v7;
  unsigned __int8 v8;
  int v9;
  uint64_t result;
  char *v11;
  int v12;
  char *v13;
  unsigned __int8 v14;
  int v15;
  unsigned __int8 v16;
  int v17;
  uint64_t v18;
  uint64_t *v19;
  _QWORD *exception;
  char *v21;
  const char *v22;

  v6 = a3 + 6;
  do
  {
    v7 = *a2 - 1;
    do
    {
      v9 = *++v7;
      v8 = v9;
      if (v9 < 0)
        v8 = 122;
    }
    while (boost::property_tree::detail::rapidxml::internal::lookup_tables<0>::lookup_whitespace[v8]);
    *a2 = v7;
    for (result = *v7;
          result != 60;
          result = boost::property_tree::detail::rapidxml::xml_document<char>::parse_and_append_data<3072>(a1, a3, a2))
    {
      if (!(_BYTE)result)
      {
        exception = __cxa_allocate_exception(0x18uLL);
        v21 = *a2;
        v22 = "unexpected end of data";
        goto LABEL_29;
      }
    }
    v11 = *a2;
    v12 = (*a2)[1];
    if (v12 == 47)
    {
      *a2 = v11 + 2;
      v13 = v11 + 1;
      do
      {
        v15 = *++v13;
        v14 = v15;
        if (v15 < 0)
          v14 = 122;
      }
      while (boost::property_tree::detail::rapidxml::internal::lookup_tables<0>::lookup_node_name[v14]);
      *a2 = v13;
      do
      {
        v17 = *v13++;
        v16 = v17;
        if (v17 < 0)
          v16 = 122;
      }
      while (boost::property_tree::detail::rapidxml::internal::lookup_tables<0>::lookup_whitespace[v16]);
      *a2 = v13 - 1;
      if (*(v13 - 1) != 62)
      {
        exception = __cxa_allocate_exception(0x18uLL);
        v21 = *a2;
        v22 = "expected >";
LABEL_29:
        *exception = &unk_1E5D29870;
        exception[1] = v22;
        exception[2] = v21;
      }
      *a2 = v13;
    }
    else
    {
      ++*a2;
      result = boost::property_tree::detail::rapidxml::xml_document<char>::parse_node<3136>(a1, a2);
      if (result)
      {
        v18 = *v6;
        if (*v6)
        {
          v18 = a3[7];
          v19 = (uint64_t *)(v18 + 88);
        }
        else
        {
          v19 = v6;
        }
        *v19 = result;
        *(_QWORD *)(result + 80) = v18;
        a3[7] = result;
        *(_QWORD *)(result + 32) = a3;
        *(_QWORD *)(result + 88) = 0;
      }
    }
  }
  while (v12 != 47);
  return result;
}

_QWORD *boost::property_tree::detail::rapidxml::xml_document<char>::parse_node<64>(uint64_t a1, char **a2)
{
  char *v2;
  int v3;
  int v4;
  int v5;
  int v7;
  char *v8;
  int v9;
  int v10;
  _QWORD *exception;
  char *v13;

  v2 = *a2;
  v3 = **a2;
  if (v3 == 33)
  {
    v5 = v2[1];
    if (v5 == 91)
    {
      if (v2[2] == 67 && v2[3] == 68 && v2[4] == 65 && v2[5] == 84 && v2[6] == 65 && v2[7] == 91)
      {
        *a2 = v2 + 8;
        return (_QWORD *)boost::property_tree::detail::rapidxml::xml_document<char>::parse_cdata<3072>(a1, a2);
      }
    }
    else if (v5 == 68)
    {
      if (v2[2] == 79 && v2[3] == 67 && v2[4] == 84 && v2[5] == 89 && v2[6] == 80 && v2[7] == 69)
      {
        v7 = v2[8];
        if (v7 < 0)
          LOBYTE(v7) = 122;
        if (boost::property_tree::detail::rapidxml::internal::lookup_tables<0>::lookup_whitespace[v7])
        {
          *a2 = v2 + 9;
          return (_QWORD *)boost::property_tree::detail::rapidxml::xml_document<char>::parse_doctype<3072>(a1, a2);
        }
      }
    }
    else if (v5 == 45 && v2[2] == 45)
    {
      *a2 = v2 + 3;
      return (_QWORD *)boost::property_tree::detail::rapidxml::xml_document<char>::parse_comment<3136>(a1, a2);
    }
    v8 = v2 + 1;
    while (1)
    {
      *a2 = v8;
      v10 = *v8++;
      v9 = v10;
      if (v10 == 62)
        break;
      if (!v9)
      {
        exception = __cxa_allocate_exception(0x18uLL);
        v13 = *a2;
        *exception = &unk_1E5D29870;
        exception[1] = "unexpected end of data";
        exception[2] = v13;
      }
    }
    *a2 = v8;
    return 0;
  }
  else if (v3 == 63)
  {
    *a2 = v2 + 1;
    if ((v2[1] | 0x20) == 0x78
      && (v2[2] | 0x20) == 0x6D
      && (v2[3] | 0x20) == 0x6C)
    {
      v4 = v2[4];
      if (v4 < 0)
        LOBYTE(v4) = 122;
      if (boost::property_tree::detail::rapidxml::internal::lookup_tables<0>::lookup_whitespace[v4])
        *a2 = v2 + 5;
    }
    return (_QWORD *)boost::property_tree::detail::rapidxml::xml_document<char>::parse_xml_declaration<3072>(a1, a2);
  }
  else
  {
    return boost::property_tree::detail::rapidxml::xml_document<char>::parse_element<64>(a1, a2);
  }
}

_QWORD *boost::property_tree::detail::rapidxml::xml_document<char>::parse_element<64>(uint64_t a1, char **a2)
{
  uint64_t aligned;
  _QWORD *v5;
  uint64_t v6;
  char *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  unsigned __int8 v11;
  int v12;
  char *v13;
  int v14;
  _BYTE *v15;
  uint64_t v16;
  _QWORD *exception;
  char *v19;
  const char *v20;

  aligned = boost::property_tree::detail::rapidxml::memory_pool<char>::allocate_aligned((uint64_t *)(a1 + 96), 0x60uLL);
  v5 = (_QWORD *)aligned;
  v6 = 0;
  *(_QWORD *)(aligned + 32) = 0;
  *(_QWORD *)aligned = 0;
  *(_QWORD *)(aligned + 8) = 0;
  *(_DWORD *)(aligned + 40) = 1;
  *(_QWORD *)(aligned + 48) = 0;
  *(_QWORD *)(aligned + 64) = 0;
  v7 = *a2;
  do
  {
    v8 = v7[v6];
    if (v8 < 0)
      LOBYTE(v8) = 122;
    ++v6;
  }
  while (boost::property_tree::detail::rapidxml::internal::lookup_tables<0>::lookup_node_name[v8]);
  *a2 = &v7[v6 - 1];
  v9 = v6 - 1;
  if (!v9)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    v19 = *a2;
    v20 = "expected element name";
    goto LABEL_21;
  }
  *(_QWORD *)aligned = v7;
  *(_QWORD *)(aligned + 16) = v9;
  v10 = (uint64_t)(*a2 - 1);
  do
  {
    v12 = *(char *)++v10;
    v11 = v12;
    if (v12 < 0)
      v11 = 122;
  }
  while (boost::property_tree::detail::rapidxml::internal::lookup_tables<0>::lookup_whitespace[v11]);
  *a2 = (char *)v10;
  boost::property_tree::detail::rapidxml::xml_document<char>::parse_node_attributes<3072>((char *)a1, a2, aligned);
  v13 = *a2;
  v14 = **a2;
  if (v14 != 47)
  {
    if (v14 == 62)
    {
      *a2 = v13 + 1;
      boost::property_tree::detail::rapidxml::xml_document<char>::parse_node_contents<64>(a1, a2, v5);
      goto LABEL_15;
    }
    goto LABEL_20;
  }
  *a2 = v13 + 1;
  if (v13[1] != 62)
  {
LABEL_20:
    exception = __cxa_allocate_exception(0x18uLL);
    v19 = *a2;
    v20 = "expected >";
LABEL_21:
    *exception = &unk_1E5D29870;
    exception[1] = v20;
    exception[2] = v19;
  }
  *a2 = v13 + 2;
LABEL_15:
  v15 = (_BYTE *)*v5;
  if (*v5)
  {
    v16 = v5[2];
  }
  else
  {
    v16 = 0;
    v15 = &boost::property_tree::detail::rapidxml::xml_base<char>::nullstr(void)::zero;
  }
  v15[v16] = 0;
  return v5;
}

uint64_t boost::property_tree::detail::rapidxml::xml_document<char>::parse_node_contents<64>(uint64_t a1, char **a2, _QWORD *a3)
{
  uint64_t *v6;
  char *v7;
  uint64_t result;
  char *v9;
  int v10;
  char *v11;
  unsigned __int8 v12;
  int v13;
  unsigned __int8 v14;
  int v15;
  uint64_t v16;
  uint64_t *v17;
  _QWORD *exception;
  char *v19;
  const char *v20;

  v6 = a3 + 6;
  do
  {
    v7 = *a2;
    for (result = **a2;
          result != 60;
          result = boost::property_tree::detail::rapidxml::xml_document<char>::parse_and_append_data<0>(a1, a3, a2, v7))
    {
      if (!(_BYTE)result)
      {
        exception = __cxa_allocate_exception(0x18uLL);
        v19 = *a2;
        v20 = "unexpected end of data";
        goto LABEL_25;
      }
    }
    v9 = *a2;
    v10 = (*a2)[1];
    if (v10 == 47)
    {
      *a2 = v9 + 2;
      v11 = v9 + 1;
      do
      {
        v13 = *++v11;
        v12 = v13;
        if (v13 < 0)
          v12 = 122;
      }
      while (boost::property_tree::detail::rapidxml::internal::lookup_tables<0>::lookup_node_name[v12]);
      *a2 = v11;
      do
      {
        v15 = *v11++;
        v14 = v15;
        if (v15 < 0)
          v14 = 122;
      }
      while (boost::property_tree::detail::rapidxml::internal::lookup_tables<0>::lookup_whitespace[v14]);
      *a2 = v11 - 1;
      if (*(v11 - 1) != 62)
      {
        exception = __cxa_allocate_exception(0x18uLL);
        v19 = *a2;
        v20 = "expected >";
LABEL_25:
        *exception = &unk_1E5D29870;
        exception[1] = v20;
        exception[2] = v19;
      }
      *a2 = v11;
    }
    else
    {
      ++*a2;
      result = boost::property_tree::detail::rapidxml::xml_document<char>::parse_node<64>(a1, a2);
      if (result)
      {
        v16 = *v6;
        if (*v6)
        {
          v16 = a3[7];
          v17 = (uint64_t *)(v16 + 88);
        }
        else
        {
          v17 = v6;
        }
        *v17 = result;
        *(_QWORD *)(result + 80) = v16;
        a3[7] = result;
        *(_QWORD *)(result + 32) = a3;
        *(_QWORD *)(result + 88) = 0;
      }
    }
  }
  while (v10 != 47);
  return result;
}

std::string *boost::property_tree::xml_parser::xmlattr<std::string>()
{
  unsigned __int8 v0;

  if ((v0 & 1) == 0
  {
    boost::property_tree::detail::widen<std::string>("<xmlattr>", &boost::property_tree::xml_parser::xmlattr<std::string>(void)::s);
    __cxa_atexit((void (*)(void *))MEMORY[0x1E0DE44D0], &boost::property_tree::xml_parser::xmlattr<std::string>(void)::s, &dword_1AD756000);
  }
  return &boost::property_tree::xml_parser::xmlattr<std::string>(void)::s;
}

void sub_1ADC3A400(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

std::string *boost::property_tree::xml_parser::xmltext<std::string>()
{
  unsigned __int8 v0;

  if ((v0 & 1) == 0
  {
    boost::property_tree::detail::widen<std::string>("<xmltext>", &boost::property_tree::xml_parser::xmltext<std::string>(void)::s);
    __cxa_atexit((void (*)(void *))MEMORY[0x1E0DE44D0], &boost::property_tree::xml_parser::xmltext<std::string>(void)::s, &dword_1AD756000);
  }
  return &boost::property_tree::xml_parser::xmltext<std::string>(void)::s;
}

void sub_1ADC3A498(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

std::string *boost::property_tree::xml_parser::xmlcomment<std::string>()
{
  unsigned __int8 v0;

  if ((v0 & 1) == 0
  {
    boost::property_tree::detail::widen<std::string>("<xmlcomment>", &boost::property_tree::xml_parser::xmlcomment<std::string>(void)::s);
    __cxa_atexit((void (*)(void *))MEMORY[0x1E0DE44D0], &boost::property_tree::xml_parser::xmlcomment<std::string>(void)::s, &dword_1AD756000);
  }
  return &boost::property_tree::xml_parser::xmlcomment<std::string>(void)::s;
}

void sub_1ADC3A530(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t std::pair<char *,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>::pair[abi:ne180100]<char *,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>,0>(uint64_t a1, _QWORD *a2, __int128 *a3)
{
  __int128 v5;
  uint64_t v6;

  *(_QWORD *)a1 = *a2;
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 8), *(const std::string::value_type **)a3, *((_QWORD *)a3 + 1));
  }
  else
  {
    v5 = *a3;
    *(_QWORD *)(a1 + 24) = *((_QWORD *)a3 + 2);
    *(_OWORD *)(a1 + 8) = v5;
  }
  v6 = operator new();
  boost::multi_index::multi_index_container<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,boost::multi_index::indexed_by<boost::multi_index::sequenced<boost::multi_index::tag<mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>>,boost::multi_index::ordered_non_unique<boost::multi_index::tag<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::subs::by_name,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>,boost::multi_index::member<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,std::string const,&std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>::first>,std::less<std::string>>,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>,std::allocator<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>>>::multi_index_container(v6, *((_QWORD *)a3 + 3));
  *(_QWORD *)(a1 + 32) = v6;
  return a1;
}

void sub_1ADC3A5D0(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;
  uint64_t v3;

  MEMORY[0x1AF44D190](v3, 0x1020C402FC1992ELL);
  if (*(char *)(v1 + 31) < 0)
    operator delete(*v2);
  _Unwind_Resume(a1);
}

_QWORD *std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>::pair[abi:ne180100]<char *,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>,0>(_QWORD *a1, uint64_t a2)
{
  std::string *v4;
  __int128 v5;
  uint64_t v6;

  v4 = (std::string *)std::string::basic_string[abi:ne180100]<0>(a1, *(char **)a2);
  if (*(char *)(a2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v4 + 1, *(const std::string::value_type **)(a2 + 8), *(_QWORD *)(a2 + 16));
  }
  else
  {
    v5 = *(_OWORD *)(a2 + 8);
    v4[1].__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 + 24);
    *(_OWORD *)&v4[1].__r_.__value_.__l.__data_ = v5;
  }
  v6 = operator new();
  boost::multi_index::multi_index_container<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,boost::multi_index::indexed_by<boost::multi_index::sequenced<boost::multi_index::tag<mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>>,boost::multi_index::ordered_non_unique<boost::multi_index::tag<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::subs::by_name,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>,boost::multi_index::member<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,std::string const,&std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>::first>,std::less<std::string>>,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>,std::allocator<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>>>::multi_index_container(v6, *(_QWORD *)(a2 + 32));
  a1[6] = v6;
  return a1;
}

void sub_1ADC3A698(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void boost::property_tree::detail::widen<std::string>(std::string::value_type *a1@<X0>, std::string *a2@<X8>)
{
  std::string::value_type v3;
  unsigned __int8 *v4;
  int v5;

  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  v3 = *a1;
  if (*a1)
  {
    v4 = (unsigned __int8 *)(a1 + 1);
    do
    {
      std::string::push_back(a2, v3);
      v5 = *v4++;
      v3 = v5;
    }
    while (v5);
  }
}

void sub_1ADC3A730(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *boost::property_tree::detail::rapidxml::memory_pool<char>::clear(_QWORD *a1)
{
  _QWORD *result;
  _QWORD *v3;
  void (**v4)(void);
  _QWORD *v5;

  v3 = a1 + 3;
  result = (_QWORD *)*a1;
  if (result != v3)
  {
    v4 = (void (**)(void))(a1 + 8196);
    do
    {
      v5 = *(_QWORD **)((char *)result + (-(int)result & 7));
      if (*v4)
        (*v4)();
      else
        MEMORY[0x1AF44D160]();
      *a1 = v5;
      result = v5;
    }
    while (v5 != v3);
  }
  *a1 = v3;
  a1[1] = (char *)v3 + (-(int)v3 & 7);
  a1[2] = a1 + 8195;
  return result;
}

uint64_t std::vector<quasar::AppLmData::Oov>::__push_back_slow_path<quasar::AppLmData::Oov>(uint64_t *a1, __int128 *a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  __int128 v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  void *v19[5];

  v3 = *a1;
  v4 = 0x6DB6DB6DB6DB6DB7 * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) > 0x492492492492492)
    std::vector<int>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0x6DB6DB6DB6DB6DB7 * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x249249249249249)
    v9 = 0x492492492492492;
  else
    v9 = v5;
  v19[4] = a1 + 2;
  if (v9)
    v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::VoiceCommandArgument>>(v7, v9);
  else
    v10 = 0;
  v11 = &v10[56 * v4];
  v19[0] = v10;
  v19[1] = v11;
  v19[3] = &v10[56 * v9];
  v12 = *a2;
  *((_QWORD *)v11 + 2) = *((_QWORD *)a2 + 2);
  *(_OWORD *)v11 = v12;
  *((_QWORD *)a2 + 1) = 0;
  *((_QWORD *)a2 + 2) = 0;
  *(_QWORD *)a2 = 0;
  *((_QWORD *)v11 + 3) = *((_QWORD *)a2 + 3);
  v13 = a2 + 2;
  v14 = *((_QWORD *)a2 + 4);
  *((_QWORD *)v11 + 4) = v14;
  v15 = v11 + 32;
  v16 = *((_QWORD *)a2 + 5);
  *((_QWORD *)v11 + 5) = v16;
  if (v16)
  {
    *(_QWORD *)(v14 + 16) = v15;
    *((_QWORD *)a2 + 3) = v13;
    *v13 = 0;
    *((_QWORD *)a2 + 5) = 0;
  }
  else
  {
    *((_QWORD *)v11 + 3) = v15;
  }
  *(_DWORD *)&v10[56 * v4 + 48] = *((_DWORD *)a2 + 12);
  v19[2] = v11 + 56;
  std::vector<quasar::AppLmData::Oov>::__swap_out_circular_buffer(a1, v19);
  v17 = a1[1];
  std::__split_buffer<quasar::AppLmData::Oov>::~__split_buffer(v19);
  return v17;
}

void sub_1ADC3A940(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<quasar::AppLmData::Oov>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t quasar::OnlineLASBeamSearchDecoder::OnlineLASBeamSearchDecoder(uint64_t a1, __int128 *a2)
{
  uint64_t v3;
  char *v4;

  v3 = quasar::Decoder::Decoder(a1, a2);
  *(_QWORD *)v3 = &off_1E5D39E60;
  *(_OWORD *)(v3 + 448) = 0u;
  *(_OWORD *)(v3 + 464) = 0u;
  *(_OWORD *)(v3 + 480) = 0u;
  *(_OWORD *)(v3 + 496) = 0u;
  *(_QWORD *)(v3 + 512) = 0;
  *(_WORD *)(v3 + 520) = 257;
  *(_QWORD *)(v3 + 524) = 0x8000001F4;
  *(_QWORD *)(v3 + 532) = 0;
  *(_DWORD *)(v3 + 540) = 32;
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(v3 + 544), "");
  *(_BYTE *)(a1 + 616) = 0;
  *(_OWORD *)(a1 + 584) = 0u;
  *(_OWORD *)(a1 + 600) = 0u;
  *(_OWORD *)(a1 + 568) = 0u;
  *(_OWORD *)(a1 + 624) = 0u;
  v4 = (char *)operator new(0xA8uLL);
  *((_QWORD *)v4 + 2) = 0;
  *(_QWORD *)v4 = &unk_1E5D43328;
  *((_QWORD *)v4 + 1) = 0;
  *((_QWORD *)v4 + 19) = 0;
  *((_QWORD *)v4 + 20) = 0;
  *((_QWORD *)v4 + 18) = 0;
  *(_OWORD *)(v4 + 40) = 0u;
  *(_OWORD *)(v4 + 56) = 0u;
  *(_OWORD *)(v4 + 72) = 0u;
  *(_OWORD *)(v4 + 88) = 0u;
  *(_OWORD *)(v4 + 104) = 0u;
  *(_OWORD *)(v4 + 120) = 0u;
  *((_DWORD *)v4 + 34) = 0;
  *(_OWORD *)(v4 + 24) = 0u;
  *(_QWORD *)(a1 + 640) = v4 + 24;
  *(_QWORD *)(a1 + 648) = v4;
  *(_BYTE *)(a1 + 57) = 0;
  return a1;
}

void sub_1ADC3AA58(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  void **v3;
  void **v4;
  uint64_t v6;
  va_list va;

  va_start(va, a2);
  std::unique_ptr<kaldi::BeamSearchDecoder>::reset[abi:ne180100]((kaldi::BeamSearchDecoder **)(v2 + 632), 0);
  v6 = *(_QWORD *)(v2 + 624);
  *(_QWORD *)(v2 + 624) = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  if (*(char *)(v2 + 591) < 0)
    operator delete(*v4);
  if (*(char *)(v2 + 567) < 0)
    operator delete(*v3);
  if (*(char *)(v2 + 519) < 0)
    operator delete(*(void **)(v2 + 496));
  if (*(char *)(v2 + 495) < 0)
    operator delete(*(void **)(v2 + 472));
  if (*(char *)(v2 + 471) < 0)
    operator delete(*(void **)(v2 + 448));
  quasar::Decoder::~Decoder((void **)v2);
  _Unwind_Resume(a1);
}

void quasar::OnlineLASBeamSearchDecoder::~OnlineLASBeamSearchDecoder(quasar::OnlineLASBeamSearchDecoder *this)
{
  uint64_t v2;
  void **v3;

  *(_QWORD *)this = &off_1E5D39E60;
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this + 640);
  std::unique_ptr<kaldi::BeamSearchDecoder>::reset[abi:ne180100]((kaldi::BeamSearchDecoder **)this + 79, 0);
  v2 = *((_QWORD *)this + 78);
  *((_QWORD *)this + 78) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (void **)((char *)this + 592);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  if (*((char *)this + 591) < 0)
    operator delete(*((void **)this + 71));
  if (*((char *)this + 567) < 0)
    operator delete(*((void **)this + 68));
  if (*((char *)this + 519) < 0)
    operator delete(*((void **)this + 62));
  if (*((char *)this + 495) < 0)
    operator delete(*((void **)this + 59));
  if (*((char *)this + 471) < 0)
    operator delete(*((void **)this + 56));
  quasar::Decoder::~Decoder((void **)this);
}

{
  quasar::OnlineLASBeamSearchDecoder::~OnlineLASBeamSearchDecoder(this);
  JUMPOUT(0x1AF44D190);
}

void quasar::OnlineLASBeamSearchDecoder::registerParams(quasar::QsrTextSymbolTable **this, quasar::SystemConfig *a2)
{
  void *v4[2];
  char v5;
  void *__p[2];
  char v7;

  std::string::basic_string[abi:ne180100]<0>(__p, "online-las-beam-search");
  quasar::SystemConfig::enforceMinVersion((uint64_t)a2, 159, 0, (uint64_t)__p);
  if (v7 < 0)
    operator delete(__p[0]);
  kaldi::BeamSearchDecoderOptions::Register((uint64_t)(this + 65), (uint64_t)a2);
  quasar::QsrTextSymbolTable::Register(this[80], a2, 1, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  std::string::basic_string[abi:ne180100]<0>(__p, "model-file");
  std::string::basic_string[abi:ne180100]<0>(v4, "LAS model (TF/Espresso/CoreML graph)");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)__p, (uint64_t)(this + 56), (uint64_t)v4, 0, 159, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0)
    operator delete(v4[0]);
  if (v7 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "encoder-model-file");
  std::string::basic_string[abi:ne180100]<0>(v4, "LAS encoder split model (TF/Espresso/CoreML graph)");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)__p, (uint64_t)(this + 59), (uint64_t)v4, 0, 200, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0)
    operator delete(v4[0]);
  if (v7 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "decoder-model-file");
  std::string::basic_string[abi:ne180100]<0>(v4, "LAS decoder split model (TF/Espresso/CoreML graph)");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)__p, (uint64_t)(this + 62), (uint64_t)v4, 0, 200, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0)
    operator delete(v4[0]);
  if (v7 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "batch-size");
  std::string::basic_string[abi:ne180100]<0>(v4, "batch size");
  quasar::SystemConfig::Register<int>((uint64_t)a2, (const void **)__p, (uint64_t)this + 540, (uint64_t)v4, 0, 159, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0)
    operator delete(v4[0]);
  if (v7 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "substring-delimiter");
  std::string::basic_string[abi:ne180100]<0>(v4, "Substring delimiter");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)__p, (uint64_t)(this + 68), (uint64_t)v4, 0, 239, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0)
    operator delete(v4[0]);
  if (v7 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "token-delimiter");
  std::string::basic_string[abi:ne180100]<0>(v4, "Token delimiter");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)__p, (uint64_t)(this + 71), (uint64_t)v4, 0, 159, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0)
    operator delete(v4[0]);
  if (v7 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "token-delimiters");
  std::string::basic_string[abi:ne180100]<0>(v4, "List of token delimiters");
  quasar::SystemConfig::Register<std::vector<std::string>>((uint64_t)a2, (const void **)__p, (uint64_t)(this + 74), (uint64_t)v4, 0, 195, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0)
    operator delete(v4[0]);
  if (v7 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "split-tokens-by-character");
  std::string::basic_string[abi:ne180100]<0>(v4, "split tokens by character");
  quasar::SystemConfig::Register<BOOL>((uint64_t)a2, (const void **)__p, (uint64_t)(this + 77), (uint64_t)v4, 0, 195, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0)
    operator delete(v4[0]);
  if (v7 < 0)
    operator delete(__p[0]);
}

void sub_1ADC3AFD4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a16 < 0)
    operator delete(__p);
  if (a22 < 0)
    operator delete(a17);
  _Unwind_Resume(exception_object);
}

uint64_t quasar::OnlineLASBeamSearchDecoder::finishInit(quasar::OnlineLASBeamSearchDecoder *this)
{
  const void *v2;
  uint64_t v3;
  int v4;
  kaldi::quasar::CEEncoderDecoderNet *v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  BOOL v9;
  _QWORD *v10;
  uint64_t v11;
  __int128 *v12;
  uint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  kaldi::BeamSearchDecoder *v16;
  _QWORD *v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;

  if (*((char *)this + 471) < 0)
  {
    if (*((_QWORD *)this + 57))
    {
LABEL_3:
      v2 = (const void *)operator new();
      kaldi::quasar::CEEncoderDecoderNet::CEEncoderDecoderNet((uint64_t)v2, (uint64_t)this + 448);
      v3 = *((_QWORD *)this + 78);
      *((_QWORD *)this + 78) = v2;
      if (v3)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
        v2 = (const void *)*((_QWORD *)this + 78);
        v4 = *((_DWORD *)this + 132);
        if (!v2)
        {
          v5 = 0;
          goto LABEL_12;
        }
      }
      else
      {
        v4 = *((_DWORD *)this + 132);
      }
LABEL_12:
      if (v4 != kaldi::quasar::CEEncoderDecoderNet::Beam(v5))
      {
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v19);
        std::operator<<[abi:ne180100]<std::char_traits<char>>(&v19, "decoderOpts.beam == dynamic_cast<kaldi::quasar::CEEncoderDecoderNet *>(inferenceNet.get())->Beam()");
        kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v19);
      }
      goto LABEL_19;
    }
  }
  else if (*((_BYTE *)this + 471))
  {
    goto LABEL_3;
  }
  if (*((char *)this + 495) < 0)
  {
    if (!*((_QWORD *)this + 60))
      goto LABEL_38;
  }
  else if (!*((_BYTE *)this + 495))
  {
    goto LABEL_38;
  }
  if ((*((char *)this + 519) & 0x80000000) == 0)
  {
    if (*((_BYTE *)this + 519))
      goto LABEL_17;
LABEL_38:
    v34 = 0u;
    v35 = 0u;
    v32 = 0u;
    v33 = 0u;
    v30 = 0u;
    v31 = 0u;
    v28 = 0u;
    v29 = 0u;
    v26 = 0u;
    v27 = 0u;
    v24 = 0u;
    v25 = 0u;
    v22 = 0u;
    v23 = 0u;
    v20 = 0u;
    v21 = 0u;
    v19 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v19);
    goto LABEL_40;
  }
  if (!*((_QWORD *)this + 63))
    goto LABEL_38;
LABEL_17:
  v6 = operator new();
  kaldi::quasar::CESplitEncoderDecoderNet::CESplitEncoderDecoderNet(v6, (char *)this + 472, (char *)this + 496);
  v7 = *((_QWORD *)this + 78);
  *((_QWORD *)this + 78) = v6;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
LABEL_19:
  v8 = *((_DWORD *)this + 135);
  if (v8 % (*(int (**)(_QWORD))(**((_QWORD **)this + 78) + 96))(*((_QWORD *)this + 78)))
    v9 = quasar::gLogLevel < 4;
  else
    v9 = 1;
  if (!v9)
  {
    v34 = 0u;
    v35 = 0u;
    v32 = 0u;
    v33 = 0u;
    v30 = 0u;
    v31 = 0u;
    v28 = 0u;
    v29 = 0u;
    v26 = 0u;
    v27 = 0u;
    v24 = 0u;
    v25 = 0u;
    v22 = 0u;
    v23 = 0u;
    v20 = 0u;
    v21 = 0u;
    v19 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v19);
    v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v19, (uint64_t)"Batch size is not an integer multiple of the frame subsampling factor. ", 71);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"Encoder might drop frames.", 26);
    quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&v19);
  }
  v11 = *((unsigned __int8 *)this + 591);
  if (*((char *)this + 591) < 0)
  {
    if (!*((_QWORD *)this + 72))
      goto LABEL_29;
    goto LABEL_28;
  }
  if (*((_BYTE *)this + 591))
  {
LABEL_28:
    if (*((_QWORD *)this + 75) == *((_QWORD *)this + 74))
      goto LABEL_29;
    v34 = 0u;
    v35 = 0u;
    v32 = 0u;
    v33 = 0u;
    v30 = 0u;
    v31 = 0u;
    v28 = 0u;
    v29 = 0u;
    v26 = 0u;
    v27 = 0u;
    v24 = 0u;
    v25 = 0u;
    v22 = 0u;
    v23 = 0u;
    v20 = 0u;
    v21 = 0u;
    v19 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v19);
    v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v19, (uint64_t)"Both token-delimiter and token-delimiters were provided. ", 57);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v18, "token-delimiter is deprecated, use token-delimiters instead.");
LABEL_40:
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&v19);
  }
LABEL_29:
  if ((v11 & 0x80) != 0)
    v11 = *((_QWORD *)this + 72);
  if (v11)
  {
    v12 = (__int128 *)((char *)this + 568);
    v13 = (uint64_t *)((char *)this + 592);
    v14 = *((_QWORD *)this + 75);
    if (v14 >= *((_QWORD *)this + 76))
    {
      v15 = std::vector<std::string>::__push_back_slow_path<std::string const&>(v13, v12);
    }
    else
    {
      std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>((uint64_t)v13, v12);
      v15 = v14 + 24;
    }
    *((_QWORD *)this + 75) = v15;
  }
  v16 = (kaldi::BeamSearchDecoder *)operator new();
  kaldi::BeamSearchDecoder::BeamSearchDecoder(v16, (char *)this + 520);
  std::unique_ptr<kaldi::BeamSearchDecoder>::reset[abi:ne180100]((kaldi::BeamSearchDecoder **)this + 79, v16);
  return quasar::QsrTextSymbolTable::init(*((const std::string **)this + 80), (quasar::OnlineLASBeamSearchDecoder *)((char *)this + 32), 0, *((unsigned __int8 *)this + 441), 1);
}

void sub_1ADC3B3FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&a9);
}

uint64_t quasar::OnlineLASBeamSearchDecoder::runImpl(uint64_t a1, uint64_t a2, std::vector<std::wstring> **a3, uint64_t a4)
{
  uint64_t *value;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  int *v14;
  int *v15;
  BOOL v16;
  kaldi::BeamSearchDecoder *v17;
  int *v18;
  int v19;
  std::vector<std::wstring> *v20;
  std::vector<std::wstring> *v21;
  std::vector<std::wstring> *v22;
  std::vector<std::wstring>::pointer end;
  uint64_t v24;
  uint64_t v25;
  int v26;
  signed int v27;
  std::vector<std::wstring> *i;
  _BOOL4 IsValidFrame;
  BOOL v30;
  char v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  _QWORD *v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  char *v53;
  char *j;
  std::vector<std::wstring>::pointer v55;
  std::vector<std::wstring>::pointer begin;
  std::string *v57;
  std::vector<std::wstring>::pointer v58;
  float v59;
  double *size;
  unint64_t v61;
  double *v62;
  double *v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  unint64_t v67;
  char *v68;
  double *v69;
  uint64_t v70;
  uint64_t v71;
  int v72;
  uint64_t v73;
  int v75;
  int *v76;
  int *v77;
  uint64_t v79;
  uint64_t *v80;
  unsigned __int8 v81;
  int v82;
  uint64_t v83;
  int32x2_t v84;
  int32x2_t v85;
  void *__p[2];
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  std::vector<std::wstring> v103;
  std::vector<std::wstring> *v104;
  std::vector<std::wstring> *v105;
  uint64_t v106;
  std::vector<std::wstring> v107;
  int *v108;
  int *v109;
  uint64_t v110;
  __int128 v111;
  uint64_t v112;
  void *v113;
  uint64_t v114;
  _BYTE v115[40];
  unint64_t v116;
  std::__shared_weak_count *v117;
  int32x2_t v118[3];

  quasar::SymbolTableList::clear((quasar::SymbolTableList *)(*a3)[19].__end_cap_.__value_);
  value = (uint64_t *)(*a3)[19].__end_cap_.__value_;
  v8 = *(std::__shared_weak_count **)(a1 + 648);
  v116 = *(_QWORD *)(a1 + 640);
  v117 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  quasar::SymbolTableList::addSymbolTable(value, &v116, 0, -1);
  v11 = v117;
  if (v117)
  {
    v12 = (unint64_t *)&v117->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  kaldi::quasar::OnlineLASDecodable::OnlineLASDecodable((uint64_t)v115, *(_QWORD *)(a1 + 624), *(_QWORD *)a2, *(_DWORD *)(a1 + 540));
  kaldi::BeamSearchDecoder::InitDecoding(*(kaldi::BeamSearchDecoder **)(a1 + 632));
  v14 = 0;
  v15 = 0;
  v79 = a1 + 544;
  v80 = (uint64_t *)(a1 + 592);
  while (1)
  {
    v16 = kaldi::BeamSearchDecoder::Finished(*(kaldi::BeamSearchDecoder **)(a1 + 632));
    v17 = *(kaldi::BeamSearchDecoder **)(a1 + 632);
    if (v16)
      break;
    if ((int)kaldi::BeamSearchDecoder::AdvanceDecoding(v17, (uint64_t)v115, 1u) >= 1)
    {
      fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::VectorFst(&v113);
      kaldi::BeamSearchDecoder::GetBestPath(*(_QWORD *)(a1 + 632), (uint64_t)&v113);
      v112 = 0;
      v108 = 0;
      v109 = 0;
      v110 = 0;
      v111 = 0uLL;
      fst::GetLinearSymbolSequence<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,int>((uint64_t)&v113, (uint64_t)&v111, (uint64_t)&v108, v118, 0);
      v18 = v108;
      if ((char *)v109 - (char *)v108 == (char *)v14 - (char *)v15 && !memcmp(v108, v15, (char *)v109 - (char *)v108))
      {
        if (v18)
        {
          v109 = v18;
          operator delete(v18);
        }
      }
      else
      {
        v19 = kaldi::quasar::OnlineLASDecodable::FrameOffset((kaldi::quasar::OnlineLASDecodable *)v115);
        v20 = *a3;
        LODWORD(v20[24].__begin_) = v19;
        quasar::SymbolTableList::lookup((uint64_t *)v20[19].__end_cap_.__value_, &v108, (uint64_t *)&v20[2], (char **)&v20[3], 1);
        if (*(_BYTE *)(a2 + 561))
        {
          v76 = v15;
          if (*(_QWORD *)(a1 + 600) != *(_QWORD *)(a1 + 592))
          {
            quasar::formatResults((uint64_t *)&(*a3)[2], v80, v79, *(unsigned __int8 *)(a1 + 616), __p);
            v21 = *a3;
            std::vector<std::string>::__vdeallocate(*a3 + 2);
            *(_OWORD *)&v21[2].__begin_ = *(_OWORD *)__p;
            v21[2].__end_cap_.__value_ = (std::wstring *)v87;
            __p[1] = 0;
            *(_QWORD *)&v87 = 0;
            __p[0] = 0;
            v107.__begin_ = (std::vector<std::wstring>::pointer)__p;
            std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v107);
          }
          v22 = *a3;
          end = (*a3)[23].__end_;
          v24 = *(unsigned int *)(*(_QWORD *)a4 + 12);
          memset(&v107, 0, sizeof(v107));
          v105 = 0;
          v106 = 0;
          memset(&v103, 0, sizeof(v103));
          v104 = 0;
          LOBYTE(__p[0]) = 0;
          std::string::basic_string[abi:ne180100]<0>(&__p[1], "▁");
          LOWORD(v75) = 0;
          (*(void (**)(std::vector<std::wstring>::pointer, std::vector<std::wstring> *, uint64_t, uint64_t, _QWORD, _QWORD, std::vector<std::wstring> *, std::vector<std::wstring> **, std::vector<std::wstring> *, int, void **))(end->__r_.__value_.__r.__words[0] + 24))(end, v22 + 2, v24, 1, 0, 0, &v107, &v104, &v103, v75, __p);
          v15 = v76;
          if (SHIBYTE(v87) < 0)
            operator delete(__p[1]);
          __p[0] = &v103;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
          __p[0] = &v104;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
          __p[0] = &v107;
          std::vector<std::vector<quasar::Token>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
        }
        if (v15)
          operator delete(v15);
        v15 = v108;
        v14 = v109;
      }
      if ((_QWORD)v111)
      {
        *((_QWORD *)&v111 + 1) = v111;
        operator delete((void *)v111);
      }
      v113 = &unk_1E5D25580;
      v25 = v114;
      if (v114)
      {
        v26 = *(_DWORD *)(v114 + 56) - 1;
        *(_DWORD *)(v114 + 56) = v26;
        if (!v26)
          (*(void (**)(uint64_t))(*(_QWORD *)v25 + 8))(v25);
      }
    }
  }
  kaldi::BeamSearchDecoder::FinalizeDecoding(v17);
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 624) + 72))(*(_QWORD *)(a1 + 624));
  v27 = kaldi::quasar::OnlineLASDecodable::FrameOffset((kaldi::quasar::OnlineLASDecodable *)v115);
  for (i = *a3; ; v27 = LODWORD(i[24].__begin_) + 1)
  {
    LODWORD(i[24].__begin_) = v27;
    IsValidFrame = kaldi::OnlineFeatureMatrix::IsValidFrame(*(int32x2_t **)a2, v27, 1);
    i = *a3;
    if (!IsValidFrame)
      break;
  }
  WORD2(i[24].__begin_) = 257;
  v30 = kaldi::BeamSearchDecoder::ReachedFinal(*(kaldi::BeamSearchDecoder **)(a1 + 632), -1);
  v31 = quasar::gLogLevel < 4 || v30;
  if ((v31 & 1) == 0)
  {
    v101 = 0u;
    v102 = 0u;
    v99 = 0u;
    v100 = 0u;
    v97 = 0u;
    v98 = 0u;
    v95 = 0u;
    v96 = 0u;
    v93 = 0u;
    v94 = 0u;
    v91 = 0u;
    v92 = 0u;
    v89 = 0u;
    v90 = 0u;
    v87 = 0u;
    v88 = 0u;
    *(_OWORD *)__p = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Decoder did not reach end-state, outputting partial traceback.", 62);
    quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)__p);
  }
  _ZNSt3__115allocate_sharedB8ne180100IN3fst9VectorFstINS1_6ArcTplINS1_16LatticeWeightTplIfEEiEENS1_11VectorStateIS6_NS_9allocatorIS6_EEEEEENS8_ISB_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(__p);
  std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100]((uint64_t)&(*a3)[13].__end_, (__int128 *)__p);
  v32 = (std::__shared_weak_count *)__p[1];
  if (__p[1])
  {
    v33 = (unint64_t *)((char *)__p[1] + 8);
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 - 1, v33));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
  }
  if ((kaldi::BeamSearchDecoder::GetRawLattice(*(_QWORD *)(a1 + 632), (uint64_t)(*a3)[13].__end_, -1) & 1) != 0)
  {
    _ZNSt3__115allocate_sharedB8ne180100IN3fst9VectorFstINS1_6ArcTplINS1_23CompactLatticeWeightTplINS1_16LatticeWeightTplIfEEiEEiEENS1_11VectorStateIS8_NS_9allocatorIS8_EEEEEENSA_ISD_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(__p);
    std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100]((uint64_t)&(*a3)[6].__end_, (__int128 *)__p);
    v35 = (std::__shared_weak_count *)__p[1];
    if (__p[1])
    {
      v36 = (unint64_t *)((char *)__p[1] + 8);
      do
        v37 = __ldaxr(v36);
      while (__stlxr(v37 - 1, v36));
      if (!v37)
      {
        ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
        std::__shared_weak_count::__release_weak(v35);
      }
    }
    fst::ConvertLattice<fst::LatticeWeightTpl<float>,int>((uint64_t)(*a3)[13].__end_, (uint64_t)(*a3)[6].__end_, 1);
    kaldi::TopSortCompactLatticeIfNeeded((uint64_t)(*a3)[6].__end_);
    __asm { FMOV            V0.2S, #1.0 }
    (*a3)[21].__begin_ = _D0;
    fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::VectorFst(&v113);
    v43 = (uint64_t)(*a3)[13].__end_;
    v44 = *(unsigned int *)(*(_QWORD *)a4 + 16);
    v85 = vdup_n_s32(0x7F800000u);
    v77 = v15;
    fst::ShortestPath<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>(v43, (uint64_t)&v113, v44, 0, 0, (uint64_t *)&v85, -1, 0);
    __p[0] = 0;
    __p[1] = 0;
    *(_QWORD *)&v87 = 0;
    fst::ConvertNbestToVector<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>((uint64_t)&v113, (uint64_t *)__p);
    v45 = operator new(0x30uLL);
    v45[2] = 0;
    *v45 = &unk_1E5D456D0;
    v45[1] = 0;
    v45[4] = 0;
    v45[5] = 0;
    v45[3] = 0;
    *(_QWORD *)&v111 = v45 + 3;
    *((_QWORD *)&v111 + 1) = v45;
    std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100]((uint64_t)&(*a3)[14].__end_cap_, &v111);
    v46 = (std::__shared_weak_count *)*((_QWORD *)&v111 + 1);
    if (*((_QWORD *)&v111 + 1))
    {
      v47 = (unint64_t *)(*((_QWORD *)&v111 + 1) + 8);
      do
        v48 = __ldaxr(v47);
      while (__stlxr(v48 - 1, v47));
      if (!v48)
      {
        ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
        std::__shared_weak_count::__release_weak(v46);
      }
    }
    v49 = operator new(0x30uLL);
    v49[2] = 0;
    *v49 = &unk_1E5D458C8;
    v49[1] = 0;
    v49[4] = 0;
    v49[5] = 0;
    v49[3] = 0;
    *(_QWORD *)&v111 = v49 + 3;
    *((_QWORD *)&v111 + 1) = v49;
    std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100]((uint64_t)&(*a3)[16].__end_, &v111);
    v50 = (std::__shared_weak_count *)*((_QWORD *)&v111 + 1);
    if (*((_QWORD *)&v111 + 1))
    {
      v51 = (unint64_t *)(*((_QWORD *)&v111 + 1) + 8);
      do
        v52 = __ldaxr(v51);
      while (__stlxr(v52 - 1, v51));
      if (!v52)
      {
        ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
        std::__shared_weak_count::__release_weak(v50);
      }
    }
    v53 = (char *)__p[0];
    for (j = (char *)__p[1]; v53 != j; v53 += 16)
    {
      v112 = 0;
      v108 = 0;
      v109 = 0;
      v110 = 0;
      v111 = 0uLL;
      fst::GetLinearSymbolSequence<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,int>((uint64_t)v53, (uint64_t)&v111, (uint64_t)&v108, &v84, 0);
      v104 = 0;
      v105 = 0;
      v106 = 0;
      memset(&v107, 0, sizeof(v107));
      quasar::SymbolTableList::lookup((uint64_t *)(*a3)[19].__end_cap_.__value_, &v108, (uint64_t *)&v107, (char **)&v104, 1);
      if (*(_QWORD *)(a1 + 600) != *(_QWORD *)(a1 + 592))
      {
        quasar::formatResults((uint64_t *)&v107, v80, v79, *(unsigned __int8 *)(a1 + 616), &v103);
        std::vector<std::string>::__vdeallocate(&v107);
        v107 = v103;
        memset(&v103, 0, sizeof(v103));
        v118[0] = (int32x2_t)&v103;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v118);
      }
      memset(&v103, 0, sizeof(v103));
      begin = v107.__begin_;
      v55 = v107.__end_;
      if (v107.__begin_ != v107.__end_)
      {
        v57 = 0;
        do
        {
          v118[0].i32[0] = 0;
          v83 = 0;
          v82 = 1;
          v81 = 1;
          if ((std::wstring *)v57 >= v103.__end_cap_.__value_)
          {
            v57 = (std::string *)std::vector<quasar::Token>::__emplace_back_slow_path<std::string const&,int,int,int,int,BOOL>((uint64_t *)&v103, (uint64_t)begin, (int *)v118, (int *)&v83 + 1, (int *)&v83, &v82, &v81);
          }
          else
          {
            std::allocator<quasar::Token>::construct[abi:ne180100]<quasar::Token,std::string const&,int,int,int,int,BOOL>((uint64_t)&v103.__end_cap_, v57, (uint64_t)begin, (int *)v118, (int *)&v83 + 1, (int *)&v83, &v82, &v81);
            v57 = (std::string *)((char *)v57 + 224);
          }
          v103.__end_ = (std::vector<std::wstring>::pointer)v57;
          ++begin;
        }
        while (begin != v55);
        if ((std::string *)v103.__begin_ != v57)
          v57[-8].__r_.__value_.__s.__data_[12] = 0;
      }
      std::vector<std::vector<quasar::Token>>::push_back[abi:ne180100]((uint64_t *)(*a3)[14].__end_cap_.__value_, (uint64_t)&v103);
      v58 = (*a3)[16].__end_;
      v59 = *(float *)v84.i32 + *(float *)&v84.i32[1];
      size = (double *)v58->__r_.__value_.__l.__size_;
      v61 = v58->__r_.__value_.__r.__words[2];
      if ((unint64_t)size >= v61)
      {
        v63 = (double *)v58->__r_.__value_.__r.__words[0];
        v64 = (uint64_t)((uint64_t)size - v58->__r_.__value_.__r.__words[0]) >> 3;
        v65 = v64 + 1;
        if ((unint64_t)(v64 + 1) >> 61)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v66 = v61 - (_QWORD)v63;
        if (v66 >> 2 > v65)
          v65 = v66 >> 2;
        if ((unint64_t)v66 >= 0x7FFFFFFFFFFFFFF8)
          v67 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v67 = v65;
        if (v67)
        {
          v68 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)&v58->__r_.__value_.__r.__words[2], v67);
          v63 = (double *)v58->__r_.__value_.__r.__words[0];
          size = (double *)v58->__r_.__value_.__l.__size_;
        }
        else
        {
          v68 = 0;
        }
        v69 = (double *)&v68[8 * v64];
        *v69 = v59;
        v62 = v69 + 1;
        while (size != v63)
        {
          v70 = *((_QWORD *)size-- - 1);
          *((_QWORD *)v69-- - 1) = v70;
        }
        v58->__r_.__value_.__r.__words[0] = (std::wstring::size_type)v69;
        v58->__r_.__value_.__l.__size_ = (std::wstring::size_type)v62;
        v58->__r_.__value_.__r.__words[2] = (std::wstring::size_type)&v68[8 * v67];
        if (v63)
          operator delete(v63);
      }
      else
      {
        *size = v59;
        v62 = size + 1;
      }
      v58->__r_.__value_.__l.__size_ = (std::wstring::size_type)v62;
      v118[0] = (int32x2_t)&v103;
      std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)v118);
      if (v104)
      {
        v105 = v104;
        operator delete(v104);
      }
      v104 = &v107;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v104);
      if (v108)
      {
        v109 = v108;
        operator delete(v108);
      }
      if ((_QWORD)v111)
      {
        *((_QWORD *)&v111 + 1) = v111;
        operator delete((void *)v111);
      }
    }
    *(_QWORD *)&v111 = __p;
    std::vector<fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v111);
    v113 = &unk_1E5D25580;
    v71 = v114;
    if (v114)
    {
      v72 = *(_DWORD *)(v114 + 56) - 1;
      *(_DWORD *)(v114 + 56) = v72;
      if (!v72)
        (*(void (**)(uint64_t))(*(_QWORD *)v71 + 8))(v71);
    }
    v73 = 0;
    v15 = v77;
    if (!v77)
      goto LABEL_102;
LABEL_101:
    operator delete(v15);
    goto LABEL_102;
  }
  if (quasar::gLogLevel >= 4)
  {
    v101 = 0u;
    v102 = 0u;
    v99 = 0u;
    v100 = 0u;
    v97 = 0u;
    v98 = 0u;
    v95 = 0u;
    v96 = 0u;
    v93 = 0u;
    v94 = 0u;
    v91 = 0u;
    v92 = 0u;
    v89 = 0u;
    v90 = 0u;
    v87 = 0u;
    v88 = 0u;
    *(_OWORD *)__p = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Failed to get raw recognition lattice.", 38);
    quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)__p);
  }
  v73 = 2;
  if (v15)
    goto LABEL_101;
LABEL_102:
  kaldi::quasar::OnlineLASDecodable::~OnlineLASDecodable((kaldi::quasar::OnlineLASDecodable *)v115);
  return v73;
}

void sub_1ADC3BDB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  void *v13;
  uint64_t v14;
  va_list va;

  va_start(va, a13);
  quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)va);
  if (v13)
    operator delete(v13);
  kaldi::quasar::OnlineLASDecodable::~OnlineLASDecodable((kaldi::quasar::OnlineLASDecodable *)(v14 - 176));
  _Unwind_Resume(a1);
}

uint64_t quasar::formatResults@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, _QWORD *a5@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  unsigned __int8 *v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unsigned __int8 v19;
  int v20;
  unsigned __int8 *v21;
  uint64_t v22;
  unint64_t v23;
  unsigned __int8 v24;
  uint64_t v25;
  std::string __p;
  void *v28[2];
  unsigned __int8 v29;
  _QWORD v30[2];
  uint64_t v31;
  _QWORD v32[8];
  std::string v33;
  uint64_t v34;

  *a5 = 0;
  a5[1] = 0;
  a5[2] = 0;
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v30);
  v10 = *a1;
  v11 = a1[1];
  if (a4)
  {
    if (*a1 != v11)
    {
      do
      {
        v12 = std::__find_impl[abi:ne180100]<std::string *,std::string *,std::string,std::__identity>(*a2, a2[1], (unsigned __int8 **)v10);
        v13 = a2[1];
        if (quasar::isAscii((uint64_t *)v10) && v12 == v13)
        {
          v14 = *(char *)(v10 + 23);
          if (v14 >= 0)
            v15 = (unsigned __int8 *)v10;
          else
            v15 = *(unsigned __int8 **)v10;
          if (v14 >= 0)
            v16 = *(unsigned __int8 *)(v10 + 23);
          else
            v16 = *(_QWORD *)(v10 + 8);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v31, (uint64_t)v15, v16);
        }
        else
        {
          std::stringbuf::str();
          v17 = v29;
          if ((v29 & 0x80u) != 0)
            v17 = (unint64_t)v28[1];
          if (v17)
            quasar::updateFormattedResults((__int128 *)v28, a3, (uint64_t)a5);
          if (v12 == v13)
            quasar::updateFormattedResults((__int128 *)v10, a3, (uint64_t)a5);
          std::string::basic_string[abi:ne180100]<0>(&__p, "");
          std::string::operator=(&v33, &__p);
          std::stringbuf::__init_buf_ptrs[abi:ne180100]((uint64_t)v32);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
          if ((char)v29 < 0)
            operator delete(v28[0]);
        }
        v10 += 24;
      }
      while (v10 != v11);
    }
  }
  else if (*a1 != v11)
  {
    do
    {
      if (std::__find_impl[abi:ne180100]<std::string *,std::string *,std::string,std::__identity>(*a2, a2[1], (unsigned __int8 **)v10) == a2[1])
      {
        v20 = *(char *)(v10 + 23);
        if (v20 >= 0)
          v21 = (unsigned __int8 *)v10;
        else
          v21 = *(unsigned __int8 **)v10;
        if (v20 >= 0)
          v22 = *(unsigned __int8 *)(v10 + 23);
        else
          v22 = *(_QWORD *)(v10 + 8);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v31, (uint64_t)v21, v22);
      }
      else
      {
        std::stringbuf::str();
        v18 = v29;
        v19 = v29;
        if ((v29 & 0x80u) != 0)
          v18 = (unint64_t)v28[1];
        if (v18)
        {
          quasar::updateFormattedResults((__int128 *)v28, a3, (uint64_t)a5);
          std::string::basic_string[abi:ne180100]<0>(&__p, "");
          std::string::operator=(&v33, &__p);
          std::stringbuf::__init_buf_ptrs[abi:ne180100]((uint64_t)v32);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
          v19 = v29;
        }
        if ((v19 & 0x80) != 0)
          operator delete(v28[0]);
      }
      v10 += 24;
    }
    while (v10 != v11);
  }
  std::stringbuf::str();
  v23 = v29;
  v24 = v29;
  if ((v29 & 0x80u) != 0)
    v23 = (unint64_t)v28[1];
  if (v23)
  {
    quasar::updateFormattedResults((__int128 *)v28, a3, (uint64_t)a5);
    v24 = v29;
  }
  if ((v24 & 0x80) != 0)
    operator delete(v28[0]);
  v30[0] = *MEMORY[0x1E0DE4F50];
  v25 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
  *(_QWORD *)((char *)v30 + *(_QWORD *)(v30[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
  v31 = v25;
  v32[0] = MEMORY[0x1E0DE4FB8] + 16;
  if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v33.__r_.__value_.__l.__data_);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x1AF44D094](&v34);
}

void sub_1ADC3C2B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21)
{
  if (a20 < 0)
    operator delete(__p);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a21);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a21);
  _Unwind_Resume(a1);
}

BOOL quasar::isAscii(uint64_t *a1)
{
  int v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *((char *)a1 + 23);
  if (v1 >= 0)
    v2 = a1;
  else
    v2 = (uint64_t *)*a1;
  if (v1 >= 0)
    v3 = *((unsigned __int8 *)a1 + 23);
  else
    v3 = a1[1];
  if (!v3)
    return 1;
  v4 = 0;
            *((char *)v2 + v4),
            0x5EuLL))
  {
    if (v3 == ++v4)
      return 1;
  }
  return v4 == -1;
}

void quasar::updateFormattedResults(__int128 *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t i;
  unint64_t v6;
  unint64_t v7;
  __int128 v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  std::string *v14;
  std::string *v15;
  __int128 v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  std::__split_buffer<std::string> __v;

  if (*(char *)(a2 + 23) < 0)
  {
    if (*(_QWORD *)(a2 + 8))
      goto LABEL_3;
LABEL_24:
    v17 = *(_QWORD *)(a3 + 8);
    if (v17 >= *(_QWORD *)(a3 + 16))
    {
      v18 = std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)a3, a1);
    }
    else
    {
      std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>(a3, a1);
      v18 = v17 + 24;
    }
    *(_QWORD *)(a3 + 8) = v18;
    return;
  }
  if (!*(_BYTE *)(a2 + 23))
    goto LABEL_24;
LABEL_3:
  v19 = 0;
  v20 = 0;
  v21 = 0;
  kaldi::SplitStringOnString((uint64_t)a1, (char *)a2, &v19);
  v4 = v19;
  for (i = v20; v4 != i; v4 += 24)
  {
    if (*(char *)(v4 + 23) < 0)
    {
      if (*(_QWORD *)(v4 + 8))
      {
LABEL_8:
        v6 = *(_QWORD *)(a3 + 8);
        v7 = *(_QWORD *)(a3 + 16);
        if (v6 >= v7)
        {
          v10 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v6 - *(_QWORD *)a3) >> 3);
          v11 = v10 + 1;
          if (v10 + 1 > 0xAAAAAAAAAAAAAAALL)
            std::vector<int>::__throw_length_error[abi:ne180100]();
          v12 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v7 - *(_QWORD *)a3) >> 3);
          if (2 * v12 > v11)
            v11 = 2 * v12;
          if (v12 >= 0x555555555555555)
            v13 = 0xAAAAAAAAAAAAAAALL;
          else
            v13 = v11;
          __v.__end_cap_.__value_ = (std::allocator<std::string> *)(a3 + 16);
          if (v13)
            v14 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>(a3 + 16, v13);
          else
            v14 = 0;
          v15 = v14 + v10;
          __v.__first_ = v14;
          __v.__begin_ = v15;
          __v.__end_cap_.__value_ = &v14[v13];
          v16 = *(_OWORD *)v4;
          v15->__r_.__value_.__r.__words[2] = *(_QWORD *)(v4 + 16);
          *(_OWORD *)&v15->__r_.__value_.__l.__data_ = v16;
          *(_QWORD *)(v4 + 8) = 0;
          *(_QWORD *)(v4 + 16) = 0;
          *(_QWORD *)v4 = 0;
          __v.__end_ = v15 + 1;
          std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)a3, &__v);
          v9 = *(_QWORD *)(a3 + 8);
          std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::wstring> *)&__v);
        }
        else
        {
          v8 = *(_OWORD *)v4;
          *(_QWORD *)(v6 + 16) = *(_QWORD *)(v4 + 16);
          *(_OWORD *)v6 = v8;
          *(_QWORD *)(v4 + 8) = 0;
          *(_QWORD *)(v4 + 16) = 0;
          *(_QWORD *)v4 = 0;
          v9 = v6 + 24;
          *(_QWORD *)(a3 + 8) = v6 + 24;
        }
        *(_QWORD *)(a3 + 8) = v9;
      }
    }
    else if (*(_BYTE *)(v4 + 23))
    {
      goto LABEL_8;
    }
  }
  __v.__first_ = (std::__split_buffer<std::string>::pointer)&v19;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__v);
}

void sub_1ADC3C580(_Unwind_Exception *a1, char a2, uint64_t a3, uint64_t a4, std::__split_buffer<std::wstring> *a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void **a18)
{
  a18 = (void **)&a10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a18);
  _Unwind_Resume(a1);
}

_EARLanguageDetectorRequestContext *EARLanguageDetectorRequestContextFromPTree(quasar::PTree *a1)
{
  _EARLanguageDetectorRequestContext *v2;
  id v3;
  quasar::PTree *Child;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t String;
  int v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  std::string *v13;
  std::string::size_type v14;
  void *v15;
  unsigned __int16 BoolOptional;
  void *v17;
  uint64_t ChildOptional;
  quasar::PTree *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _OWORD *size;
  __int128 v24;
  std::string::size_type v25;
  void *v26;
  quasar::PTree *v27;
  id v28;
  uint64_t v29;
  uint64_t i;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  quasar::PTree *v36;
  id v37;
  uint64_t v38;
  uint64_t j;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  std::string *v44;
  std::string::size_type v45;
  void *v46;
  std::string *v47;
  std::string::size_type v48;
  void *v49;
  uint64_t v50;
  quasar::PTree *v51;
  id v52;
  uint64_t v53;
  uint64_t k;
  void *v55;
  uint64_t v56;
  uint64_t v57;
  void *v58;
  void *v60[2];
  char v61;
  std::string __p;
  char v63;

  v2 = objc_alloc_init(_EARLanguageDetectorRequestContext);
  v3 = objc_alloc_init(MEMORY[0x1E0C99E20]);
  std::string::basic_string[abi:ne180100]<0>(&__p, "dictation-languages");
  Child = (quasar::PTree *)quasar::PTree::getChild((uint64_t)a1, (__int128 *)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v5 = quasar::PTree::begin(Child);
  v6 = quasar::PTree::end(Child);
  while (v5 != v6)
  {
    v7 = (void *)MEMORY[0x1E0CB3940];
    String = quasar::PTree::getString((quasar::PTree *)(v5 + 24));
    v9 = *(char *)(String + 23);
    if (v9 >= 0)
      v10 = String;
    else
      v10 = *(_QWORD *)String;
    if (v9 >= 0)
      v11 = *(unsigned __int8 *)(String + 23);
    else
      v11 = *(_QWORD *)(String + 8);
    objc_msgSend(v7, "ear_stringWithStringView:", v10, v11);
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "addObject:", v12);

    v5 += 88;
  }
  -[_EARLanguageDetectorRequestContext setDictationLanguages:](v2, "setDictationLanguages:", v3);

  std::string::basic_string[abi:ne180100]<0>(v60, "current-dictation-language");
  quasar::PTree::getStringOptional((uint64_t)a1, (uint64_t)v60, &__p);
  if (v61 < 0)
    operator delete(v60[0]);
  if (v63)
  {
    v13 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
        ? &__p
        : (std::string *)__p.__r_.__value_.__r.__words[0];
    v14 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
        ? HIBYTE(__p.__r_.__value_.__r.__words[2])
        : __p.__r_.__value_.__l.__size_;
    objc_msgSend(MEMORY[0x1E0CB3940], "ear_stringWithStringView:", v13, v14);
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    -[_EARLanguageDetectorRequestContext setCurrentDictationLanguage:](v2, "setCurrentDictationLanguage:", v15);

    if (v63)
    {
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "was-language-toggled");
  BoolOptional = quasar::PTree::getBoolOptional((uint64_t)a1, (uint64_t)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (BoolOptional >= 0x100u)
  {
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", BoolOptional != 0);
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    -[_EARLanguageDetectorRequestContext setWasLanguageToggled:](v2, "setWasLanguageToggled:", v17);

  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "multilingual-keyboard-languages");
  ChildOptional = quasar::PTree::getChildOptional((uint64_t)a1, (uint64_t)&__p);
  v19 = (quasar::PTree *)ChildOptional;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if (!v19)
      goto LABEL_42;
  }
  else if (!ChildOptional)
  {
    goto LABEL_42;
  }
  memset(&__p, 0, sizeof(__p));
  v20 = quasar::PTree::begin(v19);
  v21 = quasar::PTree::end(v19);
  while (v20 != v21)
  {
    v22 = quasar::PTree::getString((quasar::PTree *)(v20 + 24));
    size = (_OWORD *)__p.__r_.__value_.__l.__size_;
    if (__p.__r_.__value_.__l.__size_ >= __p.__r_.__value_.__r.__words[2])
    {
      v25 = std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&__p, (__int128 *)v22);
    }
    else
    {
      if (*(char *)(v22 + 23) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)__p.__r_.__value_.__l.__size_, *(const std::string::value_type **)v22, *(_QWORD *)(v22 + 8));
      }
      else
      {
        v24 = *(_OWORD *)v22;
        *(_QWORD *)(__p.__r_.__value_.__l.__size_ + 16) = *(_QWORD *)(v22 + 16);
        *size = v24;
      }
      v25 = (std::string::size_type)size + 24;
    }
    __p.__r_.__value_.__l.__size_ = v25;
    v20 += 88;
  }
  EARHelpers::NSArrayOfStringFromVectorOfString((__int128 **)&__p);
  v26 = (void *)objc_claimAutoreleasedReturnValue();
  -[_EARLanguageDetectorRequestContext setMultilingualKeyboardLanguages:](v2, "setMultilingualKeyboardLanguages:", v26);

  v60[0] = &__p;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v60);
LABEL_42:
  std::string::basic_string[abi:ne180100]<0>(&__p, "keyboard-convo-language-priors");
  v27 = (quasar::PTree *)quasar::PTree::getChildOptional((uint64_t)a1, (uint64_t)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (v27)
  {
    v28 = objc_alloc_init(MEMORY[0x1E0C99E08]);
    v29 = quasar::PTree::begin(v27);
    for (i = quasar::PTree::end(v27); v29 != i; v29 += 88)
    {
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", quasar::PTree::getDouble((quasar::PTree *)(v29 + 24)));
      v31 = (void *)objc_claimAutoreleasedReturnValue();
      if (*(char *)(v29 + 23) < 0)
      {
        v33 = *(_QWORD *)v29;
        v32 = *(_QWORD *)(v29 + 8);
      }
      else
      {
        v32 = *(unsigned __int8 *)(v29 + 23);
        v33 = v29;
      }
      objc_msgSend(MEMORY[0x1E0CB3940], "ear_stringWithStringView:", v33, v32);
      v34 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v28, "setObject:forKeyedSubscript:", v31, v34);

    }
    -[_EARLanguageDetectorRequestContext setKeyboardConvoLanguagePriors:](v2, "setKeyboardConvoLanguagePriors:", v28);

  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "keyboard-global-language-priors");
  v35 = quasar::PTree::getChildOptional((uint64_t)a1, (uint64_t)&__p);
  v36 = (quasar::PTree *)v35;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if (!v36)
      goto LABEL_61;
  }
  else if (!v35)
  {
    goto LABEL_61;
  }
  v37 = objc_alloc_init(MEMORY[0x1E0C99E08]);
  v38 = quasar::PTree::begin(v36);
  for (j = quasar::PTree::end(v36); v38 != j; v38 += 88)
  {
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", quasar::PTree::getDouble((quasar::PTree *)(v38 + 24)));
    v40 = (void *)objc_claimAutoreleasedReturnValue();
    if (*(char *)(v38 + 23) < 0)
    {
      v42 = *(_QWORD *)v38;
      v41 = *(_QWORD *)(v38 + 8);
    }
    else
    {
      v41 = *(unsigned __int8 *)(v38 + 23);
      v42 = v38;
    }
    objc_msgSend(MEMORY[0x1E0CB3940], "ear_stringWithStringView:", v42, v41);
    v43 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v37, "setObject:forKeyedSubscript:", v40, v43);

  }
  -[_EARLanguageDetectorRequestContext setKeyboardGlobalLanguagePriors:](v2, "setKeyboardGlobalLanguagePriors:", v37);

LABEL_61:
  std::string::basic_string[abi:ne180100]<0>(v60, "previous-message-language");
  quasar::PTree::getStringOptional((uint64_t)a1, (uint64_t)v60, &__p);
  if (v61 < 0)
    operator delete(v60[0]);
  if (v63)
  {
    v44 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
        ? &__p
        : (std::string *)__p.__r_.__value_.__r.__words[0];
    v45 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
        ? HIBYTE(__p.__r_.__value_.__r.__words[2])
        : __p.__r_.__value_.__l.__size_;
    objc_msgSend(MEMORY[0x1E0CB3940], "ear_stringWithStringView:", v44, v45);
    v46 = (void *)objc_claimAutoreleasedReturnValue();
    -[_EARLanguageDetectorRequestContext setPreviousMessageLanguage:](v2, "setPreviousMessageLanguage:", v46);

    if (v63)
    {
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  std::string::basic_string[abi:ne180100]<0>(v60, "global-last-keyboard-used");
  quasar::PTree::getStringOptional((uint64_t)a1, (uint64_t)v60, &__p);
  if (v61 < 0)
    operator delete(v60[0]);
  if (v63)
  {
    v47 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
        ? &__p
        : (std::string *)__p.__r_.__value_.__r.__words[0];
    v48 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
        ? HIBYTE(__p.__r_.__value_.__r.__words[2])
        : __p.__r_.__value_.__l.__size_;
    objc_msgSend(MEMORY[0x1E0CB3940], "ear_stringWithStringView:", v47, v48);
    v49 = (void *)objc_claimAutoreleasedReturnValue();
    -[_EARLanguageDetectorRequestContext setGlobalLastKeyboardUsed:](v2, "setGlobalLastKeyboardUsed:", v49);

    if (v63)
    {
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "dictation-language-priors");
  v50 = quasar::PTree::getChildOptional((uint64_t)a1, (uint64_t)&__p);
  v51 = (quasar::PTree *)v50;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if (!v51)
      return v2;
  }
  else if (!v50)
  {
    return v2;
  }
  v52 = objc_alloc_init(MEMORY[0x1E0C99E08]);
  v53 = quasar::PTree::begin(v51);
  for (k = quasar::PTree::end(v51); v53 != k; v53 += 88)
  {
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", quasar::PTree::getDouble((quasar::PTree *)(v53 + 24)));
    v55 = (void *)objc_claimAutoreleasedReturnValue();
    if (*(char *)(v53 + 23) < 0)
    {
      v57 = *(_QWORD *)v53;
      v56 = *(_QWORD *)(v53 + 8);
    }
    else
    {
      v56 = *(unsigned __int8 *)(v53 + 23);
      v57 = v53;
    }
    objc_msgSend(MEMORY[0x1E0CB3940], "ear_stringWithStringView:", v57, v56);
    v58 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v52, "setObject:forKeyedSubscript:", v55, v58);

  }
  -[_EARLanguageDetectorRequestContext setDictationLanguagePriors:](v2, "setDictationLanguagePriors:", v52);

  return v2;
}

void sub_1ADC3CC74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22)
{
  void *v22;
  void *v23;

  _Unwind_Resume(a1);
}

id EARLanguageDetectorRequestContextFromJson(void *a1)
{
  id v1;
  double v2;
  void *v3;
  __int128 __p;
  uint64_t v6;
  _BYTE v7[64];

  v1 = a1;
  v2 = quasar::PTree::PTree((quasar::PTree *)v7);
  if (v1)
  {
    objc_msgSend(v1, "ear_toString", v2);
  }
  else
  {
    __p = 0uLL;
    v6 = 0;
  }
  quasar::PTree::readJsonFromFile((uint64_t)v7, &__p);
  if (SHIBYTE(v6) < 0)
    operator delete((void *)__p);
  EARLanguageDetectorRequestContextFromPTree((quasar::PTree *)v7);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  quasar::PTree::~PTree((quasar::PTree *)v7);

  return v3;
}

void sub_1ADC3CE8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  void *v16;

  quasar::PTree::~PTree((quasar::PTree *)&a16);

  _Unwind_Resume(a1);
}

id EARLanguageDetectorRequestContextFromJsonStr(void *a1)
{
  id v1;
  double v2;
  void *v3;
  std::string __p;
  _QWORD v6[12];
  char v7;
  uint64_t v8;
  _BYTE v9[64];

  v1 = a1;
  v2 = quasar::PTree::PTree((quasar::PTree *)v9);
  if (v1)
    objc_msgSend(v1, "ear_toString", v2);
  else
    memset(&__p, 0, sizeof(__p));
  std::istringstream::basic_istringstream[abi:ne180100](v6, &__p, 8);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  quasar::PTree::readJson((uint64_t)v9, v6);
  EARLanguageDetectorRequestContextFromPTree((quasar::PTree *)v9);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v6[0] = *MEMORY[0x1E0DE4F58];
  *(_QWORD *)((char *)v6 + *(_QWORD *)(v6[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F58] + 24);
  v6[2] = MEMORY[0x1E0DE4FB8] + 16;
  if (v7 < 0)
    operator delete((void *)v6[10]);
  std::streambuf::~streambuf();
  std::istream::~istream();
  MEMORY[0x1AF44D094](&v8);
  quasar::PTree::~PTree((quasar::PTree *)v9);

  return v3;
}

void sub_1ADC3CFD0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  void *v16;
  uint64_t v17;

  quasar::PTree::~PTree((quasar::PTree *)(v17 - 112));

  _Unwind_Resume(a1);
}

void quasar::ProcessingSink::process(uint64_t a1, const void **a2, uint64_t **a3)
{
  uint64_t **v5;
  uint64_t *v6;
  _QWORD *v7;
  _OWORD v8[17];

  v5 = (uint64_t **)(a1 + 64);
  if (a1 + 72 != std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::find<std::string>(a1 + 64, a2))
  {
    memset(v8, 0, sizeof(v8));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v8);
    v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Multiple values received for graph-output:", 42);
    std::operator<<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v7, (uint64_t)a2);
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v8);
  }
  *(_QWORD *)&v8[0] = a2;
  v6 = std::__tree<std::__value_type<std::string,quasar::ProcessingBlock::ValueType>,std::__map_value_compare<std::string,std::__value_type<std::string,quasar::ProcessingBlock::ValueType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,quasar::ProcessingBlock::ValueType>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v5, a2, (uint64_t)&std::piecewise_construct, (__int128 **)v8)+ 7;
  if (v6 != (uint64_t *)a3)
    std::vector<quasar::TranslationPhraseInternal>::__assign_with_size[abi:ne180100]<quasar::TranslationPhraseInternal*,quasar::TranslationPhraseInternal*>((uint64_t)v6, *a3, a3[1], 0x8F5C28F5C28F5C29 * (a3[1] - *a3));
}

uint64_t quasar::ProcessingSink::getValue(quasar::ProcessingSink *this)
{
  char *v2;
  quasar::ProcessingSink *v3;
  void *__p[2];
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;

  v2 = (char *)this + 64;
  std::string::basic_string[abi:ne180100]<0>(__p, "in");
  v3 = (quasar::ProcessingSink *)std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::find<std::string>((uint64_t)v2, (const void **)__p);
  if (SBYTE7(v6) < 0)
    operator delete(__p[0]);
  if ((quasar::ProcessingSink *)((char *)this + 72) == v3)
  {
    v20 = 0u;
    v21 = 0u;
    v18 = 0u;
    v19 = 0u;
    v16 = 0u;
    v17 = 0u;
    v14 = 0u;
    v15 = 0u;
    v12 = 0u;
    v13 = 0u;
    v10 = 0u;
    v11 = 0u;
    v8 = 0u;
    v9 = 0u;
    v6 = 0u;
    v7 = 0u;
    *(_OWORD *)__p = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(__p, "No value received in graph-output!");
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)__p);
  }
  return (uint64_t)v3 + 56;
}

void sub_1ADC3D1E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t quasar::ProcessingSink::getValueMap(quasar::ProcessingSink *this)
{
  _OWORD v2[17];

  if (!*((_QWORD *)this + 10))
  {
    memset(v2, 0, sizeof(v2));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v2);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v2, "No value received in graph-output!");
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v2);
  }
  return (uint64_t)this + 64;
}

BOOL quasar::ProcessingSink::hasValue(quasar::ProcessingSink *this)
{
  return *((_QWORD *)this + 10) != 0;
}

uint64_t **quasar::ProcessingSink::resetValue(uint64_t **this)
{
  return std::__tree<std::__value_type<std::string,quasar::ProcessingBlock::ValueType>,std::__map_value_compare<std::string,std::__value_type<std::string,quasar::ProcessingBlock::ValueType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,quasar::ProcessingBlock::ValueType>>>::__assign_unique<std::pair<std::string const,quasar::ProcessingBlock::ValueType> const*>(this + 8, 0, 0);
}

uint64_t quasar::ProcessingSink::minConfigVersion(quasar::ProcessingSink *this)
{
  return 35;
}

void quasar::ProcessingSink::~ProcessingSink(quasar::ProcessingSink *this)
{
  *(_QWORD *)this = &off_1E5D35448;
  std::__tree<std::__value_type<std::string,quasar::ProcessingBlock::ValueType>,std::__map_value_compare<std::string,std::__value_type<std::string,quasar::ProcessingBlock::ValueType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,quasar::ProcessingBlock::ValueType>>>::destroy((uint64_t)this + 64, *((_QWORD **)this + 9));
  quasar::ProcessingBlock::~ProcessingBlock((char **)this);
}

{
  *(_QWORD *)this = &off_1E5D35448;
  std::__tree<std::__value_type<std::string,quasar::ProcessingBlock::ValueType>,std::__map_value_compare<std::string,std::__value_type<std::string,quasar::ProcessingBlock::ValueType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,quasar::ProcessingBlock::ValueType>>>::destroy((uint64_t)this + 64, *((_QWORD **)this + 9));
  quasar::ProcessingBlock::~ProcessingBlock((char **)this);
  JUMPOUT(0x1AF44D190);
}

const char *quasar::ProcessingSink::blockType(quasar::ProcessingSink *this)
{
  return "ProcessingSink";
}

uint64_t *std::__tree<std::__value_type<std::string,quasar::ProcessingBlock::ValueType>,std::__map_value_compare<std::string,std::__value_type<std::string,quasar::ProcessingBlock::ValueType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,quasar::ProcessingBlock::ValueType>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t **a1, const void **a2, uint64_t a3, __int128 **a4)
{
  uint64_t **v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t *v10[3];
  uint64_t v11;

  v6 = (uint64_t **)std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__find_equal<std::string>((uint64_t)a1, &v11, a2);
  v7 = *v6;
  if (!*v6)
  {
    v8 = v6;
    std::__tree<std::__value_type<std::string,quasar::ProcessingBlock::ValueType>,std::__map_value_compare<std::string,std::__value_type<std::string,quasar::ProcessingBlock::ValueType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,quasar::ProcessingBlock::ValueType>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)a1, a4, (uint64_t)v10);
    std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at(a1, v11, v8, v10[0]);
    v7 = v10[0];
    v10[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,quasar::ProcessingBlock::ValueType>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,quasar::ProcessingBlock::ValueType>,void *>>>>::reset[abi:ne180100]((uint64_t)v10, 0);
  }
  return v7;
}

void std::__tree<std::__value_type<std::string,quasar::ProcessingBlock::ValueType>,std::__map_value_compare<std::string,std::__value_type<std::string,quasar::ProcessingBlock::ValueType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,quasar::ProcessingBlock::ValueType>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1@<X0>, __int128 **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5;
  _QWORD *v6;
  std::string *v7;
  __int128 *v8;
  __int128 v9;

  v5 = a1 + 8;
  v6 = operator new(0x50uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  v7 = (std::string *)(v6 + 4);
  v8 = *a2;
  if (*((char *)*a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)v8, *((_QWORD *)v8 + 1));
  }
  else
  {
    v9 = *v8;
    v6[6] = *((_QWORD *)v8 + 2);
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v9;
  }
  v6[7] = 0;
  v6[8] = 0;
  v6[9] = 0;
  *(_BYTE *)(a3 + 16) = 1;
}

void sub_1ADC3D45C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__tree_node<std::__value_type<std::string,quasar::ProcessingBlock::ValueType>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,quasar::ProcessingBlock::ValueType>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

uint64_t **std::__tree<std::__value_type<std::string,quasar::ProcessingBlock::ValueType>,std::__map_value_compare<std::string,std::__value_type<std::string,quasar::ProcessingBlock::ValueType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,quasar::ProcessingBlock::ValueType>>>::__assign_unique<std::pair<std::string const,quasar::ProcessingBlock::ValueType> const*>(uint64_t **result, const void **a2, const void **a3)
{
  uint64_t **v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  char v9;
  uint64_t **v10;
  uint64_t *v11;
  uint64_t *v12;

  v5 = result;
  if (result[2])
  {
    v6 = *result;
    v7 = result[1];
    *result = (uint64_t *)(result + 1);
    v7[2] = 0;
    result[1] = 0;
    result[2] = 0;
    if (v6[1])
      v8 = (uint64_t *)v6[1];
    else
      v8 = v6;
    v10 = result;
    v11 = v8;
    v12 = v8;
    if (v8)
    {
      v11 = std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::_DetachedTreeCache::__detach_next((uint64_t)v8);
      while (a2 != a3)
      {
        std::__tree<std::__value_type<std::string,quasar::ProcessingBlock::ValueType>,std::__map_value_compare<std::string,std::__value_type<std::string,quasar::ProcessingBlock::ValueType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,quasar::ProcessingBlock::ValueType>>>::__node_assign_unique(v5, a2, v8);
        if ((v9 & 1) != 0)
        {
          v8 = v11;
          v12 = v11;
          if (!v11)
          {
            a2 += 6;
            break;
          }
          v11 = std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::_DetachedTreeCache::__detach_next((uint64_t)v11);
        }
        else
        {
          v8 = v12;
        }
        a2 += 6;
        if (!v8)
          break;
      }
    }
    result = (uint64_t **)std::__tree<std::__value_type<std::string,quasar::ProcessingBlock::ValueType>,std::__map_value_compare<std::string,std::__value_type<std::string,quasar::ProcessingBlock::ValueType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,quasar::ProcessingBlock::ValueType>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)&v10);
  }
  while (a2 != a3)
  {
    result = (uint64_t **)std::__tree<std::__value_type<std::string,quasar::ProcessingBlock::ValueType>,std::__map_value_compare<std::string,std::__value_type<std::string,quasar::ProcessingBlock::ValueType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,quasar::ProcessingBlock::ValueType>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,quasar::ProcessingBlock::ValueType> const&>(v5, a2, (__int128 *)a2);
    a2 += 6;
  }
  return result;
}

void sub_1ADC3D564(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__tree<std::__value_type<std::string,quasar::ProcessingBlock::ValueType>,std::__map_value_compare<std::string,std::__value_type<std::string,quasar::ProcessingBlock::ValueType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,quasar::ProcessingBlock::ValueType>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<std::__value_type<std::string,quasar::ProcessingBlock::ValueType>,std::__map_value_compare<std::string,std::__value_type<std::string,quasar::ProcessingBlock::ValueType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,quasar::ProcessingBlock::ValueType>>>::__node_assign_unique(uint64_t **a1, const void **a2, uint64_t *a3)
{
  uint64_t **v6;
  uint64_t **v7;
  uint64_t v9;
  _QWORD v10[2];

  v6 = (uint64_t **)std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__find_equal<std::string>((uint64_t)a1, &v9, a2);
  if (*v6)
    return *v6;
  v7 = v6;
  v10[0] = a3 + 4;
  v10[1] = a3 + 7;
  std::pair<std::string &,quasar::ProcessingBlock::ValueType &>::operator=[abi:ne180100]<std::string const,quasar::ProcessingBlock::ValueType,(void *)0>((uint64_t)v10, (uint64_t)a2);
  std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at(a1, v9, v7, a3);
  return a3;
}

uint64_t std::pair<std::string &,quasar::ProcessingBlock::ValueType &>::operator=[abi:ne180100]<std::string const,quasar::ProcessingBlock::ValueType,(void *)0>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  std::string::operator=(*(std::string **)a1, (const std::string *)a2);
  v4 = *(_QWORD *)(a1 + 8);
  if (v4 != a2 + 24)
    std::vector<quasar::TranslationPhraseInternal>::__assign_with_size[abi:ne180100]<quasar::TranslationPhraseInternal*,quasar::TranslationPhraseInternal*>(v4, *(uint64_t **)(a2 + 24), *(uint64_t **)(a2 + 32), 0x8F5C28F5C28F5C29 * ((uint64_t)(*(_QWORD *)(a2 + 32) - *(_QWORD *)(a2 + 24)) >> 3));
  return a1;
}

uint64_t std::__tree<std::__value_type<std::string,quasar::ProcessingBlock::ValueType>,std::__map_value_compare<std::string,std::__value_type<std::string,quasar::ProcessingBlock::ValueType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,quasar::ProcessingBlock::ValueType>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100](uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;

  std::__tree<std::__value_type<std::string,quasar::ProcessingBlock::ValueType>,std::__map_value_compare<std::string,std::__value_type<std::string,quasar::ProcessingBlock::ValueType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,quasar::ProcessingBlock::ValueType>>>::destroy(*(_QWORD *)a1, *(_QWORD **)(a1 + 16));
  v2 = *(_QWORD **)(a1 + 8);
  if (v2)
  {
    v3 = (_QWORD *)v2[2];
    if (v3)
    {
      do
      {
        v2 = v3;
        v3 = (_QWORD *)v3[2];
      }
      while (v3);
      *(_QWORD *)(a1 + 8) = v2;
    }
    std::__tree<std::__value_type<std::string,quasar::ProcessingBlock::ValueType>,std::__map_value_compare<std::string,std::__value_type<std::string,quasar::ProcessingBlock::ValueType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,quasar::ProcessingBlock::ValueType>>>::destroy(*(_QWORD *)a1, v2);
  }
  return a1;
}

uint64_t *std::__tree<std::__value_type<std::string,quasar::ProcessingBlock::ValueType>,std::__map_value_compare<std::string,std::__value_type<std::string,quasar::ProcessingBlock::ValueType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,quasar::ProcessingBlock::ValueType>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,quasar::ProcessingBlock::ValueType> const&>(uint64_t **a1, const void **a2, __int128 *a3)
{
  uint64_t **v5;
  uint64_t *v6;
  uint64_t **v7;
  uint64_t *v9[3];
  uint64_t v10;

  v5 = (uint64_t **)std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__find_equal<std::string>((uint64_t)a1, &v10, a2);
  v6 = *v5;
  if (!*v5)
  {
    v7 = v5;
    std::__tree<std::__value_type<std::string,quasar::ProcessingBlock::ValueType>,std::__map_value_compare<std::string,std::__value_type<std::string,quasar::ProcessingBlock::ValueType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,quasar::ProcessingBlock::ValueType>>>::__construct_node<std::pair<std::string const,quasar::ProcessingBlock::ValueType> const&>((uint64_t)a1, a3, (uint64_t)v9);
    std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at(a1, v10, v7, v9[0]);
    v6 = v9[0];
    v9[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,quasar::ProcessingBlock::ValueType>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,quasar::ProcessingBlock::ValueType>,void *>>>>::reset[abi:ne180100]((uint64_t)v9, 0);
  }
  return v6;
}

uint64_t quasar::SpeechRequestData::getRefTranscriptForErrorBlaming(quasar::SpeechRequestData *this)
{
  return *((_QWORD *)this + 3) + 176;
}

uint64_t quasar::SpeechRequestData::isNnetEndpointingEnabled(quasar::SpeechRequestData *this)
{
  return *(unsigned __int8 *)(*((_QWORD *)this + 3) + 33);
}

uint64_t quasar::SpeechRequestData::getRecogRequestTimer@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(this + 208);
  *a2 = *(_QWORD *)(this + 200);
  a2[1] = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return this;
}

uint64_t quasar::SpeechRequestData::getLocation(quasar::SpeechRequestData *this)
{
  return *((_QWORD *)this + 3) + 16;
}

uint64_t quasar::SpeechRequestData::getLmeDataStreams(quasar::SpeechRequestData *this)
{
  return (uint64_t)this + 160;
}

uint64_t quasar::SpeechRequestData::getMultiChainMultiAudioBuffer(quasar::SpeechRequestData *this)
{
  return (uint64_t)this + 128;
}

uint64_t quasar::SpeechRequestData::getMultiBuffer(quasar::SpeechRequestData *this)
{
  return (uint64_t)this + 144;
}

uint64_t quasar::SpeechRequestData::isUtteranceDetectionEnabled(quasar::SpeechRequestData *this)
{
  return *(unsigned __int8 *)(*((_QWORD *)this + 3) + 36);
}

uint64_t quasar::SpeechRequestData::isLoadLmeProfile(quasar::SpeechRequestData *this)
{
  return *((unsigned __int8 *)this + 217);
}

uint64_t quasar::SpeechRequestData::isEndPointCandidateEnabled(quasar::SpeechRequestData *this)
{
  return *(unsigned __int8 *)(*((_QWORD *)this + 3) + 38);
}

uint64_t quasar::SpeechRequestData::isUtteranceConcatenationEnabled(quasar::SpeechRequestData *this)
{
  return *(unsigned __int8 *)(*((_QWORD *)this + 3) + 37);
}

uint64_t quasar::SpeechRequestData::getEndpointStartMs(quasar::SpeechRequestData *this)
{
  return *(_QWORD *)(*((_QWORD *)this + 3) + 40);
}

uint64_t quasar::SpeechRequestData::getEndPointerExtraDelay(quasar::SpeechRequestData *this)
{
  return *(unsigned __int8 *)(*((_QWORD *)this + 3) + 50);
}

void quasar::SpeechRequestData::getLeftContext(quasar::SpeechRequestData *this@<X0>, std::string *a2@<X8>)
{
  quasar::LeftContext::getLeftContextForLM((__int128 **)(*((_QWORD *)this + 3) + 368), a2);
}

void quasar::SpeechRequestData::getLeftContextForDecoder(quasar::SpeechRequestData *this@<X0>, uint64_t *a2@<X8>)
{
  quasar::LeftContext::getLeftContextForDecoder((const void ***)(*((_QWORD *)this + 3) + 368), a2);
}

BOOL quasar::SpeechRequestData::isRequestEagerResultDurationEmpty(std::mutex *this)
{
  std::mutex *v2;
  _BOOL8 v3;

  v2 = this + 1;
  std::mutex::lock(this + 1);
  v3 = *(_QWORD *)&this->__m_.__opaque[32] == *(_QWORD *)&this->__m_.__opaque[40];
  std::mutex::unlock(v2);
  return v3;
}

BOOL quasar::SpeechRequestData::processedRequestEagerResultDuration(std::mutex *this, int a2)
{
  std::mutex *v4;
  char *v5;
  char *v6;
  _BOOL8 v7;
  char *v8;
  int64_t v9;

  v4 = this + 1;
  std::mutex::lock(this + 1);
  v6 = *(char **)&this->__m_.__opaque[32];
  v5 = *(char **)&this->__m_.__opaque[40];
  if (v6 == v5)
  {
    v7 = 0;
  }
  else
  {
    v7 = *(_DWORD *)v6 <= a2;
    if (*(_DWORD *)v6 <= a2)
    {
      v8 = *(char **)&this->__m_.__opaque[32];
      do
      {
        v9 = v5 - (v6 + 4);
        if (v5 != v6 + 4)
        {
          memmove(v6, v6 + 4, v5 - (v6 + 4));
          v8 = *(char **)&this->__m_.__opaque[32];
        }
        v5 = &v6[v9];
        *(_QWORD *)&this->__m_.__opaque[40] = &v6[v9];
        if (v8 == &v6[v9])
          break;
        v6 = v8;
      }
      while (*(_DWORD *)v8 <= a2);
    }
  }
  std::mutex::unlock(v4);
  return v7;
}

void quasar::SpeechRequestData::addRequestEagerResultDurations(std::mutex *this, int a2)
{
  std::mutex *v4;
  unint64_t v5;
  char *v6;
  _DWORD *v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  int v16;

  v4 = this + 1;
  std::mutex::lock(this + 1);
  v5 = *(_QWORD *)&this->__m_.__opaque[48];
  v6 = *(char **)&this->__m_.__opaque[40];
  if ((unint64_t)v6 >= v5)
  {
    v8 = *(char **)&this->__m_.__opaque[32];
    v9 = (v6 - v8) >> 2;
    if ((unint64_t)(v9 + 1) >> 62)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v10 = v5 - (_QWORD)v8;
    v11 = (uint64_t)(v5 - (_QWORD)v8) >> 1;
    if (v11 <= v9 + 1)
      v11 = v9 + 1;
    if (v10 >= 0x7FFFFFFFFFFFFFFCLL)
      v12 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v12 = v11;
    if (v12)
    {
      v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&this->__m_.__opaque[48], v12);
      v8 = *(char **)&this->__m_.__opaque[32];
      v6 = *(char **)&this->__m_.__opaque[40];
    }
    else
    {
      v13 = 0;
    }
    v14 = &v13[4 * v9];
    v15 = &v13[4 * v12];
    *(_DWORD *)v14 = a2;
    v7 = v14 + 4;
    while (v6 != v8)
    {
      v16 = *((_DWORD *)v6 - 1);
      v6 -= 4;
      *((_DWORD *)v14 - 1) = v16;
      v14 -= 4;
    }
    *(_QWORD *)&this->__m_.__opaque[32] = v14;
    *(_QWORD *)&this->__m_.__opaque[40] = v7;
    *(_QWORD *)&this->__m_.__opaque[48] = v15;
    if (v8)
      operator delete(v8);
  }
  else
  {
    *(_DWORD *)v6 = a2;
    v7 = v6 + 4;
  }
  *(_QWORD *)&this->__m_.__opaque[40] = v7;
  std::mutex::unlock(v4);
}

void sub_1ADC3D9E4(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t quasar::SpeechRequestData::getInputOrigin(quasar::SpeechRequestData *this)
{
  return *((_QWORD *)this + 3) + 224;
}

void quasar::SpeechRequestData::getLeftContextForItn(quasar::SpeechRequestData *this@<X0>, std::string *a2@<X8>)
{
  quasar::LeftContext::getLeftContextForItn((__int128 **)(*((_QWORD *)this + 3) + 368), a2);
}

uint64_t quasar::SpeechRequestData::getRegionId(quasar::SpeechRequestData *this)
{
  return *((_QWORD *)this + 3) + 248;
}

uint64_t quasar::SpeechRequestData::getDeviceId(quasar::SpeechRequestData *this)
{
  return *((_QWORD *)this + 3) + 152;
}

void quasar::SpeechRequestData::updateInterUtteranceLeftContext(uint64_t a1, __int128 **a2, unint64_t a3)
{
  quasar::LeftContext::updateInterUtteranceLeftContext(*(_QWORD *)(a1 + 24) + 368, a2, a3);
}

void quasar::SpeechRequestData::getRightContextForItn(quasar::SpeechRequestData *this@<X0>, std::string *a2@<X8>)
{
  quasar::RightContext::getRightContextForItn((__int128 **)(*((_QWORD *)this + 3) + 536), a2);
}

uint64_t quasar::SpeechRequestData::SpeechRequestData(uint64_t a1, _QWORD *a2, _QWORD *a3, _QWORD *a4, _QWORD **a5, _OWORD *a6, _QWORD *a7, char a8, char a9, unint64_t a10)
{
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  __int128 *v27[3];
  __int128 **v28;

  *(_QWORD *)(a1 + 24) = *a2;
  v14 = a2[1];
  *(_QWORD *)(a1 + 32) = v14;
  if (v14)
  {
    v15 = (unint64_t *)(v14 + 8);
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 128) = *a3;
  *(_QWORD *)(a1 + 64) = 850045863;
  v17 = a3[1];
  *(_QWORD *)(a1 + 136) = v17;
  if (v17)
  {
    v18 = (unint64_t *)(v17 + 8);
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 1, v18));
  }
  *(_QWORD *)(a1 + 144) = *a4;
  v20 = a4[1];
  *(_QWORD *)(a1 + 152) = v20;
  if (v20)
  {
    v21 = (unint64_t *)(v20 + 8);
    do
      v22 = __ldxr(v21);
    while (__stxr(v22 + 1, v21));
  }
  *(_QWORD *)(a1 + 160) = 0;
  *(_QWORD *)(a1 + 168) = 0;
  *(_QWORD *)(a1 + 176) = 0;
  std::vector<std::shared_ptr<quasar::LmeContainer>>::__init_with_size[abi:ne180100]<std::shared_ptr<quasar::LmeContainer>*,std::shared_ptr<quasar::LmeContainer>*>((char *)(a1 + 160), *a5, a5[1], ((char *)a5[1] - (char *)*a5) >> 4);
  *(_OWORD *)(a1 + 184) = *a6;
  *(_QWORD *)(a1 + 200) = *a7;
  v23 = a7[1];
  *(_QWORD *)(a1 + 208) = v23;
  if (v23)
  {
    v24 = (unint64_t *)(v23 + 8);
    do
      v25 = __ldxr(v24);
    while (__stxr(v25 + 1, v24));
  }
  *(_BYTE *)(a1 + 216) = a8;
  *(_BYTE *)(a1 + 217) = a9;
  memset(v27, 0, sizeof(v27));
  quasar::LeftContext::updateInterUtteranceLeftContext(*(_QWORD *)(a1 + 24) + 368, v27, a10);
  v28 = v27;
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&v28);
  return a1;
}

{
  return quasar::SpeechRequestData::SpeechRequestData(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10);
}

void sub_1ADC3DBD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, uint64_t a11, void **a12)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  std::mutex *v15;
  uint64_t v16;
  uint64_t v17;
  void **v18;
  void *v20;

  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100](&a12);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](v17);
  std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100](&a9);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](v16);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](v14);
  std::mutex::~mutex(v15);
  v20 = *v18;
  if (*v18)
  {
    *(_QWORD *)(v12 + 48) = v20;
    operator delete(v20);
  }
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](v13);
  _Unwind_Resume(a1);
}

uint64_t quasar::SpeechRequestData::SpeechRequestData(uint64_t a1, uint64_t *a2, _QWORD **a3, char a4)
{
  int v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;

  v7 = *(_DWORD *)(*a2 + 16);
  v8 = *(_QWORD *)(*a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(*a2 + 24);
  *(_DWORD *)(a1 + 16) = v7;
  *(_QWORD *)(a1 + 32) = v8;
  if (v8)
  {
    v9 = (unint64_t *)(v8 + 8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_QWORD *)(a1 + 120) = 0;
  v11 = *a2;
  v12 = *(_QWORD *)(*a2 + 136);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(*a2 + 128);
  *(_QWORD *)(a1 + 64) = 850045863;
  *(_QWORD *)(a1 + 136) = v12;
  if (v12)
  {
    v13 = (unint64_t *)(v12 + 8);
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
    v11 = *a2;
  }
  v16 = *(_QWORD *)(v11 + 144);
  v15 = *(_QWORD *)(v11 + 152);
  *(_QWORD *)(a1 + 144) = v16;
  *(_QWORD *)(a1 + 152) = v15;
  if (v15)
  {
    v17 = (unint64_t *)(v15 + 8);
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
  }
  *(_QWORD *)(a1 + 160) = 0;
  *(_QWORD *)(a1 + 168) = 0;
  *(_QWORD *)(a1 + 176) = 0;
  std::vector<std::shared_ptr<quasar::LmeContainer>>::__init_with_size[abi:ne180100]<std::shared_ptr<quasar::LmeContainer>*,std::shared_ptr<quasar::LmeContainer>*>((char *)(a1 + 160), *a3, a3[1], ((char *)a3[1] - (char *)*a3) >> 4);
  *(_OWORD *)(a1 + 184) = *(_OWORD *)(*a2 + 184);
  v19 = *a2;
  v20 = *(_QWORD *)(*a2 + 208);
  *(_QWORD *)(a1 + 200) = *(_QWORD *)(*a2 + 200);
  *(_QWORD *)(a1 + 208) = v20;
  if (v20)
  {
    v21 = (unint64_t *)(v20 + 8);
    do
      v22 = __ldxr(v21);
    while (__stxr(v22 + 1, v21));
    v19 = *a2;
  }
  *(_BYTE *)(a1 + 216) = *(_BYTE *)(v19 + 216);
  *(_BYTE *)(a1 + 217) = a4;
  return a1;
}

void sub_1ADC3DDA0(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  std::mutex *v4;
  uint64_t v5;
  void **v6;
  void *v8;

  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](v5);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](v3);
  std::mutex::~mutex(v4);
  v8 = *v6;
  if (*v6)
  {
    *(_QWORD *)(v1 + 48) = v8;
    operator delete(v8);
  }
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](v2);
  _Unwind_Resume(a1);
}

void quasar::SpeechRequestData::~SpeechRequestData(std::mutex *this)
{
  void *v2;
  void **v3;

  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this[3].__m_.__opaque);
  v3 = (void **)&this[2].__m_.__opaque[24];
  std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100](&v3);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&this[2].__m_.__opaque[8]);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&this[2]);
  std::mutex::~mutex(this + 1);
  v2 = *(void **)&this->__m_.__opaque[32];
  if (v2)
  {
    *(_QWORD *)&this->__m_.__opaque[40] = v2;
    operator delete(v2);
  }
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&this->__m_.__opaque[16]);
}

double quasar::SpeechRequestData::makeSpeechRequestData@<D0>(uint64_t *a1@<X0>, _QWORD **a2@<X1>, char a3@<W2>, _OWORD *a4@<X8>)
{
  double result;
  double v6[3];
  char v7;

  v7 = a3;
  std::allocate_shared[abi:ne180100]<quasar::ConcreteSpeechRequestData,std::allocator<quasar::ConcreteSpeechRequestData>,std::shared_ptr<quasar::SpeechRequestData> const&,std::vector<std::shared_ptr<quasar::LmeContainer>> const&,BOOL const&,void>(a1, a2, &v7, v6);
  result = v6[0];
  *a4 = *(_OWORD *)v6;
  return result;
}

_QWORD *std::allocate_shared[abi:ne180100]<quasar::ConcreteSpeechRequestData,std::allocator<quasar::ConcreteSpeechRequestData>,std::shared_ptr<quasar::SpeechRequestData> const&,std::vector<std::shared_ptr<quasar::LmeContainer>> const&,BOOL const&,void>@<X0>(uint64_t *a1@<X1>, _QWORD **a2@<X2>, char *a3@<X3>, _QWORD *a4@<X8>)
{
  _QWORD *v8;
  _QWORD *result;

  v8 = operator new(0xF8uLL);
  result = std::__shared_ptr_emplace<quasar::ConcreteSpeechRequestData>::__shared_ptr_emplace[abi:ne180100]<std::shared_ptr<quasar::SpeechRequestData> const&,std::vector<std::shared_ptr<quasar::LmeContainer>> const&,BOOL const&,std::allocator<quasar::ConcreteSpeechRequestData>,0>(v8, a1, a2, a3);
  *a4 = v8 + 3;
  a4[1] = v8;
  return result;
}

void sub_1ADC3DEF8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<quasar::ConcreteSpeechRequestData>::__shared_ptr_emplace[abi:ne180100]<std::shared_ptr<quasar::SpeechRequestData> const&,std::vector<std::shared_ptr<quasar::LmeContainer>> const&,BOOL const&,std::allocator<quasar::ConcreteSpeechRequestData>,0>(_QWORD *a1, uint64_t *a2, _QWORD **a3, char *a4)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1E5D442E8;
  quasar::SpeechRequestData::SpeechRequestData((uint64_t)(a1 + 3), a2, a3, *a4);
  return a1;
}

void sub_1ADC3DF48(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<quasar::ConcreteSpeechRequestData>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D442E8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<quasar::ConcreteSpeechRequestData>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D442E8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF44D190);
}

void std::__shared_ptr_emplace<quasar::ConcreteSpeechRequestData>::__on_zero_shared(uint64_t a1)
{
  quasar::SpeechRequestData::~SpeechRequestData((std::mutex *)(a1 + 24));
}

std::string *quasar::BitmapRegion::BitmapRegion(std::string *this, __int128 *a2)
{
  __int128 v3;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v3 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v3;
  }
  LODWORD(this[1].__r_.__value_.__l.__data_) = 0;
  return this;
}

void quasar::BitmapRegion::loadAndEraseFromJson(quasar::BitmapRegion *this, quasar::PTree *a2)
{
  int v4;
  quasar::BitmapRegion *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  int v9;
  quasar::BitmapRegion *v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  int v17;
  quasar::BitmapRegion *v18;
  uint64_t v19;
  _QWORD *v20;
  void *__p[2];
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;

  std::string::basic_string[abi:ne180100]<0>(__p, "bitmap-color");
  *((_DWORD *)this + 6) = quasar::PTree::getAndEraseInt<int>((uint64_t)a2, (__int128 *)__p);
  if (SBYTE7(v22) < 0)
    operator delete(__p[0]);
  v4 = *((char *)this + 23);
  if (v4 < 0)
  {
    if (*((_QWORD *)this + 1) != 8)
    {
LABEL_9:
      if (*((int *)this + 6) > 0)
        return;
      v36 = 0u;
      v37 = 0u;
      v34 = 0u;
      v35 = 0u;
      v32 = 0u;
      v33 = 0u;
      v30 = 0u;
      v31 = 0u;
      v28 = 0u;
      v29 = 0u;
      v26 = 0u;
      v27 = 0u;
      v24 = 0u;
      v25 = 0u;
      v22 = 0u;
      v23 = 0u;
      *(_OWORD *)__p = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
      v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"The value of the ", 17);
      v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"bitmap-color", 12);
      v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)" in region ", 11);
      v17 = *((char *)this + 23);
      if (v17 >= 0)
        v18 = this;
      else
        v18 = *(quasar::BitmapRegion **)this;
      if (v17 >= 0)
        v19 = *((unsigned __int8 *)this + 23);
      else
        v19 = *((_QWORD *)this + 1);
      v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)v18, v19);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)" has to be a positive integer but is ", 37);
      std::ostream::operator<<();
LABEL_26:
      quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)__p);
    }
    v5 = *(quasar::BitmapRegion **)this;
  }
  else
  {
    v5 = this;
    if (v4 != 8)
      goto LABEL_9;
  }
  if (*(_QWORD *)v5 != 0x6D6C72657473616DLL)
    goto LABEL_9;
  if (*((_DWORD *)this + 6))
  {
    v36 = 0u;
    v37 = 0u;
    v34 = 0u;
    v35 = 0u;
    v32 = 0u;
    v33 = 0u;
    v30 = 0u;
    v31 = 0u;
    v28 = 0u;
    v29 = 0u;
    v26 = 0u;
    v27 = 0u;
    v24 = 0u;
    v25 = 0u;
    v22 = 0u;
    v23 = 0u;
    *(_OWORD *)__p = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"The value of the ", 17);
    v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"bitmap-color", 12);
    v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)" in region ", 11);
    v9 = *((char *)this + 23);
    if (v9 >= 0)
      v10 = this;
    else
      v10 = *(quasar::BitmapRegion **)this;
    if (v9 >= 0)
      v11 = *((unsigned __int8 *)this + 23);
    else
      v11 = *((_QWORD *)this + 1);
    v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)v10, v11);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)" has to be ", 11);
    v13 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)" but is ", 8);
    std::ostream::operator<<();
    goto LABEL_26;
  }
}

void sub_1ADC3E220(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL quasar::BitmapRegion::shouldLoad(quasar::BitmapRegion *this, const quasar::PTree *a2)
{
  uint64_t ChildOptional;
  void *__p[2];
  char v6;

  std::string::basic_string[abi:ne180100]<0>(__p, "bitmap-color");
  ChildOptional = quasar::PTree::getChildOptional((uint64_t)this, (uint64_t)__p);
  if (v6 < 0)
    operator delete(__p[0]);
  return ChildOptional != 0;
}

void sub_1ADC3E298(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *quasar::RomanizerOptions::options@<X0>(quasar::RomanizerOptions *this@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *result;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  result = operator new(0x38uLL);
  a2[1] = result + 7;
  a2[2] = result + 7;
  *result = (char *)this + 16;
  result[1] = (char *)this + 176;
  result[2] = (char *)this + 336;
  result[3] = (char *)this + 480;
  result[4] = (char *)this + 624;
  result[5] = (char *)this + 768;
  result[6] = (char *)this + 912;
  *a2 = result;
  return result;
}

void quasar::RomanizerBlock::getPronunciator(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, unsigned __int8 a4@<W3>, int a5@<W4>, kaldi::quasar::TorchEncoderDecoder **a6@<X8>)
{
  unsigned __int8 v10;
  uint64_t **v11;
  char *v12;
  std::__shared_weak_count *v13;
  std::__shared_weak_count *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  kaldi::quasar::TorchEncoderDecoder *v19;
  uint64_t **v20;
  char *v21;
  kaldi::quasar::TorchEncoderDecoder *v22;
  kaldi::quasar::TorchEncoderDecoder *v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  _QWORD *v27;
  void *v28[2];
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  unsigned __int8 v45;
  char v46;
  void **v47;

  v46 = a3;
  v45 = a4;
  if ((v10 & 1) == 0
  {
    v27 = (_QWORD *)operator new();
    v27[2] = 0;
    v27[1] = 0;
    *v27 = v27 + 1;
    quasar::RomanizerBlock::getPronunciator(std::string const&,std::string const&,BOOL,BOOL,BOOL)::pronunciatorMap = (uint64_t)v27;
  }
  if (!a5)
    goto LABEL_12;
  v11 = (uint64_t **)quasar::RomanizerBlock::getPronunciator(std::string const&,std::string const&,BOOL,BOOL,BOOL)::pronunciatorMap;
  _ZNSt3__112__tuple_implINS_15__tuple_indicesIJLm0ELm1ELm2ELm3EEEEJNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEES8_bbEEC2B8ne180100IJLm0ELm1ELm2ELm3EEJS8_S8_bbEJEJEJRKS8_SC_RbSD_EEENS1_IJXspT_EEEENS_13__tuple_typesIJDpT0_EEENS1_IJXspT1_EEEENSF_IJDpT2_EEEDpOT3_((std::string *)v28, (__int128 *)a1, (__int128 *)a2, &v46, (std::string::value_type *)&v45);
  v47 = v28;
  v12 = std::__tree<std::__value_type<std::tuple<std::string,std::string,BOOL,BOOL>,std::weak_ptr<kaldi::quasar::NNMTTransliterator>>,std::__map_value_compare<std::tuple<std::string,std::string,BOOL,BOOL>,std::__value_type<std::tuple<std::string,std::string,BOOL,BOOL>,std::weak_ptr<kaldi::quasar::NNMTTransliterator>>,std::less<std::tuple<std::string,std::string,BOOL,BOOL>>,true>,std::allocator<std::__value_type<std::tuple<std::string,std::string,BOOL,BOOL>,std::weak_ptr<kaldi::quasar::NNMTTransliterator>>>>::__emplace_unique_key_args<std::tuple<std::string,std::string,BOOL,BOOL>,std::piecewise_construct_t const&,std::tuple<std::tuple<std::string,std::string,BOOL,BOOL>&&>,std::tuple<>>(v11, (uint64_t)v28, (uint64_t)&std::piecewise_construct, (__int128 **)&v47);
  *a6 = 0;
  a6[1] = 0;
  v13 = (std::__shared_weak_count *)*((_QWORD *)v12 + 12);
  if (v13)
  {
    v14 = std::__shared_weak_count::lock(v13);
    a6[1] = (kaldi::quasar::TorchEncoderDecoder *)v14;
    if (v14)
      *a6 = (kaldi::quasar::TorchEncoderDecoder *)*((_QWORD *)v12 + 11);
  }
  if (SHIBYTE(v30) < 0)
    operator delete(*((void **)&v29 + 1));
  if (SBYTE7(v29) < 0)
    operator delete(v28[0]);
  if (!*a6)
  {
    std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)a6);
LABEL_12:
    std::allocate_shared[abi:ne180100]<kaldi::quasar::NNMTTransliterator,std::allocator<kaldi::quasar::NNMTTransliterator>,BOOL &,void>(&v46, a6);
    if (*(char *)(a1 + 23) >= 0)
      v15 = *(unsigned __int8 *)(a1 + 23);
    else
      v15 = *(_QWORD *)(a1 + 8);
    v16 = *(unsigned __int8 *)(a2 + 23);
    if (v15)
    {
      v17 = *(_QWORD *)(a2 + 8);
    }
    else
    {
      v17 = *(_QWORD *)(a2 + 8);
      if ((v16 & 0x80u) == 0)
        v18 = *(unsigned __int8 *)(a2 + 23);
      else
        v18 = *(_QWORD *)(a2 + 8);
      if (!v18)
      {
        v43 = 0u;
        v44 = 0u;
        v41 = 0u;
        v42 = 0u;
        v39 = 0u;
        v40 = 0u;
        v37 = 0u;
        v38 = 0u;
        v35 = 0u;
        v36 = 0u;
        v33 = 0u;
        v34 = 0u;
        v31 = 0u;
        v32 = 0u;
        v29 = 0u;
        v30 = 0u;
        *(_OWORD *)v28 = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v28);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)"Configuration needs either 'romanizer' or 'pron-guide-model-file'", 65);
        quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v28);
      }
    }
    if ((v16 & 0x80u) != 0)
      v16 = v17;
    v19 = *a6;
    if (v16)
      kaldi::quasar::NNMTTransliterator::Read(v19, a2, a1, v45);
    else
      kaldi::quasar::NNMTTransliterator::SetICUScripts((uint64_t)v19, a1);
    if (a5)
    {
      v20 = (uint64_t **)quasar::RomanizerBlock::getPronunciator(std::string const&,std::string const&,BOOL,BOOL,BOOL)::pronunciatorMap;
      _ZNSt3__112__tuple_implINS_15__tuple_indicesIJLm0ELm1ELm2ELm3EEEEJNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEES8_bbEEC2B8ne180100IJLm0ELm1ELm2ELm3EEJS8_S8_bbEJEJEJRKS8_SC_RbSD_EEENS1_IJXspT_EEEENS_13__tuple_typesIJDpT0_EEENS1_IJXspT1_EEEENSF_IJDpT2_EEEDpOT3_((std::string *)v28, (__int128 *)a1, (__int128 *)a2, &v46, (std::string::value_type *)&v45);
      v47 = v28;
      v21 = std::__tree<std::__value_type<std::tuple<std::string,std::string,BOOL,BOOL>,std::weak_ptr<kaldi::quasar::NNMTTransliterator>>,std::__map_value_compare<std::tuple<std::string,std::string,BOOL,BOOL>,std::__value_type<std::tuple<std::string,std::string,BOOL,BOOL>,std::weak_ptr<kaldi::quasar::NNMTTransliterator>>,std::less<std::tuple<std::string,std::string,BOOL,BOOL>>,true>,std::allocator<std::__value_type<std::tuple<std::string,std::string,BOOL,BOOL>,std::weak_ptr<kaldi::quasar::NNMTTransliterator>>>>::__emplace_unique_key_args<std::tuple<std::string,std::string,BOOL,BOOL>,std::piecewise_construct_t const&,std::tuple<std::tuple<std::string,std::string,BOOL,BOOL>&&>,std::tuple<>>(v20, (uint64_t)v28, (uint64_t)&std::piecewise_construct, (__int128 **)&v47);
      v23 = *a6;
      v22 = a6[1];
      if (v22)
      {
        v24 = (unint64_t *)((char *)v22 + 16);
        do
          v25 = __ldxr(v24);
        while (__stxr(v25 + 1, v24));
      }
      v26 = (std::__shared_weak_count *)*((_QWORD *)v21 + 12);
      *((_QWORD *)v21 + 11) = v23;
      *((_QWORD *)v21 + 12) = v22;
      if (v26)
        std::__shared_weak_count::__release_weak(v26);
      if (SHIBYTE(v30) < 0)
        operator delete(*((void **)&v29 + 1));
      if (SBYTE7(v29) < 0)
        operator delete(v28[0]);
    }
  }
}

void sub_1ADC3E5EC(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t kaldi::quasar::NNMTTransliterator::Read(kaldi::quasar::TorchEncoderDecoder *a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v6;
  uint64_t v7;

  kaldi::quasar::TorchEncoderDecoder::Read((uint64_t)a1, a2, a4);
  *((_BYTE *)a1 + 4200) = 1;
  if (kaldi::quasar::TorchEncoderDecoder::HasBpeModel(a1))
  {
    v6 = kaldi::quasar::TorchEncoderDecoder::BpeModel(a1);
    kaldi::quasar::BPE::operator=((uint64_t)a1 + 4208, v6);
  }
  v7 = *(unsigned __int8 *)(a3 + 23);
  if ((v7 & 0x80u) != 0)
    v7 = *(_QWORD *)(a3 + 8);
  if (v7)
    return kaldi::quasar::NNMTTransliterator::SetICUScripts((uint64_t)a1, a3);
  else
    return 1;
}

uint64_t kaldi::quasar::NNMTTransliterator::SetICUScripts(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  const char *v13;
  size_t v14;
  _QWORD v15[34];
  void *v16[3];
  UErrorCode v17;

  if (*(_QWORD *)(a1 + 4192))
    utrans_close();
  v4 = *(unsigned __int8 *)(a2 + 23);
  if ((v4 & 0x80u) != 0)
    v4 = *(_QWORD *)(a2 + 8);
  if (v4)
  {
    v17 = U_ZERO_ERROR;
    kaldi::quasar::NNMTTransliterator::UnicodeVectorFromString(a2, (uint64_t)v16);
    v5 = utrans_openU();
    *(_QWORD *)(a1 + 4192) = v5;
    if (!v5)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v15);
      v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Failed to create ICU Transliterator for scripts : ", 50);
      v8 = *(char *)(a2 + 23);
      if (v8 >= 0)
        v9 = a2;
      else
        v9 = *(_QWORD *)a2;
      if (v8 >= 0)
        v10 = *(unsigned __int8 *)(a2 + 23);
      else
        v10 = *(_QWORD *)(a2 + 8);
      v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, v9, v10);
      v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)": ", 2);
      v13 = u_errorName(v17);
      v14 = strlen(v13);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)v13, v14);
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v15);
    }
    if (v16[0])
    {
      v16[1] = v16[0];
      operator delete(v16[0]);
    }
  }
  return 1;
}

void sub_1ADC3E7D8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)(v1 - 136);
  if (v3)
  {
    *(_QWORD *)(v1 - 128) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void quasar::RomanizerBlock::init(quasar::RomanizerBlock *this)
{
  uint64_t v2;
  uint64_t v3;
  char v4;
  unsigned __int8 v5;
  unsigned __int8 *v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  __int128 v10;

  v2 = quasar::OptionValue<std::string>::value((_QWORD *)this + 3);
  v3 = quasar::OptionValue<std::string>::value((_QWORD *)this + 23);
  v4 = *(_BYTE *)quasar::OptionValue<BOOL>::value((_QWORD *)this + 43);
  v5 = *(_BYTE *)quasar::OptionValue<BOOL>::value((_QWORD *)this + 79);
  v6 = (unsigned __int8 *)quasar::OptionValue<BOOL>::value((_QWORD *)this + 97);
  quasar::RomanizerBlock::getPronunciator(v2, v3, v4, v5, *v6, (kaldi::quasar::TorchEncoderDecoder **)&v10);
  std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100]((uint64_t)this + 1080, &v10);
  v7 = (std::__shared_weak_count *)*((_QWORD *)&v10 + 1);
  if (*((_QWORD *)&v10 + 1))
  {
    v8 = (unint64_t *)(*((_QWORD *)&v10 + 1) + 8);
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
}

void `virtual thunk to'quasar::RomanizerBlock::init(quasar::RomanizerBlock *this)
{
  quasar::RomanizerBlock::init((quasar::RomanizerBlock *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 88)));
}

void quasar::RomanizerBlock::process(_QWORD *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  std::vector<std::string>::pointer size;
  __int128 v9;
  std::string *v10;
  uint64_t *v11;
  _QWORD *v12;
  _QWORD *v13;
  std::string *v14;
  std::string v15;
  std::string *v16;
  __int128 *v17;
  uint64_t v18;
  const std::string *v19;
  void **v20;
  uint64_t v21;
  std::string v22;
  std::string __p;
  uint64_t *v24;
  uint64_t *v25;
  uint64_t v26;
  void ***v27;

  v24 = 0;
  v25 = 0;
  v26 = 0;
  std::vector<quasar::TranslationPhraseInternal>::__init_with_size[abi:ne180100]<quasar::TranslationPhraseInternal*,quasar::TranslationPhraseInternal*>(&v24, *a3, a3[1], 0x8F5C28F5C28F5C29 * ((a3[1] - *a3) >> 3));
  v14 = (std::string *)quasar::OptionValue<std::string>::value(a1 + 115);
  v4 = v24;
  v5 = v25;
  if (v24 != v25)
  {
    v12 = a1;
    v13 = a1 + 61;
    v11 = v25;
    do
    {
      if (!quasar::MetaInfo::hasRomanization((quasar::MetaInfo::Impl **)v4 + 24))
      {
        memset(&__p, 0, sizeof(__p));
        if (*(_BYTE *)quasar::OptionValue<BOOL>::value(v13))
        {
          memset(&v22, 0, sizeof(v22));
          v7 = v4[17];
          v6 = v4[18];
          while (v7 != v6)
          {
            v19 = 0;
            v20 = 0;
            v21 = 0;
            kaldi::SplitStringToVector((const std::string *)v7, "\\", 1, (uint64_t)&v19);
            if (v20 == (void **)v19)
            {
              size = (std::vector<std::string>::pointer)v22.__r_.__value_.__l.__size_;
              if (v22.__r_.__value_.__l.__size_ >= v22.__r_.__value_.__r.__words[2])
              {
                v10 = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v22, (__int128 *)v7);
              }
              else
              {
                if (*(char *)(v7 + 23) < 0)
                {
                  std::string::__init_copy_ctor_external((std::string *)v22.__r_.__value_.__l.__size_, *(const std::string::value_type **)v7, *(_QWORD *)(v7 + 8));
                }
                else
                {
                  v9 = *(_OWORD *)v7;
                  *(_QWORD *)(v22.__r_.__value_.__l.__size_ + 16) = *(_QWORD *)(v7 + 16);
                  *(_OWORD *)&size->__r_.__value_.__l.__data_ = v9;
                }
                v10 = size + 1;
              }
              v22.__r_.__value_.__l.__size_ = (std::string::size_type)v10;
            }
            else
            {
              v16 = 0;
              v17 = 0;
              v18 = 0;
              kaldi::SplitStringToVector(v19, "_", 1, (uint64_t)&v16);
              std::vector<std::string>::__insert_with_size[abi:ne180100]<std::__wrap_iter<std::string*>,std::__wrap_iter<std::string*>>((std::vector<std::string> *)&v22, (std::string *)v22.__r_.__value_.__l.__size_, v16, v17, 0xAAAAAAAAAAAAAAABLL * (((char *)v17 - (char *)v16) >> 3));
              v27 = (void ***)&v16;
              std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v27);
            }
            v16 = (std::string *)&v19;
            std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v16);
            v7 += 136;
          }
          kaldi::JoinVectorToString<std::string>((uint64_t *)&v22, " ", (uint64_t)&__p);
          v19 = &v22;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v19);
          v5 = v11;
          a1 = v12;
        }
        else
        {
          quasar::TranslationPhraseInternal::convertTokensToString((uint64_t *)&v22, (quasar::TranslationPhraseInternal *)v4);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
          __p = v22;
        }
        kaldi::quasar::NNMTTransliterator::Transliterate(a1[135], (uint64_t)&__p, v14, 0, &v22);
        if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
          std::string::__init_copy_ctor_external(&v15, v22.__r_.__value_.__l.__data_, v22.__r_.__value_.__l.__size_);
        else
          v15 = v22;
        quasar::MetaInfo::setRomanization(v4 + 24, (uint64_t)&v15);
        if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v15.__r_.__value_.__l.__data_);
        if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v22.__r_.__value_.__l.__data_);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
      }
      v4 += 25;
    }
    while (v4 != v5);
  }
  quasar::ProcessingBlock::send((uint64_t)a1 + *(_QWORD *)(*a1 - 24), (uint64_t)&v24, 0);
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v24;
  std::vector<quasar::TranslationPhraseInternal>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
}

void sub_1ADC3EB9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  uint64_t v36;

  a31 = (void *)(v36 - 120);
  std::vector<quasar::TranslationPhraseInternal>::__destroy_vector::operator()[abi:ne180100]((void ***)&a31);
  _Unwind_Resume(a1);
}

void kaldi::quasar::NNMTTransliterator::Transliterate(uint64_t a1@<X0>, uint64_t a2@<X1>, std::string *a3@<X2>, int a4@<W3>, _QWORD *a5@<X8>)
{
  uint64_t v10;
  int *v11;
  uint64_t i;
  char **v13;
  char *v14;
  char **v15;
  BOOL v16;
  std::wstring::size_type size;
  char *v18;
  void **v19[3];
  std::string v20;
  char **v21;
  char *v22[2];
  std::wstring v23;
  void ***v24;
  void *__p[2];
  uint64_t v26;
  uint64_t v27;
  _BYTE v28[144];
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  if (*(_QWORD *)(a1 + 4192) || *(_BYTE *)(a1 + 4200))
  {
    std::wstring_convert<std::codecvt_utf8<wchar_t,1114111ul,(std::codecvt_mode)0>,wchar_t,std::allocator<wchar_t>,std::allocator<char>>::wstring_convert[abi:ne180100]((uint64_t)__p);
    v10 = *(unsigned __int8 *)(a2 + 23);
    if ((v10 & 0x80u) == 0)
      v11 = (int *)a2;
    else
      v11 = *(int **)a2;
    if ((v10 & 0x80u) != 0)
      v10 = *(_QWORD *)(a2 + 8);
    std::wstring_convert<std::codecvt_utf8<wchar_t,1114111ul,(std::codecvt_mode)0>,wchar_t,std::allocator<wchar_t>,std::allocator<char>>::from_bytes((uint64_t)__p, v11, (int *)((char *)v11 + v10), &v23);
    std::wstring_convert<std::codecvt_utf8<char32_t,1114111ul,(std::codecvt_mode)0>,char32_t,std::allocator<char32_t>,std::allocator<char>>::~wstring_convert((uint64_t)__p);
    std::wstring::basic_string[abi:ne180100]<0>((uint64_t)__p, (__int32 *)"\t");
    std::wstring::basic_string[abi:ne180100]<0>((uint64_t)&v27, (__int32 *)"\n");
    std::wstring::basic_string[abi:ne180100]<0>((uint64_t)v28, (__int32 *)&unk_1AE16AAA0);
    std::set<std::wstring>::set[abi:ne180100]((uint64_t)&v21, (uint64_t)__p, 3);
    for (i = 0; i != -72; i -= 24)
    {
      if ((char)v28[i + 23] < 0)
        operator delete(*(void **)&v28[i]);
    }
    v13 = v21;
    if (v21 != v22)
    {
      do
      {
        std::wstring::basic_string[abi:ne180100]<0>((uint64_t)__p, (__int32 *)&unk_1AE16AAA8);
        kaldi::quasar::NNMTTransliterator::ReplaceString(a1, &v23, (uint64_t)(v13 + 4), (uint64_t)__p);
        if (SHIBYTE(v26) < 0)
          operator delete(__p[0]);
        v14 = v13[1];
        if (v14)
        {
          do
          {
            v15 = (char **)v14;
            v14 = *(char **)v14;
          }
          while (v14);
        }
        else
        {
          do
          {
            v15 = (char **)v13[2];
            v16 = *v15 == (char *)v13;
            v13 = v15;
          }
          while (!v16);
        }
        v13 = v15;
      }
      while (v15 != v22);
    }
    std::wstring_convert<std::codecvt_utf8<wchar_t,1114111ul,(std::codecvt_mode)0>,wchar_t,std::allocator<wchar_t>,std::allocator<char>>::wstring_convert[abi:ne180100]((uint64_t)__p);
    size = HIBYTE(v23.__r_.__value_.__r.__words[2]);
    if ((v23.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v18 = (char *)&v23;
    else
      v18 = (char *)v23.__r_.__value_.__r.__words[0];
    if ((v23.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      size = v23.__r_.__value_.__l.__size_;
    std::wstring_convert<std::codecvt_utf8<wchar_t,1114111ul,(std::codecvt_mode)0>,wchar_t,std::allocator<wchar_t>,std::allocator<char>>::to_bytes((uint64_t)__p, v18, &v18[4 * size], &v20);
    std::wstring_convert<std::codecvt_utf8<char32_t,1114111ul,(std::codecvt_mode)0>,char32_t,std::allocator<char32_t>,std::allocator<char>>::~wstring_convert((uint64_t)__p);
    __p[0] = 0;
    __p[1] = 0;
    v26 = 0;
    kaldi::SplitStringToVector(&v20, " ", 1, (uint64_t)__p);
    kaldi::quasar::NNMTTransliterator::Transliterate(a1, (uint64_t)__p, a3, a4, (uint64_t)v19);
    *a5 = 0;
    a5[1] = 0;
    a5[2] = 0;
    kaldi::JoinVectorToString<std::string>((uint64_t *)v19, " ", (uint64_t)a5);
    v24 = v19;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v24);
    v19[0] = __p;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v19);
    if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v20.__r_.__value_.__l.__data_);
    std::__tree<std::string>::destroy((uint64_t)&v21, v22[0]);
    if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v23.__r_.__value_.__l.__data_);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(a5, "");
  }
}

void sub_1ADC3EF44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t *a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18, char *a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t *a27,uint64_t a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  uint64_t v33;

  if (*(char *)(v33 + 23) < 0)
    operator delete(*(void **)v33);
  a27 = (uint64_t *)&a9;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a27);
  a9 = &a28;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a9);
  if (a17 < 0)
    operator delete(__p);
  std::__tree<std::string>::destroy((uint64_t)&a18, a19);
  if (a26 < 0)
    operator delete(a21);
  _Unwind_Resume(a1);
}

void `virtual thunk to'quasar::RomanizerBlock::process(_QWORD *a1, uint64_t a2, uint64_t *a3)
{
  quasar::RomanizerBlock::process((_QWORD *)((char *)a1 + *(_QWORD *)(*a1 - 96)), a2, a3);
}

uint64_t quasar::RomanizerBlock::minConfigVersion(quasar::RomanizerBlock *this)
{
  return 133;
}

uint64_t `virtual thunk to'quasar::RomanizerBlock::minConfigVersion(quasar::RomanizerBlock *this)
{
  return 133;
}

void quasar::ConfiguredProcessingBlock<quasar::RomanizerOptions>::setContextProvider(uint64_t a1, uint64_t *a2)
{
  void (***v3)(uint64_t **__return_ptr);
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  uint64_t *v15;
  uint64_t *v16;

  v3 = (void (***)(uint64_t **__return_ptr))(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 8))(a1);
  (**v3)(&v15);
  v4 = v15;
  v5 = v16;
  if (v15 != v16)
  {
    do
    {
      v6 = *v4;
      v7 = a2[1];
      v13 = *a2;
      v14 = (std::__shared_weak_count *)v7;
      if (v7)
      {
        v8 = (unint64_t *)(v7 + 8);
        do
          v9 = __ldxr(v8);
        while (__stxr(v9 + 1, v8));
      }
      quasar::OptionValueBase::setContextProvider(v6, &v13);
      v10 = v14;
      if (v14)
      {
        p_shared_owners = (unint64_t *)&v14->__shared_owners_;
        do
          v12 = __ldaxr(p_shared_owners);
        while (__stlxr(v12 - 1, p_shared_owners));
        if (!v12)
        {
          ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
          std::__shared_weak_count::__release_weak(v10);
        }
      }
      ++v4;
    }
    while (v4 != v5);
    v4 = v15;
  }
  if (v4)
  {
    v16 = v4;
    operator delete(v4);
  }
}

void sub_1ADC3F154(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13)
{
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  if (__p)
  {
    a13 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t quasar::ConfiguredProcessingBlock<quasar::RomanizerOptions>::getOptions(uint64_t a1)
{
  return a1 + 8;
}

void `virtual thunk to'quasar::ConfiguredProcessingBlock<quasar::RomanizerOptions>::setContextProvider(_QWORD *a1, uint64_t *a2)
{
  quasar::ConfiguredProcessingBlock<quasar::RomanizerOptions>::setContextProvider((uint64_t)a1 + *(_QWORD *)(*a1 - 72), a2);
}

uint64_t `virtual thunk to'quasar::ConfiguredProcessingBlock<quasar::RomanizerOptions>::getOptions(_QWORD *a1)
{
  return (uint64_t)a1 + *(_QWORD *)(*a1 - 104) + 8;
}

void quasar::RomanizerBlock::~RomanizerBlock(quasar::RomanizerBlock *this)
{
  char **v2;

  *(_QWORD *)this = off_1E5D35550;
  v2 = (char **)((char *)this + 1096);
  *((_QWORD *)this + 137) = &off_1E5D355F8;
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this + 1080);
  *(_QWORD *)this = off_1E5D03EF0;
  *((_QWORD *)this + 137) = &unk_1E5D03F78;
  quasar::RomanizerOptions::~RomanizerOptions((quasar::RomanizerBlock *)((char *)this + 8));
  quasar::ProcessingBlock::~ProcessingBlock(v2);
}

{
  char **v2;

  *(_QWORD *)this = off_1E5D35550;
  v2 = (char **)((char *)this + 1096);
  *((_QWORD *)this + 137) = &off_1E5D355F8;
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this + 1080);
  *(_QWORD *)this = off_1E5D03EF0;
  *((_QWORD *)this + 137) = &unk_1E5D03F78;
  quasar::RomanizerOptions::~RomanizerOptions((quasar::RomanizerBlock *)((char *)this + 8));
  quasar::ProcessingBlock::~ProcessingBlock(v2);
  JUMPOUT(0x1AF44D190);
}

const char *quasar::RomanizerBlock::blockType(quasar::RomanizerBlock *this)
{
  return "RomanizerBlock";
}

void `virtual thunk to'quasar::RomanizerBlock::~RomanizerBlock(quasar::RomanizerBlock *this)
{
  char *v1;

  v1 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
  *(_QWORD *)v1 = off_1E5D35550;
  *((_QWORD *)v1 + 137) = &off_1E5D355F8;
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)(v1 + 1080));
  *(_QWORD *)v1 = off_1E5D03EF0;
  *((_QWORD *)v1 + 137) = &unk_1E5D03F78;
  quasar::RomanizerOptions::~RomanizerOptions((quasar::RomanizerOptions *)(v1 + 8));
  quasar::ProcessingBlock::~ProcessingBlock((char **)v1 + 137);
}

{
  char *v1;

  v1 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
  *(_QWORD *)v1 = off_1E5D35550;
  *((_QWORD *)v1 + 137) = &off_1E5D355F8;
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)(v1 + 1080));
  *(_QWORD *)v1 = off_1E5D03EF0;
  *((_QWORD *)v1 + 137) = &unk_1E5D03F78;
  quasar::RomanizerOptions::~RomanizerOptions((quasar::RomanizerOptions *)(v1 + 8));
  quasar::ProcessingBlock::~ProcessingBlock((char **)v1 + 137);
  JUMPOUT(0x1AF44D190);
}

const char *`virtual thunk to'quasar::RomanizerBlock::blockType(quasar::RomanizerBlock *this)
{
  return "RomanizerBlock";
}

std::string *_ZNSt3__112__tuple_implINS_15__tuple_indicesIJLm0ELm1ELm2ELm3EEEEJNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEES8_bbEEC2B8ne180100IJLm0ELm1ELm2ELm3EEJS8_S8_bbEJEJEJRKS8_SC_RbSD_EEENS1_IJXspT_EEEENS_13__tuple_typesIJDpT0_EEENS1_IJXspT1_EEEENSF_IJDpT2_EEEDpOT3_(std::string *this, __int128 *a2, __int128 *a3, std::string::value_type *a4, std::string::value_type *a5)
{
  __int128 v9;
  std::string *v10;
  __int128 v11;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v9 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v9;
  }
  v10 = this + 1;
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v10, *(const std::string::value_type **)a3, *((_QWORD *)a3 + 1));
  }
  else
  {
    v11 = *a3;
    this[1].__r_.__value_.__r.__words[2] = *((_QWORD *)a3 + 2);
    *(_OWORD *)&v10->__r_.__value_.__l.__data_ = v11;
  }
  this[2].__r_.__value_.__s.__data_[0] = *a4;
  this[2].__r_.__value_.__s.__data_[1] = *a5;
  return this;
}

void sub_1ADC3F40C(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t kaldi::quasar::BPE::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    std::__tree<std::string>::__assign_multi<std::__tree_const_iterator<std::string,std::__tree_node<std::string,void *> *,long>>((uint64_t **)a1, *(_QWORD **)a2, (_QWORD *)(a2 + 8));
    *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
    std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<std::string,float>,void *> *>>((_QWORD *)(a1 + 24), *(uint64_t **)(a2 + 40), 0);
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((std::vector<std::wstring> *)(a1 + 64), *(std::string **)(a2 + 64), *(__int128 **)(a2 + 72), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 72) - *(_QWORD *)(a2 + 64)) >> 3));
    *(_DWORD *)(a1 + 120) = *(_DWORD *)(a2 + 120);
    std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *> *>>((_QWORD *)(a1 + 88), *(uint64_t **)(a2 + 104), 0);
  }
  std::string::operator=((std::string *)(a1 + 136), (const std::string *)(a2 + 136));
  std::string::operator=((std::string *)(a1 + 160), (const std::string *)(a2 + 160));
  *(_DWORD *)(a1 + 184) = *(_DWORD *)(a2 + 184);
  std::string::operator=((std::string *)(a1 + 192), (const std::string *)(a2 + 192));
  std::string::operator=((std::string *)(a1 + 216), (const std::string *)(a2 + 216));
  return a1;
}

void std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<std::string,float>,void *> *>>(_QWORD *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t *v4;
  uint64_t v6;
  uint64_t i;
  void **v8;
  BOOL v9;
  void **v10;
  BOOL v11;

  v4 = a2;
  v6 = a1[1];
  if (v6)
  {
    for (i = 0; i != v6; ++i)
      *(_QWORD *)(*a1 + 8 * i) = 0;
    v8 = (void **)a1[2];
    a1[2] = 0;
    a1[3] = 0;
    if (v8)
      v9 = a2 == a3;
    else
      v9 = 1;
    if (v9)
    {
      v10 = v8;
    }
    else
    {
      do
      {
        std::string::operator=((std::string *)(v8 + 2), (const std::string *)(v4 + 2));
        *((_DWORD *)v8 + 10) = *((_DWORD *)v4 + 10);
        v10 = (void **)*v8;
        std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__node_insert_multi(a1, v8);
        v4 = (uint64_t *)*v4;
        if (v10)
          v11 = v4 == a3;
        else
          v11 = 1;
        v8 = v10;
      }
      while (!v11);
    }
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__deallocate_node((int)a1, v10);
  }
  while (v4 != a3)
  {
    std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__emplace_multi<std::pair<std::string const,float> const&>(a1, (uint64_t)(v4 + 2));
    v4 = (uint64_t *)*v4;
  }
}

void sub_1ADC3F5BC(void *a1)
{
  int v1;
  void **v2;

  __cxa_begin_catch(a1);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__deallocate_node(v1, v2);
  __cxa_rethrow();
}

void sub_1ADC3F5D8(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

_QWORD *std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__emplace_multi<std::pair<std::string const,float> const&>(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__construct_node<std::pair<std::string const,float> const&>((uint64_t)a1, a2, (uint64_t)&v4);
  return std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__node_insert_multi(a1, v4);
}

void sub_1ADC3F624(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **__p, uint64_t a11)
{
  if (__p)
    std::__hash_node_destructor<std::allocator<std::__hash_node<std::string,void *>>>::operator()[abi:ne180100]((uint64_t)&a11, __p);
  _Unwind_Resume(exception_object);
}

unint64_t std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__construct_node<std::pair<std::string const,float> const&>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  char *v7;
  char *v8;
  _OWORD *v9;
  unint64_t result;

  v6 = a1 + 16;
  v7 = (char *)operator new(0x30uLL);
  v8 = v7;
  *(_QWORD *)(a3 + 8) = v6;
  *(_QWORD *)a3 = v7;
  *(_BYTE *)(a3 + 16) = 0;
  v9 = v7 + 16;
  *(_QWORD *)v7 = 0;
  *((_QWORD *)v7 + 1) = 0;
  if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(v7 + 16), *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  }
  else
  {
    *v9 = *(_OWORD *)a2;
    *((_QWORD *)v7 + 4) = *(_QWORD *)(a2 + 16);
  }
  *((_DWORD *)v8 + 10) = *(_DWORD *)(a2 + 24);
  *(_BYTE *)(a3 + 16) = 1;
  result = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)v9);
  *((_QWORD *)v8 + 1) = result;
  return result;
}

void sub_1ADC3F6EC(_Unwind_Exception *a1)
{
  void **v1;
  _QWORD *v2;
  uint64_t v3;

  *v2 = 0;
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::string,void *>>>::operator()[abi:ne180100](v3, v1);
  _Unwind_Resume(a1);
}

UChar *kaldi::quasar::NNMTTransliterator::UnicodeVectorFromString@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  const char *v4;
  const char *v5;
  UChar *result;
  _QWORD *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  const char *v13;
  size_t v14;
  _QWORD v15[34];
  UErrorCode pErrorCode[2];

  *(_QWORD *)pErrorCode = 0;
  if (*(char *)(a1 + 23) >= 0)
    v4 = (const char *)a1;
  else
    v4 = *(const char **)a1;
  u_strFromUTF8(0, 0, (int32_t *)pErrorCode, v4, -1, &pErrorCode[1]);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  std::vector<unsigned short>::resize(a2, (int)pErrorCode[0] + 1);
  pErrorCode[1] = U_ZERO_ERROR;
  if (*(char *)(a1 + 23) >= 0)
    v5 = (const char *)a1;
  else
    v5 = *(const char **)a1;
  result = u_strFromUTF8(*(UChar **)a2, (*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 1, (int32_t *)pErrorCode, v5, -1, &pErrorCode[1]);
  if (!result)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v15);
    v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Failed to create unicode string for \"", 37);
    v8 = *(char *)(a1 + 23);
    if (v8 >= 0)
      v9 = a1;
    else
      v9 = *(_QWORD *)a1;
    if (v8 >= 0)
      v10 = *(unsigned __int8 *)(a1 + 23);
    else
      v10 = *(_QWORD *)(a1 + 8);
    v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, v9, v10);
    v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"\": ", 3);
    v13 = u_errorName(pErrorCode[1]);
    v14 = strlen(v13);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)v13, v14);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v15);
  }
  return result;
}

void sub_1ADC3F838(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void kaldi::quasar::NNMTTransliterator::ReplaceString(int a1, std::wstring *this, uint64_t a3, uint64_t a4)
{
  std::wstring::size_type v7;
  std::wstring::size_type size;
  std::wstring *v9;
  char v10;
  const __int32 *v11;
  int64_t v12;
  __int32 *v13;
  __int32 *v14;
  uint64_t v15;
  __int32 v16;
  uint64_t v17;
  __int32 *v18;
  __int32 *v19;
  char v20;
  std::wstring::size_type v21;
  const std::wstring::value_type *v22;
  uint64_t v23;
  int v24;

  v7 = 0;
  size = HIBYTE(this->__r_.__value_.__r.__words[2]);
  if ((size & 0x80u) == 0)
    v9 = this;
  else
    v9 = (std::wstring *)this->__r_.__value_.__r.__words[0];
  if ((size & 0x80u) != 0)
    size = this->__r_.__value_.__l.__size_;
  v10 = *(_BYTE *)(a3 + 23);
  if (v10 >= 0)
    v11 = (const __int32 *)a3;
  else
    v11 = *(const __int32 **)a3;
  if (v10 >= 0)
    v12 = *(unsigned __int8 *)(a3 + 23);
  else
    v12 = *(_QWORD *)(a3 + 8);
  while (!v12)
  {
LABEL_22:
    if (v7 != -1)
    {
      v20 = *(_BYTE *)(a4 + 23);
      if (v20 >= 0)
        v21 = *(unsigned __int8 *)(a4 + 23);
      else
        v21 = *(_QWORD *)(a4 + 8);
      if (v20 >= 0)
        v22 = (const std::wstring::value_type *)a4;
      else
        v22 = *(const std::wstring::value_type **)a4;
      std::wstring::replace(this, v7, v21, v22, v21);
      v23 = *(unsigned __int8 *)(a4 + 23);
      if ((v23 & 0x80u) != 0)
        v23 = *(_QWORD *)(a4 + 8);
      v7 += v23;
      size = HIBYTE(this->__r_.__value_.__r.__words[2]);
      if ((size & 0x80u) == 0)
        v9 = this;
      else
        v9 = (std::wstring *)this->__r_.__value_.__r.__words[0];
      if ((size & 0x80u) != 0)
        size = this->__r_.__value_.__l.__size_;
      v24 = *(char *)(a3 + 23);
      v11 = v24 >= 0 ? (const __int32 *)a3 : *(const __int32 **)a3;
      v12 = v24 >= 0 ? *(unsigned __int8 *)(a3 + 23) : *(_QWORD *)(a3 + 8);
      if (size >= v7)
        continue;
    }
    return;
  }
  v13 = (__int32 *)((char *)v9 + 4 * v7);
  v14 = (__int32 *)((char *)v9 + 4 * size);
  v15 = v14 - v13;
  if (v15 >= v12)
  {
    v16 = *v11;
    do
    {
      v17 = v15 - v12;
      if (v17 == -1)
        break;
      v18 = wmemchr(v13, v16, v17 + 1);
      if (!v18)
        break;
      v19 = v18;
      if (!wmemcmp(v18, v11, v12))
      {
        if (v19 == v14)
          return;
        v7 = ((char *)v19 - (char *)v9) >> 2;
        goto LABEL_22;
      }
      v13 = v19 + 1;
      v15 = v14 - (v19 + 1);
    }
    while (v15 >= v12);
  }
}

void kaldi::quasar::NNMTTransliterator::Transliterate(uint64_t a1@<X0>, uint64_t a2@<X1>, std::string *a3@<X2>, int a4@<W3>, uint64_t a5@<X8>)
{
  std::string *v8;
  __int128 *v9;
  unint64_t v10;
  __int128 *v11;
  __int128 *v12;
  __int128 *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  __int128 *v17;
  const UChar *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  unsigned __int8 *v23;
  uint64_t v24;
  const UChar *v25;
  unint64_t v26;
  unint64_t v27;
  __int128 v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  std::string *v33;
  std::string *v34;
  __int128 v35;
  uint64_t v36;
  int v37;
  unint64_t v38;
  unint64_t v39;
  __int128 v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  std::string *v45;
  std::string *v46;
  __int128 v47;
  uint64_t v48;
  int v49;
  std::__split_buffer<std::string>::pointer begin;
  unint64_t v51;
  unint64_t v52;
  __int128 v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  std::string *v58;
  std::string *v59;
  __int128 v60;
  uint64_t v61;
  int v62;
  uint64_t v63;
  void **v64;
  int v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  std::__split_buffer<std::string>::pointer v69;
  __int128 v70;
  std::string *v71;
  std::string *v72;
  unsigned __int8 *v74;
  void *__p[2];
  std::string::size_type v77;
  __int128 v78;
  _OWORD v79[4];
  std::string v80;
  uint64_t v81;
  std::string *v82;
  std::string *v83;
  uint64_t v84;
  std::__split_buffer<std::string> __v;

  *(_QWORD *)a5 = 0;
  *(_QWORD *)(a5 + 8) = 0;
  *(_QWORD *)(a5 + 16) = 0;
  if (!*(_QWORD *)(a1 + 4192) && !*(_BYTE *)(a1 + 4200))
    return;
  v8 = *(std::string **)a2;
  v9 = *(__int128 **)(a2 + 8);
  if (*(__int128 **)a2 == v9)
    return;
  if (!*(_BYTE *)(a1 + 4200))
  {
    if (a5 != a2)
      std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((std::vector<std::wstring> *)a5, v8, v9, 0xAAAAAAAAAAAAAAABLL * (((char *)v9 - (char *)v8) >> 3));
    goto LABEL_112;
  }
  v72 = a3;
  v74 = (unsigned __int8 *)(a1 + 4191);
  if (*(_BYTE *)(a1 + 4201))
  {
    v10 = 0;
    v11 = (__int128 *)(a1 + 4168);
    do
    {
      v78 = 0uLL;
      *(_QWORD *)&v79[0] = 0;
      kaldi::quasar::NNMTTransliterator::SplitUtfString(a1, &v8[v10], (uint64_t)&v78);
      v12 = (__int128 *)*((_QWORD *)&v78 + 1);
      v13 = (__int128 *)v78;
      if ((_QWORD)v78 != *((_QWORD *)&v78 + 1))
      {
        v14 = *(_QWORD *)(a5 + 8);
        do
        {
          if (v14 >= *(_QWORD *)(a5 + 16))
          {
            v14 = std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)a5, v13);
          }
          else
          {
            std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>(a5, v13);
            v14 += 24;
          }
          *(_QWORD *)(a5 + 8) = v14;
          v13 = (__int128 *)((char *)v13 + 24);
        }
        while (v13 != v12);
      }
      if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 3) > ++v10)
      {
        v15 = *(_QWORD *)(a5 + 8);
        if (v15 >= *(_QWORD *)(a5 + 16))
        {
          v16 = std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)a5, v11);
        }
        else
        {
          std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>(a5, v11);
          v16 = v15 + 24;
        }
        *(_QWORD *)(a5 + 8) = v16;
      }
      __v.__first_ = (std::__split_buffer<std::string>::pointer)&v78;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__v);
      v8 = *(std::string **)a2;
    }
    while (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 3) > v10);
  }
  else if (kaldi::quasar::TorchEncoderDecoder::HasBpeModel((kaldi::quasar::TorchEncoderDecoder *)a1))
  {
    kaldi::quasar::BPE::Apply(a1 + 4208, (std::string **)a2, (uint64_t *)a5);
  }
  else if (a5 != a2)
  {
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((std::vector<std::wstring> *)a5, *(std::string **)a2, *(__int128 **)(a2 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 3));
  }
  v82 = 0;
  v83 = 0;
  v84 = 0;
  kaldi::quasar::TMTools::GreedyDecode<kaldi::quasar::TorchEncoderDecoder>((kaldi::quasar::TorchEncoderDecoder *)a1, (__int128 **)a5, (uint64_t)&v82, (uint64_t)v72, 0, 100);
  std::vector<std::string>::__clear[abi:ne180100]((uint64_t *)a5);
  if (!v74[10])
  {
    if (kaldi::quasar::TorchEncoderDecoder::HasBpeModel((kaldi::quasar::TorchEncoderDecoder *)a1))
    {
      kaldi::quasar::BPE::Remove(a1 + 4208, (uint64_t *)&v82, a5);
    }
    else if (&v82 != (std::string **)a5)
    {
      std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((std::vector<std::wstring> *)a5, v82, (__int128 *)v83, 0xAAAAAAAAAAAAAAABLL * (((char *)v83 - (char *)v82) >> 3));
    }
    goto LABEL_111;
  }
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v78);
  v18 = (const UChar *)v82;
  v17 = (__int128 *)v83;
  if (v82 != v83)
  {
    do
    {
      v19 = *((unsigned __int8 *)v18 + 23);
      if ((v19 & 0x80u) == 0)
        v20 = *((unsigned __int8 *)v18 + 23);
      else
        v20 = *((_QWORD *)v18 + 1);
      v21 = *v74;
      v22 = (char)v21;
      if ((v21 & 0x80u) != 0)
        v21 = *(_QWORD *)(a1 + 4176);
      if (v20 == v21)
      {
        if (v22 >= 0)
          v23 = (unsigned __int8 *)(a1 + 4168);
        else
          v23 = *(unsigned __int8 **)(a1 + 4168);
        if ((v19 & 0x80) != 0)
        {
          if (!memcmp(*(const void **)v18, v23, *((_QWORD *)v18 + 1)))
          {
LABEL_50:
            std::stringbuf::str();
            v27 = *(_QWORD *)(a5 + 8);
            v26 = *(_QWORD *)(a5 + 16);
            if (v27 >= v26)
            {
              v29 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v27 - *(_QWORD *)a5) >> 3);
              v30 = v29 + 1;
              if (v29 + 1 > 0xAAAAAAAAAAAAAAALL)
                std::vector<int>::__throw_length_error[abi:ne180100]();
              v31 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v26 - *(_QWORD *)a5) >> 3);
              if (2 * v31 > v30)
                v30 = 2 * v31;
              if (v31 >= 0x555555555555555)
                v32 = 0xAAAAAAAAAAAAAAALL;
              else
                v32 = v30;
              __v.__end_cap_.__value_ = (std::allocator<std::string> *)(a5 + 16);
              if (v32)
                v33 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>(a5 + 16, v32);
              else
                v33 = 0;
              v34 = v33 + v29;
              __v.__first_ = v33;
              __v.__begin_ = v34;
              __v.__end_cap_.__value_ = &v33[v32];
              v35 = *(_OWORD *)__p;
              v34->__r_.__value_.__r.__words[2] = v77;
              *(_OWORD *)&v34->__r_.__value_.__l.__data_ = v35;
              __p[1] = 0;
              v77 = 0;
              __p[0] = 0;
              __v.__end_ = v34 + 1;
              std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)a5, &__v);
              v36 = *(_QWORD *)(a5 + 8);
              std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::wstring> *)&__v);
              v37 = SHIBYTE(v77);
              *(_QWORD *)(a5 + 8) = v36;
              if (v37 < 0)
                operator delete(__p[0]);
            }
            else
            {
              v28 = *(_OWORD *)__p;
              *(_QWORD *)(v27 + 16) = v77;
              *(_OWORD *)v27 = v28;
              *(_QWORD *)(a5 + 8) = v27 + 24;
            }
            if (a4)
            {
              std::string::basic_string[abi:ne180100]<0>(__p, " ");
              v39 = *(_QWORD *)(a5 + 8);
              v38 = *(_QWORD *)(a5 + 16);
              if (v39 >= v38)
              {
                v41 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v39 - *(_QWORD *)a5) >> 3);
                v42 = v41 + 1;
                if (v41 + 1 > 0xAAAAAAAAAAAAAAALL)
                  std::vector<int>::__throw_length_error[abi:ne180100]();
                v43 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v38 - *(_QWORD *)a5) >> 3);
                if (2 * v43 > v42)
                  v42 = 2 * v43;
                if (v43 >= 0x555555555555555)
                  v44 = 0xAAAAAAAAAAAAAAALL;
                else
                  v44 = v42;
                __v.__end_cap_.__value_ = (std::allocator<std::string> *)(a5 + 16);
                if (v44)
                  v45 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>(a5 + 16, v44);
                else
                  v45 = 0;
                v46 = v45 + v41;
                __v.__first_ = v45;
                __v.__begin_ = v46;
                __v.__end_cap_.__value_ = &v45[v44];
                v47 = *(_OWORD *)__p;
                v46->__r_.__value_.__r.__words[2] = v77;
                *(_OWORD *)&v46->__r_.__value_.__l.__data_ = v47;
                __p[1] = 0;
                v77 = 0;
                __p[0] = 0;
                __v.__end_ = v46 + 1;
                std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)a5, &__v);
                v48 = *(_QWORD *)(a5 + 8);
                std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::wstring> *)&__v);
                v49 = SHIBYTE(v77);
                *(_QWORD *)(a5 + 8) = v48;
                if (v49 < 0)
                  operator delete(__p[0]);
              }
              else
              {
                v40 = *(_OWORD *)__p;
                *(_QWORD *)(v39 + 16) = v77;
                *(_OWORD *)v39 = v40;
                *(_QWORD *)(a5 + 8) = v39 + 24;
              }
            }
            std::string::basic_string[abi:ne180100]<0>(&__v, "");
            std::string::operator=(&v80, (const std::string *)&__v);
            std::stringbuf::__init_buf_ptrs[abi:ne180100]((uint64_t)v79 + 8);
            if (SHIBYTE(__v.__end_) < 0)
              operator delete(__v.__first_);
            goto LABEL_48;
          }
        }
        else
        {
          if (!*((_BYTE *)v18 + 23))
            goto LABEL_50;
          v24 = 0;
          while (*((unsigned __int8 *)v18 + v24) == v23[v24])
          {
            if (v19 == ++v24)
              goto LABEL_50;
          }
        }
      }
      if ((v19 & 0x80u) == 0)
        v25 = v18;
      else
        v25 = *(const UChar **)v18;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v79, (uint64_t)v25, v20);
LABEL_48:
      v18 += 12;
    }
    while (v18 != (const UChar *)v17);
  }
  std::stringbuf::str();
  if (SHIBYTE(__v.__end_) < 0)
  {
    begin = __v.__begin_;
    operator delete(__v.__first_);
    if (!begin)
      goto LABEL_100;
  }
  else if (!HIBYTE(__v.__end_))
  {
    goto LABEL_100;
  }
  std::stringbuf::str();
  v51 = *(_QWORD *)(a5 + 16);
  v52 = *(_QWORD *)(a5 + 8);
  if (v52 >= v51)
  {
    v54 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v52 - *(_QWORD *)a5) >> 3);
    v55 = v54 + 1;
    if (v54 + 1 > 0xAAAAAAAAAAAAAAALL)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v56 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v51 - *(_QWORD *)a5) >> 3);
    if (2 * v56 > v55)
      v55 = 2 * v56;
    if (v56 >= 0x555555555555555)
      v57 = 0xAAAAAAAAAAAAAAALL;
    else
      v57 = v55;
    __v.__end_cap_.__value_ = (std::allocator<std::string> *)(a5 + 16);
    if (v57)
      v58 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>(a5 + 16, v57);
    else
      v58 = 0;
    v59 = v58 + v54;
    __v.__first_ = v58;
    __v.__begin_ = v59;
    __v.__end_cap_.__value_ = &v58[v57];
    v60 = *(_OWORD *)__p;
    v59->__r_.__value_.__r.__words[2] = v77;
    *(_OWORD *)&v59->__r_.__value_.__l.__data_ = v60;
    __p[1] = 0;
    v77 = 0;
    __p[0] = 0;
    __v.__end_ = v59 + 1;
    std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)a5, &__v);
    v61 = *(_QWORD *)(a5 + 8);
    std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::wstring> *)&__v);
    v62 = SHIBYTE(v77);
    *(_QWORD *)(a5 + 8) = v61;
    if (v62 < 0)
      operator delete(__p[0]);
  }
  else
  {
    v53 = *(_OWORD *)__p;
    *(_QWORD *)(v52 + 16) = v77;
    *(_OWORD *)v52 = v53;
    *(_QWORD *)(a5 + 8) = v52 + 24;
  }
LABEL_100:
  v63 = *(_QWORD *)(a5 + 8);
  v64 = (void **)(v63 - 24);
  v65 = *(char *)(v63 - 1);
  if (v65 < 0)
  {
    if (*(_QWORD *)(v63 - 16) != 1 || *(_BYTE *)*v64 != 32)
      goto LABEL_108;
    operator delete(*v64);
  }
  else if (v65 != 1 || *(_BYTE *)v64 != 32)
  {
    goto LABEL_108;
  }
  *(_QWORD *)(a5 + 8) = v64;
LABEL_108:
  *(_QWORD *)&v78 = *MEMORY[0x1E0DE4F50];
  v66 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
  *(_QWORD *)((char *)&v79[-1] + *(_QWORD *)(v78 - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
  *(_QWORD *)&v79[0] = v66;
  *((_QWORD *)&v79[0] + 1) = MEMORY[0x1E0DE4FB8] + 16;
  if (SHIBYTE(v80.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v80.__r_.__value_.__l.__data_);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x1AF44D094](&v81);
LABEL_111:
  *(_QWORD *)&v78 = &v82;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v78);
LABEL_112:
  if (*(_QWORD *)(a1 + 4192))
  {
    memset(&__v, 0, 24);
    v67 = *(_QWORD *)a5;
    v68 = *(_QWORD *)(a5 + 8);
    if (*(_QWORD *)a5 != v68)
    {
      do
      {
        kaldi::quasar::NNMTTransliterator::UnicodeVectorFromString(v67, (uint64_t)&v82);
        v78 = xmmword_1E5D48450;
        v79[0] = *(_OWORD *)&off_1E5D48460;
        v79[1] = xmmword_1E5D48470;
        u_strlen((const UChar *)v82);
        utrans_trans();
        kaldi::quasar::NNMTTransliterator::StringFromUnicodeVector((const UChar **)&v82, __p);
        v69 = __v.__begin_;
        if (__v.__begin_ >= __v.__end_)
        {
          v71 = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&__v, (__int128 *)__p);
        }
        else
        {
          if (SHIBYTE(v77) < 0)
          {
            std::string::__init_copy_ctor_external(__v.__begin_, (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
          }
          else
          {
            v70 = *(_OWORD *)__p;
            __v.__begin_->__r_.__value_.__r.__words[2] = v77;
            *(_OWORD *)&v69->__r_.__value_.__l.__data_ = v70;
          }
          v71 = v69 + 1;
        }
        __v.__begin_ = v71;
        if (SHIBYTE(v77) < 0)
          operator delete(__p[0]);
        if (v82)
        {
          v83 = v82;
          operator delete(v82);
        }
        v67 += 24;
      }
      while (v67 != v68);
    }
    if (&__v != (std::__split_buffer<std::string> *)a5)
      std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((std::vector<std::wstring> *)a5, __v.__first_, (__int128 *)__v.__begin_, 0xAAAAAAAAAAAAAAABLL * (((char *)__v.__begin_ - (char *)__v.__first_) >> 3));
    *(_QWORD *)&v78 = &__v;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v78);
  }
}

void sub_1ADC402BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20)
{
  uint64_t v20;

  std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::wstring> *)(v20 - 128));
  if (a19 < 0)
    operator delete(__p);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a20);
  a20 = v20 - 152;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a20);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a20);
  _Unwind_Resume(a1);
}

uint64_t std::set<std::wstring>::set[abi:ne180100](uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v4;
  uint64_t v6;

  *(_QWORD *)(a1 + 8) = 0;
  v4 = (_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = a1 + 8;
  if (a3)
  {
    v6 = 24 * a3;
    do
    {
      std::__tree<std::wstring>::__emplace_hint_unique_key_args<std::wstring,std::wstring const&>((uint64_t **)a1, v4, a2, a2);
      a2 += 24;
      v6 -= 24;
    }
    while (v6);
  }
  return a1;
}

void sub_1ADC4043C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<std::string>::destroy(v1, *(char **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<std::wstring>::__emplace_hint_unique_key_args<std::wstring,std::wstring const&>(uint64_t **a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t **v6;
  uint64_t *result;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;

  v6 = (uint64_t **)std::__tree<std::wstring>::__find_equal<std::wstring>(a1, a2, &v10, &v9, a3);
  result = *v6;
  if (!*v6)
  {
    std::__tree<std::wstring>::__construct_node<std::wstring const&>((uint64_t)a1, a4, (uint64_t)&v8);
    std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at(a1, v10, v6, v8);
    return v8;
  }
  return result;
}

uint64_t *std::__tree<std::wstring>::__find_equal<std::wstring>(_QWORD *a1, _QWORD *a2, _QWORD *a3, uint64_t *a4, uint64_t a5)
{
  _QWORD *v9;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  BOOL v17;
  _QWORD *v18;

  v9 = a1 + 1;
  if (a1 + 1 == a2
    || std::less<std::wstring>::operator()[abi:ne180100]((uint64_t)(a1 + 2), a5, (uint64_t)(a2 + 4)))
  {
    if ((_QWORD *)*a1 == a2)
    {
      v12 = a2;
LABEL_16:
      if (*a2)
      {
        *a3 = v12;
        return v12 + 1;
      }
      else
      {
        *a3 = a2;
        return a2;
      }
    }
    v11 = (_QWORD *)*a2;
    if (*a2)
    {
      do
      {
        v12 = v11;
        v11 = (_QWORD *)v11[1];
      }
      while (v11);
    }
    else
    {
      v16 = a2;
      do
      {
        v12 = (_QWORD *)v16[2];
        v17 = *v12 == (_QWORD)v16;
        v16 = v12;
      }
      while (v17);
    }
    if (std::less<std::wstring>::operator()[abi:ne180100]((uint64_t)(a1 + 2), (uint64_t)(v12 + 4), a5))
      goto LABEL_16;
    return std::__tree<std::wstring>::__find_equal<std::wstring>((uint64_t)a1, a3, a5);
  }
  if (std::less<std::wstring>::operator()[abi:ne180100]((uint64_t)(a1 + 2), (uint64_t)(a2 + 4), a5))
  {
    a4 = a2 + 1;
    v13 = a2[1];
    if (v13)
    {
      v14 = (_QWORD *)a2[1];
      do
      {
        v15 = v14;
        v14 = (_QWORD *)*v14;
      }
      while (v14);
    }
    else
    {
      v18 = a2;
      do
      {
        v15 = (_QWORD *)v18[2];
        v17 = *v15 == (_QWORD)v18;
        v18 = v15;
      }
      while (!v17);
    }
    if (v15 != v9)
    {
      if (!std::less<std::wstring>::operator()[abi:ne180100]((uint64_t)(a1 + 2), a5, (uint64_t)(v15 + 4)))
        return std::__tree<std::wstring>::__find_equal<std::wstring>((uint64_t)a1, a3, a5);
      v13 = *a4;
    }
    if (v13)
    {
      *a3 = v15;
      return v15;
    }
    else
    {
      *a3 = a2;
    }
    return a4;
  }
  *a3 = a2;
  *a4 = (uint64_t)a2;
  return a4;
}

void std::__tree<std::wstring>::__construct_node<std::wstring const&>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  char *v6;
  std::wstring *v7;

  v5 = a1 + 8;
  v6 = (char *)operator new(0x38uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  v7 = (std::wstring *)(v6 + 32);
  if (*(char *)(a2 + 23) < 0)
  {
    std::basic_string<char32_t>::__init_copy_ctor_external(v7, *(const std::wstring::value_type **)a2, *(_QWORD *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
    v7->__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 + 16);
  }
  *(_BYTE *)(a3 + 16) = 1;
}

void sub_1ADC406EC(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void **v2;
  uint64_t v3;

  *v1 = 0;
  std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,double>,void *>>>::operator()[abi:ne180100](v3, v2);
  _Unwind_Resume(a1);
}

_QWORD *std::__tree<std::wstring>::__find_equal<std::wstring>(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;

  v5 = (_QWORD *)(a1 + 8);
  v4 = *(_QWORD **)(a1 + 8);
  if (v4)
  {
    v7 = a1 + 16;
    do
    {
      while (1)
      {
        v8 = v4;
        v9 = (uint64_t)(v4 + 4);
        if (!std::less<std::wstring>::operator()[abi:ne180100](v7, a3, (uint64_t)(v4 + 4)))
          break;
        v4 = (_QWORD *)*v8;
        v5 = v8;
        if (!*v8)
          goto LABEL_10;
      }
      if (!std::less<std::wstring>::operator()[abi:ne180100](v7, v9, a3))
        break;
      v5 = v8 + 1;
      v4 = (_QWORD *)v8[1];
    }
    while (v4);
  }
  else
  {
    v8 = (_QWORD *)(a1 + 8);
  }
LABEL_10:
  *a2 = v8;
  return v5;
}

unint64_t kaldi::quasar::NNMTTransliterator::SplitUtfString(int a1, std::string *__str, uint64_t a3)
{
  std::string::size_type v4;
  BOOL v5;
  std::string::size_type size;
  std::string::size_type v7;
  std::string::size_type v9;
  std::string *v10;
  std::string::value_type v11;
  uint64_t v12;
  BOOL v13;
  std::string::size_type v14;
  unint64_t v15;
  unint64_t v16;
  __int128 v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  std::string *v22;
  std::string *v23;
  __int128 v24;
  uint64_t v25;
  int v26;
  std::string::size_type v27;
  std::string __p;
  std::__split_buffer<std::string> __v;

  v4 = HIBYTE(__str->__r_.__value_.__r.__words[2]);
  v5 = (__str->__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0;
  size = __str->__r_.__value_.__l.__size_;
  if ((__str->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v7 = HIBYTE(__str->__r_.__value_.__r.__words[2]);
  else
    v7 = __str->__r_.__value_.__l.__size_;
  if (v7)
  {
    v9 = 0;
    do
    {
      v10 = (std::string *)__str->__r_.__value_.__r.__words[0];
      if (!v5)
        v10 = __str;
      v11 = v10->__r_.__value_.__s.__data_[v9];
      if ((v11 & 0xF8) == 0xF0)
      {
        v12 = 4;
      }
      else if ((v11 & 0xF0) == 0xE0)
      {
        v12 = 3;
      }
      else
      {
        v13 = (v11 & 0xE0) == 192;
        v12 = 1;
        if (v13)
          v12 = 2;
      }
      if (v5)
        v4 = size;
      if (v9 + v12 > v4)
        v14 = 1;
      else
        v14 = v12;
      std::string::basic_string(&__p, __str, v9, v14, (std::allocator<char> *)&__v);
      v16 = *(_QWORD *)(a3 + 8);
      v15 = *(_QWORD *)(a3 + 16);
      if (v16 >= v15)
      {
        v18 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v16 - *(_QWORD *)a3) >> 3);
        v19 = v18 + 1;
        if (v18 + 1 > 0xAAAAAAAAAAAAAAALL)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v20 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v15 - *(_QWORD *)a3) >> 3);
        if (2 * v20 > v19)
          v19 = 2 * v20;
        if (v20 >= 0x555555555555555)
          v21 = 0xAAAAAAAAAAAAAAALL;
        else
          v21 = v19;
        __v.__end_cap_.__value_ = (std::allocator<std::string> *)(a3 + 16);
        if (v21)
          v22 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>(a3 + 16, v21);
        else
          v22 = 0;
        v23 = v22 + v18;
        __v.__first_ = v22;
        __v.__begin_ = v23;
        __v.__end_cap_.__value_ = &v22[v21];
        v24 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
        v23->__r_.__value_.__r.__words[2] = __p.__r_.__value_.__r.__words[2];
        *(_OWORD *)&v23->__r_.__value_.__l.__data_ = v24;
        memset(&__p, 0, sizeof(__p));
        __v.__end_ = v23 + 1;
        std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)a3, &__v);
        v25 = *(_QWORD *)(a3 + 8);
        std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::wstring> *)&__v);
        v26 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
        *(_QWORD *)(a3 + 8) = v25;
        if (v26 < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
      }
      else
      {
        v17 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
        *(_QWORD *)(v16 + 16) = *((_QWORD *)&__p.__r_.__value_.__l + 2);
        *(_OWORD *)v16 = v17;
        *(_QWORD *)(a3 + 8) = v16 + 24;
      }
      v9 += v14;
      v4 = HIBYTE(__str->__r_.__value_.__r.__words[2]);
      v5 = (__str->__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0;
      size = __str->__r_.__value_.__l.__size_;
      if ((__str->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v27 = HIBYTE(__str->__r_.__value_.__r.__words[2]);
      else
        v27 = __str->__r_.__value_.__l.__size_;
    }
    while (v9 < v27);
  }
  return 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 3);
}

void sub_1ADC409BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, std::__split_buffer<std::wstring> *a15)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL kaldi::quasar::BPE::Apply(uint64_t a1, std::string **a2, uint64_t *a3)
{
  std::string *v6;
  std::string *v7;
  std::string::size_type size;
  char v9;
  __int128 *v10;
  __int128 *v11;
  unint64_t v12;
  __int128 *v14;
  __int128 *v15;
  uint64_t v16;
  std::string __p;
  __int128 **v18;

  std::vector<std::string>::__clear[abi:ne180100](a3);
  v6 = *a2;
  v7 = a2[1];
  if (*a2 == v7)
    return 1;
  do
  {
    kaldi::quasar::BPE::ApplyWord(a1, v6, &__p);
    size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    v9 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      size = __p.__r_.__value_.__l.__size_;
    if (size)
    {
      v14 = 0;
      v15 = 0;
      v16 = 0;
      kaldi::SplitStringToVector(&__p, " ", 1, (uint64_t)&v14);
      v10 = v14;
      v11 = v15;
      if (v14 != v15)
      {
        v12 = a3[1];
        do
        {
          if (v12 >= a3[2])
          {
            v12 = std::vector<std::string>::__push_back_slow_path<std::string const&>(a3, v10);
          }
          else
          {
            std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>((uint64_t)a3, v10);
            v12 += 24;
          }
          a3[1] = v12;
          v10 = (__int128 *)((char *)v10 + 24);
        }
        while (v10 != v11);
      }
      v18 = &v14;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v18);
      v9 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    }
    if (v9 < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    ++v6;
  }
  while (v6 != v7);
  return (*(_DWORD *)(a1 + 184) - 3) < 2 || *a3 != a3[1];
}

void sub_1ADC40B3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char *a19)
{
  a19 = &a10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a19);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

float kaldi::quasar::TMTools::GreedyDecode<kaldi::quasar::TorchEncoderDecoder>(kaldi::quasar::TorchEncoderDecoder *a1, __int128 **a2, uint64_t a3, uint64_t a4, int a5, int a6)
{
  _BOOL4 v11;
  char *v12;
  char *v13;
  char *v14;
  char *v16;
  int v17;
  BOOL v18;
  float v19;
  int *v20;
  int *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  __int128 v27;
  std::__split_buffer<std::string>::pointer begin;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  std::string *v33;
  std::string *v34;
  __int128 v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  int v39;
  std::__split_buffer<std::string> __v;
  __int128 v42;
  std::string::size_type v43;
  int *v44;
  int *v45;
  uint64_t v46;
  void *v47;
  uint64_t v48;
  void *v49[2];
  uint64_t v50;
  char *v51;
  char *v52;
  uint64_t v53;

  v51 = 0;
  v52 = 0;
  v53 = 0;
  kaldi::quasar::TorchEncoderDecoder::Symbolize((uint64_t)a1, a2, (uint64_t)&v51, 0, 0);
  v11 = kaldi::quasar::TorchEncoderDecoder::Reverse(a1);
  v12 = v51;
  v13 = v52;
  if (v11)
  {
    v14 = v52 - 4;
    if (v51 != v52 && v14 > v51)
    {
      v16 = v51 + 4;
      do
      {
        v17 = *((_DWORD *)v16 - 1);
        *((_DWORD *)v16 - 1) = *(_DWORD *)v14;
        *(_DWORD *)v14 = v17;
        v14 -= 4;
        v18 = v16 >= v14;
        v16 += 4;
      }
      while (!v18);
    }
  }
  while (v12 != v13)
  {
    --*(_DWORD *)v12;
    v12 += 4;
  }
  v49[0] = 0;
  v49[1] = 0;
  v50 = 0;
  kaldi::JoinVectorToString<int>(&v51, " ", (uint64_t)v49);
  fst::VectorFst<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>::VectorFst(&v47);
  v44 = 0;
  v45 = 0;
  v46 = 0;
  v19 = kaldi::quasar::TMTools::GreedyDecode<kaldi::quasar::TorchEncoderDecoder>(a1, (uint64_t *)&v51, (uint64_t)&v44, a4, (uint64_t)&v47, a5, a6);
  std::vector<std::string>::__clear[abi:ne180100]((uint64_t *)a3);
  v20 = v44;
  v21 = v45;
  if (v44 != v45)
  {
    while (1)
    {
      v22 = *v20;
      if (!kaldi::quasar::TorchEncoderDecoder::OutputSymbols(a1))
        break;
      v23 = kaldi::quasar::TorchEncoderDecoder::OutputSymbols(a1);
      (*(void (**)(std::__split_buffer<std::string> *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v23 + 88))(&__v, v23, v22);
      if (SHIBYTE(__v.__end_) < 0)
      {
        begin = __v.__begin_;
        operator delete(__v.__first_);
        if (!begin)
          break;
      }
      else if (!HIBYTE(__v.__end_))
      {
        break;
      }
      v24 = kaldi::quasar::TorchEncoderDecoder::OutputSymbols(a1);
      (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v24 + 88))(&v42, v24, v22);
      v26 = *(_QWORD *)(a3 + 8);
      v25 = *(_QWORD *)(a3 + 16);
      if (v26 >= v25)
      {
        v29 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v26 - *(_QWORD *)a3) >> 3);
        v30 = v29 + 1;
        if (v29 + 1 > 0xAAAAAAAAAAAAAAALL)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v31 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v25 - *(_QWORD *)a3) >> 3);
        if (2 * v31 > v30)
          v30 = 2 * v31;
        if (v31 >= 0x555555555555555)
          v32 = 0xAAAAAAAAAAAAAAALL;
        else
          v32 = v30;
        __v.__end_cap_.__value_ = (std::allocator<std::string> *)(a3 + 16);
        if (v32)
          v33 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>(a3 + 16, v32);
        else
          v33 = 0;
        v34 = v33 + v29;
        __v.__first_ = v33;
        __v.__begin_ = v34;
        __v.__end_cap_.__value_ = &v33[v32];
        v35 = v42;
        v34->__r_.__value_.__r.__words[2] = v43;
        *(_OWORD *)&v34->__r_.__value_.__l.__data_ = v35;
        v43 = 0;
        v42 = 0uLL;
        __v.__end_ = v34 + 1;
        std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)a3, &__v);
        v36 = *(_QWORD *)(a3 + 8);
        std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::wstring> *)&__v);
        v37 = SHIBYTE(v43);
        *(_QWORD *)(a3 + 8) = v36;
        if (v37 < 0)
          operator delete((void *)v42);
      }
      else
      {
        v27 = v42;
        *(_QWORD *)(v26 + 16) = v43;
        *(_OWORD *)v26 = v27;
        *(_QWORD *)(a3 + 8) = v26 + 24;
      }
LABEL_33:
      if (++v20 == v21)
      {
        v20 = v44;
        goto LABEL_35;
      }
    }
    if (kaldi::g_kaldi_verbose_level >= -1)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__v);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__v, (uint64_t)"no symbol ", 10);
      std::ostream::operator<<();
      kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__v);
    }
    goto LABEL_33;
  }
LABEL_35:
  if (v20)
  {
    v45 = v20;
    operator delete(v20);
  }
  v47 = &unk_1E5D25A80;
  v38 = v48;
  if (v48)
  {
    v39 = *(_DWORD *)(v48 + 56) - 1;
    *(_DWORD *)(v48 + 56) = v39;
    if (!v39)
      (*(void (**)(uint64_t))(*(_QWORD *)v38 + 8))(v38);
  }
  if (SHIBYTE(v50) < 0)
    operator delete(v49[0]);
  if (v51)
  {
    v52 = v51;
    operator delete(v51);
  }
  return v19;
}

void sub_1ADC40EC0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__split_buffer<std::wstring> *a10)
{
  uint64_t v10;
  void *v12;
  _DWORD *v13;
  int v14;
  void *v15;

  v12 = *(void **)(v10 - 192);
  if (v12)
  {
    *(_QWORD *)(v10 - 184) = v12;
    operator delete(v12);
  }
  *(_QWORD *)(v10 - 168) = &unk_1E5D25A80;
  v13 = *(_DWORD **)(v10 - 160);
  if (v13)
  {
    v14 = v13[14] - 1;
    v13[14] = v14;
    if (!v14)
      (*(void (**)(_DWORD *))(*(_QWORD *)v13 + 8))(v13);
  }
  if (*(char *)(v10 - 129) < 0)
    operator delete(*(void **)(v10 - 152));
  v15 = *(void **)(v10 - 128);
  if (v15)
  {
    *(_QWORD *)(v10 - 120) = v15;
    operator delete(v15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t kaldi::quasar::BPE::Remove(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  int v11;
  unint64_t v12;
  unint64_t v13;
  size_t v15;
  uint64_t v16;
  unint64_t v18;
  const void *v19;
  int v20;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  std::string *v29;
  void *p_v;
  uint64_t end_high;
  std::string *v32;
  uint64_t v33;
  uint64_t v34;
  void *__p[2];
  std::string::size_type v37;
  _QWORD v38[2];
  uint64_t v39;
  uint64_t v40[8];
  std::string v41;
  uint64_t v42;
  std::__split_buffer<std::string> __v;

  std::vector<std::string>::__clear[abi:ne180100]((uint64_t *)a3);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v38);
  v6 = *a2;
  v7 = a2[1];
  if (*a2 != v7)
  {
    do
    {
      v8 = *(unsigned __int8 *)(v6 + 23);
      v9 = *(_QWORD *)(v6 + 8);
      if ((v8 & 0x80u) == 0)
        v10 = *(unsigned __int8 *)(v6 + 23);
      else
        v10 = *(_QWORD *)(v6 + 8);
      v11 = *(char *)(a1 + 159);
      if (v11 >= 0)
        v12 = *(unsigned __int8 *)(a1 + 159);
      else
        v12 = *(_QWORD *)(a1 + 144);
      v13 = v10 - v12;
      if (v10 < v12)
        goto LABEL_35;
      if ((v8 & 0x80) != 0)
      {
        if (v12 == -1 || v9 < v13)
LABEL_64:
          std::string::__throw_out_of_range[abi:ne180100]();
        v18 = v9 - v13;
        v15 = v18 >= v12 ? v12 : v18;
        v16 = *(_QWORD *)v6;
      }
      else
      {
        if (v12 == -1 || v8 < v13)
          goto LABEL_64;
        v15 = v8 - v13 >= v12 ? v12 : v8 - v13;
        v16 = v6;
      }
      v19 = v11 >= 0 ? (const void *)(a1 + 136) : *(const void **)(a1 + 136);
      v20 = memcmp((const void *)(v16 + v13), v19, v15);
      if (v15 == v12 && v20 == 0)
      {
        kaldi::quasar::BPE::StripSeparator(a1, (const std::string *)v6, (std::string *)&__v);
        if (SHIBYTE(__v.__end_) >= 0)
          p_v = &__v;
        else
          p_v = __v.__first_;
        if (SHIBYTE(__v.__end_) >= 0)
          end_high = HIBYTE(__v.__end_);
        else
          end_high = (uint64_t)__v.__begin_;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v39, (uint64_t)p_v, end_high);
      }
      else
      {
LABEL_35:
        if ((v8 & 0x80u) == 0)
          v22 = v6;
        else
          v22 = *(_QWORD *)v6;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v39, v22, v10);
        std::stringbuf::str();
        v24 = *(_QWORD *)(a3 + 8);
        v23 = *(_QWORD *)(a3 + 16);
        if (v24 >= v23)
        {
          v25 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v24 - *(_QWORD *)a3) >> 3);
          v26 = v25 + 1;
          if (v25 + 1 > 0xAAAAAAAAAAAAAAALL)
            std::vector<int>::__throw_length_error[abi:ne180100]();
          v27 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v23 - *(_QWORD *)a3) >> 3);
          if (2 * v27 > v26)
            v26 = 2 * v27;
          if (v27 >= 0x555555555555555)
            v28 = 0xAAAAAAAAAAAAAAALL;
          else
            v28 = v26;
          __v.__end_cap_.__value_ = (std::allocator<std::string> *)(a3 + 16);
          if (v28)
            v29 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>(a3 + 16, v28);
          else
            v29 = 0;
          v32 = v29 + v25;
          __v.__first_ = v29;
          __v.__begin_ = v32;
          __v.__end_cap_.__value_ = &v29[v28];
          v32->__r_.__value_.__r.__words[2] = v37;
          *(_OWORD *)&v32->__r_.__value_.__l.__data_ = *(_OWORD *)__p;
          v37 = 0;
          *(_OWORD *)__p = 0uLL;
          __v.__end_ = v32 + 1;
          std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)a3, &__v);
          v33 = *(_QWORD *)(a3 + 8);
          std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::wstring> *)&__v);
          *(_QWORD *)(a3 + 8) = v33;
        }
        else
        {
          *(_QWORD *)(v24 + 16) = v37;
          *(_OWORD *)v24 = *(_OWORD *)__p;
          *(_QWORD *)(a3 + 8) = v24 + 24;
        }
        std::string::basic_string[abi:ne180100]<0>(&__v, "");
        std::string::operator=(&v41, (const std::string *)&__v);
        std::stringbuf::__init_buf_ptrs[abi:ne180100]((uint64_t)v40);
      }
      if (SHIBYTE(__v.__end_) < 0)
        operator delete(__v.__first_);
      v6 += 24;
    }
    while (v6 != v7);
  }
  v38[0] = *MEMORY[0x1E0DE4F50];
  v34 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
  *(_QWORD *)((char *)v38 + *(_QWORD *)(v38[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
  v39 = v34;
  v40[0] = MEMORY[0x1E0DE4FB8] + 16;
  if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v41.__r_.__value_.__l.__data_);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x1AF44D094](&v42);
}

void sub_1ADC412C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19)
{
  if (a18 < 0)
    operator delete(__p);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a19);
  _Unwind_Resume(a1);
}

uint64_t kaldi::quasar::NNMTTransliterator::Transliterate(std::vector<std::string> const&,std::string const&,BOOL)::VectorUReplaceable::length(const UChar **a1)
{
  return u_strlen(*a1);
}

uint64_t kaldi::quasar::NNMTTransliterator::Transliterate(std::vector<std::string> const&,std::string const&,BOOL)::VectorUReplaceable::charAt(_QWORD *a1, int a2)
{
  if (a2 >= (unint64_t)((uint64_t)(a1[1] - *a1) >> 1))
    std::vector<std::pair<int,int>>::__throw_out_of_range[abi:ne180100]();
  return *(unsigned __int16 *)(*a1 + 2 * a2);
}

uint64_t kaldi::quasar::NNMTTransliterator::Transliterate(std::vector<std::string> const&,std::string const&,BOOL)::VectorUReplaceable::char32At(_QWORD *a1, int a2)
{
  if (a2 >= (unint64_t)((uint64_t)(a1[1] - *a1) >> 1))
    std::vector<std::pair<int,int>>::__throw_out_of_range[abi:ne180100]();
  return *(unsigned __int16 *)(*a1 + 2 * a2);
}

char *kaldi::quasar::NNMTTransliterator::Transliterate(std::vector<std::string> const&,std::string const&,BOOL)::VectorUReplaceable::replace(_QWORD *a1, int a2, int a3, UChar *__src, int32_t a5)
{
  _BYTE *v9;
  uint64_t v10;
  _BYTE *v11;
  int64_t v12;

  if (a2 != a3)
  {
    v9 = (_BYTE *)a1[1];
    v10 = *a1 + 2 * a2;
    v11 = (_BYTE *)(*a1 + 2 * a3);
    v12 = v9 - v11;
    if (v9 != v11)
      memmove((void *)(*a1 + 2 * a2), v11, v9 - v11);
    a1[1] = v10 + v12;
  }
  if (a5 == -1)
    a5 = u_strlen(__src);
  return std::vector<unsigned short>::__insert_with_size[abi:ne180100]<unsigned short const*,unsigned short const*>((uint64_t)a1, *a1 + 2 * a2, (char *)__src, (char *)&__src[a5], a5);
}

void *kaldi::quasar::NNMTTransliterator::Transliterate(std::vector<std::string> const&,std::string const&,BOOL)::VectorUReplaceable::extract(_QWORD *a1, int a2, int a3, void *__dst)
{
  return memmove(__dst, (const void *)(*a1 + 2 * a2), 2 * (a3 - a2));
}

void kaldi::quasar::NNMTTransliterator::Transliterate(std::vector<std::string> const&,std::string const&,BOOL)::VectorUReplaceable::copy(_QWORD *a1, int a2, int a3, int a4)
{
  const void *v6;
  uint64_t v7;
  uint64_t v8;
  void *__p;
  char *v10;
  uint64_t v11;

  v6 = (const void *)(*a1 + 2 * a2);
  v7 = a3;
  v8 = *a1 + 2 * a3;
  v10 = 0;
  v11 = 0;
  __p = 0;
  std::vector<unsigned short>::__init_with_size[abi:ne180100]<std::__wrap_iter<unsigned short *>,std::__wrap_iter<unsigned short *>>(&__p, v6, v8, v7 - a2);
  std::vector<unsigned short>::__insert_with_size[abi:ne180100]<unsigned short const*,unsigned short const*>((uint64_t)a1, *a1 + 2 * a4, (char *)__p, v10, (v10 - (_BYTE *)__p) >> 1);
  if (__p)
  {
    v10 = (char *)__p;
    operator delete(__p);
  }
}

void sub_1ADC414C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void kaldi::quasar::NNMTTransliterator::StringFromUnicodeVector(const UChar **a1@<X0>, _QWORD *a2@<X8>)
{
  char *begin;
  int end;
  char *v6;
  _QWORD *v7;
  const char *v8;
  size_t v9;
  _QWORD v10[34];
  int32_t pDestLength;
  std::vector<char> v12;
  UErrorCode pErrorCode;

  pErrorCode = U_ZERO_ERROR;
  memset(&v12, 0, sizeof(v12));
  pDestLength = 0;
  u_strToUTF8(0, 0, &pDestLength, *a1, -1, &pErrorCode);
  if (pDestLength == -1)
  {
    end = 0;
    begin = 0;
  }
  else
  {
    std::vector<signed char>::__append(&v12, pDestLength + 1);
    begin = v12.__begin_;
    end = (int)v12.__end_;
  }
  pErrorCode = U_ZERO_ERROR;
  v6 = u_strToUTF8(begin, end - (int)begin, 0, *a1, -1, &pErrorCode);
  if (!v6)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v10);
    v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"Failed to create UTF-8 string: ", 31);
    v8 = u_errorName(pErrorCode);
    v9 = strlen(v8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)v8, v9);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v10);
  }
  std::string::basic_string[abi:ne180100]<0>(a2, v6);
  if (v12.__begin_)
  {
    v12.__end_ = v12.__begin_;
    operator delete(v12.__begin_);
  }
}

void sub_1ADC415F8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)(v1 - 64);
  if (v3)
  {
    *(_QWORD *)(v1 - 56) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void kaldi::quasar::BPE::ApplyWord(uint64_t a1@<X0>, std::string *a2@<X1>, std::string *a3@<X8>)
{
  uint64_t v5;
  unsigned __int8 *v6;
  __int128 v7;
  std::vector<std::wstring>::pointer begin;
  uint64_t v9;
  uint64_t v10;
  __int128 *v11;
  std::wstring *v12;
  std::string *v13;
  __int128 v14;
  std::string::size_type v15;
  std::wstring *v16;
  std::string *v17;
  __int128 v18;
  std::wstring *v19;
  int v20;
  std::wstring *v21;
  uint64_t size;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  __int128 *v29;
  __int128 *v30;
  unsigned __int16 *v31;
  int v32;
  int v33;
  int v34;
  __int128 *v36;
  std::vector<std::wstring>::pointer end;
  __int128 v38;
  std::wstring *v39;
  int v40;
  const std::string::value_type *v41;
  std::string::size_type v42;
  unint64_t v43;
  unint64_t v45;
  std::vector<std::wstring>::pointer v46;
  uint64_t v47;
  std::wstring::size_type v48;
  std::string::size_type v49;
  char v50;
  std::string::size_type v51;
  uint64_t v52;
  std::vector<std::wstring>::pointer v53;
  const std::string::value_type *v54;
  const std::string::value_type *v55;
  std::vector<std::wstring>::pointer v56;
  const std::string::value_type *v57;
  std::string::size_type v58;
  unint64_t v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  std::wstring *v63;
  int v64;
  uint64_t v65;
  uint64_t v66;
  int v67;
  uint64_t v68;
  uint64_t v69;
  _QWORD *v70;
  const std::string *v71;
  std::string *v72;
  std::string::size_type v73;
  unsigned __int8 *v74;
  std::wstring *v75;
  std::string v77;
  std::vector<std::wstring> v78;
  uint64_t v79;
  void *__p;
  char v81;
  uint64_t v82;
  std::string *v83;
  std::string *v84;
  unint64_t v85;
  std::vector<std::wstring> v86;
  char v87[9];

  v5 = a1 + 88;
  if (!std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>((_QWORD *)(a1 + 88), (unsigned __int8 *)a2))
  {
    memset(&v86, 0, sizeof(v86));
    v83 = 0;
    v84 = 0;
    v85 = 0;
    kaldi::quasar::BPE::SplitUtfString(a1, a2, (uint64_t)&v86);
    begin = v86.__begin_;
    if (v86.__end_ != v86.__begin_)
    {
      v9 = 0;
      v10 = 0;
      v11 = (__int128 *)(a1 + 192);
      do
      {
        if (std::__tree<std::string>::__count_unique<std::string>(a1, (const void **)&begin[v9].__r_.__value_.__l.__data_))
        {
          v12 = &v86.__begin_[v9];
          v13 = v84;
          if ((unint64_t)v84 >= v85)
          {
LABEL_32:
            v29 = (__int128 *)std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v83, (__int128 *)v12);
            goto LABEL_35;
          }
          if (SHIBYTE(v12->__r_.__value_.__r.__words[2]) < 0)
          {
            std::string::__init_copy_ctor_external(v84, (const std::string::value_type *)v86.__begin_[v9].__r_.__value_.__l.__data_, v86.__begin_[v9].__r_.__value_.__l.__size_);
          }
          else
          {
            v14 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
            v15 = v12->__r_.__value_.__r.__words[2];
LABEL_10:
            v13->__r_.__value_.__r.__words[2] = v15;
            *(_OWORD *)&v13->__r_.__value_.__l.__data_ = v14;
          }
        }
        else
        {
          switch(*(_DWORD *)(a1 + 184))
          {
            case 0:
              v16 = &v86.__begin_[v9];
              v17 = v84;
              if ((unint64_t)v84 >= v85)
              {
                v30 = (__int128 *)std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v83, (__int128 *)v16);
              }
              else
              {
                if (SHIBYTE(v16->__r_.__value_.__r.__words[2]) < 0)
                {
                  std::string::__init_copy_ctor_external(v84, (const std::string::value_type *)v86.__begin_[v9].__r_.__value_.__l.__data_, v86.__begin_[v9].__r_.__value_.__l.__size_);
                }
                else
                {
                  v18 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
                  v84->__r_.__value_.__r.__words[2] = v16->__r_.__value_.__r.__words[2];
                  *(_OWORD *)&v17->__r_.__value_.__l.__data_ = v18;
                }
                v30 = (__int128 *)&v17[1];
              }
              v84 = (std::string *)v30;
              std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t **)a1, (const void **)&v86.__begin_[v9].__r_.__value_.__l.__data_, (uint64_t)&v86.__begin_[v9]);
              goto LABEL_36;
            case 1:
              if (kaldi::g_kaldi_verbose_level >= -1)
              {
                kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v78);
                v19 = &v86.__begin_[v9];
                v20 = SHIBYTE(v86.__begin_[v9].__r_.__value_.__r.__words[2]);
                if (v20 >= 0)
                  v21 = &v86.__begin_[v9];
                else
                  v21 = (std::wstring *)v19->__r_.__value_.__r.__words[0];
                if (v20 >= 0)
                  size = HIBYTE(v19->__r_.__value_.__r.__words[2]);
                else
                  size = v19->__r_.__value_.__l.__size_;
                v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v78, (uint64_t)v21, size);
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)" not contained in BPE encoder ", 30);
                v24 = (_QWORD *)std::ostream::operator<<();
                v25 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)" mapping to ", 12);
                v26 = *(char *)(a1 + 215);
                if (v26 >= 0)
                  v27 = a1 + 192;
                else
                  v27 = *(_QWORD *)(a1 + 192);
                if (v26 >= 0)
                  v28 = *(unsigned __int8 *)(a1 + 215);
                else
                  v28 = *(_QWORD *)(a1 + 200);
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, v27, v28);
                kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v78);
              }
              v13 = v84;
              v12 = (std::wstring *)(a1 + 192);
              if ((unint64_t)v84 >= v85)
                goto LABEL_32;
              if ((*(char *)(a1 + 215) & 0x80000000) == 0)
              {
                v14 = *v11;
                v15 = *(_QWORD *)(a1 + 208);
                goto LABEL_10;
              }
              std::string::__init_copy_ctor_external(v84, *(const std::string::value_type **)(a1 + 192), *(_QWORD *)(a1 + 200));
              break;
            case 2:
              if (*(char *)(a1 + 215) < 0)
              {
                std::string::__init_copy_ctor_external(a3, *(const std::string::value_type **)(a1 + 192), *(_QWORD *)(a1 + 200));
              }
              else
              {
                *(_OWORD *)&a3->__r_.__value_.__l.__data_ = *v11;
                a3->__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 208);
              }
              goto LABEL_136;
            case 4:
              goto LABEL_48;
            default:
              goto LABEL_36;
          }
        }
        v29 = (__int128 *)&v13[1];
LABEL_35:
        v84 = (std::string *)v29;
LABEL_36:
        ++v10;
        begin = v86.__begin_;
        ++v9;
      }
      while (v10 != 0xAAAAAAAAAAAAAAABLL * (((char *)v86.__end_ - (char *)v86.__begin_) >> 3));
    }
    if (v83 == v84)
    {
LABEL_48:
      std::string::basic_string[abi:ne180100]<0>(a3, "");
LABEL_136:
      v78.__begin_ = (std::vector<std::wstring>::pointer)&v83;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v78);
      v78.__begin_ = (std::vector<std::wstring>::pointer)&v86;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v78);
      return;
    }
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>(&v86, v83, (__int128 *)v84, 0xAAAAAAAAAAAAAAABLL * (((char *)v84 - (char *)v83) >> 3));
    v31 = (unsigned __int16 *)(a1 + 216);
    v32 = *(char *)(a1 + 239);
    if (v32 < 0)
    {
      if (*(_QWORD *)(a1 + 224) != 3)
        goto LABEL_55;
      v31 = *(unsigned __int16 **)v31;
    }
    else if (v32 != 3)
    {
      goto LABEL_55;
    }
    v33 = *v31;
    v34 = *((unsigned __int8 *)v31 + 2);
    if (v33 == 11824 && v34 == 50)
    {
      v40 = *(char *)(a1 + 183);
      if (v40 >= 0)
        v41 = (const std::string::value_type *)(a1 + 160);
      else
        v41 = *(const std::string::value_type **)(a1 + 160);
      if (v40 >= 0)
        v42 = *(unsigned __int8 *)(a1 + 183);
      else
        v42 = *(_QWORD *)(a1 + 168);
      std::string::append((std::string *)&v86.__end_[-1], v41, v42);
      memset(&v78, 0, sizeof(v78));
      while (1)
      {
        kaldi::quasar::BPE::GetPairs(a1, &v86, &v78);
        v43 = 0xAAAAAAAAAAAAAAABLL * (((char *)v78.__end_ - (char *)v78.__begin_) >> 3);
        if ((std::vector<std::wstring>::pointer)((char *)v86.__end_ - (char *)v86.__begin_) == (std::vector<std::wstring>::pointer)24
          || 0xAAAAAAAAAAAAAAABLL * (((char *)v86.__end_ - (char *)v86.__begin_) >> 3) == v43)
        {
          break;
        }
        std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>(&v86, (std::string *)v78.__begin_, (__int128 *)v78.__end_, v43);
      }
      v77.__r_.__value_.__r.__words[0] = (std::string::size_type)&v78;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v77);
      goto LABEL_105;
    }
LABEL_55:
    v36 = (__int128 *)(a1 + 160);
    end = v86.__end_;
    if (v86.__end_ >= v86.__end_cap_.__value_)
    {
      v39 = (std::wstring *)std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v86, (__int128 *)(a1 + 160));
    }
    else
    {
      if (*(char *)(a1 + 183) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)v86.__end_, *(const std::string::value_type **)(a1 + 160), *(_QWORD *)(a1 + 168));
      }
      else
      {
        v38 = *v36;
        v86.__end_->__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 176);
        *(_OWORD *)&end->__r_.__value_.__l.__data_ = v38;
      }
      v39 = end + 1;
    }
    v86.__end_ = v39;
    memset(&v78, 0, sizeof(v78));
    while (1)
    {
      kaldi::quasar::BPE::GetPairs(a1, &v86, &v78);
      v45 = 0xAAAAAAAAAAAAAAABLL * (((char *)v78.__end_ - (char *)v78.__begin_) >> 3);
      if (0xAAAAAAAAAAAAAAABLL * (((char *)v86.__end_ - (char *)v86.__begin_) >> 3) == v45)
        break;
      std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>(&v86, (std::string *)v78.__begin_, (__int128 *)v78.__end_, v45);
    }
    v77.__r_.__value_.__r.__words[0] = (std::string::size_type)&v78;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v77);
    v46 = v86.__end_;
    if (0xAAAAAAAAAAAAAAABLL * (((char *)v86.__end_ - (char *)v86.__begin_) >> 3) <= 1)
      goto LABEL_105;
    v47 = HIBYTE(v86.__end_[-1].__r_.__value_.__r.__words[2]);
    v48 = (v47 & 0x80u) == 0
        ? HIBYTE(v86.__end_[-1].__r_.__value_.__r.__words[2])
        : v86.__end_[-1].__r_.__value_.__l.__size_;
    v49 = *(unsigned __int8 *)(a1 + 183);
    v50 = v49;
    v51 = *(_QWORD *)(a1 + 168);
    v52 = (v49 & 0x80u) == 0 ? *(unsigned __int8 *)(a1 + 183) : *(_QWORD *)(a1 + 168);
    if (v48 != v52)
      goto LABEL_105;
    v53 = v86.__end_ - 1;
    v54 = *(const std::string::value_type **)v36;
    if ((v49 & 0x80u) == 0)
      v55 = (const std::string::value_type *)(a1 + 160);
    else
      v55 = *(const std::string::value_type **)v36;
    if ((v47 & 0x80) != 0)
    {
      if (memcmp(v53->__r_.__value_.__l.__data_, v55, v86.__end_[-1].__r_.__value_.__l.__size_))
      {
LABEL_105:
        std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v78);
        v59 = (unint64_t)v86.__begin_;
        if (v86.__end_ != v86.__begin_)
        {
          v60 = 0;
          v61 = 0;
          v62 = 0xAAAAAAAAAAAAAAABLL * (((char *)v86.__end_ - (char *)v86.__begin_) >> 3);
          do
          {
            if (v62 <= ++v61)
            {
              v71 = (const std::string *)(v59 + v60);
              LODWORD(v59) = *(char *)(v59 + v60 + 23);
              if ((v59 & 0x80000000) != 0)
                v59 = v71->__r_.__value_.__l.__size_;
              else
                v59 = v59;
              std::string::basic_string(&v77, v71, 0, v59 - 4, (std::allocator<char> *)v87);
              if ((v77.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v72 = &v77;
              else
                v72 = (std::string *)v77.__r_.__value_.__r.__words[0];
              if ((v77.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v73 = HIBYTE(v77.__r_.__value_.__r.__words[2]);
              else
                v73 = v77.__r_.__value_.__l.__size_;
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v78.__end_cap_.__value_, (uint64_t)v72, v73);
              if (SHIBYTE(v77.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v77.__r_.__value_.__l.__data_);
            }
            else
            {
              v63 = (std::wstring *)(v59 + v60);
              v64 = SHIBYTE(v63->__r_.__value_.__r.__words[2]);
              if (v64 >= 0)
                v65 = (uint64_t)v63;
              else
                v65 = v63->__r_.__value_.__r.__words[0];
              if (v64 >= 0)
                v66 = HIBYTE(v63->__r_.__value_.__r.__words[2]);
              else
                v66 = v63->__r_.__value_.__l.__size_;
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v78.__end_cap_.__value_, v65, v66);
              v67 = *(char *)(a1 + 159);
              if (v67 >= 0)
                v68 = a1 + 136;
              else
                v68 = *(_QWORD *)(a1 + 136);
              if (v67 >= 0)
                v69 = *(unsigned __int8 *)(a1 + 159);
              else
                v69 = *(_QWORD *)(a1 + 144);
              v70 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v78.__end_cap_.__value_, v68, v69);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v70, (uint64_t)" ", 1);
            }
            v59 = (unint64_t)v86.__begin_;
            v62 = 0xAAAAAAAAAAAAAAABLL * (((char *)v86.__end_ - (char *)v86.__begin_) >> 3);
            v60 += 24;
          }
          while (v62 > v61);
        }
        std::stringbuf::str();
        v77.__r_.__value_.__r.__words[0] = (std::string::size_type)a2;
        v74 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v5, (unsigned __int8 *)a2, (uint64_t)&std::piecewise_construct, (__int128 **)&v77);
        std::string::operator=((std::string *)(v74 + 40), a3);
        v78.__begin_ = (std::vector<std::wstring>::pointer)*MEMORY[0x1E0DE4F50];
        v75 = *(std::wstring **)(MEMORY[0x1E0DE4F50] + 72);
        *(std::vector<std::wstring>::pointer *)((char *)&v78.__begin_ + v78.__begin_[-1].__r_.__value_.__r.__words[0]) = *(std::vector<std::wstring>::pointer *)(MEMORY[0x1E0DE4F50] + 64);
        v78.__end_cap_.__value_ = v75;
        v79 = MEMORY[0x1E0DE4FB8] + 16;
        if (v81 < 0)
          operator delete(__p);
        std::streambuf::~streambuf();
        std::iostream::~basic_iostream();
        MEMORY[0x1AF44D094](&v82);
        goto LABEL_136;
      }
      operator delete(v53->__r_.__value_.__l.__data_);
      v49 = *(unsigned __int8 *)(a1 + 183);
      v54 = *(const std::string::value_type **)(a1 + 160);
      v51 = *(_QWORD *)(a1 + 168);
      v50 = *(_BYTE *)(a1 + 183);
    }
    else if (*((_BYTE *)&v86.__end_[-1].__r_.__value_.__s + 23))
    {
      v56 = v86.__end_ - 1;
      while (LOBYTE(v56->__r_.__value_.__l.__data_) == *(unsigned __int8 *)v55)
      {
        v56 = (std::vector<std::wstring>::pointer)((char *)v56 + 1);
        ++v55;
        if (!--v47)
          goto LABEL_98;
      }
      goto LABEL_105;
    }
LABEL_98:
    v86.__end_ = v46 - 1;
    if (v50 >= 0)
      v57 = (const std::string::value_type *)(a1 + 160);
    else
      v57 = v54;
    if (v50 >= 0)
      v58 = v49;
    else
      v58 = v51;
    std::string::append((std::string *)&v46[-2], v57, v58);
    goto LABEL_105;
  }
  v78.__begin_ = (std::vector<std::wstring>::pointer)a2;
  v6 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v5, (unsigned __int8 *)a2, (uint64_t)&std::piecewise_construct, (__int128 **)&v78);
  if ((char)v6[63] < 0)
  {
    std::string::__init_copy_ctor_external(a3, *((const std::string::value_type **)v6 + 5), *((_QWORD *)v6 + 6));
  }
  else
  {
    v7 = *(_OWORD *)(v6 + 40);
    a3->__r_.__value_.__r.__words[2] = *((_QWORD *)v6 + 7);
    *(_OWORD *)&a3->__r_.__value_.__l.__data_ = v7;
  }
}

void sub_1ADC41D9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void **a14)
{
  uint64_t v14;

  a14 = (void **)(v14 - 144);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a14);
  a14 = (void **)(v14 - 120);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a14);
  _Unwind_Resume(a1);
}

void kaldi::quasar::BPE::GetPairs(uint64_t a1, std::vector<std::wstring> *a2, std::vector<std::wstring> *this)
{
  std::vector<std::wstring>::pointer begin;
  __int128 *end;
  uint64_t v8;
  unint64_t v9;
  __int128 v11;
  char v12;
  void *v13;
  uint64_t v14;
  float v15;
  int v16;
  uint64_t v17;
  std::wstring *v18;
  __int128 v19;
  float Cost;
  std::string::size_type size;
  char *first;
  std::string *v23;
  std::wstring *v24;
  int v25;
  const std::string::value_type *v26;
  std::string::size_type v27;
  std::string *v28;
  void *v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  std::vector<std::wstring>::pointer v33;
  uint64_t v34;
  int v35;
  std::wstring *value;
  std::vector<std::wstring>::pointer v37;
  __int128 v38;
  __int128 *v39;
  std::wstring *v40;
  std::wstring *v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  std::wstring *v46;
  std::wstring *v47;
  __int128 v48;
  std::wstring *v49;
  int v50;
  void *__p;
  void *v52[2];
  std::wstring::size_type v53;
  std::string v54;
  std::string v55;
  std::__split_buffer<std::wstring> v56;

  begin = a2->__begin_;
  end = (__int128 *)a2->__end_;
  v8 = (char *)end - (char *)begin;
  v9 = 0xAAAAAAAAAAAAAAABLL * (((char *)end - (char *)begin) >> 3);
  if (v9 < 2)
    return;
  if (SHIBYTE(begin->__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(&v55, (const std::string::value_type *)begin->__r_.__value_.__l.__data_, begin->__r_.__value_.__l.__size_);
    begin = a2->__begin_;
    end = (__int128 *)a2->__end_;
    v8 = (char *)end - (char *)a2->__begin_;
    v9 = 0xAAAAAAAAAAAAAAABLL * (v8 >> 3);
  }
  else
  {
    v11 = *(_OWORD *)&begin->__r_.__value_.__l.__data_;
    v55.__r_.__value_.__r.__words[2] = begin->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v55.__r_.__value_.__l.__data_ = v11;
  }
  if (v8 == 24)
  {
    v12 = 0;
    v13 = 0;
  }
  else
  {
    v14 = 0;
    v12 = 0;
    __p = 0;
    v15 = *(float *)(a1 + 128);
    v16 = -1;
    v17 = 1;
    do
    {
      v18 = &begin[v17];
      if (SHIBYTE(begin[v17].__r_.__value_.__r.__words[2]) < 0)
      {
        std::string::__init_copy_ctor_external(&v54, (const std::string::value_type *)v18->__r_.__value_.__l.__data_, v18->__r_.__value_.__l.__size_);
      }
      else
      {
        v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
        v54.__r_.__value_.__r.__words[2] = v18->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v54.__r_.__value_.__l.__data_ = v19;
      }
      Cost = kaldi::quasar::BPE::GetCost(a1, (const void **)&v55.__r_.__value_.__l.__data_, (const void **)&v54.__r_.__value_.__l.__data_);
      if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v54.__r_.__value_.__l.__data_);
      if (Cost < v15 && Cost != *(float *)(a1 + 128))
      {
        if ((v55.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          size = HIBYTE(v55.__r_.__value_.__r.__words[2]);
        else
          size = v55.__r_.__value_.__l.__size_;
        std::string::basic_string[abi:ne180100]((uint64_t)&v56, size + 1);
        if (SHIBYTE(v56.__end_) >= 0)
          first = (char *)&v56;
        else
          first = (char *)v56.__first_;
        if (size)
        {
          if ((v55.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v23 = &v55;
          else
            v23 = (std::string *)v55.__r_.__value_.__r.__words[0];
          memmove(first, v23, size);
        }
        *(_WORD *)&first[size] = 32;
        v24 = &a2->__begin_[v17];
        v25 = SHIBYTE(v24->__r_.__value_.__r.__words[2]);
        if (v25 >= 0)
          v26 = (const std::string::value_type *)&a2->__begin_[v17];
        else
          v26 = (const std::string::value_type *)v24->__r_.__value_.__r.__words[0];
        if (v25 >= 0)
          v27 = HIBYTE(v24->__r_.__value_.__r.__words[2]);
        else
          v27 = v24->__r_.__value_.__l.__size_;
        v28 = std::string::append((std::string *)&v56, v26, v27);
        v29 = (void *)v28->__r_.__value_.__r.__words[0];
        v30 = HIBYTE(v28->__r_.__value_.__r.__words[2]);
        v28->__r_.__value_.__r.__words[0] = 0;
        v28->__r_.__value_.__l.__size_ = 0;
        v28->__r_.__value_.__r.__words[2] = 0;
        if (v12 < 0)
          operator delete(__p);
        if (SHIBYTE(v56.__end_) < 0)
          operator delete(v56.__first_);
        __p = v29;
        v12 = v30;
        v16 = v14;
        v15 = Cost;
      }
      std::string::operator=(&v55, (const std::string *)&a2->__begin_[v17]);
      begin = a2->__begin_;
      end = (__int128 *)a2->__end_;
      v31 = v14 + 1;
      ++v17;
      v32 = v14 + 2;
      ++v14;
    }
    while (v32 != 0xAAAAAAAAAAAAAAABLL * (((char *)end - (char *)a2->__begin_) >> 3));
    if (v16 != -1)
    {
      std::vector<std::string>::__clear[abi:ne180100]((uint64_t *)this);
      v33 = a2->__begin_;
      if (a2->__end_ != a2->__begin_)
      {
        v34 = 0;
        v35 = 0;
        do
        {
          if (v35 == v16)
          {
            std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)&v33[v34].__r_.__value_.__l.__data_, (const void **)&v33[v16 + 1].__r_.__value_.__l.__data_, (uint64_t)v52);
            v37 = this->__end_;
            value = this->__end_cap_.__value_;
            if (v37 >= value)
            {
              v42 = 0xAAAAAAAAAAAAAAABLL * (((char *)v37 - (char *)this->__begin_) >> 3);
              v43 = v42 + 1;
              if (v42 + 1 > 0xAAAAAAAAAAAAAAALL)
                std::vector<int>::__throw_length_error[abi:ne180100]();
              v44 = 0xAAAAAAAAAAAAAAABLL * (((char *)value - (char *)this->__begin_) >> 3);
              if (2 * v44 > v43)
                v43 = 2 * v44;
              if (v44 >= 0x555555555555555)
                v45 = 0xAAAAAAAAAAAAAAALL;
              else
                v45 = v43;
              v56.__end_cap_.__value_ = (std::allocator<std::wstring> *)&this->__end_cap_;
              if (v45)
                v46 = (std::wstring *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>((uint64_t)&this->__end_cap_, v45);
              else
                v46 = 0;
              v47 = v46 + v42;
              v56.__first_ = v46;
              v56.__begin_ = v47;
              v56.__end_cap_.__value_ = &v46[v45];
              v48 = *(_OWORD *)v52;
              v47->__r_.__value_.__r.__words[2] = v53;
              *(_OWORD *)&v47->__r_.__value_.__l.__data_ = v48;
              v52[1] = 0;
              v53 = 0;
              v52[0] = 0;
              v56.__end_ = v47 + 1;
              std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)this, (std::__split_buffer<std::string> *)&v56);
              v49 = this->__end_;
              std::__split_buffer<std::string>::~__split_buffer(&v56);
              v50 = SHIBYTE(v53);
              this->__end_ = v49;
              if (v50 < 0)
                operator delete(v52[0]);
            }
            else
            {
              v38 = *(_OWORD *)v52;
              v37->__r_.__value_.__r.__words[2] = v53;
              *(_OWORD *)&v37->__r_.__value_.__l.__data_ = v38;
              this->__end_ = v37 + 1;
            }
            v35 = v16 + 1;
          }
          else
          {
            v39 = (__int128 *)&v33[v34];
            v40 = this->__end_;
            if (v40 >= this->__end_cap_.__value_)
            {
              v41 = (std::wstring *)std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)this, v39);
            }
            else
            {
              std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>((uint64_t)this, v39);
              v41 = v40 + 1;
            }
            this->__end_ = v41;
          }
          v34 = ++v35;
          v33 = a2->__begin_;
        }
        while (0xAAAAAAAAAAAAAAABLL * (((char *)a2->__end_ - (char *)a2->__begin_) >> 3) > v35);
      }
      v13 = __p;
      goto LABEL_65;
    }
    v9 = v31 + 1;
    v13 = __p;
  }
  if (this != a2)
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>(this, (std::string *)begin, end, v9);
LABEL_65:
  if (v12 < 0)
    operator delete(v13);
  if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v55.__r_.__value_.__l.__data_);
}

void sub_1ADC422AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,std::__split_buffer<std::wstring> *a32)
{
  void *v32;
  char v33;

  if (v33 < 0)
    operator delete(v32);
  if (a30 < 0)
    operator delete(a25);
  _Unwind_Resume(exception_object);
}

float kaldi::quasar::BPE::GetCost(uint64_t a1, const void **a2, const void **a3)
{
  _QWORD *v4;
  unsigned __int8 *v5;
  unsigned __int8 *v6;
  void *__p[2];
  char v9;

  v4 = (_QWORD *)(a1 + 24);
  std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a2, a3, (uint64_t)__p);
  v5 = std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>(v4, (unsigned __int8 *)__p);
  if (v9 < 0)
    operator delete(__p[0]);
  v6 = (unsigned __int8 *)(a1 + 128);
  if (v5)
    v6 = v5 + 40;
  return *(float *)v6;
}

void sub_1ADC423A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

float kaldi::quasar::TMTools::GreedyDecode<kaldi::quasar::TorchEncoderDecoder>(kaldi::quasar::TorchEncoderDecoder *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, int a7)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  float *v19;
  uint64_t v20;
  float v21;
  int32x2_t v23;
  __int128 v24;
  __int128 v25;
  char v26;

  v25 = 0u;
  v24 = 0u;
  v23 = (int32x2_t)&unk_1E5D34170;
  v26 = 0;
  kaldi::CuMatrix<float>::Resize(&v23, (unint64_t)(a2[1] - *a2) >> 2, 1, 0, 0);
  v14 = *a2;
  v15 = a2[1];
  v16 = v15 - *a2;
  if (v15 != *a2)
  {
    v17 = 0;
    v18 = v16 >> 2;
    v19 = (float *)v24;
    if (v18 <= 1)
      v18 = 1;
    v20 = 4 * (int)v25;
    do
    {
      *v19 = (float)*(int *)(v14 + 4 * v17++);
      v19 = (float *)((char *)v19 + v20);
    }
    while (v18 != v17);
  }
  v21 = kaldi::quasar::TMTools::GreedyDecode<kaldi::quasar::TorchEncoderDecoder>(a1, (uint64_t)&v23, a3, a4, a5, a6, a7);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&v23);
  return v21;
}

void sub_1ADC424D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&a9);
  _Unwind_Resume(a1);
}

_QWORD *fst::VectorFst<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>::~VectorFst(_QWORD *a1)
{
  _DWORD *v2;
  int v3;

  *a1 = &unk_1E5D25A80;
  v2 = (_DWORD *)a1[1];
  if (v2)
  {
    v3 = v2[14] - 1;
    v2[14] = v3;
    if (!v3)
      (*(void (**)(_DWORD *))(*(_QWORD *)v2 + 8))(v2);
  }
  return a1;
}

_QWORD *fst::VectorFst<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>::VectorFst(_QWORD *a1)
{
  uint64_t v2;

  v2 = operator new();
  fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>::VectorFstImpl(v2);
  *a1 = &unk_1E5D28D30;
  a1[1] = v2;
  return a1;
}

void sub_1ADC4258C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10B3C40637D23BDLL);
  _Unwind_Resume(a1);
}

void fst::VectorFst<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>::~VectorFst(_QWORD *a1)
{
  _DWORD *v1;
  int v2;

  *a1 = &unk_1E5D25A80;
  v1 = (_DWORD *)a1[1];
  if (v1)
  {
    v2 = v1[14] - 1;
    v1[14] = v2;
    if (!v2)
      (*(void (**)(_DWORD *))(*(_QWORD *)v1 + 8))(v1);
  }
  JUMPOUT(0x1AF44D190);
}

uint64_t fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>::HasSequentialStates(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8));
}

uint64_t fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>::Start(uint64_t a1)
{
  return *(unsigned int *)(*(_QWORD *)(a1 + 8) + 88);
}

_QWORD *fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>::Final@<X0>(uint64_t a1@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  uint64_t v3;

  v3 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 64) + 8 * a2);
  *a3 = *(_QWORD *)v3;
  a3[2] = 0;
  a3[3] = 0;
  a3[1] = 0;
  return std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(a3 + 1, *(const void **)(v3 + 8), *(_QWORD *)(v3 + 16), (uint64_t)(*(_QWORD *)(v3 + 16) - *(_QWORD *)(v3 + 8)) >> 2);
}

unint64_t fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>::NumArcs(uint64_t a1, int a2)
{
  return 0xAAAAAAAAAAAAAAABLL
       * ((uint64_t)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 64) + 8 * a2) + 56)
                  - *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 64) + 8 * a2) + 48)) >> 4);
}

uint64_t fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>::NumInputEpsilons(uint64_t a1, int a2)
{
  return *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 64) + 8 * a2) + 32);
}

uint64_t fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>::NumOutputEpsilons(uint64_t a1, int a2)
{
  return *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 64) + 8 * a2) + 40);
}

uint64_t fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>::Properties(uint64_t a1, uint64_t a2, int a3)
{
  unint64_t v5;
  uint64_t v7;

  if (!a3)
    return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 8) + 32))(*(_QWORD *)(a1 + 8), a2);
  v7 = 0;
  v5 = fst::TestProperties<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>(a1, a2, &v7);
  *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) & (~v7 | 4) | v7 & v5;
  return v5 & a2;
}

uint64_t fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>::Type(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8) + 16;
}

void fst::Fst<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>::GetArcs(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  fst::ArcBuffer<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>::SetFromFst<fst::Fst<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>(a3, a1, a2, a4, 2);
}

_QWORD *fst::VectorFst<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>::Copy(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = (_QWORD *)operator new();
  v3 = *(_QWORD *)(a1 + 8);
  ++*(_DWORD *)(v3 + 56);
  *result = &unk_1E5D28D30;
  result[1] = v3;
  return result;
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>::InputSymbols(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 8) + 40);
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>::OutputSymbols(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 8) + 48);
}

uint64_t fst::VectorFst<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>::InitStateIterator(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *(_QWORD *)a2 = 0;
  *(_DWORD *)(a2 + 8) = (*(_QWORD *)(v2 + 72) - *(_QWORD *)(v2 + 64)) >> 3;
  return result;
}

uint64_t fst::VectorFst<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>::InitArcIterator(uint64_t result, int a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  unint64_t v6;

  v3 = *(_QWORD *)(result + 8);
  *a3 = 0;
  v5 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)(v3 + 64) + 8 * a2) + 48);
  v4 = *v5;
  v6 = 0xAAAAAAAAAAAAAAABLL * ((v5[1] - *v5) >> 4);
  if (v5[1] == *v5)
    v4 = 0;
  a3[1] = v4;
  a3[2] = v6;
  a3[3] = 0;
  return result;
}

uint64_t fst::Fst<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>::IsMemoryMapped()
{
  return 0;
}

uint64_t fst::ImplToExpandedFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>::NumStates(uint64_t a1)
{
  return (*(_QWORD *)(*(_QWORD *)(a1 + 8) + 72) - *(_QWORD *)(*(_QWORD *)(a1 + 8) + 64)) >> 3;
}

uint64_t fst::VectorFst<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _DWORD *v5;
  int v6;

  if (a1 != a2)
  {
    v4 = operator new();
    fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>::VectorFstImpl(v4, a2);
    v5 = *(_DWORD **)(a1 + 8);
    if (v5)
    {
      v6 = v5[14] - 1;
      v5[14] = v6;
      if (!v6)
        (*(void (**)(_DWORD *))(*(_QWORD *)v5 + 8))(v5);
    }
    *(_QWORD *)(a1 + 8) = v4;
  }
  return a1;
}

void sub_1ADC428C0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10B3C40637D23BDLL);
  _Unwind_Resume(a1);
}

unint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>::SetStart(uint64_t a1, int a2)
{
  uint64_t v4;
  unint64_t result;

  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>::MutateCheck(a1);
  v4 = *(_QWORD *)(a1 + 8);
  *(_DWORD *)(v4 + 88) = a2;
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
  *(_QWORD *)(v4 + 8) = result & 0xCCFFFFF0007 | (((result >> 35) & 1) << 37) | *(_QWORD *)(v4 + 8) & 4;
  return result;
}

void fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>::SetFinal(uint64_t a1, int a2, uint64_t *a3)
{
  _QWORD *v6;
  uint64_t v7;
  void *__p;
  void *v9;
  uint64_t v10;

  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>::MutateCheck(a1);
  v6 = *(_QWORD **)(a1 + 8);
  v7 = *a3;
  v9 = 0;
  v10 = 0;
  __p = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&__p, (const void *)a3[1], a3[2], (a3[2] - a3[1]) >> 2);
  fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>::SetFinal(v6, a2, (uint64_t)&v7);
  if (__p)
  {
    v9 = __p;
    operator delete(__p);
  }
}

void sub_1ADC429CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>::SetProperties(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t result;

  v6 = a3 & 4;
  result = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 8) + 32))(*(_QWORD *)(a1 + 8), v6);
  if (result != (v6 & a2))
    result = fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>::MutateCheck(a1);
  *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) & (~a3 | 4) | a3 & a2;
  return result;
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>::AddState(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;

  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>::MutateCheck(a1);
  v2 = *(_QWORD **)(a1 + 8);
  v3 = fst::VectorFstBaseImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>::AddState(v2);
  v2[1] = v2[1] & 4 | (*(uint64_t (**)(_QWORD *))(*v2 + 24))(v2) & 0x2AFFFFFF0007;
  return v3;
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>::AddArc(uint64_t a1, int a2, float *a3)
{
  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>::MutateCheck(a1);
  return fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>::AddArc(*(_QWORD **)(a1 + 8), a2, a3);
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>::DeleteStates(uint64_t a1, char **a2)
{
  _QWORD *v4;
  uint64_t result;

  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>::MutateCheck(a1);
  v4 = *(_QWORD **)(a1 + 8);
  fst::VectorFstBaseImpl<fst::VectorState<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>::DeleteStates((uint64_t)v4, a2);
  result = (*(uint64_t (**)(_QWORD *))(*v4 + 24))(v4);
  v4[1] = v4[1] & 4 | result & 0x6A5A950007;
  return result;
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>::DeleteStates(uint64_t a1)
{
  _QWORD *v2;
  uint64_t result;

  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>::MutateCheck(a1);
  v2 = *(_QWORD **)(a1 + 8);
  fst::VectorFstBaseImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>::DeleteStates((uint64_t)v2);
  result = (*(uint64_t (**)(_QWORD *))(*v2 + 24))(v2);
  v2[1] = (*((_DWORD *)v2 + 2) | result) & 4 | 0x156A5A950003;
  return result;
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>::DeleteArcs(uint64_t a1, int a2, uint64_t a3)
{
  _QWORD *v6;
  uint64_t result;

  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>::MutateCheck(a1);
  v6 = *(_QWORD **)(a1 + 8);
  fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::DeleteArcs(*(_QWORD **)(v6[8] + 8 * a2), a3);
  result = (*(uint64_t (**)(_QWORD *))(*v6 + 24))(v6);
  v6[1] = v6[1] & 4 | result & 0xA6A5A950007;
  return result;
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>::DeleteArcs(uint64_t a1, int a2)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t result;

  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>::MutateCheck(a1);
  v4 = *(_QWORD **)(a1 + 8);
  v5 = *(_QWORD **)(v4[8] + 8 * a2);
  v5[4] = 0;
  v5[5] = 0;
  std::vector<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::__clear[abi:ne180100](v5 + 6);
  result = (*(uint64_t (**)(_QWORD *))(*v4 + 24))(v4);
  v4[1] = v4[1] & 4 | result & 0xA6A5A950007;
  return result;
}

void fst::VectorFst<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>::ReserveStates(uint64_t a1, int a2)
{
  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>::MutateCheck(a1);
  std::vector<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> *,std::allocator<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> *>>::reserve((void **)(*(_QWORD *)(a1 + 8) + 64), a2);
}

uint64_t fst::VectorFst<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>::ReserveArcs(uint64_t a1, int a2, unint64_t a3)
{
  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>::MutateCheck(a1);
  return std::vector<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>::reserve((uint64_t *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 64) + 8 * a2) + 48), a3);
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>::MutableInputSymbols(uint64_t a1)
{
  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>::MutateCheck(a1);
  return *(_QWORD *)(*(_QWORD *)(a1 + 8) + 40);
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>::MutableOutputSymbols(uint64_t a1)
{
  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>::MutateCheck(a1);
  return *(_QWORD *)(*(_QWORD *)(a1 + 8) + 48);
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>::SetInputSymbols(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;

  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>::MutateCheck(a1);
  v4 = *(_QWORD *)(a1 + 8);
  result = *(_QWORD *)(v4 + 40);
  if (result != a2)
  {
    if (result)
      (*(void (**)(uint64_t))(*(_QWORD *)result + 8))(result);
    if (a2)
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
    else
      result = 0;
    *(_QWORD *)(v4 + 40) = result;
  }
  return result;
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>::SetOutputSymbols(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;

  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>::MutateCheck(a1);
  v4 = *(_QWORD *)(a1 + 8);
  result = *(_QWORD *)(v4 + 48);
  if (result != a2)
  {
    if (result)
      (*(void (**)(uint64_t))(*(_QWORD *)result + 8))(result);
    if (a2)
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
    else
      result = 0;
    *(_QWORD *)(v4 + 48) = result;
  }
  return result;
}

uint64_t fst::VectorFst<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>::InitMutableArcIterator(uint64_t a1, int a2, _QWORD *a3)
{
  _QWORD *v6;
  uint64_t result;
  uint64_t v8;

  v6 = (_QWORD *)operator new();
  *v6 = &unk_1E5D21500;
  v6[3] = 0;
  result = fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>::MutateCheck(a1);
  v8 = *(_QWORD *)(a1 + 8);
  v6[1] = *(_QWORD *)(*(_QWORD *)(v8 + 64) + 8 * a2);
  v6[2] = v8 + 8;
  *a3 = v6;
  return result;
}

void sub_1ADC42EA8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10B1C402DF695F1);
  _Unwind_Resume(a1);
}

uint64_t fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>::VectorFstImpl(uint64_t a1)
{
  std::string *v2;
  std::string __str;

  *(_QWORD *)a1 = &unk_1E5D22898;
  *(_QWORD *)(a1 + 8) = 0;
  v2 = (std::string *)(a1 + 16);
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 16), "null");
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 56) = 1;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_DWORD *)(a1 + 88) = -1;
  *(_QWORD *)a1 = &unk_1E5D1CFC8;
  std::string::basic_string[abi:ne180100]<0>(&__str, "vector");
  std::string::operator=(v2, &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a1 + 8) & 4 | 0x156A5A950003;
  return a1;
}

void sub_1ADC42F8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  _QWORD *v15;

  if (a15 < 0)
    operator delete(__p);
  fst::VectorFstBaseImpl<fst::VectorState<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>::~VectorFstBaseImpl(v15);
  _Unwind_Resume(a1);
}

uint64_t fst::VectorFstBaseImpl<fst::VectorState<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>::~VectorFstBaseImpl(_QWORD *a1)
{
  _QWORD *v2;
  unint64_t v3;

  *a1 = &unk_1E5D1FDC8;
  v2 = (_QWORD *)a1[9];
  if (v2 != (_QWORD *)a1[8])
  {
    v3 = 0;
    v2 = (_QWORD *)a1[8];
    do
    {
      fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::Destroy(v2[v3++]);
      v2 = (_QWORD *)a1[8];
    }
    while (v3 < (uint64_t)(a1[9] - (_QWORD)v2) >> 3);
  }
  if (v2)
  {
    a1[9] = v2;
    operator delete(v2);
  }
  return fst::FstImpl<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>::~FstImpl((uint64_t)a1);
}

void fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>::~VectorFstImpl(_QWORD *a1)
{
  fst::VectorFstBaseImpl<fst::VectorState<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>::~VectorFstBaseImpl(a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t fst::FstImpl<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>::HasSequentialStates()
{
  return 1;
}

uint64_t fst::FstImpl<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>::Properties(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8);
}

uint64_t fst::FstImpl<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>::Properties(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a1 + 8) & a2;
}

void fst::VectorFstBaseImpl<fst::VectorState<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>::~VectorFstBaseImpl(_QWORD *a1)
{
  fst::VectorFstBaseImpl<fst::VectorState<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>::~VectorFstBaseImpl(a1);
  JUMPOUT(0x1AF44D190);
}

void fst::FstImpl<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>::~FstImpl(uint64_t a1)
{
  fst::FstImpl<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>::~FstImpl(a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t fst::FstImpl<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>::~FstImpl(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)a1 = &unk_1E5D22898;
  v2 = *(_QWORD *)(a1 + 40);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *(_QWORD *)(a1 + 48);
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  if (*(char *)(a1 + 39) < 0)
    operator delete(*(void **)(a1 + 16));
  return a1;
}

uint64_t fst::Fst<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>::Write(uint64_t a1)
{
  fst *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  void *__p[2];
  char v12;
  char v13;

  std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
  v2 = fst::LogMessage::LogMessage((fst *)&v13, (uint64_t)__p);
  v3 = (_QWORD *)fst::cerr(v2);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"Fst::Write: No write stream method for ", 39);
  v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 72))(a1);
  v6 = *(char *)(v5 + 23);
  if (v6 >= 0)
    v7 = v5;
  else
    v7 = *(_QWORD *)v5;
  if (v6 >= 0)
    v8 = *(unsigned __int8 *)(v5 + 23);
  else
    v8 = *(_QWORD *)(v5 + 8);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, v7, v8);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)" Fst type", 9);
  fst::LogMessage::~LogMessage((fst::LogMessage *)&v13);
  if (v12 < 0)
    operator delete(__p[0]);
  return 0;
}

{
  fst *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  void *__p[2];
  char v12;
  char v13;

  std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
  v2 = fst::LogMessage::LogMessage((fst *)&v13, (uint64_t)__p);
  v3 = (_QWORD *)fst::cerr(v2);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"Fst::Write: No write filename method for ", 41);
  v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 72))(a1);
  v6 = *(char *)(v5 + 23);
  if (v6 >= 0)
    v7 = v5;
  else
    v7 = *(_QWORD *)v5;
  if (v6 >= 0)
    v8 = *(unsigned __int8 *)(v5 + 23);
  else
    v8 = *(_QWORD *)(v5 + 8);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, v7, v8);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)" Fst type", 9);
  fst::LogMessage::~LogMessage((fst::LogMessage *)&v13);
  if (v12 < 0)
    operator delete(__p[0]);
  return 0;
}

void sub_1ADC431E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1ADC432C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>::InputSymbols(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 8) + 40);
}

uint64_t fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>::OutputSymbols(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 8) + 48);
}

uint64_t fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>::operator=(uint64_t a1)
{
  fst *v2;
  _QWORD *v3;
  void *__p[2];
  char v6;
  char v7;

  if (FLAGS_fst_error_fatal)
    std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
  else
    std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
  v2 = fst::LogMessage::LogMessage((fst *)&v7, (uint64_t)__p);
  v3 = (_QWORD *)fst::cerr(v2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"ImplToFst: Assignment operator disallowed", 41);
  fst::LogMessage::~LogMessage((fst::LogMessage *)&v7);
  if (v6 < 0)
    operator delete(__p[0]);
  *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) |= 4uLL;
  return a1;
}

void sub_1ADC433C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  uint64_t v14;

  fst::LogMessage::~LogMessage((fst::LogMessage *)(v14 - 17));
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>::MutateCheck(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  int v3;

  if (*(int *)(*(_QWORD *)(result + 8) + 56) >= 2)
  {
    v1 = result;
    v2 = operator new();
    fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>::VectorFstImpl(v2, v1);
    result = *(_QWORD *)(v1 + 8);
    if (result)
    {
      v3 = *(_DWORD *)(result + 56) - 1;
      *(_DWORD *)(result + 56) = v3;
      if (!v3)
        result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
    }
    *(_QWORD *)(v1 + 8) = v2;
  }
  return result;
}

void sub_1ADC43478(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10B3C40637D23BDLL);
  _Unwind_Resume(a1);
}

uint64_t fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>::VectorFstImpl(uint64_t a1, uint64_t a2)
{
  std::string *v4;
  uint64_t *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  unint64_t v15;
  _DWORD *v16;
  std::string __p;
  _DWORD *v19;
  std::string::size_type v20;
  uint64_t v21;
  void *v22;
  void *v23;
  uint64_t v24;
  int v25;
  unsigned int v26;

  *(_QWORD *)a1 = &unk_1E5D22898;
  *(_QWORD *)(a1 + 8) = 0;
  v4 = (std::string *)(a1 + 16);
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 16), "null");
  *(_QWORD *)(a1 + 40) = 0;
  v5 = (uint64_t *)(a1 + 40);
  *(_QWORD *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 56) = 1;
  *(_QWORD *)(a1 + 64) = 0;
  v6 = (_QWORD *)(a1 + 64);
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_DWORD *)(a1 + 88) = -1;
  *(_QWORD *)a1 = &unk_1E5D1CFC8;
  std::string::basic_string[abi:ne180100]<0>(&__p, "vector");
  std::string::operator=(v4, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 112))(a2);
  v8 = *v5;
  if (*v5 != v7)
  {
    if (v8)
      (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
    if (v7)
      v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 16))(v7);
    else
      v9 = 0;
    *v5 = v9;
  }
  v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 120))(a2);
  v11 = *(_QWORD *)(a1 + 48);
  if (v11 != v10)
  {
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
    if (v10)
      v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 16))(v10);
    else
      v12 = 0;
    *(_QWORD *)(a1 + 48) = v12;
  }
  *(_DWORD *)(a1 + 88) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2);
  if ((*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, 1, 0))
  {
    v13 = fst::CountStates<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>(a2);
    std::vector<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> *,std::allocator<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> *>>::reserve((void **)(a1 + 64), v13);
  }
  v26 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a2 + 128))(a2, &v24);
  while (1)
  {
    if (!v24)
    {
      if ((int)v26 >= v25)
        goto LABEL_47;
LABEL_25:
      v14 = v26;
      goto LABEL_26;
    }
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v24 + 16))(v24))
      break;
    if (!v24)
      goto LABEL_25;
    v14 = (*(uint64_t (**)(void))(*(_QWORD *)v24 + 24))();
LABEL_26:
    fst::VectorFstBaseImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>::AddState((_QWORD *)a1);
    (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(&v21, a2, v14);
    fst::VectorFstBaseImpl<fst::VectorState<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>::SetFinal(a1, v14, &v21);
    if (v22)
    {
      v23 = v22;
      operator delete(v22);
    }
    v15 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 40))(a2, v14);
    std::vector<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>::reserve((uint64_t *)(*(_QWORD *)(*v6 + 8 * (int)v14) + 48), v15);
    v20 = 0;
    (*(void (**)(uint64_t, uint64_t, std::string *))(*(_QWORD *)a2 + 136))(a2, v14, &__p);
    while (1)
    {
      if (!__p.__r_.__value_.__r.__words[0])
      {
        if (v20 >= __p.__r_.__value_.__r.__words[2])
          goto LABEL_40;
LABEL_34:
        v16 = (_DWORD *)(__p.__r_.__value_.__l.__size_ + 48 * v20);
        goto LABEL_35;
      }
      if ((*(unsigned int (**)(std::string::size_type))(*(_QWORD *)__p.__r_.__value_.__l.__data_ + 24))(__p.__r_.__value_.__r.__words[0]))
        break;
      if (!__p.__r_.__value_.__r.__words[0])
        goto LABEL_34;
      v16 = (_DWORD *)(*(uint64_t (**)(void))(*(_QWORD *)__p.__r_.__value_.__l.__data_ + 32))();
LABEL_35:
      fst::VectorState<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>::AddArc(*(_QWORD **)(*v6 + 8 * (int)v14), v16);
      if (__p.__r_.__value_.__r.__words[0])
        (*(void (**)(std::string::size_type))(*(_QWORD *)__p.__r_.__value_.__l.__data_ + 40))(__p.__r_.__value_.__r.__words[0]);
      else
        ++v20;
    }
    if (__p.__r_.__value_.__r.__words[0])
    {
      (*(void (**)(void))(*(_QWORD *)__p.__r_.__value_.__l.__data_ + 8))();
      goto LABEL_42;
    }
LABEL_40:
    if (v19)
      --*v19;
LABEL_42:
    if (v24)
      (*(void (**)(uint64_t))(*(_QWORD *)v24 + 32))(v24);
    else
      ++v26;
  }
  if (v24)
    (*(void (**)(void))(*(_QWORD *)v24 + 8))();
LABEL_47:
  *(_QWORD *)(a1 + 8) = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, 0x3FFFFFFF0004, 0) | *(_QWORD *)(a1 + 8) & 4 | 3;
  return a1;
}

void sub_1ADC4384C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  _QWORD *v21;

  fst::VectorFstBaseImpl<fst::VectorState<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>::~VectorFstBaseImpl(v21);
  _Unwind_Resume(a1);
}

void fst::VectorFstBaseImpl<fst::VectorState<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>::SetFinal(uint64_t a1, int a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  void *__p;
  _BYTE *v6;
  uint64_t v7;

  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 64) + 8 * a2);
  v4 = *a3;
  v6 = 0;
  v7 = 0;
  __p = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&__p, (const void *)a3[1], a3[2], (a3[2] - a3[1]) >> 2);
  *(_QWORD *)v3 = v4;
  if ((uint64_t *)v3 != &v4)
    std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)(v3 + 8), (char *)__p, (uint64_t)v6, (v6 - (_BYTE *)__p) >> 2);
  if (__p)
  {
    v6 = __p;
    operator delete(__p);
  }
}

void sub_1ADC43978(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t std::vector<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>::reserve(uint64_t *a1, unint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[5];

  v4 = a1[2];
  result = (uint64_t)(a1 + 2);
  if (0xAAAAAAAAAAAAAAABLL * ((v4 - *a1) >> 4) < a2)
  {
    if (a2 >= 0x555555555555556)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v5 = a1[1] - *a1;
    v7[4] = result;
    v7[0] = std::__allocate_at_least[abi:ne180100]<std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>(result, a2);
    v7[1] = v7[0] + v5;
    v7[2] = v7[0] + v5;
    v7[3] = v7[0] + 48 * v6;
    std::vector<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>::__swap_out_circular_buffer(a1, v7);
    return std::__split_buffer<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::~__split_buffer((uint64_t)v7);
  }
  return result;
}

void sub_1ADC43A30(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,std::reverse_iterator<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>*>,std::reverse_iterator<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>*>,std::reverse_iterator<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,std::reverse_iterator<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>*>,std::reverse_iterator<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>*>,std::reverse_iterator<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v16[3];
  char v17;
  __int128 v18;
  __int128 v19;

  v7 = a7;
  *(_QWORD *)&v19 = a6;
  *((_QWORD *)&v19 + 1) = a7;
  v18 = v19;
  v16[0] = a1;
  v16[1] = &v18;
  v16[2] = &v19;
  v17 = 0;
  if (a3 == a5)
  {
    v14 = a6;
  }
  else
  {
    v9 = a3;
    v10 = a3;
    do
    {
      v11 = *(_QWORD *)(v10 - 48);
      v10 -= 48;
      *(_QWORD *)(v7 - 48) = v11;
      v12 = *(_QWORD *)(v10 + 8);
      *(_QWORD *)(v7 - 32) = 0;
      v13 = v7 - 32;
      *(_QWORD *)(v7 - 40) = v12;
      *(_QWORD *)(v13 + 8) = 0;
      *(_QWORD *)(v13 + 16) = 0;
      std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>((_QWORD *)(v7 - 32), *(const void **)(v10 + 16), *(_QWORD *)(v10 + 24), (uint64_t)(*(_QWORD *)(v10 + 24) - *(_QWORD *)(v10 + 16)) >> 2);
      *(_DWORD *)(v7 - 8) = *(_DWORD *)(v9 - 8);
      v7 = *((_QWORD *)&v19 + 1) - 48;
      *((_QWORD *)&v19 + 1) -= 48;
      v9 = v10;
    }
    while (v10 != a5);
    v14 = v19;
  }
  v17 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,std::reverse_iterator<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v16);
  return v14;
}

void sub_1ADC43B88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,std::reverse_iterator<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,std::reverse_iterator<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>,std::reverse_iterator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>*>>::operator()[abi:ne180100](a1);
  return a1;
}

uint64_t fst::VectorState<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>::AddArc(_QWORD *a1, _DWORD *a2)
{
  uint64_t *v3;
  unint64_t v4;
  uint64_t result;

  if (!*a2)
    ++a1[4];
  if (!a2[1])
    ++a1[5];
  v3 = a1 + 6;
  v4 = a1[7];
  if (v4 >= a1[8])
  {
    result = std::vector<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>::__push_back_slow_path<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int> const&>(v3, (uint64_t)a2);
  }
  else
  {
    std::vector<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>::__construct_one_at_end[abi:ne180100]<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int> const&>((uint64_t)v3, (uint64_t)a2);
    result = v4 + 48;
  }
  a1[7] = result;
  return result;
}

_QWORD *std::vector<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>::__construct_one_at_end[abi:ne180100]<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int> const&>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD *result;

  v4 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)v4 = *(_QWORD *)a2;
  *(_QWORD *)(v4 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(v4 + 24) = 0;
  *(_QWORD *)(v4 + 32) = 0;
  *(_QWORD *)(v4 + 16) = 0;
  result = std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>((_QWORD *)(v4 + 16), *(const void **)(a2 + 16), *(_QWORD *)(a2 + 24), (uint64_t)(*(_QWORD *)(a2 + 24) - *(_QWORD *)(a2 + 16)) >> 2);
  *(_DWORD *)(v4 + 40) = *(_DWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 8) = v4 + 48;
  return result;
}

void sub_1ADC43CA4(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>::__push_back_slow_path<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int> const&>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  _DWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v15[2];
  _QWORD *v16;
  char *v17;
  uint64_t *v18;

  v3 = *a1;
  v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 4);
  v5 = v4 + 1;
  if (v4 + 1 > 0x555555555555555)
    std::vector<int>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 4);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x2AAAAAAAAAAAAAALL)
    v9 = 0x555555555555555;
  else
    v9 = v5;
  v18 = a1 + 2;
  if (v9)
    v10 = std::__allocate_at_least[abi:ne180100]<std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>(v7, v9);
  else
    v10 = 0;
  v11 = &v10[12 * v4];
  v15[0] = v10;
  v15[1] = v11;
  v16 = v11;
  v17 = (char *)&v10[12 * v9];
  *v11 = *(_QWORD *)a2;
  v12 = *(_QWORD *)(a2 + 8);
  v11[2] = 0;
  v11 += 2;
  *(v11 - 1) = v12;
  v11[1] = 0;
  v11[2] = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(v11, *(const void **)(a2 + 16), *(_QWORD *)(a2 + 24), (uint64_t)(*(_QWORD *)(a2 + 24) - *(_QWORD *)(a2 + 16)) >> 2);
  v10[12 * v4 + 10] = *(_DWORD *)(a2 + 40);
  v16 += 6;
  std::vector<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>::__swap_out_circular_buffer(a1, v15);
  v13 = a1[1];
  std::__split_buffer<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::~__split_buffer((uint64_t)v15);
  return v13;
}

void sub_1ADC43DCC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

unint64_t fst::TestProperties<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  unint64_t v6;
  unint64_t v7;
  fst *v8;
  _QWORD *v9;
  _QWORD *v10;
  void *__p[2];
  char v13;
  char v14;

  if (!FLAGS_fst_verify_properties)
    return fst::ComputeProperties<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>(a1, a2, a3, 1);
  v6 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 64))(a1, 0x3FFFFFFF0007, 0);
  v7 = fst::ComputeProperties<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>(a1, a2, a3, 0);
  if (!fst::CompatProperties(v6, v7))
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
    v8 = fst::LogMessage::LogMessage((fst *)&v14, (uint64_t)__p);
    v9 = (_QWORD *)fst::cerr(v8);
    v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"TestProperties: stored Fst properties incorrect", 47);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)" (stored: props1, computed: props2)", 35);
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v14);
    if (v13 < 0)
      operator delete(__p[0]);
  }
  return v7;
}

void sub_1ADC43EEC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

unint64_t fst::ComputeProperties<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>(uint64_t a1, uint64_t a2, uint64_t *a3, int a4)
{
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  std::vector<unsigned int>::size_type v18;
  char v19;
  char *v20;
  int v21;
  int v22;
  unint64_t v23;
  float v24;
  float v25;
  int v26;
  std::vector<unsigned int>::pointer end;
  unsigned int *v28;
  std::vector<unsigned int>::pointer begin;
  int64_t v30;
  unint64_t v31;
  int64_t v32;
  unint64_t v33;
  char *v34;
  unsigned int *v35;
  unsigned int v36;
  std::vector<unsigned int>::pointer v37;
  unsigned int *v38;
  std::vector<unsigned int>::pointer v39;
  int64_t v40;
  unint64_t v41;
  int64_t v42;
  unint64_t v43;
  char *v44;
  unsigned int *v45;
  unsigned int v46;
  unint64_t v47;
  std::vector<unsigned int>::pointer v48;
  unsigned int v49;
  unint64_t v50;
  unsigned int v51;
  unsigned int v52;
  unint64_t v53;
  std::vector<unsigned int>::pointer v54;
  unsigned int v55;
  unint64_t v56;
  unsigned int v57;
  unsigned int v58;
  __n128 v59;
  uint64_t v61;
  uint64_t v62;
  void *__p;
  void *v64;
  _DWORD *v65;
  unint64_t v66;
  uint64_t v67;
  int v68;
  unsigned int v69;
  std::vector<unsigned int> v70;
  std::vector<unsigned int> v71;
  uint64_t v72;
  uint64_t v73;
  void *v74;
  unint64_t *v75;
  uint64_t v76;
  int v77;
  unint64_t v78;
  float v79;
  int v80;
  float v81;
  float v82;

  v7 = a1;
  v8 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 64))(a1, 0x3FFFFFFF0007, 0);
  v9 = v8;
  if (!a4
    || (v10 = v8 & 0x3FFFFFFF0000 | (2 * v8) & 0x2AAAAAAA0000 | (v8 >> 1) & 0x155555550000 | 7, (a2 & ~v10) != 0))
  {
    v9 = v8 & 7;
    v78 = v9;
    v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 16))(v7);
    if ((a2 & 0xF3C00000000) != 0 && v11)
    {
      v72 = 0;
      v73 = 0;
      v74 = 0;
      v75 = &v78;
      fst::DfsVisit<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>,fst::SccVisitor<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,fst::AnyArcFilter<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>(v7, &v72, 0);
      v9 = v78;
    }
    if ((a2 & 0xFFFFF0C3FFFFFFF8) != 0)
    {
      v12 = a2 & 0xC0000;
      v13 = 0x10425A810000;
      if ((a2 & 0xC0000) != 0)
        v13 = 0x10425A850000;
      v14 = v9 | v13;
      v15 = a2 & 0x300000;
      if ((a2 & 0x300000) != 0)
        v14 |= 0x100000uLL;
      v78 = v14;
      memset(&v71, 0, sizeof(v71));
      memset(&v70, 0, sizeof(v70));
      v69 = 0;
      (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v7 + 128))(v7, &v67);
      v16 = 0;
      v61 = v7;
LABEL_12:
      if (v67)
      {
        if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v67 + 16))(v67))
        {
          if (v67)
          {
            v17 = (*(uint64_t (**)(void))(*(_QWORD *)v67 + 24))();
LABEL_18:
            v18 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v7 + 40))(v7, v17);
            v74 = 0;
            v75 = 0;
            v76 = 0;
            v71.__end_ = v71.__begin_;
            v70.__end_ = v70.__begin_;
            if (v12)
              std::vector<int>::reserve(&v71, v18);
            if (v15)
              std::vector<int>::reserve(&v70, v18);
            v66 = 0;
            (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(_QWORD *)v7 + 136))(v7, v17, &v62);
            v19 = 1;
            while (1)
            {
              if (v62)
              {
                if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v62 + 24))(v62))
                {
                  if (v62)
                  {
                    (*(void (**)(void))(*(_QWORD *)v62 + 8))();
                  }
                  else
                  {
LABEL_94:
                    if (v65)
                      --*v65;
                  }
                  v7 = v61;
                  if (v12
                    && (std::__sort<std::__less<int,int> &,int *>(),
                        (std::vector<unsigned int>::pointer)((char *)v71.__end_ - (char *)v71.__begin_) >= (std::vector<unsigned int>::pointer)5))
                  {
                    v47 = v71.__end_ - v71.__begin_;
                    if (v47 <= 2)
                      v47 = 2;
                    v48 = v71.__begin_ + 1;
                    v49 = *v71.__begin_;
                    v50 = v47 - 1;
                    while (1)
                    {
                      v52 = *v48++;
                      v51 = v52;
                      if (v52 == v49)
                        break;
                      v49 = v51;
                      if (!--v50)
                        goto LABEL_103;
                    }
                    v78 = v78 & 0xFFFFFFFFFFF3FFFFLL | 0x80000;
                    if (!v15)
                    {
LABEL_114:
                      if (v16 >= 1)
                        v78 = v78 & 0xFFFFCFFFFFFFFFFFLL | 0x200000000000;
                      (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v61 + 32))(&v62, v61, v17);
                      v81 = *((float *)&v62 + 1);
                      v82 = *(float *)&v62;
                      v80 = 2139095040;
                      v79 = INFINITY;
                      if (*(float *)&v62 == INFINITY && v81 == v79)
                      {
                        if ((*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v61 + 40))(v61, v17) != 1)
                          v78 = v78 & 0xFFFFCFFFFFFFFFFFLL | 0x200000000000;
                      }
                      else
                      {
                        v81 = *((float *)&v62 + 1);
                        v82 = *(float *)&v62;
                        v80 = 0;
                        v79 = 0.0;
                        v59.n128_u32[0] = v62;
                        if (*(float *)&v62 != 0.0 || (v59.n128_f32[0] = v81, v81 != v79))
                          v78 = v78 & 0xFFFFFFFCFFFFFFFFLL | 0x100000000;
                        ++v16;
                      }
                      if (__p)
                      {
                        v64 = __p;
                        operator delete(__p);
                      }
                      if (v74)
                      {
                        v75 = (unint64_t *)v74;
                        operator delete(v74);
                      }
                      if (v67)
                        (*(void (**)(uint64_t, __n128))(*(_QWORD *)v67 + 32))(v67, v59);
                      else
                        ++v69;
                      goto LABEL_12;
                    }
                  }
                  else
                  {
LABEL_103:
                    if (!v15)
                      goto LABEL_114;
                  }
                  std::__sort<std::__less<int,int> &,int *>();
                  if ((std::vector<unsigned int>::pointer)((char *)v70.__end_ - (char *)v70.__begin_) >= (std::vector<unsigned int>::pointer)5)
                  {
                    v53 = v70.__end_ - v70.__begin_;
                    if (v53 <= 2)
                      v53 = 2;
                    v54 = v70.__begin_ + 1;
                    v55 = *v70.__begin_;
                    v56 = v53 - 1;
                    while (1)
                    {
                      v58 = *v54++;
                      v57 = v58;
                      if (v58 == v55)
                        break;
                      v55 = v57;
                      if (!--v56)
                        goto LABEL_114;
                    }
                    v78 = v78 & 0xFFFFFFFFFFCFFFFFLL | 0x200000;
                  }
                  goto LABEL_114;
                }
                if (v62)
                {
                  v20 = (char *)(*(uint64_t (**)(void))(*(_QWORD *)v62 + 32))();
                  goto LABEL_29;
                }
              }
              else if (v66 >= (unint64_t)v64)
              {
                goto LABEL_94;
              }
              v20 = (char *)__p + 48 * v66;
LABEL_29:
              v21 = *(_DWORD *)v20;
              v22 = *(_DWORD *)v20;
              if (*(_DWORD *)v20 != *((_DWORD *)v20 + 1))
              {
                v78 = v78 & 0xFFFFFFFFFFFCFFFFLL | 0x20000;
                v22 = *((_DWORD *)v20 + 1);
              }
              if (v21 | v22)
              {
                if (v21)
                {
                  if (v22)
                    goto LABEL_35;
                  goto LABEL_39;
                }
                v23 = v78;
              }
              else
              {
                v23 = v78 & 0xFFFFFFFFFF3FFFFFLL | 0x400000;
              }
              v78 = v23 & 0xFFFFFFFFFCFFFFFFLL | 0x1000000;
              if (v22)
              {
LABEL_35:
                if ((v19 & 1) != 0)
                  goto LABEL_44;
                goto LABEL_40;
              }
LABEL_39:
              v78 = v78 & 0xFFFFFFFFF3FFFFFFLL | 0x4000000;
              if ((v19 & 1) != 0)
                goto LABEL_44;
LABEL_40:
              if (v21 < (int)v72)
                v78 = v78 & 0xFFFFFFFFCFFFFFFFLL | 0x20000000;
              if (v22 < SHIDWORD(v72))
                v78 = v78 & 0xFFFFFFFF3FFFFFFFLL | 0x80000000;
LABEL_44:
              v25 = *((float *)v20 + 2);
              v24 = *((float *)v20 + 3);
              v82 = v25;
              v81 = v24;
              v80 = 0;
              v79 = 0.0;
              if (v25 != 0.0 || v81 != v79)
              {
                v82 = v25;
                v81 = v24;
                v80 = 2139095040;
                v79 = INFINITY;
                if (v25 != INFINITY || v81 != v79)
                  v78 = v78 & 0xFFFFFFFCFFFFFFFFLL | 0x100000000;
              }
              v26 = *((_DWORD *)v20 + 10);
              if (v26 <= (int)v17)
                v78 = v78 & 0xFFFFFF3FFFFFFFFFLL | 0x8000000000;
              if (v26 != (_DWORD)v17 + 1)
                v78 = v78 & 0xFFFFCFFFFFFFFFFFLL | 0x200000000000;
              v72 = *(_QWORD *)v20;
              fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>::operator=((uint64_t)&v73, (uint64_t)(v20 + 8));
              v77 = *((_DWORD *)v20 + 10);
              if (v12)
              {
                end = v71.__end_;
                if (v71.__end_ >= v71.__end_cap_.__value_)
                {
                  begin = v71.__begin_;
                  v30 = v71.__end_ - v71.__begin_;
                  v31 = v30 + 1;
                  if ((unint64_t)(v30 + 1) >> 62)
                    goto LABEL_143;
                  v32 = (char *)v71.__end_cap_.__value_ - (char *)v71.__begin_;
                  if (((char *)v71.__end_cap_.__value_ - (char *)v71.__begin_) >> 1 > v31)
                    v31 = v32 >> 1;
                  if ((unint64_t)v32 >= 0x7FFFFFFFFFFFFFFCLL)
                    v33 = 0x3FFFFFFFFFFFFFFFLL;
                  else
                    v33 = v31;
                  if (v33)
                  {
                    v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v71.__end_cap_, v33);
                    begin = v71.__begin_;
                    end = v71.__end_;
                  }
                  else
                  {
                    v34 = 0;
                  }
                  v35 = (unsigned int *)&v34[4 * v30];
                  *v35 = *(_DWORD *)v20;
                  v28 = v35 + 1;
                  while (end != begin)
                  {
                    v36 = *--end;
                    *--v35 = v36;
                  }
                  v71.__begin_ = v35;
                  v71.__end_ = v28;
                  v71.__end_cap_.__value_ = (unsigned int *)&v34[4 * v33];
                  if (begin)
                    operator delete(begin);
                }
                else
                {
                  *v71.__end_ = *(_DWORD *)v20;
                  v28 = end + 1;
                }
                v71.__end_ = v28;
              }
              if (v15)
              {
                v37 = v70.__end_;
                if (v70.__end_ >= v70.__end_cap_.__value_)
                {
                  v39 = v70.__begin_;
                  v40 = v70.__end_ - v70.__begin_;
                  v41 = v40 + 1;
                  if ((unint64_t)(v40 + 1) >> 62)
LABEL_143:
                    std::vector<int>::__throw_length_error[abi:ne180100]();
                  v42 = (char *)v70.__end_cap_.__value_ - (char *)v70.__begin_;
                  if (((char *)v70.__end_cap_.__value_ - (char *)v70.__begin_) >> 1 > v41)
                    v41 = v42 >> 1;
                  if ((unint64_t)v42 >= 0x7FFFFFFFFFFFFFFCLL)
                    v43 = 0x3FFFFFFFFFFFFFFFLL;
                  else
                    v43 = v41;
                  if (v43)
                  {
                    v44 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v70.__end_cap_, v43);
                    v39 = v70.__begin_;
                    v37 = v70.__end_;
                  }
                  else
                  {
                    v44 = 0;
                  }
                  v45 = (unsigned int *)&v44[4 * v40];
                  *v45 = *((_DWORD *)v20 + 1);
                  v38 = v45 + 1;
                  while (v37 != v39)
                  {
                    v46 = *--v37;
                    *--v45 = v46;
                  }
                  v70.__begin_ = v45;
                  v70.__end_ = v38;
                  v70.__end_cap_.__value_ = (unsigned int *)&v44[4 * v43];
                  if (v39)
                    operator delete(v39);
                }
                else
                {
                  *v70.__end_ = *((_DWORD *)v20 + 1);
                  v38 = v37 + 1;
                }
                v70.__end_ = v38;
              }
              if (v62)
              {
                (*(void (**)(uint64_t))(*(_QWORD *)v62 + 40))(v62);
                v19 = 0;
              }
              else
              {
                v19 = 0;
                ++v66;
              }
            }
          }
LABEL_17:
          v17 = v69;
          goto LABEL_18;
        }
        if (v67)
          (*(void (**)(void))(*(_QWORD *)v67 + 8))();
      }
      else if ((int)v69 < v68)
      {
        goto LABEL_17;
      }
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v7 + 24))(v7) != -1
        && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v7 + 24))(v7))
      {
        v78 = v78 & 0xFFFFCFFFFFFFFFFFLL | 0x200000000000;
      }
      if (v70.__begin_)
      {
        v70.__end_ = v70.__begin_;
        operator delete(v70.__begin_);
      }
      if (v71.__begin_)
      {
        v71.__end_ = v71.__begin_;
        operator delete(v71.__begin_);
      }
      v9 = v78;
    }
    v10 = v9 & 0x3FFFFFFF0000 | (2 * v9) & 0x2AAAAAAA0000 | (v9 >> 1) & 0x155555550000 | 7;
  }
  *a3 = v10;
  return v9;
}

void sub_1ADC447BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33)
{
  if (__p)
    operator delete(__p);
  if (a27)
    operator delete(a27);
  _Unwind_Resume(exception_object);
}

void fst::DfsVisit<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>,fst::SccVisitor<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,fst::AnyArcFilter<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>(uint64_t a1, uint64_t *a2, char a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char inited;
  char v10;
  _QWORD *v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  std::vector<char>::pointer begin;
  unint64_t v19;
  uint64_t v20;
  _DWORD *v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  int v31;
  std::vector<char>::pointer end;
  char *v33;
  std::vector<char>::pointer v34;
  int64_t v35;
  int64_t v36;
  unint64_t v37;
  size_t v38;
  char *v39;
  char *v40;
  char *v41;
  char *v42;
  char v43;
  char v44;
  uint64_t v45;
  int v46;
  std::vector<char>::value_type v47[8];
  std::vector<char>::value_type __x[8];
  int v49;
  int v50;
  void *v51;
  _QWORD v52[6];
  _QWORD *v53;
  _OWORD v54[2];
  __int128 v55;
  std::vector<char> v56;

  fst::SccVisitor<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::InitVisit((uint64_t)a2, a1);
  v46 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  if (v46 == -1)
  {
    fst::SccVisitor<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::FinishVisit((uint64_t)a2);
    return;
  }
  memset(&v56, 0, sizeof(v56));
  v55 = 0u;
  memset(v54, 0, sizeof(v54));
  fst::MemoryPool<fst::DfsState<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>::MemoryPool(&v51, 64);
  v45 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 64))(a1, 1, 0);
  if (v45)
    v6 = fst::CountStates<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>(a1);
  else
    v6 = (v46 + 1);
  __x[0] = 0;
  if ((std::vector<char>::pointer)(int)v6 <= (std::vector<char>::pointer)(v56.__end_ - v56.__begin_))
  {
    if ((std::vector<char>::pointer)(int)v6 < (std::vector<char>::pointer)(v56.__end_ - v56.__begin_))
      v56.__end_ = &v56.__begin_[(int)v6];
  }
  else
  {
    std::vector<char>::__append(&v56, (int)v6 - (unint64_t)(v56.__end_ - v56.__begin_), __x);
  }
  v50 = 0;
  (*(void (**)(uint64_t, std::vector<char>::value_type *))(*(_QWORD *)a1 + 128))(a1, __x);
  if (v46 >= (int)v6)
    goto LABEL_97;
  v7 = v46;
  v44 = a3;
  do
  {
    v56.__begin_[(int)v7] = 1;
    v8 = (uint64_t)v53;
    if (v53)
    {
      v53 = (_QWORD *)v53[6];
    }
    else
    {
      v8 = fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::Link>::Allocate(v52, 1);
      *(_QWORD *)(v8 + 48) = 0;
    }
    *(_DWORD *)v8 = v7;
    *(_QWORD *)(v8 + 40) = 0;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 136))(a1, v7, v8 + 8);
    *(_QWORD *)v47 = v8;
    std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>> *>>::push_back(v54, v47);
    inited = fst::SccVisitor<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::InitState(a2, v7, v7);
LABEL_16:
    v10 = inited;
    while (*((_QWORD *)&v55 + 1))
    {
      v11 = *(_QWORD **)(*(_QWORD *)(*((_QWORD *)&v54[0] + 1)
                                   + (((unint64_t)(*((_QWORD *)&v55 + 1) + v55 - 1) >> 6) & 0x3FFFFFFFFFFFFF8))
                       + 8 * ((*((_QWORD *)&v55 + 1) + v55 - 1) & 0x1FF));
      v12 = *(int *)v11;
      v13 = v56.__end_ - v56.__begin_;
      if (v56.__end_ - v56.__begin_ <= v12)
      {
        v6 = v12 + 1;
        v47[0] = 0;
        if (v12 + 1 <= v13)
        {
          if (v12 + 1 < v13)
            v56.__end_ = &v56.__begin_[v6];
        }
        else
        {
          std::vector<char>::__append(&v56, v12 + 1 - v13, v47);
        }
      }
      if ((v10 & 1) == 0)
        goto LABEL_33;
      v14 = v11[1];
      if (v14)
      {
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v14 + 24))(v14))
          goto LABEL_33;
        v15 = v11[1];
        if (!v15)
          goto LABEL_29;
        v16 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 32))(v15);
LABEL_30:
        v17 = *(int *)(v16 + 40);
        begin = v56.__begin_;
        v19 = v56.__end_ - v56.__begin_;
        if (v56.__end_ - v56.__begin_ <= v17)
        {
          v6 = (v17 + 1);
          v47[0] = 0;
          if ((int)v6 <= v19)
          {
            if ((int)v6 < v19)
              v56.__end_ = &v56.__begin_[(int)v6];
          }
          else
          {
            std::vector<char>::__append(&v56, (int)v6 - v19, v47);
            v17 = *(int *)(v16 + 40);
            begin = v56.__begin_;
          }
        }
        v26 = begin[v17];
        if (v26 == 1)
        {
          v10 = fst::SccVisitor<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>::BackArc((uint64_t)a2, v12, v16);
          v25 = v11[1];
          if (v25)
            goto LABEL_50;
LABEL_51:
          ++v11[5];
        }
        else
        {
          if (v26 != 2)
          {
            begin[v17] = 1;
            v27 = (uint64_t)v53;
            if (v53)
            {
              v53 = (_QWORD *)v53[6];
            }
            else
            {
              v27 = fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::Link>::Allocate(v52, 1);
              *(_QWORD *)(v27 + 48) = 0;
            }
            *(_DWORD *)v27 = *(_DWORD *)(v16 + 40);
            *(_QWORD *)(v27 + 40) = 0;
            (*(void (**)(uint64_t))(*(_QWORD *)a1 + 136))(a1);
            *(_QWORD *)v47 = v27;
            std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>> *>>::push_back(v54, v47);
            inited = fst::SccVisitor<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::InitState(a2, *(_DWORD *)(v16 + 40), v7);
            goto LABEL_16;
          }
          v10 = fst::SccVisitor<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>::ForwardOrCrossArc((_QWORD **)a2, v12, v16);
          v25 = v11[1];
          if (!v25)
            goto LABEL_51;
LABEL_50:
          (*(void (**)(uint64_t))(*(_QWORD *)v25 + 40))(v25);
        }
      }
      else
      {
        if (v11[5] < v11[3])
        {
LABEL_29:
          v16 = v11[2] + 48 * v11[5];
          goto LABEL_30;
        }
LABEL_33:
        v56.__begin_[v12] = 2;
        v20 = v11[1];
        if (v20)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
        }
        else
        {
          v21 = (_DWORD *)v11[4];
          if (v21)
            --*v21;
        }
        v11[6] = v53;
        v53 = v11;
        --*((_QWORD *)&v55 + 1);
        std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::__maybe_remove_back_spare[abi:ne180100](v54, 1);
        if (*((_QWORD *)&v55 + 1))
        {
          v22 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)&v54[0] + 1)
                                      + (((unint64_t)(*((_QWORD *)&v55 + 1) + v55 - 1) >> 6) & 0x3FFFFFFFFFFFFF8))
                          + 8 * ((*((_QWORD *)&v55 + 1) + v55 - 1) & 0x1FF));
          v23 = *(_DWORD *)v22;
          v24 = *(_QWORD *)(v22 + 8);
          if (v24)
            (*(void (**)(uint64_t))(*(_QWORD *)v24 + 32))(v24);
          fst::SccVisitor<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>::FinishState((uint64_t)a2, v12, v23);
          v25 = *(_QWORD *)(v22 + 8);
          if (v25)
            goto LABEL_50;
          ++*(_QWORD *)(v22 + 40);
        }
        else
        {
          fst::SccVisitor<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>::FinishState((uint64_t)a2, v12, -1);
        }
      }
    }
    if ((a3 & 1) != 0)
      break;
    if ((_DWORD)v7 == v46)
      v7 = 0;
    else
      v7 = (v7 + 1);
    if ((int)v7 < (int)v6)
    {
      v28 = &v56.__begin_[(int)v7];
      v29 = (int)v6 - (uint64_t)(int)v7;
      while (*v28++)
      {
        v7 = (v7 + 1);
        if (!--v29)
        {
          v7 = v6;
          break;
        }
      }
    }
    if (v45 || (_DWORD)v7 != (_DWORD)v6)
      continue;
LABEL_67:
    if (*(_QWORD *)__x)
    {
      if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)__x + 16))(*(_QWORD *)__x) & 1) != 0)
        continue;
      if (*(_QWORD *)__x)
      {
        v31 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)__x + 24))(*(_QWORD *)__x);
        goto LABEL_73;
      }
    }
    else if (v50 >= v49)
    {
      continue;
    }
    v31 = v50;
LABEL_73:
    if (v31 != (_DWORD)v6)
    {
      if (*(_QWORD *)__x)
        (*(void (**)(_QWORD))(**(_QWORD **)__x + 32))(*(_QWORD *)__x);
      else
        ++v50;
      goto LABEL_67;
    }
    end = v56.__end_;
    if (v56.__end_ >= v56.__end_cap_.__value_)
    {
      v34 = v56.__begin_;
      v35 = v56.__end_ - v56.__begin_;
      v36 = v56.__end_ - v56.__begin_ + 1;
      if (v36 < 0)
        std::vector<int>::__throw_length_error[abi:ne180100]();
      v37 = v56.__end_cap_.__value_ - v56.__begin_;
      if (2 * (v56.__end_cap_.__value_ - v56.__begin_) > (unint64_t)v36)
        v36 = 2 * v37;
      if (v37 >= 0x3FFFFFFFFFFFFFFFLL)
        v38 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v38 = v36;
      if (v38)
        v39 = (char *)operator new(v38);
      else
        v39 = 0;
      v40 = &v39[v35];
      v41 = &v39[v35];
      *v41 = 0;
      v33 = v41 + 1;
      if (end != v34)
      {
        v42 = &end[~(unint64_t)v34];
        do
        {
          v43 = *--end;
          (v42--)[(_QWORD)v39] = v43;
        }
        while (end != v34);
        end = v56.__begin_;
        v40 = v39;
      }
      v56.__begin_ = v40;
      v56.__end_ = v33;
      v56.__end_cap_.__value_ = &v39[v38];
      if (end)
        operator delete(end);
    }
    else
    {
      *v56.__end_ = 0;
      v33 = end + 1;
    }
    v56.__end_ = v33;
    v6 = (v6 + 1);
    a3 = v44;
  }
  while ((v10 & 1) != 0 && (int)v7 < (int)v6);
LABEL_97:
  fst::SccVisitor<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::FinishVisit((uint64_t)a2);
  if (*(_QWORD *)__x)
    (*(void (**)(_QWORD))(**(_QWORD **)__x + 8))(*(_QWORD *)__x);
  v51 = &unk_1E5D19940;
  fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>::Link>::~MemoryArena(v52);
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v51);
  std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100](v54);
  if (v56.__begin_)
  {
    v56.__end_ = v56.__begin_;
    operator delete(v56.__begin_);
  }
}

void sub_1ADC44F5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  void *v11;
  void *v12;
  va_list va;
  uint64_t v14;
  va_list va1;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  va_list va2;

  va_start(va2, a9);
  va_start(va1, a9);
  va_start(va, a9);
  va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v14 = va_arg(va2, _QWORD);
  v16 = va_arg(va2, _QWORD);
  v17 = va_arg(va2, _QWORD);
  v18 = va_arg(va2, _QWORD);
  v19 = va_arg(va2, _QWORD);
  v20 = va_arg(va2, _QWORD);
  v21 = va_arg(va2, _QWORD);
  v12 = &unk_1E5D19940;
  fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>::Link>::~MemoryArena((uint64_t *)va1);
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)va);
  std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100]((uint64_t *)va2);
  v11 = *(void **)(v9 - 112);
  if (v11)
  {
    *(_QWORD *)(v9 - 104) = v11;
    operator delete(v11);
  }
  _Unwind_Resume(a1);
}

void fst::SccVisitor<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>::FinishState(uint64_t a1, int a2, int a3)
{
  BOOL v6;
  uint64_t v7;
  char v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  int *v12;
  unint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  int *i;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  void *__p;
  void *v24;
  float v25;
  int v26;
  float v27;
  int v28;

  (*(void (**)(uint64_t *__return_ptr))(**(_QWORD **)(a1 + 32) + 32))(&v22);
  v27 = *((float *)&v22 + 1);
  v28 = v22;
  v26 = 2139095040;
  v25 = INFINITY;
  v6 = *(float *)&v22 != INFINITY || v27 != v25;
  if (__p)
  {
    v24 = __p;
    operator delete(__p);
  }
  if (v6)
    *(_QWORD *)(**(_QWORD **)(a1 + 16) + (((unint64_t)a2 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << a2;
  v7 = **(_QWORD **)(a1 + 64);
  if (*(_DWORD *)(**(_QWORD **)(a1 + 56) + 4 * a2) != *(_DWORD *)(v7 + 4 * a2))
    goto LABEL_21;
  v8 = 0;
  v9 = *(_QWORD **)(a1 + 80);
  v10 = v9[1];
  v11 = **(_QWORD **)(a1 + 16);
  v12 = (int *)(((v10 - *v9) & 0xFFFFFFFFFFFFFFFCLL) + *v9 - 4);
  do
  {
    v13 = *v12--;
    v8 |= *(_QWORD *)(v11 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v13;
  }
  while ((_DWORD)v13 != a2);
  v14 = *(_QWORD **)a1;
  v15 = **(_QWORD **)(a1 + 72);
  for (i = (int *)(v10 - 4); ; --i)
  {
    v17 = *i;
    if (v14)
      *(_DWORD *)(*v14 + 4 * v17) = *(_DWORD *)(a1 + 48);
    v18 = v17 >> 6;
    v19 = 1 << v17;
    if ((v8 & 1) == 0)
      break;
    *(_QWORD *)(v11 + 8 * v18) |= v19;
    *(_QWORD *)(v15 + 8 * v18) &= ~v19;
    if ((_DWORD)v17 == a2)
    {
      v9[1] = i;
      goto LABEL_20;
    }
LABEL_18:
    ;
  }
  *(_QWORD *)(v15 + 8 * v18) &= ~v19;
  if ((_DWORD)v17 != a2)
    goto LABEL_18;
  v9[1] = i;
  **(_QWORD **)(a1 + 24) = **(_QWORD **)(a1 + 24) & 0xFFFFF3FFFFFFFFFFLL | 0x80000000000;
LABEL_20:
  ++*(_DWORD *)(a1 + 48);
LABEL_21:
  if (a3 != -1)
  {
    v20 = **(_QWORD **)(a1 + 16);
    if (((*(_QWORD *)(v20 + (((unint64_t)a2 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
      *(_QWORD *)(v20 + (((unint64_t)a3 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << a3;
    v21 = *(_DWORD *)(v7 + 4 * a2);
    if (v21 < *(_DWORD *)(v7 + 4 * a3))
      *(_DWORD *)(v7 + 4 * a3) = v21;
  }
}

void fst::MemoryPool<fst::DfsState<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>::~MemoryPool(quasar::Bitmap *a1)
{
  *(_QWORD *)a1 = &unk_1E5D19940;
  fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>::Link>::~MemoryArena((_QWORD *)a1 + 1);
  quasar::Bitmap::~Bitmap(a1);
}

{
  *(_QWORD *)a1 = &unk_1E5D19940;
  fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>::Link>::~MemoryArena((_QWORD *)a1 + 1);
  quasar::Bitmap::~Bitmap(a1);
  JUMPOUT(0x1AF44D190);
}

_QWORD *fst::MemoryPool<fst::DfsState<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>::MemoryPool(_QWORD *a1, uint64_t a2)
{
  *a1 = &unk_1E5D19940;
  fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>::Link>::MemoryArena(a1 + 1, a2);
  a1[7] = 0;
  return a1;
}

void sub_1ADC452A0(_Unwind_Exception *a1)
{
  quasar::Bitmap *v1;

  quasar::Bitmap::~Bitmap(v1);
  _Unwind_Resume(a1);
}

uint64_t fst::MemoryPool<fst::DfsState<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>::Size()
{
  return 48;
}

_QWORD *fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>::Link>::MemoryArena(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;

  *a1 = &unk_1E5D1A8F8;
  a1[1] = 56 * a2;
  a1[2] = 0;
  a1[3] = a1 + 3;
  a1[4] = a1 + 3;
  a1[5] = 0;
  v3 = operator new[]();
  v4 = operator new(0x18uLL);
  v5 = (_QWORD *)a1[4];
  v6 = a1[5];
  *v4 = a1 + 3;
  v4[1] = v5;
  v4[2] = v3;
  *v5 = v4;
  a1[4] = v4;
  a1[5] = v6 + 1;
  return a1;
}

void sub_1ADC45388(_Unwind_Exception *a1)
{
  quasar::Bitmap *v1;
  _QWORD *v2;

  std::__list_imp<char *>::clear(v2);
  quasar::Bitmap::~Bitmap(v1);
  _Unwind_Resume(a1);
}

void fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>::Link>::~MemoryArena(_QWORD *a1)
{
  fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>::Link>::~MemoryArena(a1);
  JUMPOUT(0x1AF44D190);
}

{
  _QWORD *v2;
  _QWORD *i;
  uint64_t v4;

  *a1 = &unk_1E5D1A8F8;
  v2 = a1 + 3;
  for (i = (_QWORD *)a1[4]; i != v2; i = (_QWORD *)i[1])
  {
    v4 = i[2];
    if (v4)
      MEMORY[0x1AF44D160](v4, 0x1000C8077774924);
  }
  std::__list_imp<char *>::clear(v2);
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)a1);
}

uint64_t fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>::Link>::Size()
{
  return 56;
}

void std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>> *>>::push_back(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;

  v4 = a1[2];
  v5 = a1[1];
  if (v4 == v5)
    v6 = 0;
  else
    v6 = ((v4 - v5) << 6) - 1;
  v7 = a1[5];
  v8 = v7 + a1[4];
  if (v6 == v8)
  {
    std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>> *>>::__add_back_capacity(a1);
    v5 = a1[1];
    v7 = a1[5];
    v8 = a1[4] + v7;
  }
  *(_QWORD *)(*(_QWORD *)(v5 + ((v8 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v8 & 0x1FF)) = *a2;
  a1[5] = v7 + 1;
}

void std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>> *>>::__add_back_capacity(_QWORD *a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  char *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  unint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  void *v53;
  __int128 v54;
  __int128 v55;
  _QWORD *v56;

  v2 = a1[4];
  v3 = v2 >= 0x200;
  v4 = v2 - 512;
  if (v3)
  {
    v5 = (uint64_t)(a1 + 3);
    v6 = (char *)a1[3];
    a1[4] = v4;
    v7 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v11 = *v7;
    v9 = (char *)(v7 + 1);
    v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(_QWORD *)v8 = v10;
      a1[2] += 8;
      return;
    }
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v33 = 1;
      else
        v33 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>(v5, v33);
      v35 = &v34[8 * (v33 >> 2)];
      v37 = &v34[8 * v36];
      v38 = (uint64_t *)a1[1];
      v8 = v35;
      v39 = a1[2] - (_QWORD)v38;
      if (v39)
      {
        v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        v40 = 8 * (v39 >> 3);
        v41 = &v34[8 * (v33 >> 2)];
        do
        {
          v42 = *v38++;
          *(_QWORD *)v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    v13 = v12 >> 3;
    v14 = v12 >> 3 < -1;
    v15 = (v12 >> 3) + 2;
    if (v14)
      v16 = v15;
    else
      v16 = v13 + 1;
    v17 = -(v16 >> 1);
    v18 = v16 >> 1;
    v19 = &v9[-8 * v18];
    v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      v9 = (char *)a1[1];
    }
    v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  v21 = a1[2];
  v22 = (v21 - a1[1]) >> 3;
  v23 = a1[3];
  v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(_QWORD *)&v54 = operator new(0x1000uLL);
      std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **>>::push_back(a1, &v54);
      return;
    }
    *(_QWORD *)&v54 = operator new(0x1000uLL);
    std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **>>::push_front((uint64_t)a1, &v54);
    v44 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v45 = *v44;
    v9 = (char *)(v44 + 1);
    v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3])
      goto LABEL_33;
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v46 = 1;
      else
        v46 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(a1 + 3), v46);
      v35 = &v34[8 * (v46 >> 2)];
      v37 = &v34[8 * v47];
      v48 = (uint64_t *)a1[1];
      v8 = v35;
      v49 = a1[2] - (_QWORD)v48;
      if (v49)
      {
        v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        v50 = 8 * (v49 >> 3);
        v51 = &v34[8 * (v46 >> 2)];
        do
        {
          v52 = *v48++;
          *(_QWORD *)v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1)
    v25 = 1;
  else
    v25 = v24 >> 2;
  v56 = a1 + 3;
  *(_QWORD *)&v54 = std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(a1 + 3), v25);
  *((_QWORD *)&v54 + 1) = v54 + 8 * v22;
  *(_QWORD *)&v55 = *((_QWORD *)&v54 + 1);
  *((_QWORD *)&v55 + 1) = v54 + 8 * v26;
  v53 = operator new(0x1000uLL);
  std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **> &>::push_back(&v54, &v53);
  v27 = (_QWORD *)a1[2];
  v28 = -7 - (_QWORD)v27;
  while (v27 != (_QWORD *)a1[1])
  {
    --v27;
    v28 += 8;
    std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **> &>::push_front((uint64_t)&v54, v27);
  }
  v29 = (char *)*a1;
  v30 = v54;
  v31 = v55;
  *(_QWORD *)&v54 = *a1;
  *((_QWORD *)&v54 + 1) = v27;
  v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  v55 = v32;
  if (v27 != (_QWORD *)v32)
    *(_QWORD *)&v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  if (v29)
    operator delete(v29);
}

void sub_1ADC45794(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  void *v13;

  operator delete(v13);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void fst::ArcBuffer<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>::SetFromFst<fst::Fst<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t *v16;
  uint64_t v17;
  _DWORD *v18;
  unint64_t v19;
  unint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  unint64_t v27;
  _DWORD *v28;

  (*(void (**)(uint64_t, uint64_t, uint64_t **))(*(_QWORD *)a2 + 136))(a2, a3, &v25);
  if (!v25 && (a4 & 1) == 0)
  {
    v10 = v26 + 48 * v27;
    *(_QWORD *)(a1 + 16) = v26;
    *(_QWORD *)(a1 + 24) = v10;
    if (*(_QWORD *)a1)
    {
      free(*(void **)a1);
      *(_QWORD *)a1 = 0;
    }
    *(_QWORD *)(a1 + 8) = 0;
    return;
  }
  v11 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 40))(a2, a3);
  v12 = a5;
  if (!a4)
    v12 = 0;
  v13 = v11 + v12;
  if (*(_QWORD *)(a1 + 8) < (unint64_t)(v11 + v12))
  {
    if (*(_QWORD *)a1)
      free(*(void **)a1);
    v24 = 0x4000;
    if (v13 > 0x4000)
      v24 = v13;
    *(_QWORD *)(a1 + 8) = v24;
    v15 = malloc_type_malloc(48 * v24, 0x108004053AFDD15uLL);
    *(_QWORD *)a1 = v15;
    *(_QWORD *)(a1 + 16) = v15;
    v14 = v15;
  }
  else
  {
    v14 = *(_QWORD **)(a1 + 16);
    v15 = *(_QWORD **)a1;
  }
  *(_QWORD *)(a1 + 24) = &v14[6 * v13];
  v16 = v25;
  v17 = v26;
  v19 = v27;
  v18 = v28;
  if (v28)
    ++*v28;
  v20 = 0;
LABEL_13:
  v15 += 6;
  while (v16)
  {
    v21 = (*(uint64_t (**)(uint64_t *))(*v16 + 24))(v16);
    v22 = *v16;
    if (v21)
    {
      (*(void (**)(uint64_t *))(v22 + 8))(v16);
      return;
    }
    v23 = (*(uint64_t (**)(uint64_t *))(v22 + 32))(v16);
LABEL_18:
    *(v15 - 6) = *(_QWORD *)v23;
    fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>::operator=((uint64_t)(v15 - 5), v23 + 8);
    *((_DWORD *)v15 - 2) = *(_DWORD *)(v23 + 40);
    if (!v16)
    {
      ++v20;
      goto LABEL_13;
    }
    v15 += 6;
    (*(void (**)(uint64_t *))(*v16 + 40))(v16);
  }
  v23 = v17 + 48 * v20;
  if (v20 < v19)
    goto LABEL_18;
  if (v18)
    --*v18;
}

void sub_1ADC459D8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  _DWORD *v2;

  if (v1)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  }
  else if (v2)
  {
    --*v2;
  }
  _Unwind_Resume(exception_object);
}

uint64_t fst::VectorFst<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>::WriteFst<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>>(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  int v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _DWORD *v17;
  uint64_t v18;
  _DWORD *v19;
  int v20;
  fst *v21;
  _QWORD *v22;
  _QWORD *v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t updated;
  fst *v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  _BYTE v34[8];
  void *v35[2];
  void *v36[2];
  __int128 v37;
  __int128 v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int data;
  std::string __p[5];
  uint64_t v44;
  uint64_t v45;

  v45 = *MEMORY[0x1E0C80C00];
  v38 = 0u;
  v37 = 0u;
  *(_OWORD *)v36 = 0u;
  *(_OWORD *)v35 = 0u;
  v6 = -1;
  v40 = 0;
  v41 = 0;
  v39 = -1;
  v39 = (*(int (**)(_QWORD *))(*a1 + 24))(a1);
  v40 = -1;
  if ((*(uint64_t (**)(_QWORD *, uint64_t, _QWORD))(*a1 + 64))(a1, 1, 0))
  {
    v6 = 0;
LABEL_3:
    v7 = 0;
    v40 = (int)fst::CountStates<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>((uint64_t)a1);
    goto LABEL_6;
  }
  v8 = (char *)a2 + *(_QWORD *)(*a2 - 24);
  if ((v8[32] & 5) == 0)
  {
    (*(void (**)(std::string *__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**((_QWORD **)v8 + 5) + 32))(__p, *((_QWORD *)v8 + 5), 0, 1, 16);
    v6 = v44;
    if (v44 != -1)
      goto LABEL_3;
  }
  v7 = 1;
LABEL_6:
  v9 = (*(uint64_t (**)(_QWORD *, uint64_t, _QWORD))(*a1 + 64))(a1, 0x3FFFFFFF0004, 0);
  std::string::basic_string[abi:ne180100]<0>(__p, "vector");
  v9 |= 3uLL;
  fst::FstImpl<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>::WriteFstHeader((uint64_t)a1, (uint64_t)a2, (_BYTE *)a3, 2, __p, v9, (uint64_t)v34);
  v31 = v9;
  v32 = v6;
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p[0].__r_.__value_.__l.__data_);
  v10 = *(_QWORD *)(a1[1] + 72) - *(_QWORD *)(a1[1] + 64);
  v11 = v10 >> 3;
  if ((int)(v10 >> 3) < 1)
  {
    LODWORD(v11) = 0;
  }
  else
  {
    v33 = v7;
    v12 = 0;
    v13 = (v10 >> 3);
    do
    {
      (*(void (**)(std::string *__return_ptr, _QWORD *, uint64_t))(*a1 + 32))(__p, a1, v12);
      data = (int)__p[0].__r_.__value_.__l.__data_;
      std::ostream::write();
      data = HIDWORD(__p[0].__r_.__value_.__r.__words[0]);
      std::ostream::write();
      if (__p[0].__r_.__value_.__l.__size_)
      {
        __p[0].__r_.__value_.__r.__words[2] = __p[0].__r_.__value_.__l.__size_;
        operator delete((void *)__p[0].__r_.__value_.__l.__size_);
      }
      __p[0].__r_.__value_.__r.__words[0] = (*(uint64_t (**)(_QWORD *, uint64_t))(*a1 + 40))(a1, v12);
      std::ostream::write();
      v14 = *(_QWORD *)(*(_QWORD *)(a1[1] + 64) + 8 * v12);
      v16 = *(_QWORD *)(v14 + 48);
      v15 = *(_QWORD *)(v14 + 56);
      if (v15 == v16)
        v17 = 0;
      else
        v17 = *(_DWORD **)(v14 + 48);
      if (v15 != v16)
      {
        if ((unint64_t)((v15 - v16) / 48) <= 1)
          v18 = 1;
        else
          v18 = (v15 - v16) / 48;
        v19 = v17;
        do
        {
          v20 = *v19;
          v19 += 12;
          LODWORD(__p[0].__r_.__value_.__l.__data_) = v20;
          std::ostream::write();
          LODWORD(__p[0].__r_.__value_.__l.__data_) = v17[1];
          std::ostream::write();
          fst::LatticeWeightTpl<float>::Write((uint64_t)(v17 + 2), (uint64_t)a2);
          LODWORD(__p[0].__r_.__value_.__l.__data_) = v17[10];
          std::ostream::write();
          v17 = v19;
          --v18;
        }
        while (v18);
      }
      ++v12;
    }
    while (v12 != v13);
    v7 = v33;
  }
  std::ostream::flush();
  if ((*((_BYTE *)a2 + *(_QWORD *)(*a2 - 24) + 32) & 5) != 0)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
    v21 = fst::LogMessage::LogMessage((fst *)&data, (uint64_t)__p);
    v22 = (_QWORD *)fst::cerr(v21);
    v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"VectorFst::Write: write failed: ", 32);
    v24 = *(char *)(a3 + 23);
    if (v24 >= 0)
      v25 = a3;
    else
      v25 = *(_QWORD *)a3;
    if (v24 >= 0)
      v26 = *(unsigned __int8 *)(a3 + 23);
    else
      v26 = *(_QWORD *)(a3 + 8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, v25, v26);
LABEL_32:
    fst::LogMessage::~LogMessage((fst::LogMessage *)&data);
    if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p[0].__r_.__value_.__l.__data_);
    updated = 0;
    goto LABEL_35;
  }
  if (!v7)
  {
    if (v40 == v11)
    {
      updated = 1;
      goto LABEL_35;
    }
    std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
    v29 = fst::LogMessage::LogMessage((fst *)&data, (uint64_t)__p);
    v30 = (_QWORD *)fst::cerr(v29);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)"Inconsistent number of states observed during write", 51);
    goto LABEL_32;
  }
  v40 = v11;
  std::string::basic_string[abi:ne180100]<0>(__p, "vector");
  updated = fst::FstImpl<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>::UpdateFstHeader((uint64_t)a1, a2, a3, 2, __p, v31, (uint64_t)v34, v32);
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p[0].__r_.__value_.__l.__data_);
LABEL_35:
  if (SHIBYTE(v37) < 0)
    operator delete(v36[1]);
  if (SHIBYTE(v36[0]) < 0)
    operator delete(v35[0]);
  return updated;
}

void sub_1ADC45E54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,int a25,char a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (a32 < 0)
    operator delete(__p);
  fst::FstHeader::~FstHeader(&a13);
  _Unwind_Resume(a1);
}

uint64_t fst::FstImpl<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>::WriteFstHeader(uint64_t a1, uint64_t a2, _BYTE *a3, int a4, std::string *__str, uint64_t a6, uint64_t a7)
{
  const std::string *v13;
  BOOL v14;
  int v15;
  uint64_t v16;
  BOOL v17;
  int v18;
  BOOL v19;
  uint64_t v20;
  uint64_t result;
  BOOL v22;
  uint64_t v23;

  if (a3[24])
  {
    std::string::operator=((std::string *)(a7 + 8), __str);
    v13 = (const std::string *)fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>::Type();
    std::string::operator=((std::string *)(a7 + 32), v13);
    *(_DWORD *)(a7 + 56) = a4;
    *(_QWORD *)(a7 + 64) = a6;
    if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 112))(a1))
      v14 = a3[25] == 0;
    else
      v14 = 1;
    v15 = !v14;
    v16 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1);
    if (a3[26])
      v17 = v16 == 0;
    else
      v17 = 1;
    v18 = v15 | 2;
    if (v17)
      v18 = v15;
    if (a3[27])
      v18 |= 4u;
    *(_DWORD *)(a7 + 60) = v18;
    fst::FstHeader::Write();
  }
  if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 112))(a1))
    v19 = a3[25] == 0;
  else
    v19 = 1;
  if (!v19)
  {
    v20 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 112))(a1);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v20 + 72))(v20, a2);
  }
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1);
  if (result)
    v22 = a3[26] == 0;
  else
    v22 = 1;
  if (!v22)
  {
    v23 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1);
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v23 + 72))(v23, a2);
  }
  return result;
}

uint64_t fst::FstImpl<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>::UpdateFstHeader(uint64_t a1, _QWORD *a2, uint64_t a3, int a4, std::string *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char *v16;
  uint64_t v17;
  fst *v18;
  _QWORD *v19;
  _QWORD *v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  fst *v24;
  _QWORD *v25;
  int v26;
  char *v27;
  fst *v28;
  _QWORD *v29;
  int v30;
  _BYTE v32[16];
  _QWORD v33[17];
  __int128 __p;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  uint64_t v42;
  uint64_t v43;

  v43 = *MEMORY[0x1E0C80C00];
  MEMORY[0x1AF44CB90](v32);
  v16 = (char *)a2 + *(_QWORD *)(*a2 - 24);
  if ((v16[32] & 5) == 0)
  {
    v17 = *((_QWORD *)v16 + 5);
    v40 = 0u;
    v41 = 0u;
    v38 = 0u;
    v39 = 0u;
    v36 = 0u;
    v37 = 0u;
    __p = 0u;
    v35 = 0u;
    v42 = a8;
    (*(void (**)(_QWORD *__return_ptr, uint64_t, __int128 *, uint64_t))(*(_QWORD *)v17 + 40))(v33, v17, &__p, 16);
    if (v33[16] == -1)
      std::ios_base::clear((std::ios_base *)((char *)a2 + *(_QWORD *)(*a2 - 24)), *(_DWORD *)((char *)a2 + *(_QWORD *)(*a2 - 24) + 32) | 4);
  }
  MEMORY[0x1AF44CB9C](v32);
  if ((*((_BYTE *)a2 + *(_QWORD *)(*a2 - 24) + 32) & 5) != 0)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "ERROR");
    v18 = fst::LogMessage::LogMessage((fst *)v33, (uint64_t)&__p);
    v19 = (_QWORD *)fst::cerr(v18);
    v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"Fst::UpdateFstHeader: write failed: ", 36);
    v21 = *(char *)(a3 + 23);
    if (v21 >= 0)
      v22 = a3;
    else
      v22 = *(_QWORD *)a3;
    if (v21 >= 0)
      v23 = *(unsigned __int8 *)(a3 + 23);
    else
      v23 = *(_QWORD *)(a3 + 8);
  }
  else
  {
    fst::FstImpl<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>::WriteFstHeader(a1, (uint64_t)a2, (_BYTE *)a3, a4, a5, a6, a7);
    if ((*((_BYTE *)a2 + *(_QWORD *)(*a2 - 24) + 32) & 5) != 0)
    {
      std::string::basic_string[abi:ne180100]<0>(&__p, "ERROR");
      v24 = fst::LogMessage::LogMessage((fst *)v33, (uint64_t)&__p);
      v25 = (_QWORD *)fst::cerr(v24);
      v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)"Fst::UpdateFstHeader: write failed: ", 36);
      v26 = *(char *)(a3 + 23);
      if (v26 >= 0)
        v22 = a3;
      else
        v22 = *(_QWORD *)a3;
      if (v26 >= 0)
        v23 = *(unsigned __int8 *)(a3 + 23);
      else
        v23 = *(_QWORD *)(a3 + 8);
    }
    else
    {
      MEMORY[0x1AF44CB90](v33, a2);
      v27 = (char *)a2 + *(_QWORD *)(*a2 - 24);
      if ((v27[32] & 5) == 0)
      {
        (*(void (**)(__int128 *__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**((_QWORD **)v27 + 5) + 32))(&__p, *((_QWORD *)v27 + 5), 0, 2, 16);
        if (v42 == -1)
          std::ios_base::clear((std::ios_base *)((char *)a2 + *(_QWORD *)(*a2 - 24)), *(_DWORD *)((char *)a2 + *(_QWORD *)(*a2 - 24) + 32) | 4);
      }
      MEMORY[0x1AF44CB9C](v33);
      if ((*((_BYTE *)a2 + *(_QWORD *)(*a2 - 24) + 32) & 5) == 0)
        return 1;
      std::string::basic_string[abi:ne180100]<0>(&__p, "ERROR");
      v28 = fst::LogMessage::LogMessage((fst *)v33, (uint64_t)&__p);
      v29 = (_QWORD *)fst::cerr(v28);
      v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)"Fst::UpdateFstHeader: write failed: ", 36);
      v30 = *(char *)(a3 + 23);
      if (v30 >= 0)
        v22 = a3;
      else
        v22 = *(_QWORD *)a3;
      if (v30 >= 0)
        v23 = *(unsigned __int8 *)(a3 + 23);
      else
        v23 = *(_QWORD *)(a3 + 8);
    }
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, v22, v23);
  fst::LogMessage::~LogMessage((fst::LogMessage *)v33);
  if (SBYTE7(v35) < 0)
    operator delete((void *)__p);
  return 0;
}

void sub_1ADC46348(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  MEMORY[0x1AF44CB9C](&a12);
  _Unwind_Resume(a1);
}

uint64_t fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>::Type()
{
  unsigned __int8 v0;
  std::string *v2;
  _QWORD *v3;
  uint64_t v4;
  __int128 v5;

  if ((v0 & 1) == 0
  {
    v2 = (std::string *)operator new();
    v3 = (_QWORD *)fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>::Type();
    if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v3, "tropical"))
    {
      std::string::basic_string[abi:ne180100]<0>(v2, "standard");
    }
    else
    {
      v4 = fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>::Type();
      if (*(char *)(v4 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v2, *(const std::string::value_type **)v4, *(_QWORD *)(v4 + 8));
      }
      else
      {
        v5 = *(_OWORD *)v4;
        v2->__r_.__value_.__r.__words[2] = *(_QWORD *)(v4 + 16);
        *(_OWORD *)&v2->__r_.__value_.__l.__data_ = v5;
      }
    }
    fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>::Type(void)::type = (uint64_t)v2;
  }
  return fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>::Type(void)::type;
}

void sub_1ADC46474(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>::Type()
{
  unsigned __int8 v0;
  _QWORD *v2;

  if ((v0 & 1) == 0
  {
    v2 = (_QWORD *)operator new();
    std::string::basic_string[abi:ne180100]<0>(v2, "lattice4");
    fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>::Type(void)::type = (uint64_t)v2;
  }
  return fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>::Type(void)::type;
}

void sub_1ADC46528(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x1012C40EC159624);
  _Unwind_Resume(a1);
}

uint64_t fst::Fst<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>::WriteFile(fst *a1, uint64_t a2)
{
  fst *v4;
  _QWORD *v5;
  _QWORD *v6;
  int v7;
  const std::string::value_type *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  char v13;
  std::string __p;
  __int16 v16;
  char v17;
  char v18;
  char v19;
  std::string v20;
  __int16 v21;
  char v22;
  char v23;
  _BYTE v24[384];
  _QWORD v25[20];

  v25[19] = *MEMORY[0x1E0C80C00];
  if (*(char *)(a2 + 23) < 0)
  {
    if (*(_QWORD *)(a2 + 8))
    {
LABEL_5:
      std::ofstream::basic_ofstream(&v20);
      if ((v24[*(_QWORD *)(v20.__r_.__value_.__r.__words[0] - 24)] & 5) != 0)
      {
        std::string::basic_string[abi:ne180100]<0>(&__p, "ERROR");
        v4 = fst::LogMessage::LogMessage((fst *)&v19, (uint64_t)&__p);
        v5 = (_QWORD *)fst::cerr(v4);
        v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Fst::Write: Can't open file: ", 29);
        v7 = *(char *)(a2 + 23);
        if (v7 >= 0)
          v8 = (const std::string::value_type *)a2;
        else
          v8 = *(const std::string::value_type **)a2;
        if (v7 >= 0)
          v9 = *(unsigned __int8 *)(a2 + 23);
        else
          v9 = *(_QWORD *)(a2 + 8);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)v8, v9);
        fst::LogMessage::~LogMessage((fst::LogMessage *)&v19);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        v10 = 0;
      }
      else
      {
        v13 = FLAGS_fst_align;
        if (*(char *)(a2 + 23) < 0)
          std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
        else
          __p = *(std::string *)a2;
        v16 = 257;
        v17 = 1;
        v18 = v13;
        v10 = (*(uint64_t (**)(fst *, std::string *, std::string *))(*(_QWORD *)a1 + 96))(a1, &v20, &__p);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
      }
      v20.__r_.__value_.__r.__words[0] = *MEMORY[0x1E0DE4F48];
      *(std::string::size_type *)((char *)v20.__r_.__value_.__r.__words
                                + *(_QWORD *)(v20.__r_.__value_.__r.__words[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F48]
                                                                                                  + 24);
      MEMORY[0x1AF44CA70](&v20.__r_.__value_.__r.__words[1]);
      std::ostream::~ostream();
      MEMORY[0x1AF44D094](v25);
      return v10;
    }
  }
  else if (*(_BYTE *)(a2 + 23))
  {
    goto LABEL_5;
  }
  v11 = fst::cout(a1);
  std::string::basic_string[abi:ne180100]<0>(&__p, "standard output");
  v12 = FLAGS_fst_align;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v20, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  else
    v20 = __p;
  v21 = 257;
  v22 = 1;
  v23 = v12;
  v10 = (*(uint64_t (**)(fst *, uint64_t, std::string *))(*(_QWORD *)a1 + 96))(a1, v11, &v20);
  if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v20.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return v10;
}

void sub_1ADC467C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  std::ofstream::~ofstream(&a21);
  _Unwind_Resume(a1);
}

void fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>::SetFinal(_QWORD *a1, int a2, uint64_t a3)
{
  uint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  void *__p;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  _BYTE *v22;
  uint64_t v23;

  v6 = *(uint64_t **)(a1[8] + 8 * a2);
  v20 = *v6;
  v22 = 0;
  v23 = 0;
  v21 = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&v21, (const void *)v6[1], v6[2], (v6[2] - v6[1]) >> 2);
  v16 = *(_QWORD *)a3;
  v18 = 0;
  v19 = 0;
  __p = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&__p, *(const void **)(a3 + 8), *(_QWORD *)(a3 + 16), (uint64_t)(*(_QWORD *)(a3 + 16) - *(_QWORD *)(a3 + 8)) >> 2);
  fst::VectorFstBaseImpl<fst::VectorState<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>::SetFinal((uint64_t)a1, a2, &v16);
  if (__p)
  {
    v18 = __p;
    operator delete(__p);
  }
  v7 = (*(uint64_t (**)(_QWORD *))(*a1 + 24))(a1);
  v12 = v20;
  v14 = 0;
  v15 = 0;
  v13 = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&v13, v21, (uint64_t)v22, (v22 - (_BYTE *)v21) >> 2);
  v8 = *(_QWORD *)a3;
  v10 = 0;
  v11 = 0;
  v9 = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&v9, *(const void **)(a3 + 8), *(_QWORD *)(a3 + 16), (uint64_t)(*(_QWORD *)(a3 + 16) - *(_QWORD *)(a3 + 8)) >> 2);
  a1[1] = a1[1] & 4 | fst::SetFinalProperties<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>(v7, (float *)&v12, (float *)&v8);
  if (v9)
  {
    v10 = v9;
    operator delete(v9);
  }
  if (v13)
  {
    v14 = v13;
    operator delete(v13);
  }
  if (v21)
  {
    v22 = v21;
    operator delete(v21);
  }
}

void sub_1ADC469A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  uint64_t v19;
  void *v21;

  if (__p)
    operator delete(__p);
  if (a14)
    operator delete(a14);
  v21 = *(void **)(v19 - 56);
  if (v21)
  {
    *(_QWORD *)(v19 - 48) = v21;
    operator delete(v21);
  }
  _Unwind_Resume(exception_object);
}

uint64_t fst::SetFinalProperties<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>(unint64_t a1, float *a2, float *a3)
{
  if ((*a2 != INFINITY || a2[1] != INFINITY) && (*a2 != 0.0 || a2[1] != 0.0))
    a1 &= ~0x100000000uLL;
  if ((*a3 != INFINITY || a3[1] != INFINITY) && (*a3 != 0.0 || a3[1] != 0.0))
    a1 = a1 & 0xFFFFFFFCFFFFFFFFLL | 0x100000000;
  return a1 & 0x3FFFFFF0007;
}

uint64_t fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>::AddArc(_QWORD *a1, int a2, float *a3)
{
  uint64_t v6;
  _DWORD *v7;
  unint64_t v8;

  v6 = *(_QWORD *)(*(_QWORD *)(a1[8] + 8 * a2) + 56);
  if (v6 == *(_QWORD *)(*(_QWORD *)(a1[8] + 8 * a2) + 48))
    v7 = 0;
  else
    v7 = (_DWORD *)(v6 - 48);
  v8 = (*(uint64_t (**)(_QWORD *))(*a1 + 24))(a1);
  a1[1] = a1[1] & 4 | fst::AddArcProperties<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>(v8, a2, a3, v7);
  return fst::VectorState<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>::AddArc(*(_QWORD **)(a1[8] + 8 * a2), a3);
}

uint64_t fst::AddArcProperties<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>(unint64_t a1, int a2, float *a3, _DWORD *a4)
{
  float v4;
  int v5;
  unint64_t v6;
  unint64_t v7;

  v4 = *a3;
  v5 = *((_DWORD *)a3 + 1);
  v6 = a1 & 0xFFFFFFFFFFFCFFFFLL | 0x20000;
  if (*(_DWORD *)a3 == v5)
    v6 = a1;
  v7 = v6 & 0xFFFFFFFFFCFFFFFFLL | 0x1000000;
  if (!v5)
    v7 = v6 & 0xFFFFFFFFFC3FFFFFLL | 0x1400000;
  if (v4 == 0.0)
    v6 = v7;
  if (!v5)
    v6 = v6 & 0xFFFFFFFFF3FFFFFFLL | 0x4000000;
  if (a4)
  {
    if (*a4 > SLODWORD(v4))
      v6 = v6 & 0xFFFFFFFFCFFFFFFFLL | 0x20000000;
    if (a4[1] > v5)
      v6 = v6 & 0xFFFFFFFF3FFFFFFFLL | 0x80000000;
  }
  if ((a3[2] != INFINITY || a3[3] != INFINITY) && (a3[2] != 0.0 || a3[3] != 0.0))
    v6 = v6 & 0xFFFFFFFCFFFFFFFFLL | 0x100000000;
  if (*((_DWORD *)a3 + 10) <= a2)
    v6 = v6 & 0xFFFFFF3FFFFFFFFFLL | 0x8000000000;
  if ((v6 & 0x4000000000) != 0)
    return v6 & 0x5D7FFEB0007 | 0x2800000000;
  else
    return v6 & 0x5D7FFEB0007;
}

void fst::VectorFstBaseImpl<fst::VectorState<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>::DeleteStates(uint64_t a1, char **a2)
{
  uint64_t *v4;
  std::vector<int>::size_type v5;
  char *v6;
  uint64_t v7;
  unint64_t v8;
  std::vector<int>::pointer begin;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int v13;
  uint64_t v14;
  unint64_t v15;
  int64x2_t *v16;
  int64x2_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  int *v22;
  int v23;
  _QWORD *v24;
  uint64_t v25;
  int64x2_t v26;
  unint64_t v27;
  uint64_t v28;
  int *v29;
  int64x2_t v30;
  int64x2_t v31;
  std::vector<int>::value_type __x;
  std::vector<int> v33;

  v4 = (uint64_t *)(a1 + 64);
  v5 = (uint64_t)(*(_QWORD *)(a1 + 72) - *(_QWORD *)(a1 + 64)) >> 3;
  __x = 0;
  std::vector<int>::vector(&v33, v5, &__x);
  v6 = *a2;
  v7 = a2[1] - *a2;
  if (v7)
  {
    v8 = v7 >> 2;
    begin = v33.__begin_;
    if (v8 <= 1)
      v8 = 1;
    do
    {
      v10 = *(int *)v6;
      v6 += 4;
      begin[v10] = -1;
      --v8;
    }
    while (v8);
  }
  v11 = *(_QWORD *)(a1 + 64);
  if (*(_QWORD *)(a1 + 72) == v11)
  {
    v13 = 0;
  }
  else
  {
    v12 = 0;
    v13 = 0;
    do
    {
      if (v33.__begin_[v12] == -1)
      {
        fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::Destroy(*(_QWORD *)(v11 + 8 * v12));
      }
      else
      {
        v33.__begin_[v12] = v13;
        if (v12 != v13)
          *(_QWORD *)(v11 + 8 * v13) = *(_QWORD *)(v11 + 8 * v12);
        ++v13;
      }
      ++v12;
      v11 = *(_QWORD *)(a1 + 64);
    }
    while (v12 < (*(_QWORD *)(a1 + 72) - v11) >> 3);
  }
  std::vector<fst::QueueBase<int> *,std::allocator<fst::QueueBase<int> *>>::resize((uint64_t)v4, v13);
  v14 = *(_QWORD *)(a1 + 64);
  if (*(_QWORD *)(a1 + 72) != v14)
  {
    v15 = 0;
    do
    {
      v16 = *(int64x2_t **)(v14 + 8 * v15);
      v17 = v16[2];
      v18 = v16[3].i64[1] - v16[3].i64[0];
      if (v18)
        v19 = v16[3].i64[0];
      else
        v19 = 0;
      if (v18)
      {
        v20 = 0;
        v21 = 0;
        v22 = (int *)(v19 + 40);
        do
        {
          v23 = v33.__begin_[*v22];
          if (v23 == -1)
          {
            v25 = *((_QWORD *)v22 - 5);
            v26.i64[0] = v25;
            v26.i64[1] = HIDWORD(v25);
            v17 = vaddq_s64(v17, vceqzq_s64(v26));
          }
          else
          {
            *v22 = v23;
            if (v20 != v21)
            {
              v30 = v17;
              v24 = (_QWORD *)(v19 + 48 * v21);
              *v24 = *((_QWORD *)v22 - 5);
              fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>::operator=((uint64_t)(v24 + 1), (uint64_t)(v22 - 8));
              *(_DWORD *)(v19 + 48 * v21 + 40) = *v22;
              v14 = *v4;
              v17 = v30;
            }
            ++v21;
          }
          ++v20;
          v16 = *(int64x2_t **)(v14 + 8 * v15);
          v27 = 0xAAAAAAAAAAAAAAABLL * ((v16[3].i64[1] - v16[3].i64[0]) >> 4);
          v22 += 12;
        }
        while (v20 < v27);
        v31 = v17;
      }
      else
      {
        v31 = v16[2];
        v21 = 0;
        v27 = 0;
      }
      fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::DeleteArcs(v16, v27 - v21);
      v14 = *(_QWORD *)(a1 + 64);
      *(int64x2_t *)(*(_QWORD *)(v14 + 8 * v15++) + 32) = v31;
    }
    while (v15 < (*(_QWORD *)(a1 + 72) - v14) >> 3);
  }
  v28 = *(int *)(a1 + 88);
  if ((_DWORD)v28 == -1)
  {
    v29 = v33.__begin_;
    if (!v33.__begin_)
      return;
  }
  else
  {
    v29 = v33.__begin_;
    *(_DWORD *)(a1 + 88) = v33.__begin_[v28];
  }
  v33.__end_ = v29;
  operator delete(v29);
}

void sub_1ADC46F34(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>>::~MutableArcIterator()
{
  JUMPOUT(0x1AF44D190);
}

uint64_t fst::ArcIteratorBase<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>::Reinit()
{
  return 0;
}

BOOL fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>>::Done_(uint64_t a1)
{
  return *(_QWORD *)(a1 + 24) >= 0xAAAAAAAAAAAAAAABLL
                               * ((uint64_t)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 56)
                                          - *(_QWORD *)(*(_QWORD *)(a1 + 8) + 48)) >> 4);
}

uint64_t fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>>::Value_(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 8) + 48) + 48 * *(_QWORD *)(a1 + 24);
}

uint64_t fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>>::Next_(uint64_t result)
{
  ++*(_QWORD *)(result + 24);
  return result;
}

uint64_t fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>>::Position_(uint64_t a1)
{
  return *(_QWORD *)(a1 + 24);
}

uint64_t fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>>::Reset_(uint64_t result)
{
  *(_QWORD *)(result + 24) = 0;
  return result;
}

uint64_t fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>>::Seek_(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 24) = a2;
  return result;
}

uint64_t fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>>::Flags_()
{
  return 15;
}

uint64_t fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>>::SetValue(uint64_t a1, float *a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  int *v7;
  int v8;
  int v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t result;
  float v17;
  int v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;

  v4 = *(_QWORD **)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 24);
  v6 = v4[6];
  v7 = (int *)(v6 + 48 * v5);
  v8 = *v7;
  v9 = v7[1];
  if (v8 != v9)
    **(_QWORD **)(a1 + 16) &= ~0x20000uLL;
  if (v8)
  {
    if (v9)
      goto LABEL_9;
    v10 = *(unint64_t **)(a1 + 16);
    v11 = *v10;
  }
  else
  {
    v10 = *(unint64_t **)(a1 + 16);
    v12 = *v10;
    *v10 &= ~0x1000000uLL;
    if (v9)
      goto LABEL_9;
    v11 = v12 & 0xFFFFFFFFFEBFFFFFLL;
    *v10 = v11;
  }
  *v10 = v11 & 0xFFFFFFFFFBFFFFFFLL;
LABEL_9:
  v13 = v6 + 48 * v5;
  if ((*(float *)(v13 + 8) != INFINITY || *(float *)(v13 + 12) != INFINITY)
    && (*(float *)(v13 + 8) != 0.0 || *(float *)(v13 + 12) != 0.0))
  {
    **(_QWORD **)(a1 + 16) &= ~0x100000000uLL;
  }
  v14 = 0x30FC30007;
  v15 = *(_DWORD *)a2 == v8 && *((_DWORD *)a2 + 1) == v9;
  if (v15 && *((_DWORD *)a2 + 10) == *(_DWORD *)(v6 + 48 * v5 + 40))
    v14 = 0x3FFFFFFF0007;
  result = fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::SetArc(v4, a2, v5);
  v17 = *a2;
  v18 = *((_DWORD *)a2 + 1);
  if (*(_DWORD *)a2 != v18)
    **(_QWORD **)(a1 + 16) = **(_QWORD **)(a1 + 16) & 0xFFFFFFFFFFFCFFFFLL | 0x20000;
  if (v17 == 0.0)
  {
    v19 = *(unint64_t **)(a1 + 16);
    v21 = *v19 & 0xFFFFFFFFFCFFFFFFLL | 0x1000000;
    *v19 = v21;
    if (!v18)
    {
      v20 = v21 & 0xFFFFFFFFFD3FFFFFLL | 0x400000;
      *v19 = v20;
      goto LABEL_28;
    }
  }
  else if (!v18)
  {
    v19 = *(unint64_t **)(a1 + 16);
    v20 = *v19;
LABEL_28:
    *v19 = v20 & 0xFFFFFFFFF3FFFFFFLL | 0x4000000;
  }
  if ((a2[2] != INFINITY || a2[3] != INFINITY) && (a2[2] != 0.0 || a2[3] != 0.0))
    **(_QWORD **)(a1 + 16) = **(_QWORD **)(a1 + 16) & 0xFFFFFFFCFFFFFFFFLL | 0x100000000;
  **(_QWORD **)(a1 + 16) &= v14;
  return result;
}

float kaldi::quasar::TMTools::GreedyDecode<kaldi::quasar::TorchEncoderDecoder>(kaldi::quasar::TorchEncoderDecoder *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, int a7)
{
  int v14;
  int v15;
  float v16;
  float v17;
  int Type;
  int SoftmaxEosId;
  float v20;
  int v21;
  float v22;
  int v23;
  float v24;
  float *v25;
  float *v26;
  uint64_t v27;
  int VocabWordIdx;
  float *v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  char *v34;
  float *v35;
  int v36;
  int BestAlignment;
  int v38;
  char *v39;
  char *v40;
  char *v41;
  char *v42;
  char *v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  char *v48;
  char *v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  unint64_t v53;
  char *v54;
  char *v55;
  int v56;
  _QWORD *v57;
  uint64_t v58;
  int v59;
  unint64_t v60;
  int *v61;
  _DWORD *v62;
  int *v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  unint64_t v67;
  char *v68;
  int *v69;
  int v70;
  char *v71;
  int v72;
  _QWORD *v73;
  uint64_t v74;
  int v75;
  unint64_t v76;
  int *v77;
  _DWORD *v78;
  int *v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;
  unint64_t v83;
  char *v84;
  int *v85;
  int v86;
  float *v87;
  float *v88;
  float *v89;
  uint64_t v90;
  unint64_t v91;
  uint64_t v92;
  unint64_t v93;
  char *v94;
  float *v95;
  int v96;
  _QWORD *v98;
  char *v99;
  char *v100;
  int v101;
  BOOL v102;
  uint64_t v103;
  uint64_t v104;
  unint64_t v105;
  uint64_t v106;
  uint64_t v107;
  unsigned int v108;
  unsigned int v109;
  float v110;
  float v111;
  uint64_t v113;
  _DWORD v114[2];
  void *v115;
  void *v116;
  uint64_t v117;
  void *v118;
  _BYTE *v119;
  uint64_t v120;
  void *v121;
  void *v122;
  _BYTE *v123;
  uint64_t v124;
  void **v125[2];
  void *v126;
  void *v127;
  uint64_t v128;
  int v129;
  void *__p;
  float *v131;
  char *v132;
  uint64_t v133;
  _QWORD *v134;
  unint64_t v135;
  char *v136;
  char *v137;
  char *v138;
  int32x2_t v139;
  float *v140;
  int32x2_t v141;
  __int128 v142;
  __int128 v143;
  char v144;

  kaldi::quasar::TorchEncoderDecoder::ResetHistoryState(a1, 1);
  kaldi::quasar::TorchEncoderDecoder::Start(a1, (clockid_t)1u, a4);
  kaldi::quasar::TorchEncoderDecoder::StartFeedforward((uint64_t)a1, a2, 0, 0);
  v143 = 0u;
  v142 = 0u;
  v141 = (int32x2_t)&unk_1E5D34170;
  v144 = 0;
  kaldi::CuMatrix<float>::CuMatrix(&v139, 1, 1, 0, 0, 0);
  v14 = kaldi::quasar::TorchEncoderDecoder::BosTargetId(a1);
  *v140 = (float)(v14 - 1);
  v136 = 0;
  v137 = 0;
  v138 = 0;
  v133 = 0;
  v134 = 0;
  v135 = 0;
  __p = 0;
  v131 = 0;
  v132 = 0;
  v15 = 0;
  if (a7 < 0)
  {
    v16 = 0.0;
  }
  else
  {
    v113 = a3 + 16;
    v16 = 0.0;
    while (1)
    {
      kaldi::quasar::TorchEncoderDecoder::Feedforward((uint64_t)a1, &v139, &v141, 0);
      kaldi::Matrix<float>::Matrix((uint64_t)v125, HIDWORD(v142), DWORD2(v142), 0, 0);
      kaldi::CuMatrixBase<float>::CopyToMat<float>((uint64_t)&v141, (int *)v125, 111);
      Type = quasar::getType(a1, v17);
      if (v15 == a7)
      {
        SoftmaxEosId = kaldi::quasar::TorchEncoderDecoder::GetSoftmaxEosId(a1);
        v20 = *((float *)v125[0] + SoftmaxEosId);
        v21 = kaldi::quasar::TorchEncoderDecoder::EosTargetId(a1) - 1;
      }
      else
      {
        v27 = 0;
        v21 = 0;
        v20 = Type ? 0.0 : -3.4028e38;
        while (v27 != kaldi::MatrixBase<float>::NumCols((uint64_t)v125))
        {
          VocabWordIdx = kaldi::quasar::TorchEncoderDecoder::GetVocabWordIdx(a1, v27);
          if ((v15 >= a6 || VocabWordIdx != kaldi::quasar::TorchEncoderDecoder::EosTargetId(a1) - 1)
            && (!kaldi::quasar::TorchEncoderDecoder::HasBpeModel(a1)
             || VocabWordIdx != kaldi::quasar::TorchEncoderDecoder::UnkTargetId(a1) - 1)
            && *((float *)v125[0] + v27) > v20)
          {
            v20 = *((float *)v125[0] + v27);
            v21 = VocabWordIdx;
          }
          ++v27;
        }
      }
      v23 = quasar::getType(a1, v22);
      v24 = logf(v20);
      if (v23)
        v20 = v24;
      *v140 = (float)v21;
      v25 = v131;
      if (v131 >= (float *)v132)
      {
        v29 = (float *)__p;
        v30 = ((char *)v131 - (_BYTE *)__p) >> 2;
        v31 = v30 + 1;
        if ((unint64_t)(v30 + 1) >> 62)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v32 = v132 - (_BYTE *)__p;
        if ((v132 - (_BYTE *)__p) >> 1 > v31)
          v31 = v32 >> 1;
        if ((unint64_t)v32 >= 0x7FFFFFFFFFFFFFFCLL)
          v33 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v33 = v31;
        if (v33)
        {
          v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v132, v33);
          v29 = (float *)__p;
          v25 = v131;
        }
        else
        {
          v34 = 0;
        }
        v35 = (float *)&v34[4 * v30];
        *v35 = v20;
        v26 = v35 + 1;
        while (v25 != v29)
        {
          v36 = *((_DWORD *)v25-- - 1);
          *((_DWORD *)v35-- - 1) = v36;
        }
        __p = v35;
        v131 = v26;
        v132 = &v34[4 * v33];
        if (v29)
          operator delete(v29);
      }
      else
      {
        *v131 = v20;
        v26 = v25 + 1;
      }
      v131 = v26;
      BestAlignment = kaldi::quasar::TorchEncoderDecoder::GetBestAlignment(a1, 0);
      v121 = 0;
      v122 = 0;
      v123 = 0;
      kaldi::quasar::TorchEncoderDecoder::GetAlignmentProbabilities((uint64_t)a1, (uint64_t)&v121, 0);
      v38 = kaldi::quasar::TorchEncoderDecoder::EosTargetId(a1) - 1;
      if (v21 == v38)
      {
        if (*((_BYTE *)a1 + 3922) && *((_BYTE *)a1 + 3923))
        {
          v39 = v137;
          if (v137 >= v138)
          {
            v49 = v136;
            v50 = (v137 - v136) >> 2;
            v51 = v50 + 1;
            if ((unint64_t)(v50 + 1) >> 62)
LABEL_165:
              std::vector<int>::__throw_length_error[abi:ne180100]();
            v52 = v138 - v136;
            if ((v138 - v136) >> 1 > v51)
              v51 = v52 >> 1;
            if ((unint64_t)v52 >= 0x7FFFFFFFFFFFFFFCLL)
              v53 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v53 = v51;
            if (v53)
            {
              v54 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v138, v53);
              v49 = v136;
              v39 = v137;
            }
            else
            {
              v54 = 0;
            }
            v71 = &v54[4 * v50];
            *(_DWORD *)v71 = BestAlignment;
            v40 = v71 + 4;
            while (v39 != v49)
            {
              v72 = *((_DWORD *)v39 - 1);
              v39 -= 4;
              *((_DWORD *)v71 - 1) = v72;
              v71 -= 4;
            }
            v136 = v71;
            v137 = v40;
            v138 = &v54[4 * v53];
            if (v49)
              operator delete(v49);
          }
          else
          {
            *(_DWORD *)v137 = BestAlignment;
            v40 = v39 + 4;
          }
          v137 = v40;
          v73 = v134;
          if ((unint64_t)v134 >= v135)
          {
            v74 = std::vector<std::vector<float>>::__push_back_slow_path<std::vector<float> const&>(&v133, (uint64_t)&v121);
          }
          else
          {
            *v134 = 0;
            v73[1] = 0;
            v73[2] = 0;
            std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(v73, v121, (uint64_t)v122, ((_BYTE *)v122 - (_BYTE *)v121) >> 2);
            v74 = (uint64_t)(v73 + 3);
          }
          v134 = (_QWORD *)v74;
          v75 = v21 + 1;
          v77 = *(int **)(a3 + 8);
          v76 = *(_QWORD *)(a3 + 16);
          if ((unint64_t)v77 >= v76)
          {
            v79 = *(int **)a3;
            v80 = ((uint64_t)v77 - *(_QWORD *)a3) >> 2;
            v81 = v80 + 1;
            if ((unint64_t)(v80 + 1) >> 62)
              std::vector<int>::__throw_length_error[abi:ne180100]();
            v82 = v76 - (_QWORD)v79;
            if (v82 >> 1 > v81)
              v81 = v82 >> 1;
            if ((unint64_t)v82 >= 0x7FFFFFFFFFFFFFFCLL)
              v83 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v83 = v81;
            if (v83)
            {
              v84 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v113, v83);
              v79 = *(int **)a3;
              v77 = *(int **)(a3 + 8);
            }
            else
            {
              v84 = 0;
            }
            v85 = (int *)&v84[4 * v80];
            *v85 = v75;
            v78 = v85 + 1;
            while (v77 != v79)
            {
              v86 = *--v77;
              *--v85 = v86;
            }
            *(_QWORD *)a3 = v85;
            *(_QWORD *)(a3 + 8) = v78;
            *(_QWORD *)(a3 + 16) = &v84[4 * v83];
            if (v79)
              operator delete(v79);
          }
          else
          {
            *v77 = v75;
            v78 = v77 + 1;
          }
          *(_QWORD *)(a3 + 8) = v78;
          v87 = v131;
          if (v131 >= (float *)v132)
          {
            v89 = (float *)__p;
            v90 = ((char *)v131 - (_BYTE *)__p) >> 2;
            v91 = v90 + 1;
            if ((unint64_t)(v90 + 1) >> 62)
              std::vector<int>::__throw_length_error[abi:ne180100]();
            v92 = v132 - (_BYTE *)__p;
            if ((v132 - (_BYTE *)__p) >> 1 > v91)
              v91 = v92 >> 1;
            if ((unint64_t)v92 >= 0x7FFFFFFFFFFFFFFCLL)
              v93 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v93 = v91;
            if (v93)
            {
              v94 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v132, v93);
              v89 = (float *)__p;
              v87 = v131;
            }
            else
            {
              v94 = 0;
            }
            v95 = (float *)&v94[4 * v90];
            *v95 = 0.0;
            v88 = v95 + 1;
            while (v87 != v89)
            {
              v96 = *((_DWORD *)v87-- - 1);
              *((_DWORD *)v95-- - 1) = v96;
            }
            __p = v95;
            v131 = v88;
            v132 = &v94[4 * v93];
            if (v89)
              operator delete(v89);
          }
          else
          {
            *v131 = 0.0;
            v88 = v87 + 1;
          }
          v131 = v88;
        }
      }
      else
      {
        v41 = v137;
        if (v137 >= v138)
        {
          v43 = v136;
          v44 = (v137 - v136) >> 2;
          v45 = v44 + 1;
          if ((unint64_t)(v44 + 1) >> 62)
            goto LABEL_165;
          v46 = v138 - v136;
          if ((v138 - v136) >> 1 > v45)
            v45 = v46 >> 1;
          if ((unint64_t)v46 >= 0x7FFFFFFFFFFFFFFCLL)
            v47 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v47 = v45;
          if (v47)
          {
            v48 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v138, v47);
            v43 = v136;
            v41 = v137;
          }
          else
          {
            v48 = 0;
          }
          v55 = &v48[4 * v44];
          *(_DWORD *)v55 = BestAlignment;
          v42 = v55 + 4;
          while (v41 != v43)
          {
            v56 = *((_DWORD *)v41 - 1);
            v41 -= 4;
            *((_DWORD *)v55 - 1) = v56;
            v55 -= 4;
          }
          v136 = v55;
          v137 = v42;
          v138 = &v48[4 * v47];
          if (v43)
            operator delete(v43);
        }
        else
        {
          *(_DWORD *)v137 = BestAlignment;
          v42 = v41 + 4;
        }
        v137 = v42;
        v57 = v134;
        if ((unint64_t)v134 >= v135)
        {
          v58 = std::vector<std::vector<float>>::__push_back_slow_path<std::vector<float> const&>(&v133, (uint64_t)&v121);
        }
        else
        {
          *v134 = 0;
          v57[1] = 0;
          v57[2] = 0;
          std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(v57, v121, (uint64_t)v122, ((_BYTE *)v122 - (_BYTE *)v121) >> 2);
          v58 = (uint64_t)(v57 + 3);
        }
        v134 = (_QWORD *)v58;
        v59 = v21 + 1;
        v61 = *(int **)(a3 + 8);
        v60 = *(_QWORD *)(a3 + 16);
        if ((unint64_t)v61 >= v60)
        {
          v63 = *(int **)a3;
          v64 = ((uint64_t)v61 - *(_QWORD *)a3) >> 2;
          v65 = v64 + 1;
          if ((unint64_t)(v64 + 1) >> 62)
            std::vector<int>::__throw_length_error[abi:ne180100]();
          v66 = v60 - (_QWORD)v63;
          if (v66 >> 1 > v65)
            v65 = v66 >> 1;
          if ((unint64_t)v66 >= 0x7FFFFFFFFFFFFFFCLL)
            v67 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v67 = v65;
          if (v67)
          {
            v68 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v113, v67);
            v63 = *(int **)a3;
            v61 = *(int **)(a3 + 8);
          }
          else
          {
            v68 = 0;
          }
          v69 = (int *)&v68[4 * v64];
          *v69 = v59;
          v62 = v69 + 1;
          while (v61 != v63)
          {
            v70 = *--v61;
            *--v69 = v70;
          }
          *(_QWORD *)a3 = v69;
          *(_QWORD *)(a3 + 8) = v62;
          *(_QWORD *)(a3 + 16) = &v68[4 * v67];
          if (v63)
            operator delete(v63);
        }
        else
        {
          *v61 = v59;
          v62 = v61 + 1;
        }
        *(_QWORD *)(a3 + 8) = v62;
      }
      if (v121)
      {
        v122 = v121;
        operator delete(v121);
      }
      v16 = v16 + v20;
      kaldi::Matrix<float>::~Matrix((uint64_t)v125);
      if (v21 == v38)
        break;
      if (v15++ == a7)
        goto LABEL_135;
    }
  }
  if (v15 == a7 && (kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v125);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v125, (uint64_t)"Decoder hit max sentence length : ", 34);
    v98 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v98, (uint64_t)" ", 1);
    std::ostream::operator<<();
    kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)v125);
  }
LABEL_135:
  if (kaldi::quasar::TorchEncoderDecoder::Reverse(a1) && v136 != v137)
  {
    v99 = v137 - 4;
    if (v137 - 4 > v136)
    {
      v100 = v136 + 4;
      do
      {
        v101 = *((_DWORD *)v100 - 1);
        *((_DWORD *)v100 - 1) = *(_DWORD *)v99;
        *(_DWORD *)v99 = v101;
        v99 -= 4;
        v102 = v100 >= v99;
        v100 += 4;
      }
      while (!v102);
    }
  }
  v103 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a5 + 200))(a5);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a5 + 176))(a5, v103);
  if (*(_QWORD *)(a3 + 8) == *(_QWORD *)a3)
  {
    v105 = 0;
  }
  else
  {
    v104 = 0;
    v105 = 0;
    v106 = v103;
    do
    {
      v107 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a5 + 200))(a5);
      if (v105 >= (v137 - v136) >> 2 || v105 >= (uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 2)
        std::vector<std::pair<int,int>>::__throw_out_of_range[abi:ne180100]();
      if (0xAAAAAAAAAAAAAAABLL * (((uint64_t)v134 - v133) >> 3) <= v105)
        std::vector<std::pair<int,int>>::__throw_out_of_range[abi:ne180100]();
      v103 = v107;
      v108 = *(_DWORD *)&v136[4 * v105];
      v109 = *(_DWORD *)(*(_QWORD *)a3 + 4 * v105);
      v110 = *((float *)__p + v105);
      v118 = 0;
      v119 = 0;
      v120 = 0;
      std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&v118, *(const void **)(v133 + v104), *(_QWORD *)(v133 + v104 + 8), (uint64_t)(*(_QWORD *)(v133 + v104 + 8) - *(_QWORD *)(v133 + v104)) >> 2);
      LODWORD(v121) = 0;
      *((float *)&v121 + 1) = -v110;
      v123 = 0;
      v124 = 0;
      v122 = 0;
      std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&v122, v118, (uint64_t)v119, (v119 - (_BYTE *)v118) >> 2);
      v125[0] = (void **)__PAIR64__(v109, v108);
      v125[1] = (void **)v121;
      v127 = 0;
      v128 = 0;
      v126 = 0;
      std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&v126, v122, (uint64_t)v123, (v123 - (_BYTE *)v122) >> 2);
      v129 = v103;
      (*(void (**)(uint64_t, uint64_t, void ***))(*(_QWORD *)a5 + 208))(a5, v106, v125);
      if (v126)
      {
        v127 = v126;
        operator delete(v126);
      }
      if (v122)
      {
        v123 = v122;
        operator delete(v122);
      }
      if (v118)
      {
        v119 = v118;
        operator delete(v118);
      }
      ++v105;
      v104 += 24;
      v106 = v103;
    }
    while (v105 != (uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 2);
  }
  v111 = -*((float *)__p + v105);
  v114[0] = 0;
  *(float *)&v114[1] = v111;
  v116 = 0;
  v117 = 0;
  v115 = 0;
  (*(void (**)(uint64_t, uint64_t, _DWORD *))(*(_QWORD *)a5 + 184))(a5, v103, v114);
  if (v115)
  {
    v116 = v115;
    operator delete(v115);
  }
  if (__p)
  {
    v131 = (float *)__p;
    operator delete(__p);
  }
  v125[0] = (void **)&v133;
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100](v125);
  if (v136)
  {
    v137 = v136;
    operator delete(v136);
  }
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&v139);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&v141);
  return -v16;
}

void sub_1ADC47CE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, void *a20,uint64_t a21,uint64_t a22,char *a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,void *__p,uint64_t a58,uint64_t a59,char a60,uint64_t a61)
{
  uint64_t v61;
  void *v63;

  if (__p)
  {
    a58 = (uint64_t)__p;
    operator delete(__p);
  }
  a23 = &a60;
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a23);
  v63 = *(void **)(v61 - 240);
  if (v63)
  {
    *(_QWORD *)(v61 - 232) = v63;
    operator delete(v63);
  }
  kaldi::CuMatrix<float>::~CuMatrix(v61 - 216);
  kaldi::CuMatrix<float>::~CuMatrix(v61 - 168);
  _Unwind_Resume(a1);
}

char *std::vector<unsigned short>::__insert_with_size[abi:ne180100]<unsigned short const*,unsigned short const*>(uint64_t a1, uint64_t __dst, char *__src, char *a4, uint64_t a5)
{
  char *v5;
  char *v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  void *v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  int64_t v22;
  char *v23;
  char *v24;
  char *v25;
  char *v26;
  __int16 v27;
  char *v28;
  uint64_t v29;
  char *v30;
  __int16 v31;
  void *__p;
  char *v34;
  char *v35;
  char *v36;
  uint64_t v37;

  v5 = (char *)__dst;
  if (a5 < 1)
    return v5;
  v7 = __src;
  v11 = *(_QWORD *)(a1 + 16);
  v9 = a1 + 16;
  v10 = v11;
  v12 = *(_QWORD *)(v9 - 8);
  if (a5 > (uint64_t)(v11 - v12) >> 1)
  {
    v13 = *(void **)a1;
    if (a5 + ((uint64_t)(v12 - *(_QWORD *)a1) >> 1) < 0)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v14 = (__dst - (uint64_t)v13) >> 1;
    v15 = v10 - (_QWORD)v13;
    if (v15 <= a5 + ((uint64_t)(v12 - *(_QWORD *)a1) >> 1))
      v16 = a5 + ((uint64_t)(v12 - *(_QWORD *)a1) >> 1);
    else
      v16 = v15;
    if (v15 >= 0x7FFFFFFFFFFFFFFELL)
      v17 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v17 = v16;
    v37 = v9;
    if (v17)
      v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<char,char>>>(v9, v17);
    else
      v18 = 0;
    v28 = &v18[2 * v14];
    __p = v18;
    v34 = v28;
    v36 = &v18[2 * v17];
    v29 = 2 * a5;
    v30 = &v28[2 * a5];
    do
    {
      v31 = *(_WORD *)v7;
      v7 += 2;
      *(_WORD *)v28 = v31;
      v28 += 2;
      v29 -= 2;
    }
    while (v29);
    v35 = v30;
    v5 = std::vector<unsigned short>::__swap_out_circular_buffer((void **)a1, (uint64_t)&__p, v5);
    if (v35 != v34)
      v35 += (v34 - v35 + 1) & 0xFFFFFFFFFFFFFFFELL;
    if (__p)
      operator delete(__p);
    return v5;
  }
  v19 = v12 - __dst;
  v20 = (uint64_t)(v12 - __dst) >> 1;
  if (v20 >= a5)
  {
    v21 = &__src[2 * a5];
    v23 = *(char **)(v9 - 8);
LABEL_18:
    v24 = &v5[2 * a5];
    v25 = &v23[-2 * a5];
    v26 = v23;
    if ((unint64_t)v25 < v12)
    {
      v26 = v23;
      do
      {
        v27 = *(_WORD *)v25;
        v25 += 2;
        *(_WORD *)v26 = v27;
        v26 += 2;
      }
      while ((unint64_t)v25 < v12);
    }
    *(_QWORD *)(a1 + 8) = v26;
    if (v23 != v24)
      memmove(&v23[-2 * ((v23 - v24) >> 1)], v5, v23 - v24);
    if (v21 != v7)
      memmove(v5, v7, v21 - v7);
    return v5;
  }
  v21 = &__src[2 * v20];
  v22 = a4 - v21;
  if (a4 != v21)
    memmove(*(void **)(v9 - 8), &__src[2 * v20], a4 - v21);
  v23 = (char *)(v12 + v22);
  *(_QWORD *)(a1 + 8) = v12 + v22;
  if (v19 >= 1)
    goto LABEL_18;
  return v5;
}

void sub_1ADC48004(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

char *std::vector<unsigned short>::__swap_out_circular_buffer(void **a1, uint64_t a2, char *__src)
{
  char *v5;
  char *v6;
  char *v7;
  char *v8;
  __int16 v9;
  _BYTE *v10;
  uint64_t v11;
  int64_t v12;
  char *v13;
  void *v14;
  void *v15;

  v5 = *(char **)(a2 + 8);
  v6 = (char *)*a1;
  v7 = v5;
  if (*a1 != __src)
  {
    v8 = __src;
    v7 = *(char **)(a2 + 8);
    do
    {
      v9 = *((_WORD *)v8 - 1);
      v8 -= 2;
      *((_WORD *)v7 - 1) = v9;
      v7 -= 2;
    }
    while (v8 != v6);
  }
  *(_QWORD *)(a2 + 8) = v7;
  v10 = a1[1];
  v11 = *(_QWORD *)(a2 + 16);
  v12 = v10 - __src;
  if (v10 != __src)
  {
    memmove(*(void **)(a2 + 16), __src, v10 - __src);
    v7 = *(char **)(a2 + 8);
  }
  *(_QWORD *)(a2 + 16) = v11 + v12;
  v13 = (char *)*a1;
  *a1 = v7;
  *(_QWORD *)(a2 + 8) = v13;
  v14 = a1[1];
  a1[1] = *(void **)(a2 + 16);
  *(_QWORD *)(a2 + 16) = v14;
  v15 = a1[2];
  a1[2] = *(void **)(a2 + 24);
  *(_QWORD *)(a2 + 24) = v15;
  *(_QWORD *)a2 = *(_QWORD *)(a2 + 8);
  return v5;
}

void quasar::RomanizerOptions::~RomanizerOptions(quasar::RomanizerOptions *this)
{
  *(_QWORD *)this = &off_1E5D36290;
  *((_QWORD *)this + 114) = &unk_1E5D347F0;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)this + 1048, *((_QWORD **)this + 132));
  if (*((char *)this + 1039) < 0)
    operator delete(*((void **)this + 127));
  *((_QWORD *)this + 114) = &unk_1E5D359C0;
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this + 1000);
  if (*((char *)this + 991) < 0)
    operator delete(*((void **)this + 121));
  if (*((char *)this + 967) < 0)
    operator delete(*((void **)this + 118));
  if (*((char *)this + 943) < 0)
    operator delete(*((void **)this + 115));
  *((_QWORD *)this + 96) = &unk_1E5D34860;
  std::__tree<std::string>::destroy((uint64_t)this + 888, *((char **)this + 112));
  *((_QWORD *)this + 96) = &unk_1E5D359C0;
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this + 856);
  if (*((char *)this + 847) < 0)
    operator delete(*((void **)this + 103));
  if (*((char *)this + 823) < 0)
    operator delete(*((void **)this + 100));
  if (*((char *)this + 799) < 0)
    operator delete(*((void **)this + 97));
  *((_QWORD *)this + 78) = &unk_1E5D34860;
  std::__tree<std::string>::destroy((uint64_t)this + 744, *((char **)this + 94));
  *((_QWORD *)this + 78) = &unk_1E5D359C0;
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this + 712);
  if (*((char *)this + 703) < 0)
    operator delete(*((void **)this + 85));
  if (*((char *)this + 679) < 0)
    operator delete(*((void **)this + 82));
  if (*((char *)this + 655) < 0)
    operator delete(*((void **)this + 79));
  *((_QWORD *)this + 60) = &unk_1E5D34860;
  std::__tree<std::string>::destroy((uint64_t)this + 600, *((char **)this + 76));
  *((_QWORD *)this + 60) = &unk_1E5D359C0;
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this + 568);
  if (*((char *)this + 559) < 0)
    operator delete(*((void **)this + 67));
  if (*((char *)this + 535) < 0)
    operator delete(*((void **)this + 64));
  if (*((char *)this + 511) < 0)
    operator delete(*((void **)this + 61));
  *((_QWORD *)this + 42) = &unk_1E5D34860;
  std::__tree<std::string>::destroy((uint64_t)this + 456, *((char **)this + 58));
  *((_QWORD *)this + 42) = &unk_1E5D359C0;
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this + 424);
  if (*((char *)this + 415) < 0)
    operator delete(*((void **)this + 49));
  if (*((char *)this + 391) < 0)
    operator delete(*((void **)this + 46));
  if (*((char *)this + 367) < 0)
    operator delete(*((void **)this + 43));
  *((_QWORD *)this + 22) = &unk_1E5D347F0;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)this + 312, *((_QWORD **)this + 40));
  if (*((char *)this + 303) < 0)
    operator delete(*((void **)this + 35));
  *((_QWORD *)this + 22) = &unk_1E5D359C0;
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this + 264);
  if (*((char *)this + 255) < 0)
    operator delete(*((void **)this + 29));
  if (*((char *)this + 231) < 0)
    operator delete(*((void **)this + 26));
  if (*((char *)this + 207) < 0)
    operator delete(*((void **)this + 23));
  *((_QWORD *)this + 2) = &unk_1E5D347F0;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)this + 152, *((_QWORD **)this + 20));
  if (*((char *)this + 143) < 0)
    operator delete(*((void **)this + 15));
  *((_QWORD *)this + 2) = &unk_1E5D359C0;
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this + 104);
  if (*((char *)this + 95) < 0)
    operator delete(*((void **)this + 9));
  if (*((char *)this + 71) < 0)
    operator delete(*((void **)this + 6));
  if (*((char *)this + 47) < 0)
    operator delete(*((void **)this + 3));
}

char *std::__tree<std::__value_type<std::tuple<std::string,std::string,BOOL,BOOL>,std::weak_ptr<kaldi::quasar::NNMTTransliterator>>,std::__map_value_compare<std::tuple<std::string,std::string,BOOL,BOOL>,std::__value_type<std::tuple<std::string,std::string,BOOL,BOOL>,std::weak_ptr<kaldi::quasar::NNMTTransliterator>>,std::less<std::tuple<std::string,std::string,BOOL,BOOL>>,true>,std::allocator<std::__value_type<std::tuple<std::string,std::string,BOOL,BOOL>,std::weak_ptr<kaldi::quasar::NNMTTransliterator>>>>::__emplace_unique_key_args<std::tuple<std::string,std::string,BOOL,BOOL>,std::piecewise_construct_t const&,std::tuple<std::tuple<std::string,std::string,BOOL,BOOL>&&>,std::tuple<>>(uint64_t **a1, uint64_t a2, uint64_t a3, __int128 **a4)
{
  void **v6;
  char *v7;
  uint64_t **v8;
  __int128 *v9;
  __int128 v10;
  uint64_t v11;
  _QWORD v13[2];
  char v14;
  uint64_t v15;

  v6 = (void **)std::__tree<std::__value_type<std::tuple<std::string,std::string,BOOL,BOOL>,std::weak_ptr<kaldi::quasar::NNMTTransliterator>>,std::__map_value_compare<std::tuple<std::string,std::string,BOOL,BOOL>,std::__value_type<std::tuple<std::string,std::string,BOOL,BOOL>,std::weak_ptr<kaldi::quasar::NNMTTransliterator>>,std::less<std::tuple<std::string,std::string,BOOL,BOOL>>,true>,std::allocator<std::__value_type<std::tuple<std::string,std::string,BOOL,BOOL>,std::weak_ptr<kaldi::quasar::NNMTTransliterator>>>>::__find_equal<std::tuple<std::string,std::string,BOOL,BOOL>>((uint64_t)a1, &v15, a2);
  v7 = (char *)*v6;
  if (!*v6)
  {
    v8 = (uint64_t **)v6;
    v7 = (char *)operator new(0x68uLL);
    v13[1] = a1 + 1;
    v9 = *a4;
    v10 = **a4;
    *((_QWORD *)v7 + 6) = *((_QWORD *)*a4 + 2);
    *((_OWORD *)v7 + 2) = v10;
    *((_QWORD *)v9 + 1) = 0;
    *((_QWORD *)v9 + 2) = 0;
    *(_QWORD *)v9 = 0;
    v11 = *((_QWORD *)v9 + 5);
    *(_OWORD *)(v7 + 56) = *(__int128 *)((char *)v9 + 24);
    *((_QWORD *)v7 + 9) = v11;
    *((_QWORD *)v9 + 4) = 0;
    *((_QWORD *)v9 + 5) = 0;
    *((_QWORD *)v9 + 3) = 0;
    v7[80] = *((_BYTE *)v9 + 48);
    v7[81] = *((_BYTE *)v9 + 49);
    *((_QWORD *)v7 + 11) = 0;
    *((_QWORD *)v7 + 12) = 0;
    v14 = 1;
    std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at(a1, v15, v8, (uint64_t *)v7);
    v13[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::tuple<std::string,std::string,BOOL,BOOL>,std::weak_ptr<kaldi::quasar::NNMTTransliterator>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::tuple<std::string,std::string,BOOL,BOOL>,std::weak_ptr<kaldi::quasar::NNMTTransliterator>>,void *>>>>::reset[abi:ne180100]((uint64_t)v13, 0);
  }
  return v7;
}

_QWORD *std::__tree<std::__value_type<std::tuple<std::string,std::string,BOOL,BOOL>,std::weak_ptr<kaldi::quasar::NNMTTransliterator>>,std::__map_value_compare<std::tuple<std::string,std::string,BOOL,BOOL>,std::__value_type<std::tuple<std::string,std::string,BOOL,BOOL>,std::weak_ptr<kaldi::quasar::NNMTTransliterator>>,std::less<std::tuple<std::string,std::string,BOOL,BOOL>>,true>,std::allocator<std::__value_type<std::tuple<std::string,std::string,BOOL,BOOL>,std::weak_ptr<kaldi::quasar::NNMTTransliterator>>>>::__find_equal<std::tuple<std::string,std::string,BOOL,BOOL>>(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v7;
  uint64_t v8;
  char v10;
  char v11;

  v5 = (_QWORD *)(a1 + 8);
  v4 = *(_QWORD **)(a1 + 8);
  if (v4)
  {
    do
    {
      while (1)
      {
        v7 = v4;
        v8 = (uint64_t)(v4 + 4);
        if (!std::__tuple_less<4ul>::operator()[abi:ne180100]<std::tuple<std::string,std::string,BOOL,BOOL>,std::tuple<std::string,std::string,BOOL,BOOL>>((uint64_t)&v10, a3, (uint64_t)(v4 + 4)))break;
        v4 = (_QWORD *)*v7;
        v5 = v7;
        if (!*v7)
          goto LABEL_9;
      }
      if (!std::__tuple_less<4ul>::operator()[abi:ne180100]<std::tuple<std::string,std::string,BOOL,BOOL>,std::tuple<std::string,std::string,BOOL,BOOL>>((uint64_t)&v11, v8, a3))break;
      v5 = v7 + 1;
      v4 = (_QWORD *)v7[1];
    }
    while (v4);
  }
  else
  {
    v7 = (_QWORD *)(a1 + 8);
  }
LABEL_9:
  *a2 = v7;
  return v5;
}

BOOL std::__tuple_less<4ul>::operator()[abi:ne180100]<std::tuple<std::string,std::string,BOOL,BOOL>,std::tuple<std::string,std::string,BOOL,BOOL>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v5;
  int v6;
  size_t v7;
  const void *v8;
  size_t v9;
  const void *v10;
  size_t v11;
  int v12;
  BOOL v13;
  int v15;
  BOOL v16;
  char v17;

  v5 = *(char *)(a3 + 23);
  v6 = *(char *)(a2 + 23);
  if (v6 >= 0)
    v7 = *(unsigned __int8 *)(a2 + 23);
  else
    v7 = *(_QWORD *)(a2 + 8);
  if (v6 >= 0)
    v8 = (const void *)a2;
  else
    v8 = *(const void **)a2;
  if (v5 >= 0)
    v9 = *(unsigned __int8 *)(a3 + 23);
  else
    v9 = *(_QWORD *)(a3 + 8);
  if (v5 >= 0)
    v10 = (const void *)a3;
  else
    v10 = *(const void **)a3;
  if (v9 >= v7)
    v11 = v7;
  else
    v11 = v9;
  v12 = memcmp(v8, v10, v11);
  v13 = v7 < v9;
  if (v12)
    v13 = v12 < 0;
  if (v13)
    return 1;
  v15 = memcmp(v10, v8, v11);
  v16 = v9 < v7;
  if (v15)
    v16 = v15 < 0;
  return !v16
      && std::__tuple_less<3ul>::operator()[abi:ne180100]<std::tuple<std::string,std::string,BOOL,BOOL>,std::tuple<std::string,std::string,BOOL,BOOL>>((uint64_t)&v17, a2, a3);
}

BOOL std::__tuple_less<3ul>::operator()[abi:ne180100]<std::tuple<std::string,std::string,BOOL,BOOL>,std::tuple<std::string,std::string,BOOL,BOOL>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v5;
  int v6;
  size_t v7;
  const void *v8;
  size_t v9;
  const void *v10;
  size_t v11;
  int v12;
  BOOL v13;
  int v14;
  BOOL v15;
  unsigned int v16;
  unsigned int v17;

  v5 = *(char *)(a3 + 47);
  v6 = *(char *)(a2 + 47);
  if (v6 >= 0)
    v7 = *(unsigned __int8 *)(a2 + 47);
  else
    v7 = *(_QWORD *)(a2 + 32);
  if (v6 >= 0)
    v8 = (const void *)(a2 + 24);
  else
    v8 = *(const void **)(a2 + 24);
  if (v5 >= 0)
    v9 = *(unsigned __int8 *)(a3 + 47);
  else
    v9 = *(_QWORD *)(a3 + 32);
  if (v5 >= 0)
    v10 = (const void *)(a3 + 24);
  else
    v10 = *(const void **)(a3 + 24);
  if (v9 >= v7)
    v11 = v7;
  else
    v11 = v9;
  v12 = memcmp(v8, v10, v11);
  v13 = v7 < v9;
  if (v12)
    v13 = v12 < 0;
  if (v13)
    return 1;
  v14 = memcmp(v10, v8, v11);
  v15 = v9 < v7;
  if (v14)
    v15 = v14 < 0;
  if (v15)
    return 0;
  v16 = *(unsigned __int8 *)(a2 + 48);
  v17 = *(unsigned __int8 *)(a3 + 48);
  if (v16 < v17)
    return 1;
  return v17 >= v16 && *(unsigned __int8 *)(a2 + 49) < *(unsigned __int8 *)(a3 + 49);
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::tuple<std::string,std::string,BOOL,BOOL>,std::weak_ptr<kaldi::quasar::NNMTTransliterator>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::tuple<std::string,std::string,BOOL,BOOL>,std::weak_ptr<kaldi::quasar::NNMTTransliterator>>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<std::tuple<std::string,std::string,BOOL,BOOL> const,std::weak_ptr<kaldi::quasar::NNMTTransliterator>>,0>((uint64_t)v2 + 32);
    operator delete(v2);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::tuple<std::string,std::string,BOOL,BOOL> const,std::weak_ptr<kaldi::quasar::NNMTTransliterator>>,0>(uint64_t a1)
{
  std::__shared_weak_count *v2;

  v2 = *(std::__shared_weak_count **)(a1 + 64);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

_QWORD *std::allocate_shared[abi:ne180100]<kaldi::quasar::NNMTTransliterator,std::allocator<kaldi::quasar::NNMTTransliterator>,BOOL &,void>@<X0>(char *a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *result;

  v4 = operator new(0x1178uLL);
  result = std::__shared_ptr_emplace<kaldi::quasar::NNMTTransliterator>::__shared_ptr_emplace[abi:ne180100]<BOOL &,std::allocator<kaldi::quasar::NNMTTransliterator>,0>(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_1ADC48818(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<kaldi::quasar::NNMTTransliterator>::__shared_ptr_emplace[abi:ne180100]<BOOL &,std::allocator<kaldi::quasar::NNMTTransliterator>,0>(_QWORD *a1, char *a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1E5D41F78;
  kaldi::quasar::NNMTTransliterator::NNMTTransliterator((kaldi::quasar::NNMTTransliterator *)(a1 + 3), *a2);
  return a1;
}

void sub_1ADC48868(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<kaldi::quasar::NNMTTransliterator>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D41F78;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<kaldi::quasar::NNMTTransliterator>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D41F78;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF44D190);
}

void std::__shared_ptr_emplace<kaldi::quasar::NNMTTransliterator>::__on_zero_shared(uint64_t a1)
{
  kaldi::quasar::NNMTTransliterator::~NNMTTransliterator((kaldi::quasar::NNMTTransliterator *)(a1 + 24));
}

kaldi::quasar::NNMTTransliterator *kaldi::quasar::NNMTTransliterator::NNMTTransliterator(kaldi::quasar::NNMTTransliterator *this, char a2)
{
  uint64_t v4;
  void *__p[2];
  char v7;

  v4 = kaldi::quasar::TorchEncoderDecoder::TorchEncoderDecoder(this);
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(v4 + 4168), "<space>");
  *((_QWORD *)this + 524) = 0;
  *((_BYTE *)this + 4200) = 0;
  *((_BYTE *)this + 4201) = a2;
  std::string::basic_string[abi:ne180100]<0>(__p, "UNK");
  kaldi::quasar::BPE::BPE((uint64_t)this + 4208, 1, (__int128 *)__p);
  if (v7 < 0)
    operator delete(__p[0]);
  return this;
}

void sub_1ADC48968(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  kaldi::quasar::TorchEncoderDecoder *v15;
  void **v16;
  char *v17;

  if (a15 < 0)
    operator delete(__p);
  if (*v17 < 0)
    operator delete(*v16);
  kaldi::quasar::TorchEncoderDecoder::~TorchEncoderDecoder(v15);
  _Unwind_Resume(a1);
}

void kaldi::quasar::NNMTTransliterator::~NNMTTransliterator(kaldi::quasar::NNMTTransliterator *this)
{
  if (*((_QWORD *)this + 524))
    utrans_close();
  kaldi::quasar::BPE::~BPE((kaldi::quasar::NNMTTransliterator *)((char *)this + 4208));
  if (*((char *)this + 4191) < 0)
    operator delete(*((void **)this + 521));
  kaldi::quasar::TorchEncoderDecoder::~TorchEncoderDecoder(this);
}

uint64_t quasar::TranslationPhrase::convertTokensToString(quasar::TranslationPhrase *this)
{
  return quasar::TranslationPhrase::convertTokensToString<quasar::TranslationToken>((uint64_t *)this + 2);
}

uint64_t quasar::TranslationPhrase::convertTokensToString<quasar::TranslationToken>(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v11[2];
  _QWORD v12[11];
  char v13;
  uint64_t v14;

  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v11);
  v2 = *a1;
  if (a1[1] != *a1)
  {
    v3 = 0;
    v4 = 0;
    do
    {
      v5 = v2 + v3;
      v6 = *(char *)(v5 + 23);
      if (v6 >= 0)
        v7 = v5;
      else
        v7 = *(_QWORD *)v5;
      if (v6 >= 0)
        v8 = *(unsigned __int8 *)(v5 + 23);
      else
        v8 = *(_QWORD *)(v5 + 8);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, v7, v8);
      v2 = *a1;
      if (*(_BYTE *)(*a1 + v3 + 24))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)" ", 1);
        v2 = *a1;
      }
      ++v4;
      v3 += 72;
    }
    while (v4 < 0x8E38E38E38E38E39 * ((a1[1] - v2) >> 3));
  }
  std::stringbuf::str();
  v11[0] = *MEMORY[0x1E0DE4F50];
  v9 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
  *(_QWORD *)((char *)v11 + *(_QWORD *)(v11[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
  v12[0] = v9;
  v12[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v13 < 0)
    operator delete((void *)v12[9]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x1AF44D094](&v14);
}

void sub_1ADC48B5C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

void quasar::TranslationPhrase::populateMetaInfoWithAlignmentQueries(uint64_t a1, int **a2)
{
  void **v4;
  int *v5;
  unsigned int *v6;
  int v7;
  unsigned int v8;
  int v9;
  unsigned int v10;
  int v11;
  void *v12[2];
  char v13;
  void *v14;
  char v15;
  uint64_t v16;
  int Type;
  std::string v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  void *__p[2];
  char v24;
  __int128 v25;
  uint64_t v26;
  _BYTE v27[64];
  _BYTE v28[64];
  _BYTE v29[72];

  quasar::PTree::PTree((quasar::PTree *)v29);
  quasar::PTree::PTree((quasar::PTree *)v28);
  quasar::PTree::PTree((quasar::PTree *)v27);
  v4 = (void **)(a1 + 40);
  quasar::json2Ptree(a1 + 40, (uint64_t)v29);
  v5 = *a2;
  v6 = (unsigned int *)a2[1];
  if (*a2 != (int *)v6)
  {
    do
    {
      quasar::PTree::PTree((quasar::PTree *)v12);
      quasar::PTree::PTree((quasar::PTree *)&v25);
      std::string::basic_string[abi:ne180100]<0>(__p, "start");
      v7 = *v5;
      Type = quasar::getType((quasar *)*v5);
      std::to_string(&v18, v7);
      v19 = 0;
      v20 = 0;
      v21 = 0;
      v22 = 1;
      quasar::PTree::putChild((uint64_t)v12, (uint64_t)__p, (uint64_t)&Type, 1);
      quasar::PTree::~PTree((quasar::PTree *)&Type);
      if (v24 < 0)
        operator delete(__p[0]);
      std::string::basic_string[abi:ne180100]<0>(__p, "end");
      v8 = v5[1];
      Type = quasar::getType((quasar *)v8);
      std::to_string(&v18, v8);
      v19 = 0;
      v20 = 0;
      v21 = 0;
      v22 = 1;
      quasar::PTree::putChild((uint64_t)v12, (uint64_t)__p, (uint64_t)&Type, 1);
      quasar::PTree::~PTree((quasar::PTree *)&Type);
      if (v24 < 0)
        operator delete(__p[0]);
      quasar::PTree::addChild((quasar::PTree *)v28, (const quasar::PTree *)v12);
      std::string::basic_string[abi:ne180100]<0>(__p, "start");
      v9 = *v5;
      Type = quasar::getType((quasar *)*v5);
      std::to_string(&v18, v9);
      v19 = 0;
      v20 = 0;
      v21 = 0;
      v22 = 1;
      quasar::PTree::putChild((uint64_t)&v25, (uint64_t)__p, (uint64_t)&Type, 1);
      quasar::PTree::~PTree((quasar::PTree *)&Type);
      if (v24 < 0)
        operator delete(__p[0]);
      std::string::basic_string[abi:ne180100]<0>(__p, "end");
      v10 = v5[1];
      Type = quasar::getType((quasar *)v10);
      std::to_string(&v18, v10);
      v19 = 0;
      v20 = 0;
      v21 = 0;
      v22 = 1;
      quasar::PTree::putChild((uint64_t)&v25, (uint64_t)__p, (uint64_t)&Type, 1);
      quasar::PTree::~PTree((quasar::PTree *)&Type);
      if (v24 < 0)
        operator delete(__p[0]);
      std::string::basic_string[abi:ne180100]<0>(__p, "do-not-translate");
      v11 = *((unsigned __int8 *)v5 + 8);
      Type = quasar::getType((quasar *)*((unsigned __int8 *)v5 + 8));
      std::to_string(&v18, v11);
      v19 = 0;
      v20 = 0;
      v21 = 0;
      v22 = 1;
      quasar::PTree::putChild((uint64_t)&v25, (uint64_t)__p, (uint64_t)&Type, 1);
      quasar::PTree::~PTree((quasar::PTree *)&Type);
      if (v24 < 0)
        operator delete(__p[0]);
      quasar::PTree::addChild((quasar::PTree *)v27, (const quasar::PTree *)&v25);
      quasar::PTree::~PTree((quasar::PTree *)&v25);
      quasar::PTree::~PTree((quasar::PTree *)v12);
      v5 += 3;
    }
    while (v5 != (int *)v6);
  }
  std::string::basic_string[abi:ne180100]<0>(v12, "alignment-queries");
  quasar::PTree::putChild((uint64_t)v29, (uint64_t)v12, (uint64_t)v28, 1);
  if (v13 < 0)
    operator delete(v12[0]);
  std::string::basic_string[abi:ne180100]<0>(v12, "alignment-span-info");
  quasar::PTree::putChild((uint64_t)v29, (uint64_t)v12, (uint64_t)v27, 1);
  if (v13 < 0)
    operator delete(v12[0]);
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v12);
  quasar::PTree::writeJson((quasar::PTreeHelper *)v29, v12, 0);
  std::stringbuf::str();
  if (*(char *)(a1 + 63) < 0)
    operator delete(*v4);
  *(_OWORD *)v4 = v25;
  *(_QWORD *)(a1 + 56) = v26;
  v12[0] = *(void **)MEMORY[0x1E0DE4F60];
  *(void **)((char *)v12 + *((_QWORD *)v12[0] - 3)) = *(void **)(MEMORY[0x1E0DE4F60] + 24);
  v12[1] = (void *)(MEMORY[0x1E0DE4FB8] + 16);
  if (v15 < 0)
    operator delete(v14);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1AF44D094](&v16);
  quasar::PTree::~PTree((quasar::PTree *)v27);
  quasar::PTree::~PTree((quasar::PTree *)v28);
  quasar::PTree::~PTree((quasar::PTree *)v29);
}

void sub_1ADC48F70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,void *a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,char a62)
{
  uint64_t v62;

  std::ostringstream::~ostringstream((uint64_t)&__p);
  quasar::PTree::~PTree((quasar::PTree *)&a62);
  quasar::PTree::~PTree((quasar::PTree *)(v62 - 216));
  quasar::PTree::~PTree((quasar::PTree *)(v62 - 152));
  _Unwind_Resume(a1);
}

void quasar::TranslationPhrase::extractAlignmentProjections(quasar::TranslationPhrase *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t ChildWithoutSplit;
  quasar::PTree *v5;
  unint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  quasar::PTree *v10;
  uint64_t i;
  unsigned int v12;
  uint64_t v13;
  unint64_t **v14;
  void **v15;
  unint64_t *v16;
  unint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char *v24;
  unint64_t *v25;
  char *v26;
  unint64_t *v27;
  unint64_t v28;
  quasar::PTree *v29;
  uint64_t v30;
  void *__p[2];
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  std::string::basic_string[abi:ne180100]<0>(__p, "alignment-queries");
  ChildWithoutSplit = quasar::PTree::getChildWithoutSplit((uint64_t)this, (unsigned __int8 **)__p);
  v5 = (quasar::PTree *)ChildWithoutSplit;
  if (SBYTE7(v33) < 0)
  {
    operator delete(__p[0]);
    if (v5)
      goto LABEL_3;
  }
  else if (ChildWithoutSplit)
  {
LABEL_3:
    v6 = quasar::PTree::size(v5);
    std::vector<std::vector<std::pair<int,int>>>::resize(a2, v6);
    v29 = v5;
    v30 = quasar::PTree::begin(v5);
    v7 = 0;
    v8 = 0;
    while (1)
    {
      if (v30 == quasar::PTree::end(v29))
      {
        if ((v8 & 1) == 0)
        {
          if (quasar::gLogLevel >= 5)
          {
            v47 = 0u;
            v48 = 0u;
            v45 = 0u;
            v46 = 0u;
            v43 = 0u;
            v44 = 0u;
            v41 = 0u;
            v42 = 0u;
            v39 = 0u;
            v40 = 0u;
            v37 = 0u;
            v38 = 0u;
            v35 = 0u;
            v36 = 0u;
            v33 = 0u;
            v34 = 0u;
            *(_OWORD *)__p = 0u;
            kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Metainfo does not contain any alignment projections", 51);
            quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)__p);
          }
          std::vector<std::vector<int>>::__clear[abi:ne180100](a2);
        }
        return;
      }
      std::string::basic_string[abi:ne180100]<0>(__p, "projections");
      v9 = quasar::PTree::getChildWithoutSplit(v30 + 24, (unsigned __int8 **)__p);
      v10 = (quasar::PTree *)v9;
      if (SBYTE7(v33) < 0)
      {
        operator delete(__p[0]);
        if (!v10)
          goto LABEL_33;
      }
      else if (!v9)
      {
        goto LABEL_33;
      }
      for (i = quasar::PTree::begin(v10); i != quasar::PTree::end(v10); i += 88)
      {
        std::string::basic_string[abi:ne180100]<0>(__p, "start");
        v12 = quasar::PTree::getInt<int>(i + 24, (__int128 *)__p);
        if (SBYTE7(v33) < 0)
          operator delete(__p[0]);
        std::string::basic_string[abi:ne180100]<0>(__p, "end");
        v13 = quasar::PTree::getInt<int>(i + 24, (__int128 *)__p);
        if (SBYTE7(v33) < 0)
          operator delete(__p[0]);
        v14 = (unint64_t **)(*a2 + 24 * v7);
        v15 = (void **)(v14 + 1);
        v16 = v14[1];
        v18 = v14 + 2;
        v17 = (unint64_t)v14[2];
        if ((unint64_t)v16 >= v17)
        {
          v20 = v16 - *v14;
          if ((unint64_t)(v20 + 1) >> 61)
            std::vector<int>::__throw_length_error[abi:ne180100]();
          v21 = v17 - (_QWORD)*v14;
          v22 = v21 >> 2;
          if (v21 >> 2 <= (unint64_t)(v20 + 1))
            v22 = v20 + 1;
          if ((unint64_t)v21 >= 0x7FFFFFFFFFFFFFF8)
            v23 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v23 = v22;
          if (v23)
            v24 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)v18, v23);
          else
            v24 = 0;
          v25 = (unint64_t *)&v24[8 * v20];
          *v25 = v12 | (unint64_t)(v13 << 32);
          v19 = v25 + 1;
          v26 = (char *)*v15;
          v27 = *v14;
          if (*v15 != *v14)
          {
            do
            {
              v28 = *((_QWORD *)v26 - 1);
              v26 -= 8;
              *--v25 = v28;
            }
            while (v26 != (char *)v27);
            v26 = (char *)*v14;
          }
          *v14 = v25;
          *v15 = v19;
          *v18 = &v24[8 * v23];
          if (v26)
            operator delete(v26);
        }
        else
        {
          *v16 = v12 | (unint64_t)(v13 << 32);
          v19 = v16 + 1;
        }
        *v15 = v19;
      }
      v8 = 1;
LABEL_33:
      ++v7;
      v30 += 88;
    }
  }
  if (quasar::gLogLevel >= 5)
  {
    v47 = 0u;
    v48 = 0u;
    v45 = 0u;
    v46 = 0u;
    v43 = 0u;
    v44 = 0u;
    v41 = 0u;
    v42 = 0u;
    v39 = 0u;
    v40 = 0u;
    v37 = 0u;
    v38 = 0u;
    v35 = 0u;
    v36 = 0u;
    v33 = 0u;
    v34 = 0u;
    *(_OWORD *)__p = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Metainfo does not contain any alignment spans", 45);
    quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)__p);
  }
}

void sub_1ADC493C0(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, __int128 __p, int a14, __int16 a15, char a16, char a17, uint64_t a18, __int128 a19, __int128 a20,__int128 a21,__int128 a22,__int128 a23,__int128 a24,__int128 a25,__int128 a26,__int128 a27,__int128 a28,__int128 a29,__int128 a30,__int128 a31,__int128 a32,__int128 a33)
{
  __break(1u);
  JUMPOUT(0x1ADC494E4);
}

void sub_1ADC494EC()
{
  __cxa_end_catch();
  JUMPOUT(0x1ADC494F4);
}

void sub_1ADC4977C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t quasar::join<std::vector<quasar::TranslationToken>>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  _QWORD v6[2];
  _QWORD v7[11];
  char v8;
  uint64_t v9;

  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v6);
  quasar::joinToStream<std::vector<quasar::TranslationToken>>(v7, a1, a2);
  std::stringbuf::str();
  v6[0] = *MEMORY[0x1E0DE4F50];
  v4 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
  *(_QWORD *)((char *)v6 + *(_QWORD *)(v6[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
  v7[0] = v4;
  v7[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v8 < 0)
    operator delete((void *)v7[9]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x1AF44D094](&v9);
}

void sub_1ADC49860(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t quasar::join<std::vector<quasar::AlternativeSelectionSpan>>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  _QWORD v6[2];
  _QWORD v7[11];
  char v8;
  uint64_t v9;

  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v6);
  quasar::joinToStream<std::vector<quasar::AlternativeSelectionSpan>>(v7, a1, a2);
  std::stringbuf::str();
  v6[0] = *MEMORY[0x1E0DE4F50];
  v4 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
  *(_QWORD *)((char *)v6 + *(_QWORD *)(v6[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
  v7[0] = v4;
  v7[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v8 < 0)
    operator delete((void *)v7[9]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x1AF44D094](&v9);
}

void sub_1ADC49938(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *quasar::joinToStream<std::vector<quasar::TranslationToken>>(_QWORD *result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v6;
  char v7;

  v3 = *a2;
  v4 = a2[1];
  if (*a2 != v4)
  {
    v6 = result;
    v7 = 1;
    do
    {
      if ((v7 & 1) == 0)
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, *a3, a3[1]);
      result = quasar::operator<<(v6, v3);
      v7 = 0;
      v3 += 72;
    }
    while (v3 != v4);
  }
  return result;
}

_QWORD *quasar::joinToStream<std::vector<quasar::AlternativeSelectionSpan>>(_QWORD *result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v6;
  char v7;

  v3 = *a2;
  v4 = a2[1];
  if (*a2 != v4)
  {
    v6 = result;
    v7 = 1;
    do
    {
      if ((v7 & 1) == 0)
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, *a3, a3[1]);
      result = quasar::operator<<(v6, v3);
      v7 = 0;
      v3 += 40;
    }
    while (v3 != v4);
  }
  return result;
}

void quasar::WordPronCache::~WordPronCache(quasar::WordPronCache *this)
{
  *(_QWORD *)this = &off_1E5D35090;
  std::__tree<std::__value_type<std::string,std::map<std::string,int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,int>>>>::destroy((uint64_t)this + 48, *((_QWORD **)this + 7));
  std::__tree<quasar::LmePackedWord,quasar::LmePackedWordOrthoComparator,std::allocator<quasar::LmePackedWord>>::destroy((uint64_t)this + 24, *((_QWORD **)this + 4));
  fst::SymbolTable::~SymbolTable((quasar::WordPronCache *)((char *)this + 8));
}

{
  quasar::WordPronCache::~WordPronCache(this);
  JUMPOUT(0x1AF44D190);
}

uint64_t quasar::WordPronCache::addWord(quasar::WordPronCache *this, std::string *a2, int a3)
{
  std::string::value_type *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  unint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  BOOL v14;
  _QWORD *v15;
  int v16;
  const quasar::LmeDataFactoryBase::Word *v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t IsLegal;
  std::string *v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t **v27;
  fst::SymbolTable *v28;
  uint64_t *v29;
  char v30;
  uint64_t *v31;
  uint64_t *v32;
  char *v33;
  _QWORD *v34;
  int v35;
  const quasar::LmeDataFactoryBase::Word *v36;
  uint64_t size;
  _QWORD *v38;
  _QWORD *v39;
  _QWORD *v40;
  _QWORD *v41;
  char v42;
  char v43;
  _QWORD *v44;
  _QWORD *v45;
  uint64_t v47;
  void *v48[2];
  char v49;
  std::string v50;
  __int128 *v51;
  __int128 v52;
  std::string v53;
  std::string v54;
  int v55;
  uint64_t v56[3];
  std::string v57;
  std::string v58;
  int data;
  uint64_t v60[3];
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;

  v6 = &a2[2].__r_.__value_.__s.__data_[8];
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&a2[2].__r_.__value_.__r.__words[1]);
  v10 = (_QWORD *)*v7;
  v8 = v7 + 1;
  v9 = v10;
  if (v10 == v8)
    goto LABEL_21;
  v11 = 0;
  do
  {
    if (*((_DWORD *)v9 + 8) == 1)
      ++v11;
    v12 = (_QWORD *)v9[1];
    if (v12)
    {
      do
      {
        v13 = v12;
        v12 = (_QWORD *)*v12;
      }
      while (v12);
    }
    else
    {
      do
      {
        v13 = (_QWORD *)v9[2];
        v14 = *v13 == (_QWORD)v9;
        v9 = v13;
      }
      while (!v14);
    }
    v9 = v13;
  }
  while (v13 != v8);
  if (v11 <= 0xA)
  {
LABEL_21:
    if (SHIBYTE(a2->__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v57, a2->__r_.__value_.__l.__data_, a2->__r_.__value_.__l.__size_);
    else
      v57 = *a2;
    v22 = a2 + 1;
    if (SHIBYTE(a2[1].__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::__init_copy_ctor_external(&v58, a2[1].__r_.__value_.__l.__data_, a2[1].__r_.__value_.__l.__size_);
    }
    else
    {
      *(_OWORD *)&v58.__r_.__value_.__l.__data_ = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
      v58.__r_.__value_.__r.__words[2] = a2[1].__r_.__value_.__r.__words[2];
    }
    data = (int)a2[2].__r_.__value_.__l.__data_;
    v23 = std::map<std::pair<quasar::PronType,std::string>,float>::map[abi:ne180100](v60, (uint64_t)v6);
    if (a3 == 3)
      goto LABEL_30;
    if (a3 != 1)
    {
      v76 = 0u;
      v77 = 0u;
      v74 = 0u;
      v75 = 0u;
      v72 = 0u;
      v73 = 0u;
      v70 = 0u;
      v71 = 0u;
      v68 = 0u;
      v69 = 0u;
      v66 = 0u;
      v67 = 0u;
      v64 = 0u;
      v65 = 0u;
      v62 = 0u;
      v63 = 0u;
      v61 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v61);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v61, (uint64_t)"Encoding should be either QsrText or NotEncoded", 47);
      quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&v61);
    }
    v24 = quasar::QsrText::SingletonInstance((quasar::QsrText *)v23);
    if (quasar::QsrText::encodeTokenQsrTextWithMetadata(v24, a2, &v57))
    {
LABEL_30:
      if (SHIBYTE(a2->__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&v53, a2->__r_.__value_.__l.__data_, a2->__r_.__value_.__l.__size_);
      else
        v53 = *a2;
      if (SHIBYTE(a2[1].__r_.__value_.__r.__words[2]) < 0)
      {
        std::string::__init_copy_ctor_external(&v54, a2[1].__r_.__value_.__l.__data_, a2[1].__r_.__value_.__l.__size_);
      }
      else
      {
        *(_OWORD *)&v54.__r_.__value_.__l.__data_ = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
        v54.__r_.__value_.__r.__words[2] = a2[1].__r_.__value_.__r.__words[2];
      }
      v55 = (int)a2[2].__r_.__value_.__l.__data_;
      v25 = std::map<std::pair<quasar::PronType,std::string>,float>::map[abi:ne180100](v56, (uint64_t)v6);
      if (a3 == 3)
      {
        v26 = quasar::QsrText::SingletonInstance((quasar::QsrText *)v25);
        quasar::QsrText::decodeQsrText(v26, (uint64_t)a2, (uint64_t)&v53);
      }
      IsLegal = quasar::LmeDataFactory::wordIsLegal((quasar::LmeDataFactory *)&v53, (const quasar::LmeDataFactoryBase::Word *)0xFFFFFFFFLL);
      if ((IsLegal & 1) != 0)
      {
        v27 = (uint64_t **)((char *)this + 24);
        v28 = (quasar::WordPronCache *)((char *)this + 8);
        v29 = std::__tree<quasar::LmePackedWord,quasar::LmePackedWordOrthoComparator,std::allocator<quasar::LmePackedWord>>::__emplace_unique_impl<quasar::LmeDataFactoryBase::Word &,fst::SymbolTable &>(v27, (const quasar::LmeDataFactoryBase::Word *)&v57, v28);
        if (!v30)
        {
          v31 = v29;
          v32 = v29 + 4;
          quasar::LmePackedWord::unpacked((quasar::LmePackedWord *)(v29 + 4), v28, (uint64_t)&v61);
          v33 = (char *)v65;
          v51 = (__int128 *)*((_QWORD *)&v64 + 1);
          v52 = v65;
          if (*((_QWORD *)&v65 + 1))
          {
            *(_QWORD *)(v65 + 16) = &v52;
            *((_QWORD *)&v64 + 1) = &v65;
            v65 = 0uLL;
            v33 = 0;
          }
          else
          {
            v51 = &v52;
          }
          std::__tree<std::__value_type<std::pair<quasar::PronType,std::string>,float>,std::__map_value_compare<std::pair<quasar::PronType,std::string>,std::__value_type<std::pair<quasar::PronType,std::string>,float>,std::less<std::pair<quasar::PronType,std::string>>,true>,std::allocator<std::__value_type<std::pair<quasar::PronType,std::string>,float>>>::destroy((uint64_t)&v64 + 8, v33);
          if (SHIBYTE(v63) < 0)
            operator delete(*((void **)&v62 + 1));
          v47 = (uint64_t)v32;
          if (SBYTE7(v62) < 0)
            operator delete((void *)v61);
          quasar::Bitmap::~Bitmap((quasar::Bitmap *)v60);
          v41 = v39 + 1;
          v40 = (_QWORD *)*v39;
          if ((_QWORD *)*v39 != v39 + 1)
          {
            v42 = 0;
            do
            {
              v43 = quasar::LmeDataFactoryBase::PronSet::insert((uint64_t **)&v51, *((_DWORD *)v40 + 8), (uint64_t)(v40 + 5), *((float *)v40 + 16));
              v44 = (_QWORD *)v40[1];
              if (v44)
              {
                do
                {
                  v45 = v44;
                  v44 = (_QWORD *)*v44;
                }
                while (v44);
              }
              else
              {
                do
                {
                  v45 = (_QWORD *)v40[2];
                  v14 = *v45 == (_QWORD)v40;
                  v40 = v45;
                }
                while (!v14);
              }
              v42 |= v43;
              v40 = v45;
            }
            while (v45 != v41);
            if ((v42 & 1) != 0)
            {
              std::__tree<std::string>::__remove_node_pointer(v27, v31);
              std::__destroy_at[abi:ne180100]<quasar::LmePackedWord,0>(v47);
              operator delete(v31);
              if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0)
                std::string::__init_copy_ctor_external(&v50, v57.__r_.__value_.__l.__data_, v57.__r_.__value_.__l.__size_);
              else
                v50 = v57;
              std::string::basic_string[abi:ne180100]<0>(v48, "UNKNOWN");
              quasar::LmeDataFactoryBase::Word::Word(&v61, &v50, v48, 0, &v51);
              std::__tree<quasar::LmePackedWord,quasar::LmePackedWordOrthoComparator,std::allocator<quasar::LmePackedWord>>::__emplace_unique_impl<quasar::LmeDataFactoryBase::Word &,fst::SymbolTable &>(v27, (const quasar::LmeDataFactoryBase::Word *)&v61, v28);
              std::__tree<std::__value_type<std::pair<quasar::PronType,std::string>,float>,std::__map_value_compare<std::pair<quasar::PronType,std::string>,std::__value_type<std::pair<quasar::PronType,std::string>,float>,std::less<std::pair<quasar::PronType,std::string>>,true>,std::allocator<std::__value_type<std::pair<quasar::PronType,std::string>,float>>>::destroy((uint64_t)&v64 + 8, (char *)v65);
              if (SHIBYTE(v63) < 0)
                operator delete(*((void **)&v62 + 1));
              if (SBYTE7(v62) < 0)
                operator delete((void *)v61);
              if (v49 < 0)
                operator delete(v48[0]);
              if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v50.__r_.__value_.__l.__data_);
            }
          }
          std::__tree<std::__value_type<std::pair<quasar::PronType,std::string>,float>,std::__map_value_compare<std::pair<quasar::PronType,std::string>,std::__value_type<std::pair<quasar::PronType,std::string>,float>,std::less<std::pair<quasar::PronType,std::string>>,true>,std::allocator<std::__value_type<std::pair<quasar::PronType,std::string>,float>>>::destroy((uint64_t)&v51, (char *)v52);
        }
      }
      else if (quasar::gLogLevel >= 6)
      {
        v76 = 0u;
        v77 = 0u;
        v74 = 0u;
        v75 = 0u;
        v72 = 0u;
        v73 = 0u;
        v70 = 0u;
        v71 = 0u;
        v68 = 0u;
        v69 = 0u;
        v66 = 0u;
        v67 = 0u;
        v64 = 0u;
        v65 = 0u;
        v62 = 0u;
        v63 = 0u;
        v61 = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v61);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v61, (uint64_t)"Skipping illegal word.", 22);
        quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)&v61);
      }
      std::__tree<std::__value_type<std::pair<quasar::PronType,std::string>,float>,std::__map_value_compare<std::pair<quasar::PronType,std::string>,std::__value_type<std::pair<quasar::PronType,std::string>,float>,std::less<std::pair<quasar::PronType,std::string>>,true>,std::allocator<std::__value_type<std::pair<quasar::PronType,std::string>,float>>>::destroy((uint64_t)v56, (char *)v56[1]);
      if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v54.__r_.__value_.__l.__data_);
      if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v53.__r_.__value_.__l.__data_);
    }
    else
    {
      if (quasar::gLogLevel >= 4)
      {
        v76 = 0u;
        v77 = 0u;
        v74 = 0u;
        v75 = 0u;
        v72 = 0u;
        v73 = 0u;
        v70 = 0u;
        v71 = 0u;
        v68 = 0u;
        v69 = 0u;
        v66 = 0u;
        v67 = 0u;
        v64 = 0u;
        v65 = 0u;
        v62 = 0u;
        v63 = 0u;
        v61 = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v61);
        v34 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v61, (uint64_t)"Skipping illegal word: \"", 24);
        v35 = SHIBYTE(a2->__r_.__value_.__r.__words[2]);
        if (v35 >= 0)
          v36 = (const quasar::LmeDataFactoryBase::Word *)a2;
        else
          v36 = (const quasar::LmeDataFactoryBase::Word *)a2->__r_.__value_.__r.__words[0];
        if (v35 >= 0)
          size = HIBYTE(a2->__r_.__value_.__r.__words[2]);
        else
          size = a2->__r_.__value_.__l.__size_;
        v38 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)v36, size);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v38, (uint64_t)"\"", 1);
        quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&v61);
      }
      IsLegal = 0;
    }
    std::__tree<std::__value_type<std::pair<quasar::PronType,std::string>,float>,std::__map_value_compare<std::pair<quasar::PronType,std::string>,std::__value_type<std::pair<quasar::PronType,std::string>,float>,std::less<std::pair<quasar::PronType,std::string>>,true>,std::allocator<std::__value_type<std::pair<quasar::PronType,std::string>,float>>>::destroy((uint64_t)v60, (char *)v60[1]);
    if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v58.__r_.__value_.__l.__data_);
    if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v57.__r_.__value_.__l.__data_);
  }
  else
  {
    if (quasar::gLogLevel >= 4)
    {
      v76 = 0u;
      v77 = 0u;
      v74 = 0u;
      v75 = 0u;
      v72 = 0u;
      v73 = 0u;
      v70 = 0u;
      v71 = 0u;
      v68 = 0u;
      v69 = 0u;
      v66 = 0u;
      v67 = 0u;
      v64 = 0u;
      v65 = 0u;
      v62 = 0u;
      v63 = 0u;
      v61 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v61);
      v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v61, (uint64_t)"Not caching word with too many prons: \"", 39);
      v16 = SHIBYTE(a2->__r_.__value_.__r.__words[2]);
      if (v16 >= 0)
        v17 = (const quasar::LmeDataFactoryBase::Word *)a2;
      else
        v17 = (const quasar::LmeDataFactoryBase::Word *)a2->__r_.__value_.__r.__words[0];
      if (v16 >= 0)
        v18 = HIBYTE(a2->__r_.__value_.__r.__words[2]);
      else
        v18 = a2->__r_.__value_.__l.__size_;
      v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)v17, v18);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"\" has ", 6);
      v20 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)" prons", 6);
      quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&v61);
    }
    return 0;
  }
  return IsLegal;
}

void sub_1ADC4A108(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39)
{
  quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)&a39);
  JUMPOUT(0x1ADC4A1C8);
}

void sub_1ADC4A11C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,char a48)
{
  if (a24 < 0)
    operator delete(__p);
  JUMPOUT(0x1ADC4A1D0);
}

void sub_1ADC4A178(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,void *__p,uint64_t a33,int a34,__int16 a35,char a36,char a37)
{
  if (a37 < 0)
    operator delete(__p);
  if (SHIBYTE(a31) < 0)
    operator delete(a29);
  JUMPOUT(0x1ADC4A1D8);
}

void sub_1ADC4A1A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39)
{
  quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&a39);
  JUMPOUT(0x1ADC4A1D8);
}

void sub_1ADC4A1B0()
{
  JUMPOUT(0x1ADC4A1C8);
}

void sub_1ADC4A1B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, char *a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  std::__tree<std::__value_type<std::pair<quasar::PronType,std::string>,float>,std::__map_value_compare<std::pair<quasar::PronType,std::string>,std::__value_type<std::pair<quasar::PronType,std::string>,float>,std::less<std::pair<quasar::PronType,std::string>>,true>,std::allocator<std::__value_type<std::pair<quasar::PronType,std::string>,float>>>::destroy((uint64_t)&a16, a17);
  quasar::LmeDataFactoryBase::Word::~Word((quasar::LmeDataFactoryBase::Word *)&a19);
  quasar::LmeDataFactoryBase::Word::~Word((quasar::LmeDataFactoryBase::Word *)&a29);
  _Unwind_Resume(a1);
}

BOOL quasar::WordPronCache::lookupWord(quasar::WordPronCache *this, const quasar::LmeDataFactoryBase::Word *a2, int a3, char **a4)
{
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  _BOOL8 v11;
  char *v12;
  uint64_t v13;
  char *v14;
  void *v16;
  char v17;
  void *__p;
  char v19;
  char *v20;
  uint64_t v21;
  char *v22;
  _BYTE v23[32];
  __int128 v24;
  void *v25[2];
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  std::string __str;
  std::string v40;
  int v41;
  uint64_t v42[3];

  quasar::LmeDataFactoryBase::PronSet::clear(a4);
  if (*((char *)a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&__str, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  else
    __str = *(std::string *)a2;
  if (*((char *)a2 + 47) < 0)
    std::string::__init_copy_ctor_external(&v40, *((const std::string::value_type **)a2 + 3), *((_QWORD *)a2 + 4));
  else
    v40 = *(std::string *)((_BYTE *)a2 + 1);
  v41 = *((_DWORD *)a2 + 12);
  v8 = std::map<std::pair<quasar::PronType,std::string>,float>::map[abi:ne180100](v42, (uint64_t)a2 + 56);
  if (a3 == 3)
    goto LABEL_10;
  if (a3 != 1)
  {
    v37 = 0u;
    v38 = 0u;
    v35 = 0u;
    v36 = 0u;
    v33 = 0u;
    v34 = 0u;
    v31 = 0u;
    v32 = 0u;
    v29 = 0u;
    v30 = 0u;
    v27 = 0u;
    v28 = 0u;
    *(_OWORD *)v25 = 0u;
    v26 = 0u;
    v24 = 0u;
    memset(v23, 0, sizeof(v23));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v23);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)"Encoding should be either QsrText or NotEncoded", 47);
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v23);
  }
  v9 = quasar::QsrText::SingletonInstance((quasar::QsrText *)v8);
  if (quasar::QsrText::encodeTokenQsrTextWithMetadata(v9, (std::string *)a2, &__str))
  {
LABEL_10:
    v25[1] = 0;
    v26 = 0uLL;
    memset(v23, 0, sizeof(v23));
    v24 = 0u;
    LODWORD(v25[0]) = 0;
    std::string::operator=((std::string *)v23, &__str);
    v10 = std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::find<std::string>((uint64_t)this + 24, (const void **)v23);
    v11 = (quasar::WordPronCache *)((char *)this + 32) != (quasar::WordPronCache *)v10;
    if ((quasar::WordPronCache *)((char *)this + 32) != (quasar::WordPronCache *)v10)
    {
      quasar::LmePackedWord::unpacked((quasar::LmePackedWord *)(v10 + 32), (quasar::WordPronCache *)((char *)this + 8), (uint64_t)&v16);
      v12 = (char *)(a4 + 1);
      std::__tree<std::__value_type<std::pair<quasar::PronType,std::string>,float>,std::__map_value_compare<std::pair<quasar::PronType,std::string>,std::__value_type<std::pair<quasar::PronType,std::string>,float>,std::less<std::pair<quasar::PronType,std::string>>,true>,std::allocator<std::__value_type<std::pair<quasar::PronType,std::string>,float>>>::destroy((uint64_t)a4, a4[1]);
      v13 = v21;
      *a4 = v20;
      a4[1] = (char *)v13;
      v14 = v22;
      a4[2] = v22;
      if (v14)
      {
        *(_QWORD *)(v13 + 16) = v12;
        v20 = (char *)&v21;
        v21 = 0;
        v22 = 0;
        v13 = 0;
      }
      else
      {
        *a4 = v12;
      }
      std::__tree<std::__value_type<std::pair<quasar::PronType,std::string>,float>,std::__map_value_compare<std::pair<quasar::PronType,std::string>,std::__value_type<std::pair<quasar::PronType,std::string>,float>,std::less<std::pair<quasar::PronType,std::string>>,true>,std::allocator<std::__value_type<std::pair<quasar::PronType,std::string>,float>>>::destroy((uint64_t)&v20, (char *)v13);
      if (v19 < 0)
        operator delete(__p);
      if (v17 < 0)
        operator delete(v16);
    }
    if (v25[1])
    {
      *(void **)&v26 = v25[1];
      operator delete(v25[1]);
    }
    if (SHIBYTE(v24) < 0)
      operator delete(*(void **)&v23[24]);
    if ((v23[23] & 0x80000000) != 0)
      operator delete(*(void **)v23);
  }
  else
  {
    v11 = 0;
  }
  std::__tree<std::__value_type<std::pair<quasar::PronType,std::string>,float>,std::__map_value_compare<std::pair<quasar::PronType,std::string>,std::__value_type<std::pair<quasar::PronType,std::string>,float>,std::less<std::pair<quasar::PronType,std::string>>,true>,std::allocator<std::__value_type<std::pair<quasar::PronType,std::string>,float>>>::destroy((uint64_t)v42, (char *)v42[1]);
  if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v40.__r_.__value_.__l.__data_);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  return v11;
}

void sub_1ADC4A454(_Unwind_Exception *a1)
{
  uint64_t v1;

  quasar::LmeDataFactoryBase::Word::~Word((quasar::LmeDataFactoryBase::Word *)(v1 - 144));
  _Unwind_Resume(a1);
}

void sub_1ADC4A48C()
{
  uint64_t v0;

  if (*(char *)(v0 - 97) < 0)
    operator delete(*(void **)(v0 - 120));
  if (*(char *)(v0 - 121) < 0)
    operator delete(*(void **)(v0 - 144));
  JUMPOUT(0x1ADC4A484);
}

void quasar::LmePackedWord::~LmePackedWord(quasar::LmePackedWord *this)
{
  void *v2;

  v2 = (void *)*((_QWORD *)this + 7);
  if (v2)
  {
    *((_QWORD *)this + 8) = v2;
    operator delete(v2);
  }
  if (*((char *)this + 47) < 0)
    operator delete(*((void **)this + 3));
  if (*((char *)this + 23) < 0)
    operator delete(*(void **)this);
}

void quasar::WordPronCache::fromStream(uint64_t a1, uint64_t *a2, int a3)
{
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  int v8;
  int i;
  void *v10;
  _QWORD *v11;
  _QWORD *v12;
  std::string *v13;
  std::string::size_type size;
  _QWORD *v15;
  int v16;
  _QWORD *v17;
  _QWORD *v18;
  void *v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  void *v23;
  uint64_t v24;
  _QWORD *v25;
  int v26;
  int v27;
  _QWORD *v28;
  _QWORD *v29;
  void *v30;
  uint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  _QWORD *v34;
  _QWORD *v35;
  unint64_t v36;
  _QWORD *v37;
  _QWORD *v38;
  BOOL v39;
  _QWORD *v40;
  std::string *v41;
  std::string::size_type v42;
  _QWORD *v43;
  uint64_t **v44;
  _QWORD *v45;
  int v46;
  _QWORD *v47;
  _QWORD *v48;
  std::string *v49;
  std::string::size_type v50;
  _QWORD *v51;
  int v52;
  uint64_t *v53;
  uint64_t v54;
  fst::SymbolTable *v55;
  uint64_t **v57;
  void *v58[2];
  char v59;
  std::string v60;
  float v61;
  void *v62;
  uint64_t v63;
  uint64_t v64;
  void *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t *v68[3];
  std::string v69;
  uint64_t v70;
  __int128 __p;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  std::string v88;
  uint64_t v89;

  v89 = *MEMORY[0x1E0C80C00];
  v5 = (_QWORD *)(a1 + 32);
  v57 = (uint64_t **)(a1 + 24);
  std::__tree<quasar::LmePackedWord,quasar::LmePackedWordOrthoComparator,std::allocator<quasar::LmePackedWord>>::destroy(a1 + 24, *(_QWORD **)(a1 + 32));
  *(v5 - 1) = v5;
  *v5 = 0;
  v5[1] = 0;
  fst::SymbolTable::SymbolTable((fst::SymbolTable *)&__p);
  v55 = (fst::SymbolTable *)(a1 + 8);
  fst::SymbolTable::operator=(a1 + 8, (uint64_t)&__p);
  fst::SymbolTable::~SymbolTable((fst::SymbolTable *)&__p);
  if (a3 >= 18)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "");
    v6 = fst::SymbolTable::Read(a2, (const std::string *)&__p);
    if (SBYTE7(v72) < 0)
      operator delete((void *)__p);
    if (!v6)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"tmp", 3);
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&__p);
    }
    fst::SymbolTable::operator=((uint64_t)v55, (uint64_t)v6);
    (*(void (**)(_QWORD *))(*v6 + 8))(v6);
  }
  v70 = 0;
  kaldi::ReadBasicType<int>(a2, 1, (uint64_t)&v70 + 4);
  if (quasar::gLogLevel >= 5)
  {
    v86 = 0u;
    v87 = 0u;
    v84 = 0u;
    v85 = 0u;
    v82 = 0u;
    v83 = 0u;
    v80 = 0u;
    v81 = 0u;
    v78 = 0u;
    v79 = 0u;
    v76 = 0u;
    v77 = 0u;
    v74 = 0u;
    v75 = 0u;
    v72 = 0u;
    v73 = 0u;
    __p = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"LME STREAM DUMP ", 16);
    std::istream::tellg();
    v7 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)": nWords = ", 11);
    std::ostream::operator<<();
    quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&__p);
  }
  v54 = a1;
  v8 = a3;
  if (SHIDWORD(v70) >= 1)
  {
    for (i = 0; i < SHIDWORD(v70); ++i)
    {
      if (v8 < 18)
      {
        memset(&v69, 0, sizeof(v69));
        kaldi::ReadToken(a2, 1, (uint64_t)&v69);
        if (quasar::gLogLevel >= 6)
        {
          v86 = 0u;
          v87 = 0u;
          v84 = 0u;
          v85 = 0u;
          v82 = 0u;
          v83 = 0u;
          v80 = 0u;
          v81 = 0u;
          v78 = 0u;
          v79 = 0u;
          v76 = 0u;
          v77 = 0u;
          v74 = 0u;
          v75 = 0u;
          v72 = 0u;
          v73 = 0u;
          __p = 0u;
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"LME STREAM DUMP ", 16);
          std::istream::tellg();
          v11 = (_QWORD *)std::ostream::operator<<();
          v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)": orthography = ", 16);
          if ((v69.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v13 = &v69;
          else
            v13 = (std::string *)v69.__r_.__value_.__r.__words[0];
          if ((v69.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            size = HIBYTE(v69.__r_.__value_.__r.__words[2]);
          else
            size = v69.__r_.__value_.__l.__size_;
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)v13, size);
          quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)&__p);
        }
        kaldi::ReadBasicType<int>(a2, 1, (uint64_t)&v70);
        if (quasar::gLogLevel >= 6)
        {
          v86 = 0u;
          v87 = 0u;
          v84 = 0u;
          v85 = 0u;
          v82 = 0u;
          v83 = 0u;
          v80 = 0u;
          v81 = 0u;
          v78 = 0u;
          v79 = 0u;
          v76 = 0u;
          v77 = 0u;
          v74 = 0u;
          v75 = 0u;
          v72 = 0u;
          v73 = 0u;
          __p = 0u;
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"LME STREAM DUMP ", 16);
          std::istream::tellg();
          v15 = (_QWORD *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)": nProns = ", 11);
          std::ostream::operator<<();
          quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)&__p);
        }
        quasar::LmeDataFactoryBase::PronSet::PronSet(v68);
        if (v8 <= 15)
        {
          if ((int)v70 >= 1)
          {
            v27 = 0;
            do
            {
              v65 = 0;
              v66 = 0;
              v67 = 0;
              kaldi::ReadToken(a2, 1, (uint64_t)&v65);
              if (quasar::gLogLevel >= 6)
              {
                v86 = 0u;
                v87 = 0u;
                v84 = 0u;
                v85 = 0u;
                v82 = 0u;
                v83 = 0u;
                v80 = 0u;
                v81 = 0u;
                v78 = 0u;
                v79 = 0u;
                v76 = 0u;
                v77 = 0u;
                v74 = 0u;
                v75 = 0u;
                v72 = 0u;
                v73 = 0u;
                __p = 0u;
                kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"LME STREAM DUMP ", 16);
                std::istream::tellg();
                v28 = (_QWORD *)std::ostream::operator<<();
                v29 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)": pron = ", 9);
                if (v67 >= 0)
                  v30 = &v65;
                else
                  v30 = v65;
                if (v67 >= 0)
                  v31 = HIBYTE(v67);
                else
                  v31 = v66;
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)v30, v31);
                quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)&__p);
              }
              quasar::LmeDataFactoryBase::PronSet::insert(v68, 1, (uint64_t)&v65, 0.0);
              if (SHIBYTE(v67) < 0)
                operator delete(v65);
              ++v27;
            }
            while (v27 < (int)v70);
          }
        }
        else if ((int)v70 >= 1)
        {
          v16 = 0;
          do
          {
            v65 = 0;
            v66 = 0;
            v67 = 0;
            v62 = 0;
            v63 = 0;
            v64 = 0;
            v61 = 0.0;
            kaldi::ReadToken(a2, 1, (uint64_t)&v65);
            kaldi::ReadString(a2, 1, (uint64_t)&v62);
            kaldi::ReadBasicType<float>(a2, 1, &v61);
            if (quasar::gLogLevel >= 6)
            {
              v86 = 0u;
              v87 = 0u;
              v84 = 0u;
              v85 = 0u;
              v82 = 0u;
              v83 = 0u;
              v80 = 0u;
              v81 = 0u;
              v78 = 0u;
              v79 = 0u;
              v76 = 0u;
              v77 = 0u;
              v74 = 0u;
              v75 = 0u;
              v72 = 0u;
              v73 = 0u;
              __p = 0u;
              kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"LME STREAM DUMP ", 16);
              std::istream::tellg();
              v17 = (_QWORD *)std::ostream::operator<<();
              v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)": pron = ", 9);
              if (v64 >= 0)
                v19 = &v62;
              else
                v19 = v62;
              if (v64 >= 0)
                v20 = HIBYTE(v64);
              else
                v20 = v63;
              v21 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)v19, v20);
              v22 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)" type = ", 8);
              if (v67 >= 0)
                v23 = &v65;
              else
                v23 = v65;
              if (v67 >= 0)
                v24 = HIBYTE(v67);
              else
                v24 = v66;
              v25 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)v23, v24);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)" weight = ", 10);
              std::ostream::operator<<();
              quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)&__p);
            }
            v26 = quasar::StringToPronType((uint64_t *)&v65);
            quasar::LmeDataFactoryBase::PronSet::insert(v68, v26, (uint64_t)&v62, v61);
            if (SHIBYTE(v64) < 0)
              operator delete(v62);
            if (SHIBYTE(v67) < 0)
              operator delete(v65);
            ++v16;
          }
          while (v16 < (int)v70);
        }
        if (SHIBYTE(v69.__r_.__value_.__r.__words[2]) < 0)
          std::string::__init_copy_ctor_external(&v88, v69.__r_.__value_.__l.__data_, v69.__r_.__value_.__l.__size_);
        else
          v88 = v69;
        quasar::Bitmap::~Bitmap((quasar::Bitmap *)v68);
        v35 = (_QWORD *)*v32;
        v33 = v32 + 1;
        v34 = v35;
        v8 = a3;
        if (v35 == v33)
          goto LABEL_85;
        v36 = 0;
        do
        {
          if (*((_DWORD *)v34 + 8) == 1)
            ++v36;
          v37 = (_QWORD *)v34[1];
          if (v37)
          {
            do
            {
              v38 = v37;
              v37 = (_QWORD *)*v37;
            }
            while (v37);
          }
          else
          {
            do
            {
              v38 = (_QWORD *)v34[2];
              v39 = *v38 == (_QWORD)v34;
              v34 = v38;
            }
            while (!v39);
          }
          v34 = v38;
        }
        while (v38 != v33);
        if (v36 <= 0xA)
        {
LABEL_85:
          if (SHIBYTE(v88.__r_.__value_.__r.__words[2]) < 0)
            std::string::__init_copy_ctor_external(&v60, v88.__r_.__value_.__l.__data_, v88.__r_.__value_.__l.__size_);
          else
            v60 = v88;
          std::string::basic_string[abi:ne180100]<0>(v58, "UNKNOWN");
          quasar::LmeDataFactoryBase::Word::Word(&__p, &v60, v58, 0, v68);
          std::__tree<quasar::LmePackedWord,quasar::LmePackedWordOrthoComparator,std::allocator<quasar::LmePackedWord>>::__emplace_unique_impl<quasar::LmeDataFactoryBase::Word &,fst::SymbolTable &>(v57, (const quasar::LmeDataFactoryBase::Word *)&__p, v55);
          std::__tree<std::__value_type<std::pair<quasar::PronType,std::string>,float>,std::__map_value_compare<std::pair<quasar::PronType,std::string>,std::__value_type<std::pair<quasar::PronType,std::string>,float>,std::less<std::pair<quasar::PronType,std::string>>,true>,std::allocator<std::__value_type<std::pair<quasar::PronType,std::string>,float>>>::destroy((uint64_t)&v74 + 8, (char *)v75);
          if (SHIBYTE(v73) < 0)
            operator delete(*((void **)&v72 + 1));
          if (SBYTE7(v72) < 0)
            operator delete((void *)__p);
          if (v59 < 0)
            operator delete(v58[0]);
          if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v60.__r_.__value_.__l.__data_);
        }
        else if (quasar::gLogLevel >= 4)
        {
          v86 = 0u;
          v87 = 0u;
          v84 = 0u;
          v85 = 0u;
          v82 = 0u;
          v83 = 0u;
          v80 = 0u;
          v81 = 0u;
          v78 = 0u;
          v79 = 0u;
          v76 = 0u;
          v77 = 0u;
          v74 = 0u;
          v75 = 0u;
          v72 = 0u;
          v73 = 0u;
          __p = 0u;
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
          v40 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Ignoring corrupted prons: orthography = ", 40);
          if ((v69.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v41 = &v69;
          else
            v41 = (std::string *)v69.__r_.__value_.__r.__words[0];
          if ((v69.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v42 = HIBYTE(v69.__r_.__value_.__r.__words[2]);
          else
            v42 = v69.__r_.__value_.__l.__size_;
          v43 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)v41, v42);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)", nProns = ", 11);
          std::ostream::operator<<();
          quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&__p);
        }
        if (SHIBYTE(v88.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v88.__r_.__value_.__l.__data_);
        std::__tree<std::__value_type<std::pair<quasar::PronType,std::string>,float>,std::__map_value_compare<std::pair<quasar::PronType,std::string>,std::__value_type<std::pair<quasar::PronType,std::string>,float>,std::less<std::pair<quasar::PronType,std::string>>,true>,std::allocator<std::__value_type<std::pair<quasar::PronType,std::string>,float>>>::destroy((uint64_t)v68, (char *)v68[1]);
        if ((SHIBYTE(v69.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          continue;
        v10 = (void *)v69.__r_.__value_.__r.__words[0];
      }
      else
      {
        *((_QWORD *)&v74 + 1) = 0;
        v75 = 0uLL;
        __p = 0u;
        v72 = 0u;
        v73 = 0u;
        LODWORD(v74) = 0;
        kaldi::ReadToken(a2, 1, (uint64_t)&__p);
        quasar::LmePackedProns::read((uint64_t)&v74 + 8, a2, v8);
        std::__tree<quasar::LmePackedWord,quasar::LmePackedWordOrthoComparator,std::allocator<quasar::LmePackedWord>>::__emplace_unique_key_args<quasar::LmePackedWord,quasar::LmePackedWord&>(v57, (const void **)&__p, &__p);
        if (*((_QWORD *)&v74 + 1))
        {
          *(_QWORD *)&v75 = *((_QWORD *)&v74 + 1);
          operator delete(*((void **)&v74 + 1));
        }
        if (SHIBYTE(v73) < 0)
          operator delete(*((void **)&v72 + 1));
        if ((SBYTE7(v72) & 0x80000000) == 0)
          continue;
        v10 = (void *)__p;
      }
      operator delete(v10);
    }
  }
  v44 = (uint64_t **)(a1 + 48);
  std::__tree<std::__value_type<std::string,std::map<std::string,int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,int>>>>::destroy(v54 + 48, *(_QWORD **)(v54 + 56));
  *(_QWORD *)(v54 + 48) = v54 + 56;
  *(_QWORD *)(v54 + 56) = 0;
  *(_QWORD *)(v54 + 64) = 0;
  if (v8 > 15)
  {
    LODWORD(v68[0]) = 0;
    kaldi::ReadBasicType<int>(a2, 1, (uint64_t)v68);
    if (quasar::gLogLevel >= 5)
    {
      v86 = 0u;
      v87 = 0u;
      v84 = 0u;
      v85 = 0u;
      v82 = 0u;
      v83 = 0u;
      v80 = 0u;
      v81 = 0u;
      v78 = 0u;
      v79 = 0u;
      v76 = 0u;
      v77 = 0u;
      v74 = 0u;
      v75 = 0u;
      v72 = 0u;
      v73 = 0u;
      __p = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"LME STREAM DUMP ", 16);
      std::istream::tellg();
      v45 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v45, (uint64_t)": templateToOrthographiesSize = ", 32);
      std::ostream::operator<<();
      quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&__p);
    }
    if (SLODWORD(v68[0]) >= 1)
    {
      v46 = 0;
      do
      {
        memset(&v69, 0, sizeof(v69));
        kaldi::ReadToken(a2, 1, (uint64_t)&v69);
        LODWORD(v65) = 0;
        kaldi::ReadBasicType<int>(a2, 1, (uint64_t)&v65);
        if (quasar::gLogLevel >= 5)
        {
          v86 = 0u;
          v87 = 0u;
          v84 = 0u;
          v85 = 0u;
          v82 = 0u;
          v83 = 0u;
          v80 = 0u;
          v81 = 0u;
          v78 = 0u;
          v79 = 0u;
          v76 = 0u;
          v77 = 0u;
          v74 = 0u;
          v75 = 0u;
          v72 = 0u;
          v73 = 0u;
          __p = 0u;
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"LME STREAM DUMP ", 16);
          std::istream::tellg();
          v47 = (_QWORD *)std::ostream::operator<<();
          v48 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v47, (uint64_t)": templateName = ", 17);
          if ((v69.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v49 = &v69;
          else
            v49 = (std::string *)v69.__r_.__value_.__r.__words[0];
          if ((v69.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v50 = HIBYTE(v69.__r_.__value_.__r.__words[2]);
          else
            v50 = v69.__r_.__value_.__l.__size_;
          v51 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v48, (uint64_t)v49, v50);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v51, (uint64_t)" orthographiesSize = ", 21);
          std::ostream::operator<<();
          quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&__p);
        }
        if ((int)v65 >= 1)
        {
          v52 = 0;
          do
          {
            __p = 0uLL;
            *(_QWORD *)&v72 = 0;
            kaldi::ReadToken(a2, 1, (uint64_t)&__p);
            v88.__r_.__value_.__r.__words[0] = (std::string::size_type)&v69;
            v53 = std::__tree<std::__value_type<std::string,std::set<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v44, (const void **)&v69.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (__int128 **)&v88);
            std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string>((uint64_t **)v53 + 7, (const void **)&__p, (uint64_t)&__p);
            if (SBYTE7(v72) < 0)
              operator delete((void *)__p);
            ++v52;
          }
          while (v52 < (int)v65);
        }
        if (SHIBYTE(v69.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v69.__r_.__value_.__l.__data_);
        ++v46;
      }
      while (v46 < SLODWORD(v68[0]));
    }
  }
}

void sub_1ADC4B124(void *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  JUMPOUT(0x1ADC4B1A4);
}

void sub_1ADC4B14C()
{
  JUMPOUT(0x1ADC4B1A4);
}

void sub_1ADC4B1AC(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *__p,uint64_t a36,int a37,__int16 a38,char a39,char a40)
{
  if (a40 < 0)
    operator delete(__p);
  JUMPOUT(0x1ADC4B194);
}

void quasar::WordPronCache::toStream(uint64_t *a1, _QWORD *a2, int a3)
{
  char *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  char *v10;
  _QWORD *v11;
  _QWORD *v12;
  BOOL v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  int v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  char *v22;
  char *v23;
  char *v24;
  char *v25;
  uint64_t *v26;
  uint64_t *v27;
  char *v28;
  uint64_t *v29;
  char *v30;
  char *v31;
  char *v32;
  uint64_t *v33;
  uint64_t *v34;
  std::string __p;
  std::string v36;
  void *v37;
  char v38;
  char *v39[3];

  if (a3 >= 18)
    fst::SymbolTableImpl::Write(a1[2], a2);
  kaldi::WriteBasicType<int>(a2, 1);
  v6 = (char *)a1[3];
  if (v6 != (char *)(a1 + 4))
  {
    do
    {
      if (a3 < 18)
      {
        quasar::LmePackedWord::unpacked((quasar::LmePackedWord *)(v6 + 32), (const fst::SymbolTable *)(a1 + 1), (uint64_t)&v36);
        if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0)
          std::string::__init_copy_ctor_external(&__p, v36.__r_.__value_.__l.__data_, v36.__r_.__value_.__l.__size_);
        else
          __p = v36;
        kaldi::WriteToken(a2, 1, (char *)&__p);
        if (a3 < 16)
        {
          quasar::Bitmap::~Bitmap((quasar::Bitmap *)v39);
          v17 = (_QWORD *)*v14;
          v15 = v14 + 1;
          v16 = v17;
          if (v17 != v15)
          {
            v18 = 0;
            do
            {
              if (*((_DWORD *)v16 + 8) == 1)
                ++v18;
              v19 = (_QWORD *)v16[1];
              if (v19)
              {
                do
                {
                  v20 = v19;
                  v19 = (_QWORD *)*v19;
                }
                while (v19);
              }
              else
              {
                do
                {
                  v20 = (_QWORD *)v16[2];
                  v13 = *v20 == (_QWORD)v16;
                  v16 = v20;
                }
                while (!v13);
              }
              v16 = v20;
            }
            while (v20 != v15);
          }
          kaldi::WriteBasicType<int>(a2, 1);
          quasar::Bitmap::~Bitmap((quasar::Bitmap *)v39);
          v22 = (char *)(v21 + 1);
          v23 = (char *)*v21;
          if ((_QWORD *)*v21 != v21 + 1)
          {
            do
            {
              if (*((_DWORD *)v23 + 8) == 1)
                kaldi::WriteToken(a2, 1, v23 + 40);
              v24 = (char *)*((_QWORD *)v23 + 1);
              if (v24)
              {
                do
                {
                  v25 = v24;
                  v24 = *(char **)v24;
                }
                while (v24);
              }
              else
              {
                do
                {
                  v25 = (char *)*((_QWORD *)v23 + 2);
                  v13 = *(_QWORD *)v25 == (_QWORD)v23;
                  v23 = v25;
                }
                while (!v13);
              }
              v23 = v25;
            }
            while (v25 != v22);
          }
        }
        else
        {
          quasar::LmeDataFactoryBase::PronSet::size((quasar::LmeDataFactoryBase::PronSet *)v39);
          kaldi::WriteBasicType<int>(a2, 1);
          quasar::Bitmap::~Bitmap((quasar::Bitmap *)v39);
          v8 = v7 + 1;
          v9 = (_QWORD *)*v7;
          if ((_QWORD *)*v7 != v7 + 1)
          {
            do
            {
              v10 = quasar::PronTypeToString(*((_DWORD *)v9 + 8));
              kaldi::WriteToken(a2, 1, v10);
              kaldi::WriteString(a2, 1, (uint64_t)(v9 + 5));
              kaldi::WriteBasicType<float>((uint64_t)a2, 1);
              v11 = (_QWORD *)v9[1];
              if (v11)
              {
                do
                {
                  v12 = v11;
                  v11 = (_QWORD *)*v11;
                }
                while (v11);
              }
              else
              {
                do
                {
                  v12 = (_QWORD *)v9[2];
                  v13 = *v12 == (_QWORD)v9;
                  v9 = v12;
                }
                while (!v13);
              }
              v9 = v12;
            }
            while (v12 != v8);
          }
        }
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        std::__tree<std::__value_type<std::pair<quasar::PronType,std::string>,float>,std::__map_value_compare<std::pair<quasar::PronType,std::string>,std::__value_type<std::pair<quasar::PronType,std::string>,float>,std::less<std::pair<quasar::PronType,std::string>>,true>,std::allocator<std::__value_type<std::pair<quasar::PronType,std::string>,float>>>::destroy((uint64_t)v39, v39[1]);
        if (v38 < 0)
          operator delete(v37);
        if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v36.__r_.__value_.__l.__data_);
      }
      else
      {
        kaldi::WriteToken(a2, 1, v6 + 32);
        quasar::LmePackedProns::write((uint64_t)(v6 + 88), a2, a3);
      }
      v26 = (uint64_t *)*((_QWORD *)v6 + 1);
      if (v26)
      {
        do
        {
          v27 = v26;
          v26 = (uint64_t *)*v26;
        }
        while (v26);
      }
      else
      {
        do
        {
          v27 = (uint64_t *)*((_QWORD *)v6 + 2);
          v13 = *v27 == (_QWORD)v6;
          v6 = (char *)v27;
        }
        while (!v13);
      }
      v6 = (char *)v27;
    }
    while (v27 != a1 + 4);
  }
  if (a3 > 15)
  {
    kaldi::WriteBasicType<int>(a2, 1);
    v28 = (char *)a1[6];
    v29 = a1 + 7;
    if (v28 != (char *)v29)
    {
      do
      {
        kaldi::WriteToken(a2, 1, v28 + 32);
        kaldi::WriteBasicType<int>(a2, 1);
        v30 = (char *)*((_QWORD *)v28 + 7);
        if (v30 != v28 + 64)
        {
          do
          {
            kaldi::WriteToken(a2, 1, v30 + 32);
            v31 = (char *)*((_QWORD *)v30 + 1);
            if (v31)
            {
              do
              {
                v32 = v31;
                v31 = *(char **)v31;
              }
              while (v31);
            }
            else
            {
              do
              {
                v32 = (char *)*((_QWORD *)v30 + 2);
                v13 = *(_QWORD *)v32 == (_QWORD)v30;
                v30 = v32;
              }
              while (!v13);
            }
            v30 = v32;
          }
          while (v32 != v28 + 64);
        }
        v33 = (uint64_t *)*((_QWORD *)v28 + 1);
        if (v33)
        {
          do
          {
            v34 = v33;
            v33 = (uint64_t *)*v33;
          }
          while (v33);
        }
        else
        {
          do
          {
            v34 = (uint64_t *)*((_QWORD *)v28 + 2);
            v13 = *v34 == (_QWORD)v28;
            v28 = (char *)v34;
          }
          while (!v13);
        }
        v28 = (char *)v34;
      }
      while (v34 != v29);
    }
  }
}

void sub_1ADC4B598(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16)
{
  quasar::LmeDataFactoryBase::Word::~Word((quasar::LmeDataFactoryBase::Word *)&a16);
  _Unwind_Resume(a1);
}

void quasar::WordPronCache::addTemplateForWord(uint64_t **a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v4;
  std::string::size_type v9;
  uint64_t v10;
  uint64_t *v11;
  _OWORD v12[17];
  std::string v13;

  v4 = *(unsigned __int8 *)(a2 + 23);
  if ((v4 & 0x80u) != 0)
    v4 = *(_QWORD *)(a2 + 8);
  if (v4)
  {
    if (*(char *)(a3 + 23) < 0)
    {
      v9 = *(_QWORD *)(a3 + 8);
      if (!v9)
        return;
      std::string::__init_copy_ctor_external(&v13, *(const std::string::value_type **)a3, v9);
    }
    else
    {
      if (!*(_BYTE *)(a3 + 23))
        return;
      v13 = *(std::string *)a3;
    }
    if (a4 == 3)
      goto LABEL_12;
    if (a4 != 1)
    {
      memset(v12, 0, sizeof(v12));
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v12);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"Encoding should be either QsrText or NotEncoded", 47);
      quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v12);
    }
    v10 = quasar::QsrText::SingletonInstance((quasar::QsrText *)a1);
    if (quasar::QsrText::encodeTokenQsrTextWithMetadata(v10, (std::string *)a3, &v13))
    {
LABEL_12:
      *(_QWORD *)&v12[0] = a2;
      v11 = std::__tree<std::__value_type<std::string,std::set<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1 + 6, (const void **)a2, (uint64_t)&std::piecewise_construct, (__int128 **)v12);
      std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string>((uint64_t **)v11 + 7, (const void **)&v13.__r_.__value_.__l.__data_, (uint64_t)&v13);
    }
    if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v13.__r_.__value_.__l.__data_);
  }
}

void sub_1ADC4B730(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 - 57) < 0)
    operator delete(*(void **)(v1 - 80));
  _Unwind_Resume(exception_object);
}

void quasar::WordPronCache::removeWordsWithoutTemplates(uint64_t **this, char a2)
{
  void (**v4)(quasar::WordPronCache *__hidden);
  _BYTE v5[16];
  __int128 *v6;
  __int128 v7;
  __int128 *v8;
  __int128 v9;

  v4 = &off_1E5D35090;
  fst::SymbolTable::SymbolTable((fst::SymbolTable *)v5);
  v6 = &v7;
  v7 = 0uLL;
  v9 = 0uLL;
  v8 = &v9;
  quasar::WordPronCache::copyTemplateDeltaTo((quasar::WordPronCache *)this, (quasar::WordPronCache *)&v4, a2);
  fst::SymbolTable::operator=((uint64_t)(this + 1), (uint64_t)v5);
  if (&v4 != (void (***)(quasar::WordPronCache *__hidden))this)
  {
    std::__tree<quasar::LmePackedWord,quasar::LmePackedWordOrthoComparator,std::allocator<quasar::LmePackedWord>>::__assign_multi<std::__tree_const_iterator<quasar::LmePackedWord,std::__tree_node<quasar::LmePackedWord,void *> *,long>>(this + 3, v6, &v7);
    std::__tree<std::__value_type<std::string,std::set<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<std::string>>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,std::set<std::string>>,std::__tree_node<std::__value_type<std::string,std::set<std::string>>,void *> *,long>>(this + 6, v8, &v9);
  }
  quasar::WordPronCache::~WordPronCache((quasar::WordPronCache *)&v4);
}

void sub_1ADC4B808(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  quasar::WordPronCache::~WordPronCache((quasar::WordPronCache *)va);
  _Unwind_Resume(a1);
}

uint64_t quasar::WordPronCache::copyTemplateDeltaTo(quasar::WordPronCache *this, quasar::WordPronCache *a2, char a3)
{
  unsigned __int8 *v5;
  char *v6;
  unsigned __int8 *v7;
  unsigned __int8 *v8;
  BOOL v9;
  quasar::WordPronCache *v10;
  _QWORD *v11;
  _OWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  quasar::WordPronCache *v15;
  quasar::WordPronCache *v16;
  void *v19[2];
  char v20;
  std::string v21;
  std::string v22;
  void *v23;
  char v24;
  char *v25[3];
  void *__p[2];
  char v27;
  std::string v28;
  void *v29[2];
  char v30;
  void *v31;
  char v32;
  char *v33[3];
  char *v34[3];
  _QWORD v35[4];
  int v36;

  memset(v35, 0, sizeof(v35));
  v36 = 1065353216;
  v5 = (unsigned __int8 *)*((_QWORD *)a2 + 6);
  v6 = (char *)a2 + 56;
  if (v5 != (unsigned __int8 *)((char *)a2 + 56))
  {
    do
    {
      std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)v35, v5 + 32, (uint64_t)(v5 + 32));
      v7 = (unsigned __int8 *)*((_QWORD *)v5 + 1);
      if (v7)
      {
        do
        {
          v8 = v7;
          v7 = *(unsigned __int8 **)v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          v8 = (unsigned __int8 *)*((_QWORD *)v5 + 2);
          v9 = *(_QWORD *)v8 == (_QWORD)v5;
          v5 = v8;
        }
        while (!v9);
      }
      v5 = v8;
    }
    while (v8 != (unsigned __int8 *)v6);
  }
  v10 = (quasar::WordPronCache *)*((_QWORD *)this + 6);
  if (v10 != (quasar::WordPronCache *)((char *)this + 56))
  {
    while (1)
    {
      if (!std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>(v35, (unsigned __int8 *)v10 + 32))
      {
        v11 = (_QWORD *)*((_QWORD *)v10 + 7);
        if (v11 != (_QWORD *)((char *)v10 + 64))
          break;
      }
LABEL_43:
      v15 = (quasar::WordPronCache *)*((_QWORD *)v10 + 1);
      if (v15)
      {
        do
        {
          v16 = v15;
          v15 = *(quasar::WordPronCache **)v15;
        }
        while (v15);
      }
      else
      {
        do
        {
          v16 = (quasar::WordPronCache *)*((_QWORD *)v10 + 2);
          v9 = *(_QWORD *)v16 == (_QWORD)v10;
          v10 = v16;
        }
        while (!v9);
      }
      v10 = v16;
      if (v16 == (quasar::WordPronCache *)((char *)this + 56))
        return std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)v35);
    }
    while (1)
    {
      quasar::LmeDataFactoryBase::PronSet::PronSet(v34);
      v12 = v11 + 4;
      if (*((char *)v11 + 55) < 0)
      {
        std::string::__init_copy_ctor_external(&v28, (const std::string::value_type *)v11[4], v11[5]);
      }
      else
      {
        *(_OWORD *)&v28.__r_.__value_.__l.__data_ = *v12;
        v28.__r_.__value_.__r.__words[2] = v11[6];
      }
      std::string::basic_string[abi:ne180100]<0>(__p, "");
      quasar::LmeDataFactoryBase::Word::Word(v29, &v28, __p, 0);
      if (v27 < 0)
        operator delete(__p[0]);
      if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v28.__r_.__value_.__l.__data_);
      if (quasar::WordPronCache::lookupWord(this, (const quasar::LmeDataFactoryBase::Word *)v29, 3, v34))
      {
        if (*((char *)v11 + 55) < 0)
        {
          std::string::__init_copy_ctor_external(&v21, (const std::string::value_type *)v11[4], v11[5]);
        }
        else
        {
          *(_OWORD *)&v21.__r_.__value_.__l.__data_ = *v12;
          v21.__r_.__value_.__r.__words[2] = v11[6];
        }
        std::string::basic_string[abi:ne180100]<0>(v19, "");
        quasar::LmeDataFactoryBase::Word::Word(&v22, &v21, v19, 1, v34);
        quasar::WordPronCache::addWord(a2, &v22, 3);
        std::__tree<std::__value_type<std::pair<quasar::PronType,std::string>,float>,std::__map_value_compare<std::pair<quasar::PronType,std::string>,std::__value_type<std::pair<quasar::PronType,std::string>,float>,std::less<std::pair<quasar::PronType,std::string>>,true>,std::allocator<std::__value_type<std::pair<quasar::PronType,std::string>,float>>>::destroy((uint64_t)v25, v25[1]);
        if (v24 < 0)
          operator delete(v23);
        if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v22.__r_.__value_.__l.__data_);
        if (v20 < 0)
          operator delete(v19[0]);
        if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v21.__r_.__value_.__l.__data_);
      }
      else if ((a3 & 1) != 0)
      {
        goto LABEL_33;
      }
      quasar::WordPronCache::addTemplateForWord((uint64_t **)a2, (uint64_t)v10 + 32, (uint64_t)(v11 + 4), 3);
LABEL_33:
      std::__tree<std::__value_type<std::pair<quasar::PronType,std::string>,float>,std::__map_value_compare<std::pair<quasar::PronType,std::string>,std::__value_type<std::pair<quasar::PronType,std::string>,float>,std::less<std::pair<quasar::PronType,std::string>>,true>,std::allocator<std::__value_type<std::pair<quasar::PronType,std::string>,float>>>::destroy((uint64_t)v33, v33[1]);
      if (v32 < 0)
        operator delete(v31);
      if (v30 < 0)
        operator delete(v29[0]);
      std::__tree<std::__value_type<std::pair<quasar::PronType,std::string>,float>,std::__map_value_compare<std::pair<quasar::PronType,std::string>,std::__value_type<std::pair<quasar::PronType,std::string>,float>,std::less<std::pair<quasar::PronType,std::string>>,true>,std::allocator<std::__value_type<std::pair<quasar::PronType,std::string>,float>>>::destroy((uint64_t)v34, v34[1]);
      v13 = (_QWORD *)v11[1];
      if (v13)
      {
        do
        {
          v14 = v13;
          v13 = (_QWORD *)*v13;
        }
        while (v13);
      }
      else
      {
        do
        {
          v14 = (_QWORD *)v11[2];
          v9 = *v14 == (_QWORD)v11;
          v11 = v14;
        }
        while (!v9);
      }
      v11 = v14;
      if (v14 == (_QWORD *)((char *)v10 + 64))
        goto LABEL_43;
    }
  }
  return std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)v35);
}

void sub_1ADC4BB30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,char a46)
{
  uint64_t v46;

  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(v46 - 144);
  _Unwind_Resume(a1);
}

uint64_t quasar::tokenMapToStream(_QWORD *a1, char **a2)
{
  uint64_t result;
  char *v5;
  _QWORD *v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char **v16;
  BOOL v17;
  _OWORD v18[17];

  result = kaldi::WriteBasicType<int>(a1, 1);
  v5 = *a2;
  if (*a2 != (char *)(a2 + 1))
  {
    do
    {
      if (quasar::gLogLevel >= 6)
      {
        memset(v18, 0, sizeof(v18));
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v18);
        v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)"tokenMapToStream dump, key=", 27);
        v7 = v5[55];
        if (v7 >= 0)
          v8 = (uint64_t)(v5 + 32);
        else
          v8 = *((_QWORD *)v5 + 4);
        if (v7 >= 0)
          v9 = v5[55];
        else
          v9 = *((_QWORD *)v5 + 5);
        v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, v8, v9);
        v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)" value=", 7);
        v12 = v5[79];
        if (v12 >= 0)
          v13 = (uint64_t)(v5 + 56);
        else
          v13 = *((_QWORD *)v5 + 7);
        if (v12 >= 0)
          v14 = v5[79];
        else
          v14 = *((_QWORD *)v5 + 8);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, v13, v14);
        quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)v18);
      }
      kaldi::WriteToken(a1, 1, v5 + 32);
      result = (uint64_t)kaldi::WriteToken(a1, 1, v5 + 56);
      v15 = (char *)*((_QWORD *)v5 + 1);
      if (v15)
      {
        do
        {
          v16 = (char **)v15;
          v15 = *(char **)v15;
        }
        while (v15);
      }
      else
      {
        do
        {
          v16 = (char **)*((_QWORD *)v5 + 2);
          v17 = *v16 == v5;
          v5 = (char *)v16;
        }
        while (!v17);
      }
      v5 = (char *)v16;
    }
    while (v16 != a2 + 1);
  }
  return result;
}

void sub_1ADC4BD54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)&a9);
  _Unwind_Resume(a1);
}

void quasar::EnumerationTypes::fromStream(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;

  quasar::tokenMapFromStream(a2, (uint64_t)&v6);
  v3 = a1 + 8;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(a1, *(_QWORD **)(a1 + 8));
  v4 = v7;
  *(_QWORD *)a1 = v6;
  *(_QWORD *)(a1 + 8) = v4;
  v5 = v8;
  *(_QWORD *)(a1 + 16) = v8;
  if (v5)
  {
    v4[2] = v3;
    v6 = &v7;
    v7 = 0;
    v8 = 0;
    v4 = 0;
  }
  else
  {
    *(_QWORD *)a1 = v3;
  }
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v6, v4);
}

void quasar::tokenMapFromStream(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v4;
  int i;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  _BYTE v18[32];
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  int v34;
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)a2 = a2 + 8;
  v34 = 0;
  kaldi::ReadBasicType<int>(a1, 1, (uint64_t)&v34);
  if (quasar::gLogLevel >= 5)
  {
    v32 = 0u;
    v33 = 0u;
    v30 = 0u;
    v31 = 0u;
    v28 = 0u;
    v29 = 0u;
    v26 = 0u;
    v27 = 0u;
    v24 = 0u;
    v25 = 0u;
    v22 = 0u;
    v23 = 0u;
    v20 = 0u;
    v21 = 0u;
    v19 = 0u;
    memset(v18, 0, sizeof(v18));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v18);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)"LME STREAM DUMP ", 16);
    std::istream::tellg();
    v4 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)": nMapSize = ", 13);
    std::ostream::operator<<();
    quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)v18);
  }
  if (v34 >= 1)
  {
    for (i = 0; i < v34; ++i)
    {
      v16 = 0uLL;
      v17 = 0;
      v14 = 0uLL;
      v15 = 0;
      kaldi::ReadToken(a1, 1, (uint64_t)&v16);
      kaldi::ReadToken(a1, 1, (uint64_t)&v14);
      if (quasar::gLogLevel >= 5)
      {
        v32 = 0u;
        v33 = 0u;
        v30 = 0u;
        v31 = 0u;
        v28 = 0u;
        v29 = 0u;
        v26 = 0u;
        v27 = 0u;
        v24 = 0u;
        v25 = 0u;
        v22 = 0u;
        v23 = 0u;
        v20 = 0u;
        v21 = 0u;
        v19 = 0u;
        memset(v18, 0, sizeof(v18));
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v18);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)"LME STREAM DUMP ", 16);
        std::istream::tellg();
        v6 = (_QWORD *)std::ostream::operator<<();
        v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)": key = ", 8);
        if (v17 >= 0)
          v8 = (uint64_t)&v16;
        else
          v8 = v16;
        if (v17 >= 0)
          v9 = HIBYTE(v17);
        else
          v9 = *((_QWORD *)&v16 + 1);
        v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, v8, v9);
        v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)" value = ", 9);
        if (v15 >= 0)
          v12 = (uint64_t)&v14;
        else
          v12 = v14;
        if (v15 >= 0)
          v13 = HIBYTE(v15);
        else
          v13 = *((_QWORD *)&v14 + 1);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, v12, v13);
        quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)v18);
      }
      std::pair<std::string,std::string>::pair[abi:ne180100]<std::string&,std::string&,0>((std::string *)v18, &v16, &v14);
      std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::pair<std::string,std::string>>((uint64_t **)a2, (const void **)v18, (uint64_t)v18);
      if (SHIBYTE(v19) < 0)
        operator delete(*(void **)&v18[24]);
      if ((v18[23] & 0x80000000) != 0)
        operator delete(*(void **)v18);
      if (SHIBYTE(v15) < 0)
        operator delete((void *)v14);
      if (SHIBYTE(v17) < 0)
        operator delete((void *)v16);
    }
  }
}

void sub_1ADC4C0A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21)
{
  uint64_t v21;

  quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&a21);
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(v21, *(_QWORD **)(v21 + 8));
  _Unwind_Resume(a1);
}

BOOL quasar::EnumerationTypes::insert(uint64_t **a1, uint64_t a2, __int128 *a3)
{
  uint64_t v6;
  _QWORD *v7;
  int v8;
  const void *v9;
  uint64_t v10;
  void *v12[2];
  void *__p[2];
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;

  v6 = std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::find<std::string>((uint64_t)a1, (const void **)a2);
  if (a1 + 1 == (uint64_t **)v6)
  {
    std::pair<std::string,std::string>::pair[abi:ne180100]<true,0>((std::string *)v12, (__int128 *)a2, a3);
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::pair<std::string,std::string>>(a1, (const void **)v12, (uint64_t)v12);
    if (SHIBYTE(v14) < 0)
      operator delete(__p[1]);
    if (SHIBYTE(__p[0]) < 0)
      operator delete(v12[0]);
  }
  else if (quasar::gLogLevel >= 4)
  {
    v27 = 0u;
    v28 = 0u;
    v25 = 0u;
    v26 = 0u;
    v23 = 0u;
    v24 = 0u;
    v21 = 0u;
    v22 = 0u;
    v19 = 0u;
    v20 = 0u;
    v17 = 0u;
    v18 = 0u;
    v15 = 0u;
    v16 = 0u;
    *(_OWORD *)__p = 0u;
    v14 = 0u;
    *(_OWORD *)v12 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v12);
    v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"Duplicate key is being added to enumerationTypeMap with key=", 60);
    v8 = *(char *)(a2 + 23);
    if (v8 >= 0)
      v9 = (const void *)a2;
    else
      v9 = *(const void **)a2;
    if (v8 >= 0)
      v10 = *(unsigned __int8 *)(a2 + 23);
    else
      v10 = *(_QWORD *)(a2 + 8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)v9, v10);
    quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)v12);
  }
  return a1 + 1 == (uint64_t **)v6;
}

void sub_1ADC4C244(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::pair<std::string,std::string>::~pair((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void quasar::LmeData::~LmeData(quasar::LmeData *this)
{
  *(_QWORD *)this = &off_1E5D3BAB8;
  std::__tree<std::string>::destroy((uint64_t)this + 368, *((char **)this + 47));
  std::__tree<std::string>::destroy((uint64_t)this + 344, *((char **)this + 44));
  if (*((char *)this + 343) < 0)
    operator delete(*((void **)this + 40));
  if (*((char *)this + 319) < 0)
    operator delete(*((void **)this + 37));
  if (*((char *)this + 295) < 0)
    operator delete(*((void **)this + 34));
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)this + 240, *((_QWORD **)this + 31));
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this + 224);
  std::__tree<std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>>>::destroy((uint64_t)this + 200, *((_QWORD **)this + 26));
  if (*((char *)this + 199) < 0)
    operator delete(*((void **)this + 22));
  quasar::WordPronCache::~WordPronCache((quasar::LmeData *)((char *)this + 88));
  quasar::WordPronCache::~WordPronCache((quasar::LmeData *)((char *)this + 16));
}

{
  quasar::LmeData::~LmeData(this);
  JUMPOUT(0x1AF44D190);
}

BOOL quasar::LmeData::lookupWordPronCache(quasar::LmeData *this, const quasar::LmeDataFactoryBase::Word *a2, int a3, char **a4)
{
  return quasar::WordPronCache::lookupWord((quasar::LmeData *)((char *)this + 16), a2, a3, a4);
}

BOOL quasar::LmeData::lookupWordEmbeddingCache(quasar::LmeData *this, const quasar::LmeDataFactoryBase::Word *a2, int a3, char **a4)
{
  return quasar::WordPronCache::lookupWord((quasar::LmeData *)((char *)this + 88), a2, a3, a4);
}

uint64_t quasar::LmeData::removeFstData(uint64_t **a1, const void **a2)
{
  std::__tree<std::__value_type<std::string,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>::__erase_unique<std::string>(a1 + 25, a2);
  std::__tree<std::string>::__erase_unique<std::string>(a1 + 43, a2);
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__erase_unique<std::string>(a1 + 30, a2);
  std::__tree<std::__value_type<std::string,std::set<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<std::string>>>>::__erase_unique<std::string>(a1 + 8, a2);
  return std::__tree<std::__value_type<std::string,std::set<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<std::string>>>>::__erase_unique<std::string>(a1 + 17, a2);
}

uint64_t quasar::LmeData::toStream(uint64_t a1, _QWORD *a2, int a3)
{
  int v3;
  _QWORD *v6;
  char *v7;
  _QWORD *v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  char *v13;
  char *v14;
  BOOL v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  char *v24;
  _QWORD *v25;
  char *v26;
  char *v27;
  _QWORD *v28;
  _QWORD *v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  char *v35;
  _QWORD *v36;
  char *v37;
  char *v38;
  uint64_t v39;
  char *v40;
  _QWORD *v41;
  _BYTE *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v46;
  __int128 v47;
  _OWORD v48[4];
  void *__p[2];
  __int128 v50;
  __int128 v51;
  _OWORD v52[10];
  _BYTE v53[32];
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  uint64_t v77;
  uint64_t v78;

  v3 = a3;
  v78 = *MEMORY[0x1E0C80C00];
  if ((a3 - 20) > 0xFFFFFFF8)
  {
    quasar::ioutils::WriteQuasarHeader(a2, 1);
    if (v3 == 14)
    {
      *((_QWORD *)&v47 + 1) = 0;
      *(_QWORD *)&v48[0] = 0;
      *(_QWORD *)&v47 = (char *)&v47 + 8;
      quasar::tokenMapToStream(a2, (char **)&v47);
      std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v47, *((_QWORD **)&v47 + 1));
      v3 = 14;
    }
  }
  else
  {
    if (quasar::gLogLevel >= 2)
    {
      v51 = 0u;
      memset(v52, 0, 144);
      *(_OWORD *)__p = 0u;
      v50 = 0u;
      memset(v48, 0, sizeof(v48));
      v47 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v47);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v47, (uint64_t)"Invalid write version choice: ", 30);
      v6 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)", it is now set to: ", 20);
      std::ostream::operator<<();
      quasar::QuasarWarnMessage::~QuasarWarnMessage((quasar::QuasarWarnMessage *)&v47);
    }
    quasar::ioutils::WriteQuasarHeader(a2, 1);
    v3 = 19;
  }
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v47);
  kaldi::WriteBasicType<int>(v48, 1);
  kaldi::WriteBasicType<long long>(v48, 1);
  kaldi::WriteBasicType<long long>(v48, 1);
  kaldi::WriteBasicType<unsigned int>(v48, 1);
  kaldi::WriteToken(v48, 1, (char *)(a1 + 176));
  v46 = a1;
  if (v3 < 0xF)
    goto LABEL_102;
  kaldi::WriteString(v48, 1, a1 + 272);
  kaldi::WriteString(v48, 1, a1 + 296);
  kaldi::WriteString(v48, 1, a1 + 320);
  kaldi::WriteBasicType<int>(v48, 1);
  v7 = *(char **)(a1 + 344);
  if (v7 != (char *)(v46 + 352))
  {
    do
    {
      if (quasar::gLogLevel >= 6)
      {
        v67 = 0u;
        v68 = 0u;
        v65 = 0u;
        v66 = 0u;
        v63 = 0u;
        v64 = 0u;
        v61 = 0u;
        v62 = 0u;
        v59 = 0u;
        v60 = 0u;
        v57 = 0u;
        v58 = 0u;
        v55 = 0u;
        v56 = 0u;
        v54 = 0u;
        memset(v53, 0, sizeof(v53));
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v53);
        v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v53, (uint64_t)"basicTypeMapToStream dump, key=", 31);
        v9 = v7[55];
        if (v9 >= 0)
          v10 = (uint64_t)(v7 + 32);
        else
          v10 = *((_QWORD *)v7 + 4);
        if (v9 >= 0)
          v11 = v7[55];
        else
          v11 = *((_QWORD *)v7 + 5);
        v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, v10, v11);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)" value=", 7);
        std::ostream::operator<<();
        quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)v53);
      }
      kaldi::WriteToken(v48, 1, v7 + 32);
      kaldi::WriteBasicType<long long>(v48, 1);
      v13 = (char *)*((_QWORD *)v7 + 1);
      if (v13)
      {
        do
        {
          v14 = v13;
          v13 = *(char **)v13;
        }
        while (v13);
      }
      else
      {
        do
        {
          v14 = (char *)*((_QWORD *)v7 + 2);
          v15 = *(_QWORD *)v14 == (_QWORD)v7;
          v7 = v14;
        }
        while (!v15);
      }
      v7 = v14;
    }
    while (v14 != (char *)(v46 + 352));
  }
  if (v3 < 16)
  {
LABEL_102:
    if (*(_BYTE *)(v46 + 392))
    {
      v67 = 0u;
      v68 = 0u;
      v65 = 0u;
      v66 = 0u;
      v63 = 0u;
      v64 = 0u;
      v61 = 0u;
      v62 = 0u;
      v59 = 0u;
      v60 = 0u;
      v57 = 0u;
      v58 = 0u;
      v55 = 0u;
      v56 = 0u;
      v54 = 0u;
      memset(v53, 0, sizeof(v53));
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v53);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v53, (uint64_t)"Bug! writeVersion is too low for useWordpiece=true", 50);
      quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v53);
    }
  }
  else
  {
    v16 = v46;
    kaldi::WriteBasicType<BOOL>(v48, 1, *(unsigned __int8 *)(v46 + 392));
    if (v3 < 0x11)
      goto LABEL_44;
    kaldi::WriteBasicType<int>(v48, 1);
    v17 = *(_QWORD **)(v46 + 368);
    if (v17 == (_QWORD *)(v46 + 376))
      goto LABEL_44;
    do
    {
      if (quasar::gLogLevel >= 6)
      {
        v67 = 0u;
        v68 = 0u;
        v65 = 0u;
        v66 = 0u;
        v63 = 0u;
        v64 = 0u;
        v61 = 0u;
        v62 = 0u;
        v59 = 0u;
        v60 = 0u;
        v57 = 0u;
        v58 = 0u;
        v55 = 0u;
        v56 = 0u;
        v54 = 0u;
        memset(v53, 0, sizeof(v53));
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v53);
        v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v53, (uint64_t)"stringSetToStream dump, str=", 28);
        v19 = *((char *)v17 + 55);
        if (v19 >= 0)
          v20 = (uint64_t)(v17 + 4);
        else
          v20 = v17[4];
        if (v19 >= 0)
          v21 = *((unsigned __int8 *)v17 + 55);
        else
          v21 = v17[5];
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, v20, v21);
        quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)v53);
      }
      kaldi::WriteString(v48, 1, (uint64_t)(v17 + 4));
      v22 = (_QWORD *)v17[1];
      if (v22)
      {
        do
        {
          v23 = v22;
          v22 = (_QWORD *)*v22;
        }
        while (v22);
      }
      else
      {
        do
        {
          v23 = (_QWORD *)v17[2];
          v15 = *v23 == (_QWORD)v17;
          v17 = v23;
        }
        while (!v15);
      }
      v17 = v23;
    }
    while (v23 != (_QWORD *)(v46 + 376));
  }
  v16 = v46;
  if (v3 <= 13)
    quasar::WordPronCache::toStream((uint64_t *)(v46 + 16), v48, 13);
LABEL_44:
  quasar::tokenMapToStream(v48, (char **)(v16 + 240));
  if (quasar::gLogLevel >= 5)
  {
    v67 = 0u;
    v68 = 0u;
    v65 = 0u;
    v66 = 0u;
    v63 = 0u;
    v64 = 0u;
    v61 = 0u;
    v62 = 0u;
    v59 = 0u;
    v60 = 0u;
    v57 = 0u;
    v58 = 0u;
    v55 = 0u;
    v56 = 0u;
    v54 = 0u;
    memset(v53, 0, sizeof(v53));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v53);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v53, (uint64_t)"LME STREAM WRITE ", 17);
    v24 = (char *)v48 + *(_QWORD *)(*(_QWORD *)&v48[0] - 24);
    if ((v24[32] & 5) != 0)
    {
      v75 = 0u;
      v76 = 0u;
      v73 = 0u;
      v74 = 0u;
      v71 = 0u;
      v72 = 0u;
      v69 = 0u;
      v70 = 0u;
      v77 = -1;
    }
    else
    {
      (*(void (**)(__int128 *__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**((_QWORD **)v24 + 5) + 32))(&v69, *((_QWORD *)v24 + 5), 0, 1, 16);
    }
    v25 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)": About to write FSTs", 21);
    quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)v53);
  }
  v26 = *(char **)(v46 + 200);
  if (v26 != (char *)(v46 + 208))
  {
    do
    {
      kaldi::WriteToken(v48, 1, v26 + 32);
      if (quasar::gLogLevel >= 6)
      {
        v67 = 0u;
        v68 = 0u;
        v65 = 0u;
        v66 = 0u;
        v63 = 0u;
        v64 = 0u;
        v61 = 0u;
        v62 = 0u;
        v59 = 0u;
        v60 = 0u;
        v57 = 0u;
        v58 = 0u;
        v55 = 0u;
        v56 = 0u;
        v54 = 0u;
        memset(v53, 0, sizeof(v53));
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v53);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v53, (uint64_t)"LME STREAM WRITE ", 17);
        v27 = (char *)v48 + *(_QWORD *)(*(_QWORD *)&v48[0] - 24);
        if ((v27[32] & 5) != 0)
        {
          v75 = 0u;
          v76 = 0u;
          v73 = 0u;
          v74 = 0u;
          v71 = 0u;
          v72 = 0u;
          v69 = 0u;
          v70 = 0u;
          v77 = -1;
        }
        else
        {
          (*(void (**)(__int128 *__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**((_QWORD **)v27 + 5)
                                                                                           + 32))(&v69, *((_QWORD *)v27 + 5), 0, 1, 16);
        }
        v28 = (_QWORD *)std::ostream::operator<<();
        v29 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)": templateName = ", 17);
        v30 = v26[55];
        if (v30 >= 0)
          v31 = (uint64_t)(v26 + 32);
        else
          v31 = *((_QWORD *)v26 + 4);
        if (v30 >= 0)
          v32 = v26[55];
        else
          v32 = *((_QWORD *)v26 + 5);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, v31, v32);
        quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)v53);
      }
      v33 = *((_QWORD *)v26 + 7);
      std::string::basic_string[abi:ne180100]<0>(&v69, "");
      v34 = FLAGS_fst_align;
      if (SBYTE7(v70) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)v53, (const std::string::value_type *)v69, *((std::string::size_type *)&v69 + 1));
      }
      else
      {
        *(_OWORD *)v53 = v69;
        *(_QWORD *)&v53[16] = v70;
      }
      *(_WORD *)&v53[24] = 1;
      v53[26] = 0;
      v53[27] = v34;
      (*(void (**)(uint64_t, _OWORD *, _BYTE *))(*(_QWORD *)v33 + 96))(v33, v48, v53);
      if ((v53[23] & 0x80000000) != 0)
        operator delete(*(void **)v53);
      if (SBYTE7(v70) < 0)
        operator delete((void *)v69);
      if (quasar::gLogLevel >= 6)
      {
        v67 = 0u;
        v68 = 0u;
        v65 = 0u;
        v66 = 0u;
        v63 = 0u;
        v64 = 0u;
        v61 = 0u;
        v62 = 0u;
        v59 = 0u;
        v60 = 0u;
        v57 = 0u;
        v58 = 0u;
        v55 = 0u;
        v56 = 0u;
        v54 = 0u;
        memset(v53, 0, sizeof(v53));
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v53);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v53, (uint64_t)"LME STREAM WRITE ", 17);
        v35 = (char *)v48 + *(_QWORD *)(*(_QWORD *)&v48[0] - 24);
        if ((v35[32] & 5) != 0)
        {
          v75 = 0u;
          v76 = 0u;
          v73 = 0u;
          v74 = 0u;
          v71 = 0u;
          v72 = 0u;
          v69 = 0u;
          v70 = 0u;
          v77 = -1;
        }
        else
        {
          (*(void (**)(__int128 *__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**((_QWORD **)v35 + 5)
                                                                                           + 32))(&v69, *((_QWORD *)v35 + 5), 0, 1, 16);
        }
        v36 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)": <FST>", 7);
        quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)v53);
      }
      v37 = (char *)*((_QWORD *)v26 + 1);
      if (v37)
      {
        do
        {
          v38 = v37;
          v37 = *(char **)v37;
        }
        while (v37);
      }
      else
      {
        do
        {
          v38 = (char *)*((_QWORD *)v26 + 2);
          v15 = *(_QWORD *)v38 == (_QWORD)v26;
          v26 = v38;
        }
        while (!v15);
      }
      v26 = v38;
    }
    while (v38 != (char *)(v46 + 208));
  }
  quasar::QsrTextSymbolTable::Write(*(_QWORD *)(v46 + 224), v48, 3, 1);
  if (v3 < 19)
  {
    v39 = v46;
    if (v3 < 14)
      goto LABEL_83;
  }
  else
  {
    v39 = v46;
    quasar::WordPronCache::toStream((uint64_t *)(v46 + 88), v48, v3);
  }
  quasar::WordPronCache::toStream((uint64_t *)(v39 + 16), v48, v3);
LABEL_83:
  if (quasar::gLogLevel >= 5)
  {
    v67 = 0u;
    v68 = 0u;
    v65 = 0u;
    v66 = 0u;
    v63 = 0u;
    v64 = 0u;
    v61 = 0u;
    v62 = 0u;
    v59 = 0u;
    v60 = 0u;
    v57 = 0u;
    v58 = 0u;
    v55 = 0u;
    v56 = 0u;
    v54 = 0u;
    memset(v53, 0, sizeof(v53));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v53);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v53, (uint64_t)"LME STREAM WRITE ", 17);
    v40 = (char *)v48 + *(_QWORD *)(*(_QWORD *)&v48[0] - 24);
    if ((v40[32] & 5) != 0)
    {
      v75 = 0u;
      v76 = 0u;
      v73 = 0u;
      v74 = 0u;
      v71 = 0u;
      v72 = 0u;
      v69 = 0u;
      v70 = 0u;
      v77 = -1;
    }
    else
    {
      (*(void (**)(__int128 *__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**((_QWORD **)v40 + 5) + 32))(&v69, *((_QWORD *)v40 + 5), 0, 1, 16);
    }
    v41 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v41, (uint64_t)": done.", 7);
    quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)v53);
  }
  std::stringbuf::str();
  if (v53[23] >= 0)
    v42 = v53;
  else
    v42 = *(_BYTE **)v53;
  if (v53[23] >= 0)
    v43 = v53[23];
  else
    v43 = *(_QWORD *)&v53[8];
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)v42, v43);
  if ((v53[23] & 0x80000000) != 0)
    operator delete(*(void **)v53);
  *(_QWORD *)&v47 = *MEMORY[0x1E0DE4F50];
  v44 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
  *(_QWORD *)((char *)&v48[-1] + *(_QWORD *)(v47 - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
  *(_QWORD *)&v48[0] = v44;
  *((_QWORD *)&v48[0] + 1) = MEMORY[0x1E0DE4FB8] + 16;
  if (SHIBYTE(v50) < 0)
    operator delete(__p[1]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x1AF44D094](v52);
}

void sub_1ADC4CDC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, _QWORD *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,void *__p,uint64_t a50,int a51,__int16 a52,char a53,char a54)
{
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&a13, a14);
  _Unwind_Resume(a1);
}

uint64_t kaldi::WriteBasicType<long long>(_QWORD *a1, int a2)
{
  uint64_t result;
  _QWORD *v4;
  std::runtime_error *exception;

  if (a2)
  {
    std::ostream::put();
    result = std::ostream::write();
  }
  else
  {
    v4 = (_QWORD *)std::ostream::operator<<();
    result = (uint64_t)std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)" ", 1);
  }
  if ((*((_BYTE *)a1 + *(_QWORD *)(*a1 - 24) + 32) & 5) != 0)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Write failure in WriteBasicType.");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  return result;
}

void sub_1ADC4CF70(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t quasar::LmeData::fromStream(uint64_t a1, uint64_t *a2, char a3, unsigned __int8 *a4)
{
  int QuasarHeader;
  uint64_t result;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;

  *(_DWORD *)(a1 + 268) = 1;
  QuasarHeader = quasar::ioutils::ReadQuasarHeader(a2, 1);
  *(_DWORD *)(a1 + 8) = QuasarHeader;
  if (quasar::gLogLevel >= 5)
  {
    v25 = 0u;
    v26 = 0u;
    v23 = 0u;
    v24 = 0u;
    v21 = 0u;
    v22 = 0u;
    v19 = 0u;
    v20 = 0u;
    v17 = 0u;
    v18 = 0u;
    v15 = 0u;
    v16 = 0u;
    v13 = 0u;
    v14 = 0u;
    v11 = 0u;
    v12 = 0u;
    v10 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v10);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v10, (uint64_t)"formatVersion=", 14);
    std::ostream::operator<<();
    quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&v10);
    QuasarHeader = *(_DWORD *)(a1 + 8);
  }
  if ((QuasarHeader - 20) > 0xFFFFFFF8)
  {
    if (QuasarHeader == 14)
    {
      quasar::tokenMapFromStream(a2, (uint64_t)&v10);
      std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v10, *((_QWORD **)&v10 + 1));
      QuasarHeader = *(_DWORD *)(a1 + 8);
    }
    result = quasar::LmeData::readBodyFromStream(a1, QuasarHeader, a2, a3, a4);
  }
  else
  {
    if (quasar::gLogLevel >= 4)
    {
      v25 = 0u;
      v26 = 0u;
      v23 = 0u;
      v24 = 0u;
      v21 = 0u;
      v22 = 0u;
      v19 = 0u;
      v20 = 0u;
      v17 = 0u;
      v18 = 0u;
      v15 = 0u;
      v16 = 0u;
      v13 = 0u;
      v14 = 0u;
      v11 = 0u;
      v12 = 0u;
      v10 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v10);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v10, (uint64_t)"Failed to read LmeData stream. Incorrect version: ", 50);
      std::ostream::operator<<();
      quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&v10);
    }
    result = 4;
  }
  *(_DWORD *)(a1 + 268) = result;
  return result;
}

void sub_1ADC4D0FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int128 a9, __int128 a10, __int128 a11, __int128 a12, __int128 a13, __int128 a14, __int128 a15, __int128 a16, __int128 a17, __int128 a18, __int128 a19, __int128 a20,__int128 a21,__int128 a22,__int128 a23,__int128 a24,__int128 a25)
{
  uint64_t v25;
  void *v26;
  void *v27;
  _QWORD *v28;
  const char *v29;
  size_t v30;

  if (a2 == 1)
  {
    v26 = __cxa_begin_catch(exception_object);
    if (quasar::gLogLevel >= 1)
    {
      v27 = v26;
      a24 = 0u;
      a25 = 0u;
      a22 = 0u;
      a23 = 0u;
      a20 = 0u;
      a21 = 0u;
      a18 = 0u;
      a19 = 0u;
      a16 = 0u;
      a17 = 0u;
      a14 = 0u;
      a15 = 0u;
      a12 = 0u;
      a13 = 0u;
      a10 = 0u;
      a11 = 0u;
      a9 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&a9);
      v28 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&a9, (uint64_t)"Error reading LmeData stream: ", 30);
      v29 = (const char *)(*(uint64_t (**)(void *))(*(_QWORD *)v27 + 16))(v27);
      v30 = strlen(v29);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)v29, v30);
      quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)&a9);
    }
    *(_DWORD *)(v25 + 268) = 6;
    __cxa_end_catch();
    JUMPOUT(0x1ADC4D0E4);
  }
  _Unwind_Resume(exception_object);
}

uint64_t quasar::LmeData::readBodyFromStream(uint64_t a1, int a2, uint64_t *a3, char a4, unsigned __int8 *a5)
{
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  unsigned __int8 *v22;
  unsigned __int8 *v23;
  _QWORD *v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v33;
  int i;
  _QWORD *v35;
  _QWORD *v36;
  void **v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  std::__shared_weak_count *v41;
  uint64_t v42;
  _QWORD *v43;
  int v44;
  _QWORD *v45;
  _QWORD *v46;
  void **v47;
  uint64_t v48;
  uint64_t v49;
  std::__shared_weak_count *v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t **v53;
  _QWORD *v54;
  unsigned int j;
  _QWORD *v56;
  _QWORD *v57;
  void *v58;
  uint64_t v59;
  uint64_t *v60;
  _QWORD *v61;
  _QWORD *v62;
  _QWORD *v63;
  quasar::QsrTextSymbolTable **v64;
  std::__shared_weak_count *v65;
  unint64_t *v66;
  unint64_t v67;
  std::__shared_weak_count *v68;
  unint64_t *p_shared_owners;
  unint64_t v70;
  uint64_t v71;
  std::__shared_weak_count *v72;
  unint64_t *v73;
  unint64_t v74;
  unint64_t v75;
  int v76;
  _QWORD *v77;
  _QWORD *v78;
  _QWORD *v79;
  int v80;
  _QWORD *v81;
  _QWORD *v82;
  _QWORD *v83;
  void **v84;
  uint64_t v85;
  _QWORD *v86;
  _QWORD *v87;
  _QWORD *v88;
  void *v89;
  uint64_t v90;
  _QWORD *v91;
  _QWORD *v92;
  uint64_t v93;
  std::__shared_weak_count *v94;
  unint64_t *v95;
  unint64_t v96;
  unint64_t v97;
  uint64_t v98;
  unint64_t *v99;
  unint64_t v100;
  uint64_t v101;
  _QWORD *v102;
  void **v103;
  uint64_t v104;
  _QWORD *v105;
  _QWORD *v106;
  uint64_t v108;
  void *v109;
  std::__shared_weak_count *v110;
  uint64_t v111;
  unsigned int v112;
  uint64_t v113;
  int v114;
  _BYTE v115[32];
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  void *__p[2];
  uint64_t v132;
  uint64_t v133;

  v133 = *MEMORY[0x1E0C80C00];
  if (quasar::gLogLevel >= 6)
  {
    v129 = 0u;
    v130 = 0u;
    v127 = 0u;
    v128 = 0u;
    v125 = 0u;
    v126 = 0u;
    v123 = 0u;
    v124 = 0u;
    v121 = 0u;
    v122 = 0u;
    v119 = 0u;
    v120 = 0u;
    v117 = 0u;
    v118 = 0u;
    v116 = 0u;
    memset(v115, 0, sizeof(v115));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v115);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v115, (uint64_t)"LME STREAM DUMP [Body]", 22);
    quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)v115);
  }
  kaldi::ReadBasicType<int>(a3, 1, a1 + 264);
  if (quasar::gLogLevel >= 5)
  {
    v129 = 0u;
    v130 = 0u;
    v127 = 0u;
    v128 = 0u;
    v125 = 0u;
    v126 = 0u;
    v123 = 0u;
    v124 = 0u;
    v121 = 0u;
    v122 = 0u;
    v119 = 0u;
    v120 = 0u;
    v117 = 0u;
    v118 = 0u;
    v116 = 0u;
    memset(v115, 0, sizeof(v115));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v115);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v115, (uint64_t)"LME STREAM DUMP ", 16);
    std::istream::tellg();
    v9 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)": g2pModelVersion = ", 20);
    std::ostream::operator<<();
    quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)v115);
  }
  kaldi::ReadBasicType<long long>(a3, 1, a1 + 160);
  if (quasar::gLogLevel >= 5)
  {
    v129 = 0u;
    v130 = 0u;
    v127 = 0u;
    v128 = 0u;
    v125 = 0u;
    v126 = 0u;
    v123 = 0u;
    v124 = 0u;
    v121 = 0u;
    v122 = 0u;
    v119 = 0u;
    v120 = 0u;
    v117 = 0u;
    v118 = 0u;
    v116 = 0u;
    memset(v115, 0, sizeof(v115));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v115);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v115, (uint64_t)"LME STREAM DUMP ", 16);
    std::istream::tellg();
    v10 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)": symTableFirstKey = ", 21);
    std::ostream::operator<<();
    quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)v115);
  }
  kaldi::ReadBasicType<long long>(a3, 1, a1 + 168);
  if (quasar::gLogLevel >= 5)
  {
    v129 = 0u;
    v130 = 0u;
    v127 = 0u;
    v128 = 0u;
    v125 = 0u;
    v126 = 0u;
    v123 = 0u;
    v124 = 0u;
    v121 = 0u;
    v122 = 0u;
    v119 = 0u;
    v120 = 0u;
    v117 = 0u;
    v118 = 0u;
    v116 = 0u;
    memset(v115, 0, sizeof(v115));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v115);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v115, (uint64_t)"LME STREAM DUMP ", 16);
    std::istream::tellg();
    v11 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)": symTableLastKey = ", 20);
    std::ostream::operator<<();
    quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)v115);
  }
  v112 = 0;
  kaldi::ReadBasicType<unsigned int>(a3, 1, (uint64_t)&v112);
  if (quasar::gLogLevel >= 5)
  {
    v129 = 0u;
    v130 = 0u;
    v127 = 0u;
    v128 = 0u;
    v125 = 0u;
    v126 = 0u;
    v123 = 0u;
    v124 = 0u;
    v121 = 0u;
    v122 = 0u;
    v119 = 0u;
    v120 = 0u;
    v117 = 0u;
    v118 = 0u;
    v116 = 0u;
    memset(v115, 0, sizeof(v115));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v115);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v115, (uint64_t)"LME STREAM DUMP ", 16);
    std::istream::tellg();
    v12 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)": fstSize = ", 12);
    std::ostream::operator<<();
    quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)v115);
  }
  kaldi::ReadToken(a3, 1, a1 + 176);
  if (quasar::gLogLevel >= 5)
  {
    v129 = 0u;
    v130 = 0u;
    v127 = 0u;
    v128 = 0u;
    v125 = 0u;
    v126 = 0u;
    v123 = 0u;
    v124 = 0u;
    v121 = 0u;
    v122 = 0u;
    v119 = 0u;
    v120 = 0u;
    v117 = 0u;
    v118 = 0u;
    v116 = 0u;
    memset(v115, 0, sizeof(v115));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v115);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v115, (uint64_t)"LME STREAM DUMP ", 16);
    std::istream::tellg();
    v13 = (_QWORD *)std::ostream::operator<<();
    v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)": phoneSetVersion = ", 20);
    v15 = *(char *)(a1 + 199);
    if (v15 >= 0)
      v16 = a1 + 176;
    else
      v16 = *(_QWORD *)(a1 + 176);
    if (v15 >= 0)
      v17 = *(unsigned __int8 *)(a1 + 199);
    else
      v17 = *(_QWORD *)(a1 + 184);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, v16, v17);
    quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)v115);
  }
  if (a2 <= 14)
    goto LABEL_98;
  kaldi::ReadString(a3, 1, a1 + 272);
  kaldi::ReadString(a3, 1, a1 + 296);
  v18 = a5[23];
  if ((v18 & 0x80u) == 0)
    v19 = a5[23];
  else
    v19 = *((_QWORD *)a5 + 1);
  if (!v19)
  {
LABEL_54:
    kaldi::ReadString(a3, 1, a1 + 320);
    v110 = 0;
    v111 = 0;
    v109 = &v110;
    v114 = 0;
    kaldi::ReadBasicType<int>(a3, 1, (uint64_t)&v114);
    if (quasar::gLogLevel >= 5)
    {
      v129 = 0u;
      v130 = 0u;
      v127 = 0u;
      v128 = 0u;
      v125 = 0u;
      v126 = 0u;
      v123 = 0u;
      v124 = 0u;
      v121 = 0u;
      v122 = 0u;
      v119 = 0u;
      v120 = 0u;
      v117 = 0u;
      v118 = 0u;
      v116 = 0u;
      memset(v115, 0, sizeof(v115));
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v115);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v115, (uint64_t)"LME STREAM DUMP ", 16);
      std::istream::tellg();
      v33 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, (uint64_t)": nMapSize = ", 13);
      std::ostream::operator<<();
      quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)v115);
    }
    if (v114 >= 1)
    {
      for (i = 0; i < v114; ++i)
      {
        __p[0] = 0;
        __p[1] = 0;
        v132 = 0;
        v113 = 0;
        kaldi::ReadToken(a3, 1, (uint64_t)__p);
        kaldi::ReadBasicType<long long>(a3, 1, (uint64_t)&v113);
        if (quasar::gLogLevel >= 5)
        {
          v129 = 0u;
          v130 = 0u;
          v127 = 0u;
          v128 = 0u;
          v125 = 0u;
          v126 = 0u;
          v123 = 0u;
          v124 = 0u;
          v121 = 0u;
          v122 = 0u;
          v119 = 0u;
          v120 = 0u;
          v117 = 0u;
          v118 = 0u;
          v116 = 0u;
          memset(v115, 0, sizeof(v115));
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v115);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v115, (uint64_t)"LME STREAM DUMP ", 16);
          std::istream::tellg();
          v35 = (_QWORD *)std::ostream::operator<<();
          v36 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)": key = ", 8);
          if (v132 >= 0)
            v37 = __p;
          else
            v37 = (void **)__p[0];
          if (v132 >= 0)
            v38 = HIBYTE(v132);
          else
            v38 = (uint64_t)__p[1];
          v39 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)v37, v38);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v39, (uint64_t)" value = ", 9);
          std::ostream::operator<<();
          quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)v115);
        }
        if (SHIBYTE(v132) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)v115, (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
        }
        else
        {
          *(_OWORD *)v115 = *(_OWORD *)__p;
          *(_QWORD *)&v115[16] = v132;
        }
        *(_QWORD *)&v115[24] = v113;
        std::__tree<std::__value_type<std::string,quasar::PronGuessStats::Record>,std::__map_value_compare<std::string,std::__value_type<std::string,quasar::PronGuessStats::Record>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,quasar::PronGuessStats::Record>>>::__emplace_unique_key_args<std::string,std::pair<std::string,quasar::PronGuessStats::Record>>((uint64_t **)&v109, (const void **)v115, (uint64_t)v115);
        if ((v115[23] & 0x80000000) != 0)
          operator delete(*(void **)v115);
        if (SHIBYTE(v132) < 0)
          operator delete(__p[0]);
      }
    }
    v40 = a1 + 352;
    std::__tree<std::string>::destroy(a1 + 344, *(char **)(a1 + 352));
    v41 = v110;
    *(_QWORD *)(a1 + 344) = v109;
    *(_QWORD *)(a1 + 352) = v41;
    v42 = v111;
    *(_QWORD *)(a1 + 360) = v111;
    if (v42)
    {
      v41->__shared_weak_owners_ = v40;
      v109 = &v110;
      v110 = 0;
      v111 = 0;
      v41 = 0;
    }
    else
    {
      *(_QWORD *)(a1 + 344) = v40;
    }
    std::__tree<std::string>::destroy((uint64_t)&v109, (char *)v41);
    if (a2 >= 16)
    {
      kaldi::ReadBasicType<BOOL>(a3, 1, (char *)(a1 + 392));
      if (a2 < 0x11)
        goto LABEL_102;
      v110 = 0;
      v111 = 0;
      v109 = &v110;
      LODWORD(v113) = 0;
      kaldi::ReadBasicType<int>(a3, 1, (uint64_t)&v113);
      if (quasar::gLogLevel >= 5)
      {
        v129 = 0u;
        v130 = 0u;
        v127 = 0u;
        v128 = 0u;
        v125 = 0u;
        v126 = 0u;
        v123 = 0u;
        v124 = 0u;
        v121 = 0u;
        v122 = 0u;
        v119 = 0u;
        v120 = 0u;
        v117 = 0u;
        v118 = 0u;
        v116 = 0u;
        memset(v115, 0, sizeof(v115));
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v115);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v115, (uint64_t)"LME STREAM DUMP ", 16);
        std::istream::tellg();
        v43 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)": nSetSize = ", 13);
        std::ostream::operator<<();
        quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)v115);
      }
      if ((int)v113 >= 1)
      {
        v44 = 0;
        do
        {
          __p[0] = 0;
          __p[1] = 0;
          v132 = 0;
          kaldi::ReadString(a3, 1, (uint64_t)__p);
          if (quasar::gLogLevel >= 5)
          {
            v129 = 0u;
            v130 = 0u;
            v127 = 0u;
            v128 = 0u;
            v125 = 0u;
            v126 = 0u;
            v123 = 0u;
            v124 = 0u;
            v121 = 0u;
            v122 = 0u;
            v119 = 0u;
            v120 = 0u;
            v117 = 0u;
            v118 = 0u;
            v116 = 0u;
            memset(v115, 0, sizeof(v115));
            kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v115);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v115, (uint64_t)"LME STREAM DUMP ", 16);
            std::istream::tellg();
            v45 = (_QWORD *)std::ostream::operator<<();
            v46 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v45, (uint64_t)": str = ", 8);
            if (v132 >= 0)
              v47 = __p;
            else
              v47 = (void **)__p[0];
            if (v132 >= 0)
              v48 = HIBYTE(v132);
            else
              v48 = (uint64_t)__p[1];
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v46, (uint64_t)v47, v48);
            quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)v115);
          }
          std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t **)&v109, (const void **)__p, (uint64_t)__p);
          if (SHIBYTE(v132) < 0)
            operator delete(__p[0]);
          ++v44;
        }
        while (v44 < (int)v113);
      }
      v49 = a1 + 376;
      std::__tree<std::string>::destroy(a1 + 368, *(char **)(a1 + 376));
      v50 = v110;
      *(_QWORD *)(a1 + 368) = v109;
      *(_QWORD *)(a1 + 376) = v50;
      v51 = v111;
      *(_QWORD *)(a1 + 384) = v111;
      if (v51)
      {
        v50->__shared_weak_owners_ = v49;
        v109 = &v110;
        v110 = 0;
        v111 = 0;
        v50 = 0;
      }
      else
      {
        *(_QWORD *)(a1 + 368) = v49;
      }
      std::__tree<std::string>::destroy((uint64_t)&v109, (char *)v50);
    }
LABEL_98:
    if (a2 < 14)
    {
      if (quasar::gLogLevel >= 6)
      {
        v129 = 0u;
        v130 = 0u;
        v127 = 0u;
        v128 = 0u;
        v125 = 0u;
        v126 = 0u;
        v123 = 0u;
        v124 = 0u;
        v121 = 0u;
        v122 = 0u;
        v119 = 0u;
        v120 = 0u;
        v117 = 0u;
        v118 = 0u;
        v116 = 0u;
        memset(v115, 0, sizeof(v115));
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v115);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v115, (uint64_t)"LME STREAM DUMP [Pron Cache]", 28);
        quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)v115);
      }
      quasar::WordPronCache::fromStream(a1 + 16, a3, a2);
    }
LABEL_102:
    quasar::EnumerationTypes::fromStream(a1 + 240, a3);
    if (quasar::gLogLevel >= 6)
    {
      v129 = 0u;
      v130 = 0u;
      v127 = 0u;
      v128 = 0u;
      v125 = 0u;
      v126 = 0u;
      v123 = 0u;
      v124 = 0u;
      v121 = 0u;
      v122 = 0u;
      v119 = 0u;
      v120 = 0u;
      v117 = 0u;
      v118 = 0u;
      v116 = 0u;
      memset(v115, 0, sizeof(v115));
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v115);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v115, (uint64_t)"LME STREAM DUMP [Body]", 22);
      quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)v115);
    }
    std::istream::tellg();
    if (quasar::gLogLevel >= 5)
    {
      v129 = 0u;
      v130 = 0u;
      v127 = 0u;
      v128 = 0u;
      v125 = 0u;
      v126 = 0u;
      v123 = 0u;
      v124 = 0u;
      v121 = 0u;
      v122 = 0u;
      v119 = 0u;
      v120 = 0u;
      v117 = 0u;
      v118 = 0u;
      v116 = 0u;
      memset(v115, 0, sizeof(v115));
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v115);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v115, (uint64_t)"LME STREAM DUMP ", 16);
      std::istream::tellg();
      v52 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v52, (uint64_t)": About to read FSTs", 20);
      quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)v115);
    }
    v108 = a1;
    v54 = *(_QWORD **)(a1 + 208);
    v53 = (uint64_t **)(a1 + 208);
    std::__tree<std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>>>::destroy((uint64_t)(v53 - 1), v54);
    *(v53 - 1) = (uint64_t *)v53;
    *v53 = 0;
    v53[1] = 0;
    if (v112)
    {
      for (j = 0; j < v112; ++j)
      {
        v109 = 0;
        v110 = 0;
        v111 = 0;
        kaldi::ReadToken(a3, 1, (uint64_t)&v109);
        if (quasar::gLogLevel >= 6)
        {
          v129 = 0u;
          v130 = 0u;
          v127 = 0u;
          v128 = 0u;
          v125 = 0u;
          v126 = 0u;
          v123 = 0u;
          v124 = 0u;
          v121 = 0u;
          v122 = 0u;
          v119 = 0u;
          v120 = 0u;
          v117 = 0u;
          v118 = 0u;
          v116 = 0u;
          memset(v115, 0, sizeof(v115));
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v115);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v115, (uint64_t)"LME STREAM DUMP ", 16);
          std::istream::tellg();
          v56 = (_QWORD *)std::ostream::operator<<();
          v57 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v56, (uint64_t)": templateName = ", 17);
          if (v111 >= 0)
            v58 = &v109;
          else
            v58 = v109;
          if (v111 >= 0)
            v59 = HIBYTE(v111);
          else
            v59 = (uint64_t)v110;
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v57, (uint64_t)v58, v59);
          quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)v115);
        }
        __p[0] = &v109;
        v60 = std::__tree<std::__value_type<std::string,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v53 - 1, (const void **)&v109, (uint64_t)&std::piecewise_construct, (__int128 **)__p);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        fst::FstReadOptions::FstReadOptions(v115, __p, 0, 0, 0);
        v61 = fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::Read(a3, (uint64_t)v115);
        std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::reset[abi:ne180100]<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,void>(v60 + 7, (uint64_t)v61);
        if ((v115[23] & 0x80000000) != 0)
          operator delete(*(void **)v115);
        if (SHIBYTE(v132) < 0)
          operator delete(__p[0]);
        if (quasar::gLogLevel >= 6)
        {
          v129 = 0u;
          v130 = 0u;
          v127 = 0u;
          v128 = 0u;
          v125 = 0u;
          v126 = 0u;
          v123 = 0u;
          v124 = 0u;
          v121 = 0u;
          v122 = 0u;
          v119 = 0u;
          v120 = 0u;
          v117 = 0u;
          v118 = 0u;
          v116 = 0u;
          memset(v115, 0, sizeof(v115));
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v115);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v115, (uint64_t)"LME STREAM DUMP ", 16);
          std::istream::tellg();
          v62 = (_QWORD *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v62, (uint64_t)": <FST>", 7);
          quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)v115);
        }
        if (SHIBYTE(v111) < 0)
          operator delete(v109);
      }
    }
    std::string::basic_string[abi:ne180100]<0>(v115, "lme");
    v63 = fst::SymbolTable::Read(a3, (const std::string *)v115);
    std::shared_ptr<fst::SymbolTable>::shared_ptr[abi:ne180100]<fst::SymbolTable,void>(&v109, (uint64_t)v63);
    LODWORD(v113) = 3;
    std::allocate_shared[abi:ne180100]<quasar::QsrTextSymbolTable,std::allocator<quasar::QsrTextSymbolTable>,std::shared_ptr<fst::SymbolTable>,quasar::TextEncoding,void>((uint64_t *)&v109, (int *)&v113, __p);
    v64 = (quasar::QsrTextSymbolTable **)(v108 + 224);
    std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100](v108 + 224, (__int128 *)__p);
    v65 = (std::__shared_weak_count *)__p[1];
    if (__p[1])
    {
      v66 = (unint64_t *)((char *)__p[1] + 8);
      do
        v67 = __ldaxr(v66);
      while (__stlxr(v67 - 1, v66));
      if (!v67)
      {
        ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
        std::__shared_weak_count::__release_weak(v65);
      }
    }
    v68 = v110;
    if (v110)
    {
      p_shared_owners = (unint64_t *)&v110->__shared_owners_;
      do
        v70 = __ldaxr(p_shared_owners);
      while (__stlxr(v70 - 1, p_shared_owners));
      if (!v70)
      {
        ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
        std::__shared_weak_count::__release_weak(v68);
      }
    }
    if ((v115[23] & 0x80000000) != 0)
      operator delete(*(void **)v115);
    v71 = *((_QWORD *)*v64 + 12);
    v72 = (std::__shared_weak_count *)*((_QWORD *)*v64 + 13);
    if (v72)
    {
      v73 = (unint64_t *)&v72->__shared_owners_;
      do
        v74 = __ldxr(v73);
      while (__stxr(v74 + 1, v73));
      do
        v75 = __ldaxr(v73);
      while (__stlxr(v75 - 1, v73));
      if (!v75)
      {
        ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
        std::__shared_weak_count::__release_weak(v72);
      }
    }
    if (!v71)
    {
      if (quasar::gLogLevel >= 4)
      {
        v129 = 0u;
        v130 = 0u;
        v127 = 0u;
        v128 = 0u;
        v125 = 0u;
        v126 = 0u;
        v123 = 0u;
        v124 = 0u;
        v121 = 0u;
        v122 = 0u;
        v119 = 0u;
        v120 = 0u;
        v117 = 0u;
        v118 = 0u;
        v116 = 0u;
        memset(v115, 0, sizeof(v115));
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v115);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v115, (uint64_t)"Failed to deserialize symbol table from LME data stream. Quitting deserialization early.", 88);
        quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)v115);
      }
      return 6;
    }
    v76 = quasar::gLogLevel;
    if (quasar::gLogLevel > 5)
    {
      v129 = 0u;
      v130 = 0u;
      v127 = 0u;
      v128 = 0u;
      v125 = 0u;
      v126 = 0u;
      v123 = 0u;
      v124 = 0u;
      v121 = 0u;
      v122 = 0u;
      v119 = 0u;
      v120 = 0u;
      v117 = 0u;
      v118 = 0u;
      v116 = 0u;
      memset(v115, 0, sizeof(v115));
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v115);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v115, (uint64_t)"LME STREAM DUMP ", 16);
      std::istream::tellg();
      v77 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v77, (uint64_t)": <symTable:", 12);
      quasar::QsrTextSymbolTable::NumSymbols(*v64);
      v78 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v78, (uint64_t)" symbols>", 9);
      quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)v115);
      v76 = quasar::gLogLevel;
    }
    if (v76 >= 5)
    {
      v129 = 0u;
      v130 = 0u;
      v127 = 0u;
      v128 = 0u;
      v125 = 0u;
      v126 = 0u;
      v123 = 0u;
      v124 = 0u;
      v121 = 0u;
      v122 = 0u;
      v119 = 0u;
      v120 = 0u;
      v117 = 0u;
      v118 = 0u;
      v116 = 0u;
      memset(v115, 0, sizeof(v115));
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v115);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v115, (uint64_t)"LME memory_overhead ", 20);
      std::istream::tellg();
      v79 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v79, (uint64_t)" fsts ", 6);
      std::ostream::operator<<();
      quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)v115);
    }
    if (a2 < 19)
    {
      if (a2 < 14)
      {
LABEL_162:
        v80 = quasar::gLogLevel;
        if (quasar::gLogLevel > 4)
        {
          v129 = 0u;
          v130 = 0u;
          v127 = 0u;
          v128 = 0u;
          v125 = 0u;
          v126 = 0u;
          v123 = 0u;
          v124 = 0u;
          v121 = 0u;
          v122 = 0u;
          v119 = 0u;
          v120 = 0u;
          v117 = 0u;
          v118 = 0u;
          v116 = 0u;
          memset(v115, 0, sizeof(v115));
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v115);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v115, (uint64_t)"LME STREAM DUMP DONE ", 21);
          std::istream::tellg();
          std::ostream::operator<<();
          quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)v115);
          v80 = quasar::gLogLevel;
        }
        if (v80 >= 4)
        {
          v129 = 0u;
          v130 = 0u;
          v127 = 0u;
          v128 = 0u;
          v125 = 0u;
          v126 = 0u;
          v123 = 0u;
          v124 = 0u;
          v121 = 0u;
          v122 = 0u;
          v119 = 0u;
          v120 = 0u;
          v117 = 0u;
          v118 = 0u;
          v116 = 0u;
          memset(v115, 0, sizeof(v115));
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v115);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v115, (uint64_t)"LME data stream successfully read with ", 39);
          quasar::QsrTextSymbolTable::NumSymbols(*v64);
          v81 = (_QWORD *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v81, (uint64_t)" symbols; ", 10);
          v82 = (_QWORD *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v82, (uint64_t)" ~ ", 3);
          std::ostream::operator<<();
          quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)v115);
          if (quasar::gLogLevel >= 5)
          {
            v129 = 0u;
            v130 = 0u;
            v127 = 0u;
            v128 = 0u;
            v125 = 0u;
            v126 = 0u;
            v123 = 0u;
            v124 = 0u;
            v121 = 0u;
            v122 = 0u;
            v119 = 0u;
            v120 = 0u;
            v117 = 0u;
            v118 = 0u;
            v116 = 0u;
            memset(v115, 0, sizeof(v115));
            kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v115);
            v83 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v115, (uint64_t)"\"", 1);
            quasar::QsrTextSymbolTable::Find(*v64, __p);
            if (v132 >= 0)
              v84 = __p;
            else
              v84 = (void **)__p[0];
            if (v132 >= 0)
              v85 = HIBYTE(v132);
            else
              v85 = (uint64_t)__p[1];
            v86 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v83, (uint64_t)v84, v85);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v86, (uint64_t)"\"(", 2);
            v87 = (_QWORD *)std::ostream::operator<<();
            v88 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v87, (uint64_t)") ~ \"", 5);
            quasar::QsrTextSymbolTable::Find(*v64, &v109);
            if (v111 >= 0)
              v89 = &v109;
            else
              v89 = v109;
            if (v111 >= 0)
              v90 = HIBYTE(v111);
            else
              v90 = (uint64_t)v110;
            v91 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v88, (uint64_t)v89, v90);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v91, (uint64_t)"\"(", 2);
            v92 = (_QWORD *)std::ostream::operator<<();
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v92, (uint64_t)")", 1);
            if (SHIBYTE(v111) < 0)
              operator delete(v109);
            if (SHIBYTE(v132) < 0)
              operator delete(__p[0]);
            quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)v115);
            if (quasar::gLogLevel >= 6)
            {
              v93 = *((_QWORD *)*v64 + 12);
              v94 = (std::__shared_weak_count *)*((_QWORD *)*v64 + 13);
              *(_QWORD *)v115 = v93;
              *(_QWORD *)&v115[8] = v94;
              if (v94)
              {
                v95 = (unint64_t *)&v94->__shared_owners_;
                do
                  v96 = __ldxr(v95);
                while (__stxr(v96 + 1, v95));
              }
              v97 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v93 + 120))(v93);
              v98 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v93 + 128))(v93, 0);
              if (v94)
              {
                v99 = (unint64_t *)&v94->__shared_owners_;
                do
                  v100 = __ldaxr(v99);
                while (__stlxr(v100 - 1, v99));
                if (!v100)
                {
                  ((void (*)(std::__shared_weak_count *))v94->__on_zero_shared)(v94);
                  std::__shared_weak_count::__release_weak(v94);
                }
              }
              if (v97)
              {
                v101 = 0;
                do
                {
                  if (quasar::gLogLevel >= 6)
                  {
                    v129 = 0u;
                    v130 = 0u;
                    v127 = 0u;
                    v128 = 0u;
                    v125 = 0u;
                    v126 = 0u;
                    v123 = 0u;
                    v124 = 0u;
                    v121 = 0u;
                    v122 = 0u;
                    v119 = 0u;
                    v120 = 0u;
                    v117 = 0u;
                    v118 = 0u;
                    v116 = 0u;
                    memset(v115, 0, sizeof(v115));
                    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v115);
                    v102 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v115, (uint64_t)"LME STREAM DUMP         ", 24);
                    (*(void (**)(void **__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v93 + 88))(__p, v93, v98);
                    if (v132 >= 0)
                      v103 = __p;
                    else
                      v103 = (void **)__p[0];
                    if (v132 >= 0)
                      v104 = HIBYTE(v132);
                    else
                      v104 = (uint64_t)__p[1];
                    v105 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v102, (uint64_t)v103, v104);
                    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v105, (uint64_t)" : ", 3);
                    std::ostream::operator<<();
                    if (SHIBYTE(v132) < 0)
                      operator delete(__p[0]);
                    quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)v115);
                  }
                  if (++v101 < v97)
                    v98 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v93 + 128))(v93, v101);
                }
                while (v97 != v101);
              }
            }
          }
        }
        if (a2 > 18)
          return 1;
        if (quasar::gLogLevel >= 4)
        {
          v129 = 0u;
          v130 = 0u;
          v127 = 0u;
          v128 = 0u;
          v125 = 0u;
          v126 = 0u;
          v123 = 0u;
          v124 = 0u;
          v121 = 0u;
          v122 = 0u;
          v119 = 0u;
          v120 = 0u;
          v117 = 0u;
          v118 = 0u;
          v116 = 0u;
          memset(v115, 0, sizeof(v115));
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v115);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v115, (uint64_t)"LME data stream version is old, but still supported. Current write version is ", 78);
          v106 = (_QWORD *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v106, (uint64_t)" and stream version is ", 23);
          std::ostream::operator<<();
          quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)v115);
        }
        return 3;
      }
    }
    else if ((*((_BYTE *)a3 + *(_QWORD *)(*a3 - 24) + 32) & 2) == 0)
    {
      if (quasar::gLogLevel >= 6)
      {
        v129 = 0u;
        v130 = 0u;
        v127 = 0u;
        v128 = 0u;
        v125 = 0u;
        v126 = 0u;
        v123 = 0u;
        v124 = 0u;
        v121 = 0u;
        v122 = 0u;
        v119 = 0u;
        v120 = 0u;
        v117 = 0u;
        v118 = 0u;
        v116 = 0u;
        memset(v115, 0, sizeof(v115));
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v115);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v115, (uint64_t)"LME STREAM DUMP [Embedding Cache]", 33);
        quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)v115);
      }
      quasar::WordPronCache::fromStream(v108 + 88, a3, a2);
    }
    if ((*((_BYTE *)a3 + *(_QWORD *)(*a3 - 24) + 32) & 2) == 0 && (a4 & 1) == 0)
    {
      if (quasar::gLogLevel >= 6)
      {
        v129 = 0u;
        v130 = 0u;
        v127 = 0u;
        v128 = 0u;
        v125 = 0u;
        v126 = 0u;
        v123 = 0u;
        v124 = 0u;
        v121 = 0u;
        v122 = 0u;
        v119 = 0u;
        v120 = 0u;
        v117 = 0u;
        v118 = 0u;
        v116 = 0u;
        memset(v115, 0, sizeof(v115));
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v115);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v115, (uint64_t)"LME STREAM DUMP [Pron Cache]", 28);
        quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)v115);
      }
      quasar::WordPronCache::fromStream(v108 + 16, a3, a2);
    }
    goto LABEL_162;
  }
  v20 = *(unsigned __int8 *)(a1 + 319);
  v21 = (char)v20;
  if ((v20 & 0x80u) != 0)
    v20 = *(_QWORD *)(a1 + 304);
  if (v19 == v20)
  {
    if (v21 >= 0)
      v22 = (unsigned __int8 *)(a1 + 296);
    else
      v22 = *(unsigned __int8 **)(a1 + 296);
    if ((v18 & 0x80) == 0)
    {
      if (a5[23])
      {
        v23 = a5;
        while (*v23 == *v22)
        {
          ++v23;
          ++v22;
          if (!--v18)
            goto LABEL_54;
        }
        goto LABEL_37;
      }
      goto LABEL_54;
    }
    if (!memcmp(*(const void **)a5, v22, *((_QWORD *)a5 + 1)))
      goto LABEL_54;
  }
LABEL_37:
  if (quasar::gLogLevel >= 5)
  {
    v129 = 0u;
    v130 = 0u;
    v127 = 0u;
    v128 = 0u;
    v125 = 0u;
    v126 = 0u;
    v123 = 0u;
    v124 = 0u;
    v121 = 0u;
    v122 = 0u;
    v119 = 0u;
    v120 = 0u;
    v117 = 0u;
    v118 = 0u;
    v116 = 0u;
    memset(v115, 0, sizeof(v115));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v115);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v115, (uint64_t)"Expected asset path does not match LME Data's asset path. LME Data should be regenerated. Quitting deserialization early.", 121);
    quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)v115);
    if (quasar::gLogLevel >= 5)
    {
      v129 = 0u;
      v130 = 0u;
      v127 = 0u;
      v128 = 0u;
      v125 = 0u;
      v126 = 0u;
      v123 = 0u;
      v124 = 0u;
      v121 = 0u;
      v122 = 0u;
      v119 = 0u;
      v120 = 0u;
      v117 = 0u;
      v118 = 0u;
      v116 = 0u;
      memset(v115, 0, sizeof(v115));
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v115);
      v24 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v115, (uint64_t)"expected assetPath=", 19);
      v25 = (char)a5[23];
      v26 = v25 >= 0 ? (uint64_t)a5 : *(_QWORD *)a5;
      v27 = v25 >= 0 ? a5[23] : *((_QWORD *)a5 + 1);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, v26, v27);
      quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)v115);
      if (quasar::gLogLevel >= 5)
      {
        v129 = 0u;
        v130 = 0u;
        v127 = 0u;
        v128 = 0u;
        v125 = 0u;
        v126 = 0u;
        v123 = 0u;
        v124 = 0u;
        v121 = 0u;
        v122 = 0u;
        v119 = 0u;
        v120 = 0u;
        v117 = 0u;
        v118 = 0u;
        v116 = 0u;
        memset(v115, 0, sizeof(v115));
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v115);
        v28 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v115, (uint64_t)"deserialized assetPath=", 23);
        v29 = *(char *)(a1 + 319);
        if (v29 >= 0)
          v30 = a1 + 296;
        else
          v30 = *(_QWORD *)(a1 + 296);
        if (v29 >= 0)
          v31 = *(unsigned __int8 *)(a1 + 319);
        else
          v31 = *(_QWORD *)(a1 + 304);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, v30, v31);
        quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)v115);
      }
    }
  }
  return 7;
}

void sub_1ADC4E96C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,__int128 a22,__int128 a23,__int128 a24,__int128 a25,__int128 a26,__int128 a27,__int128 a28,__int128 a29,__int128 a30,__int128 a31,__int128 a32,__int128 a33,__int128 a34,__int128 a35,__int128 a36,__int128 a37,__int128 a38,void *__p,uint64_t a40,int a41,__int16 a42,char a43,char a44)
{
  void *v44;
  void *v45;
  _QWORD *v46;
  const char *v47;
  size_t v48;

  if (a2 == 1)
  {
    v44 = __cxa_begin_catch(exception_object);
    if (quasar::gLogLevel >= 1)
    {
      v45 = v44;
      a37 = 0u;
      a38 = 0u;
      a35 = 0u;
      a36 = 0u;
      a33 = 0u;
      a34 = 0u;
      a31 = 0u;
      a32 = 0u;
      a29 = 0u;
      a30 = 0u;
      a27 = 0u;
      a28 = 0u;
      a25 = 0u;
      a26 = 0u;
      a23 = 0u;
      a24 = 0u;
      a22 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&a22);
      v46 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&a22, (uint64_t)"Error reading LmeData stream: ", 30);
      v47 = (const char *)(*(uint64_t (**)(void *))(*(_QWORD *)v45 + 16))(v45);
      v48 = strlen(v47);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v46, (uint64_t)v47, v48);
      quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)&a22);
    }
    __cxa_end_catch();
    JUMPOUT(0x1ADC4E3E8);
  }
  _Unwind_Resume(exception_object);
}

uint64_t kaldi::ReadBasicType<long long>(_QWORD *a1, int a2, uint64_t a3)
{
  int v4;
  uint64_t result;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD v10[52];

  v10[51] = *MEMORY[0x1E0C80C00];
  if (a2)
  {
    v4 = std::istream::get();
    if (v4 == -1)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v10);
      std::operator<<[abi:ne180100]<std::char_traits<char>>(v10, "ReadBasicType: encountered end of stream.");
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v10);
    }
    if (v4 << 24 != 0x8000000)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v10);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"ReadBasicType: did not get expected integer type, ", 50);
      v7 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)" vs. ", 5);
      v8 = (_QWORD *)std::ostream::operator<<();
      v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)".  You can change this code to successfully", 43);
      std::operator<<[abi:ne180100]<std::char_traits<char>>(v9, " read it later, if needed.");
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v10);
    }
    result = std::istream::read();
  }
  else
  {
    result = MEMORY[0x1AF44CB48](a1, a3);
  }
  if ((*((_BYTE *)a1 + *(_QWORD *)(*a1 - 24) + 32) & 5) != 0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v10);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"Read failure in ReadBasicType, file position is ", 48);
    std::istream::tellg();
    v6 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)", next char is ", 15);
    std::istream::peek();
    std::ostream::operator<<();
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v10);
  }
  return result;
}

void sub_1ADC4EF5C(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

uint64_t quasar::LmeData::addWordToPronCache(quasar::LmeData *this, std::string *a2, int a3)
{
  return quasar::WordPronCache::addWord((quasar::LmeData *)((char *)this + 16), a2, a3);
}

uint64_t quasar::LmeData::addWordToEmbeddingCache(quasar::LmeData *this, std::string *a2, int a3)
{
  return quasar::WordPronCache::addWord((quasar::LmeData *)((char *)this + 88), a2, a3);
}

uint64_t **std::__tree<quasar::LmePackedWord,quasar::LmePackedWordOrthoComparator,std::allocator<quasar::LmePackedWord>>::__assign_multi<std::__tree_const_iterator<quasar::LmePackedWord,std::__tree_node<quasar::LmePackedWord,void *> *,long>>(uint64_t **result, __int128 *a2, __int128 *a3)
{
  uint64_t **v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  __int128 *v9;
  uint64_t **leaf_high;
  __int128 *v11;
  BOOL v12;
  __int128 *v13;
  __int128 *v14;
  uint64_t **v15;
  uint64_t *v16;
  const void **v17;
  uint64_t v18;

  v5 = result;
  if (result[2])
  {
    v6 = *result;
    v7 = result[1];
    *result = (uint64_t *)(result + 1);
    v7[2] = 0;
    result[1] = 0;
    result[2] = 0;
    if (v6[1])
      v8 = (uint64_t *)v6[1];
    else
      v8 = v6;
    v15 = result;
    v16 = v8;
    v17 = (const void **)v8;
    if (v8)
    {
      v16 = std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::_DetachedTreeCache::__detach_next((uint64_t)v8);
      if (a2 != a3)
      {
        v9 = a2;
        do
        {
          std::string::operator=((std::string *)(v8 + 4), (const std::string *)(v9 + 2));
          std::string::operator=((std::string *)(v8 + 7), (const std::string *)((char *)v9 + 56));
          *((_DWORD *)v8 + 20) = *((_DWORD *)v9 + 20);
          if (v8 != (uint64_t *)v9)
            std::vector<short>::__assign_with_size[abi:ne180100]<short *,short *>((char *)v8 + 88, *((char **)v9 + 11), *((_QWORD *)v9 + 12), (uint64_t)(*((_QWORD *)v9 + 12) - *((_QWORD *)v9 + 11)) >> 1);
          leaf_high = (uint64_t **)std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__find_leaf_high((uint64_t)v5, &v18, v17 + 4);
          std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at(v5, v18, leaf_high, (uint64_t *)v17);
          v17 = (const void **)v16;
          if (v16)
            v16 = std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::_DetachedTreeCache::__detach_next((uint64_t)v16);
          v11 = (__int128 *)*((_QWORD *)v9 + 1);
          if (v11)
          {
            do
            {
              a2 = v11;
              v11 = *(__int128 **)v11;
            }
            while (v11);
          }
          else
          {
            do
            {
              a2 = (__int128 *)*((_QWORD *)v9 + 2);
              v12 = *(_QWORD *)a2 == (_QWORD)v9;
              v9 = a2;
            }
            while (!v12);
          }
          v8 = (uint64_t *)v17;
          if (v17)
            v12 = a2 == a3;
          else
            v12 = 1;
          v9 = a2;
        }
        while (!v12);
      }
    }
    result = (uint64_t **)std::__tree<quasar::LmePackedWord,quasar::LmePackedWordOrthoComparator,std::allocator<quasar::LmePackedWord>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)&v15);
  }
  if (a2 != a3)
  {
    do
    {
      result = (uint64_t **)std::__tree<quasar::LmePackedWord,quasar::LmePackedWordOrthoComparator,std::allocator<quasar::LmePackedWord>>::__emplace_multi<quasar::LmePackedWord const&>(v5, a2 + 2);
      v13 = (__int128 *)*((_QWORD *)a2 + 1);
      if (v13)
      {
        do
        {
          v14 = v13;
          v13 = *(__int128 **)v13;
        }
        while (v13);
      }
      else
      {
        do
        {
          v14 = (__int128 *)*((_QWORD *)a2 + 2);
          v12 = *(_QWORD *)v14 == (_QWORD)a2;
          a2 = v14;
        }
        while (!v12);
      }
      a2 = v14;
    }
    while (v14 != a3);
  }
  return result;
}

void sub_1ADC4F114(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__tree<quasar::LmePackedWord,quasar::LmePackedWordOrthoComparator,std::allocator<quasar::LmePackedWord>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__tree<quasar::LmePackedWord,quasar::LmePackedWordOrthoComparator,std::allocator<quasar::LmePackedWord>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100](uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;

  std::__tree<quasar::LmePackedWord,quasar::LmePackedWordOrthoComparator,std::allocator<quasar::LmePackedWord>>::destroy(*(_QWORD *)a1, *(_QWORD **)(a1 + 16));
  v2 = *(_QWORD **)(a1 + 8);
  if (v2)
  {
    v3 = (_QWORD *)v2[2];
    if (v3)
    {
      do
      {
        v2 = v3;
        v3 = (_QWORD *)v3[2];
      }
      while (v3);
      *(_QWORD *)(a1 + 8) = v2;
    }
    std::__tree<quasar::LmePackedWord,quasar::LmePackedWordOrthoComparator,std::allocator<quasar::LmePackedWord>>::destroy(*(_QWORD *)a1, v2);
  }
  return a1;
}

void std::__tree<quasar::LmePackedWord,quasar::LmePackedWordOrthoComparator,std::allocator<quasar::LmePackedWord>>::destroy(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    std::__tree<quasar::LmePackedWord,quasar::LmePackedWordOrthoComparator,std::allocator<quasar::LmePackedWord>>::destroy(a1, *a2);
    std::__tree<quasar::LmePackedWord,quasar::LmePackedWordOrthoComparator,std::allocator<quasar::LmePackedWord>>::destroy(a1, a2[1]);
    std::__destroy_at[abi:ne180100]<quasar::LmePackedWord,0>((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

void std::__destroy_at[abi:ne180100]<quasar::LmePackedWord,0>(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 56);
  if (v2)
  {
    *(_QWORD *)(a1 + 64) = v2;
    operator delete(v2);
  }
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

uint64_t *std::__tree<quasar::LmePackedWord,quasar::LmePackedWordOrthoComparator,std::allocator<quasar::LmePackedWord>>::__emplace_multi<quasar::LmePackedWord const&>(uint64_t **a1, __int128 *a2)
{
  uint64_t **leaf_high;
  uint64_t *v4;
  uint64_t v6;
  uint64_t *v7[3];

  std::__tree<quasar::LmePackedWord,quasar::LmePackedWordOrthoComparator,std::allocator<quasar::LmePackedWord>>::__construct_node<quasar::LmePackedWord const&>((uint64_t)a1, a2, (uint64_t)v7);
  leaf_high = (uint64_t **)std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__find_leaf_high((uint64_t)a1, &v6, (const void **)v7[0] + 4);
  std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at(a1, v6, leaf_high, v7[0]);
  v4 = v7[0];
  v7[0] = 0;
  std::unique_ptr<std::__tree_node<quasar::LmePackedWord,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<quasar::LmePackedWord,void *>>>>::reset[abi:ne180100]((uint64_t)v7, 0);
  return v4;
}

void sub_1ADC4F280(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__tree_node<quasar::LmePackedWord,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<quasar::LmePackedWord,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

_QWORD *std::__tree<quasar::LmePackedWord,quasar::LmePackedWordOrthoComparator,std::allocator<quasar::LmePackedWord>>::__construct_node<quasar::LmePackedWord const&>@<X0>(uint64_t a1@<X0>, __int128 *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  char *v6;
  _QWORD *result;

  v5 = a1 + 8;
  v6 = (char *)operator new(0x70uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  result = std::allocator<std::__tree_node<quasar::LmePackedWord,void *>>::construct[abi:ne180100]<quasar::LmePackedWord,quasar::LmePackedWord const&>(v5, (std::string *)(v6 + 32), a2);
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void sub_1ADC4F2EC(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__tree_node<quasar::LmePackedWord,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<quasar::LmePackedWord,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

_QWORD *std::allocator<std::__tree_node<quasar::LmePackedWord,void *>>::construct[abi:ne180100]<quasar::LmePackedWord,quasar::LmePackedWord const&>(int a1, std::string *this, __int128 *a3)
{
  __int128 v5;
  __int128 v6;
  int v7;

  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a3, *((_QWORD *)a3 + 1));
  }
  else
  {
    v5 = *a3;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a3 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v5;
  }
  if (*((char *)a3 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(this + 1, *((const std::string::value_type **)a3 + 3), *((_QWORD *)a3 + 4));
  }
  else
  {
    v6 = *(__int128 *)((char *)a3 + 24);
    this[1].__r_.__value_.__r.__words[2] = *((_QWORD *)a3 + 5);
    *(_OWORD *)&this[1].__r_.__value_.__l.__data_ = v6;
  }
  v7 = *((_DWORD *)a3 + 12);
  this[2].__r_.__value_.__l.__size_ = 0;
  LODWORD(this[2].__r_.__value_.__l.__data_) = v7;
  this[2].__r_.__value_.__r.__words[2] = 0;
  this[3].__r_.__value_.__r.__words[0] = 0;
  return std::vector<unsigned short>::__init_with_size[abi:ne180100]<unsigned short *,unsigned short *>(&this[2].__r_.__value_.__l.__size_, *((const void **)a3 + 7), *((_QWORD *)a3 + 8), (uint64_t)(*((_QWORD *)a3 + 8) - *((_QWORD *)a3 + 7)) >> 1);
}

void sub_1ADC4F3A8(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::vector<unsigned short>::__init_with_size[abi:ne180100]<unsigned short *,unsigned short *>(_QWORD *result, const void *a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<short>::__vallocate[abi:ne180100](result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1ADC4F438(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::unique_ptr<std::__tree_node<quasar::LmePackedWord,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<quasar::LmePackedWord,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<quasar::LmePackedWord,0>((uint64_t)v2 + 32);
    operator delete(v2);
  }
}

uint64_t **std::__tree<std::__value_type<std::string,std::set<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<std::string>>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,std::set<std::string>>,std::__tree_node<std::__value_type<std::string,std::set<std::string>>,void *> *,long>>(uint64_t **result, __int128 *a2, __int128 *a3)
{
  uint64_t **v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  __int128 *v9;
  uint64_t **leaf_high;
  __int128 *v11;
  BOOL v12;
  __int128 *v13;
  __int128 *v14;
  uint64_t **v15;
  uint64_t *v16;
  const void **v17;
  uint64_t v18[2];

  v5 = result;
  if (result[2])
  {
    v6 = *result;
    v7 = result[1];
    *result = (uint64_t *)(result + 1);
    v7[2] = 0;
    result[1] = 0;
    result[2] = 0;
    if (v6[1])
      v8 = (uint64_t *)v6[1];
    else
      v8 = v6;
    v15 = result;
    v16 = v8;
    v17 = (const void **)v8;
    if (v8)
    {
      v16 = std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::_DetachedTreeCache::__detach_next((uint64_t)v8);
      if (a2 != a3)
      {
        v9 = a2;
        do
        {
          v18[0] = (uint64_t)(v8 + 4);
          v18[1] = (uint64_t)(v8 + 7);
          std::pair<std::string &,std::set<std::string> &>::operator=[abi:ne180100]<std::string const,std::set<std::string>,(void *)0>((uint64_t)v18, (uint64_t)(v9 + 2));
          leaf_high = (uint64_t **)std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__find_leaf_high((uint64_t)v5, v18, v17 + 4);
          std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at(v5, v18[0], leaf_high, (uint64_t *)v17);
          v17 = (const void **)v16;
          if (v16)
            v16 = std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::_DetachedTreeCache::__detach_next((uint64_t)v16);
          v11 = (__int128 *)*((_QWORD *)v9 + 1);
          if (v11)
          {
            do
            {
              a2 = v11;
              v11 = *(__int128 **)v11;
            }
            while (v11);
          }
          else
          {
            do
            {
              a2 = (__int128 *)*((_QWORD *)v9 + 2);
              v12 = *(_QWORD *)a2 == (_QWORD)v9;
              v9 = a2;
            }
            while (!v12);
          }
          v8 = (uint64_t *)v17;
          if (v17)
            v12 = a2 == a3;
          else
            v12 = 1;
          v9 = a2;
        }
        while (!v12);
      }
    }
    result = (uint64_t **)std::__tree<std::__value_type<std::string,std::set<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<std::string>>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)&v15);
  }
  if (a2 != a3)
  {
    do
    {
      result = (uint64_t **)std::__tree<std::__value_type<std::string,std::set<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<std::string>>>>::__emplace_multi<std::pair<std::string const,std::set<std::string>> const&>(v5, a2 + 2);
      v13 = (__int128 *)*((_QWORD *)a2 + 1);
      if (v13)
      {
        do
        {
          v14 = v13;
          v13 = *(__int128 **)v13;
        }
        while (v13);
      }
      else
      {
        do
        {
          v14 = (__int128 *)*((_QWORD *)a2 + 2);
          v12 = *(_QWORD *)v14 == (_QWORD)a2;
          a2 = v14;
        }
        while (!v12);
      }
      a2 = v14;
    }
    while (v14 != a3);
  }
  return result;
}

void sub_1ADC4F610(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__tree<std::__value_type<std::string,std::set<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<std::string>>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::pair<std::string &,std::set<std::string> &>::operator=[abi:ne180100]<std::string const,std::set<std::string>,(void *)0>(uint64_t a1, uint64_t a2)
{
  uint64_t **v4;

  std::string::operator=(*(std::string **)a1, (const std::string *)a2);
  v4 = *(uint64_t ***)(a1 + 8);
  if (v4 != (uint64_t **)(a2 + 24))
    std::__tree<std::string>::__assign_multi<std::__tree_const_iterator<std::string,std::__tree_node<std::string,void *> *,long>>(v4, *(_QWORD **)(a2 + 24), (_QWORD *)(a2 + 32));
  return a1;
}

uint64_t std::__tree<std::__value_type<std::string,std::set<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<std::string>>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100](uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;

  std::__tree<std::__value_type<std::string,std::map<std::string,int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,int>>>>::destroy(*(_QWORD *)a1, *(_QWORD **)(a1 + 16));
  v2 = *(_QWORD **)(a1 + 8);
  if (v2)
  {
    v3 = (_QWORD *)v2[2];
    if (v3)
    {
      do
      {
        v2 = v3;
        v3 = (_QWORD *)v3[2];
      }
      while (v3);
      *(_QWORD *)(a1 + 8) = v2;
    }
    std::__tree<std::__value_type<std::string,std::map<std::string,int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,int>>>>::destroy(*(_QWORD *)a1, v2);
  }
  return a1;
}

uint64_t *std::__tree<std::__value_type<std::string,std::set<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<std::string>>>>::__emplace_multi<std::pair<std::string const,std::set<std::string>> const&>(uint64_t **a1, __int128 *a2)
{
  uint64_t **leaf_high;
  uint64_t *v4;
  uint64_t v6;
  uint64_t *v7[3];

  std::__tree<std::__value_type<std::string,std::set<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<std::string>>>>::__construct_node<std::pair<std::string const,std::set<std::string>> const&>((uint64_t)a1, a2, (uint64_t)v7);
  leaf_high = (uint64_t **)std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__find_leaf_high((uint64_t)a1, &v6, (const void **)v7[0] + 4);
  std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at(a1, v6, leaf_high, v7[0]);
  v4 = v7[0];
  v7[0] = 0;
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::set<std::string>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::set<std::string>>,void *>>>>::reset[abi:ne180100]((uint64_t)v7, 0);
  return v4;
}

void sub_1ADC4F728(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::set<std::string>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::set<std::string>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

_OWORD *std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::pair<std::string,std::string>>(uint64_t **a1, const void **a2, uint64_t a3)
{
  void **v5;
  _OWORD *v6;
  uint64_t **v7;
  _QWORD v9[2];
  char v10;
  uint64_t v11;

  v5 = (void **)std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__find_equal<std::string>((uint64_t)a1, &v11, a2);
  v6 = *v5;
  if (!*v5)
  {
    v7 = (uint64_t **)v5;
    v6 = operator new(0x50uLL);
    v9[1] = a1 + 1;
    v6[2] = *(_OWORD *)a3;
    *((_QWORD *)v6 + 6) = *(_QWORD *)(a3 + 16);
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    *(_OWORD *)((char *)v6 + 56) = *(_OWORD *)(a3 + 24);
    *((_QWORD *)v6 + 9) = *(_QWORD *)(a3 + 40);
    *(_QWORD *)(a3 + 16) = 0;
    *(_QWORD *)(a3 + 24) = 0;
    *(_QWORD *)(a3 + 32) = 0;
    *(_QWORD *)(a3 + 40) = 0;
    v10 = 1;
    std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at(a1, v11, v7, (uint64_t *)v6);
    v9[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::string>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100]((uint64_t)v9, 0);
  }
  return v6;
}

uint64_t *std::__tree<quasar::LmePackedWord,quasar::LmePackedWordOrthoComparator,std::allocator<quasar::LmePackedWord>>::__emplace_unique_impl<quasar::LmeDataFactoryBase::Word &,fst::SymbolTable &>(uint64_t **a1, const quasar::LmeDataFactoryBase::Word *a2, fst::SymbolTable *a3)
{
  uint64_t **v4;
  uint64_t *v5;
  uint64_t v7;
  uint64_t *v8[3];

  std::__tree<quasar::LmePackedWord,quasar::LmePackedWordOrthoComparator,std::allocator<quasar::LmePackedWord>>::__construct_node<quasar::LmeDataFactoryBase::Word &,fst::SymbolTable &>((uint64_t)a1, a2, a3, (uint64_t)v8);
  v4 = (uint64_t **)std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__find_equal<std::string>((uint64_t)a1, &v7, (const void **)v8[0] + 4);
  v5 = *v4;
  if (!*v4)
  {
    std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at(a1, v7, v4, v8[0]);
    v5 = v8[0];
    v8[0] = 0;
  }
  std::unique_ptr<std::__tree_node<quasar::LmePackedWord,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<quasar::LmePackedWord,void *>>>>::reset[abi:ne180100]((uint64_t)v8, 0);
  return v5;
}

uint64_t std::__tree<quasar::LmePackedWord,quasar::LmePackedWordOrthoComparator,std::allocator<quasar::LmePackedWord>>::__construct_node<quasar::LmeDataFactoryBase::Word &,fst::SymbolTable &>@<X0>(uint64_t a1@<X0>, const quasar::LmeDataFactoryBase::Word *a2@<X1>, fst::SymbolTable *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  char *v8;
  uint64_t result;

  v7 = a1 + 8;
  v8 = (char *)operator new(0x70uLL);
  *(_QWORD *)a4 = v8;
  *(_QWORD *)(a4 + 8) = v7;
  *(_BYTE *)(a4 + 16) = 0;
  result = quasar::LmePackedWord::LmePackedWord((quasar::LmePackedWord *)(v8 + 32), a2, a3);
  *(_BYTE *)(a4 + 16) = 1;
  return result;
}

void sub_1ADC4F8E4(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__tree_node<quasar::LmePackedWord,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<quasar::LmePackedWord,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<quasar::LmePackedWord,quasar::LmePackedWordOrthoComparator,std::allocator<quasar::LmePackedWord>>::__emplace_unique_key_args<quasar::LmePackedWord,quasar::LmePackedWord&>(uint64_t **a1, const void **a2, __int128 *a3)
{
  uint64_t **v5;
  uint64_t *v6;
  uint64_t **v7;
  uint64_t *v9[3];
  uint64_t v10;

  v5 = (uint64_t **)std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__find_equal<std::string>((uint64_t)a1, &v10, a2);
  v6 = *v5;
  if (!*v5)
  {
    v7 = v5;
    std::__tree<quasar::LmePackedWord,quasar::LmePackedWordOrthoComparator,std::allocator<quasar::LmePackedWord>>::__construct_node<quasar::LmePackedWord&>((uint64_t)a1, a3, (uint64_t)v9);
    std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at(a1, v10, v7, v9[0]);
    v6 = v9[0];
    v9[0] = 0;
    std::unique_ptr<std::__tree_node<quasar::LmePackedWord,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<quasar::LmePackedWord,void *>>>>::reset[abi:ne180100]((uint64_t)v9, 0);
  }
  return v6;
}

_QWORD *std::__tree<quasar::LmePackedWord,quasar::LmePackedWordOrthoComparator,std::allocator<quasar::LmePackedWord>>::__construct_node<quasar::LmePackedWord&>@<X0>(uint64_t a1@<X0>, __int128 *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  char *v6;
  _QWORD *result;

  v5 = a1 + 8;
  v6 = (char *)operator new(0x70uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  result = std::allocator<std::__tree_node<quasar::LmePackedWord,void *>>::construct[abi:ne180100]<quasar::LmePackedWord,quasar::LmePackedWord&>(v5, (std::string *)(v6 + 32), a2);
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void sub_1ADC4F9E0(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__tree_node<quasar::LmePackedWord,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<quasar::LmePackedWord,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

_QWORD *std::allocator<std::__tree_node<quasar::LmePackedWord,void *>>::construct[abi:ne180100]<quasar::LmePackedWord,quasar::LmePackedWord&>(int a1, std::string *this, __int128 *a3)
{
  __int128 v5;
  __int128 v6;
  int v7;

  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a3, *((_QWORD *)a3 + 1));
  }
  else
  {
    v5 = *a3;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a3 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v5;
  }
  if (*((char *)a3 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(this + 1, *((const std::string::value_type **)a3 + 3), *((_QWORD *)a3 + 4));
  }
  else
  {
    v6 = *(__int128 *)((char *)a3 + 24);
    this[1].__r_.__value_.__r.__words[2] = *((_QWORD *)a3 + 5);
    *(_OWORD *)&this[1].__r_.__value_.__l.__data_ = v6;
  }
  v7 = *((_DWORD *)a3 + 12);
  this[2].__r_.__value_.__l.__size_ = 0;
  LODWORD(this[2].__r_.__value_.__l.__data_) = v7;
  this[2].__r_.__value_.__r.__words[2] = 0;
  this[3].__r_.__value_.__r.__words[0] = 0;
  return std::vector<unsigned short>::__init_with_size[abi:ne180100]<unsigned short *,unsigned short *>(&this[2].__r_.__value_.__l.__size_, *((const void **)a3 + 7), *((_QWORD *)a3 + 8), (uint64_t)(*((_QWORD *)a3 + 8) - *((_QWORD *)a3 + 7)) >> 1);
}

void sub_1ADC4FA9C(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t std::__tree<std::__value_type<std::string,std::set<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<std::string>>>>::__erase_unique<std::string>(uint64_t **a1, const void **a2)
{
  uint64_t *v3;
  uint64_t *v4;

  v3 = (uint64_t *)std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::find<std::string>((uint64_t)a1, a2);
  if (a1 + 1 == (uint64_t **)v3)
    return 0;
  v4 = v3;
  std::__tree<std::string>::__remove_node_pointer(a1, v3);
  std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::set<std::string>>,0>((uint64_t)(v4 + 4));
  operator delete(v4);
  return 1;
}

uint64_t std::__tree<std::__value_type<std::string,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>::__erase_unique<std::string>(uint64_t **a1, const void **a2)
{
  uint64_t *v3;
  uint64_t *v4;

  v3 = (uint64_t *)std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::find<std::string>((uint64_t)a1, a2);
  if (a1 + 1 == (uint64_t **)v3)
    return 0;
  v4 = v3;
  std::__tree<std::string>::__remove_node_pointer(a1, v3);
  std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::shared_ptr<void>>,0>((uint64_t)(v4 + 4));
  operator delete(v4);
  return 1;
}

uint64_t std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__erase_unique<std::string>(uint64_t **a1, const void **a2)
{
  uint64_t *v3;
  uint64_t *v4;

  v3 = (uint64_t *)std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::find<std::string>((uint64_t)a1, a2);
  if (a1 + 1 == (uint64_t **)v3)
    return 0;
  v4 = v3;
  std::__tree<std::string>::__remove_node_pointer(a1, v3);
  std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::string>,0>((uint64_t)(v4 + 4));
  operator delete(v4);
  return 1;
}

uint64_t quasar::SharedPhraseBook::SharedPhraseBook(uint64_t a1, uint64_t *a2, size_t a3, char a4, uint64_t a5, int a6)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  _BYTE *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  char *v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char *v27;
  uint64_t *v28;
  char *v29;
  char *v30;
  char *v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  char *v42;
  uint64_t *v43;
  char *v44;
  char *v45;
  char *v46;
  char *v47;
  size_t v48;
  const void *v49;
  __int128 *p_dst;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unsigned __int8 *v54;
  _OWORD *v55;
  unint64_t v56;
  void **v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  unint64_t v62;
  char *v63;
  __int128 v64;
  unint64_t v65;
  _OWORD *v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  char *v71;
  char *v72;
  char *v73;
  char *v74;
  __int128 v75;
  char *v76;
  __int128 v77;
  uint64_t v79;
  uint64_t v81;
  __int128 __dst;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  uint64_t v100;
  char *v101;
  uint64_t *v102;
  char *v103;
  char *v104;
  unint64_t v105;
  __int128 *v106[2];

  v8 = quasar::GenericPhraseBook::GenericPhraseBook(a1, a4, a5);
  *(_QWORD *)v8 = &off_1E5D362B0;
  v9 = *a2;
  *a2 = 0;
  *(_QWORD *)(v8 + 40) = v9;
  *(_OWORD *)(v8 + 48) = 0u;
  v81 = v8 + 48;
  *(_OWORD *)(v8 + 64) = 0u;
  v79 = v8;
  *(_DWORD *)(v8 + 80) = 1065353216;
  v10 = *(char **)(v9 + 8);
  while (a3)
  {
    v11 = memchr(v10, 10, a3);
    if (v11)
      v12 = v11 - v10;
    else
      v12 = -1;
    if (a3 >= v12)
      v13 = v12;
    else
      v13 = a3;
    v104 = v10;
    v105 = v13;
    v101 = 0;
    v102 = 0;
    v103 = 0;
    if (v13)
    {
      while (1)
      {
        v14 = std::string_view::find[abi:ne180100]((uint64_t *)&v104, "|||", 0);
        if (v14 == -1)
          break;
        v15 = v14;
        v16 = (uint64_t)v104;
        if (v105 >= v15)
          v17 = v15;
        else
          v17 = v105;
        quasar::SharedPhraseBook::trimView((uint64_t)v104, v17);
        v19 = v16;
        v20 = v18;
        v21 = v102;
        if (v102 >= (uint64_t *)v103)
        {
          v23 = ((char *)v102 - v101) >> 4;
          v24 = v23 + 1;
          if ((unint64_t)(v23 + 1) >> 60)
            std::vector<int>::__throw_length_error[abi:ne180100]();
          v25 = v103 - v101;
          if ((v103 - v101) >> 3 > v24)
            v24 = v25 >> 3;
          if ((unint64_t)v25 >= 0x7FFFFFFFFFFFFFF0)
            v26 = 0xFFFFFFFFFFFFFFFLL;
          else
            v26 = v24;
          if (v26)
            v27 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<int,unsigned long>>>((uint64_t)&v103, v26);
          else
            v27 = 0;
          v28 = (uint64_t *)&v27[16 * v23];
          *v28 = v19;
          v28[1] = v20;
          v30 = v101;
          v29 = (char *)v102;
          v31 = (char *)v28;
          if (v102 != (uint64_t *)v101)
          {
            do
            {
              *((_OWORD *)v31 - 1) = *((_OWORD *)v29 - 1);
              v31 -= 16;
              v29 -= 16;
            }
            while (v29 != v30);
            v29 = v101;
          }
          v22 = (char *)(v28 + 2);
          v101 = v31;
          v102 = v28 + 2;
          v103 = &v27[16 * v26];
          if (v29)
            operator delete(v29);
        }
        else
        {
          *v102 = v16;
          v21[1] = v18;
          v22 = (char *)(v21 + 2);
        }
        v102 = (uint64_t *)v22;
        v32 = v105;
        v104 += v15 + 3;
        v105 -= v15 + 3;
        if (v32 == v15 + 3)
          goto LABEL_50;
      }
      v33 = (uint64_t)v104;
      quasar::SharedPhraseBook::trimView((uint64_t)v104, v105);
      v35 = v33;
      v36 = v34;
      v37 = v102;
      if (v102 >= (uint64_t *)v103)
      {
        v38 = ((char *)v102 - v101) >> 4;
        v39 = v38 + 1;
        if ((unint64_t)(v38 + 1) >> 60)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v40 = v103 - v101;
        if ((v103 - v101) >> 3 > v39)
          v39 = v40 >> 3;
        if ((unint64_t)v40 >= 0x7FFFFFFFFFFFFFF0)
          v41 = 0xFFFFFFFFFFFFFFFLL;
        else
          v41 = v39;
        if (v41)
          v42 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<int,unsigned long>>>((uint64_t)&v103, v41);
        else
          v42 = 0;
        v43 = (uint64_t *)&v42[16 * v38];
        *v43 = v35;
        v43[1] = v36;
        v45 = v101;
        v44 = (char *)v102;
        v46 = (char *)v43;
        if (v102 != (uint64_t *)v101)
        {
          do
          {
            *((_OWORD *)v46 - 1) = *((_OWORD *)v44 - 1);
            v46 -= 16;
            v44 -= 16;
          }
          while (v44 != v45);
          v44 = v101;
        }
        v22 = (char *)(v43 + 2);
        v101 = v46;
        v102 = v43 + 2;
        v103 = &v42[16 * v41];
        if (v44)
          operator delete(v44);
      }
      else
      {
        *v102 = v33;
        v37[1] = v34;
        v22 = (char *)(v37 + 2);
      }
      v102 = (uint64_t *)v22;
    }
    else
    {
      v22 = 0;
    }
LABEL_50:
    v99 = 0uLL;
    v100 = 0;
    v47 = v22;
    if (v22 != v101)
    {
      v48 = *((_QWORD *)v101 + 1);
      if (a6)
      {
        quasar::GenericPhraseBook::normalizeKey(*(void **)v101, *((_QWORD *)v101 + 1), v79, (uint64_t)&__dst);
LABEL_62:
        if (SHIBYTE(v100) < 0)
          operator delete((void *)v99);
        v99 = __dst;
        v100 = v83;
        v22 = v101;
        v47 = (char *)v102;
        goto LABEL_65;
      }
      if (v48 >= 0x7FFFFFFFFFFFFFF8)
        std::string::__throw_length_error[abi:ne180100]();
      v49 = *(const void **)v101;
      if (v48 >= 0x17)
      {
        v51 = (v48 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v48 | 7) != 0x17)
          v51 = v48 | 7;
        v52 = v51 + 1;
        p_dst = (__int128 *)operator new(v51 + 1);
        *((_QWORD *)&__dst + 1) = v48;
        *(_QWORD *)&v83 = v52 | 0x8000000000000000;
        *(_QWORD *)&__dst = p_dst;
      }
      else
      {
        BYTE7(v83) = *((_QWORD *)v101 + 1);
        p_dst = &__dst;
        if (!v48)
          goto LABEL_61;
      }
      memmove(p_dst, v49, v48);
LABEL_61:
      *((_BYTE *)p_dst + v48) = 0;
      goto LABEL_62;
    }
LABEL_65:
    v53 = (v47 - v22) >> 4;
    if (v53 == 3)
    {
      v106[0] = &v99;
      v54 = std::__hash_table<std::__hash_value_type<std::string,std::vector<std::pair<std::string_view,std::string_view>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::pair<std::string_view,std::string_view>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::pair<std::string_view,std::string_view>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::pair<std::string_view,std::string_view>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v81, (unsigned __int8 *)&v99, (uint64_t)&std::piecewise_construct, v106);
      v64 = *((_OWORD *)v101 + 2);
      __dst = *((_OWORD *)v101 + 1);
      v83 = v64;
      v55 = (_OWORD *)*((_QWORD *)v54 + 6);
      v65 = *((_QWORD *)v54 + 7);
      if ((unint64_t)v55 >= v65)
      {
        v57 = (void **)(v54 + 40);
        v67 = *((_QWORD *)v54 + 5);
        v68 = ((uint64_t)v55 - v67) >> 5;
        v69 = v68 + 1;
        if ((unint64_t)(v68 + 1) >> 59)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v70 = v65 - v67;
        if (v70 >> 4 > v69)
          v69 = v70 >> 4;
        if ((unint64_t)v70 >= 0x7FFFFFFFFFFFFFE0)
          v62 = 0x7FFFFFFFFFFFFFFLL;
        else
          v62 = v69;
        if (v62)
          v63 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::TextTokenizer::Token>>((uint64_t)(v54 + 56), v62);
        else
          v63 = 0;
        v71 = &v63[32 * v68];
        *(_OWORD *)v71 = __dst;
        *((_OWORD *)v71 + 1) = v83;
        v76 = (char *)*((_QWORD *)v54 + 5);
        v72 = (char *)*((_QWORD *)v54 + 6);
        v74 = v71;
        if (v72 != v76)
        {
          do
          {
            v77 = *((_OWORD *)v72 - 1);
            *((_OWORD *)v74 - 2) = *((_OWORD *)v72 - 2);
            *((_OWORD *)v74 - 1) = v77;
            v74 -= 32;
            v72 -= 32;
          }
          while (v72 != v76);
LABEL_95:
          v72 = (char *)*v57;
        }
LABEL_96:
        v66 = v71 + 32;
        *((_QWORD *)v54 + 5) = v74;
        *((_QWORD *)v54 + 6) = v71 + 32;
        *((_QWORD *)v54 + 7) = &v63[32 * v62];
        if (v72)
          operator delete(v72);
        goto LABEL_98;
      }
    }
    else
    {
      if (v53 != 2)
      {
        if (quasar::gLogLevel >= 1)
        {
          v97 = 0u;
          v98 = 0u;
          v95 = 0u;
          v96 = 0u;
          v93 = 0u;
          v94 = 0u;
          v91 = 0u;
          v92 = 0u;
          v89 = 0u;
          v90 = 0u;
          v87 = 0u;
          v88 = 0u;
          v85 = 0u;
          v86 = 0u;
          v83 = 0u;
          v84 = 0u;
          __dst = 0u;
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__dst);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__dst, (uint64_t)"Malformed phrasebook line:", 26);
          quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)&__dst);
        }
        goto LABEL_99;
      }
      v106[0] = &v99;
      v54 = std::__hash_table<std::__hash_value_type<std::string,std::vector<std::pair<std::string_view,std::string_view>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::pair<std::string_view,std::string_view>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::pair<std::string_view,std::string_view>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::pair<std::string_view,std::string_view>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v81, (unsigned __int8 *)&v99, (uint64_t)&std::piecewise_construct, v106);
      v83 = 0uLL;
      __dst = *((_OWORD *)v101 + 1);
      v55 = (_OWORD *)*((_QWORD *)v54 + 6);
      v56 = *((_QWORD *)v54 + 7);
      if ((unint64_t)v55 >= v56)
      {
        v57 = (void **)(v54 + 40);
        v58 = *((_QWORD *)v54 + 5);
        v59 = ((uint64_t)v55 - v58) >> 5;
        v60 = v59 + 1;
        if ((unint64_t)(v59 + 1) >> 59)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v61 = v56 - v58;
        if (v61 >> 4 > v60)
          v60 = v61 >> 4;
        if ((unint64_t)v61 >= 0x7FFFFFFFFFFFFFE0)
          v62 = 0x7FFFFFFFFFFFFFFLL;
        else
          v62 = v60;
        if (v62)
          v63 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::TextTokenizer::Token>>((uint64_t)(v54 + 56), v62);
        else
          v63 = 0;
        v71 = &v63[32 * v59];
        *(_OWORD *)v71 = __dst;
        *((_OWORD *)v71 + 1) = v83;
        v73 = (char *)*((_QWORD *)v54 + 5);
        v72 = (char *)*((_QWORD *)v54 + 6);
        v74 = v71;
        if (v72 != v73)
        {
          do
          {
            v75 = *((_OWORD *)v72 - 1);
            *((_OWORD *)v74 - 2) = *((_OWORD *)v72 - 2);
            *((_OWORD *)v74 - 1) = v75;
            v74 -= 32;
            v72 -= 32;
          }
          while (v72 != v73);
          goto LABEL_95;
        }
        goto LABEL_96;
      }
    }
    *v55 = __dst;
    v55[1] = v83;
    v66 = v55 + 2;
LABEL_98:
    *((_QWORD *)v54 + 6) = v66;
LABEL_99:
    if (SHIBYTE(v100) < 0)
      operator delete((void *)v99);
    if (v101)
    {
      v102 = (uint64_t *)v101;
      operator delete(v101);
    }
    a3 -= v12 + 1;
    v10 += v12 + 1;
    if (v12 == -1)
      return v79;
  }
  return v79;
}

void sub_1ADC50240(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void **a13)
{
  uint64_t v13;
  void *v15;
  uint64_t v16;

  v15 = *(void **)(v13 - 144);
  if (v15)
  {
    *(_QWORD *)(v13 - 136) = v15;
    operator delete(v15);
  }
  std::__hash_table<std::__hash_value_type<std::string,std::vector<float>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<float>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<float>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<float>>>>::~__hash_table(a12);
  v16 = *(_QWORD *)(a9 + 40);
  *(_QWORD *)(a9 + 40) = 0;
  if (v16)
    (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
  *(_QWORD *)a9 = &unk_1E5D364F0;
  a13 = (void **)(a9 + 16);
  std::vector<quasar::RegexReplacementRule>::__destroy_vector::operator()[abi:ne180100](&a13);
  _Unwind_Resume(a1);
}

unint64_t std::string_view::find[abi:ne180100](uint64_t *a1, char *__s, unint64_t a3)
{
  unint64_t v5;
  uint64_t v6;
  size_t v7;
  int64_t v8;
  void *v9;
  char *v10;
  int64_t v11;
  char *v12;
  int v14;
  uint64_t v15;
  char *v16;

  v6 = *a1;
  v5 = a1[1];
  v7 = strlen(__s);
  if (v5 < a3)
    return -1;
  v8 = v7;
  if (v7)
  {
    v9 = (void *)(v6 + a3);
    v10 = (char *)(v6 + v5);
    v11 = v5 - a3;
    if ((uint64_t)(v5 - a3) >= v8)
    {
      v14 = *__s;
      do
      {
        v15 = v11 - v8;
        if (v15 == -1)
          break;
        v16 = (char *)memchr(v9, v14, v15 + 1);
        if (!v16)
          break;
        v12 = v16;
        if (!memcmp(v16, __s, v8))
          goto LABEL_6;
        v9 = v12 + 1;
        v11 = v10 - (v12 + 1);
      }
      while (v11 >= v8);
    }
    v12 = v10;
LABEL_6:
    if (v12 == v10)
      return -1;
    else
      return (unint64_t)&v12[-v6];
  }
  return a3;
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> quasar::SharedPhraseBook::trimView(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;

  v5 = a2;
  v2 = std::string_view::find_first_not_of[abi:ne180100](&v4, " \t\n\r\f\v", 0);
  if (v5 >= v2)
    v3 = v2;
  else
    v3 = v5;
  v4 += v3;
  v5 -= v3;
  std::string_view::find_last_not_of[abi:ne180100](&v4, " \t\n\r\f\v", 0xFFFFFFFFFFFFFFFFLL);
}

uint64_t std::string_view::find_first_not_of[abi:ne180100](uint64_t *a1, char *__s, unint64_t a3)
{
  uint64_t v5;
  unint64_t v6;
  size_t v7;
  BOOL v8;
  unint64_t v9;
  size_t v10;
  char *v11;

  v5 = *a1;
  v6 = a1[1];
  v7 = strlen(__s);
  v8 = v6 > a3;
  v9 = v6 - a3;
  if (!v8)
    return -1;
  v10 = v7;
  v11 = (char *)(v5 + a3);
  if (v7)
  {
    while (memchr(__s, *v11, v10))
    {
      ++v11;
      if (!--v9)
        return -1;
    }
  }
  return (uint64_t)&v11[-v5];
}

unint64_t std::string_view::find_last_not_of[abi:ne180100](uint64_t *a1, char *__s, unint64_t a3)
{
  uint64_t v5;
  unint64_t v6;
  size_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  void *v11;

  v5 = *a1;
  v6 = a1[1];
  v7 = strlen(__s);
  if (v6 > a3)
    v8 = a3 + 1;
  else
    v8 = v6;
  v9 = v8 - 1;
  do
  {
    v10 = v9;
    if (v9 == -1)
      break;
    if (!v7)
      break;
    v11 = memchr(__s, *(char *)(v5 + v9), v7);
    v9 = v10 - 1;
  }
  while (v11);
  return v10;
}

void quasar::SharedPhraseBook::getPhraseBook(uint64_t a1@<X0>, std::string::value_type a2@<W1>, __int128 *a3@<X2>, unsigned __int8 a4@<W3>, uint64_t *a5@<X8>)
{
  unsigned __int8 v8;
  uint64_t **v9;
  _QWORD *v10;
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  uint64_t v14;
  std::string::size_type *v15;
  std::string::size_type v16;
  std::string::size_type v17;
  std::ios_base *v18;
  _QWORD *v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t **v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  _QWORD *v31;
  _QWORD *v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  fst::MappedFile *v36;
  void *v37[2];
  char v38;
  int v39;
  _BYTE v40[32];
  void *v41[2];
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  unsigned __int8 v56;
  std::string::value_type v57;
  __int128 *v58;
  unint64_t v59;
  std::string v60;
  void *__p[2];
  char v62;
  _QWORD v63[22];

  v63[19] = *MEMORY[0x1E0C80C00];
  v57 = a2;
  v56 = a4;
  if ((v8 & 1) == 0
  {
    v31 = (_QWORD *)operator new();
    v31[2] = 0;
    v31[1] = 0;
    *v31 = v31 + 1;
    quasar::SharedPhraseBook::getPhraseBook(std::string const&,BOOL,std::string const&,BOOL)::dataFileMap = (uint64_t)v31;
  }
  v9 = (uint64_t **)quasar::SharedPhraseBook::getPhraseBook(std::string const&,BOOL,std::string const&,BOOL)::dataFileMap;
  _ZNSt3__112__tuple_implINS_15__tuple_indicesIJLm0ELm1ELm2ELm3EEEEJNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEbS8_bEEC2B8ne180100IJLm0ELm1ELm2ELm3EEJS8_bS8_bEJEJEJRKS8_RbSC_SD_EEENS1_IJXspT_EEEENS_13__tuple_typesIJDpT0_EEENS1_IJXspT1_EEEENSF_IJDpT2_EEEDpOT3_(&v60, (__int128 *)a1, &v57, a3, (std::string::value_type *)&v56);
  *(_QWORD *)v40 = &v60;
  v10 = std::__tree<std::__value_type<std::tuple<std::string,BOOL,std::string,BOOL>,std::weak_ptr<quasar::SharedPhraseBook>>,std::__map_value_compare<std::tuple<std::string,BOOL,std::string,BOOL>,std::__value_type<std::tuple<std::string,BOOL,std::string,BOOL>,std::weak_ptr<quasar::SharedPhraseBook>>,std::less<std::tuple<std::string,BOOL,std::string,BOOL>>,true>,std::allocator<std::__value_type<std::tuple<std::string,BOOL,std::string,BOOL>,std::weak_ptr<quasar::SharedPhraseBook>>>>::__emplace_unique_key_args<std::tuple<std::string,BOOL,std::string,BOOL>,std::piecewise_construct_t const&,std::tuple<std::tuple<std::string,BOOL,std::string,BOOL>&&>,std::tuple<>>(v9, (uint64_t)&v60, (uint64_t)&std::piecewise_construct, (__int128 **)v40);
  *a5 = 0;
  a5[1] = 0;
  v11 = (std::__shared_weak_count *)v10[13];
  if (v11)
  {
    v12 = std::__shared_weak_count::lock(v11);
    a5[1] = (uint64_t)v12;
    if (v12)
      *a5 = v10[12];
  }
  if (v62 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v60.__r_.__value_.__l.__data_);
  if (!*a5)
  {
    std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)a5);
    v13 = MEMORY[0x1E0DE4FA8];
    v14 = MEMORY[0x1E0DE4FA8] + 64;
    v15 = (std::string::size_type *)MEMORY[0x1E0DE4F40];
    v16 = *(_QWORD *)(MEMORY[0x1E0DE4F40] + 8);
    v17 = *(_QWORD *)(MEMORY[0x1E0DE4F40] + 16);
    v63[0] = MEMORY[0x1E0DE4FA8] + 64;
    v60.__r_.__value_.__r.__words[0] = v16;
    *(std::string::size_type *)((char *)v60.__r_.__value_.__r.__words + *(_QWORD *)(v16 - 24)) = v17;
    v60.__r_.__value_.__l.__size_ = 0;
    v18 = (std::ios_base *)((char *)&v60 + *(_QWORD *)(v60.__r_.__value_.__r.__words[0] - 24));
    std::ios_base::init(v18, &v60.__r_.__value_.__r.__words[2]);
    v18[1].__vftable = 0;
    v18[1].__fmtflags_ = -1;
    v60.__r_.__value_.__r.__words[0] = v13 + 24;
    v63[0] = v14;
    MEMORY[0x1AF44CA64](&v60.__r_.__value_.__r.__words[2]);
    std::ifstream::open();
    if ((*((_BYTE *)__p + *(_QWORD *)(v60.__r_.__value_.__r.__words[0] - 24)) & 5) != 0)
    {
      v54 = 0u;
      v55 = 0u;
      v52 = 0u;
      v53 = 0u;
      v50 = 0u;
      v51 = 0u;
      v48 = 0u;
      v49 = 0u;
      v46 = 0u;
      v47 = 0u;
      v44 = 0u;
      v45 = 0u;
      v43 = 0u;
      *(_OWORD *)v41 = 0u;
      v42 = 0u;
      memset(v40, 0, sizeof(v40));
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v40);
      v32 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)"failed to open phrasebook file ", 31);
      v33 = *(char *)(a1 + 23);
      if (v33 >= 0)
        v34 = a1;
      else
        v34 = *(_QWORD *)a1;
      if (v33 >= 0)
        v35 = *(unsigned __int8 *)(a1 + 23);
      else
        v35 = *(_QWORD *)(a1 + 8);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, v34, v35);
      quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v40);
    }
    fst::FstReadOptions::FstReadOptions(v37, a1, 0, 0, 0);
    v39 = 2;
    std::istream::tellg();
    std::istream::seekg();
    if (quasar::gLogLevel >= 4)
    {
      v54 = 0u;
      v55 = 0u;
      v52 = 0u;
      v53 = 0u;
      v50 = 0u;
      v51 = 0u;
      v48 = 0u;
      v49 = 0u;
      v46 = 0u;
      v47 = 0u;
      v44 = 0u;
      v45 = 0u;
      v43 = 0u;
      *(_OWORD *)v41 = 0u;
      v42 = 0u;
      memset(v40, 0, sizeof(v40));
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v40);
      v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)"Loading phrasebook: ", 20);
      v20 = *(char *)(a1 + 23);
      if (v20 >= 0)
        v21 = a1;
      else
        v21 = *(_QWORD *)a1;
      if (v20 >= 0)
        v22 = *(unsigned __int8 *)(a1 + 23);
      else
        v22 = *(_QWORD *)(a1 + 8);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, v21, v22);
      quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)v40);
    }
    v23 = operator new();
    v36 = fst::MappedFile::Map((uint64_t)&v60, (uint64_t)v37, v59);
    quasar::SharedPhraseBook::SharedPhraseBook(v23, (uint64_t *)&v36, v59, v57, (uint64_t)a3, v56);
    std::shared_ptr<quasar::SharedPhraseBook>::shared_ptr[abi:ne180100]<quasar::SharedPhraseBook,void>(a5, v23);
    if (v36)
      (*(void (**)(fst::MappedFile *))(*(_QWORD *)v36 + 8))(v36);
    if (quasar::gLogLevel >= 4)
    {
      v54 = 0u;
      v55 = 0u;
      v52 = 0u;
      v53 = 0u;
      v50 = 0u;
      v51 = 0u;
      v48 = 0u;
      v49 = 0u;
      v46 = 0u;
      v47 = 0u;
      v44 = 0u;
      v45 = 0u;
      v43 = 0u;
      *(_OWORD *)v41 = 0u;
      v42 = 0u;
      memset(v40, 0, sizeof(v40));
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v40);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)"# of keys: ", 11);
      std::ostream::operator<<();
      quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)v40);
    }
    v24 = (uint64_t **)quasar::SharedPhraseBook::getPhraseBook(std::string const&,BOOL,std::string const&,BOOL)::dataFileMap;
    _ZNSt3__112__tuple_implINS_15__tuple_indicesIJLm0ELm1ELm2ELm3EEEEJNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEbS8_bEEC2B8ne180100IJLm0ELm1ELm2ELm3EEJS8_bS8_bEJEJEJRKS8_RbSC_SD_EEENS1_IJXspT_EEEENS_13__tuple_typesIJDpT0_EEENS1_IJXspT1_EEEENSF_IJDpT2_EEEDpOT3_((std::string *)v40, (__int128 *)a1, &v57, a3, (std::string::value_type *)&v56);
    v58 = (__int128 *)v40;
    v25 = std::__tree<std::__value_type<std::tuple<std::string,BOOL,std::string,BOOL>,std::weak_ptr<quasar::SharedPhraseBook>>,std::__map_value_compare<std::tuple<std::string,BOOL,std::string,BOOL>,std::__value_type<std::tuple<std::string,BOOL,std::string,BOOL>,std::weak_ptr<quasar::SharedPhraseBook>>,std::less<std::tuple<std::string,BOOL,std::string,BOOL>>,true>,std::allocator<std::__value_type<std::tuple<std::string,BOOL,std::string,BOOL>,std::weak_ptr<quasar::SharedPhraseBook>>>>::__emplace_unique_key_args<std::tuple<std::string,BOOL,std::string,BOOL>,std::piecewise_construct_t const&,std::tuple<std::tuple<std::string,BOOL,std::string,BOOL>&&>,std::tuple<>>(v24, (uint64_t)v40, (uint64_t)&std::piecewise_construct, &v58);
    v27 = *a5;
    v26 = a5[1];
    if (v26)
    {
      v28 = (unint64_t *)(v26 + 16);
      do
        v29 = __ldxr(v28);
      while (__stxr(v29 + 1, v28));
    }
    v30 = (std::__shared_weak_count *)v25[13];
    v25[12] = v27;
    v25[13] = v26;
    if (v30)
      std::__shared_weak_count::__release_weak(v30);
    if (SBYTE7(v42) < 0)
      operator delete(v41[0]);
    if ((v40[23] & 0x80000000) != 0)
      operator delete(*(void **)v40);
    if (v38 < 0)
      operator delete(v37[0]);
    v60.__r_.__value_.__r.__words[0] = *v15;
    *(std::string::size_type *)((char *)v60.__r_.__value_.__r.__words
                              + *(_QWORD *)(v60.__r_.__value_.__r.__words[0] - 24)) = v15[3];
    MEMORY[0x1AF44CA70](&v60.__r_.__value_.__r.__words[2]);
    std::istream::~istream();
    MEMORY[0x1AF44D094](v63);
  }
}

void sub_1ADC50A2C(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

void sub_1ADC50A3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  uint64_t a72;
  uint64_t v72;

  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](v72);
  if (a16 < 0)
    operator delete(__p);
  std::ifstream::~ifstream(&a72);
  _Unwind_Resume(a1);
}

uint64_t std::tuple<std::string,BOOL,std::string,BOOL>::~tuple(uint64_t a1)
{
  if (*(char *)(a1 + 55) < 0)
    operator delete(*(void **)(a1 + 32));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  return a1;
}

void quasar::SharedPhraseBook::getEntries(uint64_t a1@<X0>, _QWORD *a2@<X1>, std::vector<std::pair<std::string, std::string>> *a3@<X8>)
{
  _QWORD *v4;
  size_t v5;
  size_t v6;
  unsigned __int8 *v7;
  uint64_t v8;
  uint64_t v9;
  size_t v10;
  const void *v11;
  __int128 *p_dst;
  uint64_t v13;
  uint64_t v14;
  size_t v15;
  const void *v16;
  __int128 *v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  unint64_t v21;
  __int128 __dst;
  unint64_t v23;
  void *__p[2];
  unint64_t v25;
  __int128 v26;
  unint64_t v27;

  v4 = (_QWORD *)(a1 + 48);
  v5 = a2[1];
  if (*((char *)a2 + 23) >= 0)
  {
    v6 = *((unsigned __int8 *)a2 + 23);
  }
  else
  {
    a2 = (_QWORD *)*a2;
    v6 = v5;
  }
  quasar::GenericPhraseBook::normalizeKey(a2, v6, a1, (uint64_t)__p);
  v7 = std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>(v4, (unsigned __int8 *)__p);
  if (SHIBYTE(v25) < 0)
    operator delete(__p[0]);
  a3->__begin_ = 0;
  a3->__end_ = 0;
  a3->__end_cap_.__value_ = 0;
  if (v7)
  {
    v8 = *((_QWORD *)v7 + 5);
    v9 = *((_QWORD *)v7 + 6);
    if (v8 != v9)
    {
      while (1)
      {
        v10 = *(_QWORD *)(v8 + 8);
        if (v10 > 0x7FFFFFFFFFFFFFF7)
          std::string::__throw_length_error[abi:ne180100]();
        v11 = *(const void **)v8;
        if (v10 >= 0x17)
          break;
        HIBYTE(v23) = *(_QWORD *)(v8 + 8);
        p_dst = &__dst;
        if (v10)
          goto LABEL_15;
LABEL_16:
        *((_BYTE *)p_dst + v10) = 0;
        v15 = *(_QWORD *)(v8 + 24);
        if (v15 > 0x7FFFFFFFFFFFFFF7)
          std::string::__throw_length_error[abi:ne180100]();
        v16 = *(const void **)(v8 + 16);
        if (v15 >= 0x17)
        {
          v18 = (v15 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v15 | 7) != 0x17)
            v18 = v15 | 7;
          v19 = v18 + 1;
          v17 = (__int128 *)operator new(v18 + 1);
          *((_QWORD *)&v20 + 1) = v15;
          v21 = v19 | 0x8000000000000000;
          *(_QWORD *)&v20 = v17;
        }
        else
        {
          HIBYTE(v21) = *(_QWORD *)(v8 + 24);
          v17 = &v20;
          if (!v15)
            goto LABEL_24;
        }
        memmove(v17, v16, v15);
LABEL_24:
        *((_BYTE *)v17 + v15) = 0;
        *(_OWORD *)__p = __dst;
        v25 = v23;
        v23 = 0;
        __dst = 0uLL;
        v26 = v20;
        v27 = v21;
        std::vector<std::pair<std::string,std::string>>::push_back[abi:ne180100](a3, (__int128 *)__p);
        if (SHIBYTE(v27) < 0)
          operator delete((void *)v26);
        if (SHIBYTE(v25) < 0)
          operator delete(__p[0]);
        v8 += 32;
        if (v8 == v9)
          return;
      }
      v13 = (v10 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v10 | 7) != 0x17)
        v13 = v10 | 7;
      v14 = v13 + 1;
      p_dst = (__int128 *)operator new(v13 + 1);
      *((_QWORD *)&__dst + 1) = v10;
      v23 = v14 | 0x8000000000000000;
      *(_QWORD *)&__dst = p_dst;
LABEL_15:
      memmove(p_dst, v11, v10);
      goto LABEL_16;
    }
  }
}

void sub_1ADC50D7C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

std::string *_ZNSt3__112__tuple_implINS_15__tuple_indicesIJLm0ELm1ELm2ELm3EEEEJNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEbS8_bEEC2B8ne180100IJLm0ELm1ELm2ELm3EEJS8_bS8_bEJEJEJRKS8_RbSC_SD_EEENS1_IJXspT_EEEENS_13__tuple_typesIJDpT0_EEENS1_IJXspT1_EEEENSF_IJDpT2_EEEDpOT3_(std::string *this, __int128 *a2, std::string::value_type *a3, __int128 *a4, std::string::value_type *a5)
{
  __int128 v9;
  std::string *v10;
  __int128 v11;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v9 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v9;
  }
  this[1].__r_.__value_.__s.__data_[0] = *a3;
  v10 = (std::string *)((char *)this + 32);
  if (*((char *)a4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v10, *(const std::string::value_type **)a4, *((_QWORD *)a4 + 1));
  }
  else
  {
    v11 = *a4;
    this[2].__r_.__value_.__r.__words[0] = *((_QWORD *)a4 + 2);
    *(_OWORD *)&v10->__r_.__value_.__l.__data_ = v11;
  }
  this[2].__r_.__value_.__s.__data_[8] = *a5;
  return this;
}

void sub_1ADC50E74(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::vector<std::pair<std::string_view,std::string_view>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::pair<std::string_view,std::string_view>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::pair<std::string_view,std::string_view>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::pair<std::string_view,std::string_view>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1, unsigned __int8 *a2, uint64_t a3, __int128 **a4)
{
  unint64_t v4;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  unint64_t v13;
  unsigned __int8 **v14;
  unsigned __int8 *i;
  unint64_t v16;
  float v17;
  float v18;
  _BOOL8 v19;
  unint64_t v20;
  unint64_t v21;
  size_t v22;
  _QWORD *v23;
  unint64_t v24;
  _QWORD v26[3];

  v8 = (_QWORD *)(a1 + 24);
  v9 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  v10 = v9;
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      v4 = v9;
      if (v9 >= v11)
        v4 = v9 % v11;
    }
    else
    {
      v4 = (v11 - 1) & v9;
    }
    v14 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v4);
    if (v14)
    {
      for (i = *v14; i; i = *(unsigned __int8 **)i)
      {
        v16 = *((_QWORD *)i + 1);
        if (v16 == v10)
        {
          if ((std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2) & 1) != 0)
            return i;
        }
        else
        {
          if (v13 > 1)
          {
            if (v16 >= v11)
              v16 %= v11;
          }
          else
          {
            v16 &= v11 - 1;
          }
          if (v16 != v4)
            break;
        }
      }
    }
  }
  std::__hash_table<std::__hash_value_type<std::string,std::vector<std::pair<std::string_view,std::string_view>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::pair<std::string_view,std::string_view>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::pair<std::string_view,std::string_view>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::pair<std::string_view,std::string_view>>>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1, v10, a4, (uint64_t)v26);
  v17 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v18 = *(float *)(a1 + 32);
  if (!v11 || (float)(v18 * (float)v11) < v17)
  {
    v19 = 1;
    if (v11 >= 3)
      v19 = (v11 & (v11 - 1)) != 0;
    v20 = v19 | (2 * v11);
    v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21)
      v22 = v21;
    else
      v22 = v20;
    std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::__rehash<true>(a1, v22);
    v11 = *(_QWORD *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
        v4 = v10 % v11;
      else
        v4 = v10;
    }
    else
    {
      v4 = (v11 - 1) & v10;
    }
  }
  v23 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v23)
  {
    *(_QWORD *)v26[0] = *v23;
    *v23 = v26[0];
  }
  else
  {
    *(_QWORD *)v26[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v26[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = a1 + 16;
    if (*(_QWORD *)v26[0])
    {
      v24 = *(_QWORD *)(*(_QWORD *)v26[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v24 >= v11)
          v24 %= v11;
      }
      else
      {
        v24 &= v11 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v24) = v26[0];
    }
  }
  i = (unsigned __int8 *)v26[0];
  v26[0] = 0;
  ++*v8;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::vector<float>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::vector<float>>,void *>>>>::reset[abi:ne180100]((uint64_t)v26, 0);
  return i;
}

void sub_1ADC51110(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::vector<float>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::vector<float>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

void std::__hash_table<std::__hash_value_type<std::string,std::vector<std::pair<std::string_view,std::string_view>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::pair<std::string_view,std::string_view>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::pair<std::string_view,std::string_view>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::pair<std::string_view,std::string_view>>>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1@<X0>, uint64_t a2@<X1>, __int128 **a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v7;
  _QWORD *v8;
  std::string *v9;
  __int128 *v10;
  __int128 v11;

  v7 = a1 + 16;
  v8 = operator new(0x40uLL);
  *(_QWORD *)a4 = v8;
  *(_QWORD *)(a4 + 8) = v7;
  *(_BYTE *)(a4 + 16) = 0;
  *v8 = 0;
  v8[1] = a2;
  v9 = (std::string *)(v8 + 2);
  v10 = *a3;
  if (*((char *)*a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)v10, *((_QWORD *)v10 + 1));
  }
  else
  {
    v11 = *v10;
    v8[4] = *((_QWORD *)v10 + 2);
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = v11;
  }
  v8[5] = 0;
  v8[6] = 0;
  v8[7] = 0;
  *(_BYTE *)(a4 + 16) = 1;
}

void sub_1ADC511B0(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::vector<float>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::vector<float>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

_QWORD *std::__tree<std::__value_type<std::tuple<std::string,BOOL,std::string,BOOL>,std::weak_ptr<quasar::SharedPhraseBook>>,std::__map_value_compare<std::tuple<std::string,BOOL,std::string,BOOL>,std::__value_type<std::tuple<std::string,BOOL,std::string,BOOL>,std::weak_ptr<quasar::SharedPhraseBook>>,std::less<std::tuple<std::string,BOOL,std::string,BOOL>>,true>,std::allocator<std::__value_type<std::tuple<std::string,BOOL,std::string,BOOL>,std::weak_ptr<quasar::SharedPhraseBook>>>>::__emplace_unique_key_args<std::tuple<std::string,BOOL,std::string,BOOL>,std::piecewise_construct_t const&,std::tuple<std::tuple<std::string,BOOL,std::string,BOOL>&&>,std::tuple<>>(uint64_t **a1, uint64_t a2, uint64_t a3, __int128 **a4)
{
  void **v6;
  _QWORD *v7;
  uint64_t **v8;
  __int128 *v9;
  __int128 v10;
  uint64_t v11;
  _QWORD v13[2];
  char v14;
  uint64_t v15;

  v6 = (void **)std::__tree<std::__value_type<std::tuple<std::string,BOOL,std::string,BOOL>,std::weak_ptr<quasar::SharedPhraseBook>>,std::__map_value_compare<std::tuple<std::string,BOOL,std::string,BOOL>,std::__value_type<std::tuple<std::string,BOOL,std::string,BOOL>,std::weak_ptr<quasar::SharedPhraseBook>>,std::less<std::tuple<std::string,BOOL,std::string,BOOL>>,true>,std::allocator<std::__value_type<std::tuple<std::string,BOOL,std::string,BOOL>,std::weak_ptr<quasar::SharedPhraseBook>>>>::__find_equal<std::tuple<std::string,BOOL,std::string,BOOL>>((uint64_t)a1, &v15, a2);
  v7 = *v6;
  if (!*v6)
  {
    v8 = (uint64_t **)v6;
    v7 = operator new(0x70uLL);
    v13[1] = a1 + 1;
    v9 = *a4;
    v10 = **a4;
    v7[6] = *((_QWORD *)*a4 + 2);
    *((_OWORD *)v7 + 2) = v10;
    *((_QWORD *)v9 + 1) = 0;
    *((_QWORD *)v9 + 2) = 0;
    *(_QWORD *)v9 = 0;
    *((_BYTE *)v7 + 56) = *((_BYTE *)v9 + 24);
    v11 = *((_QWORD *)v9 + 6);
    *((_OWORD *)v7 + 4) = v9[2];
    v7[10] = v11;
    *((_QWORD *)v9 + 5) = 0;
    *((_QWORD *)v9 + 6) = 0;
    *((_QWORD *)v9 + 4) = 0;
    *((_BYTE *)v7 + 88) = *((_BYTE *)v9 + 56);
    v7[12] = 0;
    v7[13] = 0;
    v14 = 1;
    std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at(a1, v15, v8, v7);
    v13[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::tuple<std::string,BOOL,std::string,BOOL>,std::weak_ptr<quasar::SharedPhraseBook>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::tuple<std::string,BOOL,std::string,BOOL>,std::weak_ptr<quasar::SharedPhraseBook>>,void *>>>>::reset[abi:ne180100]((uint64_t)v13, 0);
  }
  return v7;
}

_QWORD *std::__tree<std::__value_type<std::tuple<std::string,BOOL,std::string,BOOL>,std::weak_ptr<quasar::SharedPhraseBook>>,std::__map_value_compare<std::tuple<std::string,BOOL,std::string,BOOL>,std::__value_type<std::tuple<std::string,BOOL,std::string,BOOL>,std::weak_ptr<quasar::SharedPhraseBook>>,std::less<std::tuple<std::string,BOOL,std::string,BOOL>>,true>,std::allocator<std::__value_type<std::tuple<std::string,BOOL,std::string,BOOL>,std::weak_ptr<quasar::SharedPhraseBook>>>>::__find_equal<std::tuple<std::string,BOOL,std::string,BOOL>>(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v7;
  uint64_t v8;
  char v10;
  char v11;

  v5 = (_QWORD *)(a1 + 8);
  v4 = *(_QWORD **)(a1 + 8);
  if (v4)
  {
    do
    {
      while (1)
      {
        v7 = v4;
        v8 = (uint64_t)(v4 + 4);
        if (!std::__tuple_less<4ul>::operator()[abi:ne180100]<std::tuple<std::string,BOOL,std::string,BOOL>,std::tuple<std::string,BOOL,std::string,BOOL>>((uint64_t)&v10, a3, (uint64_t)(v4 + 4)))break;
        v4 = (_QWORD *)*v7;
        v5 = v7;
        if (!*v7)
          goto LABEL_9;
      }
      if (!std::__tuple_less<4ul>::operator()[abi:ne180100]<std::tuple<std::string,BOOL,std::string,BOOL>,std::tuple<std::string,BOOL,std::string,BOOL>>((uint64_t)&v11, v8, a3))break;
      v5 = v7 + 1;
      v4 = (_QWORD *)v7[1];
    }
    while (v4);
  }
  else
  {
    v7 = (_QWORD *)(a1 + 8);
  }
LABEL_9:
  *a2 = v7;
  return v5;
}

BOOL std::__tuple_less<4ul>::operator()[abi:ne180100]<std::tuple<std::string,BOOL,std::string,BOOL>,std::tuple<std::string,BOOL,std::string,BOOL>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v5;
  int v6;
  size_t v7;
  const void *v8;
  size_t v9;
  const void *v10;
  size_t v11;
  int v12;
  BOOL v13;
  int v14;
  BOOL v15;
  unsigned int v16;
  unsigned int v17;
  char v19;

  v5 = *(char *)(a3 + 23);
  v6 = *(char *)(a2 + 23);
  if (v6 >= 0)
    v7 = *(unsigned __int8 *)(a2 + 23);
  else
    v7 = *(_QWORD *)(a2 + 8);
  if (v6 >= 0)
    v8 = (const void *)a2;
  else
    v8 = *(const void **)a2;
  if (v5 >= 0)
    v9 = *(unsigned __int8 *)(a3 + 23);
  else
    v9 = *(_QWORD *)(a3 + 8);
  if (v5 >= 0)
    v10 = (const void *)a3;
  else
    v10 = *(const void **)a3;
  if (v9 >= v7)
    v11 = v7;
  else
    v11 = v9;
  v12 = memcmp(v8, v10, v11);
  v13 = v7 < v9;
  if (v12)
    v13 = v12 < 0;
  if (v13)
    return 1;
  v14 = memcmp(v10, v8, v11);
  v15 = v9 < v7;
  if (v14)
    v15 = v14 < 0;
  if (v15)
    return 0;
  v16 = *(unsigned __int8 *)(a2 + 24);
  v17 = *(unsigned __int8 *)(a3 + 24);
  if (v16 < v17)
    return 1;
  return v17 >= v16
      && std::__tuple_less<2ul>::operator()[abi:ne180100]<std::tuple<std::string,BOOL,std::string,BOOL>,std::tuple<std::string,BOOL,std::string,BOOL>>((uint64_t)&v19, a2, a3);
}

BOOL std::__tuple_less<2ul>::operator()[abi:ne180100]<std::tuple<std::string,BOOL,std::string,BOOL>,std::tuple<std::string,BOOL,std::string,BOOL>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v5;
  int v6;
  size_t v7;
  const void *v8;
  size_t v9;
  const void *v10;
  size_t v11;
  int v12;
  BOOL v13;
  int v15;
  BOOL v16;

  v5 = *(char *)(a3 + 55);
  v6 = *(char *)(a2 + 55);
  if (v6 >= 0)
    v7 = *(unsigned __int8 *)(a2 + 55);
  else
    v7 = *(_QWORD *)(a2 + 40);
  if (v6 >= 0)
    v8 = (const void *)(a2 + 32);
  else
    v8 = *(const void **)(a2 + 32);
  if (v5 >= 0)
    v9 = *(unsigned __int8 *)(a3 + 55);
  else
    v9 = *(_QWORD *)(a3 + 40);
  if (v5 >= 0)
    v10 = (const void *)(a3 + 32);
  else
    v10 = *(const void **)(a3 + 32);
  if (v9 >= v7)
    v11 = v7;
  else
    v11 = v9;
  v12 = memcmp(v8, v10, v11);
  v13 = v7 < v9;
  if (v12)
    v13 = v12 < 0;
  if (v13)
    return 1;
  v15 = memcmp(v10, v8, v11);
  v16 = v9 < v7;
  if (v15)
    v16 = v15 < 0;
  return !v16 && *(unsigned __int8 *)(a2 + 56) < *(unsigned __int8 *)(a3 + 56);
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::tuple<std::string,BOOL,std::string,BOOL>,std::weak_ptr<quasar::SharedPhraseBook>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::tuple<std::string,BOOL,std::string,BOOL>,std::weak_ptr<quasar::SharedPhraseBook>>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<std::tuple<std::string,BOOL,std::string,BOOL> const,std::weak_ptr<quasar::SharedPhraseBook>>,0>((uint64_t)v2 + 32);
    operator delete(v2);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::tuple<std::string,BOOL,std::string,BOOL> const,std::weak_ptr<quasar::SharedPhraseBook>>,0>(uint64_t a1)
{
  std::__shared_weak_count *v2;

  v2 = *(std::__shared_weak_count **)(a1 + 72);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  if (*(char *)(a1 + 55) < 0)
    operator delete(*(void **)(a1 + 32));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

_QWORD *std::shared_ptr<quasar::SharedPhraseBook>::shared_ptr[abi:ne180100]<quasar::SharedPhraseBook,void>(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  *a1 = a2;
  v4 = (_QWORD *)operator new();
  *v4 = &unk_1E5D461C0;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_1ADC51634(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;

  a10 = 0;
  if (v10)
    std::default_delete<quasar::SharedPhraseBook>::operator()[abi:ne180100]((uint64_t)&a10, v10);
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_pointer<quasar::SharedPhraseBook *,std::shared_ptr<quasar::SharedPhraseBook>::__shared_ptr_default_delete<quasar::SharedPhraseBook,quasar::SharedPhraseBook>,std::allocator<quasar::SharedPhraseBook>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF44D190);
}

void std::__shared_ptr_pointer<quasar::SharedPhraseBook *,std::shared_ptr<quasar::SharedPhraseBook>::__shared_ptr_default_delete<quasar::SharedPhraseBook,quasar::SharedPhraseBook>,std::allocator<quasar::SharedPhraseBook>>::__on_zero_shared(uint64_t a1)
{
  std::default_delete<quasar::SharedPhraseBook>::operator()[abi:ne180100](a1 + 24, *(_QWORD *)(a1 + 24));
}

uint64_t std::__shared_ptr_pointer<quasar::SharedPhraseBook *,std::shared_ptr<quasar::SharedPhraseBook>::__shared_ptr_default_delete<quasar::SharedPhraseBook,quasar::SharedPhraseBook>,std::allocator<quasar::SharedPhraseBook>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void std::default_delete<quasar::SharedPhraseBook>::operator()[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  void **v4;

  if (a2)
  {
    *(_QWORD *)a2 = &off_1E5D362B0;
    std::__hash_table<std::__hash_value_type<std::string,std::vector<float>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<float>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<float>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<float>>>>::~__hash_table(a2 + 48);
    v3 = *(_QWORD *)(a2 + 40);
    *(_QWORD *)(a2 + 40) = 0;
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
    *(_QWORD *)a2 = &unk_1E5D364F0;
    v4 = (void **)(a2 + 16);
    std::vector<quasar::RegexReplacementRule>::__destroy_vector::operator()[abi:ne180100](&v4);
    MEMORY[0x1AF44D190](a2, 0x10A1C40AAE2D2D9);
  }
}

uint64_t kaldi::MatrixBase<float>::NumRows(uint64_t a1)
{
  return *(unsigned int *)(a1 + 12);
}

uint64_t kaldi::MatrixBase<float>::NumCols(uint64_t a1)
{
  return *(unsigned int *)(a1 + 8);
}

uint64_t kaldi::Matrix<float>::Matrix<double>(uint64_t a1, uint64_t a2, int a3)
{
  int v5;

  *(_BYTE *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  if (a3 == 111)
  {
    kaldi::Matrix<float>::Resize((int32x2_t *)a1, *(unsigned int *)(a2 + 12), *(unsigned int *)(a2 + 8), 0, 0);
    v5 = 111;
  }
  else
  {
    kaldi::Matrix<float>::Resize((int32x2_t *)a1, *(unsigned int *)(a2 + 8), *(unsigned int *)(a2 + 12), 0, 0);
    v5 = 112;
  }
  kaldi::MatrixBase<float>::CopyFromMat<double>(a1, a2, v5);
  return a1;
}

void kaldi::Matrix<float>::Resize(int32x2_t *a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5)
{
  int v5;
  int v6;
  __int32 v7;
  unsigned int v8;
  int v10;
  unsigned int v11;
  char v12;
  char *v13;
  char v14;
  int v16;
  _BOOL8 v17;
  char v19;
  int v20;
  __int32 v21;
  BOOL v22;
  uint64_t v23;
  char *v24;
  int32x2_t v25;
  void *v26;
  void *v27;
  __int128 v28;
  __int8 v29;
  int v30;
  size_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  std::bad_alloc *exception;
  std::bad_alloc *v39;
  _QWORD v40[4];
  void *v41;
  int32x2_t v42;
  void *v43;
  uint64_t v44;
  void *memptr[4];
  __int8 v46;

  v5 = a5;
  v6 = a4;
  v7 = a3;
  v8 = a2;
  v10 = a1[2].i32[0];
  if (v10 < 1)
    v11 = 0;
  else
    v11 = a1[2].i32[1] / v10;
  if (v10 == (_DWORD)a3)
    v12 = 0;
  else
    v12 = a5;
  if (a4 == 2)
  {
    v6 = 0;
    v13 = (char *)*a1;
    if ((_DWORD)a2 && v13)
    {
      if (v10 < (int)a3 || v11 < a2)
        v12 = 1;
      v16 = a1[1].i32[1];
      if ((v12 & 1) != 0)
      {
        v17 = (int)a2 <= v16 && a1[1].i32[0] >= (int)a3;
        v46 = 0;
        memset(memptr, 0, sizeof(memptr));
        kaldi::Matrix<float>::Resize(memptr, a2, a3, v17, a5);
        v25 = a1[2];
        v42 = vmin_s32(a1[1], (int32x2_t)__PAIR64__(v8, v7));
        v43 = memptr[2];
        v44 = 0;
        v40[3] = 0;
        v41 = memptr[0];
        v40[0] = *a1;
        v40[1] = v42;
        v40[2] = v25;
        kaldi::MatrixBase<float>::CopyFromMat<float>((int *)&v41, (int *)v40, 111);
        v26 = memptr[0];
        memptr[0] = (void *)*a1;
        v27 = memptr[0];
        *a1 = (int32x2_t)v26;
        v28 = *(_OWORD *)&memptr[1];
        *(_OWORD *)&memptr[1] = *(_OWORD *)a1[1].i8;
        *(_OWORD *)a1[1].i8 = v28;
        v29 = v46;
        v30 = a1[4].u8[0];
        v46 = a1[4].i8[0];
        a1[4].i8[0] = v29;
        if (v27 && !v30)
          free(v27);
      }
      else
      {
        v23 = a1[1].i32[0];
        a1[1].i32[0] = v10;
        a1[1].i32[1] = v11;
        if (a3 > v23)
        {
          v24 = &v13[4 * v23];
          if ((_DWORD)a3 - (_DWORD)v23 == v10)
          {
            bzero(&v13[4 * v23], 4 * v10 * (uint64_t)(int)a2);
          }
          else if ((int)a2 >= 1)
          {
            v31 = 4 * ((int)a3 - (int)v23);
            v32 = 4 * v10;
            v33 = a2;
            do
            {
              bzero(v24, v31);
              v24 += v32;
              --v33;
            }
            while (v33);
          }
        }
        v34 = v8 - v16;
        if (v8 > v16)
        {
          v35 = a1[2].i32[0];
          v36 = (char *)(*(_QWORD *)a1 + 4 * (int)v35 * v16);
          if ((_DWORD)v35 == v7)
          {
            bzero(v36, 4 * v7 * (uint64_t)(int)v34);
          }
          else if ((int)v34 >= 1)
          {
            v37 = 4 * v35;
            do
            {
              bzero(v36, 4 * v7);
              v36 += v37;
              --v34;
            }
            while (v34);
          }
        }
        a1[1].i32[0] = v7;
        a1[1].i32[1] = v8;
      }
      return;
    }
  }
  else
  {
    if (a4 == 3)
    {
      v13 = (char *)*a1;
      if (*a1)
      {
        if (a1[1].i32[1] == (_DWORD)a2)
        {
          v14 = a1[1].i32[0] == (_DWORD)a3 ? v12 : 1;
          if ((v14 & 1) == 0)
            return;
        }
        v6 = 0;
        goto LABEL_28;
      }
      v6 = 0;
      goto LABEL_41;
    }
    v13 = (char *)*a1;
  }
  if (v13)
  {
LABEL_28:
    if (v10 >= (int)a3 && v11 >= a2)
      v19 = v12;
    else
      v19 = 1;
    if ((v19 & 1) == 0)
    {
      a1[1].i32[0] = a3;
      a1[1].i32[1] = a2;
      if (!v6)
        kaldi::MatrixBase<float>::SetZero((uint64_t)a1);
      return;
    }
    if (!a1[4].i8[0])
      free(v13);
    a1[4].i8[0] = 0;
    a1[1] = 0;
    a1[2] = 0;
    *a1 = 0;
  }
LABEL_41:
  if (v7 * v8)
  {
    memptr[0] = 0;
    v20 = -v7 & 3;
    if (v5)
      v20 = 0;
    v21 = v20 + v7;
    if (malloc_type_posix_memalign(memptr, 0x10uLL, 4 * v8 * (unint64_t)(v20 + v7), 0x746C3D7DuLL))
      v22 = 1;
    else
      v22 = memptr[0] == 0;
    if (v22)
    {
      exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
      v39 = std::bad_alloc::bad_alloc(exception);
      __cxa_throw(v39, MEMORY[0x1E0DE4EA8], (void (*)(void *))MEMORY[0x1E0DE4DC0]);
    }
    *a1 = (int32x2_t)memptr[0];
    a1[4].i8[0] = 0;
    a1[1].i32[0] = v7;
    a1[1].i32[1] = v8;
    a1[2].i32[0] = v21;
    a1[2].i32[1] = v21 * v8;
    if (!v6)
      goto LABEL_51;
  }
  else
  {
    a1[4].i8[0] = 0;
    a1[1] = 0;
    a1[2] = 0;
    *a1 = 0;
    if (!v6)
LABEL_51:
      kaldi::MatrixBase<float>::SetZero((uint64_t)a1);
  }
}

void sub_1ADC51B2C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  if (a17)
  {
    if (!a21)
      free(a17);
  }
  _Unwind_Resume(exception_object);
}

void kaldi::MatrixBase<float>::CopyFromMat<double>(uint64_t a1, uint64_t a2, int a3)
{
  int v5;
  uint64_t v6;
  int v7;
  double *v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  float *v13;
  double *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  double *v18;
  float *v19;
  float v20;
  double *v21;
  int v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  int v27;
  uint64_t v28;

  if (a3 == 111)
  {
    if (*(int *)(a1 + 12) >= 1)
    {
      v5 = 0;
      do
      {
        v6 = *(_QWORD *)a1 + 4 * *(_DWORD *)(a1 + 16) * v5;
        v7 = *(_DWORD *)(a1 + 8);
        v27 = 0;
        v28 = 0;
        v25 = v6;
        v26 = v7;
        v8 = (double *)(*(_QWORD *)a2 + 8 * *(_DWORD *)(a2 + 16) * v5);
        v9 = *(_DWORD *)(a2 + 8);
        v23 = 0;
        v24 = 0;
        v21 = v8;
        v22 = v9;
        kaldi::VectorBase<float>::CopyFromVec<double>((uint64_t)&v25, &v21);
        ++v5;
      }
      while (v5 < *(_DWORD *)(a1 + 12));
    }
  }
  else
  {
    v10 = *(unsigned int *)(a1 + 12);
    if ((int)v10 >= 1)
    {
      v11 = 0;
      v12 = *(unsigned int *)(a1 + 8);
      v13 = *(float **)a1;
      v14 = *(double **)a2;
      v15 = 4 * *(int *)(a1 + 16);
      v16 = 8 * *(int *)(a2 + 16);
      do
      {
        v17 = v12;
        v18 = v14;
        v19 = v13;
        if ((int)v12 >= 1)
        {
          do
          {
            v20 = *v18;
            *v19++ = v20;
            v18 = (double *)((char *)v18 + v16);
            --v17;
          }
          while (v17);
        }
        ++v11;
        v13 = (float *)((char *)v13 + v15);
        ++v14;
      }
      while (v11 != v10);
    }
  }
}

uint64_t kaldi::Matrix<double>::Matrix<float>(uint64_t a1, uint64_t a2, int a3)
{
  int v5;

  *(_BYTE *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  if (a3 == 111)
  {
    kaldi::Matrix<double>::Resize((int32x2_t *)a1, *(unsigned int *)(a2 + 12), *(unsigned int *)(a2 + 8), 0, 0);
    v5 = 111;
  }
  else
  {
    kaldi::Matrix<double>::Resize((int32x2_t *)a1, *(unsigned int *)(a2 + 8), *(unsigned int *)(a2 + 12), 0, 0);
    v5 = 112;
  }
  kaldi::MatrixBase<double>::CopyFromMat<float>(a1, a2, v5);
  return a1;
}

void kaldi::Matrix<double>::Resize(int32x2_t *a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5)
{
  int v5;
  int v6;
  __int32 v7;
  unsigned int v8;
  int v10;
  unsigned int v11;
  char v12;
  char *v13;
  char v14;
  int v16;
  _BOOL8 v17;
  char v19;
  int v20;
  __int32 v21;
  BOOL v22;
  uint64_t v23;
  char *v24;
  int32x2_t v25;
  void *v26;
  void *v27;
  __int128 v28;
  __int8 v29;
  int v30;
  size_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  std::bad_alloc *exception;
  std::bad_alloc *v39;
  _QWORD v40[4];
  void *v41;
  int32x2_t v42;
  void *v43;
  uint64_t v44;
  void *memptr[4];
  __int8 v46;

  v5 = a5;
  v6 = a4;
  v7 = a3;
  v8 = a2;
  v10 = a1[2].i32[0];
  if (v10 < 1)
    v11 = 0;
  else
    v11 = a1[2].i32[1] / v10;
  if (v10 == (_DWORD)a3)
    v12 = 0;
  else
    v12 = a5;
  if (a4 == 2)
  {
    v6 = 0;
    v13 = (char *)*a1;
    if ((_DWORD)a2 && v13)
    {
      if (v10 < (int)a3 || v11 < a2)
        v12 = 1;
      v16 = a1[1].i32[1];
      if ((v12 & 1) != 0)
      {
        v17 = (int)a2 <= v16 && a1[1].i32[0] >= (int)a3;
        v46 = 0;
        memset(memptr, 0, sizeof(memptr));
        kaldi::Matrix<double>::Resize(memptr, a2, a3, v17, a5);
        v25 = a1[2];
        v42 = vmin_s32(a1[1], (int32x2_t)__PAIR64__(v8, v7));
        v43 = memptr[2];
        v44 = 0;
        v40[3] = 0;
        v41 = memptr[0];
        v40[0] = *a1;
        v40[1] = v42;
        v40[2] = v25;
        kaldi::MatrixBase<double>::CopyFromMat<double>((int *)&v41, (int *)v40, 111);
        v26 = memptr[0];
        memptr[0] = (void *)*a1;
        v27 = memptr[0];
        *a1 = (int32x2_t)v26;
        v28 = *(_OWORD *)&memptr[1];
        *(_OWORD *)&memptr[1] = *(_OWORD *)a1[1].i8;
        *(_OWORD *)a1[1].i8 = v28;
        v29 = v46;
        v30 = a1[4].u8[0];
        v46 = a1[4].i8[0];
        a1[4].i8[0] = v29;
        if (v27 && !v30)
          free(v27);
      }
      else
      {
        v23 = a1[1].i32[0];
        a1[1].i32[0] = v10;
        a1[1].i32[1] = v11;
        if (a3 > v23)
        {
          v24 = &v13[8 * v23];
          if ((_DWORD)a3 - (_DWORD)v23 == v10)
          {
            bzero(&v13[8 * v23], 8 * v10 * (uint64_t)(int)a2);
          }
          else if ((int)a2 >= 1)
          {
            v31 = 8 * ((int)a3 - (int)v23);
            v32 = 8 * v10;
            v33 = a2;
            do
            {
              bzero(v24, v31);
              v24 += v32;
              --v33;
            }
            while (v33);
          }
        }
        v34 = v8 - v16;
        if (v8 > v16)
        {
          v35 = a1[2].i32[0];
          v36 = (char *)(*(_QWORD *)a1 + 8 * (int)v35 * v16);
          if ((_DWORD)v35 == v7)
          {
            bzero(v36, 8 * v7 * (uint64_t)(int)v34);
          }
          else if ((int)v34 >= 1)
          {
            v37 = 8 * v35;
            do
            {
              bzero(v36, 8 * v7);
              v36 += v37;
              --v34;
            }
            while (v34);
          }
        }
        a1[1].i32[0] = v7;
        a1[1].i32[1] = v8;
      }
      return;
    }
  }
  else
  {
    if (a4 == 3)
    {
      v13 = (char *)*a1;
      if (*a1)
      {
        if (a1[1].i32[1] == (_DWORD)a2)
        {
          v14 = a1[1].i32[0] == (_DWORD)a3 ? v12 : 1;
          if ((v14 & 1) == 0)
            return;
        }
        v6 = 0;
        goto LABEL_28;
      }
      v6 = 0;
      goto LABEL_41;
    }
    v13 = (char *)*a1;
  }
  if (v13)
  {
LABEL_28:
    if (v10 >= (int)a3 && v11 >= a2)
      v19 = v12;
    else
      v19 = 1;
    if ((v19 & 1) == 0)
    {
      a1[1].i32[0] = a3;
      a1[1].i32[1] = a2;
      if (!v6)
        kaldi::MatrixBase<double>::SetZero((uint64_t)a1);
      return;
    }
    if (!a1[4].i8[0])
      free(v13);
    a1[4].i8[0] = 0;
    a1[1] = 0;
    a1[2] = 0;
    *a1 = 0;
  }
LABEL_41:
  if (v7 * v8)
  {
    memptr[0] = 0;
    v20 = v7 & 1;
    if (v5)
      v20 = 0;
    v21 = v20 + v7;
    if (malloc_type_posix_memalign(memptr, 0x10uLL, 8 * v8 * (unint64_t)(v20 + v7), 0x746C3D7DuLL))
      v22 = 1;
    else
      v22 = memptr[0] == 0;
    if (v22)
    {
      exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
      v39 = std::bad_alloc::bad_alloc(exception);
      __cxa_throw(v39, MEMORY[0x1E0DE4EA8], (void (*)(void *))MEMORY[0x1E0DE4DC0]);
    }
    *a1 = (int32x2_t)memptr[0];
    a1[4].i8[0] = 0;
    a1[1].i32[0] = v7;
    a1[1].i32[1] = v8;
    a1[2].i32[0] = v21;
    a1[2].i32[1] = v21 * v8;
    if (!v6)
      goto LABEL_51;
  }
  else
  {
    a1[4].i8[0] = 0;
    a1[1] = 0;
    a1[2] = 0;
    *a1 = 0;
    if (!v6)
LABEL_51:
      kaldi::MatrixBase<double>::SetZero((uint64_t)a1);
  }
}

void sub_1ADC52044(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  if (a17)
  {
    if (!a21)
      free(a17);
  }
  _Unwind_Resume(exception_object);
}

void kaldi::MatrixBase<double>::CopyFromMat<float>(uint64_t a1, uint64_t a2, int a3)
{
  int v5;
  uint64_t v6;
  int v7;
  float *v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  double *v13;
  float *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  float *v18;
  double *v19;
  float *v20;
  int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  int v26;
  uint64_t v27;

  if (a3 == 111)
  {
    if (*(int *)(a1 + 12) >= 1)
    {
      v5 = 0;
      do
      {
        v6 = *(_QWORD *)a1 + 8 * *(_DWORD *)(a1 + 16) * v5;
        v7 = *(_DWORD *)(a1 + 8);
        v26 = 0;
        v27 = 0;
        v24 = v6;
        v25 = v7;
        v8 = (float *)(*(_QWORD *)a2 + 4 * *(_DWORD *)(a2 + 16) * v5);
        v9 = *(_DWORD *)(a2 + 8);
        v22 = 0;
        v23 = 0;
        v20 = v8;
        v21 = v9;
        kaldi::VectorBase<double>::CopyFromVec<float>((uint64_t)&v24, &v20);
        ++v5;
      }
      while (v5 < *(_DWORD *)(a1 + 12));
    }
  }
  else
  {
    v10 = *(unsigned int *)(a1 + 12);
    if ((int)v10 >= 1)
    {
      v11 = 0;
      v12 = *(unsigned int *)(a1 + 8);
      v13 = *(double **)a1;
      v14 = *(float **)a2;
      v15 = 8 * *(int *)(a1 + 16);
      v16 = 4 * *(int *)(a2 + 16);
      do
      {
        v17 = v12;
        v18 = v14;
        v19 = v13;
        if ((int)v12 >= 1)
        {
          do
          {
            *v19++ = *v18;
            v18 = (float *)((char *)v18 + v16);
            --v17;
          }
          while (v17);
        }
        ++v11;
        v13 = (double *)((char *)v13 + v15);
        ++v14;
      }
      while (v11 != v10);
    }
  }
}

int *kaldi::MatrixBase<float>::CopyFromMat<float>(int *result, int *a2, int a3)
{
  uint64_t v3;
  uint64_t v4;
  int *v6;
  int v7;
  uint64_t v8;
  int v9;
  const void *v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _DWORD *v15;
  _DWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _DWORD *v20;
  _DWORD *v21;
  const void *v22;
  int v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  if (a2 != result)
  {
    v30 = v3;
    v31 = v4;
    v6 = result;
    if (a3 == 111)
    {
      if (result[3] >= 1)
      {
        v7 = 0;
        do
        {
          v8 = *(_QWORD *)v6 + 4 * v6[4] * v7;
          v9 = v6[2];
          v28 = 0;
          v29 = 0;
          v26 = v8;
          v27 = v9;
          v10 = (const void *)(*(_QWORD *)a2 + 4 * a2[4] * v7);
          v11 = a2[2];
          v24 = 0;
          v25 = 0;
          v22 = v10;
          v23 = v11;
          result = (int *)kaldi::VectorBase<float>::CopyFromVec((uint64_t)&v26, &v22);
          ++v7;
        }
        while (v7 < v6[3]);
      }
    }
    else
    {
      v12 = result[3];
      if ((int)v12 >= 1)
      {
        v13 = 0;
        v14 = result[2];
        v15 = *(_DWORD **)result;
        v16 = *(_DWORD **)a2;
        v17 = 4 * result[4];
        v18 = 4 * a2[4];
        do
        {
          v19 = v14;
          v20 = v16;
          v21 = v15;
          if ((int)v14 >= 1)
          {
            do
            {
              *v21++ = *v20;
              v20 = (_DWORD *)((char *)v20 + v18);
              --v19;
            }
            while (v19);
          }
          ++v13;
          v15 = (_DWORD *)((char *)v15 + v17);
          ++v16;
        }
        while (v13 != v12);
      }
    }
  }
  return result;
}

int *kaldi::MatrixBase<double>::CopyFromMat<double>(int *result, int *a2, int a3)
{
  uint64_t v3;
  uint64_t v4;
  int *v6;
  int v7;
  uint64_t v8;
  int v9;
  const void *v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  const void *v22;
  int v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  if (a2 != result)
  {
    v30 = v3;
    v31 = v4;
    v6 = result;
    if (a3 == 111)
    {
      if (result[3] >= 1)
      {
        v7 = 0;
        do
        {
          v8 = *(_QWORD *)v6 + 8 * v6[4] * v7;
          v9 = v6[2];
          v28 = 0;
          v29 = 0;
          v26 = v8;
          v27 = v9;
          v10 = (const void *)(*(_QWORD *)a2 + 8 * a2[4] * v7);
          v11 = a2[2];
          v24 = 0;
          v25 = 0;
          v22 = v10;
          v23 = v11;
          result = (int *)kaldi::VectorBase<double>::CopyFromVec((uint64_t)&v26, &v22);
          ++v7;
        }
        while (v7 < v6[3]);
      }
    }
    else
    {
      v12 = result[3];
      if ((int)v12 >= 1)
      {
        v13 = 0;
        v14 = result[2];
        v15 = *(_QWORD **)result;
        v16 = *(_QWORD **)a2;
        v17 = 8 * result[4];
        v18 = 8 * a2[4];
        do
        {
          v19 = v14;
          v20 = v16;
          v21 = v15;
          if ((int)v14 >= 1)
          {
            do
            {
              *v21++ = *v20;
              v20 = (_QWORD *)((char *)v20 + v18);
              --v19;
            }
            while (v19);
          }
          ++v13;
          v15 = (_QWORD *)((char *)v15 + v17);
          ++v16;
        }
        while (v13 != v12);
      }
    }
  }
  return result;
}

void kaldi::MatrixBase<float>::SetZero(uint64_t a1)
{
  int v2;
  int v3;

  v2 = *(_DWORD *)(a1 + 8);
  if (v2 == *(_DWORD *)(a1 + 16))
  {
    bzero(*(void **)a1, 4 * v2 * (uint64_t)*(int *)(a1 + 12));
  }
  else if (*(int *)(a1 + 12) >= 1)
  {
    v3 = 0;
    do
      bzero((void *)(*(_QWORD *)a1 + 4 * *(_DWORD *)(a1 + 16) * v3++), 4 * *(int *)(a1 + 8));
    while (v3 < *(_DWORD *)(a1 + 12));
  }
}

void kaldi::MatrixBase<double>::SetZero(uint64_t a1)
{
  int v2;
  int v3;

  v2 = *(_DWORD *)(a1 + 8);
  if (v2 == *(_DWORD *)(a1 + 16))
  {
    bzero(*(void **)a1, 8 * v2 * (uint64_t)*(int *)(a1 + 12));
  }
  else if (*(int *)(a1 + 12) >= 1)
  {
    v3 = 0;
    do
      bzero((void *)(*(_QWORD *)a1 + 8 * *(_DWORD *)(a1 + 16) * v3++), 8 * *(int *)(a1 + 8));
    while (v3 < *(_DWORD *)(a1 + 12));
  }
}

uint64_t kaldi::MatrixBase<float>::CopyFromMat<signed char>(uint64_t a1, float *a2, int a3)
{
  uint64_t result;
  int v7;
  uint64_t i;
  int v9;
  uint64_t v10;
  float v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  float v16;

  kaldi::QuantizedMatrixBase<short>::NumCols((uint64_t)a2);
  if (a3 == 111)
  {
    result = kaldi::quasar::Vocab::VocabSize((kaldi::quasar::Vocab *)a2);
    v7 = *(_DWORD *)(a1 + 8);
    if (v7 >= 1)
    {
      for (i = 0; i < v7; ++i)
      {
        if ((int)result >= 1)
        {
          v9 = 0;
          do
          {
            v10 = kaldi::QuantizedMatrixBase<signed char>::Data((uint64_t)a2);
            v11 = (float)*(char *)(v10 + (int)(kaldi::QuantizedMatrixBase<short>::NumCols((uint64_t)a2) * v9) + i)
                / a2[3];
            v7 = *(_DWORD *)(a1 + 8);
            result = *(unsigned int *)(a1 + 12);
            *(float *)(*(_QWORD *)a1 + 4 * *(_DWORD *)(a1 + 16) * v9++ + 4 * i) = v11;
          }
          while (v9 < (int)result);
        }
      }
    }
  }
  else
  {
    result = kaldi::quasar::Vocab::VocabSize((kaldi::quasar::Vocab *)a2);
    if ((int)result >= 1)
    {
      v12 = 0;
      LODWORD(v13) = *(_DWORD *)(a1 + 12);
      do
      {
        if ((int)v13 >= 1)
        {
          v14 = 0;
          do
          {
            v15 = kaldi::QuantizedMatrixBase<signed char>::Data((uint64_t)a2);
            v16 = (float)*(char *)(v15 + (int)(v12 * kaldi::QuantizedMatrixBase<short>::NumCols((uint64_t)a2)) + v14)
                / a2[3];
            result = *(unsigned int *)(a1 + 8);
            v13 = *(int *)(a1 + 12);
            *(float *)(*(_QWORD *)a1 + 4 * *(_DWORD *)(a1 + 16) * (int)v14++ + 4 * v12) = v16;
          }
          while (v14 < v13);
        }
        ++v12;
      }
      while (v12 < (int)result);
    }
  }
  return result;
}

uint64_t kaldi::MatrixBase<float>::CopyFromMat<short>(uint64_t a1, float *a2, int a3)
{
  uint64_t result;
  int v7;
  uint64_t i;
  int v9;
  uint64_t v10;
  float v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  float v16;

  kaldi::QuantizedMatrixBase<short>::NumCols((uint64_t)a2);
  if (a3 == 111)
  {
    result = kaldi::quasar::Vocab::VocabSize((kaldi::quasar::Vocab *)a2);
    v7 = *(_DWORD *)(a1 + 8);
    if (v7 >= 1)
    {
      for (i = 0; i < v7; ++i)
      {
        if ((int)result >= 1)
        {
          v9 = 0;
          do
          {
            v10 = kaldi::QuantizedMatrixBase<signed char>::Data((uint64_t)a2);
            v11 = (float)*(__int16 *)(v10
                                    + 2 * (int)(kaldi::QuantizedMatrixBase<short>::NumCols((uint64_t)a2) * v9)
                                    + 2 * i)
                / a2[3];
            v7 = *(_DWORD *)(a1 + 8);
            result = *(unsigned int *)(a1 + 12);
            *(float *)(*(_QWORD *)a1 + 4 * *(_DWORD *)(a1 + 16) * v9++ + 4 * i) = v11;
          }
          while (v9 < (int)result);
        }
      }
    }
  }
  else
  {
    result = kaldi::quasar::Vocab::VocabSize((kaldi::quasar::Vocab *)a2);
    if ((int)result >= 1)
    {
      v12 = 0;
      LODWORD(v13) = *(_DWORD *)(a1 + 12);
      do
      {
        if ((int)v13 >= 1)
        {
          v14 = 0;
          do
          {
            v15 = kaldi::QuantizedMatrixBase<signed char>::Data((uint64_t)a2);
            v16 = (float)*(__int16 *)(v15
                                    + 2 * (int)(v12 * kaldi::QuantizedMatrixBase<short>::NumCols((uint64_t)a2))
                                    + 2 * v14)
                / a2[3];
            result = *(unsigned int *)(a1 + 8);
            v13 = *(int *)(a1 + 12);
            *(float *)(*(_QWORD *)a1 + 4 * *(_DWORD *)(a1 + 16) * (int)v14++ + 4 * v12) = v16;
          }
          while (v14 < v13);
        }
        ++v12;
      }
      while (v12 < (int)result);
    }
  }
  return result;
}

uint64_t kaldi::Matrix<float>::Matrix(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5)
{
  *(_BYTE *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  kaldi::Matrix<float>::Resize((int32x2_t *)a1, a2, a3, a4, a5);
  return a1;
}

uint64_t kaldi::Matrix<float>::Matrix<signed char>(uint64_t a1, kaldi::quasar::Vocab *this)
{
  uint64_t v4;
  uint64_t v5;

  v4 = kaldi::quasar::Vocab::VocabSize(this);
  v5 = kaldi::QuantizedMatrixBase<short>::NumCols((uint64_t)this);
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_BYTE *)(a1 + 32) = 0;
  kaldi::Matrix<float>::Resize((int32x2_t *)a1, v4, v5, 0, 0);
  kaldi::MatrixBase<float>::CopyFromMat<signed char>(a1, (float *)this, 111);
  return a1;
}

void sub_1ADC52830(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(_QWORD *)v1)
  {
    if (!*(_BYTE *)(v1 + 32))
      free(*(void **)v1);
  }
  *(_BYTE *)(v1 + 32) = 0;
  *(_QWORD *)(v1 + 8) = 0;
  *(_QWORD *)(v1 + 16) = 0;
  *(_QWORD *)v1 = 0;
  _Unwind_Resume(exception_object);
}

uint64_t kaldi::Matrix<float>::~Matrix(uint64_t a1)
{
  void *v2;

  v2 = *(void **)a1;
  if (v2 && !*(_BYTE *)(a1 + 32))
    free(v2);
  *(_BYTE *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = 0;
  return a1;
}

uint64_t kaldi::Matrix<float>::Matrix<short>(uint64_t a1, kaldi::quasar::Vocab *this)
{
  uint64_t v4;
  uint64_t v5;

  v4 = kaldi::quasar::Vocab::VocabSize(this);
  v5 = kaldi::QuantizedMatrixBase<short>::NumCols((uint64_t)this);
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_BYTE *)(a1 + 32) = 0;
  kaldi::Matrix<float>::Resize((int32x2_t *)a1, v4, v5, 0, 0);
  kaldi::MatrixBase<float>::CopyFromMat<short>(a1, (float *)this, 111);
  return a1;
}

void sub_1ADC52910(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(_QWORD *)v1)
  {
    if (!*(_BYTE *)(v1 + 32))
      free(*(void **)v1);
  }
  *(_BYTE *)(v1 + 32) = 0;
  *(_QWORD *)(v1 + 8) = 0;
  *(_QWORD *)(v1 + 16) = 0;
  *(_QWORD *)v1 = 0;
  _Unwind_Resume(exception_object);
}

void kaldi::MatrixBase<float>::AddMatMat(uint64_t a1, uint64_t a2, CBLAS_TRANSPOSE __TransA, uint64_t a4, CBLAS_TRANSPOSE __TransB, float a6, float a7)
{
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;

  if (__TransA == CblasNoTrans && __TransB == CblasNoTrans)
  {
    v7 = *(_DWORD *)(a2 + 8);
    if (v7 == *(_DWORD *)(a4 + 12))
    {
      v8 = *(_DWORD *)(a2 + 12);
      if (v8 == *(_DWORD *)(a1 + 12))
      {
        v9 = *(_DWORD *)(a4 + 8);
        goto LABEL_17;
      }
    }
    goto LABEL_20;
  }
  if (__TransA != CblasTrans || __TransB != CblasNoTrans)
  {
    if (__TransA == CblasNoTrans && __TransB == CblasTrans)
    {
      v7 = *(_DWORD *)(a2 + 8);
      if (v7 == *(_DWORD *)(a4 + 8))
      {
        v8 = *(_DWORD *)(a2 + 12);
        if (v8 == *(_DWORD *)(a1 + 12))
        {
          v9 = *(_DWORD *)(a4 + 12);
LABEL_17:
          if (v9 == *(_DWORD *)(a1 + 8))
          {
            v10 = v8;
            if (!v8)
              return;
            goto LABEL_22;
          }
        }
      }
    }
LABEL_20:
    v7 = *(_DWORD *)(a2 + 8);
    v8 = *(_DWORD *)(a2 + 12);
    v9 = *(_DWORD *)(a4 + 12);
    goto LABEL_21;
  }
  v8 = *(_DWORD *)(a2 + 12);
  if (v8 != *(_DWORD *)(a4 + 12))
    goto LABEL_20;
  v7 = *(_DWORD *)(a2 + 8);
  if (v7 != *(_DWORD *)(a1 + 12))
    goto LABEL_20;
  v9 = *(_DWORD *)(a4 + 8);
  if (v9 != *(_DWORD *)(a1 + 8))
    goto LABEL_20;
LABEL_21:
  v10 = v7;
  if (!v7)
    return;
LABEL_22:
  if (__TransA == CblasNoTrans)
    v11 = v7;
  else
    v11 = v8;
  cblas_sgemm(CblasRowMajor, __TransA, __TransB, v10, v9, v11, a6, *(const float **)a2, *(_DWORD *)(a2 + 16), *(const float **)a4, *(_DWORD *)(a4 + 16), a7, *(float **)a1, *(_DWORD *)(a1 + 16));
}

uint64_t *kaldi::MatrixBase<float>::AddVecToRows<float>(uint64_t *result, uint64_t *a2, float a3)
{
  int v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v3 = *((_DWORD *)result + 3);
  if (v3 >= 1)
  {
    v4 = 0;
    v5 = *((unsigned int *)result + 2);
    v6 = *a2;
    v7 = *result;
    v8 = 4 * *((int *)result + 4);
    do
    {
      if ((int)v5 >= 1)
      {
        v9 = 0;
        do
        {
          *(float *)(v7 + v9) = *(float *)(v7 + v9) + (float)(a3 * *(float *)(v6 + v9));
          v9 += 4;
        }
        while (4 * v5 != v9);
      }
      ++v4;
      v7 += v8;
    }
    while (v4 != v3);
  }
  return result;
}

uint64_t *kaldi::MatrixBase<float>::AddVecToCols<float>(uint64_t *result, uint64_t *a2, float a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  float v10;

  v3 = *((unsigned int *)result + 3);
  if ((int)v3 >= 1)
  {
    v4 = 0;
    v5 = *((unsigned int *)result + 2);
    v6 = *a2;
    v7 = *result;
    v8 = 4 * *((int *)result + 4);
    do
    {
      if ((int)v5 >= 1)
      {
        v9 = 0;
        v10 = *(float *)(v6 + 4 * v4) * a3;
        do
        {
          *(float *)(v7 + v9) = v10 + *(float *)(v7 + v9);
          v9 += 4;
        }
        while (4 * v5 != v9);
      }
      ++v4;
      v7 += v8;
    }
    while (v4 != v3);
  }
  return result;
}

BOOL kaldi::SameDim<float>(uint64_t a1, uint64_t a2)
{
  return *(_DWORD *)(a1 + 12) == *(_DWORD *)(a2 + 12) && *(_DWORD *)(a1 + 8) == *(_DWORD *)(a2 + 8);
}

double kaldi::Matrix<float>::Matrix(uint64_t a1)
{
  double result;

  *(_BYTE *)(a1 + 32) = 0;
  result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  return result;
}

uint64_t kaldi::Matrix<float>::Matrix(uint64_t result, uint64_t a2, int a3, int a4, int a5)
{
  *(_QWORD *)(result + 24) = 0;
  *(_BYTE *)(result + 32) = 1;
  *(_QWORD *)result = a2;
  *(_DWORD *)(result + 8) = a4;
  *(_DWORD *)(result + 12) = a3;
  *(_DWORD *)(result + 16) = a5;
  *(_DWORD *)(result + 20) = a5 * a3;
  return result;
}

uint64_t *kaldi::Matrix<float>::Swap(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;

  v2 = *result;
  *result = *a2;
  *a2 = v2;
  LODWORD(v2) = *((_DWORD *)result + 2);
  *((_DWORD *)result + 2) = *((_DWORD *)a2 + 2);
  *((_DWORD *)a2 + 2) = v2;
  LODWORD(v2) = *((_DWORD *)result + 3);
  *((_DWORD *)result + 3) = *((_DWORD *)a2 + 3);
  *((_DWORD *)a2 + 3) = v2;
  LODWORD(v2) = *((_DWORD *)result + 4);
  *((_DWORD *)result + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v2;
  LODWORD(v2) = *((_DWORD *)result + 5);
  *((_DWORD *)result + 5) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = v2;
  LOBYTE(v2) = *((_BYTE *)result + 32);
  *((_BYTE *)result + 32) = *((_BYTE *)a2 + 32);
  *((_BYTE *)a2 + 32) = v2;
  return result;
}

uint64_t kaldi::Matrix<float>::Matrix(uint64_t a1, uint64_t a2, int a3)
{
  int v5;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  if (a3 == 111)
  {
    kaldi::Matrix<float>::Resize((int32x2_t *)a1, *(unsigned int *)(a2 + 12), *(unsigned int *)(a2 + 8), 0, 0);
    v5 = 111;
  }
  else
  {
    kaldi::Matrix<float>::Resize((int32x2_t *)a1, *(unsigned int *)(a2 + 8), *(unsigned int *)(a2 + 12), 0, 0);
    v5 = 112;
  }
  kaldi::MatrixBase<float>::CopyFromMat<float>((int *)a1, (int *)a2, v5);
  return a1;
}

uint64_t kaldi::Matrix<float>::Matrix(uint64_t a1, int *a2)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  kaldi::Matrix<float>::Resize((int32x2_t *)a1, a2[3], a2[2], 1, a2[2] == a2[4]);
  kaldi::MatrixBase<float>::CopyFromMat<float>((int *)a1, a2, 111);
  return a1;
}

uint64_t kaldi::Matrix<float>::Matrix(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_BYTE *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  v4 = *a2;
  if (*a2)
  {
    v5 = *(unsigned int *)(v4 + 8);
    v6 = *(unsigned int *)(v4 + 12);
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  kaldi::Matrix<float>::Resize((int32x2_t *)a1, v5, v6, 1, 0);
  kaldi::CompressedMatrix::CopyToMat<float>(a2, a1);
  return a1;
}

void kaldi::Matrix<float>::Read(int32x2_t *a1, uint64_t *a2, uint64_t a3, int a4, uint64_t a5)
{
  int v6;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BOOL4 v17;
  const std::string::value_type *v18;
  int v19;
  size_t v20;
  size_t v21;
  std::string::size_type size;
  int v23;
  std::string *v24;
  void **p_s1;
  uint64_t v26;
  unsigned __int8 *v27;
  std::string *v28;
  uint64_t v29;
  _QWORD *v30;
  unsigned int v31;
  unsigned int v32;
  unint64_t v33;
  _DWORD *v34;
  size_t v35;
  size_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  char *v40;
  int v41;
  _DWORD *v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  char *v47;
  uint64_t *v48;
  char *v49;
  char *v50;
  uint64_t v51;
  int v52;
  const char *v53;
  char **v54;
  const char *v55;
  char **v56;
  char *v57;
  _DWORD *v58;
  int v59;
  _QWORD *v60;
  void *v61;
  uint64_t v62;
  char v63;
  _QWORD *v64;
  std::string *v65;
  std::string::size_type v66;
  _QWORD *v67;
  int v68;
  int v69;
  std::string *v70;
  _BYTE *v71;
  _QWORD *v72;
  std::string *v73;
  std::string::size_type v74;
  _QWORD *v75;
  _QWORD *v76;
  void *v77;
  size_t v78;
  _QWORD *v79;
  int v80;
  _QWORD *v81;
  void *v82;
  size_t v83;
  _QWORD *v84;
  _QWORD *v85;
  int v86;
  uint64_t v87;
  int v88;
  __int32 v89;
  __int32 v90;
  int v91;
  int v92;
  _QWORD *v93;
  uint64_t v94;
  _DWORD *v95;
  _QWORD *v96;
  size_t v97;
  unint64_t v98;
  uint64_t v99;
  void *v100;
  int v101;
  unsigned int v102;
  _DWORD *v104;
  size_t v105;
  _BYTE *v106;
  _QWORD *v107;
  const char *v108;
  uint64_t v109;
  unint64_t v110;
  unint64_t v111;
  char *v112;
  uint64_t *v113;
  char *v114;
  char *v115;
  char *v116;
  uint64_t v117;
  unint64_t v118;
  uint64_t v119;
  unint64_t v120;
  unint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  _DWORD *v126;
  uint64_t v127;
  uint64_t v128;
  _QWORD *v129;
  _QWORD *v130;
  char *v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  void *__s1;
  size_t __n;
  int64_t v137;
  void *v138[2];
  __int128 v139;
  char v140;
  void *__p;
  char v142;
  uint64_t v143;
  std::string v144;
  __int128 v145;
  __int128 v146;
  char v147;
  uint64_t v148;
  uint64_t v149;

  v6 = a3;
  v149 = *MEMORY[0x1E0C80C00];
  if (a4)
  {
    v140 = 0;
    *(_OWORD *)v138 = 0u;
    v139 = 0u;
    kaldi::Matrix<float>::Read(v138, a2, a3, 0, a5, 0.0);
    if (a1[1].i32[1])
    {
      if ((void *)a1[1] != v138[1])
      {
        if (HIDWORD(v138[1]))
        {
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v145);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v145, (uint64_t)"Matrix::Read, size mismatch ", 28);
          v9 = (_QWORD *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)", ", 2);
          v10 = (_QWORD *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)" vs. ", 5);
          v11 = (_QWORD *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)", ", 2);
          std::ostream::operator<<();
          kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v145);
        }
        goto LABEL_15;
      }
    }
    else
    {
      kaldi::Matrix<float>::Resize(a1, HIDWORD(v138[1]), LODWORD(v138[1]), 0, 0);
    }
    kaldi::MatrixBase<float>::AddMat((uint64_t)a1, (uint64_t)v138, 111, 1.0, 1.0);
LABEL_15:
    if (v138[0])
    {
      if (!v140)
        free(v138[0]);
    }
    return;
  }
  std::istream::tellg();
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v138);
  if (v6)
  {
    v12 = kaldi::Peek(a2, 1);
    if (v12 == 68)
    {
      if (a5)
      {
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v145);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v145, (uint64_t)"Can not map into the wrong matrix data type", 43);
        kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v145);
      }
      v16 = a1[1].u32[0];
      v15 = a1[1].u32[1];
      v145 = 0u;
      v146 = 0u;
      v147 = 0;
      kaldi::Matrix<double>::Resize((int32x2_t *)&v145, v15, v16, 0, 0);
      kaldi::Matrix<double>::Read((int32x2_t *)&v145, a2, 1, 0, 0);
      kaldi::Matrix<float>::Resize(a1, HIDWORD(v145), DWORD2(v145), 0, 0);
      kaldi::MatrixBase<float>::CopyFromMat<double>((uint64_t)a1, (uint64_t)&v145, 111);
      if ((_QWORD)v145 && !v147)
        free((void *)v145);
      goto LABEL_163;
    }
    if (v12 == 67)
    {
      *(_QWORD *)&v145 = 0;
      BYTE8(v145) = 0;
      kaldi::CompressedMatrix::Read((uint64_t)&v145, a2, 1, a5);
      if ((_QWORD)v145)
      {
        v13 = *(unsigned int *)(v145 + 8);
        v14 = *(unsigned int *)(v145 + 12);
      }
      else
      {
        v13 = 0;
        v14 = 0;
      }
      kaldi::Matrix<float>::Resize(a1, v13, v14, 0, 0);
      kaldi::CompressedMatrix::CopyToMat<float>((uint64_t *)&v145, (uint64_t)a1);
      kaldi::CompressedMatrix::Destroy((kaldi::CompressedMatrix *)&v145);
      goto LABEL_163;
    }
    memset(&v144, 0, sizeof(v144));
    std::string::append(&v144, "F");
    v17 = a5 != 0;
    if (a5)
      v18 = "N";
    else
      v18 = "M";
    std::string::append(&v144, v18);
    __s1 = 0;
    __n = 0;
    v137 = 0;
    kaldi::ReadToken(a2, 1, (uint64_t)&__s1);
    v19 = SHIBYTE(v137);
    v20 = __n;
    if (v137 >= 0)
      v21 = HIBYTE(v137);
    else
      v21 = __n;
    size = HIBYTE(v144.__r_.__value_.__r.__words[2]);
    v23 = SHIBYTE(v144.__r_.__value_.__r.__words[2]);
    if ((v144.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      size = v144.__r_.__value_.__l.__size_;
    if (v21 == size)
    {
      if ((v144.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v24 = &v144;
      else
        v24 = (std::string *)v144.__r_.__value_.__r.__words[0];
      if (v137 < 0)
      {
        if (!memcmp(__s1, v24, __n))
          goto LABEL_179;
        goto LABEL_168;
      }
      if (!HIBYTE(v137))
        goto LABEL_179;
      p_s1 = &__s1;
      v26 = HIBYTE(v137);
      while (*(unsigned __int8 *)p_s1 == v24->__r_.__value_.__s.__data_[0])
      {
        p_s1 = (void **)((char *)p_s1 + 1);
        v24 = (std::string *)((char *)v24 + 1);
        if (!--v26)
          goto LABEL_179;
      }
    }
    if ((v137 & 0x8000000000000000) == 0)
    {
      if (HIBYTE(v137) != 2)
        goto LABEL_181;
      v27 = (unsigned __int8 *)&__s1;
LABEL_170:
      v69 = *v27;
      v70 = (std::string *)v144.__r_.__value_.__r.__words[0];
      if (v23 >= 0)
        v70 = &v144;
      if (v69 == v70->__r_.__value_.__s.__data_[0])
      {
        v71 = __s1;
        if (v19 >= 0)
          v71 = &__s1;
        if (v71[1] == 78)
        {
          if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
          {
            kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v145);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v145, (uint64_t)"Reading aligned matrix as a stream", 34);
            kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)&v145);
          }
          v17 = 1;
LABEL_179:
          LODWORD(v131) = 0;
          v134 = 0;
          kaldi::ReadBasicType<int>(a2, 1, (uint64_t)&v131);
          kaldi::ReadBasicType<int>(a2, 1, (uint64_t)&v134 + 4);
          if (v17)
          {
            kaldi::ReadBasicType<int>(a2, 1, (uint64_t)&v134);
            fst::AlignInput();
          }
          else
          {
            LODWORD(v134) = HIDWORD(v134);
          }
          v86 = (int)v131;
          if (a5)
          {
            a1[1].i32[0] = HIDWORD(v134);
            a1[1].i32[1] = v86;
            a1[2].i32[0] = v134;
            if (*(_QWORD *)a1 && !a1[4].i8[0])
              free(*(void **)a1);
            std::istream::tellg();
            *a1 = (int32x2_t)(a5 + v148);
            a1[4].i8[0] = 1;
            std::istream::seekg();
            v87 = *a2;
            if ((*((_BYTE *)a2 + *(_QWORD *)(*a2 - 24) + 32) & 5) != 0)
            {
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v138, (uint64_t)": Seeking failed", 16);
LABEL_194:
              v80 = 2;
              goto LABEL_195;
            }
          }
          else
          {
            v88 = HIDWORD(v134);
            if (__PAIR64__(v131, HIDWORD(v134)) == *(_QWORD *)&a1[1])
            {
              v89 = HIDWORD(v134);
            }
            else
            {
              kaldi::Matrix<float>::Resize(a1, v131, HIDWORD(v134), 1, 0);
              v89 = a1[1].i32[0];
              v88 = HIDWORD(v134);
              v86 = (int)v131;
            }
            v90 = a1[2].i32[0];
            v91 = v134;
            if (v90 == v89 && v90 == (_DWORD)v134 && v88 * v86)
            {
              std::istream::read();
              v87 = *a2;
              if ((*((_BYTE *)a2 + *(_QWORD *)(*a2 - 24) + 32) & 5) != 0)
              {
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v138, (uint64_t)": Reading whole matrix failed", 29);
                goto LABEL_194;
              }
            }
            else
            {
              if (v86 > 0)
              {
                v92 = 0;
                v93 = a2 + 4;
                v94 = 29;
                while (1)
                {
                  std::istream::read();
                  v87 = *a2;
                  if ((*((_BYTE *)v93 + *(_QWORD *)(*a2 - 24)) & 5) != 0)
                  {
                    v107 = v138;
                    v108 = ": Reading a matrix row failed";
                    goto LABEL_269;
                  }
                  if (v91 != v88)
                  {
                    std::istream::seekg();
                    v87 = *a2;
                    if ((*((_BYTE *)v93 + *(_QWORD *)(*a2 - 24)) & 5) != 0)
                      break;
                  }
                  if (++v92 >= (int)v131)
                    goto LABEL_250;
                }
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v138, (uint64_t)": Seek for padding ", 19);
                v107 = (_QWORD *)std::ostream::operator<<();
                v108 = " failed";
                v94 = 7;
LABEL_269:
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v107, (uint64_t)v108, v94);
                goto LABEL_194;
              }
              v87 = *a2;
            }
          }
LABEL_250:
          v101 = *(_DWORD *)((char *)a2 + *(_QWORD *)(v87 - 24) + 32);
          v80 = 1;
          if ((v101 & 2) == 0)
          {
            if ((v101 & 5) != 0)
              v80 = 2;
            else
              v80 = 1;
          }
LABEL_195:
          if (SHIBYTE(v137) < 0)
            operator delete(__s1);
          if (SHIBYTE(v144.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v144.__r_.__value_.__l.__data_);
          if (v80 != 2)
            goto LABEL_163;
LABEL_200:
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v145);
          v81 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v145, (uint64_t)"Failed to read matrix from stream.  ", 36);
          std::stringbuf::str();
          if (v137 >= 0)
            v82 = &__s1;
          else
            v82 = __s1;
          if (v137 >= 0)
            v83 = HIBYTE(v137);
          else
            v83 = __n;
          v84 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v81, (uint64_t)v82, v83);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v84, (uint64_t)" File position at start is ", 27);
          v85 = (_QWORD *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v85, (uint64_t)", currently ", 12);
          std::istream::tellg();
          std::ostream::operator<<();
          if (SHIBYTE(v137) < 0)
            operator delete(__s1);
          kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v145);
        }
      }
LABEL_181:
      v72 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v138, (uint64_t)": Expected token ", 17);
      if ((v144.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v73 = &v144;
      else
        v73 = (std::string *)v144.__r_.__value_.__r.__words[0];
      if ((v144.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v74 = HIBYTE(v144.__r_.__value_.__r.__words[2]);
      else
        v74 = v144.__r_.__value_.__l.__size_;
      v75 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v72, (uint64_t)v73, v74);
      v76 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v75, (uint64_t)", got ", 6);
      if (v137 >= 0)
        v77 = &__s1;
      else
        v77 = __s1;
      if (v137 >= 0)
        v78 = HIBYTE(v137);
      else
        v78 = __n;
      v79 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v76, (uint64_t)v77, v78);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v79, (uint64_t)". This could mean that you're trying to memory map an unaligned file.", 69);
      goto LABEL_194;
    }
LABEL_168:
    if (v20 != 2)
      goto LABEL_181;
    v27 = (unsigned __int8 *)__s1;
    goto LABEL_170;
  }
  memset(&v144, 0, sizeof(v144));
  std::operator>>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a2, (uint64_t)&v144);
  if ((*((_BYTE *)a2 + *(_QWORD *)(*a2 - 24) + 32) & 5) != 0)
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v138, (uint64_t)": Expected \"[\", got EOF", 23);
LABEL_159:
    v68 = 2;
    goto LABEL_160;
  }
  if (SHIBYTE(v144.__r_.__value_.__r.__words[2]) < 0)
  {
    if (v144.__r_.__value_.__l.__size_ != 1)
    {
      if (v144.__r_.__value_.__l.__size_ == 2 && *(_WORD *)v144.__r_.__value_.__l.__data_ == 23899)
        goto LABEL_216;
      goto LABEL_152;
    }
    v28 = (std::string *)v144.__r_.__value_.__r.__words[0];
  }
  else
  {
    if (HIBYTE(v144.__r_.__value_.__r.__words[2]) != 1)
    {
      if (HIBYTE(v144.__r_.__value_.__r.__words[2]) == 2 && LOWORD(v144.__r_.__value_.__l.__data_) == 23899)
      {
LABEL_216:
        kaldi::Matrix<float>::Resize(a1, 0, 0, 0, 0);
        v68 = 1;
        goto LABEL_160;
      }
LABEL_152:
      v64 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v138, (uint64_t)": Expected \"[\", got \"", 21);
      if ((v144.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v65 = &v144;
      else
        v65 = (std::string *)v144.__r_.__value_.__r.__words[0];
      if ((v144.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v66 = HIBYTE(v144.__r_.__value_.__r.__words[2]);
      else
        v66 = v144.__r_.__value_.__l.__size_;
      v67 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v64, (uint64_t)v65, v66);
      LOBYTE(v145) = 34;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v67, (uint64_t)&v145, 1);
      goto LABEL_159;
    }
    v28 = &v144;
  }
  if (v28->__r_.__value_.__s.__data_[0] != 91)
    goto LABEL_152;
  __s1 = 0;
  __n = 0;
  v137 = 0;
  v29 = operator new();
  v30 = a2 + 4;
  *(_QWORD *)v29 = 0;
  *(_QWORD *)(v29 + 8) = 0;
  *(_QWORD *)(v29 + 16) = 0;
  do
  {
    v31 = std::istream::peek();
    if (v31 == -1)
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v138, (uint64_t)"Got EOF while reading matrix data", 33);
      break;
    }
    v32 = v31 << 24;
    if (v31 << 24 == 167772160 || v32 == 989855744)
    {
      std::istream::get();
      if (*(_QWORD *)(v29 + 8) != *(_QWORD *)v29)
      {
        v35 = __n;
        if (__n >= v137)
        {
          v37 = (uint64_t)(__n - (_QWORD)__s1) >> 3;
          if ((unint64_t)(v37 + 1) >> 61)
            goto LABEL_305;
          v38 = (v137 - (uint64_t)__s1) >> 2;
          if (v38 <= v37 + 1)
            v38 = v37 + 1;
          if ((unint64_t)(v137 - (_QWORD)__s1) >= 0x7FFFFFFFFFFFFFF8)
            v39 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v39 = v38;
          if (v39)
            v40 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)&v137, v39);
          else
            v40 = 0;
          v48 = (uint64_t *)&v40[8 * v37];
          *v48 = v29;
          v36 = (size_t)(v48 + 1);
          v50 = (char *)__s1;
          v49 = (char *)__n;
          if ((void *)__n != __s1)
          {
            do
            {
              v51 = *((_QWORD *)v49 - 1);
              v49 -= 8;
              *--v48 = v51;
            }
            while (v49 != v50);
            v49 = (char *)__s1;
          }
          __s1 = v48;
          __n = v36;
          v137 = (int64_t)&v40[8 * v39];
          if (v49)
            operator delete(v49);
        }
        else
        {
          *(_QWORD *)__n = v29;
          v36 = v35 + 8;
        }
        __n = v36;
        v29 = operator new();
        *(_QWORD *)v29 = 0;
        *(_QWORD *)(v29 + 8) = 0;
        *(_QWORD *)(v29 + 16) = 0;
        std::vector<float>::reserve((void **)v29, (uint64_t)(*(_QWORD *)(*(_QWORD *)(__n - 8) + 8) - **(_QWORD **)(__n - 8)) >> 2);
      }
      goto LABEL_98;
    }
    if (v32 == 1560281088)
    {
      std::istream::get();
      v102 = std::istream::peek() << 24;
      if (v102 != 167772160)
      {
        if (v102 != 218103808)
          goto LABEL_258;
        std::istream::get();
      }
      std::istream::get();
LABEL_258:
      if ((*((_BYTE *)a2 + *(_QWORD *)(*a2 - 24) + 32) & 5) != 0 && kaldi::g_kaldi_verbose_level >= -1)
      {
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v145);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v145, (uint64_t)"After end of matrix data, read error.", 37);
        kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v145);
      }
      v104 = *(_DWORD **)v29;
      if (*(_QWORD *)v29 == *(_QWORD *)(v29 + 8))
      {
        if (v104)
        {
          *(_QWORD *)(v29 + 8) = v104;
          operator delete(v104);
        }
        MEMORY[0x1AF44D190](v29, 0x80C40D6874129);
        v106 = (_BYTE *)__n;
      }
      else
      {
        v105 = __n;
        if (__n >= v137)
        {
          v109 = (uint64_t)(__n - (_QWORD)__s1) >> 3;
          if ((unint64_t)(v109 + 1) >> 61)
LABEL_305:
            std::vector<int>::__throw_length_error[abi:ne180100]();
          v110 = (v137 - (uint64_t)__s1) >> 2;
          if (v110 <= v109 + 1)
            v110 = v109 + 1;
          if ((unint64_t)(v137 - (_QWORD)__s1) >= 0x7FFFFFFFFFFFFFF8)
            v111 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v111 = v110;
          if (v111)
            v112 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)&v137, v111);
          else
            v112 = 0;
          v113 = (uint64_t *)&v112[8 * v109];
          v114 = &v112[8 * v111];
          *v113 = v29;
          v106 = v113 + 1;
          v116 = (char *)__s1;
          v115 = (char *)__n;
          if ((void *)__n != __s1)
          {
            do
            {
              v117 = *((_QWORD *)v115 - 1);
              v115 -= 8;
              *--v113 = v117;
            }
            while (v115 != v116);
            v115 = (char *)__s1;
          }
          __s1 = v113;
          __n = (size_t)v106;
          v137 = (int64_t)v114;
          if (v115)
            operator delete(v115);
        }
        else
        {
          *(_QWORD *)__n = v29;
          v106 = (_BYTE *)(v105 + 8);
        }
        __n = (size_t)v106;
      }
      if (__s1 == v106)
      {
        kaldi::Matrix<float>::Resize(a1, 0, 0, 0, 0);
      }
      else
      {
        v118 = v106 - (_BYTE *)__s1;
        v119 = (unint64_t)(v106 - (_BYTE *)__s1) >> 3;
        v120 = *(_QWORD *)(*(_QWORD *)__s1 + 8) - **(_QWORD **)__s1;
        v121 = v120 >> 2;
        kaldi::Matrix<float>::Resize(a1, v119, v120 >> 2, 0, 0);
        if ((int)v119 >= 1)
        {
          v122 = 0;
          v123 = (v118 >> 3);
          v124 = (v120 >> 2);
          v68 = 1;
          while (1)
          {
            v125 = *((_QWORD *)__s1 + v122);
            v126 = *(_DWORD **)v125;
            if (((*(_QWORD *)(v125 + 8) - *(_QWORD *)v125) >> 2) != (_DWORD)v121)
            {
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v138, (uint64_t)"Matrix has inconsistent #cols: ", 31);
              v129 = (_QWORD *)std::ostream::operator<<();
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v129, (uint64_t)" vs.", 4);
              v130 = (_QWORD *)std::ostream::operator<<();
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v130, (uint64_t)" (processing row", 16);
              std::ostream::operator<<();
              goto LABEL_233;
            }
            if ((int)v121 >= 1)
              break;
            if (v126)
              goto LABEL_298;
LABEL_299:
            MEMORY[0x1AF44D190](v125, 0x80C40D6874129);
            if (++v122 == v123)
              goto LABEL_245;
          }
          v127 = 0;
          v128 = *(_QWORD *)a1 + 4 * a1[2].i32[0] * (int)v122;
          do
          {
            *(_DWORD *)(v128 + 4 * v127) = v126[v127];
            ++v127;
          }
          while (v124 != v127);
LABEL_298:
          *(_QWORD *)(v125 + 8) = v126;
          operator delete(v126);
          goto LABEL_299;
        }
      }
      v68 = 1;
      goto LABEL_245;
    }
    if (v31 - 48 <= 9)
    {
      LODWORD(v145) = 0;
      MEMORY[0x1AF44CB0C](a2, &v145);
      if ((*((_BYTE *)v30 + *(_QWORD *)(*a2 - 24)) & 5) != 0)
        goto LABEL_267;
      v33 = *(_QWORD *)(v29 + 16);
      v34 = *(_DWORD **)(v29 + 8);
      if ((unint64_t)v34 >= v33)
      {
        v42 = *(_DWORD **)v29;
        v43 = ((uint64_t)v34 - *(_QWORD *)v29) >> 2;
        v44 = v43 + 1;
        if ((unint64_t)(v43 + 1) >> 62)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v45 = v33 - (_QWORD)v42;
        if (v45 >> 1 > v44)
          v44 = v45 >> 1;
        if ((unint64_t)v45 >= 0x7FFFFFFFFFFFFFFCLL)
          v46 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v46 = v44;
        if (v46)
        {
          v47 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v29 + 16, v46);
          v42 = *(_DWORD **)v29;
          v34 = *(_DWORD **)(v29 + 8);
        }
        else
        {
          v47 = 0;
        }
        v57 = &v47[4 * v43];
        *(_DWORD *)v57 = v145;
        v58 = v57 + 4;
        while (v34 != v42)
        {
          v59 = *--v34;
          *((_DWORD *)v57 - 1) = v59;
          v57 -= 4;
        }
        *(_QWORD *)v29 = v57;
        *(_QWORD *)(v29 + 8) = v58;
        *(_QWORD *)(v29 + 16) = &v47[4 * v46];
        if (v42)
          operator delete(v42);
        *(_QWORD *)(v29 + 8) = v58;
      }
      else
      {
        *v34 = v145;
        *(_QWORD *)(v29 + 8) = v34 + 1;
      }
      goto LABEL_98;
    }
    if (v31 == 45)
    {
      std::istream::get();
      if (std::istream::peek() - 48 <= 9)
      {
        LODWORD(v145) = 0;
        MEMORY[0x1AF44CB0C](a2, &v145);
        if ((*((_BYTE *)v30 + *(_QWORD *)(*a2 - 24)) & 5) != 0)
        {
LABEL_267:
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v138, (uint64_t)"Stream failure/EOF while reading matrix data.", 45);
          break;
        }
        *(float *)&v131 = -*(float *)&v145;
        std::vector<float>::push_back[abi:ne180100](v29, &v131);
        goto LABEL_98;
      }
      v131 = 0;
      v132 = 0;
      v133 = 0;
      std::operator>>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a2, (uint64_t)&v131);
      if (SHIBYTE(v133) < 0)
      {
        v53 = v131;
        if (!strcasecmp(v131, "inf"))
          goto LABEL_127;
        v54 = (char **)v53;
      }
      else
      {
        if (!strcasecmp((const char *)&v131, "inf"))
          goto LABEL_127;
        v53 = (const char *)&v131;
        v54 = &v131;
      }
      if (!strcasecmp((const char *)v54, "infinity"))
      {
LABEL_127:
        LODWORD(v145) = -8388608;
        std::vector<float>::push_back[abi:ne180100](v29, &v145);
        if (kaldi::g_kaldi_verbose_level >= -1)
        {
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v145);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v145, (uint64_t)"Reading negative infinite value into matrix.", 44);
          kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v145);
        }
        goto LABEL_146;
      }
      if (strcasecmp(v53, "nan"))
      {
        v60 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v138, (uint64_t)"Expecting numeric matrix data, got ", 35);
        if (v133 >= 0)
          v61 = &v131;
        else
          v61 = v131;
        if (v133 >= 0)
          v62 = HIBYTE(v133);
        else
          v62 = v132;
LABEL_139:
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v60, (uint64_t)v61, v62);
        v63 = 0;
        v52 = 8;
        goto LABEL_147;
      }
      LODWORD(v145) = -4194304;
      std::vector<float>::push_back[abi:ne180100](v29, &v145);
      if (kaldi::g_kaldi_verbose_level >= -1)
      {
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v145);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v145, (uint64_t)"Reading negative NaN value into matrix.", 39);
        kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v145);
      }
    }
    else
    {
      if (v31 <= 0x7F)
        v41 = *(_DWORD *)(MEMORY[0x1E0C80978] + 4 * v31 + 60) & 0x4000;
      else
        v41 = __maskrune(v31, 0x4000uLL);
      if (v41)
      {
        std::istream::get();
LABEL_98:
        v52 = 0;
        continue;
      }
      v131 = 0;
      v132 = 0;
      v133 = 0;
      std::operator>>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a2, (uint64_t)&v131);
      if (SHIBYTE(v133) < 0)
      {
        v55 = v131;
        if (!strcasecmp(v131, "inf"))
          goto LABEL_140;
        v56 = (char **)v55;
      }
      else
      {
        if (!strcasecmp((const char *)&v131, "inf"))
          goto LABEL_140;
        v55 = (const char *)&v131;
        v56 = &v131;
      }
      if (!strcasecmp((const char *)v56, "infinity"))
      {
LABEL_140:
        LODWORD(v145) = 2139095040;
        std::vector<float>::push_back[abi:ne180100](v29, &v145);
        if (kaldi::g_kaldi_verbose_level >= -1)
        {
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v145);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v145, (uint64_t)"Reading infinite value into matrix.", 35);
          kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v145);
        }
        goto LABEL_146;
      }
      if (strcasecmp(v55, "nan"))
      {
        v60 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v138, (uint64_t)"Expecting numeric matrix data, got ", 35);
        if (v133 >= 0)
          v61 = &v131;
        else
          v61 = v131;
        if (v133 >= 0)
          v62 = HIBYTE(v133);
        else
          v62 = v132;
        goto LABEL_139;
      }
      LODWORD(v145) = 2143289344;
      std::vector<float>::push_back[abi:ne180100](v29, &v145);
      if (kaldi::g_kaldi_verbose_level >= -1)
      {
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v145);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v145, (uint64_t)"Reading NaN value into matrix.", 30);
        kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v145);
      }
    }
LABEL_146:
    v52 = 0;
    v63 = 1;
LABEL_147:
    if (SHIBYTE(v133) < 0)
    {
      operator delete(v131);
      if ((v63 & 1) != 0)
        goto LABEL_98;
    }
    else if ((v63 & 1) != 0)
    {
      goto LABEL_98;
    }
  }
  while (!v52);
LABEL_233:
  if (v29)
  {
    v95 = *(_DWORD **)v29;
    if (*(_QWORD *)v29)
    {
      *(_QWORD *)(v29 + 8) = v95;
      operator delete(v95);
    }
    MEMORY[0x1AF44D190](v29, 0x80C40D6874129);
  }
  v96 = __s1;
  v97 = __n;
  if ((void *)__n == __s1)
  {
    v68 = 0;
  }
  else
  {
    v98 = 0;
    do
    {
      v99 = v96[v98];
      if (v99)
      {
        v100 = *(void **)v99;
        if (*(_QWORD *)v99)
        {
          *(_QWORD *)(v99 + 8) = v100;
          operator delete(v100);
        }
        MEMORY[0x1AF44D190](v99, 0x80C40D6874129);
        v96 = __s1;
        v97 = __n;
      }
      ++v98;
    }
    while (v98 < (uint64_t)(v97 - (_QWORD)v96) >> 3);
    v68 = 0;
LABEL_245:
    v96 = __s1;
  }
  if (v96)
  {
    __n = (size_t)v96;
    operator delete(v96);
  }
LABEL_160:
  if (SHIBYTE(v144.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v144.__r_.__value_.__l.__data_);
  if ((v68 | 2) == 2)
    goto LABEL_200;
LABEL_163:
  v138[0] = *(void **)MEMORY[0x1E0DE4F60];
  *(void **)((char *)v138 + *((_QWORD *)v138[0] - 3)) = *(void **)(MEMORY[0x1E0DE4F60] + 24);
  v138[1] = (void *)(MEMORY[0x1E0DE4FB8] + 16);
  if (v142 < 0)
    operator delete(__p);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1AF44D094](&v143);
}

void sub_1ADC541B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  void *a67;
  char a71;

  if (a67)
  {
    if (!a71)
      free(a67);
  }
  JUMPOUT(0x1ADC54244);
}

void sub_1ADC541D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a67;

  kaldi::CompressedMatrix::Destroy((kaldi::CompressedMatrix *)&a67);
  JUMPOUT(0x1ADC54244);
}

void sub_1ADC54200()
{
  JUMPOUT(0x1ADC54244);
}

void sub_1ADC54208(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

void kaldi::MatrixBase<float>::AddMat(uint64_t a1, uint64_t a2, int a3, float a4, float a5)
{
  uint64_t v9;
  uint64_t v10;
  const float *v11;
  float *v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  const float *v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  const float *v24;
  float *v25;
  uint64_t v26;
  uint64_t v27;
  float *v28;
  float v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  const float *v33;
  float *v34;
  uint64_t v35;
  uint64_t v36;
  float *v37;
  float v38;

  if (a2 == a1)
  {
    if (a3 == 111)
    {
      kaldi::MatrixBase<float>::Scale(a2, a4 + a5);
    }
    else
    {
      v18 = *(unsigned int *)(a2 + 12);
      v19 = *(const float **)a2;
      if (a4 == 1.0 && a5 == 1.0)
      {
        if ((int)v18 >= 1)
        {
          v30 = 0;
          v31 = *(int *)(a2 + 16);
          v32 = 4 * v31;
          v33 = *(const float **)a2;
          v34 = *(float **)a2;
          do
          {
            if (v30)
            {
              v35 = 0;
              v36 = v30 * v31;
              v37 = v34;
              do
              {
                v38 = v33[v35] + *v37;
                *v37 = v38;
                v33[v35++] = v38;
                v37 = (float *)((char *)v37 + v32);
              }
              while (v30 != v35);
            }
            else
            {
              v36 = 0;
            }
            v19[v36 + v30] = v19[v36 + v30] + v19[v36 + v30];
            ++v30;
            ++v34;
            v33 = (const float *)((char *)v33 + v32);
          }
          while (v30 != v18);
        }
      }
      else if ((int)v18 >= 1)
      {
        v21 = 0;
        v22 = *(int *)(a2 + 16);
        v23 = 4 * v22;
        v24 = *(const float **)a2;
        v25 = *(float **)a2;
        do
        {
          if (v21)
          {
            v26 = 0;
            v27 = v21 * v22;
            v28 = v25;
            do
            {
              v29 = v24[v26];
              v24[v26] = (float)(v29 * a5) + (float)(a4 * *v28);
              *v28 = (float)(*v28 * a5) + (float)(a4 * v29);
              ++v26;
              v28 = (float *)((char *)v28 + v23);
            }
            while (v21 != v26);
          }
          else
          {
            v27 = 0;
          }
          v19[v27 + v21] = (float)(a4 + a5) * v19[v27 + v21];
          ++v21;
          ++v25;
          v24 = (const float *)((char *)v24 + v23);
        }
        while (v21 != v18);
      }
    }
  }
  else
  {
    if (a5 != 1.0)
      kaldi::MatrixBase<float>::Scale(a1, a5);
    v9 = *(int *)(a2 + 16);
    v10 = *(int *)(a1 + 16);
    v11 = *(const float **)a2;
    v12 = *(float **)a1;
    if (a3 == 111)
    {
      if (*(int *)(a2 + 12) >= 1)
      {
        v13 = 0;
        v14 = 4 * v10;
        v15 = 4 * v9;
        do
        {
          cblas_saxpy(*(_DWORD *)(a1 + 8), a4, v11, 1, v12, 1);
          ++v13;
          v12 = (float *)((char *)v12 + v14);
          v11 = (const float *)((char *)v11 + v15);
        }
        while (v13 < *(_DWORD *)(a1 + 12));
      }
    }
    else if (*(int *)(a2 + 8) >= 1)
    {
      v16 = 0;
      v17 = 4 * v10;
      do
      {
        cblas_saxpy(*(_DWORD *)(a1 + 8), a4, v11, v9, v12, 1);
        ++v16;
        ++v11;
        v12 = (float *)((char *)v12 + v17);
      }
      while (v16 < *(_DWORD *)(a1 + 12));
    }
  }
}

void kaldi::Matrix<double>::Read(int32x2_t *a1, uint64_t *a2, uint64_t a3, int a4, uint64_t a5)
{
  int v6;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  double v17;
  _BOOL4 v18;
  const std::string::value_type *v19;
  int v20;
  size_t v21;
  size_t v22;
  std::string::size_type size;
  int v24;
  std::string *v25;
  void **p_s1;
  uint64_t v27;
  unsigned __int8 *v28;
  std::string *v29;
  uint64_t v30;
  _QWORD *v31;
  unsigned int v32;
  unsigned int v33;
  unint64_t v34;
  _QWORD *v35;
  size_t v36;
  size_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  char *v41;
  int v42;
  _QWORD *v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  char *v48;
  uint64_t *v49;
  char *v50;
  char *v51;
  uint64_t v52;
  int v53;
  const char *v54;
  char **v55;
  const char *v56;
  char **v57;
  char *v58;
  _QWORD *v59;
  uint64_t v60;
  _QWORD *v61;
  void *v62;
  uint64_t v63;
  char v64;
  _QWORD *v65;
  std::string *v66;
  std::string::size_type v67;
  _QWORD *v68;
  int v69;
  int v70;
  std::string *v71;
  _BYTE *v72;
  _QWORD *v73;
  std::string *v74;
  std::string::size_type v75;
  _QWORD *v76;
  _QWORD *v77;
  void *v78;
  size_t v79;
  _QWORD *v80;
  int v81;
  _QWORD *v82;
  void *v83;
  size_t v84;
  _QWORD *v85;
  _QWORD *v86;
  int v87;
  uint64_t v88;
  int v89;
  __int32 v90;
  __int32 v91;
  int v92;
  int v93;
  _QWORD *v94;
  uint64_t v95;
  _QWORD *v96;
  _QWORD *v97;
  size_t v98;
  unint64_t v99;
  uint64_t v100;
  void *v101;
  int v102;
  unsigned int v103;
  _QWORD *v105;
  size_t v106;
  _BYTE *v107;
  _QWORD *v108;
  const char *v109;
  uint64_t v110;
  unint64_t v111;
  unint64_t v112;
  char *v113;
  uint64_t *v114;
  char *v115;
  char *v116;
  char *v117;
  uint64_t v118;
  unint64_t v119;
  uint64_t v120;
  unint64_t v121;
  unint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  _QWORD *v127;
  uint64_t v128;
  uint64_t v129;
  _QWORD *v130;
  _QWORD *v131;
  char *v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  void *__s1;
  size_t __n;
  int64_t v138;
  void *v139[2];
  __int128 v140;
  char v141;
  void *__p;
  char v143;
  uint64_t v144;
  std::string v145;
  __int128 v146;
  __int128 v147;
  char v148;
  uint64_t v149;
  uint64_t v150;

  v6 = a3;
  v150 = *MEMORY[0x1E0C80C00];
  if (a4)
  {
    v141 = 0;
    *(_OWORD *)v139 = 0u;
    v140 = 0u;
    kaldi::Matrix<double>::Read(v139, a2, a3, 0, a5);
    if (a1[1].i32[1])
    {
      if ((void *)a1[1] != v139[1])
      {
        if (HIDWORD(v139[1]))
        {
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v146);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v146, (uint64_t)"Matrix::Read, size mismatch ", 28);
          v9 = (_QWORD *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)", ", 2);
          v10 = (_QWORD *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)" vs. ", 5);
          v11 = (_QWORD *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)", ", 2);
          std::ostream::operator<<();
          kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v146);
        }
        goto LABEL_15;
      }
    }
    else
    {
      kaldi::Matrix<double>::Resize(a1, HIDWORD(v139[1]), LODWORD(v139[1]), 0, 0);
    }
    kaldi::MatrixBase<double>::AddMat((uint64_t)a1, (uint64_t)v139, 111, 1.0, 1.0);
LABEL_15:
    if (v139[0])
    {
      if (!v141)
        free(v139[0]);
    }
    return;
  }
  std::istream::tellg();
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v139);
  if (v6)
  {
    v12 = kaldi::Peek(a2, 1);
    if (v12 == 70)
    {
      if (a5)
      {
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v146);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v146, (uint64_t)"Can not map into the wrong matrix data type", 43);
        kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v146);
      }
      v16 = a1[1].u32[0];
      v15 = a1[1].u32[1];
      v146 = 0u;
      v147 = 0u;
      v148 = 0;
      kaldi::Matrix<float>::Resize((int32x2_t *)&v146, v15, v16, 0, 0);
      kaldi::Matrix<float>::Read(&v146, a2, 1, 0, 0, v17);
      kaldi::Matrix<double>::Resize(a1, HIDWORD(v146), DWORD2(v146), 0, 0);
      kaldi::MatrixBase<double>::CopyFromMat<float>((uint64_t)a1, (uint64_t)&v146, 111);
      if ((_QWORD)v146 && !v148)
        free((void *)v146);
      goto LABEL_163;
    }
    if (v12 == 67)
    {
      *(_QWORD *)&v146 = 0;
      BYTE8(v146) = 0;
      kaldi::CompressedMatrix::Read((uint64_t)&v146, a2, 1, a5);
      if ((_QWORD)v146)
      {
        v13 = *(unsigned int *)(v146 + 8);
        v14 = *(unsigned int *)(v146 + 12);
      }
      else
      {
        v13 = 0;
        v14 = 0;
      }
      kaldi::Matrix<double>::Resize(a1, v13, v14, 0, 0);
      kaldi::CompressedMatrix::CopyToMat<double>((uint64_t *)&v146, (uint64_t)a1);
      kaldi::CompressedMatrix::Destroy((kaldi::CompressedMatrix *)&v146);
      goto LABEL_163;
    }
    memset(&v145, 0, sizeof(v145));
    std::string::append(&v145, "D");
    v18 = a5 != 0;
    if (a5)
      v19 = "N";
    else
      v19 = "M";
    std::string::append(&v145, v19);
    __s1 = 0;
    __n = 0;
    v138 = 0;
    kaldi::ReadToken(a2, 1, (uint64_t)&__s1);
    v20 = SHIBYTE(v138);
    v21 = __n;
    if (v138 >= 0)
      v22 = HIBYTE(v138);
    else
      v22 = __n;
    size = HIBYTE(v145.__r_.__value_.__r.__words[2]);
    v24 = SHIBYTE(v145.__r_.__value_.__r.__words[2]);
    if ((v145.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      size = v145.__r_.__value_.__l.__size_;
    if (v22 == size)
    {
      if ((v145.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v25 = &v145;
      else
        v25 = (std::string *)v145.__r_.__value_.__r.__words[0];
      if (v138 < 0)
      {
        if (!memcmp(__s1, v25, __n))
          goto LABEL_179;
        goto LABEL_168;
      }
      if (!HIBYTE(v138))
        goto LABEL_179;
      p_s1 = &__s1;
      v27 = HIBYTE(v138);
      while (*(unsigned __int8 *)p_s1 == v25->__r_.__value_.__s.__data_[0])
      {
        p_s1 = (void **)((char *)p_s1 + 1);
        v25 = (std::string *)((char *)v25 + 1);
        if (!--v27)
          goto LABEL_179;
      }
    }
    if ((v138 & 0x8000000000000000) == 0)
    {
      if (HIBYTE(v138) != 2)
        goto LABEL_181;
      v28 = (unsigned __int8 *)&__s1;
LABEL_170:
      v70 = *v28;
      v71 = (std::string *)v145.__r_.__value_.__r.__words[0];
      if (v24 >= 0)
        v71 = &v145;
      if (v70 == v71->__r_.__value_.__s.__data_[0])
      {
        v72 = __s1;
        if (v20 >= 0)
          v72 = &__s1;
        if (v72[1] == 78)
        {
          if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
          {
            kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v146);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v146, (uint64_t)"Reading aligned matrix as a stream", 34);
            kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)&v146);
          }
          v18 = 1;
LABEL_179:
          LODWORD(v132) = 0;
          v135 = 0;
          kaldi::ReadBasicType<int>(a2, 1, (uint64_t)&v132);
          kaldi::ReadBasicType<int>(a2, 1, (uint64_t)&v135 + 4);
          if (v18)
          {
            kaldi::ReadBasicType<int>(a2, 1, (uint64_t)&v135);
            fst::AlignInput();
          }
          else
          {
            LODWORD(v135) = HIDWORD(v135);
          }
          v87 = (int)v132;
          if (a5)
          {
            a1[1].i32[0] = HIDWORD(v135);
            a1[1].i32[1] = v87;
            a1[2].i32[0] = v135;
            if (*(_QWORD *)a1 && !a1[4].i8[0])
              free(*(void **)a1);
            std::istream::tellg();
            *a1 = (int32x2_t)(a5 + v149);
            a1[4].i8[0] = 1;
            std::istream::seekg();
            v88 = *a2;
            if ((*((_BYTE *)a2 + *(_QWORD *)(*a2 - 24) + 32) & 5) != 0)
            {
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v139, (uint64_t)": Seeking failed", 16);
LABEL_194:
              v81 = 2;
              goto LABEL_195;
            }
          }
          else
          {
            v89 = HIDWORD(v135);
            if (__PAIR64__(v132, HIDWORD(v135)) == *(_QWORD *)&a1[1])
            {
              v90 = HIDWORD(v135);
            }
            else
            {
              kaldi::Matrix<double>::Resize(a1, v132, HIDWORD(v135), 1, 0);
              v90 = a1[1].i32[0];
              v89 = HIDWORD(v135);
              v87 = (int)v132;
            }
            v91 = a1[2].i32[0];
            v92 = v135;
            if (v91 == v90 && v91 == (_DWORD)v135 && v89 * v87)
            {
              std::istream::read();
              v88 = *a2;
              if ((*((_BYTE *)a2 + *(_QWORD *)(*a2 - 24) + 32) & 5) != 0)
              {
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v139, (uint64_t)": Reading whole matrix failed", 29);
                goto LABEL_194;
              }
            }
            else
            {
              if (v87 > 0)
              {
                v93 = 0;
                v94 = a2 + 4;
                v95 = 29;
                while (1)
                {
                  std::istream::read();
                  v88 = *a2;
                  if ((*((_BYTE *)v94 + *(_QWORD *)(*a2 - 24)) & 5) != 0)
                  {
                    v108 = v139;
                    v109 = ": Reading a matrix row failed";
                    goto LABEL_269;
                  }
                  if (v92 != v89)
                  {
                    std::istream::seekg();
                    v88 = *a2;
                    if ((*((_BYTE *)v94 + *(_QWORD *)(*a2 - 24)) & 5) != 0)
                      break;
                  }
                  if (++v93 >= (int)v132)
                    goto LABEL_250;
                }
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v139, (uint64_t)": Seek for padding ", 19);
                v108 = (_QWORD *)std::ostream::operator<<();
                v109 = " failed";
                v95 = 7;
LABEL_269:
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v108, (uint64_t)v109, v95);
                goto LABEL_194;
              }
              v88 = *a2;
            }
          }
LABEL_250:
          v102 = *(_DWORD *)((char *)a2 + *(_QWORD *)(v88 - 24) + 32);
          v81 = 1;
          if ((v102 & 2) == 0)
          {
            if ((v102 & 5) != 0)
              v81 = 2;
            else
              v81 = 1;
          }
LABEL_195:
          if (SHIBYTE(v138) < 0)
            operator delete(__s1);
          if (SHIBYTE(v145.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v145.__r_.__value_.__l.__data_);
          if (v81 != 2)
            goto LABEL_163;
LABEL_200:
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v146);
          v82 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v146, (uint64_t)"Failed to read matrix from stream.  ", 36);
          std::stringbuf::str();
          if (v138 >= 0)
            v83 = &__s1;
          else
            v83 = __s1;
          if (v138 >= 0)
            v84 = HIBYTE(v138);
          else
            v84 = __n;
          v85 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v82, (uint64_t)v83, v84);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v85, (uint64_t)" File position at start is ", 27);
          v86 = (_QWORD *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v86, (uint64_t)", currently ", 12);
          std::istream::tellg();
          std::ostream::operator<<();
          if (SHIBYTE(v138) < 0)
            operator delete(__s1);
          kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v146);
        }
      }
LABEL_181:
      v73 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v139, (uint64_t)": Expected token ", 17);
      if ((v145.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v74 = &v145;
      else
        v74 = (std::string *)v145.__r_.__value_.__r.__words[0];
      if ((v145.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v75 = HIBYTE(v145.__r_.__value_.__r.__words[2]);
      else
        v75 = v145.__r_.__value_.__l.__size_;
      v76 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v73, (uint64_t)v74, v75);
      v77 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v76, (uint64_t)", got ", 6);
      if (v138 >= 0)
        v78 = &__s1;
      else
        v78 = __s1;
      if (v138 >= 0)
        v79 = HIBYTE(v138);
      else
        v79 = __n;
      v80 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v77, (uint64_t)v78, v79);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v80, (uint64_t)". This could mean that you're trying to memory map an unaligned file.", 69);
      goto LABEL_194;
    }
LABEL_168:
    if (v21 != 2)
      goto LABEL_181;
    v28 = (unsigned __int8 *)__s1;
    goto LABEL_170;
  }
  memset(&v145, 0, sizeof(v145));
  std::operator>>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a2, (uint64_t)&v145);
  if ((*((_BYTE *)a2 + *(_QWORD *)(*a2 - 24) + 32) & 5) != 0)
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v139, (uint64_t)": Expected \"[\", got EOF", 23);
LABEL_159:
    v69 = 2;
    goto LABEL_160;
  }
  if (SHIBYTE(v145.__r_.__value_.__r.__words[2]) < 0)
  {
    if (v145.__r_.__value_.__l.__size_ != 1)
    {
      if (v145.__r_.__value_.__l.__size_ == 2 && *(_WORD *)v145.__r_.__value_.__l.__data_ == 23899)
        goto LABEL_216;
      goto LABEL_152;
    }
    v29 = (std::string *)v145.__r_.__value_.__r.__words[0];
  }
  else
  {
    if (HIBYTE(v145.__r_.__value_.__r.__words[2]) != 1)
    {
      if (HIBYTE(v145.__r_.__value_.__r.__words[2]) == 2 && LOWORD(v145.__r_.__value_.__l.__data_) == 23899)
      {
LABEL_216:
        kaldi::Matrix<double>::Resize(a1, 0, 0, 0, 0);
        v69 = 1;
        goto LABEL_160;
      }
LABEL_152:
      v65 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v139, (uint64_t)": Expected \"[\", got \"", 21);
      if ((v145.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v66 = &v145;
      else
        v66 = (std::string *)v145.__r_.__value_.__r.__words[0];
      if ((v145.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v67 = HIBYTE(v145.__r_.__value_.__r.__words[2]);
      else
        v67 = v145.__r_.__value_.__l.__size_;
      v68 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v65, (uint64_t)v66, v67);
      LOBYTE(v146) = 34;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v68, (uint64_t)&v146, 1);
      goto LABEL_159;
    }
    v29 = &v145;
  }
  if (v29->__r_.__value_.__s.__data_[0] != 91)
    goto LABEL_152;
  __s1 = 0;
  __n = 0;
  v138 = 0;
  v30 = operator new();
  v31 = a2 + 4;
  *(_QWORD *)v30 = 0;
  *(_QWORD *)(v30 + 8) = 0;
  *(_QWORD *)(v30 + 16) = 0;
  do
  {
    v32 = std::istream::peek();
    if (v32 == -1)
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v139, (uint64_t)"Got EOF while reading matrix data", 33);
      break;
    }
    v33 = v32 << 24;
    if (v32 << 24 == 167772160 || v33 == 989855744)
    {
      std::istream::get();
      if (*(_QWORD *)(v30 + 8) != *(_QWORD *)v30)
      {
        v36 = __n;
        if (__n >= v138)
        {
          v38 = (uint64_t)(__n - (_QWORD)__s1) >> 3;
          if ((unint64_t)(v38 + 1) >> 61)
            goto LABEL_305;
          v39 = (v138 - (uint64_t)__s1) >> 2;
          if (v39 <= v38 + 1)
            v39 = v38 + 1;
          if ((unint64_t)(v138 - (_QWORD)__s1) >= 0x7FFFFFFFFFFFFFF8)
            v40 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v40 = v39;
          if (v40)
            v41 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)&v138, v40);
          else
            v41 = 0;
          v49 = (uint64_t *)&v41[8 * v38];
          *v49 = v30;
          v37 = (size_t)(v49 + 1);
          v51 = (char *)__s1;
          v50 = (char *)__n;
          if ((void *)__n != __s1)
          {
            do
            {
              v52 = *((_QWORD *)v50 - 1);
              v50 -= 8;
              *--v49 = v52;
            }
            while (v50 != v51);
            v50 = (char *)__s1;
          }
          __s1 = v49;
          __n = v37;
          v138 = (int64_t)&v41[8 * v40];
          if (v50)
            operator delete(v50);
        }
        else
        {
          *(_QWORD *)__n = v30;
          v37 = v36 + 8;
        }
        __n = v37;
        v30 = operator new();
        *(_QWORD *)v30 = 0;
        *(_QWORD *)(v30 + 8) = 0;
        *(_QWORD *)(v30 + 16) = 0;
        std::vector<double>::reserve((void **)v30, (uint64_t)(*(_QWORD *)(*(_QWORD *)(__n - 8) + 8) - **(_QWORD **)(__n - 8)) >> 3);
      }
      goto LABEL_98;
    }
    if (v33 == 1560281088)
    {
      std::istream::get();
      v103 = std::istream::peek() << 24;
      if (v103 != 167772160)
      {
        if (v103 != 218103808)
          goto LABEL_258;
        std::istream::get();
      }
      std::istream::get();
LABEL_258:
      if ((*((_BYTE *)a2 + *(_QWORD *)(*a2 - 24) + 32) & 5) != 0 && kaldi::g_kaldi_verbose_level >= -1)
      {
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v146);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v146, (uint64_t)"After end of matrix data, read error.", 37);
        kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v146);
      }
      v105 = *(_QWORD **)v30;
      if (*(_QWORD *)v30 == *(_QWORD *)(v30 + 8))
      {
        if (v105)
        {
          *(_QWORD *)(v30 + 8) = v105;
          operator delete(v105);
        }
        MEMORY[0x1AF44D190](v30, 0x80C40D6874129);
        v107 = (_BYTE *)__n;
      }
      else
      {
        v106 = __n;
        if (__n >= v138)
        {
          v110 = (uint64_t)(__n - (_QWORD)__s1) >> 3;
          if ((unint64_t)(v110 + 1) >> 61)
LABEL_305:
            std::vector<int>::__throw_length_error[abi:ne180100]();
          v111 = (v138 - (uint64_t)__s1) >> 2;
          if (v111 <= v110 + 1)
            v111 = v110 + 1;
          if ((unint64_t)(v138 - (_QWORD)__s1) >= 0x7FFFFFFFFFFFFFF8)
            v112 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v112 = v111;
          if (v112)
            v113 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)&v138, v112);
          else
            v113 = 0;
          v114 = (uint64_t *)&v113[8 * v110];
          v115 = &v113[8 * v112];
          *v114 = v30;
          v107 = v114 + 1;
          v117 = (char *)__s1;
          v116 = (char *)__n;
          if ((void *)__n != __s1)
          {
            do
            {
              v118 = *((_QWORD *)v116 - 1);
              v116 -= 8;
              *--v114 = v118;
            }
            while (v116 != v117);
            v116 = (char *)__s1;
          }
          __s1 = v114;
          __n = (size_t)v107;
          v138 = (int64_t)v115;
          if (v116)
            operator delete(v116);
        }
        else
        {
          *(_QWORD *)__n = v30;
          v107 = (_BYTE *)(v106 + 8);
        }
        __n = (size_t)v107;
      }
      if (__s1 == v107)
      {
        kaldi::Matrix<double>::Resize(a1, 0, 0, 0, 0);
      }
      else
      {
        v119 = v107 - (_BYTE *)__s1;
        v120 = (unint64_t)(v107 - (_BYTE *)__s1) >> 3;
        v121 = *(_QWORD *)(*(_QWORD *)__s1 + 8) - **(_QWORD **)__s1;
        v122 = v121 >> 3;
        kaldi::Matrix<double>::Resize(a1, v120, v121 >> 3, 0, 0);
        if ((int)v120 >= 1)
        {
          v123 = 0;
          v124 = (v119 >> 3);
          v125 = (v121 >> 3);
          v69 = 1;
          while (1)
          {
            v126 = *((_QWORD *)__s1 + v123);
            v127 = *(_QWORD **)v126;
            if (((*(_QWORD *)(v126 + 8) - *(_QWORD *)v126) >> 3) != (_DWORD)v122)
            {
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v139, (uint64_t)"Matrix has inconsistent #cols: ", 31);
              v130 = (_QWORD *)std::ostream::operator<<();
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v130, (uint64_t)" vs.", 4);
              v131 = (_QWORD *)std::ostream::operator<<();
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v131, (uint64_t)" (processing row", 16);
              std::ostream::operator<<();
              goto LABEL_233;
            }
            if ((int)v122 >= 1)
              break;
            if (v127)
              goto LABEL_298;
LABEL_299:
            MEMORY[0x1AF44D190](v126, 0x80C40D6874129);
            if (++v123 == v124)
              goto LABEL_245;
          }
          v128 = 0;
          v129 = *(_QWORD *)a1 + 8 * a1[2].i32[0] * (int)v123;
          do
          {
            *(_QWORD *)(v129 + 8 * v128) = v127[v128];
            ++v128;
          }
          while (v125 != v128);
LABEL_298:
          *(_QWORD *)(v126 + 8) = v127;
          operator delete(v127);
          goto LABEL_299;
        }
      }
      v69 = 1;
      goto LABEL_245;
    }
    if (v32 - 48 <= 9)
    {
      *(_QWORD *)&v146 = 0;
      MEMORY[0x1AF44CB00](a2, &v146);
      if ((*((_BYTE *)v31 + *(_QWORD *)(*a2 - 24)) & 5) != 0)
        goto LABEL_267;
      v34 = *(_QWORD *)(v30 + 16);
      v35 = *(_QWORD **)(v30 + 8);
      if ((unint64_t)v35 >= v34)
      {
        v43 = *(_QWORD **)v30;
        v44 = ((uint64_t)v35 - *(_QWORD *)v30) >> 3;
        v45 = v44 + 1;
        if ((unint64_t)(v44 + 1) >> 61)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v46 = v34 - (_QWORD)v43;
        if (v46 >> 2 > v45)
          v45 = v46 >> 2;
        if ((unint64_t)v46 >= 0x7FFFFFFFFFFFFFF8)
          v47 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v47 = v45;
        if (v47)
        {
          v48 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>(v30 + 16, v47);
          v43 = *(_QWORD **)v30;
          v35 = *(_QWORD **)(v30 + 8);
        }
        else
        {
          v48 = 0;
        }
        v58 = &v48[8 * v44];
        *(_QWORD *)v58 = v146;
        v59 = v58 + 8;
        while (v35 != v43)
        {
          v60 = *--v35;
          *((_QWORD *)v58 - 1) = v60;
          v58 -= 8;
        }
        *(_QWORD *)v30 = v58;
        *(_QWORD *)(v30 + 8) = v59;
        *(_QWORD *)(v30 + 16) = &v48[8 * v47];
        if (v43)
          operator delete(v43);
        *(_QWORD *)(v30 + 8) = v59;
      }
      else
      {
        *v35 = v146;
        *(_QWORD *)(v30 + 8) = v35 + 1;
      }
      goto LABEL_98;
    }
    if (v32 == 45)
    {
      std::istream::get();
      if (std::istream::peek() - 48 <= 9)
      {
        *(_QWORD *)&v146 = 0;
        MEMORY[0x1AF44CB00](a2, &v146);
        if ((*((_BYTE *)v31 + *(_QWORD *)(*a2 - 24)) & 5) != 0)
        {
LABEL_267:
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v139, (uint64_t)"Stream failure/EOF while reading matrix data.", 45);
          break;
        }
        *(double *)&v132 = -*(double *)&v146;
        std::vector<double>::push_back[abi:ne180100](v30, &v132);
        goto LABEL_98;
      }
      v132 = 0;
      v133 = 0;
      v134 = 0;
      std::operator>>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a2, (uint64_t)&v132);
      if (SHIBYTE(v134) < 0)
      {
        v54 = v132;
        if (!strcasecmp(v132, "inf"))
          goto LABEL_127;
        v55 = (char **)v54;
      }
      else
      {
        if (!strcasecmp((const char *)&v132, "inf"))
          goto LABEL_127;
        v54 = (const char *)&v132;
        v55 = &v132;
      }
      if (!strcasecmp((const char *)v55, "infinity"))
      {
LABEL_127:
        *(_QWORD *)&v146 = 0xFFF0000000000000;
        std::vector<double>::push_back[abi:ne180100](v30, &v146);
        if (kaldi::g_kaldi_verbose_level >= -1)
        {
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v146);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v146, (uint64_t)"Reading negative infinite value into matrix.", 44);
          kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v146);
        }
        goto LABEL_146;
      }
      if (strcasecmp(v54, "nan"))
      {
        v61 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v139, (uint64_t)"Expecting numeric matrix data, got ", 35);
        if (v134 >= 0)
          v62 = &v132;
        else
          v62 = v132;
        if (v134 >= 0)
          v63 = HIBYTE(v134);
        else
          v63 = v133;
LABEL_139:
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v61, (uint64_t)v62, v63);
        v64 = 0;
        v53 = 8;
        goto LABEL_147;
      }
      *(_QWORD *)&v146 = 0xFFF8000000000000;
      std::vector<double>::push_back[abi:ne180100](v30, &v146);
      if (kaldi::g_kaldi_verbose_level >= -1)
      {
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v146);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v146, (uint64_t)"Reading negative NaN value into matrix.", 39);
        kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v146);
      }
    }
    else
    {
      if (v32 <= 0x7F)
        v42 = *(_DWORD *)(MEMORY[0x1E0C80978] + 4 * v32 + 60) & 0x4000;
      else
        v42 = __maskrune(v32, 0x4000uLL);
      if (v42)
      {
        std::istream::get();
LABEL_98:
        v53 = 0;
        continue;
      }
      v132 = 0;
      v133 = 0;
      v134 = 0;
      std::operator>>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a2, (uint64_t)&v132);
      if (SHIBYTE(v134) < 0)
      {
        v56 = v132;
        if (!strcasecmp(v132, "inf"))
          goto LABEL_140;
        v57 = (char **)v56;
      }
      else
      {
        if (!strcasecmp((const char *)&v132, "inf"))
          goto LABEL_140;
        v56 = (const char *)&v132;
        v57 = &v132;
      }
      if (!strcasecmp((const char *)v57, "infinity"))
      {
LABEL_140:
        *(_QWORD *)&v146 = 0x7FF0000000000000;
        std::vector<double>::push_back[abi:ne180100](v30, &v146);
        if (kaldi::g_kaldi_verbose_level >= -1)
        {
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v146);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v146, (uint64_t)"Reading infinite value into matrix.", 35);
          kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v146);
        }
        goto LABEL_146;
      }
      if (strcasecmp(v56, "nan"))
      {
        v61 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v139, (uint64_t)"Expecting numeric matrix data, got ", 35);
        if (v134 >= 0)
          v62 = &v132;
        else
          v62 = v132;
        if (v134 >= 0)
          v63 = HIBYTE(v134);
        else
          v63 = v133;
        goto LABEL_139;
      }
      *(_QWORD *)&v146 = 0x7FF8000000000000;
      std::vector<double>::push_back[abi:ne180100](v30, &v146);
      if (kaldi::g_kaldi_verbose_level >= -1)
      {
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v146);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v146, (uint64_t)"Reading NaN value into matrix.", 30);
        kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v146);
      }
    }
LABEL_146:
    v53 = 0;
    v64 = 1;
LABEL_147:
    if (SHIBYTE(v134) < 0)
    {
      operator delete(v132);
      if ((v64 & 1) != 0)
        goto LABEL_98;
    }
    else if ((v64 & 1) != 0)
    {
      goto LABEL_98;
    }
  }
  while (!v53);
LABEL_233:
  if (v30)
  {
    v96 = *(_QWORD **)v30;
    if (*(_QWORD *)v30)
    {
      *(_QWORD *)(v30 + 8) = v96;
      operator delete(v96);
    }
    MEMORY[0x1AF44D190](v30, 0x80C40D6874129);
  }
  v97 = __s1;
  v98 = __n;
  if ((void *)__n == __s1)
  {
    v69 = 0;
  }
  else
  {
    v99 = 0;
    do
    {
      v100 = v97[v99];
      if (v100)
      {
        v101 = *(void **)v100;
        if (*(_QWORD *)v100)
        {
          *(_QWORD *)(v100 + 8) = v101;
          operator delete(v101);
        }
        MEMORY[0x1AF44D190](v100, 0x80C40D6874129);
        v97 = __s1;
        v98 = __n;
      }
      ++v99;
    }
    while (v99 < (uint64_t)(v98 - (_QWORD)v97) >> 3);
    v69 = 0;
LABEL_245:
    v97 = __s1;
  }
  if (v97)
  {
    __n = (size_t)v97;
    operator delete(v97);
  }
LABEL_160:
  if (SHIBYTE(v145.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v145.__r_.__value_.__l.__data_);
  if ((v69 | 2) == 2)
    goto LABEL_200;
LABEL_163:
  v139[0] = *(void **)MEMORY[0x1E0DE4F60];
  *(void **)((char *)v139 + *((_QWORD *)v139[0] - 3)) = *(void **)(MEMORY[0x1E0DE4F60] + 24);
  v139[1] = (void *)(MEMORY[0x1E0DE4FB8] + 16);
  if (v143 < 0)
    operator delete(__p);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1AF44D094](&v144);
}

void sub_1ADC5596C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  void *a67;
  char a71;

  if (a67)
  {
    if (!a71)
      free(a67);
  }
  JUMPOUT(0x1ADC559F8);
}

void sub_1ADC55988(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a67;

  kaldi::CompressedMatrix::Destroy((kaldi::CompressedMatrix *)&a67);
  JUMPOUT(0x1ADC559F8);
}

void sub_1ADC559B4()
{
  JUMPOUT(0x1ADC559F8);
}

void sub_1ADC559BC(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

uint64_t kaldi::Matrix<float>::Init(uint64_t result, unsigned int a2, int a3, int a4)
{
  uint64_t v4;
  int v7;
  int v8;
  BOOL v9;
  std::bad_alloc *exception;
  std::bad_alloc *v11;
  void *memptr;

  v4 = result;
  if (a3 * a2)
  {
    memptr = 0;
    v7 = -a3 & 3;
    if (a4)
      v7 = 0;
    v8 = v7 + a3;
    result = malloc_type_posix_memalign(&memptr, 0x10uLL, 4 * a2 * (unint64_t)(v7 + a3), 0x746C3D7DuLL);
    if ((_DWORD)result)
      v9 = 1;
    else
      v9 = memptr == 0;
    if (v9)
    {
      exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
      v11 = std::bad_alloc::bad_alloc(exception);
      __cxa_throw(v11, MEMORY[0x1E0DE4EA8], (void (*)(void *))MEMORY[0x1E0DE4DC0]);
    }
    *(_QWORD *)v4 = memptr;
    *(_BYTE *)(v4 + 32) = 0;
    *(_DWORD *)(v4 + 8) = a3;
    *(_DWORD *)(v4 + 12) = a2;
    *(_DWORD *)(v4 + 16) = v8;
    *(_DWORD *)(v4 + 20) = v8 * a2;
  }
  else
  {
    *(_BYTE *)(result + 32) = 0;
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = 0;
  }
  return result;
}

int32x2_t *kaldi::Matrix<float>::operator=(int32x2_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = *(unsigned int *)(a2 + 12);
  if (a1[1].i32[1] == (_DWORD)v4)
  {
    v5 = *(unsigned int *)(a2 + 8);
    if (a1[1].i32[0] == (_DWORD)v5)
      goto LABEL_6;
  }
  else
  {
    v5 = *(unsigned int *)(a2 + 8);
  }
  kaldi::Matrix<float>::Resize(a1, v4, v5, 1, 0);
LABEL_6:
  kaldi::MatrixBase<float>::CopyFromMat<float>((int *)a1, (int *)a2, 111);
  return a1;
}

uint64_t kaldi::Matrix<double>::Matrix(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5)
{
  *(_BYTE *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  kaldi::Matrix<double>::Resize((int32x2_t *)a1, a2, a3, a4, a5);
  return a1;
}

uint64_t kaldi::Matrix<double>::Matrix(uint64_t a1, int *a2)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  kaldi::Matrix<double>::Resize((int32x2_t *)a1, a2[3], a2[2], 1, a2[2] == a2[4]);
  kaldi::MatrixBase<double>::CopyFromMat<double>((int *)a1, a2, 111);
  return a1;
}

void kaldi::MatrixBase<double>::AddMat(uint64_t a1, uint64_t a2, int a3, double a4, double a5)
{
  uint64_t v9;
  uint64_t v10;
  const double *v11;
  double *v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  const double *v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  const double *v24;
  double *v25;
  uint64_t v26;
  uint64_t v27;
  double *v28;
  double v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  const double *v33;
  double *v34;
  uint64_t v35;
  uint64_t v36;
  double *v37;
  double v38;

  if (a2 == a1)
  {
    if (a3 == 111)
    {
      kaldi::MatrixBase<double>::Scale(a2, a4 + a5);
    }
    else
    {
      v18 = *(unsigned int *)(a2 + 12);
      v19 = *(const double **)a2;
      if (a4 == 1.0 && a5 == 1.0)
      {
        if ((int)v18 >= 1)
        {
          v30 = 0;
          v31 = *(int *)(a2 + 16);
          v32 = 8 * v31;
          v33 = *(const double **)a2;
          v34 = *(double **)a2;
          do
          {
            if (v30)
            {
              v35 = 0;
              v36 = v30 * v31;
              v37 = v34;
              do
              {
                v38 = v33[v35] + *v37;
                *v37 = v38;
                v33[v35++] = v38;
                v37 = (double *)((char *)v37 + v32);
              }
              while (v30 != v35);
            }
            else
            {
              v36 = 0;
            }
            v19[v36 + v30] = v19[v36 + v30] + v19[v36 + v30];
            ++v30;
            ++v34;
            v33 = (const double *)((char *)v33 + v32);
          }
          while (v30 != v18);
        }
      }
      else if ((int)v18 >= 1)
      {
        v21 = 0;
        v22 = *(int *)(a2 + 16);
        v23 = 8 * v22;
        v24 = *(const double **)a2;
        v25 = *(double **)a2;
        do
        {
          if (v21)
          {
            v26 = 0;
            v27 = v21 * v22;
            v28 = v25;
            do
            {
              v29 = v24[v26];
              v24[v26] = v29 * a5 + a4 * *v28;
              *v28 = *v28 * a5 + a4 * v29;
              ++v26;
              v28 = (double *)((char *)v28 + v23);
            }
            while (v21 != v26);
          }
          else
          {
            v27 = 0;
          }
          v19[v27 + v21] = (a4 + a5) * v19[v27 + v21];
          ++v21;
          ++v25;
          v24 = (const double *)((char *)v24 + v23);
        }
        while (v21 != v18);
      }
    }
  }
  else
  {
    if (a5 != 1.0)
      kaldi::MatrixBase<double>::Scale(a1, a5);
    v9 = *(int *)(a2 + 16);
    v10 = *(int *)(a1 + 16);
    v11 = *(const double **)a2;
    v12 = *(double **)a1;
    if (a3 == 111)
    {
      if (*(int *)(a2 + 12) >= 1)
      {
        v13 = 0;
        v14 = 8 * v10;
        v15 = 8 * v9;
        do
        {
          cblas_daxpy(*(_DWORD *)(a1 + 8), a4, v11, 1, v12, 1);
          ++v13;
          v12 = (double *)((char *)v12 + v14);
          v11 = (const double *)((char *)v11 + v15);
        }
        while (v13 < *(_DWORD *)(a1 + 12));
      }
    }
    else if (*(int *)(a2 + 8) >= 1)
    {
      v16 = 0;
      v17 = 8 * v10;
      do
      {
        cblas_daxpy(*(_DWORD *)(a1 + 8), a4, v11, v9, v12, 1);
        ++v16;
        ++v11;
        v12 = (double *)((char *)v12 + v17);
      }
      while (v16 < *(_DWORD *)(a1 + 12));
    }
  }
}

uint64_t kaldi::MatrixBase<float>::Set(uint64_t result, float a2)
{
  int v2;
  int v3;
  uint64_t v4;
  float *v5;
  uint64_t v6;

  v2 = *(_DWORD *)(result + 12);
  if (v2 >= 1)
  {
    v3 = 0;
    v4 = *(unsigned int *)(result + 8);
    do
    {
      if ((int)v4 >= 1)
      {
        v5 = (float *)(*(_QWORD *)result + 4 * *(_DWORD *)(result + 16) * v3);
        v6 = v4;
        do
        {
          *v5++ = a2;
          --v6;
        }
        while (v6);
      }
      ++v3;
    }
    while (v3 != v2);
  }
  return result;
}

void kaldi::MatrixBase<float>::SetRandn(uint64_t a1)
{
  int v2;
  int v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  float v7;
  float v8;
  float v9;
  float v10;
  unsigned int v11;

  v11 = kaldi::Rand(0);
  v2 = *(_DWORD *)(a1 + 12);
  if (v2 >= 1)
  {
    v3 = 0;
    v4 = *(_DWORD *)(a1 + 8);
    do
    {
      if (v4 >= 1)
      {
        v5 = 0;
        v6 = *(_QWORD *)a1 + 4 * *(_DWORD *)(a1 + 16) * v3;
        do
        {
          v7 = ((double)(int)kaldi::Rand(&v11) + 1.0) / 2147483650.0;
          v8 = sqrtf(logf(v7) * -2.0);
          v9 = ((double)(int)kaldi::Rand(&v11) + 1.0) / 2147483650.0;
          v10 = v9 * 6.28318531;
          *(float *)(v6 + 4 * v5) = v8 * cosf(v10);
          v4 = *(_DWORD *)(a1 + 8);
          ++v5;
        }
        while ((int)v5 < v4);
        v2 = *(_DWORD *)(a1 + 12);
      }
      ++v3;
    }
    while (v3 < v2);
  }
}

void **kaldi::MatrixBase<float>::CopyRowsFromVec(void **result, char **a2)
{
  void **v2;
  int v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  int v7;
  const void *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v15[34];

  v2 = result;
  v3 = *((_DWORD *)a2 + 2);
  v4 = *((int *)result + 2);
  v5 = *((_DWORD *)result + 3);
  if (v3 == (_DWORD)v4 * v5)
  {
    v6 = *((int *)result + 4);
    if ((_DWORD)v6 == (_DWORD)v4)
    {
      return (void **)memcpy(*result, *a2, 4 * v5 * (uint64_t)(int)v4);
    }
    else
    {
      v9 = *((unsigned int *)result + 3);
      if ((int)v9 >= 1)
      {
        v10 = 0;
        v11 = *a2;
        v12 = (char *)*result;
        v13 = 4 * v6;
        do
        {
          if ((int)v4 >= 1)
          {
            v14 = 0;
            do
            {
              *(_DWORD *)&v12[v14] = *(_DWORD *)&v11[v14];
              v14 += 4;
            }
            while (4 * v4 != v14);
          }
          ++v10;
          v12 += v13;
          v11 += 4 * v4;
        }
        while (v10 != v9);
      }
    }
  }
  else
  {
    if (v3 != (_DWORD)v4)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v15);
      std::operator<<[abi:ne180100]<std::char_traits<char>>(v15, "Wrong sized arguments");
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v15);
    }
    if (v5 >= 1)
    {
      v7 = 0;
      v8 = *a2;
      do
        result = (void **)memcpy((char *)*v2 + 4 * *((_DWORD *)v2 + 4) * v7++, v8, 4 * *((int *)v2 + 2));
      while (v7 < *((_DWORD *)v2 + 3));
    }
  }
  return result;
}

uint64_t kaldi::MatrixBase<float>::CopyColsFromVec(uint64_t result, uint64_t a2)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  _DWORD *v7;
  int *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  int v13;
  _DWORD *v14;
  int *v15;
  uint64_t v16;
  int v17;
  int v18;
  uint64_t i;
  _QWORD v20[34];

  v2 = *(_DWORD *)(a2 + 8);
  v3 = *(unsigned int *)(result + 8);
  v4 = *(int *)(result + 12);
  v5 = *(unsigned int *)(result + 12);
  if (v2 == (_DWORD)v3 * (_DWORD)v4)
  {
    if ((int)v3 >= 1)
    {
      v6 = 0;
      v7 = *(_DWORD **)result;
      v8 = *(int **)a2;
      v9 = 4 * v5;
      do
      {
        if ((int)v4 >= 1)
        {
          v10 = 0;
          v11 = 4 * *(int *)(result + 16);
          v12 = v7;
          do
          {
            *v12 = v8[v10 / 4];
            v12 = (_DWORD *)((char *)v12 + v11);
            v10 += 4;
          }
          while (v9 != v10);
        }
        ++v7;
        ++v6;
        v8 += v4;
      }
      while (v6 != (_DWORD)v3);
    }
  }
  else
  {
    if (v2 != (_DWORD)v5)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v20);
      std::operator<<[abi:ne180100]<std::char_traits<char>>(v20, "Wrong size of arguments.");
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v20);
    }
    if (v2 >= 1)
    {
      v13 = 0;
      v14 = *(_DWORD **)result;
      v15 = *(int **)a2;
      v16 = 4 * *(int *)(result + 16);
      do
      {
        v17 = *v15++;
        v18 = v17;
        if ((int)v3 >= 1)
        {
          for (i = 0; i != v3; ++i)
            v14[i] = v18;
        }
        ++v13;
        v14 = (_DWORD *)((char *)v14 + v16);
      }
      while (v13 != v2);
    }
  }
  return result;
}

float kaldi::MatrixBase<float>::CopyColFromVec(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v3;
  float *v4;
  float *v5;
  uint64_t v6;
  float v7;
  float result;

  v3 = *(unsigned int *)(a2 + 8);
  if ((int)v3 >= 1)
  {
    v4 = *(float **)a2;
    v5 = (float *)(*(_QWORD *)a1 + 4 * a3);
    v6 = 4 * *(int *)(a1 + 16);
    do
    {
      v7 = *v4++;
      result = v7;
      *v5 = v7;
      v5 = (float *)((char *)v5 + v6);
      --v3;
    }
    while (v3);
  }
  return result;
}

void *kaldi::MatrixBase<float>::CopyRowFromVec(uint64_t a1, uint64_t a2, int a3)
{
  return memcpy((void *)(*(_QWORD *)a1 + 4 * *(_DWORD *)(a1 + 16) * a3), *(const void **)a2, 4 * *(int *)(a2 + 8));
}

uint64_t kaldi::MatrixBase<float>::ConcatenateVec(uint64_t result, uint64_t *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  float *v8;
  float *v9;
  float v10;
  uint64_t v11;
  uint64_t v12;
  float *v13;
  float v14;
  float *v15;
  uint64_t v16;
  float v17;
  float v18;
  uint64_t v19;
  float *v20;
  uint64_t v21;
  float v22;
  float v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;

  v3 = 0;
  v5 = *(unsigned int *)(result + 8);
  v4 = *(unsigned int *)(result + 12);
  v6 = *(unsigned int *)(a3 + 8);
  v7 = *((_DWORD *)a2 + 2);
  v8 = *(float **)a3;
  v9 = *(float **)a3;
  v10 = **(float **)a3;
  v11 = *(int *)(a3 + 16);
  v12 = 4 * v11;
  v13 = *(float **)a3;
  v14 = v10;
  do
  {
    v15 = v13;
    v16 = v6;
    do
    {
      v17 = *v15++;
      v18 = v17;
      if (v17 < v14)
        v14 = v18;
      --v16;
    }
    while (v16);
    ++v3;
    v13 = (float *)((char *)v13 + v12);
  }
  while (v3 != v4);
  v19 = 0;
  do
  {
    v20 = v9;
    v21 = v6;
    do
    {
      v22 = *v20++;
      v23 = v22;
      if (v22 > v10)
        v10 = v23;
      --v21;
    }
    while (v21);
    ++v19;
    v9 = (float *)((char *)v9 + v12);
  }
  while (v19 != v4);
  v24 = 0;
  v25 = 0;
  v26 = *a2;
  v27 = *((_DWORD *)a2 + 4);
  do
  {
    if ((int)v5 >= 1)
    {
      v28 = 0;
      v29 = *(_QWORD *)result + v24 * *(int *)(result + 16);
      do
      {
        *(_DWORD *)(v29 + 4 * v28) = *(_DWORD *)(v26
                                               - 4 * (int)v28 / v7 * v7
                                               + 4 * v27 * (int)v8[v25 * v11 + (int)v28 / v7]
                                               + 4 * v28);
        ++v28;
      }
      while (v5 != v28);
    }
    ++v25;
    v24 += 4;
  }
  while (v25 != v4);
  return result;
}

uint64_t kaldi::MatrixBase<float>::Min(uint64_t result)
{
  uint64_t v1;
  float *v2;
  float v3;
  uint64_t v4;
  float *v5;
  float v6;
  float v7;

  v1 = 0;
  v2 = *(float **)result;
  v3 = **(float **)result;
  do
  {
    v4 = *(unsigned int *)(result + 8);
    v5 = v2;
    do
    {
      v6 = *v5++;
      v7 = v6;
      if (v6 < v3)
        v3 = v7;
      --v4;
    }
    while (v4);
    ++v1;
    v2 += *(int *)(result + 16);
  }
  while (v1 != *(_DWORD *)(result + 12));
  return result;
}

uint64_t kaldi::MatrixBase<float>::Max(uint64_t result)
{
  uint64_t v1;
  float *v2;
  float v3;
  uint64_t v4;
  float *v5;
  float v6;
  float v7;

  v1 = 0;
  v2 = *(float **)result;
  v3 = **(float **)result;
  do
  {
    v4 = *(unsigned int *)(result + 8);
    v5 = v2;
    do
    {
      v6 = *v5++;
      v7 = v6;
      if (v6 > v3)
        v3 = v7;
      --v4;
    }
    while (v4);
    ++v1;
    v2 += *(int *)(result + 16);
  }
  while (v1 != *(_DWORD *)(result + 12));
  return result;
}

void kaldi::MatrixBase<float>::ConcatenateVec(uint64_t *a1, uint64_t *a2, uint64_t a3, double a4, double a5, double a6, double a7, double a8, double a9)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  float *v15;
  float v16;
  uint64_t v17;
  float *v18;
  float v19;
  float *v20;
  uint64_t v21;
  float v22;
  uint64_t v23;
  float *v24;
  uint64_t v25;
  float v26;
  int v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  int v37;
  uint64_t v38;

  v11 = 0;
  v12 = *((unsigned int *)a1 + 3);
  LODWORD(v13) = *(_DWORD *)(a3 + 8);
  v14 = *a2;
  v15 = *(float **)a3;
  v16 = **(float **)a3;
  v17 = 4 * *(int *)(a3 + 16);
  v18 = *(float **)a3;
  v19 = v16;
  do
  {
    v20 = v18;
    v21 = *(unsigned int *)(a3 + 8);
    do
    {
      v22 = *v20++;
      *(float *)&a6 = v22;
      if (v22 < v19)
        v19 = *(float *)&a6;
      --v21;
    }
    while (v21);
    ++v11;
    v18 = (float *)((char *)v18 + v17);
  }
  while (v11 != v12);
  v23 = 0;
  do
  {
    v24 = v15;
    v25 = *(unsigned int *)(a3 + 8);
    do
    {
      v26 = *v24++;
      *(float *)&a5 = v26;
      if (v26 > v16)
        v16 = *(float *)&a5;
      --v25;
    }
    while (v25);
    ++v23;
    v15 = (float *)((char *)v15 + v17);
  }
  while (v23 != v12);
  if (v14)
    v27 = *(_DWORD *)(v14 + 12);
  else
    v27 = 0;
  v28 = 0;
  v34 = a3;
  do
  {
    if ((int)v13 >= 1)
    {
      v29 = 0;
      v30 = 0;
      v31 = 0;
      do
      {
        v32 = *a1;
        v33 = *((_DWORD *)a1 + 4);
        v37 = 0;
        v38 = 0;
        v35 = v32 + 4 * v28 * v33 + v30;
        v36 = v27;
        LODWORD(a4) = *(_DWORD *)(*(_QWORD *)a3 + 4 * v28 * *(_DWORD *)(a3 + 16) + 4 * v31);
        kaldi::CompressedMatrix::CopyRowToVec<float>(a2, (int)*(float *)&a4, &v35, a4, a5, a6, a7, a8, a9);
        a3 = v34;
        ++v31;
        v13 = *(int *)(v34 + 8);
        v30 += 4 * v27;
        v29 += v27;
      }
      while (v31 < v13);
      LODWORD(v12) = *(_DWORD *)(v34 + 12);
    }
    ++v28;
  }
  while (v28 < (int)v12);
}

uint64_t kaldi::MatrixBase<float>::SummarizeVec(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD v18[34];

  v3 = *(unsigned int *)(result + 12);
  if ((int)v3 >= 1)
  {
    v4 = 0;
    v5 = 0;
    v6 = *(unsigned int *)(result + 8);
    v7 = *((_DWORD *)a2 + 3);
    v8 = *((unsigned int *)a3 + 2);
    v9 = *a3;
    v10 = *((int *)a3 + 4);
    do
    {
      if ((int)v8 >= 1)
      {
        v11 = 0;
        v12 = *a2;
        v13 = *((_DWORD *)a2 + 4);
        do
        {
          v14 = (int)*(float *)(v9 + 4 * v5 * v10 + 4 * v11);
          if ((v14 & 0x80000000) == 0)
          {
            if (v7 <= v14)
            {
              kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v18);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)"index item is bigger than the voc size ", 39);
              std::ostream::operator<<();
              kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v18);
            }
            if ((int)v6 >= 1)
            {
              v15 = 0;
              v16 = v12 + 4 * v13 * v14;
              v17 = *(_QWORD *)result + v4 * *(int *)(result + 16);
              do
              {
                *(float *)(v17 + 4 * v15) = *(float *)(v16 + 4 * v15) + *(float *)(v17 + 4 * v15);
                ++v15;
              }
              while (v6 != v15);
            }
          }
          ++v11;
        }
        while (v11 != v8);
      }
      ++v5;
      v4 += 4;
    }
    while (v5 != v3);
  }
  return result;
}

void kaldi::MatrixBase<float>::SummarizeVec(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v6;
  signed int v7;
  int v8;
  int v9;
  uint64_t i;
  signed int v11;
  uint64_t v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  uint64_t v19;
  uint64_t v20;
  float *v21;
  uint64_t v22;
  void *v23[34];

  v6 = *(_DWORD *)(a1 + 12);
  if (*a2)
    v7 = *(_DWORD *)(*a2 + 8);
  else
    v7 = 0;
  if (v6 >= 1)
  {
    v8 = 0;
    v9 = *(_DWORD *)(a3 + 8);
    do
    {
      if (v9 >= 1)
      {
        for (i = 0; i < v9; ++i)
        {
          v11 = (int)*(float *)(*(_QWORD *)a3 + 4 * *(_DWORD *)(a3 + 16) * v8 + 4 * i);
          if ((v11 & 0x80000000) == 0)
          {
            if (v7 <= v11)
            {
              kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v23);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)"index item is bigger than the voc size ", 39);
              std::ostream::operator<<();
              kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v23);
            }
            v12 = *(unsigned int *)(a1 + 8);
            memset(v23, 0, 24);
            kaldi::Vector<float>::Resize(v23, v12, 0);
            kaldi::CompressedMatrix::CopyRowToVec<float>(a2, v11, (uint64_t *)v23, v13, v14, v15, v16, v17, v18);
            v19 = *(unsigned int *)(a1 + 8);
            if ((int)v19 >= 1)
            {
              v20 = 0;
              v21 = (float *)v23[0];
              v22 = *(_QWORD *)a1 + 4 * v8 * *(_DWORD *)(a1 + 16);
              do
              {
                *(float *)(v22 + 4 * v20) = v21[v20] + *(float *)(v22 + 4 * v20);
                ++v20;
              }
              while (v19 != v20);
            }
            kaldi::Vector<float>::Destroy((uint64_t)v23);
            v9 = *(_DWORD *)(a3 + 8);
          }
        }
        v6 = *(_DWORD *)(a1 + 12);
      }
      ++v8;
    }
    while (v8 < v6);
  }
}

void sub_1ADC567EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  kaldi::Vector<float>::Destroy((uint64_t)&a9);
  _Unwind_Resume(a1);
}

double kaldi::SubMatrix<float>::SubMatrix(uint64_t a1, uint64_t a2, int a3, int a4, int a5, int a6)
{
  double result;
  int v7;
  int v8;

  result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 8) = a6;
  *(_DWORD *)(a1 + 12) = a4;
  v7 = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  v8 = *(_DWORD *)(a2 + 16) * a3;
  *(_QWORD *)a1 = *(_QWORD *)a2 + 4 * a5 + 4 * v8;
  *(_DWORD *)(a1 + 20) = v7 - a5 - v8;
  return result;
}

uint64_t kaldi::MatrixBase<float>::CountZeros(uint64_t a1)
{
  int v1;
  int v2;
  uint64_t v3;
  float *v4;
  uint64_t v5;
  float v6;

  v1 = *(_DWORD *)(a1 + 12);
  if (v1 < 1)
    return 0;
  v2 = 0;
  v3 = 0;
  do
  {
    if (*(int *)(a1 + 8) >= 1)
    {
      v4 = (float *)(*(_QWORD *)a1 + 4 * *(_DWORD *)(a1 + 16) * v2);
      v5 = *(unsigned int *)(a1 + 8);
      do
      {
        v6 = *v4++;
        if (v6 == 0.0)
          v3 = (v3 + 1);
        else
          v3 = v3;
        --v5;
      }
      while (v5);
    }
    ++v2;
  }
  while (v2 != v1);
  return v3;
}

float kaldi::MatrixBase<float>::AbsMax(uint64_t a1)
{
  int v2;
  float *v3;
  float v4;
  int v5;
  int v6;
  float v7;

  v2 = 0;
  v3 = *(float **)a1;
  v4 = **(float **)a1;
  v5 = *(_DWORD *)(a1 + 16);
  do
  {
    v6 = cblas_isamax(*(_DWORD *)(a1 + 8), &v3[v5 * v2], 1);
    v3 = *(float **)a1;
    v5 = *(_DWORD *)(a1 + 16);
    v7 = fabsf(*(float *)(*(_QWORD *)a1 + 4 * (v6 + v5 * v2)));
    if (v7 > v4)
      v4 = v7;
    ++v2;
  }
  while (v2 < *(_DWORD *)(a1 + 12));
  return v4;
}

float kaldi::MatrixBase<float>::AggByCol(uint64_t a1, unsigned int a2, uint64_t a3, int a4)
{
  _QWORD *v6;
  uint64_t v7;
  float v8;
  int v9;
  _QWORD *v10;
  uint64_t v11;
  int v13;
  _DWORD v14[6];
  _DWORD *v15;
  _QWORD v16[3];
  _QWORD *v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v17 = 0;
  if (a4)
  {
    std::__function::__value_func<float ()(float,float)>::__value_func[abi:ne180100]((uint64_t)v14, a3);
    std::function<float ()(float,float)>::operator=<kaldi::MatrixBase<float>::AggByCol(int,std::function<float ()(float,float)>,BOOL)::{lambda(float,float)#1},void>(v16, (uint64_t)v14);
    v6 = v15;
    if (v15 == v14)
    {
      v7 = 4;
      v6 = v14;
    }
    else
    {
      if (!v15)
        goto LABEL_8;
      v7 = 5;
    }
    (*(void (**)(void))(*v6 + 8 * v7))();
  }
  else
  {
    std::function<float ()(float,float)>::operator=(v16, a3);
  }
LABEL_8:
  v8 = *(float *)(*(_QWORD *)a1 + 4 * a2);
  if (*(int *)(a1 + 12) >= 1)
  {
    v9 = 0;
    do
    {
      v13 = *(_DWORD *)(*(_QWORD *)a1 + 4 * (int)(a2 + *(_DWORD *)(a1 + 16) * v9));
      *(float *)v14 = v8;
      if (!v17)
        std::__throw_bad_function_call[abi:ne180100]();
      v8 = (*(float (**)(_QWORD *, _DWORD *, int *))(*v17 + 48))(v17, v14, &v13);
      ++v9;
    }
    while (v9 < *(_DWORD *)(a1 + 12));
  }
  v10 = v17;
  if (v17 == v16)
  {
    v11 = 4;
    v10 = v16;
    goto LABEL_16;
  }
  if (v17)
  {
    v11 = 5;
LABEL_16:
    (*(void (**)(void))(*v10 + 8 * v11))();
  }
  return v8;
}

void sub_1ADC56A74(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13, char a14, uint64_t a15, uint64_t a16, char *a17)
{
  char *v17;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;

  v19 = a13;
  if (a13 == v17)
  {
    v20 = 4;
    v19 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v20 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v19 + 8 * v20))();
LABEL_6:
  v21 = a17;
  if (a17 == &a14)
  {
    v22 = 4;
    v21 = &a14;
  }
  else
  {
    if (!a17)
      goto LABEL_11;
    v22 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v21 + 8 * v22))();
LABEL_11:
  _Unwind_Resume(exception_object);
}

_QWORD *std::function<float ()(float,float)>::operator=<kaldi::MatrixBase<float>::AggByCol(int,std::function<float ()(float,float)>,BOOL)::{lambda(float,float)#1},void>(_QWORD *a1, uint64_t a2)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _BYTE v9[24];
  _BYTE *v10;
  _QWORD v11[3];
  _QWORD *v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  std::__function::__value_func<float ()(float,float)>::__value_func[abi:ne180100]((uint64_t)v9, a2);
  v3 = operator new(0x28uLL);
  *v3 = &unk_1E5D3F458;
  std::__function::__value_func<float ()(float,float)>::__value_func[abi:ne180100]((uint64_t)(v3 + 1), (uint64_t)v9);
  v12 = v3;
  std::__function::__value_func<float ()(float,float)>::swap[abi:ne180100](v11, a1);
  v4 = v12;
  if (v12 == v11)
  {
    v5 = 4;
    v4 = v11;
  }
  else
  {
    if (!v12)
      goto LABEL_6;
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_6:
  v6 = v10;
  if (v10 == v9)
  {
    v7 = 4;
    v6 = v9;
    goto LABEL_10;
  }
  if (v10)
  {
    v7 = 5;
LABEL_10:
    (*(void (**)(void))(*v6 + 8 * v7))();
  }
  return a1;
}

void sub_1ADC56BEC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

_QWORD *std::function<float ()(float,float)>::operator=(_QWORD *a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;
  _QWORD v6[3];
  _QWORD *v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  std::__function::__value_func<float ()(float,float)>::__value_func[abi:ne180100]((uint64_t)v6, a2);
  std::__function::__value_func<float ()(float,float)>::swap[abi:ne180100](v6, a1);
  v3 = v7;
  if (v7 == v6)
  {
    v4 = 4;
    v3 = v6;
    goto LABEL_5;
  }
  if (v7)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

uint64_t std::function<float ()(float,float)>::operator()(uint64_t a1, float a2, float a3)
{
  uint64_t v3;
  float v5;
  float v6;

  v6 = a2;
  v5 = a3;
  v3 = *(_QWORD *)(a1 + 24);
  if (!v3)
    std::__throw_bad_function_call[abi:ne180100]();
  return (*(uint64_t (**)(uint64_t, float *, float *))(*(_QWORD *)v3 + 48))(v3, &v6, &v5);
}

float kaldi::MatrixBase<float>::MaxByCol(uint64_t a1, unsigned int a2, int a3)
{
  float v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD v7[3];
  _QWORD *v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v7[0] = &unk_1E5D3F4B0;
  v8 = v7;
  v3 = kaldi::MatrixBase<float>::AggByCol(a1, a2, (uint64_t)v7, a3);
  v4 = v8;
  if (v8 == v7)
  {
    v5 = 4;
    v4 = v7;
    goto LABEL_5;
  }
  if (v8)
  {
    v5 = 5;
LABEL_5:
    (*(void (**)(void))(*v4 + 8 * v5))();
  }
  return v3;
}

void sub_1ADC56DA8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v14;
  uint64_t v15;

  v14 = a13;
  if (a13 == &a10)
  {
    v15 = 4;
    v14 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v15 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v14 + 8 * v15))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

float kaldi::MatrixBase<float>::MinByCol(uint64_t a1, unsigned int a2, int a3)
{
  float v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD v7[3];
  _QWORD *v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v7[0] = &unk_1E5D3F508;
  v8 = v7;
  v3 = kaldi::MatrixBase<float>::AggByCol(a1, a2, (uint64_t)v7, a3);
  v4 = v8;
  if (v8 == v7)
  {
    v5 = 4;
    v4 = v7;
    goto LABEL_5;
  }
  if (v8)
  {
    v5 = 5;
LABEL_5:
    (*(void (**)(void))(*v4 + 8 * v5))();
  }
  return v3;
}

void sub_1ADC56E90(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v14;
  uint64_t v15;

  v14 = a13;
  if (a13 == &a10)
  {
    v15 = 4;
    v14 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v15 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v14 + 8 * v15))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

float32_t kaldi::MatrixBase<float>::MulElements(uint64_t a1, uint64_t a2)
{
  int v2;
  unint64_t v3;
  uint64_t v4;
  int v5;
  int v7;
  uint64_t v8;
  float32x4_t *v9;
  float32x4_t *v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  unint64_t i;
  float32x4_t v16;
  uint64_t v17;
  unint64_t v18;
  float32x4_t *v19;
  float32x4_t *v20;
  int v21;
  unint64_t v22;
  float32x4_t *v23;
  float32x4_t *v24;
  float32x4_t v25;
  float *v26;
  float *v27;
  float v28;

  v3 = *(unsigned int *)(a2 + 8);
  v2 = *(_DWORD *)(a2 + 12);
  v4 = *(int *)(a1 + 16);
  v5 = *(_DWORD *)(a2 + 16);
  if ((_DWORD)v3 == (_DWORD)v4 && (_DWORD)v3 == v5)
  {
    v18 = (v3 * v2);
    v19 = *(float32x4_t **)a2;
    v20 = *(float32x4_t **)a1;
    if ((int)v18 >= 4)
    {
      v22 = 4;
      v23 = *(float32x4_t **)a2;
      v24 = *(float32x4_t **)a1;
      do
      {
        v25 = *v23++;
        v16 = vmulq_f32(v25, *v24);
        *v24++ = v16;
        v22 += 4;
      }
      while (v22 <= v18);
      v21 = v18 & 0x7FFFFFFC;
    }
    else
    {
      v21 = 0;
    }
    if (v21 < (int)v18)
    {
      v26 = &v20->f32[v21];
      v27 = &v19->f32[v21];
      do
      {
        v28 = *v27++;
        v16.f32[0] = v28 * *v26;
        *v26++ = v16.f32[0];
        ++v21;
      }
      while ((int)v18 > v21);
    }
  }
  else if (v2 >= 1)
  {
    v7 = 0;
    v8 = v5;
    v9 = *(float32x4_t **)a2;
    v10 = *(float32x4_t **)a1;
    v11 = 4 * v4;
    v12 = 4 * v8;
    do
    {
      if ((int)v3 >= 4)
      {
        v14 = 0;
        for (i = 4; i <= v3; i += 4)
        {
          v16 = vmulq_f32(v9[v14], v10[v14]);
          v10[v14++] = v16;
        }
        v13 = v3 & 0x7FFFFFFC;
      }
      else
      {
        v13 = 0;
      }
      if (v13 < (int)v3)
      {
        v17 = v13;
        do
        {
          v16.f32[0] = v9->f32[v17] * v10->f32[v17];
          v10->i32[v17] = v16.i32[0];
          ++v13;
          ++v17;
        }
        while ((int)v3 > v13);
      }
      ++v7;
      v10 = (float32x4_t *)((char *)v10 + v11);
      v9 = (float32x4_t *)((char *)v9 + v12);
    }
    while (v7 != v2);
  }
  return v16.f32[0];
}

uint64_t kaldi::MatrixBase<float>::DivElements(uint64_t result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v2 = *((unsigned int *)a2 + 3);
  if ((int)v2 >= 1)
  {
    v3 = 0;
    v4 = 0;
    v5 = *((unsigned int *)a2 + 2);
    v6 = *a2;
    v7 = 4 * *((int *)a2 + 4);
    do
    {
      if ((int)v5 >= 1)
      {
        v8 = 0;
        v9 = *(_QWORD *)result + v3 * *(int *)(result + 16);
        do
        {
          *(float *)(v9 + 4 * v8) = *(float *)(v9 + 4 * v8) / *(float *)(v6 + 4 * v8);
          ++v8;
        }
        while (v5 != v8);
      }
      ++v4;
      v3 += 4;
      v6 += v7;
    }
    while (v4 != v2);
  }
  return result;
}

void kaldi::MatrixBase<float>::Scale(uint64_t a1, float a2)
{
  int v4;
  int v5;
  int v6;
  float *v7;

  if (a2 != 1.0)
  {
    v4 = *(_DWORD *)(a1 + 12);
    if (v4)
    {
      v5 = *(_DWORD *)(a1 + 8);
      if (v5 == *(_DWORD *)(a1 + 16))
      {
        cblas_sscal(v5 * v4, a2, *(float **)a1, 1);
      }
      else if (v4 >= 1)
      {
        v6 = 0;
        v7 = *(float **)a1;
        do
        {
          cblas_sscal(*(_DWORD *)(a1 + 8), a2, v7, 1);
          ++v6;
          v7 += *(int *)(a1 + 16);
        }
        while (v6 < *(_DWORD *)(a1 + 12));
      }
    }
  }
}

uint64_t kaldi::MatrixBase<float>::Max(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  float *v5;
  float *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  float *v10;
  float *v11;
  float v12;
  float v13;

  v2 = *(unsigned int *)(a2 + 12);
  if ((int)v2 >= 1)
  {
    v3 = 0;
    v4 = *(unsigned int *)(a2 + 8);
    v5 = *(float **)result;
    v6 = *(float **)a2;
    v7 = 4 * *(int *)(a2 + 16);
    v8 = 4 * *(int *)(result + 16);
    do
    {
      v9 = v4;
      v10 = v5;
      v11 = v6;
      if ((int)v4 >= 1)
      {
        do
        {
          v12 = *v11++;
          v13 = v12;
          if (*v10 >= v12)
            v13 = *v10;
          *v10++ = v13;
          --v9;
        }
        while (v9);
      }
      ++v3;
      v6 = (float *)((char *)v6 + v7);
      v5 = (float *)((char *)v5 + v8);
    }
    while (v3 != v2);
  }
  return result;
}

uint64_t kaldi::MatrixBase<float>::MulColsVec(uint64_t result, uint64_t *a2)
{
  int v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = *(_DWORD *)(result + 12);
  if (v2 >= 1)
  {
    v3 = 0;
    v4 = *((unsigned int *)a2 + 2);
    v5 = *a2;
    do
    {
      if ((int)v4 >= 1)
      {
        v6 = 0;
        v7 = *(_QWORD *)result + 4 * *(_DWORD *)(result + 16) * v3;
        do
        {
          *(float *)(v7 + 4 * v6) = *(float *)(v5 + 4 * v6) * *(float *)(v7 + 4 * v6);
          ++v6;
        }
        while (v4 != v6);
      }
      ++v3;
    }
    while (v3 != v2);
  }
  return result;
}

uint64_t kaldi::MatrixBase<float>::MulRowsVec(uint64_t result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  float v6;
  float *v7;
  uint64_t v8;

  v2 = *((unsigned int *)a2 + 2);
  if ((int)v2 >= 1)
  {
    v3 = 0;
    v4 = *(unsigned int *)(result + 8);
    v5 = *a2;
    do
    {
      if ((int)v4 >= 1)
      {
        v6 = *(float *)(v5 + 4 * v3);
        v7 = (float *)(*(_QWORD *)result + 4 * *(_DWORD *)(result + 16) * (int)v3);
        v8 = v4;
        do
        {
          *v7 = v6 * *v7;
          ++v7;
          --v8;
        }
        while (v8);
      }
      ++v3;
    }
    while (v3 != v2);
  }
  return result;
}

void kaldi::MatrixBase<float>::MulRowsGroupMat(uint64_t a1, uint64_t a2)
{
  int v2;
  int v5;
  int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  float *v10;

  v2 = *(_DWORD *)(a2 + 12);
  if (v2 >= 1)
  {
    v5 = 0;
    v6 = *(_DWORD *)(a1 + 8);
    v7 = v6 / *(_DWORD *)(a2 + 8);
    v8 = (v6 / v7);
    do
    {
      if ((int)v8 >= 1)
      {
        v9 = 0;
        v10 = (float *)(*(_QWORD *)a1 + 4 * *(_DWORD *)(a1 + 16) * v5);
        do
        {
          cblas_sscal(v7, *(const float *)(*(_QWORD *)a2 + 4 * v5 * *(_DWORD *)(a2 + 16) + 4 * v9++), v10, 1);
          v10 += v7;
        }
        while (v8 != v9);
      }
      ++v5;
    }
    while (v5 != v2);
  }
}

uint64_t kaldi::MatrixBase<float>::InvertElements(uint64_t result)
{
  int v1;
  int v2;
  uint64_t v3;
  float *v4;
  uint64_t v5;

  v1 = *(_DWORD *)(result + 12);
  if (v1 >= 1)
  {
    v2 = 0;
    v3 = *(unsigned int *)(result + 8);
    do
    {
      if ((int)v3 >= 1)
      {
        v4 = (float *)(*(_QWORD *)result + 4 * *(_DWORD *)(result + 16) * v2);
        v5 = v3;
        do
        {
          *v4 = 1.0 / *v4;
          ++v4;
          --v5;
        }
        while (v5);
      }
      ++v2;
    }
    while (v2 != v1);
  }
  return result;
}

uint64_t kaldi::MatrixBase<float>::CopyCols(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  int v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;

  v3 = *(_DWORD *)(result + 12);
  if (v3 >= 1)
  {
    v4 = 0;
    v5 = *(unsigned int *)(result + 8);
    v6 = *a3;
    v7 = *a2;
    v8 = *(_QWORD *)result;
    v9 = *((int *)a2 + 4);
    v10 = 4 * *(int *)(result + 16);
    do
    {
      if ((int)v5 >= 1)
      {
        v11 = 0;
        do
        {
          result = *(unsigned int *)(v6 + v11);
          if ((result & 0x80000000) != 0)
            v12 = 0;
          else
            v12 = *(_DWORD *)(v7 + 4 * result);
          *(_DWORD *)(v8 + v11) = v12;
          v11 += 4;
        }
        while (4 * v5 != v11);
      }
      ++v4;
      v7 += 4 * v9;
      v8 += v10;
    }
    while (v4 != v3);
  }
  return result;
}

void kaldi::MatrixBase<float>::CopyRows(char **a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t v7;
  int v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  int v12;

  v3 = *((unsigned int *)a1 + 3);
  if ((int)v3 >= 1)
  {
    v7 = 0;
    v8 = *((_DWORD *)a1 + 2);
    v9 = *a1;
    v10 = 4 * v3;
    v11 = 4 * *((int *)a1 + 4);
    do
    {
      v12 = *(_DWORD *)(*a3 + v7);
      if (v12 < 0)
        bzero(v9, 4 * *((int *)a1 + 2));
      else
        cblas_scopy(v8, (const float *)(*(_QWORD *)a2 + 4 * *(_DWORD *)(a2 + 16) * v12), 1, (float *)v9, 1);
      v7 += 4;
      v9 += v11;
    }
    while (v10 != v7);
  }
}

unint64_t kaldi::MatrixBase<float>::CopyIndexedItems(unint64_t result, uint64_t *a2, uint64_t a3, uint64_t a4, unint64_t a5, int a6)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  _DWORD *v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  int v16;
  int v17;

  v6 = *(unsigned int *)(result + 12);
  if ((int)v6 >= 1)
  {
    v7 = 0;
    v8 = 0;
    v9 = *a2;
    v10 = *((_DWORD *)a2 + 4);
    v11 = *(unsigned int *)(result + 8);
    v12 = *(_DWORD **)result;
    v13 = *(_DWORD *)(result + 16) - (int)v11;
    v14 = *(_DWORD *)(result + 8);
    do
    {
      v15 = v11;
      result = v7;
      if (v14 >= 1)
      {
        do
        {
          v16 = *(_DWORD *)(a4 + 4 * (int)(result % a5)) + *(_DWORD *)(a3 + 4 * (int)(result % a5)) * v10;
          if (v16 < 0)
            v17 = 0;
          else
            v17 = *(_DWORD *)(v9 + 4 * (int)(v16 + result / a5 * a6));
          *v12++ = v17;
          ++result;
          --v15;
        }
        while (v15);
      }
      ++v8;
      v12 += v13;
      v7 += (int)v11;
    }
    while (v8 != v6);
  }
  return result;
}

void kaldi::MatrixBase<float>::CopySelectedRows(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v4;
  uint64_t v8;
  int v9;
  float *v10;
  uint64_t v11;

  v4 = *(unsigned int *)(a3 + 8);
  if ((int)v4 >= 1)
  {
    v8 = 0;
    v9 = *(_DWORD *)(a1 + 8);
    v10 = *(float **)a1;
    v11 = 4 * *(int *)(a1 + 16);
    do
    {
      if (((int)*(float *)(*(_QWORD *)a3 + 4 * v8) == 1) != a4)
        cblas_scopy(v9, (const float *)(*(_QWORD *)a2 + 4 * *(_DWORD *)(a2 + 16) * (int)v8), 1, v10, 1);
      ++v8;
      v10 = (float *)((char *)v10 + v11);
    }
    while (v4 != v8);
  }
}

uint64_t kaldi::MatrixBase<float>::ApplyFloor(uint64_t a1, float a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  float *v7;
  uint64_t v8;
  uint64_t v9;
  float *v10;

  v2 = *(unsigned int *)(a1 + 12);
  if ((int)v2 < 1)
    return 0;
  v4 = 0;
  result = 0;
  v6 = *(unsigned int *)(a1 + 8);
  v7 = *(float **)a1;
  v8 = 4 * *(int *)(a1 + 16);
  do
  {
    v9 = v6;
    v10 = v7;
    if ((int)v6 >= 1)
    {
      do
      {
        if (*v10 < a2)
        {
          *v10 = a2;
          result = (result + 1);
        }
        ++v10;
        --v9;
      }
      while (v9);
    }
    ++v4;
    v7 = (float *)((char *)v7 + v8);
  }
  while (v4 != v2);
  return result;
}

uint64_t kaldi::MatrixBase<float>::ApplyCeiling(uint64_t a1, float a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  float *v7;
  uint64_t v8;
  uint64_t v9;
  float *v10;

  v2 = *(unsigned int *)(a1 + 12);
  if ((int)v2 < 1)
    return 0;
  v4 = 0;
  result = 0;
  v6 = *(unsigned int *)(a1 + 8);
  v7 = *(float **)a1;
  v8 = 4 * *(int *)(a1 + 16);
  do
  {
    v9 = v6;
    v10 = v7;
    if ((int)v6 >= 1)
    {
      do
      {
        if (*v10 > a2)
        {
          *v10 = a2;
          result = (result + 1);
        }
        ++v10;
        --v9;
      }
      while (v9);
    }
    ++v4;
    v7 = (float *)((char *)v7 + v8);
  }
  while (v4 != v2);
  return result;
}

void kaldi::MatrixBase<float>::ApplyLog(uint64_t a1)
{
  int v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  int v6;
  int v7;
  uint64_t v8;

  if (*(int *)(a1 + 12) >= 1)
  {
    v2 = 0;
    do
    {
      v3 = *(_QWORD *)a1 + 4 * *(_DWORD *)(a1 + 16) * v2;
      v4 = *(_DWORD *)(a1 + 8);
      v7 = 0;
      v8 = 0;
      v5 = v3;
      v6 = v4;
      kaldi::VectorBase<float>::ApplyLog((uint64_t)&v5);
      ++v2;
    }
    while (v2 < *(_DWORD *)(a1 + 12));
  }
}

void kaldi::MatrixBase<float>::ApplyExp(uint64_t a1)
{
  int v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  int v6;
  int v7;
  uint64_t v8;

  if (*(int *)(a1 + 12) >= 1)
  {
    v2 = 0;
    do
    {
      v3 = *(_QWORD *)a1 + 4 * *(_DWORD *)(a1 + 16) * v2;
      v4 = *(_DWORD *)(a1 + 8);
      v7 = 0;
      v8 = 0;
      v5 = v3;
      v6 = v4;
      kaldi::VectorBase<float>::ApplyExp((uint64_t)&v5);
      ++v2;
    }
    while (v2 < *(_DWORD *)(a1 + 12));
  }
}

void kaldi::MatrixBase<float>::ApplyPow(uint64_t a1, float a2)
{
  int v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  int v8;
  int v9;
  uint64_t v10;

  if (*(int *)(a1 + 12) >= 1)
  {
    v4 = 0;
    do
    {
      v5 = *(_QWORD *)a1 + 4 * *(_DWORD *)(a1 + 16) * v4;
      v6 = *(_DWORD *)(a1 + 8);
      v9 = 0;
      v10 = 0;
      v7 = v5;
      v8 = v6;
      kaldi::VectorBase<float>::ApplyPow((uint64_t)&v7, a2);
      ++v4;
    }
    while (v4 < *(_DWORD *)(a1 + 12));
  }
}

void kaldi::MatrixBase<float>::ApplyPowAbs(uint64_t a1, int a2, float a3)
{
  int v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  int v10;
  int v11;
  uint64_t v12;

  if (*(int *)(a1 + 12) >= 1)
  {
    v6 = 0;
    do
    {
      v7 = *(_QWORD *)a1 + 4 * *(_DWORD *)(a1 + 16) * v6;
      v8 = *(_DWORD *)(a1 + 8);
      v11 = 0;
      v12 = 0;
      v9 = v7;
      v10 = v8;
      kaldi::VectorBase<float>::ApplyPowAbs((uint64_t)&v9, a2, a3);
      ++v6;
    }
    while (v6 < *(_DWORD *)(a1 + 12));
  }
}

uint64_t kaldi::MatrixBase<float>::ApplyHeaviside(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  float *v4;
  uint64_t v5;
  uint64_t v6;
  float *v7;
  float v8;

  v1 = *(unsigned int *)(result + 12);
  if ((int)v1 >= 1)
  {
    v2 = 0;
    v3 = *(unsigned int *)(result + 8);
    v4 = *(float **)result;
    v5 = 4 * *(int *)(result + 16);
    do
    {
      v6 = v3;
      v7 = v4;
      if ((int)v3 >= 1)
      {
        do
        {
          if (*v7 <= 0.0)
            v8 = 0.0;
          else
            v8 = 1.0;
          *v7++ = v8;
          --v6;
        }
        while (v6);
      }
      ++v2;
      v4 = (float *)((char *)v4 + v5);
    }
    while (v2 != v1);
  }
  return result;
}

uint64_t kaldi::MatrixBase<float>::Add(uint64_t result, float a2)
{
  uint64_t v2;
  uint64_t v3;
  float *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  float *v8;

  v2 = *(unsigned int *)(result + 12);
  if ((int)v2 >= 1)
  {
    v3 = 0;
    v4 = *(float **)result;
    v5 = *(unsigned int *)(result + 8);
    v6 = 4 * *(int *)(result + 16);
    do
    {
      v7 = v5;
      v8 = v4;
      if ((int)v5 >= 1)
      {
        do
        {
          *v8 = *v8 + a2;
          ++v8;
          --v7;
        }
        while (v7);
      }
      ++v3;
      v4 = (float *)((char *)v4 + v6);
    }
    while (v3 != v2);
  }
  return result;
}

void kaldi::MatrixBase<float>::Sigmoid(uint64_t a1, uint64_t a2)
{
  int v4;
  int v5;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v5 = *(_DWORD *)(a1 + 8);
  v4 = *(_DWORD *)(a1 + 12);
  if (v5 == *(_DWORD *)(a1 + 16) && v5 == *(_DWORD *)(a2 + 16))
  {
    v8 = *(_QWORD *)a2;
    v14 = 0;
    v11 = 0;
    v12 = v8;
    v13 = (v5 * v4);
    v9 = *(_QWORD *)a1;
    v10 = v13;
    kaldi::VectorBase<float>::Sigmoid((uint64_t)&v9, (const void **)&v12);
  }
  else if (v4 >= 1)
  {
    v7 = 0;
    do
    {
      v13 = 0;
      v14 = 0;
      v12 = *(_QWORD *)a2 + 4 * *(_DWORD *)(a2 + 16) * v7;
      LODWORD(v13) = *(_DWORD *)(a2 + 8);
      v10 = 0;
      v11 = 0;
      v9 = *(_QWORD *)a1 + 4 * *(_DWORD *)(a1 + 16) * v7;
      LODWORD(v10) = *(_DWORD *)(a1 + 8);
      kaldi::VectorBase<float>::Sigmoid((uint64_t)&v9, (const void **)&v12);
      ++v7;
    }
    while (v7 < *(_DWORD *)(a1 + 12));
  }
}

void kaldi::MatrixBase<float>::GroupPnorm(uint64_t a1, uint64_t *a2, float a3)
{
  int v6;
  int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t i;
  uint64_t v12;
  int v13;
  float v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  int v19;
  uint64_t v20;

  v15 = *((_DWORD *)a2 + 3);
  if (v15 >= 1)
  {
    v6 = 0;
    v7 = *(_DWORD *)(a1 + 8);
    v8 = *((_DWORD *)a2 + 2) / v7;
    v16 = v7;
    do
    {
      if (v7 >= 1)
      {
        v9 = 0;
        v10 = 0;
        for (i = 0; i != v16; ++i)
        {
          v12 = *a2;
          v13 = *((_DWORD *)a2 + 4);
          v19 = 0;
          v20 = 0;
          v17 = v12 + 4 * v6 * v13 + v10;
          v18 = v8;
          v14 = kaldi::VectorBase<float>::Norm((uint64_t)&v17, a3);
          v7 = v16;
          *(float *)(*(_QWORD *)a1 + 4 * v6 * *(_DWORD *)(a1 + 16) + 4 * i) = v14;
          v10 += 4 * v8;
          v9 += v8;
        }
      }
      ++v6;
    }
    while (v6 != v15);
  }
}

void kaldi::MatrixBase<float>::GroupPnormDeriv(uint64_t a1, uint64_t *a2, uint64_t *a3, float a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  float v13;
  BOOL v14;
  float v15;
  uint64_t v16;
  uint64_t v17;
  float v18;
  float v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  uint64_t v29;
  uint64_t v30;

  v5 = *((unsigned int *)a2 + 2);
  v6 = *((unsigned int *)a2 + 3);
  if (a4 == 1.0)
  {
    if ((int)v6 >= 1)
    {
      v7 = 0;
      v8 = 0;
      v9 = *a2;
      v10 = 4 * *((int *)a2 + 4);
      do
      {
        if ((int)v5 >= 1)
        {
          v11 = 0;
          v12 = *(_QWORD *)a1 + v7 * *(int *)(a1 + 16);
          do
          {
            v13 = *(float *)(v9 + 4 * v11);
            v14 = v13 == 0.0;
            if (v13 <= 0.0)
              v15 = -1.0;
            else
              v15 = 1.0;
            if (v14)
              v15 = 0.0;
            *(float *)(v12 + 4 * v11++) = v15;
          }
          while (v5 != v11);
        }
        ++v8;
        v7 += 4;
        v9 += v10;
      }
      while (v8 != v6);
    }
  }
  else if ((int)v6 >= 1)
  {
    v16 = 0;
    v17 = 0;
    v29 = *((int *)a3 + 4);
    v30 = *a3;
    v18 = a4 + -1.0;
    v19 = 1.0 - a4;
    v20 = (int)v5 / *((_DWORD *)a3 + 2);
    do
    {
      if ((int)v5 >= 1)
      {
        v21 = 0;
        v22 = *(_QWORD *)a1 + v16 * *(int *)(a1 + 16);
        v23 = *a2 + v16 * *((int *)a2 + 4);
        do
        {
          v24 = *(float *)(v30 + 4 * v17 * v29 + 4 * ((int)v21 / v20));
          v25 = 0.0;
          if (v24 != 0.0)
          {
            v26 = *(float *)(v23 + 4 * v21);
            v27 = powf(fabsf(v26), v18);
            v28 = powf(v24, v19) * v27;
            v25 = -v28;
            if (v26 >= 0.0)
              v25 = v28;
          }
          *(float *)(v22 + 4 * v21++) = v25;
        }
        while (v5 != v21);
      }
      ++v17;
      v16 += 4;
    }
    while (v17 != v6);
  }
}

void kaldi::MatrixBase<float>::Tanh(uint64_t a1, uint64_t a2)
{
  int v4;
  int v5;
  int v7;
  const float *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  const float *v12;
  uint64_t v13;
  uint64_t v14;

  v5 = *(_DWORD *)(a1 + 8);
  v4 = *(_DWORD *)(a1 + 12);
  if (v5 == *(_DWORD *)(a1 + 16) && v5 == *(_DWORD *)(a2 + 16))
  {
    v8 = *(const float **)a2;
    v14 = 0;
    v11 = 0;
    v12 = v8;
    v13 = (v5 * v4);
    v9 = *(_QWORD *)a1;
    v10 = v13;
    kaldi::VectorBase<float>::Tanh((uint64_t)&v9, &v12);
  }
  else if (v4 >= 1)
  {
    v7 = 0;
    do
    {
      v13 = 0;
      v14 = 0;
      v12 = (const float *)(*(_QWORD *)a2 + 4 * *(_DWORD *)(a2 + 16) * v7);
      LODWORD(v13) = *(_DWORD *)(a2 + 8);
      v10 = 0;
      v11 = 0;
      v9 = *(_QWORD *)a1 + 4 * *(_DWORD *)(a1 + 16) * v7;
      LODWORD(v10) = *(_DWORD *)(a1 + 8);
      kaldi::VectorBase<float>::Tanh((uint64_t)&v9, &v12);
      ++v7;
    }
    while (v7 < *(_DWORD *)(a1 + 12));
  }
}

void kaldi::MatrixBase<float>::ApplyTanh(uint64_t a1)
{
  int v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  int v6;
  int v7;
  uint64_t v8;

  if (*(int *)(a1 + 12) >= 1)
  {
    v2 = 0;
    do
    {
      v3 = *(_QWORD *)a1 + 4 * *(_DWORD *)(a1 + 16) * v2;
      v4 = *(_DWORD *)(a1 + 8);
      v7 = 0;
      v8 = 0;
      v5 = v3;
      v6 = v4;
      kaldi::VectorBase<float>::ApplyTanh((uint64_t)&v5);
      ++v2;
    }
    while (v2 < *(_DWORD *)(a1 + 12));
  }
}

uint64_t *kaldi::MatrixBase<float>::DiffSigmoid(uint64_t *result, uint64_t *a2, uint64_t *a3)
{
  int v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  float v12;

  v3 = *((_DWORD *)result + 3);
  if (v3 >= 1)
  {
    v4 = 0;
    v5 = *((unsigned int *)result + 2);
    v6 = *a3;
    v7 = *a2;
    v8 = *result;
    v9 = 4 * *((int *)result + 4);
    v10 = 4 * *((int *)a2 + 4);
    v11 = 4 * *((int *)a3 + 4);
    do
    {
      if ((int)v5 >= 1)
      {
        result = 0;
        do
        {
          v12 = (1.0 - *(float *)((char *)result + v7))
              * (float)(*(float *)((char *)result + v6) * *(float *)((char *)result + v7));
          *(float *)((char *)result + v8) = v12;
          result = (uint64_t *)((char *)result + 4);
        }
        while ((uint64_t *)(4 * v5) != result);
      }
      ++v4;
      v8 += v9;
      v7 += v10;
      v6 += v11;
    }
    while (v4 != v3);
  }
  return result;
}

uint64_t *kaldi::MatrixBase<float>::DiffTanh(uint64_t *result, uint64_t *a2, uint64_t *a3)
{
  int v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  float v12;

  v3 = *((_DWORD *)result + 3);
  if (v3 >= 1)
  {
    v4 = 0;
    v5 = *((unsigned int *)result + 2);
    v6 = *a3;
    v7 = *a2;
    v8 = *result;
    v9 = 4 * *((int *)result + 4);
    v10 = 4 * *((int *)a2 + 4);
    v11 = 4 * *((int *)a3 + 4);
    do
    {
      if ((int)v5 >= 1)
      {
        result = 0;
        do
        {
          v12 = (1.0 - (float)(*(float *)((char *)result + v7) * *(float *)((char *)result + v7)))
              * *(float *)((char *)result + v6);
          *(float *)((char *)result + v8) = v12;
          result = (uint64_t *)((char *)result + 4);
        }
        while ((uint64_t *)(4 * v5) != result);
      }
      ++v4;
      v8 += v9;
      v7 += v10;
      v6 += v11;
    }
    while (v4 != v3);
  }
  return result;
}

uint64_t *kaldi::MatrixBase<float>::MaxoutForward(uint64_t *result, uint64_t *a2)
{
  int v2;
  uint64_t *v4;
  int v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  int v13;
  uint64_t v14;
  int v15;
  int v16;
  uint64_t v17;

  v2 = *((_DWORD *)a2 + 3);
  if (v2 >= 1)
  {
    v4 = result;
    v5 = 0;
    LODWORD(v6) = *((_DWORD *)result + 2);
    v7 = *((_DWORD *)a2 + 2) / (int)v6;
    do
    {
      if ((int)v6 >= 1)
      {
        v8 = 0;
        v9 = 0;
        v10 = 0;
        do
        {
          v11 = *a2;
          v12 = *((_DWORD *)a2 + 4);
          v16 = 0;
          v17 = 0;
          v14 = v11 + 4 * v5 * v12 + v9;
          v15 = v7;
          result = kaldi::VectorBase<float>::Max(&v14);
          v2 = *((_DWORD *)v4 + 3);
          v6 = *((int *)v4 + 2);
          *(_DWORD *)(*v4 + 4 * v5 * *((_DWORD *)v4 + 4) + 4 * v10++) = v13;
          v9 += 4 * v7;
          v8 += v7;
        }
        while (v10 < v6);
      }
      ++v5;
    }
    while (v5 < v2);
  }
  return result;
}

uint64_t kaldi::MatrixBase<float>::MaxoutDerivative(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  float v14;

  v3 = *((unsigned int *)a2 + 3);
  if ((int)v3 >= 1)
  {
    v4 = 0;
    v5 = 0;
    v6 = *(unsigned int *)(result + 8);
    v7 = *a2;
    v8 = *a3;
    v9 = *((int *)a3 + 4);
    v10 = 4 * *((int *)a2 + 4);
    v11 = (int)v6 / *((_DWORD *)a3 + 2);
    do
    {
      if ((int)v6 >= 1)
      {
        v12 = 0;
        v13 = *(_QWORD *)result + v4 * *(int *)(result + 16);
        do
        {
          if (*(float *)(v7 + 4 * v12) == *(float *)(v8 + 4 * v5 * v9 + 4 * ((int)v12 / v11)))
            v14 = 1.0;
          else
            v14 = 0.0;
          *(float *)(v13 + 4 * v12++) = v14;
        }
        while (v6 != v12);
      }
      ++v5;
      v4 += 4;
      v7 += v10;
    }
    while (v5 != v3);
  }
  return result;
}

uint64_t kaldi::MatrixBase<float>::AddToDiag(uint64_t result, float a2)
{
  uint64_t v2;
  int v3;
  float *v4;
  uint64_t v5;

  LODWORD(v2) = *(_DWORD *)(result + 8);
  v3 = *(_DWORD *)(result + 12);
  if ((int)v2 >= v3)
    v2 = v3;
  else
    v2 = v2;
  if ((int)v2 >= 1)
  {
    v4 = *(float **)result;
    v5 = 4 * *(int *)(result + 16) + 4;
    do
    {
      *v4 = *v4 + a2;
      v4 = (float *)((char *)v4 + v5);
      --v2;
    }
    while (v2);
  }
  return result;
}

uint64_t kaldi::MatrixBase<float>::AddToDiag(uint64_t result, uint64_t *a2, float a3, float a4)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  float *v8;
  uint64_t v9;

  LODWORD(v4) = *(_DWORD *)(result + 8);
  v5 = *(_DWORD *)(result + 12);
  if ((int)v4 >= v5)
    v4 = v5;
  else
    v4 = v4;
  if ((int)v4 >= 1)
  {
    v6 = 0;
    v7 = *a2;
    v8 = *(float **)result;
    v9 = 4 * *(int *)(result + 16) + 4;
    do
    {
      *v8 = (float)(*v8 * a4) + (float)(a3 * *(float *)(v7 + 4 * v6++));
      v8 = (float *)((char *)v8 + v9);
    }
    while (v4 != v6);
  }
  return result;
}

uint64_t kaldi::MatrixBase<float>::AddIndexedRows(uint64_t result, uint64_t *a2, uint64_t a3, float a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  float *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD v20[34];

  v4 = *((unsigned int *)a2 + 3);
  if ((int)v4 >= 1)
  {
    v5 = 0;
    v6 = 0;
    v7 = *((unsigned int *)a2 + 2);
    v8 = *(int *)(result + 8);
    v9 = *(unsigned int *)(result + 8);
    v10 = *a2;
    v11 = *((int *)a2 + 4);
    do
    {
      if ((int)v7 >= 1)
      {
        v12 = 0;
        v13 = 0;
        v14 = *(_QWORD *)a3 + v5 * *(int *)(a3 + 16);
        do
        {
          v15 = (int)*(float *)(v10 + 4 * v6 * v11 + 4 * v13);
          if ((v15 & 0x80000000) == 0)
          {
            if (*(_DWORD *)(result + 12) <= v15)
            {
              kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v20);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"index ", 6);
              v19 = (_QWORD *)std::ostream::operator<<();
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)" is too big for matrix that has rows = ", 39);
              std::ostream::operator<<();
              kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v20);
            }
            if ((int)v8 >= 1)
            {
              v16 = (float *)(*(_QWORD *)result + 4 * *(_DWORD *)(result + 16) * v15);
              v17 = v9;
              v18 = v12;
              do
              {
                *v16 = *v16 + (float)(a4 * *(float *)(v14 + 4 * v18));
                ++v16;
                ++v18;
                --v17;
              }
              while (v17);
            }
          }
          ++v13;
          v12 += v8;
        }
        while (v13 != v7);
      }
      ++v6;
      v5 += 4;
    }
    while (v6 != v4);
  }
  return result;
}

void kaldi::MatrixBase<float>::AddDiagVecMat(uint64_t a1, float **a2, uint64_t a3, int a4, float a5, float a6)
{
  int v11;
  int v12;
  int v13;
  int v14;
  float *v15;
  const float *v16;
  float *v17;
  uint64_t v18;
  uint64_t v19;
  float v20;

  if (a6 != 1.0)
    kaldi::MatrixBase<float>::Scale(a1, a6);
  if (a4 == 111)
  {
    v11 = *(_DWORD *)(a1 + 8);
    v12 = *(_DWORD *)(a1 + 12);
  }
  else
  {
    v12 = *(_DWORD *)(a3 + 8);
    v11 = *(_DWORD *)(a3 + 12);
  }
  v13 = *(_DWORD *)(a3 + 16);
  if (a4 == 112)
    v14 = *(_DWORD *)(a3 + 16);
  else
    v14 = 1;
  if (v12 >= 1)
  {
    v15 = *a2;
    v16 = *(const float **)a3;
    v17 = *(float **)a1;
    if (a4 == 112)
      v13 = 1;
    v18 = 4 * v13;
    v19 = 4 * *(int *)(a1 + 16);
    do
    {
      v20 = *v15++;
      cblas_saxpy(v11, v20 * a5, v16, v14, v17, 1);
      v16 = (const float *)((char *)v16 + v18);
      v17 = (float *)((char *)v17 + v19);
      --v12;
    }
    while (v12);
  }
}

void kaldi::MatrixBase<float>::AddMatDiagVec(uint64_t a1, uint64_t a2, int a3, float **a4, float a5, float a6)
{
  int v11;
  int v12;
  int v13;
  int v14;
  BOOL v15;
  int v16;
  float *v17;
  const float *v18;
  float *v19;
  uint64_t v20;
  float v21;

  if (a6 != 1.0)
    kaldi::MatrixBase<float>::Scale(a1, a6);
  if (a3 == 111)
  {
    v12 = *(_DWORD *)(a1 + 8);
    v11 = *(_DWORD *)(a1 + 12);
  }
  else
  {
    v11 = *(_DWORD *)(a2 + 8);
    v12 = *(_DWORD *)(a2 + 12);
  }
  v13 = *(_DWORD *)(a2 + 16);
  if (a3 == 112)
    v14 = 1;
  else
    v14 = *(_DWORD *)(a2 + 16);
  if (v11)
    v15 = v12 < 1;
  else
    v15 = 1;
  if (!v15)
  {
    v16 = *(_DWORD *)(a1 + 16);
    v17 = *a4;
    v18 = *(const float **)a2;
    v19 = *(float **)a1;
    if (a3 != 112)
      v13 = 1;
    v20 = 4 * v13;
    do
    {
      v21 = *v17++;
      cblas_saxpy(v11, v21 * a5, v18, v14, v19++, v16);
      v18 = (const float *)((char *)v18 + v20);
      --v12;
    }
    while (v12);
  }
}

uint64_t kaldi::MatrixBase<float>::AddMatEwpMat(uint64_t result, uint64_t a2, int a3, uint64_t a4, int a5, float a6, float a7)
{
  uint64_t v7;
  int v8;
  uint64_t v9;
  int v10;
  int v11;
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  float *v16;
  uint64_t v17;
  uint64_t v18;
  float *v19;
  uint64_t v20;
  float *v21;
  float *v22;
  float *v23;
  int v24;

  v8 = *(_DWORD *)(result + 8);
  v7 = *(unsigned int *)(result + 12);
  if ((int)v7 >= 1)
  {
    v9 = 0;
    if (a5 == 112)
      v10 = 1;
    else
      v10 = *(_DWORD *)(a4 + 16);
    if (a5 == 112)
      v11 = *(_DWORD *)(a4 + 16);
    else
      v11 = 1;
    if (a3 == 112)
      v12 = 1;
    else
      v12 = *(_DWORD *)(a2 + 16);
    if (a3 == 112)
      v13 = *(_DWORD *)(a2 + 16);
    else
      v13 = 1;
    v14 = *(_QWORD *)result;
    v15 = *(int *)(result + 16);
    v16 = *(float **)a2;
    v17 = 4 * v10;
    v18 = 4 * v11;
    v19 = *(float **)a4;
    v20 = 4 * v12;
    result = 4 * v13;
    do
    {
      if (v8 >= 1)
      {
        v21 = (float *)(v14 + 4 * v9 * v15);
        v22 = v16;
        v23 = v19;
        v24 = v8;
        do
        {
          *v21 = (float)((float)(*v22 * a6) * *v23) + (float)(a7 * *v21);
          ++v21;
          v23 = (float *)((char *)v23 + v18);
          v22 = (float *)((char *)v22 + result);
          --v24;
        }
        while (v24);
      }
      ++v9;
      v19 = (float *)((char *)v19 + v17);
      v16 = (float *)((char *)v16 + v20);
    }
    while (v9 != v7);
  }
  return result;
}

uint64_t kaldi::MatrixBase<float>::FirstNonZeroColumn(uint64_t *a1, float a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;

  v2 = 0;
  v4 = *((unsigned int *)a1 + 2);
  v3 = *((unsigned int *)a1 + 3);
  v5 = *a1;
  v6 = 4 * *((int *)a1 + 4);
  result = 0x7FFFFFFFLL;
  do
  {
    v8 = 0;
    while (fabsf(*(float *)(v5 + 4 * v8)) <= a2)
    {
      if (v4 == ++v8)
        goto LABEL_9;
    }
    if ((int)v8 >= (int)result)
      result = result;
    else
      result = v8;
LABEL_9:
    ++v2;
    v5 += v6;
  }
  while (v2 != v3);
  return result;
}

void kaldi::MatrixBase<float>::Write(_DWORD *a1, _QWORD *a2, int a3, int a4)
{
  const std::string::value_type *v7;
  int v8;
  uint64_t v9;
  _QWORD *v10;
  int v11;
  std::string v12;
  _QWORD v13[34];

  if (*(_DWORD *)((char *)a2 + *(_QWORD *)(*a2 - 24) + 32))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v13);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v13, "Failed to write matrix to stream: stream not good");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v13);
  }
  if (a3)
  {
    memset(&v12, 0, sizeof(v12));
    std::string::append(&v12, "F");
    if (a4)
      v7 = "N";
    else
      v7 = "M";
    std::string::append(&v12, v7);
    kaldi::WriteToken(a2, 1, (char *)&v12);
    kaldi::WriteBasicType<int>(a2, 1);
    kaldi::WriteBasicType<int>(a2, 1);
    if (a4)
    {
      kaldi::WriteBasicType<int>(a2, 1);
      if (!fst::AlignOutput(a2))
      {
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v13);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"Could not align output", 22);
        kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v13);
      }
    }
    else if (a1[4] != a1[2])
    {
      if ((int)a1[3] >= 1)
      {
        v11 = 0;
        do
        {
          std::ostream::write();
          ++v11;
        }
        while (v11 < a1[3]);
      }
      goto LABEL_23;
    }
    std::ostream::write();
LABEL_23:
    if (*(_DWORD *)((char *)a2 + *(_QWORD *)(*a2 - 24) + 32))
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v13);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"Failed to write matrix to stream", 32);
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v13);
    }
    if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v12.__r_.__value_.__l.__data_);
    return;
  }
  if (a1[2])
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)" [", 2);
    if ((int)a1[3] >= 1)
    {
      v8 = 0;
      do
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"\n  ", 3);
        if ((int)a1[2] >= 1)
        {
          v9 = 0;
          do
          {
            v10 = (_QWORD *)std::ostream::operator<<();
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)" ", 1);
            ++v9;
          }
          while (v9 < (int)a1[2]);
        }
        ++v8;
      }
      while (v8 < a1[3]);
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"]\n", 2);
  }
  else
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)" [ ]\n", 5);
  }
}

void sub_1ADC58918(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

double kaldi::SubMatrix<double>::SubMatrix(uint64_t a1, uint64_t a2, int a3, int a4, int a5, int a6)
{
  double result;
  int v7;
  int v8;

  result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 8) = a6;
  *(_DWORD *)(a1 + 12) = a4;
  v7 = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  v8 = *(_DWORD *)(a2 + 16) * a3;
  *(_QWORD *)a1 = *(_QWORD *)a2 + 8 * a5 + 8 * v8;
  *(_DWORD *)(a1 + 20) = v7 - a5 - v8;
  return result;
}

void kaldi::MatrixBase<double>::Scale(uint64_t a1, double a2)
{
  int v4;
  int v5;
  int v6;
  double *v7;

  if (a2 != 1.0)
  {
    v4 = *(_DWORD *)(a1 + 12);
    if (v4)
    {
      v5 = *(_DWORD *)(a1 + 8);
      if (v5 == *(_DWORD *)(a1 + 16))
      {
        cblas_dscal(v5 * v4, a2, *(double **)a1, 1);
      }
      else if (v4 >= 1)
      {
        v6 = 0;
        v7 = *(double **)a1;
        do
        {
          cblas_dscal(*(_DWORD *)(a1 + 8), a2, v7, 1);
          ++v6;
          v7 += *(int *)(a1 + 16);
        }
        while (v6 < *(_DWORD *)(a1 + 12));
      }
    }
  }
}

void kaldi::MatrixBase<double>::Write(_DWORD *a1, _QWORD *a2, int a3, int a4)
{
  const std::string::value_type *v7;
  int v8;
  uint64_t v9;
  _QWORD *v10;
  int v11;
  std::string v12;
  _QWORD v13[34];

  if (*(_DWORD *)((char *)a2 + *(_QWORD *)(*a2 - 24) + 32))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v13);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v13, "Failed to write matrix to stream: stream not good");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v13);
  }
  if (a3)
  {
    memset(&v12, 0, sizeof(v12));
    std::string::append(&v12, "D");
    if (a4)
      v7 = "N";
    else
      v7 = "M";
    std::string::append(&v12, v7);
    kaldi::WriteToken(a2, 1, (char *)&v12);
    kaldi::WriteBasicType<int>(a2, 1);
    kaldi::WriteBasicType<int>(a2, 1);
    if (a4)
    {
      kaldi::WriteBasicType<int>(a2, 1);
      if (!fst::AlignOutput(a2))
      {
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v13);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"Could not align output", 22);
        kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v13);
      }
    }
    else if (a1[4] != a1[2])
    {
      if ((int)a1[3] >= 1)
      {
        v11 = 0;
        do
        {
          std::ostream::write();
          ++v11;
        }
        while (v11 < a1[3]);
      }
      goto LABEL_23;
    }
    std::ostream::write();
LABEL_23:
    if (*(_DWORD *)((char *)a2 + *(_QWORD *)(*a2 - 24) + 32))
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v13);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"Failed to write matrix to stream", 32);
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v13);
    }
    if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v12.__r_.__value_.__l.__data_);
    return;
  }
  if (a1[2])
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)" [", 2);
    if ((int)a1[3] >= 1)
    {
      v8 = 0;
      do
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"\n  ", 3);
        if ((int)a1[2] >= 1)
        {
          v9 = 0;
          do
          {
            v10 = (_QWORD *)std::ostream::operator<<();
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)" ", 1);
            ++v9;
          }
          while (v9 < (int)a1[2]);
        }
        ++v8;
      }
      while (v8 < a1[3]);
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"]\n", 2);
  }
  else
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)" [ ]\n", 5);
  }
}

void sub_1ADC58D38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t kaldi::SubMatrix<float>::SubMatrix(uint64_t result, uint64_t a2, int a3, int a4, int a5)
{
  *(_DWORD *)(result + 8) = a4;
  *(_QWORD *)result = a2;
  *(_DWORD *)(result + 12) = a3;
  *(_DWORD *)(result + 16) = a5;
  *(_DWORD *)(result + 20) = a5 * a3;
  *(_QWORD *)(result + 24) = 0;
  if (!a2)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
  }
  return result;
}

uint64_t kaldi::Quant3Levels<float>(uint64_t result, uint64_t a2, float a3)
{
  int v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  float v9;
  float v10;
  float v11;

  v3 = *(_DWORD *)(result + 12);
  if (v3 >= 1)
  {
    v4 = 0;
    v5 = *(unsigned int *)(result + 8);
    while ((int)v5 < 1)
    {
LABEL_11:
      if (++v4 == v3)
        return result;
    }
    v6 = 0;
    v7 = *(_QWORD *)a2 + 4 * *(_DWORD *)(a2 + 16) * v4;
    v8 = *(_QWORD *)result + 4 * *(_DWORD *)(result + 16) * v4;
    while (1)
    {
      v9 = *(float *)(v8 + 4 * v6);
      if (v9 >= a3)
        break;
      v10 = 0.0;
      if (v9 <= (float)-a3)
      {
        v11 = v9 + a3;
        v10 = -a3;
LABEL_9:
        *(float *)(v8 + 4 * v6) = v11;
      }
      *(float *)(v7 + 4 * v6++) = v10;
      if (v5 == v6)
        goto LABEL_11;
    }
    v11 = v9 - a3;
    v10 = a3;
    goto LABEL_9;
  }
  return result;
}

uint64_t kaldi::ZeroSmallValues<float>(uint64_t result, uint64_t a2, float a3)
{
  int v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  float v8;
  float *v9;

  v3 = *(_DWORD *)(result + 12);
  if (v3 >= 1)
  {
    v4 = 0;
    v5 = *(unsigned int *)(result + 8);
    while ((int)v5 < 1)
    {
LABEL_11:
      if (++v4 == v3)
        return result;
    }
    v6 = 0;
    v7 = *(_QWORD *)result + 4 * *(_DWORD *)(result + 16) * v4;
    while (1)
    {
      v8 = *(float *)(v7 + 4 * v6);
      if (v8 >= a3)
      {
        v9 = (float *)(*(_QWORD *)a2 + 4 * *(_DWORD *)(a2 + 16) * v4 + 4 * v6);
      }
      else
      {
        v9 = (float *)(*(_QWORD *)a2 + 4 * *(_DWORD *)(a2 + 16) * v4 + 4 * v6);
        if (v8 > (float)-a3)
          goto LABEL_10;
      }
      *v9 = v8;
      v9 = (float *)(v7 + 4 * v6);
LABEL_10:
      *v9 = 0.0;
      if (++v6 == v5)
        goto LABEL_11;
    }
  }
  return result;
}

void **kaldi::MatrixBase<float>::AddMatMat<signed char>(void **result, uint64_t a2, double a3, float a4, uint64_t a5, kaldi::quasar::Vocab *a6, int a7)
{
  void **v10;
  uint64_t v11;
  uint64_t v12;
  int v13[12];

  v10 = result;
  if (a7 == 111)
  {
    v11 = kaldi::QuantizedMatrixBase<short>::NumCols((uint64_t)a6);
    v12 = kaldi::quasar::Vocab::VocabSize(a6);
    kaldi::QuantizedMatrix<signed char>::QuantizedMatrix(v13, v11, v12);
    kaldi::QuantizedMatrixBase<signed char>::CopyFromMat(v13, a6, 112);
    if (*(_DWORD *)(a2 + 12))
      kaldi::QuantizedMatrixBase<signed char>::AddMatMat((uint64_t)v13, a2, v10, a4);
    return (void **)kaldi::QuantizedMatrixBase<signed char>::~QuantizedMatrixBase((uint64_t)v13);
  }
  else if (*(_DWORD *)(a2 + 12))
  {
    return (void **)kaldi::QuantizedMatrixBase<signed char>::AddMatMat((uint64_t)a6, a2, result, a4);
  }
  return result;
}

void sub_1ADC58F88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  kaldi::QuantizedMatrixBase<signed char>::~QuantizedMatrixBase((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void **kaldi::MatrixBase<float>::AddMatMat<short>(void **result, uint64_t a2, double a3, float a4, uint64_t a5, kaldi::quasar::Vocab *a6, int a7)
{
  void **v10;
  uint64_t v11;
  uint64_t v12;
  int v13[12];

  v10 = result;
  if (a7 == 111)
  {
    v11 = kaldi::QuantizedMatrixBase<short>::NumCols((uint64_t)a6);
    v12 = kaldi::quasar::Vocab::VocabSize(a6);
    kaldi::QuantizedMatrix<short>::QuantizedMatrix(v13, v11, v12);
    kaldi::QuantizedMatrixBase<short>::CopyFromMat(v13, a6, 112);
    if (*(_DWORD *)(a2 + 12))
      kaldi::QuantizedMatrixBase<short>::AddMatMat((uint64_t)v13, a2, v10, a4);
    return (void **)kaldi::QuantizedMatrixBase<short>::~QuantizedMatrixBase((uint64_t)v13);
  }
  else if (*(_DWORD *)(a2 + 12))
  {
    return (void **)kaldi::QuantizedMatrixBase<short>::AddMatMat((uint64_t)a6, a2, result, a4);
  }
  return result;
}

void sub_1ADC59070(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  kaldi::QuantizedMatrixBase<short>::~QuantizedMatrixBase((uint64_t)&a9);
  _Unwind_Resume(a1);
}

int *kaldi::MatrixBase<float>::AddMatMat<signed char>(int *result, uint64_t a2, double a3, float a4, uint64_t a5, uint64_t a6, int a7)
{
  _QWORD v7[34];

  if (a7 == 111)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v7);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v7, "Unimplemented");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v7);
  }
  if (*(_DWORD *)(a2 + 12))
    return (int *)kaldi::VectorwiseQuantizedMatrix<signed char>::AddMatMat(a6, a2, result, a4);
  return result;
}

int *kaldi::MatrixBase<float>::AddMatMat<short>(int *result, uint64_t a2, double a3, float a4, uint64_t a5, uint64_t a6, int a7)
{
  _QWORD v7[34];

  if (a7 == 111)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v7);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v7, "Unimplemented");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v7);
  }
  if (*(_DWORD *)(a2 + 12))
    return (int *)kaldi::VectorwiseQuantizedMatrix<short>::AddMatMat(a6, a2, result, a4);
  return result;
}

void kaldi::MatrixBase<float>::AddVecVec<float>(uint64_t a1, uint64_t a2, uint64_t a3, float a4)
{
  cblas_sger(CblasRowMajor, *(_DWORD *)(a2 + 8), *(_DWORD *)(a3 + 8), a4, *(const float **)a2, 1, *(const float **)a3, 1, *(float **)a1, *(_DWORD *)(a1 + 16));
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<float,int> *,false>(uint64_t result, unint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  _DWORD *v15;
  float v16;
  int v17;
  float v18;
  unint64_t v19;
  char v20;
  BOOL v21;
  float v22;
  float v23;
  int v24;
  int v25;

  v8 = result;
LABEL_2:
  v9 = v8;
LABEL_3:
  v10 = 1 - a4;
  while (2)
  {
    v8 = v9;
    v11 = v10;
    v12 = a2 - v9;
    v13 = (uint64_t)(a2 - v9) >> 3;
    switch(v13)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        v22 = *(float *)(a2 - 8);
        v23 = *(float *)v9;
        if (v22 < *(float *)v9)
        {
          v24 = *(_DWORD *)(v9 + 4);
          v25 = *(_DWORD *)(a2 - 4);
LABEL_34:
          *(float *)v9 = v22;
          *(float *)(a2 - 8) = v23;
          *(_DWORD *)(v9 + 4) = v25;
          *(_DWORD *)(a2 - 4) = v24;
          return result;
        }
        if (v23 >= v22)
        {
          v25 = *(_DWORD *)(a2 - 4);
          v24 = *(_DWORD *)(v9 + 4);
          if (v25 < v24)
            goto LABEL_34;
        }
        return result;
      case 3uLL:
        return std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<float,int> *>(v9, v9 + 8, a2 - 8);
      case 4uLL:
        return std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<float,int> *>(v9, v9 + 8, v9 + 16, a2 - 8);
      case 5uLL:
        return std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<float,int> *>(v9, v9 + 8, v9 + 16, v9 + 24, a2 - 8);
      default:
        if (v12 <= 191)
        {
          if ((a5 & 1) != 0)
            return std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<float,int> *>(v9, a2);
          else
            return std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<float,int> *>(v9, a2);
        }
        if (v11 != 1)
        {
          v14 = v13 >> 1;
          v15 = (_DWORD *)(v9 + 8 * (v13 >> 1));
          if ((unint64_t)v12 < 0x401)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<float,int> *>(v9 + 8 * (v13 >> 1), v9, a2 - 8);
            if ((a5 & 1) != 0)
              goto LABEL_14;
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<float,int> *>(v9, v9 + 8 * (v13 >> 1), a2 - 8);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<float,int> *>(v9 + 8, (uint64_t)(v15 - 2), a2 - 16);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<float,int> *>(v9 + 16, v9 + 8 + 8 * v14, a2 - 24);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<float,int> *>((uint64_t)(v15 - 2), (uint64_t)v15, v9 + 8 + 8 * v14);
            v16 = *(float *)v9;
            *(_DWORD *)v9 = *v15;
            *(float *)v15 = v16;
            v17 = *(_DWORD *)(v9 + 4);
            *(_DWORD *)(v9 + 4) = v15[1];
            v15[1] = v17;
            if ((a5 & 1) != 0)
              goto LABEL_14;
          }
          v18 = *(float *)(v9 - 8);
          if (v18 >= *(float *)v9 && (*(float *)v9 < v18 || *(_DWORD *)(v9 - 4) >= *(_DWORD *)(v9 + 4)))
          {
            result = std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,std::pair<float,int> *,std::__less<void,void> &>(v9, a2);
            v9 = result;
            goto LABEL_19;
          }
LABEL_14:
          v19 = std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,std::pair<float,int> *,std::__less<void,void> &>(v9, a2);
          if ((v20 & 1) == 0)
            goto LABEL_17;
          v21 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<float,int> *>(v9, v19);
          v9 = v19 + 8;
          result = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<float,int> *>(v19 + 8, a2);
          if (!(_DWORD)result)
          {
            v10 = v11 + 1;
            if (v21)
              continue;
LABEL_17:
            result = std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<float,int> *,false>(v8, v19, a3, -v11, a5 & 1);
            v9 = v19 + 8;
LABEL_19:
            a5 = 0;
            a4 = -v11;
            goto LABEL_3;
          }
          a4 = -v11;
          a2 = v19;
          if (v21)
            return result;
          goto LABEL_2;
        }
        if (v9 != a2)
          return std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<float,int> *,std::pair<float,int> *>(v9, a2, a2, a3);
        return result;
    }
  }
}

uint64_t std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<float,int> *>(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  float v6;
  float v7;
  int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  float v12;
  int v13;
  uint64_t v14;

  if (result == a2)
    return result;
  v2 = result + 8;
  if (result + 8 == a2)
    return result;
  v3 = 0;
  v4 = result;
  do
  {
    v5 = v4;
    v4 = v2;
    v6 = *(float *)(v5 + 8);
    v7 = *(float *)v5;
    if (v6 >= *(float *)v5)
    {
      if (v7 < v6)
        goto LABEL_19;
      v8 = *(_DWORD *)(v5 + 12);
      v9 = *(_DWORD *)(v5 + 4);
      if (v8 >= v9)
        goto LABEL_19;
    }
    else
    {
      v8 = *(_DWORD *)(v5 + 12);
      v9 = *(_DWORD *)(v5 + 4);
    }
    *(float *)(v5 + 8) = v7;
    *(_DWORD *)(v4 + 4) = v9;
    v10 = result;
    if (v5 == result)
      goto LABEL_18;
    v11 = v3;
    while (1)
    {
      v12 = *(float *)(result + v11 - 8);
      if (v6 >= v12)
        break;
      v13 = *(_DWORD *)(result + v11 - 4);
LABEL_12:
      v5 -= 8;
      v14 = result + v11;
      *(float *)v14 = v12;
      *(_DWORD *)(v14 + 4) = v13;
      v11 -= 8;
      if (!v11)
      {
        v10 = result;
        goto LABEL_18;
      }
    }
    if (v12 >= v6)
    {
      v10 = result + v11;
      v13 = *(_DWORD *)(result + v11 - 4);
      if (v8 >= v13)
        goto LABEL_18;
      goto LABEL_12;
    }
    v10 = v5;
LABEL_18:
    *(float *)v10 = v6;
    *(_DWORD *)(v10 + 4) = v8;
LABEL_19:
    v2 = v4 + 8;
    v3 += 8;
  }
  while (v4 + 8 != a2);
  return result;
}

uint64_t std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<float,int> *>(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t i;
  uint64_t v4;
  float v5;
  float v6;
  int v7;
  uint64_t j;

  if (result != a2)
  {
    v2 = result + 8;
    if (result + 8 != a2)
    {
      for (i = result + 4; ; i += 8)
      {
        v4 = result;
        result = v2;
        v5 = *(float *)(v4 + 8);
        v6 = *(float *)v4;
        if (v5 < *(float *)v4)
          break;
        if (v6 >= v5)
        {
          v7 = *(_DWORD *)(v4 + 12);
          if (v7 < *(_DWORD *)(v4 + 4))
            goto LABEL_6;
        }
LABEL_14:
        v2 = result + 8;
        if (result + 8 == a2)
          return result;
      }
      v7 = *(_DWORD *)(v4 + 12);
LABEL_6:
      for (j = i; ; j -= 8)
      {
        *(float *)(j + 4) = v6;
        *(_DWORD *)(j + 8) = *(_DWORD *)j;
        v6 = *(float *)(j - 12);
        if (v5 >= v6 && (v6 < v5 || v7 >= *(_DWORD *)(j - 8)))
          break;
      }
      *(float *)(j - 4) = v5;
      *(_DWORD *)j = v7;
      goto LABEL_14;
    }
  }
  return result;
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<float,int> *>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  float v3;
  float v4;
  float v5;
  int v6;
  int v7;
  uint64_t result;
  float v9;
  int v10;
  int v11;
  float v12;
  float v13;
  int v14;
  int v15;
  int v16;
  int v17;
  float v18;
  int v19;

  v3 = *(float *)a2;
  v4 = *(float *)a1;
  if (*(float *)a2 >= *(float *)a1 && (v4 < v3 || *(_DWORD *)(a2 + 4) >= *(_DWORD *)(a1 + 4)))
  {
    v9 = *(float *)a3;
    if (*(float *)a3 >= v3)
    {
      if (v3 < v9)
        return 0;
      v11 = *(_DWORD *)(a3 + 4);
      v10 = *(_DWORD *)(a2 + 4);
      if (v11 >= v10)
        return 0;
    }
    else
    {
      v10 = *(_DWORD *)(a2 + 4);
      v11 = *(_DWORD *)(a3 + 4);
    }
    *(float *)a2 = v9;
    *(float *)a3 = v3;
    *(_DWORD *)(a2 + 4) = v11;
    *(_DWORD *)(a3 + 4) = v10;
    v12 = *(float *)a2;
    v13 = *(float *)a1;
    if (*(float *)a2 >= *(float *)a1)
    {
      if (v13 < v12)
        return 1;
      v15 = *(_DWORD *)(a2 + 4);
      v14 = *(_DWORD *)(a1 + 4);
      if (v15 >= v14)
        return 1;
    }
    else
    {
      v14 = *(_DWORD *)(a1 + 4);
      v15 = *(_DWORD *)(a2 + 4);
    }
    *(float *)a1 = v12;
    *(float *)a2 = v13;
    *(_DWORD *)(a1 + 4) = v15;
    result = 2;
    *(_DWORD *)(a2 + 4) = v14;
  }
  else
  {
    v5 = *(float *)a3;
    if (*(float *)a3 < v3)
    {
      v6 = *(_DWORD *)(a3 + 4);
LABEL_6:
      *(float *)a1 = v5;
      *(float *)a3 = v4;
      v7 = *(_DWORD *)(a1 + 4);
      *(_DWORD *)(a1 + 4) = v6;
      *(_DWORD *)(a3 + 4) = v7;
      return 1;
    }
    if (v3 >= v5)
    {
      v6 = *(_DWORD *)(a3 + 4);
      v16 = *(_DWORD *)(a2 + 4);
      if (v6 < v16)
        goto LABEL_6;
    }
    else
    {
      v16 = *(_DWORD *)(a2 + 4);
    }
    *(float *)a1 = v3;
    *(float *)a2 = v4;
    v17 = *(_DWORD *)(a1 + 4);
    *(_DWORD *)(a1 + 4) = v16;
    *(_DWORD *)(a2 + 4) = v17;
    v18 = *(float *)a3;
    if (*(float *)a3 >= v4)
    {
      if (v4 < v18)
        return 1;
      v19 = *(_DWORD *)(a3 + 4);
      if (v19 >= v17)
        return 1;
    }
    else
    {
      v19 = *(_DWORD *)(a3 + 4);
    }
    *(float *)a2 = v18;
    *(float *)a3 = v4;
    *(_DWORD *)(a2 + 4) = v19;
    result = 2;
    *(_DWORD *)(a3 + 4) = v17;
  }
  return result;
}

unint64_t std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,std::pair<float,int> *,std::__less<void,void> &>(unint64_t a1, unint64_t a2)
{
  float v2;
  int v3;
  float v4;
  unint64_t i;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  int v12;
  float v13;
  float v14;

  v2 = *(float *)a1;
  v3 = *(_DWORD *)(a1 + 4);
  v4 = *(float *)(a2 - 8);
  if (*(float *)a1 >= v4 && (v4 < v2 || v3 >= *(_DWORD *)(a2 - 4)))
  {
    for (i = a1 + 8; i < a2 && v2 >= *(float *)i && (*(float *)i < v2 || v3 >= *(_DWORD *)(i + 4)); i += 8)
      ;
  }
  else
  {
    i = a1;
    do
    {
      v6 = *(float *)(i + 8);
      i += 8;
      v7 = v6;
    }
    while (v2 >= v6 && (v7 < v2 || v3 >= *(_DWORD *)(i + 4)));
  }
  if (i < a2)
  {
    for (a2 -= 8; v2 < v4 || v4 >= v2 && v3 < *(_DWORD *)(a2 + 4); a2 -= 8)
    {
      v8 = *(float *)(a2 - 8);
      v4 = v8;
    }
  }
  if (i < a2)
  {
    v9 = *(float *)i;
    v10 = *(float *)a2;
    do
    {
      *(float *)i = v10;
      *(float *)a2 = v9;
      v11 = *(float *)(i + 8);
      i += 8;
      v9 = v11;
      v12 = *(_DWORD *)(i - 4);
      *(_DWORD *)(i - 4) = *(_DWORD *)(a2 + 4);
      *(_DWORD *)(a2 + 4) = v12;
      while (v2 >= v9 && (v9 < v2 || v3 >= *(_DWORD *)(i + 4)))
      {
        v13 = *(float *)(i + 8);
        i += 8;
        v9 = v13;
      }
      do
      {
        do
        {
          v14 = *(float *)(a2 - 8);
          a2 -= 8;
          v10 = v14;
        }
        while (v2 < v14);
      }
      while (v10 >= v2 && v3 < *(_DWORD *)(a2 + 4));
    }
    while (i < a2);
  }
  if (i - 8 != a1)
  {
    *(_DWORD *)a1 = *(_DWORD *)(i - 8);
    *(_DWORD *)(a1 + 4) = *(_DWORD *)(i - 4);
  }
  *(float *)(i - 8) = v2;
  *(_DWORD *)(i - 4) = v3;
  return i;
}

unint64_t std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,std::pair<float,int> *,std::__less<void,void> &>(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  float v3;
  int v4;
  float v5;
  unint64_t v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v12;
  unint64_t v13;
  unint64_t v14;
  int v15;
  float v16;
  float v17;

  v2 = 0;
  v3 = *(float *)a1;
  v4 = *(_DWORD *)(a1 + 4);
  while (1)
  {
    v5 = *(float *)(a1 + v2 + 8);
    if (v5 >= v3 && (v3 < v5 || *(_DWORD *)(a1 + v2 + 12) >= v4))
      break;
    v2 += 8;
  }
  v6 = a1 + v2 + 8;
  if (v2)
  {
    do
    {
      v7 = *(float *)(a2 - 8);
      a2 -= 8;
      v8 = v7;
    }
    while (v7 >= v3 && (v3 < v8 || *(_DWORD *)(a2 + 4) >= v4));
  }
  else
  {
LABEL_19:
    if (v6 < a2)
    {
      do
      {
        v9 = *(float *)(a2 - 8);
        a2 -= 8;
        v10 = v9;
        if (v9 < v3)
          break;
        if (v3 < v10)
          goto LABEL_19;
      }
      while (*(_DWORD *)(a2 + 4) >= v4 && v6 < a2);
    }
  }
  if (v6 >= a2)
  {
    v13 = a1 + v2 + 8;
  }
  else
  {
    v12 = *(float *)a2;
    v13 = a1 + v2 + 8;
    v14 = a2;
    do
    {
      *(float *)v13 = v12;
      *(float *)v14 = v5;
      v15 = *(_DWORD *)(v13 + 4);
      *(_DWORD *)(v13 + 4) = *(_DWORD *)(v14 + 4);
      *(_DWORD *)(v14 + 4) = v15;
      do
      {
        do
        {
          v16 = *(float *)(v13 + 8);
          v13 += 8;
          v5 = v16;
        }
        while (v16 < v3);
      }
      while (v3 >= v5 && *(_DWORD *)(v13 + 4) < v4);
      do
      {
        v17 = *(float *)(v14 - 8);
        v14 -= 8;
        v12 = v17;
      }
      while (v17 >= v3 && (v3 < v12 || *(_DWORD *)(v14 + 4) >= v4));
    }
    while (v13 < v14);
  }
  if (v13 - 8 != a1)
  {
    *(_DWORD *)a1 = *(_DWORD *)(v13 - 8);
    *(_DWORD *)(a1 + 4) = *(_DWORD *)(v13 - 4);
  }
  *(float *)(v13 - 8) = v3;
  *(_DWORD *)(v13 - 4) = v4;
  return v13 - 8;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<float,int> *>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _BOOL8 result;
  float v6;
  float v7;
  int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  float v14;
  float v15;
  int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  float v21;
  int v22;

  v4 = (a2 - a1) >> 3;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = *(float *)(a2 - 8);
      v7 = *(float *)a1;
      if (v6 < *(float *)a1)
      {
        v8 = *(_DWORD *)(a1 + 4);
        v9 = *(_DWORD *)(a2 - 4);
LABEL_30:
        *(float *)a1 = v6;
        *(float *)(a2 - 8) = v7;
        *(_DWORD *)(a1 + 4) = v9;
        *(_DWORD *)(a2 - 4) = v8;
        return result;
      }
      if (v7 >= v6)
      {
        v9 = *(_DWORD *)(a2 - 4);
        v8 = *(_DWORD *)(a1 + 4);
        if (v9 < v8)
          goto LABEL_30;
      }
      return result;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<float,int> *>(a1, a1 + 8, a2 - 8);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<float,int> *>(a1, a1 + 8, a1 + 16, a2 - 8);
      return 1;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<float,int> *>(a1, a1 + 8, a1 + 16, a1 + 24, a2 - 8);
      return 1;
    default:
      v10 = a1 + 16;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<float,int> *>(a1, a1 + 8, a1 + 16);
      v11 = a1 + 24;
      if (a1 + 24 == a2)
        return 1;
      v12 = 0;
      v13 = 0;
      break;
  }
LABEL_6:
  v14 = *(float *)v11;
  v15 = *(float *)v10;
  if (*(float *)v11 >= *(float *)v10)
  {
    if (v15 < v14)
      goto LABEL_21;
    v16 = *(_DWORD *)(v11 + 4);
    v17 = *(_DWORD *)(v10 + 4);
    if (v16 >= v17)
      goto LABEL_21;
  }
  else
  {
    v16 = *(_DWORD *)(v11 + 4);
    v17 = *(_DWORD *)(v10 + 4);
  }
  *(float *)v11 = v15;
  *(_DWORD *)(v11 + 4) = v17;
  v18 = a1;
  if (v10 == a1)
    goto LABEL_20;
  v19 = v12;
  while (1)
  {
    v20 = a1 + v19;
    v21 = *(float *)(a1 + v19 + 8);
    if (v14 >= v21)
    {
      if (v21 < v14)
      {
        v18 = v10;
        goto LABEL_20;
      }
      v22 = *(_DWORD *)(a1 + v19 + 12);
      if (v16 >= v22)
      {
        v18 = a1 + v19 + 16;
LABEL_20:
        *(float *)v18 = v14;
        *(_DWORD *)(v18 + 4) = v16;
        if (++v13 == 8)
          return v11 + 8 == a2;
LABEL_21:
        v10 = v11;
        v12 += 8;
        v11 += 8;
        if (v11 == a2)
          return 1;
        goto LABEL_6;
      }
    }
    else
    {
      v22 = *(_DWORD *)(v20 + 12);
    }
    v10 -= 8;
    *(float *)(v20 + 16) = v21;
    *(_DWORD *)(a1 + v19 + 20) = v22;
    v19 -= 8;
    if (v19 == -16)
    {
      v18 = a1;
      goto LABEL_20;
    }
  }
}

uint64_t std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<float,int> *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  float v9;
  float v10;
  int v11;
  int v12;
  float v13;
  float v14;
  int v15;
  int v16;
  float v17;
  float v18;
  int v19;
  int v20;

  result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<float,int> *>(a1, a2, a3);
  v9 = *(float *)a4;
  v10 = *(float *)a3;
  if (*(float *)a4 >= *(float *)a3)
  {
    if (v10 < v9)
      return result;
    v12 = *(_DWORD *)(a4 + 4);
    v11 = *(_DWORD *)(a3 + 4);
    if (v12 >= v11)
      return result;
  }
  else
  {
    v11 = *(_DWORD *)(a3 + 4);
    v12 = *(_DWORD *)(a4 + 4);
  }
  *(float *)a3 = v9;
  *(float *)a4 = v10;
  *(_DWORD *)(a3 + 4) = v12;
  *(_DWORD *)(a4 + 4) = v11;
  v13 = *(float *)a3;
  v14 = *(float *)a2;
  if (*(float *)a3 >= *(float *)a2)
  {
    if (v14 < v13)
      return result;
    v16 = *(_DWORD *)(a3 + 4);
    v15 = *(_DWORD *)(a2 + 4);
    if (v16 >= v15)
      return result;
  }
  else
  {
    v15 = *(_DWORD *)(a2 + 4);
    v16 = *(_DWORD *)(a3 + 4);
  }
  *(float *)a2 = v13;
  *(float *)a3 = v14;
  *(_DWORD *)(a2 + 4) = v16;
  *(_DWORD *)(a3 + 4) = v15;
  v17 = *(float *)a2;
  v18 = *(float *)a1;
  if (*(float *)a2 < *(float *)a1)
  {
    v19 = *(_DWORD *)(a1 + 4);
    v20 = *(_DWORD *)(a2 + 4);
LABEL_15:
    *(float *)a1 = v17;
    *(float *)a2 = v18;
    *(_DWORD *)(a1 + 4) = v20;
    *(_DWORD *)(a2 + 4) = v19;
    return result;
  }
  if (v18 >= v17)
  {
    v20 = *(_DWORD *)(a2 + 4);
    v19 = *(_DWORD *)(a1 + 4);
    if (v20 < v19)
      goto LABEL_15;
  }
  return result;
}

uint64_t std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<float,int> *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t result;
  float v11;
  float v12;
  int v13;
  int v14;
  float v15;
  float v16;
  int v17;
  int v18;
  float v19;
  float v20;
  int v21;
  int v22;
  float v23;
  float v24;
  int v25;
  int v26;

  result = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<float,int> *>(a1, a2, a3, a4);
  v11 = *(float *)a5;
  v12 = *(float *)a4;
  if (*(float *)a5 >= *(float *)a4)
  {
    if (v12 < v11)
      return result;
    v14 = *(_DWORD *)(a5 + 4);
    v13 = *(_DWORD *)(a4 + 4);
    if (v14 >= v13)
      return result;
  }
  else
  {
    v13 = *(_DWORD *)(a4 + 4);
    v14 = *(_DWORD *)(a5 + 4);
  }
  *(float *)a4 = v11;
  *(float *)a5 = v12;
  *(_DWORD *)(a4 + 4) = v14;
  *(_DWORD *)(a5 + 4) = v13;
  v15 = *(float *)a4;
  v16 = *(float *)a3;
  if (*(float *)a4 >= *(float *)a3)
  {
    if (v16 < v15)
      return result;
    v18 = *(_DWORD *)(a4 + 4);
    v17 = *(_DWORD *)(a3 + 4);
    if (v18 >= v17)
      return result;
  }
  else
  {
    v17 = *(_DWORD *)(a3 + 4);
    v18 = *(_DWORD *)(a4 + 4);
  }
  *(float *)a3 = v15;
  *(float *)a4 = v16;
  *(_DWORD *)(a3 + 4) = v18;
  *(_DWORD *)(a4 + 4) = v17;
  v19 = *(float *)a3;
  v20 = *(float *)a2;
  if (*(float *)a3 >= *(float *)a2)
  {
    if (v20 < v19)
      return result;
    v22 = *(_DWORD *)(a3 + 4);
    v21 = *(_DWORD *)(a2 + 4);
    if (v22 >= v21)
      return result;
  }
  else
  {
    v21 = *(_DWORD *)(a2 + 4);
    v22 = *(_DWORD *)(a3 + 4);
  }
  *(float *)a2 = v19;
  *(float *)a3 = v20;
  *(_DWORD *)(a2 + 4) = v22;
  *(_DWORD *)(a3 + 4) = v21;
  v23 = *(float *)a2;
  v24 = *(float *)a1;
  if (*(float *)a2 < *(float *)a1)
  {
    v25 = *(_DWORD *)(a1 + 4);
    v26 = *(_DWORD *)(a2 + 4);
LABEL_9:
    *(float *)a1 = v23;
    *(float *)a2 = v24;
    *(_DWORD *)(a1 + 4) = v26;
    *(_DWORD *)(a2 + 4) = v25;
    return result;
  }
  if (v24 >= v23)
  {
    v26 = *(_DWORD *)(a2 + 4);
    v25 = *(_DWORD *)(a1 + 4);
    if (v26 < v25)
      goto LABEL_9;
  }
  return result;
}

uint64_t std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<float,int> *,std::pair<float,int> *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  float v15;
  float v16;
  int v17;
  int v18;
  uint64_t v19;
  float *v20;
  float v21;
  int v22;
  float *v23;

  if (a1 != a2)
  {
    v8 = a2 - a1;
    v9 = (a2 - a1) >> 3;
    if (a2 - a1 >= 9)
    {
      v10 = (unint64_t)(v9 - 2) >> 1;
      v11 = v10 + 1;
      v12 = a1 + 8 * v10;
      do
      {
        std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<float,int> *>(a1, a4, v9, v12);
        v12 -= 8;
        --v11;
      }
      while (v11);
    }
    v13 = a2;
    if (a2 != a3)
    {
      v14 = a2;
      while (1)
      {
        v15 = *(float *)v14;
        v16 = *(float *)a1;
        if (*(float *)v14 >= *(float *)a1)
        {
          if (v16 < v15)
            goto LABEL_12;
          v17 = *(_DWORD *)(v14 + 4);
          v18 = *(_DWORD *)(a1 + 4);
          if (v17 >= v18)
            goto LABEL_12;
        }
        else
        {
          v17 = *(_DWORD *)(v14 + 4);
          v18 = *(_DWORD *)(a1 + 4);
        }
        *(float *)v14 = v16;
        *(float *)a1 = v15;
        *(_DWORD *)(v14 + 4) = v18;
        *(_DWORD *)(a1 + 4) = v17;
        std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<float,int> *>(a1, a4, v9, a1);
LABEL_12:
        v14 += 8;
        if (v14 == a3)
        {
          v13 = a3;
          break;
        }
      }
    }
    if (v8 >= 9)
    {
      v19 = (unint64_t)v8 >> 3;
      v20 = (float *)(a2 - 8);
      do
      {
        v21 = *(float *)a1;
        v22 = *(_DWORD *)(a1 + 4);
        std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<float,int> *>(a1, a4, v19);
        if (v20 == v23)
        {
          *v23 = v21;
          *((_DWORD *)v23 + 1) = v22;
        }
        else
        {
          *v23 = *v20;
          v23[1] = v20[1];
          *v20 = v21;
          *((_DWORD *)v20 + 1) = v22;
          std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<float,int> *>(a1, (uint64_t)(v23 + 2), a4, ((uint64_t)v23 - a1 + 8) >> 3);
        }
        v20 -= 2;
      }
      while (v19-- > 2);
    }
    return v13;
  }
  return a3;
}

uint64_t std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<float,int> *>(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  float v10;
  float v11;
  float v12;
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  float v18;
  float v19;
  int v20;

  if (a3 >= 2)
  {
    v4 = a4 - result;
    v5 = (unint64_t)(a3 - 2) >> 1;
    if (v5 >= (a4 - result) >> 3)
    {
      v6 = v4 >> 2;
      v7 = (v4 >> 2) + 1;
      v8 = result + 8 * v7;
      v9 = v6 + 2;
      if (v9 < a3)
      {
        v10 = *(float *)(v8 + 8);
        if (*(float *)v8 < v10 || v10 >= *(float *)v8 && *(_DWORD *)(result + 8 * v7 + 4) < *(_DWORD *)(v8 + 12))
        {
          v8 += 8;
          v7 = v9;
        }
      }
      v11 = *(float *)v8;
      v12 = *(float *)a4;
      if (*(float *)v8 >= *(float *)a4)
      {
        if (v12 >= v11)
        {
          v14 = *(_DWORD *)(v8 + 4);
          v13 = *(_DWORD *)(a4 + 4);
          if (v14 < v13)
            return result;
        }
        else
        {
          v13 = *(_DWORD *)(a4 + 4);
          v14 = *(_DWORD *)(v8 + 4);
        }
        *(float *)a4 = v11;
        *(_DWORD *)(a4 + 4) = v14;
        if (v5 >= v7)
        {
          while (1)
          {
            v16 = 2 * v7;
            v7 = (2 * v7) | 1;
            v15 = result + 8 * v7;
            v17 = v16 + 2;
            if (v17 < a3)
            {
              v18 = *(float *)(v15 + 8);
              if (*(float *)v15 < v18
                || v18 >= *(float *)v15 && *(_DWORD *)(result + 8 * v7 + 4) < *(_DWORD *)(v15 + 12))
              {
                v15 += 8;
                v7 = v17;
              }
            }
            v19 = *(float *)v15;
            if (*(float *)v15 < v12)
              break;
            v20 = *(_DWORD *)(v15 + 4);
            if (v12 >= v19 && v20 < v13)
              break;
            *(float *)v8 = v19;
            *(_DWORD *)(v8 + 4) = v20;
            v8 = v15;
            if (v5 < v7)
              goto LABEL_14;
          }
        }
        v15 = v8;
LABEL_14:
        *(float *)v15 = v12;
        *(_DWORD *)(v15 + 4) = v13;
      }
    }
  }
  return result;
}

float std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<float,int> *>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _DWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  float v10;
  float result;

  v3 = 0;
  v4 = a3 - 2;
  if (a3 < 2)
    v4 = a3 - 1;
  v5 = v4 >> 1;
  do
  {
    v6 = (_DWORD *)a1;
    v7 = v3 + 1;
    a1 += 8 * (v3 + 1);
    v8 = 2 * v3;
    v3 = (2 * v3) | 1;
    v9 = v8 + 2;
    if (v9 < a3)
    {
      v10 = *(float *)(a1 + 8);
      if (*(float *)a1 < v10 || v10 >= *(float *)a1 && v6[2 * v7 + 1] < *(_DWORD *)(a1 + 12))
      {
        a1 += 8;
        v3 = v9;
      }
    }
    result = *(float *)a1;
    *v6 = *(_DWORD *)a1;
    v6[1] = *(_DWORD *)(a1 + 4);
  }
  while (v3 <= v5);
  return result;
}

uint64_t std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<float,int> *>(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  float v7;
  float v8;
  int v9;
  int v10;
  uint64_t v11;
  unint64_t v12;
  float v13;
  int v14;

  v4 = a4 - 2;
  if (a4 >= 2)
  {
    v5 = v4 >> 1;
    v6 = result + 8 * (v4 >> 1);
    v7 = *(float *)v6;
    v8 = *(float *)(a2 - 8);
    if (*(float *)v6 >= v8)
    {
      if (v8 < v7)
        return result;
      v10 = *(_DWORD *)(result + 8 * v5 + 4);
      v9 = *(_DWORD *)(a2 - 4);
      if (v10 >= v9)
        return result;
    }
    else
    {
      v9 = *(_DWORD *)(a2 - 4);
      v10 = *(_DWORD *)(v6 + 4);
    }
    *(float *)(a2 - 8) = v7;
    *(_DWORD *)(a2 - 4) = v10;
    if (v4 >= 2)
    {
      while (1)
      {
        v12 = v5 - 1;
        v5 = (v5 - 1) >> 1;
        v11 = result + 8 * v5;
        v13 = *(float *)v11;
        if (*(float *)v11 >= v8)
        {
          if (v8 < v13)
            break;
          v14 = *(_DWORD *)(result + 8 * v5 + 4);
          if (v14 >= v9)
            break;
        }
        else
        {
          v14 = *(_DWORD *)(v11 + 4);
        }
        *(float *)v6 = v13;
        *(_DWORD *)(v6 + 4) = v14;
        v6 = result + 8 * v5;
        if (v12 <= 1)
          goto LABEL_13;
      }
    }
    v11 = v6;
LABEL_13:
    *(float *)v11 = v8;
    *(_DWORD *)(v11 + 4) = v9;
  }
  return result;
}

_QWORD *std::vector<std::pair<double,int>>::vector(_QWORD *a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<std::pair<unsigned long,char const*>>::__vallocate[abi:ne180100](a1, a2);
    v4 = a1[1];
    v5 = v4 + 16 * a2;
    do
    {
      *(_QWORD *)v4 = 0;
      *(_DWORD *)(v4 + 8) = 0;
      v4 += 16;
    }
    while (v4 != v5);
    a1[1] = v5;
  }
  return a1;
}

void sub_1ADC5A3A4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<double,int> *,false>(uint64_t result, unint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  double v16;
  int v17;
  double v18;
  unint64_t v19;
  char v20;
  BOOL v21;
  double v22;
  double v23;
  int v24;
  int v25;

  v8 = result;
LABEL_2:
  v9 = v8;
LABEL_3:
  v10 = 1 - a4;
  while (2)
  {
    v8 = v9;
    v11 = v10;
    v12 = a2 - v9;
    v13 = (uint64_t)(a2 - v9) >> 4;
    switch(v13)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        v22 = *(double *)(a2 - 16);
        v23 = *(double *)v9;
        if (v22 < *(double *)v9)
        {
          v24 = *(_DWORD *)(v9 + 8);
          v25 = *(_DWORD *)(a2 - 8);
LABEL_34:
          *(double *)v9 = v22;
          *(double *)(a2 - 16) = v23;
          *(_DWORD *)(v9 + 8) = v25;
          *(_DWORD *)(a2 - 8) = v24;
          return result;
        }
        if (v23 >= v22)
        {
          v25 = *(_DWORD *)(a2 - 8);
          v24 = *(_DWORD *)(v9 + 8);
          if (v25 < v24)
            goto LABEL_34;
        }
        return result;
      case 3uLL:
        return std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<double,int> *>(v9, v9 + 16, a2 - 16);
      case 4uLL:
        return std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<double,int> *>(v9, v9 + 16, v9 + 32, a2 - 16);
      case 5uLL:
        return std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<double,int> *>(v9, v9 + 16, v9 + 32, v9 + 48, a2 - 16);
      default:
        if (v12 <= 383)
        {
          if ((a5 & 1) != 0)
            return std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<double,int> *>(v9, a2);
          else
            return std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<double,int> *>(v9, a2);
        }
        if (v11 != 1)
        {
          v14 = v13 >> 1;
          v15 = v9 + 16 * (v13 >> 1);
          if ((unint64_t)v12 < 0x801)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<double,int> *>(v9 + 16 * (v13 >> 1), v9, a2 - 16);
            if ((a5 & 1) != 0)
              goto LABEL_14;
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<double,int> *>(v9, v9 + 16 * (v13 >> 1), a2 - 16);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<double,int> *>(v9 + 16, v15 - 16, a2 - 32);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<double,int> *>(v9 + 32, v9 + 16 + 16 * v14, a2 - 48);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<double,int> *>(v15 - 16, v15, v9 + 16 + 16 * v14);
            v16 = *(double *)v9;
            *(_QWORD *)v9 = *(_QWORD *)v15;
            *(double *)v15 = v16;
            v17 = *(_DWORD *)(v9 + 8);
            *(_DWORD *)(v9 + 8) = *(_DWORD *)(v15 + 8);
            *(_DWORD *)(v15 + 8) = v17;
            if ((a5 & 1) != 0)
              goto LABEL_14;
          }
          v18 = *(double *)(v9 - 16);
          if (v18 >= *(double *)v9 && (*(double *)v9 < v18 || *(_DWORD *)(v9 - 8) >= *(_DWORD *)(v9 + 8)))
          {
            result = std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,std::pair<double,int> *,std::__less<void,void> &>(v9, a2);
            v9 = result;
            goto LABEL_19;
          }
LABEL_14:
          v19 = std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,std::pair<double,int> *,std::__less<void,void> &>(v9, a2);
          if ((v20 & 1) == 0)
            goto LABEL_17;
          v21 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<double,int> *>(v9, v19);
          v9 = v19 + 16;
          result = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<double,int> *>(v19 + 16, a2);
          if (!(_DWORD)result)
          {
            v10 = v11 + 1;
            if (v21)
              continue;
LABEL_17:
            result = std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<double,int> *,false>(v8, v19, a3, -v11, a5 & 1);
            v9 = v19 + 16;
LABEL_19:
            a5 = 0;
            a4 = -v11;
            goto LABEL_3;
          }
          a4 = -v11;
          a2 = v19;
          if (v21)
            return result;
          goto LABEL_2;
        }
        if (v9 != a2)
          return std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<double,int> *,std::pair<double,int> *>(v9, a2, a2, a3);
        return result;
    }
  }
}

uint64_t std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<double,int> *>(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  double v6;
  double v7;
  int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  double v12;
  int v13;
  uint64_t v14;

  if (result == a2)
    return result;
  v2 = result + 16;
  if (result + 16 == a2)
    return result;
  v3 = 0;
  v4 = result;
  do
  {
    v5 = v4;
    v4 = v2;
    v6 = *(double *)(v5 + 16);
    v7 = *(double *)v5;
    if (v6 >= *(double *)v5)
    {
      if (v7 < v6)
        goto LABEL_19;
      v8 = *(_DWORD *)(v5 + 24);
      v9 = *(_DWORD *)(v5 + 8);
      if (v8 >= v9)
        goto LABEL_19;
    }
    else
    {
      v8 = *(_DWORD *)(v5 + 24);
      v9 = *(_DWORD *)(v5 + 8);
    }
    *(double *)(v5 + 16) = v7;
    *(_DWORD *)(v4 + 8) = v9;
    v10 = result;
    if (v5 == result)
      goto LABEL_18;
    v11 = v3;
    while (1)
    {
      v12 = *(double *)(result + v11 - 16);
      if (v6 >= v12)
        break;
      v13 = *(_DWORD *)(result + v11 - 8);
LABEL_12:
      v5 -= 16;
      v14 = result + v11;
      *(double *)v14 = v12;
      *(_DWORD *)(v14 + 8) = v13;
      v11 -= 16;
      if (!v11)
      {
        v10 = result;
        goto LABEL_18;
      }
    }
    if (v12 >= v6)
    {
      v10 = result + v11;
      v13 = *(_DWORD *)(result + v11 - 8);
      if (v8 >= v13)
        goto LABEL_18;
      goto LABEL_12;
    }
    v10 = v5;
LABEL_18:
    *(double *)v10 = v6;
    *(_DWORD *)(v10 + 8) = v8;
LABEL_19:
    v2 = v4 + 16;
    v3 += 16;
  }
  while (v4 + 16 != a2);
  return result;
}

uint64_t std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<double,int> *>(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t i;
  uint64_t v4;
  double v5;
  double v6;
  int v7;
  uint64_t j;

  if (result != a2)
  {
    v2 = result + 16;
    if (result + 16 != a2)
    {
      for (i = result + 8; ; i += 16)
      {
        v4 = result;
        result = v2;
        v5 = *(double *)(v4 + 16);
        v6 = *(double *)v4;
        if (v5 < *(double *)v4)
          break;
        if (v6 >= v5)
        {
          v7 = *(_DWORD *)(v4 + 24);
          if (v7 < *(_DWORD *)(v4 + 8))
            goto LABEL_6;
        }
LABEL_14:
        v2 = result + 16;
        if (result + 16 == a2)
          return result;
      }
      v7 = *(_DWORD *)(v4 + 24);
LABEL_6:
      for (j = i; ; j -= 16)
      {
        *(double *)(j + 8) = v6;
        *(_DWORD *)(j + 16) = *(_DWORD *)j;
        v6 = *(double *)(j - 24);
        if (v5 >= v6 && (v6 < v5 || v7 >= *(_DWORD *)(j - 16)))
          break;
      }
      *(double *)(j - 8) = v5;
      *(_DWORD *)j = v7;
      goto LABEL_14;
    }
  }
  return result;
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<double,int> *>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  double v3;
  double v4;
  double v5;
  int v6;
  int v7;
  uint64_t result;
  double v9;
  int v10;
  int v11;
  double v12;
  double v13;
  int v14;
  int v15;
  int v16;
  int v17;
  double v18;
  int v19;

  v3 = *(double *)a2;
  v4 = *(double *)a1;
  if (*(double *)a2 >= *(double *)a1 && (v4 < v3 || *(_DWORD *)(a2 + 8) >= *(_DWORD *)(a1 + 8)))
  {
    v9 = *(double *)a3;
    if (*(double *)a3 >= v3)
    {
      if (v3 < v9)
        return 0;
      v11 = *(_DWORD *)(a3 + 8);
      v10 = *(_DWORD *)(a2 + 8);
      if (v11 >= v10)
        return 0;
    }
    else
    {
      v10 = *(_DWORD *)(a2 + 8);
      v11 = *(_DWORD *)(a3 + 8);
    }
    *(double *)a2 = v9;
    *(double *)a3 = v3;
    *(_DWORD *)(a2 + 8) = v11;
    *(_DWORD *)(a3 + 8) = v10;
    v12 = *(double *)a2;
    v13 = *(double *)a1;
    if (*(double *)a2 >= *(double *)a1)
    {
      if (v13 < v12)
        return 1;
      v15 = *(_DWORD *)(a2 + 8);
      v14 = *(_DWORD *)(a1 + 8);
      if (v15 >= v14)
        return 1;
    }
    else
    {
      v14 = *(_DWORD *)(a1 + 8);
      v15 = *(_DWORD *)(a2 + 8);
    }
    *(double *)a1 = v12;
    *(double *)a2 = v13;
    *(_DWORD *)(a1 + 8) = v15;
    result = 2;
    *(_DWORD *)(a2 + 8) = v14;
  }
  else
  {
    v5 = *(double *)a3;
    if (*(double *)a3 < v3)
    {
      v6 = *(_DWORD *)(a3 + 8);
LABEL_6:
      *(double *)a1 = v5;
      *(double *)a3 = v4;
      v7 = *(_DWORD *)(a1 + 8);
      *(_DWORD *)(a1 + 8) = v6;
      *(_DWORD *)(a3 + 8) = v7;
      return 1;
    }
    if (v3 >= v5)
    {
      v6 = *(_DWORD *)(a3 + 8);
      v16 = *(_DWORD *)(a2 + 8);
      if (v6 < v16)
        goto LABEL_6;
    }
    else
    {
      v16 = *(_DWORD *)(a2 + 8);
    }
    *(double *)a1 = v3;
    *(double *)a2 = v4;
    v17 = *(_DWORD *)(a1 + 8);
    *(_DWORD *)(a1 + 8) = v16;
    *(_DWORD *)(a2 + 8) = v17;
    v18 = *(double *)a3;
    if (*(double *)a3 >= v4)
    {
      if (v4 < v18)
        return 1;
      v19 = *(_DWORD *)(a3 + 8);
      if (v19 >= v17)
        return 1;
    }
    else
    {
      v19 = *(_DWORD *)(a3 + 8);
    }
    *(double *)a2 = v18;
    *(double *)a3 = v4;
    *(_DWORD *)(a2 + 8) = v19;
    result = 2;
    *(_DWORD *)(a3 + 8) = v17;
  }
  return result;
}

unint64_t std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,std::pair<double,int> *,std::__less<void,void> &>(unint64_t a1, unint64_t a2)
{
  double v2;
  int v3;
  double v4;
  unint64_t i;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  int v12;
  double v13;
  double v14;

  v2 = *(double *)a1;
  v3 = *(_DWORD *)(a1 + 8);
  v4 = *(double *)(a2 - 16);
  if (*(double *)a1 >= v4 && (v4 < v2 || v3 >= *(_DWORD *)(a2 - 8)))
  {
    for (i = a1 + 16; i < a2 && v2 >= *(double *)i && (*(double *)i < v2 || v3 >= *(_DWORD *)(i + 8)); i += 16)
      ;
  }
  else
  {
    i = a1;
    do
    {
      v6 = *(double *)(i + 16);
      i += 16;
      v7 = v6;
    }
    while (v2 >= v6 && (v7 < v2 || v3 >= *(_DWORD *)(i + 8)));
  }
  if (i < a2)
  {
    for (a2 -= 16; v2 < v4 || v4 >= v2 && v3 < *(_DWORD *)(a2 + 8); a2 -= 16)
    {
      v8 = *(double *)(a2 - 16);
      v4 = v8;
    }
  }
  if (i < a2)
  {
    v9 = *(double *)i;
    v10 = *(double *)a2;
    do
    {
      *(double *)i = v10;
      *(double *)a2 = v9;
      v11 = *(double *)(i + 16);
      i += 16;
      v9 = v11;
      v12 = *(_DWORD *)(i - 8);
      *(_DWORD *)(i - 8) = *(_DWORD *)(a2 + 8);
      *(_DWORD *)(a2 + 8) = v12;
      while (v2 >= v9 && (v9 < v2 || v3 >= *(_DWORD *)(i + 8)))
      {
        v13 = *(double *)(i + 16);
        i += 16;
        v9 = v13;
      }
      do
      {
        do
        {
          v14 = *(double *)(a2 - 16);
          a2 -= 16;
          v10 = v14;
        }
        while (v2 < v14);
      }
      while (v10 >= v2 && v3 < *(_DWORD *)(a2 + 8));
    }
    while (i < a2);
  }
  if (i - 16 != a1)
  {
    *(_QWORD *)a1 = *(_QWORD *)(i - 16);
    *(_DWORD *)(a1 + 8) = *(_DWORD *)(i - 8);
  }
  *(double *)(i - 16) = v2;
  *(_DWORD *)(i - 8) = v3;
  return i;
}

unint64_t std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,std::pair<double,int> *,std::__less<void,void> &>(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  double v3;
  int v4;
  double v5;
  unint64_t v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v12;
  unint64_t v13;
  unint64_t v14;
  int v15;
  double v16;
  double v17;

  v2 = 0;
  v3 = *(double *)a1;
  v4 = *(_DWORD *)(a1 + 8);
  while (1)
  {
    v5 = *(double *)(a1 + v2 + 16);
    if (v5 >= v3 && (v3 < v5 || *(_DWORD *)(a1 + v2 + 24) >= v4))
      break;
    v2 += 16;
  }
  v6 = a1 + v2 + 16;
  if (v2)
  {
    do
    {
      v7 = *(double *)(a2 - 16);
      a2 -= 16;
      v8 = v7;
    }
    while (v7 >= v3 && (v3 < v8 || *(_DWORD *)(a2 + 8) >= v4));
  }
  else
  {
LABEL_19:
    if (v6 < a2)
    {
      do
      {
        v9 = *(double *)(a2 - 16);
        a2 -= 16;
        v10 = v9;
        if (v9 < v3)
          break;
        if (v3 < v10)
          goto LABEL_19;
      }
      while (*(_DWORD *)(a2 + 8) >= v4 && v6 < a2);
    }
  }
  if (v6 >= a2)
  {
    v13 = a1 + v2 + 16;
  }
  else
  {
    v12 = *(double *)a2;
    v13 = a1 + v2 + 16;
    v14 = a2;
    do
    {
      *(double *)v13 = v12;
      *(double *)v14 = v5;
      v15 = *(_DWORD *)(v13 + 8);
      *(_DWORD *)(v13 + 8) = *(_DWORD *)(v14 + 8);
      *(_DWORD *)(v14 + 8) = v15;
      do
      {
        do
        {
          v16 = *(double *)(v13 + 16);
          v13 += 16;
          v5 = v16;
        }
        while (v16 < v3);
      }
      while (v3 >= v5 && *(_DWORD *)(v13 + 8) < v4);
      do
      {
        v17 = *(double *)(v14 - 16);
        v14 -= 16;
        v12 = v17;
      }
      while (v17 >= v3 && (v3 < v12 || *(_DWORD *)(v14 + 8) >= v4));
    }
    while (v13 < v14);
  }
  if (v13 - 16 != a1)
  {
    *(_QWORD *)a1 = *(_QWORD *)(v13 - 16);
    *(_DWORD *)(a1 + 8) = *(_DWORD *)(v13 - 8);
  }
  *(double *)(v13 - 16) = v3;
  *(_DWORD *)(v13 - 8) = v4;
  return v13 - 16;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<double,int> *>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _BOOL8 result;
  double v6;
  double v7;
  int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  double v14;
  double v15;
  int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  double v21;
  int v22;

  v4 = (a2 - a1) >> 4;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = *(double *)(a2 - 16);
      v7 = *(double *)a1;
      if (v6 < *(double *)a1)
      {
        v8 = *(_DWORD *)(a1 + 8);
        v9 = *(_DWORD *)(a2 - 8);
LABEL_30:
        *(double *)a1 = v6;
        *(double *)(a2 - 16) = v7;
        *(_DWORD *)(a1 + 8) = v9;
        *(_DWORD *)(a2 - 8) = v8;
        return result;
      }
      if (v7 >= v6)
      {
        v9 = *(_DWORD *)(a2 - 8);
        v8 = *(_DWORD *)(a1 + 8);
        if (v9 < v8)
          goto LABEL_30;
      }
      return result;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<double,int> *>(a1, a1 + 16, a2 - 16);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<double,int> *>(a1, a1 + 16, a1 + 32, a2 - 16);
      return 1;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<double,int> *>(a1, a1 + 16, a1 + 32, a1 + 48, a2 - 16);
      return 1;
    default:
      v10 = a1 + 32;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<double,int> *>(a1, a1 + 16, a1 + 32);
      v11 = a1 + 48;
      if (a1 + 48 == a2)
        return 1;
      v12 = 0;
      v13 = 0;
      break;
  }
LABEL_6:
  v14 = *(double *)v11;
  v15 = *(double *)v10;
  if (*(double *)v11 >= *(double *)v10)
  {
    if (v15 < v14)
      goto LABEL_21;
    v16 = *(_DWORD *)(v11 + 8);
    v17 = *(_DWORD *)(v10 + 8);
    if (v16 >= v17)
      goto LABEL_21;
  }
  else
  {
    v16 = *(_DWORD *)(v11 + 8);
    v17 = *(_DWORD *)(v10 + 8);
  }
  *(double *)v11 = v15;
  *(_DWORD *)(v11 + 8) = v17;
  v18 = a1;
  if (v10 == a1)
    goto LABEL_20;
  v19 = v12;
  while (1)
  {
    v20 = a1 + v19;
    v21 = *(double *)(a1 + v19 + 16);
    if (v14 >= v21)
    {
      if (v21 < v14)
      {
        v18 = v10;
        goto LABEL_20;
      }
      v22 = *(_DWORD *)(a1 + v19 + 24);
      if (v16 >= v22)
      {
        v18 = a1 + v19 + 32;
LABEL_20:
        *(double *)v18 = v14;
        *(_DWORD *)(v18 + 8) = v16;
        if (++v13 == 8)
          return v11 + 16 == a2;
LABEL_21:
        v10 = v11;
        v12 += 16;
        v11 += 16;
        if (v11 == a2)
          return 1;
        goto LABEL_6;
      }
    }
    else
    {
      v22 = *(_DWORD *)(v20 + 24);
    }
    v10 -= 16;
    *(double *)(v20 + 32) = v21;
    *(_DWORD *)(a1 + v19 + 40) = v22;
    v19 -= 16;
    if (v19 == -32)
    {
      v18 = a1;
      goto LABEL_20;
    }
  }
}

uint64_t std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<double,int> *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  double v9;
  double v10;
  int v11;
  int v12;
  double v13;
  double v14;
  int v15;
  int v16;
  double v17;
  double v18;
  int v19;
  int v20;

  result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<double,int> *>(a1, a2, a3);
  v9 = *(double *)a4;
  v10 = *(double *)a3;
  if (*(double *)a4 >= *(double *)a3)
  {
    if (v10 < v9)
      return result;
    v12 = *(_DWORD *)(a4 + 8);
    v11 = *(_DWORD *)(a3 + 8);
    if (v12 >= v11)
      return result;
  }
  else
  {
    v11 = *(_DWORD *)(a3 + 8);
    v12 = *(_DWORD *)(a4 + 8);
  }
  *(double *)a3 = v9;
  *(double *)a4 = v10;
  *(_DWORD *)(a3 + 8) = v12;
  *(_DWORD *)(a4 + 8) = v11;
  v13 = *(double *)a3;
  v14 = *(double *)a2;
  if (*(double *)a3 >= *(double *)a2)
  {
    if (v14 < v13)
      return result;
    v16 = *(_DWORD *)(a3 + 8);
    v15 = *(_DWORD *)(a2 + 8);
    if (v16 >= v15)
      return result;
  }
  else
  {
    v15 = *(_DWORD *)(a2 + 8);
    v16 = *(_DWORD *)(a3 + 8);
  }
  *(double *)a2 = v13;
  *(double *)a3 = v14;
  *(_DWORD *)(a2 + 8) = v16;
  *(_DWORD *)(a3 + 8) = v15;
  v17 = *(double *)a2;
  v18 = *(double *)a1;
  if (*(double *)a2 < *(double *)a1)
  {
    v19 = *(_DWORD *)(a1 + 8);
    v20 = *(_DWORD *)(a2 + 8);
LABEL_15:
    *(double *)a1 = v17;
    *(double *)a2 = v18;
    *(_DWORD *)(a1 + 8) = v20;
    *(_DWORD *)(a2 + 8) = v19;
    return result;
  }
  if (v18 >= v17)
  {
    v20 = *(_DWORD *)(a2 + 8);
    v19 = *(_DWORD *)(a1 + 8);
    if (v20 < v19)
      goto LABEL_15;
  }
  return result;
}

uint64_t std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<double,int> *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t result;
  double v11;
  double v12;
  int v13;
  int v14;
  double v15;
  double v16;
  int v17;
  int v18;
  double v19;
  double v20;
  int v21;
  int v22;
  double v23;
  double v24;
  int v25;
  int v26;

  result = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<double,int> *>(a1, a2, a3, a4);
  v11 = *(double *)a5;
  v12 = *(double *)a4;
  if (*(double *)a5 >= *(double *)a4)
  {
    if (v12 < v11)
      return result;
    v14 = *(_DWORD *)(a5 + 8);
    v13 = *(_DWORD *)(a4 + 8);
    if (v14 >= v13)
      return result;
  }
  else
  {
    v13 = *(_DWORD *)(a4 + 8);
    v14 = *(_DWORD *)(a5 + 8);
  }
  *(double *)a4 = v11;
  *(double *)a5 = v12;
  *(_DWORD *)(a4 + 8) = v14;
  *(_DWORD *)(a5 + 8) = v13;
  v15 = *(double *)a4;
  v16 = *(double *)a3;
  if (*(double *)a4 >= *(double *)a3)
  {
    if (v16 < v15)
      return result;
    v18 = *(_DWORD *)(a4 + 8);
    v17 = *(_DWORD *)(a3 + 8);
    if (v18 >= v17)
      return result;
  }
  else
  {
    v17 = *(_DWORD *)(a3 + 8);
    v18 = *(_DWORD *)(a4 + 8);
  }
  *(double *)a3 = v15;
  *(double *)a4 = v16;
  *(_DWORD *)(a3 + 8) = v18;
  *(_DWORD *)(a4 + 8) = v17;
  v19 = *(double *)a3;
  v20 = *(double *)a2;
  if (*(double *)a3 >= *(double *)a2)
  {
    if (v20 < v19)
      return result;
    v22 = *(_DWORD *)(a3 + 8);
    v21 = *(_DWORD *)(a2 + 8);
    if (v22 >= v21)
      return result;
  }
  else
  {
    v21 = *(_DWORD *)(a2 + 8);
    v22 = *(_DWORD *)(a3 + 8);
  }
  *(double *)a2 = v19;
  *(double *)a3 = v20;
  *(_DWORD *)(a2 + 8) = v22;
  *(_DWORD *)(a3 + 8) = v21;
  v23 = *(double *)a2;
  v24 = *(double *)a1;
  if (*(double *)a2 < *(double *)a1)
  {
    v25 = *(_DWORD *)(a1 + 8);
    v26 = *(_DWORD *)(a2 + 8);
LABEL_9:
    *(double *)a1 = v23;
    *(double *)a2 = v24;
    *(_DWORD *)(a1 + 8) = v26;
    *(_DWORD *)(a2 + 8) = v25;
    return result;
  }
  if (v24 >= v23)
  {
    v26 = *(_DWORD *)(a2 + 8);
    v25 = *(_DWORD *)(a1 + 8);
    if (v26 < v25)
      goto LABEL_9;
  }
  return result;
}

uint64_t std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<double,int> *,std::pair<double,int> *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  double v15;
  double v16;
  int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  double v21;
  int v22;
  uint64_t v23;

  if (a1 != a2)
  {
    v8 = a2 - a1;
    v9 = (a2 - a1) >> 4;
    if (a2 - a1 >= 17)
    {
      v10 = (unint64_t)(v9 - 2) >> 1;
      v11 = v10 + 1;
      v12 = a1 + 16 * v10;
      do
      {
        std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<double,int> *>(a1, a4, v9, v12);
        v12 -= 16;
        --v11;
      }
      while (v11);
    }
    v13 = a2;
    if (a2 != a3)
    {
      v14 = a2;
      while (1)
      {
        v15 = *(double *)v14;
        v16 = *(double *)a1;
        if (*(double *)v14 >= *(double *)a1)
        {
          if (v16 < v15)
            goto LABEL_12;
          v17 = *(_DWORD *)(v14 + 8);
          v18 = *(_DWORD *)(a1 + 8);
          if (v17 >= v18)
            goto LABEL_12;
        }
        else
        {
          v17 = *(_DWORD *)(v14 + 8);
          v18 = *(_DWORD *)(a1 + 8);
        }
        *(double *)v14 = v16;
        *(double *)a1 = v15;
        *(_DWORD *)(v14 + 8) = v18;
        *(_DWORD *)(a1 + 8) = v17;
        std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<double,int> *>(a1, a4, v9, a1);
LABEL_12:
        v14 += 16;
        if (v14 == a3)
        {
          v13 = a3;
          break;
        }
      }
    }
    if (v8 >= 17)
    {
      v19 = (unint64_t)v8 >> 4;
      v20 = a2 - 16;
      do
      {
        v21 = *(double *)a1;
        v22 = *(_DWORD *)(a1 + 8);
        std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<double,int> *>(a1, a4, v19);
        if (v20 == v23)
        {
          *(double *)v23 = v21;
          *(_DWORD *)(v23 + 8) = v22;
        }
        else
        {
          *(_QWORD *)v23 = *(_QWORD *)v20;
          *(_DWORD *)(v23 + 8) = *(_DWORD *)(v20 + 8);
          *(double *)v20 = v21;
          *(_DWORD *)(v20 + 8) = v22;
          std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<double,int> *>(a1, v23 + 16, a4, (v23 + 16 - a1) >> 4);
        }
        v20 -= 16;
      }
      while (v19-- > 2);
    }
    return v13;
  }
  return a3;
}

uint64_t std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<double,int> *>(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  double v10;
  double v11;
  double v12;
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  double v18;
  double v19;
  int v20;

  if (a3 >= 2)
  {
    v4 = a4 - result;
    v5 = (unint64_t)(a3 - 2) >> 1;
    if (v5 >= (a4 - result) >> 4)
    {
      v6 = v4 >> 3;
      v7 = (v4 >> 3) + 1;
      v8 = result + 16 * v7;
      v9 = v6 + 2;
      if (v9 < a3)
      {
        v10 = *(double *)(v8 + 16);
        if (*(double *)v8 < v10 || v10 >= *(double *)v8 && *(_DWORD *)(result + 16 * v7 + 8) < *(_DWORD *)(v8 + 24))
        {
          v8 += 16;
          v7 = v9;
        }
      }
      v11 = *(double *)v8;
      v12 = *(double *)a4;
      if (*(double *)v8 >= *(double *)a4)
      {
        if (v12 >= v11)
        {
          v14 = *(_DWORD *)(v8 + 8);
          v13 = *(_DWORD *)(a4 + 8);
          if (v14 < v13)
            return result;
        }
        else
        {
          v13 = *(_DWORD *)(a4 + 8);
          v14 = *(_DWORD *)(v8 + 8);
        }
        *(double *)a4 = v11;
        *(_DWORD *)(a4 + 8) = v14;
        if (v5 >= v7)
        {
          while (1)
          {
            v16 = 2 * v7;
            v7 = (2 * v7) | 1;
            v15 = result + 16 * v7;
            v17 = v16 + 2;
            if (v17 < a3)
            {
              v18 = *(double *)(v15 + 16);
              if (*(double *)v15 < v18
                || v18 >= *(double *)v15 && *(_DWORD *)(result + 16 * v7 + 8) < *(_DWORD *)(v15 + 24))
              {
                v15 += 16;
                v7 = v17;
              }
            }
            v19 = *(double *)v15;
            if (*(double *)v15 < v12)
              break;
            v20 = *(_DWORD *)(v15 + 8);
            if (v12 >= v19 && v20 < v13)
              break;
            *(double *)v8 = v19;
            *(_DWORD *)(v8 + 8) = v20;
            v8 = v15;
            if (v5 < v7)
              goto LABEL_14;
          }
        }
        v15 = v8;
LABEL_14:
        *(double *)v15 = v12;
        *(_DWORD *)(v15 + 8) = v13;
      }
    }
  }
  return result;
}

double std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<double,int> *>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  double v10;
  double result;

  v3 = 0;
  v4 = a3 - 2;
  if (a3 < 2)
    v4 = a3 - 1;
  v5 = v4 >> 1;
  do
  {
    v6 = a1;
    v7 = v3 + 1;
    a1 += 16 * (v3 + 1);
    v8 = 2 * v3;
    v3 = (2 * v3) | 1;
    v9 = v8 + 2;
    if (v9 < a3)
    {
      v10 = *(double *)(a1 + 16);
      if (*(double *)a1 < v10 || v10 >= *(double *)a1 && *(_DWORD *)(v6 + 16 * v7 + 8) < *(_DWORD *)(a1 + 24))
      {
        a1 += 16;
        v3 = v9;
      }
    }
    result = *(double *)a1;
    *(_QWORD *)v6 = *(_QWORD *)a1;
    *(_DWORD *)(v6 + 8) = *(_DWORD *)(a1 + 8);
  }
  while (v3 <= v5);
  return result;
}

uint64_t std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<double,int> *>(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  double v7;
  double v8;
  int v9;
  int v10;
  uint64_t v11;
  unint64_t v12;
  double v13;
  int v14;

  v4 = a4 - 2;
  if (a4 >= 2)
  {
    v5 = v4 >> 1;
    v6 = result + 16 * (v4 >> 1);
    v7 = *(double *)v6;
    v8 = *(double *)(a2 - 16);
    if (*(double *)v6 >= v8)
    {
      if (v8 < v7)
        return result;
      v10 = *(_DWORD *)(result + 16 * v5 + 8);
      v9 = *(_DWORD *)(a2 - 8);
      if (v10 >= v9)
        return result;
    }
    else
    {
      v9 = *(_DWORD *)(a2 - 8);
      v10 = *(_DWORD *)(v6 + 8);
    }
    *(double *)(a2 - 16) = v7;
    *(_DWORD *)(a2 - 8) = v10;
    if (v4 >= 2)
    {
      while (1)
      {
        v12 = v5 - 1;
        v5 = (v5 - 1) >> 1;
        v11 = result + 16 * v5;
        v13 = *(double *)v11;
        if (*(double *)v11 >= v8)
        {
          if (v8 < v13)
            break;
          v14 = *(_DWORD *)(result + 16 * v5 + 8);
          if (v14 >= v9)
            break;
        }
        else
        {
          v14 = *(_DWORD *)(v11 + 8);
        }
        *(double *)v6 = v13;
        *(_DWORD *)(v6 + 8) = v14;
        v6 = result + 16 * v5;
        if (v12 <= 1)
          goto LABEL_13;
      }
    }
    v11 = v6;
LABEL_13:
    *(double *)v11 = v8;
    *(_DWORD *)(v11 + 8) = v9;
  }
  return result;
}

_QWORD *std::__function::__func<kaldi::MatrixBase<float>::AggByCol(int,std::function<float ()(float,float)>,BOOL)::{lambda(float,float)#1},std::allocator<kaldi::MatrixBase<float>::AggByCol(int,std::function<float ()(float,float)>,BOOL)::{lambda(float,float)#1}>,float ()(float,float)>::~__func(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  *a1 = &unk_1E5D3F458;
  v2 = a1 + 1;
  v3 = (_QWORD *)a1[4];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

void std::__function::__func<kaldi::MatrixBase<float>::AggByCol(int,std::function<float ()(float,float)>,BOOL)::{lambda(float,float)#1},std::allocator<kaldi::MatrixBase<float>::AggByCol(int,std::function<float ()(float,float)>,BOOL)::{lambda(float,float)#1}>,float ()(float,float)>::~__func(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  *a1 = &unk_1E5D3F458;
  v1 = a1 + 1;
  v2 = (_QWORD *)a1[4];
  if (v2 == v1)
  {
    v3 = 4;
    v2 = v1;
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  JUMPOUT(0x1AF44D190);
}

_QWORD *std::__function::__func<kaldi::MatrixBase<float>::AggByCol(int,std::function<float ()(float,float)>,BOOL)::{lambda(float,float)#1},std::allocator<kaldi::MatrixBase<float>::AggByCol(int,std::function<float ()(float,float)>,BOOL)::{lambda(float,float)#1}>,float ()(float,float)>::__clone(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = a1 + 8;
  v2 = operator new(0x28uLL);
  *v2 = &unk_1E5D3F458;
  std::__function::__value_func<float ()(float,float)>::__value_func[abi:ne180100]((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_1ADC5B6BC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<kaldi::MatrixBase<float>::AggByCol(int,std::function<float ()(float,float)>,BOOL)::{lambda(float,float)#1},std::allocator<kaldi::MatrixBase<float>::AggByCol(int,std::function<float ()(float,float)>,BOOL)::{lambda(float,float)#1}>,float ()(float,float)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &unk_1E5D3F458;
  return std::__function::__value_func<float ()(float,float)>::__value_func[abi:ne180100]((uint64_t)(a2 + 1), a1 + 8);
}

_QWORD *std::__function::__func<kaldi::MatrixBase<float>::AggByCol(int,std::function<float ()(float,float)>,BOOL)::{lambda(float,float)#1},std::allocator<kaldi::MatrixBase<float>::AggByCol(int,std::function<float ()(float,float)>,BOOL)::{lambda(float,float)#1}>,float ()(float,float)>::destroy(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *result;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 8);
  result = *(_QWORD **)(a1 + 32);
  if (result == v1)
  {
    v3 = 4;
    result = v1;
  }
  else
  {
    if (!result)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

void std::__function::__func<kaldi::MatrixBase<float>::AggByCol(int,std::function<float ()(float,float)>,BOOL)::{lambda(float,float)#1},std::allocator<kaldi::MatrixBase<float>::AggByCol(int,std::function<float ()(float,float)>,BOOL)::{lambda(float,float)#1}>,float ()(float,float)>::destroy_deallocate(char *__p)
{
  char *v2;
  char *v3;
  uint64_t v4;

  v2 = __p + 8;
  v3 = (char *)*((_QWORD *)__p + 4);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
  }
  operator delete(__p);
}

uint64_t std::__function::__func<kaldi::MatrixBase<float>::AggByCol(int,std::function<float ()(float,float)>,BOOL)::{lambda(float,float)#1},std::allocator<kaldi::MatrixBase<float>::AggByCol(int,std::function<float ()(float,float)>,BOOL)::{lambda(float,float)#1}>,float ()(float,float)>::operator()(uint64_t a1, float *a2, float *a3)
{
  return std::function<float ()(float,float)>::operator()(a1 + 8, *a2, *a3);
}

uint64_t std::__function::__func<kaldi::MatrixBase<float>::AggByCol(int,std::function<float ()(float,float)>,BOOL)::{lambda(float,float)#1},std::allocator<kaldi::MatrixBase<float>::AggByCol(int,std::function<float ()(float,float)>,BOOL)::{lambda(float,float)#1}>,float ()(float,float)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<kaldi::MatrixBase<float>::AggByCol(int,std::function<float ()(float,float)>,BOOL)::{lambda(float,float)#1},std::allocator<kaldi::MatrixBase<float>::AggByCol(int,std::function<float ()(float,float)>,BOOL)::{lambda(float,float)#1}>,float ()(float,float)>::target_type()
{
}

_QWORD *std::__function::__value_func<float ()(float,float)>::swap[abi:ne180100](_QWORD *result, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD v6[4];

  v6[3] = *MEMORY[0x1E0C80C00];
  if (a2 != result)
  {
    v3 = result;
    v4 = (_QWORD *)result[3];
    v5 = (_QWORD *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, v6);
        (*(void (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(_QWORD, _QWORD *))(*(_QWORD *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(_QWORD *, _QWORD *))(v6[0] + 24))(v6, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, result);
      result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_1ADC5B950(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

void std::__function::__func<kaldi::MatrixBase<float>::MaxByCol(int,BOOL)::{lambda(float,float)#1},std::allocator<kaldi::MatrixBase<float>::MaxByCol(int,BOOL)::{lambda(float,float)#1}>,float ()(float,float)>::~__func()
{
  JUMPOUT(0x1AF44D190);
}

_QWORD *std::__function::__func<kaldi::MatrixBase<float>::MaxByCol(int,BOOL)::{lambda(float,float)#1},std::allocator<kaldi::MatrixBase<float>::MaxByCol(int,BOOL)::{lambda(float,float)#1}>,float ()(float,float)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &unk_1E5D3F4B0;
  return result;
}

void std::__function::__func<kaldi::MatrixBase<float>::MaxByCol(int,BOOL)::{lambda(float,float)#1},std::allocator<kaldi::MatrixBase<float>::MaxByCol(int,BOOL)::{lambda(float,float)#1}>,float ()(float,float)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &unk_1E5D3F4B0;
}

float std::__function::__func<kaldi::MatrixBase<float>::MaxByCol(int,BOOL)::{lambda(float,float)#1},std::allocator<kaldi::MatrixBase<float>::MaxByCol(int,BOOL)::{lambda(float,float)#1}>,float ()(float,float)>::operator()(uint64_t a1, float *a2, uint64_t a3)
{
  float result;

  result = *a2;
  if (*a2 <= *(float *)a3)
    return *(float *)a3;
  return result;
}

uint64_t std::__function::__func<kaldi::MatrixBase<float>::MaxByCol(int,BOOL)::{lambda(float,float)#1},std::allocator<kaldi::MatrixBase<float>::MaxByCol(int,BOOL)::{lambda(float,float)#1}>,float ()(float,float)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<kaldi::MatrixBase<float>::MaxByCol(int,BOOL)::{lambda(float,float)#1},std::allocator<kaldi::MatrixBase<float>::MaxByCol(int,BOOL)::{lambda(float,float)#1}>,float ()(float,float)>::target_type()
{
}

void std::__function::__func<kaldi::MatrixBase<float>::MinByCol(int,BOOL)::{lambda(float,float)#1},std::allocator<kaldi::MatrixBase<float>::MinByCol(int,BOOL)::{lambda(float,float)#1}>,float ()(float,float)>::~__func()
{
  JUMPOUT(0x1AF44D190);
}

_QWORD *std::__function::__func<kaldi::MatrixBase<float>::MinByCol(int,BOOL)::{lambda(float,float)#1},std::allocator<kaldi::MatrixBase<float>::MinByCol(int,BOOL)::{lambda(float,float)#1}>,float ()(float,float)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &unk_1E5D3F508;
  return result;
}

void std::__function::__func<kaldi::MatrixBase<float>::MinByCol(int,BOOL)::{lambda(float,float)#1},std::allocator<kaldi::MatrixBase<float>::MinByCol(int,BOOL)::{lambda(float,float)#1}>,float ()(float,float)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &unk_1E5D3F508;
}

float std::__function::__func<kaldi::MatrixBase<float>::MinByCol(int,BOOL)::{lambda(float,float)#1},std::allocator<kaldi::MatrixBase<float>::MinByCol(int,BOOL)::{lambda(float,float)#1}>,float ()(float,float)>::operator()(uint64_t a1, float *a2, uint64_t a3)
{
  float result;

  result = *a2;
  if (*a2 >= *(float *)a3)
    return *(float *)a3;
  return result;
}

uint64_t std::__function::__func<kaldi::MatrixBase<float>::MinByCol(int,BOOL)::{lambda(float,float)#1},std::allocator<kaldi::MatrixBase<float>::MinByCol(int,BOOL)::{lambda(float,float)#1}>,float ()(float,float)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<kaldi::MatrixBase<float>::MinByCol(int,BOOL)::{lambda(float,float)#1},std::allocator<kaldi::MatrixBase<float>::MinByCol(int,BOOL)::{lambda(float,float)#1}>,float ()(float,float)>::target_type()
{
}

uint64_t quasar::SpeechRecognizer::getSysConfig(quasar::SpeechRecognizer *this)
{
  return *((_QWORD *)this + 6);
}

void quasar::SpeechRecognizer::GetSpeechModelInfo(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  const quasar::SpeechModelInfo *SpeechModelInfo;
  _OWORD v5[2];
  int v6;
  uint64_t v7[3];
  _BYTE v8[1544];

  quasar::SystemConfig::SystemConfig((quasar::SystemConfig *)v8);
  memset(v7, 0, sizeof(v7));
  memset(v5, 0, sizeof(v5));
  v6 = 1065353216;
  quasar::SystemConfig::readJsonFile((uint64_t)v8, a1, v7, (uint64_t)v5, 0, 1);
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table((uint64_t)v5);
  *(_QWORD *)&v5[0] = v7;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v5);
  SpeechModelInfo = (const quasar::SpeechModelInfo *)quasar::SystemConfig::getSpeechModelInfo((quasar::SystemConfig *)v8);
  quasar::SpeechModelInfo::SpeechModelInfo(a2, SpeechModelInfo);
  quasar::SystemConfig::~SystemConfig((quasar::SystemConfig *)v8);
}

void sub_1ADC5BB74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18)
{
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table((uint64_t)&a9);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a9);
  quasar::SystemConfig::~SystemConfig((quasar::SystemConfig *)&a18);
  _Unwind_Resume(a1);
}

uint64_t *quasar::SpeechRecognizer::make_shared@<X0>(__int128 *a1@<X0>, int a2@<W1>, int a3@<W2>, __int128 **a4@<X3>, char a5@<W4>, _WORD *a6@<X5>, uint64_t *a7@<X8>)
{
  uint64_t v14;

  v14 = operator new();
  quasar::SpeechRecognizer::SpeechRecognizer(v14, a1, a2, a3, a4, a5, a6);
  return std::shared_ptr<quasar::SpeechRecognizer>::shared_ptr[abi:ne180100]<quasar::SpeechRecognizer,void>(a7, v14);
}

void sub_1ADC5BC30(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10B3C404C59BE1BLL);
  _Unwind_Resume(a1);
}

uint64_t quasar::SpeechRecognizer::SpeechRecognizer(uint64_t a1, __int128 *a2, int a3, int a4, __int128 **a5, char a6, _WORD *a7)
{
  _QWORD *v14;
  __int128 v15;
  _QWORD *v16;
  _QWORD *v17;
  char *v18;
  uint64_t v19;

  v14 = quasar::SpeechRecognizerBase::SpeechRecognizerBase((_QWORD *)a1);
  v14[1] = 0;
  v14[2] = 0;
  *(_OWORD *)(v14 + 3) = 0u;
  *v14 = &off_1E5D362F8;
  *(_OWORD *)(v14 + 5) = 0u;
  *(_OWORD *)(v14 + 7) = 0u;
  v14[9] = 0;
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(v14 + 10), *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v15 = *a2;
    v14[12] = *((_QWORD *)a2 + 2);
    *((_OWORD *)v14 + 5) = v15;
  }
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 120) = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)(a1 + 104), *a5, a5[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a5[1] - (char *)*a5) >> 3));
  *(_QWORD *)(a1 + 136) = 850045863;
  *(_DWORD *)(a1 + 128) = 0;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_QWORD *)(a1 + 192) = 0;
  *(_QWORD *)(a1 + 200) = 1018212795;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_QWORD *)(a1 + 240) = 0;
  v16 = operator new(0x58uLL);
  v16[3] = 850045863;
  *(_QWORD *)(a1 + 248) = v16 + 3;
  v16[1] = 0;
  v16[2] = 0;
  *v16 = &unk_1E5D455F0;
  *((_OWORD *)v16 + 2) = 0u;
  *((_OWORD *)v16 + 3) = 0u;
  *((_OWORD *)v16 + 4) = 0u;
  v16[10] = 0;
  *(_QWORD *)(a1 + 256) = v16;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_DWORD *)(a1 + 296) = a3;
  *(_DWORD *)(a1 + 300) = a4;
  *(_QWORD *)(a1 + 328) = 0;
  v17 = operator new(0x20uLL);
  *v17 = &unk_1E5D3CF38;
  v17[1] = quasar::SpeechRecognizer::isRecogCancelled;
  v17[2] = 0;
  v17[3] = a1;
  *(_QWORD *)(a1 + 328) = v17;
  *(_BYTE *)(a1 + 336) = a6;
  *(_WORD *)(a1 + 337) = *a7;
  *(_QWORD *)(a1 + 392) = 0;
  *(_OWORD *)(a1 + 360) = 0u;
  *(_OWORD *)(a1 + 376) = 0u;
  *(_OWORD *)(a1 + 344) = 0u;
  *(_DWORD *)(a1 + 400) = 1065353216;
  *(_QWORD *)(a1 + 416) = 0;
  *(_QWORD *)(a1 + 424) = 0;
  *(_QWORD *)(a1 + 408) = 0;
  *(_BYTE *)(a1 + 432) = 1;
  *(_QWORD *)(a1 + 440) = 850045863;
  *(_WORD *)(a1 + 528) = 0;
  *(_OWORD *)(a1 + 496) = 0u;
  *(_OWORD *)(a1 + 512) = 0u;
  *(_OWORD *)(a1 + 464) = 0u;
  *(_OWORD *)(a1 + 480) = 0u;
  *(_OWORD *)(a1 + 448) = 0u;
  *(_OWORD *)(a1 + 536) = 0u;
  *(_OWORD *)(a1 + 552) = 0u;
  *(_OWORD *)(a1 + 568) = 0u;
  *(_QWORD *)(a1 + 584) = 0;
  *(_DWORD *)(a1 + 592) = 1065353216;
  *(_OWORD *)(a1 + 600) = 0u;
  *(_OWORD *)(a1 + 616) = 0u;
  _ZNSt3__115allocate_sharedB8ne180100IN6quasar21ConfusionNetworkCacheENS_9allocatorIS2_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_((_QWORD *)(a1 + 632));
  v18 = (char *)operator new(0x198uLL);
  *((_QWORD *)v18 + 2) = 0;
  *(_QWORD *)v18 = &unk_1E5D440B8;
  *((_QWORD *)v18 + 1) = 0;
  *(_OWORD *)(v18 + 40) = 0u;
  *(_OWORD *)(v18 + 56) = 0u;
  *(_OWORD *)(v18 + 72) = 0u;
  *(_OWORD *)(v18 + 88) = 0u;
  *(_OWORD *)(v18 + 104) = 0u;
  *(_OWORD *)(v18 + 120) = 0u;
  *(_OWORD *)(v18 + 136) = 0u;
  *(_OWORD *)(v18 + 152) = 0u;
  *(_OWORD *)(v18 + 168) = 0u;
  *(_OWORD *)(v18 + 184) = 0u;
  *(_OWORD *)(v18 + 200) = 0u;
  *(_OWORD *)(v18 + 216) = 0u;
  *(_OWORD *)(v18 + 232) = 0u;
  *(_OWORD *)(v18 + 248) = 0u;
  *(_OWORD *)(v18 + 24) = 0u;
  *(_OWORD *)(v18 + 264) = 0u;
  *(_OWORD *)(v18 + 280) = 0u;
  *(_OWORD *)(v18 + 296) = 0u;
  *(_OWORD *)(v18 + 312) = 0u;
  *(_OWORD *)(v18 + 328) = 0u;
  *(_OWORD *)(v18 + 344) = 0u;
  *(_OWORD *)(v18 + 360) = 0u;
  *(_OWORD *)(v18 + 376) = 0u;
  *(_OWORD *)(v18 + 392) = 0u;
  quasar::SpeechRequestResultData::SpeechRequestResultData((quasar::SpeechRequestResultData *)(v18 + 24));
  *(_QWORD *)(a1 + 648) = v19;
  *(_QWORD *)(a1 + 656) = v18;
  *(_OWORD *)(a1 + 664) = 0u;
  *(_OWORD *)(a1 + 680) = 0u;
  *(_OWORD *)(a1 + 696) = 0u;
  *(_OWORD *)(a1 + 712) = 0u;
  return a1;
}

void sub_1ADC5BF18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, std::mutex *a9, uint64_t a10, uint64_t a11, _Unwind_Exception *exception_object, uint64_t a13, uint64_t a14, std::condition_variable *a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  quasar::Bitmap *v18;
  std::__shared_weak_count *v19;

  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)v18 + 64);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)v18 + 48);
  a18 = a16;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a18);
  v19 = (std::__shared_weak_count *)*((_QWORD *)v18 + 2);
  if (v19)
    std::__shared_weak_count::__release_weak(v19);
  quasar::Bitmap::~Bitmap(v18);
  _Unwind_Resume(a1);
}

void sub_1ADC5C07C()
{
  JUMPOUT(0x1ADC5C028);
}

BOOL quasar::SpeechRecognizer::isRecogCancelled(quasar::SpeechRecognizer *this)
{
  std::mutex *v2;
  _BOOL8 v3;

  v2 = (std::mutex *)((char *)this + 136);
  std::mutex::lock((std::mutex *)((char *)this + 136));
  v3 = *((_DWORD *)this + 32) == 3;
  std::mutex::unlock(v2);
  return v3;
}

void quasar::SpeechRecognizer::~SpeechRecognizer(quasar::SpeechRecognizer *this)
{
  uint64_t v2;
  void *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  quasar::SpeechRecognizer *v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  void **v9;

  *(_QWORD *)this = &off_1E5D362F8;
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this + 712);
  v2 = *((_QWORD *)this + 88);
  *((_QWORD *)this + 88) = 0;
  if (v2)
    std::default_delete<quasar::QsrTextSymbolTable>::operator()[abi:ne180100]((uint64_t)this + 704, v2);
  v3 = (void *)*((_QWORD *)this + 85);
  if (v3)
  {
    *((_QWORD *)this + 86) = v3;
    operator delete(v3);
  }
  v4 = (std::__shared_weak_count *)*((_QWORD *)this + 84);
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this + 648);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this + 632);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this + 616);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this + 600);
  std::__hash_table<std::__hash_value_type<std::string,quasar::LmeDataFactoryBase::PronSet>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,quasar::LmeDataFactoryBase::PronSet>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,quasar::LmeDataFactoryBase::PronSet>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,quasar::LmeDataFactoryBase::PronSet>>>::~__hash_table((uint64_t)this + 560);
  v9 = (void **)((char *)this + 536);
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100](&v9);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this + 512);
  v5 = *((_QWORD *)this + 63);
  *((_QWORD *)this + 63) = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  std::mutex::~mutex((std::mutex *)((char *)this + 440));
  v9 = (void **)((char *)this + 408);
  std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100](&v9);
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table((uint64_t)this + 368);
  v6 = (quasar::SpeechRecognizer *)*((_QWORD *)this + 41);
  if (v6 == (quasar::SpeechRecognizer *)((char *)this + 304))
  {
    v7 = 4;
    v6 = (quasar::SpeechRecognizer *)((char *)this + 304);
  }
  else
  {
    if (!v6)
      goto LABEL_14;
    v7 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v6 + 8 * v7))();
LABEL_14:
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this + 280);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this + 264);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this + 248);
  std::condition_variable::~condition_variable((std::condition_variable *)((char *)this + 200));
  std::mutex::~mutex((std::mutex *)((char *)this + 136));
  v9 = (void **)((char *)this + 104);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v9);
  if (*((char *)this + 103) < 0)
    operator delete(*((void **)this + 10));
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this + 64);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this + 48);
  v9 = (void **)((char *)this + 24);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v9);
  v8 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v8)
    std::__shared_weak_count::__release_weak(v8);
  quasar::Bitmap::~Bitmap(this);
}

{
  quasar::SpeechRecognizer::~SpeechRecognizer(this);
  JUMPOUT(0x1AF44D190);
}

std::string *quasar::SpeechRecognizer::AddConfigOverride(uint64_t a1, unsigned __int8 *a2, const std::string *a3)
{
  BOOL v6;
  unsigned __int8 *v7;
  _OWORD v9[17];

  if (*(_DWORD *)(a1 + 128))
    v6 = quasar::gLogLevel < 4;
  else
    v6 = 1;
  if (!v6)
  {
    memset(v9, 0, sizeof(v9));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v9);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"AddConfigOverride() can only be called before init()", 52);
    quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)v9);
  }
  *(_QWORD *)&v9[0] = a2;
  v7 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1 + 368, a2, (uint64_t)&std::piecewise_construct, (__int128 **)v9);
  return std::string::operator=((std::string *)(v7 + 40), a3);
}

void sub_1ADC5C344(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&a9);
  _Unwind_Resume(a1);
}

uint64_t quasar::SpeechRecognizer::init(quasar::SpeechRecognizer *this)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t v7;
  std::__shared_weak_count *v8;
  void *__p[2];
  char v10;
  char *v11[32];

  quasar::SpeechRecognizerActiveConfiguration::all(v11);
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  v7 = 0;
  v8 = 0;
  v2 = quasar::SpeechRecognizer::init((uint64_t)this, (const quasar::SpeechRecognizerActiveConfiguration *)v11, 0, 0, (uint64_t)__p, &v7, 0);
  v3 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  if (v10 < 0)
    operator delete(__p[0]);
  quasar::SpeechRecognizerActiveConfiguration::~SpeechRecognizerActiveConfiguration(v11);
  return v2;
}

void sub_1ADC5C418(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char *a18)
{
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  if (a17 < 0)
    operator delete(__p);
  quasar::SpeechRecognizerActiveConfiguration::~SpeechRecognizerActiveConfiguration(&a18);
  _Unwind_Resume(a1);
}

uint64_t quasar::SpeechRecognizer::init(uint64_t a1, const quasar::SpeechRecognizerActiveConfiguration *a2, int a3, int a4, uint64_t a5, uint64_t *a6, int a7)
{
  _QWORD *v12;
  quasar::SystemConfig **v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t *v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  quasar::SystemConfig *v21;
  uint64_t PtreeOptional;
  uint64_t v23;
  uint64_t SpeechModelInfo;
  std::string *v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  quasar::SystemConfig *v29;
  char *v30;
  unint64_t *v31;
  unint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *p_shared_owners;
  unint64_t v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  void *v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  std::__shared_weak_count *size;
  unint64_t *v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  quasar::SpeakerCodeTrainingConfig **v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  quasar::MuxHelper **v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  const quasar::PTree *v61;
  quasar::ModelLoader *v62;
  uint64_t ModelLoader;
  uint64_t v64;
  uint64_t v65;
  unint64_t *v66;
  unint64_t v67;
  std::__shared_weak_count *v68;
  unint64_t *v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t *v74;
  unint64_t v75;
  std::__shared_weak_count *v76;
  unint64_t *v77;
  unint64_t v78;
  uint64_t v79;
  _QWORD *v80;
  char v81;
  uint64_t v82;
  uint64_t v83;
  _QWORD *v84;
  std::string *v85;
  std::string::size_type v86;
  _QWORD *v88;
  char v89;
  uint64_t v90;
  uint64_t v91;
  _QWORD *v92;
  _QWORD *v93;
  char v94;
  uint64_t v95;
  uint64_t v96;
  _QWORD *v97;
  uint64_t v100;
  std::__shared_weak_count *v101;
  uint64_t v102;
  std::__shared_weak_count *v103;
  uint64_t v104;
  std::__shared_weak_count *v105;
  char *v106;
  std::__shared_weak_count *v107;
  void *__p[2];
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  std::string v125;
  _QWORD *v126;
  std::string v127;
  uint64_t v128;

  v128 = *MEMORY[0x1E0C80C00];
  v12 = (_QWORD *)operator new();
  *v12 = &unk_1E5D362C8;
  v12[1] = a1;
  v126 = v12;
  std::allocate_shared[abi:ne180100]<quasar::SpeechRecognizerConfig,std::allocator<quasar::SpeechRecognizerConfig>,std::string &,std::vector<std::string> &,std::unordered_map<std::string,std::string> &,BOOL &,quasar::DecoderOptions const&,void>(a1 + 80, a1 + 104, a1 + 368, (unsigned __int8 *)(a1 + 336), __p);
  v13 = (quasar::SystemConfig **)(a1 + 48);
  std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100](a1 + 48, (__int128 *)__p);
  v14 = (std::__shared_weak_count *)__p[1];
  if (__p[1])
  {
    v15 = (unint64_t *)((char *)__p[1] + 8);
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  std::allocate_shared[abi:ne180100]<quasar::SpeechRecognizerModelLoader,std::allocator<quasar::SpeechRecognizerModelLoader>,std::shared_ptr<quasar::SpeechRecognizerConfig> &,std::unique_ptr<quasar::SpeechRecognizerModelLoader::Factory>,void>(a1 + 48, (uint64_t *)&v126, __p);
  v17 = (uint64_t *)(a1 + 64);
  std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100](a1 + 64, (__int128 *)__p);
  v18 = (std::__shared_weak_count *)__p[1];
  if (__p[1])
  {
    v19 = (unint64_t *)((char *)__p[1] + 8);
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  v21 = *v13;
  if (a7)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "lme-create");
    PtreeOptional = quasar::SystemConfig::getPtreeOptional((uint64_t)v21, (uint64_t)__p);
    v23 = PtreeOptional;
    if (SBYTE7(v109) < 0)
    {
      operator delete(__p[0]);
      if (!v23)
        goto LABEL_51;
    }
    else if (!PtreeOptional)
    {
      goto LABEL_51;
    }
    SpeechModelInfo = quasar::SystemConfig::getSpeechModelInfo(*v13);
    std::map<std::string,std::string>::map[abi:ne180100]((uint64_t *)&v125, (const void ***)(SpeechModelInfo + 240));
    std::string::basic_string[abi:ne180100]<0>(__p, "\\NT-edit");
    v25 = (std::string *)std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::find<std::string>((uint64_t)&v125, (const void **)__p);
    if (SBYTE7(v109) < 0)
      operator delete(__p[0]);
    if (&v125.__r_.__value_.__r.__words[1] != (std::string::size_type *)v25)
    {
      std::allocate_shared[abi:ne180100]<quasar::LmeDataFactory,std::allocator<quasar::LmeDataFactory>,std::string &,void>(a1 + 80, __p);
      std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100](a1 + 512, (__int128 *)__p);
      v26 = (std::__shared_weak_count *)__p[1];
      if (__p[1])
      {
        v27 = (unint64_t *)((char *)__p[1] + 8);
        do
          v28 = __ldaxr(v27);
        while (__stlxr(v28 - 1, v27));
        if (!v28)
        {
          ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
          std::__shared_weak_count::__release_weak(v26);
        }
      }
      if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(a1 + 512) + 16))(*(_QWORD *)(a1 + 512)))
      {
        v123 = 0u;
        v124 = 0u;
        v121 = 0u;
        v122 = 0u;
        v119 = 0u;
        v120 = 0u;
        v117 = 0u;
        v118 = 0u;
        v115 = 0u;
        v116 = 0u;
        v113 = 0u;
        v114 = 0u;
        v112 = 0u;
        v110 = 0u;
        v111 = 0u;
        *(_OWORD *)__p = 0u;
        v109 = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
        v88 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"lmeDataFactory initialization with ", 35);
        v89 = *(_BYTE *)(a1 + 103);
        if (v89 >= 0)
          v90 = a1 + 80;
        else
          v90 = *(_QWORD *)(a1 + 80);
        if (v89 >= 0)
          v91 = *(unsigned __int8 *)(a1 + 103);
        else
          v91 = *(_QWORD *)(a1 + 88);
        v92 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v88, v90, v91);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v92, (uint64_t)" failed", 7);
        quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)__p);
      }
      if (!quasar::QuasarG2PFactory::g2pModelExist(*v13, v29))
      {
        v123 = 0u;
        v124 = 0u;
        v121 = 0u;
        v122 = 0u;
        v119 = 0u;
        v120 = 0u;
        v117 = 0u;
        v118 = 0u;
        v115 = 0u;
        v116 = 0u;
        v113 = 0u;
        v114 = 0u;
        v112 = 0u;
        v110 = 0u;
        v111 = 0u;
        *(_OWORD *)__p = 0u;
        v109 = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
        v93 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"G2P initialization with ", 24);
        v94 = *(_BYTE *)(a1 + 103);
        if (v94 >= 0)
          v95 = a1 + 80;
        else
          v95 = *(_QWORD *)(a1 + 80);
        if (v94 >= 0)
          v96 = *(unsigned __int8 *)(a1 + 103);
        else
          v96 = *(_QWORD *)(a1 + 88);
        v97 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v93, v95, v96);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v97, (uint64_t)" failed", 7);
        quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)__p);
      }
      v30 = (char *)operator new(0x68uLL);
      *((_QWORD *)v30 + 1) = 0;
      v31 = (unint64_t *)(v30 + 8);
      *((_QWORD *)v30 + 2) = 0;
      *(_QWORD *)v30 = &unk_1E5D428E0;
      v30[32] = 0;
      *((_QWORD *)v30 + 3) = &unk_1E5D35128;
      *((_DWORD *)v30 + 9) = 0;
      *((_QWORD *)v30 + 5) = v30 + 40;
      *((_QWORD *)v30 + 6) = v30 + 40;
      *(_OWORD *)(v30 + 56) = 0u;
      *(_OWORD *)(v30 + 72) = 0u;
      *((_QWORD *)v30 + 11) = 0;
      *((_DWORD *)v30 + 24) = 1065353216;
      v127.__r_.__value_.__r.__words[0] = (std::string::size_type)(v30 + 24);
      v127.__r_.__value_.__l.__size_ = (std::string::size_type)v30;
      v106 = v30 + 24;
      v107 = (std::__shared_weak_count *)v30;
      do
        v32 = __ldxr(v31);
      while (__stxr(v32 + 1, v31));
      v33 = *(std::__shared_weak_count **)(a1 + 520);
      v104 = *(_QWORD *)(a1 + 512);
      v105 = v33;
      if (v33)
      {
        p_shared_owners = (unint64_t *)&v33->__shared_owners_;
        do
          v35 = __ldxr(p_shared_owners);
        while (__stxr(v35 + 1, p_shared_owners));
      }
      v36 = quasar::SystemConfig::getSpeechModelInfo(*v13);
      quasar::QuasarG2PFactory::createPronGuesser((uint64_t *)&v106, &v104, (__int128 *)(v36 + 120), *v13, 4, 0, __p);
      v37 = __p[0];
      __p[0] = 0;
      v38 = *(_QWORD *)(a1 + 504);
      *(_QWORD *)(a1 + 504) = v37;
      if (v38)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v38 + 8))(v38);
        v39 = __p[0];
        __p[0] = 0;
        if (v39)
          (*(void (**)(void *))(*(_QWORD *)v39 + 8))(v39);
      }
      v40 = v105;
      if (v105)
      {
        v41 = (unint64_t *)&v105->__shared_owners_;
        do
          v42 = __ldaxr(v41);
        while (__stlxr(v42 - 1, v41));
        if (!v42)
        {
          ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
          std::__shared_weak_count::__release_weak(v40);
        }
      }
      v43 = v107;
      if (v107)
      {
        v44 = (unint64_t *)&v107->__shared_owners_;
        do
          v45 = __ldaxr(v44);
        while (__stlxr(v45 - 1, v44));
        if (!v45)
        {
          ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
          std::__shared_weak_count::__release_weak(v43);
        }
      }
      if (!*(_QWORD *)(a1 + 504))
      {
        v123 = 0u;
        v124 = 0u;
        v121 = 0u;
        v122 = 0u;
        v119 = 0u;
        v120 = 0u;
        v117 = 0u;
        v118 = 0u;
        v115 = 0u;
        v116 = 0u;
        v113 = 0u;
        v114 = 0u;
        v112 = 0u;
        v110 = 0u;
        v111 = 0u;
        *(_OWORD *)__p = 0u;
        v109 = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"G2P model exists but initialization failed", 42);
        quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)__p);
      }
      size = (std::__shared_weak_count *)v127.__r_.__value_.__l.__size_;
      if (v127.__r_.__value_.__l.__size_)
      {
        v47 = (unint64_t *)(v127.__r_.__value_.__l.__size_ + 8);
        do
          v48 = __ldaxr(v47);
        while (__stlxr(v48 - 1, v47));
        if (!v48)
        {
          ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
          std::__shared_weak_count::__release_weak(size);
        }
      }
    }
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v125, (_QWORD *)v125.__r_.__value_.__l.__size_);
  }
LABEL_51:
  std::string::basic_string[abi:ne180100]<0>(__p, "speaker-code-training");
  v49 = quasar::SystemConfig::getPtreeOptional((uint64_t)v21, (uint64_t)__p);
  v50 = v49;
  if (SBYTE7(v109) < 0)
  {
    operator delete(__p[0]);
    if (!v50)
      goto LABEL_65;
  }
  else if (!v49)
  {
    goto LABEL_65;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "speaker-code-training.");
  quasar::SystemConfig::setPrefix((std::string *)v21, (const std::string *)__p);
  if (SBYTE7(v109) < 0)
    operator delete(__p[0]);
  _ZNSt3__115allocate_sharedB8ne180100IN6quasar25SpeakerCodeTrainingConfigENS_9allocatorIS2_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(__p);
  v51 = (quasar::SpeakerCodeTrainingConfig **)(a1 + 600);
  std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100](a1 + 600, (__int128 *)__p);
  v52 = (std::__shared_weak_count *)__p[1];
  if (__p[1])
  {
    v53 = (unint64_t *)((char *)__p[1] + 8);
    do
      v54 = __ldaxr(v53);
    while (__stlxr(v54 - 1, v53));
    if (!v54)
    {
      ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
      std::__shared_weak_count::__release_weak(v52);
    }
  }
  quasar::SpeakerCodeTrainingConfig::registerParams(*v51, v21);
  std::string::basic_string[abi:ne180100]<0>(__p, "speaker-code-training");
  quasar::SystemConfig::readPtree((uint64_t)v21, (uint64_t)__p, 0, 0);
  if (SBYTE7(v109) < 0)
    operator delete(__p[0]);
  quasar::SpeakerCodeTrainingConfig::init(*v51);
LABEL_65:
  std::string::basic_string[abi:ne180100]<0>(__p, "mux.");
  quasar::SystemConfig::setPrefix((std::string *)v21, (const std::string *)__p);
  if (SBYTE7(v109) < 0)
    operator delete(__p[0]);
  _ZNSt3__115allocate_sharedB8ne180100IN6quasar9MuxHelperENS_9allocatorIS2_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(__p);
  v55 = (quasar::MuxHelper **)(a1 + 616);
  std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100](a1 + 616, (__int128 *)__p);
  v56 = (std::__shared_weak_count *)__p[1];
  if (__p[1])
  {
    v57 = (unint64_t *)((char *)__p[1] + 8);
    do
      v58 = __ldaxr(v57);
    while (__stlxr(v58 - 1, v57));
    if (!v58)
    {
      ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
      std::__shared_weak_count::__release_weak(v56);
    }
  }
  quasar::MuxHelper::registerParams(*v55, v21);
  std::string::basic_string[abi:ne180100]<0>(__p, "mux");
  quasar::SystemConfig::readPtree((uint64_t)v21, (uint64_t)__p, 1u, 0);
  if (SBYTE7(v109) < 0)
    operator delete(__p[0]);
  quasar::MuxHelper::init(*v55);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::operator=[abi:ne180100]((_QWORD *)(a1 + 712), a6);
  v59 = *(unsigned __int8 *)(a5 + 23);
  if ((v59 & 0x80u) != 0)
    v59 = *(_QWORD *)(a5 + 8);
  if (v59)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "embedded-mlock");
    v60 = quasar::SystemConfig::getPtreeOptional((uint64_t)v21, (uint64_t)__p);
    v61 = (const quasar::PTree *)v60;
    if (SBYTE7(v109) < 0)
    {
      operator delete(__p[0]);
      if (!v61)
      {
LABEL_82:
        quasar::SpeechRecognizerActiveConfiguration::SpeechRecognizerActiveConfiguration((quasar::SpeechRecognizerActiveConfiguration *)__p, a2);
        if (*(char *)(a5 + 23) < 0)
          std::string::__init_copy_ctor_external(&v127, *(const std::string::value_type **)a5, *(_QWORD *)(a5 + 8));
        else
          v127 = *(std::string *)a5;
        std::set<std::string>::set[abi:ne180100]((uint64_t)&v125, (const void **)&v127.__r_.__value_.__l.__data_, 1);
        std::optional<std::set<std::string>>::operator=[abi:ne180100]<std::set<std::string>,void>((uint64_t)&v110, &v125);
        std::__tree<std::string>::destroy((uint64_t)&v125, (char *)v125.__r_.__value_.__l.__size_);
        if (SHIBYTE(v127.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v127.__r_.__value_.__l.__data_);
        ModelLoader = quasar::SystemConfig::getModelLoader(v21);
        quasar::ModelLoader::enableEmbeddedMlock(ModelLoader, 1);
        v64 = *v17;
        v65 = a6[1];
        v102 = *a6;
        v103 = (std::__shared_weak_count *)v65;
        if (v65)
        {
          v66 = (unint64_t *)(v65 + 8);
          do
            v67 = __ldxr(v66);
          while (__stxr(v67 + 1, v66));
        }
        quasar::SpeechRecognizerModelLoader::setActiveConfiguration(v64, (uint64_t)__p, a3, a4, &v102);
        v68 = v103;
        if (v103)
        {
          v69 = (unint64_t *)&v103->__shared_owners_;
          do
            v70 = __ldaxr(v69);
          while (__stlxr(v70 - 1, v69));
          if (!v70)
          {
            ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
            std::__shared_weak_count::__release_weak(v68);
          }
        }
        v71 = quasar::SystemConfig::getModelLoader(v21);
        quasar::ModelLoader::enableEmbeddedMlock(v71, 0);
        quasar::SpeechRecognizerActiveConfiguration::~SpeechRecognizerActiveConfiguration((char **)__p);
        goto LABEL_96;
      }
    }
    else if (!v60)
    {
      goto LABEL_82;
    }
    v62 = (quasar::ModelLoader *)quasar::SystemConfig::getModelLoader(v21);
    quasar::ModelLoader::setEmbeddedMlockOverrides(v62, v61);
    goto LABEL_82;
  }
LABEL_96:
  v72 = *v17;
  v73 = a6[1];
  v100 = *a6;
  v101 = (std::__shared_weak_count *)v73;
  if (v73)
  {
    v74 = (unint64_t *)(v73 + 8);
    do
      v75 = __ldxr(v74);
    while (__stxr(v75 + 1, v74));
  }
  quasar::SpeechRecognizerModelLoader::setActiveConfiguration(v72, (uint64_t)a2, a3, a4, &v100);
  v76 = v101;
  if (v101)
  {
    v77 = (unint64_t *)&v101->__shared_owners_;
    do
      v78 = __ldaxr(v77);
    while (__stlxr(v78 - 1, v77));
    if (!v78)
    {
      ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
      std::__shared_weak_count::__release_weak(v76);
    }
  }
  v79 = (uint64_t)v126;
  v126 = 0;
  if (v79)
    (*(void (**)(uint64_t))(*(_QWORD *)v79 + 8))(v79);
  *(_DWORD *)(a1 + 128) = 1;
  if (quasar::gLogLevel > 2)
  {
    v123 = 0u;
    v124 = 0u;
    v121 = 0u;
    v122 = 0u;
    v119 = 0u;
    v120 = 0u;
    v117 = 0u;
    v118 = 0u;
    v115 = 0u;
    v116 = 0u;
    v113 = 0u;
    v114 = 0u;
    v112 = 0u;
    v110 = 0u;
    v111 = 0u;
    *(_OWORD *)__p = 0u;
    v109 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    v80 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Initialized SpeechRecognizer with config ", 41);
    v81 = *(_BYTE *)(a1 + 103);
    v82 = v81 >= 0 ? a1 + 80 : *(_QWORD *)(a1 + 80);
    v83 = v81 >= 0 ? *(unsigned __int8 *)(a1 + 103) : *(_QWORD *)(a1 + 88);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v80, v82, v83);
    quasar::QuasarProdInfoMessage::~QuasarProdInfoMessage((quasar::QuasarProdInfoMessage *)__p);
    if (quasar::gLogLevel >= 4)
    {
      v123 = 0u;
      v124 = 0u;
      v121 = 0u;
      v122 = 0u;
      v119 = 0u;
      v120 = 0u;
      v117 = 0u;
      v118 = 0u;
      v115 = 0u;
      v116 = 0u;
      v113 = 0u;
      v114 = 0u;
      v112 = 0u;
      v110 = 0u;
      v111 = 0u;
      *(_OWORD *)__p = 0u;
      v109 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
      v84 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"SpeechRecognizer config version=", 32);
      quasar::SystemConfig::getMainModelVersion(*v13, &v125);
      if ((v125.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v85 = &v125;
      else
        v85 = (std::string *)v125.__r_.__value_.__r.__words[0];
      if ((v125.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v86 = HIBYTE(v125.__r_.__value_.__r.__words[2]);
      else
        v86 = v125.__r_.__value_.__l.__size_;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v84, (uint64_t)v85, v86);
      if (SHIBYTE(v125.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v125.__r_.__value_.__l.__data_);
      quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)__p);
    }
  }
  return 0;
}

void sub_1ADC5CEE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, char a19, uint64_t a20,__int128 __p,__int128 a22,__int128 a23,__int128 a24)
{
  _OWORD *v24;
  uint64_t v25;
  uint64_t v28;
  void *v29;
  void *v30;
  _QWORD *v31;
  const char *v32;
  size_t v33;
  _QWORD *v34;
  void *v35;
  void *v36;
  _QWORD *v37;
  const char *v38;
  size_t v39;
  _QWORD *v40;

  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(v25 - 160, *(_QWORD **)(v25 - 152));
  v28 = *(_QWORD *)(v25 - 136);
  *(_QWORD *)(v25 - 136) = 0;
  if (v28)
    (*(void (**)(uint64_t))(*(_QWORD *)v28 + 8))(v28);
  if (a2 == 3)
  {
    v29 = __cxa_begin_catch(a1);
    if (quasar::gLogLevel >= 1)
    {
      v30 = v29;
      v24[15] = 0u;
      v24[16] = 0u;
      v24[13] = 0u;
      v24[14] = 0u;
      v24[11] = 0u;
      v24[12] = 0u;
      v24[9] = 0u;
      v24[10] = 0u;
      v24[7] = 0u;
      v24[8] = 0u;
      v24[5] = 0u;
      v24[6] = 0u;
      v24[4] = 0u;
      a23 = 0u;
      a24 = 0u;
      __p = 0u;
      a22 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
      v31 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Error reading JSON config file: ", 32);
      v32 = (const char *)(*(uint64_t (**)(void *))(*(_QWORD *)v30 + 16))(v30);
      v33 = strlen(v32);
      v34 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)v32, v33);
      std::endl[abi:ne180100]<char,std::char_traits<char>>(v34);
      quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)&__p);
    }
  }
  else
  {
    if (a2 != 2)
    {
      if (a2 != 1)
        _Unwind_Resume(a1);
      __cxa_begin_catch(a1);
      __cxa_end_catch();
LABEL_14:
      JUMPOUT(0x1ADC5CD44);
    }
    v35 = __cxa_begin_catch(a1);
    if (quasar::gLogLevel >= 1)
    {
      v36 = v35;
      v24[15] = 0u;
      v24[16] = 0u;
      v24[13] = 0u;
      v24[14] = 0u;
      v24[11] = 0u;
      v24[12] = 0u;
      v24[9] = 0u;
      v24[10] = 0u;
      v24[7] = 0u;
      v24[8] = 0u;
      v24[5] = 0u;
      v24[6] = 0u;
      v24[4] = 0u;
      a23 = 0u;
      a24 = 0u;
      __p = 0u;
      a22 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
      v37 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Error reading JSON config file: ", 32);
      v38 = (const char *)(*(uint64_t (**)(void *))(*(_QWORD *)v36 + 16))(v36);
      v39 = strlen(v38);
      v40 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37, (uint64_t)v38, v39);
      std::endl[abi:ne180100]<char,std::char_traits<char>>(v40);
      quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)&__p);
    }
  }
  __cxa_end_catch();
  goto LABEL_14;
}

double quasar::SpeakerCodeTrainingConfig::registerParams(quasar::SpeakerCodeTrainingConfig *this, quasar::SystemConfig *a2)
{
  double result;
  void *__p[2];
  char v6;
  void *v7[2];
  char v8;

  std::string::basic_string[abi:ne180100]<0>(v7, "training-nnet-file");
  std::string::basic_string[abi:ne180100]<0>(__p, "Training neural network path");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)v7, (uint64_t)this, (uint64_t)__p, 1, 204, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v6 < 0)
    operator delete(__p[0]);
  if (v8 < 0)
    operator delete(v7[0]);
  std::string::basic_string[abi:ne180100]<0>(v7, "max-feature-cache-size");
  std::string::basic_string[abi:ne180100]<0>(__p, "Max feature cache size for training");
  quasar::SystemConfig::Register<unsigned int>((uint64_t)a2, (const void **)v7, (uint64_t)this + 64, (uint64_t)__p, 1, 204, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v6 < 0)
    operator delete(__p[0]);
  if (v8 < 0)
    operator delete(v7[0]);
  std::string::basic_string[abi:ne180100]<0>(v7, "learning-rate");
  std::string::basic_string[abi:ne180100]<0>(__p, "Learning rate of the training");
  quasar::SystemConfig::Register<float>((uint64_t)a2, (const void **)v7, (uint64_t)this + 52, (uint64_t)__p, 1, 204, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v6 < 0)
    operator delete(__p[0]);
  if (v8 < 0)
    operator delete(v7[0]);
  std::string::basic_string[abi:ne180100]<0>(v7, "training-nnet-version");
  std::string::basic_string[abi:ne180100]<0>(__p, "Training neural network version");
  quasar::SystemConfig::Register<unsigned int>((uint64_t)a2, (const void **)v7, (uint64_t)this + 48, (uint64_t)__p, 1, 204, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v6 < 0)
    operator delete(__p[0]);
  if (v8 < 0)
    operator delete(v7[0]);
  std::string::basic_string[abi:ne180100]<0>(v7, "generic-speaker-code");
  std::string::basic_string[abi:ne180100]<0>(__p, "Generic speaker code");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)v7, (uint64_t)this + 24, (uint64_t)__p, 1, 204, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v6 < 0)
    operator delete(__p[0]);
  if (v8 < 0)
    operator delete(v7[0]);
  std::string::basic_string[abi:ne180100]<0>(v7, "initialize-option");
  std::string::basic_string[abi:ne180100]<0>(__p, "Options to initialize training speaker code, 1 is generic speaker code, 2 is all-zeros");
  quasar::SystemConfig::Register<unsigned int>((uint64_t)a2, (const void **)v7, (uint64_t)this + 68, (uint64_t)__p, 1, 204, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v6 < 0)
    operator delete(__p[0]);
  if (v8 < 0)
    operator delete(v7[0]);
  std::string::basic_string[abi:ne180100]<0>(v7, "recognition-interval");
  std::string::basic_string[abi:ne180100]<0>(__p, "The threshold to apply trained speaker code in recognition");
  quasar::SystemConfig::Register<unsigned int>((uint64_t)a2, (const void **)v7, (uint64_t)this + 72, (uint64_t)__p, 1, 204, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v6 < 0)
    operator delete(__p[0]);
  if (v8 < 0)
    operator delete(v7[0]);
  std::string::basic_string[abi:ne180100]<0>(v7, "supported-tasks");
  std::string::basic_string[abi:ne180100]<0>(__p, "Supported tasks for training. Only the configured tasks will run training at the end of recognition");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)v7, (uint64_t)this + 96, (uint64_t)__p, 0, 216, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v6 < 0)
    operator delete(__p[0]);
  if (v8 < 0)
    operator delete(v7[0]);
  std::string::basic_string[abi:ne180100]<0>(v7, "update-interval");
  std::string::basic_string[abi:ne180100]<0>(__p, "The interval which will be used for updating the speaker code for training, default is 64");
  quasar::SystemConfig::Register<unsigned int>((uint64_t)a2, (const void **)v7, (uint64_t)this + 56, (uint64_t)__p, 0, 204, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v6 < 0)
    operator delete(__p[0]);
  if (v8 < 0)
    operator delete(v7[0]);
  std::string::basic_string[abi:ne180100]<0>(v7, "batch-size");
  std::string::basic_string[abi:ne180100]<0>(__p, "Training mini batch size, default is 1");
  quasar::SystemConfig::Register<unsigned int>((uint64_t)a2, (const void **)v7, (uint64_t)this + 60, (uint64_t)__p, 0, 204, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v6 < 0)
    operator delete(__p[0]);
  if (v8 < 0)
    operator delete(v7[0]);
  std::string::basic_string[abi:ne180100]<0>(v7, "enable-continuous-training");
  std::string::basic_string[abi:ne180100]<0>(__p, "The flag to enable continuous training, default is false");
  quasar::SystemConfig::Register<BOOL>((uint64_t)a2, (const void **)v7, (uint64_t)this + 80, (uint64_t)__p, 0, 204, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v6 < 0)
    operator delete(__p[0]);
  if (v8 < 0)
    operator delete(v7[0]);
  std::string::basic_string[abi:ne180100]<0>(v7, "initial-size");
  std::string::basic_string[abi:ne180100]<0>(__p, "Speaker code dimension. As speaker code is one-dimentional vector, it's also the number of rows");
  quasar::SystemConfig::Register<unsigned int>((uint64_t)a2, (const void **)v7, (uint64_t)this + 76, (uint64_t)__p, 0, 204, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v6 < 0)
    operator delete(__p[0]);
  if (v8 < 0)
    operator delete(v7[0]);
  std::string::basic_string[abi:ne180100]<0>(v7, "confidence-threshold");
  std::string::basic_string[abi:ne180100]<0>(__p, "If average confidence of all tokens is below the threshold, the utterance will be dropped, default is 0");
  quasar::SystemConfig::Register<float>((uint64_t)a2, (const void **)v7, (uint64_t)this + 84, (uint64_t)__p, 0, 204, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v6 < 0)
    operator delete(__p[0]);
  if (v8 < 0)
    operator delete(v7[0]);
  std::string::basic_string[abi:ne180100]<0>(v7, "silence-frame-ratio");
  std::string::basic_string[abi:ne180100]<0>(__p, "The ratio of silence frames, num(silence_frame) = min(ratio * num(valid_speech_frame), num(silence_frame)), default is 0");
  quasar::SystemConfig::Register<float>((uint64_t)a2, (const void **)v7, (uint64_t)this + 88, (uint64_t)__p, 0, 204, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v6 < 0)
    operator delete(__p[0]);
  if (v8 < 0)
    operator delete(v7[0]);
  std::string::basic_string[abi:ne180100]<0>(v7, "update-inference");
  std::string::basic_string[abi:ne180100]<0>(__p, "If it is true, the inference speaker code used in recognition will be updated in training, otherwise inference speaker code is always the generic one, default is false");
  quasar::SystemConfig::Register<BOOL>((uint64_t)a2, (const void **)v7, (uint64_t)this + 81, (uint64_t)__p, 0, 204, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v6 < 0)
    operator delete(__p[0]);
  if (v8 < 0)
    operator delete(v7[0]);
  *(_QWORD *)&result = 0x100000040;
  *((_QWORD *)this + 7) = 0x100000040;
  return result;
}

void sub_1ADC5D900(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a16 < 0)
    operator delete(__p);
  if (a22 < 0)
    operator delete(a17);
  _Unwind_Resume(exception_object);
}

void quasar::SpeakerCodeTrainingConfig::init(quasar::SpeakerCodeTrainingConfig *this)
{
  std::__shared_weak_count *v2;
  unint64_t *v3;
  unint64_t v4;
  __int128 v5;

  std::allocate_shared[abi:ne180100]<quasar::SpeakerCodeTraining,std::allocator<quasar::SpeakerCodeTraining>,std::string &,std::string &,unsigned int &,float &,unsigned int &,unsigned int &,unsigned int &,BOOL &,BOOL &,unsigned int &,unsigned int &,std::string &,void>((__int128 *)this, (__int128 *)((char *)this + 24), (int *)this + 12, (float *)this + 13, (unsigned int *)this + 15, (unsigned int *)this + 14, (int *)this + 18, &v5, (std::string::value_type *)this + 81, (char *)this + 80, (int *)this + 17, (int *)this + 19, (__int128 *)this + 6);
  std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100]((uint64_t)this + 120, &v5);
  v2 = (std::__shared_weak_count *)*((_QWORD *)&v5 + 1);
  if (*((_QWORD *)&v5 + 1))
  {
    v3 = (unint64_t *)(*((_QWORD *)&v5 + 1) + 8);
    do
      v4 = __ldaxr(v3);
    while (__stlxr(v4 - 1, v3));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
}

void quasar::MuxHelper::registerParams(quasar::MuxHelper *this, quasar::SystemConfig *a2)
{
  void *__p[2];
  char v5;
  void *v6[2];
  char v7;

  std::string::basic_string[abi:ne180100]<0>(v6, "shared-tags");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  quasar::SystemConfig::Register<std::unordered_set<std::string>>((uint64_t)a2, (const void **)v6, (uint64_t)this, (uint64_t)__p, 0, 250, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
  std::string::basic_string[abi:ne180100]<0>(v6, "sanitizer-special-chars-pattern");
  std::string::basic_string[abi:ne180100]<0>(__p, "Override pattern for TextSanitizer mSpecialChars.");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)v6, (uint64_t)this + 40, (uint64_t)__p, 0, 250, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
}

void sub_1ADC5DB54(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a16 < 0)
    operator delete(__p);
  if (a22 < 0)
    operator delete(a17);
  _Unwind_Resume(exception_object);
}

uint64_t quasar::MuxHelper::init(quasar::MuxHelper *this)
{
  _QWORD *v2;
  void **v3;
  uint64_t v4;
  quasar::TextSanitizer *v5;
  uint64_t result;
  uint64_t v7[2];
  void *__p[2];
  unsigned __int8 v9;
  _OWORD v10[17];

  if (quasar::gLogLevel >= 6)
  {
    memset(v10, 0, sizeof(v10));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v10);
    v2 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"sharedTags: ", 12);
    v7[0] = (uint64_t)" ";
    v7[1] = 1;
    quasar::join<std::unordered_set<std::string>>((uint64_t)this, v7);
    if ((v9 & 0x80u) == 0)
      v3 = __p;
    else
      v3 = (void **)__p[0];
    if ((v9 & 0x80u) == 0)
      v4 = v9;
    else
      v4 = (uint64_t)__p[1];
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)v3, v4);
    if ((char)v9 < 0)
      operator delete(__p[0]);
    quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)v10);
  }
  v5 = (quasar::TextSanitizer *)operator new();
  quasar::BasicTextSanitizer::BasicTextSanitizer(v5, (uint64_t *)this + 5);
  result = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = v5;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_1ADC5DCBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  if (a17 < 0)
    operator delete(__p);
  quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)&a18);
  _Unwind_Resume(a1);
}

void sub_1ADC5DCEC(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, __int128 a15, __int128 a16, __int128 a17, __int128 a18, __int128 a19, __int128 a20)
{
  uint64_t v20;
  _OWORD *v21;
  int *v22;
  void *v25;
  void *v26;
  _QWORD *v27;
  const char *v28;
  size_t v29;

  MEMORY[0x1AF44D190](v20, 0x10A1C40FE5546BCLL);
  if (a2 == 1)
  {
    v25 = __cxa_begin_catch(a1);
    if (*v22 >= 2)
    {
      v26 = v25;
      v21[15] = 0u;
      v21[16] = 0u;
      v21[13] = 0u;
      v21[14] = 0u;
      v21[11] = 0u;
      v21[12] = 0u;
      v21[9] = 0u;
      v21[10] = 0u;
      v21[7] = 0u;
      v21[8] = 0u;
      v21[6] = 0u;
      a19 = 0u;
      a20 = 0u;
      a17 = 0u;
      a18 = 0u;
      a15 = 0u;
      a16 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&a15);
      v27 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&a15, (uint64_t)"Text sanitizer initialization failed ", 37);
      v28 = (const char *)(*(uint64_t (**)(void *))(*(_QWORD *)v26 + 16))(v26);
      v29 = strlen(v28);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)v28, v29);
      quasar::QuasarWarnMessage::~QuasarWarnMessage((quasar::QuasarWarnMessage *)&a15);
    }
    __cxa_end_catch();
    JUMPOUT(0x1ADC5DCA4);
  }
  JUMPOUT(0x1ADC5DCE4);
}

void sub_1ADC5DDB8()
{
  __cxa_end_catch();
  JUMPOUT(0x1ADC5DCE4);
}

uint64_t quasar::SpeechRecognizer::getActiveConfiguration(quasar::SpeechRecognizer *this)
{
  uint64_t v1;
  _OWORD v3[17];

  v1 = *((_QWORD *)this + 8);
  if (!v1)
  {
    memset(v3, 0, sizeof(v3));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v3);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v3, "getActiveConfiguration called before init.");
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v3);
  }
  return v1 + 24;
}

void quasar::SpeechRecognizer::setActiveConfiguration(quasar::SpeechRecognizer *this, const quasar::SpeechRecognizerActiveConfiguration *a2)
{
  std::mutex *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;

  if (!*((_QWORD *)this + 8))
  {
    v26 = 0u;
    v27 = 0u;
    v24 = 0u;
    v25 = 0u;
    v22 = 0u;
    v23 = 0u;
    v20 = 0u;
    v21 = 0u;
    v18 = 0u;
    v19 = 0u;
    v16 = 0u;
    v17 = 0u;
    v14 = 0u;
    v15 = 0u;
    v12 = 0u;
    v13 = 0u;
    v11 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v11);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(&v11, "setActiveConfiguration called before init.");
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&v11);
  }
  v4 = (std::mutex *)((char *)this + 136);
  std::mutex::lock((std::mutex *)((char *)this + 136));
  if (*((_DWORD *)this + 32) != 1)
  {
    v26 = 0u;
    v27 = 0u;
    v24 = 0u;
    v25 = 0u;
    v22 = 0u;
    v23 = 0u;
    v20 = 0u;
    v21 = 0u;
    v18 = 0u;
    v19 = 0u;
    v16 = 0u;
    v17 = 0u;
    v14 = 0u;
    v15 = 0u;
    v12 = 0u;
    v13 = 0u;
    v11 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v11);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v11, (uint64_t)"Cannot call setActiveConfiguration while recognition is running.", 64);
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&v11);
  }
  std::mutex::unlock(v4);
  v5 = *((_QWORD *)this + 8);
  v9 = 0;
  v10 = 0;
  quasar::SpeechRecognizerModelLoader::setActiveConfiguration(v5, (uint64_t)a2, 0, 0, &v9);
  v6 = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_1ADC5DFB0(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void quasar::SpeechRecognizer::runAsync(uint64_t a1@<X0>, std::string **a2@<X1>, void (*a3)(uint64_t, void (*)(quasar::SpeechRecognizer *this, void *a2), _QWORD *)@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  uint64_t v8;
  std::string *v9;
  char v10;
  uint64_t v11;
  _BOOL4 isSupportedCategory;
  int v13;
  const void ***v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  char *v18;
  char *v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  void *v23;
  std::__shared_weak_count *v24;
  unint64_t *p_shared_owners;
  unint64_t v26;
  const void **v27;
  uint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  void *v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  std::string *v41;
  const void *v42;
  std::__shared_weak_count *size;
  unint64_t *v44;
  unint64_t v45;
  unint64_t v46;
  int **LmeDataStreams;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  unint64_t *v56;
  unint64_t v57;
  __int128 v58;
  unint64_t *v59;
  unint64_t v60;
  std::__thread_struct *v61;
  uint64_t v62;
  int v63;
  uint64_t v64;
  unint64_t *v65;
  unint64_t v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  _QWORD *v73;
  _QWORD *v74;
  uint64_t *v77;
  std::__shared_weak_count *v78;
  char v79;
  void *v80;
  std::__shared_weak_count *v81;
  uint64_t v82;
  std::__shared_weak_count *v83;
  __int128 v84;
  int v85;
  int v86;
  int v87;
  uint64_t v88;
  std::__shared_weak_count *v89;
  void *v90;
  char *v91;
  char v92;
  void *__p[2];
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  pthread_t v111[2];

  *(_QWORD *)&v110 = quasar::Location::fromSharedFuture((std::__assoc_sub_state **)&(*a2)->__r_.__value_.__r.__words[2]);
  *((_QWORD *)&v110 + 1) = v8;
  std::mutex::lock((std::mutex *)(a1 + 136));
  if (*(_DWORD *)(a1 + 128) != 1)
  {
    v108 = 0u;
    v109 = 0u;
    v106 = 0u;
    v107 = 0u;
    v104 = 0u;
    v105 = 0u;
    v102 = 0u;
    v103 = 0u;
    v100 = 0u;
    v101 = 0u;
    v98 = 0u;
    v99 = 0u;
    v96 = 0u;
    v97 = 0u;
    v94 = 0u;
    v95 = 0u;
    *(_OWORD *)__p = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    v73 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"SpeechRecognizer must be in initialized state before you call runAsync(). ", 74);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v73, (uint64_t)"Hint: Make sure you call waitForAsyncRecogToFinish() before calling runAsync() again.", 85);
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)__p);
  }
  v9 = *a2;
  if ((*a2)[1].__r_.__value_.__s.__data_[12])
  {
    if (v9[2].__r_.__value_.__s.__data_[0] && !v9[1].__r_.__value_.__s.__data_[13])
    {
      if (v9[26].__r_.__value_.__s.__data_[0])
        v10 = 0;
      else
        v10 = v9[26].__r_.__value_.__s.__data_[1] == 0;
      quasar::RunAsyncParams::setSkipEagerWrite((uint64_t)v9, v10);
      v9 = *a2;
    }
  }
  else if (v9[1].__r_.__value_.__s.__data_[13])
  {
    v108 = 0u;
    v109 = 0u;
    v106 = 0u;
    v107 = 0u;
    v104 = 0u;
    v105 = 0u;
    v102 = 0u;
    v103 = 0u;
    v100 = 0u;
    v101 = 0u;
    v98 = 0u;
    v99 = 0u;
    v96 = 0u;
    v97 = 0u;
    v94 = 0u;
    v95 = 0u;
    *(_OWORD *)__p = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Utterance concatenation should only be used with utterance detection", 68);
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)__p);
  }
  *(_BYTE *)(a1 + 529) = 0;
  if (v9[26].__r_.__value_.__s.__data_[0])
  {
    v11 = *(_QWORD *)(a1 + 512);
    if (v11)
    {
      std::string::basic_string[abi:ne180100]<0>(&v90, "\\NT-edit");
      quasar::SystemConfig::aceCatToQuasarTemplate(v11 + 192, (uint64_t)&v90, (std::string *)__p);
      isSupportedCategory = quasar::LmeDataFactory::isSupportedCategory(v11, (uint64_t)__p, 1);
      if (SBYTE7(v94) < 0)
        operator delete(__p[0]);
      if ((v92 & 0x80000000) == 0)
      {
        if (!isSupportedCategory)
          goto LABEL_18;
        goto LABEL_17;
      }
      operator delete(v90);
      if (isSupportedCategory)
LABEL_17:
        *(_BYTE *)(a1 + 529) = 1;
    }
  }
LABEL_18:
  LOBYTE(v90) = 1;
  LOBYTE(v84) = 1;
  std::allocate_shared[abi:ne180100]<kaldi::Timer,std::allocator<kaldi::Timer>,BOOL,BOOL,void>(&v90, (unsigned __int8 *)&v84, &v88);
  if ((*a2)[1].__r_.__value_.__s.__data_[12])
    v13 = -1;
  else
    v13 = *(_DWORD *)(a1 + 300);
  v86 = *(_DWORD *)(a1 + 300);
  v87 = v13;
  v85 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 1544) + 48);
  quasar::ConfusionNetworkCache::clear(*(quasar::ConfusionNetworkCache **)(a1 + 632));
  _ZNSt3__115allocate_sharedB8ne180100IN6quasar26MultiChainMultiAudioBufferENS_9allocatorIS2_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(__p);
  v14 = (const void ***)(a1 + 264);
  std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100](a1 + 264, (__int128 *)__p);
  v15 = (std::__shared_weak_count *)__p[1];
  if (__p[1])
  {
    v16 = (unint64_t *)((char *)__p[1] + 8);
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  quasar::SpeechRecognizerModelLoader::lookupRecognizers(*(_QWORD *)(a1 + 64), LODWORD((*a2)[1].__r_.__value_.__l.__data_), (unsigned __int8 **)&(*a2)[3].__r_.__value_.__l.__size_, (std::string *)((char *)*a2 + 152), (*a2)[1].__r_.__value_.__s.__data_[10], (*a2)[30].__r_.__value_.__s.__data_[19], *a2 + 27, *a2 + 28, (uint64_t *)&v90, *a2 + 29);
  v18 = (char *)v90;
  v19 = v91;
  if (v90 != v91)
  {
    do
    {
      LOBYTE(v111[0]) = v18[17];
      std::allocate_shared[abi:ne180100]<quasar::RecogAudioBuffer,std::allocator<quasar::RecogAudioBuffer>,unsigned int &,int &,int &,BOOL &,std::string &,std::shared_ptr<kaldi::Timer> &,int &,BOOL &,unsigned int const&,void>((unsigned int *)&(*a2)[1], &v87, (int *)(*a2)[1].__r_.__value_.__r.__words + 1, (unsigned __int8 *)&(*a2)[1].__r_.__value_.__s.__data_[8], (__int128 *)&(*a2)[5].__r_.__value_.__r.__words[1], &v88, &v86, &v84, (char *)v111, &v85);
      std::allocate_shared[abi:ne180100]<quasar::MultiAudioBuffer,std::allocator<quasar::MultiAudioBuffer>,std::shared_ptr<quasar::RecogAudioBuffer>,void>(&v84, __p);
      v20 = (std::__shared_weak_count *)*((_QWORD *)&v84 + 1);
      if (*((_QWORD *)&v84 + 1))
      {
        v21 = (unint64_t *)(*((_QWORD *)&v84 + 1) + 8);
        do
          v22 = __ldaxr(v21);
        while (__stlxr(v22 - 1, v21));
        if (!v22)
        {
          ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
          std::__shared_weak_count::__release_weak(v20);
        }
      }
      if (v18[18])
      {
        v23 = __p[0];
        LOBYTE(v77) = 0;
        std::allocate_shared[abi:ne180100]<quasar::RecogAudioBuffer,std::allocator<quasar::RecogAudioBuffer>,unsigned int &,int &,int &,BOOL &,std::string &,std::shared_ptr<kaldi::Timer> &,int &,BOOL &,unsigned int const&,void>((unsigned int *)&(*a2)[1], &v87, (int *)(*a2)[1].__r_.__value_.__r.__words + 1, (unsigned __int8 *)&(*a2)[1].__r_.__value_.__s.__data_[8], (__int128 *)&(*a2)[5].__r_.__value_.__r.__words[1], &v88, &v86, &v82, (char *)&v77, &v85);
        quasar::MultiAudioBuffer::addBuffer((uint64_t)v23, 1, &v82);
        v24 = v83;
        if (v83)
        {
          p_shared_owners = (unint64_t *)&v83->__shared_owners_;
          do
            v26 = __ldaxr(p_shared_owners);
          while (__stlxr(v26 - 1, p_shared_owners));
          if (!v26)
          {
            ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
            std::__shared_weak_count::__release_weak(v24);
          }
        }
      }
      v27 = *v14;
      v28 = *(_QWORD *)v18;
      v80 = __p[0];
      v81 = (std::__shared_weak_count *)__p[1];
      if (__p[1])
      {
        v29 = (unint64_t *)((char *)__p[1] + 8);
        do
          v30 = __ldxr(v29);
        while (__stxr(v30 + 1, v29));
      }
      quasar::MultiChainMultiAudioBuffer::addBuffer((uint64_t)v27, (std::string *)(v28 + 16), (uint64_t *)&v80, v18[16]);
      v31 = v81;
      if (v81)
      {
        v32 = (unint64_t *)&v81->__shared_owners_;
        do
          v33 = __ldaxr(v32);
        while (__stlxr(v33 - 1, v32));
        if (!v33)
        {
          ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
          std::__shared_weak_count::__release_weak(v31);
        }
      }
      v34 = (std::__shared_weak_count *)__p[1];
      if (__p[1])
      {
        v35 = (unint64_t *)((char *)__p[1] + 8);
        do
          v36 = __ldaxr(v35);
        while (__stlxr(v36 - 1, v35));
        if (!v36)
        {
          ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
          std::__shared_weak_count::__release_weak(v34);
        }
      }
      v18 += 24;
    }
    while (v18 != v19);
  }
  quasar::MultiChainMultiAudioBuffer::getPrimaryBuffer(*v14, __p);
  v37 = __p[0];
  v38 = (std::__shared_weak_count *)__p[1];
  if (__p[1])
  {
    v39 = (unint64_t *)((char *)__p[1] + 8);
    do
      v40 = __ldaxr(v39);
    while (__stlxr(v40 - 1, v39));
    if (!v40)
    {
      ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
      std::__shared_weak_count::__release_weak(v38);
    }
  }
  if (!v37)
  {
    v108 = 0u;
    v109 = 0u;
    v106 = 0u;
    v107 = 0u;
    v104 = 0u;
    v105 = 0u;
    v102 = 0u;
    v103 = 0u;
    v100 = 0u;
    v101 = 0u;
    v98 = 0u;
    v99 = 0u;
    v96 = 0u;
    v97 = 0u;
    v94 = 0u;
    v95 = 0u;
    *(_OWORD *)__p = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    v74 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"No primary buffer was set! ", 27);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v74, (uint64_t)"Hint: If multiple decoder chains are active, one of them should do system combination.", 86);
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)__p);
  }
  v79 = 0;
  v41 = *a2;
  v42 = (const void *)(*a2)->__r_.__value_.__r.__words[0];
  if (v42
  {
    size = (std::__shared_weak_count *)v41->__r_.__value_.__l.__size_;
    if (size)
    {
      v44 = (unint64_t *)&size->__shared_owners_;
      do
        v45 = __ldxr(v44);
      while (__stxr(v45 + 1, v44));
      do
        v46 = __ldaxr(v44);
      while (__stlxr(v46 - 1, v44));
      if (!v46)
      {
        ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
        std::__shared_weak_count::__release_weak(size);
      }
    }
    v79 = 1;
  }
  quasar::MultiChainMultiAudioBuffer::getPrimaryBuffer(*v14, &v77);
  LmeDataStreams = (int **)quasar::RunAsyncParams::getLmeDataStreams((quasar::RunAsyncParams *)*a2);
  quasar::LmeDataStreams::getLmeStreams(LmeDataStreams, (uint64_t)__p);
  LOBYTE(v111[0]) = 1;
  std::allocate_shared[abi:ne180100]<quasar::SpeechRequestData,std::allocator<quasar::SpeechRequestData>,std::shared_ptr<quasar::RunAsyncParams> const&,std::shared_ptr<quasar::MultiChainMultiAudioBuffer> &,std::shared_ptr<quasar::MultiAudioBuffer>,std::vector<std::shared_ptr<quasar::LmeContainer>> const,quasar::Location &,std::shared_ptr<kaldi::Timer> &,BOOL &,BOOL,void>(a2, (_QWORD *)(a1 + 264), &v77, (_QWORD **)__p, &v110, &v88, &v79, &v84, (char *)v111);
  std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100](a1 + 280, &v84);
  v48 = (std::__shared_weak_count *)*((_QWORD *)&v84 + 1);
  if (*((_QWORD *)&v84 + 1))
  {
    v49 = (unint64_t *)(*((_QWORD *)&v84 + 1) + 8);
    do
      v50 = __ldaxr(v49);
    while (__stlxr(v50 - 1, v49));
    if (!v50)
    {
      ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
      std::__shared_weak_count::__release_weak(v48);
    }
  }
  v111[0] = (pthread_t)__p;
  std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100]((void ***)v111);
  v51 = v78;
  if (v78)
  {
    v52 = (unint64_t *)&v78->__shared_owners_;
    do
      v53 = __ldaxr(v52);
    while (__stlxr(v53 - 1, v52));
    if (!v53)
    {
      ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
      std::__shared_weak_count::__release_weak(v51);
    }
  }
  *(_DWORD *)(a1 + 128) = 2;
  *(_QWORD *)(a1 + 688) = *(_QWORD *)(a1 + 680);
  std::shared_ptr<quasar::SpeechRecognizer>::shared_ptr[abi:ne180100]<quasar::SpeechRecognizer,void>(&v84, (_QWORD *)(a1 + 8));
  if (a3)
  {
    v54 = (_QWORD *)operator new();
    v55 = *((_QWORD *)&v84 + 1);
    *v54 = v84;
    v54[1] = v55;
    if (v55)
    {
      v56 = (unint64_t *)(v55 + 8);
      do
        v57 = __ldxr(v56);
      while (__stxr(v57 + 1, v56));
    }
    a3(a4, quasar::SpeechRecognizer::dispatchRunSyncAndMarkEndOfRun, v54);
  }
  else
  {
    v58 = v84;
    *(_OWORD *)__p = v84;
    if (*((_QWORD *)&v84 + 1))
    {
      v59 = (unint64_t *)(*((_QWORD *)&v84 + 1) + 8);
      do
        v60 = __ldxr(v59);
      while (__stxr(v60 + 1, v59));
    }
    v61 = (std::__thread_struct *)operator new();
    std::__thread_struct::__thread_struct(v61);
    v62 = operator new();
    *(_QWORD *)v62 = v61;
    *(_OWORD *)(v62 + 8) = v58;
    __p[0] = 0;
    __p[1] = 0;
    v77 = (uint64_t *)v62;
    v63 = pthread_create(v111, 0, (void *(__cdecl *)(void *))std::__thread_proxy[abi:ne180100]<std::tuple<std::unique_ptr<std::__thread_struct>,quasar::SpeechRecognizer::runAsync(std::shared_ptr<quasar::RunAsyncParams> const&,void (*)(void *,void (*)(void *),void *),void *)::$_1>>, (void *)v62);
    if (v63)
    {
      std::__throw_system_error(v63, "thread constructor failed");
      __break(1u);
      return;
    }
    v77 = 0;
    std::unique_ptr<std::tuple<std::unique_ptr<std::__thread_struct>,quasar::SpeechRecognizer::runAsync(std::shared_ptr<quasar::RunAsyncParams> const&,void (*)(void *,void (*)(void *),void *),void *)::$_1>>::~unique_ptr[abi:ne180100](&v77);
    std::thread::detach((std::thread *)v111);
    std::thread::~thread((std::thread *)v111);
  }
  if (quasar::gLogLevel >= 5)
  {
    v108 = 0u;
    v109 = 0u;
    v106 = 0u;
    v107 = 0u;
    v104 = 0u;
    v105 = 0u;
    v102 = 0u;
    v103 = 0u;
    v100 = 0u;
    v101 = 0u;
    v98 = 0u;
    v99 = 0u;
    v96 = 0u;
    v97 = 0u;
    v94 = 0u;
    v95 = 0u;
    *(_OWORD *)__p = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Running runSyncAndMarkEndOfRun() in separate thread", 51);
    quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)__p);
  }
  v64 = *(_QWORD *)(a1 + 272);
  *a5 = *(_QWORD *)(a1 + 264);
  a5[1] = v64;
  if (v64)
  {
    v65 = (unint64_t *)(v64 + 8);
    do
      v66 = __ldxr(v65);
    while (__stxr(v66 + 1, v65));
  }
  v67 = (std::__shared_weak_count *)*((_QWORD *)&v84 + 1);
  if (*((_QWORD *)&v84 + 1))
  {
    v68 = (unint64_t *)(*((_QWORD *)&v84 + 1) + 8);
    do
      v69 = __ldaxr(v68);
    while (__stlxr(v69 - 1, v68));
    if (!v69)
    {
      ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
      std::__shared_weak_count::__release_weak(v67);
    }
  }
  __p[0] = &v90;
  std::vector<quasar::AlternativeSelectionSpan::Alternative>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  v70 = v89;
  if (v89)
  {
    v71 = (unint64_t *)&v89->__shared_owners_;
    do
      v72 = __ldaxr(v71);
    while (__stlxr(v72 - 1, v71));
    if (!v72)
    {
      ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
      std::__shared_weak_count::__release_weak(v70);
    }
  }
  std::mutex::unlock((std::mutex *)(a1 + 136));
}

void sub_1ADC5E908(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *__p,uint64_t a35,int a36,__int16 a37,char a38,char a39)
{
  if (a39 < 0)
    operator delete(__p);
  if (a33 < 0)
    operator delete(a28);
  JUMPOUT(0x1ADC5EA24);
}

void sub_1ADC5E93C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  uint64_t v31;

  quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&a31);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&v31);
  JUMPOUT(0x1ADC5EA0CLL);
}

void sub_1ADC5E958(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  std::unique_ptr<std::tuple<std::unique_ptr<std::__thread_struct>,quasar::SpeechRecognizer::runAsync(std::shared_ptr<quasar::RunAsyncParams> const&,void (*)(void *,void (*)(void *),void *),void *)::$_1>>::~unique_ptr[abi:ne180100]((uint64_t **)va);
  JUMPOUT(0x1ADC5E964);
}

void sub_1ADC5E978(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void **v10;
  va_list va;

  va_start(va, a6);
  *(_QWORD *)(v7 - 96) = v6;
  std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v7 - 96));
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)va);
  v10 = (void **)&v9;
  std::vector<quasar::AlternativeSelectionSpan::Alternative>::__destroy_vector::operator()[abi:ne180100](&v10);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&v8);
  JUMPOUT(0x1ADC5EA24);
}

void sub_1ADC5E994()
{
  JUMPOUT(0x1ADC5EA1CLL);
}

void sub_1ADC5E9A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::mutex *a14)
{
  std::mutex::unlock(a14);
  _Unwind_Resume(a1);
}

void sub_1ADC5E9C8()
{
  JUMPOUT(0x1ADC5E9F0);
}

void sub_1ADC5E9F8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t *v2;

  v2 = &v1;
  std::vector<quasar::AlternativeSelectionSpan::Alternative>::__destroy_vector::operator()[abi:ne180100](&v2);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](&v0);
  JUMPOUT(0x1ADC5EA24);
}

void sub_1ADC5EA00(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)va);
  JUMPOUT(0x1ADC5EA0CLL);
}

void quasar::SpeechRecognizer::dispatchRunSyncAndMarkEndOfRun(quasar::SpeechRecognizer *this, void *a2)
{
  std::__shared_weak_count *v2;
  quasar::SpeechRecognizer *v3;
  uint64_t v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  v3 = *(quasar::SpeechRecognizer **)this;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 1);
  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  v4 = std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this);
  MEMORY[0x1AF44D190](v4, 0x20C40A4A59CD2);
  quasar::SpeechRecognizer::runSyncAndMarkEndOfRun(v3);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
}

void sub_1ADC5EAC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void quasar::SpeechRecognizer::updateLmeProfile(quasar::SpeechRecognizer *this, int **a2)
{
  std::mutex *v4;
  uint64_t *v5;
  uint64_t *v6;
  void **v7;

  v4 = (std::mutex *)((char *)this + 440);
  std::mutex::lock((std::mutex *)((char *)this + 440));
  quasar::LmeDataStreams::getLmeStreams(a2, (uint64_t)&v5);
  if ((uint64_t **)((char *)this + 408) != &v5)
    std::vector<std::shared_ptr<quasar::Decoder>>::__assign_with_size[abi:ne180100]<std::shared_ptr<quasar::Decoder>*,std::shared_ptr<quasar::Decoder>*>((uint64_t)this + 408, v5, v6, ((char *)v6 - (char *)v5) >> 4);
  v7 = (void **)&v5;
  std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100](&v7);
  *((_BYTE *)this + 432) = 1;
  std::mutex::unlock(v4);
}

void sub_1ADC5EB5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  std::mutex *v12;

  a12 = (void **)&a9;
  std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100](&a12);
  std::mutex::unlock(v12);
  _Unwind_Resume(a1);
}

void quasar::SpeechRecognizer::waitForAsyncRecogToFinish(quasar::SpeechRecognizer *this)
{
  std::unique_lock<std::mutex> v2;

  v2.__m_ = (std::unique_lock<std::mutex>::mutex_type *)((char *)this + 136);
  v2.__owns_ = 1;
  std::mutex::lock((std::mutex *)((char *)this + 136));
  while ((*((_DWORD *)this + 32) - 2) <= 2)
    std::condition_variable_any::wait<std::unique_lock<std::mutex>>((uint64_t)this + 200, &v2);
  if (v2.__owns_)
    std::mutex::unlock(v2.__m_);
}

void sub_1ADC5EBF4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, std::mutex *a9, char a10)
{
  if (a10)
    std::mutex::unlock(a9);
  _Unwind_Resume(exception_object);
}

void std::condition_variable_any::wait<std::unique_lock<std::mutex>>(uint64_t a1, std::unique_lock<std::mutex> *a2)
{
  std::__shared_weak_count *v4;
  std::mutex *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  std::unique_lock<std::mutex> v10;
  std::mutex *v11;
  std::__shared_weak_count *v12;

  v5 = *(std::mutex **)(a1 + 48);
  v4 = *(std::__shared_weak_count **)(a1 + 56);
  v11 = v5;
  v12 = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  v10.__m_ = v5;
  v10.__owns_ = 1;
  std::mutex::lock(v5);
  std::unique_lock<std::mutex>::unlock(a2);
  std::condition_variable::wait((std::condition_variable *)a1, &v10);
  std::unique_lock<std::mutex>::unlock(&v10);
  std::unique_lock<std::mutex>::lock(a2);
  if (v10.__owns_)
    std::mutex::unlock(v10.__m_);
  if (v4)
  {
    v8 = (unint64_t *)&v4->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

void sub_1ADC5ECE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  std::mutex *v11;

  std::mutex::unlock(v11);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void quasar::SpeechRecognizer::cancelAsyncRecognition(quasar::SpeechRecognizer *this)
{
  std::mutex *v2;
  _OWORD v3[17];

  v2 = (std::mutex *)((char *)this + 136);
  std::mutex::lock((std::mutex *)((char *)this + 136));
  if (*((_DWORD *)this + 32) >= 2u)
  {
    if (quasar::gLogLevel >= 4)
    {
      memset(v3, 0, sizeof(v3));
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v3);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"Cancelling recognition", 22);
      quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)v3);
    }
    (*(void (**)(_QWORD))(**((_QWORD **)this + 33) + 32))(*((_QWORD *)this + 33));
    *((_DWORD *)this + 32) = 3;
    std::mutex::unlock(v2);
    (*(void (**)(quasar::SpeechRecognizer *))(*(_QWORD *)this + 32))(this);
  }
  else
  {
    std::mutex::unlock(v2);
  }
}

void sub_1ADC5EDF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::mutex *v9;

  quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&a9);
  std::mutex::unlock(v9);
  _Unwind_Resume(a1);
}

void quasar::SpeechRecognizer::markEndOfRunAsyncThread(quasar::SpeechRecognizer *this)
{
  std::mutex *v2;
  std::mutex *v3;
  _OWORD v4[17];

  v2 = (std::mutex *)((char *)this + 136);
  std::mutex::lock((std::mutex *)((char *)this + 136));
  if ((*((_DWORD *)this + 32) - 2) >= 3)
  {
    memset(v4, 0, sizeof(v4));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v4);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"This function can only be called in Recognizing or Cancelling state", 67);
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v4);
  }
  std::shared_ptr<quasar::LmeData>::reset[abi:ne180100]((_QWORD *)this + 35);
  std::shared_ptr<quasar::LmeData>::reset[abi:ne180100]((_QWORD *)this + 33);
  *((_DWORD *)this + 32) = 1;
  v3 = (std::mutex *)*((_QWORD *)this + 31);
  std::mutex::lock(v3);
  std::mutex::unlock(v3);
  std::condition_variable::notify_all((std::condition_variable *)((char *)this + 200));
  std::mutex::unlock(v2);
}

void sub_1ADC5EF00(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void quasar::SpeechRecognizer::runSyncAndMarkEndOfRun(quasar::SpeechRecognizer *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  std::vector<std::wstring> v9;
  _QWORD v10[3];
  std::__shared_weak_count *v11;
  std::vector<std::wstring> *v12;

  v2 = (std::__shared_weak_count *)operator new(0x30uLL);
  v2->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  v2[1].__vftable = 0;
  v2->__shared_weak_owners_ = 0;
  v2->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D42D40;
  v2[1].__shared_owners_ = 0;
  v2[1].__shared_weak_owners_ = 0;
  v10[2] = v2 + 1;
  v11 = v2;
  v10[0] = v2 + 1;
  v10[1] = v2;
  do
    v4 = __ldxr(p_shared_owners);
  while (__stxr(v4 + 1, p_shared_owners));
  memset(&v9, 0, sizeof(v9));
  quasar::SpeechRecognizer::runSync((uint64_t)this, (uint64_t *)this + 35, (uint64_t)v10, &v9);
  v12 = &v9;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v12);
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (!v5)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  quasar::SpeechRecognizer::markEndOfRunAsyncThread(this);
  v6 = v11;
  if (v11)
  {
    v7 = (unint64_t *)&v11->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_1ADC5F028(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void quasar::SpeechRecognizer::runSync(uint64_t a1, uint64_t *a2, uint64_t a3, std::vector<std::wstring> *a4)
{
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  quasar::SymbolTableList *v13;
  std::__shared_weak_count *v14;

  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::operator=[abi:ne180100]((_QWORD *)(a1 + 280), a2);
  v7 = *(std::__shared_weak_count **)(a3 + 8);
  v13 = *(quasar::SymbolTableList **)a3;
  v14 = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  quasar::SpeechRecognizer::runSync(a1, &v13, a4);
  v10 = v14;
  if (v14)
  {
    v11 = (unint64_t *)&v14->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
}

void sub_1ADC5F11C(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, __int128 a11, __int128 a12, __int128 a13, __int128 a14, __int128 a15, __int128 a16, __int128 a17, __int128 a18, __int128 a19, __int128 a20,__int128 a21,__int128 a22,__int128 a23,__int128 a24,__int128 a25,__int128 a26,__int128 a27)
{
  uint64_t v27;
  uint64_t v28;
  void *v31;
  void *v32;
  _QWORD *v33;
  const char *v34;
  size_t v35;
  void *v36;
  void *v37;
  _QWORD *v38;
  const char *v39;
  size_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t *v43;
  unint64_t v44;
  uint64_t v45;

  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](v28 - 64);
  if (a2 == 2)
  {
    v31 = __cxa_begin_catch(a1);
    if (quasar::gLogLevel >= 2)
    {
      v32 = v31;
      a26 = 0u;
      a27 = 0u;
      a24 = 0u;
      a25 = 0u;
      a22 = 0u;
      a23 = 0u;
      a20 = 0u;
      a21 = 0u;
      a18 = 0u;
      a19 = 0u;
      a16 = 0u;
      a17 = 0u;
      a14 = 0u;
      a15 = 0u;
      a12 = 0u;
      a13 = 0u;
      a11 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&a11);
      v33 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&a11, (uint64_t)"Ran out of token storage during decode: ", 40);
      v34 = (const char *)(*(uint64_t (**)(void *))(*(_QWORD *)v32 + 16))(v32);
      v35 = strlen(v34);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, (uint64_t)v34, v35);
      quasar::QuasarWarnMessage::~QuasarWarnMessage((quasar::QuasarWarnMessage *)&a11);
    }
  }
  else
  {
    if (a2 != 1)
      _Unwind_Resume(a1);
    v36 = __cxa_begin_catch(a1);
    if (quasar::gLogLevel >= 2)
    {
      v37 = v36;
      a26 = 0u;
      a27 = 0u;
      a24 = 0u;
      a25 = 0u;
      a22 = 0u;
      a23 = 0u;
      a20 = 0u;
      a21 = 0u;
      a18 = 0u;
      a19 = 0u;
      a16 = 0u;
      a17 = 0u;
      a14 = 0u;
      a15 = 0u;
      a12 = 0u;
      a13 = 0u;
      a11 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&a11);
      v38 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&a11, (uint64_t)"Ran out of forward link storage during decode: ", 47);
      v39 = (const char *)(*(uint64_t (**)(void *))(*(_QWORD *)v37 + 16))(v37);
      v40 = strlen(v39);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v38, (uint64_t)v39, v40);
      quasar::QuasarWarnMessage::~QuasarWarnMessage((quasar::QuasarWarnMessage *)&a11);
    }
  }
  __cxa_end_catch();
  if (quasar::gLogLevel >= 2)
  {
    a26 = 0u;
    a27 = 0u;
    a24 = 0u;
    a25 = 0u;
    a22 = 0u;
    a23 = 0u;
    a20 = 0u;
    a21 = 0u;
    a18 = 0u;
    a19 = 0u;
    a16 = 0u;
    a17 = 0u;
    a14 = 0u;
    a15 = 0u;
    a12 = 0u;
    a13 = 0u;
    a11 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&a11);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&a11, (uint64_t)"Reporting empty result due to thrown exception during decode", 60);
    quasar::QuasarWarnMessage::~QuasarWarnMessage((quasar::QuasarWarnMessage *)&a11);
  }
  v41 = **(_QWORD **)(*(_QWORD *)v27 + 24);
  quasar::RecogResult::RecogResult((quasar::RecogResult *)&a11);
  v42 = *(_QWORD *)(*(_QWORD *)v27 + 32);
  a9 = *(_QWORD *)(*(_QWORD *)v27 + 24);
  a10 = v42;
  if (v42)
  {
    v43 = (unint64_t *)(v42 + 8);
    do
      v44 = __ldxr(v43);
    while (__stxr(v44 + 1, v43));
  }
  v45 = quasar::RecogResult::setParams((uint64_t)&a11, &a9);
  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v41 + 40))(v41, v45, 0);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  quasar::RecogResult::~RecogResult((quasar::RecogResult *)&a11);
  JUMPOUT(0x1ADC5F0D8);
}

void quasar::SpeechRecognizer::getRecogStats(uint64_t a1, uint64_t **a2, uint64_t **a3, _QWORD *a4, _QWORD *a5)
{
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  uint64_t v12;
  std::__shared_weak_count *v13;

  std::atomic_load[abi:ne180100]<quasar::SpeechRequestResultData>((_QWORD *)(a1 + 648), &v12);
  quasar::SpeechRequestResultData::getAALogData(v12, a2, a3, a4, a5);
  v9 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
}

void sub_1ADC5F430(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void std::atomic_load[abi:ne180100]<quasar::SpeechRequestResultData>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  std::__sp_mut *sp_mut;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;

  sp_mut = std::__get_sp_mut(a1);
  std::__sp_mut::lock(sp_mut);
  v5 = a1[1];
  *a2 = *a1;
  a2[1] = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  std::__sp_mut::unlock(sp_mut);
}

void quasar::SpeechRecognizer::requestEagerResult(quasar::SpeechRecognizer *this, int a2)
{
  std::mutex *v4;
  uint64_t v5;
  _BYTE *v6;
  BOOL v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;

  v4 = (std::mutex *)((char *)this + 136);
  std::mutex::lock((std::mutex *)((char *)this + 136));
  if (*((_DWORD *)this + 32) == 2)
  {
    v5 = *((_QWORD *)this + 35);
    v6 = *(_BYTE **)(v5 + 24);
    if (v6[36] && !v6[37])
    {
      v23 = 0u;
      v24 = 0u;
      v21 = 0u;
      v22 = 0u;
      v19 = 0u;
      v20 = 0u;
      v17 = 0u;
      v18 = 0u;
      v15 = 0u;
      v16 = 0u;
      v13 = 0u;
      v14 = 0u;
      v11 = 0u;
      v12 = 0u;
      v9 = 0u;
      v10 = 0u;
      v8 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v8);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v8, (uint64_t)"Improper use of API: requestEagerResult does not work with Dictation use case", 77);
      quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&v8);
    }
    if (v6[48])
      v7 = 1;
    else
      v7 = quasar::gLogLevel < 5;
    if (!v7)
    {
      v23 = 0u;
      v24 = 0u;
      v21 = 0u;
      v22 = 0u;
      v19 = 0u;
      v20 = 0u;
      v17 = 0u;
      v18 = 0u;
      v15 = 0u;
      v16 = 0u;
      v13 = 0u;
      v14 = 0u;
      v11 = 0u;
      v12 = 0u;
      v9 = 0u;
      v10 = 0u;
      v8 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v8);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v8, (uint64_t)"Eager disabled: not supported by model or client did not opt-in eager generation", 80);
      quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&v8);
      v5 = *((_QWORD *)this + 35);
    }
    quasar::SpeechRequestData::addRequestEagerResultDurations((std::mutex *)v5, a2);
  }
  std::mutex::unlock(v4);
}

void sub_1ADC5F5D8(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void quasar::SpeechRecognizer::getUttInfos(quasar::SpeechRecognizer *this@<X0>, uint64_t a2@<X8>)
{
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  quasar::SpeechRequestResultData *v6;
  std::__shared_weak_count *v7;

  std::atomic_load[abi:ne180100]<quasar::SpeechRequestResultData>((_QWORD *)this + 81, &v6);
  quasar::SpeechRequestResultData::getUttInfos((std::mutex *)v6, a2);
  v3 = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_1ADC5F678(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void quasar::SpeechRecognizer::dumpResultLog(quasar::SpeechRecognizer *this, int a2)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t *i;
  int v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  void **v21;
  uint64_t v22;
  void *v23[2];
  unsigned __int8 v24;
  void *__p[2];
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  std::string v42;
  void *v43;
  char v44;
  uint64_t v45;
  char **v46;
  char *v47[2];

  v47[0] = 0;
  v47[1] = 0;
  v46 = v47;
  std::string::basic_string[abi:ne180100]<0>(__p, "PM-input");
  std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string>((uint64_t **)&v46, (const void **)__p, (uint64_t)__p);
  if (SBYTE7(v26) < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "PM-output");
  std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string>((uint64_t **)&v46, (const void **)__p, (uint64_t)__p);
  if (SBYTE7(v26) < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "finalResultTokens");
  std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string>((uint64_t **)&v46, (const void **)__p, (uint64_t)__p);
  if (SBYTE7(v26) < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "finalResultTokensV2");
  std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string>((uint64_t **)&v46, (const void **)__p, (uint64_t)__p);
  if (SBYTE7(v26) < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "sessionId");
  std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string>((uint64_t **)&v46, (const void **)__p, (uint64_t)__p);
  if (SBYTE7(v26) < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "userId");
  std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string>((uint64_t **)&v46, (const void **)__p, (uint64_t)__p);
  if (SBYTE7(v26) < 0)
    operator delete(__p[0]);
  v4 = *((_QWORD *)this + 81);
  std::string::basic_string[abi:ne180100]<0>(__p, "isFinal");
  std::to_string(&v42, a2);
  quasar::SpeechRequestResultData::addDump(v4, (__int128 *)__p, &v42);
  if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v42.__r_.__value_.__l.__data_);
  if (SBYTE7(v26) < 0)
    operator delete(__p[0]);
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v42);
  quasar::SpeechRequestResultData::getDumpData(*((std::mutex **)this + 81), (std::vector<std::pair<std::string, std::string>> *)__p);
  v5 = (uint64_t *)__p[0];
  for (i = (uint64_t *)__p[1]; v5 != i; v5 += 6)
  {
    if (!quasar::gHideSensitiveData
      || v47 == (char **)std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::find<std::string>((uint64_t)&v46, (const void **)v5))
    {
      v13 = *((char *)v5 + 23);
      if (v13 >= 0)
        v14 = (uint64_t)v5;
      else
        v14 = *v5;
      if (v13 >= 0)
        v15 = *((unsigned __int8 *)v5 + 23);
      else
        v15 = v5[1];
      v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v42, v14, v15);
      v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"=", 1);
      v18 = *((char *)v5 + 47);
      if (v18 >= 0)
        v19 = (uint64_t)(v5 + 3);
      else
        v19 = v5[3];
      if (v18 >= 0)
        v20 = *((unsigned __int8 *)v5 + 47);
      else
        v20 = v5[4];
      v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, v19, v20);
    }
    else
    {
      v7 = *((char *)v5 + 23);
      if (v7 >= 0)
        v8 = (uint64_t)v5;
      else
        v8 = *v5;
      if (v7 >= 0)
        v9 = *((unsigned __int8 *)v5 + 23);
      else
        v9 = v5[1];
      v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v42, v8, v9);
      v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"=", 1);
      v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"xxx", 3);
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)" ", 1);
  }
  v23[0] = __p;
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)v23);
  if (quasar::gLogLevel > 2)
  {
    v40 = 0u;
    v41 = 0u;
    v38 = 0u;
    v39 = 0u;
    v36 = 0u;
    v37 = 0u;
    v34 = 0u;
    v35 = 0u;
    v32 = 0u;
    v33 = 0u;
    v30 = 0u;
    v31 = 0u;
    v28 = 0u;
    v29 = 0u;
    v26 = 0u;
    v27 = 0u;
    *(_OWORD *)__p = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    std::stringbuf::str();
    if ((v24 & 0x80u) == 0)
      v21 = v23;
    else
      v21 = (void **)v23[0];
    if ((v24 & 0x80u) == 0)
      v22 = v24;
    else
      v22 = (uint64_t)v23[1];
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)v21, v22);
    if ((char)v24 < 0)
      operator delete(v23[0]);
    quasar::QuasarProdInfoMessage::~QuasarProdInfoMessage((quasar::QuasarProdInfoMessage *)__p);
  }
  v42.__r_.__value_.__r.__words[0] = *MEMORY[0x1E0DE4F60];
  *(std::string::size_type *)((char *)v42.__r_.__value_.__r.__words + *(_QWORD *)(v42.__r_.__value_.__r.__words[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  v42.__r_.__value_.__l.__size_ = MEMORY[0x1E0DE4FB8] + 16;
  if (v44 < 0)
    operator delete(v43);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1AF44D094](&v45);
  std::__tree<std::string>::destroy((uint64_t)&v46, v47[0]);
}

void sub_1ADC5FA5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,void *a53,uint64_t a54,int a55,__int16 a56,char a57,char a58)
{
  uint64_t v58;

  if (a15 < 0)
    operator delete(__p);
  quasar::QuasarProdInfoMessage::~QuasarProdInfoMessage((quasar::QuasarProdInfoMessage *)&a16);
  std::ostringstream::~ostringstream((uint64_t)&a53);
  std::__tree<std::string>::destroy(v58 - 88, *(char **)(v58 - 80));
  _Unwind_Resume(a1);
}

uint64_t quasar::SpeechRecognizer::dumpModelVirtualMemoryInfo(quasar::SystemConfig **this)
{
  quasar::ModelLoader **ModelLoaderPtr;

  ModelLoaderPtr = (quasar::ModelLoader **)quasar::SystemConfig::getModelLoaderPtr(this[6]);
  return quasar::ModelLoader::dumpInCoreStats(*ModelLoaderPtr);
}

void quasar::SpeechRecognizer::createFeatChain(quasar::SpeechRequestData **a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, char **a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  quasar::SpeechRequestData *v18;
  uint64_t v19;
  int v20;
  _QWORD *Location;
  unint64_t *v22;
  unint64_t v23;
  uint64_t **LmeDataStreams;
  _BYTE *v25;
  char v26;
  _QWORD *v27;
  const void **i;
  uint64_t v29;
  char v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t *p_shared_owners;
  unint64_t v37;
  char *v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  char *v44;
  uint64_t v45;
  char *v46;
  char *v47;
  char *v48;
  char *v49;
  __int128 v50;
  __int128 v51;
  char *v52;
  char *v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;
  unint64_t v66;
  __int128 v67;
  unint64_t v68;
  char *v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  char *v75;
  uint64_t v76;
  char *v77;
  char *v78;
  char *v79;
  char *v80;
  __int128 v81;
  __int128 v82;
  char *v83;
  std::__shared_weak_count *v84;
  unint64_t *v85;
  unint64_t v86;
  _QWORD *v87;
  _QWORD *v88;
  std::__shared_weak_count *v89;
  unint64_t *v90;
  unint64_t v91;
  uint64_t v92;
  kaldi::OnlineFeatInputItf *v93;
  unint64_t *v94;
  unint64_t v95;
  uint64_t v96;
  unint64_t v97;
  char *v98;
  uint64_t v99;
  unint64_t v100;
  uint64_t v101;
  unint64_t v102;
  char *v103;
  uint64_t v104;
  char *v105;
  char *v106;
  char *v107;
  char *v108;
  __int128 v109;
  int64x2_t v110;
  char *v111;
  char *v112;
  std::__shared_weak_count *v113;
  unint64_t *v114;
  unint64_t v115;
  std::__shared_weak_count *v116;
  unint64_t *v117;
  unint64_t v118;
  std::__shared_weak_count *v119;
  unint64_t *v120;
  unint64_t v121;
  std::__shared_weak_count *v122;
  unint64_t *v123;
  unint64_t v124;
  std::__shared_weak_count *v125;
  unint64_t *v126;
  unint64_t v127;
  std::__shared_weak_count *v128;
  unint64_t *v129;
  unint64_t v130;
  uint64_t v131;
  unint64_t *v132;
  unint64_t v133;
  std::__shared_weak_count *v134;
  unint64_t *v135;
  unint64_t v136;
  std::__shared_weak_count *v137;
  unint64_t *v138;
  unint64_t v139;
  std::__shared_weak_count *v140;
  unint64_t *v141;
  unint64_t v142;
  std::__shared_weak_count *v143;
  unint64_t *v144;
  unint64_t v145;
  std::__shared_weak_count *v146;
  unint64_t *v147;
  unint64_t v148;
  std::__shared_weak_count *v149;
  unint64_t *v150;
  unint64_t v151;
  std::__shared_weak_count *v152;
  unint64_t *v153;
  unint64_t v154;
  uint64_t v155;
  unint64_t *v156;
  unint64_t v157;
  std::__shared_weak_count *v158;
  unint64_t *v159;
  unint64_t v160;
  __int128 v162;
  const void *v163;
  std::__shared_weak_count *v164;
  kaldi::OnlineFeatInputItf *v165;
  std::__shared_weak_count *v166;
  const void *v167;
  std::__shared_weak_count *v168;
  __int128 v169;
  __int128 v170[8];
  __int128 v171;
  void *__p[2];
  __int128 v173;
  __int128 v174;
  __int128 v175;
  __int128 v176;
  __int128 v177;
  __int128 v178;
  __int128 v179;
  int v180;
  uint64_t v181;
  char v182;
  __int128 v183;
  __int128 v184;
  __int128 v185;
  _BYTE v186[41];
  int v187;
  char v188;
  __int128 v189;
  std::string v190;
  char v191;
  const void *v192;
  std::__shared_weak_count *v193;
  _BYTE v194[24];
  char *v195;
  _QWORD *v196;

  v7 = *(_QWORD *)(a2 + 8);
  v8 = *(_QWORD *)(v7 + 80);
  v9 = *(_QWORD *)(v7 + 88);
  if (v8 == v9)
  {
    v11 = 0;
LABEL_13:
    v17 = 0;
    goto LABEL_14;
  }
  v10 = v8 + 16;
  do
  {
    v11 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v10 - 16) + 56))(*(_QWORD *)(v10 - 16));
    if ((v11 & 1) != 0)
      break;
    v12 = v10 == v9;
    v10 += 16;
  }
  while (!v12);
  v13 = *(_QWORD *)(a2 + 8);
  v14 = *(_QWORD *)(v13 + 80);
  v15 = *(_QWORD *)(v13 + 88);
  if (v14 == v15)
    goto LABEL_13;
  v16 = v14 + 16;
  do
  {
    v17 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v16 - 16) + 64))(*(_QWORD *)(v16 - 16));
    if ((v17 & 1) != 0)
      break;
    v12 = v16 == v15;
    v16 += 16;
  }
  while (!v12);
LABEL_14:
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  v192 = 0;
  v193 = 0;
  v18 = *a1;
  v19 = *((_QWORD *)*a1 + 3);
  v20 = *(_DWORD *)(v19 + 24);
  LOBYTE(v19) = *(_BYTE *)(v19 + 51);
  v180 = v20;
  v181 = 0;
  v182 = v19;
  v187 = 0;
  v188 = 0;
  v183 = 0u;
  v184 = 0u;
  v185 = 0u;
  memset(v186, 0, sizeof(v186));
  v189 = 0u;
  memset(&v190, 0, sizeof(v190));
  v191 = 1;
  Location = (_QWORD *)quasar::SpeechRequestData::getLocation(v18);
  if (*Location)
  {
    v22 = (unint64_t *)(*Location + 8);
    do
      v23 = __ldxr(v22);
    while (__stxr(v23 + 1, v22));
  }
  v181 = *Location;
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::operator=[abi:ne180100](&v184, (uint64_t *)(a2 + 144));
  v187 = *(_DWORD *)(a2 + 208);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::operator=[abi:ne180100](&v185, (uint64_t *)(a2 + 160));
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::operator=[abi:ne180100](&v183, (uint64_t *)(*((_QWORD *)*a1 + 3) + 320));
  LmeDataStreams = (uint64_t **)quasar::SpeechRequestData::getLmeDataStreams(*a1);
  if (v186 != (_BYTE *)LmeDataStreams)
    std::vector<std::shared_ptr<quasar::Decoder>>::__assign_with_size[abi:ne180100]<std::shared_ptr<quasar::Decoder>*,std::shared_ptr<quasar::Decoder>*>((uint64_t)v186, *LmeDataStreams, LmeDataStreams[1], ((char *)LmeDataStreams[1] - (char *)*LmeDataStreams) >> 4);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::operator=[abi:ne180100](&v186[24], (uint64_t *)(*((_QWORD *)*a1 + 3) + 720));
  v25 = (_BYTE *)*((_QWORD *)*a1 + 3);
  v188 = v25[736];
  if (v25[53])
    v26 = 0;
  else
    v26 = v11;
  v191 = v26;
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::operator=[abi:ne180100](&v189, (uint64_t *)(*(_QWORD *)v25 + 8));
  std::string::operator=(&v190, (const std::string *)(*((_QWORD *)*a1 + 3) + 80));
  v27 = *(_QWORD **)(a2 + 8);
  for (i = (const void **)v27[5]; i != (const void **)v27[6]; v27 = *(_QWORD **)(a2 + 8))
  {
    v29 = (uint64_t)*i;
    if (*i)
      v30 = v17;
    else
      v30 = 1;
    if ((v30 & 1) != 0
    {
      quasar::MultiAudioBuffer::getBuffer(*((_QWORD *)*a1 + 18), 0, &v169);
      if ((_QWORD)v169)
        v35 = v169 + 16;
      else
        v35 = 0;
      v167 = v192;
      v168 = v193;
      if (v193)
      {
        p_shared_owners = (unint64_t *)&v193->__shared_owners_;
        do
          v37 = __ldxr(p_shared_owners);
        while (__stxr(v37 + 1, p_shared_owners));
      }
      quasar::FeatureExtractor::createOnlineFeInput(v29, v35, (uint64_t *)&v167);
      v38 = a4[1];
      v39 = (unint64_t)a4[2];
      if ((unint64_t)v38 >= v39)
      {
        v40 = (v38 - *a4) >> 4;
        v41 = v40 + 1;
        if ((unint64_t)(v40 + 1) >> 60)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v42 = v39 - (_QWORD)*a4;
        if (v42 >> 3 > v41)
          v41 = v42 >> 3;
        if ((unint64_t)v42 >= 0x7FFFFFFFFFFFFFF0)
          v43 = 0xFFFFFFFFFFFFFFFLL;
        else
          v43 = v41;
        *(_QWORD *)&v170[2] = a4 + 2;
        v44 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<int,unsigned long>>>((uint64_t)(a4 + 2), v43);
        v46 = &v44[16 * v40];
        *(_OWORD *)v46 = *(_OWORD *)v194;
        *(_OWORD *)v194 = 0uLL;
        v48 = *a4;
        v47 = a4[1];
        if (v47 == *a4)
        {
          v51 = (__int128)vdupq_n_s64((unint64_t)v47);
          v49 = &v44[16 * v40];
        }
        else
        {
          v49 = &v44[16 * v40];
          do
          {
            v50 = *((_OWORD *)v47 - 1);
            v47 -= 16;
            *((_OWORD *)v49 - 1) = v50;
            v49 -= 16;
            *(_QWORD *)v47 = 0;
            *((_QWORD *)v47 + 1) = 0;
          }
          while (v47 != v48);
          v51 = *(_OWORD *)a4;
        }
        v52 = v46 + 16;
        *a4 = v49;
        a4[1] = v46 + 16;
        *(__int128 *)((char *)v170 + 8) = v51;
        v53 = a4[2];
        a4[2] = &v44[16 * v45];
        *((_QWORD *)&v170[1] + 1) = v53;
        *(_QWORD *)&v170[0] = v51;
        std::__split_buffer<std::shared_ptr<quasar::FeatureExtractor>>::~__split_buffer((uint64_t)v170);
        v54 = *(std::__shared_weak_count **)&v194[8];
        a4[1] = v52;
        if (v54)
        {
          v55 = (unint64_t *)&v54->__shared_owners_;
          do
            v56 = __ldaxr(v55);
          while (__stlxr(v56 - 1, v55));
          if (!v56)
          {
            ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
            std::__shared_weak_count::__release_weak(v54);
          }
        }
      }
      else
      {
        *(_OWORD *)v38 = *(_OWORD *)v194;
        *(_OWORD *)v194 = 0uLL;
        a4[1] = v38 + 16;
      }
      v57 = v168;
      if (v168)
      {
        v58 = (unint64_t *)&v168->__shared_owners_;
        do
          v59 = __ldaxr(v58);
        while (__stlxr(v59 - 1, v58));
        if (!v59)
        {
          ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
          std::__shared_weak_count::__release_weak(v57);
        }
      }
      v60 = (std::__shared_weak_count *)*((_QWORD *)&v169 + 1);
      if (*((_QWORD *)&v169 + 1))
      {
        v61 = (unint64_t *)(*((_QWORD *)&v169 + 1) + 8);
        do
          v62 = __ldaxr(v61);
        while (__stlxr(v62 - 1, v61));
        if (!v62)
        {
          ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
          std::__shared_weak_count::__release_weak(v60);
        }
      }
      std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::operator=[abi:ne180100](&v192, (uint64_t *)a4[1] - 2);
      if (v192
      {
        v63 = v193;
        if (v193)
        {
          v64 = (unint64_t *)&v193->__shared_owners_;
          do
            v65 = __ldxr(v64);
          while (__stxr(v65 + 1, v64));
          do
            v66 = __ldaxr(v64);
          while (__stlxr(v66 - 1, v64));
          if (!v66)
          {
            ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
            std::__shared_weak_count::__release_weak(v63);
          }
        }
        std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::operator=[abi:ne180100]((_QWORD *)(a2 + 48), (uint64_t *)&v192);
      }
      if ((*(unsigned int (**)(const void *))(*(_QWORD *)*i + 16))(*i))
      {
        v165 = (kaldi::OnlineFeatInputItf *)v192;
        std::allocate_shared[abi:ne180100]<kaldi::OnlineBufferingInput,std::allocator<kaldi::OnlineBufferingInput>,kaldi::OnlineFeatInputItf *,void>(&v165, &v169);
        v67 = v169;
        *(_OWORD *)v194 = v169;
        v169 = 0uLL;
        v69 = a4[1];
        v68 = (unint64_t)a4[2];
        if ((unint64_t)v69 >= v68)
        {
          v162 = v67;
          v71 = (v69 - *a4) >> 4;
          if ((unint64_t)(v71 + 1) >> 60)
            std::vector<int>::__throw_length_error[abi:ne180100]();
          v72 = v68 - (_QWORD)*a4;
          v73 = v72 >> 3;
          if (v72 >> 3 <= (unint64_t)(v71 + 1))
            v73 = v71 + 1;
          if ((unint64_t)v72 >= 0x7FFFFFFFFFFFFFF0)
            v74 = 0xFFFFFFFFFFFFFFFLL;
          else
            v74 = v73;
          *(_QWORD *)&v170[2] = a4 + 2;
          v75 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<int,unsigned long>>>((uint64_t)(a4 + 2), v74);
          v77 = &v75[16 * v71];
          *(_OWORD *)v77 = v162;
          *(_OWORD *)v194 = 0uLL;
          v79 = *a4;
          v78 = a4[1];
          if (v78 == *a4)
          {
            v82 = (__int128)vdupq_n_s64((unint64_t)v78);
            v80 = &v75[16 * v71];
          }
          else
          {
            v80 = &v75[16 * v71];
            do
            {
              v81 = *((_OWORD *)v78 - 1);
              v78 -= 16;
              *((_OWORD *)v80 - 1) = v81;
              v80 -= 16;
              *(_QWORD *)v78 = 0;
              *((_QWORD *)v78 + 1) = 0;
            }
            while (v78 != v79);
            v82 = *(_OWORD *)a4;
          }
          v70 = v77 + 16;
          *a4 = v80;
          a4[1] = v77 + 16;
          *(__int128 *)((char *)v170 + 8) = v82;
          v83 = a4[2];
          a4[2] = &v75[16 * v76];
          *((_QWORD *)&v170[1] + 1) = v83;
          *(_QWORD *)&v170[0] = v82;
          std::__split_buffer<std::shared_ptr<quasar::FeatureExtractor>>::~__split_buffer((uint64_t)v170);
        }
        else
        {
          *(_OWORD *)v69 = v67;
          v70 = v69 + 16;
          *(_OWORD *)v194 = 0uLL;
        }
        a4[1] = v70;
        v84 = (std::__shared_weak_count *)*((_QWORD *)&v169 + 1);
        if (*((_QWORD *)&v169 + 1))
        {
          v85 = (unint64_t *)(*((_QWORD *)&v169 + 1) + 8);
          do
            v86 = __ldaxr(v85);
          while (__stlxr(v86 - 1, v85));
          if (!v86)
          {
            ((void (*)(std::__shared_weak_count *))v84->__on_zero_shared)(v84);
            std::__shared_weak_count::__release_weak(v84);
          }
        }
        std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::operator=[abi:ne180100](&v192, (uint64_t *)a4[1] - 2);
      }
    }
    else
    {
      v31 = (std::__shared_weak_count *)i[1];
      if (v31)
      {
        v32 = (unint64_t *)&v31->__shared_owners_;
        do
          v33 = __ldxr(v32);
        while (__stxr(v33 + 1, v32));
        do
          v34 = __ldaxr(v32);
        while (__stlxr(v34 - 1, v32));
        if (!v34)
        {
          ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
          std::__shared_weak_count::__release_weak(v31);
        }
      }
      if (quasar::gLogLevel >= 5)
      {
        v178 = 0u;
        v179 = 0u;
        v176 = 0u;
        v177 = 0u;
        v174 = 0u;
        v175 = 0u;
        *(_OWORD *)__p = 0u;
        v173 = 0u;
        v171 = 0u;
        memset(v170, 0, sizeof(v170));
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v170);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v170, (uint64_t)"Skipping CacheInput since it's not required", 43);
        quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)v170);
      }
    }
    i += 2;
  }
  v87 = (_QWORD *)v27[10];
  v88 = (_QWORD *)v27[11];
  if (v87 != v88)
  {
    while (((*(uint64_t (**)(_QWORD))(*(_QWORD *)*v87 + 48))(*v87) & 1) == 0)
    {
      v87 += 2;
      if (v87 == v88)
        goto LABEL_176;
    }
    std::allocate_shared[abi:ne180100]<quasar::OnlineCacheInputFe,std::allocator<quasar::OnlineCacheInputFe>,char const(&)[6],void>("cache", v170);
    std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100]((uint64_t)a3, v170);
    v89 = (std::__shared_weak_count *)*((_QWORD *)&v170[0] + 1);
    if (*((_QWORD *)&v170[0] + 1))
    {
      v90 = (unint64_t *)(*((_QWORD *)&v170[0] + 1) + 8);
      do
        v91 = __ldaxr(v90);
      while (__stlxr(v91 - 1, v90));
      if (!v91)
      {
        ((void (*)(std::__shared_weak_count *))v89->__on_zero_shared)(v89);
        std::__shared_weak_count::__release_weak(v89);
      }
    }
    quasar::FeatureExtractor::init(*a3);
    v92 = *a3;
    quasar::MultiAudioBuffer::getBuffer(*((_QWORD *)*a1 + 18), 0, &v165);
    v93 = v165;
    v163 = v192;
    v164 = v193;
    if (v193)
    {
      v94 = (unint64_t *)&v193->__shared_owners_;
      do
        v95 = __ldxr(v94);
      while (__stxr(v95 + 1, v94));
    }
    LODWORD(v170[0]) = *(_DWORD *)(*((_QWORD *)*a1 + 3) + 24);
    *((_QWORD *)&v170[0] + 1) = 0;
    LOBYTE(v170[1]) = 0;
    DWORD1(v170[7]) = 0;
    BYTE8(v170[7]) = 0;
    memset((char *)&v170[1] + 8, 0, 80);
    *(__int128 *)((char *)&v170[6] + 1) = 0u;
    v171 = 0u;
    *(_OWORD *)__p = 0u;
    *(_QWORD *)&v173 = 0;
    BYTE8(v173) = 1;
    if (v93)
      v96 = (uint64_t)v93 + 16;
    else
      v96 = 0;
    quasar::FeatureExtractor::createOnlineFeInput(v92, v96, (uint64_t *)&v163);
    v97 = (unint64_t)a4[2];
    v98 = a4[1];
    if ((unint64_t)v98 >= v97)
    {
      v99 = (v98 - *a4) >> 4;
      v100 = v99 + 1;
      if ((unint64_t)(v99 + 1) >> 60)
        std::vector<int>::__throw_length_error[abi:ne180100]();
      v101 = v97 - (_QWORD)*a4;
      if (v101 >> 3 > v100)
        v100 = v101 >> 3;
      if ((unint64_t)v101 >= 0x7FFFFFFFFFFFFFF0)
        v102 = 0xFFFFFFFFFFFFFFFLL;
      else
        v102 = v100;
      v196 = a4 + 2;
      v103 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<int,unsigned long>>>((uint64_t)(a4 + 2), v102);
      v105 = &v103[16 * v99];
      *(_OWORD *)v105 = v169;
      v169 = 0uLL;
      v107 = *a4;
      v106 = a4[1];
      if (v106 == *a4)
      {
        v110 = vdupq_n_s64((unint64_t)v106);
        v108 = &v103[16 * v99];
      }
      else
      {
        v108 = &v103[16 * v99];
        do
        {
          v109 = *((_OWORD *)v106 - 1);
          v106 -= 16;
          *((_OWORD *)v108 - 1) = v109;
          v108 -= 16;
          *(_QWORD *)v106 = 0;
          *((_QWORD *)v106 + 1) = 0;
        }
        while (v106 != v107);
        v110 = *(int64x2_t *)a4;
      }
      v111 = v105 + 16;
      *a4 = v108;
      a4[1] = v105 + 16;
      *(int64x2_t *)&v194[8] = v110;
      v112 = a4[2];
      a4[2] = &v103[16 * v104];
      v195 = v112;
      *(_QWORD *)v194 = v110.i64[0];
      std::__split_buffer<std::shared_ptr<quasar::FeatureExtractor>>::~__split_buffer((uint64_t)v194);
      v113 = (std::__shared_weak_count *)*((_QWORD *)&v169 + 1);
      a4[1] = v111;
      if (v113)
      {
        v114 = (unint64_t *)&v113->__shared_owners_;
        do
          v115 = __ldaxr(v114);
        while (__stlxr(v115 - 1, v114));
        if (!v115)
        {
          ((void (*)(std::__shared_weak_count *))v113->__on_zero_shared)(v113);
          std::__shared_weak_count::__release_weak(v113);
        }
      }
    }
    else
    {
      *(_OWORD *)v98 = v169;
      v169 = 0uLL;
      a4[1] = v98 + 16;
    }
    if (SBYTE7(v173) < 0)
      operator delete(__p[0]);
    v116 = (std::__shared_weak_count *)*((_QWORD *)&v171 + 1);
    if (*((_QWORD *)&v171 + 1))
    {
      v117 = (unint64_t *)(*((_QWORD *)&v171 + 1) + 8);
      do
        v118 = __ldaxr(v117);
      while (__stlxr(v118 - 1, v117));
      if (!v118)
      {
        ((void (*)(std::__shared_weak_count *))v116->__on_zero_shared)(v116);
        std::__shared_weak_count::__release_weak(v116);
      }
    }
    v119 = (std::__shared_weak_count *)*((_QWORD *)&v170[6] + 1);
    if (*((_QWORD *)&v170[6] + 1))
    {
      v120 = (unint64_t *)(*((_QWORD *)&v170[6] + 1) + 8);
      do
        v121 = __ldaxr(v120);
      while (__stlxr(v121 - 1, v120));
      if (!v121)
      {
        ((void (*)(std::__shared_weak_count *))v119->__on_zero_shared)(v119);
        std::__shared_weak_count::__release_weak(v119);
      }
    }
    *(_QWORD *)v194 = (char *)&v170[4] + 8;
    std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100]((void ***)v194);
    v122 = *(std::__shared_weak_count **)&v170[4];
    if (*(_QWORD *)&v170[4])
    {
      v123 = (unint64_t *)(*(_QWORD *)&v170[4] + 8);
      do
        v124 = __ldaxr(v123);
      while (__stlxr(v124 - 1, v123));
      if (!v124)
      {
        ((void (*)(std::__shared_weak_count *))v122->__on_zero_shared)(v122);
        std::__shared_weak_count::__release_weak(v122);
      }
    }
    v125 = *(std::__shared_weak_count **)&v170[3];
    if (*(_QWORD *)&v170[3])
    {
      v126 = (unint64_t *)(*(_QWORD *)&v170[3] + 8);
      do
        v127 = __ldaxr(v126);
      while (__stlxr(v127 - 1, v126));
      if (!v127)
      {
        ((void (*)(std::__shared_weak_count *))v125->__on_zero_shared)(v125);
        std::__shared_weak_count::__release_weak(v125);
      }
    }
    v128 = *(std::__shared_weak_count **)&v170[2];
    if (*(_QWORD *)&v170[2])
    {
      v129 = (unint64_t *)(*(_QWORD *)&v170[2] + 8);
      do
        v130 = __ldaxr(v129);
      while (__stlxr(v130 - 1, v129));
      if (!v130)
      {
        ((void (*)(std::__shared_weak_count *))v128->__on_zero_shared)(v128);
        std::__shared_weak_count::__release_weak(v128);
      }
    }
    v131 = *((_QWORD *)&v170[0] + 1);
    if (*((_QWORD *)&v170[0] + 1))
    {
      v132 = (unint64_t *)(*((_QWORD *)&v170[0] + 1) + 8);
      do
        v133 = __ldaxr(v132);
      while (__stlxr(v133 - 1, v132));
      if (!v133)
        (*(void (**)(uint64_t))(*(_QWORD *)v131 + 16))(v131);
    }
    v134 = v164;
    if (v164)
    {
      v135 = (unint64_t *)&v164->__shared_owners_;
      do
        v136 = __ldaxr(v135);
      while (__stlxr(v136 - 1, v135));
      if (!v136)
      {
        ((void (*)(std::__shared_weak_count *))v134->__on_zero_shared)(v134);
        std::__shared_weak_count::__release_weak(v134);
      }
    }
    v137 = v166;
    if (v166)
    {
      v138 = (unint64_t *)&v166->__shared_owners_;
      do
        v139 = __ldaxr(v138);
      while (__stlxr(v139 - 1, v138));
      if (!v139)
      {
        ((void (*)(std::__shared_weak_count *))v137->__on_zero_shared)(v137);
        std::__shared_weak_count::__release_weak(v137);
      }
    }
  }
LABEL_176:
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::operator=[abi:ne180100]((_QWORD *)(a2 + 64), (uint64_t *)a4[1] - 2);
  if (SHIBYTE(v190.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v190.__r_.__value_.__l.__data_);
  v140 = (std::__shared_weak_count *)*((_QWORD *)&v189 + 1);
  if (*((_QWORD *)&v189 + 1))
  {
    v141 = (unint64_t *)(*((_QWORD *)&v189 + 1) + 8);
    do
      v142 = __ldaxr(v141);
    while (__stlxr(v142 - 1, v141));
    if (!v142)
    {
      ((void (*)(std::__shared_weak_count *))v140->__on_zero_shared)(v140);
      std::__shared_weak_count::__release_weak(v140);
    }
  }
  v143 = *(std::__shared_weak_count **)&v186[32];
  if (*(_QWORD *)&v186[32])
  {
    v144 = (unint64_t *)(*(_QWORD *)&v186[32] + 8);
    do
      v145 = __ldaxr(v144);
    while (__stlxr(v145 - 1, v144));
    if (!v145)
    {
      ((void (*)(std::__shared_weak_count *))v143->__on_zero_shared)(v143);
      std::__shared_weak_count::__release_weak(v143);
    }
  }
  *(_QWORD *)&v170[0] = v186;
  std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100]((void ***)v170);
  v146 = (std::__shared_weak_count *)*((_QWORD *)&v185 + 1);
  if (*((_QWORD *)&v185 + 1))
  {
    v147 = (unint64_t *)(*((_QWORD *)&v185 + 1) + 8);
    do
      v148 = __ldaxr(v147);
    while (__stlxr(v148 - 1, v147));
    if (!v148)
    {
      ((void (*)(std::__shared_weak_count *))v146->__on_zero_shared)(v146);
      std::__shared_weak_count::__release_weak(v146);
    }
  }
  v149 = (std::__shared_weak_count *)*((_QWORD *)&v184 + 1);
  if (*((_QWORD *)&v184 + 1))
  {
    v150 = (unint64_t *)(*((_QWORD *)&v184 + 1) + 8);
    do
      v151 = __ldaxr(v150);
    while (__stlxr(v151 - 1, v150));
    if (!v151)
    {
      ((void (*)(std::__shared_weak_count *))v149->__on_zero_shared)(v149);
      std::__shared_weak_count::__release_weak(v149);
    }
  }
  v152 = (std::__shared_weak_count *)*((_QWORD *)&v183 + 1);
  if (*((_QWORD *)&v183 + 1))
  {
    v153 = (unint64_t *)(*((_QWORD *)&v183 + 1) + 8);
    do
      v154 = __ldaxr(v153);
    while (__stlxr(v154 - 1, v153));
    if (!v154)
    {
      ((void (*)(std::__shared_weak_count *))v152->__on_zero_shared)(v152);
      std::__shared_weak_count::__release_weak(v152);
    }
  }
  v155 = v181;
  if (v181)
  {
    v156 = (unint64_t *)(v181 + 8);
    do
      v157 = __ldaxr(v156);
    while (__stlxr(v157 - 1, v156));
    if (!v157)
      (*(void (**)(uint64_t))(*(_QWORD *)v155 + 16))(v155);
  }
  v158 = v193;
  if (v193)
  {
    v159 = (unint64_t *)&v193->__shared_owners_;
    do
      v160 = __ldaxr(v159);
    while (__stlxr(v160 - 1, v159));
    if (!v160)
    {
      ((void (*)(std::__shared_weak_count *))v158->__on_zero_shared)(v158);
      std::__shared_weak_count::__release_weak(v158);
    }
  }
}

void sub_1ADC60850(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,void *a55)
{
  uint64_t v55;

  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&a19);
  quasar::FeatureExtractorArgs::~FeatureExtractorArgs(&a21);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  quasar::FeatureExtractorArgs::~FeatureExtractorArgs(&a55);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](v55 - 160);
  std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a55);
  _Unwind_Resume(a1);
}

void quasar::SpeechRecognizer::runSync(uint64_t a1, quasar::SymbolTableList **a2, std::vector<std::wstring> *a3)
{
  uint64_t v6;
  char *v7;
  uint64_t v8;
  quasar::SpeechRequestData **v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  int v18;
  uint64_t *v19;
  int v20;
  uint64_t v22;
  uint64_t i;
  char *v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  _QWORD *v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  quasar::SpeechRequestData *v32;
  unint64_t *v33;
  unint64_t v34;
  unint64_t *v35;
  unint64_t v36;
  void *v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  _QWORD *v41;
  _DWORD *v42;
  __int128 v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  __int128 v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  __int128 v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  quasar::Decoder **v64;
  unsigned int v65;
  unint64_t v66;
  __int128 v67;
  std::__shared_weak_count *v68;
  unint64_t *v69;
  unint64_t v70;
  std::__shared_weak_count *v71;
  unint64_t *v72;
  unint64_t v73;
  std::__shared_weak_count *size;
  unint64_t *v75;
  unint64_t v76;
  __int128 v77;
  std::__shared_weak_count *v78;
  unint64_t *v79;
  unint64_t v80;
  std::__shared_weak_count *v81;
  unint64_t *v82;
  unint64_t v83;
  uint64_t *v84;
  uint64_t v85;
  uint64_t v86;
  std::mutex *v87;
  unint64_t *v88;
  unint64_t v89;
  std::__shared_weak_count *v90;
  std::__shared_weak_count *v91;
  unint64_t *v92;
  unint64_t v93;
  unint64_t *v94;
  unint64_t v95;
  BOOL v96;
  BOOL v97;
  int v98;
  clockid_t v99;
  int v100;
  quasar::SymbolTableList **v101;
  quasar::SpeechRequestData **v102;
  std::vector<std::wstring> *v103;
  uint64_t v104;
  uint64_t v105;
  unint64_t v106;
  uint64_t *v107;
  uint64_t v108;
  std::__shared_weak_count *v109;
  unint64_t *v110;
  unint64_t v111;
  unint64_t v112;
  int v113;
  _QWORD **v114;
  double *v115;
  double Seconds;
  double v117;
  __int128 v118;
  std::__shared_weak_count *v119;
  unint64_t *v120;
  unint64_t v121;
  std::__shared_weak_count *v122;
  unint64_t *v123;
  unint64_t v124;
  _QWORD *v125;
  _QWORD *v126;
  double *v127;
  clockid_t v128;
  double v129;
  std::string *v130;
  std::string::size_type v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  unint64_t *v138;
  unint64_t v139;
  std::__shared_weak_count *v140;
  unint64_t *v141;
  unint64_t v142;
  std::__shared_weak_count *v143;
  unint64_t *v144;
  unint64_t v145;
  int v146;
  _QWORD *v147;
  _QWORD *v148;
  std::__shared_weak_count *v149;
  unint64_t *v150;
  unint64_t v151;
  std::__shared_weak_count *v152;
  unint64_t *v153;
  unint64_t v154;
  std::__shared_weak_count *v155;
  unint64_t *v156;
  unint64_t v157;
  _QWORD *v158;
  std::mutex *v159;
  std::string v160;
  __int128 v161;
  _QWORD v162[2];
  uint64_t v163;
  std::__shared_weak_count *v164;
  void *v165[2];
  unsigned __int8 v166;
  void *v167;
  std::__shared_weak_count *v168;
  quasar::SpeechRequestData *v169[2];
  uint64_t v170;
  std::__shared_weak_count *v171;
  uint64_t v172[3];
  std::string __p;
  __int128 v174;
  uint64_t v175;
  __int128 v176;
  __int128 v177;
  __int128 v178;
  __int128 v179;
  char *v180;
  std::__shared_weak_count *v181;
  char *v182;
  std::__shared_weak_count *v183;
  int v184;
  int v185;
  char v186;
  __int128 v187;
  __int16 v188;
  __int16 v189;
  __int128 v190;
  __int128 v191;
  __int128 v192;
  __int128 v193;
  __int128 v194;
  __int128 v195;
  __int128 v196;
  __int128 v197;
  __int128 v198;
  __int128 v199;
  __int128 v200;
  __int128 v201;
  __int128 v202;
  __int128 v203;
  __int128 v204;
  __int128 v205;
  __int128 v206;
  uint64_t v207;
  std::__shared_weak_count *v208;

  v6 = **(_QWORD **)(*(_QWORD *)(a1 + 280) + 24);
  (*(void (**)(uint64_t))(*(_QWORD *)v6 + 16))(v6);
  v7 = (char *)operator new(0x198uLL);
  *((_QWORD *)v7 + 2) = 0;
  *(_QWORD *)v7 = &unk_1E5D440B8;
  *((_QWORD *)v7 + 1) = 0;
  *(_OWORD *)(v7 + 40) = 0u;
  *(_OWORD *)(v7 + 56) = 0u;
  *(_OWORD *)(v7 + 72) = 0u;
  *(_OWORD *)(v7 + 88) = 0u;
  *(_OWORD *)(v7 + 104) = 0u;
  *(_OWORD *)(v7 + 120) = 0u;
  *(_OWORD *)(v7 + 136) = 0u;
  *(_OWORD *)(v7 + 152) = 0u;
  *(_OWORD *)(v7 + 168) = 0u;
  *(_OWORD *)(v7 + 184) = 0u;
  *(_OWORD *)(v7 + 200) = 0u;
  *(_OWORD *)(v7 + 216) = 0u;
  *(_OWORD *)(v7 + 232) = 0u;
  *(_OWORD *)(v7 + 248) = 0u;
  *(_OWORD *)(v7 + 24) = 0u;
  *(_OWORD *)(v7 + 264) = 0u;
  *(_OWORD *)(v7 + 280) = 0u;
  *(_OWORD *)(v7 + 296) = 0u;
  *(_OWORD *)(v7 + 312) = 0u;
  *(_OWORD *)(v7 + 328) = 0u;
  *(_OWORD *)(v7 + 344) = 0u;
  *(_OWORD *)(v7 + 360) = 0u;
  *(_OWORD *)(v7 + 376) = 0u;
  *(_OWORD *)(v7 + 392) = 0u;
  quasar::SpeechRequestResultData::SpeechRequestResultData((quasar::SpeechRequestResultData *)(v7 + 24));
  v207 = v8;
  v208 = (std::__shared_weak_count *)v7;
  std::atomic_store[abi:ne180100]<quasar::SpeechRequestResultData>((uint64_t *)(a1 + 648), &v207);
  v9 = (quasar::SpeechRequestData **)(a1 + 280);
  v10 = v208;
  if (v208)
  {
    p_shared_owners = (unint64_t *)&v208->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::operator=[abi:ne180100]((_QWORD *)(**((_QWORD **)*v9 + 3) + 8), (uint64_t *)(a1 + 648));
  v13 = *(_QWORD *)(**((_QWORD **)*v9 + 3) + 8);
  std::string::basic_string[abi:ne180100]<0>(&v190, "geoLocationStatusUponRunAsync");
  quasar::Location::statusAsString((quasar::SpeechRequestData *)((char *)*v9 + 184), &__p);
  quasar::SpeechRequestResultData::addDumpAA(v13, &v190, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SBYTE7(v191) < 0)
    operator delete((void *)v190);
  std::mutex::lock((std::mutex *)(a1 + 440));
  v14 = *(_QWORD *)(a1 + 280);
  if (a1 + 408 != v14 + 160)
    std::vector<std::shared_ptr<quasar::Decoder>>::__assign_with_size[abi:ne180100]<std::shared_ptr<quasar::Decoder>*,std::shared_ptr<quasar::Decoder>*>(a1 + 408, *(uint64_t **)(v14 + 160), *(uint64_t **)(v14 + 168), (uint64_t)(*(_QWORD *)(v14 + 168) - *(_QWORD *)(v14 + 160)) >> 4);
  *(_BYTE *)(a1 + 432) = 0;
  if (*(_QWORD *)(a1 + 536) == *(_QWORD *)(a1 + 544))
    *(_BYTE *)(a1 + 528) = 0;
  std::mutex::unlock((std::mutex *)(a1 + 440));
  v15 = *(_QWORD *)(a1 + 280);
  *(_DWORD *)(v15 + 16) = *(_DWORD *)(a1 + 296);
  v16 = *(_QWORD *)(v15 + 24);
  v17 = (uint64_t *)(v16 + 80);
  v18 = *(char *)(v16 + 103);
  if (v18 < 0)
  {
    if (*(_QWORD *)(v16 + 88) != 10)
      goto LABEL_25;
    v17 = (uint64_t *)*v17;
  }
  else if (v18 != 10)
  {
    goto LABEL_25;
  }
  v19 = (uint64_t *)*v17;
  v20 = *((unsigned __int16 *)v17 + 4);
  if (v19 == (uint64_t *)0x696E6F6974706143 && v20 == 26478)
    *(_DWORD *)(v15 + 16) = 1;
LABEL_25:
  if (*(_QWORD *)*a2 != *((_QWORD *)*a2 + 1))
  {
    v205 = 0u;
    v206 = 0u;
    v203 = 0u;
    v204 = 0u;
    v201 = 0u;
    v202 = 0u;
    v199 = 0u;
    v200 = 0u;
    v197 = 0u;
    v198 = 0u;
    v195 = 0u;
    v196 = 0u;
    v193 = 0u;
    v194 = 0u;
    v191 = 0u;
    v192 = 0u;
    v190 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v190);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(&v190, "Symbol table list passed to runSync() must start empty");
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&v190);
  }
  kaldi::Srand((kaldi *)0x2A);
  quasar::SpeechRecognizer::RecogData::RecogData((quasar::SpeechRecognizer::RecogData *)&__p);
  v22 = *(_QWORD *)(*(_QWORD *)(a1 + 280) + 24);
  quasar::SpeechRecognizerModelLoader::lookupRecognizers(*(_QWORD *)(a1 + 64), *(unsigned int *)(v22 + 24), (unsigned __int8 **)(v22 + 80), (std::string *)(v22 + 152), *(unsigned __int8 *)(v22 + 34), *(unsigned __int8 *)(v22 + 739), (std::string *)(v22 + 648), (std::string *)(v22 + 672), v172, (std::string *)(v22 + 696));
  for (i = v172[0]; i != v172[1]; i += 24)
  {
    if (*(_BYTE *)(i + 16))
    {
      std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::operator=[abi:ne180100](&__p.__r_.__value_.__l.__size_, (uint64_t *)i);
      break;
    }
  }
  if (!__p.__r_.__value_.__l.__size_)
  {
    v205 = 0u;
    v206 = 0u;
    v203 = 0u;
    v204 = 0u;
    v201 = 0u;
    v202 = 0u;
    v199 = 0u;
    v200 = 0u;
    v197 = 0u;
    v198 = 0u;
    v195 = 0u;
    v196 = 0u;
    v193 = 0u;
    v194 = 0u;
    v191 = 0u;
    v192 = 0u;
    v190 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v190);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v190, (uint64_t)"Invalid recognition request parameters", 38);
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&v190);
  }
  if (*(_BYTE *)(*((_QWORD *)*v9 + 3) + 52))
  {
    v24 = (char *)operator new(0x48uLL);
    *((_QWORD *)v24 + 2) = 0;
    *(_QWORD *)v24 = &unk_1E5D45628;
    *((_QWORD *)v24 + 1) = 0;
    *(_OWORD *)(v24 + 40) = 0u;
    *(_OWORD *)(v24 + 56) = 0u;
    *(_OWORD *)(v24 + 24) = 0u;
    v25 = v181;
    v180 = v24 + 24;
    v181 = (std::__shared_weak_count *)v24;
    if (v25)
    {
      v26 = (unint64_t *)&v25->__shared_owners_;
      do
        v27 = __ldaxr(v26);
      while (__stlxr(v27 - 1, v26));
      if (!v27)
      {
        ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
        std::__shared_weak_count::__release_weak(v25);
      }
    }
    v28 = operator new(0x20uLL);
    v28[2] = 0;
    *v28 = &unk_1E5D459E0;
    v28[1] = 0;
    *((_DWORD *)v28 + 6) = 0;
    v29 = v183;
    v182 = (char *)(v28 + 3);
    v183 = (std::__shared_weak_count *)v28;
    if (v29)
    {
      v30 = (unint64_t *)&v29->__shared_owners_;
      do
        v31 = __ldaxr(v30);
      while (__stlxr(v31 - 1, v30));
      if (!v31)
      {
        ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
        std::__shared_weak_count::__release_weak(v29);
      }
    }
    v185 = *(_DWORD *)(*(_QWORD *)(a1 + 600) + 64);
    if (quasar::gLogLevel >= 5)
    {
      v205 = 0u;
      v206 = 0u;
      v203 = 0u;
      v204 = 0u;
      v201 = 0u;
      v202 = 0u;
      v199 = 0u;
      v200 = 0u;
      v197 = 0u;
      v198 = 0u;
      v195 = 0u;
      v196 = 0u;
      v193 = 0u;
      v194 = 0u;
      v191 = 0u;
      v192 = 0u;
      v190 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v190);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v190, (uint64_t)"Speaker code training is enabled, going to cache features and labels as training data", 85);
      quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&v190);
    }
  }
  v170 = 0;
  v171 = 0;
  v32 = *(quasar::SpeechRequestData **)(a1 + 288);
  v169[0] = *(quasar::SpeechRequestData **)(a1 + 280);
  v169[1] = v32;
  if (v32)
  {
    v33 = (unint64_t *)((char *)v32 + 8);
    do
      v34 = __ldxr(v33);
    while (__stxr(v34 + 1, v33));
  }
  quasar::SpeechRecognizer::createFeatChain(v169, (uint64_t)&__p, &v170, (char **)&v190);
  std::vector<std::shared_ptr<quasar::Decoder>>::__vdeallocate((void **)&v174);
  v174 = v190;
  v175 = v191;
  *(_QWORD *)&v191 = 0;
  v190 = 0uLL;
  v165[0] = &v190;
  std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100]((void ***)v165);
  if (v32)
  {
    v35 = (unint64_t *)((char *)v32 + 8);
    do
      v36 = __ldaxr(v35);
    while (__stlxr(v36 - 1, v35));
    if (!v36)
    {
      (*(void (**)(quasar::SpeechRequestData *))(*(_QWORD *)v32 + 16))(v32);
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v32);
    }
  }
  v37 = *(void **)(*((_QWORD *)&v174 + 1) - 16);
  v167 = v37;
  v38 = *(std::__shared_weak_count **)(*((_QWORD *)&v174 + 1) - 8);
  v168 = v38;
  if (v38)
  {
    v39 = (unint64_t *)&v38->__shared_owners_;
    do
      v40 = __ldxr(v39);
    while (__stxr(v40 + 1, v39));
  }
  if (quasar::gLogLevel >= 5)
  {
    v205 = 0u;
    v206 = 0u;
    v203 = 0u;
    v204 = 0u;
    v201 = 0u;
    v202 = 0u;
    v199 = 0u;
    v200 = 0u;
    v197 = 0u;
    v198 = 0u;
    v195 = 0u;
    v196 = 0u;
    v193 = 0u;
    v194 = 0u;
    v191 = 0u;
    v192 = 0u;
    v190 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v190);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v190, (uint64_t)"There are ", 10);
    v41 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v41, (uint64_t)" components in OnlineFeatInputItf chain", 39);
    quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&v190);
    if (quasar::gLogLevel >= 5)
    {
      v205 = 0u;
      v206 = 0u;
      v203 = 0u;
      v204 = 0u;
      v201 = 0u;
      v202 = 0u;
      v199 = 0u;
      v200 = 0u;
      v197 = 0u;
      v198 = 0u;
      v195 = 0u;
      v196 = 0u;
      v193 = 0u;
      v194 = 0u;
      v191 = 0u;
      v192 = 0u;
      v190 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v190);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v190, (uint64_t)"Created OnlineFeatInputItf chain", 32);
      quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&v190);
    }
  }
  v42 = (_DWORD *)(*(_QWORD *)(a1 + 48) + 1612);
  v165[0] = v37;
  std::allocate_shared[abi:ne180100]<kaldi::OnlineFeatureMatrix,std::allocator<kaldi::OnlineFeatureMatrix>,kaldi::OnlineFeatureMatrixOptions const&,kaldi::OnlineFeatInputItf *,void>(v42, (uint64_t *)v165, &v190);
  v43 = v190;
  v190 = 0uLL;
  v44 = (std::__shared_weak_count *)*((_QWORD *)&v176 + 1);
  v176 = v43;
  if (v44)
  {
    v45 = (unint64_t *)&v44->__shared_owners_;
    do
      v46 = __ldaxr(v45);
    while (__stlxr(v46 - 1, v45));
    if (!v46)
    {
      ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
      std::__shared_weak_count::__release_weak(v44);
    }
  }
  v47 = (std::__shared_weak_count *)*((_QWORD *)&v190 + 1);
  if (*((_QWORD *)&v190 + 1))
  {
    v48 = (unint64_t *)(*((_QWORD *)&v190 + 1) + 8);
    do
      v49 = __ldaxr(v48);
    while (__stlxr(v49 - 1, v48));
    if (!v49)
    {
      ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
      std::__shared_weak_count::__release_weak(v47);
    }
  }
  quasar::Decodable::createDecodable((uint64_t *)&v190, *(quasar::Decodable **)(__p.__r_.__value_.__l.__size_ + 64), (kaldi::OnlineFeatureMatrix *)v176);
  v50 = v190;
  v190 = 0uLL;
  v51 = (std::__shared_weak_count *)*((_QWORD *)&v177 + 1);
  v177 = v50;
  if (v51)
  {
    v52 = (unint64_t *)&v51->__shared_owners_;
    do
      v53 = __ldaxr(v52);
    while (__stlxr(v53 - 1, v52));
    if (!v53)
    {
      ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
      std::__shared_weak_count::__release_weak(v51);
    }
  }
  v54 = (std::__shared_weak_count *)*((_QWORD *)&v190 + 1);
  if (*((_QWORD *)&v190 + 1))
  {
    v55 = (unint64_t *)(*((_QWORD *)&v190 + 1) + 8);
    do
      v56 = __ldaxr(v55);
    while (__stlxr(v56 - 1, v55));
    if (!v56)
    {
      ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
      std::__shared_weak_count::__release_weak(v54);
    }
  }
  (*(void (**)(__int128 *__return_ptr))(**(_QWORD **)v174 + 80))(&v190);
  v57 = v190;
  v190 = 0uLL;
  v58 = (std::__shared_weak_count *)*((_QWORD *)&v178 + 1);
  v178 = v57;
  if (v58)
  {
    v59 = (unint64_t *)&v58->__shared_owners_;
    do
      v60 = __ldaxr(v59);
    while (__stlxr(v60 - 1, v59));
    if (!v60)
    {
      ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
      std::__shared_weak_count::__release_weak(v58);
    }
  }
  v61 = (std::__shared_weak_count *)*((_QWORD *)&v190 + 1);
  if (*((_QWORD *)&v190 + 1))
  {
    v62 = (unint64_t *)(*((_QWORD *)&v190 + 1) + 8);
    do
      v63 = __ldaxr(v62);
    while (__stlxr(v63 - 1, v62));
    if (!v63)
    {
      ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
      std::__shared_weak_count::__release_weak(v61);
    }
  }
  v64 = *(quasar::Decoder ***)(__p.__r_.__value_.__l.__size_ + 80);
  v65 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v176 + 16) + 24))(*(_QWORD *)(v176 + 16));
  if (!v65)
  {
    v205 = 0u;
    v206 = 0u;
    v203 = 0u;
    v204 = 0u;
    v201 = 0u;
    v202 = 0u;
    v199 = 0u;
    v200 = 0u;
    v197 = 0u;
    v198 = 0u;
    v195 = 0u;
    v196 = 0u;
    v193 = 0u;
    v194 = 0u;
    v191 = 0u;
    v192 = 0u;
    v190 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v190);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v190, (uint64_t)"Feature extraction misconfigured", 32);
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&v190);
  }
  (*(void (**)(void **__return_ptr))(*(_QWORD *)*v64 + 112))(v165);
  quasar::MultiAudioBuffer::getBuffer(*((_QWORD *)*v9 + 18), 1, &v163);
  v66 = v166;
  if ((v166 & 0x80u) != 0)
    v66 = (unint64_t)v165[1];
  if (v66 && v163)
  {
    quasar::SpeechRecognizerModelLoader::getSpgConfig(*(_QWORD *)(a1 + 64), (uint64_t)v165, &v160);
    std::allocate_shared[abi:ne180100]<quasar::SilencePosteriorGenerator,std::allocator<quasar::SilencePosteriorGenerator>,std::shared_ptr<quasar::SilencePosteriorGeneratorConfig>,std::shared_ptr<quasar::RecogAudioBuffer> &,unsigned int &,void>((__int128 *)&v160, &v163, (unsigned int *)(*((_QWORD *)*v9 + 3) + 24), &v190);
    v67 = v190;
    v190 = 0uLL;
    v68 = (std::__shared_weak_count *)*((_QWORD *)&v179 + 1);
    v179 = v67;
    if (v68)
    {
      v69 = (unint64_t *)&v68->__shared_owners_;
      do
        v70 = __ldaxr(v69);
      while (__stlxr(v70 - 1, v69));
      if (!v70)
      {
        ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
        std::__shared_weak_count::__release_weak(v68);
      }
    }
    v71 = (std::__shared_weak_count *)*((_QWORD *)&v190 + 1);
    if (*((_QWORD *)&v190 + 1))
    {
      v72 = (unint64_t *)(*((_QWORD *)&v190 + 1) + 8);
      do
        v73 = __ldaxr(v72);
      while (__stlxr(v73 - 1, v72));
      if (!v73)
      {
        ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
        std::__shared_weak_count::__release_weak(v71);
      }
    }
    size = (std::__shared_weak_count *)v160.__r_.__value_.__l.__size_;
    if (v160.__r_.__value_.__l.__size_)
    {
      v75 = (unint64_t *)(v160.__r_.__value_.__l.__size_ + 8);
      do
        v76 = __ldaxr(v75);
      while (__stlxr(v76 - 1, v75));
      if (!v76)
      {
        ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
        std::__shared_weak_count::__release_weak(size);
      }
    }
    if (quasar::SilencePosteriorGenerator::getFrameDurationMs((quasar::SilencePosteriorGenerator *)v179) != v65)
    {
      v205 = 0u;
      v206 = 0u;
      v203 = 0u;
      v204 = 0u;
      v201 = 0u;
      v202 = 0u;
      v199 = 0u;
      v200 = 0u;
      v197 = 0u;
      v198 = 0u;
      v195 = 0u;
      v196 = 0u;
      v193 = 0u;
      v194 = 0u;
      v191 = 0u;
      v192 = 0u;
      v190 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v190);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v190, (uint64_t)"Frontend and SPG frame durations differ: ", 41);
      v158 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v158, (uint64_t)" vs ", 4);
      quasar::SilencePosteriorGenerator::getFrameDurationMs((quasar::SilencePosteriorGenerator *)v179);
      std::ostream::operator<<();
      quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&v190);
    }
  }
  if (quasar::Decoder::decoderNeedsStabilizer(*v64))
  {
    LODWORD(v160.__r_.__value_.__l.__data_) = 0;
    LODWORD(v160.__r_.__value_.__l.__data_) = quasar::Decoder::getStabilizerAveragingPeriodMs(*v64) / v65;
    LODWORD(v161) = 0;
    LODWORD(v161) = quasar::Decoder::getStabilizerMinimumWordSeenMs(*v64) / v65;
    std::allocate_shared[abi:ne180100]<quasar::ResultStreamStabilizer,std::allocator<quasar::ResultStreamStabilizer>,std::shared_ptr<quasar::RecogResultStreamBase> &,int &,int &,unsigned int &,BOOL &,BOOL &,std::shared_ptr<quasar::MuxHelper> &,void>(*(_QWORD *)(*(_QWORD *)(a1 + 280) + 24), (unsigned int *)&v160, (unsigned int *)&v161, (unsigned int *)(*(_QWORD *)(a1 + 280) + 16), (unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a1 + 280) + 24) + 36), (unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a1 + 280) + 24) + 37), (uint64_t *)(a1 + 616), &v190);
    v77 = v190;
    v190 = 0uLL;
    v78 = (std::__shared_weak_count *)*((_QWORD *)&v187 + 1);
    v187 = v77;
    if (v78)
    {
      v79 = (unint64_t *)&v78->__shared_owners_;
      do
        v80 = __ldaxr(v79);
      while (__stlxr(v80 - 1, v79));
      if (!v80)
      {
        ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
        std::__shared_weak_count::__release_weak(v78);
      }
    }
    v81 = (std::__shared_weak_count *)*((_QWORD *)&v190 + 1);
    if (*((_QWORD *)&v190 + 1))
    {
      v82 = (unint64_t *)(*((_QWORD *)&v190 + 1) + 8);
      do
        v83 = __ldaxr(v82);
      while (__stlxr(v83 - 1, v82));
      if (!v83)
      {
        ((void (*)(std::__shared_weak_count *))v81->__on_zero_shared)(v81);
        std::__shared_weak_count::__release_weak(v81);
      }
    }
  }
  else
  {
    std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::operator=[abi:ne180100](&v187, *((uint64_t **)*v9 + 3));
  }
  (*(void (**)(quasar::Decoder *))(*(_QWORD *)*v64 + 144))(*v64);
  std::mutex::lock((std::mutex *)(a1 + 136));
  v84 = *(uint64_t **)(__p.__r_.__value_.__l.__size_ + 80);
  v86 = *v84;
  v85 = v84[1];
  v87 = (std::mutex *)(a1 + 440);
  if (v85)
  {
    v88 = (unint64_t *)(v85 + 16);
    do
      v89 = __ldxr(v88);
    while (__stxr(v89 + 1, v88));
  }
  *(_QWORD *)(a1 + 664) = v86;
  v90 = *(std::__shared_weak_count **)(a1 + 672);
  *(_QWORD *)(a1 + 672) = v85;
  if (v90)
    std::__shared_weak_count::__release_weak(v90);
  v159 = (std::mutex *)(a1 + 136);
  std::mutex::unlock((std::mutex *)(a1 + 136));
  do
  {
    v91 = (std::__shared_weak_count *)a2[1];
    v162[0] = *a2;
    v162[1] = v91;
    if (v91)
    {
      v92 = (unint64_t *)&v91->__shared_owners_;
      do
        v93 = __ldxr(v92);
      while (__stxr(v93 + 1, v92));
    }
    quasar::SpeechRecognizer::runSyncUtterance(a1, v162, a3, (unsigned __int8 *)&__p);
    if (v91)
    {
      v94 = (unint64_t *)&v91->__shared_owners_;
      do
        v95 = __ldaxr(v94);
      while (__stlxr(v95 - 1, v94));
      if (!v95)
      {
        ((void (*)(std::__shared_weak_count *))v91->__on_zero_shared)(v91);
        std::__shared_weak_count::__release_weak(v91);
      }
    }
    ++v184;
    if (*(_BYTE *)(*((_QWORD *)*v9 + 3) + 36))
      v96 = v186 == 0;
    else
      v96 = 0;
    v97 = v96 && __p.__r_.__value_.__s.__data_[0] == 0;
    if (!v97 || (std::mutex::lock(v159), v98 = *(_DWORD *)(a1 + 128), std::mutex::unlock(v159), v98 == 3))
    {
      if (quasar::gLogLevel >= 4)
      {
        v205 = 0u;
        v206 = 0u;
        v203 = 0u;
        v204 = 0u;
        v201 = 0u;
        v202 = 0u;
        v199 = 0u;
        v200 = 0u;
        v197 = 0u;
        v198 = 0u;
        v195 = 0u;
        v196 = 0u;
        v193 = 0u;
        v194 = 0u;
        v191 = 0u;
        v192 = 0u;
        v190 = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v190);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v190, (uint64_t)"End of recognition.", 19);
        quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&v190);
      }
      v100 = 0;
      goto LABEL_223;
    }
    v161 = 0uLL;
    if (*(_BYTE *)(a1 + 529))
    {
      if ((_BYTE)v188)
      {
        quasar::SpeechRequestData::getLeftContextForItn(*v9, (std::string *)&v190);
        quasar::SpeechRecognizer::processLeftContextForEditLme(a1, (__int128 **)&v190);
        v160.__r_.__value_.__r.__words[0] = (std::string::size_type)&v190;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v160);
      }
      if (!HIBYTE(v188) && *(_QWORD *)(a1 + 536) != *(_QWORD *)(a1 + 544) && *(_BYTE *)(a1 + 528))
      {
        v115 = (double *)*((_QWORD *)*v9 + 25);
        Seconds = kaldi::Timer::GetSeconds((kaldi::Timer *)5, v99);
        v117 = *v115;
        quasar::SpeechRecognizer::buildEditLmeContainerFromCachedTokens((quasar::SpeechRecognizer *)a1, &v190);
        v118 = v190;
        v190 = 0uLL;
        v119 = (std::__shared_weak_count *)*((_QWORD *)&v161 + 1);
        v161 = v118;
        if (v119)
        {
          v120 = (unint64_t *)&v119->__shared_owners_;
          do
            v121 = __ldaxr(v120);
          while (__stlxr(v121 - 1, v120));
          if (!v121)
          {
            ((void (*)(std::__shared_weak_count *))v119->__on_zero_shared)(v119);
            std::__shared_weak_count::__release_weak(v119);
          }
        }
        v122 = (std::__shared_weak_count *)*((_QWORD *)&v190 + 1);
        if (*((_QWORD *)&v190 + 1))
        {
          v123 = (unint64_t *)(*((_QWORD *)&v190 + 1) + 8);
          do
            v124 = __ldaxr(v123);
          while (__stlxr(v124 - 1, v123));
          if (!v124)
          {
            ((void (*)(std::__shared_weak_count *))v122->__on_zero_shared)(v122);
            std::__shared_weak_count::__release_weak(v122);
          }
        }
        if (quasar::gLogLevel >= 5)
        {
          v205 = 0u;
          v206 = 0u;
          v203 = 0u;
          v204 = 0u;
          v201 = 0u;
          v202 = 0u;
          v199 = 0u;
          v200 = 0u;
          v197 = 0u;
          v198 = 0u;
          v195 = 0u;
          v196 = 0u;
          v193 = 0u;
          v194 = 0u;
          v191 = 0u;
          v192 = 0u;
          v190 = 0u;
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v190);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v190, (uint64_t)"Edit LME: current cache tokens:", 31);
          v125 = (_QWORD *)std::ostream::operator<<();
          v126 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v125, (uint64_t)" time takes to build LME: ", 26);
          v127 = (double *)*((_QWORD *)*v9 + 25);
          v129 = kaldi::Timer::GetSeconds((kaldi::Timer *)5, v128);
          std::to_string(&v160, v129 - *v127 - (Seconds - v117));
          if ((v160.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v130 = &v160;
          else
            v130 = (std::string *)v160.__r_.__value_.__r.__words[0];
          if ((v160.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v131 = HIBYTE(v160.__r_.__value_.__r.__words[2]);
          else
            v131 = v160.__r_.__value_.__l.__size_;
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v126, (uint64_t)v130, v131);
          if (SHIBYTE(v160.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v160.__r_.__value_.__l.__data_);
          quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&v190);
        }
      }
    }
    std::mutex::lock(v87);
    if (!(_QWORD)v161)
    {
      v113 = *(unsigned __int8 *)(a1 + 432);
      v114 = (_QWORD **)(a1 + 408);
      goto LABEL_200;
    }
    v101 = a2;
    v102 = v9;
    v103 = a3;
    v104 = *(_QWORD *)(a1 + 408);
    if (*(_QWORD *)(a1 + 416) == v104)
      goto LABEL_199;
    v105 = 0;
    v106 = 0;
    while (1)
    {
      v107 = (uint64_t *)(v104 + 16 * v106);
      v108 = *v107;
      v109 = (std::__shared_weak_count *)v107[1];
      if (v109)
        break;
      if (*(_DWORD *)(v108 + 40) == 3)
        goto LABEL_188;
LABEL_163:
      ++v106;
      v104 = *(_QWORD *)(a1 + 408);
      v105 += 16;
      if (v106 >= (*(_QWORD *)(a1 + 416) - v104) >> 4)
        goto LABEL_199;
    }
    v110 = (unint64_t *)&v109->__shared_owners_;
    do
      v111 = __ldxr(v110);
    while (__stxr(v111 + 1, v110));
    if (*(_DWORD *)(v108 + 40) != 3)
    {
      do
        v112 = __ldaxr(v110);
      while (__stlxr(v112 - 1, v110));
      if (!v112)
      {
        ((void (*)(std::__shared_weak_count *))v109->__on_zero_shared)(v109);
        std::__shared_weak_count::__release_weak(v109);
      }
      goto LABEL_163;
    }
LABEL_188:
    v132 = *(_QWORD *)(a1 + 408);
    v133 = *(_QWORD *)(a1 + 416);
    v134 = v132 + 16 * v106;
    v135 = v134 + 16;
    if (v134 + 16 != v133)
    {
      v136 = v132 + 16 * v106;
      v134 = v132 + v105;
      do
      {
        std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100](v136, (__int128 *)(v136 + 16));
        v134 += 16;
        v137 = v136 + 32;
        v136 += 16;
      }
      while (v137 != v133);
      v135 = *(_QWORD *)(a1 + 416);
    }
    while (v135 != v134)
      v135 = std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](v135 - 16);
    *(_QWORD *)(a1 + 416) = v134;
    if (v109)
    {
      v138 = (unint64_t *)&v109->__shared_owners_;
      do
        v139 = __ldaxr(v138);
      while (__stlxr(v139 - 1, v138));
      if (!v139)
      {
        ((void (*)(std::__shared_weak_count *))v109->__on_zero_shared)(v109);
        std::__shared_weak_count::__release_weak(v109);
      }
    }
LABEL_199:
    v114 = (_QWORD **)(a1 + 408);
    std::vector<std::shared_ptr<quasar::FeatureExtractor>>::push_back[abi:ne180100]((char **)(a1 + 408), &v161);
    v113 = 1;
    *(_BYTE *)(a1 + 432) = 1;
    *(_BYTE *)(a1 + 528) = 0;
    a3 = v103;
    v9 = v102;
    a2 = v101;
    v87 = (std::mutex *)(a1 + 440);
LABEL_200:
    quasar::SpeechRequestData::makeSpeechRequestData((uint64_t *)v9, v114, v113 != 0, &v190);
    std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100]((uint64_t)v9, &v190);
    v140 = (std::__shared_weak_count *)*((_QWORD *)&v190 + 1);
    if (*((_QWORD *)&v190 + 1))
    {
      v141 = (unint64_t *)(*((_QWORD *)&v190 + 1) + 8);
      do
        v142 = __ldaxr(v141);
      while (__stlxr(v142 - 1, v141));
      if (!v142)
      {
        ((void (*)(std::__shared_weak_count *))v140->__on_zero_shared)(v140);
        std::__shared_weak_count::__release_weak(v140);
      }
    }
    *(_BYTE *)(a1 + 432) = 0;
    std::mutex::unlock(v87);
    v143 = (std::__shared_weak_count *)*((_QWORD *)&v161 + 1);
    if (*((_QWORD *)&v161 + 1))
    {
      v144 = (unint64_t *)(*((_QWORD *)&v161 + 1) + 8);
      do
        v145 = __ldaxr(v144);
      while (__stlxr(v145 - 1, v144));
      if (!v145)
      {
        ((void (*)(std::__shared_weak_count *))v143->__on_zero_shared)(v143);
        std::__shared_weak_count::__release_weak(v143);
      }
    }
    quasar::SymbolTableList::clear(*a2);
    if (quasar::gLogLevel >= 5)
    {
      v205 = 0u;
      v206 = 0u;
      v203 = 0u;
      v204 = 0u;
      v201 = 0u;
      v202 = 0u;
      v199 = 0u;
      v200 = 0u;
      v197 = 0u;
      v198 = 0u;
      v195 = 0u;
      v196 = 0u;
      v193 = 0u;
      v194 = 0u;
      v191 = 0u;
      v192 = 0u;
      v190 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v190);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v190, (uint64_t)"Pause/Resume: processedUtteranceEndedAfterPause: ", 49);
      std::ostream::operator<<();
      quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&v190);
    }
    HIBYTE(v189) = 0;
    if (HIBYTE(v188))
    {
      LOBYTE(v189) = 1;
      v146 = quasar::gLogLevel;
      if (quasar::gLogLevel > 4)
      {
        v205 = 0u;
        v206 = 0u;
        v203 = 0u;
        v204 = 0u;
        v201 = 0u;
        v202 = 0u;
        v199 = 0u;
        v200 = 0u;
        v197 = 0u;
        v198 = 0u;
        v195 = 0u;
        v196 = 0u;
        v193 = 0u;
        v194 = 0u;
        v191 = 0u;
        v192 = 0u;
        v190 = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v190);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v190, (uint64_t)"Pause/Resume: Utterance generated after pause call", 50);
        quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&v190);
        goto LABEL_219;
      }
    }
    else
    {
      if ((_BYTE)v188)
      {
        if (quasar::gLogLevel >= 5)
        {
          v205 = 0u;
          v206 = 0u;
          v203 = 0u;
          v204 = 0u;
          v201 = 0u;
          v202 = 0u;
          v199 = 0u;
          v200 = 0u;
          v197 = 0u;
          v198 = 0u;
          v195 = 0u;
          v196 = 0u;
          v193 = 0u;
          v194 = 0u;
          v191 = 0u;
          v192 = 0u;
          v190 = 0u;
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v190);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v190, (uint64_t)"Pause/Resume: Utterance generated after resume call", 51);
          quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&v190);
        }
        v189 = 256;
      }
LABEL_219:
      v146 = quasar::gLogLevel;
    }
    v188 = 0;
    if (v146 >= 4)
    {
      v205 = 0u;
      v206 = 0u;
      v203 = 0u;
      v204 = 0u;
      v201 = 0u;
      v202 = 0u;
      v199 = 0u;
      v200 = 0u;
      v197 = 0u;
      v198 = 0u;
      v195 = 0u;
      v196 = 0u;
      v193 = 0u;
      v194 = 0u;
      v191 = 0u;
      v192 = 0u;
      v190 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v190);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v190, (uint64_t)"Start recognition of a new utterance...", 39);
      quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&v190);
    }
    v100 = 1;
LABEL_223:
    v147 = *(_QWORD **)(__p.__r_.__value_.__l.__size_ + 80);
    v148 = *(_QWORD **)(__p.__r_.__value_.__l.__size_ + 88);
    while (v147 != v148)
    {
      (*(void (**)(_QWORD))(*(_QWORD *)*v147 + 120))(*v147);
      v147 += 2;
    }
  }
  while (v100);
  v149 = v164;
  if (v164)
  {
    v150 = (unint64_t *)&v164->__shared_owners_;
    do
      v151 = __ldaxr(v150);
    while (__stlxr(v151 - 1, v150));
    if (!v151)
    {
      ((void (*)(std::__shared_weak_count *))v149->__on_zero_shared)(v149);
      std::__shared_weak_count::__release_weak(v149);
    }
  }
  if ((char)v166 < 0)
    operator delete(v165[0]);
  v152 = v168;
  if (v168)
  {
    v153 = (unint64_t *)&v168->__shared_owners_;
    do
      v154 = __ldaxr(v153);
    while (__stlxr(v154 - 1, v153));
    if (!v154)
    {
      ((void (*)(std::__shared_weak_count *))v152->__on_zero_shared)(v152);
      std::__shared_weak_count::__release_weak(v152);
    }
  }
  v155 = v171;
  if (v171)
  {
    v156 = (unint64_t *)&v171->__shared_owners_;
    do
      v157 = __ldaxr(v156);
    while (__stlxr(v157 - 1, v156));
    if (!v157)
    {
      ((void (*)(std::__shared_weak_count *))v155->__on_zero_shared)(v155);
      std::__shared_weak_count::__release_weak(v155);
    }
  }
  *(_QWORD *)&v190 = v172;
  std::vector<quasar::AlternativeSelectionSpan::Alternative>::__destroy_vector::operator()[abi:ne180100]((void ***)&v190);
  quasar::SpeechRecognizer::RecogData::~RecogData((quasar::SpeechRecognizer::RecogData *)&__p);
}

void sub_1ADC61D68()
{
  std::mutex *v0;

  std::mutex::unlock(v0);
  JUMPOUT(0x1ADC61F0CLL);
}

void sub_1ADC61D88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,char a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  void **a69;

  a69 = (void **)&a33;
  std::vector<quasar::AlternativeSelectionSpan::Alternative>::__destroy_vector::operator()[abi:ne180100](&a69);
  quasar::SpeechRecognizer::RecogData::~RecogData((quasar::SpeechRecognizer::RecogData *)&a36);
  _Unwind_Resume(a1);
}

void sub_1ADC61D9C()
{
  JUMPOUT(0x1ADC61ED4);
}

void sub_1ADC61DB4()
{
  JUMPOUT(0x1ADC61EE4);
}

void sub_1ADC61DBC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&a29);
  JUMPOUT(0x1ADC61EECLL);
}

void sub_1ADC61DCC()
{
  JUMPOUT(0x1ADC61F04);
}

void sub_1ADC61DD4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void *__p,uint64_t a37,int a38,__int16 a39,char a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  void *a72;
  char a73;

  if (a41 < 0)
    operator delete(__p);
  if (a73 < 0)
    operator delete(a72);
  JUMPOUT(0x1ADC61F0CLL);
}

void sub_1ADC61E04()
{
  uint64_t v0;

  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](v0 - 136);
  JUMPOUT(0x1ADC61F0CLL);
}

void sub_1ADC61E44(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void **a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a69;

  a14 = (void **)&a69;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a14);
  JUMPOUT(0x1ADC61E84);
}

void sub_1ADC61E6C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::mutex *a11)
{
  std::mutex::unlock(a11);
  JUMPOUT(0x1ADC61E84);
}

void sub_1ADC61E80(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34)
{
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&a22);
  if (a29 < 0)
    operator delete(__p);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&a30);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&a34);
  JUMPOUT(0x1ADC61EF4);
}

void sub_1ADC61E90(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a72;

  quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&a72);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&a22);
  if (a29 < 0)
    operator delete(a24);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&a30);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&a34);
  JUMPOUT(0x1ADC61EF4);
}

void sub_1ADC61EA0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a72;

  quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&a72);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&a22);
  if (a29 < 0)
    operator delete(a24);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&a30);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&a34);
  JUMPOUT(0x1ADC61EF4);
}

void sub_1ADC61EB8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&a20);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&a22);
  if (a29 < 0)
    operator delete(a24);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&a30);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&a34);
  JUMPOUT(0x1ADC61EF4);
}

void std::atomic_store[abi:ne180100]<quasar::SpeechRequestResultData>(uint64_t *a1, uint64_t *a2)
{
  std::__sp_mut *sp_mut;
  uint64_t v5;
  uint64_t v6;

  sp_mut = std::__get_sp_mut(a1);
  std::__sp_mut::lock(sp_mut);
  v5 = *a1;
  *a1 = *a2;
  *a2 = v5;
  v6 = a1[1];
  a1[1] = a2[1];
  a2[1] = v6;
  std::__sp_mut::unlock(sp_mut);
}

void quasar::SpeechRecognizer::runSyncUtterance(uint64_t a1, _QWORD *a2, std::vector<std::wstring> *a3, unsigned __int8 *a4)
{
  double *v8;
  clockid_t v9;
  uint64_t v10;
  clockid_t v11;
  const void *v12;
  quasar::ResultStreamStabilizer *v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  int v17;
  _DWORD *v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  quasar::SpeechRequestData **v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  double v35;
  uint64_t v36;
  uint64_t v37;
  int EndPointerExtraDelay;
  uint64_t v39;
  const std::string *InputOrigin;
  uint64_t v41;
  _QWORD *v42;
  _BYTE *v43;
  uint64_t v44;
  _QWORD *v45;
  _QWORD *v46;
  _QWORD *v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  _QWORD *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  int v62;
  uint64_t v63;
  uint64_t v64;
  _QWORD *v65;
  _QWORD *v66;
  _QWORD *v67;
  _QWORD *v68;
  _QWORD *v69;
  uint64_t v70;
  int v71;
  uint64_t v72;
  uint64_t v73;
  _QWORD *v74;
  _QWORD *v75;
  _QWORD *v76;
  const std::locale::facet *v77;
  uint64_t v78;
  _QWORD *v79;
  _QWORD *v80;
  uint64_t v81;
  double *v82;
  clockid_t v83;
  double Seconds;
  uint64_t *v85;
  uint64_t v86;
  uint64_t *v87;
  uint64_t v88;
  int v89;
  uint64_t *v90;
  std::__shared_weak_count *v91;
  kaldi::quasar::Vocab *v92;
  unint64_t *v93;
  unint64_t v94;
  uint64_t v95;
  _QWORD *v96;
  _BYTE *v97;
  uint64_t v98;
  kaldi::quasar::Vocab **locale;
  kaldi::quasar::Vocab **v100;
  _QWORD *v101;
  _BYTE *v102;
  uint64_t v103;
  uint64_t v104;
  std::locale::__imp *v105;
  std::locale::__imp *v106;
  char *v107;
  __int128 v108;
  uint64_t v109;
  unint64_t *v110;
  unint64_t v111;
  uint64_t v112;
  unint64_t v113;
  unint64_t v114;
  char *v115;
  char *v116;
  uint64_t v117;
  quasar::MultiChainMultiAudioBuffer *v118;
  uint64_t v119;
  int v120;
  BOOL v121;
  uint64_t v122;
  int v123;
  char v125;
  std::__shared_weak_count *v126;
  unint64_t *v127;
  unint64_t v128;
  std::__shared_weak_count *v129;
  unint64_t *v130;
  unint64_t v131;
  std::__shared_weak_count *v132;
  unint64_t *v133;
  unint64_t v134;
  std::__shared_weak_count *v135;
  unint64_t *v136;
  unint64_t v137;
  uint64_t v138;
  std::__shared_weak_count *v139;
  uint64_t v140;
  unint64_t *v141;
  unint64_t v142;
  std::__shared_weak_count *v143;
  unint64_t *v144;
  unint64_t v145;
  std::__shared_weak_count *v146;
  unint64_t *v147;
  unint64_t v148;
  uint64_t v149;
  std::__shared_weak_count *v150;
  unint64_t *v151;
  unint64_t v152;
  std::__shared_weak_count *v153;
  unint64_t *v154;
  unint64_t v155;
  int v156;
  std::__shared_weak_count *v157;
  unint64_t *v158;
  unint64_t v159;
  std::__shared_weak_count *v160;
  unint64_t *v161;
  unint64_t v162;
  std::__shared_weak_count *v163;
  unint64_t *v164;
  unint64_t v165;
  std::__shared_weak_count *v166;
  unint64_t *v167;
  unint64_t v168;
  std::__shared_weak_count *v169;
  unint64_t *v170;
  unint64_t v171;
  std::__shared_weak_count *v172;
  unint64_t *v173;
  unint64_t v174;
  std::__shared_weak_count *v175;
  unint64_t *v176;
  unint64_t v177;
  std::__shared_weak_count *v178;
  unint64_t *v179;
  unint64_t v180;
  std::__shared_weak_count *v181;
  unint64_t *v182;
  unint64_t v183;
  std::__shared_weak_count *v184;
  unint64_t *v185;
  unint64_t v186;
  std::__shared_weak_count *v187;
  unint64_t *v188;
  unint64_t v189;
  uint64_t v190;
  quasar::MultiChainMultiAudioBuffer **v191;
  std::locale::__imp *v192;
  std::locale::__imp *v193;
  uint64_t v194;
  uint64_t v195;
  _QWORD *v196;
  BOOL v197;
  std::locale::__imp *v198;
  std::locale::__imp *j;
  std::__shared_weak_count *v200;
  unint64_t *v201;
  unint64_t v202;
  unint64_t *v203;
  unint64_t v204;
  uint64_t v205;
  std::__shared_weak_count *v206;
  unint64_t *v207;
  unint64_t v208;
  _QWORD *v209;
  _QWORD *v210;
  std::__shared_weak_count *v211;
  unint64_t *v212;
  unint64_t v213;
  unsigned int v214;
  BOOL v215;
  int v216;
  uint64_t v217;
  quasar::MultiChainMultiAudioBuffer *v218;
  int v219;
  int v220;
  std::locale::__imp *v221;
  std::locale::__imp *v222;
  quasar::DecoderChainOutput *v223;
  int v224;
  uint64_t v225;
  quasar::FstLmScorer *v226;
  uint64_t v227;
  uint64_t v228;
  unint64_t *v229;
  unint64_t v230;
  std::__shared_weak_count *v231;
  unint64_t *v232;
  unint64_t v233;
  quasar::DecoderChainOutput *v234;
  std::__shared_weak_count *v235;
  unint64_t *v236;
  unint64_t v237;
  unint64_t *v238;
  unint64_t v239;
  uint64_t v240;
  std::__shared_weak_count *v241;
  unint64_t *v242;
  unint64_t v243;
  _QWORD *v244;
  _QWORD *v245;
  std::__shared_weak_count *v246;
  unint64_t *v247;
  unint64_t v248;
  int v249;
  uint64_t v250;
  std::__shared_weak_count *v251;
  unint64_t *v252;
  unint64_t v253;
  uint64_t v254;
  uint64_t **v255;
  uint64_t v256;
  uint64_t v257;
  _QWORD *v258;
  _QWORD *v259;
  uint64_t IsFinal;
  uint64_t v261;
  std::__shared_weak_count *v262;
  unint64_t *v263;
  unint64_t v264;
  std::__shared_weak_count *v265;
  unint64_t *v266;
  unint64_t v267;
  unint64_t *v268;
  unint64_t v269;
  uint64_t **v270;
  uint64_t *v271;
  const quasar::Token *i;
  const quasar::Token *v273;
  quasar::SpeechRecognizer *v274;
  uint64_t v275;
  uint64_t v276;
  std::__shared_weak_count *v277;
  unint64_t *v278;
  unint64_t v279;
  int v280;
  unint64_t *v281;
  unint64_t v282;
  unint64_t *v283;
  unint64_t v284;
  int v285;
  uint64_t v286;
  uint64_t v287;
  std::__shared_weak_count *v288;
  unint64_t *v289;
  unint64_t v290;
  unint64_t *v291;
  unint64_t v292;
  uint64_t v293;
  std::__shared_weak_count *v294;
  unint64_t *v295;
  unint64_t v296;
  _QWORD *v297;
  _QWORD *v298;
  std::__shared_weak_count *v299;
  unint64_t *v300;
  unint64_t v301;
  _QWORD *v302;
  std::__shared_weak_count *v303;
  unint64_t *v304;
  unint64_t v305;
  _QWORD *v306;
  std::__shared_weak_count *v307;
  unint64_t *v308;
  unint64_t v309;
  uint64_t v310;
  std::__shared_weak_count *v311;
  unint64_t *v312;
  unint64_t v313;
  unint64_t *v314;
  unint64_t v315;
  BOOL v316;
  std::__assoc_sub_state **Location;
  std::string::size_type v318;
  uint64_t v319;
  quasar::DecoderChainOutput *v320;
  uint64_t v321;
  std::__shared_weak_count *v322;
  unint64_t *v323;
  unint64_t v324;
  std::__shared_weak_count *v325;
  unint64_t *v326;
  unint64_t v327;
  std::__shared_weak_count *v328;
  unint64_t *v329;
  unint64_t v330;
  uint64_t *v331;
  uint64_t v332;
  _BOOL4 v333;
  __int128 **v334;
  uint64_t v335;
  uint64_t v336;
  uint64_t v337;
  uint64_t v338;
  quasar::SystemConfig **v339;
  quasar::SpeechRecognizer *v340;
  __int128 v341;
  uint64_t v342[2];
  std::string v343;
  void *v344;
  char v345;
  uint64_t v346;
  void *v347;
  char v348;
  uint64_t v349;
  void *v350;
  char v351;
  void *v352;
  char v353;
  uint64_t v354;
  std::__shared_weak_count *v355;
  uint64_t v356;
  std::__shared_weak_count *v357;
  uint64_t v358[2];
  __int128 v359;
  uint64_t v360[2];
  uint64_t v361;
  std::__shared_weak_count *v362;
  uint64_t v363[2];
  uint64_t v364;
  std::__shared_weak_count *v365;
  uint64_t v366[2];
  std::string v367;
  uint64_t v368;
  std::__shared_weak_count *v369;
  quasar::DecoderChainOutput *v370;
  uint64_t v371;
  std::string v372;
  std::string v373;
  std::string v374;
  uint64_t v375;
  std::__shared_weak_count *v376;
  uint64_t v377;
  std::__shared_weak_count *v378;
  uint64_t v379;
  std::__shared_weak_count *v380;
  uint64_t v381;
  std::__shared_weak_count *v382;
  uint64_t v383;
  std::__shared_weak_count *v384;
  uint64_t v385;
  std::__shared_weak_count *v386;
  uint64_t v387;
  std::__shared_weak_count *v388;
  uint64_t v389;
  std::__shared_weak_count *v390;
  uint64_t v391;
  std::__shared_weak_count *v392;
  __int128 __p;
  __int128 v394;
  __int128 v395;
  __int128 v396;
  __int128 v397;
  __int128 v398;
  __int128 v399;
  __int128 v400;
  __int128 v401;
  __int128 v402;
  __int128 v403;
  __int128 v404;
  __int128 v405;
  __int128 v406;
  __int128 v407;
  __int128 v408;
  __int128 v409;
  unint64_t v410;
  char *v411;
  char *v412;
  unint64_t v413;
  std::locale v414;
  std::locale::__imp *v415;
  uint64_t v416;
  uint64_t v417;
  std::__shared_weak_count *v418;
  quasar::ResultStreamStabilizer *v419;
  std::__shared_weak_count *v420;
  std::string *v421;
  char v422;
  _BYTE v423[24];
  _BYTE *v424;
  _BYTE v425[32];
  __int128 v426;
  __int128 v427;
  __int128 v428;
  __int128 v429;
  __int128 v430;
  __int128 v431;
  __int128 v432;
  __int128 v433;
  __int128 v434;
  __int128 v435;
  __int128 v436;
  __int128 v437;
  __int128 v438;
  __int128 v439;
  __int128 v440;
  std::string v441;
  uint64_t v442;

  v442 = *MEMORY[0x1E0C80C00];
  if (!*(_DWORD *)(a1 + 128))
  {
    v408 = 0u;
    v409 = 0u;
    v406 = 0u;
    v407 = 0u;
    v404 = 0u;
    v405 = 0u;
    v402 = 0u;
    v403 = 0u;
    v400 = 0u;
    v401 = 0u;
    v398 = 0u;
    v399 = 0u;
    v396 = 0u;
    v397 = 0u;
    v394 = 0u;
    v395 = 0u;
    __p = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(&__p, "SpeechRecognizer must be initialized before calling runSync()");
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&__p);
  }
  if (*(_QWORD *)*a2 != *(_QWORD *)(*a2 + 8))
  {
    v408 = 0u;
    v409 = 0u;
    v406 = 0u;
    v407 = 0u;
    v404 = 0u;
    v405 = 0u;
    v402 = 0u;
    v403 = 0u;
    v400 = 0u;
    v401 = 0u;
    v398 = 0u;
    v399 = 0u;
    v396 = 0u;
    v397 = 0u;
    v394 = 0u;
    v395 = 0u;
    __p = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(&__p, "Symbol table list passed to runSyncUtterance() must start empty");
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&__p);
  }
  v8 = *(double **)(*(_QWORD *)(a1 + 280) + 200);
  *(double *)(a1 + 344) = kaldi::Timer::GetSeconds((kaldi::Timer *)5, (clockid_t)a2) - *v8;
  *(double *)(a1 + 352) = kaldi::Timer::ElapsedCPU(*(kaldi::Timer **)(*(_QWORD *)(a1 + 280) + 200), v9);
  v10 = *(_QWORD *)(*(_QWORD *)(a1 + 280) + 200);
  *(double *)(a1 + 360) = kaldi::Timer::GetSeconds((kaldi::Timer *)0x10, v11) - *(double *)(v10 + 16);
  v12 = (const void *)*((_QWORD *)a4 + 30);
  if (v12
  {
    v14 = (std::__shared_weak_count *)*((_QWORD *)a4 + 31);
    v419 = v13;
    v420 = v14;
    if (v14)
    {
      p_shared_owners = (unint64_t *)&v14->__shared_owners_;
      do
        v16 = __ldxr(p_shared_owners);
      while (__stxr(v16 + 1, p_shared_owners));
    }
    quasar::ResultStreamStabilizer::prepareForNextUtterance(v13);
  }
  else
  {
    v420 = 0;
    v419 = 0;
  }
  v17 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*((_QWORD *)a4 + 10) + 16) + 24))(*(_QWORD *)(*((_QWORD *)a4 + 10) + 16));
  v18 = *(_DWORD **)(a1 + 280);
  v18[1] = *((_DWORD *)a4 + 50);
  v19 = *((_DWORD *)a4 + 51);
  v18[2] = v19;
  v18[3] = v19 * v17;
  *v18 = 1000 * *(_DWORD *)(a1 + 300);
  v20 = *(_QWORD *)(a1 + 648);
  std::string::basic_string[abi:ne180100]<0>(&__p, "uttNum");
  std::to_string((std::string *)v425, *((_DWORD *)a4 + 50));
  quasar::SpeechRequestResultData::addDump(v20, &__p, (const std::string *)v425);
  if ((v425[23] & 0x80000000) != 0)
    operator delete(*(void **)v425);
  if (SBYTE7(v394) < 0)
    operator delete((void *)__p);
  v21 = *(_QWORD *)(a1 + 648);
  std::string::basic_string[abi:ne180100]<0>(&__p, "jsonConfigFilePath");
  quasar::SpeechRequestResultData::addDump(v21, &__p, (const std::string *)(a1 + 80));
  if (SBYTE7(v394) < 0)
    operator delete((void *)__p);
  v22 = *(_QWORD *)(a1 + 648);
  std::string::basic_string[abi:ne180100]<0>(&__p, "modelVersion");
  v339 = (quasar::SystemConfig **)(a1 + 48);
  quasar::SystemConfig::getMainModelVersion(*(quasar::SystemConfig **)(a1 + 48), (std::string *)v425);
  quasar::SpeechRequestResultData::addDump(v22, &__p, (const std::string *)v425);
  if ((v425[23] & 0x80000000) != 0)
    operator delete(*(void **)v425);
  if (SBYTE7(v394) < 0)
    operator delete((void *)__p);
  v23 = *(_QWORD *)(a1 + 648);
  std::string::basic_string[abi:ne180100]<0>(&__p, "userId");
  v24 = (quasar::SpeechRequestData **)(a1 + 280);
  quasar::SpeechRequestResultData::addDump(v23, &__p, (const std::string *)(*(_QWORD *)(*(_QWORD *)(a1 + 280) + 24) + 104));
  if (SBYTE7(v394) < 0)
    operator delete((void *)__p);
  v25 = *(_QWORD *)(a1 + 648);
  std::string::basic_string[abi:ne180100]<0>(&__p, "sessionId");
  quasar::SpeechRequestResultData::addDump(v25, &__p, (const std::string *)(*((_QWORD *)*v24 + 3) + 128));
  if (SBYTE7(v394) < 0)
    operator delete((void *)__p);
  v26 = *(_QWORD *)(a1 + 648);
  std::string::basic_string[abi:ne180100]<0>(&__p, "taskType");
  quasar::SpeechRequestResultData::addDump(v26, &__p, (const std::string *)(*((_QWORD *)*v24 + 3) + 80));
  if (SBYTE7(v394) < 0)
    operator delete((void *)__p);
  v27 = *(_QWORD *)(a1 + 648);
  std::string::basic_string[abi:ne180100]<0>(&__p, "deviceId");
  quasar::SpeechRequestResultData::addDump(v27, &__p, (const std::string *)(*((_QWORD *)*v24 + 3) + 152));
  if (SBYTE7(v394) < 0)
    operator delete((void *)__p);
  v28 = *(_QWORD *)(a1 + 648);
  std::string::basic_string[abi:ne180100]<0>(&__p, "recognizerComponents");
  quasar::SpeechRequestResultData::addDump(v28, &__p, (const std::string *)(*((_QWORD *)a4 + 1) + 104));
  if (SBYTE7(v394) < 0)
    operator delete((void *)__p);
  v29 = *(_QWORD *)(a1 + 648);
  std::string::basic_string[abi:ne180100]<0>(&__p, "farField");
  std::to_string((std::string *)v425, *(unsigned __int8 *)(*((_QWORD *)*v24 + 3) + 34));
  quasar::SpeechRequestResultData::addDump(v29, &__p, (const std::string *)v425);
  if ((v425[23] & 0x80000000) != 0)
    operator delete(*(void **)v425);
  if (SBYTE7(v394) < 0)
    operator delete((void *)__p);
  v30 = *(_QWORD *)(a1 + 648);
  std::string::basic_string[abi:ne180100]<0>(&__p, "bluetoothDeviceId");
  quasar::SpeechRequestResultData::addDumpAA(v30, &__p, (const std::string *)(*((_QWORD *)*v24 + 3) + 200));
  if (SBYTE7(v394) < 0)
    operator delete((void *)__p);
  v31 = *(_QWORD *)(a1 + 648);
  std::string::basic_string[abi:ne180100]<0>(&__p, "atypicalSpeech");
  std::to_string((std::string *)v425, *(unsigned __int8 *)(*((_QWORD *)*v24 + 3) + 739));
  quasar::SpeechRequestResultData::addDumpAA(v31, &__p, (const std::string *)v425);
  if ((v425[23] & 0x80000000) != 0)
    operator delete(*(void **)v425);
  if (SBYTE7(v394) < 0)
    operator delete((void *)__p);
  v32 = *(_QWORD *)(a1 + 648);
  std::string::basic_string[abi:ne180100]<0>(&__p, "enableWhisperDetection");
  std::to_string((std::string *)v425, *(unsigned __int8 *)(*((_QWORD *)*v24 + 3) + 35));
  quasar::SpeechRequestResultData::addDump(v32, &__p, (const std::string *)v425);
  if ((v425[23] & 0x80000000) != 0)
    operator delete(*(void **)v425);
  if (SBYTE7(v394) < 0)
    operator delete((void *)__p);
  v33 = *(_QWORD *)(a1 + 648);
  std::string::basic_string[abi:ne180100]<0>(&__p, "numLmeDataStreams");
  quasar::SpeechRequestResultData::addDumpAA(v33, &__p, 1, (double)(unint64_t)((uint64_t)(*((_QWORD *)*v24 + 21) - *((_QWORD *)*v24 + 20)) >> 4));
  if (SBYTE7(v394) < 0)
    operator delete((void *)__p);
  v34 = *(_QWORD *)(a1 + 648);
  std::string::basic_string[abi:ne180100]<0>(&__p, "utteranceDetection");
  v35 = 0.0;
  if (*(_BYTE *)(*((_QWORD *)*v24 + 3) + 36))
    v35 = 1.0;
  quasar::SpeechRequestResultData::addDumpAA(v34, &__p, 1, v35);
  if (SBYTE7(v394) < 0)
    operator delete((void *)__p);
  v36 = *(_QWORD *)(a1 + 648);
  std::string::basic_string[abi:ne180100]<0>(&__p, "utteranceConcatenation");
  std::to_string((std::string *)v425, *(unsigned __int8 *)(*((_QWORD *)*v24 + 3) + 37));
  quasar::SpeechRequestResultData::addDump(v36, &__p, (const std::string *)v425);
  if ((v425[23] & 0x80000000) != 0)
    operator delete(*(void **)v425);
  if (SBYTE7(v394) < 0)
    operator delete((void *)__p);
  v37 = *(_QWORD *)(a1 + 648);
  std::string::basic_string[abi:ne180100]<0>(&__p, "epExtraDelay");
  EndPointerExtraDelay = quasar::SpeechRequestData::getEndPointerExtraDelay(*v24);
  std::to_string((std::string *)v425, EndPointerExtraDelay);
  quasar::SpeechRequestResultData::addDump(v37, &__p, (const std::string *)v425);
  if ((v425[23] & 0x80000000) != 0)
    operator delete(*(void **)v425);
  if (SBYTE7(v394) < 0)
    operator delete((void *)__p);
  v39 = *(_QWORD *)(a1 + 648);
  std::string::basic_string[abi:ne180100]<0>(&__p, "InputOrigin");
  InputOrigin = (const std::string *)quasar::SpeechRequestData::getInputOrigin(*v24);
  quasar::SpeechRequestResultData::addDumpAA(v39, &__p, InputOrigin);
  if (SBYTE7(v394) < 0)
    operator delete((void *)__p);
  v41 = *(_QWORD *)(a1 + 648);
  std::string::basic_string[abi:ne180100]<0>(&__p, "highPriority");
  std::to_string((std::string *)v425, *(unsigned __int8 *)(*((_QWORD *)*v24 + 3) + 51));
  quasar::SpeechRequestResultData::addDump(v41, &__p, (const std::string *)v425);
  if ((v425[23] & 0x80000000) != 0)
    operator delete(*(void **)v425);
  if (SBYTE7(v394) < 0)
    operator delete((void *)__p);
  if (quasar::gLogLevel >= 4)
  {
    v408 = 0u;
    v409 = 0u;
    v406 = 0u;
    v407 = 0u;
    v404 = 0u;
    v405 = 0u;
    v402 = 0u;
    v403 = 0u;
    v400 = 0u;
    v401 = 0u;
    v398 = 0u;
    v399 = 0u;
    v396 = 0u;
    v397 = 0u;
    v394 = 0u;
    v395 = 0u;
    __p = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
    v42 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"modelVersion=", 13);
    quasar::SystemConfig::getMainModelVersion(*v339, (std::string *)v425);
    if (v425[23] >= 0)
      v43 = v425;
    else
      v43 = *(_BYTE **)v425;
    if (v425[23] >= 0)
      v44 = v425[23];
    else
      v44 = *(_QWORD *)&v425[8];
    v45 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v42, (uint64_t)v43, v44);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v45, (uint64_t)" LME DataStreams=", 17);
    v46 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v46, (uint64_t)" samplingRate=", 14);
    v47 = (_QWORD *)std::ostream::operator<<();
    v48 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v47, (uint64_t)" taskType=", 10);
    v49 = *((_QWORD *)*v24 + 3);
    v52 = *(_QWORD *)(v49 + 80);
    v50 = v49 + 80;
    v51 = v52;
    v53 = *(char *)(v50 + 23);
    if (v53 >= 0)
      v54 = v50;
    else
      v54 = v51;
    if (v53 >= 0)
      v55 = *(unsigned __int8 *)(v50 + 23);
    else
      v55 = *(_QWORD *)(v50 + 8);
    v56 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v48, v54, v55);
    v57 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v56, (uint64_t)" deviceId=", 10);
    v58 = *((_QWORD *)*v24 + 3);
    v61 = *(_QWORD *)(v58 + 152);
    v59 = v58 + 152;
    v60 = v61;
    v62 = *(char *)(v59 + 23);
    if (v62 >= 0)
      v63 = v59;
    else
      v63 = v60;
    if (v62 >= 0)
      v64 = *(unsigned __int8 *)(v59 + 23);
    else
      v64 = *(_QWORD *)(v59 + 8);
    v65 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v57, v63, v64);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v65, (uint64_t)" farField=", 10);
    v66 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v66, (uint64_t)" enableWhisperDetection=", 24);
    v67 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v67, (uint64_t)" endpointerExtraDelay=", 22);
    quasar::SpeechRequestData::getEndPointerExtraDelay(*v24);
    v68 = (_QWORD *)std::ostream::operator<<();
    v69 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v68, (uint64_t)" inputOrigin=", 13);
    v70 = quasar::SpeechRequestData::getInputOrigin(*v24);
    v71 = *(char *)(v70 + 23);
    if (v71 >= 0)
      v72 = v70;
    else
      v72 = *(_QWORD *)v70;
    if (v71 >= 0)
      v73 = *(unsigned __int8 *)(v70 + 23);
    else
      v73 = *(_QWORD *)(v70 + 8);
    v74 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v69, v72, v73);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v74, (uint64_t)" highPriority=", 14);
    v75 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v75, (uint64_t)" utteranceStartMillis=", 22);
    v76 = (_QWORD *)std::ostream::operator<<();
    std::ios_base::getloc((const std::ios_base *)((char *)v76 + *(_QWORD *)(*v76 - 24)));
    v77 = std::locale::use_facet(&v414, MEMORY[0x1E0DE4A90]);
    ((void (*)(const std::locale::facet *, uint64_t))v77->__vftable[2].~facet_0)(v77, 10);
    std::locale::~locale(&v414);
    std::ostream::put();
    std::ostream::flush();
    if ((v425[23] & 0x80000000) != 0)
      operator delete(*(void **)v425);
    quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&__p);
  }
  v78 = *((_QWORD *)*v24 + 3);
  if ((*(char *)(v78 + 199) & 0x80000000) == 0)
  {
    if (!*(_BYTE *)(v78 + 199))
      goto LABEL_98;
LABEL_96:
    if (quasar::gLogLevel >= 4)
    {
      v408 = 0u;
      v409 = 0u;
      v406 = 0u;
      v407 = 0u;
      v404 = 0u;
      v405 = 0u;
      v402 = 0u;
      v403 = 0u;
      v400 = 0u;
      v401 = 0u;
      v398 = 0u;
      v399 = 0u;
      v396 = 0u;
      v397 = 0u;
      v394 = 0u;
      v395 = 0u;
      __p = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
      v79 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"You have provided a reference transcript, which will trigger error-blaming (if specified in ", 92);
      v80 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v79, (uint64_t)"the config file). This is an EXPERIMENTAL feature that uses lots of memory and incurs lots of ", 94);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v80, (uint64_t)"latency!", 8);
      quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&__p);
    }
    goto LABEL_98;
  }
  if (*(_QWORD *)(v78 + 184))
    goto LABEL_96;
LABEL_98:
  v81 = *(_QWORD *)(a1 + 648);
  std::string::basic_string[abi:ne180100]<0>(&__p, "runSync:initTime");
  v82 = (double *)*((_QWORD *)*v24 + 25);
  Seconds = kaldi::Timer::GetSeconds((kaldi::Timer *)5, v83);
  std::to_string((std::string *)v425, Seconds - *v82 - *(double *)(a1 + 344));
  quasar::SpeechRequestResultData::addDump(v81, &__p, (const std::string *)v425);
  if ((v425[23] & 0x80000000) != 0)
    operator delete(*(void **)v425);
  v340 = (quasar::SpeechRecognizer *)a1;
  if (SBYTE7(v394) < 0)
    operator delete((void *)__p);
  v85 = *(uint64_t **)(*((_QWORD *)a4 + 1) + 88);
  v86 = -(uint64_t)v85;
  while (1)
  {
    v87 = v85;
    v88 = v86;
    if (v85 == *(uint64_t **)(*((_QWORD *)a4 + 1) + 80))
      break;
    v85 -= 2;
    v89 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*(v87 - 2) + 72))(*(v87 - 2));
    v86 = v88 + 16;
    if (v89)
    {
      v90 = *(uint64_t **)(*((_QWORD *)a4 + 1) + 80);
      goto LABEL_107;
    }
  }
  v90 = v85;
LABEL_107:
  if (v87 == v90)
  {
    v408 = 0u;
    v409 = 0u;
    v406 = 0u;
    v407 = 0u;
    v404 = 0u;
    v405 = 0u;
    v402 = 0u;
    v403 = 0u;
    v400 = 0u;
    v401 = 0u;
    v398 = 0u;
    v399 = 0u;
    v396 = 0u;
    v397 = 0u;
    v394 = 0u;
    v395 = 0u;
    __p = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"There is no decoder which affects recognition, this must be a configuration error.", 82);
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&__p);
  }
  v92 = (kaldi::quasar::Vocab *)*v90;
  v91 = (std::__shared_weak_count *)v90[1];
  v417 = *v90;
  v418 = v91;
  if (v91)
  {
    v93 = (unint64_t *)&v91->__shared_owners_;
    do
      v94 = __ldxr(v93);
    while (__stxr(v94 + 1, v93));
    v90 = *(uint64_t **)(*((_QWORD *)a4 + 1) + 80);
  }
  v415 = 0;
  v414.__locale_ = 0;
  v416 = 0;
  std::vector<std::shared_ptr<quasar::Decoder>>::__init_with_size[abi:ne180100]<std::__wrap_iter<std::shared_ptr<quasar::Decoder> const*>,std::__wrap_iter<std::shared_ptr<quasar::Decoder> const*>>((char *)&v414, v90 + 2, (_QWORD *)-v88, (-16 - (uint64_t)v90 - v88) >> 4);
  v95 = *((_QWORD *)v340 + 81);
  std::string::basic_string[abi:ne180100]<0>(&__p, "eagerRequested");
  std::to_string((std::string *)v425, *(unsigned __int8 *)(*((_QWORD *)*v24 + 3) + 48));
  quasar::SpeechRequestResultData::addDump(v95, &__p, (const std::string *)v425);
  if ((v425[23] & 0x80000000) != 0)
    operator delete(*(void **)v425);
  if (SBYTE7(v394) < 0)
    operator delete((void *)__p);
  if (*(_BYTE *)(*((_QWORD *)*v24 + 3) + 48))
  {
    if (((*(uint64_t (**)(kaldi::quasar::Vocab *))(*(_QWORD *)v92 + 80))(v92) & 1) != 0)
    {
      if (!*(_BYTE *)(*((_QWORD *)*v24 + 3) + 48)
        || !(*(unsigned int (**)(kaldi::quasar::Vocab *))(*(_QWORD *)v92 + 88))(v92)
        || ((*(uint64_t (**)(_QWORD))(**((_QWORD **)a4 + 12) + 56))(*((_QWORD *)a4 + 12)) & 1) != 0)
      {
        goto LABEL_139;
      }
      if (quasar::gLogLevel < 4)
        goto LABEL_138;
      v408 = 0u;
      v409 = 0u;
      v406 = 0u;
      v407 = 0u;
      v404 = 0u;
      v405 = 0u;
      v402 = 0u;
      v403 = 0u;
      v400 = 0u;
      v401 = 0u;
      v398 = 0u;
      v399 = 0u;
      v396 = 0u;
      v397 = 0u;
      v394 = 0u;
      v395 = 0u;
      __p = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
      v96 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Eager disabled: silence posterior required but not available: ", 62);
      kaldi::quasar::Vocab::OOvWord(v92, (std::string *)v425);
      if (v425[23] >= 0)
        v97 = v425;
      else
        v97 = *(_BYTE **)v425;
      if (v425[23] >= 0)
        v98 = v425[23];
      else
        v98 = *(_QWORD *)&v425[8];
    }
    else
    {
      if (quasar::gLogLevel < 4)
      {
LABEL_138:
        *(_BYTE *)(*((_QWORD *)*v24 + 3) + 48) = 0;
        goto LABEL_139;
      }
      v408 = 0u;
      v409 = 0u;
      v406 = 0u;
      v407 = 0u;
      v404 = 0u;
      v405 = 0u;
      v402 = 0u;
      v403 = 0u;
      v400 = 0u;
      v401 = 0u;
      v398 = 0u;
      v399 = 0u;
      v396 = 0u;
      v397 = 0u;
      v394 = 0u;
      v395 = 0u;
      __p = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
      v96 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Eager disabled: not supported by first-pass decoder: ", 53);
      kaldi::quasar::Vocab::OOvWord(v92, (std::string *)v425);
      if (v425[23] >= 0)
        v97 = v425;
      else
        v97 = *(_BYTE **)v425;
      if (v425[23] >= 0)
        v98 = v425[23];
      else
        v98 = *(_QWORD *)&v425[8];
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v96, (uint64_t)v97, v98);
    if ((v425[23] & 0x80000000) != 0)
      operator delete(*(void **)v425);
    quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&__p);
    goto LABEL_138;
  }
LABEL_139:
  locale = (kaldi::quasar::Vocab **)v414.__locale_;
  v100 = (kaldi::quasar::Vocab **)v415;
  while (locale != v100)
  {
    if (*(_BYTE *)(*((_QWORD *)*v24 + 3) + 48)
      && ((*(uint64_t (**)(kaldi::quasar::Vocab *))(*(_QWORD *)*locale + 80))(*locale) & 1) == 0)
    {
      if (quasar::gLogLevel >= 4)
      {
        v408 = 0u;
        v409 = 0u;
        v406 = 0u;
        v407 = 0u;
        v404 = 0u;
        v405 = 0u;
        v402 = 0u;
        v403 = 0u;
        v400 = 0u;
        v401 = 0u;
        v398 = 0u;
        v399 = 0u;
        v396 = 0u;
        v397 = 0u;
        v394 = 0u;
        v395 = 0u;
        __p = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
        v101 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Eager disabled: not supported by second-pass decoder: ", 54);
        kaldi::quasar::Vocab::OOvWord(*locale, (std::string *)v425);
        if (v425[23] >= 0)
          v102 = v425;
        else
          v102 = *(_BYTE **)v425;
        if (v425[23] >= 0)
          v103 = v425[23];
        else
          v103 = *(_QWORD *)&v425[8];
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v101, (uint64_t)v102, v103);
        if ((v425[23] & 0x80000000) != 0)
          operator delete(*(void **)v425);
        quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&__p);
      }
      *(_BYTE *)(*((_QWORD *)*v24 + 3) + 48) = 0;
      break;
    }
    locale += 2;
  }
  v104 = *((_QWORD *)v340 + 81);
  std::string::basic_string[abi:ne180100]<0>(&__p, "eagerUsed");
  std::to_string((std::string *)v425, *(unsigned __int8 *)(*((_QWORD *)*v24 + 3) + 48));
  quasar::SpeechRequestResultData::addDump(v104, &__p, (const std::string *)v425);
  if ((v425[23] & 0x80000000) != 0)
    operator delete(*(void **)v425);
  if (SBYTE7(v394) < 0)
    operator delete((void *)__p);
  *(_BYTE *)(*((_QWORD *)v340 + 81) + 116) = *(_BYTE *)(*(_QWORD *)(*((_QWORD *)v340 + 35) + 24) + 48);
  v412 = 0;
  v411 = 0;
  v413 = 0;
  v105 = v414.__locale_;
  v106 = v415;
  if (v414.__locale_ != v415)
  {
    v107 = 0;
    do
    {
      v108 = *(_OWORD *)v105;
      v109 = *((_QWORD *)v105 + 1);
      if (v109)
      {
        v110 = (unint64_t *)(v109 + 16);
        do
          v111 = __ldxr(v110);
        while (__stxr(v111 + 1, v110));
      }
      if ((unint64_t)v107 >= v413)
      {
        v341 = v108;
        v112 = (v107 - v411) >> 4;
        if ((unint64_t)(v112 + 1) >> 60)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v113 = (uint64_t)(v413 - (_QWORD)v411) >> 3;
        if (v113 <= v112 + 1)
          v113 = v112 + 1;
        if (v413 - (unint64_t)v411 >= 0x7FFFFFFFFFFFFFF0)
          v114 = 0xFFFFFFFFFFFFFFFLL;
        else
          v114 = v113;
        *(_QWORD *)&v395 = &v413;
        v115 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<int,unsigned long>>>((uint64_t)&v413, v114);
        v116 = &v115[16 * v112];
        *(_QWORD *)&__p = v115;
        *((_QWORD *)&__p + 1) = v116;
        *((_QWORD *)&v394 + 1) = &v115[16 * v117];
        *(_OWORD *)v116 = v341;
        *(_QWORD *)&v394 = v116 + 16;
        std::vector<std::weak_ptr<quasar::Decoder>>::__swap_out_circular_buffer((uint64_t *)&v411, &__p);
        v107 = v412;
        std::__split_buffer<std::weak_ptr<quasar::Decoder>>::~__split_buffer((void **)&__p);
      }
      else
      {
        *(_QWORD *)v107 = v108;
        *((_QWORD *)v107 + 1) = v109;
        v107 += 16;
      }
      v412 = v107;
      v105 = (std::locale::__imp *)((char *)v105 + 16);
    }
    while (v105 != v106);
  }
  v118 = (quasar::MultiChainMultiAudioBuffer *)*((_QWORD *)v340 + 33);
  if (v118 && *((_DWORD *)a4 + 50))
    quasar::MultiChainMultiAudioBuffer::synchronizeSecondaryBuffersToPrimary(v118);
  v119 = quasar::SpeechRequestData::getInputOrigin(*v24);
  v120 = *(char *)(v119 + 23);
  if (v120 < 0)
  {
    if (*(_QWORD *)(v119 + 8) != 12)
      goto LABEL_186;
    v119 = *(_QWORD *)v119;
  }
  else if (v120 != 12)
  {
    goto LABEL_186;
  }
  v121 = *(_QWORD *)v119 == 0x6972546563696F56 && *(_DWORD *)(v119 + 8) == 1919248231;
  if (v121)
  {
    v125 = 1;
    goto LABEL_199;
  }
LABEL_186:
  v122 = quasar::SpeechRequestData::getInputOrigin(*v24);
  v123 = *(char *)(v122 + 23);
  if (v123 < 0)
  {
    if (*(_QWORD *)(v122 + 8) != 12)
    {
LABEL_197:
      v125 = 0;
      goto LABEL_199;
    }
    v122 = *(_QWORD *)v122;
  }
  else if (v123 != 12)
  {
    goto LABEL_197;
  }
  v125 = *(_QWORD *)v122 == 0x536F546573696152 && *(_DWORD *)(v122 + 8) == 1801545072;
LABEL_199:
  v126 = (std::__shared_weak_count *)*((_QWORD *)a4 + 7);
  v391 = *((_QWORD *)a4 + 6);
  v392 = v126;
  if (v126)
  {
    v127 = (unint64_t *)&v126->__shared_owners_;
    do
      v128 = __ldxr(v127);
    while (__stxr(v128 + 1, v127));
  }
  v129 = (std::__shared_weak_count *)*((_QWORD *)a4 + 9);
  v389 = *((_QWORD *)a4 + 8);
  v390 = v129;
  if (v129)
  {
    v130 = (unint64_t *)&v129->__shared_owners_;
    do
      v131 = __ldxr(v130);
    while (__stxr(v131 + 1, v130));
  }
  v132 = (std::__shared_weak_count *)*((_QWORD *)a4 + 11);
  v387 = *((_QWORD *)a4 + 10);
  v388 = v132;
  if (v132)
  {
    v133 = (unint64_t *)&v132->__shared_owners_;
    do
      v134 = __ldxr(v133);
    while (__stxr(v134 + 1, v133));
  }
  v135 = (std::__shared_weak_count *)*((_QWORD *)a4 + 13);
  v385 = *((_QWORD *)a4 + 12);
  v386 = v135;
  if (v135)
  {
    v136 = (unint64_t *)&v135->__shared_owners_;
    do
      v137 = __ldxr(v136);
    while (__stxr(v137 + 1, v136));
  }
  v138 = *((_QWORD *)a4 + 1);
  v140 = *(_QWORD *)(v138 + 64);
  v139 = *(std::__shared_weak_count **)(v138 + 72);
  v383 = v140;
  v384 = v139;
  if (v139)
  {
    v141 = (unint64_t *)&v139->__shared_owners_;
    do
      v142 = __ldxr(v141);
    while (__stxr(v142 + 1, v141));
  }
  v143 = (std::__shared_weak_count *)*((_QWORD *)a4 + 15);
  v381 = *((_QWORD *)a4 + 14);
  v382 = v143;
  if (v143)
  {
    v144 = (unint64_t *)&v143->__shared_owners_;
    do
      v145 = __ldxr(v144);
    while (__stxr(v145 + 1, v144));
  }
  v146 = (std::__shared_weak_count *)*((_QWORD *)v340 + 80);
  v379 = *((_QWORD *)v340 + 79);
  v380 = v146;
  if (v146)
  {
    v147 = (unint64_t *)&v146->__shared_owners_;
    do
      v148 = __ldxr(v147);
    while (__stxr(v148 + 1, v147));
  }
  v149 = *((_QWORD *)*v24 + 3);
  v150 = (std::__shared_weak_count *)*((_QWORD *)a4 + 17);
  v377 = *((_QWORD *)a4 + 16);
  v378 = v150;
  if (v150)
  {
    v151 = (unint64_t *)&v150->__shared_owners_;
    do
      v152 = __ldxr(v151);
    while (__stxr(v152 + 1, v151));
  }
  v153 = (std::__shared_weak_count *)*((_QWORD *)v340 + 78);
  v375 = *((_QWORD *)v340 + 77);
  v376 = v153;
  if (v153)
  {
    v154 = (unint64_t *)&v153->__shared_owners_;
    do
      v155 = __ldxr(v154);
    while (__stxr(v155 + 1, v154));
  }
  v156 = a4[258];
  quasar::SpeechRequestData::getLeftContext(*v24, &v374);
  quasar::SpeechRequestData::getLeftContextForItn(*v24, &v373);
  quasar::SpeechRequestData::getRightContextForItn(*v24, &v372);
  quasar::DecoderPassData::DecoderPassData((uint64_t)&__p, &v391, &v389, &v387, &v385, &v383, &v381, 1, 1, (_QWORD **)&v411, &v379, v149 + 56, &v377, &v375, 4, v156 != 0, (__int128 **)&v374, (__int128 **)&v373, (__int128 **)&v372,
    a4[259],
    v125,
    (uint64_t **)(*((_QWORD *)*v339 + 193) + 24));
  *(_QWORD *)v425 = &v372;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v425);
  *(_QWORD *)v425 = &v373;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v425);
  *(_QWORD *)v425 = &v374;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v425);
  v157 = v376;
  if (v376)
  {
    v158 = (unint64_t *)&v376->__shared_owners_;
    do
      v159 = __ldaxr(v158);
    while (__stlxr(v159 - 1, v158));
    if (!v159)
    {
      ((void (*)(std::__shared_weak_count *))v157->__on_zero_shared)(v157);
      std::__shared_weak_count::__release_weak(v157);
    }
  }
  v160 = v378;
  if (v378)
  {
    v161 = (unint64_t *)&v378->__shared_owners_;
    do
      v162 = __ldaxr(v161);
    while (__stlxr(v162 - 1, v161));
    if (!v162)
    {
      ((void (*)(std::__shared_weak_count *))v160->__on_zero_shared)(v160);
      std::__shared_weak_count::__release_weak(v160);
    }
  }
  v163 = v380;
  if (v380)
  {
    v164 = (unint64_t *)&v380->__shared_owners_;
    do
      v165 = __ldaxr(v164);
    while (__stlxr(v165 - 1, v164));
    if (!v165)
    {
      ((void (*)(std::__shared_weak_count *))v163->__on_zero_shared)(v163);
      std::__shared_weak_count::__release_weak(v163);
    }
  }
  v166 = v382;
  if (v382)
  {
    v167 = (unint64_t *)&v382->__shared_owners_;
    do
      v168 = __ldaxr(v167);
    while (__stlxr(v168 - 1, v167));
    if (!v168)
    {
      ((void (*)(std::__shared_weak_count *))v166->__on_zero_shared)(v166);
      std::__shared_weak_count::__release_weak(v166);
    }
  }
  v169 = v384;
  if (v384)
  {
    v170 = (unint64_t *)&v384->__shared_owners_;
    do
      v171 = __ldaxr(v170);
    while (__stlxr(v171 - 1, v170));
    if (!v171)
    {
      ((void (*)(std::__shared_weak_count *))v169->__on_zero_shared)(v169);
      std::__shared_weak_count::__release_weak(v169);
    }
  }
  v172 = v386;
  if (v386)
  {
    v173 = (unint64_t *)&v386->__shared_owners_;
    do
      v174 = __ldaxr(v173);
    while (__stlxr(v174 - 1, v173));
    if (!v174)
    {
      ((void (*)(std::__shared_weak_count *))v172->__on_zero_shared)(v172);
      std::__shared_weak_count::__release_weak(v172);
    }
  }
  v175 = v388;
  if (v388)
  {
    v176 = (unint64_t *)&v388->__shared_owners_;
    do
      v177 = __ldaxr(v176);
    while (__stlxr(v177 - 1, v176));
    if (!v177)
    {
      ((void (*)(std::__shared_weak_count *))v175->__on_zero_shared)(v175);
      std::__shared_weak_count::__release_weak(v175);
    }
  }
  v178 = v390;
  if (v390)
  {
    v179 = (unint64_t *)&v390->__shared_owners_;
    do
      v180 = __ldaxr(v179);
    while (__stlxr(v180 - 1, v179));
    if (!v180)
    {
      ((void (*)(std::__shared_weak_count *))v178->__on_zero_shared)(v178);
      std::__shared_weak_count::__release_weak(v178);
    }
  }
  v181 = v392;
  if (v392)
  {
    v182 = (unint64_t *)&v392->__shared_owners_;
    do
      v183 = __ldaxr(v182);
    while (__stlxr(v183 - 1, v182));
    if (!v183)
    {
      ((void (*)(std::__shared_weak_count *))v181->__on_zero_shared)(v181);
      std::__shared_weak_count::__release_weak(v181);
    }
  }
  v184 = (std::__shared_weak_count *)a2[1];
  v368 = *a2;
  v369 = v184;
  if (v184)
  {
    v185 = (unint64_t *)&v184->__shared_owners_;
    do
      v186 = __ldxr(v185);
    while (__stxr(v186 + 1, v185));
  }
  quasar::SpeechRecognizer::initializeDecoderChainOutput((uint64_t)v340, &v368, (uint64_t)a4, a3, (std::vector<std::wstring> **)&v370);
  v187 = v369;
  if (v369)
  {
    v188 = (unint64_t *)&v369->__shared_owners_;
    do
      v189 = __ldaxr(v188);
    while (__stlxr(v189 - 1, v188));
    if (!v189)
    {
      ((void (*)(std::__shared_weak_count *))v187->__on_zero_shared)(v187);
      std::__shared_weak_count::__release_weak(v187);
    }
  }
  if (quasar::gLogLevel >= 5)
  {
    v440 = 0u;
    v439 = 0u;
    v438 = 0u;
    v437 = 0u;
    v436 = 0u;
    v435 = 0u;
    v434 = 0u;
    v433 = 0u;
    v432 = 0u;
    v431 = 0u;
    v430 = 0u;
    v429 = 0u;
    v428 = 0u;
    v427 = 0u;
    v426 = 0u;
    memset(v425, 0, sizeof(v425));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v425);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v425, (uint64_t)"Waiting for first valid feature frame of first utterance...", 59);
    quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)v425);
  }
  if (!*((_DWORD *)a4 + 50))
  {
    v190 = *((_QWORD *)a4 + 30);
    *(_DWORD *)v425 = 0;
    (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v190 + 56))(v190, v425);
  }
  if (!*((_DWORD *)*v24 + 1) && !kaldi::OnlineFeatureMatrix::IsValidFrame(*((int32x2_t **)a4 + 10), 0, 1))
  {
    memset(&v367, 0, sizeof(v367));
    std::string::basic_string[abi:ne180100]<0>(&v441, "");
    *(_QWORD *)v425 = 4;
    *(_DWORD *)&v425[8] = 0;
    if (SHIBYTE(v441.__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)&v425[16], v441.__r_.__value_.__l.__data_, v441.__r_.__value_.__l.__size_);
    }
    else
    {
      *(_OWORD *)&v425[16] = *(_OWORD *)&v441.__r_.__value_.__l.__data_;
      *(_QWORD *)&v426 = *((_QWORD *)&v441.__r_.__value_.__l + 2);
    }
    std::vector<quasar::LmeInfo>::push_back[abi:ne180100]((uint64_t *)&v367, (uint64_t *)v425);
    if (SBYTE7(v426) < 0)
      operator delete(*(void **)&v425[16]);
    if (SHIBYTE(v441.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v441.__r_.__value_.__l.__data_);
    std::mutex::lock((std::mutex *)((char *)v340 + 136));
    v285 = *((_DWORD *)v340 + 32);
    std::mutex::unlock((std::mutex *)((char *)v340 + 136));
    if (v285 == 3)
    {
      v286 = 2;
    }
    else
    {
      if (*((_DWORD *)*v24 + 1))
      {
        v287 = *((_QWORD *)v340 + 81);
        std::string::basic_string[abi:ne180100]<0>(v425, "uttDetectAbort");
        std::string::basic_string[abi:ne180100]<0>(&v441, "Rejected");
        quasar::SpeechRequestResultData::addDump(v287, (__int128 *)v425, &v441);
        if (SHIBYTE(v441.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v441.__r_.__value_.__l.__data_);
        if ((v425[23] & 0x80000000) != 0)
          operator delete(*(void **)v425);
      }
      v286 = 3;
    }
    v288 = (std::__shared_weak_count *)v371;
    v366[0] = (uint64_t)v370;
    v366[1] = v371;
    if (v371)
    {
      v289 = (unint64_t *)(v371 + 8);
      do
        v290 = __ldxr(v289);
      while (__stxr(v290 + 1, v289));
    }
    quasar::SpeechRecognizer::updateFinalRecogStats((uint64_t)v340, v366, (uint64_t)a4);
    if (v288)
    {
      v291 = (unint64_t *)&v288->__shared_owners_;
      do
        v292 = __ldaxr(v291);
      while (__stlxr(v292 - 1, v291));
      if (!v292)
      {
        ((void (*)(std::__shared_weak_count *))v288->__on_zero_shared)(v288);
        std::__shared_weak_count::__release_weak(v288);
      }
    }
    *a4 = 1;
    quasar::SpeechRecognizer::dumpResultLog(v340, 1);
    v293 = **((_QWORD **)*v24 + 3);
    quasar::RecogResult::RecogResult((quasar::RecogResult *)v425);
    v294 = (std::__shared_weak_count *)*((_QWORD *)*v24 + 4);
    v364 = *((_QWORD *)*v24 + 3);
    v365 = v294;
    if (v294)
    {
      v295 = (unint64_t *)&v294->__shared_owners_;
      do
        v296 = __ldxr(v295);
      while (__stxr(v296 + 1, v295));
    }
    v297 = (_QWORD *)quasar::RecogResult::setParams((uint64_t)v425, &v364);
    v298 = quasar::RecogResult::setLmeStatus(v297, (uint64_t *)&v367);
    (*(void (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)v293 + 40))(v293, v298, v286);
    v299 = v365;
    if (v365)
    {
      v300 = (unint64_t *)&v365->__shared_owners_;
      do
        v301 = __ldaxr(v300);
      while (__stlxr(v301 - 1, v300));
      if (!v301)
      {
        ((void (*)(std::__shared_weak_count *))v299->__on_zero_shared)(v299);
        std::__shared_weak_count::__release_weak(v299);
      }
    }
    quasar::RecogResult::~RecogResult((quasar::RecogResult *)v425);
    *(_QWORD *)v425 = &v367;
    std::vector<quasar::LmeInfo>::__destroy_vector::operator()[abi:ne180100]((void ***)v425);
    goto LABEL_490;
  }
  v191 = (quasar::MultiChainMultiAudioBuffer **)((char *)v340 + 264);
  v192 = v414.__locale_;
  v193 = v415;
  if (v414.__locale_ == v415)
  {
LABEL_288:
    v194 = v417;
    v195 = (uint64_t)v340 + 304;
    (*(void (**)(uint64_t, __int128 *, quasar::DecoderChainOutput **, quasar::SpeechRequestData **, uint64_t, quasar::MultiChainMultiAudioBuffer **, quasar::SystemConfig **, uint64_t))(*(_QWORD *)v417 + 16))(v417, &__p, &v370, v24, (uint64_t)v340 + 304, v191, v339, (uint64_t)v340 + 64);
    v196 = (_QWORD *)quasar::Decoder::run(v194, (uint64_t)&__p, (uint64_t)&v370, (uint64_t *)v24, (uint64_t)v340 + 304, 1, v414.__locale_ == v415);
    if (*((_BYTE *)v370 + 1073))
      v197 = 1;
    else
      v197 = *((_BYTE *)v370 + 1072) != 0;
    v214 = *(unsigned __int8 *)(*((_QWORD *)*v24 + 3) + 48) | v196;
    v121 = v214 == 0;
    v215 = v214 != 0;
    if (v121)
      v216 = 0;
    else
      v216 = (int)v196;
    if (v197 || v215)
      goto LABEL_324;
    std::__function::__value_func<float ()(float,float)>::__value_func[abi:ne180100]((uint64_t)v423, v195);
    v216 = quasar::Decoder::runChain((uint64_t **)&v414, (uint64_t)v423, (uint64_t)&__p, (uint64_t)&v370, (uint64_t *)v24);
    v196 = v424;
    if (v424 == v423)
    {
      v217 = 4;
      v196 = v423;
    }
    else
    {
      if (!v424)
      {
LABEL_324:
        v218 = *v191;
        if (*v191)
        {
          v219 = *((_DWORD *)v370 + 144);
          v220 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*((_QWORD *)a4 + 10) + 16) + 24))(*(_QWORD *)(*((_QWORD *)a4 + 10) + 16));
          quasar::MultiChainMultiAudioBuffer::endAudioForSecondaryBuffers(v218, v220 * v219);
        }
        v221 = v414.__locale_;
        v222 = v415;
        while (v221 != v222)
        {
          v196 = (_QWORD *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)v221 + 24))(*(_QWORD *)v221);
          v221 = (std::locale::__imp *)((char *)v221 + 16);
        }
        v223 = v370;
        a4[257] = *((_BYTE *)v370 + 1073);
        v224 = *((unsigned __int8 *)v223 + 1072);
        a4[256] = v224;
        if (v224 && !*((_BYTE *)v223 + 580))
        {
          if (quasar::gLogLevel >= 4)
          {
            v440 = 0u;
            v439 = 0u;
            v438 = 0u;
            v437 = 0u;
            v436 = 0u;
            v435 = 0u;
            v434 = 0u;
            v433 = 0u;
            v432 = 0u;
            v431 = 0u;
            v430 = 0u;
            v429 = 0u;
            v428 = 0u;
            v427 = 0u;
            v426 = 0u;
            memset(v425, 0, sizeof(v425));
            kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v425);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v425, (uint64_t)"Pause/Resume: Ignoring any further processing of the utterance with uttStartFrame=", 82);
            std::ostream::operator<<();
            quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)v425);
            v223 = v370;
          }
          v265 = (std::__shared_weak_count *)v371;
          v360[0] = (uint64_t)v223;
          v360[1] = v371;
          if (v371)
          {
            v266 = (unint64_t *)(v371 + 8);
            do
              v267 = __ldxr(v266);
            while (__stxr(v267 + 1, v266));
          }
          quasar::SpeechRecognizer::updateFrameDataAtUtteranceEnd((uint64_t)v196, v360, (uint64_t)a4);
          if (v265)
          {
            v268 = (unint64_t *)&v265->__shared_owners_;
            do
              v269 = __ldaxr(v268);
            while (__stlxr(v269 - 1, v268));
            if (!v269)
            {
              ((void (*)(std::__shared_weak_count *))v265->__on_zero_shared)(v265);
              std::__shared_weak_count::__release_weak(v265);
            }
          }
        }
        else
        {
          if (*((_QWORD *)v223 + 132))
          {
            v225 = *((_QWORD *)a4 + 1);
            v226 = (quasar::FstLmScorer *)operator new();
            quasar::FstLmScorer::FstLmScorer(v226, v225 + 80);
            quasar::UttInfo::finalize(*((quasar::UttInfo **)v223 + 132), (const quasar::DecoderPassData *)&__p, v370, *v24, v226);
            v227 = *((_QWORD *)v340 + 81);
            v228 = *((_QWORD *)v223 + 133);
            *(_QWORD *)&v359 = *((_QWORD *)v223 + 132);
            *((_QWORD *)&v359 + 1) = v228;
            if (v228)
            {
              v229 = (unint64_t *)(v228 + 8);
              do
                v230 = __ldxr(v229);
              while (__stxr(v230 + 1, v229));
            }
            quasar::SpeechRequestResultData::addUttInfo(v227, &v359);
            v231 = (std::__shared_weak_count *)*((_QWORD *)&v359 + 1);
            if (*((_QWORD *)&v359 + 1))
            {
              v232 = (unint64_t *)(*((_QWORD *)&v359 + 1) + 8);
              do
                v233 = __ldaxr(v232);
              while (__stlxr(v233 - 1, v232));
              if (!v233)
              {
                ((void (*)(std::__shared_weak_count *))v231->__on_zero_shared)(v231);
                std::__shared_weak_count::__release_weak(v231);
              }
            }
            (*(void (**)(quasar::FstLmScorer *))(*(_QWORD *)v226 + 8))(v226);
            v223 = v370;
          }
          if ((quasar::SpeechRecognizer *)((char *)v340 + 24) != v223)
            std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((std::vector<std::wstring> *)v340 + 1, *(std::string **)v223, *((__int128 **)v223 + 1), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)v223 + 1) - *(_QWORD *)v223) >> 3));
          v234 = v370;
          if (v216 == 1)
          {
            v235 = (std::__shared_weak_count *)v371;
            v358[0] = (uint64_t)v370;
            v358[1] = v371;
            if (v371)
            {
              v236 = (unint64_t *)(v371 + 8);
              do
                v237 = __ldxr(v236);
              while (__stxr(v237 + 1, v236));
            }
            quasar::SpeechRecognizer::updateFinalRecogStats((uint64_t)v340, v358, (uint64_t)a4);
            if (v235)
            {
              v238 = (unint64_t *)&v235->__shared_owners_;
              do
                v239 = __ldaxr(v238);
              while (__stlxr(v239 - 1, v238));
              if (!v239)
              {
                ((void (*)(std::__shared_weak_count *))v235->__on_zero_shared)(v235);
                std::__shared_weak_count::__release_weak(v235);
              }
            }
            *a4 = 1;
            v240 = **((_QWORD **)*v24 + 3);
            quasar::RecogResult::RecogResult((quasar::RecogResult *)v425);
            v241 = (std::__shared_weak_count *)*((_QWORD *)*v24 + 4);
            v356 = *((_QWORD *)*v24 + 3);
            v357 = v241;
            if (v241)
            {
              v242 = (unint64_t *)&v241->__shared_owners_;
              do
                v243 = __ldxr(v242);
              while (__stxr(v243 + 1, v242));
            }
            v244 = (_QWORD *)quasar::RecogResult::setParams((uint64_t)v425, &v356);
            v245 = quasar::RecogResult::setLmeStatus(v244, (uint64_t *)v370 + 73);
            (*(void (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)v240 + 40))(v240, v245, 2);
            v246 = v357;
            if (v357)
            {
              v247 = (unint64_t *)&v357->__shared_owners_;
              do
                v248 = __ldaxr(v247);
              while (__stlxr(v248 - 1, v247));
              if (!v248)
              {
                ((void (*)(std::__shared_weak_count *))v246->__on_zero_shared)(v246);
                std::__shared_weak_count::__release_weak(v246);
              }
            }
            quasar::RecogResult::~RecogResult((quasar::RecogResult *)v425);
            v249 = 0;
          }
          else if (*((_BYTE *)v370 + 1073))
          {
            if (!*((_QWORD *)v370 + 44))
            {
              v302 = operator new(0x30uLL);
              v302[2] = 0;
              *v302 = &unk_1E5D456D0;
              v302[1] = 0;
              v302[4] = 0;
              v302[5] = 0;
              v302[3] = 0;
              *(_QWORD *)v425 = v302 + 3;
              *(_QWORD *)&v425[8] = v302;
              std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100]((uint64_t)v234 + 352, (__int128 *)v425);
              v303 = *(std::__shared_weak_count **)&v425[8];
              if (*(_QWORD *)&v425[8])
              {
                v304 = (unint64_t *)(*(_QWORD *)&v425[8] + 8);
                do
                  v305 = __ldaxr(v304);
                while (__stlxr(v305 - 1, v304));
                if (!v305)
                {
                  ((void (*)(std::__shared_weak_count *))v303->__on_zero_shared)(v303);
                  std::__shared_weak_count::__release_weak(v303);
                }
              }
              v306 = operator new(0x30uLL);
              v306[2] = 0;
              *v306 = &unk_1E5D458C8;
              v306[1] = 0;
              v306[4] = 0;
              v306[5] = 0;
              v306[3] = 0;
              *(_QWORD *)v425 = v306 + 3;
              *(_QWORD *)&v425[8] = v306;
              std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100]((uint64_t)v370 + 392, (__int128 *)v425);
              v307 = *(std::__shared_weak_count **)&v425[8];
              if (*(_QWORD *)&v425[8])
              {
                v308 = (unint64_t *)(*(_QWORD *)&v425[8] + 8);
                do
                  v309 = __ldaxr(v308);
                while (__stlxr(v309 - 1, v308));
                if (!v309)
                {
                  ((void (*)(std::__shared_weak_count *))v307->__on_zero_shared)(v307);
                  std::__shared_weak_count::__release_weak(v307);
                }
              }
            }
            std::string::basic_string[abi:ne180100]<0>(&v441, "");
            std::set<std::string>::set[abi:ne180100]((uint64_t)v425, (const void **)&v441.__r_.__value_.__l.__data_, 1);
            memset(&v367, 0, sizeof(v367));
            v421 = &v367;
            v422 = 0;
            v367.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x18uLL);
            v367.__r_.__value_.__l.__size_ = v367.__r_.__value_.__r.__words[0];
            v367.__r_.__value_.__r.__words[2] = v367.__r_.__value_.__r.__words[0] + 24;
            v367.__r_.__value_.__l.__size_ = (std::string::size_type)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::set<std::string>>,std::set<std::string> const*,std::set<std::string> const*,std::set<std::string>*>((uint64_t)&v367.__r_.__value_.__r.__words[2], (const void ***)v425, (const void ***)&v425[24], (uint64_t *)v367.__r_.__value_.__l.__data_);
            std::__tree<std::string>::destroy((uint64_t)v425, *(char **)&v425[8]);
            if (SHIBYTE(v441.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v441.__r_.__value_.__l.__data_);
            *a4 = *((_BYTE *)v370 + 580);
            v250 = **((_QWORD **)*v24 + 3);
            quasar::RecogResult::RecogResult((quasar::RecogResult *)v425);
            v251 = (std::__shared_weak_count *)*((_QWORD *)*v24 + 4);
            v354 = *((_QWORD *)*v24 + 3);
            v355 = v251;
            if (v251)
            {
              v252 = (unint64_t *)&v251->__shared_owners_;
              do
                v253 = __ldxr(v252);
              while (__stxr(v253 + 1, v252));
            }
            v254 = quasar::RecogResult::setParams((uint64_t)v425, &v354);
            v255 = quasar::Token::resetSpacing(*((uint64_t ***)v370 + 44));
            v256 = quasar::RecogResult::setResultChoices(v254, (uint64_t)v255);
            v257 = quasar::RecogResult::setResultCosts(v256, *((_QWORD *)v370 + 49));
            v258 = (_QWORD *)quasar::RecogResult::setResultMuxIds(v257, (uint64_t)&v367);
            v259 = quasar::RecogResult::setLmeStatus(v258, (uint64_t *)v370 + 73);
            IsFinal = quasar::RecogResult::setIsFinal((uint64_t)v259, *a4);
            v261 = quasar::RecogResult::setRecognitionPaused(IsFinal, 1);
            (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v250 + 40))(v250, v261, 1);
            v262 = v355;
            if (v355)
            {
              v263 = (unint64_t *)&v355->__shared_owners_;
              do
                v264 = __ldaxr(v263);
              while (__stlxr(v264 - 1, v263));
              if (!v264)
              {
                ((void (*)(std::__shared_weak_count *))v262->__on_zero_shared)(v262);
                std::__shared_weak_count::__release_weak(v262);
              }
            }
            quasar::RecogResult::~RecogResult((quasar::RecogResult *)v425);
            *(_QWORD *)v425 = &v367;
            std::vector<std::set<std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)v425);
            v249 = 1;
          }
          else
          {
            v249 = quasar::SpeechRecognizer::writeFinalResults((uint64_t)v340, (char *)&__p, (uint64_t *)&v370, (uint64_t)a4);
          }
          v270 = (uint64_t **)*((_QWORD *)v370 + 44);
          if (!v270 || (v271 = *v270, *(uint64_t **)(*((_QWORD *)v370 + 44) + 8) == v271) || v271[1] == *v271)
          {
            v274 = v340;
            *((_BYTE *)v340 + 528) = 0;
          }
          else
          {
            memset(v425, 0, 24);
            std::vector<quasar::Token>::__init_with_size[abi:ne180100]<quasar::Token*,quasar::Token*>(v425, *v271, v271[1], 0x6DB6DB6DB6DB6DB7 * ((v271[1] - *v271) >> 5));
            v273 = *(const quasar::Token **)&v425[8];
            for (i = *(const quasar::Token **)v425; i != v273; i = (const quasar::Token *)((char *)i + 224))
            {
              quasar::Token::Token(&v343, i);
              quasar::SpeechRecognizer::updateCachedTokensWithToken((uint64_t)v340, (std::string::size_type)&v343);
              if (v353 < 0)
                operator delete(v352);
              if (v351 < 0)
                operator delete(v350);
              v367.__r_.__value_.__r.__words[0] = (std::string::size_type)&v349;
              std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&v367);
              if (v348 < 0)
                operator delete(v347);
              v367.__r_.__value_.__r.__words[0] = (std::string::size_type)&v346;
              std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v367);
              if (v345 < 0)
                operator delete(v344);
              if (SHIBYTE(v343.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v343.__r_.__value_.__l.__data_);
            }
            v367.__r_.__value_.__r.__words[0] = (std::string::size_type)v425;
            std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&v367);
            v274 = v340;
          }
          v275 = *((_QWORD *)v274 + 75);
          if (v275)
          {
            v276 = *(_QWORD *)(v275 + 120);
            v277 = *(std::__shared_weak_count **)(v275 + 128);
            if (v277)
            {
              v278 = (unint64_t *)&v277->__shared_owners_;
              do
                v279 = __ldxr(v278);
              while (__stxr(v279 + 1, v278));
            }
            if (v276 && *(_BYTE *)(*((_QWORD *)*v24 + 3) + 52))
            {
              v280 = *a4;
              if (v277)
              {
                v281 = (unint64_t *)&v277->__shared_owners_;
                do
                  v282 = __ldaxr(v281);
                while (__stlxr(v282 - 1, v281));
                if (!v282)
                {
                  ((void (*)(std::__shared_weak_count *))v277->__on_zero_shared)(v277);
                  std::__shared_weak_count::__release_weak(v277);
                }
              }
              if (v280)
              {
                if (v249)
                {
                  if (quasar::gLogLevel >= 4)
                  {
                    v440 = 0u;
                    v439 = 0u;
                    v438 = 0u;
                    v437 = 0u;
                    v436 = 0u;
                    v435 = 0u;
                    v434 = 0u;
                    v433 = 0u;
                    v432 = 0u;
                    v431 = 0u;
                    v430 = 0u;
                    v429 = 0u;
                    v428 = 0u;
                    v427 = 0u;
                    v426 = 0u;
                    memset(v425, 0, sizeof(v425));
                    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v425);
                    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v425, (uint64_t)"Recognition is final and successful, trigger training", 53);
                    quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)v425);
                  }
                  quasar::SpeechRecognizer::writeTrainingData(v340, (const quasar::SpeechRecognizer::RecogData *)a4);
                }
                else if (quasar::gLogLevel >= 4)
                {
                  v440 = 0u;
                  v439 = 0u;
                  v438 = 0u;
                  v437 = 0u;
                  v436 = 0u;
                  v435 = 0u;
                  v434 = 0u;
                  v433 = 0u;
                  v432 = 0u;
                  v431 = 0u;
                  v430 = 0u;
                  v429 = 0u;
                  v428 = 0u;
                  v427 = 0u;
                  v426 = 0u;
                  memset(v425, 0, sizeof(v425));
                  kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v425);
                  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v425, (uint64_t)"Recognition is final but not successful, skip training", 54);
                  quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)v425);
                }
              }
            }
            else if (v277)
            {
              v283 = (unint64_t *)&v277->__shared_owners_;
              do
                v284 = __ldaxr(v283);
              while (__stlxr(v284 - 1, v283));
              if (!v284)
              {
                ((void (*)(std::__shared_weak_count *))v277->__on_zero_shared)(v277);
                std::__shared_weak_count::__release_weak(v277);
              }
            }
          }
          v310 = (*(uint64_t (**)(_QWORD, _QWORD))(***((_QWORD ***)*v24 + 3) + 112))(**((_QWORD **)*v24 + 3), *((_QWORD *)a4 + 10));
          v311 = (std::__shared_weak_count *)v371;
          v342[0] = (uint64_t)v370;
          v342[1] = v371;
          if (v371)
          {
            v312 = (unint64_t *)(v371 + 8);
            do
              v313 = __ldxr(v312);
            while (__stxr(v313 + 1, v312));
          }
          quasar::SpeechRecognizer::updateFrameDataAtUtteranceEnd(v310, v342, (uint64_t)a4);
          if (v311)
          {
            v314 = (unint64_t *)&v311->__shared_owners_;
            do
              v315 = __ldaxr(v314);
            while (__stlxr(v315 - 1, v314));
            if (!v315)
            {
              ((void (*)(std::__shared_weak_count *))v311->__on_zero_shared)(v311);
              std::__shared_weak_count::__release_weak(v311);
            }
          }
          *(_OWORD *)&v441.__r_.__value_.__l.__data_ = quasar::Location::UNDEFINED_COORDINATES;
          if (*a4)
            v316 = v249 == 0;
          else
            v316 = 1;
          if (!v316)
          {
            while (1)
            {
              v331 = *(uint64_t **)(*((_QWORD *)a4 + 1) + 88);
              if (v87 == v331)
                break;
              v332 = *v87;
              v87 += 2;
              quasar::Decoder::run(v332, (uint64_t)&__p, (uint64_t)&v370, (uint64_t *)v24, v195, 0, v87 == v331);
            }
          }
          if (quasar::Location::isUndefined((quasar::Location *)&v441))
          {
            Location = (std::__assoc_sub_state **)quasar::SpeechRequestData::getLocation(*v24);
            v441.__r_.__value_.__r.__words[0] = quasar::Location::fromSharedFuture(Location);
            v441.__r_.__value_.__l.__size_ = v318;
          }
          v319 = *((_QWORD *)v370 + 53);
          std::string::basic_string[abi:ne180100]<0>(v425, "geoLocationStatusUponRequestComplete");
          quasar::Location::statusAsString((quasar::Location *)&v441, &v367);
          quasar::SpeechRequestResultData::addDumpAA(v319, (__int128 *)v425, &v367);
          if (SHIBYTE(v367.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v367.__r_.__value_.__l.__data_);
          if ((v425[23] & 0x80000000) != 0)
            operator delete(*(void **)v425);
          v320 = v370;
          if (!*((_BYTE *)v370 + 1073))
          {
            if (*(_BYTE *)(*((_QWORD *)*v24 + 3) + 54)
              && (v333 = quasar::DecoderChainOutput::nonEmptyTopChoice(v370), v320 = v370, v333))
            {
              v334 = (__int128 **)((char *)v370 + 96);
              if (*((_QWORD *)v370 + 13) == *((_QWORD *)v370 + 12))
              {
                v335 = *((_QWORD *)v370 + 44);
                v334 = *(__int128 ***)v335;
                if (*(_QWORD *)(v335 + 8) == *(_QWORD *)v335)
                  std::vector<std::pair<int,int>>::__throw_out_of_range[abi:ne180100]();
              }
              quasar::SpeechRequestData::updateInterUtteranceLeftContext((uint64_t)*v24, v334, v410);
              v336 = *((_QWORD *)*v24 + 3);
              memset(v425, 0, 24);
              quasar::RunAsyncParams::setLeftContextForItn(v336, (uint64_t)v425);
              v367.__r_.__value_.__r.__words[0] = (std::string::size_type)v425;
              std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v367);
              quasar::RunAsyncParams::setLeftContextForDecoder(*((_QWORD *)*v24 + 3), (uint64_t)v370 + 120);
            }
            else if (quasar::DecoderChainOutput::nonEmptyTopChoice(v320))
            {
              v337 = *((_QWORD *)*v24 + 3);
              memset(v425, 0, 24);
              quasar::RunAsyncParams::setLeftContext(v337, (uint64_t)v425);
              v367.__r_.__value_.__r.__words[0] = (std::string::size_type)v425;
              std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v367);
              v338 = *((_QWORD *)*v24 + 3);
              memset(v425, 0, 24);
              quasar::RunAsyncParams::setLeftContextForItn(v338, (uint64_t)v425);
              v367.__r_.__value_.__r.__words[0] = (std::string::size_type)v425;
              std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v367);
            }
          }
          v321 = *((_QWORD *)v340 + 81);
          std::string::basic_string[abi:ne180100]<0>(v425, "recognitionStatus");
          std::to_string(&v367, v249);
          quasar::SpeechRequestResultData::addDump(v321, (__int128 *)v425, &v367);
          if (SHIBYTE(v367.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v367.__r_.__value_.__l.__data_);
          if ((v425[23] & 0x80000000) != 0)
            operator delete(*(void **)v425);
          quasar::SpeechRecognizer::dumpResultLog(v340, *a4);
        }
        goto LABEL_490;
      }
      v217 = 5;
    }
    v196 = (_QWORD *)(*(uint64_t (**)(void))(*v196 + 8 * v217))();
    goto LABEL_324;
  }
  while ((*(unsigned int (**)(_QWORD, __int128 *, quasar::DecoderChainOutput **, quasar::SpeechRequestData **, uint64_t, quasar::MultiChainMultiAudioBuffer **, quasar::SystemConfig **, uint64_t))(**(_QWORD **)v192 + 16))(*(_QWORD *)v192, &__p, &v370, v24, (uint64_t)v340 + 304, v191, v339, (uint64_t)v340 + 64) != 1)
  {
    v192 = (std::locale::__imp *)((char *)v192 + 16);
    if (v192 == v193)
      goto LABEL_288;
  }
  if (*v191)
    quasar::MultiChainMultiAudioBuffer::endAudioForSecondaryBuffers(*v191, 0);
  v198 = v414.__locale_;
  for (j = v415; v198 != j; v198 = (std::locale::__imp *)((char *)v198 + 16))
    (*(void (**)(_QWORD))(**(_QWORD **)v198 + 24))(*(_QWORD *)v198);
  v200 = (std::__shared_weak_count *)v371;
  v363[0] = (uint64_t)v370;
  v363[1] = v371;
  if (v371)
  {
    v201 = (unint64_t *)(v371 + 8);
    do
      v202 = __ldxr(v201);
    while (__stxr(v202 + 1, v201));
  }
  quasar::SpeechRecognizer::updateFinalRecogStats((uint64_t)v340, v363, (uint64_t)a4);
  if (v200)
  {
    v203 = (unint64_t *)&v200->__shared_owners_;
    do
      v204 = __ldaxr(v203);
    while (__stlxr(v204 - 1, v203));
    if (!v204)
    {
      ((void (*)(std::__shared_weak_count *))v200->__on_zero_shared)(v200);
      std::__shared_weak_count::__release_weak(v200);
    }
  }
  *a4 = 1;
  quasar::SpeechRecognizer::dumpResultLog(v340, 1);
  v205 = **((_QWORD **)*v24 + 3);
  quasar::RecogResult::RecogResult((quasar::RecogResult *)v425);
  v206 = (std::__shared_weak_count *)*((_QWORD *)*v24 + 4);
  v361 = *((_QWORD *)*v24 + 3);
  v362 = v206;
  if (v206)
  {
    v207 = (unint64_t *)&v206->__shared_owners_;
    do
      v208 = __ldxr(v207);
    while (__stxr(v208 + 1, v207));
  }
  v209 = (_QWORD *)quasar::RecogResult::setParams((uint64_t)v425, &v361);
  v210 = quasar::RecogResult::setLmeStatus(v209, (uint64_t *)v370 + 73);
  (*(void (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)v205 + 40))(v205, v210, 2);
  v211 = v362;
  if (v362)
  {
    v212 = (unint64_t *)&v362->__shared_owners_;
    do
      v213 = __ldaxr(v212);
    while (__stlxr(v213 - 1, v212));
    if (!v213)
    {
      ((void (*)(std::__shared_weak_count *))v211->__on_zero_shared)(v211);
      std::__shared_weak_count::__release_weak(v211);
    }
  }
  quasar::RecogResult::~RecogResult((quasar::RecogResult *)v425);
LABEL_490:
  v322 = (std::__shared_weak_count *)v371;
  if (v371)
  {
    v323 = (unint64_t *)(v371 + 8);
    do
      v324 = __ldaxr(v323);
    while (__stlxr(v324 - 1, v323));
    if (!v324)
    {
      ((void (*)(std::__shared_weak_count *))v322->__on_zero_shared)(v322);
      std::__shared_weak_count::__release_weak(v322);
    }
  }
  quasar::DecoderPassData::~DecoderPassData((void **)&__p);
  *(_QWORD *)&__p = &v411;
  std::vector<std::weak_ptr<quasar::Decoder>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  *(_QWORD *)&__p = &v414;
  std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  v325 = v418;
  if (v418)
  {
    v326 = (unint64_t *)&v418->__shared_owners_;
    do
      v327 = __ldaxr(v326);
    while (__stlxr(v327 - 1, v326));
    if (!v327)
    {
      ((void (*)(std::__shared_weak_count *))v325->__on_zero_shared)(v325);
      std::__shared_weak_count::__release_weak(v325);
    }
  }
  v328 = v420;
  if (v420)
  {
    v329 = (unint64_t *)&v420->__shared_owners_;
    do
      v330 = __ldaxr(v329);
    while (__stlxr(v330 - 1, v329));
    if (!v330)
    {
      ((void (*)(std::__shared_weak_count *))v328->__on_zero_shared)(v328);
      std::__shared_weak_count::__release_weak(v328);
    }
  }
}

void sub_1ADC64D30()
{
  __cxa_end_catch();
  JUMPOUT(0x1ADC64E1CLL);
}

void sub_1ADC64D40(void *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  JUMPOUT(0x1ADC64E84);
}

void sub_1ADC64D54(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,char a60)
{
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&a60);
  quasar::RecogResult::~RecogResult((quasar::RecogResult *)&STACK[0x720]);
  JUMPOUT(0x1ADC64D68);
}

void sub_1ADC64D84()
{
  JUMPOUT(0x1ADC64E84);
}

void sub_1ADC64D9C(_Unwind_Exception *a1)
{
  if (SLOBYTE(STACK[0x357]) < 0)
    operator delete((void *)STACK[0x340]);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x6E0]);
  _Unwind_Resume(a1);
}

void sub_1ADC64DB4()
{
  STACK[0x230] = (unint64_t)&STACK[0x720];
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x230]);
  JUMPOUT(0x1ADC64E1CLL);
}

void sub_1ADC64DF0()
{
  std::__split_buffer<std::weak_ptr<quasar::Decoder>>::~__split_buffer((void **)&STACK[0x340]);
  JUMPOUT(0x1ADC64E2CLL);
}

void sub_1ADC64E00()
{
  std::__shared_weak_count *v0;

  if (v0)
    std::__shared_weak_count::__release_weak(v0);
  JUMPOUT(0x1ADC64E2CLL);
}

void sub_1ADC64E18(_Unwind_Exception *a1)
{
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x258]);
  quasar::DecoderPassData::~DecoderPassData((void **)&STACK[0x340]);
  STACK[0x720] = (unint64_t)&STACK[0x6A0];
  std::vector<std::weak_ptr<quasar::Decoder>>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x720]);
  STACK[0x720] = (unint64_t)&STACK[0x6B8];
  std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x720]);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x6D0]);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x6E0]);
  _Unwind_Resume(a1);
}

void quasar::SpeechRecognizer::processLeftContextForEditLme(uint64_t a1, __int128 **a2)
{
  __int128 *v4;
  unsigned __int8 **v5;
  uint64_t v6;
  __int128 *v7;
  int v8;
  unsigned __int8 *v9;
  uint64_t v10;
  unsigned __int8 *v11;
  unsigned __int8 *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  __int128 *v16;
  __int128 *v17;
  __int128 *i;
  unsigned __int8 *v19;
  unsigned __int8 *v20;
  __int128 **v21;
  std::string v22;
  void *v23;
  char v24;
  uint64_t v25;
  void *v26;
  char v27;
  uint64_t v28;
  void *v29;
  char v30;
  void *__p;
  char v32;
  std::string v33;
  void *v34;
  char v35;
  uint64_t v36;
  void *v37;
  char v38;
  uint64_t v39;
  void *v40;
  char v41;
  void *v42;
  char v43;
  _QWORD v44[5];
  __int128 *v45;
  __int128 *v46;
  uint64_t v47;
  __int128 *v48[2];

  v45 = 0;
  v46 = 0;
  v47 = 0;
  std::vector<quasar::Token>::__init_with_size[abi:ne180100]<quasar::Token*,quasar::Token*>(&v45, *(_QWORD *)(a1 + 536), *(_QWORD *)(a1 + 544), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(a1 + 544) - *(_QWORD *)(a1 + 536)) >> 5));
  std::unordered_map<std::string,quasar::LmeDataFactoryBase::PronSet>::unordered_map((uint64_t)v44, a1 + 560);
  std::vector<quasar::Token>::__assign_with_size[abi:ne180100]<quasar::Token const*,quasar::Token const*>(a1 + 536, 0, 0, 0);
  std::__hash_table<std::__hash_value_type<std::string,quasar::LmeDataFactoryBase::PronSet>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,quasar::LmeDataFactoryBase::PronSet>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,quasar::LmeDataFactoryBase::PronSet>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,quasar::LmeDataFactoryBase::PronSet>>>::clear(a1 + 560);
  v4 = *a2;
  v5 = (unsigned __int8 **)a2[1];
  if (*a2 != (__int128 *)v5)
  {
    v21 = a2;
    do
    {
      if (std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>(v44, (unsigned __int8 *)v4))
      {
        v6 = (uint64_t)v45;
        v7 = v46;
        if (v45 != v46)
        {
          v8 = *((char *)v4 + 23);
          if (v8 >= 0)
            v9 = (unsigned __int8 *)*((unsigned __int8 *)v4 + 23);
          else
            v9 = (unsigned __int8 *)*((_QWORD *)v4 + 1);
          do
          {
            v10 = *(unsigned __int8 *)(v6 + 23);
            if ((v10 & 0x80u) == 0)
              v11 = (unsigned __int8 *)*(unsigned __int8 *)(v6 + 23);
            else
              v11 = *(unsigned __int8 **)(v6 + 8);
            if (v11 == v9)
            {
              if (v8 >= 0)
                v12 = (unsigned __int8 *)v4;
              else
                v12 = *(unsigned __int8 **)v4;
              if ((v10 & 0x80) != 0)
              {
                if (!memcmp(*(const void **)v6, v12, *(_QWORD *)(v6 + 8)))
                {
LABEL_44:
                  v14 = *(_QWORD *)(a1 + 544);
                  if (v14 >= *(_QWORD *)(a1 + 552))
                  {
                    v15 = std::vector<quasar::Token>::__push_back_slow_path<quasar::Token const&>((uint64_t *)(a1 + 536), (const quasar::Token *)v6);
                  }
                  else
                  {
                    quasar::Token::Token(*(std::string **)(a1 + 544), (const quasar::Token *)v6);
                    v15 = v14 + 224;
                    *(_QWORD *)(a1 + 544) = v14 + 224;
                  }
                  *(_QWORD *)(a1 + 544) = v15;
                  std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__move_loop<std::_ClassicAlgPolicy>,std::__move_trivial>,quasar::Token *,quasar::Token *,quasar::Token *,0>((__int128 *)(v6 + 224), v46, v6);
                  v17 = v16;
                  for (i = v46; i != v17; quasar::Token::~Token((void **)i - 28))
                    ;
                  v46 = v17;
                  break;
                }
              }
              else
              {
                if (!*(_BYTE *)(v6 + 23))
                  goto LABEL_44;
                v13 = 0;
                while (*(unsigned __int8 *)(v6 + v13) == v12[v13])
                {
                  if (v10 == ++v13)
                    goto LABEL_44;
                }
              }
            }
            v6 += 224;
          }
          while ((__int128 *)v6 != v7);
        }
        v48[0] = v4;
        v19 = std::__hash_table<std::__hash_value_type<std::string,quasar::LmeDataFactoryBase::PronSet>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,quasar::LmeDataFactoryBase::PronSet>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,quasar::LmeDataFactoryBase::PronSet>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,quasar::LmeDataFactoryBase::PronSet>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v44, (unsigned __int8 *)v4, (uint64_t)&std::piecewise_construct, v48);
        v48[0] = v4;
        v20 = std::__hash_table<std::__hash_value_type<std::string,quasar::LmeDataFactoryBase::PronSet>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,quasar::LmeDataFactoryBase::PronSet>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,quasar::LmeDataFactoryBase::PronSet>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,quasar::LmeDataFactoryBase::PronSet>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1 + 560, (unsigned __int8 *)v4, (uint64_t)&std::piecewise_construct, v48);
        if (v20 != v19)
          std::__tree<std::__value_type<std::pair<quasar::PronType,std::string>,float>,std::__map_value_compare<std::pair<quasar::PronType,std::string>,std::__value_type<std::pair<quasar::PronType,std::string>,float>,std::less<std::pair<quasar::PronType,std::string>>,true>,std::allocator<std::__value_type<std::pair<quasar::PronType,std::string>,float>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::pair<quasar::PronType,std::string>,float>,std::__tree_node<std::__value_type<std::pair<quasar::PronType,std::string>,float>,void *> *,long>>((uint64_t **)v20 + 5, *((_QWORD **)v19 + 5), (_QWORD *)v19 + 6);
      }
      else
      {
        quasar::Token::Token((quasar::Token *)&v33);
        std::string::operator=(&v33, (const std::string *)v4);
        quasar::Token::Token(&v22, (const quasar::Token *)&v33);
        quasar::SpeechRecognizer::updateCachedTokensWithToken(a1, (std::string::size_type)&v22);
        if (v32 < 0)
          operator delete(__p);
        if (v30 < 0)
          operator delete(v29);
        v48[0] = (__int128 *)&v28;
        std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)v48);
        if (v27 < 0)
          operator delete(v26);
        v48[0] = (__int128 *)&v25;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v48);
        if (v24 < 0)
          operator delete(v23);
        if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v22.__r_.__value_.__l.__data_);
        if (v43 < 0)
          operator delete(v42);
        if (v41 < 0)
          operator delete(v40);
        v48[0] = (__int128 *)&v39;
        std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)v48);
        if (v38 < 0)
          operator delete(v37);
        v48[0] = (__int128 *)&v36;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v48);
        if (v35 < 0)
          operator delete(v34);
        if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v33.__r_.__value_.__l.__data_);
      }
      v4 = (__int128 *)((char *)v4 + 24);
    }
    while (v4 != (__int128 *)v5);
    if (v21[1] != *v21)
      *(_BYTE *)(a1 + 528) = 1;
  }
  std::__hash_table<std::__hash_value_type<std::string,quasar::LmeDataFactoryBase::PronSet>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,quasar::LmeDataFactoryBase::PronSet>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,quasar::LmeDataFactoryBase::PronSet>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,quasar::LmeDataFactoryBase::PronSet>>>::~__hash_table((uint64_t)v44);
  v33.__r_.__value_.__r.__words[0] = (std::string::size_type)&v45;
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&v33);
}

void sub_1ADC65214(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,void **a42)
{
  uint64_t v42;

  std::__hash_table<std::__hash_value_type<std::string,quasar::LmeDataFactoryBase::PronSet>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,quasar::LmeDataFactoryBase::PronSet>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,quasar::LmeDataFactoryBase::PronSet>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,quasar::LmeDataFactoryBase::PronSet>>>::~__hash_table(v42 - 168);
  a42 = (void **)(v42 - 128);
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100](&a42);
  _Unwind_Resume(a1);
}

void quasar::SpeechRecognizer::buildEditLmeContainerFromCachedTokens(quasar::SpeechRecognizer *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  quasar::SpeechRecognizer *v4;
  char *v5;
  unsigned __int8 *v6;
  unsigned __int8 *v7;
  char *v8;
  char *v9;
  std::string *v10;
  __int128 v11;
  __int128 *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  std::string::size_type size;
  std::string::size_type v18;
  char *v19;
  char *v20;
  _QWORD *v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t **v25;
  _OWORD *v26;
  uint64_t *v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *p_shared_owners;
  unint64_t v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  void **v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  void **v51;
  std::__shared_weak_count *v52;
  uint64_t v53;
  uint64_t v54;
  std::__shared_weak_count *v55;
  uint64_t v56;
  _BYTE v57[32];
  int v58;
  _OWORD v59[2];
  int v60;
  _OWORD v61[2];
  int v62;
  void *__p;
  std::string *v64;
  unint64_t v65;
  int v66;
  void *v67;
  char v68;
  uint64_t v69;
  uint64_t v70;
  std::__shared_weak_count *v71;
  _BYTE v72[32];
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  unint64_t v89;
  std::string v90;
  char **v91;
  char *v92;
  unint64_t v93;
  __int128 v94;
  unint64_t v95;
  uint64_t *v96;
  _QWORD *v97[2];

  v2 = *((_QWORD *)this + 67);
  v3 = *((_QWORD *)this + 68);
  if (v2 == v3)
  {
    *a2 = 0;
    a2[1] = 0;
    return;
  }
  v4 = this;
  v97[0] = 0;
  v97[1] = 0;
  v5 = (char *)this + 560;
  v96 = (uint64_t *)v97;
  do
  {
    quasar::LmeDataFactoryBase::PronSet::PronSet(v61);
    v94 = 0uLL;
    v95 = 0;
    v91 = 0;
    v92 = 0;
    v93 = 0;
    __p = (void *)v2;
    v6 = std::__hash_table<std::__hash_value_type<std::string,quasar::LmeDataFactoryBase::PronSet>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,quasar::LmeDataFactoryBase::PronSet>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,quasar::LmeDataFactoryBase::PronSet>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,quasar::LmeDataFactoryBase::PronSet>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v5, (unsigned __int8 *)v2, (uint64_t)&std::piecewise_construct, (__int128 **)&__p);
    if (!quasar::LmeDataFactoryBase::PronSet::empty((quasar::LmeDataFactoryBase::PronSet *)(v6 + 40)))
    {
      *(_DWORD *)v72 = 1;
      __p = (void *)v2;
      v7 = std::__hash_table<std::__hash_value_type<std::string,quasar::LmeDataFactoryBase::PronSet>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,quasar::LmeDataFactoryBase::PronSet>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,quasar::LmeDataFactoryBase::PronSet>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,quasar::LmeDataFactoryBase::PronSet>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v5, (unsigned __int8 *)v2, (uint64_t)&std::piecewise_construct, (__int128 **)&__p)+ 40;
      v8 = v92;
      if ((unint64_t)v92 >= v93)
      {
        v9 = (char *)std::vector<quasar::LmeDataFactoryBase::Word>::__emplace_back_slow_path<std::string const&,char const*&,int,quasar::LmeDataFactoryBase::PronSet &>((uint64_t *)&v91, v2, &quasar::LME_TAG_EDIT, (unsigned int *)v72, (uint64_t)v7);
      }
      else
      {
        std::allocator<quasar::LmeDataFactoryBase::Word>::construct[abi:ne180100]<quasar::LmeDataFactoryBase::Word,std::string const&,char const*&,int,quasar::LmeDataFactoryBase::PronSet &>((uint64_t)&v93, (uint64_t)v92, v2, &quasar::LME_TAG_EDIT, (unsigned int *)v72, (uint64_t)v7);
        v9 = v8 + 80;
      }
      v92 = v9;
      goto LABEL_58;
    }
    if (*(char *)(v2 + 71) < 0)
    {
      if (!*(_QWORD *)(v2 + 56))
        goto LABEL_15;
    }
    else if (!*(_BYTE *)(v2 + 71))
    {
      goto LABEL_15;
    }
    if (*(_QWORD *)(v2 + 72) != *(_QWORD *)(v2 + 80))
    {
      if ((*(_BYTE *)(v2 + 71) & 0x80) != 0)
      {
        std::string::__init_copy_ctor_external((std::string *)v72, *(const std::string::value_type **)(v2 + 48), *(_QWORD *)(v2 + 56));
      }
      else
      {
        *(_OWORD *)v72 = *(_OWORD *)(v2 + 48);
        *(_QWORD *)&v72[16] = *(_QWORD *)(v2 + 64);
      }
      std::string::basic_string[abi:ne180100]<0>(&__p, " ");
      std::string::basic_string[abi:ne180100]<0>(v57, ".");
      quasar::replaceAll((uint64_t)v72, (uint64_t)&__p, v57);
      if ((v57[23] & 0x80000000) != 0)
        operator delete(*(void **)v57);
      if (SHIBYTE(v65) < 0)
        operator delete(__p);
      *(_DWORD *)v57 = 1;
      __p = 0;
      v13 = *((_QWORD *)&v94 + 1);
      if (*((_QWORD *)&v94 + 1) >= v95)
      {
        v14 = std::vector<quasar::PronChoice>::__emplace_back_slow_path<quasar::PronType,std::string &,double>((uint64_t *)&v94, (int *)v57, (uint64_t)v72, (double *)&__p);
      }
      else
      {
        std::allocator<quasar::PronChoice>::construct[abi:ne180100]<quasar::PronChoice,quasar::PronType,std::string &,double>((uint64_t)&v95, *((uint64_t *)&v94 + 1), (int *)v57, (uint64_t)v72, (double *)&__p);
        v14 = v13 + 40;
      }
      *((_QWORD *)&v94 + 1) = v14;
      v15 = *(_QWORD *)(v2 + 72);
      v16 = *(_QWORD *)(v2 + 80);
      while (v15 != v16)
      {
        *(_DWORD *)v57 = 3;
        __p = 0;
        if (v14 >= v95)
        {
          v14 = std::vector<quasar::PronChoice>::__emplace_back_slow_path<quasar::PronType,std::string const&,double>((uint64_t *)&v94, (int *)v57, v15, (double *)&__p);
        }
        else
        {
          std::allocator<quasar::PronChoice>::construct[abi:ne180100]<quasar::PronChoice,quasar::PronType,std::string const&,double>((uint64_t)&v95, v14, (int *)v57, v15, (double *)&__p);
          v14 += 40;
        }
        *((_QWORD *)&v94 + 1) = v14;
        v15 += 24;
      }
      if ((v72[23] & 0x80000000) != 0)
        operator delete(*(void **)v72);
      v4 = this;
      goto LABEL_44;
    }
LABEL_15:
    memset(&v90, 0, sizeof(v90));
    __p = 0;
    v64 = 0;
    v65 = 0;
    memset(v57, 0, 24);
    std::string::operator=((std::string *)v57, (const std::string *)v2);
    *(_DWORD *)&v57[24] = 0;
    v10 = v64;
    if ((unint64_t)v64 >= v65)
    {
      v12 = (__int128 *)std::vector<quasar::TextTokenizer::Token>::__push_back_slow_path<quasar::TextTokenizer::Token const&>((uint64_t *)&__p, (__int128 *)v57);
    }
    else
    {
      if ((v57[23] & 0x80000000) != 0)
      {
        std::string::__init_copy_ctor_external(v64, *(const std::string::value_type **)v57, *(std::string::size_type *)&v57[8]);
      }
      else
      {
        v11 = *(_OWORD *)v57;
        v64->__r_.__value_.__r.__words[2] = *(_QWORD *)&v57[16];
        *(_OWORD *)&v10->__r_.__value_.__l.__data_ = v11;
      }
      LODWORD(v10[1].__r_.__value_.__l.__data_) = *(_DWORD *)&v57[24];
      v12 = (__int128 *)&v10[1].__r_.__value_.__r.__words[1];
    }
    v64 = (std::string *)v12;
    size = v90.__r_.__value_.__l.__size_;
    if (v90.__r_.__value_.__l.__size_ >= v90.__r_.__value_.__r.__words[2])
    {
      v18 = std::vector<quasar::TextTokenizer::TokenString>::__push_back_slow_path<quasar::TextTokenizer::TokenString const&>((uint64_t *)&v90, (uint64_t)&__p);
    }
    else
    {
      *(_QWORD *)v90.__r_.__value_.__l.__size_ = 0;
      *(_QWORD *)(size + 8) = 0;
      *(_QWORD *)(size + 16) = 0;
      std::vector<quasar::TextTokenizer::Token>::__init_with_size[abi:ne180100]<quasar::TextTokenizer::Token*,quasar::TextTokenizer::Token*>((std::string *)size, (__int128 *)__p, (__int128 *)v64, ((char *)v64 - (_BYTE *)__p) >> 5);
      *(_DWORD *)(size + 24) = v66;
      v18 = size + 32;
    }
    v90.__r_.__value_.__l.__size_ = v18;
    quasar::PronGuessStats::PronGuessStats((quasar::PronGuessStats *)v72);
    quasar::G2P::getProns(*((_QWORD **)v4 + 63), (__int128 ***)&v90, v72, 3, (uint64_t *)&v88);
    std::vector<quasar::PronChoice>::__vdeallocate((uint64_t *)&v94);
    v94 = v88;
    v95 = v89;
    v89 = 0;
    v88 = 0uLL;
    v51 = (void **)&v88;
    std::vector<quasar::PronChoice>::__destroy_vector::operator()[abi:ne180100](&v51);
    std::__tree<std::string>::destroy((uint64_t)&v74, *((char **)&v74 + 1));
    if ((v57[23] & 0x80000000) != 0)
      operator delete(*(void **)v57);
    *(_QWORD *)v72 = &__p;
    std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)v72);
    *(_QWORD *)v72 = &v90;
    std::vector<quasar::TextTokenizer::TokenString>::__destroy_vector::operator()[abi:ne180100]((void ***)v72);
LABEL_44:
    quasar::LmeDataFactoryBase::PronSet::insert((uint64_t)v61, (uint64_t *)&v94);
    if (quasar::LmeDataFactoryBase::PronSet::size((quasar::LmeDataFactoryBase::PronSet *)v61))
    {
      *(_DWORD *)v72 = 1;
      v19 = v92;
      if ((unint64_t)v92 >= v93)
      {
        v20 = (char *)std::vector<quasar::LmeDataFactoryBase::Word>::__emplace_back_slow_path<std::string const&,char const*&,int,quasar::LmeDataFactoryBase::PronSet &>((uint64_t *)&v91, v2, &quasar::LME_TAG_EDIT, (unsigned int *)v72, (uint64_t)v61);
      }
      else
      {
        std::allocator<quasar::LmeDataFactoryBase::Word>::construct[abi:ne180100]<quasar::LmeDataFactoryBase::Word,std::string const&,char const*&,int,quasar::LmeDataFactoryBase::PronSet &>((uint64_t)&v93, (uint64_t)v92, v2, &quasar::LME_TAG_EDIT, (unsigned int *)v72, (uint64_t)v61);
        v20 = v19 + 80;
      }
      v92 = v20;
      __p = (void *)v2;
      v25 = (uint64_t **)(std::__hash_table<std::__hash_value_type<std::string,quasar::LmeDataFactoryBase::PronSet>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,quasar::LmeDataFactoryBase::PronSet>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,quasar::LmeDataFactoryBase::PronSet>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,quasar::LmeDataFactoryBase::PronSet>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v5, (unsigned __int8 *)v2, (uint64_t)&std::piecewise_construct, (__int128 **)&__p)+ 40);
      if (v25 != (uint64_t **)v61)
        std::__tree<std::__value_type<std::pair<quasar::PronType,std::string>,float>,std::__map_value_compare<std::pair<quasar::PronType,std::string>,std::__value_type<std::pair<quasar::PronType,std::string>,float>,std::less<std::pair<quasar::PronType,std::string>>,true>,std::allocator<std::__value_type<std::pair<quasar::PronType,std::string>,float>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::pair<quasar::PronType,std::string>,float>,std::__tree_node<std::__value_type<std::pair<quasar::PronType,std::string>,float>,void *> *,long>>(v25, *(_QWORD **)&v61[0], (_QWORD *)v61 + 1);
    }
    else if (quasar::gLogLevel >= 5)
    {
      v86 = 0u;
      v87 = 0u;
      v84 = 0u;
      v85 = 0u;
      v82 = 0u;
      v83 = 0u;
      v80 = 0u;
      v81 = 0u;
      v78 = 0u;
      v79 = 0u;
      v76 = 0u;
      v77 = 0u;
      v74 = 0u;
      v75 = 0u;
      v73 = 0u;
      memset(v72, 0, sizeof(v72));
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v72);
      v21 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v72, (uint64_t)"Edit LME: unable to get pron for word: ", 39);
      v22 = *(char *)(v2 + 23);
      if (v22 >= 0)
        v23 = v2;
      else
        v23 = *(_QWORD *)v2;
      if (v22 >= 0)
        v24 = *(unsigned __int8 *)(v2 + 23);
      else
        v24 = *(_QWORD *)(v2 + 8);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, v23, v24);
      quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)v72);
    }
LABEL_58:
    std::string::basic_string[abi:ne180100]<0>(v72, "\\NT-edit");
    __p = v72;
    v26 = std::__tree<std::__value_type<std::string,std::vector<std::vector<quasar::LmeDataFactoryBase::Word>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::vector<quasar::LmeDataFactoryBase::Word>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::vector<quasar::LmeDataFactoryBase::Word>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(&v96, (const void **)v72, (uint64_t)&std::piecewise_construct, (_OWORD **)&__p);
    v27 = (uint64_t *)v26 + 7;
    v28 = *((_QWORD *)v26 + 8);
    if (v28 >= *((_QWORD *)v26 + 9))
    {
      v29 = std::vector<std::vector<quasar::LmeDataFactoryBase::Word>>::__push_back_slow_path<std::vector<quasar::LmeDataFactoryBase::Word> const&>(v27, (__int128 **)&v91);
    }
    else
    {
      std::vector<std::vector<quasar::LmeDataFactoryBase::Word>>::__construct_one_at_end[abi:ne180100]<std::vector<quasar::LmeDataFactoryBase::Word> const&>((uint64_t)v27, (__int128 **)&v91);
      v29 = v28 + 24;
    }
    *((_QWORD *)v26 + 8) = v29;
    if ((v72[23] & 0x80000000) != 0)
      operator delete(*(void **)v72);
    *(_QWORD *)v72 = &v91;
    std::vector<quasar::LmeDataFactoryBase::Word>::__destroy_vector::operator()[abi:ne180100]((void ***)v72);
    *(_QWORD *)v72 = &v94;
    std::vector<quasar::PronChoice>::__destroy_vector::operator()[abi:ne180100]((void ***)v72);
    std::__tree<std::__value_type<std::pair<quasar::PronType,std::string>,float>,std::__map_value_compare<std::pair<quasar::PronType,std::string>,std::__value_type<std::pair<quasar::PronType,std::string>,float>,std::less<std::pair<quasar::PronType,std::string>>,true>,std::allocator<std::__value_type<std::pair<quasar::PronType,std::string>,float>>>::destroy((uint64_t)v61, *((char **)&v61[0] + 1));
    v2 += 224;
  }
  while (v2 != v3);
  v30 = *((_QWORD *)v4 + 64);
  v71 = 0;
  v70 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v30 + 48))(v30, &v70);
  v31 = v71;
  if (v71)
  {
    p_shared_owners = (unint64_t *)&v71->__shared_owners_;
    do
      v33 = __ldaxr(p_shared_owners);
    while (__stlxr(v33 - 1, p_shared_owners));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&__p);
  *((_QWORD *)&v94 + 1) = 0;
  v95 = 0;
  v93 = 0;
  *(_QWORD *)&v94 = (char *)&v94 + 8;
  v91 = &v92;
  v92 = 0;
  memset(v61, 0, sizeof(v61));
  v62 = 1065353216;
  memset(v57, 0, sizeof(v57));
  v58 = 1065353216;
  memset(v59, 0, sizeof(v59));
  v60 = 1065353216;
  v34 = *((_QWORD *)v4 + 64);
  *(_DWORD *)v72 = 3;
  v55 = 0;
  v56 = 0;
  v53 = 0;
  v54 = 0;
  v35 = (*(uint64_t (**)(uint64_t, uint64_t **, _QWORD, _BYTE *, _BYTE *, void **, __int128 *, char ***, _OWORD *, uint64_t *, uint64_t *, _QWORD, uint64_t *))(*(_QWORD *)v34 + 56))(v34, &v96, 0, v72, v57, &__p, &v94, &v91, v61, &v56, &v54, 0, &v53);
  v36 = v53;
  v53 = 0;
  if (v36)
    (*(void (**)(uint64_t))(*(_QWORD *)v36 + 8))(v36);
  v37 = v55;
  if (v55)
  {
    v38 = (unint64_t *)&v55->__shared_owners_;
    do
      v39 = __ldaxr(v38);
    while (__stlxr(v39 - 1, v38));
    if (!v39)
    {
      ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
      std::__shared_weak_count::__release_weak(v37);
    }
  }
  v40 = v56;
  v56 = 0;
  if (v40)
    (*(void (**)(uint64_t))(*(_QWORD *)v40 + 8))(v40);
  if (v35)
  {
    *a2 = 0;
    a2[1] = 0;
  }
  else
  {
    std::stringbuf::str();
    std::allocate_shared[abi:ne180100]<std::istringstream,std::allocator<std::istringstream>,std::string &,void>(&v90, &v88);
    _ZNSt3__115allocate_sharedB8ne180100IN6quasar7LmeDataENS_9allocatorIS2_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(&v51);
    v41 = (uint64_t *)v88;
    if ((_QWORD)v88)
    {
      v42 = v51;
      std::string::basic_string[abi:ne180100]<0>(v72, "");
      quasar::LmeData::fromStream((uint64_t)v42, v41, 0, v72);
      if ((v72[23] & 0x80000000) != 0)
        operator delete(*(void **)v72);
    }
    if (quasar::gLogLevel >= 5)
    {
      v86 = 0u;
      v87 = 0u;
      v84 = 0u;
      v85 = 0u;
      v82 = 0u;
      v83 = 0u;
      v80 = 0u;
      v81 = 0u;
      v78 = 0u;
      v79 = 0u;
      v76 = 0u;
      v77 = 0u;
      v74 = 0u;
      v75 = 0u;
      v73 = 0u;
      memset(v72, 0, sizeof(v72));
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v72);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v72, (uint64_t)"Edit LME: new words added, current cache count: ", 48);
      std::ostream::operator<<();
      quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)v72);
    }
    *(_DWORD *)v72 = 3;
    std::allocate_shared[abi:ne180100]<quasar::LmeContainer,std::allocator<quasar::LmeContainer>,std::shared_ptr<quasar::LmeData> &,char const(&)[1],quasar::LmeDataFactoryBase::LmeType,void>((uint64_t *)&v51, "", (unsigned int *)v72, a2);
    v43 = v52;
    if (v52)
    {
      v44 = (unint64_t *)&v52->__shared_owners_;
      do
        v45 = __ldaxr(v44);
      while (__stlxr(v45 - 1, v44));
      if (!v45)
      {
        ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
        std::__shared_weak_count::__release_weak(v43);
      }
    }
    v46 = (std::__shared_weak_count *)*((_QWORD *)&v88 + 1);
    if (*((_QWORD *)&v88 + 1))
    {
      v47 = (unint64_t *)(*((_QWORD *)&v88 + 1) + 8);
      do
        v48 = __ldaxr(v47);
      while (__stlxr(v48 - 1, v47));
      if (!v48)
      {
        ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
        std::__shared_weak_count::__release_weak(v46);
      }
    }
    if (SHIBYTE(v90.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v90.__r_.__value_.__l.__data_);
  }
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)v59);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)v57);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)v61);
  std::__tree<std::string>::destroy((uint64_t)&v91, v92);
  std::__tree<std::string>::destroy((uint64_t)&v94, *((char **)&v94 + 1));
  __p = (void *)*MEMORY[0x1E0DE4F60];
  *(void **)((char *)&__p + *((_QWORD *)__p - 3)) = *(void **)(MEMORY[0x1E0DE4F60] + 24);
  v64 = (std::string *)(MEMORY[0x1E0DE4FB8] + 16);
  if (v68 < 0)
    operator delete(v67);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1AF44D094](&v69);
  std::__tree<std::__value_type<std::string,std::vector<std::vector<quasar::LmeDataFactoryBase::Word>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::vector<quasar::LmeDataFactoryBase::Word>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::vector<quasar::LmeDataFactoryBase::Word>>>>>::destroy((uint64_t)&v96, v97[0]);
}

void sub_1ADC65C30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,void *a40)
{
  uint64_t v40;
  uint64_t v41;

  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&a19);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](v41 - 224);
  if (*(char *)(v41 - 169) < 0)
    operator delete(*(void **)(v41 - 192));
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(v40);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&a25);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&a35);
  std::__tree<std::string>::destroy(v41 - 168, *(char **)(v41 - 160));
  std::__tree<std::string>::destroy(v41 - 144, *(char **)(v41 - 136));
  std::ostringstream::~ostringstream((uint64_t)&a40);
  std::__tree<std::__value_type<std::string,std::vector<std::vector<quasar::LmeDataFactoryBase::Word>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::vector<quasar::LmeDataFactoryBase::Word>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::vector<quasar::LmeDataFactoryBase::Word>>>>>::destroy(v41 - 120, *(_QWORD **)(v41 - 112));
  _Unwind_Resume(a1);
}

_QWORD *quasar::SpeechRecognizer::initializeDecoderChainOutput@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, std::vector<std::wstring> *a4@<X3>, std::vector<std::wstring> **a5@<X8>)
{
  uint64_t *v9;
  __int128 *end;
  std::vector<std::wstring> *v11;
  uint64_t v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t value;
  void *__p[2];
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  std::string v25;

  v9 = (uint64_t *)(a1 + 648);
  std::allocate_shared[abi:ne180100]<quasar::DecoderChainOutput,std::allocator<quasar::DecoderChainOutput>,std::shared_ptr<quasar::SymbolTableList> &,std::shared_ptr<quasar::SpeechRequestResultData> &,void>(a2, (uint64_t *)(a1 + 648), a5);
  std::vector<std::string>::__clear[abi:ne180100]((uint64_t *)*a5);
  end = (__int128 *)a4->__end_;
  v11 = *a5;
  if ((__int128 *)a4->__begin_ == end)
  {
    a4 = *a5;
  }
  else if (v11 != a4)
  {
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>(v11, (std::string *)a4->__begin_, end, 0xAAAAAAAAAAAAAAABLL * (((char *)end - (char *)a4->__begin_) >> 3));
    a4 = *a5;
  }
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::operator=[abi:ne180100](&a4[25].__end_, (uint64_t *)(a3 + 224));
  v12 = *v9;
  std::string::basic_string[abi:ne180100]<0>(__p, "far_field");
  std::to_string(&v25, *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a1 + 280) + 24) + 34));
  quasar::SpeechRequestResultData::addAA(v12, (__int128 *)__p, &v25);
  if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v25.__r_.__value_.__l.__data_);
  if (v20 < 0)
    operator delete(__p[0]);
  v13 = *(_QWORD *)(*(_QWORD *)(a1 + 280) + 24);
  if (*(char *)(v13 + 199) < 0)
  {
    if (!*(_QWORD *)(v13 + 184))
      return std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::operator=[abi:ne180100](&(*a5)[23].__end_, (uint64_t *)(a3 + 240));
  }
  else if (!*(_BYTE *)(v13 + 199))
  {
    return std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::operator=[abi:ne180100](&(*a5)[23].__end_, (uint64_t *)(a3 + 240));
  }
  _ZNSt3__115allocate_sharedB8ne180100IN6quasar5PTreeENS_9allocatorIS2_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(__p);
  std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100]((uint64_t)&(*a5)[22].__end_cap_, (__int128 *)__p);
  v14 = (std::__shared_weak_count *)__p[1];
  if (__p[1])
  {
    v15 = (unint64_t *)((char *)__p[1] + 8);
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  value = (uint64_t)(*a5)[22].__end_cap_.__value_;
  std::string::basic_string[abi:ne180100]<0>(&v25, "version");
  LODWORD(__p[0]) = quasar::getType((quasar *)1);
  std::to_string((std::string *)&__p[1], 1);
  v21 = 0;
  v22 = 0;
  v23 = 0;
  v24 = 1;
  quasar::PTree::putChild(value, (uint64_t)&v25, (uint64_t)__p, 1);
  quasar::PTree::~PTree((quasar::PTree *)__p);
  if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v25.__r_.__value_.__l.__data_);
  return std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::operator=[abi:ne180100](&(*a5)[23].__end_, (uint64_t *)(a3 + 240));
}

void sub_1ADC66060(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  uint64_t v26;

  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](v26);
  _Unwind_Resume(a1);
}

uint64_t std::vector<quasar::LmeInfo>::push_back[abi:ne180100](uint64_t *a1, uint64_t *a2)
{
  uint64_t result;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  __int128 v18;
  _QWORD v19[5];

  v6 = a1[2];
  result = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD *)(result - 8);
  if (v7 >= v6)
  {
    v11 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v7 - *a1) >> 3);
    v12 = v11 + 1;
    if (v11 + 1 > 0x666666666666666)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v13 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v5 - *a1) >> 3);
    if (2 * v13 > v12)
      v12 = 2 * v13;
    if (v13 >= 0x333333333333333)
      v14 = 0x666666666666666;
    else
      v14 = v12;
    v19[4] = result;
    if (v14)
      v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::PronChoice>>(result, v14);
    else
      v15 = 0;
    v16 = &v15[40 * v11];
    v19[0] = v15;
    v19[1] = v16;
    v19[3] = &v15[40 * v14];
    v17 = *a2;
    *((_DWORD *)v16 + 2) = *((_DWORD *)a2 + 2);
    *(_QWORD *)v16 = v17;
    v18 = *((_OWORD *)a2 + 1);
    *((_QWORD *)v16 + 4) = a2[4];
    *((_OWORD *)v16 + 1) = v18;
    a2[3] = 0;
    a2[4] = 0;
    a2[2] = 0;
    v19[2] = v16 + 40;
    std::vector<quasar::LmeInfo>::__swap_out_circular_buffer(a1, v19);
    v10 = a1[1];
    result = std::__split_buffer<quasar::LmeInfo>::~__split_buffer((uint64_t)v19);
  }
  else
  {
    v8 = *a2;
    *(_DWORD *)(v7 + 8) = *((_DWORD *)a2 + 2);
    *(_QWORD *)v7 = v8;
    v9 = *((_OWORD *)a2 + 1);
    *(_QWORD *)(v7 + 32) = a2[4];
    *(_OWORD *)(v7 + 16) = v9;
    a2[3] = 0;
    a2[4] = 0;
    a2[2] = 0;
    v10 = v7 + 40;
    a1[1] = v7 + 40;
  }
  a1[1] = v10;
  return result;
}

void sub_1ADC66218(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<quasar::LmeInfo>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void quasar::SpeechRecognizer::updateFinalRecogStats(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  clockid_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  clockid_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  double v18;
  double v19;
  clockid_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  int v27;
  int v28;
  uint64_t v29;
  size_t v30;
  std::string *v31;
  const void *v32;
  std::string *v33;
  std::string::size_type size;
  std::string *v35;
  __int128 v36;
  std::string *v37;
  __int128 v38;
  std::string *v39;
  std::string::size_type v40;
  std::string *v41;
  __int128 v42;
  void *__p[2];
  char v44;
  std::string v45;
  std::string v46;
  std::string v47;
  std::string v48;
  std::string v49;
  __int128 v50;
  std::string::size_type v51;
  __int128 v52;
  char v53;

  quasar::SpeechRequestData::getRecogRequestTimer(*(_QWORD *)(a1 + 280), &v52);
  **(double **)(a1 + 648) = **(double **)(a1 + 648)
                          + (kaldi::Timer::ElapsedCPU((kaldi::Timer *)v52, v6) - *(double *)(a1 + 352)) * 1000.0;
  v7 = (std::__shared_weak_count *)*((_QWORD *)&v52 + 1);
  if (*((_QWORD *)&v52 + 1))
  {
    v8 = (unint64_t *)(*((_QWORD *)&v52 + 1) + 8);
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  v10 = *(_QWORD *)(a1 + 648);
  std::string::basic_string[abi:ne180100]<0>(&v52, "RecogCpuTimeMs");
  quasar::SpeechRequestResultData::addAA(v10, &v52, *(double **)(a1 + 648), 1);
  if (v53 < 0)
    operator delete((void *)v52);
  quasar::SpeechRequestData::getRecogRequestTimer(*(_QWORD *)(a1 + 280), &v52);
  v11 = v52;
  *(double *)(*(_QWORD *)(a1 + 648) + 8) = *(double *)(*(_QWORD *)(a1 + 648) + 8)
                                           + (kaldi::Timer::GetSeconds((kaldi::Timer *)0x10, v12)
                                            - *(double *)(v11 + 16)
                                            - *(double *)(a1 + 360))
                                           * 1000.0;
  v13 = (std::__shared_weak_count *)*((_QWORD *)&v52 + 1);
  if (*((_QWORD *)&v52 + 1))
  {
    v14 = (unint64_t *)(*((_QWORD *)&v52 + 1) + 8);
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  v16 = *(_QWORD *)(a1 + 648);
  std::string::basic_string[abi:ne180100]<0>(&v52, "RecogThreadCpuTimeMs");
  quasar::SpeechRequestResultData::addAA(v16, &v52, (double *)(*(_QWORD *)(a1 + 648) + 8), 1);
  if (v53 < 0)
    operator delete((void *)v52);
  v17 = *a2;
  v18 = *(double *)(*a2 + 456);
  if (v18 > 0.0)
  {
    v19 = *(double *)(v17 + 464);
    if (v19 < 0.0)
    {
      quasar::SpeechRequestData::getRecogRequestTimer(*(_QWORD *)(a1 + 280), &v52);
      *(double *)(*a2 + 464) = kaldi::Timer::GetSeconds((kaldi::Timer *)5, v20);
      v21 = (std::__shared_weak_count *)*((_QWORD *)&v52 + 1);
      if (*((_QWORD *)&v52 + 1))
      {
        v22 = (unint64_t *)(*((_QWORD *)&v52 + 1) + 8);
        do
          v23 = __ldaxr(v22);
        while (__stlxr(v23 - 1, v22));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
          std::__shared_weak_count::__release_weak(v21);
        }
      }
      v18 = *(double *)(*a2 + 456);
      v19 = *(double *)(*a2 + 464);
    }
    v24 = *(_QWORD *)(a1 + 648);
    *(_DWORD *)(v24 + 120) = (int)((double)*(int *)(v24 + 120) + (v19 - v18) * 1000.0);
    std::string::basic_string[abi:ne180100]<0>(&v52, "EosToPreItnMs");
    *(double *)&v50 = (double)*(int *)(*(_QWORD *)(a1 + 648) + 120);
    quasar::SpeechRequestResultData::addAA(v24, &v52, (double *)&v50, 1);
    if (v53 < 0)
      operator delete((void *)v52);
    v17 = *a2;
  }
  if (*(char *)(v17 + 1055) < 0)
  {
    if (!*(_QWORD *)(v17 + 1040))
      return;
  }
  else if (!*(_BYTE *)(v17 + 1055))
  {
    return;
  }
  v25 = *(_QWORD *)(a3 + 80);
  if (v25)
  {
    v26 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v25 + 16) + 24))(*(_QWORD *)(v25 + 16));
    v27 = *(_DWORD *)(*(_QWORD *)(a1 + 280) + 8);
    v28 = *(_DWORD *)(*a2 + 576);
    v29 = *(_QWORD *)(a1 + 648);
    std::string::basic_string[abi:ne180100]<0>(&v52, "lm_interp_weights");
    if (*(char *)(v17 + 1055) >= 0)
      v30 = *(unsigned __int8 *)(v17 + 1055);
    else
      v30 = *(_QWORD *)(v17 + 1040);
    v31 = &v47;
    std::string::basic_string[abi:ne180100]((uint64_t)&v47, v30 + 1);
    if ((v47.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v31 = (std::string *)v47.__r_.__value_.__r.__words[0];
    if (v30)
    {
      if (*(char *)(v17 + 1055) >= 0)
        v32 = (const void *)(v17 + 1032);
      else
        v32 = *(const void **)(v17 + 1032);
      memmove(v31, v32, v30);
    }
    *(_WORD *)((char *)&v31->__r_.__value_.__l.__data_ + v30) = 58;
    std::to_string(&v46, v27 * v26);
    if ((v46.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v33 = &v46;
    else
      v33 = (std::string *)v46.__r_.__value_.__r.__words[0];
    if ((v46.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v46.__r_.__value_.__r.__words[2]);
    else
      size = v46.__r_.__value_.__l.__size_;
    v35 = std::string::append(&v47, (const std::string::value_type *)v33, size);
    v36 = *(_OWORD *)&v35->__r_.__value_.__l.__data_;
    v48.__r_.__value_.__r.__words[2] = v35->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v48.__r_.__value_.__l.__data_ = v36;
    v35->__r_.__value_.__l.__size_ = 0;
    v35->__r_.__value_.__r.__words[2] = 0;
    v35->__r_.__value_.__r.__words[0] = 0;
    v37 = std::string::append(&v48, ":");
    v38 = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
    v49.__r_.__value_.__r.__words[2] = v37->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v49.__r_.__value_.__l.__data_ = v38;
    v37->__r_.__value_.__l.__size_ = 0;
    v37->__r_.__value_.__r.__words[2] = 0;
    v37->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v45, (v28 + v27) * v26);
    if ((v45.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v39 = &v45;
    else
      v39 = (std::string *)v45.__r_.__value_.__r.__words[0];
    if ((v45.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v40 = HIBYTE(v45.__r_.__value_.__r.__words[2]);
    else
      v40 = v45.__r_.__value_.__l.__size_;
    v41 = std::string::append(&v49, (const std::string::value_type *)v39, v40);
    v42 = *(_OWORD *)&v41->__r_.__value_.__l.__data_;
    v51 = v41->__r_.__value_.__r.__words[2];
    v50 = v42;
    v41->__r_.__value_.__l.__size_ = 0;
    v41->__r_.__value_.__r.__words[2] = 0;
    v41->__r_.__value_.__r.__words[0] = 0;
    std::string::basic_string[abi:ne180100]<0>(__p, ";");
    quasar::SpeechRequestResultData::appendAA(v29, &v52, (uint64_t)&v50, (uint64_t)__p);
    if (v44 < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v51) < 0)
      operator delete((void *)v50);
    if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v45.__r_.__value_.__l.__data_);
    if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v49.__r_.__value_.__l.__data_);
    if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v48.__r_.__value_.__l.__data_);
    if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v46.__r_.__value_.__l.__data_);
    if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v47.__r_.__value_.__l.__data_);
    if (v53 < 0)
      operator delete((void *)v52);
  }
}

void sub_1ADC666C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,uint64_t a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45)
{
  uint64_t v45;

  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](v45 - 104);
  _Unwind_Resume(a1);
}

void quasar::SpeechRecognizer::updateFrameDataAtUtteranceEnd(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;

  kaldi::OnlineFeatureMatrix::ResetAedFeat(*(kaldi::OnlineFeatureMatrix **)(a3 + 80), *(_DWORD *)(*a2 + 576));
  kaldi::OnlineFeatureMatrix::ResetFusionFeat(*(kaldi::OnlineFeatureMatrix **)(a3 + 80), *(_DWORD *)(*a2 + 576));
  v5 = *a2;
  *(_DWORD *)(a3 + 204) += *(_DWORD *)(*a2 + 576);
  *(_BYTE *)(a3 + 212) = *(_BYTE *)(v5 + 580);
}

uint64_t quasar::SpeechRecognizer::writeFinalResults(uint64_t a1, char *a2, uint64_t *a3, uint64_t a4)
{
  int v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  int v11;
  int v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  double v16;
  double v17;
  uint64_t v18;
  double v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  double *v29;
  clockid_t v30;
  double Seconds;
  clockid_t v32;
  double *v33;
  double v34;
  uint64_t v35;
  uint64_t v36;
  double v37;
  uint64_t v38;
  uint64_t v39;
  double v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  double v45;
  uint64_t v46;
  double v47;
  uint64_t v48;
  unsigned __int8 v49;
  const void *v50;
  std::__shared_weak_count *v51;
  unint64_t *p_shared_owners;
  unint64_t v53;
  uint64_t v54;
  unint64_t v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  std::mutex *v62;
  double Snr;
  uint64_t v64;
  uint64_t v65;
  _QWORD *v66;
  int v67;
  const void *v68;
  quasar::ResultStreamStabilizer *v69;
  quasar::ResultStreamStabilizer *v70;
  std::__shared_weak_count *v71;
  unint64_t *v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  std::string::size_type v76;
  std::string::size_type size;
  unint64_t *v78;
  unint64_t v79;
  std::__shared_weak_count *v80;
  unint64_t *v81;
  unint64_t v82;
  unint64_t *v83;
  unint64_t v84;
  std::__shared_weak_count *v85;
  unint64_t *v86;
  unint64_t v87;
  unint64_t *v88;
  unint64_t v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  char v93;
  char v94;
  uint64_t *v95;
  _DWORD *v96;
  unsigned int v97;
  unsigned int v98;
  BOOL v100;
  char v101;
  unsigned int v102;
  uint64_t v103;
  std::string *v104;
  __int128 v105;
  std::string *v106;
  __int128 v107;
  std::string *v108;
  std::string::size_type v109;
  std::string *v110;
  __int128 v111;
  const void *v112;
  std::__shared_weak_count *v113;
  unint64_t *v114;
  unint64_t v115;
  unint64_t v116;
  uint64_t v117;
  std::__shared_weak_count *v118;
  unint64_t *v119;
  unint64_t v120;
  unint64_t *v121;
  unint64_t v122;
  std::__shared_weak_count *v123;
  unint64_t *v124;
  unint64_t v125;
  unint64_t *v126;
  unint64_t v127;
  uint64_t v128;
  std::__shared_weak_count *v129;
  uint64_t v130;
  unint64_t *v131;
  unint64_t v132;
  uint64_t v133;
  _QWORD *v134;
  _QWORD *v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  std::__shared_weak_count *v142;
  unint64_t *v143;
  unint64_t v144;
  std::__shared_weak_count *v145;
  unint64_t *v146;
  unint64_t v147;
  unint64_t *v148;
  unint64_t v149;
  std::__shared_weak_count *v150;
  unint64_t *v151;
  unint64_t v152;
  unint64_t *v153;
  unint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  const quasar::Token **v159;
  uint64_t v160;
  std::string *v161;
  __int128 v162;
  uint64_t v163;
  uint64_t *v164;
  uint64_t *v165;
  _QWORD *v166;
  int v167;
  uint64_t *v168;
  uint64_t **v169;
  uint64_t *v170;
  std::__shared_weak_count *v171;
  unint64_t *v172;
  unint64_t v173;
  uint64_t v174;
  unint64_t *v175;
  unint64_t v176;
  std::__shared_weak_count *v177;
  unint64_t *v178;
  unint64_t v179;
  std::__shared_weak_count *v180;
  unint64_t *v181;
  unint64_t v182;
  quasar::SpeechRequestData *v183;
  unint64_t *v184;
  unint64_t v185;
  unint64_t *v186;
  unint64_t v187;
  uint64_t v188;
  std::__shared_weak_count *v189;
  uint64_t v190;
  unint64_t *v191;
  unint64_t v192;
  uint64_t v193;
  uint64_t **v194;
  uint64_t v195;
  uint64_t v196;
  _QWORD *v197;
  _QWORD *v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t IsFinal;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  std::string *v212;
  std::string *v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t UtteranceAfterResume;
  uint64_t v218;
  uint64_t v219;
  std::__shared_weak_count *v220;
  unint64_t *v221;
  unint64_t v222;
  BOOL v223;
  std::__shared_weak_count *v224;
  unint64_t *v225;
  unint64_t v226;
  uint64_t v227;
  uint64_t **v228;
  uint64_t **v229;
  uint64_t v230;
  const quasar::Token **v231;
  std::string *v232;
  __int128 v233;
  std::string *v234;
  __int128 v235;
  float v236;
  uint64_t v237;
  uint64_t v238;
  std::__shared_weak_count *v239;
  unint64_t *v240;
  unint64_t v241;
  unint64_t *v242;
  unint64_t v243;
  std::__shared_weak_count *v244;
  unint64_t *v245;
  unint64_t v246;
  unint64_t *v247;
  unint64_t v248;
  uint64_t v249;
  std::__shared_weak_count *v250;
  uint64_t v251;
  unint64_t *v252;
  unint64_t v253;
  uint64_t v254;
  _QWORD *WordClipped;
  _QWORD *v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t started;
  uint64_t v261;
  std::__shared_weak_count *v262;
  unint64_t *v263;
  unint64_t v264;
  _QWORD *v266;
  std::string *v267;
  std::string::size_type v268;
  _QWORD *v269;
  uint64_t v270;
  uint64_t v271;
  unsigned int v272;
  unsigned int v273;
  uint64_t v275[2];
  uint64_t v276[2];
  uint64_t v277;
  std::__shared_weak_count *v278;
  uint64_t v279[2];
  uint64_t v280[2];
  std::string v281;
  uint64_t v282;
  std::__shared_weak_count *v283;
  quasar::SpeechRequestData *v284[2];
  void **v285;
  std::__shared_weak_count *v286;
  uint64_t *v287;
  std::__shared_weak_count *v288;
  std::string v289;
  std::string v290;
  uint64_t v291[2];
  uint64_t v292[2];
  std::string v293;
  std::string v294;
  float v295;
  double v296;
  __int128 v297;
  __int128 v298;
  __int128 v299;
  __int128 v300;
  __int128 v301;
  __int128 v302;
  __int128 v303;
  __int128 v304;
  __int128 v305;
  __int128 v306;
  __int128 v307;
  __int128 v308;
  __int128 v309;
  __int128 v310;
  __int128 v311;
  __int128 v312;
  __int128 v313;
  uint64_t v314;
  std::__shared_weak_count *v315;
  void *__p[2];
  __int128 v317;
  __int128 v318;
  __int128 v319;
  __int128 v320;
  __int128 v321;
  __int128 v322;
  __int128 v323;
  __int128 v324;
  __int128 v325;
  __int128 v326;
  __int128 v327;
  __int128 v328;
  __int128 v329;
  __int128 v330;
  __int128 v331;
  __int128 v332;
  uint64_t v333[2];
  uint64_t v334[2];
  __int128 v335;
  uint64_t v336;
  double v337;
  double v338[3];

  v7 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a4 + 80) + 16) + 24))(*(_QWORD *)(*(_QWORD *)(a4 + 80) + 16));
  v8 = *(_QWORD *)(a1 + 280);
  v9 = *a3;
  if (*(_BYTE *)(*(_QWORD *)(v8 + 24) + 36))
    v10 = *(_BYTE *)(v9 + 580);
  else
    v10 = 1;
  v11 = *(_DWORD *)(v8 + 8);
  v12 = *(_DWORD *)(v9 + 576);
  *(_BYTE *)a4 = v10;
  v337 = 0.0;
  v338[0] = 0.0;
  quasar::MultiAudioBuffer::getBuffer(*(_QWORD *)(v8 + 144), 0, __p);
  quasar::RecogAudioBuffer::stats((quasar::RecogAudioBuffer *)__p[0], v338, &v337);
  v13 = (std::__shared_weak_count *)__p[1];
  if (__p[1])
  {
    v14 = (unint64_t *)((char *)__p[1] + 8);
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  v16 = *(double *)(*(_QWORD *)(a4 + 80) + 160);
  v17 = v337;
  v18 = *(_QWORD *)(a1 + 648);
  std::string::basic_string[abi:ne180100]<0>(__p, "audioReadTime");
  std::to_string((std::string *)&v297, v337);
  quasar::SpeechRequestResultData::addDump(v18, (__int128 *)__p, (const std::string *)&v297);
  if (SBYTE7(v298) < 0)
    operator delete((void *)v297);
  v19 = v16 - v17;
  if (SBYTE7(v317) < 0)
    operator delete(__p[0]);
  v20 = *(_QWORD *)(a1 + 648);
  std::string::basic_string[abi:ne180100]<0>(__p, "featureComputeTime");
  std::to_string((std::string *)&v297, v19);
  quasar::SpeechRequestResultData::addDump(v20, (__int128 *)__p, (const std::string *)&v297);
  if (SBYTE7(v298) < 0)
    operator delete((void *)v297);
  if (SBYTE7(v317) < 0)
    operator delete(__p[0]);
  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 280) + 24) + 35))
  {
    v21 = *(_QWORD *)(a1 + 648);
    std::string::basic_string[abi:ne180100]<0>(__p, "whisperScore");
    std::to_string((std::string *)&v297, *(float *)(*a3 + 512));
    quasar::SpeechRequestResultData::addDump(v21, (__int128 *)__p, (const std::string *)&v297);
    if (SBYTE7(v298) < 0)
      operator delete((void *)v297);
    if (SBYTE7(v317) < 0)
      operator delete(__p[0]);
    v22 = *(_QWORD *)(a1 + 648);
    std::string::basic_string[abi:ne180100]<0>(__p, "whisperDetected");
    std::to_string((std::string *)&v297, *(unsigned __int8 *)(*a3 + 516));
    quasar::SpeechRequestResultData::addDump(v22, (__int128 *)__p, (const std::string *)&v297);
    if (SBYTE7(v298) < 0)
      operator delete((void *)v297);
    if (SBYTE7(v317) < 0)
      operator delete(__p[0]);
  }
  v23 = v12 * v7;
  v24 = *(_QWORD *)(a1 + 648);
  std::string::basic_string[abi:ne180100]<0>(__p, "utteranceLength");
  std::to_string((std::string *)&v297, (double)v23 / 1000.0);
  quasar::SpeechRequestResultData::addDump(v24, (__int128 *)__p, (const std::string *)&v297);
  if (SBYTE7(v298) < 0)
    operator delete((void *)v297);
  if (SBYTE7(v317) < 0)
    operator delete(__p[0]);
  v25 = *(_QWORD *)(a1 + 648);
  std::string::basic_string[abi:ne180100]<0>(__p, "audioEndTime");
  std::to_string((std::string *)&v297, v338[0]);
  quasar::SpeechRequestResultData::addDump(v25, (__int128 *)__p, (const std::string *)&v297);
  if (SBYTE7(v298) < 0)
    operator delete((void *)v297);
  v26 = v11 * v7;
  if (SBYTE7(v317) < 0)
    operator delete(__p[0]);
  v27 = *(_QWORD *)(a1 + 648);
  std::string::basic_string[abi:ne180100]<0>(__p, "utteranceEndTime");
  std::to_string((std::string *)&v297, (double)(v23 + v26) / 1000.0);
  quasar::SpeechRequestResultData::addDump(v27, (__int128 *)__p, (const std::string *)&v297);
  if (SBYTE7(v298) < 0)
    operator delete((void *)v297);
  if (SBYTE7(v317) < 0)
    operator delete(__p[0]);
  v28 = *(_QWORD *)(a1 + 648);
  std::string::basic_string[abi:ne180100]<0>(__p, "timeElapsedSinceRunAsyncCall");
  v29 = *(double **)(*(_QWORD *)(a1 + 280) + 200);
  Seconds = kaldi::Timer::GetSeconds((kaldi::Timer *)5, v30);
  std::to_string((std::string *)&v297, Seconds - *v29);
  quasar::SpeechRequestResultData::addDump(v28, (__int128 *)__p, (const std::string *)&v297);
  if (SBYTE7(v298) < 0)
    operator delete((void *)v297);
  if (SBYTE7(v317) < 0)
    operator delete(__p[0]);
  v33 = *(double **)(*(_QWORD *)(a1 + 280) + 200);
  v34 = kaldi::Timer::GetSeconds((kaldi::Timer *)5, v32) - *v33 - *(double *)(a1 + 344);
  v35 = *(_QWORD *)(a1 + 648);
  std::string::basic_string[abi:ne180100]<0>(__p, "timeElapsedSinceRunSyncCall");
  std::to_string((std::string *)&v297, v34);
  quasar::SpeechRequestResultData::addDump(v35, (__int128 *)__p, (const std::string *)&v297);
  if (SBYTE7(v298) < 0)
    operator delete((void *)v297);
  if (SBYTE7(v317) < 0)
    operator delete(__p[0]);
  v36 = *(_QWORD *)(a1 + 648);
  std::string::basic_string[abi:ne180100]<0>(__p, "EagerUsed");
  v37 = 0.0;
  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 280) + 24) + 48))
    v37 = 1.0;
  *(double *)&v297 = v37;
  quasar::SpeechRequestResultData::addAA(v36, (__int128 *)__p, (double *)&v297, 0);
  if (SBYTE7(v317) < 0)
    operator delete(__p[0]);
  v38 = *(_QWORD *)(a1 + 648);
  std::string::basic_string[abi:ne180100]<0>(__p, "recognizer-components");
  quasar::SpeechRequestResultData::addAA(v38, (__int128 *)__p, (const std::string *)(*(_QWORD *)(a4 + 8) + 104));
  if (SBYTE7(v317) < 0)
    operator delete(__p[0]);
  v39 = *(_QWORD *)(a1 + 648);
  std::string::basic_string[abi:ne180100]<0>(__p, "DidConfNetCombination");
  v40 = 0.0;
  if (*(_BYTE *)(*a3 + 517))
    v40 = 1.0;
  quasar::SpeechRequestResultData::addDumpAA(v39, (__int128 *)__p, 0, v40);
  if (SBYTE7(v317) < 0)
    operator delete(__p[0]);
  v41 = *(_QWORD *)(a1 + 648);
  std::string::basic_string[abi:ne180100]<0>(__p, "ConfNetWaitTimeMs");
  quasar::SpeechRequestResultData::addDumpAA(v41, (__int128 *)__p, 0, *(double *)(*a3 + 520));
  if (SBYTE7(v317) < 0)
    operator delete(__p[0]);
  v42 = *(_QWORD *)(a1 + 648);
  std::string::basic_string[abi:ne180100]<0>(__p, "ConfNetworkCombinedNbestSourceID");
  quasar::SpeechRequestResultData::addDumpAA(v42, (__int128 *)__p, 0, (double)*(int *)(*a3 + 528));
  if (SBYTE7(v317) < 0)
    operator delete(__p[0]);
  v43 = *(_QWORD *)(a1 + 648);
  std::string::basic_string[abi:ne180100]<0>(__p, "ConfNetworkCombinerStartTimeMs");
  quasar::SpeechRequestResultData::addDumpAA(v43, (__int128 *)__p, 0, *(double *)(*a3 + 536));
  if (SBYTE7(v317) < 0)
    operator delete(__p[0]);
  v44 = *(_QWORD *)(a1 + 648);
  std::string::basic_string[abi:ne180100]<0>(__p, "LastWordClipped");
  v45 = 0.0;
  if (*(_BYTE *)(*a3 + 144))
    v45 = 1.0;
  quasar::SpeechRequestResultData::addDumpAA(v44, (__int128 *)__p, 1, v45);
  if (SBYTE7(v317) < 0)
    operator delete(__p[0]);
  v46 = *(_QWORD *)(a1 + 648);
  std::string::basic_string[abi:ne180100]<0>(__p, "WordAligned");
  v47 = 0.0;
  if (*(_BYTE *)(*a3 + 145))
    v47 = 1.0;
  quasar::SpeechRequestResultData::addDumpAA(v46, (__int128 *)__p, 1, v47);
  if (SBYTE7(v317) < 0)
    operator delete(__p[0]);
  if (*(_QWORD *)(a1 + 712))
  {
    v48 = *(_QWORD *)(a1 + 648);
    std::string::basic_string[abi:ne180100]<0>(__p, "ANEUsed");
    v49 = atomic_load((unsigned __int8 *)(*(_QWORD *)(a1 + 712) + 8));
    std::to_string((std::string *)&v297, v49 & 1);
    quasar::SpeechRequestResultData::addAA(v48, (__int128 *)__p, (const std::string *)&v297);
    if (SBYTE7(v298) < 0)
      operator delete((void *)v297);
    if (SBYTE7(v317) < 0)
      operator delete(__p[0]);
  }
  v335 = 0uLL;
  v336 = 0;
  if (*(_QWORD *)(*a3 + 544))
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)__p);
    quasar::PTree::writeJson(*(quasar::PTreeHelper **)(*a3 + 544), __p, 1);
    std::stringbuf::str();
    if (SHIBYTE(v336) < 0)
      operator delete((void *)v335);
    v335 = v297;
    v336 = v298;
    __p[0] = *(void **)MEMORY[0x1E0DE4F60];
    *(void **)((char *)__p + *((_QWORD *)__p[0] - 3)) = *(void **)(MEMORY[0x1E0DE4F60] + 24);
    __p[1] = (void *)(MEMORY[0x1E0DE4FB8] + 16);
    if (SHIBYTE(v321) < 0)
      operator delete(*((void **)&v320 + 1));
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    MEMORY[0x1AF44D094](&v323);
  }
  v50 = *(const void **)(a4 + 240);
  if (!v50)
    goto LABEL_99;
  v51 = *(std::__shared_weak_count **)(a4 + 248);
  if (v51)
  {
    p_shared_owners = (unint64_t *)&v51->__shared_owners_;
    do
      v53 = __ldxr(p_shared_owners);
    while (__stxr(v53 + 1, p_shared_owners));
    v54 = *(_QWORD *)(*a3 + 152);
    do
      v55 = __ldaxr(p_shared_owners);
    while (__stlxr(v55 - 1, p_shared_owners));
    if (v55)
    {
      if (v54)
        goto LABEL_90;
LABEL_325:
      if (quasar::gLogLevel >= 4)
      {
        v331 = 0u;
        v332 = 0u;
        v329 = 0u;
        v330 = 0u;
        v327 = 0u;
        v328 = 0u;
        v325 = 0u;
        v326 = 0u;
        v323 = 0u;
        v324 = 0u;
        v321 = 0u;
        v322 = 0u;
        v319 = 0u;
        v320 = 0u;
        v317 = 0u;
        v318 = 0u;
        *(_OWORD *)__p = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Write results got a NULL lattice", 32);
        quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)__p);
      }
      if (*(_DWORD *)(*(_QWORD *)(a1 + 280) + 4))
      {
        v238 = *(_QWORD *)(a1 + 648);
        std::string::basic_string[abi:ne180100]<0>(__p, "uttDetectAbort");
        std::string::basic_string[abi:ne180100]<0>(&v297, "NullLattice");
        quasar::SpeechRequestResultData::addDump(v238, (__int128 *)__p, (const std::string *)&v297);
        if (SBYTE7(v298) < 0)
          operator delete((void *)v297);
        if (SBYTE7(v317) < 0)
          operator delete(__p[0]);
      }
      v239 = (std::__shared_weak_count *)a3[1];
      v334[0] = *a3;
      v334[1] = (uint64_t)v239;
      if (v239)
      {
        v240 = (unint64_t *)&v239->__shared_owners_;
        do
          v241 = __ldxr(v240);
        while (__stxr(v241 + 1, v240));
      }
      quasar::SpeechRecognizer::updateFinalRecogStats(a1, v334, a4);
      if (v239)
      {
        v242 = (unint64_t *)&v239->__shared_owners_;
        do
          v243 = __ldaxr(v242);
        while (__stlxr(v243 - 1, v242));
        if (!v243)
        {
          ((void (*)(std::__shared_weak_count *))v239->__on_zero_shared)(v239);
          std::__shared_weak_count::__release_weak(v239);
        }
      }
      v244 = (std::__shared_weak_count *)a3[1];
      v333[0] = *a3;
      v333[1] = (uint64_t)v244;
      if (v244)
      {
        v245 = (unint64_t *)&v244->__shared_owners_;
        do
          v246 = __ldxr(v245);
        while (__stxr(v246 + 1, v245));
      }
      quasar::SpeechRecognizer::writeToOfflineRecogResultStream(a1, v333);
      if (v244)
      {
        v247 = (unint64_t *)&v244->__shared_owners_;
        do
          v248 = __ldaxr(v247);
        while (__stlxr(v248 - 1, v247));
        if (!v248)
        {
          ((void (*)(std::__shared_weak_count *))v244->__on_zero_shared)(v244);
          std::__shared_weak_count::__release_weak(v244);
        }
      }
      quasar::RecogResult::RecogResult((quasar::RecogResult *)__p);
      v249 = *(_QWORD *)(a1 + 280);
      v251 = *(_QWORD *)(v249 + 24);
      v250 = *(std::__shared_weak_count **)(v249 + 32);
      v314 = v251;
      v315 = v250;
      if (v250)
      {
        v252 = (unint64_t *)&v250->__shared_owners_;
        do
          v253 = __ldxr(v252);
        while (__stxr(v253 + 1, v252));
      }
      v254 = quasar::RecogResult::setParams((uint64_t)__p, &v314);
      WordClipped = (_QWORD *)quasar::RecogResult::setLastWordClipped(v254, *(_BYTE *)(*a3 + 144));
      v256 = quasar::RecogResult::setLmeStatus(WordClipped, (uint64_t *)(*a3 + 584));
      v257 = quasar::RecogResult::setJsonInfo((uint64_t)v256, (uint64_t)&v335);
      v258 = quasar::RecogResult::setWhisperScore(v257, *(float *)(*a3 + 512));
      v259 = quasar::RecogResult::setWhisperDetected(v258, *(_BYTE *)(*a3 + 516));
      started = quasar::RecogResult::setUtteranceStartMillis(v259, v26);
      v261 = quasar::RecogResult::setUtteranceDurationMillis(started, v23);
      quasar::RecogResult::setIsFinal(v261, *(_BYTE *)a4);
      v262 = v315;
      if (v315)
      {
        v263 = (unint64_t *)&v315->__shared_owners_;
        do
          v264 = __ldaxr(v263);
        while (__stlxr(v264 - 1, v263));
        if (!v264)
        {
          ((void (*)(std::__shared_weak_count *))v262->__on_zero_shared)(v262);
          std::__shared_weak_count::__release_weak(v262);
        }
      }
      (*(void (**)(_QWORD, void **, _QWORD))(**(_QWORD **)(*a3 + 560) + 40))(*(_QWORD *)(*a3 + 560), __p, 0);
      if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 280) + 24) + 52))
      {
        if (quasar::gLogLevel >= 4)
        {
          v312 = 0u;
          v313 = 0u;
          v310 = 0u;
          v311 = 0u;
          v308 = 0u;
          v309 = 0u;
          v306 = 0u;
          v307 = 0u;
          v304 = 0u;
          v305 = 0u;
          v302 = 0u;
          v303 = 0u;
          v300 = 0u;
          v301 = 0u;
          v298 = 0u;
          v299 = 0u;
          v297 = 0u;
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v297);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v297, (uint64_t)"Recognition is going to fail because of NULL lattice. Padding labels to align with features", 91);
          quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&v297);
        }
        v297 = 0uLL;
        *(_QWORD *)&v298 = 0;
        quasar::SpeechRecognizer::concatenateLabels(a1, (_QWORD *)a4, (uint64_t **)&v297, *(_DWORD *)(*a3 + 576));
      }
      goto LABEL_360;
    }
    ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
    std::__shared_weak_count::__release_weak(v51);
    if (!v54)
      goto LABEL_325;
  }
  else if (!*(_QWORD *)(*a3 + 152))
  {
    goto LABEL_325;
  }
LABEL_90:
  v50 = *(const void **)(a4 + 240);
  if (v50)
  {
LABEL_91:
    {
      v56 = *(std::__shared_weak_count **)(a4 + 248);
      if (v56)
      {
        v57 = (unint64_t *)&v56->__shared_owners_;
        do
          v58 = __ldxr(v57);
        while (__stxr(v58 + 1, v57));
        do
          v59 = __ldaxr(v57);
        while (__stlxr(v59 - 1, v57));
        if (!v59)
        {
          ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
          std::__shared_weak_count::__release_weak(v56);
        }
      }
      quasar::Decoder::calculateNBest((uint64_t)a2, a3, *(_DWORD *)(*(_QWORD *)(a1 + 280) + 16));
    }
  }
LABEL_99:
  v60 = *a3;
  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 280) + 24) + 52))
  {
    quasar::SpeechRecognizer::concatenateLabels(a1, (_QWORD *)a4, (uint64_t **)(v60 + 984), *(_DWORD *)(v60 + 576));
    v60 = *a3;
  }
  v61 = *(_QWORD *)(v60 + 352);
  if (v61
    && (v62 = *(std::mutex **)(a4 + 112)) != 0
    && (Snr = quasar::SpeechRecognizer::getSnr(v61, v62, *(_DWORD *)(a4 + 204)), Snr != -1000.0))
  {
    v64 = *(_QWORD *)(a1 + 648);
  }
  else
  {
    v64 = *(_QWORD *)(a1 + 648);
    Snr = *(double *)(v64 + 24);
  }
  v296 = Snr;
  std::string::basic_string[abi:ne180100]<0>(__p, "SNR");
  quasar::SpeechRequestResultData::addAA(v64, (__int128 *)__p, &v296, 1);
  if (SBYTE7(v317) < 0)
    operator delete(__p[0]);
  *(double *)(*(_QWORD *)(a1 + 648) + 24) = v296;
  v65 = *a3;
  v66 = *(_QWORD **)(*a3 + 352);
  if (v66)
  {
    if (*(_QWORD *)(*(_QWORD *)(*a3 + 352) + 8) == *v66)
      goto LABEL_134;
    v67 = v26;
    v68 = *(const void **)(a4 + 240);
    if (v68
    {
      v70 = v69;
      v71 = *(std::__shared_weak_count **)(a4 + 248);
      v290.__r_.__value_.__r.__words[0] = (std::string::size_type)v69;
      v290.__r_.__value_.__l.__size_ = (std::string::size_type)v71;
      if (v71)
      {
        v72 = (unint64_t *)&v71->__shared_owners_;
        do
          v73 = __ldxr(v72);
        while (__stxr(v73 + 1, v72));
      }
      if (!*(_DWORD *)(*(_QWORD *)(a1 + 280) + 4))
      {
        quasar::getTopChoice(*(_QWORD *)(*a3 + 352), 1, __p);
        quasar::getTokensEndTime(*(uint64_t ***)(*a3 + 352), &v297);
        LODWORD(v281.__r_.__value_.__l.__data_) = 0;
        v295 = 0.0;
        quasar::ResultStreamStabilizer::getPartialResultsInfo(v70, 1, &v294);
        quasar::Decoder::calculateStabilityMetrics((uint64_t *)&v294, (uint64_t)__p, (uint64_t)&v297, &v281, &v295, 1);
        v74 = *(_QWORD *)(a1 + 648);
        std::string::basic_string[abi:ne180100]<0>(&v293, "PartialResultsAvgLagMs");
        *(double *)&v289.__r_.__value_.__l.__data_ = v295;
        quasar::SpeechRequestResultData::addAA(v74, (__int128 *)&v293, (double *)&v289, 0);
        if (SHIBYTE(v293.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v293.__r_.__value_.__l.__data_);
        v75 = *(_QWORD *)(a1 + 648);
        *(double *)(v75 + 88) = v295;
        std::string::basic_string[abi:ne180100]<0>(&v293, "PartialResultsToggleCount");
        *(double *)&v289.__r_.__value_.__l.__data_ = (double)SLODWORD(v281.__r_.__value_.__l.__data_);
        quasar::SpeechRequestResultData::addAA(v75, (__int128 *)&v293, (double *)&v289, 0);
        if (SHIBYTE(v293.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v293.__r_.__value_.__l.__data_);
        *(_DWORD *)(*(_QWORD *)(a1 + 648) + 96) = v281.__r_.__value_.__l.__data_;
        LODWORD(v281.__r_.__value_.__l.__data_) = 0;
        v295 = 0.0;
        size = v294.__r_.__value_.__l.__size_;
        v76 = v294.__r_.__value_.__r.__words[0];
        while (size != v76)
        {
          if (*(char *)(size - 9) < 0)
            operator delete(*(void **)(size - 32));
          size -= 32;
        }
        v294.__r_.__value_.__l.__size_ = v76;
        quasar::ResultStreamStabilizer::getPartialResultsInfo(v70, 0, &v293);
        std::vector<std::pair<std::string,float>>::__vdeallocate((uint64_t *)&v294);
        v294 = v293;
        memset(&v293, 0, sizeof(v293));
        v289.__r_.__value_.__r.__words[0] = (std::string::size_type)&v293;
        std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&v289);
        quasar::Decoder::calculateStabilityMetrics((uint64_t *)&v294, (uint64_t)__p, (uint64_t)&v297, &v281, &v295, 0);
        v270 = *(_QWORD *)(a1 + 648);
        std::string::basic_string[abi:ne180100]<0>(&v293, "FasterPartialResultsAvgLagMs");
        *(double *)&v289.__r_.__value_.__l.__data_ = v295;
        quasar::SpeechRequestResultData::addAA(v270, (__int128 *)&v293, (double *)&v289, 0);
        if (SHIBYTE(v293.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v293.__r_.__value_.__l.__data_);
        v271 = *(_QWORD *)(a1 + 648);
        *(double *)(v271 + 104) = v295;
        std::string::basic_string[abi:ne180100]<0>(&v293, "FasterPartialResultsToggleCount");
        *(double *)&v289.__r_.__value_.__l.__data_ = (double)SLODWORD(v281.__r_.__value_.__l.__data_);
        quasar::SpeechRequestResultData::addAA(v271, (__int128 *)&v293, (double *)&v289, 0);
        if (SHIBYTE(v293.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v293.__r_.__value_.__l.__data_);
        *(_DWORD *)(*(_QWORD *)(a1 + 648) + 112) = v281.__r_.__value_.__l.__data_;
        v293.__r_.__value_.__r.__words[0] = (std::string::size_type)&v294;
        std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&v293);
        if (SBYTE7(v298) < 0)
          operator delete((void *)v297);
        if (SBYTE7(v317) < 0)
          operator delete(__p[0]);
      }
    }
    else
    {
      v71 = 0;
      *(_OWORD *)&v290.__r_.__value_.__l.__data_ = 0uLL;
    }
    if (quasar::gLogLevel >= 4)
    {
      v331 = 0u;
      v332 = 0u;
      v329 = 0u;
      v330 = 0u;
      v327 = 0u;
      v328 = 0u;
      v325 = 0u;
      v326 = 0u;
      v323 = 0u;
      v324 = 0u;
      v321 = 0u;
      v322 = 0u;
      v319 = 0u;
      v320 = 0u;
      v317 = 0u;
      v318 = 0u;
      *(_OWORD *)__p = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Shortest path cost: ", 20);
      std::ostream::operator<<();
      quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)__p);
    }
    if (v71)
    {
      v78 = (unint64_t *)&v71->__shared_owners_;
      do
        v79 = __ldaxr(v78);
      while (__stlxr(v79 - 1, v78));
      if (!v79)
      {
        ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
        std::__shared_weak_count::__release_weak(v71);
      }
    }
    v65 = *a3;
    v26 = v67;
    if (*(_QWORD *)(*a3 + 352))
    {
LABEL_134:
      v80 = (std::__shared_weak_count *)a3[1];
      v292[0] = v65;
      v292[1] = (uint64_t)v80;
      if (v80)
      {
        v81 = (unint64_t *)&v80->__shared_owners_;
        do
          v82 = __ldxr(v81);
        while (__stxr(v82 + 1, v81));
      }
      quasar::SpeechRecognizer::updateFinalRecogStats(a1, v292, a4);
      if (v80)
      {
        v83 = (unint64_t *)&v80->__shared_owners_;
        do
          v84 = __ldaxr(v83);
        while (__stlxr(v84 - 1, v83));
        if (!v84)
        {
          ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
          std::__shared_weak_count::__release_weak(v80);
        }
      }
      v85 = (std::__shared_weak_count *)a3[1];
      v291[0] = *a3;
      v291[1] = (uint64_t)v85;
      if (v85)
      {
        v86 = (unint64_t *)&v85->__shared_owners_;
        do
          v87 = __ldxr(v86);
        while (__stxr(v87 + 1, v86));
      }
      quasar::SpeechRecognizer::writeToOfflineRecogResultStream(a1, v291);
      if (v85)
      {
        v88 = (unint64_t *)&v85->__shared_owners_;
        do
          v89 = __ldaxr(v88);
        while (__stlxr(v89 - 1, v88));
        if (!v89)
        {
          ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
          std::__shared_weak_count::__release_weak(v85);
        }
      }
      v272 = v26;
      v273 = v23;
      v90 = *(_QWORD *)(*a3 + 584);
      if (*(_QWORD *)(*a3 + 592) == v90)
      {
        v94 = 0;
        v93 = 0;
      }
      else
      {
        v91 = 0;
        v92 = 0;
        v93 = 0;
        v94 = 0;
        v95 = a3;
        do
        {
          v96 = (_DWORD *)(v90 + v91);
          v97 = v96[2];
          v98 = v97 - 1;
          if (*v96 != 1 || v98 >= 2)
          {
            if (*v96)
              v100 = 1;
            else
              v100 = v98 >= 2;
            v101 = !v100;
            v93 |= v101;
          }
          else
          {
            v94 = 1;
          }
          v102 = v96[1];
          v103 = *(_QWORD *)(a1 + 648);
          std::to_string((std::string *)&v297, v92);
          v104 = std::string::insert((std::string *)&v297, 0, "lmeStatus");
          v105 = *(_OWORD *)&v104->__r_.__value_.__l.__data_;
          *(_QWORD *)&v317 = *((_QWORD *)&v104->__r_.__value_.__l + 2);
          *(_OWORD *)__p = v105;
          v104->__r_.__value_.__l.__size_ = 0;
          v104->__r_.__value_.__r.__words[2] = 0;
          v104->__r_.__value_.__r.__words[0] = 0;
          quasar::lmeDataStatusString(v102, &v290);
          v106 = std::string::append(&v290, "-");
          v107 = *(_OWORD *)&v106->__r_.__value_.__l.__data_;
          v293.__r_.__value_.__r.__words[2] = v106->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v293.__r_.__value_.__l.__data_ = v107;
          v106->__r_.__value_.__l.__size_ = 0;
          v106->__r_.__value_.__r.__words[2] = 0;
          v106->__r_.__value_.__r.__words[0] = 0;
          quasar::lmeUsageStatusString(v97, &v289);
          if ((v289.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v108 = &v289;
          else
            v108 = (std::string *)v289.__r_.__value_.__r.__words[0];
          if ((v289.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v109 = HIBYTE(v289.__r_.__value_.__r.__words[2]);
          else
            v109 = v289.__r_.__value_.__l.__size_;
          v110 = std::string::append(&v293, (const std::string::value_type *)v108, v109);
          v111 = *(_OWORD *)&v110->__r_.__value_.__l.__data_;
          v294.__r_.__value_.__r.__words[2] = v110->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v294.__r_.__value_.__l.__data_ = v111;
          v110->__r_.__value_.__l.__size_ = 0;
          v110->__r_.__value_.__r.__words[2] = 0;
          v110->__r_.__value_.__r.__words[0] = 0;
          quasar::SpeechRequestResultData::addDump(v103, (__int128 *)__p, &v294);
          a3 = v95;
          if (SHIBYTE(v294.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v294.__r_.__value_.__l.__data_);
          if (SHIBYTE(v289.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v289.__r_.__value_.__l.__data_);
          if (SHIBYTE(v293.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v293.__r_.__value_.__l.__data_);
          if (SHIBYTE(v290.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v290.__r_.__value_.__l.__data_);
          if (SBYTE7(v317) < 0)
            operator delete(__p[0]);
          if (SBYTE7(v298) < 0)
            operator delete((void *)v297);
          ++v92;
          v90 = *(_QWORD *)(*v95 + 584);
          v91 += 40;
        }
        while (0xCCCCCCCCCCCCCCCDLL * ((*(_QWORD *)(*v95 + 592) - v90) >> 3) > v92);
      }
      v155 = a1;
      v156 = *(_QWORD *)(a1 + 648);
      std::string::basic_string[abi:ne180100]<0>(__p, "jitLmeUsed");
      *(double *)&v297 = (double)(v94 & 1);
      quasar::SpeechRequestResultData::addAA(v156, (__int128 *)__p, (double *)&v297, 1);
      if (SBYTE7(v317) < 0)
        operator delete(__p[0]);
      v157 = *(_QWORD *)(a1 + 648);
      std::string::basic_string[abi:ne180100]<0>(__p, "aotLmeUsed");
      *(double *)&v297 = (double)(v93 & 1);
      quasar::SpeechRequestResultData::addAA(v157, (__int128 *)__p, (double *)&v297, 1);
      if (SBYTE7(v317) < 0)
        operator delete(__p[0]);
      quasar::extendEndTime(*(_QWORD *)(*a3 + 352), v273);
      std::string::basic_string[abi:ne180100]<0>(&v294, "");
      v158 = *(_QWORD *)(*a3 + 352);
      v159 = *(const quasar::Token ***)v158;
      if (*(_QWORD *)v158 != *(_QWORD *)(v158 + 8))
      {
        LOBYTE(__p[0]) = 0;
        std::string::basic_string[abi:ne180100]<0>(&__p[1], "▁");
        quasar::formatResultTokens(v159, __p);
        if (SHIBYTE(v294.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v294.__r_.__value_.__l.__data_);
        *(_OWORD *)&v294.__r_.__value_.__l.__data_ = v297;
        v294.__r_.__value_.__r.__words[2] = v298;
        BYTE7(v298) = 0;
        LOBYTE(v297) = 0;
        if (SHIBYTE(v317) < 0)
          operator delete(__p[1]);
      }
      v160 = *(_QWORD *)(a1 + 648);
      std::string::basic_string[abi:ne180100]<0>(__p, "finalResultTokens");
      std::operator+<char>();
      v161 = std::string::append(&v293, "\"");
      v162 = *(_OWORD *)&v161->__r_.__value_.__l.__data_;
      *(_QWORD *)&v298 = *((_QWORD *)&v161->__r_.__value_.__l + 2);
      v297 = v162;
      v161->__r_.__value_.__l.__size_ = 0;
      v161->__r_.__value_.__r.__words[2] = 0;
      v161->__r_.__value_.__r.__words[0] = 0;
      quasar::SpeechRequestResultData::addDump(v160, (__int128 *)__p, (const std::string *)&v297);
      if (SBYTE7(v298) < 0)
        operator delete((void *)v297);
      if (SHIBYTE(v293.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v293.__r_.__value_.__l.__data_);
      if (SBYTE7(v317) < 0)
        operator delete(__p[0]);
      quasar::RecogResult::RecogResult((quasar::RecogResult *)__p);
      v163 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 1544);
      v165 = *(uint64_t **)(v163 + 24);
      v164 = *(uint64_t **)(v163 + 32);
      if (v164 == v165
        || (v166 = **(_QWORD ***)(*a3 + 352), *(_QWORD **)(*(_QWORD *)(*a3 + 352) + 8) == v166)
        || *(_QWORD *)(**(_QWORD **)(*a3 + 352) + 8) == *v166)
      {
        v167 = 0;
      }
      else
      {
        while (1)
        {
          LODWORD(v290.__r_.__value_.__l.__data_) = -1;
          if (quasar::isTokenSpanPrefixOf(**(uint64_t ***)(*a3 + 352), v165, 1, (int *)&v290))
            break;
          v165 += 3;
          if (v165 == v164)
          {
            v167 = 3;
            goto LABEL_263;
          }
        }
        if (SLODWORD(v290.__r_.__value_.__l.__data_) >= 1)
          v167 = 1;
        else
          v167 = 2;
        if (quasar::gLogLevel > 4)
        {
          v312 = 0u;
          v313 = 0u;
          v310 = 0u;
          v311 = 0u;
          v308 = 0u;
          v309 = 0u;
          v306 = 0u;
          v307 = 0u;
          v304 = 0u;
          v305 = 0u;
          v302 = 0u;
          v303 = 0u;
          v300 = 0u;
          v301 = 0u;
          v298 = 0u;
          v299 = 0u;
          v297 = 0u;
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v297);
          v266 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v297, (uint64_t)"Matched trigger phrase: ", 24);
          quasar::tokens2Str(v165, &v293);
          if ((v293.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v267 = &v293;
          else
            v267 = (std::string *)v293.__r_.__value_.__r.__words[0];
          if ((v293.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v268 = HIBYTE(v293.__r_.__value_.__r.__words[2]);
          else
            v268 = v293.__r_.__value_.__l.__size_;
          v269 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v266, (uint64_t)v267, v268);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v269, (uint64_t)", with index: ", 14);
          std::ostream::operator<<();
          if (SHIBYTE(v293.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v293.__r_.__value_.__l.__data_);
          quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&v297);
        }
      }
LABEL_263:
      v168 = *(uint64_t **)(a1 + 616);
      v169 = (uint64_t **)(*(_QWORD *)(*(_QWORD *)(a1 + 280) + 24) + 344);
      v170 = (uint64_t *)*a3;
      v171 = *(std::__shared_weak_count **)(*a3 + 360);
      v287 = *(uint64_t **)(*a3 + 352);
      v288 = v171;
      if (v171)
      {
        v172 = (unint64_t *)&v171->__shared_owners_;
        do
          v173 = __ldxr(v172);
        while (__stxr(v173 + 1, v172));
        v170 = (uint64_t *)*a3;
      }
      v174 = v170[50];
      v285 = (void **)v170[49];
      v286 = (std::__shared_weak_count *)v174;
      if (v174)
      {
        v175 = (unint64_t *)(v174 + 8);
        do
          v176 = __ldxr(v175);
        while (__stxr(v176 + 1, v175));
        v170 = (uint64_t *)*a3;
      }
      quasar::MuxHelper::finalizeResult(v168, v169, &v287, &v285, v170 + 46);
      v177 = v286;
      if (v286)
      {
        v178 = (unint64_t *)&v286->__shared_owners_;
        do
          v179 = __ldaxr(v178);
        while (__stlxr(v179 - 1, v178));
        if (!v179)
        {
          ((void (*)(std::__shared_weak_count *))v177->__on_zero_shared)(v177);
          std::__shared_weak_count::__release_weak(v177);
        }
      }
      v180 = v288;
      if (v288)
      {
        v181 = (unint64_t *)&v288->__shared_owners_;
        do
          v182 = __ldaxr(v181);
        while (__stlxr(v182 - 1, v181));
        if (!v182)
        {
          ((void (*)(std::__shared_weak_count *))v180->__on_zero_shared)(v180);
          std::__shared_weak_count::__release_weak(v180);
        }
      }
      if (*(_BYTE *)(*a3 + 1088))
      {
        v183 = *(quasar::SpeechRequestData **)(a1 + 288);
        v284[0] = *(quasar::SpeechRequestData **)(a1 + 280);
        v284[1] = v183;
        if (v183)
        {
          v184 = (unint64_t *)((char *)v183 + 8);
          do
            v185 = __ldxr(v184);
          while (__stxr(v185 + 1, v184));
        }
        quasar::SpeechRecognizer::splitComposedLmeTokens((uint64_t)a2, (uint64_t)a3, v284);
        if (v183)
        {
          v186 = (unint64_t *)((char *)v183 + 8);
          do
            v187 = __ldaxr(v186);
          while (__stlxr(v187 - 1, v186));
          if (!v187)
          {
            (*(void (**)(quasar::SpeechRequestData *))(*(_QWORD *)v183 + 16))(v183);
            std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v183);
          }
        }
      }
      v188 = *(_QWORD *)(a1 + 280);
      v190 = *(_QWORD *)(v188 + 24);
      v189 = *(std::__shared_weak_count **)(v188 + 32);
      v282 = v190;
      v283 = v189;
      if (v189)
      {
        v191 = (unint64_t *)&v189->__shared_owners_;
        do
          v192 = __ldxr(v191);
        while (__stxr(v192 + 1, v191));
      }
      v193 = quasar::RecogResult::setParams((uint64_t)__p, &v282);
      v194 = quasar::Token::resetSpacing(*(uint64_t ***)(*a3 + 352));
      v195 = quasar::RecogResult::setResultChoices(v193, (uint64_t)v194);
      v196 = quasar::RecogResult::setResultMuxIds(v195, *a3 + 368);
      v197 = (_QWORD *)quasar::RecogResult::setResultCosts(v196, *(_QWORD *)(*a3 + 392));
      v198 = quasar::RecogResult::setLmeStatus(v197, (uint64_t *)(*a3 + 584));
      v199 = quasar::RecogResult::setLastWordClipped((uint64_t)v198, *(_BYTE *)(*a3 + 144));
      v200 = quasar::RunAsyncParams::setEndpointStartMs(v199, *a3 + 656);
      v201 = quasar::RecogResult::setAudioAnalytics(v200, (const quasar::AudioAnalytics *)(*a3 + 696));
      v202 = quasar::RecogResult::setJsonInfo(v201, (uint64_t)&v335);
      v203 = quasar::RecogResult::setWhisperScore(v202, *(float *)(*a3 + 512));
      v204 = quasar::RecogResult::setWhisperDetected(v203, *(_BYTE *)(*a3 + 516));
      v205 = quasar::RecogResult::setUtteranceStartMillis(v204, v272);
      v206 = quasar::RecogResult::setUtteranceDurationMillis(v205, v273);
      IsFinal = quasar::RecogResult::setIsFinal(v206, *(_BYTE *)a4);
      v208 = quasar::RecogResult::setSNR(IsFinal, v296);
      v209 = quasar::RecogResult::setFingerprintDetected(v208, *(_DWORD *)(*a3 + 680));
      v210 = quasar::RecogResult::setWatermarkDetected(v209, *(_DWORD *)(*a3 + 684));
      v211 = quasar::RecogResult::setWatermarkPeakAvg(v210, *(double *)(*a3 + 688));
      v212 = (std::string *)quasar::RecogResult::setLatnnMitigatorResult(v211, *a3 + 872);
      v213 = quasar::RecogResult::setSecondaryLatnnMitigatorResult(v212, *a3 + 928);
      v214 = quasar::RecogResult::setVoiceTriggerPayloadResult((uint64_t)v213, v167);
      v215 = quasar::RecogResult::setLeftContextForItn(v214, (uint64_t)(a2 + 768));
      v216 = quasar::RecogResult::setRightContextForItn(v215, (uint64_t)(a2 + 792));
      UtteranceAfterResume = quasar::RecogResult::setFirstUtteranceAfterResume(v216, a2[816]);
      v218 = quasar::RecogResult::setEosLikelihood(UtteranceAfterResume, *(double *)(*a3 + 1080));
      v219 = quasar::RecogResult::setFormattingInfo(v218, *a3 + 1136);
      quasar::RecogResult::setNumTokensExcludingTriggerPhrase(v219, *(_DWORD *)(*a3 + 1092));
      v220 = v283;
      if (v283)
      {
        v221 = (unint64_t *)&v283->__shared_owners_;
        do
          v222 = __ldaxr(v221);
        while (__stlxr(v222 - 1, v221));
        if (!v222)
        {
          ((void (*)(std::__shared_weak_count *))v220->__on_zero_shared)(v220);
          std::__shared_weak_count::__release_weak(v220);
        }
      }
      if (*(_BYTE *)(*(_QWORD *)(v155 + 280) + 216))
        v223 = a2[852] == 0;
      else
        v223 = 0;
      if (v223)
      {
        quasar::DecoderChainOutput::getWordHypLattice((quasar::DecoderChainOutput *)*a3, (const quasar::DecoderPassData *)a2, &v297);
        quasar::RecogResult::setWordHypLattice((uint64_t)__p, (uint64_t *)&v297);
        v224 = (std::__shared_weak_count *)*((_QWORD *)&v297 + 1);
        if (*((_QWORD *)&v297 + 1))
        {
          v225 = (unint64_t *)(*((_QWORD *)&v297 + 1) + 8);
          do
            v226 = __ldaxr(v225);
          while (__stlxr(v226 - 1, v225));
          if (!v226)
          {
            ((void (*)(std::__shared_weak_count *))v224->__on_zero_shared)(v224);
            std::__shared_weak_count::__release_weak(v224);
          }
        }
      }
      v227 = *a3;
      v228 = *(uint64_t ***)(*a3 + 408);
      if (v228)
      {
        v229 = quasar::Token::resetSpacing(v228);
        quasar::RecogResult::setResultChoicesV2((uint64_t)__p, (uint64_t)v229);
        v227 = *a3;
        if (**(_QWORD **)(*a3 + 408) != *(_QWORD *)(*(_QWORD *)(*a3 + 408) + 8))
        {
          v230 = *(_QWORD *)(v155 + 648);
          std::string::basic_string[abi:ne180100]<0>(&v293, "finalResultTokensV2");
          v231 = **(const quasar::Token ****)(*a3 + 408);
          LOBYTE(v297) = 0;
          std::string::basic_string[abi:ne180100]<0>((_QWORD *)&v297 + 1, "▁");
          quasar::formatResultTokens(v231, &v297);
          v232 = std::string::insert(&v281, 0, "\"");
          v233 = *(_OWORD *)&v232->__r_.__value_.__l.__data_;
          v289.__r_.__value_.__r.__words[2] = v232->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v289.__r_.__value_.__l.__data_ = v233;
          v232->__r_.__value_.__l.__size_ = 0;
          v232->__r_.__value_.__r.__words[2] = 0;
          v232->__r_.__value_.__r.__words[0] = 0;
          v234 = std::string::append(&v289, "\"");
          v235 = *(_OWORD *)&v234->__r_.__value_.__l.__data_;
          v290.__r_.__value_.__r.__words[2] = v234->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v290.__r_.__value_.__l.__data_ = v235;
          v234->__r_.__value_.__l.__size_ = 0;
          v234->__r_.__value_.__r.__words[2] = 0;
          v234->__r_.__value_.__r.__words[0] = 0;
          quasar::SpeechRequestResultData::addDump(v230, (__int128 *)&v293, &v290);
          if (SHIBYTE(v290.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v290.__r_.__value_.__l.__data_);
          if (SHIBYTE(v289.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v289.__r_.__value_.__l.__data_);
          if (SHIBYTE(v281.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v281.__r_.__value_.__l.__data_);
          if (SHIBYTE(v298) < 0)
            operator delete(*((void **)&v297 + 1));
          if (SHIBYTE(v293.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v293.__r_.__value_.__l.__data_);
          v227 = *a3;
        }
      }
      v236 = (*(float (**)(_QWORD, void **, uint64_t))(**(_QWORD **)(v227 + 560) + 40))(*(_QWORD *)(v227 + 560), __p, 1);
      quasar::DecoderChainOutput::updatePersistentData((quasar::DecoderChainOutput *)*a3, v236);
      quasar::RecogResult::~RecogResult((quasar::RecogResult *)__p);
      if (SHIBYTE(v294.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v294.__r_.__value_.__l.__data_);
      goto LABEL_323;
    }
  }
  v112 = *(const void **)(a4 + 240);
  if (!v112
  {
    v145 = (std::__shared_weak_count *)a3[1];
    v276[0] = v65;
    v276[1] = (uint64_t)v145;
    if (v145)
    {
      v146 = (unint64_t *)&v145->__shared_owners_;
      do
        v147 = __ldxr(v146);
      while (__stxr(v147 + 1, v146));
    }
    quasar::SpeechRecognizer::writeToOfflineRecogResultStream(a1, v276);
    if (v145)
    {
      v148 = (unint64_t *)&v145->__shared_owners_;
      do
        v149 = __ldaxr(v148);
      while (__stlxr(v149 - 1, v148));
      if (!v149)
      {
        ((void (*)(std::__shared_weak_count *))v145->__on_zero_shared)(v145);
        std::__shared_weak_count::__release_weak(v145);
      }
    }
    v150 = (std::__shared_weak_count *)a3[1];
    v275[0] = *a3;
    v275[1] = (uint64_t)v150;
    if (v150)
    {
      v151 = (unint64_t *)&v150->__shared_owners_;
      do
        v152 = __ldxr(v151);
      while (__stxr(v152 + 1, v151));
    }
    quasar::SpeechRecognizer::updateFinalRecogStats(a1, v275, a4);
    if (v150)
    {
      v153 = (unint64_t *)&v150->__shared_owners_;
      do
        v154 = __ldaxr(v153);
      while (__stlxr(v154 - 1, v153));
      if (!v154)
      {
        ((void (*)(std::__shared_weak_count *))v150->__on_zero_shared)(v150);
        std::__shared_weak_count::__release_weak(v150);
      }
    }
LABEL_323:
    v237 = 1;
    goto LABEL_361;
  }
  v113 = *(std::__shared_weak_count **)(a4 + 248);
  if (v113)
  {
    v114 = (unint64_t *)&v113->__shared_owners_;
    do
      v115 = __ldxr(v114);
    while (__stxr(v115 + 1, v114));
    do
      v116 = __ldaxr(v114);
    while (__stlxr(v116 - 1, v114));
    if (!v116)
    {
      ((void (*)(std::__shared_weak_count *))v113->__on_zero_shared)(v113);
      std::__shared_weak_count::__release_weak(v113);
    }
  }
  if (quasar::gLogLevel >= 4)
  {
    v331 = 0u;
    v332 = 0u;
    v329 = 0u;
    v330 = 0u;
    v327 = 0u;
    v328 = 0u;
    v325 = 0u;
    v326 = 0u;
    v323 = 0u;
    v324 = 0u;
    v321 = 0u;
    v322 = 0u;
    v319 = 0u;
    v320 = 0u;
    v317 = 0u;
    v318 = 0u;
    *(_OWORD *)__p = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Lattice was not NULL, but failed to generate any choices", 56);
    quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)__p);
  }
  if (*(_DWORD *)(*(_QWORD *)(a1 + 280) + 4))
  {
    v117 = *(_QWORD *)(a1 + 648);
    std::string::basic_string[abi:ne180100]<0>(__p, "uttDetectAbort");
    std::string::basic_string[abi:ne180100]<0>(&v297, "NoChoices");
    quasar::SpeechRequestResultData::addDump(v117, (__int128 *)__p, (const std::string *)&v297);
    if (SBYTE7(v298) < 0)
      operator delete((void *)v297);
    if (SBYTE7(v317) < 0)
      operator delete(__p[0]);
  }
  v118 = (std::__shared_weak_count *)a3[1];
  v280[0] = *a3;
  v280[1] = (uint64_t)v118;
  if (v118)
  {
    v119 = (unint64_t *)&v118->__shared_owners_;
    do
      v120 = __ldxr(v119);
    while (__stxr(v120 + 1, v119));
  }
  quasar::SpeechRecognizer::writeToOfflineRecogResultStream(a1, v280);
  if (v118)
  {
    v121 = (unint64_t *)&v118->__shared_owners_;
    do
      v122 = __ldaxr(v121);
    while (__stlxr(v122 - 1, v121));
    if (!v122)
    {
      ((void (*)(std::__shared_weak_count *))v118->__on_zero_shared)(v118);
      std::__shared_weak_count::__release_weak(v118);
    }
  }
  v123 = (std::__shared_weak_count *)a3[1];
  v279[0] = *a3;
  v279[1] = (uint64_t)v123;
  if (v123)
  {
    v124 = (unint64_t *)&v123->__shared_owners_;
    do
      v125 = __ldxr(v124);
    while (__stxr(v125 + 1, v124));
  }
  quasar::SpeechRecognizer::updateFinalRecogStats(a1, v279, a4);
  if (v123)
  {
    v126 = (unint64_t *)&v123->__shared_owners_;
    do
      v127 = __ldaxr(v126);
    while (__stlxr(v127 - 1, v126));
    if (!v127)
    {
      ((void (*)(std::__shared_weak_count *))v123->__on_zero_shared)(v123);
      std::__shared_weak_count::__release_weak(v123);
    }
  }
  quasar::RecogResult::RecogResult((quasar::RecogResult *)__p);
  v128 = *(_QWORD *)(a1 + 280);
  v130 = *(_QWORD *)(v128 + 24);
  v129 = *(std::__shared_weak_count **)(v128 + 32);
  v277 = v130;
  v278 = v129;
  if (v129)
  {
    v131 = (unint64_t *)&v129->__shared_owners_;
    do
      v132 = __ldxr(v131);
    while (__stxr(v132 + 1, v131));
  }
  v133 = quasar::RecogResult::setParams((uint64_t)__p, &v277);
  v134 = (_QWORD *)quasar::RecogResult::setLastWordClipped(v133, *(_BYTE *)(*a3 + 144));
  v135 = quasar::RecogResult::setLmeStatus(v134, (uint64_t *)(*a3 + 584));
  v136 = quasar::RecogResult::setJsonInfo((uint64_t)v135, (uint64_t)&v335);
  v137 = quasar::RecogResult::setWhisperScore(v136, *(float *)(*a3 + 512));
  v138 = quasar::RecogResult::setWhisperDetected(v137, *(_BYTE *)(*a3 + 516));
  v139 = quasar::RecogResult::setUtteranceStartMillis(v138, v26);
  v140 = quasar::RecogResult::setUtteranceDurationMillis(v139, v23);
  v141 = quasar::RecogResult::setIsFinal(v140, *(_BYTE *)a4);
  quasar::RecogResult::setSNR(v141, v296);
  v142 = v278;
  if (v278)
  {
    v143 = (unint64_t *)&v278->__shared_owners_;
    do
      v144 = __ldaxr(v143);
    while (__stlxr(v144 - 1, v143));
    if (!v144)
    {
      ((void (*)(std::__shared_weak_count *))v142->__on_zero_shared)(v142);
      std::__shared_weak_count::__release_weak(v142);
    }
  }
  (*(void (**)(_QWORD, void **, _QWORD))(**(_QWORD **)(*a3 + 560) + 40))(*(_QWORD *)(*a3 + 560), __p, 0);
LABEL_360:
  quasar::RecogResult::~RecogResult((quasar::RecogResult *)__p);
  v237 = 0;
LABEL_361:
  if (SHIBYTE(v336) < 0)
    operator delete((void *)v335);
  return v237;
}

void sub_1ADC68604(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,uint64_t a35,uint64_t a36,void *a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,void *a45,uint64_t a46,uint64_t a47,uint64_t a48,void *__p,uint64_t a50,int a51,__int16 a52,char a53,char a54,uint64_t a55,uint64_t a56,uint64_t a57,void *a58)
{
  uint64_t v58;

  quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&a58);
  quasar::RecogResult::~RecogResult((quasar::RecogResult *)&STACK[0x290]);
  if (a54 < 0)
    operator delete(__p);
  if (*(char *)(v58 - 137) < 0)
    operator delete(*(void **)(v58 - 160));
  _Unwind_Resume(a1);
}

void quasar::SpeechRecognizer::updateCachedTokensWithToken(uint64_t a1, std::string::size_type a2)
{
  int64_t v4;
  std::string::size_type v5;
  _BYTE *v6;
  void *v7;
  _BYTE *v8;
  std::string::size_type v9;
  unsigned __int8 *v10;
  unint64_t v11;
  uint64_t v12;
  unsigned __int8 *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  std::string v17;
  char v18;

  if (*(char *)(a2 + 23) < 0)
  {
    v5 = *(_QWORD *)a2;
    v4 = *(_QWORD *)(a2 + 8);
  }
  else
  {
    v4 = *(unsigned __int8 *)(a2 + 23);
    v5 = a2;
  }
  v6 = (_BYTE *)(v5 + v4);
  if (v4 >= 1)
  {
    v7 = (void *)v5;
    do
    {
      v8 = memchr(v7, 92, v4);
      if (!v8)
        break;
      if (*v8 == 92)
        goto LABEL_10;
      v7 = v8 + 1;
      v4 = v6 - (_BYTE *)v7;
    }
    while (v6 - (_BYTE *)v7 > 0);
  }
  v8 = v6;
LABEL_10:
  if (v8 == v6)
    v9 = -1;
  else
    v9 = (std::string::size_type)&v8[-v5];
  std::string::basic_string(&v17, (const std::string *)a2, 0, v9, (std::allocator<char> *)&v18);
  if (*(char *)(a2 + 23) < 0)
    operator delete(*(void **)a2);
  *(std::string *)a2 = v17;
  if (!std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>((_QWORD *)(a1 + 560), (unsigned __int8 *)a2))
  {
    v17.__r_.__value_.__r.__words[0] = a2;
    v10 = std::__hash_table<std::__hash_value_type<std::string,quasar::LmeDataFactoryBase::PronSet>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,quasar::LmeDataFactoryBase::PronSet>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,quasar::LmeDataFactoryBase::PronSet>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,quasar::LmeDataFactoryBase::PronSet>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1 + 560, (unsigned __int8 *)a2, (uint64_t)&std::piecewise_construct, (__int128 **)&v17);
    if (quasar::LmeDataFactoryBase::PronSet::empty((quasar::LmeDataFactoryBase::PronSet *)(v10 + 40)))
    {
      v11 = *(_QWORD *)(a1 + 544);
      if (v11 >= *(_QWORD *)(a1 + 552))
      {
        v12 = std::vector<quasar::Token>::__push_back_slow_path<quasar::Token const&>((uint64_t *)(a1 + 536), (const quasar::Token *)a2);
      }
      else
      {
        quasar::Token::Token(*(std::string **)(a1 + 544), (const quasar::Token *)a2);
        v12 = v11 + 224;
        *(_QWORD *)(a1 + 544) = v11 + 224;
      }
      *(_QWORD *)(a1 + 544) = v12;
      v13 = *(unsigned __int8 **)(a1 + 536);
      if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * ((v12 - (uint64_t)v13) >> 5)) >= 0x32)
      {
        std::__hash_table<std::__hash_value_type<std::string,quasar::LmeDataFactoryBase::PronSet>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,quasar::LmeDataFactoryBase::PronSet>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,quasar::LmeDataFactoryBase::PronSet>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,quasar::LmeDataFactoryBase::PronSet>>>::__erase_unique<std::string>((_QWORD *)(a1 + 560), v13);
        std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__move_loop<std::_ClassicAlgPolicy>,std::__move_trivial>,quasar::Token *,quasar::Token *,quasar::Token *,0>((__int128 *)(*(_QWORD *)(a1 + 536) + 224), *(__int128 **)(a1 + 544), *(_QWORD *)(a1 + 536));
        v15 = v14;
        v16 = *(_QWORD *)(a1 + 544);
        if (v16 != v14)
        {
          do
            quasar::Token::~Token((void **)(v16 - 224));
          while (v16 != v15);
        }
        *(_QWORD *)(a1 + 544) = v15;
      }
      *(_BYTE *)(a1 + 528) = 1;
    }
  }
}

void sub_1ADC68C70(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 544) = v2;
  _Unwind_Resume(a1);
}

uint64_t quasar::SpeechRecognizer::getTraining@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  v2 = *(_QWORD *)(this + 600);
  if (v2)
  {
    v4 = *(_QWORD *)(v2 + 120);
    v3 = *(_QWORD *)(v2 + 128);
    *a2 = v4;
    a2[1] = v3;
    if (v3)
    {
      v5 = (unint64_t *)(v3 + 8);
      do
        v6 = __ldxr(v5);
      while (__stxr(v6 + 1, v5));
    }
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
  }
  return this;
}

void quasar::SpeechRecognizer::writeTrainingData(quasar::SpeechRecognizer *this, const quasar::SpeechRecognizer::RecogData *a2)
{
  uint64_t v2;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  char *v9;
  int v10;
  unint64_t v11;
  unint64_t v12;
  quasar::DecoderChainPersistentData *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  int v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  int v27;
  int v28;
  uint64_t v30;
  float v31;
  unint64_t v32;
  int32x2_t *v33;
  uint64_t v34;
  unint64_t v35;
  char *v36;
  int32x2_t *v37;
  uint64_t v38;
  _QWORD *v39;
  char *v40;
  quasar::SpeechRecognizer *v41;
  uint64_t v42;
  int32x2_t v43[6];
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;

  v2 = *((_QWORD *)this + 75);
  if (!v2)
    goto LABEL_23;
  v5 = *(_QWORD *)(v2 + 120);
  v6 = *(std::__shared_weak_count **)(v2 + 128);
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    if (!v5)
    {
      do
        v12 = __ldaxr(p_shared_owners);
      while (__stlxr(v12 - 1, p_shared_owners));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
      goto LABEL_23;
    }
    v9 = (char *)this + 280;
    v10 = *(unsigned __int8 *)(*(_QWORD *)(*((_QWORD *)this + 35) + 24) + 52);
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (v11)
    {
      if (!v10)
      {
LABEL_23:
        if (quasar::gLogLevel >= 5)
        {
          v62 = 0u;
          v63 = 0u;
          v60 = 0u;
          v61 = 0u;
          v58 = 0u;
          v59 = 0u;
          v56 = 0u;
          v57 = 0u;
          v54 = 0u;
          v55 = 0u;
          v52 = 0u;
          v53 = 0u;
          v50 = 0u;
          v51 = 0u;
          v48 = 0u;
          v49 = 0u;
          v47 = 0u;
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v47);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v47, (uint64_t)"Training is not enabled, skip training", 38);
          quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&v47);
        }
        return;
      }
    }
    else
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
      if (!v10)
        goto LABEL_23;
    }
  }
  else
  {
    if (!v5 || !*(_BYTE *)(*(_QWORD *)(*((_QWORD *)this + 35) + 24) + 52))
      goto LABEL_23;
    v9 = (char *)this + 280;
  }
  if (!**(_QWORD **)(*(_QWORD *)v9 + 24))
  {
    if (quasar::gLogLevel < 4)
      return;
    v62 = 0u;
    v63 = 0u;
    v60 = 0u;
    v61 = 0u;
    v58 = 0u;
    v59 = 0u;
    v56 = 0u;
    v57 = 0u;
    v54 = 0u;
    v55 = 0u;
    v52 = 0u;
    v53 = 0u;
    v50 = 0u;
    v51 = 0u;
    v48 = 0u;
    v49 = 0u;
    v47 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v47);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v47, (uint64_t)"Result stream does not exist, skip training.", 44);
    goto LABEL_27;
  }
  v13 = (quasar::DecoderChainPersistentData *)*((_QWORD *)a2 + 28);
  if (!v13 || quasar::DecoderChainPersistentData::getAverageConfidence(v13) < *(float *)(*((_QWORD *)this + 75) + 84))
  {
    if (quasar::gLogLevel < 4)
      return;
    v62 = 0u;
    v63 = 0u;
    v60 = 0u;
    v61 = 0u;
    v58 = 0u;
    v59 = 0u;
    v56 = 0u;
    v57 = 0u;
    v54 = 0u;
    v55 = 0u;
    v52 = 0u;
    v53 = 0u;
    v50 = 0u;
    v51 = 0u;
    v48 = 0u;
    v49 = 0u;
    v47 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v47);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v47, (uint64_t)"Average confidence: ", 20);
    quasar::DecoderChainPersistentData::getAverageConfidence(*((quasar::DecoderChainPersistentData **)a2 + 28));
    v14 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)" is below threshold: ", 21);
    v15 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)", skip training", 15);
LABEL_27:
    quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&v47);
    return;
  }
  v16 = (_QWORD *)*((_QWORD *)a2 + 18);
  if (v16 && v16[5] && *((_QWORD *)a2 + 22) != *((_QWORD *)a2 + 23))
  {
    v17 = **((_DWORD **)a2 + 20);
    v45 = 0u;
    v46 = 0u;
    v44 = 0u;
    if (quasar::gLogLevel >= 4)
    {
      v62 = 0uLL;
      v63 = 0uLL;
      v60 = 0uLL;
      v61 = 0uLL;
      v58 = 0uLL;
      v59 = 0uLL;
      v56 = 0uLL;
      v57 = 0uLL;
      v54 = 0uLL;
      v55 = 0uLL;
      v52 = 0uLL;
      v53 = 0uLL;
      v50 = 0uLL;
      v51 = 0uLL;
      v48 = 0uLL;
      v49 = 0uLL;
      v47 = 0uLL;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v47);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v47, (uint64_t)"Populating training data, original feature size: ", 49);
      v18 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)", alignment size: ", 18);
      std::ostream::operator<<();
      quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&v47);
      v16 = (_QWORD *)*((_QWORD *)a2 + 18);
    }
    v40 = v9;
    v41 = this;
    if (!v16[5])
    {
      v22 = 0;
      v21 = 0;
      goto LABEL_59;
    }
    v19 = 0;
    v20 = 0;
    v21 = 0;
    v22 = 0;
    v23 = (v17 + 1);
    while (1)
    {
      v42 = v19;
      if (v17 == -1)
        goto LABEL_54;
      v24 = 0;
      v25 = *(_QWORD *)(v16[1] + 8 * (v16[4] / 0x55uLL)) + 48 * (v16[4] % 0x55uLL);
      while (1)
      {
        v26 = *((_QWORD *)a2 + 22);
        if (v20 + v24 >= (unint64_t)((*((_QWORD *)a2 + 23) - v26) >> 3))
          break;
        v27 = *(_DWORD *)(v26 + v19);
        if (v24)
        {
          v28 = *(_DWORD *)(v26 + 8 * v20);
          if (v27 != -1 && v27 != v28)
          {
LABEL_47:
            kaldi::CuMatrix<float>::CuMatrix(v43, 1, 1, 0, 0, 0);
            *(float *)v43[1].i32[0] = (float)v27;
            v30 = *(unsigned __int8 *)(*((_QWORD *)a2 + 22) + v19 + 4);
            kaldi::CuMatrix<float>::CuMatrix(&v47, v25, 111);
            kaldi::CuMatrix<float>::CuMatrix(&v50, v43, 111);
            LOBYTE(v53) = v30;
            std::deque<quasar::SpeakerCodeTraining::AlignedData>::push_back(&v44, (uint64_t)&v47);
            v22 += v30;
            if (!(_DWORD)v30)
              ++v21;
            kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&v50);
            kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&v47);
            kaldi::CuMatrix<float>::~CuMatrix((uint64_t)v43);
          }
        }
        else if (v27 != -1)
        {
          goto LABEL_47;
        }
        ++v24;
        v19 += 8;
        if (v23 == v24)
          goto LABEL_54;
      }
      if (quasar::gLogLevel >= 5)
      {
        v62 = 0u;
        v63 = 0u;
        v60 = 0u;
        v61 = 0u;
        v58 = 0u;
        v59 = 0u;
        v56 = 0u;
        v57 = 0u;
        v54 = 0u;
        v55 = 0u;
        v52 = 0u;
        v53 = 0u;
        v50 = 0u;
        v51 = 0u;
        v48 = 0u;
        v49 = 0u;
        v47 = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v47);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v47, (uint64_t)"Reaches the end of labels", 25);
        quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&v47);
      }
LABEL_54:
      std::deque<kaldi::CuMatrix<float>>::pop_front(*((int64x2_t **)a2 + 18));
      v20 += v23;
      v16 = (_QWORD *)*((_QWORD *)a2 + 18);
      v19 = v42 + 8 * (v17 + 1);
      if (!v16[5])
      {
LABEL_59:
        v31 = *(float *)(*((_QWORD *)v41 + 75) + 88) * (float)v21;
        if (v22 >= (unint64_t)v31)
          v32 = (unint64_t)v31;
        else
          v32 = v22;
        if ((_QWORD)v45 == *((_QWORD *)&v44 + 1))
        {
          v33 = 0;
          v37 = 0;
          v38 = ((unint64_t)(*((_QWORD *)&v46 + 1) + v46) * (unsigned __int128)0xA41A41A41A41A41BLL) >> 64;
          v36 = (char *)(*((_QWORD *)&v44 + 1)
                       + 8 * ((v38 + ((unint64_t)(*((_QWORD *)&v46 + 1) + v46 - v38) >> 1)) >> 5));
        }
        else
        {
          v33 = (int32x2_t *)(*(_QWORD *)(*((_QWORD *)&v44 + 1) + 8 * ((unint64_t)v46 / 0x27))
                            + 104 * ((unint64_t)v46 % 0x27));
          v34 = ((unint64_t)(*((_QWORD *)&v46 + 1) + v46) * (unsigned __int128)0xA41A41A41A41A41BLL) >> 64;
          v35 = (v34 + ((unint64_t)(*((_QWORD *)&v46 + 1) + v46 - v34) >> 1)) >> 5;
          v36 = (char *)(*((_QWORD *)&v44 + 1) + 8 * v35);
          v37 = (int32x2_t *)(*(_QWORD *)v36 + 104 * (*((_QWORD *)&v46 + 1) + v46 - 39 * v35));
        }
        kaldi::Shuffle<std::__deque_iterator<quasar::SpeakerCodeTraining::AlignedData,quasar::SpeakerCodeTraining::AlignedData*,quasar::SpeakerCodeTraining::AlignedData&,quasar::SpeakerCodeTraining::AlignedData**,long,39l>>((char *)(*((_QWORD *)&v44 + 1) + 8 * ((unint64_t)v46 / 0x27)), v33, v36, v37, 4);
        if (quasar::gLogLevel >= 4)
        {
          v62 = 0u;
          v63 = 0u;
          v60 = 0u;
          v61 = 0u;
          v58 = 0u;
          v59 = 0u;
          v56 = 0u;
          v57 = 0u;
          v54 = 0u;
          v55 = 0u;
          v52 = 0u;
          v53 = 0u;
          v50 = 0u;
          v51 = 0u;
          v48 = 0u;
          v49 = 0u;
          v47 = 0u;
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v47);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v47, (uint64_t)"Training data is populated and shuffled, aligned data size: ", 60);
          v39 = (_QWORD *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v39, (uint64_t)", silence frame count: ", 23);
          std::ostream::operator<<();
          quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&v47);
        }
        if (*((_QWORD *)&v46 + 1))
          (*(void (**)(_QWORD, __int128 *, unint64_t))(***(_QWORD ***)(*(_QWORD *)v40 + 24) + 128))(**(_QWORD **)(*(_QWORD *)v40 + 24), &v44, v32);
        std::deque<quasar::SpeakerCodeTraining::AlignedData>::~deque[abi:ne180100](&v44);
        return;
      }
    }
  }
  if (quasar::gLogLevel >= 2)
  {
    v62 = 0u;
    v63 = 0u;
    v60 = 0u;
    v61 = 0u;
    v58 = 0u;
    v59 = 0u;
    v56 = 0u;
    v57 = 0u;
    v54 = 0u;
    v55 = 0u;
    v52 = 0u;
    v53 = 0u;
    v50 = 0u;
    v51 = 0u;
    v48 = 0u;
    v49 = 0u;
    v47 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v47);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v47, (uint64_t)"Feature buffer is null or reversed pdf is empty, skip training.", 63);
    quasar::QuasarWarnMessage::~QuasarWarnMessage((quasar::QuasarWarnMessage *)&v47);
  }
}

void sub_1ADC69398(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  std::deque<quasar::SpeakerCodeTraining::AlignedData>::~deque[abi:ne180100](va);
  _Unwind_Resume(a1);
}

void quasar::SpeechRecognizer::createDecoder(uint64_t a1@<X2>, _QWORD *a2@<X8>)
{
  std::string *v4;
  __int128 v5;
  int v6;
  const std::string::value_type *v7;
  std::string::size_type v8;
  std::string *v9;
  __int128 v10;
  std::string v11;
  std::string v12;
  std::string v13;

  std::operator+<char>();
  v4 = std::string::append(&v11, ".");
  v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
  v12.__r_.__value_.__r.__words[2] = v4->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v12.__r_.__value_.__l.__data_ = v5;
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = 0;
  v6 = *(char *)(a1 + 23);
  if (v6 >= 0)
    v7 = (const std::string::value_type *)a1;
  else
    v7 = *(const std::string::value_type **)a1;
  if (v6 >= 0)
    v8 = *(unsigned __int8 *)(a1 + 23);
  else
    v8 = *(_QWORD *)(a1 + 8);
  v9 = std::string::append(&v12, v7, v8);
  v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
  v13.__r_.__value_.__r.__words[2] = v9->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v13.__r_.__value_.__l.__data_ = v10;
  v9->__r_.__value_.__l.__size_ = 0;
  v9->__r_.__value_.__r.__words[2] = 0;
  v9->__r_.__value_.__r.__words[0] = 0;
  quasar::Decoder::createDecoder(&v13, a2);
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v13.__r_.__value_.__l.__data_);
  if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v12.__r_.__value_.__l.__data_);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v11.__r_.__value_.__l.__data_);
}

void sub_1ADC69520(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  uint64_t v21;

  if (*(char *)(v21 - 25) < 0)
    operator delete(*(void **)(v21 - 48));
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

void quasar::SpeechRecognizer::createDecodable(uint64_t a1@<X2>, _QWORD *a2@<X8>)
{
  std::string *v4;
  __int128 v5;
  int v6;
  const std::string::value_type *v7;
  std::string::size_type v8;
  std::string *v9;
  __int128 v10;
  std::string v11;
  std::string v12;
  std::string v13;

  std::operator+<char>();
  v4 = std::string::append(&v11, ".");
  v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
  v12.__r_.__value_.__r.__words[2] = v4->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v12.__r_.__value_.__l.__data_ = v5;
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = 0;
  v6 = *(char *)(a1 + 23);
  if (v6 >= 0)
    v7 = (const std::string::value_type *)a1;
  else
    v7 = *(const std::string::value_type **)a1;
  if (v6 >= 0)
    v8 = *(unsigned __int8 *)(a1 + 23);
  else
    v8 = *(_QWORD *)(a1 + 8);
  v9 = std::string::append(&v12, v7, v8);
  v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
  v13.__r_.__value_.__r.__words[2] = v9->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v13.__r_.__value_.__l.__data_ = v10;
  v9->__r_.__value_.__l.__size_ = 0;
  v9->__r_.__value_.__r.__words[2] = 0;
  v9->__r_.__value_.__r.__words[0] = 0;
  quasar::Decodable::createDecodable(&v13, a2);
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v13.__r_.__value_.__l.__data_);
  if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v12.__r_.__value_.__l.__data_);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v11.__r_.__value_.__l.__data_);
}

void sub_1ADC69640(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  uint64_t v21;

  if (*(char *)(v21 - 25) < 0)
    operator delete(*(void **)(v21 - 48));
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

uint64_t std::deque<quasar::SpeakerCodeTraining::AlignedData>::push_back(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t result;

  v4 = a1 + 5;
  v5 = a1[1];
  v6 = a1[2];
  v7 = 39 * ((v6 - v5) >> 3) - 1;
  if (v6 == v5)
    v7 = 0;
  if (v7 == a1[5] + a1[4])
  {
    std::deque<quasar::SpeakerCodeTraining::AlignedData>::__add_back_capacity(a1);
    v5 = a1[1];
    v6 = a1[2];
  }
  if (v6 == v5)
  {
    v9 = 0;
  }
  else
  {
    v8 = a1[5] + a1[4];
    v9 = *(_QWORD *)(v5 + 8 * (v8 / 0x27)) + 104 * (v8 % 0x27);
  }
  result = std::allocator<quasar::SpeakerCodeTraining::AlignedData>::construct[abi:ne180100]<quasar::SpeakerCodeTraining::AlignedData,quasar::SpeakerCodeTraining::AlignedData const&>((uint64_t)v4, v9, a2);
  ++*v4;
  return result;
}

void kaldi::Shuffle<std::__deque_iterator<quasar::SpeakerCodeTraining::AlignedData,quasar::SpeakerCodeTraining::AlignedData*,quasar::SpeakerCodeTraining::AlignedData&,quasar::SpeakerCodeTraining::AlignedData**,long,39l>>(char *a1, int32x2_t *a2, char *a3, int32x2_t *a4, int a5)
{
  uint64_t v7;
  uint64_t v9;
  int v10;
  int32x2_t *v11;
  std::vector<unsigned int> v12[2];
  char *v13;
  int32x2_t *v14;

  if (a4 != a2)
  {
    v7 = 39 * ((unint64_t)(a3 - a1) >> 3)
       - 991146299 * (((unint64_t)a4 - *(_QWORD *)a3) >> 3)
       + 991146299 * (((unint64_t)a2 - *(_QWORD *)a1) >> 3)
       - 1;
    if ((int)v7 >= 1)
    {
      kaldi::UniformRandomNumber::UniformRandomNumber(v12, 2147483646, (unsigned int *)1, (unsigned int *)0x3E8);
      if (a5 < 0)
        a5 = time(0);
      kaldi::UniformRandomNumber::SetRandomSeeds((kaldi::UniformRandomNumber *)v12, a5);
      v9 = v7 + 1;
      do
      {
        v10 = kaldi::UniformRandomNumber::Rand((kaldi::UniformRandomNumber *)v12, 0);
        v13 = a1;
        v14 = a2;
        std::__deque_iterator<quasar::SpeakerCodeTraining::AlignedData,quasar::SpeakerCodeTraining::AlignedData*,quasar::SpeakerCodeTraining::AlignedData&,quasar::SpeakerCodeTraining::AlignedData**,long,39l>::operator+=[abi:ne180100](&v13, v9 - 1);
        v11 = v14;
        v13 = a1;
        v14 = a2;
        std::__deque_iterator<quasar::SpeakerCodeTraining::AlignedData,quasar::SpeakerCodeTraining::AlignedData*,quasar::SpeakerCodeTraining::AlignedData&,quasar::SpeakerCodeTraining::AlignedData**,long,39l>::operator+=[abi:ne180100](&v13, v10 % (int)v9);
        std::swap[abi:ne180100]<quasar::SpeakerCodeTraining::AlignedData>(v11, v14);
        --v9;
      }
      while (v9 > 1);
      kaldi::UniformRandomNumber::~UniformRandomNumber((kaldi::UniformRandomNumber *)v12);
    }
  }
}

void sub_1ADC69880(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  kaldi::UniformRandomNumber::~UniformRandomNumber((kaldi::UniformRandomNumber *)&a9);
  _Unwind_Resume(a1);
}

void quasar::SpeechRecognizer::concatenateLabels(uint64_t a1, _QWORD *a2, uint64_t **a3, unsigned int a4)
{
  uint64_t *v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  char *v25;
  char *v26;
  char *v27;
  uint64_t v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;

  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 280) + 24) + 52))
  {
    v7 = a2[22];
    v6 = (uint64_t *)a2[23];
    v8 = a2 + 22;
    if ((*(_DWORD *)(*(_QWORD *)(a1 + 600) + 64)
                      + *(_DWORD *)(*(_QWORD *)(a1 + 600) + 64) * *(_DWORD *)*(v8 - 2)) > (unint64_t)(((uint64_t)v6 - v7) >> 3))
    {
      if (quasar::gLogLevel >= 4)
      {
        v44 = 0u;
        v45 = 0u;
        v42 = 0u;
        v43 = 0u;
        v40 = 0u;
        v41 = 0u;
        v38 = 0u;
        v39 = 0u;
        v36 = 0u;
        v37 = 0u;
        v34 = 0u;
        v35 = 0u;
        v32 = 0u;
        v33 = 0u;
        v30 = 0u;
        v31 = 0u;
        v29 = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v29);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v29, (uint64_t)"Recognition is not final, concatenating alignments, feature buffer size: ", 73);
        v11 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)", label buffer size: ", 21);
        v12 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)", pdfs size: ", 13);
        v13 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)", num frames: ", 14);
        std::ostream::operator<<();
        quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&v29);
        v6 = (uint64_t *)a2[23];
      }
      std::vector<std::pair<int,BOOL>>::__insert_with_size[abi:ne180100]<std::__wrap_iter<std::pair<int,BOOL> const*>,std::__wrap_iter<std::pair<int,BOOL> const*>>((uint64_t)v8, v6, *a3, a3[1], a3[1] - *a3);
      v14 = a4;
      if (a4 != a3[1] - *a3)
      {
        v15 = 0;
        v16 = a2 + 24;
        v17 = (char *)a2[23];
        do
        {
          if ((unint64_t)v17 >= *v16)
          {
            v18 = (uint64_t)&v17[-*v8] >> 3;
            if ((unint64_t)(v18 + 1) >> 61)
              std::vector<int>::__throw_length_error[abi:ne180100]();
            v19 = *v16 - *v8;
            v20 = v19 >> 2;
            if (v19 >> 2 <= (unint64_t)(v18 + 1))
              v20 = v18 + 1;
            if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFF8)
              v21 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v21 = v20;
            v23 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(a2 + 24), v21);
            v24 = &v23[8 * v18];
            *(_DWORD *)v24 = -1;
            v24[4] = 0;
            v26 = (char *)a2[22];
            v25 = (char *)a2[23];
            v27 = v24;
            if (v25 != v26)
            {
              do
              {
                v28 = *((_QWORD *)v25 - 1);
                v25 -= 8;
                *((_QWORD *)v27 - 1) = v28;
                v27 -= 8;
              }
              while (v25 != v26);
              v25 = (char *)*v8;
            }
            v17 = v24 + 8;
            a2[22] = v27;
            a2[23] = v24 + 8;
            a2[24] = &v23[8 * v22];
            if (v25)
              operator delete(v25);
          }
          else
          {
            *(_DWORD *)v17 = -1;
            v17[4] = 0;
            v17 += 8;
          }
          a2[23] = v17;
          ++v15;
        }
        while (v14 - (a3[1] - *a3) > v15);
      }
      if (quasar::gLogLevel > 3)
      {
        v44 = 0u;
        v45 = 0u;
        v42 = 0u;
        v43 = 0u;
        v40 = 0u;
        v41 = 0u;
        v38 = 0u;
        v39 = 0u;
        v36 = 0u;
        v37 = 0u;
        v34 = 0u;
        v35 = 0u;
        v32 = 0u;
        v33 = 0u;
        v30 = 0u;
        v31 = 0u;
        v29 = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v29);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v29, (uint64_t)"Label concatenation is completed, label buffer size: ", 53);
        std::ostream::operator<<();
        quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&v29);
      }
    }
  }
  else if (quasar::gLogLevel >= 5)
  {
    v44 = 0u;
    v45 = 0u;
    v42 = 0u;
    v43 = 0u;
    v40 = 0u;
    v41 = 0u;
    v38 = 0u;
    v39 = 0u;
    v36 = 0u;
    v37 = 0u;
    v34 = 0u;
    v35 = 0u;
    v32 = 0u;
    v33 = 0u;
    v30 = 0u;
    v31 = 0u;
    v29 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v29);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v29, (uint64_t)"Training is not enabled, not concatenating labels.", 50);
    quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&v29);
  }
}

void sub_1ADC69BBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&a9);
  _Unwind_Resume(a1);
}

void quasar::SpeechRecognizer::splitComposedLmeTokens(uint64_t a1, uint64_t a2, quasar::SpeechRequestData **a3)
{
  quasar::SpeechRequestData *v5;
  uint64_t v6;
  _QWORD **LmeDataStreams;
  uint64_t **v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t *v14;
  const quasar::Token *v15;
  const quasar::Token *v16;
  std::string::size_type size;
  int v18;
  int v19;
  quasar::QsrText *v20;
  std::string *v21;
  std::string *v22;
  std::string *v23;
  std::string::size_type v24;
  std::string::size_type v25;
  int v26;
  std::string *v29;
  std::vector<std::wstring>::pointer end;
  std::string *begin;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  std::string *v35;
  std::wstring *v36;
  std::wstring::size_type v37;
  std::wstring *v38;
  std::wstring::size_type v39;
  unsigned __int8 *v40;
  std::wstring *v41;
  unsigned __int8 *v42;
  unsigned __int8 *v43;
  unsigned __int8 *v44;
  int v45;
  std::wstring *v46;
  unsigned __int8 *v47;
  std::wstring *v48;
  std::wstring *v49;
  std::wstring *v50;
  unsigned __int8 *v51;
  int v52;
  std::string::size_type v53;
  std::string::size_type v54;
  std::wstring *v55;
  std::wstring::size_type v56;
  std::wstring *v57;
  unsigned __int8 *v58;
  std::wstring *v59;
  std::wstring *v60;
  std::wstring *v61;
  unsigned __int8 *v62;
  int v63;
  std::string::size_type v64;
  std::string::size_type v65;
  std::wstring *v66;
  __int128 v67;
  __int128 v68;
  std::string *v70;
  void **p_data;
  __int128 v72;
  std::string::size_type v73;
  void *v74;
  BOOL v75;
  std::vector<std::wstring>::pointer v76;
  uint64_t v77;
  quasar::LmeData ***v78;
  std::wstring *v79;
  quasar::LmeData *v80;
  __int128 v81;
  void **v82;
  void **v83;
  __int128 v84;
  __int128 **v85;
  void **v86;
  std::string::size_type v87;
  std::string::size_type v88;
  std::string::size_type v89;
  int v90;
  std::string *v91;
  uint64_t v92;
  std::string *v93;
  int v94;
  int v95;
  int v96;
  int v97;
  char v98;
  _BOOL4 v99;
  std::string *v100;
  std::string::size_type v101;
  std::string::size_type v102;
  std::string::size_type v103;
  char v104;
  std::string::size_type v105;
  unint64_t v106;
  __int128 v107;
  uint64_t v108;
  __int128 **v109;
  __int128 **v110;
  std::vector<std::wstring>::pointer v111;
  uint64_t v112;
  uint64_t v113;
  char v114;
  std::string::size_type v115;
  const std::string *v116;
  __int128 v117;
  std::string *v118;
  uint64_t v119;
  void **v120;
  int v121;
  const std::string::value_type *v122;
  std::string::size_type v123;
  __int128 v124;
  std::string *v125;
  std::string *v126;
  std::string *v127;
  std::string *v128;
  std::string *v129;
  int v130;
  __int128 v131;
  int v132;
  uint64_t *v133;
  const quasar::Token *v134;
  uint64_t *v135;
  const quasar::Token *v136;
  uint64_t v137;
  std::wstring *v138;
  quasar::LmeData ***v139;
  int v140;
  std::string v141;
  int v142;
  std::string::size_type v143;
  std::string::value_type v144;
  std::string v145;
  uint64_t v146;
  void *v147;
  char v148;
  uint64_t v149;
  void *v150;
  char v151;
  void *v152;
  char v153;
  __int128 v154;
  uint64_t v155;
  std::string *v156;
  unint64_t v157;
  quasar::LmeData ***v158;
  quasar::LmeData ***v159;
  uint64_t v160;
  std::string v161;
  std::string __str;
  void *v163;
  int v164;
  int v165;
  char v166;
  char v167;
  std::string v168;
  uint64_t v169;
  __int128 v170;
  uint64_t v171;
  uint64_t v172;
  void *v173;
  char v174;
  void *v175;
  char v176;
  __int128 v177;
  void *v178[2];
  char v179;
  std::string v180;
  std::string v181;
  void **v182[3];
  void *__p[2];
  char v184;
  std::string v185;
  __int128 v186;
  uint64_t v187;
  std::string *v188;
  void **v189;
  uint64_t v190;
  std::string *p_str;
  std::string *v192;
  unint64_t v193;
  std::string v194;
  std::vector<std::wstring> v195;
  std::string v196;
  __int128 v197;

  *(_QWORD *)&v197 = *MEMORY[0x1E0C80C00];
  v5 = *a3;
  v6 = *((_QWORD *)*a3 + 3);
  if (*(char *)(v6 + 103) < 0)
  {
    std::string::__init_copy_ctor_external(&v161, *(const std::string::value_type **)(v6 + 80), *(_QWORD *)(v6 + 88));
    v5 = *a3;
  }
  else
  {
    v161 = *(std::string *)(v6 + 80);
  }
  LmeDataStreams = (_QWORD **)quasar::SpeechRequestData::getLmeDataStreams(v5);
  v158 = 0;
  v159 = 0;
  v160 = 0;
  std::vector<std::shared_ptr<quasar::LmeContainer>>::__init_with_size[abi:ne180100]<std::shared_ptr<quasar::LmeContainer>*,std::shared_ptr<quasar::LmeContainer>*>((char *)&v158, *LmeDataStreams, LmeDataStreams[1], ((char *)LmeDataStreams[1] - (char *)*LmeDataStreams) >> 4);
  v9 = *(uint64_t ***)(*(_QWORD *)a2 + 352);
  v10 = *v9;
  v133 = v9[1];
  if (*v9 != v133)
  {
    while (1)
    {
      v12 = *v10;
      v11 = v10[1];
      v135 = v10;
      if (*v10 == v11)
        goto LABEL_249;
      v13 = 0;
      do
      {
        v13 |= quasar::SpeechRecognizer::splitComposedLmeTokens(quasar::DecoderPassData &,std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData>,int)::$_0::operator()(v12);
        v12 += 224;
      }
      while (v12 != v11);
      if ((v13 & 1) == 0)
        goto LABEL_249;
      v155 = 0;
      v156 = 0;
      v157 = 0;
      v14 = v135;
      v15 = (const quasar::Token *)*v135;
      v16 = (const quasar::Token *)v135[1];
      v134 = v16;
LABEL_10:
      if (v15 != v16)
        break;
      if (v14 != &v155)
        std::vector<quasar::Token>::__assign_with_size[abi:ne180100]<quasar::Token*,quasar::Token*>((uint64_t)v14, v155, (uint64_t)v156, 0x6DB6DB6DB6DB6DB7 * (((uint64_t)v156 - v155) >> 5));
      __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v155;
      std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
LABEL_249:
      v10 = v135 + 3;
      if (v135 + 3 == v133)
        goto LABEL_250;
    }
    v136 = v15;
    quasar::Token::Token(&v141, v15);
    if (!quasar::SpeechRecognizer::splitComposedLmeTokens(quasar::DecoderPassData &,std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData>,int)::$_0::operator()((uint64_t)&v141))
    {
      v22 = v156;
      if ((unint64_t)v156 < v157)
        goto LABEL_23;
      goto LABEL_40;
    }
    size = HIBYTE(v145.__r_.__value_.__r.__words[2]);
    if ((v145.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      size = v145.__r_.__value_.__l.__size_;
    if (!size)
    {
      v22 = v156;
      if ((unint64_t)v156 < v157)
      {
LABEL_23:
        quasar::Token::Token(v156, (const quasar::Token *)&v141);
        v23 = (std::string *)((char *)v22 + 224);
LABEL_41:
        v156 = v23;
        goto LABEL_235;
      }
LABEL_40:
      v23 = (std::string *)std::vector<quasar::Token>::__push_back_slow_path<quasar::Token const&>(&v155, (const quasar::Token *)&v141);
      goto LABEL_41;
    }
    v18 = HIDWORD(v143);
    v19 = v142;
    std::string::basic_string[abi:ne180100]<0>(&v195, " ");
    quasar::splitAndTrimNoEmpty(&v145, (char *)&v195, &__str);
    v131 = *(_OWORD *)&__str.__r_.__value_.__l.__data_;
    v194.__r_.__value_.__r.__words[0] = (std::string::size_type)&__str;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v194);
    if (SHIBYTE(v195.__end_cap_.__value_) < 0)
      operator delete(v195.__begin_);
    memset(&v195, 0, sizeof(v195));
    v132 = v19;
    if (SHIBYTE(v161.__r_.__value_.__r.__words[2]) < 0)
    {
      if (v161.__r_.__value_.__l.__size_ != 17)
        goto LABEL_33;
      v21 = (std::string *)v161.__r_.__value_.__r.__words[0];
    }
    else
    {
      if (SHIBYTE(v161.__r_.__value_.__r.__words[2]) != 17)
        goto LABEL_33;
      v21 = &v161;
    }
    v24 = v21->__r_.__value_.__r.__words[0];
    v25 = v21->__r_.__value_.__l.__size_;
    v26 = v21->__r_.__value_.__s.__data_[16];
    if (v24 == 0x724F686372616553 && v25 == 0x6E6967617373654DLL && v26 == 103)
    {
      memset(&__str, 0, sizeof(__str));
      v33 = quasar::QsrText::SingletonInstance(v20);
      quasar::QsrText::decodeQsrText(v33, (uint64_t)&v141, (uint64_t)&__str);
      std::string::basic_string[abi:ne180100]<0>(&p_str, " ");
      quasar::splitAndTrimNoEmpty(&__str, (char *)&p_str, &v194);
      std::vector<std::string>::__vdeallocate(&v195);
      v195 = (std::vector<std::wstring>)v194;
      memset(&v194, 0, sizeof(v194));
      v188 = &v194;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v188);
      if (SHIBYTE(v193) < 0)
        operator delete(p_str);
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__str.__r_.__value_.__l.__data_);
      goto LABEL_46;
    }
LABEL_33:
    std::string::basic_string[abi:ne180100]<0>(&v194, "~w00");
    quasar::splitAndTrimNoEmpty(&v141, (char *)&v194, &__str);
    std::vector<std::string>::__vdeallocate(&v195);
    v195 = (std::vector<std::wstring>)__str;
    memset(&__str, 0, sizeof(__str));
    p_str = &__str;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&p_str);
    if (SHIBYTE(v194.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v194.__r_.__value_.__l.__data_);
    begin = (std::string *)v195.__begin_;
    end = v195.__end_;
    while (begin != (std::string *)end)
    {
      memset(&__str, 0, sizeof(__str));
      v32 = quasar::QsrText::SingletonInstance((quasar::QsrText *)v29);
      quasar::QsrText::decodeQsrText(v32, (uint64_t)begin, (uint64_t)&__str);
      v29 = std::string::operator=(begin, &__str);
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__str.__r_.__value_.__l.__data_);
      ++begin;
    }
LABEL_46:
    memset(&v194, 0, sizeof(v194));
    p_str = 0;
    v192 = 0;
    v193 = 0;
    v34 = -1 - 1431655765 * ((unint64_t)((char *)v195.__end_ - (char *)v195.__begin_) >> 3);
    if ((v34 & 0x80000000) != 0)
      goto LABEL_108;
    v35 = 0;
    while (1)
    {
      v36 = &v195.__begin_[v34];
      v37 = HIBYTE(v36->__r_.__value_.__r.__words[2]);
      if (SHIBYTE(v36->__r_.__value_.__r.__words[2]) < 0)
      {
        v38 = (std::wstring *)v36->__r_.__value_.__r.__words[0];
        v39 = v36->__r_.__value_.__l.__size_;
        if (v39)
        {
LABEL_52:
          v40 = (unsigned __int8 *)v38 + v39;
          v41 = v38;
          v42 = v40;
          do
          {
            v43 = (unsigned __int8 *)v41;
            v44 = (unsigned __int8 *)v41;
            while (1)
            {
              v45 = *v44++;
              if (v45 == 92)
                break;
              v43 = v44;
              if (v44 == v40)
              {
                v43 = v42;
                goto LABEL_58;
              }
            }
            v41 = (std::wstring *)(v43 + 1);
            v42 = v43;
          }
          while (v44 != v40);
LABEL_58:
          if (v43 != v40 && v43 - (unsigned __int8 *)v38 != -1)
          {
            if ((v37 & 0x80) != 0)
            {
              v46 = (std::wstring *)v36->__r_.__value_.__r.__words[0];
              v37 = v36->__r_.__value_.__l.__size_;
            }
            else
            {
              v46 = &v195.__begin_[v34];
            }
            v47 = (unsigned __int8 *)v46 + v37;
            if (v37)
            {
              v48 = v46;
              v49 = (std::wstring *)((char *)v46 + v37);
              do
              {
                v50 = v48;
                v51 = (unsigned __int8 *)v48;
                while (1)
                {
                  v52 = *v51++;
                  if (v52 == 92)
                    break;
                  v50 = (std::wstring *)v51;
                  if (v51 == v47)
                  {
                    v50 = v49;
                    goto LABEL_72;
                  }
                }
                v48 = (std::wstring *)((char *)&v50->__r_.__value_.__l.__data_ + 1);
                v49 = v50;
              }
              while (v51 != v47);
            }
            else
            {
              v50 = v46;
            }
LABEL_72:
            v53 = (char *)v50 - (char *)v46;
            if (v50 == (std::wstring *)v47)
              v54 = -1;
            else
              v54 = v53;
            std::string::basic_string(&__str, (const std::string *)v36, v54, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v188);
            if (SHIBYTE(v194.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v194.__r_.__value_.__l.__data_);
            v194 = __str;
            v55 = &v195.__begin_[v34];
            if (SHIBYTE(v55->__r_.__value_.__r.__words[2]) < 0)
            {
              v57 = (std::wstring *)v55->__r_.__value_.__r.__words[0];
              v56 = v55->__r_.__value_.__l.__size_;
            }
            else
            {
              v56 = HIBYTE(v55->__r_.__value_.__r.__words[2]);
              v57 = &v195.__begin_[v34];
            }
            v58 = (unsigned __int8 *)v57 + v56;
            if (v56)
            {
              v59 = v57;
              v60 = (std::wstring *)((char *)v57 + v56);
              do
              {
                v61 = v59;
                v62 = (unsigned __int8 *)v59;
                while (1)
                {
                  v63 = *v62++;
                  if (v63 == 92)
                    break;
                  v61 = (std::wstring *)v62;
                  if (v62 == v58)
                  {
                    v61 = v60;
                    goto LABEL_89;
                  }
                }
                v59 = (std::wstring *)((char *)&v61->__r_.__value_.__l.__data_ + 1);
                v60 = v61;
              }
              while (v62 != v58);
            }
            else
            {
              v61 = v57;
            }
LABEL_89:
            v64 = (char *)v61 - (char *)v57;
            if (v61 == (std::wstring *)v58)
              v65 = -1;
            else
              v65 = v64;
            std::string::basic_string(&__str, (const std::string *)v55, 0, v65, (std::allocator<char> *)&v188);
            v66 = &v195.__begin_[v34];
            if (SHIBYTE(v66->__r_.__value_.__r.__words[2]) < 0)
              operator delete(v66->__r_.__value_.__l.__data_);
            v67 = *(_OWORD *)&__str.__r_.__value_.__l.__data_;
            v66->__r_.__value_.__r.__words[2] = __str.__r_.__value_.__r.__words[2];
            *(_OWORD *)&v66->__r_.__value_.__l.__data_ = v67;
            v35 = v192;
          }
        }
      }
      else
      {
        v38 = &v195.__begin_[v34];
        v39 = HIBYTE(v36->__r_.__value_.__r.__words[2]);
        if (*((_BYTE *)&v36->__r_.__value_.__s + 23))
          goto LABEL_52;
      }
      if ((unint64_t)v35 >= v193)
      {
        v35 = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&p_str, (__int128 *)&v194);
      }
      else
      {
        if (SHIBYTE(v194.__r_.__value_.__r.__words[2]) < 0)
        {
          std::string::__init_copy_ctor_external(v35, v194.__r_.__value_.__l.__data_, v194.__r_.__value_.__l.__size_);
        }
        else
        {
          v68 = *(_OWORD *)&v194.__r_.__value_.__l.__data_;
          v35->__r_.__value_.__r.__words[2] = v194.__r_.__value_.__r.__words[2];
          *(_OWORD *)&v35->__r_.__value_.__l.__data_ = v68;
        }
        ++v35;
      }
      v192 = v35;
      if (v34-- <= 0)
      {
        if (p_str != v35)
        {
          v70 = v35 - 1;
          if (&v35[-1] > p_str)
          {
            p_data = (void **)&p_str[1].__r_.__value_.__l.__data_;
            do
            {
              __str = *(std::string *)((_BYTE *)p_data - 1);
              v72 = *(_OWORD *)&__str.__r_.__value_.__l.__data_;
              v73 = __str.__r_.__value_.__r.__words[2];
              v74 = (void *)v70->__r_.__value_.__r.__words[2];
              *(_OWORD *)(p_data - 3) = *(_OWORD *)&v70->__r_.__value_.__l.__data_;
              *(p_data - 1) = v74;
              v70->__r_.__value_.__r.__words[2] = v73;
              *(_OWORD *)&v70->__r_.__value_.__l.__data_ = v72;
              v75 = p_data >= (void **)--v70;
              p_data += 3;
            }
            while (!v75);
          }
        }
LABEL_108:
        v188 = 0;
        v189 = 0;
        v190 = 0;
        v130 = v18;
        if (SHIBYTE(v145.__r_.__value_.__r.__words[2]) < 0)
          std::string::__init_copy_ctor_external(&v196, v145.__r_.__value_.__l.__data_, v145.__r_.__value_.__l.__size_);
        else
          v196 = v145;
        memset(&__str, 0, sizeof(__str));
        *(_QWORD *)&v186 = &__str;
        BYTE8(v186) = 0;
        __str.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x18uLL);
        __str.__r_.__value_.__l.__size_ = __str.__r_.__value_.__r.__words[0];
        __str.__r_.__value_.__r.__words[2] = __str.__r_.__value_.__r.__words[0] + 24;
        __str.__r_.__value_.__l.__size_ = (std::string::size_type)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&__str.__r_.__value_.__r.__words[2], (__int128 *)&v196, &v197, (std::string *)__str.__r_.__value_.__l.__data_);
        std::vector<std::vector<std::string>>::push_back[abi:ne180100]((uint64_t *)&v188, (uint64_t)&__str);
        *(_QWORD *)&v186 = &__str;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v186);
        if (SHIBYTE(v196.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v196.__r_.__value_.__l.__data_);
        v76 = v195.__begin_;
        if (v195.__end_ != v195.__begin_)
        {
          v77 = 0;
          while (1)
          {
            memset(&v196, 0, sizeof(v196));
            v78 = v158;
            v139 = v159;
            v137 = v77;
            if (v158 != v159)
              break;
            v110 = 0;
            v109 = 0;
LABEL_193:
            std::vector<std::vector<std::string>>::__assign_with_size[abi:ne180100]<std::vector<std::string>*,std::vector<std::string>*>((uint64_t)&v188, v109, v110, 0xAAAAAAAAAAAAAAABLL * (v110 - v109));
            __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v196;
            std::vector<std::vector<std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
            v77 = v137 + 1;
            v76 = v195.__begin_;
            if (0xAAAAAAAAAAAAAAABLL * (((char *)v195.__end_ - (char *)v195.__begin_) >> 3) == v137 + 1)
              goto LABEL_196;
          }
          v79 = &v76[v77];
          v138 = v79;
          while (1)
          {
            v80 = **v78;
            quasar::LmeDataFactoryBase::PronSet::PronSet(&v186);
            if (SHIBYTE(v79->__r_.__value_.__r.__words[2]) < 0)
            {
              std::string::__init_copy_ctor_external(&v185, (const std::string::value_type *)v79->__r_.__value_.__l.__data_, v79->__r_.__value_.__l.__size_);
            }
            else
            {
              v81 = *(_OWORD *)&v79->__r_.__value_.__l.__data_;
              v185.__r_.__value_.__r.__words[2] = v79->__r_.__value_.__r.__words[2];
              *(_OWORD *)&v185.__r_.__value_.__l.__data_ = v81;
            }
            std::string::basic_string[abi:ne180100]<0>(__p, "");
            quasar::LmeDataFactoryBase::Word::Word(&__str, &v185, __p, 0);
            if (v184 < 0)
              operator delete(__p[0]);
            if (SHIBYTE(v185.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v185.__r_.__value_.__l.__data_);
            quasar::LmeData::lookupWordPronCache(v80, (const quasar::LmeDataFactoryBase::Word *)&__str, 1, (char **)&v186);
            quasar::LmeDataFactoryBase::PronSet::toPronChoices((uint64_t)&v186, 0, (uint64_t *)v182);
            v82 = v182[0];
            v83 = v182[1];
LABEL_125:
            if (v82 != v83)
              break;
            v181.__r_.__value_.__r.__words[0] = (std::string::size_type)v182;
            std::vector<quasar::PronChoice>::__destroy_vector::operator()[abi:ne180100]((void ***)&v181);
            std::__tree<std::__value_type<std::pair<quasar::PronType,std::string>,float>,std::__map_value_compare<std::pair<quasar::PronType,std::string>,std::__value_type<std::pair<quasar::PronType,std::string>,float>,std::less<std::pair<quasar::PronType,std::string>>,true>,std::allocator<std::__value_type<std::pair<quasar::PronType,std::string>,float>>>::destroy((uint64_t)&v168.__r_.__value_.__l.__size_, (char *)v168.__r_.__value_.__r.__words[2]);
            if (v167 < 0)
              operator delete(v163);
            v79 = v138;
            if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__str.__r_.__value_.__l.__data_);
            std::__tree<std::__value_type<std::pair<quasar::PronType,std::string>,float>,std::__map_value_compare<std::pair<quasar::PronType,std::string>,std::__value_type<std::pair<quasar::PronType,std::string>,float>,std::less<std::pair<quasar::PronType,std::string>>,true>,std::allocator<std::__value_type<std::pair<quasar::PronType,std::string>,float>>>::destroy((uint64_t)&v186, *((char **)&v186 + 1));
            v78 += 2;
            if (v78 == v139)
            {
              v110 = (__int128 **)v196.__r_.__value_.__l.__size_;
              v109 = (__int128 **)v196.__r_.__value_.__r.__words[0];
              goto LABEL_193;
            }
          }
          if (*((char *)v82 + 31) < 0)
          {
            std::string::__init_copy_ctor_external(&v181, (const std::string::value_type *)v82[1], (std::string::size_type)v82[2]);
          }
          else
          {
            v84 = *(_OWORD *)(v82 + 1);
            v181.__r_.__value_.__r.__words[2] = (std::string::size_type)v82[3];
            *(_OWORD *)&v181.__r_.__value_.__l.__data_ = v84;
          }
          std::string::basic_string[abi:ne180100]<0>(&v180, ".");
          std::string::basic_string[abi:ne180100]<0>(v178, " ");
          quasar::replaceAll((uint64_t)&v181, (uint64_t)&v180, (char *)v178);
          if (v179 < 0)
            operator delete(v178[0]);
          if (SHIBYTE(v180.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v180.__r_.__value_.__l.__data_);
          v85 = (__int128 **)v188;
          v86 = v189;
          while (2)
          {
            if (v85 == (__int128 **)v86)
            {
              if (SHIBYTE(v181.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v181.__r_.__value_.__l.__data_);
              v82 += 5;
              goto LABEL_125;
            }
            if ((v181.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v87 = HIBYTE(v181.__r_.__value_.__r.__words[2]);
            else
              v87 = v181.__r_.__value_.__l.__size_;
            std::string::basic_string(&v180, (const std::string *)v85[1] - 1, 0, v87, (std::allocator<char> *)v178);
            if ((v181.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v88 = HIBYTE(v181.__r_.__value_.__r.__words[2]);
            else
              v88 = v181.__r_.__value_.__l.__size_;
            v89 = HIBYTE(v180.__r_.__value_.__r.__words[2]);
            v90 = SHIBYTE(v180.__r_.__value_.__r.__words[2]);
            if ((v180.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
              v89 = v180.__r_.__value_.__l.__size_;
            if (v88 == v89)
            {
              if ((v180.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v91 = &v180;
              else
                v91 = (std::string *)v180.__r_.__value_.__r.__words[0];
              if ((*((_BYTE *)&v181.__r_.__value_.__s + 23) & 0x80) != 0)
              {
                v99 = memcmp(v181.__r_.__value_.__l.__data_, v91, v181.__r_.__value_.__l.__size_) == 0;
                if ((v90 & 0x80000000) == 0)
                  goto LABEL_156;
              }
              else if (*((_BYTE *)&v181.__r_.__value_.__s + 23))
              {
                v92 = HIBYTE(v181.__r_.__value_.__r.__words[2]) - 1;
                v93 = &v181;
                do
                {
                  v95 = v93->__r_.__value_.__s.__data_[0];
                  v93 = (std::string *)((char *)v93 + 1);
                  v94 = v95;
                  v97 = v91->__r_.__value_.__s.__data_[0];
                  v91 = (std::string *)((char *)v91 + 1);
                  v96 = v97;
                  v75 = v92-- != 0;
                  v98 = v75;
                  v99 = v94 == v96;
                }
                while (v94 == v96 && (v98 & 1) != 0);
                if ((SHIBYTE(v180.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                {
LABEL_156:
                  if (!v99)
                    goto LABEL_182;
                  break;
                }
              }
              else
              {
                v99 = 1;
                if ((SHIBYTE(v180.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                  goto LABEL_156;
              }
            }
            else
            {
              v99 = 0;
              if ((SHIBYTE(v180.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                goto LABEL_156;
            }
            operator delete(v180.__r_.__value_.__l.__data_);
            if (!v99)
            {
LABEL_182:
              v85 += 3;
              continue;
            }
            break;
          }
          v100 = (std::string *)v196.__r_.__value_.__l.__size_;
          if (v196.__r_.__value_.__l.__size_ >= v196.__r_.__value_.__r.__words[2])
          {
            v101 = std::vector<std::vector<std::string>>::__push_back_slow_path<std::vector<std::string> const&>((uint64_t *)&v196, v85);
          }
          else
          {
            *(_OWORD *)v196.__r_.__value_.__l.__size_ = 0uLL;
            v100->__r_.__value_.__r.__words[2] = 0;
            std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v100, *v85, v85[1], 0xAAAAAAAAAAAAAAABLL * (((char *)v85[1] - (char *)*v85) >> 3));
            v101 = (std::string::size_type)&v100[1];
          }
          v196.__r_.__value_.__l.__size_ = v101;
          if ((v181.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v102 = HIBYTE(v181.__r_.__value_.__r.__words[2]);
          else
            v102 = v181.__r_.__value_.__l.__size_;
          std::string::basic_string(&v180, (const std::string *)v85[1] - 1, v102, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)v178);
          std::string::operator=((std::string *)(*(_QWORD *)(v196.__r_.__value_.__l.__size_ - 16) - 24), &v181);
          quasar::trim(&v180);
          v103 = HIBYTE(v180.__r_.__value_.__r.__words[2]);
          v104 = HIBYTE(v180.__r_.__value_.__r.__words[2]);
          if ((v180.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            v103 = v180.__r_.__value_.__l.__size_;
          if (v103)
          {
            v105 = v196.__r_.__value_.__l.__size_;
            v106 = *(_QWORD *)(v196.__r_.__value_.__l.__size_ - 16);
            if (v106 >= *(_QWORD *)(v196.__r_.__value_.__l.__size_ - 8))
            {
              v108 = std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)(v196.__r_.__value_.__l.__size_ - 24), (__int128 *)&v180);
            }
            else
            {
              if (SHIBYTE(v180.__r_.__value_.__r.__words[2]) < 0)
              {
                std::string::__init_copy_ctor_external(*(std::string **)(v196.__r_.__value_.__l.__size_ - 16), v180.__r_.__value_.__l.__data_, v180.__r_.__value_.__l.__size_);
              }
              else
              {
                v107 = *(_OWORD *)&v180.__r_.__value_.__l.__data_;
                *(_QWORD *)(v106 + 16) = *((_QWORD *)&v180.__r_.__value_.__l + 2);
                *(_OWORD *)v106 = v107;
              }
              v108 = v106 + 24;
              *(_QWORD *)(v105 - 16) = v106 + 24;
            }
            *(_QWORD *)(v105 - 16) = v108;
            v104 = HIBYTE(v180.__r_.__value_.__r.__words[2]);
          }
          if (v104 < 0)
            operator delete(v180.__r_.__value_.__l.__data_);
          goto LABEL_182;
        }
        v77 = 0;
LABEL_196:
        if (v189 == (void **)v188
          || 0xAAAAAAAAAAAAAAABLL
           * ((uint64_t)(v188->__r_.__value_.__l.__size_ - v188->__r_.__value_.__r.__words[0]) >> 3) != v77)
        {
          v128 = v156;
          if ((unint64_t)v156 >= v157)
          {
            v129 = (std::string *)std::vector<quasar::Token>::__push_back_slow_path<quasar::Token const&>(&v155, (const quasar::Token *)&v141);
            v14 = v135;
          }
          else
          {
            quasar::Token::Token(v156, (const quasar::Token *)&v141);
            v14 = v135;
            v129 = (std::string *)((char *)v128 + 224);
          }
          v156 = v129;
        }
        else
        {
          v140 = v142;
          memset(&v196, 0, sizeof(v196));
          std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v196, (__int128 *)v188->__r_.__value_.__l.__data_, (__int128 *)v188->__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL* ((uint64_t)(v188->__r_.__value_.__l.__size_ - v188->__r_.__value_.__r.__words[0]) >> 3));
          v111 = v195.__begin_;
          if (v195.__end_ != v195.__begin_)
          {
            v112 = 0;
            v113 = 0;
            v114 = 0;
            do
            {
              v115 = v196.__r_.__value_.__r.__words[0];
              std::string::basic_string[abi:ne180100]<0>(&v186, " ");
              v116 = (const std::string *)(v115 + v112 * 24);
              quasar::splitAndTrimNoEmpty(v116, (char *)&v186, &__str);
              v117 = *(_OWORD *)&__str.__r_.__value_.__l.__data_;
              v182[0] = (void **)&__str;
              std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v182);
              if (SHIBYTE(v187) < 0)
                operator delete((void *)v186);
              v118 = quasar::Token::Token(&__str, (const quasar::Token *)&v141);
              v119 = quasar::QsrText::SingletonInstance((quasar::QsrText *)v118);
              quasar::QsrText::encodeTokenQsrText(v119, (uint64_t)&v111[v112], (uint64_t)&__str);
              v120 = (void **)&p_str[v112].__r_.__value_.__l.__data_;
              v121 = SHIBYTE(p_str[v112].__r_.__value_.__r.__words[2]);
              if (v121 >= 0)
                v122 = (const std::string::value_type *)&p_str[v112];
              else
                v122 = (const std::string::value_type *)*v120;
              if (v121 >= 0)
                v123 = *((unsigned __int8 *)v120 + 23);
              else
                v123 = (std::string::size_type)v120[1];
              std::string::append(&__str, v122, v123);
              HIDWORD(v163) = v140;
              v164 = v140
                   + -1431655765
                   * ((*((_QWORD *)&v117 + 1) - (_QWORD)v117) >> 3)
                   * 10
                   * ((v130 - v132)
                    / (0xAAAAAAAAAAAAAAABLL
                     * ((uint64_t)(*((_QWORD *)&v131 + 1) - v131) >> 3))
                    / 0xA);
              v165 = v164;
              std::string::operator=(&v168, v116);
              v166 = 1;
              quasar::PhonesetMapping::getIpaPhoneSequence(a1 + 608, (uint64_t)&v168, (uint64_t)&v186);
              if (SHIBYTE(v171) < 0)
                operator delete((void *)v170);
              v170 = v186;
              v171 = v187;
              v140 = v164;
              if ((v114 & 1) != 0)
              {
                quasar::Token::DecodingSignals::DecodingSignals((float *)&v186, 0.0, 0.0, 0.0, 0.0);
                v124 = v186;
              }
              else
              {
                v124 = v154;
              }
              v177 = v124;
              v125 = v156;
              if ((unint64_t)v156 >= v157)
              {
                v126 = (std::string *)std::vector<quasar::Token>::__push_back_slow_path<quasar::Token const&>(&v155, (const quasar::Token *)&__str);
              }
              else
              {
                quasar::Token::Token(v156, (const quasar::Token *)&__str);
                v126 = (std::string *)((char *)v125 + 224);
              }
              v156 = v126;
              if (v176 < 0)
                operator delete(v175);
              if (v174 < 0)
                operator delete(v173);
              *(_QWORD *)&v186 = &v172;
              std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&v186);
              if (SHIBYTE(v171) < 0)
                operator delete((void *)v170);
              *(_QWORD *)&v186 = &v169;
              std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v186);
              if (SHIBYTE(v168.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v168.__r_.__value_.__l.__data_);
              if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
                operator delete(__str.__r_.__value_.__l.__data_);
              ++v113;
              v111 = v195.__begin_;
              ++v112;
              v114 = 1;
            }
            while (v113 != 0xAAAAAAAAAAAAAAABLL * (((char *)v195.__end_ - (char *)v195.__begin_) >> 3));
          }
          v127 = v156;
          v156[-8].__r_.__value_.__r.__words[0] = v143;
          v127[-8].__r_.__value_.__s.__data_[12] = v144;
          __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v196;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
          v14 = v135;
        }
        __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v188;
        std::vector<std::vector<std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
        __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&p_str;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
        if (SHIBYTE(v194.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v194.__r_.__value_.__l.__data_);
        __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v195;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
LABEL_235:
        if (v153 < 0)
          operator delete(v152);
        if (v151 < 0)
          operator delete(v150);
        __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v149;
        std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
        if (v148 < 0)
          operator delete(v147);
        __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v146;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
        if (SHIBYTE(v145.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v145.__r_.__value_.__l.__data_);
        if (SHIBYTE(v141.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v141.__r_.__value_.__l.__data_);
        v15 = (const quasar::Token *)((char *)v136 + 224);
        v16 = v134;
        goto LABEL_10;
      }
    }
  }
LABEL_250:
  __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v158;
  std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
  if (SHIBYTE(v161.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v161.__r_.__value_.__l.__data_);
}

void sub_1ADC6AC00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,char a61,uint64_t a62,uint64_t a63)
{
  char a64;
  void *__p;
  char a72;

  a33 = (uint64_t)&a61;
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&a33);
  a33 = (uint64_t)&a64;
  std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a33);
  if (a72 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t quasar::SpeechRecognizer::splitComposedLmeTokens(quasar::DecoderPassData &,std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData>,int)::$_0::operator()(uint64_t a1)
{
  int v1;
  std::string::size_type v2;
  const std::string::value_type *v3;
  int64_t v4;
  const std::string::value_type *v5;
  void *v7;
  const std::string::value_type *v8;
  int64_t v9;
  void *v10;
  const std::string::value_type *v11;
  uint64_t v13;
  int64_t v15;
  void *v16;
  char *v17;
  const std::string::value_type *v18;
  std::string __p;

  v1 = *(char *)(a1 + 23);
  v3 = *(const std::string::value_type **)a1;
  v2 = *(_QWORD *)(a1 + 8);
  if (v1 >= 0)
    v4 = *(unsigned __int8 *)(a1 + 23);
  else
    v4 = *(_QWORD *)(a1 + 8);
  if (v1 >= 0)
    v5 = (const std::string::value_type *)a1;
  else
    v5 = *(const std::string::value_type **)a1;
  if (v4 >= 9)
  {
    v7 = (void *)v5;
    v8 = &v5[v4];
    v9 = v4;
    v10 = (void *)v5;
    do
    {
      v11 = (const std::string::value_type *)memchr(v10, 92, v9 - 8);
      if (!v11)
        break;
      if (*(_QWORD *)v11 == 0x746361746E6F635CLL && v11[8] == 45)
      {
        v13 = 0;
        if (v11 == v8 || v11 - v5 == -1)
          return v13;
        v15 = v4;
        v16 = (void *)v5;
        do
        {
          if (v15 == 3)
            break;
          v17 = (char *)memchr(v16, 126, v15 - 3);
          if (!v17)
            break;
          if (*(_DWORD *)v17 == 808482686)
          {
            if (v17 == v8 || v17 - v5 == -1)
              break;
LABEL_33:
            if (v1 < 0)
              std::string::__init_copy_ctor_external(&__p, v3, v2);
            else
              __p = *(std::string *)a1;
            v13 = quasar::Decoder::isLikelyWithPhoeticName(&__p) ^ 1;
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__p.__r_.__value_.__l.__data_);
            return v13;
          }
          v16 = v17 + 1;
          v15 = v8 - (_BYTE *)v16;
        }
        while (v8 - (_BYTE *)v16 >= 4);
        while (1)
        {
          v18 = (const std::string::value_type *)memchr(v7, 95, v4);
          if (!v18)
            return 0;
          if (*v18 == 95)
          {
            v13 = 0;
            if (v18 == v8 || v18 - v5 == -1)
              return v13;
            goto LABEL_33;
          }
          v13 = 0;
          v7 = (void *)(v18 + 1);
          v4 = v8 - (v18 + 1);
          if (v4 < 1)
            return v13;
        }
      }
      v10 = (void *)(v11 + 1);
      v9 = v8 - (_BYTE *)v10;
    }
    while (v8 - (_BYTE *)v10 >= 9);
  }
  return 0;
}

void sub_1ADC6B0D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void quasar::SpeechRecognizer::writeToOfflineRecogResultStream(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;

  v2 = *(_QWORD *)(a1 + 280);
  if (*(_BYTE *)(v2 + 216))
  {
    v4 = **(void ***)(v2 + 24);
    if (v4)
    v5 = (std::__shared_weak_count *)a2[1];
    v11 = *a2;
    v12 = v5;
    if (v5)
    {
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldxr(p_shared_owners);
      while (__stxr(v7 + 1, p_shared_owners));
    }
    (*(void (**)(void *, uint64_t *))(*(_QWORD *)v4 + 144))(v4, &v11);
    v8 = v12;
    if (v12)
    {
      v9 = (unint64_t *)&v12->__shared_owners_;
      do
        v10 = __ldaxr(v9);
      while (__stlxr(v10 - 1, v9));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
  }
}

void sub_1ADC6B1A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

double quasar::SpeechRecognizer::getSnr(uint64_t a1, std::mutex *a2, int a3)
{
  uint64_t *v3;
  double result;
  uint64_t v7;
  uint64_t v8;
  char v9;
  int v10;
  unsigned __int16 *v11;
  int v12;
  int v13;
  _BOOL4 v15;
  uint64_t v16;
  int v17;
  __int16 v18;

  v3 = *(uint64_t **)a1;
  result = -1000.0;
  if (*(_QWORD *)a1 == *(_QWORD *)(a1 + 8) || *v3 == v3[1])
    return result;
  v18 = 0;
  quasar::Align::MakeMonotonic(v3, (_BYTE *)&v18 + 1, &v18);
  v7 = *v3;
  v8 = v3[1];
  if (*v3 == v8)
    goto LABEL_22;
  v9 = 1;
  do
  {
    if ((v9 & 1) != 0)
      kaldi::SnrTracker::label_noise_or_speech_ms(a2, 0, *(unsigned int *)(v7 + 28), a3, 1);
    v10 = *(char *)(v7 + 23);
    if (v10 < 0)
    {
      if (*(_QWORD *)(v7 + 8) != 3)
      {
LABEL_18:
        v15 = 0;
        goto LABEL_19;
      }
      v11 = *(unsigned __int16 **)v7;
    }
    else
    {
      v11 = (unsigned __int16 *)v7;
      if (v10 != 3)
        goto LABEL_18;
    }
    v12 = *v11;
    v13 = *((unsigned __int8 *)v11 + 2);
    v15 = v12 == 16188 && v13 == 62;
LABEL_19:
    kaldi::SnrTracker::label_noise_or_speech_ms(a2, *(unsigned int *)(v7 + 28), *(unsigned int *)(v7 + 36), a3, v15);
    kaldi::SnrTracker::label_noise_or_speech_ms(a2, *(unsigned int *)(v7 + 36), *(unsigned int *)(v7 + 32), a3, 1);
    v9 = 0;
    v7 += 224;
  }
  while (v7 != v8);
  v16 = v3[1];
  if (v16 != *v3)
  {
    v17 = *(_DWORD *)(v16 - 192);
    return kaldi::SnrTracker::get_snr(a2, a3, v17);
  }
LABEL_22:
  v17 = -1;
  return kaldi::SnrTracker::get_snr(a2, a3, v17);
}

uint64_t quasar::SpeechRecognizer::writeRecordedStateAccesses(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  BOOL v11;

  v2 = *(_QWORD *)(result + 64);
  v3 = *(_QWORD **)(v2 + 328);
  v4 = (_QWORD *)(v2 + 336);
  if (v3 != (_QWORD *)(v2 + 336))
  {
    do
    {
      v6 = (uint64_t *)v3[7];
      v7 = (uint64_t *)v3[8];
      while (v6 != v7)
      {
        v8 = *v6;
        v6 += 2;
        result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v8 + 40))(v8, a2);
      }
      v9 = (_QWORD *)v3[1];
      if (v9)
      {
        do
        {
          v10 = v9;
          v9 = (_QWORD *)*v9;
        }
        while (v9);
      }
      else
      {
        do
        {
          v10 = (_QWORD *)v3[2];
          v11 = *v10 == (_QWORD)v3;
          v3 = v10;
        }
        while (!v11);
      }
      v3 = v10;
    }
    while (v10 != v4);
  }
  return result;
}

void quasar::SpeechRecognizer::cacheInboundConfusionNetwork(uint64_t a1, uint64_t ***a2, int a3)
{
  quasar::ConfusionNetworkCache::storeConfNetwork(*(_QWORD *)(a1 + 632), a2, a3);
}

void quasar::SpeechRecognizer::pauseRecognition(quasar::SpeechRecognizer *this)
{
  std::mutex *v2;
  uint64_t v3;
  _QWORD *v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;

  v2 = (std::mutex *)((char *)this + 136);
  std::mutex::lock((std::mutex *)((char *)this + 136));
  if (*((_DWORD *)this + 32) == 2)
  {
    v3 = *(_QWORD *)(*((_QWORD *)this + 35) + 24);
    if (*(_BYTE *)(v3 + 36) && !*(_BYTE *)(v3 + 37))
    {
      if (quasar::gLogLevel >= 4)
      {
        v27 = 0u;
        v28 = 0u;
        v25 = 0u;
        v26 = 0u;
        v23 = 0u;
        v24 = 0u;
        v21 = 0u;
        v22 = 0u;
        v19 = 0u;
        v20 = 0u;
        v17 = 0u;
        v18 = 0u;
        v15 = 0u;
        v16 = 0u;
        v13 = 0u;
        v14 = 0u;
        v12 = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v12);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v12, (uint64_t)"Pause: pausing the recognizer.", 30);
        quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&v12);
      }
      quasar::MultiChainMultiAudioBuffer::startCountingAudioDuration(*((uint64_t ***)this + 33));
      v5 = (std::__shared_weak_count *)*((_QWORD *)this + 84);
      if (v5)
      {
        v6 = std::__shared_weak_count::lock(v5);
        *((_QWORD *)&v12 + 1) = v6;
        if (v6)
        {
          v7 = v6;
          v8 = *((_QWORD *)this + 83);
          *(_QWORD *)&v12 = v8;
          if (v8)
          {
            (*(void (**)(uint64_t))(*(_QWORD *)v8 + 128))(v8);
            v9 = **(_QWORD **)(*((_QWORD *)this + 35) + 24);
            (*(void (**)(uint64_t))(*(_QWORD *)v9 + 88))(v9);
            *((_DWORD *)this + 32) = 4;
          }
          p_shared_owners = (unint64_t *)&v7->__shared_owners_;
          do
            v11 = __ldaxr(p_shared_owners);
          while (__stlxr(v11 - 1, p_shared_owners));
          if (!v11)
          {
            ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
            std::__shared_weak_count::__release_weak(v7);
          }
        }
      }
    }
    else if (quasar::gLogLevel >= 4)
    {
      v27 = 0u;
      v28 = 0u;
      v25 = 0u;
      v26 = 0u;
      v23 = 0u;
      v24 = 0u;
      v21 = 0u;
      v22 = 0u;
      v19 = 0u;
      v20 = 0u;
      v17 = 0u;
      v18 = 0u;
      v15 = 0u;
      v16 = 0u;
      v13 = 0u;
      v14 = 0u;
      v12 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v12);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v12, (uint64_t)"Pause: utterance detection is disabled or utterance concatenation is enabled, do nothing.. ", 91);
      quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&v12);
    }
  }
  else if (quasar::gLogLevel >= 5)
  {
    v27 = 0u;
    v28 = 0u;
    v25 = 0u;
    v26 = 0u;
    v23 = 0u;
    v24 = 0u;
    v21 = 0u;
    v22 = 0u;
    v19 = 0u;
    v20 = 0u;
    v17 = 0u;
    v18 = 0u;
    v15 = 0u;
    v16 = 0u;
    v13 = 0u;
    v14 = 0u;
    v12 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v12);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v12, (uint64_t)"Pause called but recognizer in state:", 37);
    v4 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)", do nothing..", 14);
    quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&v12);
  }
  std::mutex::unlock(v2);
}

void sub_1ADC6B5D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::mutex *v9;

  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::mutex::unlock(v9);
  _Unwind_Resume(a1);
}

void quasar::SpeechRecognizer::resumeRecognition(uint64_t a1, __int128 **a2, __int128 **a3, uint64_t a4, char a5)
{
  std::mutex *v10;
  uint64_t v11;
  float v12;
  float v13;
  float *v14;
  unint64_t v15;
  float *v16;
  float *v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  char *v22;
  float *v23;
  char *v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  __int128 *v28;
  __int128 *v29;
  uint64_t v30;
  __int128 *v31;
  __int128 *v32;
  uint64_t v33;
  uint64_t v34;
  std::__shared_weak_count *v35;
  std::__shared_weak_count *v36;
  std::__shared_weak_count *v37;
  uint64_t v38;
  unint64_t *p_shared_owners;
  unint64_t v40;
  std::string v41;
  _BYTE v42[32];
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  std::string *v58;

  v10 = (std::mutex *)(a1 + 136);
  std::mutex::lock((std::mutex *)(a1 + 136));
  if (*(_DWORD *)(a1 + 128) == 4)
  {
    v11 = *(_QWORD *)(*(_QWORD *)(a1 + 280) + 24);
    if (*(_BYTE *)(v11 + 36) && !*(_BYTE *)(v11 + 37))
    {
      if (quasar::gLogLevel >= 4)
      {
        v56 = 0u;
        v57 = 0u;
        v54 = 0u;
        v55 = 0u;
        v52 = 0u;
        v53 = 0u;
        v50 = 0u;
        v51 = 0u;
        v48 = 0u;
        v49 = 0u;
        v46 = 0u;
        v47 = 0u;
        v44 = 0u;
        v45 = 0u;
        v43 = 0u;
        memset(v42, 0, sizeof(v42));
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v42);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v42, (uint64_t)"Resume: resuming the recognizer.", 32);
        quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)v42);
      }
      v12 = quasar::MultiChainMultiAudioBuffer::stopCountingAudioDuration(*(uint64_t ***)(a1 + 264));
      v13 = v12;
      v14 = *(float **)(a1 + 688);
      v15 = *(_QWORD *)(a1 + 696);
      if ((unint64_t)v14 >= v15)
      {
        v17 = *(float **)(a1 + 680);
        v18 = v14 - v17;
        if ((unint64_t)(v18 + 1) >> 62)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v19 = v15 - (_QWORD)v17;
        v20 = (uint64_t)(v15 - (_QWORD)v17) >> 1;
        if (v20 <= v18 + 1)
          v20 = v18 + 1;
        if (v19 >= 0x7FFFFFFFFFFFFFFCLL)
          v21 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v21 = v20;
        if (v21)
        {
          v22 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(a1 + 696, v21);
          v14 = *(float **)(a1 + 688);
          v17 = *(float **)(a1 + 680);
        }
        else
        {
          v22 = 0;
        }
        v23 = (float *)&v22[4 * v18];
        v24 = &v22[4 * v21];
        *v23 = v13;
        v16 = v23 + 1;
        while (v14 != v17)
        {
          v25 = *((_DWORD *)v14-- - 1);
          *((_DWORD *)v23-- - 1) = v25;
        }
        *(_QWORD *)(a1 + 680) = v23;
        *(_QWORD *)(a1 + 688) = v16;
        *(_QWORD *)(a1 + 696) = v24;
        if (v17)
          operator delete(v17);
      }
      else
      {
        *v14 = v12;
        v16 = v14 + 1;
      }
      *(_QWORD *)(a1 + 688) = v16;
      if ((a5 & 1) == 0)
        quasar::MultiChainMultiAudioBuffer::emptyAudioBuffer(*(quasar::MultiChainMultiAudioBuffer **)(a1 + 264));
      v26 = *(_QWORD *)(*(_QWORD *)(a1 + 280) + 24);
      memset(v42, 0, 24);
      quasar::RunAsyncParams::setLeftContext(v26, (uint64_t)v42);
      v41.__r_.__value_.__r.__words[0] = (std::string::size_type)v42;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v41);
      v27 = *(_QWORD *)(*(_QWORD *)(a1 + 280) + 24);
      memset(v42, 0, 24);
      quasar::RunAsyncParams::setLeftContextForItn(v27, (uint64_t)v42);
      v41.__r_.__value_.__r.__words[0] = (std::string::size_type)v42;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v41);
      v28 = *a3;
      v29 = a3[1];
      if (v29 != *a3)
      {
        v30 = ((char *)v29 - (char *)*a3) >> 3;
        memset(v42, 0, 24);
        std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)v42, v28, v29, 0xAAAAAAAAAAAAAAABLL * v30);
        if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)&v42[8] - *(_QWORD *)v42) >> 3) >= 5)
        {
          memset(&v41, 0, sizeof(v41));
          std::vector<std::string>::__init_with_size[abi:ne180100]<std::__wrap_iter<std::string*>,std::__wrap_iter<std::string*>>(&v41, (__int128 *)(*(_QWORD *)&v42[8] - 96), *(__int128 **)&v42[8], 4uLL);
          std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((std::vector<std::wstring> *)v42, (std::string *)v41.__r_.__value_.__l.__data_, (__int128 *)v41.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v41.__r_.__value_.__l.__size_ - v41.__r_.__value_.__r.__words[0]) >> 3));
          v58 = &v41;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v58);
        }
        quasar::RunAsyncParams::setLeftContextForItn(*(_QWORD *)(*(_QWORD *)(a1 + 280) + 24), (uint64_t)v42);
        v41.__r_.__value_.__r.__words[0] = (std::string::size_type)v42;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v41);
      }
      v31 = *a2;
      v32 = a2[1];
      if (v32 != *a2)
      {
        v33 = ((char *)v32 - (char *)*a2) >> 3;
        memset(v42, 0, 24);
        std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)v42, v31, v32, 0xAAAAAAAAAAAAAAABLL * v33);
        if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)&v42[8] - *(_QWORD *)v42) >> 3) >= 5)
        {
          memset(&v41, 0, sizeof(v41));
          std::vector<std::string>::__init_with_size[abi:ne180100]<std::__wrap_iter<std::string*>,std::__wrap_iter<std::string*>>(&v41, (__int128 *)(*(_QWORD *)&v42[8] - 96), *(__int128 **)&v42[8], 4uLL);
          std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((std::vector<std::wstring> *)v42, (std::string *)v41.__r_.__value_.__l.__data_, (__int128 *)v41.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v41.__r_.__value_.__l.__size_ - v41.__r_.__value_.__r.__words[0]) >> 3));
          v58 = &v41;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v58);
        }
        quasar::RunAsyncParams::setLeftContext(*(_QWORD *)(*(_QWORD *)(a1 + 280) + 24), (uint64_t)v42);
        v41.__r_.__value_.__r.__words[0] = (std::string::size_type)v42;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v41);
      }
      quasar::RunAsyncParams::setRightContextForItn(*(_QWORD *)(*(_QWORD *)(a1 + 280) + 24), a4);
      v34 = **(_QWORD **)(*(_QWORD *)(a1 + 280) + 24);
      (*(void (**)(uint64_t))(*(_QWORD *)v34 + 96))(v34);
      *(_DWORD *)(a1 + 128) = 2;
      v35 = *(std::__shared_weak_count **)(a1 + 672);
      if (v35)
      {
        v36 = std::__shared_weak_count::lock(v35);
        *(_QWORD *)&v42[8] = v36;
        if (v36)
        {
          v37 = v36;
          v38 = *(_QWORD *)(a1 + 664);
          *(_QWORD *)v42 = v38;
          if (v38)
            (*(void (**)(uint64_t))(*(_QWORD *)v38 + 136))(v38);
          p_shared_owners = (unint64_t *)&v37->__shared_owners_;
          do
            v40 = __ldaxr(p_shared_owners);
          while (__stlxr(v40 - 1, p_shared_owners));
          if (!v40)
          {
            ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
            std::__shared_weak_count::__release_weak(v37);
          }
        }
      }
    }
    else if (quasar::gLogLevel >= 4)
    {
      v56 = 0u;
      v57 = 0u;
      v54 = 0u;
      v55 = 0u;
      v52 = 0u;
      v53 = 0u;
      v50 = 0u;
      v51 = 0u;
      v48 = 0u;
      v49 = 0u;
      v46 = 0u;
      v47 = 0u;
      v44 = 0u;
      v45 = 0u;
      v43 = 0u;
      memset(v42, 0, sizeof(v42));
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v42);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v42, (uint64_t)"Resume: utterance detection is disabled or utterance concatenation is enabled, do nothing.. ", 92);
LABEL_8:
      quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)v42);
    }
  }
  else if (quasar::gLogLevel >= 4)
  {
    v56 = 0u;
    v57 = 0u;
    v54 = 0u;
    v55 = 0u;
    v52 = 0u;
    v53 = 0u;
    v50 = 0u;
    v51 = 0u;
    v48 = 0u;
    v49 = 0u;
    v46 = 0u;
    v47 = 0u;
    v44 = 0u;
    v45 = 0u;
    v43 = 0u;
    memset(v42, 0, sizeof(v42));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v42);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v42, (uint64_t)"Resume: The recognizer was not paused, so nothing to resume, ignoring the call.", 79);
    goto LABEL_8;
  }
  std::mutex::unlock(v10);
}

void sub_1ADC6BAE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  std::mutex *v5;
  va_list va;

  va_start(va, a5);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::mutex::unlock(v5);
  _Unwind_Resume(a1);
}

_QWORD *quasar::SpeechRecognizer::getPauseDurations@<X0>(quasar::SpeechRecognizer *this@<X0>, _QWORD *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  return std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(a2, *((const void **)this + 85), *((_QWORD *)this + 86), (uint64_t)(*((_QWORD *)this + 86) - *((_QWORD *)this + 85)) >> 2);
}

void quasar::SpeechRecognizer::initializeBaseSymbolTable(quasar::SpeechRecognizer *this, const quasar::SystemConfig *a2)
{
  uint64_t PtreeOptional;
  uint64_t v5;
  uint64_t ChildOptional;
  quasar::PTree *v7;
  uint64_t String;
  uint64_t v9;
  uint64_t ModelLoaderPtr;
  unint64_t *v11;
  void *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *p_shared_owners;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  uint64_t v32;
  std::__shared_weak_count *v33;
  void *__p[2];
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;

  if (*((_QWORD *)this + 88))
    return;
  std::string::basic_string[abi:ne180100]<0>(__p, "lme-create");
  PtreeOptional = quasar::SystemConfig::getPtreeOptional((uint64_t)a2, (uint64_t)__p);
  v5 = PtreeOptional;
  if ((SBYTE7(v35) & 0x80000000) == 0)
  {
    if (PtreeOptional)
      goto LABEL_5;
LABEL_9:
    if (quasar::gLogLevel < 2)
      return;
    v49 = 0u;
    v50 = 0u;
    v47 = 0u;
    v48 = 0u;
    v45 = 0u;
    v46 = 0u;
    v43 = 0u;
    v44 = 0u;
    v41 = 0u;
    v42 = 0u;
    v39 = 0u;
    v40 = 0u;
    v37 = 0u;
    v38 = 0u;
    v35 = 0u;
    v36 = 0u;
    *(_OWORD *)__p = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Unable to json at path lme-create from json", 43);
    goto LABEL_29;
  }
  operator delete(__p[0]);
  if (!v5)
    goto LABEL_9;
LABEL_5:
  std::string::basic_string[abi:ne180100]<0>(__p, "word-syms-map-file");
  ChildOptional = quasar::PTree::getChildOptional(v5, (uint64_t)__p);
  v7 = (quasar::PTree *)ChildOptional;
  if (SBYTE7(v35) < 0)
  {
    operator delete(__p[0]);
    if (!v7)
    {
LABEL_27:
      if (quasar::gLogLevel < 2)
        return;
      v49 = 0u;
      v50 = 0u;
      v47 = 0u;
      v48 = 0u;
      v45 = 0u;
      v46 = 0u;
      v43 = 0u;
      v44 = 0u;
      v41 = 0u;
      v42 = 0u;
      v39 = 0u;
      v40 = 0u;
      v37 = 0u;
      v38 = 0u;
      v35 = 0u;
      v36 = 0u;
      *(_OWORD *)__p = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Unable to read symbol table from json at path lme-create.word-syms-map-file", 75);
LABEL_29:
      quasar::QuasarWarnMessage::~QuasarWarnMessage((quasar::QuasarWarnMessage *)__p);
      return;
    }
  }
  else if (!ChildOptional)
  {
    goto LABEL_27;
  }
  String = quasar::PTree::getString(v7);
  v9 = *(unsigned __int8 *)(String + 23);
  if ((v9 & 0x80u) != 0)
    v9 = *(_QWORD *)(String + 8);
  if (!v9)
    goto LABEL_27;
  ModelLoaderPtr = quasar::SystemConfig::getModelLoaderPtr(a2);
  v12 = *(void **)ModelLoaderPtr;
  v11 = *(unint64_t **)(ModelLoaderPtr + 8);
  __p[0] = *(void **)ModelLoaderPtr;
  __p[1] = v11;
  if (v11)
  {
    v13 = v11 + 1;
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }
  v15 = quasar::PTree::getString(v7);
  quasar::ModelLoader::readSymbolTable((uint64_t)v12, v15, 2, 0, &v32);
  v16 = operator new();
  v17 = v16;
  v18 = (uint64_t *)((char *)this + 704);
  v19 = v32;
  v20 = v33;
  if (v33)
  {
    p_shared_owners = (unint64_t *)&v33->__shared_owners_;
    do
      v22 = __ldxr(p_shared_owners);
    while (__stxr(v22 + 1, p_shared_owners));
    *(_OWORD *)(v16 + 64) = 0u;
    *(_OWORD *)(v16 + 80) = 0u;
    *(_OWORD *)(v16 + 32) = 0u;
    *(_OWORD *)(v16 + 48) = 0u;
    *(_OWORD *)v16 = 0u;
    *(_OWORD *)(v16 + 16) = 0u;
    *(_QWORD *)(v16 + 96) = v19;
    *(_QWORD *)(v16 + 104) = v20;
    do
      v23 = __ldxr(p_shared_owners);
    while (__stxr(v23 + 1, p_shared_owners));
    *(_DWORD *)(v16 + 112) = 0;
    *(_QWORD *)(v16 + 128) = 0;
    *(_QWORD *)(v16 + 136) = 0;
    *(_QWORD *)(v16 + 120) = 0;
    do
      v24 = __ldaxr(p_shared_owners);
    while (__stlxr(v24 - 1, p_shared_owners));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  else
  {
    *(_OWORD *)(v16 + 64) = 0u;
    *(_OWORD *)(v16 + 80) = 0u;
    *(_OWORD *)(v16 + 32) = 0u;
    *(_OWORD *)(v16 + 48) = 0u;
    *(_OWORD *)v16 = 0u;
    *(_OWORD *)(v16 + 16) = 0u;
    *(_QWORD *)(v16 + 96) = v19;
    *(_QWORD *)(v16 + 104) = 0;
    *(_DWORD *)(v16 + 112) = 0;
    *(_QWORD *)(v16 + 128) = 0;
    *(_QWORD *)(v16 + 136) = 0;
    *(_QWORD *)(v16 + 120) = 0;
  }
  v25 = *v18;
  *v18 = v17;
  if (v25)
    std::default_delete<quasar::QsrTextSymbolTable>::operator()[abi:ne180100]((uint64_t)v18, v25);
  v26 = v33;
  if (v33)
  {
    v27 = (unint64_t *)&v33->__shared_owners_;
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
  v29 = (std::__shared_weak_count *)__p[1];
  if (__p[1])
  {
    v30 = (unint64_t *)((char *)__p[1] + 8);
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
}

void sub_1ADC6BEC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  quasar::QuasarWarnMessage::~QuasarWarnMessage((quasar::QuasarWarnMessage *)&__p);
  _Unwind_Resume(a1);
}

uint64_t quasar::SpeechRecognizer::getCachedTokensSize(quasar::SpeechRecognizer *this)
{
  return -1227133513 * ((*((_QWORD *)this + 68) - *((_QWORD *)this + 67)) >> 5);
}

void quasar::SpeechRecognizer::buildEditLmeWithLeftContext(quasar::SpeechRecognizer *a1, uint64_t a2, __int128 **a3)
{
  unint64_t *v5;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  __int128 v13;
  __int128 v14;

  quasar::SpeechRecognizer::processLeftContextForEditLme((uint64_t)a1, a3);
  if (*((_QWORD *)a1 + 64) && *((_QWORD *)a1 + 67) != *((_QWORD *)a1 + 68))
  {
    quasar::SpeechRecognizer::buildEditLmeContainerFromCachedTokens(a1, &v14);
    if ((_QWORD)v14)
    {
      v13 = v14;
      if (*((_QWORD *)&v14 + 1))
      {
        v5 = (unint64_t *)(*((_QWORD *)&v14 + 1) + 8);
        do
          v6 = __ldxr(v5);
        while (__stxr(v6 + 1, v5));
      }
      quasar::LmeDataStreams::addLmeContainer(a2, 3, &v13);
      v7 = (std::__shared_weak_count *)*((_QWORD *)&v13 + 1);
      if (*((_QWORD *)&v13 + 1))
      {
        v8 = (unint64_t *)(*((_QWORD *)&v13 + 1) + 8);
        do
          v9 = __ldaxr(v8);
        while (__stlxr(v9 - 1, v8));
        if (!v9)
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
      }
    }
    v10 = (std::__shared_weak_count *)*((_QWORD *)&v14 + 1);
    if (*((_QWORD *)&v14 + 1))
    {
      v11 = (unint64_t *)(*((_QWORD *)&v14 + 1) + 8);
      do
        v12 = __ldaxr(v11);
      while (__stlxr(v12 - 1, v11));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
  }
}

void sub_1ADC6C040(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void quasar::SpeechRecognizer::findWord(quasar::SpeechRecognizer *this@<X0>, uint64_t a2@<X1>, std::string *a3@<X8>)
{
  _OWORD v6[17];

  if (!*((_QWORD *)this + 88))
  {
    quasar::SpeechRecognizer::initializeBaseSymbolTable(this, *((const quasar::SystemConfig **)this + 6));
    if (quasar::gLogLevel >= 5)
    {
      memset(v6, 0, sizeof(v6));
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v6);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"Initialized symbol table", 24);
      quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)v6);
    }
  }
  if (quasar::QsrTextSymbolTable::Find(*((_QWORD *)this + 88), a2) == -1)
  {
    std::string::basic_string[abi:ne180100]<0>(a3, "");
  }
  else if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(a3, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)&a3->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
    a3->__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 + 16);
  }
}

