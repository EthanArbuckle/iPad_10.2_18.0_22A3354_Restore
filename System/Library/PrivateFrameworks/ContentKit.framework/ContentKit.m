uint64_t __swift_instantiateConcreteTypeFromMangledName(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (result < 0)
  {
    result = MEMORY[0x20BD3DF94]((char *)a1 + (int)result, -(result >> 32), 0, 0);
    *a1 = result;
  }
  return result;
}

id WFContentItemRegistry.register(_:)()
{
  void *v0;

  return objc_msgSend(v0, sel_registerContentItemClass_, swift_getObjCClassFromMetadata());
}

id WFContentItemRegistry.contentItemClass(for:)(uint64_t a1)
{
  void *v1;
  id result;

  result = objc_msgSend(v1, sel_contentItemClassForType_, a1);
  if (result)
  {
    swift_getObjCClassMetadata();
    sub_20BBB0FEC();
    return (id)swift_dynamicCastMetatypeUnconditional();
  }
  return result;
}

unint64_t sub_20BBB0FEC()
{
  unint64_t result;

  result = qword_253DA8720;
  if (!qword_253DA8720)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_253DA8720);
  }
  return result;
}

void WFContentItemRegistry.contentItemClasses(supporting:)(uint64_t a1)
{
  void *v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  _QWORD *v5;
  uint64_t v6;
  char v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  __int128 v37[2];
  uint64_t v38;
  __int128 v39;
  __int128 v40;
  uint64_t v41;
  _QWORD *v42;

  v5 = objc_msgSend(v1, sel_contentItemClassesSupportingType_, a1);
  v6 = sub_20BC8DC08();

  if (*(_QWORD *)(v6 + 16))
  {
    OUTLINED_FUNCTION_4(MEMORY[0x24BEE4AF8]);
    OUTLINED_FUNCTION_9();
    while ((v2 & 0x8000000000000000) == 0)
    {
      OUTLINED_FUNCTION_11();
      if (v7 == v8)
        break;
      OUTLINED_FUNCTION_8();
      if ((v17 & 1) == 0)
        goto LABEL_18;
      if (*(_DWORD *)(v6 + 36) != (_DWORD)v3)
        goto LABEL_19;
      v18 = OUTLINED_FUNCTION_6(v9, v10, v11, v12, v13, v14, v15, v16, v28, v30, v32);
      OUTLINED_FUNCTION_1(v18, v19, v20, v21, v22, v23, v24, v25, v29, v31, v33, v34, v35, v36, v37[0], v37[1], v38, v39, v40,
        v41);
      __swift_instantiateConcreteTypeFromMangledName(&qword_253DA8728);
      swift_dynamicCast();
      sub_20BBB1594((uint64_t)v37);
      if ((OUTLINED_FUNCTION_10() & 1) == 0)
      {
        OUTLINED_FUNCTION_5();
        v5 = v42;
      }
      v26 = v5[3];
      if (v5[2] >= v26 >> 1)
      {
        OUTLINED_FUNCTION_3(v26);
        v5 = v42;
      }
      OUTLINED_FUNCTION_0();
      if (v27)
      {
        sub_20BBB15C8(v2, v3, v4);
        OUTLINED_FUNCTION_7();
        goto LABEL_16;
      }
    }
    __break(1u);
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
  }
  else
  {
    OUTLINED_FUNCTION_7();
LABEL_16:
    OUTLINED_FUNCTION_2();
  }
}

void WFContentItemRegistry.contentItemClasses.getter()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  char v3;
  _QWORD *v4;
  uint64_t v5;
  char v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  __int128 v36[2];
  uint64_t v37;
  __int128 v38;
  __int128 v39;
  uint64_t v40;
  _QWORD *v41;

  v4 = objc_msgSend(v0, sel_contentItemClasses);
  v5 = sub_20BC8DC08();

  if (*(_QWORD *)(v5 + 16))
  {
    OUTLINED_FUNCTION_4(MEMORY[0x24BEE4AF8]);
    OUTLINED_FUNCTION_9();
    while ((v1 & 0x8000000000000000) == 0)
    {
      OUTLINED_FUNCTION_11();
      if (v6 == v7)
        break;
      OUTLINED_FUNCTION_8();
      if ((v16 & 1) == 0)
        goto LABEL_18;
      if (*(_DWORD *)(v5 + 36) != (_DWORD)v2)
        goto LABEL_19;
      v17 = OUTLINED_FUNCTION_6(v8, v9, v10, v11, v12, v13, v14, v15, v27, v29, v31);
      OUTLINED_FUNCTION_1(v17, v18, v19, v20, v21, v22, v23, v24, v28, v30, v32, v33, v34, v35, v36[0], v36[1], v37, v38, v39,
        v40);
      __swift_instantiateConcreteTypeFromMangledName(&qword_253DA8728);
      swift_dynamicCast();
      sub_20BBB1594((uint64_t)v36);
      if ((OUTLINED_FUNCTION_10() & 1) == 0)
      {
        OUTLINED_FUNCTION_5();
        v4 = v41;
      }
      v25 = v4[3];
      if (v4[2] >= v25 >> 1)
      {
        OUTLINED_FUNCTION_3(v25);
        v4 = v41;
      }
      OUTLINED_FUNCTION_0();
      if (v26)
      {
        sub_20BBB15C8(v1, v2, v3);
        OUTLINED_FUNCTION_7();
        goto LABEL_16;
      }
    }
    __break(1u);
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
  }
  else
  {
    OUTLINED_FUNCTION_7();
LABEL_16:
    OUTLINED_FUNCTION_2();
  }
}

char *sub_20BBB12A4(char *a1, int64_t a2, char a3)
{
  char **v3;
  char *result;

  result = sub_20BBB12C0(a1, a2, a3, *v3);
  *v3 = result;
  return result;
}

char *sub_20BBB12C0(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    sub_20BBB13B8();
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 8);
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v12 = v10 + 32;
  v13 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || &v13[8 * v8] <= v12)
      memmove(v12, v13, 8 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v12, v13, 8 * v8);
  }
  swift_release();
  return v10;
}

uint64_t sub_20BBB13B8()
{
  uint64_t v0;

  v0 = __swift_instantiateConcreteTypeFromMangledName(&qword_253DA8728);
  if (dynamic_cast_existential_0_class_conditional(v0))
    return __swift_instantiateConcreteTypeFromMangledName(&qword_254738348);
  else
    return __swift_instantiateConcreteTypeFromMangledName(&qword_253DA8730);
}

int64_t sub_20BBB13F4(int64_t result, int a2, char a3, uint64_t a4)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;

  if ((a3 & 1) != 0)
    goto LABEL_20;
  v4 = result;
  if (result < 0 || (result = 1 << *(_BYTE *)(a4 + 32), result <= (uint64_t)v4))
  {
    __break(1u);
    goto LABEL_18;
  }
  v5 = v4 >> 6;
  v6 = a4 + 56;
  v7 = *(_QWORD *)(a4 + 56 + 8 * (v4 >> 6));
  if (((v7 >> v4) & 1) == 0)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  if (*(_DWORD *)(a4 + 36) != a2)
  {
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
    return result;
  }
  v8 = v7 & (-2 << (v4 & 0x3F));
  if (v8)
    return __clz(__rbit64(v8)) | v4 & 0xFFFFFFFFFFFFFFC0;
  v9 = v5 + 1;
  if (v5 + 1 < (unint64_t)(result + 63) >> 6)
  {
    v10 = *(_QWORD *)(v6 + 8 * v9);
    if (v10)
      return __clz(__rbit64(v10)) + (v9 << 6);
    v11 = (unint64_t)(result + 63) >> 6;
    v9 = v5 + 2;
    if (v5 + 2 < v11)
    {
      v10 = *(_QWORD *)(v6 + 8 * v9);
      if (v10)
        return __clz(__rbit64(v10)) + (v9 << 6);
      while (v5 + 3 < v11)
      {
        v10 = *(_QWORD *)(a4 + 80 + 8 * v5++);
        if (v10)
        {
          v9 = v5 + 2;
          return __clz(__rbit64(v10)) + (v9 << 6);
        }
      }
    }
  }
  return result;
}

uint64_t sub_20BBB14D8(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v5;
  unsigned int v6;
  uint64_t i;

  v1 = *(_QWORD *)(a1 + 56);
  if (v1)
  {
    v2 = 0;
    return __clz(__rbit64(v1)) + v2;
  }
  v5 = *(_BYTE *)(a1 + 32);
  v6 = v5 & 0x3F;
  v3 = 1 << v5;
  if (v6 < 7)
    return v3;
  v1 = *(_QWORD *)(a1 + 64);
  if (v1)
  {
    v2 = 64;
    return __clz(__rbit64(v1)) + v2;
  }
  v2 = 64;
  for (i = 9; i - 7 < (unint64_t)(v3 + 63) >> 6; ++i)
  {
    v1 = *(_QWORD *)(a1 + 8 * i);
    v2 += 64;
    if (v1)
      return __clz(__rbit64(v1)) + v2;
  }
  return v3;
}

uint64_t sub_20BBB1558(uint64_t a1, uint64_t a2)
{
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(MEMORY[0x24BEE23D0] - 8) + 16))(a2, a1);
  return a2;
}

uint64_t sub_20BBB1594(uint64_t a1)
{
  (*(void (**)(void))(*(_QWORD *)(MEMORY[0x24BEE23D0] - 8) + 8))();
  return a1;
}

uint64_t sub_20BBB15C8(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t result;

  if ((a3 & 1) != 0)
    return swift_bridgeObjectRelease();
  return result;
}

uint64_t dynamic_cast_existential_0_class_conditional(uint64_t a1)
{
  if (swift_isClassType())
    return a1;
  else
    return 0;
}

int64_t OUTLINED_FUNCTION_0()
{
  uint64_t v0;
  uint64_t v1;
  int64_t v2;
  int v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)(v1 + 16) = v7;
  *(_QWORD *)(v1 + 8 * v6 + 32) = v5;
  return sub_20BBB13F4(v2, v3, v4 & 1, v0);
}

uint64_t OUTLINED_FUNCTION_1(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, __int128 a15, __int128 a16, uint64_t a17, __int128 a18, __int128 a19, uint64_t a20)
{
  a15 = a18;
  a16 = a19;
  a17 = a20;
  return sub_20BBB1558((uint64_t)&a15, (uint64_t)&a10);
}

char *OUTLINED_FUNCTION_3@<X0>(unint64_t a1@<X8>)
{
  int64_t v1;

  return sub_20BBB12A4((char *)(a1 > 1), v1, 1);
}

char *OUTLINED_FUNCTION_4@<X0>(uint64_t a1@<X8>)
{
  int64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 - 88) = a1;
  return sub_20BBB12A4(0, v1, 0);
}

char *OUTLINED_FUNCTION_5()
{
  uint64_t v0;

  return sub_20BBB12A4(0, *(_QWORD *)(v0 + 16) + 1, 1);
}

uint64_t OUTLINED_FUNCTION_6(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  uint64_t v11;
  uint64_t v12;
  va_list va;

  va_start(va, a11);
  return sub_20BBB1558(*(_QWORD *)(v11 + 48) + 40 * v12, (uint64_t)va);
}

uint64_t OUTLINED_FUNCTION_7()
{
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_9()
{
  uint64_t v0;

  return sub_20BBB14D8(v0);
}

uint64_t OUTLINED_FUNCTION_10()
{
  return swift_isUniquelyReferenced_nonNull_native();
}

unint64_t StaticString._asString.getter(unint64_t result, uint64_t a2, char a3)
{
  if ((a3 & 1) == 0)
  {
    if (result)
      return sub_20BC8DBF0();
    __break(1u);
  }
  if (HIDWORD(result))
  {
    __break(1u);
LABEL_11:
    __break(1u);
    return sub_20BC8DBF0();
  }
  if (result >> 11 == 27)
    goto LABEL_14;
  if (WORD1(result) > 0x10u)
    goto LABEL_11;
  if ((result & 0xFFFFFF80) != 0 || result <= 0xFF)
    return sub_20BC8DBF0();
  __break(1u);
LABEL_14:
  __break(1u);
  return result;
}

id static NSBundle._current.getter()
{
  if (qword_254738340 != -1)
    swift_once();
  return (id)qword_254738350;
}

id sub_20BBB1884()
{
  uint64_t ObjCClassFromMetadata;
  id result;

  _s2__CMa();
  ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  result = objc_msgSend((id)objc_opt_self(), sel_bundleForClass_, ObjCClassFromMetadata);
  qword_254738350 = (uint64_t)result;
  return result;
}

uint64_t sub_20BBB18D8()
{
  return swift_deallocClassInstance();
}

uint64_t _s2__CMa()
{
  return objc_opt_self();
}

uint64_t WFContentCollection.objectRepresentation(for:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 104) = a1;
  *(_QWORD *)(v2 + 112) = v1;
  return swift_task_switch();
}

uint64_t sub_20BBB1920()
{
  _QWORD *v0;
  void *v1;
  uint64_t v2;

  v1 = (void *)v0[14];
  v0[7] = v0 + 10;
  v0[2] = v0;
  v0[3] = sub_20BBB1984;
  v2 = swift_continuation_init();
  sub_20BBB19F8(v2, v1);
  return swift_continuation_await();
}

uint64_t sub_20BBB1984()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  if (!*(_QWORD *)(v1 + 48))
    return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(v1 + 8))(*(_QWORD *)(v1 + 80), *(_QWORD *)(v1 + 88), *(_QWORD *)(v1 + 96));
  swift_willThrow();
  return (*(uint64_t (**)(void))(v1 + 8))();
}

void sub_20BBB19F8(uint64_t a1, void *a2)
{
  uint64_t v4;
  void *v5;
  _QWORD v6[6];

  v4 = swift_allocObject();
  *(_QWORD *)(v4 + 16) = a1;
  v6[4] = sub_20BBB1BB0;
  v6[5] = v4;
  v6[0] = MEMORY[0x24BDAC760];
  v6[1] = 1107296256;
  v6[2] = sub_20BBB1BB8;
  v6[3] = &block_descriptor;
  v5 = _Block_copy(v6);
  swift_release();
  objc_msgSend(a2, sel_getObjectRepresentation_forClass_, v5, swift_getObjCClassFromMetadata());
  _Block_release(v5);
}

uint64_t sub_20BBB1AB8(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5)
{
  _QWORD *v7;
  id v8;
  int v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  _BYTE v16[32];

  if (a4)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_254738400);
    swift_allocError();
    *v7 = a4;
    v8 = a4;
    return swift_continuation_throwingResumeWithError();
  }
  else
  {
    sub_20BBB1CD4(a1, (uint64_t)v16);
    __swift_instantiateConcreteTypeFromMangledName(&qword_2547383F8);
    v12 = swift_dynamicCast();
    v13 = v15;
    if (!v12)
      v13 = 0;
    v14 = *(_QWORD **)(*(_QWORD *)(a5 + 64) + 40);
    *v14 = v13;
    v14[1] = a2;
    v14[2] = a3;
    swift_bridgeObjectRetain();
    return swift_continuation_throwingResume();
  }
}

uint64_t sub_20BBB1BA0()
{
  return swift_deallocObject();
}

uint64_t sub_20BBB1BB0(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v4;

  return sub_20BBB1AB8(a1, a2, a3, a4, *(_QWORD *)(v4 + 16));
}

uint64_t sub_20BBB1BB8(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v5;
  void (*v7)(__int128 *, uint64_t, uint64_t, void *);
  uint64_t v8;
  uint64_t v9;
  id v10;
  __int128 v12;
  __int128 v13;

  v5 = a3;
  v7 = *(void (**)(__int128 *, uint64_t, uint64_t, void *))(a1 + 32);
  if (!a2)
  {
    v12 = 0u;
    v13 = 0u;
    if (a3)
      goto LABEL_3;
LABEL_5:
    v8 = 0;
    goto LABEL_6;
  }
  *((_QWORD *)&v13 + 1) = swift_getObjectType();
  *(_QWORD *)&v12 = a2;
  if (!v5)
    goto LABEL_5;
LABEL_3:
  v8 = sub_20BC8DBE4();
  v5 = v9;
LABEL_6:
  swift_retain();
  swift_unknownObjectRetain();
  v10 = a4;
  v7(&v12, v8, v5, a4);
  swift_release();

  swift_bridgeObjectRelease();
  return sub_20BBB1C94((uint64_t)&v12);
}

uint64_t block_copy_helper(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper()
{
  return swift_release();
}

uint64_t sub_20BBB1C94(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_2547383F8);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_20BBB1CD4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_2547383F8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

id WFContentProperty.valueItemClass.getter()
{
  void *v0;
  id result;

  result = objc_msgSend(v0, sel_valueItemClass);
  if (result)
  {
    swift_getObjCClassMetadata();
    sub_20BBB0FEC();
    return (id)swift_dynamicCastMetatype();
  }
  return result;
}

uint64_t WFContentPropertyPossibleValuesGetter.unsafeValues.getter()
{
  void *v0;
  id v1;
  uint64_t v2;

  v1 = WFContentPropertyGetPossibleValuesSynchronouslyWithSemaphore(v0);
  v2 = sub_20BC8DBFC();

  return v2;
}

void sub_20BBB432C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_20BBB447C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_20BBB45CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_20BBB47BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v8;
  va_list va;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  va_list va1;

  va_start(va1, a7);
  va_start(va, a7);
  v8 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

void sub_20BBB6874(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  uint64_t v11;
  va_list va;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  va_list va1;

  va_start(va1, a10);
  va_start(va, a10);
  v11 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

id WFFilenameByApplyingFormatStringToBasenameAndAppendPathExtension(void *a1, void *a2, uint64_t a3, void *a4, uint64_t a5)
{
  id v9;
  id v10;
  id v11;
  uint64_t v12;
  uint64_t v13;

  v9 = a1;
  v10 = a2;
  v11 = a4;
  if (a3)
  {
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithFormat:", v10, v9);
    v12 = objc_claimAutoreleasedReturnValue();

    v9 = (id)v12;
  }
  if (a5)
  {
    objc_msgSend(v9, "stringByAppendingPathExtension:", v11);
    v13 = objc_claimAutoreleasedReturnValue();

    v9 = (id)v13;
  }

  return v9;
}

uint64_t file_softmagic(uint64_t *a1, __int128 *a2, unsigned __int16 *a3, unsigned __int16 *a4, unsigned int a5, unsigned int a6)
{
  unsigned __int16 *v8;
  unsigned __int16 *v11;
  uint64_t v12;
  uint64_t result;
  __int16 v14;
  __int16 v15;
  uint64_t v16;

  v8 = a4;
  v16 = 0;
  v15 = 0;
  if (!a4)
  {
    v15 = 0;
    v8 = (unsigned __int16 *)&v15;
  }
  v14 = 0;
  if (a3)
    v11 = a3;
  else
    v11 = (unsigned __int16 *)&v14;
  v12 = *a1;
  while (1)
  {
    v12 = *(_QWORD *)(v12 + 24);
    if (v12 == *a1)
      break;
    result = match((uint64_t)a1, *(_QWORD *)v12, *(unsigned int *)(v12 + 8), a2, 0, a5, a6, 0, v11, v8, (_DWORD *)&v16 + 1, (int *)&v16, 0, 0);
    if ((_DWORD)result)
      return result;
  }
  return 0;
}

uint64_t match(uint64_t a1, uint64_t a2, unint64_t a3, __int128 *a4, uint64_t a5, unsigned int a6, unsigned int a7, unsigned int a8, unsigned __int16 *a9, unsigned __int16 *a10, _DWORD *a11, int *a12, unsigned int *a13, char *a14)
{
  char *v20;
  unsigned int *v21;
  int v22;
  uint64_t result;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int *v39;
  uint64_t v40;
  _BYTE *v41;
  int v42;
  unsigned int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  unint64_t v51;
  unsigned __int16 *v52;
  int v53;
  int v54;
  unsigned int v55;
  unint64_t v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  int v66;
  int *v67;
  int v68;
  uint64_t v69;
  _BYTE *v70;
  int v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  int v78;
  char v79;
  char v80;
  unint64_t v81;
  unint64_t v82;
  int v83;
  unsigned int v84;
  uint64_t v85;
  unsigned int v86;
  unint64_t v87;
  _BYTE *v88;
  unsigned int v89;
  uint64_t v91;
  unint64_t v92;
  uint64_t v93;
  uint64_t v94;
  unsigned int *v95;
  _DWORD *v96;
  _OWORD v98[9];
  __int128 v99;
  __int128 v100;
  __int128 v101;
  _QWORD v102[2];

  v20 = a14;
  v102[0] = 0;
  v100 = 0u;
  v101 = 0u;
  v99 = 0u;
  memset(&v98[2], 0, 112);
  if (a13)
    v21 = a13;
  else
    v21 = (unsigned int *)v102;
  memset(v98, 0, 32);
  if (!a14)
    v20 = (char *)v102 + 4;
  v95 = v21;
  v96 = v20;
  v22 = *(_DWORD *)(a1 + 68);
  result = file_check_mem(a1, 0);
  if ((_DWORD)result == -1)
    return result;
  v94 = a5;
  if (!(_DWORD)a3)
    return *v95;
  v26 = a3;
  LODWORD(a3) = 0;
  v83 = v22 & 0x1000C10;
  v27 = a2 + 4;
  v28 = (v26 - 1);
  v82 = v26;
  v29 = a2 + 376;
  v84 = 1;
  v85 = a2;
  v86 = a7;
  v89 = v26;
  v92 = v28;
  v93 = a2 + 4;
  v91 = a2 + 376;
  while (1)
  {
    v30 = a3;
    v31 = a2 + 376 * a3;
    v32 = *(unsigned __int8 *)(v31 + 6);
    if (*(unsigned __int8 *)(v31 + 6) <= 0x2Eu)
    {
      if (((1 << v32) & 0x4200001E2020) != 0)
      {
        v33 = *(_DWORD *)(v27 + 376 * a3 + 24) & 0x60;
        if (a7)
        {
          if (v33 == 64)
            goto LABEL_41;
        }
        else if (v33 == 32)
        {
          goto LABEL_41;
        }
      }
      else if (v32 == 45)
      {
        goto LABEL_18;
      }
    }
    if ((a6 & ~*(unsigned __int8 *)(a2 + 376 * a3 + 2)) != 0)
      goto LABEL_41;
LABEL_18:
    v34 = v26;
    if (msetoffset(a1, a2 + 376 * a3, (uint64_t)v98, (uint64_t)a4, v94, 0, v24, v25) == -1)
    {
      v28 = v92;
      v27 = v93;
      v29 = v91;
      v26 = v34;
      goto LABEL_41;
    }
    *(_QWORD *)(a1 + 88) = *(unsigned int *)(a2 + 376 * a3 + 20);
    v87 = v100;
    result = mget(a1, a2 + 376 * a3, a4, *((uint64_t *)&v99 + 1), v100, v94, 0, a6, a7, a8, a9, a10, (uint64_t)a11, a12, (uint64_t)v95, (uint64_t)v96);
    if ((_DWORD)result)
      break;
    v26 = v89;
    v39 = a12;
    if (*(_BYTE *)(a2 + 376 * a3 + 4) == 33)
      goto LABEL_28;
    a7 = v86;
    a2 = v85;
    v28 = v92;
    v27 = v93;
    v29 = v91;
LABEL_41:
    if (a3 <= v28)
      v50 = v28;
    else
      v50 = a3;
    if (v30 <= v28)
      v51 = v28;
    else
      v51 = v30;
    v52 = (unsigned __int16 *)(v29 + 376 * v30);
    while (v51 != v30)
    {
      v53 = v30++;
      v54 = *v52;
      v52 += 188;
      if (!v54)
      {
        v50 = v53;
        break;
      }
    }
    LODWORD(a3) = v50 + 1;
LABEL_52:
    if (a3 >= v26)
      return *v95;
  }
  if ((_DWORD)result == -1)
    return result;
  if (*(_BYTE *)(v31 + 6) == 41)
  {
    *v96 = 1;
    *v95 = 1;
  }
  result = magiccheck(a1, (char *)(a2 + 376 * a3), v35, v36, v37, v38, v24, v25);
  if (!(_DWORD)result)
  {
    a7 = v86;
    v26 = v89;
    a2 = v85;
    v28 = v92;
    v27 = v93;
    v29 = v91;
    goto LABEL_41;
  }
  v39 = a12;
  if ((_DWORD)result == -1)
    return result;
LABEL_28:
  a2 = v85;
  v40 = v85 + 376 * a3;
  v42 = *(unsigned __int8 *)(v40 + 160);
  v41 = (_BYTE *)(v40 + 160);
  v43 = v84;
  if (v42)
    *v96 = 1;
  result = handle_annotation(a1, (char *)v31, v84, v36, v37, v38, v24, v25);
  if ((_DWORD)result)
  {
LABEL_112:
    *v39 = 1;
    *a11 = 1;
    *v95 = 1;
    return result;
  }
  if (v83
    || !*v41
    || ((*v39 = 1, *a11 = 1, *v95 = 1, v84)
     || (result = file_printf(a1, "\n- ", v44, v45, v46, v47, v48, v49, v79), (_DWORD)result != -1))
    && (result = mprint(a1, (char *)v31), (_DWORD)result != -1))
  {
    if (moffset(a1, (unsigned __int16 *)v31, v87, *(_DWORD **)(a1 + 24)) + 1 >= 2)
    {
      result = file_check_mem(a1, 1u);
      if ((_DWORD)result == -1)
        return result;
      v55 = 1;
LABEL_56:
      v56 = v82;
      v26 = v89;
      while (1)
      {
        v57 = a3;
        v58 = v85 + 376 * a3;
        a3 = a3;
        do
        {
          if (a3 + 1 >= v56)
          {
            if (v26 <= v57 + 1)
              LODWORD(a3) = v57 + 1;
            else
              LODWORD(a3) = v26;
LABEL_103:
            v29 = v91;
            if (*a11)
              v43 = 0;
            a7 = v86;
            v28 = v92;
            v27 = v93;
            if (*v96)
            {
              if ((*(_BYTE *)(a1 + 68) & 0x20) == 0)
                return *v95;
              v84 = 0;
              *a11 = 0;
            }
            else
            {
              v84 = v43;
            }
            goto LABEL_52;
          }
          v59 = *(unsigned __int16 *)(v58 + 376);
          if (!*(_WORD *)(v58 + 376))
          {
            LODWORD(a3) = a3 + 1;
            goto LABEL_103;
          }
          *(_QWORD *)(a1 + 88) = *(unsigned int *)(v58 + 396);
          v58 += 376;
          ++a3;
        }
        while (v55 < v59);
        if (msetoffset(a1, v58, (uint64_t)v98, (uint64_t)a4, v94, v59, v24, v25) == -1)
        {
          v30 = a3;
          a7 = v86;
          v28 = v92;
          v27 = v93;
          v29 = v91;
          goto LABEL_38;
        }
        v88 = (_BYTE *)(v85 + 376 * a3 + 2);
        v26 = v89;
        if ((*v88 & 2) != 0)
          *(_DWORD *)(a1 + 56) += *(_DWORD *)(*(_QWORD *)(a1 + 24) + 16 * (v59 - 1));
        v56 = v82;
        if ((*(_BYTE *)(v85 + 376 * a3 + 10) & 0xFE) == 2)
        {
          v55 = v59;
          if (*(_DWORD *)(*(_QWORD *)(a1 + 24) + 16 * v59 + 8) == 1)
            continue;
        }
        v60 = v100;
        result = mget(a1, v58, a4, *((uint64_t *)&v99 + 1), v100, v94, v59, a6, v86, a8, a9, a10, (uint64_t)a11, v39, (uint64_t)v95, (uint64_t)v96);
        if ((_DWORD)result)
        {
          if ((_DWORD)result == -1)
            return result;
          if (*(_BYTE *)(v85 + 376 * a3 + 6) == 41)
          {
            *v96 = 1;
            *v95 = 1;
          }
          result = magiccheck(a1, (char *)v58, v61, v62, v63, v64, v24, v25);
          if (!(_DWORD)result)
          {
            *(_DWORD *)(*(_QWORD *)(a1 + 24) + 16 * v59 + 8) = 0;
            v55 = v59;
            goto LABEL_56;
          }
          v81 = v60;
          v56 = v82;
          v26 = v89;
          if ((_DWORD)result == -1)
            return result;
        }
        else
        {
          v81 = v60;
          v55 = v59;
          v56 = v82;
          v26 = v89;
          if (*(_BYTE *)(v85 + 376 * a3 + 4) != 33)
            continue;
        }
        v65 = *(_QWORD *)(a1 + 24) + 16 * v59;
        *(_DWORD *)(v65 + 8) = 1;
        v66 = *(unsigned __int8 *)(v85 + 376 * a3 + 6);
        v67 = (int *)(v65 + 4);
        if (v66 == 47)
        {
          v68 = 0;
          goto LABEL_80;
        }
        if (*v67)
        {
          v55 = v59;
          if (v66 == 3)
            continue;
        }
        else
        {
          v68 = 1;
LABEL_80:
          *v67 = v68;
        }
        v69 = v85 + 376 * a3;
        v71 = *(unsigned __int8 *)(v69 + 160);
        v70 = (_BYTE *)(v69 + 160);
        if (v71)
          *v96 = 1;
        result = handle_annotation(a1, (char *)v58, v84, v62, v63, v64, v24, v25);
        if ((_DWORD)result)
          goto LABEL_112;
        if (!v83 && *v70)
        {
          if (!*a11)
          {
            *a11 = 1;
            if (!v84)
            {
              result = file_printf(a1, "\n- ", v72, v73, v74, v75, v76, v77, v80);
              if ((_DWORD)result == -1)
                return result;
            }
          }
          if (*v39)
          {
            if ((*v88 & 0x10) == 0)
            {
              result = file_printf(a1, " ", v72, v73, v74, v75, v76, v77, v80);
              if ((_DWORD)result == -1)
                return result;
            }
          }
          *v95 = 1;
          *v39 = 0;
          result = mprint(a1, (char *)v58);
          if ((_DWORD)result == -1)
            return result;
          *v39 = 1;
        }
        if (moffset(a1, (unsigned __int16 *)v58, v81, (_DWORD *)(*(_QWORD *)(a1 + 24) + 16 * v59)) + 1 <= 1)
          LODWORD(v59) = v59 - 1;
        v55 = v59 + 1;
        v78 = file_check_mem(a1, (int)v59 + 1);
        result = 0xFFFFFFFFLL;
        v56 = v82;
        v26 = v89;
        if (v78 == -1)
          return result;
      }
    }
    a7 = v86;
    v28 = v92;
    v27 = v93;
    v29 = v91;
LABEL_38:
    v26 = v89;
    goto LABEL_41;
  }
  return result;
}

uint64_t msetoffset(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v12;
  int v13;
  int v14;
  uint64_t v17;
  uint64_t v18;
  uint64_t result;
  uint64_t v20;
  size_t v21;
  void *v22;
  size_t v23;
  off_t v24;
  unint64_t v25;
  uint64_t v26;

  v12 = *(char *)(a2 + 2);
  v13 = *(_DWORD *)(a2 + 12);
  if ((v12 & 0x80000000) == 0)
  {
    if ((_DWORD)a6)
    {
      v14 = *(_DWORD *)(a1 + 60) + v13;
      *(_DWORD *)(a1 + 56) = v14;
      goto LABEL_7;
    }
LABEL_6:
    v17 = *(_QWORD *)(a4 + 152);
    v18 = *(_QWORD *)(a4 + 160);
    *(_DWORD *)a3 = -1;
    *(_OWORD *)(a3 + 8) = 0u;
    *(_OWORD *)(a3 + 24) = 0u;
    *(_OWORD *)(a3 + 40) = 0u;
    *(_OWORD *)(a3 + 56) = 0u;
    *(_OWORD *)(a3 + 72) = 0u;
    *(_OWORD *)(a3 + 88) = 0u;
    *(_OWORD *)(a3 + 104) = 0u;
    *(_OWORD *)(a3 + 120) = 0u;
    *(_OWORD *)(a3 + 136) = 0u;
    *(_QWORD *)(a3 + 152) = v17;
    *(_QWORD *)(a3 + 160) = v18;
    *(_QWORD *)(a3 + 176) = 0;
    *(_QWORD *)(a3 + 184) = 0;
    *(_QWORD *)(a3 + 168) = 0;
    v14 = v13;
    *(_DWORD *)(a1 + 56) = v13;
    *(_DWORD *)(a1 + 60) = 0;
    goto LABEL_7;
  }
  v13 = -v13;
  if ((_DWORD)a6 && (v12 & 6) != 0)
    goto LABEL_6;
  v20 = *(_QWORD *)(a4 + 184);
  if (v20 == -1)
    return 0xFFFFFFFFLL;
  if (!v20)
  {
    if ((*(_WORD *)(a4 + 12) & 0xF000) == 0x8000)
    {
      v21 = *(_QWORD *)(a4 + 104) >= *(_QWORD *)(a4 + 160) ? *(_QWORD *)(a4 + 160) : *(_QWORD *)(a4 + 104);
      *(_QWORD *)(a4 + 184) = v21;
      v22 = malloc_type_malloc(v21, 0x496C7C3DuLL);
      *(_QWORD *)(a4 + 176) = v22;
      if (v22)
      {
        v23 = *(_QWORD *)(a4 + 184);
        v24 = *(_QWORD *)(a4 + 104) - v23;
        *(_QWORD *)(a4 + 168) = v24;
        if (pread(*(_DWORD *)a4, v22, v23, v24) != -1)
          goto LABEL_19;
        free(*(void **)(a4 + 176));
        *(_QWORD *)(a4 + 176) = 0;
      }
    }
    *(_QWORD *)(a4 + 184) = -1;
    return 0xFFFFFFFFLL;
  }
LABEL_19:
  if (a5)
  {
    file_magerror(a1, "non zero offset %zu at level %u", a3, a4, a5, a6, a7, a8, a5, a6);
    return 0xFFFFFFFFLL;
  }
  v25 = *(_QWORD *)(a4 + 184);
  result = 0xFFFFFFFFLL;
  if (v25 < *(int *)(a2 + 12))
    return result;
  v26 = *(_QWORD *)(a4 + 176);
  *(_DWORD *)a3 = -1;
  *(_OWORD *)(a3 + 8) = 0u;
  *(_OWORD *)(a3 + 24) = 0u;
  *(_OWORD *)(a3 + 40) = 0u;
  *(_OWORD *)(a3 + 56) = 0u;
  *(_OWORD *)(a3 + 72) = 0u;
  *(_OWORD *)(a3 + 88) = 0u;
  *(_OWORD *)(a3 + 104) = 0u;
  *(_OWORD *)(a3 + 120) = 0u;
  *(_OWORD *)(a3 + 136) = 0u;
  *(_QWORD *)(a3 + 152) = v26;
  *(_QWORD *)(a3 + 160) = v25;
  *(_QWORD *)(a3 + 176) = 0;
  *(_QWORD *)(a3 + 184) = 0;
  *(_QWORD *)(a3 + 168) = 0;
  v14 = *(_DWORD *)(a4 + 184) - *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a1 + 56) = v14;
  *(_DWORD *)(a1 + 60) = v14;
LABEL_7:
  if ((*(_BYTE *)(a1 + 68) & 1) != 0)
    fprintf((FILE *)*MEMORY[0x24BDAC8D8], "bb=[%p,%zu,%zu], %d [b=%p,%zu,%zu], [o=%#x, c=%d]\n", *(const void **)(a3 + 152), *(_QWORD *)(a3 + 160), *(_QWORD *)(a3 + 184), v14, *(const void **)(a4 + 152), *(_QWORD *)(a4 + 160), *(_QWORD *)(a4 + 184), v13, a6);
  return 0;
}

uint64_t mget(uint64_t a1, uint64_t a2, __int128 *a3, uint64_t a4, unint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned int a9, unsigned int a10, unsigned __int16 *a11, unsigned __int16 *a12, uint64_t a13, int *a14, uint64_t a15, uint64_t a16)
{
  unint64_t v17;
  int v18;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char v30;
  int v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  unsigned int v35;
  uint64_t v36;
  unsigned __int8 *v38;
  int v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unsigned int v43;
  char v44;
  unint64_t v45;
  unsigned int v46;
  int v47;
  int v48;
  int v49;
  int v50;
  int v51;
  unsigned int v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  unint64_t v59;
  uint64_t v60;
  int v61;
  int v62;
  FILE *v63;
  const char *v64;
  size_t v65;
  int v66;
  uint64_t v67;
  void **v68;
  void **v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  void *v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  int v91;
  uint64_t v92;
  char *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  int v99;
  uint64_t v100;
  int v101;
  int v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  unint64_t v109;
  unint64_t v110;
  unint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  int v119;
  _BYTE *v120;
  unint64_t length;
  unint64_t v122;
  unsigned int *v123;
  uint64_t v124;
  char v125;
  unsigned int v126;
  unsigned int *__dst;
  _OWORD v129[2];
  uint64_t v130;
  __int128 v131;
  __int128 v132;
  __int128 v133;
  __int128 v134;
  __int128 v135;
  __int128 v136;
  __int128 v137;
  __int128 v138;
  __int128 v139;
  __int128 v140;
  __int128 v141;
  __int128 v142;

  v17 = *(unsigned int *)(a1 + 56);
  v141 = 0u;
  v142 = 0u;
  v139 = 0u;
  v140 = 0u;
  v137 = 0u;
  v138 = 0u;
  v135 = 0u;
  v136 = 0u;
  v133 = 0u;
  v134 = 0u;
  v131 = 0u;
  v132 = 0u;
  v130 = 0;
  memset(v129, 0, sizeof(v129));
  if (*a11 >= *(unsigned __int16 *)(a1 + 264))
  {
    file_error(a1, 0, "indirect count (%hu) exceeded", a4, a5, a6, a7, a8, *a11);
    return 0xFFFFFFFFLL;
  }
  if (*a12 >= *(unsigned __int16 *)(a1 + 266))
  {
    file_error(a1, 0, "name use count (%hu) exceeded", a4, a5, a6, a7, a8, *a12);
    return 0xFFFFFFFFLL;
  }
  v18 = a7;
  v126 = a8;
  mcopy(a1, (char *)(a1 + 136), *(unsigned __int8 *)(a2 + 6), *(_BYTE *)(a2 + 2) & 1, a4, v17 + a6, a5, a2);
  if ((*(_BYTE *)(a1 + 68) & 1) != 0)
  {
    fprintf((FILE *)*MEMORY[0x24BDAC8D8], "mget(type=%d, flag=%#x, offset=%u, o=%zu, nbytes=%zu, il=%hu, nc=%hu)\n", *(unsigned __int8 *)(a2 + 6), *(unsigned __int8 *)(a2 + 2), v17, a6, a5, *a11, *a12);
    mdebug(v17, (_BYTE *)(a1 + 136));
    file_mdump(a2);
  }
  __dst = (unsigned int *)(a1 + 136);
  if ((*(_BYTE *)(a2 + 2) & 1) == 0)
    goto LABEL_110;
  v29 = *(int *)(a2 + 16);
  v30 = *(_BYTE *)(a2 + 8);
  if (v30 < 0)
  {
    v38 = (unsigned __int8 *)(a4 + v17 + v29);
    v39 = *(unsigned __int8 *)(a2 + 7);
    if (a10)
    {
      v40 = (v39 - 7);
      if (v40 <= 0x25 && ((0x30DB6C033FuLL >> (v39 - 7)) & 1) != 0)
        v39 = *(_DWORD *)&asc_20BC9A104[4 * v40];
    }
    if (v39 <= 0x16u)
    {
      switch((char)v39)
      {
        case 1:
          v36 = 0;
          if (v29 + v17 == a5 || (v29 + v17) > a5)
            return v36;
          v41 = (char)*v38;
          v42 = v41;
          goto LABEL_95;
        case 2:
          v36 = 0;
          if (a5 < (v29 + v17) || a5 - (v29 + v17) < 2)
            return v36;
          v41 = *(__int16 *)v38;
          v42 = (unsigned __int16)v41;
          goto LABEL_95;
        case 4:
        case 11:
          goto LABEL_40;
        case 7:
          v36 = 0;
          if (a5 < (v29 + v17) || a5 - (v29 + v17) < 2)
            return v36;
          v56 = *v38;
          v57 = v38[1];
          goto LABEL_104;
        case 8:
          goto LABEL_87;
        case 10:
          v36 = 0;
          if (a5 < (v29 + v17) || a5 - (v29 + v17) < 2)
            return v36;
          v56 = v38[1];
          v57 = *v38;
LABEL_104:
          v58 = v57 | (v56 << 8);
          v59 = (__int16)(v57 | ((_WORD)v56 << 8));
          if ((*(_BYTE *)(a2 + 8) & 0x20) != 0)
            v29 = v59;
          else
            v29 = v58;
          break;
        default:
          goto LABEL_193;
      }
      goto LABEL_191;
    }
    if (v39 <= 0x19u)
    {
      if (v39 != 23)
      {
        if (v39 == 25)
        {
          v36 = 0;
          if (a5 < (v29 + v17) || a5 - (v29 + v17) < 8)
            return v36;
          v29 = *(_QWORD *)v38;
          goto LABEL_191;
        }
        goto LABEL_193;
      }
      v36 = 0;
      if (a5 < (v29 + v17) || a5 - (v29 + v17) < 4)
        return v36;
      v52 = v38[1];
      v53 = *v38;
      v54 = v38[3];
      v55 = v38[2];
    }
    else
    {
      if (v39 == 26)
      {
        v36 = 0;
        if (a5 < (v29 + v17) || a5 - (v29 + v17) < 8)
          return v36;
        v29 = bswap64(*(_QWORD *)v38);
        goto LABEL_191;
      }
      if (v39 != 39)
      {
        if (v39 == 40)
        {
LABEL_40:
          v36 = 0;
          if (a5 < (v29 + v17) || a5 - (v29 + v17) < 4)
            return v36;
          v41 = *(int *)v38;
          v42 = v41;
LABEL_95:
          if ((*(_BYTE *)(a2 + 8) & 0x20) != 0)
            v29 = v41;
          else
            v29 = v42;
          goto LABEL_191;
        }
LABEL_193:
        if ((*(_BYTE *)(a1 + 68) & 1) != 0)
          fprintf((FILE *)*MEMORY[0x24BDAC8D8], "bad op=%d\n");
        return 0;
      }
LABEL_87:
      v36 = 0;
      if (a5 < (v29 + v17) || a5 - (v29 + v17) < 4)
        return v36;
      v52 = *v38;
      v53 = v38[1];
      v54 = v38[2];
      v55 = v38[3];
    }
    v109 = ((unint64_t)v52 << 24) | (v53 << 16) | (v54 << 8) | v55;
    v110 = (int)(v52 << 24) | (unint64_t)(v53 << 16) | (v54 << 8) | v55;
    if ((*(_BYTE *)(a2 + 8) & 0x20) != 0)
      v29 = v110;
    else
      v29 = v109;
LABEL_191:
    if ((*(_BYTE *)(a1 + 68) & 1) != 0)
    {
      v125 = *(_BYTE *)(a2 + 8);
      v111 = v29;
      fprintf((FILE *)*MEMORY[0x24BDAC8D8], "indirect offs=%jd\n", v29);
      v29 = v111;
      v30 = v125;
    }
  }
  v31 = *(unsigned __int8 *)(a2 + 7);
  if (a10)
  {
    v32 = (v31 - 7);
    if (v32 <= 0x25 && ((0x30DB6C033FuLL >> (v31 - 7)) & 1) != 0)
      v31 = *(_DWORD *)&asc_20BC9A104[4 * v32];
  }
  if (v31 <= 0x16u)
  {
    switch((char)v31)
    {
      case 1:
        if (a5 <= v17)
          return 0;
        v33 = (char *)(a1 + 136);
        LODWORD(v34) = *(unsigned __int8 *)__dst;
        v35 = (char)v34;
        goto LABEL_66;
      case 2:
        v36 = 0;
        if (a5 < v17 || a5 - v17 < 2)
          return v36;
        v33 = (char *)(a1 + 136);
        LODWORD(v34) = *(unsigned __int16 *)__dst;
        v35 = (__int16)v34;
        goto LABEL_66;
      case 4:
        v36 = 0;
        if (a5 < v17 || a5 - v17 < 4)
          return v36;
        v33 = (char *)(a1 + 136);
        LODWORD(v34) = *__dst;
        v35 = *__dst;
LABEL_66:
        if ((v30 & 0x20) != 0)
          LODWORD(v34) = v35;
        goto LABEL_85;
      case 7:
        v36 = 0;
        if (a5 < v17 || a5 - v17 < 2)
          return v36;
        v47 = *(unsigned __int8 *)(a1 + 136);
        v48 = *(unsigned __int8 *)(a1 + 137);
        if ((v30 & 0x20) == 0)
          goto LABEL_72;
        goto LABEL_76;
      case 8:
        goto LABEL_48;
      case 10:
        v36 = 0;
        if (a5 < v17 || a5 - v17 < 2)
          return v36;
        v47 = *(unsigned __int8 *)(a1 + 137);
        v48 = *(unsigned __int8 *)(a1 + 136);
        if ((v30 & 0x20) != 0)
LABEL_76:
          LODWORD(v34) = (__int16)(v48 | ((_WORD)v47 << 8));
        else
LABEL_72:
          LODWORD(v34) = v48 | (v47 << 8);
        break;
      case 11:
        goto LABEL_32;
      default:
        goto LABEL_90;
    }
LABEL_84:
    v33 = (char *)(a1 + 136);
    goto LABEL_85;
  }
  if (v31 > 0x19u)
  {
    switch(v31)
    {
      case 0x1Au:
        v36 = 0;
        if (a5 < v17 || a5 - v17 < 8)
          return v36;
        LODWORD(v34) = bswap64(*(_QWORD *)(a1 + 136));
        goto LABEL_84;
      case 0x27u:
LABEL_48:
        v36 = 0;
        if (a5 < v17 || a5 - v17 < 4)
          return v36;
        v43 = bswap32(*(_DWORD *)(a1 + 136));
        if (v31 != 39)
          goto LABEL_52;
        goto LABEL_51;
      case 0x28u:
LABEL_32:
        v36 = 0;
        if (a5 < v17 || a5 - v17 < 4)
          return v36;
        v43 = *(_DWORD *)(a1 + 136);
        if (v31 != 40)
          goto LABEL_52;
LABEL_51:
        v44 = v30;
        v45 = v29;
        v46 = cvt_id3(*(_DWORD *)(a1 + 68), v43);
        v29 = v45;
        v30 = v44;
        v43 = v46;
LABEL_52:
        v33 = (char *)(a1 + 136);
        LODWORD(v34) = v43;
        if ((v30 & 0x20) == 0)
          LODWORD(v34) = v43;
        goto LABEL_85;
    }
LABEL_90:
    if ((*(_BYTE *)(a1 + 68) & 1) != 0)
      fprintf((FILE *)*MEMORY[0x24BDAC8D8], "bad in_type=%d\n");
    return 0;
  }
  if (v31 == 23)
  {
    v36 = 0;
    if (a5 < v17 || a5 - v17 < 4)
      return v36;
    v49 = *(unsigned __int8 *)(a1 + 136);
    v50 = *(unsigned __int8 *)(a1 + 139);
    v51 = *(unsigned __int8 *)(a1 + 138);
    LODWORD(v34) = (*(unsigned __int8 *)(a1 + 137) << 24) | (v49 << 16) | (v50 << 8) | v51;
    if ((v30 & 0x20) == 0)
      LODWORD(v34) = (*(unsigned __int8 *)(a1 + 137) << 24) | (v49 << 16) | (v50 << 8) | v51;
    goto LABEL_84;
  }
  if (v31 != 25)
    goto LABEL_90;
  v36 = 0;
  if (a5 < v17 || a5 - v17 < 8)
    return v36;
  v33 = (char *)(a1 + 136);
  v34 = *(_QWORD *)__dst;
LABEL_85:
  if (v29)
    __asm { BR              X12 }
  LODWORD(v17) = v34 ^ ((char)(2 * *(_BYTE *)(a2 + 8)) >> 7);
  if ((*(_BYTE *)(a2 + 2) & 4) == 0)
    goto LABEL_108;
  if (!v18)
  {
    if ((*(_BYTE *)(a1 + 68) & 1) != 0)
    {
      v63 = (FILE *)*MEMORY[0x24BDAC8D8];
      v64 = "indirect *zero* cont_level\n";
      v65 = 27;
LABEL_138:
      fwrite(v64, v65, 1uLL, v63);
    }
    return 0;
  }
  v62 = *(_DWORD *)(a1 + 68);
  LODWORD(v17) = *(_DWORD *)(*(_QWORD *)(a1 + 24) + 16 * (v18 - 1)) + v17;
  if (!(_DWORD)v17)
  {
    if ((v62 & 1) != 0)
    {
      v63 = (FILE *)*MEMORY[0x24BDAC8D8];
      v64 = "indirect *zero* offset\n";
      v65 = 23;
      goto LABEL_138;
    }
    return 0;
  }
  if ((v62 & 1) != 0)
    fprintf((FILE *)*MEMORY[0x24BDAC8D8], "indirect +offs=%u\n", v17);
LABEL_108:
  mcopy(a1, v33, *(unsigned __int8 *)(a2 + 6), 0, a4, v17, a5, a2);
  *(_DWORD *)(a1 + 56) = v17;
  if ((*(_BYTE *)(a1 + 68) & 1) != 0)
  {
    mdebug(v17, v33);
    file_mdump(a2);
  }
LABEL_110:
  switch(*(_BYTE *)(a2 + 6))
  {
    case 1:
      if (v17 >= a5)
        return 0;
      goto LABEL_113;
    case 2:
    case 7:
    case 0xA:
      v36 = 0;
      if (a5 < v17 || a5 - v17 < 2)
        return v36;
      goto LABEL_113;
    case 4:
    case 6:
    case 8:
    case 9:
    case 0xB:
    case 0xC:
    case 0xE:
    case 0xF:
    case 0x10:
    case 0x15:
    case 0x16:
    case 0x17:
    case 0x21:
    case 0x22:
    case 0x23:
      v36 = 0;
      if (a5 >= v17 && a5 - v17 >= 4)
        goto LABEL_113;
      return v36;
    case 5:
    case 0xD:
    case 0x14:
      if (a5 < v17 || a5 - v17 < *(unsigned __int8 *)(a2 + 5))
        return 0;
      goto LABEL_113;
    case 0x11:
      if (v17 > a5)
        return 0;
      goto LABEL_113;
    case 0x24:
    case 0x25:
    case 0x26:
      v36 = 0;
      if (a5 < v17 || a5 - v17 < 8)
        return v36;
      goto LABEL_113;
    case 0x29:
      v66 = (*(unsigned __int8 *)(a2 + 28) << 31 >> 31) & a6;
      v67 = (v66 + v17);
      if (!(v66 + (_DWORD)v17) || a5 < v67)
        return 0;
      v68 = (void **)file_push_buffer(a1);
      if (!v68)
        return 0xFFFFFFFFLL;
      v69 = v68;
      ++*a11;
      v70 = a3[9];
      v139 = a3[8];
      v140 = v70;
      v71 = a3[11];
      v141 = a3[10];
      v142 = v71;
      v72 = a3[5];
      v135 = a3[4];
      v136 = v72;
      v73 = a3[7];
      v137 = a3[6];
      v138 = v73;
      v74 = a3[1];
      v131 = *a3;
      v132 = v74;
      v75 = a3[3];
      v133 = a3[2];
      v134 = v75;
      *((_QWORD *)&v140 + 1) = a4 + v67;
      *(_QWORD *)&v141 = a5 - v67;
      v36 = file_softmagic(a1, &v131, a11, a12, 32, a9);
      if ((*(_BYTE *)(a1 + 68) & 1) != 0)
        fprintf((FILE *)*MEMORY[0x24BDAC8D8], "indirect @offs=%u[%d]\n", v67, v36);
      v82 = (void *)file_pop_buffer(a1, v69);
      if (!v82 && (*(_BYTE *)(a1 + 72) & 1) != 0)
        return 0xFFFFFFFFLL;
      if ((_DWORD)v36 != 1
        || ((*(_DWORD *)(a1 + 68) & 0x1000C10) != 0
         || (v83 = (char *)file_fmtcheck(a1, (char *)(a2 + 160), "%u", 1854),
             file_printf(a1, v83, v84, v85, v86, v87, v88, v89, v67) != -1))
        && file_printf(a1, "%s", v76, v77, v78, v79, v80, v81, (char)v82) != -1)
      {
        free(v82);
        return v36;
      }
      free(v82);
      return 0xFFFFFFFFLL;
    case 0x2D:
      if ((*(_DWORD *)(a1 + 68) & 0x1000C10) != 0)
        goto LABEL_211;
      if (file_printf(a1, "%s", v23, v24, v25, v26, v27, v28, a2 - 96) == -1)
        return 0xFFFFFFFFLL;
      else
        return 1;
    case 0x2E:
      v90 = v17;
      if (v17 > a5)
        return 0;
      v91 = *(unsigned __int8 *)(a2 + 32);
      if (v91 == 94)
        v92 = a10 == 0;
      else
        v92 = a10;
      if (v91 == 94)
        v93 = (char *)(a2 + 33);
      else
        v93 = (char *)(a2 + 32);
      if (file_magicfind(*(uint64_t **)(a1 + 8), v93, (uint64_t)v129) == -1)
      {
        return 0xFFFFFFFFLL;
      }
      ++*a12;
      v99 = *a14;
      if ((*(_BYTE *)(a2 + 2) & 0x10) != 0)
        *a14 = 0;
      v100 = match(a1, *(_QWORD *)&v129[0], DWORD2(v129[0]), a3, v90 + a6, v126, a9, v92, a11, a12, a13, a14, a15, a16);
      --*a12;
      if ((_DWORD)v100 == 1)
      {
LABEL_211:
        v36 = 1;
      }
      else
      {
        v36 = v100;
        *a14 = v99;
      }
      break;
    case 0x31:
      v36 = 0;
      if (a5 < v17 || a5 - v17 < 0x10)
        return v36;
      goto LABEL_113;
    default:
LABEL_113:
      if (a10 && (v60 = *(unsigned __int8 *)(a2 + 6) - 7, v60 <= 0x25))
      {
        LOBYTE(v61) = *(_BYTE *)(a2 + 6);
        if (((0x30DB6C033FuLL >> (v61 - 7)) & 1) != 0)
          v61 = *(_DWORD *)&asc_20BC9A104[4 * v60];
      }
      else
      {
        LOBYTE(v61) = *(_BYTE *)(a2 + 6);
      }
      v36 = 1;
      switch((char)v61)
      {
        case 1:
          if (*(_QWORD *)(a2 + 24))
            __asm { BR              X11 }
          if ((*(_BYTE *)(a2 + 9) & 0x40) != 0)
            *(_BYTE *)__dst = ~*(_BYTE *)__dst;
          goto LABEL_211;
        case 2:
        case 10:
          goto LABEL_199;
        case 3:
        case 17:
        case 20:
        case 45:
        case 46:
        case 47:
        case 48:
        case 49:
          return v36;
        case 4:
        case 6:
        case 11:
        case 12:
        case 14:
        case 16:
          goto LABEL_178;
        case 5:
        case 18:
        case 19:
          *(_BYTE *)(a1 + 263) = 0;
          goto LABEL_211;
        case 7:
          *(_WORD *)(a1 + 136) = bswap32(*(unsigned __int16 *)(a1 + 136)) >> 16;
LABEL_199:
          v102 = cvt_16(__dst, a2);
          goto LABEL_179;
        case 8:
        case 9:
        case 15:
          v101 = bswap32(*(_DWORD *)(a1 + 136));
          goto LABEL_177;
        case 13:
          v112 = file_pstring_length_size(a1, *(_DWORD *)(a2 + 28), v23, v24, v25, v26, v27, v28);
          if (v112 == -1)
            return 0;
          v118 = v112;
          v119 = a1;
          v120 = (_BYTE *)(a1 + 136);
          length = file_pstring_get_length(v119, *(_DWORD *)(a2 + 28), __dst, v113, v114, v115, v116, v117);
          if (length == -1)
            return 0;
          v122 = 128 - v118;
          if (length < 128 - v118)
            v122 = length;
          if (v122)
          {
            do
            {
              v123 = (unsigned int *)(v120 + 1);
              *v120 = v120[v118];
              ++v120;
              --v122;
            }
            while (v122);
          }
          else
          {
            v123 = __dst;
          }
          *(_BYTE *)v123 = 0;
          goto LABEL_211;
        case 21:
        case 22:
        case 23:
          v101 = (*(unsigned __int8 *)(a1 + 137) << 24) | (*(unsigned __int8 *)(a1 + 136) << 16) | (*(unsigned __int8 *)(a1 + 139) << 8) | *(unsigned __int8 *)(a1 + 138);
LABEL_177:
          *(_DWORD *)(a1 + 136) = v101;
LABEL_178:
          v102 = cvt_32((int *)__dst, a2);
LABEL_179:
          if (v102 != -1)
            goto LABEL_211;
          file_magerror(a1, "zerodivide in mconvert()", v103, v104, v105, v106, v107, v108, v124);
          return 0;
        case 24:
        case 25:
        case 27:
        case 28:
        case 30:
        case 31:
        case 42:
        case 43:
        case 50:
          goto LABEL_120;
        case 26:
        case 29:
        case 32:
        case 44:
          *(_QWORD *)(a1 + 136) = bswap64(*(_QWORD *)(a1 + 136));
LABEL_120:
          cvt_64(__dst, a2);
          goto LABEL_211;
        case 33:
        case 35:
          goto LABEL_208;
        case 34:
          *(_DWORD *)(a1 + 136) = bswap32(*(_DWORD *)(a1 + 136));
LABEL_208:
          cvt_float((float *)__dst, a2);
          goto LABEL_211;
        case 36:
        case 38:
          goto LABEL_210;
        case 37:
          *(_QWORD *)(a1 + 136) = bswap64(*(_QWORD *)(a1 + 136));
LABEL_210:
          cvt_double((double *)__dst, a2);
          break;
        default:
          file_magerror(a1, "invalid type %d in mconvert()", v23, v24, v25, v26, v27, v28, *(unsigned __int8 *)(a2 + 6));
          return 0;
      }
      goto LABEL_211;
  }
  return v36;
}

uint64_t magiccheck(uint64_t a1, char *__little, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char *v9;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  _BOOL8 v14;
  float v15;
  float v16;
  unsigned int v17;
  double v18;
  double v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  unsigned int v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int v33;
  int v34;
  int v35;
  int v37;
  uint64_t v38;
  uint64_t v39;
  const void *v40;
  size_t v41;
  uint64_t v42;
  unint64_t v43;
  size_t v44;
  unint64_t v45;
  unint64_t v46;
  char *v47;
  int v48;
  int v49;
  unsigned int v50;
  unsigned int v51;
  unint64_t v52;
  unint64_t v53;
  int v54;
  BOOL v56;
  BOOL v57;
  char *v58;
  char *v59;
  const char *v60;
  size_t v61;
  unint64_t v62;
  uint64_t v63;
  size_t v64;
  size_t v65;
  char *v66;
  uint64_t v67;
  int v68;
  uint64_t v69;
  int v70;
  unsigned int v71;
  regoff_t rm_so;
  regoff_t rm_eo;
  int *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  char *v81;
  char *v82;
  uint64_t v83;
  const char *v84;
  unsigned __int8 *v85;
  uint64_t v86;
  regmatch_t v87;
  char __str[16];
  __int128 v89;
  __int128 v90;
  __int128 v91;
  uint64_t v92;

  v92 = *MEMORY[0x24BDAC8D0];
  v9 = __little + 32;
  v11 = 0;
  v12 = 0;
  v13 = (char *)(a1 + 136);
  v14 = 1;
  switch(__little[6])
  {
    case 1:
      v12 = *v13;
      goto LABEL_32;
    case 2:
    case 7:
    case 10:
      v12 = *(unsigned __int16 *)v13;
      goto LABEL_32;
    case 3:
    case 47:
      goto LABEL_33;
    case 4:
    case 6:
    case 8:
    case 9:
    case 11:
    case 12:
    case 14:
    case 15:
    case 16:
    case 21:
    case 22:
    case 23:
      v12 = *(unsigned int *)v13;
      goto LABEL_32;
    case 5:
    case 13:
      v12 = file_strncmp(__little + 32, v13, __little[5], 128, *((_DWORD *)__little + 7));
      goto LABEL_16;
    case 17:
      v90 = 0u;
      v91 = 0u;
      *(_OWORD *)__str = 0u;
      v89 = 0u;
      if (!*(_QWORD *)(a1 + 104))
        return 0;
      if ((*((_DWORD *)__little + 7) & 0xC) != 0)
        v37 = 11;
      else
        v37 = 9;
      v38 = file_regcomp((uint64_t)__str, __little + 32, v37);
      if ((_DWORD)v38)
      {
        v39 = v38;
LABEL_72:
        file_regerror((uint64_t)__str, v39, a1);
        file_regfree((uint64_t)__str);
        return 0xFFFFFFFFLL;
      }
      v87.rm_so = 0;
      v87.rm_eo = 0;
      v58 = *(char **)(a1 + 112);
      if (v58)
      {
        v59 = (char *)malloc_type_malloc(*(_QWORD *)(a1 + 112), 0xDC536CAuLL);
        if (!v59)
        {
          file_regfree((uint64_t)__str);
          v74 = __error();
          file_error(a1, *v74, "can't allocate %zu bytes", v75, v76, v77, v78, v79, (char)v58);
          return 0xFFFFFFFFLL;
        }
        v60 = v59;
        memcpy(v59, *(const void **)(a1 + 104), (size_t)v58);
        v60[(_QWORD)v58 - 1] = 0;
        v58 = (char *)v60;
      }
      else
      {
        v60 = "";
      }
      v71 = file_regexec((uint64_t)__str, v60, 1uLL, &v87);
      free(v58);
      v12 = v71;
      if (v71 != 1)
      {
        if (v71)
        {
          v39 = v71;
          goto LABEL_72;
        }
        v12 = 0;
        rm_so = v87.rm_so;
        rm_eo = v87.rm_eo;
        *(_QWORD *)(a1 + 104) += SLODWORD(v87.rm_so);
        *(_QWORD *)(a1 + 120) += rm_so;
        *(_QWORD *)(a1 + 128) = rm_eo - rm_so;
      }
      file_regfree((uint64_t)__str);
LABEL_16:
      v11 = 0;
LABEL_33:
      v26 = file_signextend(a1, (uint64_t)__little, v12, a4, a5, a6, a7, a8);
      v33 = __little[4];
      if (v33 <= 0x3C)
      {
        switch(v33)
        {
          case '!':
            v14 = v26 != v11;
            if ((*(_BYTE *)(a1 + 68) & 1) != 0)
              fprintf((FILE *)*MEMORY[0x24BDAC8D8], "%llu != %llu = %d\n", v26, v11, v26 != v11);
            return v14;
          case '&':
            v14 = (v11 & ~v26) == 0;
            if ((*(_BYTE *)(a1 + 68) & 1) != 0)
              fprintf((FILE *)*MEMORY[0x24BDAC8D8], "((%llx & %llx) == %llx) = %d\n");
            return v14;
          case '<':
            v35 = *(_DWORD *)(a1 + 68);
            if ((__little[2] & 8) != 0)
            {
              v14 = v26 < (unint64_t)v11;
              if ((v35 & 1) != 0)
                fprintf((FILE *)*MEMORY[0x24BDAC8D8], "%llu < %llu = %d\n");
            }
            else
            {
              v14 = v26 < v11;
              if ((v35 & 1) != 0)
                fprintf((FILE *)*MEMORY[0x24BDAC8D8], "%lld < %lld = %d\n");
            }
            return v14;
        }
        goto LABEL_59;
      }
      if (__little[4] > 0x5Du)
      {
        if (v33 == 94)
        {
          v14 = (v11 & ~v26) != 0;
          if ((*(_BYTE *)(a1 + 68) & 1) != 0)
            fprintf((FILE *)*MEMORY[0x24BDAC8D8], "((%llx & %llx) != %llx) = %d\n");
          return v14;
        }
        if (v33 == 120)
        {
          if ((*(_BYTE *)(a1 + 68) & 1) != 0)
            fprintf((FILE *)*MEMORY[0x24BDAC8D8], "%llu == *any* = 1\n", v26);
          return 1;
        }
LABEL_59:
        return 0xFFFFFFFFLL;
      }
      if (v33 != 61)
      {
        if (v33 == 62)
        {
          v34 = *(_DWORD *)(a1 + 68);
          if ((__little[2] & 8) != 0)
          {
            v14 = v26 > (unint64_t)v11;
            if ((v34 & 1) != 0)
              fprintf((FILE *)*MEMORY[0x24BDAC8D8], "%llu > %llu = %d\n");
          }
          else
          {
            v14 = v26 > v11;
            if ((v34 & 1) != 0)
              fprintf((FILE *)*MEMORY[0x24BDAC8D8], "%lld > %lld = %d\n");
          }
          return v14;
        }
        goto LABEL_59;
      }
      v14 = v26 == v11;
      if ((*(_BYTE *)(a1 + 68) & 1) != 0)
        fprintf((FILE *)*MEMORY[0x24BDAC8D8], "%llu == %llu = %d\n");
      return v14;
    case 18:
    case 19:
      v21 = __little[5];
      v11 = 0;
      while (v21)
      {
        --v21;
        v23 = *v13++;
        v22 = v23;
        v24 = *v9++;
        v12 = v22 - v24;
        if (v22 != v24)
          goto LABEL_33;
      }
      v11 = 0;
      v12 = 0;
      goto LABEL_33;
    case 20:
      v40 = *(const void **)(a1 + 104);
      if (!v40)
        return 0;
      if (__little[5] >= 0x80u)
        v41 = 128;
      else
        v41 = __little[5];
      if (!(_DWORD)v41 || *((_DWORD *)__little + 7))
      {
        v42 = 0;
        v43 = 0;
        while (1)
        {
          v44 = *(_QWORD *)(a1 + 112);
          if (v41 + v43 > v44)
            return 0;
          v12 = file_strncmp(v9, (char *)(*(_QWORD *)(a1 + 104) + v43), v41, v42 + v44, *((_DWORD *)__little + 7));
          if (!v12)
          {
            v11 = 0;
            v62 = *(_QWORD *)(a1 + 112) - v43;
            *(_QWORD *)(a1 + 120) += v43;
            *(_QWORD *)(a1 + 128) = v62;
            goto LABEL_33;
          }
          ++v43;
          v45 = *((unsigned int *)__little + 6);
          --v42;
          if ((_DWORD)v45)
          {
            v11 = 0;
            if (v43 >= v45)
              goto LABEL_33;
          }
        }
      }
      v63 = *((unsigned int *)__little + 6);
      if ((_DWORD)v63)
      {
        v64 = v63 + v41;
        v65 = *(_QWORD *)(a1 + 112);
        if (v65 >= v64)
          goto LABEL_147;
      }
      else
      {
        v65 = *(_QWORD *)(a1 + 112);
      }
      v64 = v65;
LABEL_147:
      v80 = (char *)memmem(v40, v64, v9, v41);
      if (!v80)
        return 0;
      v11 = 0;
      v12 = 0;
      v81 = &v80[-*(_QWORD *)(a1 + 104)];
      v82 = &v81[*(_QWORD *)(a1 + 120)];
      v83 = *(_QWORD *)(a1 + 112) - (_QWORD)v81;
      *(_QWORD *)(a1 + 120) = v82;
      *(_QWORD *)(a1 + 128) = v83;
      goto LABEL_33;
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 42:
    case 43:
    case 44:
    case 50:
      v12 = *(_QWORD *)v13;
LABEL_32:
      v11 = *((_QWORD *)__little + 4);
      goto LABEL_33;
    case 33:
    case 34:
    case 35:
      LODWORD(v15) = *((_QWORD *)__little + 4);
      v16 = *(float *)v13;
      v17 = __little[4];
      if (v17 <= 0x3C)
      {
        if (v17 == 33)
        {
          v57 = v16 == v15;
          return !v57;
        }
        if (v17 == 60)
          return v16 < v15;
      }
      else
      {
        switch(v17)
        {
          case '=':
            return v16 == v15;
          case '>':
            v56 = v16 <= v15;
            return !v56;
          case 'x':
            return 1;
        }
      }
      return 0xFFFFFFFFLL;
    case 36:
    case 37:
    case 38:
      v18 = *((double *)__little + 4);
      v19 = *(double *)v13;
      v20 = __little[4];
      if (v20 <= 0x3C)
      {
        if (v20 == 33)
        {
          v57 = v19 == v18;
          return !v57;
        }
        if (v20 == 60)
          return v19 < v18;
      }
      else
      {
        switch(v20)
        {
          case '=':
            return v19 == v18;
          case '>':
            v56 = v19 <= v18;
            return !v56;
          case 'x':
            return 1;
        }
      }
      return 0xFFFFFFFFLL;
    case 41:
    case 45:
    case 46:
      return v14;
    case 48:
      v87.rm_so = 0;
      v47 = *(char **)(a1 + 104);
      v46 = *(_QWORD *)(a1 + 112);
      v48 = gettag((uint64_t)v47, (unint64_t *)&v87, v46);
      if (v48 == -1 || (v49 = v48, v50 = getlength((uint64_t)v47, (unint64_t *)&v87, v46), v50 == -1))
      {
        if ((*(_BYTE *)(a1 + 68) & 1) != 0)
          fwrite("EOF comparing DER entries", 0x19uLL, 1uLL, (FILE *)*MEMORY[0x24BDAC8D8]);
        return 0;
      }
      v51 = v50;
      if (v49 > 0x24)
        snprintf(__str, 0x80uLL, "%#x", v49);
      else
        __strlcpy_chk();
      if ((*(_BYTE *)(a1 + 68) & 1) != 0)
        fprintf((FILE *)*MEMORY[0x24BDAC8D8], "%s: tag %p got=%s exp=%s\n", "der_cmp", v47, __str, v9);
      v61 = strlen(__str);
      if (strncmp(__str, v9, v61))
        return 0;
      v66 = &v9[v61];
      v67 = v51;
      while (1)
      {
        if (!*v66)
          return 1;
        if (*v66 == 61)
          break;
        v68 = *v66;
        if ((v68 - 48) <= 9)
        {
          v69 = 0;
          do
          {
            v69 = 10 * v69 + (char)v68 - 48;
            v70 = *++v66;
            LOBYTE(v68) = v70;
          }
          while ((v70 - 48) < 0xA);
          if ((*(_BYTE *)(a1 + 68) & 1) != 0)
            fprintf((FILE *)*MEMORY[0x24BDAC8D8], "%s: len %zu %u\n", "der_cmp", v69, v51);
          if (v69 == v51)
            continue;
        }
        return 0;
      }
      v84 = v66 + 1;
      v85 = (unsigned __int8 *)&v47[v87.rm_so];
      if (v49 > 21)
      {
        if (v49 == 23)
        {
          if (v51 >= 0xC)
          {
            snprintf(__str, 0x80uLL, "20%c%c-%c%c-%c%c %c%c:%c%c:%c%c GMT", *v85, v85[1], v85[2], v85[3], v85[4], v85[5], v85[6]);
            goto LABEL_162;
          }
LABEL_157:
          if (v51)
          {
            v86 = 0;
            do
            {
              if (v86 <= 0x7D)
                snprintf(&__str[v86], 128 - v86, "%.2x", *v85);
              ++v85;
              v86 += 2;
            }
            while (2 * v67 != v86);
          }
LABEL_162:
          if ((*(_BYTE *)(a1 + 68) & 1) != 0)
            fprintf((FILE *)*MEMORY[0x24BDAC8D8], "%s: data %s %s\n", "der_cmp", __str, v84);
          if (!strcmp(__str, v84) || !strcmp("x", v84))
          {
            __strlcpy_chk();
            return 1;
          }
          return 0;
        }
        if (v49 != 22)
          goto LABEL_157;
      }
      else if (v49 != 12 && v49 != 19)
      {
        goto LABEL_157;
      }
      snprintf(__str, 0x80uLL, "%.*s");
      goto LABEL_162;
    case 49:
      v52 = bswap64(*(_QWORD *)v9);
      v53 = bswap64(*(_QWORD *)v13);
      if (v52 == v53 && (v52 = bswap64(*((_QWORD *)__little + 5)), v53 = bswap64(*(_QWORD *)(a1 + 144)), v52 == v53))
      {
        v54 = 0;
      }
      else if (v52 < v53)
      {
        v54 = -1;
      }
      else
      {
        v54 = 1;
      }
      v11 = 0;
      v12 = v54;
      goto LABEL_33;
    default:
      file_magerror(a1, "invalid type %d in magiccheck()", a3, a4, a5, a6, a7, a8, __little[6]);
      return 0xFFFFFFFFLL;
  }
}

uint64_t handle_annotation(uint64_t a1, char *__s1, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v8;
  int v10;
  uint64_t result;
  int v12;
  char *v13;
  char *v14;
  char v15;
  char v16[1024];
  uint64_t v17;

  v8 = (char)__s1;
  v17 = *MEMORY[0x24BDAC8D0];
  v10 = *(_DWORD *)(a1 + 68);
  if ((v10 & 0x800) == 0 || !__s1[304])
  {
    if ((v10 & 0x1000000) != 0 && __s1[312])
    {
      if (!(_DWORD)a3)
      {
        result = file_printf(a1, "\n- ", a3, a4, a5, a6, a7, a8, v15);
        if ((_DWORD)result == -1)
          return result;
      }
      LOBYTE(v13) = v8 + 56;
    }
    else
    {
      if ((v10 & 0x10) == 0)
        return 0;
      v14 = __s1 + 224;
      if (!__s1[224])
        return 0;
      if (!(_DWORD)a3)
      {
        result = file_printf(a1, "\n- ", a3, a4, a5, a6, a7, a8, v15);
        if ((_DWORD)result == -1)
          return result;
      }
      if (varexpand(a1, v16, 0x400uLL, v14) == -1)
        LOBYTE(v13) = (_BYTE)v14;
      else
        v13 = v16;
    }
    v12 = file_printf(a1, "%s", a3, a4, a5, a6, a7, a8, (char)v13);
LABEL_19:
    if (v12 == -1)
      return 0xFFFFFFFFLL;
    else
      return 1;
  }
  if ((_DWORD)a3 || (result = file_printf(a1, "\n- ", a3, a4, a5, a6, a7, a8, v15), (_DWORD)result != -1))
  {
    v12 = file_printf(a1, "%.8s", a3, a4, a5, a6, a7, a8, v8 + 48);
    goto LABEL_19;
  }
  return result;
}

uint64_t mprint(uint64_t a1, char *a2)
{
  char *v2;
  char *v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  const char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  int v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  const char *v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  unsigned __int16 v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  char *v53;
  uint64_t v54;
  char v55;
  float v56;
  uint64_t v57;
  double v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  int v66;
  int v67;
  size_t v68;
  char *v69;
  char *v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  size_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  int v90;
  _BYTE *v91;
  uint64_t v93;
  int v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  char *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  unsigned __int8 v116;
  uint64_t v117;
  char *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  int v125;
  char *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  char *v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  char *v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  char *v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  char *v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  char *v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  int v169;
  char v170;
  uint64_t v171;
  char v172;
  double v173;
  char v174[512];
  char __str[512];
  uint64_t v176;

  v2 = a2;
  v176 = *MEMORY[0x24BDAC8D0];
  v4 = a2 + 160;
  v5 = v174;
  if (varexpand(a1, v174, 0x200uLL, a2 + 160) == -1)
    v5 = v4;
  v12 = a1 + 136;
  switch(v2[6])
  {
    case 1:
      v116 = file_signextend(a1, (uint64_t)v2, *(unsigned __int8 *)(a1 + 136), v7, v8, v9, v10, v11);
      v117 = check_fmt(a1, v5);
      v14 = v117;
      if ((_DWORD)v117 != -1)
      {
        if ((_DWORD)v117 == 1)
        {
          snprintf(__str, 0x80uLL, "%d", v116);
          v118 = (char *)file_fmtcheck(a1, v5, "%s", 592);
          v125 = file_printf(a1, v118, v119, v120, v121, v122, v123, v124, (char)__str);
        }
        else
        {
          v161 = (char *)file_fmtcheck(a1, v5, "%d", 596);
          v125 = file_printf(a1, v161, v162, v163, v164, v165, v166, v167, v116);
        }
        if (v125 == -1)
          return 0xFFFFFFFFLL;
        return *(unsigned int *)(a1 + 56) + 1;
      }
      return v14;
    case 2:
    case 7:
    case 10:
      v43 = file_signextend(a1, (uint64_t)v2, *(unsigned __int16 *)(a1 + 136), v7, v8, v9, v10, v11);
      v44 = check_fmt(a1, v5);
      v14 = v44;
      if ((_DWORD)v44 != -1)
      {
        if ((_DWORD)v44 == 1)
        {
          snprintf(__str, 0x80uLL, "%u", v43);
          v45 = (char *)file_fmtcheck(a1, v5, "%s", 614);
          v52 = file_printf(a1, v45, v46, v47, v48, v49, v50, v51, (char)__str);
        }
        else
        {
          v140 = (char *)file_fmtcheck(a1, v5, "%u", 618);
          v52 = file_printf(a1, v140, v141, v142, v143, v144, v145, v146, v43);
        }
        if (v52 == -1)
          return 0xFFFFFFFFLL;
        return *(unsigned int *)(a1 + 56) + 2;
      }
      return v14;
    case 3:
    case 47:
      v67 = file_printf(a1, "%s", v6, v7, v8, v9, v10, v11, (char)v4);
      goto LABEL_64;
    case 4:
    case 8:
    case 11:
    case 23:
      LODWORD(v2) = file_signextend(a1, (uint64_t)v2, *(unsigned int *)(a1 + 136), v7, v8, v9, v10, v11);
      v13 = check_fmt(a1, v5);
      v14 = v13;
      if ((_DWORD)v13 == -1)
        return v14;
      if ((_DWORD)v13 == 1)
      {
        v169 = (int)v2;
        v2 = __str;
        snprintf(__str, 0x80uLL, "%u", v169);
        v15 = "%s";
        v16 = a1;
        v17 = v5;
        v18 = 637;
      }
      else
      {
        v15 = "%u";
        v16 = a1;
        v17 = v5;
        v18 = 641;
      }
      goto LABEL_36;
    case 5:
    case 13:
    case 18:
    case 19:
      v19 = v2[4];
      if (v19 == 61 || v19 == 33)
      {
        v20 = (char *)file_fmtcheck(a1, v5, "%s", 677);
        file_printable(__str, 512, (uint64_t)(v2 + 32), 128);
        if (file_printf(a1, v20, v21, v22, v23, v24, v25, v26, (char)__str) == -1)
          return 0xFFFFFFFFLL;
        return *(_DWORD *)(a1 + 56) + v2[5];
      }
      v85 = *(unsigned int *)(a1 + 56);
      v86 = strlen((const char *)(a1 + 136));
      if (!v2[32])
        *(_BYTE *)(v12 + strcspn((const char *)(a1 + 136), "\r\n")) = 0;
      v87 = a1 + 136;
      if ((v2[29] & 0x20) != 0)
      {
        v87 = a1 + 135;
        v88 = MEMORY[0x24BDAC740];
        do
        {
          v89 = *(unsigned __int8 *)(v87 + 1);
          if (*(char *)(v87 + 1) < 0)
            v90 = __maskrune(v89, 0x4000uLL);
          else
            v90 = *(_DWORD *)(v88 + 4 * v89 + 60) & 0x4000;
          ++v87;
        }
        while (v90);
        v91 = (_BYTE *)v87;
        while (*v91++)
          ;
        do
        {
          v93 = *(v91 - 2);
          if ((char)*(v91 - 2) < 0)
            v94 = __maskrune(v93, 0x4000uLL);
          else
            v94 = *(_DWORD *)(v88 + 4 * v93 + 60) & 0x4000;
          --v91;
        }
        while (v94);
        *v91 = 0;
      }
      v95 = (char *)file_fmtcheck(a1, v5, "%s", 705);
      file_printable(__str, 512, v87, v12 - v87 + 128);
      if (file_printf(a1, v95, v96, v97, v98, v99, v100, v101, (char)__str) != -1)
      {
        v14 = v86 + v85;
        if (v2[6] != 13)
          return v14;
        v108 = file_pstring_length_size(a1, *((_DWORD *)v2 + 7), v102, v103, v104, v105, v106, v107);
        if (v108 != -1)
        {
          v14 += v108;
          return v14;
        }
      }
      return 0xFFFFFFFFLL;
    case 6:
    case 9:
    case 12:
    case 21:
      v27 = (char *)file_fmtcheck(a1, v5, "%s", 723);
      v28 = *(unsigned int *)(a1 + 136);
      v29 = 0;
      goto LABEL_13;
    case 14:
    case 15:
    case 16:
    case 22:
      v27 = (char *)file_fmtcheck(a1, v5, "%s", 733);
      v28 = *(unsigned int *)(a1 + 136);
      v29 = 1;
LABEL_13:
      v170 = file_fmttime(__str, 0x1AuLL, v28, v29);
      v36 = file_printf(a1, v27, v30, v31, v32, v33, v34, v35, v170);
      goto LABEL_70;
    case 17:
    case 20:
      v68 = *(_QWORD *)(a1 + 128);
      v69 = strndup(*(const char **)(a1 + 104), v68);
      if (!v69)
      {
        file_oomem(a1, v68);
        return 0xFFFFFFFFLL;
      }
      v70 = v69;
      v71 = (char *)file_fmtcheck(a1, v5, "%s", 818);
      file_printable(__str, 512, (uint64_t)v70, *(_QWORD *)(a1 + 128));
      LODWORD(v71) = file_printf(a1, v71, v72, v73, v74, v75, v76, v77, (char)__str);
      free(v70);
      if ((_DWORD)v71 == -1)
        return 0xFFFFFFFFLL;
      v14 = *(_QWORD *)(a1 + 120);
      if ((v2[28] & 0x10) == 0)
        v14 += *(_QWORD *)(a1 + 128);
      return v14;
    case 24:
    case 25:
    case 26:
    case 50:
      v37 = file_signextend(a1, (uint64_t)v2, *(_QWORD *)(a1 + 136), v7, v8, v9, v10, v11);
      v38 = check_fmt(a1, v5);
      v14 = v38;
      if ((_DWORD)v38 == -1)
        return v14;
      if ((_DWORD)v38 == 1)
      {
        v171 = v37;
        v37 = (uint64_t)__str;
        snprintf(__str, 0x80uLL, "%llu", v171);
        v39 = "%s";
        v40 = a1;
        v41 = v5;
        v42 = 660;
      }
      else
      {
        v39 = "%llu";
        v40 = a1;
        v41 = v5;
        v42 = 664;
      }
      goto LABEL_57;
    case 27:
    case 28:
    case 29:
      v53 = (char *)file_fmtcheck(a1, v5, "%s", 742);
      v54 = *(_QWORD *)(a1 + 136);
      v55 = 0;
      goto LABEL_29;
    case 30:
    case 31:
    case 32:
      v53 = (char *)file_fmtcheck(a1, v5, "%s", 751);
      v54 = *(_QWORD *)(a1 + 136);
      v55 = 1;
      goto LABEL_29;
    case 33:
    case 34:
    case 35:
      v56 = *(float *)(a1 + 136);
      v57 = check_fmt(a1, v5);
      v14 = v57;
      if ((_DWORD)v57 == -1)
        return v14;
      if ((_DWORD)v57 == 1)
      {
        v2 = __str;
        snprintf(__str, 0x80uLL, "%g", v56);
        v15 = "%s";
        v16 = a1;
        v17 = v5;
        v18 = 776;
LABEL_36:
        v78 = (char *)file_fmtcheck(v16, v17, v15, v18);
        v36 = file_printf(a1, v78, v79, v80, v81, v82, v83, v84, (char)v2);
      }
      else
      {
        v173 = v56;
        v147 = (char *)file_fmtcheck(a1, v5, "%g", 780);
        v36 = file_printf(a1, v147, v148, v149, v150, v151, v152, v153, SLOBYTE(v173));
      }
LABEL_70:
      if (v36 == -1)
        return 0xFFFFFFFFLL;
      return *(unsigned int *)(a1 + 56) + 4;
    case 36:
    case 37:
    case 38:
      v58 = *(double *)(a1 + 136);
      v59 = check_fmt(a1, v5);
      v14 = v59;
      if ((_DWORD)v59 == -1)
        return v14;
      if ((_DWORD)v59 == 1)
      {
        v37 = (uint64_t)__str;
        snprintf(__str, 0x80uLL, "%g", v58);
        v39 = "%s";
        v40 = a1;
        v41 = v5;
        v42 = 796;
LABEL_57:
        v109 = (char *)file_fmtcheck(v40, v41, v39, v42);
        v66 = file_printf(a1, v109, v110, v111, v112, v113, v114, v115, v37);
      }
      else
      {
        v154 = (char *)file_fmtcheck(a1, v5, "%g", 800);
        v66 = file_printf(a1, v154, v155, v156, v157, v158, v159, v160, SLOBYTE(v58));
      }
LABEL_73:
      if (v66 == -1)
        return 0xFFFFFFFFLL;
      return *(unsigned int *)(a1 + 56) + 8;
    case 41:
    case 45:
    case 46:
      return *(unsigned int *)(a1 + 56);
    case 42:
    case 43:
    case 44:
      v53 = (char *)file_fmtcheck(a1, v5, "%s", 760);
      v54 = *(_QWORD *)(a1 + 136);
      v55 = 2;
LABEL_29:
      v172 = file_fmttime(__str, 0x1AuLL, v54, v55);
      v66 = file_printf(a1, v53, v60, v61, v62, v63, v64, v65, v172);
      goto LABEL_73;
    case 48:
      v126 = (char *)file_fmtcheck(a1, v5, "%s", 845);
      file_printable(__str, 512, a1 + 136, 128);
      v67 = file_printf(a1, v126, v127, v128, v129, v130, v131, v132, (char)__str);
      goto LABEL_64;
    case 49:
      file_print_guid(__str, 0x80uLL, a1 + 136);
      v133 = (char *)file_fmtcheck(a1, v5, "%s", 853);
      v67 = file_printf(a1, v133, v134, v135, v136, v137, v138, v139, (char)__str);
LABEL_64:
      if (v67 == -1)
        return 0xFFFFFFFFLL;
      return *(unsigned int *)(a1 + 56);
    default:
      file_magerror(a1, "invalid m->type (%d) in mprint()", v6, v7, v8, v9, v10, v11, v2[6]);
      return 0xFFFFFFFFLL;
  }
}

uint64_t moffset(uint64_t a1, unsigned __int16 *a2, unint64_t a3, _DWORD *a4)
{
  uint64_t v6;
  int v7;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unsigned int v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t result;
  BOOL v24;
  unint64_t v25;

  LODWORD(v6) = 0;
  v7 = *((unsigned __int8 *)a2 + 6);
  switch(*((_BYTE *)a2 + 6))
  {
    case 1:
      LODWORD(v6) = *(_DWORD *)(a1 + 56) + 1;
      goto LABEL_31;
    case 2:
    case 7:
    case 0xA:
      LODWORD(v6) = *(_DWORD *)(a1 + 56) + 2;
      goto LABEL_31;
    case 3:
    case 0x29:
    case 0x2F:
    case 0x32:
      LODWORD(v6) = *(_DWORD *)(a1 + 56);
      goto LABEL_31;
    case 4:
    case 6:
    case 8:
    case 9:
    case 0xB:
    case 0xC:
    case 0xE:
    case 0xF:
    case 0x10:
    case 0x15:
    case 0x16:
    case 0x17:
    case 0x21:
    case 0x22:
    case 0x23:
      LODWORD(v6) = *(_DWORD *)(a1 + 56) + 4;
      goto LABEL_31;
    case 5:
    case 0xD:
    case 0x12:
    case 0x13:
      v10 = *((unsigned __int8 *)a2 + 4);
      if (v10 == 61 || v10 == 33)
      {
        LODWORD(v6) = *(_DWORD *)(a1 + 56) + *((unsigned __int8 *)a2 + 5);
        goto LABEL_31;
      }
      if (!*((_BYTE *)a2 + 32))
      {
        *(_BYTE *)(a1 + 136 + strcspn((const char *)(a1 + 136), "\r\n")) = 0;
        v7 = *((unsigned __int8 *)a2 + 6);
      }
      LODWORD(v6) = *(_DWORD *)(a1 + 56) + strlen((const char *)(a1 + 136));
      if (v7 != 13)
        goto LABEL_31;
      v17 = file_pstring_length_size(a1, *((_DWORD *)a2 + 7), v11, v12, v13, v14, v15, v16);
      if (v17 == -1)
        return 0xFFFFFFFFLL;
      LODWORD(v6) = v6 + v17;
      goto LABEL_31;
    case 0x11:
      v6 = *(_QWORD *)(a1 + 120);
      if ((a2[14] & 0x10) == 0)
        LODWORD(v6) = *(_DWORD *)(a1 + 128) + v6;
      goto LABEL_31;
    case 0x14:
      v6 = *(_QWORD *)(a1 + 120);
      if ((a2[14] & 0x10) == 0)
        LODWORD(v6) = v6 + *((unsigned __int8 *)a2 + 5);
      goto LABEL_31;
    case 0x18:
    case 0x19:
    case 0x1A:
    case 0x1B:
    case 0x1C:
    case 0x1D:
    case 0x1E:
    case 0x1F:
    case 0x20:
    case 0x24:
    case 0x25:
    case 0x26:
      LODWORD(v6) = *(_DWORD *)(a1 + 56) + 8;
      goto LABEL_31;
    case 0x30:
      v25 = 0;
      v18 = *(_QWORD *)(a1 + 104);
      if (*(_QWORD *)(a1 + 112))
        v19 = *(_QWORD *)(a1 + 112);
      else
        v19 = a3;
      if (gettag(*(_QWORD *)(a1 + 104), &v25, v19) == -1)
        goto LABEL_26;
      v20 = getlength(v18, &v25, v19);
      if (v20 == -1)
        goto LABEL_26;
      v21 = v25 + (*((_DWORD *)a2 + 3) + *(_DWORD *)(a1 + 56));
      if (!*a2)
        goto LABEL_36;
      v22 = v21 + v20;
      if (v22 > a3)
      {
LABEL_26:
        LODWORD(v21) = -1;
LABEL_27:
        if ((*(_BYTE *)(a1 + 68) & 1) != 0)
          fprintf((FILE *)*MEMORY[0x24BDAC8D8], "Bad DER offset %d nbytes=%zu", v21, a3);
        LODWORD(v6) = 0;
        result = 0;
        goto LABEL_34;
      }
      *(_DWORD *)(*(_QWORD *)(a1 + 24) + 16 * (*a2 - 1)) = v22;
LABEL_36:
      v24 = (_DWORD)v21 == -1 || (int)v21 > a3;
      LODWORD(v6) = v21;
      if (v24)
        goto LABEL_27;
LABEL_31:
      if ((int)v6 > a3)
        return 0xFFFFFFFFLL;
      result = 1;
LABEL_34:
      *a4 = v6;
      return result;
    case 0x31:
      LODWORD(v6) = *(_DWORD *)(a1 + 56) + 16;
      goto LABEL_31;
    default:
      goto LABEL_31;
  }
}

uint64_t varexpand(uint64_t a1, char *a2, size_t a3, char *__s1)
{
  char *v8;
  unsigned __int8 *v9;
  size_t v10;
  BOOL v11;
  size_t v12;
  int v13;
  char *v14;
  _BYTE *v15;
  _BYTE *i;
  _BYTE *v17;
  _BYTE *j;
  _BYTE *v19;
  size_t v20;
  const void *v21;
  size_t v22;
  size_t v23;
  uint64_t result;

LABEL_1:
  v8 = strstr(__s1, "${");
  if (v8)
  {
    v9 = (unsigned __int8 *)v8;
    v10 = v8 - __s1;
    v11 = a3 > v8 - __s1;
    v12 = a3 - (v8 - __s1);
    if (v11)
    {
      memcpy(a2, __s1, v10);
      v13 = v9[2];
      if (v9[2])
      {
        if (v9[3] == 63)
        {
          v14 = &a2[v10];
          v15 = v9 + 4;
          for (i = v9 + 4; *i; ++i)
          {
            if (*i == 58)
            {
              v17 = i + 1;
              for (j = i + 1; *j; ++j)
              {
                if (*j == 125)
                {
                  if (v13 == 120)
                  {
                    v19 = (_BYTE *)(i - v15);
                    v20 = (*(_WORD *)(a1 + 96) & 0x49) != 0 ? (size_t)v19 : j - v17;
                    v11 = v12 > v20;
                    a3 = v12 - v20;
                    if (v11)
                    {
                      if ((*(_WORD *)(a1 + 96) & 0x49) != 0)
                        v21 = v15;
                      else
                        v21 = v17;
                      memcpy(v14, v21, v20);
                      a2 = &v14[v20];
                      __s1 = j + 1;
                      goto LABEL_1;
                    }
                  }
                  return 0xFFFFFFFFLL;
                }
              }
              return 0xFFFFFFFFLL;
            }
          }
        }
      }
    }
  }
  else
  {
    v22 = strlen(__s1);
    if (v22 < a3)
    {
      v23 = v22;
      memcpy(a2, __s1, v22);
      result = 0;
      a2[v23] = 0;
      return result;
    }
  }
  return 0xFFFFFFFFLL;
}

uint64_t check_fmt(uint64_t a1, char *__s)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _OWORD v14[2];
  regex_t v15;
  char v16[512];
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  if (!strchr(__s, 37))
    return 0;
  memset(&v15, 0, sizeof(v15));
  memset(v14, 0, sizeof(v14));
  v4 = file_regcomp((uint64_t)v14, "%[-0-9\\.]*s", 5);
  if ((_DWORD)v4)
  {
    v7 = v4;
    regerror(v4, &v15, v16, 0x200uLL);
    v5 = 0xFFFFFFFFLL;
  }
  else
  {
    v5 = file_regexec((uint64_t)v14, __s, 0, 0) == 0;
  }
  file_regfree((uint64_t)v14);
  return v5;
}

const char *file_fmtcheck(uint64_t a1, char *__s, const char *a3, uint64_t a4)
{
  const char *result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  if (!strchr(__s, 37))
    return __s;
  result = fmtcheck(__s, a3);
  if (result == a3)
  {
    return a3;
  }
  return result;
}

unint64_t file_strncmp(char *a1, char *a2, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t v5;
  char *v6;
  uint64_t v8;
  char v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __darwin_ct_rune_t v16;
  __darwin_ct_rune_t v17;
  __darwin_ct_rune_t v18;
  uint64_t v19;
  int64_t v20;
  uint64_t v21;
  unsigned int v22;
  unint64_t v23;
  char *v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int v30;
  unsigned int v31;

  v5 = a3;
  v6 = a2;
  if ((a5 & 3) != 0)
    v8 = a4;
  else
    v8 = a3;
  if (a5)
  {
    if (a3)
    {
      v9 = a5;
      v10 = (unint64_t)&a2[v8];
      v11 = &a2[v8];
      v12 = (uint64_t)&a2[v8 - 1];
      v13 = 1;
      v14 = MEMORY[0x24BDAC740];
      do
      {
        if ((unint64_t)v6 >= v10)
          return v13;
        v15 = *a1;
        if ((v9 & 4) != 0)
        {
          if ((v15 & 0x80) != 0)
          {
            if (__maskrune(*a1, 0x1000uLL))
            {
LABEL_11:
              v16 = *v6++;
              v17 = __tolower(v16);
              goto LABEL_18;
            }
          }
          else if ((*(_DWORD *)(v14 + 4 * v15 + 60) & 0x1000) != 0)
          {
            goto LABEL_11;
          }
          LODWORD(v15) = *a1;
        }
        if ((v9 & 8) != 0)
        {
          if ((v15 & 0x80) != 0)
          {
            if (__maskrune(v15, 0x8000uLL))
            {
LABEL_17:
              v18 = *v6++;
              v17 = __toupper(v18);
LABEL_18:
              if (v17 != (_DWORD)v15)
                return v17 - (int)v15;
              goto LABEL_43;
            }
          }
          else if ((*(_DWORD *)(v14 + 4 * v15 + 60) & 0x8000) != 0)
          {
            goto LABEL_17;
          }
          LODWORD(v15) = *a1;
        }
        if ((v9 & 1) == 0)
          goto LABEL_30;
        if ((v15 & 0x80) != 0)
        {
          if (!__maskrune(v15, 0x4000uLL))
          {
LABEL_29:
            LODWORD(v15) = *a1;
LABEL_30:
            if ((v9 & 2) == 0)
              goto LABEL_42;
            if ((v15 & 0x80) != 0)
            {
              if (!__maskrune(v15, 0x4000uLL))
              {
LABEL_41:
                LODWORD(v15) = *a1;
LABEL_42:
                v22 = *v6++;
                v23 = v22 - (unint64_t)v15;
                if (v22 != (unint64_t)v15)
                  return v23;
LABEL_43:
                ++a1;
LABEL_44:
                v24 = v6;
                goto LABEL_45;
              }
            }
            else if ((*(_DWORD *)(v14 + 4 * v15 + 60) & 0x4000) == 0)
            {
              goto LABEL_41;
            }
            ++a1;
            v20 = v11 - v6;
            do
            {
              v21 = *v6;
              if (*v6 < 0)
              {
                if (!__maskrune(v21, 0x4000uLL))
                  goto LABEL_44;
              }
              else if ((*(_DWORD *)(v14 + 4 * v21 + 60) & 0x4000) == 0)
              {
                goto LABEL_44;
              }
              ++v6;
              --v20;
            }
            while (v20);
LABEL_59:
            v24 = v11;
            goto LABEL_45;
          }
        }
        else if ((*(_DWORD *)(v14 + 4 * v15 + 60) & 0x4000) == 0)
        {
          goto LABEL_29;
        }
        v19 = *v6;
        if (*v6 < 0)
        {
          if (!__maskrune(v19, 0x4000uLL))
            return v13;
        }
        else if ((*(_DWORD *)(v14 + 4 * v19 + 60) & 0x4000) == 0)
        {
          return v13;
        }
        v25 = *++a1;
        if (*a1 < 0)
          v26 = __maskrune(v25, 0x4000uLL);
        else
          v26 = *(_DWORD *)(v14 + 4 * v25 + 60) & 0x4000;
        v24 = v6 + 1;
        if (!v26 && (unint64_t)v24 < v10)
        {
          v27 = v12 - (_QWORD)v6;
          do
          {
            v28 = *v24;
            if (*v24 < 0)
            {
              if (!__maskrune(v28, 0x4000uLL))
                goto LABEL_45;
            }
            else if ((*(_DWORD *)(v14 + 4 * v28 + 60) & 0x4000) == 0)
            {
              goto LABEL_45;
            }
            ++v24;
            --v27;
          }
          while (v27);
          goto LABEL_59;
        }
LABEL_45:
        v6 = v24;
        --v5;
      }
      while (v5);
    }
  }
  else
  {
    while (v5)
    {
      --v5;
      v30 = *v6++;
      v29 = v30;
      v31 = *a1++;
      v13 = v29 - v31;
      if (v29 != v31)
        return v13;
    }
  }
  return 0;
}

void mcopy(uint64_t a1, char *__dst, int a3, int a4, uint64_t a5, unsigned int a6, unint64_t a7, uint64_t a8)
{
  unint64_t v10;
  char *v11;
  unint64_t v12;
  char *v13;
  unint64_t v14;
  int v15;
  uint64_t v16;
  unint64_t v17;
  size_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  _BOOL4 v26;
  _BYTE *v27;
  unint64_t v28;
  uint64_t v29;
  void *v30;
  BOOL v31;

  if (a4)
  {
    if (a3 == 50)
    {
LABEL_3:
      *((_QWORD *)__dst + 15) = 0;
      *(_OWORD *)(__dst + 104) = 0u;
      *(_OWORD *)(__dst + 88) = 0u;
      *(_OWORD *)(__dst + 72) = 0u;
      *(_OWORD *)(__dst + 56) = 0u;
      *(_OWORD *)(__dst + 40) = 0u;
      *(_OWORD *)(__dst + 24) = 0u;
      *(_OWORD *)(__dst + 8) = 0u;
      *(_QWORD *)__dst = a6;
      return;
    }
    goto LABEL_33;
  }
  if (a3 <= 19)
  {
    if ((a3 - 18) < 2)
    {
      if (a6 < a7)
      {
        v10 = a5 + a7;
        v11 = __dst + 127;
        v12 = a5 + a6;
        if (a3 == 18)
          ++v12;
        if (v12 >= v10)
        {
LABEL_21:
          *v11 = 0;
          return;
        }
        v13 = __dst + 1;
        v14 = (a3 == 18) + (unint64_t)a6 + a5 + 2;
        while (1)
        {
          v15 = *(unsigned __int8 *)(v14 - 2);
          *(v13 - 1) = v15;
          if (v15)
            goto LABEL_18;
          if (a3 != 18)
            break;
          if (*(_BYTE *)(v14 - 3))
            goto LABEL_17;
LABEL_18:
          if (v14 < v10)
          {
            v14 += 2;
            v31 = v13++ >= v11;
            if (!v31)
              continue;
          }
          goto LABEL_21;
        }
        if (v14 - 1 >= v10 || !*(_BYTE *)(v14 - 1))
          goto LABEL_18;
LABEL_17:
        *(v13 - 1) = 32;
        goto LABEL_18;
      }
LABEL_33:
      if (a7 <= a6)
      {
        *((_OWORD *)__dst + 6) = 0u;
        *((_OWORD *)__dst + 7) = 0u;
        *((_OWORD *)__dst + 4) = 0u;
        *((_OWORD *)__dst + 5) = 0u;
        *((_OWORD *)__dst + 2) = 0u;
        *((_OWORD *)__dst + 3) = 0u;
        *(_OWORD *)__dst = 0u;
        *((_OWORD *)__dst + 1) = 0u;
      }
      else
      {
        v17 = a7 - a6;
        if (v17 >= 0x80)
          v18 = 128;
        else
          v18 = a7 - a6;
        memcpy(__dst, (const void *)(a5 + a6), v18);
        if (v17 <= 0x7F)
          bzero(&__dst[v17], 128 - v17);
      }
      return;
    }
    if (a3 != 17)
      goto LABEL_33;
    if (!a5 || a7 < a6)
    {
      *(_QWORD *)(a1 + 104) = 0;
      *(_QWORD *)(a1 + 112) = 0;
      return;
    }
    v19 = a6;
    v20 = *(_DWORD *)(a8 + 28);
    if ((v20 & 0x800) != 0)
      v21 = *(unsigned int *)(a8 + 24);
    else
      v21 = 0;
    if ((v20 & 0x800) != 0)
      v22 = 80 * *(unsigned int *)(a8 + 24);
    else
      v22 = *(unsigned int *)(a8 + 24);
    if (v22 - 1 >= a7 - a6)
      v22 = a7 - a6;
    v23 = *(unsigned __int16 *)(a1 + 274);
    if (v22 < v23)
      v23 = v22;
    v24 = a5 + a6;
    v25 = v24 + v23;
    v26 = v21 != 0;
    v27 = (_BYTE *)(v24 + v23);
    if (v21 && v23)
    {
      v28 = v25 - 1;
      v29 = v21 - 1;
      v30 = (void *)(a5 + a6);
      while (1)
      {
        v27 = memchr(v30, 10, v25 - (_QWORD)v30);
        if (!v27)
        {
          v27 = memchr(v30, 13, v25 - (_QWORD)v30);
          if (!v27)
            break;
        }
        if ((unint64_t)v27 < v28 && *v27 == 13 && v27[1] == 10)
          ++v27;
        if ((unint64_t)v27 < v28 && *v27 == 10)
          ++v27;
        v31 = v29-- != 0;
        v26 = v31;
        if (v31)
        {
          v30 = v27 + 1;
          if ((unint64_t)(v27 + 1) < v25)
            continue;
        }
        goto LABEL_69;
      }
    }
    else
    {
LABEL_69:
      if (!v26)
      {
LABEL_71:
        *(_QWORD *)(a1 + 104) = v24;
        *(_QWORD *)(a1 + 112) = &v27[-v24];
        *(_QWORD *)(a1 + 120) = v19;
        *(_QWORD *)(a1 + 128) = 0;
        return;
      }
    }
    v27 = (_BYTE *)v25;
    goto LABEL_71;
  }
  if (a3 != 20)
  {
    if (a3 == 50)
      goto LABEL_3;
    if (a3 != 48)
      goto LABEL_33;
  }
  if (a6 <= a7)
    v16 = a6;
  else
    v16 = a7;
  *(_QWORD *)(a1 + 104) = a5 + v16;
  *(_QWORD *)(a1 + 112) = a7 - v16;
  *(_QWORD *)(a1 + 120) = v16;
}

uint64_t mdebug(int a1, _BYTE *a2)
{
  FILE **v3;

  v3 = (FILE **)MEMORY[0x24BDAC8D8];
  fprintf((FILE *)*MEMORY[0x24BDAC8D8], "mget/%zu @%d: ", 0x80uLL, a1);
  file_showstr(*v3, a2, 128);
  fputc(10, *v3);
  return fputc(10, *v3);
}

uint64_t cvt_id3(char a1, unsigned int a2)
{
  uint64_t v2;

  v2 = a2 & 0x7F | (((a2 >> 8) & 0x7F) << 7) | (a2 >> 2) & 0x1FC000 | (a2 >> 3) & 0xFE00000;
  if ((a1 & 1) != 0)
    fprintf((FILE *)*MEMORY[0x24BDAC8D8], "id3 offs=%u\n", a2 & 0x7F | (((a2 >> 8) & 0x7F) << 7) | (a2 >> 2) & 0x1FC000 | (a2 >> 3) & 0xFE00000);
  return v2;
}

uint64_t cvt_16(_WORD *a1, uint64_t a2)
{
  if (*(_QWORD *)(a2 + 24))
    return ((uint64_t (*)(void))((char *)&loc_20BBBA340 + 4 * byte_20BC99E60[*(_BYTE *)(a2 + 9) & 7]))();
  if ((*(_BYTE *)(a2 + 9) & 0x40) != 0)
    *a1 = ~*a1;
  return 0;
}

uint64_t cvt_32(int *a1, uint64_t a2)
{
  if (*(_QWORD *)(a2 + 24))
    return ((uint64_t (*)(void))((char *)&loc_20BBBA414 + 4 * byte_20BC99E68[*(_BYTE *)(a2 + 9) & 7]))();
  if ((*(_BYTE *)(a2 + 9) & 0x40) != 0)
    *a1 = ~*a1;
  return 0;
}

_QWORD *cvt_64(_QWORD *result, uint64_t a2)
{
  if (*(_QWORD *)(a2 + 24))
    return (_QWORD *)((uint64_t (*)(void))((char *)&loc_20BBBA4D8 + 4 * byte_20BC99E70[*(_BYTE *)(a2 + 9) & 7]))();
  if ((*(_BYTE *)(a2 + 9) & 0x40) != 0)
    *result = ~*result;
  return result;
}

float *cvt_float(float *result, uint64_t a2)
{
  unint64_t v2;
  float v3;

  v2 = *(_QWORD *)(a2 + 24);
  if (v2)
  {
    switch(*(_BYTE *)(a2 + 9) & 7)
    {
      case 3:
        v3 = *result + (float)v2;
        goto LABEL_7;
      case 4:
        v3 = *result - (float)v2;
        goto LABEL_7;
      case 5:
        v3 = *result * (float)v2;
        goto LABEL_7;
      case 6:
        v3 = *result / (float)v2;
LABEL_7:
        *result = v3;
        break;
      default:
        return result;
    }
  }
  return result;
}

double *cvt_double(double *result, uint64_t a2)
{
  unint64_t v2;
  double v3;

  v2 = *(_QWORD *)(a2 + 24);
  if (v2)
  {
    switch(*(_BYTE *)(a2 + 9) & 7)
    {
      case 3:
        v3 = *result + (double)v2;
        goto LABEL_7;
      case 4:
        v3 = *result - (double)v2;
        goto LABEL_7;
      case 5:
        v3 = *result * (double)v2;
        goto LABEL_7;
      case 6:
        v3 = *result / (double)v2;
LABEL_7:
        *result = v3;
        break;
      default:
        return result;
    }
  }
  return result;
}

int vasprintf(char **a1, const char *a2, va_list a3)
{
  _BYTE *v4;
  uint64_t v5;
  char *v6;
  char *v7;
  int result;
  const char *v9;
  void *ptr[2];
  __int128 v11;
  uint64_t v12;
  unint64_t v13;
  __int128 v14;
  uint64_t v15;
  va_list v16;

  v16 = a3;
  v12 = 0;
  *(_OWORD *)ptr = 0u;
  v11 = 0u;
  v9 = a2;
  v15 = 0;
  v13 = 2147483646;
  v14 = (unint64_t)a3;
  if (!a2)
    v9 = "(null)";
  ptr[0] = 0;
  v11 = 0uLL;
  v12 = 0;
  if (realloc_buff((uint64_t)&v9, 0) == -1)
    goto LABEL_14;
  ptr[1] = ptr[0];
  while (*v9)
  {
    if (dispatch((uint64_t)&v9) == -1)
    {
LABEL_13:
      free(ptr[0]);
      goto LABEL_14;
    }
    if (*((_QWORD *)&v11 + 1) >= v13)
    {
      v4 = (char *)ptr[0] + v13;
      goto LABEL_10;
    }
  }
  v4 = ptr[1];
LABEL_10:
  *v4 = 0;
  v5 = *((_QWORD *)&v11 + 1);
  v6 = (char *)ptr[0] + *((_QWORD *)&v11 + 1);
  while (*v9)
  {
    *((_QWORD *)&v11 + 1) = 0;
    ptr[1] = v6;
    if (dispatch((uint64_t)&v9) == -1)
      goto LABEL_13;
  }
  ptr[0] = malloc_type_realloc(ptr[0], v5 + 1, 0xE493931FuLL);
  if (!ptr[0] || (result = v12, (_DWORD)v12 == -1))
  {
LABEL_14:
    v7 = 0;
    result = -1;
  }
  else
  {
    v7 = (char *)ptr[0];
  }
  *a1 = v7;
  return result;
}

uint64_t realloc_buff(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _BYTE *v4;
  _BYTE *v5;
  uint64_t result;
  char *v7;

  v2 = *(_QWORD *)(a1 + 32) + a2;
  if ((unint64_t)(v2 + 1024) <= *(_QWORD *)(a1 + 24))
    return 0;
  v4 = malloc_type_realloc(*(void **)(a1 + 8), v2 + 2048, 0x1F36DADCuLL);
  if (v4)
  {
    v5 = v4;
    result = 0;
    v7 = &v5[*(_QWORD *)(a1 + 16) - *(_QWORD *)(a1 + 8)];
    *(_QWORD *)(a1 + 8) = v5;
    *(_QWORD *)(a1 + 16) = v7;
    *(_QWORD *)(a1 + 24) = v2 + 2048;
    v5[v2 + 2047] = 1;
  }
  else
  {
    *(_QWORD *)(a1 + 8) = 0;
    return 0xFFFFFFFFLL;
  }
  return result;
}

uint64_t dispatch(uint64_t a1)
{
  char *v2;
  char *v3;
  int v4;
  uint64_t result;
  int64x2_t v6;
  int64x2_t v7;
  size_t v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  _BYTE *i;
  _BYTE *v15;
  char v16;
  unsigned int v17;
  int v18;
  int v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned int *v22;
  unsigned int v23;
  unsigned int v24;
  unsigned __int8 *v25;
  int v26;
  int v27;
  unsigned __int8 *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  char *v36;
  int v37;
  void *v38;
  uint64_t v39;
  _QWORD *v40;
  _DWORD *v41;
  _DWORD **v42;
  _DWORD *v43;
  _DWORD **v44;
  uint64_t *v45;
  int v46;
  int v47;
  int v48;
  char v49;
  char v50;
  _BYTE v51[30];

  *(_QWORD *)&v51[22] = *MEMORY[0x24BDAC8D0];
  v2 = *(char **)a1;
  if (*v2 != 37)
  {
    v8 = strcspn(v2, "%");
    result = realloc_buff(a1, v8);
    if ((_DWORD)result == -1)
      return result;
    memcpy(*(void **)(a1 + 16), *(const void **)a1, v8);
    result = 0;
    *(_QWORD *)a1 += v8;
    *(_QWORD *)(a1 + 16) += v8;
    v6 = *(int64x2_t *)(a1 + 32);
    v7 = vdupq_n_s64(v8);
LABEL_7:
    *(int64x2_t *)(a1 + 32) = vaddq_s64(v6, v7);
    return result;
  }
  v3 = v2 + 1;
  *(_QWORD *)a1 = v2 + 1;
  v4 = v2[1];
  if (v4 == 37)
  {
    result = realloc_buff(a1, 1);
    if ((_DWORD)result == -1)
      return result;
    result = 0;
    *(_BYTE *)(*(_QWORD *)(a1 + 16))++ = 37;
    ++*(_QWORD *)a1;
    v6 = *(int64x2_t *)(a1 + 32);
    v7 = vdupq_n_s64(1uLL);
    goto LABEL_7;
  }
  v9 = 0;
  v10 = 0;
  v11 = 0;
  v12 = 0;
  v13 = 0;
  for (i = v2 + 2; ; ++i)
  {
    v15 = i - 1;
    if (v4 > 0x29u)
    {
      switch((char)v4)
      {
        case '*':
          *(_QWORD *)a1 = i;
          v20 = *(unsigned int **)(a1 + 56);
          *(_QWORD *)(a1 + 56) = v20 + 2;
          v21 = *v20;
          if (v21 >= 0x3FFF)
            v19 = 0x3FFF;
          else
            v19 = v21;
          LOBYTE(v4) = *i;
          v15 = i;
          goto LABEL_31;
        case '+':
          v13 = 1;
          goto LABEL_18;
        case '-':
          v12 = 1;
          goto LABEL_18;
        case '0':
          v9 = 1;
          goto LABEL_18;
        default:
          goto LABEL_20;
      }
    }
    if (v4 != 32)
      break;
    v11 = 1;
LABEL_18:
    *(_QWORD *)a1 = i;
    v16 = *i;
    LOBYTE(v4) = v16;
  }
  if (v4 == 35)
  {
    v10 = 1;
    goto LABEL_18;
  }
  if (!(_BYTE)v4)
    goto LABEL_55;
LABEL_20:
  if (v4 - 48 > 9)
  {
    v19 = -1;
  }
  else
  {
    v17 = 0;
    do
    {
      v15 = i;
      v17 = 10 * v17 + (char)v4 - 48;
      *(_QWORD *)a1 = i;
      v18 = *i++;
      LOBYTE(v4) = v18;
    }
    while ((v18 - 48) < 0xA);
    if (v17 >= 0x7FFF)
      v19 = 0x7FFF;
    else
      v19 = v17;
  }
LABEL_31:
  if (v4 == 46)
  {
    *(_QWORD *)a1 = v15 + 1;
    v4 = v15[1];
    if (v4 == 42)
    {
      *(_QWORD *)a1 = v15 + 2;
      v22 = *(unsigned int **)(a1 + 56);
      *(_QWORD *)(a1 + 56) = v22 + 2;
      v23 = *v22;
      if (v23 >= 0x3FFF)
        v23 = 0x3FFF;
      v47 = v23;
      v4 = v15[2];
      v15 += 2;
      if (!v4)
        goto LABEL_55;
    }
    else
    {
      if ((v4 - 58) < 0xFFFFFFF6)
        goto LABEL_55;
      v24 = 0;
      v25 = v15 + 2;
      do
      {
        v15 = v25;
        v24 = 10 * v24 + (char)v4 - 48;
        *(_QWORD *)a1 = v25;
        v26 = *v25++;
        v4 = v26;
      }
      while ((v26 - 48) < 0xA);
      if (v24 >= 0x7FFF)
        v24 = 0x7FFF;
      v47 = v24;
      if (!v4)
        goto LABEL_55;
    }
LABEL_45:
    v27 = (char)v4;
    if (((char)v4 - 76) > 0x2E || ((1 << (v4 - 76)) & 0x410110000001) == 0)
    {
      v27 = -1;
      goto LABEL_59;
    }
    v29 = v15 + 1;
    *(_QWORD *)a1 = v15 + 1;
    if (v4 == 108)
    {
      v4 = *v29;
      if (v4 != 108)
      {
        v27 = 108;
LABEL_54:
        v15 = v29;
        if (!v4)
          goto LABEL_55;
LABEL_59:
        v46 = v27;
        v48 = v19;
        result = (uint64_t)memchr("diouxXfegEGcspn", (char)v4, 0x10uLL);
        if (!result)
          goto LABEL_56;
        *(_QWORD *)a1 = v15 + 1;
        v49 = 37;
        if (v13)
        {
          v50 = 43;
          v35 = v51;
        }
        else
        {
          v35 = &v50;
        }
        if (v12)
          *v35++ = 45;
        if (v11)
          *v35++ = 32;
        if (v10)
          *v35++ = 35;
        if (v9)
          *v35++ = 48;
        if (v48 != -1)
        {
          sprintf(v35, "%i", v48);
          v35 += strlen(v35);
        }
        if (v47 != -1)
        {
          *v35 = 46;
          v36 = v35 + 1;
          sprintf(v36, "%i", v47);
          v35 = &v36[strlen(v36)];
        }
        v37 = v48;
        if (v46 != -1)
        {
          if (v46 == 76 && (v38 = memchr("diouxX", (char)v4, 7uLL), v37 = v48, v38))
          {
            *(_WORD *)v35 = 27756;
            v35 += 2;
          }
          else
          {
            *v35++ = v46;
          }
        }
        *v35 = v4;
        v35[1] = 0;
        v39 = (v47 + v37) & ~((v47 + v37) >> 31);
        if ((char)v4 > 98)
        {
          switch((char)v4)
          {
            case 'c':
              if (v46 == -1)
                goto LABEL_100;
              goto LABEL_55;
            case 'd':
            case 'i':
            case 'o':
            case 'u':
            case 'x':
              goto LABEL_82;
            case 'e':
            case 'f':
            case 'g':
              goto LABEL_91;
            case 'n':
              if (v46 != -1)
                goto LABEL_55;
              v42 = *(_DWORD ***)(a1 + 56);
              *(_QWORD *)(a1 + 56) = v42 + 1;
              v43 = *v42;
              if (v43)
              {
                result = 0;
                *v43 = *(_QWORD *)(a1 + 40);
              }
              else
              {
                result = 0xFFFFFFFFLL;
              }
              break;
            case 'p':
              if (v46 == -1)
                goto LABEL_105;
              goto LABEL_55;
            case 's':
              v45 = *(uint64_t **)(a1 + 56);
              *(_QWORD *)(a1 + 56) = v45 + 1;
              result = type_s(a1, v37, v47, &v49, *v45, v32, v33, v34);
              break;
            default:
              goto LABEL_55;
          }
          return result;
        }
        if ((char)v4 == 69 || (char)v4 == 71)
        {
LABEL_91:
          if (v46 != 108 && v46 != 76 && v46 != -1)
            goto LABEL_55;
          v40 = *(_QWORD **)(a1 + 56);
          *(_QWORD *)(a1 + 56) = v40 + 1;
          return print_it(a1, v39, &v49, v30, v31, v32, v33, v34, *v40);
        }
        if ((char)v4 != 88)
          goto LABEL_55;
LABEL_82:
        if (v46 > 107)
        {
          if (v46 != 108 && v46 != 116 && v46 != 122)
            goto LABEL_55;
        }
        else
        {
          if (v46 == -1)
          {
LABEL_100:
            v41 = *(_DWORD **)(a1 + 56);
            *(_QWORD *)(a1 + 56) = v41 + 2;
            LODWORD(v41) = *v41;
            return print_it(a1, v39, &v49, v30, v31, v32, v33, v34, (char)v41);
          }
          if (v46 != 76)
          {
            if (v46 != 104)
              goto LABEL_55;
            goto LABEL_100;
          }
        }
LABEL_105:
        v44 = *(_DWORD ***)(a1 + 56);
        *(_QWORD *)(a1 + 56) = v44 + 1;
        v41 = *v44;
        return print_it(a1, v39, &v49, v30, v31, v32, v33, v34, (char)v41);
      }
      v29 = v15 + 2;
      *(_QWORD *)a1 = v15 + 2;
      v27 = 76;
    }
    v4 = *v29;
    goto LABEL_54;
  }
  if ((_BYTE)v4)
  {
    v47 = -1;
    goto LABEL_45;
  }
LABEL_55:
  result = 0;
LABEL_56:
  *(_QWORD *)a1 = v3;
  return result;
}

uint64_t print_it(uint64_t a1, uint64_t a2, const char *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  uint64_t result;
  const char *v12;
  size_t v13;

  result = realloc_buff(a1, a2);
  if ((_DWORD)result != -1)
  {
    result = vsprintf(*(char **)(a1 + 16), a3, &a9);
    if (*(_BYTE *)(*(_QWORD *)(a1 + 24) + *(_QWORD *)(a1 + 8) - 1) != 1)
      __assert_rtn("print_it", "vasprintf.c", 216, "(s->buffer_base)[s->buffer_len - 1] == 1");
    if ((_DWORD)result != -1)
    {
      *(_QWORD *)(a1 + 40) += (int)result;
      v12 = *(const char **)(a1 + 16);
      v13 = strlen(v12);
      result = 0;
      *(_QWORD *)(a1 + 32) += v13;
      *(_QWORD *)(a1 + 16) = &v12[v13];
    }
  }
  return result;
}

uint64_t type_s(uint64_t a1, int a2, int a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;

  if (!a5)
    return print_it(a1, 6, "(null)", (uint64_t)a4, 0, a6, a7, a8, 0);
  v8 = 0;
  do
  {
    v9 = v8;
    if (a3 == v8)
      break;
    ++v8;
  }
  while (*(_BYTE *)(a5 + v9));
  v10 = a2;
  if (v9 > a2)
    v10 = v9;
  if (a2 == -1)
    v11 = v9;
  else
    v11 = v10;
  return print_it(a1, v11, a4, (uint64_t)a4, a5, a6, a7, a8, a5);
}

BOOL json_parse(unsigned __int8 **a1, unsigned __int8 *a2, uint64_t a3, unint64_t a4)
{
  unsigned __int8 *v8;
  int64_t v9;
  unsigned int v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v14;
  unsigned __int8 *v15;
  unsigned int v16;
  uint64_t v17;
  unsigned int v18;
  int64_t v19;
  unsigned int v20;
  uint64_t v21;
  unsigned __int8 *v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t v26;
  int v28;
  int v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  unsigned __int8 *v33;
  unsigned __int8 *v34;
  unsigned __int8 *v35;
  int v36;
  unsigned __int8 *v37;
  int v38;
  unsigned __int8 *v39;
  int v40;
  unsigned __int8 *v41;
  uint64_t v42;
  unsigned int v43;
  uint64_t v44;
  unsigned __int8 *v47;
  int v48;
  unsigned __int8 *v49;
  unsigned __int8 *v50;

  v8 = *a1;
  if (*a1 < a2)
  {
    v9 = a2 - v8;
    while (1)
    {
      v10 = *v8;
      v11 = v10 > 0x20;
      v12 = (1 << v10) & 0x100002600;
      if (v11 || v12 == 0)
        break;
      ++v8;
      if (!--v9)
      {
        v8 = a2;
        break;
      }
    }
  }
  if (v8 == a2)
  {
    v14 = 0;
    *a1 = a2;
    return v14;
  }
  if (a4 > 0x14)
    return 0;
  v15 = v8 + 1;
  v49 = v8 + 1;
  v16 = *v8;
  if (v16 > 0x6D)
  {
    switch(v16)
    {
      case 'n':
        if (v15 >= a2)
          goto LABEL_70;
        v32 = 1;
        while (v32 != 4)
        {
          v15 = &v8[++v32];
          if (&v8[v32] >= a2)
            goto LABEL_70;
        }
        break;
      case 't':
        if (v15 >= a2)
          goto LABEL_70;
        v32 = 1;
        while (v32 != 4)
        {
          v15 = &v8[++v32];
          if (&v8[v32] >= a2)
            goto LABEL_70;
        }
        break;
      case '{':
        v50 = v8 + 1;
        while (1)
        {
          if (v15 >= a2)
            goto LABEL_95;
          v19 = a2 - v15;
          while (1)
          {
            v20 = *v15;
            v11 = v20 > 0x20;
            v21 = (1 << v20) & 0x100002600;
            if (v11 || v21 == 0)
              break;
            ++v15;
            if (!--v19)
            {
              v15 = a2;
              break;
            }
          }
          v50 = v15;
          if (v15 == a2)
            goto LABEL_86;
          v23 = v15 + 1;
          if (*v15 == 125)
            break;
          v50 = v15 + 1;
          if (*v15 != 34)
            goto LABEL_94;
          v18 = json_parse_string(&v50, a2);
          v15 = v50;
          if (!v18)
            goto LABEL_103;
          if (v50 < a2)
          {
            v24 = a2 - v50;
            while (1)
            {
              v25 = *v15;
              v11 = v25 > 0x20;
              v26 = (1 << v25) & 0x100002600;
              if (v11 || v26 == 0)
                break;
              ++v15;
              if (!--v24)
              {
                v15 = a2;
                break;
              }
            }
          }
          if (v15 == a2)
          {
LABEL_86:
            v18 = 0;
            v15 = a2;
            goto LABEL_103;
          }
          v23 = v15 + 1;
          v50 = v15 + 1;
          if (*v15 != 58)
          {
LABEL_94:
            v18 = 0;
            goto LABEL_102;
          }
          v18 = json_parse(&v50, a2, a3, a4 + 2);
          v15 = v50;
          if (!v18)
            goto LABEL_103;
          if (v50 == a2)
            goto LABEL_86;
          v29 = *v50;
          v15 = v50 + 1;
          v28 = v29;
          ++v50;
          if (v29 != 44)
          {
            if (v28 == 125)
            {
              v18 = 1;
              goto LABEL_103;
            }
LABEL_95:
            v18 = 0;
            goto LABEL_103;
          }
        }
        v18 = 1;
LABEL_102:
        v15 = v23;
LABEL_103:
        v49 = v15;
        v30 = 3;
        goto LABEL_120;
      default:
        goto LABEL_71;
    }
    v15 = &v8[v32];
LABEL_88:
    v18 = 1;
    goto LABEL_89;
  }
  if (v16 != 34)
  {
    if (v16 == 91)
    {
      v50 = v8 + 1;
      if (v15 >= a2)
      {
LABEL_98:
        v18 = 0;
      }
      else
      {
        while (1)
        {
          if (*v15 == 93)
            goto LABEL_97;
          v18 = json_parse(&v50, a2, a3, a4 + 2);
          v15 = v50;
          if (!v18)
            goto LABEL_99;
          if (v50 == a2)
            break;
          v31 = *v50;
          if (v31 != 44)
          {
            if (v31 != 93)
              goto LABEL_98;
LABEL_97:
            ++*(_QWORD *)(a3 + 40);
            ++v15;
            v18 = 1;
            goto LABEL_99;
          }
          v15 = v50 + 1;
          v50 = v15;
          if (v15 >= a2)
            goto LABEL_98;
        }
        v18 = 0;
        v15 = a2;
      }
LABEL_99:
      v30 = 0;
      v49 = v15;
      goto LABEL_120;
    }
    if (v16 == 102)
    {
      if (v15 < a2)
      {
        v17 = 0;
        while (v17 != 4)
        {
          if (&v15[++v17] >= a2)
          {
            v18 = 0;
            v15 += v17;
            goto LABEL_89;
          }
        }
        v15 += 4;
        goto LABEL_88;
      }
LABEL_70:
      v18 = 0;
LABEL_89:
      v49 = v15;
      v30 = 1;
      goto LABEL_120;
    }
LABEL_71:
    v49 = v8;
    v33 = v8 + 1;
    if (*v8 != 45)
      v33 = v8;
    if (v33 < a2 && *v33 - 58 >= 0xFFFFFFF6)
    {
      v37 = &v8[(*v8 == 45) + 1];
      while (v37 < a2)
      {
        v38 = *v37++;
        if ((v38 - 58) < 0xFFFFFFF6)
        {
          v33 = v37 - 1;
          v18 = 1;
          goto LABEL_76;
        }
      }
      v18 = 1;
      v33 = a2;
    }
    else
    {
      v18 = 0;
    }
LABEL_76:
    if (v33 != a2)
    {
      v34 = v33 + 1;
      if (*v33 != 46)
        v34 = v33;
      if (v34 < a2 && *v34 - 58 >= 0xFFFFFFF6)
      {
        v35 = &v33[(*v33 == 46) + 1];
        while (v35 < a2)
        {
          v36 = *v35++;
          if ((v36 - 58) < 0xFFFFFFF6)
          {
            v34 = v35 - 1;
            v18 = 1;
            goto LABEL_106;
          }
        }
        v18 = 1;
        v34 = a2;
      }
LABEL_106:
      if (v34 == a2 || !v18)
        goto LABEL_119;
      if ((*v34 | 0x20) != 0x65)
      {
        v18 = 1;
        goto LABEL_119;
      }
      v39 = v34 + 1;
      if (v34 + 1 == a2)
      {
        v18 = 0;
      }
      else
      {
        v40 = *v39;
        if (v40 == 45 || v40 == 43)
          v39 = v34 + 2;
        if (v39 >= a2 || *v39 - 58 < 0xFFFFFFF6)
        {
          v18 = 0;
          v34 = v39;
LABEL_119:
          v49 = v34;
          v30 = 2;
          goto LABEL_120;
        }
        v47 = &a2[~(unint64_t)v39];
        v34 = v39;
        v18 = 1;
        while (v47)
        {
          v48 = *++v34;
          --v47;
          if ((v48 - 58) < 0xFFFFFFF6)
            goto LABEL_119;
        }
        v18 = 1;
      }
    }
    v34 = a2;
    goto LABEL_119;
  }
  v18 = json_parse_string(&v49, a2);
  v30 = 4;
LABEL_120:
  if (v18)
    ++*(_QWORD *)(a3 + 8 * v30);
  v41 = v49;
  if (v49 < a2)
  {
    v42 = a2 - v49;
    while (1)
    {
      v43 = *v41;
      v11 = v43 > 0x20;
      v44 = (1 << v43) & 0x100002600;
      if (v11 || v44 == 0)
        break;
      ++v41;
      if (!--v42)
      {
        v41 = a2;
        break;
      }
    }
  }
  *a1 = v41;
  if (a4)
    v14 = v18;
  else
    v14 = 0;
  if (!a4 && v18)
    return *(_QWORD *)(a3 + 40) || *(_QWORD *)(a3 + 24) != 0;
  return v14;
}

uint64_t json_parse_string(unsigned __int8 **a1, unsigned __int8 *a2)
{
  unsigned __int8 *v2;
  unsigned __int8 *v3;
  uint64_t v4;
  unsigned int v5;
  int v6;
  uint64_t v8;
  int v9;
  unsigned int v10;
  BOOL v11;
  uint64_t v12;

  v2 = *a1;
  if (*a1 >= a2)
  {
LABEL_24:
    v4 = 0;
    goto LABEL_25;
  }
  while (1)
  {
    v3 = v2;
    v5 = *v2++;
    v4 = v5;
    if (v5 != 92)
    {
      if (!(_DWORD)v4)
        goto LABEL_25;
      if ((_DWORD)v4 == 34)
      {
        v4 = 1;
        goto LABEL_25;
      }
      goto LABEL_23;
    }
    if (v2 == a2)
    {
LABEL_26:
      v4 = 0;
      v2 = a2;
      goto LABEL_25;
    }
    v2 = v3 + 2;
    v6 = v3[1];
    if ((v6 - 47) > 0x37 || ((1 << (v6 - 47)) & 0x88200000000001) == 0)
      break;
LABEL_23:
    if (v2 >= a2)
      goto LABEL_24;
  }
  v4 = 0;
  switch(v3[1])
  {
    case 'n':
    case 'r':
    case 't':
      goto LABEL_23;
    case 'o':
    case 'p':
    case 'q':
    case 's':
      goto LABEL_25;
    case 'u':
      if (a2 - v2 < 4)
        goto LABEL_26;
      v8 = 0;
      v2 = v3 + 6;
      break;
    default:
      if (v6 == 34)
        goto LABEL_23;
      goto LABEL_25;
  }
  while (1)
  {
    v9 = v3[v8 + 2];
    if ((v9 - 58) <= 0xFFFFFFF5)
    {
      v10 = v9 - 65;
      v11 = v10 > 0x25;
      v12 = (1 << v10) & 0x3F0000003FLL;
      if (v11 || v12 == 0)
        break;
    }
    if (++v8 == 4)
      goto LABEL_23;
  }
  v4 = 0;
  v2 = &v3[v8 + 3];
LABEL_25:
  *a1 = v2;
  return v4;
}

__CFString *WFLocalizedDisplayNameForContentCategory(void *a1)
{
  void *v1;
  void *v2;
  __CFString *v3;

  WFLocalizedDisplayNameResourceForContentCategory(a1);
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  v2 = v1;
  if (v1)
  {
    objc_msgSend(v1, "localize");
    v3 = (__CFString *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v3 = &stru_24C4E3948;
  }

  return v3;
}

id WFLocalizedDisplayNameResourceForContentCategory(void *a1)
{
  id v1;
  __CFString *v2;
  objc_class *v3;
  __CFString *v4;
  id v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;

  v1 = a1;
  v2 = CFSTR("Controls");
  if ((objc_msgSend(v1, "isEqualToString:", CFSTR("Controls")) & 1) != 0)
    goto LABEL_10;
  v2 = CFSTR("Device");
  if ((objc_msgSend(v1, "isEqualToString:", CFSTR("Device")) & 1) != 0
    || (v2 = CFSTR("Documents"), (objc_msgSend(v1, "isEqualToString:", CFSTR("Documents")) & 1) != 0)
    || (v2 = CFSTR("Location"), (objc_msgSend(v1, "isEqualToString:", CFSTR("Location")) & 1) != 0)
    || (v2 = CFSTR("Media"), (objc_msgSend(v1, "isEqualToString:", CFSTR("Media")) & 1) != 0)
    || (v2 = CFSTR("Scripting"), (objc_msgSend(v1, "isEqualToString:", CFSTR("Scripting")) & 1) != 0)
    || (v2 = CFSTR("Sharing"), (objc_msgSend(v1, "isEqualToString:", CFSTR("Sharing")) & 1) != 0)
    || (v2 = CFSTR("Web"), (objc_msgSend(v1, "isEqualToString:", CFSTR("Web")) & 1) != 0)
    || (v2 = CFSTR("Favorites"), objc_msgSend(v1, "isEqualToString:", CFSTR("Favorites"))))
  {
LABEL_10:
    v3 = (objc_class *)MEMORY[0x24BDD19B8];
    v4 = v2;
    v5 = [v3 alloc];
    objc_msgSend(MEMORY[0x24BDBCEA0], "autoupdatingCurrentLocale");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    WFCurrentBundle();
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "bundleURL");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v9 = (void *)objc_msgSend(v5, "initWithKey:defaultValue:table:locale:bundleURL:", v4, v4, 0, v6, v8);

  }
  else
  {
    v9 = 0;
  }

  return v9;
}

void WFRegisterTypeForItemClass(void *a1, void *a2, void *a3)
{
  id v5;
  id v6;
  uint64_t v7;
  Class v8;
  Class v9;
  int v10;
  int v11;
  int v12;
  int v13;
  NSObject *v14;
  Class v15;
  Class v16;
  int v17;
  const char *v18;
  __int16 v19;
  void *v20;
  __int16 v21;
  id v22;
  __int16 v23;
  uint64_t v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  v5 = a1;
  v6 = a3;
  v7 = objc_msgSend(v6, "objectForKey:", v5);
  v8 = NSClassFromString(CFSTR("WFLinkEntityContentItem"));
  v9 = NSClassFromString(CFSTR("WFLinkEnumerationContentItem"));
  v10 = objc_msgSend(v5, "isEqualToClass:", objc_opt_class());
  v11 = objc_msgSend(v5, "isEqualToClass:", NSClassFromString(CFSTR("WFLinkEnumerationCase")));
  v12 = v10 & objc_msgSend(a2, "isSubclassOfClass:", v8);
  v13 = v11 & objc_msgSend(a2, "isSubclassOfClass:", v9);
  if (v7 && (v12 & 1) == 0 && (v13 & 1) == 0)
  {
    getWFContentGraphLogObject();
    v14 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_FAULT))
    {
      v17 = 136315906;
      v18 = "WFRegisterTypeForItemClass";
      v19 = 2114;
      v20 = a2;
      v21 = 2114;
      v22 = v5;
      v23 = 2114;
      v24 = v7;
      _os_log_impl(&dword_20BBAD000, v14, OS_LOG_TYPE_FAULT, "%s WFContent warning: %{public}@ is trying to register itself for %{public}@, but %{public}@ is already registered.", (uint8_t *)&v17, 0x2Au);
    }

  }
  if (v12)
    v15 = v8;
  else
    v15 = (Class)a2;
  if (v13)
    v16 = v9;
  else
    v16 = v15;
  objc_msgSend(v6, "setObject:forKey:", v16, v5);

}

void WFDyldBulkImageLoadCallback()
{
  do
    __ldaxr(WFShouldRediscoverContentItemClasses);
  while (__stlxr(1u, WFShouldRediscoverContentItemClasses));
}

void sub_20BBBE0D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_20BBBE190(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_20BBBE2F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_20BBBE4B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_20BBBEED0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_20BBBF104(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 112), 8);
  _Unwind_Resume(a1);
}

void sub_20BBBF530(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 112), 8);
  _Unwind_Resume(a1);
}

void sub_20BBBFB38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  _Block_object_dispose(&a29, 8);
  _Unwind_Resume(a1);
}

void sub_20BBBFE80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id getPHAssetResourceClass()
{
  void *v0;
  id v1;
  _QWORD v3[5];
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = 0;
  v5 = &v4;
  v6 = 0x2050000000;
  v0 = (void *)getPHAssetResourceClass_softClass;
  v7 = getPHAssetResourceClass_softClass;
  if (!getPHAssetResourceClass_softClass)
  {
    v3[0] = MEMORY[0x24BDAC760];
    v3[1] = 3221225472;
    v3[2] = __getPHAssetResourceClass_block_invoke;
    v3[3] = &unk_24C4E3118;
    v3[4] = &v4;
    __getPHAssetResourceClass_block_invoke((uint64_t)v3);
    v0 = (void *)v5[3];
  }
  v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_20BBC07D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void __getPHAssetResourceClass_block_invoke(uint64_t a1)
{
  void *v2;
  void *v3;

  PhotosLibrary();
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = objc_getClass("PHAssetResource");
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    getPHAssetResourceClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  }
  else
  {
    objc_msgSend(MEMORY[0x24BDD1448], "currentHandler");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "Class getPHAssetResourceClass(void)_block_invoke");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, CFSTR("WFPhotoMediaContentItem.m"), 42, CFSTR("Unable to find class %s"), "PHAssetResource");

    __break(1u);
  }
}

void *PhotosLibrary()
{
  void *v0;
  void *v2;
  void *v3;

  if (!PhotosLibraryCore_frameworkLibrary)
    PhotosLibraryCore_frameworkLibrary = _sl_dlopen();
  v0 = (void *)PhotosLibraryCore_frameworkLibrary;
  if (!PhotosLibraryCore_frameworkLibrary)
  {
    objc_msgSend(MEMORY[0x24BDD1448], "currentHandler");
    v0 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "void *PhotosLibrary(void)");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v2, CFSTR("WFPhotoMediaContentItem.m"), 37, CFSTR("%s"), 0);

    __break(1u);
    free(v3);
  }
  return v0;
}

id getAVURLAssetClass()
{
  void *v0;
  id v1;
  _QWORD v3[5];
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = 0;
  v5 = &v4;
  v6 = 0x2050000000;
  v0 = (void *)getAVURLAssetClass_softClass;
  v7 = getAVURLAssetClass_softClass;
  if (!getAVURLAssetClass_softClass)
  {
    v3[0] = MEMORY[0x24BDAC760];
    v3[1] = 3221225472;
    v3[2] = __getAVURLAssetClass_block_invoke;
    v3[3] = &unk_24C4E3118;
    v3[4] = &v4;
    __getAVURLAssetClass_block_invoke((uint64_t)v3);
    v0 = (void *)v5[3];
  }
  v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_20BBC0AF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void WFLivePhotoFileType()
{
  void (*v0)(void);
  id v1;
  void *v2;
  void *v3;
  _QWORD v4[5];
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  void *v8;

  v5 = 0;
  v6 = &v5;
  v7 = 0x2020000000;
  v0 = (void (*)(void))getPFCurrentPlatformLivePhotoBundleTypeSymbolLoc_ptr;
  v8 = getPFCurrentPlatformLivePhotoBundleTypeSymbolLoc_ptr;
  if (!getPFCurrentPlatformLivePhotoBundleTypeSymbolLoc_ptr)
  {
    v4[0] = MEMORY[0x24BDAC760];
    v4[1] = 3221225472;
    v4[2] = __getPFCurrentPlatformLivePhotoBundleTypeSymbolLoc_block_invoke;
    v4[3] = &unk_24C4E3118;
    v4[4] = &v5;
    __getPFCurrentPlatformLivePhotoBundleTypeSymbolLoc_block_invoke(v4);
    v0 = (void (*)(void))v6[3];
  }
  _Block_object_dispose(&v5, 8);
  if (v0)
  {
    v0();
    v1 = (id)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    objc_msgSend(MEMORY[0x24BDD1448], "currentHandler");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "UTType *soft_PFCurrentPlatformLivePhotoBundleType(void)");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, CFSTR("WFPhotoMediaContentItem.m"), 59, CFSTR("%s"), dlerror());

    __break(1u);
  }
}

void sub_20BBC0C10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void *__getPFCurrentPlatformLivePhotoBundleTypeSymbolLoc_block_invoke(_QWORD *a1)
{
  void *v2;
  void *result;
  void *v4;

  if (!PhotosFormatsLibraryCore_frameworkLibrary)
    PhotosFormatsLibraryCore_frameworkLibrary = _sl_dlopen();
  v2 = (void *)PhotosFormatsLibraryCore_frameworkLibrary;
  if (!PhotosFormatsLibraryCore_frameworkLibrary)
  {
    objc_msgSend(MEMORY[0x24BDD1448], "currentHandler");
    a1 = (_QWORD *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "void *PhotosFormatsLibrary(void)");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(a1, "handleFailureInFunction:file:lineNumber:description:", v2, CFSTR("WFPhotoMediaContentItem.m"), 58, CFSTR("%s"), 0);

    __break(1u);
    free(v4);
  }
  result = dlsym(v2, "PFCurrentPlatformLivePhotoBundleType");
  *(_QWORD *)(*(_QWORD *)(a1[4] + 8) + 24) = result;
  getPFCurrentPlatformLivePhotoBundleTypeSymbolLoc_ptr = *(_UNKNOWN **)(*(_QWORD *)(a1[4] + 8) + 24);
  return result;
}

void __getAVURLAssetClass_block_invoke(uint64_t a1)
{
  void *v2;
  void *v3;

  AVFoundationLibrary();
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = objc_getClass("AVURLAsset");
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    getAVURLAssetClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  }
  else
  {
    objc_msgSend(MEMORY[0x24BDD1448], "currentHandler");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "Class getAVURLAssetClass(void)_block_invoke");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, CFSTR("WFPhotoMediaContentItem.m"), 63, CFSTR("Unable to find class %s"), "AVURLAsset");

    __break(1u);
  }
}

void *AVFoundationLibrary()
{
  void *v0;
  void *v2;
  void *v3;

  if (!AVFoundationLibraryCore_frameworkLibrary)
    AVFoundationLibraryCore_frameworkLibrary = _sl_dlopen();
  v0 = (void *)AVFoundationLibraryCore_frameworkLibrary;
  if (!AVFoundationLibraryCore_frameworkLibrary)
  {
    objc_msgSend(MEMORY[0x24BDD1448], "currentHandler");
    v0 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "void *AVFoundationLibrary(void)");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v2, CFSTR("WFPhotoMediaContentItem.m"), 61, CFSTR("%s"), 0);

    __break(1u);
    free(v3);
  }
  return v0;
}

uint64_t __Block_byref_object_copy_(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose_(uint64_t a1)
{

}

id getPHImageRequestOptionsClass()
{
  void *v0;
  id v1;
  _QWORD v3[5];
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = 0;
  v5 = &v4;
  v6 = 0x2050000000;
  v0 = (void *)getPHImageRequestOptionsClass_softClass;
  v7 = getPHImageRequestOptionsClass_softClass;
  if (!getPHImageRequestOptionsClass_softClass)
  {
    v3[0] = MEMORY[0x24BDAC760];
    v3[1] = 3221225472;
    v3[2] = __getPHImageRequestOptionsClass_block_invoke;
    v3[3] = &unk_24C4E3118;
    v3[4] = &v4;
    __getPHImageRequestOptionsClass_block_invoke((uint64_t)v3);
    v0 = (void *)v5[3];
  }
  v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_20BBC11BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id getPHVideoRequestOptionsClass()
{
  void *v0;
  id v1;
  _QWORD v3[5];
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = 0;
  v5 = &v4;
  v6 = 0x2050000000;
  v0 = (void *)getPHVideoRequestOptionsClass_softClass;
  v7 = getPHVideoRequestOptionsClass_softClass;
  if (!getPHVideoRequestOptionsClass_softClass)
  {
    v3[0] = MEMORY[0x24BDAC760];
    v3[1] = 3221225472;
    v3[2] = __getPHVideoRequestOptionsClass_block_invoke;
    v3[3] = &unk_24C4E3118;
    v3[4] = &v4;
    __getPHVideoRequestOptionsClass_block_invoke((uint64_t)v3);
    v0 = (void *)v5[3];
  }
  v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_20BBC13C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void __getPHLivePhotoRequestOptionsClass_block_invoke(uint64_t a1)
{
  void *v2;
  void *v3;

  PhotosLibrary();
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = objc_getClass("PHLivePhotoRequestOptions");
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    getPHLivePhotoRequestOptionsClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  }
  else
  {
    objc_msgSend(MEMORY[0x24BDD1448], "currentHandler");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "Class getPHLivePhotoRequestOptionsClass(void)_block_invoke");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, CFSTR("WFPhotoMediaContentItem.m"), 51, CFSTR("Unable to find class %s"), "PHLivePhotoRequestOptions");

    __break(1u);
  }
}

void getPHImageErrorKey()
{
  id *v0;
  void *v1;
  id v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;

  v5 = 0;
  v6 = &v5;
  v7 = 0x2020000000;
  v0 = (id *)getPHImageErrorKeySymbolLoc_ptr;
  v8 = getPHImageErrorKeySymbolLoc_ptr;
  if (!getPHImageErrorKeySymbolLoc_ptr)
  {
    v1 = PhotosLibrary();
    v0 = (id *)dlsym(v1, "PHImageErrorKey");
    v6[3] = (uint64_t)v0;
    getPHImageErrorKeySymbolLoc_ptr = (uint64_t)v0;
  }
  _Block_object_dispose(&v5, 8);
  if (v0)
  {
    v2 = *v0;
  }
  else
  {
    objc_msgSend(MEMORY[0x24BDD1448], "currentHandler");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "NSString *getPHImageErrorKey(void)");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, CFSTR("WFPhotoMediaContentItem.m"), 55, CFSTR("%s"), dlerror());

    __break(1u);
  }
}

void sub_20BBC1700(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void __getPHVideoRequestOptionsClass_block_invoke(uint64_t a1)
{
  void *v2;
  void *v3;

  PhotosLibrary();
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = objc_getClass("PHVideoRequestOptions");
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    getPHVideoRequestOptionsClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  }
  else
  {
    objc_msgSend(MEMORY[0x24BDD1448], "currentHandler");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "Class getPHVideoRequestOptionsClass(void)_block_invoke");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, CFSTR("WFPhotoMediaContentItem.m"), 50, CFSTR("Unable to find class %s"), "PHVideoRequestOptions");

    __break(1u);
  }
}

void __getPHImageRequestOptionsClass_block_invoke(uint64_t a1)
{
  void *v2;
  void *v3;

  PhotosLibrary();
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = objc_getClass("PHImageRequestOptions");
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    getPHImageRequestOptionsClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  }
  else
  {
    objc_msgSend(MEMORY[0x24BDD1448], "currentHandler");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "Class getPHImageRequestOptionsClass(void)_block_invoke");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, CFSTR("WFPhotoMediaContentItem.m"), 49, CFSTR("Unable to find class %s"), "PHImageRequestOptions");

    __break(1u);
  }
}

void __getPHLivePhotoClass_block_invoke(uint64_t a1)
{
  void *v2;
  void *v3;

  PhotosLibrary();
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = objc_getClass("PHLivePhoto");
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    getPHLivePhotoClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  }
  else
  {
    objc_msgSend(MEMORY[0x24BDD1448], "currentHandler");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "Class getPHLivePhotoClass(void)_block_invoke");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, CFSTR("WFPhotoMediaContentItem.m"), 44, CFSTR("Unable to find class %s"), "PHLivePhoto");

    __break(1u);
  }
}

void __getAVAssetClass_block_invoke(uint64_t a1)
{
  void *v2;
  void *v3;

  AVFoundationLibrary();
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = objc_getClass("AVAsset");
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    getAVAssetClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  }
  else
  {
    objc_msgSend(MEMORY[0x24BDD1448], "currentHandler");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "Class getAVAssetClass(void)_block_invoke");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, CFSTR("WFPhotoMediaContentItem.m"), 62, CFSTR("Unable to find class %s"), "AVAsset");

    __break(1u);
  }
}

void __getPHAssetResourceRequestOptionsClass_block_invoke(uint64_t a1)
{
  void *v2;
  void *v3;

  PhotosLibrary();
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = objc_getClass("PHAssetResourceRequestOptions");
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    getPHAssetResourceRequestOptionsClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  }
  else
  {
    objc_msgSend(MEMORY[0x24BDD1448], "currentHandler");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "Class getPHAssetResourceRequestOptionsClass(void)_block_invoke");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, CFSTR("WFPhotoMediaContentItem.m"), 52, CFSTR("Unable to find class %s"), "PHAssetResourceRequestOptions");

    __break(1u);
  }
}

id getPHAssetClass()
{
  void *v0;
  id v1;
  _QWORD v3[5];
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = 0;
  v5 = &v4;
  v6 = 0x2050000000;
  v0 = (void *)getPHAssetClass_softClass;
  v7 = getPHAssetClass_softClass;
  if (!getPHAssetClass_softClass)
  {
    v3[0] = MEMORY[0x24BDAC760];
    v3[1] = 3221225472;
    v3[2] = __getPHAssetClass_block_invoke;
    v3[3] = &unk_24C4E3118;
    v3[4] = &v4;
    __getPHAssetClass_block_invoke((uint64_t)v3);
    v0 = (void *)v5[3];
  }
  v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_20BBC2448(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void __getPHAssetClass_block_invoke(uint64_t a1)
{
  void *v2;
  void *v3;

  PhotosLibrary();
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = objc_getClass("PHAsset");
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    getPHAssetClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  }
  else
  {
    objc_msgSend(MEMORY[0x24BDD1448], "currentHandler");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "Class getPHAssetClass(void)_block_invoke");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, CFSTR("WFPhotoMediaContentItem.m"), 40, CFSTR("Unable to find class %s"), "PHAsset");

    __break(1u);
  }
}

void sub_20BBC2770(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void __getPHAssetResourceManagerClass_block_invoke(uint64_t a1)
{
  void *v2;
  void *v3;

  PhotosLibrary();
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = objc_getClass("PHAssetResourceManager");
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    getPHAssetResourceManagerClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  }
  else
  {
    objc_msgSend(MEMORY[0x24BDD1448], "currentHandler");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "Class getPHAssetResourceManagerClass(void)_block_invoke");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, CFSTR("WFPhotoMediaContentItem.m"), 46, CFSTR("Unable to find class %s"), "PHAssetResourceManager");

    __break(1u);
  }
}

void __getPHImageManagerClass_block_invoke(uint64_t a1)
{
  void *v2;
  void *v3;

  PhotosLibrary();
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = objc_getClass("PHImageManager");
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    getPHImageManagerClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  }
  else
  {
    objc_msgSend(MEMORY[0x24BDD1448], "currentHandler");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "Class getPHImageManagerClass(void)_block_invoke");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, CFSTR("WFPhotoMediaContentItem.m"), 45, CFSTR("Unable to find class %s"), "PHImageManager");

    __break(1u);
  }
}

void sub_20BBC34DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  _Block_object_dispose(&a29, 8);
  _Unwind_Resume(a1);
}

void sub_20BBC4288(_Unwind_Exception *a1)
{
  _Block_object_dispose(&STACK[0x2E0], 8);
  _Unwind_Resume(a1);
}

Class __getCLLocationClass_block_invoke(uint64_t a1)
{
  Class result;
  void *v3;
  void *v4;
  void *v5;

  if (!CoreLocationLibraryCore_frameworkLibrary)
    CoreLocationLibraryCore_frameworkLibrary = _sl_dlopen();
  if (!CoreLocationLibraryCore_frameworkLibrary)
  {
    objc_msgSend(MEMORY[0x24BDD1448], "currentHandler");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "void *CoreLocationLibrary(void)");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, CFSTR("WFPhotoMediaContentItem.m"), 67, CFSTR("%s"), 0);

    goto LABEL_8;
  }
  result = objc_getClass("CLLocation");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    objc_msgSend(MEMORY[0x24BDD1448], "currentHandler");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "Class getCLLocationClass(void)_block_invoke");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v5, CFSTR("WFPhotoMediaContentItem.m"), 68, CFSTR("Unable to find class %s"), "CLLocation");

LABEL_8:
    __break(1u);
  }
  getCLLocationClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

id getPHAssetCollectionClass()
{
  void *v0;
  id v1;
  _QWORD v3[5];
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = 0;
  v5 = &v4;
  v6 = 0x2050000000;
  v0 = (void *)getPHAssetCollectionClass_softClass;
  v7 = getPHAssetCollectionClass_softClass;
  if (!getPHAssetCollectionClass_softClass)
  {
    v3[0] = MEMORY[0x24BDAC760];
    v3[1] = 3221225472;
    v3[2] = __getPHAssetCollectionClass_block_invoke;
    v3[3] = &unk_24C4E3118;
    v3[4] = &v4;
    __getPHAssetCollectionClass_block_invoke((uint64_t)v3);
    v0 = (void *)v5[3];
  }
  v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_20BBC4ED8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void __getPHAssetCollectionClass_block_invoke(uint64_t a1)
{
  void *v2;
  void *v3;

  PhotosLibrary();
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = objc_getClass("PHAssetCollection");
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    getPHAssetCollectionClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  }
  else
  {
    objc_msgSend(MEMORY[0x24BDD1448], "currentHandler");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "Class getPHAssetCollectionClass(void)_block_invoke");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, CFSTR("WFPhotoMediaContentItem.m"), 41, CFSTR("Unable to find class %s"), "PHAssetCollection");

    __break(1u);
  }
}

void __getPHPhotoLibraryClass_block_invoke(uint64_t a1)
{
  void *v2;
  void *v3;

  PhotosLibrary();
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = objc_getClass("PHPhotoLibrary");
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    getPHPhotoLibraryClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  }
  else
  {
    objc_msgSend(MEMORY[0x24BDD1448], "currentHandler");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "Class getPHPhotoLibraryClass(void)_block_invoke");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, CFSTR("WFPhotoMediaContentItem.m"), 43, CFSTR("Unable to find class %s"), "PHPhotoLibrary");

    __break(1u);
  }
}

id WFImagePropertyNameAlbum()
{
  return WFLocalizedContentPropertyNameMarkerWithContext(CFSTR("Album"), (uint64_t)CFSTR("Image Content Item"));
}

id WFImagePropertyNameWidth()
{
  return WFLocalizedContentPropertyNameMarker(CFSTR("Width"));
}

id WFImagePropertyNameHeight()
{
  return WFLocalizedContentPropertyNameMarker(CFSTR("Height"));
}

id WFImagePropertyNameDateTaken()
{
  return WFLocalizedContentPropertyNameMarker(CFSTR("Date Taken"));
}

id WFImagePropertyNameTimeTaken()
{
  return WFLocalizedContentPropertyNameMarker(CFSTR("Time Taken"));
}

id WFImagePropertyNameMediaType()
{
  return WFLocalizedContentPropertyNameMarker(CFSTR("Media Type"));
}

id WFImagePropertyNamePhotoType()
{
  return WFLocalizedContentPropertyNameMarker(CFSTR("Photo Type"));
}

id WFImagePropertyNameIsScreenshot()
{
  return WFLocalizedContentPropertyNameMarker(CFSTR("Is a Screenshot"));
}

id WFImagePropertyNameIsScreenRecording()
{
  return WFLocalizedContentPropertyNameMarker(CFSTR("Is a Screen Recording"));
}

id WFImagePropertyNameLocation()
{
  return WFLocalizedContentPropertyNameMarker(CFSTR("Location"));
}

id WFImagePropertyNameOrientation()
{
  return WFLocalizedContentPropertyNameMarker(CFSTR("Orientation"));
}

id WFImagePropertyNameCameraMake()
{
  return WFLocalizedContentPropertyNameMarker(CFSTR("Camera Make"));
}

id WFImagePropertyNameCameraModel()
{
  return WFLocalizedContentPropertyNameMarker(CFSTR("Camera Model"));
}

id WFImagePropertyNameMetadataDictionary()
{
  return WFLocalizedContentPropertyNameMarker(CFSTR("Metadata Dictionary"));
}

id WFImagePropertyNameIsHidden()
{
  return WFLocalizedContentPropertyNameMarker(CFSTR("Is Hidden"));
}

id WFImagePropertyNameIsFavorite()
{
  return WFLocalizedContentPropertyNameMarker(CFSTR("Is Favorite"));
}

id WFPhotoLibraryMediaTypeImage()
{
  return WFLocalizedContentPropertyPossibleValueMarker(CFSTR("Image"));
}

id WFPhotoLibraryMediaTypeVideo()
{
  return WFLocalizedContentPropertyPossibleValueMarker(CFSTR("Video"));
}

id WFPhotoLibraryMediaTypeAudio()
{
  return WFLocalizedContentPropertyPossibleValueMarker(CFSTR("Audio"));
}

id WFPhotoLibraryPossibleMediaTypes()
{
  void *v0;
  void *v1;
  void *v2;
  void *v3;
  _QWORD v5[4];

  v5[3] = *MEMORY[0x24BDAC8D0];
  WFLocalizedContentPropertyPossibleValueMarker(CFSTR("Image"));
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  v5[0] = v0;
  WFLocalizedContentPropertyPossibleValueMarker(CFSTR("Video"));
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  v5[1] = v1;
  WFLocalizedContentPropertyPossibleValueMarker(CFSTR("Audio"));
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v5[2] = v2;
  objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:count:", v5, 3);
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  return v3;
}

id WFPhotoLibraryPhotoTypeHDR()
{
  return WFLocalizedContentPropertyPossibleValueMarker(CFSTR("HDR"));
}

id WFPhotoLibraryPhotoTypePanorama()
{
  return WFLocalizedContentPropertyPossibleValueMarker(CFSTR("Panorama"));
}

id WFPhotoLibraryPhotoTypeBurst()
{
  return WFLocalizedContentPropertyPossibleValueMarker(CFSTR("Burst"));
}

id WFPhotoLibraryPhotoTypeLivePhoto()
{
  return WFLocalizedContentPropertyPossibleValueMarker(CFSTR("Live Photo"));
}

id WFPhotoLibraryPossiblePhotoTypes()
{
  void *v0;
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  _QWORD v6[5];

  v6[4] = *MEMORY[0x24BDAC8D0];
  WFLocalizedContentPropertyPossibleValueMarker(CFSTR("HDR"));
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  v6[0] = v0;
  WFLocalizedContentPropertyPossibleValueMarker(CFSTR("Panorama"));
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  v6[1] = v1;
  WFLocalizedContentPropertyPossibleValueMarker(CFSTR("Burst"));
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v6[2] = v2;
  WFLocalizedContentPropertyPossibleValueMarker(CFSTR("Live Photo"));
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v6[3] = v3;
  objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:count:", v6, 4);
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  return v4;
}

void WFImageSizeFromMetadata(void *a1)
{
  uint64_t v1;
  id v2;
  void *v3;
  void *v4;

  v1 = *MEMORY[0x24BDD96C8];
  v2 = a1;
  objc_msgSend(v2, "objectForKey:", v1);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "doubleValue");
  objc_msgSend(v2, "objectForKey:", *MEMORY[0x24BDD96C0]);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "doubleValue");

  WFImageOrientationFromMetadata(v2);
}

uint64_t WFImageOrientationFromMetadata(void *a1)
{
  void *v1;
  uint64_t v2;

  objc_msgSend(a1, "objectForKey:", *MEMORY[0x24BDD9698]);
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  v2 = objc_msgSend(v1, "intValue");

  return v2;
}

id WFImageDateTakenFromMetadata(void *a1)
{
  void *v1;
  id v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  objc_msgSend(a1, "objectForKey:", *MEMORY[0x24BDD9470]);
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  v2 = objc_alloc_init(MEMORY[0x24BDD1500]);
  objc_msgSend(v2, "setDateFormat:", CFSTR("yyyy:MM:dd HH:mm:ss"));
  objc_msgSend(MEMORY[0x24BDBCF38], "systemTimeZone");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "setTimeZone:", v3);

  objc_msgSend(v1, "objectForKey:", *MEMORY[0x24BDD9468]);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "dateFromString:", v4);
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  if (!v5)
  {
    objc_msgSend(v1, "objectForKey:", *MEMORY[0x24BDD9460]);
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "dateFromString:", v6);
    v5 = (void *)objc_claimAutoreleasedReturnValue();

  }
  return v5;
}

id WFImageMakeFromMetadata(void *a1)
{
  void *v1;
  void *v2;

  objc_msgSend(a1, "objectForKey:", *MEMORY[0x24BDD96E8]);
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "objectForKey:", *MEMORY[0x24BDD9700]);
  v2 = (void *)objc_claimAutoreleasedReturnValue();

  return v2;
}

id WFImageModelFromMetadata(void *a1)
{
  void *v1;
  void *v2;

  objc_msgSend(a1, "objectForKey:", *MEMORY[0x24BDD96E8]);
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "objectForKey:", *MEMORY[0x24BDD9708]);
  v2 = (void *)objc_claimAutoreleasedReturnValue();

  return v2;
}

void WFImageLocationTakenFromMetadata(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  void *v4;
  double v5;
  double v6;
  void *v7;
  double v8;
  double v9;
  void *v10;
  int v11;
  void *v12;
  int v13;
  void *v14;
  void *v15;
  double v16;
  double v17;
  double v18;
  void *v19;
  void *v20;
  void *v21;
  id v22;
  void *v23;
  void *v24;
  void *v25;
  double v26;
  double v27;
  void *v28;
  objc_class *v29;
  void *v30;
  id v31;
  void *v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;

  v1 = a1;
  objc_msgSend(v1, "objectForKey:", *MEMORY[0x24BDD95D0]);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = v2;
  if (!v2)
  {
    v30 = 0;
LABEL_17:

    v31 = v30;
    return;
  }
  objc_msgSend(v2, "objectForKey:", *MEMORY[0x24BDD95D8]);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "doubleValue");
  v6 = v5;

  objc_msgSend(v3, "objectForKey:", *MEMORY[0x24BDD95E8]);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "doubleValue");
  v9 = v8;

  objc_msgSend(v3, "objectForKey:", *MEMORY[0x24BDD95E0]);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  v11 = objc_msgSend(v10, "isEqualToString:", CFSTR("S"));

  if (v11)
    v6 = -v6;
  objc_msgSend(v3, "objectForKey:", *MEMORY[0x24BDD95F0]);
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  v13 = objc_msgSend(v12, "isEqualToString:", CFSTR("W"));

  if (v13)
    v9 = -v9;
  v34 = 0;
  v35 = (uint64_t)&v34;
  v36 = 0x2020000000;
  v14 = getCLLocationCoordinate2DMakeSymbolLoc_ptr;
  v37 = getCLLocationCoordinate2DMakeSymbolLoc_ptr;
  if (!getCLLocationCoordinate2DMakeSymbolLoc_ptr)
  {
    v15 = CoreLocationLibrary();
    v14 = dlsym(v15, "CLLocationCoordinate2DMake");
    *(_QWORD *)(v35 + 24) = v14;
    getCLLocationCoordinate2DMakeSymbolLoc_ptr = v14;
  }
  _Block_object_dispose(&v34, 8);
  if (v14)
  {
    v16 = ((double (*)(double, double))v14)(v6, v9);
    v18 = v17;
    objc_msgSend(v3, "objectForKey:", *MEMORY[0x24BDD95F8]);
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "objectForKey:", *MEMORY[0x24BDD95C8]);
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithFormat:", CFSTR("%@ %@"), v20, v19);
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    v22 = objc_alloc_init(MEMORY[0x24BDD1500]);
    objc_msgSend(v22, "setDateFormat:", CFSTR("yyyy:MM:dd HH:mm:ss"));
    objc_msgSend(MEMORY[0x24BDBCF38], "timeZoneWithName:", CFSTR("UTC"));
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v22, "setTimeZone:", v23);

    if (objc_msgSend(v20, "length") && objc_msgSend(v19, "length"))
    {
      objc_msgSend(v22, "dateFromString:", v21);
      v24 = (void *)objc_claimAutoreleasedReturnValue();
    }
    else
    {
      v24 = 0;
    }
    objc_msgSend(v3, "objectForKey:", *MEMORY[0x24BDD95C0]);
    v25 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v25, "doubleValue");
    v27 = v26;

    v39 = 0;
    v40 = &v39;
    v41 = 0x2050000000;
    v28 = (void *)getCLLocationClass_softClass_663;
    v42 = getCLLocationClass_softClass_663;
    if (!getCLLocationClass_softClass_663)
    {
      v34 = MEMORY[0x24BDAC760];
      v35 = 3221225472;
      v36 = (uint64_t)__getCLLocationClass_block_invoke_664;
      v37 = &unk_24C4E3118;
      v38 = &v39;
      __getCLLocationClass_block_invoke_664((uint64_t)&v34);
      v28 = (void *)v40[3];
    }
    v29 = objc_retainAutorelease(v28);
    _Block_object_dispose(&v39, 8);
    v30 = (void *)objc_msgSend([v29 alloc], "initWithCoordinate:altitude:horizontalAccuracy:verticalAccuracy:timestamp:", v24, v16, v18, v27, 0.0, 0.0);

    goto LABEL_17;
  }
  objc_msgSend(MEMORY[0x24BDD1448], "currentHandler");
  v32 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "CLLocationCoordinate2D WFCLLocationCoordinate2DMake(CLLocationDegrees, CLLocationDegrees)");
  v33 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v32, "handleFailureInFunction:file:lineNumber:description:", v33, CFSTR("WFImageProperties.m"), 15, CFSTR("%s"), dlerror());

  __break(1u);
}

void sub_20BBC5984(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void *CoreLocationLibrary()
{
  void *v0;
  void *v2;
  void *v3;

  if (!CoreLocationLibraryCore_frameworkLibrary_667)
    CoreLocationLibraryCore_frameworkLibrary_667 = _sl_dlopen();
  v0 = (void *)CoreLocationLibraryCore_frameworkLibrary_667;
  if (!CoreLocationLibraryCore_frameworkLibrary_667)
  {
    objc_msgSend(MEMORY[0x24BDD1448], "currentHandler");
    v0 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "void *CoreLocationLibrary(void)");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v2, CFSTR("WFImageProperties.m"), 13, CFSTR("%s"), 0);

    __break(1u);
    free(v3);
  }
  return v0;
}

void __getCLLocationClass_block_invoke_664(uint64_t a1)
{
  void *v2;
  void *v3;

  CoreLocationLibrary();
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = objc_getClass("CLLocation");
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    getCLLocationClass_softClass_663 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  }
  else
  {
    objc_msgSend(MEMORY[0x24BDD1448], "currentHandler");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "Class getCLLocationClass(void)_block_invoke");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, CFSTR("WFImageProperties.m"), 14, CFSTR("Unable to find class %s"), "CLLocation");

    __break(1u);
  }
}

id WFImagePossibleOrientationStrings()
{
  void *v0;
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  _QWORD v10[9];

  v10[8] = *MEMORY[0x24BDAC8D0];
  WFLocalizedContentPropertyPossibleValueMarker(CFSTR("Up"));
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  v10[0] = v0;
  WFLocalizedContentPropertyPossibleValueMarker(CFSTR("Down"));
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  v10[1] = v1;
  WFLocalizedContentPropertyPossibleValueMarker(CFSTR("Left"));
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v10[2] = v2;
  WFLocalizedContentPropertyPossibleValueMarker(CFSTR("Right"));
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v10[3] = v3;
  WFLocalizedContentPropertyPossibleValueMarker(CFSTR("Up Mirrored"));
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v10[4] = v4;
  WFLocalizedContentPropertyPossibleValueMarker(CFSTR("Down Mirrored"));
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v10[5] = v5;
  WFLocalizedContentPropertyPossibleValueMarker(CFSTR("Left Mirrored"));
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v10[6] = v6;
  WFLocalizedContentPropertyPossibleValueMarker(CFSTR("Right Mirrored"));
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v10[7] = v7;
  objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:count:", v10, 8);
  v8 = (void *)objc_claimAutoreleasedReturnValue();

  return v8;
}

id WFImageStringFromOrientation(int a1)
{
  if ((a1 - 1) > 7)
    return 0;
  WFLocalizedContentPropertyPossibleValueMarker(off_24C4DBBD8[a1 - 1]);
  return (id)objc_claimAutoreleasedReturnValue();
}

void sub_20BBC75A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class __getNSTextAttachmentClass_block_invoke(uint64_t a1)
{
  Class result;
  void *v3;
  void *v4;
  void *v5;

  if (!UIFoundationLibraryCore_frameworkLibrary)
    UIFoundationLibraryCore_frameworkLibrary = _sl_dlopen();
  if (!UIFoundationLibraryCore_frameworkLibrary)
  {
    objc_msgSend(MEMORY[0x24BDD1448], "currentHandler");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "void *UIFoundationLibrary(void)");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, CFSTR("WFImageContentItem.m"), 36, CFSTR("%s"), 0);

    goto LABEL_8;
  }
  result = objc_getClass("NSTextAttachment");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    objc_msgSend(MEMORY[0x24BDD1448], "currentHandler");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "Class getNSTextAttachmentClass(void)_block_invoke");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v5, CFSTR("WFImageContentItem.m"), 37, CFSTR("Unable to find class %s"), "NSTextAttachment");

LABEL_8:
    __break(1u);
  }
  getNSTextAttachmentClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

void sub_20BBC8D98(_Unwind_Exception *a1)
{
  _Block_object_dispose(&STACK[0x248], 8);
  _Unwind_Resume(a1);
}

Class __getCLLocationClass_block_invoke_805(uint64_t a1)
{
  Class result;
  void *v3;
  void *v4;
  void *v5;

  if (!CoreLocationLibraryCore_frameworkLibrary_806)
    CoreLocationLibraryCore_frameworkLibrary_806 = _sl_dlopen();
  if (!CoreLocationLibraryCore_frameworkLibrary_806)
  {
    objc_msgSend(MEMORY[0x24BDD1448], "currentHandler");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "void *CoreLocationLibrary(void)");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, CFSTR("WFImageContentItem.m"), 33, CFSTR("%s"), 0);

    goto LABEL_8;
  }
  result = objc_getClass("CLLocation");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    objc_msgSend(MEMORY[0x24BDD1448], "currentHandler");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "Class getCLLocationClass(void)_block_invoke");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v5, CFSTR("WFImageContentItem.m"), 34, CFSTR("Unable to find class %s"), "CLLocation");

LABEL_8:
    __break(1u);
  }
  getCLLocationClass_softClass_804 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

id WFCreateArchiveWithFiles(void *a1, void *a2, void *a3, _QWORD *a4)
{
  id v7;
  id v8;
  id v9;
  void *v10;
  uint64_t v11;
  void *v12;
  id v13;
  void *v14;
  void *v15;
  WFArchiveWriter *v16;
  void *v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t i;
  void *v30;
  id v31;
  id v32;
  void *v33;
  id v34;
  uint64_t v35;
  void *v36;
  id v37;
  id v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  uint64_t v43;
  id v44;
  id v45;
  void *j;
  id v47;
  int v48;
  void *v49;
  void *v50;
  void *v52;
  void *v53;
  void *v54;
  void *v55;
  void *v56;
  void *v57;
  id v58;
  uint64_t v59;
  id v60;
  id v61;
  void *v62;
  void *v63;
  id v64;
  void *v65;
  void *v66;
  id v67;
  id v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  z_stream strm;
  _BYTE v78[128];
  _BYTE v79[128];
  uint64_t v80;

  v80 = *MEMORY[0x24BDAC8D0];
  v7 = a1;
  v8 = a2;
  v9 = a3;
  if (!objc_msgSend(v8, "length"))
  {
    if (objc_msgSend(v9, "isEqualToString:", CFSTR("gz")) && objc_msgSend(v7, "count") == 1)
    {
      objc_msgSend(v7, "firstObject");
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v10, "filename");
      v11 = objc_claimAutoreleasedReturnValue();
    }
    else
    {
      objc_msgSend(v7, "firstObject");
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v10, "wfName");
      v11 = objc_claimAutoreleasedReturnValue();
    }
    v12 = (void *)v11;

    v8 = v12;
  }
  v13 = v9;
  +[WFFileRepresentation sanitizedFilename:withExtension:](WFFileRepresentation, "sanitizedFilename:withExtension:", v8, v13);
  v14 = (void *)objc_claimAutoreleasedReturnValue();

  +[WFTemporaryFileManager proposedTemporaryFileURLForFilename:](WFTemporaryFileManager, "proposedTemporaryFileURLForFilename:", v14);
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  v16 = -[WFArchiveWriter initWithDestinationURL:format:error:]([WFArchiveWriter alloc], "initWithDestinationURL:format:error:", v15, v13, a4);
  if (v16)
  {
    v17 = (void *)objc_opt_new();
    v73 = 0u;
    v74 = 0u;
    v75 = 0u;
    v76 = 0u;
    v67 = v7;
    v18 = v7;
    v19 = objc_msgSend(v18, "countByEnumeratingWithState:objects:count:", &v73, v79, 16);
    if (v19)
    {
      v20 = v19;
      v21 = *(_QWORD *)v74;
      v61 = v13;
      v62 = v14;
      v64 = v8;
      v65 = v15;
      v59 = *(_QWORD *)v74;
      do
      {
        v22 = 0;
        do
        {
          if (*(_QWORD *)v74 != v21)
            objc_enumerationMutation(v18);
          v23 = *(_QWORD *)(*((_QWORD *)&v73 + 1) + 8 * v22);
          v69 = 0u;
          v70 = 0u;
          v71 = 0u;
          v72 = 0u;
          v24 = v17;
          +[WFArchiveEntry archiveEntriesWithTopLevelFileRepresentation:usedFilenames:](WFArchiveEntry, "archiveEntriesWithTopLevelFileRepresentation:usedFilenames:", v23, v17);
          v25 = (void *)objc_claimAutoreleasedReturnValue();
          v26 = objc_msgSend(v25, "countByEnumeratingWithState:objects:count:", &v69, v78, 16);
          if (v26)
          {
            v27 = v26;
            v28 = *(_QWORD *)v70;
            while (2)
            {
              for (i = 0; i != v27; ++i)
              {
                if (*(_QWORD *)v70 != v28)
                  objc_enumerationMutation(v25);
                if (!-[WFArchiveWriter writeArchiveEntry:error:](v16, "writeArchiveEntry:error:", *(_QWORD *)(*((_QWORD *)&v69 + 1) + 8 * i), a4))
                {

                  v30 = 0;
                  v15 = v65;
                  v7 = v67;
                  v14 = v62;
                  v8 = v64;
                  v13 = v61;
                  v17 = v24;
                  goto LABEL_57;
                }
              }
              v27 = objc_msgSend(v25, "countByEnumeratingWithState:objects:count:", &v69, v78, 16);
              if (v27)
                continue;
              break;
            }
          }

          ++v22;
          v8 = v64;
          v15 = v65;
          v17 = v24;
          v21 = v59;
        }
        while (v22 != v20);
        v20 = objc_msgSend(v18, "countByEnumeratingWithState:objects:count:", &v73, v79, 16);
        v13 = v61;
        v14 = v62;
      }
      while (v20);
    }

    if (-[WFArchiveWriter finishWithError:](v16, "finishWithError:", a4))
    {
      +[WFFileRepresentation fileWithURL:options:ofType:](WFFileRepresentation, "fileWithURL:options:ofType:", v15, 1, 0);
      v30 = (void *)objc_claimAutoreleasedReturnValue();
    }
    else
    {
      v30 = 0;
    }
    v7 = v67;
    goto LABEL_57;
  }
  if (objc_msgSend(v13, "isEqualToString:", CFSTR("gz")) && objc_msgSend(v7, "count") == 1)
  {
    if (a4)
      *a4 = 0;
    objc_msgSend(v7, "firstObject");
    v31 = (id)objc_claimAutoreleasedReturnValue();
    v32 = v15;
    v60 = v31;
    if (!v31)
    {
      objc_msgSend(MEMORY[0x24BDD1448], "currentHandler");
      v52 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "WFFileRepresentation * _Nullable WFGZipCompressFile(WFFileRepresentation * _Nonnull __strong, NSURL * _Nonnull __strong, NSError *__autoreleasing  _Nullable * _Nullable)");
      v53 = v15;
      v54 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v52, "handleFailureInFunction:file:lineNumber:description:", v54, CFSTR("WFArchiveUtilities.m"), 20, CFSTR("Invalid parameter not satisfying: %@"), CFSTR("file"));

      v15 = v53;
      v31 = 0;
    }
    if ((objc_msgSend(v32, "isFileURL") & 1) == 0)
    {
      objc_msgSend(MEMORY[0x24BDD1448], "currentHandler");
      v55 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "WFFileRepresentation * _Nullable WFGZipCompressFile(WFFileRepresentation * _Nonnull __strong, NSURL * _Nonnull __strong, NSError *__autoreleasing  _Nullable * _Nullable)");
      v56 = v15;
      v57 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v55, "handleFailureInFunction:file:lineNumber:description:", v57, CFSTR("WFArchiveUtilities.m"), 21, CFSTR("Invalid parameter not satisfying: %@"), CFSTR("outputURL.isFileURL"));

      v15 = v56;
      v31 = v60;
    }
    if (objc_msgSend(v31, "representationType"))
      objc_msgSend(v31, "mappedData");
    else
      objc_msgSend(v31, "data");
    v33 = (void *)objc_claimAutoreleasedReturnValue();
    memset(&strm.avail_in, 0, 104);
    strm.avail_in = objc_msgSend(v33, "length");
    v34 = objc_retainAutorelease(v33);
    strm.next_in = (Bytef *)objc_msgSend(v34, "bytes");
    strm.avail_out = 0;
    v68 = objc_retainAutorelease(v32);
    v35 = open((const char *)objc_msgSend(v68, "fileSystemRepresentation"), 1538, 420);
    if ((_DWORD)v35 == -1)
    {
      if (a4)
      {
        v37 = v34;
        v38 = objc_alloc(MEMORY[0x24BDD1540]);
        v39 = v15;
        v40 = *MEMORY[0x24BDD1128];
        v41 = *__error();
        v42 = v38;
        v34 = v37;
        v43 = v40;
        v15 = v39;
        v30 = 0;
        *a4 = (id)objc_msgSend(v42, "initWithDomain:code:userInfo:", v43, v41, 0);
      }
      else
      {
        v30 = 0;
      }
      v17 = v60;
    }
    else
    {
      v36 = (void *)objc_msgSend(objc_alloc(MEMORY[0x24BDD1578]), "initWithFileDescriptor:closeOnDealloc:", v35, 1);
      if (deflateInit2_(&strm, -1, 8, 31, 8, 0, "1.2.12", 112))
      {
        v30 = 0;
        v17 = v60;
      }
      else
      {
        v58 = v34;
        v66 = v15;
        v63 = v14;
        v44 = v8;
        v45 = v7;
        for (j = (void *)objc_msgSend(objc_alloc(MEMORY[0x24BDBCEC8]), "initWithLength:", 0x4000);
              ;
              objc_msgSend(j, "setLength:", objc_msgSend(j, "length") + 0x4000))
        {
          do
          {
            v47 = objc_retainAutorelease(j);
            strm.next_out = (Bytef *)objc_msgSend(v47, "mutableBytes");
            strm.avail_out = objc_msgSend(v47, "length");
            v48 = deflate(&strm, 4);
            objc_msgSend(v47, "subdataWithRange:", 0, strm.total_out - objc_msgSend(v36, "offsetInFile"));
            v49 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v36, "writeData:", v49);

          }
          while (!v48);
          if (v48 != -5)
            break;
        }
        deflateEnd(&strm);
        if (v48 == 1)
        {
          +[WFFileRepresentation fileWithURL:options:ofType:](WFFileRepresentation, "fileWithURL:options:ofType:", v68, 1, 0);
          v30 = (void *)objc_claimAutoreleasedReturnValue();
        }
        else
        {
          objc_msgSend(MEMORY[0x24BDD1580], "defaultManager");
          v50 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v50, "removeItemAtURL:error:", v68, 0);

          v30 = 0;
        }
        v15 = v66;
        v17 = v60;

        v7 = v45;
        v8 = v44;
        v14 = v63;
        v34 = v58;
      }

    }
LABEL_57:

    goto LABEL_58;
  }
  v30 = 0;
LABEL_58:

  return v30;
}

id WFCreateArchiveWithFileWrapper(void *a1, void *a2, void *a3, uint64_t a4)
{
  id v7;
  id v8;
  id v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  WFArchiveWriter *v14;
  WFArchiveEntry *v15;
  _BOOL4 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t i;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  void *v24;
  WFArchiveEntry *v25;
  void *v26;
  uint64_t v27;
  id v28;
  WFArchiveEntry *v29;
  void *v30;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  void *v37;
  id v38;
  id v39;
  id v40;
  id obj;
  void *v42;
  void *v43;
  _QWORD v44[4];
  id v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  _BYTE v50[128];
  uint64_t v51;

  v51 = *MEMORY[0x24BDAC8D0];
  v7 = a1;
  v8 = a2;
  v9 = a3;
  if (!v7)
  {
    objc_msgSend(MEMORY[0x24BDD1448], "currentHandler");
    v32 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "WFFileRepresentation * _Nullable WFCreateArchiveWithFileWrapper(NSFileWrapper * _Nonnull __strong, NSString * _Nonnull __strong, WFArchiveFormat  _Nonnull __strong, NSError *__autoreleasing  _Nullable * _Nullable)");
    v33 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v32, "handleFailureInFunction:file:lineNumber:description:", v33, CFSTR("WFArchiveUtilities.m"), 108, CFSTR("Invalid parameter not satisfying: %@"), CFSTR("wrapper"));

    if (v8)
      goto LABEL_3;
LABEL_21:
    objc_msgSend(MEMORY[0x24BDD1448], "currentHandler");
    v34 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "WFFileRepresentation * _Nullable WFCreateArchiveWithFileWrapper(NSFileWrapper * _Nonnull __strong, NSString * _Nonnull __strong, WFArchiveFormat  _Nonnull __strong, NSError *__autoreleasing  _Nullable * _Nullable)");
    v35 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v34, "handleFailureInFunction:file:lineNumber:description:", v35, CFSTR("WFArchiveUtilities.m"), 109, CFSTR("Invalid parameter not satisfying: %@"), CFSTR("archiveFilename"));

    goto LABEL_3;
  }
  if (!v8)
    goto LABEL_21;
LABEL_3:
  objc_msgSend(v8, "stringByDeletingPathExtension");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  +[WFTemporaryFileManager proposedTemporaryFileURLForFilename:](WFTemporaryFileManager, "proposedTemporaryFileURLForFilename:", v8);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "fileWrappers");
  v43 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v43, "allKeys");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v12, "sortedArrayUsingSelector:", sel_compare_);
  v13 = (void *)objc_claimAutoreleasedReturnValue();

  v14 = -[WFArchiveWriter initWithDestinationURL:format:error:]([WFArchiveWriter alloc], "initWithDestinationURL:format:error:", v11, v9, a4);
  if (v14
    && (v15 = -[WFArchiveEntry initWithDirectoryName:]([WFArchiveEntry alloc], "initWithDirectoryName:", v10), v16 = -[WFArchiveWriter writeArchiveEntry:error:](v14, "writeArchiveEntry:error:", v15, a4), v15, v16))
  {
    v37 = v11;
    v38 = v9;
    v42 = v10;
    v39 = v8;
    v40 = v7;
    v48 = 0u;
    v49 = 0u;
    v46 = 0u;
    v47 = 0u;
    v36 = v13;
    obj = v13;
    v17 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v46, v50, 16);
    if (v17)
    {
      v18 = v17;
      v19 = *(_QWORD *)v47;
      while (2)
      {
        for (i = 0; i != v18; ++i)
        {
          v21 = a4;
          if (*(_QWORD *)v47 != v19)
            objc_enumerationMutation(obj);
          v22 = *(_QWORD *)(*((_QWORD *)&v46 + 1) + 8 * i);
          objc_msgSend(v43, "objectForKey:", v22);
          v23 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v23, "regularFileContents");
          v24 = (void *)objc_claimAutoreleasedReturnValue();
          v25 = [WFArchiveEntry alloc];
          objc_msgSend(MEMORY[0x24BDD17C8], "stringWithFormat:", CFSTR("%@/%@"), v42, v22);
          v26 = (void *)objc_claimAutoreleasedReturnValue();
          v27 = objc_msgSend(v24, "length");
          v44[0] = MEMORY[0x24BDAC760];
          v44[1] = 3221225472;
          v44[2] = __WFCreateArchiveWithFileWrapper_block_invoke;
          v44[3] = &unk_24C4DFC98;
          v45 = v24;
          v28 = v24;
          v29 = -[WFArchiveEntry initWithFilename:fileType:filePermission:fileSize:modificationDate:creationDate:dataProvider:](v25, "initWithFilename:fileType:filePermission:fileSize:modificationDate:creationDate:dataProvider:", v26, 0x8000, 420, v27, 0, 0, v44);

          a4 = v21;
          LODWORD(v26) = -[WFArchiveWriter writeArchiveEntry:error:](v14, "writeArchiveEntry:error:", v29, v21);

          if (!(_DWORD)v26)
          {
            v30 = 0;
            v8 = v39;
            v7 = v40;
            v11 = v37;
            v9 = v38;
            goto LABEL_17;
          }
        }
        v18 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v46, v50, 16);
        if (v18)
          continue;
        break;
      }
    }

    if (-[WFArchiveWriter finishWithError:](v14, "finishWithError:", a4))
    {
      objc_msgSend(MEMORY[0x24BEC14A0], "typeWithUTType:", *MEMORY[0x24BDF8560]);
      v11 = v37;
      obj = (id)objc_claimAutoreleasedReturnValue();
      v8 = v39;
      +[WFFileRepresentation fileWithURL:options:ofType:proposedFilename:](WFFileRepresentation, "fileWithURL:options:ofType:proposedFilename:", v37, 1);
      v30 = (void *)objc_claimAutoreleasedReturnValue();
      v7 = v40;
      v9 = v38;
LABEL_17:
      v10 = v42;
      v13 = v36;

    }
    else
    {
      v30 = 0;
      v8 = v39;
      v7 = v40;
      v11 = v37;
      v9 = v38;
      v10 = v42;
      v13 = v36;
    }
  }
  else
  {
    v30 = 0;
  }

  return v30;
}

id WFExtractArchiveFile(void *a1, uint64_t a2)
{
  id v3;
  WFArchiveReader *v4;
  void *v5;
  void *v6;
  void *v7;
  int v8;
  id v9;
  void *v10;
  void *v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  void *v16;
  void *v17;
  char v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t i;
  void *v24;
  void *v26;
  void *v27;
  void (**v28)(_QWORD);
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  _QWORD aBlock[5];
  _QWORD v34[5];
  id v35;
  _BYTE v36[128];
  _QWORD v37[4];

  v37[2] = *MEMORY[0x24BDAC8D0];
  v3 = a1;
  v4 = -[WFArchiveReader initWithArchiveFile:error:]([WFArchiveReader alloc], "initWithArchiveFile:error:", v3, a2);
  if (v4)
  {
    objc_msgSend(v3, "wfName");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    +[WFTemporaryFileManager proposedTemporaryFileURLForFilename:isDirectory:](WFTemporaryFileManager, "proposedTemporaryFileURLForFilename:isDirectory:", v5, 1);
    v6 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(MEMORY[0x24BDD1580], "defaultManager");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v8 = objc_msgSend(v7, "createDirectoryAtURL:withIntermediateDirectories:attributes:error:", v6, 0, 0, a2);

    v9 = 0;
    if (!v8)
    {
LABEL_23:

      goto LABEL_24;
    }
    v34[0] = 0;
    v34[1] = v34;
    v34[2] = 0x3032000000;
    v34[3] = __Block_byref_object_copy__893;
    v34[4] = __Block_byref_object_dispose__894;
    +[WFFileRepresentation fileWithURL:options:](WFFileRepresentation, "fileWithURL:options:", v6, 1);
    v35 = (id)objc_claimAutoreleasedReturnValue();
    aBlock[0] = MEMORY[0x24BDAC760];
    aBlock[1] = 3221225472;
    aBlock[2] = __WFExtractArchiveFile_block_invoke;
    aBlock[3] = &unk_24C4E3118;
    aBlock[4] = v34;
    v28 = (void (**)(_QWORD))_Block_copy(aBlock);
    v10 = (void *)objc_opt_new();
    -[WFArchiveReader extractArchiveToDestinationURL:error:](v4, "extractArchiveToDestinationURL:error:", v6, a2);
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    v12 = v11;
    if (!v11)
    {
      v9 = 0;
      goto LABEL_22;
    }
    if (objc_msgSend(v11, "count") != 1)
      goto LABEL_11;
    objc_msgSend(v12, "firstObject");
    v26 = (void *)objc_claimAutoreleasedReturnValue();
    v14 = *MEMORY[0x24BDBCC80];
    v37[0] = *MEMORY[0x24BDBCC60];
    v13 = v37[0];
    v37[1] = v14;
    objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:count:", v37, 2);
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v26, "resourceValuesForKeys:error:", v15, 0);
    v27 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(v27, "objectForKey:", v13);
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v16, "BOOLValue"))
    {
      objc_msgSend(v27, "objectForKey:", v14);
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      v18 = objc_msgSend(v17, "BOOLValue");

      if ((v18 & 1) != 0)
      {
LABEL_10:

LABEL_11:
        v31 = 0u;
        v32 = 0u;
        v29 = 0u;
        v30 = 0u;
        v12 = v12;
        v21 = objc_msgSend(v12, "countByEnumeratingWithState:objects:count:", &v29, v36, 16);
        if (v21)
        {
          v22 = *(_QWORD *)v30;
          do
          {
            for (i = 0; i != v21; ++i)
            {
              if (*(_QWORD *)v30 != v22)
                objc_enumerationMutation(v12);
              +[WFFileRepresentation fileWithURL:options:](WFFileRepresentation, "fileWithURL:options:", *(_QWORD *)(*((_QWORD *)&v29 + 1) + 8 * i), 3);
              v24 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v10, "addObject:", v24);

            }
            v21 = objc_msgSend(v12, "countByEnumeratingWithState:objects:count:", &v29, v36, 16);
          }
          while (v21);
        }

        v9 = v10;
        goto LABEL_19;
      }
      objc_msgSend(MEMORY[0x24BDD1580], "defaultManager");
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v19, "contentsOfDirectoryAtURL:includingPropertiesForKeys:options:error:", v26, 0, 1, a2);
      v16 = (void *)objc_claimAutoreleasedReturnValue();

      if (!v16)
      {

        v9 = 0;
LABEL_19:

LABEL_22:
        v28[2](v28);

        _Block_object_dispose(v34, 8);
        goto LABEL_23;
      }
      v20 = objc_msgSend(objc_alloc(MEMORY[0x24BDBCEE0]), "initWithArray:", v16);

      v12 = (id)v20;
    }

    goto LABEL_10;
  }
  v9 = 0;
LABEL_24:

  return v9;
}

void sub_20BBCA4B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  (*(void (**)(void))(a12 + 16))();
  _Block_object_dispose(&a27, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__893(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__894(uint64_t a1)
{

}

id getWFTemporaryFileManagerLogObject()
{
  if (getWFTemporaryFileManagerLogObject_onceToken != -1)
    dispatch_once(&getWFTemporaryFileManagerLogObject_onceToken, &__block_literal_global_1078);
  return (id)getWFTemporaryFileManagerLogObject_log;
}

void __getWFTemporaryFileManagerLogObject_block_invoke()
{
  os_log_t v0;
  void *v1;

  v0 = os_log_create((const char *)*MEMORY[0x24BEC1968], "TemporaryFileManager");
  v1 = (void *)getWFTemporaryFileManagerLogObject_log;
  getWFTemporaryFileManagerLogObject_log = (uint64_t)v0;

}

uint64_t gettag(uint64_t a1, unint64_t *a2, unint64_t a3)
{
  unint64_t v3;
  unint64_t v5;
  uint64_t result;

  v3 = *a2;
  if (*a2 >= a3)
    return 0xFFFFFFFFLL;
  v5 = v3 + 1;
  *a2 = v3 + 1;
  result = *(_BYTE *)(a1 + v3) & 0x1F;
  if ((_DWORD)result != 31)
    return result;
  if (v5 >= a3)
    return 0xFFFFFFFFLL;
  result = 31;
  while (*(char *)(a1 + v5) < 0)
  {
    *a2 = v5 + 1;
    result = *(unsigned __int8 *)(a1 + v5++) + ((_DWORD)result << 7) - 128;
    if (a3 == v5)
      return 0xFFFFFFFFLL;
  }
  return result;
}

uint64_t getlength(uint64_t a1, unint64_t *a2, unint64_t a3)
{
  unint64_t v3;
  int v5;
  unint64_t v6;
  uint64_t result;
  unint64_t v8;
  unsigned int v9;
  unint64_t v10;

  v3 = *a2;
  if (*a2 >= a3)
    return 0xFFFFFFFFLL;
  v5 = *(char *)(a1 + v3);
  v6 = v3 + 1;
  *a2 = v3 + 1;
  result = *(_BYTE *)(a1 + v3) & 0x7F;
  if (v3 + 1 + result >= a3)
    return 0xFFFFFFFFLL;
  if (v5 < 0)
  {
    v8 = 0;
    if ((_DWORD)result)
    {
      v9 = 0;
      v10 = v6;
      do
      {
        v6 = v10 + 1;
        *a2 = v10 + 1;
        v8 = *(unsigned __int8 *)(a1 + v10) | (v8 << 8);
        ++v9;
        ++v10;
      }
      while (v9 < result);
    }
    if (v6 + v8 > a3 || v8 > 0xFFFFFFFF - v6)
      return 0xFFFFFFFFLL;
    else
      return v8;
  }
  return result;
}

id WFJSONSerializable(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  _QWORD v5[4];

  v5[3] = *MEMORY[0x24BDAC8D0];
  v1 = a1;
  v5[0] = objc_opt_class();
  v5[1] = objc_opt_class();
  v5[2] = objc_opt_class();
  objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:count:", v5, 3);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  WFSerializable(v1, v2);
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  return v3;
}

id WFPlistSerializable(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  _QWORD v5[5];

  v5[4] = *MEMORY[0x24BDAC8D0];
  v1 = a1;
  v5[0] = objc_opt_class();
  v5[1] = objc_opt_class();
  v5[2] = objc_opt_class();
  v5[3] = objc_opt_class();
  objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:count:", v5, 4);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  WFSerializable(v1, v2);
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  return v3;
}

id WFSerializable(void *a1, void *a2)
{
  id v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  void *v11;
  _QWORD v13[4];
  id v14;
  _QWORD v15[4];
  id v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  _BYTE v21[128];
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  v3 = a1;
  v17 = 0u;
  v18 = 0u;
  v19 = 0u;
  v20 = 0u;
  v4 = a2;
  v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v17, v21, 16);
  if (v5)
  {
    v6 = v5;
    v7 = *(_QWORD *)v18;
    while (2)
    {
      v8 = 0;
      do
      {
        if (*(_QWORD *)v18 != v7)
          objc_enumerationMutation(v4);
        if ((objc_opt_isKindOfClass() & 1) != 0)
        {
          v3 = v3;
          v11 = v4;
          v10 = v3;
          goto LABEL_14;
        }
        ++v8;
      }
      while (v6 != v8);
      v6 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v17, v21, 16);
      if (v6)
        continue;
      break;
    }
  }

  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    objc_msgSend(v3, "allObjects");
    v9 = objc_claimAutoreleasedReturnValue();

    v3 = (id)v9;
  }
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    v15[0] = MEMORY[0x24BDAC760];
    v15[1] = 3221225472;
    v15[2] = __WFSerializable_block_invoke;
    v15[3] = &unk_24C4E31A8;
    v16 = v4;
    objc_msgSend(v3, "if_compactMap:", v15);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    v11 = v16;
  }
  else
  {
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) == 0)
    {
      v10 = 0;
      goto LABEL_15;
    }
    v13[0] = MEMORY[0x24BDAC760];
    v13[1] = 3221225472;
    v13[2] = __WFSerializable_block_invoke_2;
    v13[3] = &unk_24C4DC040;
    v14 = v4;
    objc_msgSend(v3, "if_compactMap:", v13);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    v11 = v14;
  }
LABEL_14:

LABEL_15:
  return v10;
}

void WFAddDictionaryObjectToItemArray(void *a1, void *a2, void *a3, void *a4, void *a5)
{
  id v9;
  id v10;
  id v11;
  id v12;
  void *v13;
  id v14;
  _QWORD v15[4];
  id v16;
  id v17;
  id v18;

  v14 = a1;
  v9 = a2;
  v10 = a3;
  v11 = a4;
  v12 = a5;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    v15[0] = MEMORY[0x24BDAC760];
    v15[1] = 3221225472;
    v15[2] = __WFAddDictionaryObjectToItemArray_block_invoke;
    v15[3] = &unk_24C4DC018;
    v16 = v9;
    v17 = v10;
    v18 = v12;
    objc_msgSend(v14, "enumerateObjectsUsingBlock:", v15);

    v13 = v16;
  }
  else
  {
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
      objc_msgSend(v14, "setWf_preferredFileType:", v10);
    +[WFContentItem itemWithObject:named:attributionSet:](WFContentItem, "itemWithObject:named:attributionSet:", v14, v11, v12, v14);
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    if (v13)
      objc_msgSend(v9, "addObject:", v13);
  }

}

int asprintf(char **a1, const char *a2, ...)
{
  va_list va;

  va_start(va, a2);
  return vasprintf(a1, a2, va);
}

id WFEnforceClass(void *a1, uint64_t a2)
{
  id v3;
  id v4;
  NSObject *v5;
  id v6;
  int v8;
  const char *v9;
  __int16 v10;
  id v11;
  __int16 v12;
  id v13;
  __int16 v14;
  uint64_t v15;
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  v3 = a1;
  if (v3 && (objc_opt_isKindOfClass() & 1) == 0)
  {
    getWFGeneralLogObject();
    v5 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_FAULT))
    {
      v8 = 136315906;
      v9 = "WFEnforceClass";
      v10 = 2114;
      v11 = v3;
      v12 = 2114;
      v13 = (id)objc_opt_class();
      v14 = 2114;
      v15 = a2;
      v6 = v13;
      _os_log_impl(&dword_20BBAD000, v5, OS_LOG_TYPE_FAULT, "%s Warning: %{public}@ is of type %{public}@, not %{public}@! Falling back to nil.", (uint8_t *)&v8, 0x2Au);

    }
    v4 = 0;
  }
  else
  {
    v4 = v3;
  }

  return v4;
}

void __getCLCircularRegionClass_block_invoke(uint64_t a1)
{
  void *v2;
  void *v3;

  CoreLocationLibrary_1692();
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = objc_getClass("CLCircularRegion");
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    getCLCircularRegionClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  }
  else
  {
    objc_msgSend(MEMORY[0x24BDD1448], "currentHandler");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "Class getCLCircularRegionClass(void)_block_invoke");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, CFSTR("CLCircularRegion+WFSerialization.m"), 16, CFSTR("Unable to find class %s"), "CLCircularRegion");

    __break(1u);
  }
}

void *CoreLocationLibrary_1692()
{
  void *v0;
  void *v2;
  void *v3;

  if (!CoreLocationLibraryCore_frameworkLibrary_1699)
    CoreLocationLibraryCore_frameworkLibrary_1699 = _sl_dlopen();
  v0 = (void *)CoreLocationLibraryCore_frameworkLibrary_1699;
  if (!CoreLocationLibraryCore_frameworkLibrary_1699)
  {
    objc_msgSend(MEMORY[0x24BDD1448], "currentHandler");
    v0 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "void *CoreLocationLibrary(void)");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v2, CFSTR("CLCircularRegion+WFSerialization.m"), 15, CFSTR("%s"), 0);

    __break(1u);
    free(v3);
  }
  return v0;
}

id WFStatusPropertyValueForEKParticipantStatus(unint64_t a1)
{
  if (a1 <= 7)
  {
    WFLocalizedContentPropertyPossibleValueMarker(off_24C4DC1F0[a1]);
    a1 = objc_claimAutoreleasedReturnValue();
  }
  return (id)a1;
}

uint64_t unreadable_info(uint64_t a1, __int16 a2, char *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;

  if (access(a3, 2) || (result = file_printf(a1, "writable, ", v6, v7, v8, v9, v10, v11, v19), (_DWORD)result != -1))
  {
    if (access(a3, 1)
      || (result = file_printf(a1, "executable, ", v13, v14, v15, v16, v17, v18, v19), (_DWORD)result != -1))
    {
      if ((a2 & 0xF000) != 0x8000
        || (result = file_printf(a1, "regular file, ", v13, v14, v15, v16, v17, v18, v19), (_DWORD)result != -1))
      {
        if (file_printf(a1, "no read permission", v13, v14, v15, v16, v17, v18, v19) == -1)
          return 0xFFFFFFFFLL;
        else
          return 0;
      }
    }
  }
  return result;
}

const char *magic_file(const char *result, char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  char *v10;
  int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  int v20;
  int *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  int v35;
  int v36;
  int v37;
  const char *v38;
  char *v39;
  mode_t st_mode;
  mode_t v41;
  const char *v42;
  const char *v43;
  ssize_t v44;
  char *v45;
  const char *v46;
  int v47;
  const char *v48;
  int *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  const char *v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  const char *v64;
  const char *v65;
  const char *v66;
  const char *v67;
  char *v68;
  char *v69;
  uint64_t v70;
  int v71;
  int v72;
  BOOL v73;
  int v74;
  off_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  int v81;
  ssize_t v82;
  char *v83;
  __int128 *v84;
  char *v85;
  int v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  const char *v92;
  int *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  const char *v100;
  const char *v101;
  char v102;
  char v103;
  stat v104;
  stat v105;
  timeval v106;
  __darwin_time_t tv_sec;
  uint64_t v108;
  char v109[1028];
  uint64_t v110;

  v110 = *MEMORY[0x24BDAC8D0];
  if (result)
  {
    v9 = (uint64_t)result;
    if (file_reset((uint64_t)result, 1, a3, a4, a5, a6, a7, a8) == -1)
      return 0;
    result = (const char *)malloc_type_malloc(*(_QWORD *)(v9 + 280) + 129, 0x74214EDCuLL);
    if (!result)
      return result;
    v10 = (char *)result;
    memset(&v104, 0, sizeof(v104));
    if (!a2)
    {
      v19 = 0;
      goto LABEL_115;
    }
    v11 = *(_DWORD *)(v9 + 68);
    if ((v11 & 2) != 0)
      v12 = stat(a2, &v104);
    else
      v12 = lstat(a2, &v104);
    memset(&v105, 0, sizeof(v105));
    if (v12)
    {
      v20 = *(_DWORD *)(v9 + 68);
      v21 = __error();
      v27 = *v21;
      if ((v20 & 0x200) == 0)
      {
        strerror(*v21);
          v34 = -1;
        else
          v34 = 0;
        goto LABEL_14;
      }
      v103 = (char)a2;
LABEL_24:
      file_error(v9, v27, v39, v22, v23, v24, v25, v26, v103);
LABEL_25:
      v34 = -1;
      goto LABEL_26;
    }
    if ((v11 & 0x1000C10) != 0)
    {
      v35 = 0;
    }
    else
    {
      st_mode = v104.st_mode;
      if ((v104.st_mode & 0x800) != 0)
      {
        if (file_printf(v9, "%ssetuid", v13, v14, v15, v16, v17, v18, (char)"") == -1)
          goto LABEL_25;
        v41 = v104.st_mode;
        v35 = 1;
      }
      else
      {
        v35 = 0;
        v41 = v104.st_mode;
      }
      if ((v41 & 0x400) != 0)
      {
        v42 = ", ";
        if ((st_mode & 0x800) == 0)
          v42 = "";
        if (file_printf(v9, "%ssetgid", v13, v14, v15, v16, v17, v18, (char)v42) == -1)
          goto LABEL_25;
        ++v35;
        v41 = v104.st_mode;
      }
      if ((v41 & 0x200) != 0)
      {
        v43 = ", ";
        if (!v35)
          v43 = "";
        if (file_printf(v9, "%ssticky", v13, v14, v15, v16, v17, v18, (char)v43) == -1)
          goto LABEL_25;
        ++v35;
      }
    }
    v36 = v11 & 0x410;
    v37 = v11 & 0x1000800;
    switch(((v104.st_mode & 0xF000u) - 4096) >> 12)
    {
      case 0u:
        if ((*(_BYTE *)(v9 + 68) & 8) != 0)
          goto LABEL_83;
        if ((v11 & 0x410) != 0)
        {
          v38 = "fifo";
          goto LABEL_109;
        }
        if (v37)
          goto LABEL_114;
        v64 = ", ";
        if (!v35)
          v64 = "";
        v47 = file_printf(v9, "%sfifo (named pipe)", v13, v14, v15, v16, v17, v18, (char)v64);
        goto LABEL_172;
      case 1u:
        if ((*(_BYTE *)(v9 + 68) & 8) != 0)
          goto LABEL_54;
        if ((v11 & 0x410) != 0)
        {
          v38 = "chardevice";
          goto LABEL_109;
        }
        if (v37)
          goto LABEL_114;
        v65 = ", ";
        if (!v35)
          v65 = "";
        v47 = file_printf(v9, "%scharacter special (%ld/%ld)", v13, v14, v15, v16, v17, v18, (char)v65);
        goto LABEL_172;
      case 3u:
        if ((v11 & 0x410) != 0)
        {
          v38 = "directory";
          goto LABEL_109;
        }
        if (v37)
          goto LABEL_114;
        v46 = ", ";
        if (!v35)
          v46 = "";
        v47 = file_printf(v9, "%sdirectory", v13, v14, v15, v16, v17, v18, (char)v46);
        goto LABEL_172;
      case 5u:
        if ((*(_BYTE *)(v9 + 68) & 8) != 0)
          goto LABEL_54;
        if ((v11 & 0x410) != 0)
        {
          v38 = "blockdevice";
          goto LABEL_109;
        }
        if (v37)
          goto LABEL_114;
        v66 = ", ";
        if (!v35)
          v66 = "";
        v47 = file_printf(v9, "%sblock special (%ld/%ld)", v13, v14, v15, v16, v17, v18, (char)v66);
        goto LABEL_172;
      case 7u:
        if ((*(_BYTE *)(v9 + 68) & 8) != 0 || v104.st_size)
        {
LABEL_54:
          if ((v11 & 0x1000C10) != 0
            || !v35
            || file_printf(v9, " ", v13, v14, v15, v16, v17, v18, v102) != -1)
          {
            goto LABEL_114;
          }
          goto LABEL_25;
        }
        if ((v11 & 0x410) != 0)
        {
          v38 = "x-empty";
          goto LABEL_109;
        }
        if (!v37)
        {
          v67 = ", ";
          if (!v35)
            v67 = "";
          v47 = file_printf(v9, "%sempty", v13, v14, v15, v16, v17, v18, (char)v67);
          goto LABEL_172;
        }
        goto LABEL_114;
      case 9u:
        v44 = readlink(a2, v109, 0x3FFuLL);
        if (v44 <= 0)
        {
          if ((*(_BYTE *)(v9 + 69) & 2) != 0)
          {
            v27 = *__error();
            v103 = (char)a2;
            goto LABEL_24;
          }
          if ((v11 & 0x410) != 0)
            goto LABEL_108;
          if (v37)
            goto LABEL_114;
          if (v35)
            v48 = ", ";
          else
            v48 = "";
          v49 = __error();
          strerror(*v49);
        }
        else
        {
          v109[v44] = 0;
          if (v109[0] == 47)
          {
            v45 = v109;
          }
          else
          {
            v57 = strrchr(a2, 47);
            if (v57)
            {
              if (v57 - a2 >= 1024)
              {
                if ((*(_BYTE *)(v9 + 69) & 2) != 0)
                {
                }
                else if ((v11 & 0x410) != 0)
                {
                  if (handle_mime(v9, v36, (uint64_t)"x-path-too-long", v59, v60, v61, v62, v63) != -1)
                  {
LABEL_83:
                    if (v37)
                      goto LABEL_114;
                    goto LABEL_16;
                  }
                }
                else
                {
                  if (v37)
                    goto LABEL_114;
                  v101 = ", ";
                  if (!v35)
                    v101 = "";
                    goto LABEL_16;
                }
                v34 = -1;
LABEL_14:
                if (v34 == -1)
                {
LABEL_26:
                  free(v10);
                  goto LABEL_157;
                }
                if (v34)
                {
LABEL_16:
                  v34 = 0;
                  goto LABEL_26;
                }
LABEL_114:
                *__error() = 0;
                v19 = open(a2, 4);
                if (v19 < 0)
                {
                  if (!stat(a2, &v104) && unreadable_info(v9, v104.st_mode, a2) == -1)
                  {
                    v75 = -1;
                    v34 = -1;
                  }
                  else
                  {
                    v34 = 0;
                    v75 = -1;
                  }
LABEL_139:
                  free(v10);
                  if (v19 == -1)
                    goto LABEL_157;
                  goto LABEL_151;
                }
LABEL_115:
                v72 = fstat(v19, &v104);
                if (v72)
                  v73 = 0;
                else
                  v73 = (v104.st_mode & 0xF000) == 4096;
                v74 = v73;
                if (a2)
                {
                  v75 = -1;
                  if (v74)
                    goto LABEL_123;
                }
                else
                {
                  v75 = lseek(v19, 0, 1);
                  if (v74)
                  {
LABEL_123:
                    v76 = 0;
                    do
                    {
                      v77 = sread(v19, &v10[v76], *(_QWORD *)(v9 + 280) - v76);
                      if (v77 < 1)
                        break;
                      v76 += v77;
                    }
                    while ((unint64_t)v77 > 0x1FF);
                    if (!v76 && a2)
                    {
                      v81 = unreadable_info(v9, v104.st_mode, a2);
                      goto LABEL_136;
                    }
                    v85 = &v10[v76];
                    v85[128] = 0;
                    *((_OWORD *)v85 + 6) = 0u;
                    *((_OWORD *)v85 + 7) = 0u;
                    *((_OWORD *)v85 + 4) = 0u;
                    *((_OWORD *)v85 + 5) = 0u;
                    *((_OWORD *)v85 + 2) = 0u;
                    *((_OWORD *)v85 + 3) = 0u;
                    *(_OWORD *)v85 = 0u;
                    *((_OWORD *)v85 + 1) = 0u;
                    goto LABEL_134;
                  }
                }
                v82 = read(v19, v10, *(_QWORD *)(v9 + 280));
                if (v82 == -1)
                {
                  v86 = *__error();
                  if (a2 || !v19)
                  {
                    v92 = "/dev/stdin";
                    if (a2)
                      LOBYTE(v92) = (_BYTE)a2;
                  }
                  else
                  {
                    file_error(v9, v86, "cannot read fd %d", v87, v88, v89, v90, v91, v19);
                  }
                  free(v10);
                  v34 = -1;
LABEL_151:
                  if (v75 != -1)
                    lseek(v19, v75, 0);
                  if (a2 && v19)
                  {
                    close(v19);
                    if ((*(_BYTE *)(v9 + 68) & 0x80) != 0)
                    {
                      v106.tv_sec = v104.st_atimespec.tv_sec;
                      *(_QWORD *)&v106.tv_usec = 0;
                      tv_sec = v104.st_mtimespec.tv_sec;
                      v108 = 0;
                      utimes(a2, &v106);
                    }
                  }
LABEL_157:
                  if (!v34)
                    return file_getbuffer(v9);
                  return 0;
                }
                v76 = v82;
                v83 = &v10[v82];
                v83[128] = 0;
                *((_OWORD *)v83 + 6) = 0u;
                *((_OWORD *)v83 + 7) = 0u;
                *((_OWORD *)v83 + 4) = 0u;
                *((_OWORD *)v83 + 5) = 0u;
                *((_OWORD *)v83 + 2) = 0u;
                *((_OWORD *)v83 + 3) = 0u;
                *(_OWORD *)v83 = 0u;
                *((_OWORD *)v83 + 1) = 0u;
                if (v72)
                {
                  v84 = 0;
LABEL_135:
                  v81 = file_buffer(v9, v19, v84, (unsigned __int8 *)v10, v76, v78, v79, v80);
LABEL_136:
                  if (v81 == -1)
                    v34 = -1;
                  else
                    v34 = 0;
                  goto LABEL_139;
                }
LABEL_134:
                v84 = (__int128 *)&v104;
                goto LABEL_135;
              }
              v68 = (char *)&v106;
              v69 = (char *)&v106 + v57 - a2;
              __strlcpy_chk();
              v69[1] = 0;
              __strlcat_chk();
            }
            else
            {
              v68 = v109;
            }
            v45 = v68;
          }
          if (stat(v45, &v105) < 0)
          {
            v93 = __error();
            v34 = bad_link(v9, *v93, (uint64_t)v109, v94, v95, v96, v97, v98);
            goto LABEL_14;
          }
          if ((*(_DWORD *)(v9 + 68) & 2) != 0)
          {
            *(_DWORD *)(v9 + 68) &= 2u;
            v99 = magic_file(v9, v109);
            *(_DWORD *)(v9 + 68) |= 2u;
            if (v99)
              v34 = 1;
            else
              v34 = -1;
            if (v99)
            {
LABEL_113:
              if (v37)
                goto LABEL_114;
            }
            goto LABEL_14;
          }
          if (v36)
          {
LABEL_108:
            v38 = "symlink";
            goto LABEL_109;
          }
          if (v37)
            goto LABEL_114;
          v100 = ", ";
          if (!v35)
            v100 = "";
          v47 = file_printf(v9, "%ssymbolic link to %s", v70, v14, v15, v16, v17, v18, (char)v100);
        }
LABEL_172:
        if (v47 != -1)
          goto LABEL_16;
        goto LABEL_25;
      case 0xBu:
        if ((v11 & 0x410) == 0)
        {
          if (v37)
            goto LABEL_114;
          v56 = ", ";
          if (!v35)
            v56 = "";
          v47 = file_printf(v9, "%ssocket", v13, v14, v15, v16, v17, v18, (char)v56);
          goto LABEL_172;
        }
        v38 = "socket";
LABEL_109:
        v71 = handle_mime(v9, v36, (uint64_t)v38, v14, v15, v16, v17, v18);
        if (v71 == -1)
          v34 = -1;
        else
          v34 = 1;
        if (v71 == -1)
          goto LABEL_14;
        goto LABEL_113;
      default:
        file_error(v9, 0, "invalid mode 0%o", v14, v15, v16, v17, v18, v104.st_mode);
        goto LABEL_25;
    }
  }
  return result;
}

id UIPrintFormatterFunction()
{
  return (id)classUIPrintFormatter;
}

Class initUIPrintFormatter()
{
  Class result;

  if (UIKitLibrary_sOnce != -1)
    dispatch_once(&UIKitLibrary_sOnce, &__block_literal_global_211);
  result = objc_getClass("UIPrintFormatter");
  classUIPrintFormatter = (uint64_t)result;
  getUIPrintFormatterClass[0] = (uint64_t (*)())UIPrintFormatterFunction;
  return result;
}

id UISimpleTextPrintFormatterFunction()
{
  return (id)classUISimpleTextPrintFormatter;
}

Class initUISimpleTextPrintFormatter()
{
  Class result;

  if (UIKitLibrary_sOnce != -1)
    dispatch_once(&UIKitLibrary_sOnce, &__block_literal_global_211);
  result = objc_getClass("UISimpleTextPrintFormatter");
  classUISimpleTextPrintFormatter = (uint64_t)result;
  getUISimpleTextPrintFormatterClass[0] = (uint64_t (*)())UISimpleTextPrintFormatterFunction;
  return result;
}

id getWFWFContactLogObject()
{
  if (getWFWFContactLogObject_onceToken != -1)
    dispatch_once(&getWFWFContactLogObject_onceToken, &__block_literal_global_2815);
  return (id)getWFWFContactLogObject_log;
}

void __getWFWFContactLogObject_block_invoke()
{
  os_log_t v0;
  void *v1;

  v0 = os_log_create((const char *)*MEMORY[0x24BEC1968], "WFContact");
  v1 = (void *)getWFWFContactLogObject_log;
  getWFWFContactLogObject_log = (uint64_t)v0;

}

void sub_20BBD4D78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class __getMKMapItemClass_block_invoke(uint64_t a1)
{
  Class result;
  void *v3;
  void *v4;
  void *v5;

  if (!MapKitLibraryCore_frameworkLibrary)
    MapKitLibraryCore_frameworkLibrary = _sl_dlopen();
  if (!MapKitLibraryCore_frameworkLibrary)
  {
    objc_msgSend(MEMORY[0x24BDD1448], "currentHandler");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "void *MapKitLibrary(void)");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, CFSTR("WFMKMapItemContentItem.m"), 19, CFSTR("%s"), 0);

    goto LABEL_8;
  }
  result = objc_getClass("MKMapItem");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    objc_msgSend(MEMORY[0x24BDD1448], "currentHandler");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "Class getMKMapItemClass(void)_block_invoke");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v5, CFSTR("WFMKMapItemContentItem.m"), 20, CFSTR("Unable to find class %s"), "MKMapItem");

LABEL_8:
    __break(1u);
  }
  getMKMapItemClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

id WFGenerateGIFFromImageFiles(void *a1, void *a2, uint64_t a3, void *a4, double a5, double a6, float a7)
{
  id v13;
  id v14;
  id v15;
  NSObject *v16;
  uint64_t v17;
  id v18;
  id v19;
  id v20;
  void *v21;
  _QWORD aBlock[5];
  _QWORD block[4];
  id v25;
  id v26;
  id v27;
  _QWORD *v28;
  double v29;
  double v30;
  uint64_t v31;
  float v32;
  _QWORD v33[3];
  char v34;

  v13 = a1;
  v14 = a2;
  v15 = a4;
  v33[0] = 0;
  v33[1] = v33;
  v33[2] = 0x2020000000;
  v34 = 0;
  dispatch_get_global_queue(0, 0);
  v16 = objc_claimAutoreleasedReturnValue();
  v17 = MEMORY[0x24BDAC760];
  block[0] = MEMORY[0x24BDAC760];
  block[1] = 3221225472;
  block[2] = __WFGenerateGIFFromImageFiles_block_invoke;
  block[3] = &unk_24C4DC4E0;
  v29 = a5;
  v30 = a6;
  v25 = v13;
  v26 = v14;
  v31 = a3;
  v32 = a7;
  v27 = v15;
  v28 = v33;
  v18 = v14;
  v19 = v15;
  v20 = v13;
  dispatch_async(v16, block);

  aBlock[0] = v17;
  aBlock[1] = 3221225472;
  aBlock[2] = __WFGenerateGIFFromImageFiles_block_invoke_6;
  aBlock[3] = &unk_24C4E3118;
  aBlock[4] = v33;
  v21 = _Block_copy(aBlock);

  _Block_object_dispose(v33, 8);
  return v21;
}

double WFAutoSizeFromInputSize(void *a1, double a2, double a3)
{
  double v5;
  id v6;
  void *v7;
  void *v8;
  double v9;
  double v10;
  double v11;
  double v12;
  void *v13;
  double v14;
  double v15;
  double v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t i;
  double v22;
  double v23;
  double v26;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  _BYTE v32[128];
  uint64_t v33;

  v33 = *MEMORY[0x24BDAC8D0];
  v5 = a3;
  v6 = a1;
  v7 = v6;
  if (a2 != 0.0 && a3 == 0.0)
  {
    objc_msgSend(v6, "firstObject");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v9 = WFImageSizeFromFile(v8, 0);
    v11 = v10;

    v5 = a2 * (v11 / v9);
  }
  if (a2 == 0.0)
  {
    v12 = a2;
    if (v5 != 0.0)
    {
      objc_msgSend(v7, "firstObject");
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      v14 = WFImageSizeFromFile(v13, 0);
      v16 = v15;

      v12 = v5 * (v14 / v16);
    }
  }
  else
  {
    v12 = a2;
  }
  if (v12 == 0.0 && v5 == 0.0)
  {
    v30 = 0u;
    v31 = 0u;
    v28 = 0u;
    v29 = 0u;
    v17 = v7;
    v18 = objc_msgSend(v17, "countByEnumeratingWithState:objects:count:", &v28, v32, 16);
    if (v18)
    {
      v19 = v18;
      v20 = *(_QWORD *)v29;
      do
      {
        for (i = 0; i != v19; ++i)
        {
          if (*(_QWORD *)v29 != v20)
            objc_enumerationMutation(v17);
          v22 = WFImageSizeFromFile(*(void **)(*((_QWORD *)&v28 + 1) + 8 * i), 0);
          if (v12 == 0.0 || v22 < a2)
            v12 = v22;
          if (v5 == 0.0 || v23 < a3)
            v5 = v23;
        }
        v19 = objc_msgSend(v17, "countByEnumeratingWithState:objects:count:", &v28, v32, 16, v22);
      }
      while (v19);
    }

    if (v12 > 500.0)
    {
      v26 = v5 / v12;
      v12 = 500.0;
      v5 = v26 * 500.0;
    }
    if (v5 > 500.0)
      v12 = v12 * 500.0 / v5;
  }

  return v12;
}

id WFGenerateGIFFromVideo(void *a1, void *a2, uint64_t a3, void *a4, double a5, double a6, float a7)
{
  id v13;
  id v14;
  id v15;
  void *v16;
  uint64_t v17;
  id v18;
  void *v19;
  void *v20;
  void *v21;
  id v22;
  id v23;
  id v24;
  id v25;
  void *v26;
  _QWORD aBlock[6];
  _QWORD v29[4];
  id v30;
  id v31;
  id v32;
  id v33;
  _QWORD *v34;
  _QWORD *v35;
  uint64_t v36;
  double v37;
  double v38;
  float v39;
  _QWORD v40[5];
  id v41;
  _QWORD v42[3];
  char v43;
  _QWORD v44[5];
  uint64_t v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD v49[2];

  v49[1] = *MEMORY[0x24BDAC8D0];
  v13 = a1;
  v14 = a2;
  v15 = a4;
  v42[0] = 0;
  v42[1] = v42;
  v42[2] = 0x2020000000;
  v43 = 0;
  v40[0] = 0;
  v40[1] = v40;
  v40[2] = 0x3032000000;
  v40[3] = __Block_byref_object_copy__3046;
  v40[4] = __Block_byref_object_dispose__3047;
  v41 = 0;
  v45 = 0;
  v46 = &v45;
  v47 = 0x2050000000;
  v16 = (void *)getAVURLAssetClass_softClass_3048;
  v48 = getAVURLAssetClass_softClass_3048;
  v17 = MEMORY[0x24BDAC760];
  if (!getAVURLAssetClass_softClass_3048)
  {
    v44[0] = MEMORY[0x24BDAC760];
    v44[1] = 3221225472;
    v44[2] = __getAVURLAssetClass_block_invoke_3049;
    v44[3] = &unk_24C4E3118;
    v44[4] = &v45;
    __getAVURLAssetClass_block_invoke_3049((uint64_t)v44);
    v16 = (void *)v46[3];
  }
  v18 = objc_retainAutorelease(v16);
  _Block_object_dispose(&v45, 8);
  objc_msgSend(v13, "fileURL");
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v18, "assetWithURL:", v19);
  v20 = (void *)objc_claimAutoreleasedReturnValue();

  v49[0] = CFSTR("duration");
  objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:count:", v49, 1);
  v21 = (void *)objc_claimAutoreleasedReturnValue();
  v29[0] = v17;
  v29[1] = 3221225472;
  v29[2] = __WFGenerateGIFFromVideo_block_invoke;
  v29[3] = &unk_24C4DC530;
  v22 = v20;
  v30 = v22;
  v34 = v42;
  v23 = v15;
  v33 = v23;
  v39 = a7;
  v24 = v14;
  v37 = a5;
  v38 = a6;
  v31 = v24;
  v35 = v40;
  v36 = a3;
  v25 = v13;
  v32 = v25;
  objc_msgSend(v22, "loadValuesAsynchronouslyForKeys:completionHandler:", v21, v29);

  aBlock[0] = v17;
  aBlock[1] = 3221225472;
  aBlock[2] = __WFGenerateGIFFromVideo_block_invoke_2_27;
  aBlock[3] = &unk_24C4DC558;
  aBlock[4] = v42;
  aBlock[5] = v40;
  v26 = _Block_copy(aBlock);

  _Block_object_dispose(v40, 8);
  _Block_object_dispose(v42, 8);

  return v26;
}

void sub_20BBD6654(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36)
{
  uint64_t v36;

  _Block_object_dispose((const void *)(v36 - 160), 8);
  _Block_object_dispose(&a30, 8);
  _Block_object_dispose(&a36, 8);
  _Unwind_Resume(a1);
}

void *__Block_byref_object_copy__3046(uint64_t a1, uint64_t a2)
{
  void *result;

  result = _Block_copy(*(const void **)(a2 + 40));
  *(_QWORD *)(a1 + 40) = result;
  return result;
}

void __Block_byref_object_dispose__3047(uint64_t a1)
{

}

void __getAVURLAssetClass_block_invoke_3049(uint64_t a1)
{
  void *v2;
  void *v3;

  AVFoundationLibrary_3061();
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = objc_getClass("AVURLAsset");
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    getAVURLAssetClass_softClass_3048 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  }
  else
  {
    objc_msgSend(MEMORY[0x24BDD1448], "currentHandler");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "Class getAVURLAssetClass(void)_block_invoke");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, CFSTR("WFAnimatedGIFTranscoder.m"), 47, CFSTR("Unable to find class %s"), "AVURLAsset");

    __break(1u);
  }
}

void sub_20BBD7048(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45)
{
  uint64_t v45;

  _Block_object_dispose(&a45, 8);
  _Block_object_dispose((const void *)(v45 - 248), 8);
  _Unwind_Resume(a1);
}

void getAVMediaTypeVideo()
{
  id *v0;
  void *v1;
  id v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;

  v5 = 0;
  v6 = &v5;
  v7 = 0x2020000000;
  v0 = (id *)getAVMediaTypeVideoSymbolLoc_ptr_3070;
  v8 = getAVMediaTypeVideoSymbolLoc_ptr_3070;
  if (!getAVMediaTypeVideoSymbolLoc_ptr_3070)
  {
    v1 = AVFoundationLibrary_3061();
    v0 = (id *)dlsym(v1, "AVMediaTypeVideo");
    v6[3] = (uint64_t)v0;
    getAVMediaTypeVideoSymbolLoc_ptr_3070 = (uint64_t)v0;
  }
  _Block_object_dispose(&v5, 8);
  if (v0)
  {
    v2 = *v0;
  }
  else
  {
    objc_msgSend(MEMORY[0x24BDD1448], "currentHandler");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "AVMediaType getAVMediaTypeVideo(void)");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, CFSTR("WFAnimatedGIFTranscoder.m"), 52, CFSTR("%s"), dlerror());

    __break(1u);
  }
}

void sub_20BBD71DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void soft_CMTimeGetSeconds(__int128 *a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  __int128 v6;
  uint64_t v7;
  void *v8;

  *(_QWORD *)&v6 = 0;
  *((_QWORD *)&v6 + 1) = &v6;
  v7 = 0x2020000000;
  v2 = getCMTimeGetSecondsSymbolLoc_ptr;
  v8 = getCMTimeGetSecondsSymbolLoc_ptr;
  if (!getCMTimeGetSecondsSymbolLoc_ptr)
  {
    v3 = CoreMediaLibrary();
    v2 = dlsym(v3, "CMTimeGetSeconds");
    *(_QWORD *)(*((_QWORD *)&v6 + 1) + 24) = v2;
    getCMTimeGetSecondsSymbolLoc_ptr = v2;
  }
  _Block_object_dispose(&v6, 8);
  if (v2)
  {
    v6 = *a1;
    v7 = *((_QWORD *)a1 + 2);
    ((void (*)(__int128 *))v2)(&v6);
  }
  else
  {
    objc_msgSend(MEMORY[0x24BDD1448], "currentHandler");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "Float64 soft_CMTimeGetSeconds(CMTime)");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "handleFailureInFunction:file:lineNumber:description:", v5, CFSTR("WFAnimatedGIFTranscoder.m"), 40, CFSTR("%s"), dlerror());

    __break(1u);
  }
}

void sub_20BBD72F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void __getAVAssetImageGeneratorClass_block_invoke(uint64_t a1)
{
  void *v2;
  void *v3;

  AVFoundationLibrary_3061();
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = objc_getClass("AVAssetImageGenerator");
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    getAVAssetImageGeneratorClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  }
  else
  {
    objc_msgSend(MEMORY[0x24BDD1448], "currentHandler");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "Class getAVAssetImageGeneratorClass(void)_block_invoke");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, CFSTR("WFAnimatedGIFTranscoder.m"), 48, CFSTR("Unable to find class %s"), "AVAssetImageGenerator");

    __break(1u);
  }
}

void getkCMTimeZero(uint64_t a1)
{
  _QWORD *v2;
  void *v3;
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;

  v6 = 0;
  v7 = &v6;
  v8 = 0x2020000000;
  v2 = (_QWORD *)getkCMTimeZeroSymbolLoc_ptr;
  v9 = getkCMTimeZeroSymbolLoc_ptr;
  if (!getkCMTimeZeroSymbolLoc_ptr)
  {
    v3 = CoreMediaLibrary();
    v2 = dlsym(v3, "kCMTimeZero");
    v7[3] = (uint64_t)v2;
    getkCMTimeZeroSymbolLoc_ptr = (uint64_t)v2;
  }
  _Block_object_dispose(&v6, 8);
  if (v2)
  {
    *(_OWORD *)a1 = *(_OWORD *)v2;
    *(_QWORD *)(a1 + 16) = v2[2];
  }
  else
  {
    objc_msgSend(MEMORY[0x24BDD1448], "currentHandler");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "CMTime getkCMTimeZero(void)");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "handleFailureInFunction:file:lineNumber:description:", v5, CFSTR("WFAnimatedGIFTranscoder.m"), 39, CFSTR("%s"), dlerror());

    __break(1u);
  }
}

void sub_20BBD74C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void soft_CMTimeMake(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  void *v12;

  v9 = 0;
  v10 = &v9;
  v11 = 0x2020000000;
  v5 = getCMTimeMakeSymbolLoc_ptr;
  v12 = getCMTimeMakeSymbolLoc_ptr;
  if (!getCMTimeMakeSymbolLoc_ptr)
  {
    v6 = CoreMediaLibrary();
    v5 = dlsym(v6, "CMTimeMake");
    v10[3] = (uint64_t)v5;
    getCMTimeMakeSymbolLoc_ptr = v5;
  }
  _Block_object_dispose(&v9, 8);
  if (v5)
  {
    ((void (*)(uint64_t, uint64_t))v5)(a2, a3);
  }
  else
  {
    objc_msgSend(MEMORY[0x24BDD1448], "currentHandler");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "CMTime soft_CMTimeMake(int64_t, int32_t)");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "handleFailureInFunction:file:lineNumber:description:", v8, CFSTR("WFAnimatedGIFTranscoder.m"), 41, CFSTR("%s"), dlerror());

    __break(1u);
  }
}

void sub_20BBD75F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void *CoreMediaLibrary()
{
  void *v0;
  void *v2;
  void *v3;

  if (!CoreMediaLibraryCore_frameworkLibrary)
    CoreMediaLibraryCore_frameworkLibrary = _sl_dlopen();
  v0 = (void *)CoreMediaLibraryCore_frameworkLibrary;
  if (!CoreMediaLibraryCore_frameworkLibrary)
  {
    objc_msgSend(MEMORY[0x24BDD1448], "currentHandler");
    v0 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "void *CoreMediaLibrary(void)");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v2, CFSTR("WFAnimatedGIFTranscoder.m"), 38, CFSTR("%s"), 0);

    __break(1u);
    free(v3);
  }
  return v0;
}

uint64_t __Block_byref_object_copy__18(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__19(uint64_t a1)
{

}

void sub_20BBD7E08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41)
{
  _Block_object_dispose(&a41, 8);
  _Unwind_Resume(a1);
}

void *AVFoundationLibrary_3061()
{
  void *v0;
  void *v2;
  void *v3;

  if (!AVFoundationLibraryCore_frameworkLibrary_3065)
    AVFoundationLibraryCore_frameworkLibrary_3065 = _sl_dlopen();
  v0 = (void *)AVFoundationLibraryCore_frameworkLibrary_3065;
  if (!AVFoundationLibraryCore_frameworkLibrary_3065)
  {
    objc_msgSend(MEMORY[0x24BDD1448], "currentHandler");
    v0 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "void *AVFoundationLibrary(void)");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v2, CFSTR("WFAnimatedGIFTranscoder.m"), 46, CFSTR("%s"), 0);

    __break(1u);
    free(v3);
  }
  return v0;
}

void WFAddImageFileToGIF(void *a1, void *a2, void *a3, void *a4, double a5, double a6, double a7)
{
  id v13;
  id v14;
  id v15;
  id v16;
  NSObject *v17;
  id v18;
  id v19;
  id v20;
  id v21;
  _QWORD block[4];
  id v23;
  id v24;
  id v25;
  id v26;
  double v27;
  double v28;
  double v29;

  v13 = a1;
  v14 = a2;
  v15 = a3;
  v16 = a4;
  dispatch_get_global_queue(0, 0);
  v17 = objc_claimAutoreleasedReturnValue();
  block[0] = MEMORY[0x24BDAC760];
  block[1] = 3221225472;
  block[2] = __WFAddImageFileToGIF_block_invoke;
  block[3] = &unk_24C4DC5C8;
  v27 = a6;
  v28 = a7;
  v23 = v14;
  v24 = v13;
  v25 = v15;
  v26 = v16;
  v29 = a5;
  v18 = v15;
  v19 = v16;
  v20 = v13;
  v21 = v14;
  dispatch_async(v17, block);

}

id WFGenerateImageFilesFromGIF(void *a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id v7;
  void *v8;
  void *v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  void *v14;
  void *v15;
  NSObject *v16;
  uint64_t v17;
  _QWORD v19[5];
  _QWORD block[4];
  id v21;
  id v22;
  _QWORD *v23;
  void *v24;
  _QWORD v25[3];
  char v26;
  _QWORD v27[2];
  _QWORD v28[3];

  v28[2] = *MEMORY[0x24BDAC8D0];
  v5 = a1;
  v6 = a2;
  v7 = a3;
  if (!v7)
    goto LABEL_6;
  objc_msgSend(v5, "wfType");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = (void *)*MEMORY[0x24BDF83D8];
  v10 = objc_msgSend(v8, "conformsToUTType:", *MEMORY[0x24BDF83D8]);

  if ((v10 & 1) == 0)
  {
    (*((void (**)(id, _QWORD, _QWORD))v7 + 2))(v7, 0, 0);
LABEL_6:
    v15 = 0;
    goto LABEL_7;
  }
  v11 = *MEMORY[0x24BDD97D0];
  v28[0] = MEMORY[0x24BDBD1C0];
  v12 = *MEMORY[0x24BDD9810];
  v27[0] = v11;
  v27[1] = v12;
  objc_msgSend(v9, "identifier");
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  v28[1] = v13;
  objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", v28, v27, 2);
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  v15 = WFImageSourceCreateFromFile(v5, v14);

  if (v15)
  {
    v25[0] = 0;
    v25[1] = v25;
    v25[2] = 0x2020000000;
    v26 = 0;
    dispatch_get_global_queue(0, 0);
    v16 = objc_claimAutoreleasedReturnValue();
    v17 = MEMORY[0x24BDAC760];
    block[0] = MEMORY[0x24BDAC760];
    block[1] = 3221225472;
    block[2] = __WFGenerateImageFilesFromGIF_block_invoke;
    block[3] = &unk_24C4DC5F0;
    v23 = v25;
    v24 = v15;
    v21 = v6;
    v22 = v7;
    dispatch_async(v16, block);

    v19[0] = v17;
    v19[1] = 3221225472;
    v19[2] = __WFGenerateImageFilesFromGIF_block_invoke_2;
    v19[3] = &unk_24C4E3118;
    v19[4] = v25;
    v15 = _Block_copy(v19);

    _Block_object_dispose(v25, 8);
  }
  else
  {
    (*((void (**)(id, _QWORD, _QWORD))v7 + 2))(v7, 0, 0);
  }
LABEL_7:

  return v15;
}

id WFGenerateVideoFromGIF(void *a1, void *a2, uint64_t a3, void *a4)
{
  id v7;
  void (**v8)(id, _QWORD, id);
  void *v9;
  void *v10;
  objc_class *v11;
  id v12;
  void *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  void *v18;
  CGImageSourceRef v19;
  CGImageSource *v20;
  size_t Count;
  void *v22;
  void *v23;
  size_t v24;
  double v25;
  double v26;
  void *v27;
  uint64_t v28;
  id *p_class_meths;
  void *v30;
  double v31;
  double v32;
  void *v33;
  double v34;
  double v35;
  id *v36;
  void *v37;
  id *v38;
  void *v39;
  id *v40;
  void *v41;
  id *v42;
  void *v43;
  id *v44;
  void *v45;
  id *v46;
  void *v47;
  id *v48;
  void *v49;
  id v50;
  id *v51;
  void *v52;
  id v53;
  void *v54;
  id v55;
  void *v56;
  void *v57;
  id v58;
  void *v59;
  void *v60;
  id *v61;
  id v62;
  uint64_t v63;
  char **__ptr32 *v64;
  uint64_t v65;
  id v66;
  void (**v67)(id, _QWORD, id);
  id v68;
  id v70;
  id v71;
  id v72;
  id v73;
  id v74;
  id v75;
  uint64_t v76;
  void *v77;
  uint64_t v78;
  void *v79;
  uint64_t v80;
  id v81;
  id v82;
  void *v83;
  void *v84;
  id v85;
  _QWORD aBlock[4];
  id v87;
  id v88;
  void (**v89)(id, _QWORD, id);
  id *v90;
  uint64_t v91;
  void (*v92)(uint64_t);
  void *v93;
  id v94;
  id v95;
  id v96;
  id v97;
  id v98;
  id v99;
  id v100;
  uint64_t *v101;
  _QWORD *v102;
  uint64_t *v103;
  uint64_t *v104;
  uint64_t v105;
  size_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  void *v110;
  _QWORD v111[3];
  _QWORD v112[4];
  _BYTE v113[24];
  uint64_t v114;
  uint64_t *v115;
  uint64_t v116;
  CGImageSourceRef v117;
  id v118;
  uint64_t v119;
  uint64_t *v120;
  uint64_t v121;
  uint64_t v122;
  _QWORD v123[3];
  _QWORD v124[3];
  _QWORD v125[4];
  _QWORD v126[4];
  _QWORD v127[2];
  _QWORD v128[4];

  v128[2] = *MEMORY[0x24BDAC8D0];
  v85 = a1;
  v7 = a2;
  v8 = a4;
  if (v8)
  {
    v80 = a3;
    objc_msgSend(MEMORY[0x24BEC14A0], "typeWithUTType:", *MEMORY[0x24BDF8498]);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    +[WFFileRepresentation proposedFilenameForFile:ofType:](WFFileRepresentation, "proposedFilenameForFile:ofType:", v7, v9);
    v84 = (void *)objc_claimAutoreleasedReturnValue();
    +[WFTemporaryFileManager proposedTemporaryFileURLForFilename:](WFTemporaryFileManager, "proposedTemporaryFileURLForFilename:", v84);
    v83 = (void *)objc_claimAutoreleasedReturnValue();
    v119 = 0;
    v120 = &v119;
    v121 = 0x2050000000;
    v10 = (void *)getAVAssetWriterClass_softClass;
    v122 = getAVAssetWriterClass_softClass;
    if (!getAVAssetWriterClass_softClass)
    {
      v107 = MEMORY[0x24BDAC760];
      v108 = 3221225472;
      v109 = (uint64_t)__getAVAssetWriterClass_block_invoke;
      v110 = &unk_24C4E3118;
      v111[0] = &v119;
      __getAVAssetWriterClass_block_invoke((uint64_t)&v107);
      v10 = (void *)v120[3];
    }
    v11 = objc_retainAutorelease(v10);
    _Block_object_dispose(&v119, 8);
    v12 = [v11 alloc];
    objc_msgSend(v9, "string");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    v118 = 0;
    v14 = (void *)objc_msgSend(v12, "initWithURL:fileType:error:", v83, v13, &v118);
    v82 = v118;

    if (!v14)
    {
      v8[2](v8, 0, v82);
      v23 = 0;
LABEL_51:

      goto LABEL_52;
    }
    v114 = 0;
    v115 = &v114;
    v116 = 0x2020000000;
    v117 = 0;
    v15 = *MEMORY[0x24BDD97D0];
    v128[0] = MEMORY[0x24BDBD1C8];
    v16 = *MEMORY[0x24BDD9810];
    v127[0] = v15;
    v127[1] = v16;
    objc_msgSend((id)*MEMORY[0x24BDF83D8], "identifier");
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    v128[1] = v17;
    objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", v128, v127, 2);
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    v19 = WFImageSourceCreateFromFile(v85, v18);

    v117 = v19;
    v20 = (CGImageSource *)v115[3];
    if (!v20)
    {
      v8[2](v8, 0, v82);
      v23 = 0;
LABEL_50:
      _Block_object_dispose(&v114, 8);
      goto LABEL_51;
    }
    Count = CGImageSourceGetCount(v20);
    if (Count <= 1)
    {
      CFRelease((CFTypeRef)v115[3]);
      objc_msgSend(MEMORY[0x24BDD1540], "errorWithDomain:code:userInfo:", CFSTR("WFAnimatedGIFTranscoderErrorDomain"), 0, 0);
      v22 = (void *)objc_claimAutoreleasedReturnValue();
      v8[2](v8, 0, v22);
      v23 = 0;
LABEL_49:

      goto LABEL_50;
    }
    v24 = 0;
    v26 = *MEMORY[0x24BDBF148];
    v25 = *(double *)(MEMORY[0x24BDBF148] + 8);
    v27 = (void *)*MEMORY[0x24BDD96C0];
    v28 = *MEMORY[0x24BDD96C8];
    do
    {
      p_class_meths = (id *)CGImageSourceCopyPropertiesAtIndex((CGImageSourceRef)v115[3], v24, 0);
      objc_msgSend(p_class_meths, "objectForKey:", v27);
      v30 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v30, "doubleValue");
      v32 = v31;

      objc_msgSend(p_class_meths, "objectForKey:", v28);
      v33 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v33, "doubleValue");
      v35 = v34;

      v25 = fmax(v25, v32);
      v26 = fmax(v26, v35);
      ++v24;
    }
    while (Count != v24);
    v107 = 0;
    v108 = (uint64_t)&v107;
    v109 = 0x2020000000;
    v36 = (id *)getAVVideoCodecKeySymbolLoc_ptr;
    v110 = (void *)getAVVideoCodecKeySymbolLoc_ptr;
    if (!getAVVideoCodecKeySymbolLoc_ptr)
    {
      v37 = AVFoundationLibrary_3061();
      v36 = (id *)dlsym(v37, "AVVideoCodecKey");
      *(_QWORD *)(v108 + 24) = v36;
      getAVVideoCodecKeySymbolLoc_ptr = (uint64_t)v36;
    }
    _Block_object_dispose(&v107, 8);
    if (v36)
    {
      v75 = *v36;
      v125[0] = v75;
      v107 = 0;
      v108 = (uint64_t)&v107;
      v109 = 0x2020000000;
      v38 = (id *)getAVVideoCodecTypeH264SymbolLoc_ptr;
      v110 = (void *)getAVVideoCodecTypeH264SymbolLoc_ptr;
      if (!getAVVideoCodecTypeH264SymbolLoc_ptr)
      {
        v39 = AVFoundationLibrary_3061();
        v38 = (id *)dlsym(v39, "AVVideoCodecTypeH264");
        *(_QWORD *)(v108 + 24) = v38;
        getAVVideoCodecTypeH264SymbolLoc_ptr = (uint64_t)v38;
      }
      _Block_object_dispose(&v107, 8);
      if (v38)
      {
        v74 = *v38;
        v126[0] = v74;
        v107 = 0;
        v108 = (uint64_t)&v107;
        v109 = 0x2020000000;
        v40 = (id *)getAVVideoWidthKeySymbolLoc_ptr;
        v110 = (void *)getAVVideoWidthKeySymbolLoc_ptr;
        if (!getAVVideoWidthKeySymbolLoc_ptr)
        {
          v41 = AVFoundationLibrary_3061();
          v40 = (id *)dlsym(v41, "AVVideoWidthKey");
          *(_QWORD *)(v108 + 24) = v40;
          getAVVideoWidthKeySymbolLoc_ptr = (uint64_t)v40;
        }
        _Block_object_dispose(&v107, 8);
        if (v40)
        {
          v73 = *v40;
          v125[1] = v73;
          objc_msgSend(MEMORY[0x24BDD16E0], "numberWithDouble:", v26);
          v79 = (void *)objc_claimAutoreleasedReturnValue();
          v126[1] = v79;
          v107 = 0;
          v108 = (uint64_t)&v107;
          v109 = 0x2020000000;
          p_class_meths = (id *)&OBJC_PROTOCOL___NSObject.class_meths;
          v42 = (id *)getAVVideoHeightKeySymbolLoc_ptr;
          v110 = (void *)getAVVideoHeightKeySymbolLoc_ptr;
          if (!getAVVideoHeightKeySymbolLoc_ptr)
          {
            v43 = AVFoundationLibrary_3061();
            v42 = (id *)dlsym(v43, "AVVideoHeightKey");
            *(_QWORD *)(v108 + 24) = v42;
            getAVVideoHeightKeySymbolLoc_ptr = (uint64_t)v42;
          }
          _Block_object_dispose(&v107, 8);
          if (v42)
          {
            v72 = *v42;
            v125[2] = v72;
            objc_msgSend(MEMORY[0x24BDD16E0], "numberWithDouble:", v25);
            v77 = (void *)objc_claimAutoreleasedReturnValue();
            v126[2] = v77;
            v107 = 0;
            v108 = (uint64_t)&v107;
            v109 = 0x2020000000;
            v44 = (id *)getAVVideoCompressionPropertiesKeySymbolLoc_ptr;
            v110 = (void *)getAVVideoCompressionPropertiesKeySymbolLoc_ptr;
            if (!getAVVideoCompressionPropertiesKeySymbolLoc_ptr)
            {
              v45 = AVFoundationLibrary_3061();
              v44 = (id *)dlsym(v45, "AVVideoCompressionPropertiesKey");
              *(_QWORD *)(v108 + 24) = v44;
              getAVVideoCompressionPropertiesKeySymbolLoc_ptr = (uint64_t)v44;
            }
            _Block_object_dispose(&v107, 8);
            if (v44)
            {
              v71 = *v44;
              v125[3] = v71;
              v107 = 0;
              v108 = (uint64_t)&v107;
              v109 = 0x2020000000;
              v46 = (id *)getAVVideoAverageBitRateKeySymbolLoc_ptr;
              v110 = (void *)getAVVideoAverageBitRateKeySymbolLoc_ptr;
              if (!getAVVideoAverageBitRateKeySymbolLoc_ptr)
              {
                v47 = AVFoundationLibrary_3061();
                v46 = (id *)dlsym(v47, "AVVideoAverageBitRateKey");
                *(_QWORD *)(v108 + 24) = v46;
                getAVVideoAverageBitRateKeySymbolLoc_ptr = (uint64_t)v46;
              }
              _Block_object_dispose(&v107, 8);
              if (v46)
              {
                v70 = *v46;
                v123[0] = v70;
                v124[0] = &unk_24C50F1D0;
                v107 = 0;
                v108 = (uint64_t)&v107;
                v109 = 0x2020000000;
                v48 = (id *)getAVVideoProfileLevelKeySymbolLoc_ptr;
                v110 = (void *)getAVVideoProfileLevelKeySymbolLoc_ptr;
                if (!getAVVideoProfileLevelKeySymbolLoc_ptr)
                {
                  v49 = AVFoundationLibrary_3061();
                  v48 = (id *)dlsym(v49, "AVVideoProfileLevelKey");
                  *(_QWORD *)(v108 + 24) = v48;
                  getAVVideoProfileLevelKeySymbolLoc_ptr = (uint64_t)v48;
                }
                _Block_object_dispose(&v107, 8);
                if (v48)
                {
                  v50 = *v48;
                  v123[1] = v50;
                  v107 = 0;
                  v108 = (uint64_t)&v107;
                  v109 = 0x2020000000;
                  v51 = (id *)getAVVideoProfileLevelH264High41SymbolLoc_ptr;
                  v110 = (void *)getAVVideoProfileLevelH264High41SymbolLoc_ptr;
                  if (!getAVVideoProfileLevelH264High41SymbolLoc_ptr)
                  {
                    v52 = AVFoundationLibrary_3061();
                    v51 = (id *)dlsym(v52, "AVVideoProfileLevelH264High41");
                    *(_QWORD *)(v108 + 24) = v51;
                    getAVVideoProfileLevelH264High41SymbolLoc_ptr = (uint64_t)v51;
                  }
                  _Block_object_dispose(&v107, 8);
                  if (v51)
                  {
                    v53 = *v51;
                    v124[1] = v53;
                    v107 = 0;
                    v108 = (uint64_t)&v107;
                    v109 = 0x2020000000;
                    p_class_meths = (id *)getAVVideoMaxKeyFrameIntervalKeySymbolLoc_ptr;
                    v110 = (void *)getAVVideoMaxKeyFrameIntervalKeySymbolLoc_ptr;
                    if (!getAVVideoMaxKeyFrameIntervalKeySymbolLoc_ptr)
                    {
                      v54 = AVFoundationLibrary_3061();
                      p_class_meths = (id *)dlsym(v54, "AVVideoMaxKeyFrameIntervalKey");
                      *(_QWORD *)(v108 + 24) = p_class_meths;
                      getAVVideoMaxKeyFrameIntervalKeySymbolLoc_ptr = (uint64_t)p_class_meths;
                    }
                    _Block_object_dispose(&v107, 8);
                    if (p_class_meths)
                    {
                      v55 = *p_class_meths;
                      v123[2] = v55;
                      v124[2] = &unk_24C50F1E8;
                      objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", v124, v123, 3);
                      v56 = (void *)objc_claimAutoreleasedReturnValue();
                      v126[3] = v56;
                      objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", v126, v125, 4);
                      v76 = objc_claimAutoreleasedReturnValue();

                      v119 = 0;
                      v120 = &v119;
                      v121 = 0x2050000000;
                      v57 = (void *)getAVAssetWriterInputClass_softClass;
                      v122 = getAVAssetWriterInputClass_softClass;
                      if (!getAVAssetWriterInputClass_softClass)
                      {
                        v107 = MEMORY[0x24BDAC760];
                        v108 = 3221225472;
                        v109 = (uint64_t)__getAVAssetWriterInputClass_block_invoke;
                        v110 = &unk_24C4E3118;
                        v111[0] = &v119;
                        __getAVAssetWriterInputClass_block_invoke((uint64_t)&v107);
                        v57 = (void *)v120[3];
                      }
                      v58 = objc_retainAutorelease(v57);
                      _Block_object_dispose(&v119, 8);
                      getAVMediaTypeVideo();
                      v59 = (void *)objc_claimAutoreleasedReturnValue();
                      objc_msgSend(v58, "assetWriterInputWithMediaType:outputSettings:", v59, v76);
                      v27 = (void *)objc_claimAutoreleasedReturnValue();

                      objc_msgSend(v27, "setExpectsMediaDataInRealTime:", 0);
                      if ((objc_msgSend(v14, "canAddInput:", v27) & 1) == 0)
                      {
                        v8[2](v8, 0, 0);
                        v23 = 0;
                        goto LABEL_48;
                      }
                      objc_msgSend(v14, "addInput:", v27);
                      v119 = 0;
                      v120 = &v119;
                      v121 = 0x2050000000;
                      v60 = (void *)getAVAssetWriterInputPixelBufferAdaptorClass_softClass;
                      v122 = getAVAssetWriterInputPixelBufferAdaptorClass_softClass;
                      v61 = (id *)MEMORY[0x24BDAC760];
                      if (!getAVAssetWriterInputPixelBufferAdaptorClass_softClass)
                      {
                        v107 = MEMORY[0x24BDAC760];
                        v108 = 3221225472;
                        v109 = (uint64_t)__getAVAssetWriterInputPixelBufferAdaptorClass_block_invoke;
                        v110 = &unk_24C4E3118;
                        v111[0] = &v119;
                        __getAVAssetWriterInputPixelBufferAdaptorClass_block_invoke((uint64_t)&v107);
                        v60 = (void *)v120[3];
                      }
                      v62 = objc_retainAutorelease(v60);
                      _Block_object_dispose(&v119, 8);
                      objc_msgSend(v62, "assetWriterInputPixelBufferAdaptorWithAssetWriterInput:sourcePixelBufferAttributes:", v27, 0);
                      v63 = objc_claimAutoreleasedReturnValue();
                      objc_msgSend(v14, "startWriting");
                      getkCMTimeZero((uint64_t)v113);
                      objc_msgSend(v14, "startSessionAtSourceTime:", v113);
                      v79 = (void *)v63;
                      v64 = &off_20BC99000;
                      p_class_meths = v61;
                      if (WFGenerateVideoFromGIF_onceToken == -1)
                      {
LABEL_46:
                        v119 = 0;
                        v120 = &v119;
                        v121 = 0x2020000000;
                        v122 = 0;
                        v112[0] = 0;
                        v112[1] = v112;
                        v112[2] = 0x2020000000;
                        v112[3] = 0;
                        v107 = 0;
                        v108 = (uint64_t)&v107;
                        v109 = 0x3810000000;
                        v110 = &unk_20BCBA407;
                        memset(v111, 0, sizeof(v111));
                        getkCMTimeZero((uint64_t)v111);
                        v78 = WFGenerateVideoFromGIF_videoWriterQueue;
                        v90 = p_class_meths;
                        v91 = *((_QWORD *)v64 + 373);
                        v65 = v91;
                        v92 = __WFGenerateVideoFromGIF_block_invoke_2;
                        v93 = &unk_24C4DC638;
                        v101 = &v119;
                        v102 = v112;
                        v105 = v80;
                        v106 = Count;
                        v103 = &v114;
                        v94 = v27;
                        v81 = v79;
                        v95 = v81;
                        v104 = &v107;
                        v66 = v14;
                        v96 = v66;
                        v67 = v8;
                        v100 = v67;
                        v68 = v83;
                        v97 = v68;
                        v98 = v9;
                        v99 = v84;
                        objc_msgSend(v94, "requestMediaDataWhenReadyOnQueue:usingBlock:", v78, &v90);
                        aBlock[0] = p_class_meths;
                        aBlock[1] = v65;
                        aBlock[2] = __WFGenerateVideoFromGIF_block_invoke_4;
                        aBlock[3] = &unk_24C4E2DD0;
                        v87 = v66;
                        v88 = v68;
                        v89 = v67;
                        v23 = _Block_copy(aBlock);

                        _Block_object_dispose(&v107, 8);
                        _Block_object_dispose(v112, 8);
                        _Block_object_dispose(&v119, 8);

LABEL_48:
                        v22 = (void *)v76;
                        goto LABEL_49;
                      }
LABEL_63:
                      dispatch_once(&WFGenerateVideoFromGIF_onceToken, &__block_literal_global_33);
                      goto LABEL_46;
                    }
                    objc_msgSend(MEMORY[0x24BDD1448], "currentHandler");
                    v64 = (char **__ptr32 *)objc_claimAutoreleasedReturnValue();
                    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "NSString *getAVVideoMaxKeyFrameIntervalKey(void)");
                    v7 = (id)objc_claimAutoreleasedReturnValue();
                    objc_msgSend(v64, "handleFailureInFunction:file:lineNumber:description:", v7, CFSTR("WFAnimatedGIFTranscoder.m"), 60, CFSTR("%s"), dlerror(), v70, v71);

                  }
                  else
                  {
                    objc_msgSend(MEMORY[0x24BDD1448], "currentHandler");
                    v64 = (char **__ptr32 *)objc_claimAutoreleasedReturnValue();
                    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "NSString *getAVVideoProfileLevelH264High41(void)");
                    v7 = (id)objc_claimAutoreleasedReturnValue();
                    objc_msgSend(v64, "handleFailureInFunction:file:lineNumber:description:", v7, CFSTR("WFAnimatedGIFTranscoder.m"), 62, CFSTR("%s"), dlerror(), v70, v71);

                  }
                }
                else
                {
                  objc_msgSend(MEMORY[0x24BDD1448], "currentHandler");
                  v64 = (char **__ptr32 *)objc_claimAutoreleasedReturnValue();
                  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "NSString *getAVVideoProfileLevelKey(void)");
                  v7 = (id)objc_claimAutoreleasedReturnValue();
                  objc_msgSend(v64, "handleFailureInFunction:file:lineNumber:description:", v7, CFSTR("WFAnimatedGIFTranscoder.m"), 59, CFSTR("%s"), dlerror(), v70, v71);

                }
              }
              else
              {
                objc_msgSend(MEMORY[0x24BDD1448], "currentHandler");
                v64 = (char **__ptr32 *)objc_claimAutoreleasedReturnValue();
                objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "NSString *getAVVideoAverageBitRateKey(void)");
                v7 = (id)objc_claimAutoreleasedReturnValue();
                objc_msgSend(v64, "handleFailureInFunction:file:lineNumber:description:", v7, CFSTR("WFAnimatedGIFTranscoder.m"), 58, CFSTR("%s"), dlerror());

              }
            }
            else
            {
              objc_msgSend(MEMORY[0x24BDD1448], "currentHandler");
              v64 = (char **__ptr32 *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "NSString *getAVVideoCompressionPropertiesKey(void)");
              v7 = (id)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v64, "handleFailureInFunction:file:lineNumber:description:", v7, CFSTR("WFAnimatedGIFTranscoder.m"), 57, CFSTR("%s"), dlerror());

            }
          }
          else
          {
            objc_msgSend(MEMORY[0x24BDD1448], "currentHandler");
            v64 = (char **__ptr32 *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "NSString *getAVVideoHeightKey(void)");
            v7 = (id)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v64, "handleFailureInFunction:file:lineNumber:description:", v7, CFSTR("WFAnimatedGIFTranscoder.m"), 56, CFSTR("%s"), dlerror());

          }
        }
        else
        {
          objc_msgSend(MEMORY[0x24BDD1448], "currentHandler");
          v64 = (char **__ptr32 *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "NSString *getAVVideoWidthKey(void)");
          v7 = (id)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v64, "handleFailureInFunction:file:lineNumber:description:", v7, CFSTR("WFAnimatedGIFTranscoder.m"), 55, CFSTR("%s"), dlerror());

        }
      }
      else
      {
        objc_msgSend(MEMORY[0x24BDD1448], "currentHandler");
        v64 = (char **__ptr32 *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "AVVideoCodecType getAVVideoCodecTypeH264(void)");
        v7 = (id)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v64, "handleFailureInFunction:file:lineNumber:description:", v7, CFSTR("WFAnimatedGIFTranscoder.m"), 61, CFSTR("%s"), dlerror());

      }
    }
    else
    {
      objc_msgSend(MEMORY[0x24BDD1448], "currentHandler");
      v64 = (char **__ptr32 *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "NSString *getAVVideoCodecKey(void)");
      v7 = (id)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v64, "handleFailureInFunction:file:lineNumber:description:", v7, CFSTR("WFAnimatedGIFTranscoder.m"), 54, CFSTR("%s"), dlerror());

    }
    __break(1u);
    goto LABEL_63;
  }
  v23 = 0;
LABEL_52:

  return v23;
}

void sub_20BBD9A00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,char a62,uint64_t a63)
{
  char a67;

  _Block_object_dispose(&a67, 8);
  _Block_object_dispose(&a62, 8);
  _Unwind_Resume(a1);
}

void __getAVAssetWriterClass_block_invoke(uint64_t a1)
{
  void *v2;
  void *v3;

  AVFoundationLibrary_3061();
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = objc_getClass("AVAssetWriter");
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    getAVAssetWriterClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  }
  else
  {
    objc_msgSend(MEMORY[0x24BDD1448], "currentHandler");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "Class getAVAssetWriterClass(void)_block_invoke");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, CFSTR("WFAnimatedGIFTranscoder.m"), 49, CFSTR("Unable to find class %s"), "AVAssetWriter");

    __break(1u);
  }
}

void __getAVAssetWriterInputClass_block_invoke(uint64_t a1)
{
  void *v2;
  void *v3;

  AVFoundationLibrary_3061();
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = objc_getClass("AVAssetWriterInput");
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    getAVAssetWriterInputClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  }
  else
  {
    objc_msgSend(MEMORY[0x24BDD1448], "currentHandler");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "Class getAVAssetWriterInputClass(void)_block_invoke");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, CFSTR("WFAnimatedGIFTranscoder.m"), 50, CFSTR("Unable to find class %s"), "AVAssetWriterInput");

    __break(1u);
  }
}

void __getAVAssetWriterInputPixelBufferAdaptorClass_block_invoke(uint64_t a1)
{
  void *v2;
  void *v3;

  AVFoundationLibrary_3061();
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = objc_getClass("AVAssetWriterInputPixelBufferAdaptor");
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    getAVAssetWriterInputPixelBufferAdaptorClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  }
  else
  {
    objc_msgSend(MEMORY[0x24BDD1448], "currentHandler");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "Class getAVAssetWriterInputPixelBufferAdaptorClass(void)_block_invoke");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, CFSTR("WFAnimatedGIFTranscoder.m"), 51, CFSTR("Unable to find class %s"), "AVAssetWriterInputPixelBufferAdaptor");

    __break(1u);
  }
}

void sub_20BBDA804(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 192), 8);
  _Unwind_Resume(a1);
}

void *CoreVideoLibrary()
{
  void *v0;
  void *v2;
  void *v3;

  if (!CoreVideoLibraryCore_frameworkLibrary)
    CoreVideoLibraryCore_frameworkLibrary = _sl_dlopen();
  v0 = (void *)CoreVideoLibraryCore_frameworkLibrary;
  if (!CoreVideoLibraryCore_frameworkLibrary)
  {
    objc_msgSend(MEMORY[0x24BDD1448], "currentHandler");
    v0 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "void *CoreVideoLibrary(void)");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v2, CFSTR("WFAnimatedGIFTranscoder.m"), 26, CFSTR("%s"), 0);

    __break(1u);
    free(v3);
  }
  return v0;
}

void soft_CVPixelBufferGetWidth(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  void *v9;

  v6 = 0;
  v7 = &v6;
  v8 = 0x2020000000;
  v2 = getCVPixelBufferGetWidthSymbolLoc_ptr;
  v9 = getCVPixelBufferGetWidthSymbolLoc_ptr;
  if (!getCVPixelBufferGetWidthSymbolLoc_ptr)
  {
    v3 = CoreVideoLibrary();
    v2 = dlsym(v3, "CVPixelBufferGetWidth");
    v7[3] = (uint64_t)v2;
    getCVPixelBufferGetWidthSymbolLoc_ptr = v2;
  }
  _Block_object_dispose(&v6, 8);
  if (v2)
  {
    ((void (*)(uint64_t))v2)(a1);
  }
  else
  {
    objc_msgSend(MEMORY[0x24BDD1448], "currentHandler");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "size_t soft_CVPixelBufferGetWidth(CVPixelBufferRef _Nonnull)");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "handleFailureInFunction:file:lineNumber:description:", v5, CFSTR("WFAnimatedGIFTranscoder.m"), 34, CFSTR("%s"), dlerror());

    __break(1u);
  }
}

void sub_20BBDAB58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void soft_CVPixelBufferGetHeight(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  void *v9;

  v6 = 0;
  v7 = &v6;
  v8 = 0x2020000000;
  v2 = getCVPixelBufferGetHeightSymbolLoc_ptr;
  v9 = getCVPixelBufferGetHeightSymbolLoc_ptr;
  if (!getCVPixelBufferGetHeightSymbolLoc_ptr)
  {
    v3 = CoreVideoLibrary();
    v2 = dlsym(v3, "CVPixelBufferGetHeight");
    v7[3] = (uint64_t)v2;
    getCVPixelBufferGetHeightSymbolLoc_ptr = v2;
  }
  _Block_object_dispose(&v6, 8);
  if (v2)
  {
    ((void (*)(uint64_t))v2)(a1);
  }
  else
  {
    objc_msgSend(MEMORY[0x24BDD1448], "currentHandler");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "size_t soft_CVPixelBufferGetHeight(CVPixelBufferRef _Nonnull)");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "handleFailureInFunction:file:lineNumber:description:", v5, CFSTR("WFAnimatedGIFTranscoder.m"), 35, CFSTR("%s"), dlerror());

    __break(1u);
  }
}

void sub_20BBDAC60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

BOOL WFImageDataIsAnimatedGIF(void *a1)
{
  id v1;
  _BYTE *v2;
  _BOOL8 v3;

  v1 = a1;
  v3 = (unint64_t)objc_msgSend(v1, "length") >= 5
    && (v2 = (_BYTE *)objc_msgSend(objc_retainAutorelease(v1), "bytes"), *v2 == 71)
    && v2[1] == 73
    && v2[2] == 70;

  return v3;
}

id WFUIImageWithAnimatedGIFData(void *a1)
{
  void *v1;
  id v2;
  void *v3;
  double v4;
  void *v5;

  v1 = (void *)MEMORY[0x24BEC1440];
  v2 = a1;
  objc_msgSend(v1, "currentDevice");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "screenScale");
  WFUIImageWithAnimatedGIFDataAndOptions(v2, v4, 0.0);
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  return v5;
}

id WFUIImageWithAnimatedGIFDataAndOptions(void *a1, double a2, double a3)
{
  const __CFData *v5;
  void *v6;
  void *v7;
  CGImageSource *v8;
  size_t Count;
  uint64_t v10;
  void *v11;
  size_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  double v16;
  CGImage *ImageAtIndex;
  CFDictionaryRef v18;
  void *v19;
  void *v20;
  double v21;
  double v22;
  void *v23;
  void *v24;
  int v25;
  id v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  void *v30;
  Class UIImageClass;
  double v32;
  const __CFData *v34;
  void *v35;
  const __CFDictionary *options;

  v5 = a1;
  if (v5)
  {
    objc_msgSend(MEMORY[0x24BDBCED8], "dictionary");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "setObject:forKey:", MEMORY[0x24BDBD1C8], *MEMORY[0x24BDD97D0]);
    objc_msgSend((id)*MEMORY[0x24BDF83D8], "identifier");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "setObject:forKey:", v7, *MEMORY[0x24BDD9810]);

    options = (const __CFDictionary *)v6;
    v8 = CGImageSourceCreateWithData(v5, (CFDictionaryRef)v6);
    Count = CGImageSourceGetCount(v8);
    objc_msgSend(MEMORY[0x24BDBCEB8], "arrayWithCapacity:", Count);
    v10 = objc_claimAutoreleasedReturnValue();
    v11 = (void *)v10;
    if (Count)
    {
      v34 = v5;
      v35 = (void *)v10;
      v12 = 0;
      v13 = *MEMORY[0x24BDD9598];
      v14 = *MEMORY[0x24BDD9590];
      v15 = *MEMORY[0x24BDD9698];
      v16 = 0.0;
      do
      {
        ImageAtIndex = CGImageSourceCreateImageAtIndex(v8, v12, options);
        v18 = CGImageSourceCopyPropertiesAtIndex(v8, v12, 0);
        -[__CFDictionary objectForKey:](v18, "objectForKey:", v13);
        v19 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v19, "objectForKey:", v14);
        v20 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v20, "doubleValue");
        v22 = v21;

        -[__CFDictionary objectForKeyedSubscript:](v18, "objectForKeyedSubscript:", v15);
        v23 = (void *)objc_claimAutoreleasedReturnValue();
        v24 = v23;
        if (v23)
          v25 = objc_msgSend(v23, "integerValue");
        else
          v25 = 1;
        v26 = objc_alloc(getUIImageClass());
        if ((v25 - 2) > 6)
          v27 = 0;
        else
          v27 = qword_20BC9A430[v25 - 2];
        v16 = v16 + v22;
        v28 = (void *)objc_msgSend(v26, "initWithCGImage:scale:orientation:", ImageAtIndex, v27, a2);
        objc_msgSend(v35, "addObject:", v28);

        CGImageRelease(ImageAtIndex);
        ++v12;
      }
      while (Count != v12);
      CFRelease(v8);
      v5 = v34;
      v11 = v35;
      if (Count == 1)
      {
        objc_msgSend(v35, "firstObject");
        v29 = objc_claimAutoreleasedReturnValue();
LABEL_19:
        v30 = (void *)v29;

        goto LABEL_20;
      }
    }
    else
    {
      CFRelease(v8);
      v16 = 0.0;
    }
    UIImageClass = getUIImageClass();
    if (a3 > 0.0)
      v32 = a3;
    else
      v32 = v16;
    -[objc_class animatedImageWithImages:duration:](UIImageClass, "animatedImageWithImages:duration:", v11, v32);
    v29 = objc_claimAutoreleasedReturnValue();
    goto LABEL_19;
  }
  v30 = 0;
LABEL_20:

  return v30;
}

id UIImageFunction()
{
  return (id)classUIImage;
}

Class initUIImage()
{
  Class result;

  if (UIKitLibrary_sOnce_3105 != -1)
    dispatch_once(&UIKitLibrary_sOnce_3105, &__block_literal_global_86);
  result = objc_getClass("UIImage");
  classUIImage = (uint64_t)result;
  getUIImageClass = (uint64_t (*)())UIImageFunction;
  return result;
}

id WFUIImageAnimatedGIFRepresentation(void *a1)
{
  return WFUIImageAnimatedGIFRepresentationAndOptions(a1, 0, 0, 0.0);
}

id WFUIImageAnimatedGIFRepresentationAndOptions(void *a1, uint64_t a2, _QWORD *a3, double a4)
{
  id v7;
  void *v8;
  void *v9;
  size_t v10;
  double v11;
  uint64_t v12;
  void *v13;
  void *v14;
  const __CFDictionary *v15;
  __CFData *v16;
  __CFString *v17;
  CGImageDestination *v18;
  void *v19;
  void *v20;
  const __CFDictionary *v21;
  void *v22;
  uint64_t v23;
  unint64_t v24;
  void *v25;
  id v26;
  void *v27;
  unint64_t v28;
  BOOL v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  uint64_t v35;
  void *v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  void *v40;
  uint64_t v41;
  void *v42;
  uint64_t v43;
  _QWORD v44[2];

  v44[1] = *MEMORY[0x24BDAC8D0];
  v7 = a1;
  objc_msgSend(v7, "images");
  v8 = (void *)objc_claimAutoreleasedReturnValue();

  if (v8)
  {
    objc_msgSend(v7, "images");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    v10 = objc_msgSend(v9, "count");

    if (a4 <= 0.0)
    {
      objc_msgSend(v7, "duration");
      a4 = v11;
    }
    v43 = *MEMORY[0x24BDD9598];
    v12 = v43;
    v41 = *MEMORY[0x24BDD9590];
    objc_msgSend(MEMORY[0x24BDD16E0], "numberWithDouble:", a4 / (double)v10);
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    v42 = v13;
    objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", &v42, &v41, 1);
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    v44[0] = v14;
    objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", v44, &v43, 1);
    v15 = (const __CFDictionary *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(MEMORY[0x24BDBCEC8], "data");
    v16 = (__CFData *)objc_claimAutoreleasedReturnValue();
    objc_msgSend((id)*MEMORY[0x24BDF83D8], "identifier");
    v17 = (__CFString *)objc_claimAutoreleasedReturnValue();
    v18 = CGImageDestinationCreateWithData(v16, v17, v10, 0);

    v39 = v12;
    v37 = *MEMORY[0x24BDD95B0];
    objc_msgSend(MEMORY[0x24BDD16E0], "numberWithUnsignedInteger:", a2);
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    v38 = v19;
    objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", &v38, &v37, 1);
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    v40 = v20;
    objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", &v40, &v39, 1);
    v21 = (const __CFDictionary *)objc_claimAutoreleasedReturnValue();

    CGImageDestinationSetProperties(v18, v21);
    objc_msgSend(v7, "images");
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    v23 = objc_msgSend(v22, "count");

    if (v23)
    {
      v24 = 0;
      do
      {
        objc_msgSend(v7, "images");
        v25 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v25, "objectAtIndex:", v24);
        v26 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
        CGImageDestinationAddImage(v18, (CGImageRef)objc_msgSend(v26, "CGImage"), v15);

        ++v24;
        objc_msgSend(v7, "images");
        v27 = (void *)objc_claimAutoreleasedReturnValue();
        v28 = objc_msgSend(v27, "count");

      }
      while (v24 < v28);
    }
    v29 = CGImageDestinationFinalize(v18);
    CFRelease(v18);
    if (v29)
    {
      objc_msgSend(MEMORY[0x24BDBCE50], "dataWithData:", v16);
      v30 = (void *)objc_claimAutoreleasedReturnValue();

      v31 = 0;
    }
    else
    {
      v35 = *MEMORY[0x24BDD0FC8];
      objc_msgSend(MEMORY[0x24BDD1488], "mainBundle");
      v32 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v32, "localizedStringForKey:value:table:", CFSTR("Could not finalize image destination"), &stru_24C4E3948, 0);
      v33 = (void *)objc_claimAutoreleasedReturnValue();
      v36 = v33;
      objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", &v36, &v35, 1);
      v31 = (void *)objc_claimAutoreleasedReturnValue();

      v30 = 0;
      if (a3)
        *a3 = (id)objc_msgSend(objc_alloc(MEMORY[0x24BDD1540]), "initWithDomain:code:userInfo:", CFSTR("WFAnimatedGIFTranscoderErrorDomain"), -1, v31);
    }

  }
  else
  {
    v30 = 0;
  }

  return v30;
}

uint64_t EscapeMapCompare(unsigned __int16 *a1, uint64_t a2)
{
  unsigned int v2;
  unsigned int v3;
  BOOL v4;
  unsigned int v5;

  v2 = *a1;
  v3 = *(unsigned __int16 *)(a2 + 8);
  v4 = v2 > v3;
  if (v2 >= v3)
    v5 = 0;
  else
    v5 = -1;
  if (v4)
    return 1;
  else
    return v5;
}

void sub_20BBDD400(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _Block_object_dispose(&a9, 8);
  _Unwind_Resume(a1);
}

void __getREMObjectIDClass_block_invoke(uint64_t a1)
{
  void *v2;
  void *v3;

  ReminderKitLibrary();
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = objc_getClass("REMObjectID");
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    getREMObjectIDClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  }
  else
  {
    objc_msgSend(MEMORY[0x24BDD1448], "currentHandler");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "Class getREMObjectIDClass(void)_block_invoke");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, CFSTR("WFSerializableContentProvider.m"), 27, CFSTR("Unable to find class %s"), "REMObjectID");

    __break(1u);
  }
}

void ReminderKitLibrary()
{
  void *v0;
  void *v1;
  void *v2;

  if (!ReminderKitLibraryCore_frameworkLibrary)
    ReminderKitLibraryCore_frameworkLibrary = _sl_dlopen();
  if (!ReminderKitLibraryCore_frameworkLibrary)
  {
    objc_msgSend(MEMORY[0x24BDD1448], "currentHandler");
    v0 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "void *ReminderKitLibrary(void)");
    v1 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v1, CFSTR("WFSerializableContentProvider.m"), 25, CFSTR("%s"), 0);

    __break(1u);
    free(v2);
  }
}

void sub_20BBDD778(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void __getREMReminderClass_block_invoke(uint64_t a1)
{
  void *v2;
  void *v3;

  ReminderKitLibrary();
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = objc_getClass("REMReminder");
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    getREMReminderClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  }
  else
  {
    objc_msgSend(MEMORY[0x24BDD1448], "currentHandler");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "Class getREMReminderClass(void)_block_invoke");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, CFSTR("WFSerializableContentProvider.m"), 26, CFSTR("Unable to find class %s"), "REMReminder");

    __break(1u);
  }
}

id WFGetEKCalendarItemFromSerializedRepresentation(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  id v7;
  void *v8;
  void *v9;

  v1 = a1;
  WFGetWorkflowEventStore();
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "wfObjectOfClass:forKey:", objc_opt_class(), CFSTR("link.contentkit.ekcalendaritem"));
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v3, "wfObjectOfClass:forKey:", objc_opt_class(), CFSTR("calendarItemIdentifier"));
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "calendarItemWithIdentifier:", v4);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = v5;
  if (v5)
  {
    objc_setAssociatedObject(v5, &WFDeserializingEventStoreKey, v2, (void *)1);
    v7 = v6;
  }
  else
  {
    objc_msgSend(v3, "wfObjectOfClass:forKey:", objc_opt_class(), CFSTR("calendarItemExternalIdentifier"));
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "calendarItemsWithExternalIdentifier:", v8);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "firstObject");
    v7 = (id)objc_claimAutoreleasedReturnValue();

    if (v7)
      objc_setAssociatedObject(v7, &WFDeserializingEventStoreKey, v2, (void *)1);

  }
  return v7;
}

id getEKCalendarItemClass()
{
  void *v0;
  id v1;
  _QWORD v3[5];
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = 0;
  v5 = &v4;
  v6 = 0x2050000000;
  v0 = (void *)getEKCalendarItemClass_softClass;
  v7 = getEKCalendarItemClass_softClass;
  if (!getEKCalendarItemClass_softClass)
  {
    v3[0] = MEMORY[0x24BDAC760];
    v3[1] = 3221225472;
    v3[2] = __getEKCalendarItemClass_block_invoke;
    v3[3] = &unk_24C4E3118;
    v3[4] = &v4;
    __getEKCalendarItemClass_block_invoke((uint64_t)v3);
    v0 = (void *)v5[3];
  }
  v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_20BBDDEAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id WFGetSerializedRepresentationForEKCalendarItem(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  const __CFString *v8;
  void *v9;
  _QWORD v10[3];
  _QWORD v11[4];

  v11[3] = *MEMORY[0x24BDAC8D0];
  v10[0] = CFSTR("calendarItemIdentifier");
  v1 = a1;
  objc_msgSend(v1, "calendarItemIdentifier");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v11[0] = v2;
  v10[1] = CFSTR("calendarItemExternalIdentifier");
  objc_msgSend(v1, "calendarItemExternalIdentifier");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v11[1] = v3;
  v10[2] = CFSTR("title");
  objc_msgSend(v1, "title");
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  v11[2] = v4;
  objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", v11, v10, 3);
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  v8 = CFSTR("link.contentkit.ekcalendaritem");
  v9 = v5;
  objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", &v9, &v8, 1);
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  return v6;
}

Class __getEKCalendarItemClass_block_invoke(uint64_t a1)
{
  Class result;
  void *v3;
  void *v4;
  void *v5;

  if (!EventKitLibraryCore_frameworkLibrary)
    EventKitLibraryCore_frameworkLibrary = _sl_dlopen();
  if (!EventKitLibraryCore_frameworkLibrary)
  {
    objc_msgSend(MEMORY[0x24BDD1448], "currentHandler");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "void *EventKitLibrary(void)");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, CFSTR("WFSerializableContentProvider.m"), 34, CFSTR("%s"), 0);

    goto LABEL_8;
  }
  result = objc_getClass("EKCalendarItem");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    objc_msgSend(MEMORY[0x24BDD1448], "currentHandler");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "Class getEKCalendarItemClass(void)_block_invoke");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v5, CFSTR("WFSerializableContentProvider.m"), 35, CFSTR("Unable to find class %s"), "EKCalendarItem");

LABEL_8:
    __break(1u);
  }
  getEKCalendarItemClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

id getMPMediaItemClass()
{
  void *v0;
  id v1;
  _QWORD v3[5];
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = 0;
  v5 = &v4;
  v6 = 0x2050000000;
  v0 = (void *)getMPMediaItemClass_softClass;
  v7 = getMPMediaItemClass_softClass;
  if (!getMPMediaItemClass_softClass)
  {
    v3[0] = MEMORY[0x24BDAC760];
    v3[1] = 3221225472;
    v3[2] = __getMPMediaItemClass_block_invoke;
    v3[3] = &unk_24C4E3118;
    v3[4] = &v4;
    __getMPMediaItemClass_block_invoke((uint64_t)v3);
    v0 = (void *)v5[3];
  }
  v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_20BBDE328(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class __getMPMediaItemClass_block_invoke(uint64_t a1)
{
  Class result;
  void *v3;
  void *v4;
  void *v5;

  if (!MediaPlayerLibraryCore_frameworkLibrary)
    MediaPlayerLibraryCore_frameworkLibrary = _sl_dlopen();
  if (!MediaPlayerLibraryCore_frameworkLibrary)
  {
    objc_msgSend(MEMORY[0x24BDD1448], "currentHandler");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "void *MediaPlayerLibrary(void)");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, CFSTR("WFSerializableContentProvider.m"), 38, CFSTR("%s"), 0);

    goto LABEL_8;
  }
  result = objc_getClass("MPMediaItem");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    objc_msgSend(MEMORY[0x24BDD1448], "currentHandler");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "Class getMPMediaItemClass(void)_block_invoke");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v5, CFSTR("WFSerializableContentProvider.m"), 39, CFSTR("Unable to find class %s"), "MPMediaItem");

LABEL_8:
    __break(1u);
  }
  getMPMediaItemClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

void sub_20BBDE784(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class __getCLLocationClass_block_invoke_3732(uint64_t a1)
{
  Class result;
  void *v3;
  void *v4;
  void *v5;

  if (!CoreLocationLibraryCore_frameworkLibrary_3733)
    CoreLocationLibraryCore_frameworkLibrary_3733 = _sl_dlopen();
  if (!CoreLocationLibraryCore_frameworkLibrary_3733)
  {
    objc_msgSend(MEMORY[0x24BDD1448], "currentHandler");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "void *CoreLocationLibrary(void)");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, CFSTR("WFSerializableContentProvider.m"), 41, CFSTR("%s"), 0);

    goto LABEL_8;
  }
  result = objc_getClass("CLLocation");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    objc_msgSend(MEMORY[0x24BDD1448], "currentHandler");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "Class getCLLocationClass(void)_block_invoke");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v5, CFSTR("WFSerializableContentProvider.m"), 42, CFSTR("Unable to find class %s"), "CLLocation");

LABEL_8:
    __break(1u);
  }
  getCLLocationClass_softClass_3731 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

void sub_20BBDEBB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id getMKMapItemClass()
{
  void *v0;
  id v1;
  _QWORD v3[5];
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = 0;
  v5 = &v4;
  v6 = 0x2050000000;
  v0 = (void *)getMKMapItemClass_softClass_3751;
  v7 = getMKMapItemClass_softClass_3751;
  if (!getMKMapItemClass_softClass_3751)
  {
    v3[0] = MEMORY[0x24BDAC760];
    v3[1] = 3221225472;
    v3[2] = __getMKMapItemClass_block_invoke_3752;
    v3[3] = &unk_24C4E3118;
    v3[4] = &v4;
    __getMKMapItemClass_block_invoke_3752((uint64_t)v3);
    v0 = (void *)v5[3];
  }
  v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_20BBDEC68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void __getMKPlacemarkClass_block_invoke(uint64_t a1)
{
  void *v2;
  void *v3;

  MapKitLibrary();
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = objc_getClass("MKPlacemark");
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    getMKPlacemarkClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  }
  else
  {
    objc_msgSend(MEMORY[0x24BDD1448], "currentHandler");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "Class getMKPlacemarkClass(void)_block_invoke");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, CFSTR("WFSerializableContentProvider.m"), 32, CFSTR("Unable to find class %s"), "MKPlacemark");

    __break(1u);
  }
}

void MapKitLibrary()
{
  void *v0;
  void *v1;
  void *v2;

  if (!MapKitLibraryCore_frameworkLibrary_3747)
    MapKitLibraryCore_frameworkLibrary_3747 = _sl_dlopen();
  if (!MapKitLibraryCore_frameworkLibrary_3747)
  {
    objc_msgSend(MEMORY[0x24BDD1448], "currentHandler");
    v0 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "void *MapKitLibrary(void)");
    v1 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v1, CFSTR("WFSerializableContentProvider.m"), 30, CFSTR("%s"), 0);

    __break(1u);
    free(v2);
  }
}

void __getMKMapItemClass_block_invoke_3752(uint64_t a1)
{
  void *v2;
  void *v3;

  MapKitLibrary();
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = objc_getClass("MKMapItem");
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    getMKMapItemClass_softClass_3751 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  }
  else
  {
    objc_msgSend(MEMORY[0x24BDD1448], "currentHandler");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "Class getMKMapItemClass(void)_block_invoke");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, CFSTR("WFSerializableContentProvider.m"), 31, CFSTR("Unable to find class %s"), "MKMapItem");

    __break(1u);
  }
}

void sub_20BBE031C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_20BBE0454(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_20BBE06D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  uint64_t v31;

  _Block_object_dispose(&a31, 8);
  _Block_object_dispose((const void *)(v31 - 192), 8);
  _Block_object_dispose((const void *)(v31 - 144), 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__3917(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__3918(uint64_t a1)
{

}

void __getCLGeocoderClass_block_invoke(uint64_t a1)
{
  void *v2;
  void *v3;

  CoreLocationLibrary_3921();
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = objc_getClass("CLGeocoder");
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    getCLGeocoderClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  }
  else
  {
    objc_msgSend(MEMORY[0x24BDD1448], "currentHandler");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "Class getCLGeocoderClass(void)_block_invoke");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, CFSTR("DCMapsLink+CLGeocoding.m"), 17, CFSTR("Unable to find class %s"), "CLGeocoder");

    __break(1u);
  }
}

void *CoreLocationLibrary_3921()
{
  void *v0;
  void *v2;
  void *v3;

  if (!CoreLocationLibraryCore_frameworkLibrary_3927)
    CoreLocationLibraryCore_frameworkLibrary_3927 = _sl_dlopen();
  v0 = (void *)CoreLocationLibraryCore_frameworkLibrary_3927;
  if (!CoreLocationLibraryCore_frameworkLibrary_3927)
  {
    objc_msgSend(MEMORY[0x24BDD1448], "currentHandler");
    v0 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "void *CoreLocationLibrary(void)");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v2, CFSTR("DCMapsLink+CLGeocoding.m"), 14, CFSTR("%s"), 0);

    __break(1u);
    free(v3);
  }
  return v0;
}

id getCLLocationClass()
{
  void *v0;
  id v1;
  _QWORD v3[5];
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = 0;
  v5 = &v4;
  v6 = 0x2050000000;
  v0 = (void *)getCLLocationClass_softClass_3940;
  v7 = getCLLocationClass_softClass_3940;
  if (!getCLLocationClass_softClass_3940)
  {
    v3[0] = MEMORY[0x24BDAC760];
    v3[1] = 3221225472;
    v3[2] = __getCLLocationClass_block_invoke_3941;
    v3[3] = &unk_24C4E3118;
    v3[4] = &v4;
    __getCLLocationClass_block_invoke_3941((uint64_t)v3);
    v0 = (void *)v5[3];
  }
  v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_20BBE0AB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void __getCLCircularRegionClass_block_invoke_3935(uint64_t a1)
{
  void *v2;
  void *v3;

  CoreLocationLibrary_3921();
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = objc_getClass("CLCircularRegion");
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    getCLCircularRegionClass_softClass_3934 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  }
  else
  {
    objc_msgSend(MEMORY[0x24BDD1448], "currentHandler");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "Class getCLCircularRegionClass(void)_block_invoke");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, CFSTR("DCMapsLink+CLGeocoding.m"), 16, CFSTR("Unable to find class %s"), "CLCircularRegion");

    __break(1u);
  }
}

void __getCLLocationClass_block_invoke_3941(uint64_t a1)
{
  void *v2;
  void *v3;

  CoreLocationLibrary_3921();
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = objc_getClass("CLLocation");
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    getCLLocationClass_softClass_3940 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  }
  else
  {
    objc_msgSend(MEMORY[0x24BDD1448], "currentHandler");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "Class getCLLocationClass(void)_block_invoke");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, CFSTR("DCMapsLink+CLGeocoding.m"), 15, CFSTR("Unable to find class %s"), "CLLocation");

    __break(1u);
  }
}

void sub_20BBE1758(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void *ContactsLibrary()
{
  void *v0;
  void *v2;
  void *v3;

  if (!ContactsLibraryCore_frameworkLibrary)
    ContactsLibraryCore_frameworkLibrary = _sl_dlopen();
  v0 = (void *)ContactsLibraryCore_frameworkLibrary;
  if (!ContactsLibraryCore_frameworkLibrary)
  {
    objc_msgSend(MEMORY[0x24BDD1448], "currentHandler");
    v0 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "void *ContactsLibrary(void)");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v2, CFSTR("WFContentProperty+CNLabeledValue.m"), 12, CFSTR("%s"), 0);

    __break(1u);
    free(v3);
  }
  return v0;
}

void sub_20BBE2EB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class __getCNLabeledValueClass_block_invoke(uint64_t a1)
{
  Class result;
  void *v3;
  void *v4;
  void *v5;

  if (!ContactsLibraryCore_frameworkLibrary_4130)
    ContactsLibraryCore_frameworkLibrary_4130 = _sl_dlopen();
  if (!ContactsLibraryCore_frameworkLibrary_4130)
  {
    objc_msgSend(MEMORY[0x24BDD1448], "currentHandler");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "void *ContactsLibrary(void)");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, CFSTR("WFContactLabeledValue.m"), 13, CFSTR("%s"), 0);

    goto LABEL_8;
  }
  result = objc_getClass("CNLabeledValue");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    objc_msgSend(MEMORY[0x24BDD1448], "currentHandler");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "Class getCNLabeledValueClass(void)_block_invoke");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v5, CFSTR("WFContactLabeledValue.m"), 14, CFSTR("Unable to find class %s"), "CNLabeledValue");

LABEL_8:
    __break(1u);
  }
  getCNLabeledValueClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

void __getAVAssetReaderClass_block_invoke(uint64_t a1)
{
  void *v2;
  void *v3;

  AVFoundationLibrary_4305();
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = objc_getClass("AVAssetReader");
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    getAVAssetReaderClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  }
  else
  {
    objc_msgSend(MEMORY[0x24BDD1448], "currentHandler");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "Class getAVAssetReaderClass(void)_block_invoke");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, CFSTR("WFAudioInterchangeFormatEncoder.m"), 20, CFSTR("Unable to find class %s"), "AVAssetReader");

    __break(1u);
  }
}

void getAVMediaTypeAudio()
{
  id *v0;
  void *v1;
  id v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;

  v5 = 0;
  v6 = &v5;
  v7 = 0x2020000000;
  v0 = (id *)getAVMediaTypeAudioSymbolLoc_ptr;
  v8 = getAVMediaTypeAudioSymbolLoc_ptr;
  if (!getAVMediaTypeAudioSymbolLoc_ptr)
  {
    v1 = AVFoundationLibrary_4305();
    v0 = (id *)dlsym(v1, "AVMediaTypeAudio");
    v6[3] = (uint64_t)v0;
    getAVMediaTypeAudioSymbolLoc_ptr = (uint64_t)v0;
  }
  _Block_object_dispose(&v5, 8);
  if (v0)
  {
    v2 = *v0;
  }
  else
  {
    objc_msgSend(MEMORY[0x24BDD1448], "currentHandler");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "AVMediaType getAVMediaTypeAudio(void)");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, CFSTR("WFAudioInterchangeFormatEncoder.m"), 24, CFSTR("%s"), dlerror());

    __break(1u);
  }
}

void sub_20BBE3550(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void *AVFoundationLibrary_4305()
{
  void *v0;
  void *v2;
  void *v3;

  if (!AVFoundationLibraryCore_frameworkLibrary_4342)
    AVFoundationLibraryCore_frameworkLibrary_4342 = _sl_dlopen();
  v0 = (void *)AVFoundationLibraryCore_frameworkLibrary_4342;
  if (!AVFoundationLibraryCore_frameworkLibrary_4342)
  {
    objc_msgSend(MEMORY[0x24BDD1448], "currentHandler");
    v0 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "void *AVFoundationLibrary(void)");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v2, CFSTR("WFAudioInterchangeFormatEncoder.m"), 19, CFSTR("%s"), 0);

    __break(1u);
    free(v3);
  }
  return v0;
}

void __getAVAssetReaderTrackOutputClass_block_invoke(uint64_t a1)
{
  void *v2;
  void *v3;

  AVFoundationLibrary_4305();
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = objc_getClass("AVAssetReaderTrackOutput");
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    getAVAssetReaderTrackOutputClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  }
  else
  {
    objc_msgSend(MEMORY[0x24BDD1448], "currentHandler");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "Class getAVAssetReaderTrackOutputClass(void)_block_invoke");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, CFSTR("WFAudioInterchangeFormatEncoder.m"), 22, CFSTR("Unable to find class %s"), "AVAssetReaderTrackOutput");

    __break(1u);
  }
}

void __getAVAssetWriterClass_block_invoke_4318(uint64_t a1)
{
  void *v2;
  void *v3;

  AVFoundationLibrary_4305();
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = objc_getClass("AVAssetWriter");
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    getAVAssetWriterClass_softClass_4317 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  }
  else
  {
    objc_msgSend(MEMORY[0x24BDD1448], "currentHandler");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "Class getAVAssetWriterClass(void)_block_invoke");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, CFSTR("WFAudioInterchangeFormatEncoder.m"), 21, CFSTR("Unable to find class %s"), "AVAssetWriter");

    __break(1u);
  }
}

void __getAVAssetWriterInputClass_block_invoke_4321(uint64_t a1)
{
  void *v2;
  void *v3;

  AVFoundationLibrary_4305();
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = objc_getClass("AVAssetWriterInput");
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    getAVAssetWriterInputClass_softClass_4320 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  }
  else
  {
    objc_msgSend(MEMORY[0x24BDD1448], "currentHandler");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "Class getAVAssetWriterInputClass(void)_block_invoke");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, CFSTR("WFAudioInterchangeFormatEncoder.m"), 23, CFSTR("Unable to find class %s"), "AVAssetWriterInput");

    __break(1u);
  }
}

void *CoreMediaLibrary_4323()
{
  void *v0;
  void *v2;
  void *v3;

  if (!CoreMediaLibraryCore_frameworkLibrary_4328)
    CoreMediaLibraryCore_frameworkLibrary_4328 = _sl_dlopen();
  v0 = (void *)CoreMediaLibraryCore_frameworkLibrary_4328;
  if (!CoreMediaLibraryCore_frameworkLibrary_4328)
  {
    objc_msgSend(MEMORY[0x24BDD1448], "currentHandler");
    v0 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "void *CoreMediaLibrary(void)");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v2, CFSTR("WFAudioInterchangeFormatEncoder.m"), 15, CFSTR("%s"), 0);

    __break(1u);
    free(v3);
  }
  return v0;
}

void sub_20BBE3BC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_20BBE5D4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void __getMKPlacemarkClass_block_invoke_4403(uint64_t a1)
{
  void *v2;
  void *v3;

  MapKitLibrary_4404();
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = objc_getClass("MKPlacemark");
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    getMKPlacemarkClass_softClass_4402 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  }
  else
  {
    objc_msgSend(MEMORY[0x24BDD1448], "currentHandler");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "Class getMKPlacemarkClass(void)_block_invoke");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, CFSTR("WFCalendarEventContentItem.m"), 40, CFSTR("Unable to find class %s"), "MKPlacemark");

    __break(1u);
  }
}

void MapKitLibrary_4404()
{
  void *v0;
  void *v1;
  void *v2;

  if (!MapKitLibraryCore_frameworkLibrary_4407)
    MapKitLibraryCore_frameworkLibrary_4407 = _sl_dlopen();
  if (!MapKitLibraryCore_frameworkLibrary_4407)
  {
    objc_msgSend(MEMORY[0x24BDD1448], "currentHandler");
    v0 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "void *MapKitLibrary(void)");
    v1 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v1, CFSTR("WFCalendarEventContentItem.m"), 35, CFSTR("%s"), 0);

    __break(1u);
    free(v2);
  }
}

id getMKMapItemClass_4412()
{
  void *v0;
  id v1;
  _QWORD v3[5];
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = 0;
  v5 = &v4;
  v6 = 0x2050000000;
  v0 = (void *)getMKMapItemClass_softClass_4413;
  v7 = getMKMapItemClass_softClass_4413;
  if (!getMKMapItemClass_softClass_4413)
  {
    v3[0] = MEMORY[0x24BDAC760];
    v3[1] = 3221225472;
    v3[2] = __getMKMapItemClass_block_invoke_4414;
    v3[3] = &unk_24C4E3118;
    v3[4] = &v4;
    __getMKMapItemClass_block_invoke_4414((uint64_t)v3);
    v0 = (void *)v5[3];
  }
  v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_20BBE6090(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void __getMKMapItemClass_block_invoke_4414(uint64_t a1)
{
  void *v2;
  void *v3;

  MapKitLibrary_4404();
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = objc_getClass("MKMapItem");
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    getMKMapItemClass_softClass_4413 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  }
  else
  {
    objc_msgSend(MEMORY[0x24BDD1448], "currentHandler");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "Class getMKMapItemClass(void)_block_invoke");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, CFSTR("WFCalendarEventContentItem.m"), 39, CFSTR("Unable to find class %s"), "MKMapItem");

    __break(1u);
  }
}

void sub_20BBE6D78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void __getEKAttendeeClass_block_invoke(uint64_t a1)
{
  void *v2;
  void *v3;

  EventKitLibrary();
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = objc_getClass("EKAttendee");
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    getEKAttendeeClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  }
  else
  {
    objc_msgSend(MEMORY[0x24BDD1448], "currentHandler");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "Class getEKAttendeeClass(void)_block_invoke");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, CFSTR("WFCalendarEventContentItem.m"), 38, CFSTR("Unable to find class %s"), "EKAttendee");

    __break(1u);
  }
}

void EventKitLibrary()
{
  void *v0;
  void *v1;
  void *v2;

  if (!EventKitLibraryCore_frameworkLibrary_4499)
    EventKitLibraryCore_frameworkLibrary_4499 = _sl_dlopen();
  if (!EventKitLibraryCore_frameworkLibrary_4499)
  {
    objc_msgSend(MEMORY[0x24BDD1448], "currentHandler");
    v0 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "void *EventKitLibrary(void)");
    v1 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v1, CFSTR("WFCalendarEventContentItem.m"), 34, CFSTR("%s"), 0);

    __break(1u);
    free(v2);
  }
}

id getEKEventClass()
{
  void *v0;
  id v1;
  _QWORD v3[5];
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = 0;
  v5 = &v4;
  v6 = 0x2050000000;
  v0 = (void *)getEKEventClass_softClass;
  v7 = getEKEventClass_softClass;
  if (!getEKEventClass_softClass)
  {
    v3[0] = MEMORY[0x24BDAC760];
    v3[1] = 3221225472;
    v3[2] = __getEKEventClass_block_invoke;
    v3[3] = &unk_24C4E3118;
    v3[4] = &v4;
    __getEKEventClass_block_invoke((uint64_t)v3);
    v0 = (void *)v5[3];
  }
  v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_20BBE7C20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void __getEKEventClass_block_invoke(uint64_t a1)
{
  void *v2;
  void *v3;

  EventKitLibrary();
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = objc_getClass("EKEvent");
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    getEKEventClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  }
  else
  {
    objc_msgSend(MEMORY[0x24BDD1448], "currentHandler");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "Class getEKEventClass(void)_block_invoke");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, CFSTR("WFCalendarEventContentItem.m"), 37, CFSTR("Unable to find class %s"), "EKEvent");

    __break(1u);
  }
}

void CNContactPropertyKeyFromWFContactPropertyID(int a1)
{
  id v2;
  id *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  id v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;

  v2 = 0;
  switch(a1)
  {
    case 0:
      v30 = 0;
      v31 = &v30;
      v32 = 0x2020000000;
      v3 = (id *)getCNContactGivenNameKeySymbolLoc_ptr;
      v33 = getCNContactGivenNameKeySymbolLoc_ptr;
      if (!getCNContactGivenNameKeySymbolLoc_ptr)
      {
        v4 = ContactsLibrary_4571();
        v3 = (id *)dlsym(v4, "CNContactGivenNameKey");
        v31[3] = (uint64_t)v3;
        getCNContactGivenNameKeySymbolLoc_ptr = (uint64_t)v3;
      }
      _Block_object_dispose(&v30, 8);
      if (v3)
        goto LABEL_93;
      objc_msgSend(MEMORY[0x24BDD1448], "currentHandler");
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "NSString *getCNContactGivenNameKey(void)");
      v6 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v5, "handleFailureInFunction:file:lineNumber:description:", v6, CFSTR("WFAddressBookTypes.m"), 16, CFSTR("%s"), dlerror());
      goto LABEL_96;
    case 1:
      v30 = 0;
      v31 = &v30;
      v32 = 0x2020000000;
      v3 = (id *)getCNContactFamilyNameKeySymbolLoc_ptr;
      v33 = getCNContactFamilyNameKeySymbolLoc_ptr;
      if (!getCNContactFamilyNameKeySymbolLoc_ptr)
      {
        v7 = ContactsLibrary_4571();
        v3 = (id *)dlsym(v7, "CNContactFamilyNameKey");
        v31[3] = (uint64_t)v3;
        getCNContactFamilyNameKeySymbolLoc_ptr = (uint64_t)v3;
      }
      _Block_object_dispose(&v30, 8);
      if (v3)
        goto LABEL_93;
      objc_msgSend(MEMORY[0x24BDD1448], "currentHandler");
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "NSString *getCNContactFamilyNameKey(void)");
      v6 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v5, "handleFailureInFunction:file:lineNumber:description:", v6, CFSTR("WFAddressBookTypes.m"), 17, CFSTR("%s"), dlerror());
      goto LABEL_96;
    case 3:
      v30 = 0;
      v31 = &v30;
      v32 = 0x2020000000;
      v3 = (id *)getCNContactPhoneNumbersKeySymbolLoc_ptr;
      v33 = getCNContactPhoneNumbersKeySymbolLoc_ptr;
      if (!getCNContactPhoneNumbersKeySymbolLoc_ptr)
      {
        v8 = ContactsLibrary_4571();
        v3 = (id *)dlsym(v8, "CNContactPhoneNumbersKey");
        v31[3] = (uint64_t)v3;
        getCNContactPhoneNumbersKeySymbolLoc_ptr = (uint64_t)v3;
      }
      _Block_object_dispose(&v30, 8);
      if (v3)
        goto LABEL_93;
      objc_msgSend(MEMORY[0x24BDD1448], "currentHandler");
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "NSString *getCNContactPhoneNumbersKey(void)");
      v6 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v5, "handleFailureInFunction:file:lineNumber:description:", v6, CFSTR("WFAddressBookTypes.m"), 18, CFSTR("%s"), dlerror());
      goto LABEL_96;
    case 4:
      v30 = 0;
      v31 = &v30;
      v32 = 0x2020000000;
      v3 = (id *)getCNContactEmailAddressesKeySymbolLoc_ptr;
      v33 = getCNContactEmailAddressesKeySymbolLoc_ptr;
      if (!getCNContactEmailAddressesKeySymbolLoc_ptr)
      {
        v9 = ContactsLibrary_4571();
        v3 = (id *)dlsym(v9, "CNContactEmailAddressesKey");
        v31[3] = (uint64_t)v3;
        getCNContactEmailAddressesKeySymbolLoc_ptr = (uint64_t)v3;
      }
      _Block_object_dispose(&v30, 8);
      if (v3)
        goto LABEL_93;
      objc_msgSend(MEMORY[0x24BDD1448], "currentHandler");
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "NSString *getCNContactEmailAddressesKey(void)");
      v6 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v5, "handleFailureInFunction:file:lineNumber:description:", v6, CFSTR("WFAddressBookTypes.m"), 19, CFSTR("%s"), dlerror());
      goto LABEL_96;
    case 5:
      v30 = 0;
      v31 = &v30;
      v32 = 0x2020000000;
      v3 = (id *)getCNContactPostalAddressesKeySymbolLoc_ptr;
      v33 = getCNContactPostalAddressesKeySymbolLoc_ptr;
      if (!getCNContactPostalAddressesKeySymbolLoc_ptr)
      {
        v10 = ContactsLibrary_4571();
        v3 = (id *)dlsym(v10, "CNContactPostalAddressesKey");
        v31[3] = (uint64_t)v3;
        getCNContactPostalAddressesKeySymbolLoc_ptr = (uint64_t)v3;
      }
      _Block_object_dispose(&v30, 8);
      if (v3)
        goto LABEL_93;
      objc_msgSend(MEMORY[0x24BDD1448], "currentHandler");
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "NSString *getCNContactPostalAddressesKey(void)");
      v6 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v5, "handleFailureInFunction:file:lineNumber:description:", v6, CFSTR("WFAddressBookTypes.m"), 20, CFSTR("%s"), dlerror());
      goto LABEL_96;
    case 6:
      v30 = 0;
      v31 = &v30;
      v32 = 0x2020000000;
      v3 = (id *)getCNContactMiddleNameKeySymbolLoc_ptr;
      v33 = getCNContactMiddleNameKeySymbolLoc_ptr;
      if (!getCNContactMiddleNameKeySymbolLoc_ptr)
      {
        v11 = ContactsLibrary_4571();
        v3 = (id *)dlsym(v11, "CNContactMiddleNameKey");
        v31[3] = (uint64_t)v3;
        getCNContactMiddleNameKeySymbolLoc_ptr = (uint64_t)v3;
      }
      _Block_object_dispose(&v30, 8);
      if (v3)
        goto LABEL_93;
      objc_msgSend(MEMORY[0x24BDD1448], "currentHandler");
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "NSString *getCNContactMiddleNameKey(void)");
      v6 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v5, "handleFailureInFunction:file:lineNumber:description:", v6, CFSTR("WFAddressBookTypes.m"), 21, CFSTR("%s"), dlerror());
      goto LABEL_96;
    case 7:
      v30 = 0;
      v31 = &v30;
      v32 = 0x2020000000;
      v3 = (id *)getCNContactPhoneticGivenNameKeySymbolLoc_ptr;
      v33 = getCNContactPhoneticGivenNameKeySymbolLoc_ptr;
      if (!getCNContactPhoneticGivenNameKeySymbolLoc_ptr)
      {
        v12 = ContactsLibrary_4571();
        v3 = (id *)dlsym(v12, "CNContactPhoneticGivenNameKey");
        v31[3] = (uint64_t)v3;
        getCNContactPhoneticGivenNameKeySymbolLoc_ptr = (uint64_t)v3;
      }
      _Block_object_dispose(&v30, 8);
      if (v3)
        goto LABEL_93;
      objc_msgSend(MEMORY[0x24BDD1448], "currentHandler");
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "NSString *getCNContactPhoneticGivenNameKey(void)");
      v6 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v5, "handleFailureInFunction:file:lineNumber:description:", v6, CFSTR("WFAddressBookTypes.m"), 22, CFSTR("%s"), dlerror());
      goto LABEL_96;
    case 8:
      v30 = 0;
      v31 = &v30;
      v32 = 0x2020000000;
      v3 = (id *)getCNContactPhoneticMiddleNameKeySymbolLoc_ptr;
      v33 = getCNContactPhoneticMiddleNameKeySymbolLoc_ptr;
      if (!getCNContactPhoneticMiddleNameKeySymbolLoc_ptr)
      {
        v13 = ContactsLibrary_4571();
        v3 = (id *)dlsym(v13, "CNContactPhoneticMiddleNameKey");
        v31[3] = (uint64_t)v3;
        getCNContactPhoneticMiddleNameKeySymbolLoc_ptr = (uint64_t)v3;
      }
      _Block_object_dispose(&v30, 8);
      if (v3)
        goto LABEL_93;
      objc_msgSend(MEMORY[0x24BDD1448], "currentHandler");
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "NSString *getCNContactPhoneticMiddleNameKey(void)");
      v6 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v5, "handleFailureInFunction:file:lineNumber:description:", v6, CFSTR("WFAddressBookTypes.m"), 23, CFSTR("%s"), dlerror());
      goto LABEL_96;
    case 9:
      v30 = 0;
      v31 = &v30;
      v32 = 0x2020000000;
      v3 = (id *)getCNContactPhoneticFamilyNameKeySymbolLoc_ptr;
      v33 = getCNContactPhoneticFamilyNameKeySymbolLoc_ptr;
      if (!getCNContactPhoneticFamilyNameKeySymbolLoc_ptr)
      {
        v14 = ContactsLibrary_4571();
        v3 = (id *)dlsym(v14, "CNContactPhoneticFamilyNameKey");
        v31[3] = (uint64_t)v3;
        getCNContactPhoneticFamilyNameKeySymbolLoc_ptr = (uint64_t)v3;
      }
      _Block_object_dispose(&v30, 8);
      if (v3)
        goto LABEL_93;
      objc_msgSend(MEMORY[0x24BDD1448], "currentHandler");
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "NSString *getCNContactPhoneticFamilyNameKey(void)");
      v6 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v5, "handleFailureInFunction:file:lineNumber:description:", v6, CFSTR("WFAddressBookTypes.m"), 24, CFSTR("%s"), dlerror());
      goto LABEL_96;
    case 10:
      v30 = 0;
      v31 = &v30;
      v32 = 0x2020000000;
      v3 = (id *)getCNContactOrganizationNameKeySymbolLoc_ptr;
      v33 = getCNContactOrganizationNameKeySymbolLoc_ptr;
      if (!getCNContactOrganizationNameKeySymbolLoc_ptr)
      {
        v15 = ContactsLibrary_4571();
        v3 = (id *)dlsym(v15, "CNContactOrganizationNameKey");
        v31[3] = (uint64_t)v3;
        getCNContactOrganizationNameKeySymbolLoc_ptr = (uint64_t)v3;
      }
      _Block_object_dispose(&v30, 8);
      if (v3)
        goto LABEL_93;
      objc_msgSend(MEMORY[0x24BDD1448], "currentHandler");
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "NSString *getCNContactOrganizationNameKey(void)");
      v6 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v5, "handleFailureInFunction:file:lineNumber:description:", v6, CFSTR("WFAddressBookTypes.m"), 25, CFSTR("%s"), dlerror());
      goto LABEL_96;
    case 11:
      v30 = 0;
      v31 = &v30;
      v32 = 0x2020000000;
      v3 = (id *)getCNContactDepartmentNameKeySymbolLoc_ptr;
      v33 = getCNContactDepartmentNameKeySymbolLoc_ptr;
      if (!getCNContactDepartmentNameKeySymbolLoc_ptr)
      {
        v16 = ContactsLibrary_4571();
        v3 = (id *)dlsym(v16, "CNContactDepartmentNameKey");
        v31[3] = (uint64_t)v3;
        getCNContactDepartmentNameKeySymbolLoc_ptr = (uint64_t)v3;
      }
      _Block_object_dispose(&v30, 8);
      if (v3)
        goto LABEL_93;
      objc_msgSend(MEMORY[0x24BDD1448], "currentHandler");
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "NSString *getCNContactDepartmentNameKey(void)");
      v6 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v5, "handleFailureInFunction:file:lineNumber:description:", v6, CFSTR("WFAddressBookTypes.m"), 26, CFSTR("%s"), dlerror());
      goto LABEL_96;
    case 12:
      v30 = 0;
      v31 = &v30;
      v32 = 0x2020000000;
      v3 = (id *)getCNContactDatesKeySymbolLoc_ptr;
      v33 = getCNContactDatesKeySymbolLoc_ptr;
      if (!getCNContactDatesKeySymbolLoc_ptr)
      {
        v17 = ContactsLibrary_4571();
        v3 = (id *)dlsym(v17, "CNContactDatesKey");
        v31[3] = (uint64_t)v3;
        getCNContactDatesKeySymbolLoc_ptr = (uint64_t)v3;
      }
      _Block_object_dispose(&v30, 8);
      if (v3)
        goto LABEL_93;
      objc_msgSend(MEMORY[0x24BDD1448], "currentHandler");
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "NSString *getCNContactDatesKey(void)");
      v6 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v5, "handleFailureInFunction:file:lineNumber:description:", v6, CFSTR("WFAddressBookTypes.m"), 27, CFSTR("%s"), dlerror());
      goto LABEL_96;
    case 13:
      v30 = 0;
      v31 = &v30;
      v32 = 0x2020000000;
      v3 = (id *)getCNContactInstantMessageAddressesKeySymbolLoc_ptr;
      v33 = getCNContactInstantMessageAddressesKeySymbolLoc_ptr;
      if (!getCNContactInstantMessageAddressesKeySymbolLoc_ptr)
      {
        v18 = ContactsLibrary_4571();
        v3 = (id *)dlsym(v18, "CNContactInstantMessageAddressesKey");
        v31[3] = (uint64_t)v3;
        getCNContactInstantMessageAddressesKeySymbolLoc_ptr = (uint64_t)v3;
      }
      _Block_object_dispose(&v30, 8);
      if (v3)
        goto LABEL_93;
      objc_msgSend(MEMORY[0x24BDD1448], "currentHandler");
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "NSString *getCNContactInstantMessageAddressesKey(void)");
      v6 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v5, "handleFailureInFunction:file:lineNumber:description:", v6, CFSTR("WFAddressBookTypes.m"), 29, CFSTR("%s"), dlerror());
      goto LABEL_96;
    case 14:
      v30 = 0;
      v31 = &v30;
      v32 = 0x2020000000;
      v3 = (id *)getCNContactNoteKeySymbolLoc_ptr;
      v33 = getCNContactNoteKeySymbolLoc_ptr;
      if (!getCNContactNoteKeySymbolLoc_ptr)
      {
        v19 = ContactsLibrary_4571();
        v3 = (id *)dlsym(v19, "CNContactNoteKey");
        v31[3] = (uint64_t)v3;
        getCNContactNoteKeySymbolLoc_ptr = (uint64_t)v3;
      }
      _Block_object_dispose(&v30, 8);
      if (v3)
        goto LABEL_93;
      objc_msgSend(MEMORY[0x24BDD1448], "currentHandler");
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "NSString *getCNContactNoteKey(void)");
      v6 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v5, "handleFailureInFunction:file:lineNumber:description:", v6, CFSTR("WFAddressBookTypes.m"), 30, CFSTR("%s"), dlerror());
      goto LABEL_96;
    case 17:
      v30 = 0;
      v31 = &v30;
      v32 = 0x2020000000;
      v3 = (id *)getCNContactBirthdayKeySymbolLoc_ptr;
      v33 = getCNContactBirthdayKeySymbolLoc_ptr;
      if (!getCNContactBirthdayKeySymbolLoc_ptr)
      {
        v20 = ContactsLibrary_4571();
        v3 = (id *)dlsym(v20, "CNContactBirthdayKey");
        v31[3] = (uint64_t)v3;
        getCNContactBirthdayKeySymbolLoc_ptr = (uint64_t)v3;
      }
      _Block_object_dispose(&v30, 8);
      if (v3)
        goto LABEL_93;
      objc_msgSend(MEMORY[0x24BDD1448], "currentHandler");
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "NSString *getCNContactBirthdayKey(void)");
      v6 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v5, "handleFailureInFunction:file:lineNumber:description:", v6, CFSTR("WFAddressBookTypes.m"), 31, CFSTR("%s"), dlerror());
      goto LABEL_96;
    case 18:
      v30 = 0;
      v31 = &v30;
      v32 = 0x2020000000;
      v3 = (id *)getCNContactJobTitleKeySymbolLoc_ptr;
      v33 = getCNContactJobTitleKeySymbolLoc_ptr;
      if (!getCNContactJobTitleKeySymbolLoc_ptr)
      {
        v21 = ContactsLibrary_4571();
        v3 = (id *)dlsym(v21, "CNContactJobTitleKey");
        v31[3] = (uint64_t)v3;
        getCNContactJobTitleKeySymbolLoc_ptr = (uint64_t)v3;
      }
      _Block_object_dispose(&v30, 8);
      if (v3)
        goto LABEL_93;
      objc_msgSend(MEMORY[0x24BDD1448], "currentHandler");
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "NSString *getCNContactJobTitleKey(void)");
      v6 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v5, "handleFailureInFunction:file:lineNumber:description:", v6, CFSTR("WFAddressBookTypes.m"), 32, CFSTR("%s"), dlerror());
      goto LABEL_96;
    case 19:
      v30 = 0;
      v31 = &v30;
      v32 = 0x2020000000;
      v3 = (id *)getCNContactNicknameKeySymbolLoc_ptr;
      v33 = getCNContactNicknameKeySymbolLoc_ptr;
      if (!getCNContactNicknameKeySymbolLoc_ptr)
      {
        v22 = ContactsLibrary_4571();
        v3 = (id *)dlsym(v22, "CNContactNicknameKey");
        v31[3] = (uint64_t)v3;
        getCNContactNicknameKeySymbolLoc_ptr = (uint64_t)v3;
      }
      _Block_object_dispose(&v30, 8);
      if (v3)
        goto LABEL_93;
      objc_msgSend(MEMORY[0x24BDD1448], "currentHandler");
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "NSString *getCNContactNicknameKey(void)");
      v6 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v5, "handleFailureInFunction:file:lineNumber:description:", v6, CFSTR("WFAddressBookTypes.m"), 33, CFSTR("%s"), dlerror());
      goto LABEL_96;
    case 20:
      v30 = 0;
      v31 = &v30;
      v32 = 0x2020000000;
      v3 = (id *)getCNContactNamePrefixKeySymbolLoc_ptr;
      v33 = getCNContactNamePrefixKeySymbolLoc_ptr;
      if (!getCNContactNamePrefixKeySymbolLoc_ptr)
      {
        v23 = ContactsLibrary_4571();
        v3 = (id *)dlsym(v23, "CNContactNamePrefixKey");
        v31[3] = (uint64_t)v3;
        getCNContactNamePrefixKeySymbolLoc_ptr = (uint64_t)v3;
      }
      _Block_object_dispose(&v30, 8);
      if (v3)
        goto LABEL_93;
      objc_msgSend(MEMORY[0x24BDD1448], "currentHandler");
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "NSString *getCNContactNamePrefixKey(void)");
      v6 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v5, "handleFailureInFunction:file:lineNumber:description:", v6, CFSTR("WFAddressBookTypes.m"), 34, CFSTR("%s"), dlerror());
      goto LABEL_96;
    case 21:
      v30 = 0;
      v31 = &v30;
      v32 = 0x2020000000;
      v3 = (id *)getCNContactNameSuffixKeySymbolLoc_ptr;
      v33 = getCNContactNameSuffixKeySymbolLoc_ptr;
      if (!getCNContactNameSuffixKeySymbolLoc_ptr)
      {
        v24 = ContactsLibrary_4571();
        v3 = (id *)dlsym(v24, "CNContactNameSuffixKey");
        v31[3] = (uint64_t)v3;
        getCNContactNameSuffixKeySymbolLoc_ptr = (uint64_t)v3;
      }
      _Block_object_dispose(&v30, 8);
      if (v3)
        goto LABEL_93;
      objc_msgSend(MEMORY[0x24BDD1448], "currentHandler");
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "NSString *getCNContactNameSuffixKey(void)");
      v6 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v5, "handleFailureInFunction:file:lineNumber:description:", v6, CFSTR("WFAddressBookTypes.m"), 35, CFSTR("%s"), dlerror());
      goto LABEL_96;
    case 22:
      v30 = 0;
      v31 = &v30;
      v32 = 0x2020000000;
      v3 = (id *)getCNContactUrlAddressesKeySymbolLoc_ptr;
      v33 = getCNContactUrlAddressesKeySymbolLoc_ptr;
      if (!getCNContactUrlAddressesKeySymbolLoc_ptr)
      {
        v25 = ContactsLibrary_4571();
        v3 = (id *)dlsym(v25, "CNContactUrlAddressesKey");
        v31[3] = (uint64_t)v3;
        getCNContactUrlAddressesKeySymbolLoc_ptr = (uint64_t)v3;
      }
      _Block_object_dispose(&v30, 8);
      if (v3)
        goto LABEL_93;
      objc_msgSend(MEMORY[0x24BDD1448], "currentHandler");
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "NSString *getCNContactUrlAddressesKey(void)");
      v6 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v5, "handleFailureInFunction:file:lineNumber:description:", v6, CFSTR("WFAddressBookTypes.m"), 38, CFSTR("%s"), dlerror());
      goto LABEL_96;
    case 26:
      v30 = 0;
      v31 = &v30;
      v32 = 0x2020000000;
      v3 = (id *)getCNContactCreationDateKeySymbolLoc_ptr;
      v33 = getCNContactCreationDateKeySymbolLoc_ptr;
      if (!getCNContactCreationDateKeySymbolLoc_ptr)
      {
        v28 = ContactsLibrary_4571();
        v3 = (id *)dlsym(v28, "CNContactCreationDateKey");
        v31[3] = (uint64_t)v3;
        getCNContactCreationDateKeySymbolLoc_ptr = (uint64_t)v3;
      }
      _Block_object_dispose(&v30, 8);
      if (v3)
        goto LABEL_93;
      objc_msgSend(MEMORY[0x24BDD1448], "currentHandler");
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "NSString *getCNContactCreationDateKey(void)");
      v6 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v5, "handleFailureInFunction:file:lineNumber:description:", v6, CFSTR("WFAddressBookTypes.m"), 36, CFSTR("%s"), dlerror());
      goto LABEL_96;
    case 27:
      v30 = 0;
      v31 = &v30;
      v32 = 0x2020000000;
      v3 = (id *)getCNContactModificationDateKeySymbolLoc_ptr;
      v33 = getCNContactModificationDateKeySymbolLoc_ptr;
      if (!getCNContactModificationDateKeySymbolLoc_ptr)
      {
        v26 = ContactsLibrary_4571();
        v3 = (id *)dlsym(v26, "CNContactModificationDateKey");
        v31[3] = (uint64_t)v3;
        getCNContactModificationDateKeySymbolLoc_ptr = (uint64_t)v3;
      }
      _Block_object_dispose(&v30, 8);
      if (v3)
        goto LABEL_93;
      objc_msgSend(MEMORY[0x24BDD1448], "currentHandler");
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "NSString *getCNContactModificationDateKey(void)");
      v6 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v5, "handleFailureInFunction:file:lineNumber:description:", v6, CFSTR("WFAddressBookTypes.m"), 37, CFSTR("%s"), dlerror());
      goto LABEL_96;
    case 46:
      v30 = 0;
      v31 = &v30;
      v32 = 0x2020000000;
      v3 = (id *)getCNContactSocialProfilesKeySymbolLoc_ptr;
      v33 = getCNContactSocialProfilesKeySymbolLoc_ptr;
      if (!getCNContactSocialProfilesKeySymbolLoc_ptr)
      {
        v27 = ContactsLibrary_4571();
        v3 = (id *)dlsym(v27, "CNContactSocialProfilesKey");
        v31[3] = (uint64_t)v3;
        getCNContactSocialProfilesKeySymbolLoc_ptr = (uint64_t)v3;
      }
      _Block_object_dispose(&v30, 8);
      if (v3)
      {
LABEL_93:
        v2 = *v3;
LABEL_94:
        v29 = v2;
      }
      else
      {
        objc_msgSend(MEMORY[0x24BDD1448], "currentHandler");
        v5 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "NSString *getCNContactSocialProfilesKey(void)");
        v6 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v5, "handleFailureInFunction:file:lineNumber:description:", v6, CFSTR("WFAddressBookTypes.m"), 28, CFSTR("%s"), dlerror());
LABEL_96:

        __break(1u);
      }
      return;
    default:
      goto LABEL_94;
  }
}

void sub_20BBE8D8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void *ContactsLibrary_4571()
{
  void *v0;
  void *v2;
  void *v3;

  if (!ContactsLibraryCore_frameworkLibrary_4599)
    ContactsLibraryCore_frameworkLibrary_4599 = _sl_dlopen();
  v0 = (void *)ContactsLibraryCore_frameworkLibrary_4599;
  if (!ContactsLibraryCore_frameworkLibrary_4599)
  {
    objc_msgSend(MEMORY[0x24BDD1448], "currentHandler");
    v0 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "void *ContactsLibrary(void)");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v2, CFSTR("WFAddressBookTypes.m"), 15, CFSTR("%s"), 0);

    __break(1u);
    free(v3);
  }
  return v0;
}

id WFHTTPBodyFromQueryItems(void *a1)
{
  id v1;
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  id v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  _BYTE v20[128];
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  v1 = a1;
  if (objc_msgSend(v1, "count"))
  {
    v2 = (void *)objc_opt_new();
    v16 = 0u;
    v17 = 0u;
    v18 = 0u;
    v19 = 0u;
    v15 = v1;
    v3 = v1;
    v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v16, v20, 16);
    if (v4)
    {
      v5 = v4;
      v6 = *(_QWORD *)v17;
      do
      {
        for (i = 0; i != v5; ++i)
        {
          if (*(_QWORD *)v17 != v6)
            objc_enumerationMutation(v3);
          v8 = *(void **)(*((_QWORD *)&v16 + 1) + 8 * i);
          objc_msgSend(v8, "name");
          v9 = (void *)objc_claimAutoreleasedReturnValue();
          WFHTTPFormEncodedString(v9);
          v10 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v8, "value");
          v11 = (void *)objc_claimAutoreleasedReturnValue();
          WFHTTPFormEncodedString(v11);
          v12 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v2, "appendFormat:", CFSTR("%@=%@&"), v10, v12);

        }
        v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v16, v20, 16);
      }
      while (v5);
    }

    objc_msgSend(v2, "deleteCharactersInRange:", objc_msgSend(v2, "length") - 1, 1);
    objc_msgSend(v2, "dataUsingEncoding:", 4);
    v13 = (void *)objc_claimAutoreleasedReturnValue();

    v1 = v15;
  }
  else
  {
    v13 = (void *)objc_opt_new();
  }

  return v13;
}

__CFString *WFHTTPFormEncodedString(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  __CFString *v11;

  v1 = a1;
  if (v1)
  {
    v2 = v1;
    objc_msgSend(MEMORY[0x24BDD14A8], "alphanumericCharacterSet");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    v4 = (void *)objc_msgSend(v3, "mutableCopy");

    objc_msgSend(MEMORY[0x24BDD14A8], "whitespaceCharacterSet");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "formUnionWithCharacterSet:", v5);

    objc_msgSend(v4, "addCharactersInString:", CFSTR("-_.~"));
    objc_msgSend(v2, "stringByReplacingOccurrencesOfString:withString:", CFSTR("\r\n"), CFSTR("\n"));
    v6 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(v6, "stringByReplacingOccurrencesOfString:withString:", CFSTR("\n"), CFSTR("\r\n"));
    v7 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(v7, "stringByAddingPercentEncodingWithAllowedCharacters:", v4);
    v8 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(MEMORY[0x24BDD14A8], "whitespaceCharacterSet");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "componentsSeparatedByCharactersInSet:", v9);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v10, "componentsJoinedByString:", CFSTR("+"));
    v11 = (__CFString *)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    v11 = &stru_24C4E3948;
  }
  return v11;
}

void WFExtractTypeIdentifiersReadableByItemClass(void *a1, void *a2, _QWORD *a3, _QWORD *a4)
{
  id v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t i;
  void *v16;
  void *v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t j;
  uint64_t v23;
  _QWORD *v24;
  id v26;
  void *v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  _BYTE v36[128];
  _BYTE v37[128];
  uint64_t v38;

  v24 = a3;
  v38 = *MEMORY[0x24BDAC8D0];
  v5 = a2;
  objc_msgSend(a1, "ownedTypes");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(a1, "ownedPasteboardTypes");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "orderedSetByAddingObjectsFromOrderedSet:", v7);
  v8 = (void *)objc_claimAutoreleasedReturnValue();

  v9 = (void *)objc_opt_new();
  v10 = (void *)objc_opt_new();
  v32 = 0u;
  v33 = 0u;
  v34 = 0u;
  v35 = 0u;
  v11 = v8;
  v12 = objc_msgSend(v11, "countByEnumeratingWithState:objects:count:", &v32, v37, 16);
  if (v12)
  {
    v13 = v12;
    v14 = *(_QWORD *)v33;
    v26 = v11;
    v27 = v10;
    do
    {
      for (i = 0; i != v13; ++i)
      {
        if (*(_QWORD *)v33 != v14)
          objc_enumerationMutation(v11);
        v16 = *(void **)(*((_QWORD *)&v32 + 1) + 8 * i);
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) != 0)
        {
          objc_msgSend(v16, "string");
          v17 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v10, "addObject:", v17);
LABEL_8:

          continue;
        }
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) != 0)
        {
          v18 = (void *)objc_msgSend(v16, "objectClass");
          if (objc_msgSend(v18, "conformsToProtocol:", &unk_2547525D0))
          {
            objc_msgSend(v18, "readableTypeIdentifiersForItemProvider");
            v17 = (void *)objc_claimAutoreleasedReturnValue();
            v28 = 0u;
            v29 = 0u;
            v30 = 0u;
            v31 = 0u;
            v19 = objc_msgSend(v17, "countByEnumeratingWithState:objects:count:", &v28, v36, 16);
            if (v19)
            {
              v20 = v19;
              v21 = *(_QWORD *)v29;
              do
              {
                for (j = 0; j != v20; ++j)
                {
                  if (*(_QWORD *)v29 != v21)
                    objc_enumerationMutation(v17);
                  v23 = *(_QWORD *)(*((_QWORD *)&v28 + 1) + 8 * j);
                  if ((objc_msgSend(v5, "containsObject:", v23, v24) & 1) == 0)
                    objc_msgSend(v9, "addObject:", v23);
                }
                v20 = objc_msgSend(v17, "countByEnumeratingWithState:objects:count:", &v28, v36, 16);
              }
              while (v20);
              v11 = v26;
              v10 = v27;
            }
            goto LABEL_8;
          }
        }
      }
      v13 = objc_msgSend(v11, "countByEnumeratingWithState:objects:count:", &v32, v37, 16);
    }
    while (v13);
  }

  if (v24)
    *v24 = (id)objc_msgSend(v9, "copy");
  if (a4)
    *a4 = (id)objc_msgSend(v10, "copy");

}

uint64_t WFMethodReturnsObject(objc_method *a1)
{
  char *v1;
  void *v2;
  void *v3;
  uint64_t v4;

  v1 = method_copyReturnType(a1);
  v2 = (void *)objc_msgSend(objc_alloc(MEMORY[0x24BDD17C8]), "initWithBytesNoCopy:length:encoding:freeWhenDone:", v1, strlen(v1), 4, 1);
  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "@");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = objc_msgSend(v2, "isEqualToString:", v3);

  return v4;
}

uint64_t WFURLIsWebPage(void *a1)
{
  id v1;
  void *v2;
  uint64_t v3;
  void *v5;
  void *v6;

  v1 = a1;
  if (!v1)
  {
    objc_msgSend(MEMORY[0x24BDD1448], "currentHandler");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "BOOL WFURLIsWebPage(NSURL * _Nonnull __strong)");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "handleFailureInFunction:file:lineNumber:description:", v6, CFSTR("WFUserInterfaceHost.m"), 20, CFSTR("Invalid parameter not satisfying: %@"), CFSTR("URL"));

  }
  objc_msgSend(v1, "scheme");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  if ((objc_msgSend(v2, "isEqualToString:", CFSTR("http")) & 1) != 0
    || (objc_msgSend(v2, "isEqualToString:", CFSTR("https")) & 1) != 0)
  {
    v3 = 1;
  }
  else
  {
    v3 = objc_msgSend(v2, "isEqualToString:", CFSTR("file"));
  }

  return v3;
}

BOOL WFURLIsUniversalLink(uint64_t a1)
{
  void *v1;
  _BOOL8 v2;
  uint64_t v4;

  v4 = 0;
  objc_msgSend(MEMORY[0x24BDC1520], "appLinksWithURL:limit:error:", a1, 1, &v4);
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  v2 = objc_msgSend(v1, "count") != 0;

  return v2;
}

void sub_20BBEC618(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_20BBEC908(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void __getCNPostalAddressFormatterClass_block_invoke(uint64_t a1)
{
  void *v2;
  void *v3;

  ContactsLibrary_5301();
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = objc_getClass("CNPostalAddressFormatter");
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    getCNPostalAddressFormatterClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  }
  else
  {
    objc_msgSend(MEMORY[0x24BDD1448], "currentHandler");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "Class getCNPostalAddressFormatterClass(void)_block_invoke");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, CFSTR("WFStreetAddress.m"), 23, CFSTR("Unable to find class %s"), "CNPostalAddressFormatter");

    __break(1u);
  }
}

void ContactsLibrary_5301()
{
  void *v0;
  void *v1;
  void *v2;

  if (!ContactsLibraryCore_frameworkLibrary_5307)
    ContactsLibraryCore_frameworkLibrary_5307 = _sl_dlopen();
  if (!ContactsLibraryCore_frameworkLibrary_5307)
  {
    objc_msgSend(MEMORY[0x24BDD1448], "currentHandler");
    v0 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "void *ContactsLibrary(void)");
    v1 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v1, CFSTR("WFStreetAddress.m"), 21, CFSTR("%s"), 0);

    __break(1u);
    free(v2);
  }
}

void __getCNMutablePostalAddressClass_block_invoke(uint64_t a1)
{
  void *v2;
  void *v3;

  ContactsLibrary_5301();
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = objc_getClass("CNMutablePostalAddress");
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    getCNMutablePostalAddressClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  }
  else
  {
    objc_msgSend(MEMORY[0x24BDD1448], "currentHandler");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "Class getCNMutablePostalAddressClass(void)_block_invoke");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, CFSTR("WFStreetAddress.m"), 22, CFSTR("Unable to find class %s"), "CNMutablePostalAddress");

    __break(1u);
  }
}

void sub_20BBED9F0(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 120), 8);
  _Unwind_Resume(a1);
}

Class __getCLPlacemarkClass_block_invoke(uint64_t a1)
{
  Class result;
  void *v3;
  void *v4;
  void *v5;

  if (!CoreLocationLibraryCore_frameworkLibrary_5325)
    CoreLocationLibraryCore_frameworkLibrary_5325 = _sl_dlopen();
  if (!CoreLocationLibraryCore_frameworkLibrary_5325)
  {
    objc_msgSend(MEMORY[0x24BDD1448], "currentHandler");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "void *CoreLocationLibrary(void)");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, CFSTR("WFStreetAddress.m"), 18, CFSTR("%s"), 0);

    goto LABEL_8;
  }
  result = objc_getClass("CLPlacemark");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    objc_msgSend(MEMORY[0x24BDD1448], "currentHandler");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "Class getCLPlacemarkClass(void)_block_invoke");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v5, CFSTR("WFStreetAddress.m"), 19, CFSTR("Unable to find class %s"), "CLPlacemark");

LABEL_8:
    __break(1u);
  }
  getCLPlacemarkClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

void WFCLLocationFromSerializedLocation(void *a1)
{
  id v1;
  void *v2;
  double v3;
  double v4;
  void *v5;
  double v6;
  double v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  objc_class *v15;
  id v16;
  void *v17;
  void *v18;
  void *v19;
  id v20;
  void *v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;

  v1 = a1;
  objc_msgSend(v1, "wfObjectOfClass:forKey:", objc_opt_class(), CFSTR("latitude"));
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "doubleValue");
  v4 = v3;

  objc_msgSend(v1, "wfObjectOfClass:forKey:", objc_opt_class(), CFSTR("longitude"));
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "doubleValue");
  v7 = v6;

  objc_msgSend(v1, "wfObjectOfClass:forKey:", objc_opt_class(), CFSTR("altitude"));
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "doubleValue");

  objc_msgSend(v1, "wfObjectOfClass:forKey:", objc_opt_class(), CFSTR("horizontalAccuracy"));
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "doubleValue");

  objc_msgSend(v1, "wfObjectOfClass:forKey:", objc_opt_class(), CFSTR("verticalAccuracy"));
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v10, "doubleValue");

  objc_msgSend(v1, "wfObjectOfClass:forKey:", objc_opt_class(), CFSTR("course"));
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v11, "doubleValue");

  objc_msgSend(v1, "wfObjectOfClass:forKey:", objc_opt_class(), CFSTR("speed"));
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v12, "doubleValue");

  objc_msgSend(v1, "wfObjectOfClass:forKey:", objc_opt_class(), CFSTR("timestamp"));
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  v28 = 0;
  v29 = &v28;
  v30 = 0x2050000000;
  v14 = (void *)getCLLocationClass_softClass_5398;
  v31 = getCLLocationClass_softClass_5398;
  if (!getCLLocationClass_softClass_5398)
  {
    v23 = MEMORY[0x24BDAC760];
    v24 = 3221225472;
    v25 = (uint64_t)__getCLLocationClass_block_invoke_5399;
    v26 = &unk_24C4E3118;
    v27 = &v28;
    __getCLLocationClass_block_invoke_5399((uint64_t)&v23);
    v14 = (void *)v29[3];
  }
  v15 = objc_retainAutorelease(v14);
  _Block_object_dispose(&v28, 8);
  v16 = [v15 alloc];
  v23 = 0;
  v24 = (uint64_t)&v23;
  v25 = 0x2020000000;
  v17 = getCLLocationCoordinate2DMakeSymbolLoc_ptr_5400;
  v26 = getCLLocationCoordinate2DMakeSymbolLoc_ptr_5400;
  if (!getCLLocationCoordinate2DMakeSymbolLoc_ptr_5400)
  {
    v18 = CoreLocationLibrary_5401();
    v17 = dlsym(v18, "CLLocationCoordinate2DMake");
    *(_QWORD *)(v24 + 24) = v17;
    getCLLocationCoordinate2DMakeSymbolLoc_ptr_5400 = v17;
  }
  _Block_object_dispose(&v23, 8);
  if (v17)
  {
    ((void (*)(double, double))v17)(v4, v7);
    v19 = (void *)objc_msgSend(v16, "initWithCoordinate:altitude:horizontalAccuracy:verticalAccuracy:course:speed:timestamp:", v13);

    v20 = v19;
  }
  else
  {
    objc_msgSend(MEMORY[0x24BDD1448], "currentHandler");
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "CLLocationCoordinate2D WFCLLocationCoordinate2DMake(CLLocationDegrees, CLLocationDegrees)");
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v21, "handleFailureInFunction:file:lineNumber:description:", v22, CFSTR("CLLocation+WFSerialization.m"), 15, CFSTR("%s"), dlerror(), v23);

    __break(1u);
  }
}

void sub_20BBEDEF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void __getCLLocationClass_block_invoke_5399(uint64_t a1)
{
  void *v2;
  void *v3;

  CoreLocationLibrary_5401();
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = objc_getClass("CLLocation");
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    getCLLocationClass_softClass_5398 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  }
  else
  {
    objc_msgSend(MEMORY[0x24BDD1448], "currentHandler");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "Class getCLLocationClass(void)_block_invoke");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, CFSTR("CLLocation+WFSerialization.m"), 14, CFSTR("Unable to find class %s"), "CLLocation");

    __break(1u);
  }
}

void *CoreLocationLibrary_5401()
{
  void *v0;
  void *v2;
  void *v3;

  if (!CoreLocationLibraryCore_frameworkLibrary_5406)
    CoreLocationLibraryCore_frameworkLibrary_5406 = _sl_dlopen();
  v0 = (void *)CoreLocationLibraryCore_frameworkLibrary_5406;
  if (!CoreLocationLibraryCore_frameworkLibrary_5406)
  {
    objc_msgSend(MEMORY[0x24BDD1448], "currentHandler");
    v0 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "void *CoreLocationLibrary(void)");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v2, CFSTR("CLLocation+WFSerialization.m"), 13, CFSTR("%s"), 0);

    __break(1u);
    free(v3);
  }
  return v0;
}

id WFSerializedLocationFromCLLocation(void *a1)
{
  id v1;
  void *v2;
  double v3;
  double v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;

  v1 = a1;
  if (v1)
  {
    v2 = (void *)objc_opt_new();
    objc_msgSend(v1, "coordinate");
    v4 = v3;
    objc_msgSend(MEMORY[0x24BDD16E0], "numberWithDouble:");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "setObject:forKey:", v5, CFSTR("latitude"));

    objc_msgSend(MEMORY[0x24BDD16E0], "numberWithDouble:", v4);
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "setObject:forKey:", v6, CFSTR("longitude"));

    v7 = (void *)MEMORY[0x24BDD16E0];
    objc_msgSend(v1, "altitude");
    objc_msgSend(v7, "numberWithDouble:");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "setObject:forKey:", v8, CFSTR("altitude"));

    v9 = (void *)MEMORY[0x24BDD16E0];
    objc_msgSend(v1, "horizontalAccuracy");
    objc_msgSend(v9, "numberWithDouble:");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "setObject:forKey:", v10, CFSTR("horizontalAccuracy"));

    v11 = (void *)MEMORY[0x24BDD16E0];
    objc_msgSend(v1, "verticalAccuracy");
    objc_msgSend(v11, "numberWithDouble:");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "setObject:forKey:", v12, CFSTR("verticalAccuracy"));

    v13 = (void *)MEMORY[0x24BDD16E0];
    objc_msgSend(v1, "course");
    objc_msgSend(v13, "numberWithDouble:");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "setObject:forKey:", v14, CFSTR("course"));

    v15 = (void *)MEMORY[0x24BDD16E0];
    objc_msgSend(v1, "speed");
    objc_msgSend(v15, "numberWithDouble:");
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "setObject:forKey:", v16, CFSTR("speed"));

    objc_msgSend(v1, "timestamp");
    v17 = (void *)objc_claimAutoreleasedReturnValue();

    if (v17)
    {
      objc_msgSend(v1, "timestamp");
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v2, "setObject:forKey:", v18, CFSTR("timestamp"));

    }
  }
  else
  {
    v2 = 0;
  }

  return v2;
}

void sub_20BBEEC18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,char a53)
{
  _Block_object_dispose(&a53, 8);
  _Unwind_Resume(a1);
}

id WFReminderPredicateDescriptorFromContentPredicate(void *a1)
{
  id v1;
  id v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  void *v11;
  void *v12;
  unint64_t v13;
  void *v14;
  void *v15;
  int v16;
  uint64_t v17;
  void *v18;
  void *v19;
  int v20;
  void *v21;
  void *v22;
  void *v23;
  id REMReminderPredicateDescriptorClass;
  void *v25;
  void *v26;
  void *v27;
  int v28;
  BOOL v29;
  uint64_t v30;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  _BYTE v36[128];
  uint64_t v37;

  v37 = *MEMORY[0x24BDAC8D0];
  v1 = a1;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    v2 = v1;
    v3 = (void *)objc_opt_new();
    v32 = 0u;
    v33 = 0u;
    v34 = 0u;
    v35 = 0u;
    objc_msgSend(v2, "subpredicates", 0);
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v32, v36, 16);
    if (v5)
    {
      v6 = v5;
      v7 = *(_QWORD *)v33;
      while (2)
      {
        v8 = 0;
        do
        {
          if (*(_QWORD *)v33 != v7)
            objc_enumerationMutation(v4);
          WFReminderPredicateDescriptorFromContentPredicate(*(_QWORD *)(*((_QWORD *)&v32 + 1) + 8 * v8));
          v9 = objc_claimAutoreleasedReturnValue();
          if (!v9)
          {

            goto LABEL_18;
          }
          v10 = (void *)v9;
          objc_msgSend(v3, "addObject:", v9);

          ++v8;
        }
        while (v6 != v8);
        v6 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v32, v36, 16);
        if (v6)
          continue;
        break;
      }
    }

    WFCompoundReminderPredicateDescriptorWithSubpredicates(v3, objc_msgSend(v2, "compoundPredicateType"));
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    goto LABEL_38;
  }
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    v2 = v1;
    objc_msgSend(v2, "value");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    if (!v3)
    {
LABEL_18:
      v11 = 0;
LABEL_38:

      goto LABEL_39;
    }
    objc_msgSend(v2, "property");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    v13 = objc_msgSend(v2, "comparisonType");
    objc_msgSend(v12, "name");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    WFLocalizedContentPropertyNameMarker(CFSTR("Is Completed"));
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    v16 = objc_msgSend(v14, "isEqualToString:", v15);

    if (v16)
    {
      if (v13 == 5)
      {
        v17 = objc_msgSend(v3, "BOOLValue") ^ 1;
        goto LABEL_30;
      }
      if (v13 == 4)
      {
        v17 = objc_msgSend(v3, "BOOLValue");
LABEL_30:
        objc_msgSend(getREMReminderPredicateDescriptorClass(), "predicateDescriptorForRemindersWithCompleted:", v17);
        v30 = objc_claimAutoreleasedReturnValue();
        goto LABEL_31;
      }
    }
    else
    {
      objc_msgSend(v12, "name");
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      WFLocalizedContentPropertyNameMarker(CFSTR("List"));
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      v20 = objc_msgSend(v18, "isEqualToString:", v19);

      if (v20)
      {
        +[WFReminderContentItem allLists](WFReminderContentItem, "allLists");
        v21 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v21, "if_objectsWithValue:forKey:", v3, CFSTR("name"));
        v22 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v22, "firstObject");
        v23 = (void *)objc_claimAutoreleasedReturnValue();

        REMReminderPredicateDescriptorClass = getREMReminderPredicateDescriptorClass();
        objc_msgSend(v23, "objectID");
        v25 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(REMReminderPredicateDescriptorClass, "predicateDescriptorForRemindersWithListID:", v25);
        v11 = (void *)objc_claimAutoreleasedReturnValue();

LABEL_37:
        goto LABEL_38;
      }
      objc_msgSend(v12, "name");
      v26 = (void *)objc_claimAutoreleasedReturnValue();
      WFLocalizedContentPropertyNameMarker(CFSTR("Due Date"));
      v27 = (void *)objc_claimAutoreleasedReturnValue();
      v28 = objc_msgSend(v26, "isEqualToString:", v27);

      if (v28)
      {
        v29 = v13 != 4 && v13 > 1;
        if (!v29 && v13 - 2 <= 2)
        {
          objc_msgSend(getREMReminderPredicateDescriptorClass(), "predicateDescriptorForRemindersWithDisplayDateBetween:and:", v3, v3);
          v30 = objc_claimAutoreleasedReturnValue();
LABEL_31:
          v11 = (void *)v30;
          goto LABEL_37;
        }
        if (v13 <= 4)
        {
          if (((1 << v13) & 0x13) != 0)
            objc_msgSend(getREMReminderPredicateDescriptorClass(), "predicateDescriptorForRemindersWithDisplayDateOnOrBefore:", v3);
          else
            objc_msgSend(getREMReminderPredicateDescriptorClass(), "predicateDescriptorForRemindersWithDisplayDateOnOrAfter:", v3);
          v30 = objc_claimAutoreleasedReturnValue();
          goto LABEL_31;
        }
      }
    }
    v11 = 0;
    goto LABEL_37;
  }
  v11 = 0;
LABEL_39:

  return v11;
}

id getREMReminderSortDescriptorClass()
{
  void *v0;
  id v1;
  _QWORD v3[5];
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = 0;
  v5 = &v4;
  v6 = 0x2050000000;
  v0 = (void *)getREMReminderSortDescriptorClass_softClass;
  v7 = getREMReminderSortDescriptorClass_softClass;
  if (!getREMReminderSortDescriptorClass_softClass)
  {
    v3[0] = MEMORY[0x24BDAC760];
    v3[1] = 3221225472;
    v3[2] = __getREMReminderSortDescriptorClass_block_invoke;
    v3[3] = &unk_24C4E3118;
    v3[4] = &v4;
    __getREMReminderSortDescriptorClass_block_invoke((uint64_t)v3);
    v0 = (void *)v5[3];
  }
  v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_20BBEF310(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id WFCompoundReminderPredicateDescriptorWithSubpredicates(void *a1, uint64_t a2)
{
  id v3;
  uint64_t v4;
  void *v5;

  v3 = a1;
  if (a2 == 2)
  {
    objc_msgSend(getREMReminderPredicateDescriptorClass(), "orPredicateDescriptorWithDescriptors:", v3);
    v4 = objc_claimAutoreleasedReturnValue();
  }
  else
  {
    if (a2 != 1)
    {
      v5 = 0;
      goto LABEL_7;
    }
    objc_msgSend(getREMReminderPredicateDescriptorClass(), "andPredicateDescriptorWithDescriptors:", v3);
    v4 = objc_claimAutoreleasedReturnValue();
  }
  v5 = (void *)v4;
LABEL_7:

  return v5;
}

void __getREMReminderClass_block_invoke_5443(uint64_t a1)
{
  void *v2;
  void *v3;

  ReminderKitLibrary_5446();
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = objc_getClass("REMReminder");
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    getREMReminderClass_softClass_5442 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  }
  else
  {
    objc_msgSend(MEMORY[0x24BDD1448], "currentHandler");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "Class getREMReminderClass(void)_block_invoke");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, CFSTR("WFRemindersLibraryFiltering.m"), 21, CFSTR("Unable to find class %s"), "REMReminder");

    __break(1u);
  }
}

void ReminderKitLibrary_5446()
{
  void *v0;
  void *v1;
  void *v2;

  if (!ReminderKitLibraryCore_frameworkLibrary_5455)
    ReminderKitLibraryCore_frameworkLibrary_5455 = _sl_dlopen();
  if (!ReminderKitLibraryCore_frameworkLibrary_5455)
  {
    objc_msgSend(MEMORY[0x24BDD1448], "currentHandler");
    v0 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "void *ReminderKitLibrary(void)");
    v1 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v1, CFSTR("WFRemindersLibraryFiltering.m"), 20, CFSTR("%s"), 0);

    __break(1u);
    free(v2);
  }
}

id getREMReminderPredicateDescriptorClass()
{
  void *v0;
  id v1;
  _QWORD v3[5];
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = 0;
  v5 = &v4;
  v6 = 0x2050000000;
  v0 = (void *)getREMReminderPredicateDescriptorClass_softClass;
  v7 = getREMReminderPredicateDescriptorClass_softClass;
  if (!getREMReminderPredicateDescriptorClass_softClass)
  {
    v3[0] = MEMORY[0x24BDAC760];
    v3[1] = 3221225472;
    v3[2] = __getREMReminderPredicateDescriptorClass_block_invoke;
    v3[3] = &unk_24C4E3118;
    v3[4] = &v4;
    __getREMReminderPredicateDescriptorClass_block_invoke((uint64_t)v3);
    v0 = (void *)v5[3];
  }
  v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_20BBEF604(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void __getREMReminderPredicateDescriptorClass_block_invoke(uint64_t a1)
{
  void *v2;
  void *v3;

  ReminderKitLibrary_5446();
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = objc_getClass("REMReminderPredicateDescriptor");
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    getREMReminderPredicateDescriptorClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  }
  else
  {
    objc_msgSend(MEMORY[0x24BDD1448], "currentHandler");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "Class getREMReminderPredicateDescriptorClass(void)_block_invoke");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, CFSTR("WFRemindersLibraryFiltering.m"), 22, CFSTR("Unable to find class %s"), "REMReminderPredicateDescriptor");

    __break(1u);
  }
}

void __getREMReminderSortDescriptorClass_block_invoke(uint64_t a1)
{
  void *v2;
  void *v3;

  ReminderKitLibrary_5446();
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = objc_getClass("REMReminderSortDescriptor");
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    getREMReminderSortDescriptorClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  }
  else
  {
    objc_msgSend(MEMORY[0x24BDD1448], "currentHandler");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "Class getREMReminderSortDescriptorClass(void)_block_invoke");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, CFSTR("WFRemindersLibraryFiltering.m"), 23, CFSTR("Unable to find class %s"), "REMReminderSortDescriptor");

    __break(1u);
  }
}

void __getWFRemindersLibraryFilteringLogObject_block_invoke()
{
  os_log_t v0;
  void *v1;

  v0 = os_log_create((const char *)*MEMORY[0x24BEC1968], "RemindersLibraryFiltering");
  v1 = (void *)getWFRemindersLibraryFilteringLogObject_log;
  getWFRemindersLibraryFilteringLogObject_log = (uint64_t)v0;

}

uint64_t __Block_byref_object_copy__5819(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__5820(uint64_t a1)
{

}

CGImageSourceRef WFImageSourceCreateFromFile(void *a1, void *a2)
{
  const __CFDictionary *v3;
  id v4;
  const __CFURL *v5;
  CGImageSourceRef v6;
  CGImageSourceRef v7;

  v3 = a2;
  v4 = a1;
  if (objc_msgSend(v4, "representationType"))
  {
    objc_msgSend(v4, "fileURL");
    v5 = (const __CFURL *)objc_claimAutoreleasedReturnValue();

    v6 = CGImageSourceCreateWithURL(v5, v3);
  }
  else
  {
    objc_msgSend(v4, "data");
    v5 = (const __CFURL *)objc_claimAutoreleasedReturnValue();

    v6 = CGImageSourceCreateWithData(v5, v3);
  }
  v7 = v6;

  return v7;
}

double WFImageSizeFromFile(void *a1, void *a2)
{
  id v3;
  id v4;
  CGImageSourceRef v5;
  CGImageSource *v6;
  void (**v7)(_QWORD);
  double v8;
  _QWORD aBlock[5];

  v3 = a1;
  v4 = a2;
  v5 = WFImageSourceCreateFromFile(v3, 0);
  if (v5)
  {
    v6 = v5;
    aBlock[0] = MEMORY[0x24BDAC760];
    aBlock[1] = 3221225472;
    aBlock[2] = __WFImageSizeFromFile_block_invoke;
    aBlock[3] = &__block_descriptor_40_e5_v8__0l;
    aBlock[4] = v5;
    v7 = (void (**)(_QWORD))_Block_copy(aBlock);
    v8 = WFImageSizeFromImageSource(v6);
    v7[2](v7);

  }
  else
  {
    v8 = *MEMORY[0x24BDBF148];
  }

  return v8;
}

void sub_20BBF4E54(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(v1 + 16))(v1);
  _Unwind_Resume(a1);
}

double WFImageSizeFromImageSource(CGImageSource *a1)
{
  CFDictionaryRef v1;
  void *v2;
  double v3;
  double v4;
  void *v5;
  double v6;
  double v7;
  void *v8;
  uint64_t v9;

  v1 = CGImageSourceCopyPropertiesAtIndex(a1, 0, 0);
  -[__CFDictionary objectForKey:](v1, "objectForKey:", *MEMORY[0x24BDD96C8]);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "doubleValue");
  v4 = v3;

  -[__CFDictionary objectForKey:](v1, "objectForKey:", *MEMORY[0x24BDD96C0]);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "doubleValue");
  v7 = v6;

  -[__CFDictionary objectForKey:](v1, "objectForKey:", *MEMORY[0x24BDD9698]);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = objc_msgSend(v8, "integerValue");

  if (v9 > 4)
    v4 = v7;

  return v4;
}

id WFImageAtIndexFromImageSource(CGImageSource *a1, size_t a2)
{
  CFDictionaryRef v4;
  CGImageRef ImageAtIndex;
  void *v6;
  void (**v7)(_QWORD);
  _QWORD aBlock[5];

  v4 = CGImageSourceCopyPropertiesAtIndex(a1, a2, 0);
  if (v4)
  {
    ImageAtIndex = CGImageSourceCreateImageAtIndex(a1, a2, 0);
    v6 = ImageAtIndex;
    if (ImageAtIndex)
    {
      aBlock[0] = MEMORY[0x24BDAC760];
      aBlock[1] = 3221225472;
      aBlock[2] = __WFImageAtIndexFromImageSource_block_invoke;
      aBlock[3] = &__block_descriptor_40_e5_v8__0l;
      aBlock[4] = ImageAtIndex;
      v7 = (void (**)(_QWORD))_Block_copy(aBlock);
      objc_msgSend(MEMORY[0x24BEC14E0], "imageWithCGImage:scale:orientation:", v6, WFImageOrientationFromMetadata(v4), 1.0);
      v6 = (void *)objc_claimAutoreleasedReturnValue();
      v7[2](v7);

    }
  }
  else
  {
    v6 = 0;
  }

  return v6;
}

void sub_20BBF5024(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(v1 + 16))(v1);
  _Unwind_Resume(a1);
}

CGImageSource *WFResizedImageFromImageFile(void *a1, void *a2, double a3)
{
  id v5;
  id v6;
  CGImageSourceRef v7;
  CGImageSource *v8;
  void (**v9)(_QWORD);
  void *v10;
  _QWORD aBlock[5];

  v5 = a1;
  v6 = a2;
  v7 = WFImageSourceCreateFromFile(v5, 0);
  v8 = v7;
  if (v7)
  {
    aBlock[0] = MEMORY[0x24BDAC760];
    aBlock[1] = 3221225472;
    aBlock[2] = __WFResizedImageFromImageFile_block_invoke;
    aBlock[3] = &__block_descriptor_40_e5_v8__0l;
    aBlock[4] = v7;
    v9 = (void (**)(_QWORD))_Block_copy(aBlock);
    if (!v6)
    {
      objc_msgSend(v5, "wfType");
      v6 = (id)objc_claimAutoreleasedReturnValue();
    }
    objc_msgSend(v5, "filename");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    WFResizedImageFromImageSource(v8, v6, v10, a3);
    v8 = (CGImageSource *)objc_claimAutoreleasedReturnValue();

    v9[2](v9);
  }

  return v8;
}

void sub_20BBF5148(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(v1 + 16))(v1);
  _Unwind_Resume(a1);
}

CGImage *WFResizedImageFromImageSource(CGImageSource *a1, void *a2, void *a3, double a4)
{
  id v7;
  id v8;
  uint64_t v9;
  void *v10;
  const __CFDictionary *v11;
  CGImageRef ThumbnailAtIndex;
  CGImage *v13;
  uint64_t v14;
  void (**v15)(_QWORD);
  const __CFURL *v16;
  void *v17;
  __CFString *v18;
  CGImageDestination *v19;
  void (**v20)(_QWORD);
  _QWORD v22[5];
  _QWORD aBlock[5];
  _QWORD v24[3];
  _QWORD v25[5];

  v25[3] = *MEMORY[0x24BDAC8D0];
  v7 = a2;
  v8 = a3;
  v9 = *MEMORY[0x24BDD9778];
  v24[0] = *MEMORY[0x24BDD9788];
  v24[1] = v9;
  v25[0] = MEMORY[0x24BDBD1C8];
  v25[1] = MEMORY[0x24BDBD1C8];
  v24[2] = *MEMORY[0x24BDD9808];
  objc_msgSend(MEMORY[0x24BDD16E0], "numberWithDouble:", a4);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  v25[2] = v10;
  v11 = (const __CFDictionary *)objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", v25, v24, 3);

  ThumbnailAtIndex = CGImageSourceCreateThumbnailAtIndex(a1, 0, v11);
  v13 = ThumbnailAtIndex;
  if (ThumbnailAtIndex)
  {
    v14 = MEMORY[0x24BDAC760];
    aBlock[0] = MEMORY[0x24BDAC760];
    aBlock[1] = 3221225472;
    aBlock[2] = __WFResizedImageFromImageSource_block_invoke;
    aBlock[3] = &__block_descriptor_40_e5_v8__0l;
    aBlock[4] = ThumbnailAtIndex;
    v15 = (void (**)(_QWORD))_Block_copy(aBlock);
    +[WFTemporaryFileManager createTemporaryFileWithFilename:](WFTemporaryFileManager, "createTemporaryFileWithFilename:", v8);
    v16 = (const __CFURL *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "utType");
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v17, "identifier");
    v18 = (__CFString *)objc_claimAutoreleasedReturnValue();
    v19 = CGImageDestinationCreateWithURL(v16, v18, 1uLL, 0);

    if (v19)
    {
      v22[0] = v14;
      v22[1] = 3221225472;
      v22[2] = __WFResizedImageFromImageSource_block_invoke_2;
      v22[3] = &__block_descriptor_40_e5_v8__0l;
      v22[4] = v19;
      v20 = (void (**)(_QWORD))_Block_copy(v22);
      CGImageDestinationAddImage(v19, v13, 0);
      CGImageDestinationFinalize(v19);
      +[WFFileRepresentation fileWithURL:options:ofType:](WFFileRepresentation, "fileWithURL:options:ofType:", v16, 1, v7);
      v13 = (CGImage *)objc_claimAutoreleasedReturnValue();
      v20[2](v20);

    }
    else
    {
      v13 = 0;
    }

    v15[2](v15);
  }

  return v13;
}

void sub_20BBF53B4(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(v1 + 16))(v1);
  _Unwind_Resume(a1);
}

id WFTransformedImageFromImage(void *a1, void *a2, void *a3, double a4, double a5)
{
  id v9;
  void (**v10)(void *, void *, void *, double, double, double, double);
  void (**v11)(void *, void *, void *, double, double, double, double);
  void *v12;
  uint64_t v13;
  void *v14;
  void *v15;
  uint64_t v16;
  CGImageSource *v17;
  CGImageSource *v18;
  size_t Count;
  void *v20;
  const __CFURL *v21;
  void *v22;
  __CFString *v23;
  CGImageDestinationRef v24;
  size_t v25;
  size_t v26;
  uint64_t v27;
  CFDictionaryRef v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  CGImage *v34;
  void *v35;
  const __CFURL *v36;
  void *v37;
  __CFString *v38;
  const __CFURL *v39;
  CGImageDestination *v40;
  void *v41;
  void *v42;
  void *v43;
  unint64_t v44;
  void *v45;
  const __CFURL *v46;
  CGImageSource *v47;
  const __CFDictionary *v48;
  void *v49;
  void *v50;
  const __CFURL *v52;
  const __CFURL *v53;
  size_t v54;
  CGImageSource *v55;
  void (**v56)(void *, void *, void *, double, double, double, double);
  void *v57;
  CGImageDestination *idst;
  uint64_t v59;
  uint64_t v60;
  void *v61;
  id v62;
  uint64_t v63;
  CGImage *image;

  v62 = a1;
  v9 = a2;
  v10 = a3;
  if (v10)
    v11 = v10;
  else
    v11 = (void (**)(void *, void *, void *, double, double, double, double))&__block_literal_global_6212;
  if (!v9)
  {
    objc_msgSend(v62, "wfType");
    v9 = (id)objc_claimAutoreleasedReturnValue();
  }
  if (objc_msgSend(v9, "isEqualToUTType:", *MEMORY[0x24BDF8410]))
  {
    objc_msgSend(v62, "filename");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    v13 = objc_msgSend(v12, "length");

    if (v13)
    {
      v14 = (void *)MEMORY[0x24BEC14A0];
      objc_msgSend(v62, "filename");
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v14, "typeFromFilename:", v15);
      v16 = objc_claimAutoreleasedReturnValue();

      v9 = (id)v16;
    }
  }
  v17 = WFImageSourceCreateFromFile(v62, 0);
  if (v17)
  {
    v18 = v17;
    Count = CGImageSourceGetCount(v17);
    objc_msgSend(v62, "filename");
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    +[WFTemporaryFileManager createTemporaryFileWithFilename:](WFTemporaryFileManager, "createTemporaryFileWithFilename:", v20);
    v21 = (const __CFURL *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(v9, "utType");
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v22, "identifier");
    v23 = (__CFString *)objc_claimAutoreleasedReturnValue();
    v24 = CGImageDestinationCreateWithURL(v21, v23, Count, 0);

    if (v24)
    {
      idst = v24;
      v52 = v21;
      v61 = v9;
      v57 = (void *)objc_opt_new();
      if (Count)
      {
        v25 = Count;
        v26 = 0;
        v27 = *MEMORY[0x24BDD96E8];
        v59 = *MEMORY[0x24BDD9710];
        v60 = *MEMORY[0x24BDD9698];
        v55 = v18;
        v56 = v11;
        v54 = v25;
        v63 = *MEMORY[0x24BDD96E8];
        do
        {
          v28 = CGImageSourceCopyPropertiesAtIndex(v18, v26, 0);
          objc_msgSend(MEMORY[0x24BEC1378], "HDRCapableContextWithSize:scale:", a4, a5, 1.0);
          v29 = (void *)objc_claimAutoreleasedReturnValue();
          if (v29)
          {
            WFImageAtIndexFromImageSource(v18, v26);
            v30 = (void *)objc_claimAutoreleasedReturnValue();
            v11[2](v11, v30, v29, 0.0, 0.0, a4, a5);

            image = CGBitmapContextCreateImage((CGContextRef)objc_msgSend(objc_retainAutorelease(v29), "CGContext"));
            v31 = (void *)-[__CFDictionary mutableCopy](v28, "mutableCopy");
            -[__CFDictionary objectForKey:](v28, "objectForKey:", v27);
            v32 = (void *)objc_claimAutoreleasedReturnValue();
            v33 = (void *)objc_msgSend(v32, "mutableCopy");

            v27 = v63;
            objc_msgSend(v31, "setObject:forKey:", &unk_24C50F458, v60);
            objc_msgSend(v33, "setObject:forKey:", &unk_24C50F458, v59);
            if (v33)
              objc_msgSend(v31, "setObject:forKey:", v33, v63);
            if (v25 == 1)
            {
              v34 = image;
              CGImageDestinationAddImage(idst, image, (CFDictionaryRef)v31);
            }
            else
            {
              objc_msgSend(v62, "filename");
              v35 = (void *)objc_claimAutoreleasedReturnValue();
              +[WFTemporaryFileManager createTemporaryFileWithFilename:](WFTemporaryFileManager, "createTemporaryFileWithFilename:", v35);
              v36 = (const __CFURL *)objc_claimAutoreleasedReturnValue();

              objc_msgSend(v61, "utType");
              v37 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v37, "identifier");
              v38 = (__CFString *)objc_claimAutoreleasedReturnValue();
              v39 = v36;
              v40 = CGImageDestinationCreateWithURL(v36, v38, 1uLL, 0);

              CGImageDestinationAddImage(v40, image, (CFDictionaryRef)v31);
              CGImageDestinationFinalize(v40);
              CFRelease(v40);
              objc_msgSend(MEMORY[0x24BDD1880], "UUID");
              v41 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v41, "UUIDString");
              v42 = (void *)objc_claimAutoreleasedReturnValue();
              +[WFFileRepresentation fileWithURL:options:ofType:proposedFilename:](WFFileRepresentation, "fileWithURL:options:ofType:proposedFilename:", v39, 1, v61, v42);
              v43 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v57, "addObject:", v43);

              v34 = image;
              v18 = v55;

              v11 = v56;
              v25 = v54;
              v27 = v63;
            }
            CGImageRelease(v34);

          }
          ++v26;
        }
        while (v25 != v26);
      }
      if (objc_msgSend(v57, "count", v52))
      {
        v44 = 0;
        do
        {
          objc_msgSend(v57, "objectAtIndex:", v44);
          v45 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v45, "fileURL");
          v46 = (const __CFURL *)objc_claimAutoreleasedReturnValue();
          v47 = CGImageSourceCreateWithURL(v46, 0);

          v48 = CGImageSourceCopyPropertiesAtIndex(v18, 0, 0);
          CGImageDestinationAddImageFromSource(idst, v47, 0, v48);
          if (v47)
            CFRelease(v47);

          ++v44;
        }
        while (v44 < objc_msgSend(v57, "count"));
      }
      CGImageDestinationFinalize(idst);

      CFRelease(v18);
      CFRelease(idst);
      objc_msgSend(v62, "filename");
      v49 = (void *)objc_claimAutoreleasedReturnValue();
      v21 = v53;
      v9 = v61;
      +[WFFileRepresentation fileWithURL:options:ofType:proposedFilename:](WFFileRepresentation, "fileWithURL:options:ofType:proposedFilename:", v53, 1, v61, v49);
      v50 = (void *)objc_claimAutoreleasedReturnValue();

    }
    else
    {
      v50 = 0;
    }

  }
  else
  {
    v50 = 0;
  }

  return v50;
}

void WFAsyncTransformedImageFromImage(void *a1, void *a2, void *a3, void *a4, double a5, double a6)
{
  id v11;
  id v12;
  id v13;
  id v14;
  NSObject *v15;
  _QWORD v16[4];
  id v17;
  id v18;
  id v19;
  id v20;
  double v21;
  double v22;

  v11 = a1;
  v12 = a2;
  v13 = a3;
  v14 = a4;
  if (v14)
  {
    dispatch_get_global_queue(0, 0);
    v15 = objc_claimAutoreleasedReturnValue();
    v16[0] = MEMORY[0x24BDAC760];
    v16[1] = 3221225472;
    v16[2] = __WFAsyncTransformedImageFromImage_block_invoke;
    v16[3] = &unk_24C4DDD00;
    v17 = v11;
    v21 = a5;
    v22 = a6;
    v18 = v12;
    v19 = v13;
    v20 = v14;
    dispatch_async(v15, v16);

  }
}

id WFMetadataRotateImage(void *a1, int a2, _QWORD *a3, long double a4)
{
  id v7;
  uint64_t v8;
  void *v9;
  CGImageSource *v10;
  void *v11;
  unsigned int v12;
  CFErrorRef *p_err;
  int v14;
  int v15;
  int v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  const __CFDictionary *v21;
  const __CFURL *v22;
  void *v23;
  void *v24;
  void *v25;
  __CFString *v26;
  CGImageDestination *v27;
  _BOOL4 v28;
  void *v29;
  void *v30;
  void *v32;
  void *v33;
  uint64_t v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  CFErrorRef err;
  int v41;
  int v42;
  uint64_t v43;

  v43 = *MEMORY[0x24BDAC8D0];
  v7 = a1;
  if (fmod(a4, 90.0) != 0.0
    || (v38 = *MEMORY[0x24BDD97E0],
        v8 = MEMORY[0x24BDBD1C8],
        v39 = MEMORY[0x24BDBD1C8],
        objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", &v39, &v38, 1),
        v9 = (void *)objc_claimAutoreleasedReturnValue(),
        v10 = WFImageSourceCreateFromFile(v7, v9),
        v9,
        !v10))
  {
    v17 = 0;
    goto LABEL_26;
  }
  v36 = *MEMORY[0x24BDD97F0];
  v37 = v8;
  CGImageSourceCopyPropertiesAtIndex(v10, 0, (CFDictionaryRef)objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", &v37, &v36, 1));
  v33 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v33, "objectForKeyedSubscript:", *MEMORY[0x24BDD9698]);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  if (!v11)
    v11 = &unk_24C50F458;
  v32 = v11;
  v12 = objc_msgSend(v11, "integerValue");
  p_err = 0;
  if (v12 <= 8)
  {
    if (((1 << v12) & 0xB4) != 0)
    {
      LODWORD(err) = 2;
      v14 = 5;
      v15 = 4;
      v16 = 7;
      goto LABEL_11;
    }
    if (((1 << v12) & 0x14A) != 0)
    {
      LODWORD(err) = 1;
      v14 = 8;
      v15 = 3;
      v16 = 6;
LABEL_11:
      p_err = &err;
      HIDWORD(err) = v16;
      v41 = v15;
      v42 = v14;
    }
  }
  if (v12 - 3 > 5)
    LOBYTE(v18) = 0;
  else
    v18 = qword_20BC9A328[v12 - 3];
  v19 = *((unsigned int *)p_err + (((_BYTE)v18 + (unint64_t)(a4 / 90.0)) & 3));
  v34 = *MEMORY[0x24BDD9240];
  objc_msgSend(MEMORY[0x24BDD16E0], "numberWithUnsignedInt:", v19);
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  v35 = v20;
  objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", &v35, &v34, 1);
  v21 = (const __CFDictionary *)objc_claimAutoreleasedReturnValue();

  if ((a2 & 1) != 0)
  {
    objc_msgSend(v7, "fileURL");
    v22 = (const __CFURL *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    objc_msgSend(v7, "filename");
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    +[WFTemporaryFileManager createTemporaryFileWithFilename:](WFTemporaryFileManager, "createTemporaryFileWithFilename:", v23);
    v22 = (const __CFURL *)objc_claimAutoreleasedReturnValue();

  }
  objc_msgSend(v7, "wfType");
  v24 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v24, "utType");
  v25 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v25, "identifier");
  v26 = (__CFString *)objc_claimAutoreleasedReturnValue();
  v27 = CGImageDestinationCreateWithURL(v22, v26, 1uLL, 0);

  err = 0;
  v28 = CGImageDestinationCopyImageSource(v27, v10, v21, &err);
  if (a3)
    *a3 = objc_retainAutorelease(err);
  if (v28)
  {
    if (a2)
    {
      v17 = v7;
    }
    else
    {
      objc_msgSend(v7, "wfType");
      v29 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v7, "filename");
      v30 = (void *)objc_claimAutoreleasedReturnValue();
      +[WFFileRepresentation fileWithURL:options:ofType:proposedFilename:](WFFileRepresentation, "fileWithURL:options:ofType:proposedFilename:", v22, 1, v29, v30);
      v17 = (id)objc_claimAutoreleasedReturnValue();

    }
  }
  else
  {
    v17 = 0;
  }

LABEL_26:
  return v17;
}

id WFJavaScriptCoreRepresentationFromPropertyList(void *a1)
{
  return WFJavaScriptRepresentationFromPropertyList(a1, 1);
}

id WFJavaScriptRepresentationFromPropertyList(void *a1, uint64_t a2)
{
  id v3;
  void *v4;
  char v5;
  void *v6;
  id v7;
  void *v9;
  void *v10;
  _QWORD *v11;
  _QWORD *v12;
  void *v13;
  _QWORD *v14;
  _QWORD v15[5];
  _QWORD v16[5];
  _QWORD v17[2];
  _QWORD v18[2];
  _QWORD v19[2];
  _QWORD v20[3];

  v20[2] = *MEMORY[0x24BDAC8D0];
  v3 = a1;
  if (!v3)
    goto LABEL_5;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    if (!a2)
    {
      objc_msgSend(MEMORY[0x24BDD1518], "notANumber");
      v4 = (void *)objc_claimAutoreleasedReturnValue();
      v5 = objc_msgSend(v3, "isEqualToNumber:", v4);

      if ((v5 & 1) != 0)
        goto LABEL_5;
    }
    goto LABEL_8;
  }
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0 || (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0))
  {
LABEL_8:
    v7 = v3;
LABEL_9:
    v6 = v7;
    goto LABEL_10;
  }
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    v19[0] = CFSTR("__type__");
    v19[1] = CFSTR("__value__");
    v20[0] = CFSTR("data");
    objc_msgSend(v3, "base64EncodedStringWithOptions:", 0);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    v20[1] = v9;
    v10 = (void *)MEMORY[0x24BDBCE70];
    v11 = v20;
    v12 = v19;
LABEL_13:
    objc_msgSend(v10, "dictionaryWithObjects:forKeys:count:", v11, v12, 2);
    v6 = (void *)objc_claimAutoreleasedReturnValue();

    goto LABEL_10;
  }
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    if (a2 == 1)
      goto LABEL_8;
    if (!a2)
    {
      v18[0] = CFSTR("date");
      v17[0] = CFSTR("__type__");
      v17[1] = CFSTR("__value__");
      v13 = (void *)MEMORY[0x24BDD16E0];
      objc_msgSend(v3, "timeIntervalSince1970");
      objc_msgSend(v13, "numberWithDouble:");
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      v18[1] = v9;
      v10 = (void *)MEMORY[0x24BDBCE70];
      v11 = v18;
      v12 = v17;
      goto LABEL_13;
    }
  }
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    v16[0] = MEMORY[0x24BDAC760];
    v16[1] = 3221225472;
    v16[2] = __WFJavaScriptRepresentationFromPropertyList_block_invoke;
    v16[3] = &__block_descriptor_40_e11__24__0_8Q16l;
    v16[4] = a2;
    v14 = v16;
LABEL_22:
    objc_msgSend(v3, "if_compactMap:", v14);
    v7 = (id)objc_claimAutoreleasedReturnValue();
    goto LABEL_9;
  }
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    v15[0] = MEMORY[0x24BDAC760];
    v15[1] = 3221225472;
    v15[2] = __WFJavaScriptRepresentationFromPropertyList_block_invoke_2;
    v15[3] = &__block_descriptor_40_e19_v40__0_8_16__24__32l;
    v15[4] = a2;
    v14 = v15;
    goto LABEL_22;
  }
LABEL_5:
  v6 = 0;
LABEL_10:

  return v6;
}

id WFJSONRepresentationFromPropertyList(void *a1)
{
  return WFJavaScriptRepresentationFromPropertyList(a1, 0);
}

id WFPropertyListRepresentationFromJSON(void *a1)
{
  id v1;
  id v2;
  void *v3;
  void *v4;
  void *v5;
  uint64_t v6;
  void *v7;

  v1 = a1;
  if (v1)
  {
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
    {
      objc_msgSend(v1, "if_compactMap:", &__block_literal_global_6243);
      v2 = (id)objc_claimAutoreleasedReturnValue();
LABEL_10:
      v3 = v2;
      goto LABEL_16;
    }
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) == 0)
    {
      v2 = v1;
      goto LABEL_10;
    }
    objc_msgSend(v1, "objectForKey:", CFSTR("__type__"));
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v1, "objectForKey:", CFSTR("__value__"));
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v4, "isEqual:", CFSTR("data"))
      && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0))
    {
      v6 = objc_msgSend(objc_alloc(MEMORY[0x24BDBCE50]), "initWithBase64EncodedString:options:", v5, 0);
    }
    else if (objc_msgSend(v4, "isEqual:", CFSTR("date"))
           && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0))
    {
      v7 = (void *)MEMORY[0x24BDBCE60];
      objc_msgSend(v5, "doubleValue");
      objc_msgSend(v7, "dateWithTimeIntervalSince1970:");
      v6 = objc_claimAutoreleasedReturnValue();
    }
    else
    {
      objc_msgSend(v1, "if_compactMap:", &__block_literal_global_14);
      v6 = objc_claimAutoreleasedReturnValue();
    }
    v3 = (void *)v6;

  }
  else
  {
    v3 = 0;
  }
LABEL_16:

  return v3;
}

_DWORD *cdf_timestamp_to_timespec(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  int v4;
  int v5;
  int v6;
  int v7;
  unsigned int v8;
  int v9;
  uint64_t v11;
  int v12;
  int v13;
  int v14;
  unsigned int v15;
  unint64_t v16;
  unsigned int v17;
  _BOOL4 v19;
  int v20;
  BOOL v21;
  _BOOL4 v22;
  int v23;
  BOOL v24;
  int v25;
  uint64_t v26;
  int v27;
  BOOL v28;
  _BOOL4 v29;
  _DWORD *result;
  tm v31;

  a1[1] = 100 * (a2 % 10000000);
  v31.tm_sec = (int)(a2 / 10000000) % 60;
  v31.tm_min = (int)(a2 / 600000000) % 60;
  v31.tm_hour = (int)a2 / 1640261632 % 24;
  v3 = a2 / 864000000000;
  v4 = (int)a2 / 2026291200;
  v5 = (int)a2 / 2026291200 + 1601;
  if ((int)a2 / 2026291200 < 1)
  {
    v7 = 0;
  }
  else
  {
    v6 = 0;
    v7 = 0;
    v8 = 1601;
    do
    {
      if ((((_BYTE)v6 + 65) & 3) != 0)
      {
        v9 = 365;
      }
      else if (400 * (v8 / 0x190) - 1601 != v6 && 100 * (v8 / 0x64) - 1601 == v6)
      {
        v9 = 365;
      }
      else
      {
        v9 = 366;
      }
      v7 += v9;
      ++v8;
      ++v6;
    }
    while (v4 != v6);
  }
  v11 = 0;
  v12 = v3 - v7 + 1;
  v13 = v5 & 3;
  v14 = -1030792151 * v5 + 85899344;
  HIDWORD(v16) = v14;
  LODWORD(v16) = v14;
  v15 = v16 >> 2;
  HIDWORD(v16) = v14;
  LODWORD(v16) = v14;
  v17 = v16 >> 4;
  v19 = v15 > 0x28F5C28 || v17 < 0xA3D70B;
  v20 = v12;
  do
  {
    if (v13)
      v21 = 0;
    else
      v21 = v11 == 1;
    v22 = v21 && v19;
    v23 = mdays[v11] + v22;
    v24 = __OFSUB__(v20, v23);
    v25 = v20 - v23;
    if (v25 < 0 != v24)
      break;
    ++v11;
    v20 = v25;
  }
  while (v11 != 12);
  v26 = 0;
  v31.tm_mday = v20;
  do
  {
    v27 = v12 - mdays[v26];
    if (v13)
      v28 = 0;
    else
      v28 = v26 == 1;
    v29 = v28 && v19;
    v12 = v27 - v29;
    if (v12 < 1)
      break;
    ++v26;
  }
  while (v26 != 12);
  memset(&v31.tm_yday, 0, 20);
  v31.tm_zone = (char *)&cdf_timestamp_to_timespec_UTC;
  v31.tm_mon = v26;
  *(_QWORD *)&v31.tm_year = (v4 - 299);
  result = (_DWORD *)mktime(&v31);
  *a1 = result;
  if (result == (_DWORD *)-1)
  {
    result = __error();
    *result = 22;
  }
  return result;
}

void sub_20BBF684C(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(v1 + 16))(v1);
  _Unwind_Resume(a1);
}

id getPHPhotoLibraryClass()
{
  void *v0;
  id v1;
  _QWORD v3[5];
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = 0;
  v5 = &v4;
  v6 = 0x2050000000;
  v0 = (void *)getPHPhotoLibraryClass_softClass_6279;
  v7 = getPHPhotoLibraryClass_softClass_6279;
  if (!getPHPhotoLibraryClass_softClass_6279)
  {
    v3[0] = MEMORY[0x24BDAC760];
    v3[1] = 3221225472;
    v3[2] = __getPHPhotoLibraryClass_block_invoke_6280;
    v3[3] = &unk_24C4E3118;
    v3[4] = &v4;
    __getPHPhotoLibraryClass_block_invoke_6280((uint64_t)v3);
    v0 = (void *)v5[3];
  }
  v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_20BBF6A70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class __getPHPhotoLibraryClass_block_invoke_6280(uint64_t a1)
{
  Class result;
  void *v3;
  void *v4;
  void *v5;

  if (!PhotosLibraryCore_frameworkLibrary_6281)
    PhotosLibraryCore_frameworkLibrary_6281 = _sl_dlopen();
  if (!PhotosLibraryCore_frameworkLibrary_6281)
  {
    objc_msgSend(MEMORY[0x24BDD1448], "currentHandler");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "void *PhotosLibrary(void)");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, CFSTR("WFSharedPhotoLibrary.m"), 17, CFSTR("%s"), 0);

    goto LABEL_8;
  }
  result = objc_getClass("PHPhotoLibrary");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    objc_msgSend(MEMORY[0x24BDD1448], "currentHandler");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "Class getPHPhotoLibraryClass(void)_block_invoke");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v5, CFSTR("WFSharedPhotoLibrary.m"), 18, CFSTR("Unable to find class %s"), "PHPhotoLibrary");

LABEL_8:
    __break(1u);
  }
  getPHPhotoLibraryClass_softClass_6279 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

id WFPasteboardRequiredAccessResources(void *a1)
{
  void *v1;
  id v2;
  void *v3;
  int v4;
  void *v5;
  const __CFString *v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  v7 = CFSTR("com.apple.mobileslideshow.asset.localidentifier");
  v1 = (void *)MEMORY[0x24BDBCE30];
  v2 = a1;
  objc_msgSend(v1, "arrayWithObjects:count:", &v7, 1);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = objc_msgSend(v2, "containsPasteboardTypes:", v3, v7, v8);

  if (v4)
  {
    objc_msgSend(MEMORY[0x24BDBCF20], "setWithObject:", CFSTR("WFPhotoAccessResource"));
    v5 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v5 = 0;
  }
  return v5;
}

void sub_20BBFC3FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  uint64_t v10;
  va_list va;

  va_start(va, a10);
  _Block_object_dispose((const void *)(v10 - 64), 8);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void getNSLinkAttributeName()
{
  id *v0;
  void *v1;
  id v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;

  v5 = 0;
  v6 = &v5;
  v7 = 0x2020000000;
  v0 = (id *)getNSLinkAttributeNameSymbolLoc_ptr;
  v8 = getNSLinkAttributeNameSymbolLoc_ptr;
  if (!getNSLinkAttributeNameSymbolLoc_ptr)
  {
    v1 = UIFoundationLibrary();
    v0 = (id *)dlsym(v1, "NSLinkAttributeName");
    v6[3] = (uint64_t)v0;
    getNSLinkAttributeNameSymbolLoc_ptr = (uint64_t)v0;
  }
  _Block_object_dispose(&v5, 8);
  if (v0)
  {
    v2 = *v0;
  }
  else
  {
    objc_msgSend(MEMORY[0x24BDD1448], "currentHandler");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "NSAttributedStringKey getNSLinkAttributeName(void)");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, CFSTR("WFRichTextContentItem.m"), 49, CFSTR("%s"), dlerror());

    __break(1u);
  }
}

void sub_20BBFC74C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void *UIFoundationLibrary()
{
  void *v0;
  void *v2;
  void *v3;

  if (!UIFoundationLibraryCore_frameworkLibrary_7476)
    UIFoundationLibraryCore_frameworkLibrary_7476 = _sl_dlopen();
  v0 = (void *)UIFoundationLibraryCore_frameworkLibrary_7476;
  if (!UIFoundationLibraryCore_frameworkLibrary_7476)
  {
    objc_msgSend(MEMORY[0x24BDD1448], "currentHandler");
    v0 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "void *UIFoundationLibrary(void)");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v2, CFSTR("WFRichTextContentItem.m"), 45, CFSTR("%s"), 0);

    __break(1u);
    free(v3);
  }
  return v0;
}

void getNSDocumentTypeDocumentAttribute()
{
  id *v0;
  void *v1;
  id v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;

  v5 = 0;
  v6 = &v5;
  v7 = 0x2020000000;
  v0 = (id *)getNSDocumentTypeDocumentAttributeSymbolLoc_ptr;
  v8 = getNSDocumentTypeDocumentAttributeSymbolLoc_ptr;
  if (!getNSDocumentTypeDocumentAttributeSymbolLoc_ptr)
  {
    v1 = UIFoundationLibrary();
    v0 = (id *)dlsym(v1, "NSDocumentTypeDocumentAttribute");
    v6[3] = (uint64_t)v0;
    getNSDocumentTypeDocumentAttributeSymbolLoc_ptr = (uint64_t)v0;
  }
  _Block_object_dispose(&v5, 8);
  if (v0)
  {
    v2 = *v0;
  }
  else
  {
    objc_msgSend(MEMORY[0x24BDD1448], "currentHandler");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "NSAttributedStringDocumentAttributeKey getNSDocumentTypeDocumentAttribute(void)");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, CFSTR("WFRichTextContentItem.m"), 48, CFSTR("%s"), dlerror());

    __break(1u);
  }
}

void sub_20BBFD004(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void getNSHTMLTextDocumentType()
{
  id *v0;
  void *v1;
  id v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;

  v5 = 0;
  v6 = &v5;
  v7 = 0x2020000000;
  v0 = (id *)getNSHTMLTextDocumentTypeSymbolLoc_ptr;
  v8 = getNSHTMLTextDocumentTypeSymbolLoc_ptr;
  if (!getNSHTMLTextDocumentTypeSymbolLoc_ptr)
  {
    v1 = UIFoundationLibrary();
    v0 = (id *)dlsym(v1, "NSHTMLTextDocumentType");
    v6[3] = (uint64_t)v0;
    getNSHTMLTextDocumentTypeSymbolLoc_ptr = (uint64_t)v0;
  }
  _Block_object_dispose(&v5, 8);
  if (v0)
  {
    v2 = *v0;
  }
  else
  {
    objc_msgSend(MEMORY[0x24BDD1448], "currentHandler");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "NSAttributedStringDocumentType getNSHTMLTextDocumentType(void)");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, CFSTR("WFRichTextContentItem.m"), 53, CFSTR("%s"), dlerror());

    __break(1u);
  }
}

void sub_20BBFD0FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id UISimpleTextPrintFormatterFunction_7490()
{
  return (id)classUISimpleTextPrintFormatter_7495;
}

Class initUISimpleTextPrintFormatter_7491()
{
  Class result;

  if (UIKitLibrary_sOnce_7492 != -1)
    dispatch_once(&UIKitLibrary_sOnce_7492, &__block_literal_global_7493);
  result = objc_getClass("UISimpleTextPrintFormatter");
  classUISimpleTextPrintFormatter_7495 = (uint64_t)result;
  getUISimpleTextPrintFormatterClass_7489 = (uint64_t (*)())UISimpleTextPrintFormatterFunction_7490;
  return result;
}

void sub_20BBFDB38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_20BBFDCF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_20BBFE638(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class __getWKWebViewConfigurationClass_block_invoke(uint64_t a1)
{
  Class result;
  void *v3;
  void *v4;
  void *v5;

  if (!WebKitLibraryCore_frameworkLibrary)
    WebKitLibraryCore_frameworkLibrary = _sl_dlopen();
  if (!WebKitLibraryCore_frameworkLibrary)
  {
    objc_msgSend(MEMORY[0x24BDD1448], "currentHandler");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "void *WebKitLibrary(void)");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, CFSTR("WFRichTextContentItem.m"), 34, CFSTR("%s"), 0);

    goto LABEL_8;
  }
  result = objc_getClass("WKWebViewConfiguration");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    objc_msgSend(MEMORY[0x24BDD1448], "currentHandler");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "Class getWKWebViewConfigurationClass(void)_block_invoke");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v5, CFSTR("WFRichTextContentItem.m"), 35, CFSTR("Unable to find class %s"), "WKWebViewConfiguration");

LABEL_8:
    __break(1u);
  }
  getWKWebViewConfigurationClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

void getNSPlainTextDocumentType()
{
  id *v0;
  void *v1;
  id v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;

  v5 = 0;
  v6 = &v5;
  v7 = 0x2020000000;
  v0 = (id *)getNSPlainTextDocumentTypeSymbolLoc_ptr;
  v8 = getNSPlainTextDocumentTypeSymbolLoc_ptr;
  if (!getNSPlainTextDocumentTypeSymbolLoc_ptr)
  {
    v1 = UIFoundationLibrary();
    v0 = (id *)dlsym(v1, "NSPlainTextDocumentType");
    v6[3] = (uint64_t)v0;
    getNSPlainTextDocumentTypeSymbolLoc_ptr = (uint64_t)v0;
  }
  _Block_object_dispose(&v5, 8);
  if (v0)
  {
    v2 = *v0;
  }
  else
  {
    objc_msgSend(MEMORY[0x24BDD1448], "currentHandler");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "NSAttributedStringDocumentType getNSPlainTextDocumentType(void)");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, CFSTR("WFRichTextContentItem.m"), 50, CFSTR("%s"), dlerror());

    __break(1u);
  }
}

void sub_20BBFE988(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t WFDateFormatterStyleFromStyle(void *a1, uint64_t *a2)
{
  id v3;
  uint64_t v4;
  uint64_t v5;

  v3 = a1;
  if ((objc_msgSend(v3, "isEqualToString:", CFSTR("None")) & 1) != 0)
  {
    v4 = 0;
  }
  else if ((objc_msgSend(v3, "isEqualToString:", CFSTR("Short")) & 1) != 0)
  {
    v4 = 1;
  }
  else if ((objc_msgSend(v3, "isEqualToString:", CFSTR("Medium")) & 1) != 0)
  {
    v4 = 2;
  }
  else
  {
    if (!objc_msgSend(v3, "isEqualToString:", CFSTR("Long")))
    {
      v5 = 0;
      goto LABEL_10;
    }
    v4 = 3;
  }
  *a2 = v4;
  v5 = 1;
LABEL_10:

  return v5;
}

const __CFString *WFDateFormattingGetDefaultCustomDateFormat()
{
  return CFSTR("EEE, dd MMM yyyy HH:mm:ss Z");
}

id WFDateFormattingGetLocalizedDefaultCustomDateFormat()
{
  return WFLocalizedString(CFSTR("EEE, dd MMM yyyy HH:mm:ss Z"));
}

void sub_20BBFF958(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_list va;

  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_20BBFFAB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_list va;

  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_20BBFFD7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_20BBFFFF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_20BC005DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_list va;

  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__139(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__140(uint64_t a1)
{

}

void *__Block_byref_object_copy__8024(uint64_t a1, uint64_t a2)
{
  void *result;

  result = _Block_copy(*(const void **)(a2 + 40));
  *(_QWORD *)(a1 + 40) = result;
  return result;
}

void __Block_byref_object_dispose__8025(uint64_t a1)
{

}

id WFConvertObjectToContentItem(void *a1, void *a2)
{
  id v3;
  id v4;
  uint64_t v5;
  void *v6;
  id v7;
  void *v8;
  void *v9;

  v3 = a1;
  v4 = a2;
  if (v3)
  {
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
    {
      objc_msgSend(v3, "contentItemByMergingAttributionSet:", v4);
      v5 = objc_claimAutoreleasedReturnValue();
LABEL_10:
      v6 = (void *)v5;
      goto LABEL_11;
    }
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
    {
      v7 = v3;
      objc_msgSend(v7, "wfType");
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      +[WFContentItem itemWithRepresentation:forType:attributionSet:cachingIdentifier:](WFContentItem, "itemWithRepresentation:forType:attributionSet:cachingIdentifier:", v7, v8, v4, 0);
      v6 = (void *)objc_claimAutoreleasedReturnValue();

    }
    else
    {
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) == 0)
      {
        +[WFContentItem itemWithObject:attributionSet:](WFContentItem, "itemWithObject:attributionSet:", v3, v4);
        v5 = objc_claimAutoreleasedReturnValue();
        goto LABEL_10;
      }
      objc_msgSend(v3, "localizedValue");
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      +[WFContentItem itemWithObject:attributionSet:](WFContentItem, "itemWithObject:attributionSet:", v9, v4);
      v6 = (void *)objc_claimAutoreleasedReturnValue();

    }
  }
  else
  {
    v6 = 0;
  }
LABEL_11:

  return v6;
}

void sub_20BC037F0(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 160), 8);
  _Unwind_Resume(a1);
}

void sub_20BC04094(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 160), 8);
  _Unwind_Resume(a1);
}

id getWFFileRepresentationLogObject()
{
  if (getWFFileRepresentationLogObject_onceToken != -1)
    dispatch_once(&getWFFileRepresentationLogObject_onceToken, &__block_literal_global_8194);
  return (id)getWFFileRepresentationLogObject_log;
}

void __getWFFileRepresentationLogObject_block_invoke()
{
  os_log_t v0;
  void *v1;

  v0 = os_log_create((const char *)*MEMORY[0x24BEC1968], "FileRepresentation");
  v1 = (void *)getWFFileRepresentationLogObject_log;
  getWFFileRepresentationLogObject_log = (uint64_t)v0;

}

uint64_t __Block_byref_object_copy__8213(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__8214(uint64_t a1)
{

}

void sub_20BC06884(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 112), 8);
  _Unwind_Resume(a1);
}

void WFFaultIfLoadingMagicKitInDaemon()
{
  void *v0;
  void *v1;
  char isKindOfClass;
  NSObject *v3;
  int v4;
  const char *v5;
  uint64_t v6;

  v6 = *MEMORY[0x24BDAC8D0];
  +[WFApplicationContext sharedContext](WFApplicationContext, "sharedContext");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "provider");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  objc_opt_class();
  isKindOfClass = objc_opt_isKindOfClass();

  if ((isKindOfClass & 1) != 0)
  {
    getWFContentGraphLogObject();
    v3 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_FAULT))
    {
      v4 = 136315138;
      v5 = "WFFaultIfLoadingMagicKitInDaemon";
      _os_log_impl(&dword_20BBAD000, v3, OS_LOG_TYPE_FAULT, "%s Creating a WFFileRepresentation without a type will load MagicKit (a ContentKit dependency), which in turn loads a 7MB database into memory. Please do not do this in low memory processes like our daemon, this will cause very severe memory regressions.", (uint8_t *)&v4, 0xCu);
    }

  }
}

uint64_t sread(int a1, char *a2, unint64_t a3)
{
  int v6;
  unint64_t i;
  int v8;
  size_t v9;
  ssize_t v10;
  timeval v12;
  fd_set v13;
  int v14;

  v14 = 0;
  if (!a1)
  {
LABEL_18:
    v9 = a3;
    while (1)
    {
      v10 = read(a1, a2, v9);
      if (v10 == -1)
      {
        if (*__error() != 4)
          return -1;
      }
      else
      {
        if (!v10)
        {
          a3 -= v9;
          return a3;
        }
        v9 -= v10;
        a2 += v10;
      }
      if (!v9)
        return a3;
    }
  }
  if (ioctl(a1, 0x4004667FuLL, &v14) != -1)
  {
    v6 = v14;
    if (v14)
    {
LABEL_15:
      if (v6 >= 1 && v6 < a3)
        a3 = v6;
      goto LABEL_18;
    }
  }
  for (i = 0; ; ++i)
  {
    v12 = (timeval)xmmword_20BC9B430;
    memset(&v13, 0, sizeof(v13));
    if (__darwin_check_fd_set_overflow(a1, &v13, 0))
      v13.fds_bits[(unint64_t)a1 >> 5] |= 1 << a1;
    v8 = select(a1 + 1, &v13, 0, 0, &v12);
    if (v8 != -1)
      break;
    if (*__error() != 4)
      __error();
  }
  if (v8 || i <= 4)
  {
    ioctl(a1, 0x4004667FuLL, &v14);
    v6 = v14;
    goto LABEL_15;
  }
  return 0;
}

uint64_t file_pipe2file()
{
  int v0;
  size_t v1;
  size_t v2;
  char *v3;
  char *v4;
  int v5;
  int v6;
  int v7;
  mode_t v8;
  int v9;
  int v10;
  int64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  int *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  char __buf[4096];
  uint64_t v29;

  v0 = MEMORY[0x24BDAC7A8]();
  v2 = v1;
  v4 = v3;
  v6 = v5;
  v7 = v0;
  v29 = *MEMORY[0x24BDAC8D0];
  __strlcpy_chk();
  v8 = umask(0);
  v9 = mkstemp(__buf);
  umask(v8);
  v10 = *__error();
  unlink(__buf);
  *__error() = v10;
  if (v9 == -1)
  {
    v12 = *__error();
    v18 = "cannot create temporary file for pipe copy";
    goto LABEL_10;
  }
  if (swrite(v9, v4, v2) != v2)
    goto LABEL_8;
  do
    v11 = sread(v6, __buf, 0x1000uLL);
  while (v11 >= 1 && swrite(v9, __buf, v11) == v11);
  if (v11)
  {
    if (v11 == -1)
    {
      v12 = *__error();
      v18 = "error copying from pipe to temp file";
LABEL_10:
      file_error(v7, v12, v18, v13, v14, v15, v16, v17, v27);
      return 0xFFFFFFFFLL;
    }
LABEL_8:
    v12 = *__error();
    v18 = "error while writing to temp file";
    goto LABEL_10;
  }
  v19 = dup2(v9, v6);
  if ((_DWORD)v19 == -1)
  {
    v21 = __error();
    file_error(v7, *v21, "could not dup descriptor for temp file", v22, v23, v24, v25, v26, v27);
    return v19;
  }
  close(v9);
  if (lseek(v19, 0, 0) == -1)
  {
    v12 = *__error();
    v18 = "error seeking";
    goto LABEL_10;
  }
  return v19;
}

size_t swrite(int __fd, char *__buf, size_t __nbyte)
{
  size_t v3;
  size_t v6;
  ssize_t v7;

  v3 = __nbyte;
  v6 = __nbyte;
  while (1)
  {
    v7 = write(__fd, __buf, v6);
    if (v7 == -1)
      break;
    v6 -= v7;
    __buf += v7;
LABEL_5:
    if (!v6)
      return v3;
  }
  if (*__error() == 4)
    goto LABEL_5;
  return -1;
}

void sub_20BC07478(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_20BC07908(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_20BC07E54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_list va;

  va_start(va, a10);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void *MapKitLibrary_8353()
{
  void *v0;
  void *v2;
  void *v3;

  if (!MapKitLibraryCore_frameworkLibrary_8380)
    MapKitLibraryCore_frameworkLibrary_8380 = _sl_dlopen();
  v0 = (void *)MapKitLibraryCore_frameworkLibrary_8380;
  if (!MapKitLibraryCore_frameworkLibrary_8380)
  {
    objc_msgSend(MEMORY[0x24BDD1448], "currentHandler");
    v0 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "void *MapKitLibrary(void)");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v2, CFSTR("DCMapsLink+MKDirections.m"), 19, CFSTR("%s"), 0);

    __break(1u);
    free(v3);
  }
  return v0;
}

void *__getCLLocationCoordinate2DIsValidSymbolLoc_block_invoke(_QWORD *a1)
{
  void *v2;
  void *result;
  void *v4;

  if (!CoreLocationLibraryCore_frameworkLibrary_8374)
    CoreLocationLibraryCore_frameworkLibrary_8374 = _sl_dlopen();
  v2 = (void *)CoreLocationLibraryCore_frameworkLibrary_8374;
  if (!CoreLocationLibraryCore_frameworkLibrary_8374)
  {
    objc_msgSend(MEMORY[0x24BDD1448], "currentHandler");
    a1 = (_QWORD *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "void *CoreLocationLibrary(void)");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(a1, "handleFailureInFunction:file:lineNumber:description:", v2, CFSTR("DCMapsLink+MKDirections.m"), 36, CFSTR("%s"), 0);

    __break(1u);
    free(v4);
  }
  result = dlsym(v2, "CLLocationCoordinate2DIsValid");
  *(_QWORD *)(*(_QWORD *)(a1[4] + 8) + 24) = result;
  getCLLocationCoordinate2DIsValidSymbolLoc_ptr_8359 = *(_UNKNOWN **)(*(_QWORD *)(a1[4] + 8) + 24);
  return result;
}

id getMKMapItemClass_8363()
{
  void *v0;
  id v1;
  _QWORD v3[5];
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = 0;
  v5 = &v4;
  v6 = 0x2050000000;
  v0 = (void *)getMKMapItemClass_softClass_8370;
  v7 = getMKMapItemClass_softClass_8370;
  if (!getMKMapItemClass_softClass_8370)
  {
    v3[0] = MEMORY[0x24BDAC760];
    v3[1] = 3221225472;
    v3[2] = __getMKMapItemClass_block_invoke_8371;
    v3[3] = &unk_24C4E3118;
    v3[4] = &v4;
    __getMKMapItemClass_block_invoke_8371((uint64_t)v3);
    v0 = (void *)v5[3];
  }
  v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_20BC082B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id getMKPlacemarkClass()
{
  void *v0;
  id v1;
  _QWORD v3[5];
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = 0;
  v5 = &v4;
  v6 = 0x2050000000;
  v0 = (void *)getMKPlacemarkClass_softClass_8364;
  v7 = getMKPlacemarkClass_softClass_8364;
  if (!getMKPlacemarkClass_softClass_8364)
  {
    v3[0] = MEMORY[0x24BDAC760];
    v3[1] = 3221225472;
    v3[2] = __getMKPlacemarkClass_block_invoke_8365;
    v3[3] = &unk_24C4E3118;
    v3[4] = &v4;
    __getMKPlacemarkClass_block_invoke_8365((uint64_t)v3);
    v0 = (void *)v5[3];
  }
  v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_20BC0836C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void __getMKPlacemarkClass_block_invoke_8365(uint64_t a1)
{
  void *v2;
  void *v3;

  MapKitLibrary_8353();
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = objc_getClass("MKPlacemark");
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    getMKPlacemarkClass_softClass_8364 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  }
  else
  {
    objc_msgSend(MEMORY[0x24BDD1448], "currentHandler");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "Class getMKPlacemarkClass(void)_block_invoke");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, CFSTR("DCMapsLink+MKDirections.m"), 23, CFSTR("Unable to find class %s"), "MKPlacemark");

    __break(1u);
  }
}

void __getMKMapItemClass_block_invoke_8371(uint64_t a1)
{
  void *v2;
  void *v3;

  MapKitLibrary_8353();
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = objc_getClass("MKMapItem");
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    getMKMapItemClass_softClass_8370 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  }
  else
  {
    objc_msgSend(MEMORY[0x24BDD1448], "currentHandler");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "Class getMKMapItemClass(void)_block_invoke");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, CFSTR("DCMapsLink+MKDirections.m"), 22, CFSTR("Unable to find class %s"), "MKMapItem");

    __break(1u);
  }
}

void __getMKDirectionsRequestClass_block_invoke(uint64_t a1)
{
  void *v2;
  void *v3;

  MapKitLibrary_8353();
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = objc_getClass("MKDirectionsRequest");
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    getMKDirectionsRequestClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  }
  else
  {
    objc_msgSend(MEMORY[0x24BDD1448], "currentHandler");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "Class getMKDirectionsRequestClass(void)_block_invoke");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, CFSTR("DCMapsLink+MKDirections.m"), 20, CFSTR("Unable to find class %s"), "MKDirectionsRequest");

    __break(1u);
  }
}

void __getMKDirectionsClass_block_invoke(uint64_t a1)
{
  void *v2;
  void *v3;

  MapKitLibrary_8353();
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = objc_getClass("MKDirections");
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    getMKDirectionsClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  }
  else
  {
    objc_msgSend(MEMORY[0x24BDD1448], "currentHandler");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "Class getMKDirectionsClass(void)_block_invoke");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, CFSTR("DCMapsLink+MKDirections.m"), 21, CFSTR("Unable to find class %s"), "MKDirections");

    __break(1u);
  }
}

uint64_t WFUIImageOrientationFromCGImagePropertyOrientation(int a1)
{
  if ((a1 - 2) > 6)
    return 0;
  else
    return qword_20BC9A430[a1 - 2];
}

uint64_t WFCGImagePropertyOrientationFromUIImageOrientation(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) > 6)
    return 1;
  else
    return dword_20BC9A468[a1 - 1];
}

void sub_20BC0A7E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a71;

  _Block_object_dispose(&a71, 8);
  _Unwind_Resume(a1);
}

id getEKReminderClass()
{
  void *v0;
  id v1;
  _QWORD v3[5];
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = 0;
  v5 = &v4;
  v6 = 0x2050000000;
  v0 = (void *)getEKReminderClass_softClass;
  v7 = getEKReminderClass_softClass;
  if (!getEKReminderClass_softClass)
  {
    v3[0] = MEMORY[0x24BDAC760];
    v3[1] = 3221225472;
    v3[2] = __getEKReminderClass_block_invoke;
    v3[3] = &unk_24C4E3118;
    v3[4] = &v4;
    __getEKReminderClass_block_invoke((uint64_t)v3);
    v0 = (void *)v5[3];
  }
  v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_20BC0AD28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void __getEKEventClass_block_invoke_8692(uint64_t a1)
{
  void *v2;
  void *v3;

  EventKitLibrary_8729();
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = objc_getClass("EKEvent");
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    getEKEventClass_softClass_8691 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  }
  else
  {
    objc_msgSend(MEMORY[0x24BDD1448], "currentHandler");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "Class getEKEventClass(void)_block_invoke");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, CFSTR("WFVCalendarFormatter.m"), 16, CFSTR("Unable to find class %s"), "EKEvent");

    __break(1u);
  }
}

void EventKitLibrary_8729()
{
  void *v0;
  void *v1;
  void *v2;

  if (!EventKitLibraryCore_frameworkLibrary_8737)
    EventKitLibraryCore_frameworkLibrary_8737 = _sl_dlopen();
  if (!EventKitLibraryCore_frameworkLibrary_8737)
  {
    objc_msgSend(MEMORY[0x24BDD1448], "currentHandler");
    v0 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "void *EventKitLibrary(void)");
    v1 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v1, CFSTR("WFVCalendarFormatter.m"), 14, CFSTR("%s"), 0);

    __break(1u);
    free(v2);
  }
}

void __getEKReminderClass_block_invoke(uint64_t a1)
{
  void *v2;
  void *v3;

  EventKitLibrary_8729();
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = objc_getClass("EKReminder");
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    getEKReminderClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  }
  else
  {
    objc_msgSend(MEMORY[0x24BDD1448], "currentHandler");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "Class getEKReminderClass(void)_block_invoke");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, CFSTR("WFVCalendarFormatter.m"), 15, CFSTR("Unable to find class %s"), "EKReminder");

    __break(1u);
  }
}

id getWFApplicationContextLogObject()
{
  if (getWFApplicationContextLogObject_onceToken != -1)
    dispatch_once(&getWFApplicationContextLogObject_onceToken, &__block_literal_global_8907);
  return (id)getWFApplicationContextLogObject_log;
}

void __getWFApplicationContextLogObject_block_invoke()
{
  os_log_t v0;
  void *v1;

  v0 = os_log_create((const char *)*MEMORY[0x24BEC1968], "ApplicationContext");
  v1 = (void *)getWFApplicationContextLogObject_log;
  getWFApplicationContextLogObject_log = (uint64_t)v0;

}

void sub_20BC0BB40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_20BC0BE18(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 96), 8);
  _Unwind_Resume(a1);
}

void sub_20BC0C03C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_20BC0C270(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_20BC0C884(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_20BC0DCF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,char a44)
{
  _Block_object_dispose(&a44, 8);
  _Unwind_Resume(a1);
}

id getAVAssetClass()
{
  void *v0;
  id v1;
  _QWORD v3[5];
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = 0;
  v5 = &v4;
  v6 = 0x2050000000;
  v0 = (void *)getAVAssetClass_softClass_9000;
  v7 = getAVAssetClass_softClass_9000;
  if (!getAVAssetClass_softClass_9000)
  {
    v3[0] = MEMORY[0x24BDAC760];
    v3[1] = 3221225472;
    v3[2] = __getAVAssetClass_block_invoke_9001;
    v3[3] = &unk_24C4E3118;
    v3[4] = &v4;
    __getAVAssetClass_block_invoke_9001((uint64_t)v3);
    v0 = (void *)v5[3];
  }
  v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_20BC0E534(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id getAVMutableMovieClass()
{
  void *v0;
  id v1;
  _QWORD v3[5];
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = 0;
  v5 = &v4;
  v6 = 0x2050000000;
  v0 = (void *)getAVMutableMovieClass_softClass;
  v7 = getAVMutableMovieClass_softClass;
  if (!getAVMutableMovieClass_softClass)
  {
    v3[0] = MEMORY[0x24BDAC760];
    v3[1] = 3221225472;
    v3[2] = __getAVMutableMovieClass_block_invoke;
    v3[3] = &unk_24C4E3118;
    v3[4] = &v4;
    __getAVMutableMovieClass_block_invoke((uint64_t)v3);
    v0 = (void *)v5[3];
  }
  v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_20BC0E5EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void __getAVMutableMovieClass_block_invoke(uint64_t a1)
{
  void *v2;
  void *v3;

  AVFoundationLibrary_8990();
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = objc_getClass("AVMutableMovie");
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    getAVMutableMovieClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  }
  else
  {
    objc_msgSend(MEMORY[0x24BDD1448], "currentHandler");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "Class getAVMutableMovieClass(void)_block_invoke");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, CFSTR("WFAVAssetContentItem.m"), 33, CFSTR("Unable to find class %s"), "AVMutableMovie");

    __break(1u);
  }
}

void *AVFoundationLibrary_8990()
{
  void *v0;
  void *v2;
  void *v3;

  if (!AVFoundationLibraryCore_frameworkLibrary_8995)
    AVFoundationLibraryCore_frameworkLibrary_8995 = _sl_dlopen();
  v0 = (void *)AVFoundationLibraryCore_frameworkLibrary_8995;
  if (!AVFoundationLibraryCore_frameworkLibrary_8995)
  {
    objc_msgSend(MEMORY[0x24BDD1448], "currentHandler");
    v0 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "void *AVFoundationLibrary(void)");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v2, CFSTR("WFAVAssetContentItem.m"), 26, CFSTR("%s"), 0);

    __break(1u);
    free(v3);
  }
  return v0;
}

void __getAVAssetClass_block_invoke_9001(uint64_t a1)
{
  void *v2;
  void *v3;

  AVFoundationLibrary_8990();
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = objc_getClass("AVAsset");
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    getAVAssetClass_softClass_9000 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  }
  else
  {
    objc_msgSend(MEMORY[0x24BDD1448], "currentHandler");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "Class getAVAssetClass(void)_block_invoke");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, CFSTR("WFAVAssetContentItem.m"), 27, CFSTR("Unable to find class %s"), "AVAsset");

    __break(1u);
  }
}

id getAVURLAssetClass_9009()
{
  void *v0;
  id v1;
  _QWORD v3[5];
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = 0;
  v5 = &v4;
  v6 = 0x2050000000;
  v0 = (void *)getAVURLAssetClass_softClass_9013;
  v7 = getAVURLAssetClass_softClass_9013;
  if (!getAVURLAssetClass_softClass_9013)
  {
    v3[0] = MEMORY[0x24BDAC760];
    v3[1] = 3221225472;
    v3[2] = __getAVURLAssetClass_block_invoke_9014;
    v3[3] = &unk_24C4E3118;
    v3[4] = &v4;
    __getAVURLAssetClass_block_invoke_9014((uint64_t)v3);
    v0 = (void *)v5[3];
  }
  v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_20BC0E930(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void __getAVURLAssetClass_block_invoke_9014(uint64_t a1)
{
  void *v2;
  void *v3;

  AVFoundationLibrary_8990();
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = objc_getClass("AVURLAsset");
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    getAVURLAssetClass_softClass_9013 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  }
  else
  {
    objc_msgSend(MEMORY[0x24BDD1448], "currentHandler");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "Class getAVURLAssetClass(void)_block_invoke");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, CFSTR("WFAVAssetContentItem.m"), 28, CFSTR("Unable to find class %s"), "AVURLAsset");

    __break(1u);
  }
}

void __getAVAssetExportSessionClass_block_invoke(uint64_t a1)
{
  void *v2;
  void *v3;

  AVFoundationLibrary_8990();
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = objc_getClass("AVAssetExportSession");
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    getAVAssetExportSessionClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  }
  else
  {
    objc_msgSend(MEMORY[0x24BDD1448], "currentHandler");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "Class getAVAssetExportSessionClass(void)_block_invoke");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, CFSTR("WFAVAssetContentItem.m"), 30, CFSTR("Unable to find class %s"), "AVAssetExportSession");

    __break(1u);
  }
}

id getAVMetadataItemClass()
{
  void *v0;
  id v1;
  _QWORD v3[5];
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = 0;
  v5 = &v4;
  v6 = 0x2050000000;
  v0 = (void *)getAVMetadataItemClass_softClass;
  v7 = getAVMetadataItemClass_softClass;
  if (!getAVMetadataItemClass_softClass)
  {
    v3[0] = MEMORY[0x24BDAC760];
    v3[1] = 3221225472;
    v3[2] = __getAVMetadataItemClass_block_invoke;
    v3[3] = &unk_24C4E3118;
    v3[4] = &v4;
    __getAVMetadataItemClass_block_invoke((uint64_t)v3);
    v0 = (void *)v5[3];
  }
  v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_20BC0EE6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void getAVMetadataKeySpaceCommon()
{
  id *v0;
  void *v1;
  id v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;

  v5 = 0;
  v6 = &v5;
  v7 = 0x2020000000;
  v0 = (id *)getAVMetadataKeySpaceCommonSymbolLoc_ptr;
  v8 = getAVMetadataKeySpaceCommonSymbolLoc_ptr;
  if (!getAVMetadataKeySpaceCommonSymbolLoc_ptr)
  {
    v1 = AVFoundationLibrary_8990();
    v0 = (id *)dlsym(v1, "AVMetadataKeySpaceCommon");
    v6[3] = (uint64_t)v0;
    getAVMetadataKeySpaceCommonSymbolLoc_ptr = (uint64_t)v0;
  }
  _Block_object_dispose(&v5, 8);
  if (v0)
  {
    v2 = *v0;
  }
  else
  {
    objc_msgSend(MEMORY[0x24BDD1448], "currentHandler");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "AVMetadataKeySpace getAVMetadataKeySpaceCommon(void)");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, CFSTR("WFAVAssetContentItem.m"), 37, CFSTR("%s"), dlerror());

    __break(1u);
  }
}

void sub_20BC0EF64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void __getAVMetadataItemClass_block_invoke(uint64_t a1)
{
  void *v2;
  void *v3;

  AVFoundationLibrary_8990();
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = objc_getClass("AVMetadataItem");
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    getAVMetadataItemClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  }
  else
  {
    objc_msgSend(MEMORY[0x24BDD1448], "currentHandler");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "Class getAVMetadataItemClass(void)_block_invoke");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, CFSTR("WFAVAssetContentItem.m"), 29, CFSTR("Unable to find class %s"), "AVMetadataItem");

    __break(1u);
  }
}

void *CoreMediaLibrary_9037()
{
  void *v0;
  void *v2;
  void *v3;

  if (!CoreMediaLibraryCore_frameworkLibrary_9043)
    CoreMediaLibraryCore_frameworkLibrary_9043 = _sl_dlopen();
  v0 = (void *)CoreMediaLibraryCore_frameworkLibrary_9043;
  if (!CoreMediaLibraryCore_frameworkLibrary_9043)
  {
    objc_msgSend(MEMORY[0x24BDD1448], "currentHandler");
    v0 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "void *CoreMediaLibrary(void)");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v2, CFSTR("WFAVAssetContentItem.m"), 21, CFSTR("%s"), 0);

    __break(1u);
    free(v3);
  }
  return v0;
}

void sub_20BC0F6C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_list va;

  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_20BC0FC9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_20BC10288(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class __getREMSaveRequestClass_block_invoke(uint64_t a1)
{
  Class result;
  void *v3;
  void *v4;
  void *v5;

  if (!ReminderKitLibraryCore_frameworkLibrary_9286)
    ReminderKitLibraryCore_frameworkLibrary_9286 = _sl_dlopen();
  if (!ReminderKitLibraryCore_frameworkLibrary_9286)
  {
    objc_msgSend(MEMORY[0x24BDD1448], "currentHandler");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "void *ReminderKitLibrary(void)");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, CFSTR("WFReminderContentItemChangeTransaction.m"), 17, CFSTR("%s"), 0);

    goto LABEL_8;
  }
  result = objc_getClass("REMSaveRequest");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    objc_msgSend(MEMORY[0x24BDD1448], "currentHandler");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "Class getREMSaveRequestClass(void)_block_invoke");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v5, CFSTR("WFReminderContentItemChangeTransaction.m"), 18, CFSTR("Unable to find class %s"), "REMSaveRequest");

LABEL_8:
    __break(1u);
  }
  getREMSaveRequestClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

void WFRegisterClassesFromClassVendingMethodsIfNeeded(void *a1, void *a2, os_unfair_lock_s *a3, unsigned __int8 *a4, void *a5, void *a6)
{
  id v11;
  id v12;
  id v13;
  int v14;
  _QWORD v15[4];
  id v16;
  id v17;
  void *v18;

  v11 = a2;
  v12 = a5;
  v13 = a6;
  os_unfair_lock_lock(a3);
  while (1)
  {
    v14 = __ldaxr(a4);
    if (v14 != 1)
      break;
    if (!__stlxr(0, a4))
    {
      v15[0] = MEMORY[0x24BDAC760];
      v15[1] = 3221225472;
      v15[2] = __WFRegisterClassesFromClassVendingMethodsIfNeeded_block_invoke;
      v15[3] = &unk_24C4DEC78;
      v16 = v12;
      v18 = a1;
      v17 = v13;
      objc_msgSend(a1, "wf_enumerateClassMethodsWithPrefix:usingBlock:", v11, v15);

      goto LABEL_6;
    }
  }
  __clrex();
LABEL_6:
  os_unfair_lock_unlock(a3);

}

void WFCallRegistrationMethodsIfNeeded(void *a1, void *a2, os_unfair_lock_s *a3, unsigned __int8 *a4, void *a5)
{
  id v9;
  id v10;
  int v11;
  _QWORD v12[4];
  id v13;
  void *v14;

  v9 = a2;
  v10 = a5;
  os_unfair_lock_lock(a3);
  while (1)
  {
    v11 = __ldaxr(a4);
    if (v11 != 1)
      break;
    if (!__stlxr(0, a4))
    {
      v12[0] = MEMORY[0x24BDAC760];
      v12[1] = 3221225472;
      v12[2] = __WFCallRegistrationMethodsIfNeeded_block_invoke;
      v12[3] = &unk_24C4DECA0;
      v13 = v10;
      v14 = a1;
      objc_msgSend(a1, "wf_enumerateClassMethodsWithPrefix:usingBlock:", v9, v12);

      goto LABEL_6;
    }
  }
  __clrex();
LABEL_6:
  os_unfair_lock_unlock(a3);

}

void sub_20BC119B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_20BC11AD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_20BC120DC(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 112), 8);
  _Unwind_Resume(a1);
}

void getMPMediaItemPropertyArtwork()
{
  id *v0;
  void *v1;
  id v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;

  v5 = 0;
  v6 = &v5;
  v7 = 0x2020000000;
  v0 = (id *)getMPMediaItemPropertyArtworkSymbolLoc_ptr;
  v8 = getMPMediaItemPropertyArtworkSymbolLoc_ptr;
  if (!getMPMediaItemPropertyArtworkSymbolLoc_ptr)
  {
    v1 = MediaPlayerLibrary();
    v0 = (id *)dlsym(v1, "MPMediaItemPropertyArtwork");
    v6[3] = (uint64_t)v0;
    getMPMediaItemPropertyArtworkSymbolLoc_ptr = (uint64_t)v0;
  }
  _Block_object_dispose(&v5, 8);
  if (v0)
  {
    v2 = *v0;
  }
  else
  {
    objc_msgSend(MEMORY[0x24BDD1448], "currentHandler");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "NSString *getMPMediaItemPropertyArtwork(void)");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, CFSTR("WFMPMediaContentItem.m"), 48, CFSTR("%s"), dlerror());

    __break(1u);
  }
}

void sub_20BC1274C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void getMPMediaItemPropertyAlbumTitle()
{
  id *v0;
  void *v1;
  id v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;

  v5 = 0;
  v6 = &v5;
  v7 = 0x2020000000;
  v0 = (id *)getMPMediaItemPropertyAlbumTitleSymbolLoc_ptr;
  v8 = getMPMediaItemPropertyAlbumTitleSymbolLoc_ptr;
  if (!getMPMediaItemPropertyAlbumTitleSymbolLoc_ptr)
  {
    v1 = MediaPlayerLibrary();
    v0 = (id *)dlsym(v1, "MPMediaItemPropertyAlbumTitle");
    v6[3] = (uint64_t)v0;
    getMPMediaItemPropertyAlbumTitleSymbolLoc_ptr = (uint64_t)v0;
  }
  _Block_object_dispose(&v5, 8);
  if (v0)
  {
    v2 = *v0;
  }
  else
  {
    objc_msgSend(MEMORY[0x24BDD1448], "currentHandler");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "NSString *getMPMediaItemPropertyAlbumTitle(void)");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, CFSTR("WFMPMediaContentItem.m"), 37, CFSTR("%s"), dlerror());

    __break(1u);
  }
}

void sub_20BC12844(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id getAVURLAssetClass_9527()
{
  void *v0;
  id v1;
  _QWORD v3[5];
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = 0;
  v5 = &v4;
  v6 = 0x2050000000;
  v0 = (void *)getAVURLAssetClass_softClass_9531;
  v7 = getAVURLAssetClass_softClass_9531;
  if (!getAVURLAssetClass_softClass_9531)
  {
    v3[0] = MEMORY[0x24BDAC760];
    v3[1] = 3221225472;
    v3[2] = __getAVURLAssetClass_block_invoke_9532;
    v3[3] = &unk_24C4E3118;
    v3[4] = &v4;
    __getAVURLAssetClass_block_invoke_9532((uint64_t)v3);
    v0 = (void *)v5[3];
  }
  v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_20BC128FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void __getAVURLAssetClass_block_invoke_9532(uint64_t a1)
{
  void *v2;
  void *v3;

  AVFoundationLibrary_9533();
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = objc_getClass("AVURLAsset");
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    getAVURLAssetClass_softClass_9531 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  }
  else
  {
    objc_msgSend(MEMORY[0x24BDD1448], "currentHandler");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "Class getAVURLAssetClass(void)_block_invoke");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, CFSTR("WFMPMediaContentItem.m"), 28, CFSTR("Unable to find class %s"), "AVURLAsset");

    __break(1u);
  }
}

void *AVFoundationLibrary_9533()
{
  void *v0;
  void *v2;
  void *v3;

  if (!AVFoundationLibraryCore_frameworkLibrary_9540)
    AVFoundationLibraryCore_frameworkLibrary_9540 = _sl_dlopen();
  v0 = (void *)AVFoundationLibraryCore_frameworkLibrary_9540;
  if (!AVFoundationLibraryCore_frameworkLibrary_9540)
  {
    objc_msgSend(MEMORY[0x24BDD1448], "currentHandler");
    v0 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "void *AVFoundationLibrary(void)");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v2, CFSTR("WFMPMediaContentItem.m"), 27, CFSTR("%s"), 0);

    __break(1u);
    free(v3);
  }
  return v0;
}

void *MediaPlayerLibrary()
{
  void *v0;
  void *v2;
  void *v3;

  if (!MediaPlayerLibraryCore_frameworkLibrary_9554)
    MediaPlayerLibraryCore_frameworkLibrary_9554 = _sl_dlopen();
  v0 = (void *)MediaPlayerLibraryCore_frameworkLibrary_9554;
  if (!MediaPlayerLibraryCore_frameworkLibrary_9554)
  {
    objc_msgSend(MEMORY[0x24BDD1448], "currentHandler");
    v0 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "void *MediaPlayerLibrary(void)");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v2, CFSTR("WFMPMediaContentItem.m"), 32, CFSTR("%s"), 0);

    __break(1u);
    free(v3);
  }
  return v0;
}

void __getAVAssetExportSessionClass_block_invoke_9561(uint64_t a1)
{
  void *v2;
  void *v3;

  AVFoundationLibrary_9533();
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = objc_getClass("AVAssetExportSession");
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    getAVAssetExportSessionClass_softClass_9560 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  }
  else
  {
    objc_msgSend(MEMORY[0x24BDD1448], "currentHandler");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "Class getAVAssetExportSessionClass(void)_block_invoke");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, CFSTR("WFMPMediaContentItem.m"), 29, CFSTR("Unable to find class %s"), "AVAssetExportSession");

    __break(1u);
  }
}

void *CoreMediaLibrary_9565()
{
  void *v0;
  void *v2;
  void *v3;

  if (!CoreMediaLibraryCore_frameworkLibrary_9571)
    CoreMediaLibraryCore_frameworkLibrary_9571 = _sl_dlopen();
  v0 = (void *)CoreMediaLibraryCore_frameworkLibrary_9571;
  if (!CoreMediaLibraryCore_frameworkLibrary_9571)
  {
    objc_msgSend(MEMORY[0x24BDD1448], "currentHandler");
    v0 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "void *CoreMediaLibrary(void)");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v2, CFSTR("WFMPMediaContentItem.m"), 23, CFSTR("%s"), 0);

    __break(1u);
    free(v3);
  }
  return v0;
}

void __getMPMediaItemClass_block_invoke_9583(uint64_t a1)
{
  void *v2;
  void *v3;

  MediaPlayerLibrary();
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = objc_getClass("MPMediaItem");
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    getMPMediaItemClass_softClass_9582 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  }
  else
  {
    objc_msgSend(MEMORY[0x24BDD1448], "currentHandler");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "Class getMPMediaItemClass(void)_block_invoke");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, CFSTR("WFMPMediaContentItem.m"), 33, CFSTR("Unable to find class %s"), "MPMediaItem");

    __break(1u);
  }
}

void sub_20BC14E64(_Unwind_Exception *a1)
{
  _Block_object_dispose(&STACK[0x4D0], 8);
  _Unwind_Resume(a1);
}

void getMPMediaItemPropertyDiscNumber()
{
  id *v0;
  void *v1;
  id v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;

  v5 = 0;
  v6 = &v5;
  v7 = 0x2020000000;
  v0 = (id *)getMPMediaItemPropertyDiscNumberSymbolLoc_ptr;
  v8 = getMPMediaItemPropertyDiscNumberSymbolLoc_ptr;
  if (!getMPMediaItemPropertyDiscNumberSymbolLoc_ptr)
  {
    v1 = MediaPlayerLibrary();
    v0 = (id *)dlsym(v1, "MPMediaItemPropertyDiscNumber");
    v6[3] = (uint64_t)v0;
    getMPMediaItemPropertyDiscNumberSymbolLoc_ptr = (uint64_t)v0;
  }
  _Block_object_dispose(&v5, 8);
  if (v0)
  {
    v2 = *v0;
  }
  else
  {
    objc_msgSend(MEMORY[0x24BDD1448], "currentHandler");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "NSString *getMPMediaItemPropertyDiscNumber(void)");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, CFSTR("WFMPMediaContentItem.m"), 47, CFSTR("%s"), dlerror());

    __break(1u);
  }
}

void sub_20BC154A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void getMPMediaItemPropertyAlbumTrackNumber()
{
  id *v0;
  void *v1;
  id v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;

  v5 = 0;
  v6 = &v5;
  v7 = 0x2020000000;
  v0 = (id *)getMPMediaItemPropertyAlbumTrackNumberSymbolLoc_ptr;
  v8 = getMPMediaItemPropertyAlbumTrackNumberSymbolLoc_ptr;
  if (!getMPMediaItemPropertyAlbumTrackNumberSymbolLoc_ptr)
  {
    v1 = MediaPlayerLibrary();
    v0 = (id *)dlsym(v1, "MPMediaItemPropertyAlbumTrackNumber");
    v6[3] = (uint64_t)v0;
    getMPMediaItemPropertyAlbumTrackNumberSymbolLoc_ptr = (uint64_t)v0;
  }
  _Block_object_dispose(&v5, 8);
  if (v0)
  {
    v2 = *v0;
  }
  else
  {
    objc_msgSend(MEMORY[0x24BDD1448], "currentHandler");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "NSString *getMPMediaItemPropertyAlbumTrackNumber(void)");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, CFSTR("WFMPMediaContentItem.m"), 46, CFSTR("%s"), dlerror());

    __break(1u);
  }
}

void sub_20BC155A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void WFInsertSortDescriptorAroundDescriptorMatchingUserInfo(void *a1, void *a2, int a3, unsigned int a4, void *a5)
{
  id v9;
  id v10;
  void *v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  void *v16;
  uint64_t v17;
  void *v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t (*v22)(uint64_t, void *);
  void *v23;
  id v24;

  v19 = a1;
  v9 = a2;
  v10 = a5;
  objc_msgSend(v19, "sortDescriptors");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  v20 = MEMORY[0x24BDAC760];
  v21 = 3221225472;
  v22 = __WFInsertSortDescriptorAroundDescriptorMatchingUserInfo_block_invoke;
  v23 = &unk_24C4DEF40;
  v12 = v10;
  v24 = v12;
  v13 = objc_msgSend(v11, "indexOfObjectPassingTest:", &v20);
  if (v13 != 0x7FFFFFFFFFFFFFFFLL)
  {
    v14 = v13;
    objc_msgSend(v11, "objectAtIndex:", v13);
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    v16 = (void *)objc_msgSend(v11, "mutableCopy");
    if (a3)
      v17 = objc_msgSend(v15, "ascending");
    else
      v17 = 1;
    +[WFContentSortDescriptor sortDescriptorWithProperty:ascending:comparator:](WFContentSortDescriptor, "sortDescriptorWithProperty:ascending:comparator:", v9, v17, 0, v19, v20, v21, v22, v23);
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v16, "insertObject:atIndex:", v18, v14 + a4);
    objc_msgSend(v19, "setSortDescriptors:", v16);

  }
}

void sub_20BC158C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void __getMPMediaQueryClass_block_invoke(uint64_t a1)
{
  void *v2;
  void *v3;

  MediaPlayerLibrary();
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = objc_getClass("MPMediaQuery");
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    getMPMediaQueryClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  }
  else
  {
    objc_msgSend(MEMORY[0x24BDD1448], "currentHandler");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "Class getMPMediaQueryClass(void)_block_invoke");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, CFSTR("WFMPMediaContentItem.m"), 34, CFSTR("Unable to find class %s"), "MPMediaQuery");

    __break(1u);
  }
}

void sub_20BC16A38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class __getBKSProcessAssertionClass_block_invoke(uint64_t a1)
{
  Class result;
  void *v3;
  void *v4;
  void *v5;

  if (!AssertionServicesLibraryCore_frameworkLibrary)
    AssertionServicesLibraryCore_frameworkLibrary = _sl_dlopen();
  if (!AssertionServicesLibraryCore_frameworkLibrary)
  {
    objc_msgSend(MEMORY[0x24BDD1448], "currentHandler");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "void *AssertionServicesLibrary(void)");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, CFSTR("WFBKSBackgroundAssertion.m"), 14, CFSTR("%s"), 0);

    goto LABEL_8;
  }
  result = objc_getClass("BKSProcessAssertion");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    objc_msgSend(MEMORY[0x24BDD1448], "currentHandler");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "Class getBKSProcessAssertionClass(void)_block_invoke");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v5, CFSTR("WFBKSBackgroundAssertion.m"), 16, CFSTR("Unable to find class %s"), "BKSProcessAssertion");

LABEL_8:
    __break(1u);
  }
  getBKSProcessAssertionClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

Class __getRBSProcessHandleClass_block_invoke(uint64_t a1)
{
  Class result;
  void *v3;
  void *v4;
  void *v5;

  if (!RunningBoardServicesLibraryCore_frameworkLibrary)
    RunningBoardServicesLibraryCore_frameworkLibrary = _sl_dlopen();
  if (!RunningBoardServicesLibraryCore_frameworkLibrary)
  {
    objc_msgSend(MEMORY[0x24BDD1448], "currentHandler");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "void *RunningBoardServicesLibrary(void)");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, CFSTR("WFBKSBackgroundAssertion.m"), 15, CFSTR("%s"), 0);

    goto LABEL_8;
  }
  result = objc_getClass("RBSProcessHandle");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    objc_msgSend(MEMORY[0x24BDD1448], "currentHandler");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "Class getRBSProcessHandleClass(void)_block_invoke");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v5, CFSTR("WFBKSBackgroundAssertion.m"), 17, CFSTR("Unable to find class %s"), "RBSProcessHandle");

LABEL_8:
    __break(1u);
  }
  getRBSProcessHandleClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

void sub_20BC18968(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  _Block_object_dispose(&a35, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__10085(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__10086(uint64_t a1)
{

}

id getWFBackgroundAssertionLogObject()
{
  if (getWFBackgroundAssertionLogObject_onceToken != -1)
    dispatch_once(&getWFBackgroundAssertionLogObject_onceToken, &__block_literal_global_10125);
  return (id)getWFBackgroundAssertionLogObject_log;
}

void __getWFBackgroundAssertionLogObject_block_invoke()
{
  os_log_t v0;
  void *v1;

  v0 = os_log_create((const char *)*MEMORY[0x24BEC1968], "BackgroundAssertion");
  v1 = (void *)getWFBackgroundAssertionLogObject_log;
  getWFBackgroundAssertionLogObject_log = (uint64_t)v0;

}

void sub_20BC19A94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__10244(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__10245(uint64_t a1)
{

}

id getWFPhotoLibraryFilteringLogObject()
{
  if (getWFPhotoLibraryFilteringLogObject_onceToken != -1)
    dispatch_once(&getWFPhotoLibraryFilteringLogObject_onceToken, &__block_literal_global_10266);
  return (id)getWFPhotoLibraryFilteringLogObject_log;
}

id getPHAssetClass_10253()
{
  void *v0;
  id v1;
  _QWORD v3[5];
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = 0;
  v5 = &v4;
  v6 = 0x2050000000;
  v0 = (void *)getPHAssetClass_softClass_10254;
  v7 = getPHAssetClass_softClass_10254;
  if (!getPHAssetClass_softClass_10254)
  {
    v3[0] = MEMORY[0x24BDAC760];
    v3[1] = 3221225472;
    v3[2] = __getPHAssetClass_block_invoke_10255;
    v3[3] = &unk_24C4E3118;
    v3[4] = &v4;
    __getPHAssetClass_block_invoke_10255((uint64_t)v3);
    v0 = (void *)v5[3];
  }
  v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_20BC19F24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void __getPHAssetClass_block_invoke_10255(uint64_t a1)
{
  void *v2;
  void *v3;

  PhotosLibrary_10256();
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = objc_getClass("PHAsset");
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    getPHAssetClass_softClass_10254 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  }
  else
  {
    objc_msgSend(MEMORY[0x24BDD1448], "currentHandler");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "Class getPHAssetClass(void)_block_invoke");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, CFSTR("WFPhotoLibraryFiltering.m"), 23, CFSTR("Unable to find class %s"), "PHAsset");

    __break(1u);
  }
}

void PhotosLibrary_10256()
{
  void *v0;
  void *v1;
  void *v2;

  if (!PhotosLibraryCore_frameworkLibrary_10262)
    PhotosLibraryCore_frameworkLibrary_10262 = _sl_dlopen();
  if (!PhotosLibraryCore_frameworkLibrary_10262)
  {
    objc_msgSend(MEMORY[0x24BDD1448], "currentHandler");
    v0 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "void *PhotosLibrary(void)");
    v1 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v1, CFSTR("WFPhotoLibraryFiltering.m"), 21, CFSTR("%s"), 0);

    __break(1u);
    free(v2);
  }
}

void __getWFPhotoLibraryFilteringLogObject_block_invoke()
{
  os_log_t v0;
  void *v1;

  v0 = os_log_create((const char *)*MEMORY[0x24BEC1968], "PhotoLibraryFiltering");
  v1 = (void *)getWFPhotoLibraryFilteringLogObject_log;
  getWFPhotoLibraryFilteringLogObject_log = (uint64_t)v0;

}

id WFPHAssetPredicateFromContentPredicate(void *a1, _QWORD *a2)
{
  id v3;
  id v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t i;
  void *v10;
  void *v11;
  id v12;
  id v13;
  void *v14;
  uint64_t v15;
  void *v16;
  void *v17;
  int v18;
  id v19;
  void *v20;
  void *v21;
  int v22;
  void *v23;
  void *v24;
  id v25;
  void *v26;
  id v27;
  void *v28;
  NSObject *v29;
  id v30;
  id v31;
  void *v32;
  id v33;
  void *v34;
  id v35;
  void *v36;
  void *v37;
  int v38;
  void *v39;
  void *v40;
  void *v41;
  void *v42;
  void *v43;
  void *v44;
  void *v45;
  void *v46;
  void *v47;
  void *v48;
  int v49;
  void *v50;
  void *v51;
  void *v52;
  void *v53;
  void *v54;
  void *v55;
  id v56;
  void *v57;
  void *v58;
  void *v59;
  uint64_t v60;
  void *v61;
  void *v62;
  int v63;
  uint64_t v64;
  void *v65;
  void *v66;
  void *v67;
  int v68;
  id v69;
  void *v70;
  void *v71;
  void *v72;
  void *v73;
  void *v74;
  void *v75;
  void *v76;
  void *v77;
  void *v78;
  void *v79;
  void *v81;
  void *v82;
  _BYTE buf[24];
  void *v84;
  __int128 *v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  _QWORD v90[3];
  id v91[5];

  v91[3] = *(id *)MEMORY[0x24BDAC8D0];
  v3 = a1;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) == 0)
    {
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) != 0)
      {
        v19 = objc_alloc(MEMORY[0x24BDD14C0]);
        v11 = (void *)objc_msgSend(v19, "initWithType:subpredicates:", 1, MEMORY[0x24BDBD1A8]);
      }
      else
      {
        v11 = 0;
      }
      goto LABEL_71;
    }
    v12 = v3;
    objc_msgSend(v12, "value");
    v13 = (id)objc_claimAutoreleasedReturnValue();
    if (!v13)
    {
      v11 = 0;
LABEL_70:

      goto LABEL_71;
    }
    objc_msgSend(v12, "property");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    v15 = objc_msgSend(v12, "comparisonType");
    objc_msgSend(v14, "name");
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    WFLocalizedContentPropertyNameMarkerWithContext(CFSTR("Album"), (uint64_t)CFSTR("Image Content Item"));
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    v18 = objc_msgSend(v16, "isEqualToString:", v17);

    if (v18)
    {
      if ((unint64_t)(v15 - 6) < 0xFFFFFFFFFFFFFFFELL)
      {
        v11 = 0;
LABEL_69:

        goto LABEL_70;
      }
      +[WFPhotoMediaContentItem photoAlbums](WFPhotoMediaContentItem, "photoAlbums");
      v32 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v32, "objectMatchingKey:value:", CFSTR("wfName"), v13);
      v25 = (id)objc_claimAutoreleasedReturnValue();

      if (v25)
      {
        v33 = -[WFPHAssetCollectionPredicate initForAssetsInCollection:]([WFPHAssetCollectionPredicate alloc], "initForAssetsInCollection:", v25);
        v34 = v33;
        if (v15 == 5)
        {
          objc_msgSend(MEMORY[0x24BDD14C0], "notPredicateWithSubpredicate:", v33);
          v35 = (id)objc_claimAutoreleasedReturnValue();
        }
        else
        {
          v35 = v33;
        }
        v11 = v35;

        goto LABEL_68;
      }
      WFLocalizedString(CFSTR("Photo Album Not Found"));
      v57 = (void *)objc_claimAutoreleasedReturnValue();
      WFLocalizedString(CFSTR("The “Find Photos” action couldn’t find the album “%@”."));
      v58 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x24BDD17C8], "localizedStringWithFormat:", v58, v13);
      v59 = (void *)objc_claimAutoreleasedReturnValue();
      v60 = *MEMORY[0x24BDD0FC8];
      *(_QWORD *)&v86 = *MEMORY[0x24BDD0FD8];
      *((_QWORD *)&v86 + 1) = v60;
      *(_QWORD *)buf = v57;
      *(_QWORD *)&buf[8] = v59;
      objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", buf, &v86, 2);
      v61 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x24BDD1540], "errorWithDomain:code:userInfo:", CFSTR("WFPhotoLibraryFilteringErrorDomain"), 0, v61);
      *a2 = (id)objc_claimAutoreleasedReturnValue();

      v25 = 0;
      goto LABEL_67;
    }
    objc_msgSend(v14, "name");
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    WFLocalizedContentPropertyNameMarker(CFSTR("Is a Screenshot"));
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    v22 = objc_msgSend(v20, "isEqualToString:", v21);

    if (v22)
    {
      +[WFSharedPhotoLibrary sharedLibrary](WFSharedPhotoLibrary, "sharedLibrary");
      v23 = (void *)objc_claimAutoreleasedReturnValue();
      v91[0] = 0;
      objc_msgSend(v23, "fetchOptionsWithError:", v91);
      v24 = (void *)objc_claimAutoreleasedReturnValue();
      v25 = v91[0];

      if (v24)
      {
        objc_msgSend(v24, "setWantsIncrementalChangeDetails:", 0);
        *(_QWORD *)&v86 = 0;
        *((_QWORD *)&v86 + 1) = &v86;
        *(_QWORD *)&v87 = 0x2050000000;
        v26 = (void *)getPHAssetCollectionClass_softClass_10306;
        *((_QWORD *)&v87 + 1) = getPHAssetCollectionClass_softClass_10306;
        if (!getPHAssetCollectionClass_softClass_10306)
        {
          *(_QWORD *)buf = MEMORY[0x24BDAC760];
          *(_QWORD *)&buf[8] = 3221225472;
          *(_QWORD *)&buf[16] = __getPHAssetCollectionClass_block_invoke_10307;
          v84 = &unk_24C4E3118;
          v85 = &v86;
          __getPHAssetCollectionClass_block_invoke_10307((uint64_t)buf);
          v26 = *(void **)(*((_QWORD *)&v86 + 1) + 24);
        }
        v27 = objc_retainAutorelease(v26);
        _Block_object_dispose(&v86, 8);
        objc_msgSend(v27, "fetchAssetCollectionsWithType:subtype:options:", 2, 211, v24);
        v28 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v28, "firstObject");
        v29 = objc_claimAutoreleasedReturnValue();

        if (v29)
        {
          v30 = -[WFPHAssetCollectionPredicate initForAssetsInCollection:]([WFPHAssetCollectionPredicate alloc], "initForAssetsInCollection:", v29);
          if (v15 == 5)
          {
            if ((objc_msgSend(v13, "BOOLValue") & 1) != 0)
            {
LABEL_30:
              objc_msgSend(MEMORY[0x24BDD14C0], "notPredicateWithSubpredicate:", v30);
              v31 = (id)objc_claimAutoreleasedReturnValue();
LABEL_54:
              v11 = v31;
LABEL_56:

              goto LABEL_57;
            }
          }
          else
          {
            if (v15 != 4)
            {
              v11 = 0;
              goto LABEL_56;
            }
            if ((objc_msgSend(v13, "BOOLValue") & 1) == 0)
              goto LABEL_30;
          }
          v31 = v30;
          goto LABEL_54;
        }
      }
      else
      {
        getWFGeneralLogObject();
        v29 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315394;
          *(_QWORD *)&buf[4] = "WFPHAssetPredicateFromContentComparisonPredicate";
          *(_WORD *)&buf[12] = 2112;
          *(_QWORD *)&buf[14] = v25;
          _os_log_impl(&dword_20BBAD000, v29, OS_LOG_TYPE_ERROR, "%s Unable to get fetch options for photo library: %@", buf, 0x16u);
        }
      }
      v11 = 0;
LABEL_57:

      goto LABEL_68;
    }
    objc_msgSend(v14, "name");
    v36 = (void *)objc_claimAutoreleasedReturnValue();
    WFLocalizedContentPropertyNameMarker(CFSTR("Photo Type"));
    v37 = (void *)objc_claimAutoreleasedReturnValue();
    v38 = objc_msgSend(v36, "isEqualToString:", v37);

    if (v38)
    {
      WFLocalizedContentPropertyPossibleValueMarker(CFSTR("HDR"));
      v39 = (void *)objc_claimAutoreleasedReturnValue();
      v90[0] = v39;
      v91[0] = &unk_24C50F470;
      WFLocalizedContentPropertyPossibleValueMarker(CFSTR("Panorama"));
      v40 = (void *)objc_claimAutoreleasedReturnValue();
      v90[1] = v40;
      v91[1] = &unk_24C50F488;
      WFLocalizedContentPropertyPossibleValueMarker(CFSTR("Live Photo"));
      v41 = (void *)objc_claimAutoreleasedReturnValue();
      v90[2] = v41;
      v91[2] = &unk_24C50F4A0;
      objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", v91, v90, 3);
      v25 = (id)objc_claimAutoreleasedReturnValue();

      objc_msgSend(v25, "objectForKey:", v13);
      v82 = (void *)objc_claimAutoreleasedReturnValue();
      if (v82)
      {
        objc_msgSend(MEMORY[0x24BDD1548], "expressionForKeyPath:", CFSTR("mediaSubtype"));
        v81 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(MEMORY[0x24BDD1548], "expressionForConstantValue:", v82);
        v42 = (void *)objc_claimAutoreleasedReturnValue();
        v43 = (void *)MEMORY[0x24BDD14B8];
        v44 = (void *)MEMORY[0x24BDD1548];
        *(_QWORD *)buf = v81;
        *(_QWORD *)&buf[8] = v42;
        objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:count:", buf, 2);
        v45 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v44, "expressionForFunction:arguments:", CFSTR("bitwiseAnd:with:"), v45);
        v46 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v43, "predicateWithLeftExpression:rightExpression:modifier:type:options:", v46, v42, 0, v15, 0);
        v11 = (void *)objc_claimAutoreleasedReturnValue();

LABEL_51:
LABEL_68:

        goto LABEL_69;
      }
      WFLocalizedContentPropertyPossibleValueMarker(CFSTR("Burst"));
      v62 = (void *)objc_claimAutoreleasedReturnValue();
      v63 = objc_msgSend(v13, "isEqual:", v62);

      if (v63)
      {
        if (v15 == 4)
          v64 = 5;
        else
          v64 = 4;
        v65 = (void *)MEMORY[0x24BDD14B8];
        objc_msgSend(MEMORY[0x24BDD1548], "expressionForKeyPath:", CFSTR("burstIdentifier"));
        v81 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(MEMORY[0x24BDD1548], "expressionForConstantValue:", 0);
        v42 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v65, "predicateWithLeftExpression:rightExpression:modifier:type:options:", v81, v42, 0, v64, 0);
        v11 = (void *)objc_claimAutoreleasedReturnValue();
        goto LABEL_51;
      }

    }
    else
    {
      objc_msgSend(v14, "name");
      v47 = (void *)objc_claimAutoreleasedReturnValue();
      WFLocalizedContentPropertyNameMarker(CFSTR("Is a Screen Recording"));
      v48 = (void *)objc_claimAutoreleasedReturnValue();
      v49 = objc_msgSend(v47, "isEqualToString:", v48);

      if (v49)
      {
        objc_msgSend(MEMORY[0x24BDD1548], "expressionForKeyPath:", CFSTR("mediaSubtype"));
        v25 = (id)objc_claimAutoreleasedReturnValue();
        objc_msgSend(MEMORY[0x24BDD1548], "expressionForConstantValue:", &unk_24C50F4B8);
        v50 = (void *)objc_claimAutoreleasedReturnValue();
        v51 = (void *)MEMORY[0x24BDD14B8];
        v52 = (void *)MEMORY[0x24BDD1548];
        *(_QWORD *)buf = v25;
        *(_QWORD *)&buf[8] = v50;
        objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:count:", buf, 2);
        v53 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v52, "expressionForFunction:arguments:", CFSTR("bitwiseAnd:with:"), v53);
        v54 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v51, "predicateWithLeftExpression:rightExpression:modifier:type:options:", v54, v50, 0, v15, 0);
        v55 = (void *)objc_claimAutoreleasedReturnValue();

        if (objc_msgSend(v13, "BOOLValue"))
        {
          v56 = v55;
        }
        else
        {
          objc_msgSend(MEMORY[0x24BDD14C0], "notPredicateWithSubpredicate:", v55);
          v56 = (id)objc_claimAutoreleasedReturnValue();
        }
        v11 = v56;

        goto LABEL_68;
      }
    }
    WFPHAssetKeyPathForContentProperty(v14);
    v25 = (id)objc_claimAutoreleasedReturnValue();
    if (v25)
    {
      objc_msgSend(v14, "name");
      v66 = (void *)objc_claimAutoreleasedReturnValue();
      WFLocalizedContentPropertyNameMarker(CFSTR("Media Type"));
      v67 = (void *)objc_claimAutoreleasedReturnValue();
      v68 = objc_msgSend(v66, "isEqualToString:", v67);

      if (v68)
      {
        v69 = v13;
        WFLocalizedContentPropertyPossibleValueMarker(CFSTR("Image"));
        v70 = (void *)objc_claimAutoreleasedReturnValue();
        *(_QWORD *)&v86 = v70;
        *(_QWORD *)buf = &unk_24C50F4E8;
        WFLocalizedContentPropertyPossibleValueMarker(CFSTR("Video"));
        v71 = (void *)objc_claimAutoreleasedReturnValue();
        *((_QWORD *)&v86 + 1) = v71;
        *(_QWORD *)&buf[8] = &unk_24C50F500;
        WFLocalizedContentPropertyPossibleValueMarker(CFSTR("Audio"));
        v72 = (void *)objc_claimAutoreleasedReturnValue();
        *(_QWORD *)&v87 = v72;
        *(_QWORD *)&buf[16] = &unk_24C50F518;
        objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", buf, &v86, 3);
        v73 = (void *)objc_claimAutoreleasedReturnValue();

        objc_msgSend(v73, "objectForKey:", v69);
        v74 = (void *)objc_claimAutoreleasedReturnValue();

        v75 = &unk_24C50F4D0;
        if (v74)
          v75 = v74;
        v13 = v75;

      }
      v76 = (void *)MEMORY[0x24BDD14B8];
      objc_msgSend(MEMORY[0x24BDD1548], "expressionForKeyPath:", v25);
      v77 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x24BDD1548], "expressionForConstantValue:", v13);
      v78 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v12, "property");
      v79 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v76, "predicateWithLeftExpression:rightExpression:modifier:type:options:", v77, v78, 0, v15, objc_msgSend(v79, "caseInsensitive"));
      v11 = (void *)objc_claimAutoreleasedReturnValue();

      goto LABEL_68;
    }
LABEL_67:
    v11 = 0;
    goto LABEL_68;
  }
  v4 = v3;
  v5 = (void *)objc_opt_new();
  v86 = 0u;
  v87 = 0u;
  v88 = 0u;
  v89 = 0u;
  objc_msgSend(v4, "subpredicates");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v86, buf, 16);
  if (v7)
  {
    v8 = *(_QWORD *)v87;
    while (2)
    {
      for (i = 0; i != v7; ++i)
      {
        if (*(_QWORD *)v87 != v8)
          objc_enumerationMutation(v6);
        WFPHAssetPredicateFromContentPredicate(*(_QWORD *)(*((_QWORD *)&v86 + 1) + 8 * i), a2);
        v10 = (void *)objc_claimAutoreleasedReturnValue();
        if (!v10)
        {

          v11 = 0;
          goto LABEL_17;
        }
        objc_msgSend(v5, "addObject:", v10);

      }
      v7 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v86, buf, 16);
      if (v7)
        continue;
      break;
    }
  }

  v11 = (void *)objc_msgSend(objc_alloc(MEMORY[0x24BDD14C0]), "initWithType:subpredicates:", objc_msgSend(v4, "compoundPredicateType"), v5);
LABEL_17:

LABEL_71:
  return v11;
}

void sub_20BC1B744(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  _Block_object_dispose(&a29, 8);
  _Unwind_Resume(a1);
}

id WFPHAssetKeyPathForContentProperty(void *a1)
{
  id v1;
  void *v2;
  __CFString *v3;
  __CFString *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  id v11;
  void *v12;
  void *v13;
  const __CFString *v15;
  const __CFString *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  const __CFString *v21;
  const __CFString *v22;
  const __CFString *v23;
  const __CFString *v24;
  const __CFString *v25;
  const __CFString *v26;
  uint64_t v27;

  v27 = *MEMORY[0x24BDAC8D0];
  v1 = a1;
  objc_msgSend(v1, "name");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  WFLocalizedContentPropertyNameMarker(CFSTR("Width"));
  v3 = (__CFString *)objc_claimAutoreleasedReturnValue();
  v15 = v3;
  v21 = CFSTR("pixelWidth");
  WFLocalizedContentPropertyNameMarker(CFSTR("Height"));
  v4 = (__CFString *)objc_claimAutoreleasedReturnValue();
  v16 = v4;
  v22 = CFSTR("pixelHeight");
  WFLocalizedContentPropertyNameMarker(CFSTR("Date Taken"));
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v17 = v5;
  v23 = CFSTR("creationDate");
  WFLocalizedContentPropertyNameMarker(CFSTR("Time Taken"));
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v18 = v6;
  v24 = CFSTR("creationDate");
  WFLocalizedContentPropertyNameMarker(CFSTR("Is Favorite"));
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v19 = v7;
  v25 = CFSTR("isFavorite");
  WFLocalizedContentPropertyNameMarker(CFSTR("Media Type"));
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v20 = v8;
  v26 = CFSTR("mediaType");
  objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", &v21, &v15, 6);
  v9 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v9, "objectForKey:", v2);
  v10 = (void *)objc_claimAutoreleasedReturnValue();

  if (v10)
  {
    v11 = v10;
  }
  else
  {
    v15 = CFSTR("WFFileModificationDate");
    v16 = CFSTR("WFFileCreationDate");
    v21 = CFSTR("modificationDate");
    v22 = CFSTR("creationDate");
    objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", &v21, &v15, 2);
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v1, "userInfo");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v12, "objectForKey:", v13);
    v11 = (id)objc_claimAutoreleasedReturnValue();

  }
  return v11;
}

void __getPHAssetCollectionClass_block_invoke_10307(uint64_t a1)
{
  void *v2;
  void *v3;

  PhotosLibrary_10256();
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = objc_getClass("PHAssetCollection");
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    getPHAssetCollectionClass_softClass_10306 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  }
  else
  {
    objc_msgSend(MEMORY[0x24BDD1448], "currentHandler");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "Class getPHAssetCollectionClass(void)_block_invoke");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, CFSTR("WFPhotoLibraryFiltering.m"), 24, CFSTR("Unable to find class %s"), "PHAssetCollection");

    __break(1u);
  }
}

void sub_20BC1C514(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 64), 8);
  _Unwind_Resume(a1);
}

void sub_20BC1C8F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void __getCNSaveRequestClass_block_invoke(uint64_t a1)
{
  void *v2;
  void *v3;

  ContactsLibrary_10368();
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = objc_getClass("CNSaveRequest");
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    getCNSaveRequestClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  }
  else
  {
    objc_msgSend(MEMORY[0x24BDD1448], "currentHandler");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "Class  _Nonnull getCNSaveRequestClass(void)_block_invoke");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, CFSTR("WFCNContact.m"), 37, CFSTR("Unable to find class %s"), "CNSaveRequest");

    __break(1u);
  }
}

void *ContactsLibrary_10368()
{
  void *v0;
  void *v2;
  void *v3;

  if (!ContactsLibraryCore_frameworkLibrary_10376)
    ContactsLibraryCore_frameworkLibrary_10376 = _sl_dlopen();
  v0 = (void *)ContactsLibraryCore_frameworkLibrary_10376;
  if (!ContactsLibraryCore_frameworkLibrary_10376)
  {
    objc_msgSend(MEMORY[0x24BDD1448], "currentHandler");
    v0 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "void * _Nonnull ContactsLibrary(void)");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v2, CFSTR("WFCNContact.m"), 31, CFSTR("%s"), 0);

    __break(1u);
    free(v3);
  }
  return v0;
}

void sub_20BC1D2CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_20BC1D708(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_20BC1E044(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_20BC1F424(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id getCNContactStoreClass()
{
  void *v0;
  id v1;
  _QWORD v3[5];
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = 0;
  v5 = &v4;
  v6 = 0x2050000000;
  v0 = (void *)getCNContactStoreClass_softClass;
  v7 = getCNContactStoreClass_softClass;
  if (!getCNContactStoreClass_softClass)
  {
    v3[0] = MEMORY[0x24BDAC760];
    v3[1] = 3221225472;
    v3[2] = __getCNContactStoreClass_block_invoke;
    v3[3] = &unk_24C4E3118;
    v3[4] = &v4;
    __getCNContactStoreClass_block_invoke((uint64_t)v3);
    v0 = (void *)v5[3];
  }
  v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_20BC1F994(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void __getCNContainerClass_block_invoke(uint64_t a1)
{
  void *v2;
  void *v3;

  ContactsLibrary_10368();
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = objc_getClass("CNContainer");
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    getCNContainerClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  }
  else
  {
    objc_msgSend(MEMORY[0x24BDD1448], "currentHandler");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "Class  _Nonnull getCNContainerClass(void)_block_invoke");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, CFSTR("WFCNContact.m"), 40, CFSTR("Unable to find class %s"), "CNContainer");

    __break(1u);
  }
}

void __getCNAccountClass_block_invoke(uint64_t a1)
{
  void *v2;
  void *v3;

  ContactsLibrary_10368();
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = objc_getClass("CNAccount");
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    getCNAccountClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  }
  else
  {
    objc_msgSend(MEMORY[0x24BDD1448], "currentHandler");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "Class  _Nonnull getCNAccountClass(void)_block_invoke");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, CFSTR("WFCNContact.m"), 39, CFSTR("Unable to find class %s"), "CNAccount");

    __break(1u);
  }
}

void __getCNContactStoreClass_block_invoke(uint64_t a1)
{
  void *v2;
  void *v3;

  ContactsLibrary_10368();
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = objc_getClass("CNContactStore");
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    getCNContactStoreClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  }
  else
  {
    objc_msgSend(MEMORY[0x24BDD1448], "currentHandler");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "Class  _Nonnull getCNContactStoreClass(void)_block_invoke");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, CFSTR("WFCNContact.m"), 34, CFSTR("Unable to find class %s"), "CNContactStore");

    __break(1u);
  }
}

id getCNLabeledValueClass()
{
  void *v0;
  id v1;
  _QWORD v3[5];
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = 0;
  v5 = &v4;
  v6 = 0x2050000000;
  v0 = (void *)getCNLabeledValueClass_softClass_10468;
  v7 = getCNLabeledValueClass_softClass_10468;
  if (!getCNLabeledValueClass_softClass_10468)
  {
    v3[0] = MEMORY[0x24BDAC760];
    v3[1] = 3221225472;
    v3[2] = __getCNLabeledValueClass_block_invoke_10469;
    v3[3] = &unk_24C4E3118;
    v3[4] = &v4;
    __getCNLabeledValueClass_block_invoke_10469((uint64_t)v3);
    v0 = (void *)v5[3];
  }
  v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_20BC1FC98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void __getCNLabeledValueClass_block_invoke_10469(uint64_t a1)
{
  void *v2;
  void *v3;

  ContactsLibrary_10368();
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = objc_getClass("CNLabeledValue");
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    getCNLabeledValueClass_softClass_10468 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  }
  else
  {
    objc_msgSend(MEMORY[0x24BDD1448], "currentHandler");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "Class  _Nonnull getCNLabeledValueClass(void)_block_invoke");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, CFSTR("WFCNContact.m"), 38, CFSTR("Unable to find class %s"), "CNLabeledValue");

    __break(1u);
  }
}

id getCNContactClass()
{
  void *v0;
  id v1;
  _QWORD v3[5];
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = 0;
  v5 = &v4;
  v6 = 0x2050000000;
  v0 = (void *)getCNContactClass_softClass;
  v7 = getCNContactClass_softClass;
  if (!getCNContactClass_softClass)
  {
    v3[0] = MEMORY[0x24BDAC760];
    v3[1] = 3221225472;
    v3[2] = __getCNContactClass_block_invoke;
    v3[3] = &unk_24C4E3118;
    v3[4] = &v4;
    __getCNContactClass_block_invoke((uint64_t)v3);
    v0 = (void *)v5[3];
  }
  v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_20BC1FF14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void __getCNContactClass_block_invoke(uint64_t a1)
{
  void *v2;
  void *v3;

  ContactsLibrary_10368();
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = objc_getClass("CNContact");
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    getCNContactClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  }
  else
  {
    objc_msgSend(MEMORY[0x24BDD1448], "currentHandler");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "Class  _Nonnull getCNContactClass(void)_block_invoke");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, CFSTR("WFCNContact.m"), 35, CFSTR("Unable to find class %s"), "CNContact");

    __break(1u);
  }
}

id getCNContactFormatterClass()
{
  void *v0;
  id v1;
  _QWORD v3[5];
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = 0;
  v5 = &v4;
  v6 = 0x2050000000;
  v0 = (void *)getCNContactFormatterClass_softClass;
  v7 = getCNContactFormatterClass_softClass;
  if (!getCNContactFormatterClass_softClass)
  {
    v3[0] = MEMORY[0x24BDAC760];
    v3[1] = 3221225472;
    v3[2] = __getCNContactFormatterClass_block_invoke;
    v3[3] = &unk_24C4E3118;
    v3[4] = &v4;
    __getCNContactFormatterClass_block_invoke((uint64_t)v3);
    v0 = (void *)v5[3];
  }
  v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_20BC20090(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void getCNContactEmailAddressesKey()
{
  id *v0;
  void *v1;
  id v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;

  v5 = 0;
  v6 = &v5;
  v7 = 0x2020000000;
  v0 = (id *)getCNContactEmailAddressesKeySymbolLoc_ptr_10490;
  v8 = getCNContactEmailAddressesKeySymbolLoc_ptr_10490;
  if (!getCNContactEmailAddressesKeySymbolLoc_ptr_10490)
  {
    v1 = ContactsLibrary_10368();
    v0 = (id *)dlsym(v1, "CNContactEmailAddressesKey");
    v6[3] = (uint64_t)v0;
    getCNContactEmailAddressesKeySymbolLoc_ptr_10490 = (uint64_t)v0;
  }
  _Block_object_dispose(&v5, 8);
  if (v0)
  {
    v2 = *v0;
  }
  else
  {
    objc_msgSend(MEMORY[0x24BDD1448], "currentHandler");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "NSString * _Nonnull getCNContactEmailAddressesKey(void)");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, CFSTR("WFCNContact.m"), 51, CFSTR("%s"), dlerror());

    __break(1u);
  }
}

void sub_20BC20188(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void getCNContactPhoneNumbersKey()
{
  id *v0;
  void *v1;
  id v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;

  v5 = 0;
  v6 = &v5;
  v7 = 0x2020000000;
  v0 = (id *)getCNContactPhoneNumbersKeySymbolLoc_ptr_10487;
  v8 = getCNContactPhoneNumbersKeySymbolLoc_ptr_10487;
  if (!getCNContactPhoneNumbersKeySymbolLoc_ptr_10487)
  {
    v1 = ContactsLibrary_10368();
    v0 = (id *)dlsym(v1, "CNContactPhoneNumbersKey");
    v6[3] = (uint64_t)v0;
    getCNContactPhoneNumbersKeySymbolLoc_ptr_10487 = (uint64_t)v0;
  }
  _Block_object_dispose(&v5, 8);
  if (v0)
  {
    v2 = *v0;
  }
  else
  {
    objc_msgSend(MEMORY[0x24BDD1448], "currentHandler");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "NSString * _Nonnull getCNContactPhoneNumbersKey(void)");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, CFSTR("WFCNContact.m"), 50, CFSTR("%s"), dlerror());

    __break(1u);
  }
}

void sub_20BC20280(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void __getCNContactFormatterClass_block_invoke(uint64_t a1)
{
  void *v2;
  void *v3;

  ContactsLibrary_10368();
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = objc_getClass("CNContactFormatter");
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    getCNContactFormatterClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  }
  else
  {
    objc_msgSend(MEMORY[0x24BDD1448], "currentHandler");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "Class  _Nonnull getCNContactFormatterClass(void)_block_invoke");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, CFSTR("WFCNContact.m"), 33, CFSTR("Unable to find class %s"), "CNContactFormatter");

    __break(1u);
  }
}

id getCNContactVCardSerializationClass()
{
  void *v0;
  id v1;
  _QWORD v3[5];
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = 0;
  v5 = &v4;
  v6 = 0x2050000000;
  v0 = (void *)getCNContactVCardSerializationClass_softClass;
  v7 = getCNContactVCardSerializationClass_softClass;
  if (!getCNContactVCardSerializationClass_softClass)
  {
    v3[0] = MEMORY[0x24BDAC760];
    v3[1] = 3221225472;
    v3[2] = __getCNContactVCardSerializationClass_block_invoke;
    v3[3] = &unk_24C4E3118;
    v3[4] = &v4;
    __getCNContactVCardSerializationClass_block_invoke((uint64_t)v3);
    v0 = (void *)v5[3];
  }
  v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_20BC203FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t WFCNContactAuthorizationStatus()
{
  void *v0;
  int v1;
  void *v2;
  int v3;
  void *v4;
  uint64_t v5;

  objc_msgSend(MEMORY[0x24BEC1440], "currentDevice");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  v1 = objc_msgSend(v0, "isChineseRegionCelluarDevice");

  if (!v1)
    return 3;
  if (!VCIsInternalBuild())
    return objc_msgSend(getCNContactStoreClass(), "authorizationStatusForEntityType:", 0);
  WFCNContactSystemShortcutsUserDefaults();
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(v2, "BOOLForKey:", *MEMORY[0x24BEC18D0]);

  if (!v3)
    return objc_msgSend(getCNContactStoreClass(), "authorizationStatusForEntityType:", 0);
  WFCNContactSystemShortcutsUserDefaults();
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = objc_msgSend(v4, "integerForKey:", *MEMORY[0x24BEC18C8]);

  return v5;
}

Class __getCNVCardWritingOptionsClass_block_invoke(uint64_t a1)
{
  Class result;
  void *v3;
  void *v4;
  void *v5;

  if (!vCardLibraryCore_frameworkLibrary)
    vCardLibraryCore_frameworkLibrary = _sl_dlopen();
  if (!vCardLibraryCore_frameworkLibrary)
  {
    objc_msgSend(MEMORY[0x24BDD1448], "currentHandler");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "void * _Nonnull vCardLibrary(void)");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, CFSTR("WFCNContact.m"), 55, CFSTR("%s"), 0);

    goto LABEL_8;
  }
  result = objc_getClass("CNVCardWritingOptions");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    objc_msgSend(MEMORY[0x24BDD1448], "currentHandler");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "Class  _Nonnull getCNVCardWritingOptionsClass(void)_block_invoke");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v5, CFSTR("WFCNContact.m"), 56, CFSTR("Unable to find class %s"), "CNVCardWritingOptions");

LABEL_8:
    __break(1u);
  }
  getCNVCardWritingOptionsClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

id WFCNContactSystemShortcutsUserDefaults()
{
  if (WFCNContactSystemShortcutsUserDefaults_onceToken != -1)
    dispatch_once(&WFCNContactSystemShortcutsUserDefaults_onceToken, &__block_literal_global_10500);
  return (id)WFCNContactSystemShortcutsUserDefaults_systemShortcutsUserDefaults;
}

void __getCNContactVCardSerializationClass_block_invoke(uint64_t a1)
{
  void *v2;
  void *v3;

  ContactsLibrary_10368();
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = objc_getClass("CNContactVCardSerialization");
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    getCNContactVCardSerializationClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  }
  else
  {
    objc_msgSend(MEMORY[0x24BDD1448], "currentHandler");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "Class  _Nonnull getCNContactVCardSerializationClass(void)_block_invoke");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, CFSTR("WFCNContact.m"), 32, CFSTR("Unable to find class %s"), "CNContactVCardSerialization");

    __break(1u);
  }
}

uint64_t __Block_byref_object_copy__10503(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__10504(uint64_t a1)
{

}

id getCNContactFetchRequestClass()
{
  void *v0;
  id v1;
  _QWORD v3[5];
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = 0;
  v5 = &v4;
  v6 = 0x2050000000;
  v0 = (void *)getCNContactFetchRequestClass_softClass;
  v7 = getCNContactFetchRequestClass_softClass;
  if (!getCNContactFetchRequestClass_softClass)
  {
    v3[0] = MEMORY[0x24BDAC760];
    v3[1] = 3221225472;
    v3[2] = __getCNContactFetchRequestClass_block_invoke;
    v3[3] = &unk_24C4E3118;
    v3[4] = &v4;
    __getCNContactFetchRequestClass_block_invoke((uint64_t)v3);
    v0 = (void *)v5[3];
  }
  v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_20BC208FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void __getCNContactFetchRequestClass_block_invoke(uint64_t a1)
{
  void *v2;
  void *v3;

  ContactsLibrary_10368();
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = objc_getClass("CNContactFetchRequest");
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    getCNContactFetchRequestClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  }
  else
  {
    objc_msgSend(MEMORY[0x24BDD1448], "currentHandler");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "Class  _Nonnull getCNContactFetchRequestClass(void)_block_invoke");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, CFSTR("WFCNContact.m"), 36, CFSTR("Unable to find class %s"), "CNContactFetchRequest");

    __break(1u);
  }
}

void sub_20BC20F44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void getCNContactStoreDidChangeNotification()
{
  id *v0;
  void *v1;
  id v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;

  v5 = 0;
  v6 = &v5;
  v7 = 0x2020000000;
  v0 = (id *)getCNContactStoreDidChangeNotificationSymbolLoc_ptr;
  v8 = getCNContactStoreDidChangeNotificationSymbolLoc_ptr;
  if (!getCNContactStoreDidChangeNotificationSymbolLoc_ptr)
  {
    v1 = ContactsLibrary_10368();
    v0 = (id *)dlsym(v1, "CNContactStoreDidChangeNotification");
    v6[3] = (uint64_t)v0;
    getCNContactStoreDidChangeNotificationSymbolLoc_ptr = (uint64_t)v0;
  }
  _Block_object_dispose(&v5, 8);
  if (v0)
  {
    v2 = *v0;
  }
  else
  {
    objc_msgSend(MEMORY[0x24BDD1448], "currentHandler");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "NSNotificationName  _Nonnull getCNContactStoreDidChangeNotification(void)");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, CFSTR("WFCNContact.m"), 53, CFSTR("%s"), dlerror());

    __break(1u);
  }
}

void sub_20BC21590(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void __getCNPhoneNumberClass_block_invoke(uint64_t a1)
{
  void *v2;
  void *v3;

  ContactsLibrary_10368();
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = objc_getClass("CNPhoneNumber");
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    getCNPhoneNumberClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  }
  else
  {
    objc_msgSend(MEMORY[0x24BDD1448], "currentHandler");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "Class  _Nonnull getCNPhoneNumberClass(void)_block_invoke");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, CFSTR("WFCNContact.m"), 41, CFSTR("Unable to find class %s"), "CNPhoneNumber");

    __break(1u);
  }
}

BOOL WFCNContactIsAuthorizedToAccessContact()
{
  return WFCNContactAuthorizationStatus() == 3;
}

void INPersonHandleLabelForContactLabel(void *a1)
{
  id v1;
  void *v2;
  int v3;
  id *v4;
  void *v5;
  int v6;
  void *v7;
  _QWORD *v8;
  void *v9;
  int v10;
  id v11;
  void *v12;
  id v13;
  void *v14;
  int v15;
  void *v16;
  char v17;
  void *v18;
  int v19;
  void *v20;
  int v21;
  void *v22;
  int v23;
  void *v24;
  int v25;
  void *v26;
  void *v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;

  v1 = a1;
  getCNLabelHome();
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(v1, "isEqualToString:", v2);

  if (v3)
  {
    v4 = (id *)MEMORY[0x24BDD99B0];
    goto LABEL_12;
  }
  getCNLabelWork();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = objc_msgSend(v1, "isEqualToString:", v5);

  if (v6)
  {
    v4 = (id *)MEMORY[0x24BDD99E8];
    goto LABEL_12;
  }
  getCNLabelOther();
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v1, "isEqualToString:", v7))
  {

    goto LABEL_11;
  }
  v28 = 0;
  v29 = &v28;
  v30 = 0x2020000000;
  v8 = (_QWORD *)getCNLabelPhoneNumberOtherFaxSymbolLoc_ptr_10596;
  v31 = getCNLabelPhoneNumberOtherFaxSymbolLoc_ptr_10596;
  if (!getCNLabelPhoneNumberOtherFaxSymbolLoc_ptr_10596)
  {
    v9 = ContactsLibrary_10597();
    v8 = dlsym(v9, "CNLabelPhoneNumberOtherFax");
    v29[3] = (uint64_t)v8;
    getCNLabelPhoneNumberOtherFaxSymbolLoc_ptr_10596 = (uint64_t)v8;
  }
  _Block_object_dispose(&v28, 8);
  if (v8)
  {
    v10 = objc_msgSend(v1, "isEqualToString:", *v8);

    if (!v10)
    {
      getCNLabelPhoneNumberiPhone();
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      v15 = objc_msgSend(v1, "isEqualToString:", v14);

      if (v15)
      {
        v4 = (id *)MEMORY[0x24BDD99F8];
        goto LABEL_12;
      }
      getCNLabelPhoneNumberMobile();
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      if ((objc_msgSend(v1, "isEqualToString:", v16) & 1) != 0)
      {

      }
      else
      {
        v17 = objc_msgSend(v1, "localizedCaseInsensitiveContainsString:", CFSTR("mobile"));

        if ((v17 & 1) == 0)
        {
          getCNLabelPhoneNumberMain();
          v18 = (void *)objc_claimAutoreleasedReturnValue();
          v19 = objc_msgSend(v1, "isEqualToString:", v18);

          if (v19)
          {
            v4 = (id *)MEMORY[0x24BDD99C0];
          }
          else
          {
            getCNLabelPhoneNumberHomeFax();
            v20 = (void *)objc_claimAutoreleasedReturnValue();
            v21 = objc_msgSend(v1, "isEqualToString:", v20);

            if (v21)
            {
              v4 = (id *)MEMORY[0x24BDD99B8];
            }
            else
            {
              getCNLabelPhoneNumberWorkFax();
              v22 = (void *)objc_claimAutoreleasedReturnValue();
              v23 = objc_msgSend(v1, "isEqualToString:", v22);

              if (v23)
              {
                v4 = (id *)MEMORY[0x24BDD99F0];
              }
              else
              {
                getCNLabelPhoneNumberPager();
                v24 = (void *)objc_claimAutoreleasedReturnValue();
                v25 = objc_msgSend(v1, "isEqualToString:", v24);

                if (!v25)
                {
                  +[WFContactLabeledValue localizedStringForLabel:](WFContactLabeledValue, "localizedStringForLabel:", v1);
                  v11 = (id)objc_claimAutoreleasedReturnValue();
                  goto LABEL_13;
                }
                v4 = (id *)MEMORY[0x24BDD99D8];
              }
            }
          }
LABEL_12:
          v11 = *v4;
LABEL_13:
          v12 = v11;

          v13 = v12;
          return;
        }
      }
      v4 = (id *)MEMORY[0x24BDD99C8];
      goto LABEL_12;
    }
LABEL_11:
    v4 = (id *)MEMORY[0x24BDD99D0];
    goto LABEL_12;
  }
  objc_msgSend(MEMORY[0x24BDD1448], "currentHandler");
  v26 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "NSString *getCNLabelPhoneNumberOtherFax(void)");
  v27 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v26, "handleFailureInFunction:file:lineNumber:description:", v27, CFSTR("WFContact+INPerson.m"), 24, CFSTR("%s"), dlerror());

  __break(1u);
}

void sub_20BC22670(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void getCNLabelHome()
{
  id *v0;
  void *v1;
  id v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;

  v5 = 0;
  v6 = &v5;
  v7 = 0x2020000000;
  v0 = (id *)getCNLabelHomeSymbolLoc_ptr_10634;
  v8 = getCNLabelHomeSymbolLoc_ptr_10634;
  if (!getCNLabelHomeSymbolLoc_ptr_10634)
  {
    v1 = ContactsLibrary_10597();
    v0 = (id *)dlsym(v1, "CNLabelHome");
    v6[3] = (uint64_t)v0;
    getCNLabelHomeSymbolLoc_ptr_10634 = (uint64_t)v0;
  }
  _Block_object_dispose(&v5, 8);
  if (v0)
  {
    v2 = *v0;
  }
  else
  {
    objc_msgSend(MEMORY[0x24BDD1448], "currentHandler");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "NSString *getCNLabelHome(void)");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, CFSTR("WFContact+INPerson.m"), 21, CFSTR("%s"), dlerror());

    __break(1u);
  }
}

void sub_20BC22768(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void getCNLabelWork()
{
  id *v0;
  void *v1;
  id v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;

  v5 = 0;
  v6 = &v5;
  v7 = 0x2020000000;
  v0 = (id *)getCNLabelWorkSymbolLoc_ptr_10631;
  v8 = getCNLabelWorkSymbolLoc_ptr_10631;
  if (!getCNLabelWorkSymbolLoc_ptr_10631)
  {
    v1 = ContactsLibrary_10597();
    v0 = (id *)dlsym(v1, "CNLabelWork");
    v6[3] = (uint64_t)v0;
    getCNLabelWorkSymbolLoc_ptr_10631 = (uint64_t)v0;
  }
  _Block_object_dispose(&v5, 8);
  if (v0)
  {
    v2 = *v0;
  }
  else
  {
    objc_msgSend(MEMORY[0x24BDD1448], "currentHandler");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "NSString *getCNLabelWork(void)");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, CFSTR("WFContact+INPerson.m"), 22, CFSTR("%s"), dlerror());

    __break(1u);
  }
}

void sub_20BC22860(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void getCNLabelOther()
{
  id *v0;
  void *v1;
  id v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;

  v5 = 0;
  v6 = &v5;
  v7 = 0x2020000000;
  v0 = (id *)getCNLabelOtherSymbolLoc_ptr_10628;
  v8 = getCNLabelOtherSymbolLoc_ptr_10628;
  if (!getCNLabelOtherSymbolLoc_ptr_10628)
  {
    v1 = ContactsLibrary_10597();
    v0 = (id *)dlsym(v1, "CNLabelOther");
    v6[3] = (uint64_t)v0;
    getCNLabelOtherSymbolLoc_ptr_10628 = (uint64_t)v0;
  }
  _Block_object_dispose(&v5, 8);
  if (v0)
  {
    v2 = *v0;
  }
  else
  {
    objc_msgSend(MEMORY[0x24BDD1448], "currentHandler");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "NSString *getCNLabelOther(void)");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, CFSTR("WFContact+INPerson.m"), 23, CFSTR("%s"), dlerror());

    __break(1u);
  }
}

void sub_20BC22958(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void *ContactsLibrary_10597()
{
  void *v0;
  void *v2;
  void *v3;

  if (!ContactsLibraryCore_frameworkLibrary_10624)
    ContactsLibraryCore_frameworkLibrary_10624 = _sl_dlopen();
  v0 = (void *)ContactsLibraryCore_frameworkLibrary_10624;
  if (!ContactsLibraryCore_frameworkLibrary_10624)
  {
    objc_msgSend(MEMORY[0x24BDD1448], "currentHandler");
    v0 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "void *ContactsLibrary(void)");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v2, CFSTR("WFContact+INPerson.m"), 14, CFSTR("%s"), 0);

    __break(1u);
    free(v3);
  }
  return v0;
}

void getCNLabelPhoneNumberiPhone()
{
  id *v0;
  void *v1;
  id v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;

  v5 = 0;
  v6 = &v5;
  v7 = 0x2020000000;
  v0 = (id *)getCNLabelPhoneNumberiPhoneSymbolLoc_ptr_10619;
  v8 = getCNLabelPhoneNumberiPhoneSymbolLoc_ptr_10619;
  if (!getCNLabelPhoneNumberiPhoneSymbolLoc_ptr_10619)
  {
    v1 = ContactsLibrary_10597();
    v0 = (id *)dlsym(v1, "CNLabelPhoneNumberiPhone");
    v6[3] = (uint64_t)v0;
    getCNLabelPhoneNumberiPhoneSymbolLoc_ptr_10619 = (uint64_t)v0;
  }
  _Block_object_dispose(&v5, 8);
  if (v0)
  {
    v2 = *v0;
  }
  else
  {
    objc_msgSend(MEMORY[0x24BDD1448], "currentHandler");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "NSString *getCNLabelPhoneNumberiPhone(void)");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, CFSTR("WFContact+INPerson.m"), 25, CFSTR("%s"), dlerror());

    __break(1u);
  }
}

void sub_20BC22B54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void getCNLabelPhoneNumberMobile()
{
  id *v0;
  void *v1;
  id v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;

  v5 = 0;
  v6 = &v5;
  v7 = 0x2020000000;
  v0 = (id *)getCNLabelPhoneNumberMobileSymbolLoc_ptr_10616;
  v8 = getCNLabelPhoneNumberMobileSymbolLoc_ptr_10616;
  if (!getCNLabelPhoneNumberMobileSymbolLoc_ptr_10616)
  {
    v1 = ContactsLibrary_10597();
    v0 = (id *)dlsym(v1, "CNLabelPhoneNumberMobile");
    v6[3] = (uint64_t)v0;
    getCNLabelPhoneNumberMobileSymbolLoc_ptr_10616 = (uint64_t)v0;
  }
  _Block_object_dispose(&v5, 8);
  if (v0)
  {
    v2 = *v0;
  }
  else
  {
    objc_msgSend(MEMORY[0x24BDD1448], "currentHandler");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "NSString *getCNLabelPhoneNumberMobile(void)");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, CFSTR("WFContact+INPerson.m"), 26, CFSTR("%s"), dlerror());

    __break(1u);
  }
}

void sub_20BC22C4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void getCNLabelPhoneNumberMain()
{
  id *v0;
  void *v1;
  id v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;

  v5 = 0;
  v6 = &v5;
  v7 = 0x2020000000;
  v0 = (id *)getCNLabelPhoneNumberMainSymbolLoc_ptr_10612;
  v8 = getCNLabelPhoneNumberMainSymbolLoc_ptr_10612;
  if (!getCNLabelPhoneNumberMainSymbolLoc_ptr_10612)
  {
    v1 = ContactsLibrary_10597();
    v0 = (id *)dlsym(v1, "CNLabelPhoneNumberMain");
    v6[3] = (uint64_t)v0;
    getCNLabelPhoneNumberMainSymbolLoc_ptr_10612 = (uint64_t)v0;
  }
  _Block_object_dispose(&v5, 8);
  if (v0)
  {
    v2 = *v0;
  }
  else
  {
    objc_msgSend(MEMORY[0x24BDD1448], "currentHandler");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "NSString *getCNLabelPhoneNumberMain(void)");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, CFSTR("WFContact+INPerson.m"), 27, CFSTR("%s"), dlerror());

    __break(1u);
  }
}

void sub_20BC22D44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void getCNLabelPhoneNumberHomeFax()
{
  id *v0;
  void *v1;
  id v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;

  v5 = 0;
  v6 = &v5;
  v7 = 0x2020000000;
  v0 = (id *)getCNLabelPhoneNumberHomeFaxSymbolLoc_ptr_10609;
  v8 = getCNLabelPhoneNumberHomeFaxSymbolLoc_ptr_10609;
  if (!getCNLabelPhoneNumberHomeFaxSymbolLoc_ptr_10609)
  {
    v1 = ContactsLibrary_10597();
    v0 = (id *)dlsym(v1, "CNLabelPhoneNumberHomeFax");
    v6[3] = (uint64_t)v0;
    getCNLabelPhoneNumberHomeFaxSymbolLoc_ptr_10609 = (uint64_t)v0;
  }
  _Block_object_dispose(&v5, 8);
  if (v0)
  {
    v2 = *v0;
  }
  else
  {
    objc_msgSend(MEMORY[0x24BDD1448], "currentHandler");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "NSString *getCNLabelPhoneNumberHomeFax(void)");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, CFSTR("WFContact+INPerson.m"), 28, CFSTR("%s"), dlerror());

    __break(1u);
  }
}

void sub_20BC22E3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void getCNLabelPhoneNumberWorkFax()
{
  id *v0;
  void *v1;
  id v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;

  v5 = 0;
  v6 = &v5;
  v7 = 0x2020000000;
  v0 = (id *)getCNLabelPhoneNumberWorkFaxSymbolLoc_ptr_10606;
  v8 = getCNLabelPhoneNumberWorkFaxSymbolLoc_ptr_10606;
  if (!getCNLabelPhoneNumberWorkFaxSymbolLoc_ptr_10606)
  {
    v1 = ContactsLibrary_10597();
    v0 = (id *)dlsym(v1, "CNLabelPhoneNumberWorkFax");
    v6[3] = (uint64_t)v0;
    getCNLabelPhoneNumberWorkFaxSymbolLoc_ptr_10606 = (uint64_t)v0;
  }
  _Block_object_dispose(&v5, 8);
  if (v0)
  {
    v2 = *v0;
  }
  else
  {
    objc_msgSend(MEMORY[0x24BDD1448], "currentHandler");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "NSString *getCNLabelPhoneNumberWorkFax(void)");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, CFSTR("WFContact+INPerson.m"), 29, CFSTR("%s"), dlerror());

    __break(1u);
  }
}

void sub_20BC22F34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void getCNLabelPhoneNumberPager()
{
  id *v0;
  void *v1;
  id v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;

  v5 = 0;
  v6 = &v5;
  v7 = 0x2020000000;
  v0 = (id *)getCNLabelPhoneNumberPagerSymbolLoc_ptr_10603;
  v8 = getCNLabelPhoneNumberPagerSymbolLoc_ptr_10603;
  if (!getCNLabelPhoneNumberPagerSymbolLoc_ptr_10603)
  {
    v1 = ContactsLibrary_10597();
    v0 = (id *)dlsym(v1, "CNLabelPhoneNumberPager");
    v6[3] = (uint64_t)v0;
    getCNLabelPhoneNumberPagerSymbolLoc_ptr_10603 = (uint64_t)v0;
  }
  _Block_object_dispose(&v5, 8);
  if (v0)
  {
    v2 = *v0;
  }
  else
  {
    objc_msgSend(MEMORY[0x24BDD1448], "currentHandler");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "NSString *getCNLabelPhoneNumberPager(void)");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, CFSTR("WFContact+INPerson.m"), 30, CFSTR("%s"), dlerror());

    __break(1u);
  }
}

void sub_20BC2302C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_20BC23864(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  _Block_object_dispose(&a27, 8);
  _Unwind_Resume(a1);
}

void __getCNMutableContactClass_block_invoke(uint64_t a1)
{
  void *v2;
  void *v3;

  ContactsLibrary_10597();
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = objc_getClass("CNMutableContact");
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    getCNMutableContactClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  }
  else
  {
    objc_msgSend(MEMORY[0x24BDD1448], "currentHandler");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "Class getCNMutableContactClass(void)_block_invoke");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, CFSTR("WFContact+INPerson.m"), 18, CFSTR("Unable to find class %s"), "CNMutableContact");

    __break(1u);
  }
}

id getCNLabeledValueClass_10637()
{
  void *v0;
  id v1;
  _QWORD v3[5];
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = 0;
  v5 = &v4;
  v6 = 0x2050000000;
  v0 = (void *)getCNLabeledValueClass_softClass_10644;
  v7 = getCNLabeledValueClass_softClass_10644;
  if (!getCNLabeledValueClass_softClass_10644)
  {
    v3[0] = MEMORY[0x24BDAC760];
    v3[1] = 3221225472;
    v3[2] = __getCNLabeledValueClass_block_invoke_10645;
    v3[3] = &unk_24C4E3118;
    v3[4] = &v4;
    __getCNLabeledValueClass_block_invoke_10645((uint64_t)v3);
    v0 = (void *)v5[3];
  }
  v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_20BC239EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void __getCNPhoneNumberClass_block_invoke_10639(uint64_t a1)
{
  void *v2;
  void *v3;

  ContactsLibrary_10597();
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = objc_getClass("CNPhoneNumber");
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    getCNPhoneNumberClass_softClass_10638 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  }
  else
  {
    objc_msgSend(MEMORY[0x24BDD1448], "currentHandler");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "Class getCNPhoneNumberClass(void)_block_invoke");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, CFSTR("WFContact+INPerson.m"), 19, CFSTR("Unable to find class %s"), "CNPhoneNumber");

    __break(1u);
  }
}

void __getCNLabeledValueClass_block_invoke_10645(uint64_t a1)
{
  void *v2;
  void *v3;

  ContactsLibrary_10597();
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = objc_getClass("CNLabeledValue");
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    getCNLabeledValueClass_softClass_10644 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  }
  else
  {
    objc_msgSend(MEMORY[0x24BDD1448], "currentHandler");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "Class getCNLabeledValueClass(void)_block_invoke");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, CFSTR("WFContact+INPerson.m"), 20, CFSTR("Unable to find class %s"), "CNLabeledValue");

    __break(1u);
  }
}

id getWFPageRendererClass()
{
  if (getWFPageRendererClass_onceToken != -1)
    dispatch_once(&getWFPageRendererClass_onceToken, &__block_literal_global_72_10698);
  return (id)getWFPageRendererClass_dynamicSubclass;
}

void __getWFPageRendererClass_block_invoke()
{
  objc_class *UIPrintPageRendererClass;
  char __str[512];
  uint64_t v2;

  v2 = *MEMORY[0x24BDAC8D0];
  UIPrintPageRendererClass = getUIPrintPageRendererClass();
  getWFPageRendererClass_dynamicSubclass = (uint64_t)objc_allocateClassPair(UIPrintPageRendererClass, "_WFPageRenderer", 0);
  class_addIvar((Class)getWFPageRendererClass_dynamicSubclass, "_wf_inputSize", 8uLL, 3u, "@");
  class_addIvar((Class)getWFPageRendererClass_dynamicSubclass, "_wf_margin", 8uLL, 3u, "@");
  snprintf(__str, 0x200uLL, "%s@:", "{CGRect={CGPoint=dd}{CGSize=dd}}");
  class_addMethod((Class)getWFPageRendererClass_dynamicSubclass, sel_paperRect, (IMP)WFGetPaperRect, __str);
  class_addMethod((Class)getWFPageRendererClass_dynamicSubclass, sel_printableRect, (IMP)WFGetPrintableRect, __str);
  objc_registerClassPair((Class)getWFPageRendererClass_dynamicSubclass);
}

id UIPrintPageRendererFunction()
{
  return (id)classUIPrintPageRenderer;
}

Class initUIPrintPageRenderer()
{
  Class result;

  if (UIKitLibrary_sOnce_10706 != -1)
    dispatch_once(&UIKitLibrary_sOnce_10706, &__block_literal_global_51_10707);
  result = objc_getClass("UIPrintPageRenderer");
  classUIPrintPageRenderer = (uint64_t)result;
  getUIPrintPageRendererClass = (uint64_t (*)())UIPrintPageRendererFunction;
  return result;
}

double WFGetPaperRect(void *a1)
{
  id v1;
  objc_class *WFPageRendererClass;
  objc_ivar *InstanceVariable;
  void *v4;

  v1 = a1;
  WFPageRendererClass = (objc_class *)getWFPageRendererClass();
  InstanceVariable = class_getInstanceVariable(WFPageRendererClass, "_wf_inputSize");
  object_getIvar(v1, InstanceVariable);
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v4, "CGSizeValue");
  return 0.0;
}

double WFGetPrintableRect(void *a1)
{
  id v1;
  objc_class *WFPageRendererClass;
  objc_ivar *InstanceVariable;
  void *v4;
  float v5;
  CGFloat v6;
  double v7;
  CGFloat v8;
  double v9;
  CGFloat v10;
  double v11;
  CGFloat v12;
  double v13;
  CGFloat v14;
  double v15;
  CGRect v17;

  v1 = a1;
  WFPageRendererClass = (objc_class *)getWFPageRendererClass();
  InstanceVariable = class_getInstanceVariable(WFPageRendererClass, "_wf_margin");
  object_getIvar(v1, InstanceVariable);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "floatValue");
  v6 = v5;
  objc_msgSend(v1, "paperRect");
  v8 = v7;
  v10 = v9;
  v12 = v11;
  v14 = v13;

  v17.origin.x = v8;
  v17.origin.y = v10;
  v17.size.width = v12;
  v17.size.height = v14;
  *(_QWORD *)&v15 = (unint64_t)CGRectInset(v17, v6, v6);

  return v15;
}

uint64_t (*initUIGraphicsEndImageContext())()
{
  uint64_t (*result)();

  if (UIKitLibrary_sOnce_10706 != -1)
    dispatch_once(&UIKitLibrary_sOnce_10706, &__block_literal_global_51_10707);
  result = (uint64_t (*)())dlsym((void *)UIKitLibrary_sLib_10711, "UIGraphicsEndImageContext");
  softLinkUIGraphicsEndImageContext = result;
  if (result)
    return (uint64_t (*)())result();
  return result;
}

uint64_t (*initUIGraphicsGetImageFromCurrentImageContext())()
{
  uint64_t (*v0)();

  if (UIKitLibrary_sOnce_10706 != -1)
    dispatch_once(&UIKitLibrary_sOnce_10706, &__block_literal_global_51_10707);
  v0 = (uint64_t (*)())dlsym((void *)UIKitLibrary_sLib_10711, "UIGraphicsGetImageFromCurrentImageContext");
  softLinkUIGraphicsGetImageFromCurrentImageContext = v0;
  if (v0)
  {
    v0();
    v0 = (uint64_t (*)())objc_claimAutoreleasedReturnValue();
  }
  return v0;
}

uint64_t (*initUIGraphicsBeginImageContextWithOptions(uint64_t a1, double a2, double a3, double a4))()
{
  uint64_t (*result)();

  if (UIKitLibrary_sOnce_10706 != -1)
    dispatch_once(&UIKitLibrary_sOnce_10706, &__block_literal_global_51_10707);
  result = (uint64_t (*)())dlsym((void *)UIKitLibrary_sLib_10711, "UIGraphicsBeginImageContextWithOptions");
  softLinkUIGraphicsBeginImageContextWithOptions = result;
  if (result)
    return (uint64_t (*)())((uint64_t (*)(uint64_t, double, double, double))result)(a1, a2, a3, a4);
  return result;
}

void sub_20BC250B0(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 128), 8);
  _Unwind_Resume(a1);
}

id UITraitCollectionFunction()
{
  return (id)classUITraitCollection;
}

Class initUITraitCollection()
{
  Class result;

  if (UIKitLibrary_sOnce_10706 != -1)
    dispatch_once(&UIKitLibrary_sOnce_10706, &__block_literal_global_51_10707);
  result = objc_getClass("UITraitCollection");
  classUITraitCollection = (uint64_t)result;
  getUITraitCollectionClass = (uint64_t (*)())UITraitCollectionFunction;
  return result;
}

id UIViewPrintFormatterFunction()
{
  return (id)classUIViewPrintFormatter;
}

Class initUIViewPrintFormatter()
{
  Class result;

  if (UIKitLibrary_sOnce_10706 != -1)
    dispatch_once(&UIKitLibrary_sOnce_10706, &__block_literal_global_51_10707);
  result = objc_getClass("UIViewPrintFormatter");
  classUIViewPrintFormatter = (uint64_t)result;
  getUIViewPrintFormatterClass = (uint64_t (*)())UIViewPrintFormatterFunction;
  return result;
}

Class __getWKWebViewClass_block_invoke(uint64_t a1)
{
  Class result;
  void *v3;
  void *v4;
  void *v5;

  if (!WebKitLibraryCore_frameworkLibrary_10721)
    WebKitLibraryCore_frameworkLibrary_10721 = _sl_dlopen();
  if (!WebKitLibraryCore_frameworkLibrary_10721)
  {
    objc_msgSend(MEMORY[0x24BDD1448], "currentHandler");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "void *WebKitLibrary(void)");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, CFSTR("WFPageRenderer.m"), 26, CFSTR("%s"), 0);

    goto LABEL_8;
  }
  result = objc_getClass("WKWebView");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    objc_msgSend(MEMORY[0x24BDD1448], "currentHandler");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "Class getWKWebViewClass(void)_block_invoke");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v5, CFSTR("WFPageRenderer.m"), 27, CFSTR("Unable to find class %s"), "WKWebView");

LABEL_8:
    __break(1u);
  }
  getWKWebViewClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t (*initUIGraphicsGetCurrentContext())()
{
  uint64_t (*result)();

  if (UIKitLibrary_sOnce_10706 != -1)
    dispatch_once(&UIKitLibrary_sOnce_10706, &__block_literal_global_51_10707);
  result = (uint64_t (*)())dlsym((void *)UIKitLibrary_sLib_10711, "UIGraphicsGetCurrentContext");
  softLinkUIGraphicsGetCurrentContext = result;
  if (result)
    return (uint64_t (*)())result();
  return result;
}

uint64_t (*initUIGraphicsPopContext())()
{
  uint64_t (*result)();

  if (UIKitLibrary_sOnce_10706 != -1)
    dispatch_once(&UIKitLibrary_sOnce_10706, &__block_literal_global_51_10707);
  result = (uint64_t (*)())dlsym((void *)UIKitLibrary_sLib_10711, "UIGraphicsPopContext");
  softLinkUIGraphicsPopContext = result;
  if (result)
    return (uint64_t (*)())result();
  return result;
}

uint64_t (*initUIGraphicsPushContext(uint64_t a1))()
{
  uint64_t (*result)();

  if (UIKitLibrary_sOnce_10706 != -1)
    dispatch_once(&UIKitLibrary_sOnce_10706, &__block_literal_global_51_10707);
  result = (uint64_t (*)())dlsym((void *)UIKitLibrary_sLib_10711, "UIGraphicsPushContext");
  softLinkUIGraphicsPushContext = result;
  if (result)
    return (uint64_t (*)())((uint64_t (*)(uint64_t))result)(a1);
  return result;
}

void initUIGraphicsBeginPDFPageWithInfo(void *a1, double a2, double a3, double a4, double a5)
{
  uint64_t (*v9)();
  void *v10;
  id v11;

  v11 = a1;
  if (UIKitLibrary_sOnce_10706 != -1)
    dispatch_once(&UIKitLibrary_sOnce_10706, &__block_literal_global_51_10707);
  v9 = (uint64_t (*)())dlsym((void *)UIKitLibrary_sLib_10711, "UIGraphicsBeginPDFPageWithInfo");
  softLinkUIGraphicsBeginPDFPageWithInfo = v9;
  v10 = v11;
  if (v9)
  {
    ((void (*)(id, double, double, double, double))v9)(v11, a2, a3, a4, a5);
    v10 = v11;
  }

}

uint64_t (*initUIGraphicsEndPDFContext())()
{
  uint64_t (*result)();

  if (UIKitLibrary_sOnce_10706 != -1)
    dispatch_once(&UIKitLibrary_sOnce_10706, &__block_literal_global_51_10707);
  result = (uint64_t (*)())dlsym((void *)UIKitLibrary_sLib_10711, "UIGraphicsEndPDFContext");
  softLinkUIGraphicsEndPDFContext = result;
  if (result)
    return (uint64_t (*)())result();
  return result;
}

uint64_t initUIGraphicsBeginPDFContextToFile(void *a1, void *a2, double a3, double a4, double a5, double a6)
{
  id v11;
  id v12;
  uint64_t (*v13)();
  uint64_t v14;

  v11 = a1;
  v12 = a2;
  if (UIKitLibrary_sOnce_10706 != -1)
    dispatch_once(&UIKitLibrary_sOnce_10706, &__block_literal_global_51_10707);
  v13 = (uint64_t (*)())dlsym((void *)UIKitLibrary_sLib_10711, "UIGraphicsBeginPDFContextToFile");
  softLinkUIGraphicsBeginPDFContextToFile = v13;
  if (v13)
    v14 = ((uint64_t (*)(id, id, double, double, double, double))v13)(v11, v12, a3, a4, a5, a6);
  else
    v14 = 0;

  return v14;
}

id getWKWebViewClass()
{
  void *v0;
  id v1;
  _QWORD v3[5];
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = 0;
  v5 = &v4;
  v6 = 0x2050000000;
  v0 = (void *)getWKWebViewClass_softClass_10954;
  v7 = getWKWebViewClass_softClass_10954;
  if (!getWKWebViewClass_softClass_10954)
  {
    v3[0] = MEMORY[0x24BDAC760];
    v3[1] = 3221225472;
    v3[2] = __getWKWebViewClass_block_invoke_10955;
    v3[3] = &unk_24C4E3118;
    v3[4] = &v4;
    __getWKWebViewClass_block_invoke_10955((uint64_t)v3);
    v0 = (void *)v5[3];
  }
  v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_20BC26D18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id UIPasteboardFunction()
{
  return (id)classUIPasteboard;
}

Class initUIPasteboard()
{
  Class result;

  if (UIKitLibrary_sOnce_10943 != -1)
    dispatch_once(&UIKitLibrary_sOnce_10943, &__block_literal_global_10944);
  result = objc_getClass("UIPasteboard");
  classUIPasteboard = (uint64_t)result;
  getUIPasteboardClass = (uint64_t (*)())UIPasteboardFunction;
  return result;
}

Class __getWKWebViewClass_block_invoke_10955(uint64_t a1)
{
  Class result;
  void *v3;
  void *v4;
  void *v5;

  if (!WebKitLibraryCore_frameworkLibrary_10956)
    WebKitLibraryCore_frameworkLibrary_10956 = _sl_dlopen();
  if (!WebKitLibraryCore_frameworkLibrary_10956)
  {
    objc_msgSend(MEMORY[0x24BDD1448], "currentHandler");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "void *WebKitLibrary(void)");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, CFSTR("WFWebResourceCapturer.m"), 23, CFSTR("%s"), 0);

    goto LABEL_8;
  }
  result = objc_getClass("WKWebView");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    objc_msgSend(MEMORY[0x24BDD1448], "currentHandler");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "Class getWKWebViewClass(void)_block_invoke");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v5, CFSTR("WFWebResourceCapturer.m"), 24, CFSTR("Unable to find class %s"), "WKWebView");

LABEL_8:
    __break(1u);
  }
  getWKWebViewClass_softClass_10954 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t file_checkfield(uint64_t result, const char *a2, unsigned __int8 **a3)
{
  unsigned __int8 *v3;
  int v4;
  int v5;
  int v6;
  int v7;

  v3 = *a3;
  v4 = **a3;
  if ((v4 - 48) > 9)
    return 1;
  v5 = 0;
  do
  {
    v6 = 10 * v5 + (char)v4;
    v7 = *++v3;
    LOBYTE(v4) = v7;
    v5 = v6 - 48;
  }
  while ((v7 - 48) < 0xA);
  *a3 = v3;
  if (v5 < 1024)
    return 1;
  if (result)
  {
    snprintf((char *)result, 0x400uLL, "field %s too large: %d", a2, v5);
    return 0;
  }
  return result;
}

uint64_t file_vprintf(uint64_t a1, char *a2, va_list a3)
{
  uint64_t v6;
  unsigned __int8 *i;
  unsigned __int8 *v8;
  int v9;
  char v10;
  unsigned int v11;
  uint64_t result;
  unsigned int v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  int v21;
  int v22;
  void **v23;
  char *v24;
  unsigned int v25;
  uint64_t v26;
  char v27;
  char *v28;
  char *v29;
  unsigned __int8 *v30;
  char __str[1024];
  uint64_t v32;

  v32 = *MEMORY[0x24BDAC8D0];
  if ((*(_BYTE *)(a1 + 72) & 1) != 0)
    return 0;
  v28 = 0;
  v29 = 0;
  v6 = MEMORY[0x24BDAC740];
  for (i = (unsigned __int8 *)a2; ; ++i)
  {
    v30 = i;
    if (*i != 37)
      break;
    v8 = i + 1;
    v30 = i + 1;
    v9 = *++i;
    if (v9 != 37)
    {
      while (memchr("0.'+- ", (char)v9, 7uLL))
      {
        v10 = *++v8;
        LOBYTE(v9) = v10;
      }
      v30 = v8;
      if (v9 == 42)
      {
        strcpy(__str, "* not allowed in format");
        goto LABEL_25;
      }
      if (!file_checkfield((uint64_t)__str, "width", &v30))
        goto LABEL_25;
      i = v30;
      v11 = *v30;
      if (v11 == 46)
      {
        ++v30;
        if (!file_checkfield((uint64_t)__str, "precision", &v30))
          goto LABEL_25;
        i = v30;
        v11 = *v30;
      }
      if ((v11 & 0x80) != 0)
      {
        if (!__maskrune(v11, 0x100uLL))
        {
LABEL_24:
          snprintf(__str, 0x400uLL, "bad format char: %c", (char)v11);
LABEL_25:
          free(*(void **)(a1 + 32));
          *(_QWORD *)(a1 + 32) = 0;
          *(_QWORD *)(a1 + 40) = 0;
          v27 = (char)a2;
LABEL_26:
          v21 = a1;
          v22 = 0;
LABEL_27:
          file_error(v21, v22, v20, v15, v16, v17, v18, v19, v27);
          return 0xFFFFFFFFLL;
        }
      }
      else if ((*(_DWORD *)(v6 + 4 * v11 + 60) & 0x100) == 0)
      {
        goto LABEL_24;
      }
    }
LABEL_18:
    ;
  }
  if (*i)
    goto LABEL_18;
  v13 = vasprintf(&v29, a2, a3);
  v14 = v13;
  if (v13 >= 0x401 || *(_QWORD *)(a1 + 40) + (unint64_t)v13 > 0x100000)
  {
    free(v29);
    free(*(void **)(a1 + 32));
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 40) = 0;
    v27 = v14;
    v20 = "Output buffer space exceeded %d+%zu";
    goto LABEL_26;
  }
  v23 = (void **)(a1 + 32);
  v24 = v29;
  if (*(_QWORD *)(a1 + 32))
  {
    v25 = asprintf(&v28, "%s%s", *(const char **)(a1 + 32), v29);
    free(v24);
    free(*v23);
    if ((v25 & 0x80000000) != 0)
    {
      *v23 = 0;
      *(_QWORD *)(a1 + 40) = 0;
      v22 = *__error();
      v20 = "vasprintf failed";
      v21 = a1;
      goto LABEL_27;
    }
    v24 = v28;
    v26 = v25;
  }
  else
  {
    v26 = v13;
  }
  result = 0;
  *(_QWORD *)(a1 + 32) = v24;
  *(_QWORD *)(a1 + 40) = v26;
  return result;
}

uint64_t file_error(int a1, int a2, char *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  return file_error_core(a1, a2, a3, &a9);
}

uint64_t file_error_core(uint64_t result, int a2, char *a3, va_list a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v8;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE *v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;

  if ((*(_BYTE *)(result + 72) & 1) == 0)
  {
    v8 = a5;
    v12 = result;
    if (a5)
    {
      free(*(void **)(result + 32));
      *(_QWORD *)(v12 + 32) = 0;
      *(_QWORD *)(v12 + 40) = 0;
      file_printf(v12, "line %zu:", v13, v14, v15, v16, v17, v18, v8);
    }
    v19 = *(_BYTE **)(v12 + 32);
    if (v19 && *v19)
      file_printf(v12, " ", (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8, v27);
    result = file_vprintf(v12, a3, a4);
    if (a2 >= 1)
    {
      v20 = strerror(a2);
      result = file_printf(v12, " (%s)", v21, v22, v23, v24, v25, v26, v20);
    }
    *(_DWORD *)(v12 + 72) |= 1u;
    *(_DWORD *)(v12 + 64) = a2;
  }
  return result;
}

uint64_t file_printf(uint64_t a1, char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  return file_vprintf(a1, a2, &a9);
}

uint64_t file_magerror(uint64_t a1, char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  return file_error_core(a1, 0, a2, va, *(_QWORD *)(a1 + 88), a6, a7, a8);
}

uint64_t file_oomem(int a1, char a2)
{
  int *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v4 = __error();
  return file_error(a1, *v4, "cannot allocate %zu bytes", v5, v6, v7, v8, v9, a2);
}

uint64_t file_badseek(int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v10 = *__error();
  return file_error(a1, v10, "error seeking", v11, v12, v13, v14, v15, a9);
}

uint64_t file_badread(int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v10 = *__error();
  return file_error(a1, v10, "error reading", v11, v12, v13, v14, v15, a9);
}

uint64_t file_buffer(uint64_t a1, int a2, __int128 *a3, unsigned __int8 *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  void *v16;
  const char *v17;
  int v18;
  const char *v19;
  unsigned int v20;
  int v21;
  unsigned int v22;
  int v23;
  char *v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned __int8 *v28;
  unint64_t v29;
  int v30;
  int v31;
  _BOOL4 v32;
  unint64_t v33;
  unsigned __int8 *v34;
  int v35;
  uint64_t v36;
  char *v37;
  char *v38;
  unsigned int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unsigned __int16 v50;
  unsigned int v51;
  unsigned int v52;
  unsigned int v53;
  int v54;
  unint64_t v55;
  uint64_t i;
  unsigned __int16 v57;
  unint64_t v59;
  size_t v60;
  unint64_t v61;
  unint64_t v62;
  int v63;
  char *v64;
  void **v65;
  void **v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  int v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  _BYTE *v78;
  uint64_t v81;
  unint64_t j;
  int v83;
  uint64_t v84;
  uint64_t v85;
  size_t v86;
  uint64_t v87;
  int *v88;
  int v89;
  int v90;
  uint64_t v91;
  int32x4_t v92;
  int32x4_t v93;
  int32x4_t v94;
  int32x4_t v95;
  uint8x16_t v96;
  uint16x8_t v97;
  uint16x8_t v98;
  uint64_t v99;
  int v100;
  uint64_t v101;
  char *v102;
  unsigned int v103;
  size_t v104;
  size_t v105;
  void *v106;
  unsigned int v107;
  uint64_t v108;
  uint64_t v109;
  int v110;
  uint64_t v111;
  uint64_t v112;
  unint64_t v113;
  char *v114;
  void *v115;
  unint64_t v116;
  uint64_t v117;
  uint64_t v118;
  _DWORD *v119;
  uint64_t v120;
  _DWORD *v121;
  _DWORD *v122;
  uint64_t v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  int v127;
  size_t v128;
  unsigned __int8 *v129;
  int v130;
  BOOL v131;
  uint64_t v132;
  int v133;
  int v134;
  int v135;
  uint64_t v136;
  unint64_t v137;
  unint64_t v138;
  unint64_t v139;
  unint64_t *v140;
  void *v141;
  char v142;
  const char *v143;
  int v144;
  int v145;
  unint64_t v146;
  _BOOL4 v147;
  void *v148;
  int v149;
  uint64_t v150;
  char *v151;
  char *v152;
  char *v153;
  unint64_t *v154;
  char *v155;
  _BYTE *v156;
  unint64_t v157;
  int v158;
  int *v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  int v165;
  int v166;
  int v167;
  int v168;
  int v169;
  int v170;
  _BOOL4 v171;
  int v172;
  int v173;
  unint64_t v174;
  uint64_t v175;
  unint64_t v176;
  int v177;
  int v178;
  int v179;
  _BOOL4 v180;
  char v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  char *v189;
  int v190;
  int v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  int v198;
  _BOOL4 v199;
  int v200;
  int v201;
  unsigned int v202;
  unsigned int v203;
  unsigned int v204;
  unsigned int v205;
  unsigned int v206;
  unsigned int v207;
  unsigned int v208;
  unsigned int v209;
  unsigned int v210;
  int v211;
  unsigned int v212;
  uint64_t v213;
  int v214;
  unsigned int v215;
  unint64_t v216;
  unint64_t v217;
  unsigned int v218;
  unsigned int v219;
  unsigned int v220;
  unsigned int v221;
  unsigned int v222;
  unsigned int v223;
  unsigned int v224;
  unsigned int v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  char *v233;
  unsigned int v234;
  uint64_t v235;
  unsigned int v236;
  off_t v237;
  unsigned int v238;
  uint64_t v239;
  unsigned int v240;
  uint64_t v241;
  unsigned int v242;
  uint64_t v243;
  unsigned int v244;
  unsigned int v245;
  int v246;
  unsigned int v247;
  const char *v248;
  unsigned int v249;
  unsigned int v250;
  off_t v251;
  unsigned int v252;
  uint64_t v253;
  unsigned int v254;
  int v255;
  uint64_t v256;
  const char *v257;
  unint64_t v258;
  off_t v259;
  unsigned int v260;
  uint64_t v261;
  unint64_t v262;
  off_t v263;
  unsigned int v264;
  uint64_t v265;
  unint64_t v266;
  uint64_t v267;
  unsigned int v268;
  uint64_t v269;
  unsigned int v270;
  unsigned int v271;
  uint64_t v272;
  unsigned int v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  BOOL v280;
  BOOL v281;
  int v282;
  char *v283;
  char v284;
  uint64_t v285;
  void *v286;
  _DWORD *v287;
  int v288;
  size_t v289;
  size_t v290;
  int v291;
  unsigned int v292;
  unsigned __int8 *v293;
  char *v294;
  _BOOL4 v295;
  unint64_t v296;
  const char *v297;
  unint64_t v298;
  void *v299;
  char v300;
  char v301;
  uint64_t v302;
  char v303;
  char v304;
  uint64_t v305;
  uint64_t v306;
  unsigned int v307;
  unsigned __int16 v308;
  unint64_t *v309;
  char v310;
  unsigned int v311;
  unsigned int v312;
  int v313;
  void *v314;
  int v315;
  int v316;
  char v317;
  unsigned int v318;
  unsigned int v319;
  unsigned int v320;
  void *v321;
  _QWORD v322[20];
  __int128 v323;
  void *v324[2];
  uint64_t v325;
  const char *v326;
  const char *v327;
  const char *v328;
  unsigned __int8 *v329;
  size_t v330;
  void *v331;
  uint64_t v332;
  uint64_t v333;
  uint64_t v334;
  void *v335[2];
  __int128 v336;
  const char *v337;
  size_t v338;
  void *v339;
  unint64_t v340;
  const char *v341[3];
  _OWORD v342[32];
  _BYTE __buf[160];
  __int128 v344;
  void *v345[2];
  uint64_t v346;

  v8 = a5;
  v346 = *MEMORY[0x24BDAC8D0];
  v326 = "binary";
  v327 = 0;
  v325 = 0;
  v323 = 0u;
  *(_OWORD *)v324 = 0u;
  memset(v322, 0, sizeof(v322));
  LODWORD(v322[0]) = a2;
  if (a3)
  {
    v12 = a3[4];
    *(_OWORD *)&v322[11] = a3[5];
    v13 = a3[7];
    *(_OWORD *)&v322[13] = a3[6];
    *(_OWORD *)&v322[15] = v13;
    *(_OWORD *)&v322[17] = a3[8];
    v14 = *a3;
    *(_OWORD *)&v322[3] = a3[1];
    v15 = a3[3];
    *(_OWORD *)&v322[5] = a3[2];
    *(_OWORD *)&v322[7] = v15;
    *(_OWORD *)&v322[9] = v12;
    *(_OWORD *)&v322[1] = v14;
  }
  else if (a2 == -1 || fstat(a2, (stat *)&v322[1]) == -1)
  {
    memset(&v322[1], 0, 144);
  }
  v322[19] = a4;
  v323 = v8;
  v324[0] = 0;
  v324[1] = 0;
  *(_WORD *)(a1 + 96) = WORD2(v322[1]);
  if (!v8)
  {
    v16 = 0;
    v17 = "empty";
    goto LABEL_10;
  }
  if (v8 == 1)
  {
    v16 = 0;
    v17 = "very short file (no magic)";
    goto LABEL_10;
  }
  v21 = *(_DWORD *)(a1 + 68);
  if ((v21 & 0x200000) != 0)
  {
    v22 = 0;
  }
  else
  {
    v22 = file_encoding(a1, a4, v8, 0, 0, &v327, &v326, &v325);
    v21 = *(_DWORD *)(a1 + 68);
  }
  if ((v21 & 0x2000) != 0)
  {
    v20 = 0;
    v23 = 0;
    if ((v21 & 0x400000) != 0)
      goto LABEL_57;
LABEL_48:
    *(_QWORD *)&v342[0] = v322[19];
    if ((v21 & 0x1000800) != 0
      || (memset(__buf, 0, 48),
          !json_parse((unsigned __int8 **)v342, (unsigned __int8 *)(v322[19] + v323), (uint64_t)__buf, 0)))
    {
      v23 = 0;
    }
    else if ((v21 & 0x410) == 0x400)
    {
      v23 = 1;
    }
    else
    {
      if ((v21 & 0x410) != 0)
        v38 = "application/json";
      else
        v38 = "JSON data";
      if (file_printf(a1, v38, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8, v284) == -1)
        v23 = -1;
      else
        v23 = 1;
    }
    v21 = *(_DWORD *)(a1 + 68);
    if ((v21 & 1) != 0)
    {
      fprintf((FILE *)*MEMORY[0x24BDAC8D8], "[try json %d]\n", v23);
      v21 = *(_DWORD *)(a1 + 68);
    }
    if (v23)
    {
      if ((v21 & 0x20) == 0)
        goto LABEL_127;
      if (file_printf(a1, "\n- ", (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8, v284) == -1)
        v20 = -1;
      v21 = *(_DWORD *)(a1 + 68);
    }
    goto LABEL_57;
  }
  if ((v21 & 0x1000800) != 0 || (unint64_t)v323 < 0x200)
  {
    v23 = 0;
    goto LABEL_28;
  }
  v39 = v22;
  v313 = v21 & 0x410;
  v40 = v322[19];
  v41 = v322[19] + 148;
  v42 = 8;
  v43 = MEMORY[0x24BDAC740];
  v44 = (char *)(v322[19] + 148);
  while (1)
  {
    v45 = *v44;
    if ((*v44 & 0x80000000) == 0)
    {
      if ((*(_DWORD *)(v43 + 4 * v45 + 60) & 0x4000) == 0)
        break;
      goto LABEL_104;
    }
    if (!__maskrune(v45, 0x4000uLL))
      break;
LABEL_104:
    ++v44;
    if (--v42 == -1)
      goto LABEL_105;
  }
  if (v42)
  {
    v47 = 0;
    v46 = 0;
    while (1)
    {
      v48 = v44[v47];
      if ((v48 & 0xF8) != 0x30)
        break;
      v46 = (v48 - 48) | (8 * v46);
      if (v42 == ++v47)
        goto LABEL_206;
    }
    if (v44[v47])
    {
      if (!((v48 & 0x80) != 0 ? __maskrune(v48, 0x4000uLL) : *(_DWORD *)(v43 + 4 * v48 + 60) & 0x4000))
LABEL_105:
        v46 = -1;
    }
  }
  else
  {
    v46 = 0;
  }
LABEL_206:
  v91 = 0;
  v92 = 0uLL;
  v93 = 0uLL;
  v94 = 0uLL;
  v95 = 0uLL;
  v22 = v39;
  do
  {
    v96 = *(uint8x16_t *)(v40 + v91);
    v97 = vmovl_u8(*(uint8x8_t *)v96.i8);
    v98 = vmovl_high_u8(v96);
    v95 = (int32x4_t)vaddw_high_u16((uint32x4_t)v95, v98);
    v94 = (int32x4_t)vaddw_u16((uint32x4_t)v94, *(uint16x4_t *)v98.i8);
    v93 = (int32x4_t)vaddw_high_u16((uint32x4_t)v93, v97);
    v92 = (int32x4_t)vaddw_u16((uint32x4_t)v92, *(uint16x4_t *)v97.i8);
    v91 += 16;
  }
  while (v91 != 512);
  v99 = 0;
  v100 = vaddvq_s32(vaddq_s32(vaddq_s32(v92, v94), vaddq_s32(v93, v95)));
  do
    v100 -= *(char *)(v41 + v99++);
  while (v99 != 8);
  if (v100 + 256 == v46)
  {
    if (!strncmp((const char *)(v40 + 257), "ustar  ", 8uLL))
      v101 = 2;
    else
      v101 = strncmp((const char *)(v40 + 257), "ustar", 8uLL) == 0;
    if (v313 == 1024)
    {
      v23 = 1;
    }
    else
    {
      v102 = &tartype[32 * v101];
      if (v313)
        v102 = "application/x-tar";
      if (file_printf(a1, "%s", (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8, (char)v102) == -1)
        v23 = -1;
      else
        v23 = 1;
    }
  }
  else
  {
    v23 = 0;
  }
LABEL_28:
  v21 = *(_DWORD *)(a1 + 68);
  if ((v21 & 1) != 0)
  {
    fprintf((FILE *)*MEMORY[0x24BDAC8D8], "[try tar %d]\n", v23);
    v21 = *(_DWORD *)(a1 + 68);
  }
  if (!v23)
  {
    v20 = 0;
    if ((v21 & 0x400000) != 0)
      goto LABEL_57;
    goto LABEL_48;
  }
  if ((v21 & 0x20) == 0)
  {
    v20 = 0;
    goto LABEL_127;
  }
  if (file_printf(a1, "\n- ", (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8, v284) == -1)
    v20 = -1;
  else
    v20 = 0;
  v21 = *(_DWORD *)(a1 + 68);
  if ((v21 & 0x400000) == 0)
    goto LABEL_48;
LABEL_57:
  if ((v21 & 0x80000) != 0)
    goto LABEL_120;
  v23 = 0;
  if (!v22 || (v21 & 0x1000800) != 0 || (uint64_t)v323 < 1)
    goto LABEL_113;
  v25 = 0;
  v26 = 0;
  v27 = 0;
  v28 = (unsigned __int8 *)v322[19];
  v29 = v322[19] + v323;
  while (2)
  {
    v31 = *v28++;
    v30 = v31;
    if (v31 != 10)
    {
      if (v30 == 44)
      {
        v36 = v27 + 1;
      }
      else
      {
        if (v30 == 34)
        {
          if ((unint64_t)v28 < v29)
          {
            v32 = 0;
            v33 = v29 - (_QWORD)v28;
            v34 = v28;
            do
            {
              v35 = *v34++;
              if (v35 == 34)
              {
                v32 = !v32;
              }
              else if (v32)
              {
                goto LABEL_72;
              }
              v28 = v34;
              --v33;
            }
            while (v33);
          }
LABEL_81:
          v23 = 0;
          if (!v26 || v25 <= 2)
            goto LABEL_113;
          goto LABEL_83;
        }
LABEL_72:
        v36 = v27;
      }
      goto LABEL_80;
    }
    if (++v25 != 10)
    {
      if (v26)
      {
        if (v26 != v27)
        {
LABEL_203:
          v23 = 0;
          goto LABEL_113;
        }
        v36 = 0;
      }
      else
      {
        if (!v27)
          goto LABEL_203;
        v36 = 0;
        v26 = v27;
      }
LABEL_80:
      v27 = v36;
      if ((unint64_t)v28 >= v29)
        goto LABEL_81;
      continue;
    }
    break;
  }
  v23 = 0;
  if (!v26 || v26 != v27)
    goto LABEL_113;
LABEL_83:
  if ((v21 & 0x410) == 0x400)
  {
    v23 = 1;
  }
  else
  {
    if ((v21 & 0x410) != 0)
      v37 = "application/csv";
    else
      v37 = "CSV text";
    if (file_printf(a1, v37, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8, v284) == -1)
      v23 = -1;
    else
      v23 = 1;
    v21 = *(_DWORD *)(a1 + 68);
  }
LABEL_113:
  if ((v21 & 1) != 0)
  {
    fprintf((FILE *)*MEMORY[0x24BDAC8D8], "[try csv %d]\n", v23);
    v21 = *(_DWORD *)(a1 + 68);
  }
  if (!v23)
  {
LABEL_120:
    if ((v21 & 0x40000) != 0)
      goto LABEL_150;
    v328 = "";
    v331 = 0;
    v341[1] = (const char *)v322[19];
    v341[0] = (const char *)LODWORD(v322[0]);
    v341[2] = (const char *)v323;
    if ((v21 & 0x1000800) == 0)
    {
      memset((char *)&v342[4] + 8, 0, 440);
      v339 = 0;
      v340 = 0;
      v337 = 0;
      v338 = 0;
      *(_OWORD *)v335 = 0u;
      v336 = 0u;
      v333 = 0;
      v334 = 0;
      v332 = 0;
      v329 = 0;
      v330 = 0;
      if (cdf_read((uint64_t)v341, 0, __buf, 0x200uLL) != -1)
      {
        v49 = *(_QWORD *)__buf;
        *(_QWORD *)&v342[0] = *(_QWORD *)__buf;
        *(_OWORD *)((char *)v342 + 8) = *(_OWORD *)&__buf[8];
        v50 = *(_WORD *)&__buf[30];
        *((_QWORD *)&v342[1] + 1) = *(_QWORD *)&__buf[24];
        v51 = *(unsigned __int16 *)&__buf[32];
        LOWORD(v342[2]) = *(_WORD *)&__buf[32];
        *(_QWORD *)((char *)&v342[2] + 2) = *(_QWORD *)&__buf[34];
        WORD5(v342[2]) = *(_WORD *)&__buf[42];
        v52 = *(_DWORD *)&__buf[48];
        *(_OWORD *)((char *)&v342[2] + 12) = *(_OWORD *)&__buf[44];
        v53 = *(_DWORD *)&__buf[60];
        *(_OWORD *)((char *)&v342[3] + 12) = *(_OWORD *)&__buf[60];
        v54 = *(_DWORD *)&__buf[68];
        v55 = *(unsigned int *)&__buf[72];
        for (i = 76; i != 512; i += 4)
          *(_DWORD *)((char *)v342 + i) = *(_DWORD *)&__buf[i];
        if (v49 == 0xE11AB1A1E011CFD0)
        {
          v57 = v50;
          if (v50 <= 0x14u && v51 < 0x15)
          {
            v59 = 0;
            v60 = 1 << v50;
            v61 = (v60 >> 2) - 1;
            do
            {
              if (*((_DWORD *)&v342[4] + v59 + 3) == -1)
                break;
              ++v59;
            }
            while (v59 != 109);
            v62 = 0xFFFFFFFF / (v60 << 6);
            if (v60 >> 2 != 1 && v62 / v61 < v55 || v59 > v62)
            {
              *__error() = 79;
LABEL_143:
              v328 = "Can't read SAT";
              goto LABEL_144;
            }
            v292 = v53;
            v307 = v52;
            v289 = v59 + v61 * v55;
            v339 = malloc_type_calloc(v289, 1 << v50, 0x9D4F84DDuLL);
            v314 = v339;
            if (!v339)
              goto LABEL_143;
            v308 = v57;
            v296 = v8;
            v81 = 0;
            for (j = 0; j != 109; ++j)
            {
              v83 = *((_DWORD *)&v342[4] + j + 3);
              if (v83 < 0)
                break;
              if (cdf_read_sector((uint64_t)v341, (uint64_t)v314, v81, v60, v57, v83) != v60)
                goto LABEL_411;
              v81 += v60;
            }
            v299 = malloc_type_calloc(1uLL, v60, 0x9D4F84DDuLL);
            if (!v299)
            {
LABEL_411:
              free(v314);
              v8 = v296;
              goto LABEL_143;
            }
            v319 = v22;
            if ((_DWORD)v55)
            {
              if (v54 < 0)
                goto LABEL_223;
              v84 = 0;
              while (1)
              {
                v285 = v84;
                if (v84 == 10000)
                {
LABEL_409:
                  *__error() = 79;
LABEL_410:
                  free(v299);
                  v22 = v319;
                  goto LABEL_411;
                }
                if (cdf_read_sector((uint64_t)v341, (uint64_t)v299, 0, v60, v308, v54) != v60)
                  goto LABEL_410;
                v85 = (v60 >> 2) - 1;
                if (v60 >> 2 != 1)
                  break;
LABEL_196:
                v84 = v285 + 1;
                LOBYTE(v57) = v308;
                if (v285 + 1 < v55)
                {
                  v54 = *((_DWORD *)v299 + (v60 >> 2) - 1);
                  if ((v54 & 0x80000000) == 0)
                    continue;
                }
                goto LABEL_223;
              }
              if (v289 >= j)
                v86 = v289 - j;
              else
                v86 = 0;
              v87 = v60 * j;
              v88 = (int *)v299;
              while (1)
              {
                v90 = *v88++;
                v89 = v90;
                if (v90 < 0)
                  break;
                if (!v86)
                  goto LABEL_409;
                if (cdf_read_sector((uint64_t)v341, (uint64_t)v314, v87, v60, v308, v89) != v60)
                  goto LABEL_410;
                ++j;
                --v86;
                v87 += v60;
                if (!--v85)
                  goto LABEL_196;
              }
            }
            LOBYTE(v57) = v308;
LABEL_223:
            v340 = j;
            free(v299);
            v337 = 0;
            v103 = v292;
            v104 = cdf_count_chain(&v339, v292, v60);
            v338 = v104;
            if (v104 == -1)
            {
              v106 = 0;
LABEL_403:
              v8 = v296;
              v22 = v319;
              *__error() = 79;
LABEL_408:
              free(v106);
              v328 = "Can't read SSAT";
              free(v339);
              goto LABEL_144;
            }
            v105 = v104;
            v106 = malloc_type_calloc(v104, v60, 0x9D4F84DDuLL);
            v337 = (const char *)v106;
            if (!v106)
            {
LABEL_407:
              v8 = v296;
              v22 = v319;
              goto LABEL_408;
            }
            v107 = v307;
            if ((v292 & 0x80000000) == 0)
            {
              v108 = 0;
              v109 = 10000;
              while (v109 && v105)
              {
                if (cdf_read_sector((uint64_t)v341, (uint64_t)v106, v108, v60, v57, v103) != v60)
                  goto LABEL_407;
                v103 = *((_DWORD *)v314 + v103);
                --v105;
                v108 += v60;
                --v109;
                v107 = v307;
                if ((v103 & 0x80000000) != 0)
                  goto LABEL_231;
              }
              goto LABEL_403;
            }
LABEL_231:
            v110 = v107;
            v111 = cdf_count_chain(&v339, v107, v60);
            if (v111 != -1)
            {
              v112 = v111;
              v113 = v60 >> 7;
              v330 = (v60 >> 7) * v111;
              v290 = v330;
              v329 = (unsigned __int8 *)malloc_type_calloc(v330, 0x88uLL, 0x9D4F84DDuLL);
              v293 = v329;
              if (v329)
              {
                v286 = v106;
                v114 = (char *)malloc_type_malloc(v60, 0xF5397DBuLL);
                if (v114)
                {
                  v115 = v114;
                  if (v112)
                  {
                    v116 = 0;
                    v117 = 0;
                    if (v113 <= 1)
                      v118 = 1;
                    else
                      v118 = v60 >> 7;
                    v287 = v114 + 124;
                    v119 = v293 + 128;
                    v302 = v118;
                    do
                    {
                      if (v116 >> 4 > 0x270
                        || cdf_read_sector((uint64_t)v341, (uint64_t)v115, 0, v60, v308, v110) != v60)
                      {
                        free(v293);
                        free(v115);
                        *__error() = 79;
                        goto LABEL_510;
                      }
                      if (v308 >= 7u)
                      {
                        v121 = v119;
                        v122 = v287;
                        v123 = v302;
                        do
                        {
                          v124 = *(_OWORD *)(v122 - 31);
                          v125 = *(_OWORD *)(v122 - 27);
                          v126 = *(_OWORD *)(v122 - 19);
                          *((_OWORD *)v121 - 6) = *(_OWORD *)(v122 - 23);
                          *((_OWORD *)v121 - 5) = v126;
                          *((_OWORD *)v121 - 8) = v124;
                          *((_OWORD *)v121 - 7) = v125;
                          *((_WORD *)v121 - 32) = *((_WORD *)v122 - 30);
                          *((_BYTE *)v121 - 62) = *((_BYTE *)v122 - 58);
                          *((_BYTE *)v121 - 61) = *((_BYTE *)v122 - 57);
                          *(v121 - 15) = *(v122 - 14);
                          *(v121 - 14) = *(v122 - 13);
                          *(v121 - 13) = *(v122 - 12);
                          *((_OWORD *)v121 - 3) = *(_OWORD *)(v122 - 11);
                          *(v121 - 8) = *(v122 - 7);
                          *((_QWORD *)v121 - 3) = *((_QWORD *)v122 - 3);
                          *((_QWORD *)v121 - 2) = *((_QWORD *)v122 - 2);
                          *(v121 - 2) = *(v122 - 2);
                          *(v121 - 1) = *(v122 - 1);
                          v127 = *v122;
                          v122 += 32;
                          *v121 = v127;
                          v121 += 34;
                          --v123;
                        }
                        while (v123);
                        v120 = v302;
                      }
                      else
                      {
                        v120 = 0;
                      }
                      v110 = *((_DWORD *)v314 + v110);
                      ++v117;
                      v116 = v120 + 1;
                      v119 += 34 * v113;
                    }
                    while (v117 != v112);
                    free(v115);
                    v128 = v290;
                    if (v290)
                    {
                      v128 = 0;
                      v129 = v293 + 66;
                      while (1)
                      {
                        v130 = *v129;
                        v129 += 136;
                        if (v130 == 5)
                          break;
                        if (v290 == ++v128)
                          goto LABEL_552;
                      }
                    }
                  }
                  else
                  {
                    free(v114);
                    v128 = 0;
                  }
                  if (v128 == v290)
                  {
LABEL_552:
                    v272 = 0;
                  }
                  else
                  {
                    v272 = (uint64_t)&v293[136 * v128];
                    v273 = *(_DWORD *)(v272 + 120);
                    if ((v273 & 0x80000000) == 0)
                    {
                      if (cdf_read_long_sector_chain((uint64_t)v341, (uint64_t)v342, &v339, v273, *(unsigned int *)&v293[136 * v128 + 124], (uint64_t)v335) == -1)
                      {
                        v328 = "Cannot read short stream";
                        v23 = -1;
LABEL_590:
                        free(v293);
                        v106 = v286;
LABEL_512:
                        free(v106);
                        free(v314);
                        v8 = v296;
                        v22 = v319;
                        if (v23 == -1)
                        {
LABEL_144:
                          v63 = *(_DWORD *)(a1 + 68);
                          if ((v63 & 0x410) != 0)
                          {
                            if ((v63 & 0x10) != 0)
                            {
                              v64 = "application/CDFV2";
                              goto LABEL_174;
                            }
                          }
                          else
                          {
                            if (file_printf(a1, "Composite Document File V2 Document", (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8, v284) == -1)
                            {
LABEL_199:
                              v23 = -1;
                              goto LABEL_123;
                            }
                            if (*v328)
                            {
                              v284 = (char)v328;
                              v64 = ", %s";
LABEL_174:
                              if (file_printf(a1, v64, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8, v284) != -1)
                                goto LABEL_175;
                              goto LABEL_199;
                            }
                          }
LABEL_175:
                          v23 = 1;
                        }
LABEL_123:
                        v21 = *(_DWORD *)(a1 + 68);
                        if ((v21 & 1) != 0)
                        {
                          fprintf((FILE *)*MEMORY[0x24BDAC8D8], "[try cdf %d]\n", v23);
                          v21 = *(_DWORD *)(a1 + 68);
                        }
                        if (v23)
                        {
                          if ((v21 & 0x20) == 0)
                            goto LABEL_127;
                          if (file_printf(a1, "\n- ", (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8, v284) == -1)
                            v20 = -1;
                          v21 = *(_DWORD *)(a1 + 68);
                        }
LABEL_150:
                        v16 = 0;
                        if (a2 == -1 || v8 < 6 || (v21 & 0x10000) != 0)
                          goto LABEL_266;
                        v65 = (void **)file_push_buffer(a1);
                        if (!v65)
                          return 0xFFFFFFFFLL;
                        v66 = v65;
                        v318 = v22;
                        v20 = 0;
                        v67 = LODWORD(v322[0]);
                        v68 = v322[19];
                        v69 = v323;
                        LODWORD(v342[0]) = 0;
                        if ((*(_DWORD *)(a1 + 68) & 0x1000800) != 0)
                          goto LABEL_263;
                        memset(__buf, 0, 144);
                        if (*(_BYTE *)v322[19] != 127)
                          goto LABEL_262;
                        v70 = *(unsigned __int8 *)(v322[19] + 1);
                        if (v70 != 79 && v70 != 69)
                          goto LABEL_262;
                        if (__PAIR64__(*(unsigned __int8 *)(v322[19] + 3), *(unsigned __int8 *)(v322[19] + 2)) != 0x460000004CLL)
                          goto LABEL_262;
                        if (lseek(v322[0], 0, 0) == -1 && *__error() == 29)
                          v67 = file_pipe2file();
                        if ((_DWORD)v67 != -1)
                        {
                          if (v322[13])
                          {
                            v78 = &v322[1];
                            goto LABEL_253;
                          }
                          v78 = __buf;
                          if (fstat(v67, (stat *)__buf) != -1)
                          {
LABEL_253:
                            if (*((_QWORD *)v78 + 12))
                              v131 = 1;
                            else
                              v131 = (*((_WORD *)v78 + 2) & 0xF000) == 0x8000;
                            if (v131)
                              v132 = *((_QWORD *)v78 + 12);
                            else
                              v132 = -1;
                            v133 = *(unsigned __int8 *)(v68 + 4);
                            if (v133 != 2)
                            {
                              if (v133 != 1)
                              {
                                v200 = file_printf(a1, ", unknown class %d", v72, v73, v74, v75, v76, v77, *(_BYTE *)(v68 + 4));
                                v16 = (void *)file_pop_buffer(a1, v66);
                                if (v200 == -1)
                                  v20 = -1;
                                else
                                  v20 = 0;
                                if (v200 != -1)
                                {
LABEL_264:
                                  v21 = *(_DWORD *)(a1 + 68);
                                  v22 = v318;
                                  if ((v21 & 1) != 0)
                                  {
                                    fprintf((FILE *)*MEMORY[0x24BDAC8D8], "[try elf %d]\n", v23);
                                    v21 = *(_DWORD *)(a1 + 68);
                                  }
LABEL_266:
                                  if ((v21 & 0x4000) == 0)
                                  {
                                    v23 = file_softmagic((uint64_t *)a1, (__int128 *)v322, 0, 0, 0x20u, v22);
                                    if ((*(_BYTE *)(a1 + 68) & 1) != 0)
                                      fprintf((FILE *)*MEMORY[0x24BDAC8D8], "[try softmagic %d]\n", v23);
                                    if (v23 == 1 && v16)
                                    {
                                      if (file_printf(a1, "%s", (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8, (char)v16) == -1)
                                      {
LABEL_41:
                                        v23 = 1;
                                        goto LABEL_329;
                                      }
                                      v134 = *(_DWORD *)(a1 + 68);
                                    }
                                    else
                                    {
                                      v134 = *(_DWORD *)(a1 + 68);
                                      if (!v23)
                                      {
                                        if ((v134 & 0x20000) != 0)
                                        {
LABEL_338:
                                          v17 = "data";
LABEL_10:
                                          v18 = *(_DWORD *)(a1 + 68);
                                          if ((v18 & 0x410) != 0)
                                          {
                                            if ((v18 & 0x10) != 0)
                                            {
                                              v19 = "octet-stream";
                                              if (!v8)
                                                v19 = "x-empty";
                                              if (file_printf(a1, "application/%s", (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8, (char)v19) == -1)
                                              {
                                                v23 = 1;
                                                v20 = -1;
                                                goto LABEL_329;
                                              }
                                            }
                                            v20 = 1;
                                            goto LABEL_41;
                                          }
                                          if ((v18 & 0x800) != 0)
                                          {
                                            v24 = "UNKNUNKN";
                                          }
                                          else
                                          {
                                            if ((v18 & 0x1000000) == 0)
                                            {
                                              if (file_printf(a1, "%s", (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8, (char)v17) == -1)v20 = -1;
                                              else
                                                v20 = 0;
                                              goto LABEL_41;
                                            }
                                            v24 = "???";
                                          }
                                          if (file_printf(a1, v24, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8, v284) == -1)v20 = -1;
                                          else
                                            v20 = 1;
                                          goto LABEL_41;
                                        }
                                        goto LABEL_279;
                                      }
                                    }
                                    if ((v134 & 0x20) == 0)
                                      goto LABEL_329;
                                    if (file_printf(a1, "\n- ", (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8, v284) == -1)v20 = -1;
                                    v21 = *(_DWORD *)(a1 + 68);
                                  }
                                  if ((v21 & 0x20000) != 0)
                                    goto LABEL_328;
LABEL_279:
                                  v320 = v22;
                                  v335[0] = 0;
                                  v331 = 0;
                                  v341[0] = 0;
                                  v339 = 0;
                                  v337 = 0;
                                  v135 = v322[0];
                                  v342[6] = *(_OWORD *)((char *)&v322[12] + 4);
                                  v342[7] = *(_OWORD *)((char *)&v322[14] + 4);
                                  v342[8] = *(_OWORD *)((char *)&v322[16] + 4);
                                  LODWORD(v342[9]) = HIDWORD(v322[18]);
                                  v342[2] = *(_OWORD *)((char *)&v322[4] + 4);
                                  v342[3] = *(_OWORD *)((char *)&v322[6] + 4);
                                  v342[4] = *(_OWORD *)((char *)&v322[8] + 4);
                                  v342[5] = *(_OWORD *)((char *)&v322[10] + 4);
                                  v136 = v322[19];
                                  v137 = v323;
                                  v342[0] = *(_OWORD *)((char *)v322 + 4);
                                  v342[1] = *(_OWORD *)((char *)&v322[2] + 4);
                                  while (v137 >= 2)
                                  {
                                    v138 = v137--;
                                    if (*(_BYTE *)(v322[19] + v138 - 1))
                                      goto LABEL_284;
                                  }
                                  v138 = v323 != 0;
LABEL_284:
                                  v139 = v138 + (v138 & ((v323 & 1) == 0));
                                  if (!file_encoding(a1, (unsigned __int8 *)v322[19], v139, v335, (uint64_t *)&v331, v341, (const char **)&v339, &v337))
                                  {
                                    v23 = 0;
                                    goto LABEL_326;
                                  }
                                  v140 = (unint64_t *)v335[0];
                                  v141 = v331;
                                  v142 = (char)v341[0];
                                  v143 = v337;
                                  *(_OWORD *)v345 = 0u;
                                  v344 = 0u;
                                  v144 = *(_DWORD *)(a1 + 68);
                                  v145 = v144 & 0x410;
                                  memset(__buf, 0, sizeof(__buf));
                                  do
                                  {
                                    if (v139 < 2)
                                    {
                                      v148 = 0;
                                      goto LABEL_324;
                                    }
                                    v146 = v139--;
                                  }
                                  while (!*(_BYTE *)(v136 - 1 + v146));
                                  v147 = 0;
                                  v148 = 0;
                                  v23 = -1;
                                  v149 = v144;
                                  if (!v331 || (v144 & 0x4000) != 0)
                                    goto LABEL_323;
                                  v309 = (unint64_t *)v335[0];
                                  v315 = v144 & 0x410;
                                  v303 = v144;
                                  v297 = v337;
                                  v300 = (char)v341[0];
                                  v150 = 6 * (_QWORD)v331;
                                  v151 = (char *)v331;
                                  v152 = (char *)malloc_type_malloc(6 * (_QWORD)v331, 0x14BAA315uLL);
                                  v148 = v152;
                                  if (!v152)
                                  {
                                    v159 = __error();
                                    file_error(a1, *v159, "cannot allocate %zu bytes", v160, v161, v162, v163, v164, v150);
LABEL_321:
                                    v23 = -1;
                                    goto LABEL_325;
                                  }
                                  v153 = &v152[v150];
                                  v154 = v309;
                                  v155 = v151;
                                  v156 = v152;
                                  do
                                  {
                                    v157 = *v154;
                                    if (*v154 > 0x7F)
                                    {
                                      if (v157 > 0x7FF)
                                      {
                                        if (v157 >> 16)
                                        {
                                          if (v157 >> 21)
                                          {
                                            if (v157 >> 26)
                                            {
                                              v23 = -1;
                                              if (v157 >> 31 || v153 - v156 < 6)
                                                goto LABEL_325;
                                              *v156 = (v157 >> 30) - 4;
                                              v156[1] = *((_BYTE *)v154 + 3) & 0x3F | 0x80;
                                              v156[2] = (*(_DWORD *)v154 >> 18) & 0x3F | 0x80;
                                              v156[3] = (*(_DWORD *)v154 >> 12) & 0x3F | 0x80;
                                              v156[4] = (*(_DWORD *)v154 >> 6) & 0x3F | 0x80;
                                              v156[5] = *(_BYTE *)v154 & 0x3F | 0x80;
                                              v156 += 6;
                                            }
                                            else
                                            {
                                              if (v153 - v156 < 5)
                                                goto LABEL_321;
                                              *v156 = BYTE3(v157) - 8;
                                              v156[1] = (*(_DWORD *)v154 >> 18) & 0x3F | 0x80;
                                              v156[2] = (*(_DWORD *)v154 >> 12) & 0x3F | 0x80;
                                              v156[3] = (*(_DWORD *)v154 >> 6) & 0x3F | 0x80;
                                              v156[4] = *(_BYTE *)v154 & 0x3F | 0x80;
                                              v156 += 5;
                                            }
                                          }
                                          else
                                          {
                                            if (v153 - v156 < 4)
                                              goto LABEL_321;
                                            *v156 = (v157 >> 18) - 16;
                                            v156[1] = (*(_DWORD *)v154 >> 12) & 0x3F | 0x80;
                                            v156[2] = (*(_DWORD *)v154 >> 6) & 0x3F | 0x80;
                                            v156[3] = *(_BYTE *)v154 & 0x3F | 0x80;
                                            v156 += 4;
                                          }
                                        }
                                        else
                                        {
                                          if (v153 - v156 < 3)
                                            goto LABEL_321;
                                          *v156 = (v157 >> 12) - 32;
                                          v156[1] = (*(_DWORD *)v154 >> 6) & 0x3F | 0x80;
                                          v156[2] = *(_BYTE *)v154 & 0x3F | 0x80;
                                          v156 += 3;
                                        }
                                      }
                                      else
                                      {
                                        if (v153 - v156 < 2)
                                          goto LABEL_321;
                                        *v156 = (v157 >> 6) - 64;
                                        v156[1] = *(_BYTE *)v154 & 0x3F | 0x80;
                                        v156 += 2;
                                      }
                                    }
                                    else
                                    {
                                      if (v153 - v156 < 1)
                                        goto LABEL_321;
                                      *v156++ = v157;
                                    }
                                    ++v154;
                                    --v155;
                                  }
                                  while (v155);
                                  v294 = v151;
                                  *(_DWORD *)__buf = v135;
                                  *(_OWORD *)&__buf[88] = *(_OWORD *)((char *)&v342[5] + 4);
                                  *(_OWORD *)&__buf[104] = *(_OWORD *)((char *)&v342[6] + 4);
                                  *(_OWORD *)&__buf[120] = *(_OWORD *)((char *)&v342[7] + 4);
                                  *(_OWORD *)&__buf[136] = *(_OWORD *)((char *)&v342[8] + 4);
                                  *(_OWORD *)&__buf[24] = *(_OWORD *)((char *)&v342[1] + 4);
                                  *(_OWORD *)&__buf[40] = *(_OWORD *)((char *)&v342[2] + 4);
                                  *(_OWORD *)&__buf[56] = *(_OWORD *)((char *)&v342[3] + 4);
                                  *(_OWORD *)&__buf[72] = *(_OWORD *)((char *)&v342[4] + 4);
                                  *(_OWORD *)&__buf[8] = *(_OWORD *)((char *)v342 + 4);
                                  *(_QWORD *)&__buf[152] = v152;
                                  v344 = (unint64_t)(v156 - v152);
                                  v345[1] = 0;
                                  v345[0] = 0;
                                  v158 = file_softmagic((uint64_t *)a1, (__int128 *)__buf, 0, 0, 0x40u, v320);
                                  v147 = v158 != 0;
                                  if (v158)
                                    v23 = v158;
                                  else
                                    v23 = -1;
                                  free(v345[0]);
                                  v149 = *(_DWORD *)(a1 + 68);
                                  if ((v149 & 0x1000800) != 0)
                                  {
                                    v23 = v23 != -1;
                                    goto LABEL_325;
                                  }
                                  v143 = v297;
                                  v142 = v300;
                                  LOBYTE(v144) = v303;
                                  v145 = v315;
                                  v140 = v309;
                                  v141 = v294;
LABEL_323:
                                  if ((v149 & 0x1000800) != 0)
                                  {
LABEL_324:
                                    v23 = 0;
                                    goto LABEL_325;
                                  }
                                  v295 = v147;
                                  v321 = v148;
                                  v298 = v8;
                                  v301 = v142;
                                  v304 = v144;
                                  v316 = v145;
                                  v310 = v149;
                                  v166 = 0;
                                  v167 = 0;
                                  if (v141)
                                  {
                                    v168 = 0;
                                    v169 = 0;
                                    v170 = 0;
                                    v171 = 0;
                                    v172 = 0;
                                    v173 = 0;
                                    v174 = 0;
                                    v175 = -1;
                                    do
                                    {
                                      v176 = v140[v174];
                                      v177 = v168 + v171;
                                      v178 = v170 + v171;
                                      v179 = v169 + !v171;
                                      if (v176 == 10)
                                      {
                                        v170 = v178;
                                        v169 = v179;
                                        v175 = v174;
                                      }
                                      else
                                      {
                                        v168 = v177;
                                      }
                                      v180 = v176 == 133;
                                      if (v176 == 133)
                                        ++v167;
                                      v171 = v176 == 13;
                                      if (v176 == 13)
                                        v180 = 1;
                                      if (v180)
                                        v175 = v174;
                                      if (v174 > v175 + 300)
                                        v166 = 1;
                                      if (v176 == 27)
                                        v173 = 1;
                                      if (v176 == 8)
                                        v172 = 1;
                                      ++v174;
                                    }
                                    while (v141 != (void *)v174);
                                    v288 = v172;
                                    v291 = v173;
                                    if (v176 == 13 && v146 < *(_QWORD *)(a1 + 280))
                                      ++v168;
                                  }
                                  else
                                  {
                                    v169 = 0;
                                    v170 = 0;
                                    v288 = 0;
                                    v291 = 0;
                                    v168 = 0;
                                  }
                                  v181 = (char)v143;
                                  if (!strcmp(v143, "binary"))
                                  {
                                    v23 = 0;
                                    goto LABEL_370;
                                  }
                                  v188 = *(_QWORD *)(a1 + 40);
                                  if (v316)
                                  {
                                    v8 = v298;
                                    v148 = v321;
                                    if ((v304 & 0x10) != 0)
                                    {
                                      if (v188)
                                      {
                                        if ((v310 & 0x20) == 0 || !v295)
                                          goto LABEL_406;
                                        v189 = "\n- ";
                                      }
                                      else
                                      {
                                        v189 = "text/plain";
                                      }
LABEL_405:
                                      if (file_printf(a1, v189, v182, v183, v184, v185, v186, v187, v284) != -1)
                                        goto LABEL_406;
LABEL_325:
                                      free(v148);
LABEL_326:
                                      free(v335[0]);
                                      if ((*(_BYTE *)(a1 + 68) & 1) != 0)
                                        fprintf((FILE *)*MEMORY[0x24BDAC8D8], "[try ascmagic %d]\n", v23);
LABEL_328:
                                      if (v23)
                                        goto LABEL_329;
                                      goto LABEL_338;
                                    }
                                    goto LABEL_406;
                                  }
                                  if (v188)
                                  {
                                    v190 = file_replace(a1, " text$");
                                    if (v190 == -1)
                                      goto LABEL_370;
                                    if (!v190)
                                    {
                                      v191 = file_replace(a1, " text executable$");
                                      if (v191 == -1)
                                        goto LABEL_370;
                                      if (v191)
                                      {
                                        v317 = 0;
LABEL_378:
                                        if (file_printf(a1, "%s", v182, v183, v184, v185, v186, v187, v301) == -1|| file_printf(a1, " %s", v192, v193, v194, v195, v196, v197, v181) == -1
                                          || (v317 & 1) == 0
                                          && file_printf(a1, " executable", v182, v183, v184, v185, v186, v187, v284) == -1|| v166&& file_printf(a1, ", with very long lines", v182, v183, v184, v185, v186, v187,
                                                             v284) == -1)
                                        {
                                          goto LABEL_370;
                                        }
                                        v198 = v170 | v168 | v167 | v169;
                                        v199 = v198 == 0;
                                        if (v198 && !v170 && !v168 && !v167)
                                        {
LABEL_388:
                                          if (!v291
                                            || file_printf(a1, ", with escape sequences", v182, v183, v184, v185, v186, v187, v284) != -1)
                                          {
                                            v8 = v298;
                                            v148 = v321;
                                            if (v288)
                                            {
                                              v189 = ", with overstriking";
                                              goto LABEL_405;
                                            }
LABEL_406:
                                            v23 = 1;
                                            goto LABEL_325;
                                          }
LABEL_370:
                                          v8 = v298;
                                          v148 = v321;
                                          goto LABEL_325;
                                        }
                                        if (file_printf(a1, ", with", v182, v183, v184, v185, v186, v187, v284) == -1)goto LABEL_370;
                                        if (v199)
                                        {
                                          v233 = " no";
                                        }
                                        else
                                        {
                                          if (v170)
                                          {
                                            if (file_printf(a1, " CRLF", v227, v228, v229, v230, v231, v232, v284) == -1)goto LABEL_370;
                                            if (!v168 && !v169 && !v167)
                                              goto LABEL_584;
                                            if (file_printf(a1, ",", v227, v228, v229, v230, v231, v232, v284) == -1)goto LABEL_370;
                                          }
                                          if (v168)
                                          {
                                            if (file_printf(a1, " CR", v227, v228, v229, v230, v231, v232, v284) == -1)goto LABEL_370;
                                            if (!(v169 | v167))
                                              goto LABEL_584;
                                            if (file_printf(a1, ",", v227, v228, v229, v230, v231, v232, v284) == -1)goto LABEL_370;
                                          }
                                          if (v169)
                                          {
                                            if (file_printf(a1, " LF", v227, v228, v229, v230, v231, v232, v284) == -1)goto LABEL_370;
                                            if (!v167)
                                              goto LABEL_584;
                                            if (file_printf(a1, ",", v227, v228, v229, v230, v231, v232, v284) == -1)goto LABEL_370;
                                          }
                                          else if (!v167)
                                          {
LABEL_584:
                                            if (file_printf(a1, " line terminators", v227, v228, v229, v230, v231, v232, v284) == -1)goto LABEL_370;
                                            goto LABEL_388;
                                          }
                                          v233 = " NEL";
                                        }
                                        if (file_printf(a1, v233, v227, v228, v229, v230, v231, v232, v284) == -1)goto LABEL_370;
                                        goto LABEL_584;
                                      }
                                      if (file_printf(a1, ", ", v182, v183, v184, v185, v186, v187, v284) == -1)
                                        goto LABEL_370;
                                    }
                                  }
                                  v317 = 1;
                                  goto LABEL_378;
                                }
LABEL_394:
                                free(v16);
                                v16 = 0;
                                goto LABEL_264;
                              }
                              if (v69 < 0x35)
                              {
LABEL_262:
                                v20 = 0;
LABEL_263:
                                v16 = (void *)file_pop_buffer(a1, v66);
                                goto LABEL_264;
                              }
                              v201 = *(unsigned __int8 *)(v68 + 5);
                              v202 = *(unsigned __int16 *)(v68 + 18);
                              v203 = *(_DWORD *)(v68 + 28);
                              v204 = *(_DWORD *)(v68 + 32);
                              v205 = *(unsigned __int16 *)(v68 + 42);
                              v206 = *(unsigned __int16 *)(v68 + 44);
                              v207 = *(unsigned __int16 *)(v68 + 46);
                              v208 = *(unsigned __int16 *)(v68 + 48);
                              v209 = *(unsigned __int16 *)(v68 + 50);
                              v210 = bswap32(*(unsigned __int16 *)(v68 + 16)) >> 16;
                              if (v201 == 1)
                                LOWORD(v210) = *(_WORD *)(v68 + 16);
                              v211 = *(unsigned __int16 *)(a1 + 272);
                              LOWORD(v335[0]) = *(_WORD *)(a1 + 272);
                              v311 = v209;
                              if ((unsigned __int16)v210 - 2 >= 2)
                              {
                                if ((unsigned __int16)v210 != 4)
                                {
                                  if ((unsigned __int16)v210 != 1)
                                    goto LABEL_544;
                                  v212 = v202;
                                  LODWORD(v213) = __rev16(v208);
                                  if (v201 == 1)
                                    v213 = v208;
                                  else
                                    v213 = v213;
                                  v305 = v213;
                                  goto LABEL_450;
                                }
                                v249 = __rev16(v206);
                                if (v201 == 1)
                                  v75 = v206;
                                else
                                  v75 = v249;
                                if (v75 <= *(unsigned __int16 *)(a1 + 270))
                                {
                                  LODWORD(v342[0]) = 2048;
                                  v250 = bswap32(v203);
                                  if (v201 == 1)
                                    v251 = v203;
                                  else
                                    v251 = v250;
                                  v252 = __rev16(v205);
                                  if (v201 == 1)
                                    v253 = v205;
                                  else
                                    v253 = v252;
                                  v246 = dophn_core(a1, 1, v201 != 1, v67, v251, v75, v253, v132, (int *)v342, v335);
                                  goto LABEL_542;
                                }
                                goto LABEL_484;
                              }
                              v234 = __rev16(v206);
                              if (v201 == 1)
                                v75 = v206;
                              else
                                v75 = v234;
                              if (v75 <= *(unsigned __int16 *)(a1 + 270))
                              {
                                LODWORD(v235) = __rev16(v208);
                                if (v201 == 1)
                                  v235 = v208;
                                else
                                  v235 = v235;
                                v305 = v235;
                                if (v235 <= *(unsigned __int16 *)(a1 + 268))
                                {
                                  v212 = v202;
                                  v236 = bswap32(v203);
                                  if (v201 == 1)
                                    v237 = v203;
                                  else
                                    v237 = v236;
                                  v238 = __rev16(v205);
                                  if (v201 == 1)
                                    v239 = v205;
                                  else
                                    v239 = v238;
                                  if (dophn_exec(a1, 1, v201 != 1, v67, v237, v75, v239, v132, v235, (int *)v342, v335) == -1)goto LABEL_393;
LABEL_450:
                                  if (v305 <= *(unsigned __int16 *)(a1 + 268))
                                  {
                                    v240 = bswap32(v204);
                                    if (v201 == 1)
                                      v241 = v204;
                                    else
                                      v241 = v240;
                                    v242 = __rev16(v207);
                                    if (v201 == 1)
                                      v243 = v207;
                                    else
                                      v243 = v242;
                                    v244 = __rev16(v212);
                                    if (v201 == 1)
                                      v244 = v212;
                                    v245 = __rev16(v311);
                                    if (v201 == 1)
                                      v245 = v311;
                                    v246 = doshn(a1, 1, v201 != 1, v67, v241, v305, v243, v132, v244, v245, (int *)v342, v335);
                                    goto LABEL_542;
                                  }
LABEL_529:
                                  if ((*(_WORD *)(a1 + 68) & 0x410) == 0)
                                  {
                                    v255 = file_printf(a1, ", too many %s (%u)", v72, v73, v74, v75, v76, v77, (char)"section headers");
                                    goto LABEL_548;
                                  }
                                  goto LABEL_549;
                                }
LABEL_491:
                                if ((*(_WORD *)(a1 + 68) & 0x410) == 0)
                                {
                                  v257 = "section";
LABEL_547:
                                  v255 = file_printf(a1, ", too many %s (%u)", v72, v73, v74, v75, v76, v77, (char)v257);
LABEL_548:
                                  if (v255 != -1)
                                    goto LABEL_549;
                                  goto LABEL_393;
                                }
LABEL_549:
                                v20 = 1;
                                goto LABEL_263;
                              }
LABEL_466:
                              if ((*(_WORD *)(a1 + 68) & 0x410) != 0)
                                goto LABEL_549;
                              v248 = "program";
LABEL_486:
                              v255 = file_printf(a1, ", too many %s (%u)", v72, v73, v74, v75, v76, v77, (char)v248);
                              goto LABEL_548;
                            }
                            if (v69 < 0x41)
                            {
                              v20 = 0;
                              goto LABEL_263;
                            }
                            v214 = *(unsigned __int8 *)(v68 + 5);
                            v215 = *(unsigned __int16 *)(v68 + 18);
                            v216 = *(_QWORD *)(v68 + 32);
                            v217 = *(_QWORD *)(v68 + 40);
                            v218 = *(unsigned __int16 *)(v68 + 54);
                            v219 = *(unsigned __int16 *)(v68 + 56);
                            v220 = *(unsigned __int16 *)(v68 + 58);
                            v221 = *(unsigned __int16 *)(v68 + 60);
                            v222 = *(unsigned __int16 *)(v68 + 62);
                            v223 = bswap32(*(unsigned __int16 *)(v68 + 16)) >> 16;
                            if (v214 == 1)
                              LOWORD(v223) = *(_WORD *)(v68 + 16);
                            v211 = *(unsigned __int16 *)(a1 + 272);
                            LOWORD(v335[0]) = *(_WORD *)(a1 + 272);
                            v312 = v222;
                            if ((unsigned __int16)v223 - 2 < 2)
                            {
                              v247 = __rev16(v219);
                              if (v214 == 1)
                                v75 = v219;
                              else
                                v75 = v247;
                              if (v75 > *(unsigned __int16 *)(a1 + 270))
                                goto LABEL_466;
                              LODWORD(v256) = __rev16(v221);
                              if (v214 == 1)
                                v256 = v221;
                              else
                                v256 = v256;
                              v306 = v256;
                              if (v256 > *(unsigned __int16 *)(a1 + 268))
                                goto LABEL_491;
                              v224 = v220;
                              v225 = v215;
                              v262 = bswap64(v216);
                              if (v214 == 1)
                                v263 = v216;
                              else
                                v263 = v262;
                              v264 = __rev16(v218);
                              if (v214 == 1)
                                v265 = v218;
                              else
                                v265 = v264;
                              if (dophn_exec(a1, 2, v214 != 1, v67, v263, v75, v265, v132, v256, (int *)v342, v335) == -1)goto LABEL_393;
                            }
                            else
                            {
                              if ((unsigned __int16)v223 == 4)
                              {
                                v254 = __rev16(v219);
                                if (v214 == 1)
                                  v75 = v219;
                                else
                                  v75 = v254;
                                if (v75 <= *(unsigned __int16 *)(a1 + 270))
                                {
                                  LODWORD(v342[0]) = 2048;
                                  v258 = bswap64(v216);
                                  if (v214 == 1)
                                    v259 = v216;
                                  else
                                    v259 = v258;
                                  v260 = __rev16(v218);
                                  if (v214 == 1)
                                    v261 = v218;
                                  else
                                    v261 = v260;
                                  v246 = dophn_core(a1, 2, v214 != 1, v67, v259, v75, v261, v132, (int *)v342, v335);
                                  goto LABEL_542;
                                }
LABEL_484:
                                if ((*(_WORD *)(a1 + 68) & 0x410) != 0)
                                  goto LABEL_549;
                                v248 = "program headers";
                                goto LABEL_486;
                              }
                              if ((unsigned __int16)v223 != 1)
                                goto LABEL_544;
                              v224 = v220;
                              v225 = v215;
                              LODWORD(v226) = __rev16(v221);
                              if (v214 == 1)
                                v226 = v221;
                              else
                                v226 = v226;
                              v306 = v226;
                            }
                            if (v306 <= *(unsigned __int16 *)(a1 + 268))
                            {
                              v266 = bswap64(v217);
                              if (v214 == 1)
                                v267 = v217;
                              else
                                v267 = v266;
                              v268 = __rev16(v224);
                              if (v214 == 1)
                                v269 = v224;
                              else
                                v269 = v268;
                              v270 = __rev16(v225);
                              if (v214 == 1)
                                v270 = v225;
                              v271 = __rev16(v312);
                              if (v214 == 1)
                                v271 = v312;
                              v246 = doshn(a1, 2, v214 != 1, v67, v267, v306, v269, v132, v270, v271, (int *)v342, v335);
LABEL_542:
                              if (v246 != -1)
                              {
                                v211 = LOWORD(v335[0]);
LABEL_544:
                                if (v211 || (*(_WORD *)(a1 + 68) & 0x410) != 0)
                                  goto LABEL_549;
                                v257 = "notes";
                                goto LABEL_547;
                              }
LABEL_393:
                              v16 = (void *)file_pop_buffer(a1, v66);
                              v20 = -1;
                              goto LABEL_394;
                            }
                            goto LABEL_529;
                          }
                        }
                        file_badread(a1, v71, v72, v73, v74, v75, v76, v77, v284);
                        goto LABEL_393;
                      }
LABEL_557:
                      if (cdf_read_user_stream((uint64_t)v341, (uint64_t)v342, &v339, &v337, v335, (uint64_t *)&v329, "FileHeader", (uint64_t)&v331) == -1)goto LABEL_567;
                      if ((unint64_t)(v334 * v332) < 0x11
                        || (*(_QWORD *)v331 == 0x75636F4420505748
                          ? (v280 = *((_QWORD *)v331 + 1) == 0x6C694620746E656DLL)
                          : (v280 = 0),
                            v280 ? (v281 = *((_BYTE *)v331 + 16) == 101) : (v281 = 0),
                            !v281))
                      {
                        v332 = 0;
                        v333 = 0;
                        v334 = 0;
                        free(v331);
                        v331 = 0;
LABEL_567:
                        if (cdf_read_user_stream((uint64_t)v341, (uint64_t)v342, &v339, &v337, v335, (uint64_t *)&v329, "\x05SummaryInformation", (uint64_t)&v331) == -1)
                        {
                          if (*__error() != 3)
                            v328 = "Cannot read summary info";
                        }
                        else
                        {
                          v23 = cdf_check_summary_info(a1, (uint64_t)v341, (uint64_t)v342, &v339, &v337, v335, (uint64_t *)&v329, (unint64_t *)&v331, v272, &v328);
                          v333 = 0;
                          v334 = 0;
                          v332 = 0;
                          free(v331);
                          v331 = 0;
                          if (v23 > 0)
                            goto LABEL_589;
                        }
                        if (cdf_read_user_stream((uint64_t)v341, (uint64_t)v342, &v339, &v337, v335, (uint64_t *)&v329, "\x05DocumentSummaryInformation", (uint64_t)&v331) == -1)
                        {
                          if (*__error() != 3)
                            v328 = "Cannot read summary info";
                          goto LABEL_577;
                        }
                        v23 = cdf_check_summary_info(a1, (uint64_t)v341, (uint64_t)v342, &v339, &v337, v335, (uint64_t *)&v329, (unint64_t *)&v331, v272, &v328);
                        if (v23 <= 0)
                        {
LABEL_577:
                          v23 = cdf_file_dir_info(a1, (uint64_t *)&v329);
                          if (v23 < 0)
                            v328 = "Cannot read section info";
                        }
LABEL_589:
                        v332 = 0;
                        v333 = 0;
                        v334 = 0;
                        free(v331);
                        v331 = 0;
                        v336 = 0uLL;
                        v335[1] = 0;
                        free(v335[0]);
                        v335[0] = 0;
                        goto LABEL_590;
                      }
                      v282 = *(_DWORD *)(a1 + 68);
                      if ((v282 & 0x410) != 0)
                      {
                        if ((v282 & 0x10) == 0)
                        {
LABEL_588:
                          v23 = 1;
                          goto LABEL_589;
                        }
                        v283 = "application/x-hwp";
                      }
                      else
                      {
                        v283 = "Hangul (Korean) Word Processor File 5.x";
                      }
                      if (file_printf(a1, v283, v274, v275, v276, v277, v278, v279, v284) == -1)
                      {
                        v23 = -1;
                        v8 = v296;
                        v22 = v319;
                        goto LABEL_123;
                      }
                      goto LABEL_588;
                    }
                  }
                  *(_OWORD *)v335 = 0u;
                  v336 = 0u;
                  goto LABEL_557;
                }
                free(v293);
LABEL_510:
                v106 = v286;
              }
            }
            v328 = "Can't read directory";
            v23 = -1;
            goto LABEL_512;
          }
        }
        *__error() = 79;
      }
    }
    v23 = 0;
    goto LABEL_123;
  }
  if ((v21 & 0x20) != 0)
  {
    if (file_printf(a1, "\n- ", (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8, v284) == -1)
      v20 = -1;
    v21 = *(_DWORD *)(a1 + 68);
    goto LABEL_120;
  }
LABEL_127:
  v16 = 0;
LABEL_329:
  v165 = *(_DWORD *)(a1 + 68);
  if ((v165 & 0x400) != 0)
  {
    if ((v165 & 0x10) != 0
      && file_printf(a1, "; charset=", (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8, v284) == -1)
    {
      v20 = -1;
    }
    if (file_printf(a1, "%s", (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8, (char)v326) == -1)
      v20 = -1;
  }
  free(v16);
  free(v324[0]);
  if (v20)
    return v20;
  else
    return v23;
}

_QWORD *file_push_buffer(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  if ((*(_BYTE *)(a1 + 72) & 1) != 0)
    return 0;
  result = malloc_type_malloc(0x18uLL, 0x1010040E2407E0AuLL);
  if (result)
  {
    v3 = *(_QWORD *)(a1 + 40);
    *result = *(_QWORD *)(a1 + 32);
    result[1] = v3;
    *((_DWORD *)result + 4) = *(_DWORD *)(a1 + 56);
    *(_DWORD *)(a1 + 56) = 0;
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 40) = 0;
  }
  return result;
}

uint64_t file_pop_buffer(uint64_t a1, void **a2)
{
  uint64_t v3;
  void *v4;

  if ((*(_BYTE *)(a1 + 72) & 1) != 0)
  {
    free(*a2);
    v3 = 0;
  }
  else
  {
    v3 = *(_QWORD *)(a1 + 32);
    v4 = a2[1];
    *(_QWORD *)(a1 + 32) = *a2;
    *(_QWORD *)(a1 + 40) = v4;
    *(_DWORD *)(a1 + 56) = *((_DWORD *)a2 + 4);
  }
  free(a2);
  return v3;
}

uint64_t file_reset(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  void *v9;
  uint64_t result;
  char v11;

  if (a2 && !*(_QWORD *)a1)
  {
    file_error(a1, 0, "no magic files loaded", a4, a5, a6, a7, a8, v11);
    return 0xFFFFFFFFLL;
  }
  else
  {
    free(*(void **)(a1 + 32));
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 40) = 0;
    v9 = *(void **)(a1 + 48);
    if (v9)
    {
      free(v9);
      *(_QWORD *)(a1 + 48) = 0;
    }
    result = 0;
    *(_DWORD *)(a1 + 72) &= ~1u;
    *(_DWORD *)(a1 + 64) = -1;
  }
  return result;
}

const char *file_getbuffer(uint64_t a1)
{
  const char *result;
  size_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  _BYTE *v11;
  const char *v12;
  const char *v13;
  uint64_t v14;
  size_t v15;
  size_t v16;
  _BYTE *i;
  char v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _BYTE *v25;
  _BYTE *v26;
  unsigned int v27;
  unsigned int v28;
  __darwin_ct_rune_t v29;
  mbstate_t v30;
  uint64_t v31;

  v31 = *MEMORY[0x24BDAC8D0];
  if ((*(_BYTE *)(a1 + 72) & 1) != 0)
    return 0;
  result = *(const char **)(a1 + 32);
  if ((*(_BYTE *)(a1 + 69) & 1) == 0 && result)
  {
    v3 = strlen(result);
    if (v3 >> 62)
    {
      v4 = *__error();
      file_error(a1, v4, "cannot allocate %zu bytes", v5, v6, v7, v8, v9, v3);
      return 0;
    }
    v10 = malloc_type_realloc(*(void **)(a1 + 48), (4 * v3) | 1, 0xDFA9823EuLL);
    if (!v10)
    {
      v19 = *__error();
      file_error(a1, v19, "cannot allocate %zu bytes", v20, v21, v22, v23, v24, (4 * v3) | 1);
      return 0;
    }
    v11 = v10;
    *(_QWORD *)(a1 + 48) = v10;
    v29 = 0;
    memset(&v30, 0, sizeof(v30));
    if (v3)
    {
      v12 = *(const char **)(a1 + 32);
      v13 = &v12[v3];
      v14 = MEMORY[0x24BDAC740];
      while (1)
      {
        v15 = mbrtowc(&v29, v12, v13 - v12, &v30);
        if (v15 > 0xFFFFFFFFFFFFFFFDLL)
          break;
        v16 = v15;
        if (v29 > 0x7F)
        {
          if (!__maskrune(v29, 0x40000uLL))
          {
LABEL_14:
            for (i = v11; v16; --v16)
            {
              *v11 = 92;
              v11[1] = (*v12 >> 6) | 0x30;
              v11[2] = (*v12 >> 3) & 7 | 0x30;
              v18 = *v12++;
              i = v11 + 4;
              v11[3] = v18 & 7 | 0x30;
              v11 += 4;
            }
            goto LABEL_16;
          }
        }
        else if ((*(_DWORD *)(v14 + 4 * v29 + 60) & 0x40000) == 0)
        {
          goto LABEL_14;
        }
        memcpy(v11, v12, v16);
        v12 += v16;
        i = &v11[v16];
LABEL_16:
        v11 = i;
        if (v12 >= v13)
          goto LABEL_22;
      }
      *v11 = 0;
      v25 = *(_BYTE **)(a1 + 48);
      v26 = *(_BYTE **)(a1 + 32);
      v27 = *v26;
      if (*v26)
      {
        do
        {
          if ((v27 & 0x80) != 0)
          {
            if (!__maskrune(v27, 0x40000uLL))
            {
LABEL_28:
              *v25 = 92;
              v25[1] = (*v26 >> 6) | 0x30;
              v25[2] = (*v26 >> 3) & 7 | 0x30;
              v25[3] = *v26 & 7 | 0x30;
              v25 += 4;
              goto LABEL_29;
            }
          }
          else if ((*(_DWORD *)(v14 + 4 * v27 + 60) & 0x40000) == 0)
          {
            goto LABEL_28;
          }
          *v25++ = v27;
LABEL_29:
          v28 = *++v26;
          v27 = v28;
        }
        while (v28);
      }
      *v25 = 0;
    }
    else
    {
      i = v10;
LABEL_22:
      *i = 0;
    }
    return *(const char **)(a1 + 48);
  }
  return result;
}

uint64_t file_check_mem(uint64_t a1, unsigned int a2)
{
  char *v4;
  void *v5;
  uint64_t v6;
  char *v7;
  int *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  if (*(_QWORD *)(a1 + 16) <= (unint64_t)a2)
  {
    *(_QWORD *)(a1 + 16) = a2 + 20;
    v5 = *(void **)(a1 + 24);
    if (v5)
      v4 = (char *)malloc_type_realloc(v5, 16 * (a2 + 20), 0x66DD4FFAuLL);
    else
      v4 = (char *)malloc_type_malloc(16 * (a2 + 20), 0xFB63A30BuLL);
    *(_QWORD *)(a1 + 24) = v4;
    if (!v4)
    {
      v8 = __error();
      file_error(a1, *v8, "cannot allocate %zu bytes", v9, v10, v11, v12, v13, 16 * (a2 + 20));
      return 0xFFFFFFFFLL;
    }
  }
  else
  {
    v4 = *(char **)(a1 + 24);
  }
  v6 = 0;
  v7 = &v4[16 * a2];
  *((_QWORD *)v7 + 1) = 0;
  *((_DWORD *)v7 + 1) = 0;
  return v6;
}

uint64_t file_replace(uint64_t a1, const char *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _OWORD v18[2];
  regex_t v19;
  regmatch_t v20[32];
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  memset(&v19, 0, sizeof(v19));
  memset(v18, 0, sizeof(v18));
  v3 = file_regcomp((uint64_t)v18, a2, 1);
  v4 = v3;
  if ((_DWORD)v3)
  {
    regerror(v3, &v19, (char *)v20, 0x200uLL);
LABEL_7:
    v4 = 0xFFFFFFFFLL;
  }
  else
  {
    v20[0].rm_so = 0;
    v20[0].rm_eo = 0;
    while (!file_regexec((uint64_t)v18, *(const char **)(a1 + 32), 1uLL, v20))
    {
      *(_BYTE *)(*(_QWORD *)(a1 + 32) + v20[0].rm_so) = 0;
      if (file_printf(a1, "%s%s", v5, v6, v7, v8, v9, v10, (char)", ") == -1)
        goto LABEL_7;
      v4 = (v4 + 1);
    }
  }
  file_regfree((uint64_t)v18);
  return v4;
}

uint64_t file_regcomp(uint64_t a1, const char *a2, int a3)
{
  _xlocale *v6;
  locale_t v7;
  uint64_t result;

  v6 = newlocale(2, "C", 0);
  *(_QWORD *)(a1 + 16) = v6;
  if (!v6)
    __assert_rtn("file_regcomp", "funcs.c", 638, "rx->c_lc_ctype != NULL");
  v7 = uselocale(v6);
  *(_QWORD *)(a1 + 8) = v7;
  if (!v7)
    __assert_rtn("file_regcomp", "funcs.c", 640, "rx->old_lc_ctype != NULL");
  *(_QWORD *)a1 = a2;
  result = regcomp((regex_t *)(a1 + 32), a2, a3);
  *(_DWORD *)(a1 + 24) = result;
  return result;
}

uint64_t file_regexec(uint64_t a1, const char *a2, size_t a3, regmatch_t *a4)
{
  if (*(_DWORD *)(a1 + 24))
    __assert_rtn("file_regexec", "funcs.c", 657, "rx->rc == 0");
  if (a3)
  {
    a4->rm_so = 0;
    a4->rm_eo = 0;
  }
  return regexec((const regex_t *)(a1 + 32), a2, a3, a4, 0);
}

uint64_t file_regfree(uint64_t a1)
{
  if (!*(_DWORD *)(a1 + 24))
    MEMORY[0x20BD3DD78](a1 + 32);
  uselocale(*(locale_t *)(a1 + 8));
  return freelocale(*(locale_t *)(a1 + 16));
}

uint64_t file_regerror(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v13[512];
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  regerror(a2, (const regex_t *)(a1 + 32), v13, 0x200uLL);
}

_BYTE *file_printable(_BYTE *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v5;
  BOOL v6;
  _BYTE *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;

  v5 = (unint64_t)&a1[a2 - 1];
  v6 = v5 <= (unint64_t)a1 || a4 < 1;
  v7 = a1;
  if (!v6)
  {
    v8 = a3 + a4;
    v9 = (unint64_t)&a1[a2 - 4];
    v10 = a3 + 1;
    v11 = MEMORY[0x24BDAC740];
    v7 = a1;
    do
    {
      v12 = *(unsigned __int8 *)(v10 - 1);
      if (!*(_BYTE *)(v10 - 1))
        break;
      v13 = *(_BYTE *)(v10 - 1);
      if ((char)v12 < 0)
      {
        if (!__maskrune(v12, 0x40000uLL))
        {
LABEL_11:
          if ((unint64_t)v7 >= v9)
            break;
          *v7 = 92;
          v7[1] = (*(_BYTE *)(v10 - 1) >> 6) | 0x30;
          v7[2] = (*(_BYTE *)(v10 - 1) >> 3) & 7 | 0x30;
          v7[3] = *(_BYTE *)(v10 - 1) & 7 | 0x30;
          v7 += 4;
          continue;
        }
      }
      else if ((*(_DWORD *)(v11 + 4 * v12 + 60) & 0x40000) == 0)
      {
        goto LABEL_11;
      }
      *v7++ = v13;
    }
    while ((unint64_t)v7 < v5 && v10++ < v8);
  }
  *v7 = 0;
  return a1;
}

uint64_t file_parse_guid(const char *a1, uint64_t a2)
{
  if (sscanf(a1, "%8x-%4hx-%4hx-%2hhx%2hhx-%2hhx%2hhx%2hhx%2hhx%2hhx%2hhx", a2, a2 + 4, a2 + 6, a2 + 8, a2 + 9, a2 + 10, a2 + 11, a2 + 12, a2 + 13, a2 + 14, a2 + 15) == 11)return 0;
  else
    return 0xFFFFFFFFLL;
}

uint64_t file_print_guid(char *a1, size_t a2, uint64_t a3)
{
  return snprintf(a1, a2, "%.8X-%.4hX-%.4hX-%.2hhX%.2hhX-%.2hhX%.2hhX%.2hhX%.2hhX%.2hhX%.2hhX", *(_DWORD *)a3, *(unsigned __int16 *)(a3 + 4), *(unsigned __int16 *)(a3 + 6), *(unsigned __int8 *)(a3 + 8), *(unsigned __int8 *)(a3 + 9), *(unsigned __int8 *)(a3 + 10), *(unsigned __int8 *)(a3 + 11), *(unsigned __int8 *)(a3 + 12), *(unsigned __int8 *)(a3 + 13), *(unsigned __int8 *)(a3 + 14), *(unsigned __int8 *)(a3 + 15));
}

void sub_20BC2A9EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  id *v16;

  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

id UIPrintFormatterFunction_11142()
{
  return (id)classUIPrintFormatter_11149;
}

Class initUIPrintFormatter_11143()
{
  Class result;

  if (UIKitLibrary_sOnce_11147 != -1)
    dispatch_once(&UIKitLibrary_sOnce_11147, &__block_literal_global_236);
  result = objc_getClass("UIPrintFormatter");
  classUIPrintFormatter_11149 = (uint64_t)result;
  getUIPrintFormatterClass_11141 = (uint64_t (*)())UIPrintFormatterFunction_11142;
  return result;
}

uint64_t file_encoding(int a1, unsigned __int8 *a2, unint64_t a3, void **a4, uint64_t *a5, const char **a6, const char **a7, _QWORD *a8)
{
  void **v14;
  uint64_t *v15;
  size_t v16;
  char v17;
  void *v18;
  _BYTE *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  const char *v25;
  int *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  const char *v40;
  _QWORD *v41;
  int v42;
  int v43;
  int v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unsigned __int8 *v49;
  unsigned __int8 *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  _QWORD *v68;
  uint64_t v69;
  uint64_t v70;
  const char *v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  unint64_t v78;
  unint64_t v79;
  unint64_t v80;
  unint64_t v81;
  uint64_t v82;
  void *v83;

  v82 = 0;
  v83 = 0;
  if (a4)
    v14 = a4;
  else
    v14 = &v83;
  if (a5)
    v15 = a5;
  else
    v15 = &v82;
  *a8 = "text";
  *v15 = 0;
  *a6 = "unknown";
  *a7 = "binary";
  v16 = a3 + 1;
  v17 = 8 * (a3 + 1);
  v18 = malloc_type_calloc(1uLL, 8 * (a3 + 1), 0xB515E13AuLL);
  *v14 = v18;
  if (!v18)
  {
    v26 = __error();
    file_error(a1, *v26, "cannot allocate %zu bytes", v27, v28, v29, v30, v31, v17);
    v19 = 0;
    goto LABEL_24;
  }
  v19 = malloc_type_calloc(1uLL, v16, 0x5AAA6E6AuLL);
  if (!v19)
  {
    v32 = __error();
    file_error(a1, *v32, "cannot allocate %zu bytes", v33, v34, v35, v36, v37, v16);
    goto LABEL_24;
  }
  v20 = (uint64_t)*v14;
  *v15 = 0;
  if (!a3)
    goto LABEL_21;
  v21 = 0;
  do
  {
    v22 = a2[v21];
    if (text_chars[v22] != 1)
    {
      if (a3 >= 4 && *a2 == 239 && a2[1] == 187 && a2[2] == 191)
      {
        if ((int)file_looks_utf8((uint64_t)(a2 + 3), a3 - 3, v20, v15) > 0)
        {
          v40 = "UTF-8 Unicode (with BOM)";
LABEL_37:
          *a6 = v40;
          v25 = "utf-8";
          goto LABEL_22;
        }
        v20 = (uint64_t)*v14;
      }
      if ((int)file_looks_utf8((uint64_t)a2, a3, v20, v15) >= 2)
      {
        v40 = "UTF-8 Unicode";
        goto LABEL_37;
      }
      v41 = *v14;
      if (a3 >= 4)
      {
        v42 = *a2;
        if (*a2)
        {
          if (v42 != 255)
          {
LABEL_47:
            if (v42 == 254)
            {
              if (a2[1] == 255)
              {
                v44 = 0;
                v45 = 2;
                goto LABEL_104;
              }
LABEL_74:
              v58 = 0;
              *v15 = 0;
              while (1)
              {
                v59 = a2[v58];
                if (v59 <= 0x9F && text_chars[v59] != 1)
                  break;
                v61 = (*v15)++;
                v41[v61] = v59;
                if (a3 == ++v58)
                {
                  *a6 = "ISO-8859";
                  v25 = "iso-8859-1";
                  goto LABEL_22;
                }
              }
              v62 = 0;
              *v15 = 0;
              while (1)
              {
                v63 = a2[v62];
                if (v63 <= 0x9F && (text_chars[v63] & 0xFD) != 1)
                  break;
                v65 = (*v15)++;
                v41[v65] = v63;
                if (a3 == ++v62)
                {
                  *a6 = "Non-ISO extended-ASCII";
                  v25 = "unknown-8bit";
                  goto LABEL_22;
                }
              }
              v66 = 0;
              do
              {
                v19[v66] = ebcdic_to_ascii[a2[v66]];
                ++v66;
              }
              while (a3 != v66);
              v67 = 0;
              v68 = *v14;
              *v15 = 0;
              while (1)
              {
                v69 = v19[v67];
                if (text_chars[v69] != 1)
                  break;
                v70 = (*v15)++;
                v68[v70] = v69;
                if (a3 == ++v67)
                {
                  v71 = "EBCDIC";
                  goto LABEL_102;
                }
              }
              v72 = 0;
              *v15 = 0;
              do
              {
                v73 = v19[v72];
                if (v73 <= 0x9F && text_chars[v73] != 1)
                {
                  v38 = 0;
                  *a8 = "binary";
                  goto LABEL_25;
                }
                v75 = (*v15)++;
                v68[v75] = v73;
                ++v72;
              }
              while (a3 != v72);
              v71 = "International EBCDIC";
LABEL_102:
              *a6 = v71;
              v25 = "ebcdic";
              goto LABEL_22;
            }
            if (v42 != 255)
              goto LABEL_74;
LABEL_49:
            if (a2[1] == 254)
            {
              v44 = 1;
              v45 = 1;
LABEL_104:
              *v15 = 0;
              if (a3 < 4)
              {
LABEL_115:
                if (v45 == 1)
                {
                  *a6 = "Little-endian UTF-16 Unicode";
                  v25 = "utf-16le";
                }
                else
                {
                  *a6 = "Big-endian UTF-16 Unicode";
                  v25 = "utf-16be";
                }
                goto LABEL_22;
              }
              v76 = 0;
              v77 = 3;
              while (1)
              {
                v78 = v77 - 1;
                if (v44)
                  v79 = v77 - 1;
                else
                  v79 = v77;
                if (v44)
                  v78 = v77;
                v80 = a2[v79] | ((unint64_t)a2[v78] << 8);
                *v15 = v76 + 1;
                v41[v76] = v80;
                v76 = *v15;
                v81 = v41[*v15 - 1];
                if (v81 == 65534 || v81 <= 0x7F && text_chars[v81] != 1)
                  goto LABEL_74;
                v77 += 2;
                if (v77 >= a3)
                  goto LABEL_115;
              }
            }
            goto LABEL_74;
          }
          if (a2[1] != 254)
            goto LABEL_74;
          if (a2[2] || a2[3])
            goto LABEL_49;
          v43 = 1;
        }
        else
        {
          if (a2[1] || a2[2] != 254 || a2[3] != 255)
            goto LABEL_74;
          v43 = 0;
        }
        *v15 = 0;
        if (a3 < 8)
        {
LABEL_71:
          if (v43)
          {
            *a6 = "Little-endian UTF-32 Unicode";
            v25 = "utf-32le";
          }
          else
          {
            *a6 = "Big-endian UTF-32 Unicode";
            v25 = "utf-32be";
          }
          goto LABEL_22;
        }
        v46 = 0;
        v47 = 1;
        if (v43)
          v48 = 1;
        else
          v48 = 2;
        if (v43)
          v47 = 2;
        v49 = &a2[v47];
        v50 = &a2[v48];
        v51 = 4;
        while (1)
        {
          v52 = v51 + 3;
          if (v43)
            v53 = v51;
          else
            v53 = v51 + 3;
          v54 = a2[v53] | ((unint64_t)v50[v51] << 8);
          if (!v43)
            v52 = v51;
          v55 = v54 | ((unint64_t)v49[v51] << 16) | ((unint64_t)a2[v52] << 24);
          *v15 = v46 + 1;
          v41[v46] = v55;
          v46 = *v15;
          v56 = v41[*v15 - 1];
          if (v56 == 65534 || v56 <= 0x7F && text_chars[v56] != 1)
            break;
          v57 = v51 + 7;
          v51 += 4;
          if (v57 >= a3)
            goto LABEL_71;
        }
      }
      if (a3 < 2)
        goto LABEL_74;
      v42 = *a2;
      goto LABEL_47;
    }
    v23 = (*v15)++;
    *(_QWORD *)(v20 + 8 * v23) = v22;
    ++v21;
  }
  while (a3 != v21);
  if (a3 >= 5 && *a2 == 43 && a2[1] == 47 && a2[2] == 118)
  {
    v24 = a2[3];
    if (v24 <= 0x39 && ((1 << v24) & 0x300880000000000) != 0)
    {
      *v15 = 0;
      *a6 = "UTF-7 Unicode";
      v25 = "utf-7";
      goto LABEL_22;
    }
  }
LABEL_21:
  *a6 = "ASCII";
  v25 = "us-ascii";
LABEL_22:
  *a7 = v25;
LABEL_24:
  v38 = 1;
LABEL_25:
  free(v19);
  if (v14 == &v83)
    free(v83);
  return v38;
}

uint64_t file_looks_utf8(uint64_t a1, unint64_t a2, uint64_t a3, _QWORD *a4)
{
  int v4;
  int v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  int v9;
  int v10;
  unint64_t v11;
  uint64_t v12;
  _BOOL4 v13;
  unsigned int v14;

  if (a3)
    *a4 = 0;
  if (!a2)
  {
    v13 = 1;
LABEL_33:
    v14 = 1;
    goto LABEL_34;
  }
  v4 = 0;
  v5 = 0;
  v6 = 0;
  while (1)
  {
    v7 = *(unsigned __int8 *)(a1 + v6);
    if (*(char *)(a1 + v6) < 0)
      break;
    if (text_chars[*(unsigned __int8 *)(a1 + v6)] != 1)
      v4 = 1;
    if (a3)
    {
LABEL_9:
      v8 = (*a4)++;
      *(_QWORD *)(a3 + 8 * v8) = v7;
    }
LABEL_10:
    if (++v6 >= a2)
      goto LABEL_31;
  }
  if ((v7 & 0x40) == 0)
    return 0xFFFFFFFFLL;
  if ((v7 & 0x20) != 0)
  {
    if ((v7 & 0x10) == 0)
    {
      v9 = 2;
      v10 = 15;
      goto LABEL_23;
    }
    if ((v7 & 8) == 0)
    {
      v9 = 3;
      v10 = 7;
      goto LABEL_23;
    }
    if ((v7 & 4) == 0)
    {
      v9 = 4;
      v10 = 3;
      goto LABEL_23;
    }
    if ((v7 & 2) == 0)
    {
      v9 = 5;
      v10 = 1;
      goto LABEL_23;
    }
    return 0xFFFFFFFFLL;
  }
  v9 = 1;
  v10 = 31;
LABEL_23:
  v7 = v10 & v7;
  v11 = v6 + 1;
  v6 += 1 + (v9 - 1);
  while (v11 < a2)
  {
    v12 = 0xFFFFFFFFLL;
    if ((*(_BYTE *)(a1 + v11) & 0x80) == 0 || (*(_BYTE *)(a1 + v11) & 0x40) != 0)
      return v12;
    v7 = *(_BYTE *)(a1 + v11++) & 0x3F | (v7 << 6);
    if (!--v9)
    {
      v5 = 1;
      if (a3)
        goto LABEL_9;
      goto LABEL_10;
    }
  }
LABEL_31:
  v13 = v4 == 0;
  if (!v5)
    goto LABEL_33;
  v14 = 2;
LABEL_34:
  if (v13)
    return v14;
  else
    return 0;
}

uint64_t WFInstalledAppsEnumerator()
{
  +[WFGreenTeaLogger log:](WFGreenTeaLogger, "log:", CFSTR("Reading installed app list"));
  return objc_msgSend(MEMORY[0x24BDC1540], "enumeratorWithOptions:", 0);
}

id WFCreateTestingEventStore(void *a1)
{
  id v1;
  void *v2;

  v1 = a1;
  v2 = (void *)objc_msgSend(objc_alloc((Class)getEKEventStoreClass()), "initWithEKOptions:path:changeTrackingClientId:enablePropertyModificationLogging:allowDelegateSources:", 12, v1, 0, 1, 0);

  objc_msgSend(v2, "_setIsUnitTesting:", 1);
  return v2;
}

id getEKEventStoreClass()
{
  void *v0;
  id v1;
  _QWORD v3[5];
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = 0;
  v5 = &v4;
  v6 = 0x2050000000;
  v0 = (void *)getEKEventStoreClass_softClass;
  v7 = getEKEventStoreClass_softClass;
  if (!getEKEventStoreClass_softClass)
  {
    v3[0] = MEMORY[0x24BDAC760];
    v3[1] = 3221225472;
    v3[2] = __getEKEventStoreClass_block_invoke;
    v3[3] = &unk_24C4E3118;
    v3[4] = &v4;
    __getEKEventStoreClass_block_invoke((uint64_t)v3);
    v0 = (void *)v5[3];
  }
  v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_20BC2EA30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class __getEKEventStoreClass_block_invoke(uint64_t a1)
{
  Class result;
  void *v3;
  void *v4;
  void *v5;

  if (!EventKitLibraryCore_frameworkLibrary_11511)
    EventKitLibraryCore_frameworkLibrary_11511 = _sl_dlopen();
  if (!EventKitLibraryCore_frameworkLibrary_11511)
  {
    objc_msgSend(MEMORY[0x24BDD1448], "currentHandler");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "void *EventKitLibrary(void)");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, CFSTR("WFEventKitUtilities.m"), 15, CFSTR("%s"), 0);

    goto LABEL_8;
  }
  result = objc_getClass("EKEventStore");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    objc_msgSend(MEMORY[0x24BDD1448], "currentHandler");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "Class getEKEventStoreClass(void)_block_invoke");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v5, CFSTR("WFEventKitUtilities.m"), 16, CFSTR("Unable to find class %s"), "EKEventStore");

LABEL_8:
    __break(1u);
  }
  getEKEventStoreClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

id WFGetWorkflowEventStore()
{
  if (WFGetWorkflowEventStore_onceToken != -1)
    dispatch_once(&WFGetWorkflowEventStore_onceToken, &__block_literal_global_11524);
  return (id)workflowEventStore;
}

id WFRecreateEventStore()
{
  void *v0;

  if (testingEventStorePath)
  {
    WFCreateTestingEventStore((void *)testingEventStorePath);
    v0 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    getEKEventStoreClass();
    v0 = (void *)objc_opt_new();
  }
  return v0;
}

id WFGetWorkflowTestingEventStore()
{
  void *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  void *v4;

  if (!testingEventStorePath)
  {
    +[WFTemporaryFileManager createTemporaryDirectoryWithFilename:](WFTemporaryFileManager, "createTemporaryDirectoryWithFilename:", CFSTR("ShortcutsTestCalendarDatabase"));
    v0 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v0, "path");
    v1 = objc_claimAutoreleasedReturnValue();
    v2 = (void *)testingEventStorePath;
    testingEventStorePath = v1;

    if (workflowEventStore)
    {
      WFRecreateEventStore();
      v3 = objc_claimAutoreleasedReturnValue();
      v4 = (void *)workflowEventStore;
      workflowEventStore = v3;

    }
  }
  return WFGetWorkflowEventStore();
}

id WFSetWorkflowTestingEventStorePath(id obj)
{
  objc_storeStrong((id *)&testingEventStorePath, obj);
  return WFRecreateEventStore();
}

void WFClearWorkflowEventStore()
{
  uint64_t v0;
  void *v1;

  objc_msgSend((id)workflowEventStore, "reset");
  WFRecreateEventStore();
  v0 = objc_claimAutoreleasedReturnValue();
  v1 = (void *)workflowEventStore;
  workflowEventStore = v0;

}

id WFGetDeserializingEventStore(void *a1)
{
  return objc_getAssociatedObject(a1, &WFDeserializingEventStoreKey);
}

void WFSetDeserializingEventStore(void *a1, id value)
{
  objc_setAssociatedObject(a1, &WFDeserializingEventStoreKey, value, (void *)1);
}

void sub_20BC2F200(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void *__getNSAttachmentAttributeNameSymbolLoc_block_invoke(_QWORD *a1)
{
  void *v2;
  void *result;
  void *v4;

  if (!UIFoundationLibraryCore_frameworkLibrary_11554)
    UIFoundationLibraryCore_frameworkLibrary_11554 = _sl_dlopen();
  v2 = (void *)UIFoundationLibraryCore_frameworkLibrary_11554;
  if (!UIFoundationLibraryCore_frameworkLibrary_11554)
  {
    objc_msgSend(MEMORY[0x24BDD1448], "currentHandler");
    a1 = (_QWORD *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "void *UIFoundationLibrary(void)");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(a1, "handleFailureInFunction:file:lineNumber:description:", v2, CFSTR("NSAttributedString+TextAttachmentExtraction.m"), 15, CFSTR("%s"), 0);

    __break(1u);
    free(v4);
  }
  result = dlsym(v2, "NSAttachmentAttributeName");
  *(_QWORD *)(*(_QWORD *)(a1[4] + 8) + 24) = result;
  getNSAttachmentAttributeNameSymbolLoc_ptr_11546 = *(_QWORD *)(*(_QWORD *)(a1[4] + 8) + 24);
  return result;
}

id get_MKLocationShifterClass()
{
  void *v0;
  id v1;
  _QWORD v3[5];
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = 0;
  v5 = &v4;
  v6 = 0x2050000000;
  v0 = (void *)get_MKLocationShifterClass_softClass;
  v7 = get_MKLocationShifterClass_softClass;
  if (!get_MKLocationShifterClass_softClass)
  {
    v3[0] = MEMORY[0x24BDAC760];
    v3[1] = 3221225472;
    v3[2] = __get_MKLocationShifterClass_block_invoke;
    v3[3] = &unk_24C4E3118;
    v3[4] = &v4;
    __get_MKLocationShifterClass_block_invoke((uint64_t)v3);
    v0 = (void *)v5[3];
  }
  v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_20BC2FBB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_20BC2FE60(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 40));
  _Unwind_Resume(a1);
}

id WFAvailableArchiveFilename(void *a1, void *a2)
{
  id v3;
  id v4;
  id v5;
  void *v6;
  uint64_t v7;
  void *v8;
  id v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;

  v3 = a1;
  v4 = a2;
  v5 = v3;
  v6 = v5;
  if (objc_msgSend(v4, "containsObject:", v5))
  {
    v7 = 2;
    v8 = v5;
    do
    {
      v9 = v5;
      objc_msgSend(v9, "pathExtension");
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      if (objc_msgSend(v10, "length"))
      {
        objc_msgSend(v9, "stringByDeletingPathExtension");
        v11 = objc_claimAutoreleasedReturnValue();

        v9 = (id)v11;
      }
      objc_msgSend(v9, "stringByAppendingFormat:", CFSTR("-%lu"), v7);
      v6 = (void *)objc_claimAutoreleasedReturnValue();

      if (objc_msgSend(v10, "length"))
      {
        objc_msgSend(v6, "stringByAppendingPathExtension:", v10);
        v12 = objc_claimAutoreleasedReturnValue();

        v6 = (void *)v12;
      }

      ++v7;
      v8 = v6;
    }
    while ((objc_msgSend(v4, "containsObject:", v6) & 1) != 0);
  }
  objc_msgSend(v4, "addObject:", v6);

  return v6;
}

id WFLastArchiveError()
{
  int v0;
  uint64_t v1;
  void *v2;
  void *v3;
  void *v4;
  uint64_t v6;
  _QWORD v7[2];

  v7[1] = *MEMORY[0x24BDAC8D0];
  v0 = archive_errno();
  v1 = archive_error_string();
  if (v1)
  {
    v6 = *MEMORY[0x24BDD0FC8];
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", v1);
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    v7[0] = v2;
    objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", v7, &v6, 1);
    v3 = (void *)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    v3 = 0;
  }
  objc_msgSend(MEMORY[0x24BDD1540], "errorWithDomain:code:userInfo:", CFSTR("WFLibArchiveErrorDomain"), v0, v3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  return v4;
}

id getWFLibArchiveLogObject()
{
  if (getWFLibArchiveLogObject_onceToken != -1)
    dispatch_once(&getWFLibArchiveLogObject_onceToken, &__block_literal_global_11888);
  return (id)getWFLibArchiveLogObject_log;
}

id WFPathFromArchiveEntry()
{
  uint64_t v0;
  const char *v1;
  void *v2;
  const __int32 *v3;
  void *v4;

  v0 = archive_entry_pathname();
  if (!v0)
  {
    v3 = (const __int32 *)archive_entry_pathname_w();
    if (!v3)
    {
      v2 = 0;
      return v2;
    }
    goto LABEL_6;
  }
  v1 = (const char *)v0;
  v2 = (void *)objc_msgSend(objc_alloc(MEMORY[0x24BDD17C8]), "initWithUTF8String:", v0);
  if (!v2)
  {
    v3 = (const __int32 *)archive_entry_pathname_w();
    if (!v3)
    {
      v4 = (void *)objc_msgSend(objc_alloc(MEMORY[0x24BDBCE50]), "initWithBytes:length:", v1, strlen(v1));
      objc_msgSend(MEMORY[0x24BDD17C8], "wf_stringWithData:", v4);
      v2 = (void *)objc_claimAutoreleasedReturnValue();

      return v2;
    }
LABEL_6:
    v2 = (void *)objc_msgSend(objc_alloc(MEMORY[0x24BDD17C8]), "initWithBytes:length:encoding:", v3, 4 * wcslen(v3), 2617245952);
  }
  return v2;
}

void __getWFLibArchiveLogObject_block_invoke()
{
  os_log_t v0;
  void *v1;

  v0 = os_log_create((const char *)*MEMORY[0x24BEC1968], "LibArchive");
  v1 = (void *)getWFLibArchiveLogObject_log;
  getWFLibArchiveLogObject_log = (uint64_t)v0;

}

void sub_20BC32C84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_20BC332E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void __getWKContentRuleListStoreClass_block_invoke(uint64_t a1)
{
  void *v2;
  void *v3;

  WebKitLibrary();
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = objc_getClass("WKContentRuleListStore");
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    getWKContentRuleListStoreClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  }
  else
  {
    objc_msgSend(MEMORY[0x24BDD1448], "currentHandler");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "Class getWKContentRuleListStoreClass(void)_block_invoke");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, CFSTR("WFWKWebViewCapturer.m"), 25, CFSTR("Unable to find class %s"), "WKContentRuleListStore");

    __break(1u);
  }
}

void WebKitLibrary()
{
  void *v0;
  void *v1;
  void *v2;

  if (!WebKitLibraryCore_frameworkLibrary_12365)
    WebKitLibraryCore_frameworkLibrary_12365 = _sl_dlopen();
  if (!WebKitLibraryCore_frameworkLibrary_12365)
  {
    objc_msgSend(MEMORY[0x24BDD1448], "currentHandler");
    v0 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "void *WebKitLibrary(void)");
    v1 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v1, CFSTR("WFWKWebViewCapturer.m"), 22, CFSTR("%s"), 0);

    __break(1u);
    free(v2);
  }
}

void __getWKWebViewConfigurationClass_block_invoke_12402(uint64_t a1)
{
  void *v2;
  void *v3;

  WebKitLibrary();
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = objc_getClass("WKWebViewConfiguration");
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    getWKWebViewConfigurationClass_softClass_12401 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  }
  else
  {
    objc_msgSend(MEMORY[0x24BDD1448], "currentHandler");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "Class getWKWebViewConfigurationClass(void)_block_invoke");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, CFSTR("WFWKWebViewCapturer.m"), 24, CFSTR("Unable to find class %s"), "WKWebViewConfiguration");

    __break(1u);
  }
}

void __getWKWebViewClass_block_invoke_12404(uint64_t a1)
{
  void *v2;
  void *v3;

  WebKitLibrary();
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = objc_getClass("WKWebView");
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    getWKWebViewClass_softClass_12403 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  }
  else
  {
    objc_msgSend(MEMORY[0x24BDD1448], "currentHandler");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "Class getWKWebViewClass(void)_block_invoke");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, CFSTR("WFWKWebViewCapturer.m"), 23, CFSTR("Unable to find class %s"), "WKWebView");

    __break(1u);
  }
}

void sub_20BC34B48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  _Block_object_dispose(&a27, 8);
  _Unwind_Resume(a1);
}

id getCNLabeledValueClass_12491()
{
  void *v0;
  id v1;
  _QWORD v3[5];
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = 0;
  v5 = &v4;
  v6 = 0x2050000000;
  v0 = (void *)getCNLabeledValueClass_softClass_12492;
  v7 = getCNLabeledValueClass_softClass_12492;
  if (!getCNLabeledValueClass_softClass_12492)
  {
    v3[0] = MEMORY[0x24BDAC760];
    v3[1] = 3221225472;
    v3[2] = __getCNLabeledValueClass_block_invoke_12493;
    v3[3] = &unk_24C4E3118;
    v3[4] = &v4;
    __getCNLabeledValueClass_block_invoke_12493((uint64_t)v3);
    v0 = (void *)v5[3];
  }
  v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_20BC35684(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void __getCNLabeledValueClass_block_invoke_12493(uint64_t a1)
{
  void *v2;
  void *v3;

  ContactsLibrary_12494();
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = objc_getClass("CNLabeledValue");
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    getCNLabeledValueClass_softClass_12492 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  }
  else
  {
    objc_msgSend(MEMORY[0x24BDD1448], "currentHandler");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "Class getCNLabeledValueClass(void)_block_invoke");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, CFSTR("WFContactContentItemChangeTransaction.m"), 17, CFSTR("Unable to find class %s"), "CNLabeledValue");

    __break(1u);
  }
}

void ContactsLibrary_12494()
{
  void *v0;
  void *v1;
  void *v2;

  if (!ContactsLibraryCore_frameworkLibrary_12503)
    ContactsLibraryCore_frameworkLibrary_12503 = _sl_dlopen();
  if (!ContactsLibraryCore_frameworkLibrary_12503)
  {
    objc_msgSend(MEMORY[0x24BDD1448], "currentHandler");
    v0 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "void *ContactsLibrary(void)");
    v1 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v1, CFSTR("WFContactContentItemChangeTransaction.m"), 14, CFSTR("%s"), 0);

    __break(1u);
    free(v2);
  }
}

void sub_20BC35B50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void __getCNPhoneNumberClass_block_invoke_12521(uint64_t a1)
{
  void *v2;
  void *v3;

  ContactsLibrary_12494();
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = objc_getClass("CNPhoneNumber");
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    getCNPhoneNumberClass_softClass_12520 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  }
  else
  {
    objc_msgSend(MEMORY[0x24BDD1448], "currentHandler");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "Class getCNPhoneNumberClass(void)_block_invoke");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, CFSTR("WFContactContentItemChangeTransaction.m"), 18, CFSTR("Unable to find class %s"), "CNPhoneNumber");

    __break(1u);
  }
}

void __getCNSaveRequestClass_block_invoke_12525(uint64_t a1)
{
  void *v2;
  void *v3;

  ContactsLibrary_12494();
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = objc_getClass("CNSaveRequest");
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    getCNSaveRequestClass_softClass_12524 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  }
  else
  {
    objc_msgSend(MEMORY[0x24BDD1448], "currentHandler");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "Class getCNSaveRequestClass(void)_block_invoke");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, CFSTR("WFContactContentItemChangeTransaction.m"), 16, CFSTR("Unable to find class %s"), "CNSaveRequest");

    __break(1u);
  }
}

id getCNContactStoreClass_12526()
{
  void *v0;
  id v1;
  _QWORD v3[5];
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = 0;
  v5 = &v4;
  v6 = 0x2050000000;
  v0 = (void *)getCNContactStoreClass_softClass_12530;
  v7 = getCNContactStoreClass_softClass_12530;
  if (!getCNContactStoreClass_softClass_12530)
  {
    v3[0] = MEMORY[0x24BDAC760];
    v3[1] = 3221225472;
    v3[2] = __getCNContactStoreClass_block_invoke_12531;
    v3[3] = &unk_24C4E3118;
    v3[4] = &v4;
    __getCNContactStoreClass_block_invoke_12531((uint64_t)v3);
    v0 = (void *)v5[3];
  }
  v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_20BC35D90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void __getCNContactStoreClass_block_invoke_12531(uint64_t a1)
{
  void *v2;
  void *v3;

  ContactsLibrary_12494();
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = objc_getClass("CNContactStore");
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    getCNContactStoreClass_softClass_12530 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  }
  else
  {
    objc_msgSend(MEMORY[0x24BDD1448], "currentHandler");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "Class getCNContactStoreClass(void)_block_invoke");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, CFSTR("WFContactContentItemChangeTransaction.m"), 15, CFSTR("Unable to find class %s"), "CNContactStore");

    __break(1u);
  }
}

void sub_20BC36BE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  _Block_object_dispose(&a26, 8);
  _Unwind_Resume(a1);
}

void __getMKLocalSearchRequestClass_block_invoke(uint64_t a1)
{
  void *v2;
  void *v3;

  MapKitLibrary_12635();
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = objc_getClass("MKLocalSearchRequest");
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    getMKLocalSearchRequestClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  }
  else
  {
    objc_msgSend(MEMORY[0x24BDD1448], "currentHandler");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "Class getMKLocalSearchRequestClass(void)_block_invoke");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, CFSTR("WFDCMapsLinkContentItem.m"), 18, CFSTR("Unable to find class %s"), "MKLocalSearchRequest");

    __break(1u);
  }
}

void __getMKLocalSearchClass_block_invoke(uint64_t a1)
{
  void *v2;
  void *v3;

  MapKitLibrary_12635();
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = objc_getClass("MKLocalSearch");
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    getMKLocalSearchClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  }
  else
  {
    objc_msgSend(MEMORY[0x24BDD1448], "currentHandler");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "Class getMKLocalSearchClass(void)_block_invoke");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, CFSTR("WFDCMapsLinkContentItem.m"), 17, CFSTR("Unable to find class %s"), "MKLocalSearch");

    __break(1u);
  }
}

void getMKErrorDomain()
{
  id *v0;
  void *v1;
  id v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;

  v5 = 0;
  v6 = &v5;
  v7 = 0x2020000000;
  v0 = (id *)getMKErrorDomainSymbolLoc_ptr;
  v8 = getMKErrorDomainSymbolLoc_ptr;
  if (!getMKErrorDomainSymbolLoc_ptr)
  {
    v1 = MapKitLibrary_12635();
    v0 = (id *)dlsym(v1, "MKErrorDomain");
    v6[3] = (uint64_t)v0;
    getMKErrorDomainSymbolLoc_ptr = (uint64_t)v0;
  }
  _Block_object_dispose(&v5, 8);
  if (v0)
  {
    v2 = *v0;
  }
  else
  {
    objc_msgSend(MEMORY[0x24BDD1448], "currentHandler");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "NSString *getMKErrorDomain(void)");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, CFSTR("WFDCMapsLinkContentItem.m"), 19, CFSTR("%s"), dlerror());

    __break(1u);
  }
}

void sub_20BC370C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void *MapKitLibrary_12635()
{
  void *v0;
  void *v2;
  void *v3;

  if (!MapKitLibraryCore_frameworkLibrary_12642)
    MapKitLibraryCore_frameworkLibrary_12642 = _sl_dlopen();
  v0 = (void *)MapKitLibraryCore_frameworkLibrary_12642;
  if (!MapKitLibraryCore_frameworkLibrary_12642)
  {
    objc_msgSend(MEMORY[0x24BDD1448], "currentHandler");
    v0 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "void *MapKitLibrary(void)");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v2, CFSTR("WFDCMapsLinkContentItem.m"), 16, CFSTR("%s"), 0);

    __break(1u);
    free(v3);
  }
  return v0;
}

void WFCLPlacemarkFromSerializedPlacemark(void *a1)
{
  id v1;
  void *v2;
  uint64_t v3;
  void *v4;
  void *v5;
  void *v6;
  uint64_t v7;
  void *v8;
  char **__ptr32 *v9;
  id v10;
  void *v11;
  uint64_t v12;
  void *v13;
  void *v14;
  uint64_t v15;
  void *v16;
  void *v17;
  uint64_t v18;
  void *v19;
  void *v20;
  uint64_t v21;
  void *v22;
  double v23;
  double v24;
  void *v25;
  uint64_t v26;
  void *v27;
  double v28;
  double v29;
  void *v30;
  objc_class *v31;
  id v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  uint64_t v37;
  void *v38;
  void *v39;
  objc_class *v40;
  void *v41;
  id v42;
  void *v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t v53;

  v1 = a1;
  objc_msgSend(v1, "objectForKey:", CFSTR("location"));
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = objc_opt_class();
  WFEnforceClass(v2, v3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  if (v4)
  {
    WFCLLocationFromSerializedLocation(v4);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v5 = 0;
  }
  objc_msgSend(v1, "objectForKey:", CFSTR("region"));
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = objc_opt_class();
  WFEnforceClass(v6, v7);
  v8 = (void *)objc_claimAutoreleasedReturnValue();

  v9 = &off_20BC99000;
  if (v8)
  {
    v10 = v8;
    objc_msgSend(v10, "objectForKey:", CFSTR("radius"));
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    v12 = objc_opt_class();
    WFEnforceClass(v11, v12);
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v13, "doubleValue");

    objc_msgSend(v10, "objectForKey:", CFSTR("identifier"));
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    v15 = objc_opt_class();
    WFEnforceClass(v14, v15);
    v16 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(v10, "objectForKey:", CFSTR("center"));
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    v18 = objc_opt_class();
    WFEnforceClass(v17, v18);
    v19 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(v19, "objectForKey:", CFSTR("latitude"));
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    v21 = objc_opt_class();
    WFEnforceClass(v20, v21);
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v22, "doubleValue");
    v24 = v23;

    objc_msgSend(v19, "objectForKey:", CFSTR("longitude"));
    v25 = (void *)objc_claimAutoreleasedReturnValue();
    v26 = objc_opt_class();
    WFEnforceClass(v25, v26);
    v27 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v27, "doubleValue");
    v29 = v28;

    v50 = 0;
    v51 = &v50;
    v52 = 0x2050000000;
    v30 = (void *)getCLCircularRegionClass_softClass;
    v53 = getCLCircularRegionClass_softClass;
    if (!getCLCircularRegionClass_softClass)
    {
      v45 = MEMORY[0x24BDAC760];
      v46 = 3221225472;
      v47 = (uint64_t)__getCLCircularRegionClass_block_invoke;
      v48 = &unk_24C4E3118;
      v49 = &v50;
      __getCLCircularRegionClass_block_invoke((uint64_t)&v45);
      v30 = (void *)v51[3];
    }
    v31 = objc_retainAutorelease(v30);
    _Block_object_dispose(&v50, 8);
    v32 = [v31 alloc];
    v45 = 0;
    v46 = (uint64_t)&v45;
    v47 = 0x2020000000;
    v33 = getCLLocationCoordinate2DMakeSymbolLoc_ptr_1691;
    v48 = getCLLocationCoordinate2DMakeSymbolLoc_ptr_1691;
    if (!getCLLocationCoordinate2DMakeSymbolLoc_ptr_1691)
    {
      v34 = CoreLocationLibrary_1692();
      v33 = dlsym(v34, "CLLocationCoordinate2DMake");
      *(_QWORD *)(v46 + 24) = v33;
      getCLLocationCoordinate2DMakeSymbolLoc_ptr_1691 = v33;
    }
    _Block_object_dispose(&v45, 8);
    if (!v33)
    {
      objc_msgSend(MEMORY[0x24BDD1448], "currentHandler");
      v43 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "CLLocationCoordinate2D WFCLLocationCoordinate2DMake(CLLocationDegrees, CLLocationDegrees)");
      v44 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v43, "handleFailureInFunction:file:lineNumber:description:", v44, CFSTR("CLCircularRegion+WFSerialization.m"), 17, CFSTR("%s"), dlerror(), v45);

      __break(1u);
      return;
    }
    ((void (*)(double, double))v33)(v24, v29);
    v35 = (void *)objc_msgSend(v32, "initWithCenter:radius:identifier:", v16);

    v9 = &off_20BC99000;
  }
  else
  {
    v35 = 0;
  }
  objc_msgSend(v1, "objectForKey:", CFSTR("addressDictionary"));
  v36 = (void *)objc_claimAutoreleasedReturnValue();
  v37 = objc_opt_class();
  WFEnforceClass(v36, v37);
  v38 = (void *)objc_claimAutoreleasedReturnValue();

  v50 = 0;
  v51 = &v50;
  v52 = *((_QWORD *)v9 + 375);
  v39 = (void *)getCLPlacemarkClass_softClass_12927;
  v53 = getCLPlacemarkClass_softClass_12927;
  if (!getCLPlacemarkClass_softClass_12927)
  {
    v45 = MEMORY[0x24BDAC760];
    v46 = 3221225472;
    v47 = (uint64_t)__getCLPlacemarkClass_block_invoke_12928;
    v48 = &unk_24C4E3118;
    v49 = &v50;
    __getCLPlacemarkClass_block_invoke_12928((uint64_t)&v45);
    v39 = (void *)v51[3];
  }
  v40 = objc_retainAutorelease(v39);
  _Block_object_dispose(&v50, 8);
  v41 = (void *)objc_msgSend([v40 alloc], "initWithLocation:addressDictionary:region:areasOfInterest:", v5, v38, v35, 0);

  v42 = v41;
}

void sub_20BC37DB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void __getCLPlacemarkClass_block_invoke_12928(uint64_t a1)
{
  void *v2;
  void *v3;

  CoreLocationLibrary_12929();
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = objc_getClass("CLPlacemark");
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    getCLPlacemarkClass_softClass_12927 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  }
  else
  {
    objc_msgSend(MEMORY[0x24BDD1448], "currentHandler");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "Class getCLPlacemarkClass(void)_block_invoke");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, CFSTR("CLPlacemark+WFSerialization.m"), 21, CFSTR("Unable to find class %s"), "CLPlacemark");

    __break(1u);
  }
}

void CoreLocationLibrary_12929()
{
  void *v0;
  void *v1;
  void *v2;

  if (!CoreLocationLibraryCore_frameworkLibrary_12936)
    CoreLocationLibraryCore_frameworkLibrary_12936 = _sl_dlopen();
  if (!CoreLocationLibraryCore_frameworkLibrary_12936)
  {
    objc_msgSend(MEMORY[0x24BDD1448], "currentHandler");
    v0 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "void *CoreLocationLibrary(void)");
    v1 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v1, CFSTR("CLPlacemark+WFSerialization.m"), 18, CFSTR("%s"), 0);

    __break(1u);
    free(v2);
  }
}

id WFSerializedPlacemarkFromCLPlacemark(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  __CFString *v7;
  __CFString *v8;
  void *v9;
  id v10;
  double v11;
  double v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void (*v18)(uint64_t);
  void *v19;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(uint64_t);
  void *v24;
  const __CFString **v25;
  const __CFString *v26;
  const __CFString **v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD v30[3];

  v30[2] = *MEMORY[0x24BDAC8D0];
  v1 = a1;
  if (v1)
  {
    v2 = (void *)objc_opt_new();
    objc_msgSend(v1, "location");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    WFSerializedLocationFromCLLocation(v3);
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "setValue:forKey:", v4, CFSTR("location"));

    objc_msgSend(v1, "addressDictionary");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "setValue:forKey:", v5, CFSTR("addressDictionary"));

    objc_msgSend(v1, "region");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    v26 = 0;
    v27 = &v26;
    v28 = 0x2050000000;
    v7 = (__CFString *)getCLCircularRegionClass_softClass_12947;
    v29 = getCLCircularRegionClass_softClass_12947;
    if (!getCLCircularRegionClass_softClass_12947)
    {
      v21 = MEMORY[0x24BDAC760];
      v22 = 3221225472;
      v23 = __getCLCircularRegionClass_block_invoke_12948;
      v24 = &unk_24C4E3118;
      v25 = &v26;
      __getCLCircularRegionClass_block_invoke_12948((uint64_t)&v21);
      v7 = (__CFString *)v27[3];
    }
    v8 = objc_retainAutorelease(v7);
    _Block_object_dispose(&v26, 8);
    WFEnforceClass(v6, (uint64_t)v8);
    v9 = (void *)objc_claimAutoreleasedReturnValue();

    if (v9)
    {
      v10 = v9;
      v26 = CFSTR("center");
      objc_msgSend(v10, "center");
      v12 = v11;
      v30[0] = CFSTR("latitude");
      objc_msgSend(MEMORY[0x24BDD16E0], "numberWithDouble:");
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      v30[1] = CFSTR("longitude");
      objc_msgSend(MEMORY[0x24BDD16E0], "numberWithDouble:", v12, v13);
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      v22 = (uint64_t)v14;
      objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", &v21, v30, 2);
      v15 = (void *)objc_claimAutoreleasedReturnValue();

      v27 = (const __CFString **)CFSTR("radius");
      v16 = (void *)MEMORY[0x24BDD16E0];
      objc_msgSend(v10, "radius", v15);
      objc_msgSend(v16, "numberWithDouble:");
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      v22 = (uint64_t)v17;
      v28 = (uint64_t)CFSTR("identifier");
      objc_msgSend(v10, "identifier");
      v18 = (void (*)(uint64_t))objc_claimAutoreleasedReturnValue();
      v23 = v18;
      objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", &v21, &v26, 3);
      v19 = (void *)objc_claimAutoreleasedReturnValue();

      objc_msgSend(v2, "setValue:forKey:", v19, CFSTR("region"));
    }
    else
    {
      objc_msgSend(v2, "setValue:forKey:", 0, CFSTR("region"));
    }

  }
  else
  {
    v2 = 0;
  }

  return v2;
}

void sub_20BC38294(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void __getCLCircularRegionClass_block_invoke_12948(uint64_t a1)
{
  void *v2;
  void *v3;

  CoreLocationLibrary_12929();
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = objc_getClass("CLCircularRegion");
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    getCLCircularRegionClass_softClass_12947 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  }
  else
  {
    objc_msgSend(MEMORY[0x24BDD1448], "currentHandler");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "Class getCLCircularRegionClass(void)_block_invoke");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, CFSTR("CLPlacemark+WFSerialization.m"), 20, CFSTR("Unable to find class %s"), "CLCircularRegion");

    __break(1u);
  }
}

id WFGetWorkflowReminderStore()
{
  if (WFGetWorkflowReminderStore_onceToken != -1)
    dispatch_once(&WFGetWorkflowReminderStore_onceToken, &__block_literal_global_13081);
  return (id)workflowReminderStore;
}

id getREMStoreClass()
{
  void *v0;
  id v1;
  _QWORD v3[5];
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = 0;
  v5 = &v4;
  v6 = 0x2050000000;
  v0 = (void *)getREMStoreClass_softClass;
  v7 = getREMStoreClass_softClass;
  if (!getREMStoreClass_softClass)
  {
    v3[0] = MEMORY[0x24BDAC760];
    v3[1] = 3221225472;
    v3[2] = __getREMStoreClass_block_invoke;
    v3[3] = &unk_24C4E3118;
    v3[4] = &v4;
    __getREMStoreClass_block_invoke((uint64_t)v3);
    v0 = (void *)v5[3];
  }
  v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_20BC39418(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class __getREMStoreClass_block_invoke(uint64_t a1)
{
  Class result;
  void *v3;
  void *v4;
  void *v5;

  if (!ReminderKitLibraryCore_frameworkLibrary_13082)
    ReminderKitLibraryCore_frameworkLibrary_13082 = _sl_dlopen();
  if (!ReminderKitLibraryCore_frameworkLibrary_13082)
  {
    objc_msgSend(MEMORY[0x24BDD1448], "currentHandler");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "void *ReminderKitLibrary(void)");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, CFSTR("WFReminderKitUtilities.m"), 21, CFSTR("%s"), 0);

    goto LABEL_8;
  }
  result = objc_getClass("REMStore");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    objc_msgSend(MEMORY[0x24BDD1448], "currentHandler");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "Class getREMStoreClass(void)_block_invoke");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v5, CFSTR("WFReminderKitUtilities.m"), 22, CFSTR("Unable to find class %s"), "REMStore");

LABEL_8:
    __break(1u);
  }
  getREMStoreClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

void WFClearWorkflowReminderStore()
{
  uint64_t v0;
  void *v1;

  getREMStoreClass();
  v0 = objc_opt_new();
  v1 = (void *)workflowReminderStore;
  workflowReminderStore = v0;

}

id WFMakeContentAttributionSetForRemindersAccount(void *a1, void *a2)
{
  objc_class *v3;
  id v4;
  id v5;
  id v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;

  v3 = (objc_class *)MEMORY[0x24BDD9BD0];
  v4 = a2;
  v5 = a1;
  v6 = [v3 alloc];
  v7 = (void *)objc_msgSend(v6, "initWithBundleIdentifier:", *MEMORY[0x24BEC1740]);
  objc_msgSend(MEMORY[0x24BDD9BF0], "sharedResolver");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "resolvedAppMatchingDescriptor:", v7);
  v9 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v5, "objectID");
  v10 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v10, "uuid");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v11, "UUIDString");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  +[WFContentAttributionSet attributionSetWithAccountBasedAppDescriptor:accountIdentifier:disclosureLevel:originalItemIdentifier:](WFContentAttributionSet, "attributionSetWithAccountBasedAppDescriptor:accountIdentifier:disclosureLevel:originalItemIdentifier:", v9, v12, 1, v4);
  v13 = (void *)objc_claimAutoreleasedReturnValue();

  return v13;
}

id WFMakeContentLocationForRemindersAccount(void *a1)
{
  objc_class *v1;
  id v2;
  id v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;

  v1 = (objc_class *)MEMORY[0x24BDD9BD0];
  v2 = a1;
  v3 = [v1 alloc];
  v4 = (void *)objc_msgSend(v3, "initWithBundleIdentifier:", *MEMORY[0x24BEC1740]);
  objc_msgSend(MEMORY[0x24BDD9BF0], "sharedResolver");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "resolvedAppMatchingDescriptor:", v4);
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v2, "objectID");
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v7, "uuid");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "UUIDString");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  +[WFAccountContentLocation locationWithAccountIdentifier:appDescriptor:](WFAccountContentLocation, "locationWithAccountIdentifier:appDescriptor:", v9, v6);
  v10 = (void *)objc_claimAutoreleasedReturnValue();

  return v10;
}

id WFChooseFromListFormatPlaybackDuration(double a1)
{
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t v5;

  v1 = vcvtad_u64_f64(a1);
  v2 = v1 / 0x3C - 60 * ((unint64_t)((v1 / 0x3C * (unsigned __int128)0x888888888888889uLL) >> 64) >> 1);
  v3 = v1 % 0x3C;
  if (v1 >= 0xE10)
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithFormat:", CFSTR("%ld:%02ld:%02ld"), v1 / 0xE10, v2, v3);
  else
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithFormat:", CFSTR("%ld:%02ld"), v2, v3, v5);
  return (id)objc_claimAutoreleasedReturnValue();
}

void sub_20BC3A80C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class __getMKDistanceFormatterClass_block_invoke(uint64_t a1)
{
  Class result;
  void *v3;
  void *v4;
  void *v5;

  if (!MapKitLibraryCore_frameworkLibrary_13222)
    MapKitLibraryCore_frameworkLibrary_13222 = _sl_dlopen();
  if (!MapKitLibraryCore_frameworkLibrary_13222)
  {
    objc_msgSend(MEMORY[0x24BDD1448], "currentHandler");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "void *MapKitLibrary(void)");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, CFSTR("WFContentItem+ChooseFromList.m"), 38, CFSTR("%s"), 0);

    goto LABEL_8;
  }
  result = objc_getClass("MKDistanceFormatter");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    objc_msgSend(MEMORY[0x24BDD1448], "currentHandler");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "Class getMKDistanceFormatterClass(void)_block_invoke");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v5, CFSTR("WFContentItem+ChooseFromList.m"), 39, CFSTR("Unable to find class %s"), "MKDistanceFormatter");

LABEL_8:
    __break(1u);
  }
  getMKDistanceFormatterClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

void sub_20BC3BD64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void __getCNAvatarImageRenderingScopeClass_block_invoke(uint64_t a1)
{
  void *v2;
  void *v3;

  ContactsUILibrary();
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = objc_getClass("CNAvatarImageRenderingScope");
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    getCNAvatarImageRenderingScopeClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  }
  else
  {
    objc_msgSend(MEMORY[0x24BDD1448], "currentHandler");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "Class getCNAvatarImageRenderingScopeClass(void)_block_invoke");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, CFSTR("WFContentItem+ChooseFromList.m"), 46, CFSTR("Unable to find class %s"), "CNAvatarImageRenderingScope");

    __break(1u);
  }
}

void __getCNAvatarImageRendererSettingsClass_block_invoke(uint64_t a1)
{
  void *v2;
  void *v3;

  ContactsUILibrary();
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = objc_getClass("CNAvatarImageRendererSettings");
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    getCNAvatarImageRendererSettingsClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  }
  else
  {
    objc_msgSend(MEMORY[0x24BDD1448], "currentHandler");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "Class getCNAvatarImageRendererSettingsClass(void)_block_invoke");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, CFSTR("WFContentItem+ChooseFromList.m"), 50, CFSTR("Unable to find class %s"), "CNAvatarImageRendererSettings");

    __break(1u);
  }
}

void __getCNAvatarImageRendererClass_block_invoke(uint64_t a1)
{
  void *v2;
  void *v3;

  ContactsUILibrary();
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = objc_getClass("CNAvatarImageRenderer");
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    getCNAvatarImageRendererClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  }
  else
  {
    objc_msgSend(MEMORY[0x24BDD1448], "currentHandler");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "Class getCNAvatarImageRendererClass(void)_block_invoke");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, CFSTR("WFContentItem+ChooseFromList.m"), 45, CFSTR("Unable to find class %s"), "CNAvatarImageRenderer");

    __break(1u);
  }
}

void ContactsUILibrary()
{
  void *v0;
  void *v1;
  void *v2;

  if (!ContactsUILibraryCore_frameworkLibrary)
    ContactsUILibraryCore_frameworkLibrary = _sl_dlopen();
  if (!ContactsUILibraryCore_frameworkLibrary)
  {
    objc_msgSend(MEMORY[0x24BDD1448], "currentHandler");
    v0 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "void *ContactsUILibrary(void)");
    v1 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v1, CFSTR("WFContentItem+ChooseFromList.m"), 42, CFSTR("%s"), 0);

    __break(1u);
    free(v2);
  }
}

void sub_20BC3C618(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_20BC3C7C4(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 64), 8);
  _Unwind_Resume(a1);
}

void *__getCMTimeGetSecondsSymbolLoc_block_invoke(_QWORD *a1)
{
  void *v2;
  void *result;
  void *v4;

  if (!CoreMediaLibraryCore_frameworkLibrary_13245)
    CoreMediaLibraryCore_frameworkLibrary_13245 = _sl_dlopen();
  v2 = (void *)CoreMediaLibraryCore_frameworkLibrary_13245;
  if (!CoreMediaLibraryCore_frameworkLibrary_13245)
  {
    objc_msgSend(MEMORY[0x24BDD1448], "currentHandler");
    a1 = (_QWORD *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "void *CoreMediaLibrary(void)");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(a1, "handleFailureInFunction:file:lineNumber:description:", v2, CFSTR("WFContentItem+ChooseFromList.m"), 30, CFSTR("%s"), 0);

    __break(1u);
    free(v4);
  }
  result = dlsym(v2, "CMTimeGetSeconds");
  *(_QWORD *)(*(_QWORD *)(a1[4] + 8) + 24) = result;
  getCMTimeGetSecondsSymbolLoc_ptr_13243 = *(_UNKNOWN **)(*(_QWORD *)(a1[4] + 8) + 24);
  return result;
}

void __getAVMetadataItemClass_block_invoke_13251(uint64_t a1)
{
  void *v2;
  void *v3;

  AVFoundationLibrary_13253();
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = objc_getClass("AVMetadataItem");
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    getAVMetadataItemClass_softClass_13250 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  }
  else
  {
    objc_msgSend(MEMORY[0x24BDD1448], "currentHandler");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "Class getAVMetadataItemClass(void)_block_invoke");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, CFSTR("WFContentItem+ChooseFromList.m"), 34, CFSTR("Unable to find class %s"), "AVMetadataItem");

    __break(1u);
  }
}

void *AVFoundationLibrary_13253()
{
  void *v0;
  void *v2;
  void *v3;

  if (!AVFoundationLibraryCore_frameworkLibrary_13259)
    AVFoundationLibraryCore_frameworkLibrary_13259 = _sl_dlopen();
  v0 = (void *)AVFoundationLibraryCore_frameworkLibrary_13259;
  if (!AVFoundationLibraryCore_frameworkLibrary_13259)
  {
    objc_msgSend(MEMORY[0x24BDD1448], "currentHandler");
    v0 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "void *AVFoundationLibrary(void)");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v2, CFSTR("WFContentItem+ChooseFromList.m"), 33, CFSTR("%s"), 0);

    __break(1u);
    free(v3);
  }
  return v0;
}

void mlist_free(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  if (a1)
  {
    v2 = (_QWORD *)a1[3];
    if (v2 != a1)
    {
      do
      {
        v3 = (_QWORD *)v2[3];
        mlist_free_one(v2);
        v2 = v3;
      }
      while (v3 != a1);
    }
    mlist_free_one(a1);
  }
}

void mlist_free_one(_QWORD *a1)
{
  _DWORD *v2;

  v2 = (_DWORD *)a1[2];
  if (v2)
    apprentice_unmap(v2);
  free(a1);
}

void apprentice_unmap(_DWORD *a1)
{
  int v2;
  uint64_t v3;
  char v4;
  char v5;
  void *v6;

  if (a1)
  {
    v2 = a1[4];
    if (v2)
    {
      if (v2 != 1)
        abort();
      v3 = 0;
      v4 = 1;
      do
      {
        v5 = v4;
        v6 = *(void **)&a1[2 * v3 + 6];
        if ((unint64_t)v6 < *(_QWORD *)a1 || (unint64_t)v6 > *(_QWORD *)a1 + *((_QWORD *)a1 + 1))
          free(v6);
        v4 = 0;
        v3 = 1;
      }
      while ((v5 & 1) != 0);
      free(*(void **)a1);
    }
    free(a1);
  }
}

uint64_t apprentice_magic_strength(unsigned __int8 *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unsigned int v4;
  uint64_t result;
  uint64_t v6;
  unsigned __int8 *v7;
  signed __int8 v8;
  unint64_t v9;
  uint64_t v10;
  signed __int8 v11;
  signed __int8 v12;
  int v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;

  v1 = a1[6] - 1;
  v2 = 20;
  switch(a1[6])
  {
    case 1u:
    case 2u:
    case 4u:
    case 6u:
    case 7u:
    case 8u:
    case 9u:
    case 0xAu:
    case 0xBu:
    case 0xCu:
    case 0xEu:
    case 0xFu:
    case 0x10u:
    case 0x15u:
    case 0x16u:
    case 0x17u:
    case 0x18u:
    case 0x19u:
    case 0x1Au:
    case 0x1Bu:
    case 0x1Cu:
    case 0x1Du:
    case 0x1Eu:
    case 0x1Fu:
    case 0x20u:
    case 0x21u:
    case 0x22u:
    case 0x23u:
    case 0x24u:
    case 0x25u:
    case 0x26u:
    case 0x2Au:
    case 0x2Bu:
    case 0x2Cu:
    case 0x31u:
    case 0x32u:
      if (v1 > 0x31 || ((0xF1C0000F1014uLL >> (a1[6] - 1)) & 1) != 0)
        goto LABEL_23;
      v2 = 10 * qword_20BC9AFA0[v1] + 20;
      goto LABEL_5;
    case 3u:
      if (a1[11])
LABEL_23:
        abort();
      return 0;
    case 5u:
    case 0xDu:
      v6 = 10 * a1[5];
      goto LABEL_71;
    case 0x11u:
      v7 = a1 + 32;
      v8 = a1[32];
      if (v8)
      {
        v9 = 0;
        while (1)
        {
          v10 = (v8 - 36);
          if (v10 > 0x3A)
            goto LABEL_49;
          if (((1 << (v8 - 36)) & 0x4000000080004C1) == 0)
            break;
LABEL_55:
          v13 = *++v7;
          v8 = v13;
          if (!v13)
            goto LABEL_62;
        }
        if (v10 == 55)
        {
          while (v8 && v8 != 93)
          {
            v11 = *++v7;
            v8 = v11;
          }
          --v7;
          goto LABEL_55;
        }
        if (v10 == 56)
        {
          if (v7[1])
            ++v7;
        }
        else
        {
LABEL_49:
          if (v8 == 123)
          {
            while (v8 && v8 != 125)
            {
              v12 = *++v7;
              v8 = v12;
            }
            v7 -= v8 == 0;
            goto LABEL_55;
          }
        }
        ++v9;
        goto LABEL_55;
      }
      v9 = 0;
LABEL_62:
      if (v9 <= 1)
        v9 = 1;
      if (v9 > 5)
        v16 = 1;
      else
        v16 = 0xAu / v9;
      v2 = v16 * v9 + 20;
LABEL_5:
      v3 = 0;
      v4 = a1[4];
      if (v4 <= 0x3C)
      {
        if (v4 == 33)
          goto LABEL_20;
        if (v4 != 38)
        {
          if (v4 == 60)
          {
LABEL_13:
            v3 = v2 - 20;
            goto LABEL_20;
          }
          goto LABEL_16;
        }
LABEL_18:
        v3 = v2 - 10;
        goto LABEL_20;
      }
      if (a1[4] > 0x5Du)
      {
        if (v4 != 94)
        {
          if (v4 == 120)
            goto LABEL_20;
LABEL_16:
          fprintf((FILE *)*MEMORY[0x24BDAC8D8], "Bad relation %c\n");
LABEL_17:
          abort();
        }
        goto LABEL_18;
      }
      if (v4 != 61)
      {
        if (v4 != 62)
          goto LABEL_16;
        goto LABEL_13;
      }
      v3 = v2 + 10;
LABEL_20:
      switch(a1[11])
      {
        case '*':
          v3 *= a1[3];
          goto LABEL_27;
        case '+':
          v3 += a1[3];
          goto LABEL_27;
        case ',':
        case '.':
          goto LABEL_23;
        case '-':
          v3 -= a1[3];
          goto LABEL_27;
        case '/':
          v3 /= (uint64_t)a1[3];
          goto LABEL_27;
        default:
          if (a1[11])
            goto LABEL_23;
LABEL_27:
          if (v3 <= 1)
            v3 = 1;
          if (a1[160])
            result = v3;
          else
            result = v3 + 1;
          break;
      }
      return result;
    case 0x12u:
    case 0x13u:
      v6 = 5 * a1[5];
      goto LABEL_71;
    case 0x14u:
      v14 = a1[5];
      if (a1[5])
      {
        if (v14 > 5)
          v15 = 1;
        else
          v15 = 0xA / v14;
        v6 = v15 * (unint64_t)a1[5];
LABEL_71:
        v2 = v6 + 20;
      }
      else
      {
        v2 = 20;
      }
      goto LABEL_5;
    case 0x29u:
    case 0x2Du:
    case 0x2Eu:
      goto LABEL_5;
    case 0x30u:
      v2 = 30;
      goto LABEL_5;
    default:
      fprintf((FILE *)*MEMORY[0x24BDAC8D8], "Bad type %d\n");
      goto LABEL_17;
  }
}

uint64_t cmpstrp(const char **a1, const char **a2)
{
  return strcmp(*a1, *a2);
}

_DWORD *load_1(uint64_t a1, char *__filename, _DWORD *a3, uint64_t a4)
{
  char v6;
  FILE *v8;
  FILE *v9;
  uint64_t v10;
  __objc2_meth_list **p_class_meths;
  uint64_t v12;
  ssize_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char **v25;
  const char *v26;
  unint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  int v31;
  void *v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  _OWORD *v37;
  int v38;
  const char *v39;
  char v40;
  char v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  const char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  int v57;
  uint64_t v58;
  int *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char v65;
  int v66;
  uint64_t v67;
  int *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  size_t v74;
  char *v75;
  uint64_t v76;
  char *v77;
  int v78;
  uint64_t v79;
  int *v80;
  int v81;
  int v82;
  uint64_t v83;
  int v84;
  uint64_t v85;
  char *v86;
  int v87;
  char *v88;
  size_t v89;
  const char *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  size_t v97;
  const char *v98;
  int v99;
  unsigned __int8 *v100;
  unsigned int v101;
  char *v102;
  size_t v103;
  const char *v104;
  int v105;
  unsigned __int8 standard_integer_type;
  int v107;
  uint64_t v108;
  int v109;
  unsigned __int8 v110;
  char v112;
  int op;
  int v114;
  char v115;
  int v116;
  int v117;
  int v118;
  uint64_t v119;
  int v120;
  int v121;
  unsigned int v122;
  int v123;
  uint64_t v124;
  int v126;
  unint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  int v133;
  int v134;
  char v135;
  uint64_t v136;
  const char *v137;
  uint64_t v138;
  char *v139;
  int v140;
  unsigned int v141;
  char *v142;
  unsigned int v143;
  _BYTE *v144;
  int v145;
  unint64_t v146;
  char *v147;
  unint64_t v148;
  int v149;
  char *v150;
  int v151;
  char v152;
  char *v153;
  char *v154;
  char v155;
  char v156;
  int v157;
  char v158;
  char v159;
  unsigned int v160;
  unsigned int v161;
  int v162;
  char v163;
  int v164;
  uint64_t v165;
  uint64_t v166;
  int *v167;
  unint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  char *v180;
  char *v181;
  uint64_t v182;
  unsigned int v183;
  uint64_t v184;
  uint64_t v185;
  int v186;
  int v187;
  unint64_t v188;
  unint64_t v189;
  int *v190;
  uint64_t v191;
  char *v192;
  int v193;
  uint64_t v194;
  unint64_t v195;
  char *v196;
  int v197;
  unint64_t v198;
  uint64_t v199;
  uint64_t v200;
  _BYTE *i;
  unint64_t v202;
  unint64_t v203;
  int v204;
  unsigned __int8 *v205;
  int v206;
  int v207;
  char v208;
  unsigned __int8 *v209;
  int v210;
  _BOOL8 v211;
  unsigned __int8 *v212;
  int v213;
  unint64_t v214;
  unint64_t v215;
  uint64_t v216;
  unint64_t v217;
  const char *v218;
  _BOOL8 v219;
  unsigned __int8 *v220;
  int v221;
  uint64_t v222;
  unint64_t v223;
  uint64_t v224;
  unint64_t v225;
  unsigned int v226;
  BOOL v227;
  uint64_t v228;
  char v230;
  unsigned __int8 *v231;
  _BOOL8 v232;
  unsigned __int8 *v233;
  int v234;
  _BOOL8 v235;
  int v236;
  unint64_t v237;
  unint64_t v238;
  uint64_t v239;
  unint64_t v240;
  unsigned __int8 *v241;
  int v242;
  unint64_t v243;
  unint64_t v244;
  unsigned __int8 *v245;
  uint64_t v246;
  uint64_t v247;
  int v248;
  uint64_t v249;
  _DWORD *result;
  int *v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  char v257;
  const char *v258;
  unsigned int v259;
  unsigned int v260;
  _DWORD *v261;
  uint64_t v262;
  FILE *v263;
  void *ptr;
  uint64_t v265;
  char *__linep;
  size_t __linecapp;
  char *__endptr;
  char *__s1;
  char *v270[2];
  __int128 v271;
  __int128 v272;
  __int128 v273;
  char *v274[2];

  v6 = (char)__filename;
  __linep = 0;
  __linecapp = 0;
  *(_QWORD *)(a1 + 80) = __filename;
  v8 = fopen(__filename, "r");
  if (v8)
  {
    v9 = v8;
    v10 = 0;
    ptr = 0;
    v265 = 0;
    p_class_meths = &OBJC_PROTOCOL___NSObject.class_meths;
    v12 = 1;
    v261 = a3;
    v262 = a4;
    v263 = v8;
    while (1)
    {
      *(_QWORD *)(a1 + 88) = v12;
      v13 = getline(&__linep, &__linecapp, v9);
      if (!v13)
        goto LABEL_294;
      if (v13 == -1)
      {
        if (ptr)
          addentry(a1, &ptr, a4);
        free(__linep);
        return (_DWORD *)fclose(v9);
      }
      v20 = __linep;
      if (__linep[v13 - 1] == 10)
      {
        v10 = (v10 + 1);
        __linep[v13 - 1] = 0;
        v20 = __linep;
      }
      v21 = *v20;
      if (*v20)
        break;
LABEL_294:
      v12 = *(_QWORD *)(a1 + 88) + 1;
    }
    if (v21 != 33)
    {
      if (v21 == 35)
        goto LABEL_294;
      while (1)
      {
LABEL_17:
        __s1 = v20;
        if (*v20 == 62)
        {
          v30 = 0;
          do
            v31 = v20[++v30];
          while (v31 == 62);
          v20 += v30;
          __s1 = v20;
        }
        else
        {
          LODWORD(v30) = 0;
        }
        __endptr = 0;
        if ((v30 - 1) < *((_DWORD *)p_class_meths + 748))
        {
          *((_DWORD *)p_class_meths + 748) = v30;
LABEL_28:
          v32 = ptr;
          if (ptr)
          {
            v33 = v265;
            if ((_DWORD)v265)
            {
              if ((int)(v30 - *((unsigned __int16 *)ptr + 188 * (v265 - 1))) >= 2)
              {
                file_magwarn(a1, "New continuation level %u is more than one larger than current level %u", v14, v15, v16, v17, v18, v19, v30);
                v33 = v265;
                v32 = ptr;
              }
              if (v33 == HIDWORD(v265))
              {
                v34 = v33 + 10;
                v32 = malloc_type_realloc(v32, 376 * v34, 0x1000040E4699127uLL);
                if (!v32)
                {
                  v68 = __error();
                  file_error(a1, *v68, "cannot allocate %zu bytes", v69, v70, v71, v72, v73, 120 * v34);
                  a3 = v261;
                  goto LABEL_293;
                }
                ptr = v32;
                HIDWORD(v265) = v34;
                v33 = v265;
                a3 = v261;
              }
              LODWORD(v265) = v33 + 1;
              v35 = (uint64_t)v32 + 376 * v33;
              *(_OWORD *)(v35 + 18) = 0u;
              *(_OWORD *)(v35 + 34) = 0u;
              *(_OWORD *)(v35 + 50) = 0u;
              *(_OWORD *)(v35 + 66) = 0u;
              *(_OWORD *)(v35 + 82) = 0u;
              *(_OWORD *)(v35 + 98) = 0u;
              *(_OWORD *)(v35 + 114) = 0u;
              *(_OWORD *)(v35 + 130) = 0u;
              *(_OWORD *)(v35 + 146) = 0u;
              *(_OWORD *)(v35 + 162) = 0u;
              *(_OWORD *)(v35 + 178) = 0u;
              *(_OWORD *)(v35 + 194) = 0u;
              *(_OWORD *)(v35 + 210) = 0u;
              *(_OWORD *)(v35 + 226) = 0u;
              *(_OWORD *)(v35 + 242) = 0u;
              *(_QWORD *)(v35 + 368) = 0;
              *(_OWORD *)(v35 + 2) = 0u;
              *(_OWORD *)(v35 + 258) = 0u;
              *(_OWORD *)(v35 + 274) = 0u;
              *(_OWORD *)(v35 + 290) = 0u;
              *(_OWORD *)(v35 + 306) = 0u;
              *(_OWORD *)(v35 + 322) = 0u;
              *(_OWORD *)(v35 + 338) = 0u;
              *(_OWORD *)(v35 + 354) = 0u;
              v36 = (unsigned __int16)v30;
              *(_WORD *)v35 = v30;
              goto LABEL_38;
            }
            v42 = a1;
            v43 = "Continuations present with 0 count";
          }
          else
          {
            v42 = a1;
            v43 = "No current entry for continuation";
          }
          file_magerror(v42, v43, v14, v15, v16, v17, v18, v19);
          goto LABEL_293;
        }
        if (file_check_mem(a1, v30) == -1)
          goto LABEL_293;
        *((_DWORD *)p_class_meths + 748) = v30;
        if ((_DWORD)v30)
          goto LABEL_28;
        if (!ptr)
          break;
        addentry(a1, &ptr, a4);
        v20 = __linep;
      }
      v37 = malloc_type_malloc(0xEB0uLL, 0xD446BB41uLL);
      if (!v37)
      {
        v59 = __error();
        file_error(a1, *v59, "cannot allocate %zu bytes", v60, v61, v62, v63, v64, 176);
        goto LABEL_293;
      }
      v35 = (uint64_t)v37;
      LODWORD(v30) = 0;
      v36 = 0;
      ptr = v37;
      *v37 = 0u;
      v37[1] = 0u;
      v37[2] = 0u;
      v37[3] = 0u;
      v37[4] = 0u;
      v37[5] = 0u;
      v37[6] = 0u;
      v37[7] = 0u;
      v37[8] = 0u;
      v37[9] = 0u;
      v37[10] = 0u;
      v37[11] = 0u;
      v37[12] = 0u;
      v37[13] = 0u;
      v37[14] = 0u;
      v37[15] = 0u;
      v37[16] = 0u;
      v37[17] = 0u;
      v37[18] = 0u;
      v37[19] = 0u;
      v37[20] = 0u;
      v37[21] = 0u;
      v37[22] = 0u;
      *((_QWORD *)v37 + 46) = 0;
      v265 = 0xA00000001;
LABEL_38:
      *(_DWORD *)(v35 + 20) = v10;
      v38 = *v20;
      if (v38 == 38)
      {
        __s1 = v20 + 1;
        *(_BYTE *)(v35 + 2) |= 2u;
        v38 = *++v20;
      }
      if (v38 == 40)
      {
        v39 = v20 + 1;
        __s1 = v20 + 1;
        v40 = *(_BYTE *)(v35 + 2);
        if ((v40 & 2) != 0)
          v41 = v40 & 0xF8 | 5;
        else
          v41 = v40 | 1;
        *(_BYTE *)(v35 + 2) = v41;
        if (v20[1] == 38)
        {
          v39 = v20 + 2;
          __s1 = v20 + 2;
          *(_BYTE *)(v35 + 2) = v41 | 2;
        }
        if (!v36)
        {
LABEL_50:
          if ((*(_BYTE *)(v35 + 2) & 6) != 0)
          {
            if ((*(_BYTE *)(a1 + 68) & 0x40) != 0)
            {
              v44 = a1;
              v45 = "relative offset at level 0";
              goto LABEL_292;
            }
            goto LABEL_293;
          }
        }
      }
      else
      {
        v39 = v20;
        if (!v36)
          goto LABEL_50;
      }
      if (*v39 == 45)
      {
        __s1 = (char *)++v39;
        *(_BYTE *)(v35 + 2) |= 0x80u;
      }
      *(_DWORD *)(v35 + 12) = strtol(v39, &__endptr, 0);
      v52 = __endptr;
      if (__s1 == __endptr)
      {
        if ((*(_BYTE *)(a1 + 68) & 0x40) != 0)
        goto LABEL_293;
      }
      __s1 = __endptr;
      if ((*(_BYTE *)(v35 + 2) & 1) == 0)
      {
        v53 = __endptr;
        v54 = MEMORY[0x24BDAC740];
LABEL_58:
        if (*v53 < 0)
        {
          v58 = v10;
        }
        else
        {
          v55 = *v53;
          v56 = v53 + 1;
          do
          {
            if ((*(_DWORD *)(v54 + 4 * v55 + 60) & 0x4000) == 0)
              break;
            __s1 = v56;
            v57 = *v56++;
            v55 = v57;
          }
          while ((v57 & 0x80000000) == 0);
          v58 = v10;
          v53 = v56 - 1;
        }
        v74 = 2;
        v75 = (char *)&get_cond_cond_tbl;
        while (1)
        {
          if (strncmp(v53, v75, v74))
            goto LABEL_90;
          v76 = v53[v74];
          if (v53[v74] < 0)
            break;
          if ((*(_DWORD *)(MEMORY[0x24BDAC740] + 4 * v76 + 60) & 0x4000) != 0)
            goto LABEL_92;
LABEL_90:
          v77 = v75 + 24;
          v74 = *((_QWORD *)v75 + 4);
          v75 += 24;
          if (!v74)
          {
            v75 = v77;
            goto LABEL_93;
          }
        }
        if (!__maskrune(v76, 0x4000uLL))
          goto LABEL_90;
LABEL_92:
        v53 += v74;
        __s1 = v53;
LABEL_93:
        v78 = v75[16];
        *(_BYTE *)(v35 + 10) = v78;
        v79 = *(_QWORD *)(a1 + 24) + 16 * v30;
        v82 = *(_DWORD *)(v79 + 12);
        v80 = (int *)(v79 + 12);
        v81 = v82;
        v10 = v58;
        v83 = MEMORY[0x24BDAC740];
        p_class_meths = (__objc2_meth_list **)(&OBJC_PROTOCOL___NSObject + 32);
        switch(v78)
        {
          case 0:
            goto LABEL_103;
          case 1:
            if ((v81 & 0xFFFFFFFD) == 0)
            {
              v81 = 1;
              goto LABEL_125;
            }
            if ((*(_BYTE *)(a1 + 68) & 0x40) == 0)
              goto LABEL_293;
            v44 = a1;
            goto LABEL_292;
          case 2:
            if ((v81 - 3) > 0xFFFFFFFD)
            {
              v81 = 2;
              goto LABEL_125;
            }
            if ((*(_BYTE *)(a1 + 68) & 0x40) == 0)
              goto LABEL_293;
            v44 = a1;
            goto LABEL_292;
          case 3:
            if ((v81 - 3) <= 0xFFFFFFFD)
            {
              if ((*(_BYTE *)(a1 + 68) & 0x40) == 0)
                goto LABEL_293;
              v44 = a1;
              goto LABEL_292;
            }
LABEL_103:
            v81 = 0;
LABEL_125:
            *v80 = v81;
            v260 = v10;
            if (*v53 < 0)
              goto LABEL_135;
            v85 = *v53;
            v86 = v53 + 1;
            break;
          default:
            p_class_meths = (__objc2_meth_list **)(&OBJC_PROTOCOL___NSObject + 32);
            goto LABEL_125;
        }
        while ((*(_DWORD *)(v83 + 4 * v85 + 60) & 0x4000) != 0)
        {
          __s1 = v86;
          v87 = *v86++;
          v85 = v87;
          if (v87 < 0)
          {
            v53 = v86 - 1;
LABEL_135:
            v97 = 7;
            v98 = "invalid";
            while (strncmp(v53, v98, v97))
            {
              v97 = *((_QWORD *)v98 + 6);
              v98 += 32;
              if (!v97)
              {
                v98 = (const char *)&unk_20BC9AE68;
                goto LABEL_140;
              }
            }
            v53 += v97;
            __s1 = v53;
LABEL_140:
            v99 = *((_DWORD *)v98 + 6);
            *(_BYTE *)(v35 + 6) = v99;
            v100 = (unsigned __int8 *)(v35 + 6);
            v101 = v99;
            if ((_BYTE)v99)
            {
LABEL_141:
              v102 = __s1;
              if (v101)
                goto LABEL_165;
              goto LABEL_142;
            }
            v105 = *v53;
            if (v105 != 115)
            {
              if (v105 == 100)
              {
                standard_integer_type = get_standard_integer_type((uint64_t)v53, &__s1);
                v101 = standard_integer_type;
                *v100 = standard_integer_type;
              }
              goto LABEL_141;
            }
            v107 = v53[1];
            v102 = v53 + 1;
            v108 = v107;
            if (v107 < 0)
            {
              if (__maskrune(v108, 0x100uLL))
                goto LABEL_155;
            }
            else if ((*(_DWORD *)(MEMORY[0x24BDAC740] + 4 * v108 + 60) & 0x100) != 0)
            {
LABEL_155:
              v101 = *v100;
              goto LABEL_141;
            }
            v101 = 5;
            *v100 = 5;
            __s1 = v102;
LABEL_164:
            v100 = (unsigned __int8 *)(v35 + 6);
            goto LABEL_165;
          }
        }
        v53 = v86 - 1;
        if (v85 != 117)
          goto LABEL_135;
        v88 = v86;
        v89 = 7;
        v90 = "invalid";
        while (strncmp(v53 + 1, v90, v89))
        {
          v89 = *((_QWORD *)v90 + 6);
          v90 += 32;
          if (!v89)
          {
            v90 = (const char *)&unk_20BC9AE68;
            goto LABEL_157;
          }
        }
        v53 = &v88[v89];
        __s1 = &v88[v89];
LABEL_157:
        v109 = *((_DWORD *)v90 + 6);
        *(_BYTE *)(v35 + 6) = v109;
        v100 = (unsigned __int8 *)(v35 + 6);
        v101 = v109;
        if (!(_BYTE)v109)
        {
          v110 = get_standard_integer_type((uint64_t)v53, &__s1);
          v101 = v110;
          *v100 = v110;
        }
        if (v101)
        {
          *(_BYTE *)(v35 + 2) |= 8u;
          v102 = __s1;
          goto LABEL_164;
        }
        v102 = __s1;
LABEL_142:
        v103 = 3;
        v104 = (const char *)&special_tbl;
        while (strncmp(v102, v104, v103))
        {
          v103 = *((_QWORD *)v104 + 6);
          v104 += 32;
          if (!v103)
          {
            v104 = (const char *)&unk_20BC9AEE8;
            goto LABEL_150;
          }
        }
        v102 += v103;
        __s1 = v102;
LABEL_150:
        v101 = *((unsigned __int8 *)v104 + 24);
        *v100 = v101;
        if (!v101)
        {
          a4 = v262;
          v10 = v260;
          if ((*(_BYTE *)(a1 + 68) & 0x40) != 0)
          goto LABEL_293;
        }
LABEL_165:
        *(_BYTE *)(v35 + 9) = 0;
        if (*v102 == 126)
        {
          if (v101 > 0x2E || ((1 << v101) & 0x6200001E2020) == 0)
          {
            *(_BYTE *)(v35 + 9) = 64;
          }
          else if ((*(_BYTE *)(a1 + 68) & 0x40) != 0)
          {
            file_magwarn(a1, "'~' invalid for string types", v91, v92, v93, v94, v95, v96, v257);
            v102 = __s1;
            v101 = *v100;
          }
          __s1 = ++v102;
        }
        *(_DWORD *)(v35 + 24) = 0;
        *(_DWORD *)(v35 + 28) = (v101 == 13) << 7;
        v112 = *v102;
        op = get_op(*v102);
        if (op == -1)
        {
          v115 = v112;
          a4 = v262;
          v10 = v260;
          goto LABEL_281;
        }
        v10 = v260;
        if (v101 > 0x2E || ((1 << v101) & 0x6200001E2020) == 0)
        {
          v274[0] = 0;
          *(_BYTE *)(v35 + 9) |= op;
          v127 = strtoull(v102 + 1, v274, 0);
          v270[0] = v274[0];
          *(_QWORD *)(v35 + 24) = file_signextend(a1, v35, v127, v128, v129, v130, v131, v132);
          eatsize((unsigned __int8 **)v270);
          v102 = v270[0];
          __s1 = v270[0];
          a4 = v262;
          goto LABEL_280;
        }
        if (op != 6)
        {
          a4 = v262;
          if ((*(_BYTE *)(a1 + 68) & 0x40) != 0)
          goto LABEL_293;
        }
        if (v101 != 41)
        {
          v116 = 0;
          v270[0] = 0;
          while (1)
          {
            v118 = *++v102;
            v117 = v118;
            v119 = v118;
            v120 = v118 < 0 ? __maskrune(v119, 0x4000uLL) : *(_DWORD *)(MEMORY[0x24BDAC740] + 4 * v119 + 60) & 0x4000;
            v9 = v263;
            if (v120)
              break;
            if (v117 > 97)
            {
              if (v117 <= 107)
              {
                if (v117 == 98)
                {
                  v122 = *(_DWORD *)(v35 + 28) | 0x40;
                }
                else if (v117 == 99)
                {
                  v122 = *(_DWORD *)(v35 + 28) | 4;
                }
                else
                {
                  if (v117 != 104 || *(_BYTE *)(v35 + 6) != 13)
                  {
LABEL_253:
                    a4 = v262;
                    if ((*(_BYTE *)(a1 + 68) & 0x40) != 0)
                    v126 = -1;
                    goto LABEL_256;
                  }
                  v122 = *(_DWORD *)(v35 + 28) & 0xFFFFF07F | 0x200;
                }
              }
              else if (v117 > 115)
              {
                if (v117 == 116)
                {
                  v122 = *(_DWORD *)(v35 + 28) | 0x20;
                }
                else
                {
                  if (v117 != 119)
                    goto LABEL_253;
                  v122 = *(_DWORD *)(v35 + 28) | 2;
                }
              }
              else if (v117 == 108)
              {
                v123 = *(unsigned __int8 *)(v35 + 6);
                if (v123 != 17 && v123 != 13)
                  goto LABEL_253;
                v122 = *(_DWORD *)(v35 + 28) & 0xFFFFF07F | 0x800;
              }
              else
              {
                if (v117 != 115)
                  goto LABEL_253;
                v122 = *(_DWORD *)(v35 + 28) | 0x10;
              }
            }
            else
            {
              switch(v117)
              {
                case '0':
                case '1':
                case '2':
                case '3':
                case '4':
                case '5':
                case '6':
                case '7':
                case '8':
                case '9':
                  if (v116 && (*(_BYTE *)(a1 + 68) & 0x40) != 0)
                    file_magwarn(a1, "multiple ranges", v14, v15, v16, v17, v18, v19, v257);
                  v121 = strtoul(v102, v270, 0);
                  *(_DWORD *)(v35 + 24) = v121;
                  if (!v121)
                    file_magwarn(a1, "zero range", v14, v15, v16, v17, v18, v19, v257);
                  v102 = v270[0] - 1;
                  v116 = 1;
                  goto LABEL_232;
                case 'B':
                  if (*(_BYTE *)(v35 + 6) != 13)
                    goto LABEL_253;
                  v122 = *(_DWORD *)(v35 + 28) & 0xFFFFF07F | 0x80;
                  break;
                case 'C':
                  v122 = *(_DWORD *)(v35 + 28) | 8;
                  break;
                case 'H':
                  if (*(_BYTE *)(v35 + 6) != 13)
                    goto LABEL_253;
                  v122 = *(_DWORD *)(v35 + 28) & 0xFFFFF07F | 0x100;
                  break;
                case 'J':
                  if (*(_BYTE *)(v35 + 6) != 13)
                    goto LABEL_253;
                  v122 = *(_DWORD *)(v35 + 28) | 0x1000;
                  break;
                case 'L':
                  if (*(_BYTE *)(v35 + 6) != 13)
                    goto LABEL_253;
                  v122 = *(_DWORD *)(v35 + 28) & 0xFFFFF07F | 0x400;
                  break;
                case 'T':
                  v122 = *(_DWORD *)(v35 + 28) | 0x2000;
                  break;
                case 'W':
                  v122 = *(_DWORD *)(v35 + 28) | 1;
                  break;
                default:
                  goto LABEL_253;
              }
            }
            *(_DWORD *)(v35 + 28) = v122;
LABEL_232:
            if (v102[1] == 47)
            {
              v124 = v102[2];
              if (!(v102[2] < 0
                   ? __maskrune(v124, 0x4000uLL)
                   : *(_DWORD *)(MEMORY[0x24BDAC740] + 4 * v124 + 60) & 0x4000))
                ++v102;
            }
          }
          if ((*(_BYTE *)(a1 + 68) & 0x40) == 0)
          {
            v126 = 0;
            a4 = v262;
LABEL_256:
            v10 = v260;
            goto LABEL_278;
          }
          v133 = *(unsigned __int8 *)(v35 + 6);
          a4 = v262;
          v10 = v260;
          if (v133 == 17)
          {
            v134 = *(_DWORD *)(v35 + 28);
            if ((v134 & 0x800) == 0)
              goto LABEL_262;
          }
          else
          {
            if (v133 == 13)
            {
              v134 = *(_DWORD *)(v35 + 28);
              goto LABEL_250;
            }
            v134 = *(_DWORD *)(v35 + 28);
LABEL_262:
            if ((v134 & 0xF80) != 0)
            {
              v136 = a1;
              v137 = "'/BHhLl' modifiers are only allowed for pascal strings\n";
              goto LABEL_270;
            }
            if (*(unsigned __int8 *)(v35 + 6) > 0x11u)
            {
              if ((v133 - 18) < 2)
              {
                if (v134)
                {
                  v136 = a1;
                  v137 = "no modifiers allowed for 16-bit strings\n";
                  goto LABEL_270;
                }
LABEL_277:
                v126 = 0;
LABEL_278:
                __s1 = v102;
                goto LABEL_279;
              }
              if (v133 == 20)
              {
                if (*(_DWORD *)(v35 + 24))
                  goto LABEL_277;
                file_magwarn(a1, "missing range; defaulting to %d\n", v14, v15, v16, v17, v18, v19, 100);
                *(_DWORD *)(v35 + 24) = 100;
                goto LABEL_271;
              }
LABEL_392:
              file_magwarn(a1, "coding error: m->type=%d\n", v14, v15, v16, v17, v18, v19, *(_BYTE *)(v35 + 6));
LABEL_271:
              v126 = -1;
              goto LABEL_278;
            }
            if (v133 == 5)
            {
LABEL_250:
              if ((v134 & 0x10) == 0)
                goto LABEL_277;
              file_magwarn(a1, "'/%c' only allowed on regex and search\n", v14, v15, v16, v17, v18, v19, 115);
              goto LABEL_271;
            }
            if (v133 != 17)
              goto LABEL_392;
          }
          if ((v134 & 1) != 0)
          {
            v135 = 87;
          }
          else
          {
            if ((v134 & 2) == 0)
              goto LABEL_277;
            v135 = 119;
          }
          v257 = v135;
          v136 = a1;
          v137 = "'/%c' not allowed on regex\n";
LABEL_270:
          file_magwarn(v136, v137, v14, v15, v16, v17, v18, v19, v257);
          goto LABEL_271;
        }
        ++v102;
        a4 = v262;
        while (1)
        {
          v114 = *v102;
          if (v114 < 0)
          {
            if (__maskrune(*v102, 0x4000uLL))
            {
LABEL_241:
              v126 = 0;
              goto LABEL_245;
            }
          }
          else if ((*(_DWORD *)(MEMORY[0x24BDAC740] + 4 * *v102 + 60) & 0x4000) != 0)
          {
            goto LABEL_241;
          }
          if (v114 != 114)
            break;
          *(_DWORD *)(v35 + 28) |= 1u;
          ++v102;
        }
        if ((*(_BYTE *)(a1 + 68) & 0x40) != 0)
        v126 = -1;
LABEL_245:
        __s1 = v102;
        v9 = v263;
LABEL_279:
        if (v126 == -1)
          goto LABEL_293;
LABEL_280:
        v115 = *v102;
LABEL_281:
        v138 = MEMORY[0x24BDAC740];
        if ((v115 & 0x80) == 0)
        {
          v139 = v102 + 1;
          do
          {
            if ((*(_DWORD *)(MEMORY[0x24BDAC740] + 4 * v115 + 60) & 0x4000) == 0)
              break;
            __s1 = v139;
            v140 = *v139++;
            v115 = v140;
          }
          while ((v140 & 0x80000000) == 0);
          v102 = v139 - 1;
        }
        v141 = v115 - 33;
        if (v141 <= 0x3D)
        {
          if (((1 << v141) & 0x2000000010000020) != 0)
          {
            *(_BYTE *)(v35 + 4) = v115;
            v142 = v102 + 1;
            __s1 = v102 + 1;
            if (v102[1] == 61)
              goto LABEL_296;
            goto LABEL_300;
          }
          if (((1 << v141) & 0x28000000) != 0)
          {
            *(_BYTE *)(v35 + 4) = v115;
            v142 = v102 + 1;
            __s1 = v102 + 1;
            if (v102[1] == 61)
            {
              if ((*(_BYTE *)(a1 + 68) & 0x40) != 0)
              {
                v257 = v115;
                v44 = a1;
                v45 = "%c= not supported";
                goto LABEL_292;
              }
LABEL_296:
              v142 = v102 + 2;
LABEL_299:
              __s1 = v142;
            }
LABEL_300:
            v102 = v142;
            if (v115 != 120)
            {
LABEL_301:
              v274[0] = 0;
              v143 = *(unsigned __int8 *)(v35 + 6);
              if (v143 <= 0x30 && ((1 << v143) & 0x16000001E2020) != 0)
              {
                v144 = (_BYTE *)(v35 + 32);
                LOBYTE(v145) = *v102;
                v258 = (const char *)(v35 + 32);
                if (!*v102)
                {
                  v150 = v102;
                  goto LABEL_364;
                }
                v146 = v35 + 159;
                v147 = v102;
                while (2)
                {
                  if ((v145 & 0x80) != 0)
                  {
                    v148 = v146;
                    v149 = __maskrune(v145, 0x4000uLL);
                    v146 = v148;
                    if (v149)
                    {
LABEL_363:
                      v150 = v147;
                      v138 = MEMORY[0x24BDAC740];
LABEL_364:
                      *v144 = 0;
                      v163 = v35 + 32;
                      *(_BYTE *)(v35 + 5) = (_BYTE)v144 - (_BYTE)v258;
                      v164 = *(unsigned __int8 *)(v35 + 6);
                      v10 = v260;
                      if (v164 == 13)
                      {
                        v165 = file_pstring_length_size(a1, *(_DWORD *)(v35 + 28), v14, v15, v16, v17, v18, v19);
                        if (v165 != -1)
                        {
                          *(_BYTE *)(v35 + 5) += v165;
                          v164 = *(unsigned __int8 *)(v35 + 6);
                          v138 = MEMORY[0x24BDAC740];
                          goto LABEL_367;
                        }
LABEL_373:
                        __s1 = 0;
                        if ((*(_BYTE *)(a1 + 68) & 0x40) != 0)
LABEL_375:
                        a4 = v262;
                        goto LABEL_293;
                      }
LABEL_367:
                      __s1 = v150;
                      if (v164 == 17)
                      {
                        v272 = 0u;
                        v273 = 0u;
                        *(_OWORD *)v270 = 0u;
                        v271 = 0u;
                        v166 = file_regcomp((uint64_t)v270, v258, 1);
                        if ((_DWORD)v166)
                        {
                          if ((*(_BYTE *)(a1 + 68) & 0x40) != 0)
                            file_regerror((uint64_t)v270, v166, a1);
                          file_regfree((uint64_t)v270);
                          goto LABEL_375;
                        }
                        file_regfree((uint64_t)v270);
                        goto LABEL_377;
                      }
                      goto LABEL_409;
                    }
                  }
                  else if ((*(_DWORD *)(v138 + 4 * v145 + 60) & 0x4000) != 0)
                  {
                    goto LABEL_363;
                  }
                  if ((unint64_t)v144 >= v146)
                  {
                    v10 = v260;
                    v163 = v35 + 32;
                    goto LABEL_373;
                  }
                  if (v145 != 92)
                  {
                    v150 = v147 + 1;
                    v138 = MEMORY[0x24BDAC740];
                    goto LABEL_322;
                  }
                  v150 = v147 + 2;
                  v151 = v147[1];
                  LOBYTE(v145) = v147[1];
                  v138 = MEMORY[0x24BDAC740];
                  if (v151 <= 97)
                  {
                    v152 = v151 - 48;
                    if ((v151 - 48) >= 8)
                    {
                      if (v151 == 97)
                      {
                        LOBYTE(v145) = 7;
                      }
                      else if (!v147[1])
                      {
                        v150 = v147 + 1;
                        goto LABEL_364;
                      }
                    }
                    else
                    {
                      if ((*v150 & 0xF8) == 0x30)
                      {
                        v153 = v147 + 4;
                        v155 = v147[3];
                        v154 = v147 + 3;
                        v156 = (*v150 - 48) | (8 * v152);
                        v157 = v155 & 0xF8;
                        v158 = (v155 - 48) | (8 * v156);
                        if (v157 == 48)
                          v150 = v153;
                        else
                          v150 = v154;
                        if (v157 == 48)
                          v152 = v158;
                        else
                          v152 = v156;
                      }
                      LOBYTE(v145) = v152;
                    }
                    goto LABEL_322;
                  }
                  switch(v147[1])
                  {
                    case 'n':
                      LOBYTE(v145) = 10;
                      goto LABEL_322;
                    case 'o':
                    case 'p':
                    case 'q':
                    case 's':
                    case 'u':
                    case 'w':
                      goto LABEL_322;
                    case 'r':
                      LOBYTE(v145) = 13;
                      goto LABEL_322;
                    case 't':
                      LOBYTE(v145) = 9;
                      goto LABEL_322;
                    case 'v':
                      LOBYTE(v145) = 11;
                      goto LABEL_322;
                    case 'x':
                      v160 = *v150;
                      if (v160 > 0x7F)
                        goto LABEL_350;
                      if (v160 - 48 > 9)
                      {
                        if (((char)v160 - 97) <= 5)
                        {
                          LOBYTE(v145) = v160 - 87;
                          goto LABEL_347;
                        }
                        if (((char)v160 - 65) > 5)
                        {
LABEL_350:
                          LOBYTE(v145) = 120;
                          goto LABEL_322;
                        }
                        v145 = (char)v160 - 55;
                      }
                      else
                      {
                        v145 = (char)v160 - 48;
                      }
                      if ((v145 & 0x80000000) == 0)
                      {
LABEL_347:
                        v150 = v147 + 3;
                        v161 = v147[3];
                        if (v161 > 0x7F)
                          goto LABEL_322;
                        if (v161 - 48 > 9)
                        {
                          if (((char)v161 - 97) <= 5)
                          {
                            LOBYTE(v162) = v161 - 87;
LABEL_356:
                            v150 = v147 + 4;
                            LOBYTE(v145) = v162 + 16 * v145;
LABEL_322:
                            *v144++ = v145;
                            LOBYTE(v145) = *v150;
                            v147 = v150;
                            if (!*v150)
                              goto LABEL_364;
                            continue;
                          }
                          if (((char)v161 - 65) > 5)
                            goto LABEL_322;
                          v162 = (char)v161 - 55;
                        }
                        else
                        {
                          v162 = (char)v161 - 48;
                        }
                        if (v162 < 0)
                          goto LABEL_322;
                        goto LABEL_356;
                      }
                      goto LABEL_350;
                    default:
                      if (v151 == 102)
                        v159 = 12;
                      else
                        v159 = v147[1];
                      if (v151 == 98)
                        LOBYTE(v145) = 8;
                      else
                        LOBYTE(v145) = v159;
                      goto LABEL_322;
                  }
                }
              }
              if (*(_BYTE *)(v35 + 4) == 120)
                goto LABEL_409;
              if (v143 - 33 < 3)
              {
                *__error() = 0;
                *(float *)(v35 + 32) = strtof(__s1, v274);
LABEL_383:
                v167 = __error();
                v138 = MEMORY[0x24BDAC740];
                if (!*v167)
                  __s1 = v274[0];
                goto LABEL_409;
              }
              if (v143 - 36 < 3)
              {
                *__error() = 0;
                *(double *)(v35 + 32) = strtod(__s1, v274);
                goto LABEL_383;
              }
              if (v143 == 49)
              {
                if (file_parse_guid(v102, v35 + 32) == -1)
                  goto LABEL_375;
                __s1 += 36;
LABEL_377:
                v138 = MEMORY[0x24BDAC740];
              }
              else
              {
                *__error() = 0;
                v168 = strtoull(__s1, v274, 0);
                *(_QWORD *)(v35 + 32) = file_signextend(a1, v35, v168, v169, v170, v171, v172, v173);
                v180 = __s1;
                v181 = v274[0];
                if (__s1 == v274[0])
                {
                }
                else
                {
                  v182 = *(unsigned __int8 *)(v35 + 6);
                  v183 = v182 - 1;
                  if ((v182 - 1) > 0x31 || ((0xF1C0000F1014uLL >> v183) & 1) != 0)
                  {
                    v184 = v10;
                    v185 = -1;
                    v180 = __s1;
                  }
                  else
                  {
                    v184 = v10;
                    v185 = qword_20BC9AFA0[v183];
                  }
                  do
                  {
                    v186 = *v180;
                    if (*v180 < 0)
                      v187 = __maskrune(*v180, 0x4000uLL);
                    else
                      v187 = *(_DWORD *)(MEMORY[0x24BDAC740] + 4 * *v180 + 60) & 0x4000;
                    ++v180;
                  }
                  while (v187);
                  if (v186 == 45)
                    v188 = -(uint64_t)v168;
                  else
                    v188 = v168;
                  v10 = v184;
                  p_class_meths = (__objc2_meth_list **)(&OBJC_PROTOCOL___NSObject + 32);
                  v189 = -256;
                  switch(v185)
                  {
                    case 1:
                      goto LABEL_406;
                    case 2:
                      v189 = -65536;
                      goto LABEL_406;
                    case 4:
                      v189 = 0xFFFFFFFF00000000;
LABEL_406:
                      if ((v189 & v188) != 0)
                      break;
                    case 8:
                      break;
                    default:
LABEL_519:
                      abort();
                  }
                }
                v190 = __error();
                v138 = MEMORY[0x24BDAC740];
                if (!*v190)
                {
                  __s1 = v181;
                  eatsize((unsigned __int8 **)&__s1);
                  goto LABEL_377;
                }
              }
LABEL_409:
              v142 = __s1;
              a4 = v262;
            }
LABEL_410:
            v191 = *v142;
            if ((*v142 & 0x80000000) == 0)
            {
              v192 = v142 + 1;
              do
              {
                if ((*(_DWORD *)(v138 + 4 * v191 + 60) & 0x4000) == 0)
                  break;
                __s1 = v192;
                v193 = *v192++;
                v191 = v193;
              }
              while ((v193 & 0x80000000) == 0);
              v142 = v192 - 1;
            }
            if (v191 == 8)
            {
              v194 = 1;
LABEL_420:
              __s1 = &v142[v194];
              *(_BYTE *)(v35 + 2) |= 0x10u;
            }
            else if (v191 == 92 && v142[1] == 98)
            {
              v194 = 2;
              goto LABEL_420;
            }
            v195 = 0;
            do
            {
              v196 = __s1++;
              v197 = *v196;
              v198 = v195 + 1;
              *(_BYTE *)(v35 + 160 + v195) = v197;
              if (v195 > 0x3E)
                break;
              ++v195;
            }
            while (v197);
            if (v198 == 64)
            {
              *(_BYTE *)(v35 + 223) = 0;
              if ((*(_BYTE *)(a1 + 68) & 0x40) != 0)
            }
            if ((*(_BYTE *)(a1 + 68) & 0x40) != 0)
            {
              v199 = v35 + 161;
              v200 = v35;
              for (i = (_BYTE *)(v35 + 160); *i; ++i)
              {
                if (*i == 37)
                {
                  v202 = *(unsigned __int8 *)(v35 + 6);
                  if (v202 >= 0x33)
                  {
                    v44 = a1;
                    v45 = "Internal error inconsistency between m->type and format strings";
                    goto LABEL_292;
                  }
                  LODWORD(v203) = file_formats[v202];
                  if ((_DWORD)v203)
                  {
                    v206 = i[1];
                    v205 = i + 1;
                    v204 = v206;
                    if (v206)
                    {
                      v207 = v203 - 1;
                      v208 = 0;
                      LOBYTE(v203) = 0;
                      switch(v207)
                      {
                        case 0:
                          v230 = v202 - 1;
                          if ((v202 - 1) >= 0x29u || ((0x1C0004006CBuLL >> v230) & 1) == 0)
                            goto LABEL_519;
                          v203 = (0x3FFFBFF935uLL >> v230) & 1;
                          v208 = 1;
LABEL_469:
                          if (v204 == 45)
                            v231 = v205 + 1;
                          else
                            v231 = v205;
                          v232 = *v231 == 46;
                          if (*v231 == 46)
                            ++v231;
                          v233 = v231 + 1;
                          v234 = *v231;
                          v235 = v234 == 35;
                          if (v234 != 35)
                            v233 = v231;
                          v236 = *v233;
                          if ((v236 - 48) > 9)
                            goto LABEL_482;
                          v237 = 0;
                          v238 = 0;
                          v239 = v200 + v232 + (v204 == 45) + v235;
                          do
                          {
                            v238 = 10 * v238 + (char)v236 - 48;
                            v240 = v239 + v237++;
                            v236 = *(unsigned __int8 *)(v240 + 162);
                          }
                          while ((v236 - 48) < 0xA);
                          if (v237 > 5)
                            goto LABEL_500;
                          v218 = "too long";
                          if (v238 > 0x400)
                            goto LABEL_510;
                          v233 = (unsigned __int8 *)(v239 + v237 + 161);
LABEL_482:
                          if (v236 == 46)
                            v241 = v233 + 1;
                          else
                            v241 = v233;
                          v242 = *v241;
                          if ((v242 - 48) > 9)
                            goto LABEL_491;
                          v243 = 0;
                          v244 = 0;
                          do
                          {
                            v244 = 10 * v244 + (char)v242 - 48;
                            v245 = &v241[v243++];
                            v242 = v245[1];
                          }
                          while ((v242 - 48) < 0xA);
                          if (v243 > 5)
                            goto LABEL_500;
                          v218 = "too long";
                          if (v244 > 0x400)
                            goto LABEL_510;
                          v241 += v243;
LABEL_491:
                          if ((v208 & 1) != 0)
                            goto LABEL_495;
                          v218 = "too long";
                          if (v242 != 108 || v241[1] != 108)
                            goto LABEL_510;
                          LOBYTE(v242) = v241[2];
LABEL_495:
                          v246 = ((char)v242 - 88);
                          if (v246 > 0x20)
                          {
LABEL_500:
                            v218 = "too long";
                            goto LABEL_510;
                          }
                          if (((1 << (v242 - 88)) & 0x120821001) == 0)
                          {
                            v218 = "too long";
                            if (v246 != 11 || (v203 & 1) == 0)
                              goto LABEL_510;
                          }
LABEL_506:
                          v249 = 162;
                          if (!v204)
                            goto LABEL_428;
                          break;
                        case 1:
                          v247 = v204 == 45;
                          do
                          {
                            v248 = *(unsigned __int8 *)(v199 + v247);
                            ++v199;
                          }
                          while ((v248 - 48) < 0xA);
                          if (v248 == 46)
                          {
                            do
                              v248 = *(unsigned __int8 *)(v199 + v247++);
                            while ((v248 - 48) < 0xA);
                          }
                          v218 = "too long";
                          if (v248 == 115)
                            goto LABEL_506;
                          goto LABEL_510;
                        case 2:
                          goto LABEL_469;
                        case 3:
                        case 4:
                          if (v204 == 45)
                            v209 = v205 + 1;
                          else
                            v209 = v205;
                          v210 = *v209;
                          v211 = v210 == 46;
                          if (v210 == 46)
                            v212 = v209 + 1;
                          else
                            v212 = v209;
                          v213 = *v212;
                          if ((v213 - 48) > 9)
                            goto LABEL_450;
                          v214 = 0;
                          v215 = 0;
                          v216 = v200 + (v204 == 45) + v211;
                          do
                          {
                            v215 = 10 * v215 + (char)v213 - 48;
                            v217 = v216 + v214++;
                            v213 = *(unsigned __int8 *)(v217 + 162);
                          }
                          while ((v213 - 48) < 0xA);
                          if (v214 > 5)
                            goto LABEL_500;
                          v218 = "too long";
                          if (v215 > 0x400)
                            goto LABEL_510;
                          v212 = (unsigned __int8 *)(v216 + v214 + 161);
LABEL_450:
                          v219 = v213 == 46;
                          if (v213 == 46)
                            v220 = v212 + 1;
                          else
                            v220 = v212;
                          v221 = *v220;
                          if ((v221 - 48) > 9)
                            goto LABEL_458;
                          v222 = 0;
                          v223 = 0;
                          v224 = (uint64_t)&v212[v219 + 1];
                          do
                          {
                            v223 = 10 * v223 + (char)v221 - 48;
                            v225 = v222 + 1;
                            v221 = *(unsigned __int8 *)(v224 + v222++);
                          }
                          while ((v221 - 48) < 0xA);
                          if (v225 > 5)
                            goto LABEL_500;
                          v218 = "too long";
                          if (v223 > 0x400)
                            goto LABEL_510;
LABEL_458:
                          v226 = (char)v221 - 69;
                          v227 = v226 > 0x22;
                          v228 = (1 << v226) & 0x700000007;
                          if (!v227 && v228 != 0)
                            goto LABEL_506;
                          goto LABEL_500;
                        default:
                          goto LABEL_519;
                      }
                      while (v204 != 37)
                      {
                        v204 = *(unsigned __int8 *)(v200 + v249++);
                        if (!v204)
                          goto LABEL_428;
                      }
                    }
                    else
                    {
                      v218 = "missing format spec";
LABEL_510:
                    }
                  }
                  else
                  {
                  }
                  goto LABEL_293;
                }
                ++v199;
                ++v200;
              }
            }
LABEL_428:
            *(_BYTE *)(v35 + 224) = 0;
            goto LABEL_294;
          }
          if (v115 == 33)
          {
            *(_BYTE *)(v35 + 4) = v115;
            v142 = v102 + 1;
            goto LABEL_299;
          }
        }
        *(_BYTE *)(v35 + 4) = 61;
        if (*v102 != 120)
          goto LABEL_301;
        v142 = v102 + 1;
        if (v102[1] < 0 || v102[1] && (*(_DWORD *)(v138 + 4 * v102[1] + 60) & 0x4000) == 0)
          goto LABEL_301;
        *(_BYTE *)(v35 + 4) = 120;
        __s1 = v102 + 1;
        goto LABEL_410;
      }
      v259 = v10;
      v65 = 0;
      *(_WORD *)(v35 + 7) = 4;
      *(_DWORD *)(v35 + 16) = 0;
      v66 = *v52;
      switch(v66)
      {
        case '.':
LABEL_74:
          __s1 = v52 + 1;
          v67 = (v52[1] - 66);
          v10 = v259;
          if (v67 >= 0x32 || ((0x28CFB000284FBuLL >> (v52[1] - 66)) & 1) == 0)
          {
            a4 = v262;
            if ((*(_BYTE *)(a1 + 68) & 0x40) != 0)
LABEL_293:
            ++*a3;
            goto LABEL_294;
          }
          *(_BYTE *)(v35 + 7) = byte_20BC9AF6D[v67];
          __s1 = v52 + 2;
          v66 = v52[2];
          v52 += 2;
          break;
        case ',':
          v65 = 32;
          *(_BYTE *)(v35 + 8) = 32;
          goto LABEL_74;
        case '~':
          v65 |= 0x40u;
          *(_BYTE *)(v35 + 8) = v65;
          __s1 = v52 + 1;
          v66 = *++v52;
          break;
      }
      v84 = get_op((char)v66);
      if (v84 != -1)
      {
        v65 |= v84;
        *(_BYTE *)(v35 + 8) = v65;
        __s1 = v52 + 1;
        v66 = *++v52;
      }
      if (v66 == 40)
      {
        *(_BYTE *)(v35 + 8) = v65 | 0x80;
        __s1 = v52 + 1;
        v66 = *++v52;
      }
      a4 = v262;
      if (v66 == 45 || (v66 - 48) <= 9)
      {
        *(_DWORD *)(v35 + 16) = strtol(v52, &__endptr, 0);
        v52 = __endptr;
        v54 = MEMORY[0x24BDAC740];
        if (__s1 == __endptr)
        {
          v10 = v259;
          if ((*(_BYTE *)(a1 + 68) & 0x40) != 0)
          goto LABEL_293;
        }
      }
      else
      {
        v54 = MEMORY[0x24BDAC740];
      }
      v53 = v52 + 1;
      __s1 = v52 + 1;
      v10 = v259;
      if (*v52 != 41 || *(char *)(v35 + 8) < 0 && (v53 = v52 + 2, __s1 = v52 + 2, v52[1] != 41))
      {
        if ((*(_BYTE *)(a1 + 68) & 0x40) != 0)
        {
          v44 = a1;
          v45 = "missing ')' in indirect offset";
LABEL_292:
          file_magwarn(v44, v45, v14, v15, v16, v17, v18, v19, v257);
        }
        goto LABEL_293;
      }
      goto LABEL_58;
    }
    if (v20[1] != 58)
      goto LABEL_17;
    v22 = v10;
    v23 = 0;
    v24 = v13 - 2;
    v25 = &off_24C4E0158;
    v26 = "mime";
    while (1)
    {
      v27 = (unint64_t)*(v25 - 2);
      v28 = v24 - v27;
      if (v24 > v27 && !memcmp(v26, v20 + 2, (size_t)*(v25 - 2)))
        break;
      ++v23;
      v29 = *v25;
      v25 += 3;
      v26 = v29;
      if (v23 == 4)
      {
        a3 = v261;
        a4 = v262;
        ++*v261;
        v9 = v263;
        goto LABEL_81;
      }
    }
    v9 = v263;
    if (ptr)
    {
      a3 = v261;
      if (!((unsigned int (*)(uint64_t, void **, char *, uint64_t))(&bang)[3 * v23 + 2])(a1, &ptr, &v20[v27 + 2], v28))
      {
LABEL_80:
        a4 = v262;
LABEL_81:
        v10 = v22;
        p_class_meths = (__objc2_meth_list **)(&OBJC_PROTOCOL___NSObject + 32);
        goto LABEL_294;
      }
    }
    else
    {
      file_error(a1, 0, "No current entry for :!%s type", v15, v16, v17, v18, v19, (char)v26);
      a3 = v261;
    }
    ++*a3;
    goto LABEL_80;
  }
  result = __error();
  if (*result != 2)
  {
    v251 = __error();
  }
  ++*a3;
  return result;
}

uint64_t apprentice_sort(unsigned __int8 **a1, unsigned __int8 **a2)
{
  unint64_t v3;
  unint64_t v4;
  unsigned int v5;

  v3 = apprentice_magic_strength(*a1);
  v4 = apprentice_magic_strength(*a2);
  if (v3 > v4)
    v5 = -1;
  else
    v5 = 1;
  if (v3 == v4)
    return 0;
  else
    return v5;
}

uint64_t get_op(int a1)
{
  int v1;
  uint64_t result;

  v1 = a1 - 37;
  result = 0;
  switch(v1)
  {
    case 0:
      result = 7;
      break;
    case 1:
      return result;
    case 5:
      result = 5;
      break;
    case 6:
      result = 3;
      break;
    case 8:
      result = 4;
      break;
    case 10:
      result = 6;
      break;
    default:
      result = 0xFFFFFFFFLL;
      break;
  }
  return result;
}

uint64_t get_standard_integer_type(uint64_t a1, _QWORD *a2)
{
  int v4;
  uint64_t v5;
  int v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  int v10;

  v5 = a1 + 1;
  v4 = *(char *)(a1 + 1);
  v6 = *(unsigned __int8 *)(a1 + 1);
  if (v4 < 0)
  {
    if (__maskrune(*(unsigned __int8 *)(a1 + 1), 0x100uLL))
    {
LABEL_3:
      result = 0;
      if (v4 <= 75)
      {
        if (v4 == 67)
        {
          v8 = 1;
          goto LABEL_18;
        }
        if (v4 != 73)
          return result;
      }
      else if (v4 != 76)
      {
        if (v4 == 81)
        {
          v8 = 24;
        }
        else
        {
          if (v4 != 83)
            return result;
          v8 = 2;
        }
        goto LABEL_18;
      }
      v8 = 4;
LABEL_18:
      v9 = a1 + 2;
      goto LABEL_19;
    }
  }
  else if ((*(_DWORD *)(MEMORY[0x24BDAC740] + 4 * *(unsigned __int8 *)(a1 + 1) + 60) & 0x100) != 0)
  {
    goto LABEL_3;
  }
  if ((v6 - 48) > 9)
  {
    v8 = 4;
    v9 = v5;
LABEL_19:
    if (a2)
      *a2 = v9;
    return v8;
  }
  v10 = *(unsigned __int8 *)(a1 + 2);
  v9 = a1 + 2;
  if ((v10 - 48) < 0xA)
    return 0;
  result = 0;
  v8 = 1;
  switch(v4)
  {
    case '1':
      goto LABEL_19;
    case '2':
      v8 = 2;
      goto LABEL_19;
    case '4':
      v8 = 4;
      goto LABEL_19;
    case '8':
      v8 = 24;
      goto LABEL_19;
    default:
      return result;
  }
  return result;
}

uint64_t file_signextend(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if ((*(_BYTE *)(a2 + 2) & 8) == 0)
  {
    switch(*(_BYTE *)(a2 + 6))
    {
      case 1:
        a3 = (char)a3;
        break;
      case 2:
      case 7:
      case 0xA:
        a3 = (__int16)a3;
        break;
      case 3:
      case 5:
      case 0xD:
      case 0x11:
      case 0x12:
      case 0x13:
      case 0x14:
      case 0x18:
      case 0x19:
      case 0x1A:
      case 0x1B:
      case 0x1C:
      case 0x1D:
      case 0x1E:
      case 0x1F:
      case 0x20:
      case 0x24:
      case 0x25:
      case 0x26:
      case 0x29:
      case 0x2A:
      case 0x2B:
      case 0x2C:
      case 0x2D:
      case 0x2E:
      case 0x2F:
      case 0x30:
      case 0x31:
      case 0x32:
        return a3;
      case 4:
      case 6:
      case 8:
      case 9:
      case 0xB:
      case 0xC:
      case 0xE:
      case 0xF:
      case 0x10:
      case 0x15:
      case 0x16:
      case 0x17:
      case 0x21:
      case 0x22:
      case 0x23:
        a3 = (int)a3;
        break;
      default:
        if ((*(_BYTE *)(a1 + 68) & 0x40) != 0)
          file_magwarn(a1, "cannot happen: m->type=%d\n", a3, a4, a5, a6, a7, a8, *(_BYTE *)(a2 + 6));
        a3 = -1;
        break;
    }
  }
  return a3;
}

uint64_t eatsize(unsigned __int8 **a1)
{
  unsigned __int8 *v2;
  __darwin_ct_rune_t v3;
  __darwin_ct_rune_t v4;
  uint64_t v5;
  int v6;
  __darwin_ct_rune_t v7;
  uint64_t result;

  v2 = *a1;
  v3 = (char)**a1;
  v4 = **a1;
  v5 = MEMORY[0x24BDAC740];
  if ((v3 & 0x80000000) == 0)
  {
    if ((*(_DWORD *)(MEMORY[0x24BDAC740] + 4 * **a1 + 60) & 0x8000) == 0)
      goto LABEL_4;
    goto LABEL_3;
  }
  if (__maskrune(**a1, 0x8000uLL))
LABEL_3:
    v3 = __tolower(v4);
LABEL_4:
  if (v3 == 117)
    ++v2;
  v6 = (char)*v2;
  v7 = *v2;
  if ((v6 & 0x80000000) == 0)
  {
    result = *(_DWORD *)(v5 + 4 * *v2 + 60) & 0x8000;
    if (!(_DWORD)result)
      goto LABEL_9;
    goto LABEL_8;
  }
  result = __maskrune(*v2, 0x8000uLL);
  if ((_DWORD)result)
  {
LABEL_8:
    result = __tolower(v7);
    v6 = result;
  }
LABEL_9:
  if ((v6 - 98) <= 0x11 && ((1 << (v6 - 98)) & 0x20443) != 0)
    ++v2;
  *a1 = v2;
  return result;
}

uint64_t file_pstring_length_size(int a1, __int16 a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;

  v8 = a2 & 0xF80;
  if (v8 <= 0x1FF)
  {
    if (v8 != 128)
    {
      if (v8 == 256)
        return 2;
LABEL_8:
      file_error(a1, 0, "corrupt magic file (bad pascal string length %d)", a4, a5, a6, a7, a8, a2 & 0x80);
      return -1;
    }
    return 1;
  }
  else
  {
    if (v8 != 2048 && v8 != 1024)
    {
      if (v8 == 512)
        return 2;
      goto LABEL_8;
    }
    return 4;
  }
}

void addentry(int a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int *v7;
  void *v8;
  unsigned int v10;
  char *v11;
  int v12;
  int *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v4 = a3 + 16 * (*(_BYTE *)(*a2 + 6) == 45);
  v6 = (unsigned int *)(v4 + 8);
  v5 = *(_DWORD *)(v4 + 8);
  v7 = (unsigned int *)(v4 + 12);
  v8 = *(void **)v4;
  if (v5 != *(_DWORD *)(v4 + 12))
    goto LABEL_4;
  v10 = v5 + 200;
  *v7 = v10;
  v11 = (char *)malloc_type_realloc(v8, 16 * v10, 0x1020040EDED9539uLL);
  if (v11)
  {
    v8 = v11;
    bzero(&v11[16 * *v6], 0xC80uLL);
    *(_QWORD *)v4 = v8;
    v5 = *v6;
LABEL_4:
    *v6 = v5 + 1;
    *((_OWORD *)v8 + v5) = *(_OWORD *)a2;
    *a2 = 0;
    a2[1] = 0;
    return;
  }
  v12 = 16 * *v7;
  v13 = __error();
  file_error(a1, *v13, "cannot allocate %zu bytes", v14, v15, v16, v17, v18, v12);
}

uint64_t parse_mime(uint64_t a1, uint64_t a2, char *a3, unint64_t a4)
{
  return parse_extra(a1, *(_QWORD *)a2, *(unsigned int *)(a2 + 8), a3, a4, 224, 0x50uLL, (uint64_t)"MIME", "+-/.$?:{}", 1);
}

uint64_t parse_apple(uint64_t a1, uint64_t a2, char *a3, unint64_t a4)
{
  return parse_extra(a1, *(_QWORD *)a2, *(unsigned int *)(a2 + 8), a3, a4, 304, 8uLL, (uint64_t)"APPLE", "!+-./?", 0);
}

uint64_t parse_ext(uint64_t a1, uint64_t a2, char *a3, unint64_t a4)
{
  return parse_extra(a1, *(_QWORD *)a2, *(unsigned int *)(a2 + 8), a3, a4, 312, 0x40uLL, (uint64_t)"EXTENSION", ",!+-/@?_$", 0);
}

uint64_t parse_strength(uint64_t a1, uint64_t a2, char *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _BYTE *v9;
  int v11;
  int v12;
  const char *v13;
  uint64_t v14;
  const char *v15;
  int v16;
  int v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  char *__endptr;

  v9 = *(_BYTE **)a2;
  if (!*(_BYTE *)(*(_QWORD *)a2 + 11))
  {
    if (v9[6] == 45)
    {
      file_magwarn(a1, "%s: Strength setting is not supported in \"name\" magic entries", (uint64_t)a3, a4, a5, a6, a7, a8, (_BYTE)v9 + 32);
      return 0xFFFFFFFFLL;
    }
    v11 = *a3;
    if ((v11 & 0x80000000) == 0)
    {
      do
      {
        if ((*(_DWORD *)(MEMORY[0x24BDAC740] + 4 * v11 + 60) & 0x4000) == 0)
          break;
        v12 = *++a3;
        LOBYTE(v11) = v12;
      }
      while ((v12 & 0x80000000) == 0);
    }
    if ((char)v11 > 0x2F || ((1 << v11) & 0xAC0000000001) == 0)
    {
      return 0xFFFFFFFFLL;
    }
    __endptr = 0;
    v9[11] = v11;
    v13 = a3 + 1;
    v14 = MEMORY[0x24BDAC740];
    do
    {
      v15 = v13;
      v16 = *v13;
      if (v16 < 0)
        break;
      v17 = *(_DWORD *)(MEMORY[0x24BDAC740] + 4 * v16 + 60);
      v13 = v15 + 1;
    }
    while ((v17 & 0x4000) != 0);
    v18 = strtoul(v15, &__endptr, 0);
    v25 = v18;
    if (v18 >= 0x100)
    {
LABEL_17:
      v9[11] = 0;
      v9[3] = 0;
      return 0xFFFFFFFFLL;
    }
    v26 = *__endptr;
    if (*__endptr)
    {
      if ((v26 & 0x80) == 0)
      {
        if ((*(_DWORD *)(v14 + 4 * v26 + 60) & 0x4000) != 0)
          goto LABEL_21;
LABEL_27:
        goto LABEL_17;
      }
      if (!__maskrune(v26, 0x4000uLL))
        goto LABEL_27;
    }
LABEL_21:
    v9[3] = v25;
    if (v25 || v9[11] != 47)
      return 0;
    goto LABEL_17;
  }
  file_magwarn(a1, "Current entry already has a strength type: %c %d", (uint64_t)a3, a4, a5, a6, a7, a8, *(_BYTE *)(*(_QWORD *)a2 + 11));
  return 0xFFFFFFFFLL;
}

uint64_t parse_extra(uint64_t a1, uint64_t a2, uint64_t a3, char *a4, unint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8, char *__s, int a10)
{
  char v10;
  uint64_t v13;
  unsigned int v14;
  _BYTE *v15;
  int v18;
  char *v19;
  int v20;
  unint64_t v21;
  unint64_t v22;
  BOOL v23;
  BOOL v24;
  unsigned int v25;
  char v27;

  v10 = a8;
  v13 = a1;
  v14 = a3 - 1;
  if (!(_DWORD)a3)
    v14 = 0;
  v15 = (_BYTE *)(a2 + 376 * v14 + a6);
  if (*v15)
  {
    if (a10)
      strlen((const char *)(a2 + 376 * v14 + a6));
    return 0xFFFFFFFFLL;
  }
  if (!*(_BYTE *)(a2 + 376 * v14 + 160))
  {
    file_magwarn(a1, "Current entry does not yet have a description for adding a %s type", a3, (uint64_t)a4, a5, a6, a7, a8, a8);
    return 0xFFFFFFFFLL;
  }
  v18 = *a4;
  if (v18 < 0)
  {
    v19 = a4;
  }
  else
  {
    v19 = a4;
    do
    {
      if ((*(_DWORD *)(MEMORY[0x24BDAC740] + 4 * v18 + 60) & 0x4000) == 0)
        break;
      v20 = *++v19;
      LOBYTE(v18) = v20;
    }
    while ((v20 & 0x80000000) == 0);
  }
  v27 = a8;
  v21 = 0;
  if ((_BYTE)v18 && a5)
  {
    v22 = 0;
    while (goodchar(v18, __s))
    {
      v21 = v22 + 1;
      v15[v22] = v18;
      LOBYTE(v18) = v19[v22 + 1];
      if ((_BYTE)v18)
        v23 = v21 >= a5;
      else
        v23 = 1;
      v24 = v23 || v21 >= a7;
      ++v22;
      if (v24)
        goto LABEL_30;
    }
    v21 = v22;
LABEL_30:
    v13 = a1;
  }
  if (v21 == a7)
  {
    if ((_BYTE)v18)
    {
      if (a10)
        v15[a7 - 1] = 0;
      if ((*(_BYTE *)(v13 + 68) & 0x40) != 0)
      goto LABEL_46;
    }
    v25 = 0;
LABEL_41:
    if ((*(_DWORD *)(MEMORY[0x24BDAC740] + 4 * v25 + 60) & 0x4000) == 0)
      goto LABEL_42;
    goto LABEL_44;
  }
  v25 = v18;
  if ((v18 & 0x80) == 0)
    goto LABEL_41;
  if (!__maskrune(v18, 0x4000uLL))
  {
LABEL_42:
    if (!goodchar(v18, __s))
  }
LABEL_44:
  if (a10)
    v15[v21] = 0;
LABEL_46:
  if (!v21)
  {
    file_magerror(v13, "Bad magic entry '%s'", a3, (uint64_t)a4, a5, a6, a7, a8, a4);
    return 0xFFFFFFFFLL;
  }
  return 0;
}

BOOL goodchar(unsigned int __c, char *__s)
{
  return (__c & 0x80) == 0 && (*(_DWORD *)(MEMORY[0x24BDAC740] + 4 * __c + 60) & 0x500) != 0
      || strchr(__s, __c) != 0;
}

FILE *file_showstr(FILE *result, _BYTE *a2, uint64_t a3)
{
  FILE *v5;
  int v6;
  int v7;
  int v8;

  v5 = result;
  while (a3 != -1)
  {
    if (!a3)
      return result;
    --a3;
    v6 = *a2;
LABEL_7:
    ++a2;
    v7 = (char)v6;
    if ((v6 - 32) > 0x5E)
    {
      fputc(92, v5);
      switch(v7)
      {
        case 7:
          v8 = 97;
          goto LABEL_9;
        case 8:
          v8 = 98;
          goto LABEL_9;
        case 9:
          v8 = 116;
          goto LABEL_9;
        case 10:
          v8 = 110;
          goto LABEL_9;
        case 11:
          v8 = 118;
          goto LABEL_9;
        case 12:
          v8 = 102;
          goto LABEL_9;
        case 13:
          v8 = 114;
          goto LABEL_9;
        default:
          result = (FILE *)fprintf(v5, "%.3o", v7);
          break;
      }
    }
    else
    {
      v8 = (char)v6;
LABEL_9:
      result = (FILE *)fputc(v8, v5);
    }
  }
  v6 = *a2;
  if (*a2)
  {
    a3 = -1;
    goto LABEL_7;
  }
  return result;
}

uint64_t file_pstring_get_length(int a1, __int16 a2, unsigned int *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;

  v8 = a2 & 0xF80;
  if (v8 > 0x1FF)
  {
    switch(v8)
    {
      case 0x200u:
        v9 = *(unsigned __int16 *)a3;
        if ((a2 & 0x1000) == 0)
          return v9;
        goto LABEL_16;
      case 0x400u:
        v9 = bswap32(*a3);
        if ((a2 & 0x1000) == 0)
          return v9;
        goto LABEL_16;
      case 0x800u:
        v9 = *a3;
        if ((a2 & 0x1000) == 0)
          return v9;
LABEL_16:
        v10 = file_pstring_length_size(a1, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
        if (v10 != -1)
        {
          v9 -= v10;
          return v9;
        }
        return -1;
    }
    goto LABEL_18;
  }
  if (v8 != 128)
  {
    if (v8 == 256)
    {
      v9 = __rev16(*(unsigned __int16 *)a3);
      if ((a2 & 0x1000) == 0)
        return v9;
      goto LABEL_16;
    }
LABEL_18:
    file_error(a1, 0, "corrupt magic file (bad pascal string length %d)", a4, a5, a6, a7, a8, a2 & 0x80);
    return -1;
  }
  v9 = *(unsigned __int8 *)a3;
  if ((a2 & 0x1000) != 0)
    goto LABEL_16;
  return v9;
}

uint64_t file_magicfind(uint64_t *a1, char *__s2, uint64_t a3)
{
  uint64_t *v3;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  int v13;
  unsigned __int16 *v14;
  uint64_t v15;
  int v16;

  v3 = (uint64_t *)a1[3];
  if (v3 == a1)
    return 0xFFFFFFFFLL;
  while (1)
  {
    v7 = *((unsigned int *)v3 + 2);
    if ((_DWORD)v7)
      break;
LABEL_7:
    v3 = (uint64_t *)v3[3];
    if (v3 == a1)
      return 0xFFFFFFFFLL;
  }
  v8 = 0;
  v9 = *v3;
  v10 = *v3;
  while (1)
  {
    v11 = v8 + 1;
    if (*(_BYTE *)(v10 + 6) == 45 && !strcmp((const char *)(v10 + 32), __s2))
      break;
    v10 += 376;
    ++v8;
    if (v7 == v11)
      goto LABEL_7;
  }
  *(_QWORD *)a3 = v9 + 376 * v8;
  if (v7 <= v11)
    v13 = v8 + 1;
  else
    v13 = v7;
  v14 = (unsigned __int16 *)(v10 + 376);
  v15 = v8;
  while (++v15 < v7)
  {
    v16 = *v14;
    v14 += 188;
    if (!v16)
    {
      v13 = v15;
      break;
    }
  }
  result = 0;
  *(_DWORD *)(a3 + 8) = v13 - v8;
  return result;
}

size_t cdf_read(uint64_t a1, off_t a2, void *__buf, size_t __nbyte)
{
  size_t v4;
  uint64_t v5;
  int v6;

  v4 = __nbyte;
  v5 = *(_QWORD *)(a1 + 8);
  if (v5 && *(_QWORD *)(a1 + 16) >= __nbyte + a2)
  {
    memcpy(__buf, (const void *)(v5 + a2), __nbyte);
  }
  else
  {
    v6 = *(_DWORD *)a1;
    if (v6 == -1)
    {
      *__error() = 22;
      return -1;
    }
    else if (pread(v6, __buf, __nbyte, a2) != __nbyte)
    {
      return -1;
    }
  }
  return v4;
}

size_t cdf_read_sector(uint64_t a1, uint64_t a2, uint64_t a3, size_t a4, char a5, int a6)
{
  unint64_t v6;

  v6 = 1 << a5;
  if (!is_mul_ok(v6, a6))
    return -1;
  if (v6 != a4)
    __assert_rtn("cdf_read_sector", "cdf.c", 418, "ss == len");
  return cdf_read(a1, a4 + a4 * a6, (void *)(a2 + a3), a4);
}

uint64_t cdf_count_chain(_QWORD *a1, unsigned int a2, uint64_t a3)
{
  unint64_t v3;
  uint64_t v4;

  if (a2 == -2)
    return 0;
  v4 = a2;
  if ((a2 & 0x80000000) == 0)
  {
    v3 = 0;
    while (v3 >> 4 <= 0x270 && (int)v4 < (int)((unint64_t)(a1[1] * a3) >> 2))
    {
      LODWORD(v4) = *(_DWORD *)(*a1 + 4 * v4);
      ++v3;
      if ((v4 & 0x80000000) != 0)
        return v3;
    }
  }
  *__error() = 79;
  return -1;
}

uint64_t cdf_read_long_sector_chain(uint64_t a1, uint64_t a2, _QWORD *a3, unsigned int a4, unint64_t a5, uint64_t a6)
{
  unsigned int v8;
  size_t v12;
  size_t v13;
  unint64_t *v14;
  unint64_t v15;
  void *v16;
  uint64_t v17;
  unint64_t i;
  int64_t sector;

  v8 = a4;
  v12 = 1 << *(_WORD *)(a2 + 30);
  *(_QWORD *)a6 = 0;
  v13 = cdf_count_chain(a3, a4, v12);
  *(_QWORD *)(a6 + 8) = v13;
  v14 = (unint64_t *)(a6 + 8);
  v15 = *(unsigned int *)(a2 + 56);
  if (v15 <= a5)
    v15 = a5;
  *(_QWORD *)(a6 + 16) = v15;
  *(_QWORD *)(a6 + 24) = v12;
  if (v8 == -2 || !a5)
  {
    *v14 = 0;
    *(_QWORD *)(a6 + 16) = 0;
    *(_QWORD *)(a6 + 24) = 0;
LABEL_21:
    free(*(void **)a6);
    *(_QWORD *)a6 = 0;
    return 0xFFFFFFFFLL;
  }
  if (v13 == -1)
  {
LABEL_20:
    *__error() = 79;
    *(_QWORD *)(a6 + 16) = 0;
    *(_QWORD *)(a6 + 24) = 0;
    *v14 = 0;
    goto LABEL_21;
  }
  v16 = malloc_type_calloc(v13, v12, 0x9D4F84DDuLL);
  *(_QWORD *)a6 = v16;
  if (!v16)
  {
    *(_OWORD *)a6 = 0u;
    *(_OWORD *)(a6 + 16) = 0u;
    return 0xFFFFFFFFLL;
  }
  if ((v8 & 0x80000000) == 0)
  {
    v17 = 0;
    for (i = 0; i != 10000 && i < *v14; ++i)
    {
      sector = cdf_read_sector(a1, *(_QWORD *)a6, v17, v12, *(_WORD *)(a2 + 30), v8);
      if (sector != v12)
      {
        if (sector >= 1 && i == *v14 - 1)
          return 0;
        goto LABEL_20;
      }
      v8 = *(_DWORD *)(*a3 + 4 * v8);
      v17 += v12;
      if ((v8 & 0x80000000) != 0)
        return 0;
    }
    goto LABEL_20;
  }
  return 0;
}

uint64_t cdf_read_user_stream(uint64_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4, _QWORD *a5, uint64_t *a6, char *__s, uint64_t a8)
{
  int stream;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  size_t v19;
  size_t v20;
  unint64_t *v21;
  void *v22;
  size_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  size_t v27;
  uint64_t result;

  stream = cdf_find_stream(a6, __s, 2);
  if (stream > 0)
  {
    v16 = *a6 + 136 * (stream - 1);
    v17 = *(_DWORD *)(v16 + 120);
    v18 = *(unsigned int *)(v16 + 124);
    if (*(_DWORD *)(a2 + 56) <= v18 || !*a5)
      return cdf_read_long_sector_chain(a1, a2, a3, *(_DWORD *)(v16 + 120), *(unsigned int *)(v16 + 124), a8);
    v19 = 1 << *(_WORD *)(a2 + 32);
    *(_QWORD *)a8 = 0;
    v20 = cdf_count_chain(a4, v17, 1 << *(_WORD *)(a2 + 30));
    *(_QWORD *)(a8 + 8) = v20;
    *(_QWORD *)(a8 + 16) = v18;
    v21 = (unint64_t *)(a8 + 8);
    *(_QWORD *)(a8 + 24) = v19;
    if (v20 == -1)
    {
LABEL_19:
      *__error() = 79;
      *(_QWORD *)(a8 + 16) = 0;
      *(_QWORD *)(a8 + 24) = 0;
      *v21 = 0;
      free(*(void **)a8);
      *(_QWORD *)a8 = 0;
      return 0xFFFFFFFFLL;
    }
    v22 = malloc_type_calloc(v20, v19, 0x9D4F84DDuLL);
    *(_QWORD *)a8 = v22;
    if (v22)
    {
      if ((v17 & 0x80000000) != 0)
        return 0;
      v23 = 0;
      v24 = 0;
      while (v24 != 10000)
      {
        if (v24 >= *v21)
          break;
        v25 = 1 << *(_WORD *)(a2 + 32);
        if (!is_mul_ok(v25, v17))
          break;
        if ((_DWORD)v25 != (_DWORD)v19)
          __assert_rtn("cdf_read_short_sector", "cdf.c", 433, "ss == len");
        v26 = v25 * v17;
        if (v26 + v19 > a5[1] * (1 << *(_WORD *)(a2 + 30)))
        {
          *__error() = 79;
          goto LABEL_19;
        }
        v27 = v23 + v19;
        ++v24;
        memcpy((void *)(*(_QWORD *)a8 + v23), (const void *)(*a5 + v26), v19);
        result = 0;
        v17 = *(_DWORD *)(*a4 + 4 * v17);
        v23 = v27;
        if ((v17 & 0x80000000) != 0)
          return result;
      }
      goto LABEL_19;
    }
  }
  *(_OWORD *)a8 = 0u;
  *(_OWORD *)(a8 + 16) = 0u;
  return 0xFFFFFFFFLL;
}

uint64_t cdf_find_stream(uint64_t *a1, char *__s, int a3)
{
  size_t v6;
  uint64_t result;
  size_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned __int16 *v11;
  size_t v12;
  char *i;
  int *v14;

  v6 = strlen(__s);
  result = a1[1];
  if (result)
  {
    v8 = v6 + 1;
    v9 = *a1;
    do
    {
      v10 = result - 1;
      if (*(unsigned __int8 *)(v9 + 136 * (result - 1) + 66) == a3)
      {
        if (!v8)
          return result;
        v11 = (unsigned __int16 *)(v9 + 136 * v10);
        v12 = v8;
        for (i = __s; *i == *v11; ++i)
        {
          ++v11;
          if (!--v12)
            return result;
        }
      }
      --result;
    }
    while (v10);
  }
  v14 = __error();
  result = 0;
  *v14 = 3;
  return result;
}

uint64_t cdf_check_stream_offset(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;

  v5 = *a1;
  v6 = a3 + a4;
  v7 = cdf_check_stream(a1[2], a1[3], a2);
  if (v6 >= v5 && v6 - v5 <= a1[1] * v7)
    return 0;
  *__error() = 79;
  return 0xFFFFFFFFLL;
}

void *cdf_grow_info(void **a1, unint64_t *a2, uint64_t a3)
{
  unint64_t v5;
  void *result;

  v5 = *a2 + a3;
  if (v5 <= 0x2AAAAA && (result = malloc_type_realloc(*a1, 24 * v5, 0x66132A66uLL)) != 0)
  {
    *a1 = result;
    *a2 = v5;
  }
  else
  {
    free(*a1);
    result = 0;
    *a2 = 0;
    *a1 = 0;
  }
  return result;
}

uint64_t cdf_check_stream(unint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  v3 = 30;
  if (*(unsigned int *)(a3 + 56) > a1)
    v3 = 32;
  if (1 << *(_WORD *)(a3 + v3) != a2)
    __assert_rtn("cdf_check_stream", "cdf.c", 327, "ss == sst->sst_ss");
  return a2;
}

uint64_t cdf_unpack_catalog(uint64_t a1, unsigned __int16 **a2, _QWORD *a3)
{
  uint64_t v5;
  _WORD *v6;
  unsigned int v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  size_t v11;
  char *v12;
  char *v13;
  char *v14;
  uint64_t v15;
  unint64_t v16;
  _WORD *v17;
  char *v18;
  __int16 v19;
  int v20;
  __int16 *v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  __int16 v28;
  uint64_t result;

  v5 = cdf_check_stream((unint64_t)a2[2], (uint64_t)a2[3], a1);
  v6 = *a2;
  v7 = **a2;
  if (!**a2)
    return 0xFFFFFFFFLL;
  v8 = 0;
  v9 = (unint64_t)v6 + (_QWORD)a2[1] * v5;
  do
  {
    v6 = (_WORD *)((char *)v6 + v7);
    if ((unint64_t)v6 > v9)
      break;
    ++v8;
    v7 = (unsigned __int16)*v6;
  }
  while (*v6);
  if (!v8)
    return 0xFFFFFFFFLL;
  v10 = v8 - 1;
  v11 = 528 * (v8 - 1);
  v12 = (char *)malloc_type_malloc(v11 + 536, 0xF5397DBuLL);
  *a3 = v12;
  if (!v12)
    return 0xFFFFFFFFLL;
  v13 = v12;
  v14 = v12 + 8;
  bzero(v12 + 8, v11);
  v15 = 0;
  if (v10)
  {
    v16 = 0;
    v17 = *a2;
    while (1)
    {
      v18 = &v14[528 * v15];
      if ((unint64_t)(v17 + 1) > v9)
        break;
      v19 = *v17;
      *(_WORD *)v18 = *v17;
      *(_WORD *)&v14[528 * v16] = v19;
      if ((unint64_t)(v17 + 4) > v9)
        break;
      v20 = *((_DWORD *)v17 + 1);
      *(_DWORD *)&v14[528 * v15 + 4] = v20;
      *(_DWORD *)&v14[528 * v16 + 4] = (unsigned __int16)v20;
      v21 = v17 + 8;
      if ((unint64_t)(v17 + 8) > v9)
        break;
      v22 = *((_QWORD *)v17 + 1);
      *(_QWORD *)&v14[528 * v15 + 8] = v22;
      *(_QWORD *)&v14[528 * v16 + 8] = v22;
      v23 = *(unsigned __int16 *)v18;
      if (v23 > 0xD)
      {
        if ((unsigned __int16)(v23 - 14) >= 0xFFu)
          v25 = 255;
        else
          v25 = (unsigned __int16)(v23 - 14);
        *(_WORD *)v18 = v25;
        if ((unint64_t)&v21[v25] > v9)
          break;
        if ((_DWORD)v25)
        {
          v26 = &v13[528 * v15 + 24];
          v27 = v25;
          do
          {
            v28 = *v21++;
            *(_WORD *)v26 = v28;
            v26 += 2;
            --v27;
          }
          while (v27);
        }
        *(_WORD *)&v14[528 * v15 + 16 + 2 * v25] = 0;
        v24 = v16 + 1;
        v15 = v16++;
      }
      else
      {
        *(_WORD *)v18 = 0;
        v24 = v16;
      }
      v17 = (_WORD *)((char *)v17 + v23);
      if (v24 >= v10)
        goto LABEL_26;
    }
    *(_WORD *)v18 = 0;
  }
LABEL_26:
  result = 0;
  *(_QWORD *)*a3 = v15;
  return result;
}

void WFCNPostalAddressFromCLPlacemark(void *a1)
{
  id v1;
  id v2;
  void *v3;
  _QWORD *v4;
  void *v5;
  void *v6;
  _QWORD *v7;
  void *v8;
  void *v9;
  _QWORD *v10;
  void *v11;
  void *v12;
  _QWORD *v13;
  void *v14;
  void *v15;
  _QWORD *v16;
  void *v17;
  void *v18;
  _QWORD *v19;
  void *v20;
  void *v21;
  _QWORD *v22;
  void *v23;
  void *v24;
  _QWORD *v25;
  void *v26;
  void *v27;
  id v28;
  void *v29;
  id v30;
  void *v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;

  v1 = a1;
  v2 = objc_alloc_init(MEMORY[0x24BDBCED8]);
  objc_msgSend(v1, "fullThoroughfare");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v33 = 0;
  v34 = (uint64_t)&v33;
  v35 = 0x2020000000;
  v4 = (_QWORD *)getCNPostalAddressStreetKeySymbolLoc_ptr;
  v36 = (void *)getCNPostalAddressStreetKeySymbolLoc_ptr;
  if (!getCNPostalAddressStreetKeySymbolLoc_ptr)
  {
    v5 = ContactsLibrary_13651();
    v4 = dlsym(v5, "CNPostalAddressStreetKey");
    *(_QWORD *)(v34 + 24) = v4;
    getCNPostalAddressStreetKeySymbolLoc_ptr = (uint64_t)v4;
  }
  _Block_object_dispose(&v33, 8);
  if (!v4)
  {
    objc_msgSend(MEMORY[0x24BDD1448], "currentHandler");
    v31 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "NSString * _Nonnull getCNPostalAddressStreetKey(void)");
    v32 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v31, "handleFailureInFunction:file:lineNumber:description:", v32, CFSTR("CLPlacemark+WFCompatibility.m"), 20, CFSTR("%s"), dlerror(), v33);
LABEL_36:

    __break(1u);
    return;
  }
  objc_msgSend(v2, "setObject:forKeyedSubscript:", v3, *v4);

  objc_msgSend(v1, "subLocality");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v33 = 0;
  v34 = (uint64_t)&v33;
  v35 = 0x2020000000;
  v7 = (_QWORD *)getCNPostalAddressSubLocalityKeySymbolLoc_ptr;
  v36 = (void *)getCNPostalAddressSubLocalityKeySymbolLoc_ptr;
  if (!getCNPostalAddressSubLocalityKeySymbolLoc_ptr)
  {
    v8 = ContactsLibrary_13651();
    v7 = dlsym(v8, "CNPostalAddressSubLocalityKey");
    *(_QWORD *)(v34 + 24) = v7;
    getCNPostalAddressSubLocalityKeySymbolLoc_ptr = (uint64_t)v7;
  }
  _Block_object_dispose(&v33, 8);
  if (!v7)
  {
    objc_msgSend(MEMORY[0x24BDD1448], "currentHandler");
    v31 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "NSString * _Nonnull getCNPostalAddressSubLocalityKey(void)");
    v32 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v31, "handleFailureInFunction:file:lineNumber:description:", v32, CFSTR("CLPlacemark+WFCompatibility.m"), 21, CFSTR("%s"), dlerror(), v33);
    goto LABEL_36;
  }
  objc_msgSend(v2, "setObject:forKeyedSubscript:", v6, *v7);

  objc_msgSend(v1, "locality");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v33 = 0;
  v34 = (uint64_t)&v33;
  v35 = 0x2020000000;
  v10 = (_QWORD *)getCNPostalAddressCityKeySymbolLoc_ptr;
  v36 = (void *)getCNPostalAddressCityKeySymbolLoc_ptr;
  if (!getCNPostalAddressCityKeySymbolLoc_ptr)
  {
    v11 = ContactsLibrary_13651();
    v10 = dlsym(v11, "CNPostalAddressCityKey");
    *(_QWORD *)(v34 + 24) = v10;
    getCNPostalAddressCityKeySymbolLoc_ptr = (uint64_t)v10;
  }
  _Block_object_dispose(&v33, 8);
  if (!v10)
  {
    objc_msgSend(MEMORY[0x24BDD1448], "currentHandler");
    v31 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "NSString * _Nonnull getCNPostalAddressCityKey(void)");
    v32 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v31, "handleFailureInFunction:file:lineNumber:description:", v32, CFSTR("CLPlacemark+WFCompatibility.m"), 22, CFSTR("%s"), dlerror(), v33);
    goto LABEL_36;
  }
  objc_msgSend(v2, "setObject:forKeyedSubscript:", v9, *v10);

  objc_msgSend(v1, "subAdministrativeArea");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  v33 = 0;
  v34 = (uint64_t)&v33;
  v35 = 0x2020000000;
  v13 = (_QWORD *)getCNPostalAddressSubAdministrativeAreaKeySymbolLoc_ptr;
  v36 = (void *)getCNPostalAddressSubAdministrativeAreaKeySymbolLoc_ptr;
  if (!getCNPostalAddressSubAdministrativeAreaKeySymbolLoc_ptr)
  {
    v14 = ContactsLibrary_13651();
    v13 = dlsym(v14, "CNPostalAddressSubAdministrativeAreaKey");
    *(_QWORD *)(v34 + 24) = v13;
    getCNPostalAddressSubAdministrativeAreaKeySymbolLoc_ptr = (uint64_t)v13;
  }
  _Block_object_dispose(&v33, 8);
  if (!v13)
  {
    objc_msgSend(MEMORY[0x24BDD1448], "currentHandler");
    v31 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "NSString * _Nonnull getCNPostalAddressSubAdministrativeAreaKey(void)");
    v32 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v31, "handleFailureInFunction:file:lineNumber:description:", v32, CFSTR("CLPlacemark+WFCompatibility.m"), 23, CFSTR("%s"), dlerror(), v33);
    goto LABEL_36;
  }
  objc_msgSend(v2, "setObject:forKeyedSubscript:", v12, *v13);

  objc_msgSend(v1, "administrativeArea");
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  v33 = 0;
  v34 = (uint64_t)&v33;
  v35 = 0x2020000000;
  v16 = (_QWORD *)getCNPostalAddressStateKeySymbolLoc_ptr;
  v36 = (void *)getCNPostalAddressStateKeySymbolLoc_ptr;
  if (!getCNPostalAddressStateKeySymbolLoc_ptr)
  {
    v17 = ContactsLibrary_13651();
    v16 = dlsym(v17, "CNPostalAddressStateKey");
    *(_QWORD *)(v34 + 24) = v16;
    getCNPostalAddressStateKeySymbolLoc_ptr = (uint64_t)v16;
  }
  _Block_object_dispose(&v33, 8);
  if (!v16)
  {
    objc_msgSend(MEMORY[0x24BDD1448], "currentHandler");
    v31 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "NSString * _Nonnull getCNPostalAddressStateKey(void)");
    v32 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v31, "handleFailureInFunction:file:lineNumber:description:", v32, CFSTR("CLPlacemark+WFCompatibility.m"), 24, CFSTR("%s"), dlerror(), v33);
    goto LABEL_36;
  }
  objc_msgSend(v2, "setObject:forKeyedSubscript:", v15, *v16);

  objc_msgSend(v1, "postalCode");
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  v33 = 0;
  v34 = (uint64_t)&v33;
  v35 = 0x2020000000;
  v19 = (_QWORD *)getCNPostalAddressPostalCodeKeySymbolLoc_ptr;
  v36 = (void *)getCNPostalAddressPostalCodeKeySymbolLoc_ptr;
  if (!getCNPostalAddressPostalCodeKeySymbolLoc_ptr)
  {
    v20 = ContactsLibrary_13651();
    v19 = dlsym(v20, "CNPostalAddressPostalCodeKey");
    *(_QWORD *)(v34 + 24) = v19;
    getCNPostalAddressPostalCodeKeySymbolLoc_ptr = (uint64_t)v19;
  }
  _Block_object_dispose(&v33, 8);
  if (!v19)
  {
    objc_msgSend(MEMORY[0x24BDD1448], "currentHandler");
    v31 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "NSString * _Nonnull getCNPostalAddressPostalCodeKey(void)");
    v32 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v31, "handleFailureInFunction:file:lineNumber:description:", v32, CFSTR("CLPlacemark+WFCompatibility.m"), 25, CFSTR("%s"), dlerror(), v33);
    goto LABEL_36;
  }
  objc_msgSend(v2, "setObject:forKeyedSubscript:", v18, *v19);

  objc_msgSend(v1, "country");
  v21 = (void *)objc_claimAutoreleasedReturnValue();
  v33 = 0;
  v34 = (uint64_t)&v33;
  v35 = 0x2020000000;
  v22 = (_QWORD *)getCNPostalAddressCountryKeySymbolLoc_ptr;
  v36 = (void *)getCNPostalAddressCountryKeySymbolLoc_ptr;
  if (!getCNPostalAddressCountryKeySymbolLoc_ptr)
  {
    v23 = ContactsLibrary_13651();
    v22 = dlsym(v23, "CNPostalAddressCountryKey");
    *(_QWORD *)(v34 + 24) = v22;
    getCNPostalAddressCountryKeySymbolLoc_ptr = (uint64_t)v22;
  }
  _Block_object_dispose(&v33, 8);
  if (!v22)
  {
    objc_msgSend(MEMORY[0x24BDD1448], "currentHandler");
    v31 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "NSString * _Nonnull getCNPostalAddressCountryKey(void)");
    v32 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v31, "handleFailureInFunction:file:lineNumber:description:", v32, CFSTR("CLPlacemark+WFCompatibility.m"), 26, CFSTR("%s"), dlerror(), v33);
    goto LABEL_36;
  }
  objc_msgSend(v2, "setObject:forKeyedSubscript:", v21, *v22);

  objc_msgSend(v1, "ISOcountryCode");
  v24 = (void *)objc_claimAutoreleasedReturnValue();
  v33 = 0;
  v34 = (uint64_t)&v33;
  v35 = 0x2020000000;
  v25 = (_QWORD *)getCNPostalAddressISOCountryCodeKeySymbolLoc_ptr;
  v36 = (void *)getCNPostalAddressISOCountryCodeKeySymbolLoc_ptr;
  if (!getCNPostalAddressISOCountryCodeKeySymbolLoc_ptr)
  {
    v26 = ContactsLibrary_13651();
    v25 = dlsym(v26, "CNPostalAddressISOCountryCodeKey");
    *(_QWORD *)(v34 + 24) = v25;
    getCNPostalAddressISOCountryCodeKeySymbolLoc_ptr = (uint64_t)v25;
  }
  _Block_object_dispose(&v33, 8);
  if (!v25)
  {
    objc_msgSend(MEMORY[0x24BDD1448], "currentHandler");
    v31 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "NSString * _Nonnull getCNPostalAddressISOCountryCodeKey(void)");
    v32 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v31, "handleFailureInFunction:file:lineNumber:description:", v32, CFSTR("CLPlacemark+WFCompatibility.m"), 27, CFSTR("%s"), dlerror(), v33);
    goto LABEL_36;
  }
  objc_msgSend(v2, "setObject:forKeyedSubscript:", v24, *v25);

  v38 = 0;
  v39 = &v38;
  v40 = 0x2050000000;
  v27 = (void *)getCNPostalAddressClass_softClass;
  v41 = getCNPostalAddressClass_softClass;
  if (!getCNPostalAddressClass_softClass)
  {
    v33 = MEMORY[0x24BDAC760];
    v34 = 3221225472;
    v35 = (uint64_t)__getCNPostalAddressClass_block_invoke;
    v36 = &unk_24C4E3118;
    v37 = &v38;
    __getCNPostalAddressClass_block_invoke((uint64_t)&v33);
    v27 = (void *)v39[3];
  }
  v28 = objc_retainAutorelease(v27);
  _Block_object_dispose(&v38, 8);
  objc_msgSend(v28, "postalAddressWithDictionaryRepresentation:", v2);
  v29 = (void *)objc_claimAutoreleasedReturnValue();

  v30 = v29;
}

void sub_20BC41684(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void *ContactsLibrary_13651()
{
  void *v0;
  void *v2;
  void *v3;

  if (!ContactsLibraryCore_frameworkLibrary_13667)
    ContactsLibraryCore_frameworkLibrary_13667 = _sl_dlopen();
  v0 = (void *)ContactsLibraryCore_frameworkLibrary_13667;
  if (!ContactsLibraryCore_frameworkLibrary_13667)
  {
    objc_msgSend(MEMORY[0x24BDD1448], "currentHandler");
    v0 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "void * _Nonnull ContactsLibrary(void)");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v2, CFSTR("CLPlacemark+WFCompatibility.m"), 18, CFSTR("%s"), 0);

    __break(1u);
    free(v3);
  }
  return v0;
}

void __getCNPostalAddressClass_block_invoke(uint64_t a1)
{
  void *v2;
  void *v3;

  ContactsLibrary_13651();
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = objc_getClass("CNPostalAddress");
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    getCNPostalAddressClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  }
  else
  {
    objc_msgSend(MEMORY[0x24BDD1448], "currentHandler");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "Class  _Nonnull getCNPostalAddressClass(void)_block_invoke");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, CFSTR("CLPlacemark+WFCompatibility.m"), 19, CFSTR("Unable to find class %s"), "CNPostalAddress");

    __break(1u);
  }
}

uint64_t file_mdump(uint64_t a1)
{
  FILE **v2;
  char v3;
  unint64_t v4;
  const char *v5;
  char v6;
  const char *v7;
  unint64_t v8;
  const char *v9;
  unsigned int v10;
  int v11;
  FILE *v12;
  uint64_t v13;
  char v14;
  FILE *v15;
  char v17[256];
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  v2 = (FILE **)MEMORY[0x24BDAC8D8];
  fprintf((FILE *)*MEMORY[0x24BDAC8D8], "%u: %.*s %u", *(_DWORD *)(a1 + 20), (*(_WORD *)a1 & 7) + 1, ">>>>>>>>", *(_DWORD *)(a1 + 12));
  v3 = *(_BYTE *)(a1 + 2);
  if ((v3 & 1) != 0)
  {
    v4 = *(unsigned __int8 *)(a1 + 7);
    if (v4 > 0x32)
      v5 = "*bad in_type*";
    else
      v5 = (const char *)file_names[v4];
    fprintf(*v2, "(%s,", v5);
    v6 = *(_BYTE *)(a1 + 8);
    if ((v6 & 0x40) != 0)
    {
      fputc(126, *v2);
      v6 = *(_BYTE *)(a1 + 8);
    }
    fprintf(*v2, "%c%u),", file_mdump_optyp[v6 & 7], *(_DWORD *)(a1 + 16));
    v3 = *(_BYTE *)(a1 + 2);
  }
  if ((v3 & 8) != 0)
    v7 = "u";
  else
    v7 = "";
  v8 = *(unsigned __int8 *)(a1 + 6);
  if (v8 > 0x32)
    v9 = "*bad type";
  else
    v9 = (const char *)file_names[v8];
  fprintf(*v2, " %s%s", v7, v9);
  if ((*(_BYTE *)(a1 + 9) & 0x40) != 0)
    fputc(126, *v2);
  v10 = *(unsigned __int8 *)(a1 + 6);
  if (v10 <= 0x2E && ((1 << v10) & 0x6200001E2020) != 0)
  {
    if (!*(_DWORD *)(a1 + 28))
      goto LABEL_33;
    fputc(47, *v2);
    v11 = *(_DWORD *)(a1 + 28);
    if ((v11 & 1) != 0)
    {
      fputc(87, *v2);
      v11 = *(_DWORD *)(a1 + 28);
      if ((v11 & 2) == 0)
      {
LABEL_21:
        if ((v11 & 4) == 0)
          goto LABEL_22;
        goto LABEL_40;
      }
    }
    else if ((v11 & 2) == 0)
    {
      goto LABEL_21;
    }
    fputc(119, *v2);
    v11 = *(_DWORD *)(a1 + 28);
    if ((v11 & 4) == 0)
    {
LABEL_22:
      if ((v11 & 8) == 0)
        goto LABEL_23;
      goto LABEL_41;
    }
LABEL_40:
    fputc(99, *v2);
    v11 = *(_DWORD *)(a1 + 28);
    if ((v11 & 8) == 0)
    {
LABEL_23:
      if ((v11 & 0x10) == 0)
        goto LABEL_24;
      goto LABEL_42;
    }
LABEL_41:
    fputc(67, *v2);
    v11 = *(_DWORD *)(a1 + 28);
    if ((v11 & 0x10) == 0)
    {
LABEL_24:
      if ((v11 & 0x20) == 0)
        goto LABEL_25;
      goto LABEL_43;
    }
LABEL_42:
    fputc(115, *v2);
    v11 = *(_DWORD *)(a1 + 28);
    if ((v11 & 0x20) == 0)
    {
LABEL_25:
      if ((v11 & 0x40) == 0)
        goto LABEL_26;
      goto LABEL_44;
    }
LABEL_43:
    fputc(116, *v2);
    v11 = *(_DWORD *)(a1 + 28);
    if ((v11 & 0x40) == 0)
    {
LABEL_26:
      if ((v11 & 0x80) == 0)
        goto LABEL_27;
      goto LABEL_45;
    }
LABEL_44:
    fputc(98, *v2);
    v11 = *(_DWORD *)(a1 + 28);
    if ((v11 & 0x80) == 0)
    {
LABEL_27:
      if ((v11 & 0x100) == 0)
        goto LABEL_28;
      goto LABEL_46;
    }
LABEL_45:
    fputc(66, *v2);
    v11 = *(_DWORD *)(a1 + 28);
    if ((v11 & 0x100) == 0)
    {
LABEL_28:
      if ((v11 & 0x200) == 0)
        goto LABEL_29;
      goto LABEL_47;
    }
LABEL_46:
    fputc(72, *v2);
    v11 = *(_DWORD *)(a1 + 28);
    if ((v11 & 0x200) == 0)
    {
LABEL_29:
      if ((v11 & 0x400) == 0)
        goto LABEL_30;
      goto LABEL_48;
    }
LABEL_47:
    fputc(104, *v2);
    v11 = *(_DWORD *)(a1 + 28);
    if ((v11 & 0x400) == 0)
    {
LABEL_30:
      if ((v11 & 0x800) == 0)
        goto LABEL_31;
      goto LABEL_49;
    }
LABEL_48:
    fputc(76, *v2);
    v11 = *(_DWORD *)(a1 + 28);
    if ((v11 & 0x800) == 0)
    {
LABEL_31:
      if ((v11 & 0x1000) == 0)
        goto LABEL_33;
      goto LABEL_32;
    }
LABEL_49:
    fputc(108, *v2);
    if ((*(_DWORD *)(a1 + 28) & 0x1000) == 0)
    {
LABEL_33:
      if (*(_DWORD *)(a1 + 24))
        fprintf(*v2, "/%u");
      goto LABEL_35;
    }
LABEL_32:
    fputc(74, *v2);
    goto LABEL_33;
  }
  fputc(file_mdump_optyp[*(_BYTE *)(a1 + 9) & 7], *v2);
  if (*(_QWORD *)(a1 + 24))
    fprintf(*v2, "%.8llx");
LABEL_35:
  fprintf(*v2, ",%c", *(unsigned __int8 *)(a1 + 4));
  if (*(_BYTE *)(a1 + 4) != 120)
  {
    switch(*(_BYTE *)(a1 + 6))
    {
      case 1:
      case 2:
      case 4:
      case 7:
      case 8:
      case 0xA:
      case 0xB:
      case 0x17:
      case 0x29:
        fprintf(*v2, "%d");
        return fprintf(*v2, ",\"%s\"]\n", (const char *)(a1 + 160));
      case 3:
        return fprintf(*v2, ",\"%s\"]\n", (const char *)(a1 + 160));
      case 5:
      case 0xD:
      case 0x11:
      case 0x12:
      case 0x13:
      case 0x14:
        file_showstr(*v2, (_BYTE *)(a1 + 32), *(unsigned __int8 *)(a1 + 5));
        return fprintf(*v2, ",\"%s\"]\n", (const char *)(a1 + 160));
      case 6:
      case 9:
      case 0xC:
      case 0x15:
        v12 = *v2;
        v13 = *(unsigned int *)(a1 + 32);
        goto LABEL_58;
      case 0xE:
      case 0xF:
      case 0x10:
      case 0x16:
        v12 = *v2;
        v13 = *(unsigned int *)(a1 + 32);
        goto LABEL_60;
      case 0x18:
      case 0x19:
      case 0x1A:
      case 0x32:
        fprintf(*v2, "%lld");
        return fprintf(*v2, ",\"%s\"]\n", (const char *)(a1 + 160));
      case 0x1B:
      case 0x1C:
      case 0x1D:
        v12 = *v2;
        v13 = *(_QWORD *)(a1 + 32);
LABEL_58:
        v14 = 0;
        goto LABEL_65;
      case 0x1E:
      case 0x1F:
      case 0x20:
        v12 = *v2;
        v13 = *(_QWORD *)(a1 + 32);
LABEL_60:
        v14 = 1;
        goto LABEL_65;
      case 0x21:
      case 0x22:
      case 0x23:
        v15 = *v2;
        goto LABEL_63;
      case 0x24:
      case 0x25:
      case 0x26:
        v15 = *v2;
LABEL_63:
        fprintf(v15, "%G");
        break;
      case 0x2A:
      case 0x2B:
      case 0x2C:
        v12 = *v2;
        v13 = *(_QWORD *)(a1 + 32);
        v14 = 2;
LABEL_65:
        file_fmttime(v17, 0x100uLL, v13, v14);
        fprintf(v12, "%s,");
        break;
      case 0x2D:
      case 0x2E:
      case 0x30:
        fprintf(*v2, "'%s'");
        break;
      case 0x31:
        file_print_guid(v17, 0x100uLL, a1 + 32);
        fputs(v17, *v2);
        break;
      default:
        fprintf(*v2, "*bad type %d*");
        break;
    }
  }
  return fprintf(*v2, ",\"%s\"]\n", (const char *)(a1 + 160));
}

char *file_fmttime(char *a1, size_t a2, uint64_t a3, char a4)
{
  tm *v7;
  char *v8;
  char *v9;
  time_t v11[2];
  tm v12;

  memset(&v12, 0, sizeof(v12));
  if ((a4 & 2) != 0)
  {
    v11[0] = 0;
    v11[1] = 0;
    cdf_timestamp_to_timespec(v11, a3);
    a3 = v11[0];
  }
  v11[0] = a3;
  if ((a4 & 1) != 0)
  {
    v7 = localtime_r(v11, &v12);
    if (!v7)
    {
LABEL_9:
      strlcpy(a1, "*Invalid time*", a2);
      return a1;
    }
  }
  else
  {
    v7 = gmtime_r(v11, &v12);
    if (!v7)
      goto LABEL_9;
  }
  v8 = asctime_r(v7, a1);
  if (!v8)
    goto LABEL_9;
  v9 = v8;
  v8[strcspn(v8, "\n")] = 0;
  return v9;
}

uint64_t file_magwarn(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  FILE **v11;

  fflush((FILE *)*MEMORY[0x24BDAC8E8]);
  v11 = (FILE **)MEMORY[0x24BDAC8D8];
  if (*(_QWORD *)(a1 + 80))
    fprintf((FILE *)*MEMORY[0x24BDAC8D8], "%s, %lu: ", *(const char **)(a1 + 80), *(_QWORD *)(a1 + 88));
  fwrite("Warning: ", 9uLL, 1uLL, *v11);
  vfprintf(*v11, a2, &a9);
  return fputc(10, *v11);
}

void sub_20BC4395C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id getFPItemManagerClass()
{
  void *v0;
  id v1;
  _QWORD v3[5];
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = 0;
  v5 = &v4;
  v6 = 0x2050000000;
  v0 = (void *)getFPItemManagerClass_softClass;
  v7 = getFPItemManagerClass_softClass;
  if (!getFPItemManagerClass_softClass)
  {
    v3[0] = MEMORY[0x24BDAC760];
    v3[1] = 3221225472;
    v3[2] = __getFPItemManagerClass_block_invoke;
    v3[3] = &unk_24C4E3118;
    v3[4] = &v4;
    __getFPItemManagerClass_block_invoke((uint64_t)v3);
    v0 = (void *)v5[3];
  }
  v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_20BC43C8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__13942(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__13943(uint64_t a1)
{

}

void sub_20BC43F3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void *FileProviderLibrary()
{
  void *v0;
  void *v2;
  void *v3;

  if (!FileProviderLibraryCore_frameworkLibrary)
    FileProviderLibraryCore_frameworkLibrary = _sl_dlopen();
  v0 = (void *)FileProviderLibraryCore_frameworkLibrary;
  if (!FileProviderLibraryCore_frameworkLibrary)
  {
    objc_msgSend(MEMORY[0x24BDD1448], "currentHandler");
    v0 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "void *FileProviderLibrary(void)");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v2, CFSTR("NSURL+WFFilePathDisplay.m"), 19, CFSTR("%s"), 0);

    __break(1u);
    free(v3);
  }
  return v0;
}

void __getFPItemManagerClass_block_invoke(uint64_t a1)
{
  void *v2;
  void *v3;

  FileProviderLibrary();
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = objc_getClass("FPItemManager");
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    getFPItemManagerClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  }
  else
  {
    objc_msgSend(MEMORY[0x24BDD1448], "currentHandler");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "Class getFPItemManagerClass(void)_block_invoke");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, CFSTR("NSURL+WFFilePathDisplay.m"), 20, CFSTR("Unable to find class %s"), "FPItemManager");

    __break(1u);
  }
}

id WFContentPropertyGetPossibleValuesSynchronouslyWithSemaphore(void *a1)
{
  id v1;
  dispatch_semaphore_t v2;
  NSObject *v3;
  id v4;
  _QWORD v6[5];
  _QWORD v7[4];
  NSObject *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t (*v13)(uint64_t, uint64_t);
  void (*v14)(uint64_t);
  id v15;

  v1 = a1;
  v10 = 0;
  v11 = &v10;
  v12 = 0x3032000000;
  v13 = __Block_byref_object_copy__14268;
  v14 = __Block_byref_object_dispose__14269;
  v15 = 0;
  if (objc_msgSend(v1, "isAsynchronous"))
  {
    v2 = dispatch_semaphore_create(0);
    v7[0] = MEMORY[0x24BDAC760];
    v7[1] = 3221225472;
    v7[2] = __WFContentPropertyGetPossibleValuesSynchronouslyWithSemaphore_block_invoke;
    v7[3] = &unk_24C4E0520;
    v9 = &v10;
    v3 = v2;
    v8 = v3;
    objc_msgSend(v1, "getValuesWithCompletionBlock:", v7);
    dispatch_semaphore_wait(v3, 0xFFFFFFFFFFFFFFFFLL);

  }
  else
  {
    v6[0] = MEMORY[0x24BDAC760];
    v6[1] = 3221225472;
    v6[2] = __WFContentPropertyGetPossibleValuesSynchronouslyWithSemaphore_block_invoke_2;
    v6[3] = &unk_24C4E0548;
    v6[4] = &v10;
    objc_msgSend(v1, "getValuesWithCompletionBlock:", v6);
  }
  v4 = (id)v11[5];
  _Block_object_dispose(&v10, 8);

  return v4;
}

void sub_20BC46A80(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 64), 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__14268(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__14269(uint64_t a1)
{

}

uint64_t WFContentObjectsHaveProperties(void *a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void (**v7)(id, uint64_t, _QWORD);
  id v8;
  uint64_t v9;
  uint64_t i;
  uint64_t v11;
  id v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t j;
  void *v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  _BYTE v31[128];
  _BYTE v32[128];
  uint64_t v33;

  v33 = *MEMORY[0x24BDAC8D0];
  v5 = a1;
  v6 = a2;
  v7 = a3;
  v27 = 0u;
  v28 = 0u;
  v29 = 0u;
  v30 = 0u;
  v8 = v5;
  v22 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v27, v32, 16);
  if (v22)
  {
    v9 = *(_QWORD *)v28;
    v21 = *(_QWORD *)v28;
    do
    {
      for (i = 0; i != v22; ++i)
      {
        if (*(_QWORD *)v28 != v9)
          objc_enumerationMutation(v8);
        v11 = *(_QWORD *)(*((_QWORD *)&v27 + 1) + 8 * i);
        v23 = 0u;
        v24 = 0u;
        v25 = 0u;
        v26 = 0u;
        v12 = v6;
        v13 = v6;
        v14 = objc_msgSend(v13, "countByEnumeratingWithState:objects:count:", &v23, v31, 16);
        if (v14)
        {
          v15 = v14;
          v16 = *(_QWORD *)v24;
          while (2)
          {
            for (j = 0; j != v15; ++j)
            {
              if (*(_QWORD *)v24 != v16)
                objc_enumerationMutation(v13);
              v7[2](v7, v11, *(_QWORD *)(*((_QWORD *)&v23 + 1) + 8 * j));
              v18 = (void *)objc_claimAutoreleasedReturnValue();

              if (!v18)
              {

                v19 = 0;
                v6 = v12;
                goto LABEL_19;
              }
            }
            v15 = objc_msgSend(v13, "countByEnumeratingWithState:objects:count:", &v23, v31, 16);
            if (v15)
              continue;
            break;
          }
        }

        v6 = v12;
        v9 = v21;
      }
      v19 = 1;
      v22 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v27, v32, 16);
    }
    while (v22);
  }
  else
  {
    v19 = 1;
  }
LABEL_19:

  return v19;
}

void sub_20BC46FE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_20BC470C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id ACAccountIdentifierKeyFunction()
{
  return (id)constantACAccountIdentifierKey;
}

id initACAccountIdentifierKey()
{
  id *v0;

  if (AccountsLibrary_sOnce != -1)
    dispatch_once(&AccountsLibrary_sOnce, &__block_literal_global_90_14318);
  v0 = (id *)dlsym((void *)AccountsLibrary_sLib, "ACAccountIdentifierKey");
  if (!v0)
    __assert_rtn("initACAccountIdentifierKey", "WFManagedConfigurationProfile.m", 31, "constant");
  objc_storeStrong((id *)&constantACAccountIdentifierKey, *v0);
  getACAccountIdentifierKey[0] = (uint64_t (*)())ACAccountIdentifierKeyFunction;
  return (id)constantACAccountIdentifierKey;
}

uint64_t __Block_byref_object_copy__14326(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__14327(uint64_t a1)
{

}

id MCManagedAppsChangedNotificationFunction()
{
  return (id)constantMCManagedAppsChangedNotification;
}

id initMCManagedAppsChangedNotification()
{
  id *v0;

  if (ManagedConfigurationLibrary_sOnce != -1)
    dispatch_once(&ManagedConfigurationLibrary_sOnce, &__block_literal_global_87);
  v0 = (id *)dlsym((void *)ManagedConfigurationLibrary_sLib, "MCManagedAppsChangedNotification");
  if (!v0)
    __assert_rtn("initMCManagedAppsChangedNotification", "WFManagedConfigurationProfile.m", 23, "constant");
  objc_storeStrong((id *)&constantMCManagedAppsChangedNotification, *v0);
  getMCManagedAppsChangedNotification = (uint64_t (*)())MCManagedAppsChangedNotificationFunction;
  return (id)constantMCManagedAppsChangedNotification;
}

id ACDAccountStoreDidChangeNotificationFunction()
{
  return (id)constantACDAccountStoreDidChangeNotification;
}

id initACDAccountStoreDidChangeNotification()
{
  id *v0;

  if (AccountsLibrary_sOnce != -1)
    dispatch_once(&AccountsLibrary_sOnce, &__block_literal_global_90_14318);
  v0 = (id *)dlsym((void *)AccountsLibrary_sLib, "ACDAccountStoreDidChangeNotification");
  if (!v0)
    __assert_rtn("initACDAccountStoreDidChangeNotification", "WFManagedConfigurationProfile.m", 30, "constant");
  objc_storeStrong((id *)&constantACDAccountStoreDidChangeNotification, *v0);
  getACDAccountStoreDidChangeNotification[0] = (uint64_t (*)())ACDAccountStoreDidChangeNotificationFunction;
  return (id)constantACDAccountStoreDidChangeNotification;
}

id MCProfileConnectionFunction()
{
  return (id)classMCProfileConnection;
}

Class initMCProfileConnection()
{
  Class result;

  if (ManagedConfigurationLibrary_sOnce != -1)
    dispatch_once(&ManagedConfigurationLibrary_sOnce, &__block_literal_global_87);
  result = objc_getClass("MCProfileConnection");
  classMCProfileConnection = (uint64_t)result;
  getMCProfileConnectionClass = (uint64_t (*)())MCProfileConnectionFunction;
  return result;
}

id ACAccountStoreFunction()
{
  return (id)classACAccountStore;
}

Class initACAccountStore()
{
  Class result;

  if (AccountsLibrary_sOnce != -1)
    dispatch_once(&AccountsLibrary_sOnce, &__block_literal_global_90_14318);
  result = objc_getClass("ACAccountStore");
  classACAccountStore = (uint64_t)result;
  getACAccountStoreClass = (uint64_t (*)())ACAccountStoreFunction;
  return result;
}

uint64_t initMCIsAppAccountBasedSourceForOpenIn(void *a1)
{
  id v1;
  uint64_t (*v2)();
  uint64_t v3;

  v1 = a1;
  if (ManagedConfigurationLibrary_sOnce != -1)
    dispatch_once(&ManagedConfigurationLibrary_sOnce, &__block_literal_global_87);
  v2 = (uint64_t (*)())dlsym((void *)ManagedConfigurationLibrary_sLib, "MCIsAppAccountBasedSourceForOpenIn");
  softLinkMCIsAppAccountBasedSourceForOpenIn = v2;
  if (v2)
    v3 = ((uint64_t (*)(id))v2)(v1);
  else
    v3 = 0;

  return v3;
}

void sub_20BC47EF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_20BC47FF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id WFSupportedArchiveFormats()
{
  _QWORD v1[9];

  v1[8] = *MEMORY[0x24BDAC8D0];
  v1[0] = CFSTR("zip");
  v1[1] = CFSTR("tar.gz");
  v1[2] = CFSTR("tar.bz2");
  v1[3] = CFSTR("tar.xz");
  v1[4] = CFSTR("tar");
  v1[5] = CFSTR("gz");
  v1[6] = CFSTR("cpio");
  v1[7] = CFSTR("iso");
  objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:count:", v1, 8);
  return (id)objc_claimAutoreleasedReturnValue();
}

id WFArchiveFormatFileExtension(void *a1)
{
  return a1;
}

uint64_t WFArchiveFormatSupportsMultipleFiles(void *a1)
{
  id v1;
  uint64_t v2;

  v1 = a1;
  if ((objc_msgSend(v1, "isEqualToString:", CFSTR("gz")) & 1) != 0)
    v2 = 0;
  else
    v2 = objc_msgSend(v1, "isEqualToString:", CFSTR("xz")) ^ 1;

  return v2;
}

uint64_t WFCoercionPathContainsPath(void *a1, void *a2)
{
  id v3;
  id v4;
  uint64_t matched;
  uint64_t v6;
  uint64_t v7;

  v3 = a1;
  v4 = a2;
  matched = objc_msgSend(v3, "count");
  if (matched)
  {
    if (objc_msgSend(v4, "count"))
    {
      v6 = 0;
      v7 = matched - 1;
      do
      {
        matched = WFCoercionPathFollowingNodesMatchInnerToEnd(v3, v4, v6, 0);
        if ((matched & 1) != 0)
          break;
      }
      while (v7 != v6++);
    }
    else
    {
      matched = 0;
    }
  }

  return matched;
}

uint64_t WFCoercionPathFollowingNodesMatchInnerToEnd(void *a1, void *a2, uint64_t a3, unint64_t a4)
{
  id v7;
  id v8;
  uint64_t v9;
  uint64_t matched;

  v7 = a1;
  v8 = a2;
  if (objc_msgSend(v8, "count") <= a4)
  {
    matched = 1;
  }
  else if (objc_msgSend(v7, "count") != a3
         && (objc_msgSend(v7, "objectAtIndex:", a3),
             v9 = objc_opt_class(),
             objc_msgSend(v8, "objectAtIndex:", a4),
             v9 == objc_opt_class()))
  {
    matched = WFCoercionPathFollowingNodesMatchInnerToEnd(v7, v8, a3 + 1, a4 + 1);
  }
  else
  {
    matched = 0;
  }

  return matched;
}

void sub_20BC4B1CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  _Block_object_dispose(&a33, 8);
  _Unwind_Resume(a1);
}

id UIPrintFormatterFunction_15017()
{
  return (id)classUIPrintFormatter_15046;
}

Class initUIPrintFormatter_15018()
{
  Class result;

  if (UIKitLibrary_sOnce_15038 != -1)
    dispatch_once(&UIKitLibrary_sOnce_15038, &__block_literal_global_15039);
  result = objc_getClass("UIPrintFormatter");
  classUIPrintFormatter_15046 = (uint64_t)result;
  getUIPrintFormatterClass_15016 = (uint64_t (*)())UIPrintFormatterFunction_15017;
  return result;
}

id UIViewPrintFormatterFunction_15020()
{
  return (id)classUIViewPrintFormatter_15041;
}

Class initUIViewPrintFormatter_15021()
{
  Class result;

  if (UIKitLibrary_sOnce_15038 != -1)
    dispatch_once(&UIKitLibrary_sOnce_15038, &__block_literal_global_15039);
  result = objc_getClass("UIViewPrintFormatter");
  classUIViewPrintFormatter_15041 = (uint64_t)result;
  getUIViewPrintFormatterClass_15019 = (uint64_t (*)())UIViewPrintFormatterFunction_15020;
  return result;
}

Class __getWKWebViewClass_block_invoke_15023(uint64_t a1)
{
  Class result;
  void *v3;
  void *v4;
  void *v5;

  if (!WebKitLibraryCore_frameworkLibrary_15026)
    WebKitLibraryCore_frameworkLibrary_15026 = _sl_dlopen();
  if (!WebKitLibraryCore_frameworkLibrary_15026)
  {
    objc_msgSend(MEMORY[0x24BDD1448], "currentHandler");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "void *WebKitLibrary(void)");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, CFSTR("WFPDFContentItem.m"), 29, CFSTR("%s"), 0);

    goto LABEL_8;
  }
  result = objc_getClass("WKWebView");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    objc_msgSend(MEMORY[0x24BDD1448], "currentHandler");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "Class getWKWebViewClass(void)_block_invoke");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v5, CFSTR("WFPDFContentItem.m"), 30, CFSTR("Unable to find class %s"), "WKWebView");

LABEL_8:
    __break(1u);
  }
  getWKWebViewClass_softClass_15022 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

id PDFDocumentFunction()
{
  return (id)classPDFDocument;
}

Class initPDFDocument()
{
  Class result;

  if (PDFKitLibrary_sOnce != -1)
    dispatch_once(&PDFKitLibrary_sOnce, &__block_literal_global_209_15090);
  result = objc_getClass("PDFDocument");
  classPDFDocument = (uint64_t)result;
  getPDFDocumentClass = (uint64_t (*)())PDFDocumentFunction;
  return result;
}

id WFSerializeNSMeasurement(void *a1)
{
  objc_class *v1;
  id v2;
  id v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;

  v1 = (objc_class *)MEMORY[0x24BDBCED8];
  v2 = a1;
  v3 = objc_alloc_init(v1);
  v4 = (void *)MEMORY[0x24BDD16E0];
  objc_msgSend(v2, "doubleValue");
  objc_msgSend(v4, "numberWithDouble:");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "setObject:forKey:", v5, CFSTR("link.contentkit.value"));

  objc_msgSend(v2, "unit");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "symbol");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "setObject:forKey:", v7, CFSTR("link.contentkit.unit"));

  objc_msgSend(v2, "wf_preferredValueRounding");
  v8 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v3, "if_setObjectIfNonNil:forKey:", v8, CFSTR("link.contentkit.preferredValueRounding"));
  return v3;
}

id WFDeserializeNSMeasurement(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  id v6;
  void *v7;
  void *v8;
  id v9;
  void *v10;
  void *v11;
  id v12;
  void *v13;
  id v14;

  v1 = a1;
  v2 = v1;
  if (v1)
  {
    objc_msgSend(v1, "objectForKeyedSubscript:", CFSTR("link.contentkit.value"));
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    if (v3)
    {
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) != 0)
        v4 = v3;
      else
        v4 = 0;
    }
    else
    {
      v4 = 0;
    }
    v6 = v4;

    objc_msgSend(v2, "objectForKeyedSubscript:", CFSTR("link.contentkit.unit"));
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    if (v7)
    {
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) != 0)
        v8 = v7;
      else
        v8 = 0;
    }
    else
    {
      v8 = 0;
    }
    v9 = v8;

    objc_msgSend(v2, "objectForKeyedSubscript:", CFSTR("link.contentkit.preferredValueRounding"));
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    if (v10)
    {
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) != 0)
        v11 = v10;
      else
        v11 = 0;
    }
    else
    {
      v11 = 0;
    }
    v12 = v11;

    v5 = 0;
    if (v6 && v9)
    {
      objc_msgSend(MEMORY[0x24BEC1540], "unitFromString:", v9);
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      if (v13)
      {
        v14 = objc_alloc(MEMORY[0x24BDD1660]);
        objc_msgSend(v6, "doubleValue");
        v5 = (void *)objc_msgSend(v14, "initWithDoubleValue:unit:", v13);
        objc_msgSend(v5, "setWf_preferredValueRounding:", v12);
      }
      else
      {
        v5 = 0;
      }

    }
  }
  else
  {
    v5 = 0;
  }

  return v5;
}

void sub_20BC4DA10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void WFMKCoordinateRegionMake(double a1, double a2, double a3, double a4)
{
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  void *v15;

  v12 = 0;
  v13 = &v12;
  v14 = 0x2020000000;
  v8 = getMKCoordinateRegionMakeSymbolLoc_ptr;
  v15 = getMKCoordinateRegionMakeSymbolLoc_ptr;
  if (!getMKCoordinateRegionMakeSymbolLoc_ptr)
  {
    v9 = MapKitLibrary_15409();
    v8 = dlsym(v9, "MKCoordinateRegionMake");
    v13[3] = (uint64_t)v8;
    getMKCoordinateRegionMakeSymbolLoc_ptr = v8;
  }
  _Block_object_dispose(&v12, 8);
  if (v8)
  {
    ((void (*)(double, double, double, double))v8)(a1, a2, a3, a4);
  }
  else
  {
    objc_msgSend(MEMORY[0x24BDD1448], "currentHandler");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "MKCoordinateRegion WFMKCoordinateRegionMake(CLLocationCoordinate2D, MKCoordinateSpan)");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v10, "handleFailureInFunction:file:lineNumber:description:", v11, CFSTR("DCMapsLink+MKGeometry.m"), 20, CFSTR("%s"), dlerror());

    __break(1u);
  }
}

void sub_20BC4DD64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void *MapKitLibrary_15409()
{
  void *v0;
  void *v2;
  void *v3;

  if (!MapKitLibraryCore_frameworkLibrary_15415)
    MapKitLibraryCore_frameworkLibrary_15415 = _sl_dlopen();
  v0 = (void *)MapKitLibraryCore_frameworkLibrary_15415;
  if (!MapKitLibraryCore_frameworkLibrary_15415)
  {
    objc_msgSend(MEMORY[0x24BDD1448], "currentHandler");
    v0 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "void *MapKitLibrary(void)");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v2, CFSTR("DCMapsLink+MKGeometry.m"), 19, CFSTR("%s"), 0);

    __break(1u);
    free(v3);
  }
  return v0;
}

void WFCLLocationCoordinate2DIsValid(double a1, double a2)
{
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  void *v11;

  v8 = 0;
  v9 = &v8;
  v10 = 0x2020000000;
  v4 = getCLLocationCoordinate2DIsValidSymbolLoc_ptr_15424;
  v11 = getCLLocationCoordinate2DIsValidSymbolLoc_ptr_15424;
  if (!getCLLocationCoordinate2DIsValidSymbolLoc_ptr_15424)
  {
    v5 = CoreLocationLibrary_15418();
    v4 = dlsym(v5, "CLLocationCoordinate2DIsValid");
    v9[3] = (uint64_t)v4;
    getCLLocationCoordinate2DIsValidSymbolLoc_ptr_15424 = v4;
  }
  _Block_object_dispose(&v8, 8);
  if (v4)
  {
    ((void (*)(double, double))v4)(a1, a2);
  }
  else
  {
    objc_msgSend(MEMORY[0x24BDD1448], "currentHandler");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "BOOL WFCLLocationCoordinate2DIsValid(CLLocationCoordinate2D)");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "handleFailureInFunction:file:lineNumber:description:", v7, CFSTR("DCMapsLink+MKGeometry.m"), 15, CFSTR("%s"), dlerror());

    __break(1u);
  }
}

void sub_20BC4DF78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void getkCLLocationCoordinate2DInvalid()
{
  void *v0;
  void *v1;
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = 0;
  v5 = &v4;
  v6 = 0x2020000000;
  v0 = (void *)getkCLLocationCoordinate2DInvalidSymbolLoc_ptr;
  v7 = getkCLLocationCoordinate2DInvalidSymbolLoc_ptr;
  if (!getkCLLocationCoordinate2DInvalidSymbolLoc_ptr)
  {
    v1 = CoreLocationLibrary_15418();
    v0 = dlsym(v1, "kCLLocationCoordinate2DInvalid");
    v5[3] = (uint64_t)v0;
    getkCLLocationCoordinate2DInvalidSymbolLoc_ptr = (uint64_t)v0;
  }
  _Block_object_dispose(&v4, 8);
  if (!v0)
  {
    objc_msgSend(MEMORY[0x24BDD1448], "currentHandler");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "CLLocationCoordinate2D getkCLLocationCoordinate2DInvalid(void)");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, CFSTR("DCMapsLink+MKGeometry.m"), 17, CFSTR("%s"), dlerror());

    __break(1u);
  }
}

void sub_20BC4E070(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void *CoreLocationLibrary_15418()
{
  void *v0;
  void *v2;
  void *v3;

  if (!CoreLocationLibraryCore_frameworkLibrary_15420)
    CoreLocationLibraryCore_frameworkLibrary_15420 = _sl_dlopen();
  v0 = (void *)CoreLocationLibraryCore_frameworkLibrary_15420;
  if (!CoreLocationLibraryCore_frameworkLibrary_15420)
  {
    objc_msgSend(MEMORY[0x24BDD1448], "currentHandler");
    v0 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "void *CoreLocationLibrary(void)");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v2, CFSTR("DCMapsLink+MKGeometry.m"), 14, CFSTR("%s"), 0);

    __break(1u);
    free(v3);
  }
  return v0;
}

void sub_20BC4E464(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id WFExistingFileFromURL(void *a1)
{
  void *v1;
  void *v2;
  char v3;
  void *v4;
  void *v5;
  unint64_t v6;
  id v7;

  v1 = (void *)objc_msgSend(a1, "copy");
  while (1)
  {
    objc_msgSend(v1, "pathComponents");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    if ((unint64_t)objc_msgSend(v2, "count") < 2)
      break;
    v3 = objc_msgSend(v1, "wf_fileExists");

    if ((v3 & 1) != 0)
      goto LABEL_7;
    objc_msgSend(v1, "URLByDeletingLastPathComponent");
    v4 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(v4, "path");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = objc_msgSend(v5, "length");

    v1 = v4;
    if (v6 > 0x400)
    {
      v7 = 0;
      goto LABEL_8;
    }
  }

LABEL_7:
  v7 = v1;
  v4 = v7;
LABEL_8:

  return v7;
}

id WFJavaScriptRunnerHostProtocolXPCInterface()
{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;

  objc_msgSend(MEMORY[0x24BDD1990], "interfaceWithProtocol:", &unk_25474D3A0);
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  v1 = (void *)MEMORY[0x24BDBCF20];
  v2 = objc_opt_class();
  v3 = objc_opt_class();
  v4 = objc_opt_class();
  v5 = objc_opt_class();
  v6 = objc_opt_class();
  objc_msgSend(v1, "setWithObjects:", v2, v3, v4, v5, v6, objc_opt_class(), 0);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "setClasses:forSelector:argumentIndex:ofReply:", v7, sel_runJavaScript_completionHandler_, 0, 1);

  return v0;
}

void sub_20BC4F8B8(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 80), 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__15630(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__15631(uint64_t a1)
{

}

id WFCollapseANDCompoundPredicatesInsidePredicate(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];
  _QWORD v16[2];

  v16[1] = *MEMORY[0x24BDAC8D0];
  v1 = a1;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0 && objc_msgSend(v1, "compoundPredicateType") == 1)
  {
    v2 = (void *)objc_opt_new();
    v11 = 0u;
    v12 = 0u;
    v13 = 0u;
    v14 = 0u;
    objc_msgSend(v1, "subpredicates", 0);
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
    if (v4)
    {
      v5 = v4;
      v6 = *(_QWORD *)v12;
      do
      {
        v7 = 0;
        do
        {
          if (*(_QWORD *)v12 != v6)
            objc_enumerationMutation(v3);
          v8 = *(_QWORD *)(*((_QWORD *)&v11 + 1) + 8 * v7);
          objc_opt_class();
          if ((objc_opt_isKindOfClass() & 1) != 0)
          {
            objc_msgSend(v2, "addObject:", v8);
          }
          else
          {
            objc_opt_class();
            if ((objc_opt_isKindOfClass() & 1) != 0)
            {
              WFCollapseANDCompoundPredicatesInsidePredicate(v8);
              v9 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v2, "addObjectsFromArray:", v9);

            }
          }
          ++v7;
        }
        while (v5 != v7);
        v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
      }
      while (v5);
    }

  }
  else
  {
    v16[0] = v1;
    objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:count:", v16, 1);
    v2 = (void *)objc_claimAutoreleasedReturnValue();
  }

  return v2;
}

void sub_20BC50548(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _Block_object_dispose(&a9, 8);
  _Unwind_Resume(a1);
}

Class __getPHAssetClass_block_invoke_15687(uint64_t a1)
{
  Class result;
  void *v3;
  void *v4;
  void *v5;

  if (!PhotosLibraryCore_frameworkLibrary_15688)
    PhotosLibraryCore_frameworkLibrary_15688 = _sl_dlopen();
  if (!PhotosLibraryCore_frameworkLibrary_15688)
  {
    objc_msgSend(MEMORY[0x24BDD1448], "currentHandler");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "void *PhotosLibrary(void)");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, CFSTR("WFPhotoItemProviderContentItem.m"), 15, CFSTR("%s"), 0);

    goto LABEL_8;
  }
  result = objc_getClass("PHAsset");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    objc_msgSend(MEMORY[0x24BDD1448], "currentHandler");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "Class getPHAssetClass(void)_block_invoke");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v5, CFSTR("WFPhotoItemProviderContentItem.m"), 16, CFSTR("Unable to find class %s"), "PHAsset");

LABEL_8:
    __break(1u);
  }
  getPHAssetClass_softClass_15686 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

id WFAppTransportSecuredURL(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  char v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  char v20;
  id v21;
  void *v22;
  void *v23;
  void *v24;
  int v25;
  void *v26;
  void *v28;
  char v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t (*v33)(uint64_t, void *, void *);
  void *v34;
  id v35;
  id v36;
  id v37;
  _QWORD v38[2];

  v38[1] = *MEMORY[0x24BDAC8D0];
  v1 = a1;
  v2 = v1;
  if (v1)
  {
    objc_msgSend(v1, "scheme");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    v4 = objc_msgSend(v3, "isEqualToString:", CFSTR("http"));

    if ((v4 & 1) != 0)
    {
      objc_msgSend(v2, "host");
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v5, "lowercaseString");
      v6 = (void *)objc_claimAutoreleasedReturnValue();

      objc_msgSend(MEMORY[0x24BDD14A8], "characterSetWithCharactersInString:", CFSTR("."));
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v6, "componentsSeparatedByCharactersInSet:", v7);
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x24BDD1488], "mainBundle");
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v9, "objectForInfoDictionaryKey:", CFSTR("NSAppTransportSecurity"));
      v10 = (void *)objc_claimAutoreleasedReturnValue();

      if (!v10)
      {
        v21 = v2;
LABEL_14:

        goto LABEL_15;
      }
      objc_msgSend(v10, "objectForKeyedSubscript:", CFSTR("NSExceptionDomains"));
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      v31 = MEMORY[0x24BDAC760];
      v32 = 3221225472;
      v33 = __WFAppTransportSecuredURL_block_invoke;
      v34 = &unk_24C4E0B20;
      v35 = v6;
      v36 = v7;
      v30 = v8;
      v37 = v8;
      objc_msgSend(v11, "keysOfEntriesPassingTest:", &v31);
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x24BDD17C0], "sortDescriptorWithKey:ascending:", CFSTR("length"), 0);
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      v38[0] = v13;
      objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:count:", v38, 1);
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v12, "sortedArrayUsingDescriptors:", v14);
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v15, "firstObject");
      v16 = (void *)objc_claimAutoreleasedReturnValue();

      objc_msgSend(v11, "objectForKeyedSubscript:", v16);
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v17, "objectForKeyedSubscript:", CFSTR("NSExceptionAllowsInsecureHTTPLoads"));
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      if (v18)
      {
        v19 = v18;
        v20 = objc_msgSend(v18, "BOOLValue");

        if ((v20 & 1) != 0)
        {
LABEL_6:
          v21 = v2;
LABEL_13:
          v8 = v30;

          goto LABEL_14;
        }
      }
      else
      {
        objc_msgSend(v11, "objectForKeyedSubscript:", v16);
        v22 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v22, "objectForKeyedSubscript:", CFSTR("NSThirdPartyExceptionAllowsInsecureHTTPLoads"));
        v23 = (void *)objc_claimAutoreleasedReturnValue();
        if (v23)
        {
          v24 = v23;
          v25 = objc_msgSend(v23, "BOOLValue");

          if (v25)
            goto LABEL_6;
        }
        else
        {
          objc_msgSend(v10, "objectForKeyedSubscript:", CFSTR("NSAllowsArbitraryLoads"));
          v28 = (void *)objc_claimAutoreleasedReturnValue();
          v29 = objc_msgSend(v28, "BOOLValue");

          if ((v29 & 1) != 0)
            goto LABEL_6;
        }
      }
      objc_msgSend(MEMORY[0x24BDD1808], "componentsWithURL:resolvingAgainstBaseURL:", v2, 0, v30, v31, v32, v33, v34, v35, v36);
      v26 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v26, "setScheme:", CFSTR("https"));
      objc_msgSend(v26, "URL");
      v21 = (id)objc_claimAutoreleasedReturnValue();

      goto LABEL_13;
    }
    v21 = v2;
  }
  else
  {
    v21 = 0;
  }
LABEL_15:

  return v21;
}

id EKAttendeeFunction()
{
  return (id)classEKAttendee;
}

Class initEKAttendee()
{
  Class result;

  if (EventKitLibrary_sOnce != -1)
    dispatch_once(&EventKitLibrary_sOnce, &__block_literal_global_16212);
  result = objc_getClass("EKAttendee");
  classEKAttendee = (uint64_t)result;
  getEKAttendeeClass = (uint64_t (*)())EKAttendeeFunction;
  return result;
}

WFTimeInterval *WFTimeIntervalFromExpectedTravelTime(double a1)
{
  uint64_t v1;

  if (a1 >= 60.0)
    v1 = 124;
  else
    v1 = 128;
  return -[WFTimeInterval initWithTimeInterval:allowedUnits:unitsStyle:zeroFormattingBehavior:]([WFTimeInterval alloc], "initWithTimeInterval:allowedUnits:unitsStyle:zeroFormattingBehavior:", v1, 3, 1, a1);
}

void sub_20BC52980(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__16563(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__16564(uint64_t a1)
{

}

id WFIndexSetFromContentSlice(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = a3;
  v4 = (a3 & (a1 >> 63)) + a1;
  if (a1 == 0x7FFFFFFFFFFFFFFFLL)
    v4 = 0;
  if (a2 == 0x7FFFFFFFFFFFFFFFLL)
    v5 = a3;
  else
    v5 = (a3 & (a2 >> 63)) + a2;
  if (v4 >= a3)
    v4 = a3;
  if (v5 < a3)
    v3 = v5;
  if ((v3 & (unint64_t)~(v3 >> 63)) >= (v4 & (unint64_t)~(v4 >> 63)))
    objc_msgSend(MEMORY[0x24BDD15E0], "indexSetWithIndexesInRange:");
  else
    objc_msgSend(MEMORY[0x24BDD15E0], "indexSet");
  return (id)objc_claimAutoreleasedReturnValue();
}

id WFRequiredContentComparisonPredicatesFromPredicate(void *a1)
{
  id v1;
  id v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  id v15;
  _BYTE v16[128];
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  v1 = a1;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    v2 = v1;
    v3 = (void *)objc_opt_new();
    if (objc_msgSend(v2, "compoundPredicateType") == 1)
    {
      v13 = 0u;
      v14 = 0u;
      v11 = 0u;
      v12 = 0u;
      objc_msgSend(v2, "subpredicates", 0);
      v4 = (void *)objc_claimAutoreleasedReturnValue();
      v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v11, v16, 16);
      if (v5)
      {
        v6 = v5;
        v7 = *(_QWORD *)v12;
        do
        {
          v8 = 0;
          do
          {
            if (*(_QWORD *)v12 != v7)
              objc_enumerationMutation(v4);
            WFRequiredContentComparisonPredicatesFromPredicate(*(_QWORD *)(*((_QWORD *)&v11 + 1) + 8 * v8));
            v9 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v3, "addObjectsFromArray:", v9);

            ++v8;
          }
          while (v6 != v8);
          v6 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v11, v16, 16);
        }
        while (v6);
      }

    }
  }
  else
  {
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
    {
      v15 = v1;
      objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:count:", &v15, 1);
      v3 = (void *)objc_claimAutoreleasedReturnValue();
    }
    else
    {
      v3 = (void *)MEMORY[0x24BDBD1A8];
    }
  }

  return v3;
}

id WFEKCalendarMatchesContentPredicate(void *a1, void *a2)
{
  id v3;
  id v4;
  id v5;
  void *v6;
  void *v7;
  uint64_t v8;
  id v9;
  void *v10;
  void *v11;
  int v12;
  void *v13;
  void *v14;
  char v15;
  _QWORD v17[4];
  id v18;
  _QWORD v19[2];

  v19[1] = *MEMORY[0x24BDAC8D0];
  v3 = a1;
  v4 = a2;
  if (!v4)
  {
    v6 = (void *)MEMORY[0x24BDBD1C0];
    goto LABEL_18;
  }
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
    {
      v9 = v3;
      objc_msgSend(v9, "property");
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v10, "keyPath");
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      v12 = objc_msgSend(v11, "isEqualToString:", CFSTR("event.calendar.title"));

      if (v12)
      {
        v13 = (void *)MEMORY[0x24BDD16E0];
        v19[0] = v4;
        objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:count:", v19, 1);
        v14 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v13, "numberWithBool:", objc_msgSend(v9, "evaluateWithValues:", v14));
        v6 = (void *)objc_claimAutoreleasedReturnValue();

        goto LABEL_18;
      }

    }
LABEL_17:
    v6 = 0;
    goto LABEL_18;
  }
  v5 = v3;
  objc_msgSend(v5, "subpredicates");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v17[0] = MEMORY[0x24BDAC760];
  v17[1] = 3221225472;
  v17[2] = __WFEKCalendarMatchesContentPredicate_block_invoke;
  v17[3] = &unk_24C4E0EC8;
  v18 = v4;
  objc_msgSend(v6, "if_compactMap:", v17);
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  if (!objc_msgSend(v7, "count"))
  {
    v15 = 0;
    v6 = 0;
    goto LABEL_16;
  }
  if (objc_msgSend(v5, "compoundPredicateType") == 1)
  {
    objc_msgSend(MEMORY[0x24BDD16E0], "numberWithInt:", objc_msgSend(v7, "containsObject:", MEMORY[0x24BDBD1C0]) ^ 1);
    v8 = objc_claimAutoreleasedReturnValue();
LABEL_13:
    v6 = (void *)v8;
    v15 = 0;
    goto LABEL_16;
  }
  if (objc_msgSend(v5, "compoundPredicateType") == 2)
  {
    objc_msgSend(MEMORY[0x24BDD16E0], "numberWithBool:", objc_msgSend(v7, "containsObject:", MEMORY[0x24BDBD1C8]));
    v8 = objc_claimAutoreleasedReturnValue();
    goto LABEL_13;
  }
  v15 = 1;
LABEL_16:

  if ((v15 & 1) != 0)
    goto LABEL_17;
LABEL_18:

  return v6;
}

void sub_20BC57374(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 80), 8);
  _Unwind_Resume(a1);
}

void *__getNSAttachmentAttributeNameSymbolLoc_block_invoke_17320(_QWORD *a1)
{
  void *v2;
  void *result;
  void *v4;

  if (!UIFoundationLibraryCore_frameworkLibrary_17329)
    UIFoundationLibraryCore_frameworkLibrary_17329 = _sl_dlopen();
  v2 = (void *)UIFoundationLibraryCore_frameworkLibrary_17329;
  if (!UIFoundationLibraryCore_frameworkLibrary_17329)
  {
    objc_msgSend(MEMORY[0x24BDD1448], "currentHandler");
    a1 = (_QWORD *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "void *UIFoundationLibrary(void)");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(a1, "handleFailureInFunction:file:lineNumber:description:", v2, CFSTR("WFWebArchive+ImageExtraction.m"), 15, CFSTR("%s"), 0);

    __break(1u);
    free(v4);
  }
  result = dlsym(v2, "NSAttachmentAttributeName");
  *(_QWORD *)(*(_QWORD *)(a1[4] + 8) + 24) = result;
  getNSAttachmentAttributeNameSymbolLoc_ptr_17319 = *(_QWORD *)(*(_QWORD *)(a1[4] + 8) + 24);
  return result;
}

void WFDyldBulkImageLoadCallback_17403()
{
  do
    __ldaxr(WFShouldRediscoverCURLCoercionClasses);
  while (__stlxr(1u, WFShouldRediscoverCURLCoercionClasses));
}

void sub_20BC57FD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id getREMReminderClass()
{
  void *v0;
  id v1;
  _QWORD v3[5];
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = 0;
  v5 = &v4;
  v6 = 0x2050000000;
  v0 = (void *)getREMReminderClass_softClass_17452;
  v7 = getREMReminderClass_softClass_17452;
  if (!getREMReminderClass_softClass_17452)
  {
    v3[0] = MEMORY[0x24BDAC760];
    v3[1] = 3221225472;
    v3[2] = __getREMReminderClass_block_invoke_17453;
    v3[3] = &unk_24C4E3118;
    v3[4] = &v4;
    __getREMReminderClass_block_invoke_17453((uint64_t)v3);
    v0 = (void *)v5[3];
  }
  v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_20BC58804(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void __getREMReminderClass_block_invoke_17453(uint64_t a1)
{
  void *v2;
  void *v3;

  ReminderKitLibrary_17454();
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = objc_getClass("REMReminder");
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    getREMReminderClass_softClass_17452 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  }
  else
  {
    objc_msgSend(MEMORY[0x24BDD1448], "currentHandler");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "Class getREMReminderClass(void)_block_invoke");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, CFSTR("WFReminderContentItem.m"), 32, CFSTR("Unable to find class %s"), "REMReminder");

    __break(1u);
  }
}

void ReminderKitLibrary_17454()
{
  void *v0;
  void *v1;
  void *v2;

  if (!ReminderKitLibraryCore_frameworkLibrary_17457)
    ReminderKitLibraryCore_frameworkLibrary_17457 = _sl_dlopen();
  if (!ReminderKitLibraryCore_frameworkLibrary_17457)
  {
    objc_msgSend(MEMORY[0x24BDD1448], "currentHandler");
    v0 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "void *ReminderKitLibrary(void)");
    v1 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v1, CFSTR("WFReminderContentItem.m"), 31, CFSTR("%s"), 0);

    __break(1u);
    free(v2);
  }
}

void __getREMExportingClass_block_invoke(uint64_t a1)
{
  void *v2;
  void *v3;

  ReminderKitLibrary_17454();
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = objc_getClass("REMExporting");
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    getREMExportingClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  }
  else
  {
    objc_msgSend(MEMORY[0x24BDD1448], "currentHandler");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "Class getREMExportingClass(void)_block_invoke");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, CFSTR("WFReminderContentItem.m"), 33, CFSTR("Unable to find class %s"), "REMExporting");

    __break(1u);
  }
}

void sub_20BC5A280(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void __getREMContactRepresentationClass_block_invoke(uint64_t a1)
{
  void *v2;
  void *v3;

  ReminderKitLibrary_17454();
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = objc_getClass("REMContactRepresentation");
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    getREMContactRepresentationClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  }
  else
  {
    objc_msgSend(MEMORY[0x24BDD1448], "currentHandler");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "Class getREMContactRepresentationClass(void)_block_invoke");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, CFSTR("WFReminderContentItem.m"), 36, CFSTR("Unable to find class %s"), "REMContactRepresentation");

    __break(1u);
  }
}

id getCLLocationClass_17591()
{
  void *v0;
  id v1;
  _QWORD v3[5];
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = 0;
  v5 = &v4;
  v6 = 0x2050000000;
  v0 = (void *)getCLLocationClass_softClass_17601;
  v7 = getCLLocationClass_softClass_17601;
  if (!getCLLocationClass_softClass_17601)
  {
    v3[0] = MEMORY[0x24BDAC760];
    v3[1] = 3221225472;
    v3[2] = __getCLLocationClass_block_invoke_17602;
    v3[3] = &unk_24C4E3118;
    v3[4] = &v4;
    __getCLLocationClass_block_invoke_17602((uint64_t)v3);
    v0 = (void *)v5[3];
  }
  v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_20BC5A75C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_20BC5AA64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  _Block_object_dispose(&a27, 8);
  _Unwind_Resume(a1);
}

void __getREMAlarmLocationTriggerClass_block_invoke(uint64_t a1)
{
  void *v2;
  void *v3;

  ReminderKitLibrary_17454();
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = objc_getClass("REMAlarmLocationTrigger");
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    getREMAlarmLocationTriggerClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  }
  else
  {
    objc_msgSend(MEMORY[0x24BDD1448], "currentHandler");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "Class getREMAlarmLocationTriggerClass(void)_block_invoke");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, CFSTR("WFReminderContentItem.m"), 34, CFSTR("Unable to find class %s"), "REMAlarmLocationTrigger");

    __break(1u);
  }
}

Class __getCLLocationClass_block_invoke_17602(uint64_t a1)
{
  Class result;
  void *v3;
  void *v4;
  void *v5;

  if (!CoreLocationLibraryCore_frameworkLibrary_17603)
    CoreLocationLibraryCore_frameworkLibrary_17603 = _sl_dlopen();
  if (!CoreLocationLibraryCore_frameworkLibrary_17603)
  {
    objc_msgSend(MEMORY[0x24BDD1448], "currentHandler");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "void *CoreLocationLibrary(void)");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, CFSTR("WFReminderContentItem.m"), 38, CFSTR("%s"), 0);

    goto LABEL_8;
  }
  result = objc_getClass("CLLocation");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    objc_msgSend(MEMORY[0x24BDD1448], "currentHandler");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "Class getCLLocationClass(void)_block_invoke");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v5, CFSTR("WFReminderContentItem.m"), 39, CFSTR("Unable to find class %s"), "CLLocation");

LABEL_8:
    __break(1u);
  }
  getCLLocationClass_softClass_17601 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

id WFReminderPropertyNameTitle()
{
  return WFLocalizedContentPropertyNameMarker(CFSTR("Title"));
}

id WFReminderPropertyNameCreationDate()
{
  return WFLocalizedContentPropertyNameMarker(CFSTR("Creation Date"));
}

id WFReminderPropertyNameDueDate()
{
  return WFLocalizedContentPropertyNameMarker(CFSTR("Due Date"));
}

id WFReminderPropertyNamePriority()
{
  return WFLocalizedContentPropertyNameMarker(CFSTR("Priority"));
}

id WFReminderPropertyNameList()
{
  return WFLocalizedContentPropertyNameMarker(CFSTR("List"));
}

id WFReminderPropertyNameTags()
{
  return WFLocalizedContentPropertyNameMarker(CFSTR("Tags"));
}

id WFReminderPropertyNameIsCompleted()
{
  return WFLocalizedContentPropertyNameMarker(CFSTR("Is Completed"));
}

uint64_t cdf_check_summary_info(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4, _QWORD *a5, _QWORD *a6, uint64_t *a7, unint64_t *a8, uint64_t a9, _QWORD *a10)
{
  unsigned __int16 *v18;
  int v19;
  unsigned __int16 v20;
  int v21;
  uint64_t v22;
  unsigned int *v23;
  uint64_t v24;
  uint64_t v25;
  char *v27;
  char *v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  unint64_t v36;
  uint64_t v37;
  char *v38;
  unint64_t v39;
  uint64_t v40;
  char *v41;
  unint64_t v42;
  unint64_t v43;
  int v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  unsigned int v48;
  _BYTE *v49;
  char *v50;
  char *v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  uint64_t v57;
  const char *v58;
  _DWORD *v59;
  int v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  const char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  int v74;
  uint64_t v75;
  uint64_t v76;
  int *v77;
  int v78;
  int v79;
  unsigned int v80;
  int v81;
  char *v82;
  uint64_t v83;
  char *v84;
  int v85;
  unint64_t v86;
  uint64_t v87;
  char *v88;
  char *v89;
  int v90;
  uint64_t v91;
  char v92;
  int v93;
  uint64_t v94;
  uint64_t v95;
  unsigned int v96;
  char *v97;
  uint64_t v98;
  unsigned int v99;
  uint64_t v100;
  unsigned int v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  unint64_t v109;
  uint64_t v110;
  uint64_t v111;
  char **v112;
  const char *v113;
  uint64_t v114;
  int v115;
  char *v116;
  int v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  unint64_t *v125;
  time_t v126;
  time_t v127;
  unint64_t v128;
  uint64_t v129;
  uint64_t v130;
  __int16 v131;
  char v132;
  uint64_t v133;
  uint64_t v134;
  unint64_t v135;
  char *v136;
  _DWORD *v137;
  unint64_t v138;
  const char *v139;
  char *v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  _DWORD *v144;
  unint64_t v145;
  _QWORD *v146;
  _QWORD *v147;
  _QWORD *v148;
  uint64_t v149;
  void *v150;
  time_t v151[2];
  char __s[8];
  char __str[64];
  uint64_t v154;

  v154 = *MEMORY[0x24BDAC8D0];
  v18 = (unsigned __int16 *)*a8;
  if (cdf_check_stream_offset(a8, a3, *a8, 28) == -1
    || cdf_check_stream_offset(a8, a3, (uint64_t)(v18 + 14), 20) == -1)
  {
    goto LABEL_8;
  }
  v146 = a4;
  v147 = a5;
  v148 = a6;
  v149 = a1;
  v19 = *v18;
  v20 = v18[2];
  v21 = v18[3];
  v22 = *((unsigned int *)v18 + 11);
  *(_QWORD *)__s = 0;
  v150 = 0;
  if (v22 >> 30)
    goto LABEL_6;
  v23 = (unsigned int *)(*a8 + v22);
  if (cdf_check_stream_offset(a8, a3, (uint64_t)v23, 8) == -1)
  {
LABEL_7:
    free(v150);
    *__error() = 79;
LABEL_8:
    v25 = 0xFFFFFFFFLL;
LABEL_9:
    *a10 = "Can't expand summary_info";
    return v25;
  }
  v24 = *v23;
  if (v24 >> 26)
  {
LABEL_6:
    *__error() = 79;
    goto LABEL_7;
  }
  if (cdf_check_stream_offset(a8, a3, (uint64_t)v23, *v23) == -1)
    goto LABEL_7;
  v145 = v23[1];
  if (v145 > 0x2AAAAA)
    goto LABEL_7;
  v27 = (char *)cdf_grow_info(&v150, (unint64_t *)__s, v145);
  if (!v27)
    goto LABEL_7;
  if (v22 + *a8 + 8 >= (unint64_t)v23 + v24)
    goto LABEL_7;
  v140 = (char *)v23 + v24;
  v143 = v22 + *a8 + 8;
  v28 = v27;
  if (cdf_check_stream_offset(a8, a3, (uint64_t)v23 + v24, 0) == -1)
    goto LABEL_7;
  if ((_DWORD)v145)
  {
    v35 = v28;
    v36 = 0;
    while (1)
    {
      v37 = 8 * v36;
      v38 = v35;
      v39 = v36;
      if (cdf_check_stream_offset(a8, a3, v143, 8 * v36 + 8) == -1)
        goto LABEL_7;
      v40 = *(unsigned int *)(v143 + (v37 | 4));
      if (v40 < 8)
        goto LABEL_7;
      v41 = (char *)(v40 + v143 - 8);
      if (v41 >= v140)
        goto LABEL_7;
      v42 = v39;
      v35 = v38;
      *(_DWORD *)&v38[24 * v39] = *(_DWORD *)(v143 + v37);
      v43 = v140 - v41;
      if ((unint64_t)(v140 - v41) < 4)
        goto LABEL_7;
      v44 = *(_DWORD *)v41;
      *(_DWORD *)&v38[24 * v39 + 4] = *(_DWORD *)v41;
      if ((v44 & 0x1000) != 0)
      {
        if (v43 < 8)
          goto LABEL_7;
        v29 = *((unsigned int *)v41 + 1);
        if ((v29 - 100001) < 0xFFFE7960)
          goto LABEL_7;
        v45 = 2;
      }
      else
      {
        v29 = 1;
        v45 = 1;
      }
      if ((v44 & 0xE000) != 0)
        goto LABEL_28;
      v47 = 4 * v45;
      v48 = v44 & 0xFFF;
      if (v48 <= 0x1D)
      {
        switch(v44 & 0xFFF)
        {
          case 0:
          case 1:
            goto LABEL_29;
          case 2:
            if ((unint64_t)(v140 - &v41[v47]) < 2 || (v44 & 0x1000) != 0)
              goto LABEL_28;
            *(_WORD *)&v38[24 * v39 + 8] = *(_WORD *)&v41[4 * v45];
            break;
          case 3:
          case 4:
          case 0xB:
          case 0x13:
            if ((unint64_t)(v140 - &v41[v47]) < 4 || (v44 & 0x1000) != 0)
              goto LABEL_28;
            *(_DWORD *)&v38[24 * v39 + 8] = *(_DWORD *)&v41[4 * v45];
            break;
          case 5:
          case 0x14:
          case 0x15:
            goto LABEL_41;
          default:
            goto LABEL_28;
        }
        goto LABEL_29;
      }
      if (v48 - 30 >= 2)
        break;
      if (v29 >= 2)
      {
        v133 = 4 * v45;
        v134 = v45;
        v49 = v150;
        v136 = v41;
        v138 = v29;
        v135 = v140 - v41;
        v50 = (char *)cdf_grow_info(&v150, (unint64_t *)__s, v29);
        v45 = v134;
        v43 = v135;
        v41 = v136;
        v29 = v138;
        if (!v50)
          goto LABEL_7;
        v42 = v39;
        v35 = &v50[v38 - v49];
        v47 = v133;
      }
      if (v42 < v145)
      {
        v51 = &v35[24 * v42 + 16];
        v52 = 1;
        do
        {
          v53 = v47 + 4;
          if (v47 + 4 > v43)
            goto LABEL_7;
          v54 = *(unsigned int *)&v41[4 * v45];
          if (v53 + v54 > v43)
            goto LABEL_7;
          *((_DWORD *)v51 - 2) = v54;
          *(_QWORD *)v51 = &v41[v53];
          v55 = v52 + 1;
          if (v52 >= v29)
            break;
          v45 += ((v54 & 1) + v54) >> 1;
          v47 = 4 * v45;
          v56 = v42 + v52;
          v51 += 24;
          ++v52;
        }
        while (v56 < v145);
        v42 = v42 + v55 - 1;
      }
      --v42;
LABEL_29:
      v36 = v42 + 1;
      if (v36 >= v145)
        goto LABEL_58;
    }
    if (v48 == 64)
    {
LABEL_41:
      if ((unint64_t)(v140 - &v41[v47]) >= 8 && (v44 & 0x1000) == 0)
      {
        *(_QWORD *)&v38[24 * v39 + 8] = *(_QWORD *)&v41[4 * v45];
        goto LABEL_29;
      }
    }
    else if (v48 == 71 && (v44 & 0x1000) == 0)
    {
      goto LABEL_29;
    }
LABEL_28:
    v46 = &v38[24 * v39];
    *((_QWORD *)v46 + 1) = 0;
    *((_QWORD *)v46 + 2) = 0;
    goto LABEL_29;
  }
LABEL_58:
  v57 = v149;
  if ((*(_WORD *)(v149 + 68) & 0x410) != 0)
    goto LABEL_59;
  if (file_printf(v149, "Composite Document File V2 Document", v29, v30, v31, v32, v33, v34, v132) == -1)
    goto LABEL_8;
  v67 = "Big";
  if (v19 == 65534)
    v67 = "Little";
  if (file_printf(v149, ", %s Endian", v61, v62, v63, v64, v65, v66, (char)v67) == -1
    || (v21 == 1
      ? (v74 = file_printf(v149, ", Os: MacOS, Version %d.%d", v68, v69, v70, v71, v72, v73, SHIBYTE(v20)))
      : v21 != 2
      ? (v74 = file_printf(v149, ", Os %d, Version: %d.%d", v68, v69, v70, v71, v72, v73, v21))
      : (v74 = file_printf(v149, ", Os: Windows, Version %d.%d", v68, v69, v70, v71, v72, v73, v20)),
        v74 == -1))
  {
LABEL_182:
    v25 = 4294967294;
    goto LABEL_9;
  }
  if (a9)
  {
    if (*(_QWORD *)(a9 + 80) != 790660
      || *(_QWORD *)(a9 + 88) != 0x46000000000000C0
      || file_printf(v149, ", %s", v29, v30, v31, v32, v33, v34, (char)"MSI Installer") != -1)
    {
LABEL_59:
      v58 = 0;
      v59 = v150;
      v60 = *(_DWORD *)(v149 + 68);
      if (a9 && (v60 & 0x410) != 0)
      {
        if (*(_QWORD *)(a9 + 80) == 790660 && *(_QWORD *)(a9 + 88) == 0x46000000000000C0)
          v58 = "x-msi";
        else
          v58 = 0;
      }
      goto LABEL_72;
    }
    goto LABEL_182;
  }
  v58 = 0;
  v59 = v150;
  v60 = *(_DWORD *)(v149 + 68);
LABEL_72:
  v151[0] = 0;
  v151[1] = 0;
  if (!(_DWORD)v145)
    goto LABEL_143;
  v75 = 0;
  v137 = v59;
  do
  {
    v76 = 0;
    v144 = &v59[6 * v75];
    v77 = &vn;
    while (1)
    {
      v78 = *v77;
      v77 += 4;
      if (v78 == *v144)
        break;
      if (++v76 == 20)
      {
        snprintf(__str, 0x40uLL, "%#x");
        goto LABEL_79;
      }
    }
    snprintf(__str, 0x40uLL, "%s");
LABEL_79:
    v79 = v59[6 * v75 + 1];
    v80 = -1;
    if (v79 <= 29)
    {
      switch(v79)
      {
        case 1:
          goto LABEL_141;
        case 2:
          if ((*(_WORD *)(v57 + 68) & 0x410) != 0)
            goto LABEL_141;
          v81 = file_printf(v57, ", %s: %hd", v29, v30, v31, v32, v33, v34, (char)__str);
          goto LABEL_121;
        case 3:
          if ((*(_WORD *)(v57 + 68) & 0x410) != 0)
            goto LABEL_141;
          v81 = file_printf(v57, ", %s: %d", v29, v30, v31, v32, v33, v34, (char)__str);
          goto LABEL_121;
        case 4:
          if ((*(_WORD *)(v57 + 68) & 0x410) != 0)
            goto LABEL_141;
          goto LABEL_120;
        case 5:
          if ((*(_WORD *)(v57 + 68) & 0x410) != 0)
            goto LABEL_141;
LABEL_120:
          v81 = file_printf(v57, ", %s: %g", v29, v30, v31, v32, v33, v34, (char)__str);
          goto LABEL_121;
        default:
          if (v79 != 19)
            goto LABEL_149;
          if ((*(_WORD *)(v57 + 68) & 0x410) == 0)
          {
            v81 = file_printf(v57, ", %s: %u", v29, v30, v31, v32, v33, v34, (char)__str);
LABEL_121:
            if (v81 == -1)
              goto LABEL_149;
          }
          goto LABEL_141;
      }
    }
    if ((v79 - 30) < 2)
    {
      v82 = (char *)&v59[6 * v75];
      v85 = *((_DWORD *)v82 + 2);
      v84 = v82 + 8;
      v83 = v85;
      if (v85 < 2)
        goto LABEL_141;
      v139 = v58;
      v141 = v75;
      v86 = 0;
      if (v79 == 31)
        v87 = 2;
      else
        v87 = 1;
      v88 = (char *)*((_QWORD *)v84 + 1);
      v89 = &v88[v83];
      v90 = v83 + 1;
      do
      {
        if (!--v90)
          break;
        v91 = *v88;
        if (!*v88)
          break;
        v92 = *v88;
        if ((char)v91 < 0)
          v93 = __maskrune(v91, 0x40000uLL);
        else
          v93 = *(_DWORD *)(MEMORY[0x24BDAC740] + 4 * v91 + 60) & 0x40000;
        if (v93)
          __s[v86++] = v92;
        v88 += v87;
        if (v88 >= v89)
          break;
      }
      while (v86 < 0x400);
      v94 = 1023;
      if (v86 != 1024)
        v94 = v86;
      __s[v94] = 0;
      v57 = v149;
      if ((*(_WORD *)(v149 + 68) & 0x410) != 0)
      {
        v59 = v137;
        v58 = v139;
        v75 = v141;
        if (!v139)
        {
          if (*v144 == 18)
            v58 = cdf_app_to_mime(__s, (const char **)app2mime);
          else
            v58 = 0;
        }
        goto LABEL_141;
      }
      v59 = v137;
      v58 = v139;
      v75 = v141;
      if (!__s[0])
        goto LABEL_141;
      goto LABEL_140;
    }
    if (v79 != 64)
    {
      if (v79 != 71)
        goto LABEL_149;
      goto LABEL_141;
    }
    v95 = *(_QWORD *)&v59[6 * v75 + 2];
    if (!v95)
      goto LABEL_141;
    if (v95 > 0x38D7EA4C67FFFLL)
    {
      cdf_timestamp_to_timespec(v151, *(_QWORD *)&v59[6 * v75 + 2]);
      if (!ctime_r(v151, __s))
        snprintf(__s, 0x1AuLL, "*Bad* %#16.16llx\n", v151[0]);
      v97 = strchr(__s, 10);
      if (v97)
        *v97 = 0;
      if ((*(_WORD *)(v57 + 68) & 0x410) != 0)
        goto LABEL_141;
      goto LABEL_140;
    }
    v142 = v75;
    if ((int)v95 / 711573504)
    {
      v96 = snprintf(__s, 0x40uLL, "%dd+", (int)v95 / 711573504);
      if (v96 > 0x3F)
        goto LABEL_139;
    }
    else
    {
      v96 = 0;
    }
    v98 = v96;
    if (((int)v95 / 1640261632 % 24) | ((int)v95 / 711573504))
    {
      v99 = snprintf(&__s[v96], 64 - v96, "%.2d:", (int)v95 / 1640261632 % 24) + v96;
      if (v99 > 0x3F)
        goto LABEL_139;
      v98 = (int)v99;
      v100 = v95;
    }
    else
    {
      v100 = v95;
      v99 = v96;
    }
    v101 = snprintf(&__s[v98], 64 - v98, "%.2d:", (int)(v100 / 600000000) % 60) + v99;
    if (v101 <= 0x3F)
      snprintf(&__s[v101], 64 - (int)v101, "%.2d", (int)(v95 / 10000000) % 60);
LABEL_139:
    v75 = v142;
    if ((*(_WORD *)(v57 + 68) & 0x410) != 0)
      goto LABEL_141;
LABEL_140:
    if (file_printf(v57, ", %s: %s", v29, v30, v31, v32, v33, v34, (char)__str) == -1)
      goto LABEL_148;
LABEL_141:
    ++v75;
  }
  while (v75 != v145);
  v60 = *(_DWORD *)(v57 + 68);
LABEL_143:
  if ((v60 & 0x10) != 0)
  {
    if (v58)
    {
      if (file_printf(v57, "application/%s", v29, v30, v31, v32, v33, v34, (char)v58) != -1)
        goto LABEL_146;
LABEL_148:
      v80 = -1;
    }
    else
    {
      v80 = 0;
    }
  }
  else
  {
LABEL_146:
    v80 = 1;
  }
LABEL_149:
  free(v150);
  if (v80 >= 0xFFFFFFFE)
    v25 = 4294967294;
  else
    v25 = v80;
  if ((v25 & 0x80000000) != 0)
    goto LABEL_9;
  if ((_DWORD)v25 != 1)
  {
    v108 = 0;
    v109 = 0;
    while (v109 < a7[1])
    {
      v110 = 0;
      v111 = *a7 + v108;
      do
      {
        __str[v110] = *(_WORD *)(v111 + 2 * v110);
        ++v110;
      }
      while (v110 != 32);
      if ((*(_DWORD *)(v149 + 68) & 0x410) != 0)
        v112 = name2mime;
      else
        v112 = name2desc;
      v113 = cdf_app_to_mime(__str, (const char **)v112);
      ++v109;
      v108 += 136;
      if (v113)
      {
        v114 = v149;
        v115 = *(_DWORD *)(v149 + 68);
        if ((v115 & 0x410) == 0)
        {
          v132 = (char)v113;
          v116 = "%s";
          goto LABEL_172;
        }
LABEL_166:
        if ((v115 & 0x10) == 0)
          goto LABEL_167;
        v132 = (char)v113;
        v116 = "application/%s";
LABEL_172:
        v118 = v114;
LABEL_173:
        if (file_printf(v118, v116, v102, v103, v104, v105, v106, v107, v132) != -1)
          return 1;
        return 0xFFFFFFFFLL;
      }
    }
    v114 = v149;
    v115 = *(_DWORD *)(v149 + 68);
    if ((v115 & 0x410) != 0)
    {
      v113 = "vnd.ms-office";
      goto LABEL_166;
    }
LABEL_167:
    if (cdf_read_user_stream(a2, a3, v146, v147, v148, a7, "Catalog", (uint64_t)a8) != -1)
    {
      v117 = *(_DWORD *)(v149 + 68);
      if ((v117 & 0x410) != 0)
      {
        if ((v117 & 0x10) != 0)
        {
          v116 = "application/CDFV2";
          v118 = v149;
          goto LABEL_173;
        }
        return 1;
      }
      if (file_printf(v149, "Microsoft Thumbs.db [", v102, v103, v104, v105, v106, v107, v132) != -1)
      {
        v151[0] = 0;
        if (cdf_unpack_catalog(a3, (unsigned __int16 **)a8, v151) != -1)
        {
          v125 = (unint64_t *)v151[0];
          v126 = v151[0] + 8;
          if (*(_QWORD *)v151[0] < 2uLL)
          {
LABEL_196:
            free(v125);
            return 1;
          }
          v127 = v151[0] + 552;
          v128 = 1;
          while (1)
          {
            v129 = *(unsigned __int16 *)(v126 + 528 * v128);
            if (*(_WORD *)(v126 + 528 * v128))
            {
              v130 = 0;
              while (1)
              {
                v131 = *(_WORD *)(v127 + 2 * v130);
                if (!v131)
                  break;
                __s[v130++] = v131;
                if (v129 == v130)
                {
                  v130 = v129;
                  break;
                }
              }
            }
            else
            {
              v130 = 0;
            }
            __s[v130] = 0;
            if (file_printf(v149, "%s%s", v119, v120, v121, v122, v123, v124, (char)__s) == -1)
              break;
            ++v128;
            v127 += 528;
            if (v128 >= *v125)
              goto LABEL_196;
          }
          free(v125);
        }
      }
    }
    return 0xFFFFFFFFLL;
  }
  return v25;
}

uint64_t cdf_file_dir_info(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  char **v5;
  int *v6;
  char *v7;
  char **v8;
  int *v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t result;
  int v19;

  v4 = 0;
  v5 = &off_24C4E15C0;
  v6 = &dword_24C4E15E0;
  while (2)
  {
    v7 = sectioninfo[10 * v4 + 2];
    v8 = v5;
    v9 = v6;
    do
    {
      v10 = *v9++;
      if ((int)cdf_find_stream(a2, v7, v10) >= 1)
      {
        v19 = *(_DWORD *)(a1 + 68);
        if ((v19 & 0x410) != 0)
        {
          if ((v19 & 0x10) == 0)
            return 1;
          result = file_printf(a1, "application/%s", v11, v12, v13, v14, v15, v16, (char)sectioninfo[10 * v4 + 1]);
        }
        else
        {
          result = file_printf(a1, "CDFV2 %s", v11, v12, v13, v14, v15, v16, (char)sectioninfo[10 * v4]);
        }
        if ((_DWORD)result == -1)
          return result;
        return 1;
      }
      v17 = *v8++;
      v7 = v17;
    }
    while (v17);
    ++v4;
    v6 += 20;
    v5 += 10;
    if (v4 != 6)
      continue;
    break;
  }
  return 0xFFFFFFFFLL;
}

const char *cdf_app_to_mime(const char *a1, const char **a2)
{
  _xlocale *v4;
  _xlocale *v5;
  locale_t v6;
  _xlocale *v7;
  const char *v8;
  uint64_t v9;
  const char **v10;
  const char *v11;
  const char *v12;

  v4 = newlocale(2, "C", 0);
  if (!v4)
    __assert_rtn("cdf_app_to_mime", "readcdf.c", 119, "c_lc_ctype != NULL");
  v5 = v4;
  v6 = uselocale(v4);
  if (!v6)
    __assert_rtn("cdf_app_to_mime", "readcdf.c", 121, "old_lc_ctype != NULL");
  v7 = v6;
  v8 = *a2;
  if (*a2)
  {
    v9 = 0;
    v10 = a2 + 2;
    while (!strcasestr(a1, v8))
    {
      ++v9;
      v11 = *v10;
      v10 += 2;
      v8 = v11;
      if (!v11)
        goto LABEL_7;
    }
    v12 = a2[2 * v9 + 1];
  }
  else
  {
LABEL_7:
    v12 = 0;
  }
  uselocale(v7);
  freelocale(v5);
  return v12;
}

id WFTypeCheckObject(void *a1, uint64_t a2)
{
  id v3;
  id v4;
  id v5;
  id v7;
  NSObject *v8;
  id v9;
  void *v10;
  void *v11;
  void *v12;
  char v13;
  void *v14;
  int v15;
  const char *v16;
  __int16 v17;
  id v18;
  __int16 v19;
  id v20;
  __int16 v21;
  uint64_t v22;
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  v3 = a1;
  if (!v3 || (objc_opt_isKindOfClass() & 1) != 0)
  {
    v4 = v3;
LABEL_4:
    v5 = v4;
    goto LABEL_5;
  }
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    if (objc_opt_class() == a2 || objc_opt_class() == a2 || objc_opt_class() == a2 || objc_opt_class() == a2)
    {
      objc_msgSend(MEMORY[0x24BDD1770], "propertyListWithData:options:format:error:", v3, 0, 0, 0);
      v7 = (id)objc_claimAutoreleasedReturnValue();
      if (v7 && (objc_opt_isKindOfClass() & 1) == 0)
      {
        getWFGeneralLogObject();
        v8 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v8, OS_LOG_TYPE_FAULT))
        {
          v15 = 136315906;
          v16 = "WFEnforceClass";
          v17 = 2114;
          v18 = v7;
          v19 = 2114;
          v20 = (id)objc_opt_class();
          v21 = 2114;
          v22 = a2;
          v9 = v20;
          _os_log_impl(&dword_20BBAD000, v8, OS_LOG_TYPE_FAULT, "%s Warning: %{public}@ is of type %{public}@, not %{public}@! Falling back to nil.", (uint8_t *)&v15, 0x2Au);

        }
        v5 = 0;
      }
      else
      {
        v5 = v7;
      }

    }
    else
    {
      if (objc_opt_class() == a2)
      {
        objc_msgSend(MEMORY[0x24BDD17C8], "wf_stringWithData:", v3);
        v4 = (id)objc_claimAutoreleasedReturnValue();
        goto LABEL_4;
      }
      if (objc_opt_class() != a2)
        goto LABEL_13;
      v14 = (void *)MEMORY[0x24BDBCF48];
      v7 = (id)objc_msgSend(objc_alloc(MEMORY[0x24BDD17C8]), "initWithData:encoding:", v3, 4);
      objc_msgSend(v14, "URLWithString:", v7);
      v5 = (id)objc_claimAutoreleasedReturnValue();
    }

    goto LABEL_5;
  }
LABEL_13:
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
    goto LABEL_29;
  if (objc_opt_class() != a2)
  {
    if (objc_opt_class() == a2)
    {
      objc_msgSend(v3, "dataUsingEncoding:", 4);
      v4 = (id)objc_claimAutoreleasedReturnValue();
      goto LABEL_4;
    }
    if (objc_opt_class() == a2)
    {
      objc_msgSend(MEMORY[0x24BDBCF48], "URLWithString:", v3);
      v4 = (id)objc_claimAutoreleasedReturnValue();
      goto LABEL_4;
    }
LABEL_29:
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0 && objc_opt_class() == a2)
    {
      objc_msgSend(v3, "description");
      v4 = (id)objc_claimAutoreleasedReturnValue();
    }
    else
    {
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) == 0 || objc_opt_class() != a2)
      {
        v5 = 0;
        goto LABEL_5;
      }
      objc_msgSend(v3, "absoluteString");
      v4 = (id)objc_claimAutoreleasedReturnValue();
    }
    goto LABEL_4;
  }
  v10 = (void *)MEMORY[0x24BDD1518];
  objc_msgSend(MEMORY[0x24BDBCEA0], "currentLocale");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v10, "decimalNumberWithString:locale:", v3, v11);
  v5 = (id)objc_claimAutoreleasedReturnValue();

  if (!v5
    || (objc_msgSend(MEMORY[0x24BDD1518], "notANumber"),
        v12 = (void *)objc_claimAutoreleasedReturnValue(),
        v13 = objc_msgSend(v5, "isEqual:", v12),
        v12,
        (v13 & 1) != 0))
  {

    goto LABEL_29;
  }
LABEL_5:

  return v5;
}

uint64_t dophn_core(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t __fd, off_t a5, uint64_t a6, uint64_t __nbyte, uint64_t a8, int *a9, _WORD *a10)
{
  int v11;
  ssize_t v13;
  uint64_t v15;
  int v17;
  __int128 *v19;
  off_t v21;
  int v22;
  unsigned int v23;
  int64_t v24;
  unint64_t v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;
  off_t v31;
  size_t v32;
  unsigned int v33;
  unsigned int v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  ssize_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  char *v48;
  int *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char v55;
  __int128 *__buf;
  _OWORD v58[2];
  __int128 v59;
  uint64_t v60;
  __int128 v61;
  __int128 v62;
  _BYTE v63[1024];
  uint64_t v64;

  v64 = *MEMORY[0x24BDAC8D0];
  if ((*(_WORD *)(a1 + 68) & 0x410) != 0)
    return 0;
  v11 = a6;
  if (!(_DWORD)a6)
  {
    v48 = ", no program header";
    goto LABEL_50;
  }
  v13 = __nbyte;
  v15 = 56;
  if ((_DWORD)a2 == 1)
    v15 = 32;
  if (v15 != __nbyte)
  {
    v48 = ", corrupted program header size";
LABEL_50:
    if (file_printf(a1, v48, a3, __fd, a5, a6, __nbyte, a8, v55) == -1)
      return 0xFFFFFFFFLL;
    else
      return 0;
  }
  v17 = __fd;
  v61 = 0u;
  v62 = 0u;
  memset(v58, 0, sizeof(v58));
  v19 = v58;
  if ((_DWORD)a2 == 1)
    v19 = &v61;
  __buf = v19;
  v59 = 0uLL;
  v21 = a5;
  v22 = a6;
  v60 = 0;
  while (1)
  {
    if (pread(v17, __buf, v13, v21) < v13)
    {
      v49 = __error();
      file_error(a1, *v49, "error reading", v50, v51, v52, v53, v54, v55);
      return 0xFFFFFFFFLL;
    }
    if (a8 == -1)
      break;
    if ((_DWORD)a2 == 1)
    {
      v23 = bswap32(DWORD1(v61));
      v24 = (_DWORD)a3 ? v23 : DWORD1(v61);
    }
    else
    {
      v24 = *((_QWORD *)&v58[0] + 1);
      v25 = bswap64(*((unint64_t *)&v58[0] + 1));
      if ((_DWORD)a3)
        v24 = v25;
    }
    if (v24 <= a8)
      break;
LABEL_46:
    v13 = __nbyte;
    v21 += __nbyte;
    if (!--v22)
      return 0;
  }
  if ((_DWORD)a2 == 1)
  {
    v26 = v61;
    v27 = bswap32(v61);
    if ((_DWORD)a3)
      v26 = v27;
    if (v26 != 4)
      goto LABEL_46;
    v28 = v62;
    v29 = bswap32(v62);
    if ((_DWORD)a3)
      v28 = v29;
    v30 = bswap32(DWORD1(v61));
    if ((_DWORD)a3)
      v31 = v30;
    else
      v31 = DWORD1(v61);
    if (v28 >= 0x400)
      v32 = 1024;
    else
      v32 = v28;
  }
  else
  {
    v33 = v58[0];
    v34 = bswap32(v58[0]);
    if ((_DWORD)a3)
      v33 = v34;
    if (v33 != 4)
      goto LABEL_46;
    v35 = v59;
    v36 = bswap64(v59);
    if ((_DWORD)a3)
      v35 = v36;
    v37 = bswap64(*((unint64_t *)&v58[0] + 1));
    if ((_DWORD)a3)
      v31 = v37;
    else
      v31 = *((_QWORD *)&v58[0] + 1);
    if (v35 >= 0x400)
      v32 = 1024;
    else
      v32 = v35;
  }
  v38 = pread(v17, v63, v32, v31);
  if (v38 != -1)
  {
    v46 = v38;
    v47 = 0;
    do
    {
      if (v47 >= v46)
        break;
      v47 = donote(a1, (uint64_t)v63, v47, v46, a2, a3, 4uLL, a9, a10, v17, a5, v11, a8);
    }
    while (v47);
    goto LABEL_46;
  }
  file_badread(a1, v39, v40, v41, v42, v43, v44, v45, v55);
  return 0xFFFFFFFFLL;
}

uint64_t dophn_exec(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t __fd, off_t a5, uint64_t a6, uint64_t __nbyte, uint64_t a8, int a9, int *a10, _WORD *a11)
{
  ssize_t v12;
  uint64_t v14;
  uint64_t v15;
  int v16;
  off_t v17;
  int v18;
  __int128 *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int *v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int v31;
  unint64_t v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int v35;
  unsigned int v36;
  off_t v37;
  size_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  ssize_t v42;
  unint64_t v43;
  unsigned int *v44;
  unsigned int v45;
  int64_t v46;
  unint64_t v47;
  unint64_t v48;
  int v49;
  unsigned int v50;
  unint64_t v51;
  unsigned int v52;
  unsigned int v53;
  unsigned int v54;
  unsigned int v55;
  unint64_t v56;
  unint64_t v57;
  unsigned int v58;
  unsigned int v59;
  int v60;
  unint64_t v61;
  uint64_t result;
  char *v63;
  int *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char v76;
  const char *v78;
  __int128 *__buf;
  _OWORD v81[2];
  __int128 v82;
  unint64_t v83;
  __int128 v84;
  __int128 v85;
  uint64_t v86;
  char v87[1024];
  unint64_t v88;
  unint64_t v89;
  _BYTE v90[1024];
  uint64_t v91;

  v91 = *MEMORY[0x24BDAC8D0];
  if (!(_DWORD)a6)
  {
    v63 = ", no program header";
    goto LABEL_108;
  }
  v12 = __nbyte;
  v14 = 56;
  if ((_DWORD)a2 == 1)
    v14 = 32;
  if (v14 != __nbyte)
  {
    v63 = ", corrupted program header size";
LABEL_108:
    if (file_printf(a1, v63, a3, __fd, a5, a6, __nbyte, a8, v76) == -1)
      return 0xFFFFFFFFLL;
    else
      return 0;
  }
  v15 = a8;
  v16 = a6;
  v17 = a5;
  v18 = __fd;
  v20 = v81;
  if ((_DWORD)a2 == 1)
    v20 = &v84;
  __buf = v20;
  if ((_DWORD)a2 == 1)
    v21 = 8;
  else
    v21 = 16;
  v84 = 0uLL;
  v85 = 0uLL;
  v78 = "statically";
  memset(v81, 0, sizeof(v81));
  v82 = 0uLL;
  v83 = 0;
  v87[0] = 0;
  do
  {
    if (pread(v18, __buf, v12, v17) < v12)
    {
LABEL_111:
      v64 = __error();
      file_error(a1, *v64, "error reading", v65, v66, v67, v68, v69, v76);
      return 0xFFFFFFFFLL;
    }
    v28 = (unsigned int *)v81;
    if ((_DWORD)a2 == 1)
      v28 = (unsigned int *)&v84;
    v29 = *v28;
    v30 = bswap32(v29);
    if ((_DWORD)a3)
      v31 = v30;
    else
      v31 = v29;
    if (v31 == 2)
    {
      v78 = "dynamically";
      goto LABEL_28;
    }
    v32 = 4;
    if (v31 == 3)
      goto LABEL_29;
    if (v31 == 4)
    {
      if (a9)
        goto LABEL_99;
      if ((_DWORD)a2 == 1)
      {
        v33 = bswap32(HIDWORD(v85));
        if (!(_DWORD)a3)
          v33 = HIDWORD(v85);
        if (HIDWORD(v85))
          v32 = v33;
        else
          v32 = 4;
      }
      else if (v83)
      {
        v61 = bswap64(v83);
        if ((_DWORD)a3)
          v32 = v61;
        else
          v32 = v83;
      }
      else
      {
        v32 = 4;
      }
      if (v32 < 4 || (v32 & 0x80000000) != 0)
      {
        result = file_printf(a1, ", invalid note alignment %#lx", v22, v23, v24, v25, v26, v27, v32);
        if ((_DWORD)result == -1)
          return result;
LABEL_28:
        v32 = 4;
      }
LABEL_29:
      if ((_DWORD)a2 == 1)
      {
        v34 = v85;
        v35 = bswap32(v85);
        if ((_DWORD)a3)
          v34 = v35;
        v36 = bswap32(DWORD1(v84));
        if ((_DWORD)a3)
          v37 = v36;
        else
          v37 = DWORD1(v84);
        if (v34 >= 0x400)
          v38 = 1024;
        else
          v38 = v34;
      }
      else
      {
        v39 = v82;
        v40 = bswap64(v82);
        if ((_DWORD)a3)
          v39 = v40;
        v41 = bswap64(*((unint64_t *)&v81[0] + 1));
        if ((_DWORD)a3)
          v37 = v41;
        else
          v37 = *((_QWORD *)&v81[0] + 1);
        if (v39 >= 0x400)
          v38 = 1024;
        else
          v38 = v39;
      }
      v42 = pread(v18, v90, v38, v37);
      if (v42 == -1)
        goto LABEL_111;
      v43 = v42;
      v44 = (unsigned int *)v81;
      if ((_DWORD)a2 == 1)
        v44 = (unsigned int *)&v84;
      v29 = *v44;
      v30 = bswap32(v29);
      goto LABEL_59;
    }
    if (v15 != -1)
    {
      if ((_DWORD)a2 == 1)
      {
        v45 = bswap32(DWORD1(v84));
        v46 = (_DWORD)a3 ? v45 : DWORD1(v84);
      }
      else
      {
        v46 = *((_QWORD *)&v81[0] + 1);
        v47 = bswap64(*((unint64_t *)&v81[0] + 1));
        if ((_DWORD)a3)
          v46 = v47;
      }
      if (v46 > v15)
        goto LABEL_99;
    }
    v43 = 0;
    v32 = 4;
LABEL_59:
    if ((_DWORD)a3)
      v29 = v30;
    switch(v29)
    {
      case 4u:
        if ((*(_WORD *)(a1 + 68) & 0x410) != 0)
          return 0;
        v22 = 0;
        do
        {
          if (v22 >= v43)
            break;
          v22 = donote(a1, (uint64_t)v90, v22, v43, a2, a3, v32, a10, a11, v18, 0, 0, 0);
        }
        while (v22);
        break;
      case 3u:
        if ((*(_WORD *)(a1 + 68) & 0x410) == 0)
        {
          if (v43 && v90[0])
          {
            v90[v43 - 1] = 0;
            __memcpy_chk();
          }
          else
          {
            __strlcpy_chk();
          }
        }
        break;
      case 2u:
        v48 = 0;
        v49 = *(unsigned __int16 *)(a1 + 96);
        v50 = v49 & 0xFFFFFFB6;
        *(_WORD *)(a1 + 96) = v49 & 0xFFB6;
        while (1)
        {
          if (v48 >= v43)
          {
LABEL_83:
            v15 = a8;
            goto LABEL_98;
          }
          v51 = v48 + v21;
          if (v48 + v21 <= v43)
          {
            v86 = 0;
            v89 = 0;
            v88 = 0;
            __memcpy_chk();
            if ((_DWORD)a2 == 1)
            {
              v52 = v86;
              v53 = bswap32(v86);
              if ((_DWORD)a3)
                v52 = v53;
              if (v52 != 1879048187)
                goto LABEL_82;
              v54 = HIDWORD(v86);
              v55 = bswap32(HIDWORD(v86));
              if ((_DWORD)a3)
                v54 = v55;
            }
            else
            {
              v56 = v88;
              v57 = bswap64(v88);
              if ((_DWORD)a3)
                v56 = v57;
              if (v56 != 1879048187)
                goto LABEL_82;
              v54 = v89;
              v58 = bswap64(v89);
              if ((_DWORD)a3)
                v54 = v58;
            }
            v59 = v50 & 0xFFFFFFB6;
            if ((v54 & 0x8000000) != 0)
              v60 = 73;
            else
              v60 = 0;
            v50 = v60 | v59;
            *(_WORD *)(a1 + 96) = v60 | v59;
          }
LABEL_82:
          v48 = v51;
          if (!v51)
            goto LABEL_83;
        }
      default:
        break;
    }
LABEL_98:
    v12 = __nbyte;
LABEL_99:
    v17 += v12;
    --v16;
  }
  while (v16);
  if ((*(_WORD *)(a1 + 68) & 0x410) != 0)
    return 0;
  result = file_printf(a1, ", %s linked", v22, v23, v24, v25, v26, v27, (char)v78);
  if ((_DWORD)result != -1)
  {
    if (!v87[0])
      return 0;
    file_printable(&v88, 1024, (uint64_t)v87, 1024);
    result = file_printf(a1, ", interpreter %s", v70, v71, v72, v73, v74, v75, (char)&v88);
    if ((_DWORD)result != -1)
      return 0;
  }
  return result;
}

uint64_t doshn(uint64_t a1, int a2, uint64_t a3, uint64_t __fd, uint64_t a5, uint64_t a6, uint64_t __nbyte, uint64_t a8, unsigned int a9, unsigned int a10, int *a11, _WORD *a12)
{
  uint64_t result;
  int v13;
  uint64_t v17;
  off_t v19;
  int v20;
  __int128 *v22;
  char *v23;
  int v24;
  unsigned int v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  int32x2_t v29;
  int8x8_t v30;
  int64x2_t v31;
  int v32;
  int64_t v33;
  unsigned int v34;
  ssize_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  BOOL v44;
  int v45;
  unsigned int v46;
  unsigned int v47;
  int v48;
  unsigned int v49;
  uint64_t v50;
  unsigned int v51;
  unint64_t v52;
  unsigned int v53;
  size_t v54;
  unint64_t v55;
  void *v56;
  void *v57;
  unsigned int v58;
  size_t v59;
  unsigned int v60;
  off_t v61;
  ssize_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unsigned int v70;
  ssize_t v71;
  unsigned int v72;
  off_t v73;
  unint64_t v74;
  size_t v75;
  void *v76;
  unint64_t v77;
  size_t v78;
  unint64_t v79;
  off_t v80;
  unint64_t v81;
  uint64_t v82;
  unsigned int v83;
  int64_t v84;
  unint64_t v85;
  unint64_t v86;
  int64_t v87;
  unint64_t v88;
  uint64_t v89;
  uint64_t v90;
  int64_t v91;
  unsigned int v92;
  int64_t v93;
  unint64_t v94;
  ssize_t v95;
  uint64_t v96;
  unsigned int v97;
  unint64_t v98;
  unint64_t v99;
  unsigned int v100;
  unint64_t v101;
  unsigned int v102;
  unint64_t v103;
  char v104;
  unint64_t v105;
  unint64_t v106;
  unsigned int v107;
  unint64_t v108;
  const char *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t *v117;
  int *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  char *v132;
  char v133;
  char v134;
  int8x16_t v135;
  __int128 *v136;
  uint64_t v137;
  uint64_t v138;
  unint64_t v139;
  uint64_t v140;
  size_t v141;
  int v142;
  __int128 v143;
  __int128 v144;
  __int128 v145;
  __int128 v146;
  __int128 v147;
  __int128 v148;
  uint64_t v149;
  char v150[16];
  uint64_t __buf;
  unsigned int v152;
  uint64_t v153;

  v153 = *MEMORY[0x24BDAC8D0];
  if ((*(_WORD *)(a1 + 68) & 0x410) != 0)
    return 0;
  v13 = a6;
  if (!(_DWORD)a6)
  {
    v23 = ", no section header";
    goto LABEL_14;
  }
  v17 = 64;
  if (a2 == 1)
    v17 = 40;
  if (v17 != __nbyte)
  {
    v23 = ", corrupted section header size";
    goto LABEL_14;
  }
  v19 = a5;
  v20 = __fd;
  v149 = 0;
  v147 = 0u;
  v148 = 0u;
  v143 = 0u;
  v144 = 0u;
  v145 = 0u;
  v146 = 0u;
  if (a2 == 1)
    v22 = &v147;
  else
    v22 = &v143;
  if (pread(__fd, v22, __nbyte, a5 + a10 * __nbyte) < __nbyte)
  {
    v23 = ", missing section headers";
LABEL_14:
    v24 = file_printf(a1, v23, a3, __fd, a5, a6, __nbyte, a8, v133);
    goto LABEL_15;
  }
  if (a2 == 1)
  {
    v25 = bswap32(v148);
    if ((_DWORD)a3)
      v26 = v25;
    else
      v26 = v148;
  }
  else
  {
    v26 = *((_QWORD *)&v144 + 1);
    v27 = bswap64(*((unint64_t *)&v144 + 1));
    if ((_DWORD)a3)
      v26 = v27;
  }
  v140 = v26;
  if (a8 != -1 && v26 > a8)
  {
    v24 = file_printf(a1, ", too large section header offset %jd", a3, __fd, a5, a6, __nbyte, a8, v26);
    goto LABEL_15;
  }
  v137 = 0;
  v138 = 0;
  v139 = 0;
  v142 = 0;
  v136 = v22;
  v28 = 16;
  if (a2 == 1)
    v28 = 8;
  v141 = v28;
  v29 = vdup_n_s32(a3 == 0);
  v30 = (int8x8_t)vcltz_s32(vshl_n_s32(v29, 0x1FuLL));
  v31.i64[0] = v29.u32[0];
  v31.i64[1] = v29.u32[1];
  v135 = (int8x16_t)vcltzq_s64(vshlq_n_s64(v31, 0x3FuLL));
  v32 = 1;
  do
  {
    v33 = (int64_t)&v143;
    if (a2 == 1)
      v33 = (int64_t)&v147;
    LODWORD(v33) = *(_DWORD *)v33;
    v34 = bswap32(v33);
    if ((_DWORD)a3)
      v33 = v34;
    else
      v33 = v33;
    v35 = pread(v20, &__buf, 0x31uLL, v140 + v33);
    if (v35 == -1)
      goto LABEL_178;
    *((_BYTE *)&__buf + v35) = 0;
    v43 = __buf ^ 0x695F67756265642ELL | v152 ^ 0x6F666ELL;
    v44 = v43 == 0;
    if (!v43)
      v32 = 0;
    v45 = v142;
    if (v44)
      v45 = 1;
    v142 = v45;
    if (pread(v20, v22, __nbyte, v19) < __nbyte)
    {
LABEL_178:
      file_badread(a1, v36, v37, v38, v39, v40, v41, v42, v133);
      return 0xFFFFFFFFLL;
    }
    if (a2 == 1)
    {
      v46 = DWORD1(v147);
      v47 = bswap32(DWORD1(v147));
      if ((_DWORD)a3)
        v46 = v47;
      if (v46 == 2)
        v48 = 0;
      else
        v48 = v32;
      if (a8 == -1 || v46 == 2)
        goto LABEL_65;
      v49 = bswap32(v148);
      if ((_DWORD)a3)
        v50 = v49;
      else
        v50 = v148;
    }
    else
    {
      v46 = DWORD1(v143);
      v51 = bswap32(DWORD1(v143));
      if ((_DWORD)a3)
        v46 = v51;
      if (v46 == 2)
        v48 = 0;
      else
        v48 = v32;
      if (a8 == -1 || v46 == 2)
      {
LABEL_65:
        v32 = v48;
        goto LABEL_66;
      }
      v50 = *((_QWORD *)&v144 + 1);
      v52 = bswap64(*((unint64_t *)&v144 + 1));
      if ((_DWORD)a3)
        v50 = v52;
    }
    if (v50 > a8)
      goto LABEL_124;
LABEL_66:
    if (v46 != 1879048181)
    {
      if (v46 != 7)
        goto LABEL_124;
      if (a2 == 1)
      {
        v53 = bswap32(DWORD1(v148));
        if ((_DWORD)a3)
          v54 = v53;
        else
          v54 = DWORD1(v148);
        LODWORD(v55) = bswap32(v148);
        if ((_DWORD)a3)
          v55 = v55;
        else
          v55 = v148;
        if (v55 + v54 <= a8)
        {
          v56 = malloc_type_malloc(v54, 0x7F7EC93EuLL);
          if (v56)
          {
            v57 = v56;
            v58 = bswap32(DWORD1(v148));
            if ((_DWORD)a3)
              v59 = v58;
            else
              v59 = DWORD1(v148);
            v60 = bswap32(v148);
            if ((_DWORD)a3)
              v61 = v60;
            else
              v61 = v148;
            v62 = pread(v20, v56, v59, v61);
            v70 = bswap32(DWORD1(v148));
            if ((_DWORD)a3)
              v71 = v70;
            else
              v71 = DWORD1(v148);
LABEL_108:
            if (v62 >= v71)
            {
              v82 = 0;
              while (1)
              {
                if (a2 == 1)
                {
                  v83 = bswap32(DWORD1(v148));
                  if ((_DWORD)a3)
                    v84 = v83;
                  else
                    v84 = DWORD1(v148);
                  if (v82 >= v84)
                    goto LABEL_122;
                  v85 = donote(a1, (uint64_t)v57, v82, v84, 1, a3, 4uLL, a11, a12, v20, 0, 0, 0);
                }
                else
                {
                  v86 = bswap64(v145);
                  if ((_DWORD)a3)
                    v87 = v86;
                  else
                    v87 = v145;
                  if (v82 >= v87)
                  {
LABEL_122:
                    free(v57);
                    goto LABEL_123;
                  }
                  v85 = donote(a1, (uint64_t)v57, v82, v87, 2, a3, 4uLL, a11, a12, v20, 0, 0, 0);
                }
                v82 = v85;
                if (!v85)
                  goto LABEL_122;
              }
            }
            file_badread(a1, v63, v64, v65, v66, v67, v68, v69, v133);
            free(v57);
            return 0xFFFFFFFFLL;
          }
LABEL_191:
          v118 = __error();
          file_error(a1, *v118, "Cannot allocate memory for note", v119, v120, v121, v122, v123, v133);
          return 0xFFFFFFFFLL;
        }
      }
      else
      {
        v74 = bswap64(v145);
        if ((_DWORD)a3)
          v75 = v74;
        else
          v75 = v145;
        v55 = bswap64(*((unint64_t *)&v144 + 1));
        if (!(_DWORD)a3)
          v55 = *((_QWORD *)&v144 + 1);
        if (v55 + v75 <= a8)
        {
          v76 = malloc_type_malloc(v75, 0x7F7EC93EuLL);
          if (v76)
          {
            v57 = v76;
            v77 = bswap64(v145);
            if ((_DWORD)a3)
              v78 = v77;
            else
              v78 = v145;
            v79 = bswap64(*((unint64_t *)&v144 + 1));
            if ((_DWORD)a3)
              v80 = v79;
            else
              v80 = *((_QWORD *)&v144 + 1);
            v62 = pread(v20, v76, v78, v80);
            v71 = v145;
            v81 = bswap64(v145);
            if ((_DWORD)a3)
              v71 = v81;
            goto LABEL_108;
          }
          goto LABEL_191;
        }
      }
      v24 = file_printf(a1, ", note offset/size %#jx+%#jx exceeds file size %#jx", v37, v38, v39, v40, v41, v42, v55);
LABEL_15:
      if (v24 == -1)
        return 0xFFFFFFFFLL;
      else
        return 0;
    }
    if (a9 <= 0x3E && ((1 << a9) & 0x400408000000000CLL) != 0 && v139 <= 5)
    {
      if (a2 == 1)
      {
        v72 = bswap32(v148);
        if ((_DWORD)a3)
          v73 = v72;
        else
          v73 = v148;
      }
      else
      {
        v88 = bswap64(*((unint64_t *)&v144 + 1));
        if ((_DWORD)a3)
          v73 = v88;
        else
          v73 = *((_QWORD *)&v144 + 1);
      }
      if (lseek(v20, v73, 0) != -1)
      {
        v91 = 0;
        while (1)
        {
          if (a2 == 1)
          {
            v92 = bswap32(DWORD1(v148));
            if ((_DWORD)a3)
              v93 = v92;
            else
              v93 = DWORD1(v148);
          }
          else
          {
            v93 = v145;
            v94 = bswap64(v145);
            if ((_DWORD)a3)
              v93 = v94;
          }
          v37 = v141;
          v91 += v141;
          if (v91 > v93)
            goto LABEL_123;
          v95 = read(v20, v150, v141);
          v37 = v141;
          if (v95 != v141)
            goto LABEL_178;
          if (v150[0] == 65)
          {
LABEL_123:
            v22 = v136;
            goto LABEL_124;
          }
          __memcpy_chk();
          if (a2 == 1)
          {
            v97 = bswap32(0);
            if ((_DWORD)a3)
              v98 = v97;
            else
              v98 = 0;
            if (!v98)
              continue;
          }
          else
          {
            v98 = 0;
            v99 = bswap64(0);
            if ((_DWORD)a3)
              v98 = v99;
            if (!v98)
              continue;
          }
          if (v98 == 2)
          {
            if (a2 == 1)
            {
              v102 = bswap32(0);
              if ((_DWORD)a3)
                v103 = v102;
              else
                v103 = 0;
            }
            else
            {
              v103 = 0;
              v106 = bswap64(0);
              if ((_DWORD)a3)
                v103 = v106;
            }
            v138 |= v103;
          }
          else if (v98 == 1)
          {
            if (a2 == 1)
            {
              v100 = bswap32(0);
              if ((_DWORD)a3)
                v101 = v100;
              else
                v101 = 0;
            }
            else
            {
              v101 = 0;
              v105 = bswap64(0);
              if ((_DWORD)a3)
                v101 = v105;
            }
            v137 |= v101;
          }
          else
          {
            if (a2 == 1)
              v104 = vbsl_s8(v30, 0, vrev32_s8(0)).u8[0];
            else
              v104 = vbslq_s8(v135, (int8x16_t)0, vrev64q_s8((int8x16_t)0)).u8[0];
            if (file_printf(a1, ", with unknown capability %#llx = %#llx", v96, v38, v39, v40, v41, v42, v104) == -1)return 0xFFFFFFFFLL;
            if (v139 >= 3)
            {
              if (a2 == 1)
              {
                v107 = bswap32(DWORD1(v148));
                if ((_DWORD)a3)
                  v91 = v107;
                else
                  v91 = DWORD1(v148);
              }
              else
              {
                v108 = bswap64(v145);
                if ((_DWORD)a3)
                  v91 = v108;
                else
                  v91 = v145;
              }
            }
            ++v139;
          }
        }
      }
      file_badseek(a1, v89, v90, v38, v39, v40, v41, v42, v133);
      return 0xFFFFFFFFLL;
    }
LABEL_124:
    v19 += __nbyte;
    --v13;
  }
  while (v13);
  if (v142)
  {
    result = file_printf(a1, ", with debug_info", v37, v38, v39, v40, v41, v42, v133);
    if ((_DWORD)result == -1)
      return result;
  }
  v109 = "";
  if (!v32)
    v109 = "not ";
  result = file_printf(a1, ", %sstripped", v37, v38, v39, v40, v41, v42, (char)v109);
  if ((_DWORD)result == -1)
    return result;
  v116 = v137;
  if (!v137)
    goto LABEL_206;
  if (a9 > 0x3E)
    goto LABEL_203;
  if (((1 << a9) & 0x80000040004) == 0)
  {
    if (((1 << a9) & 0x4004000000000008) != 0)
    {
      v117 = &cap_desc_386;
      goto LABEL_194;
    }
LABEL_203:
    result = file_printf(a1, ", uses", v110, v111, v112, v113, v114, v115, v134);
    if ((_DWORD)result != -1)
    {
      result = file_printf(a1, " hardware capability %#llx", v126, v127, v128, v129, v130, v131, v137);
LABEL_205:
      if ((_DWORD)result != -1)
        goto LABEL_206;
    }
    return result;
  }
  v117 = &cap_desc_sparc;
LABEL_194:
  result = file_printf(a1, ", uses", v110, v111, v112, v113, v114, v115, v134);
  if ((_DWORD)result != -1)
  {
    v124 = v117[1];
    if (!v124)
      goto LABEL_201;
    do
    {
      v125 = *v117;
      if ((*v117 & v116) != 0)
      {
        result = file_printf(a1, " %s", v110, v111, v112, v113, v114, v115, v124);
        if ((_DWORD)result == -1)
          return result;
        v116 &= ~v125;
      }
      v124 = v117[3];
      v117 += 2;
    }
    while (v124);
    if (v116)
    {
LABEL_201:
      result = file_printf(a1, " unknown hardware capability %#llx", v110, v111, v112, v113, v114, v115, v116);
      goto LABEL_205;
    }
LABEL_206:
    if (!v138)
      return 0;
    if ((v138 & 2) == 0
      || ((v138 & 1) != 0 ? (v132 = ", uses frame pointer") : (v132 = ", not known to use frame pointer"),
          result = file_printf(a1, v132, v110, v111, v112, v113, v114, v115, v134),
          (_DWORD)result != -1))
    {
      if ((v138 & 0xFFFFFFFFFFFFFFFCLL) == 0)
        return 0;
      result = file_printf(a1, ", with unknown software capability %#llx", v110, v111, v112, v113, v114, v115, v138 & 0xFC);
      if ((_DWORD)result != -1)
        return 0;
    }
  }
  return result;
}

unint64_t donote(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, unint64_t a7, int *a8, _WORD *a9, int a10, off_t a11, int a12, int64_t a13)
{
  unint64_t v14;
  unint64_t v15;
  int v16;
  int v17;
  uint64_t *v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  unint64_t v27;
  uint64_t v28;
  int v29;
  unint64_t v30;
  int v32;
  unsigned int *v33;
  unsigned int v34;
  unsigned int v35;
  int v36;
  unsigned int *v37;
  unsigned int v38;
  unsigned int v39;
  int v40;
  unsigned int *v41;
  unsigned int v42;
  unsigned int v43;
  int v44;
  unsigned int *v45;
  unsigned int v46;
  unsigned int v47;
  int v48;
  uint64_t v49;
  unsigned int *v50;
  unsigned int v51;
  unsigned int v52;
  int v53;
  uint64_t v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  int v62;
  unsigned int *v63;
  unsigned int v64;
  unsigned int v65;
  const char *v66;
  int v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  int v77;
  uint64_t v78;
  int v79;
  char __dst[256];
  uint64_t v81;

  v81 = *MEMORY[0x24BDAC8D0];
  if (!*a9)
    return 0;
  --*a9;
  v14 = a3 + 12;
  if (a3 + 12 > a4)
    return a3 + 12;
  v16 = a6;
  v17 = a5;
  v79 = 0;
  v78 = 0;
  v76 = 0;
  v77 = 0;
  v19 = &v76;
  if ((_DWORD)a5 == 1)
    v19 = &v78;
  v20 = *(_QWORD *)(a2 + a3);
  *v19 = v20;
  *((_DWORD *)v19 + 2) = *(_DWORD *)(a2 + a3 + 8);
  v21 = bswap32(v20);
  if ((_DWORD)a6)
    v22 = v21;
  else
    v22 = v20;
  v23 = bswap32(HIDWORD(v20));
  if ((_DWORD)a6)
    v24 = v23;
  else
    v24 = HIDWORD(v20);
  if (!(v22 | v24))
  {
    if (v14 <= a4)
      return a4;
    else
      return a3 + 12;
  }
  if ((v22 & 0x80000000) != 0)
  {
    v29 = file_printf(a1, ", bad note name size %#lx", a3, a4, a5, a6, a7, (uint64_t)a8, v22);
    goto LABEL_23;
  }
  if ((v24 & 0x80000000) != 0)
  {
    v29 = file_printf(a1, ", bad note description size %#lx", a3, a4, a5, a6, a7, (uint64_t)a8, v24);
LABEL_23:
    if (v29 == -1)
      return -1;
    else
      return 0;
  }
  v27 = v14 + v22;
  v28 = (a7 - 1 + v27) / a7 * a7;
  if (v27 > a4)
    return (a7 - 1 + v27) / a7 * a7;
  v30 = v28 + v24;
  v15 = (a7 - 1 + v30) / a7 * a7;
  if (v30 <= a4)
  {
    v32 = *a8;
    v75 = v28;
    if ((*a8 & 8) == 0)
    {
      v33 = (unsigned int *)&v77;
      if ((_DWORD)a5 == 1)
        v33 = (unsigned int *)&v79;
      v34 = *v33;
      v35 = bswap32(v34);
      if ((_DWORD)a6)
        v36 = v35;
      else
        v36 = v34;
      if (do_os_note(a1, a2, v36, a6, v22, v24, v14, v28, a8))
        return v15;
      v32 = *a8;
      v28 = v75;
    }
    if ((v32 & 0x10) == 0)
    {
      v37 = (unsigned int *)&v77;
      if (v17 == 1)
        v37 = (unsigned int *)&v79;
      v38 = *v37;
      v39 = bswap32(v38);
      if (v16)
        v40 = v39;
      else
        v40 = v38;
      if (do_bid_note(a1, a2, v40, v22, v24, v14, v28, a8))
        return v15;
      v32 = *a8;
      v28 = v75;
    }
    if ((v32 & 0x40) == 0)
    {
      v41 = (unsigned int *)&v77;
      if (v17 == 1)
        v41 = (unsigned int *)&v79;
      v42 = *v41;
      v43 = bswap32(v42);
      if (v16)
        v44 = v43;
      else
        v44 = v42;
      if (do_pax_note(a1, a2, v44, v16, v22, v24, v14, v28, a8))
        return v15;
      v32 = *a8;
      v28 = v75;
    }
    if ((v32 & 4) == 0)
    {
      v45 = (unsigned int *)&v77;
      if (v17 == 1)
        v45 = (unsigned int *)&v79;
      v46 = *v45;
      v47 = bswap32(v46);
      if (v16)
        v48 = v47;
      else
        v48 = v46;
      v74 = a4;
      v49 = v28;
      if (do_core_note(a1, a2, v48, v16, v22, v24, v14, v28, (uint64_t)a8, v74, v17))
        return v15;
      v32 = *a8;
      v28 = v49;
    }
    if ((v32 & 0x1000) != 0)
    {
      v54 = v28;
      if (v22 != 7)
        return v15;
    }
    else
    {
      v50 = (unsigned int *)&v77;
      if (v17 == 1)
        v50 = (unsigned int *)&v79;
      v51 = *v50;
      v52 = bswap32(v51);
      if (v16)
        v53 = v52;
      else
        v53 = v51;
      v54 = v28;
      v55 = do_auxv_note(a1, a2, v53, v16, v24, v28, a8, v17, a10, a11, a12, a13);
      if (v22 != 7 || v55)
        return v15;
    }
    if (!strcmp((const char *)(a2 + v14), "NetBSD"))
    {
      if (v24 >= 0x64)
        v62 = 100;
      else
        v62 = v24;
      v63 = (unsigned int *)&v77;
      if (v17 == 1)
        v63 = (unsigned int *)&v79;
      v64 = *v63;
      v65 = bswap32(v64);
      if (!v16)
        v65 = v64;
      v66 = "compiled for";
      v67 = 128;
      switch(v65)
      {
        case 1u:
          return v15;
        case 2u:
          v66 = "emulation:";
          v67 = 512;
          goto LABEL_86;
        case 5u:
          goto LABEL_86;
        case 6u:
          v66 = "compiler model";
          v67 = 256;
LABEL_86:
          if ((*a8 & v67) == 0)
          {
            *a8 |= v67;
            strlcpy(__dst, (const char *)(a2 + v54), (v62 + 1));
            file_printf(a1, ", %s: %s", v68, v69, v70, v71, v72, v73, (char)v66);
          }
          break;
        default:
          if ((*a8 & 0x400) == 0)
          {
            *a8 |= 0x400u;
            file_printf(a1, ", note=%u", v56, v57, v58, v59, v60, v61, v65);
          }
          break;
      }
    }
    return v15;
  }
  if (v15 <= a4)
    return a4;
  else
    return (a7 - 1 + v30) / a7 * a7;
}

uint64_t do_os_note(uint64_t a1, uint64_t a2, int a3, int a4, int a5, int a6, uint64_t a7, uint64_t a8, _DWORD *a9)
{
  uint64_t v9;
  const char *v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int v32;
  char *v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unsigned int v48;
  unsigned int v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unsigned int v62;
  BOOL v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  int v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  int v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unsigned int v91;
  unsigned int v92;
  unsigned int v93;
  unsigned int v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  char *v101;
  unint64_t v102;
  char v103;
  unint64_t v104;
  unsigned int v105;
  int v106;
  unint64_t v107;
  int v108;
  char v110;
  char v111;
  char v112;
  char v113;

  v9 = 0;
  v16 = (const char *)(a2 + a7);
  switch(a5)
  {
    case 4:
      v17 = strcmp(v16, "GNU");
      v9 = 0;
      if (a6 == 16 && a3 == 1 && !v17)
      {
        v25 = *(_DWORD *)(a2 + a8);
        v24 = *(_DWORD *)(a2 + a8 + 4);
        *a9 |= 8u;
        if (file_printf(a1, ", for GNU/", v18, v19, v20, v21, v22, v23, v110) != -1)
        {
          v32 = bswap32(v25);
          if (!a4)
            v32 = v25;
          switch(v32)
          {
            case 0u:
              v33 = "Linux";
              break;
            case 1u:
              v33 = "Hurd";
              break;
            case 2u:
              v33 = "Solaris";
              break;
            case 3u:
              v33 = "kFreeBSD";
              break;
            case 4u:
              v33 = "kNetBSD";
              break;
            default:
              v33 = "<unknown>";
              break;
          }
          if (file_printf(a1, v33, v26, v27, v28, v29, v30, v31, v111) != -1)
          {
            v103 = bswap32(v24);
            if (!a4)
              v103 = v24;
            v110 = v103;
            v77 = " %d.%d.%d";
            goto LABEL_71;
          }
        }
        return 0xFFFFFFFFLL;
      }
      return v9;
    case 5:
      v34 = strcmp(v16, "SuSE");
      v9 = 0;
      if (a6 == 2 && a3 == 1 && !v34)
      {
        *a9 |= 8u;
        v41 = file_printf(a1, ", for SuSE %d.%d", v35, v36, v37, v38, v39, v40, *(_BYTE *)(a2 + a8));
        goto LABEL_72;
      }
      return v9;
    case 7:
      v9 = 0;
      if (!strcmp(v16, "NetBSD") && a3 == 1 && a6 == 4)
      {
        *a9 |= 8u;
        v48 = bswap32(*(_DWORD *)(a2 + a8));
        if (a4)
          v49 = v48;
        else
          v49 = *(_DWORD *)(a2 + a8);
        if (file_printf(a1, ", for NetBSD", v42, v43, v44, v45, v46, v47, v110) == -1)
          return 0xFFFFFFFFLL;
        if (v49 <= 0x5F5E100)
          return 1;
        if (file_printf(a1, " %u.%u", v50, v51, v52, v53, v54, v55, v49 / 0x5F5E100) == -1)
          return 0xFFFFFFFFLL;
        v62 = v49 / 0x2710 - 100 * ((42949673 * (unint64_t)(v49 / 0x2710)) >> 32);
        if (v62)
          v63 = 1;
        else
          v63 = v49 / 0x64 == 100 * ((42949673 * (unint64_t)(v49 / 0x64)) >> 32);
        if (!v63)
        {
          v106 = file_printf(a1, ".%u", v56, v57, v58, v59, v60, v61, (v49 / 0x64)- 100 * ((42949673 * (unint64_t)(v49 / 0x64)) >> 32));
          goto LABEL_87;
        }
        if (v62)
        {
          if (v62 >= 0x1B)
          {
            do
            {
              if (file_printf(a1, "Z", v56, v57, v58, v59, v60, v61, v112) == -1)
                return 0xFFFFFFFFLL;
              v62 -= 26;
            }
            while (v62 > 0x1A);
          }
          v106 = file_printf(a1, "%c", v56, v57, v58, v59, v60, v61, v62 + 64);
          goto LABEL_87;
        }
        return 1;
      }
      return v9;
    case 8:
      if (!strcmp(v16, "FreeBSD") && a3 == 1 && a6 == 4)
      {
        *a9 |= 8u;
        v93 = bswap32(*(_DWORD *)(a2 + a8));
        if (a4)
          v94 = v93;
        else
          v94 = *(_DWORD *)(a2 + a8);
        if (file_printf(a1, ", for FreeBSD", v64, v65, v66, v67, v68, v69, v110) == -1)
          return 0xFFFFFFFFLL;
        if (v94 == 460002)
        {
          v101 = " 4.6.2";
LABEL_86:
          v106 = file_printf(a1, v101, v95, v96, v97, v98, v99, v100, v113);
LABEL_87:
          if (v106 != -1)
            return 1;
          return 0xFFFFFFFFLL;
        }
        if (v94 < 0x70544)
        {
          if (file_printf(a1, " %d.%d", v95, v96, v97, v98, v99, v100, v94 / 0x186A0) != -1
            && (!((unsigned __int16)(v94 / 0x3E8) % 0xAu)
             || file_printf(a1, ".%d", v95, v96, v97, v98, v99, v100, (unsigned __int16)(v94 / 0x3E8) % 0xAu) != -1))
          {
            HIDWORD(v102) = 652835029 * v94;
            LODWORD(v102) = 652835029 * v94;
            if ((v102 >> 3) <= 0x418937 && v94 % 0x186A0)
              return 1;
            goto LABEL_85;
          }
          return 0xFFFFFFFFLL;
        }
        if (v94 > 0x7A11F)
        {
          if (file_printf(a1, " %d.%d", v95, v96, v97, v98, v99, v100, v94 / 0x186A0) == -1)
            return 0xFFFFFFFFLL;
          HIDWORD(v107) = -858993459 * (v94 / 0x64);
          LODWORD(v107) = HIDWORD(v107);
          if ((v107 >> 1) <= 0x19999999 && v94 % 0x186A0 > 0x63)
          {
            v105 = v94 / 0xA;
            goto LABEL_83;
          }
        }
        else
        {
          if (file_printf(a1, " %d.%d", v95, v96, v97, v98, v99, v100, 4) == -1)
            return 0xFFFFFFFFLL;
          HIDWORD(v104) = -858993459 * (unsigned __int16)(v94 / 0x64);
          LODWORD(v104) = HIDWORD(v104);
          if ((v104 >> 1) < 0x1999999A)
          {
            v105 = (unsigned __int16)(v94 / 0xA);
LABEL_83:
            v108 = v105 - 10 * ((429496730 * (unint64_t)v105) >> 32);
            if (!v108)
              return 1;
            v106 = file_printf(a1, ".%d", v95, v96, v97, v98, v99, v100, v108);
            goto LABEL_87;
          }
        }
LABEL_85:
        v113 = v94;
        v101 = " (%d)";
        goto LABEL_86;
      }
      v70 = strcmp(v16, "OpenBSD");
      v9 = 0;
      if (a6 == 4 && a3 == 1 && !v70)
      {
        *a9 |= 8u;
        v77 = ", for OpenBSD";
LABEL_71:
        v41 = file_printf(a1, v77, v71, v72, v73, v74, v75, v76, v110);
LABEL_72:
        if (v41 == -1)
          return 0xFFFFFFFFLL;
        else
          return 1;
      }
      return v9;
    case 10:
      v78 = strcmp(v16, "DragonFly");
      v9 = 0;
      if (a6 == 4 && a3 == 1 && !v78)
      {
        *a9 |= 8u;
        v9 = 0xFFFFFFFFLL;
        if (file_printf(a1, ", for DragonFly", v79, v80, v81, v82, v83, v84, v110) != -1)
        {
          v91 = *(_DWORD *)(a2 + a8);
          v92 = bswap32(v91);
          if (a4)
            v91 = v92;
          if (file_printf(a1, " %d.%d.%d", v85, v86, v87, v88, v89, v90, v91 / 0x186A0) == -1)
            return 0xFFFFFFFFLL;
          else
            return 1;
        }
      }
      return v9;
    default:
      return v9;
  }
}

uint64_t do_bid_note(uint64_t a1, uint64_t a2, int a3, int a4, unsigned int a5, uint64_t a6, uint64_t a7, _DWORD *a8)
{
  const char *v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  const char *v22;
  uint64_t result;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  char __dst[256];
  uint64_t v41;

  v41 = *MEMORY[0x24BDAC8D0];
  if (a4 != 4)
    return 0;
  v14 = (const char *)(a2 + a6);
  v15 = strcmp((const char *)(a2 + a6), "GNU");
  if (a5 - 4 > 0x10 || a3 != 3 || v15)
  {
    v24 = strcmp(v14, "Go");
    result = 0;
    if (a5 <= 0x7F && a3 == 4 && !v24)
    {
      strlcpy(__dst, (const char *)(a2 + a7), a5 + 1);
      if (file_printf(a1, ", Go BuildID=%s", v25, v26, v27, v28, v29, v30, (char)__dst) == -1)
        return 0xFFFFFFFFLL;
      else
        return 1;
    }
  }
  else
  {
    *a8 |= 0x10u;
    switch(a5)
    {
      case 8u:
        v22 = "xxHash";
        break;
      case 0x14u:
        v22 = "sha1";
        break;
      case 0x10u:
        v22 = "md5/uuid";
        break;
      default:
        v22 = "unknown";
        break;
    }
    result = file_printf(a1, ", BuildID[%s]=", v16, v17, v18, v19, v20, v21, (char)v22);
    if ((_DWORD)result != -1)
    {
      v31 = a5;
      v32 = __dst;
      __memcpy_chk();
      while (1)
      {
        v39 = *v32++;
        result = file_printf(a1, "%02x", v33, v34, v35, v36, v37, v38, v39);
        if ((_DWORD)result == -1)
          break;
        if (!--v31)
          return 1;
      }
    }
  }
  return result;
}

uint64_t do_pax_note(uint64_t a1, uint64_t a2, int a3, int a4, int a5, int a6, uint64_t a7, uint64_t a8, _DWORD *a9)
{
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t result;
  unsigned int v23;
  unsigned int v24;
  int v25;
  uint64_t i;
  const char *v27;
  char v28;

  if (a5 != 4)
    return 0;
  v21 = strcmp((const char *)(a2 + a7), "PaX");
  result = 0;
  if (a6 == 4 && a3 == 3 && !v21)
  {
    *a9 |= 0x40u;
    v23 = bswap32(*(_DWORD *)(a2 + a8));
    v24 = a4 ? v23 : *(_DWORD *)(a2 + a8);
    if (!v24 || (result = file_printf(a1, ", PaX: ", v15, v16, v17, v18, v19, v20, v28), (_DWORD)result != -1))
    {
      v25 = 0;
      for (i = 0; i != 6; ++i)
      {
        if (((v24 >> i) & 1) != 0)
        {
          if (v25)
            v27 = ",";
          else
            v27 = "";
          result = file_printf(a1, "%s%s", v15, v16, v17, v18, v19, v20, (char)v27);
          if ((_DWORD)result == -1)
            return result;
          ++v25;
        }
      }
      return 1;
    }
  }
  return result;
}

uint64_t do_core_note(uint64_t a1, uint64_t a2, int a3, int a4, unsigned int a5, unsigned int a6, uint64_t a7, uint64_t a8, uint64_t a9, unint64_t a10, int a11)
{
  const char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  int v25;
  uint64_t result;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  int v47;
  _QWORD *v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  char *v54;
  _BOOL4 v55;
  uint64_t v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unsigned int v65;
  char v66;
  _QWORD *v67;
  int64_t v68;
  const char *v69;
  _BYTE *i;
  uint64_t v71;
  uint64_t v72;
  int v73;
  uint64_t v74;
  size_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  _OWORD v87[3];
  char __dst[512];
  uint64_t v89;

  v89 = *MEMORY[0x24BDAC8D0];
  v17 = (const char *)(a2 + a7);
  switch(a5)
  {
    case 8u:
      if (strcmp(v17, "FreeBSD"))
        goto LABEL_20;
      v24 = 1;
      goto LABEL_10;
    case 5u:
      if (strcmp(v17, "CORE"))
        goto LABEL_20;
LABEL_9:
      v24 = 0;
      goto LABEL_10;
    case 4u:
      if (strncmp(v17, "CORE", 4uLL))
        goto LABEL_20;
      goto LABEL_9;
  }
  if (a5 < 0xB || strncmp(v17, "NetBSD-CORE", 0xBuLL))
    goto LABEL_20;
  v24 = 2;
LABEL_10:
  v25 = *(_DWORD *)a9;
  if ((*(_DWORD *)a9 & 0x20) == 0)
  {
    result = file_printf(a1, ", %s-style", v18, v19, v20, v21, v22, v23, (char)&os_style_names[8 * v24]);
    if ((_DWORD)result == -1)
      return result;
    v25 = v24 | *(_DWORD *)a9 | 0x20;
    *(_DWORD *)a9 = v25;
  }
  if (v24 == 1)
  {
    result = 0;
    if (a3 == 3 && (v25 & 0x800) != 0)
    {
      v58 = a11 == 1 ? 25 : 33;
      result = file_printf(a1, ", from '%.80s'", v18, v19, v20, v21, v22, v23, a2 + a8 + v58);
      if ((_DWORD)result != -1)
      {
        if (a8 + v58 + 83 + 4 > a10)
          goto LABEL_76;
        v65 = *(_DWORD *)(a2 + a8 + v58 + 83);
        v66 = bswap32(v65);
        if (a4)
          LOBYTE(v65) = v66;
        result = file_printf(a1, ", pid=%u", v59, v60, v61, v62, v63, v64, v65);
        if ((_DWORD)result != -1)
        {
LABEL_76:
          result = 0;
          *(_DWORD *)a9 |= 4u;
        }
      }
    }
    return result;
  }
  if (v24 == 2)
  {
    if (a3 == 1)
    {
      memset(v87, 0, sizeof(v87));
      __memcpy_chk();
      file_printable(__dst, 512, (uint64_t)v87 + 12, 32);
      result = file_printf(a1, ", from '%.31s', pid=%u, uid=%u, gid=%u, nlwps=%u, lwp=%u (signal %u/code %u)", v27, v28, v29, v30, v31, v32, (char)__dst);
      if ((_DWORD)result != -1)
      {
        *(_DWORD *)a9 |= 4u;
        return 1;
      }
      return result;
    }
    return 0;
  }
LABEL_20:
  if (a3 != 3 || (*(_BYTE *)(a9 + 1) & 8) == 0)
    return 0;
  v82 = a1;
  v33 = 0;
  v34 = 5;
  if (a11 == 1)
    v34 = 7;
  v35 = a6;
  v83 = a2;
  v84 = a2 + a8;
  v36 = MEMORY[0x24BDAC740];
  v85 = a8;
  v86 = v34;
  while (2)
  {
    v37 = 0;
    v38 = &prpsoffsets64;
    if (a11 == 1)
      v38 = &prpsoffsets32;
    v39 = v38[v33];
    v40 = v39 + a8;
    v41 = v84 + v39;
    while (1)
    {
      if (v40 + v37 >= a10 || v39 + v37 >= v35)
        goto LABEL_43;
      v43 = *(unsigned __int8 *)(v41 + v37);
      if (!*(_BYTE *)(v41 + v37))
        break;
      if ((v43 & 0x80) != 0)
      {
        if (!__maskrune(*(unsigned __int8 *)(v41 + v37), 0x40000uLL))
          goto LABEL_43;
      }
      else if ((*(_DWORD *)(v36 + 4 * *(unsigned __int8 *)(v41 + v37) + 60) & 0x40000) == 0)
      {
        goto LABEL_43;
      }
        goto LABEL_43;
      if (++v37 == 16)
        goto LABEL_45;
    }
    if (!v37)
    {
LABEL_43:
      result = 0;
      ++v33;
      a8 = v85;
      if (v33 != v86)
        continue;
      return result;
    }
    break;
  }
LABEL_45:
  v44 = v33 + 1;
  v45 = v86;
  if (v33 + 1 >= v86)
  {
    v53 = v33;
    v46 = v85;
    v47 = a11;
  }
  else
  {
    v46 = v85;
    v47 = a11;
    do
    {
      if (a11 == 1)
        v48 = &prpsoffsets32;
      else
        v48 = &prpsoffsets64;
      v49 = v48[v44];
      v50 = v48[v33];
      v51 = v50 - v49;
      if (v50 <= v49)
      {
        v53 = v33;
      }
      else
      {
        v52 = v50 + v85;
        v53 = v44;
        if (v49 + v85 < v52)
        {
          v54 = (char *)(v83 + v85 + v49);
          v55 = 1;
          do
          {
            if (v55)
            {
              v56 = *v54;
              if (*v54 < 0)
                v57 = __maskrune(v56, 0x40000uLL);
              else
                v57 = *(_DWORD *)(v36 + 4 * v56 + 60) & 0x40000;
              v55 = v57 != 0;
            }
            ++v54;
            --v51;
          }
          while (v51);
          if (v55)
            v53 = v44;
          else
            v53 = v33;
          v45 = v86;
        }
      }
      ++v44;
      v33 = v53;
    }
    while (v44 != v45);
  }
  if (v47 == 1)
    v67 = &prpsoffsets32;
  else
    v67 = &prpsoffsets64;
  v68 = v67[v53] + v46;
  v69 = (const char *)(v83 + v68);
  i = (_BYTE *)(v83 + v68);
  if (v68 < (uint64_t)a10)
  {
    for (i = (_BYTE *)(v83 + v68); (unint64_t)i < v83 + a10; ++i)
    {
      v71 = *i;
      if (!*i)
        break;
      if ((v71 & 0x80) != 0)
      {
        if (!__maskrune(v71, 0x40000uLL))
          break;
      }
      else if ((*(_DWORD *)(v36 + 4 * v71 + 60) & 0x40000) == 0)
      {
        break;
      }
    }
  }
  while (1)
  {
    v72 = i - v69;
    if (i <= v69)
      break;
    v73 = (char)*--i;
    v74 = v73;
    if (v73 < 0)
    {
      if (!__maskrune(v74, 0x4000uLL))
        break;
    }
    else if ((*(_DWORD *)(v36 + 4 * v74 + 60) & 0x4000) == 0)
    {
      break;
    }
  }
  if ((unint64_t)(v72 + 1) < 0x100)
    v75 = v72 + 1;
  else
    v75 = 256;
  strlcpy(__dst, v69, v75);
  result = file_printf(v82, ", from '%s'", v76, v77, v78, v79, v80, v81, (char)__dst);
  if ((_DWORD)result != -1)
  {
    *(_DWORD *)a9 |= 4u;
    return 1;
  }
  return result;
}

uint64_t do_auxv_note(uint64_t a1, uint64_t a2, int a3, int a4, unsigned int a5, uint64_t a6, _DWORD *a7, int a8, int a9, off_t a10, int a11, int64_t a12)
{
  uint64_t result;
  unint64_t v14;
  uint64_t v17;
  unint64_t v18;
  __int128 *v19;
  ssize_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  const char *v34;
  unsigned int v35;
  unint64_t v36;
  unint64_t v37;
  off_t v38;
  int v39;
  unsigned int v40;
  int64_t v41;
  unint64_t v42;
  unsigned int v43;
  unint64_t v44;
  unsigned int v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  off_t v50;
  ssize_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unsigned int v58;
  __darwin_ct_rune_t *v59;
  unsigned int v60;
  int *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  int *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unsigned int v73;
  unint64_t v74;
  unint64_t v75;
  char v76;
  uint64_t v77;
  const char *v78;
  unint64_t v79;
  __int128 *__buf;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  uint64_t v84;
  __int128 v85;
  __int128 v86;
  unsigned __int8 v87[256];
  uint64_t v88;

  result = 0;
  v88 = *MEMORY[0x24BDAC8D0];
  if (a8 == 1)
    v14 = 8;
  else
    v14 = 16;
  if (a3 != 6 || (*a7 & 0x823) != 0x820)
    return result;
  *a7 |= 0x1000u;
  if (v14 > a5)
    return 1;
  v17 = 0;
  v18 = v14;
  v79 = a5;
  v19 = &v81;
  if (a8 == 1)
    v19 = &v85;
  __buf = v19;
  if (a8 == 1)
    v20 = 32;
  else
    v20 = 56;
  v21 = v14;
  v77 = a1;
  while (1)
  {
    v22 = v21;
    v23 = v18;
    __memcpy_chk();
    if (v17 == 50)
    {
      file_error(a1, 0, "Too many ELF Auxv elements", v25, v26, v27, v28, v29, v76);
      return 1;
    }
    if (a8 == 1)
    {
      v30 = bswap32(0);
      v31 = a4 ? v30 : 0;
    }
    else
    {
      v31 = 0;
      v32 = bswap64(0);
      if (a4)
        v31 = v32;
    }
    v33 = v31 - 11;
    v34 = "real uid";
    switch(v33)
    {
      case 0uLL:
        goto LABEL_26;
      case 1uLL:
        v34 = "effective uid";
        goto LABEL_26;
      case 2uLL:
        v34 = "real gid";
        goto LABEL_26;
      case 3uLL:
        v34 = "effective gid";
LABEL_26:
        result = file_printf(a1, ", %s: %d", v24, v25, v26, v27, v28, v29, (char)v34);
        if ((_DWORD)result == -1)
          return result;
        goto LABEL_80;
      case 4uLL:
        v78 = "platform";
        goto LABEL_29;
      default:
        v78 = "execfn";
        if ("real uid" != (char *)31)
          goto LABEL_80;
LABEL_29:
        if (a8 == 1)
        {
          v35 = bswap32(0);
          if (a4)
            v36 = v35;
          else
            v36 = 0;
        }
        else
        {
          v37 = bswap64(0);
          if (a4)
            v36 = v37;
          else
            v36 = 0;
        }
        if (!a11)
          goto LABEL_68;
        v85 = 0u;
        v86 = 0u;
        v81 = 0u;
        v82 = 0u;
        v83 = 0u;
        v38 = a10;
        v39 = a11;
        v84 = 0;
        break;
    }
    while (1)
    {
      if (pread(a9, __buf, v20, v38) < v20)
      {
        v61 = __error();
        a1 = v77;
        file_error(v77, *v61, "error reading", v62, v63, v64, v65, v66, v76);
        goto LABEL_79;
      }
      if (a12 != -1)
      {
        if (a8 == 1)
        {
          v40 = bswap32(DWORD1(v85));
          v41 = a4 ? v40 : DWORD1(v85);
        }
        else
        {
          v41 = *((_QWORD *)&v81 + 1);
          v42 = bswap64(*((unint64_t *)&v81 + 1));
          if (a4)
            v41 = v42;
        }
        if (v41 > a12)
          goto LABEL_67;
      }
      if (a8 == 1)
      {
        v43 = bswap32(DWORD2(v85));
        if (!a4)
          v43 = DWORD2(v85);
        if (DWORD2(v85))
          v44 = v43;
        else
          v44 = 4;
        if (v36 >= v44)
        {
          v45 = bswap32(v86);
          v46 = a4 ? v45 : v86;
          if (v46 + v44 > v36)
          {
            v73 = bswap32(DWORD1(v85));
            if (a4)
              v74 = v73;
            else
              v74 = DWORD1(v85);
            goto LABEL_91;
          }
        }
        goto LABEL_67;
      }
      v47 = bswap64(v82);
      if (!a4)
        v47 = v82;
      v44 = 4;
      if ((_QWORD)v82)
        v44 = v47;
      if (v44 <= v36)
      {
        v48 = v83;
        v49 = bswap64(v83);
        if (a4)
          v48 = v49;
        if (v48 + v44 > v36)
          break;
      }
LABEL_67:
      v38 += v20;
      if (!--v39)
      {
LABEL_68:
        v50 = 0;
        a1 = v77;
        goto LABEL_69;
      }
    }
    v74 = *((_QWORD *)&v81 + 1);
    v75 = bswap64(*((unint64_t *)&v81 + 1));
    if (a4)
      v74 = v75;
LABEL_91:
    v50 = v74 + v36 - v44;
    a1 = v77;
    if (v50 < 0)
    {
LABEL_79:
      v67 = __error();
      file_error(a1, *v67, "error reading", v68, v69, v70, v71, v72, v76);
      goto LABEL_80;
    }
LABEL_69:
    v51 = pread(a9, v87, 0x100uLL, v50);
    if (v51 <= 0)
      goto LABEL_79;
    v87[v51 - 1] = 0;
    v58 = v87[0];
    if (v87[0])
    {
      v59 = (__darwin_ct_rune_t *)v87;
      while ((v58 & 0x80) == 0)
      {
        if ((*(_DWORD *)(MEMORY[0x24BDAC740] + 4 * v58 + 60) & 0x40000) == 0)
          goto LABEL_82;
LABEL_76:
        v60 = *((unsigned __int8 *)v59 + 1);
        v59 = (__darwin_ct_rune_t *)((char *)v59 + 1);
        v58 = v60;
        if (!v60)
          goto LABEL_83;
      }
      if (__maskrune(v58, 0x40000uLL))
        goto LABEL_76;
LABEL_82:
      if (*(_BYTE *)v59)
        goto LABEL_80;
LABEL_83:
      if (v59 != (__darwin_ct_rune_t *)v87)
      {
        result = file_printf(a1, ", %s: '%s'", v52, v53, v54, v55, v56, v57, (char)v78);
        if ((_DWORD)result == -1)
          return result;
      }
    }
LABEL_80:
    ++v17;
    v18 = v23;
    v21 = v22 + v23;
    if (v22 + v23 > v79)
      return 1;
  }
}

id getCNPhoneNumberClass()
{
  void *v0;
  id v1;
  _QWORD v3[5];
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = 0;
  v5 = &v4;
  v6 = 0x2050000000;
  v0 = (void *)getCNPhoneNumberClass_softClass_18250;
  v7 = getCNPhoneNumberClass_softClass_18250;
  if (!getCNPhoneNumberClass_softClass_18250)
  {
    v3[0] = MEMORY[0x24BDAC760];
    v3[1] = 3221225472;
    v3[2] = __getCNPhoneNumberClass_block_invoke_18251;
    v3[3] = &unk_24C4E3118;
    v3[4] = &v4;
    __getCNPhoneNumberClass_block_invoke_18251((uint64_t)v3);
    v0 = (void *)v5[3];
  }
  v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_20BC60388(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class __getCNPhoneNumberClass_block_invoke_18251(uint64_t a1)
{
  Class result;
  void *v3;
  void *v4;
  void *v5;

  if (!ContactsLibraryCore_frameworkLibrary_18252)
    ContactsLibraryCore_frameworkLibrary_18252 = _sl_dlopen();
  if (!ContactsLibraryCore_frameworkLibrary_18252)
  {
    objc_msgSend(MEMORY[0x24BDD1448], "currentHandler");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "void *ContactsLibrary(void)");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, CFSTR("WFPhoneNumber.m"), 16, CFSTR("%s"), 0);

    goto LABEL_8;
  }
  result = objc_getClass("CNPhoneNumber");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    objc_msgSend(MEMORY[0x24BDD1448], "currentHandler");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "Class getCNPhoneNumberClass(void)_block_invoke");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v5, CFSTR("WFPhoneNumber.m"), 17, CFSTR("Unable to find class %s"), "CNPhoneNumber");

LABEL_8:
    __break(1u);
  }
  getCNPhoneNumberClass_softClass_18250 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

void sub_20BC615C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_20BC616CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_20BC61DD0(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 64), 8);
  _Unwind_Resume(a1);
}

void sub_20BC624C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void get_SFReaderExtractorErrorDomain()
{
  id *v0;
  void *v1;
  id v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;

  v5 = 0;
  v6 = &v5;
  v7 = 0x2020000000;
  v0 = (id *)get_SFReaderExtractorErrorDomainSymbolLoc_ptr;
  v8 = get_SFReaderExtractorErrorDomainSymbolLoc_ptr;
  if (!get_SFReaderExtractorErrorDomainSymbolLoc_ptr)
  {
    v1 = SafariServicesLibrary();
    v0 = (id *)dlsym(v1, "_SFReaderExtractorErrorDomain");
    v6[3] = (uint64_t)v0;
    get_SFReaderExtractorErrorDomainSymbolLoc_ptr = (uint64_t)v0;
  }
  _Block_object_dispose(&v5, 8);
  if (v0)
  {
    v2 = *v0;
  }
  else
  {
    objc_msgSend(MEMORY[0x24BDD1448], "currentHandler");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "NSString *get_SFReaderExtractorErrorDomain(void)");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, CFSTR("WFArticle.m"), 60, CFSTR("%s"), dlerror());

    __break(1u);
  }
}

void sub_20BC625C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void *UIFoundationLibrary_18457()
{
  void *v0;
  void *v2;
  void *v3;

  if (!UIFoundationLibraryCore_frameworkLibrary_18471)
    UIFoundationLibraryCore_frameworkLibrary_18471 = _sl_dlopen();
  v0 = (void *)UIFoundationLibraryCore_frameworkLibrary_18471;
  if (!UIFoundationLibraryCore_frameworkLibrary_18471)
  {
    objc_msgSend(MEMORY[0x24BDD1448], "currentHandler");
    v0 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "void *UIFoundationLibrary(void)");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v2, CFSTR("WFArticle.m"), 25, CFSTR("%s"), 0);

    __break(1u);
    free(v3);
  }
  return v0;
}

void *SafariServicesLibrary()
{
  void *v0;
  void *v2;
  void *v3;

  if (!SafariServicesLibraryCore_frameworkLibrary)
    SafariServicesLibraryCore_frameworkLibrary = _sl_dlopen();
  v0 = (void *)SafariServicesLibraryCore_frameworkLibrary;
  if (!SafariServicesLibraryCore_frameworkLibrary)
  {
    objc_msgSend(MEMORY[0x24BDD1448], "currentHandler");
    v0 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "void *SafariServicesLibrary(void)");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v2, CFSTR("WFArticle.m"), 58, CFSTR("%s"), 0);

    __break(1u);
    free(v3);
  }
  return v0;
}

id WFNumberFromString(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  id v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  _BYTE v15[20];
  _QWORD v16[2];
  int v17;
  double v18;

  v1 = a1;
  objc_msgSend(MEMORY[0x24BDBCEA0], "currentLocale");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "objectForKey:", *MEMORY[0x24BDBCB10]);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "stringByReplacingOccurrencesOfString:withString:", v3, &stru_24C4E3948);
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(MEMORY[0x24BDD17A8], "scannerWithString:", v4);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x24BDBCEA0], "currentLocale");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "setLocale:", v6);

  v18 = 0.0;
  if (objc_msgSend(v5, "scanDouble:", &v18))
  {
    v7 = (void *)MEMORY[0x24BDD1518];
    objc_msgSend(MEMORY[0x24BDD16E0], "numberWithDouble:", v18);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v9 = v8;
    if (v8)
    {
      objc_msgSend(v8, "decimalValue");
    }
    else
    {
      v16[0] = 0;
      v16[1] = 0;
      v17 = 0;
    }
    objc_msgSend(v7, "decimalNumberWithDecimal:", v16);
    v13 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v9 = objc_alloc_init(MEMORY[0x24BDD16F0]);
    objc_msgSend(v9, "setNumberStyle:", 5);
    objc_msgSend(v1, "lowercaseString");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "numberFromString:", v10);
    v11 = (void *)objc_claimAutoreleasedReturnValue();

    if (v11)
    {
      v12 = (void *)MEMORY[0x24BDD1518];
      objc_msgSend(v11, "decimalValue");
      objc_msgSend(v12, "decimalNumberWithDecimal:", v15);
      v13 = (void *)objc_claimAutoreleasedReturnValue();
    }
    else
    {
      v13 = 0;
    }

  }
  return v13;
}

id WFDictionariesFromString(void *a1, _QWORD *a2)
{
  id v3;
  void *v4;
  void *v5;
  uint64_t v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  id v12;
  void *v13;
  void *v14;
  void *v15;
  id v16;
  void *v17;
  WFOrderedDictionary *v18;
  _QWORD v20[2];

  v20[1] = *MEMORY[0x24BDAC8D0];
  v3 = a1;
  objc_msgSend(MEMORY[0x24BDD14A8], "whitespaceAndNewlineCharacterSet");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "invertedSet");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = objc_msgSend(v3, "rangeOfCharacterFromSet:", v5);

  if (v6 == 0x7FFFFFFFFFFFFFFFLL || (objc_msgSend(v3, "characterAtIndex:", v6) & 0xFFFFFFDF) != 0x5B)
  {

  }
  else
  {
    v7 = (void *)MEMORY[0x24BDD1608];
    objc_msgSend(v3, "dataUsingEncoding:", 4);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "JSONObjectWithData:options:error:", v8, 0, 0);
    v9 = (void *)objc_claimAutoreleasedReturnValue();

    WFDictionariesFromObject(v9);
    v10 = (void *)objc_claimAutoreleasedReturnValue();

    if (v10)
    {
      if (a2)
      {
        objc_msgSend(MEMORY[0x24BEC14A0], "typeFromMIMEType:", CFSTR("application/json"));
        v11 = (void *)objc_claimAutoreleasedReturnValue();
LABEL_11:
        *a2 = v11;
        goto LABEL_20;
      }
      goto LABEL_20;
    }
  }
  v12 = v3;
  if ((objc_msgSend(v12, "hasPrefix:", CFSTR("<?xml version=\"1.0\" encoding=\"UTF-8\"?>")) & 1) == 0)
  {

LABEL_13:
    v16 = v12;
    if (objc_msgSend(v16, "rangeOfString:", CFSTR("=")) == 0x7FFFFFFFFFFFFFFFLL)
    {

    }
    else
    {
      objc_msgSend(MEMORY[0x24BDBCF48], "dc_queryItemsFromQueryString:", v16);
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      v18 = -[WFOrderedDictionary initWithQueryItems:]([WFOrderedDictionary alloc], "initWithQueryItems:", v17);

      if (v18)
      {
        if (a2)
        {
          objc_msgSend(MEMORY[0x24BEC14A0], "typeFromMIMEType:", CFSTR("application/x-www-form-urlencoded"));
          *a2 = (id)objc_claimAutoreleasedReturnValue();
        }
        v20[0] = v18;
        objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:count:", v20, 1);
        v10 = (void *)objc_claimAutoreleasedReturnValue();

        goto LABEL_20;
      }
    }
    v10 = 0;
    goto LABEL_20;
  }
  v13 = (void *)MEMORY[0x24BDD1770];
  objc_msgSend(v12, "dataUsingEncoding:", 4);
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v13, "propertyListWithData:options:format:error:", v14, 0, 0, 0);
  v15 = (void *)objc_claimAutoreleasedReturnValue();

  WFDictionariesFromObject(v15);
  v10 = (void *)objc_claimAutoreleasedReturnValue();

  if (!v10)
    goto LABEL_13;
  if (a2)
  {
    objc_msgSend(MEMORY[0x24BEC14A0], "typeWithUTType:", *MEMORY[0x24BDF8530]);
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    goto LABEL_11;
  }
LABEL_20:

  return v10;
}

id WFDictionariesFromObject(void *a1)
{
  id v1;
  uint64_t v2;
  void *v3;
  _QWORD v5[2];

  v5[1] = *MEMORY[0x24BDAC8D0];
  v1 = a1;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    v5[0] = v1;
    objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:count:", v5, 1);
    v2 = objc_claimAutoreleasedReturnValue();
  }
  else
  {
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) == 0)
    {
      v3 = 0;
      goto LABEL_7;
    }
    objc_msgSend(v1, "objectsMatchingClass:", objc_opt_class());
    v2 = objc_claimAutoreleasedReturnValue();
  }
  v3 = (void *)v2;
LABEL_7:

  return v3;
}

id EMObjectIDFunction()
{
  return (id)classEMObjectID;
}

Class initEMObjectID()
{
  Class result;

  if (EmailLibrary_sOnce != -1)
    dispatch_once(&EmailLibrary_sOnce, &__block_literal_global_100_18720);
  result = objc_getClass("EMObjectID");
  classEMObjectID = (uint64_t)result;
  getEMObjectIDClass = (uint64_t (*)())EMObjectIDFunction;
  return result;
}

id EMContentRequestOptionsFunction()
{
  return (id)classEMContentRequestOptions;
}

Class initEMContentRequestOptions()
{
  Class result;

  if (EmailLibrary_sOnce != -1)
    dispatch_once(&EmailLibrary_sOnce, &__block_literal_global_100_18720);
  result = objc_getClass("EMContentRequestOptions");
  classEMContentRequestOptions = (uint64_t)result;
  getEMContentRequestOptionsClass = (uint64_t (*)(void))EMContentRequestOptionsFunction;
  return result;
}

id EMContentRepresentationTypeHTMLFunction()
{
  return (id)constantEMContentRepresentationTypeHTML;
}

id initEMContentRepresentationTypeHTML()
{
  id *v0;

  if (EmailLibrary_sOnce != -1)
    dispatch_once(&EmailLibrary_sOnce, &__block_literal_global_100_18720);
  v0 = (id *)dlsym((void *)EmailLibrary_sLib, "EMContentRepresentationTypeHTML");
  if (!v0)
    __assert_rtn("initEMContentRepresentationTypeHTML", "WFEmail.m", 28, "constant");
  objc_storeStrong((id *)&constantEMContentRepresentationTypeHTML, *v0);
  getEMContentRepresentationTypeHTML = (uint64_t (*)(void))EMContentRepresentationTypeHTMLFunction;
  return (id)constantEMContentRepresentationTypeHTML;
}

id EMContentRepresentationTypeRawFunction()
{
  return (id)constantEMContentRepresentationTypeRaw;
}

id initEMContentRepresentationTypeRaw()
{
  id *v0;

  if (EmailLibrary_sOnce != -1)
    dispatch_once(&EmailLibrary_sOnce, &__block_literal_global_100_18720);
  v0 = (id *)dlsym((void *)EmailLibrary_sLib, "EMContentRepresentationTypeRaw");
  if (!v0)
    __assert_rtn("initEMContentRepresentationTypeRaw", "WFEmail.m", 29, "constant");
  objc_storeStrong((id *)&constantEMContentRepresentationTypeRaw, *v0);
  getEMContentRepresentationTypeRaw = (uint64_t (*)())EMContentRepresentationTypeRawFunction;
  return (id)constantEMContentRepresentationTypeRaw;
}

id EMDaemonInterfaceFunction()
{
  return (id)classEMDaemonInterface;
}

Class initEMDaemonInterface()
{
  Class result;

  if (EmailLibrary_sOnce != -1)
    dispatch_once(&EmailLibrary_sOnce, &__block_literal_global_100_18720);
  result = objc_getClass("EMDaemonInterface");
  classEMDaemonInterface = (uint64_t)result;
  getEMDaemonInterfaceClass = (uint64_t (*)())EMDaemonInterfaceFunction;
  return result;
}

void sub_20BC64F78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_list va;

  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class __getEKAttachmentClass_block_invoke(uint64_t a1)
{
  Class result;
  void *v3;
  void *v4;
  void *v5;

  if (!EventKitLibraryCore_frameworkLibrary_18792)
    EventKitLibraryCore_frameworkLibrary_18792 = _sl_dlopen();
  if (!EventKitLibraryCore_frameworkLibrary_18792)
  {
    objc_msgSend(MEMORY[0x24BDD1448], "currentHandler");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "void *EventKitLibrary(void)");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, CFSTR("WFCalendarEventContentItemChangeTransaction.m"), 13, CFSTR("%s"), 0);

    goto LABEL_8;
  }
  result = objc_getClass("EKAttachment");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    objc_msgSend(MEMORY[0x24BDD1448], "currentHandler");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "Class getEKAttachmentClass(void)_block_invoke");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v5, CFSTR("WFCalendarEventContentItemChangeTransaction.m"), 14, CFSTR("Unable to find class %s"), "EKAttachment");

LABEL_8:
    __break(1u);
  }
  getEKAttachmentClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

id NSTextAttachmentFunction()
{
  return (id)classNSTextAttachment;
}

Class initNSTextAttachment()
{
  Class result;

  if (UIKitLibrary_sOnce_18830 != -1)
    dispatch_once(&UIKitLibrary_sOnce_18830, &__block_literal_global_18831);
  result = objc_getClass("NSTextAttachment");
  classNSTextAttachment = (uint64_t)result;
  getNSTextAttachmentClass = (uint64_t (*)())NSTextAttachmentFunction;
  return result;
}

void sub_20BC65C2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_list va;

  va_start(va, a17);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void *AVFoundationLibrary_18867()
{
  void *v0;
  void *v2;
  void *v3;

  if (!AVFoundationLibraryCore_frameworkLibrary_18882)
    AVFoundationLibraryCore_frameworkLibrary_18882 = _sl_dlopen();
  v0 = (void *)AVFoundationLibraryCore_frameworkLibrary_18882;
  if (!AVFoundationLibraryCore_frameworkLibrary_18882)
  {
    objc_msgSend(MEMORY[0x24BDD1448], "currentHandler");
    v0 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "void *AVFoundationLibrary(void)");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v2, CFSTR("WFObjectNameProvider.m"), 38, CFSTR("%s"), 0);

    __break(1u);
    free(v3);
  }
  return v0;
}

void __getAVURLAssetClass_block_invoke_18875(uint64_t a1)
{
  void *v2;
  void *v3;

  AVFoundationLibrary_18867();
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = objc_getClass("AVURLAsset");
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    getAVURLAssetClass_softClass_18874 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  }
  else
  {
    objc_msgSend(MEMORY[0x24BDD1448], "currentHandler");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "Class getAVURLAssetClass(void)_block_invoke");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, CFSTR("WFObjectNameProvider.m"), 39, CFSTR("Unable to find class %s"), "AVURLAsset");

    __break(1u);
  }
}

void sub_20BC65F40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void *__getMPMediaItemPropertyTitleSymbolLoc_block_invoke(_QWORD *a1)
{
  void *v2;
  void *result;
  void *v4;

  if (!MediaPlayerLibraryCore_frameworkLibrary_18889)
    MediaPlayerLibraryCore_frameworkLibrary_18889 = _sl_dlopen();
  v2 = (void *)MediaPlayerLibraryCore_frameworkLibrary_18889;
  if (!MediaPlayerLibraryCore_frameworkLibrary_18889)
  {
    objc_msgSend(MEMORY[0x24BDD1448], "currentHandler");
    a1 = (_QWORD *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "void *MediaPlayerLibrary(void)");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(a1, "handleFailureInFunction:file:lineNumber:description:", v2, CFSTR("WFObjectNameProvider.m"), 34, CFSTR("%s"), 0);

    __break(1u);
    free(v4);
  }
  result = dlsym(v2, "MPMediaItemPropertyTitle");
  *(_QWORD *)(*(_QWORD *)(a1[4] + 8) + 24) = result;
  getMPMediaItemPropertyTitleSymbolLoc_ptr_18887 = *(_QWORD *)(*(_QWORD *)(a1[4] + 8) + 24);
  return result;
}

void sub_20BC66264(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class __getPHImportSessionClass_block_invoke(uint64_t a1)
{
  Class result;
  void *v3;
  void *v4;
  void *v5;

  if (!PhotosLibraryCore_frameworkLibrary_18908)
    PhotosLibraryCore_frameworkLibrary_18908 = _sl_dlopen();
  if (!PhotosLibraryCore_frameworkLibrary_18908)
  {
    objc_msgSend(MEMORY[0x24BDD1448], "currentHandler");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "void *PhotosLibrary(void)");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, CFSTR("WFObjectNameProvider.m"), 25, CFSTR("%s"), 0);

    goto LABEL_8;
  }
  result = objc_getClass("PHImportSession");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    objc_msgSend(MEMORY[0x24BDD1448], "currentHandler");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "Class getPHImportSessionClass(void)_block_invoke");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v5, CFSTR("WFObjectNameProvider.m"), 26, CFSTR("Unable to find class %s"), "PHImportSession");

LABEL_8:
    __break(1u);
  }
  getPHImportSessionClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

id WFPageTitleFromHTMLFile(uint64_t a1)
{
  void *v1;
  void *v2;
  void *v3;

  objc_msgSend(MEMORY[0x24BDBCE50], "dataWithContentsOfURL:options:error:", a1, 8, 0);
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  v2 = v1;
  if (v1)
  {
    WFPageTitleFromHTMLData(v1);
    v3 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v3 = 0;
  }

  return v3;
}

id WFPageTitleFromHTMLData(void *a1)
{
  id v1;
  uint64_t v2;
  id v3;
  const char *v4;
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  const char *v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  const char *v12;
  BOOL v13;
  uint64_t v14;
  BOOL v15;
  void *v17;
  void *v18;

  v1 = a1;
  v2 = objc_msgSend(v1, "length");
  v3 = objc_retainAutorelease(v1);
  v4 = (const char *)objc_msgSend(v3, "bytes");

  v5 = &v4[v2];
  v6 = WFCaseInsensitiveRangeOfStringInData(v4, v2, CFSTR("<title"));
  v8 = &v4[v6 + v7];
  v9 = v6 == 0x7FFFFFFFFFFFFFFFLL || v8 >= v5;
  if (v9
    || ((v10 = WFCaseInsensitiveRangeOfStringInData(v8, v2 - (v6 + v7), CFSTR(">")),
         v12 = &v8[v10 + v11],
         v10 != 0x7FFFFFFFFFFFFFFFLL)
      ? (v13 = v12 >= v5)
      : (v13 = 1),
        v13
     || ((v14 = WFCaseInsensitiveRangeOfStringInData(v12, &v4[v2] - v12, CFSTR("</title")), v14 != 0x7FFFFFFFFFFFFFFFLL)
       ? (v15 = &v12[v14] >= v5)
       : (v15 = 1),
         v15)))
  {
    v18 = 0;
  }
  else
  {
    objc_msgSend(MEMORY[0x24BDBCE50], "dataWithBytes:length:", v12, v14);
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x24BDD17C8], "wf_stringWithData:", v17);
    v18 = (void *)objc_claimAutoreleasedReturnValue();

  }
  return v18;
}

uint64_t WFCaseInsensitiveRangeOfStringInData(const char *a1, uint64_t a2, void *a3)
{
  id v5;
  unsigned __int8 *v6;
  __darwin_ct_rune_t v7;
  const char *v8;
  const char *i;
  unsigned __int8 v10;
  size_t v11;
  size_t v12;
  uint64_t v13;

  v5 = objc_retainAutorelease(a3);
  v6 = (unsigned __int8 *)objc_msgSend(v5, "UTF8String");
  v8 = (const char *)(v6 + 1);
  v7 = *v6;
  i = a1;
  if (v7)
  {
    v10 = __tolower(v7);
    v11 = strlen(v8);
    v12 = a2 - 1;
    for (i = a1; v12 != -1 && *i; ++i)
    {
      if (__tolower(*(unsigned __int8 *)i) == v10)
      {
        if (v11 > v12)
          break;
        if (!strncasecmp(i + 1, v8, v11))
          goto LABEL_10;
      }
      --v12;
    }
    v13 = 0x7FFFFFFFFFFFFFFFLL;
  }
  else
  {
LABEL_10:
    v13 = i - a1;
    objc_msgSend(v5, "lengthOfBytesUsingEncoding:", 4);
  }

  return v13;
}

void *WFAllPossibleContentOperators()
{
  return &unk_24C512488;
}

id WFDefaultLocalizedLabelForContentOperator(uint64_t a1)
{
  void *v2;
  __CFString *v3;

  v2 = 0;
  if (a1 > 99)
  {
    switch(a1)
    {
      case 999:
        v3 = CFSTR("does not contain");
        break;
      case 1000:
        v3 = CFSTR("is in the next");
        break;
      case 1001:
        v3 = CFSTR("is in the last");
        break;
      case 1002:
        v3 = CFSTR("is today");
        break;
      case 1003:
        v3 = CFSTR("is between");
        break;
      default:
        if (a1 == 100)
        {
          v3 = CFSTR("has any value");
        }
        else
        {
          if (a1 != 101)
            return v2;
          v3 = CFSTR("does not have any value");
        }
        break;
    }
  }
  else
  {
    switch(a1)
    {
      case 0:
        v3 = CFSTR("is less than");
        break;
      case 1:
        v3 = CFSTR("is less than or equal to");
        break;
      case 2:
        v3 = CFSTR("is greater than");
        break;
      case 3:
        v3 = CFSTR("is greater than or equal to");
        break;
      case 4:
        v3 = CFSTR("is");
        break;
      case 5:
        v3 = CFSTR("is not");
        break;
      case 6:
      case 7:
        return v2;
      case 8:
        v3 = CFSTR("begins with");
        break;
      case 9:
        v3 = CFSTR("ends with");
        break;
      default:
        if (a1 != 99)
          return v2;
        v3 = CFSTR("contains");
        break;
    }
  }
  WFLocalizedString(v3);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  return v2;
}

void sub_20BC69F14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_20BC6A3E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  uint64_t v29;

  _Block_object_dispose(&a29, 8);
  _Block_object_dispose((const void *)(v29 - 128), 8);
  _Unwind_Resume(a1);
}

id WFSupportedItemClassesForItemClass(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  BOOL v13;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  _BYTE v19[128];
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  v3 = a2;
  v4 = (void *)objc_msgSend(objc_alloc(MEMORY[0x24BDBCEE0]), "initWithCapacity:", objc_msgSend(v3, "count"));
  v15 = 0u;
  v16 = 0u;
  v17 = 0u;
  v18 = 0u;
  v5 = v3;
  v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v15, v19, 16);
  if (v6)
  {
    v7 = v6;
    v8 = *(_QWORD *)v16;
    do
    {
      v9 = 0;
      do
      {
        if (*(_QWORD *)v16 != v8)
          objc_enumerationMutation(v5);
        v10 = *(_QWORD *)(*((_QWORD *)&v15 + 1) + 8 * v9);
        +[WFContentItemRegistry sharedRegistry](WFContentItemRegistry, "sharedRegistry", (_QWORD)v15);
        v11 = (void *)objc_claimAutoreleasedReturnValue();
        v12 = objc_msgSend(v11, "contentItemClassForType:", v10);

        if (v12)
          v13 = v12 == a1;
        else
          v13 = 1;
        if (!v13)
          objc_msgSend(v4, "addObject:", v12);
        ++v9;
      }
      while (v7 != v9);
      v7 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v15, v19, 16);
    }
    while (v7);
  }

  return v4;
}

id WFCachedRecursivelySupportedTypes(void *a1)
{
  id v1;
  id v2;
  void *v3;
  void *v4;
  _QWORD v6[4];
  id v7;

  v1 = a1;
  v6[0] = MEMORY[0x24BDAC760];
  v6[1] = 3221225472;
  v6[2] = __WFCachedRecursivelySupportedTypes_block_invoke;
  v6[3] = &unk_24C4E2550;
  v2 = v1;
  v7 = v2;
  objc_getAssociatedObject(v2, &WFCachedRecursivelySupportedTypes_cachedValue);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = v2;
  if (!v3)
  {
    __WFCachedRecursivelySupportedTypes_block_invoke((uint64_t)v6);
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_setAssociatedObject(v2, &WFCachedRecursivelySupportedTypes_cachedValue, v3, (void *)0x303);
    v4 = v7;
  }

  return v3;
}

id WFRecursivelySupportedTypesExcludingTraversedClasses(void *a1, uint64_t a2, char a3, void *a4)
{
  id v7;
  id v8;
  void *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t i;
  void *v15;
  BOOL v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  char isKindOfClass;
  WFCoercionOptions *v21;
  void *v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t j;
  void *v28;
  void *v30;
  void *v31;
  unsigned int v32;
  id v33;
  uint64_t v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  _BYTE v43[128];
  _BYTE v44[128];
  uint64_t v45;

  v45 = *MEMORY[0x24BDAC8D0];
  v7 = a1;
  v8 = a4;
  if ((a3 & 1) != 0)
    objc_msgSend((id)objc_opt_class(), "supportedTypesExcludingInstanceSpecificTypes");
  else
    objc_msgSend(v7, "supportedTypes");
  v30 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = (void *)objc_msgSend(v30, "mutableCopy");
  v39 = 0u;
  v40 = 0u;
  v41 = 0u;
  v42 = 0u;
  objc_msgSend(v7, "supportedItemClasses");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  v11 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v39, v44, 16);
  if (v11)
  {
    v12 = v11;
    v13 = *(_QWORD *)v40;
    v33 = v7;
    v34 = *(_QWORD *)v40;
    v32 = a2;
    v31 = v10;
    do
    {
      for (i = 0; i != v12; ++i)
      {
        if (*(_QWORD *)v40 != v13)
          objc_enumerationMutation(v10);
        v15 = *(void **)(*((_QWORD *)&v39 + 1) + 8 * i);
        if ((objc_msgSend(v8, "containsObject:", v15) & 1) == 0)
        {
          objc_msgSend(v8, "addObject:", v15);
          if (objc_msgSend(v15, "supportedTypesMustBeDeterminedByInstance"))
            v16 = (_DWORD)a2 == 0;
          else
            v16 = 1;
          if (v16)
          {
            v17 = v15;
            v18 = a2;
            v19 = 0;
          }
          else
          {
            objc_opt_class();
            isKindOfClass = objc_opt_isKindOfClass();
            if ((isKindOfClass & 1) != 0)
            {
              v21 = +[WFCoercionOptions new](WFCoercionOptions, "new");
              objc_msgSend(v7, "itemsByCoercingToItemClass:options:error:", v15, v21, 0);
              v22 = (void *)objc_claimAutoreleasedReturnValue();

              if (objc_msgSend(v22, "count"))
              {
                v37 = 0u;
                v38 = 0u;
                v35 = 0u;
                v36 = 0u;
                v23 = v22;
                v24 = objc_msgSend(v23, "countByEnumeratingWithState:objects:count:", &v35, v43, 16);
                if (v24)
                {
                  v25 = v24;
                  v26 = *(_QWORD *)v36;
                  do
                  {
                    for (j = 0; j != v25; ++j)
                    {
                      if (*(_QWORD *)v36 != v26)
                        objc_enumerationMutation(v23);
                      WFRecursivelySupportedTypesExcludingTraversedClasses(*(_QWORD *)(*((_QWORD *)&v35 + 1) + 8 * j), 1, 0, v8);
                      v28 = (void *)objc_claimAutoreleasedReturnValue();
                      objc_msgSend(v9, "unionOrderedSet:", v28);

                    }
                    v25 = objc_msgSend(v23, "countByEnumeratingWithState:objects:count:", &v35, v43, 16);
                  }
                  while (v25);
                  v7 = v33;
                  a2 = v32;
                  v10 = v31;
                }
              }
              else
              {
                objc_msgSend(v15, "supportedTypesExcludingInstanceSpecificTypes");
                v23 = (id)objc_claimAutoreleasedReturnValue();
                objc_msgSend(v9, "unionOrderedSet:", v23);
              }

              v13 = v34;
              goto LABEL_30;
            }
            v17 = v15;
            v18 = 1;
            v19 = 1;
          }
          WFRecursivelySupportedTypesExcludingTraversedClasses(v17, v18, v19, v8);
          v22 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v9, "unionOrderedSet:", v22);
LABEL_30:

          continue;
        }
      }
      v12 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v39, v44, 16);
    }
    while (v12);
  }

  return v9;
}

uint64_t __Block_byref_object_copy__170(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__171(uint64_t a1)
{

}

void *__Block_byref_object_copy__19472(uint64_t a1, uint64_t a2)
{
  void *result;

  result = _Block_copy(*(const void **)(a2 + 40));
  *(_QWORD *)(a1 + 40) = result;
  return result;
}

void __Block_byref_object_dispose__19473(uint64_t a1)
{

}

uint64_t WFAnyInTypesConformsToType(void *a1, void *a2)
{
  id v3;
  id v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t i;
  void *v11;
  uint64_t v12;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  _BYTE v18[128];
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  v3 = a1;
  v4 = a2;
  v14 = 0u;
  v15 = 0u;
  v16 = 0u;
  v17 = 0u;
  v5 = v3;
  v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v14, v18, 16);
  if (v6)
  {
    v7 = v6;
    v8 = *(_QWORD *)v15;
    v9 = *MEMORY[0x24BDF8350];
    while (2)
    {
      for (i = 0; i != v7; ++i)
      {
        if (*(_QWORD *)v15 != v8)
          objc_enumerationMutation(v5);
        v11 = *(void **)(*((_QWORD *)&v14 + 1) + 8 * i);
        if (objc_msgSend(v11, "isEqualToUTType:", v9, (_QWORD)v14)
          && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0)
          || (objc_msgSend(v11, "conformsToType:", v4) & 1) != 0)
        {
          v12 = 1;
          goto LABEL_13;
        }
      }
      v7 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v14, v18, 16);
      if (v7)
        continue;
      break;
    }
  }
  v12 = 0;
LABEL_13:

  return v12;
}

id WFPopStringForKey(void *a1, void *a2)
{
  id v3;
  id v4;
  void *v5;

  v3 = a2;
  v4 = a1;
  objc_msgSend(v4, "wfObjectOfClass:forKey:", objc_opt_class(), v3);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "removeObjectForKey:", v3);

  return v5;
}

id WFMakeContentAttributionSetFromOrigin(void *a1, uint64_t a2, void *a3, _QWORD *a4)
{
  id v7;
  id v8;
  void *v9;
  void *v10;
  id v11;
  void *v13;
  void *v14;
  void *v15;
  void *v16;

  v7 = a1;
  v8 = a3;
  if (!v7)
  {
    objc_msgSend(MEMORY[0x24BDD1448], "currentHandler");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "WFContentAttributionSet * _Nonnull WFMakeContentAttributionSetFromOrigin(WFContentLocation * _Nonnull __strong, WFDisclosureLevel, NSArray<WFDisclosureWarning *> * _Nonnull __strong, NSUUID *__autoreleasing *)");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v13, "handleFailureInFunction:file:lineNumber:description:", v14, CFSTR("WFContentItem.m"), 47, CFSTR("Invalid parameter not satisfying: %@"), CFSTR("origin"));

    if (a4)
      goto LABEL_3;
LABEL_5:
    objc_msgSend(MEMORY[0x24BDD1448], "currentHandler");
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "WFContentAttributionSet * _Nonnull WFMakeContentAttributionSetFromOrigin(WFContentLocation * _Nonnull __strong, WFDisclosureLevel, NSArray<WFDisclosureWarning *> * _Nonnull __strong, NSUUID *__autoreleasing *)");
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v15, "handleFailureInFunction:file:lineNumber:description:", v16, CFSTR("WFContentItem.m"), 48, CFSTR("Invalid parameter not satisfying: %@"), CFSTR("cachingIdentifier"));

    goto LABEL_3;
  }
  if (!a4)
    goto LABEL_5;
LABEL_3:
  objc_msgSend(MEMORY[0x24BDD1880], "UUID");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  +[WFContentAttributionSet attributionSetWithOrigin:disclosureLevel:disclosureWarnings:originalItemIdentifier:](WFContentAttributionSet, "attributionSetWithOrigin:disclosureLevel:disclosureWarnings:originalItemIdentifier:", v7, a2, v8, v9);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  v11 = objc_retainAutorelease(v9);
  *a4 = v11;

  return v10;
}

id WFLocalizedString(void *a1)
{
  id v1;
  void *v2;
  void *v3;

  v1 = a1;
  WFCurrentBundle();
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "localizedStringForKey:value:table:", v1, v1, 0);
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  return v3;
}

id WFCurrentBundle()
{
  if (WFCurrentBundle_onceToken != -1)
    dispatch_once(&WFCurrentBundle_onceToken, &__block_literal_global_19764);
  return (id)WFCurrentBundle_bundle;
}

id WFLocalizedStringWithKey(void *a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  void *v6;

  v3 = a2;
  v4 = a1;
  WFCurrentBundle();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "localizedStringForKey:value:table:", v4, v3, 0);
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  return v6;
}

id WFLocalizedPluralString(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  id v6;

  v1 = a1;
  if (objc_msgSend(v1, "length"))
  {
    v2 = (void *)MEMORY[0x24BDD17C8];
    objc_msgSend(v1, "stringByReplacingOccurrencesOfString:withString:", CFSTR("\n"), CFSTR(" "));
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "stringWithFormat:", CFSTR("%@ (Pluralization)"), v3);
    v4 = (void *)objc_claimAutoreleasedReturnValue();

    WFCurrentBundle();
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "localizedStringForKey:value:table:", v4, v1, 0);
    v6 = (id)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    v6 = v1;
  }

  return v6;
}

id WFDeferrableLocalizedStringWithKey(void *a1, void *a2)
{
  objc_class *v3;
  id v4;
  id v5;
  void *v6;
  void *v7;
  void *v8;

  v3 = (objc_class *)MEMORY[0x24BEC1438];
  v4 = a2;
  v5 = a1;
  v6 = (void *)objc_msgSend([v3 alloc], "initWithString:", v4);
  WFCurrentBundle();
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "localizedStringForKey:value:table:", v5, v4, 0);
  v8 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v6, "setLocalizedValue:", v8);
  return v6;
}

id WFResolveDeferrableLocalizedString(void *a1)
{
  id v1;
  id v2;
  void *v3;

  v1 = a1;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    objc_msgSend(v1, "localizedValue");
    v2 = (id)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v2 = v1;
  }
  v3 = v2;

  return v3;
}

id WFLocalizedContentPropertyNameMarker(void *a1)
{
  void *v1;
  id v2;
  void *v3;
  void *v4;

  v1 = (void *)MEMORY[0x24BDD17C8];
  v2 = a1;
  objc_msgSend(v1, "stringWithFormat:", CFSTR("%@ (Content Property Name)"), v2);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  WFDeferrableLocalizedStringWithKey(v3, v2);
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  return v4;
}

id WFLocalizedContentPropertyNameMarkerWithContext(void *a1, uint64_t a2)
{
  void *v3;
  id v4;
  void *v5;
  void *v6;

  v3 = (void *)MEMORY[0x24BDD17C8];
  v4 = a1;
  objc_msgSend(v3, "stringWithFormat:", CFSTR("%@ (%@) (Content Property Name)"), v4, a2);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  WFDeferrableLocalizedStringWithKey(v5, v4);
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  return v6;
}

id WFLocalizedContentPropertyPossibleValueMarker(void *a1)
{
  void *v1;
  id v2;
  void *v3;
  void *v4;

  v1 = (void *)MEMORY[0x24BDD17C8];
  v2 = a1;
  objc_msgSend(v1, "stringWithFormat:", CFSTR("%@ (Content Property Possible Value)"), v2);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  WFDeferrableLocalizedStringWithKey(v3, v2);
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  return v4;
}

id WFLocalizedContentPropertyName(void *a1)
{
  id v1;
  void *v2;
  void *v3;

  v1 = a1;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    objc_msgSend(v1, "localizedValue");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithFormat:", CFSTR("%@ (Content Property Name)"), v1);
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    WFLocalizedStringWithKey(v3, v1);
    v2 = (void *)objc_claimAutoreleasedReturnValue();

  }
  return v2;
}

void WFContactFromCNContactProperty(void *a1)
{
  id v1;
  void *v2;
  _QWORD *v3;
  void *v4;
  uint64_t v5;
  _QWORD *v6;
  void *v7;
  _QWORD *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  uint64_t v14;
  void *v15;
  void *v16;
  id v17;
  void *v18;
  void *v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;

  v1 = a1;
  objc_msgSend(v1, "key");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v20 = 0;
  v21 = &v20;
  v22 = 0x2020000000;
  v3 = (_QWORD *)getCNContactPhoneNumbersKeySymbolLoc_ptr_20017;
  v23 = getCNContactPhoneNumbersKeySymbolLoc_ptr_20017;
  if (!getCNContactPhoneNumbersKeySymbolLoc_ptr_20017)
  {
    v4 = ContactsLibrary_20018();
    v3 = dlsym(v4, "CNContactPhoneNumbersKey");
    v21[3] = (uint64_t)v3;
    getCNContactPhoneNumbersKeySymbolLoc_ptr_20017 = (uint64_t)v3;
  }
  _Block_object_dispose(&v20, 8);
  if (v3)
  {
    if ((objc_msgSend(v2, "isEqualToString:", *v3) & 1) != 0)
    {
      v5 = 3;
LABEL_17:
      objc_msgSend(v1, "contact");
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v10, "valueForKey:", v2);
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v11, "valueForKey:", CFSTR("identifier"));
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v1, "identifier");
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      v14 = objc_msgSend(v12, "indexOfObject:", v13);

      objc_msgSend(v1, "contact");
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      +[WFCNContact contactWithCNContact:propertyID:multivalueIndex:](WFCNContact, "contactWithCNContact:propertyID:multivalueIndex:", v15, v5, v14);
      v16 = (void *)objc_claimAutoreleasedReturnValue();

      v17 = v16;
      return;
    }
    v20 = 0;
    v21 = &v20;
    v22 = 0x2020000000;
    v6 = (_QWORD *)getCNContactEmailAddressesKeySymbolLoc_ptr_20023;
    v23 = getCNContactEmailAddressesKeySymbolLoc_ptr_20023;
    if (!getCNContactEmailAddressesKeySymbolLoc_ptr_20023)
    {
      v7 = ContactsLibrary_20018();
      v6 = dlsym(v7, "CNContactEmailAddressesKey");
      v21[3] = (uint64_t)v6;
      getCNContactEmailAddressesKeySymbolLoc_ptr_20023 = (uint64_t)v6;
    }
    _Block_object_dispose(&v20, 8);
    if (v6)
    {
      if ((objc_msgSend(v2, "isEqualToString:", *v6) & 1) != 0)
      {
        v5 = 4;
        goto LABEL_17;
      }
      v20 = 0;
      v21 = &v20;
      v22 = 0x2020000000;
      v8 = (_QWORD *)getCNContactUrlAddressesKeySymbolLoc_ptr_20026;
      v23 = getCNContactUrlAddressesKeySymbolLoc_ptr_20026;
      if (!getCNContactUrlAddressesKeySymbolLoc_ptr_20026)
      {
        v9 = ContactsLibrary_20018();
        v8 = dlsym(v9, "CNContactUrlAddressesKey");
        v21[3] = (uint64_t)v8;
        getCNContactUrlAddressesKeySymbolLoc_ptr_20026 = (uint64_t)v8;
      }
      _Block_object_dispose(&v20, 8);
      if (v8)
      {
        if (objc_msgSend(v2, "isEqualToString:", *v8))
          v5 = 22;
        else
          v5 = 0xFFFFFFFFLL;
        goto LABEL_17;
      }
      objc_msgSend(MEMORY[0x24BDD1448], "currentHandler");
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "NSString *getCNContactUrlAddressesKey(void)");
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v18, "handleFailureInFunction:file:lineNumber:description:", v19, CFSTR("WFContactsUtilities.m"), 17, CFSTR("%s"), dlerror());
    }
    else
    {
      objc_msgSend(MEMORY[0x24BDD1448], "currentHandler");
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "NSString *getCNContactEmailAddressesKey(void)");
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v18, "handleFailureInFunction:file:lineNumber:description:", v19, CFSTR("WFContactsUtilities.m"), 16, CFSTR("%s"), dlerror());
    }
  }
  else
  {
    objc_msgSend(MEMORY[0x24BDD1448], "currentHandler");
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "NSString *getCNContactPhoneNumbersKey(void)");
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v18, "handleFailureInFunction:file:lineNumber:description:", v19, CFSTR("WFContactsUtilities.m"), 15, CFSTR("%s"), dlerror());
  }

  __break(1u);
}

void sub_20BC74248(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void *ContactsLibrary_20018()
{
  void *v0;
  void *v2;
  void *v3;

  if (!ContactsLibraryCore_frameworkLibrary_20033)
    ContactsLibraryCore_frameworkLibrary_20033 = _sl_dlopen();
  v0 = (void *)ContactsLibraryCore_frameworkLibrary_20033;
  if (!ContactsLibraryCore_frameworkLibrary_20033)
  {
    objc_msgSend(MEMORY[0x24BDD1448], "currentHandler");
    v0 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "void *ContactsLibrary(void)");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v2, CFSTR("WFContactsUtilities.m"), 14, CFSTR("%s"), 0);

    __break(1u);
    free(v3);
  }
  return v0;
}

id WFPredicateForEnablingPerson(void *a1)
{
  id v1;
  void *v2;
  void *v3;

  v1 = a1;
  if (objc_msgSend(v1, "count"))
  {
    objc_msgSend(v1, "if_map:", &__block_literal_global_20037);
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x24BDD14C0], "orPredicateWithSubpredicates:", v2);
    v3 = (void *)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    objc_msgSend(MEMORY[0x24BDD1758], "predicateWithValue:", 1);
    v3 = (void *)objc_claimAutoreleasedReturnValue();
  }

  return v3;
}

id WFPredicateForSelectionOfPerson(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  _QWORD v5[4];
  id v6;

  v1 = a1;
  if (objc_msgSend(v1, "count"))
  {
    v5[0] = MEMORY[0x24BDAC760];
    v5[1] = 3221225472;
    v5[2] = __WFPredicateForSelectionOfPerson_block_invoke;
    v5[3] = &unk_24C4E31A8;
    v6 = v1;
    objc_msgSend(v6, "if_map:", v5);
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x24BDD14C0], "orPredicateWithSubpredicates:", v2);
    v3 = (void *)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    objc_msgSend(MEMORY[0x24BDD1758], "predicateWithValue:", 1);
    v3 = (void *)objc_claimAutoreleasedReturnValue();
  }

  return v3;
}

id getFPSandboxingURLWrapperClass()
{
  void *v0;
  id v1;
  _QWORD v3[5];
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = 0;
  v5 = &v4;
  v6 = 0x2050000000;
  v0 = (void *)getFPSandboxingURLWrapperClass_softClass;
  v7 = getFPSandboxingURLWrapperClass_softClass;
  if (!getFPSandboxingURLWrapperClass_softClass)
  {
    v3[0] = MEMORY[0x24BDAC760];
    v3[1] = 3221225472;
    v3[2] = __getFPSandboxingURLWrapperClass_block_invoke;
    v3[3] = &unk_24C4E3118;
    v3[4] = &v4;
    __getFPSandboxingURLWrapperClass_block_invoke((uint64_t)v3);
    v0 = (void *)v5[3];
  }
  v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_20BC74DA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class __getFPSandboxingURLWrapperClass_block_invoke(uint64_t a1)
{
  Class result;
  void *v3;
  void *v4;
  void *v5;

  if (!FileProviderLibraryCore_frameworkLibrary_20092)
    FileProviderLibraryCore_frameworkLibrary_20092 = _sl_dlopen();
  if (!FileProviderLibraryCore_frameworkLibrary_20092)
  {
    objc_msgSend(MEMORY[0x24BDD1448], "currentHandler");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "void *FileProviderLibrary(void)");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, CFSTR("WFSecurityScopedFileCoder.m"), 18, CFSTR("%s"), 0);

    goto LABEL_8;
  }
  result = objc_getClass("FPSandboxingURLWrapper");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    objc_msgSend(MEMORY[0x24BDD1448], "currentHandler");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "Class getFPSandboxingURLWrapperClass(void)_block_invoke");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v5, CFSTR("WFSecurityScopedFileCoder.m"), 19, CFSTR("Unable to find class %s"), "FPSandboxingURLWrapper");

LABEL_8:
    __break(1u);
  }
  getFPSandboxingURLWrapperClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t handle_mime(uint64_t a1, __int16 a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  char v18;

  if ((a2 & 0x10) != 0)
  {
    result = file_printf(a1, "inode/%s", a3, a4, a5, a6, a7, a8, a3);
    if ((_DWORD)result == -1)
      return result;
    if ((a2 & 0x400) == 0)
      return 0;
    result = file_printf(a1, "; charset=", v11, v12, v13, v14, v15, v16, v18);
    if ((_DWORD)result == -1)
      return result;
LABEL_7:
    result = file_printf(a1, "binary", a3, a4, a5, a6, a7, a8, v17);
    if ((_DWORD)result == -1)
      return result;
    return 0;
  }
  if ((a2 & 0x400) != 0)
    goto LABEL_7;
  return 0;
}

uint64_t bad_link(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v8;
  int v11;
  uint64_t result;
  char v13;

  v8 = a3;
  v11 = *(_DWORD *)(a1 + 68);
  if ((v11 & 0x10) == 0
    || (result = file_printf(a1, "inode/symlink", a3, a4, a5, a6, a7, a8, v13), (_DWORD)result != -1))
  {
    if ((v11 & 0x410) != 0)
      return 1;
    if ((*(_BYTE *)(a1 + 69) & 2) != 0)
    {
      file_error(a1, a2, "broken symbolic link to %s", a4, a5, a6, a7, a8, v8);
      return 0xFFFFFFFFLL;
    }
    else
    {
      result = file_printf(a1, "broken symbolic link to %s", a3, a4, a5, a6, a7, a8, v8);
      if ((_DWORD)result != -1)
        return 1;
    }
  }
  return result;
}

id WFURLSchemesInBundle(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  _BYTE v14[128];
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v1 = a1;
  v2 = (void *)objc_opt_new();
  v10 = 0u;
  v11 = 0u;
  v12 = 0u;
  v13 = 0u;
  objc_msgSend(v1, "objectForInfoDictionaryKey:", CFSTR("CFBundleURLTypes"), 0);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
  if (v4)
  {
    v5 = v4;
    v6 = *(_QWORD *)v11;
    do
    {
      v7 = 0;
      do
      {
        if (*(_QWORD *)v11 != v6)
          objc_enumerationMutation(v3);
        objc_msgSend(*(id *)(*((_QWORD *)&v10 + 1) + 8 * v7), "objectForKey:", CFSTR("CFBundleURLSchemes"));
        v8 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v2, "addObjectsFromArray:", v8);

        ++v7;
      }
      while (v5 != v7);
      v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
    }
    while (v5);
  }

  return v2;
}

id getMKMapItemClass_21444()
{
  void *v0;
  id v1;
  _QWORD v3[5];
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = 0;
  v5 = &v4;
  v6 = 0x2050000000;
  v0 = (void *)getMKMapItemClass_softClass_21445;
  v7 = getMKMapItemClass_softClass_21445;
  if (!getMKMapItemClass_softClass_21445)
  {
    v3[0] = MEMORY[0x24BDAC760];
    v3[1] = 3221225472;
    v3[2] = __getMKMapItemClass_block_invoke_21446;
    v3[3] = &unk_24C4E3118;
    v3[4] = &v4;
    __getMKMapItemClass_block_invoke_21446((uint64_t)v3);
    v0 = (void *)v5[3];
  }
  v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_20BC7C6C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void __getMKMapItemClass_block_invoke_21446(uint64_t a1)
{
  void *v2;
  void *v3;

  MapKitLibrary_21447();
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = objc_getClass("MKMapItem");
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    getMKMapItemClass_softClass_21445 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  }
  else
  {
    objc_msgSend(MEMORY[0x24BDD1448], "currentHandler");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "Class getMKMapItemClass(void)_block_invoke");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, CFSTR("WFLocationContentItem.m"), 34, CFSTR("Unable to find class %s"), "MKMapItem");

    __break(1u);
  }
}

void *MapKitLibrary_21447()
{
  void *v0;
  void *v2;
  void *v3;

  if (!MapKitLibraryCore_frameworkLibrary_21454)
    MapKitLibraryCore_frameworkLibrary_21454 = _sl_dlopen();
  v0 = (void *)MapKitLibraryCore_frameworkLibrary_21454;
  if (!MapKitLibraryCore_frameworkLibrary_21454)
  {
    objc_msgSend(MEMORY[0x24BDD1448], "currentHandler");
    v0 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "void *MapKitLibrary(void)");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v2, CFSTR("WFLocationContentItem.m"), 31, CFSTR("%s"), 0);

    __break(1u);
    free(v3);
  }
  return v0;
}

id getCLLocationClass_21474()
{
  void *v0;
  id v1;
  _QWORD v3[5];
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = 0;
  v5 = &v4;
  v6 = 0x2050000000;
  v0 = (void *)getCLLocationClass_softClass_21475;
  v7 = getCLLocationClass_softClass_21475;
  if (!getCLLocationClass_softClass_21475)
  {
    v3[0] = MEMORY[0x24BDAC760];
    v3[1] = 3221225472;
    v3[2] = __getCLLocationClass_block_invoke_21476;
    v3[3] = &unk_24C4E3118;
    v3[4] = &v4;
    __getCLLocationClass_block_invoke_21476((uint64_t)v3);
    v0 = (void *)v5[3];
  }
  v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_20BC7CB20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void __getCLLocationClass_block_invoke_21476(uint64_t a1)
{
  void *v2;
  void *v3;

  CoreLocationLibrary_21477();
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = objc_getClass("CLLocation");
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    getCLLocationClass_softClass_21475 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  }
  else
  {
    objc_msgSend(MEMORY[0x24BDD1448], "currentHandler");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "Class getCLLocationClass(void)_block_invoke");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, CFSTR("WFLocationContentItem.m"), 27, CFSTR("Unable to find class %s"), "CLLocation");

    __break(1u);
  }
}

void CoreLocationLibrary_21477()
{
  void *v0;
  void *v1;
  void *v2;

  if (!CoreLocationLibraryCore_frameworkLibrary_21480)
    CoreLocationLibraryCore_frameworkLibrary_21480 = _sl_dlopen();
  if (!CoreLocationLibraryCore_frameworkLibrary_21480)
  {
    objc_msgSend(MEMORY[0x24BDD1448], "currentHandler");
    v0 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "void *CoreLocationLibrary(void)");
    v1 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v1, CFSTR("WFLocationContentItem.m"), 26, CFSTR("%s"), 0);

    __break(1u);
    free(v2);
  }
}

id getCLPlacemarkClass()
{
  void *v0;
  id v1;
  _QWORD v3[5];
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = 0;
  v5 = &v4;
  v6 = 0x2050000000;
  v0 = (void *)getCLPlacemarkClass_softClass_21548;
  v7 = getCLPlacemarkClass_softClass_21548;
  if (!getCLPlacemarkClass_softClass_21548)
  {
    v3[0] = MEMORY[0x24BDAC760];
    v3[1] = 3221225472;
    v3[2] = __getCLPlacemarkClass_block_invoke_21549;
    v3[3] = &unk_24C4E3118;
    v3[4] = &v4;
    __getCLPlacemarkClass_block_invoke_21549((uint64_t)v3);
    v0 = (void *)v5[3];
  }
  v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_20BC7DAE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id getCLGeocoderClass()
{
  void *v0;
  id v1;
  _QWORD v3[5];
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = 0;
  v5 = &v4;
  v6 = 0x2050000000;
  v0 = (void *)getCLGeocoderClass_softClass_21545;
  v7 = getCLGeocoderClass_softClass_21545;
  if (!getCLGeocoderClass_softClass_21545)
  {
    v3[0] = MEMORY[0x24BDAC760];
    v3[1] = 3221225472;
    v3[2] = __getCLGeocoderClass_block_invoke_21546;
    v3[3] = &unk_24C4E3118;
    v3[4] = &v4;
    __getCLGeocoderClass_block_invoke_21546((uint64_t)v3);
    v0 = (void *)v5[3];
  }
  v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_20BC7DBA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_20BC7E124(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void __getMKLocalSearchRequestClass_block_invoke_21534(uint64_t a1)
{
  void *v2;
  void *v3;

  MapKitLibrary_21447();
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = objc_getClass("MKLocalSearchRequest");
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    getMKLocalSearchRequestClass_softClass_21533 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  }
  else
  {
    objc_msgSend(MEMORY[0x24BDD1448], "currentHandler");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "Class getMKLocalSearchRequestClass(void)_block_invoke");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, CFSTR("WFLocationContentItem.m"), 32, CFSTR("Unable to find class %s"), "MKLocalSearchRequest");

    __break(1u);
  }
}

void __getMKLocalSearchClass_block_invoke_21536(uint64_t a1)
{
  void *v2;
  void *v3;

  MapKitLibrary_21447();
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = objc_getClass("MKLocalSearch");
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    getMKLocalSearchClass_softClass_21535 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  }
  else
  {
    objc_msgSend(MEMORY[0x24BDD1448], "currentHandler");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "Class getMKLocalSearchClass(void)_block_invoke");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, CFSTR("WFLocationContentItem.m"), 33, CFSTR("Unable to find class %s"), "MKLocalSearch");

    __break(1u);
  }
}

id getMKPlacemarkClass_21541()
{
  void *v0;
  id v1;
  _QWORD v3[5];
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = 0;
  v5 = &v4;
  v6 = 0x2050000000;
  v0 = (void *)getMKPlacemarkClass_softClass_21542;
  v7 = getMKPlacemarkClass_softClass_21542;
  if (!getMKPlacemarkClass_softClass_21542)
  {
    v3[0] = MEMORY[0x24BDAC760];
    v3[1] = 3221225472;
    v3[2] = __getMKPlacemarkClass_block_invoke_21543;
    v3[3] = &unk_24C4E3118;
    v3[4] = &v4;
    __getMKPlacemarkClass_block_invoke_21543((uint64_t)v3);
    v0 = (void *)v5[3];
  }
  v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_20BC7E8E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void __getMKPlacemarkClass_block_invoke_21543(uint64_t a1)
{
  void *v2;
  void *v3;

  MapKitLibrary_21447();
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = objc_getClass("MKPlacemark");
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    getMKPlacemarkClass_softClass_21542 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  }
  else
  {
    objc_msgSend(MEMORY[0x24BDD1448], "currentHandler");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "Class getMKPlacemarkClass(void)_block_invoke");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, CFSTR("WFLocationContentItem.m"), 39, CFSTR("Unable to find class %s"), "MKPlacemark");

    __break(1u);
  }
}

void __getCLGeocoderClass_block_invoke_21546(uint64_t a1)
{
  void *v2;
  void *v3;

  CoreLocationLibrary_21477();
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = objc_getClass("CLGeocoder");
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    getCLGeocoderClass_softClass_21545 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  }
  else
  {
    objc_msgSend(MEMORY[0x24BDD1448], "currentHandler");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "Class getCLGeocoderClass(void)_block_invoke");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, CFSTR("WFLocationContentItem.m"), 29, CFSTR("Unable to find class %s"), "CLGeocoder");

    __break(1u);
  }
}

void __getCLPlacemarkClass_block_invoke_21549(uint64_t a1)
{
  void *v2;
  void *v3;

  CoreLocationLibrary_21477();
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = objc_getClass("CLPlacemark");
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    getCLPlacemarkClass_softClass_21548 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  }
  else
  {
    objc_msgSend(MEMORY[0x24BDD1448], "currentHandler");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "Class getCLPlacemarkClass(void)_block_invoke");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, CFSTR("WFLocationContentItem.m"), 28, CFSTR("Unable to find class %s"), "CLPlacemark");

    __break(1u);
  }
}

void sub_20BC7F074(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_list va;

  va_start(va, a12);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void __getMKMapSnapshotOptionsClass_block_invoke(uint64_t a1)
{
  void *v2;
  void *v3;

  MapKitLibrary_21447();
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = objc_getClass("MKMapSnapshotOptions");
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    getMKMapSnapshotOptionsClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  }
  else
  {
    objc_msgSend(MEMORY[0x24BDD1448], "currentHandler");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "Class getMKMapSnapshotOptionsClass(void)_block_invoke");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, CFSTR("WFLocationContentItem.m"), 36, CFSTR("Unable to find class %s"), "MKMapSnapshotOptions");

    __break(1u);
  }
}

void __getMKMapSnapshotCustomFeatureAnnotationClass_block_invoke(uint64_t a1)
{
  void *v2;
  void *v3;

  MapKitLibrary_21447();
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = objc_getClass("MKMapSnapshotCustomFeatureAnnotation");
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    getMKMapSnapshotCustomFeatureAnnotationClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  }
  else
  {
    objc_msgSend(MEMORY[0x24BDD1448], "currentHandler");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "Class getMKMapSnapshotCustomFeatureAnnotationClass(void)_block_invoke");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, CFSTR("WFLocationContentItem.m"), 35, CFSTR("Unable to find class %s"), "MKMapSnapshotCustomFeatureAnnotation");

    __break(1u);
  }
}

void __getMKMapSnapshotterClass_block_invoke(uint64_t a1)
{
  void *v2;
  void *v3;

  MapKitLibrary_21447();
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = objc_getClass("MKMapSnapshotter");
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    getMKMapSnapshotterClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  }
  else
  {
    objc_msgSend(MEMORY[0x24BDD1448], "currentHandler");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "Class getMKMapSnapshotterClass(void)_block_invoke");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, CFSTR("WFLocationContentItem.m"), 37, CFSTR("Unable to find class %s"), "MKMapSnapshotter");

    __break(1u);
  }
}

void *WFAllWalletTransactionMerchantTypes()
{
  return &unk_24C5124A0;
}

void sub_20BC8110C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void *UIFoundationLibrary_21944()
{
  void *v0;
  void *v2;
  void *v3;

  if (!UIFoundationLibraryCore_frameworkLibrary_21957)
    UIFoundationLibraryCore_frameworkLibrary_21957 = _sl_dlopen();
  v0 = (void *)UIFoundationLibraryCore_frameworkLibrary_21957;
  if (!UIFoundationLibraryCore_frameworkLibrary_21957)
  {
    objc_msgSend(MEMORY[0x24BDD1448], "currentHandler");
    v0 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "void *UIFoundationLibrary(void)");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v2, CFSTR("WFNSItemProviderContentItem.m"), 20, CFSTR("%s"), 0);

    __break(1u);
    free(v3);
  }
  return v0;
}

void sub_20BC81790(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__21973(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__21974(uint64_t a1)
{

}

void sub_20BC83D40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_20BC84424(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class __getMPMediaItemCollectionClass_block_invoke(uint64_t a1)
{
  Class result;
  void *v3;
  void *v4;
  void *v5;

  if (!MediaPlayerLibraryCore_frameworkLibrary_22600)
    MediaPlayerLibraryCore_frameworkLibrary_22600 = _sl_dlopen();
  if (!MediaPlayerLibraryCore_frameworkLibrary_22600)
  {
    objc_msgSend(MEMORY[0x24BDD1448], "currentHandler");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "void *MediaPlayerLibrary(void)");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, CFSTR("WFMediaCollectionContentItem.m"), 14, CFSTR("%s"), 0);

    goto LABEL_8;
  }
  result = objc_getClass("MPMediaItemCollection");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    objc_msgSend(MEMORY[0x24BDD1448], "currentHandler");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "Class getMPMediaItemCollectionClass(void)_block_invoke");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v5, CFSTR("WFMediaCollectionContentItem.m"), 15, CFSTR("Unable to find class %s"), "MPMediaItemCollection");

LABEL_8:
    __break(1u);
  }
  getMPMediaItemCollectionClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

id getFIUIWorkoutActivityTypeClass()
{
  void *v0;
  id v1;
  _QWORD v3[5];
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = 0;
  v5 = &v4;
  v6 = 0x2050000000;
  v0 = (void *)getFIUIWorkoutActivityTypeClass_softClass;
  v7 = getFIUIWorkoutActivityTypeClass_softClass;
  if (!getFIUIWorkoutActivityTypeClass_softClass)
  {
    v3[0] = MEMORY[0x24BDAC760];
    v3[1] = 3221225472;
    v3[2] = __getFIUIWorkoutActivityTypeClass_block_invoke;
    v3[3] = &unk_24C4E3118;
    v3[4] = &v4;
    __getFIUIWorkoutActivityTypeClass_block_invoke((uint64_t)v3);
    v0 = (void *)v5[3];
  }
  v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_20BC84730(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class __getFIUIWorkoutActivityTypeClass_block_invoke(uint64_t a1)
{
  Class result;
  void *v3;
  void *v4;
  void *v5;

  if (!FitnessUILibraryCore_frameworkLibrary)
    FitnessUILibraryCore_frameworkLibrary = _sl_dlopen();
  if (!FitnessUILibraryCore_frameworkLibrary)
  {
    objc_msgSend(MEMORY[0x24BDD1448], "currentHandler");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "void *FitnessUILibrary(void)");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, CFSTR("WFFitnessWorkoutActivityTypeContentItem.m"), 14, CFSTR("%s"), 0);

    goto LABEL_8;
  }
  result = objc_getClass("FIUIWorkoutActivityType");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    objc_msgSend(MEMORY[0x24BDD1448], "currentHandler");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "Class getFIUIWorkoutActivityTypeClass(void)_block_invoke");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v5, CFSTR("WFFitnessWorkoutActivityTypeContentItem.m"), 15, CFSTR("Unable to find class %s"), "FIUIWorkoutActivityType");

LABEL_8:
    __break(1u);
  }
  getFIUIWorkoutActivityTypeClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

void sub_20BC87B38(_Unwind_Exception *a1)
{
  objc_end_catch();
  _Unwind_Resume(a1);
}

void sub_20BC87B48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  _Block_object_dispose(&a29, 8);
  _Unwind_Resume(a1);
}

void sub_20BC87C14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void __getMPMediaItemClass_block_invoke_23102(uint64_t a1)
{
  void *v2;
  void *v3;

  MediaPlayerLibrary_23103();
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = objc_getClass("MPMediaItem");
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    getMPMediaItemClass_softClass_23101 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  }
  else
  {
    objc_msgSend(MEMORY[0x24BDD1448], "currentHandler");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "Class getMPMediaItemClass(void)_block_invoke");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, CFSTR("WFMPMediaLibraryFiltering.m"), 18, CFSTR("Unable to find class %s"), "MPMediaItem");

    __break(1u);
  }
}

void *MediaPlayerLibrary_23103()
{
  void *v0;
  void *v2;
  void *v3;

  if (!MediaPlayerLibraryCore_frameworkLibrary_23112)
    MediaPlayerLibraryCore_frameworkLibrary_23112 = _sl_dlopen();
  v0 = (void *)MediaPlayerLibraryCore_frameworkLibrary_23112;
  if (!MediaPlayerLibraryCore_frameworkLibrary_23112)
  {
    objc_msgSend(MEMORY[0x24BDD1448], "currentHandler");
    v0 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "void *MediaPlayerLibrary(void)");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v2, CFSTR("WFMPMediaLibraryFiltering.m"), 15, CFSTR("%s"), 0);

    __break(1u);
    free(v3);
  }
  return v0;
}

id WFMPMediaTypeMapping()
{
  void *v0;
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  _QWORD v9[7];
  _QWORD v10[8];

  v10[7] = *MEMORY[0x24BDAC8D0];
  v9[0] = &unk_24C510FA0;
  WFLocalizedContentPropertyPossibleValueMarker(CFSTR("Music"));
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  v10[0] = v0;
  v9[1] = &unk_24C510FB8;
  WFLocalizedContentPropertyPossibleValueMarker(CFSTR("Podcast"));
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  v10[1] = v1;
  v9[2] = &unk_24C510FD0;
  WFLocalizedContentPropertyPossibleValueMarker(CFSTR("Audiobook"));
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v10[2] = v2;
  v9[3] = &unk_24C510FE8;
  WFLocalizedContentPropertyPossibleValueMarker(CFSTR("iTunes U"));
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v10[3] = v3;
  v9[4] = &unk_24C511000;
  WFLocalizedContentPropertyPossibleValueMarker(CFSTR("Movie"));
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v10[4] = v4;
  v9[5] = &unk_24C511018;
  WFLocalizedContentPropertyPossibleValueMarker(CFSTR("TV Show"));
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v10[5] = v5;
  v9[6] = &unk_24C511030;
  WFLocalizedContentPropertyPossibleValueMarker(CFSTR("Music Video"));
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v10[6] = v6;
  objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", v10, v9, 7);
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  return v7;
}

void __getMPMediaPropertyPredicateClass_block_invoke(uint64_t a1)
{
  void *v2;
  void *v3;

  MediaPlayerLibrary_23103();
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = objc_getClass("MPMediaPropertyPredicate");
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    getMPMediaPropertyPredicateClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  }
  else
  {
    objc_msgSend(MEMORY[0x24BDD1448], "currentHandler");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "Class getMPMediaPropertyPredicateClass(void)_block_invoke");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, CFSTR("WFMPMediaLibraryFiltering.m"), 16, CFSTR("Unable to find class %s"), "MPMediaPropertyPredicate");

    __break(1u);
  }
}

id getWFMediaLibraryFilteringLogObject()
{
  if (getWFMediaLibraryFilteringLogObject_onceToken != -1)
    dispatch_once(&getWFMediaLibraryFilteringLogObject_onceToken, &__block_literal_global_23131);
  return (id)getWFMediaLibraryFilteringLogObject_log;
}

void __getMPMediaQueryClass_block_invoke_23127(uint64_t a1)
{
  void *v2;
  void *v3;

  MediaPlayerLibrary_23103();
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = objc_getClass("MPMediaQuery");
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    getMPMediaQueryClass_softClass_23126 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  }
  else
  {
    objc_msgSend(MEMORY[0x24BDD1448], "currentHandler");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "Class getMPMediaQueryClass(void)_block_invoke");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, CFSTR("WFMPMediaLibraryFiltering.m"), 17, CFSTR("Unable to find class %s"), "MPMediaQuery");

    __break(1u);
  }
}

void __getWFMediaLibraryFilteringLogObject_block_invoke()
{
  os_log_t v0;
  void *v1;

  v0 = os_log_create((const char *)*MEMORY[0x24BEC1968], "MediaLibraryFiltering");
  v1 = (void *)getWFMediaLibraryFilteringLogObject_log;
  getWFMediaLibraryFilteringLogObject_log = (uint64_t)v0;

}

void sub_20BC885E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_20BC88774(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void *__Block_byref_object_copy__23174(uint64_t a1, uint64_t a2)
{
  void *result;

  result = _Block_copy(*(const void **)(a2 + 40));
  *(_QWORD *)(a1 + 40) = result;
  return result;
}

void __Block_byref_object_dispose__23175(uint64_t a1)
{

}

id WFEntitlementsForExecutableAtPath(uint64_t a1)
{
  void *v1;
  CFDictionaryRef v2;
  NSObject *v3;
  CFDictionaryRef v5;
  SecStaticCodeRef staticCode;
  uint8_t buf[4];
  const char *v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  staticCode = 0;
  v1 = 0;
  if (!SecStaticCodeCreateWithPath((CFURLRef)objc_msgSend(MEMORY[0x24BDBCF48], "fileURLWithPath:", a1), 0, &staticCode))
  {
    v5 = 0;
    SecCodeCopySigningInformation(staticCode, 4u, &v5);
    CFRelease(staticCode);
    v2 = v5;
    -[__CFDictionary objectForKey:](v5, "objectForKey:", *MEMORY[0x24BDE9258]);
    v1 = (void *)objc_claimAutoreleasedReturnValue();
    if (!v1)
    {
      getWFGeneralLogObject();
      v3 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v3, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)buf = 136315138;
        v8 = "WFEntitlementsForExecutableAtPath";
        _os_log_impl(&dword_20BBAD000, v3, OS_LOG_TYPE_FAULT, "%s Failed to retrieve entitlements of executable", buf, 0xCu);
      }

    }
  }
  return v1;
}

void WFGetContentLocationFromURLActionInput(void *a1, void *a2)
{
  id v3;
  id v4;
  id v5;
  _QWORD v6[4];
  id v7;

  v3 = a2;
  v6[0] = MEMORY[0x24BDAC760];
  v6[1] = 3221225472;
  v6[2] = __WFGetContentLocationFromURLActionInput_block_invoke;
  v6[3] = &unk_24C4E3468;
  v7 = v3;
  v4 = v3;
  v5 = a1;
  objc_msgSend(v5, "getObjectRepresentations:forClass:", v6, objc_opt_class());

}

id WFRepresentationsFromCoercionHandlerResult(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  _QWORD v5[2];

  v5[1] = *MEMORY[0x24BDAC8D0];
  v1 = a1;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    objc_msgSend(v1, "if_map:", &__block_literal_global_23633);
    v2 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else if (v1)
  {
    WFRepresentationFromCoercionHandlerResultObject(v1);
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    v5[0] = v3;
    objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:count:", v5, 1);
    v2 = (void *)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    v2 = 0;
  }

  return v2;
}

id WFRepresentationFromCoercionHandlerResultObject(void *a1)
{
  id v1;
  id v2;
  void *v3;
  void *v5;
  void *v6;

  v1 = a1;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    objc_msgSend(MEMORY[0x24BDD1448], "currentHandler");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "WFRepresentation * _Nonnull WFRepresentationFromCoercionHandlerResultObject(id  _Nonnull __strong)");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "handleFailureInFunction:file:lineNumber:description:", v6, CFSTR("WFCoercion.m"), 127, CFSTR("The result of a coercion must be a representation, not a WFContentItem."));

  }
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    v2 = v1;
  }
  else
  {
    +[WFObjectRepresentation object:](WFObjectRepresentation, "object:", v1);
    v2 = (id)objc_claimAutoreleasedReturnValue();
  }
  v3 = v2;

  return v3;
}

uint64_t WFCatalystHelperXPCInterface()
{
  return objc_msgSend(MEMORY[0x24BDD1990], "interfaceWithProtocol:", &unk_25475FE80);
}

void sub_20BC8D970(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v10;
  va_list va;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  va_list va1;

  va_start(va1, a9);
  va_start(va, a9);
  v10 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__23749(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__23750(uint64_t a1)
{

}

void *__Block_byref_object_copy__1(uint64_t a1, uint64_t a2)
{
  void *result;

  result = _Block_copy(*(const void **)(a2 + 40));
  *(_QWORD *)(a1 + 40) = result;
  return result;
}

void __Block_byref_object_dispose__2(uint64_t a1)
{

}

uint64_t sub_20BC8DBE4()
{
  return MEMORY[0x24BDCFA28]();
}

uint64_t sub_20BC8DBF0()
{
  return MEMORY[0x24BEE0AD0]();
}

uint64_t sub_20BC8DBFC()
{
  return MEMORY[0x24BDCFBC8]();
}

uint64_t sub_20BC8DC08()
{
  return MEMORY[0x24BDCFCE8]();
}

CFTypeID CFBooleanGetTypeID(void)
{
  return MEMORY[0x24BDBBA18]();
}

Boolean CFBooleanGetValue(CFBooleanRef BOOLean)
{
  return MEMORY[0x24BDBBA20](BOOLean);
}

CFTypeID CFGetTypeID(CFTypeRef cf)
{
  return MEMORY[0x24BDBBEF8](cf);
}

void CFRelease(CFTypeRef cf)
{
  MEMORY[0x24BDBC298](cf);
}

CFTypeRef CFRetain(CFTypeRef cf)
{
  return (CFTypeRef)MEMORY[0x24BDBC2A8](cf);
}

void CFStringAppendCharacters(CFMutableStringRef theString, const UniChar *chars, CFIndex numChars)
{
  MEMORY[0x24BDBC4B8](theString, chars, numChars);
}

const UniChar *__cdecl CFStringGetCharactersPtr(CFStringRef theString)
{
  return (const UniChar *)MEMORY[0x24BDBC628](theString);
}

uint64_t CFUniCharIsMemberOf()
{
  return MEMORY[0x24BDBC910]();
}

CGAffineTransform *__cdecl CGAffineTransformInvert(CGAffineTransform *__return_ptr retstr, CGAffineTransform *t)
{
  return (CGAffineTransform *)MEMORY[0x24BDBD8C0](retstr, t);
}

BOOL CGAffineTransformIsIdentity(CGAffineTransform *t)
{
  return MEMORY[0x24BDBD8C8](t);
}

CGAffineTransform *__cdecl CGAffineTransformMakeScale(CGAffineTransform *__return_ptr retstr, CGFloat sx, CGFloat sy)
{
  return (CGAffineTransform *)MEMORY[0x24BDBD8E0](retstr, sx, sy);
}

CGContextRef CGBitmapContextCreate(void *data, size_t width, size_t height, size_t bitsPerComponent, size_t bytesPerRow, CGColorSpaceRef space, uint32_t bitmapInfo)
{
  return (CGContextRef)MEMORY[0x24BDBD918](data, width, height, bitsPerComponent, bytesPerRow, space, *(_QWORD *)&bitmapInfo);
}

CGImageRef CGBitmapContextCreateImage(CGContextRef context)
{
  return (CGImageRef)MEMORY[0x24BDBD920](context);
}

CGColorSpaceRef CGColorSpaceCreateDeviceRGB(void)
{
  return (CGColorSpaceRef)MEMORY[0x24BDBDB88]();
}

void CGColorSpaceRelease(CGColorSpaceRef space)
{
  MEMORY[0x24BDBDC60](space);
}

void CGContextConcatCTM(CGContextRef c, CGAffineTransform *transform)
{
  MEMORY[0x24BDBDD50](c, transform);
}

void CGContextDrawImage(CGContextRef c, CGRect rect, CGImageRef image)
{
  MEMORY[0x24BDBDDD8](c, image, (__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
}

void CGContextDrawPDFPage(CGContextRef c, CGPDFPageRef page)
{
  MEMORY[0x24BDBDE00](c, page);
}

void CGContextFillRect(CGContextRef c, CGRect rect)
{
  MEMORY[0x24BDBDE70](c, (__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
}

void CGContextRelease(CGContextRef c)
{
  MEMORY[0x24BDBDF30](c);
}

void CGContextScaleCTM(CGContextRef c, CGFloat sx, CGFloat sy)
{
  MEMORY[0x24BDBDF78](c, sx, sy);
}

void CGContextSetInterpolationQuality(CGContextRef c, CGInterpolationQuality quality)
{
  MEMORY[0x24BDBE018](c, *(_QWORD *)&quality);
}

void CGContextSetRGBFillColor(CGContextRef c, CGFloat red, CGFloat green, CGFloat blue, CGFloat alpha)
{
  MEMORY[0x24BDBE060](c, red, green, blue, alpha);
}

void CGContextSetRenderingIntent(CGContextRef c, CGColorRenderingIntent intent)
{
  MEMORY[0x24BDBE070](c, *(_QWORD *)&intent);
}

void CGContextTranslateCTM(CGContextRef c, CGFloat tx, CGFloat ty)
{
  MEMORY[0x24BDBE130](c, tx, ty);
}

CGDataProviderRef CGDataProviderCreateWithCFData(CFDataRef data)
{
  return (CGDataProviderRef)MEMORY[0x24BDBE180](data);
}

void CGDataProviderRelease(CGDataProviderRef provider)
{
  MEMORY[0x24BDBE1C8](provider);
}

void CGImageDestinationAddImage(CGImageDestinationRef idst, CGImageRef image, CFDictionaryRef properties)
{
  MEMORY[0x24BDD9048](idst, image, properties);
}

void CGImageDestinationAddImageFromSource(CGImageDestinationRef idst, CGImageSourceRef isrc, size_t index, CFDictionaryRef properties)
{
  MEMORY[0x24BDD9058](idst, isrc, index, properties);
}

BOOL CGImageDestinationCopyImageSource(CGImageDestinationRef idst, CGImageSourceRef isrc, CFDictionaryRef options, CFErrorRef *err)
{
  return MEMORY[0x24BDD9068](idst, isrc, options, err);
}

CFArrayRef CGImageDestinationCopyTypeIdentifiers(void)
{
  return (CFArrayRef)MEMORY[0x24BDD9070]();
}

CGImageDestinationRef CGImageDestinationCreateWithData(CFMutableDataRef data, CFStringRef type, size_t count, CFDictionaryRef options)
{
  return (CGImageDestinationRef)MEMORY[0x24BDD9078](data, type, count, options);
}

CGImageDestinationRef CGImageDestinationCreateWithURL(CFURLRef url, CFStringRef type, size_t count, CFDictionaryRef options)
{
  return (CGImageDestinationRef)MEMORY[0x24BDD9088](url, type, count, options);
}

BOOL CGImageDestinationFinalize(CGImageDestinationRef idst)
{
  return MEMORY[0x24BDD9090](idst);
}

void CGImageDestinationSetProperties(CGImageDestinationRef idst, CFDictionaryRef properties)
{
  MEMORY[0x24BDD9098](idst, properties);
}

size_t CGImageGetHeight(CGImageRef image)
{
  return MEMORY[0x24BDBE680](image);
}

size_t CGImageGetWidth(CGImageRef image)
{
  return MEMORY[0x24BDBE6E0](image);
}

void CGImageRelease(CGImageRef image)
{
  MEMORY[0x24BDBE770](image);
}

CFDictionaryRef CGImageSourceCopyProperties(CGImageSourceRef isrc, CFDictionaryRef options)
{
  return (CFDictionaryRef)MEMORY[0x24BDD9140](isrc, options);
}

CFDictionaryRef CGImageSourceCopyPropertiesAtIndex(CGImageSourceRef isrc, size_t index, CFDictionaryRef options)
{
  return (CFDictionaryRef)MEMORY[0x24BDD9148](isrc, index, options);
}

CGImageRef CGImageSourceCreateImageAtIndex(CGImageSourceRef isrc, size_t index, CFDictionaryRef options)
{
  return (CGImageRef)MEMORY[0x24BDD9158](isrc, index, options);
}

CGImageRef CGImageSourceCreateThumbnailAtIndex(CGImageSourceRef isrc, size_t index, CFDictionaryRef options)
{
  return (CGImageRef)MEMORY[0x24BDD9168](isrc, index, options);
}

CGImageSourceRef CGImageSourceCreateWithData(CFDataRef data, CFDictionaryRef options)
{
  return (CGImageSourceRef)MEMORY[0x24BDD9170](data, options);
}

CGImageSourceRef CGImageSourceCreateWithURL(CFURLRef url, CFDictionaryRef options)
{
  return (CGImageSourceRef)MEMORY[0x24BDD9180](url, options);
}

size_t CGImageSourceGetCount(CGImageSourceRef isrc)
{
  return MEMORY[0x24BDD9188](isrc);
}

void CGPDFContextSetURLForRect(CGContextRef context, CFURLRef url, CGRect rect)
{
  MEMORY[0x24BDBE938](context, url, (__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
}

CGPDFDocumentRef CGPDFDocumentCreateWithProvider(CGDataProviderRef provider)
{
  return (CGPDFDocumentRef)MEMORY[0x24BDBEA00](provider);
}

CGPDFDocumentRef CGPDFDocumentCreateWithURL(CFURLRef url)
{
  return (CGPDFDocumentRef)MEMORY[0x24BDBEA08](url);
}

size_t CGPDFDocumentGetNumberOfPages(CGPDFDocumentRef document)
{
  return MEMORY[0x24BDBEA68](document);
}

CGPDFPageRef CGPDFDocumentGetPage(CGPDFDocumentRef document, size_t pageNumber)
{
  return (CGPDFPageRef)MEMORY[0x24BDBEA70](document, pageNumber);
}

void CGPDFDocumentRelease(CGPDFDocumentRef document)
{
  MEMORY[0x24BDBEAC8](document);
}

CGRect CGPDFPageGetBoxRect(CGPDFPageRef page, CGPDFBox box)
{
  double v2;
  double v3;
  double v4;
  double v5;
  CGRect result;

  MEMORY[0x24BDBEBF0](page, *(_QWORD *)&box);
  result.size.height = v5;
  result.size.width = v4;
  result.origin.y = v3;
  result.origin.x = v2;
  return result;
}

CGAffineTransform *__cdecl CGPDFPageGetDrawingTransform(CGAffineTransform *__return_ptr retstr, CGPDFPageRef page, CGPDFBox box, CGRect rect, int rotate, BOOL preserveAspectRatio)
{
  return (CGAffineTransform *)MEMORY[0x24BDBEC08](retstr, page, *(_QWORD *)&box, *(_QWORD *)&rotate, preserveAspectRatio, (__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
}

CGRect CGRectApplyAffineTransform(CGRect rect, CGAffineTransform *t)
{
  double v2;
  double v3;
  double v4;
  double v5;
  CGRect result;

  MEMORY[0x24BDBEFB8](t, (__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  result.size.height = v5;
  result.size.width = v4;
  result.origin.y = v3;
  result.origin.x = v2;
  return result;
}

CGFloat CGRectGetHeight(CGRect rect)
{
  CGFloat result;

  MEMORY[0x24BDBEFE8]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  return result;
}

CGRect CGRectInset(CGRect rect, CGFloat dx, CGFloat dy)
{
  double v3;
  double v4;
  double v5;
  double v6;
  CGRect result;

  MEMORY[0x24BDBF030]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height, dx, dy);
  result.size.height = v6;
  result.size.width = v5;
  result.origin.y = v4;
  result.origin.x = v3;
  return result;
}

uint64_t CPSharedResourcesDirectory()
{
  return MEMORY[0x24BE04728]();
}

uint64_t INFileURLAuditTokenEquals()
{
  return MEMORY[0x24BDD98E0]();
}

uint64_t INFileURLHasAssociatedAuditToken()
{
  return MEMORY[0x24BDD98E8]();
}

uint64_t INFileURLSetMarkedForDeletionOnDeallocation()
{
  return MEMORY[0x24BDD98F0]();
}

Class NSClassFromString(NSString *aClassName)
{
  return (Class)MEMORY[0x24BDD0B80](aClassName);
}

NSZone *NSDefaultMallocZone(void)
{
  return (NSZone *)MEMORY[0x24BDD0BC8]();
}

NSString *NSHomeDirectory(void)
{
  return (NSString *)MEMORY[0x24BDD0DD8]();
}

NSString *__cdecl NSStringFromClass(Class aClass)
{
  return (NSString *)MEMORY[0x24BDD1240](aClass);
}

NSString *__cdecl NSStringFromSelector(SEL aSelector)
{
  return (NSString *)MEMORY[0x24BDD1268](aSelector);
}

NSString *NSTemporaryDirectory(void)
{
  return (NSString *)MEMORY[0x24BDD1280]();
}

OSStatus SecCodeCopySigningInformation(SecStaticCodeRef code, SecCSFlags flags, CFDictionaryRef *information)
{
  return MEMORY[0x24BDE89E0](code, *(_QWORD *)&flags, information);
}

OSStatus SecStaticCodeCreateWithPath(CFURLRef path, SecCSFlags flags, SecStaticCodeRef *staticCode)
{
  return MEMORY[0x24BDE8D28](path, *(_QWORD *)&flags, staticCode);
}

CFTypeRef SecTaskCopyValueForEntitlement(SecTaskRef task, CFStringRef entitlement, CFErrorRef *error)
{
  return (CFTypeRef)MEMORY[0x24BDE8D48](task, entitlement, error);
}

SecTaskRef SecTaskCreateFromSelf(CFAllocatorRef allocator)
{
  return (SecTaskRef)MEMORY[0x24BDE8D70](allocator);
}

CFDictionaryRef UTTypeCopyDeclaration(CFStringRef inUTI)
{
  return (CFDictionaryRef)MEMORY[0x24BDC15B0](inUTI);
}

CFStringRef UTTypeCreatePreferredIdentifierForTag(CFStringRef inTagClass, CFStringRef inTag, CFStringRef inConformingToUTI)
{
  return (CFStringRef)MEMORY[0x24BDC15E0](inTagClass, inTag, inConformingToUTI);
}

uint64_t VCIsInternalBuild()
{
  return MEMORY[0x24BEC17F0]();
}

uint64_t WFShouldReverseLayoutDirection()
{
  return MEMORY[0x24BEC1A50]();
}

void *__cdecl _Block_copy(const void *aBlock)
{
  return (void *)MEMORY[0x24BDAC720](aBlock);
}

void _Block_object_dispose(const void *a1, const int a2)
{
  MEMORY[0x24BDAC730](a1, *(_QWORD *)&a2);
}

void _Block_release(const void *aBlock)
{
  MEMORY[0x24BDAC738](aBlock);
}

uint64_t _CFBundleCopyBundleURLForExecutableURL()
{
  return MEMORY[0x24BDBCF60]();
}

uint64_t _CFMZEnabled()
{
  return MEMORY[0x24BDBD008]();
}

void _Unwind_Resume(_Unwind_Exception *exception_object)
{
  MEMORY[0x24BDAC780](exception_object);
}

void __assert_rtn(const char *a1, const char *a2, int a3, const char *a4)
{
  MEMORY[0x24BDAC7A0](a1, a2, *(_QWORD *)&a3, a4);
}

int __darwin_check_fd_set_overflow(int a1, const void *a2, int a3)
{
  return MEMORY[0x24BDAC7B8](*(_QWORD *)&a1, a2, *(_QWORD *)&a3);
}

int *__error(void)
{
  return (int *)MEMORY[0x24BDAC7D0]();
}

int __maskrune(__darwin_ct_rune_t a1, unint64_t a2)
{
  return MEMORY[0x24BDAC838](*(_QWORD *)&a1, a2);
}

uint64_t __memcpy_chk()
{
  return MEMORY[0x24BDAC848]();
}

uint64_t __strlcat_chk()
{
  return MEMORY[0x24BDAC908]();
}

uint64_t __strlcpy_chk()
{
  return MEMORY[0x24BDAC910]();
}

__darwin_ct_rune_t __tolower(__darwin_ct_rune_t a1)
{
  return MEMORY[0x24BDAC930](*(_QWORD *)&a1);
}

__darwin_ct_rune_t __toupper(__darwin_ct_rune_t a1)
{
  return MEMORY[0x24BDAC938](*(_QWORD *)&a1);
}

uint64_t _dyld_register_for_bulk_image_loads()
{
  return MEMORY[0x24BDACAB8]();
}

void _os_log_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
  MEMORY[0x24BDACB90](dso, log, type, format, buf, *(_QWORD *)&size);
}

uint64_t _sandbox_in_a_container()
{
  return MEMORY[0x24BDACC38]();
}

uint64_t _sl_dlopen()
{
  return MEMORY[0x24BEAE670]();
}

void abort(void)
{
  MEMORY[0x24BDAD008]();
}

int access(const char *a1, int a2)
{
  return MEMORY[0x24BDAD038](a1, *(_QWORD *)&a2);
}

uint32_t arc4random_uniform(uint32_t __upper_bound)
{
  return MEMORY[0x24BDAD170](*(_QWORD *)&__upper_bound);
}

uint64_t archive_entry_free()
{
  return MEMORY[0x24BEDA320]();
}

uint64_t archive_entry_new()
{
  return MEMORY[0x24BEDA350]();
}

uint64_t archive_entry_pathname()
{
  return MEMORY[0x24BEDA360]();
}

uint64_t archive_entry_pathname_w()
{
  return MEMORY[0x24BEDA370]();
}

uint64_t archive_entry_set_ctime()
{
  return MEMORY[0x24BEDA388]();
}

uint64_t archive_entry_set_filetype()
{
  return MEMORY[0x24BEDA398]();
}

uint64_t archive_entry_set_mtime()
{
  return MEMORY[0x24BEDA3B8]();
}

uint64_t archive_entry_set_pathname()
{
  return MEMORY[0x24BEDA3C8]();
}

uint64_t archive_entry_set_perm()
{
  return MEMORY[0x24BEDA3D8]();
}

uint64_t archive_entry_set_size()
{
  return MEMORY[0x24BEDA3E0]();
}

uint64_t archive_entry_size()
{
  return MEMORY[0x24BEDA3F8]();
}

uint64_t archive_errno()
{
  return MEMORY[0x24BEDA428]();
}

uint64_t archive_error_string()
{
  return MEMORY[0x24BEDA430]();
}

uint64_t archive_read_data_skip()
{
  return MEMORY[0x24BEDA470]();
}

uint64_t archive_read_extract()
{
  return MEMORY[0x24BEDA4A8]();
}

uint64_t archive_read_new()
{
  return MEMORY[0x24BEDA4C8]();
}

uint64_t archive_read_next_header()
{
  return MEMORY[0x24BEDA4D0]();
}

uint64_t archive_read_open_filename()
{
  return MEMORY[0x24BEDA4F8]();
}

uint64_t archive_read_open_memory()
{
  return MEMORY[0x24BEDA500]();
}

uint64_t archive_read_support_compression_all()
{
  return MEMORY[0x24BEDA520]();
}

uint64_t archive_read_support_format_all()
{
  return MEMORY[0x24BEDA540]();
}

uint64_t archive_read_support_format_raw()
{
  return MEMORY[0x24BEDA548]();
}

uint64_t archive_write_close()
{
  return MEMORY[0x24BEDA580]();
}

uint64_t archive_write_data()
{
  return MEMORY[0x24BEDA588]();
}

uint64_t archive_write_finish()
{
  return MEMORY[0x24BEDA5B0]();
}

uint64_t archive_write_header()
{
  return MEMORY[0x24BEDA5C8]();
}

uint64_t archive_write_new()
{
  return MEMORY[0x24BEDA5D0]();
}

uint64_t archive_write_open_filename()
{
  return MEMORY[0x24BEDA5F0]();
}

uint64_t archive_write_set_compression_bzip2()
{
  return MEMORY[0x24BEDA600]();
}

uint64_t archive_write_set_compression_gzip()
{
  return MEMORY[0x24BEDA608]();
}

uint64_t archive_write_set_compression_xz()
{
  return MEMORY[0x24BEDA618]();
}

uint64_t archive_write_set_format()
{
  return MEMORY[0x24BEDA628]();
}

char *__cdecl asctime_r(const tm *a1, char *a2)
{
  return (char *)MEMORY[0x24BDAD180](a1, a2);
}

long double atan(long double __x)
{
  long double result;

  MEMORY[0x24BDAD218](__x);
  return result;
}

void *__cdecl bsearch(const void *__key, const void *__base, size_t __nel, size_t __width, int (__cdecl *__compar)(const void *, const void *))
{
  return (void *)MEMORY[0x24BDAD310](__key, __base, __nel, __width, __compar);
}

void bzero(void *a1, size_t a2)
{
  MEMORY[0x24BDAD320](a1, a2);
}

BOOL class_addIvar(Class cls, const char *name, size_t size, uint8_t alignment, const char *types)
{
  return MEMORY[0x24BEDCE38](cls, name, size, alignment, types);
}

BOOL class_addMethod(Class cls, SEL name, IMP imp, const char *types)
{
  return MEMORY[0x24BEDCE40](cls, name, imp, types);
}

Method *__cdecl class_copyMethodList(Class cls, unsigned int *outCount)
{
  return (Method *)MEMORY[0x24BEDCE70](cls, outCount);
}

Ivar class_getInstanceVariable(Class cls, const char *name)
{
  return (Ivar)MEMORY[0x24BEDCEB0](cls, name);
}

int close(int a1)
{
  return MEMORY[0x24BDAD9D8](*(_QWORD *)&a1);
}

int closedir(DIR *a1)
{
  return MEMORY[0x24BDAD9F0](a1);
}

uint64_t container_create_or_lookup_path_for_current_user()
{
  return MEMORY[0x24BDADA50]();
}

uint64_t ct_green_tea_logger_create()
{
  return MEMORY[0x24BED3BC0]();
}

uint64_t ct_green_tea_logger_destroy()
{
  return MEMORY[0x24BED3BE0]();
}

char *__cdecl ctime_r(const time_t *a1, char *a2)
{
  return (char *)MEMORY[0x24BDADC20](a1, a2);
}

int deflate(z_streamp strm, int flush)
{
  return MEMORY[0x24BEDF1C8](strm, *(_QWORD *)&flush);
}

int deflateEnd(z_streamp strm)
{
  return MEMORY[0x24BEDF1D8](strm);
}

int deflateInit2_(z_streamp strm, int level, int method, int windowBits, int memLevel, int strategy, const char *version, int stream_size)
{
  return MEMORY[0x24BEDF1E0](strm, *(_QWORD *)&level, *(_QWORD *)&method, *(_QWORD *)&windowBits, *(_QWORD *)&memLevel, *(_QWORD *)&strategy, version, *(_QWORD *)&stream_size);
}

void dispatch_after(dispatch_time_t when, dispatch_queue_t queue, dispatch_block_t block)
{
  MEMORY[0x24BDADC60](when, queue, block);
}

void dispatch_async(dispatch_queue_t queue, dispatch_block_t block)
{
  MEMORY[0x24BDADCC0](queue, block);
}

dispatch_queue_global_t dispatch_get_global_queue(intptr_t identifier, uintptr_t flags)
{
  return (dispatch_queue_global_t)MEMORY[0x24BDADDA8](identifier, flags);
}

dispatch_group_t dispatch_group_create(void)
{
  return (dispatch_group_t)MEMORY[0x24BDADDC8]();
}

void dispatch_group_enter(dispatch_group_t group)
{
  MEMORY[0x24BDADDD0](group);
}

void dispatch_group_leave(dispatch_group_t group)
{
  MEMORY[0x24BDADDD8](group);
}

void dispatch_group_notify(dispatch_group_t group, dispatch_queue_t queue, dispatch_block_t block)
{
  MEMORY[0x24BDADDE0](group, queue, block);
}

void dispatch_once(dispatch_once_t *predicate, dispatch_block_t block)
{
  MEMORY[0x24BDADE98](predicate, block);
}

dispatch_queue_attr_t dispatch_queue_attr_make_with_autorelease_frequency(dispatch_queue_attr_t attr, dispatch_autorelease_frequency_t frequency)
{
  return (dispatch_queue_attr_t)MEMORY[0x24BDADEB8](attr, frequency);
}

dispatch_queue_attr_t dispatch_queue_attr_make_with_qos_class(dispatch_queue_attr_t attr, dispatch_qos_class_t qos_class, int relative_priority)
{
  return (dispatch_queue_attr_t)MEMORY[0x24BDADEC8](attr, *(_QWORD *)&qos_class, *(_QWORD *)&relative_priority);
}

dispatch_queue_t dispatch_queue_create(const char *label, dispatch_queue_attr_t attr)
{
  return (dispatch_queue_t)MEMORY[0x24BDADED0](label, attr);
}

dispatch_semaphore_t dispatch_semaphore_create(intptr_t value)
{
  return (dispatch_semaphore_t)MEMORY[0x24BDADF28](value);
}

intptr_t dispatch_semaphore_signal(dispatch_semaphore_t dsema)
{
  return MEMORY[0x24BDADF30](dsema);
}

intptr_t dispatch_semaphore_wait(dispatch_semaphore_t dsema, dispatch_time_t timeout)
{
  return MEMORY[0x24BDADF38](dsema, timeout);
}

void dispatch_sync(dispatch_queue_t queue, dispatch_block_t block)
{
  MEMORY[0x24BDADFE8](queue, block);
}

dispatch_time_t dispatch_time(dispatch_time_t when, int64_t delta)
{
  return MEMORY[0x24BDADFF8](when, delta);
}

int dladdr(const void *a1, Dl_info *a2)
{
  return MEMORY[0x24BDAE058](a1, a2);
}

char *dlerror(void)
{
  return (char *)MEMORY[0x24BDAE068]();
}

void *__cdecl dlopen(const char *__path, int __mode)
{
  return (void *)MEMORY[0x24BDAE070](__path, *(_QWORD *)&__mode);
}

void *__cdecl dlsym(void *__handle, const char *__symbol)
{
  return (void *)MEMORY[0x24BDAE088](__handle, __symbol);
}

int dup2(int a1, int a2)
{
  return MEMORY[0x24BDAE0C0](*(_QWORD *)&a1, *(_QWORD *)&a2);
}

long double exp(long double __x)
{
  long double result;

  MEMORY[0x24BDAE270](__x);
  return result;
}

long double exp2(long double __x)
{
  long double result;

  MEMORY[0x24BDAE278](__x);
  return result;
}

int fclose(FILE *a1)
{
  return MEMORY[0x24BDAE2E0](a1);
}

int fflush(FILE *a1)
{
  return MEMORY[0x24BDAE350](a1);
}

int ffsctl(int a1, unint64_t a2, void *a3, unsigned int a4)
{
  return MEMORY[0x24BDAE358](*(_QWORD *)&a1, a2, a3, *(_QWORD *)&a4);
}

long double fmod(long double __x, long double __y)
{
  long double result;

  MEMORY[0x24BDAE3F0](__x, __y);
  return result;
}

const char *__cdecl fmtcheck(const char *a1, const char *a2)
{
  return (const char *)MEMORY[0x24BDAE400](a1, a2);
}

FILE *__cdecl fopen(const char *__filename, const char *__mode)
{
  return (FILE *)MEMORY[0x24BDAE410](__filename, __mode);
}

int fprintf(FILE *a1, const char *a2, ...)
{
  return MEMORY[0x24BDAE428](a1, a2);
}

int fputc(int a1, FILE *a2)
{
  return MEMORY[0x24BDAE438](*(_QWORD *)&a1, a2);
}

int fputs(const char *a1, FILE *a2)
{
  return MEMORY[0x24BDAE440](a1, a2);
}

void free(void *a1)
{
  MEMORY[0x24BDAE450](a1);
}

int freelocale(locale_t a1)
{
  return MEMORY[0x24BDAE470](a1);
}

int fstat(int a1, stat *a2)
{
  return MEMORY[0x24BDAE508](*(_QWORD *)&a1, a2);
}

size_t fwrite(const void *__ptr, size_t __size, size_t __nitems, FILE *__stream)
{
  return MEMORY[0x24BDAE590](__ptr, __size, __nitems, __stream);
}

uint64_t getCTGreenTeaOsLogHandle()
{
  return MEMORY[0x24BED3BF8]();
}

uint64_t getWFActionsLogObject()
{
  return MEMORY[0x24BEC1D60]();
}

uint64_t getWFAppIntentsLogObject()
{
  return MEMORY[0x24BEC1D68]();
}

uint64_t getWFContentGraphLogObject()
{
  return MEMORY[0x24BEC1D78]();
}

uint64_t getWFContentItemLogObject()
{
  return MEMORY[0x24BEC1D80]();
}

uint64_t getWFFilesLogObject()
{
  return MEMORY[0x24BEC1D98]();
}

uint64_t getWFGeneralLogObject()
{
  return MEMORY[0x24BEC1DA0]();
}

uint64_t getWFSecurityLogObject()
{
  return MEMORY[0x24BEC1DB8]();
}

uint64_t getWFWorkflowExecutionLogObject()
{
  return MEMORY[0x24BEC1DE0]();
}

char *__cdecl getenv(const char *a1)
{
  return (char *)MEMORY[0x24BDAE5F0](a1);
}

ssize_t getline(char **__linep, size_t *__linecapp, FILE *__stream)
{
  return MEMORY[0x24BDAE678](__linep, __linecapp, __stream);
}

pid_t getpid(void)
{
  return MEMORY[0x24BDAE6D0]();
}

ssize_t getxattr(const char *path, const char *name, void *value, size_t size, u_int32_t position, int options)
{
  return MEMORY[0x24BDAE798](path, name, value, size, *(_QWORD *)&position, *(_QWORD *)&options);
}

tm *__cdecl gmtime_r(const time_t *a1, tm *a2)
{
  return (tm *)MEMORY[0x24BDAE7B8](a1, a2);
}

htmlDocPtr htmlReadMemory(const char *buffer, int size, const char *URL, const char *encoding, int options)
{
  return (htmlDocPtr)MEMORY[0x24BEDE5B0](buffer, *(_QWORD *)&size, URL, encoding, *(_QWORD *)&options);
}

int ioctl(int a1, unint64_t a2, ...)
{
  return MEMORY[0x24BDAE8C8](*(_QWORD *)&a1, a2);
}

tm *__cdecl localtime_r(const time_t *a1, tm *a2)
{
  return (tm *)MEMORY[0x24BDAEAA0](a1, a2);
}

long double log2(long double __x)
{
  long double result;

  MEMORY[0x24BDAEAD8](__x);
  return result;
}

float logf(float a1)
{
  float result;

  MEMORY[0x24BDAEAF8](a1);
  return result;
}

off_t lseek(int a1, off_t a2, int a3)
{
  return MEMORY[0x24BDAEB20](*(_QWORD *)&a1, a2, *(_QWORD *)&a3);
}

int lstat(const char *a1, stat *a2)
{
  return MEMORY[0x24BDAEB28](a1, a2);
}

size_t malloc_size(const void *ptr)
{
  return MEMORY[0x24BDAED60](ptr);
}

void *__cdecl malloc_type_calloc(size_t count, size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x24BDAED70](count, size, type_id);
}

void *__cdecl malloc_type_malloc(size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x24BDAED78](size, type_id);
}

void *__cdecl malloc_type_realloc(void *ptr, size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x24BDAED88](ptr, size, type_id);
}

size_t mbrtowc(__int32 *a1, const char *a2, size_t a3, mbstate_t *a4)
{
  return MEMORY[0x24BDAEE50](a1, a2, a3, a4);
}

void *__cdecl memchr(void *__s, int __c, size_t __n)
{
  return (void *)MEMORY[0x24BDAEE70](__s, *(_QWORD *)&__c, __n);
}

int memcmp(const void *__s1, const void *__s2, size_t __n)
{
  return MEMORY[0x24BDAEE78](__s1, __s2, __n);
}

void *__cdecl memcpy(void *__dst, const void *__src, size_t __n)
{
  return (void *)MEMORY[0x24BDAEE80](__dst, __src, __n);
}

void *__cdecl memmem(const void *__big, size_t __big_len, const void *__little, size_t __little_len)
{
  return (void *)MEMORY[0x24BDAEE90](__big, __big_len, __little, __little_len);
}

void *__cdecl memmove(void *__dst, const void *__src, size_t __len)
{
  return (void *)MEMORY[0x24BDAEE98](__dst, __src, __len);
}

char *__cdecl method_copyReturnType(Method m)
{
  return (char *)MEMORY[0x24BEDCF20](m);
}

SEL method_getName(Method m)
{
  return (SEL)MEMORY[0x24BEDCF38](m);
}

unsigned int method_getNumberOfArguments(Method m)
{
  return MEMORY[0x24BEDCF40](m);
}

int mkstemp(char *a1)
{
  return MEMORY[0x24BDAEF70](a1);
}

time_t mktime(tm *a1)
{
  return MEMORY[0x24BDAEF98](a1);
}

locale_t newlocale(int a1, const char *a2, locale_t a3)
{
  return (locale_t)MEMORY[0x24BDAF108](*(_QWORD *)&a1, a2, a3);
}

uint32_t notify_post(const char *name)
{
  return MEMORY[0x24BDAF160](name);
}

id objc_alloc(Class a1)
{
  return (id)MEMORY[0x24BEDCF68](a1);
}

uint64_t objc_alloc_init()
{
  return MEMORY[0x24BEDCF88]();
}

Class objc_allocateClassPair(Class superclass, const char *name, size_t extraBytes)
{
  return (Class)MEMORY[0x24BEDCF90](superclass, name, extraBytes);
}

id objc_autorelease(id a1)
{
  return (id)MEMORY[0x24BEDCFA8](a1);
}

void objc_autoreleasePoolPop(void *context)
{
  MEMORY[0x24BEDCFB0](context);
}

void *objc_autoreleasePoolPush(void)
{
  return (void *)MEMORY[0x24BEDCFC0]();
}

id objc_autoreleaseReturnValue(id a1)
{
  return (id)MEMORY[0x24BEDCFD0](a1);
}

id objc_begin_catch(void *exc_buf)
{
  return (id)MEMORY[0x24BEDCFD8](exc_buf);
}

uint64_t objc_claimAutoreleasedReturnValue()
{
  return MEMORY[0x24BEDCFE8]();
}

void objc_copyWeak(id *to, id *from)
{
  MEMORY[0x24BEDD030](to, from);
}

void objc_destroyWeak(id *location)
{
  MEMORY[0x24BEDD038](location);
}

void objc_end_catch(void)
{
  MEMORY[0x24BEDD050]();
}

void objc_enumerationMutation(id obj)
{
  MEMORY[0x24BEDD068](obj);
}

void objc_exception_throw(id exception)
{
  MEMORY[0x24BEDD078](exception);
}

id objc_getAssociatedObject(id object, const void *key)
{
  return (id)MEMORY[0x24BEDD080](object, key);
}

Class objc_getClass(const char *name)
{
  return (Class)MEMORY[0x24BEDD088](name);
}

id objc_getProperty(id self, SEL _cmd, ptrdiff_t offset, BOOL atomic)
{
  return (id)MEMORY[0x24BEDD0B0](self, _cmd, offset, atomic);
}

id objc_initWeak(id *location, id val)
{
  return (id)MEMORY[0x24BEDD0C0](location, val);
}

id objc_loadWeakRetained(id *location)
{
  return (id)MEMORY[0x24BEDD0E8](location);
}

id objc_msgSend(id a1, SEL a2, ...)
{
  return (id)MEMORY[0x24BEDD108](a1, a2);
}

id objc_msgSendSuper2(objc_super *a1, SEL a2, ...)
{
  return (id)MEMORY[0x24BEDD120](a1, a2);
}

uint64_t objc_opt_class()
{
  return MEMORY[0x24BEDD130]();
}

uint64_t objc_opt_isKindOfClass()
{
  return MEMORY[0x24BEDD138]();
}

uint64_t objc_opt_new()
{
  return MEMORY[0x24BEDD148]();
}

uint64_t objc_opt_respondsToSelector()
{
  return MEMORY[0x24BEDD160]();
}

uint64_t objc_opt_self()
{
  return MEMORY[0x24BEDD168]();
}

void objc_registerClassPair(Class cls)
{
  MEMORY[0x24BEDD170](cls);
}

void objc_release(id a1)
{
  MEMORY[0x24BEDD188](a1);
}

id objc_retain(id a1)
{
  return (id)MEMORY[0x24BEDD2A0](a1);
}

id objc_retainAutorelease(id a1)
{
  return (id)MEMORY[0x24BEDD2A8](a1);
}

id objc_retainAutoreleaseReturnValue(id a1)
{
  return (id)MEMORY[0x24BEDD2B0](a1);
}

id objc_retainAutoreleasedReturnValue(id a1)
{
  return (id)MEMORY[0x24BEDD2B8](a1);
}

id objc_retainBlock(id a1)
{
  return (id)MEMORY[0x24BEDD2C0](a1);
}

void objc_setAssociatedObject(id object, const void *key, id value, void *policy)
{
  MEMORY[0x24BEDD3C0](object, key, value, policy);
}

void objc_setProperty_nonatomic_copy(id self, SEL _cmd, id newValue, ptrdiff_t offset)
{
  MEMORY[0x24BEDD408](self, _cmd, newValue, offset);
}

void objc_storeStrong(id *location, id obj)
{
  MEMORY[0x24BEDD410](location, obj);
}

id objc_storeWeak(id *location, id obj)
{
  return (id)MEMORY[0x24BEDD420](location, obj);
}

void objc_terminate(void)
{
  MEMORY[0x24BEDD450]();
}

id objc_unsafeClaimAutoreleasedReturnValue(id a1)
{
  return (id)MEMORY[0x24BEDD458](a1);
}

Class object_getClass(id a1)
{
  return (Class)MEMORY[0x24BEDD460](a1);
}

id object_getIvar(id a1, Ivar a2)
{
  return (id)MEMORY[0x24BEDD480](a1, a2);
}

BOOL object_isClass(id obj)
{
  return MEMORY[0x24BEDD488](obj);
}

void object_setIvarWithStrongDefault(id obj, Ivar ivar, id value)
{
  MEMORY[0x24BEDD498](obj, ivar, value);
}

int open(const char *a1, int a2, ...)
{
  return MEMORY[0x24BDAF228](a1, *(_QWORD *)&a2);
}

DIR *__cdecl opendir(const char *a1)
{
  return (DIR *)MEMORY[0x24BDAF258](a1);
}

os_log_t os_log_create(const char *subsystem, const char *category)
{
  return (os_log_t)MEMORY[0x24BDAF368](subsystem, category);
}

BOOL os_log_type_enabled(os_log_t oslog, os_log_type_t type)
{
  return MEMORY[0x24BDAF398](oslog, type);
}

void os_unfair_lock_lock(os_unfair_lock_t lock)
{
  MEMORY[0x24BDAF460](lock);
}

void os_unfair_lock_unlock(os_unfair_lock_t lock)
{
  MEMORY[0x24BDAF488](lock);
}

ssize_t pread(int __fd, void *__buf, size_t __nbyte, off_t a4)
{
  return MEMORY[0x24BDAF698](*(_QWORD *)&__fd, __buf, __nbyte, a4);
}

void qsort(void *__base, size_t __nel, size_t __width, int (__cdecl *__compar)(const void *, const void *))
{
  MEMORY[0x24BDAFA18](__base, __nel, __width, __compar);
}

ssize_t read(int a1, void *a2, size_t a3)
{
  return MEMORY[0x24BDAFA80](*(_QWORD *)&a1, a2, a3);
}

dirent *__cdecl readdir(DIR *a1)
{
  return (dirent *)MEMORY[0x24BDAFA88](a1);
}

ssize_t readlink(const char *a1, char *a2, size_t a3)
{
  return MEMORY[0x24BDAFA98](a1, a2, a3);
}

int regcomp(regex_t *a1, const char *a2, int a3)
{
  return MEMORY[0x24BDAFAF8](a1, a2, *(_QWORD *)&a3);
}

size_t regerror(int a1, const regex_t *a2, char *a3, size_t a4)
{
  return MEMORY[0x24BDAFB00](*(_QWORD *)&a1, a2, a3, a4);
}

int regexec(const regex_t *a1, const char *a2, size_t a3, regmatch_t __pmatch[], int a5)
{
  return MEMORY[0x24BDAFB08](a1, a2, a3, __pmatch, *(_QWORD *)&a5);
}

void regfree(regex_t *a1)
{
  MEMORY[0x24BDAFB10](a1);
}

int removexattr(const char *path, const char *name, int options)
{
  return MEMORY[0x24BDAFB68](path, name, *(_QWORD *)&options);
}

uint64_t sandbox_check()
{
  return MEMORY[0x24BDAFBD8]();
}

uint64_t sandbox_check_by_audit_token()
{
  return MEMORY[0x24BDAFBE0]();
}

int select(int a1, fd_set *a2, fd_set *a3, fd_set *a4, timeval *a5)
{
  return MEMORY[0x24BDAFC70](*(_QWORD *)&a1, a2, a3, a4, a5);
}

float sinf(float a1)
{
  float result;

  MEMORY[0x24BDAFE20](a1);
  return result;
}

int snprintf(char *__str, size_t __size, const char *__format, ...)
{
  return MEMORY[0x24BDAFE40](__str, __size, __format);
}

int sprintf(char *a1, const char *a2, ...)
{
  return MEMORY[0x24BDAFE60](a1, a2);
}

int sscanf(const char *a1, const char *a2, ...)
{
  return MEMORY[0x24BDAFEA0](a1, a2);
}

int stat(const char *a1, stat *a2)
{
  return MEMORY[0x24BDAFEA8](a1, a2);
}

char *__cdecl strcasestr(const char *__big, const char *__little)
{
  return (char *)MEMORY[0x24BDAFED8](__big, __little);
}

char *__cdecl strchr(char *__s, int __c)
{
  return (char *)MEMORY[0x24BDAFEE8](__s, *(_QWORD *)&__c);
}

int strcmp(const char *__s1, const char *__s2)
{
  return MEMORY[0x24BDAFEF0](__s1, __s2);
}

size_t strcspn(const char *__s, const char *__charset)
{
  return MEMORY[0x24BDAFF08](__s, __charset);
}

char *__cdecl strdup(const char *__s1)
{
  return (char *)MEMORY[0x24BDAFF10](__s1);
}

char *__cdecl strerror(int __errnum)
{
  return (char *)MEMORY[0x24BDAFF18](*(_QWORD *)&__errnum);
}

size_t strlcpy(char *__dst, const char *__source, size_t __size)
{
  return MEMORY[0x24BDAFF38](__dst, __source, __size);
}

size_t strlen(const char *__s)
{
  return MEMORY[0x24BDAFF40](__s);
}

int strncasecmp(const char *a1, const char *a2, size_t a3)
{
  return MEMORY[0x24BDAFF50](a1, a2, a3);
}

int strncmp(const char *__s1, const char *__s2, size_t __n)
{
  return MEMORY[0x24BDAFF68](__s1, __s2, __n);
}

char *__cdecl strndup(const char *__s1, size_t __n)
{
  return (char *)MEMORY[0x24BDAFF78](__s1, __n);
}

char *__cdecl strrchr(char *__s, int __c)
{
  return (char *)MEMORY[0x24BDAFFA8](__s, *(_QWORD *)&__c);
}

char *__cdecl strstr(char *__s1, const char *__s2)
{
  return (char *)MEMORY[0x24BDAFFC8](__s1, __s2);
}

double strtod(const char *a1, char **a2)
{
  double result;

  MEMORY[0x24BDAFFD0](a1, a2);
  return result;
}

float strtof(const char *a1, char **a2)
{
  float result;

  MEMORY[0x24BDAFFE0](a1, a2);
  return result;
}

uint64_t strtol(const char *__str, char **__endptr, int __base)
{
  return MEMORY[0x24BDB0000](__str, __endptr, *(_QWORD *)&__base);
}

unint64_t strtoul(const char *__str, char **__endptr, int __base)
{
  return MEMORY[0x24BDB0030](__str, __endptr, *(_QWORD *)&__base);
}

unint64_t strtoull(const char *__str, char **__endptr, int __base)
{
  return MEMORY[0x24BDB0040](__str, __endptr, *(_QWORD *)&__base);
}

uint64_t swift_allocError()
{
  return MEMORY[0x24BEE4B68]();
}

uint64_t swift_allocObject()
{
  return MEMORY[0x24BEE4B70]();
}

uint64_t swift_bridgeObjectRelease()
{
  return MEMORY[0x24BEE4BC0]();
}

uint64_t swift_bridgeObjectRetain()
{
  return MEMORY[0x24BEE4BD0]();
}

uint64_t swift_continuation_await()
{
  return MEMORY[0x24BEE71B8]();
}

uint64_t swift_continuation_init()
{
  return MEMORY[0x24BEE71C0]();
}

uint64_t swift_continuation_throwingResume()
{
  return MEMORY[0x24BEE71D0]();
}

uint64_t swift_continuation_throwingResumeWithError()
{
  return MEMORY[0x24BEE71D8]();
}

uint64_t swift_deallocClassInstance()
{
  return MEMORY[0x24BEE4C00]();
}

uint64_t swift_deallocObject()
{
  return MEMORY[0x24BEE4C10]();
}

uint64_t swift_dynamicCast()
{
  return MEMORY[0x24BEE4C38]();
}

uint64_t swift_dynamicCastMetatype()
{
  return MEMORY[0x24BEE4C50]();
}

uint64_t swift_dynamicCastMetatypeUnconditional()
{
  return MEMORY[0x24BEE4C58]();
}

uint64_t swift_errorRetain()
{
  return MEMORY[0x24BEE4CA8]();
}

uint64_t swift_getObjCClassFromMetadata()
{
  return MEMORY[0x24BEE4DA0]();
}

uint64_t swift_getObjCClassMetadata()
{
  return MEMORY[0x24BEE4DB0]();
}

uint64_t swift_getObjectType()
{
  return MEMORY[0x24BEE4DB8]();
}

uint64_t swift_getTypeByMangledNameInContext2()
{
  return MEMORY[0x24BEE4E10]();
}

uint64_t swift_isClassType()
{
  return MEMORY[0x24BEE4E60]();
}

uint64_t swift_isUniquelyReferenced_nonNull_native()
{
  return MEMORY[0x24BEE4E98]();
}

uint64_t swift_once()
{
  return MEMORY[0x24BEE4EC8]();
}

uint64_t swift_release()
{
  return MEMORY[0x24BEE4EF8]();
}

uint64_t swift_retain()
{
  return MEMORY[0x24BEE4F08]();
}

uint64_t swift_task_switch()
{
  return MEMORY[0x24BEE7278]();
}

uint64_t swift_unknownObjectRetain()
{
  return MEMORY[0x24BEE4F80]();
}

uint64_t swift_willThrow()
{
  return MEMORY[0x24BEE5050]();
}

mode_t umask(mode_t a1)
{
  return MEMORY[0x24BDB02A0](a1);
}

int unlink(const char *a1)
{
  return MEMORY[0x24BDB02B0](a1);
}

locale_t uselocale(locale_t a1)
{
  return (locale_t)MEMORY[0x24BDB02E0](a1);
}

int utimes(const char *a1, const timeval *a2)
{
  return MEMORY[0x24BDB02F8](a1, a2);
}

int vfprintf(FILE *a1, const char *a2, va_list a3)
{
  return MEMORY[0x24BDB0370](a1, a2, a3);
}

int vsprintf(char *a1, const char *a2, va_list a3)
{
  return MEMORY[0x24BDB0458](a1, a2, a3);
}

size_t wcslen(const __int32 *a1)
{
  return MEMORY[0x24BDB04D0](a1);
}

ssize_t write(int __fd, const void *__buf, size_t __nbyte)
{
  return MEMORY[0x24BDB0558](*(_QWORD *)&__fd, __buf, __nbyte);
}

xmlNodePtr xmlDocGetRootElement(const xmlDoc *doc)
{
  return (xmlNodePtr)MEMORY[0x24BEDE740](doc);
}

void xmlFreeDoc(xmlDocPtr cur)
{
  MEMORY[0x24BEDE760](cur);
}

xmlChar *__cdecl xmlGetProp(const xmlNode *node, const xmlChar *name)
{
  return (xmlChar *)MEMORY[0x24BEDE828](node, name);
}

void xmlXPathFreeContext(xmlXPathContextPtr ctxt)
{
  MEMORY[0x24BEDEEE8](ctxt);
}

void xmlXPathFreeObject(xmlXPathObjectPtr obj)
{
  MEMORY[0x24BEDEEF8](obj);
}

xmlXPathContextPtr xmlXPathNewContext(xmlDocPtr doc)
{
  return (xmlXPathContextPtr)MEMORY[0x24BEDEF58](doc);
}

xmlXPathObjectPtr xmlXPathNodeEval(xmlNodePtr node, const xmlChar *str, xmlXPathContextPtr ctx)
{
  return (xmlXPathObjectPtr)MEMORY[0x24BEDEF98](node, str, ctx);
}

