uint64_t ciphersuiteForKeyByteCount(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = MEMORY[0x1E0C823A8];
  v2 = MEMORY[0x1E0C823A0];
  if (a1 != 384)
    v2 = 0;
  if (a1 != 512)
    v1 = v2;
  if (a1 == 256)
    return MEMORY[0x1E0C82398];
  else
    return v1;
}

uint64_t static CKSecretSharing.HybridShareParameterSelection.== infix(_:_:)()
{
  return 1;
}

uint64_t sub_1D2C44170()
{
  return 1;
}

double sub_1D2C44180@<D0>(uint64_t a1@<X8>)
{
  double result;

  *(_OWORD *)a1 = xmmword_1D2CAC560;
  *(_OWORD *)(a1 + 16) = xmmword_1D2CAC570;
  *(_QWORD *)&result = 32;
  *(_OWORD *)(a1 + 32) = xmmword_1D2CAC580;
  *(_QWORD *)(a1 + 48) = 16;
  *(_QWORD *)(a1 + 56) = &unk_1E943EB50;
  *(_QWORD *)(a1 + 64) = 0xD000000000000021;
  *(_QWORD *)(a1 + 72) = 0x80000001D2CB0480;
  *(_QWORD *)(a1 + 80) = 0xD000000000000023;
  *(_QWORD *)(a1 + 88) = 0x80000001D2CB04B0;
  return result;
}

uint64_t static CKSecretSharing.ShamirGeneratorPrimeField.== infix(_:_:)()
{
  return 1;
}

uint64_t CKSecretSharing.ShamirGeneratorPrimeField.hash(into:)()
{
  return sub_1D2CAB140();
}

void *static CKSecretSharing.ShamirGeneratorPrimeField.allCases.getter()
{
  return &unk_1E943EAD0;
}

uint64_t _s16CryptoKitPrivate15CKSecretSharingO29HybridShareParameterSelectionO9hashValueSivg_0()
{
  sub_1D2CAB134();
  sub_1D2CAB140();
  return sub_1D2CAB158();
}

uint64_t sub_1D2C44264()
{
  return sub_1D2CAB140();
}

uint64_t sub_1D2C44288()
{
  sub_1D2CAB134();
  sub_1D2CAB140();
  return sub_1D2CAB158();
}

unint64_t sub_1D2C442C8()
{
  unint64_t result;

  result = qword_1EFC9F6F0;
  if (!qword_1EFC9F6F0)
  {
    result = MEMORY[0x1D8245F38](&protocol conformance descriptor for CKSecretSharing.HybridShareParameterSelection, &type metadata for CKSecretSharing.HybridShareParameterSelection);
    atomic_store(result, (unint64_t *)&qword_1EFC9F6F0);
  }
  return result;
}

unint64_t sub_1D2C44310()
{
  unint64_t result;

  result = qword_1EFC9F6F8;
  if (!qword_1EFC9F6F8)
  {
    result = MEMORY[0x1D8245F38](&protocol conformance descriptor for CKSecretSharing.ShamirGeneratorPrimeField, &type metadata for CKSecretSharing.ShamirGeneratorPrimeField);
    atomic_store(result, (unint64_t *)&qword_1EFC9F6F8);
  }
  return result;
}

unint64_t sub_1D2C44358()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1EFC9F700;
  if (!qword_1EFC9F700)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EFC9F708);
    result = MEMORY[0x1D8245F38](MEMORY[0x1E0DEAF50], v1);
    atomic_store(result, (unint64_t *)&qword_1EFC9F700);
  }
  return result;
}

uint64_t __swift_instantiateConcreteTypeFromMangledNameAbstract(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (result < 0)
  {
    result = MEMORY[0x1D8245F2C](255, (char *)a1 + (int)result, -(result >> 32), 0, 0);
    *a1 = result;
  }
  return result;
}

void sub_1D2C443E8(_QWORD *a1@<X8>)
{
  *a1 = &unk_1E943EB28;
}

uint64_t sub_1D2C44408()
{
  return 0;
}

ValueMetadata *type metadata accessor for CKSecretSharing.HybridShareParameterSelection()
{
  return &type metadata for CKSecretSharing.HybridShareParameterSelection;
}

uint64_t _s29HybridShareParameterSelectionO11suiteParamsVwCP(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a2;
  *a1 = *a2;
  v3 = v2 + 16;
  swift_retain();
  return v3;
}

uint64_t _s29HybridShareParameterSelectionO11suiteParamsVwxx()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t _s29HybridShareParameterSelectionO11suiteParamsVwcp(uint64_t a1, uint64_t a2)
{
  __int128 v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  v4 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v4;
  v5 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = v5;
  v6 = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = v6;
  sub_1D2CAAF0C();
  sub_1D2CAAF0C();
  sub_1D2CAAF0C();
  return a1;
}

_QWORD *_s29HybridShareParameterSelectionO11suiteParamsVwca(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  a1[3] = a2[3];
  a1[4] = a2[4];
  a1[5] = a2[5];
  a1[6] = a2[6];
  a1[7] = a2[7];
  sub_1D2CAAF0C();
  swift_bridgeObjectRelease();
  a1[8] = a2[8];
  a1[9] = a2[9];
  sub_1D2CAAF0C();
  swift_bridgeObjectRelease();
  a1[10] = a2[10];
  a1[11] = a2[11];
  sub_1D2CAAF0C();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 __swift_memcpy96_8(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __n128 result;
  __int128 v4;
  __int128 v5;

  v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  result = *(__n128 *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  v5 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v5;
  *(__n128 *)(a1 + 32) = result;
  *(_OWORD *)(a1 + 48) = v4;
  return result;
}

uint64_t _s29HybridShareParameterSelectionO11suiteParamsVwta(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  v5 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v5;
  swift_bridgeObjectRelease();
  v6 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = v6;
  swift_bridgeObjectRelease();
  v7 = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = v7;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t _s29HybridShareParameterSelectionO11suiteParamsVwet(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 96))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 56);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t _s29HybridShareParameterSelectionO11suiteParamsVwst(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 88) = 0;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 96) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 56) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 96) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for CKSecretSharing.HybridShareParameterSelection.suiteParams()
{
  return &type metadata for CKSecretSharing.HybridShareParameterSelection.suiteParams;
}

uint64_t _s16SimilarityMetricOwet(unsigned int *a1, int a2)
{
  int v2;
  int v3;

  if (!a2)
    return 0;
  if ((a2 + 1) >= 0x10000)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 1) < 0x100)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
    return *a1;
  if (v3 == 2)
    return *(unsigned __int16 *)a1;
  return *(unsigned __int8 *)a1;
}

uint64_t _s29HybridShareParameterSelectionOwst_0(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_1D2C44764 + 4 * byte_1D2CAC590[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_1D2C44784 + 4 * byte_1D2CAC595[v4]))();
}

_BYTE *sub_1D2C44764(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_1D2C44784(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1D2C4478C(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1D2C44794(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1D2C4479C(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1D2C447A4(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for CKSecretSharing.ShamirGeneratorPrimeField()
{
  return &type metadata for CKSecretSharing.ShamirGeneratorPrimeField;
}

__n128 __swift_memcpy16_8(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  *a1 = *a2;
  return result;
}

void type metadata accessor for ccss_shamir_share_generator(uint64_t a1)
{
  sub_1D2C4494C(a1, &qword_1EFC9F710);
}

uint64_t getEnumTagSinglePayload for SecureBytes.BackingHeader(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 16))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for SecureBytes.BackingHeader(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)result = (a2 - 1);
    *(_QWORD *)(result + 8) = 0;
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 16) = v3;
  return result;
}

void type metadata accessor for ccss_shamir_share(uint64_t a1)
{
  sub_1D2C4494C(a1, &qword_1EFC9F718);
}

__n128 __swift_memcpy40_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t sub_1D2C44850(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 40))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t sub_1D2C44870(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 40) = v3;
  return result;
}

void type metadata accessor for ccss_shamir_parameters(uint64_t a1)
{
  sub_1D2C4494C(a1, &qword_1EFC9F720);
}

__n128 __swift_memcpy32_8(_OWORD *a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *a1 = *(_OWORD *)a2;
  a1[1] = v3;
  return result;
}

void type metadata accessor for ccec_cp(uint64_t a1)
{
  sub_1D2C4494C(a1, &qword_1ED985C80);
}

void type metadata accessor for CFString(uint64_t a1)
{
  sub_1D2C4494C(a1, &qword_1EFC9F728);
}

uint64_t sub_1D2C448EC(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 32))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t sub_1D2C4490C(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = (a2 - 1);
    *(_QWORD *)(result + 8) = 0;
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 32) = v3;
  return result;
}

void type metadata accessor for cczp(uint64_t a1)
{
  sub_1D2C4494C(a1, &qword_1EFC9F730);
}

void sub_1D2C4494C(uint64_t a1, unint64_t *a2)
{
  unint64_t ForeignTypeMetadata;
  uint64_t v4;

  if (!*a2)
  {
    ForeignTypeMetadata = swift_getForeignTypeMetadata();
    if (!v4)
      atomic_store(ForeignTypeMetadata, a2);
  }
}

uint64_t sub_1D2C44990(uint64_t a1)
{
  MEMORY[0x1D8245F38](&unk_1D2CAC7CC, a1);
  return sub_1D2CAA9CC();
}

uint64_t sub_1D2C449CC()
{
  MEMORY[0x1D8245F38](&unk_1D2CAC7CC);
  return sub_1D2CAA9C0();
}

uint64_t sub_1D2C44A14(uint64_t a1, uint64_t a2)
{
  sub_1D2CAB134();
  MEMORY[0x1D8245F38](&unk_1D2CAC7CC, a2);
  sub_1D2CAA9C0();
  return sub_1D2CAB158();
}

uint64_t sub_1D2C44A6C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  MEMORY[0x1D8245F38](&unk_1D2CAC7CC, a3);
  return sub_1D2CAA9B4();
}

uint64_t sub_1D2C44AB8()
{
  return sub_1D2C44B00(&qword_1EFC9F738, (uint64_t)&unk_1D2CAC7F8);
}

uint64_t sub_1D2C44ADC()
{
  return sub_1D2C44B00(qword_1EFC9F740, (uint64_t)&unk_1D2CAC7A0);
}

uint64_t sub_1D2C44B00(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    type metadata accessor for CFString(255);
    result = MEMORY[0x1D8245F38](a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1D2C44B5C()
{
  return swift_allocateGenericValueMetadata();
}

uint64_t sub_1D2C44B64()
{
  uint64_t AssociatedTypeWitness;
  unint64_t v1;
  unint64_t v2;
  uint64_t result;
  unint64_t v4;

  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v2 = v1;
  swift_getAssociatedConformanceWitness();
  result = swift_getAssociatedTypeWitness();
  if (v4 <= 0x3F)
  {
    if (v2 > 0x3F)
    {
      return AssociatedTypeWitness;
    }
    else
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

_QWORD *sub_1D2C44CCC(_QWORD *a1, _QWORD *a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(uint64_t, uint64_t, uint64_t);
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void (*v35)(uint64_t, uint64_t, uint64_t);
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  _QWORD *v45;
  uint64_t *v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;

  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v6 = *(_DWORD *)(v5 + 80);
  v7 = v6;
  v8 = *(_QWORD *)(v5 + 64);
  v9 = swift_checkMetadataState();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(_DWORD *)(v10 + 80);
  v12 = (v11 | (unint64_t)v6) <= 7 && ((*(_DWORD *)(v10 + 80) | v6) & 0x100000) == 0;
  if (v12
    && (v13 = v8 + v6,
        v14 = v8 + v11,
        v15 = (v8 + v11 + ((v8 + v7 + ((v8 + v7 + ((v8 + v7 + ((v7 + 8) & ~v7)) & ~v7)) & ~v7)) & ~v7)) & ~v11,
        v16 = *(_QWORD *)(v10 + 64),
        v17 = v16 + v11,
        v18 = (v16 + v11 + ((v16 + v11 + ((v16 + v11 + ((v16 + v11 + v15) & ~v11)) & ~v11)) & ~v11)) & ~v11,
        v19 = v16 + 7,
        ((v19 + v18) & 0xFFFFFFFFFFFFFFF8) + 16 <= 0x18))
  {
    v20 = v9;
    v21 = a2;
    v22 = ~v7;
    v52 = v19;
    v53 = a1;
    v23 = ~v11;
    *v53 = *v21;
    v24 = (char *)v21 + v7;
    v25 = ((unint64_t)v53 + v7 + 8) & ~v7;
    v26 = (unint64_t)(v24 + 8) & v22;
    v27 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
    v51 = v10;
    v27(v25, v26, AssociatedTypeWitness);
    v28 = (v13 + v25) & v22;
    v29 = (v13 + v26) & v22;
    v27(v28, v29, AssociatedTypeWitness);
    v30 = (v13 + v28) & v22;
    v31 = (v13 + v29) & v22;
    v27(v30, v31, AssociatedTypeWitness);
    v32 = (v13 + v30) & v22;
    v33 = (v13 + v31) & v22;
    v27(v32, v33, AssociatedTypeWitness);
    v34 = (v14 + v32) & v23;
    v35 = *(void (**)(uint64_t, uint64_t, uint64_t))(v51 + 16);
    v35(v34, (v14 + v33) & v23, v20);
    v36 = (v17 + v34) & v23;
    v37 = (v17 + ((v14 + v33) & v23)) & v23;
    v35(v36, v37, v20);
    v38 = (v17 + v36) & v23;
    v39 = (v17 + v37) & v23;
    v35(v38, v39, v20);
    v40 = (v17 + v38) & v23;
    v41 = (v17 + v39) & v23;
    v35(v40, v41, v20);
    v42 = (v17 + v40) & v23;
    v43 = (v17 + v41) & v23;
    v44 = v53;
    v35(v42, v43, v20);
    v45 = (_QWORD *)((v52 + v42) & 0xFFFFFFFFFFFFFFF8);
    v46 = (uint64_t *)((v52 + v43) & 0xFFFFFFFFFFFFFFF8);
    v47 = *v46;
    v48 = v46[1];
    sub_1D2C45028(*v46, v48);
    *v45 = v47;
    v45[1] = v48;
  }
  else
  {
    v49 = *a2;
    *a1 = *a2;
    v44 = (_QWORD *)(v49 + (((v11 | v7) & 0xF8 ^ 0x1F8) & ((v11 | v7) + 16)));
    swift_retain();
  }
  return v44;
}

uint64_t sub_1D2C45028(uint64_t a1, unint64_t a2)
{
  uint64_t result;

  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2)
      return result;
    swift_retain();
  }
  return swift_retain();
}

uint64_t sub_1D2C4506C(uint64_t a1)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(uint64_t, uint64_t);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v3 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v4 = *(unsigned __int8 *)(v3 + 80);
  v5 = (a1 + v4 + 8) & ~v4;
  v6 = *(void (**)(uint64_t, uint64_t))(v3 + 8);
  v6(v5, AssociatedTypeWitness);
  v7 = *(_QWORD *)(v3 + 64);
  v8 = (v7 + v4 + v5) & ~v4;
  v6(v8, AssociatedTypeWitness);
  v9 = (v7 + v4 + v8) & ~v4;
  v6(v9, AssociatedTypeWitness);
  v10 = (v7 + v4 + v9) & ~v4;
  v6(v10, AssociatedTypeWitness);
  v11 = swift_checkMetadataState();
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(unsigned __int8 *)(v12 + 80);
  v14 = (v7 + v13 + v10) & ~v13;
  v15 = *(void (**)(uint64_t, uint64_t))(v12 + 8);
  v15(v14, v11);
  v16 = *(_QWORD *)(v12 + 64);
  v17 = (v16 + v13 + v14) & ~v13;
  v15(v17, v11);
  v18 = (v16 + v13 + v17) & ~v13;
  v15(v18, v11);
  v19 = (v16 + v13 + v18) & ~v13;
  v15(v19, v11);
  v20 = (v16 + v13 + v19) & ~v13;
  v15(v20, v11);
  return sub_1D2C45258(*(_QWORD *)((v16 + v20 + 7) & 0xFFFFFFFFFFFFFFF8), *(_QWORD *)(((v16 + v20 + 7) & 0xFFFFFFFFFFFFFFF8) + 8));
}

uint64_t sub_1D2C45258(uint64_t a1, unint64_t a2)
{
  uint64_t result;

  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2)
      return result;
    swift_release();
  }
  return swift_release();
}

_QWORD *sub_1D2C4529C(_QWORD *a1, _QWORD *a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(unint64_t, uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(uint64_t, uint64_t, uint64_t);
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t *v32;
  uint64_t v33;
  unint64_t v34;

  *a1 = *a2;
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v6 = *(unsigned __int8 *)(v5 + 80);
  v7 = ((unint64_t)a2 + v6 + 8) & ~v6;
  v8 = *(void (**)(unint64_t, uint64_t, uint64_t))(v5 + 16);
  v8(((unint64_t)a1 + v6 + 8) & ~v6, v7, AssociatedTypeWitness);
  v9 = *(_QWORD *)(v5 + 64);
  v10 = (v9 + v6 + (((unint64_t)a1 + v6 + 8) & ~v6)) & ~v6;
  v11 = (v9 + v6 + v7) & ~v6;
  v8(v10, v11, AssociatedTypeWitness);
  v12 = (v9 + v6 + v10) & ~v6;
  v13 = (v9 + v6 + v11) & ~v6;
  v8(v12, v13, AssociatedTypeWitness);
  v14 = (v9 + v6 + v12) & ~v6;
  v15 = (v9 + v6 + v13) & ~v6;
  v8(v14, v15, AssociatedTypeWitness);
  v16 = swift_checkMetadataState();
  v17 = *(_QWORD *)(v16 - 8);
  v18 = *(unsigned __int8 *)(v17 + 80);
  v19 = (v9 + v18 + v14) & ~v18;
  v20 = (v9 + v18 + v15) & ~v18;
  v21 = *(void (**)(uint64_t, uint64_t, uint64_t))(v17 + 16);
  v21(v19, v20, v16);
  v22 = *(_QWORD *)(v17 + 64);
  v23 = (v22 + v18 + v19) & ~v18;
  v24 = (v22 + v18 + v20) & ~v18;
  v21(v23, v24, v16);
  v25 = (v22 + v18 + v23) & ~v18;
  v26 = (v22 + v18 + v24) & ~v18;
  v21(v25, v26, v16);
  v27 = (v22 + v18 + v25) & ~v18;
  v28 = (v22 + v18 + v26) & ~v18;
  v21(v27, v28, v16);
  v29 = (v22 + v18 + v27) & ~v18;
  v30 = (v22 + v18 + v28) & ~v18;
  v21(v29, v30, v16);
  v31 = (_QWORD *)((v22 + 7 + v29) & 0xFFFFFFFFFFFFFFF8);
  v32 = (uint64_t *)((v22 + 7 + v30) & 0xFFFFFFFFFFFFFFF8);
  v33 = *v32;
  v34 = v32[1];
  sub_1D2C45028(*v32, v34);
  *v31 = v33;
  v31[1] = v34;
  return a1;
}

_QWORD *sub_1D2C45524(_QWORD *a1, _QWORD *a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(unint64_t, uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(uint64_t, uint64_t, uint64_t);
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t *v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;

  *a1 = *a2;
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v6 = *(unsigned __int8 *)(v5 + 80);
  v7 = ((unint64_t)a2 + v6 + 8) & ~v6;
  v8 = *(void (**)(unint64_t, uint64_t, uint64_t))(v5 + 24);
  v8(((unint64_t)a1 + v6 + 8) & ~v6, v7, AssociatedTypeWitness);
  v9 = *(_QWORD *)(v5 + 64);
  v10 = (v9 + v6 + (((unint64_t)a1 + v6 + 8) & ~v6)) & ~v6;
  v11 = (v9 + v6 + v7) & ~v6;
  v8(v10, v11, AssociatedTypeWitness);
  v12 = (v9 + v6 + v10) & ~v6;
  v13 = (v9 + v6 + v11) & ~v6;
  v8(v12, v13, AssociatedTypeWitness);
  v14 = (v9 + v6 + v12) & ~v6;
  v15 = (v9 + v6 + v13) & ~v6;
  v8(v14, v15, AssociatedTypeWitness);
  v16 = swift_checkMetadataState();
  v17 = *(_QWORD *)(v16 - 8);
  v18 = *(unsigned __int8 *)(v17 + 80);
  v19 = (v9 + v18 + v14) & ~v18;
  v20 = (v9 + v18 + v15) & ~v18;
  v21 = *(void (**)(uint64_t, uint64_t, uint64_t))(v17 + 24);
  v21(v19, v20, v16);
  v22 = *(_QWORD *)(v17 + 64);
  v23 = (v22 + v18 + v19) & ~v18;
  v24 = (v22 + v18 + v20) & ~v18;
  v21(v23, v24, v16);
  v25 = (v22 + v18 + v23) & ~v18;
  v26 = (v22 + v18 + v24) & ~v18;
  v21(v25, v26, v16);
  v27 = (v22 + v18 + v25) & ~v18;
  v28 = (v22 + v18 + v26) & ~v18;
  v21(v27, v28, v16);
  v29 = (v22 + v18 + v27) & ~v18;
  v30 = (v22 + v18 + v28) & ~v18;
  v21(v29, v30, v16);
  v31 = (uint64_t *)((v22 + 7 + v29) & 0xFFFFFFFFFFFFFFF8);
  v32 = (uint64_t *)((v22 + 7 + v30) & 0xFFFFFFFFFFFFFFF8);
  v33 = *v32;
  v34 = v32[1];
  sub_1D2C45028(*v32, v34);
  v35 = *v31;
  v36 = v31[1];
  *v31 = v33;
  v31[1] = v34;
  sub_1D2C45258(v35, v36);
  return a1;
}

_QWORD *sub_1D2C457B4(_QWORD *a1, _QWORD *a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(unint64_t, uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(uint64_t, uint64_t, uint64_t);
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  *a1 = *a2;
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v6 = *(unsigned __int8 *)(v5 + 80);
  v7 = ((unint64_t)a2 + v6 + 8) & ~v6;
  v8 = *(void (**)(unint64_t, uint64_t, uint64_t))(v5 + 32);
  v8(((unint64_t)a1 + v6 + 8) & ~v6, v7, AssociatedTypeWitness);
  v9 = *(_QWORD *)(v5 + 64);
  v10 = (v9 + v6 + (((unint64_t)a1 + v6 + 8) & ~v6)) & ~v6;
  v11 = (v9 + v6 + v7) & ~v6;
  v8(v10, v11, AssociatedTypeWitness);
  v12 = (v9 + v6 + v10) & ~v6;
  v13 = (v9 + v6 + v11) & ~v6;
  v8(v12, v13, AssociatedTypeWitness);
  v14 = (v9 + v6 + v12) & ~v6;
  v15 = (v9 + v6 + v13) & ~v6;
  v8(v14, v15, AssociatedTypeWitness);
  v16 = swift_checkMetadataState();
  v17 = *(_QWORD *)(v16 - 8);
  v18 = *(unsigned __int8 *)(v17 + 80);
  v19 = (v9 + v18 + v14) & ~v18;
  v20 = (v9 + v18 + v15) & ~v18;
  v21 = *(void (**)(uint64_t, uint64_t, uint64_t))(v17 + 32);
  v21(v19, v20, v16);
  v22 = *(_QWORD *)(v17 + 64);
  v23 = (v22 + v18 + v19) & ~v18;
  v24 = (v22 + v18 + v20) & ~v18;
  v21(v23, v24, v16);
  v25 = (v22 + v18 + v23) & ~v18;
  v26 = (v22 + v18 + v24) & ~v18;
  v21(v25, v26, v16);
  v27 = (v22 + v18 + v25) & ~v18;
  v28 = (v22 + v18 + v26) & ~v18;
  v21(v27, v28, v16);
  v29 = (v22 + v18 + v27) & ~v18;
  v30 = (v22 + v18 + v28) & ~v18;
  v21(v29, v30, v16);
  *(_OWORD *)((v22 + 7 + v29) & 0xFFFFFFFFFFFFF8) = *(_OWORD *)((v22 + 7 + v30) & 0xFFFFFFFFFFFFF8);
  return a1;
}

_QWORD *sub_1D2C45A30(_QWORD *a1, _QWORD *a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(unint64_t, uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(uint64_t, uint64_t, uint64_t);
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  unint64_t v33;

  *a1 = *a2;
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v6 = *(unsigned __int8 *)(v5 + 80);
  v7 = ((unint64_t)a2 + v6 + 8) & ~v6;
  v8 = *(void (**)(unint64_t, uint64_t, uint64_t))(v5 + 40);
  v8(((unint64_t)a1 + v6 + 8) & ~v6, v7, AssociatedTypeWitness);
  v9 = *(_QWORD *)(v5 + 64);
  v10 = (v9 + v6 + (((unint64_t)a1 + v6 + 8) & ~v6)) & ~v6;
  v11 = (v9 + v6 + v7) & ~v6;
  v8(v10, v11, AssociatedTypeWitness);
  v12 = (v9 + v6 + v10) & ~v6;
  v13 = (v9 + v6 + v11) & ~v6;
  v8(v12, v13, AssociatedTypeWitness);
  v14 = (v9 + v6 + v12) & ~v6;
  v15 = (v9 + v6 + v13) & ~v6;
  v8(v14, v15, AssociatedTypeWitness);
  v16 = swift_checkMetadataState();
  v17 = *(_QWORD *)(v16 - 8);
  v18 = *(unsigned __int8 *)(v17 + 80);
  v19 = (v9 + v18 + v14) & ~v18;
  v20 = (v9 + v18 + v15) & ~v18;
  v21 = *(void (**)(uint64_t, uint64_t, uint64_t))(v17 + 40);
  v21(v19, v20, v16);
  v22 = *(_QWORD *)(v17 + 64);
  v23 = (v22 + v18 + v19) & ~v18;
  v24 = (v22 + v18 + v20) & ~v18;
  v21(v23, v24, v16);
  v25 = (v22 + v18 + v23) & ~v18;
  v26 = (v22 + v18 + v24) & ~v18;
  v21(v25, v26, v16);
  v27 = (v22 + v18 + v25) & ~v18;
  v28 = (v22 + v18 + v26) & ~v18;
  v21(v27, v28, v16);
  v29 = (v22 + v18 + v27) & ~v18;
  v30 = (v22 + v18 + v28) & ~v18;
  v21(v29, v30, v16);
  v31 = (uint64_t *)((v22 + 7 + v29) & 0xFFFFFFFFFFFFFFF8);
  v32 = *v31;
  v33 = v31[1];
  *(_OWORD *)v31 = *(_OWORD *)((v22 + 7 + v30) & 0xFFFFFFFFFFFFF8);
  sub_1D2C45258(v32, v33);
  return a1;
}

uint64_t sub_1D2C45CB4(uint64_t a1, unsigned int a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t (*v25)(uint64_t, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;

  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v6 = *(unsigned int *)(v5 + 84);
  v7 = swift_checkMetadataState();
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(unsigned int *)(v8 + 84);
  if (v9 <= v6)
    v10 = v6;
  else
    v10 = *(_DWORD *)(v8 + 84);
  if (v10 <= 0xC)
    v10 = 12;
  if (!a2)
    return 0;
  v11 = v7;
  v12 = *(unsigned __int8 *)(v5 + 80);
  v13 = *(_QWORD *)(v5 + 64);
  v14 = v13 + v12;
  v15 = *(unsigned __int8 *)(v8 + 80);
  v16 = v13 + v15;
  v17 = *(_QWORD *)(v8 + 64);
  v18 = v17 + v15;
  v19 = v17 + 7;
  if (v10 < a2)
  {
    if (((((v19
           + ((v18
             + ((v18
               + ((v18
                 + ((v18 + ((v16 + ((v14 + ((v14 + ((v14 + ((v12 + 8) & ~v12)) & ~v12)) & ~v12)) & ~v12)) & ~v15)) & ~v15)) & ~v15)) & ~v15)) & ~v15)) & 0xFFFFFFFFFFFFFFF8)
         + 16) & 0xFFFFFFF8) != 0)
      v20 = 2;
    else
      v20 = a2 - v10 + 1;
    if (v20 >= 0x10000)
      v21 = 4;
    else
      v21 = 2;
    if (v20 < 0x100)
      v21 = 1;
    if (v20 >= 2)
      v22 = v21;
    else
      v22 = 0;
    __asm { BR              X4 }
  }
  v24 = (a1 + v12 + 8) & ~v12;
  if ((_DWORD)v6 == v10)
  {
    v25 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 48);
    v9 = v6;
    v11 = AssociatedTypeWitness;
    return v25(v24, v9, v11);
  }
  v26 = ~v15;
  v24 = (v16 + ((v14 + ((v14 + ((v14 + v24) & ~v12)) & ~v12)) & ~v12)) & v26;
  if ((_DWORD)v9 == v10)
  {
    v25 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v8 + 48);
    return v25(v24, v9, v11);
  }
  v27 = *(_QWORD *)(((v19 + ((v18 + ((v18 + ((v18 + ((v18 + v24) & v26)) & v26)) & v26)) & v26)) & 0xFFFFFFFFFFFFF8)
                  + 8) >> 60;
  if (((4 * (_DWORD)v27) & 0xC) != 0)
    return 16 - ((4 * (_DWORD)v27) & 0xC | (v27 >> 2));
  else
    return 0;
}

void sub_1D2C45F9C(unsigned int *a1, unsigned int a2, unsigned int a3)
{
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  size_t v14;
  unsigned int v15;
  int v16;
  int v17;
  unsigned int v18;

  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  v6 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v7 = *(_DWORD *)(v6 + 84);
  v8 = *(_QWORD *)(swift_checkMetadataState() - 8);
  if (*(_DWORD *)(v8 + 84) <= v7)
    v9 = v7;
  else
    v9 = *(_DWORD *)(v8 + 84);
  if (v9 <= 0xC)
    v9 = 12;
  v10 = *(unsigned __int8 *)(v6 + 80);
  v11 = *(_QWORD *)(v6 + 64);
  v12 = *(unsigned __int8 *)(v8 + 80);
  v13 = *(_QWORD *)(v8 + 64);
  v14 = ((v13
        + 7
        + ((v13
          + v12
          + ((v13
            + v12
            + ((v13
              + v12
              + ((v13
                + v12
                + ((v11 + v12 + ((v11 + v10 + ((v11 + v10 + ((v11 + v10 + ((v10 + 8) & ~v10)) & ~v10)) & ~v10)) & ~v10)) & ~v12)) & ~v12)) & ~v12)) & ~v12)) & ~v12)) & 0xFFFFFFFFFFFFFFF8)
      + 16;
  if (v9 >= a3)
  {
    v17 = 0u;
    if (a2 <= v9)
      goto LABEL_19;
  }
  else
  {
    if ((((_DWORD)v13
         + 7
         + (((_DWORD)v13
           + (_DWORD)v12
           + (((_DWORD)v13
             + (_DWORD)v12
             + (((_DWORD)v13
               + (_DWORD)v12
               + (((_DWORD)v13
                 + (_DWORD)v12
                 + (((_DWORD)v11
                   + (_DWORD)v12
                   + (((_DWORD)v11
                     + (_DWORD)v10
                     + (((_DWORD)v11
                       + (_DWORD)v10
                       + (((_DWORD)v11 + (_DWORD)v10 + (((_DWORD)v10 + 8) & ~(_DWORD)v10)) & ~(_DWORD)v10)) & ~(_DWORD)v10)) & ~(_DWORD)v10)) & ~(_DWORD)v12)) & ~(_DWORD)v12)) & ~(_DWORD)v12)) & ~(_DWORD)v12)) & ~(_DWORD)v12)) & 0xFFFFFFF8) == 0xFFFFFFF0)
      v15 = a3 - v9 + 1;
    else
      v15 = 2;
    if (v15 >= 0x10000)
      v16 = 4;
    else
      v16 = 2;
    if (v15 < 0x100)
      v16 = 1;
    if (v15 >= 2)
      v17 = v16;
    else
      v17 = 0;
    if (a2 <= v9)
LABEL_19:
      __asm { BR              X1 }
  }
  if ((_DWORD)v14)
  {
    v18 = ~v9 + a2;
    bzero(a1, v14);
    *a1 = v18;
  }
  __asm { BR              X10 }
}

void sub_1D2C461D4()
{
  uint64_t v0;
  char v1;
  uint64_t v2;

  *(_BYTE *)(v0 + v2) = v1;
  JUMPOUT(0x1D2C462C0);
}

void sub_1D2C461DC()
{
  int v0;
  uint64_t v1;
  uint64_t v2;

  *(_DWORD *)(v1 + v2) = 0;
  if (v0)
    JUMPOUT(0x1D2C461E4);
  JUMPOUT(0x1D2C462C0);
}

void sub_1D2C46254()
{
  uint64_t v0;
  __int16 v1;
  uint64_t v2;

  *(_WORD *)(v0 + v2) = v1;
  JUMPOUT(0x1D2C462C0);
}

void sub_1D2C4625C()
{
  uint64_t v0;
  int v1;
  uint64_t v2;

  *(_DWORD *)(v0 + v2) = v1;
  JUMPOUT(0x1D2C462C0);
}

uint64_t sub_1D2C46264@<X0>(uint64_t a1@<X2>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t (*v4)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v5;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  *(_WORD *)(v14 + v17) = 0;
  if (!(_DWORD)v13)
    JUMPOUT(0x1D2C462C0);
  v3 = (v14 + v9 + 8) & v12;
  if ((_DWORD)v16 == v7)
  {
    v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v18 + 56);
    v5 = v13;
    a1 = v16;
    a2 = v15;
  }
  else
  {
    v3 = (v10 + ((v8 + ((v8 + ((v8 + v3) & v12)) & v12)) & v12)) & v11;
    if ((_DWORD)a1 != v7)
      JUMPOUT(0x1D2C46270);
    v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(a3 + 56);
    v5 = v13;
  }
  return v4(v3, v5, a1, a2);
}

uint64_t _s6ServerVMa(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&_s6ServerVMn);
}

uint64_t __swift_instantiateGenericMetadata(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD v6[3];

  v6[0] = a2;
  v6[1] = a3;
  v6[2] = a4;
  return MEMORY[0x1D8245EFC](a1, v6, a5);
}

uint64_t sub_1D2C46314()
{
  return swift_allocateGenericValueMetadata();
}

uint64_t sub_1D2C4631C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  unint64_t v5;

  result = _s6ServerVMa_0(319, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a4);
  if (v5 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

unint64_t sub_1D2C46388(unint64_t a1, unint64_t a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v6 = *(_DWORD *)(v5 + 80);
  v7 = *(_QWORD *)(v5 + 64);
  if (v6 > 7
    || (*(_DWORD *)(v5 + 80) & 0x100000) != 0
    || v7 + ((v6 + 16) & (unint64_t)~v6) + 1 > 0x18)
  {
    v10 = *(_QWORD *)a2;
    *(_QWORD *)a1 = *(_QWORD *)a2;
    a1 = v10 + ((v6 & 0xF8 ^ 0x1F8) & (v6 + 16));
    swift_retain();
  }
  else
  {
    v11 = ~v6;
    *(_BYTE *)a1 = *(_BYTE *)a2;
    *(_QWORD *)((a1 & 0xFFFFFFFFFFFFFFF8) + 8) = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 8);
    v12 = (a1 & 0xFFFFFFFFFFFFFFF8) + v6;
    v13 = (a2 & 0xFFFFFFFFFFFFFFF8) + v6;
    v14 = (v12 + 16) & v11;
    v15 = (v13 + 16) & v11;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v14, v15, AssociatedTypeWitness);
    *(_BYTE *)(v14 + v7) = *(_BYTE *)(v15 + v7);
  }
  return a1;
}

uint64_t sub_1D2C46510(uint64_t a1)
{
  unint64_t v1;
  uint64_t AssociatedTypeWitness;

  v1 = a1 & 0xFFFFFFFFFFFFFFF8;
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  return (*(uint64_t (**)(unint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 8))((v1 + *(unsigned __int8 *)(*(_QWORD *)(AssociatedTypeWitness - 8) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(AssociatedTypeWitness - 8) + 80), AssociatedTypeWitness);
}

unint64_t sub_1D2C46608(unint64_t a1, unint64_t a2)
{
  unint64_t v3;
  unint64_t v4;
  uint64_t AssociatedTypeWitness;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v3 = a1 & 0xFFFFFFFFFFFFFFF8;
  v4 = a2 & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)((a1 & 0xFFFFFFFFFFFFFFF8) + 8) = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 8);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v6 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v7 = *(unsigned __int8 *)(v6 + 80);
  v8 = (v7 + 16 + v3) & ~v7;
  v9 = (v7 + 16 + v4) & ~v7;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(v8, v9, AssociatedTypeWitness);
  *(_BYTE *)(v8 + *(_QWORD *)(v6 + 64)) = *(_BYTE *)(v9 + *(_QWORD *)(v6 + 64));
  return a1;
}

unint64_t sub_1D2C46744(unint64_t a1, unint64_t a2)
{
  unint64_t v3;
  unint64_t v4;
  uint64_t AssociatedTypeWitness;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v3 = a1 & 0xFFFFFFFFFFFFFFF8;
  v4 = a2 & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)((a1 & 0xFFFFFFFFFFFFFFF8) + 8) = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 8);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v6 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v7 = *(unsigned __int8 *)(v6 + 80);
  v8 = (v7 + 16 + v3) & ~v7;
  v9 = (v7 + 16 + v4) & ~v7;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 24))(v8, v9, AssociatedTypeWitness);
  *(_BYTE *)(v8 + *(_QWORD *)(v6 + 64)) = *(_BYTE *)(v9 + *(_QWORD *)(v6 + 64));
  return a1;
}

unint64_t sub_1D2C46880(unint64_t a1, unint64_t a2)
{
  unint64_t v3;
  unint64_t v4;
  uint64_t AssociatedTypeWitness;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v3 = a1 & 0xFFFFFFFFFFFFFFF8;
  v4 = a2 & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)((a1 & 0xFFFFFFFFFFFFFFF8) + 8) = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 8);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v6 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v7 = *(unsigned __int8 *)(v6 + 80);
  v8 = (v7 + 16 + v3) & ~v7;
  v9 = (v7 + 16 + v4) & ~v7;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 32))(v8, v9, AssociatedTypeWitness);
  *(_BYTE *)(v8 + *(_QWORD *)(v6 + 64)) = *(_BYTE *)(v9 + *(_QWORD *)(v6 + 64));
  return a1;
}

unint64_t sub_1D2C469BC(unint64_t a1, unint64_t a2)
{
  unint64_t v3;
  unint64_t v4;
  uint64_t AssociatedTypeWitness;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v3 = a1 & 0xFFFFFFFFFFFFFFF8;
  v4 = a2 & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)((a1 & 0xFFFFFFFFFFFFFFF8) + 8) = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 8);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v6 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v7 = *(unsigned __int8 *)(v6 + 80);
  v8 = (v7 + 16 + v3) & ~v7;
  v9 = (v7 + 16 + v4) & ~v7;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 40))(v8, v9, AssociatedTypeWitness);
  *(_BYTE *)(v8 + *(_QWORD *)(v6 + 64)) = *(_BYTE *)(v9 + *(_QWORD *)(v6 + 64));
  return a1;
}

uint64_t sub_1D2C46AF8(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  int v11;
  unsigned int v12;
  int v13;
  int v14;
  unint64_t v15;
  unsigned int v17;
  int v18;

  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  v4 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0xFE)
    v6 = 254;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(unsigned __int8 *)(v4 + 80);
  v8 = *(_QWORD *)(v4 + 64);
  if (a2 <= v6)
    goto LABEL_23;
  v9 = v8 + ((v7 + 16) & ~v7) + 1;
  v10 = 8 * v9;
  if (v9 > 3)
    goto LABEL_7;
  v12 = ((a2 - v6 + ~(-1 << v10)) >> v10) + 1;
  if (HIWORD(v12))
  {
    v11 = *(_DWORD *)(a1 + v9);
    if (v11)
      goto LABEL_14;
  }
  else
  {
    if (v12 <= 0xFF)
    {
      if (v12 < 2)
        goto LABEL_23;
LABEL_7:
      v11 = *(unsigned __int8 *)(a1 + v9);
      if (!*(_BYTE *)(a1 + v9))
        goto LABEL_23;
LABEL_14:
      v13 = (v11 - 1) << v10;
      if (v9 > 3)
        v13 = 0;
      if ((_DWORD)v8 + (((_DWORD)v7 + 16) & ~(_DWORD)v7) != -1)
      {
        if (v9 <= 3)
          v14 = v8 + ((v7 + 16) & ~(_DWORD)v7) + 1;
        else
          v14 = 4;
        __asm { BR              X12 }
      }
      v18 = v6 + v13;
      return (v18 + 1);
    }
    v11 = *(unsigned __int16 *)(a1 + v9);
    if (*(_WORD *)(a1 + v9))
      goto LABEL_14;
  }
LABEL_23:
  v15 = ((a1 & 0xFFFFFFFFFFFFFFF8) + v7 + 16) & ~v7;
  if (v5 >= 0xFE)
    return (*(uint64_t (**)(unint64_t))(v4 + 48))(v15);
  v17 = *(unsigned __int8 *)(v15 + v8);
  if (v17 < 2)
    return 0;
  v18 = (v17 + 2147483646) & 0x7FFFFFFF;
  return (v18 + 1);
}

void sub_1D2C46D3C(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  uint64_t v6;
  unsigned int v7;
  size_t v8;
  unsigned int v9;
  int v10;
  unsigned int v11;
  int v12;

  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  v6 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  if (*(_DWORD *)(v6 + 84) <= 0xFEu)
    v7 = 254;
  else
    v7 = *(_DWORD *)(v6 + 84);
  v8 = *(_QWORD *)(v6 + 64)
     + ((*(unsigned __int8 *)(v6 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))
     + 1;
  if (a3 <= v7)
  {
    v9 = 0u;
  }
  else if (v8 <= 3)
  {
    v11 = ((a3 - v7 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
    if (HIWORD(v11))
    {
      v9 = 4u;
    }
    else if (v11 >= 0x100)
    {
      v9 = 2;
    }
    else
    {
      v9 = v11 > 1;
    }
  }
  else
  {
    v9 = 1u;
  }
  if (v7 < a2)
  {
    v10 = ~v7 + a2;
    if (v8 < 4)
    {
      if (*(_DWORD *)(v6 + 64) + ((*(unsigned __int8 *)(v6 + 80) + 16) & ~*(unsigned __int8 *)(v6 + 80)) != -1)
      {
        v12 = v10 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if ((_DWORD)v8 == 3)
        {
          *(_WORD *)a1 = v12;
          a1[2] = BYTE2(v12);
        }
        else if ((_DWORD)v8 == 2)
        {
          *(_WORD *)a1 = v12;
        }
        else
        {
          *a1 = v12;
        }
      }
    }
    else
    {
      bzero(a1, v8);
      *(_DWORD *)a1 = v10;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X14 }
}

uint64_t _s16VerifiableServerVMa(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&_s16VerifiableServerVMn);
}

uint64_t type metadata accessor for SecureBytes.Backing()
{
  uint64_t result;

  result = qword_1ED985920;
  if (!qword_1ED985920)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t sub_1D2C47040()
{
  return swift_initClassMetadata2();
}

uint64_t sub_1D2C4707C()
{
  uint64_t result;

  type metadata accessor for SecureBytes.Backing();
  result = swift_allocObject();
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)(result + 24) = 0;
  off_1ED985910 = (_UNKNOWN *)result;
  return result;
}

uint64_t sub_1D2C470AC(const void *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v15[2];
  uint64_t v16;

  result = _swift_stdlib_malloc_size(a1);
  if (a2 < 0)
  {
    __break(1u);
LABEL_10:
    __break(1u);
    return result;
  }
  v8 = (uint64_t)a1 + 32;
  v9 = (uint64_t)a1 + result;
  v10 = result - 32;
  result = sub_1D2C49DB8(0, a2, result - 32, v8, v9);
  if ((v11 & 1) != 0)
    v12 = v10;
  else
    v12 = result;
  if (v12 < 0)
    goto LABEL_10;
  v15[0] = v8;
  v15[1] = v8 + v12;
  v16 = 0;
  sub_1D2C59EDC(v15, &v16);
  if (!v3)
  {
    v13 = *a3;
    v14 = v16;
    swift_beginAccess();
    *(_QWORD *)(v13 + 16) = v14;
  }
  return swift_release();
}

uint64_t sub_1D2C4718C(const void *a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5)
{
  size_t v9;
  uint64_t v10;
  uint64_t v11;
  size_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;

  v9 = _swift_stdlib_malloc_size(a1);
  if (a2 < 0)
  {
    __break(1u);
  }
  else
  {
    v10 = (uint64_t)a1 + 32;
    v11 = (uint64_t)a1 + v9;
    v12 = v9 - 32;
    v13 = sub_1D2C49DB8(0, a2, v9 - 32, v10, v11);
    if ((v14 & 1) != 0)
      v15 = v12;
    else
      v15 = v13;
    if ((v15 & 0x8000000000000000) == 0)
    {
      if (qword_1EFC9F6E8 == -1)
        goto LABEL_7;
      goto LABEL_11;
    }
  }
  __break(1u);
LABEL_11:
  swift_once();
LABEL_7:
  cckem_full_ctx_init();
  result = cckem_generate_key();
  if ((_DWORD)result)
  {
    __break(1u);
  }
  else
  {
    v17 = *a3;
    result = swift_beginAccess();
    *(_QWORD *)(v17 + 16) = a5;
  }
  return result;
}

uint64_t sub_1D2C47284(const void *a1, uint64_t a2, uint64_t (*a3)(_QWORD *, uint64_t *), uint64_t a4, uint64_t *a5)
{
  uint64_t v5;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD v18[2];
  uint64_t v19;

  result = _swift_stdlib_malloc_size(a1);
  if (a2 < 0)
  {
    __break(1u);
LABEL_10:
    __break(1u);
    return result;
  }
  v11 = (uint64_t)a1 + 32;
  v12 = (uint64_t)a1 + result;
  v13 = result - 32;
  result = sub_1D2C49DB8(0, a2, result - 32, v11, v12);
  if ((v14 & 1) != 0)
    v15 = v13;
  else
    v15 = result;
  if (v15 < 0)
    goto LABEL_10;
  v18[0] = v11;
  v18[1] = v11 + v15;
  v19 = 0;
  result = a3(v18, &v19);
  if (!v5)
  {
    v16 = *a5;
    v17 = v19;
    result = swift_beginAccess();
    *(_QWORD *)(v16 + 16) = v17;
  }
  return result;
}

char *sub_1D2C47358(char *result, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  _QWORD *v4;
  char *v7;
  size_t v8;
  _QWORD *v9;
  uint64_t v10;
  size_t v11;
  BOOL v12;
  size_t v13;
  size_t v14;
  size_t v15;

  if (a2 < 0)
  {
    __break(1u);
    goto LABEL_11;
  }
  v4 = v3;
  v7 = result;
  result = (char *)_swift_stdlib_malloc_size(result);
  if ((uint64_t)(result - 32) < a3)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  v8 = _swift_stdlib_malloc_size(v4) - 32;
  v9 = v4 + 2;
  result = (char *)swift_beginAccess();
  v10 = v4[2];
  v11 = v8 - v10;
  if (__OFSUB__(v8, v10))
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  v12 = __OFSUB__(a3, a2);
  v13 = a3 - a2;
  if (v12)
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  v12 = __OFSUB__(v11, v13);
  v14 = v11 - v13;
  if (v12)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  if ((v14 & 0x8000000000000000) != 0)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  result = (char *)_swift_stdlib_malloc_size(v4);
  if ((uint64_t)(result - 32) < v10)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  result = (char *)memmove((char *)v4 + v10 + 32, &v7[a2 + 32], v13);
  v15 = *v9 + v13;
  if (!__OFADD__(*v9, v13))
  {
    result = (char *)swift_beginAccess();
    *v9 = v15;
    return result;
  }
LABEL_17:
  __break(1u);
  return result;
}

size_t sub_1D2C47468()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  size_t v3;
  size_t result;
  int64_t v5;
  size_t v6;
  BOOL v7;
  size_t v8;
  uint64_t v9;
  uint64_t v10;

  v1 = v0;
  v2 = sub_1D2CAAF54();
  v3 = _swift_stdlib_malloc_size(v1) - 32;
  result = swift_beginAccess();
  v5 = v1[2];
  v6 = v3 - v5;
  if (__OFSUB__(v3, v5))
  {
    __break(1u);
    goto LABEL_8;
  }
  v7 = __OFSUB__(v6, v2);
  v8 = v6 - v2;
  if (v7)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  if ((v8 & 0x8000000000000000) != 0)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  result = _swift_stdlib_malloc_size(v1);
  if ((uint64_t)(result - 32) < v5)
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  result = sub_1D2CAAFB4();
  v9 = v1[2];
  v7 = __OFADD__(v9, v2);
  v10 = v9 + v2;
  if (!v7)
  {
    v1[2] = v10;
    return result;
  }
LABEL_11:
  __break(1u);
  return result;
}

size_t sub_1D2C47554(int64_t a1)
{
  const void **v1;
  const void **v2;
  char *v4;
  size_t result;
  unsigned int v6;
  unsigned int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v2 = v1;
  v4 = (char *)*v2;
  result = _swift_stdlib_malloc_size(*v2);
  if ((uint64_t)(result - 32) < a1)
  {
    if (a1 < 0)
    {
      __break(1u);
    }
    else if (!HIDWORD(a1))
    {
      if ((_DWORD)a1)
      {
        v6 = (a1 - 1) | ((a1 - 1) >> 1) | ((((_DWORD)a1 - 1) | ((a1 - 1) >> 1)) >> 2);
        v7 = v6 | (v6 >> 4) | ((v6 | (v6 >> 4)) >> 8);
        v8 = v7 | HIWORD(v7);
        if (v8 == -1)
          v9 = 0xFFFFFFFFLL;
        else
          v9 = (v8 + 1);
      }
      else
      {
        v9 = 1;
      }
      type metadata accessor for SecureBytes.Backing();
      v10 = swift_allocObject();
      *(_QWORD *)(v10 + 16) = 0;
      *(_QWORD *)(v10 + 24) = v9;
      result = swift_beginAccess();
      v11 = *((_QWORD *)v4 + 2);
      if ((v11 & 0x8000000000000000) == 0)
      {
        sub_1D2C47358(v4, 0, v11);
        result = swift_release();
        *v2 = (const void *)v10;
        return result;
      }
LABEL_14:
      __break(1u);
      return result;
    }
    __break(1u);
    goto LABEL_14;
  }
  return result;
}

uint64_t sub_1D2C4763C(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a1;
  v3 = *a2;
  swift_beginAccess();
  return sub_1D2CA8D08(v2 + 32, v2 + 32 + *(_QWORD *)(v2 + 16), v3) & 1;
}

void sub_1D2C4769C(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

uint64_t sub_1D2C476A4@<X0>(_QWORD *a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t result;

  v3 = *v1;
  result = swift_beginAccess();
  *a1 = *(_QWORD *)(v3 + 16);
  return result;
}

uint64_t (*sub_1D2C476E8(_BYTE *a1, _QWORD *a2))()
{
  _QWORD *v2;

  *a1 = *(_BYTE *)(*v2 + *a2 + 32);
  return nullsub_1;
}

uint64_t sub_1D2C47710@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;

  v5 = *a1;
  v4 = a1[1];
  v6 = *v2;
  result = swift_beginAccess();
  v8 = *(_QWORD *)(v6 + 16);
  if (v8 < 0)
  {
    __break(1u);
    goto LABEL_6;
  }
  if (v5 < 0)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  if (v8 >= v4)
  {
    *a2 = v5;
    a2[1] = v4;
    a2[2] = v6;
    return swift_retain();
  }
LABEL_7:
  __break(1u);
  return result;
}

uint64_t sub_1D2C47788@<X0>(_QWORD *a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;

  v3 = *v1;
  result = swift_beginAccess();
  v5 = *(_QWORD *)(v3 + 16);
  if (v5 < 0)
  {
    __break(1u);
  }
  else
  {
    *a1 = 0;
    a1[1] = v5;
  }
  return result;
}

BOOL sub_1D2C477D4()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_beginAccess();
  return *(_QWORD *)(v1 + 16) == 0;
}

void sub_1D2C47818(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = 0;
  *(_WORD *)(a1 + 8) = 256;
}

uint64_t sub_1D2C47830(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;

  result = swift_beginAccess();
  v9 = *(_QWORD *)(a4 + 16);
  if (v9 < a3 || (a3 | a1) < 0 || v9 < a1)
  {
    __break(1u);
    goto LABEL_16;
  }
  v10 = a3 - a1;
  if (a2 >= 1)
  {
    if (v10 < 0 || v10 >= a2)
      goto LABEL_11;
    return 0;
  }
  if (v10 <= 0 && v10 > a2)
    return 0;
LABEL_11:
  result = a1 + a2;
  if (__OFADD__(a1, a2))
  {
LABEL_16:
    __break(1u);
LABEL_17:
    __break(1u);
    return result;
  }
  if (result < 0 || v9 < result)
    goto LABEL_17;
  return result;
}

uint64_t *sub_1D2C478F8(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  BOOL v4;
  BOOL v5;

  v2 = *result;
  v3 = a2[1];
  if (*result >= *a2)
  {
    v5 = __OFSUB__(v2, v3);
    v4 = v2 - v3 < 0;
  }
  else
  {
    v5 = 0;
    v4 = 0;
  }
  if (v4 == v5)
    __break(1u);
  return result;
}

_QWORD *sub_1D2C47914(_QWORD *result, _QWORD *a2)
{
  if (*result < *a2 || a2[1] < *result)
    __break(1u);
  return result;
}

_QWORD *sub_1D2C47930(_QWORD *result, _QWORD *a2)
{
  if (*result < *a2 || a2[1] < result[1])
    __break(1u);
  return result;
}

_QWORD *sub_1D2C4794C@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  if (__OFADD__(*result, 1))
    __break(1u);
  else
    *a2 = *result + 1;
  return result;
}

_QWORD *sub_1D2C47964(_QWORD *result)
{
  if (__OFADD__(*result, 1))
    __break(1u);
  else
    ++*result;
  return result;
}

void sub_1D2C4797C(_QWORD *a1@<X8>)
{
  _QWORD *v1;

  *a1 = *v1;
  a1[1] = 0;
}

uint64_t sub_1D2C47988()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_beginAccess();
  return *(_QWORD *)(v1 + 16);
}

uint64_t sub_1D2C479C4()
{
  return 2;
}

uint64_t sub_1D2C479CC()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = sub_1D2C49930(*v0);
  swift_release();
  return v1;
}

uint64_t sub_1D2C47A00(uint64_t a1, _BYTE *a2, uint64_t a3)
{
  uint64_t *v3;

  return sub_1D2C47A08(a1, a2, a3, *v3);
}

uint64_t sub_1D2C47A08(uint64_t result, _BYTE *a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v5 = (_QWORD *)result;
  if (!a2)
  {
    v6 = 0;
    goto LABEL_14;
  }
  v6 = a3;
  if (!a3)
  {
LABEL_14:
    *v5 = a4;
    v5[1] = v6;
    return v6;
  }
  if ((a3 & 0x8000000000000000) == 0)
  {
    result = swift_beginAccess();
    v8 = *(_QWORD *)(a4 + 16);
    if (v8)
    {
      *a2 = *(_BYTE *)(a4 + 32);
      v9 = v6 - 1;
      if (v6 != 1)
      {
        v10 = 0;
        while (v9 != v10)
        {
          if (__OFSUB__(v8, v10 + 1))
            goto LABEL_16;
          if (v8 - 1 == v10)
            goto LABEL_13;
          a2[v10 + 1] = *(_BYTE *)(a4 + 33 + v10);
          if (v9 == ++v10)
            goto LABEL_14;
        }
        __break(1u);
LABEL_16:
        __break(1u);
        goto LABEL_17;
      }
    }
    else
    {
LABEL_13:
      v6 = v8;
    }
    goto LABEL_14;
  }
LABEL_17:
  __break(1u);
  return result;
}

uint64_t sub_1D2C47ADC@<X0>(uint64_t (*a1)(uint64_t, _QWORD)@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  return sub_1D2C47AF8(a1, a2, a3);
}

uint64_t sub_1D2C47AF8@<X0>(uint64_t (*a1)(uint64_t, _QWORD)@<X0>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  return sub_1D2C48ADC(a1, a2, a3);
}

_QWORD *sub_1D2C47B1C@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  if (__OFSUB__(*result, 1))
    __break(1u);
  else
    *a2 = *result - 1;
  return result;
}

_QWORD *sub_1D2C47B34(_QWORD *result)
{
  if (__OFSUB__(*result, 1))
    __break(1u);
  else
    --*result;
  return result;
}

_QWORD *sub_1D2C47B4C@<X0>(_QWORD *result@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;

  v5 = *result + a2;
  if (__OFADD__(*result, a2))
  {
    __break(1u);
  }
  else
  {
    v6 = *v3;
    result = (_QWORD *)swift_beginAccess();
    if ((v5 & 0x8000000000000000) == 0 && *(_QWORD *)(v6 + 16) >= v5)
    {
      *a3 = v5;
      return result;
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_1D2C47BB8@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t *v4;
  uint64_t result;
  char v7;

  result = sub_1D2C47830(*a1, a2, *a3, *v4);
  *(_QWORD *)a4 = result;
  *(_BYTE *)(a4 + 8) = v7 & 1;
  return result;
}

uint64_t sub_1D2C47BF0(uint64_t *a1, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;

  v3 = *a1;
  v4 = *a2;
  v5 = *v2;
  result = swift_beginAccess();
  v7 = *(_QWORD *)(v5 + 16);
  if (v7 >= v4 && ((v4 | v3) & 0x8000000000000000) == 0 && v7 >= v3)
    return v4 - v3;
  __break(1u);
  return result;
}

_BYTE *sub_1D2C47C5C(_BYTE *result, _QWORD *a2)
{
  _QWORD *v2;

  *(_BYTE *)(*v2 + *a2 + 32) = *result;
  return result;
}

uint64_t (*sub_1D2C47C74(uint64_t a1, uint64_t *a2))(uint64_t result)
{
  _QWORD *v2;
  uint64_t v3;

  v3 = *a2;
  *(_QWORD *)a1 = v2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(*v2 + v3 + 32);
  return sub_1D2C47CA0;
}

uint64_t sub_1D2C47CA0(uint64_t result)
{
  *(_BYTE *)(**(_QWORD **)result + *(_QWORD *)(result + 8) + 32) = *(_BYTE *)(result + 16);
  return result;
}

uint64_t sub_1D2C47CB8(uint64_t *a1, uint64_t *a2)
{
  uint64_t *v2;

  sub_1D2C4981C(v2, *a2, a2[1], *a1, a1[1], a1[2]);
  return swift_release();
}

void (*sub_1D2C47CF0(_QWORD *a1, uint64_t *a2))(_QWORD *a1)
{
  _QWORD *v4;

  v4 = malloc(0x28uLL);
  *a1 = v4;
  v4[4] = sub_1D2C47D68(v4, *a2, a2[1]);
  return sub_1D2C47D3C;
}

void sub_1D2C47D3C(_QWORD *a1)
{
  void *v1;

  v1 = (void *)*a1;
  (*(void (**)(_QWORD))(*a1 + 32))(*a1);
  free(v1);
}

void (*sub_1D2C47D68(_QWORD *a1, uint64_t a2, uint64_t a3))(uint64_t **a1)
{
  uint64_t *v3;
  _QWORD *v7;
  uint64_t v8;
  void (*result)(uint64_t **);
  uint64_t v10;

  v7 = malloc(0x48uLL);
  *a1 = v7;
  v7[7] = a3;
  v7[8] = v3;
  v7[6] = a2;
  v8 = *v3;
  result = (void (*)(uint64_t **))swift_beginAccess();
  v10 = *(_QWORD *)(v8 + 16);
  if (v10 < 0)
  {
    __break(1u);
    goto LABEL_6;
  }
  if (a2 < 0)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  if (v10 >= a3)
  {
    *v7 = a2;
    v7[1] = a3;
    v7[2] = v8;
    swift_retain();
    return sub_1D2C47E0C;
  }
LABEL_7:
  __break(1u);
  return result;
}

void sub_1D2C47E0C(uint64_t **a1)
{
  uint64_t *v1;

  v1 = *a1;
  sub_1D2C4981C((uint64_t *)(*a1)[8], v1[6], (*a1)[7], *v1, v1[1], v1[2]);
  swift_release();
  free(v1);
}

uint64_t sub_1D2C47E48@<X0>(uint64_t (*a1)(char *)@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;

  result = sub_1D2C49C90(a1);
  if (!v2)
    *a2 = result;
  return result;
}

_QWORD *sub_1D2C47E70(_QWORD *result, _QWORD *a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;

  v3 = *result;
  v4 = *a2;
  if (__OFSUB__(*a2, *result))
  {
    __break(1u);
  }
  else if (*a2 != *result)
  {
    v5 = *v2 + 32;
    v6 = *(_BYTE *)(v5 + v3);
    *(_BYTE *)(v5 + v3) = *(_BYTE *)(v5 + v4);
    *(_BYTE *)(v5 + v4) = v6;
  }
  return result;
}

uint64_t sub_1D2C47EA4()
{
  return sub_1D2CAADEC();
}

uint64_t sub_1D2C47EC4()
{
  return sub_1D2CAADE0();
}

uint64_t sub_1D2C47EE4(uint64_t a1, int64_t a2, uint64_t a3, uint64_t a4)
{
  const void **v4;
  const void **v5;
  _QWORD *v10;
  uint64_t result;
  int64_t v12;
  int64_t v13;
  BOOL v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int v17;
  int v18;
  uint64_t v19;
  const void *v20;
  char *v21;
  uint64_t v22;

  v5 = v4;
  v10 = (char *)*v4 + 16;
  result = swift_beginAccess();
  v12 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_20;
  }
  v13 = *v10 - v12;
  if (__OFSUB__(*v10, v12))
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  result = sub_1D2CAAF54();
  v14 = __OFADD__(v13, result);
  v15 = v13 + result;
  if (v14)
  {
LABEL_21:
    __break(1u);
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  result = swift_isUniquelyReferenced_nonNull_native();
  if ((_DWORD)result)
  {
    result = _swift_stdlib_malloc_size(*v5);
    if (result - 32 >= v15)
    {
      if (a2 >= a1)
        return sub_1D2C480B0(a1, a2, a3, a4);
      goto LABEL_26;
    }
  }
  if (v15 < 0)
    goto LABEL_22;
  if (HIDWORD(v15))
  {
LABEL_23:
    __break(1u);
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  if ((_DWORD)v15)
  {
    v16 = (v15 - 1) | ((v15 - 1) >> 1) | ((((_DWORD)v15 - 1) | ((v15 - 1) >> 1)) >> 2);
    v17 = v16 | (v16 >> 4) | ((v16 | (v16 >> 4)) >> 8);
    v18 = v17 | HIWORD(v17);
    if (v18 == -1)
      v19 = 0xFFFFFFFFLL;
    else
      v19 = (v18 + 1);
  }
  else
  {
    v19 = 1;
  }
  type metadata accessor for SecureBytes.Backing();
  result = swift_allocObject();
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)(result + 24) = v19;
  if (a1 < 0)
    goto LABEL_24;
  v20 = (const void *)result;
  v21 = (char *)*v5;
  result = swift_beginAccess();
  v22 = *((_QWORD *)v21 + 2);
  if (v22 < a2)
  {
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
    return result;
  }
  sub_1D2C47358(v21, 0, a1);
  sub_1D2C47468();
  sub_1D2C47358((char *)*v5, a2, v22);
  *v5 = v20;
  return swift_release();
}

uint64_t sub_1D2C480B0(uint64_t a1, int64_t a2, uint64_t a3, uint64_t a4)
{
  int64_t *v4;
  int64_t *v5;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  int64_t *v15;
  uint64_t result;
  int64_t v17;
  int64_t v18;
  BOOL v19;
  int64_t v20;
  int64_t v21;
  uint64_t v22;
  uint64_t v23;
  int64_t v24;
  uint64_t v25;
  uint64_t v26;
  int64_t v27;

  v5 = v4;
  v10 = *(_QWORD *)(a4 - 8);
  MEMORY[0x1E0C80A78]();
  v12 = (char *)&v25 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, v13, v14);
  v15 = v5 + 2;
  result = swift_beginAccess();
  v17 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_11;
  }
  v27 = a2;
  v18 = *v15 - v17;
  if (__OFSUB__(*v15, v17))
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  result = sub_1D2CAAF54();
  v19 = __OFADD__(v18, result);
  v20 = v18 + result;
  if (v19)
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  v26 = a1;
  v21 = _swift_stdlib_malloc_size(v5) - 32;
  result = (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, a4);
  if (v21 < v20)
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  result = sub_1D2CAAF54();
  v22 = result - v17;
  if (__OFSUB__(result, v17))
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  result = v27;
  if (*v15 < v27)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  sub_1D2C48FA8(v27, *v15, v22);
  sub_1D2C4905C(a3, v26, a4);
  result = sub_1D2CAAF54();
  v23 = result - v17;
  if (__OFSUB__(result, v17))
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  v19 = __OFADD__(*v15, v23);
  v24 = *v15 + v23;
  if (!v19)
  {
    *v15 = v24;
    return result;
  }
LABEL_17:
  __break(1u);
  return result;
}

uint64_t sub_1D2C48240(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t AssociatedTypeWitness;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t result;
  size_t v14;
  uint64_t v15;
  _BYTE v16[16];
  _QWORD *v17;
  char v18;
  unsigned __int8 v19;
  char v20;

  v3 = v2;
  v6 = *(_QWORD *)(a2 - 8);
  MEMORY[0x1E0C80A78]();
  v8 = &v16[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v10 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78]();
  v12 = &v16[-v11];
  v17 = v3;
  result = sub_1D2CAAEC4();
  if (v18 == 1)
  {
    (*(void (**)(_BYTE *, uint64_t, uint64_t))(v6 + 16))(v8, a1, a2);
    sub_1D2CAAEB8();
    swift_getAssociatedConformanceWitness();
    sub_1D2CAAFA8();
    if ((v20 & 1) == 0)
    {
      v14 = v19;
      do
      {
        v15 = *v3;
        swift_beginAccess();
        sub_1D2C95680(*(_QWORD *)(v15 + 16), *(_QWORD *)(v15 + 16), v14);
        sub_1D2CAAFA8();
        v14 = v19;
      }
      while (v20 != 1);
    }
    return (*(uint64_t (**)(_BYTE *, uint64_t))(v10 + 8))(v12, AssociatedTypeWitness);
  }
  return result;
}

uint64_t sub_1D2C48410(void *a1, size_t a2, uint64_t *a3)
{
  uint64_t v5;

  v5 = *a3;
  swift_beginAccess();
  return sub_1D2C9581C(*(_QWORD *)(v5 + 16), *(_QWORD *)(v5 + 16), a1, a2);
}

uint64_t sub_1D2C48480@<X0>(_QWORD *a1@<X8>)
{
  if (qword_1ED985918 != -1)
    swift_once();
  *a1 = off_1ED985910;
  return swift_retain();
}

uint64_t sub_1D2C484D0(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  sub_1D2C47EE4(*a1, a1[1], a2, a3);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 8))(a2, a3);
}

_QWORD *sub_1D2C48524@<X0>(unsigned __int8 *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  _QWORD *result;

  result = sub_1D2C4A288(*a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1D2C4854C()
{
  return sub_1D2CAAF6C();
}

uint64_t sub_1D2C48564(unsigned __int8 *a1)
{
  uint64_t *v1;
  uint64_t v2;
  size_t v3;

  v2 = *v1;
  v3 = *a1;
  swift_beginAccess();
  return sub_1D2C95680(*(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 16), v3);
}

uint64_t sub_1D2C485BC(uint64_t a1, uint64_t a2)
{
  sub_1D2C48240(a1, a2);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 8))(a1, a2);
}

uint64_t sub_1D2C485F8(unsigned __int8 *a1, int64_t *a2)
{
  return sub_1D2C95680(*a2, *a2, *a1);
}

uint64_t sub_1D2C48608()
{
  return sub_1D2CAAF60();
}

uint64_t sub_1D2C48620@<X0>(int64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t *v2;
  int64_t v4;
  uint64_t v5;
  uint64_t result;
  int64_t v7;
  char v8;

  v4 = *a1;
  v5 = *v2;
  result = swift_beginAccess();
  if (!*(_QWORD *)(v5 + 16))
  {
    __break(1u);
    goto LABEL_6;
  }
  v7 = v4 + 1;
  if (__OFADD__(v4, 1))
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  if (v7 >= v4)
  {
    v8 = *(_BYTE *)(v5 + v4 + 32);
    result = sub_1D2C97E94(v4, v7);
    *a2 = v8;
    return result;
  }
LABEL_7:
  __break(1u);
  return result;
}

uint64_t sub_1D2C486A0(int64_t *a1)
{
  return sub_1D2C97E94(*a1, a1[1]);
}

void sub_1D2C486AC(_WORD *a1@<X8>)
{
  *a1 = 256;
}

int64_t sub_1D2C486B8@<X0>(_BYTE *a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  int64_t result;
  uint64_t v5;
  char v6;
  char v7;

  v3 = *v1;
  result = swift_beginAccess();
  v5 = *(_QWORD *)(v3 + 16);
  if (!v5)
  {
    __break(1u);
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  v6 = *(_BYTE *)(v3 + 32);
  result = sub_1D2C47830(0, 1, v5, v3);
  if ((v7 & 1) == 0)
  {
    if ((result & 0x8000000000000000) == 0)
    {
      result = sub_1D2C97E94(0, result);
      *a1 = v6;
      return result;
    }
    goto LABEL_6;
  }
LABEL_7:
  __break(1u);
  return result;
}

int64_t sub_1D2C48740(int64_t result)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  char v4;

  if (result)
  {
    v2 = result;
    if (result < 0)
    {
      __break(1u);
    }
    else
    {
      v3 = *v1;
      swift_beginAccess();
      result = sub_1D2C47830(0, v2, *(_QWORD *)(v3 + 16), v3);
      if ((v4 & 1) != 0)
      {
LABEL_9:
        __break(1u);
        return result;
      }
      if ((result & 0x8000000000000000) == 0)
        return sub_1D2C97E94(0, result);
    }
    __break(1u);
    goto LABEL_9;
  }
  return result;
}

uint64_t sub_1D2C487C4(char a1)
{
  uint64_t *v1;
  uint64_t v2;
  int64_t v3;

  v2 = *v1;
  if ((a1 & 1) != 0)
  {
    swift_beginAccess();
    v3 = *(_QWORD *)(v2 + 16);
    if ((v3 & 0x8000000000000000) == 0)
      return sub_1D2C97E94(0, v3);
    __break(1u);
    goto LABEL_7;
  }
  swift_release();
  if (qword_1ED985918 != -1)
LABEL_7:
    swift_once();
  *v1 = (uint64_t)off_1ED985910;
  return swift_retain();
}

uint64_t sub_1D2C48860(uint64_t (*a1)(char *))
{
  return sub_1D2C48874(a1);
}

uint64_t sub_1D2C48874(uint64_t (*a1)(char *))
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  _QWORD *v5;
  uint64_t result;
  int64_t v7;
  uint64_t v8;
  BOOL v9;
  int64_t v10;
  char v11;
  char v12;

  v4 = *v1;
  v5 = (_QWORD *)(*v1 + 16);
  swift_retain();
  result = swift_beginAccess();
  v7 = 0;
  v8 = v4 + 32;
  do
  {
    if (__OFSUB__(*v5, v7))
    {
      __break(1u);
LABEL_25:
      __break(1u);
LABEL_26:
      __break(1u);
LABEL_27:
      __break(1u);
LABEL_28:
      __break(1u);
LABEL_29:
      __break(1u);
      return result;
    }
    if (v7 == *v5)
      goto LABEL_9;
    v12 = *(_BYTE *)(v4 + v7 + 32);
    result = a1(&v12);
    if (v2)
      return swift_release();
    if ((result & 1) != 0)
    {
      result = swift_release();
      v10 = v7 + 1;
      if (__OFADD__(v7, 1))
      {
        __break(1u);
        goto LABEL_14;
      }
      while (!__OFSUB__(*v5, v10))
      {
        if (*v5 == v10)
        {
          if (v10 < v7)
            goto LABEL_29;
          return sub_1D2C97E94(v7, v10);
        }
        v12 = *(_BYTE *)(v8 + v10);
        result = a1(&v12);
        if ((result & 1) == 0)
        {
          if (__OFSUB__(v10, v7))
            goto LABEL_28;
          if (v10 != v7)
          {
            v11 = *(_BYTE *)(v8 + v7);
            *(_BYTE *)(v8 + v7) = *(_BYTE *)(v8 + v10);
            *(_BYTE *)(v8 + v10) = v11;
          }
LABEL_14:
          v9 = __OFADD__(v7++, 1);
          if (v9)
            goto LABEL_27;
        }
        v9 = __OFADD__(v10++, 1);
        if (v9)
          goto LABEL_26;
      }
      goto LABEL_25;
    }
    v9 = __OFADD__(v7++, 1);
  }
  while (!v9);
  __break(1u);
LABEL_9:
  swift_release();
  v10 = *(_QWORD *)(v4 + 16);
  v7 = v10;
  return sub_1D2C97E94(v7, v10);
}

uint64_t sub_1D2C489F8(uint64_t (*a1)(uint64_t, uint64_t), uint64_t a2, uint64_t a3)
{
  swift_beginAccess();
  return a1(a3 + 32, a3 + 32 + *(_QWORD *)(a3 + 16));
}

uint64_t sub_1D2C48A6C(uint64_t (*a1)(uint64_t, uint64_t))
{
  uint64_t v1;

  swift_beginAccess();
  return a1(v1 + 32, v1 + 32 + *(_QWORD *)(v1 + 16));
}

uint64_t sub_1D2C48ADC@<X0>(uint64_t (*a1)(uint64_t, _QWORD)@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;

  swift_beginAccess();
  result = a1(v3 + 32, *(_QWORD *)(v3 + 16));
  if (!v4)
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 56))(a3, 0, 1, a2);
  return result;
}

uint64_t sub_1D2C48B74(uint64_t (*a1)(uint64_t, uint64_t), uint64_t a2)
{
  uint64_t *v2;

  return sub_1D2C489F8(a1, a2, *v2);
}

uint64_t sub_1D2C48B8C@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v1;

  *a1 = *v1;
  return swift_retain();
}

uint64_t sub_1D2C48B98()
{
  return sub_1D2CAA804();
}

uint64_t sub_1D2C48BBC()
{
  return sub_1D2CAA840();
}

uint64_t sub_1D2C48BE4()
{
  return sub_1D2CAA828();
}

uint64_t sub_1D2C48BF4()
{
  return sub_1D2CAA81C();
}

uint64_t sub_1D2C48C0C()
{
  return sub_1D2CAA810();
}

uint64_t sub_1D2C48C28()
{
  return sub_1D2CAA8B8();
}

uint64_t sub_1D2C48C40()
{
  sub_1D2CAB134();
  sub_1D2CAB140();
  return sub_1D2CAB158();
}

uint64_t sub_1D2C48C84()
{
  return sub_1D2CAB140();
}

uint64_t sub_1D2C48CAC()
{
  sub_1D2CAB134();
  sub_1D2CAB140();
  return sub_1D2CAB158();
}

_QWORD *sub_1D2C48CEC(_QWORD *result, _QWORD *a2)
{
  if (!__OFSUB__(*a2, *result))
    return (_QWORD *)(*a2 == *result);
  __break(1u);
  return result;
}

BOOL sub_1D2C48D08(_QWORD *a1, _QWORD *a2)
{
  return *a1 < *a2;
}

BOOL sub_1D2C48D1C(_QWORD *a1, _QWORD *a2)
{
  return *a2 >= *a1;
}

BOOL sub_1D2C48D30(_QWORD *a1, _QWORD *a2)
{
  return *a1 >= *a2;
}

BOOL sub_1D2C48D44(_QWORD *a1, _QWORD *a2)
{
  return *a2 < *a1;
}

_QWORD *sub_1D2C48D58@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v2;

  if (__OFSUB__(*result, *v2))
    __break(1u);
  else
    *a2 = *result - *v2;
  return result;
}

_QWORD *sub_1D2C48D74@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v2;

  if (__OFADD__(*v2, *result))
    __break(1u);
  else
    *a2 = *v2 + *result;
  return result;
}

_QWORD *sub_1D2C48D90(_QWORD *result, uint64_t a2, uint64_t a3, _QWORD *a4, uint64_t a5, _QWORD *a6)
{
  if (__OFADD__(*a4, *a6))
  {
    __break(1u);
  }
  else
  {
    *result = *a4 + *a6;
    return 0;
  }
  return result;
}

uint64_t sub_1D2C48DB4()
{
  uint64_t v1;

  type metadata accessor for SecureBytes.Backing();
  sub_1D2CAA8AC();
  return v1;
}

size_t sub_1D2C48E18@<X0>(size_t result@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  int64_t v4;
  size_t v5;
  const void *v6;
  unsigned int v7;
  unsigned int v8;
  int v9;
  uint64_t v10;
  _QWORD *v11;

  v4 = a2 - result;
  if (result)
    v5 = a2 - result;
  else
    v5 = 0;
  if ((v5 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_17;
  }
  if (HIDWORD(v5))
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  v6 = (const void *)result;
  if ((_DWORD)v5)
  {
    v7 = (v5 - 1) | ((v5 - 1) >> 1) | ((((_DWORD)v5 - 1) | ((v5 - 1) >> 1)) >> 2);
    v8 = v7 | (v7 >> 4) | ((v7 | (v7 >> 4)) >> 8);
    v9 = v8 | HIWORD(v8);
    if (v9 == -1)
      v10 = 0xFFFFFFFFLL;
    else
      v10 = (v9 + 1);
  }
  else
  {
    v10 = 1;
  }
  type metadata accessor for SecureBytes.Backing();
  v11 = (_QWORD *)swift_allocObject();
  v11[2] = 0;
  v11[3] = v10;
  _swift_stdlib_malloc_size(v11);
  if (v6)
    memmove(v11 + 4, v6, v4);
  else
    v4 = 0;
  swift_beginAccess();
  v11[2] = v4;
  result = _swift_stdlib_malloc_size(v11);
  if ((uint64_t)(result - 32) >= v4)
  {
    *a3 = v11;
    return result;
  }
LABEL_18:
  __break(1u);
  return result;
}

uint64_t sub_1D2C48F30()
{
  uint64_t v0;

  swift_beginAccess();
  memset_s((void *)(v0 + 32), *(_QWORD *)(v0 + 24), 0, *(_QWORD *)(v0 + 24));
  return swift_deallocClassInstance();
}

uint64_t sub_1D2C48F80()
{
  return type metadata accessor for SecureBytes.Backing();
}

ValueMetadata *type metadata accessor for SecureBytes.BackingHeader()
{
  return &type metadata for SecureBytes.BackingHeader;
}

ValueMetadata *type metadata accessor for SecureBytes()
{
  return &type metadata for SecureBytes;
}

size_t sub_1D2C48FA8(size_t result, int64_t a2, uint64_t a3)
{
  char *v3;
  char *v4;
  size_t v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;

  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_10;
  }
  v4 = v3;
  v7 = result;
  result = _swift_stdlib_malloc_size(v4);
  v8 = v7 + a3;
  if (__OFADD__(v7, a3))
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  v9 = __OFADD__(a2, a3);
  v10 = a2 + a3;
  if (v9)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  if (v10 < v8)
  {
LABEL_12:
    __break(1u);
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  if (v8 < 1 || (uint64_t)(result - 32) < a2)
    goto LABEL_13;
  result = _swift_stdlib_malloc_size(v4);
  if ((uint64_t)(result - 32) >= v10)
  {
    _swift_stdlib_malloc_size(v4);
    return (size_t)memmove(&v4[v8 + 32], &v4[v7 + 32], a2 - v7);
  }
LABEL_14:
  __break(1u);
  return result;
}

uint64_t sub_1D2C4905C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  const void *v3;
  const void *v4;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  int64_t v13;
  int64_t v14;
  uint64_t v15;

  v4 = v3;
  v8 = *(_QWORD *)(a3 - 8);
  result = MEMORY[0x1E0C80A78]();
  v11 = (char *)&v15 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (v12 < 0)
  {
    __break(1u);
    goto LABEL_8;
  }
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v11, a1, a3);
  result = sub_1D2CAAF54();
  v13 = a2 + result;
  if (__OFADD__(a2, result))
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  v14 = _swift_stdlib_malloc_size(v4) - 32;
  result = (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v11, a3);
  if (v14 < v13)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  result = sub_1D2CAAF54();
  if (__OFADD__(a2, result))
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  if (a2 + result >= a2)
  {
    _swift_stdlib_malloc_size(v4);
    return sub_1D2CAAFB4();
  }
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_1D2C49180(uint64_t (*a1)(uint64_t, uint64_t))
{
  return sub_1D2C48A6C(a1);
}

unint64_t sub_1D2C491A4()
{
  unint64_t result;

  result = qword_1EFC9F848;
  if (!qword_1EFC9F848)
  {
    result = MEMORY[0x1D8245F38](&unk_1D2CAC990, &type metadata for SecureBytes.Index);
    atomic_store(result, (unint64_t *)&qword_1EFC9F848);
  }
  return result;
}

uint64_t sub_1D2C491E8()
{
  return MEMORY[0x1E0DEB430];
}

uint64_t sub_1D2C491F4()
{
  return MEMORY[0x1E0DEB468];
}

unint64_t sub_1D2C49204()
{
  unint64_t result;

  result = qword_1EFC9F850;
  if (!qword_1EFC9F850)
  {
    result = MEMORY[0x1D8245F38](&unk_1D2CAC9D8, &type metadata for SecureBytes.Index);
    atomic_store(result, (unint64_t *)&qword_1EFC9F850);
  }
  return result;
}

unint64_t sub_1D2C4924C()
{
  unint64_t result;

  result = qword_1EFC9F858;
  if (!qword_1EFC9F858)
  {
    result = MEMORY[0x1D8245F38](&unk_1D2CACDC8, &type metadata for SecureBytes);
    atomic_store(result, (unint64_t *)&qword_1EFC9F858);
  }
  return result;
}

unint64_t sub_1D2C49294()
{
  unint64_t result;

  result = qword_1EFC9F860;
  if (!qword_1EFC9F860)
  {
    result = MEMORY[0x1D8245F38](&unk_1D2CACB38, &type metadata for SecureBytes);
    atomic_store(result, (unint64_t *)&qword_1EFC9F860);
  }
  return result;
}

unint64_t sub_1D2C492DC()
{
  unint64_t result;

  result = qword_1EFC9F868;
  if (!qword_1EFC9F868)
  {
    result = MEMORY[0x1D8245F38](&unk_1D2CACA80, &type metadata for SecureBytes);
    atomic_store(result, (unint64_t *)&qword_1EFC9F868);
  }
  return result;
}

unint64_t sub_1D2C49324()
{
  unint64_t result;

  result = qword_1EFC9F870;
  if (!qword_1EFC9F870)
  {
    result = MEMORY[0x1D8245F38](&unk_1D2CACCC0, &type metadata for SecureBytes);
    atomic_store(result, (unint64_t *)&qword_1EFC9F870);
  }
  return result;
}

uint64_t sub_1D2C49368()
{
  return sub_1D2C497B4(&qword_1EFC9F878, (uint64_t (*)(void))sub_1D2C492DC, MEMORY[0x1E0DEDE50]);
}

uint64_t sub_1D2C49394()
{
  return sub_1D2C497B4(&qword_1EFC9F888, (uint64_t (*)(void))sub_1D2C49294, MEMORY[0x1E0DEDE30]);
}

unint64_t sub_1D2C493C4()
{
  unint64_t result;

  result = qword_1EFC9F890;
  if (!qword_1EFC9F890)
  {
    result = MEMORY[0x1D8245F38](&unk_1D2CACBF8, &type metadata for SecureBytes);
    atomic_store(result, (unint64_t *)&qword_1EFC9F890);
  }
  return result;
}

uint64_t sub_1D2C49408()
{
  return sub_1D2C4960C(&qword_1EFC9F898, MEMORY[0x1E0DEB8B8]);
}

unint64_t sub_1D2C4942C()
{
  unint64_t result;

  result = qword_1EFC9F8A8;
  if (!qword_1EFC9F8A8)
  {
    result = MEMORY[0x1D8245F38](&unk_1D2CAC938, &type metadata for SecureBytes.Index);
    atomic_store(result, (unint64_t *)&qword_1EFC9F8A8);
  }
  return result;
}

unint64_t sub_1D2C49470()
{
  unint64_t result;

  result = qword_1EFC9F8B0;
  if (!qword_1EFC9F8B0)
  {
    result = MEMORY[0x1D8245F38](MEMORY[0x1E0DEB440], MEMORY[0x1E0DEB418]);
    atomic_store(result, (unint64_t *)&qword_1EFC9F8B0);
  }
  return result;
}

uint64_t sub_1D2C494B4()
{
  return sub_1D2C497B4(&qword_1EFC9F8B8, (uint64_t (*)(void))sub_1D2C494E0, MEMORY[0x1E0DEDE40]);
}

unint64_t sub_1D2C494E0()
{
  unint64_t result;

  result = qword_1EFC9F8C0;
  if (!qword_1EFC9F8C0)
  {
    result = MEMORY[0x1D8245F38](&unk_1D2CACBA8, &type metadata for SecureBytes);
    atomic_store(result, (unint64_t *)&qword_1EFC9F8C0);
  }
  return result;
}

uint64_t sub_1D2C49524()
{
  return sub_1D2C4960C(&qword_1EFC9F8C8, MEMORY[0x1E0DEB890]);
}

uint64_t sub_1D2C49548()
{
  return sub_1D2C497B4(&qword_1EFC9F8D0, (uint64_t (*)(void))sub_1D2C493C4, MEMORY[0x1E0DEDE28]);
}

uint64_t sub_1D2C49574()
{
  return sub_1D2C496D4(&qword_1EFC9F8D8, &qword_1EFC9F8E0, MEMORY[0x1E0DEC908]);
}

unint64_t sub_1D2C495A4()
{
  unint64_t result;

  result = qword_1EFC9F8E8;
  if (!qword_1EFC9F8E8)
  {
    result = MEMORY[0x1D8245F38](&unk_1D2CACC58, &type metadata for SecureBytes);
    atomic_store(result, (unint64_t *)&qword_1EFC9F8E8);
  }
  return result;
}

uint64_t sub_1D2C495E8()
{
  return sub_1D2C4960C(&qword_1EFC9F8F0, MEMORY[0x1E0DEB8C0]);
}

uint64_t sub_1D2C4960C(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  _QWORD v6[2];

  result = *a1;
  if (!result)
  {
    v5 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EFC9F8A0);
    v6[0] = sub_1D2C4942C();
    v6[1] = sub_1D2C49470();
    result = MEMORY[0x1D8245F38](a2, v5, v6);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1D2C49678()
{
  return sub_1D2C496D4(&qword_1EFC9F8F8, &qword_1EFC9F880, MEMORY[0x1E0DEDE48]);
}

uint64_t sub_1D2C496A8()
{
  return sub_1D2C496D4(&qword_1EFC9F900, &qword_1EFC9F908, MEMORY[0x1E0DEC640]);
}

uint64_t sub_1D2C496D4(unint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    result = MEMORY[0x1D8245F38](a3, v6);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1D2C49714()
{
  return sub_1D2C497B4(&qword_1EFC9F910, (uint64_t (*)(void))sub_1D2C4924C, MEMORY[0x1E0CB26A8]);
}

unint64_t sub_1D2C49744()
{
  unint64_t result;

  result = qword_1ED985908;
  if (!qword_1ED985908)
  {
    result = MEMORY[0x1D8245F38](&unk_1D2CACE58, &type metadata for SecureBytes);
    atomic_store(result, (unint64_t *)&qword_1ED985908);
  }
  return result;
}

uint64_t sub_1D2C49788()
{
  return sub_1D2C497B4(&qword_1EFC9F918, (uint64_t (*)(void))sub_1D2C49744, MEMORY[0x1E0CB26B0]);
}

uint64_t sub_1D2C497B4(unint64_t *a1, uint64_t (*a2)(void), uint64_t a3)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;

  result = *a1;
  if (!result)
  {
    v7 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EFC9F880);
    v8 = a2();
    result = MEMORY[0x1D8245F38](a3, v7, &v8);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1D2C4981C(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;

  v11 = *a1;
  result = swift_beginAccess();
  v13 = *(_QWORD *)(v11 + 16);
  if (v13 < 0)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  if (a2 < 0)
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  if (v13 < a3)
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  if (__OFSUB__(a3, a2))
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  if (a3 != a2)
  {
    if (__OFSUB__(a5, a4))
    {
LABEL_28:
      __break(1u);
      goto LABEL_29;
    }
    if (a5 == a4)
    {
LABEL_29:
      __break(1u);
      return result;
    }
    while (a4 < a5)
    {
      *(_BYTE *)(v11 + 32 + a2) = *(_BYTE *)(a6 + 32 + a4);
      v14 = a2 + 1;
      if (__OFADD__(a2, 1))
        goto LABEL_19;
      if (__OFSUB__(a3, v14))
        goto LABEL_20;
      ++a4;
      if (v14 == a3)
        goto LABEL_6;
      if (__OFSUB__(a5, a4))
        goto LABEL_21;
      ++a2;
      if (a5 == a4)
      {
        __break(1u);
        break;
      }
    }
    __break(1u);
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
LABEL_6:
  if (__OFSUB__(a5, a4))
  {
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  if (a4 != a5)
  {
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  return result;
}

uint64_t sub_1D2C49930(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  size_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;

  swift_beginAccess();
  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
    return MEMORY[0x1E0DEE9D8];
  if (v2 <= 0)
  {
    v3 = MEMORY[0x1E0DEE9D8];
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(qword_1ED985F40);
    v3 = swift_allocObject();
    v4 = _swift_stdlib_malloc_size((const void *)v3);
    *(_QWORD *)(v3 + 16) = v2;
    *(_QWORD *)(v3 + 24) = 2 * v4 - 64;
  }
  v5 = sub_1D2C47A08((uint64_t)&v7, (_BYTE *)(v3 + 32), v2, a1);
  swift_retain();
  result = swift_release();
  if (v5 == v2)
    return v3;
  __break(1u);
  return result;
}

uint64_t __swift_instantiateConcreteTypeFromMangledName(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (result < 0)
  {
    result = MEMORY[0x1D8245F20]((char *)a1 + (int)result, -(result >> 32), 0, 0);
    *a1 = result;
  }
  return result;
}

int64_t sub_1D2C49A4C(int64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int64_t v4;
  uint64_t v5;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14[2];
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;

  if (a3)
    v4 = a4 - a3;
  else
    v4 = 0;
  if (result < 0 || (v5 = result, v4 < result))
  {
    __break(1u);
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  if (a2 < 0 || v4 < a2)
    goto LABEL_24;
  v7 = a2 - result;
  if (a2 == result)
    return MEMORY[0x1E0DEE9D8];
  if (v7 <= 0)
  {
    v8 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(qword_1ED985F40);
    v8 = (_QWORD *)swift_allocObject();
    result = _swift_stdlib_malloc_size(v8);
    v8[2] = v7;
    v8[3] = 2 * result - 64;
  }
  v14[0] = v5;
  v14[1] = a2;
  v15 = a3;
  v16 = a4;
  MEMORY[0x1E0C80A78](result);
  if (a3)
    v11 = a3;
  else
    v11 = 0;
  result = (int64_t)sub_1D2C49EB4(v11, v14, (_QWORD *(*)(__int128 *__return_ptr, uint64_t, _QWORD *))sub_1D2C4A4D4, &v17);
  v12 = v14[0] + v18;
  if (__OFADD__(v14[0], v18))
    goto LABEL_25;
  v13 = v16 - v15;
  if (!v15)
    v13 = 0;
  if (v12 < 0 || v13 < v12)
    goto LABEL_26;
  if (v18 == v7)
    return (int64_t)v8;
LABEL_27:
  __break(1u);
  return result;
}

void sub_1D2C49BC4(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  unint64_t v4;
  uint64_t v5;
  _QWORD *v7;
  int64_t v8;
  uint64_t v9;

  v4 = a4 >> 1;
  v5 = (a4 >> 1) - a3;
  if (__OFSUB__(a4 >> 1, a3))
  {
LABEL_11:
    __break(1u);
    return;
  }
  if (v5)
  {
    if (v5 <= 0)
    {
      if (v4 != a3)
      {
LABEL_7:
        swift_arrayInitWithCopy();
        return;
      }
    }
    else
    {
      __swift_instantiateConcreteTypeFromMangledName(qword_1EFC9F920);
      v7 = (_QWORD *)swift_allocObject();
      v8 = _swift_stdlib_malloc_size(v7);
      v9 = v8 - 32;
      if (v8 < 32)
        v9 = v8 - 25;
      v7[2] = v5;
      v7[3] = 2 * (v9 >> 3);
      if (v4 != a3)
        goto LABEL_7;
    }
    __break(1u);
    goto LABEL_11;
  }
}

uint64_t sub_1D2C49C90(uint64_t (*a1)(char *))
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  char v13;
  char v14;

  v4 = *v1;
  swift_beginAccess();
  v5 = *(_QWORD *)(v4 + 16);
  if (v5 < 1)
    return 0;
  v6 = 0;
  v7 = v4 + 32;
  v8 = v4 + 31;
  do
  {
    v14 = *(_BYTE *)(v7 + v6);
    v9 = a1(&v14);
    if (v2)
      break;
    if ((v9 & 1) != 0)
    {
      if (v6 >= v5 - 1)
        return v6;
      while (1)
      {
        v14 = *(_BYTE *)(v8 + v5);
        result = a1(&v14);
        v11 = v5 - 1;
        if ((result & 1) == 0)
          break;
        v12 = v5 - 2;
        if (__OFSUB__(v11, 1))
        {
          __break(1u);
          goto LABEL_17;
        }
        --v5;
        if (v6 >= v12)
          return v6;
      }
      if (!__OFSUB__(v11, v6))
      {
        v13 = *(_BYTE *)(v7 + v6);
        *(_BYTE *)(v7 + v6) = *(_BYTE *)(v8 + v5);
        *(_BYTE *)(v8 + v5--) = v13;
        goto LABEL_3;
      }
LABEL_17:
      __break(1u);
      return result;
    }
LABEL_3:
    ++v6;
  }
  while (v6 < v5);
  return v6;
}

uint64_t sub_1D2C49DB8(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  v5 = a5 - a4;
  if (!a4)
    v5 = 0;
  if (result < 0 || v5 < result)
  {
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  if (a3 < 0 || v5 < a3)
    goto LABEL_19;
  v6 = a3 - result;
  if (a2 > 0)
  {
    if (v6 < 0 || v6 >= (unint64_t)a2)
      goto LABEL_14;
    return 0;
  }
  if (v6 <= 0 && v6 > a2)
    return 0;
LABEL_14:
  v7 = __OFADD__(result, a2);
  result += a2;
  if (v7)
  {
LABEL_20:
    __break(1u);
LABEL_21:
    __break(1u);
    return result;
  }
  if (result < 0 || v5 < result)
    goto LABEL_21;
  return result;
}

char *sub_1D2C49E40(char *__src, int64_t a2, void *__dst, int64_t a4)
{
  char *v4;
  size_t v5;

  v4 = __src;
  if (a2 && a4)
  {
    if (a2 >= a4)
      v5 = a4;
    else
      v5 = a2;
    memcpy(__dst, __src, v5);
    v4 += v5;
  }
  return v4;
}

_QWORD *sub_1D2C49EB4@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X2>, _QWORD *(*a3)(__int128 *__return_ptr, uint64_t, _QWORD *)@<X3>, _OWORD *a4@<X8>)
{
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *result;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  _OWORD *v16;
  __int128 v17;
  uint64_t v18;
  _OWORD *v19;

  v19 = a4;
  v7 = *a2;
  v8 = a2[1];
  v10 = a2[2];
  v9 = a2[3];
  v11 = sub_1D2C7D4AC(0, *a2, v10, v9);
  result = (_QWORD *)sub_1D2C7D4AC(v7, v8, v10, v9);
  if (__OFADD__(v11, result))
  {
    __break(1u);
    goto LABEL_10;
  }
  v13 = result;
  if ((uint64_t)result + v11 < v11)
  {
LABEL_10:
    __break(1u);
    return result;
  }
  if (a1)
    v14 = a1 + v11;
  else
    v14 = 0;
  result = a3(&v17, v14, v13);
  if (!v4)
  {
    v15 = v18;
    v16 = v19;
    *v19 = v17;
    *((_QWORD *)v16 + 2) = v15;
  }
  return result;
}

uint64_t sub_1D2C49F80()
{
  type metadata accessor for SecureBytes.Backing();
  return sub_1D2C48DB4();
}

unint64_t sub_1D2C49FC4(unint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  unsigned int v3;
  unsigned int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  const void *v8;
  uint64_t v9;

  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_12;
  }
  v2 = result;
  if (HIDWORD(result))
  {
LABEL_12:
    __break(1u);
    return result;
  }
  if ((_DWORD)result)
  {
    v3 = (result - 1) | ((result - 1) >> 1) | ((((_DWORD)result - 1) | ((result - 1) >> 1)) >> 2);
    v4 = v3 | (v3 >> 4) | ((v3 | (v3 >> 4)) >> 8);
    v5 = v4 | HIWORD(v4);
    if (v5 == -1)
      v6 = 0xFFFFFFFFLL;
    else
      v6 = (v5 + 1);
  }
  else
  {
    v6 = 1;
  }
  type metadata accessor for SecureBytes.Backing();
  v7 = swift_allocObject();
  *(_QWORD *)(v7 + 16) = 0;
  *(_QWORD *)(v7 + 24) = v6;
  v9 = v7;
  swift_retain();
  v8 = (const void *)swift_retain();
  sub_1D2C470AC(v8, v2, &v9);
  swift_release();
  if (v1)
    swift_release();
  return v7;
}

unint64_t sub_1D2C4A0B8(unint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  unsigned int v7;
  unsigned int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  const void *v12;
  uint64_t v13;

  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_12;
  }
  v4 = result;
  if (HIDWORD(result))
  {
LABEL_12:
    __break(1u);
    return result;
  }
  if ((_DWORD)result)
  {
    v7 = (result - 1) | ((result - 1) >> 1) | ((((_DWORD)result - 1) | ((result - 1) >> 1)) >> 2);
    v8 = v7 | (v7 >> 4) | ((v7 | (v7 >> 4)) >> 8);
    v9 = v8 | HIWORD(v8);
    if (v9 == -1)
      v10 = 0xFFFFFFFFLL;
    else
      v10 = (v9 + 1);
  }
  else
  {
    v10 = 1;
  }
  type metadata accessor for SecureBytes.Backing();
  v11 = swift_allocObject();
  *(_QWORD *)(v11 + 16) = 0;
  *(_QWORD *)(v11 + 24) = v10;
  v13 = v11;
  v12 = (const void *)swift_retain();
  sub_1D2C4718C(v12, v4, &v13, a2, a3);
  swift_release();
  if (v3)
    swift_release();
  return v11;
}

unint64_t sub_1D2C4A1A0(unint64_t result, uint64_t (*a2)(_QWORD *, uint64_t *), uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  unsigned int v7;
  unsigned int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  const void *v12;
  uint64_t v13;

  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_12;
  }
  v4 = result;
  if (HIDWORD(result))
  {
LABEL_12:
    __break(1u);
    return result;
  }
  if ((_DWORD)result)
  {
    v7 = (result - 1) | ((result - 1) >> 1) | ((((_DWORD)result - 1) | ((result - 1) >> 1)) >> 2);
    v8 = v7 | (v7 >> 4) | ((v7 | (v7 >> 4)) >> 8);
    v9 = v8 | HIWORD(v8);
    if (v9 == -1)
      v10 = 0xFFFFFFFFLL;
    else
      v10 = (v9 + 1);
  }
  else
  {
    v10 = 1;
  }
  type metadata accessor for SecureBytes.Backing();
  v11 = swift_allocObject();
  *(_QWORD *)(v11 + 16) = 0;
  *(_QWORD *)(v11 + 24) = v10;
  v13 = v11;
  v12 = (const void *)swift_retain();
  sub_1D2C47284(v12, v4, a2, a3, &v13);
  swift_release();
  if (v3)
    swift_release();
  return v11;
}

_QWORD *sub_1D2C4A288(size_t a1, uint64_t a2)
{
  _QWORD *result;
  _QWORD *v5;

  if (qword_1ED985918 != -1)
    swift_once();
  result = off_1ED985910;
  v5 = off_1ED985910;
  if (!a2)
    return (_QWORD *)swift_retain();
  if (a2 < 0)
  {
    __break(1u);
  }
  else
  {
    swift_retain();
    do
    {
      swift_beginAccess();
      sub_1D2C95680(v5[2], v5[2], a1);
      --a2;
    }
    while (a2);
    return v5;
  }
  return result;
}

uint64_t sub_1D2C4A33C(void *a1, size_t a2)
{
  uint64_t v2;
  uint64_t v5;

  v5 = **(_QWORD **)(v2 + 16);
  swift_beginAccess();
  return sub_1D2C9581C(*(_QWORD *)(v5 + 16), *(_QWORD *)(v5 + 16), a1, a2);
}

uint64_t sub_1D2C4A3AC(int64_t a1)
{
  unsigned int v2;
  unsigned int v3;
  int v4;
  uint64_t v5;
  _QWORD *v6;
  size_t v7;
  uint64_t result;

  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_14;
  }
  if (HIDWORD(a1))
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  if ((_DWORD)a1)
  {
    v2 = (a1 - 1) | ((a1 - 1) >> 1) | ((((_DWORD)a1 - 1) | ((a1 - 1) >> 1)) >> 2);
    v3 = v2 | (v2 >> 4) | ((v2 | (v2 >> 4)) >> 8);
    v4 = v3 | HIWORD(v3);
    if (v4 == -1)
      v5 = 0xFFFFFFFFLL;
    else
      v5 = (v4 + 1);
  }
  else
  {
    v5 = 1;
  }
  type metadata accessor for SecureBytes.Backing();
  v6 = (_QWORD *)swift_allocObject();
  v6[2] = 0;
  v6[3] = v5;
  v7 = _swift_stdlib_malloc_size(v6);
  if (!a1)
    goto LABEL_12;
  if ((uint64_t)(v7 - 32) < a1)
  {
LABEL_15:
    __break(1u);
    __break(1u);
  }
  result = ccrng();
  if (result)
  {
    ccrng_generate_bridge();
LABEL_12:
    swift_beginAccess();
    v6[2] = a1;
    return (uint64_t)v6;
  }
  __break(1u);
  return result;
}

char *sub_1D2C4A4D4@<X0>(char *a1@<X0>, int64_t a2@<X1>, char **a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  char *result;
  char *v7;
  char *v8;

  result = sub_1D2C49E40(a1, a2, *(void **)(v3 + 16), *(_QWORD *)(v3 + 24));
  if (!v4)
  {
    *a3 = result;
    a3[1] = v7;
    a3[2] = v8;
  }
  return result;
}

uint64_t sub_1D2C4A504(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (**v5)();
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, _QWORD);
  uint64_t v12;

  v2 = sub_1D2CAA8E8();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = (uint64_t (**)())((char *)&v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  swift_beginAccess();
  v6 = *(_QWORD *)(a1 + 16);
  v7 = swift_allocObject();
  *(_QWORD *)(v7 + 16) = a1;
  *v5 = sub_1D2C4A6A8;
  v5[1] = (uint64_t (*)())v7;
  (*(void (**)(uint64_t (**)(), _QWORD, uint64_t))(v3 + 104))(v5, *MEMORY[0x1E0CB00D8], v2);
  swift_retain();
  sub_1D2CAA8DC();
  if (v6)
  {
    sub_1D2CAA8A0();
    swift_allocObject();
    swift_retain();
    v8 = sub_1D2CAA84C();
    v9 = sub_1D2CA76E8(v8, v6);
    swift_release();
  }
  else
  {
    v10 = (void (*)(uint64_t, _QWORD))sub_1D2CAA8DC();
    v10(a1 + 32, 0);
    swift_release();
    swift_release();
    v9 = 0;
  }
  (*(void (**)(uint64_t (**)(), uint64_t))(v3 + 8))(v5, v2);
  return v9;
}

uint64_t sub_1D2C4A698()
{
  return swift_deallocObject();
}

uint64_t sub_1D2C4A6A8()
{
  return swift_release();
}

ValueMetadata *type metadata accessor for SecureBytes.Index()
{
  return &type metadata for SecureBytes.Index;
}

ValueMetadata *type metadata accessor for HE.DcrtPlaintext()
{
  return &type metadata for HE.DcrtPlaintext;
}

uint64_t cryptokit_scrypt(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, size_t a8, void *a9)
{
  return scrypt(pass_len:pass:salt_len:salt:cost_N:block_size_r:parallelization:output_len:output:)(a1, a2, a3, a4, a5, a6, a7, a8, a9);
}

uint64_t scrypt(pass_len:pass:salt_len:salt:cost_N:block_size_r:parallelization:output_len:output:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, size_t a8, void *a9)
{
  id v12;
  id v13;
  void *v14;
  id v15;
  uint64_t v16;

  v12 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0C99D50]), sel_initWithBytes_length_, a2, a1);
  v13 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0C99D50]), sel_initWithBytes_length_, a4, a3);
  v14 = (void *)_s16CryptoKitPrivate6ScryptC9deriveKey8password4salt10outputSize4cost05blockJ015parallelizationSo6NSDataCSgAL_AMSis6UInt64Vs6UInt32VAQtFZ_0(v12, v13, a8);
  if (v14)
  {
    v15 = objc_retainAutorelease(v14);
    memcpy(a9, objc_msgSend(v15, sel_bytes), (size_t)objc_msgSend(v15, sel_length));

    v16 = 0;
    v12 = v15;
  }
  else
  {
    v16 = 4294899619;
  }

  return v16;
}

uint64_t sub_1D2C4A804(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;

  v2 = *(_QWORD *)(a1 + 16);
  v1 = *(_QWORD *)(a1 + 24);
  result = swift_getAssociatedTypeWitness();
  if (v5 <= 0x3F)
  {
    result = type metadata accessor for Proof(319, v2, v1, v4);
    if (v6 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t *sub_1D2C4A8CC(uint64_t *a1, uint64_t *a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(uint64_t *, uint64_t *, uint64_t);
  uint64_t *v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t *v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v4 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v5 = *(_QWORD *)(v4 + 64);
  v6 = *(_DWORD *)(v4 + 80);
  v7 = v6;
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedConformanceWitness();
  v8 = swift_getAssociatedTypeWitness();
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(_DWORD *)(v9 + 80);
  v11 = v10 & 0xF8;
  v12 = v11 | 7;
  v13 = (v10 | v6) & 0x100000;
  v14 = (v11 | 7 | v6) == 7 && v13 == 0;
  if (v14
    && (v15 = v5 + v6,
        v16 = (v5
             + v7
             + ((v5
               + v7
               + ((v5
                 + v7
                 + ((v5 + v7 + ((v5 + v7 + ((v5 + v7 + ((v5 + v7 + ((v5 + v7) & ~v7)) & ~v7)) & ~v7)) & ~v7)) & ~v7)) & ~v7)) & ~v7)) & ~v7,
        v17 = v5 + 7,
        v18 = v11 + 23,
        ((*(_QWORD *)(v9 + 64) + 7) & 0xFFFFFFFFFFFFFFF8)
      + ((v11 + 23 + ((v17 + v16) & 0xFFFFFFFFFFFFFFF8)) & ~v12)
      + 8 <= 0x18))
  {
    v19 = ~v7;
    v36 = ~v12;
    v37 = *(_QWORD *)(v9 + 64) + 7;
    v20 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(v4 + 16);
    v21 = a1;
    v38 = v8;
    v20(a1, a2, AssociatedTypeWitness);
    v22 = ((unint64_t)a2 + v15) & v19;
    v20((uint64_t *)(((unint64_t)a1 + v15) & v19), (uint64_t *)v22, AssociatedTypeWitness);
    v23 = (v15 + v22) & v19;
    v20((uint64_t *)((v15 + (((unint64_t)a1 + v15) & v19)) & v19), (uint64_t *)v23, AssociatedTypeWitness);
    v24 = (v15 + v23) & v19;
    v20((uint64_t *)((v15 + ((v15 + (((unint64_t)a1 + v15) & v19)) & v19)) & v19), (uint64_t *)v24, AssociatedTypeWitness);
    v25 = (v15 + v24) & v19;
    v20((uint64_t *)((v15 + ((v15 + ((v15 + (((unint64_t)a1 + v15) & v19)) & v19)) & v19)) & v19), (uint64_t *)v25, AssociatedTypeWitness);
    v26 = (v15 + v25) & v19;
    v20((uint64_t *)((v15 + ((v15 + ((v15 + ((v15 + (((unint64_t)a1 + v15) & v19)) & v19)) & v19)) & v19)) & v19), (uint64_t *)v26, AssociatedTypeWitness);
    v27 = (v15 + v26) & v19;
    v20((uint64_t *)((v15+ ((v15 + ((v15 + ((v15 + ((v15 + (((unint64_t)a1 + v15) & v19)) & v19)) & v19)) & v19)) & v19)) & v19), (uint64_t *)v27, AssociatedTypeWitness);
    v28 = (v15 + v27) & v19;
    v20((uint64_t *)((v15+ ((v15+ ((v15 + ((v15 + ((v15 + ((v15 + (((unint64_t)a1 + v15) & v19)) & v19)) & v19)) & v19)) & v19)) & v19)) & v19), (uint64_t *)v28, AssociatedTypeWitness);
    v29 = (v15 + v28) & v19;
    v20((uint64_t *)((v15+ ((v15+ ((v15+ ((v15 + ((v15 + ((v15 + ((v15 + (((unint64_t)a1 + v15) & v19)) & v19)) & v19)) & v19)) & v19)) & v19)) & v19)) & v19), (uint64_t *)v29, AssociatedTypeWitness);
    v30 = (_QWORD *)((v17
                    + ((v15
                      + ((v15
                        + ((v15
                          + ((v15 + ((v15 + ((v15 + ((v15 + (((unint64_t)a1 + v15) & v19)) & v19)) & v19)) & v19)) & v19)) & v19)) & v19)) & v19)) & 0xFFFFFFFFFFFFFFF8);
    v31 = (uint64_t *)((v17 + v29) & 0xFFFFFFFFFFFFFFF8);
    v32 = *v31;
    v33 = v31[1];
    sub_1D2C45028(*v31, v33);
    *v30 = v32;
    v30[1] = v33;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v9 + 16))(((unint64_t)v30 + v18) & v36, ((unint64_t)v31 + v18) & v36, v38);
    *(_QWORD *)((v37 + (((unint64_t)v30 + v18) & v36)) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)((v37
                                                                                                 + (((unint64_t)v31 + v18) & v36)) & 0xFFFFFFFFFFFFF8);
    sub_1D2CAAF0C();
  }
  else
  {
    v34 = *a2;
    *a1 = *a2;
    v21 = (uint64_t *)(v34 + (((v12 | v7) + 16) & ~(v12 | v7)));
    swift_retain();
  }
  return v21;
}

uint64_t sub_1D2C4AC1C(uint64_t a1)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v3;
  void (*v4)(uint64_t, uint64_t);
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v3 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v4 = *(void (**)(uint64_t, uint64_t))(v3 + 8);
  v4(a1, AssociatedTypeWitness);
  v5 = *(_QWORD *)(v3 + 64);
  v6 = *(unsigned __int8 *)(v3 + 80);
  v7 = (v5 + v6 + a1) & ~v6;
  v4(v7, AssociatedTypeWitness);
  v8 = (v5 + v6 + v7) & ~v6;
  v4(v8, AssociatedTypeWitness);
  v9 = (v5 + v6 + v8) & ~v6;
  v4(v9, AssociatedTypeWitness);
  v10 = (v5 + v6 + v9) & ~v6;
  v4(v10, AssociatedTypeWitness);
  v11 = (v5 + v6 + v10) & ~v6;
  v4(v11, AssociatedTypeWitness);
  v12 = (v5 + v6 + v11) & ~v6;
  v4(v12, AssociatedTypeWitness);
  v13 = (v5 + v6 + v12) & ~v6;
  v4(v13, AssociatedTypeWitness);
  v14 = (v5 + v6 + v13) & ~v6;
  v4(v14, AssociatedTypeWitness);
  v15 = (v5 + v14 + 7) & 0xFFFFFFFFFFFFFFF8;
  sub_1D2C45258(*(_QWORD *)v15, *(_QWORD *)(v15 + 8));
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedConformanceWitness();
  v16 = swift_getAssociatedTypeWitness();
  v17 = *(_QWORD *)(v16 - 8);
  v18 = *(_DWORD *)(v17 + 80) & 0xF8 | 7;
  (*(void (**)(unint64_t, uint64_t))(v17 + 8))((v18 + v15 + 16) & ~v18, v16);
  return swift_bridgeObjectRelease();
}

uint64_t sub_1D2C4AE10(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t, uint64_t);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
  v6(a1, a2, AssociatedTypeWitness);
  v7 = *(_QWORD *)(v5 + 64);
  v8 = *(unsigned __int8 *)(v5 + 80);
  v9 = v7 + v8;
  v10 = (v7 + v8 + a2) & ~v8;
  v6((v7 + v8 + a1) & ~v8, v10, AssociatedTypeWitness);
  v11 = (v7 + v8 + v10) & ~v8;
  v6((v7 + v8 + ((v7 + v8 + a1) & ~v8)) & ~v8, v11, AssociatedTypeWitness);
  v12 = (v7 + v8 + v11) & ~v8;
  v6((v9 + ((v9 + ((v7 + v8 + a1) & ~v8)) & ~v8)) & ~v8, v12, AssociatedTypeWitness);
  v13 = (v7 + v8 + v12) & ~v8;
  v6((v9 + ((v9 + ((v9 + ((v7 + v8 + a1) & ~v8)) & ~v8)) & ~v8)) & ~v8, v13, AssociatedTypeWitness);
  v14 = (v7 + v8 + v13) & ~v8;
  v6((v9 + ((v9 + ((v9 + ((v9 + ((v7 + v8 + a1) & ~v8)) & ~v8)) & ~v8)) & ~v8)) & ~v8, v14, AssociatedTypeWitness);
  v15 = (v7 + v8 + v14) & ~v8;
  v6((v9 + ((v9 + ((v9 + ((v9 + ((v9 + ((v7 + v8 + a1) & ~v8)) & ~v8)) & ~v8)) & ~v8)) & ~v8)) & ~v8, v15, AssociatedTypeWitness);
  v16 = (v7 + v8 + v15) & ~v8;
  v6((v9 + ((v9 + ((v9 + ((v9 + ((v9 + ((v9 + ((v7 + v8 + a1) & ~v8)) & ~v8)) & ~v8)) & ~v8)) & ~v8)) & ~v8)) & ~v8, v16, AssociatedTypeWitness);
  v17 = (v7 + v8 + v16) & ~v8;
  v6((v9+ ((v9 + ((v9 + ((v9 + ((v9 + ((v9 + ((v9 + ((v7 + v8 + a1) & ~v8)) & ~v8)) & ~v8)) & ~v8)) & ~v8)) & ~v8)) & ~v8)) & ~v8, v17, AssociatedTypeWitness);
  v18 = (_QWORD *)((v7
                  + 7
                  + ((v9
                    + ((v9
                      + ((v9 + ((v9 + ((v9 + ((v9 + ((v9 + ((v7 + v8 + a1) & ~v8)) & ~v8)) & ~v8)) & ~v8)) & ~v8)) & ~v8)) & ~v8)) & ~v8)) & 0xFFFFFFFFFFFFFFF8);
  v19 = (uint64_t *)((v7 + 7 + v17) & 0xFFFFFFFFFFFFFFF8);
  v20 = *v19;
  v21 = v19[1];
  sub_1D2C45028(*v19, v21);
  *v18 = v20;
  v18[1] = v21;
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedConformanceWitness();
  v22 = swift_getAssociatedTypeWitness();
  v23 = *(_QWORD *)(v22 - 8);
  v24 = *(_DWORD *)(v23 + 80) & 0xF8;
  v25 = v24 + 23;
  v26 = (unint64_t)v18 + v24 + 23;
  v27 = ~v24 & 0xFFFFFFFFFFFFFFF8;
  v28 = v26 & v27;
  v29 = ((unint64_t)v19 + v25) & v27;
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v23 + 16))(v26 & v27, v29, v22);
  *(_QWORD *)((*(_QWORD *)(v23 + 64) + 7 + v28) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)((*(_QWORD *)(v23 + 64) + 7 + v29) & 0xFFFFFFFFFFFFF8);
  sub_1D2CAAF0C();
  return a1;
}

uint64_t sub_1D2C4B0A8(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t, uint64_t);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 24);
  v6(a1, a2, AssociatedTypeWitness);
  v7 = *(_QWORD *)(v5 + 64);
  v8 = *(unsigned __int8 *)(v5 + 80);
  v9 = v7 + v8;
  v10 = (v7 + v8 + a2) & ~v8;
  v6((v7 + v8 + a1) & ~v8, v10, AssociatedTypeWitness);
  v11 = (v7 + v8 + v10) & ~v8;
  v6((v7 + v8 + ((v7 + v8 + a1) & ~v8)) & ~v8, v11, AssociatedTypeWitness);
  v12 = (v7 + v8 + v11) & ~v8;
  v6((v9 + ((v9 + ((v7 + v8 + a1) & ~v8)) & ~v8)) & ~v8, v12, AssociatedTypeWitness);
  v13 = (v7 + v8 + v12) & ~v8;
  v6((v9 + ((v9 + ((v9 + ((v7 + v8 + a1) & ~v8)) & ~v8)) & ~v8)) & ~v8, v13, AssociatedTypeWitness);
  v14 = (v7 + v8 + v13) & ~v8;
  v6((v9 + ((v9 + ((v9 + ((v9 + ((v7 + v8 + a1) & ~v8)) & ~v8)) & ~v8)) & ~v8)) & ~v8, v14, AssociatedTypeWitness);
  v15 = (v7 + v8 + v14) & ~v8;
  v6((v9 + ((v9 + ((v9 + ((v9 + ((v9 + ((v7 + v8 + a1) & ~v8)) & ~v8)) & ~v8)) & ~v8)) & ~v8)) & ~v8, v15, AssociatedTypeWitness);
  v16 = (v7 + v8 + v15) & ~v8;
  v6((v9 + ((v9 + ((v9 + ((v9 + ((v9 + ((v9 + ((v7 + v8 + a1) & ~v8)) & ~v8)) & ~v8)) & ~v8)) & ~v8)) & ~v8)) & ~v8, v16, AssociatedTypeWitness);
  v17 = (v7 + v8 + v16) & ~v8;
  v6((v9+ ((v9 + ((v9 + ((v9 + ((v9 + ((v9 + ((v9 + ((v7 + v8 + a1) & ~v8)) & ~v8)) & ~v8)) & ~v8)) & ~v8)) & ~v8)) & ~v8)) & ~v8, v17, AssociatedTypeWitness);
  v18 = (uint64_t *)((v7
                   + 7
                   + ((v9
                     + ((v9
                       + ((v9 + ((v9 + ((v9 + ((v9 + ((v9 + ((v7 + v8 + a1) & ~v8)) & ~v8)) & ~v8)) & ~v8)) & ~v8)) & ~v8)) & ~v8)) & ~v8)) & 0xFFFFFFFFFFFFFFF8);
  v19 = (uint64_t *)((v7 + 7 + v17) & 0xFFFFFFFFFFFFFFF8);
  v20 = *v19;
  v21 = v19[1];
  sub_1D2C45028(*v19, v21);
  v22 = *v18;
  v23 = v18[1];
  *v18 = v20;
  v18[1] = v21;
  sub_1D2C45258(v22, v23);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedConformanceWitness();
  v24 = swift_getAssociatedTypeWitness();
  v25 = *(_QWORD *)(v24 - 8);
  v26 = *(_DWORD *)(v25 + 80) & 0xF8;
  v27 = v26 + 23;
  v28 = (unint64_t)v18 + v26 + 23;
  v29 = ~v26 & 0xFFFFFFFFFFFFFFF8;
  v30 = v28 & v29;
  v31 = ((unint64_t)v19 + v27) & v29;
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v25 + 24))(v28 & v29, v31, v24);
  *(_QWORD *)((*(_QWORD *)(v25 + 64) + 7 + v30) & 0xFFFFFFFFFFFFFFF8) = *(_QWORD *)((*(_QWORD *)(v25 + 64)
                                                                                       + 7
                                                                                       + v31) & 0xFFFFFFFFFFFFF8);
  sub_1D2CAAF0C();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1D2C4B354(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t, uint64_t);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _OWORD *v18;
  _OWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 32);
  v6(a1, a2, AssociatedTypeWitness);
  v7 = *(_QWORD *)(v5 + 64);
  v8 = *(unsigned __int8 *)(v5 + 80);
  v9 = v7 + v8;
  v10 = (v7 + v8 + a2) & ~v8;
  v6((v7 + v8 + a1) & ~v8, v10, AssociatedTypeWitness);
  v11 = (v7 + v8 + v10) & ~v8;
  v6((v7 + v8 + ((v7 + v8 + a1) & ~v8)) & ~v8, v11, AssociatedTypeWitness);
  v12 = (v7 + v8 + v11) & ~v8;
  v6((v9 + ((v9 + ((v7 + v8 + a1) & ~v8)) & ~v8)) & ~v8, v12, AssociatedTypeWitness);
  v13 = (v7 + v8 + v12) & ~v8;
  v6((v9 + ((v9 + ((v9 + ((v7 + v8 + a1) & ~v8)) & ~v8)) & ~v8)) & ~v8, v13, AssociatedTypeWitness);
  v14 = (v7 + v8 + v13) & ~v8;
  v6((v9 + ((v9 + ((v9 + ((v9 + ((v7 + v8 + a1) & ~v8)) & ~v8)) & ~v8)) & ~v8)) & ~v8, v14, AssociatedTypeWitness);
  v15 = (v7 + v8 + v14) & ~v8;
  v6((v9 + ((v9 + ((v9 + ((v9 + ((v9 + ((v7 + v8 + a1) & ~v8)) & ~v8)) & ~v8)) & ~v8)) & ~v8)) & ~v8, v15, AssociatedTypeWitness);
  v16 = (v7 + v8 + v15) & ~v8;
  v6((v9 + ((v9 + ((v9 + ((v9 + ((v9 + ((v9 + ((v7 + v8 + a1) & ~v8)) & ~v8)) & ~v8)) & ~v8)) & ~v8)) & ~v8)) & ~v8, v16, AssociatedTypeWitness);
  v17 = (v7 + v8 + v16) & ~v8;
  v6((v9+ ((v9 + ((v9 + ((v9 + ((v9 + ((v9 + ((v9 + ((v7 + v8 + a1) & ~v8)) & ~v8)) & ~v8)) & ~v8)) & ~v8)) & ~v8)) & ~v8)) & ~v8, v17, AssociatedTypeWitness);
  v18 = (_OWORD *)((v7
                  + 7
                  + ((v9
                    + ((v9
                      + ((v9 + ((v9 + ((v9 + ((v9 + ((v9 + ((v7 + v8 + a1) & ~v8)) & ~v8)) & ~v8)) & ~v8)) & ~v8)) & ~v8)) & ~v8)) & ~v8)) & 0xFFFFFFFFFFFFFFF8);
  v19 = (_OWORD *)((v7 + 7 + v17) & 0xFFFFFFFFFFFFFFF8);
  *v18 = *v19;
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedConformanceWitness();
  v20 = swift_getAssociatedTypeWitness();
  v21 = *(_QWORD *)(v20 - 8);
  v22 = *(_DWORD *)(v21 + 80) & 0xF8;
  v23 = v22 + 23;
  v24 = (unint64_t)v18 + v22 + 23;
  v25 = ~v22 & 0xFFFFFFFFFFFFFFF8;
  v26 = v24 & v25;
  v27 = ((unint64_t)v19 + v23) & v25;
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v21 + 32))(v24 & v25, v27, v20);
  *(_QWORD *)((*(_QWORD *)(v21 + 64) + 7 + v26) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)((*(_QWORD *)(v21 + 64) + 7 + v27) & 0xFFFFFFFFFFFFF8);
  return a1;
}

uint64_t sub_1D2C4B5DC(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t, uint64_t);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  _OWORD *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 40);
  v6(a1, a2, AssociatedTypeWitness);
  v7 = *(_QWORD *)(v5 + 64);
  v8 = *(unsigned __int8 *)(v5 + 80);
  v9 = v7 + v8;
  v10 = (v7 + v8 + a2) & ~v8;
  v6((v7 + v8 + a1) & ~v8, v10, AssociatedTypeWitness);
  v11 = (v7 + v8 + v10) & ~v8;
  v6((v7 + v8 + ((v7 + v8 + a1) & ~v8)) & ~v8, v11, AssociatedTypeWitness);
  v12 = (v7 + v8 + v11) & ~v8;
  v6((v9 + ((v9 + ((v7 + v8 + a1) & ~v8)) & ~v8)) & ~v8, v12, AssociatedTypeWitness);
  v13 = (v7 + v8 + v12) & ~v8;
  v6((v9 + ((v9 + ((v9 + ((v7 + v8 + a1) & ~v8)) & ~v8)) & ~v8)) & ~v8, v13, AssociatedTypeWitness);
  v14 = (v7 + v8 + v13) & ~v8;
  v6((v9 + ((v9 + ((v9 + ((v9 + ((v7 + v8 + a1) & ~v8)) & ~v8)) & ~v8)) & ~v8)) & ~v8, v14, AssociatedTypeWitness);
  v15 = (v7 + v8 + v14) & ~v8;
  v6((v9 + ((v9 + ((v9 + ((v9 + ((v9 + ((v7 + v8 + a1) & ~v8)) & ~v8)) & ~v8)) & ~v8)) & ~v8)) & ~v8, v15, AssociatedTypeWitness);
  v16 = (v7 + v8 + v15) & ~v8;
  v6((v9 + ((v9 + ((v9 + ((v9 + ((v9 + ((v9 + ((v7 + v8 + a1) & ~v8)) & ~v8)) & ~v8)) & ~v8)) & ~v8)) & ~v8)) & ~v8, v16, AssociatedTypeWitness);
  v17 = (v7 + v8 + v16) & ~v8;
  v6((v9+ ((v9 + ((v9 + ((v9 + ((v9 + ((v9 + ((v9 + ((v7 + v8 + a1) & ~v8)) & ~v8)) & ~v8)) & ~v8)) & ~v8)) & ~v8)) & ~v8)) & ~v8, v17, AssociatedTypeWitness);
  v18 = (uint64_t *)((v7
                   + 7
                   + ((v9
                     + ((v9
                       + ((v9 + ((v9 + ((v9 + ((v9 + ((v9 + ((v7 + v8 + a1) & ~v8)) & ~v8)) & ~v8)) & ~v8)) & ~v8)) & ~v8)) & ~v8)) & ~v8)) & 0xFFFFFFFFFFFFFFF8);
  v19 = (_OWORD *)((v7 + 7 + v17) & 0xFFFFFFFFFFFFFFF8);
  v20 = *v18;
  v21 = v18[1];
  *(_OWORD *)v18 = *v19;
  sub_1D2C45258(v20, v21);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedConformanceWitness();
  v22 = swift_getAssociatedTypeWitness();
  v23 = *(_QWORD *)(v22 - 8);
  v24 = *(_DWORD *)(v23 + 80) & 0xF8;
  v25 = v24 + 23;
  v26 = (unint64_t)v18 + v24 + 23;
  v27 = ~v24 & 0xFFFFFFFFFFFFFFF8;
  v28 = v26 & v27;
  v29 = ((unint64_t)v19 + v25) & v27;
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v23 + 40))(v26 & v27, v29, v22);
  *(_QWORD *)((*(_QWORD *)(v23 + 64) + 7 + v28) & 0xFFFFFFFFFFFFFFF8) = *(_QWORD *)((*(_QWORD *)(v23 + 64)
                                                                                       + 7
                                                                                       + v29) & 0xFFFFFFFFFFFFF8);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1D2C4B874(unint64_t a1, unsigned int a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  uint64_t v23;
  unint64_t v25;
  uint64_t (*v26)(unint64_t, uint64_t, uint64_t);
  unint64_t v27;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v6 = *(unsigned int *)(v5 + 84);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedConformanceWitness();
  v7 = swift_getAssociatedTypeWitness();
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(unsigned int *)(v8 + 84);
  if (v9 <= 0x7FFFFFFF)
    v10 = 0x7FFFFFFF;
  else
    v10 = *(_DWORD *)(v8 + 84);
  if (v6 <= v10)
    v11 = v10;
  else
    v11 = v6;
  if (!a2)
    return 0;
  v12 = v7;
  v13 = *(_QWORD *)(v5 + 64);
  v14 = *(unsigned __int8 *)(v5 + 80);
  v15 = v13 + v14;
  v16 = v13 + 7;
  v17 = *(_DWORD *)(v8 + 80) & 0xF8;
  v18 = ~v17 & 0xFFFFFFFFFFFFFFF8;
  v19 = v17 + 23;
  v20 = *(_QWORD *)(v8 + 64) + 7;
  if (v11 < a2)
  {
    if ((((v20 & 0xFFFFFFFFFFFFFFF8)
         + ((v19
           + ((v16
             + ((v15
               + ((v15
                 + ((v15 + ((v15 + ((v15 + ((v15 + ((v15 + (v15 & ~v14)) & ~v14)) & ~v14)) & ~v14)) & ~v14)) & ~v14)) & ~v14)) & ~v14)) & 0xFFFFFFFFFFFFFFF8)) & v18)
         + 8) & 0xFFFFFFF8) != 0)
      v21 = 2;
    else
      v21 = a2 - v11 + 1;
    if (v21 >= 0x10000)
      v22 = 4;
    else
      v22 = 2;
    if (v21 < 0x100)
      v22 = 1;
    if (v21 >= 2)
      v23 = v22;
    else
      v23 = 0;
    __asm { BR              X5 }
  }
  if (v6 >= v10)
  {
    v26 = *(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v5 + 48);
    v25 = a1;
    v9 = v6;
    v12 = AssociatedTypeWitness;
    return v26(v25, v9, v12);
  }
  v25 = (v19
       + ((v16
         + ((v15
           + ((v15
             + ((v15 + ((v15 + ((v15 + ((v15 + ((v15 + ((v15 + a1) & ~v14)) & ~v14)) & ~v14)) & ~v14)) & ~v14)) & ~v14)) & ~v14)) & ~v14)) & 0xFFFFFFFFFFFFFFF8)) & v18;
  if (v9 >= 0x7FFFFFFF)
  {
    v26 = *(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v8 + 48);
    return v26(v25, v9, v12);
  }
  v27 = *(_QWORD *)((v20 + v25) & 0xFFFFFFFFFFFFF8);
  if (v27 >= 0xFFFFFFFF)
    LODWORD(v27) = -1;
  return (v27 + 1);
}

void sub_1D2C4BB60(unsigned int *a1, unsigned int a2, unsigned int a3)
{
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  size_t v13;
  unsigned int v14;
  int v15;
  int v16;
  unsigned int v17;

  v6 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v7 = *(_DWORD *)(v6 + 84);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedConformanceWitness();
  v8 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  if (*(_DWORD *)(v8 + 84) <= 0x7FFFFFFFu)
    v9 = 0x7FFFFFFF;
  else
    v9 = *(_DWORD *)(v8 + 84);
  if (v7 <= v9)
    v10 = v9;
  else
    v10 = v7;
  v11 = *(_QWORD *)(v6 + 64);
  v12 = *(unsigned __int8 *)(v6 + 80);
  v13 = (((*(_DWORD *)(v8 + 80) & 0xF8)
        + 23
        + ((v11
          + 7
          + ((v11
            + v12
            + ((v11
              + v12
              + ((v11
                + v12
                + ((v11 + v12 + ((v11 + v12 + ((v11 + v12 + ((v11 + v12 + ((v11 + v12) & ~v12)) & ~v12)) & ~v12)) & ~v12)) & ~v12)) & ~v12)) & ~v12)) & ~v12)) & 0xFFFFFFFFFFFFFFF8)) & ~(*(_DWORD *)(v8 + 80) & 0xF8) & 0xFFFFFFFFFFFFFFF8)
      + ((*(_QWORD *)(v8 + 64) + 7) & 0xFFFFFFFFFFFFFFF8)
      + 8;
  if (v10 >= a3)
  {
    v16 = 0u;
    if (a2 <= v10)
      goto LABEL_20;
  }
  else
  {
    if ((_DWORD)v13)
      v14 = 2;
    else
      v14 = a3 - v10 + 1;
    if (v14 >= 0x10000)
      v15 = 4;
    else
      v15 = 2;
    if (v14 < 0x100)
      v15 = 1;
    if (v14 >= 2)
      v16 = v15;
    else
      v16 = 0;
    if (a2 <= v10)
LABEL_20:
      __asm { BR              X0 }
  }
  if ((_DWORD)v13)
  {
    v17 = ~v10 + a2;
    bzero(a1, v13);
    *a1 = v17;
  }
  __asm { BR              X10 }
}

void sub_1D2C4BD88()
{
  uint64_t v0;
  char v1;
  uint64_t v2;

  *(_BYTE *)(v0 + v2) = v1;
  JUMPOUT(0x1D2C4BE98);
}

void sub_1D2C4BD90()
{
  int v0;
  uint64_t v1;
  uint64_t v2;

  *(_DWORD *)(v1 + v2) = 0;
  if (v0)
    JUMPOUT(0x1D2C4BD98);
  JUMPOUT(0x1D2C4BE98);
}

void sub_1D2C4BE44()
{
  uint64_t v0;
  __int16 v1;
  uint64_t v2;

  *(_WORD *)(v0 + v2) = v1;
  JUMPOUT(0x1D2C4BE98);
}

void sub_1D2C4BE4C()
{
  uint64_t v0;
  int v1;
  uint64_t v2;

  *(_DWORD *)(v0 + v2) = v1;
  JUMPOUT(0x1D2C4BE98);
}

uint64_t sub_1D2C4BE54(uint64_t a1, size_t a2)
{
  _DWORD *v2;
  int v3;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  *(_WORD *)(v12 + v15) = 0;
  if (!(_DWORD)v11)
    goto LABEL_7;
  if (v14 < v5)
  {
    v2 = (_DWORD *)((v9
                   + ((v7
                     + ((v6
                       + ((v6
                         + ((v6 + ((v6 + ((v6 + ((v6 + ((v6 + ((v6 + v12) & v10)) & v10)) & v10)) & v10)) & v10)) & v10)) & v10)) & v10)) & 0xFFFFFFFFFFFFFFF8)) & v8);
    if (v5 >= v11)
      JUMPOUT(0x1D2C4BE60);
    if ((_DWORD)a2)
    {
      v3 = ~v5 + v11;
      bzero(v2, a2);
      *v2 = v3;
    }
LABEL_7:
    JUMPOUT(0x1D2C4BE98);
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v16 + 56))(v12, v11, v14, v13);
}

uint64_t _s17EncryptedIssuanceVMa(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&_s17EncryptedIssuanceVMn);
}

_QWORD *sub_1D2C4BEC4@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  return sub_1D2C4BED8(a1, a2);
}

_QWORD *sub_1D2C4BED8@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  if (result)
    *a2 = *result;
  else
    __break(1u);
  return result;
}

uint64_t sub_1D2C4BEEC(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = sub_1D2CAA864();
  if (!result || (result = sub_1D2CAA888(), !__OFSUB__(a1, result)))
  {
    if (!__OFSUB__(a2, a1))
    {
      sub_1D2CAA87C();
      sub_1D2CAAD98();
      sub_1D2C4C284();
      return sub_1D2CAAB88();
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

void sub_1D2C4BF98(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = sub_1D2CAAD98();
  MEMORY[0x1E0C80A78](v3);
  v4 = sub_1D2CAABB8();
  MEMORY[0x1E0C80A78](v4);
  sub_1D2C4C284();
  sub_1D2CAABA0();
  __asm { BR              X10 }
}

uint64_t sub_1D2C4C080()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)(v7 - 112) = v5;
  *(_WORD *)(v7 - 104) = v4;
  *(_BYTE *)(v7 - 102) = BYTE2(v4);
  *(_BYTE *)(v7 - 101) = BYTE3(v4);
  *(_BYTE *)(v7 - 100) = BYTE4(v4);
  *(_BYTE *)(v7 - 99) = BYTE5(v4);
  sub_1D2CAAB88();
  sub_1D2C45258(v5, v4);
  sub_1D2CAAB94();
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v2, v0);
  sub_1D2CAABAC();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 120) + 8))(v3, v1);
  return *(_QWORD *)(v7 - 112);
}

unint64_t sub_1D2C4C284()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1EFC9F9A8;
  if (!qword_1EFC9F9A8)
  {
    v1 = sub_1D2CAAD98();
    result = MEMORY[0x1D8245F38](MEMORY[0x1E0CA9930], v1);
    atomic_store(result, (unint64_t *)&qword_1EFC9F9A8);
  }
  return result;
}

char *sub_1D2C4C2CC(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  unint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  void (*v19)(char *, uint64_t);
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  __int128 v34;
  void (*v35)(char *, uint64_t);
  unint64_t v36;
  unint64_t v37;
  uint64_t *v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;

  v43 = *MEMORY[0x1E0C80C00];
  v41 = sub_1D2CAABB8();
  v32 = *(_QWORD *)(v41 - 8);
  MEMORY[0x1E0C80A78](v41);
  v9 = (char *)&v30 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v40 = sub_1D2CAAD98();
  v31 = *(_QWORD *)(v40 - 8);
  MEMORY[0x1E0C80A78](v40);
  v11 = (char *)&v30 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1D2C4BF98(a1, a2);
  if (a4 < 0)
    goto LABEL_30;
  if (a4)
  {
    if ((a3 & 0x8000000000000000) != 0)
    {
LABEL_31:
      __break(1u);
LABEL_32:
      __break(1u);
    }
    if (!a3)
      goto LABEL_32;
    v13 = 0;
    v38 = &v43;
    v39 = bswap64(v12);
    v14 = (char *)MEMORY[0x1E0DEE9D8];
    v34 = xmmword_1D2CACF70;
    v30 = a4;
    v37 = a3;
    v15 = v40;
    while (1)
    {
      if (v13 == a4)
        goto LABEL_29;
      v33 = v13;
      sub_1D2CAAD8C();
      v42 = v39;
      sub_1D2CAAD68();
      sub_1D2CAAF0C();
      v16 = sub_1D2C4C284();
      v17 = v40;
      v36 = v16;
      sub_1D2CAAB88();
      swift_bridgeObjectRelease();
      sub_1D2CAAD74();
      sub_1D2CAABAC();
      v18 = v42 % a3;
      v35 = *(void (**)(char *, uint64_t))(v32 + 8);
      v35(v9, v41);
      v19 = *(void (**)(char *, uint64_t))(v31 + 8);
      v19(v11, v17);
      v20 = *((_QWORD *)v14 + 2);
      if (v20)
      {
        v21 = 0;
        while (1)
        {
          if (*((_QWORD *)v14 + 4) != v18)
          {
            if (v20 == 1)
              goto LABEL_20;
            if (*((_QWORD *)v14 + 5) != v18)
              break;
          }
LABEL_12:
          if (v21 < 0xA)
          {
            ++v21;
            sub_1D2CAAD8C();
            v42 = v39;
            sub_1D2CAAD68();
            __swift_instantiateConcreteTypeFromMangledName(qword_1ED985F40);
            v22 = swift_allocObject();
            *(_OWORD *)(v22 + 16) = v34;
            *(_BYTE *)(v22 + 32) = v21;
            sub_1D2CAAF0C();
            sub_1D2CAAB88();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            sub_1D2CAAD74();
            sub_1D2CAABAC();
            v18 = v42 % v37;
            v35(v9, v41);
            v19(v11, v15);
            v20 = *((_QWORD *)v14 + 2);
            if (v20)
              continue;
          }
          goto LABEL_20;
        }
        if (v20 != 2)
          break;
      }
LABEL_20:
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v14 = sub_1D2C71A70(0, v20 + 1, 1, v14);
      a4 = v30;
      v26 = *((_QWORD *)v14 + 2);
      v25 = *((_QWORD *)v14 + 3);
      v27 = v33;
      if (v26 >= v25 >> 1)
      {
        v28 = sub_1D2C71A70((char *)(v25 > 1), v26 + 1, 1, v14);
        v27 = v33;
        v14 = v28;
      }
      v13 = v27 + 1;
      *((_QWORD *)v14 + 2) = v26 + 1;
      *(_QWORD *)&v14[8 * v26 + 32] = v18;
      a3 = v37;
      if (v13 == a4)
        return v14;
    }
    v23 = 6;
    while (1)
    {
      v24 = v23 - 3;
      if (__OFADD__(v23 - 4, 1))
        break;
      if (*(_QWORD *)&v14[8 * v23] == v18)
        goto LABEL_12;
      ++v23;
      if (v24 == v20)
        goto LABEL_20;
    }
    __break(1u);
LABEL_29:
    __break(1u);
LABEL_30:
    __break(1u);
    goto LABEL_31;
  }
  return (char *)MEMORY[0x1E0DEE9D8];
}

unint64_t static Padme.paddedMessageByteCount(_:)(unint64_t result)
{
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;
  BOOL v4;
  BOOL v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;

  if (result)
  {
    v1 = __clz(result);
    v2 = __clz(v1 ^ 0x3F);
    v3 = ~v1;
    v5 = __OFADD__(v2, v3);
    v6 = v2 + v3;
    v4 = v6 < 0;
    v7 = 1 << v6;
    if (v4 != v5)
      v7 = 0;
    v8 = v7 != 0;
    v9 = v7 - 1;
    if (v8)
    {
      if (__CFADD__(result, v9))
        return 0;
      else
        return (result + v9) & ~v9;
    }
    else
    {
      __break(1u);
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for Padme()
{
  return &type metadata for Padme;
}

uint64_t PEC.SimilarityClient.similarityConfig.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  char v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = *(_BYTE *)(v1 + 17);
  v3 = *(_QWORD *)(v1 + 24);
  v4 = *(_BYTE *)(v1 + 32);
  v6 = *(_QWORD *)(v1 + 40);
  v5 = *(_QWORD *)(v1 + 48);
  v7 = *(_QWORD *)(v1 + 56);
  *(_BYTE *)a1 = *(_BYTE *)(v1 + 16);
  *(_BYTE *)(a1 + 1) = v2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_BYTE *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 24) = v6;
  *(_QWORD *)(a1 + 32) = v5;
  *(_QWORD *)(a1 + 40) = v7;
  sub_1D2CAAF0C();
  return sub_1D2CAAF0C();
}

uint64_t PEC.SimilarityClient.init(config:secretKey:)@<X0>(char *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  char v4;
  char v5;
  unint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  unint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;

  v4 = *a1;
  v5 = a1[1];
  v6 = *((_QWORD *)a1 + 1);
  v7 = a1[16];
  v9 = *((_QWORD *)a1 + 3);
  v8 = *((_QWORD *)a1 + 4);
  v10 = *((_QWORD *)a1 + 5);
  v11 = *a2;
  v25 = a2[1];
  LOBYTE(v19) = v4;
  BYTE1(v19) = v5;
  v20 = v6;
  v21 = v7;
  v22 = v9;
  v23 = v8;
  v24 = v10;
  result = sub_1D2C4FB78();
  if (v3)
  {
    sub_1D2C45258(v11, v25);
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  v13 = result;
  v17 = v9;
  v19 = v11;
  v20 = v25;
  if ((result & 0xC000000000000001) != 0)
  {
    sub_1D2CAAF0C();
    v14 = MEMORY[0x1D8245380](0, v13);
    goto LABEL_6;
  }
  if (*(_QWORD *)((result & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    v14 = *(_QWORD *)(result + 32);
    sub_1D2CAAF0C();
    swift_retain();
LABEL_6:
    sub_1D2C90FBC((uint64_t)&v19, v14);
    v16 = v15;
    result = swift_bridgeObjectRelease();
    *(_QWORD *)a3 = v13;
    *(_QWORD *)(a3 + 8) = v16;
    *(_BYTE *)(a3 + 16) = v4;
    *(_BYTE *)(a3 + 17) = v5;
    *(_QWORD *)(a3 + 24) = v6;
    *(_BYTE *)(a3 + 32) = v7;
    *(_QWORD *)(a3 + 40) = v17;
    *(_QWORD *)(a3 + 48) = v8;
    *(_QWORD *)(a3 + 56) = v10;
    return result;
  }
  __break(1u);
  return result;
}

void PEC.SimilarityClient.generateGaloisKey()(_QWORD *a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = *v1;
  v4 = v1[1];
  v5 = v1[6];
  if ((*v1 & 0xC000000000000001) != 0)
  {
    v6 = MEMORY[0x1D8245380](0);
    goto LABEL_4;
  }
  if (*(_QWORD *)((v3 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    v6 = *(_QWORD *)(v3 + 32);
    swift_retain();
LABEL_4:
    sub_1D2CAAF0C();
    swift_retain();
    sub_1D2C9C6C8(v6, v5, v4, a1);
    return;
  }
  __break(1u);
}

int64_t PEC.SimilarityClient.query(values:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  int64_t result;
  int64_t v5;
  char v6;
  uint64_t v7;

  result = PEC.SimilarityClient.queryCrt(values:)(a1);
  if (!v2)
  {
    v5 = result;
    if (*(_QWORD *)(result + 16))
    {
      v6 = *(_BYTE *)(result + 48);
      v7 = *(_QWORD *)(result + 56);
      *(_OWORD *)a2 = *(_OWORD *)(v5 + 32);
      *(_BYTE *)(a2 + 16) = v6;
      *(_QWORD *)(a2 + 24) = v7;
      sub_1D2CAAF0C();
      return swift_bridgeObjectRelease();
    }
    else
    {
      __break(1u);
    }
  }
  return result;
}

int64_t PEC.SimilarityClient.queryCrt(values:)(uint64_t a1)
{
  _OWORD *v1;
  uint64_t v2;
  __int128 v4;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  char v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  int64_t v26;
  uint64_t v27;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unsigned __int8 v37;
  uint64_t v38[2];
  int64_t v39;
  __int128 v40;
  char v41;
  _BYTE v42[7];
  uint64_t v43;
  __int128 v44;
  _OWORD v45[3];
  __int128 v46;
  _DWORD v47[2];
  __int128 v48;
  uint64_t v49;

  v4 = v1[2];
  v46 = v1[3];
  v5 = v1[1];
  v45[0] = *v1;
  v45[1] = v5;
  v45[2] = v4;
  v48 = v5;
  v6 = v4;
  v47[0] = (unint64_t)v4 >> 8;
  *(_DWORD *)((char *)v47 + 3) = DWORD1(v4);
  v7 = *((_QWORD *)&v4 + 1);
  v8 = v46;
  v9 = *(_QWORD *)(a1 + 16);
  if (*((_QWORD *)&v4 + 1) != -1)
  {
    if (!*((_QWORD *)&v4 + 1))
    {
      if (v9)
      {
LABEL_6:
        sub_1D2C4E7DC();
        swift_allocError();
        *(_DWORD *)v10 = 1;
        *(_BYTE *)(v10 + 4) = 1;
        swift_willThrow();
        return v9;
      }
      __break(1u);
    }
    if (v9 % *((_QWORD *)&v4 + 1))
      goto LABEL_6;
  }
  sub_1D2CAAF0C();
  v11 = sub_1D2C4E820(0, v9, v7, a1, v7);
  swift_bridgeObjectRelease();
  sub_1D2C4EE00((uint64_t)v45);
  v12 = sub_1D2C4EC68(v11, (uint64_t)v45);
  sub_1D2C4EE50((uint64_t)v45);
  swift_bridgeObjectRelease();
  if (v7 < 1 || (v36 = v9 / v7, v9 / v7 < 1))
  {
    sub_1D2C4E7DC();
    swift_allocError();
    *(_DWORD *)v27 = 1;
    *(_BYTE *)(v27 + 4) = 1;
    swift_willThrow();
  }
  else
  {
    v40 = v48;
    v41 = v6;
    *(_DWORD *)v42 = v47[0];
    *(_DWORD *)&v42[3] = *(_DWORD *)((char *)v47 + 3);
    v43 = v7;
    v44 = v8;
    v9 = (int64_t)&v40;
    v13 = sub_1D2C4FB78();
    if (!v2)
    {
      v14 = v13;
      v35 = *(_QWORD *)(*((_QWORD *)&v8 + 1) + 16);
      v39 = MEMORY[0x1E0DEE9D8];
      sub_1D2C4D9CC(0, 0, 0);
      v9 = v39;
      if (v14 >> 62)
        goto LABEL_26;
      v15 = *(_QWORD *)((v14 & 0xFFFFFFFFFFFFF8) + 0x10);
      sub_1D2CAAF0C();
      if (!v15)
      {
LABEL_27:
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease();
        return v9;
      }
LABEL_12:
      v33 = *((_QWORD *)&v45[0] + 1);
      v34 = v14 & 0xC000000000000001;
      v16 = 4;
      v31 = v7;
      v32 = v14;
      v30 = v12;
      while (1)
      {
        v17 = v16 - 4;
        if (v34)
        {
          v14 = MEMORY[0x1D8245380](v16 - 4, v14);
          v18 = v16 - 3;
          if (__OFADD__(v17, 1))
            goto LABEL_25;
        }
        else
        {
          v14 = *(_QWORD *)(v14 + 8 * v16);
          swift_retain();
          v18 = v16 - 3;
          if (__OFADD__(v17, 1))
          {
LABEL_25:
            __break(1u);
LABEL_26:
            sub_1D2CAAF0C();
            v15 = sub_1D2CAB068();
            if (!v15)
              goto LABEL_27;
            goto LABEL_12;
          }
        }
        v49 = v18;
        v38[0] = v36;
        v38[1] = v7;
        v37 = v6;
        swift_retain();
        sub_1D2CAAF0C();
        swift_retain();
        sub_1D2C9D514(v14, v38, &v37, v12, v33, v35 != 0, (uint64_t)&v40);
        v19 = v15;
        v20 = v6;
        swift_release();
        v21 = v40;
        v22 = v41;
        v23 = v43;
        v39 = v9;
        v25 = *(_QWORD *)(v9 + 16);
        v24 = *(_QWORD *)(v9 + 24);
        if (v25 >= v24 >> 1)
        {
          v29 = v40;
          sub_1D2C4D9CC((char *)(v24 > 1), v25 + 1, 1);
          v21 = v29;
          v9 = v39;
        }
        *(_QWORD *)(v9 + 16) = v25 + 1;
        v26 = v9 + 32 * v25;
        *(_OWORD *)(v26 + 32) = v21;
        *(_BYTE *)(v26 + 48) = v22;
        *(_QWORD *)(v26 + 56) = v23;
        ++v16;
        v15 = v19;
        v6 = v20;
        v12 = v30;
        v7 = v31;
        v14 = v32;
        if (v49 == v19)
          goto LABEL_27;
      }
    }
  }
  swift_bridgeObjectRelease();
  return v9;
}

uint64_t sub_1D2C4CE1C@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  float *v7;
  unint64_t v8;
  int64_t v9;
  float v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  float v14;
  float *v15;
  unint64_t v16;
  unint64_t v17;
  float *v18;
  float v19;
  uint64_t result;
  uint64_t v21;
  float v22;
  float v23;
  float *v24;
  float v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v4 = *a1;
  v5 = *(_QWORD *)(*a1 + 16);
  v6 = MEMORY[0x1E0DEE9D8];
  if (v5)
  {
    v30 = MEMORY[0x1E0DEE9D8];
    sub_1D2C4DA38(0, v5, 0);
    v6 = v30;
    v7 = (float *)(v4 + 32);
    v8 = *(_QWORD *)(v30 + 16);
    v9 = v5;
    do
    {
      v10 = *v7;
      v31 = v6;
      v11 = *(_QWORD *)(v6 + 24);
      v12 = v8 + 1;
      if (v8 >= v11 >> 1)
      {
        sub_1D2C4DA38((char *)(v11 > 1), v8 + 1, 1);
        v6 = v31;
      }
      *(_QWORD *)(v6 + 16) = v12;
      *(float *)(v6 + 4 * v8 + 32) = v10 * v10;
      ++v7;
      ++v8;
      --v9;
    }
    while (v9);
  }
  else
  {
    v12 = *(_QWORD *)(MEMORY[0x1E0DEE9D8] + 16);
    if (!v12)
    {
      v21 = MEMORY[0x1E0DEE9D8];
      result = swift_bridgeObjectRelease();
      goto LABEL_28;
    }
  }
  if (v12 < 2)
  {
    v13 = 0;
    v14 = 0.0;
LABEL_13:
    v17 = v12 - v13;
    v18 = (float *)(v6 + 4 * v13 + 32);
    do
    {
      v19 = *v18++;
      v14 = v14 + v19;
      --v17;
    }
    while (v17);
    goto LABEL_15;
  }
  v13 = v12 & 0xFFFFFFFFFFFFFFFELL;
  v15 = (float *)(v6 + 36);
  v14 = 0.0;
  v16 = v12 & 0xFFFFFFFFFFFFFFFELL;
  do
  {
    v14 = (float)(v14 + *(v15 - 1)) + *v15;
    v15 += 2;
    v16 -= 2;
  }
  while (v16);
  if (v12 != v13)
    goto LABEL_13;
LABEL_15:
  result = swift_bridgeObjectRelease();
  v21 = MEMORY[0x1E0DEE9D8];
  if (!v5)
  {
LABEL_28:
    *a3 = v21;
    return result;
  }
  v22 = (float)*(uint64_t *)(a2 + 24);
  v32 = MEMORY[0x1E0DEE9D8];
  v23 = sqrtf(v14);
  result = (uint64_t)sub_1D2C4DA14(0, v5, 0);
  v21 = v32;
  v24 = (float *)(v4 + 32);
  while (1)
  {
    if ((LODWORD(v23) & 0x7FFFFFFF) == 0)
    {
      v26 = 0;
      goto LABEL_23;
    }
    v25 = roundf((float)(*v24 * v22) / v23);
    if ((~LODWORD(v25) & 0x7F800000) == 0)
      break;
    if (v25 <= -9.2234e18)
      goto LABEL_30;
    if (v25 >= 9.2234e18)
      goto LABEL_31;
    v26 = (uint64_t)v25;
LABEL_23:
    v28 = *(_QWORD *)(v32 + 16);
    v27 = *(_QWORD *)(v32 + 24);
    if (v28 >= v27 >> 1)
      result = (uint64_t)sub_1D2C4DA14((char *)(v27 > 1), v28 + 1, 1);
    *(_QWORD *)(v32 + 16) = v28 + 1;
    *(_QWORD *)(v32 + 8 * v28 + 32) = v26;
    ++v24;
    if (!--v5)
      goto LABEL_28;
  }
  __break(1u);
LABEL_30:
  __break(1u);
LABEL_31:
  __break(1u);
  return result;
}

uint64_t sub_1D2C4D07C(uint64_t a1, unint64_t a2, uint64_t (*a3)(__int128 *, uint64_t))
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  __int128 v37;
  __int128 v38;
  uint64_t v39;
  __int128 v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;

  v4 = a2;
  v5 = a1;
  v39 = *(_QWORD *)(a1 + 16);
  v34 = a2 >> 62;
  if (a2 >> 62)
    goto LABEL_61;
  v6 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    if (v6 >= v39)
      v7 = v39;
    else
      v7 = v6;
    v44 = MEMORY[0x1E0DEE9D8];
    sub_1D2C4DA54(0, v7 & ~(v7 >> 63), 0);
    if (v7 < 0)
    {
      __break(1u);
LABEL_63:
      result = swift_bridgeObjectRelease();
LABEL_64:
      __break(1u);
      return result;
    }
    v8 = v44;
    v28 = v4;
    v26 = v5;
    if (v7)
    {
      v35 = v4 & 0xFFFFFFFFFFFFFF8;
      v29 = v4 + 32;
      v31 = v4 & 0xC000000000000001;
      sub_1D2CAAF0C();
      result = sub_1D2CAAF0C();
      v10 = 0;
      v11 = (uint64_t *)(v5 + 56);
      while (v7 != v10)
      {
        if (v39 == v10)
          goto LABEL_64;
        if (v10 >= v39)
          goto LABEL_53;
        v37 = *(_OWORD *)(v11 - 3);
        v4 = *((unsigned __int8 *)v11 - 8);
        v12 = *v11;
        if (v34)
        {
          sub_1D2CAAF0C();
          sub_1D2CAAF0C();
          v5 = sub_1D2CAB068();
          swift_bridgeObjectRelease();
        }
        else
        {
          v5 = *(_QWORD *)(v35 + 16);
          sub_1D2CAAF0C();
        }
        if (v10 == v5)
          goto LABEL_63;
        if (v31)
        {
          result = MEMORY[0x1D8245380](v10, v28);
          v5 = result;
        }
        else
        {
          if (v10 < 0)
            goto LABEL_54;
          if ((unint64_t)v10 >= *(_QWORD *)(v35 + 16))
            goto LABEL_55;
          v5 = *(_QWORD *)(v29 + 8 * v10);
          result = swift_retain();
        }
        v32 = v10 + 1;
        if (__OFADD__(v10, 1))
          goto LABEL_56;
        v40 = v37;
        v41 = v4;
        v42 = v12;
        v43 = v5;
        if (!v12)
          goto LABEL_64;
        v13 = a3(&v40, v5);
        if (v3)
        {
LABEL_50:
          swift_release();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_release();
          goto LABEL_51;
        }
        v14 = v13;
        swift_release();
        result = swift_bridgeObjectRelease();
        v44 = v8;
        v4 = *(_QWORD *)(v8 + 16);
        v15 = *(_QWORD *)(v8 + 24);
        v5 = v4 + 1;
        if (v4 >= v15 >> 1)
        {
          result = (uint64_t)sub_1D2C4DA54((_QWORD *)(v15 > 1), v4 + 1, 1);
          v8 = v44;
        }
        ++v10;
        *(_QWORD *)(v8 + 16) = v5;
        *(_QWORD *)(v8 + 8 * v4 + 32) = v14;
        v11 += 4;
        if (v7 == v10)
        {
          v4 = v28;
          goto LABEL_30;
        }
      }
      __break(1u);
LABEL_53:
      __break(1u);
LABEL_54:
      __break(1u);
LABEL_55:
      __break(1u);
LABEL_56:
      __break(1u);
      goto LABEL_57;
    }
    sub_1D2CAAF0C();
    sub_1D2CAAF0C();
    v32 = 0;
    v10 = 0;
LABEL_30:
    v36 = v4 & 0xFFFFFFFFFFFFFF8;
    if (v39 == v10)
      break;
    v16 = 0;
    v30 = v4 & 0xC000000000000001;
    v17 = v4 + 8 * v32 + 32;
    v4 = v26 + 32 * v10 + 56;
    v27 = v17;
    while (v10 + v16 < v39)
    {
      v38 = *(_OWORD *)(v4 - 24);
      v18 = *(_BYTE *)(v4 - 8);
      v5 = *(_QWORD *)v4;
      if (v34)
      {
        sub_1D2CAAF0C();
        sub_1D2CAAF0C();
        v19 = sub_1D2CAB068();
        swift_bridgeObjectRelease();
      }
      else
      {
        v19 = *(_QWORD *)(v36 + 16);
        sub_1D2CAAF0C();
      }
      v20 = v32 + v16;
      if (v32 + v16 == v19)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        goto LABEL_51;
      }
      if (v30)
      {
        v21 = MEMORY[0x1D8245380]();
      }
      else
      {
        if ((v20 & 0x8000000000000000) != 0)
          goto LABEL_58;
        if (v20 >= *(_QWORD *)(v36 + 16))
          goto LABEL_59;
        v21 = *(_QWORD *)(v27 + 8 * v16);
        swift_retain();
      }
      if (!(v32 - 0x7FFFFFFFFFFFFFFFLL + v16))
        goto LABEL_60;
      v40 = v38;
      v41 = v18;
      v42 = v5;
      v43 = v21;
      v22 = a3(&v40, v21);
      if (v3)
        goto LABEL_50;
      v23 = v22;
      swift_release();
      swift_bridgeObjectRelease();
      v44 = v8;
      v25 = *(_QWORD *)(v8 + 16);
      v24 = *(_QWORD *)(v8 + 24);
      v5 = v25 + 1;
      if (v25 >= v24 >> 1)
      {
        sub_1D2C4DA54((_QWORD *)(v24 > 1), v25 + 1, 1);
        v8 = v44;
      }
      *(_QWORD *)(v8 + 16) = v5;
      *(_QWORD *)(v8 + 8 * v25 + 32) = v23;
      ++v16;
      v4 += 32;
      if (v39 - v10 == v16)
        goto LABEL_31;
    }
LABEL_57:
    __break(1u);
LABEL_58:
    __break(1u);
LABEL_59:
    __break(1u);
LABEL_60:
    __break(1u);
LABEL_61:
    sub_1D2CAAF0C();
    v6 = sub_1D2CAB068();
    swift_bridgeObjectRelease();
  }
LABEL_31:
  swift_bridgeObjectRelease();
LABEL_51:
  swift_bridgeObjectRelease();
  return v8;
}

uint64_t PEC.SimilarityClient.decrypt(reply:)(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t inited;
  uint64_t v6;

  v1 = *a1;
  v2 = a1[1];
  v3 = *((_BYTE *)a1 + 16);
  v4 = a1[3];
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EFC9F9B8);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1D2CACF70;
  *(_QWORD *)(inited + 32) = v1;
  *(_QWORD *)(inited + 40) = v2;
  *(_BYTE *)(inited + 48) = v3;
  *(_QWORD *)(inited + 56) = v4;
  sub_1D2CAAF0C();
  v6 = PEC.SimilarityClient.decryptCrt(reply:)();
  swift_setDeallocating();
  swift_arrayDestroy();
  return v6;
}

uint64_t PEC.SimilarityClient.decryptCrt(reply:)()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  char *v7;
  int64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  __int128 v14;

  v14 = *(_OWORD *)(v0 + 16);
  v2 = *(_QWORD *)v0;
  sub_1D2CAAF0C();
  v3 = sub_1D2CAAF0C();
  v4 = sub_1D2C4D07C(v3, v2, (uint64_t (*)(__int128 *, uint64_t))sub_1D2C4EE9C);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v1)
    return v2;
  v5 = PEC.SimilarityClientConfig.plaintextModuli()();
  v7 = sub_1D2C6C16C(v4, v5);
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  if ((unsigned __int128)(*((uint64_t *)&v14 + 1) * (__int128)*((uint64_t *)&v14 + 1)) >> 64 == (uint64_t)(*((_QWORD *)&v14 + 1) * *((_QWORD *)&v14 + 1)) >> 63)
  {
    v8 = *((_QWORD *)v7 + 2);
    if (v8)
    {
      v13 = MEMORY[0x1E0DEE9D8];
      sub_1D2C4DA38(0, v8, 0);
      v9 = 0;
      v2 = v13;
      v10 = *(_QWORD *)(v13 + 16);
      do
      {
        v11 = *(_QWORD *)&v7[8 * v9 + 32];
        v12 = *(_QWORD *)(v13 + 24);
        if (v10 >= v12 >> 1)
          sub_1D2C4DA38((char *)(v12 > 1), v10 + 1, 1);
        ++v9;
        *(_QWORD *)(v13 + 16) = v10 + 1;
        *(float *)(v13 + 4 * v10++ + 32) = (float)v11 / (float)(uint64_t)(*((_QWORD *)&v14 + 1) * *((_QWORD *)&v14 + 1));
      }
      while (v8 != v9);
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRelease();
      return MEMORY[0x1E0DEE9D8];
    }
    return v2;
  }
  __break(1u);
  return result;
}

uint64_t sub_1D2C4D840(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  unsigned __int8 v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;

  v5 = *(_QWORD *)a1;
  v6 = *(_QWORD *)(a1 + 8);
  v7 = *(_BYTE *)(a1 + 16);
  v8 = *(_QWORD *)(a3 + 8);
  swift_retain();
  swift_retain();
  v9 = sub_1D2CAAF0C();
  v10 = sub_1D2C4EEB4(v9, a2, v8);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  if (!v3)
  {
    v14 = v5;
    v15 = v6;
    v18 = v7;
    sub_1D2C53CE0(&v14, &v18, v10, (uint64_t)&v19);
    if (v21)
    {
      if (v21 != 1)
      {
        sub_1D2C4E7DC();
        swift_allocError();
        *(_DWORD *)v13 = 5;
        *(_BYTE *)(v13 + 4) = 1;
        swift_willThrow();
        swift_bridgeObjectRelease();
        return v10;
      }
      v14 = v19;
      v15 = v20;
      v16 = 1;
      v17 = v22;
      sub_1D2C546F4();
    }
    else
    {
      v14 = v19;
      v15 = v20;
      v16 = 0;
      v17 = v22;
      sub_1D2C5417C();
    }
    v10 = v12;
    swift_bridgeObjectRelease();
  }
  return v10;
}

char *sub_1D2C4D9B0(char *a1, int64_t a2, char a3)
{
  char **v3;
  char *result;

  result = sub_1D2C4DBC0(a1, a2, a3, *v3);
  *v3 = result;
  return result;
}

char *sub_1D2C4D9CC(char *a1, int64_t a2, char a3)
{
  char **v3;
  char *result;

  result = sub_1D2C4DCC0(a1, a2, a3, *v3);
  *v3 = result;
  return result;
}

_QWORD *sub_1D2C4D9E8(_QWORD *a1, int64_t a2, char a3)
{
  _QWORD **v3;
  _QWORD *result;

  result = sub_1D2C4E4A4(a1, a2, a3, *v3, &qword_1EFC9FA38, qword_1EFC9FA40);
  *v3 = result;
  return result;
}

char *sub_1D2C4DA14(char *a1, int64_t a2, char a3)
{
  char **v3;
  char *result;

  result = sub_1D2C4E1B8(a1, a2, a3, *v3, &qword_1EFC9FA30);
  *v3 = result;
  return result;
}

char *sub_1D2C4DA38(char *a1, int64_t a2, char a3)
{
  char **v3;
  char *result;

  result = sub_1D2C4DDC0(a1, a2, a3, *v3);
  *v3 = result;
  return result;
}

_QWORD *sub_1D2C4DA54(_QWORD *a1, int64_t a2, char a3)
{
  _QWORD **v3;
  _QWORD *result;

  result = sub_1D2C4E4A4(a1, a2, a3, *v3, &qword_1EFC9FA20, &qword_1EFC9FA28);
  *v3 = result;
  return result;
}

char *sub_1D2C4DA80(char *a1, int64_t a2, char a3)
{
  char **v3;
  char *result;

  result = sub_1D2C4DEB8(a1, a2, a3, *v3);
  *v3 = result;
  return result;
}

char *sub_1D2C4DA9C(char *a1, int64_t a2, char a3)
{
  char **v3;
  char *result;

  result = sub_1D2C4DFB8(a1, a2, a3, *v3);
  *v3 = result;
  return result;
}

char *sub_1D2C4DAB8(char *a1, int64_t a2, char a3)
{
  char **v3;
  char *result;

  result = sub_1D2C4E0A0(a1, a2, a3, *v3);
  *v3 = result;
  return result;
}

_QWORD *sub_1D2C4DAD4(_QWORD *a1, int64_t a2, char a3)
{
  _QWORD **v3;
  _QWORD *result;

  result = sub_1D2C4E4A4(a1, a2, a3, *v3, &qword_1EFC9FA00, &qword_1ED985DB8);
  *v3 = result;
  return result;
}

char *sub_1D2C4DB00(char *a1, int64_t a2, char a3)
{
  char **v3;
  char *result;

  result = sub_1D2C4E1B8(a1, a2, a3, *v3, &qword_1EFC9F9F8);
  *v3 = result;
  return result;
}

char *sub_1D2C4DB24(char *a1, int64_t a2, char a3)
{
  char **v3;
  char *result;

  result = sub_1D2C4E2AC(a1, a2, a3, *v3);
  *v3 = result;
  return result;
}

char *sub_1D2C4DB40(char *a1, int64_t a2, char a3)
{
  char **v3;
  char *result;

  result = sub_1D2C4E3A4(a1, a2, a3, *v3);
  *v3 = result;
  return result;
}

_QWORD *sub_1D2C4DB5C(_QWORD *a1, int64_t a2, char a3)
{
  _QWORD **v3;
  _QWORD *result;

  result = sub_1D2C4E4A4(a1, a2, a3, *v3, &qword_1EFC9F9E0, &qword_1EFC9F9E8);
  *v3 = result;
  return result;
}

char *sub_1D2C4DB88(char *a1, int64_t a2, char a3)
{
  char **v3;
  char *result;

  result = sub_1D2C4E5C8(a1, a2, a3, *v3);
  *v3 = result;
  return result;
}

char *sub_1D2C4DBA4(char *a1, int64_t a2, char a3)
{
  char **v3;
  char *result;

  result = sub_1D2C4E6C0(a1, a2, a3, *v3);
  *v3 = result;
  return result;
}

char *sub_1D2C4DBC0(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EFC9F9F0);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 1;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 5);
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[32 * v8])
      memmove(v13, v14, 32 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_release();
  return v10;
}

char *sub_1D2C4DCC0(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EFC9F9B8);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 1;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 5);
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[32 * v8])
      memmove(v13, v14, 32 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_release();
  return v10;
}

char *sub_1D2C4DDC0(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EFC9FA18);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 29;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 2);
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[4 * v8])
      memmove(v13, v14, 4 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v13, v14, 4 * v8);
  }
  swift_release();
  return v10;
}

char *sub_1D2C4DEB8(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(qword_1EFC9F920);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 25;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 3);
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[8 * v8])
      memmove(v13, v14, 8 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_release();
  return v10;
}

char *sub_1D2C4DFB8(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  int64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EFC9FA10);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * v11 - 64;
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v12 = v10 + 32;
  v13 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[v8])
      memmove(v12, v13, v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v12, v13, v8);
  }
  swift_release();
  return v10;
}

char *sub_1D2C4E0A0(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EFC9FA08);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 24);
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v12 = v10 + 32;
  v13 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[24 * v8])
      memmove(v12, v13, 24 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_release();
  return v10;
}

char *sub_1D2C4E1B8(char *result, int64_t a2, char a3, char *a4, uint64_t *a5)
{
  char v6;
  unint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;

  v6 = (char)result;
  if ((a3 & 1) != 0)
  {
    v7 = *((_QWORD *)a4 + 3);
    v8 = v7 >> 1;
    if ((uint64_t)(v7 >> 1) < a2)
    {
      if (v8 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v7 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v8 = a2;
    }
  }
  else
  {
    v8 = a2;
  }
  v9 = *((_QWORD *)a4 + 2);
  if (v8 <= v9)
    v10 = *((_QWORD *)a4 + 2);
  else
    v10 = v8;
  if (v10)
  {
    __swift_instantiateConcreteTypeFromMangledName(a5);
    v11 = (char *)swift_allocObject();
    v12 = _swift_stdlib_malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 25;
    *((_QWORD *)v11 + 2) = v9;
    *((_QWORD *)v11 + 3) = 2 * (v13 >> 3);
  }
  else
  {
    v11 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v14 = v11 + 32;
  v15 = a4 + 32;
  if ((v6 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[8 * v9])
      memmove(v14, v15, 8 * v9);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v14, v15, 8 * v9);
  }
  swift_release();
  return v11;
}

char *sub_1D2C4E2AC(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EFC9F9D0);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 29;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 2);
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[4 * v8])
      memmove(v13, v14, 4 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v13, v14, 4 * v8);
  }
  swift_release();
  return v10;
}

char *sub_1D2C4E3A4(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EFC9F9D8);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 17;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8])
      memmove(v13, v14, 16 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_release();
  return v10;
}

_QWORD *sub_1D2C4E4A4(_QWORD *result, int64_t a2, char a3, _QWORD *a4, uint64_t *a5, uint64_t *a6)
{
  char v8;
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  int64_t v14;
  uint64_t v15;

  v8 = (char)result;
  if ((a3 & 1) != 0)
  {
    v9 = a4[3];
    v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v10 = a2;
    }
  }
  else
  {
    v10 = a2;
  }
  v11 = a4[2];
  if (v10 <= v11)
    v12 = a4[2];
  else
    v12 = v10;
  if (v12)
  {
    __swift_instantiateConcreteTypeFromMangledName(a5);
    v13 = (_QWORD *)swift_allocObject();
    v14 = _swift_stdlib_malloc_size(v13);
    v15 = v14 - 32;
    if (v14 < 32)
      v15 = v14 - 25;
    v13[2] = v11;
    v13[3] = 2 * (v15 >> 3);
  }
  else
  {
    v13 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  }
  if ((v8 & 1) != 0)
  {
    if (v13 != a4 || v13 + 4 >= &a4[v11 + 4])
      memmove(v13 + 4, a4 + 4, 8 * v11);
    a4[2] = 0;
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(a6);
    swift_arrayInitWithCopy();
  }
  swift_release();
  return v13;
}

char *sub_1D2C4E5C8(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EFC9F9C8);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 25;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 3);
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[8 * v8])
      memmove(v13, v14, 8 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v13, v14, 8 * v8);
  }
  swift_release();
  return v10;
}

char *sub_1D2C4E6C0(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EFC9F9C0);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 104);
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v12 = v10 + 32;
  v13 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[104 * v8])
      memmove(v12, v13, 104 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_release();
  return v10;
}

unint64_t sub_1D2C4E7DC()
{
  unint64_t result;

  result = qword_1EFC9F9B0;
  if (!qword_1EFC9F9B0)
  {
    result = MEMORY[0x1D8245F38](&protocol conformance descriptor for CryptoKitError, &type metadata for CryptoKitError);
    atomic_store(result, (unint64_t *)&qword_1EFC9F9B0);
  }
  return result;
}

uint64_t sub_1D2C4E820(int64_t a1, int64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6;
  int64_t v7;
  int64_t v8;
  int64_t v9;
  _BOOL4 v10;
  BOOL v11;
  uint64_t result;
  int64_t v13;
  BOOL v14;
  int64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  unint64_t v22;
  unint64_t v23;
  int64_t v24;
  uint64_t v25;
  BOOL v26;
  int64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  unint64_t v34;
  unint64_t v35;
  int64_t v36;
  BOOL v37;
  int64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;

  v6 = a3;
  v7 = a1;
  v8 = 0;
  v9 = a1;
  while (1)
  {
    v10 = v9 <= a2;
    if (a3 > 0)
      v10 = v9 >= a2;
    if (v10)
      break;
    v11 = __OFADD__(v9, a3);
    v9 += a3;
    if (v11)
      v9 = (v9 >> 63) ^ 0x8000000000000000;
    v11 = __OFADD__(v8++, 1);
    if (v11)
    {
      __break(1u);
      break;
    }
  }
  v44 = MEMORY[0x1E0DEE9D8];
  sub_1D2C4D9E8(0, v8, 0);
  result = v44;
  if (v8)
  {
    v40 = *(_QWORD *)(a4 + 16);
    v13 = a2;
    while (1)
    {
      v14 = v7 <= v13;
      if (v6 > 0)
        v14 = v7 >= v13;
      if (v14)
        break;
      if (__OFADD__(v7, v6))
        v15 = ((v7 + v6) >> 63) ^ 0x8000000000000000;
      else
        v15 = v7 + v6;
      if (__OFADD__(v7, a5))
        goto LABEL_70;
      if (v40 >= v7 + a5)
        v16 = v7 + a5;
      else
        v16 = v40;
      v17 = v16 - v7;
      if (v16 < v7)
        goto LABEL_71;
      if (v7 < 0)
        goto LABEL_72;
      v43 = result;
      v18 = v6;
      sub_1D2CAB0C8();
      sub_1D2CAAF0C();
      swift_unknownObjectRetain_n();
      v19 = swift_dynamicCastClass();
      if (!v19)
      {
        swift_bridgeObjectRelease();
        v19 = MEMORY[0x1E0DEE9D8];
      }
      v20 = *(_QWORD *)(v19 + 16);
      swift_release();
      if (v20 == v17)
      {
        v21 = (_QWORD *)swift_dynamicCastClass();
        v6 = v18;
        v13 = a2;
        if (!v21)
        {
          swift_bridgeObjectRelease();
          v21 = (_QWORD *)MEMORY[0x1E0DEE9D8];
        }
      }
      else
      {
        swift_bridgeObjectRelease();
        v21 = (_QWORD *)MEMORY[0x1E0DEE9D8];
        v6 = v18;
        v13 = a2;
        if (v16 != v7)
        {
          if (v17 >= 1)
          {
            __swift_instantiateConcreteTypeFromMangledName(&qword_1EFC9FA18);
            v21 = (_QWORD *)swift_allocObject();
            v24 = _swift_stdlib_malloc_size(v21);
            v25 = v24 - 32;
            if (v24 < 32)
              v25 = v24 - 29;
            v21[2] = v17;
            v21[3] = 2 * (v25 >> 2);
          }
          memcpy(v21 + 4, (const void *)(a4 + 32 + 4 * v7), 4 * v17);
        }
      }
      swift_bridgeObjectRelease();
      result = v43;
      v23 = *(_QWORD *)(v43 + 16);
      v22 = *(_QWORD *)(v43 + 24);
      if (v23 >= v22 >> 1)
      {
        sub_1D2C4D9E8((_QWORD *)(v22 > 1), v23 + 1, 1);
        v13 = a2;
        result = v43;
      }
      *(_QWORD *)(result + 16) = v23 + 1;
      *(_QWORD *)(result + 8 * v23 + 32) = v21;
      v7 = v15;
      if (!--v8)
        goto LABEL_40;
    }
    __break(1u);
LABEL_70:
    __break(1u);
LABEL_71:
    __break(1u);
LABEL_72:
    __break(1u);
    goto LABEL_73;
  }
  v15 = v7;
  v13 = a2;
LABEL_40:
  v26 = v15 <= v13;
  if (v6 > 0)
    v26 = v15 >= v13;
  if (!v26)
  {
    while (1)
    {
      v27 = __OFADD__(v15, v6) ? ((v15 + v6) >> 63) ^ 0x8000000000000000 : v15 + v6;
      if (__OFADD__(v15, a5))
        break;
      if (*(_QWORD *)(a4 + 16) >= v15 + a5)
        v28 = v15 + a5;
      else
        v28 = *(_QWORD *)(a4 + 16);
      v29 = v28 - v15;
      if (v28 < v15)
        goto LABEL_74;
      if (v15 < 0)
        goto LABEL_75;
      v30 = result;
      sub_1D2CAB0C8();
      sub_1D2CAAF0C();
      swift_unknownObjectRetain_n();
      v31 = swift_dynamicCastClass();
      if (!v31)
      {
        swift_bridgeObjectRelease();
        v31 = MEMORY[0x1E0DEE9D8];
      }
      v32 = *(_QWORD *)(v31 + 16);
      swift_release();
      if (v32 == v29)
      {
        v33 = (_QWORD *)swift_dynamicCastClass();
        if (!v33)
        {
          swift_bridgeObjectRelease();
          v33 = (_QWORD *)MEMORY[0x1E0DEE9D8];
        }
      }
      else
      {
        swift_bridgeObjectRelease();
        v33 = (_QWORD *)MEMORY[0x1E0DEE9D8];
        if (v28 != v15)
        {
          if (v29 >= 1)
          {
            __swift_instantiateConcreteTypeFromMangledName(&qword_1EFC9FA18);
            v33 = (_QWORD *)swift_allocObject();
            v38 = _swift_stdlib_malloc_size(v33);
            v39 = v38 - 32;
            if (v38 < 32)
              v39 = v38 - 29;
            v33[2] = v29;
            v33[3] = 2 * (v39 >> 2);
          }
          memcpy(v33 + 4, (const void *)(a4 + 32 + 4 * v15), 4 * v29);
        }
      }
      swift_bridgeObjectRelease();
      result = v30;
      v45 = v30;
      v35 = *(_QWORD *)(v30 + 16);
      v34 = *(_QWORD *)(v30 + 24);
      v36 = a2;
      if (v35 >= v34 >> 1)
      {
        sub_1D2C4D9E8((_QWORD *)(v34 > 1), v35 + 1, 1);
        v36 = a2;
        result = v45;
      }
      *(_QWORD *)(result + 16) = v35 + 1;
      *(_QWORD *)(result + 8 * v35 + 32) = v33;
      v37 = v27 <= v36;
      if (v6 > 0)
        v37 = v27 >= v36;
      v15 = v27;
      if (v37)
        return result;
    }
LABEL_73:
    __break(1u);
LABEL_74:
    __break(1u);
LABEL_75:
    __break(1u);
  }
  return result;
}

uint64_t sub_1D2C4EC68(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  int64_t v10;
  int64_t v11;
  int64_t v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;

  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
    return MEMORY[0x1E0DEE9D8];
  sub_1D2CAAF0C();
  v5 = 0;
  v6 = MEMORY[0x1E0DEE9D8];
  while (1)
  {
    v19 = *(_QWORD *)(a1 + 8 * v5 + 32);
    sub_1D2CAAF0C();
    sub_1D2C4CE1C(&v19, a2, &v18);
    if (v2)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v6;
    }
    result = swift_bridgeObjectRelease();
    v8 = v18;
    v9 = *(_QWORD *)(v18 + 16);
    v10 = *(_QWORD *)(v6 + 16);
    v11 = v10 + v9;
    if (__OFADD__(v10, v9))
      break;
    result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) != 0 && v11 <= *(_QWORD *)(v6 + 24) >> 1)
    {
      if (*(_QWORD *)(v8 + 16))
        goto LABEL_15;
    }
    else
    {
      if (v10 <= v11)
        v12 = v10 + v9;
      else
        v12 = v10;
      result = (uint64_t)sub_1D2C71A88((char *)result, v12, 1, (char *)v6);
      v6 = result;
      if (*(_QWORD *)(v8 + 16))
      {
LABEL_15:
        v13 = *(_QWORD *)(v6 + 16);
        if ((*(_QWORD *)(v6 + 24) >> 1) - v13 < v9)
          goto LABEL_25;
        result = (uint64_t)memcpy((void *)(v6 + 8 * v13 + 32), (const void *)(v8 + 32), 8 * v9);
        if (v9)
        {
          v14 = *(_QWORD *)(v6 + 16);
          v15 = __OFADD__(v14, v9);
          v16 = v14 + v9;
          if (v15)
            goto LABEL_26;
          *(_QWORD *)(v6 + 16) = v16;
        }
        goto LABEL_4;
      }
    }
    if (v9)
      goto LABEL_24;
LABEL_4:
    ++v5;
    swift_bridgeObjectRelease();
    if (v3 == v5)
    {
      swift_bridgeObjectRelease();
      return v6;
    }
  }
  __break(1u);
LABEL_24:
  __break(1u);
LABEL_25:
  __break(1u);
LABEL_26:
  __break(1u);
  return result;
}

uint64_t sub_1D2C4EE00(uint64_t a1)
{
  sub_1D2CAAF0C();
  swift_retain();
  sub_1D2CAAF0C();
  sub_1D2CAAF0C();
  return a1;
}

uint64_t sub_1D2C4EE50(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1D2C4EE9C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_1D2C4D840(a1, a2, *(_QWORD *)(v2 + 16));
}

uint64_t sub_1D2C4EEB4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  unint64_t v15;
  uint64_t v16;
  _QWORD *inited;
  uint64_t v18;
  _QWORD *v19;
  int v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  unint64_t *v28;
  int64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  int v33;
  uint64_t v34;

  v3 = *(_QWORD *)(a1 + 16);
  v4 = MEMORY[0x1E0DEE9D8];
  if (!v3)
    return v4;
  v34 = MEMORY[0x1E0DEE9D8];
  sub_1D2C4DA80(0, v3, 0);
  v6 = a2;
  v4 = v34;
  v7 = *(_QWORD *)(a2 + 32);
  v8 = (unint64_t *)(a1 + 56);
  while (1)
  {
    v10 = *(v8 - 3);
    v9 = *(v8 - 2);
    v12 = *(v8 - 1);
    v11 = *v8;
    sub_1D2C4F494(v10, v9, v12, *v8);
    v31 = v10;
    v32 = v9;
    sub_1D2C4F494(v10, v9, v12, v11);
    v13 = qword_1EFC9F690;
    result = swift_retain();
    if (v13 != -1)
      result = swift_once();
    if (qword_1EFCA4A70 < 0)
      break;
    if (HIDWORD(qword_1EFCA4A70))
      goto LABEL_19;
    v28 = v8;
    v29 = v3;
    v30 = v4;
    v15 = v11;
    v16 = cche_ciphertext_sizeof();
    type metadata accessor for HE.ObjectStorage();
    inited = (_QWORD *)swift_initStackObject();
    inited[2] = v6;
    swift_retain();
    v4 = swift_slowAlloc();
    inited[3] = v4;
    inited[4] = v4 + v16;
    sub_1D2C7DEE8(v7, v31, v9, v12);
    sub_1D2C4F4DC(v31, v9, v12, v11);
    if (v33)
    {
      sub_1D2C4E7DC();
      swift_allocError();
      *(_DWORD *)v23 = v33;
      *(_BYTE *)(v23 + 4) = 0;
      swift_willThrow();
      swift_release();
LABEL_16:
      swift_release();
      sub_1D2C4F4DC(v31, v32, v12, v15);
      swift_release();
      return v4;
    }
    swift_release();
    v18 = cche_plaintext_sizeof();
    v19 = (_QWORD *)swift_allocObject();
    v19[2] = v6;
    swift_retain();
    result = swift_slowAlloc();
    v19[3] = result;
    v19[4] = result + v18;
    if (!*(_QWORD *)(a3 + 24))
      goto LABEL_20;
    v20 = cche_decrypt();
    if (v20)
    {
      v24 = v20;
      sub_1D2C4E7DC();
      swift_allocError();
      *(_DWORD *)v25 = v24;
      *(_BYTE *)(v25 + 4) = 0;
      swift_willThrow();
      swift_release();
      goto LABEL_16;
    }
    swift_release();
    sub_1D2C4F4DC(v31, v32, v12, v15);
    v4 = v30;
    v22 = *(_QWORD *)(v30 + 16);
    v21 = *(_QWORD *)(v30 + 24);
    if (v22 >= v21 >> 1)
    {
      sub_1D2C4DA80((char *)(v21 > 1), v22 + 1, 1);
      v6 = a2;
      v4 = v30;
    }
    v8 = v28 + 4;
    *(_QWORD *)(v4 + 16) = v22 + 1;
    *(_QWORD *)(v4 + 8 * v22 + 32) = v19;
    v3 = v29 - 1;
    if (v29 == 1)
      return v4;
  }
  __break(1u);
LABEL_19:
  __break(1u);
LABEL_20:
  __break(1u);
  return result;
}

uint64_t _s16SimilarityClientVwxx()
{
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t _s16SimilarityClientVwcp(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_WORD *)(a1 + 16) = *(_WORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  v4 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v4;
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  sub_1D2CAAF0C();
  swift_retain();
  sub_1D2CAAF0C();
  sub_1D2CAAF0C();
  return a1;
}

uint64_t _s16SimilarityClientVwca(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  sub_1D2CAAF0C();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_retain();
  swift_release();
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_BYTE *)(a1 + 17) = *(_BYTE *)(a2 + 17);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  sub_1D2CAAF0C();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  sub_1D2CAAF0C();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 __swift_memcpy64_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t _s16SimilarityClientVwta(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_release();
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_BYTE *)(a1 + 17) = *(_BYTE *)(a2 + 17);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t _s16SimilarityClientVwet(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 64))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t _s16SimilarityClientVwst(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 64) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 64) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for PEC.SimilarityClient()
{
  return &type metadata for PEC.SimilarityClient;
}

uint64_t sub_1D2C4F494(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4)
{
  if ((a2 & 0x2000000000000000) != 0)
  {
    sub_1D2C45028(a1, a2 & 0xDFFFFFFFFFFFFFFFLL);
    return sub_1D2CAAF0C();
  }
  else
  {
    sub_1D2C45028(a1, a2);
    return sub_1D2C45028(a3, a4);
  }
}

uint64_t sub_1D2C4F4DC(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4)
{
  if ((a2 & 0x2000000000000000) != 0)
  {
    sub_1D2C45258(a1, a2 & 0xDFFFFFFFFFFFFFFFLL);
    return swift_bridgeObjectRelease();
  }
  else
  {
    sub_1D2C45258(a1, a2);
    return sub_1D2C45258(a3, a4);
  }
}

uint64_t sub_1D2C4F524()
{
  return swift_allocateGenericValueMetadata();
}

uint64_t sub_1D2C4F52C()
{
  uint64_t result;
  unint64_t v1;

  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  result = swift_getAssociatedTypeWitness();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_1D2C4F66C(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  int v11;
  unsigned int v12;
  int v13;
  int v14;
  unint64_t v15;
  unsigned int v17;
  int v18;

  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  v4 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0xFE)
    v6 = 254;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(unsigned __int8 *)(v4 + 80);
  v8 = *(_QWORD *)(v4 + 64);
  if (a2 <= v6)
    goto LABEL_23;
  v9 = v8 + ((v7 + 16) & ~v7) + 1;
  v10 = 8 * v9;
  if (v9 > 3)
    goto LABEL_7;
  v12 = ((a2 - v6 + ~(-1 << v10)) >> v10) + 1;
  if (HIWORD(v12))
  {
    v11 = *(_DWORD *)(a1 + v9);
    if (v11)
      goto LABEL_14;
  }
  else
  {
    if (v12 <= 0xFF)
    {
      if (v12 < 2)
        goto LABEL_23;
LABEL_7:
      v11 = *(unsigned __int8 *)(a1 + v9);
      if (!*(_BYTE *)(a1 + v9))
        goto LABEL_23;
LABEL_14:
      v13 = (v11 - 1) << v10;
      if (v9 > 3)
        v13 = 0;
      if ((_DWORD)v8 + (((_DWORD)v7 + 16) & ~(_DWORD)v7) != -1)
      {
        if (v9 <= 3)
          v14 = v8 + ((v7 + 16) & ~(_DWORD)v7) + 1;
        else
          v14 = 4;
        __asm { BR              X12 }
      }
      v18 = v6 + v13;
      return (v18 + 1);
    }
    v11 = *(unsigned __int16 *)(a1 + v9);
    if (*(_WORD *)(a1 + v9))
      goto LABEL_14;
  }
LABEL_23:
  v15 = ((a1 & 0xFFFFFFFFFFFFFFF8) + v7 + 16) & ~v7;
  if (v5 >= 0xFE)
    return (*(uint64_t (**)(unint64_t))(v4 + 48))(v15);
  v17 = *(unsigned __int8 *)(v15 + v8);
  if (v17 < 2)
    return 0;
  v18 = (v17 + 2147483646) & 0x7FFFFFFF;
  return (v18 + 1);
}

void sub_1D2C4F8B0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  uint64_t v6;
  unsigned int v7;
  size_t v8;
  unsigned int v9;
  int v10;
  unsigned int v11;
  int v12;

  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  v6 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  if (*(_DWORD *)(v6 + 84) <= 0xFEu)
    v7 = 254;
  else
    v7 = *(_DWORD *)(v6 + 84);
  v8 = *(_QWORD *)(v6 + 64)
     + ((*(unsigned __int8 *)(v6 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))
     + 1;
  if (a3 <= v7)
  {
    v9 = 0u;
  }
  else if (v8 <= 3)
  {
    v11 = ((a3 - v7 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
    if (HIWORD(v11))
    {
      v9 = 4u;
    }
    else if (v11 >= 0x100)
    {
      v9 = 2;
    }
    else
    {
      v9 = v11 > 1;
    }
  }
  else
  {
    v9 = 1u;
  }
  if (v7 < a2)
  {
    v10 = ~v7 + a2;
    if (v8 < 4)
    {
      if (*(_DWORD *)(v6 + 64) + ((*(unsigned __int8 *)(v6 + 80) + 16) & ~*(unsigned __int8 *)(v6 + 80)) != -1)
      {
        v12 = v10 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if ((_DWORD)v8 == 3)
        {
          *(_WORD *)a1 = v12;
          a1[2] = BYTE2(v12);
        }
        else if ((_DWORD)v8 == 2)
        {
          *(_WORD *)a1 = v12;
        }
        else
        {
          *a1 = v12;
        }
      }
    }
    else
    {
      bzero(a1, v8);
      *(_DWORD *)a1 = v10;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X14 }
}

uint64_t _s6ServerVMa_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&_s6ServerVMn_0);
}

uint64_t sub_1D2C4FB78()
{
  char *v0;
  uint64_t v1;
  char v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  _BYTE v11[2];
  char v12;

  v2 = *v0;
  v3 = v0[1];
  v4 = PEC.SimilarityClientConfig.plaintextModuli()();
  v5 = *(_QWORD *)(v4 + 16);
  if (v5)
  {
    v10 = MEMORY[0x1E0DEE9D8];
    sub_1D2CAB020();
    v6 = 0;
    while (1)
    {
      v7 = *(_QWORD *)(v4 + 8 * v6 + 32);
      v12 = v2;
      HE.RlweParams.init(inParams:plaintextModulus:)(&v12, v7, v11);
      if (v1)
        break;
      v11[1] = v3;
      _s12ParamContextCMa();
      swift_allocObject();
      sub_1D2C6BC3C((uint64_t)v11);
      ++v6;
      sub_1D2CAB008();
      sub_1D2CAB02C();
      sub_1D2CAB038();
      sub_1D2CAB014();
      if (v5 == v6)
      {
        v8 = v10;
        swift_bridgeObjectRelease();
        return v8;
      }
    }
    v8 = v10;
    swift_bridgeObjectRelease();
    swift_release();
  }
  else
  {
    swift_bridgeObjectRelease();
    return MEMORY[0x1E0DEE9D8];
  }
  return v8;
}

uint64_t PEC.SimilarityClientConfig.plaintextModuli()()
{
  uint64_t v0;
  uint64_t v1;

  __swift_instantiateConcreteTypeFromMangledName(&qword_1EFC9FAC8);
  v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1D2CACF70;
  *(_QWORD *)(v0 + 32) = cche_encryption_params_plaintext_modulus();
  v1 = sub_1D2CAAF0C();
  sub_1D2C4FE20(v1);
  return v0;
}

uint64_t PEC.SimilarityMetric.init(rawValue:)@<X0>(uint64_t result@<X0>, BOOL *a2@<X8>)
{
  *a2 = result != 0;
  return result;
}

uint64_t PEC.SimilarityMetric.rawValue.getter()
{
  return 0;
}

_QWORD *sub_1D2C4FD98@<X0>(_QWORD *result@<X0>, BOOL *a2@<X8>)
{
  *a2 = *result != 0;
  return result;
}

void PEC.SimilarityClientConfig.encryptionParams.getter(_BYTE *a1@<X8>)
{
  _BYTE *v1;
  char v2;

  v2 = v1[1];
  *a1 = *v1;
  a1[1] = v2;
}

uint64_t PEC.SimilarityClientConfig.scalingFactor.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 8);
}

void PEC.SimilarityClientConfig.plaintextPacking.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 16);
}

uint64_t PEC.SimilarityClientConfig.embeddingDimension.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 24);
}

uint64_t PEC.SimilarityClientConfig.galoisElements.getter()
{
  return sub_1D2CAAF0C();
}

uint64_t PEC.SimilarityClientConfig.extraPlaintextModuli.getter()
{
  return sub_1D2CAAF0C();
}

_BYTE *PEC.SimilarityClientConfig.init(encryptionParams:scalingFactor:plaintextPacking:embeddingDimension:galoisElements:similarityMetric:extraPlaintextModuli:)@<X0>(_BYTE *result@<X0>, uint64_t a2@<X1>, char *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X6>, uint64_t a7@<X8>)
{
  char v7;
  char v8;

  v7 = result[1];
  v8 = *a3;
  *(_BYTE *)a7 = *result;
  *(_BYTE *)(a7 + 1) = v7;
  *(_QWORD *)(a7 + 8) = a2;
  *(_BYTE *)(a7 + 16) = v8;
  *(_QWORD *)(a7 + 24) = a4;
  *(_QWORD *)(a7 + 32) = a5;
  *(_QWORD *)(a7 + 40) = a6;
  return result;
}

uint64_t sub_1D2C4FE20(uint64_t result)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  int64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  int64_t v11;

  v2 = *(_QWORD *)(result + 16);
  v3 = *v1;
  v4 = *(_QWORD *)(*v1 + 16);
  v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  v6 = result;
  result = swift_isUniquelyReferenced_nonNull_native();
  if ((_DWORD)result && v5 <= *(_QWORD *)(v3 + 24) >> 1)
  {
    if (*(_QWORD *)(v6 + 16))
      goto LABEL_5;
    goto LABEL_13;
  }
  if (v4 <= v5)
    v11 = v4 + v2;
  else
    v11 = v4;
  result = (uint64_t)sub_1D2C71A7C((char *)result, v11, 1, (char *)v3);
  v3 = result;
  if (!*(_QWORD *)(v6 + 16))
  {
LABEL_13:
    if (!v2)
      goto LABEL_14;
    goto LABEL_16;
  }
LABEL_5:
  v7 = *(_QWORD *)(v3 + 16);
  if ((*(_QWORD *)(v3 + 24) >> 1) - v7 < v2)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  result = (uint64_t)memcpy((void *)(v3 + 8 * v7 + 32), (const void *)(v6 + 32), 8 * v2);
  if (!v2)
  {
LABEL_14:
    result = swift_bridgeObjectRelease();
    *v1 = v3;
    return result;
  }
  v8 = *(_QWORD *)(v3 + 16);
  v9 = __OFADD__(v8, v2);
  v10 = v8 + v2;
  if (!v9)
  {
    *(_QWORD *)(v3 + 16) = v10;
    goto LABEL_14;
  }
LABEL_18:
  __break(1u);
  return result;
}

uint64_t sub_1D2C4FF00(uint64_t result, unint64_t a2)
{
  char **v2;
  uint64_t v3;
  char *v4;
  int64_t v5;
  int64_t v6;
  uint64_t v8;
  char *isUniquelyReferenced_nonNull_native;
  int64_t v10;
  int64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int64_t v19;
  uint64_t (*v20)();
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  int64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  int64_t v30;
  char *v31;
  uint64_t (*v32)();
  uint64_t *v33;
  int64_t v34;
  int64_t v35;
  uint64_t v36;
  _BYTE v37[32];
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v4 = *v2;
  v5 = *((_QWORD *)*v2 + 2);
  v6 = v5 + result;
  if (__OFADD__(v5, result))
  {
    __break(1u);
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  v8 = result;
  isUniquelyReferenced_nonNull_native = (char *)swift_isUniquelyReferenced_nonNull_native();
  if (!(_DWORD)isUniquelyReferenced_nonNull_native || (v10 = *((_QWORD *)v4 + 3) >> 1, v10 < v6))
  {
    if (v5 <= v6)
      v11 = v6;
    else
      v11 = v5;
    v4 = sub_1D2C71A88(isUniquelyReferenced_nonNull_native, v11, 1, v4);
    v10 = *((_QWORD *)v4 + 3) >> 1;
  }
  v12 = *((_QWORD *)v4 + 2);
  v13 = v10 - v12;
  result = (uint64_t)sub_1D2C50154(&v38, (unint64_t *)&v4[8 * v12 + 32], v10 - v12, v8, a2);
  if (result < v8)
    goto LABEL_15;
  if (result >= 1)
  {
    v14 = *((_QWORD *)v4 + 2);
    v15 = __OFADD__(v14, result);
    v16 = v14 + result;
    if (v15)
    {
      __break(1u);
LABEL_34:
      v27 = v34 + v3 + 1;
      goto LABEL_35;
    }
    *((_QWORD *)v4 + 2) = v16;
  }
  if (result != v13)
  {
LABEL_13:
    *v2 = v4;
    return result;
  }
LABEL_16:
  v17 = v40;
  v18 = v38;
  if (v40 == v38)
    goto LABEL_13;
  v19 = *((_QWORD *)v4 + 2);
  v36 = v39;
  v20 = sub_1D2C5022C((uint64_t (*)())v37, v40, v38, v39);
  v22 = *v21;
  result = ((uint64_t (*)(_BYTE *, _QWORD))v20)(v37, 0);
  if (v17 < 0 || v17 >= v18)
    goto LABEL_37;
  v23 = v17 + 1;
  v24 = -v18;
LABEL_21:
  while (1)
  {
    v25 = *((_QWORD *)v4 + 3);
    v26 = v25 >> 1;
    v27 = v19 + 1;
    if ((uint64_t)(v25 >> 1) < v19 + 1)
      break;
    if (v19 < v26)
      goto LABEL_23;
LABEL_20:
    *((_QWORD *)v4 + 2) = v19;
  }
  result = (uint64_t)sub_1D2C71A88((char *)(v25 > 1), v19 + 1, 1, v4);
  v4 = (char *)result;
  v26 = *(_QWORD *)(result + 24) >> 1;
  if (v19 >= v26)
    goto LABEL_20;
LABEL_23:
  v28 = &v4[8 * v19];
  *((_QWORD *)v28 + 4) = v22;
  if (v23 == v18)
  {
LABEL_35:
    *((_QWORD *)v4 + 2) = v27;
    goto LABEL_13;
  }
  v3 = 0;
  v29 = v24 + v23;
  v34 = v19;
  v35 = v26;
  v30 = ~v19 + v26;
  v31 = v28 + 40;
  while (1)
  {
    v32 = sub_1D2C5022C((uint64_t (*)())v37, v23 + v3, v18, v36);
    v22 = *v33;
    result = ((uint64_t (*)(_BYTE *, _QWORD))v32)(v37, 0);
    if (v23 < 0 || v23 + v3 >= v18)
      break;
    if (v30 == v3)
    {
      v23 += v3 + 1;
      v19 = v35;
      v24 = -v18;
      *((_QWORD *)v4 + 2) = v35;
      goto LABEL_21;
    }
    *(_QWORD *)&v31[8 * v3++] = v22;
    if (!(v29 + v3))
      goto LABEL_34;
  }
  __break(1u);
LABEL_37:
  __break(1u);
  return result;
}

uint64_t *sub_1D2C50154(uint64_t *result, unint64_t *a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t *v9;
  uint64_t v10;
  unint64_t v11;
  int64x2_t v12;
  int64x2_t *v13;
  unint64_t *v14;

  if (!a2)
  {
    v5 = 0;
    goto LABEL_23;
  }
  if (!a3)
  {
LABEL_22:
    v5 = a3;
    goto LABEL_23;
  }
  if (a3 < 0)
  {
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  v5 = a4;
  if (!a4)
  {
LABEL_23:
    *result = a4;
    result[1] = a5;
    result[2] = v5;
    return (uint64_t *)v5;
  }
  v6 = a4 - 1;
  if (a4 >= 1)
  {
    *a2 = a5;
    if (a3 != 1)
    {
      if (a3 - 2 < v6)
        v6 = a3 - 2;
      if (v6 >= a3 - 1)
        v6 = a3 - 1;
      v7 = v6 + 1;
      if (v7 > 4)
      {
        v10 = v7 & 3;
        if ((v7 & 3) == 0)
          v10 = 4;
        v11 = v7 - v10;
        v8 = v7 - v10 + 1;
        v9 = &a2[v11];
        v12 = vdupq_n_s64(a5);
        v13 = (int64x2_t *)(a2 + 3);
        do
        {
          v13[-1] = v12;
          *v13 = v12;
          v13 += 2;
          v11 -= 4;
        }
        while (v11);
      }
      else
      {
        v8 = 1;
        v9 = a2;
      }
      v14 = v9 + 1;
      while (a3 != v8)
      {
        if (a4 == v8)
        {
          v5 = a4;
          goto LABEL_23;
        }
        ++v8;
        *v14++ = a5;
        if (a3 == v8)
          goto LABEL_22;
      }
      __break(1u);
      goto LABEL_26;
    }
    goto LABEL_22;
  }
LABEL_27:
  __break(1u);
  return result;
}

uint64_t (*sub_1D2C5022C(uint64_t (*result)(), uint64_t a2, uint64_t a3, uint64_t a4))()
{
  if (a2 < 0 || a2 >= a3)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)result = a4;
    return nullsub_1;
  }
  return result;
}

BOOL _s16CryptoKitPrivate3PECO22SimilarityClientConfigV2eeoiySbAE_AEtFZ_0(uint64_t a1, uint64_t a2)
{
  int v2;
  uint64_t v3;
  int v4;
  int v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v2 = *(unsigned __int8 *)(a1 + 1);
  v3 = *(_QWORD *)(a1 + 8);
  v4 = *(unsigned __int8 *)(a1 + 16);
  v21 = *(_QWORD *)(a1 + 32);
  v22 = *(_QWORD *)(a1 + 24);
  v5 = *(unsigned __int8 *)(a2 + 1);
  v6 = *(_QWORD *)(a2 + 8);
  v7 = *(unsigned __int8 *)(a2 + 16);
  v8 = *(_QWORD *)(a2 + 24);
  v19 = *(_QWORD **)(a1 + 40);
  v20 = *(_QWORD *)(a2 + 32);
  v18 = *(_QWORD **)(a2 + 40);
  v9 = HE.RlweParams.rawValue.getter();
  v11 = v10;
  if (v9 == HE.RlweParams.rawValue.getter() && v11 == v12)
  {
    swift_bridgeObjectRelease_n();
  }
  else
  {
    v13 = sub_1D2CAB0BC();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v13 & 1) == 0)
      return 0;
  }
  if (v2)
    v14 = 5654338;
  else
    v14 = 5654082;
  if (v5)
    v15 = 5654338;
  else
    v15 = 5654082;
  if (v14 == v15)
  {
    swift_bridgeObjectRelease_n();
  }
  else
  {
    v16 = sub_1D2CAB0BC();
    swift_bridgeObjectRelease_n();
    if ((v16 & 1) == 0)
      return 0;
  }
  if (v3 == v6 && v4 == v7 && v22 == v8 && sub_1D2C9DF20(v21, v20))
    return sub_1D2C9DF94(v19, v18);
  return 0;
}

unint64_t sub_1D2C503F4()
{
  unint64_t result;

  result = qword_1EFC9FAD0[0];
  if (!qword_1EFC9FAD0[0])
  {
    result = MEMORY[0x1D8245F38](&protocol conformance descriptor for PEC.SimilarityMetric, &type metadata for PEC.SimilarityMetric);
    atomic_store(result, qword_1EFC9FAD0);
  }
  return result;
}

uint64_t _s16SimilarityMetricOwst(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_1D2C50478 + 4 * byte_1D2CAD010[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_1D2C50498 + 4 * byte_1D2CAD015[v4]))();
}

_BYTE *sub_1D2C50478(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_1D2C50498(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1D2C504A0(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1D2C504A8(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1D2C504B0(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1D2C504B8(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for PEC.SimilarityMetric()
{
  return &type metadata for PEC.SimilarityMetric;
}

uint64_t _s22SimilarityClientConfigVwxx()
{
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t _s22SimilarityClientConfigVwcp(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_WORD *)a1 = *(_WORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v3 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v3;
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  sub_1D2CAAF0C();
  sub_1D2CAAF0C();
  return a1;
}

uint64_t _s22SimilarityClientConfigVwca(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_BYTE *)(a1 + 1) = *(_BYTE *)(a2 + 1);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  sub_1D2CAAF0C();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  sub_1D2CAAF0C();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 __swift_memcpy48_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v3;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t _s22SimilarityClientConfigVwta(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_BYTE *)(a1 + 1) = *(_BYTE *)(a2 + 1);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t _s22SimilarityClientConfigVwet(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 48))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 32);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t _s22SimilarityClientConfigVwst(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 48) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 32) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 48) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for PEC.SimilarityClientConfig()
{
  return &type metadata for PEC.SimilarityClientConfig;
}

void sub_1D2C506F0(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  char **v4;
  unint64_t v5;
  uint64_t v6;
  char *v7;
  int64_t v8;
  int64_t v9;
  char *isUniquelyReferenced_nonNull_native;
  int64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;

  v5 = a4 >> 1;
  v6 = (a4 >> 1) - a3;
  if (__OFSUB__(a4 >> 1, a3))
  {
    __break(1u);
    goto LABEL_18;
  }
  v7 = *v4;
  v8 = *((_QWORD *)*v4 + 2);
  v9 = v8 + v6;
  if (__OFADD__(v8, v6))
  {
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  isUniquelyReferenced_nonNull_native = (char *)swift_isUniquelyReferenced_nonNull_native();
  if (!(_DWORD)isUniquelyReferenced_nonNull_native || v9 > *((_QWORD *)v7 + 3) >> 1)
    goto LABEL_8;
  if (v5 == a3)
  {
    while (v6 > 0)
    {
      __break(1u);
LABEL_8:
      if (v8 <= v9)
        v13 = v8 + v6;
      else
        v13 = v8;
      isUniquelyReferenced_nonNull_native = sub_1D2C71A88(isUniquelyReferenced_nonNull_native, v13, 1, v7);
      v7 = isUniquelyReferenced_nonNull_native;
      if (v5 != a3)
        goto LABEL_12;
    }
    goto LABEL_16;
  }
LABEL_12:
  v14 = *((_QWORD *)v7 + 2);
  if ((*((_QWORD *)v7 + 3) >> 1) - v14 < v6)
    goto LABEL_19;
  memcpy(&v7[8 * v14 + 32], (const void *)(a2 + 8 * a3), 8 * v6);
  if (v6 <= 0)
  {
LABEL_16:
    *v4 = v7;
    return;
  }
  v15 = *((_QWORD *)v7 + 2);
  v16 = __OFADD__(v15, v6);
  v17 = v15 + v6;
  if (!v16)
  {
    *((_QWORD *)v7 + 2) = v17;
    goto LABEL_16;
  }
LABEL_20:
  __break(1u);
}

__n128 __swift_memcpy17_8(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  a1[1].n128_u8[0] = a2[1].n128_u8[0];
  *a1 = result;
  return result;
}

uint64_t sub_1D2C507F8(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 17))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 16);
  v4 = v3 >= 2;
  v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t sub_1D2C5084C(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_BYTE *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 255;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 17) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 17) = 0;
    if (a2)
      *(_BYTE *)(result + 16) = a2 + 1;
  }
  return result;
}

uint64_t _s16VerifiableClientVMa(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&_s16VerifiableClientVMn);
}

uint64_t sub_1D2C5089C()
{
  return swift_allocateGenericValueMetadata();
}

uint64_t sub_1D2C508A4()
{
  uint64_t AssociatedTypeWitness;
  unint64_t v1;
  unint64_t v2;
  uint64_t result;
  unint64_t v4;

  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v2 = v1;
  swift_getAssociatedConformanceWitness();
  result = swift_getAssociatedTypeWitness();
  if (v4 <= 0x3F)
  {
    if (v2 > 0x3F)
    {
      return AssociatedTypeWitness;
    }
    else
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t *sub_1D2C509F4(uint64_t *a1, uint64_t *a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unsigned int v16;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  void (*v23)(unint64_t, unint64_t, uint64_t);
  unint64_t v24;
  unint64_t v25;
  _QWORD *v26;
  uint64_t *v27;
  uint64_t v28;
  unint64_t v29;

  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v6 = *(_QWORD *)(v5 + 64);
  v7 = swift_checkMetadataState();
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(_DWORD *)(v8 + 80);
  v10 = v6 + v9;
  v11 = (v6 + v9) & ~v9;
  v12 = *(_QWORD *)(v8 + 64);
  v13 = v12 + v9;
  v14 = v12 + 7;
  v15 = ((v12 + 7 + ((v12 + v9 + ((v12 + v9 + v11) & ~v9)) & ~v9)) & 0xFFFFFFFFFFFFFFF8) + 16;
  v16 = v9 | *(_DWORD *)(v5 + 80) & 0xF8;
  if (v16 > 7 || ((*(_DWORD *)(v5 + 80) | *(_DWORD *)(v8 + 80)) & 0x100000) != 0 || v15 > 0x18)
  {
    v19 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v19 + (((v16 | 7) + 16) & ~(unint64_t)(v16 | 7)));
    swift_retain();
  }
  else
  {
    v20 = v7;
    v21 = ~v9;
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v5 + 16))(a1, a2, AssociatedTypeWitness);
    v22 = ((unint64_t)a2 + v10) & v21;
    v23 = *(void (**)(unint64_t, unint64_t, uint64_t))(v8 + 16);
    v23(((unint64_t)a1 + v10) & v21, v22, v20);
    v24 = (v13 + v22) & v21;
    v23((v13 + (((unint64_t)a1 + v10) & v21)) & v21, v24, v20);
    v25 = (v13 + v24) & v21;
    v23((v13 + ((v13 + (((unint64_t)a1 + v10) & v21)) & v21)) & v21, v25, v20);
    v26 = (_QWORD *)((v14 + ((v13 + ((v13 + (((unint64_t)a1 + v10) & v21)) & v21)) & v21)) & 0xFFFFFFFFFFFFFFF8);
    v27 = (uint64_t *)((v14 + v25) & 0xFFFFFFFFFFFFFFF8);
    v28 = *v27;
    v29 = v27[1];
    sub_1D2C45028(*v27, v29);
    *v26 = v28;
    v26[1] = v29;
  }
  return a1;
}

uint64_t sub_1D2C50C24(uint64_t a1)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v3 = *(_QWORD *)(AssociatedTypeWitness - 8);
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(a1, AssociatedTypeWitness);
  v4 = *(_QWORD *)(v3 + 64);
  v5 = swift_checkMetadataState();
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(unsigned __int8 *)(v6 + 80);
  v8 = (v4 + a1 + v7) & ~v7;
  v9 = *(void (**)(uint64_t, uint64_t))(v6 + 8);
  v9(v8, v5);
  v10 = *(_QWORD *)(v6 + 64);
  v11 = (v10 + v7 + v8) & ~v7;
  v9(v11, v5);
  v12 = (v10 + v7 + v11) & ~v7;
  v9(v12, v5);
  return sub_1D2C45258(*(_QWORD *)((v10 + v12 + 7) & 0xFFFFFFFFFFFFFFF8), *(_QWORD *)(((v10 + v12 + 7) & 0xFFFFFFFFFFFFFFF8) + 8));
}

uint64_t sub_1D2C50D8C(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t *v20;
  uint64_t v21;
  unint64_t v22;

  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(a1, a2, AssociatedTypeWitness);
  v6 = *(_QWORD *)(v5 + 64);
  v7 = swift_checkMetadataState();
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v10 = v6 + v9;
  v11 = (v6 + v9 + a1) & ~v9;
  v12 = (v10 + a2) & ~v9;
  v13 = *(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 16);
  v13(v11, v12, v7);
  v14 = *(_QWORD *)(v8 + 64);
  v15 = (v14 + v9 + v11) & ~v9;
  v16 = (v14 + v9 + v12) & ~v9;
  v13(v15, v16, v7);
  v17 = (v14 + v9 + v15) & ~v9;
  v18 = (v14 + v9 + v16) & ~v9;
  v13(v17, v18, v7);
  v19 = (_QWORD *)((v14 + 7 + v17) & 0xFFFFFFFFFFFFFFF8);
  v20 = (uint64_t *)((v14 + 7 + v18) & 0xFFFFFFFFFFFFFFF8);
  v21 = *v20;
  v22 = v20[1];
  sub_1D2C45028(*v20, v22);
  *v19 = v21;
  v19[1] = v22;
  return a1;
}

uint64_t sub_1D2C50F44(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;

  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 24))(a1, a2, AssociatedTypeWitness);
  v6 = *(_QWORD *)(v5 + 64);
  v7 = swift_checkMetadataState();
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v10 = v6 + v9;
  v11 = (v6 + v9 + a1) & ~v9;
  v12 = (v10 + a2) & ~v9;
  v13 = *(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 24);
  v13(v11, v12, v7);
  v14 = *(_QWORD *)(v8 + 64);
  v15 = (v14 + v9 + v11) & ~v9;
  v16 = (v14 + v9 + v12) & ~v9;
  v13(v15, v16, v7);
  v17 = (v14 + v9 + v15) & ~v9;
  v18 = (v14 + v9 + v16) & ~v9;
  v13(v17, v18, v7);
  v19 = (uint64_t *)((v14 + 7 + v17) & 0xFFFFFFFFFFFFFFF8);
  v20 = (uint64_t *)((v14 + 7 + v18) & 0xFFFFFFFFFFFFFFF8);
  v21 = *v20;
  v22 = v20[1];
  sub_1D2C45028(*v20, v22);
  v23 = *v19;
  v24 = v19[1];
  *v19 = v21;
  v19[1] = v22;
  sub_1D2C45258(v23, v24);
  return a1;
}

uint64_t sub_1D2C51104(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 32))(a1, a2, AssociatedTypeWitness);
  v6 = *(_QWORD *)(v5 + 64);
  v7 = swift_checkMetadataState();
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v10 = v6 + v9;
  v11 = (v6 + v9 + a1) & ~v9;
  v12 = (v10 + a2) & ~v9;
  v13 = *(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 32);
  v13(v11, v12, v7);
  v14 = *(_QWORD *)(v8 + 64);
  v15 = (v14 + v9 + v11) & ~v9;
  v16 = (v14 + v9 + v12) & ~v9;
  v13(v15, v16, v7);
  v17 = (v14 + v9 + v15) & ~v9;
  v18 = (v14 + v9 + v16) & ~v9;
  v13(v17, v18, v7);
  *(_OWORD *)((v14 + 7 + v17) & 0xFFFFFFFFFFFFF8) = *(_OWORD *)((v14 + 7 + v18) & 0xFFFFFFFFFFFFF8);
  return a1;
}

uint64_t sub_1D2C512B0(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  unint64_t v21;

  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 40))(a1, a2, AssociatedTypeWitness);
  v6 = *(_QWORD *)(v5 + 64);
  v7 = swift_checkMetadataState();
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v10 = v6 + v9;
  v11 = (v6 + v9 + a1) & ~v9;
  v12 = (v10 + a2) & ~v9;
  v13 = *(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 40);
  v13(v11, v12, v7);
  v14 = *(_QWORD *)(v8 + 64);
  v15 = (v14 + v9 + v11) & ~v9;
  v16 = (v14 + v9 + v12) & ~v9;
  v13(v15, v16, v7);
  v17 = (v14 + v9 + v15) & ~v9;
  v18 = (v14 + v9 + v16) & ~v9;
  v13(v17, v18, v7);
  v19 = (uint64_t *)((v14 + 7 + v17) & 0xFFFFFFFFFFFFFFF8);
  v20 = *v19;
  v21 = v19[1];
  *(_OWORD *)v19 = *(_OWORD *)((v14 + 7 + v18) & 0xFFFFFFFFFFFFF8);
  sub_1D2C45258(v20, v21);
  return a1;
}

uint64_t sub_1D2C51464(uint64_t a1, unsigned int a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t (*v21)(uint64_t, uint64_t, uint64_t);
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v6 = *(unsigned int *)(v5 + 84);
  v7 = swift_checkMetadataState();
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(unsigned int *)(v8 + 84);
  if (v9 <= v6)
    v10 = v6;
  else
    v10 = *(_DWORD *)(v8 + 84);
  if (v10 <= 0xC)
    v10 = 12;
  if (!a2)
    return 0;
  v11 = v7;
  v12 = *(unsigned __int8 *)(v8 + 80);
  v13 = *(_QWORD *)(v5 + 64) + v12;
  v14 = *(_QWORD *)(v8 + 64);
  v15 = v14 + v12;
  v16 = v14 + 7;
  if (v10 < a2)
  {
    if (((((v16 + ((v15 + ((v15 + (v13 & ~v12)) & ~v12)) & ~v12)) & 0xFFFFFFFFFFFFFFF8) + 16) & 0xFFFFFFF8) != 0)
      v17 = 2;
    else
      v17 = a2 - v10 + 1;
    if (v17 >= 0x10000)
      v18 = 4;
    else
      v18 = 2;
    if (v17 < 0x100)
      v18 = 1;
    if (v17 >= 2)
      v19 = v18;
    else
      v19 = 0;
    __asm { BR              X0 }
  }
  if ((_DWORD)v6 == v10)
  {
    v21 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 48);
    v22 = a1;
    v9 = v6;
    v11 = AssociatedTypeWitness;
    return v21(v22, v9, v11);
  }
  v23 = ~v12;
  v22 = (v13 + a1) & v23;
  if ((_DWORD)v9 == v10)
  {
    v21 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v8 + 48);
    return v21(v22, v9, v11);
  }
  v24 = *(_QWORD *)(((v16 + ((v15 + ((v15 + v22) & v23)) & v23)) & 0xFFFFFFFFFFFFF8) + 8) >> 60;
  if (((4 * (_DWORD)v24) & 0xC) != 0)
    return 16 - ((4 * (_DWORD)v24) & 0xC | (v24 >> 2));
  else
    return 0;
}

void sub_1D2C516DC(unsigned int *a1, unsigned int a2, unsigned int a3)
{
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int v11;
  int v12;
  int v13;
  unsigned int v14;

  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  v6 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v7 = *(_DWORD *)(v6 + 84);
  v8 = *(_QWORD *)(swift_checkMetadataState() - 8);
  if (*(_DWORD *)(v8 + 84) <= v7)
    v9 = v7;
  else
    v9 = *(_DWORD *)(v8 + 84);
  if (v9 <= 0xC)
    v9 = 12;
  v10 = *(unsigned __int8 *)(v8 + 80);
  if (v9 >= a3)
  {
    v13 = 0u;
    if (a2 <= v9)
      goto LABEL_19;
  }
  else
  {
    if (((*(_DWORD *)(v8 + 64)
         + 7
         + ((*(_DWORD *)(v8 + 64)
           + (_DWORD)v10
           + ((*(_DWORD *)(v8 + 64) + (_DWORD)v10 + ((*(_DWORD *)(v6 + 64) + (_DWORD)v10) & ~(_DWORD)v10)) & ~(_DWORD)v10)) & ~(_DWORD)v10)) & 0xFFFFFFF8) == 0xFFFFFFF0)
      v11 = a3 - v9 + 1;
    else
      v11 = 2;
    if (v11 >= 0x10000)
      v12 = 4;
    else
      v12 = 2;
    if (v11 < 0x100)
      v12 = 1;
    if (v11 >= 2)
      v13 = v12;
    else
      v13 = 0;
    if (a2 <= v9)
LABEL_19:
      __asm { BR              X16 }
  }
  if (((*(_DWORD *)(v8 + 64)
       + 7
       + ((*(_DWORD *)(v8 + 64)
         + (_DWORD)v10
         + ((*(_DWORD *)(v8 + 64) + (_DWORD)v10 + ((*(_DWORD *)(v6 + 64) + (_DWORD)v10) & ~(_DWORD)v10)) & ~(_DWORD)v10)) & ~(_DWORD)v10)) & 0xFFFFFFF8) != 0xFFFFFFF0)
  {
    v14 = ~v9 + a2;
    bzero(a1, ((*(_QWORD *)(v8 + 64)+ 7+ ((*(_QWORD *)(v8 + 64) + v10 + ((*(_QWORD *)(v8 + 64) + v10 + ((*(_QWORD *)(v6 + 64) + v10) & ~v10)) & ~v10)) & ~v10)) & 0xFFFFFFFFFFFFFFF8)+ 16);
    *a1 = v14;
  }
  __asm { BR              X10 }
}

void sub_1D2C518D4()
{
  uint64_t v0;
  char v1;
  uint64_t v2;

  *(_BYTE *)(v0 + v2) = v1;
  JUMPOUT(0x1D2C51990);
}

void sub_1D2C518DC()
{
  int v0;
  uint64_t v1;
  uint64_t v2;

  *(_DWORD *)(v1 + v2) = 0;
  if (v0)
    JUMPOUT(0x1D2C518E4);
  JUMPOUT(0x1D2C51990);
}

void sub_1D2C51934()
{
  uint64_t v0;
  __int16 v1;
  uint64_t v2;

  *(_WORD *)(v0 + v2) = v1;
  JUMPOUT(0x1D2C51990);
}

void sub_1D2C5193C()
{
  uint64_t v0;
  int v1;
  uint64_t v2;

  *(_DWORD *)(v0 + v2) = v1;
  JUMPOUT(0x1D2C51990);
}

uint64_t sub_1D2C51944@<X0>(uint64_t a1@<X2>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  uint64_t (*v3)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v4;
  uint64_t v5;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  *(_WORD *)(v11 + v14) = 0;
  if (!(_DWORD)v10)
    JUMPOUT(0x1D2C51990);
  if ((_DWORD)v13 == v7)
  {
    v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v15 + 56);
    v4 = v11;
    v5 = v10;
    a1 = v13;
    a2 = v12;
  }
  else
  {
    v4 = (v8 + v11) & v9;
    if ((_DWORD)a1 != v7)
      JUMPOUT(0x1D2C51950);
    v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(a3 + 56);
    v5 = v10;
  }
  return v3(v4, v5, a1, a2);
}

uint64_t _s10CredentialVMa(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&_s10CredentialVMn);
}

BOOL static APSIC.SupportedCurves.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t APSIC.SupportedCurves.hash(into:)()
{
  return sub_1D2CAB140();
}

void *static APSIC.SupportedCurves.allCases.getter()
{
  return &unk_1E943F788;
}

uint64_t APSIC.SupportedCurves.hashValue.getter()
{
  sub_1D2CAB134();
  sub_1D2CAB140();
  return sub_1D2CAB158();
}

BOOL sub_1D2C51A44(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t sub_1D2C51A58()
{
  sub_1D2CAB134();
  sub_1D2CAB140();
  return sub_1D2CAB158();
}

uint64_t sub_1D2C51A9C()
{
  return sub_1D2CAB140();
}

uint64_t sub_1D2C51AC4()
{
  sub_1D2CAB134();
  sub_1D2CAB140();
  return sub_1D2CAB158();
}

void sub_1D2C51B04(_QWORD *a1@<X8>)
{
  *a1 = &unk_1E943F7B0;
}

uint64_t sub_1D2C51B14()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD v3[2];

  v0 = ccec_compressed_x962_export_pub_size();
  v3[0] = sub_1D2C677A0(v0);
  v3[1] = v1;
  sub_1D2C53304((uint64_t)v3);
  return v3[0];
}

uint64_t sub_1D2C51BB4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;
  size_t v6;
  uint64_t v7;

  result = getccec_pub_ctx_size();
  if (result < 0)
  {
    __break(1u);
  }
  else
  {
    v6 = result;
    if (result)
    {
      v7 = sub_1D2CAAF30();
      *(_QWORD *)(v7 + 16) = v6;
      bzero((void *)(v7 + 32), v6);
    }
    else
    {
      v7 = MEMORY[0x1E0DEE9D8];
      v6 = *(_QWORD *)(MEMORY[0x1E0DEE9D8] + 16);
    }
    sub_1D2C51C78(v7 + 32, v7 + 32 + v6, a1, a2);
    if (v2)
      swift_bridgeObjectRelease();
    return v7;
  }
  return result;
}

void sub_1D2C51C78(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a1)
    __asm { BR              X10 }
  __break(1u);
  JUMPOUT(0x1D2C51F44);
}

uint64_t sub_1D2C51F58(uint64_t result, uint64_t a2, _DWORD *a3)
{
  int v4;
  int v5;
  uint64_t v6;

  if (!result)
  {
    __break(1u);
    return result;
  }
  v4 = ccec_x963_import_pub();
  *a3 = v4;
  if (v4)
  {
    v5 = v4;
    sub_1D2C4E7DC();
    swift_allocError();
    *(_DWORD *)v6 = v5;
  }
  else
  {
    result = ccec_validate_pub();
    if ((_DWORD)result)
      return result;
    sub_1D2C4E7DC();
    swift_allocError();
    *(_DWORD *)v6 = -19;
  }
  *(_BYTE *)(v6 + 4) = 0;
  return swift_willThrow();
}

uint64_t sub_1D2C52018(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  size_t v5;
  uint64_t v6;

  result = getccec_pub_ctx_size();
  if (result < 0)
  {
    __break(1u);
  }
  else
  {
    v5 = result;
    if (result)
    {
      v6 = sub_1D2CAAF30();
      *(_QWORD *)(v6 + 16) = v5;
      bzero((void *)(v6 + 32), v5);
    }
    else
    {
      v6 = MEMORY[0x1E0DEE9D8];
      v5 = *(_QWORD *)(MEMORY[0x1E0DEE9D8] + 16);
    }
    sub_1D2C52118(v6 + 32, v6 + 32 + v5, a1, a2);
    return v6;
  }
  return result;
}

void sub_1D2C52118(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a1)
    __asm { BR              X10 }
  __break(1u);
  JUMPOUT(0x1D2C52368);
}

void APSIC.Client.init(publicKey:domainSeparationTag:curveType:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _BYTE *a5)
{
  if (*a5)
  {
    if (*a5 != 1)
      goto LABEL_7;
    if (MEMORY[0x1D824562C]())
      goto LABEL_8;
    __break(1u);
  }
  if (MEMORY[0x1D8245620]())
    goto LABEL_8;
  __break(1u);
LABEL_7:
  if (!ccec_cp_521())
  {
    __break(1u);
    JUMPOUT(0x1D2C528A0);
  }
LABEL_8:
  __asm { BR              X9 }
}

void sub_1D2C528FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  char *v12;
  char isUniquelyReferenced_nonNull_native;

  if (a1)
  {
    v12 = *(char **)(a3 + 16);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(_QWORD *)(a3 + 16) = v12;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      v12 = sub_1D2C535CC((uint64_t)v12);
      *(_QWORD *)(a3 + 16) = v12;
    }
    sub_1D2C529A4((uint64_t)(v12 + 32), (uint64_t)&v12[*((_QWORD *)v12 + 2) + 32], a4, a5, a6, a7);
    *(_QWORD *)(a3 + 16) = v12;
  }
  else
  {
    __break(1u);
  }
}

void sub_1D2C529A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (a1)
  {
    if (ccrng())
      __asm { BR              X10 }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  JUMPOUT(0x1D2C52AB4);
}

__int128 *APSIC.Client.computeIntersectResponse(element:matchPoint:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __int128 *v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  __int128 v10;

  v10 = *v4;
  sub_1D2C52018(a3, a4);
  if (!v5)
  {
    if ((*((_QWORD *)&v10 + 1) & 0x8000000000000000) == 0)
    {
      if (*((_QWORD *)&v10 + 1))
      {
        v7 = sub_1D2CAAF30();
        *(_QWORD *)(v7 + 16) = *((_QWORD *)&v10 + 1);
        bzero((void *)(v7 + 32), *((size_t *)&v10 + 1));
        v8 = sub_1D2CAAF30();
        *(_QWORD *)(v8 + 16) = *((_QWORD *)&v10 + 1);
        bzero((void *)(v8 + 32), *((size_t *)&v10 + 1));
      }
      __asm { BR              X10 }
    }
    __break(1u);
    JUMPOUT(0x1D2C52EA8);
  }
  return v4;
}

void sub_1D2C52ED0(uint64_t a1, uint64_t a2, char **a3, char **a4, char **a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  char *v15;
  char isUniquelyReferenced_nonNull_native;
  char *v17;
  char v18;
  char *v19;
  char v20;

  if (a1)
  {
    v15 = *a3;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *a3 = v15;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      v15 = sub_1D2C535CC((uint64_t)v15);
      *a3 = v15;
    }
    v17 = *a4;
    v18 = swift_isUniquelyReferenced_nonNull_native();
    *a4 = v17;
    if ((v18 & 1) == 0)
    {
      v17 = sub_1D2C535CC((uint64_t)v17);
      *a4 = v17;
    }
    v19 = *a5;
    v20 = swift_isUniquelyReferenced_nonNull_native();
    *a5 = v19;
    if ((v20 & 1) == 0)
    {
      v19 = sub_1D2C535CC((uint64_t)v19);
      *a5 = v19;
    }
    sub_1D2C53004((_QWORD *)v19 + 4, (uint64_t)&v19[*((_QWORD *)v19 + 2) + 32], (uint64_t *)v17 + 4, a6, a7, a8, a9);
    *a5 = v19;
    *a4 = v17;
    *a3 = v15;
  }
  else
  {
    __break(1u);
  }
}

void sub_1D2C53004(_QWORD *a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;

  if (a1)
  {
    v7 = *a4;
    *a3 = *a4;
    *a1 = v7;
    __asm { BR              X12 }
  }
  __break(1u);
  JUMPOUT(0x1D2C53168);
}

void APSIC.Client.computeGuaranteedMatchResponse()()
{
  uint64_t *v0;
  uint64_t v1;
  size_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int match_response;
  int v7;
  uint64_t v8;

  v2 = v0[1];
  if ((v2 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else
  {
    v3 = *v0;
    if (v2)
    {
      v4 = sub_1D2CAAF30();
      *(_QWORD *)(v4 + 16) = v2;
      bzero((void *)(v4 + 32), v2);
      v5 = sub_1D2CAAF30();
      *(_QWORD *)(v5 + 16) = v2;
      bzero((void *)(v5 + 32), v2);
    }
    else
    {
      v5 = MEMORY[0x1E0DEE9D8];
      v4 = MEMORY[0x1E0DEE9D8];
    }
    *(_QWORD *)(v4 + 32) = v3;
    *(_QWORD *)(v5 + 32) = v3;
    match_response = ccapsic_client_generate_match_response();
    if (match_response)
    {
      v7 = match_response;
      sub_1D2C4E7DC();
      swift_allocError();
      *(_DWORD *)v8 = v7;
      *(_BYTE *)(v8 + 4) = 0;
      swift_willThrow();
LABEL_8:
      swift_bridgeObjectRelease();
      sub_1D2C45258(0, 0xC000000000000000);
      swift_bridgeObjectRelease();
      return;
    }
    sub_1D2C51B14();
    if (v1)
      goto LABEL_8;
    sub_1D2C51B14();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
}

void sub_1D2C53304(uint64_t a1)
{
  __asm { BR              X11 }
}

uint64_t sub_1D2C53364@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  _QWORD *v2;
  _DWORD *v3;
  uint64_t result;
  unsigned int v5;
  unsigned __int8 v6;
  unsigned __int8 v7;
  unsigned __int8 v8;

  LOWORD(v5) = a1;
  BYTE2(v5) = BYTE2(a1);
  HIBYTE(v5) = BYTE3(a1);
  v6 = BYTE4(a1);
  v7 = BYTE5(a1);
  v8 = BYTE6(a1);
  result = ccec_compressed_x962_export_pub();
  *v3 = result;
  *v2 = v1;
  v2[1] = v5 | ((unint64_t)v6 << 32) | ((unint64_t)v7 << 40) | ((unint64_t)v8 << 48);
  return result;
}

char *sub_1D2C535CC(uint64_t a1)
{
  return sub_1D2C71768(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

char *sub_1D2C535E0(uint64_t a1)
{
  return sub_1D2C71A88(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

char *sub_1D2C535F4(uint64_t a1)
{
  return sub_1D2C71A70(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

char *sub_1D2C53608(uint64_t a1)
{
  return sub_1D2C71A7C(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

_QWORD *sub_1D2C5361C(_QWORD *a1)
{
  return sub_1D2C71E98(0, a1[2], 0, a1);
}

uint64_t sub_1D2C53630(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, unint64_t a8)
{
  uint64_t result;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  result = sub_1D2CAA864();
  v15 = result;
  if (result)
  {
    result = sub_1D2CAA888();
    if (__OFSUB__(a1, result))
    {
LABEL_13:
      __break(1u);
      return result;
    }
    v15 += a1 - result;
  }
  v16 = __OFSUB__(a2, a1);
  v17 = a2 - a1;
  if (v16)
  {
    __break(1u);
    goto LABEL_13;
  }
  v18 = sub_1D2CAA87C();
  if (v18 >= v17)
    v19 = v17;
  else
    v19 = v18;
  v20 = v15 + v19;
  if (v15)
    v21 = v20;
  else
    v21 = 0;
  sub_1D2C528FC(v15, v21, a4, a5, a6, a7, a8);
  return sub_1D2C45258(a7, a8);
}

uint64_t sub_1D2C53710(uint64_t a1, uint64_t a2, uint64_t a3, char **a4, char **a5, char **a6, uint64_t *a7, uint64_t a8, uint64_t a9, unint64_t a10)
{
  uint64_t result;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  result = sub_1D2CAA864();
  v17 = result;
  if (result)
  {
    result = sub_1D2CAA888();
    if (__OFSUB__(a1, result))
    {
LABEL_13:
      __break(1u);
      return result;
    }
    v17 += a1 - result;
  }
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_13;
  }
  v18 = sub_1D2CAA87C();
  if (v18 >= a2 - a1)
    v19 = a2 - a1;
  else
    v19 = v18;
  v20 = v17 + v19;
  if (v17)
    v21 = v20;
  else
    v21 = 0;
  sub_1D2C52ED0(v17, v21, a4, a5, a6, a7, a8, a9, a10);
  sub_1D2C53848((uint64_t)a7);
  return sub_1D2C45258(a9, a10);
}

uint64_t sub_1D2C53814(uint64_t a1)
{
  sub_1D2CAAF0C();
  sub_1D2CAAF0C();
  return a1;
}

uint64_t sub_1D2C53848(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return a1;
}

unint64_t sub_1D2C5387C()
{
  unint64_t result;

  result = qword_1EFC9FBD8;
  if (!qword_1EFC9FBD8)
  {
    result = MEMORY[0x1D8245F38](&protocol conformance descriptor for APSIC.SupportedCurves, &type metadata for APSIC.SupportedCurves);
    atomic_store(result, (unint64_t *)&qword_1EFC9FBD8);
  }
  return result;
}

unint64_t sub_1D2C538C4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1EFC9FBE0;
  if (!qword_1EFC9FBE0)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(qword_1EFC9FBE8);
    result = MEMORY[0x1D8245F38](MEMORY[0x1E0DEAF50], v1);
    atomic_store(result, (unint64_t *)&qword_1EFC9FBE0);
  }
  return result;
}

ValueMetadata *type metadata accessor for APSIC()
{
  return &type metadata for APSIC;
}

_BYTE *__swift_memcpy1_1(_BYTE *result, _BYTE *a2)
{
  *result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for OPRF.Mode(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFE)
    goto LABEL_17;
  if (a2 + 2 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 2) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 2;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 2;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 2;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 3;
  v8 = v6 - 3;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for APSIC.SupportedCurves(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1D2C53A08 + 4 * byte_1D2CAD235[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1D2C53A3C + 4 * byte_1D2CAD230[v4]))();
}

uint64_t sub_1D2C53A3C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1D2C53A44(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1D2C53A4CLL);
  return result;
}

uint64_t sub_1D2C53A58(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1D2C53A60);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1D2C53A64(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1D2C53A6C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1D2C53A78(unsigned __int8 *a1)
{
  return *a1;
}

_BYTE *sub_1D2C53A80(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

ValueMetadata *type metadata accessor for APSIC.SupportedCurves()
{
  return &type metadata for APSIC.SupportedCurves;
}

uint64_t destroy for APSIC.Client()
{
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for APSIC.Client(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v3 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v3;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  sub_1D2CAAF0C();
  sub_1D2CAAF0C();
  return a1;
}

_QWORD *assignWithCopy for APSIC.Client(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  sub_1D2CAAF0C();
  swift_bridgeObjectRelease();
  a1[3] = a2[3];
  sub_1D2CAAF0C();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  return a1;
}

uint64_t assignWithTake for APSIC.Client(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  return a1;
}

uint64_t getEnumTagSinglePayload for APSIC.Client(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 40))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for APSIC.Client(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 40) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 16) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 40) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for APSIC.Client()
{
  return &type metadata for APSIC.Client;
}

uint64_t PEC.PlaintextMatrixDims.init(rowCount:colCount:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;

  if (result < 1 || a2 <= 0)
  {
    sub_1D2C4E7DC();
    swift_allocError();
    *(_DWORD *)v3 = 1;
    *(_BYTE *)(v3 + 4) = 1;
    return swift_willThrow();
  }
  else
  {
    *a3 = result;
    a3[1] = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for PEC.PlaintextMatrixDims()
{
  return &type metadata for PEC.PlaintextMatrixDims;
}

uint64_t sub_1D2C53CE0@<X0>(uint64_t *a1@<X0>, unsigned __int8 *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t i;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t result;
  uint64_t v22;
  char v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32[2];
  int v33;
  unsigned __int8 v34;
  _BYTE v35[2];

  v4 = a3;
  v5 = *(_QWORD *)(a3 + 16);
  if (v5)
  {
    v29 = a1[1];
    v30 = *a1;
    v33 = *a2;
    v6 = *(_QWORD *)(*(_QWORD *)(a3 + 32) + 16);
    v7 = *(_BYTE *)(v6 + 40);
    if (*(_BYTE *)(v6 + 41))
      v8 = 5654338;
    else
      v8 = 5654082;
    v31 = *(_QWORD *)(*(_QWORD *)(a3 + 32) + 16);
    swift_retain();
    sub_1D2CAAF0C();
    for (i = 0; i != v5; ++i)
    {
      v10 = v4;
      v11 = *(_QWORD *)(*(_QWORD *)(v4 + 8 * i + 32) + 16);
      v12 = *(unsigned __int8 *)(v11 + 41);
      LOBYTE(v32[0]) = *(_BYTE *)(v11 + 40);
      v35[0] = v7;
      v13 = HE.RlweParams.rawValue.getter();
      v15 = v14;
      if (v13 == HE.RlweParams.rawValue.getter() && v15 == v16)
      {
        swift_bridgeObjectRelease_n();
      }
      else
      {
        v17 = sub_1D2CAB0BC();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v17 & 1) == 0)
          goto LABEL_17;
      }
      if (v12)
        v18 = 5654338;
      else
        v18 = 5654082;
      if (v18 == v8)
      {
        swift_bridgeObjectRelease_n();
      }
      else
      {
        v19 = sub_1D2CAB0BC();
        swift_bridgeObjectRelease_n();
        if ((v19 & 1) == 0)
        {
LABEL_17:
          swift_bridgeObjectRelease_n();
          sub_1D2C4E7DC();
          swift_allocError();
          *(_DWORD *)v20 = 5;
          *(_BYTE *)(v20 + 4) = 1;
          swift_willThrow();
          return swift_release();
        }
      }
      v4 = v10;
    }
    swift_bridgeObjectRelease();
    v23 = *(_BYTE *)(v31 + 41);
    v35[0] = *(_BYTE *)(v31 + 40);
    v35[1] = v23;
    v32[0] = v30;
    v32[1] = v29;
    v24 = v33;
    v34 = v33;
    v25 = sub_1D2C54B58((uint64_t)v35, v32, &v34);
    if (v28)
    {
      swift_release();
      return swift_bridgeObjectRelease();
    }
    else
    {
      if (*(_QWORD *)(v10 + 16) != v25)
      {
        swift_bridgeObjectRelease();
        sub_1D2C4E7DC();
        swift_allocError();
        *(_DWORD *)v26 = 1;
        *(_BYTE *)(v26 + 4) = 1;
        swift_willThrow();
        return swift_release();
      }
      result = swift_release();
      *(_QWORD *)a4 = v30;
      *(_QWORD *)(a4 + 8) = v29;
      *(_BYTE *)(a4 + 16) = v24;
      *(_QWORD *)(a4 + 24) = v10;
    }
  }
  else
  {
    swift_bridgeObjectRelease();
    sub_1D2C4E7DC();
    swift_allocError();
    *(_DWORD *)v22 = 1;
    *(_BYTE *)(v22 + 4) = 1;
    return swift_willThrow();
  }
  return result;
}

unint64_t sub_1D2C53FC0@<X0>(unint64_t result@<X0>, uint64_t *a2@<X1>, _BYTE *a3@<X2>, uint64_t a4@<X3>, char a5@<W4>, uint64_t a6@<X8>)
{
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  char *v13;
  char *v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  char v20;
  uint64_t v21;
  unsigned __int8 v22;

  v9 = *a2;
  v8 = a2[1];
  v10 = *a2 * v8;
  if ((unsigned __int128)(*a2 * (__int128)v8) >> 64 == v10 >> 63)
  {
    if (v10 != *(_QWORD *)(a4 + 16) || v10 == 0)
    {
      swift_bridgeObjectRelease();
      sub_1D2C4E7DC();
      swift_allocError();
      *(_DWORD *)v12 = 1;
    }
    else
    {
      if (!*a3)
      {
        *(_QWORD *)&v19 = *a2;
        *((_QWORD *)&v19 + 1) = v8;
        v14 = sub_1D2C54C6C(result, (uint64_t *)&v19, a4, a5 & 1);
        swift_bridgeObjectRelease();
        if (v6)
          return swift_release();
        v17 = v9;
        v18 = v8;
        v22 = 0;
LABEL_18:
        sub_1D2C53CE0(&v17, &v22, (uint64_t)v14, (uint64_t)&v19);
        result = swift_release();
        v15 = v20;
        v16 = v21;
        *(_OWORD *)a6 = v19;
        *(_BYTE *)(a6 + 16) = v15;
        *(_QWORD *)(a6 + 24) = v16;
        return result;
      }
      if (*a3 == 1)
      {
        *(_QWORD *)&v19 = *a2;
        *((_QWORD *)&v19 + 1) = v8;
        v13 = sub_1D2C55528(result, (uint64_t *)&v19, a4, a5 & 1);
        if (v6)
        {
          swift_bridgeObjectRelease();
          return swift_release();
        }
        v14 = v13;
        swift_bridgeObjectRelease();
        v17 = v9;
        v18 = v8;
        v22 = 1;
        goto LABEL_18;
      }
      swift_bridgeObjectRelease();
      sub_1D2C4E7DC();
      swift_allocError();
      *(_DWORD *)v12 = 5;
    }
    *(_BYTE *)(v12 + 4) = 1;
    swift_willThrow();
    return swift_release();
  }
  __break(1u);
  return result;
}

void sub_1D2C5417C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  int v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  BOOL v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;

  if (*(_BYTE *)(v0 + 16))
  {
    sub_1D2C4E7DC();
    swift_allocError();
    *(_DWORD *)v1 = 5;
    *(_BYTE *)(v1 + 4) = 1;
    swift_willThrow();
    return;
  }
  v2 = *(_QWORD *)(v0 + 24);
  v43 = *(_QWORD *)(v2 + 16);
  if (!v43)
    goto LABEL_86;
  v3 = *(_QWORD *)v0;
  v41 = *(_QWORD *)(v0 + 8);
  swift_retain();
  v4 = sub_1D2C6BFAC();
  swift_release();
  if (!v3)
  {
LABEL_87:
    __break(1u);
LABEL_88:
    __break(1u);
    goto LABEL_89;
  }
  if (v4 == 0x8000000000000000 && v3 == -1)
  {
LABEL_90:
    __break(1u);
LABEL_91:
    __break(1u);
    goto LABEL_92;
  }
  v6 = v4 / v3;
  if (v4 / v3 + 0x4000000000000000 < 0)
    goto LABEL_88;
  if ((unsigned __int128)(v3 * (__int128)v41) >> 64 != (v3 * v41) >> 63)
  {
LABEL_89:
    __break(1u);
    goto LABEL_90;
  }
  v46 = 2 * v6;
  v48 = sub_1D2C71A88(0, (v3 * v41) & ~((v3 * v41) >> 63), 0, MEMORY[0x1E0DEE9D8]);
  v44 = v3 * v6;
  v42 = (unsigned __int128)(v3 * (__int128)v6) >> 64 != (v3 * v6) >> 63;
  sub_1D2CAAF0C();
  v7 = 0;
  v47 = v2;
  v45 = v3 * v41;
  do
  {
    v10 = *(_QWORD *)(v2 + 8 * v7 + 32);
    v11 = cche_param_ctx_polynomial_degree();
    swift_retain();
    swift_retain();
    if (v11)
    {
      v12 = sub_1D2CAAF30();
      *(_QWORD *)(v12 + 16) = v11;
    }
    else
    {
      v12 = MEMORY[0x1E0DEE9D8];
    }
    if (!*(_QWORD *)(v10 + 24))
      goto LABEL_93;
    v13 = cche_decode_simd_int64();
    if (v13)
    {
      v30 = v13;
      sub_1D2C4E7DC();
      swift_allocError();
      *(_DWORD *)v31 = v30;
      *(_BYTE *)(v31 + 4) = 0;
      swift_willThrow();
      *(_QWORD *)(v12 + 16) = 0;
      swift_release();
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_64:
      swift_bridgeObjectRelease();
      return;
    }
    v14 = cche_param_ctx_polynomial_degree();
    if (v11 < v14)
    {
LABEL_72:
      __break(1u);
LABEL_73:
      __break(1u);
LABEL_74:
      __break(1u);
LABEL_75:
      __break(1u);
LABEL_76:
      __break(1u);
LABEL_77:
      __break(1u);
LABEL_78:
      __break(1u);
LABEL_79:
      __break(1u);
LABEL_80:
      __break(1u);
LABEL_81:
      __break(1u);
LABEL_82:
      __break(1u);
LABEL_83:
      __break(1u);
LABEL_84:
      __break(1u);
LABEL_85:
      __break(1u);
LABEL_86:
      __break(1u);
      goto LABEL_87;
    }
    *(_QWORD *)(v12 + 16) = v14;
    swift_release();
    if (v46 <= 1)
    {
      v26 = *((_QWORD *)v48 + 2) % v3;
      v17 = __OFSUB__(v3, v26);
      v27 = v3 - v26;
      if (v17)
        goto LABEL_74;
      if (v27 >= *(_QWORD *)(v12 + 16))
        v27 = *(_QWORD *)(v12 + 16);
      if (v27 < 0)
        goto LABEL_76;
      v28 = (2 * v27) | 1;
      v29 = sub_1D2CAAF0C();
      sub_1D2C506F0(v29, v12 + 32, 0, v28);
      v16 = v3 * v41;
    }
    else
    {
      if (v42)
        goto LABEL_73;
      v15 = *((_QWORD *)v48 + 2);
      v16 = v3 * v41;
      v17 = __OFSUB__(v45, v15);
      v18 = v45 - v15;
      if (v17)
        goto LABEL_75;
      if (v18 >= v44)
        v18 = v44;
      if (v18 < 0)
        goto LABEL_77;
      if (*(_QWORD *)(v12 + 16) < (unint64_t)v18)
        goto LABEL_78;
      v19 = (2 * v18) | 1;
      v20 = sub_1D2CAAF0C();
      sub_1D2C506F0(v20, v12 + 32, 0, v19);
      swift_bridgeObjectRelease();
      v21 = *((_QWORD *)v48 + 2);
      v17 = __OFSUB__(v45, v21);
      v22 = v45 - v21;
      if (v17)
        goto LABEL_79;
      if (v22 >= v44)
        v22 = v44;
      v17 = __OFADD__(v4, v22);
      v23 = v4 + v22;
      if (v17)
        goto LABEL_80;
      if (v23 < v4)
        goto LABEL_81;
      if (v4 < 0)
        goto LABEL_82;
      v24 = *(_QWORD *)(v12 + 16);
      if (v24 < v4 || (uint64_t)v24 < v23)
        goto LABEL_83;
      v8 = (2 * v23) | 1;
      v9 = swift_unknownObjectRetain();
      sub_1D2C506F0(v9, v12 + 32, v4, v8);
    }
    ++v7;
    swift_release();
    swift_bridgeObjectRelease_n();
    v2 = v47;
  }
  while (v43 != v7);
  swift_bridgeObjectRelease();
  if (*((_QWORD *)v48 + 2) != v16)
  {
    sub_1D2C4E7DC();
    swift_allocError();
    *(_DWORD *)v40 = 5;
    *(_BYTE *)(v40 + 4) = 1;
    swift_willThrow();
    goto LABEL_64;
  }
  if (v3 < 0)
    goto LABEL_91;
  v32 = v41;
  if ((v41 & 0x8000000000000000) == 0)
  {
    sub_1D2CAAF0C();
    v33 = 0;
    v34 = 0;
    v35 = 32;
    v36 = v48;
    while (v34 != v3)
    {
      if (v32)
      {
        if ((unsigned __int128)(v34 * (__int128)v32) >> 64 != (v34 * v32) >> 63)
          goto LABEL_85;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v36 = sub_1D2C535E0((uint64_t)v36);
        v37 = 0;
        v32 = v41;
        while (1)
        {
          v38 = v37 * v3;
          if ((unsigned __int128)(v37 * (__int128)v3) >> 64 != (v37 * v3) >> 63)
            break;
          v17 = __OFADD__(v38, v34);
          v39 = v38 + v34;
          if (v17)
            goto LABEL_67;
          if ((v39 & 0x8000000000000000) != 0)
            goto LABEL_68;
          if (v39 >= *((_QWORD *)v48 + 2))
            goto LABEL_69;
          if (v33 < 0)
            goto LABEL_70;
          if ((unint64_t)(v33 + v37) >= *((_QWORD *)v36 + 2))
            goto LABEL_71;
          *(_QWORD *)&v36[8 * v37++ + v35] = *(_QWORD *)&v48[8 * v39 + 32];
          if (v41 == v37)
            goto LABEL_48;
        }
        __break(1u);
LABEL_67:
        __break(1u);
LABEL_68:
        __break(1u);
LABEL_69:
        __break(1u);
LABEL_70:
        __break(1u);
LABEL_71:
        __break(1u);
        goto LABEL_72;
      }
LABEL_48:
      ++v34;
      v33 += v32;
      v35 += 8 * v41;
      if (v34 == v3)
        goto LABEL_64;
    }
    goto LABEL_84;
  }
LABEL_92:
  __break(1u);
LABEL_93:
  __break(1u);
}

void sub_1D2C546F4()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  int64_t v22;
  BOOL v23;
  uint64_t v24;
  int64_t v25;
  uint64_t v26;
  int64_t v27;
  int64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  int64_t v32;
  uint64_t v33;
  int64_t v34;
  char *v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  char v47;
  uint64_t v48;
  int64_t v49;
  uint64_t v50;
  uint64_t v51;

  if (*((_BYTE *)v0 + 16) != 1)
  {
LABEL_51:
    sub_1D2C4E7DC();
    swift_allocError();
    *(_DWORD *)v40 = 5;
    *(_BYTE *)(v40 + 4) = 1;
    swift_willThrow();
    return;
  }
  v2 = v0[3];
  v42 = *(_QWORD *)(v2 + 16);
  if (!v42)
  {
LABEL_69:
    __break(1u);
    goto LABEL_70;
  }
  v3 = v1;
  v4 = *v0;
  v5 = v0[1];
  v6 = v2 + 32;
  swift_retain();
  v7 = sub_1D2C6BFAC();
  swift_release();
  v8 = sub_1D2C91270(v5);
  if (!v8)
  {
LABEL_70:
    __break(1u);
LABEL_71:
    __break(1u);
LABEL_72:
    __break(1u);
LABEL_73:
    __break(1u);
    goto LABEL_74;
  }
  v9 = v8;
  if (v7 == 0x8000000000000000 && v8 == -1)
    goto LABEL_75;
  v46 = v7;
  v11 = sub_1D2C91270(v5);
  v49 = v11 - v5;
  if (__OFSUB__(v11, v5))
    goto LABEL_73;
  v12 = v4 * v5;
  if ((unsigned __int128)(v4 * (__int128)v5) >> 64 != (v4 * v5) >> 63)
  {
LABEL_74:
    __break(1u);
LABEL_75:
    __break(1u);
    return;
  }
  v13 = v46 / v9;
  v14 = sub_1D2C71A88(0, v12 & ~(v12 >> 63), 0, MEMORY[0x1E0DEE9D8]);
  sub_1D2CAAF0C();
  v15 = 0;
  v43 = v2;
  v41 = v2 + 32;
  v48 = v46 / v9;
  while (2)
  {
    if (v15 >= *(_QWORD *)(v2 + 16))
      goto LABEL_71;
    v44 = v15;
    v16 = *(_QWORD *)(v6 + 8 * v15);
    v17 = cche_param_ctx_polynomial_degree();
    swift_retain_n();
    swift_retain_n();
    v51 = sub_1D2C55C3C(v17, v16);
    if (v3)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release_n();
      swift_release_n();
      return;
    }
    swift_release();
    swift_release_n();
    if (v13 < 0)
      goto LABEL_72;
    v18 = v14;
    v19 = 0;
    v20 = 0;
    v45 = v44 + 1;
    do
    {
      v47 = v19;
      if (v13)
      {
        v21 = 0;
        v50 = v20 * v46;
        while (v13 != v21)
        {
          v22 = v21 * v5;
          if ((unsigned __int128)(v21 * (__int128)v5) >> 64 != (v21 * v5) >> 63)
            goto LABEL_56;
          v23 = __OFADD__(v50, v22);
          v24 = v50 + v22;
          if (v23)
            goto LABEL_57;
          v25 = v21 * v49;
          if ((unsigned __int128)(v21 * (__int128)v49) >> 64 != (v21 * v49) >> 63)
            goto LABEL_58;
          v26 = v24 + v25;
          if (__OFADD__(v24, v25))
            goto LABEL_59;
          v27 = *((_QWORD *)v18 + 2);
          v28 = v12 - v27;
          if (__OFSUB__(v12, v27))
            goto LABEL_60;
          if (v28 >= v5)
            v28 = v5;
          v29 = v26 + v28;
          if (__OFADD__(v26, v28))
            goto LABEL_61;
          v30 = v28;
          if (v29 < v26)
            goto LABEL_62;
          if (v26 < 0)
            goto LABEL_63;
          v31 = *(_QWORD *)(v51 + 16);
          if (v31 < v26 || (uint64_t)v31 < v29)
            goto LABEL_64;
          v32 = v5;
          v33 = v12;
          v34 = v27 + v30;
          if (__OFADD__(v27, v30))
            goto LABEL_65;
          v35 = v18;
          v36 = *((_QWORD *)v18 + 3);
          sub_1D2CAAF0C();
          if (v34 > (uint64_t)(v36 >> 1))
          {
            if (v27 <= v34)
              v39 = v27 + v30;
            else
              v39 = v27;
            v18 = sub_1D2C71A88((char *)1, v39, 1, v35);
            v27 = *((_QWORD *)v18 + 2);
            v12 = v33;
          }
          else
          {
            v12 = v33;
            v18 = v35;
          }
          v5 = v32;
          if (v29 == v26)
          {
            v13 = v48;
            if (v30 > 0)
              goto LABEL_66;
          }
          else
          {
            v13 = v48;
            if ((*((_QWORD *)v18 + 3) >> 1) - v27 < v30)
              goto LABEL_67;
            memcpy(&v18[8 * v27 + 32], (const void *)(v51 + 32 + 8 * v26), 8 * v30);
            if (v30 >= 1)
            {
              v37 = *((_QWORD *)v18 + 2);
              v23 = __OFADD__(v37, v30);
              v38 = v37 + v30;
              if (v23)
                goto LABEL_68;
              *((_QWORD *)v18 + 2) = v38;
            }
          }
          swift_bridgeObjectRelease();
          if (*((_QWORD *)v18 + 2) == v12)
          {
            swift_bridgeObjectRelease();
            swift_release();
            swift_bridgeObjectRelease();
            return;
          }
          if (v13 == ++v21)
            goto LABEL_15;
        }
        __break(1u);
LABEL_56:
        __break(1u);
LABEL_57:
        __break(1u);
LABEL_58:
        __break(1u);
LABEL_59:
        __break(1u);
LABEL_60:
        __break(1u);
LABEL_61:
        __break(1u);
LABEL_62:
        __break(1u);
LABEL_63:
        __break(1u);
LABEL_64:
        __break(1u);
LABEL_65:
        __break(1u);
LABEL_66:
        __break(1u);
LABEL_67:
        __break(1u);
LABEL_68:
        __break(1u);
        goto LABEL_69;
      }
LABEL_15:
      v19 = 1;
      v20 = 1;
    }
    while ((v47 & 1) == 0);
    v14 = v18;
    swift_release();
    swift_bridgeObjectRelease();
    v2 = v43;
    v3 = 0;
    v15 = v45;
    v6 = v41;
    if (v45 != v42)
      continue;
    break;
  }
  swift_bridgeObjectRelease();
  if (*((_QWORD *)v14 + 2) != v12)
  {
    swift_bridgeObjectRelease();
    goto LABEL_51;
  }
}

uint64_t sub_1D2C54B58(uint64_t a1, uint64_t *a2, unsigned __int8 *a3)
{
  uint64_t v3;
  int64_t v4;
  int v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;

  v3 = *a2;
  v4 = a2[1];
  v5 = *a3;
  result = cche_encryption_params_polynomial_degree();
  v7 = result >> 1;
  if (v5)
  {
    if (v5 != 1)
    {
      sub_1D2C4E7DC();
      swift_allocError();
      *(_DWORD *)v8 = 5;
      *(_BYTE *)(v8 + 4) = 1;
      return swift_willThrow();
    }
    result = sub_1D2C91270(v4);
    if (result)
      return sub_1D2C7296C(2 * (v7 / result), v3);
    __break(1u);
    goto LABEL_12;
  }
  if (!v3)
  {
LABEL_12:
    __break(1u);
LABEL_13:
    __break(1u);
    return result;
  }
  if (v7 / v3 >= 1)
    return sub_1D2C7296C(2 * (v7 / v3), v4);
  v9 = cche_encryption_params_polynomial_degree();
  v10 = sub_1D2C7296C(v9, v3);
  result = v4 * v10;
  if ((unsigned __int128)(v4 * (__int128)v10) >> 64 != (v4 * v10) >> 63)
    goto LABEL_13;
  return result;
}

char *sub_1D2C54C6C(uint64_t a1, uint64_t *a2, uint64_t a3, int a4)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  char *v15;
  unint64_t v16;
  int64_t v17;
  char *v18;
  int64_t v19;
  char *v20;
  uint64_t v21;
  int64_t v22;
  BOOL v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  int v29;
  char *v30;
  unint64_t v31;
  int64_t v32;
  _QWORD *v33;
  int64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  int v40;
  char *v41;
  unint64_t v42;
  int64_t v43;
  _QWORD *v44;
  int64_t v45;
  uint64_t v46;
  char *isUniquelyReferenced_nonNull_native;
  uint64_t v48;
  int64_t v49;
  uint64_t v50;
  char v52;
  int64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  char *v59;
  uint64_t v60;
  int64_t v61;
  uint64_t v62[2];
  int v63;
  unsigned __int8 v64;
  _BYTE v65[2];

  v8 = *a2;
  v9 = a2[1];
  v10 = *(_QWORD *)(a1 + 32);
  v11 = cche_param_ctx_polynomial_degree();
  v12 = sub_1D2C6BFAC();
  v13 = *(_BYTE *)(a1 + 41);
  v65[0] = *(_BYTE *)(a1 + 40);
  v65[1] = v13;
  v62[0] = v8;
  v62[1] = v9;
  v64 = 0;
  v14 = sub_1D2C54B58((uint64_t)v65, v62, &v64);
  if (v4)
    return v15;
  v55 = v12;
  v58 = v10;
  v63 = a4;
  v56 = a1;
  v16 = v11;
  v17 = MEMORY[0x1E0DEE9D8];
  v59 = sub_1D2C71B88(0, v14 & ~(v14 >> 63), 0, MEMORY[0x1E0DEE9D8]);
  v61 = v11;
  v18 = sub_1D2C71A88(0, v11, 0, (char *)v17);
  if (v9 < 0)
    goto LABEL_101;
  v20 = v18;
  if (v9)
  {
    if (v8 < 0)
      goto LABEL_105;
    v21 = 0;
    v57 = a3 + 32;
    v17 = v55 + 1;
    v19 = __OFADD__(v55, 1);
    v52 = v19;
    v53 = v55 + 1;
    v54 = a3;
    v11 = v10;
    while (1)
    {
      if (v21 == v9)
      {
LABEL_99:
        __break(1u);
LABEL_100:
        __break(1u);
LABEL_101:
        __break(1u);
LABEL_102:
        __break(1u);
LABEL_103:
        __break(1u);
LABEL_104:
        __break(1u);
LABEL_105:
        __break(1u);
LABEL_106:
        __break(1u);
LABEL_107:
        __break(1u);
LABEL_108:
        __break(1u);
LABEL_109:
        __break(1u);
LABEL_110:
        __break(1u);
LABEL_111:
        v15 = sub_1D2C71B88((char *)((unint64_t)v19 > 1), v17, 1, v15);
LABEL_91:
        *((_QWORD *)v15 + 2) = v17;
        *(_QWORD *)&v15[8 * v11 + 32] = v16;
        return v15;
      }
      v60 = v21;
      if (v8)
      {
        v17 = 0;
        v22 = *(_QWORD *)(a3 + 16);
        while (v8 != v17)
        {
          v19 = v17 * v9;
          if ((unsigned __int128)(v17 * (__int128)v9) >> 64 != (v17 * v9) >> 63)
            goto LABEL_94;
          v23 = __OFADD__(v19, v21);
          v19 += v21;
          if (v23)
            goto LABEL_95;
          if (v19 < 0)
            goto LABEL_96;
          if (v19 >= v22)
            goto LABEL_97;
          v16 = *(_QWORD *)(v57 + 8 * v19);
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v20 = sub_1D2C71A88(0, *((_QWORD *)v20 + 2) + 1, 1, v20);
          v25 = *((_QWORD *)v20 + 2);
          v24 = *((_QWORD *)v20 + 3);
          v26 = v25 + 1;
          if (v25 >= v24 >> 1)
            v20 = sub_1D2C71A88((char *)(v24 > 1), v25 + 1, 1, v20);
          *((_QWORD *)v20 + 2) = v26;
          *(_QWORD *)&v20[8 * v25 + 32] = v16;
          v19 = v61;
          if (v26 == v61)
          {
            v11 = v58;
            v16 = cche_plaintext_sizeof();
            type metadata accessor for HE.ObjectStorage();
            v27 = (_QWORD *)swift_allocObject();
            v27[2] = v56;
            sub_1D2CAAF0C();
            swift_retain();
            v28 = swift_slowAlloc();
            v27[3] = v28;
            v27[4] = v28 + v16;
            v19 = HIDWORD(*((_QWORD *)v20 + 2));
            if (v19)
              goto LABEL_98;
            if ((v63 & 1) != 0)
            {
              v29 = cche_encode_simd_reduced_int64();
              if (v29)
                goto LABEL_86;
            }
            else
            {
              v29 = cche_encode_simd_int64();
              if (v29)
                goto LABEL_86;
            }
            swift_bridgeObjectRelease();
            v30 = v59;
            v16 = *((_QWORD *)v59 + 2);
            v31 = *((_QWORD *)v59 + 3);
            if (v16 >= v31 >> 1)
              v30 = sub_1D2C71B88((char *)(v31 > 1), v16 + 1, 1, v59);
            *((_QWORD *)v30 + 2) = v16 + 1;
            v59 = v30;
            *(_QWORD *)&v30[8 * v16 + 32] = v27;
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
            {
              v32 = *((_QWORD *)v20 + 2);
              v21 = v60;
              if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
                v20 = sub_1D2C71A88(0, v32, 1, v20);
              if (v32)
              {
                v16 = *((_QWORD *)v20 + 2) - v32;
                memmove(v20 + 32, &v20[8 * v32 + 32], 8 * v16);
                *((_QWORD *)v20 + 2) = v16;
              }
            }
            else
            {
              v16 = *((_QWORD *)v20 + 3);
              v33 = (_QWORD *)MEMORY[0x1E0DEE9D8];
              v21 = v60;
              if (v16 >= 2)
              {
                __swift_instantiateConcreteTypeFromMangledName(&qword_1EFC9FA30);
                v33 = (_QWORD *)swift_allocObject();
                v34 = _swift_stdlib_malloc_size(v33);
                v35 = v34 - 32;
                if (v34 < 32)
                  v35 = v34 - 25;
                v33[2] = 0;
                v33[3] = 2 * (v35 >> 3);
              }
              swift_bridgeObjectRelease();
              v20 = (char *)v33;
            }
          }
          else
          {
            v11 = v58;
            v21 = v60;
          }
          if (v8 == ++v17)
            goto LABEL_44;
        }
        __break(1u);
LABEL_94:
        __break(1u);
LABEL_95:
        __break(1u);
LABEL_96:
        __break(1u);
LABEL_97:
        __break(1u);
LABEL_98:
        __break(1u);
        goto LABEL_99;
      }
LABEL_44:
      v16 = *((_QWORD *)v20 + 2);
      v19 = v16 + v8;
      if (__OFADD__(v16, v8))
        goto LABEL_100;
      a3 = v54;
      v17 = v55 + 1;
      if ((uint64_t)v16 < v55)
      {
        if ((v52 & 1) != 0)
          goto LABEL_102;
        if (v53 > v61)
          goto LABEL_103;
        if (v19 >= v53 && v19 <= v61)
          break;
      }
      if (v19 <= v61)
        goto LABEL_11;
      v16 = cche_plaintext_sizeof();
      type metadata accessor for HE.ObjectStorage();
      v38 = (_QWORD *)swift_allocObject();
      v38[2] = v56;
      swift_retain();
      sub_1D2CAAF0C();
      v39 = swift_slowAlloc();
      v38[3] = v39;
      v38[4] = v39 + v16;
      v19 = HIDWORD(*((_QWORD *)v20 + 2));
      if (v19)
        goto LABEL_104;
      if ((v63 & 1) != 0)
        v40 = cche_encode_simd_reduced_int64();
      else
        v40 = cche_encode_simd_int64();
      v29 = v40;
      if (v40)
      {
LABEL_86:
        sub_1D2C4E7DC();
        swift_allocError();
        *(_DWORD *)v50 = v29;
        *(_BYTE *)(v50 + 4) = 0;
        swift_willThrow();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease_n();
        swift_release();
        return v15;
      }
      swift_bridgeObjectRelease();
      v41 = v59;
      v16 = *((_QWORD *)v59 + 2);
      v42 = *((_QWORD *)v59 + 3);
      if (v16 >= v42 >> 1)
        v41 = sub_1D2C71B88((char *)(v42 > 1), v16 + 1, 1, v59);
      *((_QWORD *)v41 + 2) = v16 + 1;
      v59 = v41;
      *(_QWORD *)&v41[8 * v16 + 32] = v38;
      if (swift_isUniquelyReferenced_nonNull_native())
      {
        v43 = *((_QWORD *)v20 + 2);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v20 = sub_1D2C71A88(0, v43, 1, v20);
        v21 = v60;
        if (v43)
        {
          v16 = *((_QWORD *)v20 + 2) - v43;
          memmove(v20 + 32, &v20[8 * v43 + 32], 8 * v16);
          *((_QWORD *)v20 + 2) = v16;
        }
        goto LABEL_11;
      }
      v16 = *((_QWORD *)v20 + 3);
      v44 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      if (v16 >= 2)
      {
        __swift_instantiateConcreteTypeFromMangledName(&qword_1EFC9FA30);
        v44 = (_QWORD *)swift_allocObject();
        v45 = _swift_stdlib_malloc_size(v44);
        v46 = v45 - 32;
        if (v45 < 32)
          v46 = v45 - 25;
        v44[2] = 0;
        v44[3] = 2 * (v46 >> 3);
      }
      swift_bridgeObjectRelease();
      v20 = (char *)v44;
LABEL_10:
      v21 = v60;
LABEL_11:
      if (++v21 == v9)
        goto LABEL_87;
    }
    v19 = v61 - v16;
    v36 = (uint64_t)(v61 - v16) % v55;
    if (v36 < 0)
      goto LABEL_106;
    if (v36)
    {
      v37 = sub_1D2CAAF30();
      *(_QWORD *)(v37 + 16) = v36;
      bzero((void *)(v37 + 32), 8 * v36);
      v16 = *((_QWORD *)v20 + 2);
      v17 = v16 + v36;
      if (__OFADD__(v16, v36))
        goto LABEL_107;
    }
    else
    {
      v37 = MEMORY[0x1E0DEE9D8];
      v36 = *(_QWORD *)(MEMORY[0x1E0DEE9D8] + 16);
      v17 = v16 + v36;
      if (__OFADD__(v16, v36))
        goto LABEL_107;
    }
    isUniquelyReferenced_nonNull_native = (char *)swift_isUniquelyReferenced_nonNull_native();
    if ((_DWORD)isUniquelyReferenced_nonNull_native && v17 <= *((_QWORD *)v20 + 3) >> 1)
    {
      v19 = *(_QWORD *)(v37 + 16);
      if (v19)
        goto LABEL_76;
    }
    else
    {
      if ((uint64_t)v16 <= v17)
        v49 = v17;
      else
        v49 = v16;
      v20 = sub_1D2C71A88(isUniquelyReferenced_nonNull_native, v49, 1, v20);
      v19 = *(_QWORD *)(v37 + 16);
      if (v19)
      {
LABEL_76:
        v19 = *((_QWORD *)v20 + 2);
        if ((*((_QWORD *)v20 + 3) >> 1) - v19 < v36)
          goto LABEL_109;
        memcpy(&v20[8 * v19 + 32], (const void *)(v37 + 32), 8 * v36);
        if (v36)
        {
          v48 = *((_QWORD *)v20 + 2);
          v23 = __OFADD__(v48, v36);
          v19 = v48 + v36;
          if (v23)
            goto LABEL_110;
          *((_QWORD *)v20 + 2) = v19;
        }
LABEL_85:
        swift_bridgeObjectRelease();
        goto LABEL_10;
      }
    }
    if (v36)
      goto LABEL_108;
    goto LABEL_85;
  }
LABEL_87:
  if (*((_QWORD *)v20 + 2))
  {
    sub_1D2C6C018((uint64_t)v20, v63 & 1, v62);
    swift_bridgeObjectRelease();
    v16 = v62[0];
    v15 = v59;
    v11 = *((_QWORD *)v59 + 2);
    v19 = *((_QWORD *)v59 + 3);
    v17 = v11 + 1;
    if (v11 >= (unint64_t)v19 >> 1)
      goto LABEL_111;
    goto LABEL_91;
  }
  swift_bridgeObjectRelease();
  return v59;
}

unint64_t sub_1D2C55424(unint64_t result, int64_t a2)
{
  unint64_t *v2;
  unint64_t v4;
  int64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  int64_t v9;
  int64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  const void *v14;
  uint64_t v15;
  uint64_t v16;

  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_22;
  }
  v4 = *v2;
  v5 = *(_QWORD *)(*v2 + 16);
  if (v5 < a2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v6 = result;
  v7 = a2 - result;
  if (__OFSUB__(a2, result))
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  v8 = result - a2;
  if (__OFSUB__(0, v7))
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  v9 = v5 - v7;
  if (__OFADD__(v5, v8))
  {
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  result = swift_isUniquelyReferenced_nonNull_native();
  if ((_DWORD)result && v9 <= *(_QWORD *)(v4 + 24) >> 1)
  {
    if (!v8)
      goto LABEL_20;
  }
  else
  {
    if (v5 <= v9)
      v10 = v5 + v8;
    else
      v10 = v5;
    result = (unint64_t)sub_1D2C71A88((char *)result, v10, 1, (char *)v4);
    v4 = result;
    if (!v8)
      goto LABEL_20;
  }
  v11 = *(_QWORD *)(v4 + 16);
  v12 = __OFSUB__(v11, a2);
  v13 = v11 - a2;
  if (v12)
    goto LABEL_26;
  result = v4 + 32 + 8 * v6;
  v14 = (const void *)(v4 + 32 + 8 * a2);
  if (v6 != a2 || result >= (unint64_t)v14 + 8 * v13)
    result = (unint64_t)memmove((void *)result, v14, 8 * v13);
  v15 = *(_QWORD *)(v4 + 16);
  v12 = __OFADD__(v15, v8);
  v16 = v15 + v8;
  if (!v12)
  {
    *(_QWORD *)(v4 + 16) = v16;
LABEL_20:
    *v2 = v4;
    return result;
  }
LABEL_27:
  __break(1u);
  return result;
}

char *sub_1D2C55528(unint64_t a1, uint64_t *a2, uint64_t a3, int a4)
{
  unint64_t v4;
  char *v5;
  unint64_t v6;
  uint64_t v8;
  int64_t v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  unint64_t v17;
  uint64_t v18;
  int64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  char *v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  int64_t v32;
  uint64_t v33;
  int64_t v34;
  char *isUniquelyReferenced_nonNull_native;
  int64_t v36;
  uint64_t v37;
  BOOL v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  int v42;
  int v43;
  _QWORD *v44;
  int64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66[2];
  int v67;
  unsigned __int8 v68;

  v6 = v4;
  v67 = a4;
  v8 = *a2;
  v9 = a2[1];
  v10 = cche_param_ctx_polynomial_degree();
  v11 = sub_1D2C6BFAC();
  if (v11 < v9)
  {
    sub_1D2C4E7DC();
    swift_allocError();
    *(_DWORD *)v12 = 1;
    *(_BYTE *)(v12 + 4) = 1;
    swift_willThrow();
    return v5;
  }
  v13 = v11;
  v14 = *(_BYTE *)(a1 + 41);
  LOBYTE(v65) = *(_BYTE *)(a1 + 40);
  BYTE1(v65) = v14;
  v66[0] = v8;
  v66[1] = v9;
  v68 = 1;
  v15 = sub_1D2C54B58((uint64_t)&v65, v66, &v68);
  if (v4)
    return v5;
  v60 = v8;
  v5 = sub_1D2C71B88(0, v15 & ~(v15 >> 63), 0, MEMORY[0x1E0DEE9D8]);
  v17 = sub_1D2C91270(v9);
  v19 = v17 - v9;
  if (__OFSUB__(v17, v9))
  {
LABEL_92:
    __break(1u);
    goto LABEL_93;
  }
  if (v19 < 0)
  {
LABEL_93:
    __break(1u);
LABEL_94:
    __break(1u);
    goto LABEL_95;
  }
  if (v19)
  {
    v20 = sub_1D2CAAF30();
    *(_QWORD *)(v20 + 16) = v19;
    v64 = v20;
    bzero((void *)(v20 + 32), 8 * v19);
  }
  else
  {
    v64 = MEMORY[0x1E0DEE9D8];
  }
  v21 = sub_1D2C71A88(0, v10, 0, MEMORY[0x1E0DEE9D8]);
  v66[0] = (uint64_t)v21;
  v22 = v8;
  if (v8 < 0)
    goto LABEL_94;
  v59 = v10;
  if (!v8)
  {
    v47 = v21;
    swift_bridgeObjectRelease();
    v18 = *((_QWORD *)v47 + 2);
    if (v18)
      goto LABEL_65;
LABEL_71:
    swift_bridgeObjectRelease();
    return v5;
  }
  v57 = 0;
  v58 = a1;
  v23 = (char *)v9;
  if ((v9 & 0x8000000000000000) == 0)
  {
    v6 = 0;
    a1 = 0;
    v18 = v64 + 32;
    v62 = v13;
    do
    {
      if (a1 == v22)
        goto LABEL_83;
      v19 = v66[0];
      v63 = v5;
      if (v23)
      {
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v19 = (int64_t)sub_1D2C71A88(0, *(_QWORD *)(v19 + 16) + 1, 1, (char *)v19);
        v26 = *(_QWORD *)(a3 + 16);
        v27 = v26 >= v6;
        v18 = v26 - v6;
        if (v27)
          v28 = v18;
        else
          v28 = 0;
        v5 = v23;
        while (v28)
        {
          v29 = *(_QWORD *)(a3 + 32 + 8 * v6);
          v31 = *(_QWORD *)(v19 + 16);
          v30 = *(_QWORD *)(v19 + 24);
          v32 = v31 + 1;
          if (v31 >= v30 >> 1)
            v19 = (int64_t)sub_1D2C71A88((char *)(v30 > 1), v31 + 1, 1, (char *)v19);
          *(_QWORD *)(v19 + 16) = v32;
          v18 = v19 + 8 * v31;
          *(_QWORD *)(v18 + 32) = v29;
          v66[0] = v19;
          ++v6;
          --v28;
          if (!--v5)
            goto LABEL_33;
        }
        __break(1u);
LABEL_83:
        __break(1u);
LABEL_84:
        __break(1u);
LABEL_85:
        __break(1u);
LABEL_86:
        __break(1u);
LABEL_87:
        __break(1u);
LABEL_88:
        __break(1u);
LABEL_89:
        __break(1u);
LABEL_90:
        __break(1u);
LABEL_91:
        __break(1u);
        goto LABEL_92;
      }
      v32 = *(_QWORD *)(v66[0] + 16);
LABEL_33:
      v33 = *(_QWORD *)(v64 + 16);
      v34 = v32 + v33;
      if (__OFADD__(v32, v33))
        goto LABEL_84;
      sub_1D2CAAF0C();
      isUniquelyReferenced_nonNull_native = (char *)swift_isUniquelyReferenced_nonNull_native();
      if (!(_DWORD)isUniquelyReferenced_nonNull_native || v34 > *(_QWORD *)(v19 + 24) >> 1)
      {
        if (v32 <= v34)
          v36 = v32 + v33;
        else
          v36 = v32;
        v19 = (int64_t)sub_1D2C71A88(isUniquelyReferenced_nonNull_native, v36, 1, (char *)v19);
      }
      v23 = (char *)v9;
      v5 = v63;
      v18 = *(_QWORD *)(v64 + 16);
      if (v18)
      {
        v18 = *(_QWORD *)(v19 + 16);
        if ((*(_QWORD *)(v19 + 24) >> 1) - v18 < v33)
          goto LABEL_87;
        memcpy((void *)(v19 + 8 * v18 + 32), (const void *)(v64 + 32), 8 * v33);
        if (v33)
        {
          v37 = *(_QWORD *)(v19 + 16);
          v38 = __OFADD__(v37, v33);
          v18 = v37 + v33;
          if (v38)
            goto LABEL_90;
          *(_QWORD *)(v19 + 16) = v18;
        }
      }
      else if (v33)
      {
        goto LABEL_85;
      }
      swift_bridgeObjectRelease();
      v66[0] = v19;
      v18 = *(_QWORD *)(v19 + 16);
      v13 = v62;
      if (v62 > v18)
      {
        if (__OFADD__(v18, v9))
          goto LABEL_88;
        if (v62 < v18 + v9)
        {
          if (v62 - v18 < 0)
            goto LABEL_91;
          sub_1D2C4FF00(v62 - v18, 0);
          v19 = v66[0];
          v18 = *(_QWORD *)(v66[0] + 16);
        }
      }
      v38 = __OFADD__(v18, v9);
      v18 += v9;
      if (v38)
        goto LABEL_86;
      if (v18 > (uint64_t)v59)
      {
        v39 = cche_plaintext_sizeof();
        type metadata accessor for HE.ObjectStorage();
        v40 = (_QWORD *)swift_allocObject();
        v40[2] = v58;
        sub_1D2CAAF0C();
        swift_retain();
        v41 = swift_slowAlloc();
        v40[3] = v41;
        v40[4] = v41 + v39;
        v18 = HIDWORD(*(_QWORD *)(v19 + 16));
        if (v18)
          goto LABEL_89;
        if ((v67 & 1) != 0)
          v42 = cche_encode_simd_reduced_int64();
        else
          v42 = cche_encode_simd_int64();
        v43 = v42;
        if (v42)
        {
          sub_1D2C4E7DC();
          swift_allocError();
          *(_DWORD *)v51 = v43;
          *(_BYTE *)(v51 + 4) = 0;
          swift_willThrow();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_release();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          return v5;
        }
        swift_bridgeObjectRelease();
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
        {
          sub_1D2C55424(0, *(_QWORD *)(v19 + 16));
        }
        else
        {
          v44 = (_QWORD *)MEMORY[0x1E0DEE9D8];
          if (*(_QWORD *)(v19 + 24) >= 2uLL)
          {
            __swift_instantiateConcreteTypeFromMangledName(&qword_1EFC9FA30);
            v44 = (_QWORD *)swift_allocObject();
            v45 = _swift_stdlib_malloc_size(v44);
            v46 = v45 - 32;
            if (v45 < 32)
              v46 = v45 - 25;
            v44[2] = 0;
            v44[3] = 2 * (v46 >> 3);
          }
          v66[0] = (uint64_t)v44;
          swift_bridgeObjectRelease();
        }
        v25 = *((_QWORD *)v63 + 2);
        v24 = *((_QWORD *)v63 + 3);
        v19 = v25 + 1;
        swift_retain();
        if (v25 >= v24 >> 1)
          v5 = sub_1D2C71B88((char *)(v24 > 1), v25 + 1, 1, v63);
        *((_QWORD *)v5 + 2) = v19;
        *(_QWORD *)&v5[8 * v25 + 32] = v40;
        swift_release();
        v13 = v62;
        v23 = (char *)v9;
      }
      ++a1;
      v22 = v60;
    }
    while (a1 != v60);
    while (1)
    {
      swift_bridgeObjectRelease();
      v6 = v57;
      a1 = v58;
      v18 = *(_QWORD *)(v66[0] + 16);
      if (!v18)
        goto LABEL_71;
LABEL_65:
      if (!v13)
        goto LABEL_96;
      v48 = v18 % v13;
      if (!(v18 % v13))
      {
        v50 = 0;
LABEL_74:
        v19 = (int64_t)v66;
        sub_1D2C4FF00(v50, 0);
        v52 = 0;
        v53 = v66[0];
        v54 = *(_QWORD *)(v66[0] + 16);
        if (v13 < (uint64_t)v54)
        {
          v52 = v13;
          if (v13 < 0)
            goto LABEL_98;
        }
        sub_1D2CAAF0C();
        if (v54 < v59)
        {
          do
          {
            v55 = sub_1D2CAAF0C();
            sub_1D2C506F0(v55, v53 + 32, v52, (2 * v54) | 1);
            swift_bridgeObjectRelease();
          }
          while (*(_QWORD *)(v66[0] + 16) < v59);
        }
        v56 = sub_1D2CAAF0C();
        sub_1D2C6C018(v56, v67 & 1, &v65);
        if (v6)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease_n();
          return v5;
        }
        swift_bridgeObjectRelease();
        v6 = v65;
        a1 = *((_QWORD *)v5 + 2);
        v18 = *((_QWORD *)v5 + 3);
        v19 = a1 + 1;
        if (a1 >= (unint64_t)v18 >> 1)
          goto LABEL_99;
        goto LABEL_81;
      }
      v49 = sub_1D2C91270(v18 % v13);
      v38 = __OFSUB__(v49, v48);
      v50 = v49 - v48;
      if (v38)
        goto LABEL_97;
      if ((v50 & 0x8000000000000000) == 0)
        goto LABEL_74;
      __break(1u);
    }
  }
LABEL_95:
  __break(1u);
LABEL_96:
  __break(1u);
LABEL_97:
  __break(1u);
LABEL_98:
  __break(1u);
LABEL_99:
  v5 = sub_1D2C71B88((char *)((unint64_t)v18 > 1), v19, 1, v5);
LABEL_81:
  *((_QWORD *)v5 + 2) = v19;
  *(_QWORD *)&v5[8 * a1 + 32] = v6;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v5;
}

uint64_t sub_1D2C55C3C(uint64_t result, uint64_t a2)
{
  unint64_t v3;
  uint64_t v4;
  int v5;
  int v6;
  uint64_t v7;

  if (result < 0)
  {
    __break(1u);
    goto LABEL_14;
  }
  v3 = result;
  if (result)
  {
    result = sub_1D2CAAF30();
    *(_QWORD *)(result + 16) = v3;
    if (*(_QWORD *)(a2 + 24))
    {
      if (!HIDWORD(v3))
      {
        v4 = result;
LABEL_8:
        v5 = cche_decode_simd_int64();
        if (v5)
        {
          v6 = v5;
          sub_1D2C4E7DC();
          swift_allocError();
          *(_DWORD *)v7 = v6;
          *(_BYTE *)(v7 + 4) = 0;
          swift_willThrow();
          *(_QWORD *)(v4 + 16) = 0;
          swift_bridgeObjectRelease();
          return v4;
        }
        result = cche_param_ctx_polynomial_degree();
        if (result <= v3)
        {
          *(_QWORD *)(v4 + 16) = result;
          return v4;
        }
        goto LABEL_15;
      }
LABEL_14:
      __break(1u);
LABEL_15:
      __break(1u);
    }
  }
  else if (*(_QWORD *)(a2 + 24))
  {
    v4 = MEMORY[0x1E0DEE9D8];
    goto LABEL_8;
  }
  __break(1u);
  return result;
}

uint64_t sub_1D2C55D44(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;

  v2 = *(_QWORD *)(a1 + 16);
  v1 = *(_QWORD *)(a1 + 24);
  result = swift_getAssociatedTypeWitness();
  if (v5 <= 0x3F)
  {
    result = type metadata accessor for Proof(319, v2, v1, v4);
    if (v6 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t *sub_1D2C55DF4(uint64_t *a1, uint64_t *a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v14;
  unint64_t v15;
  void (*v16)(uint64_t *, uint64_t *, uint64_t);
  uint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v21;
  uint64_t v22;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v3 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v4 = *(_QWORD *)(v3 + 64);
  v5 = *(_DWORD *)(v3 + 80);
  v21 = v4 + v5;
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedConformanceWitness();
  v6 = swift_getAssociatedTypeWitness();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(_DWORD *)(v7 + 80);
  v9 = v8 & 0xF8 | 7;
  v10 = *(_QWORD *)(v7 + 64) + 7;
  v11 = (v8 | v5) & 0x100000;
  if ((v9 | v5) != 7
    || v11 != 0
    || (v10 & 0xFFFFFFFFFFFFFFF8)
     + ((v4 + ((v4 + v5) & ~(unint64_t)v5) + v9) & ~v9)
     + 8 > 0x18)
  {
    v14 = *a2;
    *a1 = *a2;
    v17 = (uint64_t *)(v14 + (((v9 | v5) + 16) & ~(v9 | v5)));
    swift_retain();
  }
  else
  {
    v15 = ~(unint64_t)v5;
    v16 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(v3 + 16);
    v17 = a1;
    v22 = v6;
    v16(a1, a2, AssociatedTypeWitness);
    v18 = ((unint64_t)a1 + v21) & v15;
    v19 = ((unint64_t)a2 + v21) & v15;
    v16((uint64_t *)v18, (uint64_t *)v19, AssociatedTypeWitness);
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v7 + 16))((v18 + v4 + v9) & ~v9, (v19 + v4 + v9) & ~v9, v22);
    *(_QWORD *)((v10 + ((v18 + v4 + v9) & ~v9)) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)((v10 + ((v19 + v4 + v9) & ~v9)) & 0xFFFFFFFFFFFFF8);
    sub_1D2CAAF0C();
  }
  return v17;
}

uint64_t sub_1D2C5600C(uint64_t a1)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v3;
  void (*v4)(uint64_t, uint64_t);
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v3 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v4 = *(void (**)(uint64_t, uint64_t))(v3 + 8);
  v4(a1, AssociatedTypeWitness);
  v5 = *(_QWORD *)(v3 + 64);
  v6 = (v5 + a1 + *(unsigned __int8 *)(v3 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v4(v6, AssociatedTypeWitness);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedConformanceWitness();
  v7 = swift_getAssociatedTypeWitness();
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(_DWORD *)(v8 + 80) & 0xF8 | 7;
  (*(void (**)(unint64_t, uint64_t))(v8 + 8))((v6 + v5 + v9) & ~v9, v7);
  return swift_bridgeObjectRelease();
}

uint64_t sub_1D2C56158(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t, uint64_t);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
  v6(a1, a2, AssociatedTypeWitness);
  v7 = *(_QWORD *)(v5 + 64);
  v8 = *(unsigned __int8 *)(v5 + 80);
  v9 = (v7 + v8 + a1) & ~v8;
  v10 = (v7 + v8 + a2) & ~v8;
  v6(v9, v10, AssociatedTypeWitness);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedConformanceWitness();
  v11 = swift_getAssociatedTypeWitness();
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(_DWORD *)(v12 + 80) & 0xF8 | 7;
  v14 = (v7 + v13 + v9) & ~v13;
  v15 = (v7 + v13 + v10) & ~v13;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v12 + 16))(v14, v15, v11);
  *(_QWORD *)((*(_QWORD *)(v12 + 64) + 7 + v14) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)((*(_QWORD *)(v12 + 64) + 7 + v15) & 0xFFFFFFFFFFFFF8);
  sub_1D2CAAF0C();
  return a1;
}

uint64_t sub_1D2C562E0(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t, uint64_t);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 24);
  v6(a1, a2, AssociatedTypeWitness);
  v7 = *(_QWORD *)(v5 + 64);
  v8 = *(unsigned __int8 *)(v5 + 80);
  v9 = (v7 + v8 + a1) & ~v8;
  v10 = (v7 + v8 + a2) & ~v8;
  v6(v9, v10, AssociatedTypeWitness);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedConformanceWitness();
  v11 = swift_getAssociatedTypeWitness();
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(_DWORD *)(v12 + 80) & 0xF8 | 7;
  v14 = (v7 + v13 + v9) & ~v13;
  v15 = (v7 + v13 + v10) & ~v13;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v12 + 24))(v14, v15, v11);
  *(_QWORD *)((*(_QWORD *)(v12 + 64) + 7 + v14) & 0xFFFFFFFFFFFFFFF8) = *(_QWORD *)((*(_QWORD *)(v12 + 64)
                                                                                       + 7
                                                                                       + v15) & 0xFFFFFFFFFFFFF8);
  sub_1D2CAAF0C();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1D2C56474(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t, uint64_t);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 32);
  v6(a1, a2, AssociatedTypeWitness);
  v7 = *(_QWORD *)(v5 + 64);
  v8 = *(unsigned __int8 *)(v5 + 80);
  v9 = (v7 + v8 + a1) & ~v8;
  v10 = (v7 + v8 + a2) & ~v8;
  v6(v9, v10, AssociatedTypeWitness);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedConformanceWitness();
  v11 = swift_getAssociatedTypeWitness();
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(_DWORD *)(v12 + 80) & 0xF8 | 7;
  v14 = (v7 + v13 + v9) & ~v13;
  v15 = (v7 + v13 + v10) & ~v13;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v12 + 32))(v14, v15, v11);
  *(_QWORD *)((*(_QWORD *)(v12 + 64) + 7 + v14) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)((*(_QWORD *)(v12 + 64) + 7 + v15) & 0xFFFFFFFFFFFFF8);
  return a1;
}

uint64_t sub_1D2C565F8(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t, uint64_t);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 40);
  v6(a1, a2, AssociatedTypeWitness);
  v7 = *(_QWORD *)(v5 + 64);
  v8 = *(unsigned __int8 *)(v5 + 80);
  v9 = (v7 + v8 + a1) & ~v8;
  v10 = (v7 + v8 + a2) & ~v8;
  v6(v9, v10, AssociatedTypeWitness);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedConformanceWitness();
  v11 = swift_getAssociatedTypeWitness();
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(_DWORD *)(v12 + 80) & 0xF8 | 7;
  v14 = (v7 + v13 + v9) & ~v13;
  v15 = (v7 + v13 + v10) & ~v13;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v12 + 40))(v14, v15, v11);
  *(_QWORD *)((*(_QWORD *)(v12 + 64) + 7 + v14) & 0xFFFFFFFFFFFFFFF8) = *(_QWORD *)((*(_QWORD *)(v12 + 64)
                                                                                       + 7
                                                                                       + v15) & 0xFFFFFFFFFFFFF8);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1D2C56784(uint64_t a1, unsigned int a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t (*v23)(uint64_t, uint64_t, uint64_t);
  unint64_t v24;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v6 = *(unsigned int *)(v5 + 84);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedConformanceWitness();
  v7 = swift_getAssociatedTypeWitness();
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(unsigned int *)(v8 + 84);
  if (v9 <= 0x7FFFFFFF)
    v10 = 0x7FFFFFFF;
  else
    v10 = *(_DWORD *)(v8 + 84);
  if (v10 <= v6)
    v11 = v6;
  else
    v11 = v10;
  if (!a2)
    return 0;
  v12 = v7;
  v13 = *(_QWORD *)(v5 + 64);
  v14 = *(unsigned __int8 *)(v5 + 80);
  v15 = v13 + v14;
  v16 = *(_DWORD *)(v8 + 80) & 0xF8 | 7;
  v17 = *(_QWORD *)(v8 + 64) + 7;
  if (v11 < a2)
  {
    if ((((v17 & 0xFFFFFFFFFFFFFFF8) + ((v13 + (v15 & ~v14) + v16) & ~v16) + 8) & 0xFFFFFFF8) != 0)
      v18 = 2;
    else
      v18 = a2 - v11 + 1;
    if (v18 >= 0x10000)
      v19 = 4;
    else
      v19 = 2;
    if (v18 < 0x100)
      v19 = 1;
    if (v18 >= 2)
      v20 = v19;
    else
      v20 = 0;
    __asm { BR              X4 }
  }
  if (v6 >= v10)
  {
    v23 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 48);
    v22 = a1;
    v9 = v6;
    v12 = AssociatedTypeWitness;
    return v23(v22, v9, v12);
  }
  v22 = (((v15 + a1) & ~v14) + v13 + v16) & ~v16;
  if (v9 >= 0x7FFFFFFF)
  {
    v23 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v8 + 48);
    return v23(v22, v9, v12);
  }
  v24 = *(_QWORD *)((v17 + v22) & 0xFFFFFFFFFFFFF8);
  if (v24 >= 0xFFFFFFFF)
    LODWORD(v24) = -1;
  return (v24 + 1);
}

void sub_1D2C569F0(unsigned int *a1, unsigned int a2, unsigned int a3)
{
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  size_t v11;
  unsigned int v12;
  int v13;
  int v14;
  unsigned int v15;

  v6 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v7 = *(_DWORD *)(v6 + 84);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedConformanceWitness();
  v8 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  if (*(_DWORD *)(v8 + 84) <= 0x7FFFFFFFu)
    v9 = 0x7FFFFFFF;
  else
    v9 = *(_DWORD *)(v8 + 84);
  if (v9 <= v7)
    v10 = v7;
  else
    v10 = v9;
  v11 = ((*(_QWORD *)(v6 + 64)
        + ((*(_QWORD *)(v6 + 64) + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))
        + (*(_DWORD *)(v8 + 80) & 0xF8 | 7)) & ~(*(_DWORD *)(v8 + 80) & 0xF8 | 7))
      + ((*(_QWORD *)(v8 + 64) + 7) & 0xFFFFFFFFFFFFFFF8)
      + 8;
  if (v10 >= a3)
  {
    v14 = 0u;
    if (a2 <= v10)
      goto LABEL_20;
  }
  else
  {
    if ((_DWORD)v11)
      v12 = 2;
    else
      v12 = a3 - v10 + 1;
    if (v12 >= 0x10000)
      v13 = 4;
    else
      v13 = 2;
    if (v12 < 0x100)
      v13 = 1;
    if (v12 >= 2)
      v14 = v13;
    else
      v14 = 0;
    if (a2 <= v10)
LABEL_20:
      __asm { BR              X0 }
  }
  if ((_DWORD)v11)
  {
    v15 = ~v10 + a2;
    bzero(a1, v11);
    *a1 = v15;
  }
  __asm { BR              X10 }
}

void sub_1D2C56BD4()
{
  uint64_t v0;
  char v1;
  uint64_t v2;

  *(_BYTE *)(v0 + v2) = v1;
  JUMPOUT(0x1D2C56CA8);
}

void sub_1D2C56BDC()
{
  int v0;
  uint64_t v1;
  uint64_t v2;

  *(_DWORD *)(v1 + v2) = 0;
  if (v0)
    JUMPOUT(0x1D2C56BE4);
  JUMPOUT(0x1D2C56CA8);
}

void sub_1D2C56C54()
{
  uint64_t v0;
  __int16 v1;
  uint64_t v2;

  *(_WORD *)(v0 + v2) = v1;
  JUMPOUT(0x1D2C56CA8);
}

void sub_1D2C56C5C()
{
  uint64_t v0;
  int v1;
  uint64_t v2;

  *(_DWORD *)(v0 + v2) = v1;
  JUMPOUT(0x1D2C56CA8);
}

uint64_t sub_1D2C56C64(uint64_t a1, size_t a2)
{
  _DWORD *v2;
  int v3;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  *(_WORD *)(v12 + v15) = 0;
  if (!(_DWORD)v11)
    goto LABEL_7;
  if (v14 < v5)
  {
    v2 = (_DWORD *)((((v8 + v12) & v10) + v6 + v7) & v9);
    if (v5 >= v11)
      JUMPOUT(0x1D2C56C70);
    if ((_DWORD)a2)
    {
      v3 = ~v5 + v11;
      bzero(v2, a2);
      *v2 = v3;
    }
LABEL_7:
    JUMPOUT(0x1D2C56CA8);
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v16 + 56))(v12, v11, v14, v13);
}

uint64_t _s16EncryptedRequestVMa(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&_s16EncryptedRequestVMn);
}

void sub_1D2C56CD4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((a1 & 0x8000000000000000) == 0)
    __asm { BR              X9 }
  __break(1u);
  JUMPOUT(0x1D2C56E1CLL);
}

uint64_t sub_1D2C56E50(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  _BYTE v9[10];
  _QWORD v10[3];

  v10[2] = *MEMORY[0x1E0C80C00];
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EFC9FC98);
  result = ((uint64_t (*)(void))MEMORY[0x1E0C80A78])();
  v10[0] = a1;
  v10[1] = a2;
  if (a3)
  {
    MEMORY[0x1E0C80A78](result);
    *(_QWORD *)&v9[-32] = v10;
    *(_QWORD *)&v9[-24] = a3;
    *(_QWORD *)&v9[-16] = a4;
    *(_QWORD *)&v9[-8] = a3;
    __asm { BR              X10 }
  }
  return result;
}

uint64_t sub_1D2C571B8(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  if (a5)
  {
    v7 = MEMORY[0x1E0C80A78](result);
    MEMORY[0x1E0C80A78](v7);
    return sub_1D2C7D500(v5, v6, sub_1D2C5ADC8);
  }
  return result;
}

void CKSecretSharing.ShamirShare.init(_:)(uint64_t a1, uint64_t a2)
{
  __asm { BR              X11 }
}

void sub_1D2C572FC(uint64_t a1@<X8>)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int16 v6;
  __int16 v7;
  __int128 v8;
  unsigned int v9;
  __int128 v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15[2];
  __int128 v16;

  if (BYTE6(v1) < 6uLL)
  {
    v11 = a1 | 0x8000000000000000;
    v12 = 31;
  }
  else
  {
    sub_1D2C45028(v2, v1);
    sub_1D2C57544(v2, v1);
    v7 = v6;
    sub_1D2C45258(v2, v1);
    if ((v7 & 0x100) != 0)
    {
      __break(1u);
      JUMPOUT(0x1D2C574F0);
    }
    if (v7 == 1)
    {
      v14 = 0;
      sub_1D2C45028(v2, v1);
      sub_1D2C5768C(1, v2, v1);
      sub_1D2C56CD4(4, v15[0], v15[1]);
      v8 = v16;
      sub_1D2C56E50(v16, *((uint64_t *)&v16 + 1), (uint64_t)&v14, (uint64_t)v15);
      sub_1D2C45258(v8, *((unint64_t *)&v8 + 1));
      v9 = bswap32(v14);
      sub_1D2C5768C(5, v2, v1);
      v10 = v16;
      *(_BYTE *)v3 = 1;
      *(_DWORD *)(v3 + 4) = v9;
      *(_OWORD *)(v3 + 8) = v10;
      return;
    }
    v4 = v5 + 10;
    v11 = 0x80000001D2CB05B0;
    v12 = 35;
  }
  sub_1D2C57500();
  swift_allocError();
  *(_BYTE *)v13 = 10;
  *(_DWORD *)(v13 + 4) = 0;
  *(_BYTE *)(v13 + 8) = 1;
  *(_DWORD *)(v13 + 12) = 0;
  *(_WORD *)(v13 + 16) = 256;
  *(_QWORD *)(v13 + 24) = v12;
  *(_QWORD *)(v13 + 32) = 0x293A5F2874696E69;
  *(_QWORD *)(v13 + 40) = 0xE800000000000000;
  *(_QWORD *)(v13 + 48) = v5 + 77;
  *(_QWORD *)(v13 + 56) = 0x80000001D2CB0540;
  *(_QWORD *)(v13 + 64) = v4;
  *(_QWORD *)(v13 + 72) = v11;
  swift_willThrow();
  sub_1D2C45258(v2, v1);
}

unint64_t sub_1D2C57500()
{
  unint64_t result;

  result = qword_1EFC9FC70;
  if (!qword_1EFC9FC70)
  {
    result = MEMORY[0x1D8245F38](&protocol conformance descriptor for CKSecretSharing.SecretSharingError, &type metadata for CKSecretSharing.SecretSharingError);
    atomic_store(result, (unint64_t *)&qword_1EFC9FC70);
  }
  return result;
}

void sub_1D2C57544(uint64_t a1, uint64_t a2)
{
  __asm { BR              X12 }
}

uint64_t sub_1D2C5758C(unsigned __int8 a1, uint64_t a2)
{
  unsigned __int8 v2;

  if ((a2 & 0xFF000000000000) != 0)
    v2 = a1;
  else
    v2 = 0;
  return v2 | (((a2 & 0xFF000000000000) == 0) << 8);
}

void sub_1D2C5768C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((a1 & 0x8000000000000000) == 0)
    __asm { BR              X9 }
  __break(1u);
  JUMPOUT(0x1D2C577E8);
}

uint64_t sub_1D2C5781C(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  char v7;

  if (result < 0)
  {
    __break(1u);
LABEL_13:
    __break(1u);
    return result;
  }
  v5 = a3 - a2;
  if (a2)
    v6 = a3 - a2;
  else
    v6 = 0;
  result = sub_1D2C59A1C(0, result, v6, a2, a3);
  if ((v7 & 1) != 0)
  {
    result = v5;
    if (!a2)
      return 0;
  }
  else if (!a2)
  {
    v5 = 0;
  }
  if (v5 < result)
    goto LABEL_13;
  return result;
}

uint64_t CKSecretSharing.ShamirShare.serialize()()
{
  char *v0;
  char v1;
  unsigned int v2;
  unsigned int v4;
  _QWORD v5[3];
  uint64_t v6;
  unint64_t v7;
  __int128 v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v1 = *v0;
  v2 = *((_DWORD *)v0 + 1);
  v8 = xmmword_1D2CAD220;
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFC9FC78);
  v7 = sub_1D2C579CC();
  LOBYTE(v5[0]) = v1;
  __swift_project_boxed_opaque_existential_1(v5, v6);
  sub_1D2CAA918();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v5);
  v4 = bswap32(v2);
  v6 = MEMORY[0x1E0DEAC20];
  v7 = MEMORY[0x1E0CB1AA8];
  v5[0] = &v4;
  v5[1] = v5;
  __swift_project_boxed_opaque_existential_1(v5, MEMORY[0x1E0DEAC20]);
  sub_1D2CAA924();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v5);
  sub_1D2CAA978();
  return v8;
}

unint64_t sub_1D2C579CC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1EFC9FC80;
  if (!qword_1EFC9FC80)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EFC9FC78);
    result = MEMORY[0x1D8245F38](MEMORY[0x1E0CB25E0], v1);
    atomic_store(result, (unint64_t *)&qword_1EFC9FC80);
  }
  return result;
}

_QWORD *__swift_project_boxed_opaque_existential_1(_QWORD *result, uint64_t a2)
{
  if ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) & 0x20000) != 0)
    return (_QWORD *)(*result
                    + ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) + 16) & ~(unint64_t)*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80)));
  return result;
}

uint64_t __swift_destroy_boxed_opaque_existential_1(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 24) - 8);
  if ((*(_BYTE *)(v1 + 82) & 2) != 0)
    return swift_release();
  else
    return (*(uint64_t (**)(void))(v1 + 8))();
}

void static CKSecretSharing.ShamirShare.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  if (*a1 == *a2 && *((_DWORD *)a1 + 1) == *((_DWORD *)a2 + 1))
    sub_1D2C59C44(*((_QWORD *)a1 + 1), *((_QWORD *)a1 + 2));
}

void sub_1D2C57A8C(unsigned __int8 *a1, unsigned __int8 *a2)
{
  if (*a1 == *a2 && *((_DWORD *)a1 + 1) == *((_DWORD *)a2 + 1))
    sub_1D2C59C44(*((_QWORD *)a1 + 1), *((_QWORD *)a1 + 2));
}

_QWORD *sub_1D2C57ABC(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  int v10;

  v2 = v1;
  v1[2] = a1;
  v3 = a1 - 0x7FFFFFFF;
  if ((unint64_t)(a1 - 0x7FFFFFFF) >= 0xFFFFFFFF80000003)
  {
    ccss_sizeof_parameters_fix();
    v9 = swift_slowAlloc();
    v1[3] = v9;
    v10 = ccss_shamir_parameters_init();
    if (!v10)
    {
      ccss_sizeof_share();
      v1[4] = swift_slowAlloc();
      ccss_sizeof_generator();
      v1[5] = swift_slowAlloc();
      ccss_shamir_share_init();
      return v2;
    }
    v7 = v10;
    MEMORY[0x1D8245FD4](v9, -1, -1);
    sub_1D2CAAFC0();
    sub_1D2CAAE70();
    sub_1D2CAB0B0();
    sub_1D2CAAE70();
    swift_bridgeObjectRelease();
    v4 = 0;
    v5 = 0xE000000000000000;
    sub_1D2C57500();
    swift_allocError();
    *(_BYTE *)v6 = 3;
    v8 = 89;
  }
  else
  {
    sub_1D2CAAFC0();
    swift_bridgeObjectRelease();
    sub_1D2CAB0B0();
    sub_1D2CAAE70();
    swift_bridgeObjectRelease();
    sub_1D2CAAE70();
    sub_1D2CAB0B0();
    sub_1D2CAAE70();
    swift_bridgeObjectRelease();
    sub_1D2CAAE70();
    v4 = 0xD000000000000016;
    v5 = 0x80000001D2CB0BC0;
    sub_1D2C57500();
    swift_allocError();
    v7 = 0;
    *(_BYTE *)v6 = 1;
    v8 = 78;
  }
  *(_DWORD *)(v6 + 4) = v7;
  *(_BYTE *)(v6 + 8) = v3 < 0xFFFFFFFF80000003;
  *(_WORD *)(v6 + 16) = 256;
  *(_DWORD *)(v6 + 12) = 0;
  *(_QWORD *)(v6 + 24) = v8;
  *(_QWORD *)(v6 + 32) = 0xD00000000000001FLL;
  *(_QWORD *)(v6 + 40) = 0x80000001D2CB0BA0;
  *(_QWORD *)(v6 + 48) = 0xD00000000000006ELL;
  *(_QWORD *)(v6 + 56) = 0x80000001D2CB0540;
  *(_QWORD *)(v6 + 64) = v4;
  *(_QWORD *)(v6 + 72) = v5;
  swift_willThrow();
  _s32CKShamirShareSharedInternalStateCMa();
  swift_deallocPartialClassInstance();
  return v2;
}

uint64_t sub_1D2C57DA4(uint64_t result)
{
  int v1;
  uint64_t v2;

  if (result)
  {
    result = ccss_shamir_share_generator_deserialize();
    if ((_DWORD)result)
    {
      v1 = result;
      sub_1D2CAAFC0();
      sub_1D2CAAE70();
      sub_1D2CAB0B0();
      sub_1D2CAAE70();
      swift_bridgeObjectRelease();
      sub_1D2C57500();
      swift_allocError();
      *(_BYTE *)v2 = 17;
      *(_DWORD *)(v2 + 4) = v1;
      *(_BYTE *)(v2 + 8) = 0;
      *(_DWORD *)(v2 + 12) = 0;
      *(_WORD *)(v2 + 16) = 256;
      *(_OWORD *)(v2 + 24) = xmmword_1D2CAD3B0;
      *(_QWORD *)(v2 + 40) = 0xE800000000000000;
      *(_QWORD *)(v2 + 48) = 0xD00000000000006ELL;
      *(_QWORD *)(v2 + 56) = 0x80000001D2CB0540;
      *(_QWORD *)(v2 + 64) = 0;
      *(_QWORD *)(v2 + 72) = 0xE000000000000000;
      return swift_willThrow();
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1D2C57EF0()
{
  _QWORD *v0;
  void *v1;

  MEMORY[0x1D8245FD4](v0[3], -1, -1);
  MEMORY[0x1D8245FD4](v0[4], -1, -1);
  v1 = (void *)v0[5];
  memset_s(v1, 8uLL, 0, 8uLL);
  MEMORY[0x1D8245FD4](v1, -1, -1);
  return swift_deallocClassInstance();
}

uint64_t CKSecretSharing.ShamirShareGenerator.init(threshold:secret:supportedPrime:)(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v3;

  _s32CKShamirShareSharedInternalStateCMa();
  swift_allocObject();
  sub_1D2C57ABC(a1);
  if (!v3)
    __asm { BR              X10 }
  return sub_1D2C45258(a2, a3);
}

void sub_1D2C58364(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (ccrng())
  {
    if (a1)
      __asm { BR              X10 }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  JUMPOUT(0x1D2C58478);
}

uint64_t CKSecretSharing.ShamirShareGenerator.init(_:)@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;
  uint64_t result;

  result = sub_1D2C5A480(a1, a2);
  if (!v3)
    *a3 = result;
  return result;
}

id sub_1D2C584B4(int a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  int share;
  int v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;

  if (!a1)
  {
    sub_1D2C57500();
    swift_allocError();
    v6 = 0;
    *(_BYTE *)v7 = 1;
    v8 = 0xD000000000000022;
    v9 = 0x80000001D2CB09B0;
    v10 = 173;
    goto LABEL_5;
  }
  v3 = *v1;
  v4 = *(_QWORD *)(*v1 + 32);
  share = ccss_shamir_share_generator_generate_share();
  if (share)
  {
    v6 = share;
    sub_1D2C57500();
    swift_allocError();
    *(_BYTE *)v7 = 3;
    v8 = 0xD000000000000041;
    v9 = 0x80000001D2CB0A10;
    v10 = 177;
LABEL_5:
    *(_DWORD *)(v7 + 4) = v6;
    *(_BYTE *)(v7 + 8) = a1 == 0;
    *(_WORD *)(v7 + 16) = 256;
    *(_DWORD *)(v7 + 12) = 0;
    *(_QWORD *)(v7 + 24) = v10;
    *(_QWORD *)(v7 + 32) = 0xD000000000000020;
    *(_QWORD *)(v7 + 40) = 0x80000001D2CB09E0;
    *(_QWORD *)(v7 + 48) = 0xD00000000000006ELL;
    *(_QWORD *)(v7 + 56) = 0x80000001D2CB0540;
    *(_QWORD *)(v7 + 64) = v8;
    *(_QWORD *)(v7 + 72) = v9;
    return (id)swift_willThrow();
  }
  return objc_msgSend(objc_allocWithZone(MEMORY[0x1E0D1BD80]), sel_initWithParams_share_, *(_QWORD *)(v3 + 24), v4);
}

void CKSecretSharing.ShamirShareGenerator.generateShare(shareIndex:)(int a1@<W0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  uint64_t v3;
  id v5;
  void *v6;
  unsigned int v7;
  id v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  if ((a1 - 1) > 0x7FFFFFFC)
  {
    sub_1D2CAAFC0();
    sub_1D2CAAE70();
    sub_1D2CAB0B0();
    sub_1D2CAAE70();
    swift_bridgeObjectRelease();
    sub_1D2C57500();
    swift_allocError();
    *(_BYTE *)v13 = 1;
    *(_DWORD *)(v13 + 4) = 0;
    *(_BYTE *)(v13 + 8) = 1;
    *(_DWORD *)(v13 + 12) = 0;
    *(_WORD *)(v13 + 16) = 256;
    *(_OWORD *)(v13 + 24) = xmmword_1D2CAD3C0;
    *(_QWORD *)(v13 + 40) = 0x80000001D2CB06E0;
    *(_QWORD *)(v13 + 48) = 0xD00000000000006ELL;
    *(_QWORD *)(v13 + 56) = 0x80000001D2CB0540;
    *(_QWORD *)(v13 + 64) = 0;
    *(_QWORD *)(v13 + 72) = 0xE000000000000000;
    swift_willThrow();
  }
  else
  {
    v14 = *v2;
    v5 = sub_1D2C584B4(a1);
    if (!v3)
    {
      v6 = v5;
      v7 = objc_msgSend(v5, sel_x, v14);
      v8 = objc_msgSend(v6, sel_y);
      if (v8)
      {
        v9 = v8;
        v10 = sub_1D2CAA96C();
        v12 = v11;

        *(_BYTE *)a2 = 1;
        *(_DWORD *)(a2 + 4) = v7;
        *(_QWORD *)(a2 + 8) = v10;
        *(_QWORD *)(a2 + 16) = v12;
      }
      else
      {
        __break(1u);
      }
    }
  }
}

uint64_t CKSecretSharing.ShamirShareGenerator.generateShares(_:)(uint64_t result)
{
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  __int128 v6;
  id v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  char v14;

  if (*(_QWORD *)(*(_QWORD *)v1 + 16) > result)
  {
    sub_1D2C57500();
    v5 = (void *)swift_allocError();
    *(_BYTE *)v4 = 5;
    *(_DWORD *)(v4 + 4) = 0;
    *(_BYTE *)(v4 + 8) = 1;
    *(_DWORD *)(v4 + 12) = 0;
    *(_WORD *)(v4 + 16) = 256;
    v6 = xmmword_1D2CAD3E0;
LABEL_5:
    *(_OWORD *)(v4 + 24) = v6;
    *(_QWORD *)(v4 + 40) = 0x80000001D2CB0770;
    *(_QWORD *)(v4 + 48) = 0xD00000000000006ELL;
    *(_QWORD *)(v4 + 56) = 0x80000001D2CB0540;
    *(_QWORD *)(v4 + 64) = 0;
    *(_QWORD *)(v4 + 72) = 0xE000000000000000;
    swift_willThrow();
    goto LABEL_6;
  }
  if (result > 2147483646)
  {
    sub_1D2C57500();
    v5 = (void *)swift_allocError();
    *(_BYTE *)v4 = 6;
    *(_DWORD *)(v4 + 4) = 0;
    *(_BYTE *)(v4 + 8) = 1;
    *(_DWORD *)(v4 + 12) = 0;
    *(_WORD *)(v4 + 16) = 256;
    v6 = xmmword_1D2CAD3D0;
    goto LABEL_5;
  }
  if ((_DWORD)result)
  {
    v9 = (result << 32) | 1;
    swift_retain();
    sub_1D2C5A1E0(v9);
    v5 = v2;
    if (!v2)
    {
      v3 = v10;
      swift_release();
      return v3;
    }
    swift_release();
LABEL_6:
    v7 = v5;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EFC9FC88);
    if (swift_dynamicCast())
    {

      v3 = v13;
      if (v14 == 1)
      {
        if (v13 == 1)
        {
          sub_1D2C57500();
          swift_allocError();
          *(_BYTE *)v8 = 1;
          *(_DWORD *)(v8 + 4) = 0;
          *(_BYTE *)(v8 + 8) = 1;
          *(_DWORD *)(v8 + 12) = 0;
          *(_WORD *)(v8 + 16) = 256;
          *(_OWORD *)(v8 + 24) = xmmword_1D2CAD400;
          *(_QWORD *)(v8 + 40) = 0x80000001D2CB0770;
          *(_QWORD *)(v8 + 48) = 0xD00000000000006ELL;
          *(_QWORD *)(v8 + 56) = 0x80000001D2CB0540;
          *(_QWORD *)(v8 + 64) = 0xD000000000000049;
          *(_QWORD *)(v8 + 72) = 0x80000001D2CB0790;
        }
        else
        {
          sub_1D2C4E7DC();
          swift_allocError();
          *(_DWORD *)v12 = v13;
          *(_BYTE *)(v12 + 4) = 1;
        }
      }
      else
      {
        sub_1D2CAAFC0();
        sub_1D2CAAE70();
        sub_1D2CAB044();
        sub_1D2CAAE70();
        sub_1D2C57500();
        swift_allocError();
        *(_BYTE *)v11 = 3;
        *(_DWORD *)(v11 + 4) = v13;
        *(_BYTE *)(v11 + 8) = 0;
        *(_DWORD *)(v11 + 12) = 0;
        *(_WORD *)(v11 + 16) = 256;
        *(_OWORD *)(v11 + 24) = xmmword_1D2CAD3F0;
        *(_QWORD *)(v11 + 40) = 0x80000001D2CB0770;
        *(_QWORD *)(v11 + 48) = 0xD00000000000006ELL;
        *(_QWORD *)(v11 + 56) = 0x80000001D2CB0540;
        *(_QWORD *)(v11 + 64) = 0;
        *(_QWORD *)(v11 + 72) = 0xE000000000000000;
      }
      swift_willThrow();
    }

    return v3;
  }
  __break(1u);
  return result;
}

uint64_t CKSecretSharing.ShamirShareGenerator.serializedData()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v6;

  v1 = type metadata accessor for CryptoKitSecretSharing_ShamirShareGeneratorSerialization(0);
  MEMORY[0x1E0C80A78](v1);
  v3 = (char *)&v6 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = swift_retain();
  sub_1D2C58C74(v4, (uint64_t)v3);
  if (!v0)
  {
    sub_1D2C5AE40(&qword_1ED9858A8, type metadata accessor for CryptoKitSecretSharing_ShamirShareGeneratorSerialization, (uint64_t)&unk_1D2CAE4A4);
    v1 = sub_1D2CAAAB0();
    sub_1D2C59684((uint64_t)(v3 + 16));
    sub_1D2C5AB90((uint64_t)v3);
  }
  return v1;
}

uint64_t sub_1D2C58C74@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  int v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  int v13;
  int v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t result;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  void (*v25)(uint64_t, _QWORD);
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  v4 = sub_1D2CAA8E8();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = (char *)&v26 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)a2 = 0;
  *(_DWORD *)(a2 + 8) = 0;
  *(_OWORD *)(a2 + 16) = xmmword_1D2CAD220;
  type metadata accessor for CryptoKitSecretSharing_ShamirShareGeneratorSerialization(0);
  sub_1D2CAA9E4();
  v32 = 0;
  v8 = ccss_sizeof_shamir_share_generator_serialization();
  v9 = v8;
  v28 = a1;
  if (!v8)
  {
    v15 = 0xD00000000000003ALL;
    v16 = 0x80000001D2CB0930;
    v14 = -7;
    v17 = 303;
    goto LABEL_5;
  }
  v27 = v4;
  v10 = swift_slowAlloc();
  v11 = v32;
  v12 = ccss_shamir_share_generator_serialize();
  if (v12)
  {
    v13 = v12;
    MEMORY[0x1D8245FD4](v10, -1, -1);
    v30 = 0;
    v31 = 0xE000000000000000;
    sub_1D2CAAFC0();
    sub_1D2CAAE70();
    v29 = v13;
    sub_1D2CAB0B0();
    sub_1D2CAAE70();
    swift_bridgeObjectRelease();
    v14 = 0;
    v15 = v30;
    v16 = v31;
    v17 = 311;
LABEL_5:
    sub_1D2C57500();
    swift_allocError();
    *(_BYTE *)v18 = 3;
    *(_DWORD *)(v18 + 4) = v14;
    *(_BYTE *)(v18 + 8) = v9;
    *(_DWORD *)(v18 + 12) = 0;
    *(_WORD *)(v18 + 16) = 256;
    *(_QWORD *)(v18 + 24) = v17;
    *(_QWORD *)(v18 + 32) = 0x293A5F2874696E69;
    *(_QWORD *)(v18 + 40) = 0xE800000000000000;
    *(_QWORD *)(v18 + 48) = 0xD00000000000006ELL;
    *(_QWORD *)(v18 + 56) = 0x80000001D2CB0540;
    *(_QWORD *)(v18 + 64) = v15;
    *(_QWORD *)(v18 + 72) = v16;
    swift_willThrow();
    swift_release();
    return sub_1D2C5AB90(a2);
  }
  v20 = v27;
  (*(void (**)(char *, _QWORD, uint64_t))(v5 + 104))(v7, *MEMORY[0x1E0CB00C0], v27);
  sub_1D2CAA8DC();
  if (v11)
  {
    sub_1D2CAA8A0();
    swift_allocObject();
    swift_retain();
    v21 = sub_1D2CAA84C();
    v22 = sub_1D2CA76E8(v21, v11);
    v24 = v23;
    swift_release();
  }
  else
  {
    v25 = (void (*)(uint64_t, _QWORD))sub_1D2CAA8DC();
    v25(v10, 0);
    swift_release();
    swift_release();
    v22 = 0;
    v24 = 0xC000000000000000;
  }
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v20);
  *(_DWORD *)a2 = 1;
  *(_DWORD *)(a2 + 8) = *(_QWORD *)(v28 + 16);
  sub_1D2C45258(*(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24));
  result = swift_release();
  *(_QWORD *)(a2 + 16) = v22;
  *(_QWORD *)(a2 + 24) = v24;
  *(_DWORD *)(a2 + 4) = 1;
  return result;
}

_QWORD *CKSecretSharing.ShamirShareSecretReconstructor.init(threshold:supportedPrime:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  _QWORD *result;

  _s32CKShamirShareSharedInternalStateCMa();
  v5 = swift_allocObject();
  result = sub_1D2C57ABC(a1);
  if (!v2)
    *a2 = v5;
  return result;
}

void sub_1D2C59034(unint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int64_t v15;
  id v16;
  int v17;
  int v18;
  uint64_t v19;

  v3 = *v1;
  v4 = *(_QWORD *)(v3 + 16);
  if (a1 >> 62)
  {
    sub_1D2CAAF0C();
    v6 = sub_1D2CAB068();
    swift_bridgeObjectRelease();
    if (v6 < v4)
      goto LABEL_3;
  }
  else if (*(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10) < v4)
  {
LABEL_3:
    sub_1D2C57500();
    swift_allocError();
    *(_BYTE *)v5 = 5;
    *(_DWORD *)(v5 + 4) = 0;
    *(_BYTE *)(v5 + 8) = 1;
    *(_DWORD *)(v5 + 12) = 0;
    *(_WORD *)(v5 + 16) = 256;
    *(_OWORD *)(v5 + 24) = xmmword_1D2CAD420;
    *(_QWORD *)(v5 + 40) = 0x80000001D2CB0890;
    *(_QWORD *)(v5 + 48) = 0xD00000000000006ELL;
    *(_QWORD *)(v5 + 56) = 0x80000001D2CB0540;
    *(_QWORD *)(v5 + 64) = 0xD00000000000002DLL;
    *(_QWORD *)(v5 + 72) = 0x80000001D2CB08C0;
    swift_willThrow();
    return;
  }
  ccss_sizeof_share_bag();
  v7 = swift_slowAlloc();
  ccss_shamir_share_bag_init();
  v8 = *(_QWORD *)(v3 + 16);
  sub_1D2CAAF0C();
  sub_1D2C5A048(v8, a1);
  v10 = v9;
  v12 = v11;
  v14 = v13;
  swift_bridgeObjectRelease();
  v15 = v14 >> 1;
  if (v12 == v14 >> 1)
  {
LABEL_9:
    swift_unknownObjectRelease();
    swift_retain();
    sub_1D2C49FC4(0x10uLL);
    swift_release();
    MEMORY[0x1D8245FD4](v7, -1, -1);
  }
  else
  {
    while (v12 < v15)
    {
      v16 = *(id *)(v10 + 8 * v12);
      objc_msgSend(v16, sel_share);
      v17 = ccss_shamir_share_bag_add_share();
      if (v17)
      {
        v18 = v17;
        sub_1D2CAAFC0();
        sub_1D2CAAE70();
        sub_1D2CAB0B0();
        sub_1D2CAAE70();
        swift_bridgeObjectRelease();
        sub_1D2C57500();
        swift_allocError();
        *(_BYTE *)v19 = 3;
        *(_DWORD *)(v19 + 4) = v18;
        *(_BYTE *)(v19 + 8) = 0;
        *(_DWORD *)(v19 + 12) = 0;
        *(_WORD *)(v19 + 16) = 256;
        *(_OWORD *)(v19 + 24) = xmmword_1D2CAD410;
        *(_QWORD *)(v19 + 40) = 0x80000001D2CB0890;
        *(_QWORD *)(v19 + 48) = 0xD00000000000006ELL;
        *(_QWORD *)(v19 + 56) = 0x80000001D2CB0540;
        *(_QWORD *)(v19 + 64) = 0;
        *(_QWORD *)(v19 + 72) = 0xE000000000000000;
        swift_willThrow();
        swift_unknownObjectRelease();

        MEMORY[0x1D8245FD4](v7, -1, -1);
        return;
      }

      if (v15 == ++v12)
        goto LABEL_9;
    }
    __break(1u);
  }
}

unint64_t CKSecretSharing.ShamirShareSecretReconstructor.recoverSecret(shares:)(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *v1;
  swift_retain();
  v5 = sub_1D2C5A360(a1, v4);
  swift_release();
  sub_1D2C59034(v5);
  v7 = v6;
  swift_bridgeObjectRelease();
  if (!v2)
  {
    v5 = sub_1D2C4A504(v7);
    swift_release();
  }
  return v5;
}

void sub_1D2C5941C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __asm { BR              X10 }
}

uint64_t sub_1D2C5947C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, __int16 a10, char __s2, char a12, char a13, char a14, char a15, char a16, char a17, char a18, char a19, char a20,char a21,char a22,char a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37)
{
  BOOL *v37;
  const void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t result;
  uint64_t v42;
  __int16 v43;
  char v44;
  char v45;
  char v46;
  char v47;

  v42 = v39;
  v43 = v40;
  v44 = BYTE2(v40);
  v45 = BYTE3(v40);
  v46 = BYTE4(v40);
  v47 = BYTE5(v40);
  if (!v38)
  {
    __break(1u);
    JUMPOUT(0x1D2C59660);
  }
  result = memcmp(v38, &v42, BYTE6(v40));
  *v37 = (_DWORD)result == 0;
  return result;
}

void sub_1D2C59684(uint64_t a1)
{
  __asm { BR              X11 }
}

uint64_t sub_1D2C596DC@<X0>(uint64_t a1@<X8>, uint64_t a2, uint64_t __s, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  _QWORD *v17;
  uint64_t v18;
  uint64_t result;
  unint64_t v20;
  uint64_t v21;
  unsigned int v22;
  unsigned __int8 v23;
  unsigned __int8 v24;
  unsigned __int8 v25;

  v21 = v18;
  LOWORD(v22) = a1;
  BYTE2(v22) = BYTE2(a1);
  HIBYTE(v22) = BYTE3(a1);
  v23 = BYTE4(a1);
  v24 = BYTE5(a1);
  v25 = BYTE6(a1);
  result = memset_s(&v21, BYTE6(a1), 0, BYTE6(a1));
  v20 = v22 | ((unint64_t)v23 << 32) | ((unint64_t)v24 << 40) | ((unint64_t)v25 << 48);
  *v17 = v21;
  v17[1] = v20;
  return result;
}

uint64_t sub_1D2C5996C(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = sub_1D2CAA864();
  v5 = result;
  if (result)
  {
    result = sub_1D2CAA888();
    if (__OFSUB__(a1, result))
      goto LABEL_7;
    v5 += a1 - result;
  }
  if (!__OFSUB__(a2, a1))
  {
    sub_1D2CAA87C();
    sub_1D2C57DA4(v5);
    return swift_release();
  }
  __break(1u);
LABEL_7:
  __break(1u);
  return result;
}

uint64_t sub_1D2C59A1C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t result;
  uint64_t v11;

  v9 = sub_1D2C7D4AC(a1, a3, a4, a5);
  if (a2 > 0)
  {
    if (v9 < 0 || v9 >= (unint64_t)a2)
      goto LABEL_8;
    return 0;
  }
  if (v9 <= 0 && v9 > a2)
    return 0;
LABEL_8:
  result = a1 + a2;
  if (__OFADD__(a1, a2))
  {
    __break(1u);
LABEL_15:
    __break(1u);
    return result;
  }
  v11 = a5 - a4;
  if (!a4)
    v11 = 0;
  if (result < 0 || v11 < result)
    goto LABEL_15;
  return result;
}

uint64_t sub_1D2C59ABC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  char v5;
  char v7;
  uint64_t v8;
  __int16 v9;
  char v10;
  char v11;
  char v12;
  char v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v8 = a1;
  v9 = a2;
  v10 = BYTE2(a2);
  v11 = BYTE3(a2);
  v12 = BYTE4(a2);
  v13 = BYTE5(a2);
  sub_1D2C5941C((uint64_t)&v8, (uint64_t)&v8 + BYTE6(a2), a3, a4);
  if (!v4)
    v5 = v7;
  return v5 & 1;
}

uint64_t sub_1D2C59B90(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t result;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  char v19;

  result = sub_1D2CAA864();
  v11 = result;
  if (result)
  {
    result = sub_1D2CAA888();
    if (__OFSUB__(a1, result))
    {
LABEL_15:
      __break(1u);
      return result;
    }
    v11 += a1 - result;
  }
  v12 = __OFSUB__(a2, a1);
  v13 = a2 - a1;
  if (v12)
  {
    __break(1u);
    goto LABEL_15;
  }
  v14 = sub_1D2CAA87C();
  if (v14 >= v13)
    v15 = v13;
  else
    v15 = v14;
  v16 = v11 + v15;
  if (v11)
    v17 = v16;
  else
    v17 = 0;
  sub_1D2C5941C(v11, v17, a4, a5);
  if (!v5)
    v18 = v19;
  return v18 & 1;
}

void sub_1D2C59C44(uint64_t a1, uint64_t a2)
{
  __asm { BR              X11 }
}

uint64_t sub_1D2C59C90()
{
  unint64_t v0;

  return ((uint64_t (*)(void))((char *)&loc_1D2C59CC4 + dword_1D2C59E9C[v0 >> 62]))();
}

uint64_t sub_1D2C59CD4@<X0>(int a1@<W8>)
{
  uint64_t v1;
  uint64_t v2;
  char v3;

  if (v1 == BYTE6(v2))
  {
    if (v1 >= 1)
      __asm { BR              X10 }
    v3 = 1;
  }
  else
  {
    v3 = 0;
  }
  return v3 & 1;
}

uint64_t _s32CKShamirShareSharedInternalStateCMa()
{
  return objc_opt_self();
}

_QWORD *sub_1D2C59EDC(_QWORD *result, _QWORD *a2)
{
  int v3;
  uint64_t v4;

  if (*result)
  {
    result = (_QWORD *)ccss_shamir_share_bag_recover_secret();
    if ((_DWORD)result)
    {
      v3 = (int)result;
      sub_1D2CAAFC0();
      sub_1D2CAAE70();
      sub_1D2CAB0B0();
      sub_1D2CAAE70();
      swift_bridgeObjectRelease();
      sub_1D2C57500();
      swift_allocError();
      *(_BYTE *)v4 = 3;
      *(_DWORD *)(v4 + 4) = v3;
      *(_BYTE *)(v4 + 8) = 0;
      *(_DWORD *)(v4 + 12) = 0;
      *(_WORD *)(v4 + 16) = 256;
      *(_OWORD *)(v4 + 24) = xmmword_1D2CAD430;
      *(_QWORD *)(v4 + 40) = 0x80000001D2CB0890;
      *(_QWORD *)(v4 + 48) = 0xD00000000000006ELL;
      *(_QWORD *)(v4 + 56) = 0x80000001D2CB0540;
      *(_QWORD *)(v4 + 64) = 0;
      *(_QWORD *)(v4 + 72) = 0xE000000000000000;
      return (_QWORD *)swift_willThrow();
    }
    else
    {
      *a2 = 16;
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1D2C5A048(uint64_t result, unint64_t a2)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  if (result < 0)
  {
    __break(1u);
  }
  else
  {
    v2 = a2;
    v3 = result;
    v4 = a2 >> 62;
    if (!(a2 >> 62))
    {
      v5 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFF8) + 0x10);
      goto LABEL_4;
    }
  }
  sub_1D2CAAF0C();
  v5 = sub_1D2CAB068();
  result = swift_bridgeObjectRelease();
LABEL_4:
  if (v5 >= v3)
    v6 = v3;
  else
    v6 = v5;
  if (v5 < 0)
    v6 = v3;
  if (v3)
    v7 = v6;
  else
    v7 = 0;
  if (v4)
  {
    sub_1D2CAAF0C();
    v9 = sub_1D2CAB068();
    result = swift_bridgeObjectRelease();
    if (v9 < 0)
    {
LABEL_28:
      __break(1u);
      return result;
    }
    sub_1D2CAAF0C();
    v8 = sub_1D2CAB068();
    result = swift_bridgeObjectRelease();
  }
  else
  {
    v8 = *(_QWORD *)((v2 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  if (v8 < v7)
  {
    __break(1u);
    goto LABEL_28;
  }
  if ((v2 & 0xC000000000000001) != 0 && v7)
  {
    sub_1D2C5ADE4();
    v10 = 0;
    do
    {
      v11 = v10 + 1;
      sub_1D2CAAFD8();
      v10 = v11;
    }
    while (v7 != v11);
  }
  if (v4)
  {
    sub_1D2CAAF0C();
    v12 = sub_1D2CAB074();
    swift_bridgeObjectRelease();
  }
  else
  {
    v12 = v2 & 0xFFFFFFFFFFFFFF8;
    sub_1D2CAAF0C();
  }
  return v12;
}

void sub_1D2C5A1E0(unint64_t a1)
{
  uint64_t v1;
  int v2;
  uint64_t v3;
  uint64_t v4;
  int64_t v5;
  BOOL v6;
  uint64_t v7;
  char v8;
  int v9;
  __int128 v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  __int128 v15;
  unint64_t v16;
  _BYTE v17[4];
  int v18;
  __int128 v19;
  uint64_t v20;

  v2 = a1;
  v16 = HIDWORD(a1);
  if (HIDWORD(a1) < a1)
    v3 = -(uint64_t)(a1 - HIDWORD(a1));
  else
    v3 = (HIDWORD(a1) - a1);
  v4 = v3 + 1;
  if (v3 != -1)
  {
    v20 = MEMORY[0x1E0DEE9D8];
    v5 = v4 & ~(v4 >> 63);
    sub_1D2C4DAB8(0, v5, 0);
    if (v3 >= -1)
    {
      v6 = 0;
      v7 = v20;
      while (v5)
      {
        if (v6)
          goto LABEL_23;
        CKSecretSharing.ShamirShareGenerator.generateShare(shareIndex:)(v2, (uint64_t)v17);
        if (v1)
        {
          swift_release();
          return;
        }
        v8 = v17[0];
        v9 = v18;
        v10 = v19;
        v20 = v7;
        v12 = *(_QWORD *)(v7 + 16);
        v11 = *(_QWORD *)(v7 + 24);
        if (v12 >= v11 >> 1)
        {
          v15 = v19;
          sub_1D2C4DAB8((char *)(v11 > 1), v12 + 1, 1);
          v10 = v15;
          v7 = v20;
        }
        *(_QWORD *)(v7 + 16) = v12 + 1;
        v13 = v7 + 24 * v12;
        *(_BYTE *)(v13 + 32) = v8;
        *(_DWORD *)(v13 + 36) = v9;
        *(_OWORD *)(v13 + 40) = v10;
        v6 = v2 == (_DWORD)v16;
        if (v2 == (_DWORD)v16)
        {
          v2 = 0;
        }
        else if (__CFADD__(v2++, 1))
        {
          goto LABEL_21;
        }
        --v5;
        if (!--v4)
          return;
      }
      __break(1u);
LABEL_21:
      __break(1u);
    }
    __break(1u);
LABEL_23:
    __break(1u);
  }
}

uint64_t sub_1D2C5A360(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t result;
  uint64_t v6;
  unint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  id v11;
  void *v12;
  uint64_t v13;

  v3 = *(_QWORD *)(a1 + 16);
  result = MEMORY[0x1E0DEE9D8];
  if (v3)
  {
    v13 = MEMORY[0x1E0DEE9D8];
    sub_1D2CAB020();
    v6 = *(_QWORD *)(a2 + 24);
    v7 = (unint64_t *)(a1 + 48);
    do
    {
      v8 = *((unsigned int *)v7 - 3);
      v9 = *(v7 - 1);
      v10 = *v7;
      v11 = objc_allocWithZone(MEMORY[0x1E0D1BD80]);
      sub_1D2C45028(v9, v10);
      v12 = (void *)sub_1D2CAA954();
      objc_msgSend(v11, sel_initWithParams_x_y_, v6, v8, v12);

      sub_1D2C45258(v9, v10);
      sub_1D2CAB008();
      sub_1D2CAB02C();
      sub_1D2CAB038();
      sub_1D2CAB014();
      v7 += 3;
      --v3;
    }
    while (v3);
    return v13;
  }
  return result;
}

uint64_t sub_1D2C5A480(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int *v8;
  uint64_t v9;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _DWORD v20[8];
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v5 = sub_1D2CAAA08();
  MEMORY[0x1E0C80A78](v5);
  v6 = type metadata accessor for CryptoKitSecretSharing_ShamirShareGeneratorSerialization(0);
  MEMORY[0x1E0C80A78](v6);
  v8 = (_DWORD *)((char *)v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  v23 = 0;
  v21 = 0u;
  v22 = 0u;
  sub_1D2C45028(a1, a2);
  sub_1D2CAA9FC();
  sub_1D2C5AE40(&qword_1ED9858A8, type metadata accessor for CryptoKitSecretSharing_ShamirShareGeneratorSerialization, (uint64_t)&unk_1D2CAE4A4);
  v9 = v6;
  sub_1D2CAAAA4();
  if (!v2)
  {
    v9 = MEMORY[0x1E0DEE9D8];
    if (v8[1] == 1)
    {
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      *(_QWORD *)&v21 = v9;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        sub_1D2C4DA9C(0, *(_QWORD *)(v9 + 16) + 1, 1);
        v9 = v21;
      }
      v12 = *(_QWORD *)(v9 + 16);
      v11 = *(_QWORD *)(v9 + 24);
      v13 = v12 + 1;
      if (v12 >= v11 >> 1)
      {
        sub_1D2C4DA9C((char *)(v11 > 1), v12 + 1, 1);
        v9 = v21;
      }
      *(_QWORD *)(v9 + 16) = v13;
    }
    else if (!*(_QWORD *)(MEMORY[0x1E0DEE9D8] + 16))
    {
      swift_release();
      sub_1D2C57500();
      swift_allocError();
      *(_BYTE *)v18 = 17;
      *(_DWORD *)(v18 + 4) = 0;
      *(_BYTE *)(v18 + 8) = 1;
      *(_DWORD *)(v18 + 12) = 0;
      *(_WORD *)(v18 + 16) = 256;
      *(_OWORD *)(v18 + 24) = xmmword_1D2CAD440;
      *(_QWORD *)(v18 + 40) = 0xE800000000000000;
      *(_QWORD *)(v18 + 48) = 0xD00000000000006ELL;
      *(_QWORD *)(v18 + 56) = 0x80000001D2CB0540;
      *(_QWORD *)(v18 + 64) = 0xD000000000000078;
      *(_QWORD *)(v18 + 72) = 0x80000001D2CB0AA0;
LABEL_14:
      swift_willThrow();
      sub_1D2C59684((uint64_t)(v8 + 4));
      sub_1D2C45258(a1, a2);
      sub_1D2C5AB90((uint64_t)v8);
      return v9;
    }
    swift_release();
    v14 = *v8;
    if (*v8 == 1)
    {
      v15 = v8[2];
      _s32CKShamirShareSharedInternalStateCMa();
      swift_allocObject();
      sub_1D2C57ABC(v15);
      __asm { BR              X10 }
    }
    *(_QWORD *)&v21 = 0;
    *((_QWORD *)&v21 + 1) = 0xE000000000000000;
    sub_1D2CAAFC0();
    sub_1D2CAAE70();
    v20[7] = v14;
    sub_1D2CAB0B0();
    sub_1D2CAAE70();
    swift_bridgeObjectRelease();
    sub_1D2CAAE70();
    v16 = *((_QWORD *)&v21 + 1);
    v9 = v21;
    sub_1D2C57500();
    swift_allocError();
    *(_BYTE *)v17 = 18;
    *(_DWORD *)(v17 + 4) = 0;
    *(_BYTE *)(v17 + 8) = 1;
    *(_DWORD *)(v17 + 12) = 0;
    *(_WORD *)(v17 + 16) = 256;
    *(_OWORD *)(v17 + 24) = xmmword_1D2CAD450;
    *(_QWORD *)(v17 + 40) = 0xE800000000000000;
    *(_QWORD *)(v17 + 48) = 0xD00000000000006ELL;
    *(_QWORD *)(v17 + 56) = 0x80000001D2CB0540;
    *(_QWORD *)(v17 + 64) = v9;
    *(_QWORD *)(v17 + 72) = v16;
    goto LABEL_14;
  }
  sub_1D2C45258(a1, a2);
  return v9;
}

void sub_1D2C5AAD0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v11 = sub_1D2CAA864();
  if (v11)
  {
    v12 = sub_1D2CAA888();
    if (__OFSUB__(a1, v12))
    {
LABEL_13:
      __break(1u);
      return;
    }
    v11 += a1 - v12;
  }
  v13 = __OFSUB__(a2, a1);
  v14 = a2 - a1;
  if (v13)
  {
    __break(1u);
    goto LABEL_13;
  }
  v15 = sub_1D2CAA87C();
  if (v15 >= v14)
    v16 = v14;
  else
    v16 = v15;
  v17 = v11 + v16;
  if (v11)
    v18 = v17;
  else
    v18 = 0;
  sub_1D2C58364(v11, v18, a4, a5, a6);
}

uint64_t sub_1D2C5AB90(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for CryptoKitSecretSharing_ShamirShareGeneratorSerialization(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t _s11ShamirShareVwxx(uint64_t a1)
{
  return sub_1D2C45258(*(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16));
}

uint64_t _s11ShamirShareVwCP_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  v3 = *(_QWORD *)(a2 + 8);
  v4 = *(_QWORD *)(a2 + 16);
  sub_1D2C45028(v3, v4);
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = v4;
  return a1;
}

uint64_t _s11ShamirShareVwca(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  v3 = *(_QWORD *)(a2 + 8);
  v4 = *(_QWORD *)(a2 + 16);
  sub_1D2C45028(v3, v4);
  v5 = *(_QWORD *)(a1 + 8);
  v6 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = v4;
  sub_1D2C45258(v5, v6);
  return a1;
}

__n128 __swift_memcpy24_8(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  *a1 = result;
  return result;
}

uint64_t _s11ShamirShareVwta(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  v3 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  sub_1D2C45258(v3, v4);
  return a1;
}

uint64_t _s11ShamirShareVwet(uint64_t a1, unsigned int a2)
{
  unsigned int v3;

  if (!a2)
    return 0;
  if (a2 >= 0xD && *(_BYTE *)(a1 + 24))
    return (*(_DWORD *)a1 + 13);
  v3 = (((*(_QWORD *)(a1 + 16) >> 60) >> 2) & 0xFFFFFFF3 | (4 * ((*(_QWORD *)(a1 + 16) >> 60) & 3))) ^ 0xF;
  if (v3 >= 0xC)
    v3 = -1;
  return v3 + 1;
}

uint64_t _s11ShamirShareVwst(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xC)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 13;
    if (a3 >= 0xD)
      *(_BYTE *)(result + 24) = 1;
  }
  else
  {
    if (a3 >= 0xD)
      *(_BYTE *)(result + 24) = 0;
    if (a2)
    {
      *(_QWORD *)(result + 8) = 0;
      *(_QWORD *)(result + 16) = (unint64_t)(((-a2 >> 2) & 3) - 4 * a2) << 60;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for CKSecretSharing.ShamirShare()
{
  return &type metadata for CKSecretSharing.ShamirShare;
}

ValueMetadata *type metadata accessor for CKSecretSharing.ShamirShareGenerator()
{
  return &type metadata for CKSecretSharing.ShamirShareGenerator;
}

ValueMetadata *type metadata accessor for CKSecretSharing.ShamirShareSecretReconstructor()
{
  return &type metadata for CKSecretSharing.ShamirShareSecretReconstructor;
}

void *sub_1D2C5ADAC(void *a1, size_t a2)
{
  uint64_t v2;

  return sub_1D2C7D4E0(a1, a2, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), *(_QWORD *)(v2 + 32), *(void **)(v2 + 40));
}

uint64_t sub_1D2C5ADC8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_1D2C7D530(a1, a2, *(uint64_t **)(v2 + 16), *(uint64_t (**)(uint64_t, uint64_t))(v2 + 24));
}

unint64_t sub_1D2C5ADE4()
{
  unint64_t result;

  result = qword_1EFC9FC90;
  if (!qword_1EFC9FC90)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1EFC9FC90);
  }
  return result;
}

void *sub_1D2C5AE20(void *__src, size_t __len)
{
  uint64_t v2;

  if (__src)
  {
    if ((__len & 0x8000000000000000) != 0)
      __break(1u);
    else
      return memmove(*(void **)(v2 + 40), __src, __len);
  }
  return __src;
}

uint64_t sub_1D2C5AE40(unint64_t *a1, uint64_t (*a2)(uint64_t), uint64_t a3)
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = a2(255);
    result = MEMORY[0x1D8245F38](a3, v6);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1D2C5AE80(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFC9FC98);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void sub_1D2C5AEC0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  BOOL v5;
  uint64_t v6;
  double v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v13;
  _QWORD v14[2];

  if (a1 < 0 || (v3 = a2 - 1, a2 < 1))
  {
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  if (a1 <= 1)
    v4 = 1;
  else
    v4 = a1;
  v5 = __OFADD__(v4, 1);
  v6 = v4 + 1;
  if (v5)
    goto LABEL_27;
  v7 = ceil(log2((double)v6) * 0.125);
  if ((~*(_QWORD *)&v7 & 0x7FF0000000000000) == 0)
  {
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  if (v7 <= -9.22337204e18)
  {
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  if (v7 >= 9.22337204e18)
  {
LABEL_30:
    __break(1u);
    goto LABEL_31;
  }
  v8 = (uint64_t)v7;
  if ((uint64_t)v7 > a2)
  {
LABEL_31:
    __break(1u);
    goto LABEL_32;
  }
  v14[0] = sub_1D2C677A0(a2);
  v14[1] = v9;
  sub_1D2C86984((uint64_t)v14);
  if (__OFSUB__(a2, v8))
  {
LABEL_32:
    __break(1u);
    goto LABEL_33;
  }
  if (a2 - v8 < a2)
  {
    v10 = -v8;
    while (1)
    {
      v11 = a2 + v10;
      if (__OFSUB__(v3, a2 + v10))
        break;
      if ((unint64_t)(v3 - (a2 + v10) - 0x1000000000000000) >> 61 != 7)
        goto LABEL_25;
      v13 = __CFADD__(v10++, 1);
      sub_1D2CAA93C();
      if (v13)
        return;
      if (__OFADD__(v11, 1))
      {
        __break(1u);
        return;
      }
    }
    __break(1u);
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
LABEL_33:
  __break(1u);
}

void sub_1D2C5B054(uint64_t a1@<X0>, void *a2@<X1>, void *a3@<X2>, void *a4@<X3>, void *a5@<X4>, _QWORD *a6@<X8>)
{
  id v11;
  id v12;
  id v13;
  id v14;
  id v15;
  void *v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  void *v23;
  void *v24;
  id v25;
  id v26;
  id v27;
  id v28;
  id v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  void *v35;
  id v36;
  uint64_t v38;

  sub_1D2CAAD50();
  sub_1D2C5AE40((unint64_t *)&qword_1ED985C78, (uint64_t (*)(uint64_t))MEMORY[0x1E0CA9860], MEMORY[0x1E0CA9858]);
  v36 = a2;
  v11 = a3;
  v12 = a4;
  v13 = a5;
  sub_1D2CAAC00();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED985DB0);
  swift_dynamicCast();
  v14 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0D1BD70]), sel_initWithGeneratorForCP_, v38);
  v15 = objc_msgSend(v14, sel_serializedPublicKey_, 1);
  if (v15)
  {
    v16 = v15;
    v34 = v11;
    v35 = v12;
    v17 = sub_1D2CAA96C();
    v19 = v18;

    v20 = sub_1D2C5D050(0xD000000000000023, 0x80000001D2CB1120);
    v22 = v21;
    sub_1D2C92114(v17, v19, v20, v21);
    v24 = v23;
    sub_1D2C45258(v20, v22);
    sub_1D2C45258(v17, v19);
    v25 = sub_1D2C831C0((uint64_t)v36, v14);
    v26 = sub_1D2C831C0((uint64_t)v13, v24);
    v27 = sub_1D2C92250(v25, (uint64_t)v26);

    v28 = sub_1D2C831C0((uint64_t)v34, v24);
    v29 = sub_1D2C831C0((uint64_t)v35, v24);
    sub_1D2C678EC(v27, v28, v29);
    v33 = v30;
    v32 = v31;

    *a6 = a1;
    a6[1] = v36;
    a6[2] = v34;
    a6[3] = v35;
    a6[4] = v13;
    a6[5] = v27;
    a6[6] = v28;
    a6[7] = v29;
    a6[8] = v14;
    a6[9] = v24;
    a6[10] = v33;
    a6[11] = v32;
  }
  else
  {
    __break(1u);
    swift_unexpectedError();
    __break(1u);
  }
}

void sub_1D2C5B2CC(id a1@<X0>, void *a2@<X1>, void *a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  _QWORD *v5;
  uint64_t v6;
  void *v11;
  void *v12;
  char v13;
  id v14;
  id v15;
  id v16;
  id v17;
  _BYTE *v18;
  void *v19;
  id v20;
  void *v21;
  id v22;
  void *v23;
  void *v24;
  id v25;
  void *v26;
  void *v27;
  id v28;
  void *v29;
  id v30;
  unint64_t v31;
  uint64_t v32;
  id v33;
  id v34;
  id v35;

  v12 = (void *)v5[8];
  v11 = (void *)v5[9];
  v13 = sub_1D2C5B48C(v12, v11, a1, a2, a3, a4);
  if (!v6)
  {
    if ((v13 & 1) != 0)
    {
      v27 = (void *)v5[4];
      v29 = (void *)v5[1];
      v19 = (void *)v5[5];
      v21 = (void *)v5[3];
      v23 = (void *)v5[6];
      v24 = (void *)v5[2];
      v26 = (void *)v5[7];
      v32 = v5[10];
      v31 = v5[11];
      v35 = a1;
      v34 = a2;
      v33 = a3;
      sub_1D2CAAF0C();
      v30 = v29;
      v28 = v27;
      v25 = v24;
      v22 = v21;
      v20 = v19;
      v14 = v23;
      v15 = v26;
      v16 = v12;
      v17 = v11;
      sub_1D2C45028(v32, v31);
      sub_1D2C5B914(v35, v34, v33, v30, v28, v25, v22, a5, v20, v14, v15, v16, v17, v32, v31);
    }
    else
    {
      sub_1D2C6B8A4();
      swift_allocError();
      *v18 = 0;
      swift_willThrow();
    }
  }
}

uint64_t sub_1D2C5B48C(void *a1, void *a2, id a3, void *a4, void *a5, uint64_t a6)
{
  uint64_t v6;
  __int128 *v13;
  id v14;
  id v15;
  id v16;
  id v17;
  unsigned __int8 v18;
  id v19;
  id v20;
  id v21;
  id v22;
  id v23;
  id v25;
  id v26;
  id v27;
  id v28;
  unsigned __int8 v29;
  char *v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  char *v35;
  unint64_t v36;
  char *v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  char *v42;
  unint64_t v43;
  unint64_t v44;
  char *v45;
  char v46;
  unint64_t v47;
  char *v48;
  unint64_t v49;
  char *v50;
  char *v51;
  char *v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  __int128 v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;

  if ((objc_msgSend(a3, sel_isEqual_, a1) & 1) != 0
    || (objc_msgSend(a3, sel_isEqual_, a2) & 1) != 0)
  {
    LOBYTE(v13) = 0;
    return v13 & 1;
  }
  v14 = a3;
  v15 = a4;
  v16 = a5;
  sub_1D2CAAF0C();
  v17 = sub_1D2C92250(v14, (uint64_t)v14);
  v18 = objc_msgSend(v14, sel_isEqual_, v17);
  swift_bridgeObjectRelease();

  if ((v18 & 1) != 0)
  {
LABEL_8:
    LOBYTE(v13) = 0;
    return v13 & 1;
  }
  v19 = v14;
  v20 = v15;
  v21 = v16;
  sub_1D2CAAF0C();
  v22 = a1;
  v23 = a2;
  if ((objc_msgSend(v20, sel_isEqual_, v22) & 1) != 0
    || objc_msgSend(v20, sel_isEqual_, v23))
  {

    swift_bridgeObjectRelease();
    goto LABEL_8;
  }
  v25 = v19;
  v26 = v20;
  v27 = v21;
  sub_1D2CAAF0C();
  v28 = sub_1D2C92250(v26, (uint64_t)v26);
  v29 = objc_msgSend(v26, sel_isEqual_, v28);

  swift_bridgeObjectRelease_n();
  if ((v29 & 1) != 0)
    goto LABEL_8;
  *(_QWORD *)&v57 = 0xD000000000000029;
  *((_QWORD *)&v57 + 1) = 0x80000001D2CB10F0;
  *((_QWORD *)&v58 + 1) = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)&v59 = MEMORY[0x1E0DEE9D8];
  *((_QWORD *)&v59 + 1) = MEMORY[0x1E0DEE9D8];
  v30 = sub_1D2C71850(0, 1, 1, MEMORY[0x1E0DEE9D8]);
  v31 = *((_QWORD *)v30 + 2);
  v32 = *((_QWORD *)v30 + 3);
  v33 = v32 >> 1;
  v34 = v31 + 1;
  if (v32 >> 1 <= v31)
  {
    v47 = *((_QWORD *)v30 + 2);
    v48 = sub_1D2C71850((char *)(v32 > 1), v31 + 1, 1, v30);
    v31 = v47;
    v30 = v48;
    v32 = *((_QWORD *)v48 + 3);
    v33 = v32 >> 1;
  }
  *((_QWORD *)v30 + 2) = v34;
  v35 = &v30[16 * v31];
  *((_QWORD *)v35 + 4) = 12653;
  *((_QWORD *)v35 + 5) = 0xE200000000000000;
  v36 = v31 + 2;
  if (v33 <= v34)
  {
    v54 = v31 + 2;
    v49 = v31;
    v50 = sub_1D2C71850((char *)(v32 > 1), v31 + 2, 1, v30);
    v36 = v54;
    v31 = v49;
    v30 = v50;
  }
  *((_QWORD *)v30 + 2) = v36;
  v37 = &v30[16 * v34];
  *((_QWORD *)v37 + 4) = 12909;
  *((_QWORD *)v37 + 5) = 0xE200000000000000;
  *(_QWORD *)&v58 = v30;
  v39 = *((_QWORD *)v30 + 2);
  v38 = *((_QWORD *)v30 + 3);
  v40 = v39 - 1;
  v41 = v38 >> 1;
  if (v38 >> 1 <= v39)
  {
    v55 = v31;
    v51 = sub_1D2C71850((char *)(v38 > 1), v39 + 1, 1, v30);
    v40 = v39 - 1;
    v31 = v55;
    v30 = v51;
    v38 = *((_QWORD *)v51 + 3);
    v41 = v38 >> 1;
  }
  *((_QWORD *)v30 + 2) = v39 + 1;
  v42 = &v30[16 * v39];
  *((_QWORD *)v42 + 4) = 12658;
  *((_QWORD *)v42 + 5) = 0xE200000000000000;
  *(_QWORD *)&v58 = v30;
  v43 = *((_QWORD *)v30 + 2);
  v44 = v43 + 1;
  if (v41 <= v43)
  {
    v56 = v31;
    v53 = v40;
    v52 = sub_1D2C71850((char *)(v38 > 1), v43 + 1, 1, v30);
    v40 = v53;
    v44 = v43 + 1;
    v31 = v56;
    v30 = v52;
  }
  *((_QWORD *)v30 + 2) = v44;
  v45 = &v30[16 * v43];
  *((_QWORD *)v45 + 4) = 12914;
  *((_QWORD *)v45 + 5) = 0xE200000000000000;
  *(_QWORD *)&v58 = v30;
  sub_1D2C5EB50((uint64_t)&v57, v22, v23, v25, v26, v31, v40, v43 - 1, *((_QWORD *)v30 + 2) - 1);
  v60 = v57;
  v61 = v58;
  v62 = v59;
  v13 = &v60;
  v46 = sub_1D2C5C6A4((uint64_t)v27, a6);
  if (v6)
  {
    v68 = v60;
    sub_1D2C6B6F0((uint64_t)&v68);
    v69 = v61;
    sub_1D2C6B978((uint64_t)&v69);
    v70 = *((_QWORD *)&v61 + 1);
    sub_1D2C6B978((uint64_t)&v70);
    v71 = v62;
    sub_1D2C6B978((uint64_t)&v71);
    v72 = *((_QWORD *)&v62 + 1);
    sub_1D2C6B978((uint64_t)&v72);
  }
  else
  {
    LOBYTE(v13) = v46;
    v63 = v60;
    sub_1D2C6B6F0((uint64_t)&v63);
    v64 = v61;
    sub_1D2C6B978((uint64_t)&v64);
    v65 = *((_QWORD *)&v61 + 1);
    sub_1D2C6B978((uint64_t)&v65);
    v66 = v62;
    sub_1D2C6B978((uint64_t)&v66);
    v67 = *((_QWORD *)&v62 + 1);
    sub_1D2C6B978((uint64_t)&v67);
  }
  return v13 & 1;
}

void sub_1D2C5B914(void *a1@<X0>, void *a2@<X1>, void *a3@<X2>, void *a4@<X4>, void *a5@<X5>, void *a6@<X6>, void *a7@<X7>, _QWORD *a8@<X8>, void *a9, void *a10, void *a11, void *a12, void *a13, uint64_t a14, unint64_t a15)
{
  id v18;
  void *v19;
  id v20;
  id v21;
  id v22;
  id v23;
  id v24;
  id v25;
  char *v26;
  unint64_t v27;
  unint64_t v28;
  char *v29;
  id v30;
  unint64_t v31;
  unint64_t v32;
  char *v33;
  id v34;
  unint64_t v35;
  unint64_t v36;
  char *v37;
  id v38;
  unint64_t v39;
  unint64_t v40;
  char *v41;
  id v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  char *v46;
  id v47;
  id v48;
  unint64_t v49;
  unint64_t v50;
  char *v51;
  id v52;
  uint64_t v53;
  id v54;
  unint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  id v60;
  uint64_t v61;
  uint64_t *v62;
  uint64_t v63;
  void *v65;
  void *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  id v71;
  id v72;
  id v73;
  void *v74;
  id v75;
  id v76;
  void *v77;
  void *v78;
  int v81[2];
  uint64_t v82;
  int v83[2];
  uint64_t v84;
  uint64_t *v85;
  void *v87;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  uint64_t v92;
  _OWORD v93[3];
  uint64_t v94;
  uint64_t v95;

  sub_1D2CAAD50();
  sub_1D2C5AE40((unint64_t *)&qword_1ED985C78, (uint64_t (*)(uint64_t))MEMORY[0x1E0CA9860], MEMORY[0x1E0CA9858]);
  sub_1D2CAAC00();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED985DB0);
  swift_dynamicCast();
  v18 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0D1BD78]), sel_initWithRandomScalarInGroup_, v95);
  if (v18)
  {
    v19 = v18;
    v76 = sub_1D2C831C0((uint64_t)v18, a12);
    v20 = sub_1D2C830A8(v19, (uint64_t)a5);
    v75 = sub_1D2C831C0((uint64_t)v20, a13);

    v73 = sub_1D2C831C0((uint64_t)v19, a10);
    v72 = sub_1D2C831C0((uint64_t)v19, a11);
    v21 = sub_1D2C831C0((uint64_t)v19, a13);
    v78 = a1;
    v22 = sub_1D2C831C0((uint64_t)a6, a1);
    v23 = sub_1D2C92250(a9, (uint64_t)v22);

    v77 = a2;
    v24 = sub_1D2C831C0((uint64_t)a7, a2);
    v25 = sub_1D2C92250(v23, (uint64_t)v24);

    v71 = sub_1D2C831C0((uint64_t)v19, v25);
    *(_QWORD *)&v89 = 0xD00000000000002ALL;
    *((_QWORD *)&v89 + 1) = 0x80000001D2CB1070;
    *(_QWORD *)&v90 = MEMORY[0x1E0DEE9D8];
    *(_QWORD *)&v91 = MEMORY[0x1E0DEE9D8];
    *((_QWORD *)&v91 + 1) = MEMORY[0x1E0DEE9D8];
    v92 = MEMORY[0x1E0DEE9D8];
    v26 = sub_1D2C71850(0, 1, 1, MEMORY[0x1E0DEE9D8]);
    v28 = *((_QWORD *)v26 + 2);
    v27 = *((_QWORD *)v26 + 3);
    if (v28 >= v27 >> 1)
      v26 = sub_1D2C71850((char *)(v27 > 1), v28 + 1, 1, v26);
    v74 = v21;
    *((_QWORD *)v26 + 2) = v28 + 1;
    v29 = &v26[16 * v28];
    *((_QWORD *)v29 + 4) = 12408;
    *((_QWORD *)v29 + 5) = 0xE200000000000000;
    *((_QWORD *)&v90 + 1) = v26;
    v30 = a4;
    MEMORY[0x1D824529C]();
    if (*(_QWORD *)(v90 + 16) >= *(_QWORD *)(v90 + 24) >> 1)
      sub_1D2CAAF24();
    v66 = v30;
    sub_1D2CAAF3C();
    sub_1D2CAAF18();
    v68 = *(_QWORD *)(v90 + 16);
    v32 = *((_QWORD *)v26 + 2);
    v31 = *((_QWORD *)v26 + 3);
    if (v32 >= v31 >> 1)
      v26 = sub_1D2C71850((char *)(v31 > 1), v32 + 1, 1, v26);
    *((_QWORD *)v26 + 2) = v32 + 1;
    v33 = &v26[16 * v32];
    *((_QWORD *)v33 + 4) = 12664;
    *((_QWORD *)v33 + 5) = 0xE200000000000000;
    *((_QWORD *)&v90 + 1) = v26;
    v34 = a6;
    MEMORY[0x1D824529C]();
    if (*(_QWORD *)(v90 + 16) >= *(_QWORD *)(v90 + 24) >> 1)
      sub_1D2CAAF24();
    sub_1D2CAAF3C();
    sub_1D2CAAF18();
    *(_QWORD *)v81 = *(_QWORD *)(v90 + 16);
    v36 = *((_QWORD *)v26 + 2);
    v35 = *((_QWORD *)v26 + 3);
    if (v36 >= v35 >> 1)
      v26 = sub_1D2C71850((char *)(v35 > 1), v36 + 1, 1, v26);
    *((_QWORD *)v26 + 2) = v36 + 1;
    v37 = &v26[16 * v36];
    *((_QWORD *)v37 + 4) = 12920;
    *((_QWORD *)v37 + 5) = 0xE200000000000000;
    *((_QWORD *)&v90 + 1) = v26;
    v38 = a7;
    MEMORY[0x1D824529C]();
    if (*(_QWORD *)(v90 + 16) >= *(_QWORD *)(v90 + 24) >> 1)
      sub_1D2CAAF24();
    v87 = v38;
    sub_1D2CAAF3C();
    sub_1D2CAAF18();
    v67 = *(_QWORD *)(v90 + 16);
    v40 = *((_QWORD *)v26 + 2);
    v39 = *((_QWORD *)v26 + 3);
    if (v40 >= v39 >> 1)
      v26 = sub_1D2C71850((char *)(v39 > 1), v40 + 1, 1, v26);
    *((_QWORD *)v26 + 2) = v40 + 1;
    v41 = &v26[16 * v40];
    *((_QWORD *)v41 + 4) = 0x69646E696C423078;
    *((_QWORD *)v41 + 5) = 0xEA0000000000676ELL;
    *((_QWORD *)&v90 + 1) = v26;
    v42 = a5;
    MEMORY[0x1D824529C]();
    if (*(_QWORD *)(v90 + 16) >= *(_QWORD *)(v90 + 24) >> 1)
      sub_1D2CAAF24();
    v65 = v42;
    sub_1D2CAAF3C();
    sub_1D2CAAF18();
    v43 = *(_QWORD *)(v90 + 16);
    v45 = *((_QWORD *)v26 + 2);
    v44 = *((_QWORD *)v26 + 3);
    if (v45 >= v44 >> 1)
      v26 = sub_1D2C71850((char *)(v44 > 1), v45 + 1, 1, v26);
    *((_QWORD *)v26 + 2) = v45 + 1;
    v46 = &v26[16 * v45];
    *((_QWORD *)v46 + 4) = 98;
    *((_QWORD *)v46 + 5) = 0xE100000000000000;
    *((_QWORD *)&v90 + 1) = v26;
    v47 = v19;
    MEMORY[0x1D824529C]();
    if (*(_QWORD *)(v90 + 16) >= *(_QWORD *)(v90 + 24) >> 1)
      sub_1D2CAAF24();
    sub_1D2CAAF3C();
    sub_1D2CAAF18();
    v70 = *(_QWORD *)(v90 + 16);
    v48 = sub_1D2C830A8(v47, (uint64_t)v34);
    v50 = *((_QWORD *)v26 + 2);
    v49 = *((_QWORD *)v26 + 3);
    if (v50 >= v49 >> 1)
      v26 = sub_1D2C71850((char *)(v49 > 1), v50 + 1, 1, v26);
    *((_QWORD *)v26 + 2) = v50 + 1;
    v51 = &v26[16 * v50];
    *((_QWORD *)v51 + 4) = 12660;
    *((_QWORD *)v51 + 5) = 0xE200000000000000;
    *((_QWORD *)&v90 + 1) = v26;
    v52 = v48;
    MEMORY[0x1D824529C]();
    if (*(_QWORD *)(v90 + 16) >= *(_QWORD *)(v90 + 24) >> 1)
      sub_1D2CAAF24();
    sub_1D2CAAF3C();
    sub_1D2CAAF18();
    v53 = *(_QWORD *)(v90 + 16);

    v54 = sub_1D2C830A8(v47, (uint64_t)v87);
    v56 = *((_QWORD *)v26 + 2);
    v55 = *((_QWORD *)v26 + 3);
    if (v56 >= v55 >> 1)
      v26 = sub_1D2C71850((char *)(v55 > 1), v56 + 1, 1, v26);
    v69 = v68 - 1;
    v82 = *(_QWORD *)v81 - 1;
    v57 = v43 - 1;
    v58 = v53 - 1;
    *((_QWORD *)v26 + 2) = v56 + 1;
    v59 = &v26[16 * v56];
    *((_QWORD *)v59 + 4) = 12916;
    *((_QWORD *)v59 + 5) = 0xE200000000000000;
    *((_QWORD *)&v90 + 1) = v26;
    v60 = v54;
    MEMORY[0x1D824529C]();
    if (*(_QWORD *)(v90 + 16) >= *(_QWORD *)(v90 + 24) >> 1)
      sub_1D2CAAF24();
    sub_1D2CAAF3C();
    sub_1D2CAAF18();
    v61 = *(_QWORD *)(v90 + 16);

    sub_1D2C67DD4((uint64_t)&v89, v78, v77, a12, a13, v76, v71, a9, a10, a11, v75, v73, v72, v74, v69, v57, v82, v67 - 1, v70 - 1,
      v58,
      v61 - 1);
    v93[0] = v89;
    v93[1] = v90;
    v93[2] = v91;
    v94 = v92;
    v62 = sub_1D2C5C534();
    if (v84)
    {
      sub_1D2C6B8E8((uint64_t)v93);
      sub_1D2C45258(a14, a15);

      swift_bridgeObjectRelease();
    }
    else
    {
      *(_QWORD *)v83 = v63;
      v85 = v62;
      sub_1D2C6B8E8((uint64_t)v93);

      swift_bridgeObjectRelease();
      *a8 = v76;
      a8[1] = v71;
      a8[2] = a9;
      a8[3] = a10;
      a8[4] = a11;
      a8[5] = v75;
      a8[6] = v73;
      a8[7] = v72;
      a8[8] = v74;
      a8[9] = a14;
      a8[11] = v85;
      a8[12] = *(_QWORD *)v83;
      a8[10] = a15;
    }
  }
  else
  {
    __break(1u);
  }
}

uint64_t sub_1D2C5C1C4(uint64_t a1, uint64_t a2, void *a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7, void *a8, void *a9)
{
  uint64_t v9;
  uint64_t v10;
  char v17;
  void *v18;
  id v19;
  unsigned __int8 v20;
  char v21;
  id v23;
  id v24;
  id v25;
  id v26;
  id v27;
  id v28;
  void *v29;
  char *v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  char *v35;
  char *v36;
  unint64_t v37;
  unint64_t v38;
  char *v39;
  id v40;
  void *v41;
  void *v42;
  void *v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  __int128 v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;

  sub_1D2C59C44(*(_QWORD *)(v9 + 24), *(_QWORD *)(v9 + 32));
  if ((v17 & 1) == 0)
    goto LABEL_3;
  v42 = a8;
  v43 = a4;
  v18 = *(void **)v9;
  sub_1D2C6B618(v9);
  v19 = sub_1D2C92250(v18, (uint64_t)v18);
  v20 = objc_msgSend(v19, sel_isEqual_, v18);

  sub_1D2C6B684(v9);
  if ((v20 & 1) == 0)
  {
    v23 = sub_1D2C831C0(a1, v18);
    v41 = *(void **)(v9 + 16);
    v24 = sub_1D2C831C0(a2, v41);
    v25 = sub_1D2C92250(v23, (uint64_t)v24);

    v26 = sub_1D2C830A8(a3, a5);
    v27 = sub_1D2C831C0((uint64_t)v26, v18);

    v28 = sub_1D2C92250(v25, (uint64_t)v27);
    v29 = *(void **)(v9 + 8);
    v40 = sub_1D2C65044(v28, (uint64_t)v29);

    *(_QWORD *)&v44 = 0xD000000000000025;
    *((_QWORD *)&v44 + 1) = 0x80000001D2CB0F20;
    *((_QWORD *)&v45 + 1) = MEMORY[0x1E0DEE9D8];
    *(_QWORD *)&v46 = MEMORY[0x1E0DEE9D8];
    *((_QWORD *)&v46 + 1) = MEMORY[0x1E0DEE9D8];
    v30 = sub_1D2C71850(0, 1, 1, MEMORY[0x1E0DEE9D8]);
    v32 = *((_QWORD *)v30 + 2);
    v31 = *((_QWORD *)v30 + 3);
    v33 = v31 >> 1;
    v34 = v32 + 1;
    if (v31 >> 1 <= v32)
    {
      v30 = sub_1D2C71850((char *)(v31 > 1), v32 + 1, 1, v30);
      v31 = *((_QWORD *)v30 + 3);
      v33 = v31 >> 1;
    }
    *((_QWORD *)v30 + 2) = v34;
    v35 = &v30[16 * v32];
    *((_QWORD *)v35 + 4) = 12653;
    *((_QWORD *)v35 + 5) = 0xE200000000000000;
    if (v33 <= v34)
      v30 = sub_1D2C71850((char *)(v31 > 1), v32 + 2, 1, v30);
    *((_QWORD *)v30 + 2) = v32 + 2;
    v36 = &v30[16 * v34];
    *((_QWORD *)v36 + 4) = 122;
    *((_QWORD *)v36 + 5) = 0xE100000000000000;
    *(_QWORD *)&v45 = v30;
    v38 = *((_QWORD *)v30 + 2);
    v37 = *((_QWORD *)v30 + 3);
    if (v38 >= v37 >> 1)
      v30 = sub_1D2C71850((char *)(v37 > 1), v38 + 1, 1, v30);
    *((_QWORD *)v30 + 2) = v38 + 1;
    v39 = &v30[16 * v38];
    *((_QWORD *)v39 + 4) = 29229;
    *((_QWORD *)v39 + 5) = 0xE200000000000000;
    *(_QWORD *)&v45 = v30;
    sub_1D2C64AEC((uint64_t)&v44, v42, a9, v18, v29, v41, v40, v43, v32, v38 - 1, *((_QWORD *)v30 + 2) - 1);
    v47 = v44;
    v48 = v45;
    v49 = v46;
    v21 = sub_1D2C5C6A4(*(_QWORD *)(v9 + 40), *(_QWORD *)(v9 + 48));

    if (v10)
    {
      v55 = v47;
      sub_1D2C6B6F0((uint64_t)&v55);
      v56 = v48;
      sub_1D2C6B978((uint64_t)&v56);
      v57 = *((_QWORD *)&v48 + 1);
      sub_1D2C6B978((uint64_t)&v57);
      v58 = v49;
      sub_1D2C6B978((uint64_t)&v58);
      v59 = *((_QWORD *)&v49 + 1);
      sub_1D2C6B978((uint64_t)&v59);
    }
    else
    {
      v50 = v47;
      sub_1D2C6B6F0((uint64_t)&v50);
      v51 = v48;
      sub_1D2C6B978((uint64_t)&v51);
      v52 = *((_QWORD *)&v48 + 1);
      sub_1D2C6B978((uint64_t)&v52);
      v53 = v49;
      sub_1D2C6B978((uint64_t)&v53);
      v54 = *((_QWORD *)&v49 + 1);
      sub_1D2C6B978((uint64_t)&v54);
    }
  }
  else
  {
LABEL_3:
    v21 = 0;
  }
  return v21 & 1;
}

uint64_t *sub_1D2C5C534()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t *result;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;

  v1 = *(_QWORD *)(*(_QWORD *)(v0 + 16) + 16);
  v2 = MEMORY[0x1E0DEE9D8];
  if (v1)
  {
    v6 = MEMORY[0x1E0DEE9D8];
    sub_1D2CAB020();
    sub_1D2CAAD50();
    sub_1D2C5AE40((unint64_t *)&qword_1ED985C78, (uint64_t (*)(uint64_t))MEMORY[0x1E0CA9860], MEMORY[0x1E0CA9858]);
    while (1)
    {
      sub_1D2CAAC00();
      __swift_instantiateConcreteTypeFromMangledName(&qword_1ED985DB0);
      swift_dynamicCast();
      result = (uint64_t *)objc_msgSend(objc_allocWithZone(MEMORY[0x1E0D1BD78]), sel_initWithRandomScalarInGroup_, v5);
      if (!result)
        break;
      sub_1D2CAB008();
      sub_1D2CAB02C();
      sub_1D2CAB038();
      sub_1D2CAB014();
      if (!--v1)
      {
        v2 = v6;
        goto LABEL_6;
      }
    }
    __break(1u);
  }
  else
  {
LABEL_6:
    v4 = sub_1D2C654A0(v2);
    swift_bridgeObjectRelease();
    return v4;
  }
  return result;
}

uint64_t sub_1D2C5C6A4(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v8;
  _QWORD *v9;
  unint64_t v10;
  _QWORD *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  _QWORD *v22;
  id v23;
  uint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  void *v27;
  void *v28;
  id v29;
  id v30;
  uint64_t v31;
  uint64_t v32;
  id v33;
  uint64_t v34;
  void *v35;
  id v36;
  id v37;
  id v38;
  unint64_t *v39;
  unint64_t v40;
  id v41;
  uint64_t *v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  char *v46;
  unint64_t v47;
  unint64_t v48;
  char *v49;
  char *v50;
  _BYTE *v51;
  uint64_t v52;
  void *v53;
  _BYTE *v54;
  uint64_t i;
  uint64_t v57;
  int v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t *v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  _QWORD *v70;
  id v71;
  _QWORD *v72;
  uint64_t v73;
  int v74;
  uint64_t v75;
  int v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  _QWORD v80[3];

  v80[1] = *MEMORY[0x1E0C80C00];
  v5 = v2[3];
  v4 = v2[4];
  v6 = *(_QWORD *)(v5 + 16);
  if (v6 != *(_QWORD *)(v4 + 16))
  {
    sub_1D2C6B718();
    swift_allocError();
    *v51 = 2;
    goto LABEL_46;
  }
  v8 = MEMORY[0x1E0DEE9D8];
  v9 = (_QWORD *)v2[5];
  v79 = MEMORY[0x1E0DEE9D8];
  v80[0] = v9;
  v69 = v9[2];
  if (v69)
  {
    v10 = v9[4];
    v70 = v9 + 4;
    if (v10 < v6)
    {
      v61 = v2;
      v62 = v3;
      v12 = (_QWORD *)v9[5];
      v13 = v4;
      v14 = v10;
      sub_1D2C6B75C((uint64_t)v80);
      v15 = v14;
      v59 = v13;
      v60 = v5;
      v16 = v5 + 32;
      v73 = a2 + 32;
      v63 = v13 + 32;
      v64 = a1;
      v17 = v12;
      v18 = 1;
      v2 = (uint64_t *)v8;
      while (1)
      {
        v72 = v17;
        v19 = v17[2];
        if (v19)
        {
          if (v72[5] >= v6)
            goto LABEL_44;
          v20 = v19 - 1;
          if (v20)
          {
            if (v72[7] >= v6)
              goto LABEL_44;
            v39 = v72 + 9;
            while (--v20)
            {
              v40 = *v39;
              v39 += 2;
              if (v40 >= v6)
                goto LABEL_44;
            }
          }
        }
        if (v15 >= (uint64_t)v6)
          goto LABEL_53;
        v67 = v18;
        v68 = (char *)v2;
        v66 = v15;
        v21 = *(void **)(v16 + 8 * v15);
        LODWORD(v75) = 0;
        v22 = v72;
        sub_1D2CAAF0C();
        v23 = v21;
        v71 = objc_msgSend(v23, sel_multiply_corecryptoError_, a1, &v75);
        if (!v71)
          goto LABEL_58;

        v65 = &v57;
        v24 = v22[2];
        if (v24)
        {
          v75 = v8;
          sub_1D2CAB020();
          v25 = v22 + 5;
          while (1)
          {
            v26 = *(v25 - 1);
            if ((v26 & 0x8000000000000000) != 0)
              break;
            if (v26 >= *(_QWORD *)(a2 + 16))
              goto LABEL_51;
            if (*v25 >= v6)
              goto LABEL_52;
            v27 = *(void **)(v73 + 8 * v26);
            v28 = *(void **)(v16 + 8 * *v25);
            v76 = 0;
            v29 = v27;
            v30 = v28;
            if (!objc_msgSend(v30, sel_multiply_corecryptoError_, v29, &v76))
            {
              v77 = 0;
              v78 = 0xE000000000000000;
              sub_1D2CAAFC0();
              sub_1D2CAAE70();
              v74 = v76;
              goto LABEL_55;
            }
            v25 += 2;

            sub_1D2CAB008();
            sub_1D2CAB02C();
            sub_1D2CAB038();
            sub_1D2CAB014();
            if (!--v24)
            {
              v31 = v75;
              swift_bridgeObjectRelease();
              goto LABEL_19;
            }
          }
          __break(1u);
LABEL_51:
          __break(1u);
LABEL_52:
          __break(1u);
LABEL_53:
          __break(1u);
        }
        swift_bridgeObjectRelease();
        v31 = v8;
LABEL_19:
        v32 = *(_QWORD *)(v31 + 16);
        if (v32)
        {
          v33 = v71;
          sub_1D2CAAF0C();
          v34 = 0;
          do
          {
            v35 = *(void **)(v31 + 8 * v34 + 32);
            LODWORD(v75) = 0;
            v36 = v35;
            v37 = objc_msgSend(v33, sel_add_corecryptoError_, v36, &v75);
            if (!v37)
            {
              v77 = 0;
              v78 = 0xE000000000000000;
              sub_1D2CAAFC0();
              sub_1D2CAAE70();
              v76 = v75;
              sub_1D2CAB0B0();
              sub_1D2CAAE70();
              swift_bridgeObjectRelease();
              v58 = 0;
              for (i = 75; ; i = 66)
              {
                v57 = i;
                sub_1D2CAB05C();
                __break(1u);
LABEL_58:
                v77 = 0;
                v78 = 0xE000000000000000;
                sub_1D2CAAFC0();
                sub_1D2CAAE70();
                v76 = v75;
LABEL_55:
                sub_1D2CAB0B0();
                sub_1D2CAAE70();
                swift_bridgeObjectRelease();
                v58 = 0;
              }
            }
            v38 = v37;
            ++v34;

            v33 = v38;
          }
          while (v32 != v34);
          swift_bridgeObjectRelease();
        }
        else
        {
          v38 = v71;
        }
        swift_bridgeObjectRelease();
        v41 = v38;
        MEMORY[0x1D824529C]();
        if (*(_QWORD *)(v79 + 16) >= *(_QWORD *)(v79 + 24) >> 1)
          sub_1D2CAAF24();
        sub_1D2CAAF3C();
        sub_1D2CAAF18();
        v42 = (uint64_t *)(v63 + 16 * v66);
        v43 = v42[1];
        v77 = *v42;
        v78 = v43;
        swift_bridgeObjectRetain_n();
        sub_1D2CAAE70();
        swift_bridgeObjectRelease();
        v44 = v77;
        v45 = v78;
        v46 = v68;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v46 = sub_1D2C71850(0, *((_QWORD *)v46 + 2) + 1, 1, v46);
        v48 = *((_QWORD *)v46 + 2);
        v47 = *((_QWORD *)v46 + 3);
        v49 = v46;
        if (v48 >= v47 >> 1)
          v49 = sub_1D2C71850((char *)(v47 > 1), v48 + 1, 1, v46);
        *((_QWORD *)v49 + 2) = v48 + 1;
        v2 = (uint64_t *)v49;
        v50 = &v49[16 * v48];
        *((_QWORD *)v50 + 4) = v44;
        *((_QWORD *)v50 + 5) = v45;

        if (v67 == v69)
          break;
        v15 = v70[2 * v67];
        a1 = v64;
        v8 = MEMORY[0x1E0DEE9D8];
        if ((v15 & 0x8000000000000000) == 0)
        {
          v18 = v67 + 1;
          v17 = (_QWORD *)v70[2 * v67 + 1];
          if (v15 < (uint64_t)v6)
            continue;
        }
LABEL_44:
        sub_1D2C6B978((uint64_t)v80);
        swift_bridgeObjectRelease();
        goto LABEL_45;
      }
      sub_1D2C6B978((uint64_t)v80);
      v8 = v79;
      a1 = v64;
      v52 = (uint64_t)v2;
      v2 = v61;
      v3 = v62;
      v4 = v59;
      v5 = v60;
      goto LABEL_42;
    }
LABEL_45:
    swift_bridgeObjectRelease();
    sub_1D2C6B718();
    swift_allocError();
    *v54 = 0;
LABEL_46:
    swift_willThrow();
    return v2 & 1;
  }
  v52 = MEMORY[0x1E0DEE9D8];
LABEL_42:
  v53 = (void *)sub_1D2C63E4C(*v2, v2[1], v5, v4, v8, v52, v2[2]);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (!v3)
  {
    LOBYTE(v2) = objc_msgSend(v53, sel_isEqual_, a1);

  }
  return v2 & 1;
}

void sub_1D2C5CDA8(uint64_t a1, uint64_t a2)
{
  char *v2;
  _QWORD v3[6];

  v3[5] = *MEMORY[0x1E0C80C00];
  v3[3] = MEMORY[0x1E0CB0338];
  v3[4] = MEMORY[0x1E0CB0318];
  v3[0] = a1;
  v3[1] = a2;
  v2 = (char *)&loc_1D2C5CE0C
     + *((int *)qword_1D2C5D040 + (__swift_project_boxed_opaque_existential_1(v3, MEMORY[0x1E0CB0338])[1] >> 62));
  __asm { BR              X10 }
}

uint64_t sub_1D2C5CE1C()
{
  unint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  __int16 v7;
  char v8;
  char v9;
  char v10;
  char v11;
  uint64_t v12;
  uint64_t v13;

  v6 = v2;
  v7 = v3;
  v8 = BYTE2(v3);
  v9 = BYTE3(v3);
  v10 = BYTE4(v3);
  v11 = BYTE5(v3);
  sub_1D2C45028(v1, v0);
  sub_1D2CA7224(&v6, (_BYTE *)&v6 + BYTE6(v3), &v12);
  sub_1D2C45258(v1, v0);
  v4 = v12;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v13);
  return v4;
}

uint64_t sub_1D2C5D050(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  _BYTE *v5;
  _BYTE *v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v14[2];
  uint64_t v15;
  __int128 v16;
  _QWORD v17[7];

  v17[5] = *MEMORY[0x1E0C80C00];
  *(_QWORD *)&v16 = a1;
  *((_QWORD *)&v16 + 1) = a2;
  sub_1D2CAAF0C();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED9858C8);
  if (!swift_dynamicCast())
  {
    v15 = 0;
    memset(v14, 0, sizeof(v14));
    sub_1D2C6BA48((uint64_t)v14);
    if ((a2 & 0x1000000000000000) != 0)
      goto LABEL_20;
    if ((a2 & 0x2000000000000000) != 0)
    {
      v17[0] = a1;
      v17[1] = a2 & 0xFFFFFFFFFFFFFFLL;
      v4 = (char *)v17 + (HIBYTE(a2) & 0xF);
      v5 = v17;
    }
    else
    {
      if ((a1 & 0x1000000000000000) != 0)
      {
        v2 = (a2 & 0xFFFFFFFFFFFFFFFLL) + 32;
        v3 = a1 & 0xFFFFFFFFFFFFLL;
      }
      else
      {
        v2 = sub_1D2CAAFFC();
      }
      if (v2)
        v4 = (_BYTE *)(v2 + v3);
      else
        v4 = 0;
      v5 = (_BYTE *)v2;
    }
    v6 = sub_1D2C6773C(v5, v4);
    v8 = v7;
    if (v7 >> 60 != 15)
    {
      swift_bridgeObjectRelease();
      *(_QWORD *)&v14[0] = v6;
      *((_QWORD *)&v14[0] + 1) = v8;
      return *(_QWORD *)&v14[0];
    }
    if ((a2 & 0x1000000000000000) != 0)
    {
LABEL_20:
      v9 = sub_1D2CAAE7C();
    }
    else if ((a2 & 0x2000000000000000) != 0)
    {
      v9 = HIBYTE(a2) & 0xF;
    }
    else
    {
      v9 = a1 & 0xFFFFFFFFFFFFLL;
    }
    *(_QWORD *)&v14[0] = sub_1D2C677A0(v9);
    *((_QWORD *)&v14[0] + 1) = v10;
    MEMORY[0x1E0C80A78](*(_QWORD *)&v14[0]);
    sub_1D2C66F00();
    __asm { BR              X12 }
  }
  sub_1D2C6BAF8(v14, (uint64_t)v17);
  __swift_project_boxed_opaque_existential_1(v17, v17[3]);
  sub_1D2CAA8AC();
  swift_bridgeObjectRelease();
  v14[0] = v16;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v17);
  return *(_QWORD *)&v14[0];
}

uint64_t sub_1D2C5D54C(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _BYTE *v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v8[5];

  v8[3] = MEMORY[0x1E0DEAC20];
  v8[4] = MEMORY[0x1E0CB1AA8];
  v8[0] = a1;
  v8[1] = a2;
  v2 = __swift_project_boxed_opaque_existential_1(v8, MEMORY[0x1E0DEAC20]);
  v3 = (_BYTE *)*v2;
  if (*v2 && (v4 = (_BYTE *)v2[1], v5 = v4 - v3, v4 != v3))
  {
    if (v5 <= 14)
    {
      v6 = sub_1D2CA7484(v3, v4);
    }
    else if ((unint64_t)v5 >= 0x7FFFFFFF)
    {
      v6 = sub_1D2CA7544((uint64_t)v3, (uint64_t)v4);
    }
    else
    {
      v6 = sub_1D2CA75BC((uint64_t)v3, (uint64_t)v4);
    }
  }
  else
  {
    v6 = 0;
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v8);
  return v6;
}

uint64_t sub_1D2C5D604@<X0>(uint64_t a1@<X0>, void *a2@<X1>, void *a3@<X2>, void *a4@<X3>, void *a5@<X5>, void *a6@<X6>, void *a7@<X7>, uint64_t a8@<X8>, void *a9, void *a10)
{
  uint64_t v10;
  char v17;
  id v18;
  id v19;
  id v20;
  id v21;
  uint64_t result;
  id v23;
  id v24;
  _BYTE *v25;
  id v26;
  uint64_t v27;
  void *v28;
  __int128 v31;
  id v32;
  id v33;

  v17 = sub_1D2C68F78(a2, a3, a9, a10);
  if (!v10)
  {
    v28 = a4;
    v27 = a8;
    if ((v17 & 1) != 0)
    {
      v18 = sub_1D2C65044(*(void **)(a1 + 8), *(_QWORD *)(a1 + 40));
      v19 = sub_1D2C831C0((uint64_t)a6, *(id *)(a1 + 48));
      v20 = sub_1D2C65044(v18, (uint64_t)v19);

      v21 = sub_1D2C831C0((uint64_t)a7, *(id *)(a1 + 56));
      v26 = sub_1D2C65044(v20, (uint64_t)v21);

      swift_bridgeObjectRelease();
      v33 = *(id *)a1;
      v32 = *(id *)(a1 + 24);
      v31 = *(_OWORD *)(a1 + 72);
      sub_1D2C6B9DC(&v33);
      sub_1D2C6B9DC(&v32);
      sub_1D2C6B7C8((uint64_t)&v31);
      result = sub_1D2C6B7F4(a1);
      v23 = v33;
      *(_QWORD *)v27 = a5;
      *(_QWORD *)(v27 + 8) = v23;
      v24 = v32;
      *(_QWORD *)(v27 + 16) = v26;
      *(_QWORD *)(v27 + 24) = v24;
      *(_OWORD *)(v27 + 32) = v31;
      return result;
    }
    sub_1D2C6B8A4();
    swift_allocError();
    *v25 = 0;
    swift_willThrow();
  }

  swift_bridgeObjectRelease();
  return sub_1D2C6B7F4(a1);
}

void sub_1D2C5D7E8(void *a1@<X0>, void *a2@<X1>, void *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t (*v8)(uint64_t);
  id v9;
  id v10;
  void *v11;
  id v12;
  id v13;
  id v14;
  uint64_t v16;

  sub_1D2CAAD50();
  v8 = (uint64_t (*)(uint64_t))MEMORY[0x1E0CA9860];
  v14 = a1;
  v13 = a2;
  v9 = a3;
  sub_1D2C69AB4(v4);
  sub_1D2C5AE40((unint64_t *)&qword_1ED985C78, v8, MEMORY[0x1E0CA9858]);
  sub_1D2CAAC00();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED985DB0);
  swift_dynamicCast();
  v10 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0D1BD78]), sel_initWithRandomScalarInGroup_, v16);
  if (v10)
  {
    v11 = v10;
    sub_1D2CAAC00();
    swift_dynamicCast();
    v12 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0D1BD78]), sel_initWithRandomScalarInGroup_, v16);
    if (v12)
    {
      sub_1D2C5D964(v4, v11, v12, v14, v13, v9, a4);
      return;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
}

double sub_1D2C5D964@<D0>(uint64_t a1@<X0>, void *a2@<X1>, void *a3@<X2>, void *a4@<X3>, void *a5@<X4>, void *a6@<X5>, uint64_t a7@<X8>)
{
  id v13;
  void *v14;
  id v15;
  id v16;
  id v17;
  id v18;
  id v19;
  id v20;
  char *v21;
  unint64_t v22;
  unint64_t v23;
  char *v24;
  id v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char *v29;
  id v30;
  uint64_t v31;
  void *v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  id v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  double result;
  uint64_t *v43;
  uint64_t v44;
  void *v46;
  uint64_t v47;
  id v48;
  uint64_t v49;
  void *v50;
  id v51;
  void *v52;
  id v53;
  void *v54;
  void *v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  uint64_t v59;
  __int128 v60;
  _OWORD v61[3];
  uint64_t v62;
  id v63;

  v13 = sub_1D2C831C0((uint64_t)a2, *(id *)(a1 + 8));
  v14 = *(void **)a1;
  v55 = v13;
  v15 = sub_1D2C831C0(*(_QWORD *)a1, v13);
  v16 = sub_1D2C831C0((uint64_t)a4, a6);
  v53 = sub_1D2C92250(v15, (uint64_t)v16);

  v17 = sub_1D2C831C0((uint64_t)a2, *(id *)(a1 + 16));
  v18 = sub_1D2C831C0((uint64_t)a3, a5);
  v50 = v17;
  v51 = sub_1D2C92250(v17, (uint64_t)v18);

  v46 = *(void **)(a1 + 24);
  v47 = a1;
  v19 = sub_1D2C831C0((uint64_t)a4, v46);
  v63 = a3;
  v20 = sub_1D2C831C0((uint64_t)a3, a5);
  v48 = sub_1D2C65044(v19, (uint64_t)v20);

  *(_QWORD *)&v56 = 0xD000000000000025;
  *((_QWORD *)&v56 + 1) = 0x80000001D2CB0F20;
  *(_QWORD *)&v57 = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)&v58 = MEMORY[0x1E0DEE9D8];
  *((_QWORD *)&v58 + 1) = MEMORY[0x1E0DEE9D8];
  v59 = MEMORY[0x1E0DEE9D8];
  v21 = sub_1D2C71850(0, 1, 1, MEMORY[0x1E0DEE9D8]);
  v23 = *((_QWORD *)v21 + 2);
  v22 = *((_QWORD *)v21 + 3);
  if (v23 >= v22 >> 1)
    v21 = sub_1D2C71850((char *)(v22 > 1), v23 + 1, 1, v21);
  v54 = a6;
  *((_QWORD *)v21 + 2) = v23 + 1;
  v24 = &v21[16 * v23];
  *((_QWORD *)v24 + 4) = 12653;
  *((_QWORD *)v24 + 5) = 0xE200000000000000;
  *((_QWORD *)&v57 + 1) = v21;
  v25 = v14;
  MEMORY[0x1D824529C]();
  if (*(_QWORD *)(v57 + 16) >= *(_QWORD *)(v57 + 24) >> 1)
    sub_1D2CAAF24();
  sub_1D2CAAF3C();
  sub_1D2CAAF18();
  v26 = *(_QWORD *)(v57 + 16);
  v28 = *((_QWORD *)v21 + 2);
  v27 = *((_QWORD *)v21 + 3);
  if (v28 >= v27 >> 1)
    v21 = sub_1D2C71850((char *)(v27 > 1), v28 + 1, 1, v21);
  v52 = a5;
  *((_QWORD *)v21 + 2) = v28 + 1;
  v29 = &v21[16 * v28];
  *((_QWORD *)v29 + 4) = 122;
  *((_QWORD *)v29 + 5) = 0xE100000000000000;
  *((_QWORD *)&v57 + 1) = v21;
  v30 = a4;
  MEMORY[0x1D824529C]();
  if (*(_QWORD *)(v57 + 16) >= *(_QWORD *)(v57 + 24) >> 1)
    sub_1D2CAAF24();
  sub_1D2CAAF3C();
  sub_1D2CAAF18();
  v31 = *(_QWORD *)(v57 + 16);
  v32 = (void *)sub_1D2C6533C((uint64_t)v63);
  v34 = *((_QWORD *)v21 + 2);
  v33 = *((_QWORD *)v21 + 3);
  if (v34 >= v33 >> 1)
    v21 = sub_1D2C71850((char *)(v33 > 1), v34 + 1, 1, v21);
  v35 = v26 - 1;
  v36 = v31 - 1;
  *((_QWORD *)v21 + 2) = v34 + 1;
  v37 = &v21[16 * v34];
  *((_QWORD *)v37 + 4) = 29229;
  *((_QWORD *)v37 + 5) = 0xE200000000000000;
  *((_QWORD *)&v57 + 1) = v21;
  v38 = v32;
  MEMORY[0x1D824529C]();
  if (*(_QWORD *)(v57 + 16) >= *(_QWORD *)(v57 + 24) >> 1)
    sub_1D2CAAF24();
  sub_1D2CAAF3C();
  sub_1D2CAAF18();
  v39 = *(_QWORD *)(v57 + 16);

  sub_1D2C64814((uint64_t)&v56, v52, v54, v55, v51, v53, v48, v46, v35, v36, v39 - 1);
  v61[0] = v56;
  v61[1] = v57;
  v61[2] = v58;
  v62 = v59;
  v40 = sub_1D2C5C534();
  if (v49)
  {
    sub_1D2C6B8E8((uint64_t)v61);

    sub_1D2C69B0C(v47);
  }
  else
  {
    v43 = v40;
    v44 = v41;
    sub_1D2C6B8E8((uint64_t)v61);

    v60 = *(_OWORD *)(v47 + 32);
    sub_1D2C6B7C8((uint64_t)&v60);
    sub_1D2C69B0C(v47);
    *(_QWORD *)a7 = v55;
    *(_QWORD *)(a7 + 8) = v51;
    *(_QWORD *)(a7 + 16) = v53;
    *(_QWORD *)(a7 + 40) = v43;
    *(_QWORD *)(a7 + 48) = v44;
    result = *(double *)&v60;
    *(_OWORD *)(a7 + 24) = v60;
  }
  return result;
}

void sub_1D2C5DDE8(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  id *v3;
  uint64_t v4;
  id *v5;
  id v7;
  void *v8;
  id v9;
  id v10;
  void *v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  void *v18;
  void *v19;
  void *v20;
  id v21;
  id v22;
  id v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  uint64_t v28;
  uint64_t v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  void *v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  unint64_t v38;

  v5 = v3;
  v38 = a2;
  sub_1D2CAAD50();
  sub_1D2C5AE40((unint64_t *)&qword_1ED985C78, (uint64_t (*)(uint64_t))MEMORY[0x1E0CA9860], MEMORY[0x1E0CA9858]);
  sub_1D2CAAC00();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED985DB0);
  swift_dynamicCast();
  v7 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0D1BD78]), sel_initWithRandomScalarInGroup_, v30);
  if (!v7)
  {
    __break(1u);
    goto LABEL_6;
  }
  v8 = v7;
  v28 = a3;
  sub_1D2CAAC00();
  swift_dynamicCast();
  v9 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0D1BD70]), sel_initWithGeneratorForCP_, v30);
  v10 = objc_msgSend(v9, sel_serializedPublicKey_, 1);
  if (!v10)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  v11 = v10;
  v12 = sub_1D2CAA96C();
  v14 = v13;

  v15 = sub_1D2C5D050(0xD000000000000023, 0x80000001D2CB1120);
  v17 = v16;
  sub_1D2C92114(v12, v14, v15, v16);
  if (!v4)
  {
    v19 = v18;
    sub_1D2C45258(v15, v17);
    sub_1D2C45258(v12, v14);
    sub_1D2C5D7E8(v8, v9, v19, (uint64_t)&v34);
    v20 = v34;
    v21 = *v5;
    v22 = v8;
    v23 = v20;
    v24 = v19;
    v25 = v38;
    sub_1D2C45028(a1, v38);
    sub_1D2C5E10C(v21, (uint64_t)v22, a1, v25, v23, v24, &v30);

    v26 = v30;
    *(_QWORD *)v28 = v23;
    *(_OWORD *)(v28 + 8) = v35;
    *(_OWORD *)(v28 + 24) = v36;
    *(_OWORD *)(v28 + 40) = v37;
    *(_QWORD *)(v28 + 56) = v26;
    v27 = v32;
    *(_OWORD *)(v28 + 64) = v31;
    *(_OWORD *)(v28 + 80) = v27;
    *(_OWORD *)(v28 + 96) = v33;
    return;
  }
LABEL_7:
  swift_unexpectedError();
  __break(1u);
}

void sub_1D2C5E10C(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X4>, void *a6@<X5>, _QWORD *a7@<X8>)
{
  uint64_t v7;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  void *v16;
  void *v17;
  id v18;
  id v19;
  id v20;
  char *v21;
  unint64_t v22;
  unint64_t v23;
  char *v24;
  id v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  void *v29;
  char *v30;
  id v31;
  void *v32;
  void *v33;
  void *v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  void *v39;
  void *v40;
  void *v41;
  id v42;
  uint64_t v43;
  uint64_t v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  uint64_t v48;
  _OWORD v49[3];
  uint64_t v50;
  void *v51;

  v51 = a5;
  v13 = sub_1D2C5D050(0xD00000000000001CLL, 0x80000001D2CB1050);
  v15 = v14;
  v43 = a3;
  v44 = a4;
  sub_1D2C92114(a3, a4, v13, v14);
  if (v7)
  {
    swift_unexpectedError();
    __break(1u);
  }
  else
  {
    v17 = v16;
    sub_1D2C45258(v13, v15);
    v41 = v17;
    v42 = sub_1D2C831C0((uint64_t)a1, v17);
    v18 = sub_1D2C831C0((uint64_t)a1, v51);
    v40 = (void *)a2;
    v19 = sub_1D2C831C0(a2, a6);
    v20 = sub_1D2C92250(v18, (uint64_t)v19);

    *(_QWORD *)&v45 = 0xD00000000000001CLL;
    *((_QWORD *)&v45 + 1) = 0x80000001D2CB1050;
    *(_QWORD *)&v46 = MEMORY[0x1E0DEE9D8];
    *(_QWORD *)&v47 = MEMORY[0x1E0DEE9D8];
    *((_QWORD *)&v47 + 1) = MEMORY[0x1E0DEE9D8];
    v48 = MEMORY[0x1E0DEE9D8];
    v21 = sub_1D2C71850(0, 1, 1, MEMORY[0x1E0DEE9D8]);
    v23 = *((_QWORD *)v21 + 2);
    v22 = *((_QWORD *)v21 + 3);
    if (v23 >= v22 >> 1)
      v21 = sub_1D2C71850((char *)(v22 > 1), v23 + 1, 1, v21);
    *((_QWORD *)v21 + 2) = v23 + 1;
    v24 = &v21[16 * v23];
    *((_QWORD *)v24 + 4) = 12653;
    *((_QWORD *)v24 + 5) = 0xE200000000000000;
    *((_QWORD *)&v46 + 1) = v21;
    v25 = a1;
    MEMORY[0x1D824529C]();
    if (*(_QWORD *)(v46 + 16) >= *(_QWORD *)(v46 + 24) >> 1)
      sub_1D2CAAF24();
    v39 = v25;
    sub_1D2CAAF3C();
    sub_1D2CAAF18();
    v26 = *(_QWORD *)(v46 + 16) - 1;
    v28 = *((_QWORD *)v21 + 2);
    v27 = *((_QWORD *)v21 + 3);
    v29 = v20;
    if (v28 >= v27 >> 1)
      v21 = sub_1D2C71850((char *)(v27 > 1), v28 + 1, 1, v21);
    *((_QWORD *)v21 + 2) = v28 + 1;
    v30 = &v21[16 * v28];
    *((_QWORD *)v30 + 4) = 122;
    *((_QWORD *)v30 + 5) = 0xE100000000000000;
    *((_QWORD *)&v46 + 1) = v21;
    v31 = v40;
    MEMORY[0x1D824529C]();
    if (*(_QWORD *)(v46 + 16) >= *(_QWORD *)(v46 + 24) >> 1)
      sub_1D2CAAF24();
    sub_1D2CAAF3C();
    sub_1D2CAAF18();
    v32 = a6;
    v33 = a6;
    v34 = v51;
    sub_1D2C65E44((uint64_t)&v45, v33, v41, v42, v51, v29, v26, *(_QWORD *)(v46 + 16) - 1);
    v49[0] = v45;
    v49[1] = v46;
    v49[2] = v47;
    v50 = v48;
    v35 = sub_1D2C5C534();
    v37 = v36;
    sub_1D2C6B8E8((uint64_t)v49);

    a7[4] = v34;
    a7[5] = v35;
    a7[6] = v37;
    *a7 = v42;
    a7[1] = v43;
    a7[2] = v44;
    a7[3] = v29;
  }
}

void sub_1D2C5E488(void *a1, void *a2, void *a3, uint64_t a4, id a5, void *a6)
{
  id v12;
  id v13;
  id v14;
  id v15;
  char *v16;
  unint64_t v17;
  unint64_t v18;
  char *v19;
  id v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char *v24;
  id v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char *v29;
  id v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  char *v36;
  id v37;
  void *v38;
  void *v39;
  void *v40;
  void *v41;
  void *v42;
  uint64_t v43;
  id v44;
  id v45;
  id v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  uint64_t v50;
  _OWORD v51[3];
  uint64_t v52;
  void *v53;

  v12 = sub_1D2C831C0((uint64_t)a1, a5);
  v13 = sub_1D2C831C0((uint64_t)a3, a6);
  v45 = sub_1D2C92250(v12, (uint64_t)v13);

  v46 = a5;
  v14 = sub_1D2C831C0((uint64_t)a2, a5);
  v42 = (void *)a4;
  v53 = a6;
  v15 = sub_1D2C831C0(a4, a6);
  v44 = sub_1D2C92250(v14, (uint64_t)v15);

  *(_QWORD *)&v47 = 0xD000000000000029;
  *((_QWORD *)&v47 + 1) = 0x80000001D2CB10F0;
  *(_QWORD *)&v48 = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)&v49 = MEMORY[0x1E0DEE9D8];
  *((_QWORD *)&v49 + 1) = MEMORY[0x1E0DEE9D8];
  v50 = MEMORY[0x1E0DEE9D8];
  v16 = sub_1D2C71850(0, 1, 1, MEMORY[0x1E0DEE9D8]);
  v18 = *((_QWORD *)v16 + 2);
  v17 = *((_QWORD *)v16 + 3);
  if (v18 >= v17 >> 1)
    v16 = sub_1D2C71850((char *)(v17 > 1), v18 + 1, 1, v16);
  *((_QWORD *)v16 + 2) = v18 + 1;
  v19 = &v16[16 * v18];
  *((_QWORD *)v19 + 4) = 12653;
  *((_QWORD *)v19 + 5) = 0xE200000000000000;
  *((_QWORD *)&v48 + 1) = v16;
  v20 = a1;
  MEMORY[0x1D824529C]();
  if (*(_QWORD *)(v48 + 16) >= *(_QWORD *)(v48 + 24) >> 1)
    sub_1D2CAAF24();
  v41 = v20;
  sub_1D2CAAF3C();
  sub_1D2CAAF18();
  v21 = *(_QWORD *)(v48 + 16);
  v23 = *((_QWORD *)v16 + 2);
  v22 = *((_QWORD *)v16 + 3);
  if (v23 >= v22 >> 1)
    v16 = sub_1D2C71850((char *)(v22 > 1), v23 + 1, 1, v16);
  *((_QWORD *)v16 + 2) = v23 + 1;
  v24 = &v16[16 * v23];
  *((_QWORD *)v24 + 4) = 12909;
  *((_QWORD *)v24 + 5) = 0xE200000000000000;
  *((_QWORD *)&v48 + 1) = v16;
  v25 = a2;
  MEMORY[0x1D824529C]();
  if (*(_QWORD *)(v48 + 16) >= *(_QWORD *)(v48 + 24) >> 1)
    sub_1D2CAAF24();
  v40 = v25;
  sub_1D2CAAF3C();
  sub_1D2CAAF18();
  v26 = *(_QWORD *)(v48 + 16);
  v28 = *((_QWORD *)v16 + 2);
  v27 = *((_QWORD *)v16 + 3);
  if (v28 >= v27 >> 1)
    v16 = sub_1D2C71850((char *)(v27 > 1), v28 + 1, 1, v16);
  *((_QWORD *)v16 + 2) = v28 + 1;
  v29 = &v16[16 * v28];
  *((_QWORD *)v29 + 4) = 12658;
  *((_QWORD *)v29 + 5) = 0xE200000000000000;
  *((_QWORD *)&v48 + 1) = v16;
  v30 = a3;
  MEMORY[0x1D824529C]();
  if (*(_QWORD *)(v48 + 16) >= *(_QWORD *)(v48 + 24) >> 1)
    sub_1D2CAAF24();
  v31 = v21 - 1;
  v32 = v26 - 1;
  v39 = v30;
  sub_1D2CAAF3C();
  sub_1D2CAAF18();
  v33 = *(_QWORD *)(v48 + 16) - 1;
  v35 = *((_QWORD *)v16 + 2);
  v34 = *((_QWORD *)v16 + 3);
  if (v35 >= v34 >> 1)
    v16 = sub_1D2C71850((char *)(v34 > 1), v35 + 1, 1, v16);
  *((_QWORD *)v16 + 2) = v35 + 1;
  v36 = &v16[16 * v35];
  *((_QWORD *)v36 + 4) = 12914;
  *((_QWORD *)v36 + 5) = 0xE200000000000000;
  *((_QWORD *)&v48 + 1) = v16;
  v37 = v42;
  MEMORY[0x1D824529C]();
  if (*(_QWORD *)(v48 + 16) >= *(_QWORD *)(v48 + 24) >> 1)
    sub_1D2CAAF24();
  sub_1D2CAAF3C();
  sub_1D2CAAF18();
  v38 = v53;
  sub_1D2C5E8FC((uint64_t)&v47, v46, v53, v45, v44, v31, v32, v33, *(_QWORD *)(v48 + 16) - 1);
  v51[0] = v47;
  v51[1] = v48;
  v51[2] = v49;
  v52 = v50;
  sub_1D2C5C534();
  sub_1D2C6B8E8((uint64_t)v51);
  if (v43)
  {

  }
}

uint64_t sub_1D2C5E8FC(uint64_t a1, void *a2, void *a3, void *a4, void *a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  id v15;
  uint64_t v16;
  id v17;
  uint64_t v18;
  id v19;
  uint64_t v20;
  id v21;
  uint64_t v22;
  _QWORD *v23;
  unint64_t v24;
  unint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  _QWORD *v30;
  uint64_t result;
  uint64_t v32;

  v15 = a2;
  v16 = sub_1D2C6742C(0x6F746172656E6567, 0xEA00000000004772, v15, a1);

  v17 = a3;
  v18 = sub_1D2C6742C(0x6F746172656E6567, 0xEA00000000004872, v17, a1);

  v19 = a4;
  v20 = sub_1D2C6742C(0x636E45316DLL, 0xE500000000000000, v19, a1);

  v21 = a5;
  v32 = sub_1D2C6742C(0x636E45326DLL, 0xE500000000000000, v21, a1);

  __swift_instantiateConcreteTypeFromMangledName(&qword_1EFC9FD40);
  v22 = swift_allocObject();
  *(_OWORD *)(v22 + 16) = xmmword_1D2CAD530;
  *(_QWORD *)(v22 + 32) = a6;
  *(_QWORD *)(v22 + 40) = v16;
  *(_QWORD *)(v22 + 48) = a8;
  *(_QWORD *)(v22 + 56) = v18;
  v23 = *(_QWORD **)(a1 + 48);
  sub_1D2CAAF0C();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v23 = sub_1D2C71950(0, v23[2] + 1, 1, v23);
  v25 = v23[2];
  v24 = v23[3];
  if (v25 >= v24 >> 1)
    v23 = sub_1D2C71950((_QWORD *)(v24 > 1), v25 + 1, 1, v23);
  v23[2] = v25 + 1;
  v26 = &v23[2 * v25];
  v26[4] = v20;
  v26[5] = v22;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 48) = v23;
  v27 = swift_allocObject();
  *(_OWORD *)(v27 + 16) = xmmword_1D2CAD530;
  *(_QWORD *)(v27 + 32) = a7;
  *(_QWORD *)(v27 + 40) = v16;
  *(_QWORD *)(v27 + 48) = a9;
  *(_QWORD *)(v27 + 56) = v18;
  v28 = v23[2];
  v29 = v23[3];
  sub_1D2CAAF0C();
  if (v28 >= v29 >> 1)
    v23 = sub_1D2C71950((_QWORD *)(v29 > 1), v28 + 1, 1, v23);
  v23[2] = v28 + 1;
  v30 = &v23[2 * v28];
  v30[4] = v32;
  v30[5] = v27;
  result = swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 48) = v23;
  return result;
}

uint64_t sub_1D2C5EB50(uint64_t a1, void *a2, void *a3, void *a4, void *a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  id v15;
  uint64_t v16;
  id v17;
  uint64_t v18;
  id v19;
  uint64_t v20;
  id v21;
  uint64_t v22;
  _QWORD *v23;
  unint64_t v24;
  unint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  _QWORD *v30;
  uint64_t result;
  uint64_t v32;

  v15 = a2;
  v16 = sub_1D2C675B4(0x6F746172656E6567, 0xEA00000000004772, v15, a1);

  v17 = a3;
  v18 = sub_1D2C675B4(0x6F746172656E6567, 0xEA00000000004872, v17, a1);

  v19 = a4;
  v20 = sub_1D2C675B4(0x636E45316DLL, 0xE500000000000000, v19, a1);

  v21 = a5;
  v32 = sub_1D2C675B4(0x636E45326DLL, 0xE500000000000000, v21, a1);

  __swift_instantiateConcreteTypeFromMangledName(&qword_1EFC9FD40);
  v22 = swift_allocObject();
  *(_OWORD *)(v22 + 16) = xmmword_1D2CAD530;
  *(_QWORD *)(v22 + 32) = a6;
  *(_QWORD *)(v22 + 40) = v16;
  *(_QWORD *)(v22 + 48) = a8;
  *(_QWORD *)(v22 + 56) = v18;
  v23 = *(_QWORD **)(a1 + 40);
  sub_1D2CAAF0C();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v23 = sub_1D2C71950(0, v23[2] + 1, 1, v23);
  v25 = v23[2];
  v24 = v23[3];
  if (v25 >= v24 >> 1)
    v23 = sub_1D2C71950((_QWORD *)(v24 > 1), v25 + 1, 1, v23);
  v23[2] = v25 + 1;
  v26 = &v23[2 * v25];
  v26[4] = v20;
  v26[5] = v22;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 40) = v23;
  v27 = swift_allocObject();
  *(_OWORD *)(v27 + 16) = xmmword_1D2CAD530;
  *(_QWORD *)(v27 + 32) = a7;
  *(_QWORD *)(v27 + 40) = v16;
  *(_QWORD *)(v27 + 48) = a9;
  *(_QWORD *)(v27 + 56) = v18;
  v28 = v23[2];
  v29 = v23[3];
  sub_1D2CAAF0C();
  if (v28 >= v29 >> 1)
    v23 = sub_1D2C71950((_QWORD *)(v29 > 1), v28 + 1, 1, v23);
  v23[2] = v28 + 1;
  v30 = &v23[2 * v28];
  v30[4] = v32;
  v30[5] = v27;
  result = swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 40) = v23;
  return result;
}

void sub_1D2C5EDA4(uint64_t a1, uint64_t a2)
{
  char *v2;
  _QWORD v3[6];

  v3[5] = *MEMORY[0x1E0C80C00];
  v3[3] = MEMORY[0x1E0CB0338];
  v3[4] = MEMORY[0x1E0CB0318];
  v3[0] = a1;
  v3[1] = a2;
  v2 = (char *)&loc_1D2C5EE08
     + dword_1D2C5EFAC[__swift_project_boxed_opaque_existential_1(v3, MEMORY[0x1E0CB0338])[1] >> 62];
  __asm { BR              X10 }
}

uint64_t sub_1D2C5EE18()
{
  unint64_t v0;
  uint64_t v1;
  uint64_t v3;

  sub_1D2C45028(v1, v0);
  sub_1D2CAA924();
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)&v3);
}

uint64_t KVACRequestWrapper.requestData.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR____TtC16CryptoKitPrivate18KVACRequestWrapper_requestData);
  sub_1D2C45028(v1, *(_QWORD *)(v0 + OBJC_IVAR____TtC16CryptoKitPrivate18KVACRequestWrapper_requestData + 8));
  return v1;
}

id sub_1D2C5F014(void *a1, void *a2, void *a3, uint64_t a4)
{
  void *v4;
  uint64_t v5;
  id result;
  void *v11;
  unint64_t v12;
  void *v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  id v19;
  _BYTE *v20;
  uint64_t v21;
  unint64_t v22;
  char *v23;
  id v24;
  id v25;
  id v26;
  unint64_t v27;
  char *v28;
  objc_super v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;

  v28 = v4;
  result = objc_msgSend(a1, sel_serializedPublicKey_, 1);
  if (result)
  {
    v11 = result;
    v32 = sub_1D2CAA96C();
    v27 = v12;

    result = objc_msgSend(a2, sel_serializedPublicKey_, 1);
    if (result)
    {
      v13 = result;
      v14 = sub_1D2CAA96C();
      v16 = v15;

      if (*(_QWORD *)(a4 + 16) == 4)
      {
        v17 = sub_1D2C69528(a3, a4);
        if (!v5)
        {
          v21 = v17;
          v22 = v18;
          *(_QWORD *)&v30 = v32;
          *((_QWORD *)&v30 + 1) = v27;
          sub_1D2C45028(v32, v27);
          sub_1D2C45028(v14, v16);
          sub_1D2C5EDA4(v14, v16);
          sub_1D2C45258(v14, v16);
          v31 = v30;
          sub_1D2C45028(v32, v27);
          sub_1D2C45028(v21, v22);
          sub_1D2C5EDA4(v21, v22);
          sub_1D2C45258(v21, v22);
          sub_1D2C45258(v14, v16);
          sub_1D2C45258(v32, v27);
          sub_1D2C45258(v32, v27);
          sub_1D2C45258(v21, v22);
          *(_OWORD *)&v28[OBJC_IVAR____TtC16CryptoKitPrivate18KVACRequestWrapper_requestData] = v30;
          v23 = &v28[OBJC_IVAR____TtC16CryptoKitPrivate18KVACRequestWrapper_request];
          *(_QWORD *)v23 = a1;
          *((_QWORD *)v23 + 1) = a2;
          *((_QWORD *)v23 + 2) = a3;
          *((_QWORD *)v23 + 3) = a4;
          v24 = a1;
          v25 = a2;
          v26 = a3;
          sub_1D2CAAF0C();

          v29.receiver = v28;
          v29.super_class = (Class)type metadata accessor for KVACRequestWrapper();
          v19 = objc_msgSendSuper2(&v29, sel_init);
          swift_bridgeObjectRelease();

          return v19;
        }
        swift_bridgeObjectRelease();

        a3 = a2;
        a2 = a1;
        v19 = v28;
        a1 = v28;
      }
      else
      {
        v19 = v28;

        sub_1D2C6009C();
        swift_allocError();
        *v20 = 0;
        swift_willThrow();
        swift_bridgeObjectRelease();
      }

      sub_1D2C45258(v14, v16);
      sub_1D2C45258(v32, v27);
      type metadata accessor for KVACRequestWrapper();
      swift_deallocPartialClassInstance();
      return v19;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

void KVACRequestWrapper.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

id KVACRequestWrapper.__deallocating_deinit()
{
  return sub_1D2C63D6C(type metadata accessor for KVACRequestWrapper);
}

uint64_t type metadata accessor for KVACRequestWrapper()
{
  return objc_opt_self();
}

uint64_t KVACCredentialWrapper.credentialData.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR____TtC16CryptoKitPrivate21KVACCredentialWrapper_credentialData);
  sub_1D2C45028(v1, *(_QWORD *)(v0 + OBJC_IVAR____TtC16CryptoKitPrivate21KVACCredentialWrapper_credentialData + 8));
  return v1;
}

uint64_t KVACCredentialWrapper.serverKeyId.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR____TtC16CryptoKitPrivate21KVACCredentialWrapper_serverKeyId);
  sub_1D2C45028(v1, *(_QWORD *)(v0 + OBJC_IVAR____TtC16CryptoKitPrivate21KVACCredentialWrapper_serverKeyId + 8));
  return v1;
}

id sub_1D2C5F44C(uint64_t a1)
{
  void *v1;
  id v3;
  char *v4;
  id v5;
  void *v6;
  unint64_t v7;
  unint64_t v8;
  id result;
  void *v10;
  uint64_t v11;
  unint64_t v12;
  void *v13;
  uint64_t v14;
  unint64_t v15;
  void *v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  _BYTE *v25;
  uint64_t v26;
  uint64_t *v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  objc_super v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  uint64_t v36;

  v3 = *(id *)a1;
  v4 = v1;
  v5 = objc_msgSend(v3, sel_serializedBigEndianScalar);
  if (!v5)
  {

    sub_1D2C6009C();
    swift_allocError();
    *v25 = 1;
    swift_willThrow();
    sub_1D2C69B0C(a1);
    type metadata accessor for KVACCredentialWrapper();
    swift_deallocPartialClassInstance();
    return v3;
  }
  v6 = v5;
  v36 = sub_1D2CAA96C();
  v8 = v7;

  result = objc_msgSend(*(id *)(a1 + 8), sel_serializedPublicKey_, 1);
  if (!result)
  {
    __break(1u);
    goto LABEL_9;
  }
  v10 = result;
  v11 = sub_1D2CAA96C();
  v30 = v12;

  result = objc_msgSend(*(id *)(a1 + 16), sel_serializedPublicKey_, 1);
  if (!result)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  v13 = result;
  v14 = sub_1D2CAA96C();
  v28 = v15;
  v29 = v14;

  result = objc_msgSend(*(id *)(a1 + 24), sel_serializedPublicKey_, 1);
  if (result)
  {
    v16 = result;
    v17 = sub_1D2CAA96C();
    v31 = v18;

    v35 = *(_OWORD *)(a1 + 32);
    v27 = (uint64_t *)&v4[OBJC_IVAR____TtC16CryptoKitPrivate21KVACCredentialWrapper_serverKeyId];
    *(_OWORD *)&v4[OBJC_IVAR____TtC16CryptoKitPrivate21KVACCredentialWrapper_serverKeyId] = v35;
    v19 = &v4[OBJC_IVAR____TtC16CryptoKitPrivate21KVACCredentialWrapper_credential];
    v20 = *(_OWORD *)(a1 + 32);
    v21 = *(_OWORD *)a1;
    *((_OWORD *)v19 + 1) = *(_OWORD *)(a1 + 16);
    *((_OWORD *)v19 + 2) = v20;
    *(_OWORD *)v19 = v21;
    v22 = v36;
    *(_QWORD *)&v33 = v36;
    *((_QWORD *)&v33 + 1) = v8;
    sub_1D2C6B7C8((uint64_t)&v35);
    sub_1D2C69AB4(a1);
    sub_1D2C45028(v22, v8);
    sub_1D2C45028(v11, v30);
    sub_1D2C5EDA4(v11, v30);
    sub_1D2C45258(v11, v30);
    v34 = v33;
    sub_1D2C45028(v33, v8);
    sub_1D2C45028(v29, v28);
    sub_1D2C5EDA4(v29, v28);
    sub_1D2C45258(v29, v28);
    sub_1D2C45258(v33, v8);
    sub_1D2C45028(v33, v8);
    v26 = v17;
    sub_1D2C45028(v17, v31);
    sub_1D2C5EDA4(v17, v31);
    sub_1D2C45258(v17, v31);
    sub_1D2C45258(v33, v8);
    v24 = *v27;
    v23 = v27[1];
    v34 = v33;
    sub_1D2C45028(v24, v23);
    sub_1D2C45028(v33, v8);
    sub_1D2C5EDA4(v24, v23);
    sub_1D2C45258(v26, v31);
    sub_1D2C45258(v29, v28);
    sub_1D2C45258(v11, v30);
    sub_1D2C45258(v36, v8);
    sub_1D2C45258(v24, v23);
    sub_1D2C45258(v33, v8);
    *(_OWORD *)&v4[OBJC_IVAR____TtC16CryptoKitPrivate21KVACCredentialWrapper_credentialData] = v33;

    v32.receiver = v4;
    v32.super_class = (Class)type metadata accessor for KVACCredentialWrapper();
    v3 = objc_msgSendSuper2(&v32, sel_init);
    sub_1D2C69B0C(a1);
    return v3;
  }
LABEL_10:
  __break(1u);
  return result;
}

void KVACCredentialWrapper.__allocating_init(credentialData:)(uint64_t a1, uint64_t a2)
{
  objc_class *v2;
  id v5;

  v5 = objc_allocWithZone(v2);
  KVACCredentialWrapper.init(credentialData:)(a1, a2);
}

void KVACCredentialWrapper.init(credentialData:)(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }
}

id sub_1D2C5F860(uint64_t a1, unint64_t a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, id a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, objc_super a18, int a19, int a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38)
{
  void *v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  id v51;
  void *v52;
  id v53;
  unint64_t v54;
  char *v55;
  int64_t v56;
  uint64_t v57;
  unint64_t v58;
  unint64_t v59;
  id v60;
  id v61;
  _BYTE *v62;
  uint64_t v63;
  unint64_t v64;
  int v65;
  uint64_t v66;
  unint64_t v68;
  BOOL v69;
  char *v70;
  int64_t v71;
  uint64_t v72;
  unint64_t v73;
  unint64_t v74;
  unint64_t v75;
  char *v76;
  int64_t v77;
  uint64_t v78;
  unint64_t v79;
  unint64_t v80;
  unint64_t v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  unint64_t v86;
  uint64_t *v87;
  uint64_t *v88;
  char *v89;
  id v90;
  id v91;
  id v92;
  char *v93;
  objc_super v96;
  int v97;
  uint64_t v98;

  v40 = BYTE6(a2);
  v41 = (void *)objc_opt_self();
  sub_1D2CAAD50();
  sub_1D2C5AE40((unint64_t *)&qword_1ED985C78, (uint64_t (*)(uint64_t))MEMORY[0x1E0CA9860], MEMORY[0x1E0CA9858]);
  v93 = v38;
  sub_1D2CAAC00();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED985DB0);
  swift_dynamicCast();
  v42 = (unint64_t)objc_msgSend(v41, sel_groupOrderByteCountForCP_, v98);
  if ((v42 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_36;
  }
  v43 = v42;
  sub_1D2CAAC00();
  swift_dynamicCast();
  v44 = (uint64_t)objc_msgSend(v41, sel_compressedx962PointByteCountForCurveParameters_, v98);
  if (v44 < 0)
  {
LABEL_36:
    __break(1u);
    goto LABEL_37;
  }
  v45 = 3 * v44;
  if ((unsigned __int128)(v44 * (__int128)3) >> 64 != (3 * v44) >> 63)
  {
LABEL_37:
    __break(1u);
    goto LABEL_38;
  }
  v46 = v43 + v45;
  if (__OFADD__(v43, v45))
  {
LABEL_38:
    __break(1u);
    goto LABEL_39;
  }
  v47 = sub_1D2CAAD80();
  if (__OFADD__(v46, v47))
  {
LABEL_39:
    __break(1u);
    goto LABEL_40;
  }
  if (v40 != v46 + v47)
  {
    v61 = v93;

    sub_1D2C6009C();
    swift_allocError();
    *v62 = 2;
    swift_willThrow();
    v63 = a1;
    v64 = a2;
LABEL_17:
    sub_1D2C45258(v63, v64);
    goto LABEL_18;
  }
  sub_1D2CAAC00();
  swift_dynamicCast();
  if (((unint64_t)objc_msgSend(v41, sel_groupOrderByteCountForCP_, v98) & 0x8000000000000000) != 0)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  v48 = sub_1D2CAA984();
  v50 = v49;
  v97 = 0;
  sub_1D2CAAC00();
  swift_dynamicCast();
  v51 = objc_allocWithZone(MEMORY[0x1E0D1BD78]);
  v52 = (void *)sub_1D2CAA954();
  v53 = objc_msgSend(v51, sel_initWithData_inGroup_reduction_corecryptoError_, v52, v98, 0, &v97);

  if (!v53)
  {
    v65 = v97;
    sub_1D2C4E7DC();
    swift_allocError();
    *(_DWORD *)v66 = v65;
    *(_BYTE *)(v66 + 4) = 0;
    swift_willThrow();
    v61 = v93;

    sub_1D2C45258(a1, a2);
    v63 = v48;
    v64 = v50;
    goto LABEL_17;
  }
  sub_1D2C45258(v48, v50);
  sub_1D2CAAC00();
  swift_dynamicCast();
  v54 = (unint64_t)objc_msgSend(v41, sel_groupOrderByteCountForCP_, v98);
  if ((v54 & 0x8000000000000000) != 0)
  {
LABEL_41:
    __break(1u);
    goto LABEL_42;
  }
  v55 = (char *)v54;
  sub_1D2CAAC00();
  swift_dynamicCast();
  v56 = (int64_t)objc_msgSend(v41, sel_compressedx962PointByteCountForCurveParameters_, v98);
  if (v56 < 0)
  {
LABEL_42:
    __break(1u);
    goto LABEL_43;
  }
  if (__OFADD__(v55, v56))
  {
LABEL_43:
    __break(1u);
    goto LABEL_44;
  }
  if ((uint64_t)&v55[v56] < (uint64_t)v55)
  {
LABEL_44:
    __break(1u);
    JUMPOUT(0x1D2C60048);
  }
  v57 = sub_1D2CAA984();
  v59 = v58;
  v60 = sub_1D2C69958();
  if (!v39)
  {
    v92 = v60;
    sub_1D2C45258(v57, v59);
    sub_1D2CAAC00();
    swift_dynamicCast();
    v68 = (unint64_t)objc_msgSend(v41, sel_compressedx962PointByteCountForCurveParameters_, v98);
    if ((v68 & 0x8000000000000000) != 0)
    {
      __break(1u);
    }
    else
    {
      v69 = __OFADD__(v55, v68);
      v70 = &v55[v68];
      if (!v69)
      {
        sub_1D2CAAC00();
        swift_dynamicCast();
        v71 = (int64_t)objc_msgSend(v41, sel_compressedx962PointByteCountForCurveParameters_, v98);
        if ((v71 & 0x8000000000000000) == 0)
        {
          if (!__OFADD__(v70, v71))
          {
            if ((uint64_t)&v70[v71] >= (uint64_t)v70)
            {
              v72 = sub_1D2CAA984();
              v74 = v73;
              v91 = sub_1D2C69958();
              sub_1D2C45258(v72, v74);
              sub_1D2CAAC00();
              swift_dynamicCast();
              v75 = (unint64_t)objc_msgSend(v41, sel_compressedx962PointByteCountForCurveParameters_, v98);
              if ((v75 & 0x8000000000000000) == 0)
              {
                v69 = __OFADD__(v70, v75);
                v76 = &v70[v75];
                if (!v69)
                {
                  sub_1D2CAAC00();
                  swift_dynamicCast();
                  v77 = (int64_t)objc_msgSend(v41, sel_compressedx962PointByteCountForCurveParameters_, v98);
                  if ((v77 & 0x8000000000000000) == 0)
                  {
                    if (!__OFADD__(v76, v77))
                    {
                      if ((uint64_t)&v76[v77] >= (uint64_t)v76)
                      {
                        v78 = sub_1D2CAA984();
                        v80 = v79;
                        v90 = sub_1D2C69958();
                        sub_1D2C45258(v78, v80);
                        sub_1D2CAAC00();
                        swift_dynamicCast();
                        v81 = (unint64_t)objc_msgSend(v41, sel_compressedx962PointByteCountForCurveParameters_, v98);
                        if ((v81 & 0x8000000000000000) == 0)
                        {
                          v82 = &v76[v81];
                          if (!__OFADD__(v76, v81))
                          {
                            v83 = sub_1D2CAAD80();
                            if (!__OFADD__(v82, v83))
                            {
                              if ((uint64_t)&v82[v83] >= (uint64_t)v82)
                              {
                                v84 = sub_1D2CAA984();
                                v86 = v85;
                                v87 = (uint64_t *)&v93[OBJC_IVAR____TtC16CryptoKitPrivate21KVACCredentialWrapper_serverKeyId];
                                *v87 = v84;
                                v87[1] = v85;
                                v88 = (uint64_t *)&v93[OBJC_IVAR____TtC16CryptoKitPrivate21KVACCredentialWrapper_credentialData];
                                *v88 = a1;
                                v88[1] = a2;
                                v89 = &v93[OBJC_IVAR____TtC16CryptoKitPrivate21KVACCredentialWrapper_credential];
                                *(_QWORD *)v89 = v53;
                                *((_QWORD *)v89 + 1) = v92;
                                *((_QWORD *)v89 + 2) = v91;
                                *((_QWORD *)v89 + 3) = v90;
                                *((_QWORD *)v89 + 4) = v84;
                                *((_QWORD *)v89 + 5) = v85;
                                sub_1D2C45028(a1, a2);
                                sub_1D2C45028(v84, v86);

                                v96.receiver = v93;
                                v96.super_class = (Class)type metadata accessor for KVACCredentialWrapper();
                                v61 = objc_msgSendSuper2(&v96, sel_init);
                                sub_1D2C45258(a1, a2);
                                return v61;
                              }
LABEL_58:
                              __break(1u);
                            }
LABEL_57:
                            __break(1u);
                            goto LABEL_58;
                          }
LABEL_56:
                          __break(1u);
                          goto LABEL_57;
                        }
LABEL_55:
                        __break(1u);
                        goto LABEL_56;
                      }
LABEL_54:
                      __break(1u);
                      goto LABEL_55;
                    }
LABEL_53:
                    __break(1u);
                    goto LABEL_54;
                  }
LABEL_52:
                  __break(1u);
                  goto LABEL_53;
                }
LABEL_51:
                __break(1u);
                goto LABEL_52;
              }
LABEL_50:
              __break(1u);
              goto LABEL_51;
            }
LABEL_49:
            __break(1u);
            goto LABEL_50;
          }
LABEL_48:
          __break(1u);
          goto LABEL_49;
        }
LABEL_47:
        __break(1u);
        goto LABEL_48;
      }
    }
    __break(1u);
    goto LABEL_47;
  }
  sub_1D2C45258(v57, v59);
  v61 = v93;

  sub_1D2C45258(a1, a2);
LABEL_18:
  type metadata accessor for KVACCredentialWrapper();
  swift_deallocPartialClassInstance();
  return v61;
}

unint64_t sub_1D2C6009C()
{
  unint64_t result;

  result = qword_1EFC9FCB8;
  if (!qword_1EFC9FCB8)
  {
    result = MEMORY[0x1D8245F38](&unk_1D2CAD6CC, &type metadata for KVACErrors);
    atomic_store(result, (unint64_t *)&qword_1EFC9FCB8);
  }
  return result;
}

uint64_t type metadata accessor for KVACCredentialWrapper()
{
  return objc_opt_self();
}

char *sub_1D2C6010C(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  __int128 v6;
  id v7;
  char *result;
  _OWORD v9[7];
  _OWORD v10[7];
  _OWORD v11[3];

  v6 = *(_OWORD *)(v2 + OBJC_IVAR____TtC16CryptoKitPrivate21KVACCredentialWrapper_credential + 16);
  v11[0] = *(_OWORD *)(v2 + OBJC_IVAR____TtC16CryptoKitPrivate21KVACCredentialWrapper_credential);
  v11[1] = v6;
  v11[2] = *(_OWORD *)(v2 + OBJC_IVAR____TtC16CryptoKitPrivate21KVACCredentialWrapper_credential + 32);
  sub_1D2C69AB4((uint64_t)v11);
  sub_1D2C5DDE8(a1, a2, (uint64_t)v9);
  sub_1D2C69B0C((uint64_t)v11);
  if (v3)
  {
    result = (char *)swift_unexpectedError();
    __break(1u);
  }
  else
  {
    v10[4] = v9[4];
    v10[5] = v9[5];
    v10[6] = v9[6];
    v10[0] = v9[0];
    v10[1] = v9[1];
    v10[2] = v9[2];
    v10[3] = v9[3];
    v7 = objc_allocWithZone((Class)type metadata accessor for KVACPresentationWrapper());
    return sub_1D2C60564((uint64_t)v10);
  }
  return result;
}

void KVACCredentialWrapper.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

id KVACCredentialWrapper.__deallocating_deinit()
{
  return sub_1D2C63D6C(type metadata accessor for KVACCredentialWrapper);
}

uint64_t KVACPresentationWrapper.serverKeyId.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR____TtC16CryptoKitPrivate23KVACPresentationWrapper_serverKeyId);
  sub_1D2C45028(v1, *(_QWORD *)(v0 + OBJC_IVAR____TtC16CryptoKitPrivate23KVACPresentationWrapper_serverKeyId + 8));
  return v1;
}

uint64_t KVACPresentationWrapper.tag.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR____TtC16CryptoKitPrivate23KVACPresentationWrapper_tag);
  sub_1D2C45028(v1, *(_QWORD *)(v0 + OBJC_IVAR____TtC16CryptoKitPrivate23KVACPresentationWrapper_tag + 8));
  return v1;
}

uint64_t KVACPresentationWrapper.prefix.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR____TtC16CryptoKitPrivate23KVACPresentationWrapper_prefix);
  sub_1D2C45028(v1, *(_QWORD *)(v0 + OBJC_IVAR____TtC16CryptoKitPrivate23KVACPresentationWrapper_prefix + 8));
  return v1;
}

uint64_t KVACPresentationWrapper.presentationData.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR____TtC16CryptoKitPrivate23KVACPresentationWrapper_presentationData);
  sub_1D2C45028(v1, *(_QWORD *)(v0 + OBJC_IVAR____TtC16CryptoKitPrivate23KVACPresentationWrapper_presentationData + 8));
  return v1;
}

char *sub_1D2C60564(uint64_t a1)
{
  void *v1;
  uint64_t v2;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  void *v7;
  uint64_t v8;
  char *v9;
  void *v10;
  char *v11;
  char *result;
  char *v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  char *v17;
  unint64_t v18;
  char *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  __int128 v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  id v32;
  unint64_t v33;
  char *v34;
  uint64_t v35;
  void *v36;
  _BYTE *v37;
  _BYTE *v38;
  int v39;
  _BYTE *v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  __int128 v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  objc_super v52;
  __int128 v53;
  __int128 v54;
  id v55[2];
  __int128 v56;
  __int128 v57;
  uint64_t v58;
  __int128 v59;
  _BYTE v60[32];
  uint64_t v61;
  __int128 v62;
  unint64_t v63;

  v4 = *(_OWORD *)(a1 + 16);
  v59 = *(_OWORD *)a1;
  *(_OWORD *)v60 = v4;
  *(_OWORD *)&v60[16] = *(_OWORD *)(a1 + 32);
  v61 = *(_QWORD *)(a1 + 48);
  v5 = *(_OWORD *)(a1 + 88);
  v6 = *(_OWORD *)(a1 + 72);
  *(_OWORD *)v55 = *(_OWORD *)(a1 + 56);
  v56 = v6;
  v57 = v5;
  v58 = *(_QWORD *)(a1 + 104);
  v7 = (void *)v59;
  v8 = v5;
  v9 = v1;
  sub_1D2C6B618((uint64_t)&v59);
  sub_1D2C6BB2C((uint64_t)v55);
  if (!objc_msgSend(v7, sel_isEqual_, v8)
    || (v10 = *(void **)v60, (objc_msgSend(*(id *)v60, sel_isEqual_, *((_QWORD *)&v56 + 1)) & 1) == 0))
  {
    sub_1D2C6009C();
    swift_allocError();
    *v37 = 1;
    swift_willThrow();
    sub_1D2C6B244(a1);
    sub_1D2C6BB98((uint64_t)v55);
    sub_1D2C6B684((uint64_t)&v59);
LABEL_12:

    type metadata accessor for KVACPresentationWrapper();
    swift_deallocPartialClassInstance();
    return v9;
  }
  v62 = *(_OWORD *)&v60[8];
  v11 = &v9[OBJC_IVAR____TtC16CryptoKitPrivate23KVACPresentationWrapper_serverKeyId];
  *(_OWORD *)&v9[OBJC_IVAR____TtC16CryptoKitPrivate23KVACPresentationWrapper_serverKeyId] = *(_OWORD *)&v60[8];
  sub_1D2C6B7C8((uint64_t)&v62);
  result = (char *)objc_msgSend(v7, sel_serializedPublicKey_, 1);
  if (!result)
  {
    __break(1u);
    goto LABEL_20;
  }
  v13 = result;
  v14 = sub_1D2CAA96C();
  v16 = v15;

  result = (char *)objc_msgSend(*((id *)&v59 + 1), sel_serializedPublicKey_, 1);
  if (!result)
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  v17 = result;
  v51 = sub_1D2CAA96C();
  v63 = v18;

  result = (char *)objc_msgSend(v10, sel_serializedPublicKey_, 1);
  if (!result)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  v19 = result;
  v20 = sub_1D2CAA96C();
  v50 = v21;

  if (*(_QWORD *)(v61 + 16) != 3)
  {
    sub_1D2C6009C();
    swift_allocError();
    *v38 = 0;
    swift_willThrow();
    goto LABEL_15;
  }
  v22 = sub_1D2C69528(*(void **)&v60[24], v61);
  if (v2)
  {
LABEL_15:
    sub_1D2C6B244(a1);
    v39 = 0;
LABEL_16:
    sub_1D2C45258(v20, v50);
    sub_1D2C45258(v51, v63);
    sub_1D2C45258(v14, v16);
    sub_1D2C6BB98((uint64_t)v55);
    sub_1D2C6B684((uint64_t)&v59);
    sub_1D2C45258(*(_QWORD *)v11, *((_QWORD *)v11 + 1));
    if (v39)
    {
      sub_1D2C45258(*(_QWORD *)&v9[OBJC_IVAR____TtC16CryptoKitPrivate23KVACPresentationWrapper_tag], *(_QWORD *)&v9[OBJC_IVAR____TtC16CryptoKitPrivate23KVACPresentationWrapper_tag + 8]);
      sub_1D2C45258(*(_QWORD *)&v9[OBJC_IVAR____TtC16CryptoKitPrivate23KVACPresentationWrapper_prefix], *(_QWORD *)&v9[OBJC_IVAR____TtC16CryptoKitPrivate23KVACPresentationWrapper_prefix + 8]);
    }
    goto LABEL_12;
  }
  v49 = v22;
  *(_QWORD *)&v54 = v14;
  *((_QWORD *)&v54 + 1) = v16;
  v47 = v14;
  v48 = v16;
  v24 = v23;
  sub_1D2C45028(v14, v16);
  v25 = v63;
  sub_1D2C45028(v51, v63);
  sub_1D2C5EDA4(v51, v25);
  sub_1D2C45258(v51, v25);
  v53 = v54;
  sub_1D2C45028(v14, *((unint64_t *)&v54 + 1));
  sub_1D2C45028(v20, v50);
  sub_1D2C5EDA4(v20, v50);
  sub_1D2C45258(v20, v50);
  sub_1D2C45258(v14, *((unint64_t *)&v54 + 1));
  sub_1D2C45028(v14, *((unint64_t *)&v54 + 1));
  sub_1D2C45028(v49, v24);
  sub_1D2C5EDA4(v49, v24);
  v46 = v24;
  sub_1D2C45258(v49, v24);
  sub_1D2C45258(v14, *((unint64_t *)&v54 + 1));
  v26 = v54;
  result = (char *)objc_msgSend(v55[0], sel_serializedPublicKey_, 1);
  if (result)
  {
    v27 = result;
    v28 = sub_1D2CAA96C();
    v30 = v29;

    v31 = (uint64_t *)&v9[OBJC_IVAR____TtC16CryptoKitPrivate23KVACPresentationWrapper_tag];
    *(_QWORD *)&v45 = v28;
    *((_QWORD *)&v45 + 1) = v30;
    *v31 = v28;
    v31[1] = v30;
    v32 = v55[1];
    v33 = v56;
    v34 = &v9[OBJC_IVAR____TtC16CryptoKitPrivate23KVACPresentationWrapper_prefix];
    *(id *)v34 = v55[1];
    *((_QWORD *)v34 + 1) = v33;
    v35 = v58;
    if (*(_QWORD *)(v58 + 16) == 2)
    {
      v36 = (void *)*((_QWORD *)&v57 + 1);
      sub_1D2C45028((uint64_t)v32, v33);
      v44 = sub_1D2C69528(v36, v35);
      v53 = v45;
      v43 = v41;
      sub_1D2C45028(v45, *((unint64_t *)&v45 + 1));
      sub_1D2C45028((uint64_t)v32, v33);
      sub_1D2C45028(v45, *((unint64_t *)&v45 + 1));
      sub_1D2C5EDA4((uint64_t)v32, v33);
      sub_1D2C45258((uint64_t)v32, v33);
      sub_1D2C45258(v45, *((unint64_t *)&v45 + 1));
      v54 = v45;
      sub_1D2C45028(v45, *((unint64_t *)&v45 + 1));
      sub_1D2C45028(v44, v43);
      sub_1D2C5EDA4(v44, v43);
      sub_1D2C45258(v44, v43);
      sub_1D2C45258(v45, *((unint64_t *)&v45 + 1));
      v42 = *((_QWORD *)v11 + 1);
      *(_QWORD *)&v53 = *(_QWORD *)v11;
      *((_QWORD *)&v53 + 1) = v42;
      sub_1D2C45028(v53, v42);
      sub_1D2C45028(v53, v42);
      sub_1D2C45028(v26, *((unint64_t *)&v26 + 1));
      sub_1D2C5EDA4(v26, *((uint64_t *)&v26 + 1));
      sub_1D2C45258(v26, *((unint64_t *)&v26 + 1));
      sub_1D2C45258(v53, v42);
      v54 = v53;
      sub_1D2C45028(v53, v42);
      sub_1D2C45028(v45, *((unint64_t *)&v45 + 1));
      sub_1D2C5EDA4(v45, *((uint64_t *)&v45 + 1));
      sub_1D2C45258(v45, *((unint64_t *)&v45 + 1));
      sub_1D2C45258(v44, v43);
      sub_1D2C45258(v26, *((unint64_t *)&v26 + 1));
      sub_1D2C45258(v49, v46);
      sub_1D2C45258(v20, v50);
      sub_1D2C45258(v51, v63);
      sub_1D2C45258(v47, v48);
      sub_1D2C6BB98((uint64_t)v55);
      sub_1D2C6B684((uint64_t)&v59);
      sub_1D2C45258(v53, v42);
      sub_1D2C45258(v45, *((unint64_t *)&v45 + 1));
      *(_OWORD *)&v9[OBJC_IVAR____TtC16CryptoKitPrivate23KVACPresentationWrapper_presentationData] = v53;

      v52.receiver = v9;
      v52.super_class = (Class)type metadata accessor for KVACPresentationWrapper();
      v9 = (char *)objc_msgSendSuper2(&v52, sel_init);
      sub_1D2C6B244(a1);
      return v9;
    }
    sub_1D2C6009C();
    swift_allocError();
    *v40 = 0;
    sub_1D2C45028((uint64_t)v32, v33);
    swift_willThrow();
    sub_1D2C6B244(a1);
    sub_1D2C45258(v26, *((unint64_t *)&v26 + 1));
    sub_1D2C45258(v49, v24);
    v39 = 1;
    v14 = v47;
    v16 = v48;
    goto LABEL_16;
  }
LABEL_22:
  __break(1u);
  return result;
}

void KVACPresentationWrapper.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

id KVACPresentationWrapper.__deallocating_deinit()
{
  return sub_1D2C63D6C(type metadata accessor for KVACPresentationWrapper);
}

char *KVACClient.__allocating_init(tokenChallenge:)(uint64_t a1, unint64_t a2)
{
  objc_class *v2;
  id v5;

  v5 = objc_allocWithZone(v2);
  return KVACClient.init(tokenChallenge:)(a1, a2);
}

char *KVACClient.init(tokenChallenge:)(uint64_t a1, unint64_t a2)
{
  void *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  id v21;
  id v22;
  char *result;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  id v29;
  char *v30;
  objc_class *v31;
  uint64_t v32;
  unint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  objc_super v37;
  uint64_t v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  uint64_t v42;

  v36 = a1;
  v4 = sub_1D2CAAE4C();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = (char *)&v32 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v34 = v2;
  v8 = sub_1D2C5D050(0xD000000000000027, 0x80000001D2CB0CA0);
  v10 = v9;
  sub_1D2CAAE28();
  v11 = sub_1D2CAAE1C();
  v13 = v12;
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  if (v13 >> 60 == 15)
  {
    __break(1u);
LABEL_14:
    result = (char *)swift_bridgeObjectRelease();
    __break(1u);
    goto LABEL_15;
  }
  v38 = v11;
  *(_QWORD *)&v39 = v13;
  sub_1D2C69B84(v11, v13);
  sub_1D2C45028(v8, v10);
  sub_1D2C5EDA4(v8, v10);
  sub_1D2C45258(v8, v10);
  sub_1D2C6BAE4(v11, v13);
  v15 = v38;
  v14 = v39;
  sub_1D2CAAD50();
  sub_1D2C5AE40((unint64_t *)&qword_1ED985C78, (uint64_t (*)(uint64_t))MEMORY[0x1E0CA9860], MEMORY[0x1E0CA9858]);
  v16 = sub_1D2CAABF4();
  v17 = v35;
  v18 = v36;
  v19 = sub_1D2C64504(v36, a2, 1, v15, v14, v16, 0);
  v35 = v17;
  if (v17)
  {
    sub_1D2C45258(v15, v14);
    v20 = v34;

    sub_1D2C45258(v18, a2);
    sub_1D2C45258(v8, v10);
    goto LABEL_10;
  }
  v33 = a2;
  if (!*(_QWORD *)(v19 + 16))
    goto LABEL_14;
  v21 = *(id *)(v19 + 32);
  swift_bridgeObjectRelease();
  sub_1D2C45258(v15, v14);
  sub_1D2C45258(v8, v10);
  v22 = v21;
  sub_1D2CAAC00();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED985DB0);
  swift_dynamicCast();
  result = (char *)objc_msgSend(objc_allocWithZone(MEMORY[0x1E0D1BD78]), sel_initWithRandomScalarInGroup_, v42);
  if (!result)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  v24 = (uint64_t)result;
  sub_1D2CAAC00();
  swift_dynamicCast();
  result = (char *)objc_msgSend(objc_allocWithZone(MEMORY[0x1E0D1BD78]), sel_initWithRandomScalarInGroup_, v42);
  if (!result)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  v25 = (uint64_t)result;
  sub_1D2CAAC00();
  swift_dynamicCast();
  result = (char *)objc_msgSend(objc_allocWithZone(MEMORY[0x1E0D1BD78]), sel_initWithRandomScalarInGroup_, v42);
  if (result)
  {
    v26 = v35;
    sub_1D2C61164(4, v24, (uint64_t)v22, v25, (uint64_t)result, &v38);
    v27 = v33;
    v28 = v36;
    if (!v26)
    {

      v29 = v34;
      v30 = &v34[OBJC_IVAR____TtC16CryptoKitPrivate10KVACClient_client];
      *(_QWORD *)v30 = v38;
      *(_OWORD *)(v30 + 8) = v39;
      *(_OWORD *)(v30 + 24) = v40;
      *(_OWORD *)(v30 + 40) = v41;

      v31 = (objc_class *)type metadata accessor for KVACClient();
      v37.receiver = v29;
      v37.super_class = v31;
      v20 = (char *)objc_msgSendSuper2(&v37, sel_init);
      sub_1D2C45258(v28, v27);
      return v20;
    }
    sub_1D2C45258(v36, v33);

    v20 = v34;
LABEL_10:
    type metadata accessor for KVACClient();
    swift_deallocPartialClassInstance();
    return v20;
  }
LABEL_17:
  __break(1u);
  return result;
}

uint64_t sub_1D2C61164@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, _QWORD *a6@<X8>)
{
  uint64_t v6;
  id v9;
  id v10;
  void *v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t result;
  uint64_t v25;

  sub_1D2CAAD50();
  sub_1D2C5AE40((unint64_t *)&qword_1ED985C78, (uint64_t (*)(uint64_t))MEMORY[0x1E0CA9860], MEMORY[0x1E0CA9858]);
  sub_1D2CAAC00();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED985DB0);
  swift_dynamicCast();
  v9 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0D1BD70]), sel_initWithGeneratorForCP_, v25);
  v10 = objc_msgSend(v9, sel_serializedPublicKey_, 1);
  if (v10)
  {
    v11 = v10;
    v12 = sub_1D2CAA96C();
    v14 = v13;

    v15 = sub_1D2C5D050(0xD000000000000023, 0x80000001D2CB1120);
    v17 = v16;
    sub_1D2C92114(v12, v14, v15, v16);
    if (!v6)
    {
      v19 = v18;
      sub_1D2C45258(v15, v17);
      result = sub_1D2C45258(v12, v14);
      *a6 = a1;
      a6[1] = a2;
      a6[2] = a3;
      a6[3] = a4;
      a6[4] = a5;
      a6[5] = v9;
      a6[6] = v19;
      return result;
    }
  }
  else
  {
    __break(1u);
  }
  result = swift_unexpectedError();
  __break(1u);
  return result;
}

id sub_1D2C61324()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  void *v6;
  void *v7;
  void *v8;
  uint64_t v9;
  id v10;
  id result;

  sub_1D2C5E488(*(id *)(v0 + OBJC_IVAR____TtC16CryptoKitPrivate10KVACClient_client + 8), *(id *)(v0 + OBJC_IVAR____TtC16CryptoKitPrivate10KVACClient_client + 16), *(id *)(v0 + OBJC_IVAR____TtC16CryptoKitPrivate10KVACClient_client + 24), (uint64_t)*(id *)(v0 + OBJC_IVAR____TtC16CryptoKitPrivate10KVACClient_client + 32), *(id *)(v0 + OBJC_IVAR____TtC16CryptoKitPrivate10KVACClient_client + 40), *(id *)(v0 + OBJC_IVAR____TtC16CryptoKitPrivate10KVACClient_client + 48));
  if (v1)
  {
    result = (id)swift_unexpectedError();
    __break(1u);
  }
  else
  {
    v6 = v2;
    v7 = v3;
    v8 = v4;
    v9 = v5;
    v10 = objc_allocWithZone((Class)type metadata accessor for KVACRequestWrapper());
    return sub_1D2C5F014(v6, v7, v8, v9);
  }
  return result;
}

id sub_1D2C61564(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  void *v11;
  void *v12;
  void *v13;
  id v14;
  id v15;
  id v16;
  id v17;
  id v18;
  id v19;
  id v20;
  id v21;
  uint64_t v22;
  id v23;
  id result;
  _OWORD v25[3];
  _OWORD v26[3];
  _OWORD v27[6];
  uint64_t v28;
  uint64_t v29;

  v3 = *(void **)(v2 + OBJC_IVAR____TtC16CryptoKitPrivate10KVACClient_client + 8);
  v4 = *(void **)(v2 + OBJC_IVAR____TtC16CryptoKitPrivate10KVACClient_client + 24);
  v5 = *(void **)(v2 + OBJC_IVAR____TtC16CryptoKitPrivate10KVACClient_client + 32);
  v7 = *(void **)(v2 + OBJC_IVAR____TtC16CryptoKitPrivate10KVACClient_client + 40);
  v6 = *(void **)(v2 + OBJC_IVAR____TtC16CryptoKitPrivate10KVACClient_client + 48);
  v8 = *(_OWORD *)(a1 + OBJC_IVAR____TtC16CryptoKitPrivate19KVACIssuanceWrapper_issuance + 80);
  v27[4] = *(_OWORD *)(a1 + OBJC_IVAR____TtC16CryptoKitPrivate19KVACIssuanceWrapper_issuance + 64);
  v27[5] = v8;
  v28 = *(_QWORD *)(a1 + OBJC_IVAR____TtC16CryptoKitPrivate19KVACIssuanceWrapper_issuance + 96);
  v9 = *(_OWORD *)(a1 + OBJC_IVAR____TtC16CryptoKitPrivate19KVACIssuanceWrapper_issuance + 16);
  v27[0] = *(_OWORD *)(a1 + OBJC_IVAR____TtC16CryptoKitPrivate19KVACIssuanceWrapper_issuance);
  v27[1] = v9;
  v10 = *(_OWORD *)(a1 + OBJC_IVAR____TtC16CryptoKitPrivate19KVACIssuanceWrapper_issuance + 48);
  v27[2] = *(_OWORD *)(a1 + OBJC_IVAR____TtC16CryptoKitPrivate19KVACIssuanceWrapper_issuance + 32);
  v27[3] = v10;
  v11 = *(void **)(a2 + OBJC_IVAR____TtC16CryptoKitPrivate18KVACRequestWrapper_request);
  v12 = *(void **)(a2 + OBJC_IVAR____TtC16CryptoKitPrivate18KVACRequestWrapper_request + 8);
  v13 = *(void **)(a2 + OBJC_IVAR____TtC16CryptoKitPrivate18KVACRequestWrapper_request + 16);
  sub_1D2C69BB8((uint64_t)v27);
  v14 = v11;
  v15 = v12;
  v16 = v13;
  sub_1D2CAAF0C();
  v17 = v3;
  v18 = v4;
  v19 = v5;
  v20 = v7;
  v21 = v6;
  v22 = v29;
  sub_1D2C5D604((uint64_t)v27, v14, v15, v16, v17, v18, v19, (uint64_t)v25, v20, v21);
  if (v22)
  {
    result = (id)swift_unexpectedError();
    __break(1u);
  }
  else
  {
    v26[0] = v25[0];
    v26[1] = v25[1];
    v26[2] = v25[2];
    v23 = objc_allocWithZone((Class)type metadata accessor for KVACCredentialWrapper());
    return sub_1D2C5F44C((uint64_t)v26);
  }
  return result;
}

id KVACClient.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

void KVACClient.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

id KVACClient.__deallocating_deinit()
{
  return sub_1D2C63D6C(type metadata accessor for KVACClient);
}

uint64_t KVACIssuanceWrapper.keyId.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR____TtC16CryptoKitPrivate19KVACIssuanceWrapper_keyId);
  sub_1D2C45028(v1, *(_QWORD *)(v0 + OBJC_IVAR____TtC16CryptoKitPrivate19KVACIssuanceWrapper_keyId + 8));
  return v1;
}

uint64_t KVACIssuanceWrapper.issuanceData.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR____TtC16CryptoKitPrivate19KVACIssuanceWrapper_issuanceData);
  sub_1D2C45028(v1, *(_QWORD *)(v0 + OBJC_IVAR____TtC16CryptoKitPrivate19KVACIssuanceWrapper_issuanceData + 8));
  return v1;
}

id sub_1D2C61904(uint64_t a1)
{
  char *v1;
  uint64_t v2;
  char *v4;
  void *v5;
  char *v6;
  id result;
  void *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  void *v12;
  unint64_t v13;
  unint64_t v14;
  void *v15;
  unint64_t v16;
  void *v17;
  unint64_t v18;
  void *v19;
  unint64_t v20;
  void *v21;
  unint64_t v22;
  void *v23;
  unint64_t v24;
  void *v25;
  uint64_t v26;
  unint64_t v27;
  void *v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  __int128 v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  char *v36;
  uint64_t v37;
  unint64_t v38;
  char *v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  id v45;
  _BYTE *v46;
  unint64_t v47;
  unint64_t v48;
  char *v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  uint64_t v59;
  unint64_t v60;
  unint64_t v61;
  uint64_t v62;
  unint64_t v63;
  objc_super v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  uint64_t v68;

  v67 = *(_OWORD *)(a1 + 72);
  v4 = &v1[OBJC_IVAR____TtC16CryptoKitPrivate19KVACIssuanceWrapper_keyId];
  *(_OWORD *)&v1[OBJC_IVAR____TtC16CryptoKitPrivate19KVACIssuanceWrapper_keyId] = v67;
  v5 = *(void **)a1;
  v6 = v1;
  sub_1D2C6B7C8((uint64_t)&v67);
  result = objc_msgSend(v5, sel_serializedPublicKey_, 1);
  if (!result)
  {
    __break(1u);
    goto LABEL_17;
  }
  v8 = result;
  v9 = sub_1D2CAA96C();
  v11 = v10;

  result = objc_msgSend(*(id *)(a1 + 8), sel_serializedPublicKey_, 1);
  if (!result)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  v12 = result;
  v68 = sub_1D2CAA96C();
  v14 = v13;

  result = objc_msgSend(*(id *)(a1 + 16), sel_serializedPublicKey_, 1);
  if (!result)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  v15 = result;
  v62 = sub_1D2CAA96C();
  v63 = v16;

  result = objc_msgSend(*(id *)(a1 + 24), sel_serializedPublicKey_, 1);
  if (!result)
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  v17 = result;
  v54 = sub_1D2CAA96C();
  v61 = v18;

  result = objc_msgSend(*(id *)(a1 + 32), sel_serializedPublicKey_, 1);
  if (!result)
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  v19 = result;
  v59 = sub_1D2CAA96C();
  v60 = v20;

  result = objc_msgSend(*(id *)(a1 + 40), sel_serializedPublicKey_, 1);
  if (!result)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  v21 = result;
  v53 = sub_1D2CAA96C();
  v58 = v22;

  result = objc_msgSend(*(id *)(a1 + 48), sel_serializedPublicKey_, 1);
  if (!result)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v23 = result;
  v56 = sub_1D2CAA96C();
  v57 = v24;

  result = objc_msgSend(*(id *)(a1 + 56), sel_serializedPublicKey_, 1);
  if (!result)
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  v25 = result;
  v49 = v4;
  v26 = sub_1D2CAA96C();
  v51 = v27;
  v52 = v26;

  result = objc_msgSend(*(id *)(a1 + 64), sel_serializedPublicKey_, 1);
  v50 = a1;
  if (result)
  {
    v28 = result;
    v55 = sub_1D2CAA96C();
    v30 = v29;

    *(_QWORD *)&v65 = v9;
    *((_QWORD *)&v65 + 1) = v11;
    v48 = v11;
    sub_1D2C45028(v9, v11);
    v31 = v68;
    sub_1D2C45028(v68, v14);
    sub_1D2C5EDA4(v31, v14);
    sub_1D2C45258(v31, v14);
    sub_1D2C45028(v9, *((unint64_t *)&v65 + 1));
    sub_1D2C45028(v62, v63);
    sub_1D2C5EDA4(v62, v63);
    sub_1D2C45258(v62, v63);
    sub_1D2C45258(v9, *((unint64_t *)&v65 + 1));
    sub_1D2C45028(v9, *((unint64_t *)&v65 + 1));
    sub_1D2C45028(v54, v61);
    sub_1D2C5EDA4(v54, v61);
    sub_1D2C45258(v54, v61);
    sub_1D2C45258(v9, *((unint64_t *)&v65 + 1));
    sub_1D2C45028(v9, *((unint64_t *)&v65 + 1));
    sub_1D2C45028(v59, v60);
    sub_1D2C5EDA4(v59, v60);
    sub_1D2C45258(v59, v60);
    sub_1D2C45258(v9, *((unint64_t *)&v65 + 1));
    sub_1D2C45028(v9, *((unint64_t *)&v65 + 1));
    sub_1D2C45028(v53, v58);
    sub_1D2C5EDA4(v53, v58);
    sub_1D2C45258(v53, v58);
    sub_1D2C45258(v9, *((unint64_t *)&v65 + 1));
    sub_1D2C45028(v9, *((unint64_t *)&v65 + 1));
    sub_1D2C45028(v56, v57);
    sub_1D2C5EDA4(v56, v57);
    sub_1D2C45258(v56, v57);
    sub_1D2C45258(v9, *((unint64_t *)&v65 + 1));
    sub_1D2C45028(v9, *((unint64_t *)&v65 + 1));
    sub_1D2C45028(v52, v51);
    sub_1D2C5EDA4(v52, v51);
    sub_1D2C45258(v52, v51);
    sub_1D2C45258(v9, *((unint64_t *)&v65 + 1));
    v66 = v65;
    sub_1D2C45028(v9, *((unint64_t *)&v65 + 1));
    sub_1D2C45028(v55, v30);
    sub_1D2C5EDA4(v55, v30);
    sub_1D2C45258(v55, v30);
    sub_1D2C45258(v9, *((unint64_t *)&v65 + 1));
    v32 = v65;
    v33 = *(_QWORD *)(v50 + 96);
    if (*(_QWORD *)(v33 + 16) == 7)
    {
      v34 = sub_1D2C69528(*(void **)(v50 + 88), v33);
      v36 = v4;
      if (!v2)
      {
        v37 = v34;
        v38 = *((_QWORD *)v4 + 1);
        *(_QWORD *)&v65 = *(_QWORD *)v49;
        *((_QWORD *)&v65 + 1) = v38;
        v47 = v35;
        sub_1D2C45028(v65, v38);
        sub_1D2C45028(v65, v38);
        sub_1D2C45028(v32, *((unint64_t *)&v32 + 1));
        sub_1D2C5EDA4(v32, *((uint64_t *)&v32 + 1));
        sub_1D2C45258(v32, *((unint64_t *)&v32 + 1));
        sub_1D2C45258(v65, v38);
        v66 = v65;
        sub_1D2C45028(v65, v38);
        sub_1D2C45028(v37, v47);
        sub_1D2C5EDA4(v37, v47);
        sub_1D2C45258(v37, v47);
        sub_1D2C45258(v32, *((unint64_t *)&v32 + 1));
        sub_1D2C45258(v55, v30);
        sub_1D2C45258(v52, v51);
        sub_1D2C45258(v56, v57);
        sub_1D2C45258(v53, v58);
        sub_1D2C45258(v59, v60);
        sub_1D2C45258(v54, v61);
        sub_1D2C45258(v62, v63);
        sub_1D2C45258(v68, v14);
        sub_1D2C45258(v9, v48);
        sub_1D2C45258(v65, v38);
        sub_1D2C45258(v37, v47);
        *(_OWORD *)&v6[OBJC_IVAR____TtC16CryptoKitPrivate19KVACIssuanceWrapper_issuanceData] = v65;
        v39 = &v6[OBJC_IVAR____TtC16CryptoKitPrivate19KVACIssuanceWrapper_issuance];
        v41 = *(_OWORD *)(v50 + 16);
        v40 = *(_OWORD *)(v50 + 32);
        *(_OWORD *)v39 = *(_OWORD *)v50;
        *((_OWORD *)v39 + 1) = v41;
        *((_OWORD *)v39 + 2) = v40;
        v43 = *(_OWORD *)(v50 + 64);
        v42 = *(_OWORD *)(v50 + 80);
        v44 = *(_OWORD *)(v50 + 48);
        *((_QWORD *)v39 + 12) = *(_QWORD *)(v50 + 96);
        *((_OWORD *)v39 + 4) = v43;
        *((_OWORD *)v39 + 5) = v42;
        *((_OWORD *)v39 + 3) = v44;
        sub_1D2C69BB8(v50);

        v64.receiver = v6;
        v64.super_class = (Class)type metadata accessor for KVACIssuanceWrapper();
        v45 = objc_msgSendSuper2(&v64, sel_init);
        sub_1D2C6B7F4(v50);
        return v45;
      }
    }
    else
    {
      sub_1D2C6009C();
      swift_allocError();
      *v46 = 0;
      swift_willThrow();
      v36 = v4;
    }
    sub_1D2C6B7F4(v50);
    sub_1D2C45258(v32, *((unint64_t *)&v32 + 1));
    sub_1D2C45258(v55, v30);
    sub_1D2C45258(v52, v51);
    sub_1D2C45258(v56, v57);
    sub_1D2C45258(v53, v58);
    sub_1D2C45258(v59, v60);
    sub_1D2C45258(v54, v61);
    sub_1D2C45258(v62, v63);
    sub_1D2C45258(v68, v14);
    sub_1D2C45258(v9, v48);
    sub_1D2C45258(*(_QWORD *)v36, *((_QWORD *)v36 + 1));
    v45 = v6;

    type metadata accessor for KVACIssuanceWrapper();
    swift_deallocPartialClassInstance();
    return v45;
  }
LABEL_24:
  __break(1u);
  return result;
}

void KVACIssuanceWrapper.__allocating_init(issuanceData:)(uint64_t a1, uint64_t a2)
{
  objc_class *v2;
  id v5;

  v5 = objc_allocWithZone(v2);
  KVACIssuanceWrapper.init(issuanceData:)(a1, a2);
}

void KVACIssuanceWrapper.init(issuanceData:)(uint64_t a1, uint64_t a2)
{
  void *v2;
  void *v4;
  id v5;
  unint64_t v6;
  uint64_t v7;

  v4 = (void *)objc_opt_self();
  sub_1D2CAAD50();
  sub_1D2C5AE40((unint64_t *)&qword_1ED985C78, (uint64_t (*)(uint64_t))MEMORY[0x1E0CA9860], MEMORY[0x1E0CA9858]);
  v5 = v2;
  sub_1D2CAAC00();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED985DB0);
  swift_dynamicCast();
  v6 = (unint64_t)objc_msgSend(v4, sel_groupOrderByteCountForCP_, v7);
  if ((v6 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if ((v6 - 0x1000000000000000) >> 61 == 7)
  {
    __asm { BR              X10 }
  }
  __break(1u);
  JUMPOUT(0x1D2C62B7CLL);
}

uint64_t sub_1D2C62FA4(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t))
{
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v6 = a3;
  v7 = sub_1D2CAA96C();
  v9 = v8;

  return a5(v7, v9);
}

void KVACIssuanceWrapper.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

id KVACIssuanceWrapper.__deallocating_deinit()
{
  return sub_1D2C63D6C(type metadata accessor for KVACIssuanceWrapper);
}

id sub_1D2C6319C(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t *v3;
  uint64_t v4;
  unint64_t v5;
  void *v6;

  v3 = (uint64_t *)(a1 + *a3);
  v4 = *v3;
  v5 = v3[1];
  sub_1D2C45028(*v3, v5);
  v6 = (void *)sub_1D2CAA954();
  sub_1D2C45258(v4, v5);
  return v6;
}

uint64_t KVACServer.keyId.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR____TtC16CryptoKitPrivate10KVACServer_keyId);
  sub_1D2C45028(v1, *(_QWORD *)(v0 + OBJC_IVAR____TtC16CryptoKitPrivate10KVACServer_keyId + 8));
  return v1;
}

id KVACServer.init()()
{
  void *v0;
  char *v1;
  id result;
  void *v3;
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char *v9;
  uint64_t *v10;
  objc_super v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;

  sub_1D2CAAD50();
  sub_1D2C5AE40((unint64_t *)&qword_1ED985C78, (uint64_t (*)(uint64_t))MEMORY[0x1E0CA9860], MEMORY[0x1E0CA9858]);
  v1 = v0;
  sub_1D2CAAC00();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED985DB0);
  swift_dynamicCast();
  result = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0D1BD78]), sel_initWithRandomScalarInGroup_, v12);
  if (!result)
  {
    __break(1u);
    goto LABEL_7;
  }
  v3 = result;
  sub_1D2CAAC00();
  swift_dynamicCast();
  result = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0D1BD78]), sel_initWithRandomScalarInGroup_, v12);
  if (!result)
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  v4 = result;
  sub_1D2CAAC00();
  swift_dynamicCast();
  result = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0D1BD78]), sel_initWithRandomScalarInGroup_, v12);
  if (!result)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  v5 = result;
  sub_1D2CAAC00();
  swift_dynamicCast();
  result = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0D1BD78]), sel_initWithRandomScalarInGroup_, v12);
  if (result)
  {
    sub_1D2C5B054(4, v3, v4, v5, result, &v13);
    v7 = v18;
    v6 = v19;
    v8 = v20;
    v9 = &v1[OBJC_IVAR____TtC16CryptoKitPrivate10KVACServer_server];
    *(_QWORD *)v9 = v13;
    *(_OWORD *)(v9 + 8) = v14;
    *(_OWORD *)(v9 + 24) = v15;
    *(_OWORD *)(v9 + 40) = v16;
    *(_OWORD *)(v9 + 56) = v17;
    *((_QWORD *)v9 + 9) = v7;
    *((_QWORD *)v9 + 10) = v6;
    *((_QWORD *)v9 + 11) = v8;
    v10 = (uint64_t *)&v1[OBJC_IVAR____TtC16CryptoKitPrivate10KVACServer_keyId];
    *v10 = v6;
    v10[1] = v8;
    sub_1D2C45028(v6, v8);

    v11.receiver = v1;
    v11.super_class = (Class)type metadata accessor for KVACServer();
    return objc_msgSendSuper2(&v11, sel_init);
  }
LABEL_9:
  __break(1u);
  return result;
}

char *sub_1D2C634C0(uint64_t a1, uint64_t a2)
{
  char *v2;
  uint64_t v3;
  void *v4;
  void *v5;
  void *v6;
  uint64_t v7;
  void *v8;
  void *v9;
  void *v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _OWORD v16[6];
  uint64_t v17;
  _OWORD v18[6];
  uint64_t v19;
  _OWORD v20[6];

  sub_1D2C6A2F8(a1, a2);
  if (!v3)
  {
    v8 = v4;
    v9 = v5;
    v10 = v6;
    v11 = v7;
    v12 = *(_OWORD *)&v2[OBJC_IVAR____TtC16CryptoKitPrivate10KVACServer_server + 48];
    v20[2] = *(_OWORD *)&v2[OBJC_IVAR____TtC16CryptoKitPrivate10KVACServer_server + 32];
    v20[3] = v12;
    v13 = *(_OWORD *)&v2[OBJC_IVAR____TtC16CryptoKitPrivate10KVACServer_server + 80];
    v20[4] = *(_OWORD *)&v2[OBJC_IVAR____TtC16CryptoKitPrivate10KVACServer_server + 64];
    v20[5] = v13;
    v14 = *(_OWORD *)&v2[OBJC_IVAR____TtC16CryptoKitPrivate10KVACServer_server + 16];
    v20[0] = *(_OWORD *)&v2[OBJC_IVAR____TtC16CryptoKitPrivate10KVACServer_server];
    v20[1] = v14;
    sub_1D2C6A764((uint64_t)v20);
    sub_1D2C5B2CC(v8, v9, v10, v11, v16);
    sub_1D2C6A7F8((uint64_t)v20);
    v18[4] = v16[4];
    v18[5] = v16[5];
    v19 = v17;
    v18[0] = v16[0];
    v18[1] = v16[1];
    v18[2] = v16[2];
    v18[3] = v16[3];
    objc_allocWithZone((Class)type metadata accessor for KVACIssuanceWrapper());
    v2 = (char *)sub_1D2C61904((uint64_t)v18);
    swift_bridgeObjectRelease();

  }
  return v2;
}

uint64_t sub_1D2C636D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  uint64_t v21;
  unint64_t v22;
  char *v23;
  char v24;
  char v25;
  char *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  uint64_t v34;
  void *v35;
  char *v36;
  id v37;
  id v38;
  id v39;
  id v40;
  char *v41;
  id v42;
  unint64_t v43;
  void *v44;
  void *v45;
  int v46;
  int v47;
  int v48;
  uint64_t result;
  id v50;
  id v51;
  id v52;
  unsigned int v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  void *v57;
  id v58;
  id v59;
  id v60;
  id v61;
  char *v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  uint64_t v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  uint64_t v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  uint64_t v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  uint64_t v78;

  v8 = sub_1D2CAAE4C();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8);
  v11 = (char *)&v54 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1D2C6A890(a1, a2);
  v12 = sub_1D2C5D050(0xD000000000000027, 0x80000001D2CB0CA0);
  v14 = v13;
  sub_1D2CAAE28();
  v15 = sub_1D2CAAE1C();
  v17 = v16;
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  if (v17 >> 60 == 15)
  {
    __break(1u);
    goto LABEL_17;
  }
  *(_QWORD *)&v75 = v15;
  *((_QWORD *)&v75 + 1) = v17;
  sub_1D2C69B84(v15, v17);
  sub_1D2C45028(v12, v14);
  sub_1D2C5EDA4(v12, v14);
  sub_1D2C45258(v12, v14);
  sub_1D2C6BAE4(v15, v17);
  v15 = *((_QWORD *)&v75 + 1);
  v11 = (char *)v75;
  sub_1D2CAAD50();
  sub_1D2C5AE40((unint64_t *)&qword_1ED985C78, (uint64_t (*)(uint64_t))MEMORY[0x1E0CA9860], MEMORY[0x1E0CA9858]);
  v18 = sub_1D2CAABF4();
  v19 = sub_1D2C64504(a3, a4, 1, (uint64_t)v11, v15, v18, 0);
  if (!*(_QWORD *)(v19 + 16))
  {
LABEL_17:
    swift_bridgeObjectRelease();
    __break(1u);
    swift_unexpectedError();
    __break(1u);
    sub_1D2C45258((uint64_t)v11, v15);
    sub_1D2C45258(v12, v14);
    result = swift_unexpectedError();
    __break(1u);
    return result;
  }
  v20 = *(id *)(v19 + 32);
  swift_bridgeObjectRelease();
  sub_1D2C45258((uint64_t)v11, v15);
  sub_1D2C45258(v12, v14);
  v76 = v64;
  v77 = v65;
  v75 = v63;
  v78 = v66;
  v21 = *((_QWORD *)&v64 + 1);
  v22 = v65;
  v23 = v62;
  sub_1D2C45028(*((uint64_t *)&v64 + 1), v65);
  sub_1D2C59C44(v21, v22);
  v25 = v24;
  sub_1D2C45258(v21, v22);
  if ((v25 & 1) == 0)
  {

    goto LABEL_8;
  }
  v26 = &v23[OBJC_IVAR____TtC16CryptoKitPrivate10KVACServer_server];
  v27 = *(void **)&v23[OBJC_IVAR____TtC16CryptoKitPrivate10KVACServer_server + 8];
  v28 = *(void **)&v23[OBJC_IVAR____TtC16CryptoKitPrivate10KVACServer_server + 16];
  v57 = 0;
  v29 = *(void **)&v23[OBJC_IVAR____TtC16CryptoKitPrivate10KVACServer_server + 24];
  v30 = (void *)*((_QWORD *)v26 + 4);
  v61 = v20;
  v31 = (void *)*((_QWORD *)v26 + 5);
  v32 = (void *)*((_QWORD *)v26 + 6);
  v33 = (void *)*((_QWORD *)v26 + 7);
  v62 = (char *)*((_QWORD *)v26 + 8);
  v35 = (void *)*((_QWORD *)v26 + 9);
  v34 = *((_QWORD *)v26 + 10);
  v36 = (char *)*((_QWORD *)v26 + 11);
  v71 = v67;
  v72 = v68;
  v73 = v69;
  v74 = v70;
  v56 = *((_QWORD *)&v67 + 1);
  v55 = v68;
  v37 = v27;
  v60 = v28;
  v38 = v29;
  v59 = v30;
  v58 = v31;
  v39 = v32;
  v40 = v33;
  v41 = v62;
  v42 = v35;
  v62 = v36;
  v43 = (unint64_t)v36;
  v44 = v38;
  sub_1D2C45028(v34, v43);
  v45 = v57;
  v46 = sub_1D2C64DC4(v56, v55, v42);
  if (v45)
  {

    sub_1D2C45258(v34, (unint64_t)v62);
LABEL_8:
    sub_1D2C6B244((uint64_t)&v63);
    return 0;
  }
  v47 = v46;
  v48 = sub_1D2C5C1C4((uint64_t)v37, (uint64_t)v60, v44, v39, (uint64_t)v61, v34, (uint64_t)v62, v41, v42);
  LODWORD(v55) = v48;
  v50 = v58;
  LODWORD(v57) = v47;
  v51 = v59;
  v52 = v60;
  v56 = v34;
  if (objc_msgSend(*((id *)&v72 + 1), sel_isEqual_, (_QWORD)v76))
  {
    v53 = objc_msgSend((id)v73, sel_isEqual_, (_QWORD)v75);

    sub_1D2C45258(v56, (unint64_t)v62);
    sub_1D2C6B244((uint64_t)&v63);
    if ((v57 & 1) != 0)
      return v55 & v53;
    return 0;
  }

  sub_1D2C45258(v56, (unint64_t)v62);
  sub_1D2C6B244((uint64_t)&v63);
  v53 = 0;
  result = 0;
  if ((v57 & 1) != 0)
    return v55 & v53;
  return result;
}

id KVACServer.__deallocating_deinit()
{
  return sub_1D2C63D6C(type metadata accessor for KVACServer);
}

id sub_1D2C63D6C(uint64_t (*a1)(void))
{
  void *v1;
  objc_super v3;

  v3.receiver = v1;
  v3.super_class = (Class)a1();
  return objc_msgSendSuper2(&v3, sel_dealloc);
}

uint64_t sub_1D2C63E4C(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  id v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  char *v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  id v46;
  _QWORD v47[2];
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;

  v60 = a6;
  v13 = sub_1D2CAAE4C();
  v49 = *(_QWORD *)(v13 - 8);
  v50 = v13;
  MEMORY[0x1E0C80A78](v13);
  v48 = (char *)v47 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1D2CAAF0C();
  v58 = sub_1D2C5D050(a1, a2);
  v59 = v15;
  v54 = *(_QWORD *)(a3 + 16);
  v55 = a5;
  v51 = a7;
  if (v54)
  {
    sub_1D2CAAF0C();
    v52 = a3;
    v53 = a4;
    v16 = objc_msgSend(*(id *)(a3 + 32), sel_serializedPublicKey_, 1);
    if (v16)
    {
      v17 = v16;
      sub_1D2CAA96C();
      v19 = v18;

      __asm { BR              X9 }
    }
    __break(1u);
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  v54 = *(_QWORD *)(a5 + 16);
  if (v54)
  {
    sub_1D2CAAF0C();
    v20 = objc_msgSend(*(id *)(a5 + 32), sel_serializedPublicKey_, 1);
    if (v20)
    {
      v21 = v20;
      sub_1D2CAA96C();
      v23 = v22;

      __asm { BR              X9 }
    }
    goto LABEL_18;
  }
  v24 = *(_QWORD *)(a7 + 16);
  if (v24)
  {
    sub_1D2CAAF0C();
    v25 = (unint64_t *)(a7 + 40);
    do
    {
      v27 = *(v25 - 1);
      v26 = *v25;
      sub_1D2CAAF0C();
      v28 = sub_1D2C5D050(v27, v26);
      v30 = v29;
      sub_1D2CAA978();
      sub_1D2C45258(v28, v30);
      v25 += 2;
      --v24;
    }
    while (v24);
    swift_bridgeObjectRelease();
  }
  v32 = v58;
  v31 = v59;
  sub_1D2C45028(v58, v59);
  v33 = sub_1D2C5D050(0x626C6F6F54504B5ALL, 0xEA0000000000786FLL);
  v35 = v34;
  v36 = v48;
  sub_1D2CAAE28();
  v37 = sub_1D2CAAE1C();
  v39 = v38;
  (*(void (**)(char *, uint64_t))(v49 + 8))(v36, v50);
  if (v39 >> 60 == 15)
    goto LABEL_19;
  v56 = v37;
  v57 = v39;
  sub_1D2C69B84(v37, v39);
  sub_1D2C45028(v33, v35);
  sub_1D2C5EDA4(v33, v35);
  sub_1D2C45258(v33, v35);
  sub_1D2C6BAE4(v37, v39);
  v40 = v56;
  v41 = v57;
  sub_1D2CAAD50();
  sub_1D2C5AE40((unint64_t *)&qword_1ED985C78, (uint64_t (*)(uint64_t))MEMORY[0x1E0CA9860], MEMORY[0x1E0CA9858]);
  v42 = sub_1D2CAABF4();
  v43 = v47[1];
  v44 = sub_1D2C64504(v32, v31, 1, v40, v41, v42, 0);
  if (v43)
  {
    sub_1D2C45258(v40, v41);
    sub_1D2C45258(v32, v31);
    sub_1D2C45258(v33, v35);
    return sub_1D2C45258(v32, v31);
  }
  else
  {
    if (!*(_QWORD *)(v44 + 16))
    {
LABEL_20:
      swift_bridgeObjectRelease();
      __break(1u);
      JUMPOUT(0x1D2C644E4);
    }
    v46 = *(id *)(v44 + 32);
    swift_bridgeObjectRelease();
    sub_1D2C45258(v40, v41);
    sub_1D2C45258(v32, v31);
    sub_1D2C45258(v33, v35);
    sub_1D2C45258(v32, v31);
    return (uint64_t)v46;
  }
}

uint64_t sub_1D2C64504(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  id v23;
  void *v24;
  id v25;
  uint64_t v26;
  uint64_t v28;
  uint64_t v29;
  unsigned int v30;
  uint64_t v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  if (a3 < 1)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v10 = a3;
  if ((unsigned __int128)(a3 * (__int128)a6) >> 64 != (a3 * a6) >> 63)
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  v12 = sub_1D2C662F4(a1, a2, a4, a5, a3 * a6);
  if (v8)
    return v7;
  v14 = v12;
  v15 = v13;
  v33 = MEMORY[0x1D824538C](0, v10, 0, MEMORY[0x1E0DEE9D8]);
  sub_1D2CAAF18();
  sub_1D2CAAD50();
  v16 = 0;
  v30 = a7 & 1;
  v29 = v14;
  do
  {
    if (v10 == v16)
    {
      __break(1u);
LABEL_19:
      __break(1u);
LABEL_20:
      __break(1u);
LABEL_21:
      __break(1u);
      goto LABEL_22;
    }
    v17 = v16 * a6;
    if ((unsigned __int128)(v16 * (__int128)a6) >> 64 != (v16 * a6) >> 63)
      goto LABEL_19;
    if (__OFADD__(v17, a6))
      goto LABEL_20;
    if (v17 + a6 < v17)
      goto LABEL_21;
    v18 = v10;
    v19 = v15;
    v20 = sub_1D2CAA984();
    v22 = v21;
    v32 = 0;
    sub_1D2C45028(v20, v21);
    sub_1D2C5AE40((unint64_t *)&qword_1ED985C78, (uint64_t (*)(uint64_t))MEMORY[0x1E0CA9860], MEMORY[0x1E0CA9858]);
    sub_1D2CAAC00();
    __swift_instantiateConcreteTypeFromMangledName(&qword_1ED985DB0);
    swift_dynamicCast();
    v23 = objc_allocWithZone(MEMORY[0x1E0D1BD78]);
    v24 = (void *)sub_1D2CAA954();
    v25 = objc_msgSend(v23, sel_initWithData_inGroup_reduction_corecryptoError_, v24, v31, v30, &v32);
    sub_1D2C45258(v20, v22);

    if (!v25)
    {
      v7 = v32;
      sub_1D2C4E7DC();
      swift_allocError();
      *(_DWORD *)v26 = v7;
      *(_BYTE *)(v26 + 4) = 0;
      swift_willThrow();
      swift_bridgeObjectRelease();
      sub_1D2C45258(v29, v19);
      sub_1D2C45258(v20, v22);
      return v7;
    }
    MEMORY[0x1D824529C]();
    if (*(_QWORD *)(v33 + 16) >= *(_QWORD *)(v33 + 24) >> 1)
      sub_1D2CAAF24();
    ++v16;
    sub_1D2CAAF3C();
    sub_1D2CAAF18();
    sub_1D2C45258(v20, v22);
    v10 = v18;
    v15 = v19;
  }
  while (v18 != v16);
  v7 = v33;
  v28 = *(_QWORD *)(v33 + 16);
  sub_1D2C45258(v29, v19);
  if (v28 != v18)
LABEL_24:
    __break(1u);
  return v7;
}

uint64_t sub_1D2C64814(uint64_t a1, void *a2, void *a3, void *a4, void *a5, void *a6, void *a7, void *a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  id v18;
  id v19;
  uint64_t v20;
  id v21;
  uint64_t v22;
  id v23;
  id v24;
  uint64_t v25;
  id v26;
  id v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  unint64_t v31;
  unint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  _QWORD *v37;
  uint64_t result;
  uint64_t v39;
  uint64_t v40;

  v18 = a2;
  v40 = sub_1D2C6742C(0x6F746172656E6567, 0xEA00000000004772, v18, a1);

  v19 = a3;
  v20 = sub_1D2C6742C(0x6F746172656E6567, 0xEA00000000004872, v19, a1);

  v21 = a4;
  v22 = sub_1D2C6742C(85, 0xE100000000000000, v21, a1);

  v23 = a5;
  sub_1D2C6742C(0x6F43656D69725055, 0xEC00000074696D6DLL, v23, a1);

  v24 = a6;
  v25 = sub_1D2C6742C(0x74696D6D6F43316DLL, 0xE800000000000000, v24, a1);

  v26 = a7;
  v39 = sub_1D2C6742C(86, 0xE100000000000000, v26, a1);

  v27 = a8;
  v28 = sub_1D2C6742C(12632, 0xE200000000000000, v27, a1);

  __swift_instantiateConcreteTypeFromMangledName(&qword_1EFC9FD40);
  v29 = swift_allocObject();
  *(_OWORD *)(v29 + 16) = xmmword_1D2CAD530;
  *(_QWORD *)(v29 + 32) = a9;
  *(_QWORD *)(v29 + 40) = v22;
  *(_QWORD *)(v29 + 48) = a10;
  *(_QWORD *)(v29 + 56) = v20;
  v30 = *(_QWORD **)(a1 + 48);
  sub_1D2CAAF0C();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v30 = sub_1D2C71950(0, v30[2] + 1, 1, v30);
  v32 = v30[2];
  v31 = v30[3];
  if (v32 >= v31 >> 1)
    v30 = sub_1D2C71950((_QWORD *)(v31 > 1), v32 + 1, 1, v30);
  v30[2] = v32 + 1;
  v33 = &v30[2 * v32];
  v33[4] = v25;
  v33[5] = v29;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 48) = v30;
  v34 = swift_allocObject();
  *(_OWORD *)(v34 + 16) = xmmword_1D2CAD530;
  *(_QWORD *)(v34 + 32) = a10;
  *(_QWORD *)(v34 + 40) = v28;
  *(_QWORD *)(v34 + 48) = a11;
  *(_QWORD *)(v34 + 56) = v40;
  v35 = v30[2];
  v36 = v30[3];
  sub_1D2CAAF0C();
  if (v35 >= v36 >> 1)
    v30 = sub_1D2C71950((_QWORD *)(v36 > 1), v35 + 1, 1, v30);
  v30[2] = v35 + 1;
  v37 = &v30[2 * v35];
  v37[4] = v39;
  v37[5] = v34;
  result = swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 48) = v30;
  return result;
}

uint64_t sub_1D2C64AEC(uint64_t a1, void *a2, void *a3, void *a4, void *a5, void *a6, void *a7, void *a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  id v18;
  id v19;
  uint64_t v20;
  id v21;
  uint64_t v22;
  id v23;
  id v24;
  uint64_t v25;
  id v26;
  id v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  unint64_t v31;
  unint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  _QWORD *v37;
  uint64_t result;
  uint64_t v39;
  uint64_t v40;

  v18 = a2;
  v40 = sub_1D2C675B4(0x6F746172656E6567, 0xEA00000000004772, v18, a1);

  v19 = a3;
  v20 = sub_1D2C675B4(0x6F746172656E6567, 0xEA00000000004872, v19, a1);

  v21 = a4;
  v22 = sub_1D2C675B4(85, 0xE100000000000000, v21, a1);

  v23 = a5;
  sub_1D2C675B4(0x6F43656D69725055, 0xEC00000074696D6DLL, v23, a1);

  v24 = a6;
  v25 = sub_1D2C675B4(0x74696D6D6F43316DLL, 0xE800000000000000, v24, a1);

  v26 = a7;
  v39 = sub_1D2C675B4(86, 0xE100000000000000, v26, a1);

  v27 = a8;
  v28 = sub_1D2C675B4(12632, 0xE200000000000000, v27, a1);

  __swift_instantiateConcreteTypeFromMangledName(&qword_1EFC9FD40);
  v29 = swift_allocObject();
  *(_OWORD *)(v29 + 16) = xmmword_1D2CAD530;
  *(_QWORD *)(v29 + 32) = a9;
  *(_QWORD *)(v29 + 40) = v22;
  *(_QWORD *)(v29 + 48) = a10;
  *(_QWORD *)(v29 + 56) = v20;
  v30 = *(_QWORD **)(a1 + 40);
  sub_1D2CAAF0C();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v30 = sub_1D2C71950(0, v30[2] + 1, 1, v30);
  v32 = v30[2];
  v31 = v30[3];
  if (v32 >= v31 >> 1)
    v30 = sub_1D2C71950((_QWORD *)(v31 > 1), v32 + 1, 1, v30);
  v30[2] = v32 + 1;
  v33 = &v30[2 * v32];
  v33[4] = v25;
  v33[5] = v29;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 40) = v30;
  v34 = swift_allocObject();
  *(_OWORD *)(v34 + 16) = xmmword_1D2CAD530;
  *(_QWORD *)(v34 + 32) = a10;
  *(_QWORD *)(v34 + 40) = v28;
  *(_QWORD *)(v34 + 48) = a11;
  *(_QWORD *)(v34 + 56) = v40;
  v35 = v30[2];
  v36 = v30[3];
  sub_1D2CAAF0C();
  if (v35 >= v36 >> 1)
    v30 = sub_1D2C71950((_QWORD *)(v36 > 1), v35 + 1, 1, v30);
  v30[2] = v35 + 1;
  v37 = &v30[2 * v35];
  v37[4] = v39;
  v37[5] = v34;
  result = swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 40) = v30;
  return result;
}

uint64_t sub_1D2C64DC4(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  void *v11;
  void *v12;
  char *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  char *v18;
  char *v19;
  char v20;
  uint64_t result;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v8 = sub_1D2C5D050(0xD00000000000001CLL, 0x80000001D2CB1050);
  v10 = v9;
  sub_1D2C92114(a1, a2, v8, v9);
  if (v4)
  {
    result = swift_unexpectedError();
    __break(1u);
  }
  else
  {
    v12 = v11;
    sub_1D2C45258(v8, v10);
    *(_QWORD *)&v22 = 0xD00000000000001CLL;
    *((_QWORD *)&v22 + 1) = 0x80000001D2CB1050;
    *((_QWORD *)&v23 + 1) = MEMORY[0x1E0DEE9D8];
    *(_QWORD *)&v24 = MEMORY[0x1E0DEE9D8];
    *((_QWORD *)&v24 + 1) = MEMORY[0x1E0DEE9D8];
    v13 = sub_1D2C71850(0, 1, 1, MEMORY[0x1E0DEE9D8]);
    v15 = *((_QWORD *)v13 + 2);
    v14 = *((_QWORD *)v13 + 3);
    v16 = v14 >> 1;
    v17 = v15 + 1;
    if (v14 >> 1 <= v15)
    {
      v13 = sub_1D2C71850((char *)(v14 > 1), v15 + 1, 1, v13);
      v14 = *((_QWORD *)v13 + 3);
      v16 = v14 >> 1;
    }
    *((_QWORD *)v13 + 2) = v17;
    v18 = &v13[16 * v15];
    *((_QWORD *)v18 + 4) = 12653;
    *((_QWORD *)v18 + 5) = 0xE200000000000000;
    if (v16 <= v17)
      v13 = sub_1D2C71850((char *)(v14 > 1), v15 + 2, 1, v13);
    *((_QWORD *)v13 + 2) = v15 + 2;
    v19 = &v13[16 * v17];
    *((_QWORD *)v19 + 4) = 122;
    *((_QWORD *)v19 + 5) = 0xE100000000000000;
    *(_QWORD *)&v23 = v13;
    sub_1D2C6609C((uint64_t)&v22, a3, v12, *(void **)v3, *(void **)(v3 + 32), *(void **)(v3 + 24), v15, *((_QWORD *)v13 + 2) - 1);
    v25 = v22;
    v26 = v23;
    v27 = v24;
    v20 = sub_1D2C5C6A4(*(_QWORD *)(v3 + 40), *(_QWORD *)(v3 + 48));

    v28 = v25;
    sub_1D2C6B6F0((uint64_t)&v28);
    v29 = v26;
    sub_1D2C6B978((uint64_t)&v29);
    v30 = *((_QWORD *)&v26 + 1);
    sub_1D2C6B978((uint64_t)&v30);
    v31 = v27;
    sub_1D2C6B978((uint64_t)&v31);
    v32 = *((_QWORD *)&v27 + 1);
    sub_1D2C6B978((uint64_t)&v32);
    return v20 & 1;
  }
  return result;
}

id sub_1D2C65044(void *a1, uint64_t a2)
{
  id result;
  int v3;
  uint64_t v4;

  v4 = *MEMORY[0x1E0C80C00];
  v3 = 0;
  result = objc_msgSend(a1, sel_sub_corecryptoError_, a2, &v3);
  if (!result)
  {
    sub_1D2CAAFC0();
    sub_1D2CAAE70();
    sub_1D2CAB0B0();
    sub_1D2CAAE70();
    swift_bridgeObjectRelease();
    result = (id)sub_1D2CAB05C();
    __break(1u);
  }
  return result;
}

id sub_1D2C6515C(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  id v8;
  void *v9;
  id v10;
  int v11;
  uint64_t v12;
  int v14;
  uint64_t v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v2 = (void *)objc_opt_self();
  sub_1D2CAAD50();
  sub_1D2C5AE40((unint64_t *)&qword_1ED985C78, (uint64_t (*)(uint64_t))MEMORY[0x1E0CA9860], MEMORY[0x1E0CA9858]);
  sub_1D2CAAC00();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED985DB0);
  swift_dynamicCast();
  v3 = (uint64_t)objc_msgSend(v2, sel_groupOrderByteCountForCP_, v15);
  if (v3 < 0)
    __break(1u);
  sub_1D2C5AEC0(a1, v3);
  v5 = v4;
  v7 = v6;
  v14 = 0;
  sub_1D2CAAC00();
  swift_dynamicCast();
  v8 = objc_allocWithZone(MEMORY[0x1E0D1BD78]);
  v9 = (void *)sub_1D2CAA954();
  v10 = objc_msgSend(v8, sel_initWithData_inGroup_reduction_corecryptoError_, v9, v15, 1, &v14);

  if (!v10)
  {
    v11 = v14;
    sub_1D2C4E7DC();
    swift_allocError();
    *(_DWORD *)v12 = v11;
    *(_BYTE *)(v12 + 4) = 0;
    swift_willThrow();
  }
  sub_1D2C45258(v5, v7);
  return v10;
}

uint64_t sub_1D2C6533C(uint64_t a1)
{
  id v2;
  id v3;
  id v4;
  uint64_t result;
  int v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v6 = 0;
  v2 = sub_1D2C6515C(0);
  v3 = objc_msgSend(v2, sel_sub_corecryptoError_, a1, &v6);
  if (v3)
  {
    v4 = v3;

    return (uint64_t)v4;
  }
  else
  {
    sub_1D2CAAFC0();
    sub_1D2CAAE70();
    sub_1D2CAB0B0();
    sub_1D2CAAE70();
    swift_bridgeObjectRelease();
    result = sub_1D2CAB05C();
    __break(1u);
  }
  return result;
}

uint64_t *sub_1D2C654A0(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  char *v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  void *v26;
  void *v27;
  _QWORD *v28;
  id v29;
  id v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  id v35;
  uint64_t v36;
  void *v37;
  id v38;
  id v39;
  id v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  id v44;
  uint64_t *v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  char *v51;
  char *v52;
  char v53;
  uint64_t v55;
  void **v56;
  void **v57;
  unint64_t v58;
  void *v59;
  void *v60;
  id v61;
  id v62;
  id v63;
  void *v64;
  _BYTE *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  _QWORD *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  id v78;
  uint64_t v79;
  char *v80;
  unint64_t v81;
  _QWORD *v82;
  int v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t v86;
  _QWORD *v87;
  _QWORD v88[3];

  v88[1] = *MEMORY[0x1E0C80C00];
  v5 = v1[2];
  v4 = v1[3];
  v88[0] = v5;
  v6 = *(_QWORD *)(v5 + 16);
  if (v6 != *(_QWORD *)(v4 + 16)
    || (v7 = v2, v3 = v1, v8 = v1[4], v9 = v1[5], v10 = *(_QWORD *)(v8 + 16), v10 != *(_QWORD *)(v9 + 16)))
  {
    sub_1D2C6B718();
    swift_allocError();
    v53 = 2;
LABEL_41:
    *v52 = v53;
    goto LABEL_42;
  }
  v11 = a1;
  if (*(_QWORD *)(a1 + 16) != v6)
  {
    sub_1D2C6B718();
    swift_allocError();
    v53 = 1;
    goto LABEL_41;
  }
  v12 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  v13 = (_QWORD *)v1[6];
  v86 = MEMORY[0x1E0DEE9D8];
  v87 = v13;
  v14 = v13[2];
  if (v14)
  {
    v12 = v13 + 4;
    v15 = v13[4];
    if (v15 < v10)
    {
      v81 = v6;
      v68 = v4;
      v16 = (_QWORD *)v13[5];
      v76 = v11 + 32;
      v67 = v8;
      v75 = v8 + 32;
      v66 = v9;
      v74 = v9 + 32;
      v17 = sub_1D2CAAF0C();
      v18 = v16;
      v19 = (char *)MEMORY[0x1E0DEE9D8];
      v20 = 1;
      while (1)
      {
        v80 = v19;
        v21 = v18[2];
        if (!v21)
        {
          __break(1u);
          goto LABEL_49;
        }
        v73 = v15;
        v23 = (uint64_t)(v18 + 4);
        v22 = v18[4];
        if (v22 >= v81 || (v24 = v18[5], v24 < 0) || v24 >= v10)
        {
LABEL_57:
          sub_1D2C6B978((uint64_t)&v87);
          swift_bridgeObjectRelease();
          goto LABEL_58;
        }
        v25 = v21 - 1;
        if (v21 != 1)
        {
          if (v18[6] >= v81)
            goto LABEL_57;
          v41 = v18[7];
          if (v41 < 0 || v41 >= v10)
            goto LABEL_57;
          v42 = v18 + 9;
          while (--v25)
          {
            if (*(v42 - 1) < v81)
            {
              v43 = *v42;
              if ((*v42 & 0x8000000000000000) == 0)
              {
                v42 += 2;
                if (v43 < v10)
                  continue;
              }
            }
            goto LABEL_57;
          }
        }
        v71 = v20;
        v69 = v12;
        v72 = v14;
        v77 = v10;
        v79 = v7;
        v26 = *(void **)(v76 + 8 * v22);
        v27 = *(void **)(v75 + 8 * v24);
        LODWORD(v82) = 0;
        v28 = v18;
        sub_1D2CAAF0C();
        v29 = v26;
        v30 = v27;
        v78 = objc_msgSend(v30, sel_multiply_corecryptoError_, v29, &v82);
        if (!v78)
          goto LABEL_66;

        if (v28[2] < v21)
        {
          __break(1u);
LABEL_62:
          __break(1u);
        }
        MEMORY[0x1E0C80A78](v31);
        v70 = v11;
        v33 = sub_1D2C68618(v23, 1, v32, (void (*)(uint64_t *__return_ptr, _QWORD, _QWORD))sub_1D2C6B950);
        v7 = v79;
        swift_bridgeObjectRelease();
        v34 = *(_QWORD *)(v33 + 16);
        if (v34)
        {
          v35 = v78;
          sub_1D2CAAF0C();
          v36 = 0;
          do
          {
            v37 = *(void **)(v33 + 8 * v36 + 32);
            LODWORD(v82) = 0;
            v38 = v37;
            v39 = objc_msgSend(v35, sel_add_corecryptoError_, v38, &v82);
            if (!v39)
              goto LABEL_66;
            v40 = v39;
            ++v36;

            v35 = v40;
          }
          while (v34 != v36);
          swift_bridgeObjectRelease();
          v7 = v79;
        }
        else
        {
          v40 = v78;
        }
        swift_bridgeObjectRelease();
        v44 = v40;
        MEMORY[0x1D824529C]();
        v19 = v80;
        if (*(_QWORD *)(v86 + 16) >= *(_QWORD *)(v86 + 24) >> 1)
          sub_1D2CAAF24();
        sub_1D2CAAF3C();
        sub_1D2CAAF18();
        if (v73 >= v77)
          goto LABEL_62;
        v45 = (uint64_t *)(v74 + 16 * v73);
        v46 = v45[1];
        v84 = *v45;
        v85 = v46;
        swift_bridgeObjectRetain_n();
        sub_1D2CAAE70();
        swift_bridgeObjectRelease();
        v48 = v84;
        v47 = v85;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v19 = sub_1D2C71850(0, *((_QWORD *)v80 + 2) + 1, 1, v80);
        v50 = *((_QWORD *)v19 + 2);
        v49 = *((_QWORD *)v19 + 3);
        if (v50 >= v49 >> 1)
          v19 = sub_1D2C71850((char *)(v49 > 1), v50 + 1, 1, v19);
        *((_QWORD *)v19 + 2) = v50 + 1;
        v51 = &v19[16 * v50];
        *((_QWORD *)v51 + 4) = v48;
        *((_QWORD *)v51 + 5) = v47;

        v14 = v72;
        if (v71 == v72)
          break;
        v12 = v69;
        v15 = v69[2 * v71];
        v11 = v70;
        v10 = v77;
        if ((v15 & 0x8000000000000000) == 0)
        {
          v20 = v71 + 1;
          v18 = (_QWORD *)v69[2 * v71 + 1];
          if ((uint64_t)v15 < v77)
            continue;
        }
        goto LABEL_57;
      }
      sub_1D2C6B978((uint64_t)&v87);
      v55 = v86;
      v12 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      v11 = v70;
      v4 = v68;
      v8 = v67;
      v9 = v66;
      goto LABEL_46;
    }
LABEL_58:
    swift_bridgeObjectRelease();
    sub_1D2C6B718();
    swift_allocError();
    *v65 = 0;
LABEL_42:
    swift_willThrow();
    return v3;
  }
  v81 = v6;
  v55 = MEMORY[0x1E0DEE9D8];
  v19 = (char *)MEMORY[0x1E0DEE9D8];
LABEL_46:
  v17 = sub_1D2C63E4C(*v3, v3[1], v8, v9, v55, (uint64_t)v19, v4);
  if (v7)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
LABEL_49:
    v3 = (uint64_t *)v17;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v82 = v12;
    if (v81)
    {
      v56 = (void **)(v5 + 32);
      v57 = (void **)(v11 + 32);
      v58 = v81;
      sub_1D2CAAF0C();
      do
      {
        v59 = *v56;
        v60 = *v57;
        v83 = 0;
        v61 = v59;
        v62 = v60;
        v63 = objc_msgSend(v3, sel_multiply_corecryptoError_, v61, &v83);
        if (!v63
          || (v64 = v63,
              v83 = 0,
              !objc_msgSend(v62, sel_sub_corecryptoError_, v63, &v83)))
        {
          v84 = 0;
          v85 = 0xE000000000000000;
          sub_1D2CAAFC0();
          sub_1D2CAAE70();
          sub_1D2CAB0B0();
          sub_1D2CAAE70();
          swift_bridgeObjectRelease();
          while (1)
          {
            sub_1D2CAB05C();
            __break(1u);
LABEL_66:
            v84 = 0;
            v85 = 0xE000000000000000;
            sub_1D2CAAFC0();
            sub_1D2CAAE70();
            v83 = (int)v82;
            sub_1D2CAB0B0();
            sub_1D2CAAE70();
            swift_bridgeObjectRelease();
          }
        }

        MEMORY[0x1D824529C]();
        if (v82[2] >= v82[3] >> 1)
          sub_1D2CAAF24();
        sub_1D2CAAF3C();
        sub_1D2CAAF18();

        ++v57;
        ++v56;
        --v58;
      }
      while (v58);
      sub_1D2C6B978((uint64_t)v88);
    }
  }
  return v3;
}

unint64_t sub_1D2C65DB4(unint64_t result, unint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  void *v5;
  id v6;
  id v7;
  id v8;

  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_7;
  }
  if (*(_QWORD *)(a3 + 16) <= result)
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  if ((a2 & 0x8000000000000000) != 0)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  v4 = *(_QWORD *)(a4 + 32);
  if (*(_QWORD *)(v4 + 16) > a2)
  {
    v5 = *(void **)(v4 + 8 * a2 + 32);
    v6 = *(id *)(a3 + 8 * result + 32);
    v7 = v5;
    v8 = sub_1D2C831C0((uint64_t)v6, v7);

    return (unint64_t)v8;
  }
LABEL_9:
  __break(1u);
  return result;
}

uint64_t sub_1D2C65E44(uint64_t a1, void *a2, void *a3, void *a4, void *a5, void *a6, uint64_t a7, uint64_t a8)
{
  id v15;
  uint64_t v16;
  id v17;
  uint64_t v18;
  id v19;
  uint64_t v20;
  id v21;
  uint64_t v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  unint64_t v27;
  unint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  _QWORD *v33;
  uint64_t result;

  v15 = a2;
  v16 = sub_1D2C6742C(0x6F746172656E6567, 0xEA00000000004872, v15, a1);

  v17 = a3;
  v18 = sub_1D2C6742C(0x6F746172656E6567, 0xEA00000000005472, v17, a1);

  v19 = a4;
  v20 = sub_1D2C6742C(84, 0xE100000000000000, v19, a1);

  v21 = a5;
  v22 = sub_1D2C6742C(85, 0xE100000000000000, v21, a1);

  v23 = a6;
  v24 = sub_1D2C6742C(0x74696D6D6F43316DLL, 0xE800000000000000, v23, a1);

  __swift_instantiateConcreteTypeFromMangledName(&qword_1EFC9FD40);
  v25 = swift_allocObject();
  *(_OWORD *)(v25 + 16) = xmmword_1D2CAD530;
  *(_QWORD *)(v25 + 32) = a7;
  *(_QWORD *)(v25 + 40) = v22;
  *(_QWORD *)(v25 + 48) = a8;
  *(_QWORD *)(v25 + 56) = v16;
  v26 = *(_QWORD **)(a1 + 48);
  sub_1D2CAAF0C();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v26 = sub_1D2C71950(0, v26[2] + 1, 1, v26);
  v28 = v26[2];
  v27 = v26[3];
  if (v28 >= v27 >> 1)
    v26 = sub_1D2C71950((_QWORD *)(v27 > 1), v28 + 1, 1, v26);
  v26[2] = v28 + 1;
  v29 = &v26[2 * v28];
  v29[4] = v24;
  v29[5] = v25;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 48) = v26;
  v30 = swift_allocObject();
  *(_OWORD *)(v30 + 16) = xmmword_1D2CACF70;
  *(_QWORD *)(v30 + 32) = a7;
  *(_QWORD *)(v30 + 40) = v18;
  v31 = v26[2];
  v32 = v26[3];
  sub_1D2CAAF0C();
  if (v31 >= v32 >> 1)
    v26 = sub_1D2C71950((_QWORD *)(v32 > 1), v31 + 1, 1, v26);
  v26[2] = v31 + 1;
  v33 = &v26[2 * v31];
  v33[4] = v20;
  v33[5] = v30;
  result = swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 48) = v26;
  return result;
}

uint64_t sub_1D2C6609C(uint64_t a1, void *a2, void *a3, void *a4, void *a5, void *a6, uint64_t a7, uint64_t a8)
{
  id v15;
  uint64_t v16;
  id v17;
  uint64_t v18;
  id v19;
  uint64_t v20;
  id v21;
  uint64_t v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  unint64_t v27;
  unint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  _QWORD *v33;
  uint64_t result;

  v15 = a2;
  v16 = sub_1D2C675B4(0x6F746172656E6567, 0xEA00000000004872, v15, a1);

  v17 = a3;
  v18 = sub_1D2C675B4(0x6F746172656E6567, 0xEA00000000005472, v17, a1);

  v19 = a4;
  v20 = sub_1D2C675B4(84, 0xE100000000000000, v19, a1);

  v21 = a5;
  v22 = sub_1D2C675B4(85, 0xE100000000000000, v21, a1);

  v23 = a6;
  v24 = sub_1D2C675B4(0x74696D6D6F43316DLL, 0xE800000000000000, v23, a1);

  __swift_instantiateConcreteTypeFromMangledName(&qword_1EFC9FD40);
  v25 = swift_allocObject();
  *(_OWORD *)(v25 + 16) = xmmword_1D2CAD530;
  *(_QWORD *)(v25 + 32) = a7;
  *(_QWORD *)(v25 + 40) = v22;
  *(_QWORD *)(v25 + 48) = a8;
  *(_QWORD *)(v25 + 56) = v16;
  v26 = *(_QWORD **)(a1 + 40);
  sub_1D2CAAF0C();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v26 = sub_1D2C71950(0, v26[2] + 1, 1, v26);
  v28 = v26[2];
  v27 = v26[3];
  if (v28 >= v27 >> 1)
    v26 = sub_1D2C71950((_QWORD *)(v27 > 1), v28 + 1, 1, v26);
  v26[2] = v28 + 1;
  v29 = &v26[2 * v28];
  v29[4] = v24;
  v29[5] = v25;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 40) = v26;
  v30 = swift_allocObject();
  *(_OWORD *)(v30 + 16) = xmmword_1D2CACF70;
  *(_QWORD *)(v30 + 32) = a7;
  *(_QWORD *)(v30 + 40) = v18;
  v31 = v26[2];
  v32 = v26[3];
  sub_1D2CAAF0C();
  if (v31 >= v32 >> 1)
    v26 = sub_1D2C71950((_QWORD *)(v32 > 1), v31 + 1, 1, v26);
  v26[2] = v31 + 1;
  v33 = &v26[2 * v31];
  v33[4] = v20;
  v33[5] = v30;
  result = swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 40) = v26;
  return result;
}

uint64_t sub_1D2C662F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)(uint64_t);
  uint64_t v14;
  double v15;
  _QWORD v17[22];
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v19 = a2;
  v20 = *MEMORY[0x1E0C80C00];
  v18 = sub_1D2CAADA4();
  v8 = MEMORY[0x1E0C80A78](v18);
  v17[21] = (char *)v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v8);
  v10 = sub_1D2CAABC4();
  v11 = MEMORY[0x1E0C80A78](v10);
  v17[18] = (char *)v17 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v11);
  sub_1D2C5AE40(&qword_1ED985DA0, v13, MEMORY[0x1E0CA9320]);
  v17[20] = v10;
  v14 = sub_1D2CAAD5C();
  v17[7] = a5;
  v17[8] = v14;
  v15 = ceil((double)a5 / (double)v14);
  if ((~*(_QWORD *)&v15 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_8;
  }
  if (v15 <= -9.22337204e18)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  if (v15 >= 9.22337204e18)
  {
LABEL_9:
    __break(1u);
    JUMPOUT(0x1D2C66E30);
  }
  v17[19] = (uint64_t)v15;
  if ((uint64_t)v15 <= 255)
    __asm { BR              X10 }
  sub_1D2C6BA04();
  swift_allocError();
  swift_willThrow();
  return a1;
}

_QWORD *sub_1D2C66E9C(_QWORD *(*a1)(uint64_t *__return_ptr, uint64_t, uint64_t), uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *result;
  uint64_t v6;

  if (a3)
  {
    result = a1(&v6, a3, a4 - a3);
    if (v4)
      return result;
    return (_QWORD *)v6;
  }
  result = a1(&v6, 0, 0);
  if (!v4)
    return (_QWORD *)v6;
  return result;
}

void sub_1D2C66F00()
{
  __asm { BR              X11 }
}

_QWORD *sub_1D2C66F60@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *(*v3)(_QWORD **__return_ptr, uint64_t *, char *);
  uint64_t v4;
  _QWORD *result;
  unint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  unsigned int v9;
  unsigned __int8 v10;
  unsigned __int8 v11;
  unsigned __int8 v12;

  v8 = v4;
  LOWORD(v9) = a1;
  BYTE2(v9) = BYTE2(a1);
  HIBYTE(v9) = BYTE3(a1);
  v10 = BYTE4(a1);
  v11 = BYTE5(a1);
  v12 = BYTE6(a1);
  result = v3(&v7, &v8, (char *)&v8 + BYTE6(a1));
  if (!v2)
    result = v7;
  v6 = v9 | ((unint64_t)v10 << 32) | ((unint64_t)v11 << 40) | ((unint64_t)v12 << 48);
  *v1 = v8;
  v1[1] = v6;
  return result;
}

char *sub_1D2C671F0(uint64_t a1, uint64_t a2, _QWORD *(*a3)(uint64_t *__return_ptr, char *, char *))
{
  uint64_t v3;
  char *result;
  char *v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  result = (char *)sub_1D2CAA864();
  if (!result)
    goto LABEL_12;
  v8 = result;
  result = (char *)sub_1D2CAA888();
  v9 = a1 - (_QWORD)result;
  if (__OFSUB__(a1, result))
  {
    __break(1u);
    goto LABEL_11;
  }
  v10 = __OFSUB__(a2, a1);
  v11 = a2 - a1;
  if (v10)
  {
LABEL_11:
    __break(1u);
LABEL_12:
    __break(1u);
    return result;
  }
  v12 = sub_1D2CAA87C();
  if (v12 >= v11)
    v13 = v11;
  else
    v13 = v12;
  result = (char *)a3(&v14, &v8[v9], &v8[v9 + v13]);
  if (!v3)
    return (char *)v14;
  return result;
}

uint64_t sub_1D2C6729C(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = sub_1D2CAA864();
  if (!result || (result = sub_1D2CAA888(), !__OFSUB__(a1, result)))
  {
    if (!__OFSUB__(a2, a1))
    {
      sub_1D2CAA87C();
      return sub_1D2CAA924();
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_1D2C6732C(unint64_t a1, uint64_t a2, uint64_t a3)
{
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;

  v3 = a1;
  v4 = (unsigned __int16)a1 >> 14;
  if ((a3 & 0x1000000000000000) == 0 || (a2 & 0x800000000000000) != 0)
  {
    v10 = sub_1D2CAAEAC();
    v11 = v10 + (v4 << 16);
    v12 = v10 & 0xFFFFFFFFFFFFFFFCLL | v3 & 3;
    v13 = v11 & 0xFFFFFFFFFFFF0000;
    if (!v4)
      v13 = v12;
    return v13 | 4;
  }
  else
  {
    v5 = MEMORY[0x1D8245230](15, a1 >> 16);
    v6 = v5 + (v4 << 16);
    v7 = v5 & 0xFFFFFFFFFFFFFFFCLL | v3 & 3;
    v8 = v6 & 0xFFFFFFFFFFFF0000;
    if (!v4)
      v8 = v7;
    return v8 | 8;
  }
}

uint64_t sub_1D2C673A4@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  char v3;
  uint64_t v4;

  if (result)
  {
    sub_1D2CAAF0C();
    result = sub_1D2CAAFCC();
    if ((v3 & 1) == 0)
    {
      v4 = result;
      result = swift_bridgeObjectRelease();
      *a2 = 0;
      a2[1] = 0xE000000000000000;
      a2[2] = 15;
      a2[3] = v4;
      return result;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_1D2C6742C(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  char *v8;
  id v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE v16[40];
  _QWORD v17[5];

  v17[3] = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFC9FD48);
  v17[4] = sub_1D2C496D4(&qword_1EFC9FD50, &qword_1EFC9FD48, (uint64_t)&unk_1D2CAE828);
  v17[0] = a3;
  v8 = *(char **)(a4 + 40);
  v9 = a3;
  sub_1D2CAAF0C();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v8 = sub_1D2C71850(0, *((_QWORD *)v8 + 2) + 1, 1, v8);
  v11 = *((_QWORD *)v8 + 2);
  v10 = *((_QWORD *)v8 + 3);
  if (v11 >= v10 >> 1)
    v8 = sub_1D2C71850((char *)(v10 > 1), v11 + 1, 1, v8);
  *((_QWORD *)v8 + 2) = v11 + 1;
  v12 = &v8[16 * v11];
  *((_QWORD *)v12 + 4) = a1;
  *((_QWORD *)v12 + 5) = a2;
  *(_QWORD *)(a4 + 40) = v8;
  sub_1D2C6B784((uint64_t)v17, (uint64_t)v16);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EFC9FD58);
  v13 = swift_dynamicCast();
  MEMORY[0x1D824529C](v13);
  if (*(_QWORD *)(*(_QWORD *)(a4 + 32) + 16) >= *(_QWORD *)(*(_QWORD *)(a4 + 32) + 24) >> 1)
    sub_1D2CAAF24();
  sub_1D2CAAF3C();
  sub_1D2CAAF18();
  v14 = *(_QWORD *)(*(_QWORD *)(a4 + 32) + 16) - 1;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v17);
  return v14;
}

uint64_t sub_1D2C675B4(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  char *v8;
  id v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE v16[40];
  _QWORD v17[5];

  v17[3] = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFC9FD48);
  v17[4] = sub_1D2C496D4(&qword_1EFC9FD50, &qword_1EFC9FD48, (uint64_t)&unk_1D2CAE828);
  v17[0] = a3;
  v8 = *(char **)(a4 + 32);
  v9 = a3;
  sub_1D2CAAF0C();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v8 = sub_1D2C71850(0, *((_QWORD *)v8 + 2) + 1, 1, v8);
  v11 = *((_QWORD *)v8 + 2);
  v10 = *((_QWORD *)v8 + 3);
  if (v11 >= v10 >> 1)
    v8 = sub_1D2C71850((char *)(v10 > 1), v11 + 1, 1, v8);
  *((_QWORD *)v8 + 2) = v11 + 1;
  v12 = &v8[16 * v11];
  *((_QWORD *)v12 + 4) = a1;
  *((_QWORD *)v12 + 5) = a2;
  *(_QWORD *)(a4 + 32) = v8;
  sub_1D2C6B784((uint64_t)v17, (uint64_t)v16);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EFC9FD58);
  v13 = swift_dynamicCast();
  MEMORY[0x1D824529C](v13);
  if (*(_QWORD *)(*(_QWORD *)(a4 + 24) + 16) >= *(_QWORD *)(*(_QWORD *)(a4 + 24) + 24) >> 1)
    sub_1D2CAAF24();
  sub_1D2CAAF3C();
  sub_1D2CAAF18();
  v14 = *(_QWORD *)(*(_QWORD *)(a4 + 24) + 16) - 1;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v17);
  return v14;
}

_BYTE *sub_1D2C6773C(_BYTE *result, _BYTE *a2)
{
  uint64_t v2;

  if (result)
  {
    v2 = a2 - result;
    if (a2 == result)
    {
      return 0;
    }
    else if (v2 <= 14)
    {
      return (_BYTE *)sub_1D2CA7484(result, a2);
    }
    else if ((unint64_t)v2 >= 0x7FFFFFFF)
    {
      return (_BYTE *)sub_1D2CA7544((uint64_t)result, (uint64_t)a2);
    }
    else
    {
      return (_BYTE *)sub_1D2CA75BC((uint64_t)result, (uint64_t)a2);
    }
  }
  return result;
}

uint64_t sub_1D2C677A0(uint64_t result)
{
  unint64_t v1;

  if (result)
  {
    v1 = result;
    if (result <= 14)
    {
      if (result < 0)
        __break(1u);
      else
        return 0;
    }
    else
    {
      sub_1D2CAA8A0();
      swift_allocObject();
      sub_1D2CAA870();
      if (v1 >= 0x7FFFFFFF)
      {
        sub_1D2CAA90C();
        result = swift_allocObject();
        *(_QWORD *)(result + 16) = 0;
        *(_QWORD *)(result + 24) = v1;
      }
      else
      {
        return v1 << 32;
      }
    }
  }
  return result;
}

uint64_t sub_1D2C6783C(uint64_t a1)
{
  _QWORD *v2;
  _BYTE *v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v7;
  _QWORD v8[3];
  uint64_t v9;
  uint64_t v10;

  v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED985DB8);
  v10 = sub_1D2C496D4(&qword_1ED985DC0, &qword_1ED985DB8, MEMORY[0x1E0CB1B08]);
  v8[0] = a1;
  v2 = __swift_project_boxed_opaque_existential_1(v8, v9);
  v3 = (_BYTE *)(*v2 + 32);
  v4 = &v3[*(_QWORD *)(*v2 + 16)];
  sub_1D2CAAF0C();
  sub_1D2CA7224(v3, v4, &v7);
  v5 = v7;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v8);
  return v5;
}

void sub_1D2C678EC(void *a1, void *a2, void *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  void *v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  id v15;
  void *v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  id v22;
  void *v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  _QWORD v33[4];
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;

  v38 = *MEMORY[0x1E0C80C00];
  v6 = sub_1D2CAAD98();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v8 = sub_1D2CAABB8();
  v33[2] = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8);
  v33[1] = (char *)v33 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = objc_msgSend(a1, sel_serializedPublicKey_, 1);
  if (v10)
  {
    v11 = v10;
    v33[0] = v7;
    v12 = sub_1D2CAA96C();
    v14 = v13;

    v15 = objc_msgSend(a2, sel_serializedPublicKey_, 1);
    if (v15)
    {
      v16 = v15;
      v17 = sub_1D2CAA96C();
      v19 = v18;

      v34 = v12;
      v35 = v14;
      sub_1D2C45028(v12, v14);
      sub_1D2C5EDA4(v17, v19);
      sub_1D2C45258(v17, v19);
      sub_1D2C45258(v12, v14);
      v20 = v34;
      v21 = v35;
      v22 = objc_msgSend(a3, sel_serializedPublicKey_, 1);
      if (v22)
      {
        v23 = v22;
        v24 = sub_1D2CAA96C();
        v26 = v25;

        v36 = v20;
        v37 = v21;
        sub_1D2C45028(v20, v21);
        sub_1D2C5EDA4(v24, v26);
        sub_1D2C45258(v24, v26);
        sub_1D2C45258(v20, v21);
        v27 = v36;
        v28 = v37;
        v29 = sub_1D2C5D050(0xD00000000000001ELL, 0x80000001D2CB1150);
        v31 = v30;
        v34 = v27;
        v35 = v28;
        sub_1D2C45028(v27, v28);
        sub_1D2C5EDA4(v29, v31);
        sub_1D2C45258(v29, v31);
        sub_1D2C45258(v27, v28);
        v32 = v35;
        sub_1D2C5AE40((unint64_t *)&qword_1EFC9F9A8, (uint64_t (*)(uint64_t))MEMORY[0x1E0CA9940], MEMORY[0x1E0CA9930]);
        sub_1D2CAABA0();
        __asm { BR              X10 }
      }
LABEL_7:
      __break(1u);
      JUMPOUT(0x1D2C67DC0);
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  goto LABEL_7;
}

uint64_t sub_1D2C67DD4(uint64_t a1, void *a2, void *a3, void *a4, void *a5, void *a6, void *a7, void *a8, void *a9, void *a10, void *a11, void *a12, void *a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  id v28;
  id v29;
  uint64_t v30;
  id v31;
  id v32;
  id v33;
  id v34;
  id v35;
  id v36;
  id v37;
  id v38;
  id v39;
  id v40;
  id v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  unint64_t v45;
  unint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  _QWORD *v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  _QWORD *v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  _QWORD *v63;
  uint64_t v64;
  unint64_t v65;
  unint64_t v66;
  _QWORD *v67;
  uint64_t v68;
  unint64_t v69;
  unint64_t v70;
  _QWORD *v71;
  uint64_t v72;
  unint64_t v73;
  unint64_t v74;
  _QWORD *v75;
  uint64_t v76;
  unint64_t v77;
  unint64_t v78;
  _QWORD *v79;
  uint64_t v80;
  unint64_t v81;
  unint64_t v82;
  _QWORD *v83;
  uint64_t v84;
  unint64_t v85;
  unint64_t v86;
  _QWORD *v87;
  uint64_t result;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;

  v28 = a4;
  v99 = sub_1D2C6742C(0x6F746172656E6567, 0xEA00000000004772, v28, a1);

  v29 = a5;
  v30 = sub_1D2C6742C(0x6F746172656E6567, 0xEA00000000004872, v29, a1);

  v31 = a2;
  v94 = sub_1D2C6742C(0x636E45316DLL, 0xE500000000000000, v31, a1);

  v32 = a3;
  v93 = sub_1D2C6742C(0x636E45326DLL, 0xE500000000000000, v32, a1);

  v33 = a6;
  v91 = sub_1D2C6742C(85, 0xE100000000000000, v33, a1);

  v34 = a7;
  v92 = sub_1D2C6742C(0x6D69725055636E65, 0xE900000000000065, v34, a1);

  v35 = a8;
  v98 = sub_1D2C6742C(12376, 0xE200000000000000, v35, a1);

  v36 = a9;
  v95 = sub_1D2C6742C(12632, 0xE200000000000000, v36, a1);

  v37 = a10;
  v96 = sub_1D2C6742C(12888, 0xE200000000000000, v37, a1);

  v38 = a11;
  v89 = sub_1D2C6742C(0x7875413058, 0xE500000000000000, v38, a1);

  v39 = a12;
  v90 = sub_1D2C6742C(0x7875413158, 0xE500000000000000, v39, a1);

  v40 = a13;
  v97 = sub_1D2C6742C(0x7875413258, 0xE500000000000000, v40, a1);

  v41 = a14;
  v42 = sub_1D2C6742C(2020950344, 0xE400000000000000, v41, a1);

  __swift_instantiateConcreteTypeFromMangledName(&qword_1EFC9FD40);
  v43 = swift_allocObject();
  *(_OWORD *)(v43 + 16) = xmmword_1D2CAD530;
  *(_QWORD *)(v43 + 32) = a15;
  *(_QWORD *)(v43 + 40) = v99;
  *(_QWORD *)(v43 + 48) = a16;
  *(_QWORD *)(v43 + 56) = v30;
  v44 = *(_QWORD **)(a1 + 48);
  sub_1D2CAAF0C();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v44 = sub_1D2C71950(0, v44[2] + 1, 1, v44);
  v46 = v44[2];
  v45 = v44[3];
  if (v46 >= v45 >> 1)
    v44 = sub_1D2C71950((_QWORD *)(v45 > 1), v46 + 1, 1, v44);
  v44[2] = v46 + 1;
  v47 = &v44[2 * v46];
  v47[4] = v98;
  v47[5] = v43;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 48) = v44;
  v48 = swift_allocObject();
  *(_OWORD *)(v48 + 16) = xmmword_1D2CACF70;
  *(_QWORD *)(v48 + 32) = a17;
  *(_QWORD *)(v48 + 40) = v30;
  v50 = v44[2];
  v49 = v44[3];
  sub_1D2CAAF0C();
  if (v50 >= v49 >> 1)
    v44 = sub_1D2C71950((_QWORD *)(v49 > 1), v50 + 1, 1, v44);
  v44[2] = v50 + 1;
  v51 = &v44[2 * v50];
  v51[4] = v95;
  v51[5] = v48;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 48) = v44;
  v52 = swift_allocObject();
  *(_OWORD *)(v52 + 16) = xmmword_1D2CACF70;
  *(_QWORD *)(v52 + 32) = a18;
  *(_QWORD *)(v52 + 40) = v30;
  v53 = v44[2];
  v54 = v44[3];
  sub_1D2CAAF0C();
  if (v53 >= v54 >> 1)
    v44 = sub_1D2C71950((_QWORD *)(v54 > 1), v53 + 1, 1, v44);
  v44[2] = v53 + 1;
  v55 = &v44[2 * v53];
  v55[4] = v96;
  v55[5] = v52;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 48) = v44;
  v56 = swift_allocObject();
  *(_OWORD *)(v56 + 16) = xmmword_1D2CACF70;
  *(_QWORD *)(v56 + 32) = a19;
  *(_QWORD *)(v56 + 40) = v30;
  v57 = v44[2];
  v58 = v44[3];
  sub_1D2CAAF0C();
  if (v57 >= v58 >> 1)
    v44 = sub_1D2C71950((_QWORD *)(v58 > 1), v57 + 1, 1, v44);
  v44[2] = v57 + 1;
  v59 = &v44[2 * v57];
  v59[4] = v42;
  v59[5] = v56;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 48) = v44;
  v60 = swift_allocObject();
  *(_OWORD *)(v60 + 16) = xmmword_1D2CACF70;
  *(_QWORD *)(v60 + 32) = a16;
  *(_QWORD *)(v60 + 40) = v42;
  v61 = v44[2];
  v62 = v44[3];
  sub_1D2CAAF0C();
  if (v61 >= v62 >> 1)
    v44 = sub_1D2C71950((_QWORD *)(v62 > 1), v61 + 1, 1, v44);
  v44[2] = v61 + 1;
  v63 = &v44[2 * v61];
  v63[4] = v89;
  v63[5] = v60;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 48) = v44;
  v64 = swift_allocObject();
  *(_OWORD *)(v64 + 16) = xmmword_1D2CACF70;
  *(_QWORD *)(v64 + 32) = a19;
  *(_QWORD *)(v64 + 40) = v95;
  v65 = v44[2];
  v66 = v44[3];
  sub_1D2CAAF0C();
  if (v65 >= v66 >> 1)
    v44 = sub_1D2C71950((_QWORD *)(v66 > 1), v65 + 1, 1, v44);
  v44[2] = v65 + 1;
  v67 = &v44[2 * v65];
  v67[4] = v90;
  v67[5] = v64;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 48) = v44;
  v68 = swift_allocObject();
  *(_OWORD *)(v68 + 16) = xmmword_1D2CACF70;
  *(_QWORD *)(v68 + 32) = a20;
  *(_QWORD *)(v68 + 40) = v30;
  v69 = v44[2];
  v70 = v44[3];
  sub_1D2CAAF0C();
  if (v69 >= v70 >> 1)
    v44 = sub_1D2C71950((_QWORD *)(v70 > 1), v69 + 1, 1, v44);
  v44[2] = v69 + 1;
  v71 = &v44[2 * v69];
  v71[4] = v90;
  v71[5] = v68;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 48) = v44;
  v72 = swift_allocObject();
  *(_OWORD *)(v72 + 16) = xmmword_1D2CACF70;
  *(_QWORD *)(v72 + 32) = a19;
  *(_QWORD *)(v72 + 40) = v96;
  v73 = v44[2];
  v74 = v44[3];
  sub_1D2CAAF0C();
  if (v73 >= v74 >> 1)
    v44 = sub_1D2C71950((_QWORD *)(v74 > 1), v73 + 1, 1, v44);
  v44[2] = v73 + 1;
  v75 = &v44[2 * v73];
  v75[4] = v97;
  v75[5] = v72;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 48) = v44;
  v76 = swift_allocObject();
  *(_OWORD *)(v76 + 16) = xmmword_1D2CACF70;
  *(_QWORD *)(v76 + 32) = a21;
  *(_QWORD *)(v76 + 40) = v30;
  v77 = v44[2];
  v78 = v44[3];
  sub_1D2CAAF0C();
  if (v77 >= v78 >> 1)
    v44 = sub_1D2C71950((_QWORD *)(v78 > 1), v77 + 1, 1, v44);
  v44[2] = v77 + 1;
  v79 = &v44[2 * v77];
  v79[4] = v97;
  v79[5] = v76;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 48) = v44;
  v80 = swift_allocObject();
  *(_OWORD *)(v80 + 16) = xmmword_1D2CACF70;
  *(_QWORD *)(v80 + 32) = a19;
  *(_QWORD *)(v80 + 40) = v99;
  v81 = v44[2];
  v82 = v44[3];
  sub_1D2CAAF0C();
  if (v81 >= v82 >> 1)
    v44 = sub_1D2C71950((_QWORD *)(v82 > 1), v81 + 1, 1, v44);
  v44[2] = v81 + 1;
  v83 = &v44[2 * v81];
  v83[4] = v91;
  v83[5] = v80;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 48) = v44;
  v84 = swift_allocObject();
  *(_OWORD *)(v84 + 16) = xmmword_1D2CAD540;
  *(_QWORD *)(v84 + 32) = a19;
  *(_QWORD *)(v84 + 40) = v98;
  *(_QWORD *)(v84 + 48) = a20;
  *(_QWORD *)(v84 + 56) = v94;
  *(_QWORD *)(v84 + 64) = a21;
  *(_QWORD *)(v84 + 72) = v93;
  v85 = v44[2];
  v86 = v44[3];
  sub_1D2CAAF0C();
  if (v85 >= v86 >> 1)
    v44 = sub_1D2C71950((_QWORD *)(v86 > 1), v85 + 1, 1, v44);
  v44[2] = v85 + 1;
  v87 = &v44[2 * v85];
  v87[4] = v92;
  v87[5] = v84;
  result = swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 48) = v44;
  return result;
}

uint64_t sub_1D2C68618(uint64_t result, uint64_t a2, unint64_t a3, void (*a4)(uint64_t *__return_ptr, _QWORD, _QWORD))
{
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  _QWORD *i;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;

  v4 = a3 >> 1;
  v5 = (a3 >> 1) - a2;
  if (__OFSUB__(a3 >> 1, a2))
    goto LABEL_13;
  v6 = result;
  result = MEMORY[0x1E0DEE9D8];
  if (v5)
  {
    v13 = MEMORY[0x1E0DEE9D8];
    result = sub_1D2CAB020();
    if (v5 < 0)
    {
LABEL_14:
      __break(1u);
      return result;
    }
    v8 = 0;
    for (i = (_QWORD *)(v6 + 16 * a2 + 8); ; i += 2)
    {
      v10 = v8 + 1;
      if (__OFADD__(v8, 1))
        break;
      if (a2 + v8 >= v4 || v8 >= v5)
        goto LABEL_12;
      a4(&v12, *(i - 1), *i);
      sub_1D2CAB008();
      sub_1D2CAB02C();
      sub_1D2CAB038();
      result = sub_1D2CAB014();
      ++v8;
      if (v10 == v5)
        return v13;
    }
    __break(1u);
LABEL_12:
    __break(1u);
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  return result;
}

uint64_t sub_1D2C68734(uint64_t a1, void *a2, void *a3, void *a4, void *a5, void *a6, void *a7, void *a8, void *a9, void *a10, void *a11, void *a12, void *a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  id v28;
  id v29;
  uint64_t v30;
  id v31;
  id v32;
  id v33;
  id v34;
  id v35;
  id v36;
  id v37;
  id v38;
  id v39;
  id v40;
  id v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  unint64_t v45;
  unint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  _QWORD *v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  _QWORD *v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  _QWORD *v63;
  uint64_t v64;
  unint64_t v65;
  unint64_t v66;
  _QWORD *v67;
  uint64_t v68;
  unint64_t v69;
  unint64_t v70;
  _QWORD *v71;
  uint64_t v72;
  unint64_t v73;
  unint64_t v74;
  _QWORD *v75;
  uint64_t v76;
  unint64_t v77;
  unint64_t v78;
  _QWORD *v79;
  uint64_t v80;
  unint64_t v81;
  unint64_t v82;
  _QWORD *v83;
  uint64_t v84;
  unint64_t v85;
  unint64_t v86;
  _QWORD *v87;
  uint64_t result;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;

  v28 = a4;
  v99 = sub_1D2C675B4(0x6F746172656E6567, 0xEA00000000004772, v28, a1);

  v29 = a5;
  v30 = sub_1D2C675B4(0x6F746172656E6567, 0xEA00000000004872, v29, a1);

  v31 = a2;
  v94 = sub_1D2C675B4(0x636E45316DLL, 0xE500000000000000, v31, a1);

  v32 = a3;
  v93 = sub_1D2C675B4(0x636E45326DLL, 0xE500000000000000, v32, a1);

  v33 = a6;
  v91 = sub_1D2C675B4(85, 0xE100000000000000, v33, a1);

  v34 = a7;
  v92 = sub_1D2C675B4(0x6D69725055636E65, 0xE900000000000065, v34, a1);

  v35 = a8;
  v98 = sub_1D2C675B4(12376, 0xE200000000000000, v35, a1);

  v36 = a9;
  v95 = sub_1D2C675B4(12632, 0xE200000000000000, v36, a1);

  v37 = a10;
  v96 = sub_1D2C675B4(12888, 0xE200000000000000, v37, a1);

  v38 = a11;
  v89 = sub_1D2C675B4(0x7875413058, 0xE500000000000000, v38, a1);

  v39 = a12;
  v90 = sub_1D2C675B4(0x7875413158, 0xE500000000000000, v39, a1);

  v40 = a13;
  v97 = sub_1D2C675B4(0x7875413258, 0xE500000000000000, v40, a1);

  v41 = a14;
  v42 = sub_1D2C675B4(2020950344, 0xE400000000000000, v41, a1);

  __swift_instantiateConcreteTypeFromMangledName(&qword_1EFC9FD40);
  v43 = swift_allocObject();
  *(_OWORD *)(v43 + 16) = xmmword_1D2CAD530;
  *(_QWORD *)(v43 + 32) = a15;
  *(_QWORD *)(v43 + 40) = v99;
  *(_QWORD *)(v43 + 48) = a16;
  *(_QWORD *)(v43 + 56) = v30;
  v44 = *(_QWORD **)(a1 + 40);
  sub_1D2CAAF0C();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v44 = sub_1D2C71950(0, v44[2] + 1, 1, v44);
  v46 = v44[2];
  v45 = v44[3];
  if (v46 >= v45 >> 1)
    v44 = sub_1D2C71950((_QWORD *)(v45 > 1), v46 + 1, 1, v44);
  v44[2] = v46 + 1;
  v47 = &v44[2 * v46];
  v47[4] = v98;
  v47[5] = v43;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 40) = v44;
  v48 = swift_allocObject();
  *(_OWORD *)(v48 + 16) = xmmword_1D2CACF70;
  *(_QWORD *)(v48 + 32) = a17;
  *(_QWORD *)(v48 + 40) = v30;
  v50 = v44[2];
  v49 = v44[3];
  sub_1D2CAAF0C();
  if (v50 >= v49 >> 1)
    v44 = sub_1D2C71950((_QWORD *)(v49 > 1), v50 + 1, 1, v44);
  v44[2] = v50 + 1;
  v51 = &v44[2 * v50];
  v51[4] = v95;
  v51[5] = v48;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 40) = v44;
  v52 = swift_allocObject();
  *(_OWORD *)(v52 + 16) = xmmword_1D2CACF70;
  *(_QWORD *)(v52 + 32) = a18;
  *(_QWORD *)(v52 + 40) = v30;
  v53 = v44[2];
  v54 = v44[3];
  sub_1D2CAAF0C();
  if (v53 >= v54 >> 1)
    v44 = sub_1D2C71950((_QWORD *)(v54 > 1), v53 + 1, 1, v44);
  v44[2] = v53 + 1;
  v55 = &v44[2 * v53];
  v55[4] = v96;
  v55[5] = v52;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 40) = v44;
  v56 = swift_allocObject();
  *(_OWORD *)(v56 + 16) = xmmword_1D2CACF70;
  *(_QWORD *)(v56 + 32) = a19;
  *(_QWORD *)(v56 + 40) = v30;
  v57 = v44[2];
  v58 = v44[3];
  sub_1D2CAAF0C();
  if (v57 >= v58 >> 1)
    v44 = sub_1D2C71950((_QWORD *)(v58 > 1), v57 + 1, 1, v44);
  v44[2] = v57 + 1;
  v59 = &v44[2 * v57];
  v59[4] = v42;
  v59[5] = v56;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 40) = v44;
  v60 = swift_allocObject();
  *(_OWORD *)(v60 + 16) = xmmword_1D2CACF70;
  *(_QWORD *)(v60 + 32) = a16;
  *(_QWORD *)(v60 + 40) = v42;
  v61 = v44[2];
  v62 = v44[3];
  sub_1D2CAAF0C();
  if (v61 >= v62 >> 1)
    v44 = sub_1D2C71950((_QWORD *)(v62 > 1), v61 + 1, 1, v44);
  v44[2] = v61 + 1;
  v63 = &v44[2 * v61];
  v63[4] = v89;
  v63[5] = v60;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 40) = v44;
  v64 = swift_allocObject();
  *(_OWORD *)(v64 + 16) = xmmword_1D2CACF70;
  *(_QWORD *)(v64 + 32) = a19;
  *(_QWORD *)(v64 + 40) = v95;
  v65 = v44[2];
  v66 = v44[3];
  sub_1D2CAAF0C();
  if (v65 >= v66 >> 1)
    v44 = sub_1D2C71950((_QWORD *)(v66 > 1), v65 + 1, 1, v44);
  v44[2] = v65 + 1;
  v67 = &v44[2 * v65];
  v67[4] = v90;
  v67[5] = v64;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 40) = v44;
  v68 = swift_allocObject();
  *(_OWORD *)(v68 + 16) = xmmword_1D2CACF70;
  *(_QWORD *)(v68 + 32) = a20;
  *(_QWORD *)(v68 + 40) = v30;
  v69 = v44[2];
  v70 = v44[3];
  sub_1D2CAAF0C();
  if (v69 >= v70 >> 1)
    v44 = sub_1D2C71950((_QWORD *)(v70 > 1), v69 + 1, 1, v44);
  v44[2] = v69 + 1;
  v71 = &v44[2 * v69];
  v71[4] = v90;
  v71[5] = v68;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 40) = v44;
  v72 = swift_allocObject();
  *(_OWORD *)(v72 + 16) = xmmword_1D2CACF70;
  *(_QWORD *)(v72 + 32) = a19;
  *(_QWORD *)(v72 + 40) = v96;
  v73 = v44[2];
  v74 = v44[3];
  sub_1D2CAAF0C();
  if (v73 >= v74 >> 1)
    v44 = sub_1D2C71950((_QWORD *)(v74 > 1), v73 + 1, 1, v44);
  v44[2] = v73 + 1;
  v75 = &v44[2 * v73];
  v75[4] = v97;
  v75[5] = v72;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 40) = v44;
  v76 = swift_allocObject();
  *(_OWORD *)(v76 + 16) = xmmword_1D2CACF70;
  *(_QWORD *)(v76 + 32) = a21;
  *(_QWORD *)(v76 + 40) = v30;
  v77 = v44[2];
  v78 = v44[3];
  sub_1D2CAAF0C();
  if (v77 >= v78 >> 1)
    v44 = sub_1D2C71950((_QWORD *)(v78 > 1), v77 + 1, 1, v44);
  v44[2] = v77 + 1;
  v79 = &v44[2 * v77];
  v79[4] = v97;
  v79[5] = v76;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 40) = v44;
  v80 = swift_allocObject();
  *(_OWORD *)(v80 + 16) = xmmword_1D2CACF70;
  *(_QWORD *)(v80 + 32) = a19;
  *(_QWORD *)(v80 + 40) = v99;
  v81 = v44[2];
  v82 = v44[3];
  sub_1D2CAAF0C();
  if (v81 >= v82 >> 1)
    v44 = sub_1D2C71950((_QWORD *)(v82 > 1), v81 + 1, 1, v44);
  v44[2] = v81 + 1;
  v83 = &v44[2 * v81];
  v83[4] = v91;
  v83[5] = v80;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 40) = v44;
  v84 = swift_allocObject();
  *(_OWORD *)(v84 + 16) = xmmword_1D2CAD540;
  *(_QWORD *)(v84 + 32) = a19;
  *(_QWORD *)(v84 + 40) = v98;
  *(_QWORD *)(v84 + 48) = a20;
  *(_QWORD *)(v84 + 56) = v94;
  *(_QWORD *)(v84 + 64) = a21;
  *(_QWORD *)(v84 + 72) = v93;
  v85 = v44[2];
  v86 = v44[3];
  sub_1D2CAAF0C();
  if (v85 >= v86 >> 1)
    v44 = sub_1D2C71950((_QWORD *)(v86 > 1), v85 + 1, 1, v44);
  v44[2] = v85 + 1;
  v87 = &v44[2 * v85];
  v87[4] = v92;
  v87[5] = v84;
  result = swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 40) = v44;
  return result;
}

uint64_t sub_1D2C68F78(void *a1, void *a2, void *a3, void *a4)
{
  uint64_t v4;
  uint64_t v5;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  char v15;
  uint64_t v16;
  id v17;
  char v18;
  char *v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char *v25;
  unint64_t v26;
  char *v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  char *v31;
  unint64_t v32;
  char *v33;
  unint64_t v34;
  char *v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  unint64_t v41;
  char *v42;
  unint64_t v43;
  char *v44;
  char *v45;
  unint64_t v46;
  char *v47;
  unint64_t v48;
  char *v49;
  unint64_t v50;
  char *v51;
  unint64_t v52;
  char *v53;
  char *v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  void *v58;
  void *v59;
  void *v60;
  void *v61;
  void *v62;
  void *v63;
  void *v64;
  void *v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  __int128 v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;

  v10 = *(void **)(v4 + 16);
  v64 = *(void **)(v4 + 32);
  v65 = *(void **)(v4 + 24);
  sub_1D2C678EC(v10, v65, v64);
  v12 = v11;
  v14 = v13;
  sub_1D2C59C44(*(_QWORD *)(v4 + 72), *(_QWORD *)(v4 + 80));
  if ((v15 & 1) == 0)
    goto LABEL_3;
  v62 = a1;
  v63 = a2;
  v16 = *(_QWORD *)v4;
  sub_1D2C69BB8(v4);
  v17 = sub_1D2C92250((void *)v16, v16);
  v61 = (void *)v16;
  LOBYTE(v16) = objc_msgSend(v17, sel_isEqual_, v16);

  sub_1D2C6B7F4(v4);
  if ((v16 & 1) == 0)
  {
    *(_QWORD *)&v66 = 0xD00000000000002ALL;
    *((_QWORD *)&v66 + 1) = 0x80000001D2CB1070;
    *((_QWORD *)&v67 + 1) = MEMORY[0x1E0DEE9D8];
    *(_QWORD *)&v68 = MEMORY[0x1E0DEE9D8];
    *((_QWORD *)&v68 + 1) = MEMORY[0x1E0DEE9D8];
    v20 = sub_1D2C71850(0, 1, 1, MEMORY[0x1E0DEE9D8]);
    v22 = *((_QWORD *)v20 + 2);
    v21 = *((_QWORD *)v20 + 3);
    v23 = v21 >> 1;
    v24 = v22 + 1;
    if (v21 >> 1 <= v22)
    {
      v43 = *((_QWORD *)v20 + 2);
      v44 = sub_1D2C71850((char *)(v21 > 1), v22 + 1, 1, v20);
      v22 = v43;
      v20 = v44;
      v21 = *((_QWORD *)v44 + 3);
      v23 = v21 >> 1;
    }
    *((_QWORD *)v20 + 2) = v24;
    v25 = &v20[16 * v22];
    *((_QWORD *)v25 + 4) = 12408;
    *((_QWORD *)v25 + 5) = 0xE200000000000000;
    v26 = v22 + 2;
    if (v23 <= v24)
    {
      v56 = v22;
      v45 = sub_1D2C71850((char *)(v21 > 1), v22 + 2, 1, v20);
      v22 = v56;
      v20 = v45;
    }
    *((_QWORD *)v20 + 2) = v26;
    v27 = &v20[16 * v24];
    *((_QWORD *)v27 + 4) = 12664;
    *((_QWORD *)v27 + 5) = 0xE200000000000000;
    *(_QWORD *)&v67 = v20;
    v29 = *((_QWORD *)v20 + 2);
    v28 = *((_QWORD *)v20 + 3);
    v30 = v28 >> 1;
    v59 = a3;
    if (v28 >> 1 <= v29)
    {
      v46 = v22;
      v47 = sub_1D2C71850((char *)(v28 > 1), v29 + 1, 1, v20);
      v22 = v46;
      v20 = v47;
      v28 = *((_QWORD *)v47 + 3);
      v30 = v28 >> 1;
    }
    *((_QWORD *)v20 + 2) = v29 + 1;
    v31 = &v20[16 * v29];
    *((_QWORD *)v31 + 4) = 12920;
    *((_QWORD *)v31 + 5) = 0xE200000000000000;
    *(_QWORD *)&v67 = v20;
    v32 = *((_QWORD *)v20 + 2);
    if (v30 <= v32)
    {
      v48 = v22;
      v49 = sub_1D2C71850((char *)(v28 > 1), v32 + 1, 1, v20);
      v22 = v48;
      v20 = v49;
      v28 = *((_QWORD *)v49 + 3);
      v30 = v28 >> 1;
    }
    *((_QWORD *)v20 + 2) = v32 + 1;
    v33 = &v20[16 * v32];
    *((_QWORD *)v33 + 4) = 0x69646E696C423078;
    *((_QWORD *)v33 + 5) = 0xEA0000000000676ELL;
    *(_QWORD *)&v67 = v20;
    v34 = *((_QWORD *)v20 + 2);
    v58 = v10;
    if (v30 <= v34)
    {
      v50 = v22;
      v51 = sub_1D2C71850((char *)(v28 > 1), v34 + 1, 1, v20);
      v22 = v50;
      v20 = v51;
      v28 = *((_QWORD *)v51 + 3);
      v30 = v28 >> 1;
    }
    *((_QWORD *)v20 + 2) = v34 + 1;
    v35 = &v20[16 * v34];
    *((_QWORD *)v35 + 4) = 98;
    *((_QWORD *)v35 + 5) = 0xE100000000000000;
    *(_QWORD *)&v67 = v20;
    v36 = *((_QWORD *)v20 + 2);
    v60 = a4;
    if (v30 <= v36)
    {
      v52 = v22;
      v53 = sub_1D2C71850((char *)(v28 > 1), v36 + 1, 1, v20);
      v22 = v52;
      v20 = v53;
      v28 = *((_QWORD *)v53 + 3);
      v30 = v28 >> 1;
    }
    v37 = v29 - 1;
    v38 = v32 - 1;
    v39 = v34 - 1;
    *((_QWORD *)v20 + 2) = v36 + 1;
    v40 = &v20[16 * v36];
    *((_QWORD *)v40 + 4) = 12660;
    *((_QWORD *)v40 + 5) = 0xE200000000000000;
    *(_QWORD *)&v67 = v20;
    v41 = *((_QWORD *)v20 + 2);
    if (v30 <= v41)
    {
      v57 = v22;
      v55 = v39;
      v54 = sub_1D2C71850((char *)(v28 > 1), v41 + 1, 1, v20);
      v39 = v55;
      v37 = v29 - 1;
      v22 = v57;
      v20 = v54;
    }
    *((_QWORD *)v20 + 2) = v41 + 1;
    v42 = &v20[16 * v41];
    *((_QWORD *)v42 + 4) = 12916;
    *((_QWORD *)v42 + 5) = 0xE200000000000000;
    *(_QWORD *)&v67 = v20;
    sub_1D2C68734((uint64_t)&v66, v62, v63, v59, v60, v61, *(void **)(v4 + 8), v58, v65, v64, *(void **)(v4 + 40), *(void **)(v4 + 48), *(void **)(v4 + 56), *(void **)(v4 + 64), v22, v39, v37, v38, v36 - 1,
      v41 - 1,
      *((_QWORD *)v20 + 2) - 1);
    v69 = v66;
    v70 = v67;
    v71 = v68;
    v18 = sub_1D2C5C6A4(*(_QWORD *)(v4 + 88), *(_QWORD *)(v4 + 96));
    sub_1D2C45258(v12, v14);
    if (v5)
    {
      v77 = v69;
      sub_1D2C6B6F0((uint64_t)&v77);
      v78 = v70;
      sub_1D2C6B978((uint64_t)&v78);
      v79 = *((_QWORD *)&v70 + 1);
      sub_1D2C6B978((uint64_t)&v79);
      v80 = v71;
      sub_1D2C6B978((uint64_t)&v80);
      v81 = *((_QWORD *)&v71 + 1);
      sub_1D2C6B978((uint64_t)&v81);
    }
    else
    {
      v72 = v69;
      sub_1D2C6B6F0((uint64_t)&v72);
      v73 = v70;
      sub_1D2C6B978((uint64_t)&v73);
      v74 = *((_QWORD *)&v70 + 1);
      sub_1D2C6B978((uint64_t)&v74);
      v75 = v71;
      sub_1D2C6B978((uint64_t)&v75);
      v76 = *((_QWORD *)&v71 + 1);
      sub_1D2C6B978((uint64_t)&v76);
    }
  }
  else
  {
LABEL_3:
    sub_1D2C45258(v12, v14);
    v18 = 0;
  }
  return v18 & 1;
}

_QWORD *sub_1D2C69438(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  _QWORD *v9;
  _QWORD *result;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  _BYTE *v15;
  _BYTE *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD v19[5];

  v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFC9FD28);
  v19[3] = v8;
  v19[4] = sub_1D2C496D4((unint64_t *)&qword_1EFC9FD30, &qword_1EFC9FD28, MEMORY[0x1E0CB25C0]);
  v9 = (_QWORD *)swift_allocObject();
  v19[0] = v9;
  v9[2] = a1;
  v9[3] = a2;
  v9[4] = a3;
  v9[5] = a4;
  result = __swift_project_boxed_opaque_existential_1(v19, v8);
  v11 = result[2];
  v12 = result[3] >> 1;
  v13 = __OFSUB__(v12, v11);
  v14 = v12 - v11;
  if (v13)
  {
    __break(1u);
  }
  else
  {
    v15 = (_BYTE *)(result[1] + v11);
    v16 = &v15[v14];
    swift_unknownObjectRetain();
    sub_1D2CA7224(v15, v16, &v18);
    v17 = v18;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v19);
    return (_QWORD *)v17;
  }
  return result;
}

uint64_t sub_1D2C69528(void *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  id v5;
  void *v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  id v10;
  id v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  _BYTE *v17;
  _BYTE *v18;
  _QWORD v20[8];

  v20[7] = *MEMORY[0x1E0C80C00];
  v5 = objc_msgSend(a1, sel_serializedBigEndianScalar);
  if (v5)
  {
    v6 = v5;
    v3 = sub_1D2CAA96C();
    v8 = v7;

    v9 = *(_QWORD *)(a2 + 16);
    if (v9)
    {
      sub_1D2CAAF0C();
      v10 = *(id *)(a2 + 32);
      v11 = objc_msgSend(v10, sel_serializedBigEndianScalar, v2, v9, a2);
      if (v11)
      {
        v12 = v11;
        v13 = sub_1D2CAA96C();
        v15 = v14;

        v20[5] = v3;
        v20[6] = v8;
        v20[3] = MEMORY[0x1E0CB0338];
        v20[4] = MEMORY[0x1E0CB0318];
        v20[0] = v13;
        v20[1] = v15;
        v16 = (char *)&loc_1D2C6968C
            + *((int *)qword_1D2C69948 + (__swift_project_boxed_opaque_existential_1(v20, MEMORY[0x1E0CB0338])[1] >> 62));
        __asm { BR              X9 }
      }
      swift_bridgeObjectRelease();
      sub_1D2C6009C();
      swift_allocError();
      *v18 = 1;
      swift_willThrow();
      sub_1D2C45258(v3, v8);

    }
  }
  else
  {
    sub_1D2C6009C();
    swift_allocError();
    *v17 = 1;
    swift_willThrow();
  }
  return v3;
}

id sub_1D2C69958()
{
  id v0;
  void *v1;
  id v2;
  int v3;
  uint64_t v4;
  uint64_t v6;
  int v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v7 = 0;
  sub_1D2CAAD50();
  sub_1D2C5AE40((unint64_t *)&qword_1ED985C78, (uint64_t (*)(uint64_t))MEMORY[0x1E0CA9860], MEMORY[0x1E0CA9858]);
  sub_1D2CAAC00();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED985DB0);
  swift_dynamicCast();
  v0 = objc_allocWithZone(MEMORY[0x1E0D1BD70]);
  v1 = (void *)sub_1D2CAA954();
  v2 = objc_msgSend(v0, sel_initFromPublicKeyBytes_inGroup_compressed_corecryptoError_, v1, v6, 1, &v7);

  if (!v2)
  {
    v3 = v7;
    sub_1D2C4E7DC();
    swift_allocError();
    *(_DWORD *)v4 = v3;
    *(_BYTE *)(v4 + 4) = 0;
    swift_willThrow();
  }
  return v2;
}

uint64_t sub_1D2C69AB4(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  unint64_t v6;
  id v7;
  id v8;
  id v9;
  id v10;

  v2 = *(void **)(a1 + 8);
  v3 = *(void **)(a1 + 16);
  v4 = *(void **)(a1 + 24);
  v5 = *(_QWORD *)(a1 + 32);
  v6 = *(_QWORD *)(a1 + 40);
  v7 = *(id *)a1;
  v8 = v2;
  v9 = v3;
  v10 = v4;
  sub_1D2C45028(v5, v6);
  return a1;
}

uint64_t sub_1D2C69B0C(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  unint64_t v6;

  v2 = *(void **)a1;
  v3 = *(void **)(a1 + 8);
  v4 = *(void **)(a1 + 16);
  v5 = *(_QWORD *)(a1 + 32);
  v6 = *(_QWORD *)(a1 + 40);

  sub_1D2C45258(v5, v6);
  return a1;
}

uint64_t type metadata accessor for KVACPresentationWrapper()
{
  return objc_opt_self();
}

uint64_t sub_1D2C69B84(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 != 15)
    return sub_1D2C45028(a1, a2);
  return a1;
}

uint64_t type metadata accessor for KVACClient()
{
  return objc_opt_self();
}

uint64_t sub_1D2C69BB8(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  unint64_t v10;
  id v11;
  id v12;
  id v13;
  id v14;
  id v15;
  id v16;
  id v17;
  id v18;
  id v19;
  id v20;
  uint64_t v22;
  void *v23;

  v2 = *(void **)(a1 + 8);
  v3 = *(void **)(a1 + 16);
  v4 = *(void **)(a1 + 24);
  v5 = *(void **)(a1 + 32);
  v6 = *(void **)(a1 + 40);
  v8 = *(void **)(a1 + 48);
  v7 = *(void **)(a1 + 56);
  v9 = *(void **)(a1 + 64);
  v10 = *(_QWORD *)(a1 + 80);
  v22 = *(_QWORD *)(a1 + 72);
  v23 = *(void **)(a1 + 88);
  v11 = *(id *)a1;
  v12 = v2;
  v13 = v3;
  v14 = v4;
  v15 = v5;
  v16 = v6;
  v17 = v8;
  v18 = v7;
  v19 = v9;
  sub_1D2C45028(v22, v10);
  v20 = v23;
  sub_1D2CAAF0C();
  return a1;
}

uint64_t type metadata accessor for KVACIssuanceWrapper()
{
  return objc_opt_self();
}

void sub_1D2C69C84(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }
}

void sub_1D2C69CE0(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id a14, uint64_t a15, uint64_t a16, int a17, int a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37)
{
  void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  id v46;
  uint64_t v47;
  void *v48;
  id v49;
  void *v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  int64_t v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  id v61;
  void *v62;
  id v63;
  id v64;
  unint64_t v65;
  BOOL v66;
  int v67;
  uint64_t v68;
  int v69;
  uint64_t v70;
  void *v71;
  void *v72;
  unsigned __int8 v73;
  int v74;
  uint64_t v75;
  uint64_t v76;

  v37 = (void *)objc_opt_self();
  sub_1D2CAAD50();
  v38 = sub_1D2C5AE40((unint64_t *)&qword_1ED985C78, (uint64_t (*)(uint64_t))MEMORY[0x1E0CA9860], MEMORY[0x1E0CA9858]);
  sub_1D2CAAC00();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED985DB0);
  swift_dynamicCast();
  v39 = (uint64_t)objc_msgSend(v37, sel_groupOrderByteCountForCP_, v76);
  if (v39 < 0)
  {
LABEL_30:
    __break(1u);
    goto LABEL_31;
  }
  if (!v39)
  {
LABEL_31:
    __break(1u);
    goto LABEL_32;
  }
  v40 = v73 / v39;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EFC9FD70);
  v41 = swift_allocObject();
  *(_QWORD *)(v41 + 32) = 0xD000000000000021;
  *(_QWORD *)(v41 + 40) = 0x80000001D2CB1170;
  v42 = MEMORY[0x1E0DEB418];
  *(_OWORD *)(v41 + 16) = xmmword_1D2CAD530;
  *(_QWORD *)(v41 + 88) = v42;
  *(_QWORD *)(v41 + 56) = MEMORY[0x1E0DEA968];
  *(_QWORD *)(v41 + 64) = v40;
  sub_1D2CAB11C();
  swift_bridgeObjectRelease();
  sub_1D2CAAC00();
  swift_dynamicCast();
  if (((unint64_t)objc_msgSend(v37, sel_groupOrderByteCountForCP_, v76) & 0x8000000000000000) != 0)
  {
LABEL_32:
    __break(1u);
LABEL_33:
    __break(1u);
    goto LABEL_34;
  }
  v72 = v37;
  v43 = sub_1D2CAA984();
  v45 = v44;
  LODWORD(v75) = 0;
  sub_1D2CAAC00();
  swift_dynamicCast();
  v46 = objc_allocWithZone(MEMORY[0x1E0D1BD78]);
  v47 = v38;
  v48 = (void *)sub_1D2CAA954();
  v49 = objc_msgSend(v46, sel_initWithData_inGroup_reduction_corecryptoError_, v48, v76, 0, &v75);

  if (!v49)
  {
    v67 = v75;
    sub_1D2C4E7DC();
    swift_allocError();
    *(_DWORD *)v68 = v67;
    *(_BYTE *)(v68 + 4) = 0;
    swift_willThrow();
    sub_1D2C45258(v43, v45);
    return;
  }
  v71 = v49;
  sub_1D2C45258(v43, v45);
  sub_1D2CAAC00();
  swift_dynamicCast();
  v50 = v72;
  v51 = (unint64_t)objc_msgSend(v72, sel_groupOrderByteCountForCP_, v76);
  if ((v51 & 0x8000000000000000) != 0)
    goto LABEL_33;
  v52 = v47;
  v76 = MEMORY[0x1E0DEE9D8];
  v53 = v40 - 1;
  if (__OFSUB__(v40, 1))
  {
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  if (v53 < 0)
  {
LABEL_35:
    __break(1u);
    JUMPOUT(0x1D2C6A2BCLL);
  }
  if (v40 != 1)
  {
    v54 = (char *)v51;
    while (v53)
    {
      sub_1D2CAAC00();
      swift_dynamicCast();
      v55 = (int64_t)objc_msgSend(v50, sel_groupOrderByteCountForCP_, v75);
      if (v55 < 0)
        goto LABEL_25;
      if (__OFADD__(v54, v55))
        goto LABEL_26;
      if ((uint64_t)&v54[v55] < (uint64_t)v54)
        goto LABEL_27;
      v56 = sub_1D2CAA984();
      v58 = v57;
      v74 = 0;
      sub_1D2C45028(v56, v57);
      v59 = v52;
      sub_1D2CAAC00();
      swift_dynamicCast();
      v60 = v75;
      v61 = objc_allocWithZone(MEMORY[0x1E0D1BD78]);
      v62 = (void *)sub_1D2CAA954();
      v63 = objc_msgSend(v61, sel_initWithData_inGroup_reduction_corecryptoError_, v62, v60, 0, &v74);
      sub_1D2C45258(v56, v58);

      if (!v63)
      {
        v69 = v74;
        sub_1D2C4E7DC();
        swift_allocError();
        *(_DWORD *)v70 = v69;
        *(_BYTE *)(v70 + 4) = 0;
        swift_willThrow();
        swift_bridgeObjectRelease();
        sub_1D2C45258(v56, v58);

        return;
      }
      sub_1D2C45258(v56, v58);
      v64 = v63;
      MEMORY[0x1D824529C]();
      if (*(_QWORD *)(v76 + 16) >= *(_QWORD *)(v76 + 24) >> 1)
        sub_1D2CAAF24();
      sub_1D2CAAF3C();
      sub_1D2CAAF18();
      v52 = v59;
      sub_1D2CAAC00();
      swift_dynamicCast();
      v50 = v72;
      v65 = (unint64_t)objc_msgSend(v72, sel_groupOrderByteCountForCP_, v75);

      if ((v65 & 0x8000000000000000) != 0)
        goto LABEL_28;
      v66 = __OFADD__(v54, v65);
      v54 += v65;
      if (v66)
        goto LABEL_29;
      if (!--v53)
        return;
    }
    __break(1u);
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
LABEL_28:
    __break(1u);
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
}

uint64_t type metadata accessor for KVACServer()
{
  return objc_opt_self();
}

void sub_1D2C6A2F8(uint64_t a1, uint64_t a2)
{
  void *v3;
  uint64_t v4;
  uint64_t v5;

  v3 = (void *)objc_opt_self();
  sub_1D2CAAD50();
  sub_1D2C5AE40((unint64_t *)&qword_1ED985C78, (uint64_t (*)(uint64_t))MEMORY[0x1E0CA9860], MEMORY[0x1E0CA9858]);
  sub_1D2CAAC00();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED985DB0);
  swift_dynamicCast();
  v4 = (uint64_t)objc_msgSend(v3, sel_groupOrderByteCountForCP_, v5);
  if (v4 < 0)
  {
    __break(1u);
  }
  else if ((unsigned __int128)(v4 * (__int128)5) >> 64 == (5 * v4) >> 63)
  {
    __asm { BR              X10 }
  }
  __break(1u);
  JUMPOUT(0x1D2C6A71CLL);
}

uint64_t sub_1D2C6A764(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  unint64_t v10;
  id v11;
  id v12;
  id v13;
  id v14;
  id v15;
  id v16;
  id v17;
  id v18;
  id v19;
  uint64_t v21;

  v2 = *(void **)(a1 + 16);
  v3 = *(void **)(a1 + 24);
  v4 = *(void **)(a1 + 32);
  v5 = *(void **)(a1 + 40);
  v6 = *(void **)(a1 + 48);
  v7 = *(void **)(a1 + 56);
  v8 = *(void **)(a1 + 64);
  v9 = *(void **)(a1 + 72);
  v21 = *(_QWORD *)(a1 + 80);
  v10 = *(_QWORD *)(a1 + 88);
  v11 = *(id *)(a1 + 8);
  v12 = v2;
  v13 = v3;
  v14 = v4;
  v15 = v5;
  v16 = v6;
  v17 = v7;
  v18 = v8;
  v19 = v9;
  sub_1D2C45028(v21, v10);
  return a1;
}

uint64_t sub_1D2C6A7F8(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  uint64_t v9;
  unint64_t v10;
  void *v12;

  v2 = *(void **)(a1 + 16);
  v12 = *(void **)(a1 + 8);
  v3 = *(void **)(a1 + 24);
  v4 = *(void **)(a1 + 32);
  v5 = *(void **)(a1 + 40);
  v6 = *(void **)(a1 + 48);
  v8 = *(void **)(a1 + 56);
  v7 = *(void **)(a1 + 64);
  v9 = *(_QWORD *)(a1 + 80);
  v10 = *(_QWORD *)(a1 + 88);

  sub_1D2C45258(v9, v10);
  return a1;
}

void sub_1D2C6A890(uint64_t a1, uint64_t a2)
{
  void *v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v13;

  v2 = (void *)objc_opt_self();
  sub_1D2CAAD50();
  sub_1D2C5AE40((unint64_t *)&qword_1ED985C78, (uint64_t (*)(uint64_t))MEMORY[0x1E0CA9860], MEMORY[0x1E0CA9858]);
  sub_1D2CAAC00();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED985DB0);
  swift_dynamicCast();
  v3 = (unint64_t)objc_msgSend(v2, sel_groupOrderByteCountForCP_, v13);
  if ((v3 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else
  {
    v4 = v3;
    if ((v3 - 0x2000000000000000) >> 62 == 3)
    {
      sub_1D2CAAC00();
      swift_dynamicCast();
      v5 = (uint64_t)objc_msgSend(v2, sel_groupOrderByteCountForCP_, v13);
      if ((v5 & 0x8000000000000000) == 0)
      {
        v6 = 3 * v5;
        if ((unsigned __int128)(v5 * (__int128)3) >> 64 == (3 * v5) >> 63)
        {
          sub_1D2CAAC00();
          swift_dynamicCast();
          v7 = (unint64_t)objc_msgSend(v2, sel_compressedx962PointByteCountForCurveParameters_, v13);
          if ((v7 & 0x8000000000000000) == 0)
          {
            if ((v7 - 0x2000000000000000) >> 62 == 3)
            {
              v8 = 4 * v4;
              v9 = v8 + 4 * v7;
              if (!__OFADD__(v8, 4 * v7))
              {
                v10 = __OFADD__(v9, v6);
                v11 = v9 + v6;
                if (!v10)
                {
                  if (!__OFADD__(v11, sub_1D2CAAD80()))
                    __asm { BR              X11 }
LABEL_19:
                  __break(1u);
                  JUMPOUT(0x1D2C6B1B8);
                }
LABEL_18:
                __break(1u);
                goto LABEL_19;
              }
LABEL_17:
              __break(1u);
              goto LABEL_18;
            }
LABEL_16:
            __break(1u);
            goto LABEL_17;
          }
LABEL_15:
          __break(1u);
          goto LABEL_16;
        }
LABEL_14:
        __break(1u);
        goto LABEL_15;
      }
LABEL_13:
      __break(1u);
      goto LABEL_14;
    }
  }
  __break(1u);
  goto LABEL_13;
}

uint64_t sub_1D2C6B244(uint64_t a1)
{
  void *v2;
  void *v3;
  uint64_t v4;
  unint64_t v5;
  void *v6;
  uint64_t v7;
  unint64_t v8;
  void *v10;
  void *v11;
  void *v12;
  void *v13;

  v2 = *(void **)a1;
  v3 = *(void **)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 24);
  v5 = *(_QWORD *)(a1 + 32);
  v6 = *(void **)(a1 + 56);
  v7 = *(_QWORD *)(a1 + 64);
  v8 = *(_QWORD *)(a1 + 72);
  v12 = *(void **)(a1 + 88);
  v13 = *(void **)(a1 + 80);
  v10 = *(void **)(a1 + 40);
  v11 = *(void **)(a1 + 96);

  sub_1D2C45258(v4, v5);
  swift_bridgeObjectRelease();

  sub_1D2C45258(v7, v8);
  swift_bridgeObjectRelease();

  return a1;
}

uint64_t method lookup function for KVACRequestWrapper()
{
  return swift_lookUpClassMethod();
}

uint64_t method lookup function for KVACCredentialWrapper()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of KVACCredentialWrapper.makePresentation(tagPrefix:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x78))();
}

uint64_t method lookup function for KVACPresentationWrapper()
{
  return swift_lookUpClassMethod();
}

uint64_t method lookup function for KVACClient()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of KVACClient.__allocating_init(tokenChallenge:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 88))();
}

uint64_t dispatch thunk of KVACClient.makeRequest()()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x60))();
}

uint64_t dispatch thunk of KVACClient.makeCredential(issuance:request:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x68))();
}

uint64_t method lookup function for KVACIssuanceWrapper()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of KVACIssuanceWrapper.__allocating_init(issuanceData:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 112))();
}

uint64_t method lookup function for KVACServer()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of KVACServer.issue(requestData:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x60))();
}

uint64_t dispatch thunk of KVACServer.verify(presentationData:tokenChallenge:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x68))();
}

uint64_t getEnumTagSinglePayload for KVACErrors(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFC)
    goto LABEL_17;
  if (a2 + 4 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 4) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 4;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 4;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 4;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 5;
  v8 = v6 - 5;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for KVACErrors(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_1D2C6B52C + 4 * byte_1D2CAD555[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_1D2C6B560 + 4 * byte_1D2CAD550[v4]))();
}

uint64_t sub_1D2C6B560(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1D2C6B568(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1D2C6B570);
  return result;
}

uint64_t sub_1D2C6B57C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1D2C6B584);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_1D2C6B588(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1D2C6B590(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for KVACErrors()
{
  return &type metadata for KVACErrors;
}

unint64_t sub_1D2C6B5B0()
{
  unint64_t result;

  result = qword_1EFC9FD20;
  if (!qword_1EFC9FD20)
  {
    result = MEMORY[0x1D8245F38](&unk_1D2CAD6A4, &type metadata for KVACErrors);
    atomic_store(result, (unint64_t *)&qword_1EFC9FD20);
  }
  return result;
}

uint64_t sub_1D2C6B5F4()
{
  swift_unknownObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_1D2C6B618(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  void *v4;
  unint64_t v5;
  void *v6;
  id v7;
  id v8;
  id v9;
  id v10;

  v2 = *(void **)(a1 + 8);
  v4 = *(void **)(a1 + 16);
  v3 = *(_QWORD *)(a1 + 24);
  v5 = *(_QWORD *)(a1 + 32);
  v6 = *(void **)(a1 + 40);
  v7 = *(id *)a1;
  v8 = v2;
  v9 = v4;
  sub_1D2C45028(v3, v5);
  v10 = v6;
  sub_1D2CAAF0C();
  return a1;
}

uint64_t sub_1D2C6B684(uint64_t a1)
{
  void *v2;
  void *v3;
  uint64_t v4;
  unint64_t v5;
  void *v6;

  v2 = *(void **)a1;
  v3 = *(void **)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 24);
  v5 = *(_QWORD *)(a1 + 32);
  v6 = *(void **)(a1 + 40);

  sub_1D2C45258(v4, v5);
  swift_bridgeObjectRelease();

  return a1;
}

uint64_t sub_1D2C6B6F0(uint64_t a1)
{
  swift_bridgeObjectRelease();
  return a1;
}

unint64_t sub_1D2C6B718()
{
  unint64_t result;

  result = qword_1EFC9FD38;
  if (!qword_1EFC9FD38)
  {
    result = MEMORY[0x1D8245F38](&unk_1D2CAD908, &type metadata for ZKPErrors);
    atomic_store(result, (unint64_t *)&qword_1EFC9FD38);
  }
  return result;
}

uint64_t sub_1D2C6B75C(uint64_t a1)
{
  sub_1D2CAAF0C();
  return a1;
}

uint64_t sub_1D2C6B784(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v3;
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(a1 + 32);
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t sub_1D2C6B7C8(uint64_t a1)
{
  sub_1D2C45028(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
  return a1;
}

uint64_t sub_1D2C6B7F4(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  uint64_t v9;
  unint64_t v10;
  void *v12;
  void *v13;

  v2 = *(void **)(a1 + 8);
  v3 = *(void **)(a1 + 16);
  v4 = *(void **)(a1 + 24);
  v5 = *(void **)(a1 + 32);
  v6 = *(void **)(a1 + 40);
  v8 = *(void **)(a1 + 48);
  v7 = *(void **)(a1 + 56);
  v9 = *(_QWORD *)(a1 + 72);
  v10 = *(_QWORD *)(a1 + 80);
  v12 = *(void **)a1;
  v13 = *(void **)(a1 + 88);

  sub_1D2C45258(v9, v10);
  swift_bridgeObjectRelease();

  return a1;
}

unint64_t sub_1D2C6B8A4()
{
  unint64_t result;

  result = qword_1EFC9FD60;
  if (!qword_1EFC9FD60)
  {
    result = MEMORY[0x1D8245F38](&unk_1D2CAE6C8, &type metadata for KVAC.Errors);
    atomic_store(result, (unint64_t *)&qword_1EFC9FD60);
  }
  return result;
}

uint64_t sub_1D2C6B8E8(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return a1;
}

unint64_t sub_1D2C6B950@<X0>(unint64_t a1@<X0>, unint64_t a2@<X1>, unint64_t *a3@<X8>)
{
  uint64_t v3;
  unint64_t result;

  result = sub_1D2C65DB4(a1, a2, *(_QWORD *)(v3 + 16), *(_QWORD *)(v3 + 24));
  *a3 = result;
  return result;
}

uint64_t sub_1D2C6B978(uint64_t a1)
{
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t *__swift_allocate_boxed_opaque_existential_1(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t v2;

  v1 = a1;
  if ((*(_BYTE *)(*(_QWORD *)(a1[3] - 8) + 82) & 2) != 0)
  {
    *a1 = swift_allocBox();
    return (uint64_t *)v2;
  }
  return v1;
}

id *sub_1D2C6B9DC(id *a1)
{
  id v2;

  v2 = *a1;
  return a1;
}

unint64_t sub_1D2C6BA04()
{
  unint64_t result;

  result = qword_1EFC9FD78;
  if (!qword_1EFC9FD78)
  {
    result = MEMORY[0x1D8245F38](&unk_1D2CAFE1C, &type metadata for Hash2FieldErrors);
    atomic_store(result, (unint64_t *)&qword_1EFC9FD78);
  }
  return result;
}

uint64_t sub_1D2C6BA48(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED9858D0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

_QWORD *sub_1D2C6BA88@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v3;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v12[4];
  _QWORD v13[2];

  v5 = *(uint64_t **)(v3 + 16);
  v7 = *v5;
  v6 = v5[1];
  v13[0] = v7;
  v13[1] = v6;
  v12[2] = v13;
  result = sub_1D2C66E9C((_QWORD *(*)(uint64_t *__return_ptr, uint64_t, uint64_t))sub_1D2C6BB10, (uint64_t)v12, a1, a2);
  *a3 = result;
  a3[1] = v9;
  a3[2] = v10;
  a3[3] = v11;
  return result;
}

uint64_t sub_1D2C6BAE4(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 != 15)
    return sub_1D2C45258(a1, a2);
  return a1;
}

uint64_t sub_1D2C6BAF8(__int128 *a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;

  v2 = *a1;
  v3 = a1[1];
  *(_QWORD *)(a2 + 32) = *((_QWORD *)a1 + 4);
  *(_OWORD *)a2 = v2;
  *(_OWORD *)(a2 + 16) = v3;
  return a2;
}

uint64_t sub_1D2C6BB10@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  return sub_1D2C673A4(a1, a2);
}

uint64_t sub_1D2C6BB2C(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  void *v4;
  void *v5;
  void *v6;
  id v7;
  id v8;
  id v9;
  id v10;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  v4 = *(void **)(a1 + 24);
  v5 = *(void **)(a1 + 32);
  v6 = *(void **)(a1 + 40);
  v7 = *(id *)a1;
  sub_1D2C45028(v2, v3);
  v8 = v4;
  v9 = v5;
  v10 = v6;
  sub_1D2CAAF0C();
  return a1;
}

uint64_t sub_1D2C6BB98(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  void *v4;
  void *v5;
  void *v6;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  v4 = *(void **)(a1 + 24);
  v5 = *(void **)(a1 + 32);
  v6 = *(void **)(a1 + 40);

  sub_1D2C45258(v2, v3);
  swift_bridgeObjectRelease();

  return a1;
}

uint64_t dispatch thunk of KVACCredentialWrapper.__allocating_init(credentialData:)()
{
  return dispatch thunk of KVACIssuanceWrapper.__allocating_init(issuanceData:)();
}

ValueMetadata *type metadata accessor for HE.Plaintext()
{
  return &type metadata for HE.Plaintext;
}

void sub_1D2C6BC3C(uint64_t a1)
{
  __asm { BR              X9 }
}

uint64_t sub_1D2C6BC74()
{
  uint64_t v0;
  char v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  int v6;
  uint64_t v7;

  v3 = cche_param_ctx_sizeof();
  v4 = swift_slowAlloc();
  *(_QWORD *)(v0 + 16) = v4;
  *(_QWORD *)(v0 + 24) = v4 + v3;
  *(_QWORD *)(v0 + 32) = v4;
  v5 = cche_param_ctx_init();
  if (v5)
  {
    v6 = v5;
    sub_1D2C4E7DC();
    swift_allocError();
    *(_DWORD *)v7 = v6;
    *(_BYTE *)(v7 + 4) = 0;
    swift_willThrow();
    _s12ParamContextCMa();
    swift_deallocPartialClassInstance();
  }
  else
  {
    *(_BYTE *)(v0 + 40) = v1;
    *(_BYTE *)(v0 + 41) = v2;
  }
  return v0;
}

uint64_t sub_1D2C6BDF4()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);
  if (v1)
    MEMORY[0x1D8245FD4](v1, -1, -1);
  return swift_deallocClassInstance();
}

uint64_t _s12ParamContextCMa()
{
  return objc_opt_self();
}

uint64_t sub_1D2C6BE44()
{
  int v0;
  int v1;
  uint64_t v2;

  cche_param_ctx_polynomial_degree();
  v0 = cche_ciphertext_galois_elt_rotate_rows_right();
  if (!v0)
    return 0;
  v1 = v0;
  sub_1D2C4E7DC();
  swift_allocError();
  *(_DWORD *)v2 = v1;
  *(_BYTE *)(v2 + 4) = 0;
  return swift_willThrow();
}

uint64_t sub_1D2C6BF00()
{
  int v0;
  int v1;
  uint64_t v2;

  cche_param_ctx_polynomial_degree();
  v0 = cche_ciphertext_galois_elt_swap_columns();
  if (!v0)
    return 0;
  v1 = v0;
  sub_1D2C4E7DC();
  swift_allocError();
  *(_DWORD *)v2 = v1;
  *(_BYTE *)(v2 + 4) = 0;
  return swift_willThrow();
}

uint64_t sub_1D2C6BFAC()
{
  return cche_encryption_params_polynomial_degree() >> 1;
}

uint64_t sub_1D2C6BFD4()
{
  uint64_t result;

  result = cche_ciphertext_fresh_npolys();
  qword_1EFCA4A70 = result;
  return result;
}

uint64_t sub_1D2C6BFF4()
{
  uint64_t result;

  result = cche_ciphertext_fresh_correction_factor();
  if (result < 0)
    __break(1u);
  else
    qword_1EFCA4A78 = result;
  return result;
}

uint64_t sub_1D2C6C018@<X0>(uint64_t a1@<X0>, char a2@<W1>, _QWORD *a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  _QWORD *v9;
  uint64_t result;
  int v11;
  uint64_t v12;

  v4 = v3;
  v8 = cche_plaintext_sizeof();
  type metadata accessor for HE.ObjectStorage();
  v9 = (_QWORD *)swift_allocObject();
  v9[2] = v4;
  swift_retain();
  result = swift_slowAlloc();
  v9[3] = result;
  v9[4] = result + v8;
  if (HIDWORD(*(_QWORD *)(a1 + 16)))
  {
    __break(1u);
  }
  else
  {
    if ((a2 & 1) != 0)
    {
      result = cche_encode_simd_reduced_int64();
      v11 = result;
      if ((_DWORD)result)
      {
LABEL_4:
        sub_1D2C4E7DC();
        swift_allocError();
        *(_DWORD *)v12 = v11;
        *(_BYTE *)(v12 + 4) = 0;
        swift_willThrow();
        return swift_release();
      }
    }
    else
    {
      result = cche_encode_simd_int64();
      v11 = result;
      if ((_DWORD)result)
        goto LABEL_4;
    }
    *a3 = v9;
  }
  return result;
}

uint64_t sub_1D2C6C11C(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  char v3;
  char v4;
  _BYTE v6[2];
  _BYTE v7[2];

  v2 = *a2;
  v3 = *(_BYTE *)(*(_QWORD *)a1 + 41);
  v7[0] = *(_BYTE *)(*(_QWORD *)a1 + 40);
  v7[1] = v3;
  v4 = *(_BYTE *)(v2 + 40);
  LOBYTE(v2) = *(_BYTE *)(v2 + 41);
  v6[0] = v4;
  v6[1] = v2;
  return _s16CryptoKitPrivate2HEO16EncryptionParamsV2eeoiySbAE_AEtFZ_0((uint64_t)v7, (uint64_t)v6) & 1;
}

char *sub_1D2C6C16C(uint64_t a1, uint64_t a2)
{
  int64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  char *result;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  int64_t v12;
  int64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;

  v3 = *(_QWORD *)(a1 + 16);
  if (v3 == *(_QWORD *)(a2 + 16) && v3)
  {
    v5 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 16);
    v22 = v5;
    if (v5)
    {
      v6 = sub_1D2CAAF30();
      *(_QWORD *)(v6 + 16) = v5;
      v21 = v6;
      bzero((void *)(v6 + 32), 8 * v5);
    }
    else
    {
      v21 = MEMORY[0x1E0DEE9D8];
    }
    result = (char *)sub_1D2CAAF0C();
    v8 = 0;
    v9 = (char *)MEMORY[0x1E0DEE9D8];
    while (1)
    {
      v10 = *(_QWORD *)(a1 + 8 * v8 + 32);
      v11 = *(_QWORD *)(v10 + 16);
      v12 = *((_QWORD *)v9 + 2);
      v2 = v12 + v11;
      if (__OFADD__(v12, v11))
      {
        __break(1u);
LABEL_31:
        __break(1u);
LABEL_32:
        __break(1u);
LABEL_33:
        __break(1u);
        goto LABEL_34;
      }
      sub_1D2CAAF0C();
      result = (char *)swift_isUniquelyReferenced_nonNull_native();
      if ((_DWORD)result && v2 <= *((_QWORD *)v9 + 3) >> 1)
      {
        if (*(_QWORD *)(v10 + 16))
          goto LABEL_18;
      }
      else
      {
        if (v12 <= v2)
          v13 = v12 + v11;
        else
          v13 = v12;
        result = sub_1D2C71A88(result, v13, 1, v9);
        v9 = result;
        if (*(_QWORD *)(v10 + 16))
        {
LABEL_18:
          v14 = *((_QWORD *)v9 + 2);
          if ((*((_QWORD *)v9 + 3) >> 1) - v14 < v11)
            goto LABEL_32;
          result = (char *)memcpy(&v9[8 * v14 + 32], (const void *)(v10 + 32), 8 * v11);
          if (v11)
          {
            v15 = *((_QWORD *)v9 + 2);
            v16 = __OFADD__(v15, v11);
            v17 = v15 + v11;
            if (v16)
              goto LABEL_33;
            *((_QWORD *)v9 + 2) = v17;
          }
          goto LABEL_8;
        }
      }
      if (v11)
        goto LABEL_31;
LABEL_8:
      result = (char *)swift_bridgeObjectRelease();
      if (v3 == ++v8)
      {
        result = (char *)swift_bridgeObjectRelease();
        if ((unsigned __int128)(v22 * (__int128)v3) >> 64 == (v22 * v3) >> 63)
        {
          if (*((_QWORD *)v9 + 2) != v22 * v3)
          {
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            break;
          }
          v2 = v21;
          sub_1D2CAAF0C();
          v18 = cche_crt_compose();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if (!v18)
            return (char *)v2;
          swift_bridgeObjectRelease();
          sub_1D2C4E7DC();
          swift_allocError();
          v20 = 0;
          *(_DWORD *)v19 = v18;
          goto LABEL_28;
        }
LABEL_34:
        __break(1u);
        return result;
      }
    }
  }
  sub_1D2C4E7DC();
  swift_allocError();
  *(_DWORD *)v19 = 5;
  v20 = 1;
LABEL_28:
  *(_BYTE *)(v19 + 4) = v20;
  swift_willThrow();
  return (char *)v2;
}

uint64_t sub_1D2C6C3EC()
{
  uint64_t result;
  unint64_t v1;

  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  result = swift_getAssociatedTypeWitness();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *sub_1D2C6C518(uint64_t *a1, uint64_t *a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v9;

  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v6 = *(_QWORD *)(v5 + 64);
  v7 = *(_DWORD *)(v5 + 80);
  if ((v7 & 0x1000F8) != 0 || ((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 8 > 0x18)
  {
    v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((unsigned __int16)((v7 & 0xF8) + 23) & (unsigned __int16)~(v7 & 0xF8) & 0x1F8));
    swift_retain();
  }
  else
  {
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v5 + 16))(a1, a2, AssociatedTypeWitness);
    *(_QWORD *)(((unint64_t)a1 + v6 + 7) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)a2 + v6 + 7) & 0xFFFFFFFFFFFFF8);
    sub_1D2CAAF0C();
  }
  return a1;
}

uint64_t sub_1D2C6C684(uint64_t a1)
{
  uint64_t AssociatedTypeWitness;

  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 8))(a1, AssociatedTypeWitness);
  return swift_bridgeObjectRelease();
}

uint64_t sub_1D2C6C788(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;

  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(a1, a2, AssociatedTypeWitness);
  *(_QWORD *)((*(_QWORD *)(v5 + 64) + 7 + a1) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)((*(_QWORD *)(v5 + 64) + 7 + a2) & 0xFFFFFFFFFFFFF8);
  sub_1D2CAAF0C();
  return a1;
}

uint64_t sub_1D2C6C8A8(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;

  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 24))(a1, a2, AssociatedTypeWitness);
  *(_QWORD *)((*(_QWORD *)(v5 + 64) + 7 + a1) & 0xFFFFFFFFFFFFFFF8) = *(_QWORD *)((*(_QWORD *)(v5 + 64) + 7 + a2) & 0xFFFFFFFFFFFFF8);
  sub_1D2CAAF0C();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1D2C6C9D4(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;

  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 32))(a1, a2, AssociatedTypeWitness);
  *(_QWORD *)((*(_QWORD *)(v5 + 64) + 7 + a1) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)((*(_QWORD *)(v5 + 64) + 7 + a2) & 0xFFFFFFFFFFFFF8);
  return a1;
}

uint64_t sub_1D2C6CAF0(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;

  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 40))(a1, a2, AssociatedTypeWitness);
  *(_QWORD *)((*(_QWORD *)(v5 + 64) + 7 + a1) & 0xFFFFFFFFFFFFFFF8) = *(_QWORD *)((*(_QWORD *)(v5 + 64) + 7 + a2) & 0xFFFFFFFFFFFFF8);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1D2C6CC14(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  unint64_t v12;

  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  v4 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0x7FFFFFFF)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(_QWORD *)(v4 + 64);
  if (v6 < a2)
  {
    if (((((v7 + 7) & 0xFFFFFFFFFFFFFFF8) + 8) & 0xFFFFFFF8) != 0)
      v8 = 2;
    else
      v8 = a2 - v6 + 1;
    if (v8 >= 0x10000)
      v9 = 4;
    else
      v9 = 2;
    if (v8 < 0x100)
      v9 = 1;
    if (v8 >= 2)
      v10 = v9;
    else
      v10 = 0;
    __asm { BR              X15 }
  }
  if (v5 >= 0x7FFFFFFF)
    return (*(uint64_t (**)(uint64_t))(v4 + 48))(a1);
  v12 = *(_QWORD *)((a1 + v7 + 7) & 0xFFFFFFFFFFFFF8);
  if (v12 >= 0xFFFFFFFF)
    LODWORD(v12) = -1;
  return (v12 + 1);
}

void sub_1D2C6CE08(unsigned int *a1, unsigned int a2, unsigned int a3)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  int v9;
  int v10;
  unsigned int v11;

  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  v6 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  if (*(_DWORD *)(v6 + 84) <= 0x7FFFFFFFu)
    v7 = 0x7FFFFFFF;
  else
    v7 = *(_DWORD *)(v6 + 84);
  if (v7 >= a3)
  {
    v10 = 0u;
    if (a2 <= v7)
      goto LABEL_17;
  }
  else
  {
    if (((*(_DWORD *)(v6 + 64) + 7) & 0xFFFFFFF8) == 0xFFFFFFF8)
      v8 = a3 - v7 + 1;
    else
      v8 = 2;
    if (v8 >= 0x10000)
      v9 = 4;
    else
      v9 = 2;
    if (v8 < 0x100)
      v9 = 1;
    if (v8 >= 2)
      v10 = v9;
    else
      v10 = 0;
    if (a2 <= v7)
LABEL_17:
      __asm { BR              X12 }
  }
  if (((*(_DWORD *)(v6 + 64) + 7) & 0xFFFFFFF8) != 0xFFFFFFF8)
  {
    v11 = ~v7 + a2;
    bzero(a1, ((*(_QWORD *)(v6 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 8);
    *a1 = v11;
  }
  __asm { BR              X10 }
}

void sub_1D2C6CFB4()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
  JUMPOUT(0x1D2C6D030);
}

void sub_1D2C6CFBC()
{
  uint64_t v0;
  int v1;
  uint64_t v2;

  *(_DWORD *)(v0 + v2) = 0;
  if (v1)
    JUMPOUT(0x1D2C6CFC4);
  JUMPOUT(0x1D2C6D030);
}

void sub_1D2C6D00C()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
  JUMPOUT(0x1D2C6D030);
}

void sub_1D2C6D014()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  *(_DWORD *)(v0 + v1) = v2;
  JUMPOUT(0x1D2C6D030);
}

uint64_t sub_1D2C6D01C@<X0>(unsigned int a1@<W2>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *(_WORD *)(v3 + v5) = 0;
  if (!(_DWORD)v4)
    JUMPOUT(0x1D2C6D030);
  if (a1 < 0x7FFFFFFF)
  {
    if ((v4 & 0x80000000) == 0)
      JUMPOUT(0x1D2C6D02CLL);
    JUMPOUT(0x1D2C6D028);
  }
  return (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 56))(v3, v4);
}

uint64_t type metadata accessor for Proof(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for Proof);
}

ValueMetadata *type metadata accessor for PointVar()
{
  return &type metadata for PointVar;
}

ValueMetadata *type metadata accessor for ScalarVar()
{
  return &type metadata for ScalarVar;
}

uint64_t storeEnumTagSinglePayload for ZKPErrors(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1D2C6D0C4 + 4 * byte_1D2CAD844[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1D2C6D0F8 + 4 * byte_1D2CAD83F[v4]))();
}

uint64_t sub_1D2C6D0F8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1D2C6D100(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1D2C6D108);
  return result;
}

uint64_t sub_1D2C6D114(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1D2C6D11CLL);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1D2C6D120(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1D2C6D128(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ZKPErrors()
{
  return &type metadata for ZKPErrors;
}

unint64_t sub_1D2C6D148()
{
  unint64_t result;

  result = qword_1EFC9FE00;
  if (!qword_1EFC9FE00)
  {
    result = MEMORY[0x1D8245F38](&unk_1D2CAD8E0, &type metadata for ZKPErrors);
    atomic_store(result, (unint64_t *)&qword_1EFC9FE00);
  }
  return result;
}

uint64_t sub_1D2C6D18C()
{
  uint64_t result;
  uint64_t v1;

  result = sub_1D2C5D050(0x654B204153444345, 0xEF646E696C422079);
  qword_1EFCA4A80 = result;
  *(_QWORD *)algn_1EFCA4A88 = v1;
  return result;
}

uint64_t static CKPIETFKeyBlinding.blindSign(_:blindedBy:with:context:)(uint64_t a1, uint64_t a2, __SecKey *a3, __SecKey *a4, void *a5)
{
  return sub_1D2C6E130(a1, a2, a3, a4, a5);
}

void static CKPIETFKeyBlinding.blindPublicKey(publicKey:with:context:)(__SecKey *a1, __SecKey *a2, uint64_t a3)
{
  sub_1D2C6EA34(a1, a2, a3);
}

void static CKPIETFKeyBlinding.unblindPublicKey(_:with:context:)(__SecKey *a1, __SecKey *a2, void *a3)
{
  sub_1D2C6EF84(a1, a2, a3);
}

id sub_1D2C6D4C4(uint64_t a1, uint64_t a2, void *a3, void *a4, void *a5, uint64_t a6, uint64_t (*a7)(id, id, id))
{
  id v10;
  id v11;
  id v12;
  void *v13;

  v10 = a3;
  v11 = a4;
  v12 = a5;
  v13 = (void *)a7(v10, v11, v12);

  return v13;
}

id CKPIETFKeyBlinding.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

id CKPIETFKeyBlinding.init()()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for CKPIETFKeyBlinding();
  return objc_msgSendSuper2(&v2, sel_init);
}

id CKPIETFKeyBlinding.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for CKPIETFKeyBlinding();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t sub_1D2C6D640(__SecKey *a1)
{
  uint64_t result;
  __int128 v2;

  result = (uint64_t)SecKeyCopyAttributes(a1);
  if (result)
  {
    *(_QWORD *)&v2 = 0;
    type metadata accessor for CFString(0);
    sub_1D2C5AE40(&qword_1EFC9F738, (uint64_t (*)(uint64_t))type metadata accessor for CFString, (uint64_t)&unk_1D2CAC7F8);
    result = sub_1D2CAADBC();
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  __break(1u);
  __break(1u);
  return result;
}

void sub_1D2C6D8E4()
{
  uint64_t inited;
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  id v6;
  id v7;
  id v8;
  id v9;
  id v10;
  const __CFDictionary *v11;
  const __CFData *v12;
  SecKeyRef v13;

  __swift_instantiateConcreteTypeFromMangledName(&qword_1EFC9FE10);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1D2CAD540;
  v1 = (void *)*MEMORY[0x1E0CD6A38];
  v2 = (void *)*MEMORY[0x1E0CD6A50];
  *(_QWORD *)(inited + 32) = *MEMORY[0x1E0CD6A38];
  *(_QWORD *)(inited + 40) = v2;
  v3 = (void *)*MEMORY[0x1E0CD69F8];
  v4 = (void *)*MEMORY[0x1E0CD6A10];
  *(_QWORD *)(inited + 48) = *MEMORY[0x1E0CD69F8];
  *(_QWORD *)(inited + 56) = v4;
  v5 = (void *)*MEMORY[0x1E0CD6A20];
  *(_QWORD *)(inited + 64) = *MEMORY[0x1E0CD6A20];
  v6 = v1;
  v7 = v2;
  v8 = v3;
  v9 = v4;
  v10 = v5;
  *(_QWORD *)(inited + 72) = sub_1D2CAAF48();
  sub_1D2C7A144(inited);
  type metadata accessor for CFString(0);
  sub_1D2C5AE40(&qword_1EFC9F738, (uint64_t (*)(uint64_t))type metadata accessor for CFString, (uint64_t)&unk_1D2CAC7F8);
  v11 = (const __CFDictionary *)sub_1D2CAADB0();
  swift_bridgeObjectRelease();
  v12 = (const __CFData *)sub_1D2CAA954();
  v13 = SecKeyCreateWithData(v12, v11, 0);

  if (v13)
  else
    __break(1u);
}

void _s16CryptoKitPrivate18CKPIETFKeyBlindingC23privateScalarFromSecKeyy10Foundation4DataVSgSo0iJ3RefaFZ_0(__SecKey *a1)
{
  CFDataRef v2;
  CFDataRef v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t (*v7)(uint64_t);
  id v8;
  void *v9;
  id v10;
  id v11;
  void *v12;
  uint64_t v13;
  CFErrorRef error[2];

  error[1] = *(CFErrorRef *)MEMORY[0x1E0C80C00];
  sub_1D2C6D640(a1);
  error[0] = 0;
  v2 = SecKeyCopyExternalRepresentation(a1, error);
  v3 = v2;
  if (v2)
  {
    v4 = sub_1D2CAA96C();
    v6 = v5;

    sub_1D2CAAD50();
    v7 = (uint64_t (*)(uint64_t))MEMORY[0x1E0CA9860];
    sub_1D2C45028(v4, v6);
    sub_1D2C5AE40((unint64_t *)&qword_1ED985C78, v7, MEMORY[0x1E0CA9858]);
    sub_1D2CAAC00();
    __swift_instantiateConcreteTypeFromMangledName(&qword_1ED985DB0);
    swift_dynamicCast();
    v8 = objc_allocWithZone(MEMORY[0x1E0D1BD78]);
    v9 = (void *)sub_1D2CAA954();
    v10 = objc_msgSend(v8, sel_initWithx963Representation_group_, v9, v13);
    sub_1D2C45258(v4, v6);

    if (v10)
    {
      v11 = objc_msgSend(v10, sel_serializedBigEndianScalar);
      if (v11)
      {
        v12 = v11;
        sub_1D2CAA96C();

        sub_1D2C45258(v4, v6);
      }
      else
      {

        sub_1D2C45258(v4, v6);
      }
    }
    else
    {
      __break(1u);
    }
  }
}

CFDataRef _s16CryptoKitPrivate18CKPIETFKeyBlindingC7isValid9signature3for4with7contextSb10Foundation4DataV_AKSo9SecKeyRefaSo6NSDataCtFZ_0(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4, __SecKey *a5)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  unint64_t v20;
  uint64_t v21;
  CFDataRef result;
  CFDataRef v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  void (*v33)(char *, char *, uint64_t);
  char *v34;
  char v35;
  char *v36;
  char *v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t v48;
  CFErrorRef error[2];

  v45 = a3;
  v46 = a4;
  v43 = a1;
  v44 = a2;
  error[1] = *(CFErrorRef *)MEMORY[0x1E0C80C00];
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFC9FE38);
  MEMORY[0x1E0C80A78](v6);
  v8 = (char *)&v36 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_1D2CAACFC();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9);
  v12 = (char *)&v36 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFC9FE28);
  MEMORY[0x1E0C80A78](v13);
  v15 = (char *)&v36 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = sub_1D2CAAD44();
  v17 = *(_QWORD *)(v16 - 8);
  MEMORY[0x1E0C80A78](v16);
  v19 = (char *)&v36 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1D2C6D640(a5);
  v36 = v12;
  v37 = v19;
  v41 = v17;
  v42 = v16;
  v38 = v10;
  v39 = v8;
  v21 = v45;
  v20 = v46;
  v40 = v9;
  error[0] = 0;
  result = SecKeyCopyExternalRepresentation(a5, error);
  if (result)
  {
    v23 = result;
    v24 = sub_1D2CAA96C();
    v26 = v25;

    v47 = v24;
    v48 = v26;
    sub_1D2C45028(v24, v26);
    sub_1D2CAAD20();
    v28 = v41;
    v27 = v42;
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v41 + 56))(v15, 0, 1, v42);
    v29 = v37;
    (*(void (**)(char *, char *, uint64_t))(v28 + 32))(v37, v15, v27);
    v47 = v43;
    v48 = v44;
    sub_1D2C45028(v43, v44);
    sub_1D2C6F624();
    v30 = v39;
    sub_1D2CAACF0();
    v44 = v26;
    v31 = v38;
    v32 = v40;
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v38 + 56))(v30, 0, 1, v40);
    v33 = *(void (**)(char *, char *, uint64_t))(v31 + 32);
    v43 = v24;
    v34 = v36;
    v33(v36, v30, v32);
    v47 = v21;
    v48 = v20;
    v35 = sub_1D2CAAD08();
    sub_1D2C45258(v43, v44);
    (*(void (**)(char *, uint64_t))(v31 + 8))(v34, v32);
    (*(void (**)(char *, uint64_t))(v28 + 8))(v29, v27);
    return (CFDataRef)(v35 & 1);
  }
  if (error[0])
  {

    v35 = 0;
    return (CFDataRef)(v35 & 1);
  }
  __break(1u);
  return result;
}

uint64_t sub_1D2C6DFA0(void *a1, id a2, unint64_t a3)
{
  uint64_t v3;
  id v6;
  void *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;

  v6 = objc_msgSend(a1, sel_serializedBigEndianScalar);
  if (!v6)
    __break(1u);
  v7 = v6;
  v8 = sub_1D2CAA96C();
  v10 = v9;

  sub_1D2C5EDA4(0, 0x1000000000000);
  sub_1D2C45028(v8, v10);
  sub_1D2C45028((uint64_t)a2, a3);
  sub_1D2C5EDA4((uint64_t)a2, a3);
  sub_1D2C45258((uint64_t)a2, a3);
  sub_1D2C45258(v8, v10);
  if (qword_1EFC9F6A0 != -1)
    swift_once();
  v11 = sub_1D2C64504(v8, v10, 1, qword_1EFCA4A80, *(uint64_t *)algn_1EFCA4A88, 72, 0);
  if (v3)
    goto LABEL_7;
  if (*(_QWORD *)(v11 + 16))
  {
    a2 = *(id *)(v11 + 32);
    swift_bridgeObjectRelease();
LABEL_7:
    sub_1D2C45258(v8, v10);
    return (uint64_t)a2;
  }
  result = swift_bridgeObjectRelease();
  __break(1u);
  return result;
}

uint64_t sub_1D2C6E130(uint64_t a1, uint64_t a2, __SecKey *a3, __SecKey *a4, void *a5)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  CFDataRef v16;
  CFDataRef v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  id v22;
  uint64_t v23;
  void *v24;
  CFDataRef v25;
  CFDataRef v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  id v31;
  void *v32;
  id v33;
  uint64_t v34;
  void *v35;
  unint64_t v36;
  void *v37;
  unint64_t v38;
  _BYTE *v39;
  _BYTE *v40;
  uint64_t result;
  void *v42;
  id v43;
  id v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  uint64_t v54;
  uint64_t v55;
  void *v56;
  void *v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  id v62;
  void *v63;
  uint64_t v64;
  uint64_t v65;
  CFErrorRef error[2];

  v61 = a2;
  v62 = a5;
  v60 = a1;
  error[1] = *(CFErrorRef *)MEMORY[0x1E0C80C00];
  v8 = sub_1D2CAACFC();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8);
  v11 = (char *)&v52 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = (_QWORD *)sub_1D2CAACD8();
  v13 = *(v12 - 1);
  MEMORY[0x1E0C80A78](v12);
  v15 = (char *)&v52 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  error[0] = 0;
  sub_1D2C6D640(a3);
  if (v5)
    return (uint64_t)v12;
  sub_1D2C6D640(a4);
  v16 = SecKeyCopyExternalRepresentation(a4, error);
  if (!v16)
  {
    if (!error[0])
    {
LABEL_16:
      __break(1u);
      goto LABEL_17;
    }

    sub_1D2C6F54C();
    swift_allocError();
    *v39 = 3;
    swift_willThrow();
    return (uint64_t)v12;
  }
  v17 = v16;
  v52 = v13;
  v53 = v12;
  v18 = sub_1D2CAA96C();
  v58 = v18;
  v20 = v19;

  v21 = sub_1D2CAAD50();
  v59 = v20;
  sub_1D2C45028(v18, v20);
  v55 = sub_1D2C5AE40((unint64_t *)&qword_1ED985C78, (uint64_t (*)(uint64_t))MEMORY[0x1E0CA9860], MEMORY[0x1E0CA9858]);
  v56 = (void *)v21;
  sub_1D2CAAC00();
  v54 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED985DB0);
  swift_dynamicCast();
  v57 = v63;
  v22 = objc_allocWithZone(MEMORY[0x1E0D1BD78]);
  v23 = v58;
  v24 = (void *)sub_1D2CAA954();
  v12 = objc_msgSend(v22, sel_initWithx963Representation_group_, v24, v57);
  sub_1D2C45258(v23, v59);

  if (!v12)
  {
    __break(1u);
    goto LABEL_15;
  }
  v25 = SecKeyCopyExternalRepresentation(a3, error);
  if (!v25)
  {
    if (!error[0])
    {
LABEL_17:
      __break(1u);
      goto LABEL_18;
    }

    sub_1D2C6F54C();
    swift_allocError();
    *v40 = 3;
    swift_willThrow();

    sub_1D2C45258(v58, v59);
    return (uint64_t)v12;
  }
  v26 = v25;
  v57 = v12;
  v27 = sub_1D2CAA96C();
  v29 = v28;

  v30 = v29;
  sub_1D2C45028(v27, v29);
  sub_1D2CAAC00();
  swift_dynamicCast();
  v56 = v63;
  v31 = objc_allocWithZone(MEMORY[0x1E0D1BD78]);
  v32 = (void *)sub_1D2CAA954();
  v33 = objc_msgSend(v31, sel_initWithx963Representation_group_, v32, v56);
  v55 = v27;
  v56 = (void *)v30;
  v34 = v27;
  v35 = v33;
  sub_1D2C45258(v34, v30);

  if (!v35)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  v37 = (void *)sub_1D2CAA96C();
  v38 = v36;
  v42 = (void *)sub_1D2C6DFA0(v35, v37, v36);
  v62 = v35;
  sub_1D2C45258((uint64_t)v37, v38);
  v43 = sub_1D2C830A8(v57, (uint64_t)v42);

  v44 = objc_msgSend(v43, sel_x963Representation);
  if (v44)
  {
    v45 = v44;
    v46 = sub_1D2CAA96C();
    v48 = v47;

    v64 = v46;
    v65 = v48;
    sub_1D2CAACC0();
    v64 = v60;
    v65 = v61;
    sub_1D2C6F624();
    sub_1D2CAACCC();
    v49 = sub_1D2CAACE4();
    v51 = v50;
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
    v12 = (_QWORD *)sub_1D2CAA954();
    sub_1D2C45258(v49, v51);

    sub_1D2C45258(v55, (unint64_t)v56);
    sub_1D2C45258(v58, v59);

    (*(void (**)(char *, _QWORD *))(v52 + 8))(v15, v53);
    return (uint64_t)v12;
  }
LABEL_18:
  __break(1u);
  swift_unexpectedError();
  __break(1u);
  result = swift_unexpectedError();
  __break(1u);
  return result;
}

uint64_t _s16CryptoKitPrivate18CKPIETFKeyBlindingC28compressedRepresentationFrom6secKeySo6NSDataCSgSo03SecJ3Refa_tFZ_0(__SecKey *a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  CFDataRef v11;
  CFDataRef v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  _QWORD v19[4];
  CFErrorRef error[2];

  error[1] = *(CFErrorRef *)MEMORY[0x1E0C80C00];
  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFC9FE28);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)v19 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_1D2CAAD44();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  error[0] = 0;
  sub_1D2C6D640(a1);
  v11 = SecKeyCopyExternalRepresentation(a1, error);
  if (!v11)
    return 0;
  v12 = v11;
  v13 = sub_1D2CAA96C();
  v15 = v14;

  v19[2] = v13;
  v19[3] = v15;
  sub_1D2C45028(v13, v15);
  sub_1D2CAAD20();
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v6 + 56))(v4, 0, 1, v5);
  (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v8, v4, v5);
  v16 = sub_1D2CAAD2C();
  v18 = v17;
  v9 = sub_1D2CAA954();
  sub_1D2C45258(v16, v18);
  sub_1D2C45258(v13, v15);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  return v9;
}

uint64_t _s16CryptoKitPrivate18CKPIETFKeyBlindingC10secKeyFrom24compressedRepresentationSo03SecG3RefaSgSo6NSDataC_tFZ_0()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v15[4];

  v0 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFC9FE28);
  MEMORY[0x1E0C80A78](v0);
  v2 = (char *)v15 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = sub_1D2CAAD44();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v6 = (char *)v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15[2] = sub_1D2CAA96C();
  v15[3] = v7;
  sub_1D2CAAD38();
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v4 + 56))(v2, 0, 1, v3);
  v8 = (*(uint64_t (**)(char *, char *, uint64_t))(v4 + 32))(v6, v2, v3);
  v9 = MEMORY[0x1D82450B0](v8);
  v11 = v10;
  sub_1D2C6D8E4();
  v13 = v12;
  sub_1D2C45258(v9, v11);
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  return v13;
}

void sub_1D2C6EA34(__SecKey *a1, __SecKey *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  CFDataRef v17;
  CFDataRef v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  _BYTE *v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  void (*v28)(char *, uint64_t);
  CFDataRef v29;
  CFDataRef v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t (*v34)(uint64_t);
  uint64_t v35;
  id v36;
  void *v37;
  id v38;
  uint64_t v39;
  void *v40;
  unint64_t v41;
  void *v42;
  unint64_t v43;
  _BYTE *v44;
  void *v45;
  id v46;
  id v47;
  void *v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  void (*v56)(char *, uint64_t);
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  void (*v60)(char *, uint64_t);
  id v61;
  unint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  CFErrorRef error[2];

  error[1] = *(CFErrorRef *)MEMORY[0x1E0C80C00];
  v7 = sub_1D2CAAD44();
  v8 = *(_QWORD *)(v7 - 8);
  v9 = MEMORY[0x1E0C80A78](v7);
  v11 = (char *)&v57 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = MEMORY[0x1E0C80A78](v9);
  v14 = (char *)&v57 - v13;
  MEMORY[0x1E0C80A78](v12);
  v16 = (char *)&v57 - v15;
  sub_1D2C6D640(a1);
  if (!v3)
  {
    sub_1D2C6D640(a2);
    error[0] = 0;
    v17 = SecKeyCopyExternalRepresentation(a1, error);
    if (v17)
    {
      v18 = v17;
      v64 = a3;
      v65 = v7;
      v19 = sub_1D2CAA96C();
      v21 = v20;

      v22 = v21;
      v23 = v19;
      v67 = v19;
      v68 = v22;
      sub_1D2C45028(v19, v22);
      sub_1D2CAAD20();
      v62 = v22;
      v25 = v65;
      (*(void (**)(char *, char *, uint64_t))(v8 + 16))(v14, v16, v65);
      v26 = sub_1D2CAAD2C();
      v63 = v27;
      v61 = sub_1D2C69958();
      sub_1D2C45258(v26, v63);
      v28 = *(void (**)(char *, uint64_t))(v8 + 8);
      v28(v14, v25);
      v29 = SecKeyCopyExternalRepresentation(a2, error);
      if (!v29)
      {
        if (error[0])
        {

          sub_1D2C6F54C();
          swift_allocError();
          *v44 = 3;
          swift_willThrow();

          sub_1D2C45258(v23, v62);
          v28(v16, v25);
          return;
        }
        goto LABEL_17;
      }
      v30 = v29;
      v60 = v28;
      v63 = v23;
      v31 = sub_1D2CAA96C();
      v33 = v32;

      sub_1D2CAAD50();
      v34 = (uint64_t (*)(uint64_t))MEMORY[0x1E0CA9860];
      sub_1D2C45028(v31, v33);
      sub_1D2C5AE40((unint64_t *)&qword_1ED985C78, v34, MEMORY[0x1E0CA9858]);
      sub_1D2CAAC00();
      __swift_instantiateConcreteTypeFromMangledName(&qword_1ED985DB0);
      swift_dynamicCast();
      v35 = v66;
      v36 = objc_allocWithZone(MEMORY[0x1E0D1BD78]);
      v37 = (void *)sub_1D2CAA954();
      v38 = objc_msgSend(v36, sel_initWithx963Representation_group_, v37, v35);
      v58 = v31;
      v59 = v33;
      v39 = v31;
      v40 = v38;
      sub_1D2C45258(v39, v33);

      if (v40)
      {
        v42 = (void *)sub_1D2CAA96C();
        v43 = v41;
        v45 = (void *)sub_1D2C6DFA0(v40, v42, v41);
        sub_1D2C45258((uint64_t)v42, v43);
        v46 = sub_1D2C831C0((uint64_t)v45, v61);

        v47 = objc_msgSend(v46, sel_serializedPublicKey_, 1);
        if (v47)
        {
          v48 = v47;
          v49 = sub_1D2CAA96C();
          v51 = v50;

          v67 = v49;
          v68 = v51;
          v52 = sub_1D2CAAD38();
          v53 = MEMORY[0x1D82450B0](v52);
          v55 = v54;
          sub_1D2C6D8E4();
          sub_1D2C45258(v53, v55);

          sub_1D2C45258(v58, v59);
          sub_1D2C45258(v63, v62);
          v56 = v60;
          v60(v11, v25);
          v56(v16, v25);
          return;
        }
        goto LABEL_18;
      }
    }
    else
    {
      if (error[0])
      {

        sub_1D2C6F54C();
        swift_allocError();
        *v24 = 3;
        swift_willThrow();
        return;
      }
      __break(1u);
    }
    __break(1u);
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
  }
}

void sub_1D2C6EF84(__SecKey *a1, __SecKey *a2, void *a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  CFDataRef v17;
  CFDataRef v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  _BYTE *v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  void (*v28)(char *, uint64_t);
  CFDataRef v29;
  CFDataRef v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t (*v34)(uint64_t);
  uint64_t v35;
  id v36;
  void *v37;
  id v38;
  uint64_t v39;
  void *v40;
  unint64_t v41;
  void *v42;
  unint64_t v43;
  _BYTE *v44;
  void *v45;
  id v46;
  id v47;
  uint64_t v48;
  void *v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  void (*v57)(char *, uint64_t);
  uint64_t v58;
  id v59;
  id v60;
  uint64_t v61;
  unint64_t v62;
  void (*v63)(char *, uint64_t);
  id v64;
  unint64_t v65;
  unint64_t v66;
  id v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  CFErrorRef error[2];

  error[1] = *(CFErrorRef *)MEMORY[0x1E0C80C00];
  v7 = sub_1D2CAAD44();
  v8 = *(_QWORD *)(v7 - 8);
  v9 = MEMORY[0x1E0C80A78](v7);
  v11 = (char *)&v58 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = MEMORY[0x1E0C80A78](v9);
  v14 = (char *)&v58 - v13;
  MEMORY[0x1E0C80A78](v12);
  v16 = (char *)&v58 - v15;
  error[0] = 0;
  sub_1D2C6D640(a1);
  if (!v3)
  {
    sub_1D2C6D640(a2);
    v17 = SecKeyCopyExternalRepresentation(a1, error);
    if (v17)
    {
      v18 = v17;
      v67 = a3;
      v68 = v7;
      v19 = sub_1D2CAA96C();
      v21 = v20;

      v22 = v21;
      v23 = v19;
      v70 = v19;
      v71 = v22;
      sub_1D2C45028(v19, v22);
      sub_1D2CAAD20();
      v66 = v22;
      v25 = v68;
      (*(void (**)(char *, char *, uint64_t))(v8 + 16))(v14, v16, v68);
      v26 = sub_1D2CAAD2C();
      v65 = v27;
      v64 = sub_1D2C69958();
      sub_1D2C45258(v26, v65);
      v28 = *(void (**)(char *, uint64_t))(v8 + 8);
      v28(v14, v25);
      v29 = SecKeyCopyExternalRepresentation(a2, error);
      if (!v29)
      {
        if (error[0])
        {

          sub_1D2C6F54C();
          swift_allocError();
          *v44 = 3;
          swift_willThrow();

          sub_1D2C45258(v23, v66);
          v28(v16, v25);
          return;
        }
        goto LABEL_18;
      }
      v30 = v29;
      v63 = v28;
      v65 = v23;
      v31 = sub_1D2CAA96C();
      v33 = v32;

      sub_1D2CAAD50();
      v34 = (uint64_t (*)(uint64_t))MEMORY[0x1E0CA9860];
      sub_1D2C45028(v31, v33);
      sub_1D2C5AE40((unint64_t *)&qword_1ED985C78, v34, MEMORY[0x1E0CA9858]);
      sub_1D2CAAC00();
      __swift_instantiateConcreteTypeFromMangledName(&qword_1ED985DB0);
      swift_dynamicCast();
      v35 = v69;
      v36 = objc_allocWithZone(MEMORY[0x1E0D1BD78]);
      v37 = (void *)sub_1D2CAA954();
      v38 = objc_msgSend(v36, sel_initWithx963Representation_group_, v37, v35);
      v61 = v31;
      v62 = v33;
      v39 = v31;
      v40 = v38;
      sub_1D2C45258(v39, v33);

      if (v40)
      {
        v42 = (void *)sub_1D2CAA96C();
        v43 = v41;
        v45 = (void *)sub_1D2C6DFA0(v40, v42, v41);
        sub_1D2C45258((uint64_t)v42, v43);
        v46 = objc_msgSend(v45, sel_inverseModOrder);
        if (v46)
        {
          v67 = v45;
          v60 = v46;
          v59 = sub_1D2C831C0((uint64_t)v46, v64);
          v47 = objc_msgSend(v59, sel_serializedPublicKey_, 1);
          v48 = v65;
          if (v47)
          {
            v49 = v47;
            v50 = sub_1D2CAA96C();
            v52 = v51;

            v70 = v50;
            v71 = v52;
            v53 = sub_1D2CAAD38();
            v54 = MEMORY[0x1D82450B0](v53);
            v56 = v55;
            sub_1D2C6D8E4();
            sub_1D2C45258(v54, v56);

            sub_1D2C45258(v61, v62);
            sub_1D2C45258(v48, v66);
            v57 = v63;
            v63(v11, v25);
            v57(v16, v25);
            return;
          }
          goto LABEL_20;
        }
LABEL_19:
        __break(1u);
LABEL_20:
        __break(1u);
        return;
      }
    }
    else
    {
      if (error[0])
      {

        sub_1D2C6F54C();
        swift_allocError();
        *v24 = 3;
        swift_willThrow();
        return;
      }
      __break(1u);
    }
    __break(1u);
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
}

uint64_t type metadata accessor for CKPIETFKeyBlinding()
{
  return objc_opt_self();
}

unint64_t sub_1D2C6F54C()
{
  unint64_t result;

  result = qword_1EFC9FE08;
  if (!qword_1EFC9FE08)
  {
    result = MEMORY[0x1D8245F38](&unk_1D2CADA14, &type metadata for CKPIETFKeyBlindingErrors);
    atomic_store(result, (unint64_t *)&qword_1EFC9FE08);
  }
  return result;
}

uint64_t sub_1D2C6F590(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFC9FE18);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

_OWORD *sub_1D2C6F5D8(_OWORD *a1, _OWORD *a2)
{
  __int128 v2;

  v2 = a1[1];
  *a2 = *a1;
  a2[1] = v2;
  return a2;
}

uint64_t sub_1D2C6F5E8(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

unint64_t sub_1D2C6F624()
{
  unint64_t result;

  result = qword_1EFC9FE30;
  if (!qword_1EFC9FE30)
  {
    result = MEMORY[0x1D8245F38](MEMORY[0x1E0CB0310], MEMORY[0x1E0CB0338]);
    atomic_store(result, (unint64_t *)&qword_1EFC9FE30);
  }
  return result;
}

uint64_t sub_1D2C6F668(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  v3 = __swift_instantiateConcreteTypeFromMangledName(a2);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t storeEnumTagSinglePayload for CKPIETFKeyBlindingErrors(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_1D2C6F6F0 + 4 * byte_1D2CAD955[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_1D2C6F724 + 4 * byte_1D2CAD950[v4]))();
}

uint64_t sub_1D2C6F724(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1D2C6F72C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1D2C6F734);
  return result;
}

uint64_t sub_1D2C6F740(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1D2C6F748);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_1D2C6F74C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1D2C6F754(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for CKPIETFKeyBlindingErrors()
{
  return &type metadata for CKPIETFKeyBlindingErrors;
}

unint64_t sub_1D2C6F774()
{
  unint64_t result;

  result = qword_1EFC9FE40;
  if (!qword_1EFC9FE40)
  {
    result = MEMORY[0x1D8245F38](&unk_1D2CAD9EC, &type metadata for CKPIETFKeyBlindingErrors);
    atomic_store(result, (unint64_t *)&qword_1EFC9FE40);
  }
  return result;
}

objc_class *RSAPSSSPKI_Bridging.__allocating_init(data:)(uint64_t a1, unint64_t a2)
{
  objc_class *v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  id v10;
  objc_super v12;

  v6 = sub_1D2CAAB70();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v12 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = objc_allocWithZone(v2);
  sub_1D2C45028(a1, a2);
  sub_1D2CAAB58();
  if (v3)
  {
    sub_1D2C45258(a1, a2);

    swift_deallocPartialClassInstance();
  }
  else
  {
    (*(void (**)(uint64_t, char *, uint64_t))(v7 + 32))((uint64_t)v10 + OBJC_IVAR____TtC16CryptoKitPrivate19RSAPSSSPKI_Bridging_backingStruct, v9, v6);

    v12.receiver = v10;
    v12.super_class = v2;
    v2 = (objc_class *)objc_msgSendSuper2(&v12, sel_init);
    sub_1D2C45258(a1, a2);
  }
  return v2;
}

id RSAPSSSPKI_Bridging.init(data:)(uint64_t a1, unint64_t a2)
{
  void *v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  id v10;
  objc_class *v11;
  objc_super v13;

  v6 = sub_1D2CAAB70();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v13 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = v2;
  sub_1D2C45028(a1, a2);
  sub_1D2CAAB58();
  if (v3)
  {
    sub_1D2C45258(a1, a2);

    type metadata accessor for RSAPSSSPKI_Bridging();
    swift_deallocPartialClassInstance();
  }
  else
  {
    (*(void (**)(uint64_t, char *, uint64_t))(v7 + 32))((uint64_t)v10 + OBJC_IVAR____TtC16CryptoKitPrivate19RSAPSSSPKI_Bridging_backingStruct, v9, v6);

    v11 = (objc_class *)type metadata accessor for RSAPSSSPKI_Bridging();
    v13.receiver = v10;
    v13.super_class = v11;
    v10 = objc_msgSendSuper2(&v13, sel_init);
    sub_1D2C45258(a1, a2);
  }
  return v10;
}

uint64_t type metadata accessor for RSAPSSSPKI_Bridging()
{
  uint64_t result;

  result = qword_1ED985C68;
  if (!qword_1ED985C68)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t sub_1D2C6FC04()
{
  return sub_1D2CAAB4C();
}

uint64_t static RSAPSSSPKI_Bridging.serialize(keyBytes:)()
{
  return sub_1D2CAAB64();
}

id RSAPSSSPKI_Bridging.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

void RSAPSSSPKI_Bridging.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

id RSAPSSSPKI_Bridging.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for RSAPSSSPKI_Bridging();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t sub_1D2C6FE70()
{
  return type metadata accessor for RSAPSSSPKI_Bridging();
}

uint64_t sub_1D2C6FE78()
{
  uint64_t result;
  unint64_t v1;

  result = sub_1D2CAAB70();
  if (v1 <= 0x3F)
  {
    result = swift_updateClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

uint64_t method lookup function for RSAPSSSPKI_Bridging()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of RSAPSSSPKI_Bridging.__allocating_init(data:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 88))();
}

uint64_t dispatch thunk of RSAPSSSPKI_Bridging.publicKeyBytes()()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x60))();
}

ValueMetadata *type metadata accessor for PEC()
{
  return &type metadata for PEC;
}

BOOL static CKSecretSharing.SecretSharingError.SecretSharingErrorType.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t CKSecretSharing.SecretSharingError.SecretSharingErrorType.hash(into:)()
{
  return sub_1D2CAB140();
}

uint64_t CKSecretSharing.SecretSharingError.SecretSharingErrorType.hashValue.getter()
{
  sub_1D2CAB134();
  sub_1D2CAB140();
  return sub_1D2CAB158();
}

void CKSecretSharing.SecretSharingError.type.getter(_BYTE *a1@<X8>)
{
  _BYTE *v1;

  *a1 = *v1;
}

unint64_t sub_1D2C6FFC4()
{
  unint64_t result;

  result = qword_1EFC9FE48;
  if (!qword_1EFC9FE48)
  {
    result = MEMORY[0x1D8245F38](&protocol conformance descriptor for CKSecretSharing.SecretSharingError.SecretSharingErrorType, &type metadata for CKSecretSharing.SecretSharingError.SecretSharingErrorType);
    atomic_store(result, (unint64_t *)&qword_1EFC9FE48);
  }
  return result;
}

uint64_t _s18SecretSharingErrorVwxx()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t _s18SecretSharingErrorVwcp(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  *(_WORD *)(a1 + 16) = *(_WORD *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  v3 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v3;
  v4 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = v4;
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  sub_1D2CAAF0C();
  sub_1D2CAAF0C();
  sub_1D2CAAF0C();
  return a1;
}

uint64_t _s18SecretSharingErrorVwca(uint64_t a1, uint64_t a2)
{
  int v4;
  int v5;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v4 = *(_DWORD *)(a2 + 4);
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_DWORD *)(a1 + 4) = v4;
  v5 = *(_DWORD *)(a2 + 12);
  *(_WORD *)(a1 + 16) = *(_WORD *)(a2 + 16);
  *(_DWORD *)(a1 + 12) = v5;
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  sub_1D2CAAF0C();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  sub_1D2CAAF0C();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  sub_1D2CAAF0C();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 __swift_memcpy80_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  result = *(__n128 *)(a2 + 16);
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  *(__n128 *)(a1 + 16) = result;
  *(_OWORD *)(a1 + 32) = v3;
  return result;
}

uint64_t _s18SecretSharingErrorVwta(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  *(_WORD *)(a1 + 16) = *(_WORD *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_bridgeObjectRelease();
  v4 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v4;
  swift_bridgeObjectRelease();
  v5 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = v5;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t _s18SecretSharingErrorVwet(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 80))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 40);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t _s18SecretSharingErrorVwst(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 72) = 0;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 80) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 40) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 80) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for CKSecretSharing.SecretSharingError()
{
  return &type metadata for CKSecretSharing.SecretSharingError;
}

uint64_t _s18SecretSharingErrorV22SecretSharingErrorTypeOwet(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xEE)
    goto LABEL_17;
  if (a2 + 18 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 18) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 18;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 18;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 18;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0x13;
  v8 = v6 - 19;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t _s18SecretSharingErrorV22SecretSharingErrorTypeOwst(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 18 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 18) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xEE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xED)
    return ((uint64_t (*)(void))((char *)&loc_1D2C703A0 + 4 * byte_1D2CADAA5[v4]))();
  *a1 = a2 + 18;
  return ((uint64_t (*)(void))((char *)sub_1D2C703D4 + 4 * asc_1D2CADAA0[v4]))();
}

uint64_t sub_1D2C703D4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1D2C703DC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1D2C703E4);
  return result;
}

uint64_t sub_1D2C703F0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1D2C703F8);
  *(_BYTE *)result = a2 + 18;
  return result;
}

uint64_t sub_1D2C703FC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1D2C70404(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for CKSecretSharing.SecretSharingError.SecretSharingErrorType()
{
  return &type metadata for CKSecretSharing.SecretSharingError.SecretSharingErrorType;
}

uint64_t sub_1D2C70420()
{
  return sub_1D2C70550(&OBJC_IVAR____TtC16CryptoKitPrivate18AlishaSPAKE2Prover_z0_self);
}

uint64_t sub_1D2C7042C(uint64_t a1, uint64_t a2)
{
  return sub_1D2C705B0(a1, a2, &OBJC_IVAR____TtC16CryptoKitPrivate18AlishaSPAKE2Prover_z0_self);
}

uint64_t (*sub_1D2C70438())()
{
  swift_beginAccess();
  return j__swift_endAccess;
}

uint64_t sub_1D2C70480@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X3>, uint64_t *a3@<X8>)
{
  uint64_t *v4;
  uint64_t v5;
  unint64_t v6;

  v4 = (uint64_t *)(*a1 + *a2);
  swift_beginAccess();
  v5 = *v4;
  v6 = v4[1];
  *a3 = *v4;
  a3[1] = v6;
  return sub_1D2C45028(v5, v6);
}

uint64_t sub_1D2C704D0(uint64_t *a1, _QWORD *a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  uint64_t v5;
  unint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  unint64_t v9;

  v5 = *a1;
  v6 = a1[1];
  v7 = (uint64_t *)(*a2 + *a5);
  swift_beginAccess();
  v8 = *v7;
  v9 = v7[1];
  *v7 = v5;
  v7[1] = v6;
  sub_1D2C45028(v5, v6);
  return sub_1D2C45258(v8, v9);
}

uint64_t sub_1D2C70544()
{
  return sub_1D2C70550(&OBJC_IVAR____TtC16CryptoKitPrivate18AlishaSPAKE2Prover_z1_self);
}

uint64_t sub_1D2C70550(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = v1 + *a1;
  swift_beginAccess();
  v3 = *(_QWORD *)v2;
  sub_1D2C45028(*(_QWORD *)v2, *(_QWORD *)(v2 + 8));
  return v3;
}

uint64_t sub_1D2C705A4(uint64_t a1, uint64_t a2)
{
  return sub_1D2C705B0(a1, a2, &OBJC_IVAR____TtC16CryptoKitPrivate18AlishaSPAKE2Prover_z1_self);
}

uint64_t sub_1D2C705B0(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t *v6;
  uint64_t v7;
  unint64_t v8;

  v6 = (uint64_t *)(v3 + *a3);
  swift_beginAccess();
  v7 = *v6;
  v8 = v6[1];
  *v6 = a1;
  v6[1] = a2;
  return sub_1D2C45258(v7, v8);
}

uint64_t (*sub_1D2C70608())()
{
  swift_beginAccess();
  return j_j__swift_endAccess;
}

uint64_t AlishaSPAKE2Prover.__allocating_init(password:salt:authenticatedData:keyDerivationCost:)(void *a1, uint64_t *a2, void *a3, uint64_t *a4)
{
  objc_class *v4;
  id v9;

  v9 = objc_allocWithZone(v4);
  return AlishaSPAKE2Prover.init(password:salt:authenticatedData:keyDerivationCost:)(a1, a2, a3, a4);
}

uint64_t AlishaSPAKE2Prover.init(password:salt:authenticatedData:keyDerivationCost:)(void *a1, uint64_t *a2, void *a3, uint64_t *a4)
{
  void *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  id v19;
  void *v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  void *v24;
  void *v25;
  id v26;
  char *v27;
  id v28;
  unint64_t v29;
  uint64_t v30;
  size_t v31;
  uint64_t v32;
  uint64_t v33;
  id v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v39;
  void *v40;
  uint64_t result;
  unint64_t v42;
  uint64_t v43;
  int v44;
  id v45;
  uint64_t v46;
  size_t v47;
  char v48;
  int v49;
  id v50;
  uint64_t *v51;
  char *v52;
  id v53;
  objc_class *v54;
  id v55[4];
  _QWORD *v56;
  char *v57;
  id v58;
  id v59;
  uint64_t v60;
  uint64_t *v61;
  uint64_t v62;
  unint64_t v63;
  id v64;
  id v65;
  objc_super v66;
  int v67;
  uint64_t v68;

  v64 = a3;
  v65 = a1;
  v68 = *MEMORY[0x1E0C80C00];
  v9 = sub_1D2CAAE4C();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9);
  v12 = (char *)v55 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = ccspake_cp_256();
  if (!v13)
  {
    __break(1u);
    goto LABEL_36;
  }
  v14 = v13;
  v15 = v4;
  v16 = ccspake_sizeof_w();
  if (v16 + 0x4000000000000000 < 0)
  {
    __break(1u);
    goto LABEL_29;
  }
  v5 = v16;
  sub_1D2CAAE28();
  v17 = sub_1D2CAAE40();
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  v18 = v65;
  v19 = objc_msgSend(v65, sel_dataUsingEncoding_, v17);
  if (!v19)
LABEL_36:
    __break(1u);
  v20 = v19;
  v21 = sub_1D2CAA96C();
  v23 = v22;

  v62 = v21;
  v63 = v23;
  v24 = (void *)sub_1D2CAA954();
  a4 = a2;
  v25 = (void *)_s16CryptoKitPrivate6ScryptC9deriveKey8password4salt10outputSize4cost05blockJ015parallelizationSo6NSDataCSgAL_AMSis6UInt64Vs6UInt32VAQtFZ_0(v24, a2, 2 * v5);

  if (!v25)
  {
LABEL_10:
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EFC9FD70);
    v33 = swift_allocObject();
    *(_OWORD *)(v33 + 16) = xmmword_1D2CACF70;
    *(_QWORD *)(v33 + 56) = MEMORY[0x1E0DEA968];
    *(_QWORD *)(v33 + 32) = 0xD000000000000050;
    *(_QWORD *)(v33 + 40) = 0x80000001D2CB13F0;
    sub_1D2CAB11C();

    swift_bridgeObjectRelease();
    sub_1D2C45258(v62, v63);
    goto LABEL_25;
  }
  v6 = v25;
  if (objc_msgSend(v6, sel_length) != (id)(2 * v5))
  {

    goto LABEL_10;
  }
  v26 = objc_msgSend(v6, sel_subdataWithRange_, 0, v5);
  a2 = (uint64_t *)sub_1D2CAA96C();
  v12 = v27;

  v28 = objc_msgSend(v6, sel_subdataWithRange_, v5, v5);
  v9 = sub_1D2CAA96C();
  v10 = v29;

  v30 = SPAKE2CtxSize();
  if (v30 < 0)
  {
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  v31 = v30;
  v59 = v6;
  v60 = v9;
  if (v30)
  {
    v32 = sub_1D2CAAF30();
    *(_QWORD *)(v32 + 16) = v31;
    bzero((void *)(v32 + 32), v31);
  }
  else
  {
    v32 = MEMORY[0x1E0DEE9D8];
  }
  v5 = (uint64_t)&v15[OBJC_IVAR____TtC16CryptoKitPrivate18AlishaSPAKE2Prover_spakeCtxData];
  *(_QWORD *)&v15[OBJC_IVAR____TtC16CryptoKitPrivate18AlishaSPAKE2Prover_spakeCtxData] = v32;
  v34 = v64;
  v35 = sub_1D2CAA96C();
  v9 = v36;
  v58 = v34;

  sub_1D2C720B0(v35, v9);
  v64 = v37;
  sub_1D2C45258(v35, v9);
  swift_beginAccess();
  v6 = *(_QWORD **)v5;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v61 = (uint64_t *)v5;
  *(_QWORD *)v5 = v6;
  if ((isUniquelyReferenced_nonNull_native & 1) != 0)
  {
    v39 = ccspake_mac_hkdf_cmac_aes128_sha256();
    if (v39)
      goto LABEL_14;
LABEL_31:
    __break(1u);
    goto LABEL_32;
  }
LABEL_30:
  v6 = sub_1D2C535CC((uint64_t)v6);
  *v61 = (uint64_t)v6;
  v39 = ccspake_mac_hkdf_cmac_aes128_sha256();
  if (!v39)
    goto LABEL_31;
LABEL_14:
  v40 = (void *)v39;
  v67 = 0;
  result = ccrng();
  if (result)
  {
    if (!v67)
    {
      v55[0] = a4;
      v55[1] = v40;
      v56 = v6 + 4;
      v57 = v15;
      v55[3] = *((id *)v64 + 2);
      v42 = v10;
      v55[2] = (id)SPAKE2Alishaz0Size();
      sub_1D2C45028((uint64_t)a2, (unint64_t)v12);
      sub_1D2C720B0((uint64_t)a2, (uint64_t)v12);
      sub_1D2C45258((uint64_t)a2, (unint64_t)v12);
      v43 = v60;
      sub_1D2C45028(v60, v10);
      sub_1D2C720B0(v43, v10);
      sub_1D2C45258(v43, v10);
      v56 = (_QWORD *)v14;
      v44 = ccspake_prover_init();
      v9 = (uint64_t)v61;
      *v61 = (uint64_t)v6;
      swift_endAccess();
      swift_release();
      swift_release();
      if (v44)
      {

        sub_1D2C45258(v62, v63);
        v45 = v59;

        sub_1D2C45258((uint64_t)a2, (unint64_t)v12);
        sub_1D2C45258(v43, v42);
        swift_release();

        swift_bridgeObjectRelease();
        goto LABEL_25;
      }
      a4 = (uint64_t *)v42;
      v5 = (uint64_t)v12;
      v46 = ccspake_sizeof_point();
      v15 = v57;
      if ((v46 & 0x8000000000000000) == 0)
      {
        v47 = v46;
        v14 = (uint64_t)a2;
        if (v46)
        {
          v6 = (_QWORD *)sub_1D2CAAF30();
          v6[2] = v47;
          bzero(v6 + 4, v47);
        }
        else
        {
          v6 = (_QWORD *)MEMORY[0x1E0DEE9D8];
        }
        a2 = v61;
        swift_beginAccess();
        v9 = *a2;
        v48 = swift_isUniquelyReferenced_nonNull_native();
        *a2 = v9;
        if ((v48 & 1) != 0)
          goto LABEL_23;
        goto LABEL_34;
      }
LABEL_33:
      __break(1u);
LABEL_34:
      v9 = (uint64_t)sub_1D2C535CC(v9);
      *a2 = v9;
LABEL_23:
      ccspake_sizeof_point();
      v49 = ccspake_kex_generate();
      *a2 = v9;
      swift_endAccess();
      sub_1D2C45258(v62, v63);
      v50 = v59;

      *(_QWORD *)&v15[OBJC_IVAR____TtC16CryptoKitPrivate18AlishaSPAKE2Prover_X] = v6;
      v51 = (uint64_t *)&v15[OBJC_IVAR____TtC16CryptoKitPrivate18AlishaSPAKE2Prover_z0_self];
      *v51 = v14;
      v51[1] = v5;
      v52 = &v15[OBJC_IVAR____TtC16CryptoKitPrivate18AlishaSPAKE2Prover_z1_self];
      *(_QWORD *)v52 = v60;
      *((_QWORD *)v52 + 1) = a4;
      *(_QWORD *)&v15[OBJC_IVAR____TtC16CryptoKitPrivate18AlishaSPAKE2Prover_aad] = v64;
      if (!v49)
      {

        v54 = (objc_class *)type metadata accessor for AlishaSPAKE2Prover();
        v66.receiver = v15;
        v66.super_class = v54;
        v53 = objc_msgSendSuper2(&v66, sel_init);

        return (uint64_t)v53;
      }

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_1D2C45258(*(_QWORD *)&v15[OBJC_IVAR____TtC16CryptoKitPrivate18AlishaSPAKE2Prover_z0_self], *(_QWORD *)&v15[OBJC_IVAR____TtC16CryptoKitPrivate18AlishaSPAKE2Prover_z0_self + 8]);
      sub_1D2C45258(*(_QWORD *)&v15[OBJC_IVAR____TtC16CryptoKitPrivate18AlishaSPAKE2Prover_z1_self], *(_QWORD *)&v15[OBJC_IVAR____TtC16CryptoKitPrivate18AlishaSPAKE2Prover_z1_self + 8]);

LABEL_25:
      type metadata accessor for AlishaSPAKE2Prover();
      swift_deallocPartialClassInstance();
      return 0;
    }
LABEL_32:
    __break(1u);
    goto LABEL_33;
  }
  __break(1u);
  return result;
}

id sub_1D2C70DD4()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR____TtC16CryptoKitPrivate18AlishaSPAKE2Prover_X);
  return objc_msgSend(objc_allocWithZone(MEMORY[0x1E0C99D50]), sel_initWithBytes_length_, v1 + 32, *(_QWORD *)(v1 + 16));
}

uint64_t sub_1D2C70E68(void *a1, void *a2)
{
  uint64_t v2;
  id v5;
  uint64_t result;
  _QWORD *v7;
  _QWORD *v8;
  char **v9;
  char *v10;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  char v16;
  int v17;
  char *v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  int session_key;
  _QWORD *v24;
  id v25;
  id v26;
  id v27;

  v5 = objc_msgSend(a1, sel_length);
  result = ccspake_cp_256();
  if (result)
  {
    if (v5 != (id)ccspake_sizeof_point() || objc_msgSend(a2, sel_length) != (id)16)
      return 0;
    v7 = (_QWORD *)sub_1D2CAAF30();
    v7[2] = 16;
    v7[4] = 0;
    v7[5] = 0;
    v8 = (_QWORD *)sub_1D2CAAF30();
    v8[2] = 16;
    v8[4] = 0;
    v8[5] = 0;
    v9 = (char **)(v2 + OBJC_IVAR____TtC16CryptoKitPrivate18AlishaSPAKE2Prover_spakeCtxData);
    swift_beginAccess();
    v10 = *v9;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *v9 = v10;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      v10 = sub_1D2C535CC((uint64_t)v10);
      *v9 = v10;
    }
    objc_msgSend(a1, sel_length);
    v12 = sub_1D2CAA96C();
    v14 = v13;
    sub_1D2C720B0(v12, v13);
    sub_1D2C45258(v12, v14);
    LODWORD(v14) = ccspake_kex_process();
    *v9 = v10;
    swift_endAccess();
    swift_release();
    if ((_DWORD)v14)
      goto LABEL_13;
    swift_beginAccess();
    v15 = *v9;
    v16 = swift_isUniquelyReferenced_nonNull_native();
    *v9 = v15;
    if ((v16 & 1) == 0)
    {
      v15 = sub_1D2C535CC((uint64_t)v15);
      *v9 = v15;
    }
    v17 = ccspake_mac_compute();
    *v9 = v15;
    swift_endAccess();
    if (v17)
      goto LABEL_13;
    swift_beginAccess();
    v18 = *v9;
    v19 = swift_isUniquelyReferenced_nonNull_native();
    *v9 = v18;
    if ((v19 & 1) == 0)
    {
      v18 = sub_1D2C535CC((uint64_t)v18);
      *v9 = v18;
    }
    objc_msgSend(a2, sel_length);
    v20 = sub_1D2CAA96C();
    v22 = v21;
    sub_1D2C720B0(v20, v21);
    sub_1D2C45258(v20, v22);
    session_key = ccspake_mac_verify_and_get_session_key();
    *v9 = v18;
    swift_endAccess();
    swift_release();
    if (session_key)
    {
LABEL_13:
      v24 = 0;
    }
    else
    {
      v25 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0C99D50]), sel_initWithBytes_length_, v7 + 4, v7[2]);
      v26 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0C99D50]), sel_initWithBytes_length_, v8 + 4, v8[2]);
      v27 = objc_allocWithZone((Class)type metadata accessor for AlishaSPAKE2ProverConfirmed());
      v24 = sub_1D2C713D8(v25, v26);
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return (uint64_t)v24;
  }
  else
  {
    __break(1u);
  }
  return result;
}

id AlishaSPAKE2Prover.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

void AlishaSPAKE2Prover.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

id AlishaSPAKE2Prover.__deallocating_deinit()
{
  return sub_1D2C63D6C(type metadata accessor for AlishaSPAKE2Prover);
}

id AlishaSPAKE2ProverConfirmed.alishaKey.getter()
{
  uint64_t v0;

  return *(id *)(v0 + OBJC_IVAR____TtC16CryptoKitPrivate27AlishaSPAKE2ProverConfirmed_alishaKey);
}

id AlishaSPAKE2ProverConfirmed.KEnc.getter()
{
  uint64_t v0;

  return *(id *)(v0 + OBJC_IVAR____TtC16CryptoKitPrivate27AlishaSPAKE2ProverConfirmed_KEnc);
}

id AlishaSPAKE2ProverConfirmed.KMac.getter()
{
  uint64_t v0;

  return *(id *)(v0 + OBJC_IVAR____TtC16CryptoKitPrivate27AlishaSPAKE2ProverConfirmed_KMac);
}

id AlishaSPAKE2ProverConfirmed.KRMac.getter()
{
  uint64_t v0;

  return *(id *)(v0 + OBJC_IVAR____TtC16CryptoKitPrivate27AlishaSPAKE2ProverConfirmed_KRMac);
}

id AlishaSPAKE2ProverConfirmed.SymmetricLTS.getter()
{
  uint64_t v0;

  return *(id *)(v0 + OBJC_IVAR____TtC16CryptoKitPrivate27AlishaSPAKE2ProverConfirmed_SymmetricLTS);
}

id AlishaSPAKE2ProverConfirmed.Kble_intro.getter()
{
  uint64_t v0;

  return *(id *)(v0 + OBJC_IVAR____TtC16CryptoKitPrivate27AlishaSPAKE2ProverConfirmed_Kble_intro);
}

id AlishaSPAKE2ProverConfirmed.Kble_oob_master.getter()
{
  uint64_t v0;

  return *(id *)(v0 + OBJC_IVAR____TtC16CryptoKitPrivate27AlishaSPAKE2ProverConfirmed_Kble_oob_master);
}

id AlishaSPAKE2ProverConfirmed.M2.getter()
{
  uint64_t v0;

  return *(id *)(v0 + OBJC_IVAR____TtC16CryptoKitPrivate27AlishaSPAKE2ProverConfirmed_M2);
}

_QWORD *sub_1D2C713D8(void *a1, void *a2)
{
  char *v2;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  id v8;
  id v9;
  _QWORD *result;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  id v20;
  void *v21;
  objc_super v22;

  v5 = OBJC_IVAR____TtC16CryptoKitPrivate27AlishaSPAKE2ProverConfirmed_alishaKey;
  *(_QWORD *)&v2[OBJC_IVAR____TtC16CryptoKitPrivate27AlishaSPAKE2ProverConfirmed_alishaKey] = a1;
  v6 = OBJC_IVAR____TtC16CryptoKitPrivate27AlishaSPAKE2ProverConfirmed_M2;
  *(_QWORD *)&v2[OBJC_IVAR____TtC16CryptoKitPrivate27AlishaSPAKE2ProverConfirmed_M2] = a2;
  v7 = v2;
  v8 = a1;
  v9 = a2;
  result = (_QWORD *)sub_1D2C723C8(v8);
  if (!result)
  {

    v21 = *(void **)&v2[v6];
    type metadata accessor for AlishaSPAKE2ProverConfirmed();
    swift_deallocPartialClassInstance();
    return 0;
  }
  v11 = result;
  if (!result[2])
  {
    __break(1u);
    goto LABEL_12;
  }
  v12 = result[4];
  result = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0C99D50]), sel_initWithBytes_length_, v12 + 32, *(_QWORD *)(v12 + 16));
  *(_QWORD *)&v7[OBJC_IVAR____TtC16CryptoKitPrivate27AlishaSPAKE2ProverConfirmed_KEnc] = result;
  if (v11[2] < 2uLL)
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  v13 = v11[5];
  result = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0C99D50]), sel_initWithBytes_length_, v13 + 32, *(_QWORD *)(v13 + 16));
  *(_QWORD *)&v7[OBJC_IVAR____TtC16CryptoKitPrivate27AlishaSPAKE2ProverConfirmed_KMac] = result;
  if (v11[2] < 3uLL)
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  v14 = v11[6];
  result = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0C99D50]), sel_initWithBytes_length_, v14 + 32, *(_QWORD *)(v14 + 16));
  *(_QWORD *)&v7[OBJC_IVAR____TtC16CryptoKitPrivate27AlishaSPAKE2ProverConfirmed_KRMac] = result;
  if (v11[2] < 4uLL)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v15 = v11[7];
  result = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0C99D50]), sel_initWithBytes_length_, v15 + 32, *(_QWORD *)(v15 + 16));
  *(_QWORD *)&v7[OBJC_IVAR____TtC16CryptoKitPrivate27AlishaSPAKE2ProverConfirmed_SymmetricLTS] = result;
  if (v11[2] < 5uLL)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  v16 = v11[8];
  result = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0C99D50]), sel_initWithBytes_length_, v16 + 32, *(_QWORD *)(v16 + 16));
  *(_QWORD *)&v7[OBJC_IVAR____TtC16CryptoKitPrivate27AlishaSPAKE2ProverConfirmed_Kble_intro] = result;
  if (v11[2] >= 6uLL)
  {
    v17 = v11[9];
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRelease();
    v18 = *(_QWORD *)(v17 + 16);
    swift_bridgeObjectRelease();
    v19 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0C99D50]), sel_initWithBytes_length_, v17 + 32, v18);
    swift_bridgeObjectRelease();
    *(_QWORD *)&v7[OBJC_IVAR____TtC16CryptoKitPrivate27AlishaSPAKE2ProverConfirmed_Kble_oob_master] = v19;

    v22.receiver = v7;
    v22.super_class = (Class)type metadata accessor for AlishaSPAKE2ProverConfirmed();
    v20 = objc_msgSendSuper2(&v22, sel_init);

    return v20;
  }
LABEL_16:
  __break(1u);
  return result;
}

void AlishaSPAKE2ProverConfirmed.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

id AlishaSPAKE2ProverConfirmed.__deallocating_deinit()
{
  return sub_1D2C63D6C(type metadata accessor for AlishaSPAKE2ProverConfirmed);
}

char *sub_1D2C71768(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  int64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(qword_1ED985F40);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * v11 - 64;
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v12 = v10 + 32;
  v13 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[v8])
      memmove(v12, v13, v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v12, v13, v8);
  }
  swift_bridgeObjectRelease();
  return v10;
}

char *sub_1D2C71850(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EFC9FED0);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 17;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8])
      memmove(v13, v14, 16 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v10;
}

_QWORD *sub_1D2C71950(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EFC9FEC0);
    v10 = (_QWORD *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 17;
    v10[2] = v8;
    v10[3] = 2 * (v12 >> 4);
  }
  else
  {
    v10 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  }
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v10 + 4 >= &a4[2 * v8 + 4])
      memmove(v10 + 4, a4 + 4, 16 * v8);
    a4[2] = 0;
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EFC9FEC8);
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v10;
}

char *sub_1D2C71A70(char *a1, int64_t a2, char a3, char *a4)
{
  return sub_1D2C71A94(a1, a2, a3, a4, &qword_1EFC9F9F8);
}

char *sub_1D2C71A7C(char *a1, int64_t a2, char a3, char *a4)
{
  return sub_1D2C71A94(a1, a2, a3, a4, &qword_1EFC9FAC8);
}

char *sub_1D2C71A88(char *a1, int64_t a2, char a3, char *a4)
{
  return sub_1D2C71A94(a1, a2, a3, a4, &qword_1EFC9FA30);
}

char *sub_1D2C71A94(char *result, int64_t a2, char a3, char *a4, uint64_t *a5)
{
  char v6;
  unint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;

  v6 = (char)result;
  if ((a3 & 1) != 0)
  {
    v7 = *((_QWORD *)a4 + 3);
    v8 = v7 >> 1;
    if ((uint64_t)(v7 >> 1) < a2)
    {
      if (v8 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v7 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v8 = a2;
    }
  }
  else
  {
    v8 = a2;
  }
  v9 = *((_QWORD *)a4 + 2);
  if (v8 <= v9)
    v10 = *((_QWORD *)a4 + 2);
  else
    v10 = v8;
  if (v10)
  {
    __swift_instantiateConcreteTypeFromMangledName(a5);
    v11 = (char *)swift_allocObject();
    v12 = _swift_stdlib_malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 25;
    *((_QWORD *)v11 + 2) = v9;
    *((_QWORD *)v11 + 3) = 2 * (v13 >> 3);
  }
  else
  {
    v11 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v14 = v11 + 32;
  v15 = a4 + 32;
  if ((v6 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[8 * v9])
      memmove(v14, v15, 8 * v9);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v14, v15, 8 * v9);
  }
  swift_bridgeObjectRelease();
  return v11;
}

char *sub_1D2C71B88(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(qword_1EFC9F920);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 25;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 3);
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[8 * v8])
      memmove(v13, v14, 8 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v10;
}

char *sub_1D2C71C88(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EFC9FEB8);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 24);
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v12 = v10 + 32;
  v13 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[24 * v8])
      memmove(v12, v13, 24 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v10;
}

char *sub_1D2C71DA0(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EFC9F9D0);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 29;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 2);
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[4 * v8])
      memmove(v13, v14, 4 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v13, v14, 4 * v8);
  }
  swift_bridgeObjectRelease();
  return v10;
}

_QWORD *sub_1D2C71E98(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EFC9F9E0);
    v10 = (_QWORD *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 25;
    v10[2] = v8;
    v10[3] = 2 * (v12 >> 3);
  }
  else
  {
    v10 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  }
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v10 + 4 >= &a4[v8 + 4])
      memmove(v10 + 4, a4 + 4, 8 * v8);
    a4[2] = 0;
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EFC9F9E8);
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v10;
}

char *sub_1D2C71FB8(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EFC9F9C8);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 25;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 3);
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[8 * v8])
      memmove(v13, v14, 8 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v13, v14, 8 * v8);
  }
  swift_bridgeObjectRelease();
  return v10;
}

void sub_1D2C720B0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = sub_1D2CAA990();
  MEMORY[0x1E0C80A78](v3);
  __asm { BR              X10 }
}

_QWORD *sub_1D2C7212C()
{
  unint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  size_t v6;
  uint64_t v7;

  if (BYTE6(v0))
  {
    __swift_instantiateConcreteTypeFromMangledName(qword_1ED985F40);
    v4 = (_QWORD *)swift_allocObject();
    v6 = _swift_stdlib_malloc_size(v4);
    v4[2] = BYTE6(v0);
    v4[3] = 2 * v6 - 64;
    sub_1D2C45028(v2, v0);
    v7 = sub_1D2CAA900();
    sub_1D2C45258(v2, v0);
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v3, v1);
    if (v7 != BYTE6(v0))
    {
      __break(1u);
      JUMPOUT(0x1D2C72200);
    }
  }
  return v4;
}

uint64_t type metadata accessor for AlishaSPAKE2Prover()
{
  return objc_opt_self();
}

uint64_t type metadata accessor for AlishaSPAKE2ProverConfirmed()
{
  return objc_opt_self();
}

uint64_t sub_1D2C72258@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_1D2C70480(a1, &OBJC_IVAR____TtC16CryptoKitPrivate18AlishaSPAKE2Prover_z0_self, a2);
}

uint64_t sub_1D2C72274(uint64_t *a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  return sub_1D2C704D0(a1, a2, a3, a4, &OBJC_IVAR____TtC16CryptoKitPrivate18AlishaSPAKE2Prover_z0_self);
}

uint64_t sub_1D2C72290@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_1D2C70480(a1, &OBJC_IVAR____TtC16CryptoKitPrivate18AlishaSPAKE2Prover_z1_self, a2);
}

uint64_t sub_1D2C722AC(uint64_t *a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  return sub_1D2C704D0(a1, a2, a3, a4, &OBJC_IVAR____TtC16CryptoKitPrivate18AlishaSPAKE2Prover_z1_self);
}

uint64_t method lookup function for AlishaSPAKE2Prover()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of AlishaSPAKE2Prover.z0_self.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0xC0))();
}

uint64_t dispatch thunk of AlishaSPAKE2Prover.z0_self.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0xC8))();
}

uint64_t dispatch thunk of AlishaSPAKE2Prover.z0_self.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0xD0))();
}

uint64_t dispatch thunk of AlishaSPAKE2Prover.z1_self.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0xD8))();
}

uint64_t dispatch thunk of AlishaSPAKE2Prover.z1_self.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0xE0))();
}

uint64_t dispatch thunk of AlishaSPAKE2Prover.z1_self.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0xE8))();
}

uint64_t dispatch thunk of AlishaSPAKE2Prover.__allocating_init(password:salt:authenticatedData:keyDerivationCost:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 240))();
}

uint64_t dispatch thunk of AlishaSPAKE2Prover.getX()()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0xF8))();
}

uint64_t dispatch thunk of AlishaSPAKE2Prover.processResponse(Y:M1:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x100))();
}

uint64_t method lookup function for AlishaSPAKE2ProverConfirmed()
{
  return swift_lookUpClassMethod();
}

uint64_t sub_1D2C723C8(void *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t result;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  unint64_t v29;
  unint64_t v30;
  size_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v40;
  int64_t v41;
  uint64_t v42;
  _QWORD *v43;
  unint64_t v44;
  unint64_t v45;
  size_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;

  v2 = sub_1D2CAAE4C();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = (char *)&v47 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1D2CAAE34();
  v6 = sub_1D2CAAE1C();
  v8 = v7;
  result = (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  if (v8 >> 60 == 15)
    goto LABEL_84;
  sub_1D2C720B0(v6, v8);
  sub_1D2C6BAE4(v6, v8);
  v10 = sub_1D2CAAF30();
  *(_QWORD *)(v10 + 16) = 96;
  *(_OWORD *)(v10 + 32) = 0u;
  *(_OWORD *)(v10 + 48) = 0u;
  *(_OWORD *)(v10 + 64) = 0u;
  *(_OWORD *)(v10 + 80) = 0u;
  *(_OWORD *)(v10 + 96) = 0u;
  *(_OWORD *)(v10 + 112) = 0u;
  sub_1D2CAAF0C();
  ccsha256_di();
  objc_msgSend(a1, sel_length);
  objc_msgSend(objc_retainAutorelease(a1), sel_bytes);
  swift_bridgeObjectRelease();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v10 = (uint64_t)sub_1D2C71768(0, *(_QWORD *)(v10 + 16), 0, (char *)v10);
  v11 = cchkdf();
  result = swift_release();
  if (v11)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  v13 = *(_QWORD *)(v10 + 16);
  if (v13)
  {
    v14 = 0;
    v15 = 0;
    while (1)
    {
      v16 = v14 + 1;
      if (__OFADD__(v14, 1))
        break;
      v17 = __OFADD__(v15, 16);
      v15 += 16;
      if (v17)
        v15 = 0x7FFFFFFFFFFFFFFFLL;
      ++v14;
      if (v15 >= v13)
        goto LABEL_14;
    }
    __break(1u);
  }
  else
  {
    v16 = 0;
LABEL_14:
    v50 = MEMORY[0x1E0DEE9D8];
    result = (uint64_t)sub_1D2C4DAD4(0, v16 & ~(v16 >> 63), 0);
    if (v16 < 0)
      goto LABEL_83;
    v12 = v50;
    v48 = v13;
    if (!v16)
    {
      if (!v13)
      {
LABEL_72:
        swift_bridgeObjectRelease();
        return v12;
      }
      v18 = 0;
LABEL_45:
      v32 = v18 + 16;
      v33 = -(uint64_t)v18;
      v34 = v18;
      while (1)
      {
        v35 = v13 >= v32 ? v32 : v13;
        v36 = v34 + 16;
        if (__OFADD__(v34, 16))
          goto LABEL_79;
        if (v13 >= v36)
          v37 = v34 + 16;
        else
          v37 = v13;
        if (v37 < (uint64_t)v34)
          goto LABEL_80;
        if ((v18 & 0x8000000000000000) != 0)
          goto LABEL_81;
        v38 = *(_QWORD *)(v10 + 16);
        if (v38 < v34 || v38 < v37)
          goto LABEL_82;
        v49 = v12;
        sub_1D2CAB0C8();
        sub_1D2CAAF0C();
        swift_unknownObjectRetain_n();
        v40 = swift_dynamicCastClass();
        if (!v40)
        {
          swift_bridgeObjectRelease();
          v40 = MEMORY[0x1E0DEE9D8];
        }
        v41 = v35 + v33;
        v42 = *(_QWORD *)(v40 + 16);
        swift_release();
        if (v41 == v42)
        {
          v43 = (_QWORD *)swift_dynamicCastClass();
          v12 = v49;
          if (!v43)
          {
            swift_bridgeObjectRelease();
            v43 = (_QWORD *)MEMORY[0x1E0DEE9D8];
          }
        }
        else
        {
          swift_bridgeObjectRelease();
          v43 = (_QWORD *)MEMORY[0x1E0DEE9D8];
          v12 = v49;
          if (v34 != v37)
          {
            if (v41 >= 1)
            {
              __swift_instantiateConcreteTypeFromMangledName(qword_1ED985F40);
              v43 = (_QWORD *)swift_allocObject();
              v46 = _swift_stdlib_malloc_size(v43);
              v43[2] = v41;
              v43[3] = 2 * v46 - 64;
            }
            memcpy(v43 + 4, (const void *)(v10 + v34 + 32), v41);
          }
        }
        result = swift_bridgeObjectRelease();
        v50 = v12;
        v45 = *(_QWORD *)(v12 + 16);
        v44 = *(_QWORD *)(v12 + 24);
        if (v45 >= v44 >> 1)
        {
          result = (uint64_t)sub_1D2C4DAD4((_QWORD *)(v44 > 1), v45 + 1, 1);
          v12 = v50;
        }
        *(_QWORD *)(v12 + 16) = v45 + 1;
        *(_QWORD *)(v12 + 8 * v45 + 32) = v43;
        v34 += 16;
        v32 += 16;
        v33 -= 16;
        v13 = v48;
        if (v36 >= v48)
          goto LABEL_72;
      }
    }
    v18 = 0;
    v19 = 16;
    v20 = 32;
    while (1)
    {
      v21 = v13 >= v19 ? v19 : v13;
      if (v18 >= v13)
        break;
      if (v18 == 0x7FFFFFFFFFFFFFF0)
        goto LABEL_76;
      if (v13 >= (uint64_t)(v18 + 16))
        v22 = v18 + 16;
      else
        v22 = v13;
      if (v22 < (uint64_t)v18)
        goto LABEL_77;
      v23 = *(_QWORD *)(v10 + 16);
      if (v23 < v18 || (uint64_t)v23 < v22)
        goto LABEL_78;
      v49 = v12;
      sub_1D2CAB0C8();
      sub_1D2CAAF0C();
      swift_unknownObjectRetain_n();
      v24 = swift_dynamicCastClass();
      if (!v24)
      {
        swift_bridgeObjectRelease();
        v24 = MEMORY[0x1E0DEE9D8];
      }
      v25 = v21 + v20;
      v26 = *(_QWORD *)(v24 + 16);
      swift_release();
      v27 = v25 - 32;
      if (v25 - 32 == v26)
      {
        v28 = (_QWORD *)swift_dynamicCastClass();
        v12 = v49;
        if (!v28)
        {
          swift_bridgeObjectRelease();
          v28 = (_QWORD *)MEMORY[0x1E0DEE9D8];
        }
      }
      else
      {
        swift_bridgeObjectRelease();
        v28 = (_QWORD *)MEMORY[0x1E0DEE9D8];
        v12 = v49;
        if (v18 != v22)
        {
          if (v27 >= 1)
          {
            __swift_instantiateConcreteTypeFromMangledName(qword_1ED985F40);
            v28 = (_QWORD *)swift_allocObject();
            v31 = _swift_stdlib_malloc_size(v28);
            v28[2] = v27;
            v28[3] = 2 * v31 - 64;
          }
          memcpy(v28 + 4, (const void *)(v10 + v18 + 32), v25 - 32);
        }
      }
      result = swift_bridgeObjectRelease();
      v50 = v12;
      v30 = *(_QWORD *)(v12 + 16);
      v29 = *(_QWORD *)(v12 + 24);
      if (v30 >= v29 >> 1)
      {
        result = (uint64_t)sub_1D2C4DAD4((_QWORD *)(v29 > 1), v30 + 1, 1);
        v12 = v50;
      }
      *(_QWORD *)(v12 + 16) = v30 + 1;
      *(_QWORD *)(v12 + 8 * v30 + 32) = v28;
      v19 += 16;
      v20 -= 16;
      v18 += 16;
      --v16;
      v13 = v48;
      if (!v16)
      {
        if ((uint64_t)v18 < v48)
          goto LABEL_45;
        goto LABEL_72;
      }
    }
  }
  __break(1u);
LABEL_76:
  __break(1u);
LABEL_77:
  __break(1u);
LABEL_78:
  __break(1u);
LABEL_79:
  __break(1u);
LABEL_80:
  __break(1u);
LABEL_81:
  __break(1u);
LABEL_82:
  __break(1u);
LABEL_83:
  __break(1u);
LABEL_84:
  __break(1u);
  return result;
}

uint64_t sub_1D2C7296C(uint64_t result, uint64_t a2)
{
  BOOL v2;
  uint64_t v3;

  if (!result)
  {
    __break(1u);
    goto LABEL_12;
  }
  v2 = __OFSUB__(result, 1);
  if (result >= 1)
  {
    v2 = __OFSUB__(a2, 1);
    if (a2 >= 1)
      return (a2 - 1) / (unint64_t)result + 1;
  }
  if ((a2 & result) < 0 == v2)
  {
    if (result != -1 || a2 != 0x8000000000000000)
      return a2 / result;
    goto LABEL_13;
  }
  v3 = (a2 + 1) / result;
  result = v3 + 1;
  if (__OFADD__(v3, 1))
  {
LABEL_12:
    __break(1u);
LABEL_13:
    __break(1u);
  }
  return result;
}

BOOL static PIR.PirAlgorithm.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t PIR.PirAlgorithm.hash(into:)()
{
  return sub_1D2CAB140();
}

uint64_t PIR.PirAlgorithm.hashValue.getter()
{
  sub_1D2CAB134();
  sub_1D2CAB140();
  return sub_1D2CAB158();
}

void PIR.PirParams.encryptionParams.getter(_BYTE *a1@<X8>)
{
  _BYTE *v1;
  char v2;

  v2 = v1[1];
  *a1 = *v1;
  a1[1] = v2;
}

void PIR.PirParams.algorithm.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 2);
}

uint64_t PIR.PirParams.entriesCount.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 8);
}

uint64_t PIR.PirParams.entrySize.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 16);
}

uint64_t PIR.PirParams.dimensions.getter()
{
  return sub_1D2CAAF0C();
}

uint64_t PIR.PirParams.init(encryptionParams:algorithm:entriesCount:entrySize:dimensions:batchSize:internalBatchSize:compressResponse:)@<X0>(char *a1@<X0>, char *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, char a10)
{
  char v15;
  uint64_t result;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  char v30;

  v15 = *a1;
  v30 = a1[1];
  v28 = *a2;
  result = cche_encryption_params_plaintext_modulus();
  if (!result)
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  v17 = result;
  result = cche_encryption_params_polynomial_degree();
  if ((unint64_t)(a4 - 0x1000000000000000) >> 61 != 7)
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  v18 = (__clz(v17) ^ 0x3F) * (unint64_t)result;
  v19 = 8 * a4;
  if (v18 < 8 * a4)
  {
    v20 = 1;
    goto LABEL_7;
  }
  if (!v19)
  {
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
    return result;
  }
  v20 = v18 / v19;
LABEL_7:
  result = sub_1D2C7296C(v20, a3);
  v21 = *(_QWORD *)(a5 + 16);
  if (v21)
  {
    v22 = (uint64_t *)(a5 + 32);
    v23 = 1;
    do
    {
      v24 = *v22++;
      v25 = v23 * v24;
      if ((unsigned __int128)(v23 * (__int128)v24) >> 64 != (v23 * v24) >> 63)
      {
        __break(1u);
        goto LABEL_23;
      }
      v23 = v25;
      --v21;
    }
    while (v21);
    if (v25 >= result)
      goto LABEL_14;
    goto LABEL_20;
  }
  if (result > 1)
  {
LABEL_20:
    swift_bridgeObjectRelease();
    sub_1D2C4E7DC();
    swift_allocError();
    *(_DWORD *)v27 = 5;
    *(_BYTE *)(v27 + 4) = 1;
    return swift_willThrow();
  }
LABEL_14:
  v26 = a7;
  if ((a8 & 1) != 0)
    v26 = 1;
  if (!v26)
    goto LABEL_26;
  if (a6 == 0x8000000000000000 && v26 == -1)
    goto LABEL_27;
  if (a6 % v26)
    goto LABEL_20;
  *(_BYTE *)a9 = v15;
  *(_BYTE *)(a9 + 1) = v30;
  *(_BYTE *)(a9 + 2) = v28;
  *(_QWORD *)(a9 + 8) = a3;
  *(_QWORD *)(a9 + 16) = a4;
  *(_QWORD *)(a9 + 24) = a5;
  *(_QWORD *)(a9 + 32) = v20;
  *(_QWORD *)(a9 + 40) = a6;
  *(_QWORD *)(a9 + 48) = a7;
  *(_BYTE *)(a9 + 56) = a8 & 1;
  *(_BYTE *)(a9 + 57) = a10;
  return result;
}

unint64_t sub_1D2C72C74()
{
  unint64_t result;

  result = qword_1EFC9FED8[0];
  if (!qword_1EFC9FED8[0])
  {
    result = MEMORY[0x1D8245F38](&protocol conformance descriptor for PIR.PirAlgorithm, &type metadata for PIR.PirAlgorithm);
    atomic_store(result, qword_1EFC9FED8);
  }
  return result;
}

uint64_t _s12PirAlgorithmOwst(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1D2C72D04 + 4 * byte_1D2CADC95[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1D2C72D38 + 4 * byte_1D2CADC90[v4]))();
}

uint64_t sub_1D2C72D38(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1D2C72D40(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1D2C72D48);
  return result;
}

uint64_t sub_1D2C72D54(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1D2C72D5CLL);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1D2C72D60(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1D2C72D68(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for PIR.PirAlgorithm()
{
  return &type metadata for PIR.PirAlgorithm;
}

uint64_t _s9PirParamsVwxx()
{
  return swift_bridgeObjectRelease();
}

uint64_t _s9PirParamsVwcp(uint64_t a1, uint64_t a2)
{
  *(_WORD *)a1 = *(_WORD *)a2;
  *(_BYTE *)(a1 + 2) = *(_BYTE *)(a2 + 2);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_WORD *)(a1 + 56) = *(_WORD *)(a2 + 56);
  sub_1D2CAAF0C();
  return a1;
}

uint64_t _s9PirParamsVwca(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_BYTE *)(a1 + 1) = *(_BYTE *)(a2 + 1);
  *(_BYTE *)(a1 + 2) = *(_BYTE *)(a2 + 2);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  sub_1D2CAAF0C();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  v4 = *(_QWORD *)(a2 + 48);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = v4;
  *(_BYTE *)(a1 + 57) = *(_BYTE *)(a2 + 57);
  return a1;
}

__n128 __swift_memcpy58_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  v4 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 42) = *(_OWORD *)(a2 + 42);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t _s9PirParamsVwta(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_BYTE *)(a1 + 1) = *(_BYTE *)(a2 + 1);
  *(_BYTE *)(a1 + 2) = *(_BYTE *)(a2 + 2);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_WORD *)(a1 + 56) = *(_WORD *)(a2 + 56);
  return a1;
}

uint64_t _s9PirParamsVwet(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 58))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t _s9PirParamsVwst(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_WORD *)(result + 56) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 58) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 24) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 58) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for PIR.PirParams()
{
  return &type metadata for PIR.PirParams;
}

char *sub_1D2C72FAC(char *result)
{
  uint64_t v1;
  uint64_t v2;
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;

  v2 = *(_QWORD *)(v1 + 24);
  v3 = *(_QWORD *)(v2 + 16);
  v4 = MEMORY[0x1E0DEE9D8];
  if (!v3)
    return (char *)v4;
  v5 = (uint64_t)result;
  v6 = 0;
  v7 = 1;
  do
  {
    v8 = *(_QWORD *)(v2 + 8 * v6 + 32);
    if ((unsigned __int128)(v7 * (__int128)v8) >> 64 != (v7 * v8) >> 63)
    {
      __break(1u);
      goto LABEL_20;
    }
    v7 *= v8;
    ++v6;
  }
  while (v3 != v6);
  v16 = MEMORY[0x1E0DEE9D8];
  sub_1D2CAAF0C();
  result = sub_1D2C4DB00(0, v3, 0);
  v9 = 0;
  v4 = v16;
  while (1)
  {
    v10 = *(_QWORD *)(v2 + 8 * v9 + 32);
    if (!v10)
      break;
    if (v7 == 0x8000000000000000 && v10 == -1)
      goto LABEL_24;
    v7 /= v10;
    if (!v7)
      goto LABEL_21;
    if (v5 == 0x8000000000000000 && v7 == -1)
      goto LABEL_25;
    v11 = v5 / v7;
    v12 = v5 / v7 * v7;
    if ((unsigned __int128)(v5 / v7 * (__int128)v7) >> 64 != v12 >> 63)
      goto LABEL_22;
    v13 = __OFSUB__(v5, v12);
    v5 %= v7;
    if (v13)
      goto LABEL_23;
    v15 = *(_QWORD *)(v16 + 16);
    v14 = *(_QWORD *)(v16 + 24);
    if (v15 >= v14 >> 1)
      result = sub_1D2C4DB00((char *)(v14 > 1), v15 + 1, 1);
    ++v9;
    *(_QWORD *)(v16 + 16) = v15 + 1;
    *(_QWORD *)(v16 + 8 * v15 + 32) = v11;
    if (v3 == v9)
    {
      swift_bridgeObjectRelease();
      return (char *)v4;
    }
  }
LABEL_20:
  __break(1u);
LABEL_21:
  __break(1u);
LABEL_22:
  __break(1u);
LABEL_23:
  __break(1u);
LABEL_24:
  __break(1u);
LABEL_25:
  __break(1u);
  return result;
}

uint64_t sub_1D2C73128()
{
  return swift_allocateGenericValueMetadata();
}

uint64_t sub_1D2C73130()
{
  uint64_t AssociatedTypeWitness;
  unint64_t v1;
  unint64_t v2;
  uint64_t result;
  unint64_t v4;

  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v2 = v1;
  swift_getAssociatedConformanceWitness();
  result = swift_getAssociatedTypeWitness();
  if (v4 <= 0x3F)
  {
    if (v2 > 0x3F)
    {
      return AssociatedTypeWitness;
    }
    else
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t *sub_1D2C73288(uint64_t *a1, uint64_t *a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  void (*v24)(uint64_t, uint64_t, uint64_t);
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  void (*v32)(unint64_t, unint64_t, uint64_t);
  uint64_t v33;
  uint64_t v36;

  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v3 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v4 = *(_DWORD *)(v3 + 80);
  v5 = v4;
  v6 = *(_QWORD *)(v3 + 64);
  v7 = v6 + v4;
  v8 = swift_checkMetadataState();
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(_DWORD *)(v9 + 80);
  v11 = v6 + v10;
  v12 = (v6 + v10 + ((v6 + v5 + ((v6 + v5 + ((v6 + v5 + ((v5 + 8) & ~v5)) & ~v5)) & ~v5)) & ~v5)) & ~v10;
  v13 = *(_QWORD *)(v9 + 64);
  v14 = v13 + v10;
  v15 = ((v13 + v10 + v12) & ~v10) + v13;
  if ((v10 | (unint64_t)v4) > 7 || ((*(_DWORD *)(v9 + 80) | v4) & 0x100000) != 0 || v15 > 0x18)
  {
    v18 = *a2;
    *a1 = *a2;
    v33 = v18 + (((v10 | v4) & 0xF8 ^ 0x1F8) & ((v10 | v4) + 16));
    swift_retain();
  }
  else
  {
    v19 = ~(unint64_t)v4;
    v20 = ~v10;
    *a1 = *a2;
    v21 = (char *)a2 + v5;
    v22 = ((unint64_t)a1 + v5 + 8) & ~v5;
    v23 = (unint64_t)(v21 + 8) & v19;
    v24 = *(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16);
    v36 = v8;
    v24(v22, v23, AssociatedTypeWitness);
    v25 = (v7 + v22) & v19;
    v26 = (v7 + v23) & v19;
    v24(v25, v26, AssociatedTypeWitness);
    v27 = (v7 + v25) & v19;
    v28 = (v7 + v26) & v19;
    v24(v27, v28, AssociatedTypeWitness);
    v29 = (v7 + v27) & v19;
    v30 = (v7 + v28) & v19;
    v24(v29, v30, AssociatedTypeWitness);
    v31 = (v11 + v29) & v20;
    v32 = *(void (**)(unint64_t, unint64_t, uint64_t))(v9 + 16);
    v32(v31, (v11 + v30) & v20, v36);
    v32((v14 + v31) & v20, (v14 + ((v11 + v30) & v20)) & v20, v36);
    return a1;
  }
  return (uint64_t *)v33;
}

uint64_t sub_1D2C73520(uint64_t a1)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v16)(uint64_t, uint64_t);

  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v3 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v4 = *(unsigned __int8 *)(v3 + 80);
  v5 = (a1 + v4 + 8) & ~v4;
  v6 = *(void (**)(uint64_t, uint64_t))(v3 + 8);
  v6(v5, AssociatedTypeWitness);
  v7 = *(_QWORD *)(v3 + 64);
  v8 = (v7 + v4 + v5) & ~v4;
  v6(v8, AssociatedTypeWitness);
  v9 = (v7 + v4 + v8) & ~v4;
  v6(v9, AssociatedTypeWitness);
  v10 = (v7 + v4 + v9) & ~v4;
  v6(v10, AssociatedTypeWitness);
  v11 = swift_checkMetadataState();
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(unsigned __int8 *)(v12 + 80);
  v14 = (v7 + v13 + v10) & ~v13;
  v16 = *(void (**)(uint64_t, uint64_t))(v12 + 8);
  v16(v14, v11);
  return ((uint64_t (*)(uint64_t, uint64_t))v16)((*(_QWORD *)(v12 + 64) + v13 + v14) & ~v13, v11);
}

_QWORD *sub_1D2C736CC(_QWORD *a1, _QWORD *a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(unint64_t, uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(uint64_t, uint64_t, uint64_t);

  *a1 = *a2;
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v6 = *(unsigned __int8 *)(v5 + 80);
  v7 = ((unint64_t)a2 + v6 + 8) & ~v6;
  v8 = *(void (**)(unint64_t, uint64_t, uint64_t))(v5 + 16);
  v8(((unint64_t)a1 + v6 + 8) & ~v6, v7, AssociatedTypeWitness);
  v9 = *(_QWORD *)(v5 + 64);
  v10 = (v9 + v6 + (((unint64_t)a1 + v6 + 8) & ~v6)) & ~v6;
  v11 = (v9 + v6 + v7) & ~v6;
  v8(v10, v11, AssociatedTypeWitness);
  v12 = (v9 + v6 + v10) & ~v6;
  v13 = (v9 + v6 + v11) & ~v6;
  v8(v12, v13, AssociatedTypeWitness);
  v14 = (v9 + v6 + v12) & ~v6;
  v15 = (v9 + v6 + v13) & ~v6;
  v8(v14, v15, AssociatedTypeWitness);
  v16 = swift_checkMetadataState();
  v17 = *(_QWORD *)(v16 - 8);
  v18 = *(unsigned __int8 *)(v17 + 80);
  v19 = (v9 + v18 + v14) & ~v18;
  v20 = (v9 + v18 + v15) & ~v18;
  v21 = *(void (**)(uint64_t, uint64_t, uint64_t))(v17 + 16);
  v21(v19, v20, v16);
  v21((*(_QWORD *)(v17 + 64) + v18 + v19) & ~v18, (*(_QWORD *)(v17 + 64) + v18 + v20) & ~v18, v16);
  return a1;
}

_QWORD *sub_1D2C738C4(_QWORD *a1, _QWORD *a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(unint64_t, uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(uint64_t, uint64_t, uint64_t);

  *a1 = *a2;
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v6 = *(unsigned __int8 *)(v5 + 80);
  v7 = ((unint64_t)a2 + v6 + 8) & ~v6;
  v8 = *(void (**)(unint64_t, uint64_t, uint64_t))(v5 + 24);
  v8(((unint64_t)a1 + v6 + 8) & ~v6, v7, AssociatedTypeWitness);
  v9 = *(_QWORD *)(v5 + 64);
  v10 = (v9 + v6 + (((unint64_t)a1 + v6 + 8) & ~v6)) & ~v6;
  v11 = (v9 + v6 + v7) & ~v6;
  v8(v10, v11, AssociatedTypeWitness);
  v12 = (v9 + v6 + v10) & ~v6;
  v13 = (v9 + v6 + v11) & ~v6;
  v8(v12, v13, AssociatedTypeWitness);
  v14 = (v9 + v6 + v12) & ~v6;
  v15 = (v9 + v6 + v13) & ~v6;
  v8(v14, v15, AssociatedTypeWitness);
  v16 = swift_checkMetadataState();
  v17 = *(_QWORD *)(v16 - 8);
  v18 = *(unsigned __int8 *)(v17 + 80);
  v19 = (v9 + v18 + v14) & ~v18;
  v20 = (v9 + v18 + v15) & ~v18;
  v21 = *(void (**)(uint64_t, uint64_t, uint64_t))(v17 + 24);
  v21(v19, v20, v16);
  v21((*(_QWORD *)(v17 + 64) + v18 + v19) & ~v18, (*(_QWORD *)(v17 + 64) + v18 + v20) & ~v18, v16);
  return a1;
}

_QWORD *sub_1D2C73ABC(_QWORD *a1, _QWORD *a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(unint64_t, uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(uint64_t, uint64_t, uint64_t);

  *a1 = *a2;
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v6 = *(unsigned __int8 *)(v5 + 80);
  v7 = ((unint64_t)a2 + v6 + 8) & ~v6;
  v8 = *(void (**)(unint64_t, uint64_t, uint64_t))(v5 + 32);
  v8(((unint64_t)a1 + v6 + 8) & ~v6, v7, AssociatedTypeWitness);
  v9 = *(_QWORD *)(v5 + 64);
  v10 = (v9 + v6 + (((unint64_t)a1 + v6 + 8) & ~v6)) & ~v6;
  v11 = (v9 + v6 + v7) & ~v6;
  v8(v10, v11, AssociatedTypeWitness);
  v12 = (v9 + v6 + v10) & ~v6;
  v13 = (v9 + v6 + v11) & ~v6;
  v8(v12, v13, AssociatedTypeWitness);
  v14 = (v9 + v6 + v12) & ~v6;
  v15 = (v9 + v6 + v13) & ~v6;
  v8(v14, v15, AssociatedTypeWitness);
  v16 = swift_checkMetadataState();
  v17 = *(_QWORD *)(v16 - 8);
  v18 = *(unsigned __int8 *)(v17 + 80);
  v19 = (v9 + v18 + v14) & ~v18;
  v20 = (v9 + v18 + v15) & ~v18;
  v21 = *(void (**)(uint64_t, uint64_t, uint64_t))(v17 + 32);
  v21(v19, v20, v16);
  v21((*(_QWORD *)(v17 + 64) + v18 + v19) & ~v18, (*(_QWORD *)(v17 + 64) + v18 + v20) & ~v18, v16);
  return a1;
}

_QWORD *sub_1D2C73CB4(_QWORD *a1, _QWORD *a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(unint64_t, uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(uint64_t, uint64_t, uint64_t);

  *a1 = *a2;
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v6 = *(unsigned __int8 *)(v5 + 80);
  v7 = ((unint64_t)a2 + v6 + 8) & ~v6;
  v8 = *(void (**)(unint64_t, uint64_t, uint64_t))(v5 + 40);
  v8(((unint64_t)a1 + v6 + 8) & ~v6, v7, AssociatedTypeWitness);
  v9 = *(_QWORD *)(v5 + 64);
  v10 = (v9 + v6 + (((unint64_t)a1 + v6 + 8) & ~v6)) & ~v6;
  v11 = (v9 + v6 + v7) & ~v6;
  v8(v10, v11, AssociatedTypeWitness);
  v12 = (v9 + v6 + v10) & ~v6;
  v13 = (v9 + v6 + v11) & ~v6;
  v8(v12, v13, AssociatedTypeWitness);
  v14 = (v9 + v6 + v12) & ~v6;
  v15 = (v9 + v6 + v13) & ~v6;
  v8(v14, v15, AssociatedTypeWitness);
  v16 = swift_checkMetadataState();
  v17 = *(_QWORD *)(v16 - 8);
  v18 = *(unsigned __int8 *)(v17 + 80);
  v19 = (v9 + v18 + v14) & ~v18;
  v20 = (v9 + v18 + v15) & ~v18;
  v21 = *(void (**)(uint64_t, uint64_t, uint64_t))(v17 + 40);
  v21(v19, v20, v16);
  v21((*(_QWORD *)(v17 + 64) + v18 + v19) & ~v18, (*(_QWORD *)(v17 + 64) + v18 + v20) & ~v18, v16);
  return a1;
}

uint64_t sub_1D2C73EAC(uint64_t a1, unsigned int a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  int v19;
  unsigned int v20;
  int v21;
  int v22;
  uint64_t v23;

  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v6 = *(unsigned int *)(v5 + 84);
  v7 = swift_checkMetadataState();
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(unsigned int *)(v8 + 84);
  if (v9 <= v6)
    v10 = v6;
  else
    v10 = *(_DWORD *)(v8 + 84);
  if (!a2)
    return 0;
  v11 = v7;
  v12 = *(unsigned __int8 *)(v5 + 80);
  v13 = *(_QWORD *)(v5 + 64);
  v14 = v13 + v12;
  v15 = *(unsigned __int8 *)(v8 + 80);
  v16 = v13 + v15;
  if (a2 <= v10)
    goto LABEL_23;
  v17 = ((*(_QWORD *)(v8 + 64)
        + v15
        + ((v16 + ((v14 + ((v14 + ((v14 + ((v12 + 8) & ~v12)) & ~v12)) & ~v12)) & ~v12)) & ~v15)) & ~v15)
      + *(_QWORD *)(v8 + 64);
  v18 = 8 * v17;
  if (v17 <= 3)
  {
    v20 = ((a2 - v10 + ~(-1 << v18)) >> v18) + 1;
    if (HIWORD(v20))
    {
      v19 = *(_DWORD *)(a1 + v17);
      if (!v19)
        goto LABEL_23;
      goto LABEL_14;
    }
    if (v20 > 0xFF)
    {
      v19 = *(unsigned __int16 *)(a1 + v17);
      if (!*(_WORD *)(a1 + v17))
        goto LABEL_23;
      goto LABEL_14;
    }
    if (v20 < 2)
    {
LABEL_23:
      if (v10)
      {
        v23 = (a1 + v12 + 8) & ~v12;
        if (v6 >= v9)
          return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(v23, v6, AssociatedTypeWitness);
        else
          return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))((v16 + ((v14 + ((v14 + ((v14 + v23) & ~v12)) & ~v12)) & ~v12)) & ~v15, v9, v11);
      }
      return 0;
    }
  }
  v19 = *(unsigned __int8 *)(a1 + v17);
  if (!*(_BYTE *)(a1 + v17))
    goto LABEL_23;
LABEL_14:
  v21 = (v19 - 1) << v18;
  if (v17 > 3)
    v21 = 0;
  if ((_DWORD)v17)
  {
    if (v17 <= 3)
      v22 = v17;
    else
      v22 = 4;
    __asm { BR              X12 }
  }
  return v10 + v21 + 1;
}

void sub_1D2C74154(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  size_t v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  int v17;

  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  v6 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v7 = *(_DWORD *)(v6 + 84);
  v8 = *(_QWORD *)(swift_checkMetadataState() - 8);
  if (*(_DWORD *)(v8 + 84) <= v7)
    v9 = v7;
  else
    v9 = *(_DWORD *)(v8 + 84);
  v10 = *(unsigned __int8 *)(v6 + 80);
  v11 = *(_QWORD *)(v6 + 64);
  v12 = *(unsigned __int8 *)(v8 + 80);
  v13 = ((*(_QWORD *)(v8 + 64)
        + v12
        + ((v11 + v12 + ((v11 + v10 + ((v11 + v10 + ((v11 + v10 + ((v10 + 8) & ~v10)) & ~v10)) & ~v10)) & ~v10)) & ~v12)) & ~v12)
      + *(_QWORD *)(v8 + 64);
  if (a3 <= v9)
  {
    v14 = 0u;
  }
  else if (v13 <= 3)
  {
    v16 = ((a3 - v9 + ~(-1 << (8 * v13))) >> (8 * v13)) + 1;
    if (HIWORD(v16))
    {
      v14 = 4u;
    }
    else if (v16 >= 0x100)
    {
      v14 = 2;
    }
    else
    {
      v14 = v16 > 1;
    }
  }
  else
  {
    v14 = 1u;
  }
  if (v9 < a2)
  {
    v15 = ~v9 + a2;
    if (v13 < 4)
    {
      if ((_DWORD)v13)
      {
        v17 = v15 & ~(-1 << (8 * v13));
        bzero(a1, v13);
        if ((_DWORD)v13 == 3)
        {
          *(_WORD *)a1 = v17;
          a1[2] = BYTE2(v17);
        }
        else if ((_DWORD)v13 == 2)
        {
          *(_WORD *)a1 = v17;
        }
        else
        {
          *a1 = v17;
        }
      }
    }
    else
    {
      bzero(a1, v13);
      *(_DWORD *)a1 = v15;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X16 }
}

uint64_t _s6ClientVMa_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&_s6ClientVMn_0);
}

uint64_t *sub_1D2C7448C(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t *v4;
  int v5;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  void (*v13)(char *, char *, uint64_t);
  uint64_t v14;
  _DWORD *v15;
  _DWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  void (*v38)(char *, char *, uint64_t);

  v4 = a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v20 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v20 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *(_DWORD *)a1 = *(_DWORD *)a2;
    v7 = a2[1];
    v8 = a2[2];
    sub_1D2C45028(v7, v8);
    v4[1] = v7;
    v4[2] = v8;
    v9 = a3[6];
    v10 = (char *)v4 + v9;
    v11 = (char *)a2 + v9;
    v12 = sub_1D2CAA9F0();
    v13 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 16);
    v13(v10, v11, v12);
    v14 = a3[7];
    v15 = (_DWORD *)((char *)v4 + v14);
    v16 = (_DWORD *)((char *)a2 + v14);
    v17 = type metadata accessor for CryptoKitSecretSharing_HybridSecretSharingSharedState(0);
    v18 = *(_QWORD *)(v17 - 8);
    if ((*(unsigned int (**)(_DWORD *, uint64_t, uint64_t))(v18 + 48))(v16, 1, v17))
    {
      v19 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFC9FF60);
      memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
    }
    else
    {
      *v15 = *v16;
      *((_QWORD *)v15 + 1) = *((_QWORD *)v16 + 1);
      *((_WORD *)v15 + 8) = *((_WORD *)v16 + 8);
      v15[5] = v16[5];
      *((_BYTE *)v15 + 24) = *((_BYTE *)v16 + 24);
      v38 = v13;
      v21 = *((_QWORD *)v16 + 4);
      v22 = *((_QWORD *)v16 + 5);
      sub_1D2C45028(v21, v22);
      *((_QWORD *)v15 + 4) = v21;
      *((_QWORD *)v15 + 5) = v22;
      *((_BYTE *)v15 + 48) = *((_BYTE *)v16 + 48);
      v23 = *((_QWORD *)v16 + 7);
      v24 = *((_QWORD *)v16 + 8);
      sub_1D2C45028(v23, v24);
      *((_QWORD *)v15 + 7) = v23;
      *((_QWORD *)v15 + 8) = v24;
      v13 = v38;
      v38((char *)v15 + *(int *)(v17 + 48), (char *)v16 + *(int *)(v17 + 48), v12);
      (*(void (**)(_DWORD *, _QWORD, uint64_t, uint64_t))(v18 + 56))(v15, 0, 1, v17);
    }
    v25 = a3[8];
    v26 = (uint64_t *)((char *)v4 + v25);
    v27 = (uint64_t *)((char *)a2 + v25);
    v28 = type metadata accessor for CryptoKitSecretSharing_HybridSecretSharingGeneratorSerialization.SealedBox(0);
    v29 = *(_QWORD *)(v28 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v29 + 48))(v27, 1, v28))
    {
      v30 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFC9FF68);
      memcpy(v26, v27, *(_QWORD *)(*(_QWORD *)(v30 - 8) + 64));
    }
    else
    {
      v31 = *v27;
      v32 = v27[1];
      sub_1D2C45028(*v27, v32);
      *v26 = v31;
      v26[1] = v32;
      v33 = v27[2];
      v34 = v27[3];
      sub_1D2C45028(v33, v34);
      v26[2] = v33;
      v26[3] = v34;
      v35 = v27[4];
      v36 = v27[5];
      sub_1D2C45028(v35, v36);
      v26[4] = v35;
      v26[5] = v36;
      v13((char *)v26 + *(int *)(v28 + 28), (char *)v27 + *(int *)(v28 + 28), v12);
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v29 + 56))(v26, 0, 1, v28);
    }
  }
  return v4;
}

uint64_t type metadata accessor for CryptoKitSecretSharing_HybridSecretSharingSharedState(uint64_t a1)
{
  return sub_1D2C7657C(a1, (uint64_t *)&unk_1EFC9FF90);
}

uint64_t type metadata accessor for CryptoKitSecretSharing_HybridSecretSharingGeneratorSerialization.SealedBox(uint64_t a1)
{
  return sub_1D2C7657C(a1, (uint64_t *)&unk_1EFC9FFA0);
}

uint64_t sub_1D2C74720(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  void (*v11)(uint64_t, uint64_t);

  sub_1D2C45258(*(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16));
  v4 = a1 + a2[6];
  v5 = sub_1D2CAA9F0();
  v11 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8);
  v11(v4, v5);
  v6 = a1 + a2[7];
  v7 = type metadata accessor for CryptoKitSecretSharing_HybridSecretSharingSharedState(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v6, 1, v7))
  {
    sub_1D2C45258(*(_QWORD *)(v6 + 32), *(_QWORD *)(v6 + 40));
    sub_1D2C45258(*(_QWORD *)(v6 + 56), *(_QWORD *)(v6 + 64));
    v11(v6 + *(int *)(v7 + 48), v5);
  }
  v8 = a1 + a2[8];
  v9 = type metadata accessor for CryptoKitSecretSharing_HybridSecretSharingGeneratorSerialization.SealedBox(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 48))(v8, 1, v9);
  if (!(_DWORD)result)
  {
    sub_1D2C45258(*(_QWORD *)v8, *(_QWORD *)(v8 + 8));
    sub_1D2C45258(*(_QWORD *)(v8 + 16), *(_QWORD *)(v8 + 24));
    sub_1D2C45258(*(_QWORD *)(v8 + 32), *(_QWORD *)(v8 + 40));
    return ((uint64_t (*)(uint64_t, uint64_t))v11)(v8 + *(int *)(v9 + 28), v5);
  }
  return result;
}

uint64_t sub_1D2C74854(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t, uint64_t);
  uint64_t v13;
  _DWORD *v14;
  _DWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  void (*v36)(uint64_t, uint64_t, uint64_t);

  *(_DWORD *)a1 = *(_DWORD *)a2;
  v6 = *(_QWORD *)(a2 + 8);
  v7 = *(_QWORD *)(a2 + 16);
  sub_1D2C45028(v6, v7);
  *(_QWORD *)(a1 + 8) = v6;
  *(_QWORD *)(a1 + 16) = v7;
  v8 = a3[6];
  v9 = a1 + v8;
  v10 = a2 + v8;
  v11 = sub_1D2CAA9F0();
  v12 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 16);
  v12(v9, v10, v11);
  v13 = a3[7];
  v14 = (_DWORD *)(a1 + v13);
  v15 = (_DWORD *)(a2 + v13);
  v16 = type metadata accessor for CryptoKitSecretSharing_HybridSecretSharingSharedState(0);
  v17 = *(_QWORD *)(v16 - 8);
  if ((*(unsigned int (**)(_DWORD *, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16))
  {
    v18 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFC9FF60);
    memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
  }
  else
  {
    *v14 = *v15;
    *((_QWORD *)v14 + 1) = *((_QWORD *)v15 + 1);
    *((_WORD *)v14 + 8) = *((_WORD *)v15 + 8);
    v14[5] = v15[5];
    *((_BYTE *)v14 + 24) = *((_BYTE *)v15 + 24);
    v36 = v12;
    v19 = *((_QWORD *)v15 + 4);
    v20 = *((_QWORD *)v15 + 5);
    sub_1D2C45028(v19, v20);
    *((_QWORD *)v14 + 4) = v19;
    *((_QWORD *)v14 + 5) = v20;
    *((_BYTE *)v14 + 48) = *((_BYTE *)v15 + 48);
    v21 = *((_QWORD *)v15 + 7);
    v22 = *((_QWORD *)v15 + 8);
    sub_1D2C45028(v21, v22);
    *((_QWORD *)v14 + 7) = v21;
    *((_QWORD *)v14 + 8) = v22;
    v12 = v36;
    v36((uint64_t)v14 + *(int *)(v16 + 48), (uint64_t)v15 + *(int *)(v16 + 48), v11);
    (*(void (**)(_DWORD *, _QWORD, uint64_t, uint64_t))(v17 + 56))(v14, 0, 1, v16);
  }
  v23 = a3[8];
  v24 = (_QWORD *)(a1 + v23);
  v25 = (uint64_t *)(a2 + v23);
  v26 = type metadata accessor for CryptoKitSecretSharing_HybridSecretSharingGeneratorSerialization.SealedBox(0);
  v27 = *(_QWORD *)(v26 - 8);
  if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v27 + 48))(v25, 1, v26))
  {
    v28 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFC9FF68);
    memcpy(v24, v25, *(_QWORD *)(*(_QWORD *)(v28 - 8) + 64));
  }
  else
  {
    v29 = *v25;
    v30 = v25[1];
    sub_1D2C45028(*v25, v30);
    *v24 = v29;
    v24[1] = v30;
    v31 = v25[2];
    v32 = v25[3];
    sub_1D2C45028(v31, v32);
    v24[2] = v31;
    v24[3] = v32;
    v33 = v25[4];
    v34 = v25[5];
    sub_1D2C45028(v33, v34);
    v24[4] = v33;
    v24[5] = v34;
    v12((uint64_t)v24 + *(int *)(v26 + 28), (uint64_t)v25 + *(int *)(v26 + 28), v11);
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v27 + 56))(v24, 0, 1, v26);
  }
  return a1;
}

uint64_t sub_1D2C74A94(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t (*v19)(uint64_t, uint64_t, uint64_t);
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t (*v33)(uint64_t *, uint64_t, uint64_t);
  int v34;
  int v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  unint64_t v64;
  void (*v65)(uint64_t, uint64_t, uint64_t);
  uint64_t v66;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  v6 = *(_QWORD *)(a2 + 8);
  v7 = *(_QWORD *)(a2 + 16);
  sub_1D2C45028(v6, v7);
  v8 = *(_QWORD *)(a1 + 8);
  v9 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 8) = v6;
  *(_QWORD *)(a1 + 16) = v7;
  sub_1D2C45258(v8, v9);
  v10 = a3[6];
  v11 = a1 + v10;
  v12 = a2 + v10;
  v13 = sub_1D2CAA9F0();
  v66 = *(_QWORD *)(v13 - 8);
  v65 = *(void (**)(uint64_t, uint64_t, uint64_t))(v66 + 24);
  v65(v11, v12, v13);
  v14 = a3[7];
  v15 = a1 + v14;
  v16 = a2 + v14;
  v17 = type metadata accessor for CryptoKitSecretSharing_HybridSecretSharingSharedState(0);
  v18 = *(_QWORD *)(v17 - 8);
  v19 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v18 + 48);
  v20 = v19(v15, 1, v17);
  v21 = v19(v16, 1, v17);
  if (v20)
  {
    if (!v21)
    {
      *(_DWORD *)v15 = *(_DWORD *)v16;
      v22 = *(_QWORD *)(v16 + 8);
      *(_BYTE *)(v15 + 16) = *(_BYTE *)(v16 + 16);
      *(_QWORD *)(v15 + 8) = v22;
      *(_BYTE *)(v15 + 17) = *(_BYTE *)(v16 + 17);
      *(_DWORD *)(v15 + 20) = *(_DWORD *)(v16 + 20);
      *(_BYTE *)(v15 + 24) = *(_BYTE *)(v16 + 24);
      v23 = *(_QWORD *)(v16 + 32);
      v24 = *(_QWORD *)(v16 + 40);
      sub_1D2C45028(v23, v24);
      *(_QWORD *)(v15 + 32) = v23;
      *(_QWORD *)(v15 + 40) = v24;
      *(_BYTE *)(v15 + 48) = *(_BYTE *)(v16 + 48);
      v25 = *(_QWORD *)(v16 + 56);
      v26 = *(_QWORD *)(v16 + 64);
      sub_1D2C45028(v25, v26);
      *(_QWORD *)(v15 + 56) = v25;
      *(_QWORD *)(v15 + 64) = v26;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v66 + 16))(v15 + *(int *)(v17 + 48), v16 + *(int *)(v17 + 48), v13);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v18 + 56))(v15, 0, 1, v17);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v21)
  {
    sub_1D2C74E48(v15, type metadata accessor for CryptoKitSecretSharing_HybridSecretSharingSharedState);
LABEL_6:
    v27 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFC9FF60);
    memcpy((void *)v15, (const void *)v16, *(_QWORD *)(*(_QWORD *)(v27 - 8) + 64));
    goto LABEL_7;
  }
  *(_DWORD *)v15 = *(_DWORD *)v16;
  v44 = *(_QWORD *)(v16 + 8);
  *(_BYTE *)(v15 + 16) = *(_BYTE *)(v16 + 16);
  *(_QWORD *)(v15 + 8) = v44;
  *(_BYTE *)(v15 + 17) = *(_BYTE *)(v16 + 17);
  *(_DWORD *)(v15 + 20) = *(_DWORD *)(v16 + 20);
  *(_BYTE *)(v15 + 24) = *(_BYTE *)(v16 + 24);
  v45 = *(_QWORD *)(v16 + 32);
  v46 = *(_QWORD *)(v16 + 40);
  sub_1D2C45028(v45, v46);
  v47 = *(_QWORD *)(v15 + 32);
  v48 = *(_QWORD *)(v15 + 40);
  *(_QWORD *)(v15 + 32) = v45;
  *(_QWORD *)(v15 + 40) = v46;
  sub_1D2C45258(v47, v48);
  *(_BYTE *)(v15 + 48) = *(_BYTE *)(v16 + 48);
  v49 = *(_QWORD *)(v16 + 56);
  v50 = *(_QWORD *)(v16 + 64);
  sub_1D2C45028(v49, v50);
  v51 = *(_QWORD *)(v15 + 56);
  v52 = *(_QWORD *)(v15 + 64);
  *(_QWORD *)(v15 + 56) = v49;
  *(_QWORD *)(v15 + 64) = v50;
  sub_1D2C45258(v51, v52);
  v65(v15 + *(int *)(v17 + 48), v16 + *(int *)(v17 + 48), v13);
LABEL_7:
  v28 = a3[8];
  v29 = (uint64_t *)(a1 + v28);
  v30 = (uint64_t *)(a2 + v28);
  v31 = type metadata accessor for CryptoKitSecretSharing_HybridSecretSharingGeneratorSerialization.SealedBox(0);
  v32 = *(_QWORD *)(v31 - 8);
  v33 = *(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(v32 + 48);
  v34 = v33(v29, 1, v31);
  v35 = v33(v30, 1, v31);
  if (!v34)
  {
    if (!v35)
    {
      v53 = *v30;
      v54 = v30[1];
      sub_1D2C45028(*v30, v54);
      v55 = *v29;
      v56 = v29[1];
      *v29 = v53;
      v29[1] = v54;
      sub_1D2C45258(v55, v56);
      v57 = v30[2];
      v58 = v30[3];
      sub_1D2C45028(v57, v58);
      v59 = v29[2];
      v60 = v29[3];
      v29[2] = v57;
      v29[3] = v58;
      sub_1D2C45258(v59, v60);
      v61 = v30[4];
      v62 = v30[5];
      sub_1D2C45028(v61, v62);
      v63 = v29[4];
      v64 = v29[5];
      v29[4] = v61;
      v29[5] = v62;
      sub_1D2C45258(v63, v64);
      v65((uint64_t)v29 + *(int *)(v31 + 28), (uint64_t)v30 + *(int *)(v31 + 28), v13);
      return a1;
    }
    sub_1D2C74E48((uint64_t)v29, type metadata accessor for CryptoKitSecretSharing_HybridSecretSharingGeneratorSerialization.SealedBox);
    goto LABEL_12;
  }
  if (v35)
  {
LABEL_12:
    v42 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFC9FF68);
    memcpy(v29, v30, *(_QWORD *)(*(_QWORD *)(v42 - 8) + 64));
    return a1;
  }
  v36 = *v30;
  v37 = v30[1];
  sub_1D2C45028(*v30, v37);
  *v29 = v36;
  v29[1] = v37;
  v38 = v30[2];
  v39 = v30[3];
  sub_1D2C45028(v38, v39);
  v29[2] = v38;
  v29[3] = v39;
  v40 = v30[4];
  v41 = v30[5];
  sub_1D2C45028(v40, v41);
  v29[4] = v40;
  v29[5] = v41;
  (*(void (**)(char *, char *, uint64_t))(v66 + 16))((char *)v29 + *(int *)(v31 + 28), (char *)v30 + *(int *)(v31 + 28), v13);
  (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v32 + 56))(v29, 0, 1, v31);
  return a1;
}

uint64_t sub_1D2C74E48(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v3;

  v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_1D2C74E84(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, char *, uint64_t);
  uint64_t v11;
  _DWORD *v12;
  _DWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _OWORD *v18;
  _OWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  v6 = a3[6];
  v7 = (char *)(a1 + v6);
  v8 = (char *)(a2 + v6);
  v9 = sub_1D2CAA9F0();
  v10 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32);
  v10(v7, v8, v9);
  v11 = a3[7];
  v12 = (_DWORD *)(a1 + v11);
  v13 = (_DWORD *)(a2 + v11);
  v14 = type metadata accessor for CryptoKitSecretSharing_HybridSecretSharingSharedState(0);
  v15 = *(_QWORD *)(v14 - 8);
  if ((*(unsigned int (**)(_DWORD *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14))
  {
    v16 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFC9FF60);
    memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
  }
  else
  {
    *v12 = *v13;
    *((_QWORD *)v12 + 1) = *((_QWORD *)v13 + 1);
    *((_WORD *)v12 + 8) = *((_WORD *)v13 + 8);
    v12[5] = v13[5];
    *((_BYTE *)v12 + 24) = *((_BYTE *)v13 + 24);
    *((_OWORD *)v12 + 2) = *((_OWORD *)v13 + 2);
    *((_BYTE *)v12 + 48) = *((_BYTE *)v13 + 48);
    *(_OWORD *)(v12 + 14) = *(_OWORD *)(v13 + 14);
    v10((char *)v12 + *(int *)(v14 + 48), (char *)v13 + *(int *)(v14 + 48), v9);
    (*(void (**)(_DWORD *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
  }
  v17 = a3[8];
  v18 = (_OWORD *)(a1 + v17);
  v19 = (_OWORD *)(a2 + v17);
  v20 = type metadata accessor for CryptoKitSecretSharing_HybridSecretSharingGeneratorSerialization.SealedBox(0);
  v21 = *(_QWORD *)(v20 - 8);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v21 + 48))(v19, 1, v20))
  {
    v22 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFC9FF68);
    memcpy(v18, v19, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
  }
  else
  {
    v23 = v19[1];
    *v18 = *v19;
    v18[1] = v23;
    v18[2] = v19[2];
    v10((char *)v18 + *(int *)(v20 + 28), (char *)v19 + *(int *)(v20 + 28), v9);
    (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v21 + 56))(v18, 0, 1, v20);
  }
  return a1;
}

uint64_t sub_1D2C75064(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t (*v17)(uint64_t, uint64_t, uint64_t);
  int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t (*v26)(uint64_t *, uint64_t, uint64_t);
  int v27;
  int v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  void (*v42)(uint64_t, uint64_t, uint64_t);
  uint64_t v43;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  v6 = *(_QWORD *)(a1 + 8);
  v7 = *(_QWORD *)(a1 + 16);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  sub_1D2C45258(v6, v7);
  v8 = a3[6];
  v9 = a1 + v8;
  v10 = a2 + v8;
  v11 = sub_1D2CAA9F0();
  v43 = *(_QWORD *)(v11 - 8);
  v42 = *(void (**)(uint64_t, uint64_t, uint64_t))(v43 + 40);
  v42(v9, v10, v11);
  v12 = a3[7];
  v13 = a1 + v12;
  v14 = a2 + v12;
  v15 = type metadata accessor for CryptoKitSecretSharing_HybridSecretSharingSharedState(0);
  v16 = *(_QWORD *)(v15 - 8);
  v17 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v16 + 48);
  v18 = v17(v13, 1, v15);
  v19 = v17(v14, 1, v15);
  if (v18)
  {
    if (!v19)
    {
      *(_DWORD *)v13 = *(_DWORD *)v14;
      *(_QWORD *)(v13 + 8) = *(_QWORD *)(v14 + 8);
      *(_WORD *)(v13 + 16) = *(_WORD *)(v14 + 16);
      *(_DWORD *)(v13 + 20) = *(_DWORD *)(v14 + 20);
      *(_BYTE *)(v13 + 24) = *(_BYTE *)(v14 + 24);
      *(_OWORD *)(v13 + 32) = *(_OWORD *)(v14 + 32);
      *(_BYTE *)(v13 + 48) = *(_BYTE *)(v14 + 48);
      *(_OWORD *)(v13 + 56) = *(_OWORD *)(v14 + 56);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v43 + 32))(v13 + *(int *)(v15 + 48), v14 + *(int *)(v15 + 48), v11);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v19)
  {
    sub_1D2C74E48(v13, type metadata accessor for CryptoKitSecretSharing_HybridSecretSharingSharedState);
LABEL_6:
    v20 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFC9FF60);
    memcpy((void *)v13, (const void *)v14, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
    goto LABEL_7;
  }
  *(_DWORD *)v13 = *(_DWORD *)v14;
  *(_QWORD *)(v13 + 8) = *(_QWORD *)(v14 + 8);
  *(_BYTE *)(v13 + 16) = *(_BYTE *)(v14 + 16);
  *(_BYTE *)(v13 + 17) = *(_BYTE *)(v14 + 17);
  *(_DWORD *)(v13 + 20) = *(_DWORD *)(v14 + 20);
  *(_BYTE *)(v13 + 24) = *(_BYTE *)(v14 + 24);
  v32 = *(_QWORD *)(v13 + 32);
  v33 = *(_QWORD *)(v13 + 40);
  *(_OWORD *)(v13 + 32) = *(_OWORD *)(v14 + 32);
  sub_1D2C45258(v32, v33);
  *(_BYTE *)(v13 + 48) = *(_BYTE *)(v14 + 48);
  v34 = *(_QWORD *)(v13 + 56);
  v35 = *(_QWORD *)(v13 + 64);
  *(_OWORD *)(v13 + 56) = *(_OWORD *)(v14 + 56);
  sub_1D2C45258(v34, v35);
  v42(v13 + *(int *)(v15 + 48), v14 + *(int *)(v15 + 48), v11);
LABEL_7:
  v21 = a3[8];
  v22 = (uint64_t *)(a1 + v21);
  v23 = (uint64_t *)(a2 + v21);
  v24 = type metadata accessor for CryptoKitSecretSharing_HybridSecretSharingGeneratorSerialization.SealedBox(0);
  v25 = *(_QWORD *)(v24 - 8);
  v26 = *(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(v25 + 48);
  v27 = v26(v22, 1, v24);
  v28 = v26(v23, 1, v24);
  if (!v27)
  {
    if (!v28)
    {
      v36 = *v22;
      v37 = v22[1];
      *(_OWORD *)v22 = *(_OWORD *)v23;
      sub_1D2C45258(v36, v37);
      v38 = v22[2];
      v39 = v22[3];
      *((_OWORD *)v22 + 1) = *((_OWORD *)v23 + 1);
      sub_1D2C45258(v38, v39);
      v40 = v22[4];
      v41 = v22[5];
      *((_OWORD *)v22 + 2) = *((_OWORD *)v23 + 2);
      sub_1D2C45258(v40, v41);
      v42((uint64_t)v22 + *(int *)(v24 + 28), (uint64_t)v23 + *(int *)(v24 + 28), v11);
      return a1;
    }
    sub_1D2C74E48((uint64_t)v22, type metadata accessor for CryptoKitSecretSharing_HybridSecretSharingGeneratorSerialization.SealedBox);
    goto LABEL_12;
  }
  if (v28)
  {
LABEL_12:
    v30 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFC9FF68);
    memcpy(v22, v23, *(_QWORD *)(*(_QWORD *)(v30 - 8) + 64));
    return a1;
  }
  v29 = *((_OWORD *)v23 + 1);
  *(_OWORD *)v22 = *(_OWORD *)v23;
  *((_OWORD *)v22 + 1) = v29;
  *((_OWORD *)v22 + 2) = *((_OWORD *)v23 + 2);
  (*(void (**)(char *, char *, uint64_t))(v43 + 32))((char *)v22 + *(int *)(v24 + 28), (char *)v23 + *(int *)(v24 + 28), v11);
  (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v25 + 56))(v22, 0, 1, v24);
  return a1;
}

uint64_t sub_1D2C75388()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1D2C75394(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  if ((_DWORD)a2 == 12)
  {
    v4 = *(_QWORD *)(a1 + 16) >> 60;
    if (((4 * (_DWORD)v4) & 0xC) != 0)
      return 16 - ((4 * (_DWORD)v4) & 0xC | (v4 >> 2));
    else
      return 0;
  }
  else
  {
    v8 = sub_1D2CAA9F0();
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
    {
      v10 = v8;
      v11 = a3[6];
    }
    else
    {
      v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFC9FF60);
      v9 = *(_QWORD *)(v12 - 8);
      if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
      {
        v10 = v12;
        v11 = a3[7];
      }
      else
      {
        v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFC9FF68);
        v9 = *(_QWORD *)(v10 - 8);
        v11 = a3[8];
      }
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(a1 + v11, a2, v10);
  }
}

uint64_t sub_1D2C7546C()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1D2C75478(uint64_t result, uint64_t a2, int a3, int *a4)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v5 = result;
  if (a3 == 12)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = (unint64_t)(((-(int)a2 >> 2) & 3) - 4 * (_DWORD)a2) << 60;
  }
  else
  {
    v8 = sub_1D2CAA9F0();
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      v10 = v8;
      v11 = a4[6];
    }
    else
    {
      v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFC9FF60);
      v9 = *(_QWORD *)(v12 - 8);
      if (*(_DWORD *)(v9 + 84) == a3)
      {
        v10 = v12;
        v11 = a4[7];
      }
      else
      {
        v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFC9FF68);
        v9 = *(_QWORD *)(v10 - 8);
        v11 = a4[8];
      }
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(v5 + v11, a2, a2, v10);
  }
  return result;
}

uint64_t type metadata accessor for CryptoKitSecretSharing_HybridSecretSharingGeneratorSerialization(uint64_t a1)
{
  return sub_1D2C7657C(a1, (uint64_t *)&unk_1EFC9FF70);
}

void sub_1D2C7555C()
{
  unint64_t v0;
  unint64_t v1;
  unint64_t v2;

  sub_1D2CAA9F0();
  if (v0 <= 0x3F)
  {
    sub_1D2C75634(319, &qword_1EFC9FF80, (void (*)(uint64_t))type metadata accessor for CryptoKitSecretSharing_HybridSecretSharingSharedState);
    if (v1 <= 0x3F)
    {
      sub_1D2C75634(319, &qword_1EFC9FF88, (void (*)(uint64_t))type metadata accessor for CryptoKitSecretSharing_HybridSecretSharingGeneratorSerialization.SealedBox);
      if (v2 <= 0x3F)
        swift_initStructMetadata();
    }
  }
}

void sub_1D2C75634(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  unint64_t v4;
  uint64_t v5;

  if (!*a2)
  {
    a3(255);
    v4 = sub_1D2CAAF9C();
    if (!v5)
      atomic_store(v4, a2);
  }
}

uint64_t sub_1D2C75680(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  int v5;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v4 = a1;
  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v15 = *a2;
    *(_QWORD *)v4 = *a2;
    v4 = v15 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain();
  }
  else
  {
    *(_DWORD *)a1 = *(_DWORD *)a2;
    *(_QWORD *)(a1 + 8) = a2[1];
    *(_WORD *)(a1 + 16) = *((_WORD *)a2 + 8);
    *(_DWORD *)(a1 + 20) = *((_DWORD *)a2 + 5);
    *(_BYTE *)(a1 + 24) = *((_BYTE *)a2 + 24);
    v7 = a2[4];
    v8 = a2[5];
    sub_1D2C45028(v7, v8);
    *(_QWORD *)(v4 + 32) = v7;
    *(_QWORD *)(v4 + 40) = v8;
    *(_BYTE *)(v4 + 48) = *((_BYTE *)a2 + 48);
    v9 = a2[7];
    v10 = a2[8];
    sub_1D2C45028(v9, v10);
    *(_QWORD *)(v4 + 56) = v9;
    *(_QWORD *)(v4 + 64) = v10;
    v11 = *(int *)(a3 + 48);
    v12 = v4 + v11;
    v13 = (uint64_t)a2 + v11;
    v14 = sub_1D2CAA9F0();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(v12, v13, v14);
  }
  return v4;
}

uint64_t sub_1D2C75768(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  sub_1D2C45258(*(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40));
  sub_1D2C45258(*(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64));
  v4 = a1 + *(int *)(a2 + 48);
  v5 = sub_1D2CAA9F0();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
}

uint64_t sub_1D2C757BC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_WORD *)(a1 + 16) = *(_WORD *)(a2 + 16);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  v6 = *(_QWORD *)(a2 + 32);
  v7 = *(_QWORD *)(a2 + 40);
  sub_1D2C45028(v6, v7);
  *(_QWORD *)(a1 + 32) = v6;
  *(_QWORD *)(a1 + 40) = v7;
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  v8 = *(_QWORD *)(a2 + 56);
  v9 = *(_QWORD *)(a2 + 64);
  sub_1D2C45028(v8, v9);
  *(_QWORD *)(a1 + 56) = v8;
  *(_QWORD *)(a1 + 64) = v9;
  v10 = *(int *)(a3 + 48);
  v11 = a1 + v10;
  v12 = a2 + v10;
  v13 = sub_1D2CAA9F0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 16))(v11, v12, v13);
  return a1;
}

uint64_t sub_1D2C75878(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  v6 = *(_QWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = v6;
  *(_BYTE *)(a1 + 17) = *(_BYTE *)(a2 + 17);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  v7 = *(_QWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 40);
  sub_1D2C45028(v7, v8);
  v9 = *(_QWORD *)(a1 + 32);
  v10 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 32) = v7;
  *(_QWORD *)(a1 + 40) = v8;
  sub_1D2C45258(v9, v10);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  v11 = *(_QWORD *)(a2 + 56);
  v12 = *(_QWORD *)(a2 + 64);
  sub_1D2C45028(v11, v12);
  v13 = *(_QWORD *)(a1 + 56);
  v14 = *(_QWORD *)(a1 + 64);
  *(_QWORD *)(a1 + 56) = v11;
  *(_QWORD *)(a1 + 64) = v12;
  sub_1D2C45258(v13, v14);
  v15 = *(int *)(a3 + 48);
  v16 = a1 + v15;
  v17 = a2 + v15;
  v18 = sub_1D2CAA9F0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 24))(v16, v17, v18);
  return a1;
}

uint64_t sub_1D2C7594C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_WORD *)(a1 + 16) = *(_WORD *)(a2 + 16);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  v4 = *(int *)(a3 + 48);
  v5 = a1 + v4;
  v6 = a2 + v4;
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  v7 = sub_1D2CAA9F0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

uint64_t sub_1D2C759E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_BYTE *)(a1 + 17) = *(_BYTE *)(a2 + 17);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  v6 = *(_QWORD *)(a1 + 32);
  v7 = *(_QWORD *)(a1 + 40);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  sub_1D2C45258(v6, v7);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  v8 = *(_QWORD *)(a1 + 56);
  v9 = *(_QWORD *)(a1 + 64);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  sub_1D2C45258(v8, v9);
  v10 = *(int *)(a3 + 48);
  v11 = a1 + v10;
  v12 = a2 + v10;
  v13 = sub_1D2CAA9F0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 40))(v11, v12, v13);
  return a1;
}

uint64_t sub_1D2C75A98()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1D2C75AA4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int v4;
  BOOL v5;
  int v6;
  uint64_t v10;

  if ((_DWORD)a2 == 254)
  {
    v4 = *(unsigned __int8 *)(a1 + 17);
    v5 = v4 >= 2;
    v6 = (v4 + 2147483646) & 0x7FFFFFFF;
    if (v5)
      return (v6 + 1);
    else
      return 0;
  }
  else
  {
    v10 = sub_1D2CAA9F0();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 48))(a1 + *(int *)(a3 + 48), a2, v10);
  }
}

uint64_t sub_1D2C75B20()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1D2C75B2C(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 254)
  {
    *(_BYTE *)(result + 17) = a2 + 1;
  }
  else
  {
    v7 = sub_1D2CAA9F0();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 48), a2, a2, v7);
  }
  return result;
}

uint64_t sub_1D2C75B9C()
{
  uint64_t result;
  unint64_t v1;

  result = sub_1D2CAA9F0();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *sub_1D2C75C38(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v17 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v17 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = *a2;
    v8 = a2[1];
    sub_1D2C45028(*a2, v8);
    *a1 = v7;
    a1[1] = v8;
    v9 = a2[2];
    v10 = a2[3];
    sub_1D2C45028(v9, v10);
    a1[2] = v9;
    a1[3] = v10;
    v11 = a2[4];
    v12 = a2[5];
    sub_1D2C45028(v11, v12);
    a1[4] = v11;
    a1[5] = v12;
    v13 = *(int *)(a3 + 28);
    v14 = (char *)a1 + v13;
    v15 = (char *)a2 + v13;
    v16 = sub_1D2CAA9F0();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v16 - 8) + 16))(v14, v15, v16);
  }
  return a1;
}

uint64_t sub_1D2C75D04(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  sub_1D2C45258(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
  sub_1D2C45258(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24));
  sub_1D2C45258(*(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40));
  v4 = a1 + *(int *)(a2 + 28);
  v5 = sub_1D2CAA9F0();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
}

uint64_t *sub_1D2C75D60(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;

  v6 = *a2;
  v7 = a2[1];
  sub_1D2C45028(*a2, v7);
  *a1 = v6;
  a1[1] = v7;
  v8 = a2[2];
  v9 = a2[3];
  sub_1D2C45028(v8, v9);
  a1[2] = v8;
  a1[3] = v9;
  v10 = a2[4];
  v11 = a2[5];
  sub_1D2C45028(v10, v11);
  a1[4] = v10;
  a1[5] = v11;
  v12 = *(int *)(a3 + 28);
  v13 = (char *)a1 + v12;
  v14 = (char *)a2 + v12;
  v15 = sub_1D2CAA9F0();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 16))(v13, v14, v15);
  return a1;
}

uint64_t *sub_1D2C75E00(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;

  v6 = *a2;
  v7 = a2[1];
  sub_1D2C45028(*a2, v7);
  v8 = *a1;
  v9 = a1[1];
  *a1 = v6;
  a1[1] = v7;
  sub_1D2C45258(v8, v9);
  v10 = a2[2];
  v11 = a2[3];
  sub_1D2C45028(v10, v11);
  v12 = a1[2];
  v13 = a1[3];
  a1[2] = v10;
  a1[3] = v11;
  sub_1D2C45258(v12, v13);
  v14 = a2[4];
  v15 = a2[5];
  sub_1D2C45028(v14, v15);
  v16 = a1[4];
  v17 = a1[5];
  a1[4] = v14;
  a1[5] = v15;
  sub_1D2C45258(v16, v17);
  v18 = *(int *)(a3 + 28);
  v19 = (char *)a1 + v18;
  v20 = (char *)a2 + v18;
  v21 = sub_1D2CAA9F0();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v21 - 8) + 24))(v19, v20, v21);
  return a1;
}

_OWORD *sub_1D2C75EB8(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  __int128 v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  a1[2] = a2[2];
  v5 = *(int *)(a3 + 28);
  v6 = (char *)a1 + v5;
  v7 = (char *)a2 + v5;
  v8 = sub_1D2CAA9F0();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(v6, v7, v8);
  return a1;
}

uint64_t *sub_1D2C75F1C(uint64_t *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;

  v6 = *a1;
  v7 = a1[1];
  *(_OWORD *)a1 = *a2;
  sub_1D2C45258(v6, v7);
  v8 = a1[2];
  v9 = a1[3];
  *((_OWORD *)a1 + 1) = a2[1];
  sub_1D2C45258(v8, v9);
  v10 = a1[4];
  v11 = a1[5];
  *((_OWORD *)a1 + 2) = a2[2];
  sub_1D2C45258(v10, v11);
  v12 = *(int *)(a3 + 28);
  v13 = (char *)a1 + v12;
  v14 = (char *)a2 + v12;
  v15 = sub_1D2CAA9F0();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 40))(v13, v14, v15);
  return a1;
}

uint64_t sub_1D2C75FAC()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1D2C75FB8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 12)
  {
    v4 = *(_QWORD *)(a1 + 8) >> 60;
    if (((4 * (_DWORD)v4) & 0xC) != 0)
      return 16 - ((4 * (_DWORD)v4) & 0xC | (v4 >> 2));
    else
      return 0;
  }
  else
  {
    v8 = sub_1D2CAA9F0();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 28), a2, v8);
  }
}

uint64_t sub_1D2C76040()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

char *sub_1D2C7604C(char *result, uint64_t a2, int a3, uint64_t a4)
{
  char *v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 12)
  {
    *(_QWORD *)result = 0;
    *((_QWORD *)result + 1) = (unint64_t)(((-(int)a2 >> 2) & 3) - 4 * (_DWORD)a2) << 60;
  }
  else
  {
    v7 = sub_1D2CAA9F0();
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(&v5[*(int *)(a4 + 28)], a2, a2, v7);
  }
  return result;
}

uint64_t sub_1D2C760C8()
{
  uint64_t result;
  unint64_t v1;

  result = sub_1D2CAA9F0();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

_QWORD *sub_1D2C76140(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  _QWORD *v4;
  int v5;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v4 = (_QWORD *)a1;
  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v13 = *a2;
    *v4 = *a2;
    v4 = (_QWORD *)(v13 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *(_QWORD *)a1 = *a2;
    *(_DWORD *)(a1 + 8) = *((_DWORD *)a2 + 2);
    v7 = a2[2];
    v8 = a2[3];
    sub_1D2C45028(v7, v8);
    v4[2] = v7;
    v4[3] = v8;
    v9 = *(int *)(a3 + 32);
    v10 = (char *)v4 + v9;
    v11 = (uint64_t)a2 + v9;
    v12 = sub_1D2CAA9F0();
    (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 16))(v10, v11, v12);
  }
  return v4;
}

uint64_t sub_1D2C761F4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  sub_1D2C45258(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24));
  v4 = a1 + *(int *)(a2 + 32);
  v5 = sub_1D2CAA9F0();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
}

uint64_t sub_1D2C76240(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  v6 = *(_QWORD *)(a2 + 16);
  v7 = *(_QWORD *)(a2 + 24);
  sub_1D2C45028(v6, v7);
  *(_QWORD *)(a1 + 16) = v6;
  *(_QWORD *)(a1 + 24) = v7;
  v8 = *(int *)(a3 + 32);
  v9 = a1 + v8;
  v10 = a2 + v8;
  v11 = sub_1D2CAA9F0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v9, v10, v11);
  return a1;
}

uint64_t sub_1D2C762C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  v6 = *(_QWORD *)(a2 + 16);
  v7 = *(_QWORD *)(a2 + 24);
  sub_1D2C45028(v6, v7);
  v8 = *(_QWORD *)(a1 + 16);
  v9 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = v6;
  *(_QWORD *)(a1 + 24) = v7;
  sub_1D2C45258(v8, v9);
  v10 = *(int *)(a3 + 32);
  v11 = a1 + v10;
  v12 = a2 + v10;
  v13 = sub_1D2CAA9F0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 24))(v11, v12, v13);
  return a1;
}

uint64_t sub_1D2C76360(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  v4 = *(int *)(a3 + 32);
  v5 = a1 + v4;
  v6 = a2 + v4;
  v7 = sub_1D2CAA9F0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

uint64_t sub_1D2C763CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  v6 = *(_QWORD *)(a1 + 16);
  v7 = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  sub_1D2C45258(v6, v7);
  v8 = *(int *)(a3 + 32);
  v9 = a1 + v8;
  v10 = a2 + v8;
  v11 = sub_1D2CAA9F0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 40))(v9, v10, v11);
  return a1;
}

uint64_t sub_1D2C7644C()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1D2C76458(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 12)
  {
    v4 = *(_QWORD *)(a1 + 24) >> 60;
    if (((4 * (_DWORD)v4) & 0xC) != 0)
      return 16 - ((4 * (_DWORD)v4) & 0xC | (v4 >> 2));
    else
      return 0;
  }
  else
  {
    v8 = sub_1D2CAA9F0();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 32), a2, v8);
  }
}

uint64_t sub_1D2C764E0()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1D2C764EC(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 12)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = (unint64_t)(((-(int)a2 >> 2) & 3) - 4 * (_DWORD)a2) << 60;
  }
  else
  {
    v7 = sub_1D2CAA9F0();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 32), a2, a2, v7);
  }
  return result;
}

uint64_t type metadata accessor for CryptoKitSecretSharing_ShamirShareGeneratorSerialization(uint64_t a1)
{
  return sub_1D2C7657C(a1, (uint64_t *)&unk_1ED9858B8);
}

uint64_t sub_1D2C7657C(uint64_t a1, uint64_t *a2)
{
  uint64_t result;

  result = *a2;
  if (!*a2)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t sub_1D2C765B0()
{
  uint64_t result;
  unint64_t v1;

  result = sub_1D2CAA9F0();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

void sub_1D2C76634(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = 0;
  *(_BYTE *)(a1 + 8) = 1;
}

uint64_t sub_1D2C76644@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = result;
  *(_BYTE *)(a2 + 8) = result == 0;
  *(_BYTE *)(a2 + 9) = 0;
  return result;
}

uint64_t sub_1D2C7665C()
{
  _BYTE *v0;

  if ((v0[8] & 1) != 0)
    return 0;
  else
    return *(_QWORD *)v0;
}

_QWORD *sub_1D2C76674@<X0>(_QWORD *result@<X0>, uint64_t a2@<X8>)
{
  BOOL v2;
  char v3;

  v2 = *result == 0;
  *(_QWORD *)a2 = *result;
  v3 = v2;
  *(_BYTE *)(a2 + 8) = v3;
  *(_BYTE *)(a2 + 9) = 0;
  return result;
}

void sub_1D2C76690(_QWORD *a1@<X8>)
{
  uint64_t v1;

  if ((*(_BYTE *)(v1 + 8) & 1) != 0)
    *a1 = 0;
  else
    *a1 = *(_QWORD *)v1;
}

uint64_t sub_1D2C766AC()
{
  sub_1D2CAB134();
  sub_1D2CAADD4();
  return sub_1D2CAB158();
}

uint64_t sub_1D2C76714()
{
  sub_1D2C79718();
  return sub_1D2CAAA2C();
}

uint64_t sub_1D2C7674C()
{
  sub_1D2CAB134();
  sub_1D2CAADD4();
  return sub_1D2CAB158();
}

BOOL sub_1D2C767B0(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a2;
  if ((a1[1] & 1) != 0)
    v3 = 0;
  else
    v3 = *a1;
  if (*((_BYTE *)a2 + 8))
    v2 = 0;
  return v3 == v2;
}

void sub_1D2C767E0()
{
  qword_1EFCA4A90 = (uint64_t)&unk_1E943E840;
}

uint64_t sub_1D2C767F4@<X0>(_QWORD *a1@<X8>)
{
  if (qword_1EFC9F6A8 != -1)
    swift_once();
  *a1 = qword_1EFCA4A90;
  return sub_1D2CAAF0C();
}

uint64_t sub_1D2C76844()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;

  v0 = sub_1D2CAAB34();
  __swift_allocate_value_buffer(v0, qword_1EFCA4A98);
  __swift_project_value_buffer(v0, (uint64_t)qword_1EFCA4A98);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EFCA0040);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFCA0048);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_1D2CADDB0;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 1;
  *(_QWORD *)v7 = "version";
  *(_QWORD *)(v7 + 8) = 7;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x1E0D3EF08];
  v9 = sub_1D2CAAB1C();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 2;
  *(_QWORD *)v11 = "sharedState";
  *(_QWORD *)(v11 + 8) = 11;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 3;
  *(_QWORD *)v13 = "keyToBeShared";
  *((_QWORD *)v13 + 1) = 13;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 4;
  *(_QWORD *)v15 = "sealedBox";
  *((_QWORD *)v15 + 1) = 9;
  v15[16] = 2;
  v10();
  return sub_1D2CAAB28();
}

uint64_t sub_1D2C76A04()
{
  uint64_t v0;
  uint64_t result;
  char v2;

  result = sub_1D2CAAA38();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
          sub_1D2CAAA80();
          break;
        case 2:
          sub_1D2C76AF0();
          break;
        case 3:
          sub_1D2CAAA68();
          break;
        case 4:
          sub_1D2C76B84();
          break;
        default:
          break;
      }
      result = sub_1D2CAAA38();
    }
  }
  return result;
}

uint64_t sub_1D2C76AF0()
{
  type metadata accessor for CryptoKitSecretSharing_HybridSecretSharingGeneratorSerialization(0);
  type metadata accessor for CryptoKitSecretSharing_HybridSecretSharingSharedState(0);
  sub_1D2C5AE40(&qword_1EFC9FFC8, type metadata accessor for CryptoKitSecretSharing_HybridSecretSharingSharedState, (uint64_t)&unk_1D2CAE124);
  return sub_1D2CAAA8C();
}

uint64_t sub_1D2C76B84()
{
  type metadata accessor for CryptoKitSecretSharing_HybridSecretSharingGeneratorSerialization(0);
  type metadata accessor for CryptoKitSecretSharing_HybridSecretSharingGeneratorSerialization.SealedBox(0);
  sub_1D2C5AE40(&qword_1EFC9FFE8, type metadata accessor for CryptoKitSecretSharing_HybridSecretSharingGeneratorSerialization.SealedBox, (uint64_t)&unk_1D2CAE28C);
  return sub_1D2CAAA8C();
}

uint64_t sub_1D2C76C18(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int *v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  int v16;
  uint64_t result;
  uint64_t v18;
  _QWORD v19[3];
  uint64_t v20;
  uint64_t v21;

  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFC9FF68);
  MEMORY[0x1E0C80A78](v6);
  v19[2] = (char *)v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = type metadata accessor for CryptoKitSecretSharing_HybridSecretSharingGeneratorSerialization.SealedBox(0);
  v19[1] = *(_QWORD *)(v20 - 8);
  MEMORY[0x1E0C80A78](v20);
  v19[0] = (char *)v19 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFC9FF60);
  MEMORY[0x1E0C80A78](v9);
  v11 = (char *)v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for CryptoKitSecretSharing_HybridSecretSharingSharedState(0);
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x1E0C80A78](v12);
  v15 = (char *)v19 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = *v3;
  v21 = a3;
  if (!v16 || (result = sub_1D2CAAB04(), !v4))
  {
    v18 = type metadata accessor for CryptoKitSecretSharing_HybridSecretSharingGeneratorSerialization(0);
    sub_1D2C78C54((uint64_t)v3 + *(int *)(v18 + 28), (uint64_t)v11, &qword_1EFC9FF60);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12) == 1)
    {
      sub_1D2C6F668((uint64_t)v11, &qword_1EFC9FF60);
      goto LABEL_6;
    }
    sub_1D2C78C98((uint64_t)v11, (uint64_t)v15, type metadata accessor for CryptoKitSecretSharing_HybridSecretSharingSharedState);
    sub_1D2C5AE40(&qword_1EFC9FFC8, type metadata accessor for CryptoKitSecretSharing_HybridSecretSharingSharedState, (uint64_t)&unk_1D2CAE124);
    sub_1D2CAAB10();
    result = sub_1D2C74E48((uint64_t)v15, type metadata accessor for CryptoKitSecretSharing_HybridSecretSharingSharedState);
    if (!v4)
LABEL_6:
      __asm { BR              X10 }
  }
  return result;
}

uint64_t sub_1D2C76F90@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_DWORD *)a2 = 0;
  *(_OWORD *)(a2 + 8) = xmmword_1D2CAD220;
  sub_1D2CAA9E4();
  v4 = a2 + *(int *)(a1 + 28);
  v5 = type metadata accessor for CryptoKitSecretSharing_HybridSecretSharingSharedState(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56))(v4, 1, 1, v5);
  v6 = a2 + *(int *)(a1 + 32);
  v7 = type metadata accessor for CryptoKitSecretSharing_HybridSecretSharingGeneratorSerialization.SealedBox(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v6, 1, 1, v7);
}

unint64_t sub_1D2C77028()
{
  return 0xD000000000000040;
}

uint64_t sub_1D2C77048@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = v2 + *(int *)(a1 + 24);
  v5 = sub_1D2CAA9F0();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, v4, v5);
}

uint64_t sub_1D2C77088(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = v2 + *(int *)(a2 + 24);
  v5 = sub_1D2CAA9F0();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 40))(v4, a1, v5);
}

uint64_t (*sub_1D2C770C8())()
{
  return nullsub_1;
}

uint64_t sub_1D2C770DC()
{
  return sub_1D2C76A04();
}

uint64_t sub_1D2C770F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1D2C76C18(a1, a2, a3);
}

uint64_t sub_1D2C77108()
{
  sub_1D2C5AE40(&qword_1EFCA0038, type metadata accessor for CryptoKitSecretSharing_HybridSecretSharingGeneratorSerialization, (uint64_t)&unk_1D2CAE3BC);
  return sub_1D2CAAA20();
}

uint64_t sub_1D2C7715C@<X0>(uint64_t a1@<X8>)
{
  return sub_1D2C787A0(&qword_1EFC9F6B0, (uint64_t)qword_1EFCA4A98, a1);
}

uint64_t sub_1D2C77178()
{
  sub_1D2C5AE40(&qword_1EFCA0008, type metadata accessor for CryptoKitSecretSharing_HybridSecretSharingGeneratorSerialization, (uint64_t)&unk_1D2CAE42C);
  return sub_1D2CAAABC();
}

uint64_t sub_1D2C771BC()
{
  sub_1D2C5AE40(&qword_1EFCA0008, type metadata accessor for CryptoKitSecretSharing_HybridSecretSharingGeneratorSerialization, (uint64_t)&unk_1D2CAE42C);
  return sub_1D2CAAAC8();
}

uint64_t sub_1D2C77214()
{
  uint64_t result;

  result = sub_1D2CAAE70();
  qword_1EFCA4AB0 = 0xD000000000000040;
  *(_QWORD *)algn_1EFCA4AB8 = 0x80000001D2CB1700;
  return result;
}

uint64_t sub_1D2C77280()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;
  uint64_t v12;

  v0 = sub_1D2CAAB34();
  __swift_allocate_value_buffer(v0, qword_1EFCA4AC0);
  __swift_project_value_buffer(v0, (uint64_t)qword_1EFCA4AC0);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EFCA0040);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFCA0048);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_1D2CAD540;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 1;
  *(_QWORD *)v7 = "nonce";
  *(_QWORD *)(v7 + 8) = 5;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x1E0D3EF08];
  v9 = sub_1D2CAAB1C();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 2;
  *(_QWORD *)v11 = "ciphertext";
  *((_QWORD *)v11 + 1) = 10;
  v11[16] = 2;
  v10();
  v12 = (uint64_t)v6 + 2 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + 2 * v3) = 3;
  *(_QWORD *)v12 = "tag";
  *(_QWORD *)(v12 + 8) = 3;
  *(_BYTE *)(v12 + 16) = 2;
  v10();
  return sub_1D2CAAB28();
}

uint64_t sub_1D2C77410()
{
  uint64_t v0;
  uint64_t result;
  char v2;

  result = sub_1D2CAAA38();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      if (result == 3 || result == 2 || result == 1)
        sub_1D2CAAA68();
      result = sub_1D2CAAA38();
    }
  }
  return result;
}

void sub_1D2C774B4()
{
  __asm { BR              X10 }
}

uint64_t sub_1D2C774FC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  if ((a2 & 0xFF000000000000) == 0 || (result = sub_1D2CAAAF8(), !v2))
    __asm { BR              X10 }
  return result;
}

uint64_t sub_1D2C77660@<X0>(_OWORD *a1@<X8>)
{
  *a1 = xmmword_1D2CAD220;
  a1[1] = xmmword_1D2CAD220;
  a1[2] = xmmword_1D2CAD220;
  return sub_1D2CAA9E4();
}

uint64_t sub_1D2C7768C()
{
  uint64_t v0;

  if (qword_1EFC9F6B8 != -1)
    swift_once();
  v0 = qword_1EFCA4AB0;
  sub_1D2CAAF0C();
  return v0;
}

uint64_t sub_1D2C776E8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = v2 + *(int *)(a1 + 28);
  v5 = sub_1D2CAA9F0();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, v4, v5);
}

uint64_t sub_1D2C77728(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = v2 + *(int *)(a2 + 28);
  v5 = sub_1D2CAA9F0();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 40))(v4, a1, v5);
}

uint64_t (*sub_1D2C77768())()
{
  return nullsub_1;
}

uint64_t sub_1D2C7777C()
{
  return sub_1D2C77410();
}

void sub_1D2C77790()
{
  sub_1D2C774B4();
}

uint64_t sub_1D2C777A4()
{
  sub_1D2C5AE40(&qword_1EFCA0068, type metadata accessor for CryptoKitSecretSharing_HybridSecretSharingGeneratorSerialization.SealedBox, (uint64_t)&unk_1D2CAE254);
  return sub_1D2CAAA20();
}

uint64_t sub_1D2C777F4@<X0>(uint64_t a1@<X8>)
{
  return sub_1D2C787A0(&qword_1EFC9F6C0, (uint64_t)qword_1EFCA4AC0, a1);
}

uint64_t sub_1D2C77810()
{
  sub_1D2C5AE40(&qword_1EFC9FFE8, type metadata accessor for CryptoKitSecretSharing_HybridSecretSharingGeneratorSerialization.SealedBox, (uint64_t)&unk_1D2CAE28C);
  return sub_1D2CAAABC();
}

uint64_t sub_1D2C77850()
{
  sub_1D2C5AE40(&qword_1EFC9FFE8, type metadata accessor for CryptoKitSecretSharing_HybridSecretSharingGeneratorSerialization.SealedBox, (uint64_t)&unk_1D2CAE28C);
  return sub_1D2CAAAC8();
}

uint64_t sub_1D2C778A4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  _QWORD *v16;
  char *v17;
  _QWORD *v18;
  char *v19;
  _QWORD *v20;
  char *v21;
  _QWORD *v22;
  char *v23;

  v0 = sub_1D2CAAB34();
  __swift_allocate_value_buffer(v0, qword_1EFCA4AD8);
  __swift_project_value_buffer(v0, (uint64_t)qword_1EFCA4AD8);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EFCA0040);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFCA0048);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_1D2CADDC0;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 1;
  *(_QWORD *)v7 = "version";
  *(_QWORD *)(v7 + 8) = 7;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x1E0D3EF08];
  v9 = sub_1D2CAAB1C();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 2;
  *(_QWORD *)v11 = "ciphersuite";
  *(_QWORD *)(v11 + 8) = 11;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 3;
  *(_QWORD *)v13 = "includeThreshold";
  *((_QWORD *)v13 + 1) = 16;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 4;
  *(_QWORD *)v15 = "threshold";
  *((_QWORD *)v15 + 1) = 9;
  v15[16] = 2;
  v10();
  v16 = (_QWORD *)(v6 + 4 * v3);
  v17 = (char *)v16 + *(int *)(v1 + 48);
  *v16 = 5;
  *(_QWORD *)v17 = "includeAuthenticatedData";
  *((_QWORD *)v17 + 1) = 24;
  v17[16] = 2;
  v10();
  v18 = (_QWORD *)(v6 + 5 * v3);
  v19 = (char *)v18 + *(int *)(v1 + 48);
  *v18 = 6;
  *(_QWORD *)v19 = "authenticatedData";
  *((_QWORD *)v19 + 1) = 17;
  v19[16] = 2;
  v10();
  v20 = (_QWORD *)(v6 + 6 * v3);
  v21 = (char *)v20 + *(int *)(v1 + 48);
  *v20 = 7;
  *(_QWORD *)v21 = "insecureToChangeIncludeMessageEntropy";
  *((_QWORD *)v21 + 1) = 37;
  v21[16] = 2;
  v10();
  v22 = (_QWORD *)(v6 + 7 * v3);
  v23 = (char *)v22 + *(int *)(v1 + 48);
  *v22 = 8;
  *(_QWORD *)v23 = "shamirGeneratorState";
  *((_QWORD *)v23 + 1) = 20;
  v23[16] = 2;
  v10();
  return sub_1D2CAAB28();
}

uint64_t sub_1D2C77B4C()
{
  uint64_t v0;
  uint64_t result;
  char v2;

  result = sub_1D2CAAA38();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
        case 4:
          sub_1D2CAAA80();
          break;
        case 2:
          sub_1D2C79718();
          sub_1D2CAAA50();
          break;
        case 3:
        case 5:
        case 7:
          sub_1D2CAAA44();
          break;
        case 6:
        case 8:
          sub_1D2CAAA68();
          break;
        default:
          break;
      }
      result = sub_1D2CAAA38();
    }
  }
  return result;
}

uint64_t sub_1D2C77CCC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;

  if (!*(_DWORD *)v0 || (result = sub_1D2CAAB04(), !v1))
  {
    if ((*(_BYTE *)(v0 + 16) & 1) != 0 || !*(_QWORD *)(v0 + 8) || (sub_1D2C79718(), result = sub_1D2CAAAEC(), !v1))
    {
      if (*(_BYTE *)(v0 + 17) != 1 || (result = sub_1D2CAAAE0(), !v1))
      {
        if (!*(_DWORD *)(v0 + 20) || (result = sub_1D2CAAB04(), !v1))
        {
          if (*(_BYTE *)(v0 + 24) != 1 || (result = sub_1D2CAAAE0(), !v1))
            __asm { BR              X10 }
        }
      }
    }
  }
  return result;
}

uint64_t sub_1D2C77F1C@<X0>(uint64_t a1@<X8>)
{
  *(_DWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = 1;
  *(_DWORD *)(a1 + 20) = 0;
  *(_BYTE *)(a1 + 24) = 0;
  *(_OWORD *)(a1 + 32) = xmmword_1D2CAD220;
  *(_BYTE *)(a1 + 48) = 0;
  *(_OWORD *)(a1 + 56) = xmmword_1D2CAD220;
  return sub_1D2CAA9E4();
}

unint64_t sub_1D2C77F64()
{
  return 0xD000000000000035;
}

uint64_t sub_1D2C77F80@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = v2 + *(int *)(a1 + 48);
  v5 = sub_1D2CAA9F0();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, v4, v5);
}

uint64_t sub_1D2C77FC0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = v2 + *(int *)(a2 + 48);
  v5 = sub_1D2CAA9F0();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 40))(v4, a1, v5);
}

uint64_t (*sub_1D2C78000())()
{
  return nullsub_1;
}

uint64_t sub_1D2C78014()
{
  return sub_1D2C77B4C();
}

uint64_t sub_1D2C78028()
{
  return sub_1D2C77CCC();
}

uint64_t sub_1D2C7803C()
{
  sub_1D2C5AE40(&qword_1EFCA0070, type metadata accessor for CryptoKitSecretSharing_HybridSecretSharingSharedState, (uint64_t)&unk_1D2CAE0EC);
  return sub_1D2CAAA20();
}

uint64_t sub_1D2C7808C@<X0>(uint64_t a1@<X8>)
{
  return sub_1D2C787A0(&qword_1EFC9F6C8, (uint64_t)qword_1EFCA4AD8, a1);
}

uint64_t sub_1D2C780A8()
{
  sub_1D2C5AE40(&qword_1EFC9FFC8, type metadata accessor for CryptoKitSecretSharing_HybridSecretSharingSharedState, (uint64_t)&unk_1D2CAE124);
  return sub_1D2CAAABC();
}

uint64_t sub_1D2C780E8()
{
  sub_1D2C5AE40(&qword_1EFC9FFC8, type metadata accessor for CryptoKitSecretSharing_HybridSecretSharingSharedState, (uint64_t)&unk_1D2CAE124);
  return sub_1D2CAAAC8();
}

uint64_t sub_1D2C7813C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v0 = sub_1D2CAAB34();
  __swift_allocate_value_buffer(v0, qword_1EFCA4AF0);
  __swift_project_value_buffer(v0, (uint64_t)qword_1EFCA4AF0);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EFCA0040);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFCA0048);
  v2 = *(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80);
  v3 = (v2 + 32) & ~v2;
  v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_1D2CACF70;
  v5 = v4 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v4 + v3) = 0;
  *(_QWORD *)v5 = "AES_GCM_256_128";
  *(_QWORD *)(v5 + 8) = 15;
  *(_BYTE *)(v5 + 16) = 2;
  v6 = *MEMORY[0x1E0D3EF08];
  v7 = sub_1D2CAAB1C();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 104))(v5, v6, v7);
  return sub_1D2CAAB28();
}

uint64_t sub_1D2C7823C@<X0>(uint64_t a1@<X8>)
{
  return sub_1D2C787A0(&qword_1EFC9F6D0, (uint64_t)qword_1EFCA4AF0, a1);
}

uint64_t sub_1D2C78258()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;

  v0 = sub_1D2CAAB34();
  __swift_allocate_value_buffer(v0, qword_1EFCA4B08);
  __swift_project_value_buffer(v0, (uint64_t)qword_1EFCA4B08);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EFCA0040);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFCA0048);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_1D2CADDB0;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 1;
  *(_QWORD *)v7 = "version";
  *(_QWORD *)(v7 + 8) = 7;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x1E0D3EF08];
  v9 = sub_1D2CAAB1C();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 2;
  *(_QWORD *)v11 = "prime";
  *(_QWORD *)(v11 + 8) = 5;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 3;
  *(_QWORD *)v13 = "threshold";
  *((_QWORD *)v13 + 1) = 9;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 4;
  *(_QWORD *)v15 = "shamirGeneratorState";
  *((_QWORD *)v15 + 1) = 20;
  v15[16] = 2;
  v10();
  return sub_1D2CAAB28();
}

uint64_t sub_1D2C78418()
{
  uint64_t v0;
  uint64_t result;
  char v2;

  result = sub_1D2CAAA38();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
        case 2:
        case 3:
          sub_1D2CAAA80();
          break;
        case 4:
          sub_1D2CAAA68();
          break;
        default:
          break;
      }
      result = sub_1D2CAAA38();
    }
  }
  return result;
}

uint64_t sub_1D2C784EC()
{
  _DWORD *v0;
  uint64_t v1;
  uint64_t result;

  if (!*v0 || (result = sub_1D2CAAB04(), !v1))
  {
    if (!v0[1] || (result = sub_1D2CAAB04(), !v1))
    {
      if (!v0[2] || (result = sub_1D2CAAB04(), !v1))
        __asm { BR              X10 }
    }
  }
  return result;
}

uint64_t sub_1D2C7862C@<X0>(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = 0;
  *(_DWORD *)(a1 + 8) = 0;
  *(_OWORD *)(a1 + 16) = xmmword_1D2CAD220;
  return sub_1D2CAA9E4();
}

unint64_t sub_1D2C7865C()
{
  return 0xD000000000000038;
}

uint64_t sub_1D2C78678@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = v2 + *(int *)(a1 + 32);
  v5 = sub_1D2CAA9F0();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, v4, v5);
}

uint64_t sub_1D2C786B8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = v2 + *(int *)(a2 + 32);
  v5 = sub_1D2CAA9F0();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 40))(v4, a1, v5);
}

uint64_t (*sub_1D2C786F8())()
{
  return nullsub_1;
}

uint64_t sub_1D2C7870C()
{
  return sub_1D2C78418();
}

uint64_t sub_1D2C78720()
{
  return sub_1D2C784EC();
}

uint64_t sub_1D2C78734()
{
  sub_1D2C5AE40(&qword_1EFCA0030, type metadata accessor for CryptoKitSecretSharing_ShamirShareGeneratorSerialization, (uint64_t)&unk_1D2CADFD4);
  return sub_1D2CAAA20();
}

uint64_t sub_1D2C78784@<X0>(uint64_t a1@<X8>)
{
  return sub_1D2C787A0(&qword_1EFC9F6D8, (uint64_t)qword_1EFCA4B08, a1);
}

uint64_t sub_1D2C787A0@<X0>(_QWORD *a1@<X2>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;

  if (*a1 != -1)
    swift_once();
  v5 = sub_1D2CAAB34();
  v6 = __swift_project_value_buffer(v5, a2);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a3, v6, v5);
}

uint64_t sub_1D2C7880C()
{
  sub_1D2C5AE40(&qword_1ED9858A8, type metadata accessor for CryptoKitSecretSharing_ShamirShareGeneratorSerialization, (uint64_t)&unk_1D2CAE4A4);
  return sub_1D2CAAABC();
}

uint64_t sub_1D2C7884C()
{
  sub_1D2CAB134();
  sub_1D2CAADD4();
  return sub_1D2CAB158();
}

uint64_t sub_1D2C788A0()
{
  sub_1D2C5AE40(&qword_1ED9858A8, type metadata accessor for CryptoKitSecretSharing_ShamirShareGeneratorSerialization, (uint64_t)&unk_1D2CAE4A4);
  return sub_1D2CAAAC8();
}

uint64_t sub_1D2C788F0()
{
  sub_1D2CAB134();
  sub_1D2CAADD4();
  return sub_1D2CAB158();
}

uint64_t sub_1D2C78944()
{
  return sub_1D2C5AE40(&qword_1EFC9FFB0, type metadata accessor for CryptoKitSecretSharing_ShamirShareGeneratorSerialization, (uint64_t)&unk_1D2CADF1C);
}

uint64_t sub_1D2C78970()
{
  return sub_1D2C5AE40(&qword_1ED9858A8, type metadata accessor for CryptoKitSecretSharing_ShamirShareGeneratorSerialization, (uint64_t)&unk_1D2CAE4A4);
}

uint64_t sub_1D2C7899C()
{
  return sub_1D2C5AE40(&qword_1EFC9FFB8, type metadata accessor for CryptoKitSecretSharing_ShamirShareGeneratorSerialization, (uint64_t)&unk_1D2CADF44);
}

uint64_t sub_1D2C789C8()
{
  return sub_1D2C5AE40(&qword_1EFC9FFC0, type metadata accessor for CryptoKitSecretSharing_HybridSecretSharingSharedState, (uint64_t)&unk_1D2CAE034);
}

uint64_t sub_1D2C789F4()
{
  return sub_1D2C5AE40(&qword_1EFC9FFC8, type metadata accessor for CryptoKitSecretSharing_HybridSecretSharingSharedState, (uint64_t)&unk_1D2CAE124);
}

uint64_t sub_1D2C78A20()
{
  return sub_1D2C5AE40(&qword_1EFC9FFD0, type metadata accessor for CryptoKitSecretSharing_HybridSecretSharingSharedState, (uint64_t)&unk_1D2CAE05C);
}

uint64_t sub_1D2C78A4C()
{
  return sub_1D2C5AE40(&qword_1EFC9FFD8, type metadata accessor for CryptoKitSecretSharing_HybridSecretSharingSharedState, (uint64_t)&unk_1D2CAE09C);
}

uint64_t sub_1D2C78A78()
{
  return sub_1D2C5AE40(&qword_1EFC9FFE0, type metadata accessor for CryptoKitSecretSharing_HybridSecretSharingGeneratorSerialization.SealedBox, (uint64_t)&unk_1D2CAE19C);
}

uint64_t sub_1D2C78AA4()
{
  return sub_1D2C5AE40(&qword_1EFC9FFE8, type metadata accessor for CryptoKitSecretSharing_HybridSecretSharingGeneratorSerialization.SealedBox, (uint64_t)&unk_1D2CAE28C);
}

uint64_t sub_1D2C78AD0()
{
  return sub_1D2C5AE40(&qword_1EFC9FFF0, type metadata accessor for CryptoKitSecretSharing_HybridSecretSharingGeneratorSerialization.SealedBox, (uint64_t)&unk_1D2CAE1C4);
}

uint64_t sub_1D2C78AFC()
{
  return sub_1D2C5AE40(&qword_1EFC9FFF8, type metadata accessor for CryptoKitSecretSharing_HybridSecretSharingGeneratorSerialization.SealedBox, (uint64_t)&unk_1D2CAE204);
}

uint64_t sub_1D2C78B28()
{
  return sub_1D2C5AE40(&qword_1EFCA0000, type metadata accessor for CryptoKitSecretSharing_HybridSecretSharingGeneratorSerialization, (uint64_t)&unk_1D2CAE304);
}

uint64_t sub_1D2C78B54()
{
  return sub_1D2C5AE40(&qword_1EFCA0008, type metadata accessor for CryptoKitSecretSharing_HybridSecretSharingGeneratorSerialization, (uint64_t)&unk_1D2CAE42C);
}

uint64_t sub_1D2C78B80()
{
  return sub_1D2C5AE40(&qword_1EFCA0010, type metadata accessor for CryptoKitSecretSharing_HybridSecretSharingGeneratorSerialization, (uint64_t)&unk_1D2CAE32C);
}

unint64_t sub_1D2C78BB0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1EFCA0018;
  if (!qword_1EFCA0018)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EFCA0020);
    result = MEMORY[0x1D8245F38](MEMORY[0x1E0DEAF50], v1);
    atomic_store(result, (unint64_t *)&qword_1EFCA0018);
  }
  return result;
}

uint64_t sub_1D2C78BFC()
{
  return sub_1D2C5AE40(&qword_1EFCA0028, type metadata accessor for CryptoKitSecretSharing_HybridSecretSharingGeneratorSerialization, (uint64_t)&unk_1D2CAE36C);
}

uint64_t sub_1D2C78C28()
{
  return sub_1D2C5AE40(&qword_1ED9858B0, type metadata accessor for CryptoKitSecretSharing_ShamirShareGeneratorSerialization, (uint64_t)&unk_1D2CADF84);
}

uint64_t sub_1D2C78C54(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;

  v5 = __swift_instantiateConcreteTypeFromMangledName(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_1D2C78C98(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v5;

  v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t __swift_project_value_buffer(uint64_t a1, uint64_t a2)
{
  if ((*(_BYTE *)(*(_QWORD *)(a1 - 8) + 82) & 2) != 0)
    return *(_QWORD *)a2;
  return a2;
}

uint64_t *__swift_allocate_value_buffer(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  if ((*(_DWORD *)(*(_QWORD *)(a1 - 8) + 80) & 0x20000) != 0)
  {
    v3 = swift_slowAlloc();
    *a2 = v3;
    return (uint64_t *)v3;
  }
  return a2;
}

uint64_t sub_1D2C78D34(_DWORD *a1, _DWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int (*v35)(uint64_t, uint64_t, uint64_t);
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  _DWORD *v41;
  _DWORD *v42;
  char v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unsigned int (*v49)(uint64_t, uint64_t, uint64_t);
  uint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  char v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  void (*v58)(char *, uint64_t, uint64_t);
  char *v59;
  uint64_t v60;
  char *v61;
  char v62;
  void (*v63)(char *, uint64_t);
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  _DWORD *v68;
  _DWORD *v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;

  v4 = sub_1D2CAA9F0();
  v74 = *(_QWORD *)(v4 - 8);
  v75 = v4;
  v5 = MEMORY[0x1E0C80A78](v4);
  v73 = (char *)&v65 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v5);
  v72 = (char *)&v65 - v7;
  v80 = type metadata accessor for CryptoKitSecretSharing_HybridSecretSharingGeneratorSerialization.SealedBox(0);
  v77 = *(_QWORD *)(v80 - 8);
  MEMORY[0x1E0C80A78](v80);
  v71 = (uint64_t)&v65 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFCA0050);
  MEMORY[0x1E0C80A78](v9);
  v81 = (uint64_t)&v65 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFC9FF68);
  v12 = MEMORY[0x1E0C80A78](v11);
  v76 = (uint64_t *)((char *)&v65 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  v14 = MEMORY[0x1E0C80A78](v12);
  v78 = (uint64_t)&v65 - v15;
  MEMORY[0x1E0C80A78](v14);
  v79 = (uint64_t)&v65 - v16;
  v17 = type metadata accessor for CryptoKitSecretSharing_HybridSecretSharingSharedState(0);
  v18 = *(_QWORD *)(v17 - 8);
  MEMORY[0x1E0C80A78](v17);
  v82 = (uint64_t)&v65 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFCA0058);
  MEMORY[0x1E0C80A78](v20);
  v22 = (char *)&v65 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFC9FF60);
  v24 = MEMORY[0x1E0C80A78](v23);
  v25 = MEMORY[0x1E0C80A78](v24);
  v27 = (char *)&v65 - v26;
  MEMORY[0x1E0C80A78](v25);
  v30 = (char *)&v65 - v29;
  if (*a1 != *a2)
    goto LABEL_19;
  v70 = v28;
  v66 = v9;
  v31 = type metadata accessor for CryptoKitSecretSharing_HybridSecretSharingGeneratorSerialization(0);
  v32 = *(int *)(v31 + 28);
  v68 = a1;
  sub_1D2C78C54((uint64_t)a1 + v32, (uint64_t)v30, &qword_1EFC9FF60);
  v67 = v31;
  v33 = *(int *)(v31 + 28);
  v69 = a2;
  sub_1D2C78C54((uint64_t)a2 + v33, (uint64_t)v27, &qword_1EFC9FF60);
  v34 = (uint64_t)&v22[*(int *)(v20 + 48)];
  sub_1D2C78C54((uint64_t)v30, (uint64_t)v22, &qword_1EFC9FF60);
  sub_1D2C78C54((uint64_t)v27, v34, &qword_1EFC9FF60);
  v35 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v18 + 48);
  if (v35((uint64_t)v22, 1, v17) == 1)
  {
    sub_1D2C6F668((uint64_t)v27, &qword_1EFC9FF60);
    sub_1D2C6F668((uint64_t)v30, &qword_1EFC9FF60);
    if (v35(v34, 1, v17) == 1)
    {
      sub_1D2C6F668((uint64_t)v22, &qword_1EFC9FF60);
      goto LABEL_10;
    }
LABEL_7:
    v37 = &qword_1EFCA0058;
    v38 = (uint64_t)v22;
LABEL_8:
    sub_1D2C6F668(v38, v37);
    goto LABEL_19;
  }
  v36 = v70;
  sub_1D2C78C54((uint64_t)v22, v70, &qword_1EFC9FF60);
  if (v35(v34, 1, v17) == 1)
  {
    sub_1D2C6F668((uint64_t)v27, &qword_1EFC9FF60);
    sub_1D2C6F668((uint64_t)v30, &qword_1EFC9FF60);
    sub_1D2C74E48(v36, type metadata accessor for CryptoKitSecretSharing_HybridSecretSharingSharedState);
    goto LABEL_7;
  }
  v39 = v82;
  sub_1D2C78C98(v34, v82, type metadata accessor for CryptoKitSecretSharing_HybridSecretSharingSharedState);
  v40 = sub_1D2C79550(v36, v39);
  sub_1D2C74E48(v39, type metadata accessor for CryptoKitSecretSharing_HybridSecretSharingSharedState);
  sub_1D2C6F668((uint64_t)v27, &qword_1EFC9FF60);
  sub_1D2C6F668((uint64_t)v30, &qword_1EFC9FF60);
  sub_1D2C74E48(v36, type metadata accessor for CryptoKitSecretSharing_HybridSecretSharingSharedState);
  sub_1D2C6F668((uint64_t)v22, &qword_1EFC9FF60);
  if ((v40 & 1) == 0)
    goto LABEL_19;
LABEL_10:
  v42 = v68;
  v41 = v69;
  sub_1D2C59C44(*((_QWORD *)v68 + 1), *((_QWORD *)v68 + 2));
  if ((v43 & 1) == 0)
    goto LABEL_19;
  v44 = v67;
  v45 = v79;
  sub_1D2C78C54((uint64_t)v42 + *(int *)(v67 + 32), v79, &qword_1EFC9FF68);
  v46 = v78;
  sub_1D2C78C54((uint64_t)v41 + *(int *)(v44 + 32), v78, &qword_1EFC9FF68);
  v47 = v81;
  v48 = v81 + *(int *)(v66 + 48);
  sub_1D2C78C54(v45, v81, &qword_1EFC9FF68);
  sub_1D2C78C54(v46, v48, &qword_1EFC9FF68);
  v49 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v77 + 48);
  v50 = v80;
  if (v49(v47, 1, v80) != 1)
  {
    v51 = v76;
    sub_1D2C78C54(v47, (uint64_t)v76, &qword_1EFC9FF68);
    if (v49(v48, 1, v50) != 1)
    {
      v52 = v71;
      sub_1D2C78C98(v48, v71, type metadata accessor for CryptoKitSecretSharing_HybridSecretSharingGeneratorSerialization.SealedBox);
      v53 = sub_1D2C793FC(v51, v52);
      sub_1D2C74E48(v52, type metadata accessor for CryptoKitSecretSharing_HybridSecretSharingGeneratorSerialization.SealedBox);
      sub_1D2C6F668(v46, &qword_1EFC9FF68);
      sub_1D2C6F668(v45, &qword_1EFC9FF68);
      sub_1D2C74E48((uint64_t)v51, type metadata accessor for CryptoKitSecretSharing_HybridSecretSharingGeneratorSerialization.SealedBox);
      sub_1D2C6F668(v47, &qword_1EFC9FF68);
      if ((v53 & 1) != 0)
        goto LABEL_18;
LABEL_19:
      v62 = 0;
      return v62 & 1;
    }
    sub_1D2C6F668(v46, &qword_1EFC9FF68);
    sub_1D2C6F668(v45, &qword_1EFC9FF68);
    sub_1D2C74E48((uint64_t)v51, type metadata accessor for CryptoKitSecretSharing_HybridSecretSharingGeneratorSerialization.SealedBox);
    goto LABEL_16;
  }
  sub_1D2C6F668(v46, &qword_1EFC9FF68);
  sub_1D2C6F668(v45, &qword_1EFC9FF68);
  if (v49(v48, 1, v50) != 1)
  {
LABEL_16:
    v37 = &qword_1EFCA0050;
    v38 = v47;
    goto LABEL_8;
  }
  sub_1D2C6F668(v47, &qword_1EFC9FF68);
LABEL_18:
  v54 = v67;
  v55 = (uint64_t)v42 + *(int *)(v67 + 24);
  v57 = v74;
  v56 = v75;
  v58 = *(void (**)(char *, uint64_t, uint64_t))(v74 + 16);
  v59 = v72;
  v58(v72, v55, v75);
  v60 = (uint64_t)v41 + *(int *)(v54 + 24);
  v61 = v73;
  v58(v73, v60, v56);
  sub_1D2C5AE40(&qword_1EFCA0060, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
  v62 = sub_1D2CAADF8();
  v63 = *(void (**)(char *, uint64_t))(v57 + 8);
  v63(v61, v56);
  v63(v59, v56);
  return v62 & 1;
}

uint64_t sub_1D2C793FC(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  char v11;
  char v12;
  char v13;
  uint64_t v14;
  char *v15;
  void (*v16)(char *, char *, uint64_t);
  char v17;
  void (*v18)(char *, uint64_t);
  uint64_t v20;

  v4 = sub_1D2CAA9F0();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x1E0C80A78](v4);
  v8 = (char *)&v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v10 = (char *)&v20 - v9;
  sub_1D2C59C44(*a1, a1[1]);
  if ((v11 & 1) != 0 && (sub_1D2C59C44(a1[2], a1[3]), (v12 & 1) != 0) && (sub_1D2C59C44(a1[4], a1[5]), (v13 & 1) != 0))
  {
    v14 = type metadata accessor for CryptoKitSecretSharing_HybridSecretSharingGeneratorSerialization.SealedBox(0);
    v15 = (char *)a1 + *(int *)(v14 + 28);
    v16 = *(void (**)(char *, char *, uint64_t))(v5 + 16);
    v16(v10, v15, v4);
    v16(v8, (char *)(a2 + *(int *)(v14 + 28)), v4);
    sub_1D2C5AE40(&qword_1EFCA0060, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
    v17 = sub_1D2CAADF8();
    v18 = *(void (**)(char *, uint64_t))(v5 + 8);
    v18(v8, v4);
    v18(v10, v4);
  }
  else
  {
    v17 = 0;
  }
  return v17 & 1;
}

uint64_t sub_1D2C79550(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(char *, uint64_t, uint64_t);
  char v17;
  void (*v18)(char *, uint64_t);
  uint64_t v20;

  v4 = sub_1D2CAA9F0();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x1E0C80A78](v4);
  v8 = (char *)&v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v10 = (char *)&v20 - v9;
  if (*(_DWORD *)a1 != *(_DWORD *)a2)
    goto LABEL_16;
  if ((*(_BYTE *)(a1 + 16) & 1) == 0)
  {
    v11 = *(_QWORD *)(a1 + 8);
    if ((*(_BYTE *)(a2 + 16) & 1) != 0)
    {
      if (!v11)
        goto LABEL_9;
      goto LABEL_16;
    }
LABEL_8:
    if (v11 == *(_QWORD *)(a2 + 8))
      goto LABEL_9;
LABEL_16:
    v17 = 0;
    return v17 & 1;
  }
  if ((*(_BYTE *)(a2 + 16) & 1) == 0)
  {
    v11 = 0;
    goto LABEL_8;
  }
LABEL_9:
  if (*(unsigned __int8 *)(a1 + 17) != *(unsigned __int8 *)(a2 + 17))
    goto LABEL_16;
  if (*(_DWORD *)(a1 + 20) != *(_DWORD *)(a2 + 20))
    goto LABEL_16;
  if (*(unsigned __int8 *)(a1 + 24) != *(unsigned __int8 *)(a2 + 24))
    goto LABEL_16;
  sub_1D2C59C44(*(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40));
  if ((v12 & 1) == 0)
    goto LABEL_16;
  if (*(unsigned __int8 *)(a1 + 48) != *(unsigned __int8 *)(a2 + 48))
    goto LABEL_16;
  sub_1D2C59C44(*(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64));
  if ((v13 & 1) == 0)
    goto LABEL_16;
  v14 = type metadata accessor for CryptoKitSecretSharing_HybridSecretSharingSharedState(0);
  v15 = a1 + *(int *)(v14 + 48);
  v16 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  v16(v10, v15, v4);
  v16(v8, a2 + *(int *)(v14 + 48), v4);
  sub_1D2C5AE40(&qword_1EFCA0060, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
  v17 = sub_1D2CAADF8();
  v18 = *(void (**)(char *, uint64_t))(v5 + 8);
  v18(v8, v4);
  v18(v10, v4);
  return v17 & 1;
}

unint64_t sub_1D2C79718()
{
  unint64_t result;

  result = qword_1EFCA0078;
  if (!qword_1EFCA0078)
  {
    result = MEMORY[0x1D8245F38](&unk_1D2CAE5C8, &type metadata for CryptoKitSecretSharing_HybridSecretSharingSharedState.Ciphersuite);
    atomic_store(result, (unint64_t *)&qword_1EFCA0078);
  }
  return result;
}

uint64_t sub_1D2C7975C(uint64_t a1, char *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  char v11;
  uint64_t v12;
  char *v13;
  void (*v14)(char *, char *, uint64_t);
  char v15;
  void (*v16)(char *, uint64_t);
  uint64_t v18;

  v4 = sub_1D2CAA9F0();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x1E0C80A78](v4);
  v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v10 = (char *)&v18 - v9;
  if (*(_DWORD *)a1 == *(_DWORD *)a2
    && *(_DWORD *)(a1 + 4) == *((_DWORD *)a2 + 1)
    && *(_DWORD *)(a1 + 8) == *((_DWORD *)a2 + 2)
    && (sub_1D2C59C44(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24)), (v11 & 1) != 0))
  {
    v12 = type metadata accessor for CryptoKitSecretSharing_ShamirShareGeneratorSerialization(0);
    v13 = (char *)(a1 + *(int *)(v12 + 32));
    v14 = *(void (**)(char *, char *, uint64_t))(v5 + 16);
    v14(v10, v13, v4);
    v14(v8, &a2[*(int *)(v12 + 32)], v4);
    sub_1D2C5AE40(&qword_1EFCA0060, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
    v15 = sub_1D2CAADF8();
    v16 = *(void (**)(char *, uint64_t))(v5 + 8);
    v16(v8, v4);
    v16(v10, v4);
  }
  else
  {
    v15 = 0;
  }
  return v15 & 1;
}

uint64_t __swift_memcpy9_8(uint64_t result, uint64_t *a2)
{
  uint64_t v2;

  v2 = *a2;
  *(_BYTE *)(result + 8) = *((_BYTE *)a2 + 8);
  *(_QWORD *)result = v2;
  return result;
}

uint64_t getEnumTagSinglePayload for CryptoKitSecretSharing_HybridSecretSharingSharedState.Ciphersuite(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 9))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for CryptoKitSecretSharing_HybridSecretSharingSharedState.Ciphersuite(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)result = 0;
    *(_BYTE *)(result + 8) = 0;
    *(_DWORD *)result = a2 - 1;
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 9) = v3;
  return result;
}

uint64_t sub_1D2C79924(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 8))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t sub_1D2C79940(uint64_t result, int a2)
{
  if (a2)
  {
    *(_QWORD *)result = (a2 - 1);
    *(_BYTE *)(result + 8) = 1;
  }
  else
  {
    *(_BYTE *)(result + 8) = 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for CryptoKitSecretSharing_HybridSecretSharingSharedState.Ciphersuite()
{
  return &type metadata for CryptoKitSecretSharing_HybridSecretSharingSharedState.Ciphersuite;
}

unint64_t sub_1D2C79974()
{
  unint64_t result;

  result = qword_1EFCA0080;
  if (!qword_1EFCA0080)
  {
    result = MEMORY[0x1D8245F38](&unk_1D2CAE528, &type metadata for CryptoKitSecretSharing_HybridSecretSharingSharedState.Ciphersuite);
    atomic_store(result, (unint64_t *)&qword_1EFCA0080);
  }
  return result;
}

unint64_t sub_1D2C799BC()
{
  unint64_t result;

  result = qword_1EFCA0088;
  if (!qword_1EFCA0088)
  {
    result = MEMORY[0x1D8245F38](&unk_1D2CAE550, &type metadata for CryptoKitSecretSharing_HybridSecretSharingSharedState.Ciphersuite);
    atomic_store(result, (unint64_t *)&qword_1EFCA0088);
  }
  return result;
}

unint64_t sub_1D2C79A04()
{
  unint64_t result;

  result = qword_1EFCA0090[0];
  if (!qword_1EFCA0090[0])
  {
    result = MEMORY[0x1D8245F38](&unk_1D2CAE590, &type metadata for CryptoKitSecretSharing_HybridSecretSharingSharedState.Ciphersuite);
    atomic_store(result, qword_1EFCA0090);
  }
  return result;
}

ValueMetadata *type metadata accessor for KVAC()
{
  return &type metadata for KVAC;
}

uint64_t getEnumTagSinglePayload for KVAC.Errors(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFF)
    goto LABEL_17;
  if (a2 + 1 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 1) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 1;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 1;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 1;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 2;
  v8 = v6 - 2;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for KVAC.Errors(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1D2C79B34 + 4 * byte_1D2CAE615[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1D2C79B68 + 4 * byte_1D2CAE610[v4]))();
}

uint64_t sub_1D2C79B68(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1D2C79B70(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1D2C79B78);
  return result;
}

uint64_t sub_1D2C79B84(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1D2C79B8CLL);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1D2C79B90(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1D2C79B98(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

_BYTE *sub_1D2C79BA4(_BYTE *result, char a2)
{
  *result = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for KVAC.Errors()
{
  return &type metadata for KVAC.Errors;
}

uint64_t type metadata accessor for KVAC.Ciphersuite(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for KVAC.Ciphersuite);
}

unint64_t sub_1D2C79BD0()
{
  unint64_t result;

  result = qword_1EFCA0118[0];
  if (!qword_1EFCA0118[0])
  {
    result = MEMORY[0x1D8245F38](&unk_1D2CAE6A0, &type metadata for KVAC.Errors);
    atomic_store(result, qword_1EFCA0118);
  }
  return result;
}

BOOL sub_1D2C79C14(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

uint64_t type metadata accessor for CorecryptoCurvePoint(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for CorecryptoCurvePoint);
}

uint64_t type metadata accessor for CoreCryptoGroupScalar(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for CoreCryptoGroupScalar);
}

uint64_t sub_1D2C79C44()
{
  return swift_allocateGenericValueMetadata();
}

uint64_t type metadata accessor for CoreCryptoHash2Curve(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for CoreCryptoHash2Curve);
}

void sub_1D2C79C58()
{
  JUMPOUT(0x1D8245F38);
}

void sub_1D2C79C68()
{
  JUMPOUT(0x1D8245F38);
}

uint64_t sub_1D2C79C78()
{
  return swift_getAssociatedConformanceWitness();
}

void sub_1D2C79C94()
{
  JUMPOUT(0x1D8245F38);
}

void sub_1D2C79CA4(void *a1)
{
  id v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;

  v1 = objc_msgSend(a1, sel_serializedBigEndianScalar);
  if (v1)
  {
    v2 = v1;
    sub_1D2CAA96C();
    v4 = v3;

    __asm { BR              X10 }
  }
  sub_1D2CAB05C();
  __break(1u);
  JUMPOUT(0x1D2C79E78);
}

void sub_1D2C79E88()
{
  void **v0;

  sub_1D2C79CA4(*v0);
}

_UNKNOWN **sub_1D2C79E90()
{
  return &off_1E943F920;
}

uint64_t sub_1D2C79E9C(uint64_t a1)
{
  uint64_t result;

  result = MEMORY[0x1D8245F38](&unk_1D2CAE828);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

void sub_1D2C79EC8(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = sub_1D2CAA990();
  MEMORY[0x1E0C80A78](v3);
  __asm { BR              X10 }
}

uint64_t sub_1D2C79F58()
{
  uint64_t v0;
  uint64_t *v1;
  char **v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int v7;
  uint64_t v8;
  char v9;
  char *v10;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;

  sub_1D2C45028(v4, v3);
  sub_1D2C45028(v4, v3);
  sub_1D2CAA99C();
  sub_1D2C45258(v4, v3);
  sub_1D2C7A0F0();
  sub_1D2CAAFA8();
  if ((*(_BYTE *)(v5 - 65) & 1) == 0)
  {
    v7 = *(unsigned __int8 *)(v5 - 66);
    do
    {
      v8 = *v1;
      if (*v1 + 0x4000000000000000 < 0)
        goto LABEL_21;
      if (v7 <= 0x9F)
        v9 = (v7 >> 4) | 0x30;
      else
        v9 = (v7 >> 4) + 87;
      v10 = *v2;
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      *v2 = v10;
      if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      {
        v12 = 2 * v8;
        if (2 * v8 < 0)
          goto LABEL_20;
      }
      else
      {
        v10 = sub_1D2C535CC((uint64_t)v10);
        v12 = 2 * v8;
        if (2 * v8 < 0)
        {
LABEL_20:
          __break(1u);
LABEL_21:
          __break(1u);
LABEL_22:
          __break(1u);
LABEL_23:
          __break(1u);
LABEL_24:
          __break(1u);
          JUMPOUT(0x1D2C7A0E0);
        }
      }
      v13 = *((_QWORD *)v10 + 2);
      if (v12 >= v13)
        goto LABEL_22;
      v10[v12 + 32] = v9;
      v14 = *v1;
      if (*v1 + 0x4000000000000000 < 0)
        goto LABEL_23;
      if (v14 < 0)
        goto LABEL_24;
      v15 = (2 * v14) | 1;
      if (v15 >= (uint64_t)v13)
        goto LABEL_24;
      if ((v7 & 0xF) <= 9)
        v16 = v7 & 0xF | 0x30;
      else
        v16 = (v7 & 0xF) + 87;
      v10[v15 + 32] = v16;
      *v2 = v10;
      *v1 = v14 + 1;
      sub_1D2CAAFA8();
      v7 = *(unsigned __int8 *)(v5 - 66);
    }
    while (*(_BYTE *)(v5 - 65) != 1);
  }
  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)(v5 - 104) + 8))(v0, *(_QWORD *)(v5 - 88));
}

unint64_t sub_1D2C7A0F0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1ED985C88[0];
  if (!qword_1ED985C88[0])
  {
    v1 = sub_1D2CAA990();
    result = MEMORY[0x1D8245F38](MEMORY[0x1E0CB02D0], v1);
    atomic_store(result, qword_1ED985C88);
  }
  return result;
}

uint64_t type metadata accessor for CoreCryptoGroup(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for CoreCryptoGroup);
}

unint64_t sub_1D2C7A144(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  id v6;
  unint64_t result;
  char v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;

  if (!*(_QWORD *)(a1 + 16))
  {
    v2 = (_QWORD *)MEMORY[0x1E0DEE9E0];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EFCA0258);
  v2 = (_QWORD *)sub_1D2CAB098();
  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  v4 = (uint64_t *)(a1 + 40);
  while (1)
  {
    v5 = *v4;
    v6 = (id)*(v4 - 1);
    swift_unknownObjectRetain();
    result = sub_1D2C7A880((uint64_t)v6);
    if ((v8 & 1) != 0)
      break;
    *(_QWORD *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v9 = 8 * result;
    *(_QWORD *)(v2[6] + v9) = v6;
    *(_QWORD *)(v2[7] + v9) = v5;
    v10 = v2[2];
    v11 = __OFADD__(v10, 1);
    v12 = v10 + 1;
    if (v11)
      goto LABEL_11;
    v2[2] = v12;
    v4 += 2;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1D2C7A24C(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t result;
  char v9;
  uint64_t *v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;

  if (!*(_QWORD *)(a1 + 16))
  {
    v2 = (_QWORD *)MEMORY[0x1E0DEE9E0];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EFCA0250);
  v2 = (_QWORD *)sub_1D2CAB098();
  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  v4 = (uint64_t *)(a1 + 48);
  while (1)
  {
    v5 = *(v4 - 2);
    v6 = *(v4 - 1);
    v7 = *v4;
    sub_1D2CAAF0C();
    swift_unknownObjectRetain();
    result = sub_1D2C7A8F0(v5, v6);
    if ((v9 & 1) != 0)
      break;
    *(_QWORD *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v10 = (uint64_t *)(v2[6] + 16 * result);
    *v10 = v5;
    v10[1] = v6;
    *(_QWORD *)(v2[7] + 8 * result) = v7;
    v11 = v2[2];
    v12 = __OFADD__(v11, 1);
    v13 = v11 + 1;
    if (v12)
      goto LABEL_11;
    v2[2] = v13;
    v4 += 3;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

void SecureEnclave.P256.KeyAgreement.PrivateKey.init(from:)(__SecKey *a1)
{
  sub_1D2C7A470(a1, MEMORY[0x1E0CA9408]);
}

unint64_t sub_1D2C7A380()
{
  unint64_t result;

  result = qword_1EFCA0220;
  if (!qword_1EFCA0220)
  {
    result = MEMORY[0x1D8245F38](&unk_1D2CAE910, &type metadata for SecKeySEPInteropErrors);
    atomic_store(result, (unint64_t *)&qword_1EFCA0220);
  }
  return result;
}

unint64_t sub_1D2C7A3C4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1EFCA0230;
  if (!qword_1EFCA0230)
  {
    v1 = sub_1D2C7A41C(255, &qword_1EFCA0228);
    result = MEMORY[0x1D8245F38](MEMORY[0x1E0DEFCF8], v1);
    atomic_store(result, (unint64_t *)&qword_1EFCA0230);
  }
  return result;
}

uint64_t sub_1D2C7A41C(uint64_t a1, unint64_t *a2)
{
  uint64_t result;

  result = *a2;
  if (!*a2)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, a2);
  }
  return result;
}

void SecureEnclave.P256.Signing.PrivateKey.init(from:)(__SecKey *a1)
{
  sub_1D2C7A470(a1, MEMORY[0x1E0CA9428]);
}

void sub_1D2C7A470(__SecKey *a1, void (*a2)(uint64_t, uint64_t, unint64_t, _QWORD))
{
  CFDictionaryRef v4;
  CFDictionaryRef v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  _BYTE *v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  void *v15;
  _BYTE *v16;
  unint64_t v17;
  char v18;
  uint64_t inited;
  uint64_t v20;
  unint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(uint64_t, uint64_t, unint64_t, _QWORD);

  v4 = SecKeyCopyAttributes(a1);
  if (!v4)
  {
    sub_1D2C7A380();
    swift_allocError();
    *v10 = 0;
    swift_willThrow();
LABEL_25:

    return;
  }
  v5 = v4;
  sub_1D2C7A41C(0, &qword_1EFCA0228);
  sub_1D2C7A3C4();
  v6 = sub_1D2CAADC8();
  v7 = sub_1D2CAAE04();
  v8 = (void *)v7;
  if ((v6 & 0xC000000000000001) != 0)
  {
    v26 = a2;
    v9 = sub_1D2CAB050();

    swift_bridgeObjectRelease();
    if (!v9)
      goto LABEL_13;
  }
  else
  {
    if (!*(_QWORD *)(v6 + 16) || (sub_1D2C7A954(v7), (v11 & 1) == 0))
    {

      swift_bridgeObjectRelease();
LABEL_13:
      sub_1D2C7A380();
      swift_allocError();
      *v16 = 1;
      swift_willThrow();
LABEL_24:

      goto LABEL_25;
    }
    v26 = a2;
    swift_unknownObjectRetain();

    swift_bridgeObjectRelease();
  }
  v12 = sub_1D2CAADC8();
  v13 = sub_1D2CAAE04();
  v14 = (void *)v13;
  if ((v12 & 0xC000000000000001) != 0)
  {
    v15 = (void *)sub_1D2CAB050();

    swift_bridgeObjectRelease();
    if (!v15)
      goto LABEL_22;
  }
  else
  {
    if (!*(_QWORD *)(v12 + 16) || (v17 = sub_1D2C7A954(v13), (v18 & 1) == 0))
    {

      swift_bridgeObjectRelease();
      goto LABEL_22;
    }
    v15 = *(void **)(*(_QWORD *)(v12 + 56) + 8 * v17);
    swift_unknownObjectRetain();

    swift_bridgeObjectRelease();
  }
  if ((objc_msgSend(v15, sel_respondsToSelector_, sel_BOOLValue, v26) & 1) != 0)
  {
    if (objc_msgSend(v15, sel_BOOLValue))
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EFCA0238);
      inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_1D2CACF70;
      *(_QWORD *)(inited + 32) = sub_1D2CAAE10();
      *(_QWORD *)(inited + 40) = v20;
      sub_1D2C7A41C(0, &qword_1EFCA0240);
      *(_QWORD *)(inited + 48) = sub_1D2CAAF78();
      v21 = sub_1D2C7A24C(inited);
      swift_unknownObjectRelease();
LABEL_23:
      swift_unknownObjectRetain();
      objc_opt_self();
      v22 = (void *)swift_dynamicCastObjCClassUnconditional();
      v23 = sub_1D2CAA96C();
      v25 = v24;

      v26(v23, v25, v21, 0);
      swift_unknownObjectRelease();
      goto LABEL_24;
    }
    swift_unknownObjectRelease();
LABEL_22:
    v21 = 0;
    goto LABEL_23;
  }
  __break(1u);
}

void SecureEnclave.P384.KeyAgreement.PrivateKey.init(from:)(__SecKey *a1)
{
  sub_1D2C7A470(a1, MEMORY[0x1E0CA9430]);
}

void SecureEnclave.P384.Signing.PrivateKey.init(from:)(__SecKey *a1)
{
  sub_1D2C7A470(a1, MEMORY[0x1E0CA9438]);
}

void SecureEnclave.Curve25519.KeyAgreement.PrivateKey.init(from:)(__SecKey *a1)
{
  sub_1D2C7A470(a1, MEMORY[0x1E0CA93D8]);
}

void SecureEnclave.Curve25519.Signing.PrivateKey.init(from:)(__SecKey *a1)
{
  sub_1D2C7A470(a1, MEMORY[0x1E0CA93F8]);
}

unint64_t sub_1D2C7A84C(unsigned int a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = MEMORY[0x1D82454C4](*(_QWORD *)(v1 + 40), a1, 4);
  return sub_1D2C7AA98(a1, v3);
}

unint64_t sub_1D2C7A880(uint64_t a1)
{
  uint64_t v2;

  sub_1D2CAB134();
  type metadata accessor for CFString(0);
  sub_1D2C7AE54();
  sub_1D2CAA9C0();
  v2 = sub_1D2CAB158();
  return sub_1D2C7AB34(a1, v2);
}

unint64_t sub_1D2C7A8F0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_1D2CAB134();
  sub_1D2CAAE64();
  v4 = sub_1D2CAB158();
  return sub_1D2C7AC5C(a1, a2, v4);
}

unint64_t sub_1D2C7A954(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_1D2CAAF84();
  return sub_1D2C7AD3C(a1, v2);
}

uint64_t storeEnumTagSinglePayload for SecKeySEPInteropErrors(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1D2C7A9D0 + 4 * byte_1D2CAE885[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1D2C7AA04 + 4 * byte_1D2CAE880[v4]))();
}

uint64_t sub_1D2C7AA04(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1D2C7AA0C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1D2C7AA14);
  return result;
}

uint64_t sub_1D2C7AA20(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1D2C7AA28);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1D2C7AA2C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1D2C7AA34(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for SecKeySEPInteropErrors()
{
  return &type metadata for SecKeySEPInteropErrors;
}

unint64_t sub_1D2C7AA54()
{
  unint64_t result;

  result = qword_1EFCA0248;
  if (!qword_1EFCA0248)
  {
    result = MEMORY[0x1D8245F38](&unk_1D2CAE8E8, &type metadata for SecKeySEPInteropErrors);
    atomic_store(result, (unint64_t *)&qword_1EFCA0248);
  }
  return result;
}

unint64_t sub_1D2C7AA98(int a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  unint64_t result;
  uint64_t v7;
  uint64_t v8;

  v4 = v2 + 64;
  v5 = -1 << *(_BYTE *)(v2 + 32);
  result = a2 & ~v5;
  if (((*(_QWORD *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0)
  {
    v7 = *(_QWORD *)(v2 + 48);
    if (*(_DWORD *)(v7 + 4 * result) != a1)
    {
      v8 = ~v5;
      for (result = (result + 1) & v8;
            ((*(_QWORD *)(v4 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0;
            result = (result + 1) & v8)
      {
        if (*(_DWORD *)(v7 + 4 * result) == a1)
          break;
      }
    }
  }
  return result;
}

unint64_t sub_1D2C7AB34(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t i;
  void *v6;
  id v7;
  char v8;
  uint64_t v9;
  id v10;
  char v11;

  v3 = v2 + 64;
  v4 = -1 << *(_BYTE *)(v2 + 32);
  i = a2 & ~v4;
  if (((*(_QWORD *)(v2 + 64 + ((i >> 3) & 0xFFFFFFFFFFFFF8)) >> i) & 1) != 0)
  {
    type metadata accessor for CFString(0);
    v6 = *(void **)(*(_QWORD *)(v2 + 48) + 8 * i);
    sub_1D2C7AE54();
    v7 = v6;
    v8 = sub_1D2CAA9B4();

    if ((v8 & 1) == 0)
    {
      v9 = ~v4;
      for (i = (i + 1) & v9; ((*(_QWORD *)(v3 + ((i >> 3) & 0xFFFFFFFFFFFFF8)) >> i) & 1) != 0; i = (i + 1) & v9)
      {
        v10 = *(id *)(*(_QWORD *)(v2 + 48) + 8 * i);
        v11 = sub_1D2CAA9B4();

        if ((v11 & 1) != 0)
          break;
      }
    }
  }
  return i;
}

unint64_t sub_1D2C7AC5C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v9;
  _QWORD *v10;
  BOOL v11;
  uint64_t v12;
  _QWORD *v13;
  BOOL v14;

  v4 = v3 + 64;
  v5 = -1 << *(_BYTE *)(v3 + 32);
  v6 = a3 & ~v5;
  if (((*(_QWORD *)(v3 + 64 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0)
  {
    v9 = *(_QWORD *)(v3 + 48);
    v10 = (_QWORD *)(v9 + 16 * v6);
    v11 = *v10 == a1 && v10[1] == a2;
    if (!v11 && (sub_1D2CAB0BC() & 1) == 0)
    {
      v12 = ~v5;
      do
      {
        v6 = (v6 + 1) & v12;
        if (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) == 0)
          break;
        v13 = (_QWORD *)(v9 + 16 * v6);
        v14 = *v13 == a1 && v13[1] == a2;
      }
      while (!v14 && (sub_1D2CAB0BC() & 1) == 0);
    }
  }
  return v6;
}

unint64_t sub_1D2C7AD3C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t i;
  id v6;
  char v7;
  uint64_t v8;
  id v9;
  char v10;

  v3 = v2 + 64;
  v4 = -1 << *(_BYTE *)(v2 + 32);
  i = a2 & ~v4;
  if (((*(_QWORD *)(v2 + 64 + ((i >> 3) & 0xFFFFFFFFFFFFF8)) >> i) & 1) != 0)
  {
    sub_1D2C7A41C(0, &qword_1EFCA0228);
    v6 = *(id *)(*(_QWORD *)(v2 + 48) + 8 * i);
    v7 = sub_1D2CAAF90();

    if ((v7 & 1) == 0)
    {
      v8 = ~v4;
      for (i = (i + 1) & v8; ((*(_QWORD *)(v3 + ((i >> 3) & 0xFFFFFFFFFFFFF8)) >> i) & 1) != 0; i = (i + 1) & v8)
      {
        v9 = *(id *)(*(_QWORD *)(v2 + 48) + 8 * i);
        v10 = sub_1D2CAAF90();

        if ((v10 & 1) != 0)
          break;
      }
    }
  }
  return i;
}

unint64_t sub_1D2C7AE54()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1EFC9FE20;
  if (!qword_1EFC9FE20)
  {
    type metadata accessor for CFString(255);
    result = MEMORY[0x1D8245F38](&unk_1D2CAC7CC, v1);
    atomic_store(result, (unint64_t *)&qword_1EFC9FE20);
  }
  return result;
}

unint64_t sub_1D2C7AE9C(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  unsigned int v4;
  uint64_t v5;
  unint64_t result;
  char v7;
  _QWORD *v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  char v14;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return MEMORY[0x1E0DEE9E0];
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EFCA0260);
  v3 = (_QWORD *)sub_1D2CAB098();
  v4 = *(_DWORD *)(a1 + 32);
  v5 = *(_QWORD *)(a1 + 40);
  result = sub_1D2C7A84C(v4);
  if ((v7 & 1) != 0)
  {
LABEL_7:
    __break(1u);
LABEL_8:
    sub_1D2CAAF0C();
    return (unint64_t)v3;
  }
  v8 = (_QWORD *)(a1 + 56);
  while (1)
  {
    *(_QWORD *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    *(_DWORD *)(v3[6] + 4 * result) = v4;
    *(_QWORD *)(v3[7] + 8 * result) = v5;
    v9 = v3[2];
    v10 = __OFADD__(v9, 1);
    v11 = v9 + 1;
    if (v10)
      break;
    v3[2] = v11;
    if (!--v1)
      goto LABEL_8;
    v12 = v8 + 2;
    v4 = *((_DWORD *)v8 - 2);
    v13 = *v8;
    sub_1D2CAAF0C();
    result = sub_1D2C7A84C(v4);
    v8 = v12;
    v5 = v13;
    if ((v14 & 1) != 0)
      goto LABEL_7;
  }
  __break(1u);
  return result;
}

id Scrypt.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

id Scrypt.init()()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for Scrypt();
  return objc_msgSendSuper2(&v2, sel_init);
}

id Scrypt.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for Scrypt();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t _s16CryptoKitPrivate6ScryptC9deriveKey8password4salt10outputSize4cost05blockJ015parallelizationSo6NSDataCSgAL_AMSis6UInt64Vs6UInt32VAQtFZ_0(void *a1, void *a2, size_t a3)
{
  uint64_t result;
  size_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  id v11;

  result = ccscrypt_storage_size();
  if (result < 0)
  {
    __break(1u);
    return result;
  }
  v7 = result;
  if (result)
  {
    v8 = sub_1D2CAAF30();
    *(_QWORD *)(v8 + 16) = v7;
    bzero((void *)(v8 + 32), v7);
    if ((a3 & 0x8000000000000000) == 0)
      goto LABEL_4;
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  if ((a3 & 0x8000000000000000) != 0)
    goto LABEL_7;
LABEL_4:
  if (!a3)
  {
LABEL_8:
    v9 = MEMORY[0x1E0DEE9D8];
    goto LABEL_9;
  }
  v9 = sub_1D2CAAF30();
  *(_QWORD *)(v9 + 16) = a3;
  bzero((void *)(v9 + 32), a3);
LABEL_9:
  objc_msgSend(a1, sel_length);
  objc_msgSend(objc_retainAutorelease(a1), sel_bytes);
  if (a2)
  {
    objc_msgSend(a2, sel_length);
    objc_msgSend(objc_retainAutorelease(a2), sel_bytes);
  }
  sub_1D2CAAF0C();
  sub_1D2CAAF0C();
  v10 = ccscrypt();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();
  if (v10)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else
  {
    v11 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0C99D50]), sel_initWithBytes_length_, v9 + 32, a3, a3, v9 + 32);
    swift_bridgeObjectRelease();
  }
  return (uint64_t)v11;
}

uint64_t type metadata accessor for Scrypt()
{
  return objc_opt_self();
}

uint64_t PIR.KeywordPirClient.init(pirParams:hashFunctionCount:secretKey:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  char v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unsigned __int8 v47;
  char v48;
  int v49;
  char v50;
  char v51[2];

  v5 = v4;
  v7 = *(_BYTE *)result;
  v8 = *(_BYTE *)(result + 1);
  v9 = *(_QWORD *)(result + 8);
  v10 = *(_QWORD *)(result + 16);
  v11 = *(_QWORD *)(result + 24);
  v13 = *(_QWORD *)(result + 40);
  v12 = *(_QWORD *)(result + 48);
  v14 = *(_BYTE *)(result + 56);
  v15 = *(_BYTE *)(result + 57);
  v17 = *a3;
  v16 = a3[1];
  if (*(_BYTE *)(result + 2) != 2)
  {
    v32 = *(_BYTE *)(result + 2);
    v33 = *(_BYTE *)(result + 57);
    v49 = *(unsigned __int8 *)(result + 56);
    v34 = v12;
    v35 = v10;
    v36 = v9;
    v37 = a4;
    v23 = *(_QWORD *)(result + 32);
    LOBYTE(v40) = v7;
    BYTE1(v40) = v8;
    _s12ParamContextCMa();
    swift_allocObject();
    sub_1D2CAAF0C();
    sub_1D2C6BC3C((uint64_t)&v40);
    if (v4)
    {
      sub_1D2C45258(v17, v16);
      return swift_bridgeObjectRelease_n();
    }
    v25 = v24;
    v31 = v23;
    v40 = v17;
    v41 = v16;
    goto LABEL_9;
  }
  v51[0] = *(_BYTE *)result;
  v51[1] = v8;
  v50 = 2;
  v18 = v13 * a2;
  if ((unsigned __int128)(v13 * (__int128)a2) >> 64 == (v13 * a2) >> 63)
  {
    v38 = v16;
    v19 = v9;
    v20 = v10;
    v21 = v12;
    v22 = v14;
    sub_1D2CAAF0C();
    PIR.PirParams.init(encryptionParams:algorithm:entriesCount:entrySize:dimensions:batchSize:internalBatchSize:compressResponse:)(v51, &v50, v19, v20, v11, v18, v21, v22, (uint64_t)&v40, v15);
    if (v5)
    {
      sub_1D2C45258(v17, v38);
      return swift_bridgeObjectRelease();
    }
    v37 = a4;
    swift_bridgeObjectRelease();
    v7 = v40;
    v8 = BYTE1(v40);
    v26 = BYTE2(v40);
    v11 = v43;
    v35 = v42;
    v36 = v41;
    v27 = v44;
    v13 = v45;
    v34 = v46;
    v49 = v47;
    v33 = v48;
    _s12ParamContextCMa();
    swift_allocObject();
    sub_1D2CAAF0C();
    sub_1D2C6BC3C((uint64_t)&v40);
    v25 = v28;
    v32 = v26;
    v31 = v27;
    v40 = v17;
    v41 = v38;
LABEL_9:
    swift_retain_n();
    sub_1D2C90FBC((uint64_t)&v40, v25);
    v30 = v29;
    sub_1D2CAAF0C();
    swift_release();
    result = swift_bridgeObjectRelease_n();
    *(_QWORD *)v37 = a2;
    *(_BYTE *)(v37 + 8) = v7;
    *(_BYTE *)(v37 + 9) = v8;
    *(_BYTE *)(v37 + 10) = v32;
    *(_QWORD *)(v37 + 16) = v36;
    *(_QWORD *)(v37 + 24) = v35;
    *(_QWORD *)(v37 + 32) = v11;
    *(_QWORD *)(v37 + 40) = v31;
    *(_QWORD *)(v37 + 48) = v13;
    *(_QWORD *)(v37 + 56) = v34;
    *(_BYTE *)(v37 + 64) = v49;
    *(_BYTE *)(v37 + 65) = v33;
    *(_QWORD *)(v37 + 72) = v25;
    *(_QWORD *)(v37 + 80) = v30;
    return result;
  }
  __break(1u);
  return result;
}

unint64_t PIR.KeywordPirClient.generateGaloisKey()@<X0>(_QWORD *a1@<X8>)
{
  return PIR.IndexPirClient.generateGaloisKey()(a1);
}

uint64_t PIR.KeywordPirClient.generateRelinKey()@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(_QWORD *)(v1 + 80);
  swift_retain();
  swift_retain();
  return sub_1D2C9C1E4(v3, a1);
}

char *PIR.KeywordPirClient.query(keyword:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  char v4;
  char v5;
  int v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  char v21;
  char v22;
  uint64_t v23;
  char v24;
  char v25;
  char v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  v3 = *(_QWORD *)v2;
  v4 = *(_BYTE *)(v2 + 8);
  v5 = *(_BYTE *)(v2 + 9);
  v6 = *(unsigned __int8 *)(v2 + 10);
  v8 = *(_QWORD *)(v2 + 16);
  v7 = *(_QWORD *)(v2 + 24);
  v10 = *(_QWORD *)(v2 + 32);
  v9 = *(_QWORD *)(v2 + 40);
  v11 = *(_QWORD *)(v2 + 48);
  v20 = *(_QWORD *)(v2 + 56);
  v21 = *(_BYTE *)(v2 + 64);
  v22 = *(_BYTE *)(v2 + 65);
  v12 = *(_QWORD *)(v2 + 72);
  v13 = *(_QWORD *)(v2 + 80);
  v23 = v12;
  v14 = sub_1D2C4C2CC(a1, a2, v8, v3);
  v15 = v14;
  if (v6 == 2)
  {
    v24 = v4;
    v25 = v5;
    v26 = 2;
    v27 = v8;
    v28 = v7;
    v29 = v10;
    v30 = v9;
    v31 = v11;
    v32 = v20;
    v33 = v21;
    v34 = v22;
    v35 = v23;
    v36 = v13;
    sub_1D2CAAF0C();
    swift_retain();
    swift_retain();
    v16 = (char *)sub_1D2C98CEC(v15);
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
  }
  else
  {
    v24 = v4;
    v25 = v5;
    v26 = v6;
    v27 = v8;
    v28 = v7;
    v29 = v10;
    v30 = v9;
    v31 = v11;
    v32 = v20;
    v33 = v21;
    v34 = v22;
    v35 = v23;
    v36 = v13;
    v16 = &v24;
    v17 = v37;
    v18 = sub_1D2C99104((uint64_t)v14);
    if (!v17)
      return (char *)v18;
  }
  return v16;
}

_QWORD *PIR.KeywordPirClient.decrypt(replies:keyword:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;
  unsigned int v8;
  unint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v19;
  uint64_t v20;

  v7 = *(_QWORD *)v3;
  v8 = *(unsigned __int8 *)(v3 + 10);
  v9 = *(_QWORD *)(v3 + 16);
  v10 = *(_QWORD **)(v3 + 80);
  v19 = sub_1D2C4C2CC(a2, a3, v9, v7);
  sub_1D2C4BF98(a2, a3);
  if (v8 > 1)
  {
    if (!*(_QWORD *)(a1 + 16))
    {
      __break(1u);
      __break(1u);
      JUMPOUT(0x1D2C7D050);
    }
    v15 = *(_QWORD *)(a1 + 32);
    sub_1D2CAAF0C();
    swift_retain();
    swift_retain();
    sub_1D2CAAF0C();
    v11 = v10;
    v16 = PIR.IndexPirClient.decryptVectorizedPirReply(reply:indices:)(v15, (uint64_t)v19);
    if (v20)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
      swift_bridgeObjectRelease();
      return v11;
    }
    v17 = v16;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    if (*(_QWORD *)(v17 + 16))
      __asm { BR              X9 }
LABEL_12:
    swift_bridgeObjectRelease();
    return 0;
  }
  if (!*(_QWORD *)(a1 + 16) || !*((_QWORD *)v19 + 2))
    goto LABEL_12;
  v11 = *(_QWORD **)(a1 + 32);
  sub_1D2CAAF0C();
  sub_1D2CAAF0C();
  v12 = *((_QWORD *)v19 + 4);
  sub_1D2CAAF0C();
  swift_retain();
  swift_retain();
  PIR.IndexPirClient.decrypt(reply:index:)(v11, v12);
  if (!v20)
  {
    v14 = v13;
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    __asm { BR              X9 }
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v11;
}

void sub_1D2C7D114(uint64_t a1)
{
  __asm { BR              X13 }
}

uint64_t sub_1D2C7D17C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  unint64_t v12;
  uint64_t v13;
  unsigned int v14;
  unsigned __int8 v15;
  unsigned __int8 v16;
  unsigned __int8 v17;

  v13 = v5;
  LOWORD(v14) = v4;
  BYTE2(v14) = BYTE2(v4);
  HIBYTE(v14) = BYTE3(v4);
  v15 = BYTE4(v4);
  v16 = BYTE5(v4);
  v17 = BYTE6(v4);
  v9 = *v8;
  v10 = *v8 + v7;
  if (__OFADD__(*v8, v7))
  {
    __break(1u);
    JUMPOUT(0x1D2C7D35CLL);
  }
  if (v10 < v9)
  {
    __break(1u);
    JUMPOUT(0x1D2C7D368);
  }
  result = sub_1D2C571B8(v9, v10, a3, a4, (uint64_t)&v13);
  v12 = v14 | ((unint64_t)v15 << 32) | ((unint64_t)v16 << 40) | ((unint64_t)v17 << 48);
  *v6 = v13;
  v6[1] = v12;
  return result;
}

uint64_t sub_1D2C7D390(int *a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5)
{
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  result = sub_1D2CAA8F4();
  v11 = *a1;
  if (a1[1] < (int)v11)
  {
    __break(1u);
    goto LABEL_8;
  }
  v15 = a2;
  result = sub_1D2CAA864();
  if (result)
  {
    v12 = result;
    result = sub_1D2CAA888();
    v13 = v11 - result;
    if (!__OFSUB__(v11, result))
    {
      sub_1D2CAA87C();
      result = *a4;
      v14 = *a4 + a5;
      if (!__OFADD__(*a4, a5))
      {
        if (v14 >= result)
          return sub_1D2C571B8(result, v14, v15, a3, v12 + v13);
        goto LABEL_10;
      }
LABEL_9:
      __break(1u);
LABEL_10:
      __break(1u);
      goto LABEL_11;
    }
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
LABEL_11:
  __break(1u);
  return result;
}

char *sub_1D2C7D464()
{
  char **v0;
  char *v1;
  char *result;

  v1 = *v0;
  result = (char *)swift_isUniquelyReferenced_nonNull_native();
  *v0 = v1;
  if (!(_DWORD)result)
  {
    result = sub_1D2C71C88(result, *((_QWORD *)v1 + 2) + 1, 1, v1);
    *v0 = result;
  }
  return result;
}

uint64_t sub_1D2C7D4AC(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  v4 = a4 - a3;
  if (!a3)
    v4 = 0;
  if (result < 0 || v4 < result)
  {
    __break(1u);
  }
  else if ((a2 & 0x8000000000000000) == 0 && v4 >= a2)
  {
    return a2 - result;
  }
  __break(1u);
  return result;
}

void *sub_1D2C7D4E0(void *__src, size_t __len, int a3, int a4, int a5, void *__dst)
{
  if (__src)
  {
    if ((__len & 0x8000000000000000) != 0)
      __break(1u);
    else
      return memmove(__dst, __src, __len);
  }
  return __src;
}

uint64_t sub_1D2C7D500(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t))
{
  uint64_t v3;

  if (a1)
    v3 = a2 - a1;
  else
    v3 = 0;
  return a3(a1, v3);
}

uint64_t sub_1D2C7D530(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t (*a4)(uint64_t, uint64_t))
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;

  v6 = *a3;
  v7 = a3[1];
  v9 = a3[2];
  v8 = a3[3];
  v10 = sub_1D2C7D4AC(0, *a3, v9, v8);
  result = sub_1D2C7D4AC(v6, v7, v9, v8);
  if (__OFADD__(v10, result))
  {
    __break(1u);
    goto LABEL_8;
  }
  v12 = result;
  if (v10 + result < v10)
  {
LABEL_8:
    __break(1u);
    return result;
  }
  if (a1)
    v13 = a1 + v10;
  else
    v13 = 0;
  return a4(v13, v12);
}

uint64_t _s16KeywordPirClientVwxx()
{
  swift_bridgeObjectRelease();
  swift_release();
  return swift_release();
}

uint64_t _s16KeywordPirClientVwcp(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_WORD *)(a1 + 8) = *(_WORD *)(a2 + 8);
  *(_BYTE *)(a1 + 10) = *(_BYTE *)(a2 + 10);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_WORD *)(a1 + 64) = *(_WORD *)(a2 + 64);
  v3 = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = v3;
  sub_1D2CAAF0C();
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t _s16KeywordPirClientVwca(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_BYTE *)(a1 + 9) = *(_BYTE *)(a2 + 9);
  *(_BYTE *)(a1 + 10) = *(_BYTE *)(a2 + 10);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  sub_1D2CAAF0C();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  v4 = *(_QWORD *)(a2 + 56);
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  *(_QWORD *)(a1 + 56) = v4;
  *(_BYTE *)(a1 + 65) = *(_BYTE *)(a2 + 65);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  swift_retain();
  swift_release();
  return a1;
}

__n128 __swift_memcpy88_8(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __n128 result;
  __int128 v4;
  __int128 v5;

  v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  result = *(__n128 *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  v5 = *(_OWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 64) = v5;
  *(__n128 *)(a1 + 32) = result;
  return result;
}

uint64_t _s16KeywordPirClientVwta(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_BYTE *)(a1 + 9) = *(_BYTE *)(a2 + 9);
  *(_BYTE *)(a1 + 10) = *(_BYTE *)(a2 + 10);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_WORD *)(a1 + 64) = *(_WORD *)(a2 + 64);
  swift_release();
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  swift_release();
  return a1;
}

uint64_t _s16KeywordPirClientVwet(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 88))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 32);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t _s16KeywordPirClientVwst(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 88) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 32) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 88) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for PIR.KeywordPirClient()
{
  return &type metadata for PIR.KeywordPirClient;
}

ValueMetadata *_s16KeywordPirClientV10HashBucketVMa()
{
  return &_s16KeywordPirClientV10HashBucketVN;
}

_QWORD *sub_1D2C7D8D0(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  unint64_t v4;

  v3 = a2[1];
  *a1 = *a2;
  v4 = a2[2];
  sub_1D2C45028(v3, v4);
  a1[1] = v3;
  a1[2] = v4;
  return a1;
}

_QWORD *_s16KeywordPirClientV10HashBucketV15HashBucketEntryVwca(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;

  *a1 = *a2;
  v3 = a2[1];
  v4 = a2[2];
  sub_1D2C45028(v3, v4);
  v5 = a1[1];
  v6 = a1[2];
  a1[1] = v3;
  a1[2] = v4;
  sub_1D2C45258(v5, v6);
  return a1;
}

uint64_t _s16KeywordPirClientV10HashBucketV15HashBucketEntryVwta(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;

  v3 = *(_QWORD *)(a2 + 16);
  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = v3;
  sub_1D2C45258(v4, v5);
  return a1;
}

ValueMetadata *_s16KeywordPirClientV10HashBucketV15HashBucketEntryVMa()
{
  return &_s16KeywordPirClientV10HashBucketV15HashBucketEntryVN;
}

void HE.SerializedEvaluationKey.encryptionParams.getter(_BYTE *a1@<X8>)
{
  _BYTE *v1;
  char v2;

  v2 = v1[1];
  *a1 = *v1;
  a1[1] = v2;
}

uint64_t HE.SerializedEvaluationKey.galoisKey.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_QWORD *)(v1 + 8);
  return sub_1D2CAAF0C();
}

uint64_t HE.SerializedEvaluationKey.relinKey.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_QWORD *)(v1 + 16);
  return sub_1D2CAAF0C();
}

_BYTE *HE.SerializedEvaluationKey.init(encryptionParams:galoisKey:relinKey:)@<X0>(_BYTE *result@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  char v4;
  uint64_t v5;
  uint64_t v6;

  v4 = result[1];
  v5 = *a2;
  v6 = *a3;
  *(_BYTE *)a4 = *result;
  *(_BYTE *)(a4 + 1) = v4;
  *(_QWORD *)(a4 + 8) = v5;
  *(_QWORD *)(a4 + 16) = v6;
  return result;
}

uint64_t HE.SerializedEvaluationKey.init(config:secretKey:scheme:)@<X0>(char *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  char v5;
  char v6;
  uint64_t v7;
  int v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD v18[2];

  v5 = *a1;
  v6 = a1[1];
  v7 = *((_QWORD *)a1 + 1);
  v8 = a1[16];
  v10 = *a2;
  v9 = a2[1];
  LOBYTE(v18[0]) = *a1;
  BYTE1(v18[0]) = v6;
  _s12ParamContextCMa();
  swift_allocObject();
  sub_1D2C6BC3C((uint64_t)v18);
  if (v3)
  {
    sub_1D2C45258(v10, v9);
    return swift_bridgeObjectRelease();
  }
  else
  {
    v13 = v11;
    v18[0] = v10;
    v18[1] = v9;
    swift_retain();
    sub_1D2C90FBC((uint64_t)v18, v13);
    v15 = v14;
    if (*(_QWORD *)(v7 + 16))
    {
      swift_retain();
      sub_1D2CAAF0C();
      swift_retain();
      sub_1D2C9C6C8(v13, v7, v15, v18);
      v16 = v18[0];
    }
    else
    {
      v16 = 0;
    }
    sub_1D2CAAF0C();
    swift_bridgeObjectRelease();
    if (v8)
    {
      sub_1D2C9C1E4(v15, v18);
      result = swift_bridgeObjectRelease();
      v17 = v18[0];
    }
    else
    {
      swift_bridgeObjectRelease();
      swift_release();
      result = swift_release();
      v17 = 0;
    }
    *(_BYTE *)a3 = v5;
    *(_BYTE *)(a3 + 1) = v6;
    *(_QWORD *)(a3 + 8) = v16;
    *(_QWORD *)(a3 + 16) = v17;
  }
  return result;
}

uint64_t _s23SerializedEvaluationKeyVwxx()
{
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t _s23SerializedEvaluationKeyVwCP_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_WORD *)a1 = *(_WORD *)a2;
  v3 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v3;
  sub_1D2CAAF0C();
  sub_1D2CAAF0C();
  return a1;
}

uint64_t _s23SerializedEvaluationKeyVwca(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_BYTE *)(a1 + 1) = *(_BYTE *)(a2 + 1);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  sub_1D2CAAF0C();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  sub_1D2CAAF0C();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t _s23SerializedEvaluationKeyVwta(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_BYTE *)(a1 + 1) = *(_BYTE *)(a2 + 1);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t _s23SerializedEvaluationKeyVwet(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 24))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t _s23SerializedEvaluationKeyVwst(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 24) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 24) = 0;
    if (a2)
      *(_QWORD *)(result + 8) = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for HE.SerializedEvaluationKey()
{
  return &type metadata for HE.SerializedEvaluationKey;
}

unint64_t PEC.PlaintextPacking.init(rawValue:)@<X0>(unint64_t result@<X0>, char *a2@<X8>)
{
  char v2;

  v2 = 3;
  if (result < 3)
    v2 = result;
  *a2 = v2;
  return result;
}

uint64_t PEC.PlaintextPacking.rawValue.getter()
{
  unsigned __int8 *v0;

  return *v0;
}

unint64_t sub_1D2C7DDB4()
{
  unint64_t result;

  result = qword_1EFCA0268;
  if (!qword_1EFCA0268)
  {
    result = MEMORY[0x1D8245F38](&protocol conformance descriptor for PEC.PlaintextPacking, &type metadata for PEC.PlaintextPacking);
    atomic_store(result, (unint64_t *)&qword_1EFCA0268);
  }
  return result;
}

unint64_t sub_1D2C7DDF8@<X0>(unint64_t *a1@<X0>, char *a2@<X8>)
{
  return PEC.PlaintextPacking.init(rawValue:)(*a1, a2);
}

void sub_1D2C7DE00(_QWORD *a1@<X8>)
{
  unsigned __int8 *v1;

  *a1 = *v1;
}

uint64_t _s16PlaintextPackingOwst(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1D2C7DE58 + 4 * byte_1D2CAE9D5[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1D2C7DE8C + 4 * asc_1D2CAE9D0[v4]))();
}

uint64_t sub_1D2C7DE8C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1D2C7DE94(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1D2C7DE9CLL);
  return result;
}

uint64_t sub_1D2C7DEA8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1D2C7DEB0);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1D2C7DEB4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1D2C7DEBC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for PEC.PlaintextPacking()
{
  return &type metadata for PEC.PlaintextPacking;
}

ValueMetadata *type metadata accessor for PIR()
{
  return &type metadata for PIR;
}

void sub_1D2C7DEE8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v7;
  int64_t v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;

  if ((a3 & 0x2000000000000000) == 0)
    __asm { BR              X10 }
  v7 = a3 & 0xDFFFFFFFFFFFFFFFLL;
  v8 = *(_QWORD *)(a4 + 16);
  if (v8)
  {
    sub_1D2C45028(a2, v7);
    v14 = MEMORY[0x1E0DEE9D8];
    sub_1D2C4DB24(0, v8, 0);
    v9 = (unint64_t *)(a4 + 32);
    do
    {
      v11 = *v9++;
      v10 = v11;
      if ((v11 & 0x8000000000000000) != 0)
      {
        __break(1u);
LABEL_14:
        __break(1u);
        JUMPOUT(0x1D2C7E57CLL);
      }
      if (HIDWORD(v10))
        goto LABEL_14;
      v13 = *(_QWORD *)(v14 + 16);
      v12 = *(_QWORD *)(v14 + 24);
      if (v13 >= v12 >> 1)
        sub_1D2C4DB24((char *)(v12 > 1), v13 + 1, 1);
      *(_QWORD *)(v14 + 16) = v13 + 1;
      *(_DWORD *)(v14 + 4 * v13 + 32) = v10;
      --v8;
    }
    while (v8);
  }
  else
  {
    sub_1D2C45028(a2, v7);
  }
  __asm { BR              X10 }
}

void sub_1D2C7E668(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __asm { BR              X10 }
}

uint64_t sub_1D2C7E6D8()
{
  _DWORD *v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t result;

  if (!v2)
  {
    __break(1u);
    JUMPOUT(0x1D2C7E9ECLL);
  }
  if ((v1 & 0x8000000000000000) != 0)
  {
    __break(1u);
    JUMPOUT(0x1D2C7E950);
  }
  if (HIDWORD(v1))
  {
    __break(1u);
    JUMPOUT(0x1D2C7E960);
  }
  if (qword_1EFC9F698 != -1)
    swift_once();
  if (qword_1EFCA4A78 < 0)
  {
    __break(1u);
    JUMPOUT(0x1D2C7E770);
  }
  result = cche_deserialize_seeded_ciphertext_coeff();
  *v0 = result;
  return result;
}

uint64_t sub_1D2C7EA20@<X0>(uint64_t result@<X0>, uint64_t a2@<X5>, uint64_t a3@<X6>, _DWORD *a4@<X8>)
{
  if (!result)
    goto LABEL_9;
  if (a2 > 0xFFFFFFFFLL)
  {
    __break(1u);
  }
  else if (((a3 | a2) & 0x8000000000000000) == 0)
  {
    if (a3 <= 0xFFFFFFFFLL)
    {
      result = cche_deserialize_ciphertext_coeff();
      *a4 = result;
      return result;
    }
    goto LABEL_8;
  }
  __break(1u);
LABEL_8:
  __break(1u);
LABEL_9:
  __break(1u);
  return result;
}

void sub_1D2C7EAB4(char **a1@<X2>, unint64_t a2@<X3>, uint64_t a3@<X4>, uint64_t a4@<X5>, uint64_t a5@<X6>, _DWORD *a6@<X8>)
{
  char *v7;
  int64_t v8;
  _DWORD *v9;
  char isUniquelyReferenced_nonNull_native;

  if ((a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_12;
  }
  v7 = *a1;
  v8 = *((_QWORD *)*a1 + 2);
  if ((v8 | a2) >> 32)
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  if (a3 < 0)
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  if (!*(_QWORD *)(a4 + 16))
  {
    v9 = a6;
    goto LABEL_8;
  }
  if (!a5)
  {
LABEL_14:
    __break(1u);
    return;
  }
  v9 = a6;
LABEL_8:
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *a1 = v7;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    v7 = sub_1D2C71FB8(0, v8, 0, v7);
  *a1 = v7;
  *v9 = cche_ciphertext_coeff_compose();
}

char *sub_1D2C7EBAC(uint64_t a1, uint64_t a2)
{
  int64_t v3;
  char *result;
  unint64_t *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unsigned int v11;
  uint64_t v12;

  v3 = *(_QWORD *)(a1 + 16);
  if (v3)
  {
    v12 = MEMORY[0x1E0DEE9D8];
    result = sub_1D2C4DB24(0, v3, 0);
    v6 = (unint64_t *)(a1 + 32);
    while (1)
    {
      v8 = *v6++;
      v7 = v8;
      if ((v8 & 0x8000000000000000) != 0)
        break;
      if (HIDWORD(v7))
        goto LABEL_11;
      v10 = *(_QWORD *)(v12 + 16);
      v9 = *(_QWORD *)(v12 + 24);
      if (v10 >= v9 >> 1)
        result = sub_1D2C4DB24((char *)(v9 > 1), v10 + 1, 1);
      *(_QWORD *)(v12 + 16) = v10 + 1;
      *(_DWORD *)(v12 + 4 * v10 + 32) = v7;
      if (!--v3)
        goto LABEL_8;
    }
    __break(1u);
LABEL_11:
    __break(1u);
  }
  else
  {
LABEL_8:
    result = *(char **)(a2 + 24);
    if (result)
    {
      v11 = cche_ciphertext_coeff_decompose_nptexts();
      swift_bridgeObjectRelease();
      return (char *)v11;
    }
  }
  __break(1u);
  return result;
}

_QWORD *sub_1D2C7ECB0(_QWORD *result, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;

  if (a2 > 0xFFFFFFFFLL)
  {
    __break(1u);
    goto LABEL_6;
  }
  if ((a3 | a2) < 0)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  if (a3 <= 0xFFFFFFFFLL)
  {
    v3 = result;
    v4 = cche_ciphertext_sizeof();
    type metadata accessor for HE.ObjectStorage();
    v5 = (_QWORD *)swift_allocObject();
    v5[2] = v3;
    v6 = swift_slowAlloc();
    v5[3] = v6;
    v5[4] = v6 + v4;
    return v5;
  }
LABEL_7:
  __break(1u);
  return result;
}

void sub_1D2C7ED40(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v9 = sub_1D2CAA864();
  if (v9)
  {
    v10 = sub_1D2CAA888();
    if (__OFSUB__(a1, v10))
    {
LABEL_13:
      __break(1u);
      return;
    }
    v9 += a1 - v10;
  }
  v11 = __OFSUB__(a2, a1);
  v12 = a2 - a1;
  if (v11)
  {
    __break(1u);
    goto LABEL_13;
  }
  v13 = sub_1D2CAA87C();
  if (v13 >= v12)
    v14 = v12;
  else
    v14 = v13;
  v15 = v9 + v14;
  if (v9)
    v16 = v15;
  else
    v16 = 0;
  sub_1D2C7E668(v9, v16, a4, a5);
}

uint64_t sub_1D2C7EE14(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;

  result = sub_1D2CAA864();
  v13 = result;
  if (result)
  {
    result = sub_1D2CAA888();
    if (__OFSUB__(a1, result))
    {
LABEL_9:
      __break(1u);
      return result;
    }
    v13 += a1 - result;
  }
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  sub_1D2CAA87C();
  result = sub_1D2C7EA20(v13, a7, a8, &v15);
  if (!v14)
    return v15;
  return result;
}

uint64_t sub_1D2C7EEF0(uint64_t a1, unint64_t a2, char a3, unint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  int v17;
  int v18;
  uint64_t v19;
  uint64_t result;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  _QWORD *v24;

  if (!*(_QWORD *)(a1 + 16))
  {
LABEL_20:
    __break(1u);
LABEL_21:
    swift_once();
    goto LABEL_14;
  }
  v9 = v7;
  v10 = a4;
  v8 = a1;
  v5 = *(_QWORD **)(*(_QWORD *)(a1 + 32) + 16);
  if ((a3 & 1) != 0)
    a2 = cche_param_ctx_ciphertext_ctx_nmoduli();
  v22 = a2;
  v12 = *(_QWORD *)(a5 + 16);
  if (v12)
  {
    v21 = v10;
    v23 = MEMORY[0x1E0DEE9D8];
    swift_retain();
    sub_1D2C4DB24(0, v12, 0);
    v9 = 0;
    v6 = v23;
    while (1)
    {
      v10 = *(_QWORD *)(a5 + 8 * v9 + 32);
      if ((v10 & 0x8000000000000000) != 0)
        break;
      if (HIDWORD(v10))
        goto LABEL_19;
      v14 = *(_QWORD *)(v23 + 16);
      v13 = *(_QWORD *)(v23 + 24);
      if (v14 >= v13 >> 1)
        sub_1D2C4DB24((char *)(v13 > 1), v14 + 1, 1);
      ++v9;
      *(_QWORD *)(v23 + 16) = v14 + 1;
      *(_DWORD *)(v23 + 4 * v14 + 32) = v10;
      if (v12 == v9)
      {
        swift_bridgeObjectRelease();
        v10 = v21;
        v9 = v7;
        goto LABEL_13;
      }
    }
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  swift_retain();
  swift_bridgeObjectRelease();
  v6 = MEMORY[0x1E0DEE9D8];
LABEL_13:
  v15 = qword_1EFC9F690;
  swift_retain();
  if (v15 != -1)
    goto LABEL_21;
LABEL_14:
  v16 = sub_1D2C7ECB0(v5, v22, qword_1EFCA4A70);
  v24 = v16;
  swift_retain();
  sub_1D2CAAF0C();
  v17 = sub_1D2CAA69C(v8, (uint64_t)&v24, v6, (uint64_t)v5, v22, v10);
  if (v9)
  {
    swift_bridgeObjectRelease();
    result = swift_release();
    __break(1u);
  }
  else
  {
    v18 = v17;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    swift_release();
    if (v18)
    {
      sub_1D2C4E7DC();
      swift_allocError();
      *(_DWORD *)v19 = v18;
      *(_BYTE *)(v19 + 4) = 0;
      swift_willThrow();
      swift_release();
    }
    swift_release();
    return (uint64_t)v16;
  }
  return result;
}

id sub_1D2C7F148(_QWORD *a1, void *a2, void *a3, unint64_t a4, void *a5, int a6, uint64_t a7, void *a8, char a9)
{
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  void *v20;
  id v21;
  void *v22;
  id v23;
  id v24;
  id v25;
  uint64_t inited;
  id v27;
  id v28;
  id v29;
  uint64_t v30;
  unint64_t v31;
  void *v32;
  void *v33;
  id v34;
  id v35;
  void *v36;
  void *v37;
  id v38;
  id v39;
  id v40;
  void *v41;
  id v42;
  uint64_t v43;
  void *v44;
  void *v45;
  void *v46;
  void *v47;
  void *v48;
  void *v50;
  _QWORD *v51;
  uint64_t v52;
  id v53;
  _QWORD *v54;
  id v55;
  uint64_t v56;
  char *v57;
  void *v58;
  _QWORD *v59;
  unint64_t v60;
  void *v61;
  void *v62;
  void *v63;
  uint64_t v64;
  void *v65;

  v61 = a5;
  v62 = a8;
  v59 = (_QWORD *)sub_1D2CAAE4C();
  v58 = (void *)*(v59 - 1);
  MEMORY[0x1E0C80A78](v59);
  v57 = (char *)&v52 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = sub_1D2C91F70(a6, a7, a9);
  v18 = v16;
  v19 = v17;
  if ((a9 & 1) != 0)
  {
    sub_1D2C80378(a1, a2, a3, a4, v61, a6, a7, v62, 1u);
    v21 = v20;
    sub_1D2C45258(v18, v19);
  }
  else
  {
    v55 = a2;
    v56 = v16;
    v60 = v17;
    if (a6 >= 2u)
    {
      if (a6 != 2)
      {
        __break(1u);
        JUMPOUT(0x1D2C7FCC8);
      }
      sub_1D2C5D050(1868983881, 0xE400000000000000);
      if (a4 >> 60 != 15)
        __asm { BR              X10 }
      __break(1u);
      JUMPOUT(0x1D2C7FCD4);
    }
    v22 = v62;
    v21 = sub_1D2C831C0((uint64_t)v62, v55);
    if ((_BYTE)a6)
    {
      v54 = a1;
      sub_1D2CAAD50();
      sub_1D2C5AE40((unint64_t *)&qword_1ED985C78, (uint64_t (*)(uint64_t))MEMORY[0x1E0CA9860], MEMORY[0x1E0CA9858]);
      v23 = v22;
      sub_1D2CAAC00();
      __swift_instantiateConcreteTypeFromMangledName(&qword_1ED985DB0);
      swift_dynamicCast();
      v59 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0D1BD70]), sel_initWithGeneratorForCP_, v64);
      sub_1D2CAAC00();
      swift_dynamicCast();
      v24 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0D1BD70]), sel_initWithGeneratorForCP_, v64);
      v25 = sub_1D2C831C0((uint64_t)v23, v24);

      __swift_instantiateConcreteTypeFromMangledName(&qword_1ED985DD0);
      inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_1D2CACF70;
      v27 = v55;
      *(_QWORD *)(inited + 32) = v55;
      *(_QWORD *)(inited + 40) = v21;
      v28 = v23;
      v29 = v27;
      v21 = v21;
      v30 = v56;
      v31 = v60;
      v32 = v65;
      sub_1D2C84C98((uint64_t)&v63, (uint64_t)v23, v25, v56, v60, inited, 0);
      v62 = v28;
      if (v32)
      {
        v34 = v28;
        v35 = v59;
      }
      else
      {
        v36 = v33;
        v57 = (char *)(inited + 32);

        v65 = 0;
        v37 = v63;
        v38 = v36;
        v58 = v25;
        v39 = v38;
        v40 = v37;
        v41 = v61;
        v35 = v59;
        v42 = sub_1D2C831C0((uint64_t)v41, v59);
        v61 = v41;
        v34 = sub_1D2C831C0((uint64_t)v41, v39);
        v43 = v31;
        v44 = v40;
        v45 = v40;
        v46 = v42;
        v47 = v65;
        sub_1D2C85E9C(v30, v43, v58, v39, v45, v42, v34);
        if (!v47)
        {
          v65 = v48;
          v53 = sub_1D2C830A8(v48, (uint64_t)v62);
          v50 = v61;
          v55 = sub_1D2C833F8(v61, (uint64_t)v53);

          sub_1D2C45258(v56, v60);
          swift_setDeallocating();
          __swift_instantiateConcreteTypeFromMangledName(&qword_1ED985D90);
          swift_arrayDestroy();

          v51 = v54;
          *v54 = v65;
          v51[1] = v55;
          return v21;
        }

        v31 = v60;
        v30 = v56;
        v25 = v58;
      }

      sub_1D2C45258(v30, v31);
      swift_setDeallocating();
      __swift_instantiateConcreteTypeFromMangledName(&qword_1ED985D90);
      swift_arrayDestroy();

    }
    else
    {
      sub_1D2C45258(v56, v60);
      *a1 = 0;
      a1[1] = 0;
    }
  }
  return v21;
}

void sub_1D2C7FCF8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, unint64_t a6, int a7, uint64_t a8, void *a9, char a10)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unsigned __int8 v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  void *v32;
  id v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  unsigned __int8 v37;
  id v38;
  unint64_t v39;
  unint64_t v40;
  char *v41;
  _QWORD v42[9];
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  void *v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  void *v55[4];

  v49 = a6;
  v48 = a5;
  v42[3] = a4;
  v42[8] = a3;
  v51 = a2;
  v55[2] = *(void **)MEMORY[0x1E0C80C00];
  v45 = sub_1D2CAADA4();
  v42[4] = *(_QWORD *)(v45 - 8);
  MEMORY[0x1E0C80A78](v45);
  v44 = (char *)v42 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_1D2CAABC4();
  v42[6] = *(_QWORD *)(v14 - 8);
  v42[7] = v14;
  MEMORY[0x1E0C80A78](v14);
  v42[5] = (char *)v42 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = sub_1D2CAAE4C();
  v17 = *(_QWORD *)(v16 - 8);
  MEMORY[0x1E0C80A78](v16);
  v19 = (char *)v42 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1D2CAAE28();
  v20 = sub_1D2CAAE1C();
  v22 = v21;
  (*(void (**)(char *, uint64_t))(v17 + 8))(v19, v16);
  if (v22 >> 60 == 15)
  {
    __break(1u);
  }
  else
  {
    v47 = a7;
    v23 = a7;
    v24 = a8;
    v25 = sub_1D2C91F70(v23, a8, a10 & 1);
    v27 = v26;
    v53 = v20;
    v54 = v22;
    sub_1D2C45028(v20, v22);
    sub_1D2C5EDA4(v25, v27);
    sub_1D2C45258(v25, v27);
    sub_1D2C6BAE4(v20, v22);
    v29 = v53;
    v28 = v54;
    v30 = v50;
    sub_1D2C92114(a1, v51, v53, v54);
    if (v30)
    {
      swift_unexpectedError();
      __break(1u);
      JUMPOUT(0x1D2C80354);
    }
    v32 = v31;
    v43 = a1;
    v46 = v29;
    v50 = v28;
    sub_1D2CAAD50();
    sub_1D2C5AE40((unint64_t *)&qword_1ED985C78, (uint64_t (*)(uint64_t))MEMORY[0x1E0CA9860], MEMORY[0x1E0CA9858]);
    sub_1D2CAAC00();
    __swift_instantiateConcreteTypeFromMangledName(&qword_1ED985DB0);
    swift_dynamicCast();
    v33 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0D1BD78]), sel_initWithRandomScalarInGroup_, v52);
    if (v33)
    {
      v34 = v33;
      v36 = (uint64_t)v48;
      v35 = v49;
      v37 = v47;
      v38 = sub_1D2C7F148(v55, v32, v48, v49, v33, v47, v24, a9, a10 & 1);
      v42[2] = v32;

      sub_1D2C87418(v55[0], v55[1]);
      sub_1D2C80BE8(v43, v51, v36, v35, (uint64_t)v38, v24, v37, a10 & 1);
      v40 = v39;
      sub_1D2C5AE40(&qword_1ED985DA8, (uint64_t (*)(uint64_t))MEMORY[0x1E0CA9958], MEMORY[0x1E0CA9950]);
      sub_1D2CAABA0();
      v41 = (char *)&loc_1D2C8005C + *((int *)qword_1D2C80368 + (v40 >> 62));
      v42[1] = v38;
      __asm { BR              X10 }
    }
  }
  __break(1u);
}

void sub_1D2C80378(_QWORD *a1, void *a2, void *a3, unint64_t a4, void *a5, int a6, uint64_t a7, void *a8, unsigned __int8 a9)
{
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  void *v44;
  uint64_t v45;
  id v46;
  id v47;
  id v48;
  id v49;
  void *v50;
  int v51;
  id v52;
  id v53;
  uint64_t v54;
  id v55;
  uint64_t v56;
  id v57;
  id v58;
  uint64_t inited;
  id v60;
  id v61;
  id v62;
  void *v63;
  unint64_t v64;
  void *v65;
  uint64_t v66;
  void *v67;
  id v68;
  _QWORD *v69;
  void *v70;
  void *v71;
  id v72;
  id v73;
  id v74;
  id v75;
  uint64_t v76;
  void *v77;
  void *v78;
  id v79;
  uint64_t v80;
  void *v81;
  void *v82;
  id v83;
  void *v84;
  void *v85;
  id v86;
  _QWORD *v87;
  id v88;
  _QWORD v89[3];
  void *v90;
  id v91;
  id v92;
  _QWORD *v93;
  uint64_t v94;
  id v95;
  id v96;
  id v97;
  unint64_t v98;
  void (*v99)(char *, uint64_t);
  void *v100;
  id v101;
  uint64_t v102;
  unint64_t v103;
  uint64_t v104;
  unint64_t v105;
  uint64_t v106;
  unint64_t v107;
  uint64_t v108;

  v101 = a3;
  v96 = a2;
  v97 = a8;
  v14 = a6;
  v15 = sub_1D2CAAE4C();
  v16 = *(_QWORD *)(v15 - 8);
  MEMORY[0x1E0C80A78](v15);
  v18 = (char *)v89 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (v14 > 1)
  {
    __break(1u);
    JUMPOUT(0x1D2C80BB8);
  }
  v92 = a5;
  v93 = a1;
  LODWORD(v94) = a9;
  LODWORD(v95) = a6;
  v19 = sub_1D2C91F70(a6, a7, a9 & 1);
  v21 = v20;
  sub_1D2CAAE28();
  v22 = sub_1D2CAAE1C();
  v24 = v23;
  v99 = *(void (**)(char *, uint64_t))(v16 + 8);
  v99(v18, v15);
  if (v24 >> 60 == 15)
  {
    __break(1u);
LABEL_18:
    __break(1u);
LABEL_19:
    swift_bridgeObjectRelease();
    __break(1u);
    goto LABEL_20;
  }
  v25 = v15;
  v104 = v22;
  v105 = v24;
  sub_1D2C69B84(v22, v24);
  sub_1D2C45028(v19, v21);
  sub_1D2C5EDA4(v19, v21);
  v102 = v19;
  sub_1D2C45258(v19, v21);
  sub_1D2C6BAE4(v22, v24);
  v26 = v105;
  v108 = v104;
  v27 = (uint64_t)v101;
  if (a4 >> 60 != 15)
    __asm { BR              X10 }
  v103 = v21;
  sub_1D2C5AEC0(0, 2);
  v29 = v28;
  v31 = v30;
  v106 = v108;
  v107 = v26;
  v98 = v26;
  sub_1D2C45028(v108, v26);
  sub_1D2C5EDA4(v29, v31);
  sub_1D2C45258(v29, v31);
  v32 = v106;
  v33 = v107;
  v104 = v106;
  v105 = v107;
  sub_1D2C69B84(v27, a4);
  sub_1D2C45028(v32, v33);
  sub_1D2C45028(0, 0xC000000000000000);
  sub_1D2C5EDA4(0, 0xC000000000000000);
  sub_1D2C45258(0, 0xC000000000000000);
  sub_1D2C45258(0, 0xC000000000000000);
  sub_1D2C45258(v32, v33);
  v35 = v104;
  v34 = v105;
  sub_1D2CAAE28();
  v36 = sub_1D2CAAE1C();
  v38 = v37;
  v99(v18, v25);
  if (v38 >> 60 == 15)
    goto LABEL_18;
  v104 = v36;
  v105 = v38;
  v40 = v102;
  v39 = v103;
  sub_1D2C45028(v102, v103);
  sub_1D2C69B84(v36, v38);
  sub_1D2C5EDA4(v40, v39);
  sub_1D2C45258(v40, v39);
  sub_1D2C6BAE4(v36, v38);
  v41 = v104;
  v42 = v105;
  sub_1D2CAAD50();
  sub_1D2C5AE40((unint64_t *)&qword_1ED985C78, (uint64_t (*)(uint64_t))MEMORY[0x1E0CA9860], MEMORY[0x1E0CA9858]);
  v43 = sub_1D2CAABF4();
  v44 = v100;
  v45 = sub_1D2C64504(v35, v34, 1, v41, v42, v43, 0);
  v101 = v44;
  if (v44)
  {
    sub_1D2C45258(v41, v42);
    sub_1D2C45258(v35, v34);
    sub_1D2C45258(v108, v98);
    sub_1D2C45258(v40, v39);
    return;
  }
  v100 = (void *)v35;
  if (!*(_QWORD *)(v45 + 16))
    goto LABEL_19;
  v99 = (void (*)(char *, uint64_t))v34;
  v46 = *(id *)(v45 + 32);
  swift_bridgeObjectRelease();
  sub_1D2C45258(v41, v42);
  v47 = v97;
  v97 = v46;
  v48 = sub_1D2C832E0(v47, (uint64_t)v46);
  v49 = objc_msgSend(v48, sel_inverseModOrder);
  if (!v49)
  {
LABEL_20:
    __break(1u);
    JUMPOUT(0x1D2C80BD8);
  }
  v50 = v49;
  v51 = v95;
  v52 = v96;
  v53 = sub_1D2C831C0((uint64_t)v49, v96);

  if (v51)
  {
    sub_1D2CAAC00();
    __swift_instantiateConcreteTypeFromMangledName(&qword_1ED985DB0);
    swift_dynamicCast();
    v95 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0D1BD70]), sel_initWithGeneratorForCP_, v106);
    sub_1D2CAAC00();
    swift_dynamicCast();
    v54 = v106;
    v55 = objc_allocWithZone(MEMORY[0x1E0D1BD70]);
    v56 = v102;
    v57 = objc_msgSend(v55, sel_initWithGeneratorForCP_, v54);
    v58 = sub_1D2C831C0((uint64_t)v48, v57);

    __swift_instantiateConcreteTypeFromMangledName(&qword_1ED985DD0);
    inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_1D2CACF70;
    *(_QWORD *)(inited + 32) = v53;
    *(_QWORD *)(inited + 40) = v52;
    v91 = v53;
    v60 = v52;
    v61 = v48;
    v62 = v101;
    sub_1D2C84C98((uint64_t)&v104, (uint64_t)v48, v58, v56, v103, inited, v94 & 1);
    if (v62)
    {
      v64 = v103;
      swift_bridgeObjectRelease();
      v65 = v61;
      v66 = (uint64_t)v100;
      v67 = v61;
      v68 = v95;

      sub_1D2C45258(v66, (unint64_t)v99);
      sub_1D2C45258(v108, v98);
      sub_1D2C45258(v56, v64);

    }
    else
    {
      v70 = v63;
      v89[1] = inited + 32;
      v89[2] = v53;

      v94 = (uint64_t)v61;
      v71 = (void *)v104;
      v72 = v70;
      v101 = v71;
      v73 = v92;
      v74 = sub_1D2C831C0((uint64_t)v73, v95);
      v90 = v73;
      v75 = sub_1D2C831C0((uint64_t)v73, v72);
      v76 = v56;
      v77 = v101;
      v92 = v58;
      v96 = v72;
      v78 = v72;
      v79 = v74;
      sub_1D2C85E9C(v76, v103, v58, v78, v101, v74, v75);
      v80 = (uint64_t)v100;
      v89[0] = v81;
      v82 = (void *)v94;
      v83 = sub_1D2C830A8(v81, v94);
      v84 = v90;
      v91 = sub_1D2C833F8(v90, (uint64_t)v83);

      v85 = v79;
      v86 = v96;

      swift_setDeallocating();
      __swift_instantiateConcreteTypeFromMangledName(&qword_1ED985D90);
      swift_arrayDestroy();
      sub_1D2C45258(v80, (unint64_t)v99);
      sub_1D2C45258(v108, v98);
      sub_1D2C45258(v102, v103);

      v87 = v93;
      v88 = v91;
      *v93 = v89[0];
      v87[1] = v88;
    }
  }
  else
  {
    sub_1D2C45258((uint64_t)v100, (unint64_t)v99);
    sub_1D2C45258(v108, v98);
    sub_1D2C45258(v40, v39);

    v69 = v93;
    *v93 = 0;
    v69[1] = 0;
  }
}

void sub_1D2C80BE8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unsigned __int8 a7, char a8)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  _QWORD v23[10];

  v23[3] = a4;
  v13 = sub_1D2CAAE4C();
  v14 = *(_QWORD *)(v13 - 8);
  MEMORY[0x1E0C80A78](v13);
  v16 = (char *)v23 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((a8 & 1) != 0)
  {
    v23[2] = a5;
    sub_1D2CAAE28();
    v17 = sub_1D2CAAE1C();
    v19 = v18;
    (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
    if (v19 >> 60 != 15)
    {
      v20 = sub_1D2C91F70(a7, a6, 1);
      v22 = v21;
      v23[8] = v17;
      v23[9] = v19;
      sub_1D2C45028(v17, v19);
      sub_1D2C5EDA4(v20, v22);
      sub_1D2C45258(v20, v22);
      sub_1D2C6BAE4(v17, v19);
      __asm { BR              X10 }
    }
    __break(1u);
    JUMPOUT(0x1D2C81510);
  }
  __asm { BR              X10 }
}

uint64_t sub_1D2C81594(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, void *a5, void *a6, void *a7, uint64_t a8, void *a9, char a10, uint64_t a11, unsigned __int8 a12)
{
  void *v12;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  void *v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  id v49;
  uint64_t v50;
  char *v51;
  id v52;
  id v53;
  id v54;
  char *v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  uint64_t v59;
  id v60;
  int v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  unint64_t v65;
  uint64_t v66;
  unint64_t v67;
  void *v68;
  void *v69;
  id v70;
  id v71;
  uint64_t inited;
  void *v73;
  id v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v82;
  id v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  uint64_t v88;
  char *v89;
  uint64_t v90;
  void *v91;
  void *v92;
  uint64_t v93;
  void *v94;
  int v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  id v99;
  uint64_t v100;
  unint64_t v101;
  unint64_t v102;
  void (*v103)(char *, void *);
  void *v104;
  uint64_t v105;
  unint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;

  v100 = a3;
  v101 = a4;
  v96 = a1;
  v97 = a2;
  v17 = sub_1D2CAAE4C();
  v18 = *(_QWORD *)(v17 - 8);
  v19 = MEMORY[0x1E0C80A78](v17);
  v21 = (char *)&v82 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a10 != 1)
  {
    __break(1u);
    JUMPOUT(0x1D2C81E9CLL);
  }
  v99 = v12;
  v91 = a6;
  v92 = a7;
  v22 = (void *)v19;
  v95 = a12;
  v93 = a11;
  v23 = sub_1D2C91F70(1u, a11, a12 & 1);
  v25 = v24;
  sub_1D2CAAE28();
  v26 = sub_1D2CAAE1C();
  v28 = v27;
  v103 = *(void (**)(char *, void *))(v18 + 8);
  v104 = v22;
  v103(v21, v22);
  if (v28 >> 60 == 15)
  {
    __break(1u);
LABEL_19:
    __break(1u);
LABEL_20:
    swift_bridgeObjectRelease();
    __break(1u);
    goto LABEL_21;
  }
  v105 = v26;
  v106 = v28;
  sub_1D2C69B84(v26, v28);
  sub_1D2C45028(v23, v25);
  sub_1D2C5EDA4(v23, v25);
  sub_1D2C45258(v23, v25);
  sub_1D2C6BAE4(v26, v28);
  v29 = v106;
  v109 = v105;
  v30 = v101;
  v94 = a5;
  v90 = a8;
  if (v101 >> 60 != 15)
    __asm { BR              X10 }
  v31 = v100;
  v102 = v25;
  sub_1D2C5AEC0(0, 2);
  v33 = v32;
  v35 = v34;
  v107 = v109;
  v108 = v29;
  v98 = v29;
  sub_1D2C45028(v109, v29);
  sub_1D2C5EDA4(v33, v35);
  sub_1D2C45258(v33, v35);
  v36 = v107;
  v37 = v108;
  v105 = v107;
  v106 = v108;
  sub_1D2C69B84(v31, v30);
  sub_1D2C45028(v36, v37);
  sub_1D2C45028(0, 0xC000000000000000);
  sub_1D2C5EDA4(0, 0xC000000000000000);
  sub_1D2C45258(0, 0xC000000000000000);
  sub_1D2C45258(0, 0xC000000000000000);
  sub_1D2C45258(v36, v37);
  v39 = v105;
  v38 = v106;
  sub_1D2CAAE28();
  v40 = sub_1D2CAAE1C();
  v42 = v41;
  v89 = v21;
  v103(v21, v104);
  if (v42 >> 60 == 15)
    goto LABEL_19;
  v105 = v40;
  v106 = v42;
  v43 = v102;
  sub_1D2C45028(v23, v102);
  sub_1D2C69B84(v40, v42);
  sub_1D2C5EDA4(v23, v43);
  sub_1D2C45258(v23, v43);
  sub_1D2C6BAE4(v40, v42);
  v44 = v105;
  v45 = v106;
  v46 = sub_1D2CAAD50();
  v47 = sub_1D2C5AE40((unint64_t *)&qword_1ED985C78, (uint64_t (*)(uint64_t))MEMORY[0x1E0CA9860], MEMORY[0x1E0CA9858]);
  v48 = sub_1D2CAABF4();
  v49 = v99;
  v50 = sub_1D2C64504(v39, v38, 1, v44, v45, v48, 0);
  v99 = v49;
  if (v49)
  {
    sub_1D2C45258(v44, v45);
    sub_1D2C45258(v39, v38);
    sub_1D2C45258(v109, v98);
    sub_1D2C45258(v23, v43);
    return v46;
  }
  v88 = v47;
  v85 = v39;
  v86 = v23;
  v87 = v38;
  if (!*(_QWORD *)(v50 + 16))
    goto LABEL_20;
  v51 = (char *)*(id *)(v50 + 32);
  swift_bridgeObjectRelease();
  sub_1D2C45258(v44, v45);
  sub_1D2CAAC00();
  v84 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED985DB0);
  swift_dynamicCast();
  v52 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0D1BD70]), sel_initWithGeneratorForCP_, v107);
  v53 = sub_1D2C831C0((uint64_t)v51, v52);

  v54 = sub_1D2C92250(a9, (uint64_t)v53);
  v55 = v89;
  sub_1D2CAAE28();
  v56 = sub_1D2CAAE1C();
  v58 = v57;
  v103(v55, v104);
  v59 = v93;
  v60 = v99;
  if (v58 >> 60 == 15)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  v89 = v51;
  v83 = v53;
  v104 = v54;
  v61 = v95 & 1;
  v62 = sub_1D2C91F70(1u, v93, v95 & 1);
  v63 = v59;
  v65 = v64;
  v105 = v56;
  v106 = v58;
  sub_1D2C45028(v56, v58);
  sub_1D2C5EDA4(v62, v65);
  sub_1D2C45258(v62, v65);
  sub_1D2C6BAE4(v56, v58);
  v66 = v105;
  v67 = v106;
  sub_1D2C92114(v96, v97, v105, v106);
  if (v60)
  {
LABEL_22:
    swift_unexpectedError();
    __break(1u);
    JUMPOUT(0x1D2C81EDCLL);
  }
  v69 = v68;
  v70 = sub_1D2C831C0((uint64_t)v94, v68);
  sub_1D2C45258(v66, v67);

  sub_1D2CAAC00();
  swift_dynamicCast();
  v71 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0D1BD70]), sel_initWithGeneratorForCP_, v107);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED985DD0);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1D2CACF70;
  v73 = v91;
  *(_QWORD *)(inited + 32) = v91;
  v46 = inited + 32;
  *(_QWORD *)(inited + 40) = v70;
  v74 = v73;
  v103 = (void (*)(char *, void *))v70;
  v75 = v63;
  v76 = sub_1D2C91F70(1u, v63, v61);
  v78 = v77;
  v99 = v71;
  LOBYTE(v71) = sub_1D2C81EEC(v71, v104, inited, (uint64_t)v92, v90, v76, v77, v61);
  v92 = v74;

  sub_1D2C45258(v76, v78);
  swift_setDeallocating();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED985D90);
  swift_arrayDestroy();
  v79 = v85;
  if ((v71 & 1) != 0)
  {
    sub_1D2C82074(v96, v97, v100, v101, v94, v92, 1, v75, v95 & 1);
    v46 = v80;
  }
  else
  {
    sub_1D2C87444();
    swift_allocError();
    swift_willThrow();
  }
  sub_1D2C45258(v79, v87);
  sub_1D2C45258(v109, v98);
  sub_1D2C45258(v86, v102);

  return v46;
}

uint64_t sub_1D2C81EEC(void *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unint64_t a7, int a8)
{
  uint64_t v8;
  void *v15;
  void *v16;
  id v17;
  uint64_t v18;
  id v19;
  id v20;
  uint64_t v21;
  void *v22;
  id v23;
  id v24;
  uint64_t v25;
  void *v26;
  void *v28;
  void *v29;
  uint64_t v30;
  id v31;
  uint64_t v32;
  id v33;

  sub_1D2C84C98((uint64_t)&v33, 0, a2, a6, a7, a3, a8);
  if (!v8)
  {
    v16 = v15;
    v17 = sub_1D2C831C0(a5, a1);
    v32 = a7;
    v18 = a4;
    v19 = sub_1D2C831C0(a4, a2);
    v31 = sub_1D2C92250(v17, (uint64_t)v19);

    a4 = (uint64_t)sub_1D2C831C0(a5, v16);
    v20 = v33;
    v30 = v18;
    v21 = v18;
    v22 = v16;
    v23 = sub_1D2C831C0(v21, v33);
    v24 = sub_1D2C92250((void *)a4, (uint64_t)v23);

    v25 = a6;
    v26 = v24;
    sub_1D2C85E9C(v25, v32, a2, v22, v20, v31, v24);
    v29 = v28;
    LOBYTE(a4) = objc_msgSend(v28, sel_isEqual_, v30);

  }
  return a4 & 1;
}

void sub_1D2C82074(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, void *a6, int a7, uint64_t a8, char a9)
{
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  void *v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD v23[5];
  uint64_t v24;
  int v25;
  uint64_t v26;

  v24 = a8;
  v25 = a7;
  v26 = *MEMORY[0x1E0C80C00];
  v15 = sub_1D2CAADA4();
  v23[1] = *(_QWORD *)(v15 - 8);
  MEMORY[0x1E0C80A78](v15);
  v16 = sub_1D2CAABC4();
  v23[3] = *(_QWORD *)(v16 - 8);
  v23[4] = v16;
  MEMORY[0x1E0C80A78](v16);
  v23[2] = (char *)v23 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = objc_msgSend(a5, sel_inverseModOrder);
  if (v18)
  {
    v19 = v18;
    v20 = sub_1D2C831C0((uint64_t)v18, a6);

    v23[0] = v20;
    sub_1D2C80BE8(a1, a2, a3, a4, (uint64_t)v20, v24, v25, a9 & 1);
    v22 = v21;
    sub_1D2C5AE40(&qword_1ED985DA8, (uint64_t (*)(uint64_t))MEMORY[0x1E0CA9958], MEMORY[0x1E0CA9950]);
    sub_1D2CAABA0();
    __asm { BR              X10 }
  }
  __break(1u);
  JUMPOUT(0x1D2C82470);
}

id sub_1D2C82498(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, id a5, void *a6, void *a7, uint64_t a8, void *a9, char a10, uint64_t a11, char a12)
{
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  _BYTE *v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  void (*v31)(char *, uint64_t);
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  id v37;
  void *v38;
  uint64_t v39;
  void *v40;
  id v41;
  void *v42;
  uint64_t inited;
  void *v44;
  id v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  char v49;
  char v50;
  void *v51;
  void *v52;
  unint64_t v53;
  void *v54;
  _QWORD v56[5];
  unint64_t v57;
  uint64_t v58;
  void *v59;
  unint64_t v60;
  uint64_t v61;
  void *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  void *v66;
  uint64_t v67;
  id v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  void *v72;

  v67 = a8;
  v72 = a7;
  v66 = a6;
  v17 = sub_1D2CAAE4C();
  v18 = MEMORY[0x1E0C80A78](v17);
  if ((a12 & 1) == 0)
  {
    v62 = a9;
    v64 = a1;
    v65 = a2;
    v63 = a3;
    v22 = a4 >> 60;
    if (a4 >> 60 != 15 && a10 == 1)
    {
      sub_1D2C8716C();
      swift_allocError();
      *v23 = 1;
      swift_willThrow();
      return a5;
    }
    v57 = a4;
    v59 = a5;
    v24 = v18;
    v25 = (char *)v56 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
    v26 = v20;
    v61 = sub_1D2C91F70(a10, a11, 0);
    v60 = v27;
    sub_1D2CAAE28();
    v28 = sub_1D2CAAE1C();
    v30 = v29;
    v31 = *(void (**)(char *, uint64_t))(v26 + 8);
    v56[3] = v25;
    v56[4] = v24;
    v56[2] = v31;
    v31(v25, v24);
    if (v30 >> 60 == 15)
    {
      __break(1u);
    }
    else
    {
      v58 = a11;
      v32 = sub_1D2C91F70(a10, a11, 0);
      v34 = v33;
      v69 = v28;
      v70 = v30;
      sub_1D2C45028(v28, v30);
      sub_1D2C5EDA4(v32, v34);
      sub_1D2C45258(v32, v34);
      sub_1D2C6BAE4(v28, v30);
      v35 = v69;
      v36 = v70;
      v37 = v68;
      sub_1D2C92114(v64, v65, v69, v70);
      v39 = (uint64_t)v72;
      if (v37)
      {
        swift_unexpectedError();
        __break(1u);
        JUMPOUT(0x1D2C83098);
      }
      v40 = v38;
      v41 = sub_1D2C831C0((uint64_t)v59, v38);
      sub_1D2C45258(v35, v36);

      if (a10 == 1)
      {
        sub_1D2CAAD50();
        sub_1D2C5AE40((unint64_t *)&qword_1ED985C78, (uint64_t (*)(uint64_t))MEMORY[0x1E0CA9860], MEMORY[0x1E0CA9858]);
        sub_1D2CAAC00();
        __swift_instantiateConcreteTypeFromMangledName(&qword_1ED985DB0);
        swift_dynamicCast();
        v42 = v41;
        a5 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0D1BD70]), sel_initWithGeneratorForCP_, v71);
        __swift_instantiateConcreteTypeFromMangledName(&qword_1ED985DD0);
        inited = swift_initStackObject();
        *(_OWORD *)(inited + 16) = xmmword_1D2CACF70;
        *(_QWORD *)(inited + 32) = v41;
        v44 = v66;
        *(_QWORD *)(inited + 40) = v66;
        v68 = v42;
        v45 = v44;
        v46 = sub_1D2C91F70(1u, v58, 0);
        v48 = v47;
        v49 = sub_1D2C81EEC(a5, v62, inited, v39, v67, v46, v47, 0);
        v50 = v49;
        v51 = v45;
        v52 = v68;

        sub_1D2C45258(v46, v48);
        swift_setDeallocating();
        __swift_instantiateConcreteTypeFromMangledName(&qword_1ED985D90);
        swift_arrayDestroy();
        v53 = v60;
        if ((v50 & 1) != 0)
        {
          sub_1D2C82074(v64, v65, v63, v57, v59, v51, 1, v58, 0);
          a5 = v54;

          sub_1D2C45258(v61, v53);
        }
        else
        {
          sub_1D2C87444();
          swift_allocError();
          swift_willThrow();
          sub_1D2C45258(v61, v53);

        }
        return a5;
      }
      v68 = 0;
      if (a10 != 2)
      {
        __break(1u);
        JUMPOUT(0x1D2C83058);
      }
      sub_1D2C5D050(1868983881, 0xE400000000000000);
      if (v22 <= 0xE)
        __asm { BR              X10 }
    }
    __break(1u);
    JUMPOUT(0x1D2C83068);
  }
  v21 = sub_1D2C81594(a1, a2, a3, a4, a5, v66, v72, v67, a9, a10, a11, 1u);
  if (!v68)
    return (id)v21;
  return a5;
}

id sub_1D2C830A8(void *a1, uint64_t a2)
{
  id result;
  int v3;
  uint64_t v4;

  v4 = *MEMORY[0x1E0C80C00];
  v3 = 0;
  result = objc_msgSend(a1, sel_multiply_corecryptoError_, a2, &v3);
  if (!result)
  {
    sub_1D2CAAFC0();
    sub_1D2CAAE70();
    sub_1D2CAB0B0();
    sub_1D2CAAE70();
    swift_bridgeObjectRelease();
    result = (id)sub_1D2CAB05C();
    __break(1u);
  }
  return result;
}

id sub_1D2C831C0(uint64_t a1, id a2)
{
  id result;
  int v3;
  uint64_t v4;

  v4 = *MEMORY[0x1E0C80C00];
  v3 = 0;
  result = objc_msgSend(a2, sel_multiply_corecryptoError_, a1, &v3);
  if (!result)
  {
    sub_1D2CAAFC0();
    sub_1D2CAAE70();
    sub_1D2CAB0B0();
    sub_1D2CAAE70();
    swift_bridgeObjectRelease();
    result = (id)sub_1D2CAB05C();
    __break(1u);
  }
  return result;
}

id sub_1D2C832E0(void *a1, uint64_t a2)
{
  id result;
  int v3;
  uint64_t v4;

  v4 = *MEMORY[0x1E0C80C00];
  v3 = 0;
  result = objc_msgSend(a1, sel_add_corecryptoError_, a2, &v3);
  if (!result)
  {
    sub_1D2CAAFC0();
    sub_1D2CAAE70();
    sub_1D2CAB0B0();
    sub_1D2CAAE70();
    swift_bridgeObjectRelease();
    result = (id)sub_1D2CAB05C();
    __break(1u);
  }
  return result;
}

id sub_1D2C833F8(void *a1, uint64_t a2)
{
  id result;
  int v3;
  uint64_t v4;

  v4 = *MEMORY[0x1E0C80C00];
  v3 = 0;
  result = objc_msgSend(a1, sel_sub_corecryptoError_, a2, &v3);
  if (!result)
  {
    sub_1D2CAAFC0();
    sub_1D2CAAE70();
    sub_1D2CAB0B0();
    sub_1D2CAAE70();
    swift_bridgeObjectRelease();
    result = (id)sub_1D2CAB05C();
    __break(1u);
  }
  return result;
}

id TDMClient.__allocating_init(TID:)(uint64_t a1, unint64_t a2)
{
  objc_class *v2;
  id v5;
  id v6;

  v5 = objc_allocWithZone(v2);
  v6 = sub_1D2C86DFC(a1, a2);
  sub_1D2C45258(a1, a2);
  return v6;
}

id TDMClient.init(TID:)(uint64_t a1, unint64_t a2)
{
  id v4;

  v4 = sub_1D2C86DFC(a1, a2);
  sub_1D2C45258(a1, a2);
  return v4;
}

id sub_1D2C83608()
{
  uint64_t v0;
  id result;
  void *v2;
  uint64_t v3;

  result = objc_msgSend(*(id *)(v0 + OBJC_IVAR____TtC16CryptoKitPrivate9TDMClient_be), sel_serializedPublicKey_, 1);
  if (result)
  {
    v2 = result;
    v3 = sub_1D2CAA96C();

    return (id)v3;
  }
  else
  {
    __break(1u);
  }
  return result;
}

void sub_1D2C83700(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  __asm { BR              X10 }
}

id sub_1D2C83764(uint64_t a1, unint64_t a2, int a3, int a4, int a5, int a6, int a7, unint64_t a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,id a22,int a23,int a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45)
{
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  id v50;
  int64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  uint64_t v57;
  void *v58;
  id v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  id v63;
  void *v64;
  id v65;
  id v66;
  id v67;
  id v68;
  _BYTE *v69;
  int v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  int v74;
  uint64_t v75;
  void *v77;
  id v78;
  char v79;
  uint64_t v80;
  uint64_t v81;
  id v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t v87;
  uint64_t v89;
  uint64_t v90;
  void *v91;
  char v92;
  int v93;
  uint64_t v94;
  uint64_t v95;
  void *v96;

  v50 = (id)objc_opt_self();
  sub_1D2CAAD50();
  sub_1D2C5AE40((unint64_t *)&qword_1ED985C78, (uint64_t (*)(uint64_t))MEMORY[0x1E0CA9860], MEMORY[0x1E0CA9858]);
  sub_1D2CAAC00();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED985DB0);
  swift_dynamicCast();
  v91 = v50;
  v51 = (int64_t)objc_msgSend(v50, sel_groupOrderByteCountForCP_, v95);
  if (v51 < 0)
  {
    __break(1u);
    goto LABEL_18;
  }
  if (v51 + 0x4000000000000000 < 0)
  {
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  if (BYTE6(v45) != 2 * v51)
  {
    sub_1D2C8716C();
    swift_allocError();
    *v69 = 0;
    swift_willThrow();
    return v50;
  }
  v84 = v49;
  v52 = v48;
  sub_1D2C45028(v48, v45);
  sub_1D2CAAC00();
  swift_dynamicCast();
  v53 = (uint64_t)objc_msgSend(v50, sel_groupOrderByteCountForCP_, v94);
  if (v53 < 0)
    goto LABEL_19;
  v83 = v46;
  sub_1D2C56CD4(v53, v48, v45);
  v54 = v95;
  v55 = (unint64_t)v96;
  v93 = 0;
  sub_1D2C45028(v95, (unint64_t)v96);
  sub_1D2CAAC00();
  swift_dynamicCast();
  v50 = objc_allocWithZone(MEMORY[0x1E0D1BD78]);
  v56 = v45;
  v57 = v52;
  v58 = (void *)sub_1D2CAA954();
  v59 = objc_msgSend(v50, sel_initWithData_inGroup_reduction_corecryptoError_, v58, v94, 0, &v93);
  sub_1D2C45258(v54, v55);

  if (!v59)
  {
    v70 = v93;
    sub_1D2C4E7DC();
    swift_allocError();
    *(_DWORD *)v71 = v70;
    *(_BYTE *)(v71 + 4) = 0;
    swift_willThrow();
    v72 = v54;
    v73 = v55;
LABEL_14:
    sub_1D2C45258(v72, v73);
    return v50;
  }
  sub_1D2C45258(v54, v55);
  sub_1D2C45028(v57, v56);
  sub_1D2CAAC00();
  swift_dynamicCast();
  v60 = (uint64_t)objc_msgSend(v91, sel_groupOrderByteCountForCP_, v94);
  if (v60 < 0)
  {
LABEL_20:
    __break(1u);
    JUMPOUT(0x1D2C83D08);
  }
  sub_1D2C83D24(v60, v57, v56);
  v61 = v95;
  v50 = v96;
  v93 = 0;
  sub_1D2C45028(v95, (unint64_t)v96);
  sub_1D2CAAC00();
  swift_dynamicCast();
  v62 = v94;
  v63 = objc_allocWithZone(MEMORY[0x1E0D1BD78]);
  v64 = (void *)sub_1D2CAA954();
  v65 = objc_msgSend(v63, sel_initWithData_inGroup_reduction_corecryptoError_, v64, v62, 0, &v93);
  sub_1D2C45258(v61, (unint64_t)v50);

  if (!v65)
  {
    v74 = v93;
    sub_1D2C4E7DC();
    swift_allocError();
    *(_DWORD *)v75 = v74;
    *(_BYTE *)(v75 + 4) = 0;
    swift_willThrow();

    v72 = v61;
    v73 = (unint64_t)v50;
    goto LABEL_14;
  }
  sub_1D2C45258(v61, (unint64_t)v50);
  v66 = v59;
  v67 = v65;
  v50 = (id)v89;
  sub_1D2C45028(v89, a8);
  v68 = sub_1D2C69958();
  if (v47)
  {
    sub_1D2C45258(v89, a8);
  }
  else
  {
    v77 = v68;
    sub_1D2C45258(v89, a8);
    sub_1D2C45028(v87, v84);
    v78 = sub_1D2C69958();
    sub_1D2C45258(v87, v84);
    v92 = *(_BYTE *)(v83 + OBJC_IVAR____TtC16CryptoKitPrivate9TDMClient_oprfClient);
    v90 = *(_QWORD *)(v83 + OBJC_IVAR____TtC16CryptoKitPrivate9TDMClient_oprfClient + 8);
    v79 = *(_BYTE *)(v83 + OBJC_IVAR____TtC16CryptoKitPrivate9TDMClient_oprfClient + 16);
    v80 = *(_QWORD *)(v83 + OBJC_IVAR____TtC16CryptoKitPrivate9TDMClient_input);
    v81 = *(_QWORD *)(v83 + OBJC_IVAR____TtC16CryptoKitPrivate9TDMClient_input + 8);
    v82 = *(id *)(v83 + OBJC_IVAR____TtC16CryptoKitPrivate9TDMClient_blind);
    v50 = sub_1D2C82498(v80, v81, a1, a2, v82, v78, v66, (uint64_t)v67, v77, v92, v90, v79);

  }
  return v50;
}

void sub_1D2C83D24(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((a1 & 0x8000000000000000) == 0)
    __asm { BR              X9 }
  __break(1u);
  JUMPOUT(0x1D2C83E70);
}

void TDMClient.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

id TDMClient.__deallocating_deinit()
{
  return sub_1D2C63D6C(type metadata accessor for TDMClient);
}

uint64_t TDMServerEvaluation.proof.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR____TtC16CryptoKitPrivate19TDMServerEvaluation_proof);
  sub_1D2C45028(v1, *(_QWORD *)(v0 + OBJC_IVAR____TtC16CryptoKitPrivate19TDMServerEvaluation_proof + 8));
  return v1;
}

uint64_t TDMServerEvaluation.evaluatedElement.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR____TtC16CryptoKitPrivate19TDMServerEvaluation_evaluatedElement);
  sub_1D2C45028(v1, *(_QWORD *)(v0 + OBJC_IVAR____TtC16CryptoKitPrivate19TDMServerEvaluation_evaluatedElement + 8));
  return v1;
}

id TDMServerEvaluation.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

void TDMServerEvaluation.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

id TDMServerEvaluation.__deallocating_deinit()
{
  return sub_1D2C63D6C(type metadata accessor for TDMServerEvaluation);
}

id TDMServer.init()()
{
  void *v0;
  char *v1;
  id result;
  char *v3;
  id v4;
  objc_super v5;
  uint64_t v6;

  sub_1D2CAAD50();
  sub_1D2C5AE40((unint64_t *)&qword_1ED985C78, (uint64_t (*)(uint64_t))MEMORY[0x1E0CA9860], MEMORY[0x1E0CA9858]);
  v1 = v0;
  sub_1D2CAAC00();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED985DB0);
  swift_dynamicCast();
  result = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0D1BD78]), sel_initWithRandomScalarInGroup_, v6);
  if (result)
  {
    *(_QWORD *)&v1[OBJC_IVAR____TtC16CryptoKitPrivate9TDMServer_secret] = result;
    v3 = &v1[OBJC_IVAR____TtC16CryptoKitPrivate9TDMServer_oprfServer];
    *v3 = 1;
    *((_QWORD *)v3 + 1) = 4;
    *((_QWORD *)v3 + 2) = result;
    v3[24] = 1;
    v4 = result;

    v5.receiver = v1;
    v5.super_class = (Class)type metadata accessor for TDMServer();
    return objc_msgSendSuper2(&v5, sel_init);
  }
  else
  {
    __break(1u);
  }
  return result;
}

id sub_1D2C8439C()
{
  uint64_t v0;
  void *v1;
  id v2;
  id v3;
  id v4;
  id result;
  void *v6;
  uint64_t v7;
  uint64_t v8;

  v1 = *(void **)(v0 + OBJC_IVAR____TtC16CryptoKitPrivate9TDMServer_oprfServer + 16);
  sub_1D2CAAD50();
  sub_1D2C5AE40((unint64_t *)&qword_1ED985C78, (uint64_t (*)(uint64_t))MEMORY[0x1E0CA9860], MEMORY[0x1E0CA9858]);
  v2 = v1;
  sub_1D2CAAC00();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED985DB0);
  swift_dynamicCast();
  v3 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0D1BD70]), sel_initWithGeneratorForCP_, v8);
  v4 = sub_1D2C831C0((uint64_t)v2, v3);

  result = objc_msgSend(v4, sel_serializedPublicKey_, 1);
  if (result)
  {
    v6 = result;
    v7 = sub_1D2CAA96C();

    return (id)v7;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1D2C8451C()
{
  return 0;
}

uint64_t sub_1D2C845B8(uint64_t a1, unint64_t a2)
{
  _BYTE *v2;
  uint64_t v3;
  id v6;
  int v7;
  uint64_t v8;
  char v9;
  id v10;
  _BYTE *v11;
  char v12;
  id v13;
  void *v14;
  void *v15;
  void *v16;
  id v17;
  void *v18;
  uint64_t v19;
  unint64_t v20;
  id v21;
  void *v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  void *v26;
  void *v27;
  id v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  objc_class *v33;
  char *v34;
  char *v35;
  uint64_t *v36;
  _BYTE *v37;
  uint64_t result;
  void *v39;
  uint64_t v40;
  void *v41;
  void *v42;
  unint64_t v43;
  objc_super v44;
  uint64_t v45;
  void *v46;
  void *v47;
  uint64_t v48;

  v48 = *MEMORY[0x1E0C80C00];
  sub_1D2C45028(a1, a2);
  v6 = sub_1D2C69958();
  sub_1D2C45258(a1, a2);
  if (v3)
    return (uint64_t)v2;
  v7 = v2[OBJC_IVAR____TtC16CryptoKitPrivate9TDMServer_oprfServer];
  v8 = *(_QWORD *)&v2[OBJC_IVAR____TtC16CryptoKitPrivate9TDMServer_oprfServer + 8];
  v9 = v2[OBJC_IVAR____TtC16CryptoKitPrivate9TDMServer_oprfServer + 24];
  v10 = *(id *)&v2[OBJC_IVAR____TtC16CryptoKitPrivate9TDMServer_oprfServer + 16];
  sub_1D2CAAD50();
  sub_1D2C5AE40((unint64_t *)&qword_1ED985C78, (uint64_t (*)(uint64_t))MEMORY[0x1E0CA9860], MEMORY[0x1E0CA9858]);
  sub_1D2CAAC00();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED985DB0);
  swift_dynamicCast();
  v11 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0D1BD78]), sel_initWithRandomScalarInGroup_, v45);
  if (!v11)
  {
    __break(1u);
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  v2 = v11;
  if (v7 == 1)
    v12 = v9;
  else
    v12 = 1;
  if ((v12 & 1) == 0)
  {
    sub_1D2C8716C();
    swift_allocError();
    *v37 = 1;
    swift_willThrow();

    return (uint64_t)v2;
  }
  v13 = sub_1D2C7F148(&v46, v6, 0, 0x8000000000000uLL, v11, v7, v8, v10, v9);
  v14 = v46;
  if (!v46)
    goto LABEL_15;
  v15 = v13;
  v16 = v47;

  v17 = objc_msgSend(v14, sel_serializedBigEndianScalar);
  if (!v17)
    goto LABEL_17;
  v18 = v17;
  v42 = v14;
  v19 = sub_1D2CAA96C();
  v43 = v20;

  v41 = v16;
  v21 = objc_msgSend(v16, sel_serializedBigEndianScalar);
  if (!v21)
    goto LABEL_17;
  v22 = v21;
  v23 = sub_1D2CAA96C();
  v25 = v24;

  v46 = (void *)v19;
  v47 = (void *)v43;
  v40 = v19;
  sub_1D2C45028(v19, v43);
  sub_1D2C45028(v23, v25);
  sub_1D2C5EDA4(v23, v25);
  sub_1D2C45258(v23, v25);
  v26 = v46;
  v27 = v47;
  v28 = objc_msgSend(v15, sel_serializedPublicKey_, 1);
  v39 = v15;
  if (v28)
  {
    v29 = v28;
    v30 = sub_1D2CAA96C();
    v32 = v31;

    v33 = (objc_class *)type metadata accessor for TDMServerEvaluation();
    v34 = (char *)objc_allocWithZone(v33);
    v35 = &v34[OBJC_IVAR____TtC16CryptoKitPrivate19TDMServerEvaluation_proof];
    *(_QWORD *)v35 = v26;
    *((_QWORD *)v35 + 1) = v27;
    v36 = (uint64_t *)&v34[OBJC_IVAR____TtC16CryptoKitPrivate19TDMServerEvaluation_evaluatedElement];
    *v36 = v30;
    v36[1] = v32;
    v44.receiver = v34;
    v44.super_class = v33;
    v2 = objc_msgSendSuper2(&v44, sel_init);
    sub_1D2C45258(v23, v25);
    sub_1D2C45258(v40, v43);

    return (uint64_t)v2;
  }
LABEL_16:
  __break(1u);
LABEL_17:
  result = sub_1D2CAB05C();
  __break(1u);
  return result;
}

uint64_t sub_1D2C84A3C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, unint64_t a6)
{
  uint64_t v6;
  id *v13;
  uint64_t v14;
  char v15;
  int v16;
  id v17;
  char v18;

  v13 = (id *)(v6 + OBJC_IVAR____TtC16CryptoKitPrivate9TDMServer_oprfServer);
  v14 = *(_QWORD *)(v6 + OBJC_IVAR____TtC16CryptoKitPrivate9TDMServer_oprfServer + 8);
  v15 = *((_BYTE *)v13 + 24);
  v16 = *(unsigned __int8 *)v13;
  v17 = v13[2];
  sub_1D2C7FCF8(a3, a4, a1, a2, a5, a6, v16, v14, v17, v15);
  LOBYTE(v14) = v18;

  return v14 & 1;
}

id TDMServer.__deallocating_deinit()
{
  return sub_1D2C63D6C(type metadata accessor for TDMServer);
}

void sub_1D2C84C98(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, unint64_t a5, uint64_t a6, int a7)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  void (*v20)(_QWORD, _QWORD);
  id v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD v25[17];
  int v26;
  uint64_t v27;
  void (*v28)(_QWORD, _QWORD);
  char *v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;

  v26 = a7;
  v35 = a6;
  v25[15] = a2;
  v25[2] = a1;
  v39 = *MEMORY[0x1E0C80C00];
  v10 = sub_1D2CAADA4();
  v33 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v10);
  v36 = (char *)v25 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v34 = sub_1D2CAABC4();
  v32 = *(_QWORD *)(v34 - 8);
  MEMORY[0x1E0C80A78](v34);
  v31 = (char *)v25 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_1D2CAAE4C();
  v14 = *(_QWORD *)(v13 - 8);
  MEMORY[0x1E0C80A78](v13);
  v16 = (char *)v25 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1D2CAAE28();
  v17 = sub_1D2CAAE1C();
  v19 = v18;
  v20 = *(void (**)(_QWORD, _QWORD))(v14 + 8);
  v29 = v16;
  v30 = v13;
  v28 = v20;
  v20(v16, v13);
  if (v19 >> 60 == 15)
  {
    __break(1u);
  }
  else
  {
    v37 = v17;
    v38 = v19;
    sub_1D2C69B84(v17, v19);
    sub_1D2C45028(a4, a5);
    sub_1D2C5EDA4(a4, a5);
    v27 = a4;
    v25[13] = a5;
    sub_1D2C45258(a4, a5);
    sub_1D2C6BAE4(v17, v19);
    v21 = objc_msgSend(a3, sel_serializedPublicKey_, 1);
    if (v21)
    {
      v22 = v21;
      v25[9] = sub_1D2CAA96C();
      v24 = v23;

      __asm { BR              X10 }
    }
  }
  __break(1u);
  JUMPOUT(0x1D2C85E00);
}

void sub_1D2C85E9C(uint64_t a1, uint64_t a2, void *a3, void *a4, void *a5, void *a6, void *a7)
{
  id v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  void *v17;
  id v18;
  void *v19;
  id v20;
  void *v21;
  id v22;
  void *v23;
  uint64_t v24;

  v24 = sub_1D2CAAE4C();
  MEMORY[0x1E0C80A78](v24);
  v12 = objc_msgSend(a3, sel_serializedPublicKey_, 1);
  if (v12)
  {
    v13 = v12;
    sub_1D2CAA96C();
    v15 = v14;

    v16 = objc_msgSend(a4, sel_serializedPublicKey_, 1);
    if (v16)
    {
      v17 = v16;
      sub_1D2CAA96C();

      v18 = objc_msgSend(a5, sel_serializedPublicKey_, 1);
      if (v18)
      {
        v19 = v18;
        sub_1D2CAA96C();

        v20 = objc_msgSend(a6, sel_serializedPublicKey_, 1);
        if (v20)
        {
          v21 = v20;
          sub_1D2CAA96C();

          v22 = objc_msgSend(a7, sel_serializedPublicKey_, 1);
          if (v22)
          {
            v23 = v22;
            sub_1D2CAA96C();

            __asm { BR              X10 }
          }
LABEL_11:
          __break(1u);
          JUMPOUT(0x1D2C8690CLL);
        }
LABEL_10:
        __break(1u);
        goto LABEL_11;
      }
LABEL_9:
      __break(1u);
      goto LABEL_10;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  goto LABEL_9;
}

void sub_1D2C86984(uint64_t a1)
{
  __asm { BR              X13 }
}

void *sub_1D2C869E0(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t __b, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  int v27;
  void *result;
  unint64_t v29;
  uint64_t v30;
  unsigned int v31;
  unsigned __int8 v32;
  unsigned __int8 v33;
  unsigned __int8 v34;

  v30 = v25;
  LOWORD(v31) = v24;
  BYTE2(v31) = BYTE2(v24);
  HIBYTE(v31) = BYTE3(v24);
  v32 = BYTE4(v24);
  v33 = BYTE5(v24);
  v34 = BYTE6(v24);
  result = memset(&v30, v27, BYTE6(v24));
  v29 = v31 | ((unint64_t)v32 << 32) | ((unint64_t)v33 << 40) | ((unint64_t)v34 << 48);
  *v26 = v30;
  v26[1] = v29;
  return result;
}

char *sub_1D2C86B6C(int *a1, int a2)
{
  char *result;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  int64_t v9;
  uint64_t v10;
  size_t v11;

  result = (char *)sub_1D2CAA8F4();
  v5 = *a1;
  v6 = a1[1];
  if ((int)v6 < (int)v5)
  {
    __break(1u);
    goto LABEL_9;
  }
  result = (char *)sub_1D2CAA864();
  if (!result)
  {
LABEL_10:
    __break(1u);
    return result;
  }
  v7 = result;
  result = (char *)sub_1D2CAA888();
  v8 = v5 - (_QWORD)result;
  if (__OFSUB__(v5, result))
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  v9 = v6 - v5;
  v10 = sub_1D2CAA87C();
  if (v10 >= v9)
    v11 = v9;
  else
    v11 = v10;
  return (char *)memset(&v7[v8], a2, v11);
}

uint64_t sub_1D2C86BEC(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = sub_1D2CAA864();
  if (!result || (result = sub_1D2CAA888(), !__OFSUB__(a1, result)))
  {
    if (!__OFSUB__(a2, a1))
    {
      sub_1D2CAA87C();
      sub_1D2CAADA4();
      sub_1D2C5AE40(&qword_1ED985DA8, (uint64_t (*)(uint64_t))MEMORY[0x1E0CA9958], MEMORY[0x1E0CA9950]);
      return sub_1D2CAAB88();
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_1D2C86CB0(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  BOOL v4;
  uint64_t v5;

  v4 = __OFADD__(a1, a2);
  v5 = a1 + a2;
  if (v4)
  {
    __break(1u);
    JUMPOUT(0x1D2C86D10);
  }
  return ((uint64_t (*)(uint64_t))((char *)&loc_1D2C86CC8 + dword_1D2C86D14[a4 >> 62]))(v5);
}

uint64_t sub_1D2C86D24(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  return ((uint64_t (*)(void))((char *)&loc_1D2C86D34 + dword_1D2C86DDC[a4 >> 62]))();
}

uint64_t sub_1D2C86D48@<X0>(uint64_t a1@<X0>, uint64_t a2@<X3>, int a3@<W8>)
{
  if (BYTE6(a2) < a1 || a1 < 0)
  {
    __break(1u);
    JUMPOUT(0x1D2C86DD4);
  }
  return ((uint64_t (*)(void))((char *)&loc_1D2C86D84 + dword_1D2C86DEC[a3]))();
}

id sub_1D2C86DFC(uint64_t a1, unint64_t a2)
{
  char *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t *v9;
  char *v10;
  uint64_t (*v11)(uint64_t);
  char *v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  void (*v18)(char *, uint64_t);
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  void *v36;
  void *v37;
  id v38;
  objc_class *v39;
  id result;
  unint64_t v41;
  objc_super v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;

  v5 = sub_1D2CAAE4C();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v41 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = (uint64_t *)&v2[OBJC_IVAR____TtC16CryptoKitPrivate9TDMClient_input];
  *v9 = a1;
  v9[1] = a2;
  v10 = &v2[OBJC_IVAR____TtC16CryptoKitPrivate9TDMClient_oprfClient];
  *v10 = 1;
  *((_QWORD *)v10 + 1) = 4;
  v10[16] = 1;
  sub_1D2CAAD50();
  v11 = (uint64_t (*)(uint64_t))MEMORY[0x1E0CA9860];
  v12 = v2;
  v41 = a2;
  sub_1D2C45028(a1, a2);
  sub_1D2C5AE40((unint64_t *)&qword_1ED985C78, v11, MEMORY[0x1E0CA9858]);
  sub_1D2CAAC00();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED985DB0);
  swift_dynamicCast();
  v13 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0D1BD78]), sel_initWithRandomScalarInGroup_, v43);
  if (!v13)
  {
    __break(1u);
    goto LABEL_6;
  }
  v14 = (uint64_t)v13;
  sub_1D2CAAE28();
  v15 = sub_1D2CAAE1C();
  v17 = v16;
  v18 = *(void (**)(char *, uint64_t))(v6 + 8);
  v18(v8, v5);
  if (v17 >> 60 == 15)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  sub_1D2CAAE28();
  v19 = sub_1D2CAAE1C();
  v21 = v20;
  v18(v8, v5);
  if (v21 >> 60 != 15)
  {
    sub_1D2C5AEC0(1, 1);
    v23 = v22;
    v25 = v24;
    v43 = v19;
    v44 = v21;
    sub_1D2C45028(v19, v21);
    sub_1D2C5EDA4(v23, v25);
    sub_1D2C45258(v23, v25);
    sub_1D2C6BAE4(v19, v21);
    v26 = v43;
    v27 = v44;
    sub_1D2C5AEC0(4, 2);
    v29 = v28;
    v31 = v30;
    v45 = v26;
    v46 = v27;
    sub_1D2C45028(v26, v27);
    sub_1D2C5EDA4(v29, v31);
    sub_1D2C45258(v29, v31);
    sub_1D2C45258(v26, v27);
    v32 = v45;
    v33 = v46;
    v45 = v15;
    v46 = v17;
    sub_1D2C45028(v15, v17);
    sub_1D2C5EDA4(v32, v33);
    sub_1D2C45258(v32, v33);
    sub_1D2C6BAE4(v15, v17);
    v34 = v45;
    v35 = v46;
    sub_1D2C92114(a1, v41, v45, v46);
    v37 = v36;
    v38 = sub_1D2C831C0(v14, v36);
    sub_1D2C45258(v34, v35);

    *(_QWORD *)&v12[OBJC_IVAR____TtC16CryptoKitPrivate9TDMClient_blind] = v14;
    *(_QWORD *)&v12[OBJC_IVAR____TtC16CryptoKitPrivate9TDMClient_be] = v38;

    v39 = (objc_class *)type metadata accessor for TDMClient();
    v42.receiver = v12;
    v42.super_class = v39;
    return objc_msgSendSuper2(&v42, sel_init);
  }
LABEL_7:
  __break(1u);
  result = (id)swift_unexpectedError();
  __break(1u);
  return result;
}

unint64_t sub_1D2C8716C()
{
  unint64_t result;

  result = qword_1EFCA0278;
  if (!qword_1EFCA0278)
  {
    result = MEMORY[0x1D8245F38](&unk_1D2CAEB9C, &type metadata for OPRFErrors);
    atomic_store(result, (unint64_t *)&qword_1EFCA0278);
  }
  return result;
}

uint64_t type metadata accessor for TDMClient()
{
  return objc_opt_self();
}

uint64_t type metadata accessor for TDMServerEvaluation()
{
  return objc_opt_self();
}

uint64_t type metadata accessor for TDMServer()
{
  return objc_opt_self();
}

uint64_t method lookup function for TDMClient()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of TDMClient.__allocating_init(TID:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 112))();
}

uint64_t dispatch thunk of TDMClient.blindedElement()()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x78))();
}

uint64_t dispatch thunk of TDMClient.finalize(FSR:evaluatedElement:proof:publicKey:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x80))();
}

uint64_t method lookup function for TDMServerEvaluation()
{
  return swift_lookUpClassMethod();
}

uint64_t method lookup function for TDMServer()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of TDMServer.publicKey()()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x60))();
}

uint64_t dispatch thunk of TDMServer.info()()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x68))();
}

uint64_t dispatch thunk of TDMServer.evaluate(blindedElement:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x70))();
}

uint64_t dispatch thunk of TDMServer.verifyToken(output:TID:FSR:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x78))();
}

uint64_t storeEnumTagSinglePayload for OPRFErrors(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1D2C87350 + 4 * byte_1D2CAEAB5[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1D2C87384 + 4 * asc_1D2CAEAB0[v4]))();
}

uint64_t sub_1D2C87384(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1D2C8738C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1D2C87394);
  return result;
}

uint64_t sub_1D2C873A0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1D2C873A8);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1D2C873AC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1D2C873B4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for OPRFErrors()
{
  return &type metadata for OPRFErrors;
}

unint64_t sub_1D2C873D4()
{
  unint64_t result;

  result = qword_1EFCA02B8;
  if (!qword_1EFCA02B8)
  {
    result = MEMORY[0x1D8245F38](&unk_1D2CAEB74, &type metadata for OPRFErrors);
    atomic_store(result, (unint64_t *)&qword_1EFCA02B8);
  }
  return result;
}

void sub_1D2C87418(void *a1, void *a2)
{
  if (a1)
  {

  }
}

unint64_t sub_1D2C87444()
{
  unint64_t result;

  result = qword_1EFCA02C0;
  if (!qword_1EFCA02C0)
  {
    result = MEMORY[0x1D8245F38](&unk_1D2CB0048, &type metadata for OPRF.Errors);
    atomic_store(result, (unint64_t *)&qword_1EFCA02C0);
  }
  return result;
}

uint64_t SPAKE2.Spake2Error.hash(into:)()
{
  return sub_1D2CAB140();
}

BOOL static SPAKE2.Spake2Error.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t SPAKE2.Spake2Error.hashValue.getter()
{
  sub_1D2CAB134();
  sub_1D2CAB140();
  return sub_1D2CAB158();
}

uint64_t static SPAKE2.minimumSeedCount.getter()
{
  return 16;
}

uint64_t static SPAKE2.CipherSuite.== infix(_:_:)()
{
  return 1;
}

uint64_t SPAKE2.CipherSuite.hash(into:)()
{
  return sub_1D2CAB140();
}

uint64_t SPAKE2.CipherSuite.hashValue.getter()
{
  sub_1D2CAB134();
  sub_1D2CAB140();
  return sub_1D2CAB158();
}

uint64_t SPAKE2.WL.w0.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)v0;
  sub_1D2C45028(*(_QWORD *)v0, *(_QWORD *)(v0 + 8));
  return v1;
}

uint64_t SPAKE2.WL.L.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);
  sub_1D2C45028(v1, *(_QWORD *)(v0 + 24));
  return v1;
}

void sub_1D2C875E4(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  v4 = sub_1D2CAABE8();
  v3 = MEMORY[0x1E0C80A78](v4);
  MEMORY[0x1E0C80A78](v3);
  __asm { BR              X10 }
}

uint64_t sub_1D2C87698()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t result;
  uint64_t v13;
  uint64_t (*v14)(uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  _BYTE *v21;
  uint64_t v22;
  int v23;
  __int128 v24;
  _OWORD *v25;
  uint64_t v26;
  _BYTE *v27;
  uint64_t v28;

  if (BYTE6(v1) < 0x10uLL)
  {
    sub_1D2C881C8();
    swift_allocError();
    *v11 = 3;
    return swift_willThrow();
  }
  *(_QWORD *)(v10 - 136) = v0;
  *(_QWORD *)(v10 - 96) = v5;
  *(_QWORD *)(v10 - 88) = v1;
  sub_1D2C45028(v5, v1);
  sub_1D2CAABDC();
  *(_QWORD *)(v10 - 96) = v3;
  *(_QWORD *)(v10 - 88) = v9;
  *(_QWORD *)(v10 - 112) = v8;
  *(_QWORD *)(v10 - 104) = v6;
  v13 = *(_QWORD *)(v2 + 24);
  if (v13 + 0x4000000000000000 < 0)
  {
    __break(1u);
    goto LABEL_18;
  }
  if (__OFADD__(2 * v13, 16))
  {
LABEL_18:
    __break(1u);
    JUMPOUT(0x1D2C879F4);
  }
  sub_1D2CAAD98();
  sub_1D2C4C284();
  sub_1D2C6F624();
  sub_1D2CAAC90();
  v14 = *(uint64_t (**)(uint64_t, uint64_t))(v4 + 8);
  v15 = v7;
  v16 = *(_QWORD *)(v10 - 120);
  v17 = v14(v15, v16);
  MEMORY[0x1E0C80A78](v17);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED985DB8);
  v18 = sub_1D2CAABD0();
  MEMORY[0x1E0C80A78](v18);
  sub_1D2CAABD0();
  *(_DWORD *)(v10 - 68) = 0;
  *(_QWORD *)(v10 - 96) = sub_1D2C677A0(v13);
  *(_QWORD *)(v10 - 88) = v19;
  sub_1D2C8EB88(v10 - 96);
  v20 = *(_DWORD *)(v10 - 68);
  if (v20)
  {
    if (v20 == -2)
    {
      sub_1D2C881C8();
      swift_allocError();
      *v21 = 0;
    }
    else
    {
      sub_1D2C4E7DC();
      swift_allocError();
      *(_DWORD *)v26 = v20;
      *(_BYTE *)(v26 + 4) = 0;
    }
    swift_willThrow();
    swift_bridgeObjectRelease();
  }
  else
  {
    *(_QWORD *)(v10 - 112) = sub_1D2C677A0(v13);
    *(_QWORD *)(v10 - 104) = v22;
    sub_1D2C8EB88(v10 - 112);
    v23 = *(_DWORD *)(v10 - 68);
    if (v23 == -2)
    {
      sub_1D2C881C8();
      swift_allocError();
      *v27 = 0;
    }
    else
    {
      if (!v23)
      {
        result = v14(*(_QWORD *)(v10 - 136), v16);
        v24 = *(_OWORD *)(v10 - 112);
        v25 = *(_OWORD **)(v10 - 144);
        *v25 = *(_OWORD *)(v10 - 96);
        v25[1] = v24;
        return result;
      }
      sub_1D2C4E7DC();
      swift_allocError();
      *(_DWORD *)v28 = v23;
      *(_BYTE *)(v28 + 4) = 0;
    }
    swift_willThrow();
    sub_1D2C45258(*(_QWORD *)(v10 - 112), *(_QWORD *)(v10 - 104));
  }
  sub_1D2C45258(*(_QWORD *)(v10 - 96), *(_QWORD *)(v10 - 88));
  return v14(*(_QWORD *)(v10 - 136), v16);
}

int64_t sub_1D2C87A0C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, int64_t *a5@<X8>)
{
  uint64_t v8;
  int64_t result;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v8 = *(_QWORD *)(a3 + 24);
  result = v8 + a4;
  if (__OFADD__(v8, a4))
  {
    __break(1u);
  }
  else
  {
    v10 = sub_1D2C5781C(result, a1, a2);
    result = sub_1D2C49A4C(v10, v11, v12, v13);
    *a5 = result;
  }
  return result;
}

void sub_1D2C87A58(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X6>, _OWORD *a4@<X8>)
{
  uint64_t v4;
  __int128 v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  int v11;
  _BYTE *v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  unint64_t v16;
  int v17;

  sub_1D2C875E4(a1, a2);
  if (!v4)
  {
    v7 = v14;
    v8 = v15;
    v9 = v16;
    v17 = 0;
    *(_QWORD *)&v14 = sub_1D2C677A0(*(_QWORD *)(a3 + 32));
    *((_QWORD *)&v14 + 1) = v10;
    sub_1D2C45028(v7, *((unint64_t *)&v7 + 1));
    sub_1D2C45028(v15, v16);
    sub_1D2C8EEDC((uint64_t)&v14);
    v11 = v17;
    if (v17 == -2)
    {
      sub_1D2C881C8();
      swift_allocError();
      *v12 = 0;
    }
    else
    {
      if (!v17)
      {
        sub_1D2C45028(v7, *((unint64_t *)&v7 + 1));
        sub_1D2C45258(v7, *((unint64_t *)&v7 + 1));
        sub_1D2C45258(v8, v9);
        *a4 = v7;
        a4[1] = v14;
        return;
      }
      sub_1D2C4E7DC();
      swift_allocError();
      *(_DWORD *)v13 = v11;
      *(_BYTE *)(v13 + 4) = 0;
    }
    swift_willThrow();
    sub_1D2C45258(v14, *((unint64_t *)&v14 + 1));
    sub_1D2C45258(v7, *((unint64_t *)&v7 + 1));
    sub_1D2C45258(v8, v9);
  }
}

void sub_1D2C87BC0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  __asm { BR              X10 }
}

uint64_t sub_1D2C87C24()
{
  _DWORD *v0;
  uint64_t v1;
  uint64_t result;

  if (!v1)
  {
    __break(1u);
    goto LABEL_5;
  }
  if (!ccrng())
  {
LABEL_5:
    __break(1u);
    JUMPOUT(0x1D2C87EA0);
  }
  result = ccspake_generate_L();
  *v0 = result;
  return result;
}

void sub_1D2C87ED4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  if (ccrng())
    __asm { BR              X16 }
  __break(1u);
  JUMPOUT(0x1D2C880B8);
}

__n128 SPAKE2.Prover.init(w0:w1:context:verifierID:proverID:cipherSuite:)@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11)
{
  __n128 result;

  sub_1D2C8DE14(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
  return result;
}

uint64_t SPAKE2.Prover.init(seed:salt:info:context:verifierID:proverID:cipherSuite:)@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X4>, unint64_t a6@<X5>, uint64_t a7@<X6>, unint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, unint64_t a11, uint64_t a12, unint64_t a13, uint64_t a14)
{
  return sub_1D2C8DFA8(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, (void (*)(__int128 *__return_ptr, uint64_t, unint64_t, uint64_t, unint64_t, uint64_t, unint64_t, _QWORD *))sub_1D2C875E4);
}

uint64_t SPAKE2.Prover.getShare()()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 64);
  sub_1D2C45028(v1, *(_QWORD *)(v0 + 72));
  return v1;
}

void SPAKE2.Prover.processPeerShareAndGenerateVerificationTag(peerShare:)(uint64_t a1, uint64_t a2)
{
  sub_1D2C8E21C(a1, a2);
}

unint64_t sub_1D2C881C8()
{
  unint64_t result;

  result = qword_1EFCA02C8;
  if (!qword_1EFCA02C8)
  {
    result = MEMORY[0x1D8245F38](&protocol conformance descriptor for SPAKE2.Spake2Error, &type metadata for SPAKE2.Spake2Error);
    atomic_store(result, (unint64_t *)&qword_1EFCA02C8);
  }
  return result;
}

void SPAKE2.Prover.processPeerVerificationTagAndGenerateKey(peerVerificationTag:)(uint64_t a1, uint64_t a2)
{
  sub_1D2C8E6D0(a1, a2);
}

uint64_t _s16CryptoKitPrivate6SPAKE2O6ProverV2wsAC2WSVvg_0@<X0>(uint64_t *a1@<X8>)
{
  _QWORD *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;

  v2 = v1[10];
  v3 = v1[11];
  v4 = v1[12];
  v5 = v1[13];
  *a1 = v2;
  a1[1] = v3;
  a1[2] = v4;
  a1[3] = v5;
  sub_1D2C45028(v2, v3);
  return sub_1D2C45028(v4, v5);
}

void sub_1D2C8828C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  size_t v8;
  uint64_t v9;

  v8 = *(_QWORD *)(a8 + 16);
  if ((v8 & 0x8000000000000000) == 0)
  {
    if (v8)
    {
      v9 = sub_1D2CAAF30();
      *(_QWORD *)(v9 + 16) = v8;
      bzero((void *)(v9 + 32), v8);
    }
    __asm { BR              X10 }
  }
  __break(1u);
  JUMPOUT(0x1D2C8A51CLL);
}

void sub_1D2C8B600(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __asm { BR              X10 }
}

uint64_t sub_1D2C8B684(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v20;
  uint64_t v21;

  v15 = v13;
  v16 = v8;
  *(_QWORD *)(v14 - 112) = v9;
  *(_WORD *)(v14 - 104) = a4;
  *(_BYTE *)(v14 - 102) = BYTE2(a4);
  v17 = v12;
  *(_BYTE *)(v14 - 101) = BYTE3(a4);
  *(_BYTE *)(v14 - 100) = BYTE4(a4);
  *(_BYTE *)(v14 - 99) = BYTE5(a4);
  v18 = v15;
  v20 = v7;
  sub_1D2C45028(a7, v11);
  sub_1D2C45028(v17, v16);
  sub_1D2C45028(v18, v20);
  *(_QWORD *)(v14 - 168) = a7;
  *(_QWORD *)(v14 - 160) = v11;
  sub_1D2C45028(a7, v11);
  sub_1D2C45028(v17, v16);
  v21 = sub_1D2C45028(v18, v20);
  return ((uint64_t (*)(uint64_t))((char *)&loc_1D2C8B788 + dword_1D2C8CAF4[v10 >> 62]))(v21);
}

uint64_t sub_1D2C8B7A4()
{
  unint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  *(_QWORD *)(v3 - 128) = v1;
  v4 = v0;
  *(_WORD *)(v3 - 120) = v0;
  *(_BYTE *)(v3 - 118) = BYTE2(v0);
  *(_BYTE *)(v3 - 117) = BYTE3(v0);
  *(_BYTE *)(v3 - 116) = BYTE4(v0);
  *(_BYTE *)(v3 - 115) = BYTE5(v0);
  v5 = v3 - 128 + BYTE6(v0);
  sub_1D2C45028(v1, v0);
  v6 = *(_QWORD *)(v3 - 152);
  sub_1D2C45028(v2, v6);
  v7 = v5;
  v8 = *(_QWORD *)(v3 - 144);
  v9 = *(_QWORD *)(v3 - 160);
  v10 = *(_QWORD *)(v3 - 176);
  sub_1D2C8D140(v3 - 128, v7, *(_QWORD *)(v3 - 168), v9);
  *(_QWORD *)(v3 - 176) = v10;
  if (v10)
  {
    sub_1D2C45258(v1, v4);
    sub_1D2C45258(v2, v6);
    v15 = *(_QWORD *)(v3 - 168);
    sub_1D2C45258(v15, v9);
    sub_1D2C45258(v19, v8);
    v16 = *(_QWORD *)(v3 - 136);
    sub_1D2C45258(v17, v16);
    sub_1D2C45258(v2, v6);
    sub_1D2C45258(v1, v4);
    sub_1D2C45258(v15, v9);
    sub_1D2C45258(v19, *(_QWORD *)(v3 - 144));
    sub_1D2C45258(v17, v16);
    sub_1D2C45258(v2, v6);
    sub_1D2C45258(v1, v4);
    __break(1u);
    JUMPOUT(0x1D2C8C974);
  }
  v11 = v8;
  sub_1D2C45258(v2, v6);
  v12 = *(_QWORD *)(v3 - 136);
  sub_1D2C45258(v1, v4);
  sub_1D2C45258(v1, v4);
  v13 = *(_QWORD *)(v3 - 168);
  sub_1D2C45258(v13, v9);
  sub_1D2C45258(v19, v11);
  sub_1D2C45258(v17, v12);
  sub_1D2C45258(v18, v6);
  sub_1D2C45258(v1, v4);
  sub_1D2C45258(v13, v9);
  sub_1D2C45258(v19, v11);
  sub_1D2C45258(v17, *(_QWORD *)(v3 - 136));
  return sub_1D2C45258(v18, v6);
}

void sub_1D2C8CB04(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __asm { BR              X10 }
}

uint64_t sub_1D2C8CB9C()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 - 112) = v0;
  *(_WORD *)(v9 - 104) = v1;
  *(_BYTE *)(v9 - 102) = BYTE2(v1);
  *(_BYTE *)(v9 - 101) = BYTE3(v1);
  *(_BYTE *)(v9 - 100) = BYTE4(v1);
  *(_BYTE *)(v9 - 99) = BYTE5(v1);
  sub_1D2C45028(v2, v8);
  sub_1D2C45028(v7, v5);
  sub_1D2C45028(v6, v4);
  sub_1D2C45028(v3, *(_QWORD *)(v9 - 120));
  v10 = *(_QWORD *)(v9 - 136);
  sub_1D2C8D140(v9 - 112, v9 - 112 + BYTE6(v1), v2, v8);
  if (v10)
  {
    sub_1D2C45258(v0, v1);
    sub_1D2C45258(v2, v8);
    sub_1D2C45258(v7, v5);
    sub_1D2C45258(v6, v4);
    sub_1D2C45258(*(_QWORD *)(v9 - 128), *(_QWORD *)(v9 - 120));
    sub_1D2C45258(v0, v1);
    __break(1u);
    JUMPOUT(0x1D2C8D130);
  }
  sub_1D2C45258(v0, v1);
  sub_1D2C45258(v2, v8);
  sub_1D2C45258(v7, v5);
  sub_1D2C45258(v6, v4);
  sub_1D2C45258(*(_QWORD *)(v9 - 128), *(_QWORD *)(v9 - 120));
  return sub_1D2C45258(v0, v1);
}

void sub_1D2C8D140(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __asm { BR              X10 }
}

uint64_t sub_1D2C8D1D8()
{
  unint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 - 112) = v6;
  *(_WORD *)(v9 - 104) = v0;
  *(_BYTE *)(v9 - 102) = BYTE2(v0);
  *(_BYTE *)(v9 - 101) = BYTE3(v0);
  *(_BYTE *)(v9 - 100) = BYTE4(v0);
  *(_BYTE *)(v9 - 99) = BYTE5(v0);
  sub_1D2C45028(v6, v0);
  sub_1D2C45028(v8, v7);
  sub_1D2C45028(v5, v4);
  sub_1D2C45028(v3, v2);
  sub_1D2C45028(v1, *(_QWORD *)(v9 - 120));
  v10 = *(_QWORD *)(v9 - 136);
  sub_1D2C8D800(v9 - 112, v9 - 112 + BYTE6(v0), v6, v0, v8, v7);
  if (v10)
  {
    sub_1D2C45258(v6, v0);
    sub_1D2C45258(v8, v7);
    sub_1D2C45258(v5, v4);
    sub_1D2C45258(v3, v2);
    sub_1D2C45258(*(_QWORD *)(v9 - 128), *(_QWORD *)(v9 - 120));
    __break(1u);
    JUMPOUT(0x1D2C8D75CLL);
  }
  sub_1D2C45258(v6, v0);
  sub_1D2C45258(v8, v7);
  sub_1D2C45258(v5, v4);
  sub_1D2C45258(v3, v2);
  return sub_1D2C45258(*(_QWORD *)(v9 - 128), *(_QWORD *)(v9 - 120));
}

void sub_1D2C8D800(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  __asm { BR              X10 }
}

uint64_t sub_1D2C8D87C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t (*v8)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  *(_QWORD *)(v21 - 112) = v20;
  *(_WORD *)(v21 - 104) = v18;
  *(_BYTE *)(v21 - 102) = BYTE2(v18);
  *(_BYTE *)(v21 - 101) = BYTE3(v18);
  *(_BYTE *)(v21 - 100) = BYTE4(v18);
  *(_BYTE *)(v21 - 99) = BYTE5(v18);
  return v8(v21 - 112, v21 - 112 + BYTE6(v18), a7, a8, a5, a6, v10, v9, v11, v12, v15, a3, a4, v14, a1, v19, v13, v16, v17);
}

void sub_1D2C8DBB4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  if (ccrng())
    __asm { BR              X16 }
  __break(1u);
  JUMPOUT(0x1D2C8DD98);
}

__n128 SPAKE2.Verifier.init(w0:L:context:verifierID:proverID:cipherSuite:)@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11)
{
  __n128 result;

  sub_1D2C8DE14(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
  return result;
}

void sub_1D2C8DE14(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11)
{
  uint64_t v11;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  _QWORD v30[4];
  __int128 v31;
  uint64_t v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  uint64_t v38;
  _QWORD v39[5];
  int64x2_t v40;
  uint64_t v41;

  v41 = a4;
  v19 = ccspake_cp_256_rfc();
  if (!v19)
  {
    __break(1u);
    goto LABEL_7;
  }
  v20 = v19;
  v21 = ccspake_mac_hkdf_hmac_sha256();
  if (!v21)
  {
LABEL_7:
    __break(1u);
    return;
  }
  v39[0] = v20;
  v39[1] = v21;
  v39[2] = ccspake_sizeof_ctx();
  v39[3] = ccspake_sizeof_w();
  v39[4] = ccspake_sizeof_point();
  v40 = vdupq_n_s64(0x20uLL);
  v30[0] = a1;
  v30[1] = a2;
  v30[2] = a3;
  v30[3] = v41;
  sub_1D2C8828C((uint64_t)v30, a5, a6, a7, a8, a10, a11, (uint64_t)v39);
  if (!v11)
  {
    v22 = v32;
    v23 = v38;
    v24 = v33;
    v25 = v34;
    v26 = v35;
    v27 = v36;
    v28 = v37;
    *(_OWORD *)a9 = v31;
    *(_QWORD *)(a9 + 16) = v22;
    *(_OWORD *)(a9 + 24) = v24;
    *(_OWORD *)(a9 + 40) = v25;
    *(_OWORD *)(a9 + 56) = v26;
    *(_OWORD *)(a9 + 72) = v27;
    *(_OWORD *)(a9 + 88) = v28;
    *(_QWORD *)(a9 + 104) = v23;
  }
}

uint64_t SPAKE2.Verifier.init(seed:salt:info:context:verifierID:proverID:cipherSuite:)@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X4>, unint64_t a6@<X5>, uint64_t a7@<X6>, unint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, unint64_t a11, uint64_t a12, unint64_t a13, uint64_t a14)
{
  return sub_1D2C8DFA8(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, (void (*)(__int128 *__return_ptr, uint64_t, unint64_t, uint64_t, unint64_t, uint64_t, unint64_t, _QWORD *))sub_1D2C87A58);
}

uint64_t sub_1D2C8DFA8@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X4>, unint64_t a6@<X5>, uint64_t a7@<X6>, unint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, unint64_t a11, uint64_t a12, unint64_t a13, uint64_t a14, void (*a15)(__int128 *__return_ptr, uint64_t, unint64_t, uint64_t, unint64_t, uint64_t, unint64_t, _QWORD *))
{
  uint64_t v15;
  uint64_t result;
  uint64_t v23;
  unint64_t v24;
  __int128 v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  uint64_t v36;
  __int128 v39;
  uint64_t v40;
  uint64_t v41;
  __int128 v42;
  uint64_t v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  uint64_t v49;
  _QWORD v50[5];
  int64x2_t v51;
  unint64_t v52;

  v52 = a6;
  result = ccspake_cp_256_rfc();
  if (!result)
  {
    __break(1u);
    goto LABEL_7;
  }
  v23 = result;
  v36 = a9;
  result = ccspake_mac_hkdf_hmac_sha256();
  if (!result)
  {
LABEL_7:
    __break(1u);
    return result;
  }
  v50[0] = v23;
  v50[1] = result;
  v50[2] = ccspake_sizeof_ctx();
  v50[3] = ccspake_sizeof_w();
  v50[4] = ccspake_sizeof_point();
  v51 = vdupq_n_s64(0x20uLL);
  v24 = v52;
  a15(&v42, a1, a2, a3, a4, a5, v52, v50);
  if (v15)
  {
    sub_1D2C45258(a12, a13);
    sub_1D2C45258(a10, a11);
    sub_1D2C45258(a7, a8);
    sub_1D2C45258(a5, v24);
    sub_1D2C45258(a3, a4);
    return sub_1D2C45258(a1, a2);
  }
  else
  {
    v25 = v42;
    v26 = v24;
    v27 = v43;
    v28 = v44;
    v39 = v42;
    v40 = v43;
    v41 = v44;
    sub_1D2C45028(v42, *((unint64_t *)&v42 + 1));
    sub_1D2C45028(v27, v28);
    sub_1D2C8828C((uint64_t)&v39, a7, a8, a10, a11, a12, a13, (uint64_t)v50);
    sub_1D2C45258(a5, v26);
    sub_1D2C45258(a3, a4);
    sub_1D2C45258(a1, a2);
    sub_1D2C45258(v25, *((unint64_t *)&v25 + 1));
    result = sub_1D2C45258(v27, v28);
    v29 = v43;
    v30 = v49;
    v31 = v44;
    v32 = v45;
    v33 = v46;
    v34 = v47;
    v35 = v48;
    *(_OWORD *)v36 = v42;
    *(_QWORD *)(v36 + 16) = v29;
    *(_OWORD *)(v36 + 24) = v31;
    *(_OWORD *)(v36 + 40) = v32;
    *(_OWORD *)(v36 + 56) = v33;
    *(_OWORD *)(v36 + 72) = v34;
    *(_OWORD *)(v36 + 88) = v35;
    *(_QWORD *)(v36 + 104) = v30;
  }
  return result;
}

void SPAKE2.Verifier.processPeerShareAndGenerateVerificationTag(peerShare:)(uint64_t a1, uint64_t a2)
{
  sub_1D2C8E21C(a1, a2);
}

void sub_1D2C8E21C(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }
}

uint64_t sub_1D2C8E258()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  char isUniquelyReferenced_nonNull_native;
  char v6;
  _BYTE *v8;
  _QWORD v9[8];

  if (BYTE6(v1) == *(_QWORD *)(v0 + 40))
  {
    v9[0] = sub_1D2C677A0(*(_QWORD *)(v0 + 56));
    v9[1] = v3;
    v4 = *(char **)v0;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(_QWORD *)v0 = v4;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      v4 = sub_1D2C535CC((uint64_t)v4);
      *(_QWORD *)v0 = v4;
    }
    sub_1D2C8E404((uint64_t)(v4 + 32), v2, v1);
    *(_QWORD *)v0 = v4;
    v6 = swift_isUniquelyReferenced_nonNull_native();
    *(_QWORD *)v0 = v4;
    if ((v6 & 1) == 0)
    {
      v4 = sub_1D2C535CC((uint64_t)v4);
      *(_QWORD *)v0 = v4;
    }
    sub_1D2C8F50C((uint64_t)v9);
    *(_QWORD *)v0 = v4;
    return v9[0];
  }
  else
  {
    sub_1D2C881C8();
    swift_allocError();
    *v8 = 1;
    return swift_willThrow();
  }
}

void sub_1D2C8E404(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __asm { BR              X10 }
}

uint64_t sub_1D2C8E45C()
{
  _DWORD *v0;
  uint64_t result;

  result = ccspake_kex_process();
  *v0 = result;
  return result;
}

void SPAKE2.Verifier.processPeerVerificationTagAndGenerateKey(peerVerificationTag:)(uint64_t a1, uint64_t a2)
{
  sub_1D2C8E6D0(a1, a2);
}

void sub_1D2C8E6D0(uint64_t a1, uint64_t a2)
{
  size_t *v2;
  uint64_t v3;
  size_t v4;
  uint64_t v5;
  char isUniquelyReferenced_nonNull_native;

  v4 = v2[6];
  if ((v4 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else
  {
    v3 = a2;
    if (v4)
    {
      v5 = sub_1D2CAAF30();
      *(_QWORD *)(v5 + 16) = v4;
      bzero((void *)(v5 + 32), v4);
    }
    v4 = *v2;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *v2 = v4;
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
LABEL_5:
      __asm { BR              X10 }
  }
  *v2 = (size_t)sub_1D2C535CC(v4);
  goto LABEL_5;
}

void sub_1D2C8EA88(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  __asm { BR              X10 }
}

uint64_t sub_1D2C8EAD4()
{
  _DWORD *v0;
  char **v1;
  uint64_t v2;
  char *v3;
  char isUniquelyReferenced_nonNull_native;
  uint64_t result;

  if (!v2)
  {
    __break(1u);
    JUMPOUT(0x1D2C8EB78);
  }
  v3 = *v1;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *v1 = v3;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    v3 = sub_1D2C71768(0, *((_QWORD *)v3 + 2), 0, v3);
  *v1 = v3;
  result = ccspake_mac_verify_and_get_session_key();
  *v0 = result;
  return result;
}

void sub_1D2C8EB88(uint64_t a1)
{
  __asm { BR              X11 }
}

uint64_t sub_1D2C8EBF0@<X0>(uint64_t a1@<X8>)
{
  _DWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  unsigned int v7;
  unsigned __int8 v8;
  unsigned __int8 v9;
  unsigned __int8 v10;

  LOWORD(v7) = a1;
  BYTE2(v7) = BYTE2(a1);
  HIBYTE(v7) = BYTE3(a1);
  v8 = BYTE4(a1);
  v9 = BYTE5(a1);
  v10 = BYTE6(a1);
  if (__OFADD__(*(_QWORD *)(v4 + 24), v5))
  {
    __break(1u);
    JUMPOUT(0x1D2C8EEA0);
  }
  *v1 = ccspake_reduce_w();
  result = swift_bridgeObjectRelease();
  *v2 = v3;
  v2[1] = v7 | ((unint64_t)v8 << 32) | ((unint64_t)v9 << 40) | ((unint64_t)v10 << 48);
  return result;
}

void sub_1D2C8EEDC(uint64_t a1)
{
  __asm { BR              X12 }
}

uint64_t sub_1D2C8EF50@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  unsigned __int8 v15;
  unsigned __int8 v16;
  unsigned __int8 v17;

  v13 = v1;
  LOWORD(v14) = a1;
  BYTE2(v14) = BYTE2(a1);
  HIBYTE(v14) = BYTE3(a1);
  v15 = BYTE4(a1);
  v16 = BYTE5(a1);
  v17 = BYTE6(a1);
  sub_1D2C87BC0((uint64_t)&v13, (uint64_t)&v13 + BYTE6(a1), v6, v5, v3, v2);
  v11 = v14;
  v12 = v13;
  v7 = v15;
  v8 = v16;
  v9 = v17;
  sub_1D2C45258(v6, v5);
  result = sub_1D2C45258(v3, v2);
  *v4 = v12;
  v4[1] = v11 | (v7 << 32) | (v8 << 40) | (v9 << 48);
  return result;
}

void sub_1D2C8F220(uint64_t a1)
{
  __asm { BR              X11 }
}

uint64_t sub_1D2C8F284@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  _QWORD *v2;
  _DWORD *v3;
  uint64_t result;
  unsigned int v5;
  unsigned __int8 v6;
  unsigned __int8 v7;
  unsigned __int8 v8;

  LOWORD(v5) = a1;
  BYTE2(v5) = BYTE2(a1);
  HIBYTE(v5) = BYTE3(a1);
  v6 = BYTE4(a1);
  v7 = BYTE5(a1);
  v8 = BYTE6(a1);
  result = ccspake_kex_generate();
  *v3 = result;
  *v2 = v1;
  v2[1] = v5 | ((unint64_t)v6 << 32) | ((unint64_t)v7 << 40) | ((unint64_t)v8 << 48);
  return result;
}

void sub_1D2C8F50C(uint64_t a1)
{
  __asm { BR              X11 }
}

uint64_t sub_1D2C8F570@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  _QWORD *v2;
  _DWORD *v3;
  uint64_t result;
  unsigned int v5;
  unsigned __int8 v6;
  unsigned __int8 v7;
  unsigned __int8 v8;

  LOWORD(v5) = a1;
  BYTE2(v5) = BYTE2(a1);
  HIBYTE(v5) = BYTE3(a1);
  v6 = BYTE4(a1);
  v7 = BYTE5(a1);
  v8 = BYTE6(a1);
  result = ccspake_mac_compute();
  *v3 = result;
  *v2 = v1;
  v2[1] = v5 | ((unint64_t)v6 << 32) | ((unint64_t)v7 << 40) | ((unint64_t)v8 << 48);
  return result;
}

uint64_t sub_1D2C8F7F8(int *a1, uint64_t a2, unint64_t a3, uint64_t a4, unint64_t a5)
{
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  result = sub_1D2CAA8F4();
  v11 = *a1;
  v12 = a1[1];
  if ((int)v12 < (int)v11)
  {
    __break(1u);
    goto LABEL_9;
  }
  result = sub_1D2CAA864();
  if (!result)
  {
LABEL_10:
    __break(1u);
    return result;
  }
  v13 = result;
  result = sub_1D2CAA888();
  v14 = v11 - result;
  if (__OFSUB__(v11, result))
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  v15 = v12 - v11;
  v16 = sub_1D2CAA87C();
  if (v16 >= v15)
    v17 = v15;
  else
    v17 = v16;
  sub_1D2C87BC0(v13 + v14, v13 + v14 + v17, a2, a3, a4, a5);
  sub_1D2C45258(a2, a3);
  return sub_1D2C45258(a4, a5);
}

uint64_t sub_1D2C8F8EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, unint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, unint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, unint64_t a20)
{
  uint64_t result;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  result = sub_1D2CAA864();
  v26 = result;
  if (result)
  {
    result = sub_1D2CAA888();
    if (__OFSUB__(a1, result))
    {
LABEL_13:
      __break(1u);
      return result;
    }
    v26 += a1 - result;
  }
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_13;
  }
  v27 = sub_1D2CAA87C();
  if (v27 >= a2 - a1)
    v28 = a2 - a1;
  else
    v28 = v27;
  v29 = v26 + v28;
  if (v26)
    v30 = v29;
  else
    v30 = 0;
  sub_1D2C8D800(v26, v30, a4, a5, a6, a7);
  sub_1D2C45258(a4, a5);
  sub_1D2C45258(a6, a7);
  sub_1D2C45258(a11, a12);
  sub_1D2C45258(a15, a16);
  return sub_1D2C45258(a19, a20);
}

uint64_t sub_1D2C8FAA4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8, unint64_t a9, uint64_t a10, unint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, unint64_t a16)
{
  uint64_t result;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  result = sub_1D2CAA864();
  v23 = result;
  if (result)
  {
    result = sub_1D2CAA888();
    if (__OFSUB__(a1, result))
    {
LABEL_13:
      __break(1u);
      return result;
    }
    v23 += a1 - result;
  }
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_13;
  }
  v24 = sub_1D2CAA87C();
  if (v24 >= a2 - a1)
    v25 = a2 - a1;
  else
    v25 = v24;
  v26 = v23 + v25;
  if (v23)
    v27 = v26;
  else
    v27 = 0;
  sub_1D2C8B600(v23, v27, a4, a5);
  sub_1D2C45258(a4, a5);
  sub_1D2C45258(a6, a7);
  sub_1D2C45258(a8, a9);
  sub_1D2C45258(a10, a11);
  return sub_1D2C45258(a15, a16);
}

uint64_t sub_1D2C8FC38(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8, unint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, unint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, unint64_t a18)
{
  uint64_t result;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  result = sub_1D2CAA864();
  v25 = result;
  if (result)
  {
    result = sub_1D2CAA888();
    if (__OFSUB__(a1, result))
    {
LABEL_13:
      __break(1u);
      return result;
    }
    v25 += a1 - result;
  }
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_13;
  }
  v26 = sub_1D2CAA87C();
  if (v26 >= a2 - a1)
    v27 = a2 - a1;
  else
    v27 = v26;
  v28 = v25 + v27;
  if (v25)
    v29 = v28;
  else
    v29 = 0;
  sub_1D2C8CB04(v25, v29, a4, a5);
  sub_1D2C45258(a4, a5);
  sub_1D2C45258(a6, a7);
  sub_1D2C45258(a8, a9);
  sub_1D2C45258(a13, a14);
  return sub_1D2C45258(a17, a18);
}

uint64_t sub_1D2C8FDE0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, unint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, unint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, unint64_t a20)
{
  uint64_t result;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  result = sub_1D2CAA864();
  v27 = result;
  if (result)
  {
    result = sub_1D2CAA888();
    if (__OFSUB__(a1, result))
    {
LABEL_13:
      __break(1u);
      return result;
    }
    v27 += a1 - result;
  }
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_13;
  }
  v28 = sub_1D2CAA87C();
  if (v28 >= a2 - a1)
    v29 = a2 - a1;
  else
    v29 = v28;
  v30 = v27 + v29;
  if (v27)
    v31 = v30;
  else
    v31 = 0;
  sub_1D2C8D140(v27, v31, a4, a5);
  sub_1D2C45258(a4, a5);
  sub_1D2C45258(a6, a7);
  sub_1D2C45258(a11, a12);
  sub_1D2C45258(a15, a16);
  return sub_1D2C45258(a19, a20);
}

uint64_t sub_1D2C8FF88(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unint64_t a7)
{
  uint64_t result;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  result = sub_1D2CAA864();
  v14 = result;
  if (result)
  {
    result = sub_1D2CAA888();
    if (__OFSUB__(a1, result))
    {
LABEL_13:
      __break(1u);
      return result;
    }
    v14 += a1 - result;
  }
  v15 = __OFSUB__(a2, a1);
  v16 = a2 - a1;
  if (v15)
  {
    __break(1u);
    goto LABEL_13;
  }
  v17 = sub_1D2CAA87C();
  if (v17 >= v16)
    v18 = v16;
  else
    v18 = v17;
  v19 = v14 + v18;
  if (v14)
    v20 = v19;
  else
    v20 = 0;
  sub_1D2C8EA88(v14, v20, a4, a5, a6, a7);
  return sub_1D2C45258(a6, a7);
}

unint64_t sub_1D2C90074()
{
  unint64_t result;

  result = qword_1EFCA02D0;
  if (!qword_1EFCA02D0)
  {
    result = MEMORY[0x1D8245F38](&protocol conformance descriptor for SPAKE2.Spake2Error, &type metadata for SPAKE2.Spake2Error);
    atomic_store(result, (unint64_t *)&qword_1EFCA02D0);
  }
  return result;
}

unint64_t sub_1D2C900BC()
{
  unint64_t result;

  result = qword_1EFCA02D8;
  if (!qword_1EFCA02D8)
  {
    result = MEMORY[0x1D8245F38](&protocol conformance descriptor for SPAKE2.CipherSuite, &type metadata for SPAKE2.CipherSuite);
    atomic_store(result, (unint64_t *)&qword_1EFCA02D8);
  }
  return result;
}

ValueMetadata *type metadata accessor for SPAKE2()
{
  return &type metadata for SPAKE2;
}

uint64_t getEnumTagSinglePayload for SPAKE2.Spake2Error(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFD)
    goto LABEL_17;
  if (a2 + 3 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 3) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 3;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 3;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 3;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 4;
  v8 = v6 - 4;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for SPAKE2.Spake2Error(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_1D2C901EC + 4 * byte_1D2CAEBE5[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_1D2C90220 + 4 * byte_1D2CAEBE0[v4]))();
}

uint64_t sub_1D2C90220(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1D2C90228(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1D2C90230);
  return result;
}

uint64_t sub_1D2C9023C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1D2C90244);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_1D2C90248(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1D2C90250(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for SPAKE2.Spake2Error()
{
  return &type metadata for SPAKE2.Spake2Error;
}

uint64_t storeEnumTagSinglePayload for SPAKE2.CipherSuite(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_1D2C902AC + 4 * byte_1D2CAEBEA[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_1D2C902CC + 4 * byte_1D2CAEBEF[v4]))();
}

_BYTE *sub_1D2C902AC(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_1D2C902CC(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1D2C902D4(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1D2C902DC(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1D2C902E4(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1D2C902EC(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for SPAKE2.CipherSuite()
{
  return &type metadata for SPAKE2.CipherSuite;
}

ValueMetadata *type metadata accessor for SPAKE2.WS()
{
  return &type metadata for SPAKE2.WS;
}

uint64_t _s16CryptoKitPrivate6SPAKE2O2WSVwxx_0(uint64_t a1)
{
  sub_1D2C45258(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
  return sub_1D2C45258(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24));
}

uint64_t *_s16CryptoKitPrivate6SPAKE2O2WSVwcp_0(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;

  v4 = *a2;
  v5 = a2[1];
  sub_1D2C45028(*a2, v5);
  *a1 = v4;
  a1[1] = v5;
  v7 = a2[2];
  v6 = a2[3];
  sub_1D2C45028(v7, v6);
  a1[2] = v7;
  a1[3] = v6;
  return a1;
}

uint64_t *_s16CryptoKitPrivate6SPAKE2O2WSVwca_0(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;

  v4 = *a2;
  v5 = a2[1];
  sub_1D2C45028(*a2, v5);
  v6 = *a1;
  v7 = a1[1];
  *a1 = v4;
  a1[1] = v5;
  sub_1D2C45258(v6, v7);
  v9 = a2[2];
  v8 = a2[3];
  sub_1D2C45028(v9, v8);
  v10 = a1[2];
  v11 = a1[3];
  a1[2] = v9;
  a1[3] = v8;
  sub_1D2C45258(v10, v11);
  return a1;
}

uint64_t *_s16CryptoKitPrivate6SPAKE2O2WSVwta_0(uint64_t *a1, _OWORD *a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;

  v4 = *a1;
  v5 = a1[1];
  *(_OWORD *)a1 = *a2;
  sub_1D2C45258(v4, v5);
  v6 = a1[2];
  v7 = a1[3];
  *((_OWORD *)a1 + 1) = a2[1];
  sub_1D2C45258(v6, v7);
  return a1;
}

uint64_t _s16CryptoKitPrivate6SPAKE2O2WSVwet_0(uint64_t a1, unsigned int a2)
{
  unsigned int v3;

  if (!a2)
    return 0;
  if (a2 >= 0xD && *(_BYTE *)(a1 + 32))
    return (*(_DWORD *)a1 + 13);
  v3 = (((*(_QWORD *)(a1 + 8) >> 60) >> 2) & 0xFFFFFFF3 | (4 * ((*(_QWORD *)(a1 + 8) >> 60) & 3))) ^ 0xF;
  if (v3 >= 0xC)
    v3 = -1;
  return v3 + 1;
}

uint64_t _s16CryptoKitPrivate6SPAKE2O2WSVwst_0(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xC)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = a2 - 13;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xD)
      *(_BYTE *)(result + 32) = 1;
  }
  else
  {
    if (a3 >= 0xD)
      *(_BYTE *)(result + 32) = 0;
    if (a2)
    {
      *(_QWORD *)result = 0;
      *(_QWORD *)(result + 8) = (unint64_t)(((-a2 >> 2) & 3) - 4 * a2) << 60;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SPAKE2.WL()
{
  return &type metadata for SPAKE2.WL;
}

__n128 __swift_memcpy112_8(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __n128 result;
  __int128 v5;
  __int128 v6;

  v2 = *a2;
  v3 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)a1 = v2;
  result = (__n128)a2[3];
  v5 = a2[4];
  v6 = a2[6];
  *(_OWORD *)(a1 + 80) = a2[5];
  *(_OWORD *)(a1 + 96) = v6;
  *(__n128 *)(a1 + 48) = result;
  *(_OWORD *)(a1 + 64) = v5;
  return result;
}

ValueMetadata *type metadata accessor for SPAKE2.Prover()
{
  return &type metadata for SPAKE2.Prover;
}

uint64_t _s16CryptoKitPrivate6SPAKE2O6ProverVwxx_0(uint64_t a1)
{
  swift_bridgeObjectRelease();
  sub_1D2C45258(*(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72));
  sub_1D2C45258(*(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88));
  return sub_1D2C45258(*(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104));
}

uint64_t _s16CryptoKitPrivate6SPAKE2O6ProverVwcp_0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  v4 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  v5 = *(_QWORD *)(a2 + 72);
  sub_1D2CAAF0C();
  sub_1D2C45028(v4, v5);
  *(_QWORD *)(a1 + 64) = v4;
  *(_QWORD *)(a1 + 72) = v5;
  v6 = *(_QWORD *)(a2 + 80);
  v7 = *(_QWORD *)(a2 + 88);
  sub_1D2C45028(v6, v7);
  *(_QWORD *)(a1 + 80) = v6;
  *(_QWORD *)(a1 + 88) = v7;
  v9 = *(_QWORD *)(a2 + 96);
  v8 = *(_QWORD *)(a2 + 104);
  sub_1D2C45028(v9, v8);
  *(_QWORD *)(a1 + 96) = v9;
  *(_QWORD *)(a1 + 104) = v8;
  return a1;
}

_QWORD *_s16CryptoKitPrivate6SPAKE2O6ProverVwca_0(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;

  *a1 = *a2;
  sub_1D2CAAF0C();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  a1[2] = a2[2];
  a1[3] = a2[3];
  a1[4] = a2[4];
  a1[5] = a2[5];
  a1[6] = a2[6];
  a1[7] = a2[7];
  v4 = a2[8];
  v5 = a2[9];
  sub_1D2C45028(v4, v5);
  v6 = a1[8];
  v7 = a1[9];
  a1[8] = v4;
  a1[9] = v5;
  sub_1D2C45258(v6, v7);
  v8 = a2[10];
  v9 = a2[11];
  sub_1D2C45028(v8, v9);
  v10 = a1[10];
  v11 = a1[11];
  a1[10] = v8;
  a1[11] = v9;
  sub_1D2C45258(v10, v11);
  v13 = a2[12];
  v12 = a2[13];
  sub_1D2C45028(v13, v12);
  v14 = a1[12];
  v15 = a1[13];
  a1[12] = v13;
  a1[13] = v12;
  sub_1D2C45258(v14, v15);
  return a1;
}

uint64_t _s16CryptoKitPrivate6SPAKE2O6ProverVwta_0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;

  swift_bridgeObjectRelease();
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  v4 = *(_QWORD *)(a1 + 64);
  v5 = *(_QWORD *)(a1 + 72);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  sub_1D2C45258(v4, v5);
  v6 = *(_QWORD *)(a1 + 80);
  v7 = *(_QWORD *)(a1 + 88);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  sub_1D2C45258(v6, v7);
  v8 = *(_QWORD *)(a2 + 104);
  v9 = *(_QWORD *)(a1 + 96);
  v10 = *(_QWORD *)(a1 + 104);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 104) = v8;
  sub_1D2C45258(v9, v10);
  return a1;
}

uint64_t _s16CryptoKitPrivate6SPAKE2O6ProverVwet_0(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 112))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t sub_1D2C907C4(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 104) = 0;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 112) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 112) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for SPAKE2.Verifier()
{
  return &type metadata for SPAKE2.Verifier;
}

__n128 __swift_memcpy56_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  v4 = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t getEnumTagSinglePayload for SPAKE2.CipherSuiteSpecifics(uint64_t a1, int a2)
{
  int v3;

  if (!a2)
    return 0;
  if (a2 != 1 && *(_BYTE *)(a1 + 56))
    return (*(_DWORD *)a1 + 2);
  if (*(_QWORD *)a1)
    v3 = -1;
  else
    v3 = 0;
  return (v3 + 1);
}

uint64_t storeEnumTagSinglePayload for SPAKE2.CipherSuiteSpecifics(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 1)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 - 2;
    if (a3 >= 2)
      *(_BYTE *)(result + 56) = 1;
  }
  else
  {
    if (a3 >= 2)
      *(_BYTE *)(result + 56) = 0;
    if (a2)
      *(_QWORD *)result = 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for SPAKE2.CipherSuiteSpecifics()
{
  return &type metadata for SPAKE2.CipherSuiteSpecifics;
}

int64_t sub_1D2C908EC@<X0>(int64_t result@<X0>, uint64_t a2@<X1>, int64_t *a3@<X8>)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = *(_QWORD *)(v3 + 24);
  v7 = *(_QWORD *)(*(_QWORD *)(v3 + 16) + 24);
  v8 = v7 + v6;
  if (__OFADD__(v7, v6))
  {
    __break(1u);
  }
  else if ((v8 & 0x8000000000000000) == 0)
  {
    result = sub_1D2C49A4C(0, v8, result, a2);
    *a3 = result;
    return result;
  }
  __break(1u);
  return result;
}

int64_t sub_1D2C90940@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int64_t *a3@<X8>)
{
  uint64_t v3;

  return sub_1D2C87A0C(a1, a2, *(_QWORD *)(v3 + 16), *(_QWORD *)(v3 + 24), a3);
}

uint64_t SPAKE2.Verifier.getShare()()
{
  return SPAKE2.Prover.getShare()();
}

uint64_t HE.SerializedSecretKey.seed.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)v0;
  sub_1D2C45028(*(_QWORD *)v0, *(_QWORD *)(v0 + 8));
  return v1;
}

void HE.SerializedSecretKey.init(seed:)(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }
}

uint64_t sub_1D2C909E8()
{
  unint64_t v0;
  uint64_t v1;
  uint64_t *v2;
  uint64_t result;
  uint64_t v4;

  result = cche_rng_seed_sizeof();
  if (BYTE6(v0) == result)
  {
    *v2 = v1;
    v2[1] = v0;
  }
  else
  {
    sub_1D2C4E7DC();
    swift_allocError();
    *(_DWORD *)v4 = 0;
    *(_BYTE *)(v4 + 4) = 1;
    swift_willThrow();
    return sub_1D2C45258(v1, v0);
  }
  return result;
}

double HE.SerializedSecretKey.init()@<D0>(_OWORD *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  double result;
  __int128 v5;

  v2 = cche_rng_seed_sizeof();
  *(_QWORD *)&v5 = sub_1D2C677A0(v2);
  *((_QWORD *)&v5 + 1) = v3;
  sub_1D2C90B7C((uint64_t)&v5);
  result = *(double *)&v5;
  *a1 = v5;
  return result;
}

uint64_t sub_1D2C90AE0(uint64_t result, uint64_t a2)
{
  if (result && a2 - result >= 1)
  {
    result = ccrng();
    if (result)
      return ccrng_generate_bridge();
    else
      __break(1u);
  }
  return result;
}

void sub_1D2C90B7C(uint64_t a1)
{
  __asm { BR              X12 }
}

void sub_1D2C90BD8(unint64_t a1@<X8>)
{
  uint64_t v1;
  _QWORD *v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unsigned int v7;
  char v8;
  char v9;
  char v10;

  v6 = v1;
  LOWORD(v7) = a1;
  BYTE2(v7) = BYTE2(a1);
  v3 = HIDWORD(a1);
  HIBYTE(v7) = BYTE3(a1);
  v4 = a1 >> 40;
  v8 = BYTE4(a1);
  v5 = HIWORD(a1);
  v9 = BYTE5(a1);
  v10 = BYTE6(a1);
  if (BYTE6(a1))
  {
    if (!ccrng())
    {
      __break(1u);
      JUMPOUT(0x1D2C90D90);
    }
    ccrng_generate_bridge();
    LOBYTE(v3) = v8;
    LOBYTE(v4) = v9;
    LOBYTE(v5) = v10;
  }
  *v2 = v6;
  v2[1] = v7 | ((unint64_t)v3 << 32) | ((unint64_t)v4 << 40) | ((unint64_t)v5 << 48);
}

uint64_t sub_1D2C90DA0(int *a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  result = sub_1D2CAA8F4();
  v3 = *a1;
  v4 = a1[1];
  if ((int)v4 < (int)v3)
  {
    __break(1u);
    goto LABEL_9;
  }
  result = sub_1D2CAA864();
  if (!result)
  {
LABEL_10:
    __break(1u);
    return result;
  }
  v5 = result;
  result = sub_1D2CAA888();
  v6 = v3 - result;
  if (__OFSUB__(v3, result))
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  v7 = v4 - v3;
  v8 = sub_1D2CAA87C();
  if (v8 >= v7)
    v9 = v7;
  else
    v9 = v8;
  return sub_1D2C90AE0(v5 + v6, v5 + v6 + v9);
}

uint64_t *_s19SerializedSecretKeyVwCP(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  unint64_t v4;

  v3 = *a2;
  v4 = a2[1];
  sub_1D2C45028(*a2, v4);
  *a1 = v3;
  a1[1] = v4;
  return a1;
}

uint64_t _s19SerializedSecretKeyVwxx(uint64_t a1)
{
  return sub_1D2C45258(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
}

uint64_t *_s19SerializedSecretKeyVwca(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v3 = *a2;
  v4 = a2[1];
  sub_1D2C45028(*a2, v4);
  v5 = *a1;
  v6 = a1[1];
  *a1 = v3;
  a1[1] = v4;
  sub_1D2C45258(v5, v6);
  return a1;
}

uint64_t *_s19SerializedSecretKeyVwta(uint64_t *a1, _OWORD *a2)
{
  uint64_t v3;
  unint64_t v4;

  v3 = *a1;
  v4 = a1[1];
  *(_OWORD *)a1 = *a2;
  sub_1D2C45258(v3, v4);
  return a1;
}

uint64_t _s19SerializedSecretKeyVwet(uint64_t a1, unsigned int a2)
{
  unsigned int v3;

  if (!a2)
    return 0;
  if (a2 >= 0xD && *(_BYTE *)(a1 + 16))
    return (*(_DWORD *)a1 + 13);
  v3 = (((*(_QWORD *)(a1 + 8) >> 60) >> 2) & 0xFFFFFFF3 | (4 * ((*(_QWORD *)(a1 + 8) >> 60) & 3))) ^ 0xF;
  if (v3 >= 0xC)
    v3 = -1;
  return v3 + 1;
}

uint64_t _s19SerializedSecretKeyVwst(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xC)
  {
    *(_QWORD *)result = a2 - 13;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xD)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if (a3 >= 0xD)
      *(_BYTE *)(result + 16) = 0;
    if (a2)
    {
      *(_QWORD *)result = 0;
      *(_QWORD *)(result + 8) = (unint64_t)(((-a2 >> 2) & 3) - 4 * a2) << 60;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for HE.SerializedSecretKey()
{
  return &type metadata for HE.SerializedSecretKey;
}

ValueMetadata *_s9SecretKeyVMa()
{
  return &_s9SecretKeyVN;
}

void sub_1D2C90FBC(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;

  v3 = *(_QWORD *)(a1 + 8);
  v4 = cche_secret_key_sizeof();
  type metadata accessor for HE.ObjectStorageWithZeroize();
  v5 = (_QWORD *)swift_allocObject();
  v5[2] = a2;
  swift_retain();
  v6 = swift_slowAlloc();
  v5[3] = v6;
  v5[4] = v6 + v4;
  __asm { BR              X10 }
}

uint64_t sub_1D2C91060()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  int v3;
  uint64_t v4;

  v3 = cche_secret_key_generate_from_seed();
  sub_1D2C45258(v1, v2);
  if (v3)
  {
    sub_1D2C4E7DC();
    swift_allocError();
    *(_DWORD *)v4 = v3;
    *(_BYTE *)(v4 + 4) = 0;
    swift_willThrow();
    swift_release();
  }
  swift_release();
  return v0;
}

unint64_t sub_1D2C91270(unint64_t result)
{
  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if ((result & (result - 1)) != 0)
  {
    return 1 << -(char)__clz(result);
  }
  else if (result <= 1)
  {
    return 1;
  }
  return result;
}

unint64_t sub_1D2C912A4@<X0>(unint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  char v7;
  unint64_t v8;
  int64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  BOOL v13;
  int v14;
  unint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;

  if ((result & 0x8000000000000000) != 0)
  {
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  if ((result & (result - 1)) != 0)
  {
    v7 = -(uint64_t)__clz(result);
    if ((v7 & 0x3F) == 0x3FLL)
    {
LABEL_31:
      __break(1u);
LABEL_32:
      __break(1u);
      goto LABEL_33;
    }
    v8 = 1 << v7;
  }
  else if (result <= 1)
  {
    v8 = 1;
  }
  else
  {
    v8 = result;
  }
  result = cche_param_ctx_polynomial_degree();
  if (!(_DWORD)result)
  {
LABEL_30:
    __break(1u);
    goto LABEL_31;
  }
  v9 = __clz(v8) ^ 0x3F;
  v10 = __clz(result) ^ 0x3F;
  if (v10 < v9)
  {
    sub_1D2C4E7DC();
    swift_allocError();
    *(_DWORD *)v11 = 5;
    *(_BYTE *)(v11 + 4) = 1;
    return swift_willThrow();
  }
  if (!v9)
    goto LABEL_32;
  v17 = a4;
  v18 = a3;
  v12 = v10 - v9 + 1;
  v19 = MEMORY[0x1E0DEE9D8];
  result = (unint64_t)sub_1D2C4DB24(0, v9 & ~(v9 >> 63), 0);
  if (v9 - 1 >= -1)
  {
    v13 = 0;
    while (!v13)
    {
      if ((v12 & 0x8000000000000000) != 0)
      {
        __break(1u);
LABEL_28:
        __break(1u);
        goto LABEL_29;
      }
      if (HIDWORD(v12))
        goto LABEL_28;
      if (v12 < 0x20)
        v14 = (1 << v12) + 1;
      else
        v14 = 1;
      v16 = *(_QWORD *)(v19 + 16);
      v15 = *(_QWORD *)(v19 + 24);
      if (v16 >= v15 >> 1)
        result = (unint64_t)sub_1D2C4DB24((char *)(v15 > 1), v16 + 1, 1);
      *(_QWORD *)(v19 + 16) = v16 + 1;
      *(_DWORD *)(v19 + 4 * v16 + 32) = v14;
      v13 = v12 == v10;
      if (v12 == v10)
        v12 = 0;
      else
        ++v12;
      if (!--v9)
      {
        swift_retain();
        swift_retain();
        return sub_1D2C9C6C8(a2, v19, v18, v17);
      }
    }
    goto LABEL_34;
  }
LABEL_33:
  __break(1u);
LABEL_34:
  __break(1u);
  return result;
}

uint64_t sub_1D2C914B0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *inited;
  uint64_t result;
  int v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  int v21;
  int v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  int v29;
  __int128 v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  __int128 v43;
  __int128 v44;
  uint64_t v45;

  v4 = v3;
  v5 = *(_QWORD *)(a1 + 16);
  v6 = MEMORY[0x1E0DEE9D8];
  if (!v5)
    return v6;
  v45 = MEMORY[0x1E0DEE9D8];
  sub_1D2C4D9B0(0, v5, 0);
  v6 = v45;
  v9 = (_QWORD *)(a1 + 32);
  type metadata accessor for HE.ObjectStorage();
  while (1)
  {
    v40 = v9;
    v10 = *v9;
    v11 = cche_plaintext_sizeof();
    inited = (_QWORD *)swift_initStackObject();
    inited[2] = a2;
    sub_1D2CAAF0C();
    swift_retain();
    result = swift_slowAlloc();
    inited[3] = result;
    inited[4] = result + v11;
    if (HIDWORD(*(_QWORD *)(v10 + 16)))
      break;
    v14 = cche_encode_poly_uint64();
    if (v14)
    {
      v34 = v14;
      sub_1D2C4E7DC();
      swift_allocError();
      *(_DWORD *)v35 = v34;
      *(_BYTE *)(v35 + 4) = 0;
      swift_willThrow();
      swift_release();
      swift_release();
      swift_bridgeObjectRelease();
      return v6;
    }
    v41 = v6;
    v42 = v4;
    v6 = cche_param_ctx_ciphertext_ctx_nmoduli();
    v15 = cche_ciphertext_sizeof();
    v16 = (_QWORD *)swift_initStackObject();
    v16[2] = a2;
    swift_retain();
    v17 = swift_slowAlloc();
    v16[3] = v17;
    v16[4] = v17 + v15;
    result = cche_rng_seed_sizeof();
    if (result)
    {
      v18 = result;
      if (result < 15)
      {
        if (result < 0)
          goto LABEL_35;
        result = 0;
        v20 = (unint64_t)v18 << 48;
      }
      else
      {
        sub_1D2CAA8A0();
        swift_allocObject();
        v19 = sub_1D2CAA870();
        if (v18 >= 0x7FFFFFFF)
        {
          sub_1D2CAA90C();
          result = swift_allocObject();
          *(_QWORD *)(result + 16) = 0;
          *(_QWORD *)(result + 24) = v18;
          v20 = v19 | 0x8000000000000000;
        }
        else
        {
          result = v18 << 32;
          v20 = v19 | 0x4000000000000000;
        }
      }
    }
    else
    {
      v20 = 0xC000000000000000;
    }
    *(_QWORD *)&v44 = result;
    *((_QWORD *)&v44 + 1) = v20;
    if (!*(_QWORD *)(a3 + 24))
      goto LABEL_37;
    swift_retain();
    sub_1D2C9A498((uint64_t)&v44);
    v22 = v21;
    swift_release();
    if (v22)
    {
      sub_1D2C4E7DC();
      swift_allocError();
      *(_DWORD *)v36 = v22;
      *(_BYTE *)(v36 + 4) = 0;
      swift_willThrow();
      swift_release();
      sub_1D2C45258(v44, *((unint64_t *)&v44 + 1));
LABEL_32:
      swift_release();
      swift_bridgeObjectRelease();
      swift_release();
      return v6;
    }
    v24 = *((_QWORD *)&v44 + 1);
    v23 = v44;
    result = cche_serialize_seeded_ciphertext_coeff_nbytes();
    if (result)
    {
      v25 = result;
      if (result <= 14)
      {
        if (result < 0)
          goto LABEL_36;
        result = 0;
        v28 = (unint64_t)v25 << 48;
      }
      else
      {
        v26 = v23;
        sub_1D2CAA8A0();
        swift_allocObject();
        v27 = sub_1D2CAA870();
        if (v25 >= 0x7FFFFFFF)
        {
          sub_1D2CAA90C();
          result = swift_allocObject();
          *(_QWORD *)(result + 16) = 0;
          *(_QWORD *)(result + 24) = v25;
          v28 = v27 | 0x8000000000000000;
        }
        else
        {
          result = v25 << 32;
          v28 = v27 | 0x4000000000000000;
        }
        v23 = v26;
      }
    }
    else
    {
      v28 = 0xC000000000000000;
    }
    *(_QWORD *)&v44 = result;
    *((_QWORD *)&v44 + 1) = v28;
    sub_1D2C9A8E4((uint64_t)&v44);
    v6 = v41;
    if (v29)
    {
      v37 = v29;
      sub_1D2C4E7DC();
      swift_allocError();
      *(_DWORD *)v38 = v37;
      *(_BYTE *)(v38 + 4) = 0;
      swift_willThrow();
      swift_release();
      sub_1D2C45258(v23, v24);
      sub_1D2C45258(v44, *((unint64_t *)&v44 + 1));
      goto LABEL_32;
    }
    v4 = v42;
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    v30 = v44;
    v45 = v41;
    v32 = *(_QWORD *)(v41 + 16);
    v31 = *(_QWORD *)(v41 + 24);
    if (v32 >= v31 >> 1)
    {
      v43 = v44;
      sub_1D2C4D9B0((char *)(v31 > 1), v32 + 1, 1);
      v30 = v43;
      v6 = v45;
    }
    *(_QWORD *)(v6 + 16) = v32 + 1;
    v33 = v6 + 32 * v32;
    *(_OWORD *)(v33 + 32) = v30;
    *(_QWORD *)(v33 + 48) = v23;
    *(_QWORD *)(v33 + 56) = v24;
    v9 = v40 + 1;
    if (!--v5)
      return v6;
  }
  __break(1u);
LABEL_35:
  __break(1u);
LABEL_36:
  __break(1u);
LABEL_37:
  __break(1u);
  return result;
}

uint64_t sub_1D2C91940(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD, _QWORD))
{
  unint64_t v5;
  unint64_t v6;
  int64_t v7;
  _QWORD *v8;
  unint64_t v9;
  _QWORD *v10;
  uint64_t result;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  int64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  int64_t v26;
  int64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int64_t v31;
  uint64_t v33;

  v5 = *(_QWORD *)(a1 + 16);
  v6 = *(_QWORD *)(a2 + 16);
  if (v6 >= v5)
    v7 = *(_QWORD *)(a1 + 16);
  else
    v7 = *(_QWORD *)(a2 + 16);
  v33 = MEMORY[0x1E0DEE9D8];
  sub_1D2C4DB00(0, v7, 0);
  v27 = v6;
  v29 = a2;
  v30 = a1;
  v28 = v5;
  v26 = v7;
  if (v7)
  {
    v8 = (_QWORD *)(a1 + 32);
    v9 = v5;
    v10 = (_QWORD *)(a2 + 32);
    sub_1D2CAAF0C();
    result = sub_1D2CAAF0C();
    v12 = v6;
    v13 = v9;
    while (v13)
    {
      if (!v12)
        goto LABEL_26;
      result = a3(*v8, *v10);
      v14 = result;
      v16 = *(_QWORD *)(v33 + 16);
      v15 = *(_QWORD *)(v33 + 24);
      if (v16 >= v15 >> 1)
        result = (uint64_t)sub_1D2C4DB00((char *)(v15 > 1), v16 + 1, 1);
      --v12;
      *(_QWORD *)(v33 + 16) = v16 + 1;
      *(_QWORD *)(v33 + 8 * v16 + 32) = v14;
      --v13;
      ++v10;
      ++v8;
      if (!--v7)
        goto LABEL_13;
    }
    __break(1u);
LABEL_26:
    __break(1u);
  }
  else
  {
    sub_1D2CAAF0C();
    result = sub_1D2CAAF0C();
LABEL_13:
    if (v28 <= v27)
    {
LABEL_24:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v33;
    }
    v17 = 0;
    if (v26 <= v27)
      v18 = v27;
    else
      v18 = v26;
    v31 = v18 - v26;
    v19 = v28 - v26;
    v20 = 8 * v26 + 32;
    v21 = v30 + v20;
    v22 = v29 + v20;
    while (v19 != v17)
    {
      if (v27 - v26 == v17)
        goto LABEL_24;
      if (v31 == v17)
        goto LABEL_28;
      result = a3(*(_QWORD *)(v21 + 8 * v17), *(_QWORD *)(v22 + 8 * v17));
      v23 = result;
      v25 = *(_QWORD *)(v33 + 16);
      v24 = *(_QWORD *)(v33 + 24);
      if (v25 >= v24 >> 1)
        result = (uint64_t)sub_1D2C4DB00((char *)(v24 > 1), v25 + 1, 1);
      *(_QWORD *)(v33 + 16) = v25 + 1;
      *(_QWORD *)(v33 + 8 * v25 + 32) = v23;
      if (v19 == ++v17)
        goto LABEL_24;
    }
  }
  __break(1u);
LABEL_28:
  __break(1u);
  return result;
}

char *sub_1D2C91B80(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  unint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD v42[2];
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;

  v51 = *MEMORY[0x1E0C80C00];
  v9 = cche_param_ctx_polynomial_degree();
  v10 = *(_QWORD *)(a4 + 16);
  if (v10)
  {
    v11 = 0;
    v12 = (uint64_t *)(a4 + 32);
    while (1)
    {
      v13 = *v12++;
      v14 = __OFADD__(v11, v13);
      v11 += v13;
      if (v14)
        break;
      if (!--v10)
        goto LABEL_7;
    }
    __break(1u);
LABEL_36:
    __break(1u);
LABEL_37:
    __break(1u);
LABEL_38:
    __break(1u);
LABEL_39:
    __break(1u);
LABEL_40:
    __break(1u);
LABEL_41:
    __break(1u);
    goto LABEL_42;
  }
  v11 = 0;
LABEL_7:
  v45 = a3;
  v15 = v9;
  v5 = sub_1D2C7296C(v9, v11);
  if (!(_DWORD)v15)
  {
LABEL_43:
    sub_1D2C983D8(MEMORY[0x1E0DEE9D8], v5);
    __break(1u);
  }
  v16 = (_QWORD *)sub_1D2CAAF30();
  v16[2] = v15;
  bzero(v16 + 4, 8 * v15);
  v17 = sub_1D2C983D8(v16, v5);
  v49 = v15;
  v18 = v11 % v15;
  if (v11 % v15 < 0)
    goto LABEL_40;
  v19 = v17;
  if ((v18 & (v18 - 1)) != 0 && (-(uint64_t)__clz(v18) & 0x3F) == 0x3F)
    goto LABEL_41;
  v50 = 0;
  v20 = cche_param_ctx_plaintext_modulus_inverse();
  if ((_DWORD)v20
    || (v44 = a2, v21 = v50, v50 = 0, v22 = v49, v20 = cche_param_ctx_plaintext_modulus_inverse(), (_DWORD)v20))
  {
    v23 = (char *)v20;
    sub_1D2C4E7DC();
    swift_allocError();
    *(_DWORD *)v24 = (_DWORD)v23;
    *(_BYTE *)(v24 + 4) = 0;
    swift_willThrow();
    swift_bridgeObjectRelease();
  }
  else
  {
    v23 = (char *)v42;
    v47 = v50;
    v48 = v21;
    v50 = 0;
    MEMORY[0x1E0C80A78](v20);
    sub_1D2CAAF0C();
    v26 = sub_1D2CAAF0C();
    v27 = sub_1D2C91940(v26, a4, sub_1D2C91F48);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v28 = *(_QWORD *)(v27 + 16);
    v42[1] = v27;
    v43 = v4;
    if (v28)
    {
      v46 = v5 - 1;
      if (__OFSUB__(v5, 1))
      {
LABEL_42:
        __break(1u);
        goto LABEL_43;
      }
      v29 = (uint64_t *)(v27 + 32);
      v30 = v48;
      do
      {
        v32 = *v29++;
        v31 = v32;
        v33 = v32 / v22;
        v34 = v33 >= v46 ? v30 : v47;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
        {
          if (v33 < 0)
            goto LABEL_36;
        }
        else
        {
          v19 = sub_1D2C5361C(v19);
          if (v33 < 0)
            goto LABEL_36;
        }
        if ((unint64_t)v33 >= v19[2])
          goto LABEL_37;
        v5 = (uint64_t)v19;
        v23 = (char *)v19[v33 + 4];
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        v19[v33 + 4] = v23;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          v23 = sub_1D2C53608((uint64_t)v23);
          v19[v33 + 4] = v23;
        }
        v36 = v31 - v33 * v49;
        if ((v36 & 0x8000000000000000) != 0)
          goto LABEL_38;
        v22 = v49;
        if (v36 >= *((_QWORD *)v23 + 2))
          goto LABEL_39;
        *(_QWORD *)&v23[8 * v36 + 32] = v34;
        --v28;
        v30 = v48;
      }
      while (v28);
    }
    swift_bridgeObjectRelease();
    v37 = (uint64_t)v19;
    v38 = v44;
    swift_retain();
    v39 = v45;
    swift_retain();
    v40 = v43;
    v41 = sub_1D2C914B0(v37, v38, v39);
    if (!v40)
      v23 = (char *)v41;
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
  }
  return v23;
}

uint64_t sub_1D2C91F48(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  BOOL v5;
  uint64_t result;
  uint64_t v7;

  v3 = *(_QWORD **)(v2 + 16);
  v4 = *v3;
  v5 = __OFADD__(*v3, a1);
  result = *v3 + a1;
  if (v5)
  {
    __break(1u);
  }
  else
  {
    v5 = __OFADD__(v4, a2);
    v7 = v4 + a2;
    if (!v5)
    {
      *v3 = v7;
      return result;
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_1D2C91F70(unsigned __int8 a1, uint64_t a2, char a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;

  v6 = sub_1D2CAAE4C();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1D2CAAE28();
  v10 = sub_1D2CAAE1C();
  v12 = v11;
  swift_bridgeObjectRelease();
  result = (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  if (v12 >> 60 == 15)
  {
    __break(1u);
  }
  else
  {
    sub_1D2C5AEC0(a1, 1);
    v15 = v14;
    v17 = v16;
    v24 = v10;
    v25 = v12;
    sub_1D2C45028(v10, v12);
    sub_1D2C5EDA4(v15, v17);
    sub_1D2C45258(v15, v17);
    sub_1D2C6BAE4(v10, v12);
    v18 = v24;
    v19 = v25;
    sub_1D2C933C4(a2, a3 & 1);
    v21 = v20;
    v23 = v22;
    v26 = v18;
    v27 = v19;
    sub_1D2C45028(v18, v19);
    sub_1D2C5EDA4(v21, v23);
    sub_1D2C45258(v21, v23);
    sub_1D2C45258(v18, v19);
    return v26;
  }
  return result;
}

void sub_1D2C92114(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  id v13;
  id v14;
  void *v15;
  id v16;
  id v17;
  void *v18;

  sub_1D2CAAD50();
  sub_1D2C934D0();
  v9 = sub_1D2CAABF4();
  v10 = sub_1D2C64504(a1, a2, 2, a3, a4, v9, 1);
  if (!v4)
  {
    v11 = v10;
    v12 = *(_QWORD *)(v10 + 16);
    if (v12)
    {
      v13 = *(id *)(v10 + 32);
      v14 = objc_msgSend(v13, sel_mapToCurve_SSWU_RandomOracle);
      if (!v14)
      {
LABEL_10:
        __break(1u);
        goto LABEL_11;
      }
      v15 = v14;

      if (v12 <= *(_QWORD *)(v11 + 16))
      {
        v16 = *(id *)(v11 + 32 + 8 * v12 - 8);
        swift_bridgeObjectRelease();
        v17 = objc_msgSend(v16, sel_mapToCurve_SSWU_RandomOracle);
        if (v17)
        {
          v18 = v17;

          sub_1D2C92250(v15, (uint64_t)v18);
          return;
        }
LABEL_11:
        __break(1u);
        return;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_10;
  }
}

id sub_1D2C92250(void *a1, uint64_t a2)
{
  id result;
  int v3;
  uint64_t v4;

  v4 = *MEMORY[0x1E0C80C00];
  v3 = 0;
  result = objc_msgSend(a1, sel_add_corecryptoError_, a2, &v3);
  if (!result)
  {
    sub_1D2CAAFC0();
    sub_1D2CAAE70();
    sub_1D2CAB0B0();
    sub_1D2CAAE70();
    swift_bridgeObjectRelease();
    result = (id)sub_1D2CAB05C();
    __break(1u);
  }
  return result;
}

uint64_t SKANUTClient.input.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 24);
  sub_1D2C45028(v1, *(_QWORD *)(v0 + 32));
  return v1;
}

uint64_t static SKANUTClient.defaultToken()()
{
  uint64_t v0;
  uint64_t v1;

  v0 = sub_1D2C4A3AC(32);
  v1 = sub_1D2C4A504(v0);
  swift_release();
  return v1;
}

uint64_t SKANUTClient.init(privateInput:)@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  void (*v15)(char *, uint64_t);
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  void *v33;
  void *v34;
  id v35;
  uint64_t result;
  char v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  char v44;

  v6 = sub_1D2CAAE4C();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v38 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v44 = 0;
  sub_1D2CAAD50();
  sub_1D2C45028(a1, a2);
  sub_1D2C934D0();
  sub_1D2CAAC00();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED985DB0);
  swift_dynamicCast();
  v10 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0D1BD78]), sel_initWithRandomScalarInGroup_, v40);
  if (!v10)
  {
    __break(1u);
    goto LABEL_6;
  }
  v11 = (uint64_t)v10;
  v39 = a2;
  sub_1D2CAAE28();
  v12 = sub_1D2CAAE1C();
  v14 = v13;
  v15 = *(void (**)(char *, uint64_t))(v7 + 8);
  v15(v9, v6);
  if (v14 >> 60 == 15)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  sub_1D2CAAE28();
  v16 = sub_1D2CAAE1C();
  v18 = v17;
  v15(v9, v6);
  if (v18 >> 60 != 15)
  {
    sub_1D2C5AEC0(2, 1);
    v20 = v19;
    v22 = v21;
    v40 = v16;
    v41 = v18;
    sub_1D2C45028(v16, v18);
    sub_1D2C5EDA4(v20, v22);
    sub_1D2C45258(v20, v22);
    sub_1D2C6BAE4(v16, v18);
    v23 = v40;
    v24 = v41;
    v25 = sub_1D2C5D050(0x48532D343833502DLL, 0xEC00000034383341);
    v27 = v26;
    v42 = v23;
    v43 = v24;
    sub_1D2C45028(v23, v24);
    sub_1D2C5EDA4(v25, v27);
    sub_1D2C45258(v25, v27);
    sub_1D2C45258(v23, v24);
    v28 = v42;
    v29 = v43;
    v42 = v12;
    v43 = v14;
    sub_1D2C45028(v12, v14);
    sub_1D2C5EDA4(v28, v29);
    sub_1D2C45258(v28, v29);
    sub_1D2C6BAE4(v12, v14);
    v30 = v42;
    v31 = v43;
    v32 = v39;
    sub_1D2C92114(a1, v39, v42, v43);
    v34 = v33;
    v35 = sub_1D2C831C0(v11, v33);
    sub_1D2C45258(v30, v31);

    result = sub_1D2C45258(a1, v32);
    v37 = v44;
    *(_BYTE *)a3 = 2;
    *(_QWORD *)(a3 + 8) = 4;
    *(_BYTE *)(a3 + 16) = v37;
    *(_QWORD *)(a3 + 24) = a1;
    *(_QWORD *)(a3 + 32) = v32;
    *(_QWORD *)(a3 + 40) = v11;
    *(_QWORD *)(a3 + 48) = v35;
    return result;
  }
LABEL_7:
  __break(1u);
  result = swift_unexpectedError();
  __break(1u);
  return result;
}

id SKANUTClient.blindedElement()()
{
  uint64_t v0;
  id result;
  void *v2;
  uint64_t v3;

  result = objc_msgSend(*(id *)(v0 + 48), sel_serializedPublicKey_, 1);
  if (result)
  {
    v2 = result;
    v3 = sub_1D2CAA96C();

    return (id)v3;
  }
  else
  {
    __break(1u);
  }
  return result;
}

void SKANUTClient.finalize(publicInput:evaluatedElement:proof:publicKey:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  __asm { BR              X10 }
}

id sub_1D2C927DC(uint64_t a1, unint64_t a2, void *a3, unint64_t a4, uint64_t a5, int a6, uint64_t a7, unint64_t a8, uint64_t a9, char a10, uint64_t a11, char a12, int a13, uint64_t a14, uint64_t a15, uint64_t a16, int a17, int a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,id a28,int a29,int a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51)
{
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char v54;
  uint64_t v55;
  unint64_t v56;
  char v57;
  uint64_t v58;
  id v61;
  int64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  void *v66;
  id v67;
  void *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  id v72;
  void *v73;
  id v74;
  id v75;
  id v76;
  id v77;
  _BYTE *v78;
  int v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  int v83;
  uint64_t v84;
  void *v86;
  id v87;
  id v88;
  char v89;
  unint64_t v90;
  uint64_t v91;
  char v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v99;
  void *v102;
  int v103;
  uint64_t v104;

  v93 = v54;
  v94 = v53;
  v95 = v52;
  v96 = v51;
  v61 = (id)objc_opt_self();
  sub_1D2CAAD50();
  sub_1D2C934D0();
  sub_1D2CAAC00();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED985DB0);
  swift_dynamicCast();
  v102 = v61;
  v62 = (int64_t)objc_msgSend(v61, sel_groupOrderByteCountForCP_, *(_QWORD *)(v58 - 144));
  if (v62 < 0)
  {
    __break(1u);
    goto LABEL_18;
  }
  if (v62 + 0x4000000000000000 < 0)
  {
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  if (BYTE6(v56) != 2 * v62)
  {
    sub_1D2C8716C();
    swift_allocError();
    *v78 = 0;
    swift_willThrow();
    return v61;
  }
  sub_1D2C45028(a5, v56);
  sub_1D2CAAC00();
  swift_dynamicCast();
  v63 = (uint64_t)objc_msgSend(v61, sel_groupOrderByteCountForCP_, v104);
  if (v63 < 0)
    goto LABEL_19;
  v90 = a4;
  v91 = a5;
  v89 = v57;
  sub_1D2C56CD4(v63, a5, v56);
  v65 = *(_QWORD *)(v58 - 144);
  v64 = *(_QWORD *)(v58 - 136);
  v103 = 0;
  sub_1D2C45028(v65, v64);
  sub_1D2CAAC00();
  swift_dynamicCast();
  v61 = objc_allocWithZone(MEMORY[0x1E0D1BD78]);
  v66 = (void *)sub_1D2CAA954();
  v67 = objc_msgSend(v61, sel_initWithData_inGroup_reduction_corecryptoError_, v66, v104, 0, &v103);
  sub_1D2C45258(v65, v64);

  if (!v67)
  {
    v79 = v103;
    sub_1D2C4E7DC();
    swift_allocError();
    *(_DWORD *)v80 = v79;
    *(_BYTE *)(v80 + 4) = 0;
    swift_willThrow();
    v81 = v65;
    v82 = v64;
LABEL_14:
    sub_1D2C45258(v81, v82);
    return v61;
  }
  v68 = v67;
  sub_1D2C45258(v65, v64);
  sub_1D2C45028(v91, v56);
  sub_1D2CAAC00();
  swift_dynamicCast();
  v69 = (uint64_t)objc_msgSend(v102, sel_groupOrderByteCountForCP_, v104);
  if (v69 < 0)
  {
LABEL_20:
    __break(1u);
    JUMPOUT(0x1D2C92D2CLL);
  }
  sub_1D2C83D24(v69, v91, v56);
  v70 = *(_QWORD *)(v58 - 144);
  v61 = *(id *)(v58 - 136);
  v103 = 0;
  sub_1D2C45028(v70, (unint64_t)v61);
  sub_1D2CAAC00();
  swift_dynamicCast();
  v71 = v104;
  v72 = objc_allocWithZone(MEMORY[0x1E0D1BD78]);
  v73 = (void *)sub_1D2CAA954();
  v74 = objc_msgSend(v72, sel_initWithData_inGroup_reduction_corecryptoError_, v73, v71, 0, &v103);
  sub_1D2C45258(v70, (unint64_t)v61);

  if (!v74)
  {
    v83 = v103;
    sub_1D2C4E7DC();
    swift_allocError();
    *(_DWORD *)v84 = v83;
    *(_BYTE *)(v84 + 4) = 0;
    swift_willThrow();

    v81 = v70;
    v82 = (unint64_t)v61;
    goto LABEL_14;
  }
  sub_1D2C45258(v70, (unint64_t)v61);
  v75 = v68;
  v76 = v74;
  v61 = (id)a8;
  sub_1D2C45028(a7, a8);
  v77 = sub_1D2C69958();
  if (v55)
  {
    sub_1D2C45258(a7, a8);
  }
  else
  {
    v86 = v77;
    sub_1D2C45258(a7, a8);
    sub_1D2C45028(v99, v90);
    v87 = sub_1D2C69958();
    sub_1D2C45258(v99, v90);
    v88 = a3;
    v61 = sub_1D2C82498(v95, v94, a1, a2, v88, v87, v75, (uint64_t)v76, v86, v89, v96, v93);

  }
  return v61;
}

id SKANUTTestServer.init()@<X0>(uint64_t a1@<X8>)
{
  id result;
  uint64_t v3;

  sub_1D2CAAD50();
  sub_1D2C934D0();
  sub_1D2CAAC00();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED985DB0);
  swift_dynamicCast();
  result = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0D1BD78]), sel_initWithRandomScalarInGroup_, v3);
  if (result)
  {
    *(_BYTE *)a1 = 2;
    *(_QWORD *)(a1 + 8) = 4;
    *(_QWORD *)(a1 + 16) = result;
    *(_BYTE *)(a1 + 24) = 0;
    *(_QWORD *)(a1 + 32) = result;
    return result;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t SKANUTTestServer.publicKey()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  void *v5;
  id v6;
  id v7;
  id v8;
  id v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;
  _QWORD v17[6];

  v1 = sub_1D2CAACB4();
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x1E0C80A78](v1);
  v4 = (char *)v17 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = *(void **)(v0 + 16);
  sub_1D2CAAD50();
  sub_1D2C934D0();
  v6 = v5;
  sub_1D2CAAC00();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED985DB0);
  swift_dynamicCast();
  v7 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0D1BD70]), sel_initWithGeneratorForCP_, v17[1]);
  v8 = sub_1D2C831C0((uint64_t)v6, v7);

  v9 = objc_msgSend(v8, sel_serializedPublicKey_, 1);
  if (v9)
  {
    v10 = v9;
    v11 = sub_1D2CAA96C();
    v13 = v12;

    v17[2] = v11;
    v17[3] = v13;
    v14 = sub_1D2CAACA8();
    v15 = MEMORY[0x1D8245038](v14);
    (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
    return v15;
  }
  else
  {
    __break(1u);
    result = swift_unexpectedError();
    __break(1u);
  }
  return result;
}

uint64_t SKANUTTestServer.evaluate(blindedElement:publicInput:)(uint64_t a1, unint64_t a2, void *a3, unint64_t a4)
{
  unsigned __int8 *v4;
  uint64_t v5;
  int v10;
  uint64_t v11;
  char v12;
  id v13;
  id v14;
  id v15;
  char v16;
  id v17;
  _BYTE *v18;
  uint64_t result;
  void *v20;
  void *v21;
  void *v22;
  id v23;
  void *v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  id v28;
  void *v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  id v33;
  void *v34;
  unint64_t v35;
  char v36;
  void *v37;
  void *v38;
  void *v39;
  void *v40;
  void *v41;
  void *v42;
  uint64_t v43;

  v10 = *v4;
  v11 = *((_QWORD *)v4 + 1);
  v39 = (void *)*((_QWORD *)v4 + 2);
  v12 = v4[24];
  sub_1D2C45028(a1, a2);
  v13 = sub_1D2C69958();
  sub_1D2C45258(a1, a2);
  if (v5)
    return (uint64_t)v13;
  v36 = v12;
  v38 = v13;
  sub_1D2CAAD50();
  sub_1D2C934D0();
  v14 = v39;
  sub_1D2CAAC00();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED985DB0);
  swift_dynamicCast();
  v15 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0D1BD78]), sel_initWithRandomScalarInGroup_, v43);
  if (!v15)
  {
    __break(1u);
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  v13 = v15;
  if (v10 == 1)
    v16 = v36;
  else
    v16 = 1;
  if ((v16 & 1) == 0)
  {
    sub_1D2C8716C();
    swift_allocError();
    *v18 = 1;
    swift_willThrow();

    return (uint64_t)v13;
  }
  v17 = sub_1D2C7F148(&v41, v38, a3, a4, v15, v10, v11, v14, v36);
  v20 = v41;
  if (!v41)
    goto LABEL_16;
  v21 = v17;
  v22 = v42;

  v23 = objc_msgSend(v20, sel_serializedBigEndianScalar);
  if (!v23)
    goto LABEL_18;
  v24 = v23;
  v40 = v20;
  v25 = sub_1D2CAA96C();
  v27 = v26;

  v37 = v22;
  v28 = objc_msgSend(v22, sel_serializedBigEndianScalar);
  if (!v28)
    goto LABEL_18;
  v29 = v28;
  v30 = sub_1D2CAA96C();
  v32 = v31;

  v41 = (void *)v25;
  v42 = (void *)v27;
  v35 = v27;
  sub_1D2C45028(v25, v27);
  sub_1D2C45028(v30, v32);
  sub_1D2C5EDA4(v30, v32);
  sub_1D2C45258(v30, v32);
  v13 = v41;
  v33 = objc_msgSend(v21, sel_serializedPublicKey_, 1);
  if (v33)
  {
    v34 = v33;
    sub_1D2CAA96C();

    sub_1D2C45258(v30, v32);
    sub_1D2C45258(v25, v35);

    return (uint64_t)v13;
  }
LABEL_17:
  __break(1u);
LABEL_18:
  result = sub_1D2CAB05C();
  __break(1u);
  return result;
}

uint64_t SKANUTTestServer.verifyToken(token:publicInput:unblindedInput:)(uint64_t a1, uint64_t a2, void *a3, unint64_t a4, uint64_t a5, uint64_t a6)
{
  unsigned __int8 *v6;
  void *v13;
  uint64_t v14;
  char v15;
  int v16;
  id v17;
  char v18;

  v14 = *((_QWORD *)v6 + 1);
  v13 = (void *)*((_QWORD *)v6 + 2);
  v15 = v6[24];
  v16 = *v6;
  v17 = v13;
  sub_1D2C7FCF8(a5, a6, a1, a2, a3, a4, v16, v14, v17, v15);
  LOBYTE(v16) = v18;

  return v16 & 1;
}

void sub_1D2C933C4(uint64_t a1, char a2)
{
  if ((a2 & 1) != 0)
  {
    sub_1D2C5AEC0(a1, 2);
  }
  else if (a1 == 5 || a1 == 4 || a1 == 3)
  {
    sub_1D2CAAE70();
    swift_bridgeObjectRelease();
    sub_1D2C5D050(45, 0xE100000000000000);
  }
  else
  {
    sub_1D2CAB05C();
    __break(1u);
  }
}

unint64_t sub_1D2C934D0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1ED985C78;
  if (!qword_1ED985C78)
  {
    v1 = sub_1D2CAAD50();
    result = MEMORY[0x1D8245F38](MEMORY[0x1E0CA9858], v1);
    atomic_store(result, (unint64_t *)&qword_1ED985C78);
  }
  return result;
}

void destroy for SKANUTClient(uint64_t a1)
{
  sub_1D2C45258(*(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32));

}

uint64_t initializeWithCopy for SKANUTClient(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  void *v6;
  void *v7;
  id v8;
  id v9;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v4 = *(_QWORD *)(a2 + 24);
  v5 = *(_QWORD *)(a2 + 32);
  sub_1D2C45028(v4, v5);
  *(_QWORD *)(a1 + 24) = v4;
  *(_QWORD *)(a1 + 32) = v5;
  v6 = *(void **)(a2 + 40);
  v7 = *(void **)(a2 + 48);
  *(_QWORD *)(a1 + 40) = v6;
  *(_QWORD *)(a1 + 48) = v7;
  v8 = v6;
  v9 = v7;
  return a1;
}

uint64_t assignWithCopy for SKANUTClient(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  void *v8;
  void *v9;
  id v10;
  void *v11;
  void *v12;
  id v13;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v4 = *(_QWORD *)(a2 + 24);
  v5 = *(_QWORD *)(a2 + 32);
  sub_1D2C45028(v4, v5);
  v6 = *(_QWORD *)(a1 + 24);
  v7 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 24) = v4;
  *(_QWORD *)(a1 + 32) = v5;
  sub_1D2C45258(v6, v7);
  v8 = *(void **)(a2 + 40);
  v9 = *(void **)(a1 + 40);
  *(_QWORD *)(a1 + 40) = v8;
  v10 = v8;

  v11 = *(void **)(a2 + 48);
  v12 = *(void **)(a1 + 48);
  *(_QWORD *)(a1 + 48) = v11;
  v13 = v11;

  return a1;
}

uint64_t assignWithTake for SKANUTClient(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  void *v6;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v4 = *(_QWORD *)(a1 + 24);
  v5 = *(_QWORD *)(a1 + 32);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  sub_1D2C45258(v4, v5);

  v6 = *(void **)(a1 + 48);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);

  return a1;
}

uint64_t getEnumTagSinglePayload for SKANUTClient(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 56))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 40);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for SKANUTClient(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 56) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 40) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 56) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for SKANUTClient()
{
  return &type metadata for SKANUTClient;
}

void destroy for SKANUTTestServer(uint64_t a1)
{

}

uint64_t initializeWithCopy for SKANUTTestServer(uint64_t a1, uint64_t a2)
{
  void *v3;
  void *v4;
  id v5;
  id v6;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v3 = *(void **)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v3;
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  v4 = *(void **)(a2 + 32);
  *(_QWORD *)(a1 + 32) = v4;
  v5 = v3;
  v6 = v4;
  return a1;
}

uint64_t assignWithCopy for SKANUTTestServer(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;
  void *v7;
  void *v8;
  id v9;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  v4 = *(void **)(a2 + 16);
  v5 = *(void **)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v4;
  v6 = v4;

  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  v7 = *(void **)(a2 + 32);
  v8 = *(void **)(a1 + 32);
  *(_QWORD *)(a1 + 32) = v7;
  v9 = v7;

  return a1;
}

uint64_t assignWithTake for SKANUTTestServer(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  void *v5;
  void *v6;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v4 = *(_QWORD *)(a2 + 16);
  v5 = *(void **)(a1 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v4;

  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  v6 = *(void **)(a1 + 32);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);

  return a1;
}

ValueMetadata *type metadata accessor for SKANUTTestServer()
{
  return &type metadata for SKANUTTestServer;
}

uint64_t *sub_1D2C93880(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t *v4;
  int v5;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  char *v23;
  uint64_t *v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v4 = a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v26 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v26 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *a1 = *a2;
    v7 = a2[1];
    v8 = a2[2];
    sub_1D2C45028(v7, v8);
    v4[1] = v7;
    v4[2] = v8;
    v9 = a2[3];
    v10 = a2[4];
    sub_1D2C45028(v9, v10);
    v4[3] = v9;
    v4[4] = v10;
    v11 = a2[5];
    v12 = a2[6];
    sub_1D2C45028(v11, v12);
    v4[5] = v11;
    v4[6] = v12;
    v13 = a2[7];
    v14 = a2[8];
    sub_1D2C45028(v13, v14);
    v4[7] = v13;
    v4[8] = v14;
    v15 = a3[10];
    v16 = (char *)v4 + v15;
    v17 = (char *)a2 + v15;
    v18 = sub_1D2CAA9F0();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v18 - 8) + 16))(v16, v17, v18);
    v19 = a3[11];
    v20 = a3[12];
    v21 = (char *)v4 + v19;
    v22 = (char *)a2 + v19;
    *(_DWORD *)v21 = *(_DWORD *)v22;
    v21[4] = v22[4];
    v23 = (char *)v4 + v20;
    v24 = (uint64_t *)((char *)a2 + v20);
    v25 = *(uint64_t *)((char *)a2 + v20 + 8);
    if (v25 >> 60 == 15)
    {
      *(_OWORD *)v23 = *(_OWORD *)v24;
    }
    else
    {
      v27 = *v24;
      sub_1D2C45028(*v24, v25);
      *(_QWORD *)v23 = v27;
      *((_QWORD *)v23 + 1) = v25;
    }
  }
  return v4;
}

uint64_t sub_1D2C939BC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t *v7;
  unint64_t v8;

  sub_1D2C45258(*(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16));
  sub_1D2C45258(*(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32));
  sub_1D2C45258(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));
  sub_1D2C45258(*(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64));
  v4 = a1 + *(int *)(a2 + 40);
  v5 = sub_1D2CAA9F0();
  result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  v7 = (uint64_t *)(a1 + *(int *)(a2 + 48));
  v8 = v7[1];
  if (v8 >> 60 != 15)
    return sub_1D2C45258(*v7, v8);
  return result;
}

_QWORD *sub_1D2C93A58(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  char *v22;
  uint64_t *v23;
  unint64_t v24;
  uint64_t v25;

  *a1 = *a2;
  v6 = a2[1];
  v7 = a2[2];
  sub_1D2C45028(v6, v7);
  a1[1] = v6;
  a1[2] = v7;
  v8 = a2[3];
  v9 = a2[4];
  sub_1D2C45028(v8, v9);
  a1[3] = v8;
  a1[4] = v9;
  v10 = a2[5];
  v11 = a2[6];
  sub_1D2C45028(v10, v11);
  a1[5] = v10;
  a1[6] = v11;
  v12 = a2[7];
  v13 = a2[8];
  sub_1D2C45028(v12, v13);
  a1[7] = v12;
  a1[8] = v13;
  v14 = a3[10];
  v15 = (char *)a1 + v14;
  v16 = (char *)a2 + v14;
  v17 = sub_1D2CAA9F0();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v17 - 8) + 16))(v15, v16, v17);
  v18 = a3[11];
  v19 = a3[12];
  v20 = (char *)a1 + v18;
  v21 = (char *)a2 + v18;
  *(_DWORD *)v20 = *(_DWORD *)v21;
  v20[4] = v21[4];
  v22 = (char *)a1 + v19;
  v23 = (_QWORD *)((char *)a2 + v19);
  v24 = *(_QWORD *)((char *)a2 + v19 + 8);
  if (v24 >> 60 == 15)
  {
    *(_OWORD *)v22 = *(_OWORD *)v23;
  }
  else
  {
    v25 = *v23;
    sub_1D2C45028(*v23, v24);
    *(_QWORD *)v22 = v25;
    *((_QWORD *)v22 + 1) = v24;
  }
  return a1;
}

uint64_t sub_1D2C93B68(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int *v28;
  int v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t *v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  v6 = *(_QWORD *)(a2 + 8);
  v7 = *(_QWORD *)(a2 + 16);
  sub_1D2C45028(v6, v7);
  v8 = *(_QWORD *)(a1 + 8);
  v9 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 8) = v6;
  *(_QWORD *)(a1 + 16) = v7;
  sub_1D2C45258(v8, v9);
  v10 = *(_QWORD *)(a2 + 24);
  v11 = *(_QWORD *)(a2 + 32);
  sub_1D2C45028(v10, v11);
  v12 = *(_QWORD *)(a1 + 24);
  v13 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 24) = v10;
  *(_QWORD *)(a1 + 32) = v11;
  sub_1D2C45258(v12, v13);
  v14 = *(_QWORD *)(a2 + 40);
  v15 = *(_QWORD *)(a2 + 48);
  sub_1D2C45028(v14, v15);
  v16 = *(_QWORD *)(a1 + 40);
  v17 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 40) = v14;
  *(_QWORD *)(a1 + 48) = v15;
  sub_1D2C45258(v16, v17);
  v18 = *(_QWORD *)(a2 + 56);
  v19 = *(_QWORD *)(a2 + 64);
  sub_1D2C45028(v18, v19);
  v20 = *(_QWORD *)(a1 + 56);
  v21 = *(_QWORD *)(a1 + 64);
  *(_QWORD *)(a1 + 56) = v18;
  *(_QWORD *)(a1 + 64) = v19;
  sub_1D2C45258(v20, v21);
  v22 = a3[10];
  v23 = a1 + v22;
  v24 = a2 + v22;
  v25 = sub_1D2CAA9F0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 24))(v23, v24, v25);
  v26 = a3[11];
  v27 = a1 + v26;
  v28 = (int *)(a2 + v26);
  v29 = *v28;
  *(_BYTE *)(v27 + 4) = *((_BYTE *)v28 + 4);
  *(_DWORD *)v27 = v29;
  v30 = a3[12];
  v31 = (uint64_t *)(a1 + v30);
  v32 = (uint64_t *)(a2 + v30);
  v33 = *(_QWORD *)(a2 + v30 + 8);
  if (*(_QWORD *)(a1 + v30 + 8) >> 60 != 15)
  {
    if (v33 >> 60 != 15)
    {
      v35 = *v32;
      sub_1D2C45028(v35, v33);
      v36 = *v31;
      v37 = v31[1];
      *v31 = v35;
      v31[1] = v33;
      sub_1D2C45258(v36, v37);
      return a1;
    }
    sub_1D2C93CE8((uint64_t)v31);
    goto LABEL_6;
  }
  if (v33 >> 60 == 15)
  {
LABEL_6:
    *(_OWORD *)v31 = *(_OWORD *)v32;
    return a1;
  }
  v34 = *v32;
  sub_1D2C45028(v34, v33);
  *v31 = v34;
  v31[1] = v33;
  return a1;
}

uint64_t sub_1D2C93CE8(uint64_t a1)
{
  (*(void (**)(void))(*(_QWORD *)(MEMORY[0x1E0CB0338] - 8) + 8))();
  return a1;
}

uint64_t sub_1D2C93D1C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  v6 = a3[10];
  v7 = a1 + v6;
  v8 = a2 + v6;
  v9 = sub_1D2CAA9F0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v7, v8, v9);
  v10 = a3[11];
  v11 = a3[12];
  v12 = a1 + v10;
  v13 = a2 + v10;
  *(_DWORD *)v12 = *(_DWORD *)v13;
  *(_BYTE *)(v12 + 4) = *(_BYTE *)(v13 + 4);
  *(_OWORD *)(a1 + v11) = *(_OWORD *)(a2 + v11);
  return a1;
}

_QWORD *sub_1D2C93DCC(_QWORD *a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t *v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;

  *a1 = *(_QWORD *)a2;
  v6 = a1[1];
  v7 = a1[2];
  *(_OWORD *)(a1 + 1) = *(_OWORD *)(a2 + 8);
  sub_1D2C45258(v6, v7);
  v8 = a1[3];
  v9 = a1[4];
  *(_OWORD *)(a1 + 3) = *(_OWORD *)(a2 + 24);
  sub_1D2C45258(v8, v9);
  v10 = a1[5];
  v11 = a1[6];
  *(_OWORD *)(a1 + 5) = *(_OWORD *)(a2 + 40);
  sub_1D2C45258(v10, v11);
  v12 = a1[7];
  v13 = a1[8];
  *(_OWORD *)(a1 + 7) = *(_OWORD *)(a2 + 56);
  sub_1D2C45258(v12, v13);
  v14 = a3[10];
  v15 = (char *)a1 + v14;
  v16 = a2 + v14;
  v17 = sub_1D2CAA9F0();
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 40))(v15, v16, v17);
  v18 = a3[11];
  v19 = a3[12];
  v20 = (char *)a1 + v18;
  v21 = a2 + v18;
  v20[4] = *(_BYTE *)(v21 + 4);
  *(_DWORD *)v20 = *(_DWORD *)v21;
  v22 = (_QWORD *)((char *)a1 + v19);
  v23 = (uint64_t *)(a2 + v19);
  v24 = *(_QWORD *)((char *)a1 + v19 + 8);
  if (v24 >> 60 != 15)
  {
    v25 = v23[1];
    if (v25 >> 60 != 15)
    {
      v26 = *v22;
      *v22 = *v23;
      v22[1] = v25;
      sub_1D2C45258(v26, v24);
      return a1;
    }
    sub_1D2C93CE8((uint64_t)v22);
  }
  *(_OWORD *)v22 = *(_OWORD *)v23;
  return a1;
}

uint64_t sub_1D2C93EE4()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1D2C93EF0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 12)
  {
    v4 = *(_QWORD *)(a1 + 16) >> 60;
    if (((4 * (_DWORD)v4) & 0xC) != 0)
      return 16 - ((4 * (_DWORD)v4) & 0xC | (v4 >> 2));
    else
      return 0;
  }
  else
  {
    v8 = sub_1D2CAA9F0();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 40), a2, v8);
  }
}

uint64_t sub_1D2C93F78()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1D2C93F84(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 12)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = (unint64_t)(((-(int)a2 >> 2) & 3) - 4 * (_DWORD)a2) << 60;
  }
  else
  {
    v7 = sub_1D2CAA9F0();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 40), a2, a2, v7);
  }
  return result;
}

uint64_t type metadata accessor for CryptoKitSecretSharing_SecretShare()
{
  uint64_t result;

  result = qword_1EFCA02E0;
  if (!qword_1EFCA02E0)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t sub_1D2C9403C()
{
  uint64_t result;
  unint64_t v1;

  result = sub_1D2CAA9F0();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_1D2C940D8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  unint64_t v10;
  _QWORD *v11;
  char *v12;
  _QWORD *v13;
  char *v14;
  _QWORD *v15;
  char *v16;
  _QWORD *v17;
  char *v18;
  _QWORD *v19;
  char *v20;
  _QWORD *v21;
  char *v22;
  uint64_t v24;

  v0 = sub_1D2CAAB34();
  __swift_allocate_value_buffer(v0, qword_1EFCA4B20);
  __swift_project_value_buffer(v0, (uint64_t)qword_1EFCA4B20);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EFCA0040);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFCA0048);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v24 = swift_allocObject();
  *(_OWORD *)(v24 + 16) = xmmword_1D2CADDC0;
  v5 = v24 + v4;
  v6 = v24 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v24 + v4) = 1;
  *(_QWORD *)v6 = "version";
  *(_QWORD *)(v6 + 8) = 7;
  *(_BYTE *)(v6 + 16) = 2;
  v7 = *MEMORY[0x1E0D3EF08];
  v8 = sub_1D2CAAB1C();
  v9 = *(void (**)(void))(*(_QWORD *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  v10 = v5 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v3) = 2;
  *(_QWORD *)v10 = "share_x";
  *(_QWORD *)(v10 + 8) = 7;
  *(_BYTE *)(v10 + 16) = 2;
  v9();
  v11 = (_QWORD *)(v5 + 2 * v3);
  v12 = (char *)v11 + *(int *)(v1 + 48);
  *v11 = 3;
  *(_QWORD *)v12 = "share_y";
  *((_QWORD *)v12 + 1) = 7;
  v12[16] = 2;
  v9();
  v13 = (_QWORD *)(v5 + 3 * v3);
  v14 = (char *)v13 + *(int *)(v1 + 48);
  *v13 = 4;
  *(_QWORD *)v14 = "threshold";
  *((_QWORD *)v14 + 1) = 9;
  v14[16] = 2;
  v9();
  v15 = (_QWORD *)(v5 + 4 * v3);
  v16 = (char *)v15 + *(int *)(v1 + 48);
  *v15 = 5;
  *(_QWORD *)v16 = "iv";
  *((_QWORD *)v16 + 1) = 2;
  v16[16] = 2;
  v9();
  v17 = (_QWORD *)(v5 + 5 * v3);
  v18 = (char *)v17 + *(int *)(v1 + 48);
  *v17 = 6;
  *(_QWORD *)v18 = "ciphertext";
  *((_QWORD *)v18 + 1) = 10;
  v18[16] = 2;
  v9();
  v19 = (_QWORD *)(v5 + 6 * v3);
  v20 = (char *)v19 + *(int *)(v1 + 48);
  *v19 = 7;
  *(_QWORD *)v20 = "tag";
  *((_QWORD *)v20 + 1) = 3;
  v20[16] = 2;
  v9();
  v21 = (_QWORD *)(v5 + 7 * v3);
  v22 = (char *)v21 + *(int *)(v1 + 48);
  *v21 = 8;
  *(_QWORD *)v22 = "associated_data";
  *((_QWORD *)v22 + 1) = 15;
  v22[16] = 2;
  v9();
  return sub_1D2CAAB28();
}

uint64_t sub_1D2C94390()
{
  uint64_t v0;
  uint64_t result;
  char v2;

  result = sub_1D2CAAA38();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
        case 2:
          sub_1D2CAAA80();
          break;
        case 3:
        case 5:
        case 6:
        case 7:
          sub_1D2CAAA68();
          break;
        case 4:
          type metadata accessor for CryptoKitSecretSharing_SecretShare();
          sub_1D2CAAA74();
          break;
        case 8:
          type metadata accessor for CryptoKitSecretSharing_SecretShare();
          sub_1D2CAAA5C();
          break;
        default:
          break;
      }
      result = sub_1D2CAAA38();
    }
  }
  return result;
}

uint64_t sub_1D2C9450C()
{
  _DWORD *v0;
  uint64_t v1;
  uint64_t result;

  if (!*v0 || (result = sub_1D2CAAB04(), !v1))
  {
    if (!v0[1] || (result = sub_1D2CAAB04(), !v1))
      __asm { BR              X10 }
  }
  return result;
}

uint64_t sub_1D2C9463C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  if ((a2 & 0xFF000000000000) != 0)
  {
    sub_1D2CAAAF8();
    if (v3)
      JUMPOUT(0x1D2C94604);
  }
  return ((uint64_t (*)(_QWORD))((char *)sub_1D2C946A4 + 4 * byte_1D2CAEE90[*(_QWORD *)(v2 + 48) >> 62]))(*(_QWORD *)(v2 + 40));
}

uint64_t sub_1D2C946A4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  if ((a2 & 0xFF000000000000) != 0)
  {
    sub_1D2CAAAF8();
    if (v3)
      JUMPOUT(0x1D2C94604);
  }
  return ((uint64_t (*)(_QWORD))((char *)sub_1D2C94704 + 4 * byte_1D2CAEE94[*(_QWORD *)(v2 + 64) >> 62]))(*(_QWORD *)(v2 + 56));
}

void sub_1D2C94704(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  if ((a2 & 0xFF000000000000) == 0 || (sub_1D2CAAAF8(), !v3))
  {
    sub_1D2C94808(v2);
    if (!v3)
    {
      type metadata accessor for CryptoKitSecretSharing_SecretShare();
      sub_1D2CAA9D8();
    }
  }
  JUMPOUT(0x1D2C94604);
}

uint64_t sub_1D2C94794(uint64_t a1)
{
  uint64_t result;

  result = type metadata accessor for CryptoKitSecretSharing_SecretShare();
  if ((*(_BYTE *)(a1 + *(int *)(result + 44) + 4) & 1) == 0)
    return sub_1D2CAAB04();
  return result;
}

uint64_t sub_1D2C94808(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;

  result = type metadata accessor for CryptoKitSecretSharing_SecretShare();
  v3 = a1 + *(int *)(result + 48);
  v4 = *(_QWORD *)(v3 + 8);
  if (v4 >> 60 != 15)
  {
    v5 = *(_QWORD *)v3;
    sub_1D2C45028(*(_QWORD *)v3, *(_QWORD *)(v3 + 8));
    sub_1D2CAAAF8();
    return sub_1D2C6BAE4(v5, v4);
  }
  return result;
}

double sub_1D2C948A4@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  double result;

  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_OWORD *)(a2 + 16) = xmmword_1D2CAEE60;
  *(_OWORD *)(a2 + 32) = xmmword_1D2CAEE60;
  *(_OWORD *)(a2 + 48) = xmmword_1D2CAEE60;
  *(_QWORD *)(a2 + 64) = 0xC000000000000000;
  sub_1D2CAA9E4();
  v4 = *(int *)(a1 + 48);
  v5 = a2 + *(int *)(a1 + 44);
  *(_DWORD *)v5 = 0;
  *(_BYTE *)(v5 + 4) = 1;
  result = 0.0;
  *(_OWORD *)(a2 + v4) = xmmword_1D2CAEE70;
  return result;
}

unint64_t sub_1D2C9490C()
{
  return 0xD000000000000022;
}

uint64_t sub_1D2C94928@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = v2 + *(int *)(a1 + 40);
  v5 = sub_1D2CAA9F0();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, v4, v5);
}

uint64_t sub_1D2C94968(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = v2 + *(int *)(a2 + 40);
  v5 = sub_1D2CAA9F0();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 40))(v4, a1, v5);
}

uint64_t (*sub_1D2C949A8())()
{
  return nullsub_1;
}

uint64_t sub_1D2C949BC()
{
  return sub_1D2C94390();
}

uint64_t sub_1D2C949D0()
{
  return sub_1D2C9450C();
}

uint64_t sub_1D2C949E4()
{
  sub_1D2C5AE40(&qword_1EFCA0310, (uint64_t (*)(uint64_t))type metadata accessor for CryptoKitSecretSharing_SecretShare, (uint64_t)&unk_1D2CAEFC8);
  return sub_1D2CAAA20();
}

uint64_t sub_1D2C94A34@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  if (qword_1EFC9F6E0 != -1)
    swift_once();
  v2 = sub_1D2CAAB34();
  v3 = __swift_project_value_buffer(v2, (uint64_t)qword_1EFCA4B20);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(a1, v3, v2);
}

uint64_t sub_1D2C94AA4()
{
  sub_1D2C5AE40(&qword_1EFCA02F8, (uint64_t (*)(uint64_t))type metadata accessor for CryptoKitSecretSharing_SecretShare, (uint64_t)&unk_1D2CAF000);
  return sub_1D2CAAABC();
}

uint64_t sub_1D2C94AE4()
{
  sub_1D2C5AE40(&qword_1EFCA02F8, (uint64_t (*)(uint64_t))type metadata accessor for CryptoKitSecretSharing_SecretShare, (uint64_t)&unk_1D2CAF000);
  return sub_1D2CAAAC8();
}

uint64_t sub_1D2C94B38()
{
  return sub_1D2C5AE40(&qword_1EFCA02F0, (uint64_t (*)(uint64_t))type metadata accessor for CryptoKitSecretSharing_SecretShare, (uint64_t)&unk_1D2CAEF10);
}

uint64_t sub_1D2C94B64()
{
  return sub_1D2C5AE40(&qword_1EFCA02F8, (uint64_t (*)(uint64_t))type metadata accessor for CryptoKitSecretSharing_SecretShare, (uint64_t)&unk_1D2CAF000);
}

uint64_t sub_1D2C94B90()
{
  return sub_1D2C5AE40(&qword_1EFCA0300, (uint64_t (*)(uint64_t))type metadata accessor for CryptoKitSecretSharing_SecretShare, (uint64_t)&unk_1D2CAEF38);
}

uint64_t sub_1D2C94BBC()
{
  return sub_1D2C5AE40(&qword_1EFCA0308, (uint64_t (*)(uint64_t))type metadata accessor for CryptoKitSecretSharing_SecretShare, (uint64_t)&unk_1D2CAEF78);
}

uint64_t sub_1D2C94BE8(uint64_t a1, char *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  _BYTE *v10;
  char v11;
  int *v12;
  uint64_t v13;
  _DWORD *v14;
  char v15;
  char *v16;
  int v17;
  char v18;
  char v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  char v28;
  int v30;
  char *v31;
  void (*v32)(_BYTE *, char *, uint64_t);
  void (*v33)(_BYTE *, uint64_t);
  _BYTE v34[4];
  int v35;
  uint64_t v36;

  v4 = sub_1D2CAA9F0();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x1E0C80A78](v4);
  v8 = &v34[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v6);
  v10 = &v34[-v9];
  if (*(_DWORD *)a1 != *(_DWORD *)a2)
    goto LABEL_18;
  if (*(_DWORD *)(a1 + 4) != *((_DWORD *)a2 + 1))
    goto LABEL_18;
  sub_1D2C59C44(*(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16));
  if ((v11 & 1) == 0)
    goto LABEL_18;
  v12 = (int *)type metadata accessor for CryptoKitSecretSharing_SecretShare();
  v13 = v12[11];
  v14 = (_DWORD *)(a1 + v13);
  v15 = *(_BYTE *)(a1 + v13 + 4);
  v16 = &a2[v13];
  v17 = a2[v13 + 4];
  if ((v15 & 1) != 0)
  {
    if (!v17)
      goto LABEL_18;
  }
  else
  {
    if (*v14 != *(_DWORD *)v16)
      LOBYTE(v17) = 1;
    if ((v17 & 1) != 0)
      goto LABEL_18;
  }
  sub_1D2C59C44(*(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32));
  if ((v18 & 1) == 0)
    goto LABEL_18;
  sub_1D2C59C44(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));
  if ((v19 & 1) == 0)
    goto LABEL_18;
  sub_1D2C59C44(*(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64));
  if ((v20 & 1) == 0)
    goto LABEL_18;
  v21 = v12[12];
  v22 = *(_QWORD *)(a1 + v21);
  v23 = *(_QWORD *)(a1 + v21 + 8);
  v24 = (uint64_t *)&a2[v21];
  v25 = *v24;
  v26 = v24[1];
  if (v23 >> 60 == 15)
  {
    if (v26 >> 60 == 15)
      goto LABEL_21;
    goto LABEL_17;
  }
  if (v26 >> 60 == 15)
  {
LABEL_17:
    v27 = v22;
    sub_1D2C69B84(v22, v23);
    sub_1D2C69B84(v25, v26);
    sub_1D2C6BAE4(v27, v23);
    sub_1D2C6BAE4(v25, v26);
    goto LABEL_18;
  }
  v36 = v22;
  sub_1D2C69B84(v22, v23);
  sub_1D2C69B84(v25, v26);
  sub_1D2C59C44(v36, v23);
  v35 = v30;
  sub_1D2C6BAE4(v25, v26);
  sub_1D2C6BAE4(v36, v23);
  if ((v35 & 1) != 0)
  {
LABEL_21:
    v31 = (char *)(a1 + v12[10]);
    v32 = *(void (**)(_BYTE *, char *, uint64_t))(v5 + 16);
    v32(v10, v31, v4);
    v32(v8, &a2[v12[10]], v4);
    sub_1D2C5AE40(&qword_1EFCA0060, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
    v28 = sub_1D2CAADF8();
    v33 = *(void (**)(_BYTE *, uint64_t))(v5 + 8);
    v33(v8, v4);
    v33(v10, v4);
    return v28 & 1;
  }
LABEL_18:
  v28 = 0;
  return v28 & 1;
}

uint64_t CryptoKitError.hash(into:)()
{
  uint64_t v0;

  if (*(_BYTE *)(v0 + 4) == 1)
    __asm { BR              X9 }
  sub_1D2CAB140();
  return sub_1D2CAB14C();
}

uint64_t CryptoKitError.hashValue.getter()
{
  unsigned int *v0;
  uint64_t v1;
  int v2;

  v1 = *v0;
  v2 = *((unsigned __int8 *)v0 + 4);
  sub_1D2CAB134();
  if (v2 == 1)
    __asm { BR              X9 }
  sub_1D2CAB140();
  sub_1D2CAB14C();
  return sub_1D2CAB158();
}

uint64_t sub_1D2C94FC8()
{
  uint64_t v0;

  if (*(_BYTE *)(v0 + 4) == 1)
    __asm { BR              X9 }
  sub_1D2CAB140();
  return sub_1D2CAB14C();
}

uint64_t sub_1D2C95054()
{
  unsigned int *v0;
  uint64_t v1;
  int v2;

  v1 = *v0;
  v2 = *((unsigned __int8 *)v0 + 4);
  sub_1D2CAB134();
  if (v2 == 1)
    __asm { BR              X9 }
  sub_1D2CAB140();
  sub_1D2CAB14C();
  return sub_1D2CAB158();
}

BOOL static CryptoKitASN1Error.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t CryptoKitASN1Error.hash(into:)()
{
  return sub_1D2CAB140();
}

uint64_t CryptoKitASN1Error.hashValue.getter()
{
  sub_1D2CAB134();
  sub_1D2CAB140();
  return sub_1D2CAB158();
}

uint64_t _s16CryptoKitPrivate0aB5ErrorO2eeoiySbAC_ACtFZ_0(unsigned int *a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *a1;
  if (*((_BYTE *)a1 + 4) == 1)
    return ((uint64_t (*)(void))((char *)&loc_1D2C951C0 + 4 * byte_1D2CAF098[v2]))();
  if ((*(_BYTE *)(a2 + 4) & 1) != 0)
    return 0;
  return (_DWORD)v2 == *(_DWORD *)a2;
}

uint64_t sub_1D2C951EC@<X0>(char a1@<W8>)
{
  int v1;

  if (v1 != 1)
    a1 = 0;
  if ((a1 & 1) == 0)
    JUMPOUT(0x1D2C951D8);
  return 1;
}

uint64_t sub_1D2C95200@<X0>(char a1@<W8>)
{
  int v1;

  if (v1 != 2)
    a1 = 0;
  if ((a1 & 1) == 0)
    JUMPOUT(0x1D2C951D8);
  return 1;
}

uint64_t sub_1D2C95214@<X0>(char a1@<W8>)
{
  int v1;

  if (v1 != 3)
    a1 = 0;
  if ((a1 & 1) == 0)
    JUMPOUT(0x1D2C951D8);
  return 1;
}

uint64_t sub_1D2C95228@<X0>(char a1@<W8>)
{
  int v1;

  if (v1 != 4)
    a1 = 0;
  if ((a1 & 1) == 0)
    JUMPOUT(0x1D2C951D8);
  return 1;
}

uint64_t sub_1D2C9523C@<X0>(char a1@<W8>)
{
  unsigned int v1;

  if (v1 <= 4)
    a1 = 0;
  if ((a1 & 1) == 0)
    JUMPOUT(0x1D2C951D8);
  return 1;
}

unint64_t sub_1D2C95254()
{
  unint64_t result;

  result = qword_1EFCA0318;
  if (!qword_1EFCA0318)
  {
    result = MEMORY[0x1D8245F38](&protocol conformance descriptor for CryptoKitError, &type metadata for CryptoKitError);
    atomic_store(result, (unint64_t *)&qword_1EFCA0318);
  }
  return result;
}

unint64_t sub_1D2C9529C()
{
  unint64_t result;

  result = qword_1EFCA0320;
  if (!qword_1EFCA0320)
  {
    result = MEMORY[0x1D8245F38](&protocol conformance descriptor for CryptoKitASN1Error, &type metadata for CryptoKitASN1Error);
    atomic_store(result, (unint64_t *)&qword_1EFCA0320);
  }
  return result;
}

uint64_t __swift_memcpy5_4(uint64_t result, int *a2)
{
  int v2;

  v2 = *a2;
  *(_BYTE *)(result + 4) = *((_BYTE *)a2 + 4);
  *(_DWORD *)result = v2;
  return result;
}

uint64_t getEnumTagSinglePayload for CryptoKitError(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 5))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for CryptoKitError(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_BYTE *)(result + 4) = 0;
    *(_DWORD *)result = a2 - 1;
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 5) = v3;
  return result;
}

uint64_t sub_1D2C95340(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 4))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t sub_1D2C9535C(uint64_t result, int a2)
{
  if (a2)
  {
    *(_DWORD *)result = a2 - 1;
    *(_BYTE *)(result + 4) = 1;
  }
  else
  {
    *(_BYTE *)(result + 4) = 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for CryptoKitError()
{
  return &type metadata for CryptoKitError;
}

uint64_t getEnumTagSinglePayload for CryptoKitASN1Error(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xF9)
    goto LABEL_17;
  if (a2 + 7 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 7) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 7;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 7;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 7;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 8;
  v8 = v6 - 8;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for CryptoKitASN1Error(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 7 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 7) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF9)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF8)
    return ((uint64_t (*)(void))((char *)&loc_1D2C95468 + 4 * byte_1D2CAF0A3[v4]))();
  *a1 = a2 + 7;
  return ((uint64_t (*)(void))((char *)sub_1D2C9549C + 4 * byte_1D2CAF09E[v4]))();
}

uint64_t sub_1D2C9549C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1D2C954A4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1D2C954ACLL);
  return result;
}

uint64_t sub_1D2C954B8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1D2C954C0);
  *(_BYTE *)result = a2 + 7;
  return result;
}

uint64_t sub_1D2C954C4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1D2C954CC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for CryptoKitASN1Error()
{
  return &type metadata for CryptoKitASN1Error;
}

size_t sub_1D2C954E8(char a1)
{
  uint64_t *v1;
  uint64_t *v2;
  size_t v4;
  uint64_t *v5;
  size_t result;
  int64_t v7;
  size_t v8;
  BOOL v9;
  size_t v10;
  uint64_t v11;

  v2 = v1;
  v4 = _swift_stdlib_malloc_size(v2) - 32;
  v5 = v2 + 2;
  result = swift_beginAccess();
  v7 = v2[2];
  v8 = v4 - v7;
  if (__OFSUB__(v4, v7))
  {
    __break(1u);
    goto LABEL_8;
  }
  v9 = __OFSUB__(v8, 1);
  v10 = v8 - 1;
  if (v9)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  if ((v10 & 0x8000000000000000) != 0)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  result = _swift_stdlib_malloc_size(v2);
  if ((uint64_t)(result - 32) < v7)
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  *((_BYTE *)v2 + v7 + 32) = a1;
  v11 = *v5 + 1;
  if (!__OFADD__(*v5, 1))
  {
    result = swift_beginAccess();
    *v5 = v11;
    return result;
  }
LABEL_11:
  __break(1u);
  return result;
}

size_t sub_1D2C955B0(const void *a1, size_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  size_t v6;
  _QWORD *v7;
  size_t result;
  int64_t v9;
  size_t v10;
  BOOL v11;
  size_t v12;

  v3 = v2;
  v6 = _swift_stdlib_malloc_size(v2) - 32;
  v7 = v2 + 2;
  result = swift_beginAccess();
  v9 = v3[2];
  v10 = v6 - v9;
  if (__OFSUB__(v6, v9))
  {
    __break(1u);
    goto LABEL_11;
  }
  v11 = __OFSUB__(v10, a2);
  v12 = v10 - a2;
  if (v11)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  if ((v12 & 0x8000000000000000) != 0)
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  result = _swift_stdlib_malloc_size(v3);
  if ((uint64_t)(result - 32) < v9)
  {
LABEL_13:
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  if (!a1)
    goto LABEL_8;
  if ((a2 & 0x8000000000000000) == 0)
  {
    result = (size_t)memmove((char *)v3 + v9 + 32, a1, a2);
LABEL_8:
    if (!__OFADD__(*v7, a2))
    {
      *v7 += a2;
      return result;
    }
    goto LABEL_14;
  }
LABEL_15:
  __break(1u);
  return result;
}

uint64_t sub_1D2C95680(int64_t a1, int64_t a2, size_t a3)
{
  const void **v3;
  const void **v4;
  _QWORD *v8;
  uint64_t result;
  int64_t v10;
  BOOL v11;
  int64_t v12;
  uint64_t v13;
  unsigned int v14;
  unsigned int v15;
  int v16;
  uint64_t v17;
  const void *v18;
  char *v19;
  uint64_t v20;

  v4 = v3;
  v8 = (char *)*v3 + 16;
  result = swift_beginAccess();
  v10 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_20;
  }
  v11 = __OFSUB__(*v8, v10);
  v12 = *v8 - v10;
  if (v11)
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  v13 = v12 + 1;
  if (__OFADD__(v12, 1))
  {
LABEL_21:
    __break(1u);
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  result = swift_isUniquelyReferenced_nonNull_native();
  if ((_DWORD)result)
  {
    result = _swift_stdlib_malloc_size(*v4);
    if (result - 32 >= v13)
    {
      if (a2 >= a1)
        return sub_1D2C959C4(a1, a2, a3);
      goto LABEL_26;
    }
  }
  if (v13 < 0)
    goto LABEL_22;
  if (HIDWORD(v13))
  {
LABEL_23:
    __break(1u);
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  if ((_DWORD)v13)
  {
    v14 = (v13 - 1) | ((v13 - 1) >> 1) | ((((_DWORD)v13 - 1) | ((v13 - 1) >> 1)) >> 2);
    v15 = v14 | (v14 >> 4) | ((v14 | (v14 >> 4)) >> 8);
    v16 = v15 | HIWORD(v15);
    if (v16 == -1)
      v17 = 0xFFFFFFFFLL;
    else
      v17 = (v16 + 1);
  }
  else
  {
    v17 = 1;
  }
  type metadata accessor for SecureBytes.Backing();
  result = swift_allocObject();
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)(result + 24) = v17;
  if (a1 < 0)
    goto LABEL_24;
  v18 = (const void *)result;
  v19 = (char *)*v4;
  result = swift_beginAccess();
  v20 = *((_QWORD *)v19 + 2);
  if (v20 < a2)
  {
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
    return result;
  }
  sub_1D2C47358(v19, 0, a1);
  sub_1D2C954E8(a3);
  sub_1D2C47358((char *)*v4, a2, v20);
  *v4 = v18;
  return swift_release();
}

uint64_t sub_1D2C9581C(uint64_t a1, int64_t a2, void *a3, size_t a4)
{
  const void **v4;
  const void **v5;
  _QWORD *v10;
  uint64_t result;
  int64_t v12;
  BOOL v13;
  int64_t v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int v17;
  int v18;
  uint64_t v19;
  const void *v20;
  char *v21;
  uint64_t v22;

  v5 = v4;
  v10 = (char *)*v4 + 16;
  result = swift_beginAccess();
  v12 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_20;
  }
  v13 = __OFSUB__(*v10, v12);
  v14 = *v10 - v12;
  if (v13)
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  v15 = v14 + a4;
  if (__OFADD__(v14, a4))
  {
LABEL_21:
    __break(1u);
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  result = swift_isUniquelyReferenced_nonNull_native();
  if ((_DWORD)result)
  {
    result = _swift_stdlib_malloc_size(*v5);
    if (result - 32 >= v15)
    {
      if (a2 >= a1)
        return sub_1D2C95AC0(a1, a2, a3, a4);
      goto LABEL_26;
    }
  }
  if (v15 < 0)
    goto LABEL_22;
  if (HIDWORD(v15))
  {
LABEL_23:
    __break(1u);
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  if ((_DWORD)v15)
  {
    v16 = (v15 - 1) | ((v15 - 1) >> 1) | ((((_DWORD)v15 - 1) | ((v15 - 1) >> 1)) >> 2);
    v17 = v16 | (v16 >> 4) | ((v16 | (v16 >> 4)) >> 8);
    v18 = v17 | HIWORD(v17);
    if (v18 == -1)
      v19 = 0xFFFFFFFFLL;
    else
      v19 = (v18 + 1);
  }
  else
  {
    v19 = 1;
  }
  type metadata accessor for SecureBytes.Backing();
  result = swift_allocObject();
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)(result + 24) = v19;
  if (a1 < 0)
    goto LABEL_24;
  v20 = (const void *)result;
  v21 = (char *)*v5;
  result = swift_beginAccess();
  v22 = *((_QWORD *)v21 + 2);
  if (v22 < a2)
  {
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
    return result;
  }
  sub_1D2C47358(v21, 0, a1);
  sub_1D2C955B0(a3, a4);
  sub_1D2C47358((char *)*v5, a2, v22);
  *v5 = v20;
  return swift_release();
}

size_t sub_1D2C959C4(int64_t a1, int64_t a2, size_t a3)
{
  _QWORD *v3;
  _QWORD *v7;
  size_t result;
  int64_t v9;
  int64_t v10;
  int64_t v11;
  int64_t v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v7 = v3 + 2;
  result = swift_beginAccess();
  v9 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_10;
  }
  v10 = v3[2];
  v11 = v10 - v9;
  if (__OFSUB__(v10, v9))
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  v12 = v11 + 1;
  if (__OFADD__(v11, 1))
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  result = _swift_stdlib_malloc_size(v3);
  if ((uint64_t)(result - 32) < v12)
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  v13 = __OFSUB__(1, v9);
  v14 = 1 - v9;
  if (v13)
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  if (v10 < a2)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  sub_1D2C48FA8(a2, v10, v14);
  result = sub_1D2C95CC8(a3, a1);
  v15 = v3[2];
  v16 = v15 + v14;
  if (!__OFADD__(v15, v14))
  {
    result = swift_beginAccess();
    *v7 = v16;
    return result;
  }
LABEL_15:
  __break(1u);
  return result;
}

size_t sub_1D2C95AC0(uint64_t a1, int64_t a2, void *a3, size_t a4)
{
  _QWORD *v4;
  _QWORD *v9;
  size_t result;
  int64_t v11;
  int64_t v12;
  int64_t v13;
  int64_t v14;
  BOOL v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v9 = v4 + 2;
  result = swift_beginAccess();
  v11 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_10;
  }
  v12 = v4[2];
  v13 = v12 - v11;
  if (__OFSUB__(v12, v11))
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  v14 = v13 + a4;
  if (__OFADD__(v13, a4))
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  result = _swift_stdlib_malloc_size(v4);
  if ((uint64_t)(result - 32) < v14)
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  v15 = __OFSUB__(a4, v11);
  v16 = a4 - v11;
  if (v15)
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  if (v12 < a2)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  sub_1D2C48FA8(a2, v12, v16);
  result = (size_t)sub_1D2C95D38(a3, a4, a1);
  v17 = v4[2];
  v18 = v17 + v16;
  if (!__OFADD__(v17, v16))
  {
    result = swift_beginAccess();
    *v9 = v18;
    return result;
  }
LABEL_15:
  __break(1u);
  return result;
}

size_t sub_1D2C95BC8(uint64_t a1)
{
  size_t result;
  size_t v3;
  const void *v4;
  unsigned int v5;
  unsigned int v6;
  int v7;
  uint64_t v8;
  _QWORD *v9;

  result = swift_beginAccess();
  v3 = *(_QWORD *)(a1 + 16);
  if (HIDWORD(v3))
  {
    __break(1u);
  }
  else
  {
    v4 = (const void *)(a1 + 32);
    if ((_DWORD)v3)
    {
      v5 = (v3 - 1) | ((v3 - 1) >> 1) | ((((_DWORD)v3 - 1) | ((v3 - 1) >> 1)) >> 2);
      v6 = v5 | (v5 >> 4) | ((v5 | (v5 >> 4)) >> 8);
      v7 = v6 | HIWORD(v6);
      if (v7 == -1)
        v8 = 0xFFFFFFFFLL;
      else
        v8 = (v7 + 1);
    }
    else
    {
      v8 = 1;
    }
    type metadata accessor for SecureBytes.Backing();
    v9 = (_QWORD *)swift_allocObject();
    v9[2] = 0;
    v9[3] = v8;
    _swift_stdlib_malloc_size(v9);
    memcpy(v9 + 4, v4, v3);
    swift_beginAccess();
    v9[2] = v3;
    result = _swift_stdlib_malloc_size(v9);
    if ((uint64_t)(result - 32) >= (uint64_t)v3)
      return (size_t)v9;
  }
  __break(1u);
  return result;
}

size_t sub_1D2C95CC8(size_t result, int64_t a2)
{
  const void *v2;
  int64_t v4;
  char v5;

  if (a2 < 0)
  {
    __break(1u);
    goto LABEL_7;
  }
  v4 = a2 + 1;
  if (__OFADD__(a2, 1))
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  v5 = result;
  result = _swift_stdlib_malloc_size(v2);
  if ((uint64_t)(result - 32) < v4)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  if (v4 >= a2)
  {
    result = _swift_stdlib_malloc_size(v2);
    *((_BYTE *)v2 + a2 + 32) = v5;
    return result;
  }
LABEL_9:
  __break(1u);
  return result;
}

void *sub_1D2C95D38(void *result, size_t a2, uint64_t a3)
{
  char *v3;
  uint64_t v6;
  char *v7;
  const void *v8;

  if (a3 < 0)
  {
    __break(1u);
    goto LABEL_10;
  }
  v6 = a3 + a2;
  if (__OFADD__(a3, a2))
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  v7 = v3;
  v8 = result;
  result = (void *)_swift_stdlib_malloc_size(v7);
  if ((uint64_t)result - 32 < v6)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  if (v6 < a3)
  {
LABEL_12:
    __break(1u);
LABEL_13:
    __break(1u);
    return result;
  }
  result = (void *)_swift_stdlib_malloc_size(v7);
  if (v8)
  {
    if ((a2 & 0x8000000000000000) == 0)
      return memmove(&v7[a3 + 32], v8, a2);
    goto LABEL_13;
  }
  return result;
}

uint64_t sub_1D2C95DE0()
{
  uint64_t result;

  result = cckem_kyber768();
  if (result)
    qword_1EFCA0328 = result;
  else
    __break(1u);
  return result;
}

uint64_t Kyber768.PublicKey.init<A>(dataRepresentation:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;

  if (qword_1EFC9F6E8 != -1)
    swift_once();
  v7 = cckem_sizeof_pub_ctx();
  v10 = MEMORY[0x1E0C80A78](v7);
  v8 = sub_1D2C9707C(v10, sub_1D2C95F1C);
  result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 8))(a1, a2);
  if (!v3)
    *a3 = v8;
  return result;
}

uint64_t sub_1D2C95EDC(uint64_t *a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t result;
  uint64_t v7;

  result = *a1;
  if (result)
    return sub_1D2C96008(result, a3, a2, a4, a5, a6, &v7);
  __break(1u);
  return result;
}

uint64_t sub_1D2C95F1C(uint64_t *a1, _QWORD *a2)
{
  uint64_t *v2;

  return sub_1D2C95EDC(a1, a2, v2[4], v2[5], v2[2], v2[3]);
}

uint64_t sub_1D2C95F38(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4)
{
  uint64_t result;
  int v7;
  uint64_t v8;

  if (qword_1EFC9F6E8 != -1)
    swift_once();
  cckem_pub_ctx_init();
  result = cckem_import_pubkey();
  if ((_DWORD)result)
  {
    v7 = result;
    sub_1D2C4E7DC();
    swift_allocError();
    *(_DWORD *)v8 = v7;
    *(_BYTE *)(v8 + 4) = 0;
    return swift_willThrow();
  }
  else
  {
    *a3 = a4;
  }
  return result;
}

uint64_t sub_1D2C96008(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, uint64_t a5, uint64_t a6, _QWORD *a7)
{
  uint64_t v7;
  uint64_t v11;
  uint64_t result;

  if (qword_1EFC9F6E8 != -1)
    swift_once();
  v11 = cckem_pub_ctx_init();
  MEMORY[0x1E0C80A78](v11);
  result = sub_1D2CAA8AC();
  if (v7)
    *a7 = v7;
  else
    *a3 = a4;
  return result;
}

uint64_t sub_1D2C960FC(uint64_t result)
{
  uint64_t v1;
  int v2;
  uint64_t v3;

  v1 = result;
  if (qword_1EFC9F6E8 == -1)
  {
    if (result)
      goto LABEL_3;
LABEL_7:
    __break(1u);
    return result;
  }
  result = swift_once();
  if (!v1)
    goto LABEL_7;
LABEL_3:
  result = cckem_import_pubkey();
  if ((_DWORD)result)
  {
    v2 = result;
    sub_1D2C4E7DC();
    swift_allocError();
    *(_DWORD *)v3 = v2;
    *(_BYTE *)(v3 + 4) = 0;
    return swift_willThrow();
  }
  return result;
}

uint64_t Kyber768.PublicKey.dataRepresentation.getter()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD v3[4];

  v3[3] = *MEMORY[0x1E0C80C00];
  if (qword_1EFC9F6E8 != -1)
    swift_once();
  v0 = cckem_pubkey_nbytes_info();
  v3[0] = sub_1D2C677A0(v0);
  v3[1] = v1;
  sub_1D2C86984((uint64_t)v3);
  sub_1D2C97174((uint64_t)v3);
  return v3[0];
}

uint64_t Kyber768.PublicKey.encapsulate()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unsigned __int128 v8;
  __int128 v10;
  __int128 v11;
  int v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v1 = sub_1D2CAABE8();
  MEMORY[0x1E0C80A78](v1);
  v12 = 0;
  if (!ccrng())
LABEL_19:
    __break(1u);
  if (qword_1EFC9F6E8 != -1)
    swift_once();
  v2 = cckem_shared_key_nbytes_info();
  if (qword_1ED985918 != -1)
    swift_once();
  v3 = off_1ED985910;
  *(_QWORD *)&v10 = off_1ED985910;
  if (!v2)
  {
    swift_retain();
    goto LABEL_12;
  }
  if (v2 < 0)
  {
    __break(1u);
    goto LABEL_19;
  }
  swift_retain();
  do
  {
    swift_beginAccess();
    sub_1D2C95680(*(_QWORD *)(v10 + 16), *(_QWORD *)(v10 + 16), 0);
    --v2;
  }
  while (v2);
  v3 = (void *)v10;
LABEL_12:
  v4 = cckem_encapsulated_key_nbytes_info();
  *(_QWORD *)&v10 = sub_1D2C677A0(v4);
  *((_QWORD *)&v10 + 1) = v5;
  sub_1D2C86984((uint64_t)&v10);
  v11 = v10;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    sub_1D2C95BC8((uint64_t)v3);
    swift_release();
  }
  swift_beginAccess();
  sub_1D2C97458((uint64_t)&v11);
  if (v0)
  {
    swift_release();
    v7 = *((_QWORD *)&v11 + 1);
    v6 = v11;
  }
  else
  {
    sub_1D2C49744();
    swift_retain();
    sub_1D2CAABDC();
    v8 = v11;
    sub_1D2C45028(v11, *((unint64_t *)&v11 + 1));
    sub_1D2CAAC84();
    swift_release();
    v7 = v8 >> 64;
    v6 = v8;
  }
  return sub_1D2C45258(v6, v7);
}

uint64_t sub_1D2C96510()
{
  return Kyber768.PublicKey.encapsulate()();
}

uint64_t Kyber768.PrivateKey.init<A>(bytes:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t *a4@<X8>)
{
  uint64_t v4;
  uint64_t v9;
  unint64_t v10;
  uint64_t result;
  _QWORD v12[5];
  unint64_t v13;

  if (qword_1EFC9F6E8 != -1)
    swift_once();
  v9 = cckem_sizeof_full_ctx();
  v12[2] = a2;
  v12[3] = a3;
  v12[4] = a1;
  v13 = MEMORY[0x1E0C80A78](v9);
  v10 = sub_1D2C4A1A0(v13, (uint64_t (*)(_QWORD *, uint64_t *))sub_1D2C97C50, (uint64_t)v12);
  result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 8))(a1, a2);
  if (!v4)
    *a4 = v10;
  return result;
}

_QWORD *sub_1D2C965FC(_QWORD *result, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  if (*result)
  {
    result = (_QWORD *)sub_1D2CAA8AC();
    if (!v4)
      *a2 = a4;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1D2C9666C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  char v10;
  int v11;

  if (qword_1EFC9F6E8 != -1)
    swift_once();
  v4 = cckem_privkey_nbytes_info();
  result = cckem_pubkey_nbytes_info();
  v6 = v4 + result;
  if (__OFADD__(v4, result))
  {
    __break(1u);
    goto LABEL_16;
  }
  if (!a1)
  {
    if (v6)
      goto LABEL_9;
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  if (v6 != a2 - a1)
  {
LABEL_9:
    sub_1D2C4E7DC();
    swift_allocError();
    v10 = 1;
    *(_DWORD *)v9 = 1;
    goto LABEL_10;
  }
  v7 = cckem_import_privkey();
  if (v7)
  {
    v8 = v7;
    sub_1D2C4E7DC();
    swift_allocError();
    v10 = 0;
    *(_DWORD *)v9 = v8;
LABEL_10:
    *(_BYTE *)(v9 + 4) = v10;
    return swift_willThrow();
  }
  result = cckem_public_ctx();
  if (!result)
  {
LABEL_17:
    __break(1u);
    return result;
  }
  result = cckem_import_pubkey();
  if ((_DWORD)result)
  {
    v11 = result;
    sub_1D2C4E7DC();
    swift_allocError();
    v10 = 0;
    *(_DWORD *)v9 = v11;
    goto LABEL_10;
  }
  return result;
}

uint64_t Kyber768.PrivateKey.dataRepresentation.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD v4[4];

  v4[3] = *MEMORY[0x1E0C80C00];
  if (qword_1EFC9F6E8 != -1)
    swift_once();
  v0 = cckem_privkey_nbytes_info();
  v1 = cckem_pubkey_nbytes_info();
  if (__OFADD__(v0, v1))
    __break(1u);
  v4[0] = sub_1D2C677A0(v0 + v1);
  v4[1] = v2;
  sub_1D2C86984((uint64_t)v4);
  sub_1D2C97760((uint64_t)v4);
  return v4[0];
}

unint64_t static Kyber768.PrivateKey.generate()@<X0>(unint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t result;

  v2 = ccrng();
  if (!v2)
    __break(1u);
  v3 = v2;
  if (qword_1EFC9F6E8 != -1)
    swift_once();
  v4 = cckem_sizeof_full_ctx();
  result = sub_1D2C4A0B8(v4, v3, v4);
  *a1 = result;
  return result;
}

void Kyber768.PrivateKey.decapsulate(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  void *v4;
  _QWORD *v5;

  if (qword_1EFC9F6E8 != -1)
    swift_once();
  v3 = cckem_shared_key_nbytes_info();
  if (qword_1ED985918 != -1)
    swift_once();
  v4 = off_1ED985910;
  v5 = off_1ED985910;
  if (v3)
  {
    if (v3 < 0)
    {
      __break(1u);
      JUMPOUT(0x1D2C96DE0);
    }
    swift_retain();
    do
    {
      swift_beginAccess();
      sub_1D2C95680(v5[2], v5[2], 0);
      --v3;
    }
    while (v3);
    v4 = v5;
  }
  else
  {
    swift_retain();
  }
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    sub_1D2C95BC8((uint64_t)v4);
    swift_release();
  }
  swift_beginAccess();
  __asm { BR              X10 }
}

uint64_t Kyber768.PrivateKey.publicKey.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;

  if (qword_1EFC9F6E8 != -1)
    swift_once();
  v2 = cckem_sizeof_pub_ctx();
  if (v2 < 0)
  {
    __break(1u);
    goto LABEL_11;
  }
  v3 = v2;
  if (v2)
  {
    v4 = sub_1D2CAAF30();
    *(_QWORD *)(v4 + 16) = v3;
  }
  else
  {
    v4 = MEMORY[0x1E0DEE9D8];
  }
  if (!cckem_public_ctx())
LABEL_12:
    __break(1u);
  if (cckem_export_pubkey())
  {
LABEL_11:
    __break(1u);
    __break(1u);
    goto LABEL_12;
  }
  *(_QWORD *)(v4 + 16) = v3;
  v5 = cckem_sizeof_pub_ctx();
  v8 = MEMORY[0x1E0C80A78](v5);
  v6 = sub_1D2C9707C(v8, sub_1D2C97C6C);
  result = swift_bridgeObjectRelease();
  *a1 = v6;
  return result;
}

unint64_t sub_1D2C96F9C@<X0>(unint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t result;

  v2 = ccrng();
  if (!v2)
    __break(1u);
  v3 = v2;
  if (qword_1EFC9F6E8 != -1)
    swift_once();
  v4 = cckem_sizeof_full_ctx();
  result = sub_1D2C4A0B8(v4, v3, v4);
  *a1 = result;
  return result;
}

void sub_1D2C97064(uint64_t a1, uint64_t a2)
{
  Kyber768.PrivateKey.decapsulate(_:)(a1, a2);
}

uint64_t sub_1D2C9707C(uint64_t result, uint64_t (*a2)(_QWORD *, uint64_t *))
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[2];
  uint64_t v8;

  if (result < 0)
  {
    __break(1u);
    goto LABEL_16;
  }
  v4 = result;
  if (result)
  {
    v5 = sub_1D2CAAF30();
    *(_QWORD *)(v5 + 16) = v4;
  }
  else
  {
    v5 = MEMORY[0x1E0DEE9D8];
  }
  v6 = v5 + 32;
  v7[1] = v4;
  v8 = 0;
  v7[0] = v5 + 32;
  result = a2(v7, &v8);
  if (v2)
  {
    if (v8 <= v4)
    {
      if (!v7[0])
      {
LABEL_20:
        __break(1u);
        goto LABEL_21;
      }
      if (v6 == v7[0])
      {
        *(_QWORD *)(v5 + 16) = v8;
        swift_bridgeObjectRelease();
        return v5;
      }
      goto LABEL_17;
    }
LABEL_16:
    __break(1u);
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  if (v8 > v4)
  {
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  if (v7[0])
  {
    if (v6 == v7[0])
    {
      *(_QWORD *)(v5 + 16) = v8;
      return v5;
    }
    goto LABEL_19;
  }
LABEL_21:
  __break(1u);
  return result;
}

void sub_1D2C97174(uint64_t a1)
{
  __asm { BR              X11 }
}

uint64_t sub_1D2C971D4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t result;
  unsigned int v4;
  unsigned __int8 v5;
  unsigned __int8 v6;
  unsigned __int8 v7;

  LOWORD(v4) = a1;
  BYTE2(v4) = BYTE2(a1);
  HIBYTE(v4) = BYTE3(a1);
  v5 = BYTE4(a1);
  v6 = BYTE5(a1);
  v7 = BYTE6(a1);
  result = cckem_export_pubkey();
  if ((_DWORD)result)
  {
    __break(1u);
    JUMPOUT(0x1D2C97420);
  }
  *v2 = v1;
  v2[1] = v4 | ((unint64_t)v5 << 32) | ((unint64_t)v6 << 40) | ((unint64_t)v7 << 48);
  return result;
}

void sub_1D2C97458(uint64_t a1)
{
  __asm { BR              X13 }
}

uint64_t sub_1D2C974C0()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t result;
  int v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  unsigned __int8 v9;
  unsigned __int8 v10;
  unsigned __int8 v11;

  v7 = v1;
  LOWORD(v8) = v0;
  BYTE2(v8) = BYTE2(v0);
  HIBYTE(v8) = BYTE3(v0);
  v9 = BYTE4(v0);
  v10 = BYTE5(v0);
  v11 = BYTE6(v0);
  if (!v3)
  {
    __break(1u);
    JUMPOUT(0x1D2C97744);
  }
  result = cckem_encapsulate();
  if ((_DWORD)result)
  {
    v5 = result;
    sub_1D2C4E7DC();
    swift_allocError();
    *(_DWORD *)v6 = v5;
    *(_BYTE *)(v6 + 4) = 0;
    result = swift_willThrow();
  }
  *v2 = v7;
  v2[1] = v8 | ((unint64_t)v9 << 32) | ((unint64_t)v10 << 40) | ((unint64_t)v11 << 48);
  return result;
}

void sub_1D2C97760(uint64_t a1)
{
  __asm { BR              X13 }
}

uint64_t sub_1D2C977C4()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  unsigned int v7;
  unsigned __int8 v8;
  unsigned __int8 v9;
  unsigned __int8 v10;

  v6 = v1;
  LOWORD(v7) = v0;
  BYTE2(v7) = BYTE2(v0);
  HIBYTE(v7) = BYTE3(v0);
  v8 = BYTE4(v0);
  v9 = BYTE5(v0);
  v10 = BYTE6(v0);
  if (cckem_export_privkey())
  {
    __break(1u);
    JUMPOUT(0x1D2C979F4);
  }
  if (__OFSUB__(v4, *v3))
  {
    __break(1u);
    JUMPOUT(0x1D2C97A00);
  }
  if (!cckem_public_ctx())
  {
    __break(1u);
    JUMPOUT(0x1D2C97A20);
  }
  result = cckem_export_pubkey();
  if ((_DWORD)result)
  {
    __break(1u);
    JUMPOUT(0x1D2C97A0CLL);
  }
  *v2 = v6;
  v2[1] = v7 | ((unint64_t)v8 << 32) | ((unint64_t)v9 << 40) | ((unint64_t)v10 << 48);
  return result;
}

uint64_t sub_1D2C97A3C(int *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v6;
  int v7;
  uint64_t v8;

  result = sub_1D2CAA8F4();
  v6 = *a1;
  if (a1[1] < (int)v6)
  {
    __break(1u);
    goto LABEL_9;
  }
  result = sub_1D2CAA864();
  if (!result)
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  result = sub_1D2CAA888();
  if (__OFSUB__(v6, result))
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  result = sub_1D2CAA87C();
  if (!a3)
  {
LABEL_11:
    __break(1u);
    return result;
  }
  result = cckem_encapsulate();
  if ((_DWORD)result)
  {
    v7 = result;
    sub_1D2C4E7DC();
    swift_allocError();
    *(_DWORD *)v8 = v7;
    *(_BYTE *)(v8 + 4) = 0;
    return swift_willThrow();
  }
  return result;
}

uint64_t sub_1D2C97B3C(int *a1, uint64_t a2, _QWORD *a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t result;

  sub_1D2CAA8F4();
  v7 = *a1;
  if (a1[1] < (int)v7)
  {
    __break(1u);
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  if (!sub_1D2CAA864())
  {
LABEL_14:
    __break(1u);
LABEL_15:
    __break(1u);
  }
  if (__OFSUB__(v7, sub_1D2CAA888()))
    goto LABEL_10;
  sub_1D2CAA87C();
  if (cckem_export_privkey())
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  if (__OFSUB__(a4, *a3))
  {
LABEL_12:
    __break(1u);
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  if (!cckem_public_ctx())
    goto LABEL_15;
  result = cckem_export_pubkey();
  if ((_DWORD)result)
    goto LABEL_13;
  return result;
}

_QWORD *sub_1D2C97C50(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;

  return sub_1D2C965FC(a1, a2, *(_QWORD *)(v2 + 32), *(_QWORD *)(v2 + 40));
}

uint64_t sub_1D2C97C6C(uint64_t *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t result;

  result = *a1;
  if (result)
    return sub_1D2C95F38(result, **(_QWORD **)(v2 + 16), a2, *(_QWORD *)(v2 + 24));
  __break(1u);
  return result;
}

unint64_t sub_1D2C97C9C()
{
  unint64_t result;

  result = qword_1EFCA0330;
  if (!qword_1EFCA0330)
  {
    result = MEMORY[0x1D8245F38](&protocol conformance descriptor for Kyber768.PublicKey, &type metadata for Kyber768.PublicKey);
    atomic_store(result, (unint64_t *)&qword_1EFCA0330);
  }
  return result;
}

ValueMetadata *type metadata accessor for Kyber768()
{
  return &type metadata for Kyber768;
}

ValueMetadata *type metadata accessor for Kyber768.PublicKey()
{
  return &type metadata for Kyber768.PublicKey;
}

ValueMetadata *type metadata accessor for Kyber768.PrivateKey()
{
  return &type metadata for Kyber768.PrivateKey;
}

size_t sub_1D2C97D10()
{
  _QWORD *v0;
  size_t v1;
  size_t result;
  int64_t v3;

  v1 = _swift_stdlib_malloc_size(v0) - 32;
  result = swift_beginAccess();
  v3 = v0[2];
  if (__OFSUB__(v1, v3))
  {
    __break(1u);
    goto LABEL_6;
  }
  if (((v1 - v3) & 0x8000000000000000) != 0)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  result = _swift_stdlib_malloc_size(v0);
  if ((uint64_t)(result - 32) >= v3)
  {
    v0[2] = v3;
    return result;
  }
LABEL_7:
  __break(1u);
  return result;
}

size_t sub_1D2C97D90(int64_t a1, int64_t a2)
{
  _QWORD *v2;
  _QWORD *v5;
  size_t result;
  int64_t v7;
  int64_t v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v5 = v2 + 2;
  result = swift_beginAccess();
  v7 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_11;
  }
  v8 = v2[2];
  if (__OFSUB__(v8, v7))
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  result = _swift_stdlib_malloc_size(v2);
  if ((uint64_t)(result - 32) < v8 - v7)
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  v9 = __OFSUB__(0, v7);
  v10 = a1 - a2;
  if (v9)
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  if (v8 < a2)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  result = sub_1D2C48FA8(a2, v8, v10);
  if (a1 < 0)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  result = _swift_stdlib_malloc_size(v2);
  if ((uint64_t)(result - 32) < a1)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  result = _swift_stdlib_malloc_size(v2);
  v11 = v2[2];
  v12 = v11 + v10;
  if (!__OFADD__(v11, v10))
  {
    result = swift_beginAccess();
    *v5 = v12;
    return result;
  }
LABEL_17:
  __break(1u);
  return result;
}

uint64_t sub_1D2C97E94(int64_t a1, int64_t a2)
{
  const void **v2;
  const void **v3;
  _QWORD *v6;
  uint64_t result;
  int64_t v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  int v12;
  uint64_t v13;
  const void *v14;
  char *v15;
  uint64_t v16;

  v3 = v2;
  v6 = (char *)*v2 + 16;
  result = swift_beginAccess();
  v8 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_19;
  }
  v9 = *v6 - v8;
  if (__OFSUB__(*v6, v8))
  {
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  result = swift_isUniquelyReferenced_nonNull_native();
  if ((_DWORD)result)
  {
    result = _swift_stdlib_malloc_size(*v3);
    if (result - 32 >= v9)
    {
      if (a2 >= a1)
        return sub_1D2C97D90(a1, a2);
      goto LABEL_24;
    }
  }
  if (v9 < 0)
    goto LABEL_20;
  if (HIDWORD(v9))
  {
LABEL_21:
    __break(1u);
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  if ((_DWORD)v9)
  {
    v10 = (v9 - 1) | ((v9 - 1) >> 1) | ((((_DWORD)v9 - 1) | ((v9 - 1) >> 1)) >> 2);
    v11 = v10 | (v10 >> 4) | ((v10 | (v10 >> 4)) >> 8);
    v12 = v11 | HIWORD(v11);
    if (v12 == -1)
      v13 = 0xFFFFFFFFLL;
    else
      v13 = (v12 + 1);
  }
  else
  {
    v13 = 1;
  }
  type metadata accessor for SecureBytes.Backing();
  result = swift_allocObject();
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)(result + 24) = v13;
  if (a1 < 0)
    goto LABEL_22;
  v14 = (const void *)result;
  v15 = (char *)*v3;
  result = swift_beginAccess();
  v16 = *((_QWORD *)v15 + 2);
  if (v16 < a2)
  {
LABEL_23:
    __break(1u);
LABEL_24:
    __break(1u);
    return result;
  }
  sub_1D2C47358(v15, 0, a1);
  sub_1D2C97D10();
  sub_1D2C47358((char *)*v3, a2, v16);
  *v3 = v14;
  return swift_release();
}

uint64_t sub_1D2C98010(uint64_t a1, uint64_t a2)
{
  return sub_1D2C9666C(a1, a2);
}

uint64_t sub_1D2C98028(uint64_t a1)
{
  return sub_1D2C960FC(a1);
}

uint64_t sub_1D2C98040(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  _OWORD *v11;
  int64_t v12;
  int64_t v13;
  int64_t v14;
  int64_t v15;
  uint64_t v16;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 && (v4 = *(_QWORD *)(a2 + 16)) != 0)
  {
    v6 = *(_QWORD *)(a1 + 32);
    sub_1D2CAAF0C();
    sub_1D2CAAF0C();
    v7 = 0;
    v8 = MEMORY[0x1E0DEE9D8];
    while (1)
    {
      v9 = *(_QWORD *)(a2 + 8 * v7 + 32);
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EFC9FAC8);
      result = swift_initStackObject();
      *(_OWORD *)(result + 16) = xmmword_1D2CAD530;
      *(_QWORD *)(result + 32) = v6;
      v11 = (_OWORD *)(result + 32);
      *(_QWORD *)(result + 40) = v9;
      v12 = *(_QWORD *)(v8 + 16);
      v13 = v12 + 2;
      if (__OFADD__(v12, 2))
        break;
      result = swift_isUniquelyReferenced_nonNull_native();
      if (!(_DWORD)result || (v14 = *(_QWORD *)(v8 + 24) >> 1, v14 < v13))
      {
        if (v12 <= v13)
          v15 = v12 + 2;
        else
          v15 = v12;
        result = (uint64_t)sub_1D2C71A7C((char *)result, v15, 1, (char *)v8);
        v8 = result;
        v14 = *(_QWORD *)(result + 24) >> 1;
      }
      v16 = *(_QWORD *)(v8 + 16);
      if (v14 - v16 < 2)
        goto LABEL_19;
      *(_OWORD *)(v8 + 8 * v16 + 32) = *v11;
      if (__OFADD__(v16, 2))
        goto LABEL_20;
      *(_QWORD *)(v8 + 16) = v16 + 2;
      swift_bridgeObjectRelease();
      if (v2 - 1 != v7)
      {
        v6 = *(_QWORD *)(a1 + 8 * v7++ + 40);
        if (v4 != v7)
          continue;
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v8;
    }
    __break(1u);
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
  }
  else
  {
    return MEMORY[0x1E0DEE9D8];
  }
  return result;
}

uint64_t sub_1D2C981CC(int64_t a1, int64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6)
{
  uint64_t v6;
  uint64_t v7;
  int64_t v11;
  uint64_t v12;
  int64_t v13;
  _BOOL4 v14;
  BOOL v15;
  _QWORD *v16;
  uint64_t result;
  BOOL v18;
  BOOL v19;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  _QWORD *v26;

  v7 = v6;
  v11 = a1;
  v12 = 0;
  v13 = a1;
  while (1)
  {
    v14 = v13 <= a2;
    if (a3 > 0)
      v14 = v13 >= a2;
    if (v14)
      break;
    v15 = __OFADD__(v13, a3);
    v13 += a3;
    if (v15)
      v13 = (v13 >> 63) ^ 0x8000000000000000;
    v15 = __OFADD__(v12++, 1);
    if (v15)
    {
      __break(1u);
      break;
    }
  }
  v26 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  v16 = &v26;
  result = sub_1D2CAB020();
  if (!v12)
    goto LABEL_25;
  while (1)
  {
    v18 = v11 <= a2;
    if (a3 > 0)
      v18 = v11 >= a2;
    if (v18)
      break;
    v23 = v11;
    v24 = 0;
    sub_1D2C99944(&v23, a4, a5, a6, &v22, &v25);
    if (v7)
    {
LABEL_29:
      swift_bridgeObjectRelease();
      swift_release();
      return (uint64_t)v16;
    }
    v7 = 0;
    if (__OFADD__(v11, a3))
      v11 = ((v11 + a3) >> 63) ^ 0x8000000000000000;
    else
      v11 += a3;
    sub_1D2CAB008();
    sub_1D2CAB02C();
    sub_1D2CAB038();
    v16 = &v26;
    result = sub_1D2CAB014();
    if (!--v12)
    {
      while (1)
      {
LABEL_25:
        v19 = v11 <= a2;
        if (a3 > 0)
          v19 = v11 >= a2;
        if (v19)
          break;
        v23 = v11;
        sub_1D2C99944(&v23, a4, a5, a6, &v22, &v25);
        if (v7)
          goto LABEL_29;
        v7 = 0;
        if (__OFADD__(v11, a3))
          v11 = ((v11 + a3) >> 63) ^ 0x8000000000000000;
        else
          v11 += a3;
        sub_1D2CAB008();
        sub_1D2CAB02C();
        sub_1D2CAB038();
        v16 = &v26;
        sub_1D2CAB014();
      }
      v16 = v26;
      swift_bridgeObjectRelease();
      return (uint64_t)v16;
    }
  }
  __break(1u);
  return result;
}

_QWORD *sub_1D2C983D8(_QWORD *result, uint64_t a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;

  if (a2 < 0)
  {
    __break(1u);
  }
  else
  {
    v3 = result;
    if (a2)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EFC9F9E8);
      v4 = (_QWORD *)sub_1D2CAAF30();
      v5 = v4;
      v4[2] = a2;
      v4[4] = v3;
      if (a2 != 1)
      {
        v4[5] = v3;
        v6 = a2 - 2;
        if (v6)
        {
          v7 = v4 + 6;
          do
          {
            *v7++ = v3;
            sub_1D2CAAF0C();
            --v6;
          }
          while (v6);
        }
        sub_1D2CAAF0C();
      }
    }
    else
    {
      swift_bridgeObjectRelease();
      return (_QWORD *)MEMORY[0x1E0DEE9D8];
    }
    return v5;
  }
  return result;
}

uint64_t PIR.IndexPirClient.init(pirParams:secretKey:)@<X0>(char *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  char v5;
  char v6;
  uint64_t v7;
  char v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD v23[2];
  int v24;
  int v25;

  v5 = *a1;
  v6 = a1[1];
  v25 = a1[2];
  v7 = *((_QWORD *)a1 + 3);
  v21 = *((_QWORD *)a1 + 2);
  v22 = *((_QWORD *)a1 + 1);
  v19 = *((_QWORD *)a1 + 5);
  v20 = *((_QWORD *)a1 + 4);
  v18 = *((_QWORD *)a1 + 6);
  v24 = a1[56];
  v8 = a1[57];
  v10 = *a2;
  v9 = a2[1];
  LOBYTE(v23[0]) = v5;
  BYTE1(v23[0]) = v6;
  _s12ParamContextCMa();
  swift_allocObject();
  sub_1D2CAAF0C();
  sub_1D2C6BC3C((uint64_t)v23);
  if (v3)
  {
    sub_1D2C45258(v10, v9);
    return swift_bridgeObjectRelease_n();
  }
  else
  {
    v13 = v11;
    v17 = v8;
    v14 = v25;
    v23[0] = v10;
    v23[1] = v9;
    swift_retain_n();
    sub_1D2C90FBC((uint64_t)v23, v13);
    v16 = v15;
    sub_1D2CAAF0C();
    swift_release();
    result = swift_bridgeObjectRelease_n();
    *(_BYTE *)a3 = v5;
    *(_BYTE *)(a3 + 1) = v6;
    *(_BYTE *)(a3 + 2) = v14;
    *(_QWORD *)(a3 + 8) = v22;
    *(_QWORD *)(a3 + 16) = v21;
    *(_QWORD *)(a3 + 24) = v7;
    *(_QWORD *)(a3 + 32) = v20;
    *(_QWORD *)(a3 + 40) = v19;
    *(_QWORD *)(a3 + 48) = v18;
    *(_BYTE *)(a3 + 56) = v24;
    *(_BYTE *)(a3 + 57) = v17;
    *(_QWORD *)(a3 + 64) = v13;
    *(_QWORD *)(a3 + 72) = v16;
  }
  return result;
}

unint64_t PIR.IndexPirClient.generateGaloisKey()@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  unint64_t result;
  int v14;
  uint64_t inited;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  BOOL v21;
  int v22;

  v3 = v1;
  v5 = *(unsigned __int8 *)(v1 + 2);
  v6 = *(_QWORD *)(v1 + 64);
  v7 = *(_QWORD *)(v3 + 72);
  if (v5 == 2)
  {
    v8 = *(_QWORD *)(v3 + 40);
    if (v8 >= 0)
      v9 = *(_QWORD *)(v3 + 40);
    else
      v9 = v8 + 1;
    v10 = v9 >> 1;
    if (v8 == 1)
      v11 = 1;
    else
      v11 = v10;
    if ((v11 & 0x8000000000000000) == 0)
    {
      if (!HIDWORD(v11))
      {
        v12 = *(_BYTE *)(v3 + 57);
        result = sub_1D2C6BE44();
        if (!v2)
        {
          v14 = result;
          __swift_instantiateConcreteTypeFromMangledName(&qword_1EFC9F9D0);
          inited = swift_initStackObject();
          *(_OWORD *)(inited + 16) = xmmword_1D2CACF70;
          *(_DWORD *)(inited + 32) = v14;
          if ((v12 & 1) != 0)
          {
            v22 = sub_1D2C6BF00();
            inited = (uint64_t)sub_1D2C71DA0((char *)1, 2, 1, (char *)inited);
            *(_QWORD *)(inited + 16) = 2;
            *(_DWORD *)(inited + 36) = v22;
          }
          swift_retain();
          swift_retain();
          return sub_1D2C9C6C8(v6, inited, v7, a1);
        }
        return result;
      }
LABEL_24:
      __break(1u);
    }
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  v16 = *(_QWORD *)(v3 + 24);
  v17 = *(_QWORD *)(v16 + 16);
  if (v17)
  {
    v18 = 0;
    v19 = (uint64_t *)(v16 + 32);
    while (1)
    {
      v20 = *v19++;
      v21 = __OFADD__(v18, v20);
      v18 += v20;
      if (v21)
        break;
      if (!--v17)
        return sub_1D2C912A4(v18, v6, v7, a1);
    }
    __break(1u);
    goto LABEL_23;
  }
  v18 = 0;
  return sub_1D2C912A4(v18, v6, v7, a1);
}

uint64_t PIR.IndexPirClient.generateRelinKey()@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(_QWORD *)(v1 + 72);
  swift_retain();
  swift_retain();
  return sub_1D2C9C1E4(v3, a1);
}

_QWORD *PIR.IndexPirClient.query(indices:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;

  if (*(_BYTE *)(v1 + 2) == 2)
    return sub_1D2C98CEC(a1);
  v3 = sub_1D2CAAF0C();
  return (_QWORD *)sub_1D2C99104(v3);
}

uint64_t PIR.IndexPirClient.decryptVectorizedPirReply(reply:indices:)(uint64_t result, uint64_t a2)
{
  _OWORD *v2;
  uint64_t v3;
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _OWORD v20[2];
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;

  v5 = v2[1];
  v20[0] = *v2;
  v20[1] = v5;
  v6 = v2[3];
  v21 = v2[2];
  v22 = v6;
  v23 = v2[4];
  if (BYTE2(v20[0]) != 2)
    goto LABEL_9;
  if ((BYTE8(v22) & 1) != 0)
    v4 = 1;
  else
    v4 = v22;
  if (!v4)
  {
    __break(1u);
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  v7 = result;
  if (*((_QWORD *)&v21 + 1) == 0x8000000000000000 && v4 == -1)
    goto LABEL_24;
  v8 = *((_QWORD *)&v21 + 1) / v4;
  v9 = *(_QWORD *)(a2 + 16);
  if (*((_QWORD *)&v21 + 1) / v4 < v9)
  {
LABEL_9:
    sub_1D2C4E7DC();
    swift_allocError();
    *(_DWORD *)v10 = 5;
    *(_BYTE *)(v10 + 4) = 1;
    swift_willThrow();
    return v4;
  }
  if (v21 >= 0)
    v11 = *((_QWORD *)&v21 + 1);
  else
    v11 = *((_QWORD *)&v21 + 1) + 1;
  v12 = v11 >> 1;
  if (*((_QWORD *)&v21 + 1) == 1)
    v13 = 1;
  else
    v13 = v12;
  v14 = sub_1D2C99BD8(a2, v13);
  if (v3)
    return v4;
  v15 = v14;
  if (v13 >= v4)
    v16 = v13 / v4;
  else
    v16 = 1;
  v24 = v16;
  sub_1D2C9B2FC((uint64_t)v20);
  v17 = sub_1D2C9B078(v7, (uint64_t)v20);
  sub_1D2C9B340((uint64_t)v20);
  sub_1D2C9B2FC((uint64_t)v20);
  v18 = sub_1D2C9B544(v17, (uint64_t)v20);
  sub_1D2C9B340((uint64_t)v20);
  swift_bridgeObjectRelease();
  result = cche_encryption_params_polynomial_degree();
  if (v13)
  {
    v19 = result >> 1;
    sub_1D2C9B2FC((uint64_t)v20);
    v4 = (uint64_t)sub_1D2C9B7F4(0, v9, v15, v19 / v13, v19, v18, v8, v4, (uint64_t)v20, v13, v24);
    sub_1D2C9B340((uint64_t)v20);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return v4;
  }
LABEL_25:
  __break(1u);
  return result;
}

_OWORD *PIR.IndexPirClient.decrypt(reply:index:)(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _OWORD *result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  if (*(_BYTE *)(v2 + 2) == 2)
  {
    sub_1D2C4E7DC();
    swift_allocError();
    *(_DWORD *)v4 = 5;
    *(_BYTE *)(v4 + 4) = 1;
    return (_OWORD *)swift_willThrow();
  }
  v7 = *(_QWORD *)(v2 + 32);
  v8 = *(_QWORD *)(v2 + 16);
  result = sub_1D2C9962C(a1);
  if (!v3)
  {
    if (v7)
    {
      if (a2 == 0x8000000000000000 && v7 == -1)
      {
LABEL_14:
        __break(1u);
        JUMPOUT(0x1D2C98CD0);
      }
      v10 = a2 % v7 * v8;
      if ((unsigned __int128)(a2 % v7 * (__int128)v8) >> 64 == v10 >> 63)
      {
        if (!__OFADD__(v10, v8))
          __asm { BR              X10 }
        goto LABEL_13;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  return result;
}

_QWORD *sub_1D2C98CEC(_QWORD *result)
{
  _OWORD *v1;
  uint64_t v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  unint64_t v32;
  char *v33;
  unint64_t v34;
  uint64_t isUniquelyReferenced_nonNull_native;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  _OWORD v46[5];
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  _BYTE v54[26];
  char *v55;

  v3 = v1[3];
  v4 = v1[4];
  v49 = v1[2];
  v50 = v3;
  v51 = v4;
  v5 = v1[1];
  v47 = *v1;
  v48 = v5;
  *(_OWORD *)&v54[10] = *(_OWORD *)((char *)v1 + 42);
  v53 = v5;
  *(_OWORD *)v54 = v49;
  v52 = v47;
  if (v54[24])
    v6 = 1;
  else
    v6 = *(_QWORD *)&v54[16];
  if (!v6)
  {
LABEL_56:
    __break(1u);
LABEL_57:
    __break(1u);
    goto LABEL_58;
  }
  v7 = v2;
  v8 = result;
  if (*(_QWORD *)&v54[8] == 0x8000000000000000 && v6 == -1)
    goto LABEL_57;
  v9 = result[2];
  v44 = *(_QWORD *)&v54[8] / v6;
  if (*(_QWORD *)&v54[8] / v6 < v9)
  {
    sub_1D2C4E7DC();
    swift_allocError();
    *(_DWORD *)v10 = 5;
    *(_BYTE *)(v10 + 4) = 1;
    swift_willThrow();
    return v1;
  }
  v11 = cche_encryption_params_polynomial_degree();
  if (v11)
  {
    v12 = v11;
    v13 = v9;
    v14 = v11;
    v1 = (_OWORD *)sub_1D2CAAF30();
    *((_QWORD *)v1 + 2) = v14;
    v9 = v13;
    bzero(v1 + 2, 8 * v12);
  }
  else
  {
    v1 = (_OWORD *)MEMORY[0x1E0DEE9D8];
  }
  v41 = *((_QWORD *)&v53 + 1);
  result = sub_1D2C983D8(v1, *(_QWORD *)(*((_QWORD *)&v53 + 1) + 16));
  v15 = result;
  if (!v9)
  {
LABEL_45:
    sub_1D2C9B2FC((uint64_t)&v47);
    isUniquelyReferenced_nonNull_native = sub_1D2C9ABE4((uint64_t)v15, (uint64_t)&v47);
    if (v7)
    {
      sub_1D2C9B340((uint64_t)&v47);
      swift_bridgeObjectRelease();
    }
    else
    {
LABEL_50:
      v1 = (_OWORD *)isUniquelyReferenced_nonNull_native;
      sub_1D2C9B340((uint64_t)&v47);
      swift_bridgeObjectRelease();
    }
    return v1;
  }
  if ((v6 & 0x8000000000000000) == 0)
  {
    v37 = v2;
    v16 = *((_QWORD *)&v53 + 1);
    v38 = *((_QWORD *)&v53 + 1) + 32;
    v39 = v8 + 4;
    sub_1D2CAAF0C();
    v45 = 0;
    v42 = v6;
LABEL_16:
    v17 = *(_QWORD *)(v16 + 16);
    if (v17)
    {
      v18 = v39[v45];
      sub_1D2C9C038((uint64_t)&v52);
      result = sub_1D2C71A70(0, 1, 1, MEMORY[0x1E0DEE9D8]);
      v19 = (char *)result;
      v20 = (uint64_t *)v38;
      while (1)
      {
        v22 = *v20++;
        v21 = v22;
        if (!v22)
          break;
        if (v18 == 0x8000000000000000 && v21 == -1)
          goto LABEL_55;
        v24 = *((_QWORD *)v19 + 2);
        v23 = *((_QWORD *)v19 + 3);
        if (v24 >= v23 >> 1)
        {
          result = sub_1D2C71A70((char *)(v23 > 1), v24 + 1, 1, v19);
          v19 = (char *)result;
        }
        *((_QWORD *)v19 + 2) = v24 + 1;
        *(_QWORD *)&v19[8 * v24 + 32] = v18 % v21;
        v18 /= v21;
        if (!--v17)
        {
          v25 = v19;
          sub_1D2C9C060((uint64_t)&v52);
          result = v25;
          goto LABEL_26;
        }
      }
      __break(1u);
    }
    else
    {
      result = (_QWORD *)MEMORY[0x1E0DEE9D8];
LABEL_26:
      v26 = 0;
      v40 = v45 + 1;
      v43 = result;
      while (v26 != v6)
      {
        v46[2] = v49;
        v46[3] = v50;
        v46[4] = v51;
        v46[0] = v47;
        v46[1] = v48;
        v27 = v26 * v44;
        if ((unsigned __int128)(v26 * (__int128)v44) >> 64 != (v26 * v44) >> 63)
          goto LABEL_53;
        v28 = v45 + v27;
        if (__OFADD__(v45, v27))
          goto LABEL_54;
        v29 = (char *)result;
        sub_1D2CAAF0C();
        v1 = v46;
        v30 = sub_1D2C993E4(v28, v29);
        v31 = *((_QWORD *)v30 + 2);
        v55 = v30;
        if (v31)
        {
          v32 = 0;
          v33 = v30 + 32;
          while (1)
          {
            v34 = *(_QWORD *)&v33[8 * v32];
            isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
            if ((isUniquelyReferenced_nonNull_native & 1) == 0)
            {
              isUniquelyReferenced_nonNull_native = (uint64_t)sub_1D2C5361C(v15);
              v15 = (_QWORD *)isUniquelyReferenced_nonNull_native;
            }
            if (v32 >= v15[2])
              break;
            v1 = &v15[v32];
            v36 = *((_QWORD *)v1 + 4);
            isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
            *((_QWORD *)v1 + 4) = v36;
            if ((isUniquelyReferenced_nonNull_native & 1) != 0)
            {
              if ((v34 & 0x8000000000000000) != 0)
                goto LABEL_48;
            }
            else
            {
              isUniquelyReferenced_nonNull_native = (uint64_t)sub_1D2C53608(v36);
              v36 = isUniquelyReferenced_nonNull_native;
              *((_QWORD *)v1 + 4) = isUniquelyReferenced_nonNull_native;
              if ((v34 & 0x8000000000000000) != 0)
                goto LABEL_48;
            }
            if (v34 >= *(_QWORD *)(v36 + 16))
              goto LABEL_49;
            ++v32;
            *(_QWORD *)(v36 + 8 * v34 + 32) = 1;
            if (v31 == v32)
              goto LABEL_27;
          }
          __break(1u);
LABEL_48:
          __break(1u);
LABEL_49:
          __break(1u);
          goto LABEL_50;
        }
LABEL_27:
        ++v26;
        swift_bridgeObjectRelease();
        v6 = v42;
        result = v43;
        if (v26 == v42)
        {
          swift_bridgeObjectRelease();
          v16 = v41;
          ++v45;
          if (v40 != v9)
            goto LABEL_16;
          swift_bridgeObjectRelease();
          v7 = v37;
          goto LABEL_45;
        }
      }
    }
    __break(1u);
LABEL_53:
    __break(1u);
LABEL_54:
    __break(1u);
LABEL_55:
    __break(1u);
    goto LABEL_56;
  }
LABEL_58:
  __break(1u);
  return result;
}

uint64_t sub_1D2C99104(uint64_t result)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  int64_t v12;
  int64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;
  int64_t v19;
  uint64_t v20;
  int64_t v21;
  int64_t v22;
  int64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v2 = *(_QWORD *)(result + 16);
  v29 = v1[8];
  v28 = v1[9];
  if (!v2)
  {
    v6 = MEMORY[0x1E0DEE9D8];
    v7 = MEMORY[0x1E0DEE9D8];
LABEL_37:
    swift_bridgeObjectRelease();
    v27 = sub_1D2C91B80(v7, v29, v28, v6);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return (uint64_t)v27;
  }
  v3 = v1[4];
  if (!v3)
    goto LABEL_47;
  v4 = v1[3];
  v5 = (uint64_t *)(result + 32);
  v6 = MEMORY[0x1E0DEE9D8];
  v7 = MEMORY[0x1E0DEE9D8];
  v30 = v1[4];
  while (1)
  {
    v9 = *v5++;
    v8 = v9;
    if (v9 == 0x8000000000000000 && v3 == -1)
      break;
    result = (uint64_t)sub_1D2C72FAC((char *)(v8 / v3));
    v11 = *(_QWORD *)(result + 16);
    v12 = *(_QWORD *)(v7 + 16);
    v13 = v12 + v11;
    if (__OFADD__(v12, v11))
    {
      __break(1u);
LABEL_39:
      __break(1u);
LABEL_40:
      __break(1u);
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      break;
    }
    v14 = result;
    result = swift_isUniquelyReferenced_nonNull_native();
    if ((_DWORD)result && v13 <= *(_QWORD *)(v7 + 24) >> 1)
    {
      if (*(_QWORD *)(v14 + 16))
        goto LABEL_14;
    }
    else
    {
      if (v12 <= v13)
        v19 = v12 + v11;
      else
        v19 = v12;
      result = (uint64_t)sub_1D2C71A70((char *)result, v19, 1, (char *)v7);
      v7 = result;
      if (*(_QWORD *)(v14 + 16))
      {
LABEL_14:
        v15 = *(_QWORD *)(v7 + 16);
        if ((*(_QWORD *)(v7 + 24) >> 1) - v15 < v11)
          goto LABEL_42;
        result = (uint64_t)memcpy((void *)(v7 + 8 * v15 + 32), (const void *)(v14 + 32), 8 * v11);
        if (v11)
        {
          v16 = *(_QWORD *)(v7 + 16);
          v17 = __OFADD__(v16, v11);
          v18 = v16 + v11;
          if (v17)
            goto LABEL_45;
          *(_QWORD *)(v7 + 16) = v18;
        }
        goto LABEL_23;
      }
    }
    if (v11)
      goto LABEL_40;
LABEL_23:
    result = swift_bridgeObjectRelease();
    v20 = *(_QWORD *)(v4 + 16);
    v21 = *(_QWORD *)(v6 + 16);
    v22 = v21 + v20;
    if (__OFADD__(v21, v20))
      goto LABEL_41;
    sub_1D2CAAF0C();
    result = swift_isUniquelyReferenced_nonNull_native();
    if ((_DWORD)result && v22 <= *(_QWORD *)(v6 + 24) >> 1)
    {
      if (!*(_QWORD *)(v4 + 16))
        goto LABEL_4;
    }
    else
    {
      if (v21 <= v22)
        v23 = v21 + v20;
      else
        v23 = v21;
      result = (uint64_t)sub_1D2C71A70((char *)result, v23, 1, (char *)v6);
      v6 = result;
      if (!*(_QWORD *)(v4 + 16))
      {
LABEL_4:
        if (v20)
          goto LABEL_39;
        goto LABEL_5;
      }
    }
    v24 = *(_QWORD *)(v6 + 16);
    if ((*(_QWORD *)(v6 + 24) >> 1) - v24 < v20)
      goto LABEL_43;
    result = (uint64_t)memcpy((void *)(v6 + 8 * v24 + 32), (const void *)(v4 + 32), 8 * v20);
    if (v20)
    {
      v25 = *(_QWORD *)(v6 + 16);
      v17 = __OFADD__(v25, v20);
      v26 = v25 + v20;
      if (v17)
        goto LABEL_46;
      *(_QWORD *)(v6 + 16) = v26;
    }
LABEL_5:
    result = swift_bridgeObjectRelease();
    --v2;
    v3 = v30;
    if (!v2)
      goto LABEL_37;
  }
  __break(1u);
LABEL_45:
  __break(1u);
LABEL_46:
  __break(1u);
LABEL_47:
  __break(1u);
  return result;
}

char *sub_1D2C993E4(uint64_t a1, char *a2)
{
  uint64_t v2;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  uint64_t v32;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v5 = *(_QWORD *)(v2 + 40);
  v6 = (char *)&unk_1D2CAF320;
  if (v5 >= 2)
  {
    v7 = a1 >= 0 ? a1 & 1 : -(a1 & 1);
    v8 = cche_encryption_params_polynomial_degree();
    v9 = *((_QWORD *)a2 + 2);
    if (v9)
    {
      v10 = v7 * v8;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        a2 = sub_1D2C535F4((uint64_t)a2);
      v11 = 0;
      v12 = v10 / v5;
      do
      {
        v13 = &a2[8 * v11];
        v14 = *((_QWORD *)v13 + 4);
        v15 = __OFADD__(v14, v12);
        v16 = v14 + v12;
        if (v15)
          goto LABEL_61;
        ++v11;
        *((_QWORD *)v13 + 4) = v16;
      }
      while (v9 != v11);
    }
  }
  if (v5 >= 0)
    v17 = v5;
  else
    v17 = v5 + 1;
  v18 = v17 >> 1;
  if (v5 == 1)
    v5 = 1;
  else
    v5 = v18;
  v19 = cche_encryption_params_polynomial_degree();
  if (!v5)
    goto LABEL_68;
  v20 = v19 / v5;
  if (v20 >= 0)
    v21 = v19 / v5;
  else
    v21 = v20 + 1;
  v6 = (char *)*((_QWORD *)a2 + 2);
  if (v6 == (char *)1)
    goto LABEL_49;
  if (!v6)
    goto LABEL_69;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    a2 = sub_1D2C535F4((uint64_t)a2);
  v22 = 0;
  v23 = v21 >> 1;
  v24 = v20 + 1;
  v25 = v20 + 3;
  do
  {
    if ((unint64_t)v22 >= *((_QWORD *)a2 + 2))
      goto LABEL_60;
    v26 = &a2[8 * (_QWORD)v22];
    v28 = *((_QWORD *)v26 + 4);
    v27 = *((_QWORD *)v26 + 5);
    v15 = __OFADD__(v28, v27);
    v29 = v28 + v27;
    v30 = v15;
    if (v28 >= v23)
    {
      if ((v30 & 1) != 0)
        goto LABEL_63;
      if (v24 < 3)
        goto LABEL_65;
      if (v29 == 0x8000000000000000 && v25 < 2)
        goto LABEL_67;
      v32 = v29 % v23 + v23;
    }
    else
    {
      if ((v30 & 1) != 0)
        goto LABEL_62;
      if (v24 < 3)
        goto LABEL_64;
      if (v29 == 0x8000000000000000 && v25 < 2)
      {
        while (1)
        {
          __break(1u);
LABEL_67:
          __break(1u);
LABEL_68:
          __break(1u);
LABEL_69:
          __break(1u);
LABEL_70:
          a2 = sub_1D2C535F4((uint64_t)a2);
LABEL_50:
          v34 = 0;
          if (a1 >= 0)
            v35 = a1;
          else
            v35 = a1 + 1;
          v36 = v35 >> 1;
          while (1)
          {
            v37 = &a2[8 * (_QWORD)v34];
            v38 = *((_QWORD *)v37 + 4);
            v39 = v38 * v5;
            if ((unsigned __int128)(v38 * (__int128)v5) >> 64 != (v38 * v5) >> 63)
              break;
            *((_QWORD *)v37 + 4) = v39;
            v15 = __OFADD__(v39, v36);
            v40 = v39 + v36;
            if (v15)
              goto LABEL_59;
            ++v34;
            *((_QWORD *)v37 + 4) = v40;
            if (v6 == v34)
              return a2;
          }
          __break(1u);
LABEL_59:
          __break(1u);
LABEL_60:
          __break(1u);
LABEL_61:
          __break(1u);
LABEL_62:
          __break(1u);
LABEL_63:
          __break(1u);
LABEL_64:
          __break(1u);
LABEL_65:
          __break(1u);
        }
      }
      v32 = v29 % v23;
    }
    *((_QWORD *)v26 + 5) = v32;
    ++v22;
  }
  while (v6 - 1 != v22);
  v6 = (char *)*((_QWORD *)a2 + 2);
  if (v6)
  {
LABEL_49:
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
      goto LABEL_50;
    goto LABEL_70;
  }
  return a2;
}

_OWORD *sub_1D2C9962C(_QWORD *a1)
{
  _OWORD *v1;
  uint64_t v2;
  __int128 v4;
  __int128 v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  _OWORD v10[5];

  v4 = v1[1];
  v10[0] = *v1;
  v10[1] = v4;
  v5 = v1[3];
  v10[2] = v1[2];
  v10[3] = v5;
  v10[4] = v1[4];
  if (BYTE2(v10[0]))
  {
    if (BYTE2(v10[0]) != 1)
    {
      sub_1D2C4E7DC();
      swift_allocError();
      *(_DWORD *)v8 = 5;
      *(_BYTE *)(v8 + 4) = 1;
      swift_willThrow();
      return v1;
    }
    sub_1D2C9B2FC((uint64_t)v10);
    v1 = (_OWORD *)sub_1D2C9B078((uint64_t)a1, (uint64_t)v10);
    sub_1D2C9B340((uint64_t)v10);
    if (!v2)
      goto LABEL_7;
  }
  else
  {
    v6 = sub_1D2C99760(a1);
    if (!v2)
    {
      v1 = (_OWORD *)v6;
LABEL_7:
      sub_1D2C9B2FC((uint64_t)v10);
      v7 = sub_1D2C9BD1C((uint64_t)v1, (uint64_t)v10);
      sub_1D2C9B340((uint64_t)v10);
      swift_bridgeObjectRelease();
      v1 = (_OWORD *)sub_1D2C6783C(v7);
      swift_bridgeObjectRelease();
    }
  }
  return v1;
}

uint64_t sub_1D2C99760(_QWORD *a1)
{
  __int128 *v1;
  uint64_t v2;
  __int128 v4;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int64_t v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;

  v4 = v1[3];
  v22 = v1[2];
  v23 = v4;
  v24 = v1[4];
  v5 = v1[1];
  v20 = *v1;
  v21 = v5;
  v19 = MEMORY[0x1E0DEE9D8];
  if (a1[2])
  {
    v6 = a1[5];
    if ((v6 & 0x2000000000000000) != 0)
    {
      v7 = a1[6];
      v8 = a1[4];
      v9 = v6 & 0xDFFFFFFFFFFFFFFFLL;
      sub_1D2C45028(v8, v6 & 0xDFFFFFFFFFFFFFFFLL);
      sub_1D2CAAF0C();
      sub_1D2C45258(v8, v9);
      v19 = v7;
    }
  }
  sub_1D2C9B2FC((uint64_t)&v20);
  v10 = sub_1D2C9B078((uint64_t)a1, (uint64_t)&v20);
  result = sub_1D2C9B340((uint64_t)&v20);
  if (v2)
    goto LABEL_11;
  if (!*(_QWORD *)(v10 + 16))
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v12 = *(_QWORD *)(v10 + 32);
  swift_retain();
  v13 = sub_1D2CAAF0C();
  v14 = sub_1D2C7EBAC(v13, v12);
  swift_release();
  result = swift_bridgeObjectRelease();
  v15 = *(_QWORD *)(*((_QWORD *)&v21 + 1) + 16);
  if (v15)
  {
    v16 = v15 - 1;
    if (v15 != 1)
    {
      while (v16)
      {
        sub_1D2C9B2FC((uint64_t)&v20);
        v17 = sub_1D2C9B384(v10, (uint64_t)&v20);
        sub_1D2C9B340((uint64_t)&v20);
        result = swift_bridgeObjectRelease();
        if (!v14)
          goto LABEL_13;
        v18 = *(_QWORD *)(v17 + 16);
        sub_1D2CAAF0C();
        v10 = sub_1D2C981CC(0, v18, (uint64_t)v14, (uint64_t)v14, v17, &v19);
        result = swift_bridgeObjectRelease();
        if (!--v16)
          goto LABEL_11;
      }
      __break(1u);
LABEL_13:
      __break(1u);
      goto LABEL_14;
    }
LABEL_11:
    swift_bridgeObjectRelease();
    return v10;
  }
LABEL_15:
  __break(1u);
  return result;
}

uint64_t sub_1D2C99944@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X3>, _QWORD *a5@<X4>, uint64_t *a6@<X8>)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;
  uint64_t v19;
  uint64_t *v20;

  v12 = *a1;
  if (__OFADD__(*a1, a2))
  {
    __break(1u);
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  v10 = a3;
  if (*(_QWORD *)(a3 + 16) >= *a1 + a2)
    v11 = *a1 + a2;
  else
    v11 = *(_QWORD *)(a3 + 16);
  if (v11 < v12)
    goto LABEL_18;
  if (v12 < 0)
  {
LABEL_19:
    __break(1u);
LABEL_20:
    swift_bridgeObjectRelease();
    sub_1D2C49BC4(v10, v10 + 32, v12, (2 * v11) | 1);
    v15 = v19;
    goto LABEL_12;
  }
  v6 = a5;
  v8 = v7;
  v9 = a4;
  v20 = a6;
  sub_1D2CAB0C8();
  sub_1D2CAAF0C();
  swift_unknownObjectRetain_n();
  v13 = swift_dynamicCastClass();
  if (!v13)
  {
    swift_bridgeObjectRelease();
    v13 = MEMORY[0x1E0DEE9D8];
  }
  v14 = *(_QWORD *)(v13 + 16);
  swift_release();
  if (v14 != v11 - v12)
    goto LABEL_20;
  v15 = swift_dynamicCastClass();
  if (!v15)
  {
    swift_bridgeObjectRelease();
    v15 = MEMORY[0x1E0DEE9D8];
  }
LABEL_12:
  swift_bridgeObjectRelease();
  v16 = *v9;
  v17 = qword_1EFC9F698;
  sub_1D2CAAF0C();
  if (v17 != -1)
    swift_once();
  result = sub_1D2C7EEF0(v15, 1uLL, 0, qword_1EFCA4A78, v16);
  if (v8)
    *v6 = v8;
  else
    *v20 = result;
  return result;
}

void sub_1D2C99ACC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  uint64_t v19;
  unint64_t v20;

  if (a6 < 0)
    goto LABEL_21;
  if (a6)
  {
    v12 = sub_1D2CAAF30();
    *(_QWORD *)(v12 + 16) = a6;
    bzero((void *)(v12 + 32), 8 * a6);
    if (!a4)
    {
LABEL_22:
      __break(1u);
      return;
    }
    v13 = 0;
    v14 = *(_QWORD *)(a1 + 16);
    while (1)
    {
      v15 = v13 * a5;
      if ((unsigned __int128)(v13 * (__int128)a5) >> 64 != (v13 * a5) >> 63)
        break;
      v16 = __OFADD__(a2, v15);
      v17 = a2 + v15;
      if (v16)
        goto LABEL_17;
      if (v17 == 0x8000000000000000 && a4 == -1)
        goto LABEL_20;
      v19 = v17 % a4;
      v16 = __OFADD__(a3, v19);
      v20 = a3 + v19;
      if (v16)
        goto LABEL_18;
      if (v20 >= v14)
        goto LABEL_19;
      *(_QWORD *)(v12 + 8 * v13++ + 32) = *(_QWORD *)(a1 + 32 + 8 * v20);
      if (a6 == v13)
        return;
    }
    __break(1u);
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
}

uint64_t sub_1D2C99BD8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v3 = *(_QWORD *)(a1 + 16);
  if (v3)
  {
    v6 = *(_QWORD *)(v2 + 24);
    v7 = sub_1D2CAAF30();
    *(_QWORD *)(v7 + 16) = v3;
    v26 = v7 + 32;
    bzero((void *)(v7 + 32), 8 * v3);
    v8 = 0;
    v25 = v7;
    v23 = v3;
    v24 = a2;
    while (1)
    {
      v9 = *(_QWORD *)(v6 + 16);
      if (v9)
        break;
      v12 = MEMORY[0x1E0DEE9D8];
LABEL_13:
      v17 = v8;
      v18 = sub_1D2C993E4(v8, (char *)v12);
      v19 = *((_QWORD *)v18 + 2);
      if (!v19)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        sub_1D2C4E7DC();
        swift_allocError();
        *(_DWORD *)v22 = 5;
        *(_BYTE *)(v22 + 4) = 1;
        swift_willThrow();
        return v7;
      }
      v20 = *(_QWORD *)&v18[8 * v19 + 24];
      result = swift_bridgeObjectRelease();
      if (!a2)
        goto LABEL_27;
      if (v20 == 0x8000000000000000 && a2 == -1)
        goto LABEL_29;
      if (v17 >= *(_QWORD *)(v7 + 16))
        goto LABEL_28;
      *(_QWORD *)(v26 + 8 * v17) = v20 / a2;
      v8 = v17 + 1;
      if (v17 + 1 == v3)
        return v7;
    }
    v27 = v8;
    v10 = *(_QWORD *)(a1 + 32 + 8 * v8);
    sub_1D2CAAF0C();
    result = (uint64_t)sub_1D2C71A70(0, 1, 1, MEMORY[0x1E0DEE9D8]);
    v12 = result;
    v13 = 0;
    while (1)
    {
      v14 = *(_QWORD *)(v6 + 8 * v13 + 32);
      if (!v14)
        break;
      if (v10 == 0x8000000000000000 && v14 == -1)
        goto LABEL_26;
      v16 = *(_QWORD *)(v12 + 16);
      v15 = *(_QWORD *)(v12 + 24);
      if (v16 >= v15 >> 1)
      {
        result = (uint64_t)sub_1D2C71A70((char *)(v15 > 1), v16 + 1, 1, (char *)v12);
        v12 = result;
      }
      ++v13;
      *(_QWORD *)(v12 + 16) = v16 + 1;
      *(_QWORD *)(v12 + 8 * v16 + 32) = v10 % v14;
      v10 /= v14;
      if (v9 == v13)
      {
        swift_bridgeObjectRelease();
        a2 = v24;
        v7 = v25;
        v3 = v23;
        v8 = v27;
        goto LABEL_13;
      }
    }
    __break(1u);
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
LABEL_28:
    __break(1u);
LABEL_29:
    __break(1u);
  }
  else
  {
    return MEMORY[0x1E0DEE9D8];
  }
  return result;
}

char *sub_1D2C99E9C@<X0>(char *result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _QWORD *a9@<X8>, uint64_t a10, uint64_t a11, _QWORD *a12)
{
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int64_t v25;
  int64_t v26;
  int64_t v27;
  uint64_t v28;
  uint64_t v29;
  BOOL v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48[3];

  v13 = *(_QWORD *)result;
  if ((*(_QWORD *)result & 0x8000000000000000) != 0)
    goto LABEL_36;
  v14 = a2;
  v15 = a9;
  if (v13 >= *(_QWORD *)(a2 + 16))
  {
LABEL_37:
    __break(1u);
LABEL_38:
    __break(1u);
LABEL_39:
    __break(1u);
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  if (*(_QWORD *)(a2 + 8 * v13 + 32) >= a3)
    v16 = a4;
  else
    v16 = 0;
  v40 = a4 - v16;
  v41 = v16;
  if (__OFSUB__(a4, v16))
    goto LABEL_38;
  v17 = v12;
  v39 = *(_QWORD *)(a5 + 16);
  if (v39)
  {
    v46 = v17;
    sub_1D2CAAF0C();
    v19 = 0;
    v20 = MEMORY[0x1E0DEE9D8];
    while (1)
    {
      v48[0] = *(_QWORD *)(a5 + 8 * v19 + 32);
      sub_1D2CAAF0C();
      v21 = v14;
      v22 = v13;
      sub_1D2C9A16C(v48, a6, a7, a8, v14, v13, a10, v41, &v47, a4, a11, v40);
      result = (char *)swift_bridgeObjectRelease();
      v23 = v47;
      v24 = *(_QWORD *)(v47 + 16);
      v25 = *(_QWORD *)(v20 + 16);
      v26 = v25 + v24;
      if (__OFADD__(v25, v24))
      {
        __break(1u);
LABEL_33:
        __break(1u);
LABEL_34:
        __break(1u);
LABEL_35:
        __break(1u);
LABEL_36:
        __break(1u);
        goto LABEL_37;
      }
      result = (char *)swift_isUniquelyReferenced_nonNull_native();
      if ((_DWORD)result && v26 <= *(_QWORD *)(v20 + 24) >> 1)
      {
        if (*(_QWORD *)(v23 + 16))
          goto LABEL_20;
      }
      else
      {
        if (v25 <= v26)
          v27 = v25 + v24;
        else
          v27 = v25;
        result = sub_1D2C71A7C(result, v27, 1, (char *)v20);
        v20 = (uint64_t)result;
        if (*(_QWORD *)(v23 + 16))
        {
LABEL_20:
          v28 = *(_QWORD *)(v20 + 16);
          if ((*(_QWORD *)(v20 + 24) >> 1) - v28 < v24)
            goto LABEL_34;
          result = (char *)memcpy((void *)(v20 + 8 * v28 + 32), (const void *)(v23 + 32), 8 * v24);
          if (v24)
          {
            v29 = *(_QWORD *)(v20 + 16);
            v30 = __OFADD__(v29, v24);
            v31 = v29 + v24;
            if (v30)
              goto LABEL_35;
            *(_QWORD *)(v20 + 16) = v31;
          }
          goto LABEL_10;
        }
      }
      if (v24)
        goto LABEL_33;
LABEL_10:
      ++v19;
      swift_bridgeObjectRelease();
      v14 = v21;
      v13 = v22;
      if (v39 == v19)
      {
        swift_bridgeObjectRelease();
        v15 = a9;
        v17 = v46;
        goto LABEL_26;
      }
    }
  }
  v20 = MEMORY[0x1E0DEE9D8];
LABEL_26:
  v48[2] = v20;
  v32 = *(_QWORD *)(a8 + 16);
  result = (char *)cche_encryption_params_plaintext_modulus();
  if (!result)
    goto LABEL_39;
  v33 = sub_1D2CAA448(__clz((unint64_t)result) ^ 0x3F);
  if (v17)
  {
    result = (char *)swift_bridgeObjectRelease();
    *a12 = v17;
    return result;
  }
  v34 = v33;
  result = (char *)swift_bridgeObjectRelease();
  if ((v32 & 0x8000000000000000) != 0)
    goto LABEL_40;
  if (*(_QWORD *)(v34 + 16) >= v32)
  {
    v35 = sub_1D2C69438(v34, v34 + 32, 0, (2 * v32) | 1);
    v37 = v36;
    result = (char *)swift_bridgeObjectRelease();
    *v15 = v35;
    v15[1] = v37;
    return result;
  }
LABEL_41:
  __break(1u);
  return result;
}

void sub_1D2C9A16C(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, unint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t *a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v36;

  v15 = *a1;
  if (a2 == 1 && a3 >= 2)
  {
    if ((a6 & 0x8000000000000000) != 0)
    {
      __break(1u);
    }
    else if (*(_QWORD *)(a5 + 16) > a6)
    {
      v16 = a5 + 32;
      v17 = *(_QWORD *)(a5 + 32 + 8 * a6);
      v18 = v17 * a7;
      if ((unsigned __int128)(v17 * (__int128)a7) >> 64 == (v17 * a7) >> 63)
      {
        v19 = a6 >> 1;
        if (!__OFADD__(v18, a6 >> 1))
        {
          sub_1D2C99ACC(v15, v18 + (a6 >> 1), a8, a10, a11, a10);
          v21 = *(_QWORD *)(v16 + 8 * a6);
          v22 = v21 * a7;
          if ((unsigned __int128)(v21 * (__int128)a7) >> 64 == (v21 * a7) >> 63)
          {
            if (!__OFADD__(v22, v19))
            {
              v23 = v20;
              sub_1D2C99ACC(v15, v22 + v19, a12, a10, a11, a10);
              v25 = sub_1D2C98040(v23, v24);
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
LABEL_20:
              *a9 = v25;
              return;
            }
            goto LABEL_30;
          }
          goto LABEL_25;
        }
LABEL_24:
        __break(1u);
LABEL_25:
        __break(1u);
        goto LABEL_26;
      }
LABEL_23:
      __break(1u);
      goto LABEL_24;
    }
    __break(1u);
    goto LABEL_23;
  }
  if ((a6 & 0x8000000000000000) != 0)
  {
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  if (*(_QWORD *)(a5 + 16) <= a6)
  {
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  v26 = a5 + 32;
  v27 = *(_QWORD *)(a5 + 32 + 8 * a6);
  v28 = v27 * a7;
  if ((unsigned __int128)(v27 * (__int128)a7) >> 64 != (v27 * a7) >> 63)
  {
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  v29 = a6 >> 1;
  if (__OFADD__(v28, a6 >> 1))
  {
LABEL_29:
    __break(1u);
LABEL_30:
    __break(1u);
LABEL_31:
    __break(1u);
    goto LABEL_32;
  }
  sub_1D2C99ACC(v15, v28 + (a6 >> 1), a8, a10, a11, a10);
  v25 = v30;
  v36 = v30;
  if (*(_QWORD *)(a4 + 40) != 1)
    goto LABEL_20;
  v31 = *(unsigned __int8 *)(a4 + 57);
  if (v31 == 2 || (v31 & 1) == 0)
    goto LABEL_20;
  v32 = *(_QWORD *)(v26 + 8 * a6);
  v33 = v32 * a7;
  if ((unsigned __int128)(v32 * (__int128)a7) >> 64 != (v32 * a7) >> 63)
    goto LABEL_31;
  if (!__OFADD__(v33, v29))
  {
    sub_1D2C99ACC(v15, v33 + v29, a12, a10, a11, a10);
    sub_1D2C4FE20(v34);
    v25 = v36;
    goto LABEL_20;
  }
LABEL_32:
  __break(1u);
}

uint64_t sub_1D2C9A38C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unint64_t a7)
{
  if (!sub_1D2CAA864())
    goto LABEL_10;
  if (__OFSUB__(a1, sub_1D2CAA888()))
  {
    __break(1u);
    goto LABEL_8;
  }
  sub_1D2CAA87C();
  if ((a7 & 0x8000000000000000) != 0)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  if (HIDWORD(a7))
  {
LABEL_9:
    __break(1u);
    __break(1u);
LABEL_10:
    __break(1u);
LABEL_11:
    __break(1u);
  }
  if (!ccrng())
    goto LABEL_11;
  return cche_encrypt_symmetric();
}

void sub_1D2C9A498(uint64_t a1)
{
  __asm { BR              X11 }
}

uint64_t sub_1D2C9A504@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t result;
  unsigned int v5;
  unsigned __int8 v6;
  unsigned __int8 v7;
  unsigned __int8 v8;

  LOWORD(v5) = a1;
  BYTE2(v5) = BYTE2(a1);
  HIBYTE(v5) = BYTE3(a1);
  v6 = BYTE4(a1);
  v7 = BYTE5(a1);
  v8 = BYTE6(a1);
  if ((v2 & 0x8000000000000000) != 0)
  {
    __break(1u);
    JUMPOUT(0x1D2C9A814);
  }
  if (HIDWORD(v2))
  {
    __break(1u);
    JUMPOUT(0x1D2C9A81CLL);
  }
  if (!ccrng())
  {
    __break(1u);
    JUMPOUT(0x1D2C9A83CLL);
  }
  result = cche_encrypt_symmetric();
  *v1 = v3;
  v1[1] = v5 | ((unint64_t)v6 << 32) | ((unint64_t)v7 << 40) | ((unint64_t)v8 << 48);
  return result;
}

uint64_t sub_1D2C9A850(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;

  result = sub_1D2CAA864();
  if (!result)
    goto LABEL_8;
  result = sub_1D2CAA888();
  if (__OFSUB__(a1, result))
  {
    __break(1u);
    goto LABEL_7;
  }
  if (__OFSUB__(a2, a1))
  {
LABEL_7:
    __break(1u);
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  result = sub_1D2CAA87C();
  if (*(_QWORD *)(a4 + 24))
    return cche_serialize_seeded_ciphertext_coeff();
LABEL_9:
  __break(1u);
  return result;
}

void sub_1D2C9A8E4(uint64_t a1)
{
  __asm { BR              X11 }
}

uint64_t sub_1D2C9A940@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  unsigned int v5;
  unsigned __int8 v6;
  unsigned __int8 v7;
  unsigned __int8 v8;

  LOWORD(v5) = a1;
  BYTE2(v5) = BYTE2(a1);
  HIBYTE(v5) = BYTE3(a1);
  v6 = BYTE4(a1);
  v7 = BYTE5(a1);
  v8 = BYTE6(a1);
  if (!*(_QWORD *)(v2 + 24))
  {
    __break(1u);
    JUMPOUT(0x1D2C9ABD4);
  }
  result = cche_serialize_seeded_ciphertext_coeff();
  *v1 = v3;
  v1[1] = v5 | ((unint64_t)v6 << 32) | ((unint64_t)v7 << 40) | ((unint64_t)v8 << 48);
  return result;
}

uint64_t sub_1D2C9ABE4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  int64_t v4;
  uint64_t v5;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *inited;
  uint64_t result;
  int v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  int v21;
  int v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  int v29;
  __int128 v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  int64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  __int128 v45;
  __int128 v46;
  uint64_t v47;

  v3 = v2;
  v4 = *(_QWORD *)(a1 + 16);
  v5 = MEMORY[0x1E0DEE9D8];
  if (!v4)
    return v5;
  v47 = MEMORY[0x1E0DEE9D8];
  sub_1D2C4D9B0(0, v4, 0);
  v5 = v47;
  v8 = (_QWORD *)(a1 + 32);
  v9 = *(_QWORD *)(a2 + 64);
  type metadata accessor for HE.ObjectStorage();
  v39 = a2;
  while (1)
  {
    v40 = v8;
    v41 = v4;
    v10 = *v8;
    v11 = cche_plaintext_sizeof();
    inited = (_QWORD *)swift_initStackObject();
    inited[2] = v9;
    sub_1D2CAAF0C();
    swift_retain();
    result = swift_slowAlloc();
    inited[3] = result;
    inited[4] = result + v11;
    if (HIDWORD(*(_QWORD *)(v10 + 16)))
      break;
    v14 = cche_encode_simd_uint64();
    if (v14)
    {
      v34 = v14;
      sub_1D2C4E7DC();
      swift_allocError();
      *(_DWORD *)v35 = v34;
      *(_BYTE *)(v35 + 4) = 0;
      swift_willThrow();
      swift_release();
      swift_release();
      swift_bridgeObjectRelease();
      return v5;
    }
    v42 = v5;
    v43 = v3;
    v44 = *(_QWORD *)(a2 + 72);
    v5 = cche_param_ctx_ciphertext_ctx_nmoduli();
    v15 = cche_ciphertext_sizeof();
    v16 = (_QWORD *)swift_initStackObject();
    v16[2] = v9;
    swift_retain();
    v17 = swift_slowAlloc();
    v16[3] = v17;
    v16[4] = v17 + v15;
    result = cche_rng_seed_sizeof();
    if (result)
    {
      v18 = result;
      if (result < 15)
      {
        if (result < 0)
          goto LABEL_35;
        result = 0;
        v20 = (unint64_t)v18 << 48;
      }
      else
      {
        sub_1D2CAA8A0();
        swift_allocObject();
        v19 = sub_1D2CAA870();
        if (v18 >= 0x7FFFFFFF)
        {
          sub_1D2CAA90C();
          result = swift_allocObject();
          *(_QWORD *)(result + 16) = 0;
          *(_QWORD *)(result + 24) = v18;
          v20 = v19 | 0x8000000000000000;
        }
        else
        {
          result = v18 << 32;
          v20 = v19 | 0x4000000000000000;
        }
      }
    }
    else
    {
      v20 = 0xC000000000000000;
    }
    *(_QWORD *)&v46 = result;
    *((_QWORD *)&v46 + 1) = v20;
    if (!*(_QWORD *)(v44 + 24))
      goto LABEL_37;
    swift_retain();
    sub_1D2C9A498((uint64_t)&v46);
    v22 = v21;
    swift_release();
    if (v22)
    {
      sub_1D2C4E7DC();
      swift_allocError();
      *(_DWORD *)v36 = v22;
      *(_BYTE *)(v36 + 4) = 0;
      swift_willThrow();
      swift_release();
      sub_1D2C45258(v46, *((unint64_t *)&v46 + 1));
LABEL_32:
      swift_release();
      swift_bridgeObjectRelease();
      swift_release();
      return v5;
    }
    v24 = *((_QWORD *)&v46 + 1);
    v23 = v46;
    result = cche_serialize_seeded_ciphertext_coeff_nbytes();
    if (result)
    {
      v25 = result;
      a2 = v39;
      if (result <= 14)
      {
        if (result < 0)
          goto LABEL_36;
        result = 0;
        v28 = (unint64_t)v25 << 48;
      }
      else
      {
        v26 = v23;
        sub_1D2CAA8A0();
        swift_allocObject();
        v27 = sub_1D2CAA870();
        if (v25 >= 0x7FFFFFFF)
        {
          sub_1D2CAA90C();
          result = swift_allocObject();
          *(_QWORD *)(result + 16) = 0;
          *(_QWORD *)(result + 24) = v25;
          v28 = v27 | 0x8000000000000000;
        }
        else
        {
          result = v25 << 32;
          v28 = v27 | 0x4000000000000000;
        }
        v23 = v26;
      }
    }
    else
    {
      v28 = 0xC000000000000000;
      a2 = v39;
    }
    *(_QWORD *)&v46 = result;
    *((_QWORD *)&v46 + 1) = v28;
    sub_1D2C9A8E4((uint64_t)&v46);
    v5 = v42;
    if (v29)
    {
      v37 = v29;
      sub_1D2C4E7DC();
      swift_allocError();
      *(_DWORD *)v38 = v37;
      *(_BYTE *)(v38 + 4) = 0;
      swift_willThrow();
      swift_release();
      sub_1D2C45258(v23, v24);
      sub_1D2C45258(v46, *((unint64_t *)&v46 + 1));
      goto LABEL_32;
    }
    v3 = v43;
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    v30 = v46;
    v47 = v42;
    v32 = *(_QWORD *)(v42 + 16);
    v31 = *(_QWORD *)(v42 + 24);
    if (v32 >= v31 >> 1)
    {
      v45 = v46;
      sub_1D2C4D9B0((char *)(v31 > 1), v32 + 1, 1);
      v30 = v45;
      v5 = v47;
    }
    *(_QWORD *)(v5 + 16) = v32 + 1;
    v33 = v5 + 32 * v32;
    *(_OWORD *)(v33 + 32) = v30;
    *(_QWORD *)(v33 + 48) = v23;
    *(_QWORD *)(v33 + 56) = v24;
    v8 = v40 + 1;
    v4 = v41 - 1;
    if (v41 == 1)
      return v5;
  }
  __break(1u);
LABEL_35:
  __break(1u);
LABEL_36:
  __break(1u);
LABEL_37:
  __break(1u);
  return result;
}

uint64_t sub_1D2C9B078(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t result;
  unint64_t *v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;

  v3 = *(_QWORD *)(a1 + 16);
  result = MEMORY[0x1E0DEE9D8];
  if (v3)
  {
    v20 = MEMORY[0x1E0DEE9D8];
    sub_1D2CAB020();
    v16 = *(_QWORD *)(*(_QWORD *)(a2 + 64) + 32);
    v17 = *(_QWORD *)(a2 + 64);
    v6 = (unint64_t *)(a1 + 56);
    while (1)
    {
      v7 = *(v6 - 3);
      v8 = *(v6 - 2);
      v10 = *(v6 - 1);
      v9 = *v6;
      sub_1D2C4F494(v7, v8, v10, *v6);
      sub_1D2C4F494(v7, v8, v10, v9);
      v11 = qword_1EFC9F690;
      result = swift_retain();
      if (v11 != -1)
        result = swift_once();
      if (qword_1EFCA4A70 < 0)
        break;
      if (HIDWORD(qword_1EFCA4A70))
        goto LABEL_13;
      v18 = v3;
      v12 = cche_ciphertext_sizeof();
      type metadata accessor for HE.ObjectStorage();
      v13 = (_QWORD *)swift_allocObject();
      v13[2] = v17;
      swift_retain();
      v14 = swift_slowAlloc();
      v13[3] = v14;
      v13[4] = v14 + v12;
      swift_retain();
      sub_1D2C7DEE8(v16, v7, v8, v10);
      swift_release();
      sub_1D2C4F4DC(v7, v8, v10, v9);
      if (v19)
      {
        sub_1D2C4E7DC();
        swift_allocError();
        *(_DWORD *)v15 = v19;
        *(_BYTE *)(v15 + 4) = 0;
        swift_willThrow();
        swift_release();
        swift_release();
        sub_1D2C4F4DC(v7, v8, v10, v9);
        return swift_release();
      }
      v6 += 4;
      swift_release();
      sub_1D2C4F4DC(v7, v8, v10, v9);
      sub_1D2CAB008();
      sub_1D2CAB02C();
      sub_1D2CAB038();
      sub_1D2CAB014();
      v3 = v18 - 1;
      if (v18 == 1)
        return v20;
    }
    __break(1u);
LABEL_13:
    __break(1u);
  }
  return result;
}

uint64_t sub_1D2C9B2FC(uint64_t a1)
{
  sub_1D2CAAF0C();
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t sub_1D2C9B340(uint64_t a1)
{
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1D2C9B384(uint64_t a1, uint64_t a2)
{
  int64_t v2;
  uint64_t v3;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t result;
  int v12;
  unint64_t v13;
  unint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = MEMORY[0x1E0DEE9D8];
  if (!v2)
    return v3;
  v18 = MEMORY[0x1E0DEE9D8];
  sub_1D2C4DA80(0, v2, 0);
  v3 = v18;
  v6 = (uint64_t *)(a1 + 32);
  v7 = *(_QWORD *)(a2 + 64);
  v17 = *(_QWORD *)(a2 + 72);
  type metadata accessor for HE.ObjectStorage();
  while (1)
  {
    v8 = *v6;
    v9 = cche_plaintext_sizeof();
    v10 = (_QWORD *)swift_allocObject();
    v10[2] = v7;
    swift_retain();
    swift_retain();
    result = swift_slowAlloc();
    v10[3] = result;
    v10[4] = result + v9;
    if (!*(_QWORD *)(v8 + 24))
      break;
    if (!*(_QWORD *)(v17 + 24))
      goto LABEL_13;
    v12 = cche_decrypt();
    if (v12)
    {
      v15 = v12;
      sub_1D2C4E7DC();
      swift_allocError();
      *(_DWORD *)v16 = v15;
      *(_BYTE *)(v16 + 4) = 0;
      swift_willThrow();
      swift_release();
      swift_release();
      swift_release();
      return v3;
    }
    swift_release();
    v14 = *(_QWORD *)(v18 + 16);
    v13 = *(_QWORD *)(v18 + 24);
    if (v14 >= v13 >> 1)
      sub_1D2C4DA80((char *)(v13 > 1), v14 + 1, 1);
    *(_QWORD *)(v18 + 16) = v14 + 1;
    *(_QWORD *)(v18 + 8 * v14 + 32) = v10;
    ++v6;
    if (!--v2)
      return v3;
  }
  __break(1u);
LABEL_13:
  __break(1u);
  return result;
}

uint64_t sub_1D2C9B544(uint64_t a1, uint64_t a2)
{
  int64_t v2;
  uint64_t v3;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *inited;
  uint64_t result;
  int v11;
  unsigned int v12;
  uint64_t v13;
  int v14;
  unint64_t v15;
  unint64_t v16;
  int v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = MEMORY[0x1E0DEE9D8];
  if (!v2)
    return v3;
  v23 = MEMORY[0x1E0DEE9D8];
  sub_1D2C4DB5C(0, v2, 0);
  v3 = v23;
  v6 = (uint64_t *)(a1 + 32);
  v21 = *(_QWORD *)(a2 + 72);
  v22 = *(_QWORD *)(a2 + 64);
  type metadata accessor for HE.ObjectStorage();
  while (1)
  {
    v7 = *v6;
    v8 = cche_plaintext_sizeof();
    inited = (_QWORD *)swift_initStackObject();
    inited[2] = v22;
    swift_retain();
    swift_retain();
    result = swift_slowAlloc();
    inited[3] = result;
    inited[4] = result + v8;
    if (!*(_QWORD *)(v7 + 24))
      goto LABEL_20;
    if (!*(_QWORD *)(v21 + 24))
      goto LABEL_21;
    v11 = cche_decrypt();
    if (v11)
    {
      v17 = v11;
      sub_1D2C4E7DC();
      swift_allocError();
      *(_DWORD *)v18 = v17;
      *(_BYTE *)(v18 + 4) = 0;
      swift_willThrow();
      swift_release();
LABEL_17:
      swift_release();
      swift_release();
      return v3;
    }
    v12 = cche_param_ctx_polynomial_degree();
    swift_retain();
    if (v12)
    {
      v13 = sub_1D2CAAF30();
      *(_QWORD *)(v13 + 16) = v12;
    }
    else
    {
      v13 = MEMORY[0x1E0DEE9D8];
    }
    v14 = cche_decode_simd_uint64();
    if (v14)
    {
      v19 = v14;
      sub_1D2C4E7DC();
      swift_allocError();
      *(_DWORD *)v20 = v19;
      *(_BYTE *)(v20 + 4) = 0;
      swift_willThrow();
      *(_QWORD *)(v13 + 16) = 0;
      swift_release();
      swift_release();
      swift_bridgeObjectRelease();
      goto LABEL_17;
    }
    result = cche_param_ctx_polynomial_degree();
    if (v12 < result)
      break;
    *(_QWORD *)(v13 + 16) = result;
    swift_release();
    swift_release();
    swift_release();
    v16 = *(_QWORD *)(v23 + 16);
    v15 = *(_QWORD *)(v23 + 24);
    if (v16 >= v15 >> 1)
      sub_1D2C4DB5C((_QWORD *)(v15 > 1), v16 + 1, 1);
    *(_QWORD *)(v23 + 16) = v16 + 1;
    *(_QWORD *)(v23 + 8 * v16 + 32) = v13;
    ++v6;
    if (!--v2)
      return v3;
  }
  __break(1u);
LABEL_20:
  __break(1u);
LABEL_21:
  __break(1u);
  return result;
}

char *sub_1D2C9B7F4(char *result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v16;
  char *v17;
  char *v18;
  __int128 v19;
  unint64_t v20;
  unint64_t v21;
  __int128 v22;
  uint64_t v29;
  char *v30;
  __int128 v31;
  uint64_t v32;

  v12 = a2 - (_QWORD)result;
  if (__OFSUB__(a2, result))
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  v13 = v11;
  v14 = MEMORY[0x1E0DEE9D8];
  if (!v12)
    return (char *)v14;
  v16 = result;
  v32 = MEMORY[0x1E0DEE9D8];
  result = sub_1D2C4DB40(0, v12 & ~(v12 >> 63), 0);
  if ((v12 & 0x8000000000000000) == 0)
  {
    v14 = v32;
    if (a2 <= (uint64_t)v16)
      v17 = v16;
    else
      v17 = (char *)a2;
    v18 = v16;
    while ((char *)a2 != v18)
    {
      v30 = v18;
      result = sub_1D2C99E9C((char *)&v30, a3, a4, a5, a6, a7, a8, a9, &v31, a10, a11, &v29);
      if (v13)
      {
        swift_release();
        return (char *)v14;
      }
      v13 = 0;
      v19 = v31;
      v32 = v14;
      v21 = *(_QWORD *)(v14 + 16);
      v20 = *(_QWORD *)(v14 + 24);
      if (v21 >= v20 >> 1)
      {
        v22 = v31;
        result = sub_1D2C4DB40((char *)(v20 > 1), v21 + 1, 1);
        v19 = v22;
        v14 = v32;
      }
      *(_QWORD *)(v14 + 16) = v21 + 1;
      *(_OWORD *)(v14 + 16 * v21 + 32) = v19;
      if (a2 < (uint64_t)v16)
        goto LABEL_19;
      if (v17 == v18)
        goto LABEL_20;
      if ((char *)a2 == ++v18)
        return (char *)v14;
    }
    __break(1u);
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
LABEL_22:
  __break(1u);
  return result;
}

uint64_t _s14IndexPirClientVwxx()
{
  swift_bridgeObjectRelease();
  swift_release();
  return swift_release();
}

uint64_t _s14IndexPirClientVwcp(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_WORD *)a1 = *(_WORD *)a2;
  *(_BYTE *)(a1 + 2) = *(_BYTE *)(a2 + 2);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_WORD *)(a1 + 56) = *(_WORD *)(a2 + 56);
  v3 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = v3;
  sub_1D2CAAF0C();
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t _s14IndexPirClientVwca(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_BYTE *)(a1 + 1) = *(_BYTE *)(a2 + 1);
  *(_BYTE *)(a1 + 2) = *(_BYTE *)(a2 + 2);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  sub_1D2CAAF0C();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  v4 = *(_QWORD *)(a2 + 48);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = v4;
  *(_BYTE *)(a1 + 57) = *(_BYTE *)(a2 + 57);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  swift_retain();
  swift_release();
  return a1;
}

uint64_t _s14IndexPirClientVwta(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_BYTE *)(a1 + 1) = *(_BYTE *)(a2 + 1);
  *(_BYTE *)(a1 + 2) = *(_BYTE *)(a2 + 2);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_WORD *)(a1 + 56) = *(_WORD *)(a2 + 56);
  swift_release();
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  swift_release();
  return a1;
}

uint64_t _s14IndexPirClientVwet(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 80))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t _s14IndexPirClientVwst(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 72) = 0;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 80) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 24) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 80) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for PIR.IndexPirClient()
{
  return &type metadata for PIR.IndexPirClient;
}

uint64_t sub_1D2C9BC1C(uint64_t result, uint64_t a2)
{
  unint64_t v3;
  uint64_t v4;
  int v5;
  int v6;
  uint64_t v7;

  if (result < 0)
  {
    __break(1u);
    goto LABEL_14;
  }
  v3 = result;
  if (result)
  {
    result = sub_1D2CAAF30();
    *(_QWORD *)(result + 16) = v3;
    if (*(_QWORD *)(a2 + 24))
    {
      if (!HIDWORD(v3))
      {
        v4 = result;
LABEL_8:
        v5 = cche_decode_poly_uint64();
        if (v5)
        {
          v6 = v5;
          sub_1D2C4E7DC();
          swift_allocError();
          *(_DWORD *)v7 = v6;
          *(_BYTE *)(v7 + 4) = 0;
          swift_willThrow();
          *(_QWORD *)(v4 + 16) = 0;
          swift_bridgeObjectRelease();
          return v4;
        }
        result = cche_param_ctx_polynomial_degree();
        if (result <= v3)
        {
          *(_QWORD *)(v4 + 16) = result;
          return v4;
        }
        goto LABEL_15;
      }
LABEL_14:
      __break(1u);
LABEL_15:
      __break(1u);
    }
  }
  else if (*(_QWORD *)(a2 + 24))
  {
    v4 = MEMORY[0x1E0DEE9D8];
    goto LABEL_8;
  }
  __break(1u);
  return result;
}

unint64_t sub_1D2C9BD1C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *inited;
  unint64_t result;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int64_t v17;
  int64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;

  v3 = v2;
  v28 = *(_QWORD *)(a1 + 16);
  if (!v28)
    return MEMORY[0x1E0DEE9D8];
  v5 = *(_QWORD *)(a2 + 64);
  v29 = *(_QWORD *)(a2 + 72);
  v6 = *(_QWORD *)(v5 + 32);
  type metadata accessor for HE.ObjectStorage();
  sub_1D2CAAF0C();
  v7 = 0;
  v30 = MEMORY[0x1E0DEE9D8];
  while (1)
  {
    v8 = *(_QWORD *)(a1 + 8 * v7 + 32);
    v9 = cche_plaintext_sizeof();
    inited = (_QWORD *)swift_initStackObject();
    inited[2] = v5;
    swift_retain();
    swift_retain();
    result = swift_slowAlloc();
    inited[3] = result;
    inited[4] = result + v9;
    if (!*(_QWORD *)(v8 + 24))
      goto LABEL_32;
    if (!*(_QWORD *)(v29 + 24))
      goto LABEL_33;
    v12 = cche_decrypt();
    if (v12)
    {
      v26 = v12;
      sub_1D2C4E7DC();
      swift_allocError();
      *(_DWORD *)v27 = v26;
      *(_BYTE *)(v27 + 4) = 0;
      swift_willThrow();
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return swift_release();
    }
    v13 = cche_param_ctx_polynomial_degree();
    swift_retain();
    sub_1D2C9BC1C(v13, (uint64_t)inited);
    if (v3)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
      return swift_release();
    }
    v14 = v5;
    swift_release();
    v15 = v6;
    result = cche_param_ctx_plaintext_modulus();
    if (!result)
      break;
    v16 = sub_1D2CAA448(__clz(result) ^ 0x3F);
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    v17 = *(_QWORD *)(v16 + 16);
    result = v30;
    v18 = *(_QWORD *)(v30 + 16);
    v19 = v18 + v17;
    if (__OFADD__(v18, v17))
      goto LABEL_28;
    result = swift_isUniquelyReferenced_nonNull_native();
    v20 = v30;
    if ((result & 1) == 0 || v19 > *(_QWORD *)(v30 + 24) >> 1)
    {
      if (v18 <= v19)
        v21 = v18 + v17;
      else
        v21 = v18;
      result = (unint64_t)sub_1D2C71768((char *)result, v21, 1, (char *)v30);
      v20 = result;
    }
    v30 = v20;
    if (*(_QWORD *)(v16 + 16))
    {
      v22 = *(_QWORD *)(v20 + 16);
      if ((*(_QWORD *)(v20 + 24) >> 1) - v22 < v17)
        goto LABEL_30;
      result = (unint64_t)memcpy((void *)(v20 + v22 + 32), (const void *)(v16 + 32), v17);
      if (v17)
      {
        v23 = *(_QWORD *)(v30 + 16);
        v24 = __OFADD__(v23, v17);
        v25 = v23 + v17;
        if (v24)
          goto LABEL_31;
        *(_QWORD *)(v30 + 16) = v25;
      }
    }
    else if (v17)
    {
      goto LABEL_29;
    }
    ++v7;
    swift_bridgeObjectRelease();
    v6 = v15;
    v5 = v14;
    if (v28 == v7)
    {
      swift_bridgeObjectRelease();
      return v30;
    }
  }
  __break(1u);
LABEL_28:
  __break(1u);
LABEL_29:
  __break(1u);
LABEL_30:
  __break(1u);
LABEL_31:
  __break(1u);
LABEL_32:
  __break(1u);
LABEL_33:
  __break(1u);
  return result;
}

uint64_t sub_1D2C9C038(uint64_t a1)
{
  sub_1D2CAAF0C();
  return a1;
}

uint64_t sub_1D2C9C060(uint64_t a1)
{
  swift_bridgeObjectRelease();
  return a1;
}

void *sub_1D2C9C088(void *result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5, uint64_t *a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;

  v7 = a2 - (_QWORD)result;
  if (__OFSUB__(a2, result))
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  v8 = v6;
  v9 = MEMORY[0x1E0DEE9D8];
  if (!v7)
    return (void *)v9;
  v12 = (uint64_t)result;
  v28 = MEMORY[0x1E0DEE9D8];
  result = sub_1D2C4D9B0(0, v7 & ~(v7 >> 63), 0);
  if ((v7 & 0x8000000000000000) == 0)
  {
    v9 = v28;
    if (a2 <= v12)
      v13 = v12;
    else
      v13 = a2;
    v14 = v12;
    while (a2 != v14)
    {
      v25 = v14;
      result = sub_1D2C9C560(&v25, a3, a4, a5, a6, &v26);
      if (v8)
      {
        swift_release();
        return (void *)v9;
      }
      v8 = 0;
      v15 = v26;
      v16 = v27;
      v28 = v9;
      v18 = *(_QWORD *)(v9 + 16);
      v17 = *(_QWORD *)(v9 + 24);
      if (v18 >= v17 >> 1)
      {
        v20 = v27;
        v21 = v26;
        result = sub_1D2C4D9B0((char *)(v17 > 1), v18 + 1, 1);
        v16 = v20;
        v15 = v21;
        v9 = v28;
      }
      *(_QWORD *)(v9 + 16) = v18 + 1;
      v19 = v9 + 32 * v18;
      *(_OWORD *)(v19 + 32) = v15;
      *(_OWORD *)(v19 + 48) = v16;
      if (a2 < v12)
        goto LABEL_19;
      if (v13 == v14)
        goto LABEL_20;
      if (a2 == ++v14)
        return (void *)v9;
    }
    __break(1u);
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
LABEL_22:
  __break(1u);
  return result;
}

uint64_t sub_1D2C9C1E4@<X0>(uint64_t a1@<X1>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  int v16;
  uint64_t v17;
  int v18;
  int v19;
  uint64_t v20;
  uint64_t result;
  void *v22;
  uint64_t v23;
  _QWORD *v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28[2];

  v28[1] = *MEMORY[0x1E0C80C00];
  cche_relin_key_sizeof();
  v4 = cche_param_ctx_key_ctx_poly_nbytes();
  v5 = cche_rng_seed_sizeof();
  v6 = cche_param_ctx_key_ctx_nmoduli();
  v7 = v6 - 1;
  v8 = v7 * v4;
  if ((unsigned __int128)(v7 * (__int128)v4) >> 64 != (v7 * v4) >> 63)
  {
    __break(1u);
    goto LABEL_23;
  }
  v9 = v5;
  v10 = v7 * v5;
  v26 = v9;
  if ((unsigned __int128)(v7 * (__int128)v9) >> 64 != v10 >> 63)
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  if ((v8 & 0x8000000000000000) != 0)
  {
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
    __break(1u);
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  v25 = v6;
  if (v8)
  {
    v11 = sub_1D2CAAF30();
    *(_QWORD *)(v11 + 16) = v8;
    bzero((void *)(v11 + 32), v7 * v4);
    v28[0] = v11;
    if ((v10 & 0x8000000000000000) == 0)
      goto LABEL_6;
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  v11 = MEMORY[0x1E0DEE9D8];
  v28[0] = MEMORY[0x1E0DEE9D8];
  if (v10 < 0)
    goto LABEL_9;
LABEL_6:
  v24 = a2;
  v23 = v4;
  if (v10)
  {
    v12 = sub_1D2CAAF30();
    *(_QWORD *)(v12 + 16) = v10;
    bzero((void *)(v12 + 32), v10);
    goto LABEL_11;
  }
LABEL_10:
  v12 = MEMORY[0x1E0DEE9D8];
LABEL_11:
  swift_retain();
  v13 = swift_slowAlloc();
  if (!*(_QWORD *)(a1 + 24))
  {
LABEL_28:
    __break(1u);
LABEL_29:
    __break(1u);
  }
  if (HIDWORD(v10))
    goto LABEL_25;
  v14 = v13;
  if (!ccrng())
    goto LABEL_29;
  v27 = v12;
  v15 = cche_relin_key_generate();
  if (v15)
  {
    v16 = v15;
    sub_1D2C4E7DC();
    swift_allocError();
    *(_DWORD *)v17 = v16;
    *(_BYTE *)(v17 + 4) = 0;
    swift_willThrow();
    swift_release();
LABEL_19:
    swift_release();
    swift_retain();
    MEMORY[0x1D8245FD4](v14, -1, -1);
    swift_release_n();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  if (HIDWORD(v8))
    goto LABEL_26;
  v28[0] = v11;
  v18 = cche_relin_key_save();
  if (v18)
  {
    v19 = v18;
    sub_1D2C4E7DC();
    swift_allocError();
    *(_DWORD *)v20 = v19;
    *(_BYTE *)(v20 + 4) = 0;
    swift_willThrow();
    swift_release();
    goto LABEL_19;
  }
  if (!v25)
    goto LABEL_27;
  v22 = sub_1D2C9C088(0, v7, v23, v26, v28, &v27);
  swift_release();
  swift_release();
  swift_retain();
  MEMORY[0x1D8245FD4](v14, -1, -1);
  swift_release_n();
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  *v24 = v22;
  return result;
}

uint64_t HE.SerializedRelinKey.relinKey.getter()
{
  return sub_1D2CAAF0C();
}

uint64_t HE.SerializedRelinKey.init(relinKey:)@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = result;
  return result;
}

ValueMetadata *type metadata accessor for HE.SerializedRelinKey()
{
  return &type metadata for HE.SerializedRelinKey;
}

_QWORD *sub_1D2C9C560@<X0>(_QWORD *result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X3>, uint64_t *a5@<X4>, _QWORD *a6@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  unint64_t v15;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;

  v6 = *result;
  v7 = *result + 1;
  if (__OFADD__(*result, 1))
  {
    __break(1u);
    goto LABEL_18;
  }
  v9 = v6 * a2;
  if ((unsigned __int128)(v6 * (__int128)a2) >> 64 != (v6 * a2) >> 63)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  v10 = v7 * a2;
  if ((unsigned __int128)(v7 * (__int128)a2) >> 64 != (v7 * a2) >> 63)
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  v11 = v6 * a3;
  if ((unsigned __int128)(v6 * (__int128)a3) >> 64 != (v6 * a3) >> 63)
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  v12 = v7 * a3;
  if ((unsigned __int128)(v7 * (__int128)a3) >> 64 != (v7 * a3) >> 63)
  {
LABEL_21:
    __break(1u);
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  if (v10 < v9 || v12 < v11)
    goto LABEL_22;
  if (v9 < 0)
  {
LABEL_23:
    __break(1u);
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  v14 = *a4;
  v15 = *(_QWORD *)(*a4 + 16);
  if (v15 < v9 || (uint64_t)v15 < v10)
    goto LABEL_24;
  v17 = (2 * v10) | 1;
  v18 = sub_1D2CAAF0C();
  v19 = sub_1D2C69438(v18, v14 + 32, v9, v17);
  v21 = v20;
  result = (_QWORD *)swift_bridgeObjectRelease();
  if (v11 < 0)
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  v22 = *a5;
  v23 = *(_QWORD *)(v22 + 16);
  if (v23 >= v11 && (uint64_t)v23 >= v12)
  {
    v24 = sub_1D2CAAF0C();
    v25 = sub_1D2C69438(v24, v22 + 32, v11, (2 * v12) | 1);
    v27 = v26;
    result = (_QWORD *)swift_bridgeObjectRelease();
    *a6 = v19;
    a6[1] = v21;
    a6[2] = v25;
    a6[3] = v27;
    return result;
  }
LABEL_26:
  __break(1u);
  return result;
}

uint64_t sub_1D2C9C6C8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  size_t v12;
  size_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *inited;
  int v17;
  int v18;
  int v19;
  uint64_t v20;
  uint64_t result;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  int64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  _QWORD *v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  const void *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  _QWORD *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  const void *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  _QWORD *v63;
  unint64_t v64;
  char isUniquelyReferenced_nonNull_native;
  char v66;
  unint64_t v67;
  uint64_t v68;
  _BOOL8 v69;
  uint64_t v70;
  char v71;
  unint64_t v72;
  char v73;
  _QWORD *v74;
  uint64_t v75;
  BOOL v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  _QWORD *v80;
  unint64_t v81;
  unsigned int v82;
  unsigned int v83;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  int64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  _BYTE __dst[14];
  unsigned __int8 v97;
  uint64_t v98;
  _QWORD v99[3];
  uint64_t v100;
  unint64_t v101;
  uint64_t v102;

  v102 = *MEMORY[0x1E0C80C00];
  v89 = *(_QWORD *)(a2 + 16);
  if (HIDWORD(v89))
  {
LABEL_93:
    __break(1u);
    goto LABEL_94;
  }
  v6 = cche_galois_key_sizeof();
  v7 = cche_param_ctx_key_ctx_poly_nbytes();
  v8 = cche_rng_seed_sizeof();
  v9 = cche_param_ctx_key_ctx_nmoduli();
  v10 = v9 - 1;
  v11 = v89 * v10;
  if ((unsigned __int128)((uint64_t)v89 * (__int128)v10) >> 64 != (uint64_t)(v89 * v10) >> 63)
  {
LABEL_94:
    __break(1u);
    goto LABEL_95;
  }
  v92 = v9 - 1;
  v12 = v11 * v7;
  if ((unsigned __int128)(v11 * (__int128)v7) >> 64 != (v11 * v7) >> 63)
  {
LABEL_95:
    __break(1u);
    goto LABEL_96;
  }
  v13 = v11 * v8;
  if ((unsigned __int128)(v11 * (__int128)v8) >> 64 != (v11 * v8) >> 63)
  {
LABEL_96:
    __break(1u);
    goto LABEL_97;
  }
  if ((v12 & 0x8000000000000000) != 0)
  {
LABEL_97:
    __break(1u);
LABEL_98:
    __break(1u);
    __break(1u);
LABEL_99:
    __break(1u);
LABEL_100:
    __break(1u);
    goto LABEL_101;
  }
  v82 = v9;
  v86 = a1;
  v80 = a4;
  if (v12)
  {
    v14 = sub_1D2CAAF30();
    *(_QWORD *)(v14 + 16) = v12;
    bzero((void *)(v14 + 32), v12);
    if ((v13 & 0x8000000000000000) == 0)
      goto LABEL_8;
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  v14 = MEMORY[0x1E0DEE9D8];
  if ((v13 & 0x8000000000000000) != 0)
    goto LABEL_11;
LABEL_8:
  if (!v13)
  {
LABEL_12:
    v15 = MEMORY[0x1E0DEE9D8];
    goto LABEL_13;
  }
  v15 = sub_1D2CAAF30();
  *(_QWORD *)(v15 + 16) = v13;
  bzero((void *)(v15 + 32), v13);
LABEL_13:
  type metadata accessor for HE.ObjectStorage();
  inited = (_QWORD *)swift_initStackObject();
  inited[2] = v86;
  swift_retain();
  v93 = swift_slowAlloc();
  inited[3] = v93;
  inited[4] = v93 + v6;
  if (!*(_QWORD *)(a3 + 24))
  {
LABEL_105:
    __break(1u);
LABEL_106:
    __break(1u);
  }
  if (HIDWORD(v13))
    goto LABEL_98;
  v91 = v8;
  v95 = v15;
  LODWORD(v99[0]) = 0;
  if (!ccrng())
    goto LABEL_106;
  v17 = cche_galois_key_generate();
  if (v17)
  {
    v18 = v17;
LABEL_21:
    swift_bridgeObjectRelease();
    sub_1D2C4E7DC();
    swift_allocError();
    *(_DWORD *)v20 = v18;
    *(_BYTE *)(v20 + 4) = 0;
    swift_willThrow();
    swift_release();
    swift_release();
    swift_setDeallocating();
    swift_retain();
    MEMORY[0x1D8245FD4](v93, -1, -1);
    swift_release_n();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  if (HIDWORD(v12))
    goto LABEL_102;
  v19 = cche_galois_key_save();
  if (v19)
  {
    v18 = v19;
    goto LABEL_21;
  }
  v22 = MEMORY[0x1E0DEE9D8];
  v23 = sub_1D2C7AE9C(MEMORY[0x1E0DEE9D8]);
  v24 = a2;
  v78 = *(_QWORD *)(a2 + 16);
  if (!v78)
  {
    v74 = (_QWORD *)v23;
    swift_release();
    swift_release();
    goto LABEL_79;
  }
  v88 = v14 + 32;
  if (!v82)
    goto LABEL_104;
  v25 = 0;
  v94 = v14;
  v26 = v92;
  v87 = v7;
  do
  {
    if (v25 >= *(_QWORD *)(v24 + 16))
      goto LABEL_99;
    v83 = *(_DWORD *)(a2 + 32 + 4 * v25);
    v81 = v25;
    if (v26)
    {
      v79 = v23;
      v98 = v22;
      sub_1D2C4D9B0(0, v26, 0);
      v90 = v25 * v26;
      if ((unsigned __int128)((uint64_t)v25 * (__int128)v26) >> 64 != (uint64_t)(v25 * v26) >> 63)
      {
LABEL_101:
        __break(1u);
LABEL_102:
        __break(1u);
LABEL_103:
        __break(1u);
LABEL_104:
        __break(1u);
        goto LABEL_105;
      }
      v28 = 0;
      while (1)
      {
        v29 = v90 + v28;
        if (__OFADD__(v90, v28))
          break;
        v30 = v29 + 1;
        if (__OFADD__(v29, 1))
          goto LABEL_81;
        v31 = v29 * v7;
        if ((unsigned __int128)(v29 * (__int128)v7) >> 64 != (v29 * v7) >> 63)
          goto LABEL_82;
        v32 = v30 * v7;
        if ((unsigned __int128)(v30 * (__int128)v7) >> 64 != (v30 * v7) >> 63)
          goto LABEL_83;
        v33 = v29 * v8;
        if ((unsigned __int128)(v29 * (__int128)v8) >> 64 != (v29 * v8) >> 63)
          goto LABEL_84;
        v34 = v30 * v8;
        if ((unsigned __int128)(v30 * (__int128)v8) >> 64 != (v30 * v8) >> 63)
          goto LABEL_85;
        if (v32 < v31 || v34 < v33)
          goto LABEL_86;
        if (v31 < 0)
          goto LABEL_87;
        v35 = *(_QWORD *)(v14 + 16);
        if (v35 < (unint64_t)v31 || v35 < v32)
          goto LABEL_88;
        v36 = (2 * v32) | 1;
        v37 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFC9FD28);
        v100 = v37;
        v38 = sub_1D2C9D4A4();
        v101 = v38;
        v39 = (_QWORD *)swift_allocObject();
        v99[0] = v39;
        v39[2] = v14;
        v39[3] = v88;
        v39[4] = v31;
        v39[5] = v36;
        v40 = __swift_project_boxed_opaque_existential_1(v99, v37);
        v41 = v40[2];
        v42 = v40[3] >> 1;
        v43 = v42 - v41;
        if (__OFSUB__(v42, v41))
          goto LABEL_89;
        if (v43)
        {
          v44 = (const void *)(v40[1] + v41);
          if (v43 <= 14)
          {
            memset(__dst, 0, sizeof(__dst));
            v97 = v42 - v41;
            memcpy(__dst, v44, v42 - v41);
            v47 = *(_QWORD *)__dst;
            v48 = *(unsigned int *)&__dst[8] | ((unint64_t)__dst[12] << 32) | ((unint64_t)__dst[13] << 40) | ((unint64_t)v97 << 48);
            swift_bridgeObjectRetain_n();
          }
          else
          {
            sub_1D2CAA8A0();
            swift_allocObject();
            swift_bridgeObjectRetain_n();
            v45 = sub_1D2CAA858();
            v46 = v45;
            if ((unint64_t)v43 >= 0x7FFFFFFF)
            {
              sub_1D2CAA90C();
              v47 = swift_allocObject();
              *(_QWORD *)(v47 + 16) = 0;
              *(_QWORD *)(v47 + 24) = v43;
              v48 = v46 | 0x8000000000000000;
            }
            else
            {
              v47 = v43 << 32;
              v48 = v45 | 0x4000000000000000;
            }
          }
        }
        else
        {
          swift_bridgeObjectRetain_n();
          v47 = 0;
          v48 = 0xC000000000000000;
        }
        swift_bridgeObjectRelease();
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v99);
        if (v33 < 0)
          goto LABEL_90;
        v49 = *(_QWORD *)(v95 + 16);
        if (v49 < (unint64_t)v33 || v49 < v34)
          goto LABEL_91;
        v100 = v37;
        v101 = v38;
        v50 = (_QWORD *)swift_allocObject();
        v99[0] = v50;
        v50[2] = v95;
        v50[3] = v95 + 32;
        v50[4] = v33;
        v50[5] = (2 * v34) | 1;
        v51 = __swift_project_boxed_opaque_existential_1(v99, v37);
        v52 = v51[2];
        v53 = v51[3] >> 1;
        v54 = v53 - v52;
        if (__OFSUB__(v53, v52))
          goto LABEL_92;
        if (v54)
        {
          v55 = (const void *)(v51[1] + v52);
          if (v54 <= 14)
          {
            memset(__dst, 0, sizeof(__dst));
            v97 = v53 - v52;
            memcpy(__dst, v55, v53 - v52);
            v58 = *(_QWORD *)__dst;
            v59 = *(unsigned int *)&__dst[8] | ((unint64_t)__dst[12] << 32) | ((unint64_t)__dst[13] << 40) | ((unint64_t)v97 << 48);
            swift_bridgeObjectRetain_n();
          }
          else
          {
            sub_1D2CAA8A0();
            swift_allocObject();
            swift_bridgeObjectRetain_n();
            v56 = sub_1D2CAA858();
            v57 = v56;
            if ((unint64_t)v54 >= 0x7FFFFFFF)
            {
              sub_1D2CAA90C();
              v58 = swift_allocObject();
              *(_QWORD *)(v58 + 16) = 0;
              *(_QWORD *)(v58 + 24) = v54;
              v59 = v57 | 0x8000000000000000;
            }
            else
            {
              v58 = v54 << 32;
              v59 = v56 | 0x4000000000000000;
            }
          }
        }
        else
        {
          swift_bridgeObjectRetain_n();
          v58 = 0;
          v59 = 0xC000000000000000;
        }
        swift_bridgeObjectRelease();
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v99);
        v60 = v98;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          sub_1D2C4D9B0(0, *(_QWORD *)(v60 + 16) + 1, 1);
          v60 = v98;
        }
        v62 = *(_QWORD *)(v60 + 16);
        v61 = *(_QWORD *)(v60 + 24);
        if (v62 >= v61 >> 1)
        {
          sub_1D2C4D9B0((char *)(v61 > 1), v62 + 1, 1);
          v60 = v98;
        }
        ++v28;
        *(_QWORD *)(v60 + 16) = v62 + 1;
        v63 = (_QWORD *)(v60 + 32 * v62);
        v63[4] = v47;
        v63[5] = v48;
        v63[6] = v58;
        v63[7] = v59;
        v14 = v94;
        v7 = v87;
        v8 = v91;
        if (v92 == v28)
        {
          v22 = MEMORY[0x1E0DEE9D8];
          v23 = v79;
          goto LABEL_68;
        }
      }
      __break(1u);
LABEL_81:
      __break(1u);
LABEL_82:
      __break(1u);
LABEL_83:
      __break(1u);
LABEL_84:
      __break(1u);
LABEL_85:
      __break(1u);
LABEL_86:
      __break(1u);
LABEL_87:
      __break(1u);
LABEL_88:
      __break(1u);
LABEL_89:
      __break(1u);
LABEL_90:
      __break(1u);
LABEL_91:
      __break(1u);
LABEL_92:
      __break(1u);
      goto LABEL_93;
    }
    v60 = v22;
LABEL_68:
    v64 = v23;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v99[0] = v64;
    v67 = sub_1D2C7A84C(v83);
    v68 = *(_QWORD *)(v64 + 16);
    v69 = (v66 & 1) == 0;
    v70 = v68 + v69;
    if (__OFADD__(v68, v69))
      goto LABEL_100;
    v71 = v66;
    if (*(_QWORD *)(v64 + 24) >= v70)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        sub_1D2C9D300();
    }
    else
    {
      sub_1D2C9D050(v70, isUniquelyReferenced_nonNull_native);
      v72 = sub_1D2C7A84C(v83);
      if ((v71 & 1) != (v73 & 1))
      {
        result = sub_1D2CAB0E0();
        __break(1u);
        return result;
      }
      v67 = v72;
    }
    v8 = v91;
    v74 = (_QWORD *)v99[0];
    if ((v71 & 1) != 0)
    {
      v27 = *(_QWORD *)(v99[0] + 56);
      swift_bridgeObjectRelease();
      *(_QWORD *)(v27 + 8 * v67) = v60;
    }
    else
    {
      *(_QWORD *)(v99[0] + 8 * (v67 >> 6) + 64) |= 1 << v67;
      *(_DWORD *)(v74[6] + 4 * v67) = v83;
      *(_QWORD *)(v74[7] + 8 * v67) = v60;
      v75 = v74[2];
      v76 = __OFADD__(v75, 1);
      v77 = v75 + 1;
      if (v76)
        goto LABEL_103;
      v74[2] = v77;
    }
    v25 = v81 + 1;
    swift_bridgeObjectRelease();
    v24 = a2;
    v26 = v92;
    v23 = (unint64_t)v74;
  }
  while (v81 + 1 != v78);
  swift_release();
  swift_release();
LABEL_79:
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  *v80 = v74;
  return result;
}

uint64_t HE.SerializedGaloisKey.galoisKey.getter()
{
  return sub_1D2CAAF0C();
}

uint64_t HE.SerializedGaloisKey.init(galoisKey:)@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = result;
  return result;
}

ValueMetadata *type metadata accessor for HE.SerializedGaloisKey()
{
  return &type metadata for HE.SerializedGaloisKey;
}

uint64_t sub_1D2C9D050(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  char v23;
  unint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int64_t v31;

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EFCA0260);
  result = sub_1D2CAB08C();
  v7 = result;
  if (*(_QWORD *)(v5 + 16))
  {
    v8 = 0;
    v9 = (uint64_t *)(v5 + 64);
    v10 = 1 << *(_BYTE *)(v5 + 32);
    v29 = -1 << v10;
    v30 = v10;
    if (v10 < 64)
      v11 = ~(-1 << v10);
    else
      v11 = -1;
    v12 = v11 & *(_QWORD *)(v5 + 64);
    v31 = (unint64_t)(v10 + 63) >> 6;
    v13 = result + 64;
    while (1)
    {
      if (v12)
      {
        v18 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        v19 = v18 | (v8 << 6);
      }
      else
      {
        v20 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_40:
          __break(1u);
LABEL_41:
          __break(1u);
          return result;
        }
        if (v20 >= v31)
          goto LABEL_33;
        v21 = v9[v20];
        ++v8;
        if (!v21)
        {
          v8 = v20 + 1;
          if (v20 + 1 >= v31)
            goto LABEL_33;
          v21 = v9[v8];
          if (!v21)
          {
            v22 = v20 + 2;
            if (v22 >= v31)
            {
LABEL_33:
              if ((a2 & 1) != 0)
              {
                if (v30 >= 64)
                  bzero((void *)(v5 + 64), 8 * v31);
                else
                  *v9 = v29;
                *(_QWORD *)(v5 + 16) = 0;
              }
              break;
            }
            v21 = v9[v22];
            if (!v21)
            {
              while (1)
              {
                v8 = v22 + 1;
                if (__OFADD__(v22, 1))
                  goto LABEL_41;
                if (v8 >= v31)
                  goto LABEL_33;
                v21 = v9[v8];
                ++v22;
                if (v21)
                  goto LABEL_30;
              }
            }
            v8 = v22;
          }
        }
LABEL_30:
        v12 = (v21 - 1) & v21;
        v19 = __clz(__rbit64(v21)) + (v8 << 6);
      }
      v27 = *(unsigned int *)(*(_QWORD *)(v5 + 48) + 4 * v19);
      v28 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v19);
      if ((a2 & 1) == 0)
        sub_1D2CAAF0C();
      result = MEMORY[0x1D82454C4](*(_QWORD *)(v7 + 40), v27, 4);
      v14 = -1 << *(_BYTE *)(v7 + 32);
      v15 = result & ~v14;
      v16 = v15 >> 6;
      if (((-1 << v15) & ~*(_QWORD *)(v13 + 8 * (v15 >> 6))) != 0)
      {
        v17 = __clz(__rbit64((-1 << v15) & ~*(_QWORD *)(v13 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v23 = 0;
        v24 = (unint64_t)(63 - v14) >> 6;
        do
        {
          if (++v16 == v24 && (v23 & 1) != 0)
          {
            __break(1u);
            goto LABEL_40;
          }
          v25 = v16 == v24;
          if (v16 == v24)
            v16 = 0;
          v23 |= v25;
          v26 = *(_QWORD *)(v13 + 8 * v16);
        }
        while (v26 == -1);
        v17 = __clz(__rbit64(~v26)) + (v16 << 6);
      }
      *(_QWORD *)(v13 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
      *(_DWORD *)(*(_QWORD *)(v7 + 48) + 4 * v17) = v27;
      *(_QWORD *)(*(_QWORD *)(v7 + 56) + 8 * v17) = v28;
      ++*(_QWORD *)(v7 + 16);
    }
  }
  result = swift_release();
  *v3 = v7;
  return result;
}

void *sub_1D2C9D300()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EFCA0260);
  v2 = *v0;
  v3 = sub_1D2CAB080();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v20 >= v13)
      goto LABEL_26;
    v21 = *(_QWORD *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      v9 = v20 + 1;
      if (v20 + 1 >= v13)
        goto LABEL_26;
      v21 = *(_QWORD *)(v6 + 8 * v9);
      if (!v21)
        break;
    }
LABEL_25:
    v12 = (v21 - 1) & v21;
    v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    v16 = 4 * v15;
    v17 = *(_DWORD *)(*(_QWORD *)(v2 + 48) + 4 * v15);
    v18 = 8 * v15;
    v19 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + v18);
    *(_DWORD *)(*(_QWORD *)(v4 + 48) + v16) = v17;
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + v18) = v19;
    result = (void *)sub_1D2CAAF0C();
  }
  v22 = v20 + 2;
  if (v22 >= v13)
    goto LABEL_26;
  v21 = *(_QWORD *)(v6 + 8 * v22);
  if (v21)
  {
    v9 = v22;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v21 = *(_QWORD *)(v6 + 8 * v9);
    ++v22;
    if (v21)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

unint64_t sub_1D2C9D4A4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1EFC9FD30;
  if (!qword_1EFC9FD30)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EFC9FD28);
    result = MEMORY[0x1D8245F38](MEMORY[0x1E0CB25C0], v1);
    atomic_store(result, (unint64_t *)&qword_1EFC9FD30);
  }
  return result;
}

uint64_t sub_1D2C9D4F0()
{
  swift_unknownObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_1D2C9D514@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, unsigned __int8 *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, char a6@<W5>, uint64_t a7@<X8>)
{
  uint64_t v7;
  uint64_t v13;
  uint64_t v14;
  unsigned __int8 v15;
  unint64_t v16;
  uint64_t result;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned __int8 v22;
  char v23;
  unsigned __int8 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  unsigned __int8 v30;
  uint64_t v31;
  unsigned __int8 v32;
  unsigned __int8 v33;
  char v34;

  v13 = *a2;
  v14 = a2[1];
  v15 = *a3;
  *(_QWORD *)&v28 = *a2;
  *((_QWORD *)&v28 + 1) = v14;
  v33 = v15;
  v16 = swift_retain();
  sub_1D2C53FC0(v16, (uint64_t *)&v28, &v33, a4, a6, (uint64_t)&v29);
  if (v7)
  {
    swift_release();
    return swift_release();
  }
  else
  {
    v27 = v13;
    v18 = v29;
    v19 = v30;
    v20 = v31;
    sub_1D2CAAF0C();
    swift_retain();
    v26 = sub_1D2C9D978(v20, v18, *((uint64_t *)&v18 + 1), v19, v20, a5);
    swift_bridgeObjectRelease();
    result = swift_release();
    if (*(_QWORD *)(v20 + 16))
    {
      v21 = *(_QWORD *)(*(_QWORD *)(v20 + 32) + 16);
      v22 = *(_BYTE *)(v21 + 40);
      LOBYTE(v21) = *(_BYTE *)(v21 + 41);
      v33 = v22;
      v34 = v21;
      v28 = v18;
      v32 = v19;
      PEC.SerializedCiphertextCoeffMatrix.init(encryptionParams:dimensions:packing:ciphertexts:)(&v33, (uint64_t *)&v28, &v32, v26, (uint64_t)&v29);
      swift_bridgeObjectRelease();
      v23 = *(_BYTE *)(a1 + 41);
      v33 = *(_BYTE *)(a1 + 40);
      v34 = v23;
      *(_QWORD *)&v28 = v27;
      *((_QWORD *)&v28 + 1) = v14;
      v32 = v15;
      PEC.SerializedCiphertextCoeffMatrix.init(encryptionParams:dimensions:packing:ciphertexts:)(&v33, (uint64_t *)&v28, &v32, v31, (uint64_t)&v29);
      swift_release();
      result = swift_release();
      v24 = v30;
      v25 = v31;
      *(_OWORD *)a7 = v29;
      *(_BYTE *)(a7 + 16) = v24;
      *(_QWORD *)(a7 + 24) = v25;
    }
    else
    {
      __break(1u);
    }
  }
  return result;
}

uint64_t PEC.SerializedCiphertextCoeffMatrix.init(encryptionParams:dimensions:packing:ciphertexts:)@<X0>(_BYTE *a1@<X0>, uint64_t *a2@<X1>, unsigned __int8 *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 v10;
  char v11;
  uint64_t result;
  uint64_t v13;
  unsigned __int8 v14;
  uint64_t v15[2];
  _BYTE v16[2];

  if (!*(_QWORD *)(a4 + 16))
    goto LABEL_6;
  v8 = *a2;
  v9 = a2[1];
  v10 = *a3;
  v11 = a1[1];
  v16[0] = *a1;
  v16[1] = v11;
  v15[0] = v8;
  v15[1] = v9;
  v14 = v10;
  result = sub_1D2C54B58((uint64_t)v16, v15, &v14);
  if (v5)
    return swift_bridgeObjectRelease();
  if (*(_QWORD *)(a4 + 16) == result)
  {
    *(_QWORD *)a5 = v8;
    *(_QWORD *)(a5 + 8) = v9;
    *(_BYTE *)(a5 + 16) = v10;
    *(_QWORD *)(a5 + 24) = a4;
  }
  else
  {
LABEL_6:
    swift_bridgeObjectRelease();
    sub_1D2C4E7DC();
    swift_allocError();
    *(_DWORD *)v13 = 1;
    *(_BYTE *)(v13 + 4) = 1;
    return swift_willThrow();
  }
  return result;
}

void PEC.SerializedCiphertextCoeffMatrix.packing.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 16);
}

uint64_t PEC.SerializedCiphertextCoeffMatrix.ciphertexts.getter()
{
  return sub_1D2CAAF0C();
}

uint64_t PEC.SerializedCiphertextCoeffMatrix.rowCount.getter()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

uint64_t PEC.SerializedCiphertextCoeffMatrix.colCount.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 8);
}

uint64_t _s31SerializedCiphertextCoeffMatrixVwcp(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  sub_1D2CAAF0C();
  return a1;
}

uint64_t _s31SerializedCiphertextCoeffMatrixVwca(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  sub_1D2CAAF0C();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t _s31SerializedCiphertextCoeffMatrixVwta(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t _s31SerializedCiphertextCoeffMatrixVwet(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 32))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t _s31SerializedCiphertextCoeffMatrixVwst(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 32) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 24) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 32) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for PEC.SerializedCiphertextCoeffMatrix()
{
  return &type metadata for PEC.SerializedCiphertextCoeffMatrix;
}

uint64_t sub_1D2C9D978(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  int64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *inited;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  int v20;
  int v21;
  __int128 v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  int v26;
  __int128 v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v38;
  __int128 v39;
  __int128 v40;
  uint64_t v41;

  v6 = *(_QWORD *)(a1 + 16);
  v7 = MEMORY[0x1E0DEE9D8];
  if (!v6)
    return v7;
  v41 = MEMORY[0x1E0DEE9D8];
  sub_1D2C4D9B0(0, v6, 0);
  v36 = *(_QWORD *)(a5 + 32);
  result = cche_rng_seed_sizeof();
  if (!*(_QWORD *)(a5 + 16))
    goto LABEL_34;
  v11 = (uint64_t *)(a1 + 32);
  v7 = v41;
  v12 = result;
  v35 = (unint64_t)result << 48;
  type metadata accessor for HE.ObjectStorage();
  v38 = v12;
  v34 = v12 << 32;
  while (1)
  {
    v13 = *v11;
    v14 = *(_QWORD *)(v36 + 16);
    cche_param_ctx_ciphertext_ctx_nmoduli();
    v15 = cche_ciphertext_sizeof();
    inited = (_QWORD *)swift_initStackObject();
    inited[2] = v14;
    swift_retain_n();
    swift_retain();
    result = swift_slowAlloc();
    inited[3] = result;
    inited[4] = result + v15;
    if (!v38)
    {
      result = 0;
      v19 = 0xC000000000000000;
      goto LABEL_12;
    }
    if (v38 < 15)
      break;
    sub_1D2CAA8A0();
    swift_allocObject();
    v17 = sub_1D2CAA870();
    v18 = v17;
    if ((unint64_t)v38 >= 0x7FFFFFFF)
    {
      sub_1D2CAA90C();
      result = swift_allocObject();
      *(_QWORD *)(result + 16) = 0;
      *(_QWORD *)(result + 24) = v38;
      v19 = v18 | 0x8000000000000000;
    }
    else
    {
      v19 = v17 | 0x4000000000000000;
      result = v34;
    }
LABEL_12:
    *(_QWORD *)&v40 = result;
    *((_QWORD *)&v40 + 1) = v19;
    if (!*(_QWORD *)(v13 + 24))
      goto LABEL_35;
    if (!*(_QWORD *)(a6 + 24))
      goto LABEL_36;
    swift_retain();
    sub_1D2C9A498((uint64_t)&v40);
    v21 = v20;
    swift_release();
    if (v21)
    {
      sub_1D2C4E7DC();
      swift_allocError();
      *(_DWORD *)v31 = v21;
      *(_BYTE *)(v31 + 4) = 0;
      swift_willThrow();
      swift_release();
LABEL_30:
      sub_1D2C45258(v40, *((unint64_t *)&v40 + 1));
      swift_release();
      swift_release();
      swift_release();
      return v7;
    }
    v22 = v40;
    result = cche_serialize_seeded_ciphertext_coeff_nbytes();
    if (result)
    {
      v23 = result;
      if (result <= 14)
      {
        if (result < 0)
          goto LABEL_33;
        result = 0;
        v25 = (unint64_t)v23 << 48;
      }
      else
      {
        sub_1D2CAA8A0();
        swift_allocObject();
        v24 = sub_1D2CAA870();
        if (v23 >= 0x7FFFFFFF)
        {
          sub_1D2CAA90C();
          result = swift_allocObject();
          *(_QWORD *)(result + 16) = 0;
          *(_QWORD *)(result + 24) = v23;
          v25 = v24 | 0x8000000000000000;
        }
        else
        {
          result = v23 << 32;
          v25 = v24 | 0x4000000000000000;
        }
      }
    }
    else
    {
      v25 = 0xC000000000000000;
    }
    *(_QWORD *)&v40 = result;
    *((_QWORD *)&v40 + 1) = v25;
    sub_1D2C9A8E4((uint64_t)&v40);
    if (v26)
    {
      v32 = v26;
      sub_1D2C4E7DC();
      swift_allocError();
      *(_DWORD *)v33 = v32;
      *(_BYTE *)(v33 + 4) = 0;
      swift_willThrow();
      swift_release();
      sub_1D2C45258(v22, *((unint64_t *)&v22 + 1));
      goto LABEL_30;
    }
    swift_release();
    swift_release();
    swift_release();
    v27 = v40;
    v41 = v7;
    v29 = *(_QWORD *)(v7 + 16);
    v28 = *(_QWORD *)(v7 + 24);
    if (v29 >= v28 >> 1)
    {
      v39 = v40;
      sub_1D2C4D9B0((char *)(v28 > 1), v29 + 1, 1);
      v27 = v39;
      v7 = v41;
    }
    *(_QWORD *)(v7 + 16) = v29 + 1;
    v30 = v7 + 32 * v29;
    *(_OWORD *)(v30 + 32) = v27;
    *(_OWORD *)(v30 + 48) = v22;
    ++v11;
    if (!--v6)
      return v7;
  }
  if ((v38 & 0x8000000000000000) == 0)
  {
    result = 0;
    v19 = v35;
    goto LABEL_12;
  }
  __break(1u);
LABEL_33:
  __break(1u);
LABEL_34:
  __break(1u);
LABEL_35:
  __break(1u);
LABEL_36:
  __break(1u);
  return result;
}

uint64_t sub_1D2C9DD74()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v5;

  v0 = HE.RlweParams.rawValue.getter();
  v2 = v1;
  if (v0 == HE.RlweParams.rawValue.getter() && v2 == v3)
    v5 = 1;
  else
    v5 = sub_1D2CAB0BC();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v5 & 1;
}

uint64_t sub_1D2C9DE08(char a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  char v4;

  if ((a1 & 1) != 0)
    v2 = 5654338;
  else
    v2 = 5654082;
  if ((a2 & 1) != 0)
    v3 = 5654338;
  else
    v3 = 5654082;
  if (v2 == v3)
    v4 = 1;
  else
    v4 = sub_1D2CAB0BC();
  swift_bridgeObjectRelease_n();
  return v4 & 1;
}

uint64_t sub_1D2C9DE70(char a1, char a2)
{
  BOOL v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v7;

  v2 = (a1 & 1) == 0;
  if ((a1 & 1) != 0)
    v3 = 0x316D75746E617571;
  else
    v3 = 0x656B636568636E75;
  if (v2)
    v4 = 0xE900000000000064;
  else
    v4 = 0xEA00000000003832;
  if ((a2 & 1) != 0)
    v5 = 0x316D75746E617571;
  else
    v5 = 0x656B636568636E75;
  if ((a2 & 1) != 0)
    v6 = 0xEA00000000003832;
  else
    v6 = 0xE900000000000064;
  if (v3 == v5 && v4 == v6)
    v7 = 1;
  else
    v7 = sub_1D2CAB0BC();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

BOOL sub_1D2C9DF20(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _BOOL8 result;
  uint64_t v4;
  int *v5;
  int *v6;
  int v7;
  int v8;
  int v9;
  int v10;
  BOOL v12;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != *(_QWORD *)(a2 + 16))
    return 0;
  if (!v2 || a1 == a2)
    return 1;
  if (*(_DWORD *)(a1 + 32) != *(_DWORD *)(a2 + 32))
    return 0;
  if (v2 == 1)
    return 1;
  v4 = v2 - 2;
  v5 = (int *)(a1 + 36);
  v6 = (int *)(a2 + 36);
  do
  {
    v8 = *v5++;
    v7 = v8;
    v10 = *v6++;
    v9 = v10;
    v12 = v4-- != 0;
    result = v7 == v9;
  }
  while (v7 == v9 && v12);
  return result;
}

BOOL sub_1D2C9DF94(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;
  _BOOL8 result;
  uint64_t v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v12;

  v2 = a1[2];
  if (v2 != a2[2])
    return 0;
  if (!v2 || a1 == a2)
    return 1;
  if (a1[4] != a2[4])
    return 0;
  if (v2 == 1)
    return 1;
  v4 = v2 - 2;
  v5 = a1 + 5;
  v6 = a2 + 5;
  do
  {
    v8 = *v5++;
    v7 = v8;
    v10 = *v6++;
    v9 = v10;
    v12 = v4-- != 0;
    result = v7 == v9;
  }
  while (v7 == v9 && v12);
  return result;
}

uint64_t HE.RlweParams.plaintextModulus.getter()
{
  return cche_encryption_params_plaintext_modulus();
}

uint64_t HE.RlweParams.init(inParams:plaintextModulus:)@<X0>(char *a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  char v5;
  int v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char v19;
  uint64_t v20;
  char v23;

  v3 = a2;
  v4 = 0;
  v23 = *a1;
  while (1)
  {
    v5 = *((_BYTE *)&unk_1E943EC28 + v4 + 32);
    v6 = cche_encryption_params_polynomial_degree();
    if (v6 != cche_encryption_params_polynomial_degree()
      || cche_encryption_params_plaintext_modulus() != v3)
    {
      goto LABEL_3;
    }
    result = cche_encryption_params_coefficient_nmoduli();
    if (result < 0)
    {
      __break(1u);
LABEL_43:
      __break(1u);
      goto LABEL_44;
    }
    v8 = result;
    if (result)
    {
      v9 = sub_1D2CAAF30();
      *(_QWORD *)(v9 + 16) = v8;
    }
    else
    {
      v9 = MEMORY[0x1E0DEE9D8];
    }
    cche_encryption_params_coefficient_moduli();
    *(_QWORD *)(v9 + 16) = v8;
    result = cche_encryption_params_coefficient_nmoduli();
    if (result < 0)
      goto LABEL_43;
    v10 = result;
    if (result)
    {
      v11 = sub_1D2CAAF30();
      *(_QWORD *)(v11 + 16) = v10;
    }
    else
    {
      v11 = MEMORY[0x1E0DEE9D8];
    }
    result = cche_encryption_params_coefficient_moduli();
    *(_QWORD *)(v11 + 16) = v10;
    if (*(_QWORD *)(v9 + 16) != v10)
    {
LABEL_2:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v3 = a2;
      goto LABEL_3;
    }
    if (v10 && v9 != v11)
    {
      if (*(_QWORD *)(v9 + 32) != *(_QWORD *)(v11 + 32))
        goto LABEL_2;
      v12 = v10 - 1;
      if (v10 != 1)
        break;
    }
LABEL_23:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v14 = 0x1EFFCu >> v5;
    if (((1 << v23) & 0x1EFFC) != 0)
      v15 = 0x316D75746E617571;
    else
      v15 = 0x656B636568636E75;
    if (((1 << v23) & 0x1EFFC) != 0)
      v16 = 0xEA00000000003832;
    else
      v16 = 0xE900000000000064;
    if ((v14 & 1) != 0)
      v17 = 0x316D75746E617571;
    else
      v17 = 0x656B636568636E75;
    if ((v14 & 1) != 0)
      v18 = 0xEA00000000003832;
    else
      v18 = 0xE900000000000064;
    if (v17 == v15 && v18 == v16)
    {
      result = swift_bridgeObjectRelease_n();
LABEL_41:
      *a3 = v5;
      return result;
    }
    v19 = sub_1D2CAB0BC();
    swift_bridgeObjectRelease();
    result = swift_bridgeObjectRelease();
    v3 = a2;
    if ((v19 & 1) != 0)
      goto LABEL_41;
LABEL_3:
    if (++v4 == 17)
    {
      sub_1D2C4E7DC();
      swift_allocError();
      *(_DWORD *)v20 = 5;
      *(_BYTE *)(v20 + 4) = 1;
      return swift_willThrow();
    }
  }
  v13 = 0;
  while (v12 != v13)
  {
    if (*(_QWORD *)(v9 + 40 + 8 * v13) != *(_QWORD *)(v11 + 8 * v13 + 40))
      goto LABEL_2;
    if (v12 == ++v13)
      goto LABEL_23;
  }
LABEL_44:
  __break(1u);
  return result;
}

_BYTE *HE.EncryptionParams.init(rlweParams:scheme:)@<X0>(_BYTE *result@<X0>, char *a2@<X1>, _BYTE *a3@<X8>)
{
  char v3;

  v3 = *a2;
  *a3 = *result;
  a3[1] = v3;
  return result;
}

uint64_t HE.RlweParams.encodeSimdColCount.getter()
{
  return cche_encryption_params_polynomial_degree() >> 1;
}

uint64_t HE.RlweParams.encodeSimdRowCount.getter()
{
  return 2;
}

uint64_t HE.RlweParams.polynomialDegree.getter()
{
  return cche_encryption_params_polynomial_degree();
}

void HE.EncryptionParams.rlweParams.getter(_BYTE *a1@<X8>)
{
  _BYTE *v1;

  *a1 = *v1;
}

void HE.EncryptionParams.scheme.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 1);
}

void *static HE.RlweParams.allCases.getter()
{
  return &unk_1E943EC28;
}

uint64_t HE.RlweParams.coefficientModuli.getter()
{
  uint64_t result;
  uint64_t v1;
  uint64_t v2;

  result = cche_encryption_params_coefficient_nmoduli();
  if (result < 0)
  {
    __break(1u);
  }
  else
  {
    v1 = result;
    if (result)
    {
      v2 = sub_1D2CAAF30();
      *(_QWORD *)(v2 + 16) = v1;
    }
    else
    {
      v2 = MEMORY[0x1E0DEE9D8];
    }
    cche_encryption_params_coefficient_moduli();
    *(_QWORD *)(v2 + 16) = v1;
    return v2;
  }
  return result;
}

void HE.RlweParams.securityLevel.getter(_BYTE *a1@<X8>)
{
  char *v1;

  *a1 = byte_1D2CAF940[*v1];
}

BOOL HE.RlweParams.supportsEvaluationKey.getter()
{
  unint64_t v0;

  v0 = *(_QWORD *)(HE.RlweParams.coefficientModuli.getter() + 16);
  swift_bridgeObjectRelease();
  return v0 > 1;
}

uint64_t HE.RlweParams.init(rawValue:)@<X0>(char *a1@<X8>)
{
  unint64_t v2;
  uint64_t result;
  char v4;

  v2 = sub_1D2CAB0D4();
  result = swift_bridgeObjectRelease();
  v4 = 17;
  if (v2 < 0x11)
    v4 = v2;
  *a1 = v4;
  return result;
}

uint64_t HE.RlweParams.rawValue.getter()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_1D2C9E524
                                                                     + 4 * asc_1D2CAF400[*v0]))(0xD00000000000001DLL, 0x80000001D2CB0230);
}

uint64_t sub_1D2C9E524@<X0>(uint64_t a1@<X8>)
{
  return a1 + 4;
}

uint64_t sub_1D2C9E624()
{
  return sub_1D2C9DD74();
}

uint64_t sub_1D2C9E630()
{
  sub_1D2CAB134();
  HE.RlweParams.rawValue.getter();
  sub_1D2CAAE64();
  swift_bridgeObjectRelease();
  return sub_1D2CAB158();
}

uint64_t sub_1D2C9E694()
{
  HE.RlweParams.rawValue.getter();
  sub_1D2CAAE64();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1D2C9E6E4()
{
  sub_1D2CAB134();
  HE.RlweParams.rawValue.getter();
  sub_1D2CAAE64();
  swift_bridgeObjectRelease();
  return sub_1D2CAB158();
}

uint64_t sub_1D2C9E744@<X0>(char *a1@<X8>)
{
  return HE.RlweParams.init(rawValue:)(a1);
}

uint64_t sub_1D2C9E750@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = HE.RlweParams.rawValue.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

void sub_1D2C9E774(_QWORD *a1@<X8>)
{
  *a1 = &unk_1E943EC28;
}

uint64_t sub_1D2C9E784()
{
  sub_1D2C9F63C();
  return sub_1D2CAAEDC();
}

uint64_t sub_1D2C9E7E0()
{
  sub_1D2C9F63C();
  return sub_1D2CAAED0();
}

uint64_t sub_1D2C9E82C()
{
  sub_1D2C9F63C();
  return sub_1D2CAAEE8();
}

uint64_t sub_1D2C9E86C()
{
  sub_1D2C9F63C();
  return sub_1D2CAAEF4();
}

uint64_t HE.SecurityLevel.init(rawValue:)@<X0>(char *a1@<X8>)
{
  return sub_1D2C9EC6C(a1);
}

void *static HE.SecurityLevel.allCases.getter()
{
  return &unk_1E943EEF0;
}

uint64_t HE.SecurityLevel.rawValue.getter()
{
  _BYTE *v0;

  if (*v0)
    return 0x316D75746E617571;
  else
    return 0x656B636568636E75;
}

uint64_t sub_1D2C9E930(char *a1, char *a2)
{
  return sub_1D2C9DE70(*a1, *a2);
}

uint64_t sub_1D2C9E93C()
{
  sub_1D2CAB134();
  sub_1D2CAAE64();
  swift_bridgeObjectRelease();
  return sub_1D2CAB158();
}

uint64_t sub_1D2C9E9C4()
{
  sub_1D2CAAE64();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1D2C9EA28()
{
  sub_1D2CAB134();
  sub_1D2CAAE64();
  swift_bridgeObjectRelease();
  return sub_1D2CAB158();
}

uint64_t sub_1D2C9EAAC@<X0>(char *a1@<X8>)
{
  return HE.SecurityLevel.init(rawValue:)(a1);
}

void sub_1D2C9EAB8(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  uint64_t v2;
  unint64_t v3;

  v2 = 0x656B636568636E75;
  if (*v1)
    v2 = 0x316D75746E617571;
  v3 = 0xE900000000000064;
  if (*v1)
    v3 = 0xEA00000000003832;
  *a1 = v2;
  a1[1] = v3;
}

void sub_1D2C9EB00(_QWORD *a1@<X8>)
{
  *a1 = &unk_1E943EFF8;
}

uint64_t sub_1D2C9EB10()
{
  sub_1D2C9F5F8();
  return sub_1D2CAAEDC();
}

uint64_t sub_1D2C9EB6C()
{
  sub_1D2C9F5F8();
  return sub_1D2CAAED0();
}

uint64_t sub_1D2C9EBB8()
{
  sub_1D2C9F5F8();
  return sub_1D2CAAEE8();
}

uint64_t sub_1D2C9EBF8()
{
  sub_1D2C9F5F8();
  return sub_1D2CAAEF4();
}

uint64_t HE.Scheme.init(rawValue:)@<X0>(char *a1@<X8>)
{
  return sub_1D2C9EC6C(a1);
}

uint64_t sub_1D2C9EC6C@<X0>(char *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;
  char v4;

  v2 = sub_1D2CAB0A4();
  result = swift_bridgeObjectRelease();
  if (v2 == 1)
    v4 = 1;
  else
    v4 = 2;
  if (!v2)
    v4 = 0;
  *a1 = v4;
  return result;
}

void *static HE.Scheme.allCases.getter()
{
  return &unk_1E943F310;
}

uint64_t HE.Scheme.rawValue.getter()
{
  _BYTE *v0;

  if (*v0)
    return 5654338;
  else
    return 5654082;
}

uint64_t sub_1D2C9ECF4(char *a1, char *a2)
{
  return sub_1D2C9DE08(*a1, *a2);
}

uint64_t sub_1D2C9ED00()
{
  sub_1D2CAB134();
  sub_1D2CAAE64();
  swift_bridgeObjectRelease();
  return sub_1D2CAB158();
}

uint64_t sub_1D2C9ED60()
{
  sub_1D2CAAE64();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1D2C9ED94()
{
  sub_1D2CAB134();
  sub_1D2CAAE64();
  swift_bridgeObjectRelease();
  return sub_1D2CAB158();
}

uint64_t sub_1D2C9EDF0@<X0>(char *a1@<X8>)
{
  return HE.Scheme.init(rawValue:)(a1);
}

void sub_1D2C9EDFC(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  uint64_t v2;

  if (*v1)
    v2 = 5654338;
  else
    v2 = 5654082;
  *a1 = v2;
  a1[1] = 0xE300000000000000;
}

void sub_1D2C9EE20(_QWORD *a1@<X8>)
{
  *a1 = &unk_1E943F418;
}

uint64_t sub_1D2C9EE30()
{
  sub_1D2C9F5B4();
  return sub_1D2CAAEDC();
}

uint64_t sub_1D2C9EE8C()
{
  sub_1D2C9F5B4();
  return sub_1D2CAAED0();
}

uint64_t sub_1D2C9EED8()
{
  sub_1D2C9F5B4();
  return sub_1D2CAAEE8();
}

uint64_t sub_1D2C9EF18()
{
  sub_1D2C9F5B4();
  return sub_1D2CAAEF4();
}

uint64_t _s16CryptoKitPrivate2HEO16EncryptionParamsV2eeoiySbAE_AEtFZ_0(uint64_t a1, uint64_t a2)
{
  int v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v9;
  char v10;
  uint64_t v11;
  uint64_t v12;

  v2 = *(unsigned __int8 *)(a1 + 1);
  v3 = *(unsigned __int8 *)(a2 + 1);
  v4 = HE.RlweParams.rawValue.getter();
  v6 = v5;
  if (v4 == HE.RlweParams.rawValue.getter() && v6 == v7)
  {
    swift_bridgeObjectRelease_n();
  }
  else
  {
    v9 = sub_1D2CAB0BC();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v10 = 0;
    if ((v9 & 1) == 0)
      return v10 & 1;
  }
  if (v2)
    v11 = 5654338;
  else
    v11 = 5654082;
  if (v3)
    v12 = 5654338;
  else
    v12 = 5654082;
  if (v11 == v12)
    v10 = 1;
  else
    v10 = sub_1D2CAB0BC();
  swift_bridgeObjectRelease_n();
  return v10 & 1;
}

unint64_t sub_1D2C9F088()
{
  unint64_t result;

  result = qword_1EFCA0338;
  if (!qword_1EFCA0338)
  {
    result = MEMORY[0x1D8245F38](&protocol conformance descriptor for HE.RlweParams, &type metadata for HE.RlweParams);
    atomic_store(result, (unint64_t *)&qword_1EFCA0338);
  }
  return result;
}

uint64_t sub_1D2C9F0CC()
{
  return sub_1D2C9F1C8(&qword_1EFCA0340, &qword_1EFCA0348);
}

unint64_t sub_1D2C9F0F4()
{
  unint64_t result;

  result = qword_1ED9858F0;
  if (!qword_1ED9858F0)
  {
    result = MEMORY[0x1D8245F38](&protocol conformance descriptor for HE.SecurityLevel, &type metadata for HE.SecurityLevel);
    atomic_store(result, (unint64_t *)&qword_1ED9858F0);
  }
  return result;
}

uint64_t sub_1D2C9F138()
{
  return sub_1D2C9F1C8(&qword_1EFCA0350, &qword_1EFCA0358);
}

unint64_t sub_1D2C9F160()
{
  unint64_t result;

  result = qword_1EFCA0360;
  if (!qword_1EFCA0360)
  {
    result = MEMORY[0x1D8245F38](&protocol conformance descriptor for HE.Scheme, &type metadata for HE.Scheme);
    atomic_store(result, (unint64_t *)&qword_1EFCA0360);
  }
  return result;
}

uint64_t sub_1D2C9F1A4()
{
  return sub_1D2C9F1C8(&qword_1EFCA0368, &qword_1EFCA0370);
}

uint64_t sub_1D2C9F1C8(unint64_t *a1, uint64_t *a2)
{
  uint64_t result;
  uint64_t v4;

  result = *a1;
  if (!result)
  {
    v4 = __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    result = MEMORY[0x1D8245F38](MEMORY[0x1E0DEAF50], v4);
    atomic_store(result, a1);
  }
  return result;
}

_WORD *__swift_memcpy2_1(_WORD *result, _WORD *a2)
{
  *result = *a2;
  return result;
}

uint64_t _s16EncryptionParamsVwet(unsigned __int16 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFF)
    goto LABEL_17;
  if (a2 + 65281 <= 0xFFFEFFFF)
    v2 = 2;
  else
    v2 = 4;
  if (a2 + 65281 < 0xFF0000)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 16)) - 65281;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = a1[1];
      if (!a1[1])
        goto LABEL_17;
      return (*a1 | (v4 << 16)) - 65281;
    }
    v4 = *((unsigned __int8 *)a1 + 2);
    if (*((_BYTE *)a1 + 2))
      return (*a1 | (v4 << 16)) - 65281;
  }
LABEL_17:
  v6 = *((unsigned __int8 *)a1 + 1);
  v7 = v6 >= 2;
  v8 = v6 - 2;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t _s16EncryptionParamsVwst(_WORD *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 65281 <= 0xFFFEFFFF)
    v3 = 2;
  else
    v3 = 4;
  if (a3 + 65281 < 0xFF0000)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1D2C9F2F4 + 4 * byte_1D2CAF416[v4]))();
  *a1 = a2 - 255;
  return ((uint64_t (*)(void))((char *)sub_1D2C9F328 + 4 * byte_1D2CAF411[v4]))();
}

uint64_t sub_1D2C9F328(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 2) = v1;
  return result;
}

uint64_t sub_1D2C9F330(uint64_t result, int a2)
{
  *(_WORD *)(result + 2) = 0;
  if (a2)
    JUMPOUT(0x1D2C9F338);
  return result;
}

uint64_t sub_1D2C9F344(uint64_t result, int a2)
{
  *(_DWORD *)(result + 2) = 0;
  if (!a2)
    JUMPOUT(0x1D2C9F34CLL);
  *(_BYTE *)(result + 1) = a2 + 1;
  return result;
}

uint64_t sub_1D2C9F350(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 2) = v1;
  return result;
}

uint64_t sub_1D2C9F358(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 2) = v1;
  return result;
}

ValueMetadata *type metadata accessor for HE.EncryptionParams()
{
  return &type metadata for HE.EncryptionParams;
}

uint64_t _s10RlweParamsOwet(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xF0)
    goto LABEL_17;
  if (a2 + 16 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 16) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 16;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 16;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 16;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0x11;
  v8 = v6 - 17;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t _s10RlweParamsOwst(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 16 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 16) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF0)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xEF)
    return ((uint64_t (*)(void))((char *)&loc_1D2C9F450 + 4 * byte_1D2CAF420[v4]))();
  *a1 = a2 + 16;
  return ((uint64_t (*)(void))((char *)sub_1D2C9F484 + 4 * byte_1D2CAF41B[v4]))();
}

uint64_t sub_1D2C9F484(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1D2C9F48C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1D2C9F494);
  return result;
}

uint64_t sub_1D2C9F4A0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1D2C9F4A8);
  *(_BYTE *)result = a2 + 16;
  return result;
}

uint64_t sub_1D2C9F4AC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1D2C9F4B4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for HE.RlweParams()
{
  return &type metadata for HE.RlweParams;
}

ValueMetadata *type metadata accessor for HE.SecurityLevel()
{
  return &type metadata for HE.SecurityLevel;
}

uint64_t _s6SchemeOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1D2C9F534 + 4 * byte_1D2CAF42A[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1D2C9F568 + 4 * byte_1D2CAF425[v4]))();
}

uint64_t sub_1D2C9F568(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1D2C9F570(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1D2C9F578);
  return result;
}

uint64_t sub_1D2C9F584(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1D2C9F58CLL);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1D2C9F590(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1D2C9F598(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for HE.Scheme()
{
  return &type metadata for HE.Scheme;
}

unint64_t sub_1D2C9F5B4()
{
  unint64_t result;

  result = qword_1ED985900;
  if (!qword_1ED985900)
  {
    result = MEMORY[0x1D8245F38](&protocol conformance descriptor for HE.Scheme, &type metadata for HE.Scheme);
    atomic_store(result, (unint64_t *)&qword_1ED985900);
  }
  return result;
}

unint64_t sub_1D2C9F5F8()
{
  unint64_t result;

  result = qword_1ED9858F8;
  if (!qword_1ED9858F8)
  {
    result = MEMORY[0x1D8245F38](&protocol conformance descriptor for HE.SecurityLevel, &type metadata for HE.SecurityLevel);
    atomic_store(result, (unint64_t *)&qword_1ED9858F8);
  }
  return result;
}

unint64_t sub_1D2C9F63C()
{
  unint64_t result;

  result = qword_1ED9858E8;
  if (!qword_1ED9858E8)
  {
    result = MEMORY[0x1D8245F38](&protocol conformance descriptor for HE.RlweParams, &type metadata for HE.RlweParams);
    atomic_store(result, (unint64_t *)&qword_1ED9858E8);
  }
  return result;
}

uint64_t _s20SerializedCiphertextOwxx(uint64_t a1)
{
  return sub_1D2C4F4DC(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24));
}

uint64_t *_s20SerializedCiphertextOwcp(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v3 = *a2;
  v4 = a2[1];
  v5 = a2[2];
  v6 = a2[3];
  sub_1D2C4F494(*a2, v4, v5, v6);
  *a1 = v3;
  a1[1] = v4;
  a1[2] = v5;
  a1[3] = v6;
  return a1;
}

uint64_t *_s20SerializedCiphertextOwca(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;

  v3 = *a2;
  v4 = a2[1];
  v5 = a2[2];
  v6 = a2[3];
  sub_1D2C4F494(*a2, v4, v5, v6);
  v7 = *a1;
  v8 = a1[1];
  v9 = a1[2];
  v10 = a1[3];
  *a1 = v3;
  a1[1] = v4;
  a1[2] = v5;
  a1[3] = v6;
  sub_1D2C4F4DC(v7, v8, v9, v10);
  return a1;
}

uint64_t *_s20SerializedCiphertextOwta(uint64_t *a1, _OWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  __int128 v7;

  v3 = *a1;
  v5 = a1[1];
  v4 = a1[2];
  v6 = a1[3];
  v7 = a2[1];
  *(_OWORD *)a1 = *a2;
  *((_OWORD *)a1 + 1) = v7;
  sub_1D2C4F4DC(v3, v5, v4, v6);
  return a1;
}

uint64_t _s20SerializedCiphertextOwet(uint64_t a1, unsigned int a2)
{
  unsigned int v3;

  if (!a2)
    return 0;
  if (a2 >= 3 && *(_BYTE *)(a1 + 32))
    return (*(_DWORD *)a1 + 3);
  v3 = ((2 * ((*(_QWORD *)(a1 + 8) & 0x1000000000000000) != 0)) | ((*(_QWORD *)(a1 + 8) >> 60) >> 1) & 1) ^ 3;
  if (v3 >= 2)
    v3 = -1;
  return v3 + 1;
}

uint64_t _s20SerializedCiphertextOwst(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 2)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = a2 - 3;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 3)
      *(_BYTE *)(result + 32) = 1;
  }
  else
  {
    if (a3 >= 3)
      *(_BYTE *)(result + 32) = 0;
    if (a2)
    {
      *(_QWORD *)result = 0;
      *(_QWORD *)(result + 8) = (unint64_t)((2 * (a2 & 1)) | 1) << 60;
      *(_QWORD *)(result + 16) = 0;
      *(_QWORD *)(result + 24) = 0;
    }
  }
  return result;
}

uint64_t sub_1D2C9F82C(uint64_t a1)
{
  return (*(_QWORD *)(a1 + 8) >> 61) & 1;
}

uint64_t sub_1D2C9F838(uint64_t result)
{
  *(_QWORD *)(result + 8) &= ~0x2000000000000000uLL;
  return result;
}

uint64_t sub_1D2C9F848(uint64_t result, char a2)
{
  *(_QWORD *)(result + 8) = *(_QWORD *)(result + 8) & 0xCFFFFFFFFFFFFFFFLL | ((unint64_t)(a2 & 1) << 61);
  return result;
}

ValueMetadata *type metadata accessor for HE.SerializedCiphertext()
{
  return &type metadata for HE.SerializedCiphertext;
}

char *sub_1D2C9F870(_QWORD *(*a1)(_QWORD *__return_ptr, int *, uint64_t *), uint64_t a2, unint64_t a3)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int64_t v8;
  char *result;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  unint64_t v28;
  uint64_t v30;
  int v31;
  _QWORD v32[2];
  char v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  uint64_t v39;

  v4 = a3;
  v28 = HIDWORD(a3);
  if (HIDWORD(a3) < a3)
    v5 = -(uint64_t)(a3 - HIDWORD(a3));
  else
    v5 = (HIDWORD(a3) - a3);
  v6 = MEMORY[0x1E0DEE9D8];
  v7 = v5 + 1;
  if (v5 == -1)
    return (char *)v6;
  v39 = MEMORY[0x1E0DEE9D8];
  v8 = v7 & ~(v7 >> 63);
  result = sub_1D2C4DBA4(0, v8, 0);
  if (v5 >= -1)
  {
    v10 = 0;
    v6 = v39;
    while (v8)
    {
      if (v10)
        goto LABEL_23;
      v31 = v4;
      result = (char *)a1(v32, &v31, &v30);
      if (v3)
      {
        swift_release();
        return (char *)v6;
      }
      v11 = v32[0];
      v12 = v32[1];
      v13 = v33;
      v14 = v34;
      v15 = v35;
      v16 = v36;
      v17 = v37;
      v18 = v38;
      v20 = *(_QWORD *)(v6 + 16);
      v19 = *(_QWORD *)(v6 + 24);
      v39 = v6;
      if (v20 >= v19 >> 1)
      {
        v26 = v35;
        v27 = v34;
        v24 = v37;
        v25 = v36;
        v23 = v38;
        result = sub_1D2C4DBA4((char *)(v19 > 1), v20 + 1, 1);
        v18 = v23;
        v17 = v24;
        v16 = v25;
        v15 = v26;
        v14 = v27;
        v6 = v39;
      }
      *(_QWORD *)(v6 + 16) = v20 + 1;
      v21 = v6 + 104 * v20;
      *(_QWORD *)(v21 + 32) = v11;
      *(_QWORD *)(v21 + 40) = v12;
      *(_BYTE *)(v21 + 48) = v13;
      *(_OWORD *)(v21 + 56) = v14;
      *(_OWORD *)(v21 + 72) = v15;
      *(_OWORD *)(v21 + 88) = v16;
      *(_OWORD *)(v21 + 104) = v17;
      *(_OWORD *)(v21 + 120) = v18;
      v10 = v4 == (_DWORD)v28;
      if (v4 == (_DWORD)v28)
      {
        v4 = 0;
      }
      else if (__CFADD__(v4++, 1))
      {
        goto LABEL_21;
      }
      --v8;
      if (!--v7)
        return (char *)v6;
    }
    __break(1u);
LABEL_21:
    __break(1u);
  }
  __break(1u);
LABEL_23:
  __break(1u);
  return result;
}

uint64_t sub_1D2C9FA28@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, BOOL *a5@<X8>)
{
  uint64_t result;
  uint64_t v8;
  BOOL v9;

  result = a4 - a3;
  if (a3)
    v8 = a4 - a3;
  else
    v8 = 0;
  if (a1)
  {
    if (v8 == a2 - a1)
    {
      if (a3)
      {
        result = cc_cmp_safe();
        v9 = (_DWORD)result == 0;
LABEL_10:
        *a5 = v9;
        return result;
      }
      goto LABEL_12;
    }
LABEL_9:
    v9 = 0;
    goto LABEL_10;
  }
  if (v8)
    goto LABEL_9;
  if (!a3)
LABEL_12:
    __break(1u);
  __break(1u);
  return result;
}

uint64_t sub_1D2C9FAA0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  int v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  int v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t result;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  void (*v25)(uint64_t, _QWORD);
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  _QWORD v32[2];
  uint64_t v33;
  int v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;

  v38 = *MEMORY[0x1E0C80C00];
  v5 = sub_1D2CAA8E8();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_DWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_WORD *)(a2 + 16) = 1;
  *(_DWORD *)(a2 + 20) = 0;
  *(_BYTE *)(a2 + 24) = 0;
  *(_OWORD *)(a2 + 32) = xmmword_1D2CAD220;
  *(_BYTE *)(a2 + 48) = 0;
  *(_OWORD *)(a2 + 56) = xmmword_1D2CAD220;
  type metadata accessor for CryptoKitSecretSharing_HybridSecretSharingSharedState(0);
  sub_1D2CAA9E4();
  v37 = 0;
  v9 = ccss_sizeof_shamir_share_generator_serialization();
  v10 = v9;
  if (!v9)
  {
    v16 = 0xD00000000000003ALL;
    v17 = 0x80000001D2CB0930;
    v15 = -7;
    v18 = 49;
    goto LABEL_5;
  }
  v32[1] = v2;
  v33 = v6;
  v11 = swift_slowAlloc();
  v12 = v37;
  v13 = ccss_shamir_share_generator_serialize();
  if (v13)
  {
    v14 = v13;
    MEMORY[0x1D8245FD4](v11, -1, -1);
    v35 = 0;
    v36 = 0xE000000000000000;
    sub_1D2CAAFC0();
    sub_1D2CAAE70();
    v34 = v14;
    sub_1D2CAB0B0();
    sub_1D2CAAE70();
    swift_bridgeObjectRelease();
    v15 = 0;
    v16 = v35;
    v17 = v36;
    v18 = 56;
LABEL_5:
    sub_1D2C57500();
    swift_allocError();
    *(_BYTE *)v19 = 3;
    *(_DWORD *)(v19 + 4) = v15;
    *(_BYTE *)(v19 + 8) = v10;
    *(_DWORD *)(v19 + 12) = 0;
    *(_WORD *)(v19 + 16) = 256;
    *(_QWORD *)(v19 + 24) = v18;
    *(_QWORD *)(v19 + 32) = 0x293A5F2874696E69;
    *(_QWORD *)(v19 + 40) = 0xE800000000000000;
    *(_QWORD *)(v19 + 48) = 0xD00000000000006BLL;
    *(_QWORD *)(v19 + 56) = 0x80000001D2CB1D00;
    *(_QWORD *)(v19 + 64) = v16;
    *(_QWORD *)(v19 + 72) = v17;
    swift_willThrow();
    swift_release();
    return sub_1D2C74E48(a2, type metadata accessor for CryptoKitSecretSharing_HybridSecretSharingSharedState);
  }
  (*(void (**)(char *, _QWORD, uint64_t))(v33 + 104))(v8, *MEMORY[0x1E0CB00C0], v5);
  sub_1D2CAA8DC();
  if (v12)
  {
    sub_1D2CAA8A0();
    swift_allocObject();
    swift_retain();
    v21 = sub_1D2CAA84C();
    v22 = sub_1D2CA76E8(v21, v12);
    v24 = v23;
    swift_release();
  }
  else
  {
    v25 = (void (*)(uint64_t, _QWORD))sub_1D2CAA8DC();
    v25(v11, 0);
    swift_release();
    swift_release();
    v22 = 0;
    v24 = 0xC000000000000000;
  }
  (*(void (**)(char *, uint64_t))(v33 + 8))(v8, v5);
  *(_DWORD *)a2 = 1;
  *(_BYTE *)(a2 + 17) = *(_BYTE *)(a1 + 17);
  v26 = *(_QWORD *)(a1 + 32);
  *(_DWORD *)(a2 + 20) = *(_QWORD *)(a1 + 24);
  *(_BYTE *)(a2 + 24) = *(_BYTE *)(a1 + 16);
  v27 = *(_QWORD *)(a1 + 40);
  if (v27 >> 60 == 15)
    v28 = 0;
  else
    v28 = v26;
  if (v27 >> 60 == 15)
    v29 = 0xC000000000000000;
  else
    v29 = *(_QWORD *)(a1 + 40);
  v30 = *(_QWORD *)(a2 + 32);
  v31 = *(_QWORD *)(a2 + 40);
  sub_1D2C69B84(v26, v27);
  sub_1D2C45258(v30, v31);
  *(_QWORD *)(a2 + 32) = v28;
  *(_QWORD *)(a2 + 40) = v29;
  LOBYTE(v30) = *(_BYTE *)(a1 + 18);
  swift_release();
  *(_BYTE *)(a2 + 48) = v30;
  result = sub_1D2C45258(*(_QWORD *)(a2 + 56), *(_QWORD *)(a2 + 64));
  *(_QWORD *)(a2 + 56) = v22;
  *(_QWORD *)(a2 + 64) = v24;
  *(_QWORD *)(a2 + 8) = 0;
  *(_BYTE *)(a2 + 16) = 1;
  return result;
}

uint64_t sub_1D2C9FE7C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v14;
  void (*v15)(uint64_t, _QWORD, uint64_t, uint64_t);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t (*v19)(_QWORD);
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v29;
  uint64_t v30;
  void (*v31)(uint64_t, _QWORD, uint64_t, uint64_t);
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;

  v34 = a1;
  v3 = type metadata accessor for CryptoKitSecretSharing_HybridSecretSharingGeneratorSerialization.SealedBox(0);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v33 = (char *)&v29 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v32 = sub_1D2CAABE8();
  v30 = *(_QWORD *)(v32 - 8);
  MEMORY[0x1E0C80A78](v32);
  v29 = (char *)&v29 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for CryptoKitSecretSharing_HybridSecretSharingSharedState(0);
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7);
  v10 = (char *)&v29 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_OWORD *)(a2 + 8) = xmmword_1D2CAD220;
  v11 = type metadata accessor for CryptoKitSecretSharing_HybridSecretSharingGeneratorSerialization(0);
  sub_1D2CAA9E4();
  v12 = a2 + *(int *)(v11 + 28);
  v13 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v8 + 56);
  v13(v12, 1, 1, v7);
  v14 = a2 + *(int *)(v11 + 32);
  v15 = *(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v4 + 56);
  v16 = v34;
  v31 = v15;
  v15(v14, 1, 1, v3);
  *(_DWORD *)a2 = 1;
  v17 = swift_retain();
  v18 = v35;
  sub_1D2C9FAA0(v17, (uint64_t)v10);
  if (v18)
  {
    sub_1D2C74E48(v16, (uint64_t (*)(_QWORD))type metadata accessor for CKSecretSharing.HybridGenerator);
    v19 = type metadata accessor for CryptoKitSecretSharing_HybridSecretSharingGeneratorSerialization;
    v20 = a2;
  }
  else
  {
    sub_1D2C6F668(v12, &qword_1EFC9FF60);
    sub_1D2C78C98((uint64_t)v10, v12, type metadata accessor for CryptoKitSecretSharing_HybridSecretSharingSharedState);
    v13(v12, 0, 1, v7);
    v21 = type metadata accessor for CKSecretSharing.HybridGenerator();
    v22 = v29;
    v23 = v30;
    v24 = v32;
    v25 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v30 + 16))(v29, v16 + *(int *)(v21 + 20), v32);
    MEMORY[0x1E0C80A78](v25);
    *(&v29 - 2) = (char *)a2;
    sub_1D2CAABD0();
    v26 = (*(uint64_t (**)(char *, uint64_t))(v23 + 8))(v22, v24);
    MEMORY[0x1E0C80A78](v26);
    *(&v29 - 2) = (char *)v16;
    sub_1D2C5AE40(&qword_1EFC9FFE8, type metadata accessor for CryptoKitSecretSharing_HybridSecretSharingGeneratorSerialization.SealedBox, (uint64_t)&unk_1D2CAE28C);
    v27 = (uint64_t)v33;
    sub_1D2CAAAD4();
    sub_1D2C6F668(v14, &qword_1EFC9FF68);
    sub_1D2C78C98(v27, v14, type metadata accessor for CryptoKitSecretSharing_HybridSecretSharingGeneratorSerialization.SealedBox);
    v31(v14, 0, 1, v3);
    v20 = v16;
    v19 = (uint64_t (*)(_QWORD))type metadata accessor for CKSecretSharing.HybridGenerator;
  }
  return sub_1D2C74E48(v20, v19);
}

uint64_t sub_1D2CA01A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v4;
  _BYTE *v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD v16[5];

  v16[3] = MEMORY[0x1E0DEAC20];
  v16[4] = MEMORY[0x1E0CB1AA8];
  v16[0] = a1;
  v16[1] = a2;
  v4 = __swift_project_boxed_opaque_existential_1(v16, MEMORY[0x1E0DEAC20]);
  v5 = (_BYTE *)*v4;
  if (*v4 && (v6 = (_BYTE *)v4[1], v7 = v6 - v5, v6 != v5))
  {
    if (v7 <= 14)
    {
      v8 = sub_1D2CA7484(v5, v6);
      v9 = v14 & 0xFFFFFFFFFFFFFFLL;
    }
    else if ((unint64_t)v7 >= 0x7FFFFFFF)
    {
      v8 = sub_1D2CA7544((uint64_t)v5, (uint64_t)v6);
      v9 = v15 | 0x8000000000000000;
    }
    else
    {
      v8 = sub_1D2CA75BC((uint64_t)v5, (uint64_t)v6);
      v9 = v13 | 0x4000000000000000;
    }
  }
  else
  {
    v8 = 0;
    v9 = 0xC000000000000000;
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v16);
  v10 = *(_QWORD *)(a3 + 8);
  v11 = *(_QWORD *)(a3 + 16);
  *(_QWORD *)(a3 + 8) = v8;
  *(_QWORD *)(a3 + 16) = v9;
  return sub_1D2C45258(v10, v11);
}

uint64_t sub_1D2CA0278(uint64_t a1)
{
  uint64_t v2;
  uint64_t (*v3)(uint64_t);
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *boxed_opaque_existential_1;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;
  _QWORD v17[3];
  uint64_t v18[3];
  uint64_t v19;
  uint64_t v20;

  v2 = sub_1D2CAAC3C();
  v3 = (uint64_t (*)(uint64_t))MEMORY[0x1E0CA94F8];
  v4 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v6 = (char *)v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for CKSecretSharing.HybridGenerator();
  v7 = sub_1D2CAAC48();
  v9 = v8;
  sub_1D2C45258(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24));
  *(_QWORD *)(a1 + 16) = v7;
  *(_QWORD *)(a1 + 24) = v9;
  v10 = sub_1D2CAAC54();
  v12 = v11;
  sub_1D2C45258(*(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40));
  *(_QWORD *)(a1 + 32) = v10;
  *(_QWORD *)(a1 + 40) = v12;
  sub_1D2CAAC6C();
  v19 = v2;
  v20 = sub_1D2C5AE40(&qword_1EFCA0380, v3, MEMORY[0x1E0CA94D8]);
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v18);
  (*(void (**)(uint64_t *, char *, uint64_t))(v4 + 16))(boxed_opaque_existential_1, v6, v2);
  __swift_project_boxed_opaque_existential_1(v18, v19);
  sub_1D2CAA8AC();
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v2);
  v14 = v17[1];
  v15 = v17[2];
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v18);
  result = sub_1D2C45258(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
  *(_QWORD *)a1 = v14;
  *(_QWORD *)(a1 + 8) = v15;
  return result;
}

void sub_1D2CA03F0(int64_t a1, uint64_t a2, unint64_t a3, char a4, char a5, uint64_t a6, char a7)
{
  uint64_t v7;
  uint64_t v8;
  unint64_t v15;
  int64_t v16;
  int64_t v17;
  BOOL v18;
  char v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  char v29;
  unint64_t v30;
  unint64_t v31;
  int64_t v32;

  v8 = v7;
  *(_WORD *)(v8 + 16) = 257;
  *(_BYTE *)(v8 + 18) = 0;
  sub_1D2C44180(v8 + 48);
  sub_1D2C44180((uint64_t)&v30);
  v15 = a3;
  v16 = v30;
  v17 = v31;
  *(_BYTE *)(v8 + 16) = a4;
  *(_BYTE *)(v8 + 17) = a5;
  *(_QWORD *)(v8 + 24) = a1;
  *(_QWORD *)(v8 + 32) = a2;
  *(_QWORD *)(v8 + 40) = v15;
  if (v17 < v16)
  {
    __break(1u);
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  v18 = v16 > a1 || v17 < a1;
  v19 = v18;
  v29 = v19;
  if (v18)
  {
    v30 = 0;
    v31 = 0xE000000000000000;
    v20 = v15;
    sub_1D2C69B84(a2, v15);
    sub_1D2CAAFC0();
    swift_bridgeObjectRelease();
    v30 = 0xD000000000000016;
    v31 = 0x80000001D2CB0BC0;
    v32 = v16;
    sub_1D2CAB0B0();
    sub_1D2CAAE70();
    swift_bridgeObjectRelease();
    sub_1D2CAAE70();
    v32 = v17;
    sub_1D2CAB0B0();
    sub_1D2CAAE70();
    swift_bridgeObjectRelease();
    sub_1D2CAAE70();
    v21 = v30;
    v22 = v31;
    sub_1D2C57500();
    swift_allocError();
    v24 = 0;
    *(_BYTE *)v23 = 1;
    v25 = 141;
LABEL_17:
    *(_DWORD *)(v23 + 4) = v24;
    *(_BYTE *)(v23 + 8) = v29;
    *(_WORD *)(v23 + 16) = 256;
    *(_DWORD *)(v23 + 12) = 0;
    *(_QWORD *)(v23 + 24) = v25;
    *(_QWORD *)(v23 + 32) = 0xD00000000000007FLL;
    *(_QWORD *)(v23 + 40) = 0x80000001D2CB2470;
    *(_QWORD *)(v23 + 48) = 0xD00000000000006BLL;
    *(_QWORD *)(v23 + 56) = 0x80000001D2CB1D00;
    *(_QWORD *)(v23 + 64) = v21;
    *(_QWORD *)(v23 + 72) = v22;
    swift_willThrow();
    sub_1D2C6BAE4(a2, v20);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1D2C6BAE4(*(_QWORD *)(v8 + 32), *(_QWORD *)(v8 + 40));
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    type metadata accessor for CKSecretSharing.CKHybridSecretShareInternalState();
    swift_deallocPartialClassInstance();
    return;
  }
  if ((a7 & 1) == 0)
    *(_BYTE *)(v8 + 18) = 1;
  v20 = v15;
  sub_1D2C69B84(a2, v15);
  ccss_sizeof_parameters_fix();
  v26 = swift_slowAlloc();
  *(_QWORD *)(v8 + 144) = v26;
  if (a1 < 0)
    goto LABEL_20;
  if (HIDWORD(a1))
  {
LABEL_21:
    __break(1u);
    return;
  }
  v27 = v26;
  v28 = ccss_shamir_parameters_init();
  if (v28)
  {
    v24 = v28;
    MEMORY[0x1D8245FD4](v27, -1, -1);
    v30 = 0;
    v31 = 0xE000000000000000;
    sub_1D2CAAFC0();
    sub_1D2CAAE70();
    LODWORD(v32) = v24;
    sub_1D2CAB0B0();
    sub_1D2CAAE70();
    swift_bridgeObjectRelease();
    v21 = v30;
    v22 = v31;
    sub_1D2C57500();
    swift_allocError();
    *(_BYTE *)v23 = 3;
    v25 = 156;
    goto LABEL_17;
  }
  ccss_sizeof_share();
  *(_QWORD *)(v8 + 152) = swift_slowAlloc();
  ccss_sizeof_generator();
  *(_QWORD *)(v8 + 160) = swift_slowAlloc();
  ccss_shamir_share_init();
  sub_1D2C6BAE4(a2, v20);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
}

uint64_t sub_1D2CA07F4()
{
  _QWORD *v0;
  void *v1;

  MEMORY[0x1D8245FD4](v0[18], -1, -1);
  MEMORY[0x1D8245FD4](v0[19], -1, -1);
  v1 = (void *)v0[20];
  memset_s(v1, 8uLL, 0, 8uLL);
  MEMORY[0x1D8245FD4](v1, -1, -1);
  sub_1D2C6BAE4(v0[4], v0[5]);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t CKSecretSharing.HybridGenerator.init(threshold:secret:associatedData:includeADInShares:includeThresholdInShares:ciphersuite:insecureToChangeIncludeMessageEntropy:)@<X0>(int64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, unint64_t a5@<X4>, int a6@<W5>, int a7@<W6>, _QWORD *a8@<X8>, unsigned __int8 a9)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  char *v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int64_t v30;
  int64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  void *v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  _QWORD v47[8];
  uint64_t v48;
  int64_t v49;
  char *v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  _QWORD *v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  unsigned int v68;
  _QWORD v69[21];
  int64_t v70;
  uint64_t v71;
  unint64_t v72;
  unint64_t v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;

  v66 = a2;
  LODWORD(v64) = a7;
  LODWORD(v63) = a6;
  v67 = a3;
  v61 = a8;
  LODWORD(v62) = a9;
  v83 = *MEMORY[0x1E0C80C00];
  v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFCA0378);
  MEMORY[0x1E0C80A78](v12);
  v51 = (char *)v47 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_1D2CAAC78();
  v54 = *(_QWORD *)(v14 - 8);
  v55 = v14;
  MEMORY[0x1E0C80A78](v14);
  v50 = (char *)v47 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v58 = sub_1D2CAAC3C();
  v53 = *(_QWORD *)(v58 - 8);
  MEMORY[0x1E0C80A78](v58);
  v56 = (char *)v47 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = sub_1D2CAABE8();
  v59 = *(_QWORD *)(v17 - 8);
  v60 = v17;
  v18 = MEMORY[0x1E0C80A78](v17);
  v57 = (char *)v47 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = MEMORY[0x1E0C80A78](v18);
  v22 = (char *)v47 - v21;
  MEMORY[0x1E0C80A78](v20);
  v24 = (char *)v47 - v23;
  sub_1D2CAA990();
  type metadata accessor for CKSecretSharing.CKHybridSecretShareInternalState();
  swift_allocObject();
  sub_1D2C69B84(a4, a5);
  v25 = a5;
  v26 = v65;
  sub_1D2CA03F0(a1, a4, a5, v63, v64, v27, v62);
  if (v26)
  {
    sub_1D2C6BAE4(a4, a5);
    return sub_1D2C45258(v66, v67);
  }
  v48 = v28;
  v49 = a1;
  v47[5] = v24;
  v47[6] = v22;
  v52 = a4;
  *v61 = v28;
  sub_1D2C44180((uint64_t)&v73);
  v30 = v73;
  v31 = v74;
  v47[0] = v76;
  v32 = v78;
  v47[1] = v79;
  v47[2] = v75;
  v33 = v80;
  v47[3] = v81;
  v47[4] = v77;
  v62 = v82;
  if (v25 >> 60 != 15)
    __asm { BR              X10 }
  if (__OFADD__(4, 1))
  {
    __break(1u);
    goto LABEL_18;
  }
  v65 = 0;
  v71 = sub_1D2CA79BC(5);
  v72 = v34;
  if (qword_1ED985918 != -1)
LABEL_18:
    swift_once();
  v69[0] = off_1ED985910;
  v69[1] = off_1ED985910;
  if (v31 < v30)
  {
    __break(1u);
    JUMPOUT(0x1D2CA1E4CLL);
  }
  v63 = v25;
  v64 = v33;
  v47[7] = v32;
  if (v30 <= v49 && v31 >= v49)
  {
    v68 = bswap32(v49);
    swift_retain_n();
    v35 = sub_1D2C5D54C((uint64_t)&v68, (uint64_t)v69);
    v37 = v36;
    sub_1D2C5EDA4(v35, v36);
    sub_1D2C45258(v35, v37);
    if (v25 >> 60 != 15)
    {
      v38 = v52;
      v39 = v63;
      sub_1D2C45028(v52, v63);
      sub_1D2C5EDA4(v38, v39);
      sub_1D2C6BAE4(v38, v39);
    }
    if (*(_BYTE *)(v48 + 18))
      v40 = &unk_1E943EA58;
    else
      v40 = &unk_1E943EA30;
    v41 = sub_1D2C6783C((uint64_t)v40);
    v43 = v42;
    sub_1D2C45028(v41, v42);
    sub_1D2C5EDA4(v41, v43);
    sub_1D2C45258(v41, v43);
    sub_1D2C45258(v41, v43);
    __asm { BR              X10 }
  }
  v73 = 0;
  v74 = 0xE000000000000000;
  swift_retain_n();
  sub_1D2CAAFC0();
  swift_bridgeObjectRelease();
  v73 = 0xD000000000000016;
  v74 = 0x80000001D2CB0BC0;
  v70 = v30;
  sub_1D2CAB0B0();
  sub_1D2CAAE70();
  swift_bridgeObjectRelease();
  sub_1D2CAAE70();
  v70 = v31;
  sub_1D2CAB0B0();
  sub_1D2CAAE70();
  swift_bridgeObjectRelease();
  sub_1D2CAAE70();
  v44 = v73;
  v45 = v74;
  sub_1D2C57500();
  swift_allocError();
  *(_BYTE *)v46 = 1;
  *(_DWORD *)(v46 + 4) = 0;
  *(_BYTE *)(v46 + 8) = 1;
  *(_DWORD *)(v46 + 12) = 0;
  *(_WORD *)(v46 + 16) = 256;
  *(_OWORD *)(v46 + 24) = xmmword_1D2CAF9A0;
  *(_QWORD *)(v46 + 40) = 0x80000001D2CB1C70;
  *(_QWORD *)(v46 + 48) = 0xD00000000000006BLL;
  *(_QWORD *)(v46 + 56) = 0x80000001D2CB1D00;
  *(_QWORD *)(v46 + 64) = v44;
  *(_QWORD *)(v46 + 72) = v45;
  swift_willThrow();
  sub_1D2C6BAE4(v52, v63);
  sub_1D2C45258(v66, v67);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  sub_1D2C45258(v71, v72);
  return swift_release();
}

uint64_t type metadata accessor for CKSecretSharing.CKHybridSecretShareInternalState()
{
  return objc_opt_self();
}

uint64_t sub_1D2CA1F08()
{
  return sub_1D2CA6CB4();
}

uint64_t sub_1D2CA1F1C@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v3;

  v3 = a2 - result;
  if (!result)
    v3 = 0;
  *a3 = v3;
  return result;
}

uint64_t sub_1D2CA1F30@<X0>(uint64_t a1@<X0>, _DWORD *a2@<X8>)
{
  uint64_t result;

  if (!ccrng())
  {
    __break(1u);
LABEL_5:
    __break(1u);
  }
  if (!a1)
    goto LABEL_5;
  result = ccss_shamir_share_generator_init();
  *a2 = result;
  return result;
}

uint64_t CKSecretSharing.HybridGenerator.init(_:)@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  int *v70;
  unint64_t v71;
  uint64_t v73;
  int v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t (*v77)(char *, uint64_t, uint64_t);
  uint64_t v78;
  int v79;
  uint64_t v80;
  int v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  int v89;
  uint64_t v90;
  _DWORD *v91;
  unint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t (*v96)(uint64_t, uint64_t, uint64_t);
  uint64_t v97;
  char *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  char *v102;
  char *v103;
  char *v104;
  char *v105;
  uint64_t v106;
  char *v107;
  char *v108;
  uint64_t v109;
  char *v110;
  char *v111;
  char *v112;
  char *v113;
  char *v114;
  char *v115;
  char *v116;
  char *v117;
  char *v118;
  char *v119;
  char *v120;
  char *v121;
  char *v122;
  char *v123;
  char *v124;
  char *v125;
  char *v126;
  char *v127;
  char *v128;
  _DWORD *v129;
  uint64_t *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  unint64_t v137;
  int v138;
  __int128 v139;
  __int128 v140;
  uint64_t v141;

  v130 = a3;
  v101 = sub_1D2CAAC78();
  v100 = *(_QWORD *)(v101 - 8);
  MEMORY[0x1E0C80A78](v101);
  v107 = (char *)&v95 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v106 = sub_1D2CAAC3C();
  v109 = *(_QWORD *)(v106 - 8);
  v6 = MEMORY[0x1E0C80A78](v106);
  v108 = (char *)&v95 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v113 = (char *)&v95 - v8;
  v9 = type metadata accessor for CryptoKitSecretSharing_HybridSecretSharingGeneratorSerialization.SealedBox(0);
  v134 = *(_QWORD *)(v9 - 8);
  v135 = v9;
  v10 = MEMORY[0x1E0C80A78](v9);
  v126 = (char *)&v95 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = MEMORY[0x1E0C80A78](v10);
  v122 = (char *)&v95 - v13;
  v14 = MEMORY[0x1E0C80A78](v12);
  v118 = (char *)&v95 - v15;
  v16 = MEMORY[0x1E0C80A78](v14);
  v114 = (char *)&v95 - v17;
  v18 = MEMORY[0x1E0C80A78](v16);
  v105 = (char *)&v95 - v19;
  v20 = MEMORY[0x1E0C80A78](v18);
  v104 = (char *)&v95 - v21;
  v22 = MEMORY[0x1E0C80A78](v20);
  v112 = (char *)&v95 - v23;
  v24 = MEMORY[0x1E0C80A78](v22);
  v117 = (char *)&v95 - v25;
  v26 = MEMORY[0x1E0C80A78](v24);
  v121 = (char *)&v95 - v27;
  v28 = MEMORY[0x1E0C80A78](v26);
  v125 = (char *)&v95 - v29;
  MEMORY[0x1E0C80A78](v28);
  v128 = (char *)&v95 - v30;
  v133 = type metadata accessor for CryptoKitSecretSharing_HybridSecretSharingSharedState(0);
  v136 = *(_QWORD *)(v133 - 8);
  MEMORY[0x1E0C80A78](v133);
  v129 = (_DWORD *)((char *)&v95 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0));
  v32 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFC9FF68);
  v33 = MEMORY[0x1E0C80A78](v32);
  v132 = (uint64_t)&v95 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  v35 = MEMORY[0x1E0C80A78](v33);
  v124 = (char *)&v95 - v36;
  v37 = MEMORY[0x1E0C80A78](v35);
  v120 = (char *)&v95 - v38;
  v39 = MEMORY[0x1E0C80A78](v37);
  v116 = (char *)&v95 - v40;
  v41 = MEMORY[0x1E0C80A78](v39);
  v111 = (char *)&v95 - v42;
  v43 = MEMORY[0x1E0C80A78](v41);
  v103 = (char *)&v95 - v44;
  v45 = MEMORY[0x1E0C80A78](v43);
  v102 = (char *)&v95 - v46;
  v47 = MEMORY[0x1E0C80A78](v45);
  v110 = (char *)&v95 - v48;
  v49 = MEMORY[0x1E0C80A78](v47);
  v115 = (char *)&v95 - v50;
  v51 = MEMORY[0x1E0C80A78](v49);
  v119 = (char *)&v95 - v52;
  v53 = MEMORY[0x1E0C80A78](v51);
  v123 = (char *)&v95 - v54;
  v55 = MEMORY[0x1E0C80A78](v53);
  v127 = (char *)&v95 - v56;
  MEMORY[0x1E0C80A78](v55);
  v131 = (uint64_t)&v95 - v57;
  v58 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFC9FF60);
  v59 = MEMORY[0x1E0C80A78](v58);
  v61 = (char *)&v95 - ((v60 + 15) & 0xFFFFFFFFFFFFFFF0);
  v62 = MEMORY[0x1E0C80A78](v59);
  v64 = (char *)&v95 - v63;
  MEMORY[0x1E0C80A78](v62);
  v66 = (char *)&v95 - v65;
  v67 = sub_1D2CAAA08();
  MEMORY[0x1E0C80A78](v67);
  v68 = type metadata accessor for CryptoKitSecretSharing_HybridSecretSharingGeneratorSerialization(0);
  MEMORY[0x1E0C80A78](v68);
  v70 = (int *)((char *)&v95 - ((v69 + 15) & 0xFFFFFFFFFFFFFFF0));
  v141 = 0;
  v139 = 0u;
  v140 = 0u;
  sub_1D2C45028(a1, a2);
  sub_1D2CAA9FC();
  sub_1D2C5AE40(&qword_1EFCA0008, type metadata accessor for CryptoKitSecretSharing_HybridSecretSharingGeneratorSerialization, (uint64_t)&unk_1D2CAE42C);
  v71 = v137;
  sub_1D2CAAAA4();
  if (v71)
    return sub_1D2C45258(a1, a2);
  v98 = v61;
  v73 = v136;
  v99 = a1;
  v137 = a2;
  v74 = *v70;
  v75 = (uint64_t)v70;
  if (*v70 == 1)
  {
    v97 = 0;
    v76 = (uint64_t)v70 + *(int *)(v68 + 28);
    sub_1D2C78C54(v76, (uint64_t)v66, &qword_1EFC9FF60);
    v77 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v73 + 48);
    v78 = v133;
    v79 = v77(v66, 1, v133);
    sub_1D2C6F668((uint64_t)v66, &qword_1EFC9FF60);
    if (v79 != 1)
    {
      v136 = v75 + *(int *)(v68 + 32);
      v80 = v131;
      sub_1D2C78C54(v136, v131, &qword_1EFC9FF68);
      v96 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v134 + 48);
      v81 = v96(v80, 1, v135);
      sub_1D2C6F668(v80, &qword_1EFC9FF68);
      if (v81 != 1)
      {
        sub_1D2C78C54(v76, (uint64_t)v64, &qword_1EFC9FF60);
        v89 = v77(v64, 1, v78);
        v90 = v97;
        v91 = v129;
        if (v89 == 1)
        {
          *v129 = 0;
          *((_QWORD *)v91 + 1) = 0;
          *((_WORD *)v91 + 8) = 1;
          v91[5] = 0;
          *((_BYTE *)v91 + 24) = 0;
          *((_OWORD *)v91 + 2) = xmmword_1D2CAD220;
          *((_BYTE *)v91 + 48) = 0;
          *(_OWORD *)(v91 + 14) = xmmword_1D2CAD220;
          sub_1D2CAA9E4();
          sub_1D2C6F668((uint64_t)v64, &qword_1EFC9FF60);
        }
        else
        {
          sub_1D2C78C98((uint64_t)v64, (uint64_t)v129, type metadata accessor for CryptoKitSecretSharing_HybridSecretSharingSharedState);
        }
        v92 = v137;
        v93 = sub_1D2CA7D80((uint64_t)v91);
        if (!v90)
        {
          *v130 = v93;
          v94 = *(_QWORD *)(v75 + 16);
          v134 = v75;
          __asm { BR              X9 }
        }
        sub_1D2C59684(v75 + 8);
        v87 = v99;
        v88 = v92;
        goto LABEL_9;
      }
    }
    *(_QWORD *)&v139 = 0;
    *((_QWORD *)&v139 + 1) = 0xE000000000000000;
    sub_1D2CAAFC0();
    sub_1D2CAAE70();
    v82 = (uint64_t)v98;
    sub_1D2C78C54(v76, (uint64_t)v98, &qword_1EFC9FF60);
    v77((char *)v82, 1, v78);
    sub_1D2C6F668(v82, &qword_1EFC9FF60);
    sub_1D2CAAE70();
    swift_bridgeObjectRelease();
    sub_1D2CAAE70();
    v83 = v132;
    sub_1D2C78C54(v75 + *(int *)(v68 + 32), v132, &qword_1EFC9FF68);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v134 + 48))(v83, 1, v135);
    sub_1D2C6F668(v83, &qword_1EFC9FF68);
    sub_1D2CAAE70();
    swift_bridgeObjectRelease();
    v85 = *((_QWORD *)&v139 + 1);
    v84 = v139;
    sub_1D2C57500();
    swift_allocError();
    *(_BYTE *)v86 = 17;
    *(_DWORD *)(v86 + 4) = 0;
    *(_BYTE *)(v86 + 8) = 1;
    *(_DWORD *)(v86 + 12) = 0;
    *(_WORD *)(v86 + 16) = 256;
    *(_OWORD *)(v86 + 24) = xmmword_1D2CAFA20;
    *(_QWORD *)(v86 + 40) = 0xE800000000000000;
    *(_QWORD *)(v86 + 48) = 0xD00000000000006BLL;
  }
  else
  {
    *(_QWORD *)&v139 = 0;
    *((_QWORD *)&v139 + 1) = 0xE000000000000000;
    sub_1D2CAAFC0();
    sub_1D2CAAE70();
    v138 = v74;
    sub_1D2CAB0B0();
    sub_1D2CAAE70();
    swift_bridgeObjectRelease();
    v85 = *((_QWORD *)&v139 + 1);
    v84 = v139;
    sub_1D2C57500();
    swift_allocError();
    *(_BYTE *)v86 = 17;
    *(_DWORD *)(v86 + 4) = 0;
    *(_BYTE *)(v86 + 8) = 1;
    *(_DWORD *)(v86 + 12) = 0;
    *(_WORD *)(v86 + 16) = 256;
    *(_OWORD *)(v86 + 24) = xmmword_1D2CAF9B0;
    *(_QWORD *)(v86 + 40) = 0xE800000000000000;
    *(_QWORD *)(v86 + 48) = 0xD00000000000006BLL;
  }
  *(_QWORD *)(v86 + 56) = 0x80000001D2CB1D00;
  *(_QWORD *)(v86 + 64) = v84;
  *(_QWORD *)(v86 + 72) = v85;
  swift_willThrow();
  sub_1D2C59684(v75 + 8);
  v87 = v99;
  v88 = v137;
LABEL_9:
  sub_1D2C45258(v87, v88);
  return sub_1D2C74E48(v75, type metadata accessor for CryptoKitSecretSharing_HybridSecretSharingGeneratorSerialization);
}

uint64_t sub_1D2CA2ABC()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v6 = *(_QWORD *)(v0 + 72);
  *(_QWORD *)(v5 - 192) = v6;
  if (BYTE6(v2) == v6)
  {
    *(_QWORD *)(v5 - 480) = v1;
    *(_QWORD *)(v5 - 128) = v3;
    *(_QWORD *)(v5 - 120) = v2;
    v7 = v0;
    *(_QWORD *)(v5 - 208) = type metadata accessor for CKSecretSharing.HybridGenerator();
    *(_QWORD *)(v5 - 200) = v7;
    swift_retain();
    sub_1D2C45028(v3, v2);
    sub_1D2CAABDC();
    v8 = *(_QWORD *)(v5 - 240);
    sub_1D2C78C54(*(_QWORD *)(v5 - 168), v8, &qword_1EFC9FF68);
    if ((*(unsigned int (**)(uint64_t, uint64_t, _QWORD))(v5 - 488))(v8, 1, *(_QWORD *)(v5 - 176)) == 1)
    {
      v9 = *(_QWORD *)(v5 - 232);
      *(_OWORD *)v9 = xmmword_1D2CAD220;
      *(_OWORD *)(v9 + 16) = xmmword_1D2CAD220;
      *(_OWORD *)(v9 + 32) = xmmword_1D2CAD220;
      sub_1D2CAA9E4();
      v10 = sub_1D2C6F668(v8, &qword_1EFC9FF68);
    }
    else
    {
      v9 = *(_QWORD *)(v5 - 232);
      v10 = sub_1D2C78C98(v8, v9, type metadata accessor for CryptoKitSecretSharing_HybridSecretSharingGeneratorSerialization.SealedBox);
    }
    return ((uint64_t (*)(uint64_t))((char *)&loc_1D2CA2C50
                                            + *((int *)qword_1D2CA3E30 + (*(_QWORD *)(v9 + 8) >> 62))))(v10);
  }
  else
  {
    *(_QWORD *)(v5 - 128) = 0;
    *(_QWORD *)(v5 - 120) = 0xE000000000000000;
    sub_1D2CAAFC0();
    v11 = *(_QWORD *)(v5 - 120);
    *(_QWORD *)(v5 - 128) = *(_QWORD *)(v5 - 128);
    *(_QWORD *)(v5 - 120) = v11;
    v12 = sub_1D2CAAE70();
    return ((uint64_t (*)(uint64_t))((char *)&loc_1D2CA2C0C + *((int *)qword_1D2CA3E20 + v4)))(v12);
  }
}

uint64_t sub_1D2CA2C60()
{
  uint64_t v0;
  uint64_t v1;
  unsigned int (*v2)(uint64_t, uint64_t, uint64_t);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v5 = BYTE6(v0);
  v6 = *(_QWORD *)(*(_QWORD *)(v4 - 200) + 88);
  sub_1D2C74E48(*(_QWORD *)(v4 - 232), type metadata accessor for CryptoKitSecretSharing_HybridSecretSharingGeneratorSerialization.SealedBox);
  if (v5 == v6)
  {
    v7 = *(_QWORD *)(v4 - 272);
    sub_1D2C78C54(v3, v7, &qword_1EFC9FF68);
    if (v2(v7, 1, v1) == 1)
    {
      v8 = *(_QWORD *)(v4 - 256);
      *(_OWORD *)v8 = xmmword_1D2CAD220;
      *(_OWORD *)(v8 + 16) = xmmword_1D2CAD220;
      *(_OWORD *)(v8 + 32) = xmmword_1D2CAD220;
      sub_1D2CAA9E4();
      v9 = sub_1D2C6F668(v7, &qword_1EFC9FF68);
    }
    else
    {
      v8 = *(_QWORD *)(v4 - 256);
      v9 = sub_1D2C78C98(v7, v8, type metadata accessor for CryptoKitSecretSharing_HybridSecretSharingGeneratorSerialization.SealedBox);
    }
    return ((uint64_t (*)(uint64_t))((char *)&loc_1D2CA2EAC
                                            + *((int *)qword_1D2CA3E50 + (*(_QWORD *)(v8 + 8) >> 62))))(v9);
  }
  else
  {
    *(_QWORD *)(v4 - 128) = 0;
    *(_QWORD *)(v4 - 120) = 0xE000000000000000;
    sub_1D2CAAFC0();
    v10 = *(_QWORD *)(v4 - 120);
    *(_QWORD *)(v4 - 128) = *(_QWORD *)(v4 - 128);
    *(_QWORD *)(v4 - 120) = v10;
    sub_1D2CAAE70();
    v11 = *(_QWORD *)(v4 - 264);
    sub_1D2C78C54(v3, v11, &qword_1EFC9FF68);
    if (v2(v11, 1, v1) == 1)
    {
      v12 = *(_QWORD *)(v4 - 248);
      *(_OWORD *)v12 = xmmword_1D2CAD220;
      *(_OWORD *)(v12 + 16) = xmmword_1D2CAD220;
      *(_OWORD *)(v12 + 32) = xmmword_1D2CAD220;
      sub_1D2CAA9E4();
      v13 = sub_1D2C6F668(v11, &qword_1EFC9FF68);
    }
    else
    {
      v12 = *(_QWORD *)(v4 - 248);
      v13 = sub_1D2C78C98(v11, v12, type metadata accessor for CryptoKitSecretSharing_HybridSecretSharingGeneratorSerialization.SealedBox);
    }
    return ((uint64_t (*)(uint64_t))((char *)&loc_1D2CA2EF4
                                            + *((int *)qword_1D2CA3E40 + (*(_QWORD *)(v12 + 8) >> 62))))(v13);
  }
}

uint64_t sub_1D2CA2EBC()
{
  uint64_t v0;
  uint64_t v1;
  unsigned int (*v2)(uint64_t, uint64_t, uint64_t);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v5 = BYTE6(v0);
  v6 = *(_QWORD *)(*(_QWORD *)(v4 - 200) + 88);
  sub_1D2C74E48(*(_QWORD *)(v4 - 256), type metadata accessor for CryptoKitSecretSharing_HybridSecretSharingGeneratorSerialization.SealedBox);
  if (v5 == v6)
  {
    v7 = *(_QWORD *)(v4 - 304);
    sub_1D2C78C54(v3, v7, &qword_1EFC9FF68);
    if (v2(v7, 1, v1) == 1)
    {
      v8 = *(_QWORD *)(v4 - 288);
      *(_OWORD *)v8 = xmmword_1D2CAD220;
      *(_OWORD *)(v8 + 16) = xmmword_1D2CAD220;
      *(_OWORD *)(v8 + 32) = xmmword_1D2CAD220;
      sub_1D2CAA9E4();
      v9 = sub_1D2C6F668(v7, &qword_1EFC9FF68);
    }
    else
    {
      v8 = *(_QWORD *)(v4 - 288);
      v9 = sub_1D2C78C98(v7, v8, type metadata accessor for CryptoKitSecretSharing_HybridSecretSharingGeneratorSerialization.SealedBox);
    }
    return ((uint64_t (*)(uint64_t))((char *)&loc_1D2CA31A0
                                            + *((int *)qword_1D2CA3E70 + (*(_QWORD *)(v8 + 40) >> 62))))(v9);
  }
  else
  {
    *(_QWORD *)(v4 - 128) = 0;
    *(_QWORD *)(v4 - 120) = 0xE000000000000000;
    sub_1D2CAAFC0();
    v10 = *(_QWORD *)(v4 - 120);
    *(_QWORD *)(v4 - 128) = *(_QWORD *)(v4 - 128);
    *(_QWORD *)(v4 - 120) = v10;
    sub_1D2CAAE70();
    v11 = *(_QWORD *)(v4 - 296);
    sub_1D2C78C54(v3, v11, &qword_1EFC9FF68);
    if (v2(v11, 1, v1) == 1)
    {
      v12 = *(_QWORD *)(v4 - 280);
      *(_OWORD *)v12 = xmmword_1D2CAD220;
      *(_OWORD *)(v12 + 16) = xmmword_1D2CAD220;
      *(_OWORD *)(v12 + 32) = xmmword_1D2CAD220;
      sub_1D2CAA9E4();
      v13 = sub_1D2C6F668(v11, &qword_1EFC9FF68);
    }
    else
    {
      v12 = *(_QWORD *)(v4 - 280);
      v13 = sub_1D2C78C98(v11, v12, type metadata accessor for CryptoKitSecretSharing_HybridSecretSharingGeneratorSerialization.SealedBox);
    }
    return ((uint64_t (*)(uint64_t))((char *)&loc_1D2CA31EC
                                            + *((int *)qword_1D2CA3E60 + (*(_QWORD *)(v12 + 8) >> 62))))(v13);
  }
}

void sub_1D2CA2F04()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)(v2 - 152) = BYTE6(v0);
  sub_1D2CAB0B0();
  sub_1D2CAAE70();
  swift_bridgeObjectRelease();
  sub_1D2C74E48(*(_QWORD *)(v2 - 248), type metadata accessor for CryptoKitSecretSharing_HybridSecretSharingGeneratorSerialization.SealedBox);
  sub_1D2CAAE70();
  v3 = *(_QWORD *)(*(_QWORD *)(v2 - 200) + 88);
  swift_release();
  *(_QWORD *)(v2 - 152) = v3;
  sub_1D2CAB0B0();
  sub_1D2CAAE70();
  swift_bridgeObjectRelease();
  sub_1D2C57500();
  swift_allocError();
  *(_BYTE *)v4 = 17;
  *(_DWORD *)(v4 + 4) = 0;
  *(_BYTE *)(v4 + 8) = 1;
  *(_DWORD *)(v4 + 12) = 0;
  *(_WORD *)(v4 + 16) = 256;
  *(_OWORD *)(v4 + 24) = xmmword_1D2CAF9D0;
  *(_QWORD *)(v4 + 40) = 0xE800000000000000;
  *(_QWORD *)(v4 + 48) = v1;
  JUMPOUT(0x1D2CA3A00);
}

uint64_t sub_1D2CA31B0()
{
  uint64_t v0;
  uint64_t v1;
  unsigned int (*v2)(uint64_t, uint64_t, uint64_t);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v5 = BYTE6(v0);
  v6 = *(_QWORD *)(*(_QWORD *)(v4 - 200) + 96);
  sub_1D2C74E48(*(_QWORD *)(v4 - 288), type metadata accessor for CryptoKitSecretSharing_HybridSecretSharingGeneratorSerialization.SealedBox);
  if (v5 == v6)
  {
    v7 = *(_QWORD *)(v4 - 336);
    sub_1D2C78C54(v3, v7, &qword_1EFC9FF68);
    if (v2(v7, 1, v1) == 1)
    {
      v8 = *(_QWORD *)(v4 - 320);
      *(_OWORD *)v8 = xmmword_1D2CAD220;
      *(_OWORD *)(v8 + 16) = xmmword_1D2CAD220;
      *(_OWORD *)(v8 + 32) = xmmword_1D2CAD220;
      sub_1D2CAA9E4();
      v9 = sub_1D2C6F668(v7, &qword_1EFC9FF68);
    }
    else
    {
      v8 = *(_QWORD *)(v4 - 320);
      v9 = sub_1D2C78C98(v7, v8, type metadata accessor for CryptoKitSecretSharing_HybridSecretSharingGeneratorSerialization.SealedBox);
    }
    return ((uint64_t (*)(uint64_t))((char *)&loc_1D2CA34A0
                                            + *((int *)qword_1D2CA3E90 + (*(_QWORD *)(v8 + 40) >> 62))))(v9);
  }
  else
  {
    *(_QWORD *)(v4 - 128) = 0;
    *(_QWORD *)(v4 - 120) = 0xE000000000000000;
    sub_1D2CAAFC0();
    v10 = *(_QWORD *)(v4 - 120);
    *(_QWORD *)(v4 - 128) = *(_QWORD *)(v4 - 128);
    *(_QWORD *)(v4 - 120) = v10;
    sub_1D2CAAE70();
    v11 = *(_QWORD *)(v4 - 328);
    sub_1D2C78C54(v3, v11, &qword_1EFC9FF68);
    if (v2(v11, 1, v1) == 1)
    {
      v12 = *(_QWORD *)(v4 - 312);
      *(_OWORD *)v12 = xmmword_1D2CAD220;
      *(_OWORD *)(v12 + 16) = xmmword_1D2CAD220;
      *(_OWORD *)(v12 + 32) = xmmword_1D2CAD220;
      sub_1D2CAA9E4();
      v13 = sub_1D2C6F668(v11, &qword_1EFC9FF68);
    }
    else
    {
      v12 = *(_QWORD *)(v4 - 312);
      v13 = sub_1D2C78C98(v11, v12, type metadata accessor for CryptoKitSecretSharing_HybridSecretSharingGeneratorSerialization.SealedBox);
    }
    return ((uint64_t (*)(uint64_t))((char *)&loc_1D2CA34EC
                                            + *((int *)qword_1D2CA3E80 + (*(_QWORD *)(v12 + 40) >> 62))))(v13);
  }
}

void sub_1D2CA31FC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)(v2 - 152) = BYTE6(v0);
  sub_1D2CAB0B0();
  sub_1D2CAAE70();
  swift_bridgeObjectRelease();
  sub_1D2C74E48(*(_QWORD *)(v2 - 280), type metadata accessor for CryptoKitSecretSharing_HybridSecretSharingGeneratorSerialization.SealedBox);
  sub_1D2CAAE70();
  v3 = *(_QWORD *)(*(_QWORD *)(v2 - 200) + 88);
  swift_release();
  *(_QWORD *)(v2 - 152) = v3;
  sub_1D2CAB0B0();
  sub_1D2CAAE70();
  swift_bridgeObjectRelease();
  sub_1D2C57500();
  swift_allocError();
  *(_BYTE *)v4 = 17;
  *(_DWORD *)(v4 + 4) = 0;
  *(_BYTE *)(v4 + 8) = 1;
  *(_DWORD *)(v4 + 12) = 0;
  *(_WORD *)(v4 + 16) = 256;
  *(_OWORD *)(v4 + 24) = xmmword_1D2CAF9E0;
  *(_QWORD *)(v4 + 40) = 0xE800000000000000;
  *(_QWORD *)(v4 + 48) = v1;
  JUMPOUT(0x1D2CA3A00);
}

uint64_t sub_1D2CA34B0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unsigned int (*v3)(uint64_t, uint64_t, uint64_t);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _OWORD *v23;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  id v34;
  id v35;
  int v36;
  int v37;
  uint64_t v38;
  uint64_t v39;

  v6 = BYTE6(v0);
  v7 = *(_QWORD *)(*(_QWORD *)(v5 - 200) + 96);
  sub_1D2C74E48(*(_QWORD *)(v5 - 320), type metadata accessor for CryptoKitSecretSharing_HybridSecretSharingGeneratorSerialization.SealedBox);
  if (v6 == v7)
  {
    *(_QWORD *)(v5 - 192) = v2;
    swift_release();
    v8 = *(_QWORD *)(v5 - 168);
    v9 = *(_QWORD *)(v5 - 376);
    sub_1D2C78C54(v8, v9, &qword_1EFC9FF68);
    if (v3(v9, 1, v1) == 1)
    {
      v10 = *(_QWORD *)(v5 - 360);
      *(_OWORD *)v10 = xmmword_1D2CAD220;
      *(_OWORD *)(v10 + 16) = xmmword_1D2CAD220;
      *(_OWORD *)(v10 + 32) = xmmword_1D2CAD220;
      sub_1D2CAA9E4();
      sub_1D2C6F668(v9, &qword_1EFC9FF68);
    }
    else
    {
      v10 = *(_QWORD *)(v5 - 360);
      sub_1D2C78C98(v9, v10, type metadata accessor for CryptoKitSecretSharing_HybridSecretSharingGeneratorSerialization.SealedBox);
    }
    v15 = *(_QWORD *)(v5 - 352);
    v16 = *(_QWORD *)v10;
    v17 = *(_QWORD *)(v10 + 8);
    sub_1D2C45028(*(_QWORD *)v10, v17);
    sub_1D2C74E48(v10, type metadata accessor for CryptoKitSecretSharing_HybridSecretSharingGeneratorSerialization.SealedBox);
    *(_QWORD *)(v5 - 128) = v16;
    *(_QWORD *)(v5 - 120) = v17;
    sub_1D2C6F624();
    v18 = *(void **)(v5 - 480);
    sub_1D2CAAC30();
    if (!v18)
    {
      v19 = v8;
      v20 = *(_QWORD *)(v5 - 408);
      (*(void (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)(v5 - 384) + 16))(*(_QWORD *)(v5 - 392), v15, v20);
      v21 = v19;
      v22 = *(_QWORD *)(v5 - 440);
      sub_1D2C78C54(v21, v22, &qword_1EFC9FF68);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 - 488))(v22, 1, v1) == 1)
      {
        v23 = *(_OWORD **)(v5 - 424);
        *v23 = xmmword_1D2CAD220;
        v23[1] = xmmword_1D2CAD220;
        v23[2] = xmmword_1D2CAD220;
        sub_1D2CAA9E4();
        sub_1D2C6F668(v22, &qword_1EFC9FF68);
      }
      else
      {
        v23 = *(_OWORD **)(v5 - 424);
        sub_1D2C78C98(v22, (uint64_t)v23, type metadata accessor for CryptoKitSecretSharing_HybridSecretSharingGeneratorSerialization.SealedBox);
      }
      v25 = (uint64_t)v23;
      v26 = *((_QWORD *)v23 + 2);
      v27 = *(_QWORD *)(v25 + 24);
      sub_1D2C45028(v26, v27);
      sub_1D2C74E48(v25, type metadata accessor for CryptoKitSecretSharing_HybridSecretSharingGeneratorSerialization.SealedBox);
      *(_QWORD *)(v5 - 128) = v26;
      *(_QWORD *)(v5 - 120) = v27;
      v28 = *(_QWORD *)(v5 - 432);
      sub_1D2C78C54(*(_QWORD *)(v5 - 168), v28, &qword_1EFC9FF68);
      if ((*(unsigned int (**)(uint64_t, uint64_t, _QWORD))(v5 - 488))(v28, 1, *(_QWORD *)(v5 - 176)) == 1)
      {
        v29 = *(_QWORD *)(v5 - 416);
        *(_OWORD *)v29 = xmmword_1D2CAD220;
        *(_OWORD *)(v29 + 16) = xmmword_1D2CAD220;
        *(_OWORD *)(v29 + 32) = xmmword_1D2CAD220;
        sub_1D2CAA9E4();
        sub_1D2C6F668(v28, &qword_1EFC9FF68);
      }
      else
      {
        v29 = *(_QWORD *)(v5 - 416);
        sub_1D2C78C98(v28, v29, type metadata accessor for CryptoKitSecretSharing_HybridSecretSharingGeneratorSerialization.SealedBox);
      }
      v30 = *(_QWORD *)(v5 - 384);
      v31 = *(_QWORD *)(v29 + 32);
      v32 = *(_QWORD *)(v29 + 40);
      sub_1D2C45028(v31, v32);
      sub_1D2C74E48(v29, type metadata accessor for CryptoKitSecretSharing_HybridSecretSharingGeneratorSerialization.SealedBox);
      *(_QWORD *)(v5 - 152) = v31;
      *(_QWORD *)(v5 - 144) = v32;
      v33 = *(_QWORD *)(v5 - 400);
      sub_1D2CAAC60();
      (*(void (**)(_QWORD, uint64_t))(v30 + 8))(*(_QWORD *)(v5 - 352), v20);
      (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v5 - 456) + 32))(v4 + *(int *)(*(_QWORD *)(v5 - 208) + 24), v33, *(_QWORD *)(v5 - 448));
      sub_1D2C59684(*(_QWORD *)(v5 - 192));
      sub_1D2C45258(*(_QWORD *)(v5 - 464), *(_QWORD *)(v5 - 160));
      JUMPOUT(0x1D2CA2988);
    }
    *(_QWORD *)(v5 - 128) = v18;
    v34 = v18;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EFC9FC88);
    if (swift_dynamicCast())
    {
      *(_QWORD *)(v5 - 152) = v18;
      v35 = v18;
      swift_dynamicCast();
      v36 = *(_DWORD *)(v5 - 136);
      v37 = *(unsigned __int8 *)(v5 - 132);
      sub_1D2C57500();
      swift_allocError();
      *(_BYTE *)v38 = 17;
      *(_DWORD *)(v38 + 4) = 0;
      *(_BYTE *)(v38 + 8) = 1;
      *(_BYTE *)(v38 + 16) = v37 != 0;
      *(_DWORD *)(v38 + 12) = v36;
      *(_BYTE *)(v38 + 17) = 0;
      *(_OWORD *)(v38 + 24) = xmmword_1D2CAFA10;
      *(_QWORD *)(v38 + 40) = 0xE800000000000000;
      *(_QWORD *)(v38 + 48) = 0xD00000000000006BLL;
      *(_QWORD *)(v38 + 56) = 0x80000001D2CB1D00;
      *(_QWORD *)(v38 + 64) = 0xD00000000000002CLL;
      *(_QWORD *)(v38 + 72) = 0x80000001D2CB1FA0;
      swift_willThrow();

    }
    else
    {

      swift_willThrow();
    }
    v39 = *(_QWORD *)(v5 - 184);
    sub_1D2C59684(*(_QWORD *)(v5 - 192));
    sub_1D2C45258(*(_QWORD *)(v5 - 464), *(_QWORD *)(v5 - 160));
    sub_1D2C74E48(v39, type metadata accessor for CryptoKitSecretSharing_HybridSecretSharingGeneratorSerialization);
    swift_release();
    JUMPOUT(0x1D2CA3A5CLL);
  }
  *(_QWORD *)(v5 - 128) = 0;
  *(_QWORD *)(v5 - 120) = 0xE000000000000000;
  sub_1D2CAAFC0();
  v11 = *(_QWORD *)(v5 - 120);
  *(_QWORD *)(v5 - 128) = *(_QWORD *)(v5 - 128);
  *(_QWORD *)(v5 - 120) = v11;
  sub_1D2CAAE70();
  v12 = *(_QWORD *)(v5 - 368);
  sub_1D2C78C54(*(_QWORD *)(v5 - 168), v12, &qword_1EFC9FF68);
  if (v3(v12, 1, v1) == 1)
  {
    v13 = *(_QWORD *)(v5 - 344);
    *(_OWORD *)v13 = xmmword_1D2CAD220;
    *(_OWORD *)(v13 + 16) = xmmword_1D2CAD220;
    *(_OWORD *)(v13 + 32) = xmmword_1D2CAD220;
    sub_1D2CAA9E4();
    v14 = sub_1D2C6F668(v12, &qword_1EFC9FF68);
  }
  else
  {
    v13 = *(_QWORD *)(v5 - 344);
    v14 = sub_1D2C78C98(v12, v13, type metadata accessor for CryptoKitSecretSharing_HybridSecretSharingGeneratorSerialization.SealedBox);
  }
  return ((uint64_t (*)(uint64_t))((char *)&loc_1D2CA38C8
                                          + *((int *)qword_1D2CA3EA0 + (*(_QWORD *)(v13 + 40) >> 62))))(v14);
}

void sub_1D2CA34FC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)(v2 - 152) = BYTE6(v0);
  sub_1D2CAB0B0();
  sub_1D2CAAE70();
  swift_bridgeObjectRelease();
  sub_1D2C74E48(*(_QWORD *)(v2 - 312), type metadata accessor for CryptoKitSecretSharing_HybridSecretSharingGeneratorSerialization.SealedBox);
  sub_1D2CAAE70();
  v3 = *(_QWORD *)(*(_QWORD *)(v2 - 200) + 96);
  swift_release();
  *(_QWORD *)(v2 - 152) = v3;
  sub_1D2CAB0B0();
  sub_1D2CAAE70();
  swift_bridgeObjectRelease();
  sub_1D2C57500();
  swift_allocError();
  *(_BYTE *)v4 = 17;
  *(_DWORD *)(v4 + 4) = 0;
  *(_BYTE *)(v4 + 8) = 1;
  *(_DWORD *)(v4 + 12) = 0;
  *(_WORD *)(v4 + 16) = 256;
  *(_OWORD *)(v4 + 24) = xmmword_1D2CAF9F0;
  *(_QWORD *)(v4 + 40) = 0xE800000000000000;
  *(_QWORD *)(v4 + 48) = v1;
  JUMPOUT(0x1D2CA3A00);
}

void sub_1D2CA38D8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)(v1 - 152) = BYTE6(v0);
  sub_1D2CAB0B0();
  sub_1D2CAAE70();
  swift_bridgeObjectRelease();
  sub_1D2C74E48(*(_QWORD *)(v1 - 344), type metadata accessor for CryptoKitSecretSharing_HybridSecretSharingGeneratorSerialization.SealedBox);
  sub_1D2CAAE70();
  v2 = *(_QWORD *)(*(_QWORD *)(v1 - 200) + 96);
  swift_release();
  *(_QWORD *)(v1 - 152) = v2;
  sub_1D2CAB0B0();
  sub_1D2CAAE70();
  swift_bridgeObjectRelease();
  sub_1D2C57500();
  swift_allocError();
  *(_BYTE *)v3 = 17;
  *(_DWORD *)(v3 + 4) = 0;
  *(_BYTE *)(v3 + 8) = 1;
  *(_DWORD *)(v3 + 12) = 0;
  *(_WORD *)(v3 + 16) = 256;
  JUMPOUT(0x1D2CA39ECLL);
}

id sub_1D2CA3EB0(int a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  int share;
  int v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;

  if (!a1)
  {
    sub_1D2C57500();
    swift_allocError();
    v6 = 0;
    *(_BYTE *)v7 = 1;
    v9 = 0x80000001D2CB09B0;
    v10 = 360;
    v8 = 0xD000000000000022;
    goto LABEL_5;
  }
  v3 = *v1;
  v4 = *(_QWORD *)(*v1 + 152);
  share = ccss_shamir_share_generator_generate_share();
  if (share)
  {
    v6 = share;
    sub_1D2C57500();
    swift_allocError();
    *(_BYTE *)v7 = 3;
    v8 = 0xD000000000000041;
    v9 = 0x80000001D2CB0A10;
    v10 = 364;
LABEL_5:
    *(_DWORD *)(v7 + 4) = v6;
    *(_BYTE *)(v7 + 8) = a1 == 0;
    *(_WORD *)(v7 + 16) = 256;
    *(_DWORD *)(v7 + 12) = 0;
    *(_QWORD *)(v7 + 24) = v10;
    *(_QWORD *)(v7 + 32) = 0xD000000000000029;
    *(_QWORD *)(v7 + 40) = 0x80000001D2CB2320;
    *(_QWORD *)(v7 + 48) = 0xD00000000000006BLL;
    *(_QWORD *)(v7 + 56) = 0x80000001D2CB1D00;
    *(_QWORD *)(v7 + 64) = v8;
    *(_QWORD *)(v7 + 72) = v9;
    return (id)swift_willThrow();
  }
  return objc_msgSend(objc_allocWithZone(MEMORY[0x1E0D1BD80]), sel_initWithParams_share_, *(_QWORD *)(v3 + 144), v4);
}

void CKSecretSharing.HybridGenerator.generateShare(shareIndex:)(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  void *v3;
  void *v4;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  void *v16;
  int v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  id v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  id v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  id v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unsigned int v51;
  unint64_t v52;
  uint64_t v53;
  int v54;
  uint64_t v55;
  id v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  int v62;
  char v63;
  int v64;
  char v65;

  v4 = v3;
  v7 = sub_1D2CAAC3C();
  v55 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7);
  v9 = (char *)&v48 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for CKSecretSharing.HybridGenerator();
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v48 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = *(_QWORD *)v2;
  v14 = *(_QWORD *)(*(_QWORD *)v2 + 64);
  if (v14 < 1)
  {
    __break(1u);
    goto LABEL_27;
  }
  if (a1 < 1 || v14 < a1)
  {
    v58 = 0;
    v59 = 0xE000000000000000;
    sub_1D2CAAFC0();
    swift_bridgeObjectRelease();
    v58 = 0xD00000000000002ALL;
    v59 = 0x80000001D2CB1FD0;
    v56 = *(id *)(v13 + 64);
    sub_1D2CAB0B0();
    sub_1D2CAAE70();
    swift_bridgeObjectRelease();
    v19 = v58;
    v20 = v59;
    sub_1D2C57500();
    v4 = (void *)swift_allocError();
    *(_BYTE *)v21 = 1;
    *(_DWORD *)(v21 + 4) = 0;
    *(_BYTE *)(v21 + 8) = 1;
    *(_DWORD *)(v21 + 12) = 0;
    *(_WORD *)(v21 + 16) = 256;
    *(_OWORD *)(v21 + 24) = xmmword_1D2CAFA30;
    *(_QWORD *)(v21 + 40) = 0x80000001D2CB06E0;
    *(_QWORD *)(v21 + 48) = 0xD00000000000006BLL;
    *(_QWORD *)(v21 + 56) = 0x80000001D2CB1D00;
    *(_QWORD *)(v21 + 64) = v19;
    *(_QWORD *)(v21 + 72) = v20;
    swift_willThrow();
    goto LABEL_11;
  }
  if (HIDWORD(a1))
  {
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  v15 = sub_1D2CA3EB0(a1);
  if (!v3)
  {
    v16 = v15;
    v17 = *(unsigned __int8 *)(v13 + 17);
    v54 = v17;
    if (v17 != 1)
    {
      v50 = 0;
      goto LABEL_20;
    }
    v18 = *(_QWORD *)(v13 + 24);
    if ((v18 & 0x8000000000000000) == 0)
    {
      if (!HIDWORD(v18))
      {
        v50 = *(_QWORD *)(v13 + 24);
LABEL_20:
        v29 = *(unsigned __int8 *)(v13 + 16);
        sub_1D2CA81B8(v2, (uint64_t)v12);
        if (v29 == 1 && *(_QWORD *)(*(_QWORD *)v12 + 40) >> 60 != 15)
        {
          sub_1D2C74E48((uint64_t)v12, (uint64_t (*)(_QWORD))type metadata accessor for CKSecretSharing.HybridGenerator);
          v30 = *(_QWORD *)(*(_QWORD *)v2 + 32);
          v52 = *(_QWORD *)(*(_QWORD *)v2 + 40);
          v53 = v30;
          sub_1D2C69B84(v30, v52);
        }
        else
        {
          sub_1D2C74E48((uint64_t)v12, (uint64_t (*)(_QWORD))type metadata accessor for CKSecretSharing.HybridGenerator);
          v52 = 0xF000000000000000;
          v53 = 0;
        }
        v51 = objc_msgSend(v16, sel_x);
        v31 = objc_msgSend(v16, sel_y);
        if (v31)
        {
          v32 = v31;
          v54 ^= 1u;
          v33 = sub_1D2CAA96C();
          v48 = v34;
          v49 = v33;

          sub_1D2CAAC6C();
          v60 = v7;
          v61 = sub_1D2C5AE40(&qword_1EFCA0380, (uint64_t (*)(uint64_t))MEMORY[0x1E0CA94F8], MEMORY[0x1E0CA94D8]);
          v35 = __swift_allocate_boxed_opaque_existential_1(&v58);
          v36 = v55;
          (*(void (**)(uint64_t *, char *, uint64_t))(v55 + 16))(v35, v9, v7);
          __swift_project_boxed_opaque_existential_1(&v58, v60);
          sub_1D2CAA8AC();
          (*(void (**)(char *, uint64_t))(v36 + 8))(v9, v7);
          v37 = v56;
          v38 = v57;
          __swift_destroy_boxed_opaque_existential_1((uint64_t)&v58);
          v39 = sub_1D2CAAC48();
          v41 = v40;
          v42 = sub_1D2CAAC54();
          v44 = v43;

          *(_QWORD *)a2 = 1;
          v45 = v50;
          *(_DWORD *)(a2 + 8) = v51;
          *(_DWORD *)(a2 + 12) = v45;
          *(_BYTE *)(a2 + 16) = v54;
          v46 = v48;
          *(_QWORD *)(a2 + 24) = v49;
          *(_QWORD *)(a2 + 32) = v46;
          *(_QWORD *)(a2 + 40) = v37;
          *(_QWORD *)(a2 + 48) = v38;
          *(_QWORD *)(a2 + 56) = v39;
          *(_QWORD *)(a2 + 64) = v41;
          *(_QWORD *)(a2 + 72) = v42;
          *(_QWORD *)(a2 + 80) = v44;
          v47 = v52;
          *(_QWORD *)(a2 + 88) = v53;
          *(_QWORD *)(a2 + 96) = v47;
          return;
        }
        goto LABEL_30;
      }
LABEL_29:
      __break(1u);
LABEL_30:
      sub_1D2C6BAE4(v53, v52);
      __break(1u);
      return;
    }
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
LABEL_11:
  v56 = v4;
  v22 = v4;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EFC9FC88);
  if (swift_dynamicCast())
  {

    v23 = v64;
    if (v65 == 1)
    {
      if (v64 == 1)
      {
        sub_1D2C57500();
        swift_allocError();
        *(_BYTE *)v24 = 1;
        *(_DWORD *)(v24 + 4) = 0;
        *(_BYTE *)(v24 + 8) = 1;
        *(_DWORD *)(v24 + 12) = 0;
        *(_WORD *)(v24 + 16) = 256;
        *(_OWORD *)(v24 + 24) = xmmword_1D2CAFA50;
        *(_QWORD *)(v24 + 40) = 0x80000001D2CB06E0;
        *(_QWORD *)(v24 + 48) = 0xD00000000000006BLL;
        *(_QWORD *)(v24 + 56) = 0x80000001D2CB1D00;
        *(_QWORD *)(v24 + 64) = 0xD000000000000049;
        *(_QWORD *)(v24 + 72) = 0x80000001D2CB0790;
      }
      else
      {
        sub_1D2C4E7DC();
        swift_allocError();
        *(_DWORD *)v28 = v23;
        *(_BYTE *)(v28 + 4) = 1;
      }
    }
    else
    {
      v58 = 0;
      v59 = 0xE000000000000000;
      sub_1D2CAAFC0();
      sub_1D2CAAE70();
      v62 = v23;
      v63 = 0;
      sub_1D2CAB044();
      sub_1D2CAAE70();
      v25 = v58;
      v26 = v59;
      sub_1D2C57500();
      swift_allocError();
      *(_BYTE *)v27 = 3;
      *(_DWORD *)(v27 + 4) = v23;
      *(_BYTE *)(v27 + 8) = 0;
      *(_DWORD *)(v27 + 12) = 0;
      *(_WORD *)(v27 + 16) = 256;
      *(_OWORD *)(v27 + 24) = xmmword_1D2CAFA40;
      *(_QWORD *)(v27 + 40) = 0x80000001D2CB06E0;
      *(_QWORD *)(v27 + 48) = 0xD00000000000006BLL;
      *(_QWORD *)(v27 + 56) = 0x80000001D2CB1D00;
      *(_QWORD *)(v27 + 64) = v25;
      *(_QWORD *)(v27 + 72) = v26;
    }
    swift_willThrow();
  }

}

__n128 CKSecretSharing.HybridSecretShare.init(shareNumber:threshold:shamirSecretShare:nonce:Ciphertext:Tag:authenticatedData:)@<Q0>(int a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, __n128 a10, uint64_t a11, uint64_t a12)
{
  __n128 result;

  result = a10;
  *(_QWORD *)a9 = 1;
  *(_DWORD *)(a9 + 8) = a1;
  *(_DWORD *)(a9 + 12) = a2;
  *(_BYTE *)(a9 + 16) = BYTE4(a2) & 1;
  *(_QWORD *)(a9 + 24) = a3;
  *(_QWORD *)(a9 + 32) = a4;
  *(_QWORD *)(a9 + 40) = a5;
  *(_QWORD *)(a9 + 48) = a6;
  *(_QWORD *)(a9 + 56) = a7;
  *(_QWORD *)(a9 + 64) = a8;
  *(__n128 *)(a9 + 72) = a10;
  *(_QWORD *)(a9 + 88) = a11;
  *(_QWORD *)(a9 + 96) = a12;
  return result;
}

void CKSecretSharing.HybridGenerator.generateShares(_:)(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  uint64_t v3;
  void *v4;
  __int128 v5;
  id v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v14[4];
  int v15;
  char v16;
  uint64_t v17;
  unint64_t v18;
  int v19;
  char v20;
  id v21;

  if (*(_QWORD *)(*(_QWORD *)v1 + 24) > a1)
  {
    sub_1D2C57500();
    v4 = (void *)swift_allocError();
    *(_BYTE *)v3 = 5;
    *(_DWORD *)(v3 + 4) = 0;
    *(_BYTE *)(v3 + 8) = 1;
    *(_DWORD *)(v3 + 12) = 0;
    *(_WORD *)(v3 + 16) = 256;
    v5 = xmmword_1D2CAFA70;
LABEL_5:
    *(_OWORD *)(v3 + 24) = v5;
    *(_QWORD *)(v3 + 40) = 0x80000001D2CB0770;
    *(_QWORD *)(v3 + 48) = 0xD00000000000006BLL;
    *(_QWORD *)(v3 + 56) = 0x80000001D2CB1D00;
    *(_QWORD *)(v3 + 64) = 0;
    *(_QWORD *)(v3 + 72) = 0xE000000000000000;
    swift_willThrow();
LABEL_6:
    v21 = v4;
    v6 = v4;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EFC9FC88);
    if (swift_dynamicCast())
    {

      v7 = v19;
      if (v20 == 1)
      {
        if (v19 == 1)
        {
          sub_1D2C57500();
          swift_allocError();
          *(_BYTE *)v8 = 1;
          *(_DWORD *)(v8 + 4) = 0;
          *(_BYTE *)(v8 + 8) = 1;
          *(_DWORD *)(v8 + 12) = 0;
          *(_WORD *)(v8 + 16) = 256;
          *(_OWORD *)(v8 + 24) = xmmword_1D2CAFA90;
          *(_QWORD *)(v8 + 40) = 0x80000001D2CB0770;
          *(_QWORD *)(v8 + 48) = 0xD00000000000006BLL;
          *(_QWORD *)(v8 + 56) = 0x80000001D2CB1D00;
          *(_QWORD *)(v8 + 64) = 0xD000000000000049;
          *(_QWORD *)(v8 + 72) = 0x80000001D2CB0790;
        }
        else
        {
          sub_1D2C4E7DC();
          swift_allocError();
          *(_DWORD *)v13 = v7;
          *(_BYTE *)(v13 + 4) = 1;
        }
      }
      else
      {
        v17 = 0;
        v18 = 0xE000000000000000;
        sub_1D2CAAFC0();
        sub_1D2CAAE70();
        v15 = v7;
        v16 = 0;
        sub_1D2CAB044();
        sub_1D2CAAE70();
        v10 = v17;
        v11 = v18;
        sub_1D2C57500();
        swift_allocError();
        *(_BYTE *)v12 = 3;
        *(_DWORD *)(v12 + 4) = v7;
        *(_BYTE *)(v12 + 8) = 0;
        *(_DWORD *)(v12 + 12) = 0;
        *(_WORD *)(v12 + 16) = 256;
        *(_OWORD *)(v12 + 24) = xmmword_1D2CAFA80;
        *(_QWORD *)(v12 + 40) = 0x80000001D2CB0770;
        *(_QWORD *)(v12 + 48) = 0xD00000000000006BLL;
        *(_QWORD *)(v12 + 56) = 0x80000001D2CB1D00;
        *(_QWORD *)(v12 + 64) = v10;
        *(_QWORD *)(v12 + 72) = v11;
      }
      swift_willThrow();
    }

    return;
  }
  if (*(_QWORD *)(*(_QWORD *)v1 + 64) < a1)
  {
    sub_1D2C57500();
    v4 = (void *)swift_allocError();
    *(_BYTE *)v3 = 6;
    *(_DWORD *)(v3 + 4) = 0;
    *(_BYTE *)(v3 + 8) = 1;
    *(_DWORD *)(v3 + 12) = 0;
    *(_WORD *)(v3 + 16) = 256;
    v5 = xmmword_1D2CAFA60;
    goto LABEL_5;
  }
  if (!(_DWORD)a1)
  {
    __break(1u);
    return;
  }
  v9 = MEMORY[0x1E0C80A78](a1);
  v14[2] = v1;
  sub_1D2C9F870((_QWORD *(*)(_QWORD *__return_ptr, int *, uint64_t *))sub_1D2CA81FC, (uint64_t)v14, (v9 << 32) | 1);
  v4 = v2;
  if (v2)
    goto LABEL_6;
}

uint64_t CKSecretSharing.HybridGenerator.serializedData()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  _QWORD v10[2];

  v2 = v0;
  v3 = type metadata accessor for CKSecretSharing.HybridGenerator();
  MEMORY[0x1E0C80A78](v3);
  v5 = (char *)v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for CryptoKitSecretSharing_HybridSecretSharingGeneratorSerialization(0);
  MEMORY[0x1E0C80A78](v6);
  v8 = (char *)v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1D2CA81B8(v2, (uint64_t)v5);
  sub_1D2C9FE7C((uint64_t)v5, (uint64_t)v8);
  if (!v1)
  {
    sub_1D2C5AE40(&qword_1EFCA0008, type metadata accessor for CryptoKitSecretSharing_HybridSecretSharingGeneratorSerialization, (uint64_t)&unk_1D2CAE42C);
    v6 = sub_1D2CAAAB0();
    sub_1D2C59684((uint64_t)(v8 + 8));
    sub_1D2C74E48((uint64_t)v8, type metadata accessor for CryptoKitSecretSharing_HybridSecretSharingGeneratorSerialization);
  }
  return v6;
}

void CKSecretSharing.HybridReconstructor.init(threshold:associatedData:includeADInShares:includeThresholdInShares:cipherSuite:insecureToChangeIncludeMessageEntropy:)(int64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, char a4@<W3>, char a5@<W4>, char a6@<W6>, _QWORD *a7@<X8>)
{
  uint64_t v7;
  uint64_t v15;
  uint64_t v16;

  type metadata accessor for CKSecretSharing.CKHybridSecretShareInternalState();
  v15 = swift_allocObject();
  sub_1D2CA03F0(a1, a2, a3, a4, a5, v15, a6);
  if (!v7)
    *a7 = v16;
}

uint64_t sub_1D2CA4BEC@<X0>(unint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  int64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  int64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  id v20;
  void *v21;
  int v22;
  int64_t v23;
  void *v24;
  int v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  size_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  int64_t v35;
  uint64_t v36;
  unint64_t v37;
  int v38;
  uint64_t v39;

  v7 = sub_1D2CAABE8();
  v8 = MEMORY[0x1E0C80A78](v7);
  v11 = (char *)&v30 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = *v2;
  v13 = *(_QWORD *)(*v2 + 24);
  if (a1 >> 62)
  {
    v16 = v8;
    v4 = v9;
    sub_1D2CAAF0C();
    v17 = sub_1D2CAB068();
    swift_bridgeObjectRelease();
    v9 = v4;
    v8 = v16;
    if (v17 < v13)
      goto LABEL_3;
  }
  else if (*(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10) < v13)
  {
LABEL_3:
    sub_1D2C57500();
    swift_allocError();
    *(_BYTE *)v14 = 1;
    *(_DWORD *)(v14 + 4) = 0;
    *(_BYTE *)(v14 + 8) = 1;
    *(_DWORD *)(v14 + 12) = 0;
    *(_WORD *)(v14 + 16) = 256;
    *(_OWORD *)(v14 + 24) = xmmword_1D2CAFAB0;
    *(_QWORD *)(v14 + 40) = 0x80000001D2CB2290;
    *(_QWORD *)(v14 + 48) = 0xD00000000000006BLL;
    *(_QWORD *)(v14 + 56) = 0x80000001D2CB1D00;
    *(_QWORD *)(v14 + 64) = 0xD00000000000002DLL;
    *(_QWORD *)(v14 + 72) = 0x80000001D2CB2140;
    return swift_willThrow();
  }
  v30 = v9;
  v31 = v8;
  v32 = a2;
  ccss_sizeof_share_bag();
  v39 = swift_slowAlloc();
  ccss_shamir_share_bag_init();
  v18 = *(_QWORD *)(v12 + 24);
  if (v18 < 0)
    goto LABEL_27;
  v33 = v12;
  v34 = v11;
  v35 = v3;
  if (v18)
  {
    v19 = 0;
    v13 = a1 & 0xC000000000000001;
    v4 = a1 & 0xFFFFFFFFFFFFFF8;
    while (v18 != v19)
    {
      if (v13)
      {
        v20 = (id)MEMORY[0x1D8245380](v19, a1);
      }
      else
      {
        if (v19 >= *(_QWORD *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10))
          goto LABEL_26;
        v20 = *(id *)(a1 + 8 * v19 + 32);
      }
      v21 = v20;
      objc_msgSend(v20, sel_share);

      v22 = ccss_shamir_share_bag_add_share();
      if (v22)
      {
        v25 = v22;
        v36 = 0;
        v37 = 0xE000000000000000;
        sub_1D2CAAFC0();
        sub_1D2CAAE70();
        v38 = v25;
        sub_1D2CAB0B0();
        sub_1D2CAAE70();
        swift_bridgeObjectRelease();
        v26 = v36;
        v27 = v37;
        sub_1D2C57500();
        swift_allocError();
        *(_BYTE *)v28 = 3;
        *(_DWORD *)(v28 + 4) = v25;
        *(_BYTE *)(v28 + 8) = 0;
        *(_DWORD *)(v28 + 12) = 0;
        *(_WORD *)(v28 + 16) = 256;
        *(_OWORD *)(v28 + 24) = xmmword_1D2CAFAA0;
        *(_QWORD *)(v28 + 40) = 0x80000001D2CB2290;
        *(_QWORD *)(v28 + 48) = 0xD00000000000006BLL;
        *(_QWORD *)(v28 + 56) = 0x80000001D2CB1D00;
        *(_QWORD *)(v28 + 64) = v26;
        *(_QWORD *)(v28 + 72) = v27;
        swift_willThrow();
        return MEMORY[0x1D8245FD4](v39, -1, -1);
      }
      if (v18 == ++v19)
        goto LABEL_15;
    }
    __break(1u);
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
LABEL_28:
    swift_once();
    goto LABEL_19;
  }
LABEL_15:
  v23 = *(_QWORD *)(v33 + 72);
  if (v23)
  {
    v24 = (void *)sub_1D2C4A3AC(v23);
    v4 = (uint64_t)v34;
    v13 = v35;
    goto LABEL_20;
  }
  v4 = (uint64_t)v34;
  v13 = v35;
  if (qword_1ED985918 != -1)
    goto LABEL_28;
LABEL_19:
  v24 = off_1ED985910;
  swift_retain();
LABEL_20:
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    v29 = sub_1D2C95BC8((uint64_t)v24);
    swift_release();
    v24 = (void *)v29;
  }
  swift_beginAccess();
  sub_1D2CA5008((uint64_t)v24 + 32);
  swift_release();
  if (!v13)
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v30 + 32))(v32, v4, v31);
  return MEMORY[0x1D8245FD4](v39, -1, -1);
}

uint64_t sub_1D2CA5008(uint64_t result)
{
  int v1;
  int v2;
  uint64_t v3;

  if (result)
  {
    v1 = ccss_shamir_share_bag_recover_secret();
    if (v1)
    {
      v2 = v1;
      sub_1D2CAAFC0();
      sub_1D2CAAE70();
      sub_1D2CAB0B0();
      sub_1D2CAAE70();
      swift_bridgeObjectRelease();
      sub_1D2C57500();
      swift_allocError();
      *(_BYTE *)v3 = 3;
      *(_DWORD *)(v3 + 4) = v2;
      *(_BYTE *)(v3 + 8) = 0;
      *(_DWORD *)(v3 + 12) = 0;
      *(_WORD *)(v3 + 16) = 256;
      *(_OWORD *)(v3 + 24) = xmmword_1D2CAFAC0;
      *(_QWORD *)(v3 + 40) = 0x80000001D2CB2290;
      *(_QWORD *)(v3 + 48) = 0xD00000000000006BLL;
      *(_QWORD *)(v3 + 56) = 0x80000001D2CB1D00;
      *(_QWORD *)(v3 + 64) = 0;
      *(_QWORD *)(v3 + 72) = 0xE000000000000000;
      return swift_willThrow();
    }
    else
    {
      return sub_1D2CAABDC();
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

void CKSecretSharing.HybridReconstructor.recoverSecret(shares:)(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  void (*v43)(uint64_t, uint64_t);
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  char v55;
  unint64_t v56;
  uint64_t v57;
  void *v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  uint64_t v64;
  unint64_t v65;
  id v66;
  char *v67;
  void (*v68)(char *, char *, uint64_t);
  int *v69;
  int v70;
  int v71;
  __int128 v72;
  uint64_t v73;
  uint64_t v74;
  const char *v75;
  char *v76;
  void (*v77)(char *, uint64_t);
  uint64_t v78;
  unint64_t v79;
  unint64_t v80;
  unint64_t v81;
  uint64_t v82;
  unint64_t v83;
  __int128 v84;
  uint64_t v85;
  unint64_t v86;
  unint64_t v87;
  uint64_t v88;
  unint64_t v89;
  uint64_t v90;
  unint64_t v91;
  uint64_t v92;
  unint64_t v93;
  unint64_t v94;
  uint64_t v95;
  uint64_t v96;
  unint64_t v97;
  uint64_t v98;
  unint64_t v99;
  uint64_t v100;
  unint64_t v101;
  unint64_t v102;
  unint64_t v103;
  void (*v104)(uint64_t, uint64_t);
  char *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  __int128 v109;
  uint64_t v110;
  void (*v111)(uint64_t, uint64_t);
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  void (*v115)(uint64_t, uint64_t);
  uint64_t v116;
  void (*v117)(uint64_t, uint64_t);
  uint64_t v118;
  void (*v119)(uint64_t, uint64_t);
  unint64_t v120;
  uint64_t v121;
  char *v122;
  unint64_t v123;
  uint64_t v124;
  char *v125;
  __int128 v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  void (*v130)(uint64_t, uint64_t);
  unint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  char *v140;
  uint64_t v141;
  uint64_t v142;
  char *v143;
  uint64_t v144;
  unint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  char *v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  unint64_t v153;
  char *v154;
  char *v155;
  unsigned int v156;
  __int128 v157;
  __int128 v158;
  __int128 v159;
  __int128 v160;
  uint64_t v161;

  v161 = *MEMORY[0x1E0C80C00];
  v3 = sub_1D2CAAB40();
  v4 = *(_QWORD *)(v3 - 8);
  v5 = MEMORY[0x1E0C80A78](v3);
  v154 = (char *)&v120 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = MEMORY[0x1E0C80A78](v5);
  v9 = (char *)&v120 - v8;
  MEMORY[0x1E0C80A78](v7);
  v155 = (char *)&v120 - v10;
  v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFCA0378);
  MEMORY[0x1E0C80A78](v11);
  v13 = (char *)&v120 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_1D2CAAC3C();
  v147 = *(_QWORD *)(v14 - 8);
  v148 = v14;
  v15 = MEMORY[0x1E0C80A78](v14);
  v149 = (char *)&v120 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15);
  v18 = (char *)&v120 - v17;
  v19 = sub_1D2CAAC78();
  v150 = *(_QWORD *)(v19 - 8);
  v151 = v19;
  v20 = MEMORY[0x1E0C80A78](v19);
  v146 = (uint64_t)&v120 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v20);
  v152 = (uint64_t)&v120 - v22;
  v23 = sub_1D2CAABE8();
  v24 = *(_QWORD *)(v23 - 8);
  v25 = MEMORY[0x1E0C80A78](v23);
  v26 = MEMORY[0x1E0C80A78](v25);
  v27 = MEMORY[0x1E0C80A78](v26);
  v28 = MEMORY[0x1E0C80A78](v27);
  v29 = MEMORY[0x1E0C80A78](v28);
  v35 = (char *)&v120 - v34;
  v36 = *v1;
  v37 = *(_QWORD *)(a1 + 16);
  if (*(_QWORD *)(*v1 + 56) < v37)
  {
    sub_1D2C57500();
    v38 = (void *)swift_allocError();
    *(_BYTE *)v39 = 6;
    *(_DWORD *)(v39 + 4) = 0;
    *(_BYTE *)(v39 + 8) = 1;
    *(_DWORD *)(v39 + 12) = 0;
    *(_WORD *)(v39 + 16) = 256;
    *(_OWORD *)(v39 + 24) = xmmword_1D2CAFB10;
    *(_QWORD *)(v39 + 40) = 0x80000001D2CB2020;
    *(_QWORD *)(v39 + 48) = 0xD00000000000006BLL;
    *(_QWORD *)(v39 + 56) = 0x80000001D2CB1D00;
    *(_QWORD *)(v39 + 64) = 0;
    *(_QWORD *)(v39 + 72) = 0xE000000000000000;
    swift_willThrow();
    goto LABEL_25;
  }
  v40 = *(_QWORD *)(v36 + 24);
  if (v37 < v40)
  {
    sub_1D2C57500();
    v38 = (void *)swift_allocError();
    *(_BYTE *)v41 = 5;
    *(_DWORD *)(v41 + 4) = 0;
    *(_BYTE *)(v41 + 8) = 1;
    *(_DWORD *)(v41 + 12) = 0;
    *(_WORD *)(v41 + 16) = 256;
    *(_OWORD *)(v41 + 24) = xmmword_1D2CAFB00;
    *(_QWORD *)(v41 + 40) = 0x80000001D2CB2020;
    *(_QWORD *)(v41 + 48) = 0xD00000000000006BLL;
    *(_QWORD *)(v41 + 56) = 0x80000001D2CB1D00;
    *(_QWORD *)(v41 + 64) = 0xD00000000000002DLL;
    v42 = 0x80000001D2CB2140;
LABEL_5:
    *(_QWORD *)(v41 + 72) = v42;
    swift_willThrow();
    goto LABEL_25;
  }
  v43 = *(void (**)(uint64_t, uint64_t))(v36 + 72);
  v44 = *(_QWORD *)(v36 + 80);
  v45 = *(_QWORD *)(v36 + 88);
  v46 = *(_QWORD *)(v36 + 112);
  v47 = *(_QWORD *)(v36 + 120);
  v49 = *(_QWORD *)(v36 + 128);
  v48 = *(_QWORD *)(v36 + 136);
  v156 = bswap32(v40);
  if (!v37)
  {
    __break(1u);
    goto LABEL_41;
  }
  if ((*(_BYTE *)(a1 + 48) & 1) == 0 && v40 != *(_DWORD *)(a1 + 44))
  {
    sub_1D2C57500();
    v38 = (void *)swift_allocError();
    *(_BYTE *)v41 = 4;
    *(_DWORD *)(v41 + 4) = 0;
    *(_BYTE *)(v41 + 8) = 1;
    *(_DWORD *)(v41 + 12) = 0;
    *(_WORD *)(v41 + 16) = 256;
    *(_OWORD *)(v41 + 24) = xmmword_1D2CAFAD0;
    *(_QWORD *)(v41 + 40) = 0x80000001D2CB2020;
    *(_QWORD *)(v41 + 48) = 0xD00000000000006BLL;
    *(_QWORD *)(v41 + 56) = 0x80000001D2CB1D00;
    *(_QWORD *)(v41 + 64) = 0;
    v42 = 0xE000000000000000;
    goto LABEL_5;
  }
  v128 = v47;
  v129 = v46;
  v130 = v43;
  v131 = v48;
  v132 = v49;
  v133 = v45;
  v135 = v30;
  v139 = v24;
  v127 = v44;
  v142 = v3;
  v136 = v33;
  v134 = v32;
  v137 = v31;
  v140 = v35;
  v138 = v29;
  v144 = sub_1D2C5D54C((uint64_t)&v156, (uint64_t)&v157);
  v145 = v50;
  v51 = *(_QWORD *)(a1 + 128);
  v52 = *(_QWORD *)(v36 + 32);
  v53 = *(_QWORD *)(v36 + 40);
  v143 = v9;
  if (v51 >> 60 == 15)
  {
    v141 = v4;
    v125 = v13;
    if (v53 >> 60 == 15)
    {
      v54 = 0;
      v53 = 0xC000000000000000;
    }
    else
    {
      v54 = v52;
      sub_1D2C45028(v52, v53);
    }
  }
  else
  {
    v54 = *(_QWORD *)(a1 + 120);
    if (v53 >> 60 == 15)
    {
      v125 = v13;
      v141 = v4;
      sub_1D2C45028(v54, v51);
      v53 = v51;
    }
    else
    {
      sub_1D2C69B84(*(_QWORD *)(a1 + 120), v51);
      sub_1D2C69B84(v52, v53);
      sub_1D2C59C44(v54, v51);
      if ((v55 & 1) == 0)
      {
        sub_1D2C57500();
        v38 = (void *)swift_allocError();
        *(_BYTE *)v78 = 13;
        *(_DWORD *)(v78 + 4) = 0;
        *(_BYTE *)(v78 + 8) = 1;
        *(_DWORD *)(v78 + 12) = 0;
        *(_WORD *)(v78 + 16) = 256;
        *(_OWORD *)(v78 + 24) = xmmword_1D2CAFAE0;
        *(_QWORD *)(v78 + 40) = 0x80000001D2CB2020;
        *(_QWORD *)(v78 + 48) = 0xD00000000000006BLL;
        *(_QWORD *)(v78 + 56) = 0x80000001D2CB1D00;
        *(_QWORD *)(v78 + 64) = 0;
        *(_QWORD *)(v78 + 72) = 0xE000000000000000;
        swift_willThrow();
        sub_1D2C45258(v144, v145);
        sub_1D2C6BAE4(v52, v53);
        sub_1D2C6BAE4(v54, v51);
        v9 = v143;
        goto LABEL_24;
      }
      v125 = v13;
      v141 = v4;
      sub_1D2C6BAE4(v54, v51);
      v54 = v52;
    }
  }
  v56 = v145;
  v126 = xmmword_1D2CAD220;
  v160 = xmmword_1D2CAD220;
  v57 = v144;
  sub_1D2C45028(v144, v145);
  sub_1D2C5EDA4(v57, v56);
  sub_1D2C45258(v57, v56);
  sub_1D2C45028(v54, v53);
  sub_1D2C5EDA4(v54, v53);
  sub_1D2C45258(v54, v53);
  if (*(_BYTE *)(v36 + 18))
    v58 = &unk_1E943EAA8;
  else
    v58 = &unk_1E943EA80;
  v59 = v54;
  v60 = sub_1D2C6783C((uint64_t)v58);
  v62 = v61;
  sub_1D2C45028(v60, v61);
  sub_1D2C5EDA4(v60, v62);
  sub_1D2C45258(v60, v62);
  sub_1D2C45258(v60, v62);
  sub_1D2CAAF0C();
  swift_retain();
  v63 = v153;
  v64 = sub_1D2CA77CC(a1, a1, v36);
  v38 = (void *)v63;
  if (v63)
  {
    swift_bridgeObjectRelease();
    swift_release();
    sub_1D2C45258(v57, v145);
    sub_1D2C45258(v59, v53);
    sub_1D2C45258(v160, *((unint64_t *)&v160 + 1));
    v4 = v141;
    v9 = v143;
LABEL_24:
    v3 = v142;
    goto LABEL_25;
  }
  v65 = v64;
  v124 = v59;
  v153 = v53;
  swift_bridgeObjectRelease();
  swift_release();
  *(_QWORD *)&v159 = v36;
  sub_1D2CA4BEC(v65, (uint64_t)v140);
  swift_bridgeObjectRelease();
  v79 = *(_QWORD *)(a1 + 80);
  *(_QWORD *)&v159 = *(_QWORD *)(a1 + 72);
  *((_QWORD *)&v159 + 1) = v79;
  sub_1D2C45028(v159, v79);
  v80 = sub_1D2C6F624();
  sub_1D2CAAC30();
  v3 = v142;
  v81 = *(_QWORD *)(a1 + 96);
  *(_QWORD *)&v159 = *(_QWORD *)(a1 + 88);
  *((_QWORD *)&v159 + 1) = v81;
  v82 = *(_QWORD *)(a1 + 104);
  v83 = *(_QWORD *)(a1 + 112);
  *(_QWORD *)&v158 = v82;
  *((_QWORD *)&v158 + 1) = v83;
  sub_1D2C45028(v159, v81);
  sub_1D2C45028(v82, v83);
  v123 = v80;
  sub_1D2CAAC60();
  v84 = v160;
  v159 = v160;
  sub_1D2C45028(v160, *((unint64_t *)&v160 + 1));
  v85 = sub_1D2CAAC0C();
  v87 = v86;
  v88 = v85;
  sub_1D2C45258(v84, *((unint64_t *)&v84 + 1));
  v159 = v126;
  sub_1D2C45028(v84, *((unint64_t *)&v84 + 1));
  sub_1D2C5EDA4(v84, *((uint64_t *)&v84 + 1));
  sub_1D2C45258(v84, *((unint64_t *)&v84 + 1));
  sub_1D2C45028(v88, v87);
  sub_1D2C5EDA4(v88, v87);
  *(_QWORD *)&v126 = v88;
  v122 = (char *)v87;
  sub_1D2C45258(v88, v87);
  v158 = v159;
  sub_1D2C45028(v159, *((unint64_t *)&v159 + 1));
  sub_1D2CAABDC();
  v89 = v128;
  sub_1D2CAAF0C();
  v90 = v129;
  v121 = sub_1D2C5D050(v129, v89);
  v120 = v91;
  *(_QWORD *)&v158 = v121;
  *((_QWORD *)&v158 + 1) = v91;
  sub_1D2CAAF0C();
  v92 = sub_1D2C5D050(v90, v89);
  v94 = v93;
  *(_QWORD *)&v157 = v92;
  *((_QWORD *)&v157 + 1) = v93;
  v129 = sub_1D2CAAD98();
  v128 = sub_1D2C5AE40((unint64_t *)&qword_1EFC9F9A8, (uint64_t (*)(uint64_t))MEMORY[0x1E0CA9940], MEMORY[0x1E0CA9930]);
  v95 = v135;
  sub_1D2CAAC90();
  sub_1D2C45258(v92, v94);
  sub_1D2C45258(v121, v120);
  v130 = *(void (**)(uint64_t, uint64_t))(v139 + 8);
  v96 = v138;
  v130(v95, v138);
  v158 = v159;
  sub_1D2C45028(v159, *((unint64_t *)&v159 + 1));
  sub_1D2CAABDC();
  v97 = v131;
  sub_1D2CAAF0C();
  v98 = v132;
  v121 = sub_1D2C5D050(v132, v97);
  v120 = v99;
  *(_QWORD *)&v158 = v121;
  *((_QWORD *)&v158 + 1) = v99;
  sub_1D2CAAF0C();
  v100 = sub_1D2C5D050(v98, v97);
  v102 = v101;
  *(_QWORD *)&v157 = v100;
  *((_QWORD *)&v157 + 1) = v101;
  sub_1D2CAAC90();
  v103 = v102;
  v104 = v130;
  sub_1D2C45258(v100, v103);
  sub_1D2C45258(v121, v120);
  v104(v95, v96);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v139 + 16))(v95, v137, v96);
  sub_1D2C5AE40(&qword_1EFCA0390, (uint64_t (*)(uint64_t))MEMORY[0x1E0CA93C8], MEMORY[0x1E0CA9398]);
  sub_1D2CAABDC();
  v106 = v148;
  v105 = v149;
  sub_1D2CAABD0();
  *(_QWORD *)&v158 = v126;
  *((_QWORD *)&v158 + 1) = v122;
  v107 = v147;
  v108 = (uint64_t)v125;
  (*(void (**)(char *, char *, uint64_t))(v147 + 16))(v125, v105, v106);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v107 + 56))(v108, 0, 1, v106);
  v109 = v160;
  v157 = v160;
  sub_1D2C45028(v160, *((unint64_t *)&v160 + 1));
  sub_1D2CAAC18();
  v4 = v141;
  v9 = v143;
  v18 = v122;
  sub_1D2C45258(v109, *((unint64_t *)&v109 + 1));
  sub_1D2C6F668(v108, &qword_1EFCA0378);
  a1 = v146;
  if ((sub_1D2CA7AA4(v146, v152) & 1) == 0)
  {
LABEL_41:
    sub_1D2C57500();
    v38 = (void *)swift_allocError();
    *(_BYTE *)v110 = 10;
    *(_DWORD *)(v110 + 4) = 0;
    *(_BYTE *)(v110 + 8) = 1;
    *(_DWORD *)(v110 + 12) = 0;
    *(_WORD *)(v110 + 16) = 256;
    *(_OWORD *)(v110 + 24) = xmmword_1D2CAFAF0;
    *(_QWORD *)(v110 + 40) = 0x80000001D2CB2020;
    *(_QWORD *)(v110 + 48) = 0xD00000000000006BLL;
    *(_QWORD *)(v110 + 56) = 0x80000001D2CB1D00;
    *(_QWORD *)(v110 + 64) = 0xD000000000000043;
    *(_QWORD *)(v110 + 72) = 0x80000001D2CB20F0;
    swift_willThrow();
    sub_1D2C45258(v144, v145);
    sub_1D2C45258(v126, (unint64_t)v18);
    sub_1D2C45258(v124, v153);
    v111 = *(void (**)(uint64_t, uint64_t))(v150 + 8);
    v112 = a1;
    v113 = v151;
    v111(v112, v151);
    (*(void (**)(char *, uint64_t))(v147 + 8))(v149, v148);
    v114 = v138;
    v115 = v130;
    v130(v136, v138);
    v115(v134, v114);
    v115(v137, v114);
    sub_1D2C45258(v159, *((unint64_t *)&v159 + 1));
    v111(v152, v113);
    v115((uint64_t)v140, v114);
    sub_1D2C45258(v160, *((unint64_t *)&v160 + 1));
LABEL_25:
    *(_QWORD *)&v159 = v38;
    v66 = v38;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EFC9FC88);
    v67 = v155;
    if (swift_dynamicCast())
    {

      (*(void (**)(char *, char *, uint64_t))(v4 + 32))(v9, v67, v3);
      v68 = *(void (**)(char *, char *, uint64_t))(v4 + 16);
      v69 = (int *)v154;
      v68(v154, v9, v3);
      v70 = (*(uint64_t (**)(int *, uint64_t))(v4 + 88))(v69, v3);
      if (v70 == *MEMORY[0x1E0CA91D0])
      {
        (*(void (**)(int *, uint64_t))(v4 + 96))(v69, v3);
        v71 = *v69;
        *(_QWORD *)&v160 = 0;
        *((_QWORD *)&v160 + 1) = 0xE000000000000000;
        sub_1D2CAAFC0();
        sub_1D2CAAE70();
        sub_1D2CAB044();
        sub_1D2CAAE70();
        v72 = v160;
        sub_1D2C57500();
        swift_allocError();
        *(_BYTE *)v73 = 3;
        *(_DWORD *)(v73 + 4) = v71;
        *(_BYTE *)(v73 + 8) = 0;
        *(_DWORD *)(v73 + 12) = 0;
        *(_WORD *)(v73 + 16) = 256;
        *(_OWORD *)(v73 + 24) = xmmword_1D2CAFB40;
        *(_QWORD *)(v73 + 40) = 0x80000001D2CB2020;
        *(_QWORD *)(v73 + 48) = 0xD00000000000006BLL;
        *(_QWORD *)(v73 + 56) = 0x80000001D2CB1D00;
        *(_OWORD *)(v73 + 64) = v72;
      }
      else
      {
        if (v70 == *MEMORY[0x1E0CA91E0])
        {
          sub_1D2C57500();
          swift_allocError();
          *(_BYTE *)v74 = 1;
          *(_DWORD *)(v74 + 4) = 0;
          *(_BYTE *)(v74 + 8) = 1;
          *(_DWORD *)(v74 + 12) = 0;
          *(_WORD *)(v74 + 16) = 256;
          *(_OWORD *)(v74 + 24) = xmmword_1D2CAFB30;
          *(_QWORD *)(v74 + 40) = 0x80000001D2CB2020;
          *(_QWORD *)(v74 + 48) = 0xD00000000000006BLL;
          *(_QWORD *)(v74 + 56) = 0x80000001D2CB1D00;
          *(_QWORD *)(v74 + 64) = 0xD000000000000048;
          v75 = "Underlying CryptoKit call had incorrect parameter size in recoverSecret?";
        }
        else
        {
          if (v70 != *MEMORY[0x1E0CA91D8])
          {
            sub_1D2C5AE40(&qword_1EFCA0388, (uint64_t (*)(uint64_t))MEMORY[0x1E0CA91E8], MEMORY[0x1E0CA91F0]);
            swift_allocError();
            v68(v76, v9, v3);
            swift_willThrow();
            v77 = *(void (**)(char *, uint64_t))(v4 + 8);
            v77(v9, v3);
            v77((char *)v69, v3);
            goto LABEL_34;
          }
          sub_1D2C57500();
          swift_allocError();
          *(_BYTE *)v74 = 2;
          *(_DWORD *)(v74 + 4) = 0;
          *(_BYTE *)(v74 + 8) = 1;
          *(_DWORD *)(v74 + 12) = 0;
          *(_WORD *)(v74 + 16) = 256;
          *(_OWORD *)(v74 + 24) = xmmword_1D2CAFB20;
          *(_QWORD *)(v74 + 40) = 0x80000001D2CB2020;
          *(_QWORD *)(v74 + 48) = 0xD00000000000006BLL;
          *(_QWORD *)(v74 + 56) = 0x80000001D2CB1D00;
          *(_QWORD *)(v74 + 64) = 0xD00000000000005DLL;
          v75 = "Error with Authentication in opening  GCM sealed box contained in ciphertext in recoverSecret";
        }
        *(_QWORD *)(v74 + 72) = (unint64_t)(v75 - 32) | 0x8000000000000000;
      }
      swift_willThrow();
      (*(void (**)(char *, uint64_t))(v4 + 8))(v9, v3);
    }
LABEL_34:

    return;
  }
  if (*(_BYTE *)(v36 + 18) != 1)
    __asm { BR              X10 }
  sub_1D2C45258(v144, v145);
  sub_1D2C45258(v124, v153);
  v116 = v151;
  v117 = *(void (**)(uint64_t, uint64_t))(v150 + 8);
  v117(v146, v151);
  (*(void (**)(char *, uint64_t))(v147 + 8))(v149, v148);
  v118 = v138;
  v119 = v130;
  v130(v136, v138);
  v119(v134, v118);
  v119(v137, v118);
  sub_1D2C45258(v159, *((unint64_t *)&v159 + 1));
  v117(v152, v116);
  v119((uint64_t)v140, v118);
  sub_1D2C45258(v160, *((unint64_t *)&v160 + 1));
}

void sub_1D2CA6864(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X3>, _QWORD *a5@<X8>)
{
  uint64_t v8;
  unint64_t v9;
  char v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  id v16;
  void *v17;
  id v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  int v25;
  int v26;
  char v27;
  uint64_t v28;
  unint64_t v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;
  unint64_t v35;
  char v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;

  if (*(_QWORD *)(a2 + 16))
  {
    v8 = *(_QWORD *)(a1 + 24);
    v9 = *(_QWORD *)(a1 + 32);
    v10 = *(_BYTE *)(a1 + 16);
    v12 = *(unsigned int *)(a1 + 8);
    v11 = *(_DWORD *)(a1 + 12);
    v13 = *(_QWORD *)a1;
    v14 = *(_BYTE *)(a2 + 48);
    v34 = *(_QWORD *)(a2 + 32);
    v23 = *(_QWORD *)(a2 + 40);
    v35 = *(_QWORD *)(a2 + 40);
    v36 = v14;
    v37 = *(_OWORD *)(a2 + 56);
    v38 = *(_OWORD *)(a2 + 72);
    v39 = *(_OWORD *)(a2 + 88);
    v40 = *(_OWORD *)(a2 + 104);
    v41 = *(_OWORD *)(a2 + 120);
    v24 = v13;
    v25 = v12;
    v26 = v11;
    v27 = v10;
    v28 = v8;
    v29 = v9;
    v30 = *(_OWORD *)(a1 + 40);
    v31 = *(_OWORD *)(a1 + 56);
    v32 = *(_OWORD *)(a1 + 72);
    v33 = *(_OWORD *)(a1 + 88);
    if (sub_1D2CA6B2C(&v24))
    {
      v15 = *(_QWORD *)(a3 + 144);
      v16 = objc_allocWithZone(MEMORY[0x1E0D1BD80]);
      sub_1D2C45028(v8, v9);
      v17 = (void *)sub_1D2CAA954();
      v18 = objc_msgSend(v16, sel_initWithParams_x_y_, v15, v12, v17);
      sub_1D2C45258(v8, v9);

      *a5 = v18;
    }
    else
    {
      v34 = 0;
      v35 = 0xE000000000000000;
      sub_1D2CAAFC0();
      sub_1D2CAAE70();
      LODWORD(v24) = v23;
      sub_1D2CAB0B0();
      sub_1D2CAAE70();
      swift_bridgeObjectRelease();
      sub_1D2CAAE70();
      LODWORD(v24) = v12;
      sub_1D2CAB0B0();
      sub_1D2CAAE70();
      swift_bridgeObjectRelease();
      sub_1D2CAAE70();
      v19 = v34;
      v20 = v35;
      sub_1D2C57500();
      v21 = swift_allocError();
      *(_BYTE *)v22 = 9;
      *(_DWORD *)(v22 + 4) = 0;
      *(_BYTE *)(v22 + 8) = 1;
      *(_DWORD *)(v22 + 12) = 0;
      *(_WORD *)(v22 + 16) = 256;
      *(_OWORD *)(v22 + 24) = xmmword_1D2CAFB50;
      *(_QWORD *)(v22 + 40) = 0x80000001D2CB2020;
      *(_QWORD *)(v22 + 48) = 0xD00000000000006BLL;
      *(_QWORD *)(v22 + 56) = 0x80000001D2CB1D00;
      *(_QWORD *)(v22 + 64) = v19;
      *(_QWORD *)(v22 + 72) = v20;
      swift_willThrow();
      *a4 = v21;
    }
  }
  else
  {
    __break(1u);
  }
}

BOOL sub_1D2CA6B2C(uint64_t *a1)
{
  uint64_t *v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  char v13;
  char v14;
  char v15;
  char v17;
  char v18;
  uint64_t v19;

  v19 = *a1;
  v3 = a1[11];
  v2 = a1[12];
  v4 = *v1;
  v5 = v1[5];
  v6 = v1[6];
  v7 = v1[7];
  v8 = v1[8];
  v9 = v1[9];
  v10 = v1[10];
  v12 = v1[11];
  v11 = v1[12];
  sub_1D2C59C44(v5, v6);
  if ((v13 & 1) == 0)
    return 0;
  sub_1D2C59C44(v7, v8);
  if ((v14 & 1) == 0)
    return 0;
  sub_1D2C59C44(v9, v10);
  if ((v15 & 1) == 0)
    return 0;
  if (v11 >> 60 == 15)
  {
    if (v2 >> 60 == 15)
      return v4 == v19;
    goto LABEL_8;
  }
  if (v2 >> 60 == 15)
  {
LABEL_8:
    sub_1D2C69B84(v12, v11);
    sub_1D2C69B84(v3, v2);
    sub_1D2C6BAE4(v12, v11);
    sub_1D2C6BAE4(v3, v2);
    return 0;
  }
  sub_1D2C69B84(v12, v11);
  sub_1D2C69B84(v3, v2);
  sub_1D2C59C44(v12, v11);
  v18 = v17;
  sub_1D2C6BAE4(v3, v2);
  sub_1D2C6BAE4(v12, v11);
  if ((v18 & 1) == 0)
    return 0;
  return v4 == v19;
}

uint64_t sub_1D2CA6CB4()
{
  sub_1D2CA8C94();
  return sub_1D2CAAC30();
}

uint64_t CKSecretSharing.HybridSecretShare.version.getter()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

uint64_t CKSecretSharing.HybridSecretShare.init(_:)@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t result;
  uint64_t v12;
  char *v13;
  int v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  int v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  unint64_t v36;
  __int128 v37;
  __int128 v38;
  uint64_t v39;
  int v40;
  int v41;

  v7 = sub_1D2CAAA08();
  MEMORY[0x1E0C80A78](v7);
  v8 = type metadata accessor for CryptoKitSecretSharing_SecretShare();
  MEMORY[0x1E0C80A78](v8);
  v10 = (char *)&v29 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v39 = 0;
  v37 = 0u;
  v38 = 0u;
  sub_1D2C45028(a1, a2);
  sub_1D2CAA9FC();
  sub_1D2C5AE40(&qword_1EFCA02F8, (uint64_t (*)(uint64_t))type metadata accessor for CryptoKitSecretSharing_SecretShare, (uint64_t)&unk_1D2CAF000);
  sub_1D2CAAAA4();
  if (v3)
    return sub_1D2C45258(a1, a2);
  if (*(_DWORD *)v10 == 1)
  {
    sub_1D2C45258(a1, a2);
    v12 = *(int *)(v8 + 48);
    v13 = &v10[*(int *)(v8 + 44)];
    v14 = *(_DWORD *)v13;
    LODWORD(v13) = v13[4];
    v40 = v14;
    v41 = (int)v13;
    v15 = *(_QWORD *)&v10[v12 + 8];
    v35 = *(_QWORD *)&v10[v12];
    v36 = v15;
    v34 = *((_DWORD *)v10 + 1);
    v16 = *((_QWORD *)v10 + 1);
    v32 = *((_QWORD *)v10 + 2);
    v17 = v32;
    v33 = v16;
    v18 = *((_QWORD *)v10 + 3);
    v20 = *((_QWORD *)v10 + 5);
    v19 = *((_QWORD *)v10 + 6);
    v22 = *((_QWORD *)v10 + 7);
    v21 = *((_QWORD *)v10 + 8);
    v30 = *((_QWORD *)v10 + 4);
    v31 = v21;
    sub_1D2C69B84(v35, v15);
    sub_1D2C45028(v16, v17);
    v23 = v30;
    sub_1D2C45028(v18, v30);
    sub_1D2C45028(v20, v19);
    v24 = v31;
    sub_1D2C45028(v22, v31);
    result = sub_1D2C74E48((uint64_t)v10, (uint64_t (*)(_QWORD))type metadata accessor for CryptoKitSecretSharing_SecretShare);
    *(_QWORD *)a3 = 1;
    v25 = v40;
    *(_DWORD *)(a3 + 8) = v34;
    *(_DWORD *)(a3 + 12) = v25;
    *(_BYTE *)(a3 + 16) = v41;
    v26 = v32;
    *(_QWORD *)(a3 + 24) = v33;
    *(_QWORD *)(a3 + 32) = v26;
    *(_QWORD *)(a3 + 40) = v18;
    *(_QWORD *)(a3 + 48) = v23;
    *(_QWORD *)(a3 + 56) = v20;
    *(_QWORD *)(a3 + 64) = v19;
    *(_QWORD *)(a3 + 72) = v22;
    *(_QWORD *)(a3 + 80) = v24;
    v27 = v36;
    *(_QWORD *)(a3 + 88) = v35;
    *(_QWORD *)(a3 + 96) = v27;
  }
  else
  {
    sub_1D2C57500();
    swift_allocError();
    *(_BYTE *)v28 = 15;
    *(_DWORD *)(v28 + 4) = 0;
    *(_BYTE *)(v28 + 8) = 1;
    *(_DWORD *)(v28 + 12) = 0;
    *(_WORD *)(v28 + 16) = 256;
    *(_OWORD *)(v28 + 24) = xmmword_1D2CAFB60;
    *(_QWORD *)(v28 + 40) = 0xE800000000000000;
    *(_QWORD *)(v28 + 48) = 0xD00000000000006BLL;
    *(_QWORD *)(v28 + 56) = 0x80000001D2CB1D00;
    *(_QWORD *)(v28 + 64) = 0;
    *(_QWORD *)(v28 + 72) = 0xE000000000000000;
    swift_willThrow();
    sub_1D2C45258(a1, a2);
    return sub_1D2C74E48((uint64_t)v10, (uint64_t (*)(_QWORD))type metadata accessor for CryptoKitSecretSharing_SecretShare);
  }
  return result;
}

unint64_t Data.init(secretShare:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  int v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v30;
  int v31;
  int v32;
  int v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;

  v2 = type metadata accessor for CryptoKitSecretSharing_SecretShare();
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)&v30 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = *(_DWORD *)(a1 + 8);
  v31 = *(_DWORD *)(a1 + 12);
  v32 = v5;
  v33 = *(unsigned __int8 *)(a1 + 16);
  v6 = *(_QWORD *)(a1 + 24);
  v7 = *(_QWORD *)(a1 + 32);
  v9 = *(_QWORD *)(a1 + 40);
  v8 = *(_QWORD *)(a1 + 48);
  v36 = *(_QWORD *)(a1 + 56);
  v37 = v8;
  v10 = *(_QWORD *)(a1 + 72);
  v35 = *(_QWORD *)(a1 + 64);
  v11 = *(_QWORD *)(a1 + 88);
  v41 = *(_QWORD *)(a1 + 80);
  v12 = *(_QWORD *)(a1 + 96);
  *(_OWORD *)(v4 + 24) = xmmword_1D2CAD220;
  *(_OWORD *)(v4 + 40) = xmmword_1D2CAD220;
  *(_OWORD *)(v4 + 56) = xmmword_1D2CAD220;
  sub_1D2CAA9E4();
  v13 = v7;
  v14 = v6;
  v15 = &v4[*(int *)(v2 + 44)];
  *(_DWORD *)v15 = 0;
  v15[4] = 1;
  v38 = v2;
  v16 = &v4[*(int *)(v2 + 48)];
  *(_DWORD *)v4 = 1;
  *((_DWORD *)v4 + 1) = v32;
  *((_QWORD *)v4 + 1) = v6;
  *((_QWORD *)v4 + 2) = v7;
  if ((v33 & 1) == 0)
  {
    *(_DWORD *)v15 = v31;
    v15[4] = 0;
  }
  v40 = v12;
  if (v12 >> 60 == 15)
    v17 = 0;
  else
    v17 = v11;
  v34 = v11;
  v18 = 0xC000000000000000;
  if (v12 >> 60 != 15)
    v18 = v12;
  *(_QWORD *)v16 = v17;
  *((_QWORD *)v16 + 1) = v18;
  v20 = v36;
  v19 = v37;
  *((_QWORD *)v4 + 3) = v9;
  *((_QWORD *)v4 + 4) = v19;
  v21 = v35;
  *((_QWORD *)v4 + 5) = v20;
  *((_QWORD *)v4 + 6) = v21;
  v22 = v41;
  *((_QWORD *)v4 + 7) = v10;
  *((_QWORD *)v4 + 8) = v22;
  v23 = v13;
  sub_1D2C45028(v14, v13);
  sub_1D2C69B84(v11, v40);
  sub_1D2C45028(v9, v19);
  sub_1D2C45028(v20, v21);
  v24 = v41;
  sub_1D2C45028(v10, v41);
  sub_1D2C45258(v14, v23);
  sub_1D2C45258(v9, v19);
  sub_1D2C45258(v20, v21);
  sub_1D2C45258(v10, v24);
  sub_1D2C6BAE4(v34, v40);
  sub_1D2C5AE40(&qword_1EFCA02F8, (uint64_t (*)(uint64_t))type metadata accessor for CryptoKitSecretSharing_SecretShare, (uint64_t)&unk_1D2CAF000);
  v25 = v39;
  v26 = sub_1D2CAAAB0();
  if (!v25)
  {
    sub_1D2C5CDA8(v26, v27);
    v19 = v28;
  }
  sub_1D2C74E48((uint64_t)v4, (uint64_t (*)(_QWORD))type metadata accessor for CryptoKitSecretSharing_SecretShare);
  return v19;
}

_BYTE *sub_1D2CA7224@<X0>(_BYTE *result@<X0>, _BYTE *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if (!result)
    goto LABEL_4;
  v4 = a2 - result;
  if (a2 == result)
  {
    result = 0;
LABEL_4:
    v5 = 0xC000000000000000;
    goto LABEL_5;
  }
  if (v4 <= 14)
  {
    result = (_BYTE *)sub_1D2CA7484(result, a2);
    v5 = v7 & 0xFFFFFFFFFFFFFFLL;
  }
  else if ((unint64_t)v4 >= 0x7FFFFFFF)
  {
    result = (_BYTE *)sub_1D2CA7544((uint64_t)result, (uint64_t)a2);
    v5 = v8 | 0x8000000000000000;
  }
  else
  {
    result = (_BYTE *)sub_1D2CA75BC((uint64_t)result, (uint64_t)a2);
    v5 = v6 | 0x4000000000000000;
  }
LABEL_5:
  *a3 = result;
  a3[1] = v5;
  return result;
}

BOOL _s16CryptoKitPrivate15CKSecretSharingO17HybridSecretShareV2eeoiySbAE_AEtFZ_0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  char v8;
  char v9;
  char v10;
  char v11;
  unint64_t v12;
  char v13;
  char v14;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v2 = 0;
  if (*(_QWORD *)a1 == *(_QWORD *)a2 && *(_DWORD *)(a1 + 8) == *(_DWORD *)(a2 + 8))
  {
    v4 = *(_QWORD *)(a1 + 40);
    v3 = *(_QWORD *)(a1 + 48);
    v5 = *(_QWORD *)(a1 + 56);
    v6 = *(_QWORD *)(a1 + 64);
    v7 = *(_BYTE *)(a2 + 16);
    if ((*(_BYTE *)(a1 + 16) & 1) != 0)
    {
      if (!*(_BYTE *)(a2 + 16))
        return 0;
    }
    else
    {
      if (*(_DWORD *)(a1 + 12) != *(_DWORD *)(a2 + 12))
        v7 = 1;
      if ((v7 & 1) != 0)
        return 0;
    }
    v20 = *(_QWORD *)(a1 + 80);
    v21 = *(_QWORD *)(a1 + 72);
    v16 = *(_QWORD *)(a2 + 88);
    v17 = *(_QWORD *)(a1 + 88);
    v18 = *(_QWORD *)(a2 + 96);
    v19 = *(_QWORD *)(a1 + 96);
    sub_1D2C59C44(*(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32));
    if ((v8 & 1) == 0)
      return 0;
    sub_1D2C59C44(v4, v3);
    if ((v9 & 1) == 0)
      return 0;
    sub_1D2C59C44(v5, v6);
    if ((v10 & 1) == 0)
      return 0;
    sub_1D2C59C44(v21, v20);
    if ((v11 & 1) == 0)
      return 0;
    if (v19 >> 60 == 15)
    {
      v12 = v18;
      if (v18 >> 60 == 15)
        return 1;
    }
    else
    {
      v12 = v18;
      if (v18 >> 60 != 15)
      {
        sub_1D2C69B84(v17, v19);
        sub_1D2C69B84(v16, v18);
        sub_1D2C59C44(v17, v19);
        v14 = v13;
        sub_1D2C6BAE4(v16, v18);
        sub_1D2C6BAE4(v17, v19);
        return (v14 & 1) != 0;
      }
    }
    sub_1D2C69B84(v17, v19);
    sub_1D2C69B84(v16, v12);
    sub_1D2C6BAE4(v17, v19);
    sub_1D2C6BAE4(v16, v12);
    return 0;
  }
  return v2;
}

uint64_t sub_1D2CA7484(_BYTE *__src, _BYTE *a2)
{
  unint64_t v2;
  _BYTE __dst[14];
  char v5;
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  if (__src)
    v2 = a2 - __src;
  else
    v2 = 0;
  if ((v2 & 0x8000000000000000) != 0)
  {
    __break(1u);
LABEL_11:
    __break(1u);
  }
  if (v2 > 0xFF)
    goto LABEL_11;
  memset(__dst, 0, sizeof(__dst));
  v5 = v2;
  if (__src && a2 != __src)
    memcpy(__dst, __src, a2 - __src);
  return *(_QWORD *)__dst;
}

uint64_t sub_1D2CA7544(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  if (a1)
    v2 = a2 - a1;
  else
    v2 = 0;
  sub_1D2CAA8A0();
  swift_allocObject();
  result = sub_1D2CAA858();
  if (v2 < 0)
  {
    __break(1u);
  }
  else
  {
    sub_1D2CAA90C();
    result = swift_allocObject();
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = v2;
  }
  return result;
}

uint64_t sub_1D2CA75BC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  if (a1)
    v2 = a2 - a1;
  else
    v2 = 0;
  sub_1D2CAA8A0();
  swift_allocObject();
  result = sub_1D2CAA858();
  if (v2 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v2 > 0x7FFFFFFF)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  if ((v2 & 0x80000000) == 0)
    return v2 << 32;
LABEL_10:
  __break(1u);
  return result;
}

uint64_t sub_1D2CA763C(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t *__return_ptr, uint64_t, uint64_t))
{
  uint64_t result;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  result = sub_1D2CAA864();
  v8 = result;
  if (result)
  {
    result = sub_1D2CAA888();
    if (__OFSUB__(a1, result))
    {
LABEL_13:
      __break(1u);
      return result;
    }
    v8 += a1 - result;
  }
  v9 = __OFSUB__(a2, a1);
  v10 = a2 - a1;
  if (v9)
  {
    __break(1u);
    goto LABEL_13;
  }
  v11 = sub_1D2CAA87C();
  if (v8)
  {
    if (v11 >= v10)
      v12 = v10;
    else
      v12 = v11;
    v13 = v8;
  }
  else
  {
    v13 = 0;
    v12 = 0;
  }
  a4(&v14, v13, v12);
  return 0;
}

uint64_t sub_1D2CA76E8(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;

  if (!a2)
  {
    swift_release();
    return 0;
  }
  if (a2 > 14)
  {
    if ((unint64_t)a2 < 0x7FFFFFFF)
      return a2 << 32;
    sub_1D2CAA90C();
    v3 = swift_allocObject();
    *(_QWORD *)(v3 + 16) = 0;
    *(_QWORD *)(v3 + 24) = a2;
    return v3;
  }
  if (a2 < 0)
  {
    __break(1u);
  }
  else
  {
    v4 = (_BYTE *)sub_1D2CAA864();
    if (!v4)
    {
LABEL_10:
      v5 = sub_1D2CAA87C();
      if (v5 >= a2)
        v6 = a2;
      else
        v6 = v5;
      v7 = &v4[v6];
      if (v4)
        v8 = v7;
      else
        v8 = 0;
      v3 = sub_1D2CA7484(v4, v8);
      swift_release();
      return v3;
    }
    result = sub_1D2CAA888();
    if (!__OFSUB__(0, result))
    {
      v4 -= result;
      goto LABEL_10;
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_1D2CA77CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t result;
  unint64_t *i;
  char v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD v23[2];
  char v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;

  v4 = *(_QWORD *)(a1 + 16);
  result = MEMORY[0x1E0DEE9D8];
  if (v4)
  {
    v36 = MEMORY[0x1E0DEE9D8];
    sub_1D2CAB020();
    for (i = (unint64_t *)(a1 + 64); ; i += 13)
    {
      v18 = v4;
      v7 = *((_BYTE *)i - 16);
      v9 = *(i - 1);
      v8 = *i;
      v11 = i[1];
      v10 = i[2];
      v13 = i[3];
      v12 = i[4];
      v14 = i[5];
      v15 = i[7];
      v19 = i[6];
      v20 = i[8];
      v23[0] = *(i - 4);
      v23[1] = *(i - 3);
      v24 = v7;
      v25 = v9;
      v26 = v8;
      v27 = v11;
      v28 = v10;
      v29 = v13;
      v30 = v12;
      v31 = v14;
      v32 = v19;
      v33 = v15;
      v34 = v20;
      sub_1D2C45028(v9, v8);
      sub_1D2C45028(v11, v10);
      sub_1D2C45028(v13, v12);
      sub_1D2C45028(v14, v19);
      sub_1D2C69B84(v15, v20);
      sub_1D2CA6864((uint64_t)v23, a2, a3, &v22, &v35);
      if (v21)
        break;
      v21 = 0;
      sub_1D2C45258(v9, v8);
      sub_1D2C45258(v11, v10);
      sub_1D2C45258(v13, v12);
      sub_1D2C45258(v14, v19);
      sub_1D2C6BAE4(v15, v20);
      sub_1D2CAB008();
      sub_1D2CAB02C();
      sub_1D2CAB038();
      sub_1D2CAB014();
      v4 = v18 - 1;
      if (v18 == 1)
        return v36;
    }
    sub_1D2C45258(v9, v8);
    sub_1D2C45258(v11, v10);
    sub_1D2C45258(v13, v12);
    sub_1D2C45258(v14, v19);
    sub_1D2C6BAE4(v15, v20);
    return swift_release();
  }
  return result;
}

uint64_t sub_1D2CA79BC(uint64_t result)
{
  unint64_t v1;

  if (result)
  {
    v1 = result;
    if (result < 15)
    {
      return 0;
    }
    else
    {
      sub_1D2CAA8A0();
      swift_allocObject();
      sub_1D2CAA894();
      if (v1 >= 0x7FFFFFFF)
      {
        sub_1D2CAA90C();
        result = swift_allocObject();
        *(_QWORD *)(result + 16) = 0;
        *(_QWORD *)(result + 24) = 0;
      }
      else
      {
        return 0;
      }
    }
  }
  return result;
}

uint64_t type metadata accessor for CKSecretSharing.HybridGenerator()
{
  uint64_t result;

  result = qword_1EFCA0398;
  if (!qword_1EFCA0398)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t sub_1D2CA7A8C@<X0>(uint64_t a1@<X0>, _DWORD *a2@<X8>)
{
  return sub_1D2CA1F30(a1, a2);
}

uint64_t sub_1D2CA7AA4(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  int v20;
  void (*v21)(char *, uint64_t);
  void (*v22)(char *, uint64_t, uint64_t);
  char *v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  char v30;
  char v31;
  void (*v32)(char *, uint64_t);
  char *v33;
  char *v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  char v41;
  char v42;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  char *v48;
  uint64_t v49;
  char *v50;
  unsigned __int8 v51;

  v49 = a2;
  v3 = sub_1D2CAAC78();
  v4 = *(_QWORD *)(v3 - 8);
  v5 = MEMORY[0x1E0C80A78](v3);
  v48 = (char *)&v44 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = MEMORY[0x1E0C80A78](v5);
  v47 = (char *)&v44 - v8;
  v9 = MEMORY[0x1E0C80A78](v7);
  v44 = (char *)&v44 - v10;
  MEMORY[0x1E0C80A78](v9);
  v12 = (char *)&v44 - v11;
  v13 = sub_1D2CAAC3C();
  v14 = *(_QWORD *)(v13 - 8);
  v15 = MEMORY[0x1E0C80A78](v13);
  v17 = (char *)&v44 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15);
  v19 = (char *)&v44 - v18;
  sub_1D2CAAC6C();
  sub_1D2CAAC6C();
  v50 = v17;
  sub_1D2CAAC24();
  v20 = v51;
  v21 = *(void (**)(char *, uint64_t))(v14 + 8);
  v21(v17, v13);
  v21(v19, v13);
  v45 = v4;
  v46 = a1;
  v22 = *(void (**)(char *, uint64_t, uint64_t))(v4 + 16);
  v23 = v44;
  v22(v12, a1, v3);
  v22(v23, v49, v3);
  if (v20 == 1)
  {
    v24 = sub_1D2CAAC48();
    v26 = v25;
    v27 = sub_1D2CAAC48();
    v29 = v28;
    sub_1D2C59C44(v24, v26);
    v31 = v30;
    sub_1D2C45258(v27, v29);
    sub_1D2C45258(v24, v26);
  }
  else
  {
    v31 = 0;
  }
  v32 = *(void (**)(char *, uint64_t))(v45 + 8);
  v32(v23, v3);
  v32(v12, v3);
  v33 = v47;
  v22(v47, v46, v3);
  v34 = v48;
  v22(v48, v49, v3);
  if ((v31 & 1) != 0)
  {
    v35 = sub_1D2CAAC54();
    v37 = v36;
    v38 = sub_1D2CAAC54();
    v40 = v39;
    sub_1D2C59C44(v35, v37);
    v42 = v41;
    sub_1D2C45258(v38, v40);
    sub_1D2C45258(v35, v37);
  }
  else
  {
    v42 = 0;
  }
  v32(v34, v3);
  v32(v33, v3);
  return v42 & 1;
}

uint64_t sub_1D2CA7D80(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  const char *v5;
  int64_t v6;
  uint64_t v7;
  unint64_t v8;
  char v9;
  char v10;
  char v11;
  uint64_t v12;

  if (*(_DWORD *)a1 != 1)
  {
    sub_1D2C57500();
    swift_allocError();
    *(_BYTE *)v4 = 17;
    *(_DWORD *)(v4 + 4) = 0;
    *(_BYTE *)(v4 + 8) = 1;
    *(_DWORD *)(v4 + 12) = 0;
    *(_WORD *)(v4 + 16) = 256;
    *(_OWORD *)(v4 + 24) = xmmword_1D2CAFB70;
    *(_QWORD *)(v4 + 40) = 0xEF293A6675626F74;
    *(_QWORD *)(v4 + 48) = 0xD00000000000006BLL;
    *(_QWORD *)(v4 + 56) = 0x80000001D2CB1D00;
    *(_QWORD *)(v4 + 64) = 0xD00000000000004BLL;
    v5 = "Unsupported Version in Protobuf Deserialized HybridSecretSharingSharedState";
    goto LABEL_6;
  }
  v2 = v1;
  if ((*(_BYTE *)(a1 + 16) & 1) == 0 && *(_QWORD *)(a1 + 8))
  {
    sub_1D2C57500();
    swift_allocError();
    *(_BYTE *)v4 = 17;
    *(_DWORD *)(v4 + 4) = 0;
    *(_BYTE *)(v4 + 8) = 1;
    *(_DWORD *)(v4 + 12) = 0;
    *(_WORD *)(v4 + 16) = 256;
    *(_OWORD *)(v4 + 24) = xmmword_1D2CAFB80;
    *(_QWORD *)(v4 + 40) = 0xEF293A6675626F74;
    *(_QWORD *)(v4 + 48) = 0xD00000000000006BLL;
    *(_QWORD *)(v4 + 56) = 0x80000001D2CB1D00;
    *(_QWORD *)(v4 + 64) = 0xD000000000000066;
    v5 = "Unsupported ciphersuite in Protobuf Deserialized HybridSecretSharingSharedState. Must be .aesGcm256128";
LABEL_6:
    *(_QWORD *)(v4 + 72) = (unint64_t)(v5 - 32) | 0x8000000000000000;
    swift_willThrow();
    goto LABEL_8;
  }
  v6 = *(unsigned int *)(a1 + 20);
  v7 = *(_QWORD *)(a1 + 32);
  v8 = *(_QWORD *)(a1 + 40);
  v9 = *(_BYTE *)(a1 + 24);
  v10 = *(_BYTE *)(a1 + 17);
  v11 = *(_BYTE *)(a1 + 48);
  type metadata accessor for CKSecretSharing.CKHybridSecretShareInternalState();
  swift_allocObject();
  sub_1D2C45028(v7, v8);
  sub_1D2CA03F0(v6, v7, v8, v9, v10, v12, v11);
  if (!v1)
    __asm { BR              X12 }
LABEL_8:
  sub_1D2C74E48(a1, type metadata accessor for CryptoKitSecretSharing_HybridSecretSharingSharedState);
  return v2;
}

void sub_1D2CA7FB4()
{
  uint64_t v0;
  void *v1;
  int v2;
  int v3;
  uint64_t v4;

  swift_retain();
  v1 = (void *)swift_slowAlloc();
  ccss_shamir_share_init();
  sub_1D2CAA9A8();
  swift_release();
  v2 = ccss_shamir_share_generator_deserialize();
  if (v2)
  {
    v3 = v2;
    sub_1D2CAAFC0();
    sub_1D2CAAE70();
    sub_1D2CAB0B0();
    sub_1D2CAAE70();
    swift_bridgeObjectRelease();
    sub_1D2C57500();
    swift_allocError();
    *(_BYTE *)v4 = 3;
    *(_DWORD *)(v4 + 4) = v3;
    *(_BYTE *)(v4 + 8) = 0;
    *(_DWORD *)(v4 + 12) = 0;
    *(_WORD *)(v4 + 16) = 256;
    *(_OWORD *)(v4 + 24) = xmmword_1D2CAFB90;
    *(_QWORD *)(v4 + 40) = 0xEF293A6675626F74;
    *(_QWORD *)(v4 + 48) = 0xD00000000000006BLL;
    *(_QWORD *)(v4 + 56) = 0x80000001D2CB1D00;
    *(_QWORD *)(v4 + 64) = 0;
    *(_QWORD *)(v4 + 72) = 0xE000000000000000;
    swift_willThrow();
    memset_s(v1, 8uLL, 0, 8uLL);
    MEMORY[0x1D8245FD4](v1, -1, -1);
    sub_1D2C74E48(v0, type metadata accessor for CryptoKitSecretSharing_HybridSecretSharingSharedState);
    swift_release();
  }
  else
  {
    memset_s(v1, 8uLL, 0, 8uLL);
    MEMORY[0x1D8245FD4](v1, -1, -1);
    sub_1D2C74E48(v0, type metadata accessor for CryptoKitSecretSharing_HybridSecretSharingSharedState);
  }
  JUMPOUT(0x1D2CA7F64);
}

uint64_t sub_1D2CA81B8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for CKSecretSharing.HybridGenerator();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

void sub_1D2CA81FC(unsigned int *a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;

  CKSecretSharing.HybridGenerator.generateShare(shareIndex:)(*a1, a3);
  if (v3)
    *a2 = v3;
}

ValueMetadata *type metadata accessor for CKSecretSharing()
{
  return &type metadata for CKSecretSharing;
}

uint64_t *initializeBufferWithCopyOfBuffer for CKSecretSharing.HybridGenerator(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v3;
  uint64_t v4;
  uint64_t *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  void (*v12)(char *, char *, uint64_t);
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;

  v3 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  v4 = *a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    v7 = (uint64_t *)(v4 + ((v3 + 16) & ~(unint64_t)v3));
    swift_retain();
  }
  else
  {
    v7 = a1;
    v8 = *(int *)(a3 + 20);
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = sub_1D2CAABE8();
    v12 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16);
    swift_retain();
    v12(v9, v10, v11);
    v13 = *(int *)(a3 + 24);
    v14 = (char *)v7 + v13;
    v15 = (char *)a2 + v13;
    v16 = sub_1D2CAAC78();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v16 - 8) + 16))(v14, v15, v16);
  }
  return v7;
}

uint64_t destroy for CKSecretSharing.HybridGenerator(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  swift_release();
  v4 = a1 + *(int *)(a2 + 20);
  v5 = sub_1D2CAABE8();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  v6 = a1 + *(int *)(a2 + 24);
  v7 = sub_1D2CAAC78();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v6, v7);
}

_QWORD *initializeWithCopy for CKSecretSharing.HybridGenerator(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, char *, uint64_t);
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;

  *a1 = *a2;
  v6 = *(int *)(a3 + 20);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = sub_1D2CAABE8();
  v10 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 16);
  swift_retain();
  v10(v7, v8, v9);
  v11 = *(int *)(a3 + 24);
  v12 = (char *)a1 + v11;
  v13 = (char *)a2 + v11;
  v14 = sub_1D2CAAC78();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(v12, v13, v14);
  return a1;
}

_QWORD *assignWithCopy for CKSecretSharing.HybridGenerator(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;

  *a1 = *a2;
  swift_retain();
  swift_release();
  v6 = *(int *)(a3 + 20);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = sub_1D2CAABE8();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 24))(v7, v8, v9);
  v10 = *(int *)(a3 + 24);
  v11 = (char *)a1 + v10;
  v12 = (char *)a2 + v10;
  v13 = sub_1D2CAAC78();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 24))(v11, v12, v13);
  return a1;
}

_QWORD *initializeWithTake for CKSecretSharing.HybridGenerator(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;

  *a1 = *a2;
  v6 = *(int *)(a3 + 20);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = sub_1D2CAABE8();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v7, v8, v9);
  v10 = *(int *)(a3 + 24);
  v11 = (char *)a1 + v10;
  v12 = (char *)a2 + v10;
  v13 = sub_1D2CAAC78();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 32))(v11, v12, v13);
  return a1;
}

_QWORD *assignWithTake for CKSecretSharing.HybridGenerator(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;

  *a1 = *a2;
  swift_release();
  v6 = *(int *)(a3 + 20);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = sub_1D2CAABE8();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 40))(v7, v8, v9);
  v10 = *(int *)(a3 + 24);
  v11 = (char *)a1 + v10;
  v12 = (char *)a2 + v10;
  v13 = sub_1D2CAAC78();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 40))(v11, v12, v13);
  return a1;
}

uint64_t getEnumTagSinglePayload for CKSecretSharing.HybridGenerator()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1D2CA8620(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)a1;
    if (*(_QWORD *)a1 >= 0xFFFFFFFFuLL)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = sub_1D2CAABE8();
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
    {
      v10 = v8;
      v11 = *(int *)(a3 + 20);
    }
    else
    {
      v10 = sub_1D2CAAC78();
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a3 + 24);
    }
    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(v9 + 48))(&a1[v11], a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for CKSecretSharing.HybridGenerator()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

char *sub_1D2CA86CC(char *result, uint64_t a2, int a3, uint64_t a4)
{
  char *v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)result = (a2 - 1);
  }
  else
  {
    v8 = sub_1D2CAABE8();
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      v10 = v8;
      v11 = *(int *)(a4 + 20);
    }
    else
    {
      v10 = sub_1D2CAAC78();
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a4 + 24);
    }
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56))(&v5[v11], a2, a2, v10);
  }
  return result;
}

uint64_t sub_1D2CA8768()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;

  result = sub_1D2CAABE8();
  if (v1 <= 0x3F)
  {
    result = sub_1D2CAAC78();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for CKSecretSharing.HybridReconstructor()
{
  return &type metadata for CKSecretSharing.HybridReconstructor;
}

uint64_t destroy for CKSecretSharing.HybridSecretShare(_QWORD *a1)
{
  uint64_t result;
  unint64_t v3;

  sub_1D2C45258(a1[3], a1[4]);
  sub_1D2C45258(a1[5], a1[6]);
  sub_1D2C45258(a1[7], a1[8]);
  result = sub_1D2C45258(a1[9], a1[10]);
  v3 = a1[12];
  if (v3 >> 60 != 15)
    return sub_1D2C45258(a1[11], v3);
  return result;
}

uint64_t initializeWithCopy for CKSecretSharing.HybridSecretShare(uint64_t a1, uint64_t a2)
{
  int v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t *v13;
  unint64_t v14;
  uint64_t v15;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v4 = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 12) = v4;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v5 = *(_QWORD *)(a2 + 24);
  v6 = *(_QWORD *)(a2 + 32);
  sub_1D2C45028(v5, v6);
  *(_QWORD *)(a1 + 24) = v5;
  *(_QWORD *)(a1 + 32) = v6;
  v7 = *(_QWORD *)(a2 + 40);
  v8 = *(_QWORD *)(a2 + 48);
  sub_1D2C45028(v7, v8);
  *(_QWORD *)(a1 + 40) = v7;
  *(_QWORD *)(a1 + 48) = v8;
  v9 = *(_QWORD *)(a2 + 56);
  v10 = *(_QWORD *)(a2 + 64);
  sub_1D2C45028(v9, v10);
  *(_QWORD *)(a1 + 56) = v9;
  *(_QWORD *)(a1 + 64) = v10;
  v11 = *(_QWORD *)(a2 + 72);
  v12 = *(_QWORD *)(a2 + 80);
  sub_1D2C45028(v11, v12);
  *(_QWORD *)(a1 + 72) = v11;
  *(_QWORD *)(a1 + 80) = v12;
  v13 = (uint64_t *)(a2 + 88);
  v14 = *(_QWORD *)(a2 + 96);
  if (v14 >> 60 == 15)
  {
    *(_OWORD *)(a1 + 88) = *(_OWORD *)v13;
  }
  else
  {
    v15 = *v13;
    sub_1D2C45028(*v13, v14);
    *(_QWORD *)(a1 + 88) = v15;
    *(_QWORD *)(a1 + 96) = v14;
  }
  return a1;
}

uint64_t assignWithCopy for CKSecretSharing.HybridSecretShare(uint64_t a1, uint64_t a2)
{
  int v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t *v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  v4 = *(_DWORD *)(a2 + 12);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_DWORD *)(a1 + 12) = v4;
  v5 = *(_QWORD *)(a2 + 24);
  v6 = *(_QWORD *)(a2 + 32);
  sub_1D2C45028(v5, v6);
  v7 = *(_QWORD *)(a1 + 24);
  v8 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 24) = v5;
  *(_QWORD *)(a1 + 32) = v6;
  sub_1D2C45258(v7, v8);
  v9 = *(_QWORD *)(a2 + 40);
  v10 = *(_QWORD *)(a2 + 48);
  sub_1D2C45028(v9, v10);
  v11 = *(_QWORD *)(a1 + 40);
  v12 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 40) = v9;
  *(_QWORD *)(a1 + 48) = v10;
  sub_1D2C45258(v11, v12);
  v13 = *(_QWORD *)(a2 + 56);
  v14 = *(_QWORD *)(a2 + 64);
  sub_1D2C45028(v13, v14);
  v15 = *(_QWORD *)(a1 + 56);
  v16 = *(_QWORD *)(a1 + 64);
  *(_QWORD *)(a1 + 56) = v13;
  *(_QWORD *)(a1 + 64) = v14;
  sub_1D2C45258(v15, v16);
  v17 = *(_QWORD *)(a2 + 72);
  v18 = *(_QWORD *)(a2 + 80);
  sub_1D2C45028(v17, v18);
  v19 = *(_QWORD *)(a1 + 72);
  v20 = *(_QWORD *)(a1 + 80);
  *(_QWORD *)(a1 + 72) = v17;
  *(_QWORD *)(a1 + 80) = v18;
  sub_1D2C45258(v19, v20);
  v21 = (uint64_t *)(a2 + 88);
  v22 = *(_QWORD *)(a2 + 96);
  if (*(_QWORD *)(a1 + 96) >> 60 != 15)
  {
    if (v22 >> 60 != 15)
    {
      v24 = *v21;
      sub_1D2C45028(*v21, v22);
      v25 = *(_QWORD *)(a1 + 88);
      v26 = *(_QWORD *)(a1 + 96);
      *(_QWORD *)(a1 + 88) = v24;
      *(_QWORD *)(a1 + 96) = v22;
      sub_1D2C45258(v25, v26);
      return a1;
    }
    sub_1D2C93CE8(a1 + 88);
    goto LABEL_6;
  }
  if (v22 >> 60 == 15)
  {
LABEL_6:
    *(_OWORD *)(a1 + 88) = *(_OWORD *)v21;
    return a1;
  }
  v23 = *v21;
  sub_1D2C45028(*v21, v22);
  *(_QWORD *)(a1 + 88) = v23;
  *(_QWORD *)(a1 + 96) = v22;
  return a1;
}

__n128 __swift_memcpy104_8(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __n128 result;
  __int128 v5;
  __int128 v6;

  v2 = *a2;
  v3 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)a1 = v2;
  result = (__n128)a2[3];
  v5 = a2[4];
  v6 = a2[5];
  *(_QWORD *)(a1 + 96) = *((_QWORD *)a2 + 12);
  *(_OWORD *)(a1 + 64) = v5;
  *(_OWORD *)(a1 + 80) = v6;
  *(__n128 *)(a1 + 48) = result;
  return result;
}

uint64_t assignWithTake for CKSecretSharing.HybridSecretShare(uint64_t a1, uint64_t a2)
{
  int v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v4 = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 12) = v4;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v5 = *(_QWORD *)(a1 + 24);
  v6 = *(_QWORD *)(a1 + 32);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  sub_1D2C45258(v5, v6);
  v7 = *(_QWORD *)(a1 + 40);
  v8 = *(_QWORD *)(a1 + 48);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  sub_1D2C45258(v7, v8);
  v9 = *(_QWORD *)(a1 + 56);
  v10 = *(_QWORD *)(a1 + 64);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  sub_1D2C45258(v9, v10);
  v11 = *(_QWORD *)(a1 + 72);
  v12 = *(_QWORD *)(a1 + 80);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  sub_1D2C45258(v11, v12);
  v13 = (_QWORD *)(a2 + 88);
  v14 = *(_QWORD *)(a1 + 96);
  if (v14 >> 60 != 15)
  {
    v15 = *(_QWORD *)(a2 + 96);
    if (v15 >> 60 != 15)
    {
      v16 = *(_QWORD *)(a1 + 88);
      *(_QWORD *)(a1 + 88) = *v13;
      *(_QWORD *)(a1 + 96) = v15;
      sub_1D2C45258(v16, v14);
      return a1;
    }
    sub_1D2C93CE8(a1 + 88);
  }
  *(_OWORD *)(a1 + 88) = *(_OWORD *)v13;
  return a1;
}

uint64_t getEnumTagSinglePayload for CKSecretSharing.HybridSecretShare(uint64_t a1, unsigned int a2)
{
  unsigned int v3;

  if (!a2)
    return 0;
  if (a2 >= 0xD && *(_BYTE *)(a1 + 104))
    return (*(_DWORD *)a1 + 13);
  v3 = (((*(_QWORD *)(a1 + 32) >> 60) >> 2) & 0xFFFFFFF3 | (4 * ((*(_QWORD *)(a1 + 32) >> 60) & 3))) ^ 0xF;
  if (v3 >= 0xC)
    v3 = -1;
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for CKSecretSharing.HybridSecretShare(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xC)
  {
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 - 13;
    if (a3 >= 0xD)
      *(_BYTE *)(result + 104) = 1;
  }
  else
  {
    if (a3 >= 0xD)
      *(_BYTE *)(result + 104) = 0;
    if (a2)
    {
      *(_QWORD *)(result + 24) = 0;
      *(_QWORD *)(result + 32) = (unint64_t)(((-a2 >> 2) & 3) - 4 * a2) << 60;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for CKSecretSharing.HybridSecretShare()
{
  return &type metadata for CKSecretSharing.HybridSecretShare;
}

uint64_t sub_1D2CA8C3C()
{
  return sub_1D2CAAC24();
}

uint64_t sub_1D2CA8C7C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, BOOL *a3@<X8>)
{
  uint64_t v3;

  return sub_1D2C9FA28(a1, a2, *(_QWORD *)(v3 + 16), *(_QWORD *)(v3 + 24), a3);
}

unint64_t sub_1D2CA8C94()
{
  unint64_t result;

  result = qword_1EFCA03A8[0];
  if (!qword_1EFCA03A8[0])
  {
    result = MEMORY[0x1D8245F38](MEMORY[0x1E0CB1AA0], MEMORY[0x1E0DEAC20]);
    atomic_store(result, qword_1EFCA03A8);
  }
  return result;
}

uint64_t sub_1D2CA8CD8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_1D2CA01A8(a1, a2, *(_QWORD *)(v2 + 16));
}

uint64_t sub_1D2CA8CF0(uint64_t a1)
{
  return sub_1D2CA0278(a1);
}

uint64_t sub_1D2CA8D08(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1D2CA8D20(a1, a2, a3) & 1;
}

uint64_t sub_1D2CA8D20(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v7;

  swift_beginAccess();
  result = a2 - a1;
  if (a1)
    v7 = a2 - a1;
  else
    v7 = 0;
  if (v7 != *(_QWORD *)(a3 + 16))
    return 0;
  if (a1)
    return cc_cmp_safe() == 0;
  __break(1u);
  return result;
}

uint64_t SymmetricKey.init<A>(data:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t result;

  v6 = sub_1D2C49F80();
  result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 8))(a1, a2);
  *a3 = v6;
  return result;
}

uint64_t SymmetricKeySize.bitCount.getter()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

void static SymmetricKeySize.bits128.getter(_QWORD *a1@<X8>)
{
  *a1 = 128;
}

CryptoKitPrivate::SymmetricKeySize __swiftcall SymmetricKeySize.init(bitCount:)(CryptoKitPrivate::SymmetricKeySize bitCount)
{
  CryptoKitPrivate::SymmetricKeySize *v1;

  if (bitCount.bitCount < 1 || (bitCount.bitCount & 7) != 0)
    __break(1u);
  else
    v1->bitCount = bitCount.bitCount;
  return bitCount;
}

void static SymmetricKeySize.bits192.getter(_QWORD *a1@<X8>)
{
  *a1 = 192;
}

void static SymmetricKeySize.bits256.getter(_QWORD *a1@<X8>)
{
  *a1 = 256;
}

uint64_t SymmetricKey.withUnsafeBytes<A>(_:)(uint64_t (*a1)(uint64_t, uint64_t), uint64_t a2)
{
  uint64_t *v2;

  return sub_1D2C489F8(a1, a2, *v2);
}

uint64_t SymmetricKey.init(size:)@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t result;

  v3 = *a1;
  if ((unint64_t)(*a1 + 7) > 0xE)
  {
    if (v3 < 0)
      v3 = *a1 + 7;
    result = sub_1D2C4A3AC(v3 >> 3);
  }
  else
  {
    if (qword_1ED985918 != -1)
      swift_once();
    result = swift_retain();
  }
  *a2 = result;
  return result;
}

uint64_t SymmetricKey.bitCount.getter()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t result;
  unint64_t v3;

  v1 = *v0;
  result = swift_beginAccess();
  v3 = *(_QWORD *)(v1 + 16);
  if (!(v3 >> 60))
    return 8 * v3;
  __break(1u);
  return result;
}

uint64_t sub_1D2CA8F20(uint64_t (*a1)(uint64_t, uint64_t), uint64_t a2)
{
  return SymmetricKey.withUnsafeBytes<A>(_:)(a1, a2);
}

uint64_t static SymmetricKey.== infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a1;
  v3 = *a2;
  swift_beginAccess();
  return sub_1D2CA8D20(v2 + 32, v2 + 32 + *(_QWORD *)(v2 + 16), v3) & 1;
}

uint64_t sub_1D2CA8F94(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a1;
  v3 = *a2;
  swift_beginAccess();
  return sub_1D2CA8D20(v2 + 32, v2 + 32 + *(_QWORD *)(v2 + 16), v3) & 1;
}

ValueMetadata *type metadata accessor for SymmetricKeySize()
{
  return &type metadata for SymmetricKeySize;
}

ValueMetadata *type metadata accessor for SymmetricKey()
{
  return &type metadata for SymmetricKey;
}

uint64_t _s6ClientVMa(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&_s6ClientVMn);
}

void sub_1D2CA9020(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED985DC8);
  MEMORY[0x1E0C80A78](v3);
  __asm { BR              X10 }
}

uint64_t sub_1D2CA90B0()
{
  unint64_t v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  sub_1D2C45028(v3, v1);
  sub_1D2C45028(v3, v1);
  sub_1D2C45028(v2, v0);
  sub_1D2CAA99C();
  v4 = sub_1D2C45258(v3, v1);
  return ((uint64_t (*)(uint64_t))((char *)sub_1D2CA9120 + 4 * byte_1D2CAFD84[v0 >> 62]))(v4);
}

char *sub_1D2CA9120()
{
  unint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  char *v6;
  char v8;
  char v9;
  unint64_t v10;
  unint64_t v11;

  sub_1D2C45028(v3, v0);
  sub_1D2CAA99C();
  sub_1D2C45258(v3, v0);
  sub_1D2CAA990();
  sub_1D2C7A0F0();
  sub_1D2CAAFA8();
  v5 = *(_BYTE *)(v4 - 65);
  *(_QWORD *)(v4 - 96) = v1;
  v6 = (char *)MEMORY[0x1E0DEE9D8];
  if ((v5 & 1) == 0)
  {
    do
    {
      v8 = *(_BYTE *)(v4 - 66);
      sub_1D2CAAFA8();
      if ((*(_BYTE *)(v4 - 67) & 1) != 0)
        break;
      v9 = *(_BYTE *)(v4 - 68);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v6 = sub_1D2C71768(0, *((_QWORD *)v6 + 2) + 1, 1, v6);
      v11 = *((_QWORD *)v6 + 2);
      v10 = *((_QWORD *)v6 + 3);
      if (v11 >= v10 >> 1)
        v6 = sub_1D2C71768((char *)(v10 > 1), v11 + 1, 1, v6);
      *((_QWORD *)v6 + 2) = v11 + 1;
      v6[v11 + 32] = v9 ^ v8;
      sub_1D2CAAFA8();
    }
    while ((*(_BYTE *)(v4 - 65) & 1) == 0);
  }
  *(_BYTE *)(v2 + *(int *)(*(_QWORD *)(v4 - 96) + 56)) = 1;
  sub_1D2CA9404(v2);
  return v6;
}

void sub_1D2CA928C(uint64_t a1, uint64_t a2)
{
  __asm { BR              X11 }
}

uint64_t sub_1D2CA92D4()
{
  unint64_t v0;

  return ((uint64_t (*)(void))((char *)&loc_1D2CA930C + dword_1D2CA93F4[v0 >> 62]))();
}

uint64_t sub_1D2CA931C@<X0>(uint64_t a1@<X8>)
{
  unint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  if (a1 != BYTE6(v1))
  {
    __break(1u);
    JUMPOUT(0x1D2CA93D4);
  }
  sub_1D2C45028(v4, v3);
  sub_1D2C45028(v2, v1);
  sub_1D2CA9020(v4, v3);
  v6 = v5;
  sub_1D2C45258(v4, v3);
  sub_1D2C45258(v2, v1);
  v7 = sub_1D2C6783C(v6);
  swift_bridgeObjectRelease();
  return v7;
}

uint64_t sub_1D2CA9404(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED985DC8);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t storeEnumTagSinglePayload for Hash2FieldErrors(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_1D2CA9484 + 4 * byte_1D2CAFD88[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_1D2CA94A4 + 4 * byte_1D2CAFD8D[v4]))();
}

_BYTE *sub_1D2CA9484(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_1D2CA94A4(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1D2CA94AC(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1D2CA94B4(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1D2CA94BC(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1D2CA94C4(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for Hash2FieldErrors()
{
  return &type metadata for Hash2FieldErrors;
}

unint64_t sub_1D2CA94E4()
{
  unint64_t result;

  result = qword_1EFCA0430[0];
  if (!qword_1EFCA0430[0])
  {
    result = MEMORY[0x1D8245F38](&unk_1D2CAFDF4, &type metadata for Hash2FieldErrors);
    atomic_store(result, qword_1EFCA0430);
  }
  return result;
}

void HE.EvaluationKeyConfig.encryptionParams.getter(_BYTE *a1@<X8>)
{
  _BYTE *v1;
  char v2;

  v2 = v1[1];
  *a1 = *v1;
  a1[1] = v2;
}

uint64_t HE.EvaluationKeyConfig.galoisElements.getter()
{
  return sub_1D2CAAF0C();
}

uint64_t HE.EvaluationKeyConfig.hasRelinKey.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 16);
}

_BYTE *HE.EvaluationKeyConfig.init(encryptionParams:galoisElements:hasRelinKey:)@<X0>(_BYTE *result@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X8>)
{
  char v4;

  v4 = result[1];
  *(_BYTE *)a4 = *result;
  *(_BYTE *)(a4 + 1) = v4;
  *(_QWORD *)(a4 + 8) = a2;
  *(_BYTE *)(a4 + 16) = a3;
  return result;
}

uint64_t _s19EvaluationKeyConfigVwxx()
{
  return swift_bridgeObjectRelease();
}

uint64_t _s19EvaluationKeyConfigVwCP_0(uint64_t a1, uint64_t a2)
{
  *(_WORD *)a1 = *(_WORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  sub_1D2CAAF0C();
  return a1;
}

uint64_t _s19EvaluationKeyConfigVwca(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_BYTE *)(a1 + 1) = *(_BYTE *)(a2 + 1);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  sub_1D2CAAF0C();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  return a1;
}

uint64_t _s19EvaluationKeyConfigVwta(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_BYTE *)(a1 + 1) = *(_BYTE *)(a2 + 1);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  return a1;
}

uint64_t _s19EvaluationKeyConfigVwet(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 17))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t _s19EvaluationKeyConfigVwst(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_BYTE *)(result + 16) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 17) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 17) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for HE.EvaluationKeyConfig()
{
  return &type metadata for HE.EvaluationKeyConfig;
}

ValueMetadata *type metadata accessor for OPRF()
{
  return &type metadata for OPRF;
}

uint64_t *sub_1D2CA9700@<X0>(uint64_t *result@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;

  v2 = *result;
  if ((unint64_t)*result >= 3)
    LOBYTE(v2) = 3;
  *a2 = v2;
  return result;
}

uint64_t storeEnumTagSinglePayload for OPRF.Errors(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_1D2CA9758 + 4 * asc_1D2CAFE90[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_1D2CA9778 + 4 * byte_1D2CAFE95[v4]))();
}

_BYTE *sub_1D2CA9758(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_1D2CA9778(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1D2CA9780(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1D2CA9788(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1D2CA9790(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1D2CA9798(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for OPRF.Errors()
{
  return &type metadata for OPRF.Errors;
}

uint64_t type metadata accessor for OPRF.Ciphersuite(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for OPRF.Ciphersuite);
}

uint64_t storeEnumTagSinglePayload for OPRF.Mode(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1D2CA980C + 4 * byte_1D2CAFE9F[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1D2CA9840 + 4 * byte_1D2CAFE9A[v4]))();
}

uint64_t sub_1D2CA9840(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1D2CA9848(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1D2CA9850);
  return result;
}

uint64_t sub_1D2CA985C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1D2CA9864);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1D2CA9868(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1D2CA9870(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for OPRF.Mode()
{
  return &type metadata for OPRF.Mode;
}

unint64_t sub_1D2CA9890()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1EFCA04B8;
  if (!qword_1EFCA04B8)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EFCA04C0);
    result = MEMORY[0x1D8245F38](MEMORY[0x1E0DEAF50], v1);
    atomic_store(result, (unint64_t *)&qword_1EFCA04B8);
  }
  return result;
}

void sub_1D2CA98DC(_QWORD *a1@<X8>)
{
  *a1 = &unk_1E943F760;
}

unint64_t sub_1D2CA98F0()
{
  unint64_t result;

  result = qword_1EFCA04C8;
  if (!qword_1EFCA04C8)
  {
    result = MEMORY[0x1D8245F38](&unk_1D2CAFFB8, &type metadata for OPRF.Mode);
    atomic_store(result, (unint64_t *)&qword_1EFCA04C8);
  }
  return result;
}

unint64_t sub_1D2CA9938()
{
  unint64_t result;

  result = qword_1EFCA04D0;
  if (!qword_1EFCA04D0)
  {
    result = MEMORY[0x1D8245F38](&unk_1D2CB0020, &type metadata for OPRF.Errors);
    atomic_store(result, (unint64_t *)&qword_1EFCA04D0);
  }
  return result;
}

BOOL sub_1D2CA997C(uint64_t a1, uint64_t a2)
{
  return *(unsigned __int8 *)(a2 + 4) == *(unsigned __int8 *)(a1 + 4) && *(_DWORD *)a1 == *(_DWORD *)a2;
}

uint64_t sub_1D2CA999C()
{
  sub_1D2CAB134();
  sub_1D2CAB140();
  sub_1D2CAB14C();
  return sub_1D2CAB158();
}

uint64_t sub_1D2CA99F8()
{
  sub_1D2CAB140();
  return sub_1D2CAB14C();
}

uint64_t sub_1D2CA9A34()
{
  sub_1D2CAB134();
  sub_1D2CAB140();
  sub_1D2CAB14C();
  return sub_1D2CAB158();
}

uint64_t LubyRackoff.AES256Encryptor.init(key:blockSizeInBits:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  return sub_1D2CA9AD4(a1, a2, a3);
}

void LubyRackoff.AES256Encryptor.encrypt(_:)(uint64_t a1, uint64_t a2)
{
  sub_1D2CA9D6C(a1, a2);
}

uint64_t LubyRackoff.AES256Decryptor.init(key:blockSizeInBits:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  return sub_1D2CA9AD4(a1, a2, a3);
}

uint64_t sub_1D2CA9AD4@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t result;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  size_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  _QWORD *v16;
  uint64_t v17;

  v6 = *a1;
  swift_beginAccess();
  if (a2 > 128 || (a2 & 7) != 0 || *(_QWORD *)(v6 + 16) != 32)
  {
    __break(1u);
  }
  else
  {
    ccaes_ecb_encrypt_mode();
    result = MEMORY[0x1D8245B54]();
    v3 = result;
    if (qword_1ED985918 == -1)
      goto LABEL_5;
  }
  result = swift_once();
LABEL_5:
  v8 = off_1ED985910;
  v16 = off_1ED985910;
  if (v3)
  {
    if (v3 < 0)
    {
      __break(1u);
      goto LABEL_25;
    }
    swift_retain();
    do
    {
      swift_beginAccess();
      sub_1D2C95680(v16[2], v16[2], 0);
      --v3;
    }
    while (v3);
    v9 = (uint64_t)v16;
  }
  else
  {
    swift_retain();
    v9 = (uint64_t)v8;
  }
  result = AESLubyRackoffContextSize();
  if (result)
  {
    v10 = result;
    if ((result & 0x8000000000000000) == 0)
    {
      swift_retain();
      do
      {
        swift_beginAccess();
        sub_1D2C95680(v8[2], v8[2], 0);
        --v10;
      }
      while (v10);
      goto LABEL_17;
    }
LABEL_25:
    __break(1u);
    return result;
  }
  swift_retain();
LABEL_17:
  v17 = (uint64_t)v8;
  v15 = 0;
  swift_retain();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    v11 = sub_1D2C95BC8(v9);
    swift_release();
    v9 = v11;
  }
  swift_beginAccess();
  swift_retain();
  sub_1D2CA9F44(&v17, v6, &v15);
  swift_release_n();
  v12 = v15;
  if (v15)
  {
    sub_1D2CAA024();
    swift_allocError();
    *(_DWORD *)v13 = v12;
    *(_BYTE *)(v13 + 4) = 0;
    swift_willThrow();
    swift_release();
    swift_release();
    return swift_release();
  }
  else
  {
    result = swift_release();
    v14 = v17;
    *a3 = a2;
    a3[1] = v9;
    a3[2] = v14;
  }
  return result;
}

void LubyRackoff.AES256Decryptor.decrypt(_:)(uint64_t a1, uint64_t a2)
{
  sub_1D2CA9D6C(a1, a2);
}

void sub_1D2CA9D6C(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;

  if (!__OFADD__(*v2, 7))
    __asm { BR              X10 }
  __break(1u);
  JUMPOUT(0x1D2CA9F2CLL);
}

uint64_t sub_1D2CA9F44(uint64_t *a1, uint64_t a2, _DWORD *a3)
{
  uint64_t result;

  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    *a1 = sub_1D2C95BC8(*a1);
    swift_release();
  }
  swift_beginAccess();
  swift_beginAccess();
  result = ccecb_init();
  *a3 = result;
  if (!(_DWORD)result)
  {
    result = cclr_aes_init();
    *a3 = result;
  }
  return result;
}

unint64_t sub_1D2CAA024()
{
  unint64_t result;

  result = qword_1EFCA04D8;
  if (!qword_1EFCA04D8)
  {
    result = MEMORY[0x1D8245F38](&unk_1D2CB013C, &type metadata for LubyRackoffError);
    atomic_store(result, (unint64_t *)&qword_1EFCA04D8);
  }
  return result;
}

uint64_t sub_1D2CAA068()
{
  return sub_1D2CAA0A0();
}

uint64_t sub_1D2CAA084()
{
  return sub_1D2CAA0A0();
}

uint64_t sub_1D2CAA0A0()
{
  return sub_1D2CAA960();
}

ValueMetadata *type metadata accessor for LubyRackoff()
{
  return &type metadata for LubyRackoff;
}

ValueMetadata *type metadata accessor for LubyRackoff.AES256Encryptor()
{
  return &type metadata for LubyRackoff.AES256Encryptor;
}

uint64_t _s16CryptoKitPrivate11LubyRackoffO15AES256EncryptorVwxx_0()
{
  swift_release();
  return swift_release();
}

_QWORD *_s16CryptoKitPrivate11LubyRackoffO15AES256EncryptorVwCP_0(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  a1[2] = a2[2];
  swift_retain();
  swift_retain();
  return a1;
}

_QWORD *_s16CryptoKitPrivate11LubyRackoffO15AES256EncryptorVwca_0(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_retain();
  swift_release();
  a1[2] = a2[2];
  swift_retain();
  swift_release();
  return a1;
}

uint64_t _s16CryptoKitPrivate11LubyRackoffO15AES256EncryptorVwta_0(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_release();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_release();
  return a1;
}

uint64_t _s16CryptoKitPrivate11LubyRackoffO15AES256EncryptorVwet_0(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 24))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t sub_1D2CAA284(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 24) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 24) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for LubyRackoff.AES256Decryptor()
{
  return &type metadata for LubyRackoff.AES256Decryptor;
}

uint64_t getEnumTagSinglePayload for LubyRackoffError(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFE && *(_BYTE *)(a1 + 5))
    return (*(_DWORD *)a1 + 254);
  v3 = *(unsigned __int8 *)(a1 + 4);
  if (v3 <= 2)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for LubyRackoffError(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(_BYTE *)(result + 4) = 0;
    *(_DWORD *)result = a2 - 254;
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 5) = 1;
  }
  else
  {
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 5) = 0;
    if (a2)
      *(_BYTE *)(result + 4) = -(char)a2;
  }
  return result;
}

uint64_t sub_1D2CAA360(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 4);
}

uint64_t sub_1D2CAA368(uint64_t result, char a2)
{
  *(_BYTE *)(result + 4) = a2;
  return result;
}

ValueMetadata *type metadata accessor for LubyRackoffError()
{
  return &type metadata for LubyRackoffError;
}

unint64_t sub_1D2CAA384()
{
  unint64_t result;

  result = qword_1EFCA04E0;
  if (!qword_1EFCA04E0)
  {
    result = MEMORY[0x1D8245F38](&unk_1D2CB0114, &type metadata for LubyRackoffError);
    atomic_store(result, (unint64_t *)&qword_1EFCA04E0);
  }
  return result;
}

uint64_t sub_1D2CAA3C8(uint64_t a1)
{
  return sub_1D2CAA400(a1, MEMORY[0x1E0C821E0]);
}

uint64_t sub_1D2CAA3E4(uint64_t a1)
{
  return sub_1D2CAA400(a1, MEMORY[0x1E0C821E8]);
}

uint64_t sub_1D2CAA400(uint64_t a1, uint64_t (*a2)(_QWORD, _QWORD, uint64_t, _QWORD))
{
  _QWORD *v2;
  _DWORD *v3;
  uint64_t result;

  v3 = (_DWORD *)v2[2];
  result = a2(v2[3], v2[4], a1, v2[5]);
  *v3 = result;
  return result;
}

ValueMetadata *type metadata accessor for HE()
{
  return &type metadata for HE;
}

uint64_t sub_1D2CAA448(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;
  uint64_t v8;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 16);
  v3 = result * v2;
  if ((unsigned __int128)(result * (__int128)v2) >> 64 != (result * v2) >> 63)
  {
    __break(1u);
    goto LABEL_11;
  }
  if (v3 > 0)
  {
    v4 = sub_1D2CAAF30();
    v5 = v4;
    *(_QWORD *)(v4 + 16) = ((unint64_t)(v3 - 1) >> 3) + 1;
    *(_BYTE *)(v4 + 32) = 0;
    if ((unint64_t)v3 >= 9)
      bzero((void *)(v4 + 33), (unint64_t)(v3 - 1) >> 3);
    goto LABEL_7;
  }
  if ((unint64_t)(v3 + 7) >= 8)
  {
LABEL_11:
    __break(1u);
    return result;
  }
  v5 = MEMORY[0x1E0DEE9D8];
LABEL_7:
  v6 = cche_coeffs_to_bytes();
  if (v6)
  {
    v7 = v6;
    swift_bridgeObjectRelease();
    sub_1D2C4E7DC();
    swift_allocError();
    *(_DWORD *)v8 = v7;
    *(_BYTE *)(v8 + 4) = 0;
    swift_willThrow();
  }
  return v5;
}

uint64_t sub_1D2CAA560()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 24);
  swift_retain();
  if (v1)
    MEMORY[0x1D8245FD4](v1, -1, -1);
  swift_release();
  swift_release();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for HE.ObjectStorage()
{
  return objc_opt_self();
}

uint64_t sub_1D2CAA5E8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;

  v1 = *(_QWORD *)(v0 + 24);
  if (v1)
  {
    memset_s(*(void **)(v0 + 24), *(_QWORD *)(v0 + 32) - v1, 0, *(_QWORD *)(v0 + 32) - v1);
    swift_retain();
    MEMORY[0x1D8245FD4](v1, -1, -1);
    swift_release();
    swift_release();
    return v0;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1D2CAA65C()
{
  sub_1D2CAA5E8();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for HE.ObjectStorageWithZeroize()
{
  return objc_opt_self();
}

uint64_t sub_1D2CAA69C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6)
{
  uint64_t v6;
  unint64_t v7;
  int64_t v10;
  char *v11;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unsigned int v21;
  char *v22;

  v6 = a6;
  v7 = a5;
  v10 = *(_QWORD *)(a1 + 16);
  v11 = (char *)MEMORY[0x1E0DEE9D8];
  if (v10)
  {
    v22 = (char *)MEMORY[0x1E0DEE9D8];
    sub_1D2C4DB88(0, v10, 0);
    v11 = v22;
    v13 = a1 + 32;
    while (1)
    {
      v14 = *(_QWORD *)(*(_QWORD *)v13 + 24);
      if (!v14)
        break;
      v22 = v11;
      v16 = *((_QWORD *)v11 + 2);
      v15 = *((_QWORD *)v11 + 3);
      if (v16 >= v15 >> 1)
      {
        sub_1D2C4DB88((char *)(v15 > 1), v16 + 1, 1);
        v11 = v22;
      }
      *((_QWORD *)v11 + 2) = v16 + 1;
      *(_QWORD *)&v11[8 * v16 + 32] = v14;
      v13 += 8;
      if (!--v10)
      {
        v6 = a6;
        v7 = a5;
        goto LABEL_8;
      }
    }
    __break(1u);
  }
  else
  {
LABEL_8:
    v22 = v11;
    if (*(_QWORD *)(*(_QWORD *)a2 + 24))
    {
      swift_retain();
      sub_1D2C7EAB4(&v22, v7, v6, a3, a3 + 32, &v21);
      v17 = v21;
      swift_release();
      swift_bridgeObjectRelease();
      return v17;
    }
  }
  __break(1u);
  return sub_1D2CAA804();
}

uint64_t sub_1D2CAA804()
{
  return MEMORY[0x1E0CAE508]();
}

uint64_t sub_1D2CAA810()
{
  return MEMORY[0x1E0CAE510]();
}

uint64_t sub_1D2CAA81C()
{
  return MEMORY[0x1E0CAE518]();
}

uint64_t sub_1D2CAA828()
{
  return MEMORY[0x1E0CAE520]();
}

uint64_t sub_1D2CAA834()
{
  return MEMORY[0x1E0CAE528]();
}

uint64_t sub_1D2CAA840()
{
  return MEMORY[0x1E0CAE538]();
}

uint64_t sub_1D2CAA84C()
{
  return MEMORY[0x1E0CAE8A8]();
}

uint64_t sub_1D2CAA858()
{
  return MEMORY[0x1E0CAE8B8]();
}

uint64_t sub_1D2CAA864()
{
  return MEMORY[0x1E0CAE8D0]();
}

uint64_t sub_1D2CAA870()
{
  return MEMORY[0x1E0CAE8D8]();
}

uint64_t sub_1D2CAA87C()
{
  return MEMORY[0x1E0CAE8F0]();
}

uint64_t sub_1D2CAA888()
{
  return MEMORY[0x1E0CAE8F8]();
}

uint64_t sub_1D2CAA894()
{
  return MEMORY[0x1E0CAE908]();
}

uint64_t sub_1D2CAA8A0()
{
  return MEMORY[0x1E0CAE910]();
}

uint64_t sub_1D2CAA8AC()
{
  return MEMORY[0x1E0CAEE50]();
}

uint64_t sub_1D2CAA8B8()
{
  return MEMORY[0x1E0CAF5B8]();
}

uint64_t sub_1D2CAA8C4()
{
  return MEMORY[0x1E0CAF980]();
}

uint64_t sub_1D2CAA8D0()
{
  return MEMORY[0x1E0CB0088]();
}

uint64_t sub_1D2CAA8DC()
{
  return MEMORY[0x1E0CB00B0]();
}

uint64_t sub_1D2CAA8E8()
{
  return MEMORY[0x1E0CB00E8]();
}

uint64_t sub_1D2CAA8F4()
{
  return MEMORY[0x1E0CB00F0]();
}

uint64_t sub_1D2CAA900()
{
  return MEMORY[0x1E0CB0128]();
}

uint64_t sub_1D2CAA90C()
{
  return MEMORY[0x1E0CB0140]();
}

uint64_t sub_1D2CAA918()
{
  return MEMORY[0x1E0CB0160]();
}

uint64_t sub_1D2CAA924()
{
  return MEMORY[0x1E0CB0188]();
}

uint64_t sub_1D2CAA930()
{
  return MEMORY[0x1E0CB01B0]();
}

uint64_t sub_1D2CAA93C()
{
  return MEMORY[0x1E0CB01C0]();
}

uint64_t sub_1D2CAA948()
{
  return MEMORY[0x1E0CB01C8]();
}

uint64_t sub_1D2CAA954()
{
  return MEMORY[0x1E0CB01F0]();
}

uint64_t sub_1D2CAA960()
{
  return MEMORY[0x1E0CB0200]();
}

uint64_t sub_1D2CAA96C()
{
  return MEMORY[0x1E0CB0228]();
}

uint64_t sub_1D2CAA978()
{
  return MEMORY[0x1E0CB0298]();
}

uint64_t sub_1D2CAA984()
{
  return MEMORY[0x1E0CB02B0]();
}

uint64_t sub_1D2CAA990()
{
  return MEMORY[0x1E0CB02C0]();
}

uint64_t sub_1D2CAA99C()
{
  return MEMORY[0x1E0CB02D8]();
}

uint64_t sub_1D2CAA9A8()
{
  return MEMORY[0x1E0CB02F8]();
}

uint64_t sub_1D2CAA9B4()
{
  return MEMORY[0x1E0DEF0A0]();
}

uint64_t sub_1D2CAA9C0()
{
  return MEMORY[0x1E0DEF0A8]();
}

uint64_t sub_1D2CAA9CC()
{
  return MEMORY[0x1E0DEF0B0]();
}

uint64_t sub_1D2CAA9D8()
{
  return MEMORY[0x1E0D3E988]();
}

uint64_t sub_1D2CAA9E4()
{
  return MEMORY[0x1E0D3E990]();
}

uint64_t sub_1D2CAA9F0()
{
  return MEMORY[0x1E0D3E998]();
}

uint64_t sub_1D2CAA9FC()
{
  return MEMORY[0x1E0D3EA60]();
}

uint64_t sub_1D2CAAA08()
{
  return MEMORY[0x1E0D3EA68]();
}

uint64_t sub_1D2CAAA14()
{
  return MEMORY[0x1E0D3EA80]();
}

uint64_t sub_1D2CAAA20()
{
  return MEMORY[0x1E0D3EA90]();
}

uint64_t sub_1D2CAAA2C()
{
  return MEMORY[0x1E0D3EA98]();
}

uint64_t sub_1D2CAAA38()
{
  return MEMORY[0x1E0D3EAB8]();
}

uint64_t sub_1D2CAAA44()
{
  return MEMORY[0x1E0D3EAD8]();
}

uint64_t sub_1D2CAAA50()
{
  return MEMORY[0x1E0D3EAE8]();
}

uint64_t sub_1D2CAAA5C()
{
  return MEMORY[0x1E0D3EB10]();
}

uint64_t sub_1D2CAAA68()
{
  return MEMORY[0x1E0D3EB18]();
}

uint64_t sub_1D2CAAA74()
{
  return MEMORY[0x1E0D3EB98]();
}

uint64_t sub_1D2CAAA80()
{
  return MEMORY[0x1E0D3EBA0]();
}

uint64_t sub_1D2CAAA8C()
{
  return MEMORY[0x1E0D3EBD8]();
}

uint64_t sub_1D2CAAA98()
{
  return MEMORY[0x1E0D3EC48]();
}

uint64_t sub_1D2CAAAA4()
{
  return MEMORY[0x1E0D3EC50]();
}

uint64_t sub_1D2CAAAB0()
{
  return MEMORY[0x1E0D3EC58]();
}

uint64_t sub_1D2CAAABC()
{
  return MEMORY[0x1E0D3EC68]();
}

uint64_t sub_1D2CAAAC8()
{
  return MEMORY[0x1E0D3EC80]();
}

uint64_t sub_1D2CAAAD4()
{
  return MEMORY[0x1E0D3EC88]();
}

uint64_t sub_1D2CAAAE0()
{
  return MEMORY[0x1E0D3ECF8]();
}

uint64_t sub_1D2CAAAEC()
{
  return MEMORY[0x1E0D3ED00]();
}

uint64_t sub_1D2CAAAF8()
{
  return MEMORY[0x1E0D3ED28]();
}

uint64_t sub_1D2CAAB04()
{
  return MEMORY[0x1E0D3ED70]();
}

uint64_t sub_1D2CAAB10()
{
  return MEMORY[0x1E0D3ED98]();
}

uint64_t sub_1D2CAAB1C()
{
  return MEMORY[0x1E0D3EF28]();
}

uint64_t sub_1D2CAAB28()
{
  return MEMORY[0x1E0D3EF38]();
}

uint64_t sub_1D2CAAB34()
{
  return MEMORY[0x1E0D3EF48]();
}

uint64_t sub_1D2CAAB40()
{
  return MEMORY[0x1E0CA91E8]();
}

uint64_t sub_1D2CAAB4C()
{
  return MEMORY[0x1E0CA9270]();
}

uint64_t sub_1D2CAAB58()
{
  return MEMORY[0x1E0CA9278]();
}

uint64_t sub_1D2CAAB64()
{
  return MEMORY[0x1E0CA9280]();
}

uint64_t sub_1D2CAAB70()
{
  return MEMORY[0x1E0CA9288]();
}

uint64_t sub_1D2CAAB7C()
{
  return MEMORY[0x1E0CA9298]();
}

uint64_t sub_1D2CAAB88()
{
  return MEMORY[0x1E0CA92A8]();
}

uint64_t sub_1D2CAAB94()
{
  return MEMORY[0x1E0CA92B0]();
}

uint64_t sub_1D2CAABA0()
{
  return MEMORY[0x1E0CA92C8]();
}

uint64_t sub_1D2CAABAC()
{
  return MEMORY[0x1E0CA92E0]();
}

uint64_t sub_1D2CAABB8()
{
  return MEMORY[0x1E0CA92F8]();
}

uint64_t sub_1D2CAABC4()
{
  return MEMORY[0x1E0CA9328]();
}

uint64_t sub_1D2CAABD0()
{
  return MEMORY[0x1E0CA93A0]();
}

uint64_t sub_1D2CAABDC()
{
  return MEMORY[0x1E0CA93B0]();
}

uint64_t sub_1D2CAABE8()
{
  return MEMORY[0x1E0CA93C8]();
}

uint64_t sub_1D2CAABF4()
{
  return MEMORY[0x1E0CA9498]();
}

uint64_t sub_1D2CAAC00()
{
  return MEMORY[0x1E0CA94A8]();
}

uint64_t sub_1D2CAAC0C()
{
  return MEMORY[0x1E0CA94C0]();
}

uint64_t sub_1D2CAAC18()
{
  return MEMORY[0x1E0CA94C8]();
}

uint64_t sub_1D2CAAC24()
{
  return MEMORY[0x1E0CA94E0]();
}

uint64_t sub_1D2CAAC30()
{
  return MEMORY[0x1E0CA94E8]();
}

uint64_t sub_1D2CAAC3C()
{
  return MEMORY[0x1E0CA94F8]();
}

uint64_t sub_1D2CAAC48()
{
  return MEMORY[0x1E0CA9508]();
}

uint64_t sub_1D2CAAC54()
{
  return MEMORY[0x1E0CA9510]();
}

uint64_t sub_1D2CAAC60()
{
  return MEMORY[0x1E0CA9518]();
}

uint64_t sub_1D2CAAC6C()
{
  return MEMORY[0x1E0CA9520]();
}

uint64_t sub_1D2CAAC78()
{
  return MEMORY[0x1E0CA9538]();
}

uint64_t sub_1D2CAAC84()
{
  return MEMORY[0x1E0CA9550]();
}

uint64_t sub_1D2CAAC90()
{
  return MEMORY[0x1E0CA9580]();
}

uint64_t sub_1D2CAAC9C()
{
  return MEMORY[0x1E0CA9778]();
}

uint64_t sub_1D2CAACA8()
{
  return MEMORY[0x1E0CA9788]();
}

uint64_t sub_1D2CAACB4()
{
  return MEMORY[0x1E0CA9790]();
}

uint64_t sub_1D2CAACC0()
{
  return MEMORY[0x1E0CA97D8]();
}

uint64_t sub_1D2CAACCC()
{
  return MEMORY[0x1E0CA97E0]();
}

uint64_t sub_1D2CAACD8()
{
  return MEMORY[0x1E0CA97E8]();
}

uint64_t sub_1D2CAACE4()
{
  return MEMORY[0x1E0CA97F0]();
}

uint64_t sub_1D2CAACF0()
{
  return MEMORY[0x1E0CA97F8]();
}

uint64_t sub_1D2CAACFC()
{
  return MEMORY[0x1E0CA9800]();
}

uint64_t sub_1D2CAAD08()
{
  return MEMORY[0x1E0CA9810]();
}

uint64_t sub_1D2CAAD14()
{
  return MEMORY[0x1E0CA9828]();
}

uint64_t sub_1D2CAAD20()
{
  return MEMORY[0x1E0CA9830]();
}

uint64_t sub_1D2CAAD2C()
{
  return MEMORY[0x1E0CA9838]();
}

uint64_t sub_1D2CAAD38()
{
  return MEMORY[0x1E0CA9840]();
}

uint64_t sub_1D2CAAD44()
{
  return MEMORY[0x1E0CA9848]();
}

uint64_t sub_1D2CAAD50()
{
  return MEMORY[0x1E0CA9860]();
}

uint64_t sub_1D2CAAD5C()
{
  return MEMORY[0x1E0CA9900]();
}

uint64_t sub_1D2CAAD68()
{
  return MEMORY[0x1E0CA9918]();
}

uint64_t sub_1D2CAAD74()
{
  return MEMORY[0x1E0CA9920]();
}

uint64_t sub_1D2CAAD80()
{
  return MEMORY[0x1E0CA9928]();
}

uint64_t sub_1D2CAAD8C()
{
  return MEMORY[0x1E0CA9938]();
}

uint64_t sub_1D2CAAD98()
{
  return MEMORY[0x1E0CA9940]();
}

uint64_t sub_1D2CAADA4()
{
  return MEMORY[0x1E0CA9958]();
}

uint64_t sub_1D2CAADB0()
{
  return MEMORY[0x1E0CB17D8]();
}

uint64_t sub_1D2CAADBC()
{
  return MEMORY[0x1E0CB17E8]();
}

uint64_t sub_1D2CAADC8()
{
  return MEMORY[0x1E0CB1808]();
}

uint64_t sub_1D2CAADD4()
{
  return MEMORY[0x1E0DEA1C0]();
}

uint64_t sub_1D2CAADE0()
{
  return MEMORY[0x1E0DEA428]();
}

uint64_t sub_1D2CAADEC()
{
  return MEMORY[0x1E0DEA430]();
}

uint64_t sub_1D2CAADF8()
{
  return MEMORY[0x1E0DEA568]();
}

uint64_t sub_1D2CAAE04()
{
  return MEMORY[0x1E0CB1940]();
}

uint64_t sub_1D2CAAE10()
{
  return MEMORY[0x1E0CB1980]();
}

uint64_t sub_1D2CAAE1C()
{
  return MEMORY[0x1E0CB1988]();
}

uint64_t sub_1D2CAAE28()
{
  return MEMORY[0x1E0CB19E8]();
}

uint64_t sub_1D2CAAE34()
{
  return MEMORY[0x1E0CB19F0]();
}

uint64_t sub_1D2CAAE40()
{
  return MEMORY[0x1E0CB1A08]();
}

uint64_t sub_1D2CAAE4C()
{
  return MEMORY[0x1E0CB1A18]();
}

uint64_t sub_1D2CAAE58()
{
  return MEMORY[0x1E0DEA6F0]();
}

uint64_t sub_1D2CAAE64()
{
  return MEMORY[0x1E0DEA758]();
}

uint64_t sub_1D2CAAE70()
{
  return MEMORY[0x1E0DEA800]();
}

uint64_t sub_1D2CAAE7C()
{
  return MEMORY[0x1E0DEA850]();
}

uint64_t sub_1D2CAAE88()
{
  return MEMORY[0x1E0DEA858]();
}

uint64_t sub_1D2CAAE94()
{
  return MEMORY[0x1E0DEA870]();
}

uint64_t sub_1D2CAAEA0()
{
  return MEMORY[0x1E0DEA880]();
}

uint64_t sub_1D2CAAEAC()
{
  return MEMORY[0x1E0DEA908]();
}

uint64_t sub_1D2CAAEB8()
{
  return MEMORY[0x1E0DEAA58]();
}

uint64_t sub_1D2CAAEC4()
{
  return MEMORY[0x1E0DEAA80]();
}

uint64_t sub_1D2CAAED0()
{
  return MEMORY[0x1E0DEACA0]();
}

uint64_t sub_1D2CAAEDC()
{
  return MEMORY[0x1E0DEAD18]();
}

uint64_t sub_1D2CAAEE8()
{
  return MEMORY[0x1E0DEAD78]();
}

uint64_t sub_1D2CAAEF4()
{
  return MEMORY[0x1E0DEAD80]();
}

uint64_t sub_1D2CAAF00()
{
  return MEMORY[0x1E0DEADA0]();
}

uint64_t sub_1D2CAAF0C()
{
  return MEMORY[0x1E0CB1AF8]();
}

uint64_t sub_1D2CAAF18()
{
  return MEMORY[0x1E0DEADB8]();
}

uint64_t sub_1D2CAAF24()
{
  return MEMORY[0x1E0DEADE8]();
}

uint64_t sub_1D2CAAF30()
{
  return MEMORY[0x1E0DEAE28]();
}

uint64_t sub_1D2CAAF3C()
{
  return MEMORY[0x1E0DEAE58]();
}

uint64_t sub_1D2CAAF48()
{
  return MEMORY[0x1E0CB1C10]();
}

uint64_t sub_1D2CAAF54()
{
  return MEMORY[0x1E0DEB560]();
}

uint64_t sub_1D2CAAF60()
{
  return MEMORY[0x1E0DEB7A0]();
}

uint64_t sub_1D2CAAF6C()
{
  return MEMORY[0x1E0DEB7D8]();
}

uint64_t sub_1D2CAAF78()
{
  return MEMORY[0x1E0CB20D0]();
}

uint64_t sub_1D2CAAF84()
{
  return MEMORY[0x1E0DEFCD8]();
}

uint64_t sub_1D2CAAF90()
{
  return MEMORY[0x1E0DEFCE0]();
}

uint64_t sub_1D2CAAF9C()
{
  return MEMORY[0x1E0DEB940]();
}

uint64_t sub_1D2CAAFA8()
{
  return MEMORY[0x1E0DEBB68]();
}

uint64_t sub_1D2CAAFB4()
{
  return MEMORY[0x1E0DEBC60]();
}

uint64_t sub_1D2CAAFC0()
{
  return MEMORY[0x1E0DEC2A8]();
}

uint64_t sub_1D2CAAFCC()
{
  return MEMORY[0x1E0DEC2B0]();
}

uint64_t sub_1D2CAAFD8()
{
  return MEMORY[0x1E0DEC3D0]();
}

uint64_t sub_1D2CAAFE4()
{
  return MEMORY[0x1E0DEC3E0]();
}

uint64_t sub_1D2CAAFF0()
{
  return MEMORY[0x1E0DEC3E8]();
}

uint64_t sub_1D2CAAFFC()
{
  return MEMORY[0x1E0DEC588]();
}

uint64_t sub_1D2CAB008()
{
  return MEMORY[0x1E0DEC660]();
}

uint64_t sub_1D2CAB014()
{
  return MEMORY[0x1E0DEC670]();
}

uint64_t sub_1D2CAB020()
{
  return MEMORY[0x1E0DEC688]();
}

uint64_t sub_1D2CAB02C()
{
  return MEMORY[0x1E0DEC6C0]();
}

uint64_t sub_1D2CAB038()
{
  return MEMORY[0x1E0DEC6C8]();
}

uint64_t sub_1D2CAB044()
{
  return MEMORY[0x1E0DEC8E0]();
}

uint64_t sub_1D2CAB050()
{
  return MEMORY[0x1E0DECBA8]();
}

uint64_t sub_1D2CAB05C()
{
  return MEMORY[0x1E0DECBE8]();
}

uint64_t sub_1D2CAB068()
{
  return MEMORY[0x1E0DECD18]();
}

uint64_t sub_1D2CAB074()
{
  return MEMORY[0x1E0DECD20]();
}

uint64_t sub_1D2CAB080()
{
  return MEMORY[0x1E0DECD38]();
}

uint64_t sub_1D2CAB08C()
{
  return MEMORY[0x1E0DECD40]();
}

uint64_t sub_1D2CAB098()
{
  return MEMORY[0x1E0DECD50]();
}

uint64_t sub_1D2CAB0A4()
{
  return MEMORY[0x1E0DECF28]();
}

uint64_t sub_1D2CAB0B0()
{
  return MEMORY[0x1E0DED1D0]();
}

uint64_t sub_1D2CAB0BC()
{
  return MEMORY[0x1E0DED600]();
}

uint64_t sub_1D2CAB0C8()
{
  return MEMORY[0x1E0DED770]();
}

uint64_t sub_1D2CAB0D4()
{
  return MEMORY[0x1E0DED998]();
}

uint64_t sub_1D2CAB0E0()
{
  return MEMORY[0x1E0DEDAE8]();
}

uint64_t sub_1D2CAB0EC()
{
  return MEMORY[0x1E0DEDB10]();
}

uint64_t sub_1D2CAB0F8()
{
  return MEMORY[0x1E0DEDB18]();
}

uint64_t sub_1D2CAB104()
{
  return MEMORY[0x1E0DEDB20]();
}

uint64_t sub_1D2CAB110()
{
  return MEMORY[0x1E0DEDB28]();
}

uint64_t sub_1D2CAB11C()
{
  return MEMORY[0x1E0DEDED8]();
}

uint64_t sub_1D2CAB128()
{
  return MEMORY[0x1E0DEDEE0]();
}

uint64_t sub_1D2CAB134()
{
  return MEMORY[0x1E0DEDEF8]();
}

uint64_t sub_1D2CAB140()
{
  return MEMORY[0x1E0DEDF10]();
}

uint64_t sub_1D2CAB14C()
{
  return MEMORY[0x1E0DEDF28]();
}

uint64_t sub_1D2CAB158()
{
  return MEMORY[0x1E0DEDF40]();
}

uint64_t AESLubyRackoffContextSize()
{
  return MEMORY[0x1E0D1BD68]();
}

unsigned __int8 *__cdecl CC_SHA256(const void *data, CC_LONG len, unsigned __int8 *md)
{
  return (unsigned __int8 *)MEMORY[0x1E0C80368](data, *(_QWORD *)&len, md);
}

CFTypeRef CFRetain(CFTypeRef cf)
{
  return (CFTypeRef)MEMORY[0x1E0C98BD0](cf);
}

uint64_t SPAKE2Alishaz0Size()
{
  return MEMORY[0x1E0D1BD90]();
}

uint64_t SPAKE2CtxSize()
{
  return MEMORY[0x1E0D1BD98]();
}

CFDictionaryRef SecKeyCopyAttributes(SecKeyRef key)
{
  return (CFDictionaryRef)MEMORY[0x1E0CD62F0](key);
}

CFDataRef SecKeyCopyExternalRepresentation(SecKeyRef key, CFErrorRef *error)
{
  return (CFDataRef)MEMORY[0x1E0CD62F8](key, error);
}

SecKeyRef SecKeyCreateWithData(CFDataRef keyData, CFDictionaryRef attributes, CFErrorRef *error)
{
  return (SecKeyRef)MEMORY[0x1E0CD63A0](keyData, attributes, error);
}

int SecRandomCopyBytes(SecRandomRef rnd, size_t count, void *bytes)
{
  return MEMORY[0x1E0CD65A0](rnd, count, bytes);
}

uint64_t _swift_stdlib_reportUnimplementedInitializer()
{
  return MEMORY[0x1E0DEEA40]();
}

void bzero(void *a1, size_t a2)
{
  MEMORY[0x1E0C81758](a1, a2);
}

uint64_t cc_cmp_safe()
{
  return MEMORY[0x1E0C81870]();
}

uint64_t ccaes_ecb_encrypt_mode()
{
  return MEMORY[0x1E0C818A8]();
}

uint64_t ccapsic_client_check_intersect_response()
{
  return MEMORY[0x1E0C818E0]();
}

uint64_t ccapsic_client_generate_match_response()
{
  return MEMORY[0x1E0C818E8]();
}

uint64_t ccapsic_client_init()
{
  return MEMORY[0x1E0C818F0]();
}

uint64_t ccapsic_client_state_sizeof()
{
  return MEMORY[0x1E0C818F8]();
}

uint64_t ccder_decode_rsa_pub()
{
  return MEMORY[0x1E0C81A80]();
}

uint64_t ccder_decode_rsa_pub_n()
{
  return MEMORY[0x1E0C81A88]();
}

uint64_t ccder_encode_rsa_pub()
{
  return MEMORY[0x1E0C81AF8]();
}

uint64_t ccder_encode_rsa_pub_size()
{
  return MEMORY[0x1E0C81B00]();
}

uint64_t ccec_compressed_x962_export_pub()
{
  return MEMORY[0x1E0C81C30]();
}

uint64_t ccec_compressed_x962_export_pub_size()
{
  return MEMORY[0x1E0C81C38]();
}

uint64_t ccec_cp_256()
{
  return MEMORY[0x1E0C81C60]();
}

uint64_t ccec_cp_384()
{
  return MEMORY[0x1E0C81C68]();
}

uint64_t ccec_cp_521()
{
  return MEMORY[0x1E0C81C70]();
}

uint64_t ccec_validate_pub()
{
  return MEMORY[0x1E0C81DC0]();
}

uint64_t ccec_x963_import_pub()
{
  return MEMORY[0x1E0C81DF8]();
}

uint64_t ccecb_init()
{
  return MEMORY[0x1E0C81E10]();
}

uint64_t cche_ciphertext_coeff_compose()
{
  return MEMORY[0x1E0C81F30]();
}

uint64_t cche_ciphertext_coeff_decompose_nptexts()
{
  return MEMORY[0x1E0C81F38]();
}

uint64_t cche_ciphertext_fresh_correction_factor()
{
  return MEMORY[0x1E0C81F40]();
}

uint64_t cche_ciphertext_fresh_npolys()
{
  return MEMORY[0x1E0C81F48]();
}

uint64_t cche_ciphertext_galois_elt_rotate_rows_right()
{
  return MEMORY[0x1E0C81F50]();
}

uint64_t cche_ciphertext_galois_elt_swap_columns()
{
  return MEMORY[0x1E0C81F58]();
}

uint64_t cche_ciphertext_sizeof()
{
  return MEMORY[0x1E0C81F60]();
}

uint64_t cche_coeffs_to_bytes()
{
  return MEMORY[0x1E0C81F68]();
}

uint64_t cche_crt_compose()
{
  return MEMORY[0x1E0C81F70]();
}

uint64_t cche_decode_poly_uint64()
{
  return MEMORY[0x1E0C81F78]();
}

uint64_t cche_decode_simd_int64()
{
  return MEMORY[0x1E0C81F80]();
}

uint64_t cche_decode_simd_uint64()
{
  return MEMORY[0x1E0C81F88]();
}

uint64_t cche_decrypt()
{
  return MEMORY[0x1E0C81F90]();
}

uint64_t cche_deserialize_ciphertext_coeff()
{
  return MEMORY[0x1E0C81F98]();
}

uint64_t cche_deserialize_seeded_ciphertext_coeff()
{
  return MEMORY[0x1E0C81FA0]();
}

uint64_t cche_encode_poly_uint64()
{
  return MEMORY[0x1E0C81FA8]();
}

uint64_t cche_encode_simd_int64()
{
  return MEMORY[0x1E0C81FB0]();
}

uint64_t cche_encode_simd_reduced_int64()
{
  return MEMORY[0x1E0C81FB8]();
}

uint64_t cche_encode_simd_uint64()
{
  return MEMORY[0x1E0C81FC0]();
}

uint64_t cche_encrypt_symmetric()
{
  return MEMORY[0x1E0C81FC8]();
}

uint64_t cche_encryption_params_coefficient_moduli()
{
  return MEMORY[0x1E0C81FD0]();
}

uint64_t cche_encryption_params_coefficient_nmoduli()
{
  return MEMORY[0x1E0C81FD8]();
}

uint64_t cche_encryption_params_plaintext_modulus()
{
  return MEMORY[0x1E0C81FE0]();
}

uint64_t cche_encryption_params_polynomial_degree()
{
  return MEMORY[0x1E0C81FE8]();
}

uint64_t cche_galois_key_generate()
{
  return MEMORY[0x1E0C81FF0]();
}

uint64_t cche_galois_key_save()
{
  return MEMORY[0x1E0C81FF8]();
}

uint64_t cche_galois_key_sizeof()
{
  return MEMORY[0x1E0C82000]();
}

uint64_t cche_param_ctx_ciphertext_ctx_nmoduli()
{
  return MEMORY[0x1E0C82008]();
}

uint64_t cche_param_ctx_init()
{
  return MEMORY[0x1E0C82010]();
}

uint64_t cche_param_ctx_key_ctx_nmoduli()
{
  return MEMORY[0x1E0C82018]();
}

uint64_t cche_param_ctx_key_ctx_poly_nbytes()
{
  return MEMORY[0x1E0C82020]();
}

uint64_t cche_param_ctx_plaintext_modulus()
{
  return MEMORY[0x1E0C82028]();
}

uint64_t cche_param_ctx_plaintext_modulus_inverse()
{
  return MEMORY[0x1E0C82030]();
}

uint64_t cche_param_ctx_polynomial_degree()
{
  return MEMORY[0x1E0C82038]();
}

uint64_t cche_param_ctx_sizeof()
{
  return MEMORY[0x1E0C82040]();
}

uint64_t cche_plaintext_sizeof()
{
  return MEMORY[0x1E0C82048]();
}

uint64_t cche_relin_key_generate()
{
  return MEMORY[0x1E0C82050]();
}

uint64_t cche_relin_key_save()
{
  return MEMORY[0x1E0C82058]();
}

uint64_t cche_relin_key_sizeof()
{
  return MEMORY[0x1E0C82060]();
}

uint64_t cche_rng_seed_sizeof()
{
  return MEMORY[0x1E0C82068]();
}

uint64_t cche_secret_key_generate_from_seed()
{
  return MEMORY[0x1E0C82070]();
}

uint64_t cche_secret_key_sizeof()
{
  return MEMORY[0x1E0C82078]();
}

uint64_t cche_serialize_seeded_ciphertext_coeff()
{
  return MEMORY[0x1E0C82080]();
}

uint64_t cche_serialize_seeded_ciphertext_coeff_nbytes()
{
  return MEMORY[0x1E0C82088]();
}

uint64_t cchkdf()
{
  return MEMORY[0x1E0C82090]();
}

uint64_t cckem_decapsulate()
{
  return MEMORY[0x1E0C82128]();
}

uint64_t cckem_encapsulate()
{
  return MEMORY[0x1E0C82130]();
}

uint64_t cckem_encapsulated_key_nbytes_info()
{
  return MEMORY[0x1E0C82140]();
}

uint64_t cckem_export_privkey()
{
  return MEMORY[0x1E0C82148]();
}

uint64_t cckem_export_pubkey()
{
  return MEMORY[0x1E0C82150]();
}

uint64_t cckem_full_ctx_init()
{
  return MEMORY[0x1E0C82158]();
}

uint64_t cckem_generate_key()
{
  return MEMORY[0x1E0C82160]();
}

uint64_t cckem_import_privkey()
{
  return MEMORY[0x1E0C82168]();
}

uint64_t cckem_import_pubkey()
{
  return MEMORY[0x1E0C82170]();
}

uint64_t cckem_kyber768()
{
  return MEMORY[0x1E0C82180]();
}

uint64_t cckem_privkey_nbytes_info()
{
  return MEMORY[0x1E0C82190]();
}

uint64_t cckem_pub_ctx_init()
{
  return MEMORY[0x1E0C82198]();
}

uint64_t cckem_pubkey_nbytes_info()
{
  return MEMORY[0x1E0C821A8]();
}

uint64_t cckem_public_ctx()
{
  return MEMORY[0x1E0C821B0]();
}

uint64_t cckem_shared_key_nbytes_info()
{
  return MEMORY[0x1E0C821C0]();
}

uint64_t cckem_sizeof_full_ctx()
{
  return MEMORY[0x1E0C821C8]();
}

uint64_t cckem_sizeof_pub_ctx()
{
  return MEMORY[0x1E0C821D0]();
}

uint64_t cclr_aes_init()
{
  return MEMORY[0x1E0C821D8]();
}

uint64_t ccrng()
{
  return MEMORY[0x1E0C822A8]();
}

uint64_t ccrng_generate_bridge()
{
  return MEMORY[0x1E0D1BDA0]();
}

uint64_t ccrsa_ctx_public()
{
  return MEMORY[0x1E0C822C8]();
}

uint64_t ccrsa_generate_key()
{
  return MEMORY[0x1E0C82328]();
}

uint64_t ccrsabssa_blind_message()
{
  return MEMORY[0x1E0C82390]();
}

uint64_t ccrsabssa_sign_blinded_message()
{
  return MEMORY[0x1E0C823B0]();
}

uint64_t ccrsabssa_unblind_signature()
{
  return MEMORY[0x1E0C823B8]();
}

uint64_t ccscrypt()
{
  return MEMORY[0x1E0C823C0]();
}

uint64_t ccscrypt_storage_size()
{
  return MEMORY[0x1E0C823C8]();
}

uint64_t ccsha256_di()
{
  return MEMORY[0x1E0C823E0]();
}

uint64_t ccspake_cp_256()
{
  return MEMORY[0x1E0C82438]();
}

uint64_t ccspake_cp_256_rfc()
{
  return MEMORY[0x1E0C82440]();
}

uint64_t ccspake_generate_L()
{
  return MEMORY[0x1E0C82448]();
}

uint64_t ccspake_kex_generate()
{
  return MEMORY[0x1E0C82450]();
}

uint64_t ccspake_kex_process()
{
  return MEMORY[0x1E0C82458]();
}

uint64_t ccspake_mac_compute()
{
  return MEMORY[0x1E0C82460]();
}

uint64_t ccspake_mac_hkdf_cmac_aes128_sha256()
{
  return MEMORY[0x1E0C82468]();
}

uint64_t ccspake_mac_hkdf_hmac_sha256()
{
  return MEMORY[0x1E0C82470]();
}

uint64_t ccspake_mac_verify_and_get_session_key()
{
  return MEMORY[0x1E0C82478]();
}

uint64_t ccspake_prover_init()
{
  return MEMORY[0x1E0C82480]();
}

uint64_t ccspake_prover_initialize()
{
  return MEMORY[0x1E0C82488]();
}

uint64_t ccspake_reduce_w()
{
  return MEMORY[0x1E0C82490]();
}

uint64_t ccspake_sizeof_ctx()
{
  return MEMORY[0x1E0C82498]();
}

uint64_t ccspake_sizeof_point()
{
  return MEMORY[0x1E0C824A0]();
}

uint64_t ccspake_sizeof_w()
{
  return MEMORY[0x1E0C824A8]();
}

uint64_t ccspake_verifier_initialize()
{
  return MEMORY[0x1E0C824B8]();
}

uint64_t ccss_shamir_parameters_init()
{
  return MEMORY[0x1E0C82510]();
}

uint64_t ccss_shamir_share_bag_add_share()
{
  return MEMORY[0x1E0C82518]();
}

uint64_t ccss_shamir_share_bag_init()
{
  return MEMORY[0x1E0C82520]();
}

uint64_t ccss_shamir_share_bag_recover_secret()
{
  return MEMORY[0x1E0C82528]();
}

uint64_t ccss_shamir_share_generator_deserialize()
{
  return MEMORY[0x1E0C82538]();
}

uint64_t ccss_shamir_share_generator_generate_share()
{
  return MEMORY[0x1E0C82540]();
}

uint64_t ccss_shamir_share_generator_init()
{
  return MEMORY[0x1E0C82548]();
}

uint64_t ccss_shamir_share_generator_init_with_secrets_less_than_prime()
{
  return MEMORY[0x1E0C82550]();
}

uint64_t ccss_shamir_share_generator_serialize()
{
  return MEMORY[0x1E0C82558]();
}

uint64_t ccss_shamir_share_init()
{
  return MEMORY[0x1E0C82568]();
}

uint64_t ccss_sizeof_generator()
{
  return MEMORY[0x1E0C82578]();
}

uint64_t ccss_sizeof_parameters_fix()
{
  return MEMORY[0x1E0D1BDA8]();
}

uint64_t ccss_sizeof_shamir_share_generator_serialization()
{
  return MEMORY[0x1E0C82588]();
}

uint64_t ccss_sizeof_share()
{
  return MEMORY[0x1E0C82590]();
}

uint64_t ccss_sizeof_share_bag()
{
  return MEMORY[0x1E0C82598]();
}

void free(void *a1)
{
  MEMORY[0x1E0C834A8](a1);
}

uint64_t getContextSizeForECBMode()
{
  return MEMORY[0x1E0D1BDB8]();
}

uint64_t getccec_pub_ctx_size()
{
  return MEMORY[0x1E0D1BDD8]();
}

long double log2(long double __x)
{
  long double result;

  MEMORY[0x1E0C83BE8](__x);
  return result;
}

void *__cdecl malloc(size_t __size)
{
  return (void *)MEMORY[0x1E0C83E68](__size);
}

size_t malloc_size(const void *ptr)
{
  return MEMORY[0x1E0C83EE0](ptr);
}

int memcmp(const void *__s1, const void *__s2, size_t __n)
{
  return MEMORY[0x1E0C84078](__s1, __s2, __n);
}

void *__cdecl memcpy(void *__dst, const void *__src, size_t __n)
{
  return (void *)MEMORY[0x1E0C84088](__dst, __src, __n);
}

void *__cdecl memmove(void *__dst, const void *__src, size_t __len)
{
  return (void *)MEMORY[0x1E0C84098](__dst, __src, __len);
}

void *__cdecl memset(void *__b, int __c, size_t __len)
{
  return (void *)MEMORY[0x1E0C840B0](__b, *(_QWORD *)&__c, __len);
}

errno_t memset_s(void *__s, rsize_t __smax, int __c, rsize_t __n)
{
  return MEMORY[0x1E0C840D0](__s, __smax, *(_QWORD *)&__c, __n);
}

id objc_alloc(Class a1)
{
  return (id)MEMORY[0x1E0DE7BA8](a1);
}

id objc_allocWithZone(Class a1)
{
  return (id)MEMORY[0x1E0DE7BB0](a1);
}

uint64_t objc_alloc_init()
{
  return MEMORY[0x1E0DE7BB8]();
}

id objc_autorelease(id a1)
{
  return (id)MEMORY[0x1E0DE7BD0](a1);
}

id objc_autoreleaseReturnValue(id a1)
{
  return (id)MEMORY[0x1E0DE7BE8](a1);
}

uint64_t objc_claimAutoreleasedReturnValue()
{
  return MEMORY[0x1E0DE7BF8]();
}

id objc_msgSend(id a1, SEL a2, ...)
{
  return (id)MEMORY[0x1E0DE7D20](a1, a2);
}

id objc_msgSendSuper2(objc_super *a1, SEL a2, ...)
{
  return (id)MEMORY[0x1E0DE7D30](a1, a2);
}

uint64_t objc_opt_self()
{
  return MEMORY[0x1E0DE7D58]();
}

void objc_release(id a1)
{
  MEMORY[0x1E0DE7D78](a1);
}

id objc_retain(id a1)
{
  return (id)MEMORY[0x1E0DE7E50](a1);
}

id objc_retainAutorelease(id a1)
{
  return (id)MEMORY[0x1E0DE7E58](a1);
}

id objc_retainAutoreleaseReturnValue(id a1)
{
  return (id)MEMORY[0x1E0DE7E60](a1);
}

id objc_retainAutoreleasedReturnValue(id a1)
{
  return (id)MEMORY[0x1E0DE7E68](a1);
}

void objc_storeStrong(id *location, id obj)
{
  MEMORY[0x1E0DE7FB0](location, obj);
}

uint64_t swift_allocBox()
{
  return MEMORY[0x1E0DEEA98]();
}

uint64_t swift_allocError()
{
  return MEMORY[0x1E0DEEAA8]();
}

uint64_t swift_allocObject()
{
  return MEMORY[0x1E0DEEAB0]();
}

uint64_t swift_allocateGenericValueMetadata()
{
  return MEMORY[0x1E0DEEAC0]();
}

uint64_t swift_arrayDestroy()
{
  return MEMORY[0x1E0DEEAD8]();
}

uint64_t swift_arrayInitWithCopy()
{
  return MEMORY[0x1E0DEEAE0]();
}

uint64_t swift_beginAccess()
{
  return MEMORY[0x1E0DEEAF8]();
}

uint64_t swift_bridgeObjectRelease()
{
  return MEMORY[0x1E0DEEB08]();
}

uint64_t swift_bridgeObjectRelease_n()
{
  return MEMORY[0x1E0DEEB10]();
}

uint64_t swift_bridgeObjectRetain()
{
  return MEMORY[0x1E0DEEB18]();
}

uint64_t swift_bridgeObjectRetain_n()
{
  return MEMORY[0x1E0DEEB20]();
}

uint64_t swift_checkMetadataState()
{
  return MEMORY[0x1E0DEEB28]();
}

uint64_t swift_deallocClassInstance()
{
  return MEMORY[0x1E0DEEB50]();
}

uint64_t swift_deallocObject()
{
  return MEMORY[0x1E0DEEB60]();
}

uint64_t swift_deallocPartialClassInstance()
{
  return MEMORY[0x1E0DEEB68]();
}

uint64_t swift_dynamicCast()
{
  return MEMORY[0x1E0DEEB80]();
}

uint64_t swift_dynamicCastClass()
{
  return MEMORY[0x1E0DEEB88]();
}

uint64_t swift_dynamicCastObjCClassUnconditional()
{
  return MEMORY[0x1E0DEEBB0]();
}

uint64_t swift_endAccess()
{
  return MEMORY[0x1E0DEEBE0]();
}

uint64_t swift_errorRelease()
{
  return MEMORY[0x1E0DEEBF0]();
}

uint64_t swift_errorRetain()
{
  return MEMORY[0x1E0DEEBF8]();
}

uint64_t swift_getAssociatedConformanceWitness()
{
  return MEMORY[0x1E0DEEC00]();
}

uint64_t swift_getAssociatedTypeWitness()
{
  return MEMORY[0x1E0DEEC08]();
}

uint64_t swift_getEnumTagSinglePayloadGeneric()
{
  return MEMORY[0x1E0DEEC48]();
}

uint64_t swift_getForeignTypeMetadata()
{
  return MEMORY[0x1E0DEEC78]();
}

uint64_t swift_getGenericMetadata()
{
  return MEMORY[0x1E0DEECB0]();
}

uint64_t swift_getObjCClassMetadata()
{
  return MEMORY[0x1E0DEECD8]();
}

uint64_t swift_getSingletonMetadata()
{
  return MEMORY[0x1E0DEECF8]();
}

uint64_t swift_getTypeByMangledNameInContext2()
{
  return MEMORY[0x1E0DEED38]();
}

uint64_t swift_getTypeByMangledNameInContextInMetadataState2()
{
  return MEMORY[0x1E0DEED40]();
}

uint64_t swift_getWitnessTable()
{
  return MEMORY[0x1E0DEED50]();
}

uint64_t swift_initClassMetadata2()
{
  return MEMORY[0x1E0DEED58]();
}

uint64_t swift_initStackObject()
{
  return MEMORY[0x1E0DEED78]();
}

uint64_t swift_initStructMetadata()
{
  return MEMORY[0x1E0DEED88]();
}

uint64_t swift_isUniquelyReferenced_nonNull_native()
{
  return MEMORY[0x1E0DEEDD0]();
}

uint64_t swift_lookUpClassMethod()
{
  return MEMORY[0x1E0DEEDE0]();
}

uint64_t swift_once()
{
  return MEMORY[0x1E0DEEE00]();
}

uint64_t swift_release()
{
  return MEMORY[0x1E0DEEE30]();
}

uint64_t swift_release_n()
{
  return MEMORY[0x1E0DEEE38]();
}

uint64_t swift_retain()
{
  return MEMORY[0x1E0DEEE48]();
}

uint64_t swift_retain_n()
{
  return MEMORY[0x1E0DEEE50]();
}

uint64_t swift_setDeallocating()
{
  return MEMORY[0x1E0DEEE70]();
}

uint64_t swift_slowAlloc()
{
  return MEMORY[0x1E0DEEE78]();
}

uint64_t swift_slowDealloc()
{
  return MEMORY[0x1E0DEEE80]();
}

uint64_t swift_storeEnumTagSinglePayloadGeneric()
{
  return MEMORY[0x1E0DEEEA0]();
}

uint64_t swift_unexpectedError()
{
  return MEMORY[0x1E0DEEEB8]();
}

uint64_t swift_unknownObjectRelease()
{
  return MEMORY[0x1E0DEEEC0]();
}

uint64_t swift_unknownObjectRetain()
{
  return MEMORY[0x1E0DEEED0]();
}

uint64_t swift_unknownObjectRetain_n()
{
  return MEMORY[0x1E0DEEED8]();
}

uint64_t swift_updateClassMetadata2()
{
  return MEMORY[0x1E0DEEF78]();
}

uint64_t swift_willThrow()
{
  return MEMORY[0x1E0DEEFC0]();
}

