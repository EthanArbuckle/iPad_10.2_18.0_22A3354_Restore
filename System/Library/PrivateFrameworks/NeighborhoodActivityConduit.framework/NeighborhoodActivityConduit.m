uint64_t protocol witness for Hashable.hash(into:) in conformance NCProtoConversationAVMode()
{
  lazy protocol witness table accessor for type NCProtoConversationAVMode and conformance NCProtoConversationAVMode();
  return Enum.hash(into:)();
}

void one-time initialization function for allCases()
{
  static NCProtoConversationAVMode.allCases = (uint64_t)&outlined read-only object #0 of one-time initialization function for allCases;
}

{
  static NCProtoConversationState.allCases = (uint64_t)&outlined read-only object #0 of one-time initialization function for allCases;
}

{
  static NCProtoContactHandleAnonym.AnonymType.allCases = (uint64_t)&outlined read-only object #0 of one-time initialization function for allCases;
}

{
  static NCProtoContinuityCall.Status.allCases = (uint64_t)&outlined read-only object #0 of one-time initialization function for allCases;
}

{
  static NCProtoSuggestionAdvertisement.SuggestionType.allCases = (uint64_t)&outlined read-only object #0 of one-time initialization function for allCases;
}

{
  static NCProtoAddMemberRequest.NearbyConversationPullContext.allCases = (uint64_t)&outlined read-only object #0 of one-time initialization function for allCases;
}

{
  static NCProtoPullLagunaSessionToTVRequest.Reason.allCases = (uint64_t)&outlined read-only object #0 of one-time initialization function for allCases;
}

{
  static NCProtoStartLagunaSessionRequest.RecentCallFetchType.allCases = (uint64_t)&outlined read-only object #0 of one-time initialization function for allCases;
}

{
  static NCProtoDeviceTokenRequest.ConversationHandoffType.allCases = (uint64_t)&outlined read-only object #0 of one-time initialization function for allCases;
}

{
  static NCProtoDisconnectRequest.DisconnectReason.allCases = (uint64_t)&outlined read-only object #0 of one-time initialization function for allCases;
}

{
  static NCProtoMemberAssociationPrimaryInfo.MemberAssociationType.allCases = (uint64_t)&outlined read-only object #0 of one-time initialization function for allCases;
}

uint64_t static NCProtoConversationAVMode.allCases.getter()
{
  return static NCProtoConversationAVMode.allCases.getter(&one-time initialization token for allCases);
}

uint64_t static NCProtoConversationAVMode.allCases.setter(uint64_t a1)
{
  return static NCProtoConversationAVMode.allCases.setter(a1, &one-time initialization token for allCases, &static NCProtoConversationAVMode.allCases);
}

uint64_t (*static NCProtoConversationAVMode.allCases.modify())()
{
  if (one-time initialization token for allCases != -1)
    swift_once();
  swift_beginAccess();
  return static NCProtoConversationAVMode.allCases.modify;
}

uint64_t protocol witness for static CaseIterable.allCases.getter in conformance NCProtoConversationAVMode@<X0>(_QWORD *a1@<X8>)
{
  return protocol witness for static CaseIterable.allCases.getter in conformance NCProtoConversationAVMode(&one-time initialization token for allCases, &static NCProtoConversationAVMode.allCases, a1);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance NCProtoConversationState()
{
  lazy protocol witness table accessor for type NCProtoConversationState and conformance NCProtoConversationState();
  return Enum.hash(into:)();
}

uint64_t static NCProtoConversationState.allCases.getter()
{
  return static NCProtoConversationAVMode.allCases.getter(&one-time initialization token for allCases);
}

uint64_t static NCProtoConversationState.allCases.setter(uint64_t a1)
{
  return static NCProtoConversationAVMode.allCases.setter(a1, &one-time initialization token for allCases, &static NCProtoConversationState.allCases);
}

uint64_t (*static NCProtoConversationState.allCases.modify())()
{
  if (one-time initialization token for allCases != -1)
    swift_once();
  swift_beginAccess();
  return static NCProtoConversationAVMode.allCases.modify;
}

uint64_t protocol witness for static CaseIterable.allCases.getter in conformance NCProtoConversationState@<X0>(_QWORD *a1@<X8>)
{
  return protocol witness for static CaseIterable.allCases.getter in conformance NCProtoConversationAVMode(&one-time initialization token for allCases, &static NCProtoConversationState.allCases, a1);
}

uint64_t NCProtoContactInfo.namePrefix.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t NCProtoContactInfo.namePrefix.setter(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t (*NCProtoContactInfo.namePrefix.modify())()
{
  return NCProtoContactInfo.namePrefix.modify;
}

uint64_t NCProtoContactInfo.givenName.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t NCProtoContactInfo.givenName.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = a2;
  return result;
}

uint64_t (*NCProtoContactInfo.givenName.modify())()
{
  return NCProtoContactInfo.namePrefix.modify;
}

uint64_t NCProtoContactInfo.middleName.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 32);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t NCProtoContactInfo.middleName.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v2 + 32) = a1;
  *(_QWORD *)(v2 + 40) = a2;
  return result;
}

uint64_t (*NCProtoContactInfo.middleName.modify())()
{
  return NCProtoContactInfo.namePrefix.modify;
}

uint64_t NCProtoContactInfo.familyName.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 48);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t NCProtoContactInfo.familyName.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v2 + 48) = a1;
  *(_QWORD *)(v2 + 56) = a2;
  return result;
}

uint64_t (*NCProtoContactInfo.familyName.modify())()
{
  return NCProtoContactInfo.namePrefix.modify;
}

uint64_t NCProtoContactInfo.nameSuffix.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 64);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t NCProtoContactInfo.nameSuffix.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v2 + 64) = a1;
  *(_QWORD *)(v2 + 72) = a2;
  return result;
}

uint64_t (*NCProtoContactInfo.nameSuffix.modify())()
{
  return NCProtoContactInfo.namePrefix.modify;
}

uint64_t NCProtoContactInfo.nickname.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 80);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t NCProtoContactInfo.nickname.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v2 + 80) = a1;
  *(_QWORD *)(v2 + 88) = a2;
  return result;
}

uint64_t (*NCProtoContactInfo.nickname.modify())()
{
  return NCProtoContactInfo.namePrefix.modify;
}

uint64_t NCProtoContactInfo.imageData.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 96);
  outlined copy of Data._Representation(v1, *(_QWORD *)(v0 + 104));
  return v1;
}

uint64_t outlined copy of Data._Representation(uint64_t a1, unint64_t a2)
{
  uint64_t result;

  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2)
      return result;
    swift_retain();
  }
  return swift_retain();
}

uint64_t outlined consume of Data._Representation(uint64_t a1, unint64_t a2)
{
  uint64_t result;

  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2)
      return result;
    swift_release();
  }
  return swift_release();
}

uint64_t (*NCProtoContactInfo.imageData.modify())()
{
  return NCProtoContactInfo.namePrefix.modify;
}

uint64_t NCProtoContactInfo.organizationName.getter()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v1 = (uint64_t *)(v0 + *(int *)(type metadata accessor for NCProtoContactInfo(0) + 48));
  if (v1[1])
    v2 = *v1;
  else
    v2 = 0;
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t type metadata accessor for NCProtoContactInfo(uint64_t a1)
{
  return type metadata accessor for NCProtoContactInfo(a1, (uint64_t *)&type metadata singleton initialization cache for NCProtoContactInfo);
}

uint64_t key path getter for NCProtoContactInfo.organizationName : NCProtoContactInfo@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t *v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v3 = (uint64_t *)(a1 + *(int *)(type metadata accessor for NCProtoContactInfo(0) + 48));
  v4 = v3[1];
  if (v4)
  {
    v5 = *v3;
    v6 = v4;
  }
  else
  {
    v5 = 0;
    v6 = 0xE000000000000000;
  }
  *a2 = v5;
  a2[1] = v6;
  return swift_bridgeObjectRetain();
}

uint64_t key path setter for NCProtoContactInfo.organizationName : NCProtoContactInfo(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t result;

  v3 = *a1;
  v2 = a1[1];
  v4 = (_QWORD *)(a2 + *(int *)(type metadata accessor for NCProtoContactInfo(0) + 48));
  swift_bridgeObjectRetain();
  result = swift_bridgeObjectRelease();
  *v4 = v3;
  v4[1] = v2;
  return result;
}

uint64_t NCProtoContactInfo.organizationName.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t result;

  v5 = (_QWORD *)(v2 + *(int *)(type metadata accessor for NCProtoContactInfo(0) + 48));
  result = swift_bridgeObjectRelease();
  *v5 = a1;
  v5[1] = a2;
  return result;
}

uint64_t (*NCProtoContactInfo.organizationName.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  uint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;

  *(_QWORD *)(a1 + 16) = v1;
  v3 = *(int *)(type metadata accessor for NCProtoContactInfo(0) + 48);
  *(_DWORD *)(a1 + 24) = v3;
  v4 = (uint64_t *)(v1 + v3);
  v5 = v4[1];
  if (v5)
  {
    v6 = *v4;
    v7 = v5;
  }
  else
  {
    v6 = 0;
    v7 = 0xE000000000000000;
  }
  *(_QWORD *)a1 = v6;
  *(_QWORD *)(a1 + 8) = v7;
  swift_bridgeObjectRetain();
  return NCProtoContactInfo.organizationName.modify;
}

BOOL NCProtoContactInfo.hasOrganizationName.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + *(int *)(type metadata accessor for NCProtoContactInfo(0) + 48) + 8) != 0;
}

Swift::Void __swiftcall NCProtoContactInfo.clearOrganizationName()()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)(v0 + *(int *)(type metadata accessor for NCProtoContactInfo(0) + 48));
  swift_bridgeObjectRelease();
  *v1 = 0;
  v1[1] = 0;
}

uint64_t NCProtoContactInfo.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for NCProtoContactInfo(0) + 44);
  v4 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t NCProtoContactInfo.unknownFields.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for NCProtoContactInfo(0) + 44);
  v4 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*NCProtoContactInfo.unknownFields.modify())()
{
  type metadata accessor for NCProtoContactInfo(0);
  return NCProtoContactInfo.namePrefix.modify;
}

uint64_t NCProtoContactInfo.init()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t result;
  _QWORD *v4;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0xE000000000000000;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0xE000000000000000;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0xE000000000000000;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0xE000000000000000;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0xE000000000000000;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = 0xE000000000000000;
  *(_OWORD *)(a1 + 96) = xmmword_242A30CB0;
  v2 = type metadata accessor for NCProtoContactInfo(0);
  result = UnknownStorage.init()();
  v4 = (_QWORD *)(a1 + *(int *)(v2 + 48));
  *v4 = 0;
  v4[1] = 0;
  return result;
}

uint64_t (*NCProtoContactHandleAnonym.identifier.modify())()
{
  return NCProtoContactInfo.namePrefix.modify;
}

void NCProtoContactHandleAnonym.type.getter(uint64_t a1@<X8>)
{
  uint64_t v1;
  char v2;

  v2 = *(_BYTE *)(v1 + 24);
  *(_QWORD *)a1 = *(_QWORD *)(v1 + 16);
  *(_BYTE *)(a1 + 8) = v2;
}

uint64_t NCProtoContactHandleAnonym.type.setter(uint64_t result)
{
  uint64_t v1;
  char v2;

  v2 = *(_BYTE *)(result + 8);
  *(_QWORD *)(v1 + 16) = *(_QWORD *)result;
  *(_BYTE *)(v1 + 24) = v2;
  return result;
}

uint64_t (*NCProtoContactHandleAnonym.type.modify())()
{
  return NCProtoContactInfo.namePrefix.modify;
}

uint64_t (*NCProtoContactHandleAnonym.localizedLabel.modify())()
{
  return NCProtoContactInfo.namePrefix.modify;
}

uint64_t (*NCProtoContactHandleAnonym.label.modify())()
{
  return NCProtoContactInfo.namePrefix.modify;
}

uint64_t NCProtoContactHandleAnonym.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return NCProtoContactHandleAnonym.unknownFields.getter(type metadata accessor for NCProtoContactHandleAnonym, a1);
}

uint64_t type metadata accessor for NCProtoContactHandleAnonym(uint64_t a1)
{
  return type metadata accessor for NCProtoContactInfo(a1, (uint64_t *)&type metadata singleton initialization cache for NCProtoContactHandleAnonym);
}

uint64_t NCProtoContactHandleAnonym.unknownFields.setter(uint64_t a1)
{
  return NCProtoContactHandleAnonym.unknownFields.setter(a1, type metadata accessor for NCProtoContactHandleAnonym);
}

uint64_t (*NCProtoContactHandleAnonym.unknownFields.modify())()
{
  type metadata accessor for NCProtoContactHandleAnonym(0);
  return NCProtoContactInfo.namePrefix.modify;
}

unint64_t NCProtoContactHandleAnonym.AnonymType.init(rawValue:)@<X0>(unint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = result;
  *(_BYTE *)(a2 + 8) = result < 3;
  *(_BYTE *)(a2 + 9) = 0;
  return result;
}

unint64_t protocol witness for Enum.init(rawValue:) in conformance NCProtoContactHandleAnonym.AnonymType@<X0>(unint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = result;
  *(_BYTE *)(a2 + 8) = result < 3;
  *(_BYTE *)(a2 + 9) = 0;
  return result;
}

_QWORD *protocol witness for RawRepresentable.init(rawValue:) in conformance NCProtoContactHandleAnonym.AnonymType@<X0>(_QWORD *result@<X0>, uint64_t a2@<X8>)
{
  BOOL v2;
  char v3;

  v2 = *result >= 3uLL;
  *(_QWORD *)a2 = *result;
  v3 = !v2;
  *(_BYTE *)(a2 + 8) = v3;
  *(_BYTE *)(a2 + 9) = 0;
  return result;
}

uint64_t protocol witness for Hashable.hash(into:) in conformance NCProtoContactHandleAnonym.AnonymType()
{
  lazy protocol witness table accessor for type NCProtoContactHandleAnonym.AnonymType and conformance NCProtoContactHandleAnonym.AnonymType();
  return Enum.hash(into:)();
}

uint64_t NCProtoContactHandleAnonym.init()@<X0>(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0xE000000000000000;
  *(_QWORD *)(a1 + 16) = 0;
  *(_BYTE *)(a1 + 24) = 1;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0xE000000000000000;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0xE000000000000000;
  type metadata accessor for NCProtoContactHandleAnonym(0);
  return UnknownStorage.init()();
}

uint64_t static NCProtoContactHandleAnonym.AnonymType.allCases.getter()
{
  return static NCProtoConversationAVMode.allCases.getter(&one-time initialization token for allCases);
}

uint64_t static NCProtoContactHandleAnonym.AnonymType.allCases.setter(uint64_t a1)
{
  return static NCProtoConversationAVMode.allCases.setter(a1, &one-time initialization token for allCases, &static NCProtoContactHandleAnonym.AnonymType.allCases);
}

uint64_t (*static NCProtoContactHandleAnonym.AnonymType.allCases.modify())()
{
  if (one-time initialization token for allCases != -1)
    swift_once();
  swift_beginAccess();
  return static NCProtoConversationAVMode.allCases.modify;
}

uint64_t protocol witness for static CaseIterable.allCases.getter in conformance NCProtoContactHandleAnonym.AnonymType@<X0>(_QWORD *a1@<X8>)
{
  return protocol witness for static CaseIterable.allCases.getter in conformance NCProtoConversationAVMode(&one-time initialization token for allCases, &static NCProtoContactHandleAnonym.AnonymType.allCases, a1);
}

uint64_t NCProtoContinuityFavorite.contactInfo.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v9;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NCProtoContactInfo?);
  MEMORY[0x24BDAC7A8]();
  v4 = (char *)&v9 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for NCProtoContinuityFavorite(0);
  outlined init with copy of NCProtoContactInfo?(v1 + *(int *)(v5 + 32), (uint64_t)v4, &demangling cache variable for type metadata for NCProtoContactInfo?);
  v6 = type metadata accessor for NCProtoContactInfo(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 48))(v4, 1, v6) != 1)
    return outlined init with take of NCProtoContactInfo((uint64_t)v4, a1, type metadata accessor for NCProtoContactInfo);
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0xE000000000000000;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0xE000000000000000;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0xE000000000000000;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0xE000000000000000;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0xE000000000000000;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = 0xE000000000000000;
  *(_OWORD *)(a1 + 96) = xmmword_242A30CB0;
  UnknownStorage.init()();
  v7 = (_QWORD *)(a1 + *(int *)(v6 + 48));
  *v7 = 0;
  v7[1] = 0;
  return outlined destroy of NCProtoContactInfo?((uint64_t)v4, &demangling cache variable for type metadata for NCProtoContactInfo?);
}

uint64_t __swift_instantiateConcreteTypeFromMangledName(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (result < 0)
  {
    result = MEMORY[0x2494EB004]((char *)a1 + (int)result, -(result >> 32), 0, 0);
    *a1 = result;
  }
  return result;
}

uint64_t type metadata accessor for NCProtoContinuityFavorite(uint64_t a1)
{
  return type metadata accessor for NCProtoContactInfo(a1, (uint64_t *)&type metadata singleton initialization cache for NCProtoContinuityFavorite);
}

uint64_t key path getter for NCProtoContinuityFavorite.contactInfo : NCProtoContinuityFavorite@<X0>(uint64_t a1@<X8>)
{
  return NCProtoContinuityFavorite.contactInfo.getter(a1);
}

uint64_t key path setter for NCProtoContinuityFavorite.contactInfo : NCProtoContinuityFavorite(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v10;

  v4 = type metadata accessor for NCProtoContactInfo(0);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8]();
  v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of NCProtoContactInfo(a1, (uint64_t)v7, type metadata accessor for NCProtoContactInfo);
  v8 = a2 + *(int *)(type metadata accessor for NCProtoContinuityFavorite(0) + 32);
  outlined destroy of NCProtoContactInfo?(v8, &demangling cache variable for type metadata for NCProtoContactInfo?);
  outlined init with take of NCProtoContactInfo((uint64_t)v7, v8, type metadata accessor for NCProtoContactInfo);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v5 + 56))(v8, 0, 1, v4);
}

uint64_t NCProtoContinuityFavorite.contactInfo.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for NCProtoContinuityFavorite(0) + 32);
  outlined destroy of NCProtoContactInfo?(v3, &demangling cache variable for type metadata for NCProtoContactInfo?);
  outlined init with take of NCProtoContactInfo(a1, v3, type metadata accessor for NCProtoContactInfo);
  v4 = type metadata accessor for NCProtoContactInfo(0);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(v3, 0, 1, v4);
}

void (*NCProtoContinuityFavorite.contactInfo.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NCProtoContactInfo?);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[1] = v5;
  v6 = type metadata accessor for NCProtoContactInfo(0);
  v3[2] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v3[3] = v7;
  v8 = *(_QWORD *)(v7 + 64);
  v3[4] = malloc(v8);
  v9 = malloc(v8);
  v3[5] = v9;
  v10 = *(int *)(type metadata accessor for NCProtoContinuityFavorite(0) + 32);
  *((_DWORD *)v3 + 12) = v10;
  outlined init with copy of NCProtoContactInfo?(v1 + v10, (uint64_t)v5, &demangling cache variable for type metadata for NCProtoContactInfo?);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
    *v9 = 0;
    v9[1] = 0xE000000000000000;
    v9[2] = 0;
    v9[3] = 0xE000000000000000;
    v9[4] = 0;
    v9[5] = 0xE000000000000000;
    v9[6] = 0;
    v9[7] = 0xE000000000000000;
    v9[8] = 0;
    v9[9] = 0xE000000000000000;
    v9[10] = 0;
    v9[11] = 0xE000000000000000;
    *((_OWORD *)v9 + 6) = xmmword_242A30CB0;
    UnknownStorage.init()();
    v11 = (_QWORD *)((char *)v9 + *(int *)(v6 + 48));
    *v11 = 0;
    v11[1] = 0;
    outlined destroy of NCProtoContactInfo?((uint64_t)v5, &demangling cache variable for type metadata for NCProtoContactInfo?);
  }
  else
  {
    outlined init with take of NCProtoContactInfo((uint64_t)v5, (uint64_t)v9, type metadata accessor for NCProtoContactInfo);
  }
  return NCProtoContinuityFavorite.contactInfo.modify;
}

void NCProtoContinuityFavorite.contactInfo.modify(uint64_t a1, char a2)
{
  NCProtoContinuityFavorite.contactInfo.modify(a1, a2, &demangling cache variable for type metadata for NCProtoContactInfo?, type metadata accessor for NCProtoContactInfo);
}

BOOL NCProtoContinuityFavorite.hasContactInfo.getter()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  _BOOL8 v5;
  uint64_t v7;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NCProtoContactInfo?);
  MEMORY[0x24BDAC7A8]();
  v2 = (char *)&v7 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for NCProtoContinuityFavorite(0);
  outlined init with copy of NCProtoContactInfo?(v0 + *(int *)(v3 + 32), (uint64_t)v2, &demangling cache variable for type metadata for NCProtoContactInfo?);
  v4 = type metadata accessor for NCProtoContactInfo(0);
  v5 = (*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(v2, 1, v4) != 1;
  outlined destroy of NCProtoContactInfo?((uint64_t)v2, &demangling cache variable for type metadata for NCProtoContactInfo?);
  return v5;
}

Swift::Void __swiftcall NCProtoContinuityFavorite.clearContactInfo()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0 + *(int *)(type metadata accessor for NCProtoContinuityFavorite(0) + 32);
  outlined destroy of NCProtoContactInfo?(v1, &demangling cache variable for type metadata for NCProtoContactInfo?);
  v2 = type metadata accessor for NCProtoContactInfo(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 56))(v1, 1, 1, v2);
}

uint64_t (*NCProtoContinuityFavorite.contactIdentifier.modify())()
{
  return NCProtoContactInfo.namePrefix.modify;
}

uint64_t NCProtoContinuityFavorite.anonym.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NCProtoContactHandleAnonym?);
  MEMORY[0x24BDAC7A8]();
  v4 = (char *)&v8 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for NCProtoContinuityFavorite(0);
  outlined init with copy of NCProtoContactInfo?(v1 + *(int *)(v5 + 36), (uint64_t)v4, &demangling cache variable for type metadata for NCProtoContactHandleAnonym?);
  v6 = type metadata accessor for NCProtoContactHandleAnonym(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 48))(v4, 1, v6) != 1)
    return outlined init with take of NCProtoContactInfo((uint64_t)v4, a1, type metadata accessor for NCProtoContactHandleAnonym);
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0xE000000000000000;
  *(_QWORD *)(a1 + 16) = 0;
  *(_BYTE *)(a1 + 24) = 1;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0xE000000000000000;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0xE000000000000000;
  UnknownStorage.init()();
  return outlined destroy of NCProtoContactInfo?((uint64_t)v4, &demangling cache variable for type metadata for NCProtoContactHandleAnonym?);
}

uint64_t outlined init with take of NCProtoContactInfo(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v5;

  v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t key path getter for NCProtoContinuityFavorite.anonym : NCProtoContinuityFavorite@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NCProtoContactHandleAnonym?);
  MEMORY[0x24BDAC7A8]();
  v5 = (char *)&v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for NCProtoContinuityFavorite(0);
  outlined init with copy of NCProtoContactInfo?(a1 + *(int *)(v6 + 36), (uint64_t)v5, &demangling cache variable for type metadata for NCProtoContactHandleAnonym?);
  v7 = type metadata accessor for NCProtoContactHandleAnonym(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v5, 1, v7) != 1)
    return outlined init with take of NCProtoContactInfo((uint64_t)v5, a2, type metadata accessor for NCProtoContactHandleAnonym);
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0xE000000000000000;
  *(_QWORD *)(a2 + 16) = 0;
  *(_BYTE *)(a2 + 24) = 1;
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0xE000000000000000;
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 56) = 0xE000000000000000;
  UnknownStorage.init()();
  return outlined destroy of NCProtoContactInfo?((uint64_t)v5, &demangling cache variable for type metadata for NCProtoContactHandleAnonym?);
}

uint64_t key path setter for NCProtoContinuityFavorite.anonym : NCProtoContinuityFavorite(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v10;

  v4 = type metadata accessor for NCProtoContactHandleAnonym(0);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8]();
  v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of NCProtoContactInfo(a1, (uint64_t)v7, type metadata accessor for NCProtoContactHandleAnonym);
  v8 = a2 + *(int *)(type metadata accessor for NCProtoContinuityFavorite(0) + 36);
  outlined destroy of NCProtoContactInfo?(v8, &demangling cache variable for type metadata for NCProtoContactHandleAnonym?);
  outlined init with take of NCProtoContactInfo((uint64_t)v7, v8, type metadata accessor for NCProtoContactHandleAnonym);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v5 + 56))(v8, 0, 1, v4);
}

uint64_t NCProtoContinuityFavorite.anonym.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for NCProtoContinuityFavorite(0) + 36);
  outlined destroy of NCProtoContactInfo?(v3, &demangling cache variable for type metadata for NCProtoContactHandleAnonym?);
  outlined init with take of NCProtoContactInfo(a1, v3, type metadata accessor for NCProtoContactHandleAnonym);
  v4 = type metadata accessor for NCProtoContactHandleAnonym(0);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(v3, 0, 1, v4);
}

void (*NCProtoContinuityFavorite.anonym.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  _QWORD *v9;
  uint64_t v10;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NCProtoContactHandleAnonym?);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[1] = v5;
  v6 = type metadata accessor for NCProtoContactHandleAnonym(0);
  v3[2] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v3[3] = v7;
  v8 = *(_QWORD *)(v7 + 64);
  v3[4] = malloc(v8);
  v9 = malloc(v8);
  v3[5] = v9;
  v10 = *(int *)(type metadata accessor for NCProtoContinuityFavorite(0) + 36);
  *((_DWORD *)v3 + 12) = v10;
  outlined init with copy of NCProtoContactInfo?(v1 + v10, (uint64_t)v5, &demangling cache variable for type metadata for NCProtoContactHandleAnonym?);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
    *v9 = 0;
    v9[1] = 0xE000000000000000;
    v9[2] = 0;
    *((_BYTE *)v9 + 24) = 1;
    v9[4] = 0;
    v9[5] = 0xE000000000000000;
    v9[6] = 0;
    v9[7] = 0xE000000000000000;
    UnknownStorage.init()();
    outlined destroy of NCProtoContactInfo?((uint64_t)v5, &demangling cache variable for type metadata for NCProtoContactHandleAnonym?);
  }
  else
  {
    outlined init with take of NCProtoContactInfo((uint64_t)v5, (uint64_t)v9, type metadata accessor for NCProtoContactHandleAnonym);
  }
  return NCProtoContinuityFavorite.anonym.modify;
}

void NCProtoContinuityFavorite.anonym.modify(uint64_t a1, char a2)
{
  NCProtoContinuityFavorite.contactInfo.modify(a1, a2, &demangling cache variable for type metadata for NCProtoContactHandleAnonym?, type metadata accessor for NCProtoContactHandleAnonym);
}

uint64_t outlined init with copy of NCProtoContactInfo(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v5;

  v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t outlined destroy of NCProtoContactInfo(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v3;

  v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

BOOL NCProtoContinuityFavorite.hasAnonym.getter()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  _BOOL8 v5;
  uint64_t v7;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NCProtoContactHandleAnonym?);
  MEMORY[0x24BDAC7A8]();
  v2 = (char *)&v7 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for NCProtoContinuityFavorite(0);
  outlined init with copy of NCProtoContactInfo?(v0 + *(int *)(v3 + 36), (uint64_t)v2, &demangling cache variable for type metadata for NCProtoContactHandleAnonym?);
  v4 = type metadata accessor for NCProtoContactHandleAnonym(0);
  v5 = (*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(v2, 1, v4) != 1;
  outlined destroy of NCProtoContactInfo?((uint64_t)v2, &demangling cache variable for type metadata for NCProtoContactHandleAnonym?);
  return v5;
}

Swift::Void __swiftcall NCProtoContinuityFavorite.clearAnonym()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0 + *(int *)(type metadata accessor for NCProtoContinuityFavorite(0) + 36);
  outlined destroy of NCProtoContactInfo?(v1, &demangling cache variable for type metadata for NCProtoContactHandleAnonym?);
  v2 = type metadata accessor for NCProtoContactHandleAnonym(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 56))(v1, 1, 1, v2);
}

uint64_t (*NCProtoContinuityFavorite.actionType.modify())()
{
  return NCProtoContactInfo.namePrefix.modify;
}

uint64_t (*NCProtoContinuityFavorite.bundleIdentifier.modify())()
{
  return NCProtoContactInfo.namePrefix.modify;
}

uint64_t NCProtoContinuityFavorite.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return NCProtoContinuityFavorite.unknownFields.getter(type metadata accessor for NCProtoContinuityFavorite, a1);
}

uint64_t NCProtoContinuityFavorite.unknownFields.setter(uint64_t a1)
{
  return NCProtoContinuityFavorite.unknownFields.setter(a1, type metadata accessor for NCProtoContinuityFavorite);
}

uint64_t (*NCProtoContinuityFavorite.unknownFields.modify())()
{
  type metadata accessor for NCProtoContinuityFavorite(0);
  return NCProtoContactInfo.namePrefix.modify;
}

uint64_t NCProtoContinuityFavorite.init()@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v2;
  char *v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;

  *a1 = 0;
  a1[1] = 0xE000000000000000;
  a1[2] = 0;
  a1[3] = 0xE000000000000000;
  a1[4] = 0;
  a1[5] = 0xE000000000000000;
  v2 = type metadata accessor for NCProtoContinuityFavorite(0);
  UnknownStorage.init()();
  v3 = (char *)a1 + *(int *)(v2 + 32);
  v4 = type metadata accessor for NCProtoContactInfo(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(v3, 1, 1, v4);
  v5 = (char *)a1 + *(int *)(v2 + 36);
  v6 = type metadata accessor for NCProtoContactHandleAnonym(0);
  return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(v5, 1, 1, v6);
}

uint64_t NCProtoAddressableContact.contactInfo.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v9;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NCProtoContactInfo?);
  MEMORY[0x24BDAC7A8]();
  v4 = (char *)&v9 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for NCProtoAddressableContact(0);
  outlined init with copy of NCProtoContactInfo?(v1 + *(int *)(v5 + 28), (uint64_t)v4, &demangling cache variable for type metadata for NCProtoContactInfo?);
  v6 = type metadata accessor for NCProtoContactInfo(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 48))(v4, 1, v6) != 1)
    return outlined init with take of NCProtoContactInfo((uint64_t)v4, a1, type metadata accessor for NCProtoContactInfo);
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0xE000000000000000;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0xE000000000000000;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0xE000000000000000;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0xE000000000000000;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0xE000000000000000;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = 0xE000000000000000;
  *(_OWORD *)(a1 + 96) = xmmword_242A30CB0;
  UnknownStorage.init()();
  v7 = (_QWORD *)(a1 + *(int *)(v6 + 48));
  *v7 = 0;
  v7[1] = 0;
  return outlined destroy of NCProtoContactInfo?((uint64_t)v4, &demangling cache variable for type metadata for NCProtoContactInfo?);
}

uint64_t type metadata accessor for NCProtoAddressableContact(uint64_t a1)
{
  return type metadata accessor for NCProtoContactInfo(a1, (uint64_t *)&type metadata singleton initialization cache for NCProtoAddressableContact);
}

uint64_t key path getter for NCProtoAddressableContact.contactInfo : NCProtoAddressableContact@<X0>(uint64_t a1@<X8>)
{
  return NCProtoAddressableContact.contactInfo.getter(a1);
}

uint64_t key path setter for NCProtoAddressableContact.contactInfo : NCProtoAddressableContact(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for NCProtoAddressableContact.contactInfo : NCProtoAddressableContact(a1, a2, a3, a4, type metadata accessor for NCProtoContactInfo, type metadata accessor for NCProtoAddressableContact, &demangling cache variable for type metadata for NCProtoContactInfo?);
}

uint64_t NCProtoAddressableContact.contactInfo.setter(uint64_t a1)
{
  return NCProtoAddressableContact.contactInfo.setter(a1, type metadata accessor for NCProtoAddressableContact, &demangling cache variable for type metadata for NCProtoContactInfo?, type metadata accessor for NCProtoContactInfo);
}

void (*NCProtoAddressableContact.contactInfo.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NCProtoContactInfo?);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[1] = v5;
  v6 = type metadata accessor for NCProtoContactInfo(0);
  v3[2] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v3[3] = v7;
  v8 = *(_QWORD *)(v7 + 64);
  v3[4] = malloc(v8);
  v9 = malloc(v8);
  v3[5] = v9;
  v10 = *(int *)(type metadata accessor for NCProtoAddressableContact(0) + 28);
  *((_DWORD *)v3 + 12) = v10;
  outlined init with copy of NCProtoContactInfo?(v1 + v10, (uint64_t)v5, &demangling cache variable for type metadata for NCProtoContactInfo?);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
    *v9 = 0;
    v9[1] = 0xE000000000000000;
    v9[2] = 0;
    v9[3] = 0xE000000000000000;
    v9[4] = 0;
    v9[5] = 0xE000000000000000;
    v9[6] = 0;
    v9[7] = 0xE000000000000000;
    v9[8] = 0;
    v9[9] = 0xE000000000000000;
    v9[10] = 0;
    v9[11] = 0xE000000000000000;
    *((_OWORD *)v9 + 6) = xmmword_242A30CB0;
    UnknownStorage.init()();
    v11 = (_QWORD *)((char *)v9 + *(int *)(v6 + 48));
    *v11 = 0;
    v11[1] = 0;
    outlined destroy of NCProtoContactInfo?((uint64_t)v5, &demangling cache variable for type metadata for NCProtoContactInfo?);
  }
  else
  {
    outlined init with take of NCProtoContactInfo((uint64_t)v5, (uint64_t)v9, type metadata accessor for NCProtoContactInfo);
  }
  return NCProtoContinuityFavorite.contactInfo.modify;
}

BOOL NCProtoAddressableContact.hasContactInfo.getter()
{
  return NCProtoAddressableContact.hasContactInfo.getter(&demangling cache variable for type metadata for NCProtoContactInfo?, type metadata accessor for NCProtoAddressableContact, type metadata accessor for NCProtoContactInfo);
}

Swift::Void __swiftcall NCProtoAddressableContact.clearContactInfo()()
{
  NCProtoAddressableContact.clearContactInfo()(type metadata accessor for NCProtoAddressableContact, &demangling cache variable for type metadata for NCProtoContactInfo?, type metadata accessor for NCProtoContactInfo);
}

uint64_t (*NCProtoAddressableContact.handleAnonyms.modify())()
{
  return NCProtoContactInfo.namePrefix.modify;
}

uint64_t (*NCProtoAddressableContact.contactIdentifier.modify())()
{
  return NCProtoContactInfo.namePrefix.modify;
}

uint64_t NCProtoAddressableContact.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return NCProtoAddressableContact.unknownFields.getter(type metadata accessor for NCProtoAddressableContact, a1);
}

uint64_t NCProtoAddressableContact.unknownFields.setter(uint64_t a1)
{
  return NCProtoAddressableContact.unknownFields.setter(a1, type metadata accessor for NCProtoAddressableContact);
}

uint64_t (*NCProtoAddressableContact.unknownFields.modify())()
{
  type metadata accessor for NCProtoAddressableContact(0);
  return NCProtoContactInfo.namePrefix.modify;
}

uint64_t NCProtoAddressableContact.init()@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v2;
  char *v3;
  uint64_t v4;

  *a1 = MEMORY[0x24BEE4AF8];
  a1[1] = 0;
  a1[2] = 0xE000000000000000;
  v2 = type metadata accessor for NCProtoAddressableContact(0);
  UnknownStorage.init()();
  v3 = (char *)a1 + *(int *)(v2 + 28);
  v4 = type metadata accessor for NCProtoContactInfo(0);
  return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(v3, 1, 1, v4);
}

uint64_t NCProtoActiveConversation.uuidString.getter()
{
  return NCProtoActiveConversation.uuidString.getter(type metadata accessor for NCProtoActiveConversation);
}

uint64_t type metadata accessor for NCProtoActiveConversation(uint64_t a1)
{
  return type metadata accessor for NCProtoContactInfo(a1, (uint64_t *)&type metadata singleton initialization cache for NCProtoActiveConversation);
}

uint64_t key path getter for NCProtoActiveConversation.uuidString : NCProtoActiveConversation@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  return key path getter for NCProtoActiveConversation.uuidString : NCProtoActiveConversation(a1, type metadata accessor for NCProtoActiveConversation, a2);
}

uint64_t key path setter for NCProtoActiveConversation.uuidString : NCProtoActiveConversation(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for NCProtoActiveConversation.uuidString : NCProtoActiveConversation(a1, a2, a3, a4, type metadata accessor for NCProtoActiveConversation);
}

uint64_t NCProtoActiveConversation.uuidString.setter(uint64_t a1, uint64_t a2)
{
  return NCProtoActiveConversation.uuidString.setter(a1, a2, type metadata accessor for NCProtoActiveConversation);
}

uint64_t (*NCProtoActiveConversation.uuidString.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  uint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;

  *(_QWORD *)(a1 + 16) = v1;
  v3 = *(int *)(type metadata accessor for NCProtoActiveConversation(0) + 24);
  *(_DWORD *)(a1 + 24) = v3;
  v4 = (uint64_t *)(v1 + v3);
  v5 = v4[1];
  if (v5)
  {
    v6 = *v4;
    v7 = v5;
  }
  else
  {
    v6 = 0;
    v7 = 0xE000000000000000;
  }
  *(_QWORD *)a1 = v6;
  *(_QWORD *)(a1 + 8) = v7;
  swift_bridgeObjectRetain();
  return NCProtoContactInfo.organizationName.modify;
}

BOOL NCProtoActiveConversation.hasUuidString.getter()
{
  return NCProtoActiveConversation.hasUuidString.getter(type metadata accessor for NCProtoActiveConversation);
}

Swift::Void __swiftcall NCProtoActiveConversation.clearUuidString()()
{
  NCProtoActiveConversation.clearUuidString()(type metadata accessor for NCProtoActiveConversation);
}

uint64_t NCProtoActiveConversation.displayName.getter()
{
  return NCProtoActiveConversation.displayName.getter(type metadata accessor for NCProtoActiveConversation);
}

uint64_t key path getter for NCProtoActiveConversation.displayName : NCProtoActiveConversation@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  return key path getter for NCProtoActiveConversation.displayName : NCProtoActiveConversation(a1, type metadata accessor for NCProtoActiveConversation, a2);
}

uint64_t key path setter for NCProtoActiveConversation.displayName : NCProtoActiveConversation(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for NCProtoActiveConversation.displayName : NCProtoActiveConversation(a1, a2, a3, a4, type metadata accessor for NCProtoActiveConversation);
}

uint64_t NCProtoActiveConversation.displayName.setter(uint64_t a1, uint64_t a2)
{
  return NCProtoActiveConversation.displayName.setter(a1, a2, type metadata accessor for NCProtoActiveConversation);
}

uint64_t (*NCProtoActiveConversation.displayName.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  uint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;

  *(_QWORD *)(a1 + 16) = v1;
  v3 = *(int *)(type metadata accessor for NCProtoActiveConversation(0) + 28);
  *(_DWORD *)(a1 + 24) = v3;
  v4 = (uint64_t *)(v1 + v3);
  v5 = v4[1];
  if (v5)
  {
    v6 = *v4;
    v7 = v5;
  }
  else
  {
    v6 = 0;
    v7 = 0xE000000000000000;
  }
  *(_QWORD *)a1 = v6;
  *(_QWORD *)(a1 + 8) = v7;
  swift_bridgeObjectRetain();
  return NCProtoContactInfo.organizationName.modify;
}

BOOL NCProtoActiveConversation.hasDisplayName.getter()
{
  return NCProtoActiveConversation.hasDisplayName.getter(type metadata accessor for NCProtoActiveConversation);
}

Swift::Void __swiftcall NCProtoActiveConversation.clearDisplayName()()
{
  NCProtoActiveConversation.clearDisplayName()(type metadata accessor for NCProtoActiveConversation);
}

uint64_t NCProtoActiveConversation.avMode.getter@<X0>(uint64_t a1@<X8>)
{
  return NCProtoActiveConversation.avMode.getter(type metadata accessor for NCProtoActiveConversation, a1);
}

uint64_t key path getter for NCProtoActiveConversation.avMode : NCProtoActiveConversation@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return key path getter for NCProtoActiveConversation.avMode : NCProtoActiveConversation(a1, type metadata accessor for NCProtoActiveConversation, a2);
}

uint64_t key path setter for NCProtoActiveConversation.avMode : NCProtoActiveConversation(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for NCProtoActiveConversation.avMode : NCProtoActiveConversation(a1, a2, a3, a4, type metadata accessor for NCProtoActiveConversation);
}

uint64_t NCProtoActiveConversation.avMode.setter(uint64_t *a1)
{
  return NCProtoActiveConversation.avMode.setter(a1, type metadata accessor for NCProtoActiveConversation);
}

uint64_t (*NCProtoActiveConversation.avMode.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  char v6;
  char v7;

  *(_QWORD *)(a1 + 16) = v1;
  v3 = *(int *)(type metadata accessor for NCProtoActiveConversation(0) + 32);
  *(_DWORD *)(a1 + 12) = v3;
  v4 = (uint64_t *)(v1 + v3);
  if ((*((_BYTE *)v4 + 9) & 1) != 0)
  {
    v5 = 0;
    v6 = 1;
  }
  else
  {
    v7 = *((_BYTE *)v4 + 8);
    v5 = *v4;
    v6 = v7 & 1;
  }
  *(_QWORD *)a1 = v5;
  *(_BYTE *)(a1 + 8) = v6;
  return NCProtoActiveConversation.avMode.modify;
}

BOOL NCProtoActiveConversation.hasAvMode.getter()
{
  return NCProtoActiveConversation.hasAvMode.getter(type metadata accessor for NCProtoActiveConversation);
}

Swift::Void __swiftcall NCProtoActiveConversation.clearAvMode()()
{
  NCProtoActiveConversation.clearAvMode()(type metadata accessor for NCProtoActiveConversation);
}

uint64_t NCProtoActiveConversation.remoteMemberCount.getter()
{
  uint64_t v0;
  _BYTE *v1;

  v1 = (_BYTE *)(v0 + *(int *)(type metadata accessor for NCProtoActiveConversation(0) + 36));
  if (v1[8])
    return 0;
  else
    return *(_QWORD *)v1;
}

uint64_t key path getter for NCProtoActiveConversation.remoteMemberCount : NCProtoActiveConversation@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t result;
  uint64_t *v5;
  uint64_t v6;

  result = type metadata accessor for NCProtoActiveConversation(0);
  v5 = (uint64_t *)(a1 + *(int *)(result + 36));
  if (*((_BYTE *)v5 + 8))
    v6 = 0;
  else
    v6 = *v5;
  *a2 = v6;
  return result;
}

uint64_t key path setter for NCProtoActiveConversation.remoteMemberCount : NCProtoActiveConversation(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t result;
  uint64_t v5;

  v3 = *a1;
  result = type metadata accessor for NCProtoActiveConversation(0);
  v5 = a2 + *(int *)(result + 36);
  *(_QWORD *)v5 = v3;
  *(_BYTE *)(v5 + 8) = 0;
  return result;
}

uint64_t NCProtoActiveConversation.remoteMemberCount.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v4;

  result = type metadata accessor for NCProtoActiveConversation(0);
  v4 = v1 + *(int *)(result + 36);
  *(_QWORD *)v4 = a1;
  *(_BYTE *)(v4 + 8) = 0;
  return result;
}

uint64_t (*NCProtoActiveConversation.remoteMemberCount.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;

  *(_QWORD *)(a1 + 8) = v1;
  v3 = *(int *)(type metadata accessor for NCProtoActiveConversation(0) + 36);
  *(_DWORD *)(a1 + 16) = v3;
  v4 = (uint64_t *)(v1 + v3);
  if (*((_BYTE *)v4 + 8))
    v5 = 0;
  else
    v5 = *v4;
  *(_QWORD *)a1 = v5;
  return NCProtoActiveConversation.remoteMemberCount.modify;
}

BOOL NCProtoActiveConversation.hasRemoteMemberCount.getter()
{
  uint64_t v0;

  return (*(_BYTE *)(v0 + *(int *)(type metadata accessor for NCProtoActiveConversation(0) + 36) + 8) & 1) == 0;
}

Swift::Void __swiftcall NCProtoActiveConversation.clearRemoteMemberCount()()
{
  uint64_t v0;
  uint64_t v1;

  v1 = v0 + *(int *)(type metadata accessor for NCProtoActiveConversation(0) + 36);
  *(_QWORD *)v1 = 0;
  *(_BYTE *)(v1 + 8) = 1;
}

uint64_t (*NCProtoActiveConversation.remoteMemberContactIdentifiers.modify())()
{
  return NCProtoContactInfo.namePrefix.modify;
}

uint64_t NCProtoActiveConversation.state.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t result;
  uint64_t *v4;
  uint64_t v5;
  char v6;
  char v7;

  result = type metadata accessor for NCProtoActiveConversation(0);
  v4 = (uint64_t *)(v1 + *(int *)(result + 40));
  if ((*((_BYTE *)v4 + 9) & 1) != 0)
  {
    v5 = 0;
    v6 = 1;
  }
  else
  {
    v7 = *((_BYTE *)v4 + 8);
    v5 = *v4;
    v6 = v7 & 1;
  }
  *(_QWORD *)a1 = v5;
  *(_BYTE *)(a1 + 8) = v6;
  return result;
}

uint64_t key path getter for NCProtoActiveConversation.state : NCProtoActiveConversation@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  uint64_t *v5;
  uint64_t v6;
  char v7;
  int v8;

  result = type metadata accessor for NCProtoActiveConversation(0);
  v5 = (uint64_t *)(a1 + *(int *)(result + 40));
  v6 = *v5;
  v7 = *((_BYTE *)v5 + 8);
  v8 = *((unsigned __int8 *)v5 + 9);
  if (v8)
    v6 = 0;
  *(_QWORD *)a2 = v6;
  *(_BYTE *)(a2 + 8) = (v8 | v7) & 1;
  return result;
}

uint64_t key path setter for NCProtoActiveConversation.state : NCProtoActiveConversation(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  char v4;
  uint64_t result;
  uint64_t v6;

  v3 = *a1;
  v4 = *((_BYTE *)a1 + 8);
  result = type metadata accessor for NCProtoActiveConversation(0);
  v6 = a2 + *(int *)(result + 40);
  *(_QWORD *)v6 = v3;
  *(_BYTE *)(v6 + 8) = v4;
  *(_BYTE *)(v6 + 9) = 0;
  return result;
}

uint64_t NCProtoActiveConversation.state.setter(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  char v3;
  uint64_t result;
  uint64_t v5;

  v2 = *a1;
  v3 = *((_BYTE *)a1 + 8);
  result = type metadata accessor for NCProtoActiveConversation(0);
  v5 = v1 + *(int *)(result + 40);
  *(_QWORD *)v5 = v2;
  *(_BYTE *)(v5 + 8) = v3;
  *(_BYTE *)(v5 + 9) = 0;
  return result;
}

uint64_t (*NCProtoActiveConversation.state.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  char v6;
  char v7;

  *(_QWORD *)(a1 + 16) = v1;
  v3 = *(int *)(type metadata accessor for NCProtoActiveConversation(0) + 40);
  *(_DWORD *)(a1 + 12) = v3;
  v4 = (uint64_t *)(v1 + v3);
  if ((*((_BYTE *)v4 + 9) & 1) != 0)
  {
    v5 = 0;
    v6 = 1;
  }
  else
  {
    v7 = *((_BYTE *)v4 + 8);
    v5 = *v4;
    v6 = v7 & 1;
  }
  *(_QWORD *)a1 = v5;
  *(_BYTE *)(a1 + 8) = v6;
  return NCProtoActiveConversation.avMode.modify;
}

BOOL NCProtoActiveConversation.hasState.getter()
{
  uint64_t v0;

  return (*(_BYTE *)(v0 + *(int *)(type metadata accessor for NCProtoActiveConversation(0) + 40) + 9) & 1) == 0;
}

Swift::Void __swiftcall NCProtoActiveConversation.clearState()()
{
  uint64_t v0;
  uint64_t v1;

  v1 = v0 + *(int *)(type metadata accessor for NCProtoActiveConversation(0) + 40);
  *(_QWORD *)v1 = 0;
  *(_WORD *)(v1 + 8) = 256;
}

uint64_t NCProtoActiveConversation.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return NCProtoActiveConversation.unknownFields.getter(type metadata accessor for NCProtoActiveConversation, a1);
}

uint64_t NCProtoActiveConversation.unknownFields.setter(uint64_t a1)
{
  return NCProtoActiveConversation.unknownFields.setter(a1, type metadata accessor for NCProtoActiveConversation);
}

uint64_t (*NCProtoActiveConversation.unknownFields.modify())()
{
  type metadata accessor for NCProtoActiveConversation(0);
  return NCProtoContactInfo.namePrefix.modify;
}

uint64_t NCProtoActiveConversation.init()@<X0>(_QWORD *a1@<X8>)
{
  int *active;
  uint64_t result;
  _QWORD *v4;
  _QWORD *v5;
  char *v6;
  char *v7;
  char *v8;

  *a1 = MEMORY[0x24BEE4AF8];
  active = (int *)type metadata accessor for NCProtoActiveConversation(0);
  result = UnknownStorage.init()();
  v4 = (_QWORD *)((char *)a1 + active[6]);
  *v4 = 0;
  v4[1] = 0;
  v5 = (_QWORD *)((char *)a1 + active[7]);
  *v5 = 0;
  v5[1] = 0;
  v6 = (char *)a1 + active[8];
  *(_QWORD *)v6 = 0;
  *((_WORD *)v6 + 4) = 256;
  v7 = (char *)a1 + active[9];
  *(_QWORD *)v7 = 0;
  v7[8] = 1;
  v8 = (char *)a1 + active[10];
  *(_QWORD *)v8 = 0;
  *((_WORD *)v8 + 4) = 256;
  return result;
}

uint64_t NCProtoContinuityCall.uuidString.getter()
{
  return NCProtoContinuityCall.uuidString.getter(type metadata accessor for NCProtoContinuityCall);
}

uint64_t type metadata accessor for NCProtoContinuityCall(uint64_t a1)
{
  return type metadata accessor for NCProtoContactInfo(a1, (uint64_t *)&type metadata singleton initialization cache for NCProtoContinuityCall);
}

uint64_t key path getter for NCProtoContinuityCall.uuidString : NCProtoContinuityCall@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  return key path getter for NCProtoContinuityCall.uuidString : NCProtoContinuityCall(a1, type metadata accessor for NCProtoContinuityCall, a2);
}

uint64_t key path setter for NCProtoContinuityCall.uuidString : NCProtoContinuityCall(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for NCProtoContinuityCall.uuidString : NCProtoContinuityCall(a1, a2, a3, a4, type metadata accessor for NCProtoContinuityCall);
}

uint64_t NCProtoContinuityCall.uuidString.setter(uint64_t a1, uint64_t a2)
{
  return NCProtoContinuityCall.uuidString.setter(a1, a2, type metadata accessor for NCProtoContinuityCall);
}

uint64_t (*NCProtoContinuityCall.uuidString.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  uint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;

  *(_QWORD *)(a1 + 16) = v1;
  v3 = *(int *)(type metadata accessor for NCProtoContinuityCall(0) + 20);
  *(_DWORD *)(a1 + 24) = v3;
  v4 = (uint64_t *)(v1 + v3);
  v5 = v4[1];
  if (v5)
  {
    v6 = *v4;
    v7 = v5;
  }
  else
  {
    v6 = 0;
    v7 = 0xE000000000000000;
  }
  *(_QWORD *)a1 = v6;
  *(_QWORD *)(a1 + 8) = v7;
  swift_bridgeObjectRetain();
  return NCProtoContactInfo.organizationName.modify;
}

BOOL NCProtoContinuityCall.hasUuidString.getter()
{
  return NCProtoContinuityCall.hasUuidString.getter(type metadata accessor for NCProtoContinuityCall);
}

Swift::Void __swiftcall NCProtoContinuityCall.clearUuidString()()
{
  NCProtoContinuityCall.clearUuidString()(type metadata accessor for NCProtoContinuityCall);
}

uint64_t NCProtoContinuityCall.displayName.getter()
{
  return NCProtoActiveConversation.uuidString.getter(type metadata accessor for NCProtoContinuityCall);
}

uint64_t NCProtoActiveConversation.uuidString.getter(uint64_t (*a1)(_QWORD))
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;

  v2 = (uint64_t *)(v1 + *(int *)(a1(0) + 24));
  if (v2[1])
    v3 = *v2;
  else
    v3 = 0;
  swift_bridgeObjectRetain();
  return v3;
}

uint64_t key path getter for NCProtoContinuityCall.displayName : NCProtoContinuityCall@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  return key path getter for NCProtoActiveConversation.uuidString : NCProtoActiveConversation(a1, type metadata accessor for NCProtoContinuityCall, a2);
}

uint64_t key path getter for NCProtoActiveConversation.uuidString : NCProtoActiveConversation@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(_QWORD)@<X3>, _QWORD *a3@<X8>)
{
  uint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;

  v4 = (uint64_t *)(a1 + *(int *)(a2(0) + 24));
  v5 = v4[1];
  if (v5)
  {
    v6 = *v4;
    v7 = v5;
  }
  else
  {
    v6 = 0;
    v7 = 0xE000000000000000;
  }
  *a3 = v6;
  a3[1] = v7;
  return swift_bridgeObjectRetain();
}

uint64_t key path setter for NCProtoContinuityCall.displayName : NCProtoContinuityCall(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for NCProtoActiveConversation.uuidString : NCProtoActiveConversation(a1, a2, a3, a4, type metadata accessor for NCProtoContinuityCall);
}

uint64_t key path setter for NCProtoActiveConversation.uuidString : NCProtoActiveConversation(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(_QWORD))
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t result;

  v6 = *a1;
  v5 = a1[1];
  v7 = (_QWORD *)(a2 + *(int *)(a5(0) + 24));
  swift_bridgeObjectRetain();
  result = swift_bridgeObjectRelease();
  *v7 = v6;
  v7[1] = v5;
  return result;
}

uint64_t NCProtoContinuityCall.displayName.setter(uint64_t a1, uint64_t a2)
{
  return NCProtoActiveConversation.uuidString.setter(a1, a2, type metadata accessor for NCProtoContinuityCall);
}

uint64_t NCProtoActiveConversation.uuidString.setter(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v3;
  _QWORD *v6;
  uint64_t result;

  v6 = (_QWORD *)(v3 + *(int *)(a3(0) + 24));
  result = swift_bridgeObjectRelease();
  *v6 = a1;
  v6[1] = a2;
  return result;
}

uint64_t (*NCProtoContinuityCall.displayName.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  uint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;

  *(_QWORD *)(a1 + 16) = v1;
  v3 = *(int *)(type metadata accessor for NCProtoContinuityCall(0) + 24);
  *(_DWORD *)(a1 + 24) = v3;
  v4 = (uint64_t *)(v1 + v3);
  v5 = v4[1];
  if (v5)
  {
    v6 = *v4;
    v7 = v5;
  }
  else
  {
    v6 = 0;
    v7 = 0xE000000000000000;
  }
  *(_QWORD *)a1 = v6;
  *(_QWORD *)(a1 + 8) = v7;
  swift_bridgeObjectRetain();
  return NCProtoContactInfo.organizationName.modify;
}

BOOL NCProtoContinuityCall.hasDisplayName.getter()
{
  return NCProtoActiveConversation.hasUuidString.getter(type metadata accessor for NCProtoContinuityCall);
}

BOOL NCProtoActiveConversation.hasUuidString.getter(uint64_t (*a1)(_QWORD))
{
  uint64_t v1;

  return *(_QWORD *)(v1 + *(int *)(a1(0) + 24) + 8) != 0;
}

Swift::Void __swiftcall NCProtoContinuityCall.clearDisplayName()()
{
  NCProtoActiveConversation.clearUuidString()(type metadata accessor for NCProtoContinuityCall);
}

uint64_t NCProtoActiveConversation.clearUuidString()(uint64_t (*a1)(_QWORD))
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t result;

  v2 = (_QWORD *)(v1 + *(int *)(a1(0) + 24));
  result = swift_bridgeObjectRelease();
  *v2 = 0;
  v2[1] = 0;
  return result;
}

uint64_t NCProtoContinuityCall.status.getter@<X0>(uint64_t a1@<X8>)
{
  return NCProtoContinuityCall.status.getter(type metadata accessor for NCProtoContinuityCall, a1);
}

uint64_t key path getter for NCProtoContinuityCall.status : NCProtoContinuityCall@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return key path getter for NCProtoContinuityCall.status : NCProtoContinuityCall(a1, type metadata accessor for NCProtoContinuityCall, a2);
}

uint64_t key path setter for NCProtoContinuityCall.status : NCProtoContinuityCall(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for NCProtoContinuityCall.status : NCProtoContinuityCall(a1, a2, a3, a4, type metadata accessor for NCProtoContinuityCall);
}

uint64_t NCProtoContinuityCall.status.setter(uint64_t *a1)
{
  return NCProtoContinuityCall.status.setter(a1, type metadata accessor for NCProtoContinuityCall);
}

uint64_t (*NCProtoContinuityCall.status.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  char v6;
  char v7;

  *(_QWORD *)(a1 + 16) = v1;
  v3 = *(int *)(type metadata accessor for NCProtoContinuityCall(0) + 28);
  *(_DWORD *)(a1 + 12) = v3;
  v4 = (uint64_t *)(v1 + v3);
  if ((*((_BYTE *)v4 + 9) & 1) != 0)
  {
    v5 = 0;
    v6 = 1;
  }
  else
  {
    v7 = *((_BYTE *)v4 + 8);
    v5 = *v4;
    v6 = v7 & 1;
  }
  *(_QWORD *)a1 = v5;
  *(_BYTE *)(a1 + 8) = v6;
  return NCProtoActiveConversation.avMode.modify;
}

BOOL NCProtoContinuityCall.hasStatus.getter()
{
  return NCProtoContinuityCall.hasStatus.getter(type metadata accessor for NCProtoContinuityCall);
}

Swift::Void __swiftcall NCProtoContinuityCall.clearStatus()()
{
  NCProtoContinuityCall.clearStatus()(type metadata accessor for NCProtoContinuityCall);
}

uint64_t NCProtoContinuityCall.conversationUuidString.getter()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v1 = (uint64_t *)(v0 + *(int *)(type metadata accessor for NCProtoContinuityCall(0) + 32));
  if (v1[1])
    v2 = *v1;
  else
    v2 = 0;
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t key path getter for NCProtoContinuityCall.conversationUuidString : NCProtoContinuityCall@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t *v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v3 = (uint64_t *)(a1 + *(int *)(type metadata accessor for NCProtoContinuityCall(0) + 32));
  v4 = v3[1];
  if (v4)
  {
    v5 = *v3;
    v6 = v4;
  }
  else
  {
    v5 = 0;
    v6 = 0xE000000000000000;
  }
  *a2 = v5;
  a2[1] = v6;
  return swift_bridgeObjectRetain();
}

uint64_t key path setter for NCProtoContinuityCall.conversationUuidString : NCProtoContinuityCall(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t result;

  v3 = *a1;
  v2 = a1[1];
  v4 = (_QWORD *)(a2 + *(int *)(type metadata accessor for NCProtoContinuityCall(0) + 32));
  swift_bridgeObjectRetain();
  result = swift_bridgeObjectRelease();
  *v4 = v3;
  v4[1] = v2;
  return result;
}

uint64_t NCProtoContinuityCall.conversationUuidString.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t result;

  v5 = (_QWORD *)(v2 + *(int *)(type metadata accessor for NCProtoContinuityCall(0) + 32));
  result = swift_bridgeObjectRelease();
  *v5 = a1;
  v5[1] = a2;
  return result;
}

uint64_t (*NCProtoContinuityCall.conversationUuidString.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  uint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;

  *(_QWORD *)(a1 + 16) = v1;
  v3 = *(int *)(type metadata accessor for NCProtoContinuityCall(0) + 32);
  *(_DWORD *)(a1 + 24) = v3;
  v4 = (uint64_t *)(v1 + v3);
  v5 = v4[1];
  if (v5)
  {
    v6 = *v4;
    v7 = v5;
  }
  else
  {
    v6 = 0;
    v7 = 0xE000000000000000;
  }
  *(_QWORD *)a1 = v6;
  *(_QWORD *)(a1 + 8) = v7;
  swift_bridgeObjectRetain();
  return NCProtoContactInfo.organizationName.modify;
}

BOOL NCProtoContinuityCall.hasConversationUuidString.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + *(int *)(type metadata accessor for NCProtoContinuityCall(0) + 32) + 8) != 0;
}

Swift::Void __swiftcall NCProtoContinuityCall.clearConversationUuidString()()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)(v0 + *(int *)(type metadata accessor for NCProtoContinuityCall(0) + 32));
  swift_bridgeObjectRelease();
  *v1 = 0;
  v1[1] = 0;
}

uint64_t (*NCProtoContinuityCall.unknownFields.modify())()
{
  return NCProtoContactInfo.namePrefix.modify;
}

void NCProtoContinuityCall.Status.init()(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = 0;
  *(_BYTE *)(a1 + 8) = 1;
}

unint64_t NCProtoContinuityCall.Status.init(rawValue:)@<X0>(unint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = result;
  *(_BYTE *)(a2 + 8) = result < 2;
  *(_BYTE *)(a2 + 9) = 0;
  return result;
}

uint64_t NCProtoContinuityCall.Status.rawValue.getter()
{
  _BYTE *v0;

  if (v0[8])
    return *(_QWORD *)v0 != 0;
  else
    return *(_QWORD *)v0;
}

void protocol witness for Enum.init() in conformance NCProtoContinuityCall.Status(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = 0;
  *(_BYTE *)(a1 + 8) = 1;
}

unint64_t protocol witness for Enum.init(rawValue:) in conformance NCProtoContinuityCall.Status@<X0>(unint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = result;
  *(_BYTE *)(a2 + 8) = result < 2;
  *(_BYTE *)(a2 + 9) = 0;
  return result;
}

uint64_t protocol witness for Enum.rawValue.getter in conformance NCProtoContinuityCall.Status()
{
  _BYTE *v0;

  if (v0[8])
    return *(_QWORD *)v0 != 0;
  else
    return *(_QWORD *)v0;
}

_QWORD *protocol witness for RawRepresentable.init(rawValue:) in conformance NCProtoContinuityCall.Status@<X0>(_QWORD *result@<X0>, uint64_t a2@<X8>)
{
  BOOL v2;
  char v3;

  v2 = *result >= 2uLL;
  *(_QWORD *)a2 = *result;
  v3 = !v2;
  *(_BYTE *)(a2 + 8) = v3;
  *(_BYTE *)(a2 + 9) = 0;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance NCProtoContinuityCall.Status(_QWORD *a1@<X8>)
{
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  if (*((_BYTE *)v1 + 8))
    v2 = *v1 != 0;
  *a1 = v2;
}

uint64_t protocol witness for Hashable.hash(into:) in conformance NCProtoContinuityCall.Status()
{
  lazy protocol witness table accessor for type NCProtoContinuityCall.Status and conformance NCProtoContinuityCall.Status();
  return Enum.hash(into:)();
}

int *NCProtoContinuityCall.init()@<X0>(uint64_t a1@<X8>)
{
  int *result;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;

  UnknownStorage.init()();
  result = (int *)type metadata accessor for NCProtoContinuityCall(0);
  v3 = (_QWORD *)(a1 + result[5]);
  *v3 = 0;
  v3[1] = 0;
  v4 = (_QWORD *)(a1 + result[6]);
  *v4 = 0;
  v4[1] = 0;
  v5 = a1 + result[7];
  *(_QWORD *)v5 = 0;
  *(_WORD *)(v5 + 8) = 256;
  v6 = (_QWORD *)(a1 + result[8]);
  *v6 = 0;
  v6[1] = 0;
  return result;
}

uint64_t static NCProtoContinuityCall.Status.allCases.getter()
{
  return static NCProtoConversationAVMode.allCases.getter(&one-time initialization token for allCases);
}

uint64_t static NCProtoContinuityCall.Status.allCases.setter(uint64_t a1)
{
  return static NCProtoConversationAVMode.allCases.setter(a1, &one-time initialization token for allCases, &static NCProtoContinuityCall.Status.allCases);
}

uint64_t (*static NCProtoContinuityCall.Status.allCases.modify())()
{
  if (one-time initialization token for allCases != -1)
    swift_once();
  swift_beginAccess();
  return static NCProtoContinuityCall.Status.allCases.modify;
}

uint64_t protocol witness for static CaseIterable.allCases.getter in conformance NCProtoContinuityCall.Status@<X0>(_QWORD *a1@<X8>)
{
  return protocol witness for static CaseIterable.allCases.getter in conformance NCProtoConversationAVMode(&one-time initialization token for allCases, &static NCProtoContinuityCall.Status.allCases, a1);
}

uint64_t (*NCProtoStartedSessionEvent.identifier.modify())()
{
  return NCProtoContactInfo.namePrefix.modify;
}

uint64_t (*NCProtoStartedSessionEvent.userAccountInfoData.modify())()
{
  return NCProtoContactInfo.namePrefix.modify;
}

uint64_t NCProtoStartedSessionEvent.memberAssociationPrimaryInfo.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  int *v6;
  _QWORD *v7;
  char *v8;
  _QWORD *v9;
  uint64_t v11;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NCProtoMemberAssociationPrimaryInfo?);
  MEMORY[0x24BDAC7A8]();
  v4 = (char *)&v11 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for NCProtoStartedSessionEvent(0);
  outlined init with copy of NCProtoContactInfo?(v1 + *(int *)(v5 + 28), (uint64_t)v4, &demangling cache variable for type metadata for NCProtoMemberAssociationPrimaryInfo?);
  v6 = (int *)type metadata accessor for NCProtoMemberAssociationPrimaryInfo(0);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(*((_QWORD *)v6 - 1) + 48))(v4, 1, v6) != 1)
    return outlined init with take of NCProtoContactInfo((uint64_t)v4, (uint64_t)a1, type metadata accessor for NCProtoMemberAssociationPrimaryInfo);
  *a1 = MEMORY[0x24BEE4AF8];
  UnknownStorage.init()();
  v7 = (_QWORD *)((char *)a1 + v6[6]);
  *v7 = 0;
  v7[1] = 0;
  *(_OWORD *)((char *)a1 + v6[7]) = xmmword_242A30CC0;
  v8 = (char *)a1 + v6[8];
  *(_QWORD *)v8 = 0;
  v8[8] = 1;
  v9 = (_QWORD *)((char *)a1 + v6[9]);
  *v9 = 0;
  v9[1] = 0;
  return outlined destroy of NCProtoContactInfo?((uint64_t)v4, &demangling cache variable for type metadata for NCProtoMemberAssociationPrimaryInfo?);
}

uint64_t key path getter for NCProtoStartedSessionEvent.memberAssociationPrimaryInfo : NCProtoStartedSessionEvent@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  char *v5;
  uint64_t v6;
  int *v7;
  _QWORD *v8;
  char *v9;
  _QWORD *v10;
  uint64_t v12;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NCProtoMemberAssociationPrimaryInfo?);
  MEMORY[0x24BDAC7A8]();
  v5 = (char *)&v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for NCProtoStartedSessionEvent(0);
  outlined init with copy of NCProtoContactInfo?(a1 + *(int *)(v6 + 28), (uint64_t)v5, &demangling cache variable for type metadata for NCProtoMemberAssociationPrimaryInfo?);
  v7 = (int *)type metadata accessor for NCProtoMemberAssociationPrimaryInfo(0);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(*((_QWORD *)v7 - 1) + 48))(v5, 1, v7) != 1)
    return outlined init with take of NCProtoContactInfo((uint64_t)v5, (uint64_t)a2, type metadata accessor for NCProtoMemberAssociationPrimaryInfo);
  *a2 = MEMORY[0x24BEE4AF8];
  UnknownStorage.init()();
  v8 = (_QWORD *)((char *)a2 + v7[6]);
  *v8 = 0;
  v8[1] = 0;
  *(_OWORD *)((char *)a2 + v7[7]) = xmmword_242A30CC0;
  v9 = (char *)a2 + v7[8];
  *(_QWORD *)v9 = 0;
  v9[8] = 1;
  v10 = (_QWORD *)((char *)a2 + v7[9]);
  *v10 = 0;
  v10[1] = 0;
  return outlined destroy of NCProtoContactInfo?((uint64_t)v5, &demangling cache variable for type metadata for NCProtoMemberAssociationPrimaryInfo?);
}

uint64_t key path setter for NCProtoStartedSessionEvent.memberAssociationPrimaryInfo : NCProtoStartedSessionEvent(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for NCProtoAddressableContact.contactInfo : NCProtoAddressableContact(a1, a2, a3, a4, type metadata accessor for NCProtoMemberAssociationPrimaryInfo, type metadata accessor for NCProtoStartedSessionEvent, &demangling cache variable for type metadata for NCProtoMemberAssociationPrimaryInfo?);
}

uint64_t NCProtoStartedSessionEvent.memberAssociationPrimaryInfo.setter(uint64_t a1)
{
  return NCProtoAddressableContact.contactInfo.setter(a1, type metadata accessor for NCProtoStartedSessionEvent, &demangling cache variable for type metadata for NCProtoMemberAssociationPrimaryInfo?, type metadata accessor for NCProtoMemberAssociationPrimaryInfo);
}

double NCProtoMemberAssociationPrimaryInfo.init()@<D0>(_QWORD *a1@<X8>)
{
  int *v2;
  _QWORD *v3;
  double result;
  char *v5;
  _QWORD *v6;

  *a1 = MEMORY[0x24BEE4AF8];
  v2 = (int *)type metadata accessor for NCProtoMemberAssociationPrimaryInfo(0);
  UnknownStorage.init()();
  v3 = (_QWORD *)((char *)a1 + v2[6]);
  *v3 = 0;
  v3[1] = 0;
  result = 0.0;
  *(_OWORD *)((char *)a1 + v2[7]) = xmmword_242A30CC0;
  v5 = (char *)a1 + v2[8];
  *(_QWORD *)v5 = 0;
  v5[8] = 1;
  v6 = (_QWORD *)((char *)a1 + v2[9]);
  *v6 = 0;
  v6[1] = 0;
  return result;
}

uint64_t type metadata accessor for NCProtoStartedSessionEvent(uint64_t a1)
{
  return type metadata accessor for NCProtoContactInfo(a1, (uint64_t *)&type metadata singleton initialization cache for NCProtoStartedSessionEvent);
}

uint64_t type metadata accessor for NCProtoMemberAssociationPrimaryInfo(uint64_t a1)
{
  return type metadata accessor for NCProtoContactInfo(a1, (uint64_t *)&type metadata singleton initialization cache for NCProtoMemberAssociationPrimaryInfo);
}

void (*NCProtoStartedSessionEvent.memberAssociationPrimaryInfo.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  int *v6;
  uint64_t v7;
  size_t v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  char *v12;
  _QWORD *v13;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NCProtoMemberAssociationPrimaryInfo?);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[1] = v5;
  v6 = (int *)type metadata accessor for NCProtoMemberAssociationPrimaryInfo(0);
  v3[2] = v6;
  v7 = *((_QWORD *)v6 - 1);
  v3[3] = v7;
  v8 = *(_QWORD *)(v7 + 64);
  v3[4] = malloc(v8);
  v9 = malloc(v8);
  v3[5] = v9;
  v10 = *(int *)(type metadata accessor for NCProtoStartedSessionEvent(0) + 28);
  *((_DWORD *)v3 + 12) = v10;
  outlined init with copy of NCProtoContactInfo?(v1 + v10, (uint64_t)v5, &demangling cache variable for type metadata for NCProtoMemberAssociationPrimaryInfo?);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    *v9 = MEMORY[0x24BEE4AF8];
    UnknownStorage.init()();
    v11 = (_QWORD *)((char *)v9 + v6[6]);
    *v11 = 0;
    v11[1] = 0;
    *(_OWORD *)((char *)v9 + v6[7]) = xmmword_242A30CC0;
    v12 = (char *)v9 + v6[8];
    *(_QWORD *)v12 = 0;
    v12[8] = 1;
    v13 = (_QWORD *)((char *)v9 + v6[9]);
    *v13 = 0;
    v13[1] = 0;
    outlined destroy of NCProtoContactInfo?((uint64_t)v5, &demangling cache variable for type metadata for NCProtoMemberAssociationPrimaryInfo?);
  }
  else
  {
    outlined init with take of NCProtoContactInfo((uint64_t)v5, (uint64_t)v9, type metadata accessor for NCProtoMemberAssociationPrimaryInfo);
  }
  return NCProtoStartedSessionEvent.memberAssociationPrimaryInfo.modify;
}

void NCProtoStartedSessionEvent.memberAssociationPrimaryInfo.modify(uint64_t a1, char a2)
{
  NCProtoContinuityFavorite.contactInfo.modify(a1, a2, &demangling cache variable for type metadata for NCProtoMemberAssociationPrimaryInfo?, type metadata accessor for NCProtoMemberAssociationPrimaryInfo);
}

BOOL NCProtoStartedSessionEvent.hasMemberAssociationPrimaryInfo.getter()
{
  return NCProtoAddressableContact.hasContactInfo.getter(&demangling cache variable for type metadata for NCProtoMemberAssociationPrimaryInfo?, type metadata accessor for NCProtoStartedSessionEvent, type metadata accessor for NCProtoMemberAssociationPrimaryInfo);
}

BOOL NCProtoAddressableContact.hasContactInfo.getter(uint64_t *a1, uint64_t (*a2)(_QWORD), uint64_t (*a3)(_QWORD))
{
  uint64_t v3;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  _BOOL8 v11;
  uint64_t v13;

  __swift_instantiateConcreteTypeFromMangledName(a1);
  MEMORY[0x24BDAC7A8]();
  v8 = (char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a2(0);
  outlined init with copy of NCProtoContactInfo?(v3 + *(int *)(v9 + 28), (uint64_t)v8, a1);
  v10 = a3(0);
  v11 = (*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 48))(v8, 1, v10) != 1;
  outlined destroy of NCProtoContactInfo?((uint64_t)v8, a1);
  return v11;
}

Swift::Void __swiftcall NCProtoStartedSessionEvent.clearMemberAssociationPrimaryInfo()()
{
  NCProtoAddressableContact.clearContactInfo()(type metadata accessor for NCProtoStartedSessionEvent, &demangling cache variable for type metadata for NCProtoMemberAssociationPrimaryInfo?, type metadata accessor for NCProtoMemberAssociationPrimaryInfo);
}

uint64_t NCProtoAddressableContact.clearContactInfo()(uint64_t (*a1)(_QWORD), uint64_t *a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;

  v6 = v3 + *(int *)(a1(0) + 28);
  outlined destroy of NCProtoContactInfo?(v6, a2);
  v7 = a3(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v6, 1, 1, v7);
}

uint64_t NCProtoStartedSessionEvent.avMode.getter@<X0>(uint64_t a1@<X8>)
{
  return NCProtoActiveConversation.avMode.getter(type metadata accessor for NCProtoStartedSessionEvent, a1);
}

uint64_t NCProtoActiveConversation.avMode.getter@<X0>(uint64_t (*a1)(_QWORD)@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t result;
  uint64_t *v5;
  uint64_t v6;
  char v7;
  char v8;

  result = a1(0);
  v5 = (uint64_t *)(v2 + *(int *)(result + 32));
  if ((*((_BYTE *)v5 + 9) & 1) != 0)
  {
    v6 = 0;
    v7 = 1;
  }
  else
  {
    v8 = *((_BYTE *)v5 + 8);
    v6 = *v5;
    v7 = v8 & 1;
  }
  *(_QWORD *)a2 = v6;
  *(_BYTE *)(a2 + 8) = v7;
  return result;
}

uint64_t key path getter for NCProtoStartedSessionEvent.avMode : NCProtoStartedSessionEvent@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return key path getter for NCProtoActiveConversation.avMode : NCProtoActiveConversation(a1, type metadata accessor for NCProtoStartedSessionEvent, a2);
}

uint64_t key path getter for NCProtoActiveConversation.avMode : NCProtoActiveConversation@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(_QWORD)@<X3>, uint64_t a3@<X8>)
{
  uint64_t result;
  uint64_t *v6;
  uint64_t v7;
  char v8;
  int v9;

  result = a2(0);
  v6 = (uint64_t *)(a1 + *(int *)(result + 32));
  v7 = *v6;
  v8 = *((_BYTE *)v6 + 8);
  v9 = *((unsigned __int8 *)v6 + 9);
  if (v9)
    v7 = 0;
  *(_QWORD *)a3 = v7;
  *(_BYTE *)(a3 + 8) = (v9 | v8) & 1;
  return result;
}

uint64_t key path setter for NCProtoStartedSessionEvent.avMode : NCProtoStartedSessionEvent(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for NCProtoActiveConversation.avMode : NCProtoActiveConversation(a1, a2, a3, a4, type metadata accessor for NCProtoStartedSessionEvent);
}

uint64_t key path setter for NCProtoActiveConversation.avMode : NCProtoActiveConversation(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(_QWORD))
{
  uint64_t v6;
  char v7;
  uint64_t result;
  uint64_t v9;

  v6 = *a1;
  v7 = *((_BYTE *)a1 + 8);
  result = a5(0);
  v9 = a2 + *(int *)(result + 32);
  *(_QWORD *)v9 = v6;
  *(_BYTE *)(v9 + 8) = v7;
  *(_BYTE *)(v9 + 9) = 0;
  return result;
}

uint64_t NCProtoStartedSessionEvent.avMode.setter(uint64_t *a1)
{
  return NCProtoActiveConversation.avMode.setter(a1, type metadata accessor for NCProtoStartedSessionEvent);
}

uint64_t NCProtoActiveConversation.avMode.setter(uint64_t *a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t result;
  uint64_t v6;

  v3 = *a1;
  v4 = *((_BYTE *)a1 + 8);
  result = a2(0);
  v6 = v2 + *(int *)(result + 32);
  *(_QWORD *)v6 = v3;
  *(_BYTE *)(v6 + 8) = v4;
  *(_BYTE *)(v6 + 9) = 0;
  return result;
}

uint64_t (*NCProtoStartedSessionEvent.avMode.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  char v6;
  char v7;

  *(_QWORD *)(a1 + 16) = v1;
  v3 = *(int *)(type metadata accessor for NCProtoStartedSessionEvent(0) + 32);
  *(_DWORD *)(a1 + 12) = v3;
  v4 = (uint64_t *)(v1 + v3);
  if ((*((_BYTE *)v4 + 9) & 1) != 0)
  {
    v5 = 0;
    v6 = 1;
  }
  else
  {
    v7 = *((_BYTE *)v4 + 8);
    v5 = *v4;
    v6 = v7 & 1;
  }
  *(_QWORD *)a1 = v5;
  *(_BYTE *)(a1 + 8) = v6;
  return NCProtoActiveConversation.avMode.modify;
}

BOOL NCProtoStartedSessionEvent.hasAvMode.getter()
{
  return NCProtoActiveConversation.hasAvMode.getter(type metadata accessor for NCProtoStartedSessionEvent);
}

BOOL NCProtoActiveConversation.hasAvMode.getter(uint64_t (*a1)(_QWORD))
{
  uint64_t v1;

  return (*(_BYTE *)(v1 + *(int *)(a1(0) + 32) + 9) & 1) == 0;
}

Swift::Void __swiftcall NCProtoStartedSessionEvent.clearAvMode()()
{
  NCProtoActiveConversation.clearAvMode()(type metadata accessor for NCProtoStartedSessionEvent);
}

uint64_t NCProtoActiveConversation.clearAvMode()(uint64_t (*a1)(_QWORD))
{
  uint64_t v1;
  uint64_t result;
  uint64_t v3;

  result = a1(0);
  v3 = v1 + *(int *)(result + 32);
  *(_QWORD *)v3 = 0;
  *(_WORD *)(v3 + 8) = 256;
  return result;
}

uint64_t NCProtoStartedSessionEvent.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return NCProtoAddressableContact.unknownFields.getter(type metadata accessor for NCProtoStartedSessionEvent, a1);
}

uint64_t NCProtoAddressableContact.unknownFields.getter@<X0>(uint64_t (*a1)(_QWORD)@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = v2 + *(int *)(a1(0) + 24);
  v5 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, v4, v5);
}

uint64_t NCProtoStartedSessionEvent.unknownFields.setter(uint64_t a1)
{
  return NCProtoAddressableContact.unknownFields.setter(a1, type metadata accessor for NCProtoStartedSessionEvent);
}

uint64_t NCProtoAddressableContact.unknownFields.setter(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = v2 + *(int *)(a2(0) + 24);
  v5 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 40))(v4, a1, v5);
}

uint64_t (*NCProtoStartedSessionEvent.unknownFields.modify())()
{
  type metadata accessor for NCProtoStartedSessionEvent(0);
  return NCProtoContactInfo.namePrefix.modify;
}

uint64_t NCProtoStartedSessionEvent.init()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0xE000000000000000;
  *(_OWORD *)(a1 + 16) = xmmword_242A30CB0;
  v2 = type metadata accessor for NCProtoStartedSessionEvent(0);
  UnknownStorage.init()();
  v3 = a1 + *(int *)(v2 + 28);
  v4 = type metadata accessor for NCProtoMemberAssociationPrimaryInfo(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(v3, 1, 1, v4);
  v6 = a1 + *(int *)(v2 + 32);
  *(_QWORD *)v6 = 0;
  *(_WORD *)(v6 + 8) = 256;
  return result;
}

uint64_t (*NCProtoEndedSessionEvent.identifier.modify())()
{
  return NCProtoContactInfo.namePrefix.modify;
}

uint64_t NCProtoEndedSessionEvent.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return NCProtoActiveConversation.unknownFields.getter(type metadata accessor for NCProtoEndedSessionEvent, a1);
}

uint64_t NCProtoActiveConversation.unknownFields.getter@<X0>(uint64_t (*a1)(_QWORD)@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = v2 + *(int *)(a1(0) + 20);
  v5 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, v4, v5);
}

uint64_t type metadata accessor for NCProtoEndedSessionEvent(uint64_t a1)
{
  return type metadata accessor for NCProtoContactInfo(a1, (uint64_t *)&type metadata singleton initialization cache for NCProtoEndedSessionEvent);
}

uint64_t NCProtoEndedSessionEvent.unknownFields.setter(uint64_t a1)
{
  return NCProtoActiveConversation.unknownFields.setter(a1, type metadata accessor for NCProtoEndedSessionEvent);
}

uint64_t NCProtoActiveConversation.unknownFields.setter(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = v2 + *(int *)(a2(0) + 20);
  v5 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 40))(v4, a1, v5);
}

uint64_t (*NCProtoEndedSessionEvent.unknownFields.modify())()
{
  type metadata accessor for NCProtoEndedSessionEvent(0);
  return NCProtoContactInfo.namePrefix.modify;
}

uint64_t NCProtoEndedSessionEvent.init()@<X0>(_QWORD *a1@<X8>)
{
  return NCProtoEndedSessionEvent.init()((void (*)(_QWORD))type metadata accessor for NCProtoEndedSessionEvent, a1);
}

uint64_t (*NCProtoContactUpdateEvent.identifierHash.modify())()
{
  return NCProtoContactInfo.namePrefix.modify;
}

unint64_t specialized Dictionary.init(dictionaryLiteral:)(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  unint64_t result;
  char v9;
  uint64_t *v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;

  if (!*(_QWORD *)(a1 + 16))
  {
    v2 = (_QWORD *)MEMORY[0x24BEE4B00];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Bool>);
  v2 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  v4 = (_BYTE *)(a1 + 48);
  while (1)
  {
    v5 = *((_QWORD *)v4 - 2);
    v6 = *((_QWORD *)v4 - 1);
    v7 = *v4;
    swift_bridgeObjectRetain();
    result = specialized __RawDictionaryStorage.find<A>(_:)(v5, v6);
    if ((v9 & 1) != 0)
      break;
    *(_QWORD *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v10 = (uint64_t *)(v2[6] + 16 * result);
    *v10 = v5;
    v10[1] = v6;
    *(_BYTE *)(v2[7] + result) = v7;
    v11 = v2[2];
    v12 = __OFADD__(v11, 1);
    v13 = v11 + 1;
    if (v12)
      goto LABEL_11;
    v4 += 24;
    v2[2] = v13;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t result;
  char v17;
  unint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  _QWORD v25[2];

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, Google_Protobuf_Value));
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8]();
  v5 = (_QWORD *)((char *)v25 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (!*(_QWORD *)(a1 + 16))
  {
    v7 = (_QWORD *)MEMORY[0x24BEE4B00];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Google_Protobuf_Value>);
  v6 = static _DictionaryStorage.allocate(capacity:)();
  v7 = (_QWORD *)v6;
  v8 = *(_QWORD *)(a1 + 16);
  if (!v8)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v7;
  }
  v9 = (char *)v5 + *(int *)(v2 + 48);
  v10 = v6 + 64;
  v11 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v25[1] = a1;
  v12 = a1 + v11;
  v13 = *(_QWORD *)(v3 + 72);
  swift_retain();
  while (1)
  {
    outlined init with copy of NCProtoContactInfo?(v12, (uint64_t)v5, &demangling cache variable for type metadata for (String, Google_Protobuf_Value));
    v14 = *v5;
    v15 = v5[1];
    result = specialized __RawDictionaryStorage.find<A>(_:)(*v5, v15);
    if ((v17 & 1) != 0)
      break;
    v18 = result;
    *(_QWORD *)(v10 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v19 = (uint64_t *)(v7[6] + 16 * result);
    *v19 = v14;
    v19[1] = v15;
    v20 = v7[7];
    v21 = type metadata accessor for Google_Protobuf_Value();
    result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(*(_QWORD *)(v21 - 8) + 32))(v20 + *(_QWORD *)(*(_QWORD *)(v21 - 8) + 72) * v18, v9, v21);
    v22 = v7[2];
    v23 = __OFADD__(v22, 1);
    v24 = v22 + 1;
    if (v23)
      goto LABEL_11;
    v7[2] = v24;
    v12 += v13;
    if (!--v8)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t specialized Dictionary.init(dictionaryLiteral:)(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t (*a4)(_QWORD))
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t result;
  char v21;
  unint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  _QWORD v29[2];
  uint64_t v30;
  uint64_t *v31;

  v31 = a2;
  v7 = __swift_instantiateConcreteTypeFromMangledName(a2);
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8]();
  v10 = (_QWORD *)((char *)v29 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (!*(_QWORD *)(a1 + 16))
  {
    v12 = (_QWORD *)MEMORY[0x24BEE4B00];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(a3);
  v11 = static _DictionaryStorage.allocate(capacity:)();
  v12 = (_QWORD *)v11;
  v13 = *(_QWORD *)(a1 + 16);
  if (!v13)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v12;
  }
  v14 = (uint64_t)v10 + *(int *)(v7 + 48);
  v29[1] = a1;
  v30 = v14;
  v15 = v11 + 64;
  v16 = a1 + ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80));
  v17 = *(_QWORD *)(v8 + 72);
  swift_retain();
  while (1)
  {
    outlined init with copy of NCProtoContactInfo?(v16, (uint64_t)v10, v31);
    v18 = *v10;
    v19 = v10[1];
    result = specialized __RawDictionaryStorage.find<A>(_:)(*v10, v19);
    if ((v21 & 1) != 0)
      break;
    v22 = result;
    *(_QWORD *)(v15 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v23 = (uint64_t *)(v12[6] + 16 * result);
    *v23 = v18;
    v23[1] = v19;
    v24 = v12[7];
    v25 = a4(0);
    result = outlined init with take of NCProtoContactInfo(v30, v24 + *(_QWORD *)(*(_QWORD *)(v25 - 8) + 72) * v22, a4);
    v26 = v12[2];
    v27 = __OFADD__(v26, 1);
    v28 = v26 + 1;
    if (v27)
      goto LABEL_11;
    v12[2] = v28;
    v16 += v17;
    if (!--v13)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t (*NCProtoContactUpdateEvent.contacts.modify())()
{
  return NCProtoContactInfo.namePrefix.modify;
}

uint64_t NCProtoContactUpdateEvent.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return NCProtoAddressableContact.unknownFields.getter(type metadata accessor for NCProtoContactUpdateEvent, a1);
}

uint64_t type metadata accessor for NCProtoContactUpdateEvent(uint64_t a1)
{
  return type metadata accessor for NCProtoContactInfo(a1, (uint64_t *)&type metadata singleton initialization cache for NCProtoContactUpdateEvent);
}

uint64_t NCProtoContactUpdateEvent.unknownFields.setter(uint64_t a1)
{
  return NCProtoAddressableContact.unknownFields.setter(a1, type metadata accessor for NCProtoContactUpdateEvent);
}

uint64_t (*NCProtoContactUpdateEvent.unknownFields.modify())()
{
  type metadata accessor for NCProtoContactUpdateEvent(0);
  return NCProtoContactInfo.namePrefix.modify;
}

uint64_t NCProtoContactUpdateEvent.init()@<X0>(uint64_t a1@<X8>)
{
  *(_OWORD *)a1 = xmmword_242A30CB0;
  *(_QWORD *)(a1 + 16) = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8], &demangling cache variable for type metadata for (String, NCProtoContactInfo), &demangling cache variable for type metadata for _DictionaryStorage<String, NCProtoContactInfo>, type metadata accessor for NCProtoContactInfo);
  type metadata accessor for NCProtoContactUpdateEvent(0);
  return UnknownStorage.init()();
}

uint64_t NCProtoJoinEvent.identifierHash.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)v0;
  outlined copy of Data._Representation(*(_QWORD *)v0, *(_QWORD *)(v0 + 8));
  return v1;
}

uint64_t NCProtoJoinEvent.identifierHash.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = outlined consume of Data._Representation(*(_QWORD *)v2, *(_QWORD *)(v2 + 8));
  *(_QWORD *)v2 = a1;
  *(_QWORD *)(v2 + 8) = a2;
  return result;
}

uint64_t (*NCProtoJoinEvent.identifierHash.modify())()
{
  return NCProtoContactInfo.namePrefix.modify;
}

uint64_t NCProtoJoinEvent.userAccountInfoData.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);
  outlined copy of Data._Representation(v1, *(_QWORD *)(v0 + 24));
  return v1;
}

uint64_t (*NCProtoJoinEvent.userAccountInfoData.modify())()
{
  return NCProtoContactInfo.namePrefix.modify;
}

uint64_t NCProtoJoinEvent.policyInfos.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t NCProtoJoinEvent.policyInfos.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 32) = a1;
  return result;
}

uint64_t (*NCProtoJoinEvent.policyInfos.modify())()
{
  return NCProtoContactInfo.namePrefix.modify;
}

uint64_t NCProtoJoinEvent.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return NCProtoContinuityFavorite.unknownFields.getter(type metadata accessor for NCProtoJoinEvent, a1);
}

uint64_t NCProtoContinuityFavorite.unknownFields.getter@<X0>(uint64_t (*a1)(_QWORD)@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = v2 + *(int *)(a1(0) + 28);
  v5 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, v4, v5);
}

uint64_t type metadata accessor for NCProtoJoinEvent(uint64_t a1)
{
  return type metadata accessor for NCProtoContactInfo(a1, (uint64_t *)&type metadata singleton initialization cache for NCProtoJoinEvent);
}

uint64_t NCProtoJoinEvent.unknownFields.setter(uint64_t a1)
{
  return NCProtoContinuityFavorite.unknownFields.setter(a1, type metadata accessor for NCProtoJoinEvent);
}

uint64_t NCProtoContinuityFavorite.unknownFields.setter(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = v2 + *(int *)(a2(0) + 28);
  v5 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 40))(v4, a1, v5);
}

uint64_t (*NCProtoJoinEvent.unknownFields.modify())()
{
  type metadata accessor for NCProtoJoinEvent(0);
  return NCProtoContactInfo.namePrefix.modify;
}

uint64_t NCProtoJoinEvent.init()@<X0>(uint64_t a1@<X8>)
{
  *(_OWORD *)a1 = xmmword_242A30CB0;
  *(_OWORD *)(a1 + 16) = xmmword_242A30CB0;
  *(_QWORD *)(a1 + 32) = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
  type metadata accessor for NCProtoJoinEvent(0);
  return UnknownStorage.init()();
}

uint64_t (*NCProtoRecentCallsDidChangeEvent.recentCalls.modify())()
{
  return NCProtoContactInfo.namePrefix.modify;
}

uint64_t (*NCProtoRecentCallsDidChangeEvent.contactInfos.modify())()
{
  return NCProtoContactInfo.namePrefix.modify;
}

uint64_t (*NCProtoRecentCallsDidChangeEvent.recentCallsInfo.modify())()
{
  return NCProtoContactInfo.namePrefix.modify;
}

uint64_t NCProtoRecentCallsDidChangeEvent.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return NCProtoContinuityFavorite.unknownFields.getter(type metadata accessor for NCProtoRecentCallsDidChangeEvent, a1);
}

uint64_t type metadata accessor for NCProtoRecentCallsDidChangeEvent(uint64_t a1)
{
  return type metadata accessor for NCProtoContactInfo(a1, (uint64_t *)&type metadata singleton initialization cache for NCProtoRecentCallsDidChangeEvent);
}

uint64_t NCProtoRecentCallsDidChangeEvent.unknownFields.setter(uint64_t a1)
{
  return NCProtoContinuityFavorite.unknownFields.setter(a1, type metadata accessor for NCProtoRecentCallsDidChangeEvent);
}

uint64_t (*NCProtoRecentCallsDidChangeEvent.unknownFields.modify())()
{
  type metadata accessor for NCProtoRecentCallsDidChangeEvent(0);
  return NCProtoContactInfo.namePrefix.modify;
}

uint64_t NCProtoRecentCallsDidChangeEvent.init()@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v2;

  v2 = MEMORY[0x24BEE4AF8];
  *a1 = MEMORY[0x24BEE4AF8];
  a1[1] = specialized Dictionary.init(dictionaryLiteral:)(v2, &demangling cache variable for type metadata for (String, NCProtoContactInfo), &demangling cache variable for type metadata for _DictionaryStorage<String, NCProtoContactInfo>, type metadata accessor for NCProtoContactInfo);
  a1[2] = specialized Dictionary.init(dictionaryLiteral:)(v2, &demangling cache variable for type metadata for (String, NCProtoCallInfo), &demangling cache variable for type metadata for _DictionaryStorage<String, NCProtoCallInfo>, type metadata accessor for NCProtoCallInfo);
  type metadata accessor for NCProtoRecentCallsDidChangeEvent(0);
  return UnknownStorage.init()();
}

uint64_t (*NCProtoFavoritesDidChangeEvent.favorites.modify())()
{
  return NCProtoContactInfo.namePrefix.modify;
}

uint64_t NCProtoFavoritesDidChangeEvent.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return NCProtoActiveConversation.unknownFields.getter(type metadata accessor for NCProtoFavoritesDidChangeEvent, a1);
}

uint64_t type metadata accessor for NCProtoFavoritesDidChangeEvent(uint64_t a1)
{
  return type metadata accessor for NCProtoContactInfo(a1, (uint64_t *)&type metadata singleton initialization cache for NCProtoFavoritesDidChangeEvent);
}

uint64_t NCProtoFavoritesDidChangeEvent.unknownFields.setter(uint64_t a1)
{
  return NCProtoActiveConversation.unknownFields.setter(a1, type metadata accessor for NCProtoFavoritesDidChangeEvent);
}

uint64_t (*NCProtoFavoritesDidChangeEvent.unknownFields.modify())()
{
  type metadata accessor for NCProtoFavoritesDidChangeEvent(0);
  return NCProtoContactInfo.namePrefix.modify;
}

uint64_t NCProtoFavoritesDidChangeEvent.init()@<X0>(_QWORD *a1@<X8>)
{
  return NCProtoFavoritesDidChangeEvent.init()((void (*)(_QWORD))type metadata accessor for NCProtoFavoritesDidChangeEvent, a1);
}

uint64_t (*NCProtoActiveConversationsDidChangeEvent.activeConversations.modify())()
{
  return NCProtoContactInfo.namePrefix.modify;
}

uint64_t NCProtoActiveConversationsDidChangeEvent.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return NCProtoActiveConversation.unknownFields.getter(type metadata accessor for NCProtoActiveConversationsDidChangeEvent, a1);
}

uint64_t type metadata accessor for NCProtoActiveConversationsDidChangeEvent(uint64_t a1)
{
  return type metadata accessor for NCProtoContactInfo(a1, (uint64_t *)&type metadata singleton initialization cache for NCProtoActiveConversationsDidChangeEvent);
}

uint64_t NCProtoActiveConversationsDidChangeEvent.unknownFields.setter(uint64_t a1)
{
  return NCProtoActiveConversation.unknownFields.setter(a1, type metadata accessor for NCProtoActiveConversationsDidChangeEvent);
}

uint64_t (*NCProtoActiveConversationsDidChangeEvent.unknownFields.modify())()
{
  type metadata accessor for NCProtoActiveConversationsDidChangeEvent(0);
  return NCProtoContactInfo.namePrefix.modify;
}

uint64_t NCProtoActiveConversationsDidChangeEvent.init()@<X0>(_QWORD *a1@<X8>)
{
  return NCProtoFavoritesDidChangeEvent.init()((void (*)(_QWORD))type metadata accessor for NCProtoActiveConversationsDidChangeEvent, a1);
}

uint64_t NCProtoFavoritesDidChangeEvent.init()@<X0>(void (*a1)(_QWORD)@<X0>, _QWORD *a2@<X8>)
{
  *a2 = MEMORY[0x24BEE4AF8];
  a1(0);
  return UnknownStorage.init()();
}

uint64_t (*NCProtoContinuityCallsDidChangeEvent.continuityCalls.modify())()
{
  return NCProtoContactInfo.namePrefix.modify;
}

uint64_t NCProtoContinuityCallsDidChangeEvent.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return NCProtoActiveConversation.unknownFields.getter(type metadata accessor for NCProtoContinuityCallsDidChangeEvent, a1);
}

uint64_t type metadata accessor for NCProtoContinuityCallsDidChangeEvent(uint64_t a1)
{
  return type metadata accessor for NCProtoContactInfo(a1, (uint64_t *)&type metadata singleton initialization cache for NCProtoContinuityCallsDidChangeEvent);
}

uint64_t NCProtoContinuityCallsDidChangeEvent.unknownFields.setter(uint64_t a1)
{
  return NCProtoActiveConversation.unknownFields.setter(a1, type metadata accessor for NCProtoContinuityCallsDidChangeEvent);
}

uint64_t (*NCProtoContinuityCallsDidChangeEvent.unknownFields.modify())()
{
  type metadata accessor for NCProtoContinuityCallsDidChangeEvent(0);
  return NCProtoContactInfo.namePrefix.modify;
}

uint64_t NCProtoContinuityCallsDidChangeEvent.init()@<X0>(_QWORD *a1@<X8>)
{
  return NCProtoFavoritesDidChangeEvent.init()((void (*)(_QWORD))type metadata accessor for NCProtoContinuityCallsDidChangeEvent, a1);
}

uint64_t (*NCProtoSuggestionAdvertisement.suggestionIdentifier.modify())()
{
  return NCProtoContactInfo.namePrefix.modify;
}

uint64_t (*NCProtoSuggestionAdvertisement.deviceIdentifier.modify())()
{
  return NCProtoContactInfo.namePrefix.modify;
}

uint64_t (*NCProtoSuggestionAdvertisement.type.modify())()
{
  return NCProtoContactInfo.namePrefix.modify;
}

uint64_t NCProtoSuggestionAdvertisement.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return NCProtoContinuityFavorite.unknownFields.getter(type metadata accessor for NCProtoSuggestionAdvertisement, a1);
}

uint64_t type metadata accessor for NCProtoSuggestionAdvertisement(uint64_t a1)
{
  return type metadata accessor for NCProtoContactInfo(a1, (uint64_t *)&type metadata singleton initialization cache for NCProtoSuggestionAdvertisement);
}

uint64_t NCProtoSuggestionAdvertisement.unknownFields.setter(uint64_t a1)
{
  return NCProtoContinuityFavorite.unknownFields.setter(a1, type metadata accessor for NCProtoSuggestionAdvertisement);
}

uint64_t (*NCProtoSuggestionAdvertisement.unknownFields.modify())()
{
  type metadata accessor for NCProtoSuggestionAdvertisement(0);
  return NCProtoContactInfo.namePrefix.modify;
}

uint64_t protocol witness for Hashable.hash(into:) in conformance NCProtoSuggestionAdvertisement.SuggestionType()
{
  lazy protocol witness table accessor for type NCProtoSuggestionAdvertisement.SuggestionType and conformance NCProtoSuggestionAdvertisement.SuggestionType();
  return Enum.hash(into:)();
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance NCProtoContinuityCall.Status(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a1;
  if (*((_BYTE *)a1 + 8))
    v2 = *a1 != 0;
  v3 = *a2 != 0;
  if (!*((_BYTE *)a2 + 8))
    v3 = *a2;
  return v2 == v3;
}

uint64_t NCProtoSuggestionAdvertisement.init()@<X0>(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0xE000000000000000;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0xE000000000000000;
  *(_QWORD *)(a1 + 32) = 0;
  *(_BYTE *)(a1 + 40) = 1;
  type metadata accessor for NCProtoSuggestionAdvertisement(0);
  return UnknownStorage.init()();
}

uint64_t static NCProtoSuggestionAdvertisement.SuggestionType.allCases.getter()
{
  return static NCProtoConversationAVMode.allCases.getter(&one-time initialization token for allCases);
}

uint64_t static NCProtoSuggestionAdvertisement.SuggestionType.allCases.setter(uint64_t a1)
{
  return static NCProtoConversationAVMode.allCases.setter(a1, &one-time initialization token for allCases, &static NCProtoSuggestionAdvertisement.SuggestionType.allCases);
}

uint64_t (*static NCProtoSuggestionAdvertisement.SuggestionType.allCases.modify())()
{
  if (one-time initialization token for allCases != -1)
    swift_once();
  swift_beginAccess();
  return static NCProtoConversationAVMode.allCases.modify;
}

uint64_t protocol witness for static CaseIterable.allCases.getter in conformance NCProtoSuggestionAdvertisement.SuggestionType@<X0>(_QWORD *a1@<X8>)
{
  return protocol witness for static CaseIterable.allCases.getter in conformance NCProtoConversationAVMode(&one-time initialization token for allCases, &static NCProtoSuggestionAdvertisement.SuggestionType.allCases, a1);
}

uint64_t NCProtoSuggestionAdvertisementDidChangeEvent.advertisement.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NCProtoSuggestionAdvertisement?);
  MEMORY[0x24BDAC7A8]();
  v4 = (char *)&v8 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for NCProtoSuggestionAdvertisementDidChangeEvent(0);
  outlined init with copy of NCProtoContactInfo?(v1 + *(int *)(v5 + 20), (uint64_t)v4, &demangling cache variable for type metadata for NCProtoSuggestionAdvertisement?);
  v6 = type metadata accessor for NCProtoSuggestionAdvertisement(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 48))(v4, 1, v6) != 1)
    return outlined init with take of NCProtoContactInfo((uint64_t)v4, a1, type metadata accessor for NCProtoSuggestionAdvertisement);
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0xE000000000000000;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0xE000000000000000;
  *(_QWORD *)(a1 + 32) = 0;
  *(_BYTE *)(a1 + 40) = 1;
  UnknownStorage.init()();
  return outlined destroy of NCProtoContactInfo?((uint64_t)v4, &demangling cache variable for type metadata for NCProtoSuggestionAdvertisement?);
}

uint64_t type metadata accessor for NCProtoSuggestionAdvertisementDidChangeEvent(uint64_t a1)
{
  return type metadata accessor for NCProtoContactInfo(a1, (uint64_t *)&type metadata singleton initialization cache for NCProtoSuggestionAdvertisementDidChangeEvent);
}

uint64_t key path getter for NCProtoSuggestionAdvertisementDidChangeEvent.advertisement : NCProtoSuggestionAdvertisementDidChangeEvent@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NCProtoSuggestionAdvertisement?);
  MEMORY[0x24BDAC7A8]();
  v5 = (char *)&v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for NCProtoSuggestionAdvertisementDidChangeEvent(0);
  outlined init with copy of NCProtoContactInfo?(a1 + *(int *)(v6 + 20), (uint64_t)v5, &demangling cache variable for type metadata for NCProtoSuggestionAdvertisement?);
  v7 = type metadata accessor for NCProtoSuggestionAdvertisement(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v5, 1, v7) != 1)
    return outlined init with take of NCProtoContactInfo((uint64_t)v5, a2, type metadata accessor for NCProtoSuggestionAdvertisement);
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0xE000000000000000;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0xE000000000000000;
  *(_QWORD *)(a2 + 32) = 0;
  *(_BYTE *)(a2 + 40) = 1;
  UnknownStorage.init()();
  return outlined destroy of NCProtoContactInfo?((uint64_t)v5, &demangling cache variable for type metadata for NCProtoSuggestionAdvertisement?);
}

uint64_t key path setter for NCProtoSuggestionAdvertisementDidChangeEvent.advertisement : NCProtoSuggestionAdvertisementDidChangeEvent(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for NCProtoSuggestionAdvertisementDidChangeEvent.advertisement : NCProtoSuggestionAdvertisementDidChangeEvent(a1, a2, a3, a4, type metadata accessor for NCProtoSuggestionAdvertisement, type metadata accessor for NCProtoSuggestionAdvertisementDidChangeEvent, &demangling cache variable for type metadata for NCProtoSuggestionAdvertisement?);
}

uint64_t NCProtoSuggestionAdvertisementDidChangeEvent.advertisement.setter(uint64_t a1)
{
  return NCProtoSuggestionAdvertisementDidChangeEvent.advertisement.setter(a1, type metadata accessor for NCProtoSuggestionAdvertisementDidChangeEvent, &demangling cache variable for type metadata for NCProtoSuggestionAdvertisement?, type metadata accessor for NCProtoSuggestionAdvertisement);
}

void (*NCProtoSuggestionAdvertisementDidChangeEvent.advertisement.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  _QWORD *v9;
  uint64_t v10;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NCProtoSuggestionAdvertisement?);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[1] = v5;
  v6 = type metadata accessor for NCProtoSuggestionAdvertisement(0);
  v3[2] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v3[3] = v7;
  v8 = *(_QWORD *)(v7 + 64);
  v3[4] = malloc(v8);
  v9 = malloc(v8);
  v3[5] = v9;
  v10 = *(int *)(type metadata accessor for NCProtoSuggestionAdvertisementDidChangeEvent(0) + 20);
  *((_DWORD *)v3 + 12) = v10;
  outlined init with copy of NCProtoContactInfo?(v1 + v10, (uint64_t)v5, &demangling cache variable for type metadata for NCProtoSuggestionAdvertisement?);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
    *v9 = 0;
    v9[1] = 0xE000000000000000;
    v9[2] = 0;
    v9[3] = 0xE000000000000000;
    v9[4] = 0;
    *((_BYTE *)v9 + 40) = 1;
    UnknownStorage.init()();
    outlined destroy of NCProtoContactInfo?((uint64_t)v5, &demangling cache variable for type metadata for NCProtoSuggestionAdvertisement?);
  }
  else
  {
    outlined init with take of NCProtoContactInfo((uint64_t)v5, (uint64_t)v9, type metadata accessor for NCProtoSuggestionAdvertisement);
  }
  return NCProtoSuggestionAdvertisementDidChangeEvent.advertisement.modify;
}

void NCProtoSuggestionAdvertisementDidChangeEvent.advertisement.modify(uint64_t a1, char a2)
{
  NCProtoContinuityFavorite.contactInfo.modify(a1, a2, &demangling cache variable for type metadata for NCProtoSuggestionAdvertisement?, type metadata accessor for NCProtoSuggestionAdvertisement);
}

BOOL NCProtoSuggestionAdvertisementDidChangeEvent.hasAdvertisement.getter()
{
  return NCProtoSuggestionAdvertisementDidChangeEvent.hasAdvertisement.getter(&demangling cache variable for type metadata for NCProtoSuggestionAdvertisement?, type metadata accessor for NCProtoSuggestionAdvertisementDidChangeEvent, type metadata accessor for NCProtoSuggestionAdvertisement);
}

Swift::Void __swiftcall NCProtoSuggestionAdvertisementDidChangeEvent.clearAdvertisement()()
{
  NCProtoSuggestionAdvertisementDidChangeEvent.clearAdvertisement()(type metadata accessor for NCProtoSuggestionAdvertisementDidChangeEvent, &demangling cache variable for type metadata for NCProtoSuggestionAdvertisement?, type metadata accessor for NCProtoSuggestionAdvertisement);
}

uint64_t (*NCProtoSuggestionAdvertisementDidChangeEvent.unknownFields.modify())()
{
  return NCProtoContactInfo.namePrefix.modify;
}

uint64_t NCProtoSuggestionAdvertisementDidChangeEvent.init()@<X0>(uint64_t a1@<X8>)
{
  return NCProtoSuggestionAdvertisementDidChangeEvent.init()(type metadata accessor for NCProtoSuggestionAdvertisementDidChangeEvent, type metadata accessor for NCProtoSuggestionAdvertisement, a1);
}

uint64_t (*NCProtoLagunaConnectionRequest.recentCalls.modify())()
{
  return NCProtoContactInfo.namePrefix.modify;
}

uint64_t NCProtoLagunaConnectionRequest.contactInfos.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t NCProtoLagunaConnectionRequest.contactInfos.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 8) = a1;
  return result;
}

uint64_t (*NCProtoLagunaConnectionRequest.contactInfos.modify())()
{
  return NCProtoContactInfo.namePrefix.modify;
}

uint64_t NCProtoLagunaConnectionRequest.callState.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  int *v6;
  uint64_t v7;
  uint64_t v9;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NCProtoCallState?);
  MEMORY[0x24BDAC7A8]();
  v4 = (char *)&v9 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for NCProtoLagunaConnectionRequest(0);
  outlined init with copy of NCProtoContactInfo?(v1 + *(int *)(v5 + 44), (uint64_t)v4, &demangling cache variable for type metadata for NCProtoCallState?);
  v6 = (int *)type metadata accessor for NCProtoCallState(0);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(*((_QWORD *)v6 - 1) + 48))(v4, 1, v6) != 1)
    return outlined init with take of NCProtoContactInfo((uint64_t)v4, a1, type metadata accessor for NCProtoCallState);
  UnknownStorage.init()();
  *(_BYTE *)(a1 + v6[5]) = 2;
  *(_BYTE *)(a1 + v6[6]) = 2;
  v7 = a1 + v6[7];
  *(_QWORD *)v7 = 0;
  *(_WORD *)(v7 + 8) = 256;
  *(_BYTE *)(a1 + v6[8]) = 2;
  return outlined destroy of NCProtoContactInfo?((uint64_t)v4, &demangling cache variable for type metadata for NCProtoCallState?);
}

uint64_t key path getter for NCProtoLagunaConnectionRequest.callState : NCProtoLagunaConnectionRequest@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  char *v5;
  uint64_t v6;
  int *v7;
  uint64_t v8;
  uint64_t v10;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NCProtoCallState?);
  MEMORY[0x24BDAC7A8]();
  v5 = (char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for NCProtoLagunaConnectionRequest(0);
  outlined init with copy of NCProtoContactInfo?(a1 + *(int *)(v6 + 44), (uint64_t)v5, &demangling cache variable for type metadata for NCProtoCallState?);
  v7 = (int *)type metadata accessor for NCProtoCallState(0);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(*((_QWORD *)v7 - 1) + 48))(v5, 1, v7) != 1)
    return outlined init with take of NCProtoContactInfo((uint64_t)v5, a2, type metadata accessor for NCProtoCallState);
  UnknownStorage.init()();
  *(_BYTE *)(a2 + v7[5]) = 2;
  *(_BYTE *)(a2 + v7[6]) = 2;
  v8 = a2 + v7[7];
  *(_QWORD *)v8 = 0;
  *(_WORD *)(v8 + 8) = 256;
  *(_BYTE *)(a2 + v7[8]) = 2;
  return outlined destroy of NCProtoContactInfo?((uint64_t)v5, &demangling cache variable for type metadata for NCProtoCallState?);
}

uint64_t key path setter for NCProtoLagunaConnectionRequest.callState : NCProtoLagunaConnectionRequest(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v10;

  v4 = type metadata accessor for NCProtoCallState(0);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8]();
  v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of NCProtoContactInfo(a1, (uint64_t)v7, type metadata accessor for NCProtoCallState);
  v8 = a2 + *(int *)(type metadata accessor for NCProtoLagunaConnectionRequest(0) + 44);
  outlined destroy of NCProtoContactInfo?(v8, &demangling cache variable for type metadata for NCProtoCallState?);
  outlined init with take of NCProtoContactInfo((uint64_t)v7, v8, type metadata accessor for NCProtoCallState);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v5 + 56))(v8, 0, 1, v4);
}

uint64_t NCProtoLagunaConnectionRequest.callState.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for NCProtoLagunaConnectionRequest(0) + 44);
  outlined destroy of NCProtoContactInfo?(v3, &demangling cache variable for type metadata for NCProtoCallState?);
  outlined init with take of NCProtoContactInfo(a1, v3, type metadata accessor for NCProtoCallState);
  v4 = type metadata accessor for NCProtoCallState(0);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(v3, 0, 1, v4);
}

int *NCProtoCallState.init()@<X0>(uint64_t a1@<X8>)
{
  int *result;
  uint64_t v3;

  UnknownStorage.init()();
  result = (int *)type metadata accessor for NCProtoCallState(0);
  *(_BYTE *)(a1 + result[5]) = 2;
  *(_BYTE *)(a1 + result[6]) = 2;
  v3 = a1 + result[7];
  *(_QWORD *)v3 = 0;
  *(_WORD *)(v3 + 8) = 256;
  *(_BYTE *)(a1 + result[8]) = 2;
  return result;
}

uint64_t type metadata accessor for NCProtoLagunaConnectionRequest(uint64_t a1)
{
  return type metadata accessor for NCProtoContactInfo(a1, (uint64_t *)&type metadata singleton initialization cache for NCProtoLagunaConnectionRequest);
}

uint64_t type metadata accessor for NCProtoCallState(uint64_t a1)
{
  return type metadata accessor for NCProtoContactInfo(a1, (uint64_t *)&type metadata singleton initialization cache for NCProtoCallState);
}

void (*NCProtoLagunaConnectionRequest.callState.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  int *v6;
  uint64_t v7;
  size_t v8;
  _BYTE *v9;
  uint64_t v10;
  char *v11;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NCProtoCallState?);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[1] = v5;
  v6 = (int *)type metadata accessor for NCProtoCallState(0);
  v3[2] = v6;
  v7 = *((_QWORD *)v6 - 1);
  v3[3] = v7;
  v8 = *(_QWORD *)(v7 + 64);
  v3[4] = malloc(v8);
  v9 = malloc(v8);
  v3[5] = v9;
  v10 = *(int *)(type metadata accessor for NCProtoLagunaConnectionRequest(0) + 44);
  *((_DWORD *)v3 + 12) = v10;
  outlined init with copy of NCProtoContactInfo?(v1 + v10, (uint64_t)v5, &demangling cache variable for type metadata for NCProtoCallState?);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v9[v6[5]] = 2;
    v9[v6[6]] = 2;
    v11 = &v9[v6[7]];
    *(_QWORD *)v11 = 0;
    *((_WORD *)v11 + 4) = 256;
    v9[v6[8]] = 2;
    outlined destroy of NCProtoContactInfo?((uint64_t)v5, &demangling cache variable for type metadata for NCProtoCallState?);
  }
  else
  {
    outlined init with take of NCProtoContactInfo((uint64_t)v5, (uint64_t)v9, type metadata accessor for NCProtoCallState);
  }
  return NCProtoLagunaConnectionRequest.callState.modify;
}

void NCProtoLagunaConnectionRequest.callState.modify(uint64_t a1, char a2)
{
  NCProtoContinuityFavorite.contactInfo.modify(a1, a2, &demangling cache variable for type metadata for NCProtoCallState?, type metadata accessor for NCProtoCallState);
}

BOOL NCProtoLagunaConnectionRequest.hasCallState.getter()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  _BOOL8 v5;
  uint64_t v7;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NCProtoCallState?);
  MEMORY[0x24BDAC7A8]();
  v2 = (char *)&v7 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for NCProtoLagunaConnectionRequest(0);
  outlined init with copy of NCProtoContactInfo?(v0 + *(int *)(v3 + 44), (uint64_t)v2, &demangling cache variable for type metadata for NCProtoCallState?);
  v4 = type metadata accessor for NCProtoCallState(0);
  v5 = (*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(v2, 1, v4) != 1;
  outlined destroy of NCProtoContactInfo?((uint64_t)v2, &demangling cache variable for type metadata for NCProtoCallState?);
  return v5;
}

Swift::Void __swiftcall NCProtoLagunaConnectionRequest.clearCallState()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0 + *(int *)(type metadata accessor for NCProtoLagunaConnectionRequest(0) + 44);
  outlined destroy of NCProtoContactInfo?(v1, &demangling cache variable for type metadata for NCProtoCallState?);
  v2 = type metadata accessor for NCProtoCallState(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 56))(v1, 1, 1, v2);
}

uint64_t (*NCProtoLagunaConnectionRequest.activeConversations.modify())()
{
  return NCProtoContactInfo.namePrefix.modify;
}

uint64_t NCProtoLagunaConnectionRequest.favorites.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t NCProtoLagunaConnectionRequest.favorites.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 24) = a1;
  return result;
}

uint64_t (*NCProtoLagunaConnectionRequest.favorites.modify())()
{
  return NCProtoContactInfo.namePrefix.modify;
}

uint64_t (*NCProtoLagunaConnectionRequest.continuityCalls.modify())()
{
  return NCProtoContactInfo.namePrefix.modify;
}

uint64_t NCProtoLagunaConnectionRequest.recentCallsInfo.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t NCProtoLagunaConnectionRequest.recentCallsInfo.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 40) = a1;
  return result;
}

uint64_t (*NCProtoLagunaConnectionRequest.recentCallsInfo.modify())()
{
  return NCProtoContactInfo.namePrefix.modify;
}

uint64_t NCProtoLagunaConnectionRequest.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return NCProtoLagunaConnectionRequest.unknownFields.getter(type metadata accessor for NCProtoLagunaConnectionRequest, a1);
}

uint64_t NCProtoLagunaConnectionRequest.unknownFields.setter(uint64_t a1)
{
  return NCProtoLagunaConnectionRequest.unknownFields.setter(a1, type metadata accessor for NCProtoLagunaConnectionRequest);
}

uint64_t (*NCProtoLagunaConnectionRequest.unknownFields.modify())()
{
  type metadata accessor for NCProtoLagunaConnectionRequest(0);
  return NCProtoContactInfo.namePrefix.modify;
}

uint64_t NCProtoLagunaConnectionRequest.init()@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;

  v2 = MEMORY[0x24BEE4AF8];
  *a1 = MEMORY[0x24BEE4AF8];
  a1[1] = specialized Dictionary.init(dictionaryLiteral:)(v2, &demangling cache variable for type metadata for (String, NCProtoContactInfo), &demangling cache variable for type metadata for _DictionaryStorage<String, NCProtoContactInfo>, type metadata accessor for NCProtoContactInfo);
  a1[2] = v2;
  a1[3] = v2;
  a1[4] = v2;
  a1[5] = specialized Dictionary.init(dictionaryLiteral:)(v2, &demangling cache variable for type metadata for (String, NCProtoCallInfo), &demangling cache variable for type metadata for _DictionaryStorage<String, NCProtoCallInfo>, type metadata accessor for NCProtoCallInfo);
  v3 = type metadata accessor for NCProtoLagunaConnectionRequest(0);
  UnknownStorage.init()();
  v4 = (char *)a1 + *(int *)(v3 + 44);
  v5 = type metadata accessor for NCProtoCallState(0);
  return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56))(v4, 1, 1, v5);
}

uint64_t (*NCProtoLagunaConnectionResponse.unknownFields.modify())()
{
  return NCProtoContactInfo.namePrefix.modify;
}

uint64_t (*NCProtoDeviceLaunchedEvent.unknownFields.modify())()
{
  return NCProtoContactInfo.namePrefix.modify;
}

uint64_t (*NCProtoTVLaunchedEvent.unknownFields.modify())()
{
  return NCProtoContactInfo.namePrefix.modify;
}

uint64_t (*NCProtoCancelAddMemberEvent.conversationIdentifier.modify())()
{
  return NCProtoContactInfo.namePrefix.modify;
}

uint64_t NCProtoCancelAddMemberEvent.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return NCProtoActiveConversation.unknownFields.getter(type metadata accessor for NCProtoCancelAddMemberEvent, a1);
}

uint64_t type metadata accessor for NCProtoCancelAddMemberEvent(uint64_t a1)
{
  return type metadata accessor for NCProtoContactInfo(a1, (uint64_t *)&type metadata singleton initialization cache for NCProtoCancelAddMemberEvent);
}

uint64_t NCProtoCancelAddMemberEvent.unknownFields.setter(uint64_t a1)
{
  return NCProtoActiveConversation.unknownFields.setter(a1, type metadata accessor for NCProtoCancelAddMemberEvent);
}

uint64_t (*NCProtoCancelAddMemberEvent.unknownFields.modify())()
{
  type metadata accessor for NCProtoCancelAddMemberEvent(0);
  return NCProtoContactInfo.namePrefix.modify;
}

uint64_t NCProtoCancelAddMemberEvent.init()@<X0>(_QWORD *a1@<X8>)
{
  return NCProtoEndedSessionEvent.init()((void (*)(_QWORD))type metadata accessor for NCProtoCancelAddMemberEvent, a1);
}

uint64_t NCProtoEndedSessionEvent.init()@<X0>(void (*a1)(_QWORD)@<X0>, _QWORD *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0xE000000000000000;
  a1(0);
  return UnknownStorage.init()();
}

uint64_t (*NCProtoEndLagunaSessionEvent.unknownFields.modify())()
{
  return NCProtoContactInfo.namePrefix.modify;
}

uint64_t (*NCProtoPolicyInfoUpdatedEvent.policyInfos.modify())()
{
  return NCProtoContactInfo.namePrefix.modify;
}

uint64_t NCProtoPolicyInfoUpdatedEvent.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return NCProtoActiveConversation.unknownFields.getter(type metadata accessor for NCProtoPolicyInfoUpdatedEvent, a1);
}

uint64_t type metadata accessor for NCProtoPolicyInfoUpdatedEvent(uint64_t a1)
{
  return type metadata accessor for NCProtoContactInfo(a1, (uint64_t *)&type metadata singleton initialization cache for NCProtoPolicyInfoUpdatedEvent);
}

uint64_t NCProtoPolicyInfoUpdatedEvent.unknownFields.setter(uint64_t a1)
{
  return NCProtoActiveConversation.unknownFields.setter(a1, type metadata accessor for NCProtoPolicyInfoUpdatedEvent);
}

uint64_t (*NCProtoPolicyInfoUpdatedEvent.unknownFields.modify())()
{
  type metadata accessor for NCProtoPolicyInfoUpdatedEvent(0);
  return NCProtoContactInfo.namePrefix.modify;
}

uint64_t NCProtoPolicyInfoUpdatedEvent.init()@<X0>(unint64_t *a1@<X8>)
{
  *a1 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
  type metadata accessor for NCProtoPolicyInfoUpdatedEvent(0);
  return UnknownStorage.init()();
}

uint64_t (*NCProtoAddMemberRequest.memberToken.modify())()
{
  return NCProtoContactInfo.namePrefix.modify;
}

uint64_t (*NCProtoAddMemberRequest.conversationIdentifier.modify())()
{
  return NCProtoContactInfo.namePrefix.modify;
}

void NCProtoAddMemberRequest.context.getter(uint64_t a1@<X8>)
{
  uint64_t v1;
  char v2;

  v2 = *(_BYTE *)(v1 + 40);
  *(_QWORD *)a1 = *(_QWORD *)(v1 + 32);
  *(_BYTE *)(a1 + 8) = v2;
}

uint64_t NCProtoAddMemberRequest.context.setter(uint64_t result)
{
  uint64_t v1;
  char v2;

  v2 = *(_BYTE *)(result + 8);
  *(_QWORD *)(v1 + 32) = *(_QWORD *)result;
  *(_BYTE *)(v1 + 40) = v2;
  return result;
}

uint64_t (*NCProtoAddMemberRequest.context.modify())()
{
  return NCProtoContactInfo.namePrefix.modify;
}

uint64_t NCProtoAddMemberRequest.associationVoucherData.getter()
{
  uint64_t v0;
  uint64_t *v1;
  unint64_t v2;
  uint64_t v3;

  v1 = (uint64_t *)(v0 + *(int *)(type metadata accessor for NCProtoAddMemberRequest(0) + 32));
  v2 = v1[1];
  if (v2 >> 60 == 15)
    v3 = 0;
  else
    v3 = *v1;
  outlined copy of Data?(*v1, v2);
  return v3;
}

uint64_t type metadata accessor for NCProtoAddMemberRequest(uint64_t a1)
{
  return type metadata accessor for NCProtoContactInfo(a1, (uint64_t *)&type metadata singleton initialization cache for NCProtoAddMemberRequest);
}

uint64_t outlined copy of Data?(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 != 15)
    return outlined copy of Data._Representation(a1, a2);
  return a1;
}

uint64_t key path getter for NCProtoAddMemberRequest.associationVoucherData : NCProtoAddMemberRequest@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t *v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;

  v3 = (uint64_t *)(a1 + *(int *)(type metadata accessor for NCProtoAddMemberRequest(0) + 32));
  v4 = *v3;
  v5 = v3[1];
  if (v5 >> 60 == 15)
    v6 = 0;
  else
    v6 = *v3;
  v7 = 0xC000000000000000;
  if (v5 >> 60 != 15)
    v7 = v5;
  *a2 = v6;
  a2[1] = v7;
  return outlined copy of Data?(v4, v5);
}

uint64_t key path setter for NCProtoAddMemberRequest.associationVoucherData : NCProtoAddMemberRequest(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t result;

  v2 = *a1;
  v3 = a1[1];
  v4 = (uint64_t *)(a2 + *(int *)(type metadata accessor for NCProtoAddMemberRequest(0) + 32));
  v5 = *v4;
  v6 = v4[1];
  outlined copy of Data._Representation(v2, v3);
  result = outlined consume of Data?(v5, v6);
  *v4 = v2;
  v4[1] = v3;
  return result;
}

uint64_t NCProtoAddMemberRequest.associationVoucherData.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t result;

  v5 = v2 + *(int *)(type metadata accessor for NCProtoAddMemberRequest(0) + 32);
  result = outlined consume of Data?(*(_QWORD *)v5, *(_QWORD *)(v5 + 8));
  *(_QWORD *)v5 = a1;
  *(_QWORD *)(v5 + 8) = a2;
  return result;
}

uint64_t outlined consume of Data?(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 != 15)
    return outlined consume of Data._Representation(a1, a2);
  return a1;
}

uint64_t (*NCProtoAddMemberRequest.associationVoucherData.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;

  *(_QWORD *)(a1 + 16) = v1;
  v3 = *(int *)(type metadata accessor for NCProtoAddMemberRequest(0) + 32);
  *(_DWORD *)(a1 + 24) = v3;
  v4 = (uint64_t *)(v1 + v3);
  v5 = *v4;
  v6 = v4[1];
  if (v6 >> 60 == 15)
    v7 = 0;
  else
    v7 = *v4;
  v8 = 0xC000000000000000;
  if (v6 >> 60 != 15)
    v8 = v6;
  *(_QWORD *)a1 = v7;
  *(_QWORD *)(a1 + 8) = v8;
  outlined copy of Data?(v5, v6);
  return NCProtoAddMemberRequest.associationVoucherData.modify;
}

BOOL NCProtoAddMemberRequest.hasAssociationVoucherData.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + *(int *)(type metadata accessor for NCProtoAddMemberRequest(0) + 32) + 8) >> 60 != 15;
}

Swift::Void __swiftcall NCProtoAddMemberRequest.clearAssociationVoucherData()()
{
  uint64_t v0;
  uint64_t v1;

  v1 = v0 + *(int *)(type metadata accessor for NCProtoAddMemberRequest(0) + 32);
  outlined consume of Data?(*(_QWORD *)v1, *(_QWORD *)(v1 + 8));
  *(_OWORD *)v1 = xmmword_242A30CC0;
}

uint64_t NCProtoAddMemberRequest.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return NCProtoContinuityFavorite.unknownFields.getter(type metadata accessor for NCProtoAddMemberRequest, a1);
}

uint64_t NCProtoAddMemberRequest.unknownFields.setter(uint64_t a1)
{
  return NCProtoContinuityFavorite.unknownFields.setter(a1, type metadata accessor for NCProtoAddMemberRequest);
}

uint64_t (*NCProtoAddMemberRequest.unknownFields.modify())()
{
  type metadata accessor for NCProtoAddMemberRequest(0);
  return NCProtoContactInfo.namePrefix.modify;
}

unint64_t NCProtoAddMemberRequest.NearbyConversationPullContext.init(rawValue:)@<X0>(unint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = result;
  *(_BYTE *)(a2 + 8) = result < 6;
  *(_BYTE *)(a2 + 9) = 0;
  return result;
}

uint64_t NCProtoAddMemberRequest.NearbyConversationPullContext.rawValue.getter()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

uint64_t protocol witness for Enum.rawValue.getter in conformance NCProtoAddMemberRequest.NearbyConversationPullContext()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

unint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance NCProtoAddMemberRequest.NearbyConversationPullContext@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  return NCProtoAddMemberRequest.NearbyConversationPullContext.init(rawValue:)(*a1, a2);
}

void protocol witness for RawRepresentable.rawValue.getter in conformance NCProtoAddMemberRequest.NearbyConversationPullContext(_QWORD *a1@<X8>)
{
  _QWORD *v1;

  *a1 = *v1;
}

uint64_t protocol witness for Hashable.hash(into:) in conformance NCProtoAddMemberRequest.NearbyConversationPullContext()
{
  lazy protocol witness table accessor for type NCProtoAddMemberRequest.NearbyConversationPullContext and conformance NCProtoAddMemberRequest.NearbyConversationPullContext();
  return Enum.hash(into:)();
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance NCProtoAddMemberRequest.NearbyConversationPullContext(_QWORD *a1, _QWORD *a2)
{
  return *a1 == *a2;
}

double NCProtoAddMemberRequest.init()@<D0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  double result;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0xE000000000000000;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0xE000000000000000;
  *(_QWORD *)(a1 + 32) = 0;
  *(_BYTE *)(a1 + 40) = 1;
  v2 = type metadata accessor for NCProtoAddMemberRequest(0);
  UnknownStorage.init()();
  result = 0.0;
  *(_OWORD *)(a1 + *(int *)(v2 + 32)) = xmmword_242A30CC0;
  return result;
}

uint64_t static NCProtoAddMemberRequest.NearbyConversationPullContext.allCases.getter()
{
  return static NCProtoConversationAVMode.allCases.getter(&one-time initialization token for allCases);
}

uint64_t static NCProtoAddMemberRequest.NearbyConversationPullContext.allCases.setter(uint64_t a1)
{
  return static NCProtoConversationAVMode.allCases.setter(a1, &one-time initialization token for allCases, &static NCProtoAddMemberRequest.NearbyConversationPullContext.allCases);
}

uint64_t (*static NCProtoAddMemberRequest.NearbyConversationPullContext.allCases.modify())()
{
  if (one-time initialization token for allCases != -1)
    swift_once();
  swift_beginAccess();
  return static NCProtoConversationAVMode.allCases.modify;
}

uint64_t protocol witness for static CaseIterable.allCases.getter in conformance NCProtoAddMemberRequest.NearbyConversationPullContext@<X0>(_QWORD *a1@<X8>)
{
  return protocol witness for static CaseIterable.allCases.getter in conformance NCProtoConversationAVMode(&one-time initialization token for allCases, &static NCProtoAddMemberRequest.NearbyConversationPullContext.allCases, a1);
}

uint64_t (*NCProtoAddMemberResponse.identifierHash.modify())()
{
  return NCProtoContactInfo.namePrefix.modify;
}

uint64_t NCProtoAddMemberResponse.policyInfos.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t NCProtoAddMemberResponse.policyInfos.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 16) = a1;
  return result;
}

uint64_t (*NCProtoAddMemberResponse.policyInfos.modify())()
{
  return NCProtoContactInfo.namePrefix.modify;
}

uint64_t NCProtoAddMemberResponse.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return NCProtoAddressableContact.unknownFields.getter(type metadata accessor for NCProtoAddMemberResponse, a1);
}

uint64_t type metadata accessor for NCProtoAddMemberResponse(uint64_t a1)
{
  return type metadata accessor for NCProtoContactInfo(a1, (uint64_t *)&type metadata singleton initialization cache for NCProtoAddMemberResponse);
}

uint64_t NCProtoAddMemberResponse.unknownFields.setter(uint64_t a1)
{
  return NCProtoAddressableContact.unknownFields.setter(a1, type metadata accessor for NCProtoAddMemberResponse);
}

uint64_t (*NCProtoAddMemberResponse.unknownFields.modify())()
{
  type metadata accessor for NCProtoAddMemberResponse(0);
  return NCProtoContactInfo.namePrefix.modify;
}

uint64_t NCProtoAddMemberResponse.init()@<X0>(uint64_t a1@<X8>)
{
  *(_OWORD *)a1 = xmmword_242A30CB0;
  *(_QWORD *)(a1 + 16) = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
  type metadata accessor for NCProtoAddMemberResponse(0);
  return UnknownStorage.init()();
}

uint64_t (*NCProtoPullLagunaSessionToTVRequest.conversationIdentifier.modify())()
{
  return NCProtoContactInfo.namePrefix.modify;
}

uint64_t NCProtoPullLagunaSessionToTVRequest.reason.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t result;
  uint64_t *v4;
  uint64_t v5;
  char v6;
  char v7;

  result = type metadata accessor for NCProtoPullLagunaSessionToTVRequest(0);
  v4 = (uint64_t *)(v1 + *(int *)(result + 24));
  if ((*((_BYTE *)v4 + 9) & 1) != 0)
  {
    v5 = 0;
    v6 = 1;
  }
  else
  {
    v7 = *((_BYTE *)v4 + 8);
    v5 = *v4;
    v6 = v7 & 1;
  }
  *(_QWORD *)a1 = v5;
  *(_BYTE *)(a1 + 8) = v6;
  return result;
}

uint64_t type metadata accessor for NCProtoPullLagunaSessionToTVRequest(uint64_t a1)
{
  return type metadata accessor for NCProtoContactInfo(a1, (uint64_t *)&type metadata singleton initialization cache for NCProtoPullLagunaSessionToTVRequest);
}

uint64_t key path getter for NCProtoPullLagunaSessionToTVRequest.reason : NCProtoPullLagunaSessionToTVRequest@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  uint64_t *v5;
  uint64_t v6;
  char v7;
  int v8;

  result = type metadata accessor for NCProtoPullLagunaSessionToTVRequest(0);
  v5 = (uint64_t *)(a1 + *(int *)(result + 24));
  v6 = *v5;
  v7 = *((_BYTE *)v5 + 8);
  v8 = *((unsigned __int8 *)v5 + 9);
  if (v8)
    v6 = 0;
  *(_QWORD *)a2 = v6;
  *(_BYTE *)(a2 + 8) = (v8 | v7) & 1;
  return result;
}

uint64_t key path setter for NCProtoPullLagunaSessionToTVRequest.reason : NCProtoPullLagunaSessionToTVRequest(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  char v4;
  uint64_t result;
  uint64_t v6;

  v3 = *a1;
  v4 = *((_BYTE *)a1 + 8);
  result = type metadata accessor for NCProtoPullLagunaSessionToTVRequest(0);
  v6 = a2 + *(int *)(result + 24);
  *(_QWORD *)v6 = v3;
  *(_BYTE *)(v6 + 8) = v4;
  *(_BYTE *)(v6 + 9) = 0;
  return result;
}

uint64_t NCProtoPullLagunaSessionToTVRequest.reason.setter(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  char v3;
  uint64_t result;
  uint64_t v5;

  v2 = *a1;
  v3 = *((_BYTE *)a1 + 8);
  result = type metadata accessor for NCProtoPullLagunaSessionToTVRequest(0);
  v5 = v1 + *(int *)(result + 24);
  *(_QWORD *)v5 = v2;
  *(_BYTE *)(v5 + 8) = v3;
  *(_BYTE *)(v5 + 9) = 0;
  return result;
}

uint64_t (*NCProtoPullLagunaSessionToTVRequest.reason.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  char v6;
  char v7;

  *(_QWORD *)(a1 + 16) = v1;
  v3 = *(int *)(type metadata accessor for NCProtoPullLagunaSessionToTVRequest(0) + 24);
  *(_DWORD *)(a1 + 12) = v3;
  v4 = (uint64_t *)(v1 + v3);
  if ((*((_BYTE *)v4 + 9) & 1) != 0)
  {
    v5 = 0;
    v6 = 1;
  }
  else
  {
    v7 = *((_BYTE *)v4 + 8);
    v5 = *v4;
    v6 = v7 & 1;
  }
  *(_QWORD *)a1 = v5;
  *(_BYTE *)(a1 + 8) = v6;
  return NCProtoActiveConversation.avMode.modify;
}

BOOL NCProtoPullLagunaSessionToTVRequest.hasReason.getter()
{
  uint64_t v0;

  return (*(_BYTE *)(v0 + *(int *)(type metadata accessor for NCProtoPullLagunaSessionToTVRequest(0) + 24) + 9) & 1) == 0;
}

Swift::Void __swiftcall NCProtoPullLagunaSessionToTVRequest.clearReason()()
{
  uint64_t v0;
  uint64_t v1;

  v1 = v0 + *(int *)(type metadata accessor for NCProtoPullLagunaSessionToTVRequest(0) + 24);
  *(_QWORD *)v1 = 0;
  *(_WORD *)(v1 + 8) = 256;
}

uint64_t NCProtoPullLagunaSessionToTVRequest.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return NCProtoActiveConversation.unknownFields.getter(type metadata accessor for NCProtoPullLagunaSessionToTVRequest, a1);
}

uint64_t NCProtoPullLagunaSessionToTVRequest.unknownFields.setter(uint64_t a1)
{
  return NCProtoActiveConversation.unknownFields.setter(a1, type metadata accessor for NCProtoPullLagunaSessionToTVRequest);
}

uint64_t (*NCProtoPullLagunaSessionToTVRequest.unknownFields.modify())()
{
  type metadata accessor for NCProtoPullLagunaSessionToTVRequest(0);
  return NCProtoContactInfo.namePrefix.modify;
}

uint64_t protocol witness for Hashable.hash(into:) in conformance NCProtoPullLagunaSessionToTVRequest.Reason()
{
  lazy protocol witness table accessor for type NCProtoPullLagunaSessionToTVRequest.Reason and conformance NCProtoPullLagunaSessionToTVRequest.Reason();
  return Enum.hash(into:)();
}

uint64_t NCProtoPullLagunaSessionToTVRequest.init()@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;
  char *v4;

  *a1 = 0;
  a1[1] = 0xE000000000000000;
  v2 = type metadata accessor for NCProtoPullLagunaSessionToTVRequest(0);
  result = UnknownStorage.init()();
  v4 = (char *)a1 + *(int *)(v2 + 24);
  *(_QWORD *)v4 = 0;
  *((_WORD *)v4 + 4) = 256;
  return result;
}

uint64_t static NCProtoPullLagunaSessionToTVRequest.Reason.allCases.getter()
{
  return static NCProtoConversationAVMode.allCases.getter(&one-time initialization token for allCases);
}

uint64_t static NCProtoPullLagunaSessionToTVRequest.Reason.allCases.setter(uint64_t a1)
{
  return static NCProtoConversationAVMode.allCases.setter(a1, &one-time initialization token for allCases, &static NCProtoPullLagunaSessionToTVRequest.Reason.allCases);
}

uint64_t (*static NCProtoPullLagunaSessionToTVRequest.Reason.allCases.modify())()
{
  if (one-time initialization token for allCases != -1)
    swift_once();
  swift_beginAccess();
  return static NCProtoConversationAVMode.allCases.modify;
}

uint64_t protocol witness for static CaseIterable.allCases.getter in conformance NCProtoPullLagunaSessionToTVRequest.Reason@<X0>(_QWORD *a1@<X8>)
{
  return protocol witness for static CaseIterable.allCases.getter in conformance NCProtoConversationAVMode(&one-time initialization token for allCases, &static NCProtoPullLagunaSessionToTVRequest.Reason.allCases, a1);
}

uint64_t (*NCProtoPullLagunaSessionToTVResponse.unknownFields.modify())()
{
  return NCProtoContactInfo.namePrefix.modify;
}

uint64_t (*NCProtoTransferActiveConversationRequest.activeConversationUuidString.modify())()
{
  return NCProtoContactInfo.namePrefix.modify;
}

uint64_t NCProtoTransferActiveConversationRequest.isAudioEnabled.getter()
{
  return NCProtoTransferActiveConversationRequest.isAudioEnabled.getter(type metadata accessor for NCProtoTransferActiveConversationRequest);
}

uint64_t type metadata accessor for NCProtoTransferActiveConversationRequest(uint64_t a1)
{
  return type metadata accessor for NCProtoContactInfo(a1, (uint64_t *)&type metadata singleton initialization cache for NCProtoTransferActiveConversationRequest);
}

uint64_t key path getter for NCProtoTransferActiveConversationRequest.isAudioEnabled : NCProtoTransferActiveConversationRequest@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  return key path getter for NCProtoTransferActiveConversationRequest.isAudioEnabled : NCProtoTransferActiveConversationRequest(a1, type metadata accessor for NCProtoTransferActiveConversationRequest, a2);
}

uint64_t key path setter for NCProtoTransferActiveConversationRequest.isAudioEnabled : NCProtoTransferActiveConversationRequest(char *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for NCProtoTransferActiveConversationRequest.isAudioEnabled : NCProtoTransferActiveConversationRequest(a1, a2, a3, a4, type metadata accessor for NCProtoTransferActiveConversationRequest);
}

uint64_t NCProtoTransferActiveConversationRequest.isAudioEnabled.setter(char a1)
{
  return NCProtoTransferActiveConversationRequest.isAudioEnabled.setter(a1, type metadata accessor for NCProtoTransferActiveConversationRequest);
}

uint64_t (*NCProtoTransferActiveConversationRequest.isAudioEnabled.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for NCProtoTransferActiveConversationRequest(0) + 24);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(v1 + v3) & 1;
  *(_DWORD *)(a1 + 8) = v3;
  return NCProtoTransferActiveConversationRequest.isAudioEnabled.modify;
}

BOOL NCProtoTransferActiveConversationRequest.hasIsAudioEnabled.getter()
{
  uint64_t v0;

  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for NCProtoTransferActiveConversationRequest(0) + 24)) != 2;
}

Swift::Void __swiftcall NCProtoTransferActiveConversationRequest.clearIsAudioEnabled()()
{
  uint64_t v0;

  *(_BYTE *)(v0 + *(int *)(type metadata accessor for NCProtoTransferActiveConversationRequest(0) + 24)) = 2;
}

uint64_t NCProtoTransferActiveConversationRequest.isVideoEnabled.getter()
{
  return NCProtoTransferActiveConversationRequest.isVideoEnabled.getter(type metadata accessor for NCProtoTransferActiveConversationRequest);
}

uint64_t key path getter for NCProtoTransferActiveConversationRequest.isVideoEnabled : NCProtoTransferActiveConversationRequest@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  return key path getter for NCProtoTransferActiveConversationRequest.isVideoEnabled : NCProtoTransferActiveConversationRequest(a1, type metadata accessor for NCProtoTransferActiveConversationRequest, a2);
}

uint64_t key path setter for NCProtoTransferActiveConversationRequest.isVideoEnabled : NCProtoTransferActiveConversationRequest(char *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for NCProtoTransferActiveConversationRequest.isVideoEnabled : NCProtoTransferActiveConversationRequest(a1, a2, a3, a4, type metadata accessor for NCProtoTransferActiveConversationRequest);
}

uint64_t NCProtoTransferActiveConversationRequest.isVideoEnabled.setter(char a1)
{
  return NCProtoTransferActiveConversationRequest.isVideoEnabled.setter(a1, type metadata accessor for NCProtoTransferActiveConversationRequest);
}

uint64_t (*NCProtoTransferActiveConversationRequest.isVideoEnabled.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for NCProtoTransferActiveConversationRequest(0) + 28);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(v1 + v3) & 1;
  *(_DWORD *)(a1 + 8) = v3;
  return NCProtoTransferActiveConversationRequest.isAudioEnabled.modify;
}

BOOL NCProtoTransferActiveConversationRequest.hasIsVideoEnabled.getter()
{
  uint64_t v0;

  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for NCProtoTransferActiveConversationRequest(0) + 28)) != 2;
}

Swift::Void __swiftcall NCProtoTransferActiveConversationRequest.clearIsVideoEnabled()()
{
  uint64_t v0;

  *(_BYTE *)(v0 + *(int *)(type metadata accessor for NCProtoTransferActiveConversationRequest(0) + 28)) = 2;
}

uint64_t NCProtoTransferActiveConversationRequest.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return NCProtoActiveConversation.unknownFields.getter(type metadata accessor for NCProtoTransferActiveConversationRequest, a1);
}

uint64_t NCProtoTransferActiveConversationRequest.unknownFields.setter(uint64_t a1)
{
  return NCProtoActiveConversation.unknownFields.setter(a1, type metadata accessor for NCProtoTransferActiveConversationRequest);
}

uint64_t (*NCProtoTransferActiveConversationRequest.unknownFields.modify())()
{
  type metadata accessor for NCProtoTransferActiveConversationRequest(0);
  return NCProtoContactInfo.namePrefix.modify;
}

uint64_t NCProtoTransferActiveConversationRequest.init()@<X0>(_QWORD *a1@<X8>)
{
  uint64_t active;
  uint64_t result;

  *a1 = 0;
  a1[1] = 0xE000000000000000;
  active = type metadata accessor for NCProtoTransferActiveConversationRequest(0);
  result = UnknownStorage.init()();
  *((_BYTE *)a1 + *(int *)(active + 24)) = 2;
  *((_BYTE *)a1 + *(int *)(active + 28)) = 2;
  return result;
}

uint64_t (*NCProtoTransferActiveConversationResponse.unknownFields.modify())()
{
  return NCProtoContactInfo.namePrefix.modify;
}

uint64_t (*NCProtoStartLagunaSessionRequest.recentCallFetchTypes.modify())()
{
  return NCProtoContactInfo.namePrefix.modify;
}

uint64_t NCProtoStartLagunaSessionRequest.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return NCProtoActiveConversation.unknownFields.getter(type metadata accessor for NCProtoStartLagunaSessionRequest, a1);
}

uint64_t type metadata accessor for NCProtoStartLagunaSessionRequest(uint64_t a1)
{
  return type metadata accessor for NCProtoContactInfo(a1, (uint64_t *)&type metadata singleton initialization cache for NCProtoStartLagunaSessionRequest);
}

uint64_t NCProtoStartLagunaSessionRequest.unknownFields.setter(uint64_t a1)
{
  return NCProtoActiveConversation.unknownFields.setter(a1, type metadata accessor for NCProtoStartLagunaSessionRequest);
}

uint64_t (*NCProtoStartLagunaSessionRequest.unknownFields.modify())()
{
  type metadata accessor for NCProtoStartLagunaSessionRequest(0);
  return NCProtoContactInfo.namePrefix.modify;
}

uint64_t protocol witness for Hashable.hash(into:) in conformance NCProtoStartLagunaSessionRequest.RecentCallFetchType()
{
  lazy protocol witness table accessor for type NCProtoStartLagunaSessionRequest.RecentCallFetchType and conformance NCProtoStartLagunaSessionRequest.RecentCallFetchType();
  return Enum.hash(into:)();
}

uint64_t NCProtoStartLagunaSessionRequest.init()@<X0>(_QWORD *a1@<X8>)
{
  return NCProtoFavoritesDidChangeEvent.init()((void (*)(_QWORD))type metadata accessor for NCProtoStartLagunaSessionRequest, a1);
}

uint64_t static NCProtoStartLagunaSessionRequest.RecentCallFetchType.allCases.getter()
{
  return static NCProtoConversationAVMode.allCases.getter(&one-time initialization token for allCases);
}

uint64_t static NCProtoStartLagunaSessionRequest.RecentCallFetchType.allCases.setter(uint64_t a1)
{
  return static NCProtoConversationAVMode.allCases.setter(a1, &one-time initialization token for allCases, &static NCProtoStartLagunaSessionRequest.RecentCallFetchType.allCases);
}

uint64_t (*static NCProtoStartLagunaSessionRequest.RecentCallFetchType.allCases.modify())()
{
  if (one-time initialization token for allCases != -1)
    swift_once();
  swift_beginAccess();
  return static NCProtoConversationAVMode.allCases.modify;
}

uint64_t protocol witness for static CaseIterable.allCases.getter in conformance NCProtoStartLagunaSessionRequest.RecentCallFetchType@<X0>(_QWORD *a1@<X8>)
{
  return protocol witness for static CaseIterable.allCases.getter in conformance NCProtoConversationAVMode(&one-time initialization token for allCases, &static NCProtoStartLagunaSessionRequest.RecentCallFetchType.allCases, a1);
}

uint64_t NCProtoCallInfo.callerIDSubstring.getter()
{
  return NCProtoContinuityCall.uuidString.getter(type metadata accessor for NCProtoCallInfo);
}

uint64_t NCProtoContinuityCall.uuidString.getter(uint64_t (*a1)(_QWORD))
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;

  v2 = (uint64_t *)(v1 + *(int *)(a1(0) + 20));
  if (v2[1])
    v3 = *v2;
  else
    v3 = 0;
  swift_bridgeObjectRetain();
  return v3;
}

uint64_t type metadata accessor for NCProtoCallInfo(uint64_t a1)
{
  return type metadata accessor for NCProtoContactInfo(a1, (uint64_t *)&type metadata singleton initialization cache for NCProtoCallInfo);
}

uint64_t key path getter for NCProtoCallInfo.callerIDSubstring : NCProtoCallInfo@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  return key path getter for NCProtoContinuityCall.uuidString : NCProtoContinuityCall(a1, type metadata accessor for NCProtoCallInfo, a2);
}

uint64_t key path getter for NCProtoContinuityCall.uuidString : NCProtoContinuityCall@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(_QWORD)@<X3>, _QWORD *a3@<X8>)
{
  uint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;

  v4 = (uint64_t *)(a1 + *(int *)(a2(0) + 20));
  v5 = v4[1];
  if (v5)
  {
    v6 = *v4;
    v7 = v5;
  }
  else
  {
    v6 = 0;
    v7 = 0xE000000000000000;
  }
  *a3 = v6;
  a3[1] = v7;
  return swift_bridgeObjectRetain();
}

uint64_t key path setter for NCProtoCallInfo.callerIDSubstring : NCProtoCallInfo(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for NCProtoContinuityCall.uuidString : NCProtoContinuityCall(a1, a2, a3, a4, type metadata accessor for NCProtoCallInfo);
}

uint64_t key path setter for NCProtoContinuityCall.uuidString : NCProtoContinuityCall(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(_QWORD))
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t result;

  v6 = *a1;
  v5 = a1[1];
  v7 = (_QWORD *)(a2 + *(int *)(a5(0) + 20));
  swift_bridgeObjectRetain();
  result = swift_bridgeObjectRelease();
  *v7 = v6;
  v7[1] = v5;
  return result;
}

uint64_t NCProtoCallInfo.callerIDSubstring.setter(uint64_t a1, uint64_t a2)
{
  return NCProtoContinuityCall.uuidString.setter(a1, a2, type metadata accessor for NCProtoCallInfo);
}

uint64_t NCProtoContinuityCall.uuidString.setter(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v3;
  _QWORD *v6;
  uint64_t result;

  v6 = (_QWORD *)(v3 + *(int *)(a3(0) + 20));
  result = swift_bridgeObjectRelease();
  *v6 = a1;
  v6[1] = a2;
  return result;
}

uint64_t (*NCProtoCallInfo.callerIDSubstring.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  uint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;

  *(_QWORD *)(a1 + 16) = v1;
  v3 = *(int *)(type metadata accessor for NCProtoCallInfo(0) + 20);
  *(_DWORD *)(a1 + 24) = v3;
  v4 = (uint64_t *)(v1 + v3);
  v5 = v4[1];
  if (v5)
  {
    v6 = *v4;
    v7 = v5;
  }
  else
  {
    v6 = 0;
    v7 = 0xE000000000000000;
  }
  *(_QWORD *)a1 = v6;
  *(_QWORD *)(a1 + 8) = v7;
  swift_bridgeObjectRetain();
  return NCProtoContactInfo.organizationName.modify;
}

BOOL NCProtoCallInfo.hasCallerIDSubstring.getter()
{
  return NCProtoContinuityCall.hasUuidString.getter(type metadata accessor for NCProtoCallInfo);
}

BOOL NCProtoContinuityCall.hasUuidString.getter(uint64_t (*a1)(_QWORD))
{
  uint64_t v1;

  return *(_QWORD *)(v1 + *(int *)(a1(0) + 20) + 8) != 0;
}

Swift::Void __swiftcall NCProtoCallInfo.clearCallerIDSubstring()()
{
  NCProtoContinuityCall.clearUuidString()(type metadata accessor for NCProtoCallInfo);
}

uint64_t NCProtoContinuityCall.clearUuidString()(uint64_t (*a1)(_QWORD))
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t result;

  v2 = (_QWORD *)(v1 + *(int *)(a1(0) + 20));
  result = swift_bridgeObjectRelease();
  *v2 = 0;
  v2[1] = 0;
  return result;
}

uint64_t NCProtoCallInfo.callIdentifier.getter()
{
  return NCProtoActiveConversation.uuidString.getter(type metadata accessor for NCProtoCallInfo);
}

uint64_t key path getter for NCProtoCallInfo.callIdentifier : NCProtoCallInfo@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  return key path getter for NCProtoActiveConversation.uuidString : NCProtoActiveConversation(a1, type metadata accessor for NCProtoCallInfo, a2);
}

uint64_t key path setter for NCProtoCallInfo.callIdentifier : NCProtoCallInfo(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for NCProtoActiveConversation.uuidString : NCProtoActiveConversation(a1, a2, a3, a4, type metadata accessor for NCProtoCallInfo);
}

uint64_t NCProtoCallInfo.callIdentifier.setter(uint64_t a1, uint64_t a2)
{
  return NCProtoActiveConversation.uuidString.setter(a1, a2, type metadata accessor for NCProtoCallInfo);
}

uint64_t (*NCProtoCallInfo.callIdentifier.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  uint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;

  *(_QWORD *)(a1 + 16) = v1;
  v3 = *(int *)(type metadata accessor for NCProtoCallInfo(0) + 24);
  *(_DWORD *)(a1 + 24) = v3;
  v4 = (uint64_t *)(v1 + v3);
  v5 = v4[1];
  if (v5)
  {
    v6 = *v4;
    v7 = v5;
  }
  else
  {
    v6 = 0;
    v7 = 0xE000000000000000;
  }
  *(_QWORD *)a1 = v6;
  *(_QWORD *)(a1 + 8) = v7;
  swift_bridgeObjectRetain();
  return NCProtoContactInfo.organizationName.modify;
}

BOOL NCProtoCallInfo.hasCallIdentifier.getter()
{
  return NCProtoActiveConversation.hasUuidString.getter(type metadata accessor for NCProtoCallInfo);
}

Swift::Void __swiftcall NCProtoCallInfo.clearCallIdentifier()()
{
  NCProtoActiveConversation.clearUuidString()(type metadata accessor for NCProtoCallInfo);
}

uint64_t NCProtoCallInfo.displayName.getter()
{
  return NCProtoActiveConversation.displayName.getter(type metadata accessor for NCProtoCallInfo);
}

uint64_t NCProtoActiveConversation.displayName.getter(uint64_t (*a1)(_QWORD))
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;

  v2 = (uint64_t *)(v1 + *(int *)(a1(0) + 28));
  if (v2[1])
    v3 = *v2;
  else
    v3 = 0;
  swift_bridgeObjectRetain();
  return v3;
}

uint64_t key path getter for NCProtoCallInfo.displayName : NCProtoCallInfo@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  return key path getter for NCProtoActiveConversation.displayName : NCProtoActiveConversation(a1, type metadata accessor for NCProtoCallInfo, a2);
}

uint64_t key path getter for NCProtoActiveConversation.displayName : NCProtoActiveConversation@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(_QWORD)@<X3>, _QWORD *a3@<X8>)
{
  uint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;

  v4 = (uint64_t *)(a1 + *(int *)(a2(0) + 28));
  v5 = v4[1];
  if (v5)
  {
    v6 = *v4;
    v7 = v5;
  }
  else
  {
    v6 = 0;
    v7 = 0xE000000000000000;
  }
  *a3 = v6;
  a3[1] = v7;
  return swift_bridgeObjectRetain();
}

uint64_t key path setter for NCProtoCallInfo.displayName : NCProtoCallInfo(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for NCProtoActiveConversation.displayName : NCProtoActiveConversation(a1, a2, a3, a4, type metadata accessor for NCProtoCallInfo);
}

uint64_t key path setter for NCProtoActiveConversation.displayName : NCProtoActiveConversation(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(_QWORD))
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t result;

  v6 = *a1;
  v5 = a1[1];
  v7 = (_QWORD *)(a2 + *(int *)(a5(0) + 28));
  swift_bridgeObjectRetain();
  result = swift_bridgeObjectRelease();
  *v7 = v6;
  v7[1] = v5;
  return result;
}

uint64_t NCProtoCallInfo.displayName.setter(uint64_t a1, uint64_t a2)
{
  return NCProtoActiveConversation.displayName.setter(a1, a2, type metadata accessor for NCProtoCallInfo);
}

uint64_t NCProtoActiveConversation.displayName.setter(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v3;
  _QWORD *v6;
  uint64_t result;

  v6 = (_QWORD *)(v3 + *(int *)(a3(0) + 28));
  result = swift_bridgeObjectRelease();
  *v6 = a1;
  v6[1] = a2;
  return result;
}

uint64_t (*NCProtoCallInfo.displayName.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  uint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;

  *(_QWORD *)(a1 + 16) = v1;
  v3 = *(int *)(type metadata accessor for NCProtoCallInfo(0) + 28);
  *(_DWORD *)(a1 + 24) = v3;
  v4 = (uint64_t *)(v1 + v3);
  v5 = v4[1];
  if (v5)
  {
    v6 = *v4;
    v7 = v5;
  }
  else
  {
    v6 = 0;
    v7 = 0xE000000000000000;
  }
  *(_QWORD *)a1 = v6;
  *(_QWORD *)(a1 + 8) = v7;
  swift_bridgeObjectRetain();
  return NCProtoContactInfo.organizationName.modify;
}

BOOL NCProtoCallInfo.hasDisplayName.getter()
{
  return NCProtoActiveConversation.hasDisplayName.getter(type metadata accessor for NCProtoCallInfo);
}

BOOL NCProtoActiveConversation.hasDisplayName.getter(uint64_t (*a1)(_QWORD))
{
  uint64_t v1;

  return *(_QWORD *)(v1 + *(int *)(a1(0) + 28) + 8) != 0;
}

Swift::Void __swiftcall NCProtoCallInfo.clearDisplayName()()
{
  NCProtoActiveConversation.clearDisplayName()(type metadata accessor for NCProtoCallInfo);
}

uint64_t NCProtoActiveConversation.clearDisplayName()(uint64_t (*a1)(_QWORD))
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t result;

  v2 = (_QWORD *)(v1 + *(int *)(a1(0) + 28));
  result = swift_bridgeObjectRelease();
  *v2 = 0;
  v2[1] = 0;
  return result;
}

uint64_t (*NCProtoCallInfo.unknownFields.modify())()
{
  return NCProtoContactInfo.namePrefix.modify;
}

int *NCProtoCallInfo.init()@<X0>(uint64_t a1@<X8>)
{
  int *result;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;

  UnknownStorage.init()();
  result = (int *)type metadata accessor for NCProtoCallInfo(0);
  v3 = (_QWORD *)(a1 + result[5]);
  *v3 = 0;
  v3[1] = 0;
  v4 = (_QWORD *)(a1 + result[6]);
  *v4 = 0;
  v4[1] = 0;
  v5 = (_QWORD *)(a1 + result[7]);
  *v5 = 0;
  v5[1] = 0;
  return result;
}

uint64_t (*NCProtoStartLagunaSessionResponse.recentCalls.modify())()
{
  return NCProtoContactInfo.namePrefix.modify;
}

uint64_t (*NCProtoStartLagunaSessionResponse.contactInfos.modify())()
{
  return NCProtoContactInfo.namePrefix.modify;
}

uint64_t (*NCProtoStartLagunaSessionResponse.activeConversations.modify())()
{
  return NCProtoContactInfo.namePrefix.modify;
}

uint64_t (*NCProtoStartLagunaSessionResponse.favorites.modify())()
{
  return NCProtoContactInfo.namePrefix.modify;
}

uint64_t (*NCProtoStartLagunaSessionResponse.continuityCalls.modify())()
{
  return NCProtoContactInfo.namePrefix.modify;
}

uint64_t (*NCProtoStartLagunaSessionResponse.recentCallsInfo.modify())()
{
  return NCProtoContactInfo.namePrefix.modify;
}

uint64_t NCProtoStartLagunaSessionResponse.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return NCProtoLagunaConnectionRequest.unknownFields.getter(type metadata accessor for NCProtoStartLagunaSessionResponse, a1);
}

uint64_t NCProtoLagunaConnectionRequest.unknownFields.getter@<X0>(uint64_t (*a1)(_QWORD)@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = v2 + *(int *)(a1(0) + 40);
  v5 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, v4, v5);
}

uint64_t type metadata accessor for NCProtoStartLagunaSessionResponse(uint64_t a1)
{
  return type metadata accessor for NCProtoContactInfo(a1, (uint64_t *)&type metadata singleton initialization cache for NCProtoStartLagunaSessionResponse);
}

uint64_t NCProtoStartLagunaSessionResponse.unknownFields.setter(uint64_t a1)
{
  return NCProtoLagunaConnectionRequest.unknownFields.setter(a1, type metadata accessor for NCProtoStartLagunaSessionResponse);
}

uint64_t NCProtoLagunaConnectionRequest.unknownFields.setter(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = v2 + *(int *)(a2(0) + 40);
  v5 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 40))(v4, a1, v5);
}

uint64_t (*NCProtoStartLagunaSessionResponse.unknownFields.modify())()
{
  type metadata accessor for NCProtoStartLagunaSessionResponse(0);
  return NCProtoContactInfo.namePrefix.modify;
}

uint64_t NCProtoStartLagunaSessionResponse.init()@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v2;

  v2 = MEMORY[0x24BEE4AF8];
  *a1 = MEMORY[0x24BEE4AF8];
  a1[1] = specialized Dictionary.init(dictionaryLiteral:)(v2, &demangling cache variable for type metadata for (String, NCProtoContactInfo), &demangling cache variable for type metadata for _DictionaryStorage<String, NCProtoContactInfo>, type metadata accessor for NCProtoContactInfo);
  a1[2] = v2;
  a1[3] = v2;
  a1[4] = v2;
  a1[5] = specialized Dictionary.init(dictionaryLiteral:)(v2, &demangling cache variable for type metadata for (String, NCProtoCallInfo), &demangling cache variable for type metadata for _DictionaryStorage<String, NCProtoCallInfo>, type metadata accessor for NCProtoCallInfo);
  type metadata accessor for NCProtoStartLagunaSessionResponse(0);
  return UnknownStorage.init()();
}

uint64_t NCProtoStartConversationRequest.avMode.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t result;
  uint64_t *v4;
  uint64_t v5;
  char v6;
  char v7;

  result = type metadata accessor for NCProtoStartConversationRequest(0);
  v4 = (uint64_t *)(v1 + *(int *)(result + 20));
  if ((*((_BYTE *)v4 + 9) & 1) != 0)
  {
    v5 = 0;
    v6 = 1;
  }
  else
  {
    v7 = *((_BYTE *)v4 + 8);
    v5 = *v4;
    v6 = v7 & 1;
  }
  *(_QWORD *)a1 = v5;
  *(_BYTE *)(a1 + 8) = v6;
  return result;
}

uint64_t type metadata accessor for NCProtoStartConversationRequest(uint64_t a1)
{
  return type metadata accessor for NCProtoContactInfo(a1, (uint64_t *)&type metadata singleton initialization cache for NCProtoStartConversationRequest);
}

uint64_t key path getter for NCProtoStartConversationRequest.avMode : NCProtoStartConversationRequest@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  uint64_t *v5;
  uint64_t v6;
  char v7;
  int v8;

  result = type metadata accessor for NCProtoStartConversationRequest(0);
  v5 = (uint64_t *)(a1 + *(int *)(result + 20));
  v6 = *v5;
  v7 = *((_BYTE *)v5 + 8);
  v8 = *((unsigned __int8 *)v5 + 9);
  if (v8)
    v6 = 0;
  *(_QWORD *)a2 = v6;
  *(_BYTE *)(a2 + 8) = (v8 | v7) & 1;
  return result;
}

uint64_t key path setter for NCProtoStartConversationRequest.avMode : NCProtoStartConversationRequest(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  char v4;
  uint64_t result;
  uint64_t v6;

  v3 = *a1;
  v4 = *((_BYTE *)a1 + 8);
  result = type metadata accessor for NCProtoStartConversationRequest(0);
  v6 = a2 + *(int *)(result + 20);
  *(_QWORD *)v6 = v3;
  *(_BYTE *)(v6 + 8) = v4;
  *(_BYTE *)(v6 + 9) = 0;
  return result;
}

uint64_t NCProtoStartConversationRequest.avMode.setter(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  char v3;
  uint64_t result;
  uint64_t v5;

  v2 = *a1;
  v3 = *((_BYTE *)a1 + 8);
  result = type metadata accessor for NCProtoStartConversationRequest(0);
  v5 = v1 + *(int *)(result + 20);
  *(_QWORD *)v5 = v2;
  *(_BYTE *)(v5 + 8) = v3;
  *(_BYTE *)(v5 + 9) = 0;
  return result;
}

uint64_t (*NCProtoStartConversationRequest.avMode.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  char v6;
  char v7;

  *(_QWORD *)(a1 + 16) = v1;
  v3 = *(int *)(type metadata accessor for NCProtoStartConversationRequest(0) + 20);
  *(_DWORD *)(a1 + 12) = v3;
  v4 = (uint64_t *)(v1 + v3);
  if ((*((_BYTE *)v4 + 9) & 1) != 0)
  {
    v5 = 0;
    v6 = 1;
  }
  else
  {
    v7 = *((_BYTE *)v4 + 8);
    v5 = *v4;
    v6 = v7 & 1;
  }
  *(_QWORD *)a1 = v5;
  *(_BYTE *)(a1 + 8) = v6;
  return NCProtoActiveConversation.avMode.modify;
}

BOOL NCProtoStartConversationRequest.hasAvMode.getter()
{
  uint64_t v0;

  return (*(_BYTE *)(v0 + *(int *)(type metadata accessor for NCProtoStartConversationRequest(0) + 20) + 9) & 1) == 0;
}

Swift::Void __swiftcall NCProtoStartConversationRequest.clearAvMode()()
{
  uint64_t v0;
  uint64_t v1;

  v1 = v0 + *(int *)(type metadata accessor for NCProtoStartConversationRequest(0) + 20);
  *(_QWORD *)v1 = 0;
  *(_WORD *)(v1 + 8) = 256;
}

uint64_t (*NCProtoStartConversationRequest.unknownFields.modify())()
{
  return NCProtoContactInfo.namePrefix.modify;
}

uint64_t NCProtoStartConversationRequest.init()@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  UnknownStorage.init()();
  result = type metadata accessor for NCProtoStartConversationRequest(0);
  v3 = a1 + *(int *)(result + 20);
  *(_QWORD *)v3 = 0;
  *(_WORD *)(v3 + 8) = 256;
  return result;
}

uint64_t (*NCProtoStartConversationResponse.unknownFields.modify())()
{
  return NCProtoContactInfo.namePrefix.modify;
}

uint64_t NCProtoJoinActiveConversationRequest.activeConversationUuidString.getter()
{
  return NCProtoContinuityCall.uuidString.getter(type metadata accessor for NCProtoJoinActiveConversationRequest);
}

uint64_t type metadata accessor for NCProtoJoinActiveConversationRequest(uint64_t a1)
{
  return type metadata accessor for NCProtoContactInfo(a1, (uint64_t *)&type metadata singleton initialization cache for NCProtoJoinActiveConversationRequest);
}

uint64_t key path getter for NCProtoJoinActiveConversationRequest.activeConversationUuidString : NCProtoJoinActiveConversationRequest@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  return key path getter for NCProtoContinuityCall.uuidString : NCProtoContinuityCall(a1, type metadata accessor for NCProtoJoinActiveConversationRequest, a2);
}

uint64_t key path setter for NCProtoJoinActiveConversationRequest.activeConversationUuidString : NCProtoJoinActiveConversationRequest(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for NCProtoContinuityCall.uuidString : NCProtoContinuityCall(a1, a2, a3, a4, type metadata accessor for NCProtoJoinActiveConversationRequest);
}

uint64_t NCProtoJoinActiveConversationRequest.activeConversationUuidString.setter(uint64_t a1, uint64_t a2)
{
  return NCProtoContinuityCall.uuidString.setter(a1, a2, type metadata accessor for NCProtoJoinActiveConversationRequest);
}

uint64_t (*NCProtoJoinActiveConversationRequest.activeConversationUuidString.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  uint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;

  *(_QWORD *)(a1 + 16) = v1;
  v3 = *(int *)(type metadata accessor for NCProtoJoinActiveConversationRequest(0) + 20);
  *(_DWORD *)(a1 + 24) = v3;
  v4 = (uint64_t *)(v1 + v3);
  v5 = v4[1];
  if (v5)
  {
    v6 = *v4;
    v7 = v5;
  }
  else
  {
    v6 = 0;
    v7 = 0xE000000000000000;
  }
  *(_QWORD *)a1 = v6;
  *(_QWORD *)(a1 + 8) = v7;
  swift_bridgeObjectRetain();
  return NCProtoContactInfo.organizationName.modify;
}

BOOL NCProtoJoinActiveConversationRequest.hasActiveConversationUuidString.getter()
{
  return NCProtoContinuityCall.hasUuidString.getter(type metadata accessor for NCProtoJoinActiveConversationRequest);
}

Swift::Void __swiftcall NCProtoJoinActiveConversationRequest.clearActiveConversationUuidString()()
{
  NCProtoContinuityCall.clearUuidString()(type metadata accessor for NCProtoJoinActiveConversationRequest);
}

uint64_t NCProtoJoinActiveConversationRequest.isAudioEnabled.getter()
{
  return NCProtoTransferActiveConversationRequest.isAudioEnabled.getter(type metadata accessor for NCProtoJoinActiveConversationRequest);
}

uint64_t NCProtoTransferActiveConversationRequest.isAudioEnabled.getter(uint64_t (*a1)(_QWORD))
{
  uint64_t v1;

  return *(_BYTE *)(v1 + *(int *)(a1(0) + 24)) & 1;
}

uint64_t key path getter for NCProtoJoinActiveConversationRequest.isAudioEnabled : NCProtoJoinActiveConversationRequest@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  return key path getter for NCProtoTransferActiveConversationRequest.isAudioEnabled : NCProtoTransferActiveConversationRequest(a1, type metadata accessor for NCProtoJoinActiveConversationRequest, a2);
}

uint64_t key path getter for NCProtoTransferActiveConversationRequest.isAudioEnabled : NCProtoTransferActiveConversationRequest@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(_QWORD)@<X3>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = a2(0);
  *a3 = *(_BYTE *)(a1 + *(int *)(result + 24)) & 1;
  return result;
}

uint64_t key path setter for NCProtoJoinActiveConversationRequest.isAudioEnabled : NCProtoJoinActiveConversationRequest(char *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for NCProtoTransferActiveConversationRequest.isAudioEnabled : NCProtoTransferActiveConversationRequest(a1, a2, a3, a4, type metadata accessor for NCProtoJoinActiveConversationRequest);
}

uint64_t key path setter for NCProtoTransferActiveConversationRequest.isAudioEnabled : NCProtoTransferActiveConversationRequest(char *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(_QWORD))
{
  char v6;
  uint64_t result;

  v6 = *a1;
  result = a5(0);
  *(_BYTE *)(a2 + *(int *)(result + 24)) = v6;
  return result;
}

uint64_t NCProtoJoinActiveConversationRequest.isAudioEnabled.setter(char a1)
{
  return NCProtoTransferActiveConversationRequest.isAudioEnabled.setter(a1, type metadata accessor for NCProtoJoinActiveConversationRequest);
}

uint64_t NCProtoTransferActiveConversationRequest.isAudioEnabled.setter(char a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v2;
  uint64_t result;

  result = a2(0);
  *(_BYTE *)(v2 + *(int *)(result + 24)) = a1;
  return result;
}

uint64_t (*NCProtoJoinActiveConversationRequest.isAudioEnabled.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for NCProtoJoinActiveConversationRequest(0) + 24);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(v1 + v3) & 1;
  *(_DWORD *)(a1 + 8) = v3;
  return NCProtoTransferActiveConversationRequest.isAudioEnabled.modify;
}

BOOL NCProtoJoinActiveConversationRequest.hasIsAudioEnabled.getter()
{
  uint64_t v0;

  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for NCProtoJoinActiveConversationRequest(0) + 24)) != 2;
}

Swift::Void __swiftcall NCProtoJoinActiveConversationRequest.clearIsAudioEnabled()()
{
  uint64_t v0;

  *(_BYTE *)(v0 + *(int *)(type metadata accessor for NCProtoJoinActiveConversationRequest(0) + 24)) = 2;
}

uint64_t NCProtoJoinActiveConversationRequest.isVideoEnabled.getter()
{
  return NCProtoTransferActiveConversationRequest.isVideoEnabled.getter(type metadata accessor for NCProtoJoinActiveConversationRequest);
}

uint64_t NCProtoTransferActiveConversationRequest.isVideoEnabled.getter(uint64_t (*a1)(_QWORD))
{
  uint64_t v1;

  return *(_BYTE *)(v1 + *(int *)(a1(0) + 28)) & 1;
}

uint64_t key path getter for NCProtoJoinActiveConversationRequest.isVideoEnabled : NCProtoJoinActiveConversationRequest@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  return key path getter for NCProtoTransferActiveConversationRequest.isVideoEnabled : NCProtoTransferActiveConversationRequest(a1, type metadata accessor for NCProtoJoinActiveConversationRequest, a2);
}

uint64_t key path getter for NCProtoTransferActiveConversationRequest.isVideoEnabled : NCProtoTransferActiveConversationRequest@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(_QWORD)@<X3>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = a2(0);
  *a3 = *(_BYTE *)(a1 + *(int *)(result + 28)) & 1;
  return result;
}

uint64_t key path setter for NCProtoJoinActiveConversationRequest.isVideoEnabled : NCProtoJoinActiveConversationRequest(char *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for NCProtoTransferActiveConversationRequest.isVideoEnabled : NCProtoTransferActiveConversationRequest(a1, a2, a3, a4, type metadata accessor for NCProtoJoinActiveConversationRequest);
}

uint64_t key path setter for NCProtoTransferActiveConversationRequest.isVideoEnabled : NCProtoTransferActiveConversationRequest(char *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(_QWORD))
{
  char v6;
  uint64_t result;

  v6 = *a1;
  result = a5(0);
  *(_BYTE *)(a2 + *(int *)(result + 28)) = v6;
  return result;
}

uint64_t NCProtoJoinActiveConversationRequest.isVideoEnabled.setter(char a1)
{
  return NCProtoTransferActiveConversationRequest.isVideoEnabled.setter(a1, type metadata accessor for NCProtoJoinActiveConversationRequest);
}

uint64_t NCProtoTransferActiveConversationRequest.isVideoEnabled.setter(char a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v2;
  uint64_t result;

  result = a2(0);
  *(_BYTE *)(v2 + *(int *)(result + 28)) = a1;
  return result;
}

uint64_t (*NCProtoJoinActiveConversationRequest.isVideoEnabled.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for NCProtoJoinActiveConversationRequest(0) + 28);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(v1 + v3) & 1;
  *(_DWORD *)(a1 + 8) = v3;
  return NCProtoTransferActiveConversationRequest.isAudioEnabled.modify;
}

BOOL NCProtoJoinActiveConversationRequest.hasIsVideoEnabled.getter()
{
  uint64_t v0;

  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for NCProtoJoinActiveConversationRequest(0) + 28)) != 2;
}

Swift::Void __swiftcall NCProtoJoinActiveConversationRequest.clearIsVideoEnabled()()
{
  uint64_t v0;

  *(_BYTE *)(v0 + *(int *)(type metadata accessor for NCProtoJoinActiveConversationRequest(0) + 28)) = 2;
}

uint64_t (*NCProtoJoinActiveConversationRequest.unknownFields.modify())()
{
  return NCProtoContactInfo.namePrefix.modify;
}

int *NCProtoJoinActiveConversationRequest.init()@<X0>(uint64_t a1@<X8>)
{
  int *result;
  _QWORD *v3;

  UnknownStorage.init()();
  result = (int *)type metadata accessor for NCProtoJoinActiveConversationRequest(0);
  v3 = (_QWORD *)(a1 + result[5]);
  *v3 = 0;
  v3[1] = 0;
  *(_BYTE *)(a1 + result[6]) = 2;
  *(_BYTE *)(a1 + result[7]) = 2;
  return result;
}

uint64_t (*NCProtoJoinActiveConversationResponse.unknownFields.modify())()
{
  return NCProtoContactInfo.namePrefix.modify;
}

uint64_t NCProtoDeclineContinuityCallRequest.uuidString.getter()
{
  return NCProtoContinuityCall.uuidString.getter(type metadata accessor for NCProtoDeclineContinuityCallRequest);
}

uint64_t type metadata accessor for NCProtoDeclineContinuityCallRequest(uint64_t a1)
{
  return type metadata accessor for NCProtoContactInfo(a1, (uint64_t *)&type metadata singleton initialization cache for NCProtoDeclineContinuityCallRequest);
}

uint64_t key path getter for NCProtoDeclineContinuityCallRequest.uuidString : NCProtoDeclineContinuityCallRequest@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  return key path getter for NCProtoContinuityCall.uuidString : NCProtoContinuityCall(a1, type metadata accessor for NCProtoDeclineContinuityCallRequest, a2);
}

uint64_t key path setter for NCProtoDeclineContinuityCallRequest.uuidString : NCProtoDeclineContinuityCallRequest(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for NCProtoContinuityCall.uuidString : NCProtoContinuityCall(a1, a2, a3, a4, type metadata accessor for NCProtoDeclineContinuityCallRequest);
}

uint64_t NCProtoDeclineContinuityCallRequest.uuidString.setter(uint64_t a1, uint64_t a2)
{
  return NCProtoContinuityCall.uuidString.setter(a1, a2, type metadata accessor for NCProtoDeclineContinuityCallRequest);
}

uint64_t (*NCProtoDeclineContinuityCallRequest.uuidString.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  uint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;

  *(_QWORD *)(a1 + 16) = v1;
  v3 = *(int *)(type metadata accessor for NCProtoDeclineContinuityCallRequest(0) + 20);
  *(_DWORD *)(a1 + 24) = v3;
  v4 = (uint64_t *)(v1 + v3);
  v5 = v4[1];
  if (v5)
  {
    v6 = *v4;
    v7 = v5;
  }
  else
  {
    v6 = 0;
    v7 = 0xE000000000000000;
  }
  *(_QWORD *)a1 = v6;
  *(_QWORD *)(a1 + 8) = v7;
  swift_bridgeObjectRetain();
  return NCProtoContactInfo.organizationName.modify;
}

BOOL NCProtoDeclineContinuityCallRequest.hasUuidString.getter()
{
  return NCProtoContinuityCall.hasUuidString.getter(type metadata accessor for NCProtoDeclineContinuityCallRequest);
}

Swift::Void __swiftcall NCProtoDeclineContinuityCallRequest.clearUuidString()()
{
  NCProtoContinuityCall.clearUuidString()(type metadata accessor for NCProtoDeclineContinuityCallRequest);
}

uint64_t (*NCProtoDeclineContinuityCallRequest.unknownFields.modify())()
{
  return NCProtoContactInfo.namePrefix.modify;
}

uint64_t NCProtoDeclineContinuityCallRequest.init()@<X0>(uint64_t a1@<X8>)
{
  return NCProtoDeclineContinuityCallRequest.init()(type metadata accessor for NCProtoDeclineContinuityCallRequest, a1);
}

uint64_t (*NCProtoDeclineContinuityCallResponse.unknownFields.modify())()
{
  return NCProtoContactInfo.namePrefix.modify;
}

uint64_t (*NCProtoGetAddressableContactsRequest.unknownFields.modify())()
{
  return NCProtoContactInfo.namePrefix.modify;
}

uint64_t (*NCProtoGetAddressableContactsResponse.contacts.modify())()
{
  return NCProtoContactInfo.namePrefix.modify;
}

uint64_t NCProtoGetAddressableContactsResponse.contactSortOrder.getter()
{
  uint64_t v0;
  _BYTE *v1;

  v1 = (_BYTE *)(v0 + *(int *)(type metadata accessor for NCProtoGetAddressableContactsResponse(0) + 24));
  if (v1[8])
    return 0;
  else
    return *(_QWORD *)v1;
}

uint64_t type metadata accessor for NCProtoGetAddressableContactsResponse(uint64_t a1)
{
  return type metadata accessor for NCProtoContactInfo(a1, (uint64_t *)&type metadata singleton initialization cache for NCProtoGetAddressableContactsResponse);
}

uint64_t key path getter for NCProtoGetAddressableContactsResponse.contactSortOrder : NCProtoGetAddressableContactsResponse@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t result;
  uint64_t *v5;
  uint64_t v6;

  result = type metadata accessor for NCProtoGetAddressableContactsResponse(0);
  v5 = (uint64_t *)(a1 + *(int *)(result + 24));
  if (*((_BYTE *)v5 + 8))
    v6 = 0;
  else
    v6 = *v5;
  *a2 = v6;
  return result;
}

uint64_t key path setter for NCProtoGetAddressableContactsResponse.contactSortOrder : NCProtoGetAddressableContactsResponse(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t result;
  uint64_t v5;

  v3 = *a1;
  result = type metadata accessor for NCProtoGetAddressableContactsResponse(0);
  v5 = a2 + *(int *)(result + 24);
  *(_QWORD *)v5 = v3;
  *(_BYTE *)(v5 + 8) = 0;
  return result;
}

uint64_t NCProtoGetAddressableContactsResponse.contactSortOrder.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v4;

  result = type metadata accessor for NCProtoGetAddressableContactsResponse(0);
  v4 = v1 + *(int *)(result + 24);
  *(_QWORD *)v4 = a1;
  *(_BYTE *)(v4 + 8) = 0;
  return result;
}

uint64_t (*NCProtoGetAddressableContactsResponse.contactSortOrder.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;

  *(_QWORD *)(a1 + 8) = v1;
  v3 = *(int *)(type metadata accessor for NCProtoGetAddressableContactsResponse(0) + 24);
  *(_DWORD *)(a1 + 16) = v3;
  v4 = (uint64_t *)(v1 + v3);
  if (*((_BYTE *)v4 + 8))
    v5 = 0;
  else
    v5 = *v4;
  *(_QWORD *)a1 = v5;
  return NCProtoActiveConversation.remoteMemberCount.modify;
}

BOOL NCProtoGetAddressableContactsResponse.hasContactSortOrder.getter()
{
  uint64_t v0;

  return (*(_BYTE *)(v0 + *(int *)(type metadata accessor for NCProtoGetAddressableContactsResponse(0) + 24) + 8) & 1) == 0;
}

Swift::Void __swiftcall NCProtoGetAddressableContactsResponse.clearContactSortOrder()()
{
  uint64_t v0;
  uint64_t v1;

  v1 = v0 + *(int *)(type metadata accessor for NCProtoGetAddressableContactsResponse(0) + 24);
  *(_QWORD *)v1 = 0;
  *(_BYTE *)(v1 + 8) = 1;
}

uint64_t NCProtoGetAddressableContactsResponse.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return NCProtoActiveConversation.unknownFields.getter(type metadata accessor for NCProtoGetAddressableContactsResponse, a1);
}

uint64_t NCProtoGetAddressableContactsResponse.unknownFields.setter(uint64_t a1)
{
  return NCProtoActiveConversation.unknownFields.setter(a1, type metadata accessor for NCProtoGetAddressableContactsResponse);
}

uint64_t (*NCProtoGetAddressableContactsResponse.unknownFields.modify())()
{
  type metadata accessor for NCProtoGetAddressableContactsResponse(0);
  return NCProtoContactInfo.namePrefix.modify;
}

uint64_t NCProtoGetAddressableContactsResponse.init()@<X0>(_QWORD *a1@<X8>)
{
  uint64_t AddressableContactsResponse;
  uint64_t result;
  char *v4;

  *a1 = MEMORY[0x24BEE4AF8];
  AddressableContactsResponse = type metadata accessor for NCProtoGetAddressableContactsResponse(0);
  result = UnknownStorage.init()();
  v4 = (char *)a1 + *(int *)(AddressableContactsResponse + 24);
  *(_QWORD *)v4 = 0;
  v4[8] = 1;
  return result;
}

uint64_t (*NCProtoGetImageForContactRequest.contactIdentifier.modify())()
{
  return NCProtoContactInfo.namePrefix.modify;
}

uint64_t NCProtoGetImageForContactRequest.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return NCProtoActiveConversation.unknownFields.getter(type metadata accessor for NCProtoGetImageForContactRequest, a1);
}

uint64_t type metadata accessor for NCProtoGetImageForContactRequest(uint64_t a1)
{
  return type metadata accessor for NCProtoContactInfo(a1, (uint64_t *)&type metadata singleton initialization cache for NCProtoGetImageForContactRequest);
}

uint64_t NCProtoGetImageForContactRequest.unknownFields.setter(uint64_t a1)
{
  return NCProtoActiveConversation.unknownFields.setter(a1, type metadata accessor for NCProtoGetImageForContactRequest);
}

uint64_t (*NCProtoGetImageForContactRequest.unknownFields.modify())()
{
  type metadata accessor for NCProtoGetImageForContactRequest(0);
  return NCProtoContactInfo.namePrefix.modify;
}

uint64_t NCProtoGetImageForContactRequest.init()@<X0>(_QWORD *a1@<X8>)
{
  return NCProtoEndedSessionEvent.init()((void (*)(_QWORD))type metadata accessor for NCProtoGetImageForContactRequest, a1);
}

uint64_t NCProtoGetImageForContactResponse.imageData.getter()
{
  uint64_t v0;
  uint64_t *v1;
  unint64_t v2;
  uint64_t v3;

  v1 = (uint64_t *)(v0 + *(int *)(type metadata accessor for NCProtoGetImageForContactResponse(0) + 20));
  v2 = v1[1];
  if (v2 >> 60 == 15)
    v3 = 0;
  else
    v3 = *v1;
  outlined copy of Data?(*v1, v2);
  return v3;
}

uint64_t type metadata accessor for NCProtoGetImageForContactResponse(uint64_t a1)
{
  return type metadata accessor for NCProtoContactInfo(a1, (uint64_t *)&type metadata singleton initialization cache for NCProtoGetImageForContactResponse);
}

uint64_t key path getter for NCProtoGetImageForContactResponse.imageData : NCProtoGetImageForContactResponse@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t *v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;

  v3 = (uint64_t *)(a1 + *(int *)(type metadata accessor for NCProtoGetImageForContactResponse(0) + 20));
  v4 = *v3;
  v5 = v3[1];
  if (v5 >> 60 == 15)
    v6 = 0;
  else
    v6 = *v3;
  v7 = 0xC000000000000000;
  if (v5 >> 60 != 15)
    v7 = v5;
  *a2 = v6;
  a2[1] = v7;
  return outlined copy of Data?(v4, v5);
}

uint64_t key path setter for NCProtoGetImageForContactResponse.imageData : NCProtoGetImageForContactResponse(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t result;

  v2 = *a1;
  v3 = a1[1];
  v4 = (uint64_t *)(a2 + *(int *)(type metadata accessor for NCProtoGetImageForContactResponse(0) + 20));
  v5 = *v4;
  v6 = v4[1];
  outlined copy of Data._Representation(v2, v3);
  result = outlined consume of Data?(v5, v6);
  *v4 = v2;
  v4[1] = v3;
  return result;
}

uint64_t NCProtoGetImageForContactResponse.imageData.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t result;

  v5 = v2 + *(int *)(type metadata accessor for NCProtoGetImageForContactResponse(0) + 20);
  result = outlined consume of Data?(*(_QWORD *)v5, *(_QWORD *)(v5 + 8));
  *(_QWORD *)v5 = a1;
  *(_QWORD *)(v5 + 8) = a2;
  return result;
}

uint64_t (*NCProtoGetImageForContactResponse.imageData.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;

  *(_QWORD *)(a1 + 16) = v1;
  v3 = *(int *)(type metadata accessor for NCProtoGetImageForContactResponse(0) + 20);
  *(_DWORD *)(a1 + 24) = v3;
  v4 = (uint64_t *)(v1 + v3);
  v5 = *v4;
  v6 = v4[1];
  if (v6 >> 60 == 15)
    v7 = 0;
  else
    v7 = *v4;
  v8 = 0xC000000000000000;
  if (v6 >> 60 != 15)
    v8 = v6;
  *(_QWORD *)a1 = v7;
  *(_QWORD *)(a1 + 8) = v8;
  outlined copy of Data?(v5, v6);
  return NCProtoAddMemberRequest.associationVoucherData.modify;
}

BOOL NCProtoGetImageForContactResponse.hasImageData.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + *(int *)(type metadata accessor for NCProtoGetImageForContactResponse(0) + 20) + 8) >> 60 != 15;
}

Swift::Void __swiftcall NCProtoGetImageForContactResponse.clearImageData()()
{
  uint64_t v0;
  uint64_t v1;

  v1 = v0 + *(int *)(type metadata accessor for NCProtoGetImageForContactResponse(0) + 20);
  outlined consume of Data?(*(_QWORD *)v1, *(_QWORD *)(v1 + 8));
  *(_OWORD *)v1 = xmmword_242A30CC0;
}

uint64_t (*NCProtoGetImageForContactResponse.unknownFields.modify())()
{
  return NCProtoContactInfo.namePrefix.modify;
}

double NCProtoGetImageForContactResponse.init()@<D0>(uint64_t a1@<X8>)
{
  uint64_t ImageForContactResponse;
  double result;

  UnknownStorage.init()();
  ImageForContactResponse = type metadata accessor for NCProtoGetImageForContactResponse(0);
  result = 0.0;
  *(_OWORD *)(a1 + *(int *)(ImageForContactResponse + 20)) = xmmword_242A30CC0;
  return result;
}

uint64_t (*NCProtoAddConversationParticipantsRequest.handleValues.modify())()
{
  return NCProtoContactInfo.namePrefix.modify;
}

uint64_t NCProtoAddConversationParticipantsRequest.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return NCProtoActiveConversation.unknownFields.getter(type metadata accessor for NCProtoAddConversationParticipantsRequest, a1);
}

uint64_t type metadata accessor for NCProtoAddConversationParticipantsRequest(uint64_t a1)
{
  return type metadata accessor for NCProtoContactInfo(a1, (uint64_t *)&type metadata singleton initialization cache for NCProtoAddConversationParticipantsRequest);
}

uint64_t NCProtoAddConversationParticipantsRequest.unknownFields.setter(uint64_t a1)
{
  return NCProtoActiveConversation.unknownFields.setter(a1, type metadata accessor for NCProtoAddConversationParticipantsRequest);
}

uint64_t (*NCProtoAddConversationParticipantsRequest.unknownFields.modify())()
{
  type metadata accessor for NCProtoAddConversationParticipantsRequest(0);
  return NCProtoContactInfo.namePrefix.modify;
}

uint64_t NCProtoAddConversationParticipantsRequest.init()@<X0>(_QWORD *a1@<X8>)
{
  return NCProtoFavoritesDidChangeEvent.init()((void (*)(_QWORD))type metadata accessor for NCProtoAddConversationParticipantsRequest, a1);
}

uint64_t (*NCProtoAddConversationParticipantsResponse.unknownFields.modify())()
{
  return NCProtoContactInfo.namePrefix.modify;
}

uint64_t (*NCProtoGetCallDisplayDetailsRequest.callUuid.modify())()
{
  return NCProtoContactInfo.namePrefix.modify;
}

uint64_t NCProtoGetCallDisplayDetailsRequest.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return NCProtoActiveConversation.unknownFields.getter(type metadata accessor for NCProtoGetCallDisplayDetailsRequest, a1);
}

uint64_t type metadata accessor for NCProtoGetCallDisplayDetailsRequest(uint64_t a1)
{
  return type metadata accessor for NCProtoContactInfo(a1, (uint64_t *)&type metadata singleton initialization cache for NCProtoGetCallDisplayDetailsRequest);
}

uint64_t NCProtoGetCallDisplayDetailsRequest.unknownFields.setter(uint64_t a1)
{
  return NCProtoActiveConversation.unknownFields.setter(a1, type metadata accessor for NCProtoGetCallDisplayDetailsRequest);
}

uint64_t (*NCProtoGetCallDisplayDetailsRequest.unknownFields.modify())()
{
  type metadata accessor for NCProtoGetCallDisplayDetailsRequest(0);
  return NCProtoContactInfo.namePrefix.modify;
}

uint64_t NCProtoGetCallDisplayDetailsRequest.init()@<X0>(_QWORD *a1@<X8>)
{
  return NCProtoEndedSessionEvent.init()((void (*)(_QWORD))type metadata accessor for NCProtoGetCallDisplayDetailsRequest, a1);
}

uint64_t NCProtoGetCallDisplayDetailsResponse.callInfo.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  int *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v11;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NCProtoCallInfo?);
  MEMORY[0x24BDAC7A8]();
  v4 = (char *)&v11 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for NCProtoGetCallDisplayDetailsResponse(0);
  outlined init with copy of NCProtoContactInfo?(v1 + *(int *)(v5 + 20), (uint64_t)v4, &demangling cache variable for type metadata for NCProtoCallInfo?);
  v6 = (int *)type metadata accessor for NCProtoCallInfo(0);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(*((_QWORD *)v6 - 1) + 48))(v4, 1, v6) != 1)
    return outlined init with take of NCProtoContactInfo((uint64_t)v4, a1, type metadata accessor for NCProtoCallInfo);
  UnknownStorage.init()();
  v7 = (_QWORD *)(a1 + v6[5]);
  *v7 = 0;
  v7[1] = 0;
  v8 = (_QWORD *)(a1 + v6[6]);
  *v8 = 0;
  v8[1] = 0;
  v9 = (_QWORD *)(a1 + v6[7]);
  *v9 = 0;
  v9[1] = 0;
  return outlined destroy of NCProtoContactInfo?((uint64_t)v4, &demangling cache variable for type metadata for NCProtoCallInfo?);
}

uint64_t type metadata accessor for NCProtoGetCallDisplayDetailsResponse(uint64_t a1)
{
  return type metadata accessor for NCProtoContactInfo(a1, (uint64_t *)&type metadata singleton initialization cache for NCProtoGetCallDisplayDetailsResponse);
}

uint64_t key path getter for NCProtoGetCallDisplayDetailsResponse.callInfo : NCProtoGetCallDisplayDetailsResponse@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  char *v5;
  uint64_t v6;
  int *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v12;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NCProtoCallInfo?);
  MEMORY[0x24BDAC7A8]();
  v5 = (char *)&v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for NCProtoGetCallDisplayDetailsResponse(0);
  outlined init with copy of NCProtoContactInfo?(a1 + *(int *)(v6 + 20), (uint64_t)v5, &demangling cache variable for type metadata for NCProtoCallInfo?);
  v7 = (int *)type metadata accessor for NCProtoCallInfo(0);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(*((_QWORD *)v7 - 1) + 48))(v5, 1, v7) != 1)
    return outlined init with take of NCProtoContactInfo((uint64_t)v5, a2, type metadata accessor for NCProtoCallInfo);
  UnknownStorage.init()();
  v8 = (_QWORD *)(a2 + v7[5]);
  *v8 = 0;
  v8[1] = 0;
  v9 = (_QWORD *)(a2 + v7[6]);
  *v9 = 0;
  v9[1] = 0;
  v10 = (_QWORD *)(a2 + v7[7]);
  *v10 = 0;
  v10[1] = 0;
  return outlined destroy of NCProtoContactInfo?((uint64_t)v5, &demangling cache variable for type metadata for NCProtoCallInfo?);
}

uint64_t key path setter for NCProtoGetCallDisplayDetailsResponse.callInfo : NCProtoGetCallDisplayDetailsResponse(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for NCProtoSuggestionAdvertisementDidChangeEvent.advertisement : NCProtoSuggestionAdvertisementDidChangeEvent(a1, a2, a3, a4, type metadata accessor for NCProtoCallInfo, type metadata accessor for NCProtoGetCallDisplayDetailsResponse, &demangling cache variable for type metadata for NCProtoCallInfo?);
}

uint64_t NCProtoGetCallDisplayDetailsResponse.callInfo.setter(uint64_t a1)
{
  return NCProtoSuggestionAdvertisementDidChangeEvent.advertisement.setter(a1, type metadata accessor for NCProtoGetCallDisplayDetailsResponse, &demangling cache variable for type metadata for NCProtoCallInfo?, type metadata accessor for NCProtoCallInfo);
}

void (*NCProtoGetCallDisplayDetailsResponse.callInfo.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  int *v6;
  uint64_t v7;
  size_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char *v13;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NCProtoCallInfo?);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[1] = v5;
  v6 = (int *)type metadata accessor for NCProtoCallInfo(0);
  v3[2] = v6;
  v7 = *((_QWORD *)v6 - 1);
  v3[3] = v7;
  v8 = *(_QWORD *)(v7 + 64);
  v3[4] = malloc(v8);
  v9 = (char *)malloc(v8);
  v3[5] = v9;
  v10 = *(int *)(type metadata accessor for NCProtoGetCallDisplayDetailsResponse(0) + 20);
  *((_DWORD *)v3 + 12) = v10;
  outlined init with copy of NCProtoContactInfo?(v1 + v10, (uint64_t)v5, &demangling cache variable for type metadata for NCProtoCallInfo?);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v11 = &v9[v6[5]];
    *(_QWORD *)v11 = 0;
    *((_QWORD *)v11 + 1) = 0;
    v12 = &v9[v6[6]];
    *(_QWORD *)v12 = 0;
    *((_QWORD *)v12 + 1) = 0;
    v13 = &v9[v6[7]];
    *(_QWORD *)v13 = 0;
    *((_QWORD *)v13 + 1) = 0;
    outlined destroy of NCProtoContactInfo?((uint64_t)v5, &demangling cache variable for type metadata for NCProtoCallInfo?);
  }
  else
  {
    outlined init with take of NCProtoContactInfo((uint64_t)v5, (uint64_t)v9, type metadata accessor for NCProtoCallInfo);
  }
  return NCProtoGetCallDisplayDetailsResponse.callInfo.modify;
}

void NCProtoGetCallDisplayDetailsResponse.callInfo.modify(uint64_t a1, char a2)
{
  NCProtoContinuityFavorite.contactInfo.modify(a1, a2, &demangling cache variable for type metadata for NCProtoCallInfo?, type metadata accessor for NCProtoCallInfo);
}

BOOL NCProtoGetCallDisplayDetailsResponse.hasCallInfo.getter()
{
  return NCProtoSuggestionAdvertisementDidChangeEvent.hasAdvertisement.getter(&demangling cache variable for type metadata for NCProtoCallInfo?, type metadata accessor for NCProtoGetCallDisplayDetailsResponse, type metadata accessor for NCProtoCallInfo);
}

BOOL NCProtoSuggestionAdvertisementDidChangeEvent.hasAdvertisement.getter(uint64_t *a1, uint64_t (*a2)(_QWORD), uint64_t (*a3)(_QWORD))
{
  uint64_t v3;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  _BOOL8 v11;
  uint64_t v13;

  __swift_instantiateConcreteTypeFromMangledName(a1);
  MEMORY[0x24BDAC7A8]();
  v8 = (char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a2(0);
  outlined init with copy of NCProtoContactInfo?(v3 + *(int *)(v9 + 20), (uint64_t)v8, a1);
  v10 = a3(0);
  v11 = (*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 48))(v8, 1, v10) != 1;
  outlined destroy of NCProtoContactInfo?((uint64_t)v8, a1);
  return v11;
}

Swift::Void __swiftcall NCProtoGetCallDisplayDetailsResponse.clearCallInfo()()
{
  NCProtoSuggestionAdvertisementDidChangeEvent.clearAdvertisement()(type metadata accessor for NCProtoGetCallDisplayDetailsResponse, &demangling cache variable for type metadata for NCProtoCallInfo?, type metadata accessor for NCProtoCallInfo);
}

uint64_t NCProtoSuggestionAdvertisementDidChangeEvent.clearAdvertisement()(uint64_t (*a1)(_QWORD), uint64_t *a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;

  v6 = v3 + *(int *)(a1(0) + 20);
  outlined destroy of NCProtoContactInfo?(v6, a2);
  v7 = a3(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v6, 1, 1, v7);
}

uint64_t (*NCProtoGetCallDisplayDetailsResponse.unknownFields.modify())()
{
  return NCProtoContactInfo.namePrefix.modify;
}

uint64_t NCProtoGetCallDisplayDetailsResponse.init()@<X0>(uint64_t a1@<X8>)
{
  return NCProtoSuggestionAdvertisementDidChangeEvent.init()(type metadata accessor for NCProtoGetCallDisplayDetailsResponse, type metadata accessor for NCProtoCallInfo, a1);
}

uint64_t NCProtoSuggestionAdvertisementDidChangeEvent.init()@<X0>(uint64_t (*a1)(_QWORD)@<X0>, uint64_t (*a2)(_QWORD)@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;

  UnknownStorage.init()();
  v6 = a3 + *(int *)(a1(0) + 20);
  v7 = a2(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v6, 1, 1, v7);
}

uint64_t NCProtoCallState.isVideoEnabled.getter()
{
  uint64_t v0;

  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for NCProtoCallState(0) + 20)) & 1;
}

uint64_t key path getter for NCProtoCallState.isVideoEnabled : NCProtoCallState@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = type metadata accessor for NCProtoCallState(0);
  *a2 = *(_BYTE *)(a1 + *(int *)(result + 20)) & 1;
  return result;
}

uint64_t key path setter for NCProtoCallState.isVideoEnabled : NCProtoCallState(char *a1, uint64_t a2)
{
  char v3;
  uint64_t result;

  v3 = *a1;
  result = type metadata accessor for NCProtoCallState(0);
  *(_BYTE *)(a2 + *(int *)(result + 20)) = v3;
  return result;
}

uint64_t NCProtoCallState.isVideoEnabled.setter(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for NCProtoCallState(0);
  *(_BYTE *)(v1 + *(int *)(result + 20)) = a1;
  return result;
}

uint64_t (*NCProtoCallState.isVideoEnabled.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for NCProtoCallState(0) + 20);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(v1 + v3) & 1;
  *(_DWORD *)(a1 + 8) = v3;
  return NCProtoTransferActiveConversationRequest.isAudioEnabled.modify;
}

BOOL NCProtoCallState.hasIsVideoEnabled.getter()
{
  uint64_t v0;

  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for NCProtoCallState(0) + 20)) != 2;
}

Swift::Void __swiftcall NCProtoCallState.clearIsVideoEnabled()()
{
  uint64_t v0;

  *(_BYTE *)(v0 + *(int *)(type metadata accessor for NCProtoCallState(0) + 20)) = 2;
}

uint64_t NCProtoCallState.isAudioEnabled.getter()
{
  return NCProtoTransferActiveConversationRequest.isAudioEnabled.getter(type metadata accessor for NCProtoCallState);
}

uint64_t key path getter for NCProtoCallState.isAudioEnabled : NCProtoCallState@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  return key path getter for NCProtoTransferActiveConversationRequest.isAudioEnabled : NCProtoTransferActiveConversationRequest(a1, type metadata accessor for NCProtoCallState, a2);
}

uint64_t key path setter for NCProtoCallState.isAudioEnabled : NCProtoCallState(char *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for NCProtoTransferActiveConversationRequest.isAudioEnabled : NCProtoTransferActiveConversationRequest(a1, a2, a3, a4, type metadata accessor for NCProtoCallState);
}

uint64_t NCProtoCallState.isAudioEnabled.setter(char a1)
{
  return NCProtoTransferActiveConversationRequest.isAudioEnabled.setter(a1, type metadata accessor for NCProtoCallState);
}

uint64_t (*NCProtoCallState.isAudioEnabled.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for NCProtoCallState(0) + 24);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(v1 + v3) & 1;
  *(_DWORD *)(a1 + 8) = v3;
  return NCProtoTransferActiveConversationRequest.isAudioEnabled.modify;
}

BOOL NCProtoCallState.hasIsAudioEnabled.getter()
{
  uint64_t v0;

  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for NCProtoCallState(0) + 24)) != 2;
}

Swift::Void __swiftcall NCProtoCallState.clearIsAudioEnabled()()
{
  uint64_t v0;

  *(_BYTE *)(v0 + *(int *)(type metadata accessor for NCProtoCallState(0) + 24)) = 2;
}

uint64_t NCProtoCallState.avMode.getter@<X0>(uint64_t a1@<X8>)
{
  return NCProtoContinuityCall.status.getter(type metadata accessor for NCProtoCallState, a1);
}

uint64_t NCProtoContinuityCall.status.getter@<X0>(uint64_t (*a1)(_QWORD)@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t result;
  uint64_t *v5;
  uint64_t v6;
  char v7;
  char v8;

  result = a1(0);
  v5 = (uint64_t *)(v2 + *(int *)(result + 28));
  if ((*((_BYTE *)v5 + 9) & 1) != 0)
  {
    v6 = 0;
    v7 = 1;
  }
  else
  {
    v8 = *((_BYTE *)v5 + 8);
    v6 = *v5;
    v7 = v8 & 1;
  }
  *(_QWORD *)a2 = v6;
  *(_BYTE *)(a2 + 8) = v7;
  return result;
}

uint64_t key path getter for NCProtoCallState.avMode : NCProtoCallState@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return key path getter for NCProtoContinuityCall.status : NCProtoContinuityCall(a1, type metadata accessor for NCProtoCallState, a2);
}

uint64_t key path getter for NCProtoContinuityCall.status : NCProtoContinuityCall@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(_QWORD)@<X3>, uint64_t a3@<X8>)
{
  uint64_t result;
  uint64_t *v6;
  uint64_t v7;
  char v8;
  int v9;

  result = a2(0);
  v6 = (uint64_t *)(a1 + *(int *)(result + 28));
  v7 = *v6;
  v8 = *((_BYTE *)v6 + 8);
  v9 = *((unsigned __int8 *)v6 + 9);
  if (v9)
    v7 = 0;
  *(_QWORD *)a3 = v7;
  *(_BYTE *)(a3 + 8) = (v9 | v8) & 1;
  return result;
}

uint64_t key path setter for NCProtoCallState.avMode : NCProtoCallState(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for NCProtoContinuityCall.status : NCProtoContinuityCall(a1, a2, a3, a4, type metadata accessor for NCProtoCallState);
}

uint64_t key path setter for NCProtoContinuityCall.status : NCProtoContinuityCall(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(_QWORD))
{
  uint64_t v6;
  char v7;
  uint64_t result;
  uint64_t v9;

  v6 = *a1;
  v7 = *((_BYTE *)a1 + 8);
  result = a5(0);
  v9 = a2 + *(int *)(result + 28);
  *(_QWORD *)v9 = v6;
  *(_BYTE *)(v9 + 8) = v7;
  *(_BYTE *)(v9 + 9) = 0;
  return result;
}

uint64_t NCProtoCallState.avMode.setter(uint64_t *a1)
{
  return NCProtoContinuityCall.status.setter(a1, type metadata accessor for NCProtoCallState);
}

uint64_t NCProtoContinuityCall.status.setter(uint64_t *a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t result;
  uint64_t v6;

  v3 = *a1;
  v4 = *((_BYTE *)a1 + 8);
  result = a2(0);
  v6 = v2 + *(int *)(result + 28);
  *(_QWORD *)v6 = v3;
  *(_BYTE *)(v6 + 8) = v4;
  *(_BYTE *)(v6 + 9) = 0;
  return result;
}

uint64_t (*NCProtoCallState.avMode.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  char v6;
  char v7;

  *(_QWORD *)(a1 + 16) = v1;
  v3 = *(int *)(type metadata accessor for NCProtoCallState(0) + 28);
  *(_DWORD *)(a1 + 12) = v3;
  v4 = (uint64_t *)(v1 + v3);
  if ((*((_BYTE *)v4 + 9) & 1) != 0)
  {
    v5 = 0;
    v6 = 1;
  }
  else
  {
    v7 = *((_BYTE *)v4 + 8);
    v5 = *v4;
    v6 = v7 & 1;
  }
  *(_QWORD *)a1 = v5;
  *(_BYTE *)(a1 + 8) = v6;
  return NCProtoActiveConversation.avMode.modify;
}

BOOL NCProtoCallState.hasAvMode.getter()
{
  return NCProtoContinuityCall.hasStatus.getter(type metadata accessor for NCProtoCallState);
}

BOOL NCProtoContinuityCall.hasStatus.getter(uint64_t (*a1)(_QWORD))
{
  uint64_t v1;

  return (*(_BYTE *)(v1 + *(int *)(a1(0) + 28) + 9) & 1) == 0;
}

Swift::Void __swiftcall NCProtoCallState.clearAvMode()()
{
  NCProtoContinuityCall.clearStatus()(type metadata accessor for NCProtoCallState);
}

uint64_t NCProtoContinuityCall.clearStatus()(uint64_t (*a1)(_QWORD))
{
  uint64_t v1;
  uint64_t result;
  uint64_t v3;

  result = a1(0);
  v3 = v1 + *(int *)(result + 28);
  *(_QWORD *)v3 = 0;
  *(_WORD *)(v3 + 8) = 256;
  return result;
}

uint64_t NCProtoCallState.isCaptioningEnabled.getter()
{
  return NCProtoCallState.isCaptioningEnabled.getter(type metadata accessor for NCProtoCallState);
}

uint64_t key path getter for NCProtoCallState.isCaptioningEnabled : NCProtoCallState@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  return key path getter for NCProtoCallState.isCaptioningEnabled : NCProtoCallState(a1, type metadata accessor for NCProtoCallState, a2);
}

uint64_t key path setter for NCProtoCallState.isCaptioningEnabled : NCProtoCallState(char *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for NCProtoCallState.isCaptioningEnabled : NCProtoCallState(a1, a2, a3, a4, type metadata accessor for NCProtoCallState);
}

uint64_t NCProtoCallState.isCaptioningEnabled.setter(char a1)
{
  return NCProtoCallState.isCaptioningEnabled.setter(a1, type metadata accessor for NCProtoCallState);
}

uint64_t (*NCProtoCallState.isCaptioningEnabled.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for NCProtoCallState(0) + 32);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(v1 + v3) & 1;
  *(_DWORD *)(a1 + 8) = v3;
  return NCProtoTransferActiveConversationRequest.isAudioEnabled.modify;
}

BOOL NCProtoCallState.hasIsCaptioningEnabled.getter()
{
  uint64_t v0;

  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for NCProtoCallState(0) + 32)) != 2;
}

Swift::Void __swiftcall NCProtoCallState.clearIsCaptioningEnabled()()
{
  uint64_t v0;

  *(_BYTE *)(v0 + *(int *)(type metadata accessor for NCProtoCallState(0) + 32)) = 2;
}

uint64_t (*NCProtoCallState.unknownFields.modify())()
{
  return NCProtoContactInfo.namePrefix.modify;
}

uint64_t (*NCProtoCallStateRequest.identifierHash.modify())()
{
  return NCProtoContactInfo.namePrefix.modify;
}

uint64_t NCProtoCallStateRequest.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return NCProtoActiveConversation.unknownFields.getter(type metadata accessor for NCProtoCallStateRequest, a1);
}

uint64_t type metadata accessor for NCProtoCallStateRequest(uint64_t a1)
{
  return type metadata accessor for NCProtoContactInfo(a1, (uint64_t *)&type metadata singleton initialization cache for NCProtoCallStateRequest);
}

uint64_t NCProtoCallStateRequest.unknownFields.setter(uint64_t a1)
{
  return NCProtoActiveConversation.unknownFields.setter(a1, type metadata accessor for NCProtoCallStateRequest);
}

uint64_t (*NCProtoCallStateRequest.unknownFields.modify())()
{
  type metadata accessor for NCProtoCallStateRequest(0);
  return NCProtoContactInfo.namePrefix.modify;
}

uint64_t NCProtoCallStateRequest.init()@<X0>(_OWORD *a1@<X8>)
{
  *a1 = xmmword_242A30CB0;
  type metadata accessor for NCProtoCallStateRequest(0);
  return UnknownStorage.init()();
}

uint64_t NCProtoCallStateResponse.callState.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  int *v6;
  uint64_t v7;
  uint64_t v9;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NCProtoCallState?);
  MEMORY[0x24BDAC7A8]();
  v4 = (char *)&v9 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for NCProtoCallStateResponse(0);
  outlined init with copy of NCProtoContactInfo?(v1 + *(int *)(v5 + 20), (uint64_t)v4, &demangling cache variable for type metadata for NCProtoCallState?);
  v6 = (int *)type metadata accessor for NCProtoCallState(0);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(*((_QWORD *)v6 - 1) + 48))(v4, 1, v6) != 1)
    return outlined init with take of NCProtoContactInfo((uint64_t)v4, a1, type metadata accessor for NCProtoCallState);
  UnknownStorage.init()();
  *(_BYTE *)(a1 + v6[5]) = 2;
  *(_BYTE *)(a1 + v6[6]) = 2;
  v7 = a1 + v6[7];
  *(_QWORD *)v7 = 0;
  *(_WORD *)(v7 + 8) = 256;
  *(_BYTE *)(a1 + v6[8]) = 2;
  return outlined destroy of NCProtoContactInfo?((uint64_t)v4, &demangling cache variable for type metadata for NCProtoCallState?);
}

uint64_t type metadata accessor for NCProtoCallStateResponse(uint64_t a1)
{
  return type metadata accessor for NCProtoContactInfo(a1, (uint64_t *)&type metadata singleton initialization cache for NCProtoCallStateResponse);
}

uint64_t key path getter for NCProtoCallStateResponse.callState : NCProtoCallStateResponse@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  char *v5;
  uint64_t v6;
  int *v7;
  uint64_t v8;
  uint64_t v10;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NCProtoCallState?);
  MEMORY[0x24BDAC7A8]();
  v5 = (char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for NCProtoCallStateResponse(0);
  outlined init with copy of NCProtoContactInfo?(a1 + *(int *)(v6 + 20), (uint64_t)v5, &demangling cache variable for type metadata for NCProtoCallState?);
  v7 = (int *)type metadata accessor for NCProtoCallState(0);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(*((_QWORD *)v7 - 1) + 48))(v5, 1, v7) != 1)
    return outlined init with take of NCProtoContactInfo((uint64_t)v5, a2, type metadata accessor for NCProtoCallState);
  UnknownStorage.init()();
  *(_BYTE *)(a2 + v7[5]) = 2;
  *(_BYTE *)(a2 + v7[6]) = 2;
  v8 = a2 + v7[7];
  *(_QWORD *)v8 = 0;
  *(_WORD *)(v8 + 8) = 256;
  *(_BYTE *)(a2 + v7[8]) = 2;
  return outlined destroy of NCProtoContactInfo?((uint64_t)v5, &demangling cache variable for type metadata for NCProtoCallState?);
}

uint64_t key path setter for NCProtoCallStateResponse.callState : NCProtoCallStateResponse(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for NCProtoSuggestionAdvertisementDidChangeEvent.advertisement : NCProtoSuggestionAdvertisementDidChangeEvent(a1, a2, a3, a4, type metadata accessor for NCProtoCallState, type metadata accessor for NCProtoCallStateResponse, &demangling cache variable for type metadata for NCProtoCallState?);
}

uint64_t key path setter for NCProtoSuggestionAdvertisementDidChangeEvent.advertisement : NCProtoSuggestionAdvertisementDidChangeEvent(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(_QWORD), uint64_t (*a6)(_QWORD), uint64_t *a7)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v18;

  v12 = a5(0);
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x24BDAC7A8]();
  v15 = (char *)&v18 - v14;
  outlined init with copy of NCProtoContactInfo(a1, (uint64_t)&v18 - v14, a5);
  v16 = a2 + *(int *)(a6(0) + 20);
  outlined destroy of NCProtoContactInfo?(v16, a7);
  outlined init with take of NCProtoContactInfo((uint64_t)v15, v16, a5);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v13 + 56))(v16, 0, 1, v12);
}

uint64_t NCProtoCallStateResponse.callState.setter(uint64_t a1)
{
  return NCProtoSuggestionAdvertisementDidChangeEvent.advertisement.setter(a1, type metadata accessor for NCProtoCallStateResponse, &demangling cache variable for type metadata for NCProtoCallState?, type metadata accessor for NCProtoCallState);
}

uint64_t NCProtoSuggestionAdvertisementDidChangeEvent.advertisement.setter(uint64_t a1, uint64_t (*a2)(_QWORD), uint64_t *a3, uint64_t (*a4)(_QWORD))
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;

  v8 = v4 + *(int *)(a2(0) + 20);
  outlined destroy of NCProtoContactInfo?(v8, a3);
  outlined init with take of NCProtoContactInfo(a1, v8, a4);
  v9 = a4(0);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56))(v8, 0, 1, v9);
}

void (*NCProtoCallStateResponse.callState.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  int *v6;
  uint64_t v7;
  size_t v8;
  _BYTE *v9;
  uint64_t v10;
  char *v11;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NCProtoCallState?);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[1] = v5;
  v6 = (int *)type metadata accessor for NCProtoCallState(0);
  v3[2] = v6;
  v7 = *((_QWORD *)v6 - 1);
  v3[3] = v7;
  v8 = *(_QWORD *)(v7 + 64);
  v3[4] = malloc(v8);
  v9 = malloc(v8);
  v3[5] = v9;
  v10 = *(int *)(type metadata accessor for NCProtoCallStateResponse(0) + 20);
  *((_DWORD *)v3 + 12) = v10;
  outlined init with copy of NCProtoContactInfo?(v1 + v10, (uint64_t)v5, &demangling cache variable for type metadata for NCProtoCallState?);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v9[v6[5]] = 2;
    v9[v6[6]] = 2;
    v11 = &v9[v6[7]];
    *(_QWORD *)v11 = 0;
    *((_WORD *)v11 + 4) = 256;
    v9[v6[8]] = 2;
    outlined destroy of NCProtoContactInfo?((uint64_t)v5, &demangling cache variable for type metadata for NCProtoCallState?);
  }
  else
  {
    outlined init with take of NCProtoContactInfo((uint64_t)v5, (uint64_t)v9, type metadata accessor for NCProtoCallState);
  }
  return NCProtoLagunaConnectionRequest.callState.modify;
}

BOOL NCProtoCallStateResponse.hasCallState.getter()
{
  return NCProtoSuggestionAdvertisementDidChangeEvent.hasAdvertisement.getter(&demangling cache variable for type metadata for NCProtoCallState?, type metadata accessor for NCProtoCallStateResponse, type metadata accessor for NCProtoCallState);
}

Swift::Void __swiftcall NCProtoCallStateResponse.clearCallState()()
{
  NCProtoSuggestionAdvertisementDidChangeEvent.clearAdvertisement()(type metadata accessor for NCProtoCallStateResponse, &demangling cache variable for type metadata for NCProtoCallState?, type metadata accessor for NCProtoCallState);
}

uint64_t (*NCProtoCallStateResponse.unknownFields.modify())()
{
  return NCProtoContactInfo.namePrefix.modify;
}

uint64_t NCProtoCallStateResponse.init()@<X0>(uint64_t a1@<X8>)
{
  return NCProtoSuggestionAdvertisementDidChangeEvent.init()(type metadata accessor for NCProtoCallStateResponse, type metadata accessor for NCProtoCallState, a1);
}

uint64_t (*NCProtoDeviceTokenRequest.conversationIdentifier.modify())()
{
  return NCProtoContactInfo.namePrefix.modify;
}

uint64_t NCProtoDeviceTokenRequest.memberAssociationPrimaryInfo.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  int *v6;
  _QWORD *v7;
  char *v8;
  _QWORD *v9;
  uint64_t v11;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NCProtoMemberAssociationPrimaryInfo?);
  MEMORY[0x24BDAC7A8]();
  v4 = (char *)&v11 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for NCProtoDeviceTokenRequest(0);
  outlined init with copy of NCProtoContactInfo?(v1 + *(int *)(v5 + 24), (uint64_t)v4, &demangling cache variable for type metadata for NCProtoMemberAssociationPrimaryInfo?);
  v6 = (int *)type metadata accessor for NCProtoMemberAssociationPrimaryInfo(0);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(*((_QWORD *)v6 - 1) + 48))(v4, 1, v6) != 1)
    return outlined init with take of NCProtoContactInfo((uint64_t)v4, (uint64_t)a1, type metadata accessor for NCProtoMemberAssociationPrimaryInfo);
  *a1 = MEMORY[0x24BEE4AF8];
  UnknownStorage.init()();
  v7 = (_QWORD *)((char *)a1 + v6[6]);
  *v7 = 0;
  v7[1] = 0;
  *(_OWORD *)((char *)a1 + v6[7]) = xmmword_242A30CC0;
  v8 = (char *)a1 + v6[8];
  *(_QWORD *)v8 = 0;
  v8[8] = 1;
  v9 = (_QWORD *)((char *)a1 + v6[9]);
  *v9 = 0;
  v9[1] = 0;
  return outlined destroy of NCProtoContactInfo?((uint64_t)v4, &demangling cache variable for type metadata for NCProtoMemberAssociationPrimaryInfo?);
}

uint64_t type metadata accessor for NCProtoDeviceTokenRequest(uint64_t a1)
{
  return type metadata accessor for NCProtoContactInfo(a1, (uint64_t *)&type metadata singleton initialization cache for NCProtoDeviceTokenRequest);
}

uint64_t key path getter for NCProtoDeviceTokenRequest.memberAssociationPrimaryInfo : NCProtoDeviceTokenRequest@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  char *v5;
  uint64_t v6;
  int *v7;
  _QWORD *v8;
  char *v9;
  _QWORD *v10;
  uint64_t v12;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NCProtoMemberAssociationPrimaryInfo?);
  MEMORY[0x24BDAC7A8]();
  v5 = (char *)&v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for NCProtoDeviceTokenRequest(0);
  outlined init with copy of NCProtoContactInfo?(a1 + *(int *)(v6 + 24), (uint64_t)v5, &demangling cache variable for type metadata for NCProtoMemberAssociationPrimaryInfo?);
  v7 = (int *)type metadata accessor for NCProtoMemberAssociationPrimaryInfo(0);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(*((_QWORD *)v7 - 1) + 48))(v5, 1, v7) != 1)
    return outlined init with take of NCProtoContactInfo((uint64_t)v5, (uint64_t)a2, type metadata accessor for NCProtoMemberAssociationPrimaryInfo);
  *a2 = MEMORY[0x24BEE4AF8];
  UnknownStorage.init()();
  v8 = (_QWORD *)((char *)a2 + v7[6]);
  *v8 = 0;
  v8[1] = 0;
  *(_OWORD *)((char *)a2 + v7[7]) = xmmword_242A30CC0;
  v9 = (char *)a2 + v7[8];
  *(_QWORD *)v9 = 0;
  v9[8] = 1;
  v10 = (_QWORD *)((char *)a2 + v7[9]);
  *v10 = 0;
  v10[1] = 0;
  return outlined destroy of NCProtoContactInfo?((uint64_t)v5, &demangling cache variable for type metadata for NCProtoMemberAssociationPrimaryInfo?);
}

uint64_t key path setter for NCProtoDeviceTokenRequest.memberAssociationPrimaryInfo : NCProtoDeviceTokenRequest(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v10;

  v4 = type metadata accessor for NCProtoMemberAssociationPrimaryInfo(0);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8]();
  v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of NCProtoContactInfo(a1, (uint64_t)v7, type metadata accessor for NCProtoMemberAssociationPrimaryInfo);
  v8 = a2 + *(int *)(type metadata accessor for NCProtoDeviceTokenRequest(0) + 24);
  outlined destroy of NCProtoContactInfo?(v8, &demangling cache variable for type metadata for NCProtoMemberAssociationPrimaryInfo?);
  outlined init with take of NCProtoContactInfo((uint64_t)v7, v8, type metadata accessor for NCProtoMemberAssociationPrimaryInfo);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v5 + 56))(v8, 0, 1, v4);
}

uint64_t NCProtoDeviceTokenRequest.memberAssociationPrimaryInfo.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for NCProtoDeviceTokenRequest(0) + 24);
  outlined destroy of NCProtoContactInfo?(v3, &demangling cache variable for type metadata for NCProtoMemberAssociationPrimaryInfo?);
  outlined init with take of NCProtoContactInfo(a1, v3, type metadata accessor for NCProtoMemberAssociationPrimaryInfo);
  v4 = type metadata accessor for NCProtoMemberAssociationPrimaryInfo(0);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(v3, 0, 1, v4);
}

void (*NCProtoDeviceTokenRequest.memberAssociationPrimaryInfo.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  int *v6;
  uint64_t v7;
  size_t v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  char *v12;
  _QWORD *v13;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NCProtoMemberAssociationPrimaryInfo?);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[1] = v5;
  v6 = (int *)type metadata accessor for NCProtoMemberAssociationPrimaryInfo(0);
  v3[2] = v6;
  v7 = *((_QWORD *)v6 - 1);
  v3[3] = v7;
  v8 = *(_QWORD *)(v7 + 64);
  v3[4] = malloc(v8);
  v9 = malloc(v8);
  v3[5] = v9;
  v10 = *(int *)(type metadata accessor for NCProtoDeviceTokenRequest(0) + 24);
  *((_DWORD *)v3 + 12) = v10;
  outlined init with copy of NCProtoContactInfo?(v1 + v10, (uint64_t)v5, &demangling cache variable for type metadata for NCProtoMemberAssociationPrimaryInfo?);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    *v9 = MEMORY[0x24BEE4AF8];
    UnknownStorage.init()();
    v11 = (_QWORD *)((char *)v9 + v6[6]);
    *v11 = 0;
    v11[1] = 0;
    *(_OWORD *)((char *)v9 + v6[7]) = xmmword_242A30CC0;
    v12 = (char *)v9 + v6[8];
    *(_QWORD *)v12 = 0;
    v12[8] = 1;
    v13 = (_QWORD *)((char *)v9 + v6[9]);
    *v13 = 0;
    v13[1] = 0;
    outlined destroy of NCProtoContactInfo?((uint64_t)v5, &demangling cache variable for type metadata for NCProtoMemberAssociationPrimaryInfo?);
  }
  else
  {
    outlined init with take of NCProtoContactInfo((uint64_t)v5, (uint64_t)v9, type metadata accessor for NCProtoMemberAssociationPrimaryInfo);
  }
  return NCProtoStartedSessionEvent.memberAssociationPrimaryInfo.modify;
}

BOOL NCProtoDeviceTokenRequest.hasMemberAssociationPrimaryInfo.getter()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  _BOOL8 v5;
  uint64_t v7;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NCProtoMemberAssociationPrimaryInfo?);
  MEMORY[0x24BDAC7A8]();
  v2 = (char *)&v7 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for NCProtoDeviceTokenRequest(0);
  outlined init with copy of NCProtoContactInfo?(v0 + *(int *)(v3 + 24), (uint64_t)v2, &demangling cache variable for type metadata for NCProtoMemberAssociationPrimaryInfo?);
  v4 = type metadata accessor for NCProtoMemberAssociationPrimaryInfo(0);
  v5 = (*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(v2, 1, v4) != 1;
  outlined destroy of NCProtoContactInfo?((uint64_t)v2, &demangling cache variable for type metadata for NCProtoMemberAssociationPrimaryInfo?);
  return v5;
}

Swift::Void __swiftcall NCProtoDeviceTokenRequest.clearMemberAssociationPrimaryInfo()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0 + *(int *)(type metadata accessor for NCProtoDeviceTokenRequest(0) + 24);
  outlined destroy of NCProtoContactInfo?(v1, &demangling cache variable for type metadata for NCProtoMemberAssociationPrimaryInfo?);
  v2 = type metadata accessor for NCProtoMemberAssociationPrimaryInfo(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 56))(v1, 1, 1, v2);
}

uint64_t NCProtoDeviceTokenRequest.callState.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  int *v6;
  uint64_t v7;
  uint64_t v9;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NCProtoCallState?);
  MEMORY[0x24BDAC7A8]();
  v4 = (char *)&v9 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for NCProtoDeviceTokenRequest(0);
  outlined init with copy of NCProtoContactInfo?(v1 + *(int *)(v5 + 28), (uint64_t)v4, &demangling cache variable for type metadata for NCProtoCallState?);
  v6 = (int *)type metadata accessor for NCProtoCallState(0);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(*((_QWORD *)v6 - 1) + 48))(v4, 1, v6) != 1)
    return outlined init with take of NCProtoContactInfo((uint64_t)v4, a1, type metadata accessor for NCProtoCallState);
  UnknownStorage.init()();
  *(_BYTE *)(a1 + v6[5]) = 2;
  *(_BYTE *)(a1 + v6[6]) = 2;
  v7 = a1 + v6[7];
  *(_QWORD *)v7 = 0;
  *(_WORD *)(v7 + 8) = 256;
  *(_BYTE *)(a1 + v6[8]) = 2;
  return outlined destroy of NCProtoContactInfo?((uint64_t)v4, &demangling cache variable for type metadata for NCProtoCallState?);
}

uint64_t key path getter for NCProtoDeviceTokenRequest.callState : NCProtoDeviceTokenRequest@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  char *v5;
  uint64_t v6;
  int *v7;
  uint64_t v8;
  uint64_t v10;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NCProtoCallState?);
  MEMORY[0x24BDAC7A8]();
  v5 = (char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for NCProtoDeviceTokenRequest(0);
  outlined init with copy of NCProtoContactInfo?(a1 + *(int *)(v6 + 28), (uint64_t)v5, &demangling cache variable for type metadata for NCProtoCallState?);
  v7 = (int *)type metadata accessor for NCProtoCallState(0);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(*((_QWORD *)v7 - 1) + 48))(v5, 1, v7) != 1)
    return outlined init with take of NCProtoContactInfo((uint64_t)v5, a2, type metadata accessor for NCProtoCallState);
  UnknownStorage.init()();
  *(_BYTE *)(a2 + v7[5]) = 2;
  *(_BYTE *)(a2 + v7[6]) = 2;
  v8 = a2 + v7[7];
  *(_QWORD *)v8 = 0;
  *(_WORD *)(v8 + 8) = 256;
  *(_BYTE *)(a2 + v7[8]) = 2;
  return outlined destroy of NCProtoContactInfo?((uint64_t)v5, &demangling cache variable for type metadata for NCProtoCallState?);
}

uint64_t key path setter for NCProtoDeviceTokenRequest.callState : NCProtoDeviceTokenRequest(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for NCProtoAddressableContact.contactInfo : NCProtoAddressableContact(a1, a2, a3, a4, type metadata accessor for NCProtoCallState, type metadata accessor for NCProtoDeviceTokenRequest, &demangling cache variable for type metadata for NCProtoCallState?);
}

uint64_t key path setter for NCProtoAddressableContact.contactInfo : NCProtoAddressableContact(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(_QWORD), uint64_t (*a6)(_QWORD), uint64_t *a7)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v18;

  v12 = a5(0);
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x24BDAC7A8]();
  v15 = (char *)&v18 - v14;
  outlined init with copy of NCProtoContactInfo(a1, (uint64_t)&v18 - v14, a5);
  v16 = a2 + *(int *)(a6(0) + 28);
  outlined destroy of NCProtoContactInfo?(v16, a7);
  outlined init with take of NCProtoContactInfo((uint64_t)v15, v16, a5);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v13 + 56))(v16, 0, 1, v12);
}

uint64_t NCProtoDeviceTokenRequest.callState.setter(uint64_t a1)
{
  return NCProtoAddressableContact.contactInfo.setter(a1, type metadata accessor for NCProtoDeviceTokenRequest, &demangling cache variable for type metadata for NCProtoCallState?, type metadata accessor for NCProtoCallState);
}

uint64_t NCProtoAddressableContact.contactInfo.setter(uint64_t a1, uint64_t (*a2)(_QWORD), uint64_t *a3, uint64_t (*a4)(_QWORD))
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;

  v8 = v4 + *(int *)(a2(0) + 28);
  outlined destroy of NCProtoContactInfo?(v8, a3);
  outlined init with take of NCProtoContactInfo(a1, v8, a4);
  v9 = a4(0);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56))(v8, 0, 1, v9);
}

void (*NCProtoDeviceTokenRequest.callState.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  int *v6;
  uint64_t v7;
  size_t v8;
  _BYTE *v9;
  uint64_t v10;
  char *v11;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NCProtoCallState?);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[1] = v5;
  v6 = (int *)type metadata accessor for NCProtoCallState(0);
  v3[2] = v6;
  v7 = *((_QWORD *)v6 - 1);
  v3[3] = v7;
  v8 = *(_QWORD *)(v7 + 64);
  v3[4] = malloc(v8);
  v9 = malloc(v8);
  v3[5] = v9;
  v10 = *(int *)(type metadata accessor for NCProtoDeviceTokenRequest(0) + 28);
  *((_DWORD *)v3 + 12) = v10;
  outlined init with copy of NCProtoContactInfo?(v1 + v10, (uint64_t)v5, &demangling cache variable for type metadata for NCProtoCallState?);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v9[v6[5]] = 2;
    v9[v6[6]] = 2;
    v11 = &v9[v6[7]];
    *(_QWORD *)v11 = 0;
    *((_WORD *)v11 + 4) = 256;
    v9[v6[8]] = 2;
    outlined destroy of NCProtoContactInfo?((uint64_t)v5, &demangling cache variable for type metadata for NCProtoCallState?);
  }
  else
  {
    outlined init with take of NCProtoContactInfo((uint64_t)v5, (uint64_t)v9, type metadata accessor for NCProtoCallState);
  }
  return NCProtoLagunaConnectionRequest.callState.modify;
}

void NCProtoContinuityFavorite.contactInfo.modify(uint64_t a1, char a2, uint64_t *a3, uint64_t (*a4)(_QWORD))
{
  void *v6;
  uint64_t v7;
  void *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;

  v6 = *(void **)a1;
  v7 = *(int *)(*(_QWORD *)a1 + 48);
  v8 = *(void **)(*(_QWORD *)a1 + 32);
  v9 = *(void **)(*(_QWORD *)a1 + 40);
  v10 = *(_QWORD *)(*(_QWORD *)a1 + 16);
  v11 = *(_QWORD *)(*(_QWORD *)a1 + 24);
  v12 = *(void **)(*(_QWORD *)a1 + 8);
  v13 = **(_QWORD **)a1 + v7;
  if ((a2 & 1) != 0)
  {
    outlined init with copy of NCProtoContactInfo(*(_QWORD *)(*(_QWORD *)a1 + 40), (uint64_t)v8, a4);
    outlined destroy of NCProtoContactInfo?(v13, a3);
    outlined init with take of NCProtoContactInfo((uint64_t)v8, v13, a4);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v11 + 56))(v13, 0, 1, v10);
    outlined destroy of NCProtoContactInfo((uint64_t)v9, a4);
  }
  else
  {
    outlined destroy of NCProtoContactInfo?(**(_QWORD **)a1 + v7, a3);
    outlined init with take of NCProtoContactInfo((uint64_t)v9, v13, a4);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v11 + 56))(v13, 0, 1, v10);
  }
  free(v9);
  free(v8);
  free(v12);
  free(v6);
}

BOOL NCProtoDeviceTokenRequest.hasCallState.getter()
{
  return NCProtoAddressableContact.hasContactInfo.getter(&demangling cache variable for type metadata for NCProtoCallState?, type metadata accessor for NCProtoDeviceTokenRequest, type metadata accessor for NCProtoCallState);
}

Swift::Void __swiftcall NCProtoDeviceTokenRequest.clearCallState()()
{
  NCProtoAddressableContact.clearContactInfo()(type metadata accessor for NCProtoDeviceTokenRequest, &demangling cache variable for type metadata for NCProtoCallState?, type metadata accessor for NCProtoCallState);
}

uint64_t NCProtoDeviceTokenRequest.shouldLaunchFaceTime.getter()
{
  return NCProtoCallState.isCaptioningEnabled.getter(type metadata accessor for NCProtoDeviceTokenRequest);
}

uint64_t NCProtoCallState.isCaptioningEnabled.getter(uint64_t (*a1)(_QWORD))
{
  uint64_t v1;

  return *(_BYTE *)(v1 + *(int *)(a1(0) + 32)) & 1;
}

uint64_t key path getter for NCProtoDeviceTokenRequest.shouldLaunchFaceTime : NCProtoDeviceTokenRequest@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  return key path getter for NCProtoCallState.isCaptioningEnabled : NCProtoCallState(a1, type metadata accessor for NCProtoDeviceTokenRequest, a2);
}

uint64_t key path getter for NCProtoCallState.isCaptioningEnabled : NCProtoCallState@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(_QWORD)@<X3>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = a2(0);
  *a3 = *(_BYTE *)(a1 + *(int *)(result + 32)) & 1;
  return result;
}

uint64_t key path setter for NCProtoDeviceTokenRequest.shouldLaunchFaceTime : NCProtoDeviceTokenRequest(char *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for NCProtoCallState.isCaptioningEnabled : NCProtoCallState(a1, a2, a3, a4, type metadata accessor for NCProtoDeviceTokenRequest);
}

uint64_t key path setter for NCProtoCallState.isCaptioningEnabled : NCProtoCallState(char *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(_QWORD))
{
  char v6;
  uint64_t result;

  v6 = *a1;
  result = a5(0);
  *(_BYTE *)(a2 + *(int *)(result + 32)) = v6;
  return result;
}

uint64_t NCProtoDeviceTokenRequest.shouldLaunchFaceTime.setter(char a1)
{
  return NCProtoCallState.isCaptioningEnabled.setter(a1, type metadata accessor for NCProtoDeviceTokenRequest);
}

uint64_t NCProtoCallState.isCaptioningEnabled.setter(char a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v2;
  uint64_t result;

  result = a2(0);
  *(_BYTE *)(v2 + *(int *)(result + 32)) = a1;
  return result;
}

uint64_t (*NCProtoDeviceTokenRequest.shouldLaunchFaceTime.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for NCProtoDeviceTokenRequest(0) + 32);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(v1 + v3) & 1;
  *(_DWORD *)(a1 + 8) = v3;
  return NCProtoTransferActiveConversationRequest.isAudioEnabled.modify;
}

BOOL NCProtoDeviceTokenRequest.hasShouldLaunchFaceTime.getter()
{
  uint64_t v0;

  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for NCProtoDeviceTokenRequest(0) + 32)) != 2;
}

Swift::Void __swiftcall NCProtoDeviceTokenRequest.clearShouldLaunchFaceTime()()
{
  uint64_t v0;

  *(_BYTE *)(v0 + *(int *)(type metadata accessor for NCProtoDeviceTokenRequest(0) + 32)) = 2;
}

uint64_t NCProtoDeviceTokenRequest.conversationHandoffType.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t result;
  uint64_t *v4;
  uint64_t v5;
  char v6;
  char v7;

  result = type metadata accessor for NCProtoDeviceTokenRequest(0);
  v4 = (uint64_t *)(v1 + *(int *)(result + 36));
  if ((*((_BYTE *)v4 + 9) & 1) != 0)
  {
    v5 = 0;
    v6 = 1;
  }
  else
  {
    v7 = *((_BYTE *)v4 + 8);
    v5 = *v4;
    v6 = v7 & 1;
  }
  *(_QWORD *)a1 = v5;
  *(_BYTE *)(a1 + 8) = v6;
  return result;
}

uint64_t key path getter for NCProtoDeviceTokenRequest.conversationHandoffType : NCProtoDeviceTokenRequest@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  uint64_t *v5;
  uint64_t v6;
  char v7;
  int v8;

  result = type metadata accessor for NCProtoDeviceTokenRequest(0);
  v5 = (uint64_t *)(a1 + *(int *)(result + 36));
  v6 = *v5;
  v7 = *((_BYTE *)v5 + 8);
  v8 = *((unsigned __int8 *)v5 + 9);
  if (v8)
    v6 = 0;
  *(_QWORD *)a2 = v6;
  *(_BYTE *)(a2 + 8) = (v8 | v7) & 1;
  return result;
}

uint64_t key path setter for NCProtoDeviceTokenRequest.conversationHandoffType : NCProtoDeviceTokenRequest(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  char v4;
  uint64_t result;
  uint64_t v6;

  v3 = *a1;
  v4 = *((_BYTE *)a1 + 8);
  result = type metadata accessor for NCProtoDeviceTokenRequest(0);
  v6 = a2 + *(int *)(result + 36);
  *(_QWORD *)v6 = v3;
  *(_BYTE *)(v6 + 8) = v4;
  *(_BYTE *)(v6 + 9) = 0;
  return result;
}

uint64_t NCProtoDeviceTokenRequest.conversationHandoffType.setter(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  char v3;
  uint64_t result;
  uint64_t v5;

  v2 = *a1;
  v3 = *((_BYTE *)a1 + 8);
  result = type metadata accessor for NCProtoDeviceTokenRequest(0);
  v5 = v1 + *(int *)(result + 36);
  *(_QWORD *)v5 = v2;
  *(_BYTE *)(v5 + 8) = v3;
  *(_BYTE *)(v5 + 9) = 0;
  return result;
}

uint64_t (*NCProtoDeviceTokenRequest.conversationHandoffType.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  char v6;
  char v7;

  *(_QWORD *)(a1 + 16) = v1;
  v3 = *(int *)(type metadata accessor for NCProtoDeviceTokenRequest(0) + 36);
  *(_DWORD *)(a1 + 12) = v3;
  v4 = (uint64_t *)(v1 + v3);
  if ((*((_BYTE *)v4 + 9) & 1) != 0)
  {
    v5 = 0;
    v6 = 1;
  }
  else
  {
    v7 = *((_BYTE *)v4 + 8);
    v5 = *v4;
    v6 = v7 & 1;
  }
  *(_QWORD *)a1 = v5;
  *(_BYTE *)(a1 + 8) = v6;
  return NCProtoActiveConversation.avMode.modify;
}

BOOL NCProtoDeviceTokenRequest.hasConversationHandoffType.getter()
{
  uint64_t v0;

  return (*(_BYTE *)(v0 + *(int *)(type metadata accessor for NCProtoDeviceTokenRequest(0) + 36) + 9) & 1) == 0;
}

Swift::Void __swiftcall NCProtoDeviceTokenRequest.clearConversationHandoffType()()
{
  uint64_t v0;
  uint64_t v1;

  v1 = v0 + *(int *)(type metadata accessor for NCProtoDeviceTokenRequest(0) + 36);
  *(_QWORD *)v1 = 0;
  *(_WORD *)(v1 + 8) = 256;
}

uint64_t NCProtoDeviceTokenRequest.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return NCProtoActiveConversation.unknownFields.getter(type metadata accessor for NCProtoDeviceTokenRequest, a1);
}

uint64_t NCProtoDeviceTokenRequest.unknownFields.setter(uint64_t a1)
{
  return NCProtoActiveConversation.unknownFields.setter(a1, type metadata accessor for NCProtoDeviceTokenRequest);
}

uint64_t (*NCProtoDeviceTokenRequest.unknownFields.modify())()
{
  type metadata accessor for NCProtoDeviceTokenRequest(0);
  return NCProtoContactInfo.namePrefix.modify;
}

unint64_t NCProtoDeviceTokenRequest.ConversationHandoffType.init(rawValue:)@<X0>(unint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = result;
  *(_BYTE *)(a2 + 8) = result < 5;
  *(_BYTE *)(a2 + 9) = 0;
  return result;
}

unint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance NCProtoDeviceTokenRequest.ConversationHandoffType@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  return NCProtoDeviceTokenRequest.ConversationHandoffType.init(rawValue:)(*a1, a2);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance NCProtoDeviceTokenRequest.ConversationHandoffType()
{
  lazy protocol witness table accessor for type NCProtoDeviceTokenRequest.ConversationHandoffType and conformance NCProtoDeviceTokenRequest.ConversationHandoffType();
  return Enum.hash(into:)();
}

uint64_t NCProtoDeviceTokenRequest.init()@<X0>(_QWORD *a1@<X8>)
{
  int *v2;
  char *v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t result;
  char *v8;

  *a1 = 0;
  a1[1] = 0xE000000000000000;
  v2 = (int *)type metadata accessor for NCProtoDeviceTokenRequest(0);
  UnknownStorage.init()();
  v3 = (char *)a1 + v2[6];
  v4 = type metadata accessor for NCProtoMemberAssociationPrimaryInfo(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(v3, 1, 1, v4);
  v5 = (char *)a1 + v2[7];
  v6 = type metadata accessor for NCProtoCallState(0);
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(v5, 1, 1, v6);
  *((_BYTE *)a1 + v2[8]) = 2;
  v8 = (char *)a1 + v2[9];
  *(_QWORD *)v8 = 0;
  *((_WORD *)v8 + 4) = 256;
  return result;
}

uint64_t static NCProtoDeviceTokenRequest.ConversationHandoffType.allCases.getter()
{
  return static NCProtoConversationAVMode.allCases.getter(&one-time initialization token for allCases);
}

uint64_t static NCProtoDeviceTokenRequest.ConversationHandoffType.allCases.setter(uint64_t a1)
{
  return static NCProtoConversationAVMode.allCases.setter(a1, &one-time initialization token for allCases, &static NCProtoDeviceTokenRequest.ConversationHandoffType.allCases);
}

uint64_t (*static NCProtoDeviceTokenRequest.ConversationHandoffType.allCases.modify())()
{
  if (one-time initialization token for allCases != -1)
    swift_once();
  swift_beginAccess();
  return static NCProtoConversationAVMode.allCases.modify;
}

uint64_t protocol witness for static CaseIterable.allCases.getter in conformance NCProtoDeviceTokenRequest.ConversationHandoffType@<X0>(_QWORD *a1@<X8>)
{
  return protocol witness for static CaseIterable.allCases.getter in conformance NCProtoConversationAVMode(&one-time initialization token for allCases, &static NCProtoDeviceTokenRequest.ConversationHandoffType.allCases, a1);
}

uint64_t (*NCProtoDeviceTokenResponse.deviceToken.modify())()
{
  return NCProtoContactInfo.namePrefix.modify;
}

uint64_t NCProtoDeviceTokenResponse.associationVoucherData.getter()
{
  uint64_t v0;
  uint64_t *v1;
  unint64_t v2;
  uint64_t v3;

  v1 = (uint64_t *)(v0 + *(int *)(type metadata accessor for NCProtoDeviceTokenResponse(0) + 24));
  v2 = v1[1];
  if (v2 >> 60 == 15)
    v3 = 0;
  else
    v3 = *v1;
  outlined copy of Data?(*v1, v2);
  return v3;
}

uint64_t type metadata accessor for NCProtoDeviceTokenResponse(uint64_t a1)
{
  return type metadata accessor for NCProtoContactInfo(a1, (uint64_t *)&type metadata singleton initialization cache for NCProtoDeviceTokenResponse);
}

uint64_t key path getter for NCProtoDeviceTokenResponse.associationVoucherData : NCProtoDeviceTokenResponse@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t *v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;

  v3 = (uint64_t *)(a1 + *(int *)(type metadata accessor for NCProtoDeviceTokenResponse(0) + 24));
  v4 = *v3;
  v5 = v3[1];
  if (v5 >> 60 == 15)
    v6 = 0;
  else
    v6 = *v3;
  v7 = 0xC000000000000000;
  if (v5 >> 60 != 15)
    v7 = v5;
  *a2 = v6;
  a2[1] = v7;
  return outlined copy of Data?(v4, v5);
}

uint64_t key path setter for NCProtoDeviceTokenResponse.associationVoucherData : NCProtoDeviceTokenResponse(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t result;

  v2 = *a1;
  v3 = a1[1];
  v4 = (uint64_t *)(a2 + *(int *)(type metadata accessor for NCProtoDeviceTokenResponse(0) + 24));
  v5 = *v4;
  v6 = v4[1];
  outlined copy of Data._Representation(v2, v3);
  result = outlined consume of Data?(v5, v6);
  *v4 = v2;
  v4[1] = v3;
  return result;
}

uint64_t NCProtoDeviceTokenResponse.associationVoucherData.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t result;

  v5 = v2 + *(int *)(type metadata accessor for NCProtoDeviceTokenResponse(0) + 24);
  result = outlined consume of Data?(*(_QWORD *)v5, *(_QWORD *)(v5 + 8));
  *(_QWORD *)v5 = a1;
  *(_QWORD *)(v5 + 8) = a2;
  return result;
}

uint64_t (*NCProtoDeviceTokenResponse.associationVoucherData.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;

  *(_QWORD *)(a1 + 16) = v1;
  v3 = *(int *)(type metadata accessor for NCProtoDeviceTokenResponse(0) + 24);
  *(_DWORD *)(a1 + 24) = v3;
  v4 = (uint64_t *)(v1 + v3);
  v5 = *v4;
  v6 = v4[1];
  if (v6 >> 60 == 15)
    v7 = 0;
  else
    v7 = *v4;
  v8 = 0xC000000000000000;
  if (v6 >> 60 != 15)
    v8 = v6;
  *(_QWORD *)a1 = v7;
  *(_QWORD *)(a1 + 8) = v8;
  outlined copy of Data?(v5, v6);
  return NCProtoAddMemberRequest.associationVoucherData.modify;
}

BOOL NCProtoDeviceTokenResponse.hasAssociationVoucherData.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + *(int *)(type metadata accessor for NCProtoDeviceTokenResponse(0) + 24) + 8) >> 60 != 15;
}

Swift::Void __swiftcall NCProtoDeviceTokenResponse.clearAssociationVoucherData()()
{
  uint64_t v0;
  uint64_t v1;

  v1 = v0 + *(int *)(type metadata accessor for NCProtoDeviceTokenResponse(0) + 24);
  outlined consume of Data?(*(_QWORD *)v1, *(_QWORD *)(v1 + 8));
  *(_OWORD *)v1 = xmmword_242A30CC0;
}

uint64_t NCProtoDeviceTokenResponse.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return NCProtoActiveConversation.unknownFields.getter(type metadata accessor for NCProtoDeviceTokenResponse, a1);
}

uint64_t NCProtoDeviceTokenResponse.unknownFields.setter(uint64_t a1)
{
  return NCProtoActiveConversation.unknownFields.setter(a1, type metadata accessor for NCProtoDeviceTokenResponse);
}

uint64_t (*NCProtoDeviceTokenResponse.unknownFields.modify())()
{
  type metadata accessor for NCProtoDeviceTokenResponse(0);
  return NCProtoContactInfo.namePrefix.modify;
}

double NCProtoDeviceTokenResponse.init()@<D0>(_QWORD *a1@<X8>)
{
  uint64_t v2;
  double result;

  *a1 = 0;
  a1[1] = 0xE000000000000000;
  v2 = type metadata accessor for NCProtoDeviceTokenResponse(0);
  UnknownStorage.init()();
  result = 0.0;
  *(_OWORD *)((char *)a1 + *(int *)(v2 + 24)) = xmmword_242A30CC0;
  return result;
}

uint64_t (*NCProtoDisconnectRequest.identifierHash.modify())()
{
  return NCProtoContactInfo.namePrefix.modify;
}

uint64_t NCProtoDisconnectRequest.isPullingBackToPhone.getter()
{
  return NCProtoTransferActiveConversationRequest.isAudioEnabled.getter(type metadata accessor for NCProtoDisconnectRequest);
}

uint64_t type metadata accessor for NCProtoDisconnectRequest(uint64_t a1)
{
  return type metadata accessor for NCProtoContactInfo(a1, (uint64_t *)&type metadata singleton initialization cache for NCProtoDisconnectRequest);
}

uint64_t key path getter for NCProtoDisconnectRequest.isPullingBackToPhone : NCProtoDisconnectRequest@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  return key path getter for NCProtoTransferActiveConversationRequest.isAudioEnabled : NCProtoTransferActiveConversationRequest(a1, type metadata accessor for NCProtoDisconnectRequest, a2);
}

uint64_t key path setter for NCProtoDisconnectRequest.isPullingBackToPhone : NCProtoDisconnectRequest(char *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for NCProtoTransferActiveConversationRequest.isAudioEnabled : NCProtoTransferActiveConversationRequest(a1, a2, a3, a4, type metadata accessor for NCProtoDisconnectRequest);
}

uint64_t NCProtoDisconnectRequest.isPullingBackToPhone.setter(char a1)
{
  return NCProtoTransferActiveConversationRequest.isAudioEnabled.setter(a1, type metadata accessor for NCProtoDisconnectRequest);
}

uint64_t (*NCProtoDisconnectRequest.isPullingBackToPhone.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for NCProtoDisconnectRequest(0) + 24);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(v1 + v3) & 1;
  *(_DWORD *)(a1 + 8) = v3;
  return NCProtoTransferActiveConversationRequest.isAudioEnabled.modify;
}

uint64_t NCProtoTransferActiveConversationRequest.isAudioEnabled.modify(uint64_t result)
{
  *(_BYTE *)(*(_QWORD *)result + *(int *)(result + 8)) = *(_BYTE *)(result + 12);
  return result;
}

BOOL NCProtoDisconnectRequest.hasIsPullingBackToPhone.getter()
{
  uint64_t v0;

  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for NCProtoDisconnectRequest(0) + 24)) != 2;
}

Swift::Void __swiftcall NCProtoDisconnectRequest.clearIsPullingBackToPhone()()
{
  uint64_t v0;

  *(_BYTE *)(v0 + *(int *)(type metadata accessor for NCProtoDisconnectRequest(0) + 24)) = 2;
}

uint64_t NCProtoDisconnectRequest.disconnectReason.getter@<X0>(uint64_t a1@<X8>)
{
  return NCProtoContinuityCall.status.getter(type metadata accessor for NCProtoDisconnectRequest, a1);
}

uint64_t key path getter for NCProtoDisconnectRequest.disconnectReason : NCProtoDisconnectRequest@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return key path getter for NCProtoContinuityCall.status : NCProtoContinuityCall(a1, type metadata accessor for NCProtoDisconnectRequest, a2);
}

uint64_t key path setter for NCProtoDisconnectRequest.disconnectReason : NCProtoDisconnectRequest(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for NCProtoContinuityCall.status : NCProtoContinuityCall(a1, a2, a3, a4, type metadata accessor for NCProtoDisconnectRequest);
}

uint64_t NCProtoDisconnectRequest.disconnectReason.setter(uint64_t *a1)
{
  return NCProtoContinuityCall.status.setter(a1, type metadata accessor for NCProtoDisconnectRequest);
}

uint64_t (*NCProtoDisconnectRequest.disconnectReason.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  char v6;
  char v7;

  *(_QWORD *)(a1 + 16) = v1;
  v3 = *(int *)(type metadata accessor for NCProtoDisconnectRequest(0) + 28);
  *(_DWORD *)(a1 + 12) = v3;
  v4 = (uint64_t *)(v1 + v3);
  if ((*((_BYTE *)v4 + 9) & 1) != 0)
  {
    v5 = 0;
    v6 = 1;
  }
  else
  {
    v7 = *((_BYTE *)v4 + 8);
    v5 = *v4;
    v6 = v7 & 1;
  }
  *(_QWORD *)a1 = v5;
  *(_BYTE *)(a1 + 8) = v6;
  return NCProtoActiveConversation.avMode.modify;
}

uint64_t NCProtoActiveConversation.avMode.modify(uint64_t result)
{
  uint64_t v1;
  unsigned __int8 v2;

  v1 = *(_QWORD *)(result + 16) + *(int *)(result + 12);
  v2 = *(_BYTE *)(result + 8);
  *(_QWORD *)v1 = *(_QWORD *)result;
  *(_WORD *)(v1 + 8) = v2;
  return result;
}

BOOL NCProtoDisconnectRequest.hasDisconnectReason.getter()
{
  return NCProtoContinuityCall.hasStatus.getter(type metadata accessor for NCProtoDisconnectRequest);
}

Swift::Void __swiftcall NCProtoDisconnectRequest.clearDisconnectReason()()
{
  NCProtoContinuityCall.clearStatus()(type metadata accessor for NCProtoDisconnectRequest);
}

uint64_t NCProtoDisconnectRequest.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return NCProtoActiveConversation.unknownFields.getter(type metadata accessor for NCProtoDisconnectRequest, a1);
}

uint64_t NCProtoDisconnectRequest.unknownFields.setter(uint64_t a1)
{
  return NCProtoActiveConversation.unknownFields.setter(a1, type metadata accessor for NCProtoDisconnectRequest);
}

uint64_t (*NCProtoDisconnectRequest.unknownFields.modify())()
{
  type metadata accessor for NCProtoDisconnectRequest(0);
  return NCProtoContactInfo.namePrefix.modify;
}

unint64_t NCProtoDisconnectRequest.DisconnectReason.init(rawValue:)@<X0>(unint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = result;
  *(_BYTE *)(a2 + 8) = result < 4;
  *(_BYTE *)(a2 + 9) = 0;
  return result;
}

unint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance NCProtoDisconnectRequest.DisconnectReason@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  return NCProtoDisconnectRequest.DisconnectReason.init(rawValue:)(*a1, a2);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance NCProtoDisconnectRequest.DisconnectReason()
{
  lazy protocol witness table accessor for type NCProtoDisconnectRequest.DisconnectReason and conformance NCProtoDisconnectRequest.DisconnectReason();
  return Enum.hash(into:)();
}

uint64_t NCProtoDisconnectRequest.init()@<X0>(_OWORD *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;
  char *v4;

  *a1 = xmmword_242A30CB0;
  v2 = type metadata accessor for NCProtoDisconnectRequest(0);
  result = UnknownStorage.init()();
  *((_BYTE *)a1 + *(int *)(v2 + 24)) = 2;
  v4 = (char *)a1 + *(int *)(v2 + 28);
  *(_QWORD *)v4 = 0;
  *((_WORD *)v4 + 4) = 256;
  return result;
}

uint64_t static NCProtoDisconnectRequest.DisconnectReason.allCases.getter()
{
  return static NCProtoConversationAVMode.allCases.getter(&one-time initialization token for allCases);
}

uint64_t static NCProtoDisconnectRequest.DisconnectReason.allCases.setter(uint64_t a1)
{
  return static NCProtoConversationAVMode.allCases.setter(a1, &one-time initialization token for allCases, &static NCProtoDisconnectRequest.DisconnectReason.allCases);
}

uint64_t (*static NCProtoDisconnectRequest.DisconnectReason.allCases.modify())()
{
  if (one-time initialization token for allCases != -1)
    swift_once();
  swift_beginAccess();
  return static NCProtoConversationAVMode.allCases.modify;
}

uint64_t protocol witness for static CaseIterable.allCases.getter in conformance NCProtoDisconnectRequest.DisconnectReason@<X0>(_QWORD *a1@<X8>)
{
  return protocol witness for static CaseIterable.allCases.getter in conformance NCProtoConversationAVMode(&one-time initialization token for allCases, &static NCProtoDisconnectRequest.DisconnectReason.allCases, a1);
}

uint64_t NCProtoDisconnectResponse.success.getter()
{
  unsigned __int8 *v0;

  return *v0;
}

uint64_t NCProtoDisconnectResponse.success.setter(uint64_t result)
{
  _BYTE *v1;

  *v1 = result;
  return result;
}

uint64_t (*NCProtoDisconnectResponse.success.modify())()
{
  return NCProtoContactInfo.namePrefix.modify;
}

uint64_t NCProtoDisconnectResponse.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return NCProtoActiveConversation.unknownFields.getter(type metadata accessor for NCProtoDisconnectResponse, a1);
}

uint64_t type metadata accessor for NCProtoDisconnectResponse(uint64_t a1)
{
  return type metadata accessor for NCProtoContactInfo(a1, (uint64_t *)&type metadata singleton initialization cache for NCProtoDisconnectResponse);
}

uint64_t NCProtoDisconnectResponse.unknownFields.setter(uint64_t a1)
{
  return NCProtoActiveConversation.unknownFields.setter(a1, type metadata accessor for NCProtoDisconnectResponse);
}

uint64_t (*NCProtoDisconnectResponse.unknownFields.modify())()
{
  type metadata accessor for NCProtoDisconnectResponse(0);
  return NCProtoContactInfo.namePrefix.modify;
}

uint64_t NCProtoDisconnectResponse.init()@<X0>(_BYTE *a1@<X8>)
{
  *a1 = 0;
  type metadata accessor for NCProtoDisconnectResponse(0);
  return UnknownStorage.init()();
}

uint64_t NCProtoPrepareTransferRequest.activeConversationUuidString.getter()
{
  return NCProtoContinuityCall.uuidString.getter(type metadata accessor for NCProtoPrepareTransferRequest);
}

uint64_t type metadata accessor for NCProtoPrepareTransferRequest(uint64_t a1)
{
  return type metadata accessor for NCProtoContactInfo(a1, (uint64_t *)&type metadata singleton initialization cache for NCProtoPrepareTransferRequest);
}

uint64_t key path getter for NCProtoPrepareTransferRequest.activeConversationUuidString : NCProtoPrepareTransferRequest@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  return key path getter for NCProtoContinuityCall.uuidString : NCProtoContinuityCall(a1, type metadata accessor for NCProtoPrepareTransferRequest, a2);
}

uint64_t key path setter for NCProtoPrepareTransferRequest.activeConversationUuidString : NCProtoPrepareTransferRequest(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for NCProtoContinuityCall.uuidString : NCProtoContinuityCall(a1, a2, a3, a4, type metadata accessor for NCProtoPrepareTransferRequest);
}

uint64_t NCProtoPrepareTransferRequest.activeConversationUuidString.setter(uint64_t a1, uint64_t a2)
{
  return NCProtoContinuityCall.uuidString.setter(a1, a2, type metadata accessor for NCProtoPrepareTransferRequest);
}

uint64_t (*NCProtoPrepareTransferRequest.activeConversationUuidString.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  uint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;

  *(_QWORD *)(a1 + 16) = v1;
  v3 = *(int *)(type metadata accessor for NCProtoPrepareTransferRequest(0) + 20);
  *(_DWORD *)(a1 + 24) = v3;
  v4 = (uint64_t *)(v1 + v3);
  v5 = v4[1];
  if (v5)
  {
    v6 = *v4;
    v7 = v5;
  }
  else
  {
    v6 = 0;
    v7 = 0xE000000000000000;
  }
  *(_QWORD *)a1 = v6;
  *(_QWORD *)(a1 + 8) = v7;
  swift_bridgeObjectRetain();
  return NCProtoContactInfo.organizationName.modify;
}

BOOL NCProtoPrepareTransferRequest.hasActiveConversationUuidString.getter()
{
  return NCProtoContinuityCall.hasUuidString.getter(type metadata accessor for NCProtoPrepareTransferRequest);
}

Swift::Void __swiftcall NCProtoPrepareTransferRequest.clearActiveConversationUuidString()()
{
  NCProtoContinuityCall.clearUuidString()(type metadata accessor for NCProtoPrepareTransferRequest);
}

uint64_t (*NCProtoPrepareTransferRequest.unknownFields.modify())()
{
  return NCProtoContactInfo.namePrefix.modify;
}

uint64_t NCProtoPrepareTransferRequest.init()@<X0>(uint64_t a1@<X8>)
{
  return NCProtoDeclineContinuityCallRequest.init()(type metadata accessor for NCProtoPrepareTransferRequest, a1);
}

uint64_t NCProtoDeclineContinuityCallRequest.init()@<X0>(uint64_t (*a1)(_QWORD)@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  _QWORD *v5;

  UnknownStorage.init()();
  result = a1(0);
  v5 = (_QWORD *)(a2 + *(int *)(result + 20));
  *v5 = 0;
  v5[1] = 0;
  return result;
}

uint64_t NCProtoContinuityCall.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(a1, v1, v3);
}

uint64_t NCProtoContinuityCall.unknownFields.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 40))(v1, a1, v3);
}

uint64_t (*NCProtoPrepareTransferResponse.unknownFields.modify())()
{
  return NCProtoContactInfo.namePrefix.modify;
}

uint64_t NCProtoMemberAssociationPrimaryInfo.conversationGroupUuidString.getter()
{
  return NCProtoActiveConversation.uuidString.getter(type metadata accessor for NCProtoMemberAssociationPrimaryInfo);
}

uint64_t key path getter for NCProtoMemberAssociationPrimaryInfo.conversationGroupUuidString : NCProtoMemberAssociationPrimaryInfo@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  return key path getter for NCProtoActiveConversation.uuidString : NCProtoActiveConversation(a1, type metadata accessor for NCProtoMemberAssociationPrimaryInfo, a2);
}

uint64_t key path setter for NCProtoMemberAssociationPrimaryInfo.conversationGroupUuidString : NCProtoMemberAssociationPrimaryInfo(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for NCProtoActiveConversation.uuidString : NCProtoActiveConversation(a1, a2, a3, a4, type metadata accessor for NCProtoMemberAssociationPrimaryInfo);
}

uint64_t NCProtoMemberAssociationPrimaryInfo.conversationGroupUuidString.setter(uint64_t a1, uint64_t a2)
{
  return NCProtoActiveConversation.uuidString.setter(a1, a2, type metadata accessor for NCProtoMemberAssociationPrimaryInfo);
}

uint64_t (*NCProtoMemberAssociationPrimaryInfo.conversationGroupUuidString.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  uint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;

  *(_QWORD *)(a1 + 16) = v1;
  v3 = *(int *)(type metadata accessor for NCProtoMemberAssociationPrimaryInfo(0) + 24);
  *(_DWORD *)(a1 + 24) = v3;
  v4 = (uint64_t *)(v1 + v3);
  v5 = v4[1];
  if (v5)
  {
    v6 = *v4;
    v7 = v5;
  }
  else
  {
    v6 = 0;
    v7 = 0xE000000000000000;
  }
  *(_QWORD *)a1 = v6;
  *(_QWORD *)(a1 + 8) = v7;
  swift_bridgeObjectRetain();
  return NCProtoContactInfo.organizationName.modify;
}

BOOL NCProtoMemberAssociationPrimaryInfo.hasConversationGroupUuidString.getter()
{
  return NCProtoActiveConversation.hasUuidString.getter(type metadata accessor for NCProtoMemberAssociationPrimaryInfo);
}

Swift::Void __swiftcall NCProtoMemberAssociationPrimaryInfo.clearConversationGroupUuidString()()
{
  NCProtoActiveConversation.clearUuidString()(type metadata accessor for NCProtoMemberAssociationPrimaryInfo);
}

uint64_t NCProtoMemberAssociationPrimaryInfo.handleData.getter()
{
  uint64_t v0;
  uint64_t *v1;
  unint64_t v2;
  uint64_t v3;

  v1 = (uint64_t *)(v0 + *(int *)(type metadata accessor for NCProtoMemberAssociationPrimaryInfo(0) + 28));
  v2 = v1[1];
  if (v2 >> 60 == 15)
    v3 = 0;
  else
    v3 = *v1;
  outlined copy of Data?(*v1, v2);
  return v3;
}

uint64_t key path getter for NCProtoMemberAssociationPrimaryInfo.handleData : NCProtoMemberAssociationPrimaryInfo@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t *v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;

  v3 = (uint64_t *)(a1 + *(int *)(type metadata accessor for NCProtoMemberAssociationPrimaryInfo(0) + 28));
  v4 = *v3;
  v5 = v3[1];
  if (v5 >> 60 == 15)
    v6 = 0;
  else
    v6 = *v3;
  v7 = 0xC000000000000000;
  if (v5 >> 60 != 15)
    v7 = v5;
  *a2 = v6;
  a2[1] = v7;
  return outlined copy of Data?(v4, v5);
}

uint64_t key path setter for NCProtoMemberAssociationPrimaryInfo.handleData : NCProtoMemberAssociationPrimaryInfo(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t result;

  v2 = *a1;
  v3 = a1[1];
  v4 = (uint64_t *)(a2 + *(int *)(type metadata accessor for NCProtoMemberAssociationPrimaryInfo(0) + 28));
  v5 = *v4;
  v6 = v4[1];
  outlined copy of Data._Representation(v2, v3);
  result = outlined consume of Data?(v5, v6);
  *v4 = v2;
  v4[1] = v3;
  return result;
}

uint64_t NCProtoMemberAssociationPrimaryInfo.handleData.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t result;

  v5 = v2 + *(int *)(type metadata accessor for NCProtoMemberAssociationPrimaryInfo(0) + 28);
  result = outlined consume of Data?(*(_QWORD *)v5, *(_QWORD *)(v5 + 8));
  *(_QWORD *)v5 = a1;
  *(_QWORD *)(v5 + 8) = a2;
  return result;
}

uint64_t (*NCProtoMemberAssociationPrimaryInfo.handleData.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;

  *(_QWORD *)(a1 + 16) = v1;
  v3 = *(int *)(type metadata accessor for NCProtoMemberAssociationPrimaryInfo(0) + 28);
  *(_DWORD *)(a1 + 24) = v3;
  v4 = (uint64_t *)(v1 + v3);
  v5 = *v4;
  v6 = v4[1];
  if (v6 >> 60 == 15)
    v7 = 0;
  else
    v7 = *v4;
  v8 = 0xC000000000000000;
  if (v6 >> 60 != 15)
    v8 = v6;
  *(_QWORD *)a1 = v7;
  *(_QWORD *)(a1 + 8) = v8;
  outlined copy of Data?(v5, v6);
  return NCProtoAddMemberRequest.associationVoucherData.modify;
}

uint64_t NCProtoAddMemberRequest.associationVoucherData.modify(uint64_t a1, char a2)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t result;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16) + *(int *)(a1 + 24);
  v4 = *(_QWORD *)a1;
  v5 = *(_QWORD *)v3;
  v6 = *(_QWORD *)(v3 + 8);
  if ((a2 & 1) != 0)
  {
    outlined copy of Data._Representation(*(_QWORD *)a1, v2);
    outlined consume of Data?(v5, v6);
    *(_QWORD *)v3 = v4;
    *(_QWORD *)(v3 + 8) = v2;
    return outlined consume of Data._Representation(v4, v2);
  }
  else
  {
    result = outlined consume of Data?(*(_QWORD *)v3, *(_QWORD *)(v3 + 8));
    *(_QWORD *)v3 = v4;
    *(_QWORD *)(v3 + 8) = v2;
  }
  return result;
}

BOOL NCProtoMemberAssociationPrimaryInfo.hasHandleData.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + *(int *)(type metadata accessor for NCProtoMemberAssociationPrimaryInfo(0) + 28) + 8) >> 60 != 15;
}

Swift::Void __swiftcall NCProtoMemberAssociationPrimaryInfo.clearHandleData()()
{
  uint64_t v0;
  uint64_t v1;

  v1 = v0 + *(int *)(type metadata accessor for NCProtoMemberAssociationPrimaryInfo(0) + 28);
  outlined consume of Data?(*(_QWORD *)v1, *(_QWORD *)(v1 + 8));
  *(_OWORD *)v1 = xmmword_242A30CC0;
}

uint64_t NCProtoMemberAssociationPrimaryInfo.identifier.getter()
{
  uint64_t v0;
  _BYTE *v1;

  v1 = (_BYTE *)(v0 + *(int *)(type metadata accessor for NCProtoMemberAssociationPrimaryInfo(0) + 32));
  if (v1[8])
    return 0;
  else
    return *(_QWORD *)v1;
}

uint64_t key path getter for NCProtoMemberAssociationPrimaryInfo.identifier : NCProtoMemberAssociationPrimaryInfo@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t result;
  uint64_t *v5;
  uint64_t v6;

  result = type metadata accessor for NCProtoMemberAssociationPrimaryInfo(0);
  v5 = (uint64_t *)(a1 + *(int *)(result + 32));
  if (*((_BYTE *)v5 + 8))
    v6 = 0;
  else
    v6 = *v5;
  *a2 = v6;
  return result;
}

uint64_t key path setter for NCProtoMemberAssociationPrimaryInfo.identifier : NCProtoMemberAssociationPrimaryInfo(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t result;
  uint64_t v5;

  v3 = *a1;
  result = type metadata accessor for NCProtoMemberAssociationPrimaryInfo(0);
  v5 = a2 + *(int *)(result + 32);
  *(_QWORD *)v5 = v3;
  *(_BYTE *)(v5 + 8) = 0;
  return result;
}

uint64_t NCProtoMemberAssociationPrimaryInfo.identifier.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v4;

  result = type metadata accessor for NCProtoMemberAssociationPrimaryInfo(0);
  v4 = v1 + *(int *)(result + 32);
  *(_QWORD *)v4 = a1;
  *(_BYTE *)(v4 + 8) = 0;
  return result;
}

uint64_t (*NCProtoMemberAssociationPrimaryInfo.identifier.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;

  *(_QWORD *)(a1 + 8) = v1;
  v3 = *(int *)(type metadata accessor for NCProtoMemberAssociationPrimaryInfo(0) + 32);
  *(_DWORD *)(a1 + 16) = v3;
  v4 = (uint64_t *)(v1 + v3);
  if (*((_BYTE *)v4 + 8))
    v5 = 0;
  else
    v5 = *v4;
  *(_QWORD *)a1 = v5;
  return NCProtoActiveConversation.remoteMemberCount.modify;
}

uint64_t NCProtoActiveConversation.remoteMemberCount.modify(uint64_t result)
{
  uint64_t v1;

  v1 = *(_QWORD *)(result + 8) + *(int *)(result + 16);
  *(_QWORD *)v1 = *(_QWORD *)result;
  *(_BYTE *)(v1 + 8) = 0;
  return result;
}

BOOL NCProtoMemberAssociationPrimaryInfo.hasIdentifier.getter()
{
  uint64_t v0;

  return (*(_BYTE *)(v0 + *(int *)(type metadata accessor for NCProtoMemberAssociationPrimaryInfo(0) + 32) + 8) & 1) == 0;
}

Swift::Void __swiftcall NCProtoMemberAssociationPrimaryInfo.clearIdentifier()()
{
  uint64_t v0;
  uint64_t v1;

  v1 = v0 + *(int *)(type metadata accessor for NCProtoMemberAssociationPrimaryInfo(0) + 32);
  *(_QWORD *)v1 = 0;
  *(_BYTE *)(v1 + 8) = 1;
}

uint64_t NCProtoMemberAssociationPrimaryInfo.avcIdentifier.getter()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v1 = (uint64_t *)(v0 + *(int *)(type metadata accessor for NCProtoMemberAssociationPrimaryInfo(0) + 36));
  if (v1[1])
    v2 = *v1;
  else
    v2 = 0;
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t key path getter for NCProtoMemberAssociationPrimaryInfo.avcIdentifier : NCProtoMemberAssociationPrimaryInfo@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t *v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v3 = (uint64_t *)(a1 + *(int *)(type metadata accessor for NCProtoMemberAssociationPrimaryInfo(0) + 36));
  v4 = v3[1];
  if (v4)
  {
    v5 = *v3;
    v6 = v4;
  }
  else
  {
    v5 = 0;
    v6 = 0xE000000000000000;
  }
  *a2 = v5;
  a2[1] = v6;
  return swift_bridgeObjectRetain();
}

uint64_t key path setter for NCProtoMemberAssociationPrimaryInfo.avcIdentifier : NCProtoMemberAssociationPrimaryInfo(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t result;

  v3 = *a1;
  v2 = a1[1];
  v4 = (_QWORD *)(a2 + *(int *)(type metadata accessor for NCProtoMemberAssociationPrimaryInfo(0) + 36));
  swift_bridgeObjectRetain();
  result = swift_bridgeObjectRelease();
  *v4 = v3;
  v4[1] = v2;
  return result;
}

uint64_t NCProtoMemberAssociationPrimaryInfo.avcIdentifier.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t result;

  v5 = (_QWORD *)(v2 + *(int *)(type metadata accessor for NCProtoMemberAssociationPrimaryInfo(0) + 36));
  result = swift_bridgeObjectRelease();
  *v5 = a1;
  v5[1] = a2;
  return result;
}

uint64_t (*NCProtoMemberAssociationPrimaryInfo.avcIdentifier.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  uint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;

  *(_QWORD *)(a1 + 16) = v1;
  v3 = *(int *)(type metadata accessor for NCProtoMemberAssociationPrimaryInfo(0) + 36);
  *(_DWORD *)(a1 + 24) = v3;
  v4 = (uint64_t *)(v1 + v3);
  v5 = v4[1];
  if (v5)
  {
    v6 = *v4;
    v7 = v5;
  }
  else
  {
    v6 = 0;
    v7 = 0xE000000000000000;
  }
  *(_QWORD *)a1 = v6;
  *(_QWORD *)(a1 + 8) = v7;
  swift_bridgeObjectRetain();
  return NCProtoContactInfo.organizationName.modify;
}

uint64_t NCProtoContactInfo.organizationName.modify(uint64_t *a1, char a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t result;

  v2 = a1[1];
  v3 = (_QWORD *)(a1[2] + *((int *)a1 + 6));
  v4 = *a1;
  if ((a2 & 1) != 0)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *v3 = v4;
    v3[1] = v2;
    return swift_bridgeObjectRelease();
  }
  else
  {
    result = swift_bridgeObjectRelease();
    *v3 = v4;
    v3[1] = v2;
  }
  return result;
}

BOOL NCProtoMemberAssociationPrimaryInfo.hasAvcIdentifier.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + *(int *)(type metadata accessor for NCProtoMemberAssociationPrimaryInfo(0) + 36) + 8) != 0;
}

Swift::Void __swiftcall NCProtoMemberAssociationPrimaryInfo.clearAvcIdentifier()()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)(v0 + *(int *)(type metadata accessor for NCProtoMemberAssociationPrimaryInfo(0) + 36));
  swift_bridgeObjectRelease();
  *v1 = 0;
  v1[1] = 0;
}

uint64_t (*NCProtoMemberAssociationPrimaryInfo.supportedTypes.modify())()
{
  return NCProtoContactInfo.namePrefix.modify;
}

uint64_t NCProtoMemberAssociationPrimaryInfo.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return NCProtoActiveConversation.unknownFields.getter(type metadata accessor for NCProtoMemberAssociationPrimaryInfo, a1);
}

uint64_t NCProtoMemberAssociationPrimaryInfo.unknownFields.setter(uint64_t a1)
{
  return NCProtoActiveConversation.unknownFields.setter(a1, type metadata accessor for NCProtoMemberAssociationPrimaryInfo);
}

uint64_t (*NCProtoMemberAssociationPrimaryInfo.unknownFields.modify())()
{
  type metadata accessor for NCProtoMemberAssociationPrimaryInfo(0);
  return NCProtoContactInfo.namePrefix.modify;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance NCProtoConversationAVMode()
{
  Hasher.init(_seed:)();
  dispatch thunk of Hashable.hash(into:)();
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance NCProtoMemberAssociationPrimaryInfo.MemberAssociationType()
{
  lazy protocol witness table accessor for type NCProtoMemberAssociationPrimaryInfo.MemberAssociationType and conformance NCProtoMemberAssociationPrimaryInfo.MemberAssociationType();
  return Enum.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance NCProtoConversationAVMode()
{
  Hasher.init(_seed:)();
  dispatch thunk of Hashable.hash(into:)();
  return Hasher._finalize()();
}

uint64_t static NCProtoMemberAssociationPrimaryInfo.MemberAssociationType.allCases.getter()
{
  return static NCProtoConversationAVMode.allCases.getter(&one-time initialization token for allCases);
}

uint64_t static NCProtoConversationAVMode.allCases.getter(_QWORD *a1)
{
  if (*a1 != -1)
    swift_once();
  swift_beginAccess();
  return swift_bridgeObjectRetain();
}

uint64_t static NCProtoMemberAssociationPrimaryInfo.MemberAssociationType.allCases.setter(uint64_t a1)
{
  return static NCProtoConversationAVMode.allCases.setter(a1, &one-time initialization token for allCases, &static NCProtoMemberAssociationPrimaryInfo.MemberAssociationType.allCases);
}

uint64_t static NCProtoConversationAVMode.allCases.setter(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  if (*a2 != -1)
    swift_once();
  swift_beginAccess();
  *a3 = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*static NCProtoMemberAssociationPrimaryInfo.MemberAssociationType.allCases.modify())()
{
  if (one-time initialization token for allCases != -1)
    swift_once();
  swift_beginAccess();
  return static NCProtoConversationAVMode.allCases.modify;
}

uint64_t protocol witness for static CaseIterable.allCases.getter in conformance NCProtoMemberAssociationPrimaryInfo.MemberAssociationType@<X0>(_QWORD *a1@<X8>)
{
  return protocol witness for static CaseIterable.allCases.getter in conformance NCProtoConversationAVMode(&one-time initialization token for allCases, &static NCProtoMemberAssociationPrimaryInfo.MemberAssociationType.allCases, a1);
}

uint64_t protocol witness for static CaseIterable.allCases.getter in conformance NCProtoConversationAVMode@<X0>(_QWORD *a1@<X2>, _QWORD *a2@<X3>, _QWORD *a3@<X8>)
{
  if (*a1 != -1)
    swift_once();
  swift_beginAccess();
  *a3 = *a2;
  return swift_bridgeObjectRetain();
}

uint64_t NCProtoIDSProxyMessage.message.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of NCProtoContactInfo?(v1, a1, &demangling cache variable for type metadata for NCProtoIDSProxyMessage.OneOf_Message?);
}

uint64_t NCProtoIDSProxyMessage.message.setter(uint64_t a1)
{
  uint64_t v1;

  return outlined assign with take of NCProtoIDSProxyMessage.OneOf_Message?(a1, v1);
}

uint64_t outlined assign with take of NCProtoIDSProxyMessage.OneOf_Message?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NCProtoIDSProxyMessage.OneOf_Message?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t (*NCProtoIDSProxyMessage.message.modify())()
{
  return NCProtoContactInfo.namePrefix.modify;
}

uint64_t NCProtoIDSProxyMessage.rawData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v8;

  v2 = v1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NCProtoIDSProxyMessage.OneOf_Message?);
  MEMORY[0x24BDAC7A8]();
  v5 = (char *)&v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of NCProtoContactInfo?(v2, (uint64_t)v5, &demangling cache variable for type metadata for NCProtoIDSProxyMessage.OneOf_Message?);
  v6 = type metadata accessor for NCProtoIDSProxyMessage.OneOf_Message(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 48))(v5, 1, v6) == 1)
  {
    outlined destroy of NCProtoContactInfo?((uint64_t)v5, &demangling cache variable for type metadata for NCProtoIDSProxyMessage.OneOf_Message?);
LABEL_5:
    *(_OWORD *)a1 = xmmword_242A30CB0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)(a1 + 24) = 0xE000000000000000;
    *(_QWORD *)(a1 + 32) = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
    type metadata accessor for NCProtoIDSProxyMessage.RawData(0);
    return UnknownStorage.init()();
  }
  if (swift_getEnumCaseMultiPayload())
  {
    outlined destroy of NCProtoContactInfo((uint64_t)v5, type metadata accessor for NCProtoIDSProxyMessage.OneOf_Message);
    goto LABEL_5;
  }
  return outlined init with take of NCProtoContactInfo((uint64_t)v5, a1, type metadata accessor for NCProtoIDSProxyMessage.RawData);
}

uint64_t key path getter for NCProtoIDSProxyMessage.rawData : NCProtoIDSProxyMessage@<X0>(uint64_t a1@<X8>)
{
  return NCProtoIDSProxyMessage.rawData.getter(a1);
}

uint64_t key path setter for NCProtoIDSProxyMessage.rawData : NCProtoIDSProxyMessage(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for NCProtoIDSProxyMessage.rawData : NCProtoIDSProxyMessage(a1, a2, a3, a4, (void (*)(_QWORD))type metadata accessor for NCProtoIDSProxyMessage.RawData);
}

uint64_t NCProtoIDSProxyMessage.rawData.setter(uint64_t a1)
{
  return NCProtoIDSProxyMessage.rawData.setter(a1, type metadata accessor for NCProtoIDSProxyMessage.RawData);
}

uint64_t NCProtoIDSProxyMessage.RawData.init()@<X0>(uint64_t a1@<X8>)
{
  *(_OWORD *)a1 = xmmword_242A30CB0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0xE000000000000000;
  *(_QWORD *)(a1 + 32) = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
  type metadata accessor for NCProtoIDSProxyMessage.RawData(0);
  return UnknownStorage.init()();
}

uint64_t type metadata accessor for NCProtoIDSProxyMessage.OneOf_Message(uint64_t a1)
{
  return type metadata accessor for NCProtoContactInfo(a1, (uint64_t *)&type metadata singleton initialization cache for NCProtoIDSProxyMessage.OneOf_Message);
}

uint64_t type metadata accessor for NCProtoIDSProxyMessage.RawData(uint64_t a1)
{
  return type metadata accessor for NCProtoContactInfo(a1, (uint64_t *)&type metadata singleton initialization cache for NCProtoIDSProxyMessage.RawData);
}

void (*NCProtoIDSProxyMessage.rawData.modify(_QWORD *a1))(uint64_t **a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  size_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;

  v3 = malloc(0x30uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NCProtoIDSProxyMessage.OneOf_Message?);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[1] = v5;
  v6 = *(_QWORD *)(*(_QWORD *)(type metadata accessor for NCProtoIDSProxyMessage.RawData(0) - 8) + 64);
  v3[2] = malloc(v6);
  v7 = malloc(v6);
  v3[3] = v7;
  outlined init with copy of NCProtoContactInfo?(v1, (uint64_t)v5, &demangling cache variable for type metadata for NCProtoIDSProxyMessage.OneOf_Message?);
  v8 = type metadata accessor for NCProtoIDSProxyMessage.OneOf_Message(0);
  v3[4] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v3[5] = v9;
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v9 + 48))(v5, 1, v8) == 1)
  {
    outlined destroy of NCProtoContactInfo?((uint64_t)v5, &demangling cache variable for type metadata for NCProtoIDSProxyMessage.OneOf_Message?);
  }
  else
  {
    if (!swift_getEnumCaseMultiPayload())
    {
      outlined init with take of NCProtoContactInfo((uint64_t)v5, (uint64_t)v7, type metadata accessor for NCProtoIDSProxyMessage.RawData);
      return NCProtoIDSProxyMessage.rawData.modify;
    }
    outlined destroy of NCProtoContactInfo((uint64_t)v5, type metadata accessor for NCProtoIDSProxyMessage.OneOf_Message);
  }
  *(_OWORD *)v7 = xmmword_242A30CB0;
  v7[2] = 0;
  v7[3] = 0xE000000000000000;
  v7[4] = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
  UnknownStorage.init()();
  return NCProtoIDSProxyMessage.rawData.modify;
}

void NCProtoIDSProxyMessage.rawData.modify(uint64_t **a1, char a2)
{
  NCProtoIDSProxyMessage.rawData.modify(a1, a2, type metadata accessor for NCProtoIDSProxyMessage.RawData);
}

uint64_t NCProtoIDSProxyMessage.groupUpdate.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;

  v2 = v1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NCProtoIDSProxyMessage.OneOf_Message?);
  MEMORY[0x24BDAC7A8]();
  v5 = (char *)&v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of NCProtoContactInfo?(v2, (uint64_t)v5, &demangling cache variable for type metadata for NCProtoIDSProxyMessage.OneOf_Message?);
  v6 = type metadata accessor for NCProtoIDSProxyMessage.OneOf_Message(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 48))(v5, 1, v6) == 1)
  {
    outlined destroy of NCProtoContactInfo?((uint64_t)v5, &demangling cache variable for type metadata for NCProtoIDSProxyMessage.OneOf_Message?);
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 1)
      return outlined init with take of NCProtoContactInfo((uint64_t)v5, a1, type metadata accessor for NCProtoIDSProxyMessage.GroupUpdate);
    outlined destroy of NCProtoContactInfo((uint64_t)v5, type metadata accessor for NCProtoIDSProxyMessage.OneOf_Message);
  }
  *(_BYTE *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0xE000000000000000;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 40) = 0xE000000000000000;
  *(_BYTE *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_OWORD *)(a1 + 88) = xmmword_242A30CD0;
  v8 = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(a1 + 104) = 0xC000000000000000;
  *(_QWORD *)(a1 + 112) = v8;
  *(_QWORD *)(a1 + 120) = specialized Dictionary.init(dictionaryLiteral:)(v8, &demangling cache variable for type metadata for (String, NCProtoIDSProxyMessage.ParticipantIDList), &demangling cache variable for type metadata for _DictionaryStorage<String, NCProtoIDSProxyMessage.ParticipantIDList>, type metadata accessor for NCProtoIDSProxyMessage.ParticipantIDList);
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 136) = 0xE000000000000000;
  type metadata accessor for NCProtoIDSProxyMessage.GroupUpdate(0);
  return UnknownStorage.init()();
}

uint64_t key path getter for NCProtoIDSProxyMessage.groupUpdate : NCProtoIDSProxyMessage@<X0>(uint64_t a1@<X8>)
{
  return NCProtoIDSProxyMessage.groupUpdate.getter(a1);
}

uint64_t key path setter for NCProtoIDSProxyMessage.groupUpdate : NCProtoIDSProxyMessage(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for NCProtoIDSProxyMessage.rawData : NCProtoIDSProxyMessage(a1, a2, a3, a4, (void (*)(_QWORD))type metadata accessor for NCProtoIDSProxyMessage.GroupUpdate);
}

uint64_t NCProtoIDSProxyMessage.groupUpdate.setter(uint64_t a1)
{
  return NCProtoIDSProxyMessage.rawData.setter(a1, type metadata accessor for NCProtoIDSProxyMessage.GroupUpdate);
}

uint64_t NCProtoIDSProxyMessage.GroupUpdate.init()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;

  *(_BYTE *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0xE000000000000000;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 40) = 0xE000000000000000;
  *(_BYTE *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_OWORD *)(a1 + 88) = xmmword_242A30CD0;
  v2 = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(a1 + 104) = 0xC000000000000000;
  *(_QWORD *)(a1 + 112) = v2;
  *(_QWORD *)(a1 + 120) = specialized Dictionary.init(dictionaryLiteral:)(v2, &demangling cache variable for type metadata for (String, NCProtoIDSProxyMessage.ParticipantIDList), &demangling cache variable for type metadata for _DictionaryStorage<String, NCProtoIDSProxyMessage.ParticipantIDList>, type metadata accessor for NCProtoIDSProxyMessage.ParticipantIDList);
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 136) = 0xE000000000000000;
  type metadata accessor for NCProtoIDSProxyMessage.GroupUpdate(0);
  return UnknownStorage.init()();
}

uint64_t type metadata accessor for NCProtoIDSProxyMessage.GroupUpdate(uint64_t a1)
{
  return type metadata accessor for NCProtoContactInfo(a1, (uint64_t *)&type metadata singleton initialization cache for NCProtoIDSProxyMessage.GroupUpdate);
}

void (*NCProtoIDSProxyMessage.groupUpdate.modify(_QWORD *a1))(uint64_t **a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  size_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = malloc(0x30uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NCProtoIDSProxyMessage.OneOf_Message?);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[1] = v5;
  v6 = *(_QWORD *)(*(_QWORD *)(type metadata accessor for NCProtoIDSProxyMessage.GroupUpdate(0) - 8) + 64);
  v3[2] = malloc(v6);
  v7 = (char *)malloc(v6);
  v3[3] = v7;
  outlined init with copy of NCProtoContactInfo?(v1, (uint64_t)v5, &demangling cache variable for type metadata for NCProtoIDSProxyMessage.OneOf_Message?);
  v8 = type metadata accessor for NCProtoIDSProxyMessage.OneOf_Message(0);
  v3[4] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v3[5] = v9;
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v9 + 48))(v5, 1, v8) == 1)
  {
    outlined destroy of NCProtoContactInfo?((uint64_t)v5, &demangling cache variable for type metadata for NCProtoIDSProxyMessage.OneOf_Message?);
LABEL_6:
    *v7 = 0;
    *((_QWORD *)v7 + 1) = 0;
    *((_QWORD *)v7 + 2) = 0xE000000000000000;
    *((_QWORD *)v7 + 3) = 0;
    *((_QWORD *)v7 + 4) = 0;
    *((_QWORD *)v7 + 6) = 0;
    *((_QWORD *)v7 + 7) = 0;
    *((_QWORD *)v7 + 5) = 0xE000000000000000;
    v7[64] = 0;
    *((_QWORD *)v7 + 9) = 0;
    *((_QWORD *)v7 + 10) = 0;
    *(_OWORD *)(v7 + 88) = xmmword_242A30CD0;
    v10 = MEMORY[0x24BEE4AF8];
    *((_QWORD *)v7 + 13) = 0xC000000000000000;
    *((_QWORD *)v7 + 14) = v10;
    *((_QWORD *)v7 + 15) = specialized Dictionary.init(dictionaryLiteral:)(v10, &demangling cache variable for type metadata for (String, NCProtoIDSProxyMessage.ParticipantIDList), &demangling cache variable for type metadata for _DictionaryStorage<String, NCProtoIDSProxyMessage.ParticipantIDList>, type metadata accessor for NCProtoIDSProxyMessage.ParticipantIDList);
    *((_QWORD *)v7 + 16) = 0;
    *((_QWORD *)v7 + 17) = 0xE000000000000000;
    UnknownStorage.init()();
    return NCProtoIDSProxyMessage.groupUpdate.modify;
  }
  if (swift_getEnumCaseMultiPayload() != 1)
  {
    outlined destroy of NCProtoContactInfo((uint64_t)v5, type metadata accessor for NCProtoIDSProxyMessage.OneOf_Message);
    goto LABEL_6;
  }
  outlined init with take of NCProtoContactInfo((uint64_t)v5, (uint64_t)v7, type metadata accessor for NCProtoIDSProxyMessage.GroupUpdate);
  return NCProtoIDSProxyMessage.groupUpdate.modify;
}

void NCProtoIDSProxyMessage.groupUpdate.modify(uint64_t **a1, char a2)
{
  NCProtoIDSProxyMessage.rawData.modify(a1, a2, type metadata accessor for NCProtoIDSProxyMessage.GroupUpdate);
}

uint64_t NCProtoIDSProxyMessage.resource.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v8;

  v2 = v1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NCProtoIDSProxyMessage.OneOf_Message?);
  MEMORY[0x24BDAC7A8]();
  v5 = (char *)&v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of NCProtoContactInfo?(v2, (uint64_t)v5, &demangling cache variable for type metadata for NCProtoIDSProxyMessage.OneOf_Message?);
  v6 = type metadata accessor for NCProtoIDSProxyMessage.OneOf_Message(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 48))(v5, 1, v6) == 1)
  {
    outlined destroy of NCProtoContactInfo?((uint64_t)v5, &demangling cache variable for type metadata for NCProtoIDSProxyMessage.OneOf_Message?);
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 2)
      return outlined init with take of NCProtoContactInfo((uint64_t)v5, a1, type metadata accessor for NCProtoIDSProxyMessage.Resource);
    outlined destroy of NCProtoContactInfo((uint64_t)v5, type metadata accessor for NCProtoIDSProxyMessage.OneOf_Message);
  }
  *(_OWORD *)a1 = xmmword_242A30CB0;
  *(_OWORD *)(a1 + 16) = xmmword_242A30CB0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0xE000000000000000;
  *(_QWORD *)(a1 + 48) = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
  type metadata accessor for NCProtoIDSProxyMessage.Resource(0);
  return UnknownStorage.init()();
}

uint64_t key path getter for NCProtoIDSProxyMessage.resource : NCProtoIDSProxyMessage@<X0>(uint64_t a1@<X8>)
{
  return NCProtoIDSProxyMessage.resource.getter(a1);
}

uint64_t key path setter for NCProtoIDSProxyMessage.resource : NCProtoIDSProxyMessage(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for NCProtoIDSProxyMessage.rawData : NCProtoIDSProxyMessage(a1, a2, a3, a4, (void (*)(_QWORD))type metadata accessor for NCProtoIDSProxyMessage.Resource);
}

uint64_t key path setter for NCProtoIDSProxyMessage.rawData : NCProtoIDSProxyMessage(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(_QWORD))
{
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v12;

  a5(0);
  MEMORY[0x24BDAC7A8]();
  v9 = (char *)&v12 - v8;
  outlined init with copy of NCProtoContactInfo(a1, (uint64_t)&v12 - v8, (uint64_t (*)(_QWORD))a5);
  outlined destroy of NCProtoContactInfo?(a2, &demangling cache variable for type metadata for NCProtoIDSProxyMessage.OneOf_Message?);
  outlined init with take of NCProtoContactInfo((uint64_t)v9, a2, (uint64_t (*)(_QWORD))a5);
  v10 = type metadata accessor for NCProtoIDSProxyMessage.OneOf_Message(0);
  swift_storeEnumTagMultiPayload();
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56))(a2, 0, 1, v10);
}

uint64_t NCProtoIDSProxyMessage.resource.setter(uint64_t a1)
{
  return NCProtoIDSProxyMessage.rawData.setter(a1, type metadata accessor for NCProtoIDSProxyMessage.Resource);
}

uint64_t NCProtoIDSProxyMessage.rawData.setter(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v2;
  uint64_t v5;

  outlined destroy of NCProtoContactInfo?(v2, &demangling cache variable for type metadata for NCProtoIDSProxyMessage.OneOf_Message?);
  outlined init with take of NCProtoContactInfo(a1, v2, a2);
  v5 = type metadata accessor for NCProtoIDSProxyMessage.OneOf_Message(0);
  swift_storeEnumTagMultiPayload();
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56))(v2, 0, 1, v5);
}

uint64_t NCProtoIDSProxyMessage.Resource.init()@<X0>(uint64_t a1@<X8>)
{
  *(_OWORD *)a1 = xmmword_242A30CB0;
  *(_OWORD *)(a1 + 16) = xmmword_242A30CB0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0xE000000000000000;
  *(_QWORD *)(a1 + 48) = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
  type metadata accessor for NCProtoIDSProxyMessage.Resource(0);
  return UnknownStorage.init()();
}

uint64_t type metadata accessor for NCProtoIDSProxyMessage.Resource(uint64_t a1)
{
  return type metadata accessor for NCProtoContactInfo(a1, (uint64_t *)&type metadata singleton initialization cache for NCProtoIDSProxyMessage.Resource);
}

void (*NCProtoIDSProxyMessage.resource.modify(_QWORD *a1))(uint64_t **a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  size_t v6;
  _OWORD *v7;
  uint64_t v8;
  uint64_t v9;

  v3 = malloc(0x30uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NCProtoIDSProxyMessage.OneOf_Message?);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[1] = v5;
  v6 = *(_QWORD *)(*(_QWORD *)(type metadata accessor for NCProtoIDSProxyMessage.Resource(0) - 8) + 64);
  v3[2] = malloc(v6);
  v7 = malloc(v6);
  v3[3] = v7;
  outlined init with copy of NCProtoContactInfo?(v1, (uint64_t)v5, &demangling cache variable for type metadata for NCProtoIDSProxyMessage.OneOf_Message?);
  v8 = type metadata accessor for NCProtoIDSProxyMessage.OneOf_Message(0);
  v3[4] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v3[5] = v9;
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v9 + 48))(v5, 1, v8) == 1)
  {
    outlined destroy of NCProtoContactInfo?((uint64_t)v5, &demangling cache variable for type metadata for NCProtoIDSProxyMessage.OneOf_Message?);
LABEL_6:
    *v7 = xmmword_242A30CB0;
    v7[1] = xmmword_242A30CB0;
    *((_QWORD *)v7 + 4) = 0;
    *((_QWORD *)v7 + 5) = 0xE000000000000000;
    *((_QWORD *)v7 + 6) = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
    UnknownStorage.init()();
    return NCProtoIDSProxyMessage.resource.modify;
  }
  if (swift_getEnumCaseMultiPayload() != 2)
  {
    outlined destroy of NCProtoContactInfo((uint64_t)v5, type metadata accessor for NCProtoIDSProxyMessage.OneOf_Message);
    goto LABEL_6;
  }
  outlined init with take of NCProtoContactInfo((uint64_t)v5, (uint64_t)v7, type metadata accessor for NCProtoIDSProxyMessage.Resource);
  return NCProtoIDSProxyMessage.resource.modify;
}

void NCProtoIDSProxyMessage.resource.modify(uint64_t **a1, char a2)
{
  NCProtoIDSProxyMessage.rawData.modify(a1, a2, type metadata accessor for NCProtoIDSProxyMessage.Resource);
}

void NCProtoIDSProxyMessage.rawData.modify(uint64_t **a1, char a2, uint64_t (*a3)(_QWORD))
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  void *v8;
  void *v9;
  uint64_t v10;

  v4 = *a1;
  v5 = (*a1)[4];
  v6 = (*a1)[5];
  v7 = (void *)(*a1)[2];
  v8 = (void *)(*a1)[3];
  v10 = **a1;
  v9 = (void *)(*a1)[1];
  if ((a2 & 1) != 0)
  {
    outlined init with copy of NCProtoContactInfo((*a1)[3], (uint64_t)v7, a3);
    outlined destroy of NCProtoContactInfo?(v10, &demangling cache variable for type metadata for NCProtoIDSProxyMessage.OneOf_Message?);
    outlined init with take of NCProtoContactInfo((uint64_t)v7, v10, a3);
    swift_storeEnumTagMultiPayload();
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v6 + 56))(v10, 0, 1, v5);
    outlined destroy of NCProtoContactInfo((uint64_t)v8, a3);
  }
  else
  {
    outlined destroy of NCProtoContactInfo?(**a1, &demangling cache variable for type metadata for NCProtoIDSProxyMessage.OneOf_Message?);
    outlined init with take of NCProtoContactInfo((uint64_t)v8, v10, a3);
    swift_storeEnumTagMultiPayload();
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v6 + 56))(v10, 0, 1, v5);
  }
  free(v8);
  free(v7);
  free(v9);
  free(v4);
}

uint64_t NCProtoIDSProxyMessage.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return NCProtoActiveConversation.unknownFields.getter(type metadata accessor for NCProtoIDSProxyMessage, a1);
}

uint64_t type metadata accessor for NCProtoIDSProxyMessage(uint64_t a1)
{
  return type metadata accessor for NCProtoContactInfo(a1, (uint64_t *)&type metadata singleton initialization cache for NCProtoIDSProxyMessage);
}

uint64_t NCProtoIDSProxyMessage.unknownFields.setter(uint64_t a1)
{
  return NCProtoActiveConversation.unknownFields.setter(a1, type metadata accessor for NCProtoIDSProxyMessage);
}

uint64_t (*NCProtoIDSProxyMessage.unknownFields.modify())()
{
  type metadata accessor for NCProtoIDSProxyMessage(0);
  return NCProtoContactInfo.namePrefix.modify;
}

uint64_t (*NCProtoIDSProxyMessage.RawData.messageData.modify())()
{
  return NCProtoContactInfo.namePrefix.modify;
}

uint64_t (*NCProtoIDSProxyMessage.RawData.fromID.modify())()
{
  return NCProtoContactInfo.namePrefix.modify;
}

uint64_t (*NCProtoIDSProxyMessage.RawData.context.modify())()
{
  return NCProtoContactInfo.namePrefix.modify;
}

uint64_t NCProtoIDSProxyMessage.RawData.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return NCProtoContinuityFavorite.unknownFields.getter(type metadata accessor for NCProtoIDSProxyMessage.RawData, a1);
}

uint64_t NCProtoIDSProxyMessage.RawData.unknownFields.setter(uint64_t a1)
{
  return NCProtoContinuityFavorite.unknownFields.setter(a1, type metadata accessor for NCProtoIDSProxyMessage.RawData);
}

uint64_t (*NCProtoIDSProxyMessage.RawData.unknownFields.modify())()
{
  type metadata accessor for NCProtoIDSProxyMessage.RawData(0);
  return NCProtoContactInfo.namePrefix.modify;
}

uint64_t (*NCProtoIDSProxyMessage.Resource.resourceData.modify())()
{
  return NCProtoContactInfo.namePrefix.modify;
}

uint64_t NCProtoStartedSessionEvent.userAccountInfoData.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = outlined consume of Data._Representation(*(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24));
  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = a2;
  return result;
}

uint64_t (*NCProtoIDSProxyMessage.Resource.metadata.modify())()
{
  return NCProtoContactInfo.namePrefix.modify;
}

uint64_t (*NCProtoIDSProxyMessage.Resource.fromID.modify())()
{
  return NCProtoContactInfo.namePrefix.modify;
}

uint64_t NCProtoIDSProxyMessage.Resource.context.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t NCProtoIDSProxyMessage.Resource.context.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 48) = a1;
  return result;
}

uint64_t (*NCProtoIDSProxyMessage.Resource.context.modify())()
{
  return NCProtoContactInfo.namePrefix.modify;
}

uint64_t NCProtoIDSProxyMessage.Resource.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return NCProtoContactHandleAnonym.unknownFields.getter(type metadata accessor for NCProtoIDSProxyMessage.Resource, a1);
}

uint64_t NCProtoContactHandleAnonym.unknownFields.getter@<X0>(uint64_t (*a1)(_QWORD)@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = v2 + *(int *)(a1(0) + 32);
  v5 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, v4, v5);
}

uint64_t NCProtoIDSProxyMessage.Resource.unknownFields.setter(uint64_t a1)
{
  return NCProtoContactHandleAnonym.unknownFields.setter(a1, type metadata accessor for NCProtoIDSProxyMessage.Resource);
}

uint64_t NCProtoContactHandleAnonym.unknownFields.setter(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = v2 + *(int *)(a2(0) + 32);
  v5 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 40))(v4, a1, v5);
}

uint64_t (*NCProtoIDSProxyMessage.Resource.unknownFields.modify())()
{
  type metadata accessor for NCProtoIDSProxyMessage.Resource(0);
  return NCProtoContactInfo.namePrefix.modify;
}

uint64_t NCProtoIDSProxyMessage.GroupUpdate.isInitiator.getter()
{
  unsigned __int8 *v0;

  return *v0;
}

uint64_t NCProtoIDSProxyMessage.GroupUpdate.isInitiator.setter(uint64_t result)
{
  _BYTE *v1;

  *v1 = result;
  return result;
}

uint64_t (*NCProtoIDSProxyMessage.GroupUpdate.isInitiator.modify())()
{
  return NCProtoContactInfo.namePrefix.modify;
}

uint64_t NCProtoIDSProxyMessage.GroupUpdate.groupUuid.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 8);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t NCProtoIDSProxyMessage.GroupUpdate.groupUuid.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v2 + 8) = a1;
  *(_QWORD *)(v2 + 16) = a2;
  return result;
}

uint64_t (*NCProtoIDSProxyMessage.GroupUpdate.groupUuid.modify())()
{
  return NCProtoContactInfo.namePrefix.modify;
}

uint64_t NCProtoIDSProxyMessage.GroupUpdate.participantID.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 24);
}

uint64_t NCProtoIDSProxyMessage.GroupUpdate.participantID.setter(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 24) = result;
  return result;
}

uint64_t (*NCProtoIDSProxyMessage.GroupUpdate.participantID.modify())()
{
  return NCProtoContactInfo.namePrefix.modify;
}

uint64_t (*NCProtoIDSProxyMessage.GroupUpdate.participantDestinationID.modify())()
{
  return NCProtoContactInfo.namePrefix.modify;
}

uint64_t NCProtoIDSProxyMessage.GroupUpdate.updateType.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 48);
}

uint64_t NCProtoIDSProxyMessage.GroupUpdate.updateType.setter(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 48) = result;
  return result;
}

uint64_t (*NCProtoIDSProxyMessage.GroupUpdate.updateType.modify())()
{
  return NCProtoContactInfo.namePrefix.modify;
}

uint64_t NCProtoIDSProxyMessage.GroupUpdate.updateSubtype.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 56);
}

uint64_t NCProtoIDSProxyMessage.GroupUpdate.updateSubtype.setter(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 56) = result;
  return result;
}

uint64_t (*NCProtoIDSProxyMessage.GroupUpdate.updateSubtype.modify())()
{
  return NCProtoContactInfo.namePrefix.modify;
}

uint64_t NCProtoIDSProxyMessage.GroupUpdate.fromServer.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 64);
}

uint64_t NCProtoIDSProxyMessage.GroupUpdate.fromServer.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 64) = result;
  return result;
}

uint64_t (*NCProtoIDSProxyMessage.GroupUpdate.fromServer.modify())()
{
  return NCProtoContactInfo.namePrefix.modify;
}

double NCProtoIDSProxyMessage.GroupUpdate.serverDate.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 72);
}

void NCProtoIDSProxyMessage.GroupUpdate.serverDate.setter(double a1)
{
  uint64_t v1;

  *(double *)(v1 + 72) = a1;
}

uint64_t (*NCProtoIDSProxyMessage.GroupUpdate.serverDate.modify())()
{
  return NCProtoContactInfo.namePrefix.modify;
}

uint64_t NCProtoIDSProxyMessage.GroupUpdate.participantData.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 80);
  outlined copy of Data._Representation(v1, *(_QWORD *)(v0 + 88));
  return v1;
}

uint64_t NCProtoIDSProxyMessage.GroupUpdate.participantData.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = outlined consume of Data._Representation(*(_QWORD *)(v2 + 80), *(_QWORD *)(v2 + 88));
  *(_QWORD *)(v2 + 80) = a1;
  *(_QWORD *)(v2 + 88) = a2;
  return result;
}

uint64_t (*NCProtoIDSProxyMessage.GroupUpdate.participantData.modify())()
{
  return NCProtoContactInfo.namePrefix.modify;
}

uint64_t NCProtoContactInfo.imageData.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = outlined consume of Data._Representation(*(_QWORD *)(v2 + 96), *(_QWORD *)(v2 + 104));
  *(_QWORD *)(v2 + 96) = a1;
  *(_QWORD *)(v2 + 104) = a2;
  return result;
}

uint64_t (*NCProtoIDSProxyMessage.GroupUpdate.clientContextData.modify())()
{
  return NCProtoContactInfo.namePrefix.modify;
}

uint64_t NCProtoIDSProxyMessage.GroupUpdate.members.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t NCProtoIDSProxyMessage.GroupUpdate.members.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 112) = a1;
  return result;
}

uint64_t (*NCProtoIDSProxyMessage.GroupUpdate.members.modify())()
{
  return NCProtoContactInfo.namePrefix.modify;
}

uint64_t NCProtoIDSProxyMessage.GroupUpdate.participantIds.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t NCProtoIDSProxyMessage.GroupUpdate.participantIds.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 120) = a1;
  return result;
}

uint64_t (*NCProtoIDSProxyMessage.GroupUpdate.participantIds.modify())()
{
  return NCProtoContactInfo.namePrefix.modify;
}

uint64_t NCProtoIDSProxyMessage.GroupUpdate.relaySessionID.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 128);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t NCProtoIDSProxyMessage.GroupUpdate.relaySessionID.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v2 + 128) = a1;
  *(_QWORD *)(v2 + 136) = a2;
  return result;
}

uint64_t (*NCProtoIDSProxyMessage.GroupUpdate.relaySessionID.modify())()
{
  return NCProtoContactInfo.namePrefix.modify;
}

uint64_t NCProtoIDSProxyMessage.GroupUpdate.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for NCProtoIDSProxyMessage.GroupUpdate(0) + 68);
  v4 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t NCProtoIDSProxyMessage.GroupUpdate.unknownFields.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for NCProtoIDSProxyMessage.GroupUpdate(0) + 68);
  v4 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*NCProtoIDSProxyMessage.GroupUpdate.unknownFields.modify())()
{
  type metadata accessor for NCProtoIDSProxyMessage.GroupUpdate(0);
  return NCProtoContactInfo.namePrefix.modify;
}

uint64_t NCProtoIDSProxyMessage.ParticipantIDList.identifiers.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t NCProtoIDSProxyMessage.ParticipantIDList.identifiers.setter(uint64_t a1)
{
  _QWORD *v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *v1 = a1;
  return result;
}

uint64_t (*NCProtoIDSProxyMessage.ParticipantIDList.identifiers.modify())()
{
  return NCProtoContactInfo.namePrefix.modify;
}

uint64_t NCProtoIDSProxyMessage.ParticipantIDList.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return NCProtoActiveConversation.unknownFields.getter(type metadata accessor for NCProtoIDSProxyMessage.ParticipantIDList, a1);
}

uint64_t NCProtoIDSProxyMessage.ParticipantIDList.unknownFields.setter(uint64_t a1)
{
  return NCProtoActiveConversation.unknownFields.setter(a1, type metadata accessor for NCProtoIDSProxyMessage.ParticipantIDList);
}

uint64_t (*NCProtoIDSProxyMessage.ParticipantIDList.unknownFields.modify())()
{
  type metadata accessor for NCProtoIDSProxyMessage.ParticipantIDList(0);
  return NCProtoContactInfo.namePrefix.modify;
}

uint64_t NCProtoIDSProxyMessage.ParticipantIDList.init()@<X0>(_QWORD *a1@<X8>)
{
  return NCProtoFavoritesDidChangeEvent.init()((void (*)(_QWORD))type metadata accessor for NCProtoIDSProxyMessage.ParticipantIDList, a1);
}

uint64_t NCProtoIDSProxyMessage.init()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;

  v2 = type metadata accessor for NCProtoIDSProxyMessage.OneOf_Message(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 56))(a1, 1, 1, v2);
  type metadata accessor for NCProtoIDSProxyMessage(0);
  return UnknownStorage.init()();
}

uint64_t one-time initialization function for _protobuf_nameMap()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static NCProtoConversationAVMode._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static NCProtoConversationAVMode._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_242A30CE0;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 0;
  *(_QWORD *)v7 = "Unknown";
  *(_QWORD *)(v7 + 8) = 7;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 1;
  *(_QWORD *)v11 = "None";
  *(_QWORD *)(v11 + 8) = 4;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 2;
  *(_QWORD *)v13 = "Audio";
  *((_QWORD *)v13 + 1) = 5;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 3;
  *(_QWORD *)v15 = "Video";
  *((_QWORD *)v15 + 1) = 5;
  v15[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  _QWORD *v16;
  char *v17;
  _QWORD *v18;
  char *v19;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static NCProtoConversationState._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static NCProtoConversationState._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_242A30CF0;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 0;
  *(_QWORD *)v7 = "UnknownState";
  *(_QWORD *)(v7 + 8) = 12;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 1;
  *(_QWORD *)v11 = "Waiting";
  *(_QWORD *)(v11 + 8) = 7;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 2;
  *(_QWORD *)v13 = "Preparing";
  *((_QWORD *)v13 + 1) = 9;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 3;
  *(_QWORD *)v15 = "Joining";
  *((_QWORD *)v15 + 1) = 7;
  v15[16] = 2;
  v10();
  v16 = (_QWORD *)(v6 + 4 * v3);
  v17 = (char *)v16 + *(int *)(v1 + 48);
  *v16 = 4;
  *(_QWORD *)v17 = "Joined";
  *((_QWORD *)v17 + 1) = 6;
  v17[16] = 2;
  v10();
  v18 = (_QWORD *)(v6 + 5 * v3);
  v19 = (char *)v18 + *(int *)(v1 + 48);
  *v18 = 5;
  *(_QWORD *)v19 = "Leaving";
  *((_QWORD *)v19 + 1) = 7;
  v19[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  _QWORD *v16;
  char *v17;
  _QWORD *v18;
  char *v19;
  _QWORD *v20;
  char *v21;
  _QWORD *v22;
  char *v23;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static NCProtoContactInfo._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static NCProtoContactInfo._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_242A30D00;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 1;
  *(_QWORD *)v7 = "namePrefix";
  *(_QWORD *)(v7 + 8) = 10;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 2;
  *(_QWORD *)v11 = "givenName";
  *(_QWORD *)(v11 + 8) = 9;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 3;
  *(_QWORD *)v13 = "middleName";
  *((_QWORD *)v13 + 1) = 10;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 4;
  *(_QWORD *)v15 = "familyName";
  *((_QWORD *)v15 + 1) = 10;
  v15[16] = 2;
  v10();
  v16 = (_QWORD *)(v6 + 4 * v3);
  v17 = (char *)v16 + *(int *)(v1 + 48);
  *v16 = 5;
  *(_QWORD *)v17 = "nameSuffix";
  *((_QWORD *)v17 + 1) = 10;
  v17[16] = 2;
  v10();
  v18 = (_QWORD *)(v6 + 5 * v3);
  v19 = (char *)v18 + *(int *)(v1 + 48);
  *v18 = 6;
  *(_QWORD *)v19 = "nickname";
  *((_QWORD *)v19 + 1) = 8;
  v19[16] = 2;
  v10();
  v20 = (_QWORD *)(v6 + 6 * v3);
  v21 = (char *)v20 + *(int *)(v1 + 48);
  *v20 = 7;
  *(_QWORD *)v21 = "imageData";
  *((_QWORD *)v21 + 1) = 9;
  v21[16] = 2;
  v10();
  v22 = (_QWORD *)(v6 + 7 * v3);
  v23 = (char *)v22 + *(int *)(v1 + 48);
  *v22 = 8;
  *(_QWORD *)v23 = "organizationName";
  *((_QWORD *)v23 + 1) = 16;
  v23[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static NCProtoContactHandleAnonym._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static NCProtoContactHandleAnonym._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_242A30CE0;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 1;
  *(_QWORD *)v7 = "identifier";
  *(_QWORD *)(v7 + 8) = 10;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 2;
  *(_QWORD *)v11 = "type";
  *(_QWORD *)(v11 + 8) = 4;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 3;
  *(_QWORD *)v13 = "localizedLabel";
  *((_QWORD *)v13 + 1) = 14;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 4;
  *(_QWORD *)v15 = "label";
  *((_QWORD *)v15 + 1) = 5;
  v15[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;
  uint64_t v12;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static NCProtoContactHandleAnonym.AnonymType._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static NCProtoContactHandleAnonym.AnonymType._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_242A30D10;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 0;
  *(_QWORD *)v7 = "Unknown";
  *(_QWORD *)(v7 + 8) = 7;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 1;
  *(_QWORD *)v11 = "PhoneNumber";
  *((_QWORD *)v11 + 1) = 11;
  v11[16] = 2;
  v10();
  v12 = (uint64_t)v6 + 2 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + 2 * v3) = 2;
  *(_QWORD *)v12 = "EmailAddress";
  *(_QWORD *)(v12 + 8) = 12;
  *(_BYTE *)(v12 + 16) = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  uint64_t v16;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static NCProtoContinuityFavorite._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static NCProtoContinuityFavorite._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_242A30D20;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 1;
  *(_QWORD *)v7 = "contactInfo";
  *(_QWORD *)(v7 + 8) = 11;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 2;
  *(_QWORD *)v11 = "contactIdentifier";
  *(_QWORD *)(v11 + 8) = 17;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 3;
  *(_QWORD *)v13 = "anonym";
  *((_QWORD *)v13 + 1) = 6;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 4;
  *(_QWORD *)v15 = "actionType";
  *((_QWORD *)v15 + 1) = 10;
  v15[16] = 2;
  v10();
  v16 = v6 + 4 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + 4 * v3) = 5;
  *(_QWORD *)v16 = "bundleIdentifier";
  *(_QWORD *)(v16 + 8) = 16;
  *(_BYTE *)(v16 + 16) = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;
  uint64_t v12;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static NCProtoAddressableContact._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static NCProtoAddressableContact._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_242A30D10;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 1;
  *(_QWORD *)v7 = "contactInfo";
  *(_QWORD *)(v7 + 8) = 11;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 2;
  *(_QWORD *)v11 = "handleAnonyms";
  *((_QWORD *)v11 + 1) = 13;
  v11[16] = 2;
  v10();
  v12 = (uint64_t)v6 + 2 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + 2 * v3) = 3;
  *(_QWORD *)v12 = "contactIdentifier";
  *(_QWORD *)(v12 + 8) = 17;
  *(_BYTE *)(v12 + 16) = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  _QWORD *v16;
  char *v17;
  _QWORD *v18;
  char *v19;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static NCProtoActiveConversation._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static NCProtoActiveConversation._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_242A30CF0;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 1;
  *(_QWORD *)v7 = "uuidString";
  *(_QWORD *)(v7 + 8) = 10;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 2;
  *(_QWORD *)v11 = "displayName";
  *(_QWORD *)(v11 + 8) = 11;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 3;
  *(_QWORD *)v13 = "avMode";
  *((_QWORD *)v13 + 1) = 6;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 4;
  *(_QWORD *)v15 = "remoteMemberCount";
  *((_QWORD *)v15 + 1) = 17;
  v15[16] = 2;
  v10();
  v16 = (_QWORD *)(v6 + 4 * v3);
  v17 = (char *)v16 + *(int *)(v1 + 48);
  *v16 = 5;
  *(_QWORD *)v17 = "remoteMemberContactIdentifiers";
  *((_QWORD *)v17 + 1) = 30;
  v17[16] = 2;
  v10();
  v18 = (_QWORD *)(v6 + 5 * v3);
  v19 = (char *)v18 + *(int *)(v1 + 48);
  *v18 = 6;
  *(_QWORD *)v19 = "state";
  *((_QWORD *)v19 + 1) = 5;
  v19[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static NCProtoContinuityCall._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static NCProtoContinuityCall._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_242A30CE0;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 1;
  *(_QWORD *)v7 = "uuidString";
  *(_QWORD *)(v7 + 8) = 10;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 2;
  *(_QWORD *)v11 = "displayName";
  *(_QWORD *)(v11 + 8) = 11;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 3;
  *(_QWORD *)v13 = "status";
  *((_QWORD *)v13 + 1) = 6;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 4;
  *(_QWORD *)v15 = "conversationUuidString";
  *((_QWORD *)v15 + 1) = 22;
  v15[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static NCProtoContinuityCall.Status._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static NCProtoContinuityCall.Status._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_242A30D30;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 0;
  *(_QWORD *)v7 = "Unknown";
  *(_QWORD *)(v7 + 8) = 7;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 1;
  *(_QWORD *)v11 = "Ringing";
  *((_QWORD *)v11 + 1) = 7;
  v11[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static NCProtoStartedSessionEvent._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static NCProtoStartedSessionEvent._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_242A30CE0;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 1;
  *(_QWORD *)v7 = "identifier";
  *(_QWORD *)(v7 + 8) = 10;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 2;
  *(_QWORD *)v11 = "userAccountInfoData";
  *(_QWORD *)(v11 + 8) = 19;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 3;
  *(_QWORD *)v13 = "memberAssociationPrimaryInfo";
  *((_QWORD *)v13 + 1) = 28;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 4;
  *(_QWORD *)v15 = "avMode";
  *((_QWORD *)v15 + 1) = 6;
  v15[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static NCProtoContactUpdateEvent._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static NCProtoContactUpdateEvent._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_242A30D30;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 1;
  *(_QWORD *)v7 = "identifierHash";
  *(_QWORD *)(v7 + 8) = 14;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 2;
  *(_QWORD *)v11 = "contacts";
  *((_QWORD *)v11 + 1) = 8;
  v11[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;
  uint64_t v12;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static NCProtoJoinEvent._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static NCProtoJoinEvent._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_242A30D10;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 1;
  *(_QWORD *)v7 = "identifierHash";
  *(_QWORD *)(v7 + 8) = 14;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 2;
  *(_QWORD *)v11 = "userAccountInfoData";
  *((_QWORD *)v11 + 1) = 19;
  v11[16] = 2;
  v10();
  v12 = (uint64_t)v6 + 2 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + 2 * v3) = 3;
  *(_QWORD *)v12 = "policyInfos";
  *(_QWORD *)(v12 + 8) = 11;
  *(_BYTE *)(v12 + 16) = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;
  uint64_t v12;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static NCProtoRecentCallsDidChangeEvent._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static NCProtoRecentCallsDidChangeEvent._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_242A30D10;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 1;
  *(_QWORD *)v7 = "recentCalls";
  *(_QWORD *)(v7 + 8) = 11;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 2;
  *(_QWORD *)v11 = "contactInfos";
  *((_QWORD *)v11 + 1) = 12;
  v11[16] = 2;
  v10();
  v12 = (uint64_t)v6 + 2 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + 2 * v3) = 3;
  *(_QWORD *)v12 = "recentCallsInfo";
  *(_QWORD *)(v12 + 8) = 15;
  *(_BYTE *)(v12 + 16) = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;
  uint64_t v12;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static NCProtoSuggestionAdvertisement._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static NCProtoSuggestionAdvertisement._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_242A30D10;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 1;
  *(_QWORD *)v7 = "suggestionIdentifier";
  *(_QWORD *)(v7 + 8) = 20;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 2;
  *(_QWORD *)v11 = "deviceIdentifier";
  *((_QWORD *)v11 + 1) = 16;
  v11[16] = 2;
  v10();
  v12 = (uint64_t)v6 + 2 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + 2 * v3) = 3;
  *(_QWORD *)v12 = "type";
  *(_QWORD *)(v12 + 8) = 4;
  *(_BYTE *)(v12 + 16) = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static NCProtoSuggestionAdvertisement.SuggestionType._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static NCProtoSuggestionAdvertisement.SuggestionType._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_242A30D30;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 0;
  *(_QWORD *)v7 = "PullRequest";
  *(_QWORD *)(v7 + 8) = 11;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 1;
  *(_QWORD *)v11 = "IntelligentRoutingRecommendation";
  *((_QWORD *)v11 + 1) = 32;
  v11[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  _QWORD *v16;
  char *v17;
  _QWORD *v18;
  char *v19;
  _QWORD *v20;
  char *v21;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static NCProtoLagunaConnectionRequest._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static NCProtoLagunaConnectionRequest._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_242A30D40;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 1;
  *(_QWORD *)v7 = "recentCalls";
  *(_QWORD *)(v7 + 8) = 11;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 2;
  *(_QWORD *)v11 = "contactInfos";
  *(_QWORD *)(v11 + 8) = 12;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 3;
  *(_QWORD *)v13 = "callState";
  *((_QWORD *)v13 + 1) = 9;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 4;
  *(_QWORD *)v15 = "activeConversations";
  *((_QWORD *)v15 + 1) = 19;
  v15[16] = 2;
  v10();
  v16 = (_QWORD *)(v6 + 4 * v3);
  v17 = (char *)v16 + *(int *)(v1 + 48);
  *v16 = 5;
  *(_QWORD *)v17 = "favorites";
  *((_QWORD *)v17 + 1) = 9;
  v17[16] = 2;
  v10();
  v18 = (_QWORD *)(v6 + 5 * v3);
  v19 = (char *)v18 + *(int *)(v1 + 48);
  *v18 = 6;
  *(_QWORD *)v19 = "continuityCalls";
  *((_QWORD *)v19 + 1) = 15;
  v19[16] = 2;
  v10();
  v20 = (_QWORD *)(v6 + 6 * v3);
  v21 = (char *)v20 + *(int *)(v1 + 48);
  *v20 = 7;
  *(_QWORD *)v21 = "recentCallsInfo";
  *((_QWORD *)v21 + 1) = 15;
  v21[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static NCProtoAddMemberRequest._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static NCProtoAddMemberRequest._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_242A30CE0;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 1;
  *(_QWORD *)v7 = "memberToken";
  *(_QWORD *)(v7 + 8) = 11;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 2;
  *(_QWORD *)v11 = "conversationIdentifier";
  *(_QWORD *)(v11 + 8) = 22;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 3;
  *(_QWORD *)v13 = "context";
  *((_QWORD *)v13 + 1) = 7;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 4;
  *(_QWORD *)v15 = "associationVoucherData";
  *((_QWORD *)v15 + 1) = 22;
  v15[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  _QWORD *v16;
  char *v17;
  _QWORD *v18;
  char *v19;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static NCProtoAddMemberRequest.NearbyConversationPullContext._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static NCProtoAddMemberRequest.NearbyConversationPullContext._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_242A30CF0;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 0;
  *(_QWORD *)v7 = "Unknown";
  *(_QWORD *)(v7 + 8) = 7;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 1;
  *(_QWORD *)v11 = "PointOfPlayback";
  *(_QWORD *)(v11 + 8) = 15;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 2;
  *(_QWORD *)v13 = "ControlCenterWithActivity";
  *((_QWORD *)v13 + 1) = 25;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 3;
  *(_QWORD *)v15 = "ControlCenterWithoutActivity";
  *((_QWORD *)v15 + 1) = 28;
  v15[16] = 2;
  v10();
  v16 = (_QWORD *)(v6 + 4 * v3);
  v17 = (char *)v16 + *(int *)(v1 + 48);
  *v16 = 4;
  *(_QWORD *)v17 = "SystemWake";
  *((_QWORD *)v17 + 1) = 10;
  v17[16] = 2;
  v10();
  v18 = (_QWORD *)(v6 + 5 * v3);
  v19 = (char *)v18 + *(int *)(v1 + 48);
  *v18 = 5;
  *(_QWORD *)v19 = "FaceTimeApp";
  *((_QWORD *)v19 + 1) = 11;
  v19[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static NCProtoAddMemberResponse._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static NCProtoAddMemberResponse._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_242A30D30;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 1;
  *(_QWORD *)v7 = "identifierHash";
  *(_QWORD *)(v7 + 8) = 14;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 2;
  *(_QWORD *)v11 = "policyInfos";
  *((_QWORD *)v11 + 1) = 11;
  v11[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static NCProtoPullLagunaSessionToTVRequest._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static NCProtoPullLagunaSessionToTVRequest._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_242A30D30;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 1;
  *(_QWORD *)v7 = "conversationIdentifier";
  *(_QWORD *)(v7 + 8) = 22;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 2;
  *(_QWORD *)v11 = "reason";
  *((_QWORD *)v11 + 1) = 6;
  v11[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;
  uint64_t v12;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static NCProtoPullLagunaSessionToTVRequest.Reason._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static NCProtoPullLagunaSessionToTVRequest.Reason._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_242A30D10;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 0;
  *(_QWORD *)v7 = "Unknown";
  *(_QWORD *)(v7 + 8) = 7;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 1;
  *(_QWORD *)v11 = "UserInitiated";
  *((_QWORD *)v11 + 1) = 13;
  v11[16] = 2;
  v10();
  v12 = (uint64_t)v6 + 2 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + 2 * v3) = 2;
  *(_QWORD *)v12 = "SystemWake";
  *(_QWORD *)(v12 + 8) = 10;
  *(_BYTE *)(v12 + 16) = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;
  uint64_t v12;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static NCProtoTransferActiveConversationRequest._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static NCProtoTransferActiveConversationRequest._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_242A30D10;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 1;
  *(_QWORD *)v7 = "activeConversationUuidString";
  *(_QWORD *)(v7 + 8) = 28;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 2;
  *(_QWORD *)v11 = "isAudioEnabled";
  *((_QWORD *)v11 + 1) = 14;
  v11[16] = 2;
  v10();
  v12 = (uint64_t)v6 + 2 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + 2 * v3) = 3;
  *(_QWORD *)v12 = "isVideoEnabled";
  *(_QWORD *)(v12 + 8) = 14;
  *(_BYTE *)(v12 + 16) = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;
  uint64_t v12;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static NCProtoStartLagunaSessionRequest.RecentCallFetchType._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static NCProtoStartLagunaSessionRequest.RecentCallFetchType._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_242A30D10;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 0;
  *(_QWORD *)v7 = "Default";
  *(_QWORD *)(v7 + 8) = 7;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 1;
  *(_QWORD *)v11 = "FaceTime";
  *((_QWORD *)v11 + 1) = 8;
  v11[16] = 2;
  v10();
  v12 = (uint64_t)v6 + 2 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + 2 * v3) = 2;
  *(_QWORD *)v12 = "Telephony";
  *(_QWORD *)(v12 + 8) = 9;
  *(_BYTE *)(v12 + 16) = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;
  uint64_t v12;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static NCProtoCallInfo._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static NCProtoCallInfo._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_242A30D10;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 1;
  *(_QWORD *)v7 = "callerIdSubstring";
  *(_QWORD *)(v7 + 8) = 17;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 2;
  *(_QWORD *)v11 = "callIdentifier";
  *((_QWORD *)v11 + 1) = 14;
  v11[16] = 2;
  v10();
  v12 = (uint64_t)v6 + 2 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + 2 * v3) = 3;
  *(_QWORD *)v12 = "displayName";
  *(_QWORD *)(v12 + 8) = 11;
  *(_BYTE *)(v12 + 16) = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  _QWORD *v16;
  char *v17;
  _QWORD *v18;
  char *v19;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static NCProtoStartLagunaSessionResponse._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static NCProtoStartLagunaSessionResponse._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_242A30CF0;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 1;
  *(_QWORD *)v7 = "recentCalls";
  *(_QWORD *)(v7 + 8) = 11;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 2;
  *(_QWORD *)v11 = "contactInfos";
  *(_QWORD *)(v11 + 8) = 12;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 3;
  *(_QWORD *)v13 = "activeConversations";
  *((_QWORD *)v13 + 1) = 19;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 4;
  *(_QWORD *)v15 = "favorites";
  *((_QWORD *)v15 + 1) = 9;
  v15[16] = 2;
  v10();
  v16 = (_QWORD *)(v6 + 4 * v3);
  v17 = (char *)v16 + *(int *)(v1 + 48);
  *v16 = 5;
  *(_QWORD *)v17 = "continuityCalls";
  *((_QWORD *)v17 + 1) = 15;
  v17[16] = 2;
  v10();
  v18 = (_QWORD *)(v6 + 5 * v3);
  v19 = (char *)v18 + *(int *)(v1 + 48);
  *v18 = 6;
  *(_QWORD *)v19 = "recentCallsInfo";
  *((_QWORD *)v19 + 1) = 15;
  v19[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;
  uint64_t v12;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static NCProtoJoinActiveConversationRequest._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static NCProtoJoinActiveConversationRequest._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_242A30D10;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 1;
  *(_QWORD *)v7 = "activeConversationUuidString";
  *(_QWORD *)(v7 + 8) = 28;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 2;
  *(_QWORD *)v11 = "isAudioEnabled";
  *((_QWORD *)v11 + 1) = 14;
  v11[16] = 2;
  v10();
  v12 = (uint64_t)v6 + 2 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + 2 * v3) = 3;
  *(_QWORD *)v12 = "isVideoEnabled";
  *(_QWORD *)(v12 + 8) = 14;
  *(_BYTE *)(v12 + 16) = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static NCProtoGetAddressableContactsResponse._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static NCProtoGetAddressableContactsResponse._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_242A30D30;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 1;
  *(_QWORD *)v7 = "contacts";
  *(_QWORD *)(v7 + 8) = 8;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 2;
  *(_QWORD *)v11 = "contactSortOrder";
  *((_QWORD *)v11 + 1) = 16;
  v11[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static NCProtoCallState._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static NCProtoCallState._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_242A30CE0;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 1;
  *(_QWORD *)v7 = "isVideoEnabled";
  *(_QWORD *)(v7 + 8) = 14;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 2;
  *(_QWORD *)v11 = "isAudioEnabled";
  *(_QWORD *)(v11 + 8) = 14;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 3;
  *(_QWORD *)v13 = "avMode";
  *((_QWORD *)v13 + 1) = 6;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 4;
  *(_QWORD *)v15 = "isCaptioningEnabled";
  *((_QWORD *)v15 + 1) = 19;
  v15[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  uint64_t v16;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static NCProtoDeviceTokenRequest._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static NCProtoDeviceTokenRequest._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_242A30D20;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 1;
  *(_QWORD *)v7 = "conversationIdentifier";
  *(_QWORD *)(v7 + 8) = 22;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 2;
  *(_QWORD *)v11 = "memberAssociationPrimaryInfo";
  *(_QWORD *)(v11 + 8) = 28;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 3;
  *(_QWORD *)v13 = "callState";
  *((_QWORD *)v13 + 1) = 9;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 4;
  *(_QWORD *)v15 = "shouldLaunchFaceTime";
  *((_QWORD *)v15 + 1) = 20;
  v15[16] = 2;
  v10();
  v16 = v6 + 4 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + 4 * v3) = 5;
  *(_QWORD *)v16 = "conversationHandoffType";
  *(_QWORD *)(v16 + 8) = 23;
  *(_BYTE *)(v16 + 16) = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  uint64_t v16;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static NCProtoDeviceTokenRequest.ConversationHandoffType._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static NCProtoDeviceTokenRequest.ConversationHandoffType._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_242A30D20;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 0;
  *(_QWORD *)v7 = "Unknown";
  *(_QWORD *)(v7 + 8) = 7;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 1;
  *(_QWORD *)v11 = "Pull";
  *(_QWORD *)(v11 + 8) = 4;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 2;
  *(_QWORD *)v13 = "Push";
  *((_QWORD *)v13 + 1) = 4;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 3;
  *(_QWORD *)v15 = "Incoming";
  *((_QWORD *)v15 + 1) = 8;
  v15[16] = 2;
  v10();
  v16 = v6 + 4 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + 4 * v3) = 4;
  *(_QWORD *)v16 = "Outgoing";
  *(_QWORD *)(v16 + 8) = 8;
  *(_BYTE *)(v16 + 16) = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static NCProtoDeviceTokenResponse._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static NCProtoDeviceTokenResponse._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_242A30D30;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 1;
  *(_QWORD *)v7 = "deviceToken";
  *(_QWORD *)(v7 + 8) = 11;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 2;
  *(_QWORD *)v11 = "associationVoucherData";
  *((_QWORD *)v11 + 1) = 22;
  v11[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;
  uint64_t v12;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static NCProtoDisconnectRequest._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static NCProtoDisconnectRequest._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_242A30D10;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 1;
  *(_QWORD *)v7 = "identifierHash";
  *(_QWORD *)(v7 + 8) = 14;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 2;
  *(_QWORD *)v11 = "isPullingBackToPhone";
  *((_QWORD *)v11 + 1) = 20;
  v11[16] = 2;
  v10();
  v12 = (uint64_t)v6 + 2 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + 2 * v3) = 3;
  *(_QWORD *)v12 = "disconnectReason";
  *(_QWORD *)(v12 + 8) = 16;
  *(_BYTE *)(v12 + 16) = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static NCProtoDisconnectRequest.DisconnectReason._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static NCProtoDisconnectRequest.DisconnectReason._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_242A30CE0;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 0;
  *(_QWORD *)v7 = "Unknown";
  *(_QWORD *)(v7 + 8) = 7;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 1;
  *(_QWORD *)v11 = "EndingHandoff";
  *(_QWORD *)(v11 + 8) = 13;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 2;
  *(_QWORD *)v13 = "PullingBackToPhone";
  *((_QWORD *)v13 + 1) = 18;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 3;
  *(_QWORD *)v15 = "BlockedContact";
  *((_QWORD *)v15 + 1) = 14;
  v15[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  uint64_t v16;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static NCProtoMemberAssociationPrimaryInfo._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static NCProtoMemberAssociationPrimaryInfo._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_242A30D20;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 1;
  *(_QWORD *)v7 = "conversationGroupUuidString";
  *(_QWORD *)(v7 + 8) = 27;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 2;
  *(_QWORD *)v11 = "handleData";
  *(_QWORD *)(v11 + 8) = 10;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 3;
  *(_QWORD *)v13 = "identifier";
  *((_QWORD *)v13 + 1) = 10;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 4;
  *(_QWORD *)v15 = "avcIdentifier";
  *((_QWORD *)v15 + 1) = 13;
  v15[16] = 2;
  v10();
  v16 = v6 + 4 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + 4 * v3) = 5;
  *(_QWORD *)v16 = "supportedTypes";
  *(_QWORD *)(v16 + 8) = 14;
  *(_BYTE *)(v16 + 16) = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;
  uint64_t v12;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static NCProtoMemberAssociationPrimaryInfo.MemberAssociationType._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static NCProtoMemberAssociationPrimaryInfo.MemberAssociationType._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_242A30D10;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 0;
  *(_QWORD *)v7 = "Unknown";
  *(_QWORD *)(v7 + 8) = 7;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 1;
  *(_QWORD *)v11 = "Expanse";
  *((_QWORD *)v11 + 1) = 7;
  v11[16] = 2;
  v10();
  v12 = (uint64_t)v6 + 2 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + 2 * v3) = 2;
  *(_QWORD *)v12 = "IdentityClaiming";
  *(_QWORD *)(v12 + 8) = 16;
  *(_BYTE *)(v12 + 16) = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;
  uint64_t v12;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static NCProtoIDSProxyMessage._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static NCProtoIDSProxyMessage._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_242A30D10;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 1;
  *(_QWORD *)v7 = "rawData";
  *(_QWORD *)(v7 + 8) = 7;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 2;
  *(_QWORD *)v11 = "groupUpdate";
  *((_QWORD *)v11 + 1) = 11;
  v11[16] = 2;
  v10();
  v12 = (uint64_t)v6 + 2 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + 2 * v3) = 3;
  *(_QWORD *)v12 = "resource";
  *(_QWORD *)(v12 + 8) = 8;
  *(_BYTE *)(v12 + 16) = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;
  uint64_t v12;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static NCProtoIDSProxyMessage.RawData._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static NCProtoIDSProxyMessage.RawData._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_242A30D10;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 1;
  *(_QWORD *)v7 = "messageData";
  *(_QWORD *)(v7 + 8) = 11;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 2;
  *(_QWORD *)v11 = "fromID";
  *((_QWORD *)v11 + 1) = 6;
  v11[16] = 2;
  v10();
  v12 = (uint64_t)v6 + 2 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + 2 * v3) = 3;
  *(_QWORD *)v12 = "context";
  *(_QWORD *)(v12 + 8) = 7;
  *(_BYTE *)(v12 + 16) = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static NCProtoIDSProxyMessage.Resource._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static NCProtoIDSProxyMessage.Resource._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_242A30CE0;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 1;
  *(_QWORD *)v7 = "resourceData";
  *(_QWORD *)(v7 + 8) = 12;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 2;
  *(_QWORD *)v11 = "metadata";
  *(_QWORD *)(v11 + 8) = 8;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 3;
  *(_QWORD *)v13 = "fromID";
  *((_QWORD *)v13 + 1) = 6;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 4;
  *(_QWORD *)v15 = "context";
  *((_QWORD *)v15 + 1) = 7;
  v15[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  unint64_t v10;
  _QWORD *v11;
  char *v12;
  _QWORD *v13;
  char *v14;
  _QWORD *v15;
  char *v16;
  _QWORD *v17;
  char *v18;
  _QWORD *v19;
  char *v20;
  _QWORD *v21;
  char *v22;
  uint64_t v23;
  _QWORD *v24;
  char *v25;
  _QWORD *v26;
  char *v27;
  _QWORD *v28;
  char *v29;
  _QWORD *v30;
  char *v31;
  uint64_t v33;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static NCProtoIDSProxyMessage.GroupUpdate._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static NCProtoIDSProxyMessage.GroupUpdate._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v33 = swift_allocObject();
  *(_OWORD *)(v33 + 16) = xmmword_242A30D50;
  v5 = v33 + v4;
  v6 = v33 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v33 + v4) = 1;
  *(_QWORD *)v6 = "isInitiator";
  *(_QWORD *)(v6 + 8) = 11;
  *(_BYTE *)(v6 + 16) = 2;
  v7 = *MEMORY[0x24BE5C318];
  v8 = type metadata accessor for _NameMap.NameDescription();
  v9 = *(void (**)(void))(*(_QWORD *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  v10 = v5 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v3) = 2;
  *(_QWORD *)v10 = "groupUUID";
  *(_QWORD *)(v10 + 8) = 9;
  *(_BYTE *)(v10 + 16) = 2;
  v9();
  v11 = (_QWORD *)(v5 + 2 * v3);
  v12 = (char *)v11 + *(int *)(v1 + 48);
  *v11 = 3;
  *(_QWORD *)v12 = "participantID";
  *((_QWORD *)v12 + 1) = 13;
  v12[16] = 2;
  v9();
  v13 = (_QWORD *)(v5 + 3 * v3);
  v14 = (char *)v13 + *(int *)(v1 + 48);
  *v13 = 4;
  *(_QWORD *)v14 = "participantDestinationID";
  *((_QWORD *)v14 + 1) = 24;
  v14[16] = 2;
  v9();
  v15 = (_QWORD *)(v5 + 4 * v3);
  v16 = (char *)v15 + *(int *)(v1 + 48);
  *v15 = 5;
  *(_QWORD *)v16 = "updateType";
  *((_QWORD *)v16 + 1) = 10;
  v16[16] = 2;
  v9();
  v17 = (_QWORD *)(v5 + 5 * v3);
  v18 = (char *)v17 + *(int *)(v1 + 48);
  *v17 = 6;
  *(_QWORD *)v18 = "updateSubtype";
  *((_QWORD *)v18 + 1) = 13;
  v18[16] = 2;
  v9();
  v19 = (_QWORD *)(v5 + 6 * v3);
  v20 = (char *)v19 + *(int *)(v1 + 48);
  *v19 = 7;
  *(_QWORD *)v20 = "fromServer";
  *((_QWORD *)v20 + 1) = 10;
  v20[16] = 2;
  v9();
  v21 = (_QWORD *)(v5 + 7 * v3);
  v22 = (char *)v21 + *(int *)(v1 + 48);
  *v21 = 8;
  *(_QWORD *)v22 = "serverDate";
  *((_QWORD *)v22 + 1) = 10;
  v22[16] = 2;
  v9();
  v23 = v5 + 8 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + 8 * v3) = 9;
  *(_QWORD *)v23 = "participantData";
  *(_QWORD *)(v23 + 8) = 15;
  *(_BYTE *)(v23 + 16) = 2;
  v9();
  v24 = (_QWORD *)(v5 + 9 * v3);
  v25 = (char *)v24 + *(int *)(v1 + 48);
  *v24 = 10;
  *(_QWORD *)v25 = "clientContextData";
  *((_QWORD *)v25 + 1) = 17;
  v25[16] = 2;
  v9();
  v26 = (_QWORD *)(v5 + 10 * v3);
  v27 = (char *)v26 + *(int *)(v1 + 48);
  *v26 = 11;
  *(_QWORD *)v27 = "members";
  *((_QWORD *)v27 + 1) = 7;
  v27[16] = 2;
  v9();
  v28 = (_QWORD *)(v5 + 11 * v3);
  v29 = (char *)v28 + *(int *)(v1 + 48);
  *v28 = 12;
  *(_QWORD *)v29 = "participantIDs";
  *((_QWORD *)v29 + 1) = 14;
  v29[16] = 2;
  v9();
  v30 = (_QWORD *)(v5 + 12 * v3);
  v31 = (char *)v30 + *(int *)(v1 + 48);
  *v30 = 13;
  *(_QWORD *)v31 = "relaySessionID";
  *((_QWORD *)v31 + 1) = 14;
  v31[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

uint64_t static NCProtoConversationAVMode._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static NCProtoConversationAVMode._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static NCProtoConversationAVMode._protobuf_nameMap, a1);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance NCProtoConversationAVMode@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance NCProtoConversationAVMode(&one-time initialization token for _protobuf_nameMap, (uint64_t)static NCProtoConversationAVMode._protobuf_nameMap, a1);
}

uint64_t static NCProtoConversationState._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static NCProtoConversationAVMode._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static NCProtoConversationState._protobuf_nameMap, a1);
}

uint64_t static NCProtoConversationAVMode._protobuf_nameMap.getter@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;

  if (*a1 != -1)
    swift_once();
  v5 = type metadata accessor for _NameMap();
  v6 = __swift_project_value_buffer(v5, a2);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a3, v6, v5);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance NCProtoConversationState@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance NCProtoConversationAVMode(&one-time initialization token for _protobuf_nameMap, (uint64_t)static NCProtoConversationState._protobuf_nameMap, a1);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance NCProtoConversationAVMode@<X0>(_QWORD *a1@<X2>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;

  if (*a1 != -1)
    swift_once();
  v5 = type metadata accessor for _NameMap();
  v6 = __swift_project_value_buffer(v5, a2);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a3, v6, v5);
}

unint64_t static NCProtoContactInfo.protoMessageName.getter()
{
  return 0xD000000000000013;
}

uint64_t static NCProtoContactInfo._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static NCProtoConversationAVMode._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static NCProtoContactInfo._protobuf_nameMap, a1);
}

uint64_t NCProtoContactInfo.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t result;
  char v2;
  uint64_t v3;
  uint64_t v4;

  result = dispatch thunk of Decoder.nextFieldNumber()();
  v3 = v0;
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
        case 2:
        case 3:
        case 4:
        case 5:
        case 6:
          v4 = v3;
          dispatch thunk of Decoder.decodeSingularStringField(value:)();
          goto LABEL_6;
        case 7:
          v4 = v3;
          dispatch thunk of Decoder.decodeSingularBytesField(value:)();
          goto LABEL_6;
        case 8:
          type metadata accessor for NCProtoContactInfo(0);
          v4 = v3;
          dispatch thunk of Decoder.decodeSingularStringField(value:)();
LABEL_6:
          v3 = v4;
          break;
        default:
          break;
      }
      result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t NCProtoContactInfo.traverse<A>(visitor:)()
{
  _QWORD *v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t result;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;

  v2 = v0[1];
  v3 = HIBYTE(v2) & 0xF;
  if ((v2 & 0x2000000000000000) == 0)
    v3 = *v0 & 0xFFFFFFFFFFFFLL;
  if (!v3 || (result = dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(), !v1))
  {
    v5 = v0[3];
    v6 = HIBYTE(v5) & 0xF;
    if ((v5 & 0x2000000000000000) == 0)
      v6 = v0[2] & 0xFFFFFFFFFFFFLL;
    if (!v6 || (result = dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(), !v1))
    {
      v7 = v0[5];
      v8 = HIBYTE(v7) & 0xF;
      if ((v7 & 0x2000000000000000) == 0)
        v8 = v0[4] & 0xFFFFFFFFFFFFLL;
      if (!v8 || (result = dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(), !v1))
      {
        v9 = v0[7];
        v10 = HIBYTE(v9) & 0xF;
        if ((v9 & 0x2000000000000000) == 0)
          v10 = v0[6] & 0xFFFFFFFFFFFFLL;
        if (!v10 || (result = dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(), !v1))
        {
          v11 = v0[9];
          v12 = HIBYTE(v11) & 0xF;
          if ((v11 & 0x2000000000000000) == 0)
            v12 = v0[8] & 0xFFFFFFFFFFFFLL;
          if (!v12 || (result = dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(), !v1))
          {
            v13 = v0[11];
            v14 = HIBYTE(v13) & 0xF;
            if ((v13 & 0x2000000000000000) == 0)
              v14 = v0[10] & 0xFFFFFFFFFFFFLL;
            if (!v14 || (result = dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(), !v1))
              __asm { BR              X10 }
          }
        }
      }
    }
  }
  return result;
}

uint64_t closure #1 in NCProtoContactInfo.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t result;

  result = type metadata accessor for NCProtoContactInfo(0);
  if (*(_QWORD *)(a1 + *(int *)(result + 48) + 8))
    return dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)();
  return result;
}

Swift::Int NCProtoContactInfo.hashValue.getter()
{
  return NCProtoContactInfo.hashValue.getter(type metadata accessor for NCProtoContactInfo, &lazy protocol witness table cache variable for type NCProtoContactInfo and conformance NCProtoContactInfo, (uint64_t)&protocol conformance descriptor for NCProtoContactInfo);
}

uint64_t protocol witness for Message.init() in conformance NCProtoContactInfo@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  _QWORD *v5;

  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0xE000000000000000;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0xE000000000000000;
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0xE000000000000000;
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 56) = 0xE000000000000000;
  *(_QWORD *)(a2 + 64) = 0;
  *(_QWORD *)(a2 + 72) = 0xE000000000000000;
  *(_QWORD *)(a2 + 80) = 0;
  *(_QWORD *)(a2 + 88) = 0xE000000000000000;
  *(_OWORD *)(a2 + 96) = xmmword_242A30CB0;
  result = UnknownStorage.init()();
  v5 = (_QWORD *)(a2 + *(int *)(a1 + 48));
  *v5 = 0;
  v5[1] = 0;
  return result;
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance NCProtoContactInfo()
{
  return 0xD000000000000013;
}

uint64_t protocol witness for Message.unknownFields.getter in conformance NCProtoContactInfo@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = v2 + *(int *)(a1 + 44);
  v5 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, v4, v5);
}

uint64_t protocol witness for Message.unknownFields.setter in conformance NCProtoContactInfo(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = v2 + *(int *)(a2 + 44);
  v5 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 40))(v4, a1, v5);
}

uint64_t (*protocol witness for Message.unknownFields.modify in conformance NCProtoContactInfo())()
{
  return NCProtoContactInfo.namePrefix.modify;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance NCProtoContactInfo()
{
  return NCProtoContactInfo.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance NCProtoContactInfo()
{
  return NCProtoContactInfo.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance NCProtoContactInfo()
{
  lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoContactInfo and conformance NCProtoContactInfo, type metadata accessor for NCProtoContactInfo, (uint64_t)&protocol conformance descriptor for NCProtoContactInfo);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance NCProtoContactInfo@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance NCProtoConversationAVMode(&one-time initialization token for _protobuf_nameMap, (uint64_t)static NCProtoContactInfo._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance NCProtoContactInfo()
{
  lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoContactInfo and conformance NCProtoContactInfo, type metadata accessor for NCProtoContactInfo, (uint64_t)&protocol conformance descriptor for NCProtoContactInfo);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance NCProtoContactInfo()
{
  lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoContactInfo and conformance NCProtoContactInfo, type metadata accessor for NCProtoContactInfo, (uint64_t)&protocol conformance descriptor for NCProtoContactInfo);
  return Message.hash(into:)();
}

unint64_t static NCProtoContactHandleAnonym.protoMessageName.getter()
{
  return 0xD00000000000001BLL;
}

uint64_t static NCProtoContactHandleAnonym._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static NCProtoConversationAVMode._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static NCProtoContactHandleAnonym._protobuf_nameMap, a1);
}

uint64_t NCProtoContactHandleAnonym.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t result;
  char v2;

  result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
        case 3:
        case 4:
          dispatch thunk of Decoder.decodeSingularStringField(value:)();
          break;
        case 2:
          lazy protocol witness table accessor for type NCProtoContactHandleAnonym.AnonymType and conformance NCProtoContactHandleAnonym.AnonymType();
          dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)();
          break;
        default:
          break;
      }
      result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t NCProtoContactHandleAnonym.traverse<A>(visitor:)()
{
  _QWORD *v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t result;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;

  v2 = v0[1];
  v3 = HIBYTE(v2) & 0xF;
  if ((v2 & 0x2000000000000000) == 0)
    v3 = *v0 & 0xFFFFFFFFFFFFLL;
  if (!v3 || (result = dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(), !v1))
  {
    if (!v0[2]
      || (lazy protocol witness table accessor for type NCProtoContactHandleAnonym.AnonymType and conformance NCProtoContactHandleAnonym.AnonymType(),
          result = dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)(),
          !v1))
    {
      v5 = v0[5];
      v6 = HIBYTE(v5) & 0xF;
      if ((v5 & 0x2000000000000000) == 0)
        v6 = v0[4] & 0xFFFFFFFFFFFFLL;
      if (!v6 || (result = dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(), !v1))
      {
        v7 = v0[7];
        v8 = HIBYTE(v7) & 0xF;
        if ((v7 & 0x2000000000000000) == 0)
          v8 = v0[6] & 0xFFFFFFFFFFFFLL;
        if (!v8 || (result = dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(), !v1))
        {
          type metadata accessor for NCProtoContactHandleAnonym(0);
          return UnknownStorage.traverse<A>(visitor:)();
        }
      }
    }
  }
  return result;
}

Swift::Int NCProtoContactHandleAnonym.hashValue.getter()
{
  return NCProtoContactInfo.hashValue.getter(type metadata accessor for NCProtoContactHandleAnonym, &lazy protocol witness table cache variable for type NCProtoContactHandleAnonym and conformance NCProtoContactHandleAnonym, (uint64_t)&protocol conformance descriptor for NCProtoContactHandleAnonym);
}

uint64_t protocol witness for Message.init() in conformance NCProtoContactHandleAnonym@<X0>(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0xE000000000000000;
  *(_QWORD *)(a1 + 16) = 0;
  *(_BYTE *)(a1 + 24) = 1;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0xE000000000000000;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0xE000000000000000;
  return UnknownStorage.init()();
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance NCProtoContactHandleAnonym()
{
  return 0xD00000000000001BLL;
}

uint64_t (*protocol witness for Message.unknownFields.modify in conformance NCProtoContactHandleAnonym())()
{
  return NCProtoContactInfo.namePrefix.modify;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance NCProtoContactHandleAnonym()
{
  return NCProtoContactHandleAnonym.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance NCProtoContactHandleAnonym()
{
  return NCProtoContactHandleAnonym.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance NCProtoContactHandleAnonym()
{
  lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoContactHandleAnonym and conformance NCProtoContactHandleAnonym, type metadata accessor for NCProtoContactHandleAnonym, (uint64_t)&protocol conformance descriptor for NCProtoContactHandleAnonym);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance NCProtoContactHandleAnonym@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance NCProtoConversationAVMode(&one-time initialization token for _protobuf_nameMap, (uint64_t)static NCProtoContactHandleAnonym._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance NCProtoContactHandleAnonym()
{
  lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoContactHandleAnonym and conformance NCProtoContactHandleAnonym, type metadata accessor for NCProtoContactHandleAnonym, (uint64_t)&protocol conformance descriptor for NCProtoContactHandleAnonym);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance NCProtoContactHandleAnonym()
{
  lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoContactHandleAnonym and conformance NCProtoContactHandleAnonym, type metadata accessor for NCProtoContactHandleAnonym, (uint64_t)&protocol conformance descriptor for NCProtoContactHandleAnonym);
  return Message.hash(into:)();
}

uint64_t static NCProtoContactHandleAnonym.AnonymType._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static NCProtoConversationAVMode._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static NCProtoContactHandleAnonym.AnonymType._protobuf_nameMap, a1);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance NCProtoContactHandleAnonym.AnonymType@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance NCProtoConversationAVMode(&one-time initialization token for _protobuf_nameMap, (uint64_t)static NCProtoContactHandleAnonym.AnonymType._protobuf_nameMap, a1);
}

unint64_t static NCProtoContinuityFavorite.protoMessageName.getter()
{
  return 0xD00000000000001ALL;
}

uint64_t static NCProtoContinuityFavorite._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static NCProtoConversationAVMode._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static NCProtoContinuityFavorite._protobuf_nameMap, a1);
}

uint64_t NCProtoContinuityFavorite.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t result;
  char v2;

  result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
          closure #1 in NCProtoContinuityFavorite.decodeMessage<A>(decoder:)();
          break;
        case 2:
        case 4:
        case 5:
          dispatch thunk of Decoder.decodeSingularStringField(value:)();
          break;
        case 3:
          closure #3 in NCProtoContinuityFavorite.decodeMessage<A>(decoder:)();
          break;
        default:
          break;
      }
      result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t closure #1 in NCProtoContinuityFavorite.decodeMessage<A>(decoder:)()
{
  type metadata accessor for NCProtoContinuityFavorite(0);
  type metadata accessor for NCProtoContactInfo(0);
  lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoContactInfo and conformance NCProtoContactInfo, type metadata accessor for NCProtoContactInfo, (uint64_t)&protocol conformance descriptor for NCProtoContactInfo);
  return dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
}

uint64_t closure #3 in NCProtoContinuityFavorite.decodeMessage<A>(decoder:)()
{
  type metadata accessor for NCProtoContinuityFavorite(0);
  type metadata accessor for NCProtoContactHandleAnonym(0);
  lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoContactHandleAnonym and conformance NCProtoContactHandleAnonym, type metadata accessor for NCProtoContactHandleAnonym, (uint64_t)&protocol conformance descriptor for NCProtoContactHandleAnonym);
  return dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
}

uint64_t NCProtoContinuityFavorite.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t result;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;

  result = closure #1 in NCProtoContinuityFavorite.traverse<A>(visitor:)((uint64_t)v3, a1, a2, a3);
  if (!v4)
  {
    v9 = v3[1];
    v10 = HIBYTE(v9) & 0xF;
    if ((v9 & 0x2000000000000000) == 0)
      v10 = *v3 & 0xFFFFFFFFFFFFLL;
    if (v10)
      dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)();
    closure #2 in NCProtoContinuityFavorite.traverse<A>(visitor:)((uint64_t)v3, a1, a2, a3);
    v11 = v3[3];
    v12 = HIBYTE(v11) & 0xF;
    if ((v11 & 0x2000000000000000) == 0)
      v12 = v3[2] & 0xFFFFFFFFFFFFLL;
    if (v12)
      dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)();
    v13 = v3[5];
    v14 = HIBYTE(v13) & 0xF;
    if ((v13 & 0x2000000000000000) == 0)
      v14 = v3[4] & 0xFFFFFFFFFFFFLL;
    if (v14)
      dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)();
    type metadata accessor for NCProtoContinuityFavorite(0);
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

uint64_t closure #1 in NCProtoContinuityFavorite.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  _QWORD v13[2];

  v13[1] = a4;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NCProtoContactInfo?);
  MEMORY[0x24BDAC7A8]();
  v6 = (char *)v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for NCProtoContactInfo(0);
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8]();
  v10 = (char *)v13 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for NCProtoContinuityFavorite(0);
  outlined init with copy of NCProtoContactInfo?(a1 + *(int *)(v11 + 32), (uint64_t)v6, &demangling cache variable for type metadata for NCProtoContactInfo?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7) == 1)
    return outlined destroy of NCProtoContactInfo?((uint64_t)v6, &demangling cache variable for type metadata for NCProtoContactInfo?);
  outlined init with take of NCProtoContactInfo((uint64_t)v6, (uint64_t)v10, type metadata accessor for NCProtoContactInfo);
  lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoContactInfo and conformance NCProtoContactInfo, type metadata accessor for NCProtoContactInfo, (uint64_t)&protocol conformance descriptor for NCProtoContactInfo);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of NCProtoContactInfo((uint64_t)v10, type metadata accessor for NCProtoContactInfo);
}

uint64_t closure #2 in NCProtoContinuityFavorite.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  _QWORD v13[2];

  v13[1] = a4;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NCProtoContactHandleAnonym?);
  MEMORY[0x24BDAC7A8]();
  v6 = (char *)v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for NCProtoContactHandleAnonym(0);
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8]();
  v10 = (char *)v13 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for NCProtoContinuityFavorite(0);
  outlined init with copy of NCProtoContactInfo?(a1 + *(int *)(v11 + 36), (uint64_t)v6, &demangling cache variable for type metadata for NCProtoContactHandleAnonym?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7) == 1)
    return outlined destroy of NCProtoContactInfo?((uint64_t)v6, &demangling cache variable for type metadata for NCProtoContactHandleAnonym?);
  outlined init with take of NCProtoContactInfo((uint64_t)v6, (uint64_t)v10, type metadata accessor for NCProtoContactHandleAnonym);
  lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoContactHandleAnonym and conformance NCProtoContactHandleAnonym, type metadata accessor for NCProtoContactHandleAnonym, (uint64_t)&protocol conformance descriptor for NCProtoContactHandleAnonym);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of NCProtoContactInfo((uint64_t)v10, type metadata accessor for NCProtoContactHandleAnonym);
}

Swift::Int NCProtoContinuityFavorite.hashValue.getter()
{
  return NCProtoContactInfo.hashValue.getter(type metadata accessor for NCProtoContinuityFavorite, &lazy protocol witness table cache variable for type NCProtoContinuityFavorite and conformance NCProtoContinuityFavorite, (uint64_t)&protocol conformance descriptor for NCProtoContinuityFavorite);
}

uint64_t protocol witness for Message.init() in conformance NCProtoContinuityFavorite@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  char *v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;

  *a2 = 0;
  a2[1] = 0xE000000000000000;
  a2[2] = 0;
  a2[3] = 0xE000000000000000;
  a2[4] = 0;
  a2[5] = 0xE000000000000000;
  UnknownStorage.init()();
  v4 = (char *)a2 + *(int *)(a1 + 32);
  v5 = type metadata accessor for NCProtoContactInfo(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56))(v4, 1, 1, v5);
  v6 = (char *)a2 + *(int *)(a1 + 36);
  v7 = type metadata accessor for NCProtoContactHandleAnonym(0);
  return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v6, 1, 1, v7);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance NCProtoContinuityFavorite()
{
  return 0xD00000000000001ALL;
}

uint64_t (*protocol witness for Message.unknownFields.modify in conformance NCProtoContinuityFavorite())()
{
  return NCProtoContactInfo.namePrefix.modify;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance NCProtoContinuityFavorite()
{
  return NCProtoContinuityFavorite.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance NCProtoContinuityFavorite(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return NCProtoContinuityFavorite.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance NCProtoContinuityFavorite()
{
  lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoContinuityFavorite and conformance NCProtoContinuityFavorite, type metadata accessor for NCProtoContinuityFavorite, (uint64_t)&protocol conformance descriptor for NCProtoContinuityFavorite);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance NCProtoContinuityFavorite@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance NCProtoConversationAVMode(&one-time initialization token for _protobuf_nameMap, (uint64_t)static NCProtoContinuityFavorite._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance NCProtoContinuityFavorite()
{
  lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoContinuityFavorite and conformance NCProtoContinuityFavorite, type metadata accessor for NCProtoContinuityFavorite, (uint64_t)&protocol conformance descriptor for NCProtoContinuityFavorite);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance NCProtoContinuityFavorite()
{
  lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoContinuityFavorite and conformance NCProtoContinuityFavorite, type metadata accessor for NCProtoContinuityFavorite, (uint64_t)&protocol conformance descriptor for NCProtoContinuityFavorite);
  return Message.hash(into:)();
}

unint64_t static NCProtoAddressableContact.protoMessageName.getter()
{
  return 0xD00000000000001ALL;
}

uint64_t static NCProtoAddressableContact._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static NCProtoConversationAVMode._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static NCProtoAddressableContact._protobuf_nameMap, a1);
}

uint64_t NCProtoAddressableContact.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  char v10;
  uint64_t v11;
  uint64_t v12;

  v5 = v3;
  result = dispatch thunk of Decoder.nextFieldNumber()();
  v11 = v4;
  if (!v4)
  {
    while (1)
    {
      if ((v10 & 1) != 0)
        return result;
      if (result == 3)
        break;
      if (result == 2)
      {
        type metadata accessor for NCProtoContactHandleAnonym(0);
        lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoContactHandleAnonym and conformance NCProtoContactHandleAnonym, type metadata accessor for NCProtoContactHandleAnonym, (uint64_t)&protocol conformance descriptor for NCProtoContactHandleAnonym);
        v12 = v11;
        dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)();
        goto LABEL_5;
      }
      if (result == 1)
      {
        v12 = v11;
        closure #1 in NCProtoAddressableContact.decodeMessage<A>(decoder:)(a1, v5, a2, a3, (void (*)(_QWORD))type metadata accessor for NCProtoAddressableContact, type metadata accessor for NCProtoContactInfo, &lazy protocol witness table cache variable for type NCProtoContactInfo and conformance NCProtoContactInfo, (uint64_t)&protocol conformance descriptor for NCProtoContactInfo);
        goto LABEL_5;
      }
LABEL_6:
      result = dispatch thunk of Decoder.nextFieldNumber()();
    }
    v12 = v11;
    dispatch thunk of Decoder.decodeSingularStringField(value:)();
LABEL_5:
    v11 = v12;
    goto LABEL_6;
  }
  return result;
}

uint64_t NCProtoAddressableContact.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t result;
  unint64_t v6;
  uint64_t v7;

  result = closure #1 in NCProtoAddressableContact.traverse<A>(visitor:)((uint64_t)v3, a1, a2, a3);
  if (!v4)
  {
    if (*(_QWORD *)(*v3 + 16))
    {
      type metadata accessor for NCProtoContactHandleAnonym(0);
      lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoContactHandleAnonym and conformance NCProtoContactHandleAnonym, type metadata accessor for NCProtoContactHandleAnonym, (uint64_t)&protocol conformance descriptor for NCProtoContactHandleAnonym);
      dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)();
    }
    v6 = v3[2];
    v7 = HIBYTE(v6) & 0xF;
    if ((v6 & 0x2000000000000000) == 0)
      v7 = v3[1] & 0xFFFFFFFFFFFFLL;
    if (v7)
      dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)();
    type metadata accessor for NCProtoAddressableContact(0);
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

uint64_t closure #1 in NCProtoAddressableContact.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  _QWORD v13[2];

  v13[1] = a4;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NCProtoContactInfo?);
  MEMORY[0x24BDAC7A8]();
  v6 = (char *)v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for NCProtoContactInfo(0);
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8]();
  v10 = (char *)v13 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for NCProtoAddressableContact(0);
  outlined init with copy of NCProtoContactInfo?(a1 + *(int *)(v11 + 28), (uint64_t)v6, &demangling cache variable for type metadata for NCProtoContactInfo?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7) == 1)
    return outlined destroy of NCProtoContactInfo?((uint64_t)v6, &demangling cache variable for type metadata for NCProtoContactInfo?);
  outlined init with take of NCProtoContactInfo((uint64_t)v6, (uint64_t)v10, type metadata accessor for NCProtoContactInfo);
  lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoContactInfo and conformance NCProtoContactInfo, type metadata accessor for NCProtoContactInfo, (uint64_t)&protocol conformance descriptor for NCProtoContactInfo);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of NCProtoContactInfo((uint64_t)v10, type metadata accessor for NCProtoContactInfo);
}

Swift::Int NCProtoAddressableContact.hashValue.getter()
{
  return NCProtoContactInfo.hashValue.getter(type metadata accessor for NCProtoAddressableContact, &lazy protocol witness table cache variable for type NCProtoAddressableContact and conformance NCProtoAddressableContact, (uint64_t)&protocol conformance descriptor for NCProtoAddressableContact);
}

uint64_t protocol witness for Message.init() in conformance NCProtoAddressableContact@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  char *v4;
  uint64_t v5;

  *a2 = MEMORY[0x24BEE4AF8];
  a2[1] = 0;
  a2[2] = 0xE000000000000000;
  UnknownStorage.init()();
  v4 = (char *)a2 + *(int *)(a1 + 28);
  v5 = type metadata accessor for NCProtoContactInfo(0);
  return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56))(v4, 1, 1, v5);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance NCProtoAddressableContact()
{
  return 0xD00000000000001ALL;
}

uint64_t (*protocol witness for Message.unknownFields.modify in conformance NCProtoAddressableContact())()
{
  return NCProtoContactInfo.namePrefix.modify;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance NCProtoAddressableContact(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return NCProtoAddressableContact.decodeMessage<A>(decoder:)(a1, a2, a3);
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance NCProtoAddressableContact(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return NCProtoAddressableContact.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance NCProtoAddressableContact()
{
  lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoAddressableContact and conformance NCProtoAddressableContact, type metadata accessor for NCProtoAddressableContact, (uint64_t)&protocol conformance descriptor for NCProtoAddressableContact);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance NCProtoAddressableContact@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance NCProtoConversationAVMode(&one-time initialization token for _protobuf_nameMap, (uint64_t)static NCProtoAddressableContact._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance NCProtoAddressableContact()
{
  lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoAddressableContact and conformance NCProtoAddressableContact, type metadata accessor for NCProtoAddressableContact, (uint64_t)&protocol conformance descriptor for NCProtoAddressableContact);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance NCProtoAddressableContact()
{
  lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoAddressableContact and conformance NCProtoAddressableContact, type metadata accessor for NCProtoAddressableContact, (uint64_t)&protocol conformance descriptor for NCProtoAddressableContact);
  return Message.hash(into:)();
}

unint64_t static NCProtoActiveConversation.protoMessageName.getter()
{
  return 0xD00000000000001ALL;
}

uint64_t static NCProtoActiveConversation._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static NCProtoConversationAVMode._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static NCProtoActiveConversation._protobuf_nameMap, a1);
}

uint64_t NCProtoActiveConversation.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  char v10;
  uint64_t v11;
  uint64_t v12;

  v5 = v3;
  result = dispatch thunk of Decoder.nextFieldNumber()();
  v11 = v4;
  if (!v4)
  {
    while ((v10 & 1) == 0)
    {
      switch(result)
      {
        case 1:
        case 2:
          type metadata accessor for NCProtoActiveConversation(0);
          v12 = v11;
          dispatch thunk of Decoder.decodeSingularStringField(value:)();
          goto LABEL_5;
        case 3:
          v12 = v11;
          closure #3 in NCProtoActiveConversation.decodeMessage<A>(decoder:)(a1, v5, a2, a3, (void (*)(_QWORD))type metadata accessor for NCProtoActiveConversation);
          goto LABEL_5;
        case 4:
          type metadata accessor for NCProtoActiveConversation(0);
          v12 = v11;
          dispatch thunk of Decoder.decodeSingularUInt64Field(value:)();
          goto LABEL_5;
        case 5:
          v12 = v11;
          dispatch thunk of Decoder.decodeRepeatedStringField(value:)();
          goto LABEL_5;
        case 6:
          v12 = v11;
          closure #6 in NCProtoActiveConversation.decodeMessage<A>(decoder:)();
LABEL_5:
          v11 = v12;
          break;
        default:
          break;
      }
      result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t closure #6 in NCProtoActiveConversation.decodeMessage<A>(decoder:)()
{
  type metadata accessor for NCProtoActiveConversation(0);
  lazy protocol witness table accessor for type NCProtoConversationState and conformance NCProtoConversationState();
  return dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)();
}

uint64_t NCProtoActiveConversation.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;

  result = closure #1 in NCProtoActiveConversation.traverse<A>(visitor:)(v3, a1, a2, a3, type metadata accessor for NCProtoActiveConversation);
  if (!v4)
  {
    closure #2 in NCProtoActiveConversation.traverse<A>(visitor:)(v3, a1, a2, a3, type metadata accessor for NCProtoActiveConversation);
    closure #3 in NCProtoActiveConversation.traverse<A>(visitor:)(v3, a1, a2, a3, type metadata accessor for NCProtoActiveConversation);
    closure #4 in NCProtoActiveConversation.traverse<A>(visitor:)(v3);
    if (*(_QWORD *)(*(_QWORD *)v3 + 16))
      dispatch thunk of Visitor.visitRepeatedStringField(value:fieldNumber:)();
    closure #5 in NCProtoActiveConversation.traverse<A>(visitor:)(v3);
    type metadata accessor for NCProtoActiveConversation(0);
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

uint64_t closure #4 in NCProtoActiveConversation.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t result;

  result = type metadata accessor for NCProtoActiveConversation(0);
  if ((*(_BYTE *)(a1 + *(int *)(result + 36) + 8) & 1) == 0)
    return dispatch thunk of Visitor.visitSingularUInt64Field(value:fieldNumber:)();
  return result;
}

uint64_t closure #5 in NCProtoActiveConversation.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t result;

  result = type metadata accessor for NCProtoActiveConversation(0);
  if ((*(_BYTE *)(a1 + *(int *)(result + 40) + 9) & 1) == 0)
  {
    lazy protocol witness table accessor for type NCProtoConversationState and conformance NCProtoConversationState();
    return dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
  }
  return result;
}

Swift::Int NCProtoActiveConversation.hashValue.getter()
{
  return NCProtoContactInfo.hashValue.getter(type metadata accessor for NCProtoActiveConversation, &lazy protocol witness table cache variable for type NCProtoActiveConversation and conformance NCProtoActiveConversation, (uint64_t)&protocol conformance descriptor for NCProtoActiveConversation);
}

uint64_t protocol witness for Message.init() in conformance NCProtoActiveConversation@<X0>(int *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  char *v11;

  *a2 = MEMORY[0x24BEE4AF8];
  result = UnknownStorage.init()();
  v5 = a1[7];
  v6 = (_QWORD *)((char *)a2 + a1[6]);
  *v6 = 0;
  v6[1] = 0;
  v7 = (_QWORD *)((char *)a2 + v5);
  *v7 = 0;
  v7[1] = 0;
  v8 = a1[9];
  v9 = (char *)a2 + a1[8];
  *(_QWORD *)v9 = 0;
  *((_WORD *)v9 + 4) = 256;
  v10 = (char *)a2 + v8;
  *(_QWORD *)v10 = 0;
  v10[8] = 1;
  v11 = (char *)a2 + a1[10];
  *(_QWORD *)v11 = 0;
  *((_WORD *)v11 + 4) = 256;
  return result;
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance NCProtoActiveConversation()
{
  return 0xD00000000000001ALL;
}

uint64_t (*protocol witness for Message.unknownFields.modify in conformance NCProtoActiveConversation())()
{
  return NCProtoContactInfo.namePrefix.modify;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance NCProtoActiveConversation(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return NCProtoActiveConversation.decodeMessage<A>(decoder:)(a1, a2, a3);
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance NCProtoActiveConversation(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return NCProtoActiveConversation.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance NCProtoActiveConversation()
{
  lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoActiveConversation and conformance NCProtoActiveConversation, type metadata accessor for NCProtoActiveConversation, (uint64_t)&protocol conformance descriptor for NCProtoActiveConversation);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance NCProtoActiveConversation@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance NCProtoConversationAVMode(&one-time initialization token for _protobuf_nameMap, (uint64_t)static NCProtoActiveConversation._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance NCProtoActiveConversation()
{
  lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoActiveConversation and conformance NCProtoActiveConversation, type metadata accessor for NCProtoActiveConversation, (uint64_t)&protocol conformance descriptor for NCProtoActiveConversation);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance NCProtoActiveConversation()
{
  lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoActiveConversation and conformance NCProtoActiveConversation, type metadata accessor for NCProtoActiveConversation, (uint64_t)&protocol conformance descriptor for NCProtoActiveConversation);
  return Message.hash(into:)();
}

unint64_t static NCProtoContinuityCall.protoMessageName.getter()
{
  return 0xD000000000000016;
}

uint64_t static NCProtoContinuityCall._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static NCProtoConversationAVMode._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static NCProtoContinuityCall._protobuf_nameMap, a1);
}

uint64_t NCProtoContinuityCall.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  char v10;

  v5 = v3;
  result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v4)
  {
    while ((v10 & 1) == 0)
    {
      switch(result)
      {
        case 1:
        case 2:
        case 4:
          type metadata accessor for NCProtoContinuityCall(0);
          dispatch thunk of Decoder.decodeSingularStringField(value:)();
          break;
        case 3:
          closure #3 in NCProtoContinuityCall.decodeMessage<A>(decoder:)(a1, v5, a2, a3, (void (*)(_QWORD))type metadata accessor for NCProtoContinuityCall, (void (*)(void))lazy protocol witness table accessor for type NCProtoContinuityCall.Status and conformance NCProtoContinuityCall.Status);
          break;
        default:
          break;
      }
      result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t NCProtoContinuityCall.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;

  result = closure #1 in NCProtoContinuityCall.traverse<A>(visitor:)(v3, a1, a2, a3, type metadata accessor for NCProtoContinuityCall);
  if (!v4)
  {
    closure #1 in NCProtoActiveConversation.traverse<A>(visitor:)(v3, a1, a2, a3, type metadata accessor for NCProtoContinuityCall);
    closure #3 in NCProtoContinuityCall.traverse<A>(visitor:)(v3, a1, a2, a3, type metadata accessor for NCProtoContinuityCall, (void (*)(uint64_t, uint64_t))lazy protocol witness table accessor for type NCProtoContinuityCall.Status and conformance NCProtoContinuityCall.Status);
    closure #4 in NCProtoContinuityCall.traverse<A>(visitor:)(v3);
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

uint64_t closure #1 in NCProtoActiveConversation.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(_QWORD))
{
  uint64_t result;

  result = a5(0);
  if (*(_QWORD *)(a1 + *(int *)(result + 24) + 8))
    return dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)();
  return result;
}

uint64_t closure #4 in NCProtoContinuityCall.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t result;

  result = type metadata accessor for NCProtoContinuityCall(0);
  if (*(_QWORD *)(a1 + *(int *)(result + 32) + 8))
    return dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)();
  return result;
}

Swift::Int NCProtoContinuityCall.hashValue.getter()
{
  return NCProtoContactInfo.hashValue.getter(type metadata accessor for NCProtoContinuityCall, &lazy protocol witness table cache variable for type NCProtoContinuityCall and conformance NCProtoContinuityCall, (uint64_t)&protocol conformance descriptor for NCProtoContinuityCall);
}

uint64_t protocol witness for Message.init() in conformance NCProtoContinuityCall@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  result = UnknownStorage.init()();
  v5 = a1[6];
  v6 = (_QWORD *)(a2 + a1[5]);
  *v6 = 0;
  v6[1] = 0;
  v7 = (_QWORD *)(a2 + v5);
  *v7 = 0;
  v7[1] = 0;
  v8 = a1[8];
  v9 = a2 + a1[7];
  *(_QWORD *)v9 = 0;
  *(_WORD *)(v9 + 8) = 256;
  v10 = (_QWORD *)(a2 + v8);
  *v10 = 0;
  v10[1] = 0;
  return result;
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance NCProtoContinuityCall()
{
  return 0xD000000000000016;
}

uint64_t (*protocol witness for Message.unknownFields.modify in conformance NCProtoContinuityCall())()
{
  return NCProtoContactInfo.namePrefix.modify;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance NCProtoContinuityCall(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return NCProtoContinuityCall.decodeMessage<A>(decoder:)(a1, a2, a3);
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance NCProtoContinuityCall(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return NCProtoContinuityCall.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance NCProtoContinuityCall()
{
  lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoContinuityCall and conformance NCProtoContinuityCall, type metadata accessor for NCProtoContinuityCall, (uint64_t)&protocol conformance descriptor for NCProtoContinuityCall);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance NCProtoContinuityCall@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance NCProtoConversationAVMode(&one-time initialization token for _protobuf_nameMap, (uint64_t)static NCProtoContinuityCall._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance NCProtoContinuityCall()
{
  lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoContinuityCall and conformance NCProtoContinuityCall, type metadata accessor for NCProtoContinuityCall, (uint64_t)&protocol conformance descriptor for NCProtoContinuityCall);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance NCProtoContinuityCall()
{
  lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoContinuityCall and conformance NCProtoContinuityCall, type metadata accessor for NCProtoContinuityCall, (uint64_t)&protocol conformance descriptor for NCProtoContinuityCall);
  return Message.hash(into:)();
}

uint64_t static NCProtoContinuityCall.Status._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static NCProtoConversationAVMode._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static NCProtoContinuityCall.Status._protobuf_nameMap, a1);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance NCProtoContinuityCall.Status@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance NCProtoConversationAVMode(&one-time initialization token for _protobuf_nameMap, (uint64_t)static NCProtoContinuityCall.Status._protobuf_nameMap, a1);
}

unint64_t static NCProtoStartedSessionEvent.protoMessageName.getter()
{
  return 0xD00000000000001BLL;
}

uint64_t static NCProtoStartedSessionEvent._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static NCProtoConversationAVMode._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static NCProtoStartedSessionEvent._protobuf_nameMap, a1);
}

uint64_t NCProtoStartedSessionEvent.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  char v10;

  v5 = v3;
  result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v4)
  {
    while ((v10 & 1) == 0)
    {
      switch(result)
      {
        case 1:
          dispatch thunk of Decoder.decodeSingularStringField(value:)();
          break;
        case 2:
          dispatch thunk of Decoder.decodeSingularBytesField(value:)();
          break;
        case 3:
          closure #1 in NCProtoAddressableContact.decodeMessage<A>(decoder:)(a1, v5, a2, a3, (void (*)(_QWORD))type metadata accessor for NCProtoStartedSessionEvent, type metadata accessor for NCProtoMemberAssociationPrimaryInfo, &lazy protocol witness table cache variable for type NCProtoMemberAssociationPrimaryInfo and conformance NCProtoMemberAssociationPrimaryInfo, (uint64_t)&protocol conformance descriptor for NCProtoMemberAssociationPrimaryInfo);
          break;
        case 4:
          closure #3 in NCProtoActiveConversation.decodeMessage<A>(decoder:)(a1, v5, a2, a3, (void (*)(_QWORD))type metadata accessor for NCProtoStartedSessionEvent);
          break;
        default:
          break;
      }
      result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t closure #3 in NCProtoActiveConversation.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(_QWORD))
{
  a5(0);
  lazy protocol witness table accessor for type NCProtoConversationAVMode and conformance NCProtoConversationAVMode();
  return dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)();
}

uint64_t NCProtoStartedSessionEvent.traverse<A>(visitor:)()
{
  _QWORD *v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t result;

  v2 = v0[1];
  v3 = HIBYTE(v2) & 0xF;
  if ((v2 & 0x2000000000000000) == 0)
    v3 = *v0 & 0xFFFFFFFFFFFFLL;
  if (!v3 || (result = dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(), !v1))
    __asm { BR              X10 }
  return result;
}

uint64_t closure #1 in NCProtoStartedSessionEvent.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  _QWORD v13[2];

  v13[1] = a4;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NCProtoMemberAssociationPrimaryInfo?);
  MEMORY[0x24BDAC7A8]();
  v6 = (char *)v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for NCProtoMemberAssociationPrimaryInfo(0);
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8]();
  v10 = (char *)v13 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for NCProtoStartedSessionEvent(0);
  outlined init with copy of NCProtoContactInfo?(a1 + *(int *)(v11 + 28), (uint64_t)v6, &demangling cache variable for type metadata for NCProtoMemberAssociationPrimaryInfo?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7) == 1)
    return outlined destroy of NCProtoContactInfo?((uint64_t)v6, &demangling cache variable for type metadata for NCProtoMemberAssociationPrimaryInfo?);
  outlined init with take of NCProtoContactInfo((uint64_t)v6, (uint64_t)v10, type metadata accessor for NCProtoMemberAssociationPrimaryInfo);
  lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoMemberAssociationPrimaryInfo and conformance NCProtoMemberAssociationPrimaryInfo, type metadata accessor for NCProtoMemberAssociationPrimaryInfo, (uint64_t)&protocol conformance descriptor for NCProtoMemberAssociationPrimaryInfo);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of NCProtoContactInfo((uint64_t)v10, type metadata accessor for NCProtoMemberAssociationPrimaryInfo);
}

uint64_t closure #3 in NCProtoActiveConversation.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(_QWORD))
{
  uint64_t result;

  result = a5(0);
  if ((*(_BYTE *)(a1 + *(int *)(result + 32) + 9) & 1) == 0)
  {
    lazy protocol witness table accessor for type NCProtoConversationAVMode and conformance NCProtoConversationAVMode();
    return dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
  }
  return result;
}

Swift::Int NCProtoStartedSessionEvent.hashValue.getter()
{
  return NCProtoContactInfo.hashValue.getter(type metadata accessor for NCProtoStartedSessionEvent, &lazy protocol witness table cache variable for type NCProtoStartedSessionEvent and conformance NCProtoStartedSessionEvent, (uint64_t)&protocol conformance descriptor for NCProtoStartedSessionEvent);
}

uint64_t protocol witness for Message.init() in conformance NCProtoStartedSessionEvent@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;

  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0xE000000000000000;
  *(_OWORD *)(a2 + 16) = xmmword_242A30CB0;
  UnknownStorage.init()();
  v4 = a2 + *(int *)(a1 + 28);
  v5 = type metadata accessor for NCProtoMemberAssociationPrimaryInfo(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56))(v4, 1, 1, v5);
  v7 = a2 + *(int *)(a1 + 32);
  *(_QWORD *)v7 = 0;
  *(_WORD *)(v7 + 8) = 256;
  return result;
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance NCProtoStartedSessionEvent()
{
  return 0xD00000000000001BLL;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance NCProtoStartedSessionEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return NCProtoStartedSessionEvent.decodeMessage<A>(decoder:)(a1, a2, a3);
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance NCProtoStartedSessionEvent()
{
  return NCProtoStartedSessionEvent.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance NCProtoStartedSessionEvent()
{
  lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoStartedSessionEvent and conformance NCProtoStartedSessionEvent, type metadata accessor for NCProtoStartedSessionEvent, (uint64_t)&protocol conformance descriptor for NCProtoStartedSessionEvent);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance NCProtoStartedSessionEvent@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance NCProtoConversationAVMode(&one-time initialization token for _protobuf_nameMap, (uint64_t)static NCProtoStartedSessionEvent._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance NCProtoStartedSessionEvent()
{
  lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoStartedSessionEvent and conformance NCProtoStartedSessionEvent, type metadata accessor for NCProtoStartedSessionEvent, (uint64_t)&protocol conformance descriptor for NCProtoStartedSessionEvent);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance NCProtoStartedSessionEvent()
{
  lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoStartedSessionEvent and conformance NCProtoStartedSessionEvent, type metadata accessor for NCProtoStartedSessionEvent, (uint64_t)&protocol conformance descriptor for NCProtoStartedSessionEvent);
  return Message.hash(into:)();
}

unint64_t static NCProtoEndedSessionEvent.protoMessageName.getter()
{
  return 0xD000000000000019;
}

uint64_t one-time initialization function for _protobuf_nameMap(uint64_t a1)
{
  return one-time initialization function for _protobuf_nameMap(a1, static NCProtoEndedSessionEvent._protobuf_nameMap, (uint64_t)"identifier", 10);
}

{
  return one-time initialization function for _protobuf_nameMap(a1, static NCProtoFavoritesDidChangeEvent._protobuf_nameMap, (uint64_t)"favorites", 9);
}

{
  return one-time initialization function for _protobuf_nameMap(a1, static NCProtoActiveConversationsDidChangeEvent._protobuf_nameMap, (uint64_t)"activeConversations", 19);
}

{
  return one-time initialization function for _protobuf_nameMap(a1, static NCProtoContinuityCallsDidChangeEvent._protobuf_nameMap, (uint64_t)"continuityCalls", 15);
}

{
  return one-time initialization function for _protobuf_nameMap(a1, static NCProtoSuggestionAdvertisementDidChangeEvent._protobuf_nameMap, (uint64_t)"advertisement", 13);
}

{
  return one-time initialization function for _protobuf_nameMap(a1, static NCProtoLagunaConnectionResponse._protobuf_nameMap);
}

{
  return one-time initialization function for _protobuf_nameMap(a1, static NCProtoDeviceLaunchedEvent._protobuf_nameMap);
}

{
  return one-time initialization function for _protobuf_nameMap(a1, static NCProtoTVLaunchedEvent._protobuf_nameMap);
}

{
  return one-time initialization function for _protobuf_nameMap(a1, static NCProtoCancelAddMemberEvent._protobuf_nameMap, (uint64_t)"conversationIdentifier", 22);
}

{
  return one-time initialization function for _protobuf_nameMap(a1, static NCProtoEndLagunaSessionEvent._protobuf_nameMap);
}

{
  return one-time initialization function for _protobuf_nameMap(a1, static NCProtoPolicyInfoUpdatedEvent._protobuf_nameMap, (uint64_t)"policyInfos", 11);
}

{
  return one-time initialization function for _protobuf_nameMap(a1, static NCProtoPullLagunaSessionToTVResponse._protobuf_nameMap);
}

{
  return one-time initialization function for _protobuf_nameMap(a1, static NCProtoTransferActiveConversationResponse._protobuf_nameMap);
}

{
  return one-time initialization function for _protobuf_nameMap(a1, static NCProtoStartLagunaSessionRequest._protobuf_nameMap, (uint64_t)"recentCallFetchTypes", 20);
}

{
  return one-time initialization function for _protobuf_nameMap(a1, static NCProtoStartConversationRequest._protobuf_nameMap, (uint64_t)"avMode", 6);
}

{
  return one-time initialization function for _protobuf_nameMap(a1, static NCProtoStartConversationResponse._protobuf_nameMap);
}

{
  return one-time initialization function for _protobuf_nameMap(a1, static NCProtoJoinActiveConversationResponse._protobuf_nameMap);
}

{
  return one-time initialization function for _protobuf_nameMap(a1, static NCProtoDeclineContinuityCallRequest._protobuf_nameMap, (uint64_t)"uuidString", 10);
}

{
  return one-time initialization function for _protobuf_nameMap(a1, static NCProtoDeclineContinuityCallResponse._protobuf_nameMap);
}

{
  return one-time initialization function for _protobuf_nameMap(a1, static NCProtoGetAddressableContactsRequest._protobuf_nameMap);
}

{
  return one-time initialization function for _protobuf_nameMap(a1, static NCProtoGetImageForContactRequest._protobuf_nameMap, (uint64_t)"contactIdentifier", 17);
}

{
  return one-time initialization function for _protobuf_nameMap(a1, static NCProtoGetImageForContactResponse._protobuf_nameMap, (uint64_t)"imageData", 9);
}

{
  return one-time initialization function for _protobuf_nameMap(a1, static NCProtoAddConversationParticipantsRequest._protobuf_nameMap, (uint64_t)"handleValues", 12);
}

{
  return one-time initialization function for _protobuf_nameMap(a1, static NCProtoAddConversationParticipantsResponse._protobuf_nameMap);
}

{
  return one-time initialization function for _protobuf_nameMap(a1, static NCProtoGetCallDisplayDetailsRequest._protobuf_nameMap, (uint64_t)"callUUID", 8);
}

{
  return one-time initialization function for _protobuf_nameMap(a1, static NCProtoGetCallDisplayDetailsResponse._protobuf_nameMap, (uint64_t)"callInfo", 8);
}

{
  return one-time initialization function for _protobuf_nameMap(a1, static NCProtoCallStateRequest._protobuf_nameMap, (uint64_t)"identifierHash", 14);
}

{
  return one-time initialization function for _protobuf_nameMap(a1, static NCProtoCallStateResponse._protobuf_nameMap, (uint64_t)"callState", 9);
}

{
  return one-time initialization function for _protobuf_nameMap(a1, static NCProtoDisconnectResponse._protobuf_nameMap, (uint64_t)"success", 7);
}

{
  return one-time initialization function for _protobuf_nameMap(a1, static NCProtoPrepareTransferRequest._protobuf_nameMap, (uint64_t)"activeConversationUuidString", 28);
}

{
  return one-time initialization function for _protobuf_nameMap(a1, static NCProtoPrepareTransferResponse._protobuf_nameMap);
}

{
  return one-time initialization function for _protobuf_nameMap(a1, static NCProtoIDSProxyMessage.ParticipantIDList._protobuf_nameMap, (uint64_t)"identifiers", 11);
}

uint64_t static NCProtoEndedSessionEvent._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static NCProtoConversationAVMode._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static NCProtoEndedSessionEvent._protobuf_nameMap, a1);
}

uint64_t NCProtoEndedSessionEvent.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return NCProtoEndedSessionEvent.decodeMessage<A>(decoder:)(a1, a2, a3, (void (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BE5C120]);
}

uint64_t NCProtoEndedSessionEvent.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return NCProtoEndedSessionEvent.traverse<A>(visitor:)(a1, a2, a3, (void (*)(_QWORD))type metadata accessor for NCProtoEndedSessionEvent);
}

uint64_t static NCProtoEndedSessionEvent.== infix(_:_:)(_QWORD *a1, char *a2)
{
  return specialized static NCProtoGetCallDisplayDetailsRequest.== infix(_:_:)(a1, a2, type metadata accessor for NCProtoEndedSessionEvent) & 1;
}

Swift::Int NCProtoEndedSessionEvent.hashValue.getter()
{
  return NCProtoContactInfo.hashValue.getter(type metadata accessor for NCProtoEndedSessionEvent, &lazy protocol witness table cache variable for type NCProtoEndedSessionEvent and conformance NCProtoEndedSessionEvent, (uint64_t)&protocol conformance descriptor for NCProtoEndedSessionEvent);
}

uint64_t protocol witness for Message.init() in conformance NCProtoEndedSessionEvent@<X0>(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0xE000000000000000;
  return UnknownStorage.init()();
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance NCProtoEndedSessionEvent()
{
  return 0xD000000000000019;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance NCProtoEndedSessionEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return NCProtoEndedSessionEvent.decodeMessage<A>(decoder:)(a1, a2, a3);
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance NCProtoEndedSessionEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return NCProtoEndedSessionEvent.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance NCProtoEndedSessionEvent()
{
  lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoEndedSessionEvent and conformance NCProtoEndedSessionEvent, type metadata accessor for NCProtoEndedSessionEvent, (uint64_t)&protocol conformance descriptor for NCProtoEndedSessionEvent);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance NCProtoEndedSessionEvent@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance NCProtoConversationAVMode(&one-time initialization token for _protobuf_nameMap, (uint64_t)static NCProtoEndedSessionEvent._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance NCProtoEndedSessionEvent()
{
  lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoEndedSessionEvent and conformance NCProtoEndedSessionEvent, type metadata accessor for NCProtoEndedSessionEvent, (uint64_t)&protocol conformance descriptor for NCProtoEndedSessionEvent);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance NCProtoEndedSessionEvent()
{
  lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoEndedSessionEvent and conformance NCProtoEndedSessionEvent, type metadata accessor for NCProtoEndedSessionEvent, (uint64_t)&protocol conformance descriptor for NCProtoEndedSessionEvent);
  return Message.hash(into:)();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance NCProtoEndedSessionEvent(_QWORD *a1, char *a2)
{
  return specialized static NCProtoGetCallDisplayDetailsRequest.== infix(_:_:)(a1, a2, type metadata accessor for NCProtoEndedSessionEvent) & 1;
}

unint64_t static NCProtoContactUpdateEvent.protoMessageName.getter()
{
  return 0xD00000000000001ALL;
}

uint64_t static NCProtoContactUpdateEvent._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static NCProtoConversationAVMode._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static NCProtoContactUpdateEvent._protobuf_nameMap, a1);
}

uint64_t NCProtoContactUpdateEvent.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return NCProtoContactUpdateEvent.decodeMessage<A>(decoder:)(a1, a2, a3, (void (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BE5C0A8], (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))closure #2 in NCProtoContactUpdateEvent.decodeMessage<A>(decoder:));
}

uint64_t closure #2 in NCProtoContactUpdateEvent.decodeMessage<A>(decoder:)()
{
  type metadata accessor for ProtobufString();
  type metadata accessor for NCProtoContactInfo(0);
  lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoContactInfo and conformance NCProtoContactInfo, type metadata accessor for NCProtoContactInfo, (uint64_t)&protocol conformance descriptor for NCProtoContactInfo);
  lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoContactInfo and conformance NCProtoContactInfo, type metadata accessor for NCProtoContactInfo, (uint64_t)&protocol conformance descriptor for NCProtoContactInfo);
  return dispatch thunk of Decoder.decodeMapField<A, B>(fieldType:value:)();
}

void NCProtoContactUpdateEvent.traverse<A>(visitor:)()
{
  __asm { BR              X10 }
}

uint64_t sub_2429FA93C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;

  if ((a2 & 0xFF000000000000) == 0
    || (result = dispatch thunk of Visitor.visitSingularBytesField(value:fieldNumber:)(), !v2))
  {
    if (!*(_QWORD *)(*(_QWORD *)(v3 + 16) + 16)
      || (type metadata accessor for ProtobufString(),
          type metadata accessor for NCProtoContactInfo(0),
          lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoContactInfo and conformance NCProtoContactInfo, type metadata accessor for NCProtoContactInfo, (uint64_t)&protocol conformance descriptor for NCProtoContactInfo), lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoContactInfo and conformance NCProtoContactInfo, type metadata accessor for NCProtoContactInfo, (uint64_t)&protocol conformance descriptor for NCProtoContactInfo), result = dispatch thunk of Visitor.visitMapField<A, B>(fieldType:value:fieldNumber:)(), !v2))
    {
      type metadata accessor for NCProtoContactUpdateEvent(0);
      return UnknownStorage.traverse<A>(visitor:)();
    }
  }
  return result;
}

uint64_t static NCProtoContactUpdateEvent.== infix(_:_:)(uint64_t *a1, uint64_t a2)
{
  return specialized static NCProtoContactUpdateEvent.== infix(_:_:)(a1, a2, specialized static Dictionary<>.== infix(_:_:), type metadata accessor for NCProtoContactUpdateEvent) & 1;
}

Swift::Int NCProtoContactUpdateEvent.hashValue.getter()
{
  return NCProtoContactInfo.hashValue.getter(type metadata accessor for NCProtoContactUpdateEvent, &lazy protocol witness table cache variable for type NCProtoContactUpdateEvent and conformance NCProtoContactUpdateEvent, (uint64_t)&protocol conformance descriptor for NCProtoContactUpdateEvent);
}

uint64_t protocol witness for Message.init() in conformance NCProtoContactUpdateEvent@<X0>(uint64_t a1@<X8>)
{
  *(_OWORD *)a1 = xmmword_242A30CB0;
  *(_QWORD *)(a1 + 16) = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8], &demangling cache variable for type metadata for (String, NCProtoContactInfo), &demangling cache variable for type metadata for _DictionaryStorage<String, NCProtoContactInfo>, type metadata accessor for NCProtoContactInfo);
  return UnknownStorage.init()();
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance NCProtoContactUpdateEvent()
{
  return 0xD00000000000001ALL;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance NCProtoContactUpdateEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return NCProtoContactUpdateEvent.decodeMessage<A>(decoder:)(a1, a2, a3);
}

void protocol witness for Message.traverse<A>(visitor:) in conformance NCProtoContactUpdateEvent()
{
  NCProtoContactUpdateEvent.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance NCProtoContactUpdateEvent()
{
  lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoContactUpdateEvent and conformance NCProtoContactUpdateEvent, type metadata accessor for NCProtoContactUpdateEvent, (uint64_t)&protocol conformance descriptor for NCProtoContactUpdateEvent);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance NCProtoContactUpdateEvent@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance NCProtoConversationAVMode(&one-time initialization token for _protobuf_nameMap, (uint64_t)static NCProtoContactUpdateEvent._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance NCProtoContactUpdateEvent()
{
  lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoContactUpdateEvent and conformance NCProtoContactUpdateEvent, type metadata accessor for NCProtoContactUpdateEvent, (uint64_t)&protocol conformance descriptor for NCProtoContactUpdateEvent);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance NCProtoContactUpdateEvent()
{
  lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoContactUpdateEvent and conformance NCProtoContactUpdateEvent, type metadata accessor for NCProtoContactUpdateEvent, (uint64_t)&protocol conformance descriptor for NCProtoContactUpdateEvent);
  return Message.hash(into:)();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance NCProtoContactUpdateEvent(uint64_t *a1, uint64_t a2)
{
  return specialized static NCProtoContactUpdateEvent.== infix(_:_:)(a1, a2, specialized static Dictionary<>.== infix(_:_:), type metadata accessor for NCProtoContactUpdateEvent) & 1;
}

unint64_t static NCProtoJoinEvent.protoMessageName.getter()
{
  return 0xD000000000000011;
}

uint64_t static NCProtoJoinEvent._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static NCProtoConversationAVMode._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static NCProtoJoinEvent._protobuf_nameMap, a1);
}

uint64_t NCProtoJoinEvent.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return NCProtoJoinEvent.decodeMessage<A>(decoder:)(a1, a2, a3, (void (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BE5C0A8], (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))closure #3 in NCProtoJoinEvent.decodeMessage<A>(decoder:));
}

uint64_t closure #3 in NCProtoJoinEvent.decodeMessage<A>(decoder:)()
{
  type metadata accessor for ProtobufString();
  type metadata accessor for ProtobufBool();
  return dispatch thunk of Decoder.decodeMapField<A, B>(fieldType:value:)();
}

void NCProtoJoinEvent.traverse<A>(visitor:)()
{
  __asm { BR              X10 }
}

uint64_t sub_2429FAF44(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  if ((a2 & 0xFF000000000000) == 0
    || (result = dispatch thunk of Visitor.visitSingularBytesField(value:fieldNumber:)(), !v2))
  {
    __asm { BR              X10 }
  }
  return result;
}

Swift::Int NCProtoJoinEvent.hashValue.getter()
{
  return NCProtoContactInfo.hashValue.getter(type metadata accessor for NCProtoJoinEvent, &lazy protocol witness table cache variable for type NCProtoJoinEvent and conformance NCProtoJoinEvent, (uint64_t)&protocol conformance descriptor for NCProtoJoinEvent);
}

uint64_t protocol witness for Message.init() in conformance NCProtoJoinEvent@<X0>(uint64_t a1@<X8>)
{
  *(_OWORD *)a1 = xmmword_242A30CB0;
  *(_OWORD *)(a1 + 16) = xmmword_242A30CB0;
  *(_QWORD *)(a1 + 32) = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
  return UnknownStorage.init()();
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance NCProtoJoinEvent()
{
  return 0xD000000000000011;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance NCProtoJoinEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return NCProtoJoinEvent.decodeMessage<A>(decoder:)(a1, a2, a3);
}

void protocol witness for Message.traverse<A>(visitor:) in conformance NCProtoJoinEvent()
{
  NCProtoJoinEvent.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance NCProtoJoinEvent()
{
  lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoJoinEvent and conformance NCProtoJoinEvent, type metadata accessor for NCProtoJoinEvent, (uint64_t)&protocol conformance descriptor for NCProtoJoinEvent);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance NCProtoJoinEvent@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance NCProtoConversationAVMode(&one-time initialization token for _protobuf_nameMap, (uint64_t)static NCProtoJoinEvent._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance NCProtoJoinEvent()
{
  lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoJoinEvent and conformance NCProtoJoinEvent, type metadata accessor for NCProtoJoinEvent, (uint64_t)&protocol conformance descriptor for NCProtoJoinEvent);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance NCProtoJoinEvent()
{
  lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoJoinEvent and conformance NCProtoJoinEvent, type metadata accessor for NCProtoJoinEvent, (uint64_t)&protocol conformance descriptor for NCProtoJoinEvent);
  return Message.hash(into:)();
}

unint64_t static NCProtoRecentCallsDidChangeEvent.protoMessageName.getter()
{
  return 0xD000000000000021;
}

uint64_t static NCProtoRecentCallsDidChangeEvent._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static NCProtoConversationAVMode._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static NCProtoRecentCallsDidChangeEvent._protobuf_nameMap, a1);
}

uint64_t NCProtoRecentCallsDidChangeEvent.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t result;
  char v2;

  while (1)
  {
    result = dispatch thunk of Decoder.nextFieldNumber()();
    if (v0 || (v2 & 1) != 0)
      break;
    switch(result)
    {
      case 3:
        closure #3 in NCProtoRecentCallsDidChangeEvent.decodeMessage<A>(decoder:)();
        break;
      case 2:
        closure #2 in NCProtoRecentCallsDidChangeEvent.decodeMessage<A>(decoder:)();
        break;
      case 1:
        dispatch thunk of Decoder.decodeRepeatedBytesField(value:)();
        break;
    }
  }
  return result;
}

uint64_t closure #3 in NCProtoRecentCallsDidChangeEvent.decodeMessage<A>(decoder:)()
{
  type metadata accessor for ProtobufString();
  type metadata accessor for NCProtoCallInfo(0);
  lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoCallInfo and conformance NCProtoCallInfo, type metadata accessor for NCProtoCallInfo, (uint64_t)&protocol conformance descriptor for NCProtoCallInfo);
  lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoCallInfo and conformance NCProtoCallInfo, type metadata accessor for NCProtoCallInfo, (uint64_t)&protocol conformance descriptor for NCProtoCallInfo);
  return dispatch thunk of Decoder.decodeMapField<A, B>(fieldType:value:)();
}

uint64_t NCProtoRecentCallsDidChangeEvent.traverse<A>(visitor:)()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t result;

  if (!*(_QWORD *)(*v0 + 16)
    || (result = dispatch thunk of Visitor.visitRepeatedBytesField(value:fieldNumber:)(), !v1))
  {
    if (!*(_QWORD *)(v0[1] + 16)
      || (type metadata accessor for ProtobufString(),
          type metadata accessor for NCProtoContactInfo(0),
          lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoContactInfo and conformance NCProtoContactInfo, type metadata accessor for NCProtoContactInfo, (uint64_t)&protocol conformance descriptor for NCProtoContactInfo), lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoContactInfo and conformance NCProtoContactInfo, type metadata accessor for NCProtoContactInfo, (uint64_t)&protocol conformance descriptor for NCProtoContactInfo), result = dispatch thunk of Visitor.visitMapField<A, B>(fieldType:value:fieldNumber:)(), !v1))
    {
      if (!*(_QWORD *)(v0[2] + 16)
        || (type metadata accessor for ProtobufString(),
            type metadata accessor for NCProtoCallInfo(0),
            lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoCallInfo and conformance NCProtoCallInfo, type metadata accessor for NCProtoCallInfo, (uint64_t)&protocol conformance descriptor for NCProtoCallInfo), lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoCallInfo and conformance NCProtoCallInfo, type metadata accessor for NCProtoCallInfo, (uint64_t)&protocol conformance descriptor for NCProtoCallInfo), result = dispatch thunk of Visitor.visitMapField<A, B>(fieldType:value:fieldNumber:)(), !v1))
      {
        type metadata accessor for NCProtoRecentCallsDidChangeEvent(0);
        return UnknownStorage.traverse<A>(visitor:)();
      }
    }
  }
  return result;
}

Swift::Int NCProtoRecentCallsDidChangeEvent.hashValue.getter()
{
  return NCProtoContactInfo.hashValue.getter(type metadata accessor for NCProtoRecentCallsDidChangeEvent, &lazy protocol witness table cache variable for type NCProtoRecentCallsDidChangeEvent and conformance NCProtoRecentCallsDidChangeEvent, (uint64_t)&protocol conformance descriptor for NCProtoRecentCallsDidChangeEvent);
}

uint64_t protocol witness for Message.init() in conformance NCProtoRecentCallsDidChangeEvent@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v2;

  v2 = MEMORY[0x24BEE4AF8];
  *a1 = MEMORY[0x24BEE4AF8];
  a1[1] = specialized Dictionary.init(dictionaryLiteral:)(v2, &demangling cache variable for type metadata for (String, NCProtoContactInfo), &demangling cache variable for type metadata for _DictionaryStorage<String, NCProtoContactInfo>, type metadata accessor for NCProtoContactInfo);
  a1[2] = specialized Dictionary.init(dictionaryLiteral:)(v2, &demangling cache variable for type metadata for (String, NCProtoCallInfo), &demangling cache variable for type metadata for _DictionaryStorage<String, NCProtoCallInfo>, type metadata accessor for NCProtoCallInfo);
  return UnknownStorage.init()();
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance NCProtoRecentCallsDidChangeEvent()
{
  return 0xD000000000000021;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance NCProtoRecentCallsDidChangeEvent()
{
  return NCProtoRecentCallsDidChangeEvent.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance NCProtoRecentCallsDidChangeEvent()
{
  return NCProtoRecentCallsDidChangeEvent.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance NCProtoRecentCallsDidChangeEvent()
{
  lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoRecentCallsDidChangeEvent and conformance NCProtoRecentCallsDidChangeEvent, type metadata accessor for NCProtoRecentCallsDidChangeEvent, (uint64_t)&protocol conformance descriptor for NCProtoRecentCallsDidChangeEvent);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance NCProtoRecentCallsDidChangeEvent@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance NCProtoConversationAVMode(&one-time initialization token for _protobuf_nameMap, (uint64_t)static NCProtoRecentCallsDidChangeEvent._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance NCProtoRecentCallsDidChangeEvent()
{
  lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoRecentCallsDidChangeEvent and conformance NCProtoRecentCallsDidChangeEvent, type metadata accessor for NCProtoRecentCallsDidChangeEvent, (uint64_t)&protocol conformance descriptor for NCProtoRecentCallsDidChangeEvent);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance NCProtoRecentCallsDidChangeEvent()
{
  lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoRecentCallsDidChangeEvent and conformance NCProtoRecentCallsDidChangeEvent, type metadata accessor for NCProtoRecentCallsDidChangeEvent, (uint64_t)&protocol conformance descriptor for NCProtoRecentCallsDidChangeEvent);
  return Message.hash(into:)();
}

unint64_t static NCProtoFavoritesDidChangeEvent.protoMessageName.getter()
{
  return 0xD00000000000001FLL;
}

uint64_t static NCProtoFavoritesDidChangeEvent._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static NCProtoConversationAVMode._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static NCProtoFavoritesDidChangeEvent._protobuf_nameMap, a1);
}

uint64_t NCProtoFavoritesDidChangeEvent.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return NCProtoFavoritesDidChangeEvent.decodeMessage<A>(decoder:)(a1, a2, a3, type metadata accessor for NCProtoContinuityFavorite, &lazy protocol witness table cache variable for type NCProtoContinuityFavorite and conformance NCProtoContinuityFavorite, (uint64_t)&protocol conformance descriptor for NCProtoContinuityFavorite);
}

uint64_t NCProtoFavoritesDidChangeEvent.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return NCProtoFavoritesDidChangeEvent.traverse<A>(visitor:)(a1, a2, a3, type metadata accessor for NCProtoContinuityFavorite, &lazy protocol witness table cache variable for type NCProtoContinuityFavorite and conformance NCProtoContinuityFavorite, (uint64_t)&protocol conformance descriptor for NCProtoContinuityFavorite, (void (*)(_QWORD))type metadata accessor for NCProtoFavoritesDidChangeEvent);
}

uint64_t static NCProtoFavoritesDidChangeEvent.== infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  return specialized static NCProtoFavoritesDidChangeEvent.== infix(_:_:)(a1, a2, type metadata accessor for NCProtoContinuityFavorite, (uint64_t (*)(char *, char *))specialized static NCProtoContinuityFavorite.== infix(_:_:), type metadata accessor for NCProtoFavoritesDidChangeEvent) & 1;
}

Swift::Int NCProtoFavoritesDidChangeEvent.hashValue.getter()
{
  return NCProtoContactInfo.hashValue.getter(type metadata accessor for NCProtoFavoritesDidChangeEvent, &lazy protocol witness table cache variable for type NCProtoFavoritesDidChangeEvent and conformance NCProtoFavoritesDidChangeEvent, (uint64_t)&protocol conformance descriptor for NCProtoFavoritesDidChangeEvent);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance NCProtoFavoritesDidChangeEvent()
{
  return 0xD00000000000001FLL;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance NCProtoFavoritesDidChangeEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return NCProtoFavoritesDidChangeEvent.decodeMessage<A>(decoder:)(a1, a2, a3);
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance NCProtoFavoritesDidChangeEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return NCProtoFavoritesDidChangeEvent.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance NCProtoFavoritesDidChangeEvent()
{
  lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoFavoritesDidChangeEvent and conformance NCProtoFavoritesDidChangeEvent, type metadata accessor for NCProtoFavoritesDidChangeEvent, (uint64_t)&protocol conformance descriptor for NCProtoFavoritesDidChangeEvent);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance NCProtoFavoritesDidChangeEvent@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance NCProtoConversationAVMode(&one-time initialization token for _protobuf_nameMap, (uint64_t)static NCProtoFavoritesDidChangeEvent._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance NCProtoFavoritesDidChangeEvent()
{
  lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoFavoritesDidChangeEvent and conformance NCProtoFavoritesDidChangeEvent, type metadata accessor for NCProtoFavoritesDidChangeEvent, (uint64_t)&protocol conformance descriptor for NCProtoFavoritesDidChangeEvent);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance NCProtoFavoritesDidChangeEvent()
{
  lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoFavoritesDidChangeEvent and conformance NCProtoFavoritesDidChangeEvent, type metadata accessor for NCProtoFavoritesDidChangeEvent, (uint64_t)&protocol conformance descriptor for NCProtoFavoritesDidChangeEvent);
  return Message.hash(into:)();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance NCProtoFavoritesDidChangeEvent(uint64_t *a1, uint64_t *a2)
{
  return specialized static NCProtoFavoritesDidChangeEvent.== infix(_:_:)(a1, a2, type metadata accessor for NCProtoContinuityFavorite, (uint64_t (*)(char *, char *))specialized static NCProtoContinuityFavorite.== infix(_:_:), type metadata accessor for NCProtoFavoritesDidChangeEvent) & 1;
}

unint64_t static NCProtoActiveConversationsDidChangeEvent.protoMessageName.getter()
{
  return 0xD000000000000029;
}

uint64_t static NCProtoActiveConversationsDidChangeEvent._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static NCProtoConversationAVMode._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static NCProtoActiveConversationsDidChangeEvent._protobuf_nameMap, a1);
}

uint64_t NCProtoActiveConversationsDidChangeEvent.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return NCProtoFavoritesDidChangeEvent.decodeMessage<A>(decoder:)(a1, a2, a3, type metadata accessor for NCProtoActiveConversation, &lazy protocol witness table cache variable for type NCProtoActiveConversation and conformance NCProtoActiveConversation, (uint64_t)&protocol conformance descriptor for NCProtoActiveConversation);
}

uint64_t NCProtoActiveConversationsDidChangeEvent.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return NCProtoFavoritesDidChangeEvent.traverse<A>(visitor:)(a1, a2, a3, type metadata accessor for NCProtoActiveConversation, &lazy protocol witness table cache variable for type NCProtoActiveConversation and conformance NCProtoActiveConversation, (uint64_t)&protocol conformance descriptor for NCProtoActiveConversation, (void (*)(_QWORD))type metadata accessor for NCProtoActiveConversationsDidChangeEvent);
}

uint64_t static NCProtoActiveConversationsDidChangeEvent.== infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  return specialized static NCProtoFavoritesDidChangeEvent.== infix(_:_:)(a1, a2, type metadata accessor for NCProtoActiveConversation, (uint64_t (*)(char *, char *))specialized static NCProtoActiveConversation.== infix(_:_:), type metadata accessor for NCProtoActiveConversationsDidChangeEvent) & 1;
}

Swift::Int NCProtoActiveConversationsDidChangeEvent.hashValue.getter()
{
  return NCProtoContactInfo.hashValue.getter(type metadata accessor for NCProtoActiveConversationsDidChangeEvent, &lazy protocol witness table cache variable for type NCProtoActiveConversationsDidChangeEvent and conformance NCProtoActiveConversationsDidChangeEvent, (uint64_t)&protocol conformance descriptor for NCProtoActiveConversationsDidChangeEvent);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance NCProtoActiveConversationsDidChangeEvent()
{
  return 0xD000000000000029;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance NCProtoActiveConversationsDidChangeEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return NCProtoActiveConversationsDidChangeEvent.decodeMessage<A>(decoder:)(a1, a2, a3);
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance NCProtoActiveConversationsDidChangeEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return NCProtoActiveConversationsDidChangeEvent.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance NCProtoActiveConversationsDidChangeEvent()
{
  lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoActiveConversationsDidChangeEvent and conformance NCProtoActiveConversationsDidChangeEvent, type metadata accessor for NCProtoActiveConversationsDidChangeEvent, (uint64_t)&protocol conformance descriptor for NCProtoActiveConversationsDidChangeEvent);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance NCProtoActiveConversationsDidChangeEvent@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance NCProtoConversationAVMode(&one-time initialization token for _protobuf_nameMap, (uint64_t)static NCProtoActiveConversationsDidChangeEvent._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance NCProtoActiveConversationsDidChangeEvent()
{
  lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoActiveConversationsDidChangeEvent and conformance NCProtoActiveConversationsDidChangeEvent, type metadata accessor for NCProtoActiveConversationsDidChangeEvent, (uint64_t)&protocol conformance descriptor for NCProtoActiveConversationsDidChangeEvent);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance NCProtoActiveConversationsDidChangeEvent()
{
  lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoActiveConversationsDidChangeEvent and conformance NCProtoActiveConversationsDidChangeEvent, type metadata accessor for NCProtoActiveConversationsDidChangeEvent, (uint64_t)&protocol conformance descriptor for NCProtoActiveConversationsDidChangeEvent);
  return Message.hash(into:)();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance NCProtoActiveConversationsDidChangeEvent(uint64_t *a1, uint64_t *a2)
{
  return specialized static NCProtoFavoritesDidChangeEvent.== infix(_:_:)(a1, a2, type metadata accessor for NCProtoActiveConversation, (uint64_t (*)(char *, char *))specialized static NCProtoActiveConversation.== infix(_:_:), type metadata accessor for NCProtoActiveConversationsDidChangeEvent) & 1;
}

unint64_t static NCProtoContinuityCallsDidChangeEvent.protoMessageName.getter()
{
  return 0xD000000000000025;
}

uint64_t static NCProtoContinuityCallsDidChangeEvent._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static NCProtoConversationAVMode._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static NCProtoContinuityCallsDidChangeEvent._protobuf_nameMap, a1);
}

uint64_t NCProtoContinuityCallsDidChangeEvent.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return NCProtoFavoritesDidChangeEvent.decodeMessage<A>(decoder:)(a1, a2, a3, type metadata accessor for NCProtoContinuityCall, &lazy protocol witness table cache variable for type NCProtoContinuityCall and conformance NCProtoContinuityCall, (uint64_t)&protocol conformance descriptor for NCProtoContinuityCall);
}

uint64_t NCProtoFavoritesDidChangeEvent.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t), unint64_t *a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t result;
  char v11;

  while (1)
  {
    result = dispatch thunk of Decoder.nextFieldNumber()();
    if (v6 || (v11 & 1) != 0)
      break;
    if (result == 1)
    {
      a4(0);
      lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(a5, a4, a6);
      dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)();
    }
    v6 = 0;
  }
  return result;
}

uint64_t NCProtoContinuityCallsDidChangeEvent.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return NCProtoFavoritesDidChangeEvent.traverse<A>(visitor:)(a1, a2, a3, type metadata accessor for NCProtoContinuityCall, &lazy protocol witness table cache variable for type NCProtoContinuityCall and conformance NCProtoContinuityCall, (uint64_t)&protocol conformance descriptor for NCProtoContinuityCall, (void (*)(_QWORD))type metadata accessor for NCProtoContinuityCallsDidChangeEvent);
}

uint64_t NCProtoFavoritesDidChangeEvent.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t), unint64_t *a5, uint64_t a6, void (*a7)(_QWORD))
{
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  void (*v13)(_QWORD);

  if (!*(_QWORD *)(*(_QWORD *)v7 + 16)
    || (v13 = a7,
        a4(0),
        lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(a5, a4, a6),
        result = dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)(),
        a7 = v13,
        !v8))
  {
    a7(0);
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

uint64_t static NCProtoContinuityCallsDidChangeEvent.== infix(_:_:)(_QWORD *a1, char *a2)
{
  return specialized static NCProtoAddConversationParticipantsRequest.== infix(_:_:)(a1, a2, specialized static Array<A>.== infix(_:_:), type metadata accessor for NCProtoContinuityCallsDidChangeEvent) & 1;
}

Swift::Int NCProtoContinuityCallsDidChangeEvent.hashValue.getter()
{
  return NCProtoContactInfo.hashValue.getter(type metadata accessor for NCProtoContinuityCallsDidChangeEvent, &lazy protocol witness table cache variable for type NCProtoContinuityCallsDidChangeEvent and conformance NCProtoContinuityCallsDidChangeEvent, (uint64_t)&protocol conformance descriptor for NCProtoContinuityCallsDidChangeEvent);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance NCProtoContinuityCallsDidChangeEvent()
{
  return 0xD000000000000025;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance NCProtoContinuityCallsDidChangeEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return NCProtoContinuityCallsDidChangeEvent.decodeMessage<A>(decoder:)(a1, a2, a3);
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance NCProtoContinuityCallsDidChangeEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return NCProtoContinuityCallsDidChangeEvent.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance NCProtoContinuityCallsDidChangeEvent()
{
  lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoContinuityCallsDidChangeEvent and conformance NCProtoContinuityCallsDidChangeEvent, type metadata accessor for NCProtoContinuityCallsDidChangeEvent, (uint64_t)&protocol conformance descriptor for NCProtoContinuityCallsDidChangeEvent);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance NCProtoContinuityCallsDidChangeEvent@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance NCProtoConversationAVMode(&one-time initialization token for _protobuf_nameMap, (uint64_t)static NCProtoContinuityCallsDidChangeEvent._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance NCProtoContinuityCallsDidChangeEvent()
{
  lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoContinuityCallsDidChangeEvent and conformance NCProtoContinuityCallsDidChangeEvent, type metadata accessor for NCProtoContinuityCallsDidChangeEvent, (uint64_t)&protocol conformance descriptor for NCProtoContinuityCallsDidChangeEvent);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance NCProtoContinuityCallsDidChangeEvent()
{
  lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoContinuityCallsDidChangeEvent and conformance NCProtoContinuityCallsDidChangeEvent, type metadata accessor for NCProtoContinuityCallsDidChangeEvent, (uint64_t)&protocol conformance descriptor for NCProtoContinuityCallsDidChangeEvent);
  return Message.hash(into:)();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance NCProtoContinuityCallsDidChangeEvent(_QWORD *a1, char *a2)
{
  return specialized static NCProtoAddConversationParticipantsRequest.== infix(_:_:)(a1, a2, specialized static Array<A>.== infix(_:_:), type metadata accessor for NCProtoContinuityCallsDidChangeEvent) & 1;
}

unint64_t static NCProtoSuggestionAdvertisement.protoMessageName.getter()
{
  return 0xD00000000000001FLL;
}

uint64_t static NCProtoSuggestionAdvertisement._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static NCProtoConversationAVMode._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static NCProtoSuggestionAdvertisement._protobuf_nameMap, a1);
}

uint64_t NCProtoSuggestionAdvertisement.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t result;
  char v2;

  result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      if (result == 3)
      {
        lazy protocol witness table accessor for type NCProtoSuggestionAdvertisement.SuggestionType and conformance NCProtoSuggestionAdvertisement.SuggestionType();
        dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)();
      }
      else if (result == 2 || result == 1)
      {
        dispatch thunk of Decoder.decodeSingularStringField(value:)();
      }
      result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t NCProtoSuggestionAdvertisement.traverse<A>(visitor:)()
{
  _QWORD *v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t result;
  unint64_t v5;
  uint64_t v6;

  v2 = v0[1];
  v3 = HIBYTE(v2) & 0xF;
  if ((v2 & 0x2000000000000000) == 0)
    v3 = *v0 & 0xFFFFFFFFFFFFLL;
  if (!v3 || (result = dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(), !v1))
  {
    v5 = v0[3];
    v6 = HIBYTE(v5) & 0xF;
    if ((v5 & 0x2000000000000000) == 0)
      v6 = v0[2] & 0xFFFFFFFFFFFFLL;
    if (!v6 || (result = dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(), !v1))
    {
      if (!v0[4]
        || (lazy protocol witness table accessor for type NCProtoSuggestionAdvertisement.SuggestionType and conformance NCProtoSuggestionAdvertisement.SuggestionType(),
            result = dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)(),
            !v1))
      {
        type metadata accessor for NCProtoSuggestionAdvertisement(0);
        return UnknownStorage.traverse<A>(visitor:)();
      }
    }
  }
  return result;
}

Swift::Int NCProtoSuggestionAdvertisement.hashValue.getter()
{
  return NCProtoContactInfo.hashValue.getter(type metadata accessor for NCProtoSuggestionAdvertisement, &lazy protocol witness table cache variable for type NCProtoSuggestionAdvertisement and conformance NCProtoSuggestionAdvertisement, (uint64_t)&protocol conformance descriptor for NCProtoSuggestionAdvertisement);
}

uint64_t protocol witness for Message.init() in conformance NCProtoSuggestionAdvertisement@<X0>(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0xE000000000000000;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0xE000000000000000;
  *(_QWORD *)(a1 + 32) = 0;
  *(_BYTE *)(a1 + 40) = 1;
  return UnknownStorage.init()();
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance NCProtoSuggestionAdvertisement()
{
  return 0xD00000000000001FLL;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance NCProtoSuggestionAdvertisement()
{
  return NCProtoSuggestionAdvertisement.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance NCProtoSuggestionAdvertisement()
{
  return NCProtoSuggestionAdvertisement.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance NCProtoSuggestionAdvertisement()
{
  lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoSuggestionAdvertisement and conformance NCProtoSuggestionAdvertisement, type metadata accessor for NCProtoSuggestionAdvertisement, (uint64_t)&protocol conformance descriptor for NCProtoSuggestionAdvertisement);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance NCProtoSuggestionAdvertisement@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance NCProtoConversationAVMode(&one-time initialization token for _protobuf_nameMap, (uint64_t)static NCProtoSuggestionAdvertisement._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance NCProtoSuggestionAdvertisement()
{
  lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoSuggestionAdvertisement and conformance NCProtoSuggestionAdvertisement, type metadata accessor for NCProtoSuggestionAdvertisement, (uint64_t)&protocol conformance descriptor for NCProtoSuggestionAdvertisement);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance NCProtoSuggestionAdvertisement()
{
  lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoSuggestionAdvertisement and conformance NCProtoSuggestionAdvertisement, type metadata accessor for NCProtoSuggestionAdvertisement, (uint64_t)&protocol conformance descriptor for NCProtoSuggestionAdvertisement);
  return Message.hash(into:)();
}

uint64_t static NCProtoSuggestionAdvertisement.SuggestionType._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static NCProtoConversationAVMode._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static NCProtoSuggestionAdvertisement.SuggestionType._protobuf_nameMap, a1);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance NCProtoSuggestionAdvertisement.SuggestionType@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance NCProtoConversationAVMode(&one-time initialization token for _protobuf_nameMap, (uint64_t)static NCProtoSuggestionAdvertisement.SuggestionType._protobuf_nameMap, a1);
}

unint64_t static NCProtoSuggestionAdvertisementDidChangeEvent.protoMessageName.getter()
{
  return 0xD00000000000002DLL;
}

uint64_t static NCProtoSuggestionAdvertisementDidChangeEvent._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static NCProtoConversationAVMode._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static NCProtoSuggestionAdvertisementDidChangeEvent._protobuf_nameMap, a1);
}

uint64_t NCProtoSuggestionAdvertisementDidChangeEvent.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return NCProtoSuggestionAdvertisementDidChangeEvent.decodeMessage<A>(decoder:)(a1, a2, a3, (void (*)(_QWORD))type metadata accessor for NCProtoSuggestionAdvertisementDidChangeEvent, type metadata accessor for NCProtoSuggestionAdvertisement, &lazy protocol witness table cache variable for type NCProtoSuggestionAdvertisement and conformance NCProtoSuggestionAdvertisement, (uint64_t)&protocol conformance descriptor for NCProtoSuggestionAdvertisement);
}

uint64_t NCProtoSuggestionAdvertisementDidChangeEvent.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return NCProtoSuggestionAdvertisementDidChangeEvent.traverse<A>(visitor:)(a1, a2, a3, closure #1 in NCProtoSuggestionAdvertisementDidChangeEvent.traverse<A>(visitor:));
}

uint64_t closure #1 in NCProtoSuggestionAdvertisementDidChangeEvent.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  _QWORD v14[2];

  v14[1] = a4;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NCProtoSuggestionAdvertisement?);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for NCProtoSuggestionAdvertisement(0);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for NCProtoSuggestionAdvertisementDidChangeEvent(0);
  outlined init with copy of NCProtoContactInfo?(a1 + *(int *)(v12 + 20), (uint64_t)v7, &demangling cache variable for type metadata for NCProtoSuggestionAdvertisement?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
    return outlined destroy of NCProtoContactInfo?((uint64_t)v7, &demangling cache variable for type metadata for NCProtoSuggestionAdvertisement?);
  outlined init with take of NCProtoContactInfo((uint64_t)v7, (uint64_t)v11, type metadata accessor for NCProtoSuggestionAdvertisement);
  lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoSuggestionAdvertisement and conformance NCProtoSuggestionAdvertisement, type metadata accessor for NCProtoSuggestionAdvertisement, (uint64_t)&protocol conformance descriptor for NCProtoSuggestionAdvertisement);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of NCProtoContactInfo((uint64_t)v11, type metadata accessor for NCProtoSuggestionAdvertisement);
}

Swift::Int NCProtoSuggestionAdvertisementDidChangeEvent.hashValue.getter()
{
  return NCProtoContactInfo.hashValue.getter(type metadata accessor for NCProtoSuggestionAdvertisementDidChangeEvent, &lazy protocol witness table cache variable for type NCProtoSuggestionAdvertisementDidChangeEvent and conformance NCProtoSuggestionAdvertisementDidChangeEvent, (uint64_t)&protocol conformance descriptor for NCProtoSuggestionAdvertisementDidChangeEvent);
}

uint64_t protocol witness for Message.init() in conformance NCProtoSuggestionAdvertisementDidChangeEvent@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for Message.init() in conformance NCProtoSuggestionAdvertisementDidChangeEvent(a1, type metadata accessor for NCProtoSuggestionAdvertisement, a2);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance NCProtoSuggestionAdvertisementDidChangeEvent()
{
  return 0xD00000000000002DLL;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance NCProtoSuggestionAdvertisementDidChangeEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return NCProtoSuggestionAdvertisementDidChangeEvent.decodeMessage<A>(decoder:)(a1, a2, a3);
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance NCProtoSuggestionAdvertisementDidChangeEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return NCProtoSuggestionAdvertisementDidChangeEvent.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance NCProtoSuggestionAdvertisementDidChangeEvent()
{
  lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoSuggestionAdvertisementDidChangeEvent and conformance NCProtoSuggestionAdvertisementDidChangeEvent, type metadata accessor for NCProtoSuggestionAdvertisementDidChangeEvent, (uint64_t)&protocol conformance descriptor for NCProtoSuggestionAdvertisementDidChangeEvent);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance NCProtoSuggestionAdvertisementDidChangeEvent@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance NCProtoConversationAVMode(&one-time initialization token for _protobuf_nameMap, (uint64_t)static NCProtoSuggestionAdvertisementDidChangeEvent._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance NCProtoSuggestionAdvertisementDidChangeEvent()
{
  lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoSuggestionAdvertisementDidChangeEvent and conformance NCProtoSuggestionAdvertisementDidChangeEvent, type metadata accessor for NCProtoSuggestionAdvertisementDidChangeEvent, (uint64_t)&protocol conformance descriptor for NCProtoSuggestionAdvertisementDidChangeEvent);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance NCProtoSuggestionAdvertisementDidChangeEvent()
{
  lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoSuggestionAdvertisementDidChangeEvent and conformance NCProtoSuggestionAdvertisementDidChangeEvent, type metadata accessor for NCProtoSuggestionAdvertisementDidChangeEvent, (uint64_t)&protocol conformance descriptor for NCProtoSuggestionAdvertisementDidChangeEvent);
  return Message.hash(into:)();
}

unint64_t static NCProtoLagunaConnectionRequest.protoMessageName.getter()
{
  return 0xD00000000000001FLL;
}

uint64_t static NCProtoLagunaConnectionRequest._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static NCProtoConversationAVMode._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static NCProtoLagunaConnectionRequest._protobuf_nameMap, a1);
}

uint64_t NCProtoLagunaConnectionRequest.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t result;
  char v2;

  result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
          dispatch thunk of Decoder.decodeRepeatedBytesField(value:)();
          break;
        case 2:
          closure #2 in NCProtoRecentCallsDidChangeEvent.decodeMessage<A>(decoder:)();
          break;
        case 3:
          closure #3 in NCProtoLagunaConnectionRequest.decodeMessage<A>(decoder:)();
          break;
        case 4:
          type metadata accessor for NCProtoActiveConversation(0);
          lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoActiveConversation and conformance NCProtoActiveConversation, type metadata accessor for NCProtoActiveConversation, (uint64_t)&protocol conformance descriptor for NCProtoActiveConversation);
          goto LABEL_11;
        case 5:
          type metadata accessor for NCProtoContinuityFavorite(0);
          lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoContinuityFavorite and conformance NCProtoContinuityFavorite, type metadata accessor for NCProtoContinuityFavorite, (uint64_t)&protocol conformance descriptor for NCProtoContinuityFavorite);
          goto LABEL_11;
        case 6:
          type metadata accessor for NCProtoContinuityCall(0);
          lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoContinuityCall and conformance NCProtoContinuityCall, type metadata accessor for NCProtoContinuityCall, (uint64_t)&protocol conformance descriptor for NCProtoContinuityCall);
LABEL_11:
          dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)();
          break;
        case 7:
          closure #7 in NCProtoLagunaConnectionRequest.decodeMessage<A>(decoder:)();
          break;
        default:
          break;
      }
      result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t closure #3 in NCProtoLagunaConnectionRequest.decodeMessage<A>(decoder:)()
{
  type metadata accessor for NCProtoLagunaConnectionRequest(0);
  type metadata accessor for NCProtoCallState(0);
  lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoCallState and conformance NCProtoCallState, type metadata accessor for NCProtoCallState, (uint64_t)&protocol conformance descriptor for NCProtoCallState);
  return dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
}

uint64_t NCProtoLagunaConnectionRequest.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t result;

  v5 = v3;
  if (!*(_QWORD *)(*v5 + 16)
    || (result = dispatch thunk of Visitor.visitRepeatedBytesField(value:fieldNumber:)(), !v4))
  {
    if (!*(_QWORD *)(v5[1] + 16)
      || (type metadata accessor for ProtobufString(),
          type metadata accessor for NCProtoContactInfo(0),
          lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoContactInfo and conformance NCProtoContactInfo, type metadata accessor for NCProtoContactInfo, (uint64_t)&protocol conformance descriptor for NCProtoContactInfo), lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoContactInfo and conformance NCProtoContactInfo, type metadata accessor for NCProtoContactInfo, (uint64_t)&protocol conformance descriptor for NCProtoContactInfo), result = dispatch thunk of Visitor.visitMapField<A, B>(fieldType:value:fieldNumber:)(), !v4))
    {
      result = closure #1 in NCProtoLagunaConnectionRequest.traverse<A>(visitor:)((uint64_t)v5, a1, a2, a3);
      if (!v4)
      {
        if (*(_QWORD *)(v5[2] + 16))
        {
          type metadata accessor for NCProtoActiveConversation(0);
          lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoActiveConversation and conformance NCProtoActiveConversation, type metadata accessor for NCProtoActiveConversation, (uint64_t)&protocol conformance descriptor for NCProtoActiveConversation);
          dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)();
        }
        if (*(_QWORD *)(v5[3] + 16))
        {
          type metadata accessor for NCProtoContinuityFavorite(0);
          lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoContinuityFavorite and conformance NCProtoContinuityFavorite, type metadata accessor for NCProtoContinuityFavorite, (uint64_t)&protocol conformance descriptor for NCProtoContinuityFavorite);
          dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)();
        }
        if (*(_QWORD *)(v5[4] + 16))
        {
          type metadata accessor for NCProtoContinuityCall(0);
          lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoContinuityCall and conformance NCProtoContinuityCall, type metadata accessor for NCProtoContinuityCall, (uint64_t)&protocol conformance descriptor for NCProtoContinuityCall);
          dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)();
        }
        if (*(_QWORD *)(v5[5] + 16))
        {
          type metadata accessor for ProtobufString();
          type metadata accessor for NCProtoCallInfo(0);
          lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoCallInfo and conformance NCProtoCallInfo, type metadata accessor for NCProtoCallInfo, (uint64_t)&protocol conformance descriptor for NCProtoCallInfo);
          lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoCallInfo and conformance NCProtoCallInfo, type metadata accessor for NCProtoCallInfo, (uint64_t)&protocol conformance descriptor for NCProtoCallInfo);
          dispatch thunk of Visitor.visitMapField<A, B>(fieldType:value:fieldNumber:)();
        }
        type metadata accessor for NCProtoLagunaConnectionRequest(0);
        return UnknownStorage.traverse<A>(visitor:)();
      }
    }
  }
  return result;
}

uint64_t closure #1 in NCProtoLagunaConnectionRequest.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  _QWORD v14[2];

  v14[1] = a4;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NCProtoCallState?);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for NCProtoCallState(0);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for NCProtoLagunaConnectionRequest(0);
  outlined init with copy of NCProtoContactInfo?(a1 + *(int *)(v12 + 44), (uint64_t)v7, &demangling cache variable for type metadata for NCProtoCallState?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
    return outlined destroy of NCProtoContactInfo?((uint64_t)v7, &demangling cache variable for type metadata for NCProtoCallState?);
  outlined init with take of NCProtoContactInfo((uint64_t)v7, (uint64_t)v11, type metadata accessor for NCProtoCallState);
  lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoCallState and conformance NCProtoCallState, type metadata accessor for NCProtoCallState, (uint64_t)&protocol conformance descriptor for NCProtoCallState);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of NCProtoContactInfo((uint64_t)v11, type metadata accessor for NCProtoCallState);
}

Swift::Int NCProtoLagunaConnectionRequest.hashValue.getter()
{
  return NCProtoContactInfo.hashValue.getter(type metadata accessor for NCProtoLagunaConnectionRequest, &lazy protocol witness table cache variable for type NCProtoLagunaConnectionRequest and conformance NCProtoLagunaConnectionRequest, (uint64_t)&protocol conformance descriptor for NCProtoLagunaConnectionRequest);
}

uint64_t protocol witness for Message.init() in conformance NCProtoLagunaConnectionRequest@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  char *v5;
  uint64_t v6;

  v4 = MEMORY[0x24BEE4AF8];
  *a2 = MEMORY[0x24BEE4AF8];
  a2[1] = specialized Dictionary.init(dictionaryLiteral:)(v4, &demangling cache variable for type metadata for (String, NCProtoContactInfo), &demangling cache variable for type metadata for _DictionaryStorage<String, NCProtoContactInfo>, type metadata accessor for NCProtoContactInfo);
  a2[2] = v4;
  a2[3] = v4;
  a2[4] = v4;
  a2[5] = specialized Dictionary.init(dictionaryLiteral:)(v4, &demangling cache variable for type metadata for (String, NCProtoCallInfo), &demangling cache variable for type metadata for _DictionaryStorage<String, NCProtoCallInfo>, type metadata accessor for NCProtoCallInfo);
  UnknownStorage.init()();
  v5 = (char *)a2 + *(int *)(a1 + 44);
  v6 = type metadata accessor for NCProtoCallState(0);
  return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(v5, 1, 1, v6);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance NCProtoLagunaConnectionRequest()
{
  return 0xD00000000000001FLL;
}

uint64_t (*protocol witness for Message.unknownFields.modify in conformance NCProtoLagunaConnectionRequest())()
{
  return NCProtoContactInfo.namePrefix.modify;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance NCProtoLagunaConnectionRequest()
{
  return NCProtoLagunaConnectionRequest.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance NCProtoLagunaConnectionRequest(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return NCProtoLagunaConnectionRequest.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance NCProtoLagunaConnectionRequest()
{
  lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoLagunaConnectionRequest and conformance NCProtoLagunaConnectionRequest, type metadata accessor for NCProtoLagunaConnectionRequest, (uint64_t)&protocol conformance descriptor for NCProtoLagunaConnectionRequest);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance NCProtoLagunaConnectionRequest@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance NCProtoConversationAVMode(&one-time initialization token for _protobuf_nameMap, (uint64_t)static NCProtoLagunaConnectionRequest._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance NCProtoLagunaConnectionRequest()
{
  lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoLagunaConnectionRequest and conformance NCProtoLagunaConnectionRequest, type metadata accessor for NCProtoLagunaConnectionRequest, (uint64_t)&protocol conformance descriptor for NCProtoLagunaConnectionRequest);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance NCProtoLagunaConnectionRequest()
{
  lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoLagunaConnectionRequest and conformance NCProtoLagunaConnectionRequest, type metadata accessor for NCProtoLagunaConnectionRequest, (uint64_t)&protocol conformance descriptor for NCProtoLagunaConnectionRequest);
  return Message.hash(into:)();
}

unint64_t static NCProtoLagunaConnectionResponse.protoMessageName.getter()
{
  return 0xD000000000000020;
}

uint64_t static NCProtoLagunaConnectionResponse._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static NCProtoConversationAVMode._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static NCProtoLagunaConnectionResponse._protobuf_nameMap, a1);
}

uint64_t NCProtoLagunaConnectionResponse.decodeMessage<A>(decoder:)()
{
  return NCProtoLagunaConnectionResponse.decodeMessage<A>(decoder:)();
}

{
  uint64_t v0;
  uint64_t result;
  char v2;

  do
    result = dispatch thunk of Decoder.nextFieldNumber()();
  while (!v0 && (v2 & 1) == 0);
  return result;
}

Swift::Int NCProtoLagunaConnectionResponse.hashValue.getter()
{
  return NCProtoContactInfo.hashValue.getter(type metadata accessor for NCProtoLagunaConnectionResponse, &lazy protocol witness table cache variable for type NCProtoLagunaConnectionResponse and conformance NCProtoLagunaConnectionResponse, (uint64_t)&protocol conformance descriptor for NCProtoLagunaConnectionResponse);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance NCProtoLagunaConnectionResponse()
{
  return 0xD000000000000020;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance NCProtoLagunaConnectionResponse()
{
  return NCProtoTVLaunchedEvent.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance NCProtoLagunaConnectionResponse()
{
  return NCProtoTVLaunchedEvent.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance NCProtoLagunaConnectionResponse()
{
  lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoLagunaConnectionResponse and conformance NCProtoLagunaConnectionResponse, type metadata accessor for NCProtoLagunaConnectionResponse, (uint64_t)&protocol conformance descriptor for NCProtoLagunaConnectionResponse);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance NCProtoLagunaConnectionResponse@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance NCProtoConversationAVMode(&one-time initialization token for _protobuf_nameMap, (uint64_t)static NCProtoLagunaConnectionResponse._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance NCProtoLagunaConnectionResponse()
{
  lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoLagunaConnectionResponse and conformance NCProtoLagunaConnectionResponse, type metadata accessor for NCProtoLagunaConnectionResponse, (uint64_t)&protocol conformance descriptor for NCProtoLagunaConnectionResponse);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance NCProtoLagunaConnectionResponse()
{
  lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoLagunaConnectionResponse and conformance NCProtoLagunaConnectionResponse, type metadata accessor for NCProtoLagunaConnectionResponse, (uint64_t)&protocol conformance descriptor for NCProtoLagunaConnectionResponse);
  return Message.hash(into:)();
}

unint64_t static NCProtoDeviceLaunchedEvent.protoMessageName.getter()
{
  return 0xD00000000000001BLL;
}

uint64_t static NCProtoDeviceLaunchedEvent._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static NCProtoConversationAVMode._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static NCProtoDeviceLaunchedEvent._protobuf_nameMap, a1);
}

uint64_t NCProtoDeviceLaunchedEvent.decodeMessage<A>(decoder:)()
{
  return NCProtoLagunaConnectionResponse.decodeMessage<A>(decoder:)();
}

Swift::Int NCProtoDeviceLaunchedEvent.hashValue.getter()
{
  return NCProtoContactInfo.hashValue.getter(type metadata accessor for NCProtoDeviceLaunchedEvent, &lazy protocol witness table cache variable for type NCProtoDeviceLaunchedEvent and conformance NCProtoDeviceLaunchedEvent, (uint64_t)&protocol conformance descriptor for NCProtoDeviceLaunchedEvent);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance NCProtoDeviceLaunchedEvent()
{
  return 0xD00000000000001BLL;
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance NCProtoDeviceLaunchedEvent()
{
  lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoDeviceLaunchedEvent and conformance NCProtoDeviceLaunchedEvent, type metadata accessor for NCProtoDeviceLaunchedEvent, (uint64_t)&protocol conformance descriptor for NCProtoDeviceLaunchedEvent);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance NCProtoDeviceLaunchedEvent@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance NCProtoConversationAVMode(&one-time initialization token for _protobuf_nameMap, (uint64_t)static NCProtoDeviceLaunchedEvent._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance NCProtoDeviceLaunchedEvent()
{
  lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoDeviceLaunchedEvent and conformance NCProtoDeviceLaunchedEvent, type metadata accessor for NCProtoDeviceLaunchedEvent, (uint64_t)&protocol conformance descriptor for NCProtoDeviceLaunchedEvent);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance NCProtoDeviceLaunchedEvent()
{
  lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoDeviceLaunchedEvent and conformance NCProtoDeviceLaunchedEvent, type metadata accessor for NCProtoDeviceLaunchedEvent, (uint64_t)&protocol conformance descriptor for NCProtoDeviceLaunchedEvent);
  return Message.hash(into:)();
}

unint64_t static NCProtoTVLaunchedEvent.protoMessageName.getter()
{
  return 0xD000000000000017;
}

uint64_t static NCProtoTVLaunchedEvent._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static NCProtoConversationAVMode._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static NCProtoTVLaunchedEvent._protobuf_nameMap, a1);
}

uint64_t NCProtoTVLaunchedEvent.decodeMessage<A>(decoder:)()
{
  return NCProtoLagunaConnectionResponse.decodeMessage<A>(decoder:)();
}

uint64_t NCProtoTVLaunchedEvent.traverse<A>(visitor:)()
{
  return UnknownStorage.traverse<A>(visitor:)();
}

Swift::Int NCProtoTVLaunchedEvent.hashValue.getter()
{
  return NCProtoContactInfo.hashValue.getter(type metadata accessor for NCProtoTVLaunchedEvent, &lazy protocol witness table cache variable for type NCProtoTVLaunchedEvent and conformance NCProtoTVLaunchedEvent, (uint64_t)&protocol conformance descriptor for NCProtoTVLaunchedEvent);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance NCProtoTVLaunchedEvent()
{
  return 0xD000000000000017;
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance NCProtoTVLaunchedEvent()
{
  lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoTVLaunchedEvent and conformance NCProtoTVLaunchedEvent, type metadata accessor for NCProtoTVLaunchedEvent, (uint64_t)&protocol conformance descriptor for NCProtoTVLaunchedEvent);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance NCProtoTVLaunchedEvent@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance NCProtoConversationAVMode(&one-time initialization token for _protobuf_nameMap, (uint64_t)static NCProtoTVLaunchedEvent._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance NCProtoTVLaunchedEvent()
{
  lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoTVLaunchedEvent and conformance NCProtoTVLaunchedEvent, type metadata accessor for NCProtoTVLaunchedEvent, (uint64_t)&protocol conformance descriptor for NCProtoTVLaunchedEvent);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance NCProtoTVLaunchedEvent()
{
  lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoTVLaunchedEvent and conformance NCProtoTVLaunchedEvent, type metadata accessor for NCProtoTVLaunchedEvent, (uint64_t)&protocol conformance descriptor for NCProtoTVLaunchedEvent);
  return Message.hash(into:)();
}

unint64_t static NCProtoCancelAddMemberEvent.protoMessageName.getter()
{
  return 0xD00000000000001CLL;
}

uint64_t static NCProtoCancelAddMemberEvent._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static NCProtoConversationAVMode._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static NCProtoCancelAddMemberEvent._protobuf_nameMap, a1);
}

uint64_t NCProtoCancelAddMemberEvent.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return NCProtoEndedSessionEvent.decodeMessage<A>(decoder:)(a1, a2, a3, (void (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BE5C120]);
}

uint64_t NCProtoCancelAddMemberEvent.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return NCProtoEndedSessionEvent.traverse<A>(visitor:)(a1, a2, a3, (void (*)(_QWORD))type metadata accessor for NCProtoCancelAddMemberEvent);
}

uint64_t NCProtoEndedSessionEvent.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(_QWORD))
{
  _QWORD *v4;
  uint64_t v5;
  unint64_t v7;
  uint64_t v8;
  uint64_t result;

  v7 = v4[1];
  v8 = HIBYTE(v7) & 0xF;
  if ((v7 & 0x2000000000000000) == 0)
    v8 = *v4 & 0xFFFFFFFFFFFFLL;
  if (!v8 || (result = dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(), !v5))
  {
    a4(0);
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

uint64_t static NCProtoCancelAddMemberEvent.== infix(_:_:)(_QWORD *a1, char *a2)
{
  return specialized static NCProtoGetCallDisplayDetailsRequest.== infix(_:_:)(a1, a2, type metadata accessor for NCProtoCancelAddMemberEvent) & 1;
}

Swift::Int NCProtoCancelAddMemberEvent.hashValue.getter()
{
  return NCProtoContactInfo.hashValue.getter(type metadata accessor for NCProtoCancelAddMemberEvent, &lazy protocol witness table cache variable for type NCProtoCancelAddMemberEvent and conformance NCProtoCancelAddMemberEvent, (uint64_t)&protocol conformance descriptor for NCProtoCancelAddMemberEvent);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance NCProtoCancelAddMemberEvent()
{
  return 0xD00000000000001CLL;
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance NCProtoCancelAddMemberEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return NCProtoCancelAddMemberEvent.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance NCProtoCancelAddMemberEvent()
{
  lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoCancelAddMemberEvent and conformance NCProtoCancelAddMemberEvent, type metadata accessor for NCProtoCancelAddMemberEvent, (uint64_t)&protocol conformance descriptor for NCProtoCancelAddMemberEvent);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance NCProtoCancelAddMemberEvent@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance NCProtoConversationAVMode(&one-time initialization token for _protobuf_nameMap, (uint64_t)static NCProtoCancelAddMemberEvent._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance NCProtoCancelAddMemberEvent()
{
  lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoCancelAddMemberEvent and conformance NCProtoCancelAddMemberEvent, type metadata accessor for NCProtoCancelAddMemberEvent, (uint64_t)&protocol conformance descriptor for NCProtoCancelAddMemberEvent);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance NCProtoCancelAddMemberEvent()
{
  lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoCancelAddMemberEvent and conformance NCProtoCancelAddMemberEvent, type metadata accessor for NCProtoCancelAddMemberEvent, (uint64_t)&protocol conformance descriptor for NCProtoCancelAddMemberEvent);
  return Message.hash(into:)();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance NCProtoCancelAddMemberEvent(_QWORD *a1, char *a2)
{
  return specialized static NCProtoGetCallDisplayDetailsRequest.== infix(_:_:)(a1, a2, type metadata accessor for NCProtoCancelAddMemberEvent) & 1;
}

unint64_t static NCProtoEndLagunaSessionEvent.protoMessageName.getter()
{
  return 0xD00000000000001DLL;
}

uint64_t static NCProtoEndLagunaSessionEvent._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static NCProtoConversationAVMode._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static NCProtoEndLagunaSessionEvent._protobuf_nameMap, a1);
}

uint64_t NCProtoEndLagunaSessionEvent.decodeMessage<A>(decoder:)()
{
  return NCProtoLagunaConnectionResponse.decodeMessage<A>(decoder:)();
}

Swift::Int NCProtoEndLagunaSessionEvent.hashValue.getter()
{
  return NCProtoContactInfo.hashValue.getter(type metadata accessor for NCProtoEndLagunaSessionEvent, &lazy protocol witness table cache variable for type NCProtoEndLagunaSessionEvent and conformance NCProtoEndLagunaSessionEvent, (uint64_t)&protocol conformance descriptor for NCProtoEndLagunaSessionEvent);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance NCProtoEndLagunaSessionEvent()
{
  return 0xD00000000000001DLL;
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance NCProtoEndLagunaSessionEvent()
{
  lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoEndLagunaSessionEvent and conformance NCProtoEndLagunaSessionEvent, type metadata accessor for NCProtoEndLagunaSessionEvent, (uint64_t)&protocol conformance descriptor for NCProtoEndLagunaSessionEvent);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance NCProtoEndLagunaSessionEvent@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance NCProtoConversationAVMode(&one-time initialization token for _protobuf_nameMap, (uint64_t)static NCProtoEndLagunaSessionEvent._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance NCProtoEndLagunaSessionEvent()
{
  lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoEndLagunaSessionEvent and conformance NCProtoEndLagunaSessionEvent, type metadata accessor for NCProtoEndLagunaSessionEvent, (uint64_t)&protocol conformance descriptor for NCProtoEndLagunaSessionEvent);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance NCProtoEndLagunaSessionEvent()
{
  lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoEndLagunaSessionEvent and conformance NCProtoEndLagunaSessionEvent, type metadata accessor for NCProtoEndLagunaSessionEvent, (uint64_t)&protocol conformance descriptor for NCProtoEndLagunaSessionEvent);
  return Message.hash(into:)();
}

unint64_t static NCProtoPolicyInfoUpdatedEvent.protoMessageName.getter()
{
  return 0xD00000000000001ELL;
}

uint64_t static NCProtoPolicyInfoUpdatedEvent._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static NCProtoConversationAVMode._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static NCProtoPolicyInfoUpdatedEvent._protobuf_nameMap, a1);
}

uint64_t NCProtoPolicyInfoUpdatedEvent.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return NCProtoStartConversationRequest.decodeMessage<A>(decoder:)(a1, a2, a3, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))closure #1 in NCProtoPolicyInfoUpdatedEvent.decodeMessage<A>(decoder:));
}

uint64_t NCProtoStartConversationRequest.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t result;
  char v12;

  v7 = v4;
  while (1)
  {
    result = dispatch thunk of Decoder.nextFieldNumber()();
    if (v5 || (v12 & 1) != 0)
      break;
    if (result == 1)
      a4(a1, v7, a2, a3);
  }
  return result;
}

uint64_t closure #1 in NCProtoPolicyInfoUpdatedEvent.decodeMessage<A>(decoder:)()
{
  type metadata accessor for ProtobufString();
  type metadata accessor for ProtobufBool();
  return dispatch thunk of Decoder.decodeMapField<A, B>(fieldType:value:)();
}

uint64_t NCProtoPolicyInfoUpdatedEvent.traverse<A>(visitor:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;

  if (!*(_QWORD *)(*(_QWORD *)v0 + 16)
    || (type metadata accessor for ProtobufString(),
        type metadata accessor for ProtobufBool(),
        result = dispatch thunk of Visitor.visitMapField<A, B>(fieldType:value:fieldNumber:)(),
        !v1))
  {
    type metadata accessor for NCProtoPolicyInfoUpdatedEvent(0);
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

uint64_t static NCProtoPolicyInfoUpdatedEvent.== infix(_:_:)(_QWORD *a1, char *a2)
{
  return specialized static NCProtoAddConversationParticipantsRequest.== infix(_:_:)(a1, a2, specialized static Dictionary<>.== infix(_:_:), type metadata accessor for NCProtoPolicyInfoUpdatedEvent) & 1;
}

Swift::Int NCProtoPolicyInfoUpdatedEvent.hashValue.getter()
{
  return NCProtoContactInfo.hashValue.getter(type metadata accessor for NCProtoPolicyInfoUpdatedEvent, &lazy protocol witness table cache variable for type NCProtoPolicyInfoUpdatedEvent and conformance NCProtoPolicyInfoUpdatedEvent, (uint64_t)&protocol conformance descriptor for NCProtoPolicyInfoUpdatedEvent);
}

uint64_t protocol witness for Message.init() in conformance NCProtoPolicyInfoUpdatedEvent@<X0>(unint64_t *a1@<X8>)
{
  *a1 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
  return UnknownStorage.init()();
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance NCProtoPolicyInfoUpdatedEvent()
{
  return 0xD00000000000001ELL;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance NCProtoPolicyInfoUpdatedEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return NCProtoPolicyInfoUpdatedEvent.decodeMessage<A>(decoder:)(a1, a2, a3);
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance NCProtoPolicyInfoUpdatedEvent()
{
  return NCProtoPolicyInfoUpdatedEvent.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance NCProtoPolicyInfoUpdatedEvent()
{
  lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoPolicyInfoUpdatedEvent and conformance NCProtoPolicyInfoUpdatedEvent, type metadata accessor for NCProtoPolicyInfoUpdatedEvent, (uint64_t)&protocol conformance descriptor for NCProtoPolicyInfoUpdatedEvent);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance NCProtoPolicyInfoUpdatedEvent@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance NCProtoConversationAVMode(&one-time initialization token for _protobuf_nameMap, (uint64_t)static NCProtoPolicyInfoUpdatedEvent._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance NCProtoPolicyInfoUpdatedEvent()
{
  lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoPolicyInfoUpdatedEvent and conformance NCProtoPolicyInfoUpdatedEvent, type metadata accessor for NCProtoPolicyInfoUpdatedEvent, (uint64_t)&protocol conformance descriptor for NCProtoPolicyInfoUpdatedEvent);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance NCProtoPolicyInfoUpdatedEvent()
{
  lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoPolicyInfoUpdatedEvent and conformance NCProtoPolicyInfoUpdatedEvent, type metadata accessor for NCProtoPolicyInfoUpdatedEvent, (uint64_t)&protocol conformance descriptor for NCProtoPolicyInfoUpdatedEvent);
  return Message.hash(into:)();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance NCProtoPolicyInfoUpdatedEvent(_QWORD *a1, char *a2)
{
  return specialized static NCProtoAddConversationParticipantsRequest.== infix(_:_:)(a1, a2, specialized static Dictionary<>.== infix(_:_:), type metadata accessor for NCProtoPolicyInfoUpdatedEvent) & 1;
}

unint64_t static NCProtoAddMemberRequest.protoMessageName.getter()
{
  return 0xD000000000000018;
}

uint64_t static NCProtoAddMemberRequest._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static NCProtoConversationAVMode._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static NCProtoAddMemberRequest._protobuf_nameMap, a1);
}

uint64_t NCProtoAddMemberRequest.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t result;
  char v2;
  uint64_t v3;
  uint64_t v4;

  result = dispatch thunk of Decoder.nextFieldNumber()();
  v3 = v0;
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
        case 2:
          v4 = v3;
          dispatch thunk of Decoder.decodeSingularStringField(value:)();
          goto LABEL_5;
        case 3:
          lazy protocol witness table accessor for type NCProtoAddMemberRequest.NearbyConversationPullContext and conformance NCProtoAddMemberRequest.NearbyConversationPullContext();
          v4 = v3;
          dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)();
          goto LABEL_5;
        case 4:
          type metadata accessor for NCProtoAddMemberRequest(0);
          v4 = v3;
          dispatch thunk of Decoder.decodeSingularBytesField(value:)();
LABEL_5:
          v3 = v4;
          break;
        default:
          break;
      }
      result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t NCProtoAddMemberRequest.traverse<A>(visitor:)()
{
  _QWORD *v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t result;
  unint64_t v5;
  uint64_t v6;

  v2 = v0[1];
  v3 = HIBYTE(v2) & 0xF;
  if ((v2 & 0x2000000000000000) == 0)
    v3 = *v0 & 0xFFFFFFFFFFFFLL;
  if (!v3 || (result = dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(), !v1))
  {
    v5 = v0[3];
    v6 = HIBYTE(v5) & 0xF;
    if ((v5 & 0x2000000000000000) == 0)
      v6 = v0[2] & 0xFFFFFFFFFFFFLL;
    if (!v6 || (result = dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(), !v1))
    {
      if (!v0[4]
        || (lazy protocol witness table accessor for type NCProtoAddMemberRequest.NearbyConversationPullContext and conformance NCProtoAddMemberRequest.NearbyConversationPullContext(),
            result = dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)(),
            !v1))
      {
        result = closure #1 in NCProtoAddMemberRequest.traverse<A>(visitor:)((uint64_t)v0);
        if (!v1)
        {
          type metadata accessor for NCProtoAddMemberRequest(0);
          return UnknownStorage.traverse<A>(visitor:)();
        }
      }
    }
  }
  return result;
}

uint64_t closure #1 in NCProtoAddMemberRequest.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;

  result = type metadata accessor for NCProtoAddMemberRequest(0);
  v3 = a1 + *(int *)(result + 32);
  v4 = *(_QWORD *)(v3 + 8);
  if (v4 >> 60 != 15)
  {
    v5 = *(_QWORD *)v3;
    outlined copy of Data._Representation(*(_QWORD *)v3, *(_QWORD *)(v3 + 8));
    dispatch thunk of Visitor.visitSingularBytesField(value:fieldNumber:)();
    return outlined consume of Data?(v5, v4);
  }
  return result;
}

Swift::Int NCProtoAddMemberRequest.hashValue.getter()
{
  return NCProtoContactInfo.hashValue.getter(type metadata accessor for NCProtoAddMemberRequest, &lazy protocol witness table cache variable for type NCProtoAddMemberRequest and conformance NCProtoAddMemberRequest, (uint64_t)&protocol conformance descriptor for NCProtoAddMemberRequest);
}

double protocol witness for Message.init() in conformance NCProtoAddMemberRequest@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  double result;

  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0xE000000000000000;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0xE000000000000000;
  *(_QWORD *)(a2 + 32) = 0;
  *(_BYTE *)(a2 + 40) = 1;
  UnknownStorage.init()();
  result = 0.0;
  *(_OWORD *)(a2 + *(int *)(a1 + 32)) = xmmword_242A30CC0;
  return result;
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance NCProtoAddMemberRequest()
{
  return 0xD000000000000018;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance NCProtoAddMemberRequest()
{
  return NCProtoAddMemberRequest.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance NCProtoAddMemberRequest()
{
  return NCProtoAddMemberRequest.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance NCProtoAddMemberRequest()
{
  lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoAddMemberRequest and conformance NCProtoAddMemberRequest, type metadata accessor for NCProtoAddMemberRequest, (uint64_t)&protocol conformance descriptor for NCProtoAddMemberRequest);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance NCProtoAddMemberRequest@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance NCProtoConversationAVMode(&one-time initialization token for _protobuf_nameMap, (uint64_t)static NCProtoAddMemberRequest._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance NCProtoAddMemberRequest()
{
  lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoAddMemberRequest and conformance NCProtoAddMemberRequest, type metadata accessor for NCProtoAddMemberRequest, (uint64_t)&protocol conformance descriptor for NCProtoAddMemberRequest);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance NCProtoAddMemberRequest()
{
  lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoAddMemberRequest and conformance NCProtoAddMemberRequest, type metadata accessor for NCProtoAddMemberRequest, (uint64_t)&protocol conformance descriptor for NCProtoAddMemberRequest);
  return Message.hash(into:)();
}

uint64_t static NCProtoAddMemberRequest.NearbyConversationPullContext._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static NCProtoConversationAVMode._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static NCProtoAddMemberRequest.NearbyConversationPullContext._protobuf_nameMap, a1);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance NCProtoAddMemberRequest.NearbyConversationPullContext@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance NCProtoConversationAVMode(&one-time initialization token for _protobuf_nameMap, (uint64_t)static NCProtoAddMemberRequest.NearbyConversationPullContext._protobuf_nameMap, a1);
}

unint64_t static NCProtoAddMemberResponse.protoMessageName.getter()
{
  return 0xD000000000000019;
}

uint64_t static NCProtoAddMemberResponse._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static NCProtoConversationAVMode._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static NCProtoAddMemberResponse._protobuf_nameMap, a1);
}

uint64_t NCProtoAddMemberResponse.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return NCProtoContactUpdateEvent.decodeMessage<A>(decoder:)(a1, a2, a3, (void (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BE5C0A8], (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))closure #2 in NCProtoAddMemberResponse.decodeMessage<A>(decoder:));
}

uint64_t NCProtoContactUpdateEvent.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t, uint64_t, uint64_t), void (*a5)(uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v9;
  uint64_t result;
  char v14;

  v9 = v5;
  while (1)
  {
    result = dispatch thunk of Decoder.nextFieldNumber()();
    if (v6 || (v14 & 1) != 0)
      break;
    if (result == 2)
    {
      a5(a1, v9, a2, a3);
    }
    else if (result == 1)
    {
      a4(v9, a2, a3);
    }
  }
  return result;
}

uint64_t closure #2 in NCProtoAddMemberResponse.decodeMessage<A>(decoder:)()
{
  type metadata accessor for ProtobufString();
  type metadata accessor for ProtobufBool();
  return dispatch thunk of Decoder.decodeMapField<A, B>(fieldType:value:)();
}

void NCProtoAddMemberResponse.traverse<A>(visitor:)()
{
  __asm { BR              X10 }
}

uint64_t sub_2429FF270(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;

  if ((a2 & 0xFF000000000000) == 0
    || (result = dispatch thunk of Visitor.visitSingularBytesField(value:fieldNumber:)(), !v2))
  {
    if (!*(_QWORD *)(*(_QWORD *)(v3 + 16) + 16)
      || (type metadata accessor for ProtobufString(),
          type metadata accessor for ProtobufBool(),
          result = dispatch thunk of Visitor.visitMapField<A, B>(fieldType:value:fieldNumber:)(),
          !v2))
    {
      type metadata accessor for NCProtoAddMemberResponse(0);
      return UnknownStorage.traverse<A>(visitor:)();
    }
  }
  return result;
}

uint64_t static NCProtoAddMemberResponse.== infix(_:_:)(uint64_t *a1, uint64_t a2)
{
  return specialized static NCProtoContactUpdateEvent.== infix(_:_:)(a1, a2, specialized static Dictionary<>.== infix(_:_:), type metadata accessor for NCProtoAddMemberResponse) & 1;
}

Swift::Int NCProtoAddMemberResponse.hashValue.getter()
{
  return NCProtoContactInfo.hashValue.getter(type metadata accessor for NCProtoAddMemberResponse, &lazy protocol witness table cache variable for type NCProtoAddMemberResponse and conformance NCProtoAddMemberResponse, (uint64_t)&protocol conformance descriptor for NCProtoAddMemberResponse);
}

uint64_t protocol witness for Message.init() in conformance NCProtoAddMemberResponse@<X0>(uint64_t a1@<X8>)
{
  *(_OWORD *)a1 = xmmword_242A30CB0;
  *(_QWORD *)(a1 + 16) = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
  return UnknownStorage.init()();
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance NCProtoAddMemberResponse()
{
  return 0xD000000000000019;
}

uint64_t protocol witness for Message.unknownFields.getter in conformance NCProtoAddressableContact@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = v2 + *(int *)(a1 + 24);
  v5 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, v4, v5);
}

uint64_t protocol witness for Message.unknownFields.setter in conformance NCProtoAddressableContact(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = v2 + *(int *)(a2 + 24);
  v5 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 40))(v4, a1, v5);
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance NCProtoAddMemberResponse(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return NCProtoAddMemberResponse.decodeMessage<A>(decoder:)(a1, a2, a3);
}

void protocol witness for Message.traverse<A>(visitor:) in conformance NCProtoAddMemberResponse()
{
  NCProtoAddMemberResponse.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance NCProtoAddMemberResponse()
{
  lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoAddMemberResponse and conformance NCProtoAddMemberResponse, type metadata accessor for NCProtoAddMemberResponse, (uint64_t)&protocol conformance descriptor for NCProtoAddMemberResponse);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance NCProtoAddMemberResponse@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance NCProtoConversationAVMode(&one-time initialization token for _protobuf_nameMap, (uint64_t)static NCProtoAddMemberResponse._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance NCProtoAddMemberResponse()
{
  lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoAddMemberResponse and conformance NCProtoAddMemberResponse, type metadata accessor for NCProtoAddMemberResponse, (uint64_t)&protocol conformance descriptor for NCProtoAddMemberResponse);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance NCProtoAddMemberResponse()
{
  lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoAddMemberResponse and conformance NCProtoAddMemberResponse, type metadata accessor for NCProtoAddMemberResponse, (uint64_t)&protocol conformance descriptor for NCProtoAddMemberResponse);
  return Message.hash(into:)();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance NCProtoAddMemberResponse(uint64_t *a1, uint64_t a2)
{
  return specialized static NCProtoContactUpdateEvent.== infix(_:_:)(a1, a2, specialized static Dictionary<>.== infix(_:_:), type metadata accessor for NCProtoAddMemberResponse) & 1;
}

unint64_t static NCProtoPullLagunaSessionToTVRequest.protoMessageName.getter()
{
  return 0xD000000000000024;
}

uint64_t static NCProtoPullLagunaSessionToTVRequest._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static NCProtoConversationAVMode._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static NCProtoPullLagunaSessionToTVRequest._protobuf_nameMap, a1);
}

uint64_t NCProtoPullLagunaSessionToTVRequest.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return NCProtoContactUpdateEvent.decodeMessage<A>(decoder:)(a1, a2, a3, (void (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BE5C120], (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))closure #2 in NCProtoPullLagunaSessionToTVRequest.decodeMessage<A>(decoder:));
}

uint64_t closure #2 in NCProtoPullLagunaSessionToTVRequest.decodeMessage<A>(decoder:)()
{
  type metadata accessor for NCProtoPullLagunaSessionToTVRequest(0);
  lazy protocol witness table accessor for type NCProtoPullLagunaSessionToTVRequest.Reason and conformance NCProtoPullLagunaSessionToTVRequest.Reason();
  return dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)();
}

uint64_t NCProtoPullLagunaSessionToTVRequest.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return NCProtoPullLagunaSessionToTVRequest.traverse<A>(visitor:)(a1, a2, a3, (uint64_t (*)(_QWORD *, uint64_t, uint64_t, uint64_t))closure #1 in NCProtoPullLagunaSessionToTVRequest.traverse<A>(visitor:), (void (*)(_QWORD))type metadata accessor for NCProtoPullLagunaSessionToTVRequest);
}

uint64_t closure #1 in NCProtoPullLagunaSessionToTVRequest.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t result;

  result = type metadata accessor for NCProtoPullLagunaSessionToTVRequest(0);
  if ((*(_BYTE *)(a1 + *(int *)(result + 24) + 9) & 1) == 0)
  {
    lazy protocol witness table accessor for type NCProtoPullLagunaSessionToTVRequest.Reason and conformance NCProtoPullLagunaSessionToTVRequest.Reason();
    return dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
  }
  return result;
}

Swift::Int NCProtoPullLagunaSessionToTVRequest.hashValue.getter()
{
  return NCProtoContactInfo.hashValue.getter(type metadata accessor for NCProtoPullLagunaSessionToTVRequest, &lazy protocol witness table cache variable for type NCProtoPullLagunaSessionToTVRequest and conformance NCProtoPullLagunaSessionToTVRequest, (uint64_t)&protocol conformance descriptor for NCProtoPullLagunaSessionToTVRequest);
}

uint64_t protocol witness for Message.init() in conformance NCProtoPullLagunaSessionToTVRequest@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t result;
  char *v5;

  *a2 = 0;
  a2[1] = 0xE000000000000000;
  result = UnknownStorage.init()();
  v5 = (char *)a2 + *(int *)(a1 + 24);
  *(_QWORD *)v5 = 0;
  *((_WORD *)v5 + 4) = 256;
  return result;
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance NCProtoPullLagunaSessionToTVRequest()
{
  return 0xD000000000000024;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance NCProtoPullLagunaSessionToTVRequest(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return NCProtoPullLagunaSessionToTVRequest.decodeMessage<A>(decoder:)(a1, a2, a3);
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance NCProtoPullLagunaSessionToTVRequest(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return NCProtoPullLagunaSessionToTVRequest.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance NCProtoPullLagunaSessionToTVRequest()
{
  lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoPullLagunaSessionToTVRequest and conformance NCProtoPullLagunaSessionToTVRequest, type metadata accessor for NCProtoPullLagunaSessionToTVRequest, (uint64_t)&protocol conformance descriptor for NCProtoPullLagunaSessionToTVRequest);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance NCProtoPullLagunaSessionToTVRequest@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance NCProtoConversationAVMode(&one-time initialization token for _protobuf_nameMap, (uint64_t)static NCProtoPullLagunaSessionToTVRequest._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance NCProtoPullLagunaSessionToTVRequest()
{
  lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoPullLagunaSessionToTVRequest and conformance NCProtoPullLagunaSessionToTVRequest, type metadata accessor for NCProtoPullLagunaSessionToTVRequest, (uint64_t)&protocol conformance descriptor for NCProtoPullLagunaSessionToTVRequest);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance NCProtoPullLagunaSessionToTVRequest()
{
  lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoPullLagunaSessionToTVRequest and conformance NCProtoPullLagunaSessionToTVRequest, type metadata accessor for NCProtoPullLagunaSessionToTVRequest, (uint64_t)&protocol conformance descriptor for NCProtoPullLagunaSessionToTVRequest);
  return Message.hash(into:)();
}

uint64_t static NCProtoPullLagunaSessionToTVRequest.Reason._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static NCProtoConversationAVMode._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static NCProtoPullLagunaSessionToTVRequest.Reason._protobuf_nameMap, a1);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance NCProtoPullLagunaSessionToTVRequest.Reason@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance NCProtoConversationAVMode(&one-time initialization token for _protobuf_nameMap, (uint64_t)static NCProtoPullLagunaSessionToTVRequest.Reason._protobuf_nameMap, a1);
}

unint64_t static NCProtoPullLagunaSessionToTVResponse.protoMessageName.getter()
{
  return 0xD000000000000025;
}

uint64_t static NCProtoPullLagunaSessionToTVResponse._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static NCProtoConversationAVMode._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static NCProtoPullLagunaSessionToTVResponse._protobuf_nameMap, a1);
}

uint64_t NCProtoPullLagunaSessionToTVResponse.decodeMessage<A>(decoder:)()
{
  return NCProtoLagunaConnectionResponse.decodeMessage<A>(decoder:)();
}

Swift::Int NCProtoPullLagunaSessionToTVResponse.hashValue.getter()
{
  return NCProtoContactInfo.hashValue.getter(type metadata accessor for NCProtoPullLagunaSessionToTVResponse, &lazy protocol witness table cache variable for type NCProtoPullLagunaSessionToTVResponse and conformance NCProtoPullLagunaSessionToTVResponse, (uint64_t)&protocol conformance descriptor for NCProtoPullLagunaSessionToTVResponse);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance NCProtoPullLagunaSessionToTVResponse()
{
  return 0xD000000000000025;
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance NCProtoPullLagunaSessionToTVResponse()
{
  lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoPullLagunaSessionToTVResponse and conformance NCProtoPullLagunaSessionToTVResponse, type metadata accessor for NCProtoPullLagunaSessionToTVResponse, (uint64_t)&protocol conformance descriptor for NCProtoPullLagunaSessionToTVResponse);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance NCProtoPullLagunaSessionToTVResponse@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance NCProtoConversationAVMode(&one-time initialization token for _protobuf_nameMap, (uint64_t)static NCProtoPullLagunaSessionToTVResponse._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance NCProtoPullLagunaSessionToTVResponse()
{
  lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoPullLagunaSessionToTVResponse and conformance NCProtoPullLagunaSessionToTVResponse, type metadata accessor for NCProtoPullLagunaSessionToTVResponse, (uint64_t)&protocol conformance descriptor for NCProtoPullLagunaSessionToTVResponse);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance NCProtoPullLagunaSessionToTVResponse()
{
  lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoPullLagunaSessionToTVResponse and conformance NCProtoPullLagunaSessionToTVResponse, type metadata accessor for NCProtoPullLagunaSessionToTVResponse, (uint64_t)&protocol conformance descriptor for NCProtoPullLagunaSessionToTVResponse);
  return Message.hash(into:)();
}

unint64_t static NCProtoTransferActiveConversationRequest.protoMessageName.getter()
{
  return 0xD000000000000029;
}

uint64_t static NCProtoTransferActiveConversationRequest._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static NCProtoConversationAVMode._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static NCProtoTransferActiveConversationRequest._protobuf_nameMap, a1);
}

uint64_t NCProtoTransferActiveConversationRequest.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t result;
  char v2;

  while (1)
  {
    result = dispatch thunk of Decoder.nextFieldNumber()();
    if (v0 || (v2 & 1) != 0)
      break;
    if (result == 3 || result == 2)
    {
      type metadata accessor for NCProtoTransferActiveConversationRequest(0);
      dispatch thunk of Decoder.decodeSingularBoolField(value:)();
    }
    else if (result == 1)
    {
      dispatch thunk of Decoder.decodeSingularStringField(value:)();
    }
    v0 = 0;
  }
  return result;
}

uint64_t NCProtoTransferActiveConversationRequest.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  unint64_t v8;
  uint64_t v9;
  uint64_t result;

  v8 = v3[1];
  v9 = HIBYTE(v8) & 0xF;
  if ((v8 & 0x2000000000000000) == 0)
    v9 = *v3 & 0xFFFFFFFFFFFFLL;
  if (!v9 || (result = dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(), !v4))
  {
    result = closure #1 in NCProtoTransferActiveConversationRequest.traverse<A>(visitor:)((uint64_t)v3, a1, a2, a3, type metadata accessor for NCProtoTransferActiveConversationRequest);
    if (!v4)
    {
      closure #2 in NCProtoTransferActiveConversationRequest.traverse<A>(visitor:)((uint64_t)v3, a1, a2, a3, type metadata accessor for NCProtoTransferActiveConversationRequest);
      type metadata accessor for NCProtoTransferActiveConversationRequest(0);
      return UnknownStorage.traverse<A>(visitor:)();
    }
  }
  return result;
}

Swift::Int NCProtoTransferActiveConversationRequest.hashValue.getter()
{
  return NCProtoContactInfo.hashValue.getter(type metadata accessor for NCProtoTransferActiveConversationRequest, &lazy protocol witness table cache variable for type NCProtoTransferActiveConversationRequest and conformance NCProtoTransferActiveConversationRequest, (uint64_t)&protocol conformance descriptor for NCProtoTransferActiveConversationRequest);
}

uint64_t protocol witness for Message.init() in conformance NCProtoTransferActiveConversationRequest@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t result;
  uint64_t v5;

  *a2 = 0;
  a2[1] = 0xE000000000000000;
  result = UnknownStorage.init()();
  v5 = *(int *)(a1 + 28);
  *((_BYTE *)a2 + *(int *)(a1 + 24)) = 2;
  *((_BYTE *)a2 + v5) = 2;
  return result;
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance NCProtoTransferActiveConversationRequest()
{
  return 0xD000000000000029;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance NCProtoTransferActiveConversationRequest()
{
  return NCProtoTransferActiveConversationRequest.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance NCProtoTransferActiveConversationRequest(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return NCProtoTransferActiveConversationRequest.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance NCProtoTransferActiveConversationRequest()
{
  lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoTransferActiveConversationRequest and conformance NCProtoTransferActiveConversationRequest, type metadata accessor for NCProtoTransferActiveConversationRequest, (uint64_t)&protocol conformance descriptor for NCProtoTransferActiveConversationRequest);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance NCProtoTransferActiveConversationRequest@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance NCProtoConversationAVMode(&one-time initialization token for _protobuf_nameMap, (uint64_t)static NCProtoTransferActiveConversationRequest._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance NCProtoTransferActiveConversationRequest()
{
  lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoTransferActiveConversationRequest and conformance NCProtoTransferActiveConversationRequest, type metadata accessor for NCProtoTransferActiveConversationRequest, (uint64_t)&protocol conformance descriptor for NCProtoTransferActiveConversationRequest);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance NCProtoTransferActiveConversationRequest()
{
  lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoTransferActiveConversationRequest and conformance NCProtoTransferActiveConversationRequest, type metadata accessor for NCProtoTransferActiveConversationRequest, (uint64_t)&protocol conformance descriptor for NCProtoTransferActiveConversationRequest);
  return Message.hash(into:)();
}

unint64_t static NCProtoTransferActiveConversationResponse.protoMessageName.getter()
{
  return 0xD00000000000002ALL;
}

uint64_t static NCProtoTransferActiveConversationResponse._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static NCProtoConversationAVMode._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static NCProtoTransferActiveConversationResponse._protobuf_nameMap, a1);
}

uint64_t NCProtoTransferActiveConversationResponse.decodeMessage<A>(decoder:)()
{
  return NCProtoLagunaConnectionResponse.decodeMessage<A>(decoder:)();
}

Swift::Int NCProtoTransferActiveConversationResponse.hashValue.getter()
{
  return NCProtoContactInfo.hashValue.getter(type metadata accessor for NCProtoTransferActiveConversationResponse, &lazy protocol witness table cache variable for type NCProtoTransferActiveConversationResponse and conformance NCProtoTransferActiveConversationResponse, (uint64_t)&protocol conformance descriptor for NCProtoTransferActiveConversationResponse);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance NCProtoTransferActiveConversationResponse()
{
  return 0xD00000000000002ALL;
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance NCProtoTransferActiveConversationResponse()
{
  lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoTransferActiveConversationResponse and conformance NCProtoTransferActiveConversationResponse, type metadata accessor for NCProtoTransferActiveConversationResponse, (uint64_t)&protocol conformance descriptor for NCProtoTransferActiveConversationResponse);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance NCProtoTransferActiveConversationResponse@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance NCProtoConversationAVMode(&one-time initialization token for _protobuf_nameMap, (uint64_t)static NCProtoTransferActiveConversationResponse._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance NCProtoTransferActiveConversationResponse()
{
  lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoTransferActiveConversationResponse and conformance NCProtoTransferActiveConversationResponse, type metadata accessor for NCProtoTransferActiveConversationResponse, (uint64_t)&protocol conformance descriptor for NCProtoTransferActiveConversationResponse);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance NCProtoTransferActiveConversationResponse()
{
  lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoTransferActiveConversationResponse and conformance NCProtoTransferActiveConversationResponse, type metadata accessor for NCProtoTransferActiveConversationResponse, (uint64_t)&protocol conformance descriptor for NCProtoTransferActiveConversationResponse);
  return Message.hash(into:)();
}

unint64_t static NCProtoStartLagunaSessionRequest.protoMessageName.getter()
{
  return 0xD000000000000021;
}

uint64_t static NCProtoStartLagunaSessionRequest._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static NCProtoConversationAVMode._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static NCProtoStartLagunaSessionRequest._protobuf_nameMap, a1);
}

uint64_t NCProtoStartLagunaSessionRequest.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t result;
  char v2;

  result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      if (result == 1)
      {
        lazy protocol witness table accessor for type NCProtoStartLagunaSessionRequest.RecentCallFetchType and conformance NCProtoStartLagunaSessionRequest.RecentCallFetchType();
        dispatch thunk of Decoder.decodeRepeatedEnumField<A>(value:)();
      }
      result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t NCProtoStartLagunaSessionRequest.traverse<A>(visitor:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;

  if (!*(_QWORD *)(*(_QWORD *)v0 + 16)
    || (lazy protocol witness table accessor for type NCProtoStartLagunaSessionRequest.RecentCallFetchType and conformance NCProtoStartLagunaSessionRequest.RecentCallFetchType(),
        result = dispatch thunk of Visitor.visitPackedEnumField<A>(value:fieldNumber:)(),
        !v1))
  {
    type metadata accessor for NCProtoStartLagunaSessionRequest(0);
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

Swift::Int NCProtoStartLagunaSessionRequest.hashValue.getter()
{
  return NCProtoContactInfo.hashValue.getter(type metadata accessor for NCProtoStartLagunaSessionRequest, &lazy protocol witness table cache variable for type NCProtoStartLagunaSessionRequest and conformance NCProtoStartLagunaSessionRequest, (uint64_t)&protocol conformance descriptor for NCProtoStartLagunaSessionRequest);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance NCProtoStartLagunaSessionRequest()
{
  return 0xD000000000000021;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance NCProtoStartLagunaSessionRequest()
{
  return NCProtoStartLagunaSessionRequest.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance NCProtoStartLagunaSessionRequest()
{
  return NCProtoStartLagunaSessionRequest.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance NCProtoStartLagunaSessionRequest()
{
  lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoStartLagunaSessionRequest and conformance NCProtoStartLagunaSessionRequest, type metadata accessor for NCProtoStartLagunaSessionRequest, (uint64_t)&protocol conformance descriptor for NCProtoStartLagunaSessionRequest);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance NCProtoStartLagunaSessionRequest@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance NCProtoConversationAVMode(&one-time initialization token for _protobuf_nameMap, (uint64_t)static NCProtoStartLagunaSessionRequest._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance NCProtoStartLagunaSessionRequest()
{
  lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoStartLagunaSessionRequest and conformance NCProtoStartLagunaSessionRequest, type metadata accessor for NCProtoStartLagunaSessionRequest, (uint64_t)&protocol conformance descriptor for NCProtoStartLagunaSessionRequest);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance NCProtoStartLagunaSessionRequest()
{
  lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoStartLagunaSessionRequest and conformance NCProtoStartLagunaSessionRequest, type metadata accessor for NCProtoStartLagunaSessionRequest, (uint64_t)&protocol conformance descriptor for NCProtoStartLagunaSessionRequest);
  return Message.hash(into:)();
}

uint64_t static NCProtoStartLagunaSessionRequest.RecentCallFetchType._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static NCProtoConversationAVMode._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static NCProtoStartLagunaSessionRequest.RecentCallFetchType._protobuf_nameMap, a1);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance NCProtoStartLagunaSessionRequest.RecentCallFetchType@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance NCProtoConversationAVMode(&one-time initialization token for _protobuf_nameMap, (uint64_t)static NCProtoStartLagunaSessionRequest.RecentCallFetchType._protobuf_nameMap, a1);
}

unint64_t static NCProtoCallInfo.protoMessageName.getter()
{
  return 0xD000000000000010;
}

uint64_t static NCProtoCallInfo._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static NCProtoConversationAVMode._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static NCProtoCallInfo._protobuf_nameMap, a1);
}

uint64_t NCProtoCallInfo.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t result;
  char v2;

  while (1)
  {
    result = dispatch thunk of Decoder.nextFieldNumber()();
    if (v0 || (v2 & 1) != 0)
      break;
    if (result == 3 || result == 2 || result == 1)
    {
      type metadata accessor for NCProtoCallInfo(0);
      dispatch thunk of Decoder.decodeSingularStringField(value:)();
    }
    v0 = 0;
  }
  return result;
}

uint64_t NCProtoCallInfo.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;

  result = closure #1 in NCProtoContinuityCall.traverse<A>(visitor:)(v3, a1, a2, a3, type metadata accessor for NCProtoCallInfo);
  if (!v4)
  {
    closure #1 in NCProtoActiveConversation.traverse<A>(visitor:)(v3, a1, a2, a3, type metadata accessor for NCProtoCallInfo);
    closure #2 in NCProtoActiveConversation.traverse<A>(visitor:)(v3, a1, a2, a3, type metadata accessor for NCProtoCallInfo);
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

uint64_t closure #1 in NCProtoContinuityCall.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(_QWORD))
{
  uint64_t result;

  result = a5(0);
  if (*(_QWORD *)(a1 + *(int *)(result + 20) + 8))
    return dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)();
  return result;
}

uint64_t closure #2 in NCProtoActiveConversation.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(_QWORD))
{
  uint64_t result;

  result = a5(0);
  if (*(_QWORD *)(a1 + *(int *)(result + 28) + 8))
    return dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)();
  return result;
}

Swift::Int NCProtoCallInfo.hashValue.getter()
{
  return NCProtoContactInfo.hashValue.getter(type metadata accessor for NCProtoCallInfo, &lazy protocol witness table cache variable for type NCProtoCallInfo and conformance NCProtoCallInfo, (uint64_t)&protocol conformance descriptor for NCProtoCallInfo);
}

uint64_t protocol witness for Message.init() in conformance NCProtoCallInfo@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;

  result = UnknownStorage.init()();
  v5 = a1[6];
  v6 = (_QWORD *)(a2 + a1[5]);
  *v6 = 0;
  v6[1] = 0;
  v7 = (_QWORD *)(a2 + v5);
  *v7 = 0;
  v7[1] = 0;
  v8 = (_QWORD *)(a2 + a1[7]);
  *v8 = 0;
  v8[1] = 0;
  return result;
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance NCProtoCallInfo()
{
  return 0xD000000000000010;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance NCProtoCallInfo()
{
  return NCProtoCallInfo.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance NCProtoCallInfo(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return NCProtoCallInfo.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance NCProtoCallInfo()
{
  lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoCallInfo and conformance NCProtoCallInfo, type metadata accessor for NCProtoCallInfo, (uint64_t)&protocol conformance descriptor for NCProtoCallInfo);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance NCProtoCallInfo@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance NCProtoConversationAVMode(&one-time initialization token for _protobuf_nameMap, (uint64_t)static NCProtoCallInfo._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance NCProtoCallInfo()
{
  lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoCallInfo and conformance NCProtoCallInfo, type metadata accessor for NCProtoCallInfo, (uint64_t)&protocol conformance descriptor for NCProtoCallInfo);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance NCProtoCallInfo()
{
  lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoCallInfo and conformance NCProtoCallInfo, type metadata accessor for NCProtoCallInfo, (uint64_t)&protocol conformance descriptor for NCProtoCallInfo);
  return Message.hash(into:)();
}

unint64_t static NCProtoStartLagunaSessionResponse.protoMessageName.getter()
{
  return 0xD000000000000022;
}

uint64_t static NCProtoStartLagunaSessionResponse._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static NCProtoConversationAVMode._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static NCProtoStartLagunaSessionResponse._protobuf_nameMap, a1);
}

uint64_t NCProtoStartLagunaSessionResponse.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t result;
  char v2;
  uint64_t v3;
  uint64_t v4;

  result = dispatch thunk of Decoder.nextFieldNumber()();
  v3 = v0;
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
          v4 = v3;
          dispatch thunk of Decoder.decodeRepeatedBytesField(value:)();
          goto LABEL_6;
        case 2:
          v4 = v3;
          closure #2 in NCProtoRecentCallsDidChangeEvent.decodeMessage<A>(decoder:)();
          goto LABEL_6;
        case 3:
          type metadata accessor for NCProtoActiveConversation(0);
          lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoActiveConversation and conformance NCProtoActiveConversation, type metadata accessor for NCProtoActiveConversation, (uint64_t)&protocol conformance descriptor for NCProtoActiveConversation);
          goto LABEL_5;
        case 4:
          type metadata accessor for NCProtoContinuityFavorite(0);
          lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoContinuityFavorite and conformance NCProtoContinuityFavorite, type metadata accessor for NCProtoContinuityFavorite, (uint64_t)&protocol conformance descriptor for NCProtoContinuityFavorite);
          goto LABEL_5;
        case 5:
          type metadata accessor for NCProtoContinuityCall(0);
          lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoContinuityCall and conformance NCProtoContinuityCall, type metadata accessor for NCProtoContinuityCall, (uint64_t)&protocol conformance descriptor for NCProtoContinuityCall);
LABEL_5:
          v4 = v3;
          dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)();
          goto LABEL_6;
        case 6:
          v4 = v3;
          closure #7 in NCProtoLagunaConnectionRequest.decodeMessage<A>(decoder:)();
LABEL_6:
          v3 = v4;
          break;
        default:
          break;
      }
      result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t closure #2 in NCProtoRecentCallsDidChangeEvent.decodeMessage<A>(decoder:)()
{
  type metadata accessor for ProtobufString();
  type metadata accessor for NCProtoContactInfo(0);
  lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoContactInfo and conformance NCProtoContactInfo, type metadata accessor for NCProtoContactInfo, (uint64_t)&protocol conformance descriptor for NCProtoContactInfo);
  lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoContactInfo and conformance NCProtoContactInfo, type metadata accessor for NCProtoContactInfo, (uint64_t)&protocol conformance descriptor for NCProtoContactInfo);
  return dispatch thunk of Decoder.decodeMapField<A, B>(fieldType:value:)();
}

uint64_t closure #7 in NCProtoLagunaConnectionRequest.decodeMessage<A>(decoder:)()
{
  type metadata accessor for ProtobufString();
  type metadata accessor for NCProtoCallInfo(0);
  lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoCallInfo and conformance NCProtoCallInfo, type metadata accessor for NCProtoCallInfo, (uint64_t)&protocol conformance descriptor for NCProtoCallInfo);
  lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoCallInfo and conformance NCProtoCallInfo, type metadata accessor for NCProtoCallInfo, (uint64_t)&protocol conformance descriptor for NCProtoCallInfo);
  return dispatch thunk of Decoder.decodeMapField<A, B>(fieldType:value:)();
}

uint64_t NCProtoStartLagunaSessionResponse.traverse<A>(visitor:)()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t result;

  if (!*(_QWORD *)(*v0 + 16)
    || (result = dispatch thunk of Visitor.visitRepeatedBytesField(value:fieldNumber:)(), !v1))
  {
    if (!*(_QWORD *)(v0[1] + 16)
      || (type metadata accessor for ProtobufString(),
          type metadata accessor for NCProtoContactInfo(0),
          lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoContactInfo and conformance NCProtoContactInfo, type metadata accessor for NCProtoContactInfo, (uint64_t)&protocol conformance descriptor for NCProtoContactInfo), lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoContactInfo and conformance NCProtoContactInfo, type metadata accessor for NCProtoContactInfo, (uint64_t)&protocol conformance descriptor for NCProtoContactInfo), result = dispatch thunk of Visitor.visitMapField<A, B>(fieldType:value:fieldNumber:)(), !v1))
    {
      if (!*(_QWORD *)(v0[2] + 16)
        || (type metadata accessor for NCProtoActiveConversation(0),
            lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoActiveConversation and conformance NCProtoActiveConversation, type metadata accessor for NCProtoActiveConversation, (uint64_t)&protocol conformance descriptor for NCProtoActiveConversation), result = dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)(), !v1))
      {
        if (!*(_QWORD *)(v0[3] + 16)
          || (type metadata accessor for NCProtoContinuityFavorite(0),
              lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoContinuityFavorite and conformance NCProtoContinuityFavorite, type metadata accessor for NCProtoContinuityFavorite, (uint64_t)&protocol conformance descriptor for NCProtoContinuityFavorite), result = dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)(), !v1))
        {
          if (!*(_QWORD *)(v0[4] + 16)
            || (type metadata accessor for NCProtoContinuityCall(0),
                lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoContinuityCall and conformance NCProtoContinuityCall, type metadata accessor for NCProtoContinuityCall, (uint64_t)&protocol conformance descriptor for NCProtoContinuityCall), result = dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)(), !v1))
          {
            if (!*(_QWORD *)(v0[5] + 16)
              || (type metadata accessor for ProtobufString(),
                  type metadata accessor for NCProtoCallInfo(0),
                  lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoCallInfo and conformance NCProtoCallInfo, type metadata accessor for NCProtoCallInfo, (uint64_t)&protocol conformance descriptor for NCProtoCallInfo), lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoCallInfo and conformance NCProtoCallInfo, type metadata accessor for NCProtoCallInfo, (uint64_t)&protocol conformance descriptor for NCProtoCallInfo), result = dispatch thunk of Visitor.visitMapField<A, B>(fieldType:value:fieldNumber:)(), !v1))
            {
              type metadata accessor for NCProtoStartLagunaSessionResponse(0);
              return UnknownStorage.traverse<A>(visitor:)();
            }
          }
        }
      }
    }
  }
  return result;
}

Swift::Int NCProtoStartLagunaSessionResponse.hashValue.getter()
{
  return NCProtoContactInfo.hashValue.getter(type metadata accessor for NCProtoStartLagunaSessionResponse, &lazy protocol witness table cache variable for type NCProtoStartLagunaSessionResponse and conformance NCProtoStartLagunaSessionResponse, (uint64_t)&protocol conformance descriptor for NCProtoStartLagunaSessionResponse);
}

uint64_t protocol witness for Message.init() in conformance NCProtoStartLagunaSessionResponse@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v2;

  v2 = MEMORY[0x24BEE4AF8];
  *a1 = MEMORY[0x24BEE4AF8];
  a1[1] = specialized Dictionary.init(dictionaryLiteral:)(v2, &demangling cache variable for type metadata for (String, NCProtoContactInfo), &demangling cache variable for type metadata for _DictionaryStorage<String, NCProtoContactInfo>, type metadata accessor for NCProtoContactInfo);
  a1[2] = v2;
  a1[3] = v2;
  a1[4] = v2;
  a1[5] = specialized Dictionary.init(dictionaryLiteral:)(v2, &demangling cache variable for type metadata for (String, NCProtoCallInfo), &demangling cache variable for type metadata for _DictionaryStorage<String, NCProtoCallInfo>, type metadata accessor for NCProtoCallInfo);
  return UnknownStorage.init()();
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance NCProtoStartLagunaSessionResponse()
{
  return 0xD000000000000022;
}

uint64_t protocol witness for Message.unknownFields.getter in conformance NCProtoLagunaConnectionRequest@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = v2 + *(int *)(a1 + 40);
  v5 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, v4, v5);
}

uint64_t protocol witness for Message.unknownFields.setter in conformance NCProtoLagunaConnectionRequest(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = v2 + *(int *)(a2 + 40);
  v5 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 40))(v4, a1, v5);
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance NCProtoStartLagunaSessionResponse()
{
  return NCProtoStartLagunaSessionResponse.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance NCProtoStartLagunaSessionResponse()
{
  return NCProtoStartLagunaSessionResponse.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance NCProtoStartLagunaSessionResponse()
{
  lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoStartLagunaSessionResponse and conformance NCProtoStartLagunaSessionResponse, type metadata accessor for NCProtoStartLagunaSessionResponse, (uint64_t)&protocol conformance descriptor for NCProtoStartLagunaSessionResponse);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance NCProtoStartLagunaSessionResponse@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance NCProtoConversationAVMode(&one-time initialization token for _protobuf_nameMap, (uint64_t)static NCProtoStartLagunaSessionResponse._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance NCProtoStartLagunaSessionResponse()
{
  lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoStartLagunaSessionResponse and conformance NCProtoStartLagunaSessionResponse, type metadata accessor for NCProtoStartLagunaSessionResponse, (uint64_t)&protocol conformance descriptor for NCProtoStartLagunaSessionResponse);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance NCProtoStartLagunaSessionResponse()
{
  lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoStartLagunaSessionResponse and conformance NCProtoStartLagunaSessionResponse, type metadata accessor for NCProtoStartLagunaSessionResponse, (uint64_t)&protocol conformance descriptor for NCProtoStartLagunaSessionResponse);
  return Message.hash(into:)();
}

unint64_t static NCProtoStartConversationRequest.protoMessageName.getter()
{
  return 0xD000000000000020;
}

uint64_t static NCProtoStartConversationRequest._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static NCProtoConversationAVMode._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static NCProtoStartConversationRequest._protobuf_nameMap, a1);
}

uint64_t NCProtoStartConversationRequest.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return NCProtoStartConversationRequest.decodeMessage<A>(decoder:)(a1, a2, a3, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))closure #1 in NCProtoStartConversationRequest.decodeMessage<A>(decoder:));
}

uint64_t closure #1 in NCProtoStartConversationRequest.decodeMessage<A>(decoder:)()
{
  type metadata accessor for NCProtoStartConversationRequest(0);
  lazy protocol witness table accessor for type NCProtoConversationAVMode and conformance NCProtoConversationAVMode();
  return dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)();
}

uint64_t NCProtoStartConversationRequest.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return NCProtoSuggestionAdvertisementDidChangeEvent.traverse<A>(visitor:)(a1, a2, a3, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))closure #1 in NCProtoStartConversationRequest.traverse<A>(visitor:));
}

uint64_t closure #1 in NCProtoStartConversationRequest.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t result;

  result = type metadata accessor for NCProtoStartConversationRequest(0);
  if ((*(_BYTE *)(a1 + *(int *)(result + 20) + 9) & 1) == 0)
  {
    lazy protocol witness table accessor for type NCProtoConversationAVMode and conformance NCProtoConversationAVMode();
    return dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
  }
  return result;
}

Swift::Int NCProtoStartConversationRequest.hashValue.getter()
{
  return NCProtoContactInfo.hashValue.getter(type metadata accessor for NCProtoStartConversationRequest, &lazy protocol witness table cache variable for type NCProtoStartConversationRequest and conformance NCProtoStartConversationRequest, (uint64_t)&protocol conformance descriptor for NCProtoStartConversationRequest);
}

uint64_t protocol witness for Message.init() in conformance NCProtoStartConversationRequest@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  uint64_t v5;

  result = UnknownStorage.init()();
  v5 = a2 + *(int *)(a1 + 20);
  *(_QWORD *)v5 = 0;
  *(_WORD *)(v5 + 8) = 256;
  return result;
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance NCProtoStartConversationRequest()
{
  return 0xD000000000000020;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance NCProtoStartConversationRequest(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return NCProtoStartConversationRequest.decodeMessage<A>(decoder:)(a1, a2, a3);
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance NCProtoStartConversationRequest(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return NCProtoStartConversationRequest.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance NCProtoStartConversationRequest()
{
  lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoStartConversationRequest and conformance NCProtoStartConversationRequest, type metadata accessor for NCProtoStartConversationRequest, (uint64_t)&protocol conformance descriptor for NCProtoStartConversationRequest);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance NCProtoStartConversationRequest@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance NCProtoConversationAVMode(&one-time initialization token for _protobuf_nameMap, (uint64_t)static NCProtoStartConversationRequest._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance NCProtoStartConversationRequest()
{
  lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoStartConversationRequest and conformance NCProtoStartConversationRequest, type metadata accessor for NCProtoStartConversationRequest, (uint64_t)&protocol conformance descriptor for NCProtoStartConversationRequest);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance NCProtoStartConversationRequest()
{
  lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoStartConversationRequest and conformance NCProtoStartConversationRequest, type metadata accessor for NCProtoStartConversationRequest, (uint64_t)&protocol conformance descriptor for NCProtoStartConversationRequest);
  return Message.hash(into:)();
}

unint64_t static NCProtoStartConversationResponse.protoMessageName.getter()
{
  return 0xD000000000000021;
}

uint64_t static NCProtoStartConversationResponse._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static NCProtoConversationAVMode._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static NCProtoStartConversationResponse._protobuf_nameMap, a1);
}

uint64_t NCProtoStartConversationResponse.decodeMessage<A>(decoder:)()
{
  return NCProtoLagunaConnectionResponse.decodeMessage<A>(decoder:)();
}

Swift::Int NCProtoStartConversationResponse.hashValue.getter()
{
  return NCProtoContactInfo.hashValue.getter(type metadata accessor for NCProtoStartConversationResponse, &lazy protocol witness table cache variable for type NCProtoStartConversationResponse and conformance NCProtoStartConversationResponse, (uint64_t)&protocol conformance descriptor for NCProtoStartConversationResponse);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance NCProtoStartConversationResponse()
{
  return 0xD000000000000021;
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance NCProtoStartConversationResponse()
{
  lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoStartConversationResponse and conformance NCProtoStartConversationResponse, type metadata accessor for NCProtoStartConversationResponse, (uint64_t)&protocol conformance descriptor for NCProtoStartConversationResponse);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance NCProtoStartConversationResponse@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance NCProtoConversationAVMode(&one-time initialization token for _protobuf_nameMap, (uint64_t)static NCProtoStartConversationResponse._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance NCProtoStartConversationResponse()
{
  lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoStartConversationResponse and conformance NCProtoStartConversationResponse, type metadata accessor for NCProtoStartConversationResponse, (uint64_t)&protocol conformance descriptor for NCProtoStartConversationResponse);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance NCProtoStartConversationResponse()
{
  lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoStartConversationResponse and conformance NCProtoStartConversationResponse, type metadata accessor for NCProtoStartConversationResponse, (uint64_t)&protocol conformance descriptor for NCProtoStartConversationResponse);
  return Message.hash(into:)();
}

unint64_t static NCProtoJoinActiveConversationRequest.protoMessageName.getter()
{
  return 0xD000000000000025;
}

uint64_t static NCProtoJoinActiveConversationRequest._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static NCProtoConversationAVMode._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static NCProtoJoinActiveConversationRequest._protobuf_nameMap, a1);
}

uint64_t NCProtoJoinActiveConversationRequest.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t result;
  char v2;

  while (1)
  {
    result = dispatch thunk of Decoder.nextFieldNumber()();
    if (v0 || (v2 & 1) != 0)
      break;
    if (result == 3 || result == 2)
    {
      type metadata accessor for NCProtoJoinActiveConversationRequest(0);
      dispatch thunk of Decoder.decodeSingularBoolField(value:)();
    }
    else if (result == 1)
    {
      type metadata accessor for NCProtoJoinActiveConversationRequest(0);
      dispatch thunk of Decoder.decodeSingularStringField(value:)();
    }
    v0 = 0;
  }
  return result;
}

uint64_t NCProtoJoinActiveConversationRequest.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;

  result = closure #1 in NCProtoContinuityCall.traverse<A>(visitor:)(v3, a1, a2, a3, type metadata accessor for NCProtoJoinActiveConversationRequest);
  if (!v4)
  {
    closure #1 in NCProtoTransferActiveConversationRequest.traverse<A>(visitor:)(v3, a1, a2, a3, type metadata accessor for NCProtoJoinActiveConversationRequest);
    closure #2 in NCProtoTransferActiveConversationRequest.traverse<A>(visitor:)(v3, a1, a2, a3, type metadata accessor for NCProtoJoinActiveConversationRequest);
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

uint64_t closure #1 in NCProtoTransferActiveConversationRequest.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(_QWORD))
{
  uint64_t result;

  result = a5(0);
  if (*(_BYTE *)(a1 + *(int *)(result + 24)) != 2)
    return dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
  return result;
}

uint64_t closure #2 in NCProtoTransferActiveConversationRequest.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(_QWORD))
{
  uint64_t result;

  result = a5(0);
  if (*(_BYTE *)(a1 + *(int *)(result + 28)) != 2)
    return dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
  return result;
}

Swift::Int NCProtoJoinActiveConversationRequest.hashValue.getter()
{
  return NCProtoContactInfo.hashValue.getter(type metadata accessor for NCProtoJoinActiveConversationRequest, &lazy protocol witness table cache variable for type NCProtoJoinActiveConversationRequest and conformance NCProtoJoinActiveConversationRequest, (uint64_t)&protocol conformance descriptor for NCProtoJoinActiveConversationRequest);
}

uint64_t protocol witness for Message.init() in conformance NCProtoJoinActiveConversationRequest@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  _QWORD *v6;

  result = UnknownStorage.init()();
  v5 = a1[6];
  v6 = (_QWORD *)(a2 + a1[5]);
  *v6 = 0;
  v6[1] = 0;
  *(_BYTE *)(a2 + v5) = 2;
  *(_BYTE *)(a2 + a1[7]) = 2;
  return result;
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance NCProtoJoinActiveConversationRequest()
{
  return 0xD000000000000025;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance NCProtoJoinActiveConversationRequest()
{
  return NCProtoJoinActiveConversationRequest.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance NCProtoJoinActiveConversationRequest(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return NCProtoJoinActiveConversationRequest.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance NCProtoJoinActiveConversationRequest()
{
  lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoJoinActiveConversationRequest and conformance NCProtoJoinActiveConversationRequest, type metadata accessor for NCProtoJoinActiveConversationRequest, (uint64_t)&protocol conformance descriptor for NCProtoJoinActiveConversationRequest);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance NCProtoJoinActiveConversationRequest@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance NCProtoConversationAVMode(&one-time initialization token for _protobuf_nameMap, (uint64_t)static NCProtoJoinActiveConversationRequest._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance NCProtoJoinActiveConversationRequest()
{
  lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoJoinActiveConversationRequest and conformance NCProtoJoinActiveConversationRequest, type metadata accessor for NCProtoJoinActiveConversationRequest, (uint64_t)&protocol conformance descriptor for NCProtoJoinActiveConversationRequest);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance NCProtoJoinActiveConversationRequest()
{
  lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoJoinActiveConversationRequest and conformance NCProtoJoinActiveConversationRequest, type metadata accessor for NCProtoJoinActiveConversationRequest, (uint64_t)&protocol conformance descriptor for NCProtoJoinActiveConversationRequest);
  return Message.hash(into:)();
}

unint64_t static NCProtoJoinActiveConversationResponse.protoMessageName.getter()
{
  return 0xD000000000000026;
}

uint64_t static NCProtoJoinActiveConversationResponse._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static NCProtoConversationAVMode._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static NCProtoJoinActiveConversationResponse._protobuf_nameMap, a1);
}

uint64_t NCProtoJoinActiveConversationResponse.decodeMessage<A>(decoder:)()
{
  return NCProtoLagunaConnectionResponse.decodeMessage<A>(decoder:)();
}

Swift::Int NCProtoJoinActiveConversationResponse.hashValue.getter()
{
  return NCProtoContactInfo.hashValue.getter(type metadata accessor for NCProtoJoinActiveConversationResponse, &lazy protocol witness table cache variable for type NCProtoJoinActiveConversationResponse and conformance NCProtoJoinActiveConversationResponse, (uint64_t)&protocol conformance descriptor for NCProtoJoinActiveConversationResponse);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance NCProtoJoinActiveConversationResponse()
{
  return 0xD000000000000026;
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance NCProtoJoinActiveConversationResponse()
{
  lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoJoinActiveConversationResponse and conformance NCProtoJoinActiveConversationResponse, type metadata accessor for NCProtoJoinActiveConversationResponse, (uint64_t)&protocol conformance descriptor for NCProtoJoinActiveConversationResponse);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance NCProtoJoinActiveConversationResponse@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance NCProtoConversationAVMode(&one-time initialization token for _protobuf_nameMap, (uint64_t)static NCProtoJoinActiveConversationResponse._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance NCProtoJoinActiveConversationResponse()
{
  lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoJoinActiveConversationResponse and conformance NCProtoJoinActiveConversationResponse, type metadata accessor for NCProtoJoinActiveConversationResponse, (uint64_t)&protocol conformance descriptor for NCProtoJoinActiveConversationResponse);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance NCProtoJoinActiveConversationResponse()
{
  lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoJoinActiveConversationResponse and conformance NCProtoJoinActiveConversationResponse, type metadata accessor for NCProtoJoinActiveConversationResponse, (uint64_t)&protocol conformance descriptor for NCProtoJoinActiveConversationResponse);
  return Message.hash(into:)();
}

unint64_t static NCProtoDeclineContinuityCallRequest.protoMessageName.getter()
{
  return 0xD000000000000024;
}

uint64_t static NCProtoDeclineContinuityCallRequest._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static NCProtoConversationAVMode._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static NCProtoDeclineContinuityCallRequest._protobuf_nameMap, a1);
}

uint64_t NCProtoDeclineContinuityCallRequest.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return NCProtoDeclineContinuityCallRequest.decodeMessage<A>(decoder:)(a1, a2, a3, type metadata accessor for NCProtoDeclineContinuityCallRequest, (void (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BE5C118]);
}

uint64_t NCProtoDeclineContinuityCallRequest.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return NCProtoDeclineContinuityCallRequest.traverse<A>(visitor:)(a1, a2, a3, type metadata accessor for NCProtoDeclineContinuityCallRequest);
}

uint64_t static NCProtoDeclineContinuityCallRequest.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return specialized static NCProtoDeclineContinuityCallRequest.== infix(_:_:)(a1, a2, type metadata accessor for NCProtoDeclineContinuityCallRequest) & 1;
}

Swift::Int NCProtoDeclineContinuityCallRequest.hashValue.getter()
{
  return NCProtoContactInfo.hashValue.getter(type metadata accessor for NCProtoDeclineContinuityCallRequest, &lazy protocol witness table cache variable for type NCProtoDeclineContinuityCallRequest and conformance NCProtoDeclineContinuityCallRequest, (uint64_t)&protocol conformance descriptor for NCProtoDeclineContinuityCallRequest);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance NCProtoDeclineContinuityCallRequest()
{
  return 0xD000000000000024;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance NCProtoDeclineContinuityCallRequest(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return NCProtoDeclineContinuityCallRequest.decodeMessage<A>(decoder:)(a1, a2, a3);
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance NCProtoDeclineContinuityCallRequest(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return NCProtoDeclineContinuityCallRequest.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance NCProtoDeclineContinuityCallRequest()
{
  lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoDeclineContinuityCallRequest and conformance NCProtoDeclineContinuityCallRequest, type metadata accessor for NCProtoDeclineContinuityCallRequest, (uint64_t)&protocol conformance descriptor for NCProtoDeclineContinuityCallRequest);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance NCProtoDeclineContinuityCallRequest@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance NCProtoConversationAVMode(&one-time initialization token for _protobuf_nameMap, (uint64_t)static NCProtoDeclineContinuityCallRequest._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance NCProtoDeclineContinuityCallRequest()
{
  lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoDeclineContinuityCallRequest and conformance NCProtoDeclineContinuityCallRequest, type metadata accessor for NCProtoDeclineContinuityCallRequest, (uint64_t)&protocol conformance descriptor for NCProtoDeclineContinuityCallRequest);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance NCProtoDeclineContinuityCallRequest()
{
  lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoDeclineContinuityCallRequest and conformance NCProtoDeclineContinuityCallRequest, type metadata accessor for NCProtoDeclineContinuityCallRequest, (uint64_t)&protocol conformance descriptor for NCProtoDeclineContinuityCallRequest);
  return Message.hash(into:)();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance NCProtoDeclineContinuityCallRequest(uint64_t a1, uint64_t a2)
{
  return specialized static NCProtoDeclineContinuityCallRequest.== infix(_:_:)(a1, a2, type metadata accessor for NCProtoDeclineContinuityCallRequest) & 1;
}

unint64_t static NCProtoDeclineContinuityCallResponse.protoMessageName.getter()
{
  return 0xD000000000000025;
}

uint64_t static NCProtoDeclineContinuityCallResponse._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static NCProtoConversationAVMode._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static NCProtoDeclineContinuityCallResponse._protobuf_nameMap, a1);
}

uint64_t NCProtoDeclineContinuityCallResponse.decodeMessage<A>(decoder:)()
{
  return NCProtoLagunaConnectionResponse.decodeMessage<A>(decoder:)();
}

Swift::Int NCProtoDeclineContinuityCallResponse.hashValue.getter()
{
  return NCProtoContactInfo.hashValue.getter(type metadata accessor for NCProtoDeclineContinuityCallResponse, &lazy protocol witness table cache variable for type NCProtoDeclineContinuityCallResponse and conformance NCProtoDeclineContinuityCallResponse, (uint64_t)&protocol conformance descriptor for NCProtoDeclineContinuityCallResponse);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance NCProtoDeclineContinuityCallResponse()
{
  return 0xD000000000000025;
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance NCProtoDeclineContinuityCallResponse()
{
  lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoDeclineContinuityCallResponse and conformance NCProtoDeclineContinuityCallResponse, type metadata accessor for NCProtoDeclineContinuityCallResponse, (uint64_t)&protocol conformance descriptor for NCProtoDeclineContinuityCallResponse);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance NCProtoDeclineContinuityCallResponse@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance NCProtoConversationAVMode(&one-time initialization token for _protobuf_nameMap, (uint64_t)static NCProtoDeclineContinuityCallResponse._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance NCProtoDeclineContinuityCallResponse()
{
  lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoDeclineContinuityCallResponse and conformance NCProtoDeclineContinuityCallResponse, type metadata accessor for NCProtoDeclineContinuityCallResponse, (uint64_t)&protocol conformance descriptor for NCProtoDeclineContinuityCallResponse);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance NCProtoDeclineContinuityCallResponse()
{
  lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoDeclineContinuityCallResponse and conformance NCProtoDeclineContinuityCallResponse, type metadata accessor for NCProtoDeclineContinuityCallResponse, (uint64_t)&protocol conformance descriptor for NCProtoDeclineContinuityCallResponse);
  return Message.hash(into:)();
}

unint64_t static NCProtoGetAddressableContactsRequest.protoMessageName.getter()
{
  return 0xD000000000000025;
}

uint64_t static NCProtoGetAddressableContactsRequest._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static NCProtoConversationAVMode._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static NCProtoGetAddressableContactsRequest._protobuf_nameMap, a1);
}

uint64_t NCProtoGetAddressableContactsRequest.decodeMessage<A>(decoder:)()
{
  return NCProtoLagunaConnectionResponse.decodeMessage<A>(decoder:)();
}

Swift::Int NCProtoGetAddressableContactsRequest.hashValue.getter()
{
  return NCProtoContactInfo.hashValue.getter(type metadata accessor for NCProtoGetAddressableContactsRequest, &lazy protocol witness table cache variable for type NCProtoGetAddressableContactsRequest and conformance NCProtoGetAddressableContactsRequest, (uint64_t)&protocol conformance descriptor for NCProtoGetAddressableContactsRequest);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance NCProtoGetAddressableContactsRequest()
{
  return 0xD000000000000025;
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance NCProtoGetAddressableContactsRequest()
{
  lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoGetAddressableContactsRequest and conformance NCProtoGetAddressableContactsRequest, type metadata accessor for NCProtoGetAddressableContactsRequest, (uint64_t)&protocol conformance descriptor for NCProtoGetAddressableContactsRequest);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance NCProtoGetAddressableContactsRequest@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance NCProtoConversationAVMode(&one-time initialization token for _protobuf_nameMap, (uint64_t)static NCProtoGetAddressableContactsRequest._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance NCProtoGetAddressableContactsRequest()
{
  lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoGetAddressableContactsRequest and conformance NCProtoGetAddressableContactsRequest, type metadata accessor for NCProtoGetAddressableContactsRequest, (uint64_t)&protocol conformance descriptor for NCProtoGetAddressableContactsRequest);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance NCProtoGetAddressableContactsRequest()
{
  lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoGetAddressableContactsRequest and conformance NCProtoGetAddressableContactsRequest, type metadata accessor for NCProtoGetAddressableContactsRequest, (uint64_t)&protocol conformance descriptor for NCProtoGetAddressableContactsRequest);
  return Message.hash(into:)();
}

unint64_t static NCProtoGetAddressableContactsResponse.protoMessageName.getter()
{
  return 0xD000000000000026;
}

uint64_t static NCProtoGetAddressableContactsResponse._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static NCProtoConversationAVMode._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static NCProtoGetAddressableContactsResponse._protobuf_nameMap, a1);
}

uint64_t NCProtoGetAddressableContactsResponse.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t result;
  char v2;

  result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      if (result == 2)
      {
        type metadata accessor for NCProtoGetAddressableContactsResponse(0);
        dispatch thunk of Decoder.decodeSingularInt64Field(value:)();
      }
      else if (result == 1)
      {
        type metadata accessor for NCProtoAddressableContact(0);
        lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoAddressableContact and conformance NCProtoAddressableContact, type metadata accessor for NCProtoAddressableContact, (uint64_t)&protocol conformance descriptor for NCProtoAddressableContact);
        dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)();
      }
      result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t NCProtoGetAddressableContactsResponse.traverse<A>(visitor:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;

  if (!*(_QWORD *)(*(_QWORD *)v0 + 16)
    || (type metadata accessor for NCProtoAddressableContact(0),
        lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoAddressableContact and conformance NCProtoAddressableContact, type metadata accessor for NCProtoAddressableContact, (uint64_t)&protocol conformance descriptor for NCProtoAddressableContact), result = dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)(), !v1))
  {
    result = closure #1 in NCProtoGetAddressableContactsResponse.traverse<A>(visitor:)(v0);
    if (!v1)
    {
      type metadata accessor for NCProtoGetAddressableContactsResponse(0);
      return UnknownStorage.traverse<A>(visitor:)();
    }
  }
  return result;
}

uint64_t closure #1 in NCProtoGetAddressableContactsResponse.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t result;

  result = type metadata accessor for NCProtoGetAddressableContactsResponse(0);
  if ((*(_BYTE *)(a1 + *(int *)(result + 24) + 8) & 1) == 0)
    return dispatch thunk of Visitor.visitSingularInt64Field(value:fieldNumber:)();
  return result;
}

Swift::Int NCProtoGetAddressableContactsResponse.hashValue.getter()
{
  return NCProtoContactInfo.hashValue.getter(type metadata accessor for NCProtoGetAddressableContactsResponse, &lazy protocol witness table cache variable for type NCProtoGetAddressableContactsResponse and conformance NCProtoGetAddressableContactsResponse, (uint64_t)&protocol conformance descriptor for NCProtoGetAddressableContactsResponse);
}

uint64_t protocol witness for Message.init() in conformance NCProtoGetAddressableContactsResponse@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t result;
  char *v5;

  *a2 = MEMORY[0x24BEE4AF8];
  result = UnknownStorage.init()();
  v5 = (char *)a2 + *(int *)(a1 + 24);
  *(_QWORD *)v5 = 0;
  v5[8] = 1;
  return result;
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance NCProtoGetAddressableContactsResponse()
{
  return 0xD000000000000026;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance NCProtoGetAddressableContactsResponse()
{
  return NCProtoGetAddressableContactsResponse.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance NCProtoGetAddressableContactsResponse()
{
  return NCProtoGetAddressableContactsResponse.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance NCProtoGetAddressableContactsResponse()
{
  lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoGetAddressableContactsResponse and conformance NCProtoGetAddressableContactsResponse, type metadata accessor for NCProtoGetAddressableContactsResponse, (uint64_t)&protocol conformance descriptor for NCProtoGetAddressableContactsResponse);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance NCProtoGetAddressableContactsResponse@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance NCProtoConversationAVMode(&one-time initialization token for _protobuf_nameMap, (uint64_t)static NCProtoGetAddressableContactsResponse._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance NCProtoGetAddressableContactsResponse()
{
  lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoGetAddressableContactsResponse and conformance NCProtoGetAddressableContactsResponse, type metadata accessor for NCProtoGetAddressableContactsResponse, (uint64_t)&protocol conformance descriptor for NCProtoGetAddressableContactsResponse);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance NCProtoGetAddressableContactsResponse()
{
  lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoGetAddressableContactsResponse and conformance NCProtoGetAddressableContactsResponse, type metadata accessor for NCProtoGetAddressableContactsResponse, (uint64_t)&protocol conformance descriptor for NCProtoGetAddressableContactsResponse);
  return Message.hash(into:)();
}

unint64_t static NCProtoGetImageForContactRequest.protoMessageName.getter()
{
  return 0xD000000000000021;
}

uint64_t static NCProtoGetImageForContactRequest._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static NCProtoConversationAVMode._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static NCProtoGetImageForContactRequest._protobuf_nameMap, a1);
}

uint64_t NCProtoGetImageForContactRequest.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return NCProtoEndedSessionEvent.decodeMessage<A>(decoder:)(a1, a2, a3, (void (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BE5C120]);
}

uint64_t NCProtoGetImageForContactRequest.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return NCProtoEndedSessionEvent.traverse<A>(visitor:)(a1, a2, a3, (void (*)(_QWORD))type metadata accessor for NCProtoGetImageForContactRequest);
}

uint64_t static NCProtoGetImageForContactRequest.== infix(_:_:)(_QWORD *a1, char *a2)
{
  return specialized static NCProtoGetCallDisplayDetailsRequest.== infix(_:_:)(a1, a2, type metadata accessor for NCProtoGetImageForContactRequest) & 1;
}

Swift::Int NCProtoGetImageForContactRequest.hashValue.getter()
{
  return NCProtoContactInfo.hashValue.getter(type metadata accessor for NCProtoGetImageForContactRequest, &lazy protocol witness table cache variable for type NCProtoGetImageForContactRequest and conformance NCProtoGetImageForContactRequest, (uint64_t)&protocol conformance descriptor for NCProtoGetImageForContactRequest);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance NCProtoGetImageForContactRequest()
{
  return 0xD000000000000021;
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance NCProtoGetImageForContactRequest(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return NCProtoGetImageForContactRequest.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance NCProtoGetImageForContactRequest()
{
  lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoGetImageForContactRequest and conformance NCProtoGetImageForContactRequest, type metadata accessor for NCProtoGetImageForContactRequest, (uint64_t)&protocol conformance descriptor for NCProtoGetImageForContactRequest);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance NCProtoGetImageForContactRequest@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance NCProtoConversationAVMode(&one-time initialization token for _protobuf_nameMap, (uint64_t)static NCProtoGetImageForContactRequest._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance NCProtoGetImageForContactRequest()
{
  lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoGetImageForContactRequest and conformance NCProtoGetImageForContactRequest, type metadata accessor for NCProtoGetImageForContactRequest, (uint64_t)&protocol conformance descriptor for NCProtoGetImageForContactRequest);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance NCProtoGetImageForContactRequest()
{
  lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoGetImageForContactRequest and conformance NCProtoGetImageForContactRequest, type metadata accessor for NCProtoGetImageForContactRequest, (uint64_t)&protocol conformance descriptor for NCProtoGetImageForContactRequest);
  return Message.hash(into:)();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance NCProtoGetImageForContactRequest(_QWORD *a1, char *a2)
{
  return specialized static NCProtoGetCallDisplayDetailsRequest.== infix(_:_:)(a1, a2, type metadata accessor for NCProtoGetImageForContactRequest) & 1;
}

unint64_t static NCProtoGetImageForContactResponse.protoMessageName.getter()
{
  return 0xD000000000000022;
}

uint64_t static NCProtoGetImageForContactResponse._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static NCProtoConversationAVMode._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static NCProtoGetImageForContactResponse._protobuf_nameMap, a1);
}

uint64_t NCProtoGetImageForContactResponse.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return NCProtoDeclineContinuityCallRequest.decodeMessage<A>(decoder:)(a1, a2, a3, type metadata accessor for NCProtoGetImageForContactResponse, (void (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BE5C0A0]);
}

uint64_t NCProtoDeclineContinuityCallRequest.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(_QWORD), void (*a5)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  char v12;
  uint64_t v13;

  while (1)
  {
    result = dispatch thunk of Decoder.nextFieldNumber()();
    if (v6 || (v12 & 1) != 0)
      break;
    if (result == 1)
    {
      v13 = a4(0);
      a5(v5 + *(int *)(v13 + 20), a2, a3);
    }
    v6 = 0;
  }
  return result;
}

uint64_t NCProtoGetImageForContactResponse.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return NCProtoSuggestionAdvertisementDidChangeEvent.traverse<A>(visitor:)(a1, a2, a3, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))closure #1 in NCProtoGetImageForContactResponse.traverse<A>(visitor:));
}

uint64_t closure #1 in NCProtoGetImageForContactResponse.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;

  result = type metadata accessor for NCProtoGetImageForContactResponse(0);
  v3 = a1 + *(int *)(result + 20);
  v4 = *(_QWORD *)(v3 + 8);
  if (v4 >> 60 != 15)
  {
    v5 = *(_QWORD *)v3;
    outlined copy of Data._Representation(*(_QWORD *)v3, *(_QWORD *)(v3 + 8));
    dispatch thunk of Visitor.visitSingularBytesField(value:fieldNumber:)();
    return outlined consume of Data?(v5, v4);
  }
  return result;
}

Swift::Int NCProtoGetImageForContactResponse.hashValue.getter()
{
  return NCProtoContactInfo.hashValue.getter(type metadata accessor for NCProtoGetImageForContactResponse, &lazy protocol witness table cache variable for type NCProtoGetImageForContactResponse and conformance NCProtoGetImageForContactResponse, (uint64_t)&protocol conformance descriptor for NCProtoGetImageForContactResponse);
}

double protocol witness for Message.init() in conformance NCProtoGetImageForContactResponse@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  double result;

  UnknownStorage.init()();
  result = 0.0;
  *(_OWORD *)(a2 + *(int *)(a1 + 20)) = xmmword_242A30CC0;
  return result;
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance NCProtoGetImageForContactResponse()
{
  return 0xD000000000000022;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance NCProtoGetImageForContactResponse(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return NCProtoGetImageForContactResponse.decodeMessage<A>(decoder:)(a1, a2, a3);
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance NCProtoGetImageForContactResponse(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return NCProtoGetImageForContactResponse.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance NCProtoGetImageForContactResponse()
{
  lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoGetImageForContactResponse and conformance NCProtoGetImageForContactResponse, type metadata accessor for NCProtoGetImageForContactResponse, (uint64_t)&protocol conformance descriptor for NCProtoGetImageForContactResponse);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance NCProtoGetImageForContactResponse@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance NCProtoConversationAVMode(&one-time initialization token for _protobuf_nameMap, (uint64_t)static NCProtoGetImageForContactResponse._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance NCProtoGetImageForContactResponse()
{
  lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoGetImageForContactResponse and conformance NCProtoGetImageForContactResponse, type metadata accessor for NCProtoGetImageForContactResponse, (uint64_t)&protocol conformance descriptor for NCProtoGetImageForContactResponse);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance NCProtoGetImageForContactResponse()
{
  lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoGetImageForContactResponse and conformance NCProtoGetImageForContactResponse, type metadata accessor for NCProtoGetImageForContactResponse, (uint64_t)&protocol conformance descriptor for NCProtoGetImageForContactResponse);
  return Message.hash(into:)();
}

unint64_t static NCProtoAddConversationParticipantsRequest.protoMessageName.getter()
{
  return 0xD00000000000002ALL;
}

uint64_t static NCProtoAddConversationParticipantsRequest._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static NCProtoConversationAVMode._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static NCProtoAddConversationParticipantsRequest._protobuf_nameMap, a1);
}

uint64_t NCProtoAddConversationParticipantsRequest.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return NCProtoEndedSessionEvent.decodeMessage<A>(decoder:)(a1, a2, a3, (void (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BE5C0E8]);
}

uint64_t NCProtoAddConversationParticipantsRequest.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return NCProtoAddConversationParticipantsRequest.traverse<A>(visitor:)(a1, a2, a3, MEMORY[0x24BE5C2C0], (void (*)(_QWORD))type metadata accessor for NCProtoAddConversationParticipantsRequest);
}

uint64_t static NCProtoAddConversationParticipantsRequest.== infix(_:_:)(_QWORD *a1, char *a2)
{
  return specialized static NCProtoAddConversationParticipantsRequest.== infix(_:_:)(a1, a2, (uint64_t (*)(_QWORD, _QWORD))specialized static Array<A>.== infix(_:_:), type metadata accessor for NCProtoAddConversationParticipantsRequest) & 1;
}

Swift::Int NCProtoAddConversationParticipantsRequest.hashValue.getter()
{
  return NCProtoContactInfo.hashValue.getter(type metadata accessor for NCProtoAddConversationParticipantsRequest, &lazy protocol witness table cache variable for type NCProtoAddConversationParticipantsRequest and conformance NCProtoAddConversationParticipantsRequest, (uint64_t)&protocol conformance descriptor for NCProtoAddConversationParticipantsRequest);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance NCProtoAddConversationParticipantsRequest()
{
  return 0xD00000000000002ALL;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance NCProtoAddConversationParticipantsRequest(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return NCProtoAddConversationParticipantsRequest.decodeMessage<A>(decoder:)(a1, a2, a3);
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance NCProtoAddConversationParticipantsRequest(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return NCProtoAddConversationParticipantsRequest.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance NCProtoAddConversationParticipantsRequest()
{
  lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoAddConversationParticipantsRequest and conformance NCProtoAddConversationParticipantsRequest, type metadata accessor for NCProtoAddConversationParticipantsRequest, (uint64_t)&protocol conformance descriptor for NCProtoAddConversationParticipantsRequest);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance NCProtoAddConversationParticipantsRequest@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance NCProtoConversationAVMode(&one-time initialization token for _protobuf_nameMap, (uint64_t)static NCProtoAddConversationParticipantsRequest._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance NCProtoAddConversationParticipantsRequest()
{
  lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoAddConversationParticipantsRequest and conformance NCProtoAddConversationParticipantsRequest, type metadata accessor for NCProtoAddConversationParticipantsRequest, (uint64_t)&protocol conformance descriptor for NCProtoAddConversationParticipantsRequest);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance NCProtoAddConversationParticipantsRequest()
{
  lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoAddConversationParticipantsRequest and conformance NCProtoAddConversationParticipantsRequest, type metadata accessor for NCProtoAddConversationParticipantsRequest, (uint64_t)&protocol conformance descriptor for NCProtoAddConversationParticipantsRequest);
  return Message.hash(into:)();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance NCProtoAddConversationParticipantsRequest(_QWORD *a1, char *a2)
{
  return specialized static NCProtoAddConversationParticipantsRequest.== infix(_:_:)(a1, a2, (uint64_t (*)(_QWORD, _QWORD))specialized static Array<A>.== infix(_:_:), type metadata accessor for NCProtoAddConversationParticipantsRequest) & 1;
}

unint64_t static NCProtoAddConversationParticipantsResponse.protoMessageName.getter()
{
  return 0xD00000000000002BLL;
}

uint64_t static NCProtoAddConversationParticipantsResponse._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static NCProtoConversationAVMode._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static NCProtoAddConversationParticipantsResponse._protobuf_nameMap, a1);
}

uint64_t NCProtoAddConversationParticipantsResponse.decodeMessage<A>(decoder:)()
{
  return NCProtoLagunaConnectionResponse.decodeMessage<A>(decoder:)();
}

Swift::Int NCProtoAddConversationParticipantsResponse.hashValue.getter()
{
  return NCProtoContactInfo.hashValue.getter(type metadata accessor for NCProtoAddConversationParticipantsResponse, &lazy protocol witness table cache variable for type NCProtoAddConversationParticipantsResponse and conformance NCProtoAddConversationParticipantsResponse, (uint64_t)&protocol conformance descriptor for NCProtoAddConversationParticipantsResponse);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance NCProtoAddConversationParticipantsResponse()
{
  return 0xD00000000000002BLL;
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance NCProtoAddConversationParticipantsResponse()
{
  lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoAddConversationParticipantsResponse and conformance NCProtoAddConversationParticipantsResponse, type metadata accessor for NCProtoAddConversationParticipantsResponse, (uint64_t)&protocol conformance descriptor for NCProtoAddConversationParticipantsResponse);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance NCProtoAddConversationParticipantsResponse@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance NCProtoConversationAVMode(&one-time initialization token for _protobuf_nameMap, (uint64_t)static NCProtoAddConversationParticipantsResponse._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance NCProtoAddConversationParticipantsResponse()
{
  lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoAddConversationParticipantsResponse and conformance NCProtoAddConversationParticipantsResponse, type metadata accessor for NCProtoAddConversationParticipantsResponse, (uint64_t)&protocol conformance descriptor for NCProtoAddConversationParticipantsResponse);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance NCProtoAddConversationParticipantsResponse()
{
  lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoAddConversationParticipantsResponse and conformance NCProtoAddConversationParticipantsResponse, type metadata accessor for NCProtoAddConversationParticipantsResponse, (uint64_t)&protocol conformance descriptor for NCProtoAddConversationParticipantsResponse);
  return Message.hash(into:)();
}

unint64_t static NCProtoGetCallDisplayDetailsRequest.protoMessageName.getter()
{
  return 0xD000000000000024;
}

uint64_t static NCProtoGetCallDisplayDetailsRequest._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static NCProtoConversationAVMode._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static NCProtoGetCallDisplayDetailsRequest._protobuf_nameMap, a1);
}

uint64_t NCProtoGetCallDisplayDetailsRequest.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return NCProtoEndedSessionEvent.decodeMessage<A>(decoder:)(a1, a2, a3, (void (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BE5C120]);
}

uint64_t NCProtoGetCallDisplayDetailsRequest.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return NCProtoEndedSessionEvent.traverse<A>(visitor:)(a1, a2, a3, (void (*)(_QWORD))type metadata accessor for NCProtoGetCallDisplayDetailsRequest);
}

uint64_t static NCProtoGetCallDisplayDetailsRequest.== infix(_:_:)(_QWORD *a1, char *a2)
{
  return specialized static NCProtoGetCallDisplayDetailsRequest.== infix(_:_:)(a1, a2, type metadata accessor for NCProtoGetCallDisplayDetailsRequest) & 1;
}

Swift::Int NCProtoGetCallDisplayDetailsRequest.hashValue.getter()
{
  return NCProtoContactInfo.hashValue.getter(type metadata accessor for NCProtoGetCallDisplayDetailsRequest, &lazy protocol witness table cache variable for type NCProtoGetCallDisplayDetailsRequest and conformance NCProtoGetCallDisplayDetailsRequest, (uint64_t)&protocol conformance descriptor for NCProtoGetCallDisplayDetailsRequest);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance NCProtoGetCallDisplayDetailsRequest()
{
  return 0xD000000000000024;
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance NCProtoGetCallDisplayDetailsRequest(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return NCProtoGetCallDisplayDetailsRequest.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance NCProtoGetCallDisplayDetailsRequest()
{
  lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoGetCallDisplayDetailsRequest and conformance NCProtoGetCallDisplayDetailsRequest, type metadata accessor for NCProtoGetCallDisplayDetailsRequest, (uint64_t)&protocol conformance descriptor for NCProtoGetCallDisplayDetailsRequest);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance NCProtoGetCallDisplayDetailsRequest@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance NCProtoConversationAVMode(&one-time initialization token for _protobuf_nameMap, (uint64_t)static NCProtoGetCallDisplayDetailsRequest._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance NCProtoGetCallDisplayDetailsRequest()
{
  lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoGetCallDisplayDetailsRequest and conformance NCProtoGetCallDisplayDetailsRequest, type metadata accessor for NCProtoGetCallDisplayDetailsRequest, (uint64_t)&protocol conformance descriptor for NCProtoGetCallDisplayDetailsRequest);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance NCProtoGetCallDisplayDetailsRequest()
{
  lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoGetCallDisplayDetailsRequest and conformance NCProtoGetCallDisplayDetailsRequest, type metadata accessor for NCProtoGetCallDisplayDetailsRequest, (uint64_t)&protocol conformance descriptor for NCProtoGetCallDisplayDetailsRequest);
  return Message.hash(into:)();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance NCProtoGetCallDisplayDetailsRequest(_QWORD *a1, char *a2)
{
  return specialized static NCProtoGetCallDisplayDetailsRequest.== infix(_:_:)(a1, a2, type metadata accessor for NCProtoGetCallDisplayDetailsRequest) & 1;
}

unint64_t static NCProtoGetCallDisplayDetailsResponse.protoMessageName.getter()
{
  return 0xD000000000000025;
}

uint64_t static NCProtoGetCallDisplayDetailsResponse._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static NCProtoConversationAVMode._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static NCProtoGetCallDisplayDetailsResponse._protobuf_nameMap, a1);
}

uint64_t NCProtoGetCallDisplayDetailsResponse.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return NCProtoSuggestionAdvertisementDidChangeEvent.decodeMessage<A>(decoder:)(a1, a2, a3, (void (*)(_QWORD))type metadata accessor for NCProtoGetCallDisplayDetailsResponse, type metadata accessor for NCProtoCallInfo, &lazy protocol witness table cache variable for type NCProtoCallInfo and conformance NCProtoCallInfo, (uint64_t)&protocol conformance descriptor for NCProtoCallInfo);
}

uint64_t NCProtoSuggestionAdvertisementDidChangeEvent.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(_QWORD), uint64_t (*a5)(uint64_t), unint64_t *a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v13;
  uint64_t result;
  char v18;

  v13 = v7;
  while (1)
  {
    result = dispatch thunk of Decoder.nextFieldNumber()();
    if (v8 || (v18 & 1) != 0)
      break;
    if (result == 1)
      closure #1 in NCProtoSuggestionAdvertisementDidChangeEvent.decodeMessage<A>(decoder:)(a1, v13, a2, a3, a4, a5, a6, a7);
  }
  return result;
}

uint64_t NCProtoGetCallDisplayDetailsResponse.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return NCProtoSuggestionAdvertisementDidChangeEvent.traverse<A>(visitor:)(a1, a2, a3, closure #1 in NCProtoGetCallDisplayDetailsResponse.traverse<A>(visitor:));
}

uint64_t closure #1 in NCProtoGetCallDisplayDetailsResponse.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  _QWORD v14[2];

  v14[1] = a4;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NCProtoCallInfo?);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for NCProtoCallInfo(0);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for NCProtoGetCallDisplayDetailsResponse(0);
  outlined init with copy of NCProtoContactInfo?(a1 + *(int *)(v12 + 20), (uint64_t)v7, &demangling cache variable for type metadata for NCProtoCallInfo?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
    return outlined destroy of NCProtoContactInfo?((uint64_t)v7, &demangling cache variable for type metadata for NCProtoCallInfo?);
  outlined init with take of NCProtoContactInfo((uint64_t)v7, (uint64_t)v11, type metadata accessor for NCProtoCallInfo);
  lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoCallInfo and conformance NCProtoCallInfo, type metadata accessor for NCProtoCallInfo, (uint64_t)&protocol conformance descriptor for NCProtoCallInfo);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of NCProtoContactInfo((uint64_t)v11, type metadata accessor for NCProtoCallInfo);
}

Swift::Int NCProtoGetCallDisplayDetailsResponse.hashValue.getter()
{
  return NCProtoContactInfo.hashValue.getter(type metadata accessor for NCProtoGetCallDisplayDetailsResponse, &lazy protocol witness table cache variable for type NCProtoGetCallDisplayDetailsResponse and conformance NCProtoGetCallDisplayDetailsResponse, (uint64_t)&protocol conformance descriptor for NCProtoGetCallDisplayDetailsResponse);
}

uint64_t protocol witness for Message.init() in conformance NCProtoGetCallDisplayDetailsResponse@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for Message.init() in conformance NCProtoSuggestionAdvertisementDidChangeEvent(a1, type metadata accessor for NCProtoCallInfo, a2);
}

uint64_t protocol witness for Message.init() in conformance NCProtoSuggestionAdvertisementDidChangeEvent@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(_QWORD)@<X2>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;

  UnknownStorage.init()();
  v6 = a3 + *(int *)(a1 + 20);
  v7 = a2(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v6, 1, 1, v7);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance NCProtoGetCallDisplayDetailsResponse()
{
  return 0xD000000000000025;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance NCProtoGetCallDisplayDetailsResponse(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return NCProtoGetCallDisplayDetailsResponse.decodeMessage<A>(decoder:)(a1, a2, a3);
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance NCProtoGetCallDisplayDetailsResponse(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return NCProtoGetCallDisplayDetailsResponse.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance NCProtoGetCallDisplayDetailsResponse()
{
  lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoGetCallDisplayDetailsResponse and conformance NCProtoGetCallDisplayDetailsResponse, type metadata accessor for NCProtoGetCallDisplayDetailsResponse, (uint64_t)&protocol conformance descriptor for NCProtoGetCallDisplayDetailsResponse);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance NCProtoGetCallDisplayDetailsResponse@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance NCProtoConversationAVMode(&one-time initialization token for _protobuf_nameMap, (uint64_t)static NCProtoGetCallDisplayDetailsResponse._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance NCProtoGetCallDisplayDetailsResponse()
{
  lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoGetCallDisplayDetailsResponse and conformance NCProtoGetCallDisplayDetailsResponse, type metadata accessor for NCProtoGetCallDisplayDetailsResponse, (uint64_t)&protocol conformance descriptor for NCProtoGetCallDisplayDetailsResponse);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance NCProtoGetCallDisplayDetailsResponse()
{
  lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoGetCallDisplayDetailsResponse and conformance NCProtoGetCallDisplayDetailsResponse, type metadata accessor for NCProtoGetCallDisplayDetailsResponse, (uint64_t)&protocol conformance descriptor for NCProtoGetCallDisplayDetailsResponse);
  return Message.hash(into:)();
}

unint64_t static NCProtoCallState.protoMessageName.getter()
{
  return 0xD000000000000011;
}

uint64_t static NCProtoCallState._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static NCProtoConversationAVMode._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static NCProtoCallState._protobuf_nameMap, a1);
}

uint64_t NCProtoCallState.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  char v10;

  v5 = v3;
  result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v4)
  {
    while ((v10 & 1) == 0)
    {
      switch(result)
      {
        case 1:
        case 2:
        case 4:
          type metadata accessor for NCProtoCallState(0);
          dispatch thunk of Decoder.decodeSingularBoolField(value:)();
          break;
        case 3:
          closure #3 in NCProtoContinuityCall.decodeMessage<A>(decoder:)(a1, v5, a2, a3, (void (*)(_QWORD))type metadata accessor for NCProtoCallState, (void (*)(void))lazy protocol witness table accessor for type NCProtoConversationAVMode and conformance NCProtoConversationAVMode);
          break;
        default:
          break;
      }
      result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t closure #3 in NCProtoContinuityCall.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(_QWORD), void (*a6)(void))
{
  a5(0);
  a6();
  return dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)();
}

uint64_t NCProtoCallState.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;

  result = closure #1 in NCProtoCallState.traverse<A>(visitor:)(v3);
  if (!v4)
  {
    closure #1 in NCProtoTransferActiveConversationRequest.traverse<A>(visitor:)(v3, a1, a2, a3, type metadata accessor for NCProtoCallState);
    closure #3 in NCProtoContinuityCall.traverse<A>(visitor:)(v3, a1, a2, a3, type metadata accessor for NCProtoCallState, (void (*)(uint64_t, uint64_t))lazy protocol witness table accessor for type NCProtoConversationAVMode and conformance NCProtoConversationAVMode);
    closure #4 in NCProtoCallState.traverse<A>(visitor:)(v3, a1, a2, a3, type metadata accessor for NCProtoCallState);
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

uint64_t closure #1 in NCProtoCallState.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t result;

  result = type metadata accessor for NCProtoCallState(0);
  if (*(_BYTE *)(a1 + *(int *)(result + 20)) != 2)
    return dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
  return result;
}

uint64_t closure #3 in NCProtoContinuityCall.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(_QWORD), void (*a6)(uint64_t, uint64_t))
{
  uint64_t result;
  uint64_t v9;

  result = a5(0);
  if ((*(_BYTE *)(a1 + *(int *)(result + 28) + 9) & 1) == 0)
  {
    a6(result, v9);
    return dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
  }
  return result;
}

Swift::Int NCProtoCallState.hashValue.getter()
{
  return NCProtoContactInfo.hashValue.getter(type metadata accessor for NCProtoCallState, &lazy protocol witness table cache variable for type NCProtoCallState and conformance NCProtoCallState, (uint64_t)&protocol conformance descriptor for NCProtoCallState);
}

uint64_t protocol witness for Message.init() in conformance NCProtoCallState@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  result = UnknownStorage.init()();
  v5 = a1[6];
  *(_BYTE *)(a2 + a1[5]) = 2;
  *(_BYTE *)(a2 + v5) = 2;
  v6 = a1[8];
  v7 = a2 + a1[7];
  *(_QWORD *)v7 = 0;
  *(_WORD *)(v7 + 8) = 256;
  *(_BYTE *)(a2 + v6) = 2;
  return result;
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance NCProtoCallState()
{
  return 0xD000000000000011;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance NCProtoCallState(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return NCProtoCallState.decodeMessage<A>(decoder:)(a1, a2, a3);
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance NCProtoCallState(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return NCProtoCallState.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance NCProtoCallState()
{
  lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoCallState and conformance NCProtoCallState, type metadata accessor for NCProtoCallState, (uint64_t)&protocol conformance descriptor for NCProtoCallState);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance NCProtoCallState@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance NCProtoConversationAVMode(&one-time initialization token for _protobuf_nameMap, (uint64_t)static NCProtoCallState._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance NCProtoCallState()
{
  lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoCallState and conformance NCProtoCallState, type metadata accessor for NCProtoCallState, (uint64_t)&protocol conformance descriptor for NCProtoCallState);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance NCProtoCallState()
{
  lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoCallState and conformance NCProtoCallState, type metadata accessor for NCProtoCallState, (uint64_t)&protocol conformance descriptor for NCProtoCallState);
  return Message.hash(into:)();
}

unint64_t static NCProtoCallStateRequest.protoMessageName.getter()
{
  return 0xD000000000000018;
}

uint64_t static NCProtoCallStateRequest._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static NCProtoConversationAVMode._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static NCProtoCallStateRequest._protobuf_nameMap, a1);
}

uint64_t NCProtoCallStateRequest.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return NCProtoEndedSessionEvent.decodeMessage<A>(decoder:)(a1, a2, a3, (void (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BE5C0A8]);
}

uint64_t NCProtoEndedSessionEvent.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  char v10;

  while (1)
  {
    result = dispatch thunk of Decoder.nextFieldNumber()();
    if (v5 || (v10 & 1) != 0)
      break;
    if (result == 1)
      a4(v4, a2, a3);
  }
  return result;
}

void NCProtoCallStateRequest.traverse<A>(visitor:)()
{
  __asm { BR              X10 }
}

uint64_t sub_242A049B8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  if ((a2 & 0xFF000000000000) == 0
    || (result = dispatch thunk of Visitor.visitSingularBytesField(value:fieldNumber:)(), !v2))
  {
    type metadata accessor for NCProtoCallStateRequest(0);
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

Swift::Int NCProtoCallStateRequest.hashValue.getter()
{
  return NCProtoContactInfo.hashValue.getter(type metadata accessor for NCProtoCallStateRequest, &lazy protocol witness table cache variable for type NCProtoCallStateRequest and conformance NCProtoCallStateRequest, (uint64_t)&protocol conformance descriptor for NCProtoCallStateRequest);
}

uint64_t protocol witness for Message.init() in conformance NCProtoCallStateRequest@<X0>(_OWORD *a1@<X8>)
{
  *a1 = xmmword_242A30CB0;
  return UnknownStorage.init()();
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance NCProtoCallStateRequest()
{
  return 0xD000000000000018;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance NCProtoCallStateRequest(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return NCProtoCallStateRequest.decodeMessage<A>(decoder:)(a1, a2, a3);
}

void protocol witness for Message.traverse<A>(visitor:) in conformance NCProtoCallStateRequest()
{
  NCProtoCallStateRequest.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance NCProtoCallStateRequest()
{
  lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoCallStateRequest and conformance NCProtoCallStateRequest, type metadata accessor for NCProtoCallStateRequest, (uint64_t)&protocol conformance descriptor for NCProtoCallStateRequest);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance NCProtoCallStateRequest@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance NCProtoConversationAVMode(&one-time initialization token for _protobuf_nameMap, (uint64_t)static NCProtoCallStateRequest._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance NCProtoCallStateRequest()
{
  lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoCallStateRequest and conformance NCProtoCallStateRequest, type metadata accessor for NCProtoCallStateRequest, (uint64_t)&protocol conformance descriptor for NCProtoCallStateRequest);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance NCProtoCallStateRequest()
{
  lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoCallStateRequest and conformance NCProtoCallStateRequest, type metadata accessor for NCProtoCallStateRequest, (uint64_t)&protocol conformance descriptor for NCProtoCallStateRequest);
  return Message.hash(into:)();
}

unint64_t static NCProtoCallStateResponse.protoMessageName.getter()
{
  return 0xD000000000000019;
}

uint64_t static NCProtoCallStateResponse._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static NCProtoConversationAVMode._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static NCProtoCallStateResponse._protobuf_nameMap, a1);
}

uint64_t NCProtoCallStateResponse.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return NCProtoSuggestionAdvertisementDidChangeEvent.decodeMessage<A>(decoder:)(a1, a2, a3, (void (*)(_QWORD))type metadata accessor for NCProtoCallStateResponse, type metadata accessor for NCProtoCallState, &lazy protocol witness table cache variable for type NCProtoCallState and conformance NCProtoCallState, (uint64_t)&protocol conformance descriptor for NCProtoCallState);
}

uint64_t closure #1 in NCProtoSuggestionAdvertisementDidChangeEvent.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(_QWORD), uint64_t (*a6)(uint64_t), unint64_t *a7, uint64_t a8)
{
  a5(0);
  a6(0);
  lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(a7, a6, a8);
  return dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
}

uint64_t NCProtoCallStateResponse.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return NCProtoSuggestionAdvertisementDidChangeEvent.traverse<A>(visitor:)(a1, a2, a3, closure #1 in NCProtoCallStateResponse.traverse<A>(visitor:));
}

uint64_t NCProtoSuggestionAdvertisementDidChangeEvent.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;

  result = a4(v4, a1, a2, a3);
  if (!v5)
    return UnknownStorage.traverse<A>(visitor:)();
  return result;
}

uint64_t closure #1 in NCProtoCallStateResponse.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  _QWORD v14[2];

  v14[1] = a4;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NCProtoCallState?);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for NCProtoCallState(0);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for NCProtoCallStateResponse(0);
  outlined init with copy of NCProtoContactInfo?(a1 + *(int *)(v12 + 20), (uint64_t)v7, &demangling cache variable for type metadata for NCProtoCallState?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
    return outlined destroy of NCProtoContactInfo?((uint64_t)v7, &demangling cache variable for type metadata for NCProtoCallState?);
  outlined init with take of NCProtoContactInfo((uint64_t)v7, (uint64_t)v11, type metadata accessor for NCProtoCallState);
  lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoCallState and conformance NCProtoCallState, type metadata accessor for NCProtoCallState, (uint64_t)&protocol conformance descriptor for NCProtoCallState);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of NCProtoContactInfo((uint64_t)v11, type metadata accessor for NCProtoCallState);
}

Swift::Int NCProtoCallStateResponse.hashValue.getter()
{
  return NCProtoContactInfo.hashValue.getter(type metadata accessor for NCProtoCallStateResponse, &lazy protocol witness table cache variable for type NCProtoCallStateResponse and conformance NCProtoCallStateResponse, (uint64_t)&protocol conformance descriptor for NCProtoCallStateResponse);
}

uint64_t protocol witness for Message.init() in conformance NCProtoCallStateResponse@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for Message.init() in conformance NCProtoSuggestionAdvertisementDidChangeEvent(a1, type metadata accessor for NCProtoCallState, a2);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance NCProtoCallStateResponse()
{
  return 0xD000000000000019;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance NCProtoCallStateResponse(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return NCProtoCallStateResponse.decodeMessage<A>(decoder:)(a1, a2, a3);
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance NCProtoCallStateResponse(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return NCProtoCallStateResponse.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance NCProtoCallStateResponse()
{
  lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoCallStateResponse and conformance NCProtoCallStateResponse, type metadata accessor for NCProtoCallStateResponse, (uint64_t)&protocol conformance descriptor for NCProtoCallStateResponse);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance NCProtoCallStateResponse@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance NCProtoConversationAVMode(&one-time initialization token for _protobuf_nameMap, (uint64_t)static NCProtoCallStateResponse._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance NCProtoCallStateResponse()
{
  lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoCallStateResponse and conformance NCProtoCallStateResponse, type metadata accessor for NCProtoCallStateResponse, (uint64_t)&protocol conformance descriptor for NCProtoCallStateResponse);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance NCProtoCallStateResponse()
{
  lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoCallStateResponse and conformance NCProtoCallStateResponse, type metadata accessor for NCProtoCallStateResponse, (uint64_t)&protocol conformance descriptor for NCProtoCallStateResponse);
  return Message.hash(into:)();
}

unint64_t static NCProtoDeviceTokenRequest.protoMessageName.getter()
{
  return 0xD00000000000001ALL;
}

uint64_t static NCProtoDeviceTokenRequest._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static NCProtoConversationAVMode._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static NCProtoDeviceTokenRequest._protobuf_nameMap, a1);
}

uint64_t NCProtoDeviceTokenRequest.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  char v10;
  uint64_t v11;
  uint64_t v12;

  v5 = v3;
  result = dispatch thunk of Decoder.nextFieldNumber()();
  v11 = v4;
  if (!v4)
  {
    while ((v10 & 1) == 0)
    {
      switch(result)
      {
        case 1:
          v12 = v11;
          dispatch thunk of Decoder.decodeSingularStringField(value:)();
          goto LABEL_5;
        case 2:
          v12 = v11;
          closure #2 in NCProtoDeviceTokenRequest.decodeMessage<A>(decoder:)();
          goto LABEL_5;
        case 3:
          v12 = v11;
          closure #1 in NCProtoAddressableContact.decodeMessage<A>(decoder:)(a1, v5, a2, a3, (void (*)(_QWORD))type metadata accessor for NCProtoDeviceTokenRequest, type metadata accessor for NCProtoCallState, &lazy protocol witness table cache variable for type NCProtoCallState and conformance NCProtoCallState, (uint64_t)&protocol conformance descriptor for NCProtoCallState);
          goto LABEL_5;
        case 4:
          type metadata accessor for NCProtoDeviceTokenRequest(0);
          v12 = v11;
          dispatch thunk of Decoder.decodeSingularBoolField(value:)();
          goto LABEL_5;
        case 5:
          v12 = v11;
          closure #5 in NCProtoDeviceTokenRequest.decodeMessage<A>(decoder:)();
LABEL_5:
          v11 = v12;
          break;
        default:
          break;
      }
      result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t closure #2 in NCProtoDeviceTokenRequest.decodeMessage<A>(decoder:)()
{
  type metadata accessor for NCProtoDeviceTokenRequest(0);
  type metadata accessor for NCProtoMemberAssociationPrimaryInfo(0);
  lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoMemberAssociationPrimaryInfo and conformance NCProtoMemberAssociationPrimaryInfo, type metadata accessor for NCProtoMemberAssociationPrimaryInfo, (uint64_t)&protocol conformance descriptor for NCProtoMemberAssociationPrimaryInfo);
  return dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
}

uint64_t closure #1 in NCProtoAddressableContact.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(_QWORD), uint64_t (*a6)(uint64_t), unint64_t *a7, uint64_t a8)
{
  a5(0);
  a6(0);
  lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(a7, a6, a8);
  return dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
}

uint64_t closure #5 in NCProtoDeviceTokenRequest.decodeMessage<A>(decoder:)()
{
  type metadata accessor for NCProtoDeviceTokenRequest(0);
  lazy protocol witness table accessor for type NCProtoDeviceTokenRequest.ConversationHandoffType and conformance NCProtoDeviceTokenRequest.ConversationHandoffType();
  return dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)();
}

uint64_t NCProtoDeviceTokenRequest.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  unint64_t v8;
  uint64_t v9;
  uint64_t result;

  v8 = v3[1];
  v9 = HIBYTE(v8) & 0xF;
  if ((v8 & 0x2000000000000000) == 0)
    v9 = *v3 & 0xFFFFFFFFFFFFLL;
  if (!v9 || (result = dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(), !v4))
  {
    result = closure #1 in NCProtoDeviceTokenRequest.traverse<A>(visitor:)((uint64_t)v3, a1, a2, a3);
    if (!v4)
    {
      closure #2 in NCProtoDeviceTokenRequest.traverse<A>(visitor:)((uint64_t)v3, a1, a2, a3);
      closure #4 in NCProtoCallState.traverse<A>(visitor:)((uint64_t)v3, a1, a2, a3, type metadata accessor for NCProtoDeviceTokenRequest);
      closure #4 in NCProtoDeviceTokenRequest.traverse<A>(visitor:)((uint64_t)v3);
      type metadata accessor for NCProtoDeviceTokenRequest(0);
      return UnknownStorage.traverse<A>(visitor:)();
    }
  }
  return result;
}

uint64_t closure #1 in NCProtoDeviceTokenRequest.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  _QWORD v14[2];

  v14[1] = a4;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NCProtoMemberAssociationPrimaryInfo?);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for NCProtoMemberAssociationPrimaryInfo(0);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for NCProtoDeviceTokenRequest(0);
  outlined init with copy of NCProtoContactInfo?(a1 + *(int *)(v12 + 24), (uint64_t)v7, &demangling cache variable for type metadata for NCProtoMemberAssociationPrimaryInfo?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
    return outlined destroy of NCProtoContactInfo?((uint64_t)v7, &demangling cache variable for type metadata for NCProtoMemberAssociationPrimaryInfo?);
  outlined init with take of NCProtoContactInfo((uint64_t)v7, (uint64_t)v11, type metadata accessor for NCProtoMemberAssociationPrimaryInfo);
  lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoMemberAssociationPrimaryInfo and conformance NCProtoMemberAssociationPrimaryInfo, type metadata accessor for NCProtoMemberAssociationPrimaryInfo, (uint64_t)&protocol conformance descriptor for NCProtoMemberAssociationPrimaryInfo);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of NCProtoContactInfo((uint64_t)v11, type metadata accessor for NCProtoMemberAssociationPrimaryInfo);
}

uint64_t closure #2 in NCProtoDeviceTokenRequest.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  _QWORD v14[2];

  v14[1] = a4;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NCProtoCallState?);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for NCProtoCallState(0);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for NCProtoDeviceTokenRequest(0);
  outlined init with copy of NCProtoContactInfo?(a1 + *(int *)(v12 + 28), (uint64_t)v7, &demangling cache variable for type metadata for NCProtoCallState?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
    return outlined destroy of NCProtoContactInfo?((uint64_t)v7, &demangling cache variable for type metadata for NCProtoCallState?);
  outlined init with take of NCProtoContactInfo((uint64_t)v7, (uint64_t)v11, type metadata accessor for NCProtoCallState);
  lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoCallState and conformance NCProtoCallState, type metadata accessor for NCProtoCallState, (uint64_t)&protocol conformance descriptor for NCProtoCallState);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of NCProtoContactInfo((uint64_t)v11, type metadata accessor for NCProtoCallState);
}

uint64_t closure #4 in NCProtoCallState.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(_QWORD))
{
  uint64_t result;

  result = a5(0);
  if (*(_BYTE *)(a1 + *(int *)(result + 32)) != 2)
    return dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
  return result;
}

uint64_t closure #4 in NCProtoDeviceTokenRequest.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t result;

  result = type metadata accessor for NCProtoDeviceTokenRequest(0);
  if ((*(_BYTE *)(a1 + *(int *)(result + 36) + 9) & 1) == 0)
  {
    lazy protocol witness table accessor for type NCProtoDeviceTokenRequest.ConversationHandoffType and conformance NCProtoDeviceTokenRequest.ConversationHandoffType();
    return dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
  }
  return result;
}

Swift::Int NCProtoDeviceTokenRequest.hashValue.getter()
{
  return NCProtoContactInfo.hashValue.getter(type metadata accessor for NCProtoDeviceTokenRequest, &lazy protocol witness table cache variable for type NCProtoDeviceTokenRequest and conformance NCProtoDeviceTokenRequest, (uint64_t)&protocol conformance descriptor for NCProtoDeviceTokenRequest);
}

uint64_t protocol witness for Message.init() in conformance NCProtoDeviceTokenRequest@<X0>(int *a1@<X0>, _QWORD *a2@<X8>)
{
  char *v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  char *v10;

  *a2 = 0;
  a2[1] = 0xE000000000000000;
  UnknownStorage.init()();
  v4 = (char *)a2 + a1[6];
  v5 = type metadata accessor for NCProtoMemberAssociationPrimaryInfo(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56))(v4, 1, 1, v5);
  v6 = (char *)a2 + a1[7];
  v7 = type metadata accessor for NCProtoCallState(0);
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v6, 1, 1, v7);
  v9 = a1[9];
  *((_BYTE *)a2 + a1[8]) = 2;
  v10 = (char *)a2 + v9;
  *(_QWORD *)v10 = 0;
  *((_WORD *)v10 + 4) = 256;
  return result;
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance NCProtoDeviceTokenRequest()
{
  return 0xD00000000000001ALL;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance NCProtoDeviceTokenRequest(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return NCProtoDeviceTokenRequest.decodeMessage<A>(decoder:)(a1, a2, a3);
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance NCProtoDeviceTokenRequest(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return NCProtoDeviceTokenRequest.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance NCProtoDeviceTokenRequest()
{
  lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoDeviceTokenRequest and conformance NCProtoDeviceTokenRequest, type metadata accessor for NCProtoDeviceTokenRequest, (uint64_t)&protocol conformance descriptor for NCProtoDeviceTokenRequest);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance NCProtoDeviceTokenRequest@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance NCProtoConversationAVMode(&one-time initialization token for _protobuf_nameMap, (uint64_t)static NCProtoDeviceTokenRequest._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance NCProtoDeviceTokenRequest()
{
  lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoDeviceTokenRequest and conformance NCProtoDeviceTokenRequest, type metadata accessor for NCProtoDeviceTokenRequest, (uint64_t)&protocol conformance descriptor for NCProtoDeviceTokenRequest);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance NCProtoDeviceTokenRequest()
{
  lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoDeviceTokenRequest and conformance NCProtoDeviceTokenRequest, type metadata accessor for NCProtoDeviceTokenRequest, (uint64_t)&protocol conformance descriptor for NCProtoDeviceTokenRequest);
  return Message.hash(into:)();
}

uint64_t static NCProtoDeviceTokenRequest.ConversationHandoffType._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static NCProtoConversationAVMode._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static NCProtoDeviceTokenRequest.ConversationHandoffType._protobuf_nameMap, a1);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance NCProtoDeviceTokenRequest.ConversationHandoffType@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance NCProtoConversationAVMode(&one-time initialization token for _protobuf_nameMap, (uint64_t)static NCProtoDeviceTokenRequest.ConversationHandoffType._protobuf_nameMap, a1);
}

unint64_t static NCProtoDeviceTokenResponse.protoMessageName.getter()
{
  return 0xD00000000000001BLL;
}

uint64_t static NCProtoDeviceTokenResponse._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static NCProtoConversationAVMode._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static NCProtoDeviceTokenResponse._protobuf_nameMap, a1);
}

uint64_t NCProtoDeviceTokenResponse.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t result;
  char v2;

  while (1)
  {
    result = dispatch thunk of Decoder.nextFieldNumber()();
    if (v0 || (v2 & 1) != 0)
      break;
    if (result == 2)
    {
      type metadata accessor for NCProtoDeviceTokenResponse(0);
      dispatch thunk of Decoder.decodeSingularBytesField(value:)();
    }
    else if (result == 1)
    {
      dispatch thunk of Decoder.decodeSingularStringField(value:)();
    }
    v0 = 0;
  }
  return result;
}

uint64_t NCProtoDeviceTokenResponse.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return NCProtoPullLagunaSessionToTVRequest.traverse<A>(visitor:)(a1, a2, a3, (uint64_t (*)(_QWORD *, uint64_t, uint64_t, uint64_t))closure #1 in NCProtoDeviceTokenResponse.traverse<A>(visitor:), (void (*)(_QWORD))type metadata accessor for NCProtoDeviceTokenResponse);
}

uint64_t NCProtoPullLagunaSessionToTVRequest.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(_QWORD *, uint64_t, uint64_t, uint64_t), void (*a5)(_QWORD))
{
  _QWORD *v5;
  uint64_t v6;
  unint64_t v12;
  uint64_t v13;
  uint64_t result;

  v12 = v5[1];
  v13 = HIBYTE(v12) & 0xF;
  if ((v12 & 0x2000000000000000) == 0)
    v13 = *v5 & 0xFFFFFFFFFFFFLL;
  if (!v13 || (result = dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(), !v6))
  {
    result = a4(v5, a1, a2, a3);
    if (!v6)
    {
      a5(0);
      return UnknownStorage.traverse<A>(visitor:)();
    }
  }
  return result;
}

uint64_t closure #1 in NCProtoDeviceTokenResponse.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;

  result = type metadata accessor for NCProtoDeviceTokenResponse(0);
  v3 = a1 + *(int *)(result + 24);
  v4 = *(_QWORD *)(v3 + 8);
  if (v4 >> 60 != 15)
  {
    v5 = *(_QWORD *)v3;
    outlined copy of Data._Representation(*(_QWORD *)v3, *(_QWORD *)(v3 + 8));
    dispatch thunk of Visitor.visitSingularBytesField(value:fieldNumber:)();
    return outlined consume of Data?(v5, v4);
  }
  return result;
}

Swift::Int NCProtoDeviceTokenResponse.hashValue.getter()
{
  return NCProtoContactInfo.hashValue.getter(type metadata accessor for NCProtoDeviceTokenResponse, &lazy protocol witness table cache variable for type NCProtoDeviceTokenResponse and conformance NCProtoDeviceTokenResponse, (uint64_t)&protocol conformance descriptor for NCProtoDeviceTokenResponse);
}

double protocol witness for Message.init() in conformance NCProtoDeviceTokenResponse@<D0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  double result;

  *a2 = 0;
  a2[1] = 0xE000000000000000;
  UnknownStorage.init()();
  result = 0.0;
  *(_OWORD *)((char *)a2 + *(int *)(a1 + 24)) = xmmword_242A30CC0;
  return result;
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance NCProtoDeviceTokenResponse()
{
  return 0xD00000000000001BLL;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance NCProtoDeviceTokenResponse()
{
  return NCProtoDeviceTokenResponse.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance NCProtoDeviceTokenResponse(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return NCProtoDeviceTokenResponse.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance NCProtoDeviceTokenResponse()
{
  lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoDeviceTokenResponse and conformance NCProtoDeviceTokenResponse, type metadata accessor for NCProtoDeviceTokenResponse, (uint64_t)&protocol conformance descriptor for NCProtoDeviceTokenResponse);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance NCProtoDeviceTokenResponse@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance NCProtoConversationAVMode(&one-time initialization token for _protobuf_nameMap, (uint64_t)static NCProtoDeviceTokenResponse._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance NCProtoDeviceTokenResponse()
{
  lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoDeviceTokenResponse and conformance NCProtoDeviceTokenResponse, type metadata accessor for NCProtoDeviceTokenResponse, (uint64_t)&protocol conformance descriptor for NCProtoDeviceTokenResponse);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance NCProtoDeviceTokenResponse()
{
  lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoDeviceTokenResponse and conformance NCProtoDeviceTokenResponse, type metadata accessor for NCProtoDeviceTokenResponse, (uint64_t)&protocol conformance descriptor for NCProtoDeviceTokenResponse);
  return Message.hash(into:)();
}

unint64_t static NCProtoDisconnectRequest.protoMessageName.getter()
{
  return 0xD000000000000019;
}

uint64_t static NCProtoDisconnectRequest._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static NCProtoConversationAVMode._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static NCProtoDisconnectRequest._protobuf_nameMap, a1);
}

uint64_t NCProtoDisconnectRequest.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  char v10;
  uint64_t v11;
  uint64_t v12;

  v5 = v3;
  result = dispatch thunk of Decoder.nextFieldNumber()();
  v11 = v4;
  if (!v4)
  {
    while (1)
    {
      if ((v10 & 1) != 0)
        return result;
      if (result == 3)
        break;
      if (result == 2)
      {
        type metadata accessor for NCProtoDisconnectRequest(0);
        v12 = v11;
        dispatch thunk of Decoder.decodeSingularBoolField(value:)();
        goto LABEL_5;
      }
      if (result == 1)
      {
        v12 = v11;
        dispatch thunk of Decoder.decodeSingularBytesField(value:)();
        goto LABEL_5;
      }
LABEL_6:
      result = dispatch thunk of Decoder.nextFieldNumber()();
    }
    v12 = v11;
    closure #3 in NCProtoContinuityCall.decodeMessage<A>(decoder:)(a1, v5, a2, a3, (void (*)(_QWORD))type metadata accessor for NCProtoDisconnectRequest, (void (*)(void))lazy protocol witness table accessor for type NCProtoDisconnectRequest.DisconnectReason and conformance NCProtoDisconnectRequest.DisconnectReason);
LABEL_5:
    v11 = v12;
    goto LABEL_6;
  }
  return result;
}

void NCProtoDisconnectRequest.traverse<A>(visitor:)()
{
  __asm { BR              X10 }
}

uint64_t sub_242A067AC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;

  if ((a2 & 0xFF000000000000) == 0
    || (result = dispatch thunk of Visitor.visitSingularBytesField(value:fieldNumber:)(), !v2))
  {
    result = closure #1 in NCProtoTransferActiveConversationRequest.traverse<A>(visitor:)(v5, v6, v4, v3, type metadata accessor for NCProtoDisconnectRequest);
    if (!v2)
    {
      closure #3 in NCProtoContinuityCall.traverse<A>(visitor:)(v5, v6, v4, v3, type metadata accessor for NCProtoDisconnectRequest, (void (*)(uint64_t, uint64_t))lazy protocol witness table accessor for type NCProtoDisconnectRequest.DisconnectReason and conformance NCProtoDisconnectRequest.DisconnectReason);
      type metadata accessor for NCProtoDisconnectRequest(0);
      return UnknownStorage.traverse<A>(visitor:)();
    }
  }
  return result;
}

Swift::Int NCProtoDisconnectRequest.hashValue.getter()
{
  return NCProtoContactInfo.hashValue.getter(type metadata accessor for NCProtoDisconnectRequest, &lazy protocol witness table cache variable for type NCProtoDisconnectRequest and conformance NCProtoDisconnectRequest, (uint64_t)&protocol conformance descriptor for NCProtoDisconnectRequest);
}

uint64_t protocol witness for Message.init() in conformance NCProtoDisconnectRequest@<X0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  char *v6;

  *a2 = xmmword_242A30CB0;
  result = UnknownStorage.init()();
  v5 = *(int *)(a1 + 28);
  *((_BYTE *)a2 + *(int *)(a1 + 24)) = 2;
  v6 = (char *)a2 + v5;
  *(_QWORD *)v6 = 0;
  *((_WORD *)v6 + 4) = 256;
  return result;
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance NCProtoDisconnectRequest()
{
  return 0xD000000000000019;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance NCProtoDisconnectRequest(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return NCProtoDisconnectRequest.decodeMessage<A>(decoder:)(a1, a2, a3);
}

void protocol witness for Message.traverse<A>(visitor:) in conformance NCProtoDisconnectRequest()
{
  NCProtoDisconnectRequest.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance NCProtoDisconnectRequest()
{
  lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoDisconnectRequest and conformance NCProtoDisconnectRequest, type metadata accessor for NCProtoDisconnectRequest, (uint64_t)&protocol conformance descriptor for NCProtoDisconnectRequest);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance NCProtoDisconnectRequest@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance NCProtoConversationAVMode(&one-time initialization token for _protobuf_nameMap, (uint64_t)static NCProtoDisconnectRequest._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance NCProtoDisconnectRequest()
{
  lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoDisconnectRequest and conformance NCProtoDisconnectRequest, type metadata accessor for NCProtoDisconnectRequest, (uint64_t)&protocol conformance descriptor for NCProtoDisconnectRequest);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance NCProtoDisconnectRequest()
{
  lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoDisconnectRequest and conformance NCProtoDisconnectRequest, type metadata accessor for NCProtoDisconnectRequest, (uint64_t)&protocol conformance descriptor for NCProtoDisconnectRequest);
  return Message.hash(into:)();
}

uint64_t static NCProtoDisconnectRequest.DisconnectReason._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static NCProtoConversationAVMode._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static NCProtoDisconnectRequest.DisconnectReason._protobuf_nameMap, a1);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance NCProtoDisconnectRequest.DisconnectReason@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance NCProtoConversationAVMode(&one-time initialization token for _protobuf_nameMap, (uint64_t)static NCProtoDisconnectRequest.DisconnectReason._protobuf_nameMap, a1);
}

unint64_t static NCProtoDisconnectResponse.protoMessageName.getter()
{
  return 0xD00000000000001ALL;
}

uint64_t static NCProtoDisconnectResponse._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static NCProtoConversationAVMode._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static NCProtoDisconnectResponse._protobuf_nameMap, a1);
}

uint64_t NCProtoDisconnectResponse.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t result;
  char v2;

  while (1)
  {
    result = dispatch thunk of Decoder.nextFieldNumber()();
    if (v0 || (v2 & 1) != 0)
      break;
    if (result == 1)
      dispatch thunk of Decoder.decodeSingularBoolField(value:)();
  }
  return result;
}

uint64_t NCProtoDisconnectResponse.traverse<A>(visitor:)()
{
  _BYTE *v0;
  uint64_t v1;
  uint64_t result;

  if (*v0 != 1 || (result = dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(), !v1))
  {
    type metadata accessor for NCProtoDisconnectResponse(0);
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

Swift::Int NCProtoDisconnectResponse.hashValue.getter()
{
  return NCProtoContactInfo.hashValue.getter(type metadata accessor for NCProtoDisconnectResponse, &lazy protocol witness table cache variable for type NCProtoDisconnectResponse and conformance NCProtoDisconnectResponse, (uint64_t)&protocol conformance descriptor for NCProtoDisconnectResponse);
}

uint64_t protocol witness for Message.init() in conformance NCProtoDisconnectResponse@<X0>(_BYTE *a1@<X8>)
{
  *a1 = 0;
  return UnknownStorage.init()();
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance NCProtoDisconnectResponse()
{
  return 0xD00000000000001ALL;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance NCProtoDisconnectResponse()
{
  return NCProtoDisconnectResponse.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance NCProtoDisconnectResponse()
{
  return NCProtoDisconnectResponse.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance NCProtoDisconnectResponse()
{
  lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoDisconnectResponse and conformance NCProtoDisconnectResponse, type metadata accessor for NCProtoDisconnectResponse, (uint64_t)&protocol conformance descriptor for NCProtoDisconnectResponse);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance NCProtoDisconnectResponse@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance NCProtoConversationAVMode(&one-time initialization token for _protobuf_nameMap, (uint64_t)static NCProtoDisconnectResponse._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance NCProtoDisconnectResponse()
{
  lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoDisconnectResponse and conformance NCProtoDisconnectResponse, type metadata accessor for NCProtoDisconnectResponse, (uint64_t)&protocol conformance descriptor for NCProtoDisconnectResponse);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance NCProtoDisconnectResponse()
{
  lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoDisconnectResponse and conformance NCProtoDisconnectResponse, type metadata accessor for NCProtoDisconnectResponse, (uint64_t)&protocol conformance descriptor for NCProtoDisconnectResponse);
  return Message.hash(into:)();
}

unint64_t static NCProtoPrepareTransferRequest.protoMessageName.getter()
{
  return 0xD00000000000001ELL;
}

uint64_t static NCProtoPrepareTransferRequest._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static NCProtoConversationAVMode._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static NCProtoPrepareTransferRequest._protobuf_nameMap, a1);
}

uint64_t NCProtoPrepareTransferRequest.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return NCProtoDeclineContinuityCallRequest.decodeMessage<A>(decoder:)(a1, a2, a3, type metadata accessor for NCProtoPrepareTransferRequest, (void (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BE5C118]);
}

uint64_t NCProtoPrepareTransferRequest.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return NCProtoDeclineContinuityCallRequest.traverse<A>(visitor:)(a1, a2, a3, type metadata accessor for NCProtoPrepareTransferRequest);
}

uint64_t NCProtoDeclineContinuityCallRequest.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(_QWORD))
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;

  result = closure #1 in NCProtoContinuityCall.traverse<A>(visitor:)(v4, a1, a2, a3, a4);
  if (!v5)
    return UnknownStorage.traverse<A>(visitor:)();
  return result;
}

uint64_t static NCProtoPrepareTransferRequest.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return specialized static NCProtoDeclineContinuityCallRequest.== infix(_:_:)(a1, a2, type metadata accessor for NCProtoPrepareTransferRequest) & 1;
}

Swift::Int NCProtoPrepareTransferRequest.hashValue.getter()
{
  return NCProtoContactInfo.hashValue.getter(type metadata accessor for NCProtoPrepareTransferRequest, &lazy protocol witness table cache variable for type NCProtoPrepareTransferRequest and conformance NCProtoPrepareTransferRequest, (uint64_t)&protocol conformance descriptor for NCProtoPrepareTransferRequest);
}

uint64_t protocol witness for Message.init() in conformance NCProtoPrepareTransferRequest@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  _QWORD *v5;

  result = UnknownStorage.init()();
  v5 = (_QWORD *)(a2 + *(int *)(a1 + 20));
  *v5 = 0;
  v5[1] = 0;
  return result;
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance NCProtoPrepareTransferRequest()
{
  return 0xD00000000000001ELL;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance NCProtoPrepareTransferRequest(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return NCProtoPrepareTransferRequest.decodeMessage<A>(decoder:)(a1, a2, a3);
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance NCProtoPrepareTransferRequest(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return NCProtoPrepareTransferRequest.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance NCProtoPrepareTransferRequest()
{
  lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoPrepareTransferRequest and conformance NCProtoPrepareTransferRequest, type metadata accessor for NCProtoPrepareTransferRequest, (uint64_t)&protocol conformance descriptor for NCProtoPrepareTransferRequest);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance NCProtoPrepareTransferRequest@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance NCProtoConversationAVMode(&one-time initialization token for _protobuf_nameMap, (uint64_t)static NCProtoPrepareTransferRequest._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance NCProtoPrepareTransferRequest()
{
  lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoPrepareTransferRequest and conformance NCProtoPrepareTransferRequest, type metadata accessor for NCProtoPrepareTransferRequest, (uint64_t)&protocol conformance descriptor for NCProtoPrepareTransferRequest);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance NCProtoPrepareTransferRequest()
{
  lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoPrepareTransferRequest and conformance NCProtoPrepareTransferRequest, type metadata accessor for NCProtoPrepareTransferRequest, (uint64_t)&protocol conformance descriptor for NCProtoPrepareTransferRequest);
  return Message.hash(into:)();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance NCProtoPrepareTransferRequest(uint64_t a1, uint64_t a2)
{
  return specialized static NCProtoDeclineContinuityCallRequest.== infix(_:_:)(a1, a2, type metadata accessor for NCProtoPrepareTransferRequest) & 1;
}

unint64_t static NCProtoPrepareTransferResponse.protoMessageName.getter()
{
  return 0xD00000000000001FLL;
}

uint64_t one-time initialization function for _protobuf_nameMap(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  v3 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v3, a2);
  __swift_project_value_buffer(v3, (uint64_t)a2);
  return _NameMap.init()();
}

uint64_t static NCProtoPrepareTransferResponse._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static NCProtoConversationAVMode._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static NCProtoPrepareTransferResponse._protobuf_nameMap, a1);
}

uint64_t NCProtoPrepareTransferResponse.decodeMessage<A>(decoder:)()
{
  return NCProtoLagunaConnectionResponse.decodeMessage<A>(decoder:)();
}

uint64_t static NCProtoLagunaConnectionResponse.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t (*v5)(uint64_t);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  void (*v12)(char *, uint64_t, uint64_t);
  void (*v13)(char *, uint64_t);
  uint64_t v15;

  v4 = type metadata accessor for UnknownStorage();
  v5 = (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10];
  v6 = *(_QWORD *)(v4 - 8);
  v7 = MEMORY[0x24BDAC7A8](v4);
  v9 = (char *)&v15 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v7);
  v11 = (char *)&v15 - v10;
  v12 = *(void (**)(char *, uint64_t, uint64_t))(v6 + 16);
  v12((char *)&v15 - v10, a1, v4);
  v12(v9, a2, v4);
  lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, v5, MEMORY[0x24BE5BF20]);
  LOBYTE(a2) = dispatch thunk of static Equatable.== infix(_:_:)();
  v13 = *(void (**)(char *, uint64_t))(v6 + 8);
  v13(v9, v4);
  v13(v11, v4);
  return a2 & 1;
}

Swift::Int NCProtoPrepareTransferResponse.hashValue.getter()
{
  return NCProtoContactInfo.hashValue.getter(type metadata accessor for NCProtoPrepareTransferResponse, &lazy protocol witness table cache variable for type NCProtoPrepareTransferResponse and conformance NCProtoPrepareTransferResponse, (uint64_t)&protocol conformance descriptor for NCProtoPrepareTransferResponse);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance NCProtoPrepareTransferResponse()
{
  return 0xD00000000000001FLL;
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance NCProtoPrepareTransferResponse()
{
  lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoPrepareTransferResponse and conformance NCProtoPrepareTransferResponse, type metadata accessor for NCProtoPrepareTransferResponse, (uint64_t)&protocol conformance descriptor for NCProtoPrepareTransferResponse);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance NCProtoPrepareTransferResponse@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance NCProtoConversationAVMode(&one-time initialization token for _protobuf_nameMap, (uint64_t)static NCProtoPrepareTransferResponse._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance NCProtoPrepareTransferResponse()
{
  lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoPrepareTransferResponse and conformance NCProtoPrepareTransferResponse, type metadata accessor for NCProtoPrepareTransferResponse, (uint64_t)&protocol conformance descriptor for NCProtoPrepareTransferResponse);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance NCProtoPrepareTransferResponse()
{
  lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoPrepareTransferResponse and conformance NCProtoPrepareTransferResponse, type metadata accessor for NCProtoPrepareTransferResponse, (uint64_t)&protocol conformance descriptor for NCProtoPrepareTransferResponse);
  return Message.hash(into:)();
}

unint64_t static NCProtoMemberAssociationPrimaryInfo.protoMessageName.getter()
{
  return 0xD000000000000024;
}

uint64_t static NCProtoMemberAssociationPrimaryInfo._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static NCProtoConversationAVMode._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static NCProtoMemberAssociationPrimaryInfo._protobuf_nameMap, a1);
}

uint64_t NCProtoMemberAssociationPrimaryInfo.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t result;
  char v2;
  uint64_t v3;
  uint64_t v4;

  result = dispatch thunk of Decoder.nextFieldNumber()();
  v3 = v0;
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
        case 4:
          type metadata accessor for NCProtoMemberAssociationPrimaryInfo(0);
          v4 = v3;
          dispatch thunk of Decoder.decodeSingularStringField(value:)();
          goto LABEL_5;
        case 2:
          type metadata accessor for NCProtoMemberAssociationPrimaryInfo(0);
          v4 = v3;
          dispatch thunk of Decoder.decodeSingularBytesField(value:)();
          goto LABEL_5;
        case 3:
          type metadata accessor for NCProtoMemberAssociationPrimaryInfo(0);
          v4 = v3;
          dispatch thunk of Decoder.decodeSingularUInt64Field(value:)();
          goto LABEL_5;
        case 5:
          lazy protocol witness table accessor for type NCProtoMemberAssociationPrimaryInfo.MemberAssociationType and conformance NCProtoMemberAssociationPrimaryInfo.MemberAssociationType();
          v4 = v3;
          dispatch thunk of Decoder.decodeRepeatedEnumField<A>(value:)();
LABEL_5:
          v3 = v4;
          break;
        default:
          break;
      }
      result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t NCProtoMemberAssociationPrimaryInfo.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;

  result = closure #1 in NCProtoActiveConversation.traverse<A>(visitor:)(v3, a1, a2, a3, type metadata accessor for NCProtoMemberAssociationPrimaryInfo);
  if (!v4)
  {
    closure #2 in NCProtoMemberAssociationPrimaryInfo.traverse<A>(visitor:)(v3);
    closure #3 in NCProtoMemberAssociationPrimaryInfo.traverse<A>(visitor:)(v3);
    closure #4 in NCProtoMemberAssociationPrimaryInfo.traverse<A>(visitor:)(v3);
    if (*(_QWORD *)(*(_QWORD *)v3 + 16))
    {
      lazy protocol witness table accessor for type NCProtoMemberAssociationPrimaryInfo.MemberAssociationType and conformance NCProtoMemberAssociationPrimaryInfo.MemberAssociationType();
      dispatch thunk of Visitor.visitPackedEnumField<A>(value:fieldNumber:)();
    }
    type metadata accessor for NCProtoMemberAssociationPrimaryInfo(0);
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

uint64_t closure #2 in NCProtoMemberAssociationPrimaryInfo.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;

  result = type metadata accessor for NCProtoMemberAssociationPrimaryInfo(0);
  v3 = a1 + *(int *)(result + 28);
  v4 = *(_QWORD *)(v3 + 8);
  if (v4 >> 60 != 15)
  {
    v5 = *(_QWORD *)v3;
    outlined copy of Data._Representation(*(_QWORD *)v3, *(_QWORD *)(v3 + 8));
    dispatch thunk of Visitor.visitSingularBytesField(value:fieldNumber:)();
    return outlined consume of Data?(v5, v4);
  }
  return result;
}

uint64_t closure #3 in NCProtoMemberAssociationPrimaryInfo.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t result;

  result = type metadata accessor for NCProtoMemberAssociationPrimaryInfo(0);
  if ((*(_BYTE *)(a1 + *(int *)(result + 32) + 8) & 1) == 0)
    return dispatch thunk of Visitor.visitSingularUInt64Field(value:fieldNumber:)();
  return result;
}

uint64_t closure #4 in NCProtoMemberAssociationPrimaryInfo.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t result;

  result = type metadata accessor for NCProtoMemberAssociationPrimaryInfo(0);
  if (*(_QWORD *)(a1 + *(int *)(result + 36) + 8))
    return dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)();
  return result;
}

Swift::Int NCProtoMemberAssociationPrimaryInfo.hashValue.getter()
{
  return NCProtoContactInfo.hashValue.getter(type metadata accessor for NCProtoMemberAssociationPrimaryInfo, &lazy protocol witness table cache variable for type NCProtoMemberAssociationPrimaryInfo and conformance NCProtoMemberAssociationPrimaryInfo, (uint64_t)&protocol conformance descriptor for NCProtoMemberAssociationPrimaryInfo);
}

double protocol witness for Message.init() in conformance NCProtoMemberAssociationPrimaryInfo@<D0>(int *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  _QWORD *v5;
  double result;
  uint64_t v7;
  char *v8;
  _QWORD *v9;

  *a2 = MEMORY[0x24BEE4AF8];
  UnknownStorage.init()();
  v4 = a1[7];
  v5 = (_QWORD *)((char *)a2 + a1[6]);
  *v5 = 0;
  v5[1] = 0;
  result = 0.0;
  *(_OWORD *)((char *)a2 + v4) = xmmword_242A30CC0;
  v7 = a1[9];
  v8 = (char *)a2 + a1[8];
  *(_QWORD *)v8 = 0;
  v8[8] = 1;
  v9 = (_QWORD *)((char *)a2 + v7);
  *v9 = 0;
  v9[1] = 0;
  return result;
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance NCProtoMemberAssociationPrimaryInfo()
{
  return 0xD000000000000024;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance NCProtoMemberAssociationPrimaryInfo()
{
  return NCProtoMemberAssociationPrimaryInfo.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance NCProtoMemberAssociationPrimaryInfo(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return NCProtoMemberAssociationPrimaryInfo.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance NCProtoMemberAssociationPrimaryInfo()
{
  lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoMemberAssociationPrimaryInfo and conformance NCProtoMemberAssociationPrimaryInfo, type metadata accessor for NCProtoMemberAssociationPrimaryInfo, (uint64_t)&protocol conformance descriptor for NCProtoMemberAssociationPrimaryInfo);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance NCProtoMemberAssociationPrimaryInfo@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance NCProtoConversationAVMode(&one-time initialization token for _protobuf_nameMap, (uint64_t)static NCProtoMemberAssociationPrimaryInfo._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance NCProtoMemberAssociationPrimaryInfo()
{
  lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoMemberAssociationPrimaryInfo and conformance NCProtoMemberAssociationPrimaryInfo, type metadata accessor for NCProtoMemberAssociationPrimaryInfo, (uint64_t)&protocol conformance descriptor for NCProtoMemberAssociationPrimaryInfo);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance NCProtoMemberAssociationPrimaryInfo()
{
  lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoMemberAssociationPrimaryInfo and conformance NCProtoMemberAssociationPrimaryInfo, type metadata accessor for NCProtoMemberAssociationPrimaryInfo, (uint64_t)&protocol conformance descriptor for NCProtoMemberAssociationPrimaryInfo);
  return Message.hash(into:)();
}

uint64_t static NCProtoMemberAssociationPrimaryInfo.MemberAssociationType._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static NCProtoConversationAVMode._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static NCProtoMemberAssociationPrimaryInfo.MemberAssociationType._protobuf_nameMap, a1);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance NCProtoMemberAssociationPrimaryInfo.MemberAssociationType@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance NCProtoConversationAVMode(&one-time initialization token for _protobuf_nameMap, (uint64_t)static NCProtoMemberAssociationPrimaryInfo.MemberAssociationType._protobuf_nameMap, a1);
}

unint64_t static NCProtoIDSProxyMessage.protoMessageName.getter()
{
  return 0xD000000000000017;
}

uint64_t static NCProtoIDSProxyMessage._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static NCProtoConversationAVMode._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static NCProtoIDSProxyMessage._protobuf_nameMap, a1);
}

uint64_t NCProtoIDSProxyMessage.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  char v10;

  v5 = v3;
  while (1)
  {
    result = dispatch thunk of Decoder.nextFieldNumber()();
    if (v4 || (v10 & 1) != 0)
      break;
    switch(result)
    {
      case 3:
        closure #3 in NCProtoIDSProxyMessage.decodeMessage<A>(decoder:)(v5, a1, a2, a3);
        break;
      case 2:
        closure #2 in NCProtoIDSProxyMessage.decodeMessage<A>(decoder:)(v5, a1, a2, a3);
        break;
      case 1:
        closure #1 in NCProtoIDSProxyMessage.decodeMessage<A>(decoder:)(v5, a1, a2, a3);
        break;
    }
  }
  return result;
}

uint64_t closure #1 in NCProtoIDSProxyMessage.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  uint64_t v18;
  _BYTE *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _BYTE *v24;
  void (*v25)(_BYTE *, uint64_t, uint64_t, uint64_t);
  int v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _BYTE *v33;
  _BYTE *v34;
  uint64_t v35;
  _BYTE v36[12];
  int v37;
  uint64_t v38;
  uint64_t v39;
  _BYTE *v40;
  _BYTE *v41;
  uint64_t v42;
  _BYTE *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;

  v46 = a3;
  v47 = a4;
  v48 = a2;
  v5 = type metadata accessor for NCProtoIDSProxyMessage.RawData(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = MEMORY[0x24BDAC7A8](v5);
  v40 = &v36[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x24BDAC7A8](v7);
  v43 = &v36[-v9];
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NCProtoIDSProxyMessage.OneOf_Message?);
  MEMORY[0x24BDAC7A8](v10);
  v12 = &v36[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v13 = type metadata accessor for NCProtoIDSProxyMessage.OneOf_Message(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = MEMORY[0x24BDAC7A8](v13);
  v17 = &v36[-((v16 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x24BDAC7A8](v15);
  v19 = &v36[-v18];
  v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NCProtoIDSProxyMessage.RawData?);
  v21 = MEMORY[0x24BDAC7A8](v20);
  v41 = &v36[-((v22 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x24BDAC7A8](v21);
  v24 = &v36[-v23];
  v42 = v6;
  v25 = *(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(v6 + 56);
  v44 = v5;
  v25(&v36[-v23], 1, 1, v5);
  v39 = a1;
  outlined init with copy of NCProtoContactInfo?(a1, (uint64_t)v12, &demangling cache variable for type metadata for NCProtoIDSProxyMessage.OneOf_Message?);
  v38 = v14;
  v26 = (*(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13);
  v27 = v26;
  if (v26 == 1)
  {
    outlined destroy of NCProtoContactInfo?((uint64_t)v12, &demangling cache variable for type metadata for NCProtoIDSProxyMessage.OneOf_Message?);
    v28 = v13;
    v30 = v44;
    v29 = v45;
  }
  else
  {
    v37 = v26;
    v31 = (uint64_t)v43;
    outlined init with take of NCProtoContactInfo((uint64_t)v12, (uint64_t)v19, type metadata accessor for NCProtoIDSProxyMessage.OneOf_Message);
    outlined init with take of NCProtoContactInfo((uint64_t)v19, (uint64_t)v17, type metadata accessor for NCProtoIDSProxyMessage.OneOf_Message);
    v28 = v13;
    if (swift_getEnumCaseMultiPayload())
    {
      outlined destroy of NCProtoContactInfo((uint64_t)v17, type metadata accessor for NCProtoIDSProxyMessage.OneOf_Message);
      v30 = v44;
      v29 = v45;
    }
    else
    {
      outlined destroy of NCProtoContactInfo?((uint64_t)v24, &demangling cache variable for type metadata for NCProtoIDSProxyMessage.RawData?);
      outlined init with take of NCProtoContactInfo((uint64_t)v17, v31, type metadata accessor for NCProtoIDSProxyMessage.RawData);
      outlined init with take of NCProtoContactInfo(v31, (uint64_t)v24, type metadata accessor for NCProtoIDSProxyMessage.RawData);
      v30 = v44;
      v25(v24, 0, 1, v44);
      v29 = v45;
    }
    v27 = v37;
  }
  lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoIDSProxyMessage.RawData and conformance NCProtoIDSProxyMessage.RawData, type metadata accessor for NCProtoIDSProxyMessage.RawData, (uint64_t)&protocol conformance descriptor for NCProtoIDSProxyMessage.RawData);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v29)
    return outlined destroy of NCProtoContactInfo?((uint64_t)v24, &demangling cache variable for type metadata for NCProtoIDSProxyMessage.RawData?);
  v33 = v41;
  outlined init with copy of NCProtoContactInfo?((uint64_t)v24, (uint64_t)v41, &demangling cache variable for type metadata for NCProtoIDSProxyMessage.RawData?);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v42 + 48))(v33, 1, v30) == 1)
  {
    outlined destroy of NCProtoContactInfo?((uint64_t)v24, &demangling cache variable for type metadata for NCProtoIDSProxyMessage.RawData?);
    return outlined destroy of NCProtoContactInfo?((uint64_t)v33, &demangling cache variable for type metadata for NCProtoIDSProxyMessage.RawData?);
  }
  else
  {
    v34 = v40;
    outlined init with take of NCProtoContactInfo((uint64_t)v33, (uint64_t)v40, type metadata accessor for NCProtoIDSProxyMessage.RawData);
    if (v27 != 1)
      dispatch thunk of Decoder.handleConflictingOneOf()();
    outlined destroy of NCProtoContactInfo?((uint64_t)v24, &demangling cache variable for type metadata for NCProtoIDSProxyMessage.RawData?);
    v35 = v39;
    outlined destroy of NCProtoContactInfo?(v39, &demangling cache variable for type metadata for NCProtoIDSProxyMessage.OneOf_Message?);
    outlined init with take of NCProtoContactInfo((uint64_t)v34, v35, type metadata accessor for NCProtoIDSProxyMessage.RawData);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v38 + 56))(v35, 0, 1, v28);
  }
}

uint64_t closure #2 in NCProtoIDSProxyMessage.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  uint64_t v18;
  _BYTE *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _BYTE *v24;
  void (*v25)(_BYTE *, uint64_t, uint64_t, uint64_t);
  int v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _BYTE *v33;
  _BYTE *v34;
  uint64_t v35;
  _BYTE v36[12];
  int v37;
  uint64_t v38;
  uint64_t v39;
  _BYTE *v40;
  _BYTE *v41;
  uint64_t v42;
  _BYTE *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;

  v46 = a3;
  v47 = a4;
  v48 = a2;
  v5 = type metadata accessor for NCProtoIDSProxyMessage.GroupUpdate(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = MEMORY[0x24BDAC7A8](v5);
  v40 = &v36[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x24BDAC7A8](v7);
  v43 = &v36[-v9];
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NCProtoIDSProxyMessage.OneOf_Message?);
  MEMORY[0x24BDAC7A8](v10);
  v12 = &v36[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v13 = type metadata accessor for NCProtoIDSProxyMessage.OneOf_Message(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = MEMORY[0x24BDAC7A8](v13);
  v17 = &v36[-((v16 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x24BDAC7A8](v15);
  v19 = &v36[-v18];
  v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NCProtoIDSProxyMessage.GroupUpdate?);
  v21 = MEMORY[0x24BDAC7A8](v20);
  v41 = &v36[-((v22 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x24BDAC7A8](v21);
  v24 = &v36[-v23];
  v42 = v6;
  v25 = *(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(v6 + 56);
  v44 = v5;
  v25(&v36[-v23], 1, 1, v5);
  v39 = a1;
  outlined init with copy of NCProtoContactInfo?(a1, (uint64_t)v12, &demangling cache variable for type metadata for NCProtoIDSProxyMessage.OneOf_Message?);
  v38 = v14;
  v26 = (*(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13);
  v27 = v26;
  if (v26 == 1)
  {
    outlined destroy of NCProtoContactInfo?((uint64_t)v12, &demangling cache variable for type metadata for NCProtoIDSProxyMessage.OneOf_Message?);
    v28 = v13;
    v30 = v44;
    v29 = v45;
  }
  else
  {
    v37 = v26;
    v31 = (uint64_t)v43;
    outlined init with take of NCProtoContactInfo((uint64_t)v12, (uint64_t)v19, type metadata accessor for NCProtoIDSProxyMessage.OneOf_Message);
    outlined init with take of NCProtoContactInfo((uint64_t)v19, (uint64_t)v17, type metadata accessor for NCProtoIDSProxyMessage.OneOf_Message);
    v28 = v13;
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      outlined destroy of NCProtoContactInfo?((uint64_t)v24, &demangling cache variable for type metadata for NCProtoIDSProxyMessage.GroupUpdate?);
      outlined init with take of NCProtoContactInfo((uint64_t)v17, v31, type metadata accessor for NCProtoIDSProxyMessage.GroupUpdate);
      outlined init with take of NCProtoContactInfo(v31, (uint64_t)v24, type metadata accessor for NCProtoIDSProxyMessage.GroupUpdate);
      v30 = v44;
      v25(v24, 0, 1, v44);
    }
    else
    {
      outlined destroy of NCProtoContactInfo((uint64_t)v17, type metadata accessor for NCProtoIDSProxyMessage.OneOf_Message);
      v30 = v44;
    }
    v29 = v45;
    v27 = v37;
  }
  lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoIDSProxyMessage.GroupUpdate and conformance NCProtoIDSProxyMessage.GroupUpdate, type metadata accessor for NCProtoIDSProxyMessage.GroupUpdate, (uint64_t)&protocol conformance descriptor for NCProtoIDSProxyMessage.GroupUpdate);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v29)
    return outlined destroy of NCProtoContactInfo?((uint64_t)v24, &demangling cache variable for type metadata for NCProtoIDSProxyMessage.GroupUpdate?);
  v33 = v41;
  outlined init with copy of NCProtoContactInfo?((uint64_t)v24, (uint64_t)v41, &demangling cache variable for type metadata for NCProtoIDSProxyMessage.GroupUpdate?);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v42 + 48))(v33, 1, v30) == 1)
  {
    outlined destroy of NCProtoContactInfo?((uint64_t)v24, &demangling cache variable for type metadata for NCProtoIDSProxyMessage.GroupUpdate?);
    return outlined destroy of NCProtoContactInfo?((uint64_t)v33, &demangling cache variable for type metadata for NCProtoIDSProxyMessage.GroupUpdate?);
  }
  else
  {
    v34 = v40;
    outlined init with take of NCProtoContactInfo((uint64_t)v33, (uint64_t)v40, type metadata accessor for NCProtoIDSProxyMessage.GroupUpdate);
    if (v27 != 1)
      dispatch thunk of Decoder.handleConflictingOneOf()();
    outlined destroy of NCProtoContactInfo?((uint64_t)v24, &demangling cache variable for type metadata for NCProtoIDSProxyMessage.GroupUpdate?);
    v35 = v39;
    outlined destroy of NCProtoContactInfo?(v39, &demangling cache variable for type metadata for NCProtoIDSProxyMessage.OneOf_Message?);
    outlined init with take of NCProtoContactInfo((uint64_t)v34, v35, type metadata accessor for NCProtoIDSProxyMessage.GroupUpdate);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v38 + 56))(v35, 0, 1, v28);
  }
}

uint64_t closure #3 in NCProtoIDSProxyMessage.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  uint64_t v18;
  _BYTE *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _BYTE *v24;
  void (*v25)(_BYTE *, uint64_t, uint64_t, uint64_t);
  int v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _BYTE *v33;
  _BYTE *v34;
  uint64_t v35;
  _BYTE v36[12];
  int v37;
  uint64_t v38;
  uint64_t v39;
  _BYTE *v40;
  _BYTE *v41;
  uint64_t v42;
  _BYTE *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;

  v46 = a3;
  v47 = a4;
  v48 = a2;
  v5 = type metadata accessor for NCProtoIDSProxyMessage.Resource(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = MEMORY[0x24BDAC7A8](v5);
  v40 = &v36[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x24BDAC7A8](v7);
  v43 = &v36[-v9];
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NCProtoIDSProxyMessage.OneOf_Message?);
  MEMORY[0x24BDAC7A8](v10);
  v12 = &v36[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v13 = type metadata accessor for NCProtoIDSProxyMessage.OneOf_Message(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = MEMORY[0x24BDAC7A8](v13);
  v17 = &v36[-((v16 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x24BDAC7A8](v15);
  v19 = &v36[-v18];
  v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NCProtoIDSProxyMessage.Resource?);
  v21 = MEMORY[0x24BDAC7A8](v20);
  v41 = &v36[-((v22 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x24BDAC7A8](v21);
  v24 = &v36[-v23];
  v42 = v6;
  v25 = *(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(v6 + 56);
  v44 = v5;
  v25(&v36[-v23], 1, 1, v5);
  v39 = a1;
  outlined init with copy of NCProtoContactInfo?(a1, (uint64_t)v12, &demangling cache variable for type metadata for NCProtoIDSProxyMessage.OneOf_Message?);
  v38 = v14;
  v26 = (*(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13);
  v27 = v26;
  if (v26 == 1)
  {
    outlined destroy of NCProtoContactInfo?((uint64_t)v12, &demangling cache variable for type metadata for NCProtoIDSProxyMessage.OneOf_Message?);
    v28 = v13;
    v30 = v44;
    v29 = v45;
  }
  else
  {
    v37 = v26;
    v31 = (uint64_t)v43;
    outlined init with take of NCProtoContactInfo((uint64_t)v12, (uint64_t)v19, type metadata accessor for NCProtoIDSProxyMessage.OneOf_Message);
    outlined init with take of NCProtoContactInfo((uint64_t)v19, (uint64_t)v17, type metadata accessor for NCProtoIDSProxyMessage.OneOf_Message);
    v28 = v13;
    if (swift_getEnumCaseMultiPayload() == 2)
    {
      outlined destroy of NCProtoContactInfo?((uint64_t)v24, &demangling cache variable for type metadata for NCProtoIDSProxyMessage.Resource?);
      outlined init with take of NCProtoContactInfo((uint64_t)v17, v31, type metadata accessor for NCProtoIDSProxyMessage.Resource);
      outlined init with take of NCProtoContactInfo(v31, (uint64_t)v24, type metadata accessor for NCProtoIDSProxyMessage.Resource);
      v30 = v44;
      v25(v24, 0, 1, v44);
    }
    else
    {
      outlined destroy of NCProtoContactInfo((uint64_t)v17, type metadata accessor for NCProtoIDSProxyMessage.OneOf_Message);
      v30 = v44;
    }
    v29 = v45;
    v27 = v37;
  }
  lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoIDSProxyMessage.Resource and conformance NCProtoIDSProxyMessage.Resource, type metadata accessor for NCProtoIDSProxyMessage.Resource, (uint64_t)&protocol conformance descriptor for NCProtoIDSProxyMessage.Resource);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v29)
    return outlined destroy of NCProtoContactInfo?((uint64_t)v24, &demangling cache variable for type metadata for NCProtoIDSProxyMessage.Resource?);
  v33 = v41;
  outlined init with copy of NCProtoContactInfo?((uint64_t)v24, (uint64_t)v41, &demangling cache variable for type metadata for NCProtoIDSProxyMessage.Resource?);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v42 + 48))(v33, 1, v30) == 1)
  {
    outlined destroy of NCProtoContactInfo?((uint64_t)v24, &demangling cache variable for type metadata for NCProtoIDSProxyMessage.Resource?);
    return outlined destroy of NCProtoContactInfo?((uint64_t)v33, &demangling cache variable for type metadata for NCProtoIDSProxyMessage.Resource?);
  }
  else
  {
    v34 = v40;
    outlined init with take of NCProtoContactInfo((uint64_t)v33, (uint64_t)v40, type metadata accessor for NCProtoIDSProxyMessage.Resource);
    if (v27 != 1)
      dispatch thunk of Decoder.handleConflictingOneOf()();
    outlined destroy of NCProtoContactInfo?((uint64_t)v24, &demangling cache variable for type metadata for NCProtoIDSProxyMessage.Resource?);
    v35 = v39;
    outlined destroy of NCProtoContactInfo?(v39, &demangling cache variable for type metadata for NCProtoIDSProxyMessage.OneOf_Message?);
    outlined init with take of NCProtoContactInfo((uint64_t)v34, v35, type metadata accessor for NCProtoIDSProxyMessage.Resource);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v38 + 56))(v35, 0, 1, v28);
  }
}

uint64_t NCProtoIDSProxyMessage.traverse<A>(visitor:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  int EnumCaseMultiPayload;
  uint64_t result;
  uint64_t v8;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NCProtoIDSProxyMessage.OneOf_Message?);
  MEMORY[0x24BDAC7A8](v2);
  v4 = (char *)&v8 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of NCProtoContactInfo?(v0, (uint64_t)v4, &demangling cache variable for type metadata for NCProtoIDSProxyMessage.OneOf_Message?);
  v5 = type metadata accessor for NCProtoIDSProxyMessage.OneOf_Message(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 48))(v4, 1, v5) == 1)
    goto LABEL_8;
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
      closure #2 in NCProtoIDSProxyMessage.traverse<A>(visitor:)(v0);
    else
      closure #3 in NCProtoIDSProxyMessage.traverse<A>(visitor:)(v0);
  }
  else
  {
    closure #1 in NCProtoIDSProxyMessage.traverse<A>(visitor:)(v0);
  }
  result = outlined destroy of NCProtoContactInfo((uint64_t)v4, type metadata accessor for NCProtoIDSProxyMessage.OneOf_Message);
  if (!v1)
  {
LABEL_8:
    type metadata accessor for NCProtoIDSProxyMessage(0);
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

uint64_t closure #1 in NCProtoIDSProxyMessage.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t result;
  _QWORD v10[2];

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NCProtoIDSProxyMessage.OneOf_Message?);
  MEMORY[0x24BDAC7A8](v2);
  v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for NCProtoIDSProxyMessage.RawData(0);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of NCProtoContactInfo?(a1, (uint64_t)v4, &demangling cache variable for type metadata for NCProtoIDSProxyMessage.OneOf_Message?);
  v8 = type metadata accessor for NCProtoIDSProxyMessage.OneOf_Message(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of NCProtoContactInfo?((uint64_t)v4, &demangling cache variable for type metadata for NCProtoIDSProxyMessage.OneOf_Message?);
    __break(1u);
  }
  else if (!swift_getEnumCaseMultiPayload())
  {
    outlined init with take of NCProtoContactInfo((uint64_t)v4, (uint64_t)v7, type metadata accessor for NCProtoIDSProxyMessage.RawData);
    lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoIDSProxyMessage.RawData and conformance NCProtoIDSProxyMessage.RawData, type metadata accessor for NCProtoIDSProxyMessage.RawData, (uint64_t)&protocol conformance descriptor for NCProtoIDSProxyMessage.RawData);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of NCProtoContactInfo((uint64_t)v7, type metadata accessor for NCProtoIDSProxyMessage.RawData);
  }
  result = outlined destroy of NCProtoContactInfo((uint64_t)v4, type metadata accessor for NCProtoIDSProxyMessage.OneOf_Message);
  __break(1u);
  return result;
}

uint64_t closure #2 in NCProtoIDSProxyMessage.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t result;
  _QWORD v10[2];

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NCProtoIDSProxyMessage.OneOf_Message?);
  MEMORY[0x24BDAC7A8](v2);
  v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for NCProtoIDSProxyMessage.GroupUpdate(0);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of NCProtoContactInfo?(a1, (uint64_t)v4, &demangling cache variable for type metadata for NCProtoIDSProxyMessage.OneOf_Message?);
  v8 = type metadata accessor for NCProtoIDSProxyMessage.OneOf_Message(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of NCProtoContactInfo?((uint64_t)v4, &demangling cache variable for type metadata for NCProtoIDSProxyMessage.OneOf_Message?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 1)
  {
    outlined init with take of NCProtoContactInfo((uint64_t)v4, (uint64_t)v7, type metadata accessor for NCProtoIDSProxyMessage.GroupUpdate);
    lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoIDSProxyMessage.GroupUpdate and conformance NCProtoIDSProxyMessage.GroupUpdate, type metadata accessor for NCProtoIDSProxyMessage.GroupUpdate, (uint64_t)&protocol conformance descriptor for NCProtoIDSProxyMessage.GroupUpdate);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of NCProtoContactInfo((uint64_t)v7, type metadata accessor for NCProtoIDSProxyMessage.GroupUpdate);
  }
  result = outlined destroy of NCProtoContactInfo((uint64_t)v4, type metadata accessor for NCProtoIDSProxyMessage.OneOf_Message);
  __break(1u);
  return result;
}

uint64_t closure #3 in NCProtoIDSProxyMessage.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t result;
  _QWORD v10[2];

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NCProtoIDSProxyMessage.OneOf_Message?);
  MEMORY[0x24BDAC7A8](v2);
  v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for NCProtoIDSProxyMessage.Resource(0);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of NCProtoContactInfo?(a1, (uint64_t)v4, &demangling cache variable for type metadata for NCProtoIDSProxyMessage.OneOf_Message?);
  v8 = type metadata accessor for NCProtoIDSProxyMessage.OneOf_Message(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of NCProtoContactInfo?((uint64_t)v4, &demangling cache variable for type metadata for NCProtoIDSProxyMessage.OneOf_Message?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 2)
  {
    outlined init with take of NCProtoContactInfo((uint64_t)v4, (uint64_t)v7, type metadata accessor for NCProtoIDSProxyMessage.Resource);
    lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoIDSProxyMessage.Resource and conformance NCProtoIDSProxyMessage.Resource, type metadata accessor for NCProtoIDSProxyMessage.Resource, (uint64_t)&protocol conformance descriptor for NCProtoIDSProxyMessage.Resource);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of NCProtoContactInfo((uint64_t)v7, type metadata accessor for NCProtoIDSProxyMessage.Resource);
  }
  result = outlined destroy of NCProtoContactInfo((uint64_t)v4, type metadata accessor for NCProtoIDSProxyMessage.OneOf_Message);
  __break(1u);
  return result;
}

Swift::Int NCProtoIDSProxyMessage.hashValue.getter()
{
  return NCProtoContactInfo.hashValue.getter(type metadata accessor for NCProtoIDSProxyMessage, &lazy protocol witness table cache variable for type NCProtoIDSProxyMessage and conformance NCProtoIDSProxyMessage, (uint64_t)&protocol conformance descriptor for NCProtoIDSProxyMessage);
}

uint64_t protocol witness for Message.init() in conformance NCProtoIDSProxyMessage@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;

  v2 = type metadata accessor for NCProtoIDSProxyMessage.OneOf_Message(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 56))(a1, 1, 1, v2);
  return UnknownStorage.init()();
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance NCProtoIDSProxyMessage()
{
  return 0xD000000000000017;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance NCProtoIDSProxyMessage(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return NCProtoIDSProxyMessage.decodeMessage<A>(decoder:)(a1, a2, a3);
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance NCProtoIDSProxyMessage()
{
  return NCProtoIDSProxyMessage.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance NCProtoIDSProxyMessage()
{
  lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoIDSProxyMessage and conformance NCProtoIDSProxyMessage, type metadata accessor for NCProtoIDSProxyMessage, (uint64_t)&protocol conformance descriptor for NCProtoIDSProxyMessage);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance NCProtoIDSProxyMessage@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance NCProtoConversationAVMode(&one-time initialization token for _protobuf_nameMap, (uint64_t)static NCProtoIDSProxyMessage._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance NCProtoIDSProxyMessage()
{
  lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoIDSProxyMessage and conformance NCProtoIDSProxyMessage, type metadata accessor for NCProtoIDSProxyMessage, (uint64_t)&protocol conformance descriptor for NCProtoIDSProxyMessage);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance NCProtoIDSProxyMessage()
{
  lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoIDSProxyMessage and conformance NCProtoIDSProxyMessage, type metadata accessor for NCProtoIDSProxyMessage, (uint64_t)&protocol conformance descriptor for NCProtoIDSProxyMessage);
  return Message.hash(into:)();
}

void one-time initialization function for protoMessageName(int a1)
{
  Swift::String v1;

  v1._countAndFlagsBits = 0x617461447761522ELL;
  v1._object = (void *)0xE800000000000000;
  one-time initialization function for protoMessageName(a1, v1, static NCProtoIDSProxyMessage.RawData.protoMessageName, &static NCProtoIDSProxyMessage.RawData.protoMessageName[1]);
}

{
  Swift::String v1;

  v1._countAndFlagsBits = 0x6372756F7365522ELL;
  v1._object = (void *)0xE900000000000065;
  one-time initialization function for protoMessageName(a1, v1, static NCProtoIDSProxyMessage.Resource.protoMessageName, &static NCProtoIDSProxyMessage.Resource.protoMessageName[1]);
}

{
  Swift::String v1;

  v1._countAndFlagsBits = 0x705570756F72472ELL;
  v1._object = (void *)0xEC00000065746164;
  one-time initialization function for protoMessageName(a1, v1, static NCProtoIDSProxyMessage.GroupUpdate.protoMessageName, &static NCProtoIDSProxyMessage.GroupUpdate.protoMessageName[1]);
}

{
  Swift::String v1;

  v1._object = (void *)0x8000000242A39510;
  v1._countAndFlagsBits = 0xD000000000000012;
  one-time initialization function for protoMessageName(a1, v1, static NCProtoIDSProxyMessage.ParticipantIDList.protoMessageName, &static NCProtoIDSProxyMessage.ParticipantIDList.protoMessageName[1]);
}

uint64_t static NCProtoIDSProxyMessage.RawData.protoMessageName.getter()
{
  return static NCProtoIDSProxyMessage.RawData.protoMessageName.getter(&one-time initialization token for protoMessageName, static NCProtoIDSProxyMessage.RawData.protoMessageName);
}

uint64_t static NCProtoIDSProxyMessage.RawData._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static NCProtoConversationAVMode._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static NCProtoIDSProxyMessage.RawData._protobuf_nameMap, a1);
}

uint64_t NCProtoIDSProxyMessage.RawData.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return NCProtoJoinEvent.decodeMessage<A>(decoder:)(a1, a2, a3, (void (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BE5C120], (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))closure #3 in NCProtoIDSProxyMessage.RawData.decodeMessage<A>(decoder:));
}

uint64_t NCProtoJoinEvent.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t, uint64_t, uint64_t), void (*a5)(uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v9;
  uint64_t result;
  char v14;

  v9 = v5;
  result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v6)
  {
    while ((v14 & 1) == 0)
    {
      switch(result)
      {
        case 3:
          a5(a1, v9, a2, a3);
          break;
        case 2:
          a4(v9 + 16, a2, a3);
          break;
        case 1:
          dispatch thunk of Decoder.decodeSingularBytesField(value:)();
          break;
      }
      result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t closure #3 in NCProtoIDSProxyMessage.RawData.decodeMessage<A>(decoder:)()
{
  uint64_t (*v0)(uint64_t);

  type metadata accessor for ProtobufString();
  type metadata accessor for Google_Protobuf_Value();
  v0 = (uint64_t (*)(uint64_t))MEMORY[0x24BE5BE08];
  lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type Google_Protobuf_Value and conformance Google_Protobuf_Value, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BE08], MEMORY[0x24BE5BE00]);
  lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type Google_Protobuf_Value and conformance Google_Protobuf_Value, v0, MEMORY[0x24BE5BE18]);
  return dispatch thunk of Decoder.decodeMapField<A, B>(fieldType:value:)();
}

void NCProtoIDSProxyMessage.RawData.traverse<A>(visitor:)()
{
  __asm { BR              X10 }
}

uint64_t sub_242A09A18(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t result;
  unint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(uint64_t);

  if ((a2 & 0xFF000000000000) == 0
    || (result = dispatch thunk of Visitor.visitSingularBytesField(value:fieldNumber:)(), !v2))
  {
    v5 = v3[3];
    v6 = HIBYTE(v5) & 0xF;
    if ((v5 & 0x2000000000000000) == 0)
      v6 = v3[2] & 0xFFFFFFFFFFFFLL;
    if (!v6 || (result = dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(), !v2))
    {
      if (!*(_QWORD *)(v3[4] + 16)
        || (type metadata accessor for ProtobufString(),
            type metadata accessor for Google_Protobuf_Value(),
            v7 = (uint64_t (*)(uint64_t))MEMORY[0x24BE5BE08],
            lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type Google_Protobuf_Value and conformance Google_Protobuf_Value, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BE08], MEMORY[0x24BE5BE00]), lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type Google_Protobuf_Value and conformance Google_Protobuf_Value, v7, MEMORY[0x24BE5BE18]), result = dispatch thunk of Visitor.visitMapField<A, B>(fieldType:value:fieldNumber:)(), !v2))
      {
        type metadata accessor for NCProtoIDSProxyMessage.RawData(0);
        return UnknownStorage.traverse<A>(visitor:)();
      }
    }
  }
  return result;
}

Swift::Int NCProtoIDSProxyMessage.RawData.hashValue.getter()
{
  return NCProtoContactInfo.hashValue.getter(type metadata accessor for NCProtoIDSProxyMessage.RawData, &lazy protocol witness table cache variable for type NCProtoIDSProxyMessage.RawData and conformance NCProtoIDSProxyMessage.RawData, (uint64_t)&protocol conformance descriptor for NCProtoIDSProxyMessage.RawData);
}

uint64_t protocol witness for Message.init() in conformance NCProtoIDSProxyMessage.RawData@<X0>(uint64_t a1@<X8>)
{
  *(_OWORD *)a1 = xmmword_242A30CB0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0xE000000000000000;
  *(_QWORD *)(a1 + 32) = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
  return UnknownStorage.init()();
}

uint64_t protocol witness for static Message.protoMessageName.getter in conformance NCProtoIDSProxyMessage.RawData(uint64_t a1, uint64_t a2)
{
  return protocol witness for static Message.protoMessageName.getter in conformance NCProtoIDSProxyMessage.RawData(a1, a2, &one-time initialization token for protoMessageName, static NCProtoIDSProxyMessage.RawData.protoMessageName);
}

uint64_t protocol witness for Message.unknownFields.getter in conformance NCProtoContinuityFavorite@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = v2 + *(int *)(a1 + 28);
  v5 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, v4, v5);
}

uint64_t protocol witness for Message.unknownFields.setter in conformance NCProtoContinuityFavorite(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = v2 + *(int *)(a2 + 28);
  v5 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 40))(v4, a1, v5);
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance NCProtoIDSProxyMessage.RawData(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return NCProtoIDSProxyMessage.RawData.decodeMessage<A>(decoder:)(a1, a2, a3);
}

void protocol witness for Message.traverse<A>(visitor:) in conformance NCProtoIDSProxyMessage.RawData()
{
  NCProtoIDSProxyMessage.RawData.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance NCProtoIDSProxyMessage.RawData()
{
  lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoIDSProxyMessage.RawData and conformance NCProtoIDSProxyMessage.RawData, type metadata accessor for NCProtoIDSProxyMessage.RawData, (uint64_t)&protocol conformance descriptor for NCProtoIDSProxyMessage.RawData);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance NCProtoIDSProxyMessage.RawData@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance NCProtoConversationAVMode(&one-time initialization token for _protobuf_nameMap, (uint64_t)static NCProtoIDSProxyMessage.RawData._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance NCProtoIDSProxyMessage.RawData()
{
  lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoIDSProxyMessage.RawData and conformance NCProtoIDSProxyMessage.RawData, type metadata accessor for NCProtoIDSProxyMessage.RawData, (uint64_t)&protocol conformance descriptor for NCProtoIDSProxyMessage.RawData);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance NCProtoIDSProxyMessage.RawData()
{
  lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoIDSProxyMessage.RawData and conformance NCProtoIDSProxyMessage.RawData, type metadata accessor for NCProtoIDSProxyMessage.RawData, (uint64_t)&protocol conformance descriptor for NCProtoIDSProxyMessage.RawData);
  return Message.hash(into:)();
}

uint64_t static NCProtoIDSProxyMessage.Resource.protoMessageName.getter()
{
  return static NCProtoIDSProxyMessage.RawData.protoMessageName.getter(&one-time initialization token for protoMessageName, static NCProtoIDSProxyMessage.Resource.protoMessageName);
}

uint64_t static NCProtoIDSProxyMessage.RawData.protoMessageName.getter(_QWORD *a1, uint64_t *a2)
{
  uint64_t v3;

  if (*a1 != -1)
    swift_once();
  v3 = *a2;
  swift_bridgeObjectRetain();
  return v3;
}

uint64_t static NCProtoIDSProxyMessage.Resource._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static NCProtoConversationAVMode._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static NCProtoIDSProxyMessage.Resource._protobuf_nameMap, a1);
}

uint64_t NCProtoIDSProxyMessage.Resource.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t result;
  char v2;

  result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
        case 2:
          dispatch thunk of Decoder.decodeSingularBytesField(value:)();
          break;
        case 3:
          dispatch thunk of Decoder.decodeSingularStringField(value:)();
          break;
        case 4:
          closure #4 in NCProtoIDSProxyMessage.Resource.decodeMessage<A>(decoder:)();
          break;
        default:
          break;
      }
      result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t closure #4 in NCProtoIDSProxyMessage.Resource.decodeMessage<A>(decoder:)()
{
  uint64_t (*v0)(uint64_t);

  type metadata accessor for ProtobufString();
  type metadata accessor for Google_Protobuf_Value();
  v0 = (uint64_t (*)(uint64_t))MEMORY[0x24BE5BE08];
  lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type Google_Protobuf_Value and conformance Google_Protobuf_Value, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BE08], MEMORY[0x24BE5BE00]);
  lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type Google_Protobuf_Value and conformance Google_Protobuf_Value, v0, MEMORY[0x24BE5BE18]);
  return dispatch thunk of Decoder.decodeMapField<A, B>(fieldType:value:)();
}

void NCProtoIDSProxyMessage.Resource.traverse<A>(visitor:)()
{
  __asm { BR              X10 }
}

uint64_t sub_242A0A230(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  if ((a2 & 0xFF000000000000) == 0
    || (result = dispatch thunk of Visitor.visitSingularBytesField(value:fieldNumber:)(), !v2))
  {
    __asm { BR              X10 }
  }
  return result;
}

Swift::Int NCProtoIDSProxyMessage.Resource.hashValue.getter()
{
  return NCProtoContactInfo.hashValue.getter(type metadata accessor for NCProtoIDSProxyMessage.Resource, &lazy protocol witness table cache variable for type NCProtoIDSProxyMessage.Resource and conformance NCProtoIDSProxyMessage.Resource, (uint64_t)&protocol conformance descriptor for NCProtoIDSProxyMessage.Resource);
}

uint64_t protocol witness for Message.init() in conformance NCProtoIDSProxyMessage.Resource@<X0>(uint64_t a1@<X8>)
{
  *(_OWORD *)a1 = xmmword_242A30CB0;
  *(_OWORD *)(a1 + 16) = xmmword_242A30CB0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0xE000000000000000;
  *(_QWORD *)(a1 + 48) = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
  return UnknownStorage.init()();
}

uint64_t protocol witness for static Message.protoMessageName.getter in conformance NCProtoIDSProxyMessage.Resource(uint64_t a1, uint64_t a2)
{
  return protocol witness for static Message.protoMessageName.getter in conformance NCProtoIDSProxyMessage.RawData(a1, a2, &one-time initialization token for protoMessageName, static NCProtoIDSProxyMessage.Resource.protoMessageName);
}

uint64_t protocol witness for static Message.protoMessageName.getter in conformance NCProtoIDSProxyMessage.RawData(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4)
{
  uint64_t v5;

  if (*a3 != -1)
    swift_once();
  v5 = *a4;
  swift_bridgeObjectRetain();
  return v5;
}

uint64_t protocol witness for Message.unknownFields.getter in conformance NCProtoContactHandleAnonym@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = v2 + *(int *)(a1 + 32);
  v5 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, v4, v5);
}

uint64_t protocol witness for Message.unknownFields.setter in conformance NCProtoContactHandleAnonym(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = v2 + *(int *)(a2 + 32);
  v5 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 40))(v4, a1, v5);
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance NCProtoIDSProxyMessage.Resource()
{
  return NCProtoIDSProxyMessage.Resource.decodeMessage<A>(decoder:)();
}

void protocol witness for Message.traverse<A>(visitor:) in conformance NCProtoIDSProxyMessage.Resource()
{
  NCProtoIDSProxyMessage.Resource.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance NCProtoIDSProxyMessage.Resource()
{
  lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoIDSProxyMessage.Resource and conformance NCProtoIDSProxyMessage.Resource, type metadata accessor for NCProtoIDSProxyMessage.Resource, (uint64_t)&protocol conformance descriptor for NCProtoIDSProxyMessage.Resource);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance NCProtoIDSProxyMessage.Resource@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance NCProtoConversationAVMode(&one-time initialization token for _protobuf_nameMap, (uint64_t)static NCProtoIDSProxyMessage.Resource._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance NCProtoIDSProxyMessage.Resource()
{
  lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoIDSProxyMessage.Resource and conformance NCProtoIDSProxyMessage.Resource, type metadata accessor for NCProtoIDSProxyMessage.Resource, (uint64_t)&protocol conformance descriptor for NCProtoIDSProxyMessage.Resource);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance NCProtoIDSProxyMessage.Resource()
{
  lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoIDSProxyMessage.Resource and conformance NCProtoIDSProxyMessage.Resource, type metadata accessor for NCProtoIDSProxyMessage.Resource, (uint64_t)&protocol conformance descriptor for NCProtoIDSProxyMessage.Resource);
  return Message.hash(into:)();
}

uint64_t static NCProtoIDSProxyMessage.GroupUpdate.protoMessageName.getter()
{
  return static NCProtoIDSProxyMessage.RawData.protoMessageName.getter(&one-time initialization token for protoMessageName, static NCProtoIDSProxyMessage.GroupUpdate.protoMessageName);
}

uint64_t static NCProtoIDSProxyMessage.GroupUpdate._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static NCProtoConversationAVMode._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static NCProtoIDSProxyMessage.GroupUpdate._protobuf_nameMap, a1);
}

uint64_t NCProtoIDSProxyMessage.GroupUpdate.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t result;
  char v2;

  result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
        case 7:
          dispatch thunk of Decoder.decodeSingularBoolField(value:)();
          break;
        case 2:
        case 4:
        case 13:
          dispatch thunk of Decoder.decodeSingularStringField(value:)();
          break;
        case 3:
        case 5:
        case 6:
          dispatch thunk of Decoder.decodeSingularUInt64Field(value:)();
          break;
        case 8:
          dispatch thunk of Decoder.decodeSingularDoubleField(value:)();
          break;
        case 9:
        case 10:
          dispatch thunk of Decoder.decodeSingularBytesField(value:)();
          break;
        case 11:
          dispatch thunk of Decoder.decodeRepeatedStringField(value:)();
          break;
        case 12:
          closure #12 in NCProtoIDSProxyMessage.GroupUpdate.decodeMessage<A>(decoder:)();
          break;
        default:
          break;
      }
      result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t closure #12 in NCProtoIDSProxyMessage.GroupUpdate.decodeMessage<A>(decoder:)()
{
  type metadata accessor for ProtobufString();
  type metadata accessor for NCProtoIDSProxyMessage.ParticipantIDList(0);
  lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoIDSProxyMessage.ParticipantIDList and conformance NCProtoIDSProxyMessage.ParticipantIDList, type metadata accessor for NCProtoIDSProxyMessage.ParticipantIDList, (uint64_t)&protocol conformance descriptor for NCProtoIDSProxyMessage.ParticipantIDList);
  lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoIDSProxyMessage.ParticipantIDList and conformance NCProtoIDSProxyMessage.ParticipantIDList, type metadata accessor for NCProtoIDSProxyMessage.ParticipantIDList, (uint64_t)&protocol conformance descriptor for NCProtoIDSProxyMessage.ParticipantIDList);
  return dispatch thunk of Decoder.decodeMapField<A, B>(fieldType:value:)();
}

uint64_t NCProtoIDSProxyMessage.GroupUpdate.traverse<A>(visitor:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;

  if (*(_BYTE *)v0 != 1 || (result = dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(), !v1))
  {
    v3 = *(_QWORD *)(v0 + 16);
    v4 = HIBYTE(v3) & 0xF;
    if ((v3 & 0x2000000000000000) == 0)
      v4 = *(_QWORD *)(v0 + 8) & 0xFFFFFFFFFFFFLL;
    if (!v4 || (result = dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(), !v1))
    {
      if (!*(_QWORD *)(v0 + 24)
        || (result = dispatch thunk of Visitor.visitSingularUInt64Field(value:fieldNumber:)(), !v1))
      {
        v5 = *(_QWORD *)(v0 + 40);
        v6 = HIBYTE(v5) & 0xF;
        if ((v5 & 0x2000000000000000) == 0)
          v6 = *(_QWORD *)(v0 + 32) & 0xFFFFFFFFFFFFLL;
        if (!v6 || (result = dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(), !v1))
        {
          if (!*(_QWORD *)(v0 + 48)
            || (result = dispatch thunk of Visitor.visitSingularUInt64Field(value:fieldNumber:)(), !v1))
          {
            if (!*(_QWORD *)(v0 + 56)
              || (result = dispatch thunk of Visitor.visitSingularUInt64Field(value:fieldNumber:)(), !v1))
            {
              if (*(_BYTE *)(v0 + 64) != 1
                || (result = dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(), !v1))
              {
                if (*(double *)(v0 + 72) == 0.0
                  || (result = dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)(), !v1))
                {
                  __asm { BR              X10 }
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

Swift::Int NCProtoIDSProxyMessage.GroupUpdate.hashValue.getter()
{
  return NCProtoContactInfo.hashValue.getter(type metadata accessor for NCProtoIDSProxyMessage.GroupUpdate, &lazy protocol witness table cache variable for type NCProtoIDSProxyMessage.GroupUpdate and conformance NCProtoIDSProxyMessage.GroupUpdate, (uint64_t)&protocol conformance descriptor for NCProtoIDSProxyMessage.GroupUpdate);
}

uint64_t protocol witness for Message.init() in conformance NCProtoIDSProxyMessage.GroupUpdate@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;

  *(_BYTE *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0xE000000000000000;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 40) = 0xE000000000000000;
  *(_BYTE *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_OWORD *)(a1 + 88) = xmmword_242A30CD0;
  v2 = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(a1 + 104) = 0xC000000000000000;
  *(_QWORD *)(a1 + 112) = v2;
  *(_QWORD *)(a1 + 120) = specialized Dictionary.init(dictionaryLiteral:)(v2, &demangling cache variable for type metadata for (String, NCProtoIDSProxyMessage.ParticipantIDList), &demangling cache variable for type metadata for _DictionaryStorage<String, NCProtoIDSProxyMessage.ParticipantIDList>, type metadata accessor for NCProtoIDSProxyMessage.ParticipantIDList);
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 136) = 0xE000000000000000;
  return UnknownStorage.init()();
}

uint64_t protocol witness for static Message.protoMessageName.getter in conformance NCProtoIDSProxyMessage.GroupUpdate(uint64_t a1, uint64_t a2)
{
  return protocol witness for static Message.protoMessageName.getter in conformance NCProtoIDSProxyMessage.RawData(a1, a2, &one-time initialization token for protoMessageName, static NCProtoIDSProxyMessage.GroupUpdate.protoMessageName);
}

uint64_t protocol witness for Message.unknownFields.getter in conformance NCProtoIDSProxyMessage.GroupUpdate@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = v2 + *(int *)(a1 + 68);
  v5 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, v4, v5);
}

uint64_t protocol witness for Message.unknownFields.setter in conformance NCProtoIDSProxyMessage.GroupUpdate(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = v2 + *(int *)(a2 + 68);
  v5 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 40))(v4, a1, v5);
}

uint64_t (*protocol witness for Message.unknownFields.modify in conformance NCProtoIDSProxyMessage.GroupUpdate())()
{
  return NCProtoContactInfo.namePrefix.modify;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance NCProtoIDSProxyMessage.GroupUpdate()
{
  return NCProtoIDSProxyMessage.GroupUpdate.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance NCProtoIDSProxyMessage.GroupUpdate()
{
  return NCProtoIDSProxyMessage.GroupUpdate.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance NCProtoIDSProxyMessage.GroupUpdate()
{
  lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoIDSProxyMessage.GroupUpdate and conformance NCProtoIDSProxyMessage.GroupUpdate, type metadata accessor for NCProtoIDSProxyMessage.GroupUpdate, (uint64_t)&protocol conformance descriptor for NCProtoIDSProxyMessage.GroupUpdate);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance NCProtoIDSProxyMessage.GroupUpdate@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance NCProtoConversationAVMode(&one-time initialization token for _protobuf_nameMap, (uint64_t)static NCProtoIDSProxyMessage.GroupUpdate._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance NCProtoIDSProxyMessage.GroupUpdate()
{
  lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoIDSProxyMessage.GroupUpdate and conformance NCProtoIDSProxyMessage.GroupUpdate, type metadata accessor for NCProtoIDSProxyMessage.GroupUpdate, (uint64_t)&protocol conformance descriptor for NCProtoIDSProxyMessage.GroupUpdate);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance NCProtoIDSProxyMessage.GroupUpdate()
{
  lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoIDSProxyMessage.GroupUpdate and conformance NCProtoIDSProxyMessage.GroupUpdate, type metadata accessor for NCProtoIDSProxyMessage.GroupUpdate, (uint64_t)&protocol conformance descriptor for NCProtoIDSProxyMessage.GroupUpdate);
  return Message.hash(into:)();
}

void one-time initialization function for protoMessageName(int a1, Swift::String a2, _QWORD *a3, _QWORD *a4)
{
  String.append(_:)(a2);
  *a3 = 0xD000000000000017;
  *a4 = 0x8000000242A394E0;
}

uint64_t static NCProtoIDSProxyMessage.ParticipantIDList.protoMessageName.getter()
{
  return static NCProtoIDSProxyMessage.RawData.protoMessageName.getter(&one-time initialization token for protoMessageName, static NCProtoIDSProxyMessage.ParticipantIDList.protoMessageName);
}

uint64_t one-time initialization function for _protobuf_nameMap(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v7 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v7, a2);
  __swift_project_value_buffer(v7, (uint64_t)a2);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v9 = *(unsigned __int8 *)(*(_QWORD *)(v8 - 8) + 80);
  v10 = (v9 + 32) & ~v9;
  v11 = swift_allocObject();
  *(_OWORD *)(v11 + 16) = xmmword_242A30D60;
  v12 = v11 + v10 + *(int *)(v8 + 48);
  *(_QWORD *)(v11 + v10) = 1;
  *(_QWORD *)v12 = a3;
  *(_QWORD *)(v12 + 8) = a4;
  *(_BYTE *)(v12 + 16) = 2;
  v13 = *MEMORY[0x24BE5C318];
  v14 = type metadata accessor for _NameMap.NameDescription();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 104))(v12, v13, v14);
  return _NameMap.init(dictionaryLiteral:)();
}

uint64_t static NCProtoIDSProxyMessage.ParticipantIDList._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static NCProtoConversationAVMode._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static NCProtoIDSProxyMessage.ParticipantIDList._protobuf_nameMap, a1);
}

uint64_t NCProtoIDSProxyMessage.ParticipantIDList.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return NCProtoEndedSessionEvent.decodeMessage<A>(decoder:)(a1, a2, a3, MEMORY[0x24BE5C0F8]);
}

uint64_t NCProtoIDSProxyMessage.ParticipantIDList.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return NCProtoAddConversationParticipantsRequest.traverse<A>(visitor:)(a1, a2, a3, MEMORY[0x24BE5C260], (void (*)(_QWORD))type metadata accessor for NCProtoIDSProxyMessage.ParticipantIDList);
}

uint64_t NCProtoAddConversationParticipantsRequest.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void), void (*a5)(_QWORD))
{
  uint64_t v5;
  uint64_t v6;
  uint64_t result;

  if (!*(_QWORD *)(*(_QWORD *)v5 + 16) || (result = a4(), !v6))
  {
    a5(0);
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

uint64_t static NCProtoIDSProxyMessage.ParticipantIDList.== infix(_:_:)(_QWORD *a1, char *a2)
{
  return specialized static NCProtoAddConversationParticipantsRequest.== infix(_:_:)(a1, a2, (uint64_t (*)(_QWORD, _QWORD))specialized static Array<A>.== infix(_:_:), type metadata accessor for NCProtoIDSProxyMessage.ParticipantIDList) & 1;
}

Swift::Int NCProtoIDSProxyMessage.ParticipantIDList.hashValue.getter()
{
  return NCProtoContactInfo.hashValue.getter(type metadata accessor for NCProtoIDSProxyMessage.ParticipantIDList, &lazy protocol witness table cache variable for type NCProtoIDSProxyMessage.ParticipantIDList and conformance NCProtoIDSProxyMessage.ParticipantIDList, (uint64_t)&protocol conformance descriptor for NCProtoIDSProxyMessage.ParticipantIDList);
}

Swift::Int NCProtoContactInfo.hashValue.getter(uint64_t (*a1)(uint64_t), unint64_t *a2, uint64_t a3)
{
  Hasher.init(_seed:)();
  a1(0);
  lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(a2, a1, a3);
  dispatch thunk of Hashable.hash(into:)();
  return Hasher._finalize()();
}

uint64_t protocol witness for Message.init() in conformance NCProtoIDSProxyMessage.ParticipantIDList@<X0>(_QWORD *a1@<X8>)
{
  *a1 = MEMORY[0x24BEE4AF8];
  return UnknownStorage.init()();
}

uint64_t protocol witness for static Message.protoMessageName.getter in conformance NCProtoIDSProxyMessage.ParticipantIDList(uint64_t a1, uint64_t a2)
{
  return protocol witness for static Message.protoMessageName.getter in conformance NCProtoIDSProxyMessage.RawData(a1, a2, &one-time initialization token for protoMessageName, static NCProtoIDSProxyMessage.ParticipantIDList.protoMessageName);
}

uint64_t protocol witness for Message.unknownFields.getter in conformance NCProtoActiveConversation@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = v2 + *(int *)(a1 + 20);
  v5 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, v4, v5);
}

uint64_t protocol witness for Message.unknownFields.setter in conformance NCProtoActiveConversation(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = v2 + *(int *)(a2 + 20);
  v5 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 40))(v4, a1, v5);
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance NCProtoIDSProxyMessage.ParticipantIDList(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return NCProtoIDSProxyMessage.ParticipantIDList.decodeMessage<A>(decoder:)(a1, a2, a3);
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance NCProtoIDSProxyMessage.ParticipantIDList(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return NCProtoIDSProxyMessage.ParticipantIDList.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance NCProtoIDSProxyMessage.ParticipantIDList()
{
  lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoIDSProxyMessage.ParticipantIDList and conformance NCProtoIDSProxyMessage.ParticipantIDList, type metadata accessor for NCProtoIDSProxyMessage.ParticipantIDList, (uint64_t)&protocol conformance descriptor for NCProtoIDSProxyMessage.ParticipantIDList);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance NCProtoIDSProxyMessage.ParticipantIDList@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance NCProtoConversationAVMode(&one-time initialization token for _protobuf_nameMap, (uint64_t)static NCProtoIDSProxyMessage.ParticipantIDList._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance NCProtoIDSProxyMessage.ParticipantIDList()
{
  lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoIDSProxyMessage.ParticipantIDList and conformance NCProtoIDSProxyMessage.ParticipantIDList, type metadata accessor for NCProtoIDSProxyMessage.ParticipantIDList, (uint64_t)&protocol conformance descriptor for NCProtoIDSProxyMessage.ParticipantIDList);
  return Message.debugDescription.getter();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance NCProtoContactInfo()
{
  Hasher.init(_seed:)();
  dispatch thunk of Hashable.hash(into:)();
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance NCProtoIDSProxyMessage.ParticipantIDList()
{
  lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoIDSProxyMessage.ParticipantIDList and conformance NCProtoIDSProxyMessage.ParticipantIDList, type metadata accessor for NCProtoIDSProxyMessage.ParticipantIDList, (uint64_t)&protocol conformance descriptor for NCProtoIDSProxyMessage.ParticipantIDList);
  return Message.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance NCProtoContactInfo()
{
  Hasher.init(_seed:)();
  dispatch thunk of Hashable.hash(into:)();
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance NCProtoIDSProxyMessage.ParticipantIDList(_QWORD *a1, char *a2)
{
  return specialized static NCProtoAddConversationParticipantsRequest.== infix(_:_:)(a1, a2, (uint64_t (*)(_QWORD, _QWORD))specialized static Array<A>.== infix(_:_:), type metadata accessor for NCProtoIDSProxyMessage.ParticipantIDList) & 1;
}

uint64_t specialized static Dictionary<>.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  BOOL v33;
  uint64_t result;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  char v40;
  char v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  int64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  _BOOL4 v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  uint64_t v57;

  v57 = *MEMORY[0x24BDAC8D0];
  v4 = type metadata accessor for NCProtoContactInfo(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)&v44 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v10 = (uint64_t *)((char *)&v44 - v9);
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: String, value: NCProtoContactInfo)?);
  v12 = MEMORY[0x24BDAC7A8](v11);
  v14 = (uint64_t *)((char *)&v44 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x24BDAC7A8](v12);
  v16 = (uint64_t *)((char *)&v44 - v15);
  if (a1 == a2)
    return 1;
  if (*(_QWORD *)(a1 + 16) != *(_QWORD *)(a2 + 16))
    return 0;
  v49 = a2;
  v50 = v5;
  v17 = *(_QWORD *)(a1 + 64);
  v45 = (_QWORD *)(a1 + 64);
  v18 = 1 << *(_BYTE *)(a1 + 32);
  v19 = -1;
  if (v18 < 64)
    v19 = ~(-1 << v18);
  v20 = v19 & v17;
  v46 = (unint64_t)(v18 + 63) >> 6;
  v47 = 0;
  v44 = v46 - 1;
  v51 = v8;
  v52 = v4;
  v56 = v14;
  v48 = a1;
  if (!v20)
  {
    v29 = 1;
    v22 = v50;
    if (v46 <= 1)
    {
      v54 = 0;
    }
    else
    {
      v30 = v45[1];
      if (v30)
      {
LABEL_10:
        v54 = v29;
        v55 = (v30 - 1) & v30;
        v21 = __clz(__rbit64(v30)) + (v29 << 6);
        goto LABEL_7;
      }
      v43 = 2;
      if (v46 <= 2)
      {
        v54 = 1;
      }
      else
      {
        v30 = v45[2];
        if (v30)
        {
LABEL_36:
          v29 = v43;
          goto LABEL_10;
        }
        if (v46 <= 3)
        {
          v54 = 2;
        }
        else
        {
          v30 = v45[3];
          if (v30)
          {
            v29 = 3;
            goto LABEL_10;
          }
          v43 = 4;
          if (v46 <= 4)
          {
            v54 = 3;
          }
          else
          {
            v30 = v45[4];
            if (v30)
              goto LABEL_36;
            while (1)
            {
              v29 = v43 + 1;
              if (__OFADD__(v43, 1))
                __break(1u);
              if (v29 >= v46)
                break;
              v30 = v45[v29];
              ++v43;
              if (v30)
                goto LABEL_10;
            }
            v54 = v44;
          }
        }
      }
    }
    v31 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: String, value: NCProtoContactInfo));
    (*(void (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v31 - 8) + 56))(v14, 1, 1, v31);
    v55 = 0;
    goto LABEL_13;
  }
  v54 = 0;
  v55 = (v20 - 1) & v20;
  v21 = __clz(__rbit64(v20));
  v22 = v50;
LABEL_7:
  v23 = (uint64_t *)(*(_QWORD *)(a1 + 48) + 16 * v21);
  v25 = *v23;
  v24 = v23[1];
  v26 = *(_QWORD *)(a1 + 56) + *(_QWORD *)(v22 + 72) * v21;
  v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: String, value: NCProtoContactInfo));
  v28 = v26;
  v14 = v56;
  outlined init with copy of NCProtoContactInfo(v28, (uint64_t)v56 + *(int *)(v27 + 48), type metadata accessor for NCProtoContactInfo);
  *v14 = v25;
  v14[1] = v24;
  (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 56))(v14, 0, 1, v27);
  swift_bridgeObjectRetain();
LABEL_13:
  outlined init with take of (key: String, value: NCProtoCallInfo)?((uint64_t)v14, (uint64_t)v16, &demangling cache variable for type metadata for (key: String, value: NCProtoContactInfo)?);
  v32 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: String, value: NCProtoContactInfo));
  v33 = (*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(v32 - 8) + 48))(v16, 1, v32) == 1;
  result = v33;
  if (v33)
    return result;
  v53 = v33;
  v35 = (uint64_t)v16 + *(int *)(v32 + 48);
  v36 = *v16;
  v37 = v16[1];
  outlined init with take of NCProtoContactInfo(v35, (uint64_t)v10, type metadata accessor for NCProtoContactInfo);
  v38 = v49;
  v39 = specialized __RawDictionaryStorage.find<A>(_:)(v36, v37);
  v41 = v40;
  swift_bridgeObjectRelease();
  if ((v41 & 1) != 0)
  {
    v42 = v51;
    outlined init with copy of NCProtoContactInfo(*(_QWORD *)(v38 + 56) + *(_QWORD *)(v22 + 72) * v39, (uint64_t)v51, type metadata accessor for NCProtoContactInfo);
    if ((*v42 == *v10 && v42[1] == v10[1] || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      && (v42[2] == v10[2] && v42[3] == v10[3] || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      && (v42[4] == v10[4] && v42[5] == v10[5] || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      && (v42[6] == v10[6] && v42[7] == v10[7] || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      && (v42[8] == v10[8] && v42[9] == v10[9] || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      && (v42[10] == v10[10] && v42[11] == v10[11] || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
    {
      __asm { BR              X10 }
    }
    outlined destroy of NCProtoContactInfo((uint64_t)v42, type metadata accessor for NCProtoContactInfo);
  }
  outlined destroy of NCProtoContactInfo((uint64_t)v10, type metadata accessor for NCProtoContactInfo);
  return 0;
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t result;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  unint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int64_t v31;
  unint64_t v32;
  int64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  _BOOL8 v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  char v42;
  char v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  int64_t v61;
  uint64_t v62;
  int64_t v63;
  uint64_t *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  int64_t v68;
  uint64_t v69;

  v4 = type metadata accessor for NCProtoCallInfo(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)&v60 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v10 = (char *)&v60 - v9;
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: String, value: NCProtoCallInfo)?);
  v12 = MEMORY[0x24BDAC7A8](v11);
  v14 = (uint64_t *)((char *)&v60 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  result = MEMORY[0x24BDAC7A8](v12);
  v17 = (uint64_t *)((char *)&v60 - v16);
  if (a1 == a2)
    return 1;
  if (*(_QWORD *)(a1 + 16) != *(_QWORD *)(a2 + 16))
    return 0;
  v67 = v4;
  v68 = 0;
  v65 = a1;
  v66 = v5;
  v20 = *(_QWORD *)(a1 + 64);
  v19 = a1 + 64;
  v18 = v20;
  v21 = 1 << *(_BYTE *)(v19 - 32);
  v22 = -1;
  if (v21 < 64)
    v22 = ~(-1 << v21);
  v23 = v22 & v18;
  v62 = v19;
  v63 = (unint64_t)(v21 + 63) >> 6;
  v61 = v63 - 1;
  v64 = (uint64_t *)((char *)&v60 - v16);
  while (1)
  {
    if (v23)
    {
      v69 = (v23 - 1) & v23;
      v25 = __clz(__rbit64(v23)) | (v68 << 6);
LABEL_10:
      v26 = (uint64_t *)(*(_QWORD *)(v65 + 48) + 16 * v25);
      v28 = *v26;
      v27 = v26[1];
      v29 = *(_QWORD *)(v65 + 56) + *(_QWORD *)(v5 + 72) * v25;
      v30 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: String, value: NCProtoCallInfo));
      outlined init with copy of NCProtoContactInfo(v29, (uint64_t)v14 + *(int *)(v30 + 48), type metadata accessor for NCProtoCallInfo);
      *v14 = v28;
      v14[1] = v27;
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 56))(v14, 0, 1, v30);
      swift_bridgeObjectRetain();
      v17 = v64;
      goto LABEL_29;
    }
    v31 = v68 + 1;
    if (__OFADD__(v68, 1))
    {
      __break(1u);
      goto LABEL_56;
    }
    if (v31 < v63)
    {
      v32 = *(_QWORD *)(v62 + 8 * v31);
      if (v32)
        goto LABEL_14;
      v33 = v68 + 2;
      ++v68;
      if (v31 + 1 < v63)
      {
        v32 = *(_QWORD *)(v62 + 8 * v33);
        if (v32)
          goto LABEL_17;
        v68 = v31 + 1;
        if (v31 + 2 < v63)
        {
          v32 = *(_QWORD *)(v62 + 8 * (v31 + 2));
          if (v32)
          {
            v31 += 2;
            goto LABEL_14;
          }
          v33 = v31 + 3;
          v68 = v31 + 2;
          if (v31 + 3 < v63)
            break;
        }
      }
    }
LABEL_28:
    v34 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: String, value: NCProtoCallInfo));
    (*(void (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v34 - 8) + 56))(v14, 1, 1, v34);
    v69 = 0;
LABEL_29:
    outlined init with take of (key: String, value: NCProtoCallInfo)?((uint64_t)v14, (uint64_t)v17, &demangling cache variable for type metadata for (key: String, value: NCProtoCallInfo)?);
    v35 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: String, value: NCProtoCallInfo));
    v36 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(v35 - 8) + 48))(v17, 1, v35);
    v37 = v36 == 1;
    if (v36 == 1)
      return v37;
    v38 = (uint64_t)v17 + *(int *)(v35 + 48);
    v39 = *v17;
    v40 = v17[1];
    outlined init with take of NCProtoContactInfo(v38, (uint64_t)v10, type metadata accessor for NCProtoCallInfo);
    v41 = specialized __RawDictionaryStorage.find<A>(_:)(v39, v40);
    v43 = v42;
    swift_bridgeObjectRelease();
    if ((v43 & 1) == 0)
      goto LABEL_51;
    v5 = v66;
    outlined init with copy of NCProtoContactInfo(*(_QWORD *)(a2 + 56) + *(_QWORD *)(v66 + 72) * v41, (uint64_t)v8, type metadata accessor for NCProtoCallInfo);
    v44 = v67;
    v45 = *(int *)(v67 + 20);
    v46 = &v8[v45];
    v47 = *(_QWORD *)&v8[v45 + 8];
    v48 = &v10[v45];
    v49 = *((_QWORD *)v48 + 1);
    if (v47)
    {
      if (!v49
        || (*(_QWORD *)v46 != *(_QWORD *)v48 || v47 != v49) && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
      {
LABEL_50:
        outlined destroy of NCProtoContactInfo((uint64_t)v8, type metadata accessor for NCProtoCallInfo);
LABEL_51:
        outlined destroy of NCProtoContactInfo((uint64_t)v10, type metadata accessor for NCProtoCallInfo);
        return 0;
      }
    }
    else if (v49)
    {
      goto LABEL_50;
    }
    v50 = *(int *)(v44 + 24);
    v51 = &v8[v50];
    v52 = *(_QWORD *)&v8[v50 + 8];
    v53 = &v10[v50];
    v54 = *((_QWORD *)v53 + 1);
    if (v52)
    {
      if (!v54
        || (*(_QWORD *)v51 != *(_QWORD *)v53 || v52 != v54) && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
      {
        goto LABEL_50;
      }
    }
    else if (v54)
    {
      goto LABEL_50;
    }
    v55 = *(int *)(v44 + 28);
    v56 = &v8[v55];
    v57 = *(_QWORD *)&v8[v55 + 8];
    v58 = &v10[v55];
    v59 = *((_QWORD *)v58 + 1);
    if (v57)
    {
      if (!v59
        || (*(_QWORD *)v56 != *(_QWORD *)v58 || v57 != v59) && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
      {
        goto LABEL_50;
      }
    }
    else if (v59)
    {
      goto LABEL_50;
    }
    type metadata accessor for UnknownStorage();
    lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
    v24 = dispatch thunk of static Equatable.== infix(_:_:)();
    outlined destroy of NCProtoContactInfo((uint64_t)v8, type metadata accessor for NCProtoCallInfo);
    result = outlined destroy of NCProtoContactInfo((uint64_t)v10, type metadata accessor for NCProtoCallInfo);
    v23 = v69;
    if ((v24 & 1) == 0)
      return v37;
  }
  v32 = *(_QWORD *)(v62 + 8 * v33);
  if (v32)
  {
LABEL_17:
    v31 = v33;
LABEL_14:
    v68 = v31;
    v69 = (v32 - 1) & v32;
    v25 = __clz(__rbit64(v32)) + (v31 << 6);
    goto LABEL_10;
  }
  while (1)
  {
    v31 = v33 + 1;
    if (__OFADD__(v33, 1))
      break;
    if (v31 >= v63)
    {
      v68 = v61;
      goto LABEL_28;
    }
    v32 = *(_QWORD *)(v62 + 8 * v31);
    ++v33;
    if (v32)
      goto LABEL_14;
  }
LABEL_56:
  __break(1u);
  return result;
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t result;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t *v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  int64_t v31;
  unint64_t v32;
  int64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  int v37;
  unint64_t v38;
  uint64_t *v39;
  char *v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  unint64_t v48;
  char v49;
  char v50;
  unint64_t v51;
  char *v52;
  char v53;
  void (*v54)(char *, uint64_t);
  uint64_t v55;
  int64_t v56;
  uint64_t v57;
  int64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  uint64_t *v63;
  int64_t v64;
  _BOOL4 v65;
  uint64_t v66;

  v4 = type metadata accessor for Google_Protobuf_Value();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x24BDAC7A8](v4);
  v62 = (char *)&v55 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)&v55 - v8;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: String, value: Google_Protobuf_Value)?);
  v11 = MEMORY[0x24BDAC7A8](v10);
  v13 = (char *)&v55 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = MEMORY[0x24BDAC7A8](v11);
  v63 = (uint64_t *)((char *)&v55 - v15);
  if (a1 == a2)
    return 1;
  if (*(_QWORD *)(a1 + 16) != *(_QWORD *)(a2 + 16))
    return 0;
  v64 = 0;
  v59 = a1;
  v60 = v5;
  v18 = *(_QWORD *)(a1 + 64);
  v17 = a1 + 64;
  v16 = v18;
  v19 = 1 << *(_BYTE *)(v17 - 32);
  v20 = -1;
  if (v19 < 64)
    v20 = ~(-1 << v19);
  v21 = v20 & v16;
  v57 = v17;
  v58 = (unint64_t)(v19 + 63) >> 6;
  v56 = v58 - 1;
  v22 = (uint64_t *)&demangling cache variable for type metadata for (key: String, value: Google_Protobuf_Value);
  v61 = a2;
  v66 = v4;
  while (1)
  {
    if (v21)
    {
      v23 = __clz(__rbit64(v21));
      v24 = (v21 - 1) & v21;
      v25 = v23 | (v64 << 6);
LABEL_8:
      v26 = (uint64_t *)(*(_QWORD *)(v59 + 48) + 16 * v25);
      v28 = *v26;
      v27 = v26[1];
      v29 = *(_QWORD *)(v59 + 56) + *(_QWORD *)(v5 + 72) * v25;
      v30 = __swift_instantiateConcreteTypeFromMangledName(v22);
      (*(void (**)(char *, unint64_t, uint64_t))(v5 + 16))(&v13[*(int *)(v30 + 48)], v29, v66);
      *(_QWORD *)v13 = v28;
      *((_QWORD *)v13 + 1) = v27;
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 56))(v13, 0, 1, v30);
      swift_bridgeObjectRetain();
      goto LABEL_27;
    }
    v31 = v64 + 1;
    if (__OFADD__(v64, 1))
    {
      __break(1u);
      goto LABEL_36;
    }
    if (v31 < v58)
    {
      v32 = *(_QWORD *)(v57 + 8 * v31);
      if (v32)
        goto LABEL_12;
      v33 = v64 + 2;
      ++v64;
      if (v31 + 1 < v58)
      {
        v32 = *(_QWORD *)(v57 + 8 * v33);
        if (v32)
          goto LABEL_15;
        v64 = v31 + 1;
        if (v31 + 2 < v58)
        {
          v32 = *(_QWORD *)(v57 + 8 * (v31 + 2));
          if (v32)
          {
            v31 += 2;
            goto LABEL_12;
          }
          v33 = v31 + 3;
          v64 = v31 + 2;
          if (v31 + 3 < v58)
            break;
        }
      }
    }
LABEL_26:
    v34 = __swift_instantiateConcreteTypeFromMangledName(v22);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v34 - 8) + 56))(v13, 1, 1, v34);
    v24 = 0;
LABEL_27:
    v35 = v63;
    outlined init with take of (key: String, value: NCProtoCallInfo)?((uint64_t)v13, (uint64_t)v63, &demangling cache variable for type metadata for (key: String, value: Google_Protobuf_Value)?);
    v36 = __swift_instantiateConcreteTypeFromMangledName(v22);
    v37 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(v36 - 8) + 48))(v35, 1, v36);
    v65 = v37 == 1;
    if (v37 == 1)
      return v65;
    v38 = v24;
    v39 = v22;
    v40 = v13;
    v41 = (char *)v35 + *(int *)(v36 + 48);
    v42 = *v35;
    v43 = v35[1];
    v5 = v60;
    v44 = v66;
    (*(void (**)(char *, char *, uint64_t))(v60 + 32))(v9, v41, v66);
    v45 = v42;
    v46 = v61;
    v47 = v9;
    v48 = specialized __RawDictionaryStorage.find<A>(_:)(v45, v43);
    v50 = v49;
    swift_bridgeObjectRelease();
    if ((v50 & 1) == 0)
    {
      (*(void (**)(char *, uint64_t))(v5 + 8))(v47, v44);
      return 0;
    }
    v51 = *(_QWORD *)(v46 + 56) + *(_QWORD *)(v5 + 72) * v48;
    v52 = v62;
    (*(void (**)(char *, unint64_t, uint64_t))(v5 + 16))(v62, v51, v44);
    lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type Google_Protobuf_Value and conformance Google_Protobuf_Value, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BE08], MEMORY[0x24BE5BE20]);
    v53 = dispatch thunk of static Equatable.== infix(_:_:)();
    v54 = *(void (**)(char *, uint64_t))(v5 + 8);
    v54(v52, v44);
    result = ((uint64_t (*)(char *, uint64_t))v54)(v47, v44);
    v9 = v47;
    v13 = v40;
    v22 = v39;
    v21 = v38;
    if ((v53 & 1) == 0)
      return v65;
  }
  v32 = *(_QWORD *)(v57 + 8 * v33);
  if (v32)
  {
LABEL_15:
    v31 = v33;
LABEL_12:
    v24 = (v32 - 1) & v32;
    v25 = __clz(__rbit64(v32)) + (v31 << 6);
    v64 = v31;
    goto LABEL_8;
  }
  while (1)
  {
    v31 = v33 + 1;
    if (__OFADD__(v33, 1))
      break;
    if (v31 >= v58)
    {
      v64 = v56;
      goto LABEL_26;
    }
    v32 = *(_QWORD *)(v57 + 8 * v31);
    ++v33;
    if (v32)
      goto LABEL_12;
  }
LABEL_36:
  __break(1u);
  return result;
}

{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t *v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int64_t v30;
  unint64_t v31;
  int64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  _BOOL8 v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  char v44;
  char v45;
  uint64_t v46;
  _QWORD *v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t *v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  int64_t v57;
  uint64_t v58;
  int64_t v59;
  uint64_t v60;
  uint64_t v61;
  int64_t v62;
  uint64_t v63;
  uint64_t *v64;
  uint64_t v65;

  v63 = type metadata accessor for NCProtoIDSProxyMessage.ParticipantIDList(0);
  v65 = *(_QWORD *)(v63 - 8);
  v4 = MEMORY[0x24BDAC7A8](v63);
  v6 = (char *)&v56 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)&v56 - v7;
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: String, value: NCProtoIDSProxyMessage.ParticipantIDList)?);
  v10 = MEMORY[0x24BDAC7A8](v9);
  v12 = (uint64_t *)((char *)&v56 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  result = MEMORY[0x24BDAC7A8](v10);
  v64 = (uint64_t *)((char *)&v56 - v14);
  if (a1 == a2)
    return 1;
  if (*(_QWORD *)(a1 + 16) != *(_QWORD *)(a2 + 16))
    return 0;
  v61 = a2;
  v62 = 0;
  v60 = a1;
  v17 = *(_QWORD *)(a1 + 64);
  v16 = a1 + 64;
  v15 = v17;
  v18 = 1 << *(_BYTE *)(v16 - 32);
  v19 = -1;
  if (v18 < 64)
    v19 = ~(-1 << v18);
  v20 = v19 & v15;
  v58 = v16;
  v59 = (unint64_t)(v18 + 63) >> 6;
  v57 = v59 - 1;
  while (1)
  {
    if (v20)
    {
      v22 = __clz(__rbit64(v20));
      v20 &= v20 - 1;
      v23 = v22 | (v62 << 6);
      v24 = v64;
LABEL_9:
      v25 = (uint64_t *)(*(_QWORD *)(v60 + 48) + 16 * v23);
      v27 = *v25;
      v26 = v25[1];
      v28 = *(_QWORD *)(v60 + 56) + *(_QWORD *)(v65 + 72) * v23;
      v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: String, value: NCProtoIDSProxyMessage.ParticipantIDList));
      outlined init with copy of NCProtoContactInfo(v28, (uint64_t)v12 + *(int *)(v29 + 48), type metadata accessor for NCProtoIDSProxyMessage.ParticipantIDList);
      *v12 = v27;
      v12[1] = v26;
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 56))(v12, 0, 1, v29);
      swift_bridgeObjectRetain();
      goto LABEL_28;
    }
    v30 = v62 + 1;
    v24 = v64;
    if (__OFADD__(v62, 1))
    {
      __break(1u);
      goto LABEL_45;
    }
    if (v30 < v59)
    {
      v31 = *(_QWORD *)(v58 + 8 * v30);
      if (v31)
        goto LABEL_13;
      v32 = v62 + 2;
      ++v62;
      if (v30 + 1 < v59)
      {
        v31 = *(_QWORD *)(v58 + 8 * v32);
        if (v31)
          goto LABEL_16;
        v62 = v30 + 1;
        if (v30 + 2 < v59)
        {
          v31 = *(_QWORD *)(v58 + 8 * (v30 + 2));
          if (v31)
          {
            v30 += 2;
            goto LABEL_13;
          }
          v32 = v30 + 3;
          v62 = v30 + 2;
          if (v30 + 3 < v59)
            break;
        }
      }
    }
LABEL_27:
    v33 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: String, value: NCProtoIDSProxyMessage.ParticipantIDList));
    (*(void (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v33 - 8) + 56))(v12, 1, 1, v33);
    v20 = 0;
LABEL_28:
    outlined init with take of (key: String, value: NCProtoCallInfo)?((uint64_t)v12, (uint64_t)v24, &demangling cache variable for type metadata for (key: String, value: NCProtoIDSProxyMessage.ParticipantIDList)?);
    v34 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: String, value: NCProtoIDSProxyMessage.ParticipantIDList));
    v35 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(v34 - 8) + 48))(v24, 1, v34);
    v36 = v35 == 1;
    if (v35 == 1)
      return v36;
    v37 = (uint64_t)v6;
    v38 = (uint64_t)v24 + *(int *)(v34 + 48);
    v39 = *v24;
    v40 = v24[1];
    outlined init with take of NCProtoContactInfo(v38, (uint64_t)v8, type metadata accessor for NCProtoIDSProxyMessage.ParticipantIDList);
    v41 = v39;
    v42 = v61;
    v43 = specialized __RawDictionaryStorage.find<A>(_:)(v41, v40);
    v45 = v44;
    swift_bridgeObjectRelease();
    if ((v45 & 1) == 0)
      goto LABEL_40;
    v46 = *(_QWORD *)(v42 + 56) + *(_QWORD *)(v65 + 72) * v43;
    v6 = (char *)v37;
    outlined init with copy of NCProtoContactInfo(v46, v37, type metadata accessor for NCProtoIDSProxyMessage.ParticipantIDList);
    v47 = *(_QWORD **)v37;
    v48 = *(_QWORD **)v8;
    v49 = *(_QWORD *)(*(_QWORD *)v37 + 16);
    if (v49 != *(_QWORD *)(*(_QWORD *)v8 + 16))
      goto LABEL_39;
    if (v49 && v47 != v48)
    {
      if (v47[4] != v48[4])
        goto LABEL_39;
      if (v49 != 1)
      {
        if (v47[5] != v48[5])
        {
LABEL_39:
          outlined destroy of NCProtoContactInfo(v37, type metadata accessor for NCProtoIDSProxyMessage.ParticipantIDList);
LABEL_40:
          outlined destroy of NCProtoContactInfo((uint64_t)v8, type metadata accessor for NCProtoIDSProxyMessage.ParticipantIDList);
          return 0;
        }
        v50 = v47 + 6;
        v51 = v48 + 6;
        v52 = v49 - 2;
        while (v52)
        {
          v54 = *v50++;
          v53 = v54;
          v55 = *v51++;
          --v52;
          if (v53 != v55)
            goto LABEL_39;
        }
      }
    }
    type metadata accessor for UnknownStorage();
    lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
    v21 = dispatch thunk of static Equatable.== infix(_:_:)();
    outlined destroy of NCProtoContactInfo(v37, type metadata accessor for NCProtoIDSProxyMessage.ParticipantIDList);
    result = outlined destroy of NCProtoContactInfo((uint64_t)v8, type metadata accessor for NCProtoIDSProxyMessage.ParticipantIDList);
    if ((v21 & 1) == 0)
      return v36;
  }
  v31 = *(_QWORD *)(v58 + 8 * v32);
  if (v31)
  {
LABEL_16:
    v30 = v32;
LABEL_13:
    v20 = (v31 - 1) & v31;
    v23 = __clz(__rbit64(v31)) + (v30 << 6);
    v62 = v30;
    goto LABEL_9;
  }
  while (1)
  {
    v30 = v32 + 1;
    if (__OFADD__(v32, 1))
      break;
    if (v30 >= v59)
    {
      v62 = v57;
      goto LABEL_27;
    }
    v31 = *(_QWORD *)(v58 + 8 * v30);
    ++v32;
    if (v31)
      goto LABEL_13;
  }
LABEL_45:
  __break(1u);
  return result;
}

uint64_t specialized static Dictionary<>.== infix(_:_:)(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v9;
  unint64_t v10;
  unint64_t v11;
  int64_t v12;
  unint64_t v13;
  int64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  unint64_t v19;
  char v20;
  char v21;

  if (result == a2)
    return 1;
  v3 = result;
  if (*(_QWORD *)(result + 16) != *(_QWORD *)(a2 + 16))
    return 0;
  v4 = 0;
  v5 = result + 64;
  v6 = 1 << *(_BYTE *)(result + 32);
  v7 = -1;
  if (v6 < 64)
    v7 = ~(-1 << v6);
  v8 = v7 & *(_QWORD *)(result + 64);
  v9 = (unint64_t)(v6 + 63) >> 6;
  while (1)
  {
    if (v8)
    {
      v10 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      v11 = v10 | (v4 << 6);
      goto LABEL_22;
    }
    v12 = v4 + 1;
    if (__OFADD__(v4, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v12 >= v9)
      return 1;
    v13 = *(_QWORD *)(v5 + 8 * v12);
    ++v4;
    if (!v13)
    {
      v4 = v12 + 1;
      if (v12 + 1 >= v9)
        return 1;
      v13 = *(_QWORD *)(v5 + 8 * v4);
      if (!v13)
      {
        v4 = v12 + 2;
        if (v12 + 2 >= v9)
          return 1;
        v13 = *(_QWORD *)(v5 + 8 * v4);
        if (!v13)
          break;
      }
    }
LABEL_21:
    v8 = (v13 - 1) & v13;
    v11 = __clz(__rbit64(v13)) + (v4 << 6);
LABEL_22:
    v15 = (uint64_t *)(*(_QWORD *)(v3 + 48) + 16 * v11);
    v16 = *v15;
    v17 = v15[1];
    v18 = *(unsigned __int8 *)(*(_QWORD *)(v3 + 56) + v11);
    swift_bridgeObjectRetain();
    v19 = specialized __RawDictionaryStorage.find<A>(_:)(v16, v17);
    v21 = v20;
    result = swift_bridgeObjectRelease();
    if ((v21 & 1) == 0 || v18 != *(unsigned __int8 *)(*(_QWORD *)(a2 + 56) + v19))
      return 0;
  }
  v14 = v12 + 3;
  if (v14 >= v9)
    return 1;
  v13 = *(_QWORD *)(v5 + 8 * v14);
  if (v13)
  {
    v4 = v14;
    goto LABEL_21;
  }
  while (1)
  {
    v4 = v14 + 1;
    if (__OFADD__(v14, 1))
      break;
    if (v4 >= v9)
      return 1;
    v13 = *(_QWORD *)(v5 + 8 * v4);
    ++v14;
    if (v13)
      goto LABEL_21;
  }
LABEL_27:
  __break(1u);
  return result;
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:)(uint64_t a1, uint64_t a2)
{
  Swift::Int v4;

  Hasher.init(_seed:)();
  String.hash(into:)();
  v4 = Hasher._finalize()();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, a2, v4);
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:hashValue:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v9;
  _QWORD *v10;
  BOOL v11;
  uint64_t v12;
  _QWORD *v13;
  BOOL v14;

  v4 = v3 + 64;
  v5 = -1 << *(_BYTE *)(v3 + 32);
  v6 = a3 & ~v5;
  if (((*(_QWORD *)(v3 + 64 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0)
  {
    v9 = *(_QWORD *)(v3 + 48);
    v10 = (_QWORD *)(v9 + 16 * v6);
    v11 = *v10 == a1 && v10[1] == a2;
    if (!v11 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
    {
      v12 = ~v5;
      do
      {
        v6 = (v6 + 1) & v12;
        if (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) == 0)
          break;
        v13 = (_QWORD *)(v9 + 16 * v6);
        v14 = *v13 == a1 && v13[1] == a2;
      }
      while (!v14 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0);
    }
  }
  return v6;
}

void closure #1 in static Data.== infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __asm { BR              X10 }
}

uint64_t sub_242A0D370(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, __int16 a10, char __s2, char a12, char a13, char a14, char a15, char a16, char a17, char a18, char a19, char a20,char a21,char a22,char a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37)
{
  BOOL *v37;
  const void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t result;
  uint64_t v42;
  __int16 v43;
  char v44;
  char v45;
  char v46;
  char v47;

  v42 = v39;
  v43 = v40;
  v44 = BYTE2(v40);
  v45 = BYTE3(v40);
  v46 = BYTE4(v40);
  v47 = BYTE5(v40);
  if (!v38)
  {
    __break(1u);
    JUMPOUT(0x242A0D554);
  }
  result = memcmp(v38, &v42, BYTE6(v40));
  *v37 = (_DWORD)result == 0;
  return result;
}

uint64_t specialized static Array<A>.== infix(_:_:)(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;
  BOOL v5;
  char v6;
  uint64_t result;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *i;
  BOOL v11;

  v2 = a1[2];
  if (v2 != a2[2])
    return 0;
  if (!v2 || a1 == a2)
    return 1;
  v5 = a1[4] == a2[4] && a1[5] == a2[5];
  if (v5 || (v6 = _stringCompareWithSmolCheck(_:_:expecting:)(), result = 0, (v6 & 1) != 0))
  {
    v8 = v2 - 1;
    if (!v8)
      return 1;
    v9 = a2 + 7;
    for (i = a1 + 7; ; i += 2)
    {
      v11 = *(i - 1) == *(v9 - 1) && *i == *v9;
      if (!v11 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
        break;
      v9 += 2;
      if (!--v8)
        return 1;
    }
    return 0;
  }
  return result;
}

uint64_t specialized static Array<A>.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t (*v25)(uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t (*v28)(uint64_t);
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int (*v37)(uint64_t, uint64_t, uint64_t);
  uint64_t v38;
  _QWORD *v39;
  char v40;
  char v41;
  uint64_t *v42;
  uint64_t v43;
  _QWORD v45[4];
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t *v50;
  char *v51;
  char *v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;

  v60 = *MEMORY[0x24BDAC8D0];
  v4 = type metadata accessor for NCProtoContactInfo(0);
  v57 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)v45 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v56 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (NCProtoContactInfo?, NCProtoContactInfo?));
  MEMORY[0x24BDAC7A8](v56);
  v58 = (uint64_t)v45 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NCProtoContactInfo?);
  v9 = MEMORY[0x24BDAC7A8](v8);
  v11 = (_QWORD *)((char *)v45 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  v12 = MEMORY[0x24BDAC7A8](v9);
  v14 = (char *)v45 - v13;
  MEMORY[0x24BDAC7A8](v12);
  v16 = (char *)v45 - v15;
  v59 = type metadata accessor for NCProtoAddressableContact(0);
  v17 = MEMORY[0x24BDAC7A8](v59);
  v19 = (_QWORD *)((char *)v45 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x24BDAC7A8](v17);
  v22 = (_QWORD *)((char *)v45 - v21);
  v23 = *(_QWORD *)(a1 + 16);
  if (v23 != *(_QWORD *)(a2 + 16))
  {
LABEL_40:
    v41 = 0;
    return v41 & 1;
  }
  if (v23 && a1 != a2)
  {
    v51 = v16;
    v52 = v14;
    v45[3] = 0;
    v46 = v6;
    v24 = (*(unsigned __int8 *)(v20 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v20 + 80);
    v47 = *(_QWORD *)(v20 + 72);
    v48 = a1;
    v25 = type metadata accessor for NCProtoAddressableContact;
    v26 = v23 - 1;
    v55 = v4;
    v49 = a2;
    v50 = (_QWORD *)((char *)v45 - v21);
    while (1)
    {
      v54 = v26;
      outlined init with copy of NCProtoContactInfo(a1 + v24, (uint64_t)v22, v25);
      v53 = v24;
      v27 = a2 + v24;
      v28 = v25;
      outlined init with copy of NCProtoContactInfo(v27, (uint64_t)v19, v25);
      v29 = v59;
      v30 = (uint64_t)v51;
      outlined init with copy of NCProtoContactInfo?((uint64_t)v22 + *(int *)(v59 + 28), (uint64_t)v51, &demangling cache variable for type metadata for NCProtoContactInfo?);
      v31 = v19;
      v32 = (uint64_t)v19 + *(int *)(v29 + 28);
      v33 = v30;
      v34 = (uint64_t)v52;
      outlined init with copy of NCProtoContactInfo?(v32, (uint64_t)v52, &demangling cache variable for type metadata for NCProtoContactInfo?);
      v35 = v58;
      v36 = v58 + *(int *)(v56 + 48);
      outlined init with copy of NCProtoContactInfo?(v33, v58, &demangling cache variable for type metadata for NCProtoContactInfo?);
      outlined init with copy of NCProtoContactInfo?(v34, v36, &demangling cache variable for type metadata for NCProtoContactInfo?);
      v37 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v57 + 48);
      if (v37(v35, 1, v4) != 1)
        break;
      outlined destroy of NCProtoContactInfo?(v34, &demangling cache variable for type metadata for NCProtoContactInfo?);
      outlined destroy of NCProtoContactInfo?(v33, &demangling cache variable for type metadata for NCProtoContactInfo?);
      if (v37(v36, 1, v4) != 1)
      {
        v35 = v58;
        v19 = v31;
        v22 = v50;
        v42 = &demangling cache variable for type metadata for (NCProtoContactInfo?, NCProtoContactInfo?);
        goto LABEL_38;
      }
      outlined destroy of NCProtoContactInfo?(v58, &demangling cache variable for type metadata for NCProtoContactInfo?);
      v19 = v31;
      v25 = v28;
      a2 = v49;
      v22 = v50;
      v40 = specialized static Array<A>.== infix(_:_:)(*v50, *v19);
      if ((v40 & 1) == 0
        || (v22[1] != v19[1] || v22[2] != v19[2]) && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
      {
        goto LABEL_39;
      }
      type metadata accessor for UnknownStorage();
      lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
      v41 = dispatch thunk of static Equatable.== infix(_:_:)();
      outlined destroy of NCProtoContactInfo((uint64_t)v19, v25);
      outlined destroy of NCProtoContactInfo((uint64_t)v22, v25);
      v26 = v54 - 1;
      if ((v41 & 1) != 0)
      {
        a1 = v48;
        v24 = v53 + v47;
        v4 = v55;
        if (v54)
          continue;
      }
      return v41 & 1;
    }
    outlined init with copy of NCProtoContactInfo?(v35, (uint64_t)v11, &demangling cache variable for type metadata for NCProtoContactInfo?);
    if (v37(v36, 1, v4) == 1)
    {
      v43 = v33;
      v19 = v31;
      v22 = v50;
      v42 = &demangling cache variable for type metadata for (NCProtoContactInfo?, NCProtoContactInfo?);
    }
    else
    {
      v38 = v36;
      v39 = v46;
      outlined init with take of NCProtoContactInfo(v38, (uint64_t)v46, type metadata accessor for NCProtoContactInfo);
      v19 = v31;
      v22 = v50;
      if ((*v11 == *v39 && v11[1] == v39[1] || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
        && (v11[2] == v39[2] && v11[3] == v39[3] || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
        && (v11[4] == v39[4] && v11[5] == v39[5] || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
        && (v11[6] == v39[6] && v11[7] == v39[7] || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
        && (v11[8] == v39[8] && v11[9] == v39[9] || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
        && (v11[10] == v39[10] && v11[11] == v39[11] || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
      {
        __asm { BR              X10 }
      }
      outlined destroy of NCProtoContactInfo((uint64_t)v39, type metadata accessor for NCProtoContactInfo);
      v42 = &demangling cache variable for type metadata for NCProtoContactInfo?;
      v43 = (uint64_t)v51;
    }
    outlined destroy of NCProtoContactInfo?((uint64_t)v52, &demangling cache variable for type metadata for NCProtoContactInfo?);
    outlined destroy of NCProtoContactInfo?(v43, &demangling cache variable for type metadata for NCProtoContactInfo?);
    outlined destroy of NCProtoContactInfo((uint64_t)v11, type metadata accessor for NCProtoContactInfo);
LABEL_38:
    outlined destroy of NCProtoContactInfo?(v35, v42);
LABEL_39:
    outlined destroy of NCProtoContactInfo((uint64_t)v19, type metadata accessor for NCProtoAddressableContact);
    outlined destroy of NCProtoContactInfo((uint64_t)v22, type metadata accessor for NCProtoAddressableContact);
    goto LABEL_40;
  }
  v41 = 1;
  return v41 & 1;
}

{
  int *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;
  char *v28;
  char v29;
  char *v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  char v41;
  BOOL v43;
  uint64_t v45;

  v4 = (int *)type metadata accessor for NCProtoContinuityCall(0);
  v5 = MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v45 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v5);
  v10 = (char *)&v45 - v9;
  v11 = *(_QWORD *)(a1 + 16);
  if (v11 == *(_QWORD *)(a2 + 16))
  {
    if (v11 && a1 != a2)
    {
      v12 = (*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
      v13 = *(_QWORD *)(v8 + 72);
      v14 = v11 - 1;
      while (1)
      {
        outlined init with copy of NCProtoContactInfo(a1 + v12, (uint64_t)v10, type metadata accessor for NCProtoContinuityCall);
        outlined init with copy of NCProtoContactInfo(a2 + v12, (uint64_t)v7, type metadata accessor for NCProtoContinuityCall);
        v15 = v4[5];
        v16 = &v10[v15];
        v17 = *(_QWORD *)&v10[v15 + 8];
        v18 = &v7[v15];
        v19 = *((_QWORD *)v18 + 1);
        if (v17)
        {
          if (!v19
            || (*(_QWORD *)v16 == *(_QWORD *)v18 ? (v20 = v17 == v19) : (v20 = 0),
                !v20 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0))
          {
LABEL_50:
            outlined destroy of NCProtoContactInfo((uint64_t)v7, type metadata accessor for NCProtoContinuityCall);
            outlined destroy of NCProtoContactInfo((uint64_t)v10, type metadata accessor for NCProtoContinuityCall);
            goto LABEL_51;
          }
        }
        else if (v19)
        {
          goto LABEL_50;
        }
        v21 = v4[6];
        v22 = &v10[v21];
        v23 = *(_QWORD *)&v10[v21 + 8];
        v24 = &v7[v21];
        v25 = *((_QWORD *)v24 + 1);
        if (v23)
        {
          if (!v25)
            goto LABEL_50;
          v26 = *(_QWORD *)v22 == *(_QWORD *)v24 && v23 == v25;
          if (!v26 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
            goto LABEL_50;
        }
        else if (v25)
        {
          goto LABEL_50;
        }
        v27 = v4[7];
        v28 = &v10[v27];
        v29 = v10[v27 + 9];
        v30 = &v7[v27];
        if ((v29 & 1) != 0)
        {
          if ((v30[9] & 1) == 0)
            goto LABEL_50;
        }
        else
        {
          if ((v30[9] & 1) != 0)
            goto LABEL_50;
          v31 = *(_QWORD *)v28;
          v32 = v28[8];
          v33 = *(_QWORD *)v30;
          v34 = v30[8];
          v35 = v31 != 0;
          if ((v32 & 1) == 0)
            v35 = v31;
          if ((v34 & 1) != 0)
          {
            if (v33)
            {
              if (v35 != 1)
                goto LABEL_50;
            }
            else if (v35)
            {
              goto LABEL_50;
            }
          }
          else if (v35 != v33)
          {
            goto LABEL_50;
          }
        }
        v36 = v4[8];
        v37 = &v10[v36];
        v38 = *(_QWORD *)&v10[v36 + 8];
        v39 = &v7[v36];
        v40 = *((_QWORD *)v39 + 1);
        if (v38)
        {
          if (!v40
            || (*(_QWORD *)v37 != *(_QWORD *)v39 || v38 != v40)
            && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
          {
            goto LABEL_50;
          }
        }
        else if (v40)
        {
          goto LABEL_50;
        }
        type metadata accessor for UnknownStorage();
        lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
        v41 = dispatch thunk of static Equatable.== infix(_:_:)();
        outlined destroy of NCProtoContactInfo((uint64_t)v7, type metadata accessor for NCProtoContinuityCall);
        outlined destroy of NCProtoContactInfo((uint64_t)v10, type metadata accessor for NCProtoContinuityCall);
        v43 = v14-- != 0;
        if ((v41 & 1) != 0)
        {
          v12 += v13;
          if (v43)
            continue;
        }
        return v41 & 1;
      }
    }
    v41 = 1;
  }
  else
  {
LABEL_51:
    v41 = 0;
  }
  return v41 & 1;
}

{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != *(_QWORD *)(a2 + 16))
    return 0;
  if (v2)
  {
    if (a1 != a2)
      __asm { BR              X8 }
  }
  return 1;
}

{
  uint64_t v2;
  uint64_t *v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != *(_QWORD *)(a2 + 16))
    return 0;
  if (v2 && a1 != a2)
  {
    v3 = (uint64_t *)(a1 + 32);
    v4 = (_BYTE *)(a2 + 40);
    do
    {
      v6 = *v3;
      v3 += 2;
      v5 = v6;
      v7 = *((_QWORD *)v4 - 1);
      if (*v4 == 1)
      {
        if (v7)
        {
          if (v7 == 1)
          {
            if (v5 != 1)
              return 0;
          }
          else if (v5 != 2)
          {
            return 0;
          }
        }
        else if (v5)
        {
          return 0;
        }
      }
      else if (v5 != v7)
      {
        return 0;
      }
      v4 += 16;
      --v2;
    }
    while (v2);
  }
  return 1;
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  BOOL v19;
  uint64_t v21;
  char *v22;

  v4 = type metadata accessor for NCProtoContactHandleAnonym(0);
  v5 = MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v5);
  v10 = (uint64_t *)((char *)&v21 - v9);
  v11 = *(_QWORD *)(a1 + 16);
  if (v11 != *(_QWORD *)(a2 + 16))
  {
LABEL_34:
    v17 = 0;
    return v17 & 1;
  }
  if (v11 && a1 != a2)
  {
    v12 = (*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
    v21 = *(_QWORD *)(v8 + 72);
    v22 = (char *)&v21 - v9;
    v13 = v11 - 1;
    while (1)
    {
      outlined init with copy of NCProtoContactInfo(a1 + v12, (uint64_t)v10, type metadata accessor for NCProtoContactHandleAnonym);
      outlined init with copy of NCProtoContactInfo(a2 + v12, (uint64_t)v7, type metadata accessor for NCProtoContactHandleAnonym);
      v14 = *v10 == *(_QWORD *)v7 && v10[1] == *((_QWORD *)v7 + 1);
      if (!v14 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
        break;
      v15 = v10[2];
      v16 = *((_QWORD *)v7 + 2);
      if (v7[24] == 1)
      {
        if (v16)
        {
          if (v16 == 1)
          {
            if (v15 != 1)
              break;
          }
          else if (v15 != 2)
          {
            break;
          }
        }
        else if (v15)
        {
          break;
        }
      }
      else if (v15 != v16)
      {
        break;
      }
      if ((v10[4] != *((_QWORD *)v7 + 4) || v10[5] != *((_QWORD *)v7 + 5))
        && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0
        || (v10[6] != *((_QWORD *)v7 + 6) || v10[7] != *((_QWORD *)v7 + 7))
        && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
      {
        break;
      }
      type metadata accessor for UnknownStorage();
      lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
      v10 = v22;
      v17 = dispatch thunk of static Equatable.== infix(_:_:)();
      outlined destroy of NCProtoContactInfo((uint64_t)v7, type metadata accessor for NCProtoContactHandleAnonym);
      outlined destroy of NCProtoContactInfo((uint64_t)v10, type metadata accessor for NCProtoContactHandleAnonym);
      v19 = v13-- != 0;
      if ((v17 & 1) != 0)
      {
        v12 += v21;
        if (v19)
          continue;
      }
      return v17 & 1;
    }
    outlined destroy of NCProtoContactInfo((uint64_t)v7, type metadata accessor for NCProtoContactHandleAnonym);
    outlined destroy of NCProtoContactInfo((uint64_t)v10, type metadata accessor for NCProtoContactHandleAnonym);
    goto LABEL_34;
  }
  v17 = 1;
  return v17 & 1;
}

uint64_t specialized static Array<A>.== infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD), uint64_t (*a4)(char *, char *))
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  BOOL v21;
  uint64_t v23;

  v8 = a3(0);
  v9 = MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)&v23 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v9);
  v14 = (char *)&v23 - v13;
  v15 = *(_QWORD *)(a1 + 16);
  if (v15 == *(_QWORD *)(a2 + 16))
  {
    if (!v15 || a1 == a2)
    {
      v19 = 1;
    }
    else
    {
      v16 = (*(unsigned __int8 *)(v12 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80);
      v17 = *(_QWORD *)(v12 + 72);
      v18 = v15 - 1;
      do
      {
        outlined init with copy of NCProtoContactInfo(a1 + v16, (uint64_t)v14, a3);
        outlined init with copy of NCProtoContactInfo(a2 + v16, (uint64_t)v11, a3);
        v19 = a4(v14, v11);
        outlined destroy of NCProtoContactInfo((uint64_t)v11, a3);
        outlined destroy of NCProtoContactInfo((uint64_t)v14, a3);
        v21 = v18-- != 0;
        if ((v19 & 1) == 0)
          break;
        v16 += v17;
      }
      while (v21);
    }
  }
  else
  {
    v19 = 0;
  }
  return v19 & 1;
}

BOOL specialized static Array<A>.== infix(_:_:)(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v5;
  _BOOL8 result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v2 = a1[2];
  if (v2 != a2[2])
    return 0;
  if (!v2 || a1 == a2)
    return 1;
  if (a1[4] != a2[4])
    return 0;
  v3 = a1 + 5;
  v4 = a2 + 5;
  v5 = v2 - 1;
  do
  {
    result = v5 == 0;
    if (!v5)
      break;
    v8 = *v3++;
    v7 = v8;
    v9 = *v4++;
    --v5;
  }
  while (v7 == v9);
  return result;
}

uint64_t specialized Data.InlineData.withUnsafeBytes<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  char v5;
  char v7;
  uint64_t v8;
  __int16 v9;
  char v10;
  char v11;
  char v12;
  char v13;
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  v8 = a1;
  v9 = a2;
  v10 = BYTE2(a2);
  v11 = BYTE3(a2);
  v12 = BYTE4(a2);
  v13 = BYTE5(a2);
  closure #1 in static Data.== infix(_:_:)((uint64_t)&v8, (uint64_t)&v8 + BYTE6(a2), a3, a4);
  if (!v4)
    v5 = v7;
  return v5 & 1;
}

uint64_t specialized __DataStorage.withUnsafeBytes<A>(in:apply:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t result;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  char v19;

  result = __DataStorage._bytes.getter();
  v11 = result;
  if (result)
  {
    result = __DataStorage._offset.getter();
    if (__OFSUB__(a1, result))
    {
LABEL_15:
      __break(1u);
      return result;
    }
    v11 += a1 - result;
  }
  v12 = __OFSUB__(a2, a1);
  v13 = a2 - a1;
  if (v12)
  {
    __break(1u);
    goto LABEL_15;
  }
  v14 = __DataStorage._length.getter();
  if (v14 >= v13)
    v15 = v13;
  else
    v15 = v14;
  v16 = v11 + v15;
  if (v11)
    v17 = v16;
  else
    v17 = 0;
  closure #1 in static Data.== infix(_:_:)(v11, v17, a4, a5);
  if (!v5)
    v18 = v19;
  return v18 & 1;
}

void specialized static Data.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  __asm { BR              X11 }
}

uint64_t sub_242A0F248()
{
  unint64_t v0;

  return ((uint64_t (*)(void))((char *)&loc_242A0F27C + dword_242A0F454[v0 >> 62]))();
}

uint64_t sub_242A0F28C@<X0>(int a1@<W8>)
{
  uint64_t v1;
  uint64_t v2;
  char v3;

  if (v1 == BYTE6(v2))
  {
    if (v1 >= 1)
      __asm { BR              X10 }
    v3 = 1;
  }
  else
  {
    v3 = 0;
  }
  return v3 & 1;
}

uint64_t specialized static NCProtoSuggestionAdvertisementDidChangeEvent.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int (*v26)(uint64_t, uint64_t, uint64_t);
  uint64_t v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  void (*v32)(char *, uint64_t, uint64_t);
  char *v33;
  char *v34;
  char v35;
  void (*v36)(char *, uint64_t);
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;

  v4 = type metadata accessor for UnknownStorage();
  v43 = *(_QWORD *)(v4 - 8);
  v44 = v4;
  v5 = MEMORY[0x24BDAC7A8](v4);
  v42 = (char *)&v38 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v5);
  v41 = (char *)&v38 - v7;
  v8 = type metadata accessor for NCProtoSuggestionAdvertisement(0);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v38 = (uint64_t)&v38 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (NCProtoSuggestionAdvertisement?, NCProtoSuggestionAdvertisement?));
  MEMORY[0x24BDAC7A8](v11);
  v13 = (char *)&v38 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NCProtoSuggestionAdvertisement?);
  v15 = MEMORY[0x24BDAC7A8](v14);
  v45 = (uint64_t)&v38 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = MEMORY[0x24BDAC7A8](v15);
  v19 = (char *)&v38 - v18;
  MEMORY[0x24BDAC7A8](v17);
  v21 = (char *)&v38 - v20;
  v22 = type metadata accessor for NCProtoSuggestionAdvertisementDidChangeEvent(0);
  v23 = *(int *)(v22 + 20);
  v39 = a1;
  outlined init with copy of NCProtoContactInfo?(a1 + v23, (uint64_t)v21, &demangling cache variable for type metadata for NCProtoSuggestionAdvertisement?);
  v24 = *(int *)(v22 + 20);
  v40 = a2;
  outlined init with copy of NCProtoContactInfo?(a2 + v24, (uint64_t)v19, &demangling cache variable for type metadata for NCProtoSuggestionAdvertisement?);
  v25 = (uint64_t)&v13[*(int *)(v11 + 48)];
  outlined init with copy of NCProtoContactInfo?((uint64_t)v21, (uint64_t)v13, &demangling cache variable for type metadata for NCProtoSuggestionAdvertisement?);
  outlined init with copy of NCProtoContactInfo?((uint64_t)v19, v25, &demangling cache variable for type metadata for NCProtoSuggestionAdvertisement?);
  v26 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
  if (v26((uint64_t)v13, 1, v8) != 1)
  {
    v27 = v45;
    outlined init with copy of NCProtoContactInfo?((uint64_t)v13, v45, &demangling cache variable for type metadata for NCProtoSuggestionAdvertisement?);
    if (v26(v25, 1, v8) != 1)
    {
      v28 = v38;
      outlined init with take of NCProtoContactInfo(v25, v38, type metadata accessor for NCProtoSuggestionAdvertisement);
      v29 = specialized static NCProtoSuggestionAdvertisement.== infix(_:_:)(v27, v28);
      outlined destroy of NCProtoContactInfo(v28, type metadata accessor for NCProtoSuggestionAdvertisement);
      outlined destroy of NCProtoContactInfo?((uint64_t)v19, &demangling cache variable for type metadata for NCProtoSuggestionAdvertisement?);
      outlined destroy of NCProtoContactInfo?((uint64_t)v21, &demangling cache variable for type metadata for NCProtoSuggestionAdvertisement?);
      outlined destroy of NCProtoContactInfo(v27, type metadata accessor for NCProtoSuggestionAdvertisement);
      outlined destroy of NCProtoContactInfo?((uint64_t)v13, &demangling cache variable for type metadata for NCProtoSuggestionAdvertisement?);
      if ((v29 & 1) != 0)
        goto LABEL_8;
LABEL_9:
      v35 = 0;
      return v35 & 1;
    }
    outlined destroy of NCProtoContactInfo?((uint64_t)v19, &demangling cache variable for type metadata for NCProtoSuggestionAdvertisement?);
    outlined destroy of NCProtoContactInfo?((uint64_t)v21, &demangling cache variable for type metadata for NCProtoSuggestionAdvertisement?);
    outlined destroy of NCProtoContactInfo(v27, type metadata accessor for NCProtoSuggestionAdvertisement);
LABEL_6:
    outlined destroy of NCProtoContactInfo?((uint64_t)v13, &demangling cache variable for type metadata for (NCProtoSuggestionAdvertisement?, NCProtoSuggestionAdvertisement?));
    goto LABEL_9;
  }
  outlined destroy of NCProtoContactInfo?((uint64_t)v19, &demangling cache variable for type metadata for NCProtoSuggestionAdvertisement?);
  outlined destroy of NCProtoContactInfo?((uint64_t)v21, &demangling cache variable for type metadata for NCProtoSuggestionAdvertisement?);
  if (v26(v25, 1, v8) != 1)
    goto LABEL_6;
  outlined destroy of NCProtoContactInfo?((uint64_t)v13, &demangling cache variable for type metadata for NCProtoSuggestionAdvertisement?);
LABEL_8:
  v31 = v43;
  v30 = v44;
  v32 = *(void (**)(char *, uint64_t, uint64_t))(v43 + 16);
  v33 = v41;
  v32(v41, v39, v44);
  v34 = v42;
  v32(v42, v40, v30);
  lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
  v35 = dispatch thunk of static Equatable.== infix(_:_:)();
  v36 = *(void (**)(char *, uint64_t))(v31 + 8);
  v36(v34, v30);
  v36(v33, v30);
  return v35 & 1;
}

uint64_t specialized static NCProtoTransferActiveConversationRequest.== infix(_:_:)(_QWORD *a1, char *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  BOOL v11;
  char v12;
  int *active;
  int *v14;
  uint64_t v15;
  int v16;
  int v17;
  uint64_t v18;
  int v19;
  int v20;
  char *v21;
  void (*v22)(char *, char *, uint64_t);
  void (*v23)(char *, uint64_t);
  uint64_t v25;

  v4 = type metadata accessor for UnknownStorage();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)&v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v10 = (char *)&v25 - v9;
  v11 = *a1 == *(_QWORD *)a2 && a1[1] == *((_QWORD *)a2 + 1);
  if (v11 || (v12 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
  {
    active = (int *)type metadata accessor for NCProtoTransferActiveConversationRequest(0);
    v14 = active;
    v15 = active[6];
    v16 = *((unsigned __int8 *)a1 + v15);
    v17 = a2[v15];
    if (v16 == 2)
    {
      if (v17 != 2)
        goto LABEL_17;
    }
    else if (v17 == 2 || ((((v17 & 1) == 0) ^ v16) & 1) == 0)
    {
      goto LABEL_17;
    }
    v18 = active[7];
    v19 = *((unsigned __int8 *)a1 + v18);
    v20 = a2[v18];
    if (v19 == 2)
    {
      if (v20 != 2)
      {
LABEL_17:
        v12 = 0;
        return v12 & 1;
      }
    }
    else if (v20 == 2 || ((((v20 & 1) == 0) ^ v19) & 1) == 0)
    {
      goto LABEL_17;
    }
    v21 = (char *)a1 + active[5];
    v22 = *(void (**)(char *, char *, uint64_t))(v5 + 16);
    v22(v10, v21, v4);
    v22(v8, &a2[v14[5]], v4);
    lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
    v12 = dispatch thunk of static Equatable.== infix(_:_:)();
    v23 = *(void (**)(char *, uint64_t))(v5 + 8);
    v23(v8, v4);
    v23(v10, v4);
  }
  return v12 & 1;
}

uint64_t specialized static NCProtoFavoritesDidChangeEvent.== infix(_:_:)(uint64_t *a1, uint64_t *a2, uint64_t (*a3)(_QWORD), uint64_t (*a4)(char *, char *), uint64_t (*a5)(_QWORD))
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  void (*v19)(char *, char *, uint64_t);
  char v20;
  void (*v21)(char *, uint64_t);
  uint64_t v23;

  v10 = type metadata accessor for UnknownStorage();
  v11 = *(_QWORD *)(v10 - 8);
  v12 = MEMORY[0x24BDAC7A8](v10);
  v14 = (char *)&v23 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v12);
  v16 = (char *)&v23 - v15;
  if ((specialized static Array<A>.== infix(_:_:)(*a1, *a2, a3, a4) & 1) != 0)
  {
    v17 = a5(0);
    v18 = (char *)a1 + *(int *)(v17 + 20);
    v19 = *(void (**)(char *, char *, uint64_t))(v11 + 16);
    v19(v16, v18, v10);
    v19(v14, (char *)a2 + *(int *)(v17 + 20), v10);
    lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
    v20 = dispatch thunk of static Equatable.== infix(_:_:)();
    v21 = *(void (**)(char *, uint64_t))(v11 + 8);
    v21(v14, v10);
    v21(v16, v10);
  }
  else
  {
    v20 = 0;
  }
  return v20 & 1;
}

uint64_t specialized static NCProtoGetAddressableContactsResponse.== infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t AddressableContactsResponse;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  char v15;
  _QWORD *v16;
  int v17;
  char v18;
  char *v19;
  void (*v20)(char *, char *, uint64_t);
  void (*v21)(char *, uint64_t);
  uint64_t v23;

  v4 = type metadata accessor for UnknownStorage();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)&v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v10 = (char *)&v23 - v9;
  if ((specialized static Array<A>.== infix(_:_:)(*a1, *a2) & 1) == 0)
    goto LABEL_4;
  AddressableContactsResponse = type metadata accessor for NCProtoGetAddressableContactsResponse(0);
  v12 = AddressableContactsResponse;
  v13 = *(int *)(AddressableContactsResponse + 24);
  v14 = (uint64_t *)((char *)a1 + v13);
  v15 = *((_BYTE *)a1 + v13 + 8);
  v16 = (uint64_t *)((char *)a2 + v13);
  v17 = *((unsigned __int8 *)a2 + v13 + 8);
  if ((v15 & 1) == 0)
  {
    if (*v14 != *v16)
      LOBYTE(v17) = 1;
    if ((v17 & 1) != 0)
      goto LABEL_4;
LABEL_8:
    v19 = (char *)a1 + *(int *)(AddressableContactsResponse + 20);
    v20 = *(void (**)(char *, char *, uint64_t))(v5 + 16);
    v20(v10, v19, v4);
    v20(v8, (char *)a2 + *(int *)(v12 + 20), v4);
    lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
    v18 = dispatch thunk of static Equatable.== infix(_:_:)();
    v21 = *(void (**)(char *, uint64_t))(v5 + 8);
    v21(v8, v4);
    v21(v10, v4);
    return v18 & 1;
  }
  if (v17)
    goto LABEL_8;
LABEL_4:
  v18 = 0;
  return v18 & 1;
}

uint64_t specialized static NCProtoJoinActiveConversationRequest.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  int *active;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  BOOL v17;
  char v18;
  uint64_t v19;
  int v20;
  int v21;
  uint64_t v22;
  int v23;
  int v24;
  void (*v25)(char *, uint64_t, uint64_t);
  void (*v26)(char *, uint64_t);
  uint64_t v28;

  v4 = type metadata accessor for UnknownStorage();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)&v28 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v10 = (char *)&v28 - v9;
  active = (int *)type metadata accessor for NCProtoJoinActiveConversationRequest(0);
  v12 = active[5];
  v13 = (_QWORD *)(a1 + v12);
  v14 = *(_QWORD *)(a1 + v12 + 8);
  v15 = (_QWORD *)(a2 + v12);
  v16 = v15[1];
  if (!v14)
  {
    if (v16)
      goto LABEL_21;
    goto LABEL_10;
  }
  if (!v16)
    goto LABEL_21;
  v17 = *v13 == *v15 && v14 == v16;
  if (v17 || (v18 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
  {
LABEL_10:
    v19 = active[6];
    v20 = *(unsigned __int8 *)(a1 + v19);
    v21 = *(unsigned __int8 *)(a2 + v19);
    if (v20 == 2)
    {
      if (v21 != 2)
        goto LABEL_21;
    }
    else if (v21 == 2 || ((((v21 & 1) == 0) ^ v20) & 1) == 0)
    {
      goto LABEL_21;
    }
    v22 = active[7];
    v23 = *(unsigned __int8 *)(a1 + v22);
    v24 = *(unsigned __int8 *)(a2 + v22);
    if (v23 != 2)
    {
      if (v24 == 2 || ((((v24 & 1) == 0) ^ v23) & 1) == 0)
        goto LABEL_21;
LABEL_20:
      v25 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
      v25(v10, a1, v4);
      v25(v8, a2, v4);
      lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
      v18 = dispatch thunk of static Equatable.== infix(_:_:)();
      v26 = *(void (**)(char *, uint64_t))(v5 + 8);
      v26(v8, v4);
      v26(v10, v4);
      return v18 & 1;
    }
    if (v24 == 2)
      goto LABEL_20;
LABEL_21:
    v18 = 0;
  }
  return v18 & 1;
}

uint64_t specialized static NCProtoGetCallDisplayDetailsResponse.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int (*v26)(uint64_t, uint64_t, uint64_t);
  uint64_t v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  void (*v32)(char *, uint64_t, uint64_t);
  char *v33;
  char *v34;
  char v35;
  void (*v36)(char *, uint64_t);
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;

  v4 = type metadata accessor for UnknownStorage();
  v43 = *(_QWORD *)(v4 - 8);
  v44 = v4;
  v5 = MEMORY[0x24BDAC7A8](v4);
  v42 = (char *)&v38 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v5);
  v41 = (char *)&v38 - v7;
  v8 = type metadata accessor for NCProtoCallInfo(0);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v38 = (uint64_t)&v38 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (NCProtoCallInfo?, NCProtoCallInfo?));
  MEMORY[0x24BDAC7A8](v11);
  v13 = (char *)&v38 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NCProtoCallInfo?);
  v15 = MEMORY[0x24BDAC7A8](v14);
  v45 = (uint64_t)&v38 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = MEMORY[0x24BDAC7A8](v15);
  v19 = (char *)&v38 - v18;
  MEMORY[0x24BDAC7A8](v17);
  v21 = (char *)&v38 - v20;
  v22 = type metadata accessor for NCProtoGetCallDisplayDetailsResponse(0);
  v23 = *(int *)(v22 + 20);
  v39 = a1;
  outlined init with copy of NCProtoContactInfo?(a1 + v23, (uint64_t)v21, &demangling cache variable for type metadata for NCProtoCallInfo?);
  v24 = *(int *)(v22 + 20);
  v40 = a2;
  outlined init with copy of NCProtoContactInfo?(a2 + v24, (uint64_t)v19, &demangling cache variable for type metadata for NCProtoCallInfo?);
  v25 = (uint64_t)&v13[*(int *)(v11 + 48)];
  outlined init with copy of NCProtoContactInfo?((uint64_t)v21, (uint64_t)v13, &demangling cache variable for type metadata for NCProtoCallInfo?);
  outlined init with copy of NCProtoContactInfo?((uint64_t)v19, v25, &demangling cache variable for type metadata for NCProtoCallInfo?);
  v26 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
  if (v26((uint64_t)v13, 1, v8) != 1)
  {
    v27 = v45;
    outlined init with copy of NCProtoContactInfo?((uint64_t)v13, v45, &demangling cache variable for type metadata for NCProtoCallInfo?);
    if (v26(v25, 1, v8) != 1)
    {
      v28 = v38;
      outlined init with take of NCProtoContactInfo(v25, v38, type metadata accessor for NCProtoCallInfo);
      v29 = specialized static NCProtoCallInfo.== infix(_:_:)(v27, v28);
      outlined destroy of NCProtoContactInfo(v28, type metadata accessor for NCProtoCallInfo);
      outlined destroy of NCProtoContactInfo?((uint64_t)v19, &demangling cache variable for type metadata for NCProtoCallInfo?);
      outlined destroy of NCProtoContactInfo?((uint64_t)v21, &demangling cache variable for type metadata for NCProtoCallInfo?);
      outlined destroy of NCProtoContactInfo(v27, type metadata accessor for NCProtoCallInfo);
      outlined destroy of NCProtoContactInfo?((uint64_t)v13, &demangling cache variable for type metadata for NCProtoCallInfo?);
      if ((v29 & 1) != 0)
        goto LABEL_8;
LABEL_9:
      v35 = 0;
      return v35 & 1;
    }
    outlined destroy of NCProtoContactInfo?((uint64_t)v19, &demangling cache variable for type metadata for NCProtoCallInfo?);
    outlined destroy of NCProtoContactInfo?((uint64_t)v21, &demangling cache variable for type metadata for NCProtoCallInfo?);
    outlined destroy of NCProtoContactInfo(v27, type metadata accessor for NCProtoCallInfo);
LABEL_6:
    outlined destroy of NCProtoContactInfo?((uint64_t)v13, &demangling cache variable for type metadata for (NCProtoCallInfo?, NCProtoCallInfo?));
    goto LABEL_9;
  }
  outlined destroy of NCProtoContactInfo?((uint64_t)v19, &demangling cache variable for type metadata for NCProtoCallInfo?);
  outlined destroy of NCProtoContactInfo?((uint64_t)v21, &demangling cache variable for type metadata for NCProtoCallInfo?);
  if (v26(v25, 1, v8) != 1)
    goto LABEL_6;
  outlined destroy of NCProtoContactInfo?((uint64_t)v13, &demangling cache variable for type metadata for NCProtoCallInfo?);
LABEL_8:
  v31 = v43;
  v30 = v44;
  v32 = *(void (**)(char *, uint64_t, uint64_t))(v43 + 16);
  v33 = v41;
  v32(v41, v39, v44);
  v34 = v42;
  v32(v42, v40, v30);
  lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
  v35 = dispatch thunk of static Equatable.== infix(_:_:)();
  v36 = *(void (**)(char *, uint64_t))(v31 + 8);
  v36(v34, v30);
  v36(v33, v30);
  return v35 & 1;
}

uint64_t specialized static NCProtoAddConversationParticipantsRequest.== infix(_:_:)(_QWORD *a1, char *a2, uint64_t (*a3)(_QWORD, _QWORD), uint64_t (*a4)(_QWORD))
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  void (*v17)(char *, char *, uint64_t);
  char v18;
  void (*v19)(char *, uint64_t);
  uint64_t v21;

  v8 = type metadata accessor for UnknownStorage();
  v9 = *(_QWORD *)(v8 - 8);
  v10 = MEMORY[0x24BDAC7A8](v8);
  v12 = (char *)&v21 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v10);
  v14 = (char *)&v21 - v13;
  if ((a3(*a1, *(_QWORD *)a2) & 1) != 0)
  {
    v15 = a4(0);
    v16 = (char *)a1 + *(int *)(v15 + 20);
    v17 = *(void (**)(char *, char *, uint64_t))(v9 + 16);
    v17(v14, v16, v8);
    v17(v12, &a2[*(int *)(v15 + 20)], v8);
    lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
    v18 = dispatch thunk of static Equatable.== infix(_:_:)();
    v19 = *(void (**)(char *, uint64_t))(v9 + 8);
    v19(v12, v8);
    v19(v14, v8);
  }
  else
  {
    v18 = 0;
  }
  return v18 & 1;
}

uint64_t specialized static NCProtoPullLagunaSessionToTVRequest.== infix(_:_:)(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  BOOL v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  char v17;
  char *v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  void (*v23)(char *, char *, uint64_t);
  void (*v24)(char *, uint64_t);
  uint64_t v26;

  v4 = type metadata accessor for UnknownStorage();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)&v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v10 = (char *)&v26 - v9;
  v11 = *a1 == *a2 && a1[1] == a2[1];
  if (v11 || (v12 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
  {
    v13 = type metadata accessor for NCProtoPullLagunaSessionToTVRequest(0);
    v14 = v13;
    v15 = *(int *)(v13 + 24);
    v16 = (_QWORD *)((char *)a1 + v15);
    v17 = *((_BYTE *)a1 + v15 + 9);
    v18 = (char *)a2 + v15;
    v19 = *((_BYTE *)a2 + v15 + 9);
    if ((v17 & 1) != 0)
    {
      if ((v19 & 1) != 0)
        goto LABEL_12;
LABEL_18:
      v12 = 0;
      return v12 & 1;
    }
    if ((v19 & 1) != 0)
      goto LABEL_18;
    v20 = *v16;
    v21 = *(_QWORD *)v18;
    if ((v18[8] & 1) != 0)
    {
      if (v21)
      {
        if (v21 == 1)
        {
          if (v20 == 1)
            goto LABEL_12;
        }
        else if (v20 == 2)
        {
          goto LABEL_12;
        }
        goto LABEL_18;
      }
      if (v20)
        goto LABEL_18;
    }
    else if (v20 != v21)
    {
      goto LABEL_18;
    }
LABEL_12:
    v22 = (char *)a1 + *(int *)(v13 + 20);
    v23 = *(void (**)(char *, char *, uint64_t))(v5 + 16);
    v23(v10, v22, v4);
    v23(v8, (char *)a2 + *(int *)(v14 + 20), v4);
    lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
    v12 = dispatch thunk of static Equatable.== infix(_:_:)();
    v24 = *(void (**)(char *, uint64_t))(v5 + 8);
    v24(v8, v4);
    v24(v10, v4);
  }
  return v12 & 1;
}

uint64_t specialized static NCProtoStartLagunaSessionResponse.== infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t started;
  char *v12;
  void (*v13)(char *, char *, uint64_t);
  char v14;
  void (*v15)(char *, uint64_t);
  uint64_t v17;

  v4 = type metadata accessor for UnknownStorage();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v10 = (char *)&v17 - v9;
  if ((specialized static Array<A>.== infix(_:_:)(*a1, *a2) & 1) != 0
    && (specialized static Dictionary<>.== infix(_:_:)(a1[1], a2[1]) & 1) != 0
    && (specialized static Array<A>.== infix(_:_:)(a1[2], a2[2], type metadata accessor for NCProtoActiveConversation, (uint64_t (*)(char *, char *))specialized static NCProtoActiveConversation.== infix(_:_:)) & 1) != 0&& (specialized static Array<A>.== infix(_:_:)(a1[3], a2[3], type metadata accessor for NCProtoContinuityFavorite, (uint64_t (*)(char *, char *))specialized static NCProtoContinuityFavorite.== infix(_:_:)) & 1) != 0&& (specialized static Array<A>.== infix(_:_:)(a1[4], a2[4]) & 1) != 0&& (specialized static Dictionary<>.== infix(_:_:)(a1[5], a2[5]) & 1) != 0)
  {
    started = type metadata accessor for NCProtoStartLagunaSessionResponse(0);
    v12 = (char *)a1 + *(int *)(started + 40);
    v13 = *(void (**)(char *, char *, uint64_t))(v5 + 16);
    v13(v10, v12, v4);
    v13(v8, (char *)a2 + *(int *)(started + 40), v4);
    lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
    v14 = dispatch thunk of static Equatable.== infix(_:_:)();
    v15 = *(void (**)(char *, uint64_t))(v5 + 8);
    v15(v8, v4);
    v15(v10, v4);
  }
  else
  {
    v14 = 0;
  }
  return v14 & 1;
}

uint64_t specialized static NCProtoGetImageForContactResponse.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  unint64_t v16;
  int v17;
  void (*v18)(_BYTE *, uint64_t, uint64_t);
  char v19;
  void (*v20)(_BYTE *, uint64_t);
  _BYTE v22[12];
  int v23;

  v4 = type metadata accessor for UnknownStorage();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x24BDAC7A8](v4);
  v8 = &v22[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x24BDAC7A8](v6);
  v10 = &v22[-v9];
  v11 = *(int *)(type metadata accessor for NCProtoGetImageForContactResponse(0) + 20);
  v12 = *(_QWORD *)(a1 + v11);
  v13 = *(_QWORD *)(a1 + v11 + 8);
  v14 = (uint64_t *)(a2 + v11);
  v15 = *v14;
  v16 = v14[1];
  if (v13 >> 60 == 15)
  {
    if (v16 >> 60 == 15)
      goto LABEL_7;
    goto LABEL_5;
  }
  if (v16 >> 60 == 15)
  {
LABEL_5:
    outlined copy of Data?(v12, v13);
    outlined copy of Data?(v15, v16);
    outlined consume of Data?(v12, v13);
    outlined consume of Data?(v15, v16);
LABEL_8:
    v19 = 0;
    return v19 & 1;
  }
  outlined copy of Data?(v12, v13);
  outlined copy of Data?(v15, v16);
  specialized static Data.== infix(_:_:)(v12, v13);
  v23 = v17;
  outlined consume of Data?(v15, v16);
  outlined consume of Data?(v12, v13);
  if ((v23 & 1) == 0)
    goto LABEL_8;
LABEL_7:
  v18 = *(void (**)(_BYTE *, uint64_t, uint64_t))(v5 + 16);
  v18(v10, a1, v4);
  v18(v8, a2, v4);
  lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
  v19 = dispatch thunk of static Equatable.== infix(_:_:)();
  v20 = *(void (**)(_BYTE *, uint64_t))(v5 + 8);
  v20(v8, v4);
  v20(v10, v4);
  return v19 & 1;
}

uint64_t specialized static NCProtoStartLagunaSessionRequest.== infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t started;
  char *v12;
  void (*v13)(char *, char *, uint64_t);
  char v14;
  void (*v15)(char *, uint64_t);
  uint64_t v17;

  v4 = type metadata accessor for UnknownStorage();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v10 = (char *)&v17 - v9;
  if ((specialized static Array<A>.== infix(_:_:)(*a1, *a2) & 1) != 0)
  {
    started = type metadata accessor for NCProtoStartLagunaSessionRequest(0);
    v12 = (char *)a1 + *(int *)(started + 20);
    v13 = *(void (**)(char *, char *, uint64_t))(v5 + 16);
    v13(v10, v12, v4);
    v13(v8, (char *)a2 + *(int *)(started + 20), v4);
    lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
    v14 = dispatch thunk of static Equatable.== infix(_:_:)();
    v15 = *(void (**)(char *, uint64_t))(v5 + 8);
    v15(v8, v4);
    v15(v10, v4);
  }
  else
  {
    v14 = 0;
  }
  return v14 & 1;
}

uint64_t specialized static NCProtoRecentCallsDidChangeEvent.== infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  void (*v13)(char *, char *, uint64_t);
  char v14;
  void (*v15)(char *, uint64_t);
  uint64_t v17;

  v4 = type metadata accessor for UnknownStorage();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v10 = (char *)&v17 - v9;
  if ((specialized static Array<A>.== infix(_:_:)(*a1, *a2) & 1) != 0
    && (specialized static Dictionary<>.== infix(_:_:)(a1[1], a2[1]) & 1) != 0
    && (specialized static Dictionary<>.== infix(_:_:)(a1[2], a2[2]) & 1) != 0)
  {
    v11 = type metadata accessor for NCProtoRecentCallsDidChangeEvent(0);
    v12 = (char *)a1 + *(int *)(v11 + 28);
    v13 = *(void (**)(char *, char *, uint64_t))(v5 + 16);
    v13(v10, v12, v4);
    v13(v8, (char *)a2 + *(int *)(v11 + 28), v4);
    lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
    v14 = dispatch thunk of static Equatable.== infix(_:_:)();
    v15 = *(void (**)(char *, uint64_t))(v5 + 8);
    v15(v8, v4);
    v15(v10, v4);
  }
  else
  {
    v14 = 0;
  }
  return v14 & 1;
}

uint64_t specialized static NCProtoStartConversationRequest.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t *v12;
  char v13;
  uint64_t *v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(char *, uint64_t, uint64_t);
  char v19;
  void (*v20)(char *, uint64_t);
  uint64_t v22;

  v4 = type metadata accessor for UnknownStorage();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)&v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v10 = (char *)&v22 - v9;
  v11 = *(int *)(type metadata accessor for NCProtoStartConversationRequest(0) + 20);
  v12 = (uint64_t *)(a1 + v11);
  v13 = *(_BYTE *)(a1 + v11 + 9);
  v14 = (uint64_t *)(a2 + v11);
  v15 = *(_BYTE *)(a2 + v11 + 9);
  if ((v13 & 1) == 0)
  {
    if ((v15 & 1) == 0)
    {
      v16 = *v12;
      v17 = *v14;
      if ((v14[1] & 1) != 0)
        __asm { BR              X11 }
      if (v16 == v17)
        goto LABEL_7;
    }
LABEL_9:
    v19 = 0;
    return v19 & 1;
  }
  if ((v15 & 1) == 0)
    goto LABEL_9;
LABEL_7:
  v18 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  v18(v10, a1, v4);
  v18(v8, a2, v4);
  lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
  v19 = dispatch thunk of static Equatable.== infix(_:_:)();
  v20 = *(void (**)(char *, uint64_t))(v5 + 8);
  v20(v8, v4);
  v20(v10, v4);
  return v19 & 1;
}

uint64_t specialized static NCProtoSuggestionAdvertisement.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  BOOL v11;
  char v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(char *, uint64_t, uint64_t);
  void (*v19)(char *, uint64_t);
  uint64_t v21;

  v4 = type metadata accessor for UnknownStorage();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v10 = (char *)&v21 - v9;
  v11 = *(_QWORD *)a1 == *(_QWORD *)a2 && *(_QWORD *)(a1 + 8) == *(_QWORD *)(a2 + 8);
  if (v11 || (v12 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
  {
    v13 = *(_QWORD *)(a1 + 16) == *(_QWORD *)(a2 + 16) && *(_QWORD *)(a1 + 24) == *(_QWORD *)(a2 + 24);
    if (v13 || (v12 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
    {
      v14 = *(_QWORD *)(a1 + 32);
      v15 = *(_QWORD *)(a2 + 32);
      if (*(_BYTE *)(a1 + 40))
        v14 = v14 != 0;
      if (*(_BYTE *)(a2 + 40) == 1)
      {
        if (v15)
        {
          if (v14 != 1)
          {
LABEL_16:
            v12 = 0;
            return v12 & 1;
          }
        }
        else if (v14)
        {
          goto LABEL_16;
        }
      }
      else if (v14 != v15)
      {
        goto LABEL_16;
      }
      v16 = type metadata accessor for NCProtoSuggestionAdvertisement(0);
      v17 = a1 + *(int *)(v16 + 28);
      v18 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
      v18(v10, v17, v4);
      v18(v8, a2 + *(int *)(v16 + 28), v4);
      lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
      v12 = dispatch thunk of static Equatable.== infix(_:_:)();
      v19 = *(void (**)(char *, uint64_t))(v5 + 8);
      v19(v8, v4);
      v19(v10, v4);
    }
  }
  return v12 & 1;
}

uint64_t specialized static NCProtoLagunaConnectionRequest.== infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int (*v33)(uint64_t, uint64_t, uint64_t);
  uint64_t v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void (*v40)(char *, char *, uint64_t);
  char *v41;
  char *v42;
  char *v43;
  char v44;
  void (*v45)(char *, uint64_t);
  uint64_t v47;
  char *v48;
  char *v49;
  char *v50;
  char *v51;
  char *v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t *v56;

  v56 = a2;
  v3 = type metadata accessor for UnknownStorage();
  v54 = *(_QWORD *)(v3 - 8);
  v55 = v3;
  v4 = MEMORY[0x24BDAC7A8](v3);
  v53 = (char *)&v47 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v4);
  v52 = (char *)&v47 - v6;
  v7 = type metadata accessor for NCProtoCallState(0);
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)&v47 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (NCProtoCallState?, NCProtoCallState?));
  MEMORY[0x24BDAC7A8](v11);
  v13 = (char *)&v47 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NCProtoCallState?);
  v15 = MEMORY[0x24BDAC7A8](v14);
  v17 = (char *)&v47 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = MEMORY[0x24BDAC7A8](v15);
  v20 = (char *)&v47 - v19;
  MEMORY[0x24BDAC7A8](v18);
  v22 = (char *)&v47 - v21;
  v23 = a1;
  v24 = *a1;
  v25 = v56;
  if ((specialized static Array<A>.== infix(_:_:)(v24, *v56) & 1) == 0)
    goto LABEL_15;
  v50 = v22;
  v51 = v20;
  v48 = v10;
  v49 = v17;
  if ((specialized static Dictionary<>.== infix(_:_:)(v23[1], v25[1]) & 1) == 0)
    goto LABEL_15;
  v26 = v25;
  v27 = type metadata accessor for NCProtoLagunaConnectionRequest(0);
  v28 = (uint64_t)v50;
  outlined init with copy of NCProtoContactInfo?((uint64_t)v23 + *(int *)(v27 + 44), (uint64_t)v50, &demangling cache variable for type metadata for NCProtoCallState?);
  v47 = v27;
  v29 = (uint64_t)v51;
  outlined init with copy of NCProtoContactInfo?((uint64_t)v26 + *(int *)(v27 + 44), (uint64_t)v51, &demangling cache variable for type metadata for NCProtoCallState?);
  v30 = *(int *)(v11 + 48);
  v31 = (uint64_t)v13;
  v32 = (uint64_t)&v13[v30];
  outlined init with copy of NCProtoContactInfo?(v28, (uint64_t)v13, &demangling cache variable for type metadata for NCProtoCallState?);
  outlined init with copy of NCProtoContactInfo?(v29, v32, &demangling cache variable for type metadata for NCProtoCallState?);
  v33 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48);
  if (v33(v31, 1, v7) != 1)
  {
    v34 = (uint64_t)v49;
    outlined init with copy of NCProtoContactInfo?(v31, (uint64_t)v49, &demangling cache variable for type metadata for NCProtoCallState?);
    if (v33(v32, 1, v7) != 1)
    {
      v35 = (uint64_t)v48;
      outlined init with take of NCProtoContactInfo(v32, (uint64_t)v48, type metadata accessor for NCProtoCallState);
      v36 = specialized static NCProtoCallState.== infix(_:_:)(v34, v35);
      outlined destroy of NCProtoContactInfo(v35, type metadata accessor for NCProtoCallState);
      outlined destroy of NCProtoContactInfo?((uint64_t)v51, &demangling cache variable for type metadata for NCProtoCallState?);
      outlined destroy of NCProtoContactInfo?(v28, &demangling cache variable for type metadata for NCProtoCallState?);
      outlined destroy of NCProtoContactInfo(v34, type metadata accessor for NCProtoCallState);
      outlined destroy of NCProtoContactInfo?(v31, &demangling cache variable for type metadata for NCProtoCallState?);
      if ((v36 & 1) != 0)
        goto LABEL_10;
LABEL_15:
      v44 = 0;
      return v44 & 1;
    }
    outlined destroy of NCProtoContactInfo?((uint64_t)v51, &demangling cache variable for type metadata for NCProtoCallState?);
    outlined destroy of NCProtoContactInfo?(v28, &demangling cache variable for type metadata for NCProtoCallState?);
    outlined destroy of NCProtoContactInfo(v34, type metadata accessor for NCProtoCallState);
LABEL_8:
    outlined destroy of NCProtoContactInfo?(v31, &demangling cache variable for type metadata for (NCProtoCallState?, NCProtoCallState?));
    goto LABEL_15;
  }
  outlined destroy of NCProtoContactInfo?(v29, &demangling cache variable for type metadata for NCProtoCallState?);
  outlined destroy of NCProtoContactInfo?(v28, &demangling cache variable for type metadata for NCProtoCallState?);
  if (v33(v32, 1, v7) != 1)
    goto LABEL_8;
  outlined destroy of NCProtoContactInfo?(v31, &demangling cache variable for type metadata for NCProtoCallState?);
LABEL_10:
  if ((specialized static Array<A>.== infix(_:_:)(v23[2], v26[2], type metadata accessor for NCProtoActiveConversation, (uint64_t (*)(char *, char *))specialized static NCProtoActiveConversation.== infix(_:_:)) & 1) == 0|| (specialized static Array<A>.== infix(_:_:)(v23[3], v26[3], type metadata accessor for NCProtoContinuityFavorite, (uint64_t (*)(char *, char *))specialized static NCProtoContinuityFavorite.== infix(_:_:)) & 1) == 0|| (specialized static Array<A>.== infix(_:_:)(v23[4], v26[4]) & 1) == 0|| (specialized static Dictionary<>.== infix(_:_:)(v23[5], v26[5]) & 1) == 0)
  {
    goto LABEL_15;
  }
  v37 = v47;
  v39 = v54;
  v38 = v55;
  v40 = *(void (**)(char *, char *, uint64_t))(v54 + 16);
  v41 = v52;
  v40(v52, (char *)v23 + *(int *)(v47 + 40), v55);
  v42 = (char *)v26 + *(int *)(v37 + 40);
  v43 = v53;
  v40(v53, v42, v38);
  lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
  v44 = dispatch thunk of static Equatable.== infix(_:_:)();
  v45 = *(void (**)(char *, uint64_t))(v39 + 8);
  v45(v43, v38);
  v45(v41, v38);
  return v44 & 1;
}

uint64_t specialized static NCProtoDeclineContinuityCallRequest.== infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  char v19;
  void (*v20)(char *, uint64_t, uint64_t);
  void (*v21)(char *, uint64_t);
  uint64_t v23;

  v6 = type metadata accessor for UnknownStorage();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = MEMORY[0x24BDAC7A8](v6);
  v10 = (char *)&v23 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v8);
  v12 = (char *)&v23 - v11;
  v13 = *(int *)(a3(0) + 20);
  v14 = (_QWORD *)(a1 + v13);
  v15 = *(_QWORD *)(a1 + v13 + 8);
  v16 = (_QWORD *)(a2 + v13);
  v17 = v16[1];
  if (!v15)
  {
    if (!v17)
    {
LABEL_11:
      v20 = *(void (**)(char *, uint64_t, uint64_t))(v7 + 16);
      v20(v12, a1, v6);
      v20(v10, a2, v6);
      lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
      v19 = dispatch thunk of static Equatable.== infix(_:_:)();
      v21 = *(void (**)(char *, uint64_t))(v7 + 8);
      v21(v10, v6);
      v21(v12, v6);
      return v19 & 1;
    }
LABEL_10:
    v19 = 0;
    return v19 & 1;
  }
  if (!v17)
    goto LABEL_10;
  if (*v14 == *v16 && v15 == v17)
    goto LABEL_11;
  v19 = 0;
  if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    goto LABEL_11;
  return v19 & 1;
}

uint64_t specialized static NCProtoStartedSessionEvent.== infix(_:_:)(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  char v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int (*v27)(uint64_t, uint64_t, uint64_t);
  uint64_t *v28;
  uint64_t *v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  char v34;
  char *v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  void (*v42)(char *, char *, uint64_t);
  char *v43;
  char *v44;
  char *v45;
  void (*v46)(char *, uint64_t);
  uint64_t v48;
  uint64_t *v49;
  uint64_t v50;
  char *v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t *v55;

  v4 = type metadata accessor for UnknownStorage();
  v53 = *(_QWORD *)(v4 - 8);
  v54 = v4;
  v5 = MEMORY[0x24BDAC7A8](v4);
  v52 = (char *)&v48 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v5);
  v51 = (char *)&v48 - v7;
  v8 = type metadata accessor for NCProtoMemberAssociationPrimaryInfo(0);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (uint64_t *)((char *)&v48 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (NCProtoMemberAssociationPrimaryInfo?, NCProtoMemberAssociationPrimaryInfo?));
  MEMORY[0x24BDAC7A8](v12);
  v14 = (char *)&v48 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NCProtoMemberAssociationPrimaryInfo?);
  v16 = MEMORY[0x24BDAC7A8](v15);
  v55 = (uint64_t *)((char *)&v48 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
  v18 = MEMORY[0x24BDAC7A8](v16);
  v20 = (char *)&v48 - v19;
  MEMORY[0x24BDAC7A8](v18);
  v22 = (char *)&v48 - v21;
  if (*a1 == *a2 && a1[1] == a2[1] || (v23 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
  {
    specialized static Data.== infix(_:_:)(a1[2], a1[3]);
    if ((v24 & 1) == 0)
      goto LABEL_20;
    v49 = v11;
    v25 = type metadata accessor for NCProtoStartedSessionEvent(0);
    outlined init with copy of NCProtoContactInfo?((uint64_t)a1 + *(int *)(v25 + 28), (uint64_t)v22, &demangling cache variable for type metadata for NCProtoMemberAssociationPrimaryInfo?);
    v50 = v25;
    outlined init with copy of NCProtoContactInfo?((uint64_t)a2 + *(int *)(v25 + 28), (uint64_t)v20, &demangling cache variable for type metadata for NCProtoMemberAssociationPrimaryInfo?);
    v26 = (uint64_t)&v14[*(int *)(v12 + 48)];
    outlined init with copy of NCProtoContactInfo?((uint64_t)v22, (uint64_t)v14, &demangling cache variable for type metadata for NCProtoMemberAssociationPrimaryInfo?);
    outlined init with copy of NCProtoContactInfo?((uint64_t)v20, v26, &demangling cache variable for type metadata for NCProtoMemberAssociationPrimaryInfo?);
    v27 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
    if (v27((uint64_t)v14, 1, v8) == 1)
    {
      outlined destroy of NCProtoContactInfo?((uint64_t)v20, &demangling cache variable for type metadata for NCProtoMemberAssociationPrimaryInfo?);
      outlined destroy of NCProtoContactInfo?((uint64_t)v22, &demangling cache variable for type metadata for NCProtoMemberAssociationPrimaryInfo?);
      if (v27(v26, 1, v8) == 1)
      {
        outlined destroy of NCProtoContactInfo?((uint64_t)v14, &demangling cache variable for type metadata for NCProtoMemberAssociationPrimaryInfo?);
LABEL_12:
        v31 = v50;
        v32 = *(int *)(v50 + 32);
        v33 = (_QWORD *)((char *)a1 + v32);
        v34 = *((_BYTE *)a1 + v32 + 9);
        v35 = (char *)a2 + v32;
        v36 = *((_BYTE *)a2 + v32 + 9);
        if ((v34 & 1) != 0)
        {
          if ((v36 & 1) != 0)
          {
LABEL_18:
            v39 = (char *)a1 + *(int *)(v50 + 24);
            v41 = v53;
            v40 = v54;
            v42 = *(void (**)(char *, char *, uint64_t))(v53 + 16);
            v43 = v51;
            v42(v51, v39, v54);
            v44 = (char *)a2 + *(int *)(v31 + 24);
            v45 = v52;
            v42(v52, v44, v40);
            lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
            v23 = dispatch thunk of static Equatable.== infix(_:_:)();
            v46 = *(void (**)(char *, uint64_t))(v41 + 8);
            v46(v45, v40);
            v46(v43, v40);
            return v23 & 1;
          }
        }
        else if ((v36 & 1) == 0)
        {
          v37 = *v33;
          v38 = *(_QWORD *)v35;
          if ((v35[8] & 1) != 0)
            __asm { BR              X11 }
          if (v37 == v38)
            goto LABEL_18;
        }
LABEL_20:
        v23 = 0;
        return v23 & 1;
      }
    }
    else
    {
      v28 = v55;
      outlined init with copy of NCProtoContactInfo?((uint64_t)v14, (uint64_t)v55, &demangling cache variable for type metadata for NCProtoMemberAssociationPrimaryInfo?);
      if (v27(v26, 1, v8) != 1)
      {
        v29 = v49;
        outlined init with take of NCProtoContactInfo(v26, (uint64_t)v49, type metadata accessor for NCProtoMemberAssociationPrimaryInfo);
        v30 = specialized static NCProtoMemberAssociationPrimaryInfo.== infix(_:_:)(v28, v29);
        outlined destroy of NCProtoContactInfo((uint64_t)v29, type metadata accessor for NCProtoMemberAssociationPrimaryInfo);
        outlined destroy of NCProtoContactInfo?((uint64_t)v20, &demangling cache variable for type metadata for NCProtoMemberAssociationPrimaryInfo?);
        outlined destroy of NCProtoContactInfo?((uint64_t)v22, &demangling cache variable for type metadata for NCProtoMemberAssociationPrimaryInfo?);
        outlined destroy of NCProtoContactInfo((uint64_t)v28, type metadata accessor for NCProtoMemberAssociationPrimaryInfo);
        outlined destroy of NCProtoContactInfo?((uint64_t)v14, &demangling cache variable for type metadata for NCProtoMemberAssociationPrimaryInfo?);
        if ((v30 & 1) == 0)
          goto LABEL_20;
        goto LABEL_12;
      }
      outlined destroy of NCProtoContactInfo?((uint64_t)v20, &demangling cache variable for type metadata for NCProtoMemberAssociationPrimaryInfo?);
      outlined destroy of NCProtoContactInfo?((uint64_t)v22, &demangling cache variable for type metadata for NCProtoMemberAssociationPrimaryInfo?);
      outlined destroy of NCProtoContactInfo((uint64_t)v28, type metadata accessor for NCProtoMemberAssociationPrimaryInfo);
    }
    outlined destroy of NCProtoContactInfo?((uint64_t)v14, &demangling cache variable for type metadata for (NCProtoMemberAssociationPrimaryInfo?, NCProtoMemberAssociationPrimaryInfo?));
    v23 = 0;
  }
  return v23 & 1;
}

uint64_t specialized static NCProtoDeviceTokenResponse.== infix(_:_:)(_QWORD *a1, char *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  _BYTE *v10;
  BOOL v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  unint64_t v19;
  int v20;
  char *v21;
  uint64_t v22;
  void (*v23)(_BYTE *, char *, uint64_t);
  void (*v24)(_BYTE *, uint64_t);
  _BYTE v26[4];
  int v27;
  uint64_t v28;

  v4 = type metadata accessor for UnknownStorage();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x24BDAC7A8](v4);
  v8 = &v26[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x24BDAC7A8](v6);
  v10 = &v26[-v9];
  v11 = *a1 == *(_QWORD *)a2 && a1[1] == *((_QWORD *)a2 + 1);
  if (v11 || (v12 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
  {
    v28 = v5;
    v13 = type metadata accessor for NCProtoDeviceTokenResponse(0);
    v14 = *(int *)(v13 + 24);
    v15 = *(_QWORD *)((char *)a1 + v14);
    v16 = *(_QWORD *)((char *)a1 + v14 + 8);
    v17 = (uint64_t *)&a2[v14];
    v18 = *v17;
    v19 = v17[1];
    if (v16 >> 60 == 15)
    {
      if (v19 >> 60 == 15)
        goto LABEL_12;
    }
    else if (v19 >> 60 != 15)
    {
      outlined copy of Data?(v15, v16);
      outlined copy of Data?(v18, v19);
      specialized static Data.== infix(_:_:)(v15, v16);
      v27 = v20;
      outlined consume of Data?(v18, v19);
      outlined consume of Data?(v15, v16);
      if ((v27 & 1) != 0)
      {
LABEL_12:
        v21 = (char *)a1 + *(int *)(v13 + 20);
        v22 = v28;
        v23 = *(void (**)(_BYTE *, char *, uint64_t))(v28 + 16);
        v23(v10, v21, v4);
        v23(v8, &a2[*(int *)(v13 + 20)], v4);
        lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
        v12 = dispatch thunk of static Equatable.== infix(_:_:)();
        v24 = *(void (**)(_BYTE *, uint64_t))(v22 + 8);
        v24(v8, v4);
        v24(v10, v4);
        return v12 & 1;
      }
LABEL_13:
      v12 = 0;
      return v12 & 1;
    }
    outlined copy of Data?(v15, v16);
    outlined copy of Data?(v18, v19);
    outlined consume of Data?(v15, v16);
    outlined consume of Data?(v18, v19);
    goto LABEL_13;
  }
  return v12 & 1;
}

uint64_t specialized static NCProtoDisconnectResponse.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  char v11;
  uint64_t v12;
  unsigned __int8 *v13;
  void (*v14)(char *, unsigned __int8 *, uint64_t);
  void (*v15)(char *, uint64_t);
  uint64_t v17;

  v4 = type metadata accessor for UnknownStorage();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v10 = (char *)&v17 - v9;
  if (*a1 == *a2)
  {
    v12 = type metadata accessor for NCProtoDisconnectResponse(0);
    v13 = &a1[*(int *)(v12 + 20)];
    v14 = *(void (**)(char *, unsigned __int8 *, uint64_t))(v5 + 16);
    v14(v10, v13, v4);
    v14(v8, &a2[*(int *)(v12 + 20)], v4);
    lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
    v11 = dispatch thunk of static Equatable.== infix(_:_:)();
    v15 = *(void (**)(char *, uint64_t))(v5 + 8);
    v15(v8, v4);
    v15(v10, v4);
  }
  else
  {
    v11 = 0;
  }
  return v11 & 1;
}

uint64_t specialized static NCProtoMemberAssociationPrimaryInfo.== infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  _BYTE *v10;
  int *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  BOOL v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  unint64_t v24;
  int v25;
  uint64_t v26;
  _QWORD *v27;
  char v28;
  _QWORD *v29;
  int v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  void (*v38)(_BYTE *, char *, uint64_t);
  void (*v39)(_BYTE *, uint64_t);
  _BYTE v41[4];
  int v42;
  uint64_t v43;

  v4 = type metadata accessor for UnknownStorage();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x24BDAC7A8](v4);
  v8 = &v41[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x24BDAC7A8](v6);
  v10 = &v41[-v9];
  v11 = (int *)type metadata accessor for NCProtoMemberAssociationPrimaryInfo(0);
  v12 = v11[6];
  v13 = (uint64_t *)((char *)a1 + v12);
  v14 = *(uint64_t *)((char *)a1 + v12 + 8);
  v15 = (uint64_t *)((char *)a2 + v12);
  v16 = v15[1];
  if (!v14)
  {
    if (v16)
      goto LABEL_31;
    goto LABEL_10;
  }
  if (!v16)
    goto LABEL_31;
  v17 = *v13 == *v15 && v14 == v16;
  if (v17 || (v18 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
  {
LABEL_10:
    v43 = v5;
    v19 = v11[7];
    v20 = *(uint64_t *)((char *)a1 + v19);
    v21 = *(uint64_t *)((char *)a1 + v19 + 8);
    v22 = (uint64_t *)((char *)a2 + v19);
    v23 = *v22;
    v24 = v22[1];
    if (v21 >> 60 == 15)
    {
      if (v24 >> 60 == 15)
      {
LABEL_16:
        v26 = v11[8];
        v27 = (uint64_t *)((char *)a1 + v26);
        v28 = *((_BYTE *)a1 + v26 + 8);
        v29 = (uint64_t *)((char *)a2 + v26);
        v30 = *((unsigned __int8 *)a2 + v26 + 8);
        if ((v28 & 1) != 0)
        {
          if (!v30)
            goto LABEL_31;
        }
        else
        {
          if (*v27 != *v29)
            LOBYTE(v30) = 1;
          if ((v30 & 1) != 0)
            goto LABEL_31;
        }
        v31 = v11[9];
        v32 = (uint64_t *)((char *)a1 + v31);
        v33 = *(uint64_t *)((char *)a1 + v31 + 8);
        v34 = (uint64_t *)((char *)a2 + v31);
        v35 = v34[1];
        if (v33)
        {
          v36 = v43;
          if (!v35)
            goto LABEL_31;
          if (*v32 != *v34 || v33 != v35)
          {
            v18 = 0;
            if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
              return v18 & 1;
          }
        }
        else
        {
          v36 = v43;
          if (v35)
            goto LABEL_31;
        }
        if ((specialized static Array<A>.== infix(_:_:)(*a1, *a2) & 1) != 0)
        {
          v37 = (char *)a1 + v11[5];
          v38 = *(void (**)(_BYTE *, char *, uint64_t))(v36 + 16);
          v38(v10, v37, v4);
          v38(v8, (char *)a2 + v11[5], v4);
          lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
          v18 = dispatch thunk of static Equatable.== infix(_:_:)();
          v39 = *(void (**)(_BYTE *, uint64_t))(v36 + 8);
          v39(v8, v4);
          v39(v10, v4);
          return v18 & 1;
        }
LABEL_31:
        v18 = 0;
        return v18 & 1;
      }
    }
    else if (v24 >> 60 != 15)
    {
      outlined copy of Data?(v20, v21);
      outlined copy of Data?(v23, v24);
      specialized static Data.== infix(_:_:)(v20, v21);
      v42 = v25;
      outlined consume of Data?(v23, v24);
      outlined consume of Data?(v20, v21);
      if ((v42 & 1) == 0)
        goto LABEL_31;
      goto LABEL_16;
    }
    outlined copy of Data?(v20, v21);
    outlined copy of Data?(v23, v24);
    outlined consume of Data?(v20, v21);
    outlined consume of Data?(v23, v24);
    goto LABEL_31;
  }
  return v18 & 1;
}

uint64_t specialized static NCProtoDeviceTokenRequest.== infix(_:_:)(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  int *v34;
  uint64_t v35;
  unsigned int (*v36)(uint64_t, uint64_t, uint64_t);
  uint64_t *v37;
  uint64_t v38;
  uint64_t *v39;
  char v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unsigned int (*v45)(uint64_t, uint64_t, uint64_t);
  uint64_t v46;
  uint64_t v47;
  uint64_t v49;
  char v50;
  uint64_t v51;
  int v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t *v56;
  char v57;
  char *v58;
  char v59;
  uint64_t v60;
  void (*v61)(char *, char *, uint64_t);
  char *v62;
  char *v63;
  void (*v64)(char *, uint64_t);
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  _QWORD *v81;
  _QWORD *v82;

  v4 = type metadata accessor for UnknownStorage();
  v71 = *(_QWORD *)(v4 - 8);
  v5 = MEMORY[0x24BDAC7A8](v4);
  v70 = (char *)&v67 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v5);
  v69 = (char *)&v67 - v7;
  v79 = type metadata accessor for NCProtoCallState(0);
  v76 = *(_QWORD *)(v79 - 8);
  MEMORY[0x24BDAC7A8](v79);
  v72 = (uint64_t)&v67 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v75 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (NCProtoCallState?, NCProtoCallState?));
  MEMORY[0x24BDAC7A8](v75);
  v80 = (uint64_t)&v67 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NCProtoCallState?);
  v11 = MEMORY[0x24BDAC7A8](v10);
  v73 = (uint64_t)&v67 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = MEMORY[0x24BDAC7A8](v11);
  v77 = (uint64_t)&v67 - v14;
  MEMORY[0x24BDAC7A8](v13);
  v78 = (uint64_t)&v67 - v15;
  v16 = type metadata accessor for NCProtoMemberAssociationPrimaryInfo(0);
  v17 = *(_QWORD *)(v16 - 8);
  MEMORY[0x24BDAC7A8](v16);
  v74 = (uint64_t *)((char *)&v67 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0));
  v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (NCProtoMemberAssociationPrimaryInfo?, NCProtoMemberAssociationPrimaryInfo?));
  MEMORY[0x24BDAC7A8](v19);
  v21 = (char *)&v67 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NCProtoMemberAssociationPrimaryInfo?);
  v23 = MEMORY[0x24BDAC7A8](v22);
  v25 = (uint64_t *)((char *)&v67 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0));
  v26 = MEMORY[0x24BDAC7A8](v23);
  v28 = (char *)&v67 - v27;
  MEMORY[0x24BDAC7A8](v26);
  v30 = (char *)&v67 - v29;
  v31 = *a1;
  v32 = a1[1];
  v81 = a1;
  v82 = a2;
  if (v31 == *a2 && v32 == a2[1] || (v33 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
  {
    v68 = v4;
    v34 = (int *)type metadata accessor for NCProtoDeviceTokenRequest(0);
    outlined init with copy of NCProtoContactInfo?((uint64_t)v81 + v34[6], (uint64_t)v30, &demangling cache variable for type metadata for NCProtoMemberAssociationPrimaryInfo?);
    outlined init with copy of NCProtoContactInfo?((uint64_t)v82 + v34[6], (uint64_t)v28, &demangling cache variable for type metadata for NCProtoMemberAssociationPrimaryInfo?);
    v35 = (uint64_t)&v21[*(int *)(v19 + 48)];
    outlined init with copy of NCProtoContactInfo?((uint64_t)v30, (uint64_t)v21, &demangling cache variable for type metadata for NCProtoMemberAssociationPrimaryInfo?);
    outlined init with copy of NCProtoContactInfo?((uint64_t)v28, v35, &demangling cache variable for type metadata for NCProtoMemberAssociationPrimaryInfo?);
    v36 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v17 + 48);
    if (v36((uint64_t)v21, 1, v16) == 1)
    {
      outlined destroy of NCProtoContactInfo?((uint64_t)v28, &demangling cache variable for type metadata for NCProtoMemberAssociationPrimaryInfo?);
      outlined destroy of NCProtoContactInfo?((uint64_t)v30, &demangling cache variable for type metadata for NCProtoMemberAssociationPrimaryInfo?);
      if (v36(v35, 1, v16) == 1)
      {
        outlined destroy of NCProtoContactInfo?((uint64_t)v21, &demangling cache variable for type metadata for NCProtoMemberAssociationPrimaryInfo?);
LABEL_11:
        v41 = v78;
        outlined init with copy of NCProtoContactInfo?((uint64_t)v81 + v34[7], v78, &demangling cache variable for type metadata for NCProtoCallState?);
        v42 = v77;
        outlined init with copy of NCProtoContactInfo?((uint64_t)v82 + v34[7], v77, &demangling cache variable for type metadata for NCProtoCallState?);
        v43 = v80;
        v44 = v80 + *(int *)(v75 + 48);
        outlined init with copy of NCProtoContactInfo?(v41, v80, &demangling cache variable for type metadata for NCProtoCallState?);
        outlined init with copy of NCProtoContactInfo?(v42, v44, &demangling cache variable for type metadata for NCProtoCallState?);
        v45 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v76 + 48);
        v46 = v79;
        if (v45(v43, 1, v79) == 1)
        {
          outlined destroy of NCProtoContactInfo?(v42, &demangling cache variable for type metadata for NCProtoCallState?);
          outlined destroy of NCProtoContactInfo?(v41, &demangling cache variable for type metadata for NCProtoCallState?);
          if (v45(v44, 1, v46) == 1)
          {
            outlined destroy of NCProtoContactInfo?(v43, &demangling cache variable for type metadata for NCProtoCallState?);
LABEL_21:
            v51 = v34[8];
            v52 = *((unsigned __int8 *)v81 + v51);
            v53 = *((unsigned __int8 *)v82 + v51);
            if (v52 == 2)
            {
              v54 = v68;
              if (v53 == 2)
                goto LABEL_26;
            }
            else
            {
              v54 = v68;
              if (v53 != 2 && ((((v53 & 1) == 0) ^ v52) & 1) != 0)
              {
LABEL_26:
                v55 = v34[9];
                v56 = (_QWORD *)((char *)v81 + v55);
                v57 = *((_BYTE *)v81 + v55 + 9);
                v58 = (char *)v82 + v55;
                v59 = *((_BYTE *)v82 + v55 + 9);
                if ((v57 & 1) != 0)
                {
                  if ((v59 & 1) != 0)
                  {
LABEL_28:
                    v60 = v71;
                    v61 = *(void (**)(char *, char *, uint64_t))(v71 + 16);
                    v62 = v69;
                    v61(v69, (char *)v81 + v34[5], v54);
                    v63 = v70;
                    v61(v70, (char *)v82 + v34[5], v54);
                    lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
                    v33 = dispatch thunk of static Equatable.== infix(_:_:)();
                    v64 = *(void (**)(char *, uint64_t))(v60 + 8);
                    v64(v63, v54);
                    v64(v62, v54);
                    return v33 & 1;
                  }
                }
                else if ((v59 & 1) == 0)
                {
                  v65 = *v56;
                  v66 = *(_QWORD *)v58;
                  if ((v58[8] & 1) != 0)
                    __asm { BR              X11 }
                  if (v65 == v66)
                    goto LABEL_28;
                }
              }
            }
LABEL_18:
            v33 = 0;
            return v33 & 1;
          }
        }
        else
        {
          v47 = v73;
          outlined init with copy of NCProtoContactInfo?(v43, v73, &demangling cache variable for type metadata for NCProtoCallState?);
          if (v45(v44, 1, v46) != 1)
          {
            v49 = v72;
            outlined init with take of NCProtoContactInfo(v44, v72, type metadata accessor for NCProtoCallState);
            v50 = specialized static NCProtoCallState.== infix(_:_:)(v47, v49);
            outlined destroy of NCProtoContactInfo(v49, type metadata accessor for NCProtoCallState);
            outlined destroy of NCProtoContactInfo?(v42, &demangling cache variable for type metadata for NCProtoCallState?);
            outlined destroy of NCProtoContactInfo?(v41, &demangling cache variable for type metadata for NCProtoCallState?);
            outlined destroy of NCProtoContactInfo(v47, type metadata accessor for NCProtoCallState);
            outlined destroy of NCProtoContactInfo?(v43, &demangling cache variable for type metadata for NCProtoCallState?);
            if ((v50 & 1) == 0)
              goto LABEL_18;
            goto LABEL_21;
          }
          outlined destroy of NCProtoContactInfo?(v42, &demangling cache variable for type metadata for NCProtoCallState?);
          outlined destroy of NCProtoContactInfo?(v41, &demangling cache variable for type metadata for NCProtoCallState?);
          outlined destroy of NCProtoContactInfo(v47, type metadata accessor for NCProtoCallState);
        }
        v37 = &demangling cache variable for type metadata for (NCProtoCallState?, NCProtoCallState?);
        v38 = v43;
LABEL_17:
        outlined destroy of NCProtoContactInfo?(v38, v37);
        goto LABEL_18;
      }
    }
    else
    {
      outlined init with copy of NCProtoContactInfo?((uint64_t)v21, (uint64_t)v25, &demangling cache variable for type metadata for NCProtoMemberAssociationPrimaryInfo?);
      if (v36(v35, 1, v16) != 1)
      {
        v39 = v74;
        outlined init with take of NCProtoContactInfo(v35, (uint64_t)v74, type metadata accessor for NCProtoMemberAssociationPrimaryInfo);
        v40 = specialized static NCProtoMemberAssociationPrimaryInfo.== infix(_:_:)(v25, v39);
        outlined destroy of NCProtoContactInfo((uint64_t)v39, type metadata accessor for NCProtoMemberAssociationPrimaryInfo);
        outlined destroy of NCProtoContactInfo?((uint64_t)v28, &demangling cache variable for type metadata for NCProtoMemberAssociationPrimaryInfo?);
        outlined destroy of NCProtoContactInfo?((uint64_t)v30, &demangling cache variable for type metadata for NCProtoMemberAssociationPrimaryInfo?);
        outlined destroy of NCProtoContactInfo((uint64_t)v25, type metadata accessor for NCProtoMemberAssociationPrimaryInfo);
        outlined destroy of NCProtoContactInfo?((uint64_t)v21, &demangling cache variable for type metadata for NCProtoMemberAssociationPrimaryInfo?);
        if ((v40 & 1) == 0)
          goto LABEL_18;
        goto LABEL_11;
      }
      outlined destroy of NCProtoContactInfo?((uint64_t)v28, &demangling cache variable for type metadata for NCProtoMemberAssociationPrimaryInfo?);
      outlined destroy of NCProtoContactInfo?((uint64_t)v30, &demangling cache variable for type metadata for NCProtoMemberAssociationPrimaryInfo?);
      outlined destroy of NCProtoContactInfo((uint64_t)v25, type metadata accessor for NCProtoMemberAssociationPrimaryInfo);
    }
    v37 = &demangling cache variable for type metadata for (NCProtoMemberAssociationPrimaryInfo?, NCProtoMemberAssociationPrimaryInfo?);
    v38 = (uint64_t)v21;
    goto LABEL_17;
  }
  return v33 & 1;
}

void sub_242A1267C(uint64_t a1@<X8>)
{
  if (!a1)
    JUMPOUT(0x242A125ACLL);
  JUMPOUT(0x242A124ACLL);
}

uint64_t specialized static NCProtoContactHandleAnonym.== infix(_:_:)(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  void (*v17)(char *, char *, uint64_t);
  void (*v18)(char *, uint64_t);
  uint64_t v20;

  v4 = type metadata accessor for UnknownStorage();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)&v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v10 = (char *)&v20 - v9;
  if (*a1 != *(_QWORD *)a2 || a1[1] != *(_QWORD *)(a2 + 8))
  {
    v12 = 0;
    if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
      return v12 & 1;
  }
  v13 = a1[2];
  v14 = *(_QWORD *)(a2 + 16);
  if (*(_BYTE *)(a2 + 24) != 1)
  {
    if (v13 == v14)
      goto LABEL_12;
    goto LABEL_20;
  }
  if (!v14)
  {
    if (!v13)
      goto LABEL_12;
LABEL_20:
    v12 = 0;
    return v12 & 1;
  }
  if (v14 == 1)
  {
    if (v13 != 1)
      goto LABEL_20;
    goto LABEL_12;
  }
  if (v13 != 2)
    goto LABEL_20;
LABEL_12:
  if (a1[4] == *(_QWORD *)(a2 + 32) && a1[5] == *(_QWORD *)(a2 + 40)
    || (v12 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
  {
    if (a1[6] == *(_QWORD *)(a2 + 48) && a1[7] == *(_QWORD *)(a2 + 56)
      || (v12 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
    {
      v15 = type metadata accessor for NCProtoContactHandleAnonym(0);
      v16 = (char *)a1 + *(int *)(v15 + 32);
      v17 = *(void (**)(char *, char *, uint64_t))(v5 + 16);
      v17(v10, v16, v4);
      v17(v8, (char *)(a2 + *(int *)(v15 + 32)), v4);
      lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
      v12 = dispatch thunk of static Equatable.== infix(_:_:)();
      v18 = *(void (**)(char *, uint64_t))(v5 + 8);
      v18(v8, v4);
      v18(v10, v4);
    }
  }
  return v12 & 1;
}

uint64_t specialized static NCProtoContinuityFavorite.== infix(_:_:)(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int (*v32)(uint64_t, uint64_t, uint64_t);
  uint64_t *v33;
  uint64_t v34;
  char v35;
  _QWORD *v36;
  _QWORD *v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unsigned int (*v44)(uint64_t, uint64_t, uint64_t);
  uint64_t v45;
  _QWORD *v46;
  uint64_t v48;
  char v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  void (*v54)(char *, char *, uint64_t);
  char *v55;
  char *v56;
  char *v57;
  void (*v58)(char *, uint64_t);
  uint64_t v59;
  char *v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  _QWORD *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  _QWORD *v73;
  _QWORD *v74;

  v73 = a1;
  v74 = a2;
  v2 = type metadata accessor for UnknownStorage();
  v62 = *(_QWORD *)(v2 - 8);
  v63 = v2;
  v3 = MEMORY[0x24BDAC7A8](v2);
  v61 = (char *)&v59 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v3);
  v60 = (char *)&v59 - v5;
  v70 = type metadata accessor for NCProtoContactHandleAnonym(0);
  v67 = *(_QWORD *)(v70 - 8);
  MEMORY[0x24BDAC7A8](v70);
  v64 = (uint64_t)&v59 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v66 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (NCProtoContactHandleAnonym?, NCProtoContactHandleAnonym?));
  MEMORY[0x24BDAC7A8](v66);
  v71 = (uint64_t)&v59 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NCProtoContactHandleAnonym?);
  v9 = MEMORY[0x24BDAC7A8](v8);
  v65 = (uint64_t *)((char *)&v59 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  v11 = MEMORY[0x24BDAC7A8](v9);
  v68 = (uint64_t)&v59 - v12;
  MEMORY[0x24BDAC7A8](v11);
  v69 = (uint64_t)&v59 - v13;
  v14 = type metadata accessor for NCProtoContactInfo(0);
  v15 = *(_QWORD *)(v14 - 8);
  MEMORY[0x24BDAC7A8](v14);
  v17 = (char *)&v59 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (NCProtoContactInfo?, NCProtoContactInfo?));
  MEMORY[0x24BDAC7A8](v18);
  v20 = (char *)&v59 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NCProtoContactInfo?);
  v22 = MEMORY[0x24BDAC7A8](v21);
  v24 = (uint64_t *)((char *)&v59 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0));
  v25 = MEMORY[0x24BDAC7A8](v22);
  v27 = (char *)&v59 - v26;
  MEMORY[0x24BDAC7A8](v25);
  v29 = (char *)&v59 - v28;
  v30 = type metadata accessor for NCProtoContinuityFavorite(0);
  outlined init with copy of NCProtoContactInfo?((uint64_t)v73 + *(int *)(v30 + 32), (uint64_t)v29, &demangling cache variable for type metadata for NCProtoContactInfo?);
  v72 = v30;
  outlined init with copy of NCProtoContactInfo?((uint64_t)v74 + *(int *)(v30 + 32), (uint64_t)v27, &demangling cache variable for type metadata for NCProtoContactInfo?);
  v31 = (uint64_t)&v20[*(int *)(v18 + 48)];
  outlined init with copy of NCProtoContactInfo?((uint64_t)v29, (uint64_t)v20, &demangling cache variable for type metadata for NCProtoContactInfo?);
  outlined init with copy of NCProtoContactInfo?((uint64_t)v27, v31, &demangling cache variable for type metadata for NCProtoContactInfo?);
  v32 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v15 + 48);
  if (v32((uint64_t)v20, 1, v14) == 1)
  {
    outlined destroy of NCProtoContactInfo?((uint64_t)v27, &demangling cache variable for type metadata for NCProtoContactInfo?);
    outlined destroy of NCProtoContactInfo?((uint64_t)v29, &demangling cache variable for type metadata for NCProtoContactInfo?);
    if (v32(v31, 1, v14) == 1)
    {
      outlined destroy of NCProtoContactInfo?((uint64_t)v20, &demangling cache variable for type metadata for NCProtoContactInfo?);
      goto LABEL_8;
    }
LABEL_6:
    v33 = &demangling cache variable for type metadata for (NCProtoContactInfo?, NCProtoContactInfo?);
    v34 = (uint64_t)v20;
LABEL_17:
    outlined destroy of NCProtoContactInfo?(v34, v33);
    goto LABEL_18;
  }
  outlined init with copy of NCProtoContactInfo?((uint64_t)v20, (uint64_t)v24, &demangling cache variable for type metadata for NCProtoContactInfo?);
  if (v32(v31, 1, v14) == 1)
  {
    outlined destroy of NCProtoContactInfo?((uint64_t)v27, &demangling cache variable for type metadata for NCProtoContactInfo?);
    outlined destroy of NCProtoContactInfo?((uint64_t)v29, &demangling cache variable for type metadata for NCProtoContactInfo?);
    outlined destroy of NCProtoContactInfo((uint64_t)v24, type metadata accessor for NCProtoContactInfo);
    goto LABEL_6;
  }
  outlined init with take of NCProtoContactInfo(v31, (uint64_t)v17, type metadata accessor for NCProtoContactInfo);
  v35 = specialized static NCProtoContactInfo.== infix(_:_:)(v24, v17);
  outlined destroy of NCProtoContactInfo((uint64_t)v17, type metadata accessor for NCProtoContactInfo);
  outlined destroy of NCProtoContactInfo?((uint64_t)v27, &demangling cache variable for type metadata for NCProtoContactInfo?);
  outlined destroy of NCProtoContactInfo?((uint64_t)v29, &demangling cache variable for type metadata for NCProtoContactInfo?);
  outlined destroy of NCProtoContactInfo((uint64_t)v24, type metadata accessor for NCProtoContactInfo);
  outlined destroy of NCProtoContactInfo?((uint64_t)v20, &demangling cache variable for type metadata for NCProtoContactInfo?);
  if ((v35 & 1) == 0)
  {
LABEL_18:
    v38 = 0;
    return v38 & 1;
  }
LABEL_8:
  v37 = v73;
  v36 = v74;
  if (*v73 != *v74 || v73[1] != v74[1])
  {
    v38 = 0;
    if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
      return v38 & 1;
  }
  v39 = v72;
  v40 = v69;
  outlined init with copy of NCProtoContactInfo?((uint64_t)v37 + *(int *)(v72 + 36), v69, &demangling cache variable for type metadata for NCProtoContactHandleAnonym?);
  v41 = v68;
  outlined init with copy of NCProtoContactInfo?((uint64_t)v36 + *(int *)(v39 + 36), v68, &demangling cache variable for type metadata for NCProtoContactHandleAnonym?);
  v42 = v71;
  v43 = v71 + *(int *)(v66 + 48);
  outlined init with copy of NCProtoContactInfo?(v40, v71, &demangling cache variable for type metadata for NCProtoContactHandleAnonym?);
  outlined init with copy of NCProtoContactInfo?(v41, v43, &demangling cache variable for type metadata for NCProtoContactHandleAnonym?);
  v44 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v67 + 48);
  v45 = v70;
  if (v44(v42, 1, v70) == 1)
  {
    outlined destroy of NCProtoContactInfo?(v41, &demangling cache variable for type metadata for NCProtoContactHandleAnonym?);
    outlined destroy of NCProtoContactInfo?(v40, &demangling cache variable for type metadata for NCProtoContactHandleAnonym?);
    if (v44(v43, 1, v45) == 1)
    {
      outlined destroy of NCProtoContactInfo?(v42, &demangling cache variable for type metadata for NCProtoContactHandleAnonym?);
      goto LABEL_21;
    }
    goto LABEL_16;
  }
  v46 = v65;
  outlined init with copy of NCProtoContactInfo?(v42, (uint64_t)v65, &demangling cache variable for type metadata for NCProtoContactHandleAnonym?);
  if (v44(v43, 1, v45) == 1)
  {
    outlined destroy of NCProtoContactInfo?(v41, &demangling cache variable for type metadata for NCProtoContactHandleAnonym?);
    outlined destroy of NCProtoContactInfo?(v40, &demangling cache variable for type metadata for NCProtoContactHandleAnonym?);
    outlined destroy of NCProtoContactInfo((uint64_t)v46, type metadata accessor for NCProtoContactHandleAnonym);
LABEL_16:
    v33 = &demangling cache variable for type metadata for (NCProtoContactHandleAnonym?, NCProtoContactHandleAnonym?);
    v34 = v42;
    goto LABEL_17;
  }
  v48 = v64;
  outlined init with take of NCProtoContactInfo(v43, v64, type metadata accessor for NCProtoContactHandleAnonym);
  v49 = specialized static NCProtoContactHandleAnonym.== infix(_:_:)(v46, v48);
  outlined destroy of NCProtoContactInfo(v48, type metadata accessor for NCProtoContactHandleAnonym);
  outlined destroy of NCProtoContactInfo?(v41, &demangling cache variable for type metadata for NCProtoContactHandleAnonym?);
  outlined destroy of NCProtoContactInfo?(v40, &demangling cache variable for type metadata for NCProtoContactHandleAnonym?);
  outlined destroy of NCProtoContactInfo((uint64_t)v46, type metadata accessor for NCProtoContactHandleAnonym);
  outlined destroy of NCProtoContactInfo?(v42, &demangling cache variable for type metadata for NCProtoContactHandleAnonym?);
  if ((v49 & 1) == 0)
    goto LABEL_18;
LABEL_21:
  if (v37[2] == v36[2] && v37[3] == v36[3] || (v38 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
  {
    if (v37[4] == v36[4] && v37[5] == v36[5] || (v38 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
    {
      v50 = v72;
      v51 = (char *)v37 + *(int *)(v72 + 28);
      v53 = v62;
      v52 = v63;
      v54 = *(void (**)(char *, char *, uint64_t))(v62 + 16);
      v55 = v60;
      v54(v60, v51, v63);
      v56 = (char *)v36 + *(int *)(v50 + 28);
      v57 = v61;
      v54(v61, v56, v52);
      lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
      v38 = dispatch thunk of static Equatable.== infix(_:_:)();
      v58 = *(void (**)(char *, uint64_t))(v53 + 8);
      v58(v57, v52);
      v58(v55, v52);
    }
  }
  return v38 & 1;
}

uint64_t specialized static NCProtoAddressableContact.== infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int (*v29)(uint64_t, uint64_t, uint64_t);
  char *v30;
  char v31;
  uint64_t *v32;
  uint64_t *v33;
  char v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  void (*v38)(char *, char *, uint64_t);
  char *v39;
  char *v40;
  void (*v41)(char *, uint64_t);
  uint64_t v43;
  char *v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t *v49;
  char *v50;

  v4 = type metadata accessor for UnknownStorage();
  v46 = *(_QWORD *)(v4 - 8);
  v47 = v4;
  v5 = MEMORY[0x24BDAC7A8](v4);
  v45 = (char *)&v43 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v5);
  v44 = (char *)&v43 - v7;
  v8 = type metadata accessor for NCProtoContactInfo(0);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v50 = (char *)&v43 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (NCProtoContactInfo?, NCProtoContactInfo?));
  MEMORY[0x24BDAC7A8](v11);
  v13 = (char *)&v43 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NCProtoContactInfo?);
  v15 = MEMORY[0x24BDAC7A8](v14);
  v17 = (uint64_t *)((char *)&v43 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  v18 = MEMORY[0x24BDAC7A8](v15);
  v20 = (char *)&v43 - v19;
  MEMORY[0x24BDAC7A8](v18);
  v22 = (char *)&v43 - v21;
  v23 = type metadata accessor for NCProtoAddressableContact(0);
  v24 = *(int *)(v23 + 28);
  v48 = a1;
  v25 = (uint64_t)a1 + v24;
  v26 = v23;
  outlined init with copy of NCProtoContactInfo?(v25, (uint64_t)v22, &demangling cache variable for type metadata for NCProtoContactInfo?);
  v27 = *(int *)(v26 + 28);
  v49 = a2;
  outlined init with copy of NCProtoContactInfo?((uint64_t)a2 + v27, (uint64_t)v20, &demangling cache variable for type metadata for NCProtoContactInfo?);
  v28 = (uint64_t)&v13[*(int *)(v11 + 48)];
  outlined init with copy of NCProtoContactInfo?((uint64_t)v22, (uint64_t)v13, &demangling cache variable for type metadata for NCProtoContactInfo?);
  outlined init with copy of NCProtoContactInfo?((uint64_t)v20, v28, &demangling cache variable for type metadata for NCProtoContactInfo?);
  v29 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
  if (v29((uint64_t)v13, 1, v8) == 1)
  {
    outlined destroy of NCProtoContactInfo?((uint64_t)v20, &demangling cache variable for type metadata for NCProtoContactInfo?);
    outlined destroy of NCProtoContactInfo?((uint64_t)v22, &demangling cache variable for type metadata for NCProtoContactInfo?);
    if (v29(v28, 1, v8) == 1)
    {
      outlined destroy of NCProtoContactInfo?((uint64_t)v13, &demangling cache variable for type metadata for NCProtoContactInfo?);
      goto LABEL_8;
    }
    goto LABEL_6;
  }
  v30 = v50;
  outlined init with copy of NCProtoContactInfo?((uint64_t)v13, (uint64_t)v17, &demangling cache variable for type metadata for NCProtoContactInfo?);
  if (v29(v28, 1, v8) == 1)
  {
    outlined destroy of NCProtoContactInfo?((uint64_t)v20, &demangling cache variable for type metadata for NCProtoContactInfo?);
    outlined destroy of NCProtoContactInfo?((uint64_t)v22, &demangling cache variable for type metadata for NCProtoContactInfo?);
    outlined destroy of NCProtoContactInfo((uint64_t)v17, type metadata accessor for NCProtoContactInfo);
LABEL_6:
    outlined destroy of NCProtoContactInfo?((uint64_t)v13, &demangling cache variable for type metadata for (NCProtoContactInfo?, NCProtoContactInfo?));
LABEL_13:
    v34 = 0;
    return v34 & 1;
  }
  outlined init with take of NCProtoContactInfo(v28, (uint64_t)v30, type metadata accessor for NCProtoContactInfo);
  v31 = specialized static NCProtoContactInfo.== infix(_:_:)(v17, v30);
  outlined destroy of NCProtoContactInfo((uint64_t)v30, type metadata accessor for NCProtoContactInfo);
  outlined destroy of NCProtoContactInfo?((uint64_t)v20, &demangling cache variable for type metadata for NCProtoContactInfo?);
  outlined destroy of NCProtoContactInfo?((uint64_t)v22, &demangling cache variable for type metadata for NCProtoContactInfo?);
  outlined destroy of NCProtoContactInfo((uint64_t)v17, type metadata accessor for NCProtoContactInfo);
  outlined destroy of NCProtoContactInfo?((uint64_t)v13, &demangling cache variable for type metadata for NCProtoContactInfo?);
  if ((v31 & 1) == 0)
    goto LABEL_13;
LABEL_8:
  v33 = v48;
  v32 = v49;
  if ((specialized static Array<A>.== infix(_:_:)(*v48, *v49) & 1) == 0)
    goto LABEL_13;
  if (v33[1] == v32[1] && v33[2] == v32[2] || (v34 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
  {
    v35 = (char *)v33 + *(int *)(v26 + 24);
    v37 = v46;
    v36 = v47;
    v38 = *(void (**)(char *, char *, uint64_t))(v46 + 16);
    v39 = v44;
    v38(v44, v35, v47);
    v40 = v45;
    v38(v45, (char *)v32 + *(int *)(v26 + 24), v36);
    lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
    v34 = dispatch thunk of static Equatable.== infix(_:_:)();
    v41 = *(void (**)(char *, uint64_t))(v37 + 8);
    v41(v40, v36);
    v41(v39, v36);
  }
  return v34 & 1;
}

uint64_t specialized static NCProtoActiveConversation.== infix(_:_:)(_QWORD **a1, _QWORD **a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  int *active;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  BOOL v17;
  char v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t *v26;
  char v27;
  char *v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  char v34;
  _QWORD *v35;
  int v36;
  uint64_t v37;
  uint64_t *v38;
  char v39;
  char *v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  void (*v45)(char *, char *, uint64_t);
  void (*v46)(char *, uint64_t);
  uint64_t v48;

  v4 = type metadata accessor for UnknownStorage();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)&v48 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v10 = (char *)&v48 - v9;
  active = (int *)type metadata accessor for NCProtoActiveConversation(0);
  v12 = active[6];
  v13 = (_QWORD **)((char *)a1 + v12);
  v14 = *(uint64_t *)((char *)a1 + v12 + 8);
  v15 = (_QWORD **)((char *)a2 + v12);
  v16 = v15[1];
  if (!v14)
  {
    if (v16)
      goto LABEL_42;
    goto LABEL_10;
  }
  if (!v16)
    goto LABEL_42;
  v17 = *v13 == *v15 && v14 == v16;
  if (v17 || (v18 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
  {
LABEL_10:
    v19 = active[7];
    v20 = (_QWORD **)((char *)a1 + v19);
    v21 = *(uint64_t *)((char *)a1 + v19 + 8);
    v22 = (_QWORD **)((char *)a2 + v19);
    v23 = v22[1];
    if (v21)
    {
      if (!v23)
        goto LABEL_42;
      if (*v20 != *v22 || v21 != v23)
      {
        v18 = 0;
        if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
          return v18 & 1;
      }
    }
    else if (v23)
    {
      goto LABEL_42;
    }
    v25 = active[8];
    v26 = (uint64_t *)((char *)a1 + v25);
    v27 = *((_BYTE *)a1 + v25 + 9);
    v28 = (char *)a2 + v25;
    v29 = *((_BYTE *)a2 + v25 + 9);
    if ((v27 & 1) != 0)
    {
      if ((v29 & 1) == 0)
        goto LABEL_42;
    }
    else
    {
      if ((v29 & 1) != 0)
        goto LABEL_42;
      v30 = *v26;
      v31 = *(_QWORD *)v28;
      if ((v28[8] & 1) != 0)
        __asm { BR              X11 }
      if (v30 != v31)
        goto LABEL_42;
    }
    v32 = active[9];
    v33 = (_QWORD **)((char *)a1 + v32);
    v34 = *((_BYTE *)a1 + v32 + 8);
    v35 = (_QWORD **)((char *)a2 + v32);
    v36 = *((unsigned __int8 *)a2 + v32 + 8);
    if ((v34 & 1) != 0)
    {
      if (!v36)
        goto LABEL_42;
    }
    else
    {
      if (*v33 != *v35)
        LOBYTE(v36) = 1;
      if ((v36 & 1) != 0)
        goto LABEL_42;
    }
    if ((specialized static Array<A>.== infix(_:_:)(*a1, *a2) & 1) != 0)
    {
      v37 = active[10];
      v38 = (uint64_t *)((char *)a1 + v37);
      v39 = *((_BYTE *)a1 + v37 + 9);
      v40 = (char *)a2 + v37;
      v41 = *((_BYTE *)a2 + v37 + 9);
      if ((v39 & 1) != 0)
      {
        if ((v41 & 1) == 0)
          goto LABEL_42;
      }
      else
      {
        if ((v41 & 1) != 0)
          goto LABEL_42;
        v42 = *v38;
        v43 = *(_QWORD *)v40;
        if ((v40[8] & 1) != 0)
          __asm { BR              X11 }
        if (v42 != v43)
          goto LABEL_42;
      }
      v44 = (char *)a1 + active[5];
      v45 = *(void (**)(char *, char *, uint64_t))(v5 + 16);
      v45(v10, v44, v4);
      v45(v8, (char *)a2 + active[5], v4);
      lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
      v18 = dispatch thunk of static Equatable.== infix(_:_:)();
      v46 = *(void (**)(char *, uint64_t))(v5 + 8);
      v46(v8, v4);
      v46(v10, v4);
      return v18 & 1;
    }
LABEL_42:
    v18 = 0;
  }
  return v18 & 1;
}

uint64_t specialized static NCProtoGetCallDisplayDetailsRequest.== infix(_:_:)(_QWORD *a1, char *a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  BOOL v13;
  char v14;
  uint64_t v15;
  char *v16;
  void (*v17)(char *, char *, uint64_t);
  void (*v18)(char *, uint64_t);
  uint64_t v20;

  v6 = type metadata accessor for UnknownStorage();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = ((uint64_t (*)(void))MEMORY[0x24BDAC7A8])();
  v10 = (char *)&v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v8);
  v12 = (char *)&v20 - v11;
  v13 = *a1 == *(_QWORD *)a2 && a1[1] == *((_QWORD *)a2 + 1);
  if (v13 || (v14 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
  {
    v15 = a3(0);
    v16 = (char *)a1 + *(int *)(v15 + 20);
    v17 = *(void (**)(char *, char *, uint64_t))(v7 + 16);
    v17(v12, v16, v6);
    v17(v10, &a2[*(int *)(v15 + 20)], v6);
    lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
    v14 = dispatch thunk of static Equatable.== infix(_:_:)();
    v18 = *(void (**)(char *, uint64_t))(v7 + 8);
    v18(v10, v6);
    v18(v12, v6);
  }
  return v14 & 1;
}

uint64_t specialized static NCProtoDisconnectRequest.== infix(_:_:)(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  char v11;
  int *v12;
  int *v13;
  uint64_t v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t *v18;
  char v19;
  uint64_t *v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  void (*v25)(char *, char *, uint64_t);
  char v26;
  void (*v27)(char *, uint64_t);
  uint64_t v29;

  v4 = type metadata accessor for UnknownStorage();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)&v29 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v10 = (char *)&v29 - v9;
  specialized static Data.== infix(_:_:)(*a1, a1[1]);
  if ((v11 & 1) == 0)
    goto LABEL_15;
  v12 = (int *)type metadata accessor for NCProtoDisconnectRequest(0);
  v13 = v12;
  v14 = v12[6];
  v15 = *((unsigned __int8 *)a1 + v14);
  v16 = *(unsigned __int8 *)(a2 + v14);
  if (v15 == 2)
  {
    if (v16 != 2)
      goto LABEL_15;
  }
  else if (v16 == 2 || ((((v16 & 1) == 0) ^ v15) & 1) == 0)
  {
    goto LABEL_15;
  }
  v17 = v12[7];
  v18 = (uint64_t *)((char *)a1 + v17);
  v19 = *((_BYTE *)a1 + v17 + 9);
  v20 = (uint64_t *)(a2 + v17);
  v21 = *(_BYTE *)(a2 + v17 + 9);
  if ((v19 & 1) != 0)
  {
    if ((v21 & 1) == 0)
    {
LABEL_15:
      v26 = 0;
      return v26 & 1;
    }
  }
  else
  {
    if ((v21 & 1) != 0)
      goto LABEL_15;
    v22 = *v18;
    v23 = *v20;
    if ((v20[1] & 1) != 0)
      __asm { BR              X11 }
    if (v22 != v23)
      goto LABEL_15;
  }
  v24 = (char *)a1 + v12[5];
  v25 = *(void (**)(char *, char *, uint64_t))(v5 + 16);
  v25(v10, v24, v4);
  v25(v8, (char *)(a2 + v13[5]), v4);
  lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
  v26 = dispatch thunk of static Equatable.== infix(_:_:)();
  v27 = *(void (**)(char *, uint64_t))(v5 + 8);
  v27(v8, v4);
  v27(v10, v4);
  return v26 & 1;
}

uint64_t specialized static NCProtoCallStateResponse.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int (*v26)(uint64_t, uint64_t, uint64_t);
  uint64_t v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  void (*v32)(char *, uint64_t, uint64_t);
  char *v33;
  char *v34;
  char v35;
  void (*v36)(char *, uint64_t);
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;

  v4 = type metadata accessor for UnknownStorage();
  v43 = *(_QWORD *)(v4 - 8);
  v44 = v4;
  v5 = MEMORY[0x24BDAC7A8](v4);
  v42 = (char *)&v38 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v5);
  v41 = (char *)&v38 - v7;
  v8 = type metadata accessor for NCProtoCallState(0);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v38 = (uint64_t)&v38 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (NCProtoCallState?, NCProtoCallState?));
  MEMORY[0x24BDAC7A8](v11);
  v13 = (char *)&v38 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NCProtoCallState?);
  v15 = MEMORY[0x24BDAC7A8](v14);
  v45 = (uint64_t)&v38 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = MEMORY[0x24BDAC7A8](v15);
  v19 = (char *)&v38 - v18;
  MEMORY[0x24BDAC7A8](v17);
  v21 = (char *)&v38 - v20;
  v22 = type metadata accessor for NCProtoCallStateResponse(0);
  v23 = *(int *)(v22 + 20);
  v39 = a1;
  outlined init with copy of NCProtoContactInfo?(a1 + v23, (uint64_t)v21, &demangling cache variable for type metadata for NCProtoCallState?);
  v24 = *(int *)(v22 + 20);
  v40 = a2;
  outlined init with copy of NCProtoContactInfo?(a2 + v24, (uint64_t)v19, &demangling cache variable for type metadata for NCProtoCallState?);
  v25 = (uint64_t)&v13[*(int *)(v11 + 48)];
  outlined init with copy of NCProtoContactInfo?((uint64_t)v21, (uint64_t)v13, &demangling cache variable for type metadata for NCProtoCallState?);
  outlined init with copy of NCProtoContactInfo?((uint64_t)v19, v25, &demangling cache variable for type metadata for NCProtoCallState?);
  v26 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
  if (v26((uint64_t)v13, 1, v8) != 1)
  {
    v27 = v45;
    outlined init with copy of NCProtoContactInfo?((uint64_t)v13, v45, &demangling cache variable for type metadata for NCProtoCallState?);
    if (v26(v25, 1, v8) != 1)
    {
      v28 = v38;
      outlined init with take of NCProtoContactInfo(v25, v38, type metadata accessor for NCProtoCallState);
      v29 = specialized static NCProtoCallState.== infix(_:_:)(v27, v28);
      outlined destroy of NCProtoContactInfo(v28, type metadata accessor for NCProtoCallState);
      outlined destroy of NCProtoContactInfo?((uint64_t)v19, &demangling cache variable for type metadata for NCProtoCallState?);
      outlined destroy of NCProtoContactInfo?((uint64_t)v21, &demangling cache variable for type metadata for NCProtoCallState?);
      outlined destroy of NCProtoContactInfo(v27, type metadata accessor for NCProtoCallState);
      outlined destroy of NCProtoContactInfo?((uint64_t)v13, &demangling cache variable for type metadata for NCProtoCallState?);
      if ((v29 & 1) != 0)
        goto LABEL_8;
LABEL_9:
      v35 = 0;
      return v35 & 1;
    }
    outlined destroy of NCProtoContactInfo?((uint64_t)v19, &demangling cache variable for type metadata for NCProtoCallState?);
    outlined destroy of NCProtoContactInfo?((uint64_t)v21, &demangling cache variable for type metadata for NCProtoCallState?);
    outlined destroy of NCProtoContactInfo(v27, type metadata accessor for NCProtoCallState);
LABEL_6:
    outlined destroy of NCProtoContactInfo?((uint64_t)v13, &demangling cache variable for type metadata for (NCProtoCallState?, NCProtoCallState?));
    goto LABEL_9;
  }
  outlined destroy of NCProtoContactInfo?((uint64_t)v19, &demangling cache variable for type metadata for NCProtoCallState?);
  outlined destroy of NCProtoContactInfo?((uint64_t)v21, &demangling cache variable for type metadata for NCProtoCallState?);
  if (v26(v25, 1, v8) != 1)
    goto LABEL_6;
  outlined destroy of NCProtoContactInfo?((uint64_t)v13, &demangling cache variable for type metadata for NCProtoCallState?);
LABEL_8:
  v31 = v43;
  v30 = v44;
  v32 = *(void (**)(char *, uint64_t, uint64_t))(v43 + 16);
  v33 = v41;
  v32(v41, v39, v44);
  v34 = v42;
  v32(v42, v40, v30);
  lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
  v35 = dispatch thunk of static Equatable.== infix(_:_:)();
  v36 = *(void (**)(char *, uint64_t))(v31 + 8);
  v36(v34, v30);
  v36(v33, v30);
  return v35 & 1;
}

uint64_t specialized static NCProtoContactUpdateEvent.== infix(_:_:)(uint64_t *a1, uint64_t a2, uint64_t (*a3)(uint64_t, _QWORD), uint64_t (*a4)(_QWORD))
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  char v15;
  uint64_t v16;
  char *v17;
  void (*v18)(char *, char *, uint64_t);
  char v19;
  void (*v20)(char *, uint64_t);
  uint64_t v22;

  v8 = type metadata accessor for UnknownStorage();
  v9 = *(_QWORD *)(v8 - 8);
  v10 = MEMORY[0x24BDAC7A8](v8);
  v12 = (char *)&v22 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v10);
  v14 = (char *)&v22 - v13;
  specialized static Data.== infix(_:_:)(*a1, a1[1]);
  if ((v15 & 1) != 0 && (a3(a1[2], *(_QWORD *)(a2 + 16)) & 1) != 0)
  {
    v16 = a4(0);
    v17 = (char *)a1 + *(int *)(v16 + 24);
    v18 = *(void (**)(char *, char *, uint64_t))(v9 + 16);
    v18(v14, v17, v8);
    v18(v12, (char *)(a2 + *(int *)(v16 + 24)), v8);
    lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
    v19 = dispatch thunk of static Equatable.== infix(_:_:)();
    v20 = *(void (**)(char *, uint64_t))(v9 + 8);
    v20(v12, v8);
    v20(v14, v8);
  }
  else
  {
    v19 = 0;
  }
  return v19 & 1;
}

uint64_t specialized static NCProtoCallStateRequest.== infix(_:_:)(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  char v11;
  uint64_t v12;
  char *v13;
  void (*v14)(char *, char *, uint64_t);
  char v15;
  void (*v16)(char *, uint64_t);
  uint64_t v18;

  v4 = type metadata accessor for UnknownStorage();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v10 = (char *)&v18 - v9;
  specialized static Data.== infix(_:_:)(*a1, a1[1]);
  if ((v11 & 1) != 0)
  {
    v12 = type metadata accessor for NCProtoCallStateRequest(0);
    v13 = (char *)a1 + *(int *)(v12 + 20);
    v14 = *(void (**)(char *, char *, uint64_t))(v5 + 16);
    v14(v10, v13, v4);
    v14(v8, (char *)(a2 + *(int *)(v12 + 20)), v4);
    lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
    v15 = dispatch thunk of static Equatable.== infix(_:_:)();
    v16 = *(void (**)(char *, uint64_t))(v5 + 8);
    v16(v8, v4);
    v16(v10, v4);
  }
  else
  {
    v15 = 0;
  }
  return v15 & 1;
}

uint64_t specialized static NCProtoAddMemberRequest.== infix(_:_:)(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  _BYTE *v10;
  BOOL v11;
  char v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  unint64_t v21;
  int v23;
  char *v24;
  void (*v25)(_BYTE *, char *, uint64_t);
  uint64_t v26;
  void (*v27)(_BYTE *, uint64_t);
  _BYTE v28[4];
  int v29;
  uint64_t v30;

  v4 = type metadata accessor for UnknownStorage();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x24BDAC7A8](v4);
  v8 = &v28[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x24BDAC7A8](v6);
  v10 = &v28[-v9];
  v11 = *a1 == *(_QWORD *)a2 && a1[1] == *(_QWORD *)(a2 + 8);
  if (v11 || (v12 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
  {
    v13 = a1[2] == *(_QWORD *)(a2 + 16) && a1[3] == *(_QWORD *)(a2 + 24);
    if (v13 || (v12 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
    {
      v14 = *(_QWORD *)(a2 + 32);
      if (*(_BYTE *)(a2 + 40) == 1)
        __asm { BR              X11 }
      if (a1[4] == v14)
      {
        v15 = type metadata accessor for NCProtoAddMemberRequest(0);
        v16 = *(int *)(v15 + 32);
        v17 = *(_QWORD *)((char *)a1 + v16);
        v18 = *(_QWORD *)((char *)a1 + v16 + 8);
        v19 = (uint64_t *)(a2 + v16);
        v20 = *v19;
        v21 = v19[1];
        if (v18 >> 60 == 15)
        {
          if (v21 >> 60 == 15)
            goto LABEL_22;
        }
        else if (v21 >> 60 != 15)
        {
          v30 = v15;
          outlined copy of Data?(v17, v18);
          outlined copy of Data?(v20, v21);
          specialized static Data.== infix(_:_:)(v17, v18);
          v29 = v23;
          outlined consume of Data?(v20, v21);
          outlined consume of Data?(v17, v18);
          v15 = v30;
          if ((v29 & 1) != 0)
          {
LABEL_22:
            v24 = (char *)a1 + *(int *)(v15 + 28);
            v25 = *(void (**)(_BYTE *, char *, uint64_t))(v5 + 16);
            v26 = v15;
            v25(v10, v24, v4);
            v25(v8, (char *)(a2 + *(int *)(v26 + 28)), v4);
            lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
            v12 = dispatch thunk of static Equatable.== infix(_:_:)();
            v27 = *(void (**)(_BYTE *, uint64_t))(v5 + 8);
            v27(v8, v4);
            v27(v10, v4);
            return v12 & 1;
          }
          goto LABEL_19;
        }
        outlined copy of Data?(v17, v18);
        outlined copy of Data?(v20, v21);
        outlined consume of Data?(v17, v18);
        outlined consume of Data?(v20, v21);
      }
LABEL_19:
      v12 = 0;
    }
  }
  return v12 & 1;
}

uint64_t specialized static NCProtoIDSProxyMessage.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  unsigned int (*v23)(uint64_t, uint64_t, uint64_t);
  uint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void (*v29)(char *, uint64_t, uint64_t);
  char *v30;
  char *v31;
  char v32;
  void (*v33)(char *, uint64_t);
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;

  v38 = type metadata accessor for UnknownStorage();
  v42 = *(_QWORD *)(v38 - 8);
  v4 = MEMORY[0x24BDAC7A8](v38);
  v41 = (char *)&v35 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v4);
  v40 = (char *)&v35 - v6;
  v7 = type metadata accessor for NCProtoIDSProxyMessage.OneOf_Message(0);
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v36 = (uint64_t)&v35 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (NCProtoIDSProxyMessage.OneOf_Message?, NCProtoIDSProxyMessage.OneOf_Message?));
  MEMORY[0x24BDAC7A8](v10);
  v12 = (char *)&v35 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NCProtoIDSProxyMessage.OneOf_Message?);
  v14 = MEMORY[0x24BDAC7A8](v13);
  v16 = (char *)&v35 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = MEMORY[0x24BDAC7A8](v14);
  v19 = (char *)&v35 - v18;
  MEMORY[0x24BDAC7A8](v17);
  v21 = (char *)&v35 - v20;
  v37 = a1;
  outlined init with copy of NCProtoContactInfo?(a1, (uint64_t)&v35 - v20, &demangling cache variable for type metadata for NCProtoIDSProxyMessage.OneOf_Message?);
  v39 = a2;
  outlined init with copy of NCProtoContactInfo?(a2, (uint64_t)v19, &demangling cache variable for type metadata for NCProtoIDSProxyMessage.OneOf_Message?);
  v22 = (uint64_t)&v12[*(int *)(v10 + 48)];
  outlined init with copy of NCProtoContactInfo?((uint64_t)v21, (uint64_t)v12, &demangling cache variable for type metadata for NCProtoIDSProxyMessage.OneOf_Message?);
  outlined init with copy of NCProtoContactInfo?((uint64_t)v19, v22, &demangling cache variable for type metadata for NCProtoIDSProxyMessage.OneOf_Message?);
  v23 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48);
  if (v23((uint64_t)v12, 1, v7) != 1)
  {
    outlined init with copy of NCProtoContactInfo?((uint64_t)v12, (uint64_t)v16, &demangling cache variable for type metadata for NCProtoIDSProxyMessage.OneOf_Message?);
    if (v23(v22, 1, v7) != 1)
    {
      v24 = v36;
      outlined init with take of NCProtoContactInfo(v22, v36, type metadata accessor for NCProtoIDSProxyMessage.OneOf_Message);
      v25 = specialized static NCProtoIDSProxyMessage.OneOf_Message.== infix(_:_:)((uint64_t)v16, v24);
      outlined destroy of NCProtoContactInfo(v24, type metadata accessor for NCProtoIDSProxyMessage.OneOf_Message);
      outlined destroy of NCProtoContactInfo?((uint64_t)v19, &demangling cache variable for type metadata for NCProtoIDSProxyMessage.OneOf_Message?);
      outlined destroy of NCProtoContactInfo?((uint64_t)v21, &demangling cache variable for type metadata for NCProtoIDSProxyMessage.OneOf_Message?);
      outlined destroy of NCProtoContactInfo((uint64_t)v16, type metadata accessor for NCProtoIDSProxyMessage.OneOf_Message);
      outlined destroy of NCProtoContactInfo?((uint64_t)v12, &demangling cache variable for type metadata for NCProtoIDSProxyMessage.OneOf_Message?);
      if ((v25 & 1) != 0)
        goto LABEL_8;
LABEL_9:
      v32 = 0;
      return v32 & 1;
    }
    outlined destroy of NCProtoContactInfo?((uint64_t)v19, &demangling cache variable for type metadata for NCProtoIDSProxyMessage.OneOf_Message?);
    outlined destroy of NCProtoContactInfo?((uint64_t)v21, &demangling cache variable for type metadata for NCProtoIDSProxyMessage.OneOf_Message?);
    outlined destroy of NCProtoContactInfo((uint64_t)v16, type metadata accessor for NCProtoIDSProxyMessage.OneOf_Message);
LABEL_6:
    outlined destroy of NCProtoContactInfo?((uint64_t)v12, &demangling cache variable for type metadata for (NCProtoIDSProxyMessage.OneOf_Message?, NCProtoIDSProxyMessage.OneOf_Message?));
    goto LABEL_9;
  }
  outlined destroy of NCProtoContactInfo?((uint64_t)v19, &demangling cache variable for type metadata for NCProtoIDSProxyMessage.OneOf_Message?);
  outlined destroy of NCProtoContactInfo?((uint64_t)v21, &demangling cache variable for type metadata for NCProtoIDSProxyMessage.OneOf_Message?);
  if (v23(v22, 1, v7) != 1)
    goto LABEL_6;
  outlined destroy of NCProtoContactInfo?((uint64_t)v12, &demangling cache variable for type metadata for NCProtoIDSProxyMessage.OneOf_Message?);
LABEL_8:
  v26 = type metadata accessor for NCProtoIDSProxyMessage(0);
  v27 = v38;
  v28 = v42;
  v29 = *(void (**)(char *, uint64_t, uint64_t))(v42 + 16);
  v30 = v40;
  v29(v40, v37 + *(int *)(v26 + 20), v38);
  v31 = v41;
  v29(v41, v39 + *(int *)(v26 + 20), v27);
  lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
  v32 = dispatch thunk of static Equatable.== infix(_:_:)();
  v33 = *(void (**)(char *, uint64_t))(v28 + 8);
  v33(v31, v27);
  v33(v30, v27);
  return v32 & 1;
}

uint64_t specialized static NCProtoIDSProxyMessage.Resource.== infix(_:_:)(uint64_t *a1, char *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  char v11;
  char v12;
  char v13;
  uint64_t v14;
  char *v15;
  void (*v16)(char *, char *, uint64_t);
  void (*v17)(char *, uint64_t);
  uint64_t v19;

  v4 = type metadata accessor for UnknownStorage();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v10 = (char *)&v19 - v9;
  specialized static Data.== infix(_:_:)(*a1, a1[1]);
  if ((v11 & 1) == 0)
    goto LABEL_8;
  specialized static Data.== infix(_:_:)(a1[2], a1[3]);
  if ((v12 & 1) == 0)
    goto LABEL_8;
  if (a1[4] == *((_QWORD *)a2 + 4) && a1[5] == *((_QWORD *)a2 + 5)
    || (v13 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
  {
    if ((specialized static Dictionary<>.== infix(_:_:)(a1[6], *((_QWORD *)a2 + 6)) & 1) != 0)
    {
      v14 = type metadata accessor for NCProtoIDSProxyMessage.Resource(0);
      v15 = (char *)a1 + *(int *)(v14 + 32);
      v16 = *(void (**)(char *, char *, uint64_t))(v5 + 16);
      v16(v10, v15, v4);
      v16(v8, &a2[*(int *)(v14 + 32)], v4);
      lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
      v13 = dispatch thunk of static Equatable.== infix(_:_:)();
      v17 = *(void (**)(char *, uint64_t))(v5 + 8);
      v17(v8, v4);
      v17(v10, v4);
      return v13 & 1;
    }
LABEL_8:
    v13 = 0;
  }
  return v13 & 1;
}

uint64_t specialized static NCProtoIDSProxyMessage.GroupUpdate.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  char v12;
  char v13;
  char v14;
  uint64_t v15;
  unsigned __int8 *v16;
  void (*v17)(char *, unsigned __int8 *, uint64_t);
  void (*v18)(char *, uint64_t);
  uint64_t v20;

  v4 = type metadata accessor for UnknownStorage();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)&v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v10 = (char *)&v20 - v9;
  if (*a1 != *a2)
    goto LABEL_23;
  if (*((_QWORD *)a1 + 1) != *((_QWORD *)a2 + 1) || *((_QWORD *)a1 + 2) != *((_QWORD *)a2 + 2))
  {
    v12 = 0;
    if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
      return v12 & 1;
  }
  if (*((_QWORD *)a1 + 3) != *((_QWORD *)a2 + 3))
    goto LABEL_23;
  if (*((_QWORD *)a1 + 4) != *((_QWORD *)a2 + 4) || *((_QWORD *)a1 + 5) != *((_QWORD *)a2 + 5))
  {
    v12 = 0;
    if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
      return v12 & 1;
  }
  if (*((_QWORD *)a1 + 6) != *((_QWORD *)a2 + 6)
    || *((_QWORD *)a1 + 7) != *((_QWORD *)a2 + 7)
    || a1[64] != a2[64]
    || *((double *)a1 + 9) != *((double *)a2 + 9)
    || (specialized static Data.== infix(_:_:)(*((_QWORD *)a1 + 10), *((_QWORD *)a1 + 11)), (v13 & 1) == 0)
    || (specialized static Data.== infix(_:_:)(*((_QWORD *)a1 + 12), *((_QWORD *)a1 + 13)), (v14 & 1) == 0)
    || (specialized static Array<A>.== infix(_:_:)(*((_QWORD **)a1 + 14), *((_QWORD **)a2 + 14)) & 1) == 0
    || (specialized static Dictionary<>.== infix(_:_:)(*((_QWORD *)a1 + 15), *((_QWORD *)a2 + 15)) & 1) == 0)
  {
LABEL_23:
    v12 = 0;
    return v12 & 1;
  }
  if (*((_QWORD *)a1 + 16) == *((_QWORD *)a2 + 16) && *((_QWORD *)a1 + 17) == *((_QWORD *)a2 + 17)
    || (v12 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
  {
    v15 = type metadata accessor for NCProtoIDSProxyMessage.GroupUpdate(0);
    v16 = &a1[*(int *)(v15 + 68)];
    v17 = *(void (**)(char *, unsigned __int8 *, uint64_t))(v5 + 16);
    v17(v10, v16, v4);
    v17(v8, &a2[*(int *)(v15 + 68)], v4);
    lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
    v12 = dispatch thunk of static Equatable.== infix(_:_:)();
    v18 = *(void (**)(char *, uint64_t))(v5 + 8);
    v18(v8, v4);
    v18(v10, v4);
  }
  return v12 & 1;
}

uint64_t specialized static NCProtoContinuityCall.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  int *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  BOOL v17;
  char v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t *v26;
  char v27;
  uint64_t *v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  void (*v39)(char *, uint64_t, uint64_t);
  void (*v40)(char *, uint64_t);
  uint64_t v42;

  v4 = type metadata accessor for UnknownStorage();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)&v42 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v10 = (char *)&v42 - v9;
  v11 = (int *)type metadata accessor for NCProtoContinuityCall(0);
  v12 = v11[5];
  v13 = (_QWORD *)(a1 + v12);
  v14 = *(_QWORD *)(a1 + v12 + 8);
  v15 = (_QWORD *)(a2 + v12);
  v16 = v15[1];
  if (!v14)
  {
    if (v16)
      goto LABEL_39;
    goto LABEL_10;
  }
  if (!v16)
    goto LABEL_39;
  v17 = *v13 == *v15 && v14 == v16;
  if (v17 || (v18 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
  {
LABEL_10:
    v19 = v11[6];
    v20 = (_QWORD *)(a1 + v19);
    v21 = *(_QWORD *)(a1 + v19 + 8);
    v22 = (_QWORD *)(a2 + v19);
    v23 = v22[1];
    if (v21)
    {
      if (!v23)
        goto LABEL_39;
      if (*v20 != *v22 || v21 != v23)
      {
        v18 = 0;
        if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
          return v18 & 1;
      }
    }
    else if (v23)
    {
      goto LABEL_39;
    }
    v25 = v11[7];
    v26 = (uint64_t *)(a1 + v25);
    v27 = *(_BYTE *)(a1 + v25 + 9);
    v28 = (uint64_t *)(a2 + v25);
    if ((v27 & 1) != 0)
    {
      if ((*((_BYTE *)v28 + 9) & 1) == 0)
        goto LABEL_39;
    }
    else
    {
      if ((*((_BYTE *)v28 + 9) & 1) != 0)
        goto LABEL_39;
      v34 = *v26;
      v35 = *((_BYTE *)v26 + 8);
      v36 = *v28;
      v37 = *((_BYTE *)v28 + 8);
      v38 = v34 != 0;
      if ((v35 & 1) == 0)
        v38 = v34;
      if ((v37 & 1) != 0)
      {
        if (v36)
        {
          if (v38 != 1)
            goto LABEL_39;
        }
        else if (v38)
        {
          goto LABEL_39;
        }
      }
      else if (v38 != v36)
      {
        goto LABEL_39;
      }
    }
    v29 = v11[8];
    v30 = (_QWORD *)(a1 + v29);
    v31 = *(_QWORD *)(a1 + v29 + 8);
    v32 = (_QWORD *)(a2 + v29);
    v33 = v32[1];
    if (v31)
    {
      if (v33)
      {
        if (*v30 != *v32 || v31 != v33)
        {
          v18 = 0;
          if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
            return v18 & 1;
        }
LABEL_34:
        v39 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
        v39(v10, a1, v4);
        v39(v8, a2, v4);
        lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
        v18 = dispatch thunk of static Equatable.== infix(_:_:)();
        v40 = *(void (**)(char *, uint64_t))(v5 + 8);
        v40(v8, v4);
        v40(v10, v4);
        return v18 & 1;
      }
    }
    else if (!v33)
    {
      goto LABEL_34;
    }
LABEL_39:
    v18 = 0;
  }
  return v18 & 1;
}

uint64_t specialized static NCProtoContactInfo.== infix(_:_:)(_QWORD *a1, char *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  BOOL v11;
  char v12;
  BOOL v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  void (*v22)(char *, char *, uint64_t);
  void (*v23)(char *, uint64_t);
  uint64_t v25;

  v4 = type metadata accessor for UnknownStorage();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)&v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v10 = (char *)&v25 - v9;
  v11 = *a1 == *(_QWORD *)a2 && a1[1] == *((_QWORD *)a2 + 1);
  if (v11 || (v12 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
  {
    v13 = a1[2] == *((_QWORD *)a2 + 2) && a1[3] == *((_QWORD *)a2 + 3);
    if (v13 || (v12 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
    {
      if (a1[4] == *((_QWORD *)a2 + 4) && a1[5] == *((_QWORD *)a2 + 5)
        || (v12 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
      {
        if (a1[6] == *((_QWORD *)a2 + 6) && a1[7] == *((_QWORD *)a2 + 7)
          || (v12 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
        {
          if (a1[8] == *((_QWORD *)a2 + 8) && a1[9] == *((_QWORD *)a2 + 9)
            || (v12 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
          {
            if (a1[10] == *((_QWORD *)a2 + 10) && a1[11] == *((_QWORD *)a2 + 11)
              || (v12 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
            {
              specialized static Data.== infix(_:_:)(a1[12], a1[13]);
              if ((v14 & 1) != 0)
              {
                v15 = type metadata accessor for NCProtoContactInfo(0);
                v16 = *(int *)(v15 + 48);
                v17 = (_QWORD *)((char *)a1 + v16);
                v18 = *(_QWORD *)((char *)a1 + v16 + 8);
                v19 = &a2[v16];
                v20 = *((_QWORD *)v19 + 1);
                if (v18)
                {
                  if (v20)
                  {
                    if (*v17 != *(_QWORD *)v19 || v18 != v20)
                    {
                      v12 = 0;
                      if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
                        return v12 & 1;
                    }
LABEL_32:
                    v21 = (char *)a1 + *(int *)(v15 + 44);
                    v22 = *(void (**)(char *, char *, uint64_t))(v5 + 16);
                    v22(v10, v21, v4);
                    v22(v8, &a2[*(int *)(v15 + 44)], v4);
                    lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
                    v12 = dispatch thunk of static Equatable.== infix(_:_:)();
                    v23 = *(void (**)(char *, uint64_t))(v5 + 8);
                    v23(v8, v4);
                    v23(v10, v4);
                    return v12 & 1;
                  }
                }
                else if (!v20)
                {
                  goto LABEL_32;
                }
              }
              v12 = 0;
            }
          }
        }
      }
    }
  }
  return v12 & 1;
}

uint64_t specialized static NCProtoJoinEvent.== infix(_:_:)(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  char v11;
  char v12;
  uint64_t v13;
  char *v14;
  void (*v15)(char *, char *, uint64_t);
  char v16;
  void (*v17)(char *, uint64_t);
  uint64_t v19;

  v4 = type metadata accessor for UnknownStorage();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v10 = (char *)&v19 - v9;
  specialized static Data.== infix(_:_:)(*a1, a1[1]);
  if ((v11 & 1) != 0
    && (specialized static Data.== infix(_:_:)(a1[2], a1[3]), (v12 & 1) != 0)
    && (specialized static Dictionary<>.== infix(_:_:)(a1[4], *(_QWORD *)(a2 + 32)) & 1) != 0)
  {
    v13 = type metadata accessor for NCProtoJoinEvent(0);
    v14 = (char *)a1 + *(int *)(v13 + 28);
    v15 = *(void (**)(char *, char *, uint64_t))(v5 + 16);
    v15(v10, v14, v4);
    v15(v8, (char *)(a2 + *(int *)(v13 + 28)), v4);
    lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
    v16 = dispatch thunk of static Equatable.== infix(_:_:)();
    v17 = *(void (**)(char *, uint64_t))(v5 + 8);
    v17(v8, v4);
    v17(v10, v4);
  }
  else
  {
    v16 = 0;
  }
  return v16 & 1;
}

uint64_t specialized static NCProtoCallState.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  int *v11;
  uint64_t v12;
  int v13;
  int v14;
  uint64_t v15;
  int v16;
  int v17;
  uint64_t v18;
  uint64_t *v19;
  char v20;
  uint64_t *v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  int v27;
  void (*v28)(char *, uint64_t, uint64_t);
  char v29;
  void (*v30)(char *, uint64_t);
  uint64_t v32;

  v4 = type metadata accessor for UnknownStorage();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v10 = (char *)&v32 - v9;
  v11 = (int *)type metadata accessor for NCProtoCallState(0);
  v12 = v11[5];
  v13 = *(unsigned __int8 *)(a1 + v12);
  v14 = *(unsigned __int8 *)(a2 + v12);
  if (v13 == 2)
  {
    if (v14 != 2)
      goto LABEL_25;
  }
  else if (v14 == 2 || ((((v14 & 1) == 0) ^ v13) & 1) == 0)
  {
    goto LABEL_25;
  }
  v15 = v11[6];
  v16 = *(unsigned __int8 *)(a1 + v15);
  v17 = *(unsigned __int8 *)(a2 + v15);
  if (v16 == 2)
  {
    if (v17 != 2)
      goto LABEL_25;
  }
  else if (v17 == 2 || ((((v17 & 1) == 0) ^ v16) & 1) == 0)
  {
    goto LABEL_25;
  }
  v18 = v11[7];
  v19 = (uint64_t *)(a1 + v18);
  v20 = *(_BYTE *)(a1 + v18 + 9);
  v21 = (uint64_t *)(a2 + v18);
  v22 = *(_BYTE *)(a2 + v18 + 9);
  if ((v20 & 1) != 0)
  {
    if ((v22 & 1) == 0)
      goto LABEL_25;
  }
  else
  {
    if ((v22 & 1) != 0)
      goto LABEL_25;
    v23 = *v19;
    v24 = *v21;
    if ((v21[1] & 1) != 0)
      __asm { BR              X11 }
    if (v23 != v24)
      goto LABEL_25;
  }
  v25 = v11[8];
  v26 = *(unsigned __int8 *)(a1 + v25);
  v27 = *(unsigned __int8 *)(a2 + v25);
  if (v26 == 2)
  {
    if (v27 == 2)
      goto LABEL_24;
LABEL_25:
    v29 = 0;
    return v29 & 1;
  }
  if (v27 == 2 || ((((v27 & 1) == 0) ^ v26) & 1) == 0)
    goto LABEL_25;
LABEL_24:
  v28 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  v28(v10, a1, v4);
  v28(v8, a2, v4);
  lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
  v29 = dispatch thunk of static Equatable.== infix(_:_:)();
  v30 = *(void (**)(char *, uint64_t))(v5 + 8);
  v30(v8, v4);
  v30(v10, v4);
  return v29 & 1;
}

uint64_t specialized static NCProtoCallInfo.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  int *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  BOOL v17;
  char v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  void (*v32)(char *, uint64_t, uint64_t);
  void (*v33)(char *, uint64_t);
  uint64_t v34;

  v4 = type metadata accessor for UnknownStorage();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v10 = (char *)&v34 - v9;
  v11 = (int *)type metadata accessor for NCProtoCallInfo(0);
  v12 = v11[5];
  v13 = (_QWORD *)(a1 + v12);
  v14 = *(_QWORD *)(a1 + v12 + 8);
  v15 = (_QWORD *)(a2 + v12);
  v16 = v15[1];
  if (!v14)
  {
    if (v16)
      goto LABEL_28;
    goto LABEL_10;
  }
  if (!v16)
    goto LABEL_28;
  v17 = *v13 == *v15 && v14 == v16;
  if (v17 || (v18 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
  {
LABEL_10:
    v19 = v11[6];
    v20 = (_QWORD *)(a1 + v19);
    v21 = *(_QWORD *)(a1 + v19 + 8);
    v22 = (_QWORD *)(a2 + v19);
    v23 = v22[1];
    if (v21)
    {
      if (!v23)
        goto LABEL_28;
      if (*v20 != *v22 || v21 != v23)
      {
        v18 = 0;
        if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
          return v18 & 1;
      }
    }
    else if (v23)
    {
      goto LABEL_28;
    }
    v25 = v11[7];
    v26 = (_QWORD *)(a1 + v25);
    v27 = *(_QWORD *)(a1 + v25 + 8);
    v28 = (_QWORD *)(a2 + v25);
    v29 = v28[1];
    if (v27)
    {
      if (v29)
      {
        if (*v26 != *v28 || v27 != v29)
        {
          v18 = 0;
          if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
            return v18 & 1;
        }
LABEL_30:
        v32 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
        v32(v10, a1, v4);
        v32(v8, a2, v4);
        lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
        v18 = dispatch thunk of static Equatable.== infix(_:_:)();
        v33 = *(void (**)(char *, uint64_t))(v5 + 8);
        v33(v8, v4);
        v33(v10, v4);
        return v18 & 1;
      }
    }
    else if (!v29)
    {
      goto LABEL_30;
    }
LABEL_28:
    v18 = 0;
  }
  return v18 & 1;
}

uint64_t specialized static NCProtoIDSProxyMessage.RawData.== infix(_:_:)(uint64_t *a1, char *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  char v11;
  BOOL v12;
  char v13;
  uint64_t v14;
  char *v15;
  void (*v16)(char *, char *, uint64_t);
  void (*v17)(char *, uint64_t);
  uint64_t v19;

  v4 = type metadata accessor for UnknownStorage();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v10 = (char *)&v19 - v9;
  specialized static Data.== infix(_:_:)(*a1, a1[1]);
  if ((v11 & 1) == 0)
    goto LABEL_9;
  v12 = a1[2] == *((_QWORD *)a2 + 2) && a1[3] == *((_QWORD *)a2 + 3);
  if (v12 || (v13 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
  {
    if ((specialized static Dictionary<>.== infix(_:_:)(a1[4], *((_QWORD *)a2 + 4)) & 1) != 0)
    {
      v14 = type metadata accessor for NCProtoIDSProxyMessage.RawData(0);
      v15 = (char *)a1 + *(int *)(v14 + 28);
      v16 = *(void (**)(char *, char *, uint64_t))(v5 + 16);
      v16(v10, v15, v4);
      v16(v8, &a2[*(int *)(v14 + 28)], v4);
      lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
      v13 = dispatch thunk of static Equatable.== infix(_:_:)();
      v17 = *(void (**)(char *, uint64_t))(v5 + 8);
      v17(v8, v4);
      v17(v10, v4);
      return v13 & 1;
    }
LABEL_9:
    v13 = 0;
  }
  return v13 & 1;
}

uint64_t specialized static NCProtoIDSProxyMessage.OneOf_Message.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  unsigned __int8 *v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  int EnumCaseMultiPayload;
  uint64_t (*v26)(uint64_t);
  char v27;
  uint64_t v28;
  uint64_t (*v29)(uint64_t);
  uint64_t v30;
  char *v31;
  uint64_t (*v32)(uint64_t);
  char *v34;
  uint64_t v35;

  v35 = a2;
  v3 = type metadata accessor for NCProtoIDSProxyMessage.Resource(0);
  MEMORY[0x24BDAC7A8](v3);
  v34 = (char *)&v34 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for NCProtoIDSProxyMessage.GroupUpdate(0);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (unsigned __int8 *)&v34 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for NCProtoIDSProxyMessage.RawData(0);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v34 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for NCProtoIDSProxyMessage.OneOf_Message(0);
  v12 = MEMORY[0x24BDAC7A8](v11);
  v14 = (uint64_t *)((char *)&v34 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  v15 = MEMORY[0x24BDAC7A8](v12);
  v17 = (unsigned __int8 *)&v34 - v16;
  MEMORY[0x24BDAC7A8](v15);
  v19 = (uint64_t *)((char *)&v34 - v18);
  v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (NCProtoIDSProxyMessage.OneOf_Message, NCProtoIDSProxyMessage.OneOf_Message));
  v21 = MEMORY[0x24BDAC7A8](v20);
  v23 = (char *)&v34 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = (uint64_t)&v23[*(int *)(v21 + 48)];
  outlined init with copy of NCProtoContactInfo(a1, (uint64_t)v23, type metadata accessor for NCProtoIDSProxyMessage.OneOf_Message);
  outlined init with copy of NCProtoContactInfo(v35, v24, type metadata accessor for NCProtoIDSProxyMessage.OneOf_Message);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      outlined init with copy of NCProtoContactInfo((uint64_t)v23, (uint64_t)v17, type metadata accessor for NCProtoIDSProxyMessage.OneOf_Message);
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        v26 = type metadata accessor for NCProtoIDSProxyMessage.GroupUpdate;
        outlined init with take of NCProtoContactInfo(v24, (uint64_t)v7, type metadata accessor for NCProtoIDSProxyMessage.GroupUpdate);
        v27 = specialized static NCProtoIDSProxyMessage.GroupUpdate.== infix(_:_:)(v17, v7);
        outlined destroy of NCProtoContactInfo((uint64_t)v7, type metadata accessor for NCProtoIDSProxyMessage.GroupUpdate);
        v28 = (uint64_t)v17;
LABEL_9:
        v32 = v26;
LABEL_14:
        outlined destroy of NCProtoContactInfo(v28, v32);
        outlined destroy of NCProtoContactInfo((uint64_t)v23, type metadata accessor for NCProtoIDSProxyMessage.OneOf_Message);
        return v27 & 1;
      }
      v29 = type metadata accessor for NCProtoIDSProxyMessage.GroupUpdate;
      v30 = (uint64_t)v17;
    }
    else
    {
      outlined init with copy of NCProtoContactInfo((uint64_t)v23, (uint64_t)v14, type metadata accessor for NCProtoIDSProxyMessage.OneOf_Message);
      if (swift_getEnumCaseMultiPayload() == 2)
      {
        v26 = type metadata accessor for NCProtoIDSProxyMessage.Resource;
        v31 = v34;
        outlined init with take of NCProtoContactInfo(v24, (uint64_t)v34, type metadata accessor for NCProtoIDSProxyMessage.Resource);
        v27 = specialized static NCProtoIDSProxyMessage.Resource.== infix(_:_:)(v14, v31);
        outlined destroy of NCProtoContactInfo((uint64_t)v31, type metadata accessor for NCProtoIDSProxyMessage.Resource);
        v28 = (uint64_t)v14;
        goto LABEL_9;
      }
      v29 = type metadata accessor for NCProtoIDSProxyMessage.Resource;
      v30 = (uint64_t)v14;
    }
  }
  else
  {
    outlined init with copy of NCProtoContactInfo((uint64_t)v23, (uint64_t)v19, type metadata accessor for NCProtoIDSProxyMessage.OneOf_Message);
    if (!swift_getEnumCaseMultiPayload())
    {
      outlined init with take of NCProtoContactInfo(v24, (uint64_t)v10, type metadata accessor for NCProtoIDSProxyMessage.RawData);
      v27 = specialized static NCProtoIDSProxyMessage.RawData.== infix(_:_:)(v19, v10);
      outlined destroy of NCProtoContactInfo((uint64_t)v10, type metadata accessor for NCProtoIDSProxyMessage.RawData);
      v28 = (uint64_t)v19;
      v32 = type metadata accessor for NCProtoIDSProxyMessage.RawData;
      goto LABEL_14;
    }
    v29 = type metadata accessor for NCProtoIDSProxyMessage.RawData;
    v30 = (uint64_t)v19;
  }
  outlined destroy of NCProtoContactInfo(v30, v29);
  outlined destroy of NCProtoContactInfo?((uint64_t)v23, &demangling cache variable for type metadata for (NCProtoIDSProxyMessage.OneOf_Message, NCProtoIDSProxyMessage.OneOf_Message));
  v27 = 0;
  return v27 & 1;
}

uint64_t type metadata accessor for NCProtoIDSProxyMessage.ParticipantIDList(uint64_t a1)
{
  return type metadata accessor for NCProtoContactInfo(a1, (uint64_t *)&type metadata singleton initialization cache for NCProtoIDSProxyMessage.ParticipantIDList);
}

uint64_t __swift_project_value_buffer(uint64_t a1, uint64_t a2)
{
  if ((*(_BYTE *)(*(_QWORD *)(a1 - 8) + 82) & 2) != 0)
    return *(_QWORD *)a2;
  return a2;
}

unint64_t lazy protocol witness table accessor for type NCProtoContactHandleAnonym.AnonymType and conformance NCProtoContactHandleAnonym.AnonymType()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type NCProtoContactHandleAnonym.AnonymType and conformance NCProtoContactHandleAnonym.AnonymType;
  if (!lazy protocol witness table cache variable for type NCProtoContactHandleAnonym.AnonymType and conformance NCProtoContactHandleAnonym.AnonymType)
  {
    result = MEMORY[0x2494EB01C](&protocol conformance descriptor for NCProtoContactHandleAnonym.AnonymType, &type metadata for NCProtoContactHandleAnonym.AnonymType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NCProtoContactHandleAnonym.AnonymType and conformance NCProtoContactHandleAnonym.AnonymType);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type NCProtoContactHandleAnonym.AnonymType and conformance NCProtoContactHandleAnonym.AnonymType;
  if (!lazy protocol witness table cache variable for type NCProtoContactHandleAnonym.AnonymType and conformance NCProtoContactHandleAnonym.AnonymType)
  {
    result = MEMORY[0x2494EB01C](&protocol conformance descriptor for NCProtoContactHandleAnonym.AnonymType, &type metadata for NCProtoContactHandleAnonym.AnonymType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NCProtoContactHandleAnonym.AnonymType and conformance NCProtoContactHandleAnonym.AnonymType);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type NCProtoContactHandleAnonym.AnonymType and conformance NCProtoContactHandleAnonym.AnonymType;
  if (!lazy protocol witness table cache variable for type NCProtoContactHandleAnonym.AnonymType and conformance NCProtoContactHandleAnonym.AnonymType)
  {
    result = MEMORY[0x2494EB01C](&protocol conformance descriptor for NCProtoContactHandleAnonym.AnonymType, &type metadata for NCProtoContactHandleAnonym.AnonymType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NCProtoContactHandleAnonym.AnonymType and conformance NCProtoContactHandleAnonym.AnonymType);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type NCProtoContactHandleAnonym.AnonymType and conformance NCProtoContactHandleAnonym.AnonymType;
  if (!lazy protocol witness table cache variable for type NCProtoContactHandleAnonym.AnonymType and conformance NCProtoContactHandleAnonym.AnonymType)
  {
    result = MEMORY[0x2494EB01C](&protocol conformance descriptor for NCProtoContactHandleAnonym.AnonymType, &type metadata for NCProtoContactHandleAnonym.AnonymType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NCProtoContactHandleAnonym.AnonymType and conformance NCProtoContactHandleAnonym.AnonymType);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(unint64_t *a1, uint64_t (*a2)(uint64_t), uint64_t a3)
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = a2(255);
    result = MEMORY[0x2494EB01C](a3, v6);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type NCProtoSuggestionAdvertisement.SuggestionType and conformance NCProtoSuggestionAdvertisement.SuggestionType()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type NCProtoSuggestionAdvertisement.SuggestionType and conformance NCProtoSuggestionAdvertisement.SuggestionType;
  if (!lazy protocol witness table cache variable for type NCProtoSuggestionAdvertisement.SuggestionType and conformance NCProtoSuggestionAdvertisement.SuggestionType)
  {
    result = MEMORY[0x2494EB01C](&protocol conformance descriptor for NCProtoSuggestionAdvertisement.SuggestionType, &type metadata for NCProtoSuggestionAdvertisement.SuggestionType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NCProtoSuggestionAdvertisement.SuggestionType and conformance NCProtoSuggestionAdvertisement.SuggestionType);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type NCProtoSuggestionAdvertisement.SuggestionType and conformance NCProtoSuggestionAdvertisement.SuggestionType;
  if (!lazy protocol witness table cache variable for type NCProtoSuggestionAdvertisement.SuggestionType and conformance NCProtoSuggestionAdvertisement.SuggestionType)
  {
    result = MEMORY[0x2494EB01C](&protocol conformance descriptor for NCProtoSuggestionAdvertisement.SuggestionType, &type metadata for NCProtoSuggestionAdvertisement.SuggestionType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NCProtoSuggestionAdvertisement.SuggestionType and conformance NCProtoSuggestionAdvertisement.SuggestionType);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type NCProtoSuggestionAdvertisement.SuggestionType and conformance NCProtoSuggestionAdvertisement.SuggestionType;
  if (!lazy protocol witness table cache variable for type NCProtoSuggestionAdvertisement.SuggestionType and conformance NCProtoSuggestionAdvertisement.SuggestionType)
  {
    result = MEMORY[0x2494EB01C](&protocol conformance descriptor for NCProtoSuggestionAdvertisement.SuggestionType, &type metadata for NCProtoSuggestionAdvertisement.SuggestionType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NCProtoSuggestionAdvertisement.SuggestionType and conformance NCProtoSuggestionAdvertisement.SuggestionType);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type NCProtoSuggestionAdvertisement.SuggestionType and conformance NCProtoSuggestionAdvertisement.SuggestionType;
  if (!lazy protocol witness table cache variable for type NCProtoSuggestionAdvertisement.SuggestionType and conformance NCProtoSuggestionAdvertisement.SuggestionType)
  {
    result = MEMORY[0x2494EB01C](&protocol conformance descriptor for NCProtoSuggestionAdvertisement.SuggestionType, &type metadata for NCProtoSuggestionAdvertisement.SuggestionType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NCProtoSuggestionAdvertisement.SuggestionType and conformance NCProtoSuggestionAdvertisement.SuggestionType);
  }
  return result;
}

uint64_t type metadata accessor for NCProtoLagunaConnectionResponse(uint64_t a1)
{
  return type metadata accessor for NCProtoContactInfo(a1, (uint64_t *)&type metadata singleton initialization cache for NCProtoLagunaConnectionResponse);
}

uint64_t type metadata accessor for NCProtoDeviceLaunchedEvent(uint64_t a1)
{
  return type metadata accessor for NCProtoContactInfo(a1, (uint64_t *)&type metadata singleton initialization cache for NCProtoDeviceLaunchedEvent);
}

uint64_t type metadata accessor for NCProtoTVLaunchedEvent(uint64_t a1)
{
  return type metadata accessor for NCProtoContactInfo(a1, (uint64_t *)&type metadata singleton initialization cache for NCProtoTVLaunchedEvent);
}

uint64_t type metadata accessor for NCProtoEndLagunaSessionEvent(uint64_t a1)
{
  return type metadata accessor for NCProtoContactInfo(a1, (uint64_t *)&type metadata singleton initialization cache for NCProtoEndLagunaSessionEvent);
}

unint64_t lazy protocol witness table accessor for type NCProtoAddMemberRequest.NearbyConversationPullContext and conformance NCProtoAddMemberRequest.NearbyConversationPullContext()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type NCProtoAddMemberRequest.NearbyConversationPullContext and conformance NCProtoAddMemberRequest.NearbyConversationPullContext;
  if (!lazy protocol witness table cache variable for type NCProtoAddMemberRequest.NearbyConversationPullContext and conformance NCProtoAddMemberRequest.NearbyConversationPullContext)
  {
    result = MEMORY[0x2494EB01C](&protocol conformance descriptor for NCProtoAddMemberRequest.NearbyConversationPullContext, &type metadata for NCProtoAddMemberRequest.NearbyConversationPullContext);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NCProtoAddMemberRequest.NearbyConversationPullContext and conformance NCProtoAddMemberRequest.NearbyConversationPullContext);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type NCProtoAddMemberRequest.NearbyConversationPullContext and conformance NCProtoAddMemberRequest.NearbyConversationPullContext;
  if (!lazy protocol witness table cache variable for type NCProtoAddMemberRequest.NearbyConversationPullContext and conformance NCProtoAddMemberRequest.NearbyConversationPullContext)
  {
    result = MEMORY[0x2494EB01C](&protocol conformance descriptor for NCProtoAddMemberRequest.NearbyConversationPullContext, &type metadata for NCProtoAddMemberRequest.NearbyConversationPullContext);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NCProtoAddMemberRequest.NearbyConversationPullContext and conformance NCProtoAddMemberRequest.NearbyConversationPullContext);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type NCProtoAddMemberRequest.NearbyConversationPullContext and conformance NCProtoAddMemberRequest.NearbyConversationPullContext;
  if (!lazy protocol witness table cache variable for type NCProtoAddMemberRequest.NearbyConversationPullContext and conformance NCProtoAddMemberRequest.NearbyConversationPullContext)
  {
    result = MEMORY[0x2494EB01C](&protocol conformance descriptor for NCProtoAddMemberRequest.NearbyConversationPullContext, &type metadata for NCProtoAddMemberRequest.NearbyConversationPullContext);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NCProtoAddMemberRequest.NearbyConversationPullContext and conformance NCProtoAddMemberRequest.NearbyConversationPullContext);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type NCProtoAddMemberRequest.NearbyConversationPullContext and conformance NCProtoAddMemberRequest.NearbyConversationPullContext;
  if (!lazy protocol witness table cache variable for type NCProtoAddMemberRequest.NearbyConversationPullContext and conformance NCProtoAddMemberRequest.NearbyConversationPullContext)
  {
    result = MEMORY[0x2494EB01C](&protocol conformance descriptor for NCProtoAddMemberRequest.NearbyConversationPullContext, &type metadata for NCProtoAddMemberRequest.NearbyConversationPullContext);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NCProtoAddMemberRequest.NearbyConversationPullContext and conformance NCProtoAddMemberRequest.NearbyConversationPullContext);
  }
  return result;
}

uint64_t type metadata accessor for NCProtoPullLagunaSessionToTVResponse(uint64_t a1)
{
  return type metadata accessor for NCProtoContactInfo(a1, (uint64_t *)&type metadata singleton initialization cache for NCProtoPullLagunaSessionToTVResponse);
}

uint64_t type metadata accessor for NCProtoTransferActiveConversationResponse(uint64_t a1)
{
  return type metadata accessor for NCProtoContactInfo(a1, (uint64_t *)&type metadata singleton initialization cache for NCProtoTransferActiveConversationResponse);
}

unint64_t lazy protocol witness table accessor for type NCProtoStartLagunaSessionRequest.RecentCallFetchType and conformance NCProtoStartLagunaSessionRequest.RecentCallFetchType()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type NCProtoStartLagunaSessionRequest.RecentCallFetchType and conformance NCProtoStartLagunaSessionRequest.RecentCallFetchType;
  if (!lazy protocol witness table cache variable for type NCProtoStartLagunaSessionRequest.RecentCallFetchType and conformance NCProtoStartLagunaSessionRequest.RecentCallFetchType)
  {
    result = MEMORY[0x2494EB01C](&protocol conformance descriptor for NCProtoStartLagunaSessionRequest.RecentCallFetchType, &type metadata for NCProtoStartLagunaSessionRequest.RecentCallFetchType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NCProtoStartLagunaSessionRequest.RecentCallFetchType and conformance NCProtoStartLagunaSessionRequest.RecentCallFetchType);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type NCProtoStartLagunaSessionRequest.RecentCallFetchType and conformance NCProtoStartLagunaSessionRequest.RecentCallFetchType;
  if (!lazy protocol witness table cache variable for type NCProtoStartLagunaSessionRequest.RecentCallFetchType and conformance NCProtoStartLagunaSessionRequest.RecentCallFetchType)
  {
    result = MEMORY[0x2494EB01C](&protocol conformance descriptor for NCProtoStartLagunaSessionRequest.RecentCallFetchType, &type metadata for NCProtoStartLagunaSessionRequest.RecentCallFetchType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NCProtoStartLagunaSessionRequest.RecentCallFetchType and conformance NCProtoStartLagunaSessionRequest.RecentCallFetchType);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type NCProtoStartLagunaSessionRequest.RecentCallFetchType and conformance NCProtoStartLagunaSessionRequest.RecentCallFetchType;
  if (!lazy protocol witness table cache variable for type NCProtoStartLagunaSessionRequest.RecentCallFetchType and conformance NCProtoStartLagunaSessionRequest.RecentCallFetchType)
  {
    result = MEMORY[0x2494EB01C](&protocol conformance descriptor for NCProtoStartLagunaSessionRequest.RecentCallFetchType, &type metadata for NCProtoStartLagunaSessionRequest.RecentCallFetchType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NCProtoStartLagunaSessionRequest.RecentCallFetchType and conformance NCProtoStartLagunaSessionRequest.RecentCallFetchType);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type NCProtoStartLagunaSessionRequest.RecentCallFetchType and conformance NCProtoStartLagunaSessionRequest.RecentCallFetchType;
  if (!lazy protocol witness table cache variable for type NCProtoStartLagunaSessionRequest.RecentCallFetchType and conformance NCProtoStartLagunaSessionRequest.RecentCallFetchType)
  {
    result = MEMORY[0x2494EB01C](&protocol conformance descriptor for NCProtoStartLagunaSessionRequest.RecentCallFetchType, &type metadata for NCProtoStartLagunaSessionRequest.RecentCallFetchType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NCProtoStartLagunaSessionRequest.RecentCallFetchType and conformance NCProtoStartLagunaSessionRequest.RecentCallFetchType);
  }
  return result;
}

uint64_t type metadata accessor for NCProtoStartConversationResponse(uint64_t a1)
{
  return type metadata accessor for NCProtoContactInfo(a1, (uint64_t *)&type metadata singleton initialization cache for NCProtoStartConversationResponse);
}

uint64_t type metadata accessor for NCProtoJoinActiveConversationResponse(uint64_t a1)
{
  return type metadata accessor for NCProtoContactInfo(a1, (uint64_t *)&type metadata singleton initialization cache for NCProtoJoinActiveConversationResponse);
}

uint64_t type metadata accessor for NCProtoDeclineContinuityCallResponse(uint64_t a1)
{
  return type metadata accessor for NCProtoContactInfo(a1, (uint64_t *)&type metadata singleton initialization cache for NCProtoDeclineContinuityCallResponse);
}

uint64_t type metadata accessor for NCProtoGetAddressableContactsRequest(uint64_t a1)
{
  return type metadata accessor for NCProtoContactInfo(a1, (uint64_t *)&type metadata singleton initialization cache for NCProtoGetAddressableContactsRequest);
}

uint64_t type metadata accessor for NCProtoAddConversationParticipantsResponse(uint64_t a1)
{
  return type metadata accessor for NCProtoContactInfo(a1, (uint64_t *)&type metadata singleton initialization cache for NCProtoAddConversationParticipantsResponse);
}

uint64_t type metadata accessor for NCProtoPrepareTransferResponse(uint64_t a1)
{
  return type metadata accessor for NCProtoContactInfo(a1, (uint64_t *)&type metadata singleton initialization cache for NCProtoPrepareTransferResponse);
}

uint64_t type metadata accessor for NCProtoContactInfo(uint64_t a1, uint64_t *a2)
{
  uint64_t result;

  result = *a2;
  if (!*a2)
    return swift_getSingletonMetadata();
  return result;
}

unint64_t lazy protocol witness table accessor for type NCProtoMemberAssociationPrimaryInfo.MemberAssociationType and conformance NCProtoMemberAssociationPrimaryInfo.MemberAssociationType()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type NCProtoMemberAssociationPrimaryInfo.MemberAssociationType and conformance NCProtoMemberAssociationPrimaryInfo.MemberAssociationType;
  if (!lazy protocol witness table cache variable for type NCProtoMemberAssociationPrimaryInfo.MemberAssociationType and conformance NCProtoMemberAssociationPrimaryInfo.MemberAssociationType)
  {
    result = MEMORY[0x2494EB01C](&protocol conformance descriptor for NCProtoMemberAssociationPrimaryInfo.MemberAssociationType, &type metadata for NCProtoMemberAssociationPrimaryInfo.MemberAssociationType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NCProtoMemberAssociationPrimaryInfo.MemberAssociationType and conformance NCProtoMemberAssociationPrimaryInfo.MemberAssociationType);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type NCProtoMemberAssociationPrimaryInfo.MemberAssociationType and conformance NCProtoMemberAssociationPrimaryInfo.MemberAssociationType;
  if (!lazy protocol witness table cache variable for type NCProtoMemberAssociationPrimaryInfo.MemberAssociationType and conformance NCProtoMemberAssociationPrimaryInfo.MemberAssociationType)
  {
    result = MEMORY[0x2494EB01C](&protocol conformance descriptor for NCProtoMemberAssociationPrimaryInfo.MemberAssociationType, &type metadata for NCProtoMemberAssociationPrimaryInfo.MemberAssociationType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NCProtoMemberAssociationPrimaryInfo.MemberAssociationType and conformance NCProtoMemberAssociationPrimaryInfo.MemberAssociationType);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type NCProtoMemberAssociationPrimaryInfo.MemberAssociationType and conformance NCProtoMemberAssociationPrimaryInfo.MemberAssociationType;
  if (!lazy protocol witness table cache variable for type NCProtoMemberAssociationPrimaryInfo.MemberAssociationType and conformance NCProtoMemberAssociationPrimaryInfo.MemberAssociationType)
  {
    result = MEMORY[0x2494EB01C](&protocol conformance descriptor for NCProtoMemberAssociationPrimaryInfo.MemberAssociationType, &type metadata for NCProtoMemberAssociationPrimaryInfo.MemberAssociationType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NCProtoMemberAssociationPrimaryInfo.MemberAssociationType and conformance NCProtoMemberAssociationPrimaryInfo.MemberAssociationType);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type NCProtoMemberAssociationPrimaryInfo.MemberAssociationType and conformance NCProtoMemberAssociationPrimaryInfo.MemberAssociationType;
  if (!lazy protocol witness table cache variable for type NCProtoMemberAssociationPrimaryInfo.MemberAssociationType and conformance NCProtoMemberAssociationPrimaryInfo.MemberAssociationType)
  {
    result = MEMORY[0x2494EB01C](&protocol conformance descriptor for NCProtoMemberAssociationPrimaryInfo.MemberAssociationType, &type metadata for NCProtoMemberAssociationPrimaryInfo.MemberAssociationType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NCProtoMemberAssociationPrimaryInfo.MemberAssociationType and conformance NCProtoMemberAssociationPrimaryInfo.MemberAssociationType);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type NCProtoConversationAVMode and conformance NCProtoConversationAVMode()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type NCProtoConversationAVMode and conformance NCProtoConversationAVMode;
  if (!lazy protocol witness table cache variable for type NCProtoConversationAVMode and conformance NCProtoConversationAVMode)
  {
    result = MEMORY[0x2494EB01C](&protocol conformance descriptor for NCProtoConversationAVMode, &type metadata for NCProtoConversationAVMode);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NCProtoConversationAVMode and conformance NCProtoConversationAVMode);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type NCProtoConversationAVMode and conformance NCProtoConversationAVMode;
  if (!lazy protocol witness table cache variable for type NCProtoConversationAVMode and conformance NCProtoConversationAVMode)
  {
    result = MEMORY[0x2494EB01C](&protocol conformance descriptor for NCProtoConversationAVMode, &type metadata for NCProtoConversationAVMode);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NCProtoConversationAVMode and conformance NCProtoConversationAVMode);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type NCProtoConversationAVMode and conformance NCProtoConversationAVMode;
  if (!lazy protocol witness table cache variable for type NCProtoConversationAVMode and conformance NCProtoConversationAVMode)
  {
    result = MEMORY[0x2494EB01C](&protocol conformance descriptor for NCProtoConversationAVMode, &type metadata for NCProtoConversationAVMode);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NCProtoConversationAVMode and conformance NCProtoConversationAVMode);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type NCProtoConversationAVMode and conformance NCProtoConversationAVMode;
  if (!lazy protocol witness table cache variable for type NCProtoConversationAVMode and conformance NCProtoConversationAVMode)
  {
    result = MEMORY[0x2494EB01C](&protocol conformance descriptor for NCProtoConversationAVMode, &type metadata for NCProtoConversationAVMode);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NCProtoConversationAVMode and conformance NCProtoConversationAVMode);
  }
  return result;
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in NCProtoConversationAVMode()
{
  return lazy protocol witness table accessor for type [NCProtoConversationAVMode] and conformance [A](&lazy protocol witness table cache variable for type [NCProtoConversationAVMode] and conformance [A], &demangling cache variable for type metadata for [NCProtoConversationAVMode]);
}

uint64_t __swift_instantiateConcreteTypeFromMangledNameAbstract(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (result < 0)
  {
    result = MEMORY[0x2494EB010](255, (char *)a1 + (int)result, -(result >> 32), 0, 0);
    *a1 = result;
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type NCProtoConversationState and conformance NCProtoConversationState()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type NCProtoConversationState and conformance NCProtoConversationState;
  if (!lazy protocol witness table cache variable for type NCProtoConversationState and conformance NCProtoConversationState)
  {
    result = MEMORY[0x2494EB01C](&protocol conformance descriptor for NCProtoConversationState, &type metadata for NCProtoConversationState);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NCProtoConversationState and conformance NCProtoConversationState);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type NCProtoConversationState and conformance NCProtoConversationState;
  if (!lazy protocol witness table cache variable for type NCProtoConversationState and conformance NCProtoConversationState)
  {
    result = MEMORY[0x2494EB01C](&protocol conformance descriptor for NCProtoConversationState, &type metadata for NCProtoConversationState);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NCProtoConversationState and conformance NCProtoConversationState);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type NCProtoConversationState and conformance NCProtoConversationState;
  if (!lazy protocol witness table cache variable for type NCProtoConversationState and conformance NCProtoConversationState)
  {
    result = MEMORY[0x2494EB01C](&protocol conformance descriptor for NCProtoConversationState, &type metadata for NCProtoConversationState);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NCProtoConversationState and conformance NCProtoConversationState);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type NCProtoConversationState and conformance NCProtoConversationState;
  if (!lazy protocol witness table cache variable for type NCProtoConversationState and conformance NCProtoConversationState)
  {
    result = MEMORY[0x2494EB01C](&protocol conformance descriptor for NCProtoConversationState, &type metadata for NCProtoConversationState);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NCProtoConversationState and conformance NCProtoConversationState);
  }
  return result;
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in NCProtoConversationState()
{
  return lazy protocol witness table accessor for type [NCProtoConversationAVMode] and conformance [A](&lazy protocol witness table cache variable for type [NCProtoConversationState] and conformance [A], &demangling cache variable for type metadata for [NCProtoConversationState]);
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in NCProtoContactHandleAnonym.AnonymType()
{
  return lazy protocol witness table accessor for type [NCProtoConversationAVMode] and conformance [A](&lazy protocol witness table cache variable for type [NCProtoContactHandleAnonym.AnonymType] and conformance [A], &demangling cache variable for type metadata for [NCProtoContactHandleAnonym.AnonymType]);
}

unint64_t lazy protocol witness table accessor for type NCProtoContinuityCall.Status and conformance NCProtoContinuityCall.Status()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type NCProtoContinuityCall.Status and conformance NCProtoContinuityCall.Status;
  if (!lazy protocol witness table cache variable for type NCProtoContinuityCall.Status and conformance NCProtoContinuityCall.Status)
  {
    result = MEMORY[0x2494EB01C](&protocol conformance descriptor for NCProtoContinuityCall.Status, &type metadata for NCProtoContinuityCall.Status);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NCProtoContinuityCall.Status and conformance NCProtoContinuityCall.Status);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type NCProtoContinuityCall.Status and conformance NCProtoContinuityCall.Status;
  if (!lazy protocol witness table cache variable for type NCProtoContinuityCall.Status and conformance NCProtoContinuityCall.Status)
  {
    result = MEMORY[0x2494EB01C](&protocol conformance descriptor for NCProtoContinuityCall.Status, &type metadata for NCProtoContinuityCall.Status);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NCProtoContinuityCall.Status and conformance NCProtoContinuityCall.Status);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type NCProtoContinuityCall.Status and conformance NCProtoContinuityCall.Status;
  if (!lazy protocol witness table cache variable for type NCProtoContinuityCall.Status and conformance NCProtoContinuityCall.Status)
  {
    result = MEMORY[0x2494EB01C](&protocol conformance descriptor for NCProtoContinuityCall.Status, &type metadata for NCProtoContinuityCall.Status);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NCProtoContinuityCall.Status and conformance NCProtoContinuityCall.Status);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type NCProtoContinuityCall.Status and conformance NCProtoContinuityCall.Status;
  if (!lazy protocol witness table cache variable for type NCProtoContinuityCall.Status and conformance NCProtoContinuityCall.Status)
  {
    result = MEMORY[0x2494EB01C](&protocol conformance descriptor for NCProtoContinuityCall.Status, &type metadata for NCProtoContinuityCall.Status);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NCProtoContinuityCall.Status and conformance NCProtoContinuityCall.Status);
  }
  return result;
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in NCProtoContinuityCall.Status()
{
  return lazy protocol witness table accessor for type [NCProtoConversationAVMode] and conformance [A](&lazy protocol witness table cache variable for type [NCProtoContinuityCall.Status] and conformance [A], &demangling cache variable for type metadata for [NCProtoContinuityCall.Status]);
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in NCProtoSuggestionAdvertisement.SuggestionType()
{
  return lazy protocol witness table accessor for type [NCProtoConversationAVMode] and conformance [A](&lazy protocol witness table cache variable for type [NCProtoSuggestionAdvertisement.SuggestionType] and conformance [A], &demangling cache variable for type metadata for [NCProtoSuggestionAdvertisement.SuggestionType]);
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in NCProtoAddMemberRequest.NearbyConversationPullContext()
{
  return lazy protocol witness table accessor for type [NCProtoConversationAVMode] and conformance [A](&lazy protocol witness table cache variable for type [NCProtoAddMemberRequest.NearbyConversationPullContext] and conformance [A], &demangling cache variable for type metadata for [NCProtoAddMemberRequest.NearbyConversationPullContext]);
}

unint64_t lazy protocol witness table accessor for type NCProtoPullLagunaSessionToTVRequest.Reason and conformance NCProtoPullLagunaSessionToTVRequest.Reason()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type NCProtoPullLagunaSessionToTVRequest.Reason and conformance NCProtoPullLagunaSessionToTVRequest.Reason;
  if (!lazy protocol witness table cache variable for type NCProtoPullLagunaSessionToTVRequest.Reason and conformance NCProtoPullLagunaSessionToTVRequest.Reason)
  {
    result = MEMORY[0x2494EB01C](&protocol conformance descriptor for NCProtoPullLagunaSessionToTVRequest.Reason, &type metadata for NCProtoPullLagunaSessionToTVRequest.Reason);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NCProtoPullLagunaSessionToTVRequest.Reason and conformance NCProtoPullLagunaSessionToTVRequest.Reason);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type NCProtoPullLagunaSessionToTVRequest.Reason and conformance NCProtoPullLagunaSessionToTVRequest.Reason;
  if (!lazy protocol witness table cache variable for type NCProtoPullLagunaSessionToTVRequest.Reason and conformance NCProtoPullLagunaSessionToTVRequest.Reason)
  {
    result = MEMORY[0x2494EB01C](&protocol conformance descriptor for NCProtoPullLagunaSessionToTVRequest.Reason, &type metadata for NCProtoPullLagunaSessionToTVRequest.Reason);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NCProtoPullLagunaSessionToTVRequest.Reason and conformance NCProtoPullLagunaSessionToTVRequest.Reason);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type NCProtoPullLagunaSessionToTVRequest.Reason and conformance NCProtoPullLagunaSessionToTVRequest.Reason;
  if (!lazy protocol witness table cache variable for type NCProtoPullLagunaSessionToTVRequest.Reason and conformance NCProtoPullLagunaSessionToTVRequest.Reason)
  {
    result = MEMORY[0x2494EB01C](&protocol conformance descriptor for NCProtoPullLagunaSessionToTVRequest.Reason, &type metadata for NCProtoPullLagunaSessionToTVRequest.Reason);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NCProtoPullLagunaSessionToTVRequest.Reason and conformance NCProtoPullLagunaSessionToTVRequest.Reason);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type NCProtoPullLagunaSessionToTVRequest.Reason and conformance NCProtoPullLagunaSessionToTVRequest.Reason;
  if (!lazy protocol witness table cache variable for type NCProtoPullLagunaSessionToTVRequest.Reason and conformance NCProtoPullLagunaSessionToTVRequest.Reason)
  {
    result = MEMORY[0x2494EB01C](&protocol conformance descriptor for NCProtoPullLagunaSessionToTVRequest.Reason, &type metadata for NCProtoPullLagunaSessionToTVRequest.Reason);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NCProtoPullLagunaSessionToTVRequest.Reason and conformance NCProtoPullLagunaSessionToTVRequest.Reason);
  }
  return result;
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in NCProtoPullLagunaSessionToTVRequest.Reason()
{
  return lazy protocol witness table accessor for type [NCProtoConversationAVMode] and conformance [A](&lazy protocol witness table cache variable for type [NCProtoPullLagunaSessionToTVRequest.Reason] and conformance [A], &demangling cache variable for type metadata for [NCProtoPullLagunaSessionToTVRequest.Reason]);
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in NCProtoStartLagunaSessionRequest.RecentCallFetchType()
{
  return lazy protocol witness table accessor for type [NCProtoConversationAVMode] and conformance [A](&lazy protocol witness table cache variable for type [NCProtoStartLagunaSessionRequest.RecentCallFetchType] and conformance [A], &demangling cache variable for type metadata for [NCProtoStartLagunaSessionRequest.RecentCallFetchType]);
}

unint64_t lazy protocol witness table accessor for type NCProtoDeviceTokenRequest.ConversationHandoffType and conformance NCProtoDeviceTokenRequest.ConversationHandoffType()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type NCProtoDeviceTokenRequest.ConversationHandoffType and conformance NCProtoDeviceTokenRequest.ConversationHandoffType;
  if (!lazy protocol witness table cache variable for type NCProtoDeviceTokenRequest.ConversationHandoffType and conformance NCProtoDeviceTokenRequest.ConversationHandoffType)
  {
    result = MEMORY[0x2494EB01C](&protocol conformance descriptor for NCProtoDeviceTokenRequest.ConversationHandoffType, &type metadata for NCProtoDeviceTokenRequest.ConversationHandoffType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NCProtoDeviceTokenRequest.ConversationHandoffType and conformance NCProtoDeviceTokenRequest.ConversationHandoffType);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type NCProtoDeviceTokenRequest.ConversationHandoffType and conformance NCProtoDeviceTokenRequest.ConversationHandoffType;
  if (!lazy protocol witness table cache variable for type NCProtoDeviceTokenRequest.ConversationHandoffType and conformance NCProtoDeviceTokenRequest.ConversationHandoffType)
  {
    result = MEMORY[0x2494EB01C](&protocol conformance descriptor for NCProtoDeviceTokenRequest.ConversationHandoffType, &type metadata for NCProtoDeviceTokenRequest.ConversationHandoffType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NCProtoDeviceTokenRequest.ConversationHandoffType and conformance NCProtoDeviceTokenRequest.ConversationHandoffType);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type NCProtoDeviceTokenRequest.ConversationHandoffType and conformance NCProtoDeviceTokenRequest.ConversationHandoffType;
  if (!lazy protocol witness table cache variable for type NCProtoDeviceTokenRequest.ConversationHandoffType and conformance NCProtoDeviceTokenRequest.ConversationHandoffType)
  {
    result = MEMORY[0x2494EB01C](&protocol conformance descriptor for NCProtoDeviceTokenRequest.ConversationHandoffType, &type metadata for NCProtoDeviceTokenRequest.ConversationHandoffType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NCProtoDeviceTokenRequest.ConversationHandoffType and conformance NCProtoDeviceTokenRequest.ConversationHandoffType);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type NCProtoDeviceTokenRequest.ConversationHandoffType and conformance NCProtoDeviceTokenRequest.ConversationHandoffType;
  if (!lazy protocol witness table cache variable for type NCProtoDeviceTokenRequest.ConversationHandoffType and conformance NCProtoDeviceTokenRequest.ConversationHandoffType)
  {
    result = MEMORY[0x2494EB01C](&protocol conformance descriptor for NCProtoDeviceTokenRequest.ConversationHandoffType, &type metadata for NCProtoDeviceTokenRequest.ConversationHandoffType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NCProtoDeviceTokenRequest.ConversationHandoffType and conformance NCProtoDeviceTokenRequest.ConversationHandoffType);
  }
  return result;
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in NCProtoDeviceTokenRequest.ConversationHandoffType()
{
  return lazy protocol witness table accessor for type [NCProtoConversationAVMode] and conformance [A](&lazy protocol witness table cache variable for type [NCProtoDeviceTokenRequest.ConversationHandoffType] and conformance [A], &demangling cache variable for type metadata for [NCProtoDeviceTokenRequest.ConversationHandoffType]);
}

unint64_t lazy protocol witness table accessor for type NCProtoDisconnectRequest.DisconnectReason and conformance NCProtoDisconnectRequest.DisconnectReason()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type NCProtoDisconnectRequest.DisconnectReason and conformance NCProtoDisconnectRequest.DisconnectReason;
  if (!lazy protocol witness table cache variable for type NCProtoDisconnectRequest.DisconnectReason and conformance NCProtoDisconnectRequest.DisconnectReason)
  {
    result = MEMORY[0x2494EB01C](&protocol conformance descriptor for NCProtoDisconnectRequest.DisconnectReason, &type metadata for NCProtoDisconnectRequest.DisconnectReason);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NCProtoDisconnectRequest.DisconnectReason and conformance NCProtoDisconnectRequest.DisconnectReason);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type NCProtoDisconnectRequest.DisconnectReason and conformance NCProtoDisconnectRequest.DisconnectReason;
  if (!lazy protocol witness table cache variable for type NCProtoDisconnectRequest.DisconnectReason and conformance NCProtoDisconnectRequest.DisconnectReason)
  {
    result = MEMORY[0x2494EB01C](&protocol conformance descriptor for NCProtoDisconnectRequest.DisconnectReason, &type metadata for NCProtoDisconnectRequest.DisconnectReason);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NCProtoDisconnectRequest.DisconnectReason and conformance NCProtoDisconnectRequest.DisconnectReason);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type NCProtoDisconnectRequest.DisconnectReason and conformance NCProtoDisconnectRequest.DisconnectReason;
  if (!lazy protocol witness table cache variable for type NCProtoDisconnectRequest.DisconnectReason and conformance NCProtoDisconnectRequest.DisconnectReason)
  {
    result = MEMORY[0x2494EB01C](&protocol conformance descriptor for NCProtoDisconnectRequest.DisconnectReason, &type metadata for NCProtoDisconnectRequest.DisconnectReason);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NCProtoDisconnectRequest.DisconnectReason and conformance NCProtoDisconnectRequest.DisconnectReason);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type NCProtoDisconnectRequest.DisconnectReason and conformance NCProtoDisconnectRequest.DisconnectReason;
  if (!lazy protocol witness table cache variable for type NCProtoDisconnectRequest.DisconnectReason and conformance NCProtoDisconnectRequest.DisconnectReason)
  {
    result = MEMORY[0x2494EB01C](&protocol conformance descriptor for NCProtoDisconnectRequest.DisconnectReason, &type metadata for NCProtoDisconnectRequest.DisconnectReason);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NCProtoDisconnectRequest.DisconnectReason and conformance NCProtoDisconnectRequest.DisconnectReason);
  }
  return result;
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in NCProtoDisconnectRequest.DisconnectReason()
{
  return lazy protocol witness table accessor for type [NCProtoConversationAVMode] and conformance [A](&lazy protocol witness table cache variable for type [NCProtoDisconnectRequest.DisconnectReason] and conformance [A], &demangling cache variable for type metadata for [NCProtoDisconnectRequest.DisconnectReason]);
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in NCProtoMemberAssociationPrimaryInfo.MemberAssociationType()
{
  return lazy protocol witness table accessor for type [NCProtoConversationAVMode] and conformance [A](&lazy protocol witness table cache variable for type [NCProtoMemberAssociationPrimaryInfo.MemberAssociationType] and conformance [A], &demangling cache variable for type metadata for [NCProtoMemberAssociationPrimaryInfo.MemberAssociationType]);
}

uint64_t lazy protocol witness table accessor for type [NCProtoConversationAVMode] and conformance [A](unint64_t *a1, uint64_t *a2)
{
  uint64_t result;
  uint64_t v4;

  result = *a1;
  if (!result)
  {
    v4 = __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    result = MEMORY[0x2494EB01C](MEMORY[0x24BEE12E0], v4);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t base witness table accessor for CustomDebugStringConvertible in NCProtoContactInfo()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoContactInfo and conformance NCProtoContactInfo, type metadata accessor for NCProtoContactInfo, (uint64_t)&protocol conformance descriptor for NCProtoContactInfo);
}

uint64_t base witness table accessor for Message in NCProtoContactInfo()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoContactInfo and conformance NCProtoContactInfo, type metadata accessor for NCProtoContactInfo, (uint64_t)&protocol conformance descriptor for NCProtoContactInfo);
}

uint64_t base witness table accessor for Hashable in NCProtoContactInfo()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoContactInfo and conformance NCProtoContactInfo, type metadata accessor for NCProtoContactInfo, (uint64_t)&protocol conformance descriptor for NCProtoContactInfo);
}

uint64_t base witness table accessor for Equatable in NCProtoContactInfo()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoContactInfo and conformance NCProtoContactInfo, type metadata accessor for NCProtoContactInfo, (uint64_t)&protocol conformance descriptor for NCProtoContactInfo);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in NCProtoContactHandleAnonym()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoContactHandleAnonym and conformance NCProtoContactHandleAnonym, type metadata accessor for NCProtoContactHandleAnonym, (uint64_t)&protocol conformance descriptor for NCProtoContactHandleAnonym);
}

uint64_t base witness table accessor for Message in NCProtoContactHandleAnonym()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoContactHandleAnonym and conformance NCProtoContactHandleAnonym, type metadata accessor for NCProtoContactHandleAnonym, (uint64_t)&protocol conformance descriptor for NCProtoContactHandleAnonym);
}

uint64_t base witness table accessor for Hashable in NCProtoContactHandleAnonym()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoContactHandleAnonym and conformance NCProtoContactHandleAnonym, type metadata accessor for NCProtoContactHandleAnonym, (uint64_t)&protocol conformance descriptor for NCProtoContactHandleAnonym);
}

uint64_t base witness table accessor for Equatable in NCProtoContactHandleAnonym()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoContactHandleAnonym and conformance NCProtoContactHandleAnonym, type metadata accessor for NCProtoContactHandleAnonym, (uint64_t)&protocol conformance descriptor for NCProtoContactHandleAnonym);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in NCProtoContinuityFavorite()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoContinuityFavorite and conformance NCProtoContinuityFavorite, type metadata accessor for NCProtoContinuityFavorite, (uint64_t)&protocol conformance descriptor for NCProtoContinuityFavorite);
}

uint64_t base witness table accessor for Message in NCProtoContinuityFavorite()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoContinuityFavorite and conformance NCProtoContinuityFavorite, type metadata accessor for NCProtoContinuityFavorite, (uint64_t)&protocol conformance descriptor for NCProtoContinuityFavorite);
}

uint64_t base witness table accessor for Hashable in NCProtoContinuityFavorite()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoContinuityFavorite and conformance NCProtoContinuityFavorite, type metadata accessor for NCProtoContinuityFavorite, (uint64_t)&protocol conformance descriptor for NCProtoContinuityFavorite);
}

uint64_t base witness table accessor for Equatable in NCProtoContinuityFavorite()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoContinuityFavorite and conformance NCProtoContinuityFavorite, type metadata accessor for NCProtoContinuityFavorite, (uint64_t)&protocol conformance descriptor for NCProtoContinuityFavorite);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in NCProtoAddressableContact()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoAddressableContact and conformance NCProtoAddressableContact, type metadata accessor for NCProtoAddressableContact, (uint64_t)&protocol conformance descriptor for NCProtoAddressableContact);
}

uint64_t base witness table accessor for Message in NCProtoAddressableContact()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoAddressableContact and conformance NCProtoAddressableContact, type metadata accessor for NCProtoAddressableContact, (uint64_t)&protocol conformance descriptor for NCProtoAddressableContact);
}

uint64_t base witness table accessor for Hashable in NCProtoAddressableContact()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoAddressableContact and conformance NCProtoAddressableContact, type metadata accessor for NCProtoAddressableContact, (uint64_t)&protocol conformance descriptor for NCProtoAddressableContact);
}

uint64_t base witness table accessor for Equatable in NCProtoAddressableContact()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoAddressableContact and conformance NCProtoAddressableContact, type metadata accessor for NCProtoAddressableContact, (uint64_t)&protocol conformance descriptor for NCProtoAddressableContact);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in NCProtoActiveConversation()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoActiveConversation and conformance NCProtoActiveConversation, type metadata accessor for NCProtoActiveConversation, (uint64_t)&protocol conformance descriptor for NCProtoActiveConversation);
}

uint64_t base witness table accessor for Message in NCProtoActiveConversation()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoActiveConversation and conformance NCProtoActiveConversation, type metadata accessor for NCProtoActiveConversation, (uint64_t)&protocol conformance descriptor for NCProtoActiveConversation);
}

uint64_t base witness table accessor for Hashable in NCProtoActiveConversation()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoActiveConversation and conformance NCProtoActiveConversation, type metadata accessor for NCProtoActiveConversation, (uint64_t)&protocol conformance descriptor for NCProtoActiveConversation);
}

uint64_t base witness table accessor for Equatable in NCProtoActiveConversation()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoActiveConversation and conformance NCProtoActiveConversation, type metadata accessor for NCProtoActiveConversation, (uint64_t)&protocol conformance descriptor for NCProtoActiveConversation);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in NCProtoContinuityCall()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoContinuityCall and conformance NCProtoContinuityCall, type metadata accessor for NCProtoContinuityCall, (uint64_t)&protocol conformance descriptor for NCProtoContinuityCall);
}

uint64_t base witness table accessor for Message in NCProtoContinuityCall()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoContinuityCall and conformance NCProtoContinuityCall, type metadata accessor for NCProtoContinuityCall, (uint64_t)&protocol conformance descriptor for NCProtoContinuityCall);
}

uint64_t base witness table accessor for Hashable in NCProtoContinuityCall()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoContinuityCall and conformance NCProtoContinuityCall, type metadata accessor for NCProtoContinuityCall, (uint64_t)&protocol conformance descriptor for NCProtoContinuityCall);
}

uint64_t base witness table accessor for Equatable in NCProtoContinuityCall()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoContinuityCall and conformance NCProtoContinuityCall, type metadata accessor for NCProtoContinuityCall, (uint64_t)&protocol conformance descriptor for NCProtoContinuityCall);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in NCProtoStartedSessionEvent()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoStartedSessionEvent and conformance NCProtoStartedSessionEvent, type metadata accessor for NCProtoStartedSessionEvent, (uint64_t)&protocol conformance descriptor for NCProtoStartedSessionEvent);
}

uint64_t base witness table accessor for Message in NCProtoStartedSessionEvent()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoStartedSessionEvent and conformance NCProtoStartedSessionEvent, type metadata accessor for NCProtoStartedSessionEvent, (uint64_t)&protocol conformance descriptor for NCProtoStartedSessionEvent);
}

uint64_t base witness table accessor for Hashable in NCProtoStartedSessionEvent()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoStartedSessionEvent and conformance NCProtoStartedSessionEvent, type metadata accessor for NCProtoStartedSessionEvent, (uint64_t)&protocol conformance descriptor for NCProtoStartedSessionEvent);
}

uint64_t base witness table accessor for Equatable in NCProtoStartedSessionEvent()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoStartedSessionEvent and conformance NCProtoStartedSessionEvent, type metadata accessor for NCProtoStartedSessionEvent, (uint64_t)&protocol conformance descriptor for NCProtoStartedSessionEvent);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in NCProtoEndedSessionEvent()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoEndedSessionEvent and conformance NCProtoEndedSessionEvent, type metadata accessor for NCProtoEndedSessionEvent, (uint64_t)&protocol conformance descriptor for NCProtoEndedSessionEvent);
}

uint64_t base witness table accessor for Message in NCProtoEndedSessionEvent()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoEndedSessionEvent and conformance NCProtoEndedSessionEvent, type metadata accessor for NCProtoEndedSessionEvent, (uint64_t)&protocol conformance descriptor for NCProtoEndedSessionEvent);
}

uint64_t base witness table accessor for Hashable in NCProtoEndedSessionEvent()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoEndedSessionEvent and conformance NCProtoEndedSessionEvent, type metadata accessor for NCProtoEndedSessionEvent, (uint64_t)&protocol conformance descriptor for NCProtoEndedSessionEvent);
}

uint64_t base witness table accessor for Equatable in NCProtoEndedSessionEvent()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoEndedSessionEvent and conformance NCProtoEndedSessionEvent, type metadata accessor for NCProtoEndedSessionEvent, (uint64_t)&protocol conformance descriptor for NCProtoEndedSessionEvent);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in NCProtoContactUpdateEvent()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoContactUpdateEvent and conformance NCProtoContactUpdateEvent, type metadata accessor for NCProtoContactUpdateEvent, (uint64_t)&protocol conformance descriptor for NCProtoContactUpdateEvent);
}

uint64_t base witness table accessor for Message in NCProtoContactUpdateEvent()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoContactUpdateEvent and conformance NCProtoContactUpdateEvent, type metadata accessor for NCProtoContactUpdateEvent, (uint64_t)&protocol conformance descriptor for NCProtoContactUpdateEvent);
}

uint64_t base witness table accessor for Hashable in NCProtoContactUpdateEvent()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoContactUpdateEvent and conformance NCProtoContactUpdateEvent, type metadata accessor for NCProtoContactUpdateEvent, (uint64_t)&protocol conformance descriptor for NCProtoContactUpdateEvent);
}

uint64_t base witness table accessor for Equatable in NCProtoContactUpdateEvent()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoContactUpdateEvent and conformance NCProtoContactUpdateEvent, type metadata accessor for NCProtoContactUpdateEvent, (uint64_t)&protocol conformance descriptor for NCProtoContactUpdateEvent);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in NCProtoJoinEvent()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoJoinEvent and conformance NCProtoJoinEvent, type metadata accessor for NCProtoJoinEvent, (uint64_t)&protocol conformance descriptor for NCProtoJoinEvent);
}

uint64_t base witness table accessor for Message in NCProtoJoinEvent()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoJoinEvent and conformance NCProtoJoinEvent, type metadata accessor for NCProtoJoinEvent, (uint64_t)&protocol conformance descriptor for NCProtoJoinEvent);
}

uint64_t base witness table accessor for Hashable in NCProtoJoinEvent()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoJoinEvent and conformance NCProtoJoinEvent, type metadata accessor for NCProtoJoinEvent, (uint64_t)&protocol conformance descriptor for NCProtoJoinEvent);
}

uint64_t base witness table accessor for Equatable in NCProtoJoinEvent()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoJoinEvent and conformance NCProtoJoinEvent, type metadata accessor for NCProtoJoinEvent, (uint64_t)&protocol conformance descriptor for NCProtoJoinEvent);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in NCProtoRecentCallsDidChangeEvent()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoRecentCallsDidChangeEvent and conformance NCProtoRecentCallsDidChangeEvent, type metadata accessor for NCProtoRecentCallsDidChangeEvent, (uint64_t)&protocol conformance descriptor for NCProtoRecentCallsDidChangeEvent);
}

uint64_t base witness table accessor for Message in NCProtoRecentCallsDidChangeEvent()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoRecentCallsDidChangeEvent and conformance NCProtoRecentCallsDidChangeEvent, type metadata accessor for NCProtoRecentCallsDidChangeEvent, (uint64_t)&protocol conformance descriptor for NCProtoRecentCallsDidChangeEvent);
}

uint64_t base witness table accessor for Hashable in NCProtoRecentCallsDidChangeEvent()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoRecentCallsDidChangeEvent and conformance NCProtoRecentCallsDidChangeEvent, type metadata accessor for NCProtoRecentCallsDidChangeEvent, (uint64_t)&protocol conformance descriptor for NCProtoRecentCallsDidChangeEvent);
}

uint64_t base witness table accessor for Equatable in NCProtoRecentCallsDidChangeEvent()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoRecentCallsDidChangeEvent and conformance NCProtoRecentCallsDidChangeEvent, type metadata accessor for NCProtoRecentCallsDidChangeEvent, (uint64_t)&protocol conformance descriptor for NCProtoRecentCallsDidChangeEvent);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in NCProtoFavoritesDidChangeEvent()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoFavoritesDidChangeEvent and conformance NCProtoFavoritesDidChangeEvent, type metadata accessor for NCProtoFavoritesDidChangeEvent, (uint64_t)&protocol conformance descriptor for NCProtoFavoritesDidChangeEvent);
}

uint64_t base witness table accessor for Message in NCProtoFavoritesDidChangeEvent()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoFavoritesDidChangeEvent and conformance NCProtoFavoritesDidChangeEvent, type metadata accessor for NCProtoFavoritesDidChangeEvent, (uint64_t)&protocol conformance descriptor for NCProtoFavoritesDidChangeEvent);
}

uint64_t base witness table accessor for Hashable in NCProtoFavoritesDidChangeEvent()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoFavoritesDidChangeEvent and conformance NCProtoFavoritesDidChangeEvent, type metadata accessor for NCProtoFavoritesDidChangeEvent, (uint64_t)&protocol conformance descriptor for NCProtoFavoritesDidChangeEvent);
}

uint64_t base witness table accessor for Equatable in NCProtoFavoritesDidChangeEvent()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoFavoritesDidChangeEvent and conformance NCProtoFavoritesDidChangeEvent, type metadata accessor for NCProtoFavoritesDidChangeEvent, (uint64_t)&protocol conformance descriptor for NCProtoFavoritesDidChangeEvent);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in NCProtoActiveConversationsDidChangeEvent()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoActiveConversationsDidChangeEvent and conformance NCProtoActiveConversationsDidChangeEvent, type metadata accessor for NCProtoActiveConversationsDidChangeEvent, (uint64_t)&protocol conformance descriptor for NCProtoActiveConversationsDidChangeEvent);
}

uint64_t base witness table accessor for Message in NCProtoActiveConversationsDidChangeEvent()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoActiveConversationsDidChangeEvent and conformance NCProtoActiveConversationsDidChangeEvent, type metadata accessor for NCProtoActiveConversationsDidChangeEvent, (uint64_t)&protocol conformance descriptor for NCProtoActiveConversationsDidChangeEvent);
}

uint64_t base witness table accessor for Hashable in NCProtoActiveConversationsDidChangeEvent()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoActiveConversationsDidChangeEvent and conformance NCProtoActiveConversationsDidChangeEvent, type metadata accessor for NCProtoActiveConversationsDidChangeEvent, (uint64_t)&protocol conformance descriptor for NCProtoActiveConversationsDidChangeEvent);
}

uint64_t base witness table accessor for Equatable in NCProtoActiveConversationsDidChangeEvent()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoActiveConversationsDidChangeEvent and conformance NCProtoActiveConversationsDidChangeEvent, type metadata accessor for NCProtoActiveConversationsDidChangeEvent, (uint64_t)&protocol conformance descriptor for NCProtoActiveConversationsDidChangeEvent);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in NCProtoContinuityCallsDidChangeEvent()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoContinuityCallsDidChangeEvent and conformance NCProtoContinuityCallsDidChangeEvent, type metadata accessor for NCProtoContinuityCallsDidChangeEvent, (uint64_t)&protocol conformance descriptor for NCProtoContinuityCallsDidChangeEvent);
}

uint64_t base witness table accessor for Message in NCProtoContinuityCallsDidChangeEvent()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoContinuityCallsDidChangeEvent and conformance NCProtoContinuityCallsDidChangeEvent, type metadata accessor for NCProtoContinuityCallsDidChangeEvent, (uint64_t)&protocol conformance descriptor for NCProtoContinuityCallsDidChangeEvent);
}

uint64_t base witness table accessor for Hashable in NCProtoContinuityCallsDidChangeEvent()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoContinuityCallsDidChangeEvent and conformance NCProtoContinuityCallsDidChangeEvent, type metadata accessor for NCProtoContinuityCallsDidChangeEvent, (uint64_t)&protocol conformance descriptor for NCProtoContinuityCallsDidChangeEvent);
}

uint64_t base witness table accessor for Equatable in NCProtoContinuityCallsDidChangeEvent()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoContinuityCallsDidChangeEvent and conformance NCProtoContinuityCallsDidChangeEvent, type metadata accessor for NCProtoContinuityCallsDidChangeEvent, (uint64_t)&protocol conformance descriptor for NCProtoContinuityCallsDidChangeEvent);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in NCProtoSuggestionAdvertisement()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoSuggestionAdvertisement and conformance NCProtoSuggestionAdvertisement, type metadata accessor for NCProtoSuggestionAdvertisement, (uint64_t)&protocol conformance descriptor for NCProtoSuggestionAdvertisement);
}

uint64_t base witness table accessor for Message in NCProtoSuggestionAdvertisement()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoSuggestionAdvertisement and conformance NCProtoSuggestionAdvertisement, type metadata accessor for NCProtoSuggestionAdvertisement, (uint64_t)&protocol conformance descriptor for NCProtoSuggestionAdvertisement);
}

uint64_t base witness table accessor for Hashable in NCProtoSuggestionAdvertisement()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoSuggestionAdvertisement and conformance NCProtoSuggestionAdvertisement, type metadata accessor for NCProtoSuggestionAdvertisement, (uint64_t)&protocol conformance descriptor for NCProtoSuggestionAdvertisement);
}

uint64_t base witness table accessor for Equatable in NCProtoSuggestionAdvertisement()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoSuggestionAdvertisement and conformance NCProtoSuggestionAdvertisement, type metadata accessor for NCProtoSuggestionAdvertisement, (uint64_t)&protocol conformance descriptor for NCProtoSuggestionAdvertisement);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in NCProtoSuggestionAdvertisementDidChangeEvent()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoSuggestionAdvertisementDidChangeEvent and conformance NCProtoSuggestionAdvertisementDidChangeEvent, type metadata accessor for NCProtoSuggestionAdvertisementDidChangeEvent, (uint64_t)&protocol conformance descriptor for NCProtoSuggestionAdvertisementDidChangeEvent);
}

uint64_t base witness table accessor for Message in NCProtoSuggestionAdvertisementDidChangeEvent()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoSuggestionAdvertisementDidChangeEvent and conformance NCProtoSuggestionAdvertisementDidChangeEvent, type metadata accessor for NCProtoSuggestionAdvertisementDidChangeEvent, (uint64_t)&protocol conformance descriptor for NCProtoSuggestionAdvertisementDidChangeEvent);
}

uint64_t base witness table accessor for Hashable in NCProtoSuggestionAdvertisementDidChangeEvent()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoSuggestionAdvertisementDidChangeEvent and conformance NCProtoSuggestionAdvertisementDidChangeEvent, type metadata accessor for NCProtoSuggestionAdvertisementDidChangeEvent, (uint64_t)&protocol conformance descriptor for NCProtoSuggestionAdvertisementDidChangeEvent);
}

uint64_t base witness table accessor for Equatable in NCProtoSuggestionAdvertisementDidChangeEvent()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoSuggestionAdvertisementDidChangeEvent and conformance NCProtoSuggestionAdvertisementDidChangeEvent, type metadata accessor for NCProtoSuggestionAdvertisementDidChangeEvent, (uint64_t)&protocol conformance descriptor for NCProtoSuggestionAdvertisementDidChangeEvent);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in NCProtoLagunaConnectionRequest()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoLagunaConnectionRequest and conformance NCProtoLagunaConnectionRequest, type metadata accessor for NCProtoLagunaConnectionRequest, (uint64_t)&protocol conformance descriptor for NCProtoLagunaConnectionRequest);
}

uint64_t base witness table accessor for Message in NCProtoLagunaConnectionRequest()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoLagunaConnectionRequest and conformance NCProtoLagunaConnectionRequest, type metadata accessor for NCProtoLagunaConnectionRequest, (uint64_t)&protocol conformance descriptor for NCProtoLagunaConnectionRequest);
}

uint64_t base witness table accessor for Hashable in NCProtoLagunaConnectionRequest()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoLagunaConnectionRequest and conformance NCProtoLagunaConnectionRequest, type metadata accessor for NCProtoLagunaConnectionRequest, (uint64_t)&protocol conformance descriptor for NCProtoLagunaConnectionRequest);
}

uint64_t base witness table accessor for Equatable in NCProtoLagunaConnectionRequest()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoLagunaConnectionRequest and conformance NCProtoLagunaConnectionRequest, type metadata accessor for NCProtoLagunaConnectionRequest, (uint64_t)&protocol conformance descriptor for NCProtoLagunaConnectionRequest);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in NCProtoLagunaConnectionResponse()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoLagunaConnectionResponse and conformance NCProtoLagunaConnectionResponse, type metadata accessor for NCProtoLagunaConnectionResponse, (uint64_t)&protocol conformance descriptor for NCProtoLagunaConnectionResponse);
}

uint64_t base witness table accessor for Message in NCProtoLagunaConnectionResponse()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoLagunaConnectionResponse and conformance NCProtoLagunaConnectionResponse, type metadata accessor for NCProtoLagunaConnectionResponse, (uint64_t)&protocol conformance descriptor for NCProtoLagunaConnectionResponse);
}

uint64_t base witness table accessor for Hashable in NCProtoLagunaConnectionResponse()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoLagunaConnectionResponse and conformance NCProtoLagunaConnectionResponse, type metadata accessor for NCProtoLagunaConnectionResponse, (uint64_t)&protocol conformance descriptor for NCProtoLagunaConnectionResponse);
}

uint64_t base witness table accessor for Equatable in NCProtoLagunaConnectionResponse()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoLagunaConnectionResponse and conformance NCProtoLagunaConnectionResponse, type metadata accessor for NCProtoLagunaConnectionResponse, (uint64_t)&protocol conformance descriptor for NCProtoLagunaConnectionResponse);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in NCProtoDeviceLaunchedEvent()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoDeviceLaunchedEvent and conformance NCProtoDeviceLaunchedEvent, type metadata accessor for NCProtoDeviceLaunchedEvent, (uint64_t)&protocol conformance descriptor for NCProtoDeviceLaunchedEvent);
}

uint64_t base witness table accessor for Message in NCProtoDeviceLaunchedEvent()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoDeviceLaunchedEvent and conformance NCProtoDeviceLaunchedEvent, type metadata accessor for NCProtoDeviceLaunchedEvent, (uint64_t)&protocol conformance descriptor for NCProtoDeviceLaunchedEvent);
}

uint64_t base witness table accessor for Hashable in NCProtoDeviceLaunchedEvent()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoDeviceLaunchedEvent and conformance NCProtoDeviceLaunchedEvent, type metadata accessor for NCProtoDeviceLaunchedEvent, (uint64_t)&protocol conformance descriptor for NCProtoDeviceLaunchedEvent);
}

uint64_t base witness table accessor for Equatable in NCProtoDeviceLaunchedEvent()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoDeviceLaunchedEvent and conformance NCProtoDeviceLaunchedEvent, type metadata accessor for NCProtoDeviceLaunchedEvent, (uint64_t)&protocol conformance descriptor for NCProtoDeviceLaunchedEvent);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in NCProtoTVLaunchedEvent()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoTVLaunchedEvent and conformance NCProtoTVLaunchedEvent, type metadata accessor for NCProtoTVLaunchedEvent, (uint64_t)&protocol conformance descriptor for NCProtoTVLaunchedEvent);
}

uint64_t base witness table accessor for Message in NCProtoTVLaunchedEvent()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoTVLaunchedEvent and conformance NCProtoTVLaunchedEvent, type metadata accessor for NCProtoTVLaunchedEvent, (uint64_t)&protocol conformance descriptor for NCProtoTVLaunchedEvent);
}

uint64_t base witness table accessor for Hashable in NCProtoTVLaunchedEvent()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoTVLaunchedEvent and conformance NCProtoTVLaunchedEvent, type metadata accessor for NCProtoTVLaunchedEvent, (uint64_t)&protocol conformance descriptor for NCProtoTVLaunchedEvent);
}

uint64_t base witness table accessor for Equatable in NCProtoTVLaunchedEvent()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoTVLaunchedEvent and conformance NCProtoTVLaunchedEvent, type metadata accessor for NCProtoTVLaunchedEvent, (uint64_t)&protocol conformance descriptor for NCProtoTVLaunchedEvent);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in NCProtoCancelAddMemberEvent()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoCancelAddMemberEvent and conformance NCProtoCancelAddMemberEvent, type metadata accessor for NCProtoCancelAddMemberEvent, (uint64_t)&protocol conformance descriptor for NCProtoCancelAddMemberEvent);
}

uint64_t base witness table accessor for Message in NCProtoCancelAddMemberEvent()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoCancelAddMemberEvent and conformance NCProtoCancelAddMemberEvent, type metadata accessor for NCProtoCancelAddMemberEvent, (uint64_t)&protocol conformance descriptor for NCProtoCancelAddMemberEvent);
}

uint64_t base witness table accessor for Hashable in NCProtoCancelAddMemberEvent()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoCancelAddMemberEvent and conformance NCProtoCancelAddMemberEvent, type metadata accessor for NCProtoCancelAddMemberEvent, (uint64_t)&protocol conformance descriptor for NCProtoCancelAddMemberEvent);
}

uint64_t base witness table accessor for Equatable in NCProtoCancelAddMemberEvent()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoCancelAddMemberEvent and conformance NCProtoCancelAddMemberEvent, type metadata accessor for NCProtoCancelAddMemberEvent, (uint64_t)&protocol conformance descriptor for NCProtoCancelAddMemberEvent);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in NCProtoEndLagunaSessionEvent()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoEndLagunaSessionEvent and conformance NCProtoEndLagunaSessionEvent, type metadata accessor for NCProtoEndLagunaSessionEvent, (uint64_t)&protocol conformance descriptor for NCProtoEndLagunaSessionEvent);
}

uint64_t base witness table accessor for Message in NCProtoEndLagunaSessionEvent()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoEndLagunaSessionEvent and conformance NCProtoEndLagunaSessionEvent, type metadata accessor for NCProtoEndLagunaSessionEvent, (uint64_t)&protocol conformance descriptor for NCProtoEndLagunaSessionEvent);
}

uint64_t base witness table accessor for Hashable in NCProtoEndLagunaSessionEvent()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoEndLagunaSessionEvent and conformance NCProtoEndLagunaSessionEvent, type metadata accessor for NCProtoEndLagunaSessionEvent, (uint64_t)&protocol conformance descriptor for NCProtoEndLagunaSessionEvent);
}

uint64_t base witness table accessor for Equatable in NCProtoEndLagunaSessionEvent()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoEndLagunaSessionEvent and conformance NCProtoEndLagunaSessionEvent, type metadata accessor for NCProtoEndLagunaSessionEvent, (uint64_t)&protocol conformance descriptor for NCProtoEndLagunaSessionEvent);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in NCProtoPolicyInfoUpdatedEvent()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoPolicyInfoUpdatedEvent and conformance NCProtoPolicyInfoUpdatedEvent, type metadata accessor for NCProtoPolicyInfoUpdatedEvent, (uint64_t)&protocol conformance descriptor for NCProtoPolicyInfoUpdatedEvent);
}

uint64_t base witness table accessor for Message in NCProtoPolicyInfoUpdatedEvent()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoPolicyInfoUpdatedEvent and conformance NCProtoPolicyInfoUpdatedEvent, type metadata accessor for NCProtoPolicyInfoUpdatedEvent, (uint64_t)&protocol conformance descriptor for NCProtoPolicyInfoUpdatedEvent);
}

uint64_t base witness table accessor for Hashable in NCProtoPolicyInfoUpdatedEvent()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoPolicyInfoUpdatedEvent and conformance NCProtoPolicyInfoUpdatedEvent, type metadata accessor for NCProtoPolicyInfoUpdatedEvent, (uint64_t)&protocol conformance descriptor for NCProtoPolicyInfoUpdatedEvent);
}

uint64_t base witness table accessor for Equatable in NCProtoPolicyInfoUpdatedEvent()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoPolicyInfoUpdatedEvent and conformance NCProtoPolicyInfoUpdatedEvent, type metadata accessor for NCProtoPolicyInfoUpdatedEvent, (uint64_t)&protocol conformance descriptor for NCProtoPolicyInfoUpdatedEvent);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in NCProtoAddMemberRequest()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoAddMemberRequest and conformance NCProtoAddMemberRequest, type metadata accessor for NCProtoAddMemberRequest, (uint64_t)&protocol conformance descriptor for NCProtoAddMemberRequest);
}

uint64_t base witness table accessor for Message in NCProtoAddMemberRequest()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoAddMemberRequest and conformance NCProtoAddMemberRequest, type metadata accessor for NCProtoAddMemberRequest, (uint64_t)&protocol conformance descriptor for NCProtoAddMemberRequest);
}

uint64_t base witness table accessor for Hashable in NCProtoAddMemberRequest()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoAddMemberRequest and conformance NCProtoAddMemberRequest, type metadata accessor for NCProtoAddMemberRequest, (uint64_t)&protocol conformance descriptor for NCProtoAddMemberRequest);
}

uint64_t base witness table accessor for Equatable in NCProtoAddMemberRequest()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoAddMemberRequest and conformance NCProtoAddMemberRequest, type metadata accessor for NCProtoAddMemberRequest, (uint64_t)&protocol conformance descriptor for NCProtoAddMemberRequest);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in NCProtoAddMemberResponse()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoAddMemberResponse and conformance NCProtoAddMemberResponse, type metadata accessor for NCProtoAddMemberResponse, (uint64_t)&protocol conformance descriptor for NCProtoAddMemberResponse);
}

uint64_t base witness table accessor for Message in NCProtoAddMemberResponse()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoAddMemberResponse and conformance NCProtoAddMemberResponse, type metadata accessor for NCProtoAddMemberResponse, (uint64_t)&protocol conformance descriptor for NCProtoAddMemberResponse);
}

uint64_t base witness table accessor for Hashable in NCProtoAddMemberResponse()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoAddMemberResponse and conformance NCProtoAddMemberResponse, type metadata accessor for NCProtoAddMemberResponse, (uint64_t)&protocol conformance descriptor for NCProtoAddMemberResponse);
}

uint64_t base witness table accessor for Equatable in NCProtoAddMemberResponse()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoAddMemberResponse and conformance NCProtoAddMemberResponse, type metadata accessor for NCProtoAddMemberResponse, (uint64_t)&protocol conformance descriptor for NCProtoAddMemberResponse);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in NCProtoPullLagunaSessionToTVRequest()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoPullLagunaSessionToTVRequest and conformance NCProtoPullLagunaSessionToTVRequest, type metadata accessor for NCProtoPullLagunaSessionToTVRequest, (uint64_t)&protocol conformance descriptor for NCProtoPullLagunaSessionToTVRequest);
}

uint64_t base witness table accessor for Message in NCProtoPullLagunaSessionToTVRequest()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoPullLagunaSessionToTVRequest and conformance NCProtoPullLagunaSessionToTVRequest, type metadata accessor for NCProtoPullLagunaSessionToTVRequest, (uint64_t)&protocol conformance descriptor for NCProtoPullLagunaSessionToTVRequest);
}

uint64_t base witness table accessor for Hashable in NCProtoPullLagunaSessionToTVRequest()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoPullLagunaSessionToTVRequest and conformance NCProtoPullLagunaSessionToTVRequest, type metadata accessor for NCProtoPullLagunaSessionToTVRequest, (uint64_t)&protocol conformance descriptor for NCProtoPullLagunaSessionToTVRequest);
}

uint64_t base witness table accessor for Equatable in NCProtoPullLagunaSessionToTVRequest()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoPullLagunaSessionToTVRequest and conformance NCProtoPullLagunaSessionToTVRequest, type metadata accessor for NCProtoPullLagunaSessionToTVRequest, (uint64_t)&protocol conformance descriptor for NCProtoPullLagunaSessionToTVRequest);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in NCProtoPullLagunaSessionToTVResponse()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoPullLagunaSessionToTVResponse and conformance NCProtoPullLagunaSessionToTVResponse, type metadata accessor for NCProtoPullLagunaSessionToTVResponse, (uint64_t)&protocol conformance descriptor for NCProtoPullLagunaSessionToTVResponse);
}

uint64_t base witness table accessor for Message in NCProtoPullLagunaSessionToTVResponse()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoPullLagunaSessionToTVResponse and conformance NCProtoPullLagunaSessionToTVResponse, type metadata accessor for NCProtoPullLagunaSessionToTVResponse, (uint64_t)&protocol conformance descriptor for NCProtoPullLagunaSessionToTVResponse);
}

uint64_t base witness table accessor for Hashable in NCProtoPullLagunaSessionToTVResponse()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoPullLagunaSessionToTVResponse and conformance NCProtoPullLagunaSessionToTVResponse, type metadata accessor for NCProtoPullLagunaSessionToTVResponse, (uint64_t)&protocol conformance descriptor for NCProtoPullLagunaSessionToTVResponse);
}

uint64_t base witness table accessor for Equatable in NCProtoPullLagunaSessionToTVResponse()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoPullLagunaSessionToTVResponse and conformance NCProtoPullLagunaSessionToTVResponse, type metadata accessor for NCProtoPullLagunaSessionToTVResponse, (uint64_t)&protocol conformance descriptor for NCProtoPullLagunaSessionToTVResponse);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in NCProtoTransferActiveConversationRequest()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoTransferActiveConversationRequest and conformance NCProtoTransferActiveConversationRequest, type metadata accessor for NCProtoTransferActiveConversationRequest, (uint64_t)&protocol conformance descriptor for NCProtoTransferActiveConversationRequest);
}

uint64_t base witness table accessor for Message in NCProtoTransferActiveConversationRequest()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoTransferActiveConversationRequest and conformance NCProtoTransferActiveConversationRequest, type metadata accessor for NCProtoTransferActiveConversationRequest, (uint64_t)&protocol conformance descriptor for NCProtoTransferActiveConversationRequest);
}

uint64_t base witness table accessor for Hashable in NCProtoTransferActiveConversationRequest()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoTransferActiveConversationRequest and conformance NCProtoTransferActiveConversationRequest, type metadata accessor for NCProtoTransferActiveConversationRequest, (uint64_t)&protocol conformance descriptor for NCProtoTransferActiveConversationRequest);
}

uint64_t base witness table accessor for Equatable in NCProtoTransferActiveConversationRequest()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoTransferActiveConversationRequest and conformance NCProtoTransferActiveConversationRequest, type metadata accessor for NCProtoTransferActiveConversationRequest, (uint64_t)&protocol conformance descriptor for NCProtoTransferActiveConversationRequest);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in NCProtoTransferActiveConversationResponse()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoTransferActiveConversationResponse and conformance NCProtoTransferActiveConversationResponse, type metadata accessor for NCProtoTransferActiveConversationResponse, (uint64_t)&protocol conformance descriptor for NCProtoTransferActiveConversationResponse);
}

uint64_t base witness table accessor for Message in NCProtoTransferActiveConversationResponse()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoTransferActiveConversationResponse and conformance NCProtoTransferActiveConversationResponse, type metadata accessor for NCProtoTransferActiveConversationResponse, (uint64_t)&protocol conformance descriptor for NCProtoTransferActiveConversationResponse);
}

uint64_t base witness table accessor for Hashable in NCProtoTransferActiveConversationResponse()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoTransferActiveConversationResponse and conformance NCProtoTransferActiveConversationResponse, type metadata accessor for NCProtoTransferActiveConversationResponse, (uint64_t)&protocol conformance descriptor for NCProtoTransferActiveConversationResponse);
}

uint64_t base witness table accessor for Equatable in NCProtoTransferActiveConversationResponse()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoTransferActiveConversationResponse and conformance NCProtoTransferActiveConversationResponse, type metadata accessor for NCProtoTransferActiveConversationResponse, (uint64_t)&protocol conformance descriptor for NCProtoTransferActiveConversationResponse);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in NCProtoStartLagunaSessionRequest()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoStartLagunaSessionRequest and conformance NCProtoStartLagunaSessionRequest, type metadata accessor for NCProtoStartLagunaSessionRequest, (uint64_t)&protocol conformance descriptor for NCProtoStartLagunaSessionRequest);
}

uint64_t base witness table accessor for Message in NCProtoStartLagunaSessionRequest()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoStartLagunaSessionRequest and conformance NCProtoStartLagunaSessionRequest, type metadata accessor for NCProtoStartLagunaSessionRequest, (uint64_t)&protocol conformance descriptor for NCProtoStartLagunaSessionRequest);
}

uint64_t base witness table accessor for Hashable in NCProtoStartLagunaSessionRequest()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoStartLagunaSessionRequest and conformance NCProtoStartLagunaSessionRequest, type metadata accessor for NCProtoStartLagunaSessionRequest, (uint64_t)&protocol conformance descriptor for NCProtoStartLagunaSessionRequest);
}

uint64_t base witness table accessor for Equatable in NCProtoStartLagunaSessionRequest()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoStartLagunaSessionRequest and conformance NCProtoStartLagunaSessionRequest, type metadata accessor for NCProtoStartLagunaSessionRequest, (uint64_t)&protocol conformance descriptor for NCProtoStartLagunaSessionRequest);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in NCProtoCallInfo()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoCallInfo and conformance NCProtoCallInfo, type metadata accessor for NCProtoCallInfo, (uint64_t)&protocol conformance descriptor for NCProtoCallInfo);
}

uint64_t base witness table accessor for Message in NCProtoCallInfo()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoCallInfo and conformance NCProtoCallInfo, type metadata accessor for NCProtoCallInfo, (uint64_t)&protocol conformance descriptor for NCProtoCallInfo);
}

uint64_t base witness table accessor for Hashable in NCProtoCallInfo()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoCallInfo and conformance NCProtoCallInfo, type metadata accessor for NCProtoCallInfo, (uint64_t)&protocol conformance descriptor for NCProtoCallInfo);
}

uint64_t base witness table accessor for Equatable in NCProtoCallInfo()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoCallInfo and conformance NCProtoCallInfo, type metadata accessor for NCProtoCallInfo, (uint64_t)&protocol conformance descriptor for NCProtoCallInfo);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in NCProtoStartLagunaSessionResponse()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoStartLagunaSessionResponse and conformance NCProtoStartLagunaSessionResponse, type metadata accessor for NCProtoStartLagunaSessionResponse, (uint64_t)&protocol conformance descriptor for NCProtoStartLagunaSessionResponse);
}

uint64_t base witness table accessor for Message in NCProtoStartLagunaSessionResponse()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoStartLagunaSessionResponse and conformance NCProtoStartLagunaSessionResponse, type metadata accessor for NCProtoStartLagunaSessionResponse, (uint64_t)&protocol conformance descriptor for NCProtoStartLagunaSessionResponse);
}

uint64_t base witness table accessor for Hashable in NCProtoStartLagunaSessionResponse()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoStartLagunaSessionResponse and conformance NCProtoStartLagunaSessionResponse, type metadata accessor for NCProtoStartLagunaSessionResponse, (uint64_t)&protocol conformance descriptor for NCProtoStartLagunaSessionResponse);
}

uint64_t base witness table accessor for Equatable in NCProtoStartLagunaSessionResponse()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoStartLagunaSessionResponse and conformance NCProtoStartLagunaSessionResponse, type metadata accessor for NCProtoStartLagunaSessionResponse, (uint64_t)&protocol conformance descriptor for NCProtoStartLagunaSessionResponse);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in NCProtoStartConversationRequest()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoStartConversationRequest and conformance NCProtoStartConversationRequest, type metadata accessor for NCProtoStartConversationRequest, (uint64_t)&protocol conformance descriptor for NCProtoStartConversationRequest);
}

uint64_t base witness table accessor for Message in NCProtoStartConversationRequest()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoStartConversationRequest and conformance NCProtoStartConversationRequest, type metadata accessor for NCProtoStartConversationRequest, (uint64_t)&protocol conformance descriptor for NCProtoStartConversationRequest);
}

uint64_t base witness table accessor for Hashable in NCProtoStartConversationRequest()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoStartConversationRequest and conformance NCProtoStartConversationRequest, type metadata accessor for NCProtoStartConversationRequest, (uint64_t)&protocol conformance descriptor for NCProtoStartConversationRequest);
}

uint64_t base witness table accessor for Equatable in NCProtoStartConversationRequest()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoStartConversationRequest and conformance NCProtoStartConversationRequest, type metadata accessor for NCProtoStartConversationRequest, (uint64_t)&protocol conformance descriptor for NCProtoStartConversationRequest);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in NCProtoStartConversationResponse()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoStartConversationResponse and conformance NCProtoStartConversationResponse, type metadata accessor for NCProtoStartConversationResponse, (uint64_t)&protocol conformance descriptor for NCProtoStartConversationResponse);
}

uint64_t base witness table accessor for Message in NCProtoStartConversationResponse()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoStartConversationResponse and conformance NCProtoStartConversationResponse, type metadata accessor for NCProtoStartConversationResponse, (uint64_t)&protocol conformance descriptor for NCProtoStartConversationResponse);
}

uint64_t base witness table accessor for Hashable in NCProtoStartConversationResponse()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoStartConversationResponse and conformance NCProtoStartConversationResponse, type metadata accessor for NCProtoStartConversationResponse, (uint64_t)&protocol conformance descriptor for NCProtoStartConversationResponse);
}

uint64_t base witness table accessor for Equatable in NCProtoStartConversationResponse()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoStartConversationResponse and conformance NCProtoStartConversationResponse, type metadata accessor for NCProtoStartConversationResponse, (uint64_t)&protocol conformance descriptor for NCProtoStartConversationResponse);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in NCProtoJoinActiveConversationRequest()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoJoinActiveConversationRequest and conformance NCProtoJoinActiveConversationRequest, type metadata accessor for NCProtoJoinActiveConversationRequest, (uint64_t)&protocol conformance descriptor for NCProtoJoinActiveConversationRequest);
}

uint64_t base witness table accessor for Message in NCProtoJoinActiveConversationRequest()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoJoinActiveConversationRequest and conformance NCProtoJoinActiveConversationRequest, type metadata accessor for NCProtoJoinActiveConversationRequest, (uint64_t)&protocol conformance descriptor for NCProtoJoinActiveConversationRequest);
}

uint64_t base witness table accessor for Hashable in NCProtoJoinActiveConversationRequest()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoJoinActiveConversationRequest and conformance NCProtoJoinActiveConversationRequest, type metadata accessor for NCProtoJoinActiveConversationRequest, (uint64_t)&protocol conformance descriptor for NCProtoJoinActiveConversationRequest);
}

uint64_t base witness table accessor for Equatable in NCProtoJoinActiveConversationRequest()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoJoinActiveConversationRequest and conformance NCProtoJoinActiveConversationRequest, type metadata accessor for NCProtoJoinActiveConversationRequest, (uint64_t)&protocol conformance descriptor for NCProtoJoinActiveConversationRequest);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in NCProtoJoinActiveConversationResponse()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoJoinActiveConversationResponse and conformance NCProtoJoinActiveConversationResponse, type metadata accessor for NCProtoJoinActiveConversationResponse, (uint64_t)&protocol conformance descriptor for NCProtoJoinActiveConversationResponse);
}

uint64_t base witness table accessor for Message in NCProtoJoinActiveConversationResponse()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoJoinActiveConversationResponse and conformance NCProtoJoinActiveConversationResponse, type metadata accessor for NCProtoJoinActiveConversationResponse, (uint64_t)&protocol conformance descriptor for NCProtoJoinActiveConversationResponse);
}

uint64_t base witness table accessor for Hashable in NCProtoJoinActiveConversationResponse()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoJoinActiveConversationResponse and conformance NCProtoJoinActiveConversationResponse, type metadata accessor for NCProtoJoinActiveConversationResponse, (uint64_t)&protocol conformance descriptor for NCProtoJoinActiveConversationResponse);
}

uint64_t base witness table accessor for Equatable in NCProtoJoinActiveConversationResponse()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoJoinActiveConversationResponse and conformance NCProtoJoinActiveConversationResponse, type metadata accessor for NCProtoJoinActiveConversationResponse, (uint64_t)&protocol conformance descriptor for NCProtoJoinActiveConversationResponse);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in NCProtoDeclineContinuityCallRequest()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoDeclineContinuityCallRequest and conformance NCProtoDeclineContinuityCallRequest, type metadata accessor for NCProtoDeclineContinuityCallRequest, (uint64_t)&protocol conformance descriptor for NCProtoDeclineContinuityCallRequest);
}

uint64_t base witness table accessor for Message in NCProtoDeclineContinuityCallRequest()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoDeclineContinuityCallRequest and conformance NCProtoDeclineContinuityCallRequest, type metadata accessor for NCProtoDeclineContinuityCallRequest, (uint64_t)&protocol conformance descriptor for NCProtoDeclineContinuityCallRequest);
}

uint64_t base witness table accessor for Hashable in NCProtoDeclineContinuityCallRequest()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoDeclineContinuityCallRequest and conformance NCProtoDeclineContinuityCallRequest, type metadata accessor for NCProtoDeclineContinuityCallRequest, (uint64_t)&protocol conformance descriptor for NCProtoDeclineContinuityCallRequest);
}

uint64_t base witness table accessor for Equatable in NCProtoDeclineContinuityCallRequest()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoDeclineContinuityCallRequest and conformance NCProtoDeclineContinuityCallRequest, type metadata accessor for NCProtoDeclineContinuityCallRequest, (uint64_t)&protocol conformance descriptor for NCProtoDeclineContinuityCallRequest);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in NCProtoDeclineContinuityCallResponse()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoDeclineContinuityCallResponse and conformance NCProtoDeclineContinuityCallResponse, type metadata accessor for NCProtoDeclineContinuityCallResponse, (uint64_t)&protocol conformance descriptor for NCProtoDeclineContinuityCallResponse);
}

uint64_t base witness table accessor for Message in NCProtoDeclineContinuityCallResponse()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoDeclineContinuityCallResponse and conformance NCProtoDeclineContinuityCallResponse, type metadata accessor for NCProtoDeclineContinuityCallResponse, (uint64_t)&protocol conformance descriptor for NCProtoDeclineContinuityCallResponse);
}

uint64_t base witness table accessor for Hashable in NCProtoDeclineContinuityCallResponse()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoDeclineContinuityCallResponse and conformance NCProtoDeclineContinuityCallResponse, type metadata accessor for NCProtoDeclineContinuityCallResponse, (uint64_t)&protocol conformance descriptor for NCProtoDeclineContinuityCallResponse);
}

uint64_t base witness table accessor for Equatable in NCProtoDeclineContinuityCallResponse()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoDeclineContinuityCallResponse and conformance NCProtoDeclineContinuityCallResponse, type metadata accessor for NCProtoDeclineContinuityCallResponse, (uint64_t)&protocol conformance descriptor for NCProtoDeclineContinuityCallResponse);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in NCProtoGetAddressableContactsRequest()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoGetAddressableContactsRequest and conformance NCProtoGetAddressableContactsRequest, type metadata accessor for NCProtoGetAddressableContactsRequest, (uint64_t)&protocol conformance descriptor for NCProtoGetAddressableContactsRequest);
}

uint64_t base witness table accessor for Message in NCProtoGetAddressableContactsRequest()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoGetAddressableContactsRequest and conformance NCProtoGetAddressableContactsRequest, type metadata accessor for NCProtoGetAddressableContactsRequest, (uint64_t)&protocol conformance descriptor for NCProtoGetAddressableContactsRequest);
}

uint64_t base witness table accessor for Hashable in NCProtoGetAddressableContactsRequest()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoGetAddressableContactsRequest and conformance NCProtoGetAddressableContactsRequest, type metadata accessor for NCProtoGetAddressableContactsRequest, (uint64_t)&protocol conformance descriptor for NCProtoGetAddressableContactsRequest);
}

uint64_t base witness table accessor for Equatable in NCProtoGetAddressableContactsRequest()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoGetAddressableContactsRequest and conformance NCProtoGetAddressableContactsRequest, type metadata accessor for NCProtoGetAddressableContactsRequest, (uint64_t)&protocol conformance descriptor for NCProtoGetAddressableContactsRequest);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in NCProtoGetAddressableContactsResponse()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoGetAddressableContactsResponse and conformance NCProtoGetAddressableContactsResponse, type metadata accessor for NCProtoGetAddressableContactsResponse, (uint64_t)&protocol conformance descriptor for NCProtoGetAddressableContactsResponse);
}

uint64_t base witness table accessor for Message in NCProtoGetAddressableContactsResponse()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoGetAddressableContactsResponse and conformance NCProtoGetAddressableContactsResponse, type metadata accessor for NCProtoGetAddressableContactsResponse, (uint64_t)&protocol conformance descriptor for NCProtoGetAddressableContactsResponse);
}

uint64_t base witness table accessor for Hashable in NCProtoGetAddressableContactsResponse()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoGetAddressableContactsResponse and conformance NCProtoGetAddressableContactsResponse, type metadata accessor for NCProtoGetAddressableContactsResponse, (uint64_t)&protocol conformance descriptor for NCProtoGetAddressableContactsResponse);
}

uint64_t base witness table accessor for Equatable in NCProtoGetAddressableContactsResponse()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoGetAddressableContactsResponse and conformance NCProtoGetAddressableContactsResponse, type metadata accessor for NCProtoGetAddressableContactsResponse, (uint64_t)&protocol conformance descriptor for NCProtoGetAddressableContactsResponse);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in NCProtoGetImageForContactRequest()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoGetImageForContactRequest and conformance NCProtoGetImageForContactRequest, type metadata accessor for NCProtoGetImageForContactRequest, (uint64_t)&protocol conformance descriptor for NCProtoGetImageForContactRequest);
}

uint64_t base witness table accessor for Message in NCProtoGetImageForContactRequest()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoGetImageForContactRequest and conformance NCProtoGetImageForContactRequest, type metadata accessor for NCProtoGetImageForContactRequest, (uint64_t)&protocol conformance descriptor for NCProtoGetImageForContactRequest);
}

uint64_t base witness table accessor for Hashable in NCProtoGetImageForContactRequest()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoGetImageForContactRequest and conformance NCProtoGetImageForContactRequest, type metadata accessor for NCProtoGetImageForContactRequest, (uint64_t)&protocol conformance descriptor for NCProtoGetImageForContactRequest);
}

uint64_t base witness table accessor for Equatable in NCProtoGetImageForContactRequest()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoGetImageForContactRequest and conformance NCProtoGetImageForContactRequest, type metadata accessor for NCProtoGetImageForContactRequest, (uint64_t)&protocol conformance descriptor for NCProtoGetImageForContactRequest);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in NCProtoGetImageForContactResponse()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoGetImageForContactResponse and conformance NCProtoGetImageForContactResponse, type metadata accessor for NCProtoGetImageForContactResponse, (uint64_t)&protocol conformance descriptor for NCProtoGetImageForContactResponse);
}

uint64_t base witness table accessor for Message in NCProtoGetImageForContactResponse()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoGetImageForContactResponse and conformance NCProtoGetImageForContactResponse, type metadata accessor for NCProtoGetImageForContactResponse, (uint64_t)&protocol conformance descriptor for NCProtoGetImageForContactResponse);
}

uint64_t base witness table accessor for Hashable in NCProtoGetImageForContactResponse()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoGetImageForContactResponse and conformance NCProtoGetImageForContactResponse, type metadata accessor for NCProtoGetImageForContactResponse, (uint64_t)&protocol conformance descriptor for NCProtoGetImageForContactResponse);
}

uint64_t base witness table accessor for Equatable in NCProtoGetImageForContactResponse()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoGetImageForContactResponse and conformance NCProtoGetImageForContactResponse, type metadata accessor for NCProtoGetImageForContactResponse, (uint64_t)&protocol conformance descriptor for NCProtoGetImageForContactResponse);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in NCProtoAddConversationParticipantsRequest()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoAddConversationParticipantsRequest and conformance NCProtoAddConversationParticipantsRequest, type metadata accessor for NCProtoAddConversationParticipantsRequest, (uint64_t)&protocol conformance descriptor for NCProtoAddConversationParticipantsRequest);
}

uint64_t base witness table accessor for Message in NCProtoAddConversationParticipantsRequest()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoAddConversationParticipantsRequest and conformance NCProtoAddConversationParticipantsRequest, type metadata accessor for NCProtoAddConversationParticipantsRequest, (uint64_t)&protocol conformance descriptor for NCProtoAddConversationParticipantsRequest);
}

uint64_t base witness table accessor for Hashable in NCProtoAddConversationParticipantsRequest()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoAddConversationParticipantsRequest and conformance NCProtoAddConversationParticipantsRequest, type metadata accessor for NCProtoAddConversationParticipantsRequest, (uint64_t)&protocol conformance descriptor for NCProtoAddConversationParticipantsRequest);
}

uint64_t base witness table accessor for Equatable in NCProtoAddConversationParticipantsRequest()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoAddConversationParticipantsRequest and conformance NCProtoAddConversationParticipantsRequest, type metadata accessor for NCProtoAddConversationParticipantsRequest, (uint64_t)&protocol conformance descriptor for NCProtoAddConversationParticipantsRequest);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in NCProtoAddConversationParticipantsResponse()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoAddConversationParticipantsResponse and conformance NCProtoAddConversationParticipantsResponse, type metadata accessor for NCProtoAddConversationParticipantsResponse, (uint64_t)&protocol conformance descriptor for NCProtoAddConversationParticipantsResponse);
}

uint64_t base witness table accessor for Message in NCProtoAddConversationParticipantsResponse()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoAddConversationParticipantsResponse and conformance NCProtoAddConversationParticipantsResponse, type metadata accessor for NCProtoAddConversationParticipantsResponse, (uint64_t)&protocol conformance descriptor for NCProtoAddConversationParticipantsResponse);
}

uint64_t base witness table accessor for Hashable in NCProtoAddConversationParticipantsResponse()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoAddConversationParticipantsResponse and conformance NCProtoAddConversationParticipantsResponse, type metadata accessor for NCProtoAddConversationParticipantsResponse, (uint64_t)&protocol conformance descriptor for NCProtoAddConversationParticipantsResponse);
}

uint64_t base witness table accessor for Equatable in NCProtoAddConversationParticipantsResponse()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoAddConversationParticipantsResponse and conformance NCProtoAddConversationParticipantsResponse, type metadata accessor for NCProtoAddConversationParticipantsResponse, (uint64_t)&protocol conformance descriptor for NCProtoAddConversationParticipantsResponse);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in NCProtoGetCallDisplayDetailsRequest()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoGetCallDisplayDetailsRequest and conformance NCProtoGetCallDisplayDetailsRequest, type metadata accessor for NCProtoGetCallDisplayDetailsRequest, (uint64_t)&protocol conformance descriptor for NCProtoGetCallDisplayDetailsRequest);
}

uint64_t base witness table accessor for Message in NCProtoGetCallDisplayDetailsRequest()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoGetCallDisplayDetailsRequest and conformance NCProtoGetCallDisplayDetailsRequest, type metadata accessor for NCProtoGetCallDisplayDetailsRequest, (uint64_t)&protocol conformance descriptor for NCProtoGetCallDisplayDetailsRequest);
}

uint64_t base witness table accessor for Hashable in NCProtoGetCallDisplayDetailsRequest()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoGetCallDisplayDetailsRequest and conformance NCProtoGetCallDisplayDetailsRequest, type metadata accessor for NCProtoGetCallDisplayDetailsRequest, (uint64_t)&protocol conformance descriptor for NCProtoGetCallDisplayDetailsRequest);
}

uint64_t base witness table accessor for Equatable in NCProtoGetCallDisplayDetailsRequest()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoGetCallDisplayDetailsRequest and conformance NCProtoGetCallDisplayDetailsRequest, type metadata accessor for NCProtoGetCallDisplayDetailsRequest, (uint64_t)&protocol conformance descriptor for NCProtoGetCallDisplayDetailsRequest);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in NCProtoGetCallDisplayDetailsResponse()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoGetCallDisplayDetailsResponse and conformance NCProtoGetCallDisplayDetailsResponse, type metadata accessor for NCProtoGetCallDisplayDetailsResponse, (uint64_t)&protocol conformance descriptor for NCProtoGetCallDisplayDetailsResponse);
}

uint64_t base witness table accessor for Message in NCProtoGetCallDisplayDetailsResponse()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoGetCallDisplayDetailsResponse and conformance NCProtoGetCallDisplayDetailsResponse, type metadata accessor for NCProtoGetCallDisplayDetailsResponse, (uint64_t)&protocol conformance descriptor for NCProtoGetCallDisplayDetailsResponse);
}

uint64_t base witness table accessor for Hashable in NCProtoGetCallDisplayDetailsResponse()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoGetCallDisplayDetailsResponse and conformance NCProtoGetCallDisplayDetailsResponse, type metadata accessor for NCProtoGetCallDisplayDetailsResponse, (uint64_t)&protocol conformance descriptor for NCProtoGetCallDisplayDetailsResponse);
}

uint64_t base witness table accessor for Equatable in NCProtoGetCallDisplayDetailsResponse()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoGetCallDisplayDetailsResponse and conformance NCProtoGetCallDisplayDetailsResponse, type metadata accessor for NCProtoGetCallDisplayDetailsResponse, (uint64_t)&protocol conformance descriptor for NCProtoGetCallDisplayDetailsResponse);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in NCProtoCallState()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoCallState and conformance NCProtoCallState, type metadata accessor for NCProtoCallState, (uint64_t)&protocol conformance descriptor for NCProtoCallState);
}

uint64_t base witness table accessor for Message in NCProtoCallState()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoCallState and conformance NCProtoCallState, type metadata accessor for NCProtoCallState, (uint64_t)&protocol conformance descriptor for NCProtoCallState);
}

uint64_t base witness table accessor for Hashable in NCProtoCallState()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoCallState and conformance NCProtoCallState, type metadata accessor for NCProtoCallState, (uint64_t)&protocol conformance descriptor for NCProtoCallState);
}

uint64_t base witness table accessor for Equatable in NCProtoCallState()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoCallState and conformance NCProtoCallState, type metadata accessor for NCProtoCallState, (uint64_t)&protocol conformance descriptor for NCProtoCallState);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in NCProtoCallStateRequest()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoCallStateRequest and conformance NCProtoCallStateRequest, type metadata accessor for NCProtoCallStateRequest, (uint64_t)&protocol conformance descriptor for NCProtoCallStateRequest);
}

uint64_t base witness table accessor for Message in NCProtoCallStateRequest()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoCallStateRequest and conformance NCProtoCallStateRequest, type metadata accessor for NCProtoCallStateRequest, (uint64_t)&protocol conformance descriptor for NCProtoCallStateRequest);
}

uint64_t base witness table accessor for Hashable in NCProtoCallStateRequest()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoCallStateRequest and conformance NCProtoCallStateRequest, type metadata accessor for NCProtoCallStateRequest, (uint64_t)&protocol conformance descriptor for NCProtoCallStateRequest);
}

uint64_t base witness table accessor for Equatable in NCProtoCallStateRequest()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoCallStateRequest and conformance NCProtoCallStateRequest, type metadata accessor for NCProtoCallStateRequest, (uint64_t)&protocol conformance descriptor for NCProtoCallStateRequest);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in NCProtoCallStateResponse()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoCallStateResponse and conformance NCProtoCallStateResponse, type metadata accessor for NCProtoCallStateResponse, (uint64_t)&protocol conformance descriptor for NCProtoCallStateResponse);
}

uint64_t base witness table accessor for Message in NCProtoCallStateResponse()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoCallStateResponse and conformance NCProtoCallStateResponse, type metadata accessor for NCProtoCallStateResponse, (uint64_t)&protocol conformance descriptor for NCProtoCallStateResponse);
}

uint64_t base witness table accessor for Hashable in NCProtoCallStateResponse()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoCallStateResponse and conformance NCProtoCallStateResponse, type metadata accessor for NCProtoCallStateResponse, (uint64_t)&protocol conformance descriptor for NCProtoCallStateResponse);
}

uint64_t base witness table accessor for Equatable in NCProtoCallStateResponse()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoCallStateResponse and conformance NCProtoCallStateResponse, type metadata accessor for NCProtoCallStateResponse, (uint64_t)&protocol conformance descriptor for NCProtoCallStateResponse);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in NCProtoDeviceTokenRequest()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoDeviceTokenRequest and conformance NCProtoDeviceTokenRequest, type metadata accessor for NCProtoDeviceTokenRequest, (uint64_t)&protocol conformance descriptor for NCProtoDeviceTokenRequest);
}

uint64_t base witness table accessor for Message in NCProtoDeviceTokenRequest()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoDeviceTokenRequest and conformance NCProtoDeviceTokenRequest, type metadata accessor for NCProtoDeviceTokenRequest, (uint64_t)&protocol conformance descriptor for NCProtoDeviceTokenRequest);
}

uint64_t base witness table accessor for Hashable in NCProtoDeviceTokenRequest()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoDeviceTokenRequest and conformance NCProtoDeviceTokenRequest, type metadata accessor for NCProtoDeviceTokenRequest, (uint64_t)&protocol conformance descriptor for NCProtoDeviceTokenRequest);
}

uint64_t base witness table accessor for Equatable in NCProtoDeviceTokenRequest()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoDeviceTokenRequest and conformance NCProtoDeviceTokenRequest, type metadata accessor for NCProtoDeviceTokenRequest, (uint64_t)&protocol conformance descriptor for NCProtoDeviceTokenRequest);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in NCProtoDeviceTokenResponse()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoDeviceTokenResponse and conformance NCProtoDeviceTokenResponse, type metadata accessor for NCProtoDeviceTokenResponse, (uint64_t)&protocol conformance descriptor for NCProtoDeviceTokenResponse);
}

uint64_t base witness table accessor for Message in NCProtoDeviceTokenResponse()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoDeviceTokenResponse and conformance NCProtoDeviceTokenResponse, type metadata accessor for NCProtoDeviceTokenResponse, (uint64_t)&protocol conformance descriptor for NCProtoDeviceTokenResponse);
}

uint64_t base witness table accessor for Hashable in NCProtoDeviceTokenResponse()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoDeviceTokenResponse and conformance NCProtoDeviceTokenResponse, type metadata accessor for NCProtoDeviceTokenResponse, (uint64_t)&protocol conformance descriptor for NCProtoDeviceTokenResponse);
}

uint64_t base witness table accessor for Equatable in NCProtoDeviceTokenResponse()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoDeviceTokenResponse and conformance NCProtoDeviceTokenResponse, type metadata accessor for NCProtoDeviceTokenResponse, (uint64_t)&protocol conformance descriptor for NCProtoDeviceTokenResponse);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in NCProtoDisconnectRequest()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoDisconnectRequest and conformance NCProtoDisconnectRequest, type metadata accessor for NCProtoDisconnectRequest, (uint64_t)&protocol conformance descriptor for NCProtoDisconnectRequest);
}

uint64_t base witness table accessor for Message in NCProtoDisconnectRequest()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoDisconnectRequest and conformance NCProtoDisconnectRequest, type metadata accessor for NCProtoDisconnectRequest, (uint64_t)&protocol conformance descriptor for NCProtoDisconnectRequest);
}

uint64_t base witness table accessor for Hashable in NCProtoDisconnectRequest()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoDisconnectRequest and conformance NCProtoDisconnectRequest, type metadata accessor for NCProtoDisconnectRequest, (uint64_t)&protocol conformance descriptor for NCProtoDisconnectRequest);
}

uint64_t base witness table accessor for Equatable in NCProtoDisconnectRequest()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoDisconnectRequest and conformance NCProtoDisconnectRequest, type metadata accessor for NCProtoDisconnectRequest, (uint64_t)&protocol conformance descriptor for NCProtoDisconnectRequest);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in NCProtoDisconnectResponse()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoDisconnectResponse and conformance NCProtoDisconnectResponse, type metadata accessor for NCProtoDisconnectResponse, (uint64_t)&protocol conformance descriptor for NCProtoDisconnectResponse);
}

uint64_t base witness table accessor for Message in NCProtoDisconnectResponse()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoDisconnectResponse and conformance NCProtoDisconnectResponse, type metadata accessor for NCProtoDisconnectResponse, (uint64_t)&protocol conformance descriptor for NCProtoDisconnectResponse);
}

uint64_t base witness table accessor for Hashable in NCProtoDisconnectResponse()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoDisconnectResponse and conformance NCProtoDisconnectResponse, type metadata accessor for NCProtoDisconnectResponse, (uint64_t)&protocol conformance descriptor for NCProtoDisconnectResponse);
}

uint64_t base witness table accessor for Equatable in NCProtoDisconnectResponse()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoDisconnectResponse and conformance NCProtoDisconnectResponse, type metadata accessor for NCProtoDisconnectResponse, (uint64_t)&protocol conformance descriptor for NCProtoDisconnectResponse);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in NCProtoPrepareTransferRequest()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoPrepareTransferRequest and conformance NCProtoPrepareTransferRequest, type metadata accessor for NCProtoPrepareTransferRequest, (uint64_t)&protocol conformance descriptor for NCProtoPrepareTransferRequest);
}

uint64_t base witness table accessor for Message in NCProtoPrepareTransferRequest()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoPrepareTransferRequest and conformance NCProtoPrepareTransferRequest, type metadata accessor for NCProtoPrepareTransferRequest, (uint64_t)&protocol conformance descriptor for NCProtoPrepareTransferRequest);
}

uint64_t base witness table accessor for Hashable in NCProtoPrepareTransferRequest()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoPrepareTransferRequest and conformance NCProtoPrepareTransferRequest, type metadata accessor for NCProtoPrepareTransferRequest, (uint64_t)&protocol conformance descriptor for NCProtoPrepareTransferRequest);
}

uint64_t base witness table accessor for Equatable in NCProtoPrepareTransferRequest()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoPrepareTransferRequest and conformance NCProtoPrepareTransferRequest, type metadata accessor for NCProtoPrepareTransferRequest, (uint64_t)&protocol conformance descriptor for NCProtoPrepareTransferRequest);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in NCProtoPrepareTransferResponse()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoPrepareTransferResponse and conformance NCProtoPrepareTransferResponse, type metadata accessor for NCProtoPrepareTransferResponse, (uint64_t)&protocol conformance descriptor for NCProtoPrepareTransferResponse);
}

uint64_t base witness table accessor for Message in NCProtoPrepareTransferResponse()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoPrepareTransferResponse and conformance NCProtoPrepareTransferResponse, type metadata accessor for NCProtoPrepareTransferResponse, (uint64_t)&protocol conformance descriptor for NCProtoPrepareTransferResponse);
}

uint64_t base witness table accessor for Hashable in NCProtoPrepareTransferResponse()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoPrepareTransferResponse and conformance NCProtoPrepareTransferResponse, type metadata accessor for NCProtoPrepareTransferResponse, (uint64_t)&protocol conformance descriptor for NCProtoPrepareTransferResponse);
}

uint64_t base witness table accessor for Equatable in NCProtoPrepareTransferResponse()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoPrepareTransferResponse and conformance NCProtoPrepareTransferResponse, type metadata accessor for NCProtoPrepareTransferResponse, (uint64_t)&protocol conformance descriptor for NCProtoPrepareTransferResponse);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in NCProtoMemberAssociationPrimaryInfo()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoMemberAssociationPrimaryInfo and conformance NCProtoMemberAssociationPrimaryInfo, type metadata accessor for NCProtoMemberAssociationPrimaryInfo, (uint64_t)&protocol conformance descriptor for NCProtoMemberAssociationPrimaryInfo);
}

uint64_t base witness table accessor for Message in NCProtoMemberAssociationPrimaryInfo()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoMemberAssociationPrimaryInfo and conformance NCProtoMemberAssociationPrimaryInfo, type metadata accessor for NCProtoMemberAssociationPrimaryInfo, (uint64_t)&protocol conformance descriptor for NCProtoMemberAssociationPrimaryInfo);
}

uint64_t base witness table accessor for Hashable in NCProtoMemberAssociationPrimaryInfo()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoMemberAssociationPrimaryInfo and conformance NCProtoMemberAssociationPrimaryInfo, type metadata accessor for NCProtoMemberAssociationPrimaryInfo, (uint64_t)&protocol conformance descriptor for NCProtoMemberAssociationPrimaryInfo);
}

uint64_t base witness table accessor for Equatable in NCProtoMemberAssociationPrimaryInfo()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoMemberAssociationPrimaryInfo and conformance NCProtoMemberAssociationPrimaryInfo, type metadata accessor for NCProtoMemberAssociationPrimaryInfo, (uint64_t)&protocol conformance descriptor for NCProtoMemberAssociationPrimaryInfo);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in NCProtoIDSProxyMessage()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoIDSProxyMessage and conformance NCProtoIDSProxyMessage, type metadata accessor for NCProtoIDSProxyMessage, (uint64_t)&protocol conformance descriptor for NCProtoIDSProxyMessage);
}

uint64_t base witness table accessor for Message in NCProtoIDSProxyMessage()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoIDSProxyMessage and conformance NCProtoIDSProxyMessage, type metadata accessor for NCProtoIDSProxyMessage, (uint64_t)&protocol conformance descriptor for NCProtoIDSProxyMessage);
}

uint64_t base witness table accessor for Hashable in NCProtoIDSProxyMessage()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoIDSProxyMessage and conformance NCProtoIDSProxyMessage, type metadata accessor for NCProtoIDSProxyMessage, (uint64_t)&protocol conformance descriptor for NCProtoIDSProxyMessage);
}

uint64_t base witness table accessor for Equatable in NCProtoIDSProxyMessage()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoIDSProxyMessage and conformance NCProtoIDSProxyMessage, type metadata accessor for NCProtoIDSProxyMessage, (uint64_t)&protocol conformance descriptor for NCProtoIDSProxyMessage);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in NCProtoIDSProxyMessage.RawData()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoIDSProxyMessage.RawData and conformance NCProtoIDSProxyMessage.RawData, type metadata accessor for NCProtoIDSProxyMessage.RawData, (uint64_t)&protocol conformance descriptor for NCProtoIDSProxyMessage.RawData);
}

uint64_t base witness table accessor for Message in NCProtoIDSProxyMessage.RawData()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoIDSProxyMessage.RawData and conformance NCProtoIDSProxyMessage.RawData, type metadata accessor for NCProtoIDSProxyMessage.RawData, (uint64_t)&protocol conformance descriptor for NCProtoIDSProxyMessage.RawData);
}

uint64_t base witness table accessor for Hashable in NCProtoIDSProxyMessage.RawData()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoIDSProxyMessage.RawData and conformance NCProtoIDSProxyMessage.RawData, type metadata accessor for NCProtoIDSProxyMessage.RawData, (uint64_t)&protocol conformance descriptor for NCProtoIDSProxyMessage.RawData);
}

uint64_t base witness table accessor for Equatable in NCProtoIDSProxyMessage.RawData()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoIDSProxyMessage.RawData and conformance NCProtoIDSProxyMessage.RawData, type metadata accessor for NCProtoIDSProxyMessage.RawData, (uint64_t)&protocol conformance descriptor for NCProtoIDSProxyMessage.RawData);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in NCProtoIDSProxyMessage.Resource()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoIDSProxyMessage.Resource and conformance NCProtoIDSProxyMessage.Resource, type metadata accessor for NCProtoIDSProxyMessage.Resource, (uint64_t)&protocol conformance descriptor for NCProtoIDSProxyMessage.Resource);
}

uint64_t base witness table accessor for Message in NCProtoIDSProxyMessage.Resource()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoIDSProxyMessage.Resource and conformance NCProtoIDSProxyMessage.Resource, type metadata accessor for NCProtoIDSProxyMessage.Resource, (uint64_t)&protocol conformance descriptor for NCProtoIDSProxyMessage.Resource);
}

uint64_t base witness table accessor for Hashable in NCProtoIDSProxyMessage.Resource()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoIDSProxyMessage.Resource and conformance NCProtoIDSProxyMessage.Resource, type metadata accessor for NCProtoIDSProxyMessage.Resource, (uint64_t)&protocol conformance descriptor for NCProtoIDSProxyMessage.Resource);
}

uint64_t base witness table accessor for Equatable in NCProtoIDSProxyMessage.Resource()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoIDSProxyMessage.Resource and conformance NCProtoIDSProxyMessage.Resource, type metadata accessor for NCProtoIDSProxyMessage.Resource, (uint64_t)&protocol conformance descriptor for NCProtoIDSProxyMessage.Resource);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in NCProtoIDSProxyMessage.GroupUpdate()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoIDSProxyMessage.GroupUpdate and conformance NCProtoIDSProxyMessage.GroupUpdate, type metadata accessor for NCProtoIDSProxyMessage.GroupUpdate, (uint64_t)&protocol conformance descriptor for NCProtoIDSProxyMessage.GroupUpdate);
}

uint64_t base witness table accessor for Message in NCProtoIDSProxyMessage.GroupUpdate()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoIDSProxyMessage.GroupUpdate and conformance NCProtoIDSProxyMessage.GroupUpdate, type metadata accessor for NCProtoIDSProxyMessage.GroupUpdate, (uint64_t)&protocol conformance descriptor for NCProtoIDSProxyMessage.GroupUpdate);
}

uint64_t base witness table accessor for Hashable in NCProtoIDSProxyMessage.GroupUpdate()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoIDSProxyMessage.GroupUpdate and conformance NCProtoIDSProxyMessage.GroupUpdate, type metadata accessor for NCProtoIDSProxyMessage.GroupUpdate, (uint64_t)&protocol conformance descriptor for NCProtoIDSProxyMessage.GroupUpdate);
}

uint64_t base witness table accessor for Equatable in NCProtoIDSProxyMessage.GroupUpdate()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoIDSProxyMessage.GroupUpdate and conformance NCProtoIDSProxyMessage.GroupUpdate, type metadata accessor for NCProtoIDSProxyMessage.GroupUpdate, (uint64_t)&protocol conformance descriptor for NCProtoIDSProxyMessage.GroupUpdate);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in NCProtoIDSProxyMessage.ParticipantIDList()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoIDSProxyMessage.ParticipantIDList and conformance NCProtoIDSProxyMessage.ParticipantIDList, type metadata accessor for NCProtoIDSProxyMessage.ParticipantIDList, (uint64_t)&protocol conformance descriptor for NCProtoIDSProxyMessage.ParticipantIDList);
}

uint64_t base witness table accessor for Message in NCProtoIDSProxyMessage.ParticipantIDList()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoIDSProxyMessage.ParticipantIDList and conformance NCProtoIDSProxyMessage.ParticipantIDList, type metadata accessor for NCProtoIDSProxyMessage.ParticipantIDList, (uint64_t)&protocol conformance descriptor for NCProtoIDSProxyMessage.ParticipantIDList);
}

uint64_t base witness table accessor for Hashable in NCProtoIDSProxyMessage.ParticipantIDList()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoIDSProxyMessage.ParticipantIDList and conformance NCProtoIDSProxyMessage.ParticipantIDList, type metadata accessor for NCProtoIDSProxyMessage.ParticipantIDList, (uint64_t)&protocol conformance descriptor for NCProtoIDSProxyMessage.ParticipantIDList);
}

uint64_t base witness table accessor for Equatable in NCProtoIDSProxyMessage.ParticipantIDList()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoIDSProxyMessage.ParticipantIDList and conformance NCProtoIDSProxyMessage.ParticipantIDList, type metadata accessor for NCProtoIDSProxyMessage.ParticipantIDList, (uint64_t)&protocol conformance descriptor for NCProtoIDSProxyMessage.ParticipantIDList);
}

uint64_t __swift_memcpy9_8(uint64_t result, uint64_t *a2)
{
  uint64_t v2;

  v2 = *a2;
  *(_BYTE *)(result + 8) = *((_BYTE *)a2 + 8);
  *(_QWORD *)result = v2;
  return result;
}

ValueMetadata *type metadata accessor for NCProtoConversationAVMode()
{
  return &type metadata for NCProtoConversationAVMode;
}

ValueMetadata *type metadata accessor for NCProtoConversationState()
{
  return &type metadata for NCProtoConversationState;
}

uint64_t *initializeBufferWithCopyOfBuffer for NCProtoContactInfo(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v23 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v23 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    v8 = a2[3];
    a1[2] = a2[2];
    a1[3] = v8;
    v9 = a2[5];
    a1[4] = a2[4];
    a1[5] = v9;
    v10 = a2[7];
    a1[6] = a2[6];
    a1[7] = v10;
    v11 = a2[9];
    a1[8] = a2[8];
    a1[9] = v11;
    v12 = a2[11];
    a1[10] = a2[10];
    a1[11] = v12;
    v13 = a2[12];
    v14 = a2[13];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    outlined copy of Data._Representation(v13, v14);
    a1[12] = v13;
    a1[13] = v14;
    v15 = *(int *)(a3 + 44);
    v16 = (char *)a1 + v15;
    v17 = (char *)a2 + v15;
    v18 = type metadata accessor for UnknownStorage();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v18 - 8) + 16))(v16, v17, v18);
    v19 = *(int *)(a3 + 48);
    v20 = (uint64_t *)((char *)a1 + v19);
    v21 = (uint64_t *)((char *)a2 + v19);
    v22 = v21[1];
    *v20 = *v21;
    v20[1] = v22;
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t destroy for NCProtoContactInfo(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined consume of Data._Representation(*(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104));
  v4 = a1 + *(int *)(a2 + 44);
  v5 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  return swift_bridgeObjectRelease();
}

_QWORD *initializeWithCopy for NCProtoContactInfo(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  v7 = a2[3];
  a1[2] = a2[2];
  a1[3] = v7;
  v8 = a2[5];
  a1[4] = a2[4];
  a1[5] = v8;
  v9 = a2[7];
  a1[6] = a2[6];
  a1[7] = v9;
  v10 = a2[9];
  a1[8] = a2[8];
  a1[9] = v10;
  v11 = a2[11];
  a1[10] = a2[10];
  a1[11] = v11;
  v12 = a2[12];
  v13 = a2[13];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  outlined copy of Data._Representation(v12, v13);
  a1[12] = v12;
  a1[13] = v13;
  v14 = *(int *)(a3 + 44);
  v15 = (char *)a1 + v14;
  v16 = (char *)a2 + v14;
  v17 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v17 - 8) + 16))(v15, v16, v17);
  v18 = *(int *)(a3 + 48);
  v19 = (_QWORD *)((char *)a1 + v18);
  v20 = (_QWORD *)((char *)a2 + v18);
  v21 = v20[1];
  *v19 = *v20;
  v19[1] = v21;
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for NCProtoContactInfo(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;

  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[6] = a2[6];
  a1[7] = a2[7];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[8] = a2[8];
  a1[9] = a2[9];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[10] = a2[10];
  a1[11] = a2[11];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = a2[12];
  v7 = a2[13];
  outlined copy of Data._Representation(v6, v7);
  v8 = a1[12];
  v9 = a1[13];
  a1[12] = v6;
  a1[13] = v7;
  outlined consume of Data._Representation(v8, v9);
  v10 = *(int *)(a3 + 44);
  v11 = (char *)a1 + v10;
  v12 = (char *)a2 + v10;
  v13 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 24))(v11, v12, v13);
  v14 = *(int *)(a3 + 48);
  v15 = (_QWORD *)((char *)a1 + v14);
  v16 = (_QWORD *)((char *)a2 + v14);
  *v15 = *v16;
  v15[1] = v16[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_OWORD *initializeWithTake for NCProtoContactInfo(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  __int128 v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  v7 = a2[3];
  a1[2] = a2[2];
  a1[3] = v7;
  v8 = a2[5];
  a1[4] = a2[4];
  a1[5] = v8;
  v9 = *(int *)(a3 + 44);
  v10 = (char *)a1 + v9;
  v11 = (char *)a2 + v9;
  a1[6] = a2[6];
  v12 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 32))(v10, v11, v12);
  *(_OWORD *)((char *)a1 + *(int *)(a3 + 48)) = *(_OWORD *)((char *)a2 + *(int *)(a3 + 48));
  return a1;
}

_QWORD *assignWithTake for NCProtoContactInfo(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;

  v6 = *(_QWORD *)(a2 + 8);
  *a1 = *(_QWORD *)a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  v7 = *(_QWORD *)(a2 + 24);
  a1[2] = *(_QWORD *)(a2 + 16);
  a1[3] = v7;
  swift_bridgeObjectRelease();
  v8 = *(_QWORD *)(a2 + 40);
  a1[4] = *(_QWORD *)(a2 + 32);
  a1[5] = v8;
  swift_bridgeObjectRelease();
  v9 = *(_QWORD *)(a2 + 56);
  a1[6] = *(_QWORD *)(a2 + 48);
  a1[7] = v9;
  swift_bridgeObjectRelease();
  v10 = *(_QWORD *)(a2 + 72);
  a1[8] = *(_QWORD *)(a2 + 64);
  a1[9] = v10;
  swift_bridgeObjectRelease();
  v11 = *(_QWORD *)(a2 + 88);
  a1[10] = *(_QWORD *)(a2 + 80);
  a1[11] = v11;
  swift_bridgeObjectRelease();
  v12 = a1[12];
  v13 = a1[13];
  *((_OWORD *)a1 + 6) = *(_OWORD *)(a2 + 96);
  outlined consume of Data._Representation(v12, v13);
  v14 = *(int *)(a3 + 44);
  v15 = (char *)a1 + v14;
  v16 = a2 + v14;
  v17 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 40))(v15, v16, v17);
  v18 = *(int *)(a3 + 48);
  v19 = (_QWORD *)((char *)a1 + v18);
  v20 = (uint64_t *)(a2 + v18);
  v22 = *v20;
  v21 = v20[1];
  *v19 = v22;
  v19[1] = v21;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for NCProtoContactInfo()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_242A19758(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for UnknownStorage();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 44), a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for NCProtoContactInfo()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_242A197E0(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    v7 = type metadata accessor for UnknownStorage();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 44), a2, a2, v7);
  }
  return result;
}

uint64_t type metadata completion function for NCProtoContactInfo()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for UnknownStorage();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

_QWORD *initializeBufferWithCopyOfBuffer for NCProtoContactHandleAnonym(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  _QWORD *v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t, uint64_t);
  uint64_t v13;

  v3 = (_QWORD *)a1;
  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    v13 = *a2;
    *v3 = *a2;
    v3 = (_QWORD *)(v13 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    v5 = a2[1];
    *(_QWORD *)a1 = *a2;
    *(_QWORD *)(a1 + 8) = v5;
    *(_QWORD *)(a1 + 16) = a2[2];
    *(_BYTE *)(a1 + 24) = *((_BYTE *)a2 + 24);
    v6 = a2[5];
    *(_QWORD *)(a1 + 32) = a2[4];
    *(_QWORD *)(a1 + 40) = v6;
    v7 = a2[7];
    v8 = *(int *)(a3 + 32);
    v9 = (uint64_t)a2 + v8;
    v10 = a1 + v8;
    *(_QWORD *)(a1 + 48) = a2[6];
    *(_QWORD *)(a1 + 56) = v7;
    v11 = type metadata accessor for UnknownStorage();
    v12 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v12(v10, v9, v11);
  }
  return v3;
}

uint64_t destroy for NCProtoContactHandleAnonym(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(a2 + 32);
  v5 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
}

uint64_t initializeWithCopy for NCProtoContactHandleAnonym(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t, uint64_t);

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  v5 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v5;
  v6 = *(_QWORD *)(a2 + 56);
  v7 = *(int *)(a3 + 32);
  v8 = a2 + v7;
  v9 = a1 + v7;
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v6;
  v10 = type metadata accessor for UnknownStorage();
  v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v11(v9, v8, v10);
  return a1;
}

uint64_t assignWithCopy for NCProtoContactHandleAnonym(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = v6;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v7 = *(int *)(a3 + 32);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 24))(v8, v9, v10);
  return a1;
}

uint64_t initializeWithTake for NCProtoContactHandleAnonym(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v4;
  v5 = *(int *)(a3 + 32);
  v6 = a1 + v5;
  v7 = a2 + v5;
  v8 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(v6, v7, v8);
  return a1;
}

uint64_t assignWithTake for NCProtoContactHandleAnonym(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v6 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v6;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  v7 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v7;
  swift_bridgeObjectRelease();
  v8 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v8;
  swift_bridgeObjectRelease();
  v9 = *(int *)(a3 + 32);
  v10 = a1 + v9;
  v11 = a2 + v9;
  v12 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 40))(v10, v11, v12);
  return a1;
}

uint64_t getEnumTagSinglePayload for NCProtoContactHandleAnonym()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_242A19CA0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for UnknownStorage();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 32), a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for NCProtoContactHandleAnonym()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_242A19D28(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    v7 = type metadata accessor for UnknownStorage();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 32), a2, a2, v7);
  }
  return result;
}

uint64_t type metadata completion function for NCProtoContactHandleAnonym()
{
  return type metadata completion function for NCProtoContactHandleAnonym();
}

{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for UnknownStorage();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for NCProtoContactHandleAnonym.AnonymType()
{
  return &type metadata for NCProtoContactHandleAnonym.AnonymType;
}

uint64_t *initializeBufferWithCopyOfBuffer for NCProtoContinuityFavorite(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  void (*v14)(_QWORD, _QWORD, _QWORD);
  char *v15;
  void (*v16)(_QWORD, _QWORD, _QWORD);
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  _QWORD *v32;
  uint64_t v33;
  void (*v34)(_QWORD *, _QWORD, uint64_t, uint64_t);
  uint64_t v35;
  _QWORD *v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  char *v46;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  void (*v51)(_QWORD, _QWORD, _QWORD);
  uint64_t v52;

  v4 = a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v23 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v23 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    v8 = a2[3];
    a1[2] = a2[2];
    a1[3] = v8;
    v9 = a2[5];
    v10 = a3[7];
    v11 = (char *)a1 + v10;
    v12 = (char *)a2 + v10;
    a1[4] = a2[4];
    a1[5] = v9;
    v13 = type metadata accessor for UnknownStorage();
    v14 = *(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v13 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v15 = v12;
    v16 = v14;
    v14(v11, v15, v13);
    v17 = a3[8];
    v18 = (uint64_t *)((char *)v4 + v17);
    v19 = (uint64_t *)((char *)a2 + v17);
    v20 = type metadata accessor for NCProtoContactInfo(0);
    v21 = *(_QWORD *)(v20 - 8);
    if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v21 + 48))(v19, 1, v20))
    {
      v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NCProtoContactInfo?);
      memcpy(v18, v19, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
    }
    else
    {
      v24 = v19[1];
      *v18 = *v19;
      v18[1] = v24;
      v25 = v19[3];
      v18[2] = v19[2];
      v18[3] = v25;
      v51 = v16;
      v52 = v13;
      v26 = v19[5];
      v18[4] = v19[4];
      v18[5] = v26;
      v27 = v19[7];
      v18[6] = v19[6];
      v18[7] = v27;
      v50 = v21;
      v28 = v19[9];
      v18[8] = v19[8];
      v18[9] = v28;
      v29 = v19[11];
      v18[10] = v19[10];
      v18[11] = v29;
      v49 = v19[12];
      v48 = v19[13];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v16 = v51;
      swift_bridgeObjectRetain();
      v13 = v52;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      outlined copy of Data._Representation(v49, v48);
      v18[12] = v49;
      v18[13] = v48;
      v51((char *)v18 + *(int *)(v20 + 44), (char *)v19 + *(int *)(v20 + 44), v52);
      v30 = *(int *)(v20 + 48);
      v31 = (_QWORD *)((char *)v18 + v30);
      v32 = (_QWORD *)((char *)v19 + v30);
      v33 = v32[1];
      *v31 = *v32;
      v31[1] = v33;
      v34 = *(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v50 + 56);
      swift_bridgeObjectRetain();
      v34(v18, 0, 1, v20);
    }
    v35 = a3[9];
    v36 = (uint64_t *)((char *)v4 + v35);
    v37 = (uint64_t *)((char *)a2 + v35);
    v38 = type metadata accessor for NCProtoContactHandleAnonym(0);
    v39 = *(_QWORD *)(v38 - 8);
    if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v39 + 48))(v37, 1, v38))
    {
      v40 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NCProtoContactHandleAnonym?);
      memcpy(v36, v37, *(_QWORD *)(*(_QWORD *)(v40 - 8) + 64));
    }
    else
    {
      v41 = v37[1];
      *v36 = *v37;
      v36[1] = v41;
      v36[2] = v37[2];
      *((_BYTE *)v36 + 24) = *((_BYTE *)v37 + 24);
      v42 = v37[5];
      v36[4] = v37[4];
      v36[5] = v42;
      v43 = v37[7];
      v36[6] = v37[6];
      v36[7] = v43;
      v44 = *(int *)(v38 + 32);
      v45 = (char *)v36 + v44;
      v46 = (char *)v37 + v44;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v16(v45, v46, v13);
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v39 + 56))(v36, 0, 1, v38);
    }
  }
  return v4;
}

uint64_t destroy for NCProtoContinuityFavorite(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  void (*v11)(uint64_t, uint64_t);

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v4 = a1 + a2[7];
  v5 = type metadata accessor for UnknownStorage();
  v11 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8);
  v11(v4, v5);
  v6 = a1 + a2[8];
  v7 = type metadata accessor for NCProtoContactInfo(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v6, 1, v7))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined consume of Data._Representation(*(_QWORD *)(v6 + 96), *(_QWORD *)(v6 + 104));
    v11(v6 + *(int *)(v7 + 44), v5);
    swift_bridgeObjectRelease();
  }
  v8 = a1 + a2[9];
  v9 = type metadata accessor for NCProtoContactHandleAnonym(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 48))(v8, 1, v9);
  if (!(_DWORD)result)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return ((uint64_t (*)(uint64_t, uint64_t))v11)(v8 + *(int *)(v9 + 32), v5);
  }
  return result;
}

_QWORD *initializeWithCopy for NCProtoContinuityFavorite(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  void (*v13)(_QWORD, _QWORD, _QWORD);
  char *v14;
  void (*v15)(_QWORD, _QWORD, _QWORD);
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  uint64_t v31;
  void (*v32)(_QWORD *, _QWORD, uint64_t, uint64_t);
  uint64_t v33;
  _QWORD *v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  char *v44;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  void (*v50)(_QWORD, _QWORD, _QWORD);
  uint64_t v51;

  v3 = a3;
  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  v7 = a2[3];
  a1[2] = a2[2];
  a1[3] = v7;
  v8 = a2[5];
  v9 = *(int *)(a3 + 28);
  v10 = (char *)a1 + v9;
  v11 = (char *)a2 + v9;
  a1[4] = a2[4];
  a1[5] = v8;
  v12 = type metadata accessor for UnknownStorage();
  v13 = *(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v12 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v14 = v11;
  v15 = v13;
  v13(v10, v14, v12);
  v16 = *(int *)(v3 + 32);
  v17 = (_QWORD *)((char *)a1 + v16);
  v18 = (_QWORD *)((char *)a2 + v16);
  v19 = type metadata accessor for NCProtoContactInfo(0);
  v20 = *(_QWORD *)(v19 - 8);
  if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v20 + 48))(v18, 1, v19))
  {
    v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NCProtoContactInfo?);
    memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
  }
  else
  {
    v22 = v18[1];
    *v17 = *v18;
    v17[1] = v22;
    v23 = v18[3];
    v17[2] = v18[2];
    v17[3] = v23;
    v50 = v15;
    v51 = v12;
    v24 = v18[5];
    v17[4] = v18[4];
    v17[5] = v24;
    v25 = v18[7];
    v17[6] = v18[6];
    v17[7] = v25;
    v48 = v20;
    v49 = v3;
    v26 = v18[9];
    v17[8] = v18[8];
    v17[9] = v26;
    v27 = v18[11];
    v17[10] = v18[10];
    v17[11] = v27;
    v46 = v18[13];
    v47 = v18[12];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v15 = v50;
    swift_bridgeObjectRetain();
    v12 = v51;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v3 = v49;
    swift_bridgeObjectRetain();
    outlined copy of Data._Representation(v47, v46);
    v17[12] = v47;
    v17[13] = v46;
    v50((char *)v17 + *(int *)(v19 + 44), (char *)v18 + *(int *)(v19 + 44), v51);
    v28 = *(int *)(v19 + 48);
    v29 = (_QWORD *)((char *)v17 + v28);
    v30 = (_QWORD *)((char *)v18 + v28);
    v31 = v30[1];
    *v29 = *v30;
    v29[1] = v31;
    v32 = *(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v48 + 56);
    swift_bridgeObjectRetain();
    v32(v17, 0, 1, v19);
  }
  v33 = *(int *)(v3 + 36);
  v34 = (_QWORD *)((char *)a1 + v33);
  v35 = (_QWORD *)((char *)a2 + v33);
  v36 = type metadata accessor for NCProtoContactHandleAnonym(0);
  v37 = *(_QWORD *)(v36 - 8);
  if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v37 + 48))(v35, 1, v36))
  {
    v38 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NCProtoContactHandleAnonym?);
    memcpy(v34, v35, *(_QWORD *)(*(_QWORD *)(v38 - 8) + 64));
  }
  else
  {
    v39 = v35[1];
    *v34 = *v35;
    v34[1] = v39;
    v34[2] = v35[2];
    *((_BYTE *)v34 + 24) = *((_BYTE *)v35 + 24);
    v40 = v35[5];
    v34[4] = v35[4];
    v34[5] = v40;
    v41 = v35[7];
    v34[6] = v35[6];
    v34[7] = v41;
    v42 = *(int *)(v36 + 32);
    v43 = (char *)v34 + v42;
    v44 = (char *)v35 + v42;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v15(v43, v44, v12);
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v37 + 56))(v34, 0, 1, v36);
  }
  return a1;
}

_QWORD *assignWithCopy for NCProtoContinuityFavorite(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, char *, uint64_t);
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t (*v16)(char *, uint64_t, uint64_t);
  int v17;
  int v18;
  uint64_t v19;
  char *v20;
  char *v21;
  void (*v22)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t (*v29)(uint64_t, uint64_t, uint64_t);
  int v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  void (*v36)(uint64_t, char *, uint64_t);
  uint64_t v37;
  void (*v39)(char *, char *, uint64_t);
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;

  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = *(int *)(a3 + 28);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for UnknownStorage();
  v50 = *(_QWORD *)(v9 - 8);
  v10 = *(void (**)(char *, char *, uint64_t))(v50 + 24);
  v10(v7, v8, v9);
  v51 = a3;
  v11 = *(int *)(a3 + 32);
  v12 = (char *)a1 + v11;
  v13 = (char *)a2 + v11;
  v14 = type metadata accessor for NCProtoContactInfo(0);
  v15 = *(_QWORD *)(v14 - 8);
  v16 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v15 + 48);
  v17 = v16(v12, 1, v14);
  v18 = v16(v13, 1, v14);
  if (v17)
  {
    if (!v18)
    {
      *(_QWORD *)v12 = *(_QWORD *)v13;
      *((_QWORD *)v12 + 1) = *((_QWORD *)v13 + 1);
      *((_QWORD *)v12 + 2) = *((_QWORD *)v13 + 2);
      *((_QWORD *)v12 + 3) = *((_QWORD *)v13 + 3);
      *((_QWORD *)v12 + 4) = *((_QWORD *)v13 + 4);
      *((_QWORD *)v12 + 5) = *((_QWORD *)v13 + 5);
      *((_QWORD *)v12 + 6) = *((_QWORD *)v13 + 6);
      *((_QWORD *)v12 + 7) = *((_QWORD *)v13 + 7);
      *((_QWORD *)v12 + 8) = *((_QWORD *)v13 + 8);
      *((_QWORD *)v12 + 9) = *((_QWORD *)v13 + 9);
      *((_QWORD *)v12 + 10) = *((_QWORD *)v13 + 10);
      *((_QWORD *)v12 + 11) = *((_QWORD *)v13 + 11);
      v48 = *((_QWORD *)v13 + 13);
      v49 = *((_QWORD *)v13 + 12);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      outlined copy of Data._Representation(v49, v48);
      *((_QWORD *)v12 + 12) = v49;
      *((_QWORD *)v12 + 13) = v48;
      (*(void (**)(char *, char *, uint64_t))(v50 + 16))(&v12[*(int *)(v14 + 44)], &v13[*(int *)(v14 + 44)], v9);
      v19 = *(int *)(v14 + 48);
      v20 = &v12[v19];
      v21 = &v13[v19];
      *(_QWORD *)v20 = *(_QWORD *)v21;
      *((_QWORD *)v20 + 1) = *((_QWORD *)v21 + 1);
      v22 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v15 + 56);
      swift_bridgeObjectRetain();
      v22(v12, 0, 1, v14);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v18)
  {
    outlined destroy of NCProtoContactInfo((uint64_t)v12, type metadata accessor for NCProtoContactInfo);
LABEL_6:
    v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NCProtoContactInfo?);
    memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
    goto LABEL_7;
  }
  *(_QWORD *)v12 = *(_QWORD *)v13;
  *((_QWORD *)v12 + 1) = *((_QWORD *)v13 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((_QWORD *)v12 + 2) = *((_QWORD *)v13 + 2);
  *((_QWORD *)v12 + 3) = *((_QWORD *)v13 + 3);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((_QWORD *)v12 + 4) = *((_QWORD *)v13 + 4);
  *((_QWORD *)v12 + 5) = *((_QWORD *)v13 + 5);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((_QWORD *)v12 + 6) = *((_QWORD *)v13 + 6);
  *((_QWORD *)v12 + 7) = *((_QWORD *)v13 + 7);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((_QWORD *)v12 + 8) = *((_QWORD *)v13 + 8);
  *((_QWORD *)v12 + 9) = *((_QWORD *)v13 + 9);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((_QWORD *)v12 + 10) = *((_QWORD *)v13 + 10);
  *((_QWORD *)v12 + 11) = *((_QWORD *)v13 + 11);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v39 = v10;
  v40 = *((_QWORD *)v13 + 12);
  v41 = *((_QWORD *)v13 + 13);
  outlined copy of Data._Representation(v40, v41);
  v42 = *((_QWORD *)v12 + 12);
  v43 = *((_QWORD *)v12 + 13);
  *((_QWORD *)v12 + 12) = v40;
  *((_QWORD *)v12 + 13) = v41;
  v10 = v39;
  outlined consume of Data._Representation(v42, v43);
  v39(&v12[*(int *)(v14 + 44)], &v13[*(int *)(v14 + 44)], v9);
  v44 = *(int *)(v14 + 48);
  v45 = &v12[v44];
  v46 = &v13[v44];
  *(_QWORD *)v45 = *(_QWORD *)v46;
  *((_QWORD *)v45 + 1) = *((_QWORD *)v46 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
LABEL_7:
  v24 = *(int *)(v51 + 36);
  v25 = (uint64_t)a1 + v24;
  v26 = (char *)a2 + v24;
  v27 = type metadata accessor for NCProtoContactHandleAnonym(0);
  v28 = *(_QWORD *)(v27 - 8);
  v29 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v28 + 48);
  v30 = v29(v25, 1, v27);
  v31 = v29((uint64_t)v26, 1, v27);
  if (!v30)
  {
    if (!v31)
    {
      *(_QWORD *)v25 = *(_QWORD *)v26;
      *(_QWORD *)(v25 + 8) = *((_QWORD *)v26 + 1);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v47 = *((_QWORD *)v26 + 2);
      *(_BYTE *)(v25 + 24) = v26[24];
      *(_QWORD *)(v25 + 16) = v47;
      *(_QWORD *)(v25 + 32) = *((_QWORD *)v26 + 4);
      *(_QWORD *)(v25 + 40) = *((_QWORD *)v26 + 5);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_QWORD *)(v25 + 48) = *((_QWORD *)v26 + 6);
      *(_QWORD *)(v25 + 56) = *((_QWORD *)v26 + 7);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v10((char *)(v25 + *(int *)(v27 + 32)), &v26[*(int *)(v27 + 32)], v9);
      return a1;
    }
    outlined destroy of NCProtoContactInfo(v25, type metadata accessor for NCProtoContactHandleAnonym);
    goto LABEL_12;
  }
  if (v31)
  {
LABEL_12:
    v37 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NCProtoContactHandleAnonym?);
    memcpy((void *)v25, v26, *(_QWORD *)(*(_QWORD *)(v37 - 8) + 64));
    return a1;
  }
  *(_QWORD *)v25 = *(_QWORD *)v26;
  *(_QWORD *)(v25 + 8) = *((_QWORD *)v26 + 1);
  v32 = *((_QWORD *)v26 + 2);
  *(_BYTE *)(v25 + 24) = v26[24];
  *(_QWORD *)(v25 + 16) = v32;
  *(_QWORD *)(v25 + 32) = *((_QWORD *)v26 + 4);
  *(_QWORD *)(v25 + 40) = *((_QWORD *)v26 + 5);
  *(_QWORD *)(v25 + 48) = *((_QWORD *)v26 + 6);
  *(_QWORD *)(v25 + 56) = *((_QWORD *)v26 + 7);
  v33 = *(int *)(v27 + 32);
  v34 = v25 + v33;
  v35 = &v26[v33];
  v36 = *(void (**)(uint64_t, char *, uint64_t))(v50 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v36(v34, v35, v9);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v28 + 56))(v25, 0, 1, v27);
  return a1;
}

_OWORD *initializeWithTake for NCProtoContinuityFavorite(_OWORD *a1, _OWORD *a2, int *a3)
{
  __int128 v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  void (*v11)(char *, char *, uint64_t);
  uint64_t v12;
  _OWORD *v13;
  _OWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  _OWORD *v22;
  _OWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  a1[2] = a2[2];
  v7 = a3[7];
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = type metadata accessor for UnknownStorage();
  v11 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 32);
  v11(v8, v9, v10);
  v12 = a3[8];
  v13 = (_OWORD *)((char *)a1 + v12);
  v14 = (_OWORD *)((char *)a2 + v12);
  v15 = type metadata accessor for NCProtoContactInfo(0);
  v16 = *(_QWORD *)(v15 - 8);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15))
  {
    v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NCProtoContactInfo?);
    memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
  }
  else
  {
    v18 = v14[1];
    *v13 = *v14;
    v13[1] = v18;
    v19 = v14[3];
    v13[2] = v14[2];
    v13[3] = v19;
    v20 = v14[5];
    v13[4] = v14[4];
    v13[5] = v20;
    v13[6] = v14[6];
    v11((char *)v13 + *(int *)(v15 + 44), (char *)v14 + *(int *)(v15 + 44), v10);
    *(_OWORD *)((char *)v13 + *(int *)(v15 + 48)) = *(_OWORD *)((char *)v14 + *(int *)(v15 + 48));
    (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
  }
  v21 = a3[9];
  v22 = (_OWORD *)((char *)a1 + v21);
  v23 = (_OWORD *)((char *)a2 + v21);
  v24 = type metadata accessor for NCProtoContactHandleAnonym(0);
  v25 = *(_QWORD *)(v24 - 8);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v25 + 48))(v23, 1, v24))
  {
    v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NCProtoContactHandleAnonym?);
    memcpy(v22, v23, *(_QWORD *)(*(_QWORD *)(v26 - 8) + 64));
  }
  else
  {
    *v22 = *v23;
    *((_QWORD *)v22 + 2) = *((_QWORD *)v23 + 2);
    *((_BYTE *)v22 + 24) = *((_BYTE *)v23 + 24);
    v27 = v23[3];
    v22[2] = v23[2];
    v22[3] = v27;
    v11((char *)v22 + *(int *)(v24 + 32), (char *)v23 + *(int *)(v24 + 32), v10);
    (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v25 + 56))(v22, 0, 1, v24);
  }
  return a1;
}

_QWORD *assignWithTake for NCProtoContinuityFavorite(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t (*v18)(char *, uint64_t, uint64_t);
  int v19;
  int v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t (*v30)(uint64_t, uint64_t, uint64_t);
  int v31;
  int v32;
  __int128 v33;
  uint64_t v34;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  void (*v52)(char *, char *, uint64_t);
  uint64_t v53;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  v7 = a2[3];
  a1[2] = a2[2];
  a1[3] = v7;
  swift_bridgeObjectRelease();
  v8 = a2[5];
  a1[4] = a2[4];
  a1[5] = v8;
  swift_bridgeObjectRelease();
  v9 = a3[7];
  v10 = (char *)a1 + v9;
  v11 = (char *)a2 + v9;
  v12 = type metadata accessor for UnknownStorage();
  v53 = *(_QWORD *)(v12 - 8);
  v52 = *(void (**)(char *, char *, uint64_t))(v53 + 40);
  v52(v10, v11, v12);
  v13 = a3[8];
  v14 = (char *)a1 + v13;
  v15 = (char *)a2 + v13;
  v16 = type metadata accessor for NCProtoContactInfo(0);
  v17 = *(_QWORD *)(v16 - 8);
  v18 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v17 + 48);
  v19 = v18(v14, 1, v16);
  v20 = v18(v15, 1, v16);
  if (v19)
  {
    if (!v20)
    {
      v21 = *((_OWORD *)v15 + 1);
      *(_OWORD *)v14 = *(_OWORD *)v15;
      *((_OWORD *)v14 + 1) = v21;
      v22 = *((_OWORD *)v15 + 3);
      *((_OWORD *)v14 + 2) = *((_OWORD *)v15 + 2);
      *((_OWORD *)v14 + 3) = v22;
      v23 = *((_OWORD *)v15 + 5);
      *((_OWORD *)v14 + 4) = *((_OWORD *)v15 + 4);
      *((_OWORD *)v14 + 5) = v23;
      *((_OWORD *)v14 + 6) = *((_OWORD *)v15 + 6);
      (*(void (**)(char *, char *, uint64_t))(v53 + 32))(&v14[*(int *)(v16 + 44)], &v15[*(int *)(v16 + 44)], v12);
      *(_OWORD *)&v14[*(int *)(v16 + 48)] = *(_OWORD *)&v15[*(int *)(v16 + 48)];
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v17 + 56))(v14, 0, 1, v16);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v20)
  {
    outlined destroy of NCProtoContactInfo((uint64_t)v14, type metadata accessor for NCProtoContactInfo);
LABEL_6:
    v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NCProtoContactInfo?);
    memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
    goto LABEL_7;
  }
  v36 = *((_QWORD *)v15 + 1);
  *(_QWORD *)v14 = *(_QWORD *)v15;
  *((_QWORD *)v14 + 1) = v36;
  swift_bridgeObjectRelease();
  v37 = *((_QWORD *)v15 + 3);
  *((_QWORD *)v14 + 2) = *((_QWORD *)v15 + 2);
  *((_QWORD *)v14 + 3) = v37;
  swift_bridgeObjectRelease();
  v38 = *((_QWORD *)v15 + 5);
  *((_QWORD *)v14 + 4) = *((_QWORD *)v15 + 4);
  *((_QWORD *)v14 + 5) = v38;
  swift_bridgeObjectRelease();
  v39 = *((_QWORD *)v15 + 7);
  *((_QWORD *)v14 + 6) = *((_QWORD *)v15 + 6);
  *((_QWORD *)v14 + 7) = v39;
  swift_bridgeObjectRelease();
  v40 = *((_QWORD *)v15 + 9);
  *((_QWORD *)v14 + 8) = *((_QWORD *)v15 + 8);
  *((_QWORD *)v14 + 9) = v40;
  swift_bridgeObjectRelease();
  v41 = *((_QWORD *)v15 + 11);
  *((_QWORD *)v14 + 10) = *((_QWORD *)v15 + 10);
  *((_QWORD *)v14 + 11) = v41;
  swift_bridgeObjectRelease();
  v42 = *((_QWORD *)v14 + 12);
  v43 = *((_QWORD *)v14 + 13);
  *((_OWORD *)v14 + 6) = *((_OWORD *)v15 + 6);
  outlined consume of Data._Representation(v42, v43);
  v52(&v14[*(int *)(v16 + 44)], &v15[*(int *)(v16 + 44)], v12);
  v44 = *(int *)(v16 + 48);
  v45 = &v14[v44];
  v46 = &v15[v44];
  v48 = *(_QWORD *)v46;
  v47 = *((_QWORD *)v46 + 1);
  *(_QWORD *)v45 = v48;
  *((_QWORD *)v45 + 1) = v47;
  swift_bridgeObjectRelease();
LABEL_7:
  v25 = a3[9];
  v26 = (uint64_t)a1 + v25;
  v27 = (char *)a2 + v25;
  v28 = type metadata accessor for NCProtoContactHandleAnonym(0);
  v29 = *(_QWORD *)(v28 - 8);
  v30 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v29 + 48);
  v31 = v30(v26, 1, v28);
  v32 = v30((uint64_t)v27, 1, v28);
  if (!v31)
  {
    if (!v32)
    {
      v49 = *((_QWORD *)v27 + 1);
      *(_QWORD *)v26 = *(_QWORD *)v27;
      *(_QWORD *)(v26 + 8) = v49;
      swift_bridgeObjectRelease();
      *(_QWORD *)(v26 + 16) = *((_QWORD *)v27 + 2);
      *(_BYTE *)(v26 + 24) = v27[24];
      v50 = *((_QWORD *)v27 + 5);
      *(_QWORD *)(v26 + 32) = *((_QWORD *)v27 + 4);
      *(_QWORD *)(v26 + 40) = v50;
      swift_bridgeObjectRelease();
      v51 = *((_QWORD *)v27 + 7);
      *(_QWORD *)(v26 + 48) = *((_QWORD *)v27 + 6);
      *(_QWORD *)(v26 + 56) = v51;
      swift_bridgeObjectRelease();
      v52((char *)(v26 + *(int *)(v28 + 32)), &v27[*(int *)(v28 + 32)], v12);
      return a1;
    }
    outlined destroy of NCProtoContactInfo(v26, type metadata accessor for NCProtoContactHandleAnonym);
    goto LABEL_12;
  }
  if (v32)
  {
LABEL_12:
    v34 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NCProtoContactHandleAnonym?);
    memcpy((void *)v26, v27, *(_QWORD *)(*(_QWORD *)(v34 - 8) + 64));
    return a1;
  }
  *(_OWORD *)v26 = *(_OWORD *)v27;
  *(_QWORD *)(v26 + 16) = *((_QWORD *)v27 + 2);
  *(_BYTE *)(v26 + 24) = v27[24];
  v33 = *((_OWORD *)v27 + 3);
  *(_OWORD *)(v26 + 32) = *((_OWORD *)v27 + 2);
  *(_OWORD *)(v26 + 48) = v33;
  (*(void (**)(uint64_t, char *, uint64_t))(v53 + 32))(v26 + *(int *)(v28 + 32), &v27[*(int *)(v28 + 32)], v12);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v29 + 56))(v26, 0, 1, v28);
  return a1;
}

uint64_t getEnumTagSinglePayload for NCProtoContinuityFavorite()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_242A1AF64(uint64_t a1, uint64_t a2, int *a3)
{
  unint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for UnknownStorage();
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
    {
      v10 = v8;
      v11 = a3[7];
    }
    else
    {
      v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NCProtoContactInfo?);
      v9 = *(_QWORD *)(v12 - 8);
      if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
      {
        v10 = v12;
        v11 = a3[8];
      }
      else
      {
        v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NCProtoContactHandleAnonym?);
        v9 = *(_QWORD *)(v10 - 8);
        v11 = a3[9];
      }
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(a1 + v11, a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for NCProtoContinuityFavorite()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_242A1B03C(uint64_t result, uint64_t a2, int a3, int *a4)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    v8 = type metadata accessor for UnknownStorage();
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      v10 = v8;
      v11 = a4[7];
    }
    else
    {
      v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NCProtoContactInfo?);
      v9 = *(_QWORD *)(v12 - 8);
      if (*(_DWORD *)(v9 + 84) == a3)
      {
        v10 = v12;
        v11 = a4[8];
      }
      else
      {
        v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NCProtoContactHandleAnonym?);
        v9 = *(_QWORD *)(v10 - 8);
        v11 = a4[9];
      }
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(v5 + v11, a2, a2, v10);
  }
  return result;
}

void type metadata completion function for NCProtoContinuityFavorite()
{
  unint64_t v0;
  unint64_t v1;
  unint64_t v2;

  type metadata accessor for UnknownStorage();
  if (v0 <= 0x3F)
  {
    type metadata accessor for NCProtoContactInfo?(319, &lazy cache variable for type metadata for NCProtoContactInfo?, (void (*)(uint64_t))type metadata accessor for NCProtoContactInfo);
    if (v1 <= 0x3F)
    {
      type metadata accessor for NCProtoContactInfo?(319, &lazy cache variable for type metadata for NCProtoContactHandleAnonym?, (void (*)(uint64_t))type metadata accessor for NCProtoContactHandleAnonym);
      if (v2 <= 0x3F)
        swift_initStructMetadata();
    }
  }
}

void type metadata accessor for NCProtoContactInfo?(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  unint64_t v4;
  uint64_t v5;

  if (!*a2)
  {
    a3(255);
    v4 = type metadata accessor for Optional();
    if (!v5)
      atomic_store(v4, a2);
  }
}

uint64_t *initializeBufferWithCopyOfBuffer for NCProtoAddressableContact(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v3;
  uint64_t v4;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  void (*v13)(char *, char *, uint64_t);
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  uint64_t v29;
  void (*v30)(_QWORD *, _QWORD, uint64_t, uint64_t);
  unint64_t v32;
  uint64_t v33;
  void (*v34)(char *, char *, uint64_t);
  uint64_t v35;

  v3 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  v4 = *a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    v7 = (uint64_t *)(v4 + ((v3 + 16) & ~(unint64_t)v3));
    swift_retain();
  }
  else
  {
    v7 = a1;
    v8 = a2[2];
    a1[1] = a2[1];
    a1[2] = v8;
    v9 = *(int *)(a3 + 24);
    v10 = (char *)a1 + v9;
    v11 = (char *)a2 + v9;
    v12 = type metadata accessor for UnknownStorage();
    v13 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v13(v10, v11, v12);
    v14 = *(int *)(a3 + 28);
    v15 = (uint64_t *)((char *)v7 + v14);
    v16 = (uint64_t *)((char *)a2 + v14);
    v17 = type metadata accessor for NCProtoContactInfo(0);
    v18 = *(_QWORD *)(v17 - 8);
    if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v18 + 48))(v16, 1, v17))
    {
      v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NCProtoContactInfo?);
      memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
    }
    else
    {
      v20 = v16[1];
      *v15 = *v16;
      v15[1] = v20;
      v34 = v13;
      v35 = v18;
      v21 = v16[3];
      v15[2] = v16[2];
      v15[3] = v21;
      v22 = v16[5];
      v15[4] = v16[4];
      v15[5] = v22;
      v23 = v16[7];
      v15[6] = v16[6];
      v15[7] = v23;
      v24 = v16[9];
      v15[8] = v16[8];
      v15[9] = v24;
      v25 = v16[11];
      v15[10] = v16[10];
      v15[11] = v25;
      v32 = v16[13];
      v33 = v16[12];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      outlined copy of Data._Representation(v33, v32);
      v15[12] = v33;
      v15[13] = v32;
      v34((char *)v15 + *(int *)(v17 + 44), (char *)v16 + *(int *)(v17 + 44), v12);
      v26 = *(int *)(v17 + 48);
      v27 = (_QWORD *)((char *)v15 + v26);
      v28 = (_QWORD *)((char *)v16 + v26);
      v29 = v28[1];
      *v27 = *v28;
      v27[1] = v29;
      v30 = *(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v35 + 56);
      swift_bridgeObjectRetain();
      v30(v15, 0, 1, v17);
    }
  }
  return v7;
}

uint64_t destroy for NCProtoAddressableContact(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t);
  uint64_t v7;
  uint64_t v8;
  uint64_t result;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(a2 + 24);
  v5 = type metadata accessor for UnknownStorage();
  v6 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8);
  v6(v4, v5);
  v7 = a1 + *(int *)(a2 + 28);
  v8 = type metadata accessor for NCProtoContactInfo(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v7, 1, v8);
  if (!(_DWORD)result)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined consume of Data._Representation(*(_QWORD *)(v7 + 96), *(_QWORD *)(v7 + 104));
    v6(v7 + *(int *)(v8 + 44), v5);
    return swift_bridgeObjectRelease();
  }
  return result;
}

_QWORD *initializeWithCopy for NCProtoAddressableContact(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  void (*v11)(char *, char *, uint64_t);
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  uint64_t v27;
  void (*v28)(_QWORD *, _QWORD, uint64_t, uint64_t);
  unint64_t v30;
  uint64_t v31;
  void (*v32)(char *, char *, uint64_t);
  uint64_t v33;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  a1[2] = a2[2];
  v7 = *(int *)(a3 + 24);
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = type metadata accessor for UnknownStorage();
  v11 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v11(v8, v9, v10);
  v12 = *(int *)(a3 + 28);
  v13 = (_QWORD *)((char *)a1 + v12);
  v14 = (_QWORD *)((char *)a2 + v12);
  v15 = type metadata accessor for NCProtoContactInfo(0);
  v16 = *(_QWORD *)(v15 - 8);
  if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15))
  {
    v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NCProtoContactInfo?);
    memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
  }
  else
  {
    v18 = v14[1];
    *v13 = *v14;
    v13[1] = v18;
    v32 = v11;
    v33 = v16;
    v19 = v14[3];
    v13[2] = v14[2];
    v13[3] = v19;
    v20 = v14[5];
    v13[4] = v14[4];
    v13[5] = v20;
    v21 = v14[7];
    v13[6] = v14[6];
    v13[7] = v21;
    v22 = v14[9];
    v13[8] = v14[8];
    v13[9] = v22;
    v23 = v14[11];
    v13[10] = v14[10];
    v13[11] = v23;
    v30 = v14[13];
    v31 = v14[12];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    outlined copy of Data._Representation(v31, v30);
    v13[12] = v31;
    v13[13] = v30;
    v32((char *)v13 + *(int *)(v15 + 44), (char *)v14 + *(int *)(v15 + 44), v10);
    v24 = *(int *)(v15 + 48);
    v25 = (_QWORD *)((char *)v13 + v24);
    v26 = (_QWORD *)((char *)v14 + v24);
    v27 = v26[1];
    *v25 = *v26;
    v25[1] = v27;
    v28 = *(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v33 + 56);
    swift_bridgeObjectRetain();
    v28(v13, 0, 1, v15);
  }
  return a1;
}

_QWORD *assignWithCopy for NCProtoAddressableContact(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(char *, char *, uint64_t);
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t (*v17)(char *, uint64_t, uint64_t);
  int v18;
  uint64_t v19;
  char *v20;
  char *v21;
  void (*v22)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t v23;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  unint64_t v32;
  uint64_t v33;

  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = *(int *)(a3 + 24);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for UnknownStorage();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(void (**)(char *, char *, uint64_t))(v10 + 24);
  v11(v7, v8, v9);
  v12 = *(int *)(a3 + 28);
  v13 = (char *)a1 + v12;
  v14 = (char *)a2 + v12;
  v15 = type metadata accessor for NCProtoContactInfo(0);
  v16 = *(_QWORD *)(v15 - 8);
  v17 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v16 + 48);
  LODWORD(v8) = v17(v13, 1, v15);
  v18 = v17(v14, 1, v15);
  if (!(_DWORD)v8)
  {
    if (!v18)
    {
      *(_QWORD *)v13 = *(_QWORD *)v14;
      *((_QWORD *)v13 + 1) = *((_QWORD *)v14 + 1);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *((_QWORD *)v13 + 2) = *((_QWORD *)v14 + 2);
      *((_QWORD *)v13 + 3) = *((_QWORD *)v14 + 3);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *((_QWORD *)v13 + 4) = *((_QWORD *)v14 + 4);
      *((_QWORD *)v13 + 5) = *((_QWORD *)v14 + 5);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *((_QWORD *)v13 + 6) = *((_QWORD *)v14 + 6);
      *((_QWORD *)v13 + 7) = *((_QWORD *)v14 + 7);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *((_QWORD *)v13 + 8) = *((_QWORD *)v14 + 8);
      *((_QWORD *)v13 + 9) = *((_QWORD *)v14 + 9);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *((_QWORD *)v13 + 10) = *((_QWORD *)v14 + 10);
      *((_QWORD *)v13 + 11) = *((_QWORD *)v14 + 11);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v25 = *((_QWORD *)v14 + 12);
      v26 = *((_QWORD *)v14 + 13);
      outlined copy of Data._Representation(v25, v26);
      v27 = *((_QWORD *)v13 + 12);
      v28 = *((_QWORD *)v13 + 13);
      *((_QWORD *)v13 + 12) = v25;
      *((_QWORD *)v13 + 13) = v26;
      outlined consume of Data._Representation(v27, v28);
      v11(&v13[*(int *)(v15 + 44)], &v14[*(int *)(v15 + 44)], v9);
      v29 = *(int *)(v15 + 48);
      v30 = &v13[v29];
      v31 = &v14[v29];
      *(_QWORD *)v30 = *(_QWORD *)v31;
      *((_QWORD *)v30 + 1) = *((_QWORD *)v31 + 1);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      return a1;
    }
    outlined destroy of NCProtoContactInfo((uint64_t)v13, type metadata accessor for NCProtoContactInfo);
    goto LABEL_6;
  }
  if (v18)
  {
LABEL_6:
    v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NCProtoContactInfo?);
    memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
    return a1;
  }
  *(_QWORD *)v13 = *(_QWORD *)v14;
  *((_QWORD *)v13 + 1) = *((_QWORD *)v14 + 1);
  *((_QWORD *)v13 + 2) = *((_QWORD *)v14 + 2);
  *((_QWORD *)v13 + 3) = *((_QWORD *)v14 + 3);
  *((_QWORD *)v13 + 4) = *((_QWORD *)v14 + 4);
  *((_QWORD *)v13 + 5) = *((_QWORD *)v14 + 5);
  *((_QWORD *)v13 + 6) = *((_QWORD *)v14 + 6);
  *((_QWORD *)v13 + 7) = *((_QWORD *)v14 + 7);
  *((_QWORD *)v13 + 8) = *((_QWORD *)v14 + 8);
  *((_QWORD *)v13 + 9) = *((_QWORD *)v14 + 9);
  *((_QWORD *)v13 + 10) = *((_QWORD *)v14 + 10);
  *((_QWORD *)v13 + 11) = *((_QWORD *)v14 + 11);
  v32 = *((_QWORD *)v14 + 13);
  v33 = *((_QWORD *)v14 + 12);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  outlined copy of Data._Representation(v33, v32);
  *((_QWORD *)v13 + 12) = v33;
  *((_QWORD *)v13 + 13) = v32;
  (*(void (**)(char *, char *, uint64_t))(v10 + 16))(&v13[*(int *)(v15 + 44)], &v14[*(int *)(v15 + 44)], v9);
  v19 = *(int *)(v15 + 48);
  v20 = &v13[v19];
  v21 = &v14[v19];
  *(_QWORD *)v20 = *(_QWORD *)v21;
  *((_QWORD *)v20 + 1) = *((_QWORD *)v21 + 1);
  v22 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v16 + 56);
  swift_bridgeObjectRetain();
  v22(v13, 0, 1, v15);
  return a1;
}

uint64_t initializeWithTake for NCProtoAddressableContact(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, char *, uint64_t);
  uint64_t v11;
  _OWORD *v12;
  _OWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  v6 = *(int *)(a3 + 24);
  v7 = (char *)(a1 + v6);
  v8 = (char *)(a2 + v6);
  v9 = type metadata accessor for UnknownStorage();
  v10 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32);
  v10(v7, v8, v9);
  v11 = *(int *)(a3 + 28);
  v12 = (_OWORD *)(a1 + v11);
  v13 = (_OWORD *)(a2 + v11);
  v14 = type metadata accessor for NCProtoContactInfo(0);
  v15 = *(_QWORD *)(v14 - 8);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14))
  {
    v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NCProtoContactInfo?);
    memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
  }
  else
  {
    v17 = v13[1];
    *v12 = *v13;
    v12[1] = v17;
    v18 = v13[3];
    v12[2] = v13[2];
    v12[3] = v18;
    v19 = v13[5];
    v12[4] = v13[4];
    v12[5] = v19;
    v12[6] = v13[6];
    v10((char *)v12 + *(int *)(v14 + 44), (char *)v13 + *(int *)(v14 + 44), v9);
    *(_OWORD *)((char *)v12 + *(int *)(v14 + 48)) = *(_OWORD *)((char *)v13 + *(int *)(v14 + 48));
    (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
  }
  return a1;
}

_QWORD *assignWithTake for NCProtoAddressableContact(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(char *, char *, uint64_t);
  uint64_t v13;
  _QWORD *v14;
  _OWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t (*v18)(_OWORD *, uint64_t, uint64_t);
  int v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;

  *a1 = *a2;
  swift_bridgeObjectRelease();
  v6 = a2[2];
  a1[1] = a2[1];
  a1[2] = v6;
  swift_bridgeObjectRelease();
  v7 = *(int *)(a3 + 24);
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = type metadata accessor for UnknownStorage();
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(void (**)(char *, char *, uint64_t))(v11 + 40);
  v12(v8, v9, v10);
  v13 = *(int *)(a3 + 28);
  v14 = (_QWORD *)((char *)a1 + v13);
  v15 = (_OWORD *)((char *)a2 + v13);
  v16 = type metadata accessor for NCProtoContactInfo(0);
  v17 = *(_QWORD *)(v16 - 8);
  v18 = *(uint64_t (**)(_OWORD *, uint64_t, uint64_t))(v17 + 48);
  LODWORD(v9) = v18(v14, 1, v16);
  v19 = v18(v15, 1, v16);
  if (!(_DWORD)v9)
  {
    if (!v19)
    {
      v25 = *((_QWORD *)v15 + 1);
      *v14 = *(_QWORD *)v15;
      v14[1] = v25;
      swift_bridgeObjectRelease();
      v26 = *((_QWORD *)v15 + 3);
      v14[2] = *((_QWORD *)v15 + 2);
      v14[3] = v26;
      swift_bridgeObjectRelease();
      v27 = *((_QWORD *)v15 + 5);
      v14[4] = *((_QWORD *)v15 + 4);
      v14[5] = v27;
      swift_bridgeObjectRelease();
      v28 = *((_QWORD *)v15 + 7);
      v14[6] = *((_QWORD *)v15 + 6);
      v14[7] = v28;
      swift_bridgeObjectRelease();
      v29 = *((_QWORD *)v15 + 9);
      v14[8] = *((_QWORD *)v15 + 8);
      v14[9] = v29;
      swift_bridgeObjectRelease();
      v30 = *((_QWORD *)v15 + 11);
      v14[10] = *((_QWORD *)v15 + 10);
      v14[11] = v30;
      swift_bridgeObjectRelease();
      v31 = v14[12];
      v32 = v14[13];
      *((_OWORD *)v14 + 6) = v15[6];
      outlined consume of Data._Representation(v31, v32);
      v12((char *)v14 + *(int *)(v16 + 44), (char *)v15 + *(int *)(v16 + 44), v10);
      v33 = *(int *)(v16 + 48);
      v34 = (_QWORD *)((char *)v14 + v33);
      v35 = (uint64_t *)((char *)v15 + v33);
      v37 = *v35;
      v36 = v35[1];
      *v34 = v37;
      v34[1] = v36;
      swift_bridgeObjectRelease();
      return a1;
    }
    outlined destroy of NCProtoContactInfo((uint64_t)v14, type metadata accessor for NCProtoContactInfo);
    goto LABEL_6;
  }
  if (v19)
  {
LABEL_6:
    v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NCProtoContactInfo?);
    memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
    return a1;
  }
  v20 = v15[1];
  *(_OWORD *)v14 = *v15;
  *((_OWORD *)v14 + 1) = v20;
  v21 = v15[3];
  *((_OWORD *)v14 + 2) = v15[2];
  *((_OWORD *)v14 + 3) = v21;
  v22 = v15[5];
  *((_OWORD *)v14 + 4) = v15[4];
  *((_OWORD *)v14 + 5) = v22;
  *((_OWORD *)v14 + 6) = v15[6];
  (*(void (**)(char *, char *, uint64_t))(v11 + 32))((char *)v14 + *(int *)(v16 + 44), (char *)v15 + *(int *)(v16 + 44), v10);
  *(_OWORD *)((char *)v14 + *(int *)(v16 + 48)) = *(_OWORD *)((char *)v15 + *(int *)(v16 + 48));
  (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v17 + 56))(v14, 0, 1, v16);
  return a1;
}

uint64_t getEnumTagSinglePayload for NCProtoAddressableContact()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_242A1BD88(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)a1;
    if (*(_QWORD *)a1 >= 0xFFFFFFFFuLL)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for UnknownStorage();
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
    {
      v10 = v8;
      v11 = *(int *)(a3 + 24);
    }
    else
    {
      v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NCProtoContactInfo?);
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a3 + 28);
    }
    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(v9 + 48))(&a1[v11], a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for NCProtoAddressableContact()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

char *sub_242A1BE38(char *result, uint64_t a2, int a3, uint64_t a4)
{
  char *v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)result = (a2 - 1);
  }
  else
  {
    v8 = type metadata accessor for UnknownStorage();
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      v10 = v8;
      v11 = *(int *)(a4 + 24);
    }
    else
    {
      v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NCProtoContactInfo?);
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a4 + 28);
    }
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56))(&v5[v11], a2, a2, v10);
  }
  return result;
}

void type metadata completion function for NCProtoAddressableContact()
{
  unint64_t v0;
  unint64_t v1;

  type metadata accessor for UnknownStorage();
  if (v0 <= 0x3F)
  {
    type metadata accessor for NCProtoContactInfo?(319, &lazy cache variable for type metadata for NCProtoContactInfo?, (void (*)(uint64_t))type metadata accessor for NCProtoContactInfo);
    if (v1 <= 0x3F)
      swift_initStructMetadata();
  }
}

uint64_t *initializeBufferWithCopyOfBuffer for NCProtoActiveConversation(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v3;
  uint64_t v4;
  uint64_t *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  void (*v12)(char *, char *, uint64_t);
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  char *v25;
  char *v26;
  uint64_t v27;
  char *v28;
  char *v29;

  v3 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  v4 = *a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    v7 = (uint64_t *)(v4 + ((v3 + 16) & ~(unint64_t)v3));
    swift_retain();
  }
  else
  {
    v7 = a1;
    v8 = a3[5];
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = type metadata accessor for UnknownStorage();
    v12 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16);
    swift_bridgeObjectRetain();
    v12(v9, v10, v11);
    v13 = a3[6];
    v14 = a3[7];
    v15 = (uint64_t *)((char *)v7 + v13);
    v16 = (uint64_t *)((char *)a2 + v13);
    v17 = v16[1];
    *v15 = *v16;
    v15[1] = v17;
    v18 = (uint64_t *)((char *)v7 + v14);
    v19 = (uint64_t *)((char *)a2 + v14);
    v20 = v19[1];
    *v18 = *v19;
    v18[1] = v20;
    v21 = a3[8];
    v22 = a3[9];
    v23 = (char *)v7 + v21;
    v24 = (char *)a2 + v21;
    *(_QWORD *)v23 = *(_QWORD *)v24;
    *((_WORD *)v23 + 4) = *((_WORD *)v24 + 4);
    v25 = (char *)v7 + v22;
    v26 = (char *)a2 + v22;
    *(_QWORD *)v25 = *(_QWORD *)v26;
    v25[8] = v26[8];
    v27 = a3[10];
    v28 = (char *)v7 + v27;
    v29 = (char *)a2 + v27;
    *(_QWORD *)v28 = *(_QWORD *)v29;
    *((_WORD *)v28 + 4) = *((_WORD *)v29 + 4);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return v7;
}

uint64_t destroy for NCProtoActiveConversation(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(a2 + 20);
  v5 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

_QWORD *initializeWithCopy for NCProtoActiveConversation(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, char *, uint64_t);
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  char *v23;
  char *v24;
  uint64_t v25;
  char *v26;
  char *v27;

  *a1 = *a2;
  v6 = a3[5];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for UnknownStorage();
  v10 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 16);
  swift_bridgeObjectRetain();
  v10(v7, v8, v9);
  v11 = a3[6];
  v12 = a3[7];
  v13 = (_QWORD *)((char *)a1 + v11);
  v14 = (_QWORD *)((char *)a2 + v11);
  v15 = v14[1];
  *v13 = *v14;
  v13[1] = v15;
  v16 = (_QWORD *)((char *)a1 + v12);
  v17 = (_QWORD *)((char *)a2 + v12);
  v18 = v17[1];
  *v16 = *v17;
  v16[1] = v18;
  v19 = a3[8];
  v20 = a3[9];
  v21 = (char *)a1 + v19;
  v22 = (char *)a2 + v19;
  *(_QWORD *)v21 = *(_QWORD *)v22;
  *((_WORD *)v21 + 4) = *((_WORD *)v22 + 4);
  v23 = (char *)a1 + v20;
  v24 = (char *)a2 + v20;
  *(_QWORD *)v23 = *(_QWORD *)v24;
  v23[8] = v24[8];
  v25 = a3[10];
  v26 = (char *)a1 + v25;
  v27 = (char *)a2 + v25;
  *(_QWORD *)v26 = *(_QWORD *)v27;
  *((_WORD *)v26 + 4) = *((_WORD *)v27 + 4);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for NCProtoActiveConversation(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;

  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = a3[5];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 24))(v7, v8, v9);
  v10 = a3[6];
  v11 = (_QWORD *)((char *)a1 + v10);
  v12 = (_QWORD *)((char *)a2 + v10);
  *v11 = *v12;
  v11[1] = v12[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v13 = a3[7];
  v14 = (_QWORD *)((char *)a1 + v13);
  v15 = (_QWORD *)((char *)a2 + v13);
  *v14 = *v15;
  v14[1] = v15[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v16 = a3[8];
  v17 = (char *)a1 + v16;
  v18 = (char *)a2 + v16;
  v19 = *(_QWORD *)v18;
  *((_WORD *)v17 + 4) = *((_WORD *)v18 + 4);
  *(_QWORD *)v17 = v19;
  v20 = a3[9];
  v21 = (char *)a1 + v20;
  v22 = (char *)a2 + v20;
  LOBYTE(v19) = v22[8];
  *(_QWORD *)v21 = *(_QWORD *)v22;
  v21[8] = v19;
  v23 = a3[10];
  v24 = (char *)a1 + v23;
  v25 = (char *)a2 + v23;
  v26 = *(_QWORD *)v25;
  *((_WORD *)v24 + 4) = *((_WORD *)v25 + 4);
  *(_QWORD *)v24 = v26;
  return a1;
}

_QWORD *initializeWithTake for NCProtoActiveConversation(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  uint64_t v17;
  char *v18;
  char *v19;

  *a1 = *a2;
  v6 = a3[5];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v7, v8, v9);
  v10 = a3[7];
  *(_OWORD *)((char *)a1 + a3[6]) = *(_OWORD *)((char *)a2 + a3[6]);
  *(_OWORD *)((char *)a1 + v10) = *(_OWORD *)((char *)a2 + v10);
  v11 = a3[8];
  v12 = a3[9];
  v13 = (char *)a1 + v11;
  v14 = (char *)a2 + v11;
  *(_QWORD *)v13 = *(_QWORD *)v14;
  *((_WORD *)v13 + 4) = *((_WORD *)v14 + 4);
  v15 = (char *)a1 + v12;
  v16 = (char *)a2 + v12;
  *(_QWORD *)v15 = *(_QWORD *)v16;
  v15[8] = v16[8];
  v17 = a3[10];
  v18 = (char *)a1 + v17;
  v19 = (char *)a2 + v17;
  *(_QWORD *)v18 = *(_QWORD *)v19;
  *((_WORD *)v18 + 4) = *((_WORD *)v19 + 4);
  return a1;
}

_QWORD *assignWithTake for NCProtoActiveConversation(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  char *v24;
  char *v25;
  uint64_t v26;
  char *v27;
  char *v28;

  *a1 = *a2;
  swift_bridgeObjectRelease();
  v6 = a3[5];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 40))(v7, v8, v9);
  v10 = a3[6];
  v11 = (_QWORD *)((char *)a1 + v10);
  v12 = (_QWORD *)((char *)a2 + v10);
  v14 = *v12;
  v13 = v12[1];
  *v11 = v14;
  v11[1] = v13;
  swift_bridgeObjectRelease();
  v15 = a3[7];
  v16 = (_QWORD *)((char *)a1 + v15);
  v17 = (_QWORD *)((char *)a2 + v15);
  v19 = *v17;
  v18 = v17[1];
  *v16 = v19;
  v16[1] = v18;
  swift_bridgeObjectRelease();
  v20 = a3[8];
  v21 = a3[9];
  v22 = (char *)a1 + v20;
  v23 = (char *)a2 + v20;
  *(_QWORD *)v22 = *(_QWORD *)v23;
  *((_WORD *)v22 + 4) = *((_WORD *)v23 + 4);
  v24 = (char *)a1 + v21;
  v25 = (char *)a2 + v21;
  *(_QWORD *)v24 = *(_QWORD *)v25;
  v24[8] = v25[8];
  v26 = a3[10];
  v27 = (char *)a1 + v26;
  v28 = (char *)a2 + v26;
  *(_QWORD *)v27 = *(_QWORD *)v28;
  *((_WORD *)v27 + 4) = *((_WORD *)v28 + 4);
  return a1;
}

uint64_t getEnumTagSinglePayload for NCProtoActiveConversation()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for NCProtoActiveConversation()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t type metadata completion function for NCProtoActiveConversation()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for UnknownStorage();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for NCProtoContinuityCall(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v23 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v23 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = type metadata accessor for UnknownStorage();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a3[5];
    v9 = a3[6];
    v10 = (uint64_t *)((char *)a1 + v8);
    v11 = (uint64_t *)((char *)a2 + v8);
    v12 = v11[1];
    *v10 = *v11;
    v10[1] = v12;
    v13 = (uint64_t *)((char *)a1 + v9);
    v14 = (uint64_t *)((char *)a2 + v9);
    v15 = v14[1];
    *v13 = *v14;
    v13[1] = v15;
    v16 = a3[7];
    v17 = a3[8];
    v18 = (char *)a1 + v16;
    v19 = (char *)a2 + v16;
    *((_WORD *)v18 + 4) = *((_WORD *)v19 + 4);
    *(_QWORD *)v18 = *(_QWORD *)v19;
    v20 = (uint64_t *)((char *)a1 + v17);
    v21 = (uint64_t *)((char *)a2 + v17);
    v22 = v21[1];
    *v20 = *v21;
    v20[1] = v22;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t destroy for NCProtoContinuityCall(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for NCProtoContinuityCall(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;

  v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = a3[5];
  v8 = a3[6];
  v9 = (_QWORD *)(a1 + v7);
  v10 = (_QWORD *)(a2 + v7);
  v11 = v10[1];
  *v9 = *v10;
  v9[1] = v11;
  v12 = (_QWORD *)(a1 + v8);
  v13 = (_QWORD *)(a2 + v8);
  v14 = v13[1];
  *v12 = *v13;
  v12[1] = v14;
  v15 = a3[7];
  v16 = a3[8];
  v17 = a1 + v15;
  v18 = a2 + v15;
  *(_WORD *)(v17 + 8) = *(_WORD *)(v18 + 8);
  *(_QWORD *)v17 = *(_QWORD *)v18;
  v19 = (_QWORD *)(a1 + v16);
  v20 = (_QWORD *)(a2 + v16);
  v21 = v20[1];
  *v19 = *v20;
  v19[1] = v21;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for NCProtoContinuityCall(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;

  v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = a3[5];
  v8 = (_QWORD *)(a1 + v7);
  v9 = (_QWORD *)(a2 + v7);
  *v8 = *v9;
  v8[1] = v9[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v10 = a3[6];
  v11 = (_QWORD *)(a1 + v10);
  v12 = (_QWORD *)(a2 + v10);
  *v11 = *v12;
  v11[1] = v12[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v13 = a3[7];
  v14 = a1 + v13;
  v15 = (uint64_t *)(a2 + v13);
  v16 = *v15;
  *(_WORD *)(v14 + 8) = *((_WORD *)v15 + 4);
  *(_QWORD *)v14 = v16;
  v17 = a3[8];
  v18 = (_QWORD *)(a1 + v17);
  v19 = (_QWORD *)(a2 + v17);
  *v18 = *v19;
  v18[1] = v19[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t initializeWithTake for NCProtoContinuityCall(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = a3[6];
  *(_OWORD *)(a1 + a3[5]) = *(_OWORD *)(a2 + a3[5]);
  *(_OWORD *)(a1 + v7) = *(_OWORD *)(a2 + v7);
  v8 = a3[7];
  v9 = a3[8];
  v10 = a1 + v8;
  v11 = a2 + v8;
  *(_QWORD *)v10 = *(_QWORD *)v11;
  *(_WORD *)(v10 + 8) = *(_WORD *)(v11 + 8);
  *(_OWORD *)(a1 + v9) = *(_OWORD *)(a2 + v9);
  return a1;
}

uint64_t assignWithTake for NCProtoContinuityCall(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;

  v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = a3[5];
  v8 = (_QWORD *)(a1 + v7);
  v9 = (uint64_t *)(a2 + v7);
  v11 = *v9;
  v10 = v9[1];
  *v8 = v11;
  v8[1] = v10;
  swift_bridgeObjectRelease();
  v12 = a3[6];
  v13 = (_QWORD *)(a1 + v12);
  v14 = (uint64_t *)(a2 + v12);
  v16 = *v14;
  v15 = v14[1];
  *v13 = v16;
  v13[1] = v15;
  swift_bridgeObjectRelease();
  v17 = a3[7];
  v18 = a3[8];
  v19 = a1 + v17;
  v20 = a2 + v17;
  *(_QWORD *)v19 = *(_QWORD *)v20;
  *(_WORD *)(v19 + 8) = *(_WORD *)(v20 + 8);
  v21 = (_QWORD *)(a1 + v18);
  v22 = (uint64_t *)(a2 + v18);
  v24 = *v22;
  v23 = v22[1];
  *v21 = v24;
  v21[1] = v23;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for NCProtoContinuityCall()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for NCProtoContinuityCall()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t type metadata completion function for NCProtoContinuityCall()
{
  return type metadata completion function for NCProtoContinuityCall();
}

{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for UnknownStorage();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t getEnumTagSinglePayload for NCProtoContinuityCall.Status(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 9))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for NCProtoContinuityCall.Status(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)result = 0;
    *(_BYTE *)(result + 8) = 0;
    *(_DWORD *)result = a2 - 1;
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 9) = v3;
  return result;
}

uint64_t getEnumTag for NCProtoContinuityCall.Status(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 8))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t destructiveInjectEnumTag for NCProtoContinuityCall.Status(uint64_t result, int a2)
{
  if (a2)
  {
    *(_QWORD *)result = (a2 - 1);
    *(_BYTE *)(result + 8) = 1;
  }
  else
  {
    *(_BYTE *)(result + 8) = 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for NCProtoContinuityCall.Status()
{
  return &type metadata for NCProtoContinuityCall.Status;
}

uint64_t *initializeBufferWithCopyOfBuffer for NCProtoStartedSessionEvent(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  void (*v14)(char *, char *, uint64_t);
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  int *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  _OWORD *v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  _QWORD *v38;
  _QWORD *v39;
  uint64_t v40;
  void (*v41)(_QWORD *, _QWORD, uint64_t, int *);
  uint64_t v42;
  char *v43;
  char *v44;
  uint64_t v46;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v21 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v21 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    v8 = a2[2];
    v9 = a2[3];
    swift_bridgeObjectRetain();
    outlined copy of Data._Representation(v8, v9);
    a1[2] = v8;
    a1[3] = v9;
    v10 = a3[6];
    v11 = (char *)a1 + v10;
    v12 = (char *)a2 + v10;
    v13 = type metadata accessor for UnknownStorage();
    v14 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 16);
    v14(v11, v12, v13);
    v15 = a3[7];
    v16 = (uint64_t *)((char *)a1 + v15);
    v17 = (uint64_t *)((char *)a2 + v15);
    v18 = (int *)type metadata accessor for NCProtoMemberAssociationPrimaryInfo(0);
    v19 = *((_QWORD *)v18 - 1);
    if ((*(unsigned int (**)(_QWORD *, uint64_t, int *))(v19 + 48))(v17, 1, v18))
    {
      v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NCProtoMemberAssociationPrimaryInfo?);
      memcpy(v16, v17, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
    }
    else
    {
      v46 = v19;
      *v16 = *v17;
      v22 = v18[5];
      v23 = (char *)v16 + v22;
      v24 = (char *)v17 + v22;
      swift_bridgeObjectRetain();
      v14(v23, v24, v13);
      v25 = v18[6];
      v26 = (_QWORD *)((char *)v16 + v25);
      v27 = (_QWORD *)((char *)v17 + v25);
      v28 = v27[1];
      *v26 = *v27;
      v26[1] = v28;
      v29 = v18[7];
      v30 = (char *)v16 + v29;
      v31 = (_OWORD *)((char *)v17 + v29);
      v32 = *(_QWORD *)((char *)v17 + v29 + 8);
      swift_bridgeObjectRetain();
      if (v32 >> 60 == 15)
      {
        *(_OWORD *)v30 = *v31;
      }
      else
      {
        v33 = *(_QWORD *)v31;
        outlined copy of Data._Representation(v33, v32);
        *(_QWORD *)v30 = v33;
        *((_QWORD *)v30 + 1) = v32;
      }
      v34 = v18[8];
      v35 = (char *)v16 + v34;
      v36 = (char *)v17 + v34;
      *(_QWORD *)v35 = *(_QWORD *)v36;
      v35[8] = v36[8];
      v37 = v18[9];
      v38 = (_QWORD *)((char *)v16 + v37);
      v39 = (_QWORD *)((char *)v17 + v37);
      v40 = v39[1];
      *v38 = *v39;
      v38[1] = v40;
      v41 = *(void (**)(_QWORD *, _QWORD, uint64_t, int *))(v46 + 56);
      swift_bridgeObjectRetain();
      v41(v16, 0, 1, v18);
    }
    v42 = a3[8];
    v43 = (char *)a1 + v42;
    v44 = (char *)a2 + v42;
    *(_QWORD *)v43 = *(_QWORD *)v44;
    *((_WORD *)v43 + 4) = *((_WORD *)v44 + 4);
  }
  return a1;
}

uint64_t destroy for NCProtoStartedSessionEvent(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t);
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t *v10;
  unint64_t v11;

  swift_bridgeObjectRelease();
  outlined consume of Data._Representation(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24));
  v4 = a1 + *(int *)(a2 + 24);
  v5 = type metadata accessor for UnknownStorage();
  v6 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8);
  v6(v4, v5);
  v7 = a1 + *(int *)(a2 + 28);
  v8 = type metadata accessor for NCProtoMemberAssociationPrimaryInfo(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v7, 1, v8);
  if (!(_DWORD)result)
  {
    swift_bridgeObjectRelease();
    v6(v7 + *(int *)(v8 + 20), v5);
    swift_bridgeObjectRelease();
    v10 = (uint64_t *)(v7 + *(int *)(v8 + 28));
    v11 = v10[1];
    if (v11 >> 60 != 15)
      outlined consume of Data._Representation(*v10, v11);
    return swift_bridgeObjectRelease();
  }
  return result;
}

_QWORD *initializeWithCopy for NCProtoStartedSessionEvent(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  void (*v13)(char *, char *, uint64_t);
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  int *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  _OWORD *v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  _QWORD *v36;
  _QWORD *v37;
  uint64_t v38;
  void (*v39)(_QWORD *, _QWORD, uint64_t, int *);
  uint64_t v40;
  char *v41;
  char *v42;
  int *v44;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  v7 = a2[2];
  v8 = a2[3];
  swift_bridgeObjectRetain();
  outlined copy of Data._Representation(v7, v8);
  a1[2] = v7;
  a1[3] = v8;
  v9 = a3[6];
  v10 = (char *)a1 + v9;
  v11 = (char *)a2 + v9;
  v12 = type metadata accessor for UnknownStorage();
  v13 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 16);
  v13(v10, v11, v12);
  v14 = a3[7];
  v15 = (_QWORD *)((char *)a1 + v14);
  v16 = (_QWORD *)((char *)a2 + v14);
  v17 = (int *)type metadata accessor for NCProtoMemberAssociationPrimaryInfo(0);
  v18 = *((_QWORD *)v17 - 1);
  if ((*(unsigned int (**)(_QWORD *, uint64_t, int *))(v18 + 48))(v16, 1, v17))
  {
    v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NCProtoMemberAssociationPrimaryInfo?);
    memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
  }
  else
  {
    v44 = a3;
    *v15 = *v16;
    v20 = v17[5];
    v21 = (char *)v15 + v20;
    v22 = (char *)v16 + v20;
    swift_bridgeObjectRetain();
    v13(v21, v22, v12);
    v23 = v17[6];
    v24 = (_QWORD *)((char *)v15 + v23);
    v25 = (_QWORD *)((char *)v16 + v23);
    v26 = v25[1];
    *v24 = *v25;
    v24[1] = v26;
    v27 = v17[7];
    v28 = (char *)v15 + v27;
    v29 = (_OWORD *)((char *)v16 + v27);
    v30 = *(_QWORD *)((char *)v16 + v27 + 8);
    swift_bridgeObjectRetain();
    if (v30 >> 60 == 15)
    {
      *(_OWORD *)v28 = *v29;
    }
    else
    {
      v31 = *(_QWORD *)v29;
      outlined copy of Data._Representation(v31, v30);
      *(_QWORD *)v28 = v31;
      *((_QWORD *)v28 + 1) = v30;
    }
    v32 = v17[8];
    v33 = (char *)v15 + v32;
    v34 = (char *)v16 + v32;
    *(_QWORD *)v33 = *(_QWORD *)v34;
    v33[8] = v34[8];
    v35 = v17[9];
    v36 = (_QWORD *)((char *)v15 + v35);
    v37 = (_QWORD *)((char *)v16 + v35);
    v38 = v37[1];
    *v36 = *v37;
    v36[1] = v38;
    v39 = *(void (**)(_QWORD *, _QWORD, uint64_t, int *))(v18 + 56);
    swift_bridgeObjectRetain();
    v39(v15, 0, 1, v17);
    a3 = v44;
  }
  v40 = a3[8];
  v41 = (char *)a1 + v40;
  v42 = (char *)a2 + v40;
  *(_QWORD *)v41 = *(_QWORD *)v42;
  *((_WORD *)v41 + 4) = *((_WORD *)v42 + 4);
  return a1;
}

_QWORD *assignWithCopy for NCProtoStartedSessionEvent(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(char *, char *, uint64_t);
  uint64_t v16;
  char *v17;
  char *v18;
  int *v19;
  uint64_t (*v20)(char *, uint64_t, int *);
  int v21;
  int v22;
  uint64_t v23;
  char *v24;
  char *v25;
  void (*v26)(char *, char *, uint64_t);
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  char *v31;
  char *v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  uint64_t *v40;
  char *v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  char *v51;
  void (*v52)(char *, _QWORD, uint64_t, int *);
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  char *v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  char *v62;
  uint64_t v63;
  char *v64;
  char *v65;
  uint64_t v66;
  uint64_t v68;
  uint64_t v69;

  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = a2[2];
  v7 = a2[3];
  outlined copy of Data._Representation(v6, v7);
  v8 = a1[2];
  v9 = a1[3];
  a1[2] = v6;
  a1[3] = v7;
  outlined consume of Data._Representation(v8, v9);
  v10 = *(int *)(a3 + 24);
  v11 = (char *)a1 + v10;
  v12 = (char *)a2 + v10;
  v13 = type metadata accessor for UnknownStorage();
  v14 = *(_QWORD *)(v13 - 8);
  v15 = *(void (**)(char *, char *, uint64_t))(v14 + 24);
  v15(v11, v12, v13);
  v69 = a3;
  v16 = *(int *)(a3 + 28);
  v17 = (char *)a1 + v16;
  v18 = (char *)a2 + v16;
  v19 = (int *)type metadata accessor for NCProtoMemberAssociationPrimaryInfo(0);
  v68 = *((_QWORD *)v19 - 1);
  v20 = *(uint64_t (**)(char *, uint64_t, int *))(v68 + 48);
  v21 = v20(v17, 1, v19);
  v22 = v20(v18, 1, v19);
  if (!v21)
  {
    if (v22)
    {
      outlined destroy of NCProtoContactInfo((uint64_t)v17, type metadata accessor for NCProtoMemberAssociationPrimaryInfo);
      goto LABEL_7;
    }
    *(_QWORD *)v17 = *(_QWORD *)v18;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    v15(&v17[v19[5]], &v18[v19[5]], v13);
    v36 = v19[6];
    v37 = &v17[v36];
    v38 = &v18[v36];
    *(_QWORD *)v37 = *(_QWORD *)v38;
    *((_QWORD *)v37 + 1) = *((_QWORD *)v38 + 1);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    v39 = v19[7];
    v40 = (uint64_t *)&v17[v39];
    v41 = &v18[v39];
    v42 = *(_QWORD *)&v18[v39 + 8];
    if (*(_QWORD *)&v17[v39 + 8] >> 60 == 15)
    {
      v35 = v69;
      if (v42 >> 60 != 15)
      {
        v43 = *(_QWORD *)v41;
        outlined copy of Data._Representation(*(_QWORD *)v41, *((_QWORD *)v41 + 1));
        *v40 = v43;
        v40[1] = v42;
LABEL_17:
        v56 = v19[8];
        v57 = &v17[v56];
        v58 = &v18[v56];
        v59 = *(_QWORD *)v58;
        v57[8] = v58[8];
        *(_QWORD *)v57 = v59;
        v60 = v19[9];
        v61 = &v17[v60];
        v62 = &v18[v60];
        *(_QWORD *)v61 = *(_QWORD *)v62;
        *((_QWORD *)v61 + 1) = *((_QWORD *)v62 + 1);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        goto LABEL_18;
      }
    }
    else
    {
      v35 = v69;
      if (v42 >> 60 != 15)
      {
        v53 = *(_QWORD *)v41;
        outlined copy of Data._Representation(*(_QWORD *)v41, *((_QWORD *)v41 + 1));
        v54 = *v40;
        v55 = v40[1];
        *v40 = v53;
        v40[1] = v42;
        outlined consume of Data._Representation(v54, v55);
        goto LABEL_17;
      }
      outlined destroy of Data((uint64_t)v40);
    }
    *(_OWORD *)v40 = *(_OWORD *)v41;
    goto LABEL_17;
  }
  if (v22)
  {
LABEL_7:
    v34 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NCProtoMemberAssociationPrimaryInfo?);
    memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v34 - 8) + 64));
    v35 = v69;
    goto LABEL_18;
  }
  *(_QWORD *)v17 = *(_QWORD *)v18;
  v23 = v19[5];
  v24 = &v17[v23];
  v25 = &v18[v23];
  v26 = *(void (**)(char *, char *, uint64_t))(v14 + 16);
  swift_bridgeObjectRetain();
  v26(v24, v25, v13);
  v27 = v19[6];
  v28 = &v17[v27];
  v29 = &v18[v27];
  *(_QWORD *)v28 = *(_QWORD *)v29;
  *((_QWORD *)v28 + 1) = *((_QWORD *)v29 + 1);
  v30 = v19[7];
  v31 = &v17[v30];
  v32 = &v18[v30];
  v33 = *(_QWORD *)&v18[v30 + 8];
  swift_bridgeObjectRetain();
  if (v33 >> 60 == 15)
  {
    *(_OWORD *)v31 = *(_OWORD *)v32;
  }
  else
  {
    v44 = *(_QWORD *)v32;
    outlined copy of Data._Representation(v44, v33);
    *(_QWORD *)v31 = v44;
    *((_QWORD *)v31 + 1) = v33;
  }
  v35 = v69;
  v45 = v19[8];
  v46 = &v17[v45];
  v47 = &v18[v45];
  v48 = *(_QWORD *)v47;
  v46[8] = v47[8];
  *(_QWORD *)v46 = v48;
  v49 = v19[9];
  v50 = &v17[v49];
  v51 = &v18[v49];
  *(_QWORD *)v50 = *(_QWORD *)v51;
  *((_QWORD *)v50 + 1) = *((_QWORD *)v51 + 1);
  v52 = *(void (**)(char *, _QWORD, uint64_t, int *))(v68 + 56);
  swift_bridgeObjectRetain();
  v52(v17, 0, 1, v19);
LABEL_18:
  v63 = *(int *)(v35 + 32);
  v64 = (char *)a1 + v63;
  v65 = (char *)a2 + v63;
  v66 = *(_QWORD *)v65;
  *((_WORD *)v64 + 4) = *((_WORD *)v65 + 4);
  *(_QWORD *)v64 = v66;
  return a1;
}

uint64_t outlined destroy of Data(uint64_t a1)
{
  (*(void (**)(void))(*(_QWORD *)(MEMORY[0x24BDCDDE8] - 8) + 8))();
  return a1;
}

_OWORD *initializeWithTake for NCProtoStartedSessionEvent(_OWORD *a1, _OWORD *a2, int *a3)
{
  __int128 v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  void (*v11)(char *, char *, uint64_t);
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  int *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  char *v22;
  char *v23;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  v7 = a3[6];
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = type metadata accessor for UnknownStorage();
  v11 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 32);
  v11(v8, v9, v10);
  v12 = a3[7];
  v13 = (_QWORD *)((char *)a1 + v12);
  v14 = (_QWORD *)((char *)a2 + v12);
  v15 = (int *)type metadata accessor for NCProtoMemberAssociationPrimaryInfo(0);
  v16 = *((_QWORD *)v15 - 1);
  if ((*(unsigned int (**)(_QWORD *, uint64_t, int *))(v16 + 48))(v14, 1, v15))
  {
    v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NCProtoMemberAssociationPrimaryInfo?);
    memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
  }
  else
  {
    *v13 = *v14;
    v11((char *)v13 + v15[5], (char *)v14 + v15[5], v10);
    *(_OWORD *)((char *)v13 + v15[6]) = *(_OWORD *)((char *)v14 + v15[6]);
    *(_OWORD *)((char *)v13 + v15[7]) = *(_OWORD *)((char *)v14 + v15[7]);
    v18 = v15[8];
    v19 = (char *)v13 + v18;
    v20 = (char *)v14 + v18;
    v19[8] = v20[8];
    *(_QWORD *)v19 = *(_QWORD *)v20;
    *(_OWORD *)((char *)v13 + v15[9]) = *(_OWORD *)((char *)v14 + v15[9]);
    (*(void (**)(_QWORD *, _QWORD, uint64_t, int *))(v16 + 56))(v13, 0, 1, v15);
  }
  v21 = a3[8];
  v22 = (char *)a1 + v21;
  v23 = (char *)a2 + v21;
  *(_QWORD *)v22 = *(_QWORD *)v23;
  *((_WORD *)v22 + 4) = *((_WORD *)v23 + 4);
  return a1;
}

_QWORD *assignWithTake for NCProtoStartedSessionEvent(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(char *, uint64_t, uint64_t);
  uint64_t v15;
  char *v16;
  char *v17;
  int *v18;
  uint64_t v19;
  uint64_t (*v20)(char *, uint64_t, int *);
  char *v21;
  int v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  char *v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *__src;

  v6 = *(_QWORD *)(a2 + 8);
  *a1 = *(_QWORD *)a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  v7 = a1[2];
  v8 = a1[3];
  *((_OWORD *)a1 + 1) = *(_OWORD *)(a2 + 16);
  outlined consume of Data._Representation(v7, v8);
  v9 = *(int *)(a3 + 24);
  v10 = (char *)a1 + v9;
  v11 = a2 + v9;
  v12 = type metadata accessor for UnknownStorage();
  v13 = *(_QWORD *)(v12 - 8);
  v14 = *(void (**)(char *, uint64_t, uint64_t))(v13 + 40);
  v14(v10, v11, v12);
  v52 = a2;
  v53 = a3;
  v15 = *(int *)(a3 + 28);
  v16 = (char *)a1 + v15;
  v17 = (char *)(a2 + v15);
  v18 = (int *)type metadata accessor for NCProtoMemberAssociationPrimaryInfo(0);
  v19 = *((_QWORD *)v18 - 1);
  v20 = *(uint64_t (**)(char *, uint64_t, int *))(v19 + 48);
  v21 = v16;
  LODWORD(v16) = v20(v16, 1, v18);
  __src = v17;
  v22 = v20(v17, 1, v18);
  if ((_DWORD)v16)
  {
    if (!v22)
    {
      *(_QWORD *)v21 = *(_QWORD *)v17;
      (*(void (**)(char *, char *, uint64_t))(v13 + 32))(&v21[v18[5]], &v17[v18[5]], v12);
      *(_OWORD *)&v21[v18[6]] = *(_OWORD *)&v17[v18[6]];
      *(_OWORD *)&v21[v18[7]] = *(_OWORD *)&v17[v18[7]];
      v23 = v18[8];
      v24 = &v21[v23];
      v25 = &v17[v23];
      v24[8] = v25[8];
      *(_QWORD *)v24 = *(_QWORD *)v25;
      *(_OWORD *)&v21[v18[9]] = *(_OWORD *)&v17[v18[9]];
      (*(void (**)(char *, _QWORD, uint64_t, int *))(v19 + 56))(v21, 0, 1, v18);
LABEL_7:
      v27 = v52;
      v28 = v53;
      goto LABEL_8;
    }
LABEL_6:
    v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NCProtoMemberAssociationPrimaryInfo?);
    memcpy(v21, v17, *(_QWORD *)(*(_QWORD *)(v26 - 8) + 64));
    goto LABEL_7;
  }
  if (v22)
  {
    outlined destroy of NCProtoContactInfo((uint64_t)v21, type metadata accessor for NCProtoMemberAssociationPrimaryInfo);
    goto LABEL_6;
  }
  *(_QWORD *)v21 = *(_QWORD *)v17;
  swift_bridgeObjectRelease();
  v14(&v21[v18[5]], (uint64_t)&v17[v18[5]], v12);
  v33 = v18[6];
  v34 = &v21[v33];
  v35 = &v17[v33];
  v37 = *(_QWORD *)v35;
  v36 = *((_QWORD *)v35 + 1);
  *(_QWORD *)v34 = v37;
  *((_QWORD *)v34 + 1) = v36;
  swift_bridgeObjectRelease();
  v38 = v18[7];
  v39 = (uint64_t)&v21[v38];
  v40 = &v17[v38];
  v41 = *(_QWORD *)&v21[v38 + 8];
  if (v41 >> 60 == 15)
  {
    *(_OWORD *)v39 = *(_OWORD *)v40;
    v27 = v52;
    v28 = v53;
  }
  else
  {
    v42 = *((_QWORD *)v40 + 1);
    v27 = v52;
    v28 = v53;
    if (v42 >> 60 == 15)
    {
      outlined destroy of Data(v39);
      *(_OWORD *)v39 = *(_OWORD *)v40;
    }
    else
    {
      v43 = *(_QWORD *)v39;
      *(_QWORD *)v39 = *(_QWORD *)v40;
      *(_QWORD *)(v39 + 8) = v42;
      outlined consume of Data._Representation(v43, v41);
    }
  }
  v44 = v18[8];
  v45 = &v21[v44];
  v46 = &__src[v44];
  *(_QWORD *)v45 = *(_QWORD *)v46;
  v45[8] = v46[8];
  v47 = v18[9];
  v48 = &v21[v47];
  v49 = &__src[v47];
  v51 = *(_QWORD *)v49;
  v50 = *((_QWORD *)v49 + 1);
  *(_QWORD *)v48 = v51;
  *((_QWORD *)v48 + 1) = v50;
  swift_bridgeObjectRelease();
LABEL_8:
  v29 = *(int *)(v28 + 32);
  v30 = (char *)a1 + v29;
  v31 = v27 + v29;
  *(_QWORD *)v30 = *(_QWORD *)v31;
  *((_WORD *)v30 + 4) = *(_WORD *)(v31 + 8);
  return a1;
}

uint64_t getEnumTagSinglePayload for NCProtoStartedSessionEvent()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_242A1D798(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for UnknownStorage();
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
    {
      v10 = v8;
      v11 = *(int *)(a3 + 24);
    }
    else
    {
      v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NCProtoMemberAssociationPrimaryInfo?);
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a3 + 28);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(a1 + v11, a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for NCProtoStartedSessionEvent()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_242A1D848(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    v8 = type metadata accessor for UnknownStorage();
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      v10 = v8;
      v11 = *(int *)(a4 + 24);
    }
    else
    {
      v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NCProtoMemberAssociationPrimaryInfo?);
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a4 + 28);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(v5 + v11, a2, a2, v10);
  }
  return result;
}

void type metadata completion function for NCProtoStartedSessionEvent()
{
  unint64_t v0;
  unint64_t v1;

  type metadata accessor for UnknownStorage();
  if (v0 <= 0x3F)
  {
    type metadata accessor for NCProtoContactInfo?(319, &lazy cache variable for type metadata for NCProtoMemberAssociationPrimaryInfo?, (void (*)(uint64_t))type metadata accessor for NCProtoMemberAssociationPrimaryInfo);
    if (v1 <= 0x3F)
      swift_initStructMetadata();
  }
}

uint64_t getEnumTagSinglePayload for NCProtoEndedSessionEvent()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for NCProtoEndedSessionEvent()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t type metadata completion function for NCProtoEndedSessionEvent()
{
  return type metadata completion function for NCProtoEndedSessionEvent();
}

{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for UnknownStorage();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t getEnumTagSinglePayload for NCProtoContactUpdateEvent()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for NCProtoContactUpdateEvent()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t *initializeBufferWithCopyOfBuffer for NCProtoJoinEvent(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  void (*v15)(char *, char *, uint64_t);
  uint64_t v16;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v16 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v16 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = *a2;
    v8 = a2[1];
    outlined copy of Data._Representation(*a2, v8);
    *a1 = v7;
    a1[1] = v8;
    v9 = a2[2];
    v10 = a2[3];
    outlined copy of Data._Representation(v9, v10);
    a1[2] = v9;
    a1[3] = v10;
    a1[4] = a2[4];
    v11 = *(int *)(a3 + 28);
    v12 = (char *)a1 + v11;
    v13 = (char *)a2 + v11;
    v14 = type metadata accessor for UnknownStorage();
    v15 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v14 - 8) + 16);
    swift_bridgeObjectRetain();
    v15(v12, v13, v14);
  }
  return a1;
}

uint64_t destroy for NCProtoJoinEvent(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  outlined consume of Data._Representation(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
  outlined consume of Data._Representation(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24));
  swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(a2 + 28);
  v5 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
}

uint64_t *initializeWithCopy for NCProtoJoinEvent(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  void (*v14)(char *, char *, uint64_t);

  v6 = *a2;
  v7 = a2[1];
  outlined copy of Data._Representation(*a2, v7);
  *a1 = v6;
  a1[1] = v7;
  v8 = a2[2];
  v9 = a2[3];
  outlined copy of Data._Representation(v8, v9);
  a1[2] = v8;
  a1[3] = v9;
  a1[4] = a2[4];
  v10 = *(int *)(a3 + 28);
  v11 = (char *)a1 + v10;
  v12 = (char *)a2 + v10;
  v13 = type metadata accessor for UnknownStorage();
  v14 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 16);
  swift_bridgeObjectRetain();
  v14(v11, v12, v13);
  return a1;
}

uint64_t *assignWithCopy for NCProtoJoinEvent(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;

  v6 = *a2;
  v7 = a2[1];
  outlined copy of Data._Representation(*a2, v7);
  v8 = *a1;
  v9 = a1[1];
  *a1 = v6;
  a1[1] = v7;
  outlined consume of Data._Representation(v8, v9);
  v10 = a2[2];
  v11 = a2[3];
  outlined copy of Data._Representation(v10, v11);
  v12 = a1[2];
  v13 = a1[3];
  a1[2] = v10;
  a1[3] = v11;
  outlined consume of Data._Representation(v12, v13);
  a1[4] = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v14 = *(int *)(a3 + 28);
  v15 = (char *)a1 + v14;
  v16 = (char *)a2 + v14;
  v17 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v17 - 8) + 24))(v15, v16, v17);
  return a1;
}

uint64_t *assignWithTake for NCProtoJoinEvent(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;

  v6 = *a1;
  v7 = a1[1];
  *(_OWORD *)a1 = *(_OWORD *)a2;
  outlined consume of Data._Representation(v6, v7);
  v8 = a1[2];
  v9 = a1[3];
  *((_OWORD *)a1 + 1) = *(_OWORD *)(a2 + 16);
  outlined consume of Data._Representation(v8, v9);
  a1[4] = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRelease();
  v10 = *(int *)(a3 + 28);
  v11 = (char *)a1 + v10;
  v12 = a2 + v10;
  v13 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 40))(v11, v12, v13);
  return a1;
}

uint64_t getEnumTagSinglePayload for NCProtoJoinEvent()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_242A1DD34(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 32);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for UnknownStorage();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 28), a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for NCProtoJoinEvent()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_242A1DDBC(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 32) = (a2 - 1);
  }
  else
  {
    v7 = type metadata accessor for UnknownStorage();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 28), a2, a2, v7);
  }
  return result;
}

uint64_t type metadata completion function for NCProtoJoinEvent()
{
  return type metadata completion function for NCProtoJoinEvent();
}

{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for UnknownStorage();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for NCProtoRecentCallsDidChangeEvent(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  void (*v11)(char *, char *, uint64_t);

  v3 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  v4 = *a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    v5 = (uint64_t *)(v4 + ((v3 + 16) & ~(unint64_t)v3));
    swift_retain();
  }
  else
  {
    v5 = a1;
    v6 = a2[2];
    a1[1] = a2[1];
    a1[2] = v6;
    v7 = *(int *)(a3 + 28);
    v8 = (char *)a1 + v7;
    v9 = (char *)a2 + v7;
    v10 = type metadata accessor for UnknownStorage();
    v11 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v11(v8, v9, v10);
  }
  return v5;
}

uint64_t destroy for NCProtoRecentCallsDidChangeEvent(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(a2 + 28);
  v5 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
}

_QWORD *initializeWithCopy for NCProtoRecentCallsDidChangeEvent(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  void (*v9)(char *, char *, uint64_t);

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  a1[2] = a2[2];
  v5 = *(int *)(a3 + 28);
  v6 = (char *)a1 + v5;
  v7 = (char *)a2 + v5;
  v8 = type metadata accessor for UnknownStorage();
  v9 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v8 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v9(v6, v7, v8);
  return a1;
}

_QWORD *assignWithCopy for NCProtoRecentCallsDidChangeEvent(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;

  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = *(int *)(a3 + 28);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 24))(v7, v8, v9);
  return a1;
}

uint64_t initializeWithTake for NCProtoRecentCallsDidChangeEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v4 = *(int *)(a3 + 28);
  v5 = a1 + v4;
  v6 = a2 + v4;
  v7 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

_QWORD *assignWithTake for NCProtoRecentCallsDidChangeEvent(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;

  *a1 = *a2;
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRelease();
  v6 = *(int *)(a3 + 28);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 40))(v7, v8, v9);
  return a1;
}

uint64_t getEnumTagSinglePayload for NCProtoRecentCallsDidChangeEvent()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_242A1E18C(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)a1;
    if (*(_QWORD *)a1 >= 0xFFFFFFFFuLL)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for UnknownStorage();
    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(&a1[*(int *)(a3 + 28)], a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for NCProtoRecentCallsDidChangeEvent()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

char *sub_242A1E214(char *result, uint64_t a2, int a3, uint64_t a4)
{
  char *v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)result = (a2 - 1);
  }
  else
  {
    v7 = type metadata accessor for UnknownStorage();
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(&v5[*(int *)(a4 + 28)], a2, a2, v7);
  }
  return result;
}

uint64_t type metadata completion function for NCProtoRecentCallsDidChangeEvent()
{
  return type metadata completion function for NCProtoJoinEvent();
}

uint64_t getEnumTagSinglePayload for NCProtoFavoritesDidChangeEvent()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for NCProtoFavoritesDidChangeEvent()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t type metadata completion function for NCProtoFavoritesDidChangeEvent()
{
  return type metadata completion function for NCProtoEndedSessionEvent();
}

uint64_t getEnumTagSinglePayload for NCProtoActiveConversationsDidChangeEvent()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for NCProtoActiveConversationsDidChangeEvent()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t getEnumTagSinglePayload for NCProtoContinuityCallsDidChangeEvent()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for NCProtoContinuityCallsDidChangeEvent()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

_QWORD *initializeBufferWithCopyOfBuffer for NCProtoSuggestionAdvertisement(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  _QWORD *v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t, uint64_t);
  uint64_t v12;

  v3 = (_QWORD *)a1;
  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    v12 = *a2;
    *v3 = *a2;
    v3 = (_QWORD *)(v12 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    v5 = a2[1];
    *(_QWORD *)a1 = *a2;
    *(_QWORD *)(a1 + 8) = v5;
    v6 = a2[3];
    *(_QWORD *)(a1 + 16) = a2[2];
    *(_QWORD *)(a1 + 24) = v6;
    *(_QWORD *)(a1 + 32) = a2[4];
    v7 = *(int *)(a3 + 28);
    v8 = (uint64_t)a2 + v7;
    v9 = a1 + v7;
    *(_BYTE *)(a1 + 40) = *((_BYTE *)a2 + 40);
    v10 = type metadata accessor for UnknownStorage();
    v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v11(v9, v8, v10);
  }
  return v3;
}

uint64_t destroy for NCProtoSuggestionAdvertisement(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(a2 + 28);
  v5 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
}

uint64_t initializeWithCopy for NCProtoSuggestionAdvertisement(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t, uint64_t);

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  v5 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v5;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  v6 = *(int *)(a3 + 28);
  v7 = a2 + v6;
  v8 = a1 + v6;
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  v9 = type metadata accessor for UnknownStorage();
  v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v10(v8, v7, v9);
  return a1;
}

uint64_t assignWithCopy for NCProtoSuggestionAdvertisement(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = *(_QWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = v6;
  v7 = *(int *)(a3 + 28);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 24))(v8, v9, v10);
  return a1;
}

uint64_t initializeWithTake for NCProtoSuggestionAdvertisement(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  v5 = *(int *)(a3 + 28);
  v6 = a1 + v5;
  v7 = a2 + v5;
  v8 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(v6, v7, v8);
  return a1;
}

uint64_t assignWithTake for NCProtoSuggestionAdvertisement(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v6 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v6;
  swift_bridgeObjectRelease();
  v7 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v7;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  v8 = *(int *)(a3 + 28);
  v9 = a1 + v8;
  v10 = a2 + v8;
  v11 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 40))(v9, v10, v11);
  return a1;
}

uint64_t getEnumTagSinglePayload for NCProtoSuggestionAdvertisement()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for NCProtoSuggestionAdvertisement()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t type metadata completion function for NCProtoSuggestionAdvertisement()
{
  return type metadata completion function for NCProtoJoinEvent();
}

ValueMetadata *type metadata accessor for NCProtoSuggestionAdvertisement.SuggestionType()
{
  return &type metadata for NCProtoSuggestionAdvertisement.SuggestionType;
}

char *initializeBufferWithCopyOfBuffer for NCProtoSuggestionAdvertisementDidChangeEvent(char *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  void (*v8)(char *, char *, uint64_t);
  uint64_t v9;
  char *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v15 = *a2;
    *(_QWORD *)a1 = *a2;
    a1 = (char *)(v15 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = type metadata accessor for UnknownStorage();
    v8 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 16);
    v8(a1, (char *)a2, v7);
    v9 = *(int *)(a3 + 20);
    v10 = &a1[v9];
    v11 = (uint64_t *)((char *)a2 + v9);
    v12 = type metadata accessor for NCProtoSuggestionAdvertisement(0);
    v13 = *(_QWORD *)(v12 - 8);
    if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12))
    {
      v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NCProtoSuggestionAdvertisement?);
      memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
    }
    else
    {
      v16 = v11[1];
      *(_QWORD *)v10 = *v11;
      *((_QWORD *)v10 + 1) = v16;
      v17 = v11[3];
      *((_QWORD *)v10 + 2) = v11[2];
      *((_QWORD *)v10 + 3) = v17;
      *((_QWORD *)v10 + 4) = v11[4];
      v10[40] = *((_BYTE *)v11 + 40);
      v18 = *(int *)(v12 + 28);
      v19 = &v10[v18];
      v20 = (char *)v11 + v18;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v8(v19, v20, v7);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
    }
  }
  return a1;
}

uint64_t destroy for NCProtoSuggestionAdvertisementDidChangeEvent(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  void (*v8)(uint64_t, uint64_t);

  v4 = type metadata accessor for UnknownStorage();
  v8 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8);
  v8(a1, v4);
  v5 = a1 + *(int *)(a2 + 20);
  v6 = type metadata accessor for NCProtoSuggestionAdvertisement(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 48))(v5, 1, v6);
  if (!(_DWORD)result)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return ((uint64_t (*)(uint64_t, uint64_t))v8)(v5 + *(int *)(v6 + 28), v4);
  }
  return result;
}

uint64_t initializeWithCopy for NCProtoSuggestionAdvertisementDidChangeEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;

  v6 = type metadata accessor for UnknownStorage();
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16);
  v7(a1, a2, v6);
  v8 = *(int *)(a3 + 20);
  v9 = (_QWORD *)(a1 + v8);
  v10 = (_QWORD *)(a2 + v8);
  v11 = type metadata accessor for NCProtoSuggestionAdvertisement(0);
  v12 = *(_QWORD *)(v11 - 8);
  if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11))
  {
    v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NCProtoSuggestionAdvertisement?);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
  }
  else
  {
    v14 = v10[1];
    *v9 = *v10;
    v9[1] = v14;
    v15 = v10[3];
    v9[2] = v10[2];
    v9[3] = v15;
    v9[4] = v10[4];
    *((_BYTE *)v9 + 40) = *((_BYTE *)v10 + 40);
    v16 = *(int *)(v11 + 28);
    v17 = (char *)v9 + v16;
    v18 = (char *)v10 + v16;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v7((uint64_t)v17, (uint64_t)v18, v6);
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
  }
  return a1;
}

uint64_t assignWithCopy for NCProtoSuggestionAdvertisementDidChangeEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t (*v14)(uint64_t, uint64_t, uint64_t);
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(uint64_t, uint64_t, uint64_t);
  uint64_t v22;
  uint64_t v24;

  v6 = type metadata accessor for UnknownStorage();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 24);
  v8(a1, a2, v6);
  v9 = *(int *)(a3 + 20);
  v10 = a1 + v9;
  v11 = a2 + v9;
  v12 = type metadata accessor for NCProtoSuggestionAdvertisement(0);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v13 + 48);
  v15 = v14(v10, 1, v12);
  v16 = v14(v11, 1, v12);
  if (!v15)
  {
    if (!v16)
    {
      *(_QWORD *)v10 = *(_QWORD *)v11;
      *(_QWORD *)(v10 + 8) = *(_QWORD *)(v11 + 8);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_QWORD *)(v10 + 16) = *(_QWORD *)(v11 + 16);
      *(_QWORD *)(v10 + 24) = *(_QWORD *)(v11 + 24);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v24 = *(_QWORD *)(v11 + 32);
      *(_BYTE *)(v10 + 40) = *(_BYTE *)(v11 + 40);
      *(_QWORD *)(v10 + 32) = v24;
      v8(v10 + *(int *)(v12 + 28), v11 + *(int *)(v12 + 28), v6);
      return a1;
    }
    outlined destroy of NCProtoContactInfo(v10, type metadata accessor for NCProtoSuggestionAdvertisement);
    goto LABEL_6;
  }
  if (v16)
  {
LABEL_6:
    v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NCProtoSuggestionAdvertisement?);
    memcpy((void *)v10, (const void *)v11, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
    return a1;
  }
  *(_QWORD *)v10 = *(_QWORD *)v11;
  *(_QWORD *)(v10 + 8) = *(_QWORD *)(v11 + 8);
  *(_QWORD *)(v10 + 16) = *(_QWORD *)(v11 + 16);
  *(_QWORD *)(v10 + 24) = *(_QWORD *)(v11 + 24);
  v17 = *(_QWORD *)(v11 + 32);
  *(_BYTE *)(v10 + 40) = *(_BYTE *)(v11 + 40);
  *(_QWORD *)(v10 + 32) = v17;
  v18 = *(int *)(v12 + 28);
  v19 = v10 + v18;
  v20 = v11 + v18;
  v21 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v21(v19, v20, v6);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
  return a1;
}

char *initializeWithTake for NCProtoSuggestionAdvertisementDidChangeEvent(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  void (*v7)(char *, char *, uint64_t);
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;

  v6 = type metadata accessor for UnknownStorage();
  v7 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v6 - 8) + 32);
  v7(a1, a2, v6);
  v8 = *(int *)(a3 + 20);
  v9 = &a1[v8];
  v10 = &a2[v8];
  v11 = type metadata accessor for NCProtoSuggestionAdvertisement(0);
  v12 = *(_QWORD *)(v11 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11))
  {
    v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NCProtoSuggestionAdvertisement?);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
  }
  else
  {
    v14 = *((_OWORD *)v10 + 1);
    *(_OWORD *)v9 = *(_OWORD *)v10;
    *((_OWORD *)v9 + 1) = v14;
    *((_QWORD *)v9 + 4) = *((_QWORD *)v10 + 4);
    v9[40] = v10[40];
    v7(&v9[*(int *)(v11 + 28)], &v10[*(int *)(v11 + 28)], v6);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
  }
  return a1;
}

uint64_t assignWithTake for NCProtoSuggestionAdvertisementDidChangeEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t (*v14)(uint64_t, uint64_t, uint64_t);
  int v15;
  int v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;

  v6 = type metadata accessor for UnknownStorage();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 40);
  v8(a1, a2, v6);
  v9 = *(int *)(a3 + 20);
  v10 = a1 + v9;
  v11 = a2 + v9;
  v12 = type metadata accessor for NCProtoSuggestionAdvertisement(0);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v13 + 48);
  v15 = v14(v10, 1, v12);
  v16 = v14(v11, 1, v12);
  if (!v15)
  {
    if (!v16)
    {
      v20 = *(_QWORD *)(v11 + 8);
      *(_QWORD *)v10 = *(_QWORD *)v11;
      *(_QWORD *)(v10 + 8) = v20;
      swift_bridgeObjectRelease();
      v21 = *(_QWORD *)(v11 + 24);
      *(_QWORD *)(v10 + 16) = *(_QWORD *)(v11 + 16);
      *(_QWORD *)(v10 + 24) = v21;
      swift_bridgeObjectRelease();
      *(_QWORD *)(v10 + 32) = *(_QWORD *)(v11 + 32);
      *(_BYTE *)(v10 + 40) = *(_BYTE *)(v11 + 40);
      v8(v10 + *(int *)(v12 + 28), v11 + *(int *)(v12 + 28), v6);
      return a1;
    }
    outlined destroy of NCProtoContactInfo(v10, type metadata accessor for NCProtoSuggestionAdvertisement);
    goto LABEL_6;
  }
  if (v16)
  {
LABEL_6:
    v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NCProtoSuggestionAdvertisement?);
    memcpy((void *)v10, (const void *)v11, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
    return a1;
  }
  v17 = *(_OWORD *)(v11 + 16);
  *(_OWORD *)v10 = *(_OWORD *)v11;
  *(_OWORD *)(v10 + 16) = v17;
  *(_QWORD *)(v10 + 32) = *(_QWORD *)(v11 + 32);
  *(_BYTE *)(v10 + 40) = *(_BYTE *)(v11 + 40);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 32))(v10 + *(int *)(v12 + 28), v11 + *(int *)(v12 + 28), v6);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
  return a1;
}

uint64_t getEnumTagSinglePayload for NCProtoSuggestionAdvertisementDidChangeEvent()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_242A1EE44(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return __swift_get_extra_inhabitant_index_29Tm(a1, a2, a3, &demangling cache variable for type metadata for NCProtoSuggestionAdvertisement?);
}

uint64_t storeEnumTagSinglePayload for NCProtoSuggestionAdvertisementDidChangeEvent()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_242A1EE5C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  return __swift_store_extra_inhabitant_index_30Tm(a1, a2, a3, a4, &demangling cache variable for type metadata for NCProtoSuggestionAdvertisement?);
}

void type metadata completion function for NCProtoSuggestionAdvertisementDidChangeEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  type metadata completion function for NCProtoSuggestionAdvertisementDidChangeEvent(a1, a2, a3, &lazy cache variable for type metadata for NCProtoSuggestionAdvertisement?, (void (*)(uint64_t))type metadata accessor for NCProtoSuggestionAdvertisement);
}

uint64_t *initializeBufferWithCopyOfBuffer for NCProtoLagunaConnectionRequest(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v3;
  uint64_t v4;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(char *, char *, uint64_t);
  uint64_t v13;
  char *v14;
  char *v15;
  int *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  char *v23;
  char *v24;

  v3 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  v4 = *a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    v7 = (uint64_t *)(v4 + ((v3 + 16) & ~(unint64_t)v3));
    swift_retain();
  }
  else
  {
    v7 = a1;
    v8 = a2[2];
    a1[1] = a2[1];
    a1[2] = v8;
    v9 = a2[4];
    a1[3] = a2[3];
    a1[4] = v9;
    v10 = *(int *)(a3 + 40);
    v24 = (char *)a1 + v10;
    v23 = (char *)a2 + v10;
    a1[5] = a2[5];
    v11 = type metadata accessor for UnknownStorage();
    v12 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v12(v24, v23, v11);
    v13 = *(int *)(a3 + 44);
    v14 = (char *)v7 + v13;
    v15 = (char *)a2 + v13;
    v16 = (int *)type metadata accessor for NCProtoCallState(0);
    v17 = *((_QWORD *)v16 - 1);
    if ((*(unsigned int (**)(char *, uint64_t, int *))(v17 + 48))(v15, 1, v16))
    {
      v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NCProtoCallState?);
      memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
    }
    else
    {
      v12(v14, v15, v11);
      v14[v16[5]] = v15[v16[5]];
      v14[v16[6]] = v15[v16[6]];
      v19 = v16[7];
      v20 = &v14[v19];
      v21 = &v15[v19];
      *(_QWORD *)v20 = *(_QWORD *)v21;
      *((_WORD *)v20 + 4) = *((_WORD *)v21 + 4);
      v14[v16[8]] = v15[v16[8]];
      (*(void (**)(char *, _QWORD, uint64_t, int *))(v17 + 56))(v14, 0, 1, v16);
    }
  }
  return v7;
}

uint64_t destroy for NCProtoLagunaConnectionRequest(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  void (*v9)(uint64_t, uint64_t);

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(a2 + 40);
  v5 = type metadata accessor for UnknownStorage();
  v9 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8);
  v9(v4, v5);
  v6 = a1 + *(int *)(a2 + 44);
  v7 = type metadata accessor for NCProtoCallState(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v6, 1, v7);
  if (!(_DWORD)result)
    return ((uint64_t (*)(uint64_t, uint64_t))v9)(v6, v5);
  return result;
}

_QWORD *initializeWithCopy for NCProtoLagunaConnectionRequest(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(char *, char *, uint64_t);
  void (*v11)(char *, char *, uint64_t);
  uint64_t v12;
  char *v13;
  char *v14;
  int *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  char *v22;
  char *v23;

  v5 = a2[1];
  *a1 = *a2;
  a1[1] = v5;
  v6 = a2[3];
  a1[2] = a2[2];
  a1[3] = v6;
  v7 = a2[5];
  v8 = *(int *)(a3 + 40);
  v23 = (char *)a1 + v8;
  v22 = (char *)a2 + v8;
  a1[4] = a2[4];
  a1[5] = v7;
  v9 = type metadata accessor for UnknownStorage();
  v10 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v11 = v10;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v10(v23, v22, v9);
  v12 = *(int *)(a3 + 44);
  v13 = (char *)a1 + v12;
  v14 = (char *)a2 + v12;
  v15 = (int *)type metadata accessor for NCProtoCallState(0);
  v16 = *((_QWORD *)v15 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v16 + 48))(v14, 1, v15))
  {
    v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NCProtoCallState?);
    memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
  }
  else
  {
    v11(v13, v14, v9);
    v13[v15[5]] = v14[v15[5]];
    v13[v15[6]] = v14[v15[6]];
    v18 = v15[7];
    v19 = &v13[v18];
    v20 = &v14[v18];
    *(_QWORD *)v19 = *(_QWORD *)v20;
    *((_WORD *)v19 + 4) = *((_WORD *)v20 + 4);
    v13[v15[8]] = v14[v15[8]];
    (*(void (**)(char *, _QWORD, uint64_t, int *))(v16 + 56))(v13, 0, 1, v15);
  }
  return a1;
}

_QWORD *assignWithCopy for NCProtoLagunaConnectionRequest(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(char *, char *, uint64_t);
  uint64_t v12;
  char *v13;
  char *v14;
  int *v15;
  uint64_t v16;
  uint64_t (*v17)(char *, uint64_t, int *);
  int v18;
  uint64_t v19;
  char *v20;
  char *v21;
  __int16 v22;
  uint64_t v23;
  uint64_t v25;
  char *v26;
  char *v27;
  __int16 v28;

  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = *(int *)(a3 + 40);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for UnknownStorage();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(void (**)(char *, char *, uint64_t))(v10 + 24);
  v11(v7, v8, v9);
  v12 = *(int *)(a3 + 44);
  v13 = (char *)a1 + v12;
  v14 = (char *)a2 + v12;
  v15 = (int *)type metadata accessor for NCProtoCallState(0);
  v16 = *((_QWORD *)v15 - 1);
  v17 = *(uint64_t (**)(char *, uint64_t, int *))(v16 + 48);
  LODWORD(v8) = v17(v13, 1, v15);
  v18 = v17(v14, 1, v15);
  if (!(_DWORD)v8)
  {
    if (!v18)
    {
      v11(v13, v14, v9);
      v13[v15[5]] = v14[v15[5]];
      v13[v15[6]] = v14[v15[6]];
      v25 = v15[7];
      v26 = &v13[v25];
      v27 = &v14[v25];
      v28 = *((_WORD *)v27 + 4);
      *(_QWORD *)v26 = *(_QWORD *)v27;
      *((_WORD *)v26 + 4) = v28;
      v13[v15[8]] = v14[v15[8]];
      return a1;
    }
    outlined destroy of NCProtoContactInfo((uint64_t)v13, type metadata accessor for NCProtoCallState);
    goto LABEL_6;
  }
  if (v18)
  {
LABEL_6:
    v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NCProtoCallState?);
    memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v13, v14, v9);
  v13[v15[5]] = v14[v15[5]];
  v13[v15[6]] = v14[v15[6]];
  v19 = v15[7];
  v20 = &v13[v19];
  v21 = &v14[v19];
  v22 = *((_WORD *)v21 + 4);
  *(_QWORD *)v20 = *(_QWORD *)v21;
  *((_WORD *)v20 + 4) = v22;
  v13[v15[8]] = v14[v15[8]];
  (*(void (**)(char *, _QWORD, uint64_t, int *))(v16 + 56))(v13, 0, 1, v15);
  return a1;
}

_OWORD *initializeWithTake for NCProtoLagunaConnectionRequest(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  __int128 v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  void (*v11)(char *, char *, uint64_t);
  uint64_t v12;
  char *v13;
  char *v14;
  int *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  a1[2] = a2[2];
  v7 = *(int *)(a3 + 40);
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = type metadata accessor for UnknownStorage();
  v11 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 32);
  v11(v8, v9, v10);
  v12 = *(int *)(a3 + 44);
  v13 = (char *)a1 + v12;
  v14 = (char *)a2 + v12;
  v15 = (int *)type metadata accessor for NCProtoCallState(0);
  v16 = *((_QWORD *)v15 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v16 + 48))(v14, 1, v15))
  {
    v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NCProtoCallState?);
    memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
  }
  else
  {
    v11(v13, v14, v10);
    v13[v15[5]] = v14[v15[5]];
    v13[v15[6]] = v14[v15[6]];
    v18 = v15[7];
    v19 = &v13[v18];
    v20 = &v14[v18];
    *(_QWORD *)v19 = *(_QWORD *)v20;
    *((_WORD *)v19 + 4) = *((_WORD *)v20 + 4);
    v13[v15[8]] = v14[v15[8]];
    (*(void (**)(char *, _QWORD, uint64_t, int *))(v16 + 56))(v13, 0, 1, v15);
  }
  return a1;
}

_QWORD *assignWithTake for NCProtoLagunaConnectionRequest(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(char *, char *, uint64_t);
  uint64_t v12;
  char *v13;
  char *v14;
  int *v15;
  uint64_t v16;
  uint64_t (*v17)(char *, uint64_t, int *);
  int v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v24;
  char *v25;
  char *v26;

  *a1 = *a2;
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRelease();
  a1[3] = a2[3];
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  swift_bridgeObjectRelease();
  a1[5] = a2[5];
  swift_bridgeObjectRelease();
  v6 = *(int *)(a3 + 40);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for UnknownStorage();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(void (**)(char *, char *, uint64_t))(v10 + 40);
  v11(v7, v8, v9);
  v12 = *(int *)(a3 + 44);
  v13 = (char *)a1 + v12;
  v14 = (char *)a2 + v12;
  v15 = (int *)type metadata accessor for NCProtoCallState(0);
  v16 = *((_QWORD *)v15 - 1);
  v17 = *(uint64_t (**)(char *, uint64_t, int *))(v16 + 48);
  LODWORD(v8) = v17(v13, 1, v15);
  v18 = v17(v14, 1, v15);
  if (!(_DWORD)v8)
  {
    if (!v18)
    {
      v11(v13, v14, v9);
      v13[v15[5]] = v14[v15[5]];
      v13[v15[6]] = v14[v15[6]];
      v24 = v15[7];
      v25 = &v13[v24];
      v26 = &v14[v24];
      *(_QWORD *)v25 = *(_QWORD *)v26;
      *((_WORD *)v25 + 4) = *((_WORD *)v26 + 4);
      v13[v15[8]] = v14[v15[8]];
      return a1;
    }
    outlined destroy of NCProtoContactInfo((uint64_t)v13, type metadata accessor for NCProtoCallState);
    goto LABEL_6;
  }
  if (v18)
  {
LABEL_6:
    v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NCProtoCallState?);
    memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v13, v14, v9);
  v13[v15[5]] = v14[v15[5]];
  v13[v15[6]] = v14[v15[6]];
  v19 = v15[7];
  v20 = &v13[v19];
  v21 = &v14[v19];
  *(_QWORD *)v20 = *(_QWORD *)v21;
  *((_WORD *)v20 + 4) = *((_WORD *)v21 + 4);
  v13[v15[8]] = v14[v15[8]];
  (*(void (**)(char *, _QWORD, uint64_t, int *))(v16 + 56))(v13, 0, 1, v15);
  return a1;
}

uint64_t getEnumTagSinglePayload for NCProtoLagunaConnectionRequest()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_242A1F854(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)a1;
    if (*(_QWORD *)a1 >= 0xFFFFFFFFuLL)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for UnknownStorage();
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
    {
      v10 = v8;
      v11 = *(int *)(a3 + 40);
    }
    else
    {
      v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NCProtoCallState?);
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a3 + 44);
    }
    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(v9 + 48))(&a1[v11], a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for NCProtoLagunaConnectionRequest()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

char *sub_242A1F904(char *result, uint64_t a2, int a3, uint64_t a4)
{
  char *v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)result = (a2 - 1);
  }
  else
  {
    v8 = type metadata accessor for UnknownStorage();
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      v10 = v8;
      v11 = *(int *)(a4 + 40);
    }
    else
    {
      v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NCProtoCallState?);
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a4 + 44);
    }
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56))(&v5[v11], a2, a2, v10);
  }
  return result;
}

void type metadata completion function for NCProtoLagunaConnectionRequest()
{
  unint64_t v0;
  unint64_t v1;

  type metadata accessor for UnknownStorage();
  if (v0 <= 0x3F)
  {
    type metadata accessor for NCProtoContactInfo?(319, &lazy cache variable for type metadata for NCProtoCallState?, (void (*)(uint64_t))type metadata accessor for NCProtoCallState);
    if (v1 <= 0x3F)
      swift_initStructMetadata();
  }
}

uint64_t getEnumTagSinglePayload for NCProtoLagunaConnectionResponse()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for NCProtoLagunaConnectionResponse()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t getEnumTagSinglePayload for NCProtoDeviceLaunchedEvent()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for NCProtoDeviceLaunchedEvent()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t getEnumTagSinglePayload for NCProtoTVLaunchedEvent()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for NCProtoTVLaunchedEvent()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t getEnumTagSinglePayload for NCProtoCancelAddMemberEvent()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for NCProtoCancelAddMemberEvent()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t getEnumTagSinglePayload for NCProtoEndLagunaSessionEvent()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for NCProtoEndLagunaSessionEvent()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t getEnumTagSinglePayload for NCProtoPolicyInfoUpdatedEvent()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for NCProtoPolicyInfoUpdatedEvent()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

_QWORD *initializeBufferWithCopyOfBuffer for NCProtoAddMemberRequest(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  _QWORD *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(uint64_t, uint64_t, uint64_t);
  uint64_t v15;
  char *v16;
  uint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v4 = (_QWORD *)a1;
  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v19 = *a2;
    *v4 = *a2;
    v4 = (_QWORD *)(v19 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = a2[1];
    *(_QWORD *)a1 = *a2;
    *(_QWORD *)(a1 + 8) = v7;
    v8 = a2[2];
    v9 = a2[4];
    *(_QWORD *)(a1 + 24) = a2[3];
    *(_QWORD *)(a1 + 32) = v9;
    *(_BYTE *)(a1 + 40) = *((_BYTE *)a2 + 40);
    v10 = *(int *)(a3 + 28);
    v11 = a1 + v10;
    v12 = (uint64_t)a2 + v10;
    *(_QWORD *)(a1 + 16) = v8;
    v13 = type metadata accessor for UnknownStorage();
    v14 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v14(v11, v12, v13);
    v15 = *(int *)(a3 + 32);
    v16 = (char *)v4 + v15;
    v17 = (uint64_t *)((char *)a2 + v15);
    v18 = v17[1];
    if (v18 >> 60 == 15)
    {
      *(_OWORD *)v16 = *(_OWORD *)v17;
    }
    else
    {
      v20 = *v17;
      outlined copy of Data._Representation(*v17, v17[1]);
      *(_QWORD *)v16 = v20;
      *((_QWORD *)v16 + 1) = v18;
    }
  }
  return v4;
}

uint64_t destroy for NCProtoAddMemberRequest(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t *v7;
  unint64_t v8;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(a2 + 28);
  v5 = type metadata accessor for UnknownStorage();
  result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  v7 = (uint64_t *)(a1 + *(int *)(a2 + 32));
  v8 = v7[1];
  if (v8 >> 60 != 15)
    return outlined consume of Data._Representation(*v7, v8);
  return result;
}

uint64_t initializeWithCopy for NCProtoAddMemberRequest(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  unint64_t v17;
  uint64_t v18;

  v6 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v6;
  v7 = *(_QWORD *)(a2 + 16);
  v8 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v8;
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  v9 = *(int *)(a3 + 28);
  v10 = a1 + v9;
  v11 = a2 + v9;
  *(_QWORD *)(a1 + 16) = v7;
  v12 = type metadata accessor for UnknownStorage();
  v13 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v13(v10, v11, v12);
  v14 = *(int *)(a3 + 32);
  v15 = a1 + v14;
  v16 = (uint64_t *)(a2 + v14);
  v17 = v16[1];
  if (v17 >> 60 == 15)
  {
    *(_OWORD *)v15 = *(_OWORD *)v16;
  }
  else
  {
    v18 = *v16;
    outlined copy of Data._Representation(*v16, v16[1]);
    *(_QWORD *)v15 = v18;
    *(_QWORD *)(v15 + 8) = v17;
  }
  return a1;
}

uint64_t assignWithCopy for NCProtoAddMemberRequest(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = *(_QWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = v6;
  v7 = *(int *)(a3 + 28);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 24))(v8, v9, v10);
  v11 = *(int *)(a3 + 32);
  v12 = (uint64_t *)(a1 + v11);
  v13 = (uint64_t *)(a2 + v11);
  v14 = *(_QWORD *)(a2 + v11 + 8);
  if (*(_QWORD *)(a1 + v11 + 8) >> 60 != 15)
  {
    if (v14 >> 60 != 15)
    {
      v16 = *v13;
      outlined copy of Data._Representation(v16, v14);
      v17 = *v12;
      v18 = v12[1];
      *v12 = v16;
      v12[1] = v14;
      outlined consume of Data._Representation(v17, v18);
      return a1;
    }
    outlined destroy of Data((uint64_t)v12);
    goto LABEL_6;
  }
  if (v14 >> 60 == 15)
  {
LABEL_6:
    *(_OWORD *)v12 = *(_OWORD *)v13;
    return a1;
  }
  v15 = *v13;
  outlined copy of Data._Representation(v15, v14);
  *v12 = v15;
  v12[1] = v14;
  return a1;
}

uint64_t initializeWithTake for NCProtoAddMemberRequest(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  v7 = *(int *)(a3 + 28);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v8, v9, v10);
  *(_OWORD *)(a1 + *(int *)(a3 + 32)) = *(_OWORD *)(a2 + *(int *)(a3 + 32));
  return a1;
}

uint64_t assignWithTake for NCProtoAddMemberRequest(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;

  v6 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v6;
  swift_bridgeObjectRelease();
  v7 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v7;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  v8 = *(int *)(a3 + 28);
  v9 = a1 + v8;
  v10 = a2 + v8;
  v11 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 40))(v9, v10, v11);
  v12 = *(int *)(a3 + 32);
  v13 = (uint64_t *)(a1 + v12);
  v14 = (uint64_t *)(a2 + v12);
  v15 = *(_QWORD *)(a1 + v12 + 8);
  if (v15 >> 60 != 15)
  {
    v16 = v14[1];
    if (v16 >> 60 != 15)
    {
      v17 = *v13;
      *v13 = *v14;
      v13[1] = v16;
      outlined consume of Data._Representation(v17, v15);
      return a1;
    }
    outlined destroy of Data((uint64_t)v13);
  }
  *(_OWORD *)v13 = *(_OWORD *)v14;
  return a1;
}

uint64_t getEnumTagSinglePayload for NCProtoAddMemberRequest()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t __swift_get_extra_inhabitant_index_27Tm(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for UnknownStorage();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 28), a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for NCProtoAddMemberRequest()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t __swift_store_extra_inhabitant_index_28Tm(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    v7 = type metadata accessor for UnknownStorage();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 28), a2, a2, v7);
  }
  return result;
}

uint64_t type metadata completion function for NCProtoAddMemberRequest()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for UnknownStorage();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for NCProtoAddMemberRequest.NearbyConversationPullContext()
{
  return &type metadata for NCProtoAddMemberRequest.NearbyConversationPullContext;
}

uint64_t *initializeBufferWithCopyOfBuffer for NCProtoContactUpdateEvent(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  void (*v13)(char *, char *, uint64_t);
  uint64_t v14;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v14 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v14 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = *a2;
    v8 = a2[1];
    outlined copy of Data._Representation(*a2, v8);
    *a1 = v7;
    a1[1] = v8;
    a1[2] = a2[2];
    v9 = *(int *)(a3 + 24);
    v10 = (char *)a1 + v9;
    v11 = (char *)a2 + v9;
    v12 = type metadata accessor for UnknownStorage();
    v13 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 16);
    swift_bridgeObjectRetain();
    v13(v10, v11, v12);
  }
  return a1;
}

uint64_t destroy for NCProtoContactUpdateEvent(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  outlined consume of Data._Representation(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
  swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(a2 + 24);
  v5 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
}

uint64_t *initializeWithCopy for NCProtoContactUpdateEvent(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  void (*v12)(char *, char *, uint64_t);

  v6 = *a2;
  v7 = a2[1];
  outlined copy of Data._Representation(*a2, v7);
  *a1 = v6;
  a1[1] = v7;
  a1[2] = a2[2];
  v8 = *(int *)(a3 + 24);
  v9 = (char *)a1 + v8;
  v10 = (char *)a2 + v8;
  v11 = type metadata accessor for UnknownStorage();
  v12 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16);
  swift_bridgeObjectRetain();
  v12(v9, v10, v11);
  return a1;
}

uint64_t *assignWithCopy for NCProtoContactUpdateEvent(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;

  v6 = *a2;
  v7 = a2[1];
  outlined copy of Data._Representation(*a2, v7);
  v8 = *a1;
  v9 = a1[1];
  *a1 = v6;
  a1[1] = v7;
  outlined consume of Data._Representation(v8, v9);
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v10 = *(int *)(a3 + 24);
  v11 = (char *)a1 + v10;
  v12 = (char *)a2 + v10;
  v13 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 24))(v11, v12, v13);
  return a1;
}

uint64_t initializeWithTake for NCProtoContactUpdateEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v4 = *(int *)(a3 + 24);
  v5 = a1 + v4;
  v6 = a2 + v4;
  v7 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

uint64_t *assignWithTake for NCProtoContactUpdateEvent(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;

  v6 = *a1;
  v7 = a1[1];
  *(_OWORD *)a1 = *(_OWORD *)a2;
  outlined consume of Data._Representation(v6, v7);
  a1[2] = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRelease();
  v8 = *(int *)(a3 + 24);
  v9 = (char *)a1 + v8;
  v10 = a2 + v8;
  v11 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 40))(v9, v10, v11);
  return a1;
}

uint64_t getEnumTagSinglePayload for NCProtoAddMemberResponse()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t __swift_get_extra_inhabitant_index_15Tm(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 16);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for UnknownStorage();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 24), a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for NCProtoAddMemberResponse()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t __swift_store_extra_inhabitant_index_16Tm(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 16) = (a2 - 1);
  }
  else
  {
    v7 = type metadata accessor for UnknownStorage();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 24), a2, a2, v7);
  }
  return result;
}

uint64_t type metadata completion function for NCProtoContactUpdateEvent()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for UnknownStorage();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for NCProtoPullLagunaSessionToTVRequest(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  void (*v12)(char *, char *, uint64_t);
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;

  v4 = a1;
  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v16 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v16 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    v8 = *(int *)(a3 + 20);
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = type metadata accessor for UnknownStorage();
    v12 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16);
    swift_bridgeObjectRetain();
    v12(v9, v10, v11);
    v13 = *(int *)(a3 + 24);
    v14 = (char *)v4 + v13;
    v15 = (char *)a2 + v13;
    *(_QWORD *)v14 = *(_QWORD *)v15;
    *((_WORD *)v14 + 4) = *((_WORD *)v15 + 4);
  }
  return v4;
}

_QWORD *initializeWithCopy for NCProtoPullLagunaSessionToTVRequest(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  void (*v11)(char *, char *, uint64_t);
  uint64_t v12;
  char *v13;
  char *v14;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  v7 = *(int *)(a3 + 20);
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = type metadata accessor for UnknownStorage();
  v11 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 16);
  swift_bridgeObjectRetain();
  v11(v8, v9, v10);
  v12 = *(int *)(a3 + 24);
  v13 = (char *)a1 + v12;
  v14 = (char *)a2 + v12;
  *(_QWORD *)v13 = *(_QWORD *)v14;
  *((_WORD *)v13 + 4) = *((_WORD *)v14 + 4);
  return a1;
}

_QWORD *assignWithCopy for NCProtoPullLagunaSessionToTVRequest(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  __int16 v13;

  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = *(int *)(a3 + 20);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 24))(v7, v8, v9);
  v10 = *(int *)(a3 + 24);
  v11 = (char *)a1 + v10;
  v12 = (char *)a2 + v10;
  v13 = *((_WORD *)v12 + 4);
  *(_QWORD *)v11 = *(_QWORD *)v12;
  *((_WORD *)v11 + 4) = v13;
  return a1;
}

_OWORD *initializeWithTake for NCProtoPullLagunaSessionToTVRequest(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;

  *a1 = *a2;
  v6 = *(int *)(a3 + 20);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v7, v8, v9);
  v10 = *(int *)(a3 + 24);
  v11 = (char *)a1 + v10;
  v12 = (char *)a2 + v10;
  *(_QWORD *)v11 = *(_QWORD *)v12;
  *((_WORD *)v11 + 4) = *((_WORD *)v12 + 4);
  return a1;
}

_QWORD *assignWithTake for NCProtoPullLagunaSessionToTVRequest(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  v7 = *(int *)(a3 + 20);
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 40))(v8, v9, v10);
  v11 = *(int *)(a3 + 24);
  v12 = (char *)a1 + v11;
  v13 = (char *)a2 + v11;
  *(_QWORD *)v12 = *(_QWORD *)v13;
  *((_WORD *)v12 + 4) = *((_WORD *)v13 + 4);
  return a1;
}

uint64_t getEnumTagSinglePayload for NCProtoPullLagunaSessionToTVRequest()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for NCProtoPullLagunaSessionToTVRequest()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t type metadata completion function for NCProtoPullLagunaSessionToTVRequest()
{
  return type metadata completion function for NCProtoPullLagunaSessionToTVRequest();
}

{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for UnknownStorage();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for NCProtoPullLagunaSessionToTVRequest.Reason()
{
  return &type metadata for NCProtoPullLagunaSessionToTVRequest.Reason;
}

uint64_t getEnumTagSinglePayload for NCProtoPullLagunaSessionToTVResponse()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for NCProtoPullLagunaSessionToTVResponse()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

_QWORD *initializeBufferWithCopyOfBuffer for NCProtoTransferActiveConversationRequest(_QWORD *a1, _QWORD *a2, int *a3)
{
  _QWORD *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  void (*v12)(char *, char *, uint64_t);
  uint64_t v13;
  uint64_t v14;

  v4 = a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v14 = *a2;
    *v4 = *a2;
    v4 = (_QWORD *)(v14 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    v8 = a3[5];
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = type metadata accessor for UnknownStorage();
    v12 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16);
    swift_bridgeObjectRetain();
    v12(v9, v10, v11);
    v13 = a3[7];
    *((_BYTE *)v4 + a3[6]) = *((_BYTE *)a2 + a3[6]);
    *((_BYTE *)v4 + v13) = *((_BYTE *)a2 + v13);
  }
  return v4;
}

_QWORD *initializeWithCopy for NCProtoTransferActiveConversationRequest(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  void (*v11)(char *, char *, uint64_t);
  uint64_t v12;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  v7 = a3[5];
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = type metadata accessor for UnknownStorage();
  v11 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 16);
  swift_bridgeObjectRetain();
  v11(v8, v9, v10);
  v12 = a3[7];
  *((_BYTE *)a1 + a3[6]) = *((_BYTE *)a2 + a3[6]);
  *((_BYTE *)a1 + v12) = *((_BYTE *)a2 + v12);
  return a1;
}

_QWORD *assignWithCopy for NCProtoTransferActiveConversationRequest(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;

  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = a3[5];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 24))(v7, v8, v9);
  *((_BYTE *)a1 + a3[6]) = *((_BYTE *)a2 + a3[6]);
  *((_BYTE *)a1 + a3[7]) = *((_BYTE *)a2 + a3[7]);
  return a1;
}

_OWORD *initializeWithTake for NCProtoTransferActiveConversationRequest(_OWORD *a1, _OWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;

  *a1 = *a2;
  v6 = a3[5];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v7, v8, v9);
  v10 = a3[7];
  *((_BYTE *)a1 + a3[6]) = *((_BYTE *)a2 + a3[6]);
  *((_BYTE *)a1 + v10) = *((_BYTE *)a2 + v10);
  return a1;
}

_QWORD *assignWithTake for NCProtoTransferActiveConversationRequest(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  v7 = a3[5];
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 40))(v8, v9, v10);
  v11 = a3[7];
  *((_BYTE *)a1 + a3[6]) = *((_BYTE *)a2 + a3[6]);
  *((_BYTE *)a1 + v11) = *((_BYTE *)a2 + v11);
  return a1;
}

uint64_t getEnumTagSinglePayload for NCProtoTransferActiveConversationRequest()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for NCProtoTransferActiveConversationRequest()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t type metadata completion function for NCProtoTransferActiveConversationRequest()
{
  return type metadata completion function for NCProtoTransferActiveConversationRequest();
}

{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for UnknownStorage();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t getEnumTagSinglePayload for NCProtoTransferActiveConversationResponse()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for NCProtoTransferActiveConversationResponse()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t getEnumTagSinglePayload for NCProtoStartLagunaSessionRequest()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for NCProtoStartLagunaSessionRequest()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

ValueMetadata *type metadata accessor for NCProtoStartLagunaSessionRequest.RecentCallFetchType()
{
  return &type metadata for NCProtoStartLagunaSessionRequest.RecentCallFetchType;
}

uint64_t *initializeBufferWithCopyOfBuffer for NCProtoCallInfo(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v20 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v20 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = type metadata accessor for UnknownStorage();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a3[5];
    v9 = a3[6];
    v10 = (uint64_t *)((char *)a1 + v8);
    v11 = (uint64_t *)((char *)a2 + v8);
    v12 = v11[1];
    *v10 = *v11;
    v10[1] = v12;
    v13 = (uint64_t *)((char *)a1 + v9);
    v14 = (uint64_t *)((char *)a2 + v9);
    v15 = v14[1];
    *v13 = *v14;
    v13[1] = v15;
    v16 = a3[7];
    v17 = (uint64_t *)((char *)a1 + v16);
    v18 = (uint64_t *)((char *)a2 + v16);
    v19 = v18[1];
    *v17 = *v18;
    v17[1] = v19;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t destroy for NCProtoCallInfo(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for NCProtoCallInfo(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;

  v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = a3[5];
  v8 = a3[6];
  v9 = (_QWORD *)(a1 + v7);
  v10 = (_QWORD *)(a2 + v7);
  v11 = v10[1];
  *v9 = *v10;
  v9[1] = v11;
  v12 = (_QWORD *)(a1 + v8);
  v13 = (_QWORD *)(a2 + v8);
  v14 = v13[1];
  *v12 = *v13;
  v12[1] = v14;
  v15 = a3[7];
  v16 = (_QWORD *)(a1 + v15);
  v17 = (_QWORD *)(a2 + v15);
  v18 = v17[1];
  *v16 = *v17;
  v16[1] = v18;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for NCProtoCallInfo(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;

  v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = a3[5];
  v8 = (_QWORD *)(a1 + v7);
  v9 = (_QWORD *)(a2 + v7);
  *v8 = *v9;
  v8[1] = v9[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v10 = a3[6];
  v11 = (_QWORD *)(a1 + v10);
  v12 = (_QWORD *)(a2 + v10);
  *v11 = *v12;
  v11[1] = v12[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v13 = a3[7];
  v14 = (_QWORD *)(a1 + v13);
  v15 = (_QWORD *)(a2 + v13);
  *v14 = *v15;
  v14[1] = v15[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t initializeWithTake for NCProtoCallInfo(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;

  v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = a3[6];
  *(_OWORD *)(a1 + a3[5]) = *(_OWORD *)(a2 + a3[5]);
  *(_OWORD *)(a1 + v7) = *(_OWORD *)(a2 + v7);
  *(_OWORD *)(a1 + a3[7]) = *(_OWORD *)(a2 + a3[7]);
  return a1;
}

uint64_t assignWithTake for NCProtoCallInfo(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;

  v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = a3[5];
  v8 = (_QWORD *)(a1 + v7);
  v9 = (uint64_t *)(a2 + v7);
  v11 = *v9;
  v10 = v9[1];
  *v8 = v11;
  v8[1] = v10;
  swift_bridgeObjectRelease();
  v12 = a3[6];
  v13 = (_QWORD *)(a1 + v12);
  v14 = (uint64_t *)(a2 + v12);
  v16 = *v14;
  v15 = v14[1];
  *v13 = v16;
  v13[1] = v15;
  swift_bridgeObjectRelease();
  v17 = a3[7];
  v18 = (_QWORD *)(a1 + v17);
  v19 = (uint64_t *)(a2 + v17);
  v21 = *v19;
  v20 = v19[1];
  *v18 = v21;
  v18[1] = v20;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for NCProtoCallInfo()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for NCProtoCallInfo()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t type metadata completion function for NCProtoCallInfo()
{
  return type metadata completion function for NCProtoCallInfo();
}

{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for UnknownStorage();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for NCProtoStartLagunaSessionResponse(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  void (*v11)(char *, char *, uint64_t);
  char *v13;

  v3 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  v4 = *a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    v5 = (uint64_t *)(v4 + ((v3 + 16) & ~(unint64_t)v3));
    swift_retain();
  }
  else
  {
    v5 = a1;
    v6 = a2[2];
    a1[1] = a2[1];
    a1[2] = v6;
    v7 = a2[4];
    a1[3] = a2[3];
    a1[4] = v7;
    v8 = *(int *)(a3 + 40);
    v13 = (char *)a1 + v8;
    v9 = (char *)a2 + v8;
    a1[5] = a2[5];
    v10 = type metadata accessor for UnknownStorage();
    v11 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v11(v13, v9, v10);
  }
  return v5;
}

uint64_t destroy for NCProtoStartLagunaSessionResponse(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(a2 + 40);
  v5 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
}

_QWORD *initializeWithCopy for NCProtoStartLagunaSessionResponse(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, char *, uint64_t);
  char *v12;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  v6 = a2[5];
  v7 = *(int *)(a3 + 40);
  v12 = (char *)a1 + v7;
  v8 = (char *)a2 + v7;
  a1[4] = a2[4];
  a1[5] = v6;
  v9 = type metadata accessor for UnknownStorage();
  v10 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v10(v12, v8, v9);
  return a1;
}

_QWORD *assignWithCopy for NCProtoStartLagunaSessionResponse(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;

  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = *(int *)(a3 + 40);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 24))(v7, v8, v9);
  return a1;
}

_OWORD *initializeWithTake for NCProtoStartLagunaSessionResponse(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  __int128 v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  a1[2] = a2[2];
  v5 = *(int *)(a3 + 40);
  v6 = (char *)a1 + v5;
  v7 = (char *)a2 + v5;
  v8 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(v6, v7, v8);
  return a1;
}

_QWORD *assignWithTake for NCProtoStartLagunaSessionResponse(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;

  *a1 = *a2;
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRelease();
  a1[3] = a2[3];
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  swift_bridgeObjectRelease();
  a1[5] = a2[5];
  swift_bridgeObjectRelease();
  v6 = *(int *)(a3 + 40);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 40))(v7, v8, v9);
  return a1;
}

uint64_t getEnumTagSinglePayload for NCProtoStartLagunaSessionResponse()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_242A215B0(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)a1;
    if (*(_QWORD *)a1 >= 0xFFFFFFFFuLL)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for UnknownStorage();
    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(&a1[*(int *)(a3 + 40)], a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for NCProtoStartLagunaSessionResponse()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

char *sub_242A21638(char *result, uint64_t a2, int a3, uint64_t a4)
{
  char *v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)result = (a2 - 1);
  }
  else
  {
    v7 = type metadata accessor for UnknownStorage();
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(&v5[*(int *)(a4 + 40)], a2, a2, v7);
  }
  return result;
}

uint64_t type metadata completion function for NCProtoStartLagunaSessionResponse()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for UnknownStorage();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for NCProtoStartConversationRequest(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v11 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v11 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = type metadata accessor for UnknownStorage();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = *(int *)(a3 + 20);
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    *(_QWORD *)v9 = *(_QWORD *)v10;
    *((_WORD *)v9 + 4) = *((_WORD *)v10 + 4);
  }
  return a1;
}

uint64_t initializeWithCopy for NCProtoStartConversationRequest(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  *(_QWORD *)v8 = *(_QWORD *)v9;
  *(_WORD *)(v8 + 8) = *(_WORD *)(v9 + 8);
  return a1;
}

uint64_t assignWithCopy for NCProtoStartConversationRequest(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int16 v10;

  v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = *(_WORD *)(v9 + 8);
  *(_QWORD *)v8 = *(_QWORD *)v9;
  *(_WORD *)(v8 + 8) = v10;
  return a1;
}

uint64_t initializeWithTake for NCProtoStartConversationRequest(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  *(_QWORD *)v8 = *(_QWORD *)v9;
  *(_WORD *)(v8 + 8) = *(_WORD *)(v9 + 8);
  return a1;
}

uint64_t assignWithTake for NCProtoStartConversationRequest(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  *(_QWORD *)v8 = *(_QWORD *)v9;
  *(_WORD *)(v8 + 8) = *(_WORD *)(v9 + 8);
  return a1;
}

uint64_t getEnumTagSinglePayload for NCProtoStartConversationRequest()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for NCProtoStartConversationRequest()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t type metadata completion function for NCProtoStartConversationRequest()
{
  return type metadata completion function for NCProtoStartConversationRequest();
}

{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for UnknownStorage();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t getEnumTagSinglePayload for NCProtoStartConversationResponse()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for NCProtoStartConversationResponse()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

_QWORD *initializeBufferWithCopyOfBuffer for NCProtoJoinActiveConversationRequest(_QWORD *a1, _QWORD *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v13 = *a2;
    *a1 = *a2;
    a1 = (_QWORD *)(v13 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = type metadata accessor for UnknownStorage();
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a3[5];
    v9 = a3[6];
    v10 = (_QWORD *)((char *)a1 + v8);
    v11 = (_QWORD *)((char *)a2 + v8);
    v12 = v11[1];
    *v10 = *v11;
    v10[1] = v12;
    *((_BYTE *)a1 + v9) = *((_BYTE *)a2 + v9);
    *((_BYTE *)a1 + a3[7]) = *((_BYTE *)a2 + a3[7]);
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t initializeWithCopy for NCProtoJoinActiveConversationRequest(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;

  v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = a3[5];
  v8 = a3[6];
  v9 = (_QWORD *)(a1 + v7);
  v10 = (_QWORD *)(a2 + v7);
  v11 = v10[1];
  *v9 = *v10;
  v9[1] = v11;
  *(_BYTE *)(a1 + v8) = *(_BYTE *)(a2 + v8);
  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for NCProtoJoinActiveConversationRequest(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;

  v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = a3[5];
  v8 = (_QWORD *)(a1 + v7);
  v9 = (_QWORD *)(a2 + v7);
  *v8 = *v9;
  v8[1] = v9[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + a3[6]) = *(_BYTE *)(a2 + a3[6]);
  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
  return a1;
}

uint64_t initializeWithTake for NCProtoJoinActiveConversationRequest(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;

  v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = a3[6];
  *(_OWORD *)(a1 + a3[5]) = *(_OWORD *)(a2 + a3[5]);
  *(_BYTE *)(a1 + v7) = *(_BYTE *)(a2 + v7);
  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
  return a1;
}

uint64_t assignWithTake for NCProtoJoinActiveConversationRequest(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = a3[5];
  v8 = (_QWORD *)(a1 + v7);
  v9 = (uint64_t *)(a2 + v7);
  v11 = *v9;
  v10 = v9[1];
  *v8 = v11;
  v8[1] = v10;
  swift_bridgeObjectRelease();
  v12 = a3[7];
  *(_BYTE *)(a1 + a3[6]) = *(_BYTE *)(a2 + a3[6]);
  *(_BYTE *)(a1 + v12) = *(_BYTE *)(a2 + v12);
  return a1;
}

uint64_t getEnumTagSinglePayload for NCProtoJoinActiveConversationRequest()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for NCProtoJoinActiveConversationRequest()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t type metadata completion function for NCProtoJoinActiveConversationRequest()
{
  return type metadata completion function for NCProtoCallInfo();
}

uint64_t getEnumTagSinglePayload for NCProtoJoinActiveConversationResponse()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for NCProtoJoinActiveConversationResponse()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t getEnumTagSinglePayload for NCProtoDeclineContinuityCallRequest()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for NCProtoDeclineContinuityCallRequest()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t type metadata completion function for NCProtoDeclineContinuityCallRequest()
{
  return type metadata completion function for NCProtoStartConversationRequest();
}

uint64_t getEnumTagSinglePayload for NCProtoDeclineContinuityCallResponse()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for NCProtoDeclineContinuityCallResponse()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t getEnumTagSinglePayload for NCProtoGetAddressableContactsRequest()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for NCProtoGetAddressableContactsRequest()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t *initializeBufferWithCopyOfBuffer for NCProtoGetAddressableContactsResponse(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v3;
  uint64_t v4;
  uint64_t *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  void (*v12)(char *, char *, uint64_t);
  uint64_t v13;
  char *v14;
  char *v15;

  v3 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  v4 = *a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    v7 = (uint64_t *)(v4 + ((v3 + 16) & ~(unint64_t)v3));
    swift_retain();
  }
  else
  {
    v7 = a1;
    v8 = *(int *)(a3 + 20);
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = type metadata accessor for UnknownStorage();
    v12 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16);
    swift_bridgeObjectRetain();
    v12(v9, v10, v11);
    v13 = *(int *)(a3 + 24);
    v14 = (char *)v7 + v13;
    v15 = (char *)a2 + v13;
    *(_QWORD *)v14 = *(_QWORD *)v15;
    v14[8] = v15[8];
  }
  return v7;
}

_QWORD *initializeWithCopy for NCProtoGetAddressableContactsResponse(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, char *, uint64_t);
  uint64_t v11;
  char *v12;
  char *v13;

  *a1 = *a2;
  v6 = *(int *)(a3 + 20);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for UnknownStorage();
  v10 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 16);
  swift_bridgeObjectRetain();
  v10(v7, v8, v9);
  v11 = *(int *)(a3 + 24);
  v12 = (char *)a1 + v11;
  v13 = (char *)a2 + v11;
  *(_QWORD *)v12 = *(_QWORD *)v13;
  v12[8] = v13[8];
  return a1;
}

_QWORD *assignWithCopy for NCProtoGetAddressableContactsResponse(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char v13;

  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = *(int *)(a3 + 20);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 24))(v7, v8, v9);
  v10 = *(int *)(a3 + 24);
  v11 = (char *)a1 + v10;
  v12 = (char *)a2 + v10;
  v13 = v12[8];
  *(_QWORD *)v11 = *(_QWORD *)v12;
  v11[8] = v13;
  return a1;
}

_QWORD *initializeWithTake for NCProtoGetAddressableContactsResponse(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;

  *a1 = *a2;
  v6 = *(int *)(a3 + 20);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v7, v8, v9);
  v10 = *(int *)(a3 + 24);
  v11 = (char *)a1 + v10;
  v12 = (char *)a2 + v10;
  *(_QWORD *)v11 = *(_QWORD *)v12;
  v11[8] = v12[8];
  return a1;
}

_QWORD *assignWithTake for NCProtoGetAddressableContactsResponse(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;

  *a1 = *a2;
  swift_bridgeObjectRelease();
  v6 = *(int *)(a3 + 20);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 40))(v7, v8, v9);
  v10 = *(int *)(a3 + 24);
  v11 = (char *)a1 + v10;
  v12 = (char *)a2 + v10;
  *(_QWORD *)v11 = *(_QWORD *)v12;
  v11[8] = v12[8];
  return a1;
}

uint64_t getEnumTagSinglePayload for NCProtoGetAddressableContactsResponse()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for NCProtoGetAddressableContactsResponse()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t type metadata completion function for NCProtoGetAddressableContactsResponse()
{
  return type metadata completion function for NCProtoPullLagunaSessionToTVRequest();
}

uint64_t getEnumTagSinglePayload for NCProtoGetImageForContactRequest()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for NCProtoGetImageForContactRequest()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t *initializeBufferWithCopyOfBuffer for NCProtoGetImageForContactResponse(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v12 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = type metadata accessor for UnknownStorage();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = *(int *)(a3 + 20);
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = *((_QWORD *)v10 + 1);
    if (v11 >> 60 == 15)
    {
      *(_OWORD *)v9 = *(_OWORD *)v10;
    }
    else
    {
      v13 = *(_QWORD *)v10;
      outlined copy of Data._Representation(*(_QWORD *)v10, *((_QWORD *)v10 + 1));
      *(_QWORD *)v9 = v13;
      *((_QWORD *)v9 + 1) = v11;
    }
  }
  return a1;
}

uint64_t destroy for NCProtoGetImageForContactResponse(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t *v6;
  unint64_t v7;

  v4 = type metadata accessor for UnknownStorage();
  result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  v6 = (uint64_t *)(a1 + *(int *)(a2 + 20));
  v7 = v6[1];
  if (v7 >> 60 != 15)
    return outlined consume of Data._Representation(*v6, v7);
  return result;
}

uint64_t initializeWithCopy for NCProtoGetImageForContactResponse(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  unint64_t v10;
  uint64_t v11;

  v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = (uint64_t *)(a2 + v7);
  v10 = v9[1];
  if (v10 >> 60 == 15)
  {
    *(_OWORD *)v8 = *(_OWORD *)v9;
  }
  else
  {
    v11 = *v9;
    outlined copy of Data._Representation(*v9, v9[1]);
    *(_QWORD *)v8 = v11;
    *(_QWORD *)(v8 + 8) = v10;
  }
  return a1;
}

uint64_t assignWithCopy for NCProtoGetImageForContactResponse(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;

  v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = (uint64_t *)(a1 + v7);
  v9 = (uint64_t *)(a2 + v7);
  v10 = *(_QWORD *)(a2 + v7 + 8);
  if (*(_QWORD *)(a1 + v7 + 8) >> 60 != 15)
  {
    if (v10 >> 60 != 15)
    {
      v12 = *v9;
      outlined copy of Data._Representation(v12, v10);
      v13 = *v8;
      v14 = v8[1];
      *v8 = v12;
      v8[1] = v10;
      outlined consume of Data._Representation(v13, v14);
      return a1;
    }
    outlined destroy of Data((uint64_t)v8);
    goto LABEL_6;
  }
  if (v10 >> 60 == 15)
  {
LABEL_6:
    *(_OWORD *)v8 = *(_OWORD *)v9;
    return a1;
  }
  v11 = *v9;
  outlined copy of Data._Representation(v11, v10);
  *v8 = v11;
  v8[1] = v10;
  return a1;
}

uint64_t assignWithTake for NCProtoGetImageForContactResponse(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;

  v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = (uint64_t *)(a1 + v7);
  v9 = (uint64_t *)(a2 + v7);
  v10 = *(_QWORD *)(a1 + v7 + 8);
  if (v10 >> 60 != 15)
  {
    v11 = v9[1];
    if (v11 >> 60 != 15)
    {
      v12 = *v8;
      *v8 = *v9;
      v8[1] = v11;
      outlined consume of Data._Representation(v12, v10);
      return a1;
    }
    outlined destroy of Data((uint64_t)v8);
  }
  *(_OWORD *)v8 = *(_OWORD *)v9;
  return a1;
}

uint64_t getEnumTagSinglePayload for NCProtoGetImageForContactResponse()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_242A2243C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  BOOL v10;
  unsigned int v11;

  v6 = type metadata accessor for UnknownStorage();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 20) + 8) >> 60;
  v10 = ((4 * (_DWORD)v9) & 0xC) == 0;
  v11 = ((4 * v9) & 0xC | (v9 >> 2)) ^ 0xF;
  if (v10)
    return 0;
  else
    return v11;
}

uint64_t storeEnumTagSinglePayload for NCProtoGetImageForContactResponse()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_242A224D0(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;
  _QWORD *v10;

  result = type metadata accessor for UnknownStorage();
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  v10 = (_QWORD *)(a1 + *(int *)(a4 + 20));
  *v10 = 0;
  v10[1] = (unint64_t)((~(_DWORD)a2 >> 2) & 3 | (4 * ~(_DWORD)a2)) << 60;
  return result;
}

uint64_t type metadata completion function for NCProtoGetImageForContactResponse()
{
  return type metadata completion function for NCProtoStartConversationRequest();
}

uint64_t getEnumTagSinglePayload for NCProtoAddConversationParticipantsRequest()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for NCProtoAddConversationParticipantsRequest()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t getEnumTagSinglePayload for NCProtoAddConversationParticipantsResponse()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for NCProtoAddConversationParticipantsResponse()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t *initializeBufferWithCopyOfBuffer for NCProtoEndedSessionEvent(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, char *, uint64_t);
  uint64_t v11;

  v3 = a1;
  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    v11 = *a2;
    *v3 = *a2;
    v3 = (uint64_t *)(v11 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    v5 = a2[1];
    *a1 = *a2;
    a1[1] = v5;
    v6 = *(int *)(a3 + 20);
    v7 = (char *)a1 + v6;
    v8 = (char *)a2 + v6;
    v9 = type metadata accessor for UnknownStorage();
    v10 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 16);
    swift_bridgeObjectRetain();
    v10(v7, v8, v9);
  }
  return v3;
}

uint64_t destroy for NCProtoEndedSessionEvent(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(a2 + 20);
  v5 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
}

_QWORD *initializeWithCopy for NCProtoEndedSessionEvent(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  void (*v9)(char *, char *, uint64_t);

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  v5 = *(int *)(a3 + 20);
  v6 = (char *)a1 + v5;
  v7 = (char *)a2 + v5;
  v8 = type metadata accessor for UnknownStorage();
  v9 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v8 - 8) + 16);
  swift_bridgeObjectRetain();
  v9(v6, v7, v8);
  return a1;
}

_QWORD *assignWithCopy for NCProtoEndedSessionEvent(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;

  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = *(int *)(a3 + 20);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 24))(v7, v8, v9);
  return a1;
}

_QWORD *assignWithTake for NCProtoEndedSessionEvent(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  v7 = *(int *)(a3 + 20);
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 40))(v8, v9, v10);
  return a1;
}

uint64_t getEnumTagSinglePayload for NCProtoGetCallDisplayDetailsRequest()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for NCProtoGetCallDisplayDetailsRequest()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t *initializeBufferWithCopyOfBuffer for NCProtoGetCallDisplayDetailsResponse(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  void (*v8)(uint64_t *, uint64_t *, uint64_t);
  uint64_t v9;
  char *v10;
  char *v11;
  int *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  void (*v28)(char *, _QWORD, uint64_t, int *);

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v15 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v15 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = type metadata accessor for UnknownStorage();
    v8 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16);
    v8(a1, a2, v7);
    v9 = *(int *)(a3 + 20);
    v10 = (char *)a1 + v9;
    v11 = (char *)a2 + v9;
    v12 = (int *)type metadata accessor for NCProtoCallInfo(0);
    v13 = *((_QWORD *)v12 - 1);
    if ((*(unsigned int (**)(char *, uint64_t, int *))(v13 + 48))(v11, 1, v12))
    {
      v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NCProtoCallInfo?);
      memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
    }
    else
    {
      v8((uint64_t *)v10, (uint64_t *)v11, v7);
      v16 = v12[5];
      v17 = &v10[v16];
      v18 = &v11[v16];
      v19 = *((_QWORD *)v18 + 1);
      *(_QWORD *)v17 = *(_QWORD *)v18;
      *((_QWORD *)v17 + 1) = v19;
      v20 = v12[6];
      v21 = &v10[v20];
      v22 = &v11[v20];
      v23 = *((_QWORD *)v22 + 1);
      *(_QWORD *)v21 = *(_QWORD *)v22;
      *((_QWORD *)v21 + 1) = v23;
      v24 = v12[7];
      v25 = &v10[v24];
      v26 = &v11[v24];
      v27 = *((_QWORD *)v26 + 1);
      *(_QWORD *)v25 = *(_QWORD *)v26;
      *((_QWORD *)v25 + 1) = v27;
      v28 = *(void (**)(char *, _QWORD, uint64_t, int *))(v13 + 56);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v28(v10, 0, 1, v12);
    }
  }
  return a1;
}

uint64_t destroy for NCProtoGetCallDisplayDetailsResponse(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t);
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  v4 = type metadata accessor for UnknownStorage();
  v5 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8);
  v5(a1, v4);
  v6 = a1 + *(int *)(a2 + 20);
  v7 = type metadata accessor for NCProtoCallInfo(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v6, 1, v7);
  if (!(_DWORD)result)
  {
    v5(v6, v4);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t initializeWithCopy for NCProtoGetCallDisplayDetailsResponse(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  char *v9;
  char *v10;
  int *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  void (*v26)(char *, _QWORD, uint64_t, int *);

  v6 = type metadata accessor for UnknownStorage();
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16);
  v7(a1, a2, v6);
  v8 = *(int *)(a3 + 20);
  v9 = (char *)(a1 + v8);
  v10 = (char *)(a2 + v8);
  v11 = (int *)type metadata accessor for NCProtoCallInfo(0);
  v12 = *((_QWORD *)v11 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v12 + 48))(v10, 1, v11))
  {
    v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NCProtoCallInfo?);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
  }
  else
  {
    v7((uint64_t)v9, (uint64_t)v10, v6);
    v14 = v11[5];
    v15 = &v9[v14];
    v16 = &v10[v14];
    v17 = *((_QWORD *)v16 + 1);
    *(_QWORD *)v15 = *(_QWORD *)v16;
    *((_QWORD *)v15 + 1) = v17;
    v18 = v11[6];
    v19 = &v9[v18];
    v20 = &v10[v18];
    v21 = *((_QWORD *)v20 + 1);
    *(_QWORD *)v19 = *(_QWORD *)v20;
    *((_QWORD *)v19 + 1) = v21;
    v22 = v11[7];
    v23 = &v9[v22];
    v24 = &v10[v22];
    v25 = *((_QWORD *)v24 + 1);
    *(_QWORD *)v23 = *(_QWORD *)v24;
    *((_QWORD *)v23 + 1) = v25;
    v26 = *(void (**)(char *, _QWORD, uint64_t, int *))(v12 + 56);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v26(v9, 0, 1, v11);
  }
  return a1;
}

uint64_t assignWithCopy for NCProtoGetCallDisplayDetailsResponse(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t, uint64_t);
  uint64_t v9;
  char *v10;
  char *v11;
  int *v12;
  uint64_t v13;
  uint64_t (*v14)(char *, uint64_t, int *);
  int v15;
  int v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  char *v24;
  char *v25;
  void (*v26)(char *, _QWORD, uint64_t, int *);
  uint64_t v27;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  char *v36;
  char *v37;

  v6 = type metadata accessor for UnknownStorage();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 24);
  v8(a1, a2, v6);
  v9 = *(int *)(a3 + 20);
  v10 = (char *)(a1 + v9);
  v11 = (char *)(a2 + v9);
  v12 = (int *)type metadata accessor for NCProtoCallInfo(0);
  v13 = *((_QWORD *)v12 - 1);
  v14 = *(uint64_t (**)(char *, uint64_t, int *))(v13 + 48);
  v15 = v14(v10, 1, v12);
  v16 = v14(v11, 1, v12);
  if (!v15)
  {
    if (!v16)
    {
      v8((uint64_t)v10, (uint64_t)v11, v6);
      v29 = v12[5];
      v30 = &v10[v29];
      v31 = &v11[v29];
      *(_QWORD *)v30 = *(_QWORD *)v31;
      *((_QWORD *)v30 + 1) = *((_QWORD *)v31 + 1);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v32 = v12[6];
      v33 = &v10[v32];
      v34 = &v11[v32];
      *(_QWORD *)v33 = *(_QWORD *)v34;
      *((_QWORD *)v33 + 1) = *((_QWORD *)v34 + 1);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v35 = v12[7];
      v36 = &v10[v35];
      v37 = &v11[v35];
      *(_QWORD *)v36 = *(_QWORD *)v37;
      *((_QWORD *)v36 + 1) = *((_QWORD *)v37 + 1);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      return a1;
    }
    outlined destroy of NCProtoContactInfo((uint64_t)v10, type metadata accessor for NCProtoCallInfo);
    goto LABEL_6;
  }
  if (v16)
  {
LABEL_6:
    v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NCProtoCallInfo?);
    memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v27 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v10, v11, v6);
  v17 = v12[5];
  v18 = &v10[v17];
  v19 = &v11[v17];
  *(_QWORD *)v18 = *(_QWORD *)v19;
  *((_QWORD *)v18 + 1) = *((_QWORD *)v19 + 1);
  v20 = v12[6];
  v21 = &v10[v20];
  v22 = &v11[v20];
  *(_QWORD *)v21 = *(_QWORD *)v22;
  *((_QWORD *)v21 + 1) = *((_QWORD *)v22 + 1);
  v23 = v12[7];
  v24 = &v10[v23];
  v25 = &v11[v23];
  *(_QWORD *)v24 = *(_QWORD *)v25;
  *((_QWORD *)v24 + 1) = *((_QWORD *)v25 + 1);
  v26 = *(void (**)(char *, _QWORD, uint64_t, int *))(v13 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v26(v10, 0, 1, v12);
  return a1;
}

uint64_t initializeWithTake for NCProtoGetCallDisplayDetailsResponse(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  char *v9;
  char *v10;
  int *v11;
  uint64_t v12;
  uint64_t v13;

  v6 = type metadata accessor for UnknownStorage();
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32);
  v7(a1, a2, v6);
  v8 = *(int *)(a3 + 20);
  v9 = (char *)(a1 + v8);
  v10 = (char *)(a2 + v8);
  v11 = (int *)type metadata accessor for NCProtoCallInfo(0);
  v12 = *((_QWORD *)v11 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v12 + 48))(v10, 1, v11))
  {
    v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NCProtoCallInfo?);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
  }
  else
  {
    v7((uint64_t)v9, (uint64_t)v10, v6);
    *(_OWORD *)&v9[v11[5]] = *(_OWORD *)&v10[v11[5]];
    *(_OWORD *)&v9[v11[6]] = *(_OWORD *)&v10[v11[6]];
    *(_OWORD *)&v9[v11[7]] = *(_OWORD *)&v10[v11[7]];
    (*(void (**)(char *, _QWORD, uint64_t, int *))(v12 + 56))(v9, 0, 1, v11);
  }
  return a1;
}

uint64_t assignWithTake for NCProtoGetCallDisplayDetailsResponse(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t, uint64_t);
  uint64_t v9;
  char *v10;
  char *v11;
  int *v12;
  uint64_t v13;
  uint64_t (*v14)(char *, uint64_t, int *);
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;

  v6 = type metadata accessor for UnknownStorage();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 40);
  v8(a1, a2, v6);
  v9 = *(int *)(a3 + 20);
  v10 = (char *)(a1 + v9);
  v11 = (char *)(a2 + v9);
  v12 = (int *)type metadata accessor for NCProtoCallInfo(0);
  v13 = *((_QWORD *)v12 - 1);
  v14 = *(uint64_t (**)(char *, uint64_t, int *))(v13 + 48);
  v15 = v14(v10, 1, v12);
  v16 = v14(v11, 1, v12);
  if (!v15)
  {
    if (!v16)
    {
      v8((uint64_t)v10, (uint64_t)v11, v6);
      v19 = v12[5];
      v20 = &v10[v19];
      v21 = &v11[v19];
      v23 = *(_QWORD *)v21;
      v22 = *((_QWORD *)v21 + 1);
      *(_QWORD *)v20 = v23;
      *((_QWORD *)v20 + 1) = v22;
      swift_bridgeObjectRelease();
      v24 = v12[6];
      v25 = &v10[v24];
      v26 = &v11[v24];
      v28 = *(_QWORD *)v26;
      v27 = *((_QWORD *)v26 + 1);
      *(_QWORD *)v25 = v28;
      *((_QWORD *)v25 + 1) = v27;
      swift_bridgeObjectRelease();
      v29 = v12[7];
      v30 = &v10[v29];
      v31 = &v11[v29];
      v33 = *(_QWORD *)v31;
      v32 = *((_QWORD *)v31 + 1);
      *(_QWORD *)v30 = v33;
      *((_QWORD *)v30 + 1) = v32;
      swift_bridgeObjectRelease();
      return a1;
    }
    outlined destroy of NCProtoContactInfo((uint64_t)v10, type metadata accessor for NCProtoCallInfo);
    goto LABEL_6;
  }
  if (v16)
  {
LABEL_6:
    v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NCProtoCallInfo?);
    memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v10, v11, v6);
  *(_OWORD *)&v10[v12[5]] = *(_OWORD *)&v11[v12[5]];
  *(_OWORD *)&v10[v12[6]] = *(_OWORD *)&v11[v12[6]];
  *(_OWORD *)&v10[v12[7]] = *(_OWORD *)&v11[v12[7]];
  (*(void (**)(char *, _QWORD, uint64_t, int *))(v13 + 56))(v10, 0, 1, v12);
  return a1;
}

uint64_t getEnumTagSinglePayload for NCProtoGetCallDisplayDetailsResponse()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_242A2302C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return __swift_get_extra_inhabitant_index_29Tm(a1, a2, a3, &demangling cache variable for type metadata for NCProtoCallInfo?);
}

uint64_t storeEnumTagSinglePayload for NCProtoGetCallDisplayDetailsResponse()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_242A23044(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  return __swift_store_extra_inhabitant_index_30Tm(a1, a2, a3, a4, &demangling cache variable for type metadata for NCProtoCallInfo?);
}

void type metadata completion function for NCProtoGetCallDisplayDetailsResponse(uint64_t a1, uint64_t a2, uint64_t a3)
{
  type metadata completion function for NCProtoSuggestionAdvertisementDidChangeEvent(a1, a2, a3, &lazy cache variable for type metadata for NCProtoCallInfo?, (void (*)(uint64_t))type metadata accessor for NCProtoCallInfo);
}

_QWORD *initializeBufferWithCopyOfBuffer for NCProtoCallState(_QWORD *a1, _QWORD *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v13 = *a2;
    *a1 = *a2;
    a1 = (_QWORD *)(v13 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = type metadata accessor for UnknownStorage();
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a3[6];
    *((_BYTE *)a1 + a3[5]) = *((_BYTE *)a2 + a3[5]);
    *((_BYTE *)a1 + v8) = *((_BYTE *)a2 + v8);
    v9 = a3[7];
    v10 = a3[8];
    v11 = (char *)a1 + v9;
    v12 = (char *)a2 + v9;
    *(_QWORD *)v11 = *(_QWORD *)v12;
    *((_WORD *)v11 + 4) = *((_WORD *)v12 + 4);
    *((_BYTE *)a1 + v10) = *((_BYTE *)a2 + v10);
  }
  return a1;
}

uint64_t initializeWithCopy for NCProtoCallState(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = a3[6];
  *(_BYTE *)(a1 + a3[5]) = *(_BYTE *)(a2 + a3[5]);
  *(_BYTE *)(a1 + v7) = *(_BYTE *)(a2 + v7);
  v8 = a3[7];
  v9 = a3[8];
  v10 = a1 + v8;
  v11 = a2 + v8;
  *(_QWORD *)v10 = *(_QWORD *)v11;
  *(_WORD *)(v10 + 8) = *(_WORD *)(v11 + 8);
  *(_BYTE *)(a1 + v9) = *(_BYTE *)(a2 + v9);
  return a1;
}

uint64_t assignWithCopy for NCProtoCallState(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int16 v10;

  v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  *(_BYTE *)(a1 + a3[5]) = *(_BYTE *)(a2 + a3[5]);
  *(_BYTE *)(a1 + a3[6]) = *(_BYTE *)(a2 + a3[6]);
  v7 = a3[7];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = *(_WORD *)(v9 + 8);
  *(_QWORD *)v8 = *(_QWORD *)v9;
  *(_WORD *)(v8 + 8) = v10;
  *(_BYTE *)(a1 + a3[8]) = *(_BYTE *)(a2 + a3[8]);
  return a1;
}

uint64_t initializeWithTake for NCProtoCallState(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = a3[6];
  *(_BYTE *)(a1 + a3[5]) = *(_BYTE *)(a2 + a3[5]);
  *(_BYTE *)(a1 + v7) = *(_BYTE *)(a2 + v7);
  v8 = a3[7];
  v9 = a3[8];
  v10 = a1 + v8;
  v11 = a2 + v8;
  *(_QWORD *)v10 = *(_QWORD *)v11;
  *(_WORD *)(v10 + 8) = *(_WORD *)(v11 + 8);
  *(_BYTE *)(a1 + v9) = *(_BYTE *)(a2 + v9);
  return a1;
}

uint64_t assignWithTake for NCProtoCallState(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = a3[6];
  *(_BYTE *)(a1 + a3[5]) = *(_BYTE *)(a2 + a3[5]);
  *(_BYTE *)(a1 + v7) = *(_BYTE *)(a2 + v7);
  v8 = a3[7];
  v9 = a3[8];
  v10 = a1 + v8;
  v11 = a2 + v8;
  *(_QWORD *)v10 = *(_QWORD *)v11;
  *(_WORD *)(v10 + 8) = *(_WORD *)(v11 + 8);
  *(_BYTE *)(a1 + v9) = *(_BYTE *)(a2 + v9);
  return a1;
}

uint64_t getEnumTagSinglePayload for NCProtoCallState()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_242A2334C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unsigned int v9;
  int v10;

  v6 = type metadata accessor for UnknownStorage();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(unsigned __int8 *)(a1 + *(int *)(a3 + 20));
  if (v9 >= 2)
    v10 = ((v9 + 2147483646) & 0x7FFFFFFF) - 1;
  else
    v10 = -2;
  if (v10 < 0)
    v10 = -1;
  return (v10 + 1);
}

uint64_t storeEnumTagSinglePayload for NCProtoCallState()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_242A233F0(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for UnknownStorage();
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_BYTE *)(a1 + *(int *)(a4 + 20)) = a2 + 2;
  return result;
}

uint64_t type metadata completion function for NCProtoCallState()
{
  return type metadata completion function for NCProtoContinuityCall();
}

uint64_t *initializeBufferWithCopyOfBuffer for NCProtoCallStateRequest(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v13 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v13 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = *a2;
    v8 = a2[1];
    outlined copy of Data._Representation(*a2, v8);
    *a1 = v7;
    a1[1] = v8;
    v9 = *(int *)(a3 + 20);
    v10 = (char *)a1 + v9;
    v11 = (char *)a2 + v9;
    v12 = type metadata accessor for UnknownStorage();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 16))(v10, v11, v12);
  }
  return a1;
}

uint64_t *initializeWithCopy for NCProtoCallStateRequest(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;

  v6 = *a2;
  v7 = a2[1];
  outlined copy of Data._Representation(*a2, v7);
  *a1 = v6;
  a1[1] = v7;
  v8 = *(int *)(a3 + 20);
  v9 = (char *)a1 + v8;
  v10 = (char *)a2 + v8;
  v11 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v9, v10, v11);
  return a1;
}

uint64_t *assignWithCopy for NCProtoCallStateRequest(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;

  v6 = *a2;
  v7 = a2[1];
  outlined copy of Data._Representation(*a2, v7);
  v8 = *a1;
  v9 = a1[1];
  *a1 = v6;
  a1[1] = v7;
  outlined consume of Data._Representation(v8, v9);
  v10 = *(int *)(a3 + 20);
  v11 = (char *)a1 + v10;
  v12 = (char *)a2 + v10;
  v13 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 24))(v11, v12, v13);
  return a1;
}

_OWORD *initializeWithTake for NCProtoEndedSessionEvent(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;

  *a1 = *a2;
  v4 = *(int *)(a3 + 20);
  v5 = (char *)a1 + v4;
  v6 = (char *)a2 + v4;
  v7 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

uint64_t *assignWithTake for NCProtoCallStateRequest(uint64_t *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;

  v6 = *a1;
  v7 = a1[1];
  *(_OWORD *)a1 = *a2;
  outlined consume of Data._Representation(v6, v7);
  v8 = *(int *)(a3 + 20);
  v9 = (char *)a1 + v8;
  v10 = (char *)a2 + v8;
  v11 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 40))(v9, v10, v11);
  return a1;
}

uint64_t getEnumTagSinglePayload for NCProtoCallStateRequest()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_242A23768(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 12)
  {
    v4 = *(_QWORD *)(a1 + 8) >> 60;
    if (((4 * (_DWORD)v4) & 0xC) != 0)
      return 16 - ((4 * (_DWORD)v4) & 0xC | (v4 >> 2));
    else
      return 0;
  }
  else
  {
    v8 = type metadata accessor for UnknownStorage();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 20), a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for NCProtoCallStateRequest()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

char *sub_242A237FC(char *result, uint64_t a2, int a3, uint64_t a4)
{
  char *v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 12)
  {
    *(_QWORD *)result = 0;
    *((_QWORD *)result + 1) = (unint64_t)(((-(int)a2 >> 2) & 3) - 4 * (_DWORD)a2) << 60;
  }
  else
  {
    v7 = type metadata accessor for UnknownStorage();
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(&v5[*(int *)(a4 + 20)], a2, a2, v7);
  }
  return result;
}

uint64_t type metadata completion function for NCProtoCallStateRequest()
{
  return type metadata completion function for NCProtoEndedSessionEvent();
}

uint64_t *initializeBufferWithCopyOfBuffer for NCProtoCallStateResponse(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  void (*v8)(uint64_t *, uint64_t *, uint64_t);
  uint64_t v9;
  char *v10;
  char *v11;
  int *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v15 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v15 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = type metadata accessor for UnknownStorage();
    v8 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16);
    v8(a1, a2, v7);
    v9 = *(int *)(a3 + 20);
    v10 = (char *)a1 + v9;
    v11 = (char *)a2 + v9;
    v12 = (int *)type metadata accessor for NCProtoCallState(0);
    v13 = *((_QWORD *)v12 - 1);
    if ((*(unsigned int (**)(char *, uint64_t, int *))(v13 + 48))(v11, 1, v12))
    {
      v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NCProtoCallState?);
      memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
    }
    else
    {
      v8((uint64_t *)v10, (uint64_t *)v11, v7);
      v10[v12[5]] = v11[v12[5]];
      v10[v12[6]] = v11[v12[6]];
      v16 = v12[7];
      v17 = &v10[v16];
      v18 = &v11[v16];
      *(_QWORD *)v17 = *(_QWORD *)v18;
      *((_WORD *)v17 + 4) = *((_WORD *)v18 + 4);
      v10[v12[8]] = v11[v12[8]];
      (*(void (**)(char *, _QWORD, uint64_t, int *))(v13 + 56))(v10, 0, 1, v12);
    }
  }
  return a1;
}

uint64_t destroy for NCProtoCallStateResponse(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  void (*v8)(uint64_t, uint64_t);

  v4 = type metadata accessor for UnknownStorage();
  v8 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8);
  v8(a1, v4);
  v5 = a1 + *(int *)(a2 + 20);
  v6 = type metadata accessor for NCProtoCallState(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 48))(v5, 1, v6);
  if (!(_DWORD)result)
    return ((uint64_t (*)(uint64_t, uint64_t))v8)(v5, v4);
  return result;
}

uint64_t initializeWithCopy for NCProtoCallStateResponse(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  char *v9;
  char *v10;
  int *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;

  v6 = type metadata accessor for UnknownStorage();
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16);
  v7(a1, a2, v6);
  v8 = *(int *)(a3 + 20);
  v9 = (char *)(a1 + v8);
  v10 = (char *)(a2 + v8);
  v11 = (int *)type metadata accessor for NCProtoCallState(0);
  v12 = *((_QWORD *)v11 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v12 + 48))(v10, 1, v11))
  {
    v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NCProtoCallState?);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
  }
  else
  {
    v7((uint64_t)v9, (uint64_t)v10, v6);
    v9[v11[5]] = v10[v11[5]];
    v9[v11[6]] = v10[v11[6]];
    v14 = v11[7];
    v15 = &v9[v14];
    v16 = &v10[v14];
    *(_QWORD *)v15 = *(_QWORD *)v16;
    *((_WORD *)v15 + 4) = *((_WORD *)v16 + 4);
    v9[v11[8]] = v10[v11[8]];
    (*(void (**)(char *, _QWORD, uint64_t, int *))(v12 + 56))(v9, 0, 1, v11);
  }
  return a1;
}

uint64_t assignWithCopy for NCProtoCallStateResponse(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t, uint64_t);
  uint64_t v9;
  _BYTE *v10;
  _BYTE *v11;
  int *v12;
  uint64_t v13;
  uint64_t (*v14)(_BYTE *, uint64_t, int *);
  int v15;
  int v16;
  uint64_t v17;
  char *v18;
  char *v19;
  __int16 v20;
  uint64_t v21;
  uint64_t v23;
  char *v24;
  char *v25;
  __int16 v26;

  v6 = type metadata accessor for UnknownStorage();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 24);
  v8(a1, a2, v6);
  v9 = *(int *)(a3 + 20);
  v10 = (_BYTE *)(a1 + v9);
  v11 = (_BYTE *)(a2 + v9);
  v12 = (int *)type metadata accessor for NCProtoCallState(0);
  v13 = *((_QWORD *)v12 - 1);
  v14 = *(uint64_t (**)(_BYTE *, uint64_t, int *))(v13 + 48);
  v15 = v14(v10, 1, v12);
  v16 = v14(v11, 1, v12);
  if (!v15)
  {
    if (!v16)
    {
      v8((uint64_t)v10, (uint64_t)v11, v6);
      v10[v12[5]] = v11[v12[5]];
      v10[v12[6]] = v11[v12[6]];
      v23 = v12[7];
      v24 = &v10[v23];
      v25 = &v11[v23];
      v26 = *((_WORD *)v25 + 4);
      *(_QWORD *)v24 = *(_QWORD *)v25;
      *((_WORD *)v24 + 4) = v26;
      v10[v12[8]] = v11[v12[8]];
      return a1;
    }
    outlined destroy of NCProtoContactInfo((uint64_t)v10, type metadata accessor for NCProtoCallState);
    goto LABEL_6;
  }
  if (v16)
  {
LABEL_6:
    v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NCProtoCallState?);
    memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
    return a1;
  }
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v7 + 16))(v10, v11, v6);
  v10[v12[5]] = v11[v12[5]];
  v10[v12[6]] = v11[v12[6]];
  v17 = v12[7];
  v18 = &v10[v17];
  v19 = &v11[v17];
  v20 = *((_WORD *)v19 + 4);
  *(_QWORD *)v18 = *(_QWORD *)v19;
  *((_WORD *)v18 + 4) = v20;
  v10[v12[8]] = v11[v12[8]];
  (*(void (**)(_BYTE *, _QWORD, uint64_t, int *))(v13 + 56))(v10, 0, 1, v12);
  return a1;
}

uint64_t initializeWithTake for NCProtoCallStateResponse(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  char *v9;
  char *v10;
  int *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;

  v6 = type metadata accessor for UnknownStorage();
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32);
  v7(a1, a2, v6);
  v8 = *(int *)(a3 + 20);
  v9 = (char *)(a1 + v8);
  v10 = (char *)(a2 + v8);
  v11 = (int *)type metadata accessor for NCProtoCallState(0);
  v12 = *((_QWORD *)v11 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v12 + 48))(v10, 1, v11))
  {
    v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NCProtoCallState?);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
  }
  else
  {
    v7((uint64_t)v9, (uint64_t)v10, v6);
    v9[v11[5]] = v10[v11[5]];
    v9[v11[6]] = v10[v11[6]];
    v14 = v11[7];
    v15 = &v9[v14];
    v16 = &v10[v14];
    *(_QWORD *)v15 = *(_QWORD *)v16;
    *((_WORD *)v15 + 4) = *((_WORD *)v16 + 4);
    v9[v11[8]] = v10[v11[8]];
    (*(void (**)(char *, _QWORD, uint64_t, int *))(v12 + 56))(v9, 0, 1, v11);
  }
  return a1;
}

uint64_t assignWithTake for NCProtoCallStateResponse(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t, uint64_t);
  uint64_t v9;
  _BYTE *v10;
  _BYTE *v11;
  int *v12;
  uint64_t v13;
  uint64_t (*v14)(_BYTE *, uint64_t, int *);
  int v15;
  int v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v22;
  char *v23;
  char *v24;

  v6 = type metadata accessor for UnknownStorage();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 40);
  v8(a1, a2, v6);
  v9 = *(int *)(a3 + 20);
  v10 = (_BYTE *)(a1 + v9);
  v11 = (_BYTE *)(a2 + v9);
  v12 = (int *)type metadata accessor for NCProtoCallState(0);
  v13 = *((_QWORD *)v12 - 1);
  v14 = *(uint64_t (**)(_BYTE *, uint64_t, int *))(v13 + 48);
  v15 = v14(v10, 1, v12);
  v16 = v14(v11, 1, v12);
  if (!v15)
  {
    if (!v16)
    {
      v8((uint64_t)v10, (uint64_t)v11, v6);
      v10[v12[5]] = v11[v12[5]];
      v10[v12[6]] = v11[v12[6]];
      v22 = v12[7];
      v23 = &v10[v22];
      v24 = &v11[v22];
      *(_QWORD *)v23 = *(_QWORD *)v24;
      *((_WORD *)v23 + 4) = *((_WORD *)v24 + 4);
      v10[v12[8]] = v11[v12[8]];
      return a1;
    }
    outlined destroy of NCProtoContactInfo((uint64_t)v10, type metadata accessor for NCProtoCallState);
    goto LABEL_6;
  }
  if (v16)
  {
LABEL_6:
    v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NCProtoCallState?);
    memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
    return a1;
  }
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v7 + 32))(v10, v11, v6);
  v10[v12[5]] = v11[v12[5]];
  v10[v12[6]] = v11[v12[6]];
  v17 = v12[7];
  v18 = &v10[v17];
  v19 = &v11[v17];
  *(_QWORD *)v18 = *(_QWORD *)v19;
  *((_WORD *)v18 + 4) = *((_WORD *)v19 + 4);
  v10[v12[8]] = v11[v12[8]];
  (*(void (**)(_BYTE *, _QWORD, uint64_t, int *))(v13 + 56))(v10, 0, 1, v12);
  return a1;
}

uint64_t getEnumTagSinglePayload for NCProtoCallStateResponse()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_242A24028(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return __swift_get_extra_inhabitant_index_29Tm(a1, a2, a3, &demangling cache variable for type metadata for NCProtoCallState?);
}

uint64_t __swift_get_extra_inhabitant_index_29Tm(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t);
  uint64_t v12;

  v8 = type metadata accessor for UnknownStorage();
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
    v12 = a1;
  }
  else
  {
    v10 = __swift_instantiateConcreteTypeFromMangledName(a4);
    v12 = a1 + *(int *)(a3 + 20);
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 48);
  }
  return v11(v12, a2, v10);
}

uint64_t storeEnumTagSinglePayload for NCProtoCallStateResponse()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_242A240B8(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  return __swift_store_extra_inhabitant_index_30Tm(a1, a2, a3, a4, &demangling cache variable for type metadata for NCProtoCallState?);
}

uint64_t __swift_store_extra_inhabitant_index_30Tm(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v14;

  v10 = type metadata accessor for UnknownStorage();
  v11 = *(_QWORD *)(v10 - 8);
  if (*(_DWORD *)(v11 + 84) == a3)
  {
    v12 = v10;
    v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v11 + 56);
    v14 = a1;
  }
  else
  {
    v12 = __swift_instantiateConcreteTypeFromMangledName(a5);
    v14 = a1 + *(int *)(a4 + 20);
    v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56);
  }
  return v13(v14, a2, a2, v12);
}

void type metadata completion function for NCProtoCallStateResponse(uint64_t a1, uint64_t a2, uint64_t a3)
{
  type metadata completion function for NCProtoSuggestionAdvertisementDidChangeEvent(a1, a2, a3, &lazy cache variable for type metadata for NCProtoCallState?, (void (*)(uint64_t))type metadata accessor for NCProtoCallState);
}

void type metadata completion function for NCProtoSuggestionAdvertisementDidChangeEvent(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t *a4, void (*a5)(uint64_t))
{
  unint64_t v7;
  unint64_t v8;

  type metadata accessor for UnknownStorage();
  if (v7 <= 0x3F)
  {
    type metadata accessor for NCProtoContactInfo?(319, a4, a5);
    if (v8 <= 0x3F)
      swift_initStructMetadata();
  }
}

_QWORD *initializeBufferWithCopyOfBuffer for NCProtoDeviceTokenRequest(_QWORD *a1, _QWORD *a2, int *a3)
{
  _QWORD *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  void (*v12)(char *, char *, uint64_t);
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  int *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  char *v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  _OWORD *v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  _QWORD *v36;
  _QWORD *v37;
  uint64_t v38;
  void (*v39)(_QWORD *, _QWORD, uint64_t, int *);
  uint64_t v40;
  char *v41;
  char *v42;
  int *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  char *v48;
  uint64_t v49;
  char *v50;
  char *v51;
  uint64_t v53;
  void (*v54)(char *, char *, uint64_t);
  char *v55;

  v4 = a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v19 = *a2;
    *v4 = *a2;
    v4 = (_QWORD *)(v19 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    v8 = a3[5];
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = type metadata accessor for UnknownStorage();
    v12 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16);
    swift_bridgeObjectRetain();
    v12(v9, v10, v11);
    v13 = a3[6];
    v14 = (_QWORD *)((char *)v4 + v13);
    v15 = (_QWORD *)((char *)a2 + v13);
    v16 = (int *)type metadata accessor for NCProtoMemberAssociationPrimaryInfo(0);
    v17 = *((_QWORD *)v16 - 1);
    if ((*(unsigned int (**)(_QWORD *, uint64_t, int *))(v17 + 48))(v15, 1, v16))
    {
      v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NCProtoMemberAssociationPrimaryInfo?);
      memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
    }
    else
    {
      *v14 = *v15;
      v20 = v16[5];
      v21 = (char *)v14 + v20;
      v53 = v11;
      v22 = (char *)v15 + v20;
      swift_bridgeObjectRetain();
      v23 = v22;
      v11 = v53;
      v54 = v12;
      v12(v21, v23, v53);
      v24 = v16[6];
      v25 = (_QWORD *)((char *)v14 + v24);
      v26 = (_QWORD *)((char *)v15 + v24);
      v27 = v26[1];
      *v25 = *v26;
      v25[1] = v27;
      v28 = v16[7];
      v55 = (char *)v14 + v28;
      v29 = (_OWORD *)((char *)v15 + v28);
      v30 = *(_QWORD *)((char *)v15 + v28 + 8);
      swift_bridgeObjectRetain();
      if (v30 >> 60 == 15)
      {
        *(_OWORD *)v55 = *v29;
      }
      else
      {
        v31 = *(_QWORD *)v29;
        outlined copy of Data._Representation(v31, v30);
        *(_QWORD *)v55 = v31;
        *((_QWORD *)v55 + 1) = v30;
      }
      v32 = v16[8];
      v33 = (char *)v14 + v32;
      v34 = (char *)v15 + v32;
      *(_QWORD *)v33 = *(_QWORD *)v34;
      v33[8] = v34[8];
      v35 = v16[9];
      v36 = (_QWORD *)((char *)v14 + v35);
      v37 = (_QWORD *)((char *)v15 + v35);
      v38 = v37[1];
      *v36 = *v37;
      v36[1] = v38;
      v39 = *(void (**)(_QWORD *, _QWORD, uint64_t, int *))(v17 + 56);
      swift_bridgeObjectRetain();
      v39(v14, 0, 1, v16);
      v12 = v54;
    }
    v40 = a3[7];
    v41 = (char *)v4 + v40;
    v42 = (char *)a2 + v40;
    v43 = (int *)type metadata accessor for NCProtoCallState(0);
    v44 = *((_QWORD *)v43 - 1);
    if ((*(unsigned int (**)(char *, uint64_t, int *))(v44 + 48))(v42, 1, v43))
    {
      v45 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NCProtoCallState?);
      memcpy(v41, v42, *(_QWORD *)(*(_QWORD *)(v45 - 8) + 64));
    }
    else
    {
      v12(v41, v42, v11);
      v41[v43[5]] = v42[v43[5]];
      v41[v43[6]] = v42[v43[6]];
      v46 = v43[7];
      v47 = &v41[v46];
      v48 = &v42[v46];
      *(_QWORD *)v47 = *(_QWORD *)v48;
      *((_WORD *)v47 + 4) = *((_WORD *)v48 + 4);
      v41[v43[8]] = v42[v43[8]];
      (*(void (**)(char *, _QWORD, uint64_t, int *))(v44 + 56))(v41, 0, 1, v43);
    }
    v49 = a3[9];
    *((_BYTE *)v4 + a3[8]) = *((_BYTE *)a2 + a3[8]);
    v50 = (char *)v4 + v49;
    v51 = (char *)a2 + v49;
    *(_QWORD *)v50 = *(_QWORD *)v51;
    *((_WORD *)v50 + 4) = *((_WORD *)v51 + 4);
  }
  return v4;
}

uint64_t destroy for NCProtoDeviceTokenRequest(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  void (*v13)(uint64_t, uint64_t);

  swift_bridgeObjectRelease();
  v4 = a1 + a2[5];
  v5 = type metadata accessor for UnknownStorage();
  v13 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8);
  v13(v4, v5);
  v6 = a1 + a2[6];
  v7 = type metadata accessor for NCProtoMemberAssociationPrimaryInfo(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v6, 1, v7))
  {
    swift_bridgeObjectRelease();
    v13(v6 + *(int *)(v7 + 20), v5);
    swift_bridgeObjectRelease();
    v8 = (uint64_t *)(v6 + *(int *)(v7 + 28));
    v9 = v8[1];
    if (v9 >> 60 != 15)
      outlined consume of Data._Representation(*v8, v9);
    swift_bridgeObjectRelease();
  }
  v10 = a1 + a2[7];
  v11 = type metadata accessor for NCProtoCallState(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 48))(v10, 1, v11);
  if (!(_DWORD)result)
    return ((uint64_t (*)(uint64_t, uint64_t))v13)(v10, v5);
  return result;
}

_QWORD *initializeWithCopy for NCProtoDeviceTokenRequest(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  void (*v11)(char *, char *, uint64_t);
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  int *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  char *v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  _OWORD *v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  _QWORD *v34;
  _QWORD *v35;
  uint64_t v36;
  void (*v37)(_QWORD *, _QWORD, uint64_t, int *);
  uint64_t v38;
  char *v39;
  char *v40;
  int *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  char *v48;
  char *v49;
  uint64_t v51;
  void (*v52)(char *, char *, uint64_t);
  char *v53;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  v7 = a3[5];
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = type metadata accessor for UnknownStorage();
  v11 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 16);
  swift_bridgeObjectRetain();
  v11(v8, v9, v10);
  v12 = a3[6];
  v13 = (_QWORD *)((char *)a1 + v12);
  v14 = (_QWORD *)((char *)a2 + v12);
  v15 = (int *)type metadata accessor for NCProtoMemberAssociationPrimaryInfo(0);
  v16 = *((_QWORD *)v15 - 1);
  if ((*(unsigned int (**)(_QWORD *, uint64_t, int *))(v16 + 48))(v14, 1, v15))
  {
    v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NCProtoMemberAssociationPrimaryInfo?);
    memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
  }
  else
  {
    *v13 = *v14;
    v18 = v15[5];
    v19 = (char *)v13 + v18;
    v51 = v10;
    v20 = (char *)v14 + v18;
    swift_bridgeObjectRetain();
    v21 = v20;
    v10 = v51;
    v52 = v11;
    v11(v19, v21, v51);
    v22 = v15[6];
    v23 = (_QWORD *)((char *)v13 + v22);
    v24 = (_QWORD *)((char *)v14 + v22);
    v25 = v24[1];
    *v23 = *v24;
    v23[1] = v25;
    v26 = v15[7];
    v53 = (char *)v13 + v26;
    v27 = (_OWORD *)((char *)v14 + v26);
    v28 = *(_QWORD *)((char *)v14 + v26 + 8);
    swift_bridgeObjectRetain();
    if (v28 >> 60 == 15)
    {
      *(_OWORD *)v53 = *v27;
    }
    else
    {
      v29 = *(_QWORD *)v27;
      outlined copy of Data._Representation(v29, v28);
      *(_QWORD *)v53 = v29;
      *((_QWORD *)v53 + 1) = v28;
    }
    v30 = v15[8];
    v31 = (char *)v13 + v30;
    v32 = (char *)v14 + v30;
    *(_QWORD *)v31 = *(_QWORD *)v32;
    v31[8] = v32[8];
    v33 = v15[9];
    v34 = (_QWORD *)((char *)v13 + v33);
    v35 = (_QWORD *)((char *)v14 + v33);
    v36 = v35[1];
    *v34 = *v35;
    v34[1] = v36;
    v37 = *(void (**)(_QWORD *, _QWORD, uint64_t, int *))(v16 + 56);
    swift_bridgeObjectRetain();
    v37(v13, 0, 1, v15);
    v11 = v52;
  }
  v38 = a3[7];
  v39 = (char *)a1 + v38;
  v40 = (char *)a2 + v38;
  v41 = (int *)type metadata accessor for NCProtoCallState(0);
  v42 = *((_QWORD *)v41 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v42 + 48))(v40, 1, v41))
  {
    v43 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NCProtoCallState?);
    memcpy(v39, v40, *(_QWORD *)(*(_QWORD *)(v43 - 8) + 64));
  }
  else
  {
    v11(v39, v40, v10);
    v39[v41[5]] = v40[v41[5]];
    v39[v41[6]] = v40[v41[6]];
    v44 = v41[7];
    v45 = &v39[v44];
    v46 = &v40[v44];
    *(_QWORD *)v45 = *(_QWORD *)v46;
    *((_WORD *)v45 + 4) = *((_WORD *)v46 + 4);
    v39[v41[8]] = v40[v41[8]];
    (*(void (**)(char *, _QWORD, uint64_t, int *))(v42 + 56))(v39, 0, 1, v41);
  }
  v47 = a3[9];
  *((_BYTE *)a1 + a3[8]) = *((_BYTE *)a2 + a3[8]);
  v48 = (char *)a1 + v47;
  v49 = (char *)a2 + v47;
  *(_QWORD *)v48 = *(_QWORD *)v49;
  *((_WORD *)v48 + 4) = *((_WORD *)v49 + 4);
  return a1;
}

_QWORD *assignWithCopy for NCProtoDeviceTokenRequest(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, char *);
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  int *v14;
  uint64_t v15;
  uint64_t (*v16)(_QWORD *, uint64_t, int *);
  int v17;
  int v18;
  uint64_t v19;
  char *v20;
  char *v21;
  void (*v22)(char *, char *, uint64_t);
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  char *v27;
  _OWORD *v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t *v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  _QWORD *v46;
  void (*v47)(_QWORD *, _QWORD, uint64_t, int *);
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  char *v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  _QWORD *v57;
  uint64_t v58;
  _BYTE *v59;
  _BYTE *v60;
  int *v61;
  uint64_t v62;
  uint64_t (*v63)(_BYTE *, uint64_t, int *);
  int v64;
  int v65;
  uint64_t v66;
  char *v67;
  char *v68;
  __int16 v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  char *v73;
  uint64_t v74;
  uint64_t v76;
  char *v77;
  char *v78;
  __int16 v79;
  void (*v80)(char *, char *);
  uint64_t v81;
  uint64_t v82;

  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = a3[5];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for UnknownStorage();
  v81 = *(_QWORD *)(v9 - 8);
  v82 = v9;
  v10 = *(void (**)(char *, char *))(v81 + 24);
  v10(v7, v8);
  v11 = a3[6];
  v12 = (_QWORD *)((char *)a1 + v11);
  v13 = (_QWORD *)((char *)a2 + v11);
  v14 = (int *)type metadata accessor for NCProtoMemberAssociationPrimaryInfo(0);
  v15 = *((_QWORD *)v14 - 1);
  v16 = *(uint64_t (**)(_QWORD *, uint64_t, int *))(v15 + 48);
  v17 = v16(v12, 1, v14);
  v18 = v16(v13, 1, v14);
  v80 = v10;
  if (!v17)
  {
    if (v18)
    {
      outlined destroy of NCProtoContactInfo((uint64_t)v12, type metadata accessor for NCProtoMemberAssociationPrimaryInfo);
      goto LABEL_7;
    }
    *v12 = *v13;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    ((void (*)(char *, char *, uint64_t))v10)((char *)v12 + v14[5], (char *)v13 + v14[5], v82);
    v31 = v14[6];
    v32 = (_QWORD *)((char *)v12 + v31);
    v33 = (_QWORD *)((char *)v13 + v31);
    *v32 = *v33;
    v32[1] = v33[1];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    v34 = v14[7];
    v35 = (_QWORD *)((char *)v12 + v34);
    v36 = (_QWORD *)((char *)v13 + v34);
    v37 = *(_QWORD *)((char *)v13 + v34 + 8);
    if (*(_QWORD *)((char *)v12 + v34 + 8) >> 60 == 15)
    {
      if (v37 >> 60 != 15)
      {
        v38 = *v36;
        outlined copy of Data._Representation(*v36, v37);
        *v35 = v38;
        v35[1] = v37;
LABEL_17:
        v51 = v14[8];
        v52 = (char *)v12 + v51;
        v53 = (char *)v13 + v51;
        v54 = *(_QWORD *)v53;
        v52[8] = v53[8];
        *(_QWORD *)v52 = v54;
        v55 = v14[9];
        v56 = (_QWORD *)((char *)v12 + v55);
        v57 = (_QWORD *)((char *)v13 + v55);
        *v56 = *v57;
        v56[1] = v57[1];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        goto LABEL_18;
      }
    }
    else
    {
      if (v37 >> 60 != 15)
      {
        v48 = *v36;
        outlined copy of Data._Representation(*v36, v37);
        v49 = *v35;
        v50 = v35[1];
        *v35 = v48;
        v35[1] = v37;
        outlined consume of Data._Representation(v49, v50);
        goto LABEL_17;
      }
      outlined destroy of Data((uint64_t)v35);
    }
    *(_OWORD *)v35 = *(_OWORD *)v36;
    goto LABEL_17;
  }
  if (v18)
  {
LABEL_7:
    v30 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NCProtoMemberAssociationPrimaryInfo?);
    memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v30 - 8) + 64));
    goto LABEL_18;
  }
  *v12 = *v13;
  v19 = v14[5];
  v20 = (char *)v12 + v19;
  v21 = (char *)v13 + v19;
  v22 = *(void (**)(char *, char *, uint64_t))(v81 + 16);
  swift_bridgeObjectRetain();
  v22(v20, v21, v82);
  v23 = v14[6];
  v24 = (_QWORD *)((char *)v12 + v23);
  v25 = (_QWORD *)((char *)v13 + v23);
  *v24 = *v25;
  v24[1] = v25[1];
  v26 = v14[7];
  v27 = (char *)v12 + v26;
  v28 = (_OWORD *)((char *)v13 + v26);
  v29 = *(_QWORD *)((char *)v13 + v26 + 8);
  swift_bridgeObjectRetain();
  if (v29 >> 60 == 15)
  {
    *(_OWORD *)v27 = *v28;
  }
  else
  {
    v39 = *(_QWORD *)v28;
    outlined copy of Data._Representation(v39, v29);
    *(_QWORD *)v27 = v39;
    *((_QWORD *)v27 + 1) = v29;
  }
  v40 = v14[8];
  v41 = (char *)v12 + v40;
  v42 = (char *)v13 + v40;
  v43 = *(_QWORD *)v42;
  v41[8] = v42[8];
  *(_QWORD *)v41 = v43;
  v44 = v14[9];
  v45 = (_QWORD *)((char *)v12 + v44);
  v46 = (_QWORD *)((char *)v13 + v44);
  *v45 = *v46;
  v45[1] = v46[1];
  v47 = *(void (**)(_QWORD *, _QWORD, uint64_t, int *))(v15 + 56);
  swift_bridgeObjectRetain();
  v47(v12, 0, 1, v14);
LABEL_18:
  v58 = a3[7];
  v59 = (char *)a1 + v58;
  v60 = (char *)a2 + v58;
  v61 = (int *)type metadata accessor for NCProtoCallState(0);
  v62 = *((_QWORD *)v61 - 1);
  v63 = *(uint64_t (**)(_BYTE *, uint64_t, int *))(v62 + 48);
  v64 = v63(v59, 1, v61);
  v65 = v63(v60, 1, v61);
  if (!v64)
  {
    if (!v65)
    {
      ((void (*)(_BYTE *, _BYTE *, uint64_t))v80)(v59, v60, v82);
      v59[v61[5]] = v60[v61[5]];
      v59[v61[6]] = v60[v61[6]];
      v76 = v61[7];
      v77 = &v59[v76];
      v78 = &v60[v76];
      v79 = *((_WORD *)v78 + 4);
      *(_QWORD *)v77 = *(_QWORD *)v78;
      *((_WORD *)v77 + 4) = v79;
      v59[v61[8]] = v60[v61[8]];
      goto LABEL_24;
    }
    outlined destroy of NCProtoContactInfo((uint64_t)v59, type metadata accessor for NCProtoCallState);
    goto LABEL_23;
  }
  if (v65)
  {
LABEL_23:
    v70 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NCProtoCallState?);
    memcpy(v59, v60, *(_QWORD *)(*(_QWORD *)(v70 - 8) + 64));
    goto LABEL_24;
  }
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v81 + 16))(v59, v60, v82);
  v59[v61[5]] = v60[v61[5]];
  v59[v61[6]] = v60[v61[6]];
  v66 = v61[7];
  v67 = &v59[v66];
  v68 = &v60[v66];
  v69 = *((_WORD *)v68 + 4);
  *(_QWORD *)v67 = *(_QWORD *)v68;
  *((_WORD *)v67 + 4) = v69;
  v59[v61[8]] = v60[v61[8]];
  (*(void (**)(_BYTE *, _QWORD, uint64_t, int *))(v62 + 56))(v59, 0, 1, v61);
LABEL_24:
  *((_BYTE *)a1 + a3[8]) = *((_BYTE *)a2 + a3[8]);
  v71 = a3[9];
  v72 = (char *)a1 + v71;
  v73 = (char *)a2 + v71;
  v74 = *(_QWORD *)v73;
  *((_WORD *)v72 + 4) = *((_WORD *)v73 + 4);
  *(_QWORD *)v72 = v74;
  return a1;
}

_OWORD *initializeWithTake for NCProtoDeviceTokenRequest(_OWORD *a1, _OWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, char *, uint64_t);
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  int *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  char *v21;
  char *v22;
  int *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  char *v30;
  char *v31;

  *a1 = *a2;
  v6 = a3[5];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for UnknownStorage();
  v10 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32);
  v10(v7, v8, v9);
  v11 = a3[6];
  v12 = (_QWORD *)((char *)a1 + v11);
  v13 = (_QWORD *)((char *)a2 + v11);
  v14 = (int *)type metadata accessor for NCProtoMemberAssociationPrimaryInfo(0);
  v15 = *((_QWORD *)v14 - 1);
  if ((*(unsigned int (**)(_QWORD *, uint64_t, int *))(v15 + 48))(v13, 1, v14))
  {
    v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NCProtoMemberAssociationPrimaryInfo?);
    memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
  }
  else
  {
    *v12 = *v13;
    v10((char *)v12 + v14[5], (char *)v13 + v14[5], v9);
    *(_OWORD *)((char *)v12 + v14[6]) = *(_OWORD *)((char *)v13 + v14[6]);
    *(_OWORD *)((char *)v12 + v14[7]) = *(_OWORD *)((char *)v13 + v14[7]);
    v17 = v14[8];
    v18 = (char *)v12 + v17;
    v19 = (char *)v13 + v17;
    v18[8] = v19[8];
    *(_QWORD *)v18 = *(_QWORD *)v19;
    *(_OWORD *)((char *)v12 + v14[9]) = *(_OWORD *)((char *)v13 + v14[9]);
    (*(void (**)(_QWORD *, _QWORD, uint64_t, int *))(v15 + 56))(v12, 0, 1, v14);
  }
  v20 = a3[7];
  v21 = (char *)a1 + v20;
  v22 = (char *)a2 + v20;
  v23 = (int *)type metadata accessor for NCProtoCallState(0);
  v24 = *((_QWORD *)v23 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v24 + 48))(v22, 1, v23))
  {
    v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NCProtoCallState?);
    memcpy(v21, v22, *(_QWORD *)(*(_QWORD *)(v25 - 8) + 64));
  }
  else
  {
    v10(v21, v22, v9);
    v21[v23[5]] = v22[v23[5]];
    v21[v23[6]] = v22[v23[6]];
    v26 = v23[7];
    v27 = &v21[v26];
    v28 = &v22[v26];
    *(_QWORD *)v27 = *(_QWORD *)v28;
    *((_WORD *)v27 + 4) = *((_WORD *)v28 + 4);
    v21[v23[8]] = v22[v23[8]];
    (*(void (**)(char *, _QWORD, uint64_t, int *))(v24 + 56))(v21, 0, 1, v23);
  }
  v29 = a3[9];
  *((_BYTE *)a1 + a3[8]) = *((_BYTE *)a2 + a3[8]);
  v30 = (char *)a1 + v29;
  v31 = (char *)a2 + v29;
  *(_QWORD *)v30 = *(_QWORD *)v31;
  *((_WORD *)v30 + 4) = *((_WORD *)v31 + 4);
  return a1;
}

_QWORD *assignWithTake for NCProtoDeviceTokenRequest(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  int *v14;
  uint64_t v15;
  uint64_t (*v16)(char *, uint64_t, int *);
  int v17;
  int v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  int *v26;
  uint64_t v27;
  uint64_t (*v28)(char *, uint64_t, int *);
  int v29;
  int v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  char *v37;
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t *v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  char *v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  char *v55;
  uint64_t v56;
  char *v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  void (*v61)(char *, char *, uint64_t);
  uint64_t v62;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  v7 = a3[5];
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = type metadata accessor for UnknownStorage();
  v62 = *(_QWORD *)(v10 - 8);
  v61 = *(void (**)(char *, char *, uint64_t))(v62 + 40);
  v61(v8, v9, v10);
  v11 = a3[6];
  v12 = (char *)a1 + v11;
  v13 = (char *)a2 + v11;
  v14 = (int *)type metadata accessor for NCProtoMemberAssociationPrimaryInfo(0);
  v15 = *((_QWORD *)v14 - 1);
  v16 = *(uint64_t (**)(char *, uint64_t, int *))(v15 + 48);
  v17 = v16(v12, 1, v14);
  v18 = v16(v13, 1, v14);
  if (v17)
  {
    if (!v18)
    {
      *(_QWORD *)v12 = *(_QWORD *)v13;
      (*(void (**)(char *, char *, uint64_t))(v62 + 32))(&v12[v14[5]], &v13[v14[5]], v10);
      *(_OWORD *)&v12[v14[6]] = *(_OWORD *)&v13[v14[6]];
      *(_OWORD *)&v12[v14[7]] = *(_OWORD *)&v13[v14[7]];
      v19 = v14[8];
      v20 = &v12[v19];
      v21 = &v13[v19];
      v20[8] = v21[8];
      *(_QWORD *)v20 = *(_QWORD *)v21;
      *(_OWORD *)&v12[v14[9]] = *(_OWORD *)&v13[v14[9]];
      (*(void (**)(char *, _QWORD, uint64_t, int *))(v15 + 56))(v12, 0, 1, v14);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v18)
  {
    outlined destroy of NCProtoContactInfo((uint64_t)v12, type metadata accessor for NCProtoMemberAssociationPrimaryInfo);
LABEL_6:
    v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NCProtoMemberAssociationPrimaryInfo?);
    memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
    goto LABEL_7;
  }
  *(_QWORD *)v12 = *(_QWORD *)v13;
  swift_bridgeObjectRelease();
  v61(&v12[v14[5]], &v13[v14[5]], v10);
  v39 = v14[6];
  v40 = &v12[v39];
  v41 = &v13[v39];
  v43 = *(_QWORD *)v41;
  v42 = *((_QWORD *)v41 + 1);
  *(_QWORD *)v40 = v43;
  *((_QWORD *)v40 + 1) = v42;
  swift_bridgeObjectRelease();
  v44 = v14[7];
  v45 = (uint64_t *)&v12[v44];
  v46 = (uint64_t *)&v13[v44];
  v47 = *(_QWORD *)&v12[v44 + 8];
  if (v47 >> 60 != 15)
  {
    v48 = v46[1];
    if (v48 >> 60 != 15)
    {
      v52 = *v45;
      *v45 = *v46;
      v45[1] = v48;
      outlined consume of Data._Representation(v52, v47);
      goto LABEL_20;
    }
    outlined destroy of Data((uint64_t)v45);
  }
  *(_OWORD *)v45 = *(_OWORD *)v46;
LABEL_20:
  v53 = v14[8];
  v54 = &v12[v53];
  v55 = &v13[v53];
  *(_QWORD *)v54 = *(_QWORD *)v55;
  v54[8] = v55[8];
  v56 = v14[9];
  v57 = &v12[v56];
  v58 = &v13[v56];
  v60 = *(_QWORD *)v58;
  v59 = *((_QWORD *)v58 + 1);
  *(_QWORD *)v57 = v60;
  *((_QWORD *)v57 + 1) = v59;
  swift_bridgeObjectRelease();
LABEL_7:
  v23 = a3[7];
  v24 = (char *)a1 + v23;
  v25 = (char *)a2 + v23;
  v26 = (int *)type metadata accessor for NCProtoCallState(0);
  v27 = *((_QWORD *)v26 - 1);
  v28 = *(uint64_t (**)(char *, uint64_t, int *))(v27 + 48);
  v29 = v28(v24, 1, v26);
  v30 = v28(v25, 1, v26);
  if (!v29)
  {
    if (!v30)
    {
      v61(v24, v25, v10);
      v24[v26[5]] = v25[v26[5]];
      v24[v26[6]] = v25[v26[6]];
      v49 = v26[7];
      v50 = &v24[v49];
      v51 = &v25[v49];
      *(_QWORD *)v50 = *(_QWORD *)v51;
      *((_WORD *)v50 + 4) = *((_WORD *)v51 + 4);
      v24[v26[8]] = v25[v26[8]];
      goto LABEL_13;
    }
    outlined destroy of NCProtoContactInfo((uint64_t)v24, type metadata accessor for NCProtoCallState);
    goto LABEL_12;
  }
  if (v30)
  {
LABEL_12:
    v34 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NCProtoCallState?);
    memcpy(v24, v25, *(_QWORD *)(*(_QWORD *)(v34 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v62 + 32))(v24, v25, v10);
  v24[v26[5]] = v25[v26[5]];
  v24[v26[6]] = v25[v26[6]];
  v31 = v26[7];
  v32 = &v24[v31];
  v33 = &v25[v31];
  *(_QWORD *)v32 = *(_QWORD *)v33;
  *((_WORD *)v32 + 4) = *((_WORD *)v33 + 4);
  v24[v26[8]] = v25[v26[8]];
  (*(void (**)(char *, _QWORD, uint64_t, int *))(v27 + 56))(v24, 0, 1, v26);
LABEL_13:
  v35 = a3[9];
  *((_BYTE *)a1 + a3[8]) = *((_BYTE *)a2 + a3[8]);
  v36 = (char *)a1 + v35;
  v37 = (char *)a2 + v35;
  *(_QWORD *)v36 = *(_QWORD *)v37;
  *((_WORD *)v36 + 4) = *((_WORD *)v37 + 4);
  return a1;
}

uint64_t getEnumTagSinglePayload for NCProtoDeviceTokenRequest()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_242A25380(uint64_t a1, uint64_t a2, int *a3)
{
  unint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for UnknownStorage();
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
    {
      v10 = v8;
      v11 = a3[5];
    }
    else
    {
      v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NCProtoMemberAssociationPrimaryInfo?);
      v9 = *(_QWORD *)(v12 - 8);
      if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
      {
        v10 = v12;
        v11 = a3[6];
      }
      else
      {
        v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NCProtoCallState?);
        v9 = *(_QWORD *)(v10 - 8);
        v11 = a3[7];
      }
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(a1 + v11, a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for NCProtoDeviceTokenRequest()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_242A25458(uint64_t result, uint64_t a2, int a3, int *a4)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    v8 = type metadata accessor for UnknownStorage();
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      v10 = v8;
      v11 = a4[5];
    }
    else
    {
      v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NCProtoMemberAssociationPrimaryInfo?);
      v9 = *(_QWORD *)(v12 - 8);
      if (*(_DWORD *)(v9 + 84) == a3)
      {
        v10 = v12;
        v11 = a4[6];
      }
      else
      {
        v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NCProtoCallState?);
        v9 = *(_QWORD *)(v10 - 8);
        v11 = a4[7];
      }
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(v5 + v11, a2, a2, v10);
  }
  return result;
}

void type metadata completion function for NCProtoDeviceTokenRequest()
{
  unint64_t v0;
  unint64_t v1;
  unint64_t v2;

  type metadata accessor for UnknownStorage();
  if (v0 <= 0x3F)
  {
    type metadata accessor for NCProtoContactInfo?(319, &lazy cache variable for type metadata for NCProtoMemberAssociationPrimaryInfo?, (void (*)(uint64_t))type metadata accessor for NCProtoMemberAssociationPrimaryInfo);
    if (v1 <= 0x3F)
    {
      type metadata accessor for NCProtoContactInfo?(319, &lazy cache variable for type metadata for NCProtoCallState?, (void (*)(uint64_t))type metadata accessor for NCProtoCallState);
      if (v2 <= 0x3F)
        swift_initStructMetadata();
    }
  }
}

ValueMetadata *type metadata accessor for NCProtoDeviceTokenRequest.ConversationHandoffType()
{
  return &type metadata for NCProtoDeviceTokenRequest.ConversationHandoffType;
}

uint64_t *initializeBufferWithCopyOfBuffer for NCProtoDeviceTokenResponse(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  void (*v12)(char *, char *, uint64_t);
  uint64_t v13;
  char *v14;
  char *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v4 = a1;
  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v17 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v17 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    v8 = *(int *)(a3 + 20);
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = type metadata accessor for UnknownStorage();
    v12 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16);
    swift_bridgeObjectRetain();
    v12(v9, v10, v11);
    v13 = *(int *)(a3 + 24);
    v14 = (char *)v4 + v13;
    v15 = (char *)a2 + v13;
    v16 = *((_QWORD *)v15 + 1);
    if (v16 >> 60 == 15)
    {
      *(_OWORD *)v14 = *(_OWORD *)v15;
    }
    else
    {
      v18 = *(_QWORD *)v15;
      outlined copy of Data._Representation(*(_QWORD *)v15, *((_QWORD *)v15 + 1));
      *(_QWORD *)v14 = v18;
      *((_QWORD *)v14 + 1) = v16;
    }
  }
  return v4;
}

uint64_t destroy for NCProtoDeviceTokenResponse(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t *v7;
  unint64_t v8;

  swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(a2 + 20);
  v5 = type metadata accessor for UnknownStorage();
  result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  v7 = (uint64_t *)(a1 + *(int *)(a2 + 24));
  v8 = v7[1];
  if (v8 >> 60 != 15)
    return outlined consume of Data._Representation(*v7, v8);
  return result;
}

_QWORD *initializeWithCopy for NCProtoDeviceTokenResponse(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  void (*v11)(char *, char *, uint64_t);
  uint64_t v12;
  char *v13;
  char *v14;
  unint64_t v15;
  uint64_t v16;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  v7 = *(int *)(a3 + 20);
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = type metadata accessor for UnknownStorage();
  v11 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 16);
  swift_bridgeObjectRetain();
  v11(v8, v9, v10);
  v12 = *(int *)(a3 + 24);
  v13 = (char *)a1 + v12;
  v14 = (char *)a2 + v12;
  v15 = *((_QWORD *)v14 + 1);
  if (v15 >> 60 == 15)
  {
    *(_OWORD *)v13 = *(_OWORD *)v14;
  }
  else
  {
    v16 = *(_QWORD *)v14;
    outlined copy of Data._Representation(*(_QWORD *)v14, *((_QWORD *)v14 + 1));
    *(_QWORD *)v13 = v16;
    *((_QWORD *)v13 + 1) = v15;
  }
  return a1;
}

_QWORD *assignWithCopy for NCProtoDeviceTokenResponse(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;

  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = *(int *)(a3 + 20);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 24))(v7, v8, v9);
  v10 = *(int *)(a3 + 24);
  v11 = (_QWORD *)((char *)a1 + v10);
  v12 = (_QWORD *)((char *)a2 + v10);
  v13 = *(_QWORD *)((char *)a2 + v10 + 8);
  if (*(_QWORD *)((char *)a1 + v10 + 8) >> 60 != 15)
  {
    if (v13 >> 60 != 15)
    {
      v15 = *v12;
      outlined copy of Data._Representation(v15, v13);
      v16 = *v11;
      v17 = v11[1];
      *v11 = v15;
      v11[1] = v13;
      outlined consume of Data._Representation(v16, v17);
      return a1;
    }
    outlined destroy of Data((uint64_t)v11);
    goto LABEL_6;
  }
  if (v13 >> 60 == 15)
  {
LABEL_6:
    *(_OWORD *)v11 = *(_OWORD *)v12;
    return a1;
  }
  v14 = *v12;
  outlined copy of Data._Representation(v14, v13);
  *v11 = v14;
  v11[1] = v13;
  return a1;
}

_OWORD *initializeWithTake for NCProtoDeviceTokenResponse(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;

  *a1 = *a2;
  v6 = *(int *)(a3 + 20);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v7, v8, v9);
  *(_OWORD *)((char *)a1 + *(int *)(a3 + 24)) = *(_OWORD *)((char *)a2 + *(int *)(a3 + 24));
  return a1;
}

_QWORD *assignWithTake for NCProtoDeviceTokenResponse(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  v7 = *(int *)(a3 + 20);
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 40))(v8, v9, v10);
  v11 = *(int *)(a3 + 24);
  v12 = (_QWORD *)((char *)a1 + v11);
  v13 = (_QWORD *)((char *)a2 + v11);
  v14 = *(_QWORD *)((char *)a1 + v11 + 8);
  if (v14 >> 60 != 15)
  {
    v15 = v13[1];
    if (v15 >> 60 != 15)
    {
      v16 = *v12;
      *v12 = *v13;
      v12[1] = v15;
      outlined consume of Data._Representation(v16, v14);
      return a1;
    }
    outlined destroy of Data((uint64_t)v12);
  }
  *(_OWORD *)v12 = *(_OWORD *)v13;
  return a1;
}

uint64_t getEnumTagSinglePayload for NCProtoDeviceTokenResponse()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t __swift_get_extra_inhabitant_index_13Tm(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for UnknownStorage();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 20), a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for NCProtoDeviceTokenResponse()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t __swift_store_extra_inhabitant_index_14Tm(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    v7 = type metadata accessor for UnknownStorage();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 20), a2, a2, v7);
  }
  return result;
}

uint64_t type metadata completion function for NCProtoDeviceTokenResponse()
{
  return type metadata completion function for NCProtoPullLagunaSessionToTVRequest();
}

uint64_t *initializeBufferWithCopyOfBuffer for NCProtoDisconnectRequest(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v16 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v16 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = *a2;
    v8 = a2[1];
    outlined copy of Data._Representation(*a2, v8);
    *a1 = v7;
    a1[1] = v8;
    v9 = a3[5];
    v10 = (char *)a1 + v9;
    v11 = (char *)a2 + v9;
    v12 = type metadata accessor for UnknownStorage();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 16))(v10, v11, v12);
    v13 = a3[7];
    *((_BYTE *)a1 + a3[6]) = *((_BYTE *)a2 + a3[6]);
    v14 = (char *)a1 + v13;
    v15 = (char *)a2 + v13;
    *(_QWORD *)v14 = *(_QWORD *)v15;
    *((_WORD *)v14 + 4) = *((_WORD *)v15 + 4);
  }
  return a1;
}

uint64_t destroy for NCProtoCallStateRequest(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  outlined consume of Data._Representation(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
  v4 = a1 + *(int *)(a2 + 20);
  v5 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
}

uint64_t *initializeWithCopy for NCProtoDisconnectRequest(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;

  v6 = *a2;
  v7 = a2[1];
  outlined copy of Data._Representation(*a2, v7);
  *a1 = v6;
  a1[1] = v7;
  v8 = a3[5];
  v9 = (char *)a1 + v8;
  v10 = (char *)a2 + v8;
  v11 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v9, v10, v11);
  v12 = a3[7];
  *((_BYTE *)a1 + a3[6]) = *((_BYTE *)a2 + a3[6]);
  v13 = (char *)a1 + v12;
  v14 = (char *)a2 + v12;
  *(_QWORD *)v13 = *(_QWORD *)v14;
  *((_WORD *)v13 + 4) = *((_WORD *)v14 + 4);
  return a1;
}

uint64_t *assignWithCopy for NCProtoDisconnectRequest(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  __int16 v17;

  v6 = *a2;
  v7 = a2[1];
  outlined copy of Data._Representation(*a2, v7);
  v8 = *a1;
  v9 = a1[1];
  *a1 = v6;
  a1[1] = v7;
  outlined consume of Data._Representation(v8, v9);
  v10 = a3[5];
  v11 = (char *)a1 + v10;
  v12 = (char *)a2 + v10;
  v13 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 24))(v11, v12, v13);
  *((_BYTE *)a1 + a3[6]) = *((_BYTE *)a2 + a3[6]);
  v14 = a3[7];
  v15 = (char *)a1 + v14;
  v16 = (char *)a2 + v14;
  v17 = *((_WORD *)v16 + 4);
  *(_QWORD *)v15 = *(_QWORD *)v16;
  *((_WORD *)v15 + 4) = v17;
  return a1;
}

_OWORD *initializeWithTake for NCProtoDisconnectRequest(_OWORD *a1, _OWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;

  *a1 = *a2;
  v6 = a3[5];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v7, v8, v9);
  v10 = a3[7];
  *((_BYTE *)a1 + a3[6]) = *((_BYTE *)a2 + a3[6]);
  v11 = (char *)a1 + v10;
  v12 = (char *)a2 + v10;
  *(_QWORD *)v11 = *(_QWORD *)v12;
  *((_WORD *)v11 + 4) = *((_WORD *)v12 + 4);
  return a1;
}

uint64_t *assignWithTake for NCProtoDisconnectRequest(uint64_t *a1, _OWORD *a2, int *a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;

  v6 = *a1;
  v7 = a1[1];
  *(_OWORD *)a1 = *a2;
  outlined consume of Data._Representation(v6, v7);
  v8 = a3[5];
  v9 = (char *)a1 + v8;
  v10 = (char *)a2 + v8;
  v11 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 40))(v9, v10, v11);
  v12 = a3[7];
  *((_BYTE *)a1 + a3[6]) = *((_BYTE *)a2 + a3[6]);
  v13 = (char *)a1 + v12;
  v14 = (char *)a2 + v12;
  *(_QWORD *)v13 = *(_QWORD *)v14;
  *((_WORD *)v13 + 4) = *((_WORD *)v14 + 4);
  return a1;
}

uint64_t getEnumTagSinglePayload for NCProtoDisconnectRequest()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_242A25F98(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unsigned int v9;
  int v10;

  v6 = type metadata accessor for UnknownStorage();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + *(int *)(a3 + 20), a2, v6);
  v9 = *(unsigned __int8 *)(a1 + *(int *)(a3 + 24));
  if (v9 >= 2)
    v10 = ((v9 + 2147483646) & 0x7FFFFFFF) - 1;
  else
    v10 = -2;
  if (v10 < 0)
    v10 = -1;
  return (v10 + 1);
}

uint64_t storeEnumTagSinglePayload for NCProtoDisconnectRequest()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_242A26040(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for UnknownStorage();
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1 + *(int *)(a4 + 20), a2, a2, result);
  *(_BYTE *)(a1 + *(int *)(a4 + 24)) = a2 + 2;
  return result;
}

uint64_t type metadata completion function for NCProtoDisconnectRequest()
{
  return type metadata completion function for NCProtoTransferActiveConversationRequest();
}

ValueMetadata *type metadata accessor for NCProtoDisconnectRequest.DisconnectReason()
{
  return &type metadata for NCProtoDisconnectRequest.DisconnectReason;
}

uint64_t *initializeBufferWithCopyOfBuffer for NCProtoDisconnectResponse(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v3;
  int v4;
  uint64_t v5;
  _BYTE *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;

  v3 = a1;
  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    v9 = *a2;
    *v3 = *a2;
    v3 = (uint64_t *)(v9 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    *(_BYTE *)a1 = *(_BYTE *)a2;
    v5 = *(int *)(a3 + 20);
    v6 = (char *)a1 + v5;
    v7 = (char *)a2 + v5;
    v8 = type metadata accessor for UnknownStorage();
    (*(void (**)(_BYTE *, char *, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(v6, v7, v8);
  }
  return v3;
}

uint64_t destroy for NCProtoDisconnectResponse(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = a1 + *(int *)(a2 + 20);
  v3 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(v2, v3);
}

_BYTE *initializeWithCopy for NCProtoDisconnectResponse(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v4;
  _BYTE *v5;
  _BYTE *v6;
  uint64_t v7;

  *a1 = *a2;
  v4 = *(int *)(a3 + 20);
  v5 = &a1[v4];
  v6 = &a2[v4];
  v7 = type metadata accessor for UnknownStorage();
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(v5, v6, v7);
  return a1;
}

_BYTE *assignWithCopy for NCProtoDisconnectResponse(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v4;
  _BYTE *v5;
  _BYTE *v6;
  uint64_t v7;

  *a1 = *a2;
  v4 = *(int *)(a3 + 20);
  v5 = &a1[v4];
  v6 = &a2[v4];
  v7 = type metadata accessor for UnknownStorage();
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v7 - 8) + 24))(v5, v6, v7);
  return a1;
}

_BYTE *initializeWithTake for NCProtoDisconnectResponse(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v4;
  _BYTE *v5;
  _BYTE *v6;
  uint64_t v7;

  *a1 = *a2;
  v4 = *(int *)(a3 + 20);
  v5 = &a1[v4];
  v6 = &a2[v4];
  v7 = type metadata accessor for UnknownStorage();
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

_BYTE *assignWithTake for NCProtoDisconnectResponse(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v4;
  _BYTE *v5;
  _BYTE *v6;
  uint64_t v7;

  *a1 = *a2;
  v4 = *(int *)(a3 + 20);
  v5 = &a1[v4];
  v6 = &a2[v4];
  v7 = type metadata accessor for UnknownStorage();
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v7 - 8) + 40))(v5, v6, v7);
  return a1;
}

uint64_t getEnumTagSinglePayload for NCProtoDisconnectResponse()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_242A26398(unsigned __int8 *a1, uint64_t a2, uint64_t a3)
{
  unsigned int v4;
  BOOL v5;
  int v6;
  uint64_t v10;

  if ((_DWORD)a2 == 254)
  {
    v4 = *a1;
    v5 = v4 >= 2;
    v6 = (v4 + 2147483646) & 0x7FFFFFFF;
    if (v5)
      return (v6 + 1);
    else
      return 0;
  }
  else
  {
    v10 = type metadata accessor for UnknownStorage();
    return (*(uint64_t (**)(unsigned __int8 *, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 48))(&a1[*(int *)(a3 + 20)], a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for NCProtoDisconnectResponse()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

_BYTE *sub_242A26420(_BYTE *result, uint64_t a2, int a3, uint64_t a4)
{
  _BYTE *v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 254)
  {
    *result = a2 + 1;
  }
  else
  {
    v7 = type metadata accessor for UnknownStorage();
    return (_BYTE *)(*(uint64_t (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(&v5[*(int *)(a4 + 20)], a2, a2, v7);
  }
  return result;
}

uint64_t type metadata completion function for NCProtoDisconnectResponse()
{
  return type metadata completion function for NCProtoEndedSessionEvent();
}

uint64_t *initializeBufferWithCopyOfBuffer for NCProtoDeclineContinuityCallRequest(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v12 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = type metadata accessor for UnknownStorage();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = *(int *)(a3 + 20);
    v9 = (uint64_t *)((char *)a1 + v8);
    v10 = (uint64_t *)((char *)a2 + v8);
    v11 = v10[1];
    *v9 = *v10;
    v9[1] = v11;
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t destroy for NCProtoJoinActiveConversationRequest(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for NCProtoDeclineContinuityCallRequest(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;

  v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = (_QWORD *)(a1 + v7);
  v9 = (_QWORD *)(a2 + v7);
  v10 = v9[1];
  *v8 = *v9;
  v8[1] = v10;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for NCProtoDeclineContinuityCallRequest(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;

  v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = (_QWORD *)(a1 + v7);
  v9 = (_QWORD *)(a2 + v7);
  *v8 = *v9;
  v8[1] = v9[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t initializeWithTake for NCProtoDeclineContinuityCallRequest(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  *(_OWORD *)(a1 + *(int *)(a3 + 20)) = *(_OWORD *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t assignWithTake for NCProtoDeclineContinuityCallRequest(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;

  v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = (_QWORD *)(a1 + v7);
  v9 = (uint64_t *)(a2 + v7);
  v11 = *v9;
  v10 = v9[1];
  *v8 = v11;
  v8[1] = v10;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for NCProtoPrepareTransferRequest()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t __swift_get_extra_inhabitant_index_9Tm(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;
  int v10;

  v6 = type metadata accessor for UnknownStorage();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 20) + 8);
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  v10 = v9 - 1;
  if (v10 < 0)
    v10 = -1;
  return (v10 + 1);
}

uint64_t storeEnumTagSinglePayload for NCProtoPrepareTransferRequest()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t __swift_store_extra_inhabitant_index_10Tm(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for UnknownStorage();
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 20) + 8) = a2;
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for NCProtoLagunaConnectionResponse(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for UnknownStorage();
  return (**(uint64_t (***)(uint64_t, uint64_t, uint64_t))(v4 - 8))(a1, a2, v4);
}

uint64_t destroy for NCProtoLagunaConnectionResponse(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
}

uint64_t initializeWithCopy for NCProtoLagunaConnectionResponse(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, a2, v4);
  return a1;
}

uint64_t assignWithCopy for NCProtoLagunaConnectionResponse(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 24))(a1, a2, v4);
  return a1;
}

uint64_t initializeWithTake for NCProtoLagunaConnectionResponse(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a1, a2, v4);
  return a1;
}

uint64_t assignWithTake for NCProtoLagunaConnectionResponse(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a1, a2, v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for NCProtoPrepareTransferResponse()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t __swift_get_extra_inhabitant_index_33Tm(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, a2, v4);
}

uint64_t storeEnumTagSinglePayload for NCProtoPrepareTransferResponse()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t __swift_store_extra_inhabitant_index_34Tm(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a1, a2, a2, v4);
}

uint64_t type metadata completion function for NCProtoLagunaConnectionResponse()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for UnknownStorage();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for NCProtoMemberAssociationPrimaryInfo(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v3;
  uint64_t v4;
  uint64_t *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  void (*v12)(char *, char *, uint64_t);
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  char *v18;
  _OWORD *v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;

  v3 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  v4 = *a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    v7 = (uint64_t *)(v4 + ((v3 + 16) & ~(unint64_t)v3));
    swift_retain();
  }
  else
  {
    v7 = a1;
    v8 = a3[5];
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = type metadata accessor for UnknownStorage();
    v12 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16);
    swift_bridgeObjectRetain();
    v12(v9, v10, v11);
    v13 = a3[6];
    v14 = a3[7];
    v15 = (uint64_t *)((char *)v7 + v13);
    v16 = (uint64_t *)((char *)a2 + v13);
    v17 = v16[1];
    *v15 = *v16;
    v15[1] = v17;
    v18 = (char *)v7 + v14;
    v19 = (_OWORD *)((char *)a2 + v14);
    v20 = *(uint64_t *)((char *)a2 + v14 + 8);
    swift_bridgeObjectRetain();
    if (v20 >> 60 == 15)
    {
      *(_OWORD *)v18 = *v19;
    }
    else
    {
      v21 = *(_QWORD *)v19;
      outlined copy of Data._Representation(v21, v20);
      *(_QWORD *)v18 = v21;
      *((_QWORD *)v18 + 1) = v20;
    }
    v22 = a3[8];
    v23 = a3[9];
    v24 = (char *)v7 + v22;
    v25 = (char *)a2 + v22;
    *(_QWORD *)v24 = *(_QWORD *)v25;
    v24[8] = v25[8];
    v26 = (uint64_t *)((char *)v7 + v23);
    v27 = (uint64_t *)((char *)a2 + v23);
    v28 = v27[1];
    *v26 = *v27;
    v26[1] = v28;
    swift_bridgeObjectRetain();
  }
  return v7;
}

uint64_t destroy for NCProtoMemberAssociationPrimaryInfo(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  unint64_t v7;

  swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(a2 + 20);
  v5 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  swift_bridgeObjectRelease();
  v6 = (uint64_t *)(a1 + *(int *)(a2 + 28));
  v7 = v6[1];
  if (v7 >> 60 != 15)
    outlined consume of Data._Representation(*v6, v7);
  return swift_bridgeObjectRelease();
}

_QWORD *initializeWithCopy for NCProtoMemberAssociationPrimaryInfo(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, char *, uint64_t);
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  char *v16;
  _OWORD *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;

  *a1 = *a2;
  v6 = a3[5];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for UnknownStorage();
  v10 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 16);
  swift_bridgeObjectRetain();
  v10(v7, v8, v9);
  v11 = a3[6];
  v12 = a3[7];
  v13 = (_QWORD *)((char *)a1 + v11);
  v14 = (_QWORD *)((char *)a2 + v11);
  v15 = v14[1];
  *v13 = *v14;
  v13[1] = v15;
  v16 = (char *)a1 + v12;
  v17 = (_OWORD *)((char *)a2 + v12);
  v18 = *(_QWORD *)((char *)a2 + v12 + 8);
  swift_bridgeObjectRetain();
  if (v18 >> 60 == 15)
  {
    *(_OWORD *)v16 = *v17;
  }
  else
  {
    v19 = *(_QWORD *)v17;
    outlined copy of Data._Representation(v19, v18);
    *(_QWORD *)v16 = v19;
    *((_QWORD *)v16 + 1) = v18;
  }
  v20 = a3[8];
  v21 = a3[9];
  v22 = (char *)a1 + v20;
  v23 = (char *)a2 + v20;
  *(_QWORD *)v22 = *(_QWORD *)v23;
  v22[8] = v23[8];
  v24 = (_QWORD *)((char *)a1 + v21);
  v25 = (_QWORD *)((char *)a2 + v21);
  v26 = v25[1];
  *v24 = *v25;
  v24[1] = v26;
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for NCProtoMemberAssociationPrimaryInfo(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;

  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = a3[5];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 24))(v7, v8, v9);
  v10 = a3[6];
  v11 = (_QWORD *)((char *)a1 + v10);
  v12 = (_QWORD *)((char *)a2 + v10);
  *v11 = *v12;
  v11[1] = v12[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v13 = a3[7];
  v14 = (_QWORD *)((char *)a1 + v13);
  v15 = (_QWORD *)((char *)a2 + v13);
  v16 = *(_QWORD *)((char *)a2 + v13 + 8);
  if (*(_QWORD *)((char *)a1 + v13 + 8) >> 60 != 15)
  {
    if (v16 >> 60 != 15)
    {
      v18 = *v15;
      outlined copy of Data._Representation(v18, v16);
      v19 = *v14;
      v20 = v14[1];
      *v14 = v18;
      v14[1] = v16;
      outlined consume of Data._Representation(v19, v20);
      goto LABEL_8;
    }
    outlined destroy of Data((uint64_t)v14);
    goto LABEL_6;
  }
  if (v16 >> 60 == 15)
  {
LABEL_6:
    *(_OWORD *)v14 = *(_OWORD *)v15;
    goto LABEL_8;
  }
  v17 = *v15;
  outlined copy of Data._Representation(v17, v16);
  *v14 = v17;
  v14[1] = v16;
LABEL_8:
  v21 = a3[8];
  v22 = (char *)a1 + v21;
  v23 = (char *)a2 + v21;
  v24 = *(_QWORD *)v23;
  v22[8] = v23[8];
  *(_QWORD *)v22 = v24;
  v25 = a3[9];
  v26 = (_QWORD *)((char *)a1 + v25);
  v27 = (_QWORD *)((char *)a2 + v25);
  *v26 = *v27;
  v26[1] = v27[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_QWORD *initializeWithTake for NCProtoMemberAssociationPrimaryInfo(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;

  *a1 = *a2;
  v6 = a3[5];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v7, v8, v9);
  v10 = a3[7];
  *(_OWORD *)((char *)a1 + a3[6]) = *(_OWORD *)((char *)a2 + a3[6]);
  *(_OWORD *)((char *)a1 + v10) = *(_OWORD *)((char *)a2 + v10);
  v11 = a3[8];
  v12 = a3[9];
  v13 = (char *)a1 + v11;
  v14 = (char *)a2 + v11;
  *(_QWORD *)v13 = *(_QWORD *)v14;
  v13[8] = v14[8];
  *(_OWORD *)((char *)a1 + v12) = *(_OWORD *)((char *)a2 + v12);
  return a1;
}

_QWORD *assignWithTake for NCProtoMemberAssociationPrimaryInfo(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  _QWORD *v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;

  *a1 = *a2;
  swift_bridgeObjectRelease();
  v6 = a3[5];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 40))(v7, v8, v9);
  v10 = a3[6];
  v11 = (_QWORD *)((char *)a1 + v10);
  v12 = (_QWORD *)((char *)a2 + v10);
  v14 = *v12;
  v13 = v12[1];
  *v11 = v14;
  v11[1] = v13;
  swift_bridgeObjectRelease();
  v15 = a3[7];
  v16 = (_QWORD *)((char *)a1 + v15);
  v17 = (_QWORD *)((char *)a2 + v15);
  v18 = *(_QWORD *)((char *)a1 + v15 + 8);
  if (v18 >> 60 != 15)
  {
    v19 = v17[1];
    if (v19 >> 60 != 15)
    {
      v20 = *v16;
      *v16 = *v17;
      v16[1] = v19;
      outlined consume of Data._Representation(v20, v18);
      goto LABEL_6;
    }
    outlined destroy of Data((uint64_t)v16);
  }
  *(_OWORD *)v16 = *(_OWORD *)v17;
LABEL_6:
  v21 = a3[8];
  v22 = a3[9];
  v23 = (char *)a1 + v21;
  v24 = (char *)a2 + v21;
  *(_QWORD *)v23 = *(_QWORD *)v24;
  v23[8] = v24[8];
  v25 = (_QWORD *)((char *)a1 + v22);
  v26 = (_QWORD *)((char *)a2 + v22);
  v28 = *v26;
  v27 = v26[1];
  *v25 = v28;
  v25[1] = v27;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for NCProtoMemberAssociationPrimaryInfo()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for NCProtoMemberAssociationPrimaryInfo()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t type metadata completion function for NCProtoMemberAssociationPrimaryInfo()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for UnknownStorage();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for NCProtoMemberAssociationPrimaryInfo.MemberAssociationType()
{
  return &type metadata for NCProtoMemberAssociationPrimaryInfo.MemberAssociationType;
}

uint64_t *initializeBufferWithCopyOfBuffer for NCProtoIDSProxyMessage(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int EnumCaseMultiPayload;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(char *, char *, uint64_t);
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  void (*v33)(char *, char *, uint64_t);
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  char *v39;
  char *v40;
  char *v41;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) == 0)
  {
    v7 = type metadata accessor for NCProtoIDSProxyMessage.OneOf_Message(0);
    v8 = *(_QWORD *)(v7 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v8 + 48))(a2, 1, v7))
    {
      v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NCProtoIDSProxyMessage.OneOf_Message?);
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
LABEL_12:
      v34 = *(int *)(a3 + 20);
      v35 = (char *)a1 + v34;
      v36 = (char *)a2 + v34;
      v37 = type metadata accessor for UnknownStorage();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v37 - 8) + 16))(v35, v36, v37);
      return a1;
    }
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      v22 = *a2;
      v23 = a2[1];
      outlined copy of Data._Representation(*a2, v23);
      *a1 = v22;
      a1[1] = v23;
      v24 = a2[2];
      v25 = a2[3];
      outlined copy of Data._Representation(v24, v25);
      a1[2] = v24;
      a1[3] = v25;
      v26 = a2[5];
      a1[4] = a2[4];
      a1[5] = v26;
      a1[6] = a2[6];
      v27 = *(int *)(type metadata accessor for NCProtoIDSProxyMessage.Resource(0) + 32);
    }
    else
    {
      if (EnumCaseMultiPayload == 1)
      {
        *(_BYTE *)a1 = *(_BYTE *)a2;
        v12 = a2[2];
        a1[1] = a2[1];
        a1[2] = v12;
        *(_OWORD *)(a1 + 3) = *(_OWORD *)(a2 + 3);
        a1[5] = a2[5];
        *((_OWORD *)a1 + 3) = *((_OWORD *)a2 + 3);
        *((_BYTE *)a1 + 64) = *((_BYTE *)a2 + 64);
        v13 = a2[10];
        a1[9] = a2[9];
        v14 = a2[11];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        outlined copy of Data._Representation(v13, v14);
        a1[10] = v13;
        a1[11] = v14;
        v15 = a2[12];
        v16 = a2[13];
        outlined copy of Data._Representation(v15, v16);
        a1[12] = v15;
        a1[13] = v16;
        v17 = a2[15];
        a1[14] = a2[14];
        a1[15] = v17;
        v18 = a2[17];
        a1[16] = a2[16];
        a1[17] = v18;
        v19 = *(int *)(type metadata accessor for NCProtoIDSProxyMessage.GroupUpdate(0) + 68);
        v39 = (char *)a2 + v19;
        v40 = (char *)a1 + v19;
        v20 = type metadata accessor for UnknownStorage();
        v21 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v20 - 8) + 16);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v21(v40, v39, v20);
LABEL_11:
        swift_storeEnumTagMultiPayload();
        (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v8 + 56))(a1, 0, 1, v7);
        goto LABEL_12;
      }
      v28 = *a2;
      v29 = a2[1];
      outlined copy of Data._Representation(*a2, v29);
      *a1 = v28;
      a1[1] = v29;
      v30 = a2[3];
      a1[2] = a2[2];
      a1[3] = v30;
      a1[4] = a2[4];
      v27 = *(int *)(type metadata accessor for NCProtoIDSProxyMessage.RawData(0) + 28);
    }
    v41 = (char *)a1 + v27;
    v31 = (char *)a2 + v27;
    v32 = type metadata accessor for UnknownStorage();
    v33 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v32 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v33(v41, v31, v32);
    goto LABEL_11;
  }
  v10 = *a2;
  *a1 = *a2;
  a1 = (uint64_t *)(v10 + ((v5 + 16) & ~(unint64_t)v5));
  swift_retain();
  return a1;
}

uint64_t destroy for NCProtoIDSProxyMessage(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int EnumCaseMultiPayload;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = type metadata accessor for NCProtoIDSProxyMessage.OneOf_Message(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, 1, v4))
  {
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    switch(EnumCaseMultiPayload)
    {
      case 2:
        outlined consume of Data._Representation(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
        outlined consume of Data._Representation(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24));
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v6 = *(int *)(type metadata accessor for NCProtoIDSProxyMessage.Resource(0) + 32);
        goto LABEL_8;
      case 1:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        outlined consume of Data._Representation(*(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88));
        outlined consume of Data._Representation(*(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104));
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v6 = *(int *)(type metadata accessor for NCProtoIDSProxyMessage.GroupUpdate(0) + 68);
        goto LABEL_8;
      case 0:
        outlined consume of Data._Representation(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v6 = *(int *)(type metadata accessor for NCProtoIDSProxyMessage.RawData(0) + 28);
LABEL_8:
        v7 = a1 + v6;
        v8 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v7, v8);
        break;
    }
  }
  v9 = a1 + *(int *)(a2 + 20);
  v10 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(v9, v10);
}

char *initializeWithCopy for NCProtoIDSProxyMessage(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int EnumCaseMultiPayload;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(char *, char *, uint64_t);
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  void (*v31)(char *, char *, uint64_t);
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  char *v37;
  char *v38;
  char *v39;

  v6 = type metadata accessor for NCProtoIDSProxyMessage.OneOf_Message(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      v20 = *(_QWORD *)a2;
      v21 = *((_QWORD *)a2 + 1);
      outlined copy of Data._Representation(*(_QWORD *)a2, v21);
      *(_QWORD *)a1 = v20;
      *((_QWORD *)a1 + 1) = v21;
      v22 = *((_QWORD *)a2 + 2);
      v23 = *((_QWORD *)a2 + 3);
      outlined copy of Data._Representation(v22, v23);
      *((_QWORD *)a1 + 2) = v22;
      *((_QWORD *)a1 + 3) = v23;
      v24 = *((_QWORD *)a2 + 5);
      *((_QWORD *)a1 + 4) = *((_QWORD *)a2 + 4);
      *((_QWORD *)a1 + 5) = v24;
      *((_QWORD *)a1 + 6) = *((_QWORD *)a2 + 6);
      v25 = *(int *)(type metadata accessor for NCProtoIDSProxyMessage.Resource(0) + 32);
    }
    else
    {
      if (EnumCaseMultiPayload == 1)
      {
        *a1 = *a2;
        v10 = *((_QWORD *)a2 + 2);
        *((_QWORD *)a1 + 1) = *((_QWORD *)a2 + 1);
        *((_QWORD *)a1 + 2) = v10;
        *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
        *((_QWORD *)a1 + 5) = *((_QWORD *)a2 + 5);
        *((_OWORD *)a1 + 3) = *((_OWORD *)a2 + 3);
        a1[64] = a2[64];
        v11 = *((_QWORD *)a2 + 10);
        *((_QWORD *)a1 + 9) = *((_QWORD *)a2 + 9);
        v12 = *((_QWORD *)a2 + 11);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        outlined copy of Data._Representation(v11, v12);
        *((_QWORD *)a1 + 10) = v11;
        *((_QWORD *)a1 + 11) = v12;
        v13 = *((_QWORD *)a2 + 12);
        v14 = *((_QWORD *)a2 + 13);
        outlined copy of Data._Representation(v13, v14);
        *((_QWORD *)a1 + 12) = v13;
        *((_QWORD *)a1 + 13) = v14;
        v15 = *((_QWORD *)a2 + 15);
        *((_QWORD *)a1 + 14) = *((_QWORD *)a2 + 14);
        *((_QWORD *)a1 + 15) = v15;
        v16 = *((_QWORD *)a2 + 17);
        *((_QWORD *)a1 + 16) = *((_QWORD *)a2 + 16);
        *((_QWORD *)a1 + 17) = v16;
        v17 = *(int *)(type metadata accessor for NCProtoIDSProxyMessage.GroupUpdate(0) + 68);
        v37 = &a2[v17];
        v38 = &a1[v17];
        v18 = type metadata accessor for UnknownStorage();
        v19 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v18 - 8) + 16);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v19(v38, v37, v18);
LABEL_9:
        swift_storeEnumTagMultiPayload();
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
        goto LABEL_10;
      }
      v26 = *(_QWORD *)a2;
      v27 = *((_QWORD *)a2 + 1);
      outlined copy of Data._Representation(*(_QWORD *)a2, v27);
      *(_QWORD *)a1 = v26;
      *((_QWORD *)a1 + 1) = v27;
      v28 = *((_QWORD *)a2 + 3);
      *((_QWORD *)a1 + 2) = *((_QWORD *)a2 + 2);
      *((_QWORD *)a1 + 3) = v28;
      *((_QWORD *)a1 + 4) = *((_QWORD *)a2 + 4);
      v25 = *(int *)(type metadata accessor for NCProtoIDSProxyMessage.RawData(0) + 28);
    }
    v39 = &a1[v25];
    v29 = &a2[v25];
    v30 = type metadata accessor for UnknownStorage();
    v31 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v30 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v31(v39, v29, v30);
    goto LABEL_9;
  }
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NCProtoIDSProxyMessage.OneOf_Message?);
  memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
LABEL_10:
  v32 = *(int *)(a3 + 20);
  v33 = &a1[v32];
  v34 = &a2[v32];
  v35 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v35 - 8) + 16))(v33, v34, v35);
  return a1;
}

uint64_t assignWithCopy for NCProtoIDSProxyMessage(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(uint64_t, uint64_t, uint64_t);
  int v9;
  int v10;
  int EnumCaseMultiPayload;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(uint64_t, uint64_t, uint64_t);
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void (*v31)(uint64_t, uint64_t, uint64_t);
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void (*v41)(uint64_t, uint64_t, uint64_t);
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void (*v48)(uint64_t, uint64_t, uint64_t);
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  void (*v62)(uint64_t, uint64_t, uint64_t);
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  void (*v69)(uint64_t, uint64_t, uint64_t);
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;

  v6 = type metadata accessor for NCProtoIDSProxyMessage.OneOf_Message(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
  v9 = v8(a1, 1, v6);
  v10 = v8(a2, 1, v6);
  if (v9)
  {
    if (!v10)
    {
      EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
      if (EnumCaseMultiPayload == 2)
      {
        v33 = *(_QWORD *)a2;
        v34 = *(_QWORD *)(a2 + 8);
        outlined copy of Data._Representation(*(_QWORD *)a2, v34);
        *(_QWORD *)a1 = v33;
        *(_QWORD *)(a1 + 8) = v34;
        v35 = *(_QWORD *)(a2 + 16);
        v36 = *(_QWORD *)(a2 + 24);
        outlined copy of Data._Representation(v35, v36);
        *(_QWORD *)(a1 + 16) = v35;
        *(_QWORD *)(a1 + 24) = v36;
        *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
        *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
        *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
        v37 = *(int *)(type metadata accessor for NCProtoIDSProxyMessage.Resource(0) + 32);
        v73 = a1 + v37;
        v38 = a2 + v37;
        v39 = type metadata accessor for UnknownStorage();
        v40 = a3;
        v41 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v39 - 8) + 16);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v41(v73, v38, v39);
        a3 = v40;
      }
      else
      {
        if (EnumCaseMultiPayload != 1)
        {
          v74 = a3;
          v42 = *(_QWORD *)a2;
          v43 = *(_QWORD *)(a2 + 8);
          outlined copy of Data._Representation(*(_QWORD *)a2, v43);
          *(_QWORD *)a1 = v42;
          *(_QWORD *)(a1 + 8) = v43;
          *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
          *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
          *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
          v44 = *(int *)(type metadata accessor for NCProtoIDSProxyMessage.RawData(0) + 28);
          v45 = a1 + v44;
          v46 = a2 + v44;
          v47 = type metadata accessor for UnknownStorage();
          v48 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v47 - 8) + 16);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          v48(v45, v46, v47);
          swift_storeEnumTagMultiPayload();
          a3 = v74;
          goto LABEL_17;
        }
        *(_BYTE *)a1 = *(_BYTE *)a2;
        *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
        *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
        *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
        *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
        *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
        *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
        *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
        *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
        *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
        v12 = *(_QWORD *)(a2 + 80);
        v13 = *(_QWORD *)(a2 + 88);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        outlined copy of Data._Representation(v12, v13);
        *(_QWORD *)(a1 + 80) = v12;
        *(_QWORD *)(a1 + 88) = v13;
        v14 = *(_QWORD *)(a2 + 96);
        v15 = *(_QWORD *)(a2 + 104);
        outlined copy of Data._Representation(v14, v15);
        *(_QWORD *)(a1 + 96) = v14;
        *(_QWORD *)(a1 + 104) = v15;
        *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
        *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
        *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
        *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
        v16 = *(int *)(type metadata accessor for NCProtoIDSProxyMessage.GroupUpdate(0) + 68);
        v70 = a2 + v16;
        v71 = a1 + v16;
        v17 = a3;
        v18 = type metadata accessor for UnknownStorage();
        v19 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 16);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v20 = v18;
        a3 = v17;
        v19(v71, v70, v20);
      }
      swift_storeEnumTagMultiPayload();
LABEL_17:
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
      goto LABEL_18;
    }
    goto LABEL_8;
  }
  if (v10)
  {
    outlined destroy of NCProtoContactInfo(a1, type metadata accessor for NCProtoIDSProxyMessage.OneOf_Message);
LABEL_8:
    v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NCProtoIDSProxyMessage.OneOf_Message?);
    memcpy((void *)a1, (const void *)a2, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
    goto LABEL_18;
  }
  if (a1 != a2)
  {
    outlined destroy of NCProtoContactInfo(a1, type metadata accessor for NCProtoIDSProxyMessage.OneOf_Message);
    v22 = swift_getEnumCaseMultiPayload();
    if (v22 == 2)
    {
      v54 = *(_QWORD *)a2;
      v55 = *(_QWORD *)(a2 + 8);
      outlined copy of Data._Representation(*(_QWORD *)a2, v55);
      *(_QWORD *)a1 = v54;
      *(_QWORD *)(a1 + 8) = v55;
      v56 = *(_QWORD *)(a2 + 16);
      v57 = *(_QWORD *)(a2 + 24);
      outlined copy of Data._Representation(v56, v57);
      *(_QWORD *)(a1 + 16) = v56;
      *(_QWORD *)(a1 + 24) = v57;
      *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
      *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
      *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
      v58 = *(int *)(type metadata accessor for NCProtoIDSProxyMessage.Resource(0) + 32);
      v59 = a1 + v58;
      v60 = a2 + v58;
      v61 = type metadata accessor for UnknownStorage();
      v62 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v61 - 8) + 16);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v62(v59, v60, v61);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      if (v22 == 1)
      {
        *(_BYTE *)a1 = *(_BYTE *)a2;
        *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
        *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
        *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
        *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
        *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
        *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
        *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
        *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
        *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
        v23 = *(_QWORD *)(a2 + 80);
        v24 = *(_QWORD *)(a2 + 88);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        outlined copy of Data._Representation(v23, v24);
        *(_QWORD *)(a1 + 80) = v23;
        *(_QWORD *)(a1 + 88) = v24;
        v25 = *(_QWORD *)(a2 + 96);
        v26 = *(_QWORD *)(a2 + 104);
        outlined copy of Data._Representation(v25, v26);
        *(_QWORD *)(a1 + 96) = v25;
        *(_QWORD *)(a1 + 104) = v26;
        *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
        *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
        *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
        *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
        v27 = *(int *)(type metadata accessor for NCProtoIDSProxyMessage.GroupUpdate(0) + 68);
        v72 = a1 + v27;
        v28 = a2 + v27;
        v29 = a3;
        v30 = type metadata accessor for UnknownStorage();
        v31 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 16);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v32 = v30;
        a3 = v29;
        v31(v72, v28, v32);
      }
      else
      {
        v63 = *(_QWORD *)a2;
        v64 = *(_QWORD *)(a2 + 8);
        outlined copy of Data._Representation(*(_QWORD *)a2, v64);
        *(_QWORD *)a1 = v63;
        *(_QWORD *)(a1 + 8) = v64;
        *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
        *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
        *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
        v65 = *(int *)(type metadata accessor for NCProtoIDSProxyMessage.RawData(0) + 28);
        v66 = a1 + v65;
        v67 = a2 + v65;
        v68 = type metadata accessor for UnknownStorage();
        v69 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v68 - 8) + 16);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v69(v66, v67, v68);
      }
      swift_storeEnumTagMultiPayload();
    }
  }
LABEL_18:
  v49 = *(int *)(a3 + 20);
  v50 = a1 + v49;
  v51 = a2 + v49;
  v52 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v52 - 8) + 24))(v50, v51, v52);
  return a1;
}

_OWORD *initializeWithTake for NCProtoIDSProxyMessage(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int EnumCaseMultiPayload;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;

  v6 = type metadata accessor for NCProtoIDSProxyMessage.OneOf_Message(0);
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NCProtoIDSProxyMessage.OneOf_Message?);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
  }
  else
  {
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      v17 = a2[1];
      *a1 = *a2;
      a1[1] = v17;
      a1[2] = a2[2];
      *((_QWORD *)a1 + 6) = *((_QWORD *)a2 + 6);
      v18 = *(int *)(type metadata accessor for NCProtoIDSProxyMessage.Resource(0) + 32);
      v19 = (char *)a1 + v18;
      v20 = (char *)a2 + v18;
      v21 = type metadata accessor for UnknownStorage();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v21 - 8) + 32))(v19, v20, v21);
    }
    else
    {
      if (EnumCaseMultiPayload == 1)
      {
        *(_BYTE *)a1 = *(_BYTE *)a2;
        *(_OWORD *)((char *)a1 + 8) = *(_OWORD *)((char *)a2 + 8);
        *((_QWORD *)a1 + 3) = *((_QWORD *)a2 + 3);
        v10 = a2[3];
        a1[2] = a2[2];
        a1[3] = v10;
        *((_BYTE *)a1 + 64) = *((_BYTE *)a2 + 64);
        *((_QWORD *)a1 + 9) = *((_QWORD *)a2 + 9);
        v11 = a2[6];
        a1[5] = a2[5];
        a1[6] = v11;
        v12 = a2[8];
        a1[7] = a2[7];
        a1[8] = v12;
        v13 = *(int *)(type metadata accessor for NCProtoIDSProxyMessage.GroupUpdate(0) + 68);
      }
      else
      {
        v22 = a2[1];
        *a1 = *a2;
        a1[1] = v22;
        *((_QWORD *)a1 + 4) = *((_QWORD *)a2 + 4);
        v13 = *(int *)(type metadata accessor for NCProtoIDSProxyMessage.RawData(0) + 28);
      }
      v14 = (char *)a1 + v13;
      v15 = (char *)a2 + v13;
      v16 = type metadata accessor for UnknownStorage();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v16 - 8) + 32))(v14, v15, v16);
    }
    swift_storeEnumTagMultiPayload();
    (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  v23 = *(int *)(a3 + 20);
  v24 = (char *)a1 + v23;
  v25 = (char *)a2 + v23;
  v26 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v26 - 8) + 32))(v24, v25, v26);
  return a1;
}

uint64_t assignWithTake for NCProtoIDSProxyMessage(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(uint64_t, uint64_t, uint64_t);
  int v9;
  int v10;
  int EnumCaseMultiPayload;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  __int128 v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  __int128 v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  __int128 v44;

  v6 = type metadata accessor for NCProtoIDSProxyMessage.OneOf_Message(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
  v9 = v8(a1, 1, v6);
  v10 = v8(a2, 1, v6);
  if (v9)
  {
    if (!v10)
    {
      EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
      if (EnumCaseMultiPayload == 2)
      {
        v28 = *(_OWORD *)(a2 + 16);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_OWORD *)(a1 + 16) = v28;
        *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
        *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
        v29 = *(int *)(type metadata accessor for NCProtoIDSProxyMessage.Resource(0) + 32);
        v30 = a1 + v29;
        v31 = a2 + v29;
        v32 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v32 - 8) + 32))(v30, v31, v32);
      }
      else
      {
        if (EnumCaseMultiPayload == 1)
        {
          *(_BYTE *)a1 = *(_BYTE *)a2;
          *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
          *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
          v12 = *(_OWORD *)(a2 + 48);
          *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
          *(_OWORD *)(a1 + 48) = v12;
          *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
          *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
          v13 = *(_OWORD *)(a2 + 96);
          *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
          *(_OWORD *)(a1 + 96) = v13;
          v14 = *(_OWORD *)(a2 + 128);
          *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
          *(_OWORD *)(a1 + 128) = v14;
          v15 = *(int *)(type metadata accessor for NCProtoIDSProxyMessage.GroupUpdate(0) + 68);
        }
        else
        {
          v33 = *(_OWORD *)(a2 + 16);
          *(_OWORD *)a1 = *(_OWORD *)a2;
          *(_OWORD *)(a1 + 16) = v33;
          *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
          v15 = *(int *)(type metadata accessor for NCProtoIDSProxyMessage.RawData(0) + 28);
        }
        v16 = a1 + v15;
        v17 = a2 + v15;
        v18 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 32))(v16, v17, v18);
      }
      swift_storeEnumTagMultiPayload();
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
      goto LABEL_18;
    }
LABEL_9:
    v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NCProtoIDSProxyMessage.OneOf_Message?);
    memcpy((void *)a1, (const void *)a2, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
    goto LABEL_18;
  }
  if (v10)
  {
    outlined destroy of NCProtoContactInfo(a1, type metadata accessor for NCProtoIDSProxyMessage.OneOf_Message);
    goto LABEL_9;
  }
  if (a1 != a2)
  {
    outlined destroy of NCProtoContactInfo(a1, type metadata accessor for NCProtoIDSProxyMessage.OneOf_Message);
    v20 = swift_getEnumCaseMultiPayload();
    if (v20 == 2)
    {
      v39 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v39;
      *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
      *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
      v40 = *(int *)(type metadata accessor for NCProtoIDSProxyMessage.Resource(0) + 32);
      v41 = a1 + v40;
      v42 = a2 + v40;
      v43 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v43 - 8) + 32))(v41, v42, v43);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      if (v20 == 1)
      {
        *(_BYTE *)a1 = *(_BYTE *)a2;
        *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
        *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
        v21 = *(_OWORD *)(a2 + 48);
        *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
        *(_OWORD *)(a1 + 48) = v21;
        *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
        *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
        v22 = *(_OWORD *)(a2 + 96);
        *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
        *(_OWORD *)(a1 + 96) = v22;
        v23 = *(_OWORD *)(a2 + 128);
        *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
        *(_OWORD *)(a1 + 128) = v23;
        v24 = *(int *)(type metadata accessor for NCProtoIDSProxyMessage.GroupUpdate(0) + 68);
      }
      else
      {
        v44 = *(_OWORD *)(a2 + 16);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_OWORD *)(a1 + 16) = v44;
        *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
        v24 = *(int *)(type metadata accessor for NCProtoIDSProxyMessage.RawData(0) + 28);
      }
      v25 = a1 + v24;
      v26 = a2 + v24;
      v27 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 32))(v25, v26, v27);
      swift_storeEnumTagMultiPayload();
    }
  }
LABEL_18:
  v34 = *(int *)(a3 + 20);
  v35 = a1 + v34;
  v36 = a2 + v34;
  v37 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v37 - 8) + 40))(v35, v36, v37);
  return a1;
}

uint64_t getEnumTagSinglePayload for NCProtoIDSProxyMessage()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_242A28450(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;

  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NCProtoIDSProxyMessage.OneOf_Message?);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
  }
  else
  {
    v8 = type metadata accessor for UnknownStorage();
    v10 = a1 + *(int *)(a3 + 20);
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48);
  }
  return v9(v10, a2, v8);
}

uint64_t storeEnumTagSinglePayload for NCProtoIDSProxyMessage()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_242A284D4(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;

  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NCProtoIDSProxyMessage.OneOf_Message?);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    v10 = type metadata accessor for UnknownStorage();
    v12 = a1 + *(int *)(a4 + 20);
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56);
  }
  return v11(v12, a2, a2, v10);
}

void type metadata completion function for NCProtoIDSProxyMessage()
{
  unint64_t v0;
  unint64_t v1;

  type metadata accessor for NCProtoContactInfo?(319, &lazy cache variable for type metadata for NCProtoIDSProxyMessage.OneOf_Message?, (void (*)(uint64_t))type metadata accessor for NCProtoIDSProxyMessage.OneOf_Message);
  if (v0 <= 0x3F)
  {
    type metadata accessor for UnknownStorage();
    if (v1 <= 0x3F)
      swift_initStructMetadata();
  }
}

unint64_t initializeBufferWithCopyOfBuffer for NCProtoIDSProxyMessage.OneOf_Message(unint64_t a1, uint64_t a2, uint64_t a3)
{
  int v5;
  int EnumCaseMultiPayload;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(uint64_t, uint64_t, uint64_t);
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void (*v29)(uint64_t, uint64_t, uint64_t);
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void (*v37)(uint64_t, uint64_t, uint64_t);

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v19 = *(_QWORD *)a2;
    *(_QWORD *)a1 = *(_QWORD *)a2;
    a1 = v19 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain();
  }
  else
  {
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      v20 = *(_QWORD *)a2;
      v21 = *(_QWORD *)(a2 + 8);
      outlined copy of Data._Representation(*(_QWORD *)a2, v21);
      *(_QWORD *)a1 = v20;
      *(_QWORD *)(a1 + 8) = v21;
      v22 = *(_QWORD *)(a2 + 16);
      v23 = *(_QWORD *)(a2 + 24);
      outlined copy of Data._Representation(v22, v23);
      *(_QWORD *)(a1 + 16) = v22;
      *(_QWORD *)(a1 + 24) = v23;
      v24 = *(_QWORD *)(a2 + 40);
      *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
      *(_QWORD *)(a1 + 40) = v24;
      *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
      v25 = *(int *)(type metadata accessor for NCProtoIDSProxyMessage.Resource(0) + 32);
      v26 = a1 + v25;
      v27 = a2 + v25;
      v28 = type metadata accessor for UnknownStorage();
      v29 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v28 - 8) + 16);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v29(v26, v27, v28);
    }
    else if (EnumCaseMultiPayload == 1)
    {
      *(_BYTE *)a1 = *(_BYTE *)a2;
      v7 = *(_QWORD *)(a2 + 16);
      *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
      *(_QWORD *)(a1 + 16) = v7;
      *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
      *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
      *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
      *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
      v8 = *(_QWORD *)(a2 + 80);
      *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
      v9 = *(_QWORD *)(a2 + 88);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      outlined copy of Data._Representation(v8, v9);
      *(_QWORD *)(a1 + 80) = v8;
      *(_QWORD *)(a1 + 88) = v9;
      v10 = *(_QWORD *)(a2 + 96);
      v11 = *(_QWORD *)(a2 + 104);
      outlined copy of Data._Representation(v10, v11);
      *(_QWORD *)(a1 + 96) = v10;
      *(_QWORD *)(a1 + 104) = v11;
      v12 = *(_QWORD *)(a2 + 120);
      *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
      *(_QWORD *)(a1 + 120) = v12;
      v13 = *(_QWORD *)(a2 + 136);
      *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
      *(_QWORD *)(a1 + 136) = v13;
      v14 = *(int *)(type metadata accessor for NCProtoIDSProxyMessage.GroupUpdate(0) + 68);
      v15 = a1 + v14;
      v16 = a2 + v14;
      v17 = type metadata accessor for UnknownStorage();
      v18 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 16);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v18(v15, v16, v17);
    }
    else
    {
      v30 = *(_QWORD *)a2;
      v31 = *(_QWORD *)(a2 + 8);
      outlined copy of Data._Representation(*(_QWORD *)a2, v31);
      *(_QWORD *)a1 = v30;
      *(_QWORD *)(a1 + 8) = v31;
      v32 = *(_QWORD *)(a2 + 24);
      *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
      *(_QWORD *)(a1 + 24) = v32;
      *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
      v33 = *(int *)(type metadata accessor for NCProtoIDSProxyMessage.RawData(0) + 28);
      v34 = a1 + v33;
      v35 = a2 + v33;
      v36 = type metadata accessor for UnknownStorage();
      v37 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v36 - 8) + 16);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v37(v34, v35, v36);
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t destroy for NCProtoIDSProxyMessage.OneOf_Message(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  result = swift_getEnumCaseMultiPayload();
  if ((_DWORD)result == 2)
  {
    outlined consume of Data._Representation(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
    outlined consume of Data._Representation(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24));
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v3 = *(int *)(type metadata accessor for NCProtoIDSProxyMessage.Resource(0) + 32);
  }
  else if ((_DWORD)result == 1)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined consume of Data._Representation(*(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88));
    outlined consume of Data._Representation(*(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104));
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v3 = *(int *)(type metadata accessor for NCProtoIDSProxyMessage.GroupUpdate(0) + 68);
  }
  else
  {
    if ((_DWORD)result)
      return result;
    outlined consume of Data._Representation(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v3 = *(int *)(type metadata accessor for NCProtoIDSProxyMessage.RawData(0) + 28);
  }
  v4 = a1 + v3;
  v5 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
}

uint64_t initializeWithCopy for NCProtoIDSProxyMessage.OneOf_Message(uint64_t a1, uint64_t a2)
{
  int EnumCaseMultiPayload;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(uint64_t, uint64_t, uint64_t);
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void (*v29)(uint64_t, uint64_t, uint64_t);

  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2)
  {
    v17 = *(_QWORD *)a2;
    v18 = *(_QWORD *)(a2 + 8);
    outlined copy of Data._Representation(*(_QWORD *)a2, v18);
    *(_QWORD *)a1 = v17;
    *(_QWORD *)(a1 + 8) = v18;
    v19 = *(_QWORD *)(a2 + 16);
    v20 = *(_QWORD *)(a2 + 24);
    outlined copy of Data._Representation(v19, v20);
    *(_QWORD *)(a1 + 16) = v19;
    *(_QWORD *)(a1 + 24) = v20;
    v21 = *(_QWORD *)(a2 + 40);
    *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
    *(_QWORD *)(a1 + 40) = v21;
    *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
    v22 = *(int *)(type metadata accessor for NCProtoIDSProxyMessage.Resource(0) + 32);
LABEL_6:
    v26 = a1 + v22;
    v27 = a2 + v22;
    v28 = type metadata accessor for UnknownStorage();
    v29 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v28 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v29(v26, v27, v28);
    goto LABEL_7;
  }
  if (EnumCaseMultiPayload != 1)
  {
    v23 = *(_QWORD *)a2;
    v24 = *(_QWORD *)(a2 + 8);
    outlined copy of Data._Representation(*(_QWORD *)a2, v24);
    *(_QWORD *)a1 = v23;
    *(_QWORD *)(a1 + 8) = v24;
    v25 = *(_QWORD *)(a2 + 24);
    *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
    *(_QWORD *)(a1 + 24) = v25;
    *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
    v22 = *(int *)(type metadata accessor for NCProtoIDSProxyMessage.RawData(0) + 28);
    goto LABEL_6;
  }
  *(_BYTE *)a1 = *(_BYTE *)a2;
  v5 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v5;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  v6 = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  v7 = *(_QWORD *)(a2 + 88);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  outlined copy of Data._Representation(v6, v7);
  *(_QWORD *)(a1 + 80) = v6;
  *(_QWORD *)(a1 + 88) = v7;
  v8 = *(_QWORD *)(a2 + 96);
  v9 = *(_QWORD *)(a2 + 104);
  outlined copy of Data._Representation(v8, v9);
  *(_QWORD *)(a1 + 96) = v8;
  *(_QWORD *)(a1 + 104) = v9;
  v10 = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 120) = v10;
  v11 = *(_QWORD *)(a2 + 136);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 136) = v11;
  v12 = *(int *)(type metadata accessor for NCProtoIDSProxyMessage.GroupUpdate(0) + 68);
  v13 = a1 + v12;
  v14 = a2 + v12;
  v15 = type metadata accessor for UnknownStorage();
  v16 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v16(v13, v14, v15);
LABEL_7:
  swift_storeEnumTagMultiPayload();
  return a1;
}

uint64_t assignWithCopy for NCProtoIDSProxyMessage.OneOf_Message(uint64_t a1, uint64_t a2)
{
  int EnumCaseMultiPayload;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t, uint64_t);
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(uint64_t, uint64_t, uint64_t);
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void (*v29)(uint64_t, uint64_t, uint64_t);

  if (a1 != a2)
  {
    outlined destroy of NCProtoContactInfo(a1, type metadata accessor for NCProtoIDSProxyMessage.OneOf_Message);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      v14 = *(_QWORD *)a2;
      v15 = *(_QWORD *)(a2 + 8);
      outlined copy of Data._Representation(*(_QWORD *)a2, v15);
      *(_QWORD *)a1 = v14;
      *(_QWORD *)(a1 + 8) = v15;
      v16 = *(_QWORD *)(a2 + 16);
      v17 = *(_QWORD *)(a2 + 24);
      outlined copy of Data._Representation(v16, v17);
      *(_QWORD *)(a1 + 16) = v16;
      *(_QWORD *)(a1 + 24) = v17;
      *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
      *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
      *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
      v18 = *(int *)(type metadata accessor for NCProtoIDSProxyMessage.Resource(0) + 32);
      v19 = a1 + v18;
      v20 = a2 + v18;
      v21 = type metadata accessor for UnknownStorage();
      v22 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 16);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v22(v19, v20, v21);
    }
    else if (EnumCaseMultiPayload == 1)
    {
      *(_BYTE *)a1 = *(_BYTE *)a2;
      *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
      *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
      *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
      *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
      *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
      *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
      *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
      *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
      *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
      v5 = *(_QWORD *)(a2 + 80);
      v6 = *(_QWORD *)(a2 + 88);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      outlined copy of Data._Representation(v5, v6);
      *(_QWORD *)(a1 + 80) = v5;
      *(_QWORD *)(a1 + 88) = v6;
      v7 = *(_QWORD *)(a2 + 96);
      v8 = *(_QWORD *)(a2 + 104);
      outlined copy of Data._Representation(v7, v8);
      *(_QWORD *)(a1 + 96) = v7;
      *(_QWORD *)(a1 + 104) = v8;
      *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
      *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
      *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
      *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
      v9 = *(int *)(type metadata accessor for NCProtoIDSProxyMessage.GroupUpdate(0) + 68);
      v10 = a1 + v9;
      v11 = a2 + v9;
      v12 = type metadata accessor for UnknownStorage();
      v13 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 16);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v13(v10, v11, v12);
    }
    else
    {
      v23 = *(_QWORD *)a2;
      v24 = *(_QWORD *)(a2 + 8);
      outlined copy of Data._Representation(*(_QWORD *)a2, v24);
      *(_QWORD *)a1 = v23;
      *(_QWORD *)(a1 + 8) = v24;
      *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
      *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
      *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
      v25 = *(int *)(type metadata accessor for NCProtoIDSProxyMessage.RawData(0) + 28);
      v26 = a1 + v25;
      v27 = a2 + v25;
      v28 = type metadata accessor for UnknownStorage();
      v29 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v28 - 8) + 16);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v29(v26, v27, v28);
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t initializeWithTake for NCProtoIDSProxyMessage.OneOf_Message(uint64_t a1, uint64_t a2)
{
  int EnumCaseMultiPayload;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;

  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2)
  {
    v12 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v12;
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
    v13 = *(int *)(type metadata accessor for NCProtoIDSProxyMessage.Resource(0) + 32);
    v14 = a1 + v13;
    v15 = a2 + v13;
    v16 = type metadata accessor for UnknownStorage();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 32))(v14, v15, v16);
  }
  else
  {
    if (EnumCaseMultiPayload == 1)
    {
      *(_BYTE *)a1 = *(_BYTE *)a2;
      *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
      *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
      v5 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
      *(_OWORD *)(a1 + 48) = v5;
      *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
      *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
      v6 = *(_OWORD *)(a2 + 96);
      *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
      *(_OWORD *)(a1 + 96) = v6;
      v7 = *(_OWORD *)(a2 + 128);
      *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
      *(_OWORD *)(a1 + 128) = v7;
      v8 = *(int *)(type metadata accessor for NCProtoIDSProxyMessage.GroupUpdate(0) + 68);
    }
    else
    {
      v17 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v17;
      *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
      v8 = *(int *)(type metadata accessor for NCProtoIDSProxyMessage.RawData(0) + 28);
    }
    v9 = a1 + v8;
    v10 = a2 + v8;
    v11 = type metadata accessor for UnknownStorage();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(v9, v10, v11);
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

uint64_t assignWithTake for NCProtoIDSProxyMessage.OneOf_Message(uint64_t a1, uint64_t a2)
{
  int EnumCaseMultiPayload;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;

  if (a1 != a2)
  {
    outlined destroy of NCProtoContactInfo(a1, type metadata accessor for NCProtoIDSProxyMessage.OneOf_Message);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      v12 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v12;
      *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
      *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
      v13 = *(int *)(type metadata accessor for NCProtoIDSProxyMessage.Resource(0) + 32);
      v14 = a1 + v13;
      v15 = a2 + v13;
      v16 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 32))(v14, v15, v16);
    }
    else
    {
      if (EnumCaseMultiPayload == 1)
      {
        *(_BYTE *)a1 = *(_BYTE *)a2;
        *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
        *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
        v5 = *(_OWORD *)(a2 + 48);
        *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
        *(_OWORD *)(a1 + 48) = v5;
        *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
        *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
        v6 = *(_OWORD *)(a2 + 96);
        *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
        *(_OWORD *)(a1 + 96) = v6;
        v7 = *(_OWORD *)(a2 + 128);
        *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
        *(_OWORD *)(a1 + 128) = v7;
        v8 = *(int *)(type metadata accessor for NCProtoIDSProxyMessage.GroupUpdate(0) + 68);
      }
      else
      {
        v17 = *(_OWORD *)(a2 + 16);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_OWORD *)(a1 + 16) = v17;
        *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
        v8 = *(int *)(type metadata accessor for NCProtoIDSProxyMessage.RawData(0) + 28);
      }
      v9 = a1 + v8;
      v10 = a2 + v8;
      v11 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(v9, v10, v11);
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for NCProtoIDSProxyMessage.OneOf_Message(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a3 - 8) + 48))();
}

uint64_t storeEnumTagSinglePayload for NCProtoIDSProxyMessage.OneOf_Message(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a4 - 8) + 56))();
}

uint64_t destructiveInjectEnumTag for NCProtoIDSProxyMessage.OneOf_Message()
{
  return swift_storeEnumTagMultiPayload();
}

uint64_t type metadata completion function for NCProtoIDSProxyMessage.OneOf_Message()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;

  result = type metadata accessor for NCProtoIDSProxyMessage.RawData(319);
  if (v1 <= 0x3F)
  {
    result = type metadata accessor for NCProtoIDSProxyMessage.GroupUpdate(319);
    if (v2 <= 0x3F)
    {
      result = type metadata accessor for NCProtoIDSProxyMessage.Resource(319);
      if (v3 <= 0x3F)
      {
        swift_initEnumMetadataMultiPayload();
        return 0;
      }
    }
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for NCProtoIDSProxyMessage.RawData(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  void (*v14)(char *, char *, uint64_t);
  uint64_t v15;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v15 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v15 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = *a2;
    v8 = a2[1];
    outlined copy of Data._Representation(*a2, v8);
    *a1 = v7;
    a1[1] = v8;
    v9 = a2[3];
    a1[2] = a2[2];
    a1[3] = v9;
    a1[4] = a2[4];
    v10 = *(int *)(a3 + 28);
    v11 = (char *)a1 + v10;
    v12 = (char *)a2 + v10;
    v13 = type metadata accessor for UnknownStorage();
    v14 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v14(v11, v12, v13);
  }
  return a1;
}

uint64_t destroy for NCProtoIDSProxyMessage.RawData(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  outlined consume of Data._Representation(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(a2 + 28);
  v5 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
}

uint64_t *initializeWithCopy for NCProtoIDSProxyMessage.RawData(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  void (*v13)(char *, char *, uint64_t);

  v6 = *a2;
  v7 = a2[1];
  outlined copy of Data._Representation(*a2, v7);
  *a1 = v6;
  a1[1] = v7;
  v8 = a2[3];
  a1[2] = a2[2];
  a1[3] = v8;
  a1[4] = a2[4];
  v9 = *(int *)(a3 + 28);
  v10 = (char *)a1 + v9;
  v11 = (char *)a2 + v9;
  v12 = type metadata accessor for UnknownStorage();
  v13 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v13(v10, v11, v12);
  return a1;
}

uint64_t *assignWithCopy for NCProtoIDSProxyMessage.RawData(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;

  v6 = *a2;
  v7 = a2[1];
  outlined copy of Data._Representation(*a2, v7);
  v8 = *a1;
  v9 = a1[1];
  *a1 = v6;
  a1[1] = v7;
  outlined consume of Data._Representation(v8, v9);
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v10 = *(int *)(a3 + 28);
  v11 = (char *)a1 + v10;
  v12 = (char *)a2 + v10;
  v13 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 24))(v11, v12, v13);
  return a1;
}

uint64_t initializeWithTake for NCProtoJoinEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  v5 = *(int *)(a3 + 28);
  v6 = a1 + v5;
  v7 = a2 + v5;
  v8 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(v6, v7, v8);
  return a1;
}

uint64_t *assignWithTake for NCProtoIDSProxyMessage.RawData(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;

  v6 = *a1;
  v7 = a1[1];
  *(_OWORD *)a1 = *(_OWORD *)a2;
  outlined consume of Data._Representation(v6, v7);
  v8 = *(_QWORD *)(a2 + 24);
  a1[2] = *(_QWORD *)(a2 + 16);
  a1[3] = v8;
  swift_bridgeObjectRelease();
  a1[4] = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRelease();
  v9 = *(int *)(a3 + 28);
  v10 = (char *)a1 + v9;
  v11 = a2 + v9;
  v12 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 40))(v10, v11, v12);
  return a1;
}

uint64_t getEnumTagSinglePayload for NCProtoIDSProxyMessage.RawData()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_242A29558(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 24);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for UnknownStorage();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 28), a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for NCProtoIDSProxyMessage.RawData()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_242A295E0(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 24) = (a2 - 1);
  }
  else
  {
    v7 = type metadata accessor for UnknownStorage();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 28), a2, a2, v7);
  }
  return result;
}

uint64_t type metadata completion function for NCProtoIDSProxyMessage.RawData()
{
  return type metadata completion function for NCProtoJoinEvent();
}

uint64_t *initializeBufferWithCopyOfBuffer for NCProtoIDSProxyMessage.Resource(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  void (*v16)(char *, char *, uint64_t);
  uint64_t v17;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v17 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v17 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = *a2;
    v8 = a2[1];
    outlined copy of Data._Representation(*a2, v8);
    *a1 = v7;
    a1[1] = v8;
    v9 = a2[2];
    v10 = a2[3];
    outlined copy of Data._Representation(v9, v10);
    a1[2] = v9;
    a1[3] = v10;
    v11 = a2[5];
    a1[4] = a2[4];
    a1[5] = v11;
    a1[6] = a2[6];
    v12 = *(int *)(a3 + 32);
    v13 = (char *)a1 + v12;
    v14 = (char *)a2 + v12;
    v15 = type metadata accessor for UnknownStorage();
    v16 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v16(v13, v14, v15);
  }
  return a1;
}

uint64_t destroy for NCProtoIDSProxyMessage.Resource(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  outlined consume of Data._Representation(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
  outlined consume of Data._Representation(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(a2 + 32);
  v5 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
}

uint64_t *initializeWithCopy for NCProtoIDSProxyMessage.Resource(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  void (*v15)(char *, char *, uint64_t);

  v6 = *a2;
  v7 = a2[1];
  outlined copy of Data._Representation(*a2, v7);
  *a1 = v6;
  a1[1] = v7;
  v8 = a2[2];
  v9 = a2[3];
  outlined copy of Data._Representation(v8, v9);
  a1[2] = v8;
  a1[3] = v9;
  v10 = a2[5];
  a1[4] = a2[4];
  a1[5] = v10;
  a1[6] = a2[6];
  v11 = *(int *)(a3 + 32);
  v12 = (char *)a1 + v11;
  v13 = (char *)a2 + v11;
  v14 = type metadata accessor for UnknownStorage();
  v15 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v14 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v15(v12, v13, v14);
  return a1;
}

uint64_t *assignWithCopy for NCProtoIDSProxyMessage.Resource(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;

  v6 = *a2;
  v7 = a2[1];
  outlined copy of Data._Representation(*a2, v7);
  v8 = *a1;
  v9 = a1[1];
  *a1 = v6;
  a1[1] = v7;
  outlined consume of Data._Representation(v8, v9);
  v10 = a2[2];
  v11 = a2[3];
  outlined copy of Data._Representation(v10, v11);
  v12 = a1[2];
  v13 = a1[3];
  a1[2] = v10;
  a1[3] = v11;
  outlined consume of Data._Representation(v12, v13);
  a1[4] = a2[4];
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[6] = a2[6];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v14 = *(int *)(a3 + 32);
  v15 = (char *)a1 + v14;
  v16 = (char *)a2 + v14;
  v17 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v17 - 8) + 24))(v15, v16, v17);
  return a1;
}

uint64_t initializeWithTake for NCProtoIDSProxyMessage.Resource(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  v5 = *(int *)(a3 + 32);
  v6 = a1 + v5;
  v7 = a2 + v5;
  v8 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(v6, v7, v8);
  return a1;
}

uint64_t *assignWithTake for NCProtoIDSProxyMessage.Resource(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;

  v6 = *a1;
  v7 = a1[1];
  *(_OWORD *)a1 = *(_OWORD *)a2;
  outlined consume of Data._Representation(v6, v7);
  v8 = a1[2];
  v9 = a1[3];
  *((_OWORD *)a1 + 1) = *(_OWORD *)(a2 + 16);
  outlined consume of Data._Representation(v8, v9);
  v10 = *(_QWORD *)(a2 + 40);
  a1[4] = *(_QWORD *)(a2 + 32);
  a1[5] = v10;
  swift_bridgeObjectRelease();
  a1[6] = *(_QWORD *)(a2 + 48);
  swift_bridgeObjectRelease();
  v11 = *(int *)(a3 + 32);
  v12 = (char *)a1 + v11;
  v13 = a2 + v11;
  v14 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 40))(v12, v13, v14);
  return a1;
}

uint64_t getEnumTagSinglePayload for NCProtoIDSProxyMessage.Resource()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_242A29AD0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 40);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for UnknownStorage();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 32), a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for NCProtoIDSProxyMessage.Resource()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_242A29B58(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 40) = (a2 - 1);
  }
  else
  {
    v7 = type metadata accessor for UnknownStorage();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 32), a2, a2, v7);
  }
  return result;
}

uint64_t type metadata completion function for NCProtoIDSProxyMessage.Resource()
{
  return type metadata completion function for NCProtoContactHandleAnonym();
}

_BYTE *initializeBufferWithCopyOfBuffer for NCProtoIDSProxyMessage.GroupUpdate(_BYTE *a1, uint64_t *a2, uint64_t a3)
{
  _BYTE *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE *v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(_BYTE *, uint64_t, uint64_t);
  uint64_t v20;

  v4 = a1;
  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v20 = *a2;
    *(_QWORD *)v4 = *a2;
    v4 = (_BYTE *)(v20 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *a1 = *(_BYTE *)a2;
    v7 = a2[2];
    *((_QWORD *)v4 + 1) = a2[1];
    *((_QWORD *)v4 + 2) = v7;
    *(_OWORD *)(v4 + 24) = *(_OWORD *)(a2 + 3);
    *((_QWORD *)v4 + 5) = a2[5];
    *((_OWORD *)v4 + 3) = *((_OWORD *)a2 + 3);
    v4[64] = *((_BYTE *)a2 + 64);
    v8 = a2[10];
    *((_QWORD *)v4 + 9) = a2[9];
    v9 = a2[11];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    outlined copy of Data._Representation(v8, v9);
    *((_QWORD *)v4 + 10) = v8;
    *((_QWORD *)v4 + 11) = v9;
    v10 = a2[12];
    v11 = a2[13];
    outlined copy of Data._Representation(v10, v11);
    *((_QWORD *)v4 + 12) = v10;
    *((_QWORD *)v4 + 13) = v11;
    v12 = a2[15];
    *((_QWORD *)v4 + 14) = a2[14];
    *((_QWORD *)v4 + 15) = v12;
    v13 = a2[16];
    v14 = a2[17];
    v15 = *(int *)(a3 + 68);
    v16 = &v4[v15];
    v17 = (uint64_t)a2 + v15;
    *((_QWORD *)v4 + 16) = v13;
    *((_QWORD *)v4 + 17) = v14;
    v18 = type metadata accessor for UnknownStorage();
    v19 = *(void (**)(_BYTE *, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v19(v16, v17, v18);
  }
  return v4;
}

uint64_t destroy for NCProtoIDSProxyMessage.GroupUpdate(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined consume of Data._Representation(*(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88));
  outlined consume of Data._Representation(*(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(a2 + 68);
  v5 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
}

uint64_t initializeWithCopy for NCProtoIDSProxyMessage.GroupUpdate(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(uint64_t, uint64_t, uint64_t);

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v6 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v6;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  v7 = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  v8 = *(_QWORD *)(a2 + 88);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  outlined copy of Data._Representation(v7, v8);
  *(_QWORD *)(a1 + 80) = v7;
  *(_QWORD *)(a1 + 88) = v8;
  v9 = *(_QWORD *)(a2 + 96);
  v10 = *(_QWORD *)(a2 + 104);
  outlined copy of Data._Representation(v9, v10);
  *(_QWORD *)(a1 + 96) = v9;
  *(_QWORD *)(a1 + 104) = v10;
  v11 = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 120) = v11;
  v12 = *(_QWORD *)(a2 + 128);
  v13 = *(_QWORD *)(a2 + 136);
  v14 = *(int *)(a3 + 68);
  v15 = a1 + v14;
  v16 = a2 + v14;
  *(_QWORD *)(a1 + 128) = v12;
  *(_QWORD *)(a1 + 136) = v13;
  v17 = type metadata accessor for UnknownStorage();
  v18 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v18(v15, v16, v17);
  return a1;
}

uint64_t assignWithCopy for NCProtoIDSProxyMessage.GroupUpdate(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  v6 = *(_QWORD *)(a2 + 80);
  v7 = *(_QWORD *)(a2 + 88);
  outlined copy of Data._Representation(v6, v7);
  v8 = *(_QWORD *)(a1 + 80);
  v9 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 80) = v6;
  *(_QWORD *)(a1 + 88) = v7;
  outlined consume of Data._Representation(v8, v9);
  v10 = *(_QWORD *)(a2 + 96);
  v11 = *(_QWORD *)(a2 + 104);
  outlined copy of Data._Representation(v10, v11);
  v12 = *(_QWORD *)(a1 + 96);
  v13 = *(_QWORD *)(a1 + 104);
  *(_QWORD *)(a1 + 96) = v10;
  *(_QWORD *)(a1 + 104) = v11;
  outlined consume of Data._Representation(v12, v13);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v14 = *(int *)(a3 + 68);
  v15 = a1 + v14;
  v16 = a2 + v14;
  v17 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 24))(v15, v16, v17);
  return a1;
}

uint64_t initializeWithTake for NCProtoIDSProxyMessage.GroupUpdate(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v4;
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  v5 = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 96) = v5;
  v6 = *(_OWORD *)(a2 + 128);
  v7 = *(int *)(a3 + 68);
  v8 = a1 + v7;
  v9 = a2 + v7;
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 128) = v6;
  v10 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v8, v9, v10);
  return a1;
}

uint64_t assignWithTake for NCProtoIDSProxyMessage.GroupUpdate(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v6 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v6;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  v7 = *(_QWORD *)(a1 + 80);
  v8 = *(_QWORD *)(a1 + 88);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  outlined consume of Data._Representation(v7, v8);
  v9 = *(_QWORD *)(a1 + 96);
  v10 = *(_QWORD *)(a1 + 104);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  outlined consume of Data._Representation(v9, v10);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  swift_bridgeObjectRelease();
  v11 = *(_QWORD *)(a2 + 136);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 136) = v11;
  swift_bridgeObjectRelease();
  v12 = *(int *)(a3 + 68);
  v13 = a1 + v12;
  v14 = a2 + v12;
  v15 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 40))(v13, v14, v15);
  return a1;
}

uint64_t getEnumTagSinglePayload for NCProtoIDSProxyMessage.GroupUpdate()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_242A2A1FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 16);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for UnknownStorage();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 68), a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for NCProtoIDSProxyMessage.GroupUpdate()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_242A2A284(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 16) = (a2 - 1);
  }
  else
  {
    v7 = type metadata accessor for UnknownStorage();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 68), a2, a2, v7);
  }
  return result;
}

uint64_t type metadata completion function for NCProtoIDSProxyMessage.GroupUpdate()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for UnknownStorage();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for NCProtoFavoritesDidChangeEvent(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, char *, uint64_t);

  v3 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  v4 = *a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    v5 = (uint64_t *)(v4 + ((v3 + 16) & ~(unint64_t)v3));
    swift_retain();
  }
  else
  {
    v5 = a1;
    v6 = *(int *)(a3 + 20);
    v7 = (char *)a1 + v6;
    v8 = (char *)a2 + v6;
    v9 = type metadata accessor for UnknownStorage();
    v10 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 16);
    swift_bridgeObjectRetain();
    v10(v7, v8, v9);
  }
  return v5;
}

uint64_t destroy for NCProtoFavoritesDidChangeEvent(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(a2 + 20);
  v5 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
}

_QWORD *initializeWithCopy for NCProtoFavoritesDidChangeEvent(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;
  void (*v8)(char *, char *, uint64_t);

  *a1 = *a2;
  v4 = *(int *)(a3 + 20);
  v5 = (char *)a1 + v4;
  v6 = (char *)a2 + v4;
  v7 = type metadata accessor for UnknownStorage();
  v8 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 16);
  swift_bridgeObjectRetain();
  v8(v5, v6, v7);
  return a1;
}

_QWORD *assignWithCopy for NCProtoFavoritesDidChangeEvent(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;

  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = *(int *)(a3 + 20);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 24))(v7, v8, v9);
  return a1;
}

_QWORD *initializeWithTake for NCProtoFavoritesDidChangeEvent(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;

  *a1 = *a2;
  v4 = *(int *)(a3 + 20);
  v5 = (char *)a1 + v4;
  v6 = (char *)a2 + v4;
  v7 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

_QWORD *assignWithTake for NCProtoFavoritesDidChangeEvent(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;

  *a1 = *a2;
  swift_bridgeObjectRelease();
  v6 = *(int *)(a3 + 20);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 40))(v7, v8, v9);
  return a1;
}

uint64_t getEnumTagSinglePayload for NCProtoIDSProxyMessage.ParticipantIDList()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t __swift_get_extra_inhabitant_index_7Tm(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)a1;
    if (*(_QWORD *)a1 >= 0xFFFFFFFFuLL)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for UnknownStorage();
    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(&a1[*(int *)(a3 + 20)], a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for NCProtoIDSProxyMessage.ParticipantIDList()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

char *__swift_store_extra_inhabitant_index_8Tm(char *result, uint64_t a2, int a3, uint64_t a4)
{
  char *v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)result = (a2 - 1);
  }
  else
  {
    v7 = type metadata accessor for UnknownStorage();
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(&v5[*(int *)(a4 + 20)], a2, a2, v7);
  }
  return result;
}

uint64_t *__swift_allocate_value_buffer(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  if ((*(_DWORD *)(*(_QWORD *)(a1 - 8) + 80) & 0x20000) != 0)
  {
    v3 = swift_slowAlloc();
    *a2 = v3;
    return (uint64_t *)v3;
  }
  return a2;
}

uint64_t outlined init with take of (key: String, value: NCProtoCallInfo)?(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;

  v5 = __swift_instantiateConcreteTypeFromMangledName(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t outlined destroy of NCProtoContactInfo?(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  v3 = __swift_instantiateConcreteTypeFromMangledName(a2);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t outlined init with copy of NCProtoContactInfo?(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;

  v5 = __swift_instantiateConcreteTypeFromMangledName(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t NCProtoLagunaConnectionResponse.traverse<A>(visitor:)()
{
  return NCProtoTVLaunchedEvent.traverse<A>(visitor:)();
}

uint64_t NCProtoDeviceLaunchedEvent.traverse<A>(visitor:)()
{
  return NCProtoTVLaunchedEvent.traverse<A>(visitor:)();
}

uint64_t NCProtoEndLagunaSessionEvent.traverse<A>(visitor:)()
{
  return NCProtoTVLaunchedEvent.traverse<A>(visitor:)();
}

uint64_t NCProtoPullLagunaSessionToTVResponse.traverse<A>(visitor:)()
{
  return NCProtoTVLaunchedEvent.traverse<A>(visitor:)();
}

uint64_t NCProtoTransferActiveConversationResponse.traverse<A>(visitor:)()
{
  return NCProtoTVLaunchedEvent.traverse<A>(visitor:)();
}

uint64_t NCProtoStartConversationResponse.traverse<A>(visitor:)()
{
  return NCProtoTVLaunchedEvent.traverse<A>(visitor:)();
}

uint64_t NCProtoJoinActiveConversationResponse.traverse<A>(visitor:)()
{
  return NCProtoTVLaunchedEvent.traverse<A>(visitor:)();
}

uint64_t NCProtoDeclineContinuityCallResponse.traverse<A>(visitor:)()
{
  return NCProtoTVLaunchedEvent.traverse<A>(visitor:)();
}

uint64_t NCProtoGetAddressableContactsRequest.traverse<A>(visitor:)()
{
  return NCProtoTVLaunchedEvent.traverse<A>(visitor:)();
}

uint64_t NCProtoAddConversationParticipantsResponse.traverse<A>(visitor:)()
{
  return NCProtoTVLaunchedEvent.traverse<A>(visitor:)();
}

uint64_t NCProtoPrepareTransferResponse.traverse<A>(visitor:)()
{
  return NCProtoTVLaunchedEvent.traverse<A>(visitor:)();
}

uint64_t IncomingHandoffContext.isAudioEnabled.getter()
{
  unsigned __int8 *v0;

  return *v0;
}

uint64_t IncomingHandoffContext.isVideoEnabled.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 1);
}

void IncomingHandoffContext.callType.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 2);
}

uint64_t IncomingHandoffContext.isCaptioningEnabled.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 3);
}

uint64_t IncomingHandoffContext.skipPreviewBulletin.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 4);
}

NeighborhoodActivityConduit::IncomingHandoffContext __swiftcall IncomingHandoffContext.init(isAudioEnabled:isVideoEnabled:callType:isCaptioningEnabled:skipPreviewBulletin:)(Swift::Bool isAudioEnabled, Swift::Bool isVideoEnabled, NeighborhoodActivityConduit::CallType callType, Swift::Bool isCaptioningEnabled, Swift::Bool skipPreviewBulletin)
{
  Swift::Bool *v5;
  char v6;
  NeighborhoodActivityConduit::IncomingHandoffContext result;

  v6 = *(_BYTE *)callType;
  *v5 = isAudioEnabled;
  v5[1] = isVideoEnabled;
  v5[2] = v6;
  v5[3] = isCaptioningEnabled;
  v5[4] = skipPreviewBulletin;
  result.isAudioEnabled = isAudioEnabled;
  return result;
}

uint64_t IncomingHandoffContext.description.getter()
{
  unsigned __int8 *v0;
  int v1;
  int v2;
  int v3;
  int v4;
  Swift::String v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  Swift::String v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  Swift::String v13;
  uint64_t v14;
  unint64_t v15;
  Swift::String v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  Swift::String v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  Swift::String v24;
  int v26;

  v1 = *v0;
  v2 = v0[1];
  v3 = v0[2];
  v4 = v0[3];
  v26 = v0[4];
  _StringGuts.grow(_:)(118);
  v5._countAndFlagsBits = 0xD000000000000027;
  v5._object = (void *)0x8000000242A39C90;
  String.append(_:)(v5);
  if (v1)
    v6 = 1702195828;
  else
    v6 = 0x65736C6166;
  if (v1)
    v7 = 0xE400000000000000;
  else
    v7 = 0xE500000000000000;
  v8 = v7;
  String.append(_:)(*(Swift::String *)&v6);
  swift_bridgeObjectRelease();
  v9._countAndFlagsBits = 0xD000000000000010;
  v9._object = (void *)0x8000000242A39CC0;
  String.append(_:)(v9);
  if (v2)
    v10 = 1702195828;
  else
    v10 = 0x65736C6166;
  if (v2)
    v11 = 0xE400000000000000;
  else
    v11 = 0xE500000000000000;
  v12 = v11;
  String.append(_:)(*(Swift::String *)&v10);
  swift_bridgeObjectRelease();
  v13._countAndFlagsBits = 0x7079546C6C616320;
  v13._object = (void *)0xEA00000000003D65;
  String.append(_:)(v13);
  if (v3)
    v14 = 0x6F656469762ELL;
  else
    v14 = 0x6F696475612ELL;
  v15 = 0xE600000000000000;
  String.append(_:)(*(Swift::String *)&v14);
  swift_bridgeObjectRelease();
  v16._object = (void *)0x8000000242A39CE0;
  v16._countAndFlagsBits = 0xD000000000000015;
  String.append(_:)(v16);
  if (v4)
    v17 = 1702195828;
  else
    v17 = 0x65736C6166;
  if (v4)
    v18 = 0xE400000000000000;
  else
    v18 = 0xE500000000000000;
  v19 = v18;
  String.append(_:)(*(Swift::String *)&v17);
  swift_bridgeObjectRelease();
  v20._object = (void *)0x8000000242A39D00;
  v20._countAndFlagsBits = 0xD000000000000015;
  String.append(_:)(v20);
  if (v26)
    v21 = 1702195828;
  else
    v21 = 0x65736C6166;
  if (v26)
    v22 = 0xE400000000000000;
  else
    v22 = 0xE500000000000000;
  v23 = v22;
  String.append(_:)(*(Swift::String *)&v21);
  swift_bridgeObjectRelease();
  v24._countAndFlagsBits = 62;
  v24._object = (void *)0xE100000000000000;
  String.append(_:)(v24);
  return 0;
}

uint64_t IncomingHandoffContext.queryItem.getter()
{
  uint64_t v0;
  unint64_t v1;
  unint64_t v2;

  type metadata accessor for JSONEncoder();
  swift_allocObject();
  JSONEncoder.init()();
  lazy protocol witness table accessor for type IncomingHandoffContext and conformance IncomingHandoffContext();
  v0 = dispatch thunk of JSONEncoder.encode<A>(_:)();
  v2 = v1;
  outlined copy of Data._Representation(v0, v1);
  Data.base64EncodedString(options:)(0);
  outlined consume of Data._Representation(v0, v2);
  swift_release();
  outlined consume of Data._Representation(v0, v2);
  URLQueryItem.init(name:value:)();
  return swift_bridgeObjectRelease();
}

uint64_t IncomingHandoffContext.CodingKeys.stringValue.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_242A2B158 + 4 * byte_242A38120[a1]))(0x456F696475417369, 0xEE0064656C62616ELL);
}

uint64_t sub_242A2B158()
{
  return 0x456F656469567369;
}

uint64_t sub_242A2B16C()
{
  return 0x657079546C6C6163;
}

unint64_t sub_242A2B184()
{
  return 0xD000000000000013;
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance IncomingHandoffContext.CodingKeys(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

void protocol witness for Hashable.hash(into:) in conformance IncomingHandoffContext.CodingKeys()
{
  unsigned __int8 *v0;

  Hasher._combine(_:)(*v0);
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance IncomingHandoffContext.CodingKeys()
{
  unsigned __int8 *v0;

  return IncomingHandoffContext.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance IncomingHandoffContext.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = specialized IncomingHandoffContext.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CodingKey.intValue.getter in conformance IncomingHandoffContext.CodingKeys()
{
  return 0;
}

void protocol witness for CodingKey.init(intValue:) in conformance IncomingHandoffContext.CodingKeys(_BYTE *a1@<X8>)
{
  *a1 = 5;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance IncomingHandoffContext.CodingKeys()
{
  lazy protocol witness table accessor for type IncomingHandoffContext.CodingKeys and conformance IncomingHandoffContext.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance IncomingHandoffContext.CodingKeys()
{
  lazy protocol witness table accessor for type IncomingHandoffContext.CodingKeys and conformance IncomingHandoffContext.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t IncomingHandoffContext.encode(to:)(_QWORD *a1)
{
  unsigned __int8 *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  int v8;
  int v9;
  char v10;
  _DWORD v12[2];
  int v13;
  int v14;
  char v15;
  char v16;
  char v17;
  char v18;
  char v19;
  char v20;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<IncomingHandoffContext.CodingKeys>);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = v1[1];
  v13 = v1[2];
  v14 = v8;
  v9 = v1[3];
  v12[0] = v1[4];
  v12[1] = v9;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type IncomingHandoffContext.CodingKeys and conformance IncomingHandoffContext.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v20 = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v2)
  {
    v10 = v13;
    v19 = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
    v18 = v10;
    v17 = 2;
    lazy protocol witness table accessor for type CallType and conformance CallType();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    v16 = 3;
    KeyedEncodingContainer.encode(_:forKey:)();
    v15 = 4;
    KeyedEncodingContainer.encode(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t IncomingHandoffContext.init(from:)@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char v9;
  char v10;
  char v12;
  uint64_t v13;
  int v14;
  int v15;
  char v16;
  char v17;
  char v18;
  unsigned __int8 v19;
  char v20;
  char v21;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<IncomingHandoffContext.CodingKeys>);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type IncomingHandoffContext.CodingKeys and conformance IncomingHandoffContext.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v2)
  {
    v21 = 0;
    v9 = KeyedDecodingContainer.decode(_:forKey:)();
    v20 = 1;
    v10 = KeyedDecodingContainer.decode(_:forKey:)();
    v18 = 2;
    lazy protocol witness table accessor for type CallType and conformance CallType();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    v15 = v19;
    v17 = 3;
    v14 = KeyedDecodingContainer.decode(_:forKey:)();
    v16 = 4;
    v12 = KeyedDecodingContainer.decode(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    *a2 = v9 & 1;
    a2[1] = v10 & 1;
    a2[2] = v15;
    a2[3] = v14 & 1;
    a2[4] = v12 & 1;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t protocol witness for Decodable.init(from:) in conformance IncomingHandoffContext@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  return IncomingHandoffContext.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance IncomingHandoffContext(_QWORD *a1)
{
  return IncomingHandoffContext.encode(to:)(a1);
}

uint64_t JoinFailureContext.nacErrorCode.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + *(int *)(type metadata accessor for JoinFailureContext(0) + 20));
}

uint64_t JoinFailureContext.init(conversationUUID:nacErrorCode:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  uint64_t result;
  uint64_t v10;

  v8 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(a4, a1, v8);
  result = type metadata accessor for JoinFailureContext(0);
  v10 = a4 + *(int *)(result + 20);
  *(_QWORD *)v10 = a2;
  *(_BYTE *)(v10 + 8) = a3 & 1;
  return result;
}

uint64_t JoinFailureContext.description.getter()
{
  Swift::String v0;
  Swift::String v1;
  Swift::String v2;
  Swift::String v3;
  Swift::String v4;

  _StringGuts.grow(_:)(56);
  v0._object = (void *)0x8000000242A39D20;
  v0._countAndFlagsBits = 0xD000000000000025;
  String.append(_:)(v0);
  type metadata accessor for UUID();
  lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEAB8]);
  v1._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v1);
  swift_bridgeObjectRelease();
  v2._countAndFlagsBits = 0x6F72724563616E20;
  v2._object = (void *)0xEE003D65646F4372;
  String.append(_:)(v2);
  type metadata accessor for JoinFailureContext(0);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Int?);
  v3._countAndFlagsBits = String.init<A>(describing:)();
  String.append(_:)(v3);
  swift_bridgeObjectRelease();
  v4._countAndFlagsBits = 62;
  v4._object = (void *)0xE100000000000000;
  String.append(_:)(v4);
  return 0;
}

uint64_t JoinFailureContext.queryItem.getter()
{
  uint64_t v0;
  unint64_t v1;
  unint64_t v2;

  type metadata accessor for JSONEncoder();
  swift_allocObject();
  JSONEncoder.init()();
  type metadata accessor for JoinFailureContext(0);
  lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type JoinFailureContext and conformance JoinFailureContext, type metadata accessor for JoinFailureContext, (uint64_t)&protocol conformance descriptor for JoinFailureContext);
  v0 = dispatch thunk of JSONEncoder.encode<A>(_:)();
  v2 = v1;
  outlined copy of Data._Representation(v0, v1);
  Data.base64EncodedString(options:)(0);
  outlined consume of Data._Representation(v0, v2);
  swift_release();
  outlined consume of Data._Representation(v0, v2);
  URLQueryItem.init(name:value:)();
  return swift_bridgeObjectRelease();
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance JoinFailureContext.CodingKeys(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance JoinFailureContext.CodingKeys()
{
  unsigned __int8 *v0;
  Swift::UInt v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance JoinFailureContext.CodingKeys()
{
  unsigned __int8 *v0;
  Swift::UInt v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance JoinFailureContext.CodingKeys()
{
  _BYTE *v0;

  if (*v0)
    return 0x726F72724563616ELL;
  else
    return 0xD000000000000010;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance JoinFailureContext.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = specialized JoinFailureContext.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

void protocol witness for CodingKey.init(intValue:) in conformance JoinFailureContext.CodingKeys(_BYTE *a1@<X8>)
{
  *a1 = 2;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance JoinFailureContext.CodingKeys()
{
  lazy protocol witness table accessor for type JoinFailureContext.CodingKeys and conformance JoinFailureContext.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance JoinFailureContext.CodingKeys()
{
  lazy protocol witness table accessor for type JoinFailureContext.CodingKeys and conformance JoinFailureContext.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t JoinFailureContext.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  _BYTE v8[16];

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<JoinFailureContext.CodingKeys>);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v6 = &v8[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type JoinFailureContext.CodingKeys and conformance JoinFailureContext.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v8[15] = 0;
  type metadata accessor for UUID();
  lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEA70]);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v1)
  {
    type metadata accessor for JoinFailureContext(0);
    v8[14] = 1;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
  }
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t JoinFailureContext.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v22;
  char *v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char v30;
  char v31;

  v25 = a2;
  v4 = type metadata accessor for UUID();
  v5 = *(_QWORD *)(v4 - 8);
  v27 = v4;
  v28 = v5;
  MEMORY[0x24BDAC7A8](v4);
  v29 = (char *)&v22 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<JoinFailureContext.CodingKeys>);
  v7 = *(_QWORD *)(v26 - 8);
  MEMORY[0x24BDAC7A8](v26);
  v9 = (char *)&v22 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for JoinFailureContext(0);
  MEMORY[0x24BDAC7A8](v10);
  v12 = (char *)&v22 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type JoinFailureContext.CodingKeys and conformance JoinFailureContext.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2)
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  v23 = v12;
  v24 = a1;
  v13 = v7;
  v14 = v28;
  v31 = 0;
  lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEAA8]);
  v15 = v26;
  v16 = v27;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  v17 = (uint64_t)v23;
  (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v23, v29, v16);
  v30 = 1;
  v18 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  LOBYTE(v14) = v19;
  (*(void (**)(char *, uint64_t))(v13 + 8))(v9, v15);
  v20 = v17 + *(int *)(v10 + 20);
  *(_QWORD *)v20 = v18;
  *(_BYTE *)(v20 + 8) = v14 & 1;
  outlined init with copy of NCProtoContactInfo(v17, v25, type metadata accessor for JoinFailureContext);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v24);
  return outlined destroy of NCProtoContactInfo(v17, type metadata accessor for JoinFailureContext);
}

uint64_t protocol witness for Decodable.init(from:) in conformance JoinFailureContext@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return JoinFailureContext.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance JoinFailureContext(_QWORD *a1)
{
  return JoinFailureContext.encode(to:)(a1);
}

uint64_t JoinFailureContext.conversationUUID.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for UUID();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(a1, v1, v3);
}

uint64_t JoinContinuityConversationRequestContext.isAudioEnabled.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0
                            + *(int *)(type metadata accessor for JoinContinuityConversationRequestContext(0) + 20));
}

uint64_t JoinContinuityConversationRequestContext.isVideoEnabled.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0
                            + *(int *)(type metadata accessor for JoinContinuityConversationRequestContext(0) + 24));
}

uint64_t JoinContinuityConversationRequestContext.wantsStagingArea.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0
                            + *(int *)(type metadata accessor for JoinContinuityConversationRequestContext(0) + 28));
}

int *JoinContinuityConversationRequestContext.init(conversationUUID:isAudioEnabled:isVideoEnabled:wantsStagingArea:)@<X0>(uint64_t a1@<X0>, char a2@<W1>, char a3@<W2>, char a4@<W3>, uint64_t a5@<X8>)
{
  uint64_t v10;
  int *result;

  v10 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(a5, a1, v10);
  result = (int *)type metadata accessor for JoinContinuityConversationRequestContext(0);
  *(_BYTE *)(a5 + result[5]) = a2;
  *(_BYTE *)(a5 + result[6]) = a3;
  *(_BYTE *)(a5 + result[7]) = a4;
  return result;
}

uint64_t JoinContinuityConversationRequestContext.description.getter()
{
  uint64_t v0;
  Swift::String v1;
  Swift::String v2;
  Swift::String v3;
  int *v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  Swift::String v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  Swift::String v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  Swift::String v16;

  _StringGuts.grow(_:)(118);
  v1._countAndFlagsBits = 0xD00000000000003BLL;
  v1._object = (void *)0x8000000242A39D50;
  String.append(_:)(v1);
  type metadata accessor for UUID();
  lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEAB8]);
  v2._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v2);
  swift_bridgeObjectRelease();
  v3._object = (void *)0x8000000242A39D90;
  v3._countAndFlagsBits = 0xD000000000000010;
  String.append(_:)(v3);
  v4 = (int *)type metadata accessor for JoinContinuityConversationRequestContext(0);
  if (*(_BYTE *)(v0 + v4[5]))
    v5 = 1702195828;
  else
    v5 = 0x65736C6166;
  if (*(_BYTE *)(v0 + v4[5]))
    v6 = 0xE400000000000000;
  else
    v6 = 0xE500000000000000;
  v7 = v6;
  String.append(_:)(*(Swift::String *)&v5);
  swift_bridgeObjectRelease();
  v8._object = (void *)0x8000000242A39CC0;
  v8._countAndFlagsBits = 0xD000000000000010;
  String.append(_:)(v8);
  if (*(_BYTE *)(v0 + v4[6]))
    v9 = 1702195828;
  else
    v9 = 0x65736C6166;
  if (*(_BYTE *)(v0 + v4[6]))
    v10 = 0xE400000000000000;
  else
    v10 = 0xE500000000000000;
  v11 = v10;
  String.append(_:)(*(Swift::String *)&v9);
  swift_bridgeObjectRelease();
  v12._countAndFlagsBits = 0xD000000000000012;
  v12._object = (void *)0x8000000242A39DB0;
  String.append(_:)(v12);
  if (*(_BYTE *)(v0 + v4[7]))
    v13 = 1702195828;
  else
    v13 = 0x65736C6166;
  if (*(_BYTE *)(v0 + v4[7]))
    v14 = 0xE400000000000000;
  else
    v14 = 0xE500000000000000;
  v15 = v14;
  String.append(_:)(*(Swift::String *)&v13);
  swift_bridgeObjectRelease();
  v16._countAndFlagsBits = 62;
  v16._object = (void *)0xE100000000000000;
  String.append(_:)(v16);
  return 0;
}

uint64_t JoinContinuityConversationRequestContext.queryItem.getter()
{
  uint64_t v0;
  unint64_t v1;
  unint64_t v2;

  type metadata accessor for JSONEncoder();
  swift_allocObject();
  JSONEncoder.init()();
  type metadata accessor for JoinContinuityConversationRequestContext(0);
  lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type JoinContinuityConversationRequestContext and conformance JoinContinuityConversationRequestContext, type metadata accessor for JoinContinuityConversationRequestContext, (uint64_t)&protocol conformance descriptor for JoinContinuityConversationRequestContext);
  v0 = dispatch thunk of JSONEncoder.encode<A>(_:)();
  v2 = v1;
  outlined copy of Data._Representation(v0, v1);
  Data.base64EncodedString(options:)(0);
  outlined consume of Data._Representation(v0, v2);
  swift_release();
  outlined consume of Data._Representation(v0, v2);
  URLQueryItem.init(name:value:)();
  return swift_bridgeObjectRelease();
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance JoinContinuityConversationRequestContext.CodingKeys()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_242A2C344 + 4 * byte_242A38125[*v0]))(0xD000000000000010, 0x8000000242A39DF0);
}

uint64_t sub_242A2C344()
{
  return 0x456F696475417369;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance JoinContinuityConversationRequestContext.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = specialized JoinContinuityConversationRequestContext.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

void protocol witness for CodingKey.init(intValue:) in conformance JoinContinuityConversationRequestContext.CodingKeys(_BYTE *a1@<X8>)
{
  *a1 = 4;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance JoinContinuityConversationRequestContext.CodingKeys()
{
  lazy protocol witness table accessor for type JoinContinuityConversationRequestContext.CodingKeys and conformance JoinContinuityConversationRequestContext.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance JoinContinuityConversationRequestContext.CodingKeys()
{
  lazy protocol witness table accessor for type JoinContinuityConversationRequestContext.CodingKeys and conformance JoinContinuityConversationRequestContext.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t JoinContinuityConversationRequestContext.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  _BYTE v8[16];

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<JoinContinuityConversationRequestContext.CodingKeys>);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v6 = &v8[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type JoinContinuityConversationRequestContext.CodingKeys and conformance JoinContinuityConversationRequestContext.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v8[15] = 0;
  type metadata accessor for UUID();
  lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEA70]);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v1)
  {
    type metadata accessor for JoinContinuityConversationRequestContext(0);
    v8[14] = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
    v8[13] = 2;
    KeyedEncodingContainer.encode(_:forKey:)();
    v8[12] = 3;
    KeyedEncodingContainer.encode(_:forKey:)();
  }
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t JoinContinuityConversationRequestContext.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  int *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  void (*v16)(uint64_t, char *, uint64_t);
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  char *v23;
  _QWORD *v24;
  char v25;
  char v26;
  char v27;
  char v28;

  v19 = a2;
  v20 = type metadata accessor for UUID();
  v3 = *(_QWORD *)(v20 - 8);
  MEMORY[0x24BDAC7A8](v20);
  v23 = (char *)&v19 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<JoinContinuityConversationRequestContext.CodingKeys>);
  v5 = *(_QWORD *)(v22 - 8);
  MEMORY[0x24BDAC7A8](v22);
  v7 = (char *)&v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = (int *)type metadata accessor for JoinContinuityConversationRequestContext(0);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type JoinContinuityConversationRequestContext.CodingKeys and conformance JoinContinuityConversationRequestContext.CodingKeys();
  v21 = v7;
  v11 = (uint64_t)v24;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v11)
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  v24 = a1;
  v12 = (uint64_t)v10;
  v28 = 0;
  lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEAA8]);
  v13 = v22;
  v15 = v20;
  v14 = v21;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  v16 = *(void (**)(uint64_t, char *, uint64_t))(v3 + 32);
  v17 = v12;
  v16(v12, v23, v15);
  v27 = 1;
  *(_BYTE *)(v12 + v8[5]) = KeyedDecodingContainer.decode(_:forKey:)() & 1;
  v26 = 2;
  *(_BYTE *)(v12 + v8[6]) = KeyedDecodingContainer.decode(_:forKey:)() & 1;
  v25 = 3;
  LOBYTE(v12) = KeyedDecodingContainer.decode(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v5 + 8))(v14, v13);
  *(_BYTE *)(v17 + v8[7]) = v12 & 1;
  outlined init with copy of NCProtoContactInfo(v17, v19, type metadata accessor for JoinContinuityConversationRequestContext);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v24);
  return outlined destroy of NCProtoContactInfo(v17, type metadata accessor for JoinContinuityConversationRequestContext);
}

uint64_t protocol witness for Decodable.init(from:) in conformance JoinContinuityConversationRequestContext@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return JoinContinuityConversationRequestContext.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance JoinContinuityConversationRequestContext(_QWORD *a1)
{
  return JoinContinuityConversationRequestContext.encode(to:)(a1);
}

unint64_t lazy protocol witness table accessor for type IncomingHandoffContext and conformance IncomingHandoffContext()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type IncomingHandoffContext and conformance IncomingHandoffContext;
  if (!lazy protocol witness table cache variable for type IncomingHandoffContext and conformance IncomingHandoffContext)
  {
    result = MEMORY[0x2494EB01C](&protocol conformance descriptor for IncomingHandoffContext, &type metadata for IncomingHandoffContext);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type IncomingHandoffContext and conformance IncomingHandoffContext);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type IncomingHandoffContext and conformance IncomingHandoffContext;
  if (!lazy protocol witness table cache variable for type IncomingHandoffContext and conformance IncomingHandoffContext)
  {
    result = MEMORY[0x2494EB01C](&protocol conformance descriptor for IncomingHandoffContext, &type metadata for IncomingHandoffContext);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type IncomingHandoffContext and conformance IncomingHandoffContext);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type IncomingHandoffContext and conformance IncomingHandoffContext;
  if (!lazy protocol witness table cache variable for type IncomingHandoffContext and conformance IncomingHandoffContext)
  {
    result = MEMORY[0x2494EB01C](&protocol conformance descriptor for IncomingHandoffContext, &type metadata for IncomingHandoffContext);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type IncomingHandoffContext and conformance IncomingHandoffContext);
  }
  return result;
}

BOOL specialized static IncomingHandoffContext.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2 | a1[1] ^ a2[1] | a1[2] ^ a2[2] | a1[3] ^ a2[3] | a2[4] ^ a1[4]) & 1) == 0;
}

_QWORD *__swift_project_boxed_opaque_existential_1(_QWORD *result, uint64_t a2)
{
  if ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) & 0x20000) != 0)
    return (_QWORD *)(*result
                    + ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) + 16) & ~(unint64_t)*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80)));
  return result;
}

unint64_t lazy protocol witness table accessor for type IncomingHandoffContext.CodingKeys and conformance IncomingHandoffContext.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type IncomingHandoffContext.CodingKeys and conformance IncomingHandoffContext.CodingKeys;
  if (!lazy protocol witness table cache variable for type IncomingHandoffContext.CodingKeys and conformance IncomingHandoffContext.CodingKeys)
  {
    result = MEMORY[0x2494EB01C](&protocol conformance descriptor for IncomingHandoffContext.CodingKeys, &unk_251375A58);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type IncomingHandoffContext.CodingKeys and conformance IncomingHandoffContext.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type IncomingHandoffContext.CodingKeys and conformance IncomingHandoffContext.CodingKeys;
  if (!lazy protocol witness table cache variable for type IncomingHandoffContext.CodingKeys and conformance IncomingHandoffContext.CodingKeys)
  {
    result = MEMORY[0x2494EB01C](&protocol conformance descriptor for IncomingHandoffContext.CodingKeys, &unk_251375A58);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type IncomingHandoffContext.CodingKeys and conformance IncomingHandoffContext.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type IncomingHandoffContext.CodingKeys and conformance IncomingHandoffContext.CodingKeys;
  if (!lazy protocol witness table cache variable for type IncomingHandoffContext.CodingKeys and conformance IncomingHandoffContext.CodingKeys)
  {
    result = MEMORY[0x2494EB01C](&protocol conformance descriptor for IncomingHandoffContext.CodingKeys, &unk_251375A58);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type IncomingHandoffContext.CodingKeys and conformance IncomingHandoffContext.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type IncomingHandoffContext.CodingKeys and conformance IncomingHandoffContext.CodingKeys;
  if (!lazy protocol witness table cache variable for type IncomingHandoffContext.CodingKeys and conformance IncomingHandoffContext.CodingKeys)
  {
    result = MEMORY[0x2494EB01C](&protocol conformance descriptor for IncomingHandoffContext.CodingKeys, &unk_251375A58);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type IncomingHandoffContext.CodingKeys and conformance IncomingHandoffContext.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type CallType and conformance CallType()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CallType and conformance CallType;
  if (!lazy protocol witness table cache variable for type CallType and conformance CallType)
  {
    result = MEMORY[0x2494EB01C](&protocol conformance descriptor for CallType, &type metadata for CallType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CallType and conformance CallType);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CallType and conformance CallType;
  if (!lazy protocol witness table cache variable for type CallType and conformance CallType)
  {
    result = MEMORY[0x2494EB01C](&protocol conformance descriptor for CallType, &type metadata for CallType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CallType and conformance CallType);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CallType and conformance CallType;
  if (!lazy protocol witness table cache variable for type CallType and conformance CallType)
  {
    result = MEMORY[0x2494EB01C](&protocol conformance descriptor for CallType, &type metadata for CallType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CallType and conformance CallType);
  }
  return result;
}

uint64_t __swift_destroy_boxed_opaque_existential_1(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 24) - 8);
  if ((*(_BYTE *)(v1 + 82) & 2) != 0)
    return swift_release();
  else
    return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t type metadata accessor for JoinFailureContext(uint64_t a1)
{
  return type metadata accessor for NCProtoContactInfo(a1, (uint64_t *)&type metadata singleton initialization cache for JoinFailureContext);
}

unint64_t lazy protocol witness table accessor for type JoinFailureContext.CodingKeys and conformance JoinFailureContext.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type JoinFailureContext.CodingKeys and conformance JoinFailureContext.CodingKeys;
  if (!lazy protocol witness table cache variable for type JoinFailureContext.CodingKeys and conformance JoinFailureContext.CodingKeys)
  {
    result = MEMORY[0x2494EB01C](&protocol conformance descriptor for JoinFailureContext.CodingKeys, &unk_251375910);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type JoinFailureContext.CodingKeys and conformance JoinFailureContext.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type JoinFailureContext.CodingKeys and conformance JoinFailureContext.CodingKeys;
  if (!lazy protocol witness table cache variable for type JoinFailureContext.CodingKeys and conformance JoinFailureContext.CodingKeys)
  {
    result = MEMORY[0x2494EB01C](&protocol conformance descriptor for JoinFailureContext.CodingKeys, &unk_251375910);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type JoinFailureContext.CodingKeys and conformance JoinFailureContext.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type JoinFailureContext.CodingKeys and conformance JoinFailureContext.CodingKeys;
  if (!lazy protocol witness table cache variable for type JoinFailureContext.CodingKeys and conformance JoinFailureContext.CodingKeys)
  {
    result = MEMORY[0x2494EB01C](&protocol conformance descriptor for JoinFailureContext.CodingKeys, &unk_251375910);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type JoinFailureContext.CodingKeys and conformance JoinFailureContext.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type JoinFailureContext.CodingKeys and conformance JoinFailureContext.CodingKeys;
  if (!lazy protocol witness table cache variable for type JoinFailureContext.CodingKeys and conformance JoinFailureContext.CodingKeys)
  {
    result = MEMORY[0x2494EB01C](&protocol conformance descriptor for JoinFailureContext.CodingKeys, &unk_251375910);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type JoinFailureContext.CodingKeys and conformance JoinFailureContext.CodingKeys);
  }
  return result;
}

uint64_t type metadata accessor for JoinContinuityConversationRequestContext(uint64_t a1)
{
  return type metadata accessor for NCProtoContactInfo(a1, (uint64_t *)&type metadata singleton initialization cache for JoinContinuityConversationRequestContext);
}

unint64_t lazy protocol witness table accessor for type JoinContinuityConversationRequestContext.CodingKeys and conformance JoinContinuityConversationRequestContext.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type JoinContinuityConversationRequestContext.CodingKeys and conformance JoinContinuityConversationRequestContext.CodingKeys;
  if (!lazy protocol witness table cache variable for type JoinContinuityConversationRequestContext.CodingKeys and conformance JoinContinuityConversationRequestContext.CodingKeys)
  {
    result = MEMORY[0x2494EB01C](&protocol conformance descriptor for JoinContinuityConversationRequestContext.CodingKeys, &unk_2513765E8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type JoinContinuityConversationRequestContext.CodingKeys and conformance JoinContinuityConversationRequestContext.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type JoinContinuityConversationRequestContext.CodingKeys and conformance JoinContinuityConversationRequestContext.CodingKeys;
  if (!lazy protocol witness table cache variable for type JoinContinuityConversationRequestContext.CodingKeys and conformance JoinContinuityConversationRequestContext.CodingKeys)
  {
    result = MEMORY[0x2494EB01C](&protocol conformance descriptor for JoinContinuityConversationRequestContext.CodingKeys, &unk_2513765E8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type JoinContinuityConversationRequestContext.CodingKeys and conformance JoinContinuityConversationRequestContext.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type JoinContinuityConversationRequestContext.CodingKeys and conformance JoinContinuityConversationRequestContext.CodingKeys;
  if (!lazy protocol witness table cache variable for type JoinContinuityConversationRequestContext.CodingKeys and conformance JoinContinuityConversationRequestContext.CodingKeys)
  {
    result = MEMORY[0x2494EB01C](&protocol conformance descriptor for JoinContinuityConversationRequestContext.CodingKeys, &unk_2513765E8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type JoinContinuityConversationRequestContext.CodingKeys and conformance JoinContinuityConversationRequestContext.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type JoinContinuityConversationRequestContext.CodingKeys and conformance JoinContinuityConversationRequestContext.CodingKeys;
  if (!lazy protocol witness table cache variable for type JoinContinuityConversationRequestContext.CodingKeys and conformance JoinContinuityConversationRequestContext.CodingKeys)
  {
    result = MEMORY[0x2494EB01C](&protocol conformance descriptor for JoinContinuityConversationRequestContext.CodingKeys, &unk_2513765E8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type JoinContinuityConversationRequestContext.CodingKeys and conformance JoinContinuityConversationRequestContext.CodingKeys);
  }
  return result;
}

unint64_t instantiation function for generic protocol witness table for IncomingHandoffContext(_QWORD *a1)
{
  unint64_t result;

  a1[1] = lazy protocol witness table accessor for type IncomingHandoffContext and conformance IncomingHandoffContext();
  a1[2] = lazy protocol witness table accessor for type IncomingHandoffContext and conformance IncomingHandoffContext();
  result = lazy protocol witness table accessor for type IncomingHandoffContext and conformance IncomingHandoffContext();
  a1[3] = result;
  return result;
}

uint64_t instantiation function for generic protocol witness table for JoinFailureContext(_QWORD *a1)
{
  uint64_t result;

  a1[1] = lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type JoinFailureContext and conformance JoinFailureContext, type metadata accessor for JoinFailureContext, (uint64_t)&protocol conformance descriptor for JoinFailureContext);
  a1[2] = lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type JoinFailureContext and conformance JoinFailureContext, type metadata accessor for JoinFailureContext, (uint64_t)&protocol conformance descriptor for JoinFailureContext);
  result = lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type JoinFailureContext and conformance JoinFailureContext, type metadata accessor for JoinFailureContext, (uint64_t)&protocol conformance descriptor for JoinFailureContext);
  a1[3] = result;
  return result;
}

uint64_t instantiation function for generic protocol witness table for JoinContinuityConversationRequestContext(_QWORD *a1)
{
  uint64_t result;

  a1[1] = lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type JoinContinuityConversationRequestContext and conformance JoinContinuityConversationRequestContext, type metadata accessor for JoinContinuityConversationRequestContext, (uint64_t)&protocol conformance descriptor for JoinContinuityConversationRequestContext);
  a1[2] = lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type JoinContinuityConversationRequestContext and conformance JoinContinuityConversationRequestContext, type metadata accessor for JoinContinuityConversationRequestContext, (uint64_t)&protocol conformance descriptor for JoinContinuityConversationRequestContext);
  result = lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type JoinContinuityConversationRequestContext and conformance JoinContinuityConversationRequestContext, type metadata accessor for JoinContinuityConversationRequestContext, (uint64_t)&protocol conformance descriptor for JoinContinuityConversationRequestContext);
  a1[3] = result;
  return result;
}

uint64_t dispatch thunk of FaceTimeURLContext.queryItem.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t __swift_memcpy5_1(uint64_t result, int *a2)
{
  int v2;

  v2 = *a2;
  *(_BYTE *)(result + 4) = *((_BYTE *)a2 + 4);
  *(_DWORD *)result = v2;
  return result;
}

uint64_t getEnumTagSinglePayload for IncomingHandoffContext(unsigned __int8 *a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && a1[5])
    return (*(_DWORD *)a1 + 255);
  v3 = *a1;
  v4 = v3 >= 2;
  v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for IncomingHandoffContext(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_BYTE *)(result + 4) = 0;
    *(_DWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 5) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 5) = 0;
    if (a2)
      *(_BYTE *)result = a2 + 1;
  }
  return result;
}

ValueMetadata *type metadata accessor for IncomingHandoffContext()
{
  return &type metadata for IncomingHandoffContext;
}

uint64_t *initializeBufferWithCopyOfBuffer for JoinFailureContext(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v11 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v11 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = type metadata accessor for UUID();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = *(int *)(a3 + 20);
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    *(_QWORD *)v9 = *(_QWORD *)v10;
    v9[8] = v10[8];
  }
  return a1;
}

uint64_t initializeWithCopy for JoinFailureContext(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  *(_QWORD *)v8 = *(_QWORD *)v9;
  *(_BYTE *)(v8 + 8) = *(_BYTE *)(v9 + 8);
  return a1;
}

uint64_t assignWithCopy for JoinFailureContext(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;

  v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = *(_BYTE *)(v9 + 8);
  *(_QWORD *)v8 = *(_QWORD *)v9;
  *(_BYTE *)(v8 + 8) = v10;
  return a1;
}

uint64_t initializeWithTake for JoinFailureContext(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  *(_QWORD *)v8 = *(_QWORD *)v9;
  *(_BYTE *)(v8 + 8) = *(_BYTE *)(v9 + 8);
  return a1;
}

uint64_t assignWithTake for JoinFailureContext(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  *(_QWORD *)v8 = *(_QWORD *)v9;
  *(_BYTE *)(v8 + 8) = *(_BYTE *)(v9 + 8);
  return a1;
}

uint64_t getEnumTagSinglePayload for JoinFailureContext()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_242A2CFD8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for UUID();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, a2, v4);
}

uint64_t storeEnumTagSinglePayload for JoinFailureContext()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_242A2D020(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for UUID();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a1, a2, a2, v4);
}

uint64_t type metadata completion function for JoinFailureContext()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

_QWORD *initializeBufferWithCopyOfBuffer for JoinContinuityConversationRequestContext(_QWORD *a1, _QWORD *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v9 = *a2;
    *a1 = *a2;
    a1 = (_QWORD *)(v9 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = type metadata accessor for UUID();
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a3[6];
    *((_BYTE *)a1 + a3[5]) = *((_BYTE *)a2 + a3[5]);
    *((_BYTE *)a1 + v8) = *((_BYTE *)a2 + v8);
    *((_BYTE *)a1 + a3[7]) = *((_BYTE *)a2 + a3[7]);
  }
  return a1;
}

uint64_t destroy for JoinFailureContext(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for UUID();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
}

uint64_t initializeWithCopy for JoinContinuityConversationRequestContext(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;

  v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = a3[6];
  *(_BYTE *)(a1 + a3[5]) = *(_BYTE *)(a2 + a3[5]);
  *(_BYTE *)(a1 + v7) = *(_BYTE *)(a2 + v7);
  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
  return a1;
}

uint64_t assignWithCopy for JoinContinuityConversationRequestContext(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;

  v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  *(_BYTE *)(a1 + a3[5]) = *(_BYTE *)(a2 + a3[5]);
  *(_BYTE *)(a1 + a3[6]) = *(_BYTE *)(a2 + a3[6]);
  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
  return a1;
}

uint64_t initializeWithTake for JoinContinuityConversationRequestContext(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;

  v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = a3[6];
  *(_BYTE *)(a1 + a3[5]) = *(_BYTE *)(a2 + a3[5]);
  *(_BYTE *)(a1 + v7) = *(_BYTE *)(a2 + v7);
  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
  return a1;
}

uint64_t assignWithTake for JoinContinuityConversationRequestContext(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;

  v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = a3[6];
  *(_BYTE *)(a1 + a3[5]) = *(_BYTE *)(a2 + a3[5]);
  *(_BYTE *)(a1 + v7) = *(_BYTE *)(a2 + v7);
  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
  return a1;
}

uint64_t getEnumTagSinglePayload for JoinContinuityConversationRequestContext()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_242A2D370(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unsigned int v9;

  v6 = type metadata accessor for UUID();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(unsigned __int8 *)(a1 + *(int *)(a3 + 20));
  if (v9 >= 2)
    return ((v9 + 2147483646) & 0x7FFFFFFF) + 1;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for JoinContinuityConversationRequestContext()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_242A2D408(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for UUID();
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_BYTE *)(a1 + *(int *)(a4 + 20)) = a2 + 1;
  return result;
}

uint64_t type metadata completion function for JoinContinuityConversationRequestContext()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

_BYTE *__swift_memcpy1_1(_BYTE *result, _BYTE *a2)
{
  *result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for JoinContinuityConversationRequestContext.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFD)
    goto LABEL_17;
  if (a2 + 3 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 3) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 3;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 3;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 3;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 4;
  v8 = v6 - 4;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for JoinContinuityConversationRequestContext.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_242A2D5DC + 4 * byte_242A3812E[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_242A2D610 + 4 * byte_242A38129[v4]))();
}

uint64_t sub_242A2D610(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_242A2D618(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x242A2D620);
  return result;
}

uint64_t sub_242A2D62C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x242A2D634);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_242A2D638(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_242A2D640(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void *type metadata accessor for JoinContinuityConversationRequestContext.CodingKeys()
{
  return &unk_2513765E8;
}

uint64_t getEnumTagSinglePayload for JoinFailureContext.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFF)
    goto LABEL_17;
  if (a2 + 1 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 1) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 1;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 1;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 1;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 2;
  v8 = v6 - 2;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for JoinFailureContext.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_242A2D738 + 4 * byte_242A38138[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_242A2D76C + 4 * byte_242A38133[v4]))();
}

uint64_t sub_242A2D76C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_242A2D774(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x242A2D77CLL);
  return result;
}

uint64_t sub_242A2D788(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x242A2D790);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_242A2D794(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_242A2D79C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t getEnumTag for JoinFailureContext.CodingKeys(unsigned __int8 *a1)
{
  return *a1;
}

_BYTE *destructiveInjectEnumTag for JoinFailureContext.CodingKeys(_BYTE *result, char a2)
{
  *result = a2 & 1;
  return result;
}

void *type metadata accessor for JoinFailureContext.CodingKeys()
{
  return &unk_251375910;
}

uint64_t getEnumTagSinglePayload for IncomingHandoffContext.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFC)
    goto LABEL_17;
  if (a2 + 4 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 4) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 4;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 4;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 4;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 5;
  v8 = v6 - 5;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for IncomingHandoffContext.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_242A2D8A8 + 4 * byte_242A38142[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_242A2D8DC + 4 * byte_242A3813D[v4]))();
}

uint64_t sub_242A2D8DC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_242A2D8E4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x242A2D8ECLL);
  return result;
}

uint64_t sub_242A2D8F8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x242A2D900);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_242A2D904(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_242A2D90C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

_BYTE *destructiveInjectEnumTag for IncomingHandoffContext.CodingKeys(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

void *type metadata accessor for IncomingHandoffContext.CodingKeys()
{
  return &unk_251375A58;
}

uint64_t specialized IncomingHandoffContext.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x456F696475417369 && a2 == 0xEE0064656C62616ELL;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x456F656469567369 && a2 == 0xEE0064656C62616ELL
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x657079546C6C6163 && a2 == 0xE800000000000000
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0xD000000000000013 && a2 == 0x8000000242A39870
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0xD000000000000013 && a2 == 0x8000000242A39DD0)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 4;
    else
      return 5;
  }
}

uint64_t specialized JoinFailureContext.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  char v5;

  if (a1 == 0xD000000000000010 && a2 == 0x8000000242A39DF0
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x726F72724563616ELL && a2 == 0xEC00000065646F43)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v5 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t specialized JoinContinuityConversationRequestContext.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  char v5;

  if (a1 == 0xD000000000000010 && a2 == 0x8000000242A39DF0
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x456F696475417369 && a2 == 0xEE0064656C62616ELL
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x456F656469567369 && a2 == 0xEE0064656C62616ELL
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0xD000000000000010 && a2 == 0x8000000242A39E10)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else
  {
    v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v5 & 1) != 0)
      return 3;
    else
      return 4;
  }
}

BOOL static CallType.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

uint64_t CallType.description.getter()
{
  _BYTE *v0;

  if (*v0)
    return 0x6F656469762ELL;
  else
    return 0x6F696475612ELL;
}

void CallType.hash(into:)()
{
  unsigned __int8 *v0;

  Hasher._combine(_:)(*v0);
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance CallType.AudioCodingKeys()
{
  return 0;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance CallType.AudioCodingKeys@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *a1 = 1;
  return result;
}

void protocol witness for CodingKey.init(intValue:) in conformance CallType.AudioCodingKeys(_BYTE *a1@<X8>)
{
  *a1 = 1;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance CallType.AudioCodingKeys()
{
  lazy protocol witness table accessor for type CallType.AudioCodingKeys and conformance CallType.AudioCodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CallType.AudioCodingKeys()
{
  lazy protocol witness table accessor for type CallType.AudioCodingKeys and conformance CallType.AudioCodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance CallType.CodingKeys()
{
  _BYTE *v0;

  if (*v0)
    return 0x6F65646976;
  else
    return 0x6F69647561;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance CallType.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = specialized CallType.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance CallType.CodingKeys()
{
  lazy protocol witness table accessor for type CallType.CodingKeys and conformance CallType.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CallType.CodingKeys()
{
  lazy protocol witness table accessor for type CallType.CodingKeys and conformance CallType.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance CallType.VideoCodingKeys()
{
  lazy protocol witness table accessor for type CallType.VideoCodingKeys and conformance CallType.VideoCodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CallType.VideoCodingKeys()
{
  lazy protocol witness table accessor for type CallType.VideoCodingKeys and conformance CallType.VideoCodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t CallType.encode(to:)(_QWORD *a1)
{
  char *v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  char v20;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<CallType.VideoCodingKeys>);
  v16 = *(_QWORD *)(v3 - 8);
  v17 = v3;
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v14 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<CallType.AudioCodingKeys>);
  v14 = *(_QWORD *)(v6 - 8);
  v15 = v6;
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<CallType.CodingKeys>);
  v18 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)&v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = *v1;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type CallType.CodingKeys and conformance CallType.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  if ((v12 & 1) != 0)
  {
    v20 = 1;
    lazy protocol witness table accessor for type CallType.VideoCodingKeys and conformance CallType.VideoCodingKeys();
    KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    (*(void (**)(char *, uint64_t))(v16 + 8))(v5, v17);
  }
  else
  {
    v19 = 0;
    lazy protocol witness table accessor for type CallType.AudioCodingKeys and conformance CallType.AudioCodingKeys();
    KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    (*(void (**)(char *, uint64_t))(v14 + 8))(v8, v15);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v18 + 8))(v11, v9);
}

unint64_t lazy protocol witness table accessor for type CallType.CodingKeys and conformance CallType.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CallType.CodingKeys and conformance CallType.CodingKeys;
  if (!lazy protocol witness table cache variable for type CallType.CodingKeys and conformance CallType.CodingKeys)
  {
    result = MEMORY[0x2494EB01C](&protocol conformance descriptor for CallType.CodingKeys, &unk_2513766A0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CallType.CodingKeys and conformance CallType.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CallType.CodingKeys and conformance CallType.CodingKeys;
  if (!lazy protocol witness table cache variable for type CallType.CodingKeys and conformance CallType.CodingKeys)
  {
    result = MEMORY[0x2494EB01C](&protocol conformance descriptor for CallType.CodingKeys, &unk_2513766A0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CallType.CodingKeys and conformance CallType.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CallType.CodingKeys and conformance CallType.CodingKeys;
  if (!lazy protocol witness table cache variable for type CallType.CodingKeys and conformance CallType.CodingKeys)
  {
    result = MEMORY[0x2494EB01C](&protocol conformance descriptor for CallType.CodingKeys, &unk_2513766A0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CallType.CodingKeys and conformance CallType.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CallType.CodingKeys and conformance CallType.CodingKeys;
  if (!lazy protocol witness table cache variable for type CallType.CodingKeys and conformance CallType.CodingKeys)
  {
    result = MEMORY[0x2494EB01C](&protocol conformance descriptor for CallType.CodingKeys, &unk_2513766A0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CallType.CodingKeys and conformance CallType.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type CallType.VideoCodingKeys and conformance CallType.VideoCodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CallType.VideoCodingKeys and conformance CallType.VideoCodingKeys;
  if (!lazy protocol witness table cache variable for type CallType.VideoCodingKeys and conformance CallType.VideoCodingKeys)
  {
    result = MEMORY[0x2494EB01C](&protocol conformance descriptor for CallType.VideoCodingKeys, &unk_251376750);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CallType.VideoCodingKeys and conformance CallType.VideoCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CallType.VideoCodingKeys and conformance CallType.VideoCodingKeys;
  if (!lazy protocol witness table cache variable for type CallType.VideoCodingKeys and conformance CallType.VideoCodingKeys)
  {
    result = MEMORY[0x2494EB01C](&protocol conformance descriptor for CallType.VideoCodingKeys, &unk_251376750);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CallType.VideoCodingKeys and conformance CallType.VideoCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CallType.VideoCodingKeys and conformance CallType.VideoCodingKeys;
  if (!lazy protocol witness table cache variable for type CallType.VideoCodingKeys and conformance CallType.VideoCodingKeys)
  {
    result = MEMORY[0x2494EB01C](&protocol conformance descriptor for CallType.VideoCodingKeys, &unk_251376750);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CallType.VideoCodingKeys and conformance CallType.VideoCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type CallType.AudioCodingKeys and conformance CallType.AudioCodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CallType.AudioCodingKeys and conformance CallType.AudioCodingKeys;
  if (!lazy protocol witness table cache variable for type CallType.AudioCodingKeys and conformance CallType.AudioCodingKeys)
  {
    result = MEMORY[0x2494EB01C](&protocol conformance descriptor for CallType.AudioCodingKeys, &unk_251376730);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CallType.AudioCodingKeys and conformance CallType.AudioCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CallType.AudioCodingKeys and conformance CallType.AudioCodingKeys;
  if (!lazy protocol witness table cache variable for type CallType.AudioCodingKeys and conformance CallType.AudioCodingKeys)
  {
    result = MEMORY[0x2494EB01C](&protocol conformance descriptor for CallType.AudioCodingKeys, &unk_251376730);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CallType.AudioCodingKeys and conformance CallType.AudioCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CallType.AudioCodingKeys and conformance CallType.AudioCodingKeys;
  if (!lazy protocol witness table cache variable for type CallType.AudioCodingKeys and conformance CallType.AudioCodingKeys)
  {
    result = MEMORY[0x2494EB01C](&protocol conformance descriptor for CallType.AudioCodingKeys, &unk_251376730);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CallType.AudioCodingKeys and conformance CallType.AudioCodingKeys);
  }
  return result;
}

Swift::Int CallType.hashValue.getter()
{
  unsigned __int8 *v0;
  Swift::UInt v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t CallType.init(from:)@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  _BYTE *v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  _BYTE *v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  char v35;

  v30 = a2;
  v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<CallType.VideoCodingKeys>);
  v32 = *(_QWORD *)(v29 - 8);
  MEMORY[0x24BDAC7A8](v29);
  v31 = (char *)&v26 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<CallType.AudioCodingKeys>);
  v4 = *(_QWORD *)(v28 - 8);
  MEMORY[0x24BDAC7A8](v28);
  v6 = (char *)&v26 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<CallType.CodingKeys>);
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)&v26 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type CallType.CodingKeys and conformance CallType.CodingKeys();
  v11 = v33;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v11)
    goto LABEL_7;
  v26 = v4;
  v27 = a1;
  v12 = v31;
  v13 = v32;
  v33 = v8;
  v14 = KeyedDecodingContainer.allKeys.getter();
  v15 = v7;
  if (*(_QWORD *)(v14 + 16) != 1)
  {
    v19 = type metadata accessor for DecodingError();
    swift_allocError();
    v21 = v20;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
    *v21 = &type metadata for CallType;
    KeyedDecodingContainer.codingPath.getter();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v19 - 8) + 104))(v21, *MEMORY[0x24BEE26D0], v19);
    swift_willThrow();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v33 + 8))(v10, v15);
    a1 = v27;
LABEL_7:
    v24 = (uint64_t)a1;
    return __swift_destroy_boxed_opaque_existential_1(v24);
  }
  v16 = *(_BYTE *)(v14 + 32);
  if ((v16 & 1) != 0)
  {
    LODWORD(v28) = *(unsigned __int8 *)(v14 + 32);
    v35 = 1;
    lazy protocol witness table accessor for type CallType.VideoCodingKeys and conformance CallType.VideoCodingKeys();
    KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    v17 = v33;
    v18 = v30;
    (*(void (**)(char *, uint64_t))(v13 + 8))(v12, v29);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v17 + 8))(v10, v15);
    v16 = v28;
  }
  else
  {
    v34 = 0;
    lazy protocol witness table accessor for type CallType.AudioCodingKeys and conformance CallType.AudioCodingKeys();
    v22 = v6;
    KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    v23 = v33;
    v18 = v30;
    (*(void (**)(char *, uint64_t))(v26 + 8))(v22, v28);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v23 + 8))(v10, v15);
  }
  *v18 = v16;
  v24 = (uint64_t)v27;
  return __swift_destroy_boxed_opaque_existential_1(v24);
}

uint64_t protocol witness for Decodable.init(from:) in conformance CallType@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  return CallType.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance CallType(_QWORD *a1)
{
  return CallType.encode(to:)(a1);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance CallType()
{
  _BYTE *v0;

  if (*v0)
    return 0x6F656469762ELL;
  else
    return 0x6F696475612ELL;
}

ValueMetadata *type metadata accessor for CallType()
{
  return &type metadata for CallType;
}

uint64_t storeEnumTagSinglePayload for CallType(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_242A2EA28 + 4 * byte_242A38765[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_242A2EA5C + 4 * byte_242A38760[v4]))();
}

uint64_t sub_242A2EA5C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_242A2EA64(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x242A2EA6CLL);
  return result;
}

uint64_t sub_242A2EA78(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x242A2EA80);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_242A2EA84(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_242A2EA8C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void *type metadata accessor for CallType.CodingKeys()
{
  return &unk_2513766A0;
}

void *type metadata accessor for CallType.AudioCodingKeys()
{
  return &unk_251376730;
}

void *type metadata accessor for CallType.VideoCodingKeys()
{
  return &unk_251376750;
}

uint64_t specialized CallType.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x6F69647561 && a2 == 0xE500000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6F65646976 && a2 == 0xE500000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t FaceTimeURLQueryItemName.rawValue.getter(char a1)
{
  if (!a1)
    return 0xD000000000000020;
  if (a1 == 1)
    return 0xD00000000000001ELL;
  return 0x676E696D6F636E69;
}

uint64_t static FaceTimeURL.from(queryItems:)@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void (*v39)(char *, uint64_t, uint64_t);
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  void (*v44)(char *, uint64_t);
  uint64_t v45;
  void (*v46)(char *, char *, uint64_t);
  char *v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  uint64_t result;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char v62;
  void (*v63)(char *, char *, uint64_t);
  char *v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  unint64_t v69;
  unint64_t v70;
  uint64_t v71;
  unint64_t v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char v77;
  void (*v78)(char *, char *, uint64_t);
  char *v79;
  char *v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  unint64_t v84;
  unint64_t v85;
  uint64_t v86;
  unint64_t v87;
  unint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  _BYTE *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  char v101;
  char v102;
  char v103;
  char v104;
  char *v105;
  uint64_t v106;
  char *v107;
  char *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  char *v113;
  _BYTE *v114;
  uint64_t v115;
  char *v116;
  uint64_t v117;
  char *v118;
  uint64_t v119;
  char *v120;
  uint64_t v121;
  uint64_t v122;
  char *v123;
  char *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  char *v128;
  char *v129;
  uint64_t v130;
  void (*v131)(char *, uint64_t, uint64_t);
  char v132;
  char v133;
  char v134;
  char v135;
  char v136;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for JoinFailureContext?);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v105 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v117 = type metadata accessor for JoinFailureContext(0);
  v111 = *(_QWORD *)(v117 - 8);
  MEMORY[0x24BDAC7A8](v117);
  v109 = (uint64_t)&v105 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for JoinContinuityConversationRequestContext?);
  MEMORY[0x24BDAC7A8](v8);
  v113 = (char *)&v105 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v119 = type metadata accessor for JoinContinuityConversationRequestContext(0);
  v112 = *(_QWORD *)(v119 - 8);
  MEMORY[0x24BDAC7A8](v119);
  v110 = (uint64_t)&v105 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for String.Encoding();
  v121 = *(_QWORD *)(v11 - 8);
  v122 = v11;
  MEMORY[0x24BDAC7A8](v11);
  v120 = (char *)&v105 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for URLQueryItem();
  v14 = *(_QWORD *)(v13 - 8);
  v15 = MEMORY[0x24BDAC7A8](v13);
  v128 = (char *)&v105 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = MEMORY[0x24BDAC7A8](v15);
  v19 = (char *)&v105 - v18;
  v20 = MEMORY[0x24BDAC7A8](v17);
  v22 = (char *)&v105 - v21;
  v23 = MEMORY[0x24BDAC7A8](v20);
  v129 = (char *)&v105 - v24;
  v25 = MEMORY[0x24BDAC7A8](v23);
  v116 = (char *)&v105 - v26;
  v27 = MEMORY[0x24BDAC7A8](v25);
  v123 = (char *)&v105 - v28;
  v29 = MEMORY[0x24BDAC7A8](v27);
  v31 = (char *)&v105 - v30;
  v32 = MEMORY[0x24BDAC7A8](v29);
  v118 = (char *)&v105 - v33;
  MEMORY[0x24BDAC7A8](v32);
  v124 = (char *)&v105 - v34;
  type metadata accessor for JSONDecoder();
  swift_allocObject();
  v35 = JSONDecoder.init()();
  v36 = *(_QWORD *)(a1 + 16);
  if (v36)
  {
    v105 = v6;
    v107 = v19;
    v115 = v35;
    v106 = 0;
    v108 = v22;
    v114 = a2;
    v37 = a1 + ((*(unsigned __int8 *)(v14 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80));
    v38 = *(_QWORD *)(v14 + 72);
    v125 = a1;
    v126 = v14;
    v39 = *(void (**)(char *, uint64_t, uint64_t))(v14 + 16);
    v130 = v38;
    v131 = v39;
    swift_bridgeObjectRetain();
    v40 = v37;
    v127 = v36;
    v41 = v36;
    while (1)
    {
      v131(v31, v40, v13);
      if (URLQueryItem.name.getter() == 0xD000000000000020 && v42 == 0x8000000242A38BE0)
        break;
      v43 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if ((v43 & 1) != 0)
        goto LABEL_10;
      v44 = *(void (**)(char *, uint64_t))(v126 + 8);
      v44(v31, v13);
      v40 += v130;
      if (!--v41)
      {
        swift_bridgeObjectRelease();
        goto LABEL_14;
      }
    }
    swift_bridgeObjectRelease();
LABEL_10:
    swift_bridgeObjectRelease();
    v45 = v126;
    v46 = *(void (**)(char *, char *, uint64_t))(v126 + 32);
    v47 = v118;
    v46(v118, v31, v13);
    v46(v124, v47, v13);
    URLQueryItem.value.getter();
    v48 = v119;
    if (!v49)
      goto LABEL_13;
    v50 = v120;
    static String.Encoding.utf8.getter();
    v51 = String.data(using:allowLossyConversion:)();
    v53 = v52;
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v121 + 8))(v50, v122);
    if (v53 >> 60 == 15
      || (v54 = Data.init(base64Encoded:options:)(), v56 = v55, outlined consume of Data?(v51, v53), v56 >> 60 == 15))
    {
LABEL_13:
      v44 = *(void (**)(char *, uint64_t))(v45 + 8);
      v44(v124, v13);
    }
    else
    {
      lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type JoinContinuityConversationRequestContext and conformance JoinContinuityConversationRequestContext, type metadata accessor for JoinContinuityConversationRequestContext, (uint64_t)&protocol conformance descriptor for JoinContinuityConversationRequestContext);
      v90 = (uint64_t)v113;
      v91 = v106;
      dispatch thunk of JSONDecoder.decode<A>(_:from:)();
      if (!v91)
      {
        (*(void (**)(char *, uint64_t))(v45 + 8))(v124, v13);
        outlined consume of Data?(v54, v56);
        (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v112 + 56))(v90, 0, 1, v48);
        swift_release();
        v95 = v110;
        outlined init with take of NCProtoContactInfo(v90, v110, type metadata accessor for JoinContinuityConversationRequestContext);
        v96 = v95;
        v97 = v114;
        outlined init with take of NCProtoContactInfo(v96, (uint64_t)v114, type metadata accessor for JoinContinuityConversationRequestContext);
        v98 = type metadata accessor for FaceTimeURL();
        goto LABEL_49;
      }
      outlined consume of Data?(v54, v56);
      MEMORY[0x2494EAFD4](v91);
      v44 = *(void (**)(char *, uint64_t))(v45 + 8);
      v44(v124, v13);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v112 + 56))(v90, 1, 1, v48);
      outlined destroy of NCProtoContactInfo?(v90, &demangling cache variable for type metadata for JoinContinuityConversationRequestContext?);
      v106 = 0;
    }
LABEL_14:
    result = swift_bridgeObjectRetain();
    v58 = 0;
    v59 = v37;
    while (1)
    {
      v60 = v58 + 1;
      if (__OFADD__(v58, 1))
      {
        __break(1u);
LABEL_51:
        __break(1u);
        return result;
      }
      v131(v129, v59, v13);
      if (URLQueryItem.name.getter() == 0xD00000000000001ELL && v61 == 0x8000000242A38C10)
        break;
      v62 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if ((v62 & 1) != 0)
        goto LABEL_22;
      result = ((uint64_t (*)(char *, uint64_t))v44)(v129, v13);
      ++v58;
      v59 += v130;
      if (v60 == v127)
      {
        swift_bridgeObjectRelease();
        goto LABEL_26;
      }
    }
    swift_bridgeObjectRelease();
LABEL_22:
    swift_bridgeObjectRelease();
    v63 = *(void (**)(char *, char *, uint64_t))(v126 + 32);
    v64 = v116;
    v63(v116, v129, v13);
    v63(v123, v64, v13);
    URLQueryItem.value.getter();
    v65 = v117;
    if (!v66)
      goto LABEL_25;
    v67 = v120;
    static String.Encoding.utf8.getter();
    v68 = String.data(using:allowLossyConversion:)();
    v70 = v69;
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v121 + 8))(v67, v122);
    if (v70 >> 60 == 15
      || (v71 = Data.init(base64Encoded:options:)(), v73 = v72, outlined consume of Data?(v68, v70), v73 >> 60 == 15))
    {
LABEL_25:
      v44(v123, v13);
    }
    else
    {
      lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type JoinFailureContext and conformance JoinFailureContext, type metadata accessor for JoinFailureContext, (uint64_t)&protocol conformance descriptor for JoinFailureContext);
      v92 = (uint64_t)v105;
      v93 = v106;
      dispatch thunk of JSONDecoder.decode<A>(_:from:)();
      if (!v93)
      {
        v44(v123, v13);
        outlined consume of Data?(v71, v73);
        (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v111 + 56))(v92, 0, 1, v65);
        swift_release();
        v99 = v109;
        outlined init with take of NCProtoContactInfo(v92, v109, type metadata accessor for JoinFailureContext);
        v100 = v99;
        v97 = v114;
        outlined init with take of NCProtoContactInfo(v100, (uint64_t)v114, type metadata accessor for JoinFailureContext);
        v98 = type metadata accessor for FaceTimeURL();
        goto LABEL_49;
      }
      outlined consume of Data?(v71, v73);
      MEMORY[0x2494EAFD4](v93);
      v44(v123, v13);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v111 + 56))(v92, 1, 1, v65);
      outlined destroy of NCProtoContactInfo?(v92, &demangling cache variable for type metadata for JoinFailureContext?);
      v106 = 0;
    }
LABEL_26:
    result = swift_bridgeObjectRetain();
    v74 = 0;
    while (1)
    {
      v75 = v74 + 1;
      if (__OFADD__(v74, 1))
        goto LABEL_51;
      v131(v128, v37, v13);
      if (URLQueryItem.name.getter() == 0x676E696D6F636E69 && v76 == 0xEF66666F646E6148)
        break;
      v77 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if ((v77 & 1) != 0)
        goto LABEL_34;
      result = ((uint64_t (*)(char *, uint64_t))v44)(v128, v13);
      ++v74;
      v37 += v130;
      if (v75 == v127)
      {
        swift_release();
        swift_bridgeObjectRelease();
LABEL_38:
        a2 = v114;
        goto LABEL_39;
      }
    }
    swift_bridgeObjectRelease();
LABEL_34:
    swift_bridgeObjectRelease();
    v78 = *(void (**)(char *, char *, uint64_t))(v126 + 32);
    v79 = v107;
    v78(v107, v128, v13);
    v80 = v108;
    v78(v108, v79, v13);
    URLQueryItem.value.getter();
    if (!v81)
      goto LABEL_37;
    v82 = v120;
    static String.Encoding.utf8.getter();
    v83 = String.data(using:allowLossyConversion:)();
    v85 = v84;
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v121 + 8))(v82, v122);
    if (v85 >> 60 == 15
      || (v86 = Data.init(base64Encoded:options:)(), v88 = v87, outlined consume of Data?(v83, v85), v88 >> 60 == 15))
    {
LABEL_37:
      v44(v80, v13);
      swift_release();
      goto LABEL_38;
    }
    lazy protocol witness table accessor for type IncomingHandoffContext and conformance IncomingHandoffContext();
    v94 = v106;
    dispatch thunk of JSONDecoder.decode<A>(_:from:)();
    if (v94)
    {
      swift_release();
      outlined consume of Data?(v86, v88);
      MEMORY[0x2494EAFD4](v94);
      v44(v80, v13);
      goto LABEL_38;
    }
    v44(v80, v13);
    swift_release();
    outlined consume of Data?(v86, v88);
    v101 = v133;
    v102 = v134;
    v103 = v135;
    v104 = v136;
    v97 = v114;
    *v114 = v132;
    v97[1] = v101;
    v97[2] = v102;
    v97[3] = v103;
    v97[4] = v104;
    v98 = type metadata accessor for FaceTimeURL();
LABEL_49:
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v98 - 8) + 56))(v97, 0, 1, v98);
  }
  else
  {
    swift_release();
LABEL_39:
    v89 = type metadata accessor for FaceTimeURL();
    return (*(uint64_t (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v89 - 8) + 56))(a2, 1, 1, v89);
  }
}

uint64_t type metadata accessor for FaceTimeURL()
{
  uint64_t result;

  result = type metadata singleton initialization cache for FaceTimeURL;
  if (!type metadata singleton initialization cache for FaceTimeURL)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance FaceTimeURLQueryItemName(_BYTE *a1, _BYTE *a2)
{
  unint64_t v2;
  int v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char v11;

  v2 = 0xD00000000000001ELL;
  v3 = *a1;
  v4 = 0x8000000242A38C10;
  v5 = 0x676E696D6F636E69;
  v6 = 0xEF66666F646E6148;
  if (v3 == 1)
  {
    v5 = 0xD00000000000001ELL;
    v6 = 0x8000000242A38C10;
  }
  if (*a1)
    v7 = v5;
  else
    v7 = 0xD000000000000020;
  if (v3)
    v8 = v6;
  else
    v8 = 0x8000000242A38BE0;
  if (*a2 != 1)
  {
    v2 = 0x676E696D6F636E69;
    v4 = 0xEF66666F646E6148;
  }
  if (*a2)
    v9 = v2;
  else
    v9 = 0xD000000000000020;
  if (*a2)
    v10 = v4;
  else
    v10 = 0x8000000242A38BE0;
  if (v7 == v9 && v8 == v10)
    v11 = 1;
  else
    v11 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v11 & 1;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance FaceTimeURLQueryItemName()
{
  Hasher.init(_seed:)();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance FaceTimeURLQueryItemName()
{
  String.hash(into:)();
  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance FaceTimeURLQueryItemName()
{
  Hasher.init(_seed:)();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

unint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance FaceTimeURLQueryItemName@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = specialized FaceTimeURLQueryItemName.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance FaceTimeURLQueryItemName(unint64_t *a1@<X8>)
{
  _BYTE *v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;

  v2 = 0xD00000000000001ELL;
  v3 = 0x8000000242A38C10;
  if (*v1 != 1)
  {
    v2 = 0x676E696D6F636E69;
    v3 = 0xEF66666F646E6148;
  }
  if (*v1)
  {
    v4 = v3;
  }
  else
  {
    v2 = 0xD000000000000020;
    v4 = 0x8000000242A38BE0;
  }
  *a1 = v2;
  a1[1] = v4;
}

unint64_t specialized FaceTimeURLQueryItemName.init(rawValue:)(Swift::String string)
{
  void *object;
  Swift::String v2;
  unint64_t v3;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of FaceTimeURLQueryItemName.init(rawValue:), v2);
  swift_bridgeObjectRelease();
  if (v3 >= 3)
    return 3;
  else
    return v3;
}

unint64_t lazy protocol witness table accessor for type FaceTimeURLQueryItemName and conformance FaceTimeURLQueryItemName()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type FaceTimeURLQueryItemName and conformance FaceTimeURLQueryItemName;
  if (!lazy protocol witness table cache variable for type FaceTimeURLQueryItemName and conformance FaceTimeURLQueryItemName)
  {
    result = MEMORY[0x2494EB01C](&protocol conformance descriptor for FaceTimeURLQueryItemName, &type metadata for FaceTimeURLQueryItemName);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type FaceTimeURLQueryItemName and conformance FaceTimeURLQueryItemName);
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for FaceTimeURL(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  int v6;
  int EnumCaseMultiPayload;
  uint64_t v8;
  int *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;

  v5 = *(_QWORD *)(a3 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  if ((v6 & 0x20000) != 0)
  {
    v10 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v10 + ((v6 + 16) & ~(unint64_t)v6));
    swift_retain();
  }
  else
  {
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 1)
    {
      v11 = type metadata accessor for UUID();
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(a1, a2, v11);
      v12 = *(int *)(type metadata accessor for JoinFailureContext(0) + 20);
      v13 = (char *)a1 + v12;
      v14 = (char *)a2 + v12;
      *(_QWORD *)v13 = *(_QWORD *)v14;
      v13[8] = v14[8];
      swift_storeEnumTagMultiPayload();
    }
    else if (EnumCaseMultiPayload)
    {
      memcpy(a1, a2, *(_QWORD *)(v5 + 64));
    }
    else
    {
      v8 = type metadata accessor for UUID();
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(a1, a2, v8);
      v9 = (int *)type metadata accessor for JoinContinuityConversationRequestContext(0);
      *((_BYTE *)a1 + v9[5]) = *((_BYTE *)a2 + v9[5]);
      *((_BYTE *)a1 + v9[6]) = *((_BYTE *)a2 + v9[6]);
      *((_BYTE *)a1 + v9[7]) = *((_BYTE *)a2 + v9[7]);
      swift_storeEnumTagMultiPayload();
    }
  }
  return a1;
}

uint64_t destroy for FaceTimeURL(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;

  result = swift_getEnumCaseMultiPayload();
  if (result <= 1)
  {
    v3 = type metadata accessor for UUID();
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  }
  return result;
}

char *initializeWithCopy for FaceTimeURL(char *a1, char *a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  uint64_t v7;
  int *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;

  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 1)
  {
    v9 = type metadata accessor for UUID();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(a1, a2, v9);
    v10 = *(int *)(type metadata accessor for JoinFailureContext(0) + 20);
    v11 = &a1[v10];
    v12 = &a2[v10];
    *(_QWORD *)v11 = *(_QWORD *)v12;
    v11[8] = v12[8];
    swift_storeEnumTagMultiPayload();
  }
  else if (EnumCaseMultiPayload)
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  else
  {
    v7 = type metadata accessor for UUID();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = (int *)type metadata accessor for JoinContinuityConversationRequestContext(0);
    a1[v8[5]] = a2[v8[5]];
    a1[v8[6]] = a2[v8[6]];
    a1[v8[7]] = a2[v8[7]];
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

char *assignWithCopy for FaceTimeURL(char *a1, char *a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  uint64_t v7;
  int *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char v13;

  if (a1 != a2)
  {
    outlined destroy of FaceTimeURL((uint64_t)a1);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 1)
    {
      v9 = type metadata accessor for UUID();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(a1, a2, v9);
      v10 = *(int *)(type metadata accessor for JoinFailureContext(0) + 20);
      v11 = &a1[v10];
      v12 = &a2[v10];
      v13 = v12[8];
      *(_QWORD *)v11 = *(_QWORD *)v12;
      v11[8] = v13;
      swift_storeEnumTagMultiPayload();
    }
    else if (EnumCaseMultiPayload)
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
    }
    else
    {
      v7 = type metadata accessor for UUID();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
      v8 = (int *)type metadata accessor for JoinContinuityConversationRequestContext(0);
      a1[v8[5]] = a2[v8[5]];
      a1[v8[6]] = a2[v8[6]];
      a1[v8[7]] = a2[v8[7]];
      swift_storeEnumTagMultiPayload();
    }
  }
  return a1;
}

uint64_t outlined destroy of FaceTimeURL(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for FaceTimeURL();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

char *initializeWithTake for FaceTimeURL(char *a1, char *a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  uint64_t v7;
  int *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;

  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 1)
  {
    v9 = type metadata accessor for UUID();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(a1, a2, v9);
    v10 = *(int *)(type metadata accessor for JoinFailureContext(0) + 20);
    v11 = &a1[v10];
    v12 = &a2[v10];
    *(_QWORD *)v11 = *(_QWORD *)v12;
    v11[8] = v12[8];
    swift_storeEnumTagMultiPayload();
  }
  else if (EnumCaseMultiPayload)
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  else
  {
    v7 = type metadata accessor for UUID();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
    v8 = (int *)type metadata accessor for JoinContinuityConversationRequestContext(0);
    a1[v8[5]] = a2[v8[5]];
    a1[v8[6]] = a2[v8[6]];
    a1[v8[7]] = a2[v8[7]];
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

char *assignWithTake for FaceTimeURL(char *a1, char *a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  uint64_t v7;
  int *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;

  if (a1 != a2)
  {
    outlined destroy of FaceTimeURL((uint64_t)a1);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 1)
    {
      v9 = type metadata accessor for UUID();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(a1, a2, v9);
      v10 = *(int *)(type metadata accessor for JoinFailureContext(0) + 20);
      v11 = &a1[v10];
      v12 = &a2[v10];
      *(_QWORD *)v11 = *(_QWORD *)v12;
      v11[8] = v12[8];
      swift_storeEnumTagMultiPayload();
    }
    else if (EnumCaseMultiPayload)
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
    }
    else
    {
      v7 = type metadata accessor for UUID();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
      v8 = (int *)type metadata accessor for JoinContinuityConversationRequestContext(0);
      a1[v8[5]] = a2[v8[5]];
      a1[v8[6]] = a2[v8[6]];
      a1[v8[7]] = a2[v8[7]];
      swift_storeEnumTagMultiPayload();
    }
  }
  return a1;
}

uint64_t type metadata completion function for FaceTimeURL()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;

  result = type metadata accessor for JoinContinuityConversationRequestContext(319);
  if (v1 <= 0x3F)
  {
    result = type metadata accessor for JoinFailureContext(319);
    if (v2 <= 0x3F)
    {
      swift_initEnumMetadataMultiPayload();
      return 0;
    }
  }
  return result;
}

uint64_t getEnumTagSinglePayload for FaceTimeURLQueryItemName(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFE)
    goto LABEL_17;
  if (a2 + 2 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 2) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 2;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 2;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 2;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 3;
  v8 = v6 - 3;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for FaceTimeURLQueryItemName(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_242A305EC + 4 * byte_242A38AF5[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_242A30620 + 4 * byte_242A38AF0[v4]))();
}

uint64_t sub_242A30620(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_242A30628(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x242A30630);
  return result;
}

uint64_t sub_242A3063C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x242A30644);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_242A30648(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_242A30650(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for FaceTimeURLQueryItemName()
{
  return &type metadata for FaceTimeURLQueryItemName;
}

uint64_t dispatch thunk of JSONDecoder.decode<A>(_:from:)()
{
  return MEMORY[0x24BDCB220]();
}

uint64_t JSONDecoder.init()()
{
  return MEMORY[0x24BDCB260]();
}

uint64_t type metadata accessor for JSONDecoder()
{
  return MEMORY[0x24BDCB268]();
}

uint64_t dispatch thunk of JSONEncoder.encode<A>(_:)()
{
  return MEMORY[0x24BDCB3B8]();
}

uint64_t JSONEncoder.init()()
{
  return MEMORY[0x24BDCB400]();
}

uint64_t type metadata accessor for JSONEncoder()
{
  return MEMORY[0x24BDCB410]();
}

uint64_t URLQueryItem.init(name:value:)()
{
  return MEMORY[0x24BDCB958]();
}

uint64_t URLQueryItem.name.getter()
{
  return MEMORY[0x24BDCB960]();
}

uint64_t URLQueryItem.value.getter()
{
  return MEMORY[0x24BDCB980]();
}

uint64_t type metadata accessor for URLQueryItem()
{
  return MEMORY[0x24BDCB988]();
}

uint64_t __DataStorage._bytes.getter()
{
  return MEMORY[0x24BDCBBC8]();
}

uint64_t __DataStorage._length.getter()
{
  return MEMORY[0x24BDCBBD8]();
}

uint64_t __DataStorage._offset.getter()
{
  return MEMORY[0x24BDCBBF0]();
}

uint64_t Data.init(base64Encoded:options:)()
{
  return MEMORY[0x24BDCDC00]();
}

Swift::String __swiftcall Data.base64EncodedString(options:)(NSDataBase64EncodingOptions options)
{
  uint64_t v1;
  void *v2;
  Swift::String result;

  v1 = MEMORY[0x24BDCDCA8](options);
  result._object = v2;
  result._countAndFlagsBits = v1;
  return result;
}

uint64_t type metadata accessor for UUID()
{
  return MEMORY[0x24BDCEA58]();
}

uint64_t type metadata accessor for Google_Protobuf_Value()
{
  return MEMORY[0x24BE5BE08]();
}

uint64_t type metadata accessor for ProtobufBool()
{
  return MEMORY[0x24BE5BE40]();
}

uint64_t type metadata accessor for ProtobufString()
{
  return MEMORY[0x24BE5BEC0]();
}

uint64_t UnknownStorage.traverse<A>(visitor:)()
{
  return MEMORY[0x24BE5BF00]();
}

uint64_t UnknownStorage.init()()
{
  return MEMORY[0x24BE5BF08]();
}

uint64_t type metadata accessor for UnknownStorage()
{
  return MEMORY[0x24BE5BF10]();
}

uint64_t _MessageImplementationBase._protobuf_generated_isEqualTo(other:)()
{
  return MEMORY[0x24BE5C008]();
}

uint64_t _MessageImplementationBase.isEqualTo(message:)()
{
  return MEMORY[0x24BE5C010]();
}

uint64_t Enum.hash(into:)()
{
  return MEMORY[0x24BE5C018]();
}

uint64_t dispatch thunk of Decoder.decodeMapField<A, B>(fieldType:value:)()
{
  return MEMORY[0x24BE5C028]();
}

{
  return MEMORY[0x24BE5C030]();
}

uint64_t dispatch thunk of Decoder.nextFieldNumber()()
{
  return MEMORY[0x24BE5C038]();
}

uint64_t dispatch thunk of Decoder.handleConflictingOneOf()()
{
  return MEMORY[0x24BE5C048]();
}

uint64_t dispatch thunk of Decoder.decodeRepeatedEnumField<A>(value:)()
{
  return MEMORY[0x24BE5C058]();
}

uint64_t dispatch thunk of Decoder.decodeSingularBoolField(value:)()
{
  return MEMORY[0x24BE5C060]();
}

{
  return MEMORY[0x24BE5C068]();
}

uint64_t dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)()
{
  return MEMORY[0x24BE5C070]();
}

{
  return MEMORY[0x24BE5C078]();
}

uint64_t dispatch thunk of Decoder.decodeRepeatedBytesField(value:)()
{
  return MEMORY[0x24BE5C080]();
}

uint64_t dispatch thunk of Decoder.decodeSingularBytesField(value:)()
{
  return MEMORY[0x24BE5C0A0]();
}

{
  return MEMORY[0x24BE5C0A8]();
}

uint64_t dispatch thunk of Decoder.decodeSingularInt64Field(value:)()
{
  return MEMORY[0x24BE5C0D0]();
}

uint64_t dispatch thunk of Decoder.decodeRepeatedStringField(value:)()
{
  return MEMORY[0x24BE5C0E8]();
}

uint64_t dispatch thunk of Decoder.decodeSingularDoubleField(value:)()
{
  return MEMORY[0x24BE5C108]();
}

uint64_t dispatch thunk of Decoder.decodeSingularStringField(value:)()
{
  return MEMORY[0x24BE5C118]();
}

{
  return MEMORY[0x24BE5C120]();
}

uint64_t dispatch thunk of Decoder.decodeSingularUInt64Field(value:)()
{
  return MEMORY[0x24BE5C138]();
}

{
  return MEMORY[0x24BE5C140]();
}

uint64_t dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)()
{
  return MEMORY[0x24BE5C148]();
}

uint64_t dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)()
{
  return MEMORY[0x24BE5C160]();
}

uint64_t Message.isInitialized.getter()
{
  return MEMORY[0x24BE5C1B0]();
}

uint64_t Message.debugDescription.getter()
{
  return MEMORY[0x24BE5C1D0]();
}

uint64_t Message.hash(into:)()
{
  return MEMORY[0x24BE5C1E8]();
}

uint64_t dispatch thunk of Visitor.visitMapField<A, B>(fieldType:value:fieldNumber:)()
{
  return MEMORY[0x24BE5C210]();
}

{
  return MEMORY[0x24BE5C218]();
}

uint64_t dispatch thunk of Visitor.visitPackedEnumField<A>(value:fieldNumber:)()
{
  return MEMORY[0x24BE5C230]();
}

uint64_t dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)()
{
  return MEMORY[0x24BE5C270]();
}

uint64_t dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)()
{
  return MEMORY[0x24BE5C278]();
}

uint64_t dispatch thunk of Visitor.visitRepeatedBytesField(value:fieldNumber:)()
{
  return MEMORY[0x24BE5C280]();
}

uint64_t dispatch thunk of Visitor.visitSingularBytesField(value:fieldNumber:)()
{
  return MEMORY[0x24BE5C298]();
}

uint64_t dispatch thunk of Visitor.visitSingularInt64Field(value:fieldNumber:)()
{
  return MEMORY[0x24BE5C2B0]();
}

uint64_t dispatch thunk of Visitor.visitRepeatedStringField(value:fieldNumber:)()
{
  return MEMORY[0x24BE5C2C0]();
}

uint64_t dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)()
{
  return MEMORY[0x24BE5C2D8]();
}

uint64_t dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)()
{
  return MEMORY[0x24BE5C2E8]();
}

uint64_t dispatch thunk of Visitor.visitSingularUInt64Field(value:fieldNumber:)()
{
  return MEMORY[0x24BE5C2F8]();
}

uint64_t dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)()
{
  return MEMORY[0x24BE5C300]();
}

uint64_t dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)()
{
  return MEMORY[0x24BE5C310]();
}

uint64_t type metadata accessor for _NameMap.NameDescription()
{
  return MEMORY[0x24BE5C330]();
}

uint64_t _NameMap.init(dictionaryLiteral:)()
{
  return MEMORY[0x24BE5C340]();
}

uint64_t _NameMap.init()()
{
  return MEMORY[0x24BE5C348]();
}

uint64_t type metadata accessor for _NameMap()
{
  return MEMORY[0x24BE5C350]();
}

uint64_t dispatch thunk of Hashable.hash(into:)()
{
  return MEMORY[0x24BEE0618]();
}

uint64_t dispatch thunk of static Equatable.== infix(_:_:)()
{
  return MEMORY[0x24BEE0980]();
}

uint64_t String.data(using:allowLossyConversion:)()
{
  return MEMORY[0x24BDCFA38]();
}

uint64_t static String.Encoding.utf8.getter()
{
  return MEMORY[0x24BDCFAC8]();
}

uint64_t type metadata accessor for String.Encoding()
{
  return MEMORY[0x24BDCFAF8]();
}

uint64_t String.init<A>(describing:)()
{
  return MEMORY[0x24BEE09F0]();
}

uint64_t String.hash(into:)()
{
  return MEMORY[0x24BEE0B20]();
}

Swift::Void __swiftcall String.append(_:)(Swift::String a1)
{
  MEMORY[0x24BEE0BC0](a1._countAndFlagsBits, a1._object);
}

uint64_t type metadata accessor for Optional()
{
  return MEMORY[0x24BEE1C68]();
}

Swift::Void __swiftcall _StringGuts.grow(_:)(Swift::Int a1)
{
  MEMORY[0x24BEE2510](a1);
}

uint64_t DecodingError.Context.init(codingPath:debugDescription:underlyingError:)()
{
  return MEMORY[0x24BEE26E8]();
}

uint64_t type metadata accessor for DecodingError()
{
  return MEMORY[0x24BEE2710]();
}

uint64_t static _DictionaryStorage.allocate(capacity:)()
{
  return MEMORY[0x24BEE3098]();
}

Swift::Int __swiftcall _findStringSwitchCase(cases:string:)(Swift::OpaquePointer cases, Swift::String string)
{
  return MEMORY[0x24BEE3290](cases._rawValue, string._countAndFlagsBits, string._object);
}

uint64_t KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)()
{
  return MEMORY[0x24BEE32B8]();
}

uint64_t KeyedDecodingContainer.codingPath.getter()
{
  return MEMORY[0x24BEE32C0]();
}

uint64_t KeyedDecodingContainer.decodeIfPresent(_:forKey:)()
{
  return MEMORY[0x24BEE32F8]();
}

uint64_t KeyedDecodingContainer.decode(_:forKey:)()
{
  return MEMORY[0x24BEE3358]();
}

uint64_t KeyedDecodingContainer.decode<A>(_:forKey:)()
{
  return MEMORY[0x24BEE3380]();
}

uint64_t KeyedDecodingContainer.allKeys.getter()
{
  return MEMORY[0x24BEE33C8]();
}

uint64_t KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)()
{
  return MEMORY[0x24BEE3408]();
}

uint64_t KeyedEncodingContainer.encodeIfPresent(_:forKey:)()
{
  return MEMORY[0x24BEE3448]();
}

uint64_t KeyedEncodingContainer.encode(_:forKey:)()
{
  return MEMORY[0x24BEE34A8]();
}

uint64_t KeyedEncodingContainer.encode<A>(_:forKey:)()
{
  return MEMORY[0x24BEE34D0]();
}

uint64_t dispatch thunk of CustomStringConvertible.description.getter()
{
  return MEMORY[0x24BEE3568]();
}

uint64_t _stringCompareWithSmolCheck(_:_:expecting:)()
{
  return MEMORY[0x24BEE3A30]();
}

uint64_t Hasher.init(_seed:)()
{
  return MEMORY[0x24BEE42E0]();
}

Swift::Void __swiftcall Hasher._combine(_:)(Swift::UInt a1)
{
  MEMORY[0x24BEE42F8](a1);
}

Swift::Int __swiftcall Hasher._finalize()()
{
  return MEMORY[0x24BEE4328]();
}

uint64_t dispatch thunk of Decoder.container<A>(keyedBy:)()
{
  return MEMORY[0x24BEE4608]();
}

uint64_t dispatch thunk of Encoder.container<A>(keyedBy:)()
{
  return MEMORY[0x24BEE4638]();
}

uint64_t CodingKey.description.getter()
{
  return MEMORY[0x24BEE4A08]();
}

uint64_t CodingKey.debugDescription.getter()
{
  return MEMORY[0x24BEE4A10]();
}

void free(void *a1)
{
  MEMORY[0x24BDAE450](a1);
}

void *__cdecl malloc(size_t __size)
{
  return (void *)MEMORY[0x24BDAED08](__size);
}

int memcmp(const void *__s1, const void *__s2, size_t __n)
{
  return MEMORY[0x24BDAEE78](__s1, __s2, __n);
}

void *__cdecl memcpy(void *__dst, const void *__src, size_t __n)
{
  return (void *)MEMORY[0x24BDAEE80](__dst, __src, __n);
}

uint64_t swift_allocError()
{
  return MEMORY[0x24BEE4B68]();
}

uint64_t swift_allocObject()
{
  return MEMORY[0x24BEE4B70]();
}

uint64_t swift_beginAccess()
{
  return MEMORY[0x24BEE4BB8]();
}

uint64_t swift_bridgeObjectRelease()
{
  return MEMORY[0x24BEE4BC0]();
}

uint64_t swift_bridgeObjectRetain()
{
  return MEMORY[0x24BEE4BD0]();
}

uint64_t swift_endAccess()
{
  return MEMORY[0x24BEE4C98]();
}

uint64_t swift_errorRelease()
{
  return MEMORY[0x24BEE4CA0]();
}

uint64_t swift_getEnumCaseMultiPayload()
{
  return MEMORY[0x24BEE4D08]();
}

uint64_t swift_getEnumTagSinglePayloadGeneric()
{
  return MEMORY[0x24BEE4D10]();
}

uint64_t swift_getSingletonMetadata()
{
  return MEMORY[0x24BEE4DD0]();
}

uint64_t swift_getTypeByMangledNameInContext2()
{
  return MEMORY[0x24BEE4E10]();
}

uint64_t swift_getTypeByMangledNameInContextInMetadataState2()
{
  return MEMORY[0x24BEE4E18]();
}

uint64_t swift_getWitnessTable()
{
  return MEMORY[0x24BEE4E20]();
}

uint64_t swift_initEnumMetadataMultiPayload()
{
  return MEMORY[0x24BEE4E30]();
}

uint64_t swift_initStructMetadata()
{
  return MEMORY[0x24BEE4E58]();
}

uint64_t swift_once()
{
  return MEMORY[0x24BEE4EC8]();
}

uint64_t swift_release()
{
  return MEMORY[0x24BEE4EF8]();
}

uint64_t swift_retain()
{
  return MEMORY[0x24BEE4F08]();
}

uint64_t swift_slowAlloc()
{
  return MEMORY[0x24BEE4F38]();
}

uint64_t swift_storeEnumTagMultiPayload()
{
  return MEMORY[0x24BEE4F58]();
}

uint64_t swift_storeEnumTagSinglePayloadGeneric()
{
  return MEMORY[0x24BEE4F60]();
}

